uint64_t WebCore::HTMLAnchorElement::rootEditableElementForSelectionOnMouseDown(WebCore::HTMLAnchorElement *this, void *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t result;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;

  if (!*((_BYTE *)this + 120))
    return 0;
  if (byte_1ECE833ED == 1)
  {
    v2 = dword_1ECE83420 + 1;
  }
  else
  {
    *(_QWORD *)&dword_1ECE83420 = 0;
    qword_1ECE83418 = 0;
    v2 = 1;
    byte_1ECE833ED = 1;
  }
  dword_1ECE83420 = v2;
  v3 = *((_QWORD *)this + 2);
  v4 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0xFFFFFFFFFFFFLL) == 0 || !*(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 8) || !qword_1ECE83418)
    return 0;
  v5 = *(_DWORD *)(qword_1ECE83418 - 8);
  v6 = (v4 + ~(v3 << 32)) ^ ((unint64_t)(v4 + ~(v3 << 32)) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  for (i = 1; ; v9 = (v11 + i++) & v5)
  {
    v11 = v9;
    v12 = *(_QWORD *)(qword_1ECE83418 + 16 * v9);
    if (v12 != -1)
    {
      if (!v12)
        return 0;
      if (v12 == v4)
        break;
    }
  }
  v13 = *(_QWORD *)(qword_1ECE83418 + 16 * v11 + 8);
  if (!v13)
    return 0;
  do
    v14 = __ldaxr((unsigned int *)v13);
  while (__stlxr(v14 + 1, (unsigned int *)v13));
  result = *(_QWORD *)(v13 + 8);
  do
  {
    v16 = __ldaxr((unsigned int *)v13);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)v13));
  if (!v17)
  {
    v20 = result;
    v21 = (WTF *)v13;
    atomic_store(1u, (unsigned int *)v13);
    v18 = *(unsigned int *)(v13 + 28);
    if ((_DWORD)v18)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v21 + 2), (WTF::StringImpl *)(*((_QWORD *)v21 + 2) + 32 * v18));
    v19 = (WTF *)*((_QWORD *)v21 + 2);
    if (v19)
    {
      *((_QWORD *)v21 + 2) = 0;
      *((_DWORD *)v21 + 6) = 0;
      WTF::fastFree(v19, a2);
    }
    WTF::fastFree(v21, a2);
    return v20;
  }
  return result;
}

uint64_t WebCore::HTMLAnchorElement::willRespondToMouseClickEventsWithEditability(_WORD *a1, int a2)
{
  if ((a1[15] & 1) != 0)
    return 1;
  if (((*(uint64_t (**)(_WORD *))(*(_QWORD *)a1 + 960))(a1) & 1) != 0)
    return 0;
  return WebCore::Node::willRespondToMouseClickEventsWithEditability((uint64_t)a1, a2);
}

int *WebCore::HTMLAnchorElement::referrerPolicyForBindings@<X0>(WebCore::HTMLAnchorElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unint64_t v11;
  int *result;
  unsigned __int8 v13;
  _DWORD *v14;
  _DWORD *v15;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::referrerpolicyAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (v9)
  {
    v10 = *(unsigned __int16 **)(v9 + 8);
    v11 = *(unsigned int *)(v9 + 4) | ((unint64_t)((*(_DWORD *)(v9 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v10 = 0;
    v11 = 0x100000000;
  }
  result = (int *)WebCore::parseReferrerPolicy(v10, v11, 2);
  v13 = result;
  if ((unsigned __int16)result <= 0x100u)
    v13 = 0;
  {
    v15 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v15 += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_3::operator() const(void)::impl += 2;
    result = &WebCore::convertEnumerationToString(WebCore::CanvasLineCap)::$_2::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::values[0] = (uint64_t)v15;
    unk_1EE2F45C0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_0::operator() const(void)::impl;
    qword_1EE2F45C8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_1::operator() const(void)::impl;
    unk_1EE2F45D0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_2::operator() const(void)::impl;
    qword_1EE2F45D8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_3::operator() const(void)::impl;
    unk_1EE2F45E0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_4::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_6::operator() const(void)::impl += 2;
    qword_1EE2F45E8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_5::operator() const(void)::impl;
    unk_1EE2F45F0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_6::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_7::operator() const(void)::impl += 2;
    qword_1EE2F45F8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_7::operator() const(void)::impl;
  }
  v14 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::values[v13];
  if (v14)
    *v14 += 2;
  *a2 = v14;
  return result;
}

uint64_t WebCore::FormAssociatedCustomElement::isFormListedElement(WebCore::FormAssociatedCustomElement *this)
{
  return 1;
}

uint64_t WebCore::FormAssociatedCustomElement::refFormAssociatedElement(uint64_t this)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this + 56) + 8) + 24) += 2;
  return this;
}

unsigned int *WebCore::FormAssociatedCustomElement::derefFormAssociatedElement(WebCore::FormAssociatedCustomElement *this, void *a2)
{
  uint64_t v2;
  unsigned int *result;

  v2 = *((_QWORD *)this + 7);
  if (v2)
    result = *(unsigned int **)(v2 + 8);
  else
    result = 0;
  if (result[6] == 2)
  {
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
  }
  else
  {
    result[6] -= 2;
  }
  return result;
}

uint64_t WebCore::FormAssociatedCustomElement::isValidatedFormListedElement(WebCore::FormAssociatedCustomElement *this)
{
  return 1;
}

uint64_t WebCore::FormAssociatedCustomElement::isFormControlElement(WebCore::FormAssociatedCustomElement *this)
{
  return 0;
}

uint64_t WebCore::FormAssociatedCustomElement::hasBadInput(WebCore::FormAssociatedCustomElement *this)
{
  return HIBYTE(*((unsigned __int16 *)this + 32)) & 1;
}

uint64_t WebCore::FormAssociatedCustomElement::patternMismatch(WebCore::FormAssociatedCustomElement *this)
{
  return (*((unsigned __int16 *)this + 32) >> 2) & 1;
}

uint64_t WebCore::FormAssociatedCustomElement::rangeOverflow(WebCore::FormAssociatedCustomElement *this)
{
  return (*((unsigned __int16 *)this + 32) >> 6) & 1;
}

uint64_t WebCore::FormAssociatedCustomElement::rangeUnderflow(WebCore::FormAssociatedCustomElement *this)
{
  return (*((unsigned __int16 *)this + 32) >> 5) & 1;
}

uint64_t WebCore::FormAssociatedCustomElement::stepMismatch(WebCore::FormAssociatedCustomElement *this)
{
  return (*((unsigned __int16 *)this + 32) >> 7) & 1;
}

uint64_t WebCore::FormAssociatedCustomElement::tooShort(WebCore::FormAssociatedCustomElement *this)
{
  return (*((unsigned __int16 *)this + 32) >> 4) & 1;
}

uint64_t WebCore::FormAssociatedCustomElement::tooLong(WebCore::FormAssociatedCustomElement *this)
{
  return (*((unsigned __int16 *)this + 32) >> 3) & 1;
}

uint64_t WebCore::FormAssociatedCustomElement::typeMismatch(WebCore::FormAssociatedCustomElement *this)
{
  return (*((unsigned __int16 *)this + 32) >> 1) & 1;
}

uint64_t WebCore::FormAssociatedCustomElement::valueMissing(WebCore::FormAssociatedCustomElement *this)
{
  return *((_WORD *)this + 32) & 1;
}

uint64_t WebCore::ValidatedFormListedElement::supportsReadOnly(WebCore::ValidatedFormListedElement *this)
{
  return 0;
}

uint64_t WebCore::FormAssociatedCustomElement::readOnlyBarsFromConstraintValidation(WebCore::FormAssociatedCustomElement *this)
{
  return 1;
}

void WebCore::FormAttributeTargetObserver::~FormAttributeTargetObserver(WebCore::FormAttributeTargetObserver *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  *(_QWORD *)this = off_1E33A5038;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 2);
  if (v3)
    WebCore::IdTargetObserverRegistry::removeObserver(v3, (WebCore::FormAttributeTargetObserver *)((char *)this + 24), this);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  if (v5)
  {
    if (*v5)
      --*v5;
    else
      __break(0xC471u);
  }
}

{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  *(_QWORD *)this = off_1E33A5038;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 2);
  if (v3)
    WebCore::IdTargetObserverRegistry::removeObserver(v3, (WebCore::FormAttributeTargetObserver *)((char *)this + 24), this);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  if (v5)
  {
    if (!*v5)
    {
      __break(0xC471u);
      JUMPOUT(0x195BAD60CLL);
    }
    --*v5;
  }
  if (*((_DWORD *)this + 2))
  {
    *((_QWORD *)this + 4) = 0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    WTF::fastFree(this, a2);
  }
}

uint64_t WebCore::FormListedElement::appendFormData()
{
  return 0;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLAllNamedSubCollection,(WebCore::CollectionTraversalType)0>::length(WebCore::HTMLAllNamedSubCollection *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::HTMLAllNamedSubCollection *v30;

  if ((*((_BYTE *)this + 80) & 1) != 0)
    return *((unsigned int *)this + 15);
  if ((*((_BYTE *)this + 80) & 2) == 0 && !*((_QWORD *)this + 6))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8);
    v3 = v2 + 4 * (((unint64_t)*(unsigned __int16 *)((char *)this + 21) >> 5) & 0xF);
    ++*(_DWORD *)(v3 + 1768);
    if ((*((_BYTE *)this + 22) & 2) != 0)
    {
      v30 = this;
      WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v2 + 1760), (uint64_t *)&v30, (uint64_t)&v29);
    }
  }
  if ((*(_WORD *)((_BYTE *)this + 21) & 0x200) != 0
    && (v28 = *((_QWORD *)this + 3), (*(_BYTE *)(v28 + 22) & 0x18) != 0))
  {
    v4 = *(char **)(v28 + 40);
  }
  else
  {
    v4 = (char *)this + 24;
  }
  v5 = *(_QWORD *)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  if (v6)
  {
    v7 = 0;
    while ((*(_WORD *)(v6 + 28) & 8) == 0)
    {
      v6 = *(_QWORD *)(v6 + 56);
      if (!v6)
        goto LABEL_14;
    }
    while (1)
    {
LABEL_37:
      if (WebCore::HTMLAllNamedSubCollection::elementMatches(this, (WebCore::Element *)v6))
      {
        v12 = *((_DWORD *)this + 18);
        LODWORD(v7) = *((_DWORD *)this + 19);
        v13 = v12;
LABEL_39:
        v14 = v7;
        if ((_DWORD)v7 == v13)
        {
          v18 = v7 + ((unint64_t)v7 >> 2);
          if (v18 >= 0x10)
            v19 = v18 + 1;
          else
            v19 = 16;
          if (v19 <= (unint64_t)v7 + 1)
            v20 = v7 + 1;
          else
            v20 = v19;
          WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)this + 64, v20);
          v21 = *((unsigned int *)this + 19);
          v22 = *((_QWORD *)this + 8);
          v23 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v6);
          if (v23)
          {
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 + 1, v23));
          }
          *(_QWORD *)(v22 + 8 * v21) = v23;
        }
        else
        {
          v15 = *((_QWORD *)this + 8);
          v16 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v6);
          if (v16)
          {
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 + 1, v16));
          }
          *(_QWORD *)(v15 + 8 * v14) = v16;
        }
        v7 = (*((_DWORD *)this + 19) + 1);
        *((_DWORD *)this + 19) = v7;
        while (1)
        {
          v25 = *(_QWORD *)(v6 + 80);
          if (!v25)
          {
            if (v6 == v5)
              goto LABEL_75;
            while (1)
            {
              v25 = *(_QWORD *)(v6 + 56);
              if (v25)
                break;
              v6 = *(_QWORD *)(v6 + 32);
              if (v6)
                v27 = v6 == v5;
              else
                v27 = 1;
              if (v27)
                goto LABEL_75;
            }
          }
          if ((*(_WORD *)(v25 + 28) & 8) == 0)
            break;
          v6 = v25;
LABEL_66:
          if (WebCore::HTMLAllNamedSubCollection::elementMatches(this, (WebCore::Element *)v6))
          {
            v13 = *((_DWORD *)this + 18);
            goto LABEL_39;
          }
        }
        while (v25 != v5)
        {
          while (1)
          {
            v6 = *(_QWORD *)(v25 + 56);
            if (v6)
              break;
            v25 = *(_QWORD *)(v25 + 32);
            if (v25)
              v26 = v25 == v5;
            else
              v26 = 1;
            if (v26)
              goto LABEL_75;
          }
          v25 = *(_QWORD *)(v25 + 56);
          if ((*(_WORD *)(v6 + 28) & 8) != 0)
            goto LABEL_66;
        }
LABEL_75:
        *((_BYTE *)this + 80) |= 2u;
        if (*((_DWORD *)this + 18) != v12)
        {
          WebCore::reportExtraMemoryAllocatedForCollectionIndexCache((WebCore *)(8
                                                                               * (*((_DWORD *)this + 18)
                                                                                              - v12)));
          v7 = *((unsigned int *)this + 19);
        }
        goto LABEL_14;
      }
      v9 = *(_QWORD *)(v6 + 80);
      if (!v9)
      {
        if (v6 == v5)
          goto LABEL_9;
        while (1)
        {
          v9 = *(_QWORD *)(v6 + 56);
          if (v9)
            break;
          v6 = *(_QWORD *)(v6 + 32);
          if (v6)
            v11 = v6 == v5;
          else
            v11 = 1;
          if (v11)
            goto LABEL_9;
        }
      }
      if ((*(_WORD *)(v9 + 28) & 8) == 0)
        break;
      v6 = v9;
    }
    while (v9 != v5)
    {
      while (1)
      {
        v6 = *(_QWORD *)(v9 + 56);
        if (v6)
          break;
        v9 = *(_QWORD *)(v9 + 32);
        if (v9)
          v10 = v9 == v5;
        else
          v10 = 1;
        if (v10)
          goto LABEL_9;
      }
      v9 = *(_QWORD *)(v9 + 56);
      if ((*(_WORD *)(v6 + 28) & 8) != 0)
        goto LABEL_37;
    }
  }
LABEL_9:
  v7 = 0;
LABEL_14:
  *((_DWORD *)this + 15) = v7;
  *((_BYTE *)this + 80) |= 1u;
  return v7;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLAllNamedSubCollection,(WebCore::CollectionTraversalType)0>::item(uint64_t this, unsigned int a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  char v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  int v50;
  int v51;
  uint64_t v52;
  BOOL v53;
  BOOL v54;
  uint64_t v55;
  BOOL v56;
  BOOL v57;
  uint64_t v58;
  BOOL v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v3 = this;
  v4 = *(_BYTE *)(this + 80);
  if ((v4 & 1) != 0 && *(_DWORD *)(this + 60) <= a2)
    return 0;
  if ((*(_BYTE *)(this + 80) & 2) == 0)
  {
    v5 = *(_QWORD *)(this + 48);
    if (v5)
    {
      v6 = *(_DWORD *)(this + 56);
      v7 = a2 - v6;
      if (a2 > v6)
      {
        if ((*(_BYTE *)(this + 80) & 1) != 0)
        {
          v8 = *(_DWORD *)(this + 60);
          if (v8 - a2 < v7)
          {
            if ((*(_WORD *)(this + 21) & 0x200) != 0
              && (v63 = *(_QWORD *)(this + 24), (*(_BYTE *)(v63 + 22) & 0x18) != 0))
            {
              v9 = *(uint64_t **)(v63 + 40);
            }
            else
            {
              v9 = (uint64_t *)(this + 24);
            }
            v10 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::HTMLAllNamedSubCollection>((WebCore::HTMLAllNamedSubCollection *)this, *v9);
            v5 = v11;
            *(_QWORD *)(v3 + 40) = v10;
            *(_QWORD *)(v3 + 48) = v11;
            if (v8 - 1 <= a2)
              goto LABEL_140;
            v12 = v8 + ~a2;
            if (!v12)
              goto LABEL_140;
            v13 = v10;
            while ((*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL) != 0)
            {
              if ((*(_WORD *)((*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
              {
                v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
                do
                {
                  v16 = *(_QWORD *)(v5 + 88);
                  if (!v16)
                    break;
                  v5 = *(_QWORD *)(v5 + 88);
                }
                while ((*(_WORD *)(v16 + 28) & 4) != 0);
              }
              else
              {
                v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
              }
LABEL_18:
              while ((*(_WORD *)(v5 + 28) & 8) == 0)
              {
                if ((*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL) != 0)
                {
                  if ((*(_WORD *)((*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
                  {
                    v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
                    do
                    {
                      v15 = *(_QWORD *)(v5 + 88);
                      if (!v15)
                        break;
                      v5 = *(_QWORD *)(v5 + 88);
                    }
                    while ((*(_WORD *)(v15 + 28) & 4) != 0);
                  }
                  else
                  {
                    v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
                  }
                }
                else
                {
                  v5 = *(_QWORD *)(v5 + 32);
                  if (v5 == v13)
                    goto LABEL_139;
                }
                if (!v5)
                  goto LABEL_139;
              }
              *(_QWORD *)(v3 + 48) = v5;
              if (WebCore::HTMLAllNamedSubCollection::elementMatches((WebCore::HTMLAllNamedSubCollection *)v3, (WebCore::Element *)v5)&& !--v12)
              {
                goto LABEL_140;
              }
            }
            v5 = *(_QWORD *)(v5 + 32);
            if (v5 != v13 && v5 != 0)
              goto LABEL_18;
            goto LABEL_139;
          }
        }
        if (a2 != v6)
        {
          v24 = 0;
          v25 = *(_QWORD *)(this + 40);
          while (1)
          {
            v26 = *(_QWORD *)(v5 + 80);
            if (!v26)
            {
              if (v5 == v25)
                goto LABEL_76;
              while (1)
              {
                v26 = *(_QWORD *)(v5 + 56);
                if (v26)
                  break;
                v5 = *(_QWORD *)(v5 + 32);
                if (v5)
                  v28 = v5 == v25;
                else
                  v28 = 1;
                if (v28)
                  goto LABEL_76;
              }
            }
            if ((*(_WORD *)(v26 + 28) & 8) == 0)
              break;
            v5 = v26;
LABEL_66:
            *(_QWORD *)(v3 + 48) = v5;
            if (WebCore::HTMLAllNamedSubCollection::elementMatches((WebCore::HTMLAllNamedSubCollection *)v3, (WebCore::Element *)v5)&& ++v24 == v7)
            {
              goto LABEL_140;
            }
          }
          while (v26 != v25)
          {
            while (1)
            {
              v5 = *(_QWORD *)(v26 + 56);
              if (v5)
                break;
              v26 = *(_QWORD *)(v26 + 32);
              if (v26)
                v27 = v26 == v25;
              else
                v27 = 1;
              if (v27)
                goto LABEL_76;
            }
            v26 = *(_QWORD *)(v26 + 56);
            if ((*(_WORD *)(v5 + 28) & 8) != 0)
              goto LABEL_66;
          }
LABEL_76:
          v5 = 0;
          *(_QWORD *)(v3 + 48) = 0;
          *(_DWORD *)(v3 + 56) = v24 + v6;
          *(_DWORD *)(v3 + 60) = v24 + v6 + 1;
          v29 = v4 | 1;
          goto LABEL_174;
        }
        return v5;
      }
      if (a2 >= v6)
        return v5;
      v20 = v6 - a2;
      if (v6 - a2 > a2)
      {
        if ((*(_WORD *)(this + 21) & 0x200) != 0 && (v64 = *(_QWORD *)(this + 24), (*(_BYTE *)(v64 + 22) & 0x18) != 0))
          v21 = *(uint64_t **)(v64 + 40);
        else
          v21 = (uint64_t *)(this + 24);
        v22 = *v21;
        v23 = *(_QWORD *)(*v21 + 80);
        if (v23)
        {
          v5 = 0;
          while ((*(_WORD *)(v23 + 28) & 8) == 0)
          {
            v23 = *(_QWORD *)(v23 + 56);
            if (!v23)
              goto LABEL_179;
          }
          v5 = v23;
          if (WebCore::HTMLAllNamedSubCollection::elementMatches((WebCore::HTMLAllNamedSubCollection *)this, (WebCore::Element *)v23))
          {
            goto LABEL_179;
          }
          while (1)
          {
            v58 = *(_QWORD *)(v5 + 80);
            if (!v58)
            {
              if (v5 == v22)
                goto LABEL_50;
              while (1)
              {
                v58 = *(_QWORD *)(v5 + 56);
                if (v58)
                  break;
                v5 = *(_QWORD *)(v5 + 32);
                if (v5)
                  v60 = v5 == v22;
                else
                  v60 = 1;
                if (v60)
                  goto LABEL_50;
              }
            }
            if ((*(_WORD *)(v58 + 28) & 8) == 0)
              break;
            v5 = v58;
LABEL_243:
            if (WebCore::HTMLAllNamedSubCollection::elementMatches((WebCore::HTMLAllNamedSubCollection *)v3, (WebCore::Element *)v5))
            {
              goto LABEL_179;
            }
          }
          while (v58 != v22)
          {
            while (1)
            {
              v5 = *(_QWORD *)(v58 + 56);
              if (v5)
                break;
              v58 = *(_QWORD *)(v58 + 32);
              if (v58)
                v59 = v58 == v22;
              else
                v59 = 1;
              if (v59)
                goto LABEL_50;
            }
            v58 = *(_QWORD *)(v58 + 56);
            if ((*(_WORD *)(v5 + 28) & 8) != 0)
              goto LABEL_243;
          }
        }
LABEL_50:
        v5 = 0;
LABEL_179:
        *(_QWORD *)(v3 + 40) = v22;
        *(_QWORD *)(v3 + 48) = v5;
        *(_DWORD *)(v3 + 56) = 0;
        if (a2)
        {
          v51 = 0;
          *(_DWORD *)(v3 + 56) = 0;
          while (1)
          {
            v52 = *(_QWORD *)(v5 + 80);
            if (!v52)
            {
              if (v5 == v22)
                goto LABEL_204;
              while (1)
              {
                v52 = *(_QWORD *)(v5 + 56);
                if (v52)
                  break;
                v5 = *(_QWORD *)(v5 + 32);
                if (v5)
                  v54 = v5 == v22;
                else
                  v54 = 1;
                if (v54)
                  goto LABEL_204;
              }
            }
            if ((*(_WORD *)(v52 + 28) & 8) == 0)
              break;
            v5 = v52;
LABEL_194:
            *(_QWORD *)(v3 + 48) = v5;
            if (WebCore::HTMLAllNamedSubCollection::elementMatches((WebCore::HTMLAllNamedSubCollection *)v3, (WebCore::Element *)v5))
            {
              *(_DWORD *)(v3 + 56) = ++v51;
              if (v51 == a2)
                return v5;
            }
          }
          while (v52 != v22)
          {
            while (1)
            {
              v5 = *(_QWORD *)(v52 + 56);
              if (v5)
                break;
              v52 = *(_QWORD *)(v52 + 32);
              if (v52)
                v53 = v52 == v22;
              else
                v53 = 1;
              if (v53)
                goto LABEL_204;
            }
            v52 = *(_QWORD *)(v52 + 56);
            if ((*(_WORD *)(v5 + 28) & 8) != 0)
              goto LABEL_194;
          }
LABEL_204:
          v5 = 0;
          *(_QWORD *)(v3 + 48) = 0;
        }
        return v5;
      }
      if (!v20)
      {
LABEL_140:
        *(_DWORD *)(v3 + 56) = a2;
        return v5;
      }
      v42 = *(_QWORD *)(this + 40);
      while ((*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v45 = *(_QWORD *)(v5 + 88);
            if (!v45)
              break;
            v5 = *(_QWORD *)(v5 + 88);
          }
          while ((*(_WORD *)(v45 + 28) & 4) != 0);
        }
        else
        {
          v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
        }
LABEL_119:
        while ((*(_WORD *)(v5 + 28) & 8) == 0)
        {
          if ((*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_WORD *)((*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
            {
              v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
              do
              {
                v44 = *(_QWORD *)(v5 + 88);
                if (!v44)
                  break;
                v5 = *(_QWORD *)(v5 + 88);
              }
              while ((*(_WORD *)(v44 + 28) & 4) != 0);
            }
            else
            {
              v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
            }
          }
          else
          {
            v5 = *(_QWORD *)(v5 + 32);
            if (v5 == v42)
              goto LABEL_139;
          }
          if (!v5)
            goto LABEL_139;
        }
        *(_QWORD *)(v3 + 48) = v5;
        if (WebCore::HTMLAllNamedSubCollection::elementMatches((WebCore::HTMLAllNamedSubCollection *)v3, (WebCore::Element *)v5)&& !--v20)
        {
          goto LABEL_140;
        }
      }
      v5 = *(_QWORD *)(v5 + 32);
      if (v5 != v42 && v5 != 0)
        goto LABEL_119;
LABEL_139:
      v5 = 0;
      *(_QWORD *)(v3 + 48) = 0;
      goto LABEL_140;
    }
    if ((*(_BYTE *)(this + 80) & 1) != 0)
    {
      v30 = *(_DWORD *)(this + 60);
      if (v30 - a2 < a2)
      {
        if ((*(_WORD *)(this + 21) & 0x200) != 0 && (v62 = *(_QWORD *)(this + 24), (*(_BYTE *)(v62 + 22) & 0x18) != 0))
          v31 = *(uint64_t **)(v62 + 40);
        else
          v31 = (uint64_t *)(this + 24);
        v32 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::HTMLAllNamedSubCollection>((WebCore::HTMLAllNamedSubCollection *)this, *v31);
        v5 = v33;
        *(_QWORD *)(v3 + 40) = v32;
        *(_QWORD *)(v3 + 48) = v33;
        if (v30 - 1 <= a2)
          goto LABEL_140;
        v34 = v30 + ~a2;
        if (!v34)
          goto LABEL_140;
        v35 = v32;
        while ((*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_WORD *)((*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
            do
            {
              v38 = *(_QWORD *)(v5 + 88);
              if (!v38)
                break;
              v5 = *(_QWORD *)(v5 + 88);
            }
            while ((*(_WORD *)(v38 + 28) & 4) != 0);
          }
          else
          {
            v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
          }
LABEL_88:
          while ((*(_WORD *)(v5 + 28) & 8) == 0)
          {
            if ((*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL) != 0)
            {
              if ((*(_WORD *)((*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
              {
                v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
                do
                {
                  v37 = *(_QWORD *)(v5 + 88);
                  if (!v37)
                    break;
                  v5 = *(_QWORD *)(v5 + 88);
                }
                while ((*(_WORD *)(v37 + 28) & 4) != 0);
              }
              else
              {
                v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
              }
            }
            else
            {
              v5 = *(_QWORD *)(v5 + 32);
              if (v5 == v35)
                goto LABEL_139;
            }
            if (!v5)
              goto LABEL_139;
          }
          *(_QWORD *)(v3 + 48) = v5;
          if (WebCore::HTMLAllNamedSubCollection::elementMatches((WebCore::HTMLAllNamedSubCollection *)v3, (WebCore::Element *)v5)&& !--v34)
          {
            goto LABEL_140;
          }
        }
        v5 = *(_QWORD *)(v5 + 32);
        if (v5 != v35 && v5 != 0)
          goto LABEL_88;
        goto LABEL_139;
      }
    }
    else
    {
      v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 40) + 8);
      v19 = v18 + 4 * (((unint64_t)*(unsigned __int16 *)(this + 21) >> 5) & 0xF);
      ++*(_DWORD *)(v19 + 1768);
      if ((*(_BYTE *)(this + 22) & 2) != 0)
      {
        v66 = this;
        WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v18 + 1760), &v66, (uint64_t)&v65);
      }
    }
    if ((*(_WORD *)(v3 + 21) & 0x200) != 0 && (v61 = *(_QWORD *)(v3 + 24), (*(_BYTE *)(v61 + 22) & 0x18) != 0))
      v39 = *(_QWORD *)(v61 + 40);
    else
      v39 = v3 + 24;
    v40 = *(_QWORD *)v39;
    v41 = *(_QWORD *)(*(_QWORD *)v39 + 80);
    if (v41)
    {
      v5 = 0;
      while ((*(_WORD *)(v41 + 28) & 8) == 0)
      {
        v41 = *(_QWORD *)(v41 + 56);
        if (!v41)
          goto LABEL_144;
      }
      v5 = v41;
      if (WebCore::HTMLAllNamedSubCollection::elementMatches((WebCore::HTMLAllNamedSubCollection *)v3, (WebCore::Element *)v41))
      {
LABEL_144:
        *(_QWORD *)(v3 + 40) = v40;
        *(_QWORD *)(v3 + 48) = v5;
        *(_DWORD *)(v3 + 56) = 0;
        if (a2)
        {
          if (v5)
          {
            v46 = 0;
            *(_DWORD *)(v3 + 56) = 0;
            while (1)
            {
              v47 = *(_QWORD *)(v5 + 80);
              if (!v47)
              {
                if (v5 == v40)
                  goto LABEL_170;
                while (1)
                {
                  v47 = *(_QWORD *)(v5 + 56);
                  if (v47)
                    break;
                  v5 = *(_QWORD *)(v5 + 32);
                  if (v5)
                    v49 = v5 == v40;
                  else
                    v49 = 1;
                  if (v49)
                    goto LABEL_170;
                }
              }
              if ((*(_WORD *)(v47 + 28) & 8) == 0)
                break;
              v5 = v47;
LABEL_160:
              *(_QWORD *)(v3 + 48) = v5;
              if (WebCore::HTMLAllNamedSubCollection::elementMatches((WebCore::HTMLAllNamedSubCollection *)v3, (WebCore::Element *)v5))
              {
                *(_DWORD *)(v3 + 56) = ++v46;
                if (v46 == a2)
                  return v5;
              }
            }
            while (v47 != v40)
            {
              while (1)
              {
                v5 = *(_QWORD *)(v47 + 56);
                if (v5)
                  break;
                v47 = *(_QWORD *)(v47 + 32);
                if (v47)
                  v48 = v47 == v40;
                else
                  v48 = 1;
                if (v48)
                  goto LABEL_170;
              }
              v47 = *(_QWORD *)(v47 + 56);
              if ((*(_WORD *)(v5 + 28) & 8) != 0)
                goto LABEL_160;
            }
LABEL_170:
            *(_QWORD *)(v3 + 48) = 0;
            v50 = v46 + 1;
            goto LABEL_173;
          }
        }
        else if (v5)
        {
          return v5;
        }
        v50 = 0;
LABEL_173:
        v5 = 0;
        *(_DWORD *)(v3 + 60) = v50;
        v29 = *(_BYTE *)(v3 + 80) | 1;
LABEL_174:
        *(_BYTE *)(v3 + 80) = v29;
        return v5;
      }
      while (1)
      {
        v55 = *(_QWORD *)(v5 + 80);
        if (!v55)
        {
          if (v5 == v40)
            goto LABEL_111;
          while (1)
          {
            v55 = *(_QWORD *)(v5 + 56);
            if (v55)
              break;
            v5 = *(_QWORD *)(v5 + 32);
            if (v5)
              v57 = v5 == v40;
            else
              v57 = 1;
            if (v57)
              goto LABEL_111;
          }
        }
        if ((*(_WORD *)(v55 + 28) & 8) == 0)
          break;
        v5 = v55;
LABEL_219:
        if (WebCore::HTMLAllNamedSubCollection::elementMatches((WebCore::HTMLAllNamedSubCollection *)v3, (WebCore::Element *)v5))
        {
          goto LABEL_144;
        }
      }
      while (v55 != v40)
      {
        while (1)
        {
          v5 = *(_QWORD *)(v55 + 56);
          if (v5)
            break;
          v55 = *(_QWORD *)(v55 + 32);
          if (v55)
            v56 = v55 == v40;
          else
            v56 = 1;
          if (v56)
            goto LABEL_111;
        }
        v55 = *(_QWORD *)(v55 + 56);
        if ((*(_WORD *)(v5 + 28) & 8) != 0)
          goto LABEL_219;
      }
    }
LABEL_111:
    v5 = 0;
    goto LABEL_144;
  }
  if (*(_DWORD *)(this + 76) > a2)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(this + 64) + 8 * a2);
    if (v17)
      return *(_QWORD *)(v17 + 8);
    return 0;
  }
  __break(0xC471u);
  return this;
}

unint64_t WebCore::CachedHTMLCollection<WebCore::HTMLAllNamedSubCollection,(WebCore::CollectionTraversalType)0>::memoryCost(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 72);
  v3 = (unsigned __int8 *)(a1 + 20);
  if (__ldaxr((unsigned __int8 *)(a1 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 20);
LABEL_5:
  v5 = *(uint64_t **)(a1 + 32);
  if (v5)
  {
    v9 = *v5;
    if (*v5)
      LODWORD(v9) = *(_DWORD *)(v9 - 12);
    v10 = v5[1];
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 - 12);
    v6 = 8 * (*((unsigned int *)v5 + 7) + (unint64_t)(v10 + v9));
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr(v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, v3))
      return v6 + 8 * v2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return v6 + 8 * v2;
}

WebCore::Element *WebCore::CachedHTMLCollection<WebCore::HTMLAllNamedSubCollection,(WebCore::CollectionTraversalType)0>::namedItem(uint64_t a1, WTF::AtomString *a2)
{
  uint64_t v2;
  WebCore::Element *v3;
  uint64_t *v7;
  uint64_t v8;
  const WebCore::TreeScope *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int i;
  unsigned int v18;
  uint64_t v19;
  int v21;
  unsigned int v22;
  int v23;
  int k;
  unsigned int v25;
  uint64_t v26;
  int m;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v33;
  void *v34;
  __int16 v35;
  WebCore::Element *v36;
  int j;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::Element *v46;

  v2 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || !*(_DWORD *)(v2 + 4))
    return 0;
  if ((*(_WORD *)(a1 + 21) & 0x200) != 0 && (v45 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v45 + 22) & 0x18) != 0))
    v7 = *(uint64_t **)(v45 + 40);
  else
    v7 = (uint64_t *)(a1 + 24);
  v8 = *v7;
  if ((*(_BYTE *)(*v7 + 22) & 0x18) != 0)
  {
    v9 = *(const WebCore::TreeScope **)(v8 + 40);
    v10 = (unsigned int *)*((_QWORD *)v9 + 3);
    if (!v10 || (v11 = *(_QWORD *)v10) == 0)
    {
LABEL_10:
      v12 = (unsigned int *)*((_QWORD *)v9 + 4);
      if (v12)
      {
        v13 = *(_QWORD *)v12;
        if (*(_QWORD *)v12)
        {
          v14 = 0;
          v15 = *(_DWORD *)(v13 - 8);
          v16 = *(_DWORD *)(v2 + 16) >> 8;
          for (i = v16; ; i = v14 + v18)
          {
            v18 = i & v15;
            v19 = *(_QWORD *)(v13 + 40 * v18);
            if (!v19)
              break;
            if (v19 != -1 && v19 == v2)
            {
              for (j = 0; ; v16 = j + v39)
              {
                v39 = v16 & v15;
                v40 = (uint64_t *)(v13 + 40 * (v16 & v15));
                v41 = *v40;
                if (!*v40)
                  break;
                if (v41 != -1 && v41 == v2)
                {
                  v43 = *(_DWORD *)(v13 - 4);
                  goto LABEL_59;
                }
                ++j;
              }
              v43 = *(_DWORD *)(v13 - 4);
              v40 = (uint64_t *)(v13 + 40 * v43);
LABEL_59:
              if (v40 != (uint64_t *)(v13 + 40 * v43) && *((_DWORD *)v40 + 4) > 1u)
                return (WebCore::Element *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
              WebCore::TreeScopeOrderedMap::getElementByName(v12, a2, v9, (uint64_t *)&v46);
              v3 = v46;
              if (!v46)
                return (WebCore::Element *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
              if ((*((_WORD *)v46 + 14) & 0x10) == 0)
                goto LABEL_63;
              if ((*(_WORD *)(a1 + 21) & 0x1F) == 7)
              {
                v44 = *(_QWORD *)(*((_QWORD *)v46 + 12) + 24);
                if (*(_QWORD *)(WebCore::HTMLNames::aTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::embedTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::formTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::frameTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::imgTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::inputTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::mapTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::metaTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::objectTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::selectTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24) != v44)
                {
                  goto LABEL_63;
                }
              }
              goto LABEL_37;
            }
            ++v14;
          }
        }
      }
      return 0;
    }
    v21 = 0;
    v22 = *(_DWORD *)(v11 - 8);
    v23 = *(_DWORD *)(v2 + 16) >> 8;
    for (k = v23; ; k = v21 + v25)
    {
      v25 = k & v22;
      v26 = *(_QWORD *)(v11 + 40 * v25);
      if (!v26)
        goto LABEL_10;
      if (v26 != -1 && v26 == v2)
        break;
      ++v21;
    }
    for (m = 0; ; v23 = m + v29)
    {
      v29 = v23 & v22;
      v30 = (uint64_t *)(v11 + 40 * (v23 & v22));
      v31 = *v30;
      if (!*v30)
        break;
      if (v31 != -1 && v31 == v2)
      {
        v33 = *(_DWORD *)(v11 - 4);
        goto LABEL_34;
      }
      ++m;
    }
    v33 = *(_DWORD *)(v11 - 4);
    v30 = (uint64_t *)(v11 + 40 * v33);
LABEL_34:
    if (v30 == (uint64_t *)(v11 + 40 * v33) || *((_DWORD *)v30 + 4) <= 1u)
    {
      WebCore::TreeScopeOrderedMap::getElementById(v10, a2, v9, (uint64_t *)&v46);
      v3 = v46;
      if (v46)
      {
LABEL_37:
        if (WebCore::HTMLAllNamedSubCollection::elementMatches((WebCore::HTMLAllNamedSubCollection *)a1, v3))
        {
          v35 = *(_WORD *)(v8 + 28);
          if ((v35 & 0xF000) == 0x9000)
          {
            if (**((_QWORD **)v3 + 5) == v8
              && (*((_WORD *)v3 + 14) & 0xF000) != 0x9000
              && (*((_BYTE *)v3 + 22) & 8) != 0)
            {
LABEL_49:
              if (*((_DWORD *)v3 + 6) == 2)
              {
                if ((*((_WORD *)v3 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v3, v34);
              }
              else
              {
                *((_DWORD *)v3 + 6) -= 2;
              }
              return v3;
            }
          }
          else if ((v35 & 4) != 0
                 && *(_QWORD *)(v8 + 80)
                 && ((*((unsigned __int8 *)v3 + 22) ^ *(unsigned __int8 *)(v8 + 22)) & 8) == 0)
          {
            v36 = v3;
            do
              v36 = (WebCore::Element *)*((_QWORD *)v36 + 4);
            while (v36 != (WebCore::Element *)v8 && v36 != 0);
            if (v36)
              goto LABEL_49;
          }
        }
LABEL_63:
        if (*((_DWORD *)v3 + 6) == 2)
        {
          if ((*((_WORD *)v3 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v3, v34);
        }
        else
        {
          *((_DWORD *)v3 + 6) -= 2;
        }
      }
    }
  }
  return (WebCore::Element *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLAllNamedSubCollection,(WebCore::CollectionTraversalType)0>::invalidateCacheForDocument(uint64_t result, WebCore::Document *this)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  unsigned __int8 *v13;
  WTF *v15;
  void *v16;
  int v17;

  v3 = result;
  if (!*(_QWORD *)(result + 32))
    goto LABEL_2;
  --*((_DWORD *)this + 444);
  v13 = (unsigned __int8 *)(result + 20);
  if (__ldaxr((unsigned __int8 *)(result + 20)))
  {
    __clrex();
LABEL_21:
    MEMORY[0x19AEA534C](result + 20);
    goto LABEL_22;
  }
  if (__stxr(1u, v13))
    goto LABEL_21;
LABEL_22:
  result = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  if (result)
  {
    WebCore::CollectionNamedElementCache::~CollectionNamedElementCache((WebCore::CollectionNamedElementCache *)result, this);
    result = WTF::fastFree(v15, v16);
  }
  v17 = __ldxr(v13);
  if (v17 == 1)
  {
    if (!__stlxr(0, v13))
      goto LABEL_2;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 20));
LABEL_2:
  if (*(_QWORD *)(v3 + 48) || (*(_BYTE *)(v3 + 80) & 3) != 0)
  {
    result = WebCore::Document::unregisterCollection((uint64_t)this, (WebCore::HTMLCollection *)v3);
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_BYTE *)(v3 + 80) &= 0xFCu;
    v5 = *(unsigned int *)(v3 + 76);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v3 + 64);
      v7 = &v6[v5];
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr((unsigned int *)v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, (unsigned int *)v8));
          if (!v10)
          {
            atomic_store(1u, (unsigned int *)v8);
            v11 = *(unsigned int *)(v8 + 28);
            if ((_DWORD)v11)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v11));
            v12 = *(WTF **)(v8 + 16);
            if (v12)
            {
              *(_QWORD *)(v8 + 16) = 0;
              *(_DWORD *)(v8 + 24) = 0;
              WTF::fastFree(v12, v4);
            }
            result = WTF::fastFree((WTF *)v8, v4);
          }
        }
        ++v6;
      }
      while (v6 != v7);
    }
    *(_DWORD *)(v3 + 76) = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLAnchorElement::fullURL@<X0>(WebCore::HTMLAnchorElement *this@<X0>, WTF::URL *a2@<X8>)
{
  WebCore::Document *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = *(WebCore::Document **)(*((_QWORD *)this + 5) + 8);
  v4 = *((_QWORD *)this + 13);
  if (v4
    && ((v5 = *(_DWORD *)(v4 + 4), (v5 & 1) != 0)
      ? (v6 = *(_QWORD *)(v4 + 40), LODWORD(v7) = *(_DWORD *)(v4 + 52))
      : (v6 = v4 + 32, LODWORD(v7) = v5 >> 5),
        (_DWORD)v7))
  {
    v7 = v7;
    v8 = (_QWORD *)(v6 + 8);
    while (1)
    {
      v9 = *(v8 - 1);
      if (v9 == WebCore::HTMLNames::hrefAttr
        || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
        && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
      {
        break;
      }
      v8 += 2;
      if (!--v7)
      {
        v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
        return WebCore::Document::completeURL(v3, v8, (uint64_t)v3 + 848, 0, a2);
      }
    }
  }
  else
  {
    v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
  }
  return WebCore::Document::completeURL(v3, v8, (uint64_t)v3 + 848, 0, a2);
}

WTF::StringImpl *WebCore::HTMLAnchorElement::setFullURL(WebCore::HTMLAnchorElement *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;

  v3 = *a2;
  if (*a2)
  {
    if ((*((_BYTE *)v3 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v3 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v3, (WTF::StringImpl *)a2);
      v3 = v12;
    }
  }
  v12 = v3;
  v4 = *((_QWORD *)this + 13);
  if (!v4)
    goto LABEL_16;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = *(uint64_t **)(v4 + 40);
    v7 = *(_DWORD *)(v4 + 52);
    if (!v7)
    {
LABEL_16:
      v8 = 0xFFFFFFFFLL;
      goto LABEL_17;
    }
  }
  else
  {
    v6 = (uint64_t *)(v4 + 32);
    v7 = v5 >> 5;
    if (!v7)
      goto LABEL_16;
  }
  v8 = 0;
  while (1)
  {
    v9 = *v6;
    if (*v6 == WebCore::HTMLNames::hrefAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
    {
      break;
    }
    ++v8;
    v6 += 2;
    if (v7 == v8)
      goto LABEL_16;
  }
LABEL_17:
  WebCore::Element::setAttributeInternal(this, v8, (WebCore::TreeScope *)&WebCore::HTMLNames::hrefAttr, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::HTMLAnchorElement::fullURL@<X0>(WebCore::HTMLAnchorElement *this@<X0>, WTF::URL *a2@<X8>)
{
  WebCore::Document *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = *(WebCore::Document **)(*((_QWORD *)this - 9) + 8);
  v4 = *((_QWORD *)this - 1);
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    return WebCore::Document::completeURL(v3, v8, (uint64_t)v3 + 848, 0, a2);
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  v8 = (_QWORD *)(v6 + 8);
  while (1)
  {
    v9 = *(v8 - 1);
    if (v9 == WebCore::HTMLNames::hrefAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v7)
    {
      v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      return WebCore::Document::completeURL(v3, v8, (uint64_t)v3 + 848, 0, a2);
    }
  }
  return WebCore::Document::completeURL(v3, v8, (uint64_t)v3 + 848, 0, a2);
}

WTF::StringImpl *`non-virtual thunk to'WebCore::HTMLAnchorElement::setFullURL(WebCore::HTMLAnchorElement *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  v3 = (WebCore::HTMLAnchorElement *)((char *)this - 112);
  v4 = *a2;
  if (*a2)
  {
    if ((*((_BYTE *)v4 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v4 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v4, (WTF::StringImpl *)a2);
      v4 = v13;
    }
  }
  v13 = v4;
  v5 = *((_QWORD *)this - 1);
  if (!v5)
    goto LABEL_16;
  v6 = *(_DWORD *)(v5 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = *(uint64_t **)(v5 + 40);
    v8 = *(_DWORD *)(v5 + 52);
    if (!v8)
    {
LABEL_16:
      v9 = 0xFFFFFFFFLL;
      goto LABEL_17;
    }
  }
  else
  {
    v7 = (uint64_t *)(v5 + 32);
    v8 = v6 >> 5;
    if (!v8)
      goto LABEL_16;
  }
  v9 = 0;
  while (1)
  {
    v10 = *v7;
    if (*v7 == WebCore::HTMLNames::hrefAttr
      || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
      && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
    {
      break;
    }
    ++v9;
    v7 += 2;
    if (v8 == v9)
      goto LABEL_16;
  }
LABEL_17:
  WebCore::Element::setAttributeInternal(v3, v9, (WebCore::TreeScope *)&WebCore::HTMLNames::hrefAttr, &v13, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>::~GenericCachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1E33B3B60;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v6 = (uint64_t *)(v3 + 1760);
      v8 = a1;
      v7 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v8);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v6, v7);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
}

uint64_t WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>::~GenericCachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)a1 = off_1E33B3B60;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v9 = (uint64_t *)(v3 + 1760);
      v11 = a1;
      v10 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v11);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v9, v10);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
  return bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>,(WebCore::CollectionTraversalType)0>::length(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if ((*(_BYTE *)(a1 + 80) & 1) != 0)
    return *(unsigned int *)(a1 + 60);
  if ((*(_BYTE *)(a1 + 80) & 2) == 0 && !*(_QWORD *)(a1 + 48))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v3 = v2 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    ++*(_DWORD *)(v3 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v28 = a1;
      WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v2 + 1760), &v28, (uint64_t)&v27);
    }
  }
  v4 = *(_WORD *)(a1 + 21);
  if ((v4 & 0x200) != 0 && (v26 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v26 + 22) & 0x18) != 0))
    v5 = *(_QWORD *)(v26 + 40);
  else
    v5 = a1 + 24;
  v6 = *(_QWORD *)v5;
  v7 = *(_QWORD *)(*(_QWORD *)v5 + 80);
  if (v7)
  {
    while ((*(_WORD *)(v7 + 28) & 8) == 0)
    {
      v8 = 0;
      v7 = *(_QWORD *)(v7 + 56);
      if (!v7)
        goto LABEL_13;
    }
    while (1)
    {
      if ((WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>::elementMatches(v4, v7) & 1) != 0)
      {
        v13 = *(_DWORD *)(a1 + 72);
        v14 = v13;
LABEL_39:
        v15 = *(unsigned int *)(a1 + 76);
        if ((_DWORD)v15 == v14)
        {
          v19 = v15 + (v15 >> 2);
          if (v19 >= 0x10)
            v20 = v19 + 1;
          else
            v20 = 16;
          if (v20 <= v15 + 1)
            v21 = v15 + 1;
          else
            v21 = v20;
          WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 64, v21);
          v15 = *(unsigned int *)(a1 + 76);
          v16 = *(_QWORD *)(a1 + 64);
          v17 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v7);
          if (v17)
          {
            do
              v22 = __ldaxr(v17);
            while (__stlxr(v22 + 1, v17));
          }
        }
        else
        {
          v16 = *(_QWORD *)(a1 + 64);
          v17 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v7);
          if (v17)
          {
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 + 1, v17));
          }
        }
        *(_QWORD *)(v16 + 8 * v15) = v17;
        ++*(_DWORD *)(a1 + 76);
        while (1)
        {
          v23 = *(_QWORD *)(v7 + 80);
          if (!v23)
          {
            if (v7 == v6)
              goto LABEL_74;
            while (1)
            {
              v23 = *(_QWORD *)(v7 + 56);
              if (v23)
                break;
              v7 = *(_QWORD *)(v7 + 32);
              if (v7)
                v25 = v7 == v6;
              else
                v25 = 1;
              if (v25)
                goto LABEL_74;
            }
          }
          if ((*(_WORD *)(v23 + 28) & 8) == 0)
            break;
          v7 = v23;
LABEL_65:
          if (WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>::elementMatches(*(_WORD *)(a1 + 21), v7))
          {
            v14 = *(_DWORD *)(a1 + 72);
            goto LABEL_39;
          }
        }
        while (v23 != v6)
        {
          while (1)
          {
            v7 = *(_QWORD *)(v23 + 56);
            if (v7)
              break;
            v23 = *(_QWORD *)(v23 + 32);
            if (v23)
              v24 = v23 == v6;
            else
              v24 = 1;
            if (v24)
              goto LABEL_74;
          }
          v23 = *(_QWORD *)(v23 + 56);
          if ((*(_WORD *)(v7 + 28) & 8) != 0)
            goto LABEL_65;
        }
LABEL_74:
        *(_BYTE *)(a1 + 80) |= 2u;
        if (*(_DWORD *)(a1 + 72) != v13)
          WebCore::reportExtraMemoryAllocatedForCollectionIndexCache((WebCore *)(8
                                                                               * (*(_DWORD *)(a1 + 72)
                                                                                              - v13)));
        v8 = *(unsigned int *)(a1 + 76);
        goto LABEL_13;
      }
      v10 = *(_QWORD *)(v7 + 80);
      if (!v10)
      {
        if (v7 == v6)
          goto LABEL_9;
        while (1)
        {
          v10 = *(_QWORD *)(v7 + 56);
          if (v10)
            break;
          v7 = *(_QWORD *)(v7 + 32);
          if (v7)
            v12 = v7 == v6;
          else
            v12 = 1;
          if (v12)
            goto LABEL_9;
        }
      }
      if ((*(_WORD *)(v10 + 28) & 8) == 0)
        break;
      v7 = v10;
LABEL_28:
      v4 = *(_WORD *)(a1 + 21);
    }
    while (v10 != v6)
    {
      while (1)
      {
        v7 = *(_QWORD *)(v10 + 56);
        if (v7)
          break;
        v10 = *(_QWORD *)(v10 + 32);
        if (v10)
          v11 = v10 == v6;
        else
          v11 = 1;
        if (v11)
          goto LABEL_9;
      }
      v10 = *(_QWORD *)(v10 + 56);
      if ((*(_WORD *)(v7 + 28) & 8) != 0)
        goto LABEL_28;
    }
  }
LABEL_9:
  v8 = 0;
LABEL_13:
  *(_DWORD *)(a1 + 60) = v8;
  *(_BYTE *)(a1 + 80) |= 1u;
  return v8;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>,(WebCore::CollectionTraversalType)0>::item(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  unsigned int v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  unsigned int v63;
  BOOL v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  unsigned int v70;
  BOOL v71;
  uint64_t v72;
  BOOL v73;
  BOOL v74;
  uint64_t v75;
  BOOL v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v3 = result;
  v4 = *(_BYTE *)(result + 80);
  if ((v4 & 1) != 0 && *(_DWORD *)(result + 60) <= a2)
    return 0;
  if ((*(_BYTE *)(result + 80) & 2) != 0)
  {
    if (*(_DWORD *)(result + 76) <= a2)
    {
      __break(0xC471u);
      return result;
    }
    v18 = *(_QWORD *)(*(_QWORD *)(result + 64) + 8 * a2);
    if (v18)
      return *(_QWORD *)(v18 + 8);
    return 0;
  }
  result = *(_QWORD *)(result + 48);
  if (!result)
  {
    if ((v4 & 1) != 0)
    {
      if (*(_DWORD *)(v3 + 60) - a2 < a2)
      {
        if ((*(_WORD *)(v3 + 21) & 0x200) != 0 && (v79 = *(_QWORD *)(v3 + 24), (*(_BYTE *)(v79 + 22) & 0x18) != 0))
          v36 = *(uint64_t **)(v79 + 40);
        else
          v36 = (uint64_t *)(v3 + 24);
        v37 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>>(v3, *v36);
        result = v38;
        *(_QWORD *)(v3 + 40) = v37;
        *(_QWORD *)(v3 + 48) = v38;
        v39 = *(_DWORD *)(v3 + 60);
        if (v39 - 1 <= a2)
          goto LABEL_162;
        v40 = v39 + ~a2;
        if (!v40)
          goto LABEL_162;
        while (1)
        {
          v41 = *(_QWORD *)(v3 + 40);
          v42 = *(_QWORD *)(v3 + 48);
          v43 = *(_QWORD *)(v42 + 48) & 0xFFFFFFFFFFFFLL;
          if (!v43)
            break;
          if ((*(_WORD *)((*(_QWORD *)(v42 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            do
            {
              v46 = *(_QWORD *)(v43 + 88);
              if (!v46)
                break;
              v43 = *(_QWORD *)(v43 + 88);
            }
            while ((*(_WORD *)(v46 + 28) & 4) != 0);
          }
LABEL_85:
          while ((*(_WORD *)(v43 + 28) & 8) == 0)
          {
            if ((*(_QWORD *)(v43 + 48) & 0xFFFFFFFFFFFFLL) != 0)
            {
              if ((*(_WORD *)((*(_QWORD *)(v43 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
              {
                v43 = *(_QWORD *)(v43 + 48) & 0xFFFFFFFFFFFFLL;
                do
                {
                  v45 = *(_QWORD *)(v43 + 88);
                  if (!v45)
                    break;
                  v43 = *(_QWORD *)(v43 + 88);
                }
                while ((*(_WORD *)(v45 + 28) & 4) != 0);
              }
              else
              {
                v43 = *(_QWORD *)(v43 + 48) & 0xFFFFFFFFFFFFLL;
              }
            }
            else
            {
              v43 = *(_QWORD *)(v43 + 32);
              if (v43 == v41)
                goto LABEL_161;
            }
            if (!v43)
              goto LABEL_161;
          }
          *(_QWORD *)(v3 + 48) = v43;
          if (WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>::elementMatches(*(_WORD *)(v3 + 21), v43))
          {
            if (!--v40)
            {
LABEL_102:
              result = *(_QWORD *)(v3 + 48);
              goto LABEL_162;
            }
          }
        }
        v43 = *(_QWORD *)(v42 + 32);
        if (v43 != v41 && v43 != 0)
          goto LABEL_85;
LABEL_161:
        result = 0;
        *(_QWORD *)(v3 + 48) = 0;
        goto LABEL_162;
      }
    }
    else
    {
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 40) + 8);
      v20 = v19 + 4 * (((unint64_t)*(unsigned __int16 *)(v3 + 21) >> 5) & 0xF);
      ++*(_DWORD *)(v20 + 1768);
      if ((*(_BYTE *)(v3 + 22) & 2) != 0)
      {
        v83 = v3;
        WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v19 + 1760), &v83, (uint64_t)&v82);
      }
    }
    v47 = *(_WORD *)(v3 + 21);
    if ((v47 & 0x200) != 0 && (v78 = *(_QWORD *)(v3 + 24), (*(_BYTE *)(v78 + 22) & 0x18) != 0))
      v48 = *(_QWORD *)(v78 + 40);
    else
      v48 = v3 + 24;
    v49 = *(_QWORD *)v48;
    v50 = *(_QWORD *)(*(_QWORD *)v48 + 80);
    if (v50)
    {
      v51 = 0;
      while ((*(_WORD *)(v50 + 28) & 8) == 0)
      {
        v50 = *(_QWORD *)(v50 + 56);
        if (!v50)
          goto LABEL_134;
      }
      v51 = v50;
      if ((WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>::elementMatches(v47, v50) & 1) != 0)
      {
LABEL_134:
        *(_QWORD *)(v3 + 40) = v49;
        *(_QWORD *)(v3 + 48) = v51;
        result = v51;
        *(_DWORD *)(v3 + 56) = 0;
        if (a2)
        {
          if (!v51)
            goto LABEL_198;
          *(_DWORD *)(v3 + 56) = 0;
          while (1)
          {
            v58 = *(_QWORD **)(v3 + 40);
            v59 = *(_QWORD **)(v3 + 48);
            v60 = v59[10];
            if (!v60)
            {
              if (v59 == v58)
                goto LABEL_160;
              while (1)
              {
                v60 = v59[7];
                if (v60)
                  break;
                v59 = (_QWORD *)v59[4];
                if (v59)
                  v64 = v59 == v58;
                else
                  v64 = 1;
                if (v64)
                  goto LABEL_160;
              }
            }
            if ((*(_WORD *)(v60 + 28) & 8) == 0)
              break;
            v61 = v60;
LABEL_150:
            *(_QWORD *)(v3 + 48) = v61;
            if (WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>::elementMatches(*(_WORD *)(v3 + 21), v61))
            {
              v63 = *(_DWORD *)(v3 + 56) + 1;
              *(_DWORD *)(v3 + 56) = v63;
              if (v63 >= a2)
              {
                result = *(_QWORD *)(v3 + 48);
                goto LABEL_195;
              }
            }
          }
          while ((_QWORD *)v60 != v58)
          {
            while (1)
            {
              v61 = *(_QWORD *)(v60 + 56);
              if (v61)
                break;
              v60 = *(_QWORD *)(v60 + 32);
              if (v60)
                v62 = v60 == (_QWORD)v58;
              else
                v62 = 1;
              if (v62)
                goto LABEL_160;
            }
            v60 = *(_QWORD *)(v60 + 56);
            if ((*(_WORD *)(v61 + 28) & 8) != 0)
              goto LABEL_150;
          }
LABEL_160:
          *(_QWORD *)(v3 + 48) = 0;
        }
        else
        {
LABEL_195:
          if (result)
            return result;
        }
        if (v51)
        {
          v35 = *(_DWORD *)(v3 + 56) + 1;
          goto LABEL_199;
        }
LABEL_198:
        v35 = 0;
LABEL_199:
        result = 0;
LABEL_200:
        *(_DWORD *)(v3 + 60) = v35;
        *(_BYTE *)(v3 + 80) |= 1u;
        return result;
      }
      while (1)
      {
        v72 = *(_QWORD *)(v51 + 80);
        if (!v72)
        {
          if (v51 == v49)
            goto LABEL_106;
          while (1)
          {
            v72 = *(_QWORD *)(v51 + 56);
            if (v72)
              break;
            v51 = *(_QWORD *)(v51 + 32);
            if (v51)
              v74 = v51 == v49;
            else
              v74 = 1;
            if (v74)
              goto LABEL_106;
          }
        }
        if ((*(_WORD *)(v72 + 28) & 8) == 0)
          break;
        v51 = v72;
LABEL_216:
        if ((WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>::elementMatches(*(_WORD *)(v3 + 21), v51) & 1) != 0)goto LABEL_134;
      }
      while (v72 != v49)
      {
        while (1)
        {
          v51 = *(_QWORD *)(v72 + 56);
          if (v51)
            break;
          v72 = *(_QWORD *)(v72 + 32);
          if (v72)
            v73 = v72 == v49;
          else
            v73 = 1;
          if (v73)
            goto LABEL_106;
        }
        v72 = *(_QWORD *)(v72 + 56);
        if ((*(_WORD *)(v51 + 28) & 8) != 0)
          goto LABEL_216;
      }
    }
LABEL_106:
    v51 = 0;
    goto LABEL_134;
  }
  v5 = *(_DWORD *)(v3 + 56);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return result;
    v21 = v5 - a2;
    if (v5 - a2 <= a2)
    {
      if (v21)
      {
        while (1)
        {
          v52 = *(_QWORD *)(v3 + 40);
          v53 = *(_QWORD *)(v3 + 48);
          v54 = *(_QWORD *)(v53 + 48) & 0xFFFFFFFFFFFFLL;
          if (!v54)
            break;
          if ((*(_WORD *)((*(_QWORD *)(v53 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            do
            {
              v57 = *(_QWORD *)(v54 + 88);
              if (!v57)
                break;
              v54 = *(_QWORD *)(v54 + 88);
            }
            while ((*(_WORD *)(v57 + 28) & 4) != 0);
          }
LABEL_113:
          while ((*(_WORD *)(v54 + 28) & 8) == 0)
          {
            if ((*(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFLL) != 0)
            {
              if ((*(_WORD *)((*(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
              {
                v54 = *(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFLL;
                do
                {
                  v56 = *(_QWORD *)(v54 + 88);
                  if (!v56)
                    break;
                  v54 = *(_QWORD *)(v54 + 88);
                }
                while ((*(_WORD *)(v56 + 28) & 4) != 0);
              }
              else
              {
                v54 = *(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFLL;
              }
            }
            else
            {
              v54 = *(_QWORD *)(v54 + 32);
              if (v54 == v52)
                goto LABEL_163;
            }
            if (!v54)
              goto LABEL_163;
          }
          *(_QWORD *)(v3 + 48) = v54;
          if (WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>::elementMatches(*(_WORD *)(v3 + 21), v54))
          {
            if (!--v21)
              goto LABEL_164;
          }
        }
        v54 = *(_QWORD *)(v53 + 32);
        if (v54 != v52 && v54 != 0)
          goto LABEL_113;
LABEL_163:
        *(_QWORD *)(v3 + 48) = 0;
      }
LABEL_164:
      *(_DWORD *)(v3 + 56) = a2;
      return *(_QWORD *)(v3 + 48);
    }
    v22 = *(_WORD *)(v3 + 21);
    if ((v22 & 0x200) != 0 && (v81 = *(_QWORD *)(v3 + 24), (*(_BYTE *)(v81 + 22) & 0x18) != 0))
      v23 = *(_QWORD *)(v81 + 40);
    else
      v23 = v3 + 24;
    v24 = *(_QWORD *)v23;
    v25 = *(_QWORD *)(*(_QWORD *)v23 + 80);
    if (v25)
    {
      v26 = 0;
      while ((*(_WORD *)(v25 + 28) & 8) == 0)
      {
        v25 = *(_QWORD *)(v25 + 56);
        if (!v25)
          goto LABEL_168;
      }
      v26 = v25;
      if ((WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>::elementMatches(v22, v25) & 1) != 0)
        goto LABEL_168;
      while (1)
      {
        v75 = *(_QWORD *)(v26 + 80);
        if (!v75)
        {
          if (v26 == v24)
            goto LABEL_47;
          while (1)
          {
            v75 = *(_QWORD *)(v26 + 56);
            if (v75)
              break;
            v26 = *(_QWORD *)(v26 + 32);
            if (v26)
              v77 = v26 == v24;
            else
              v77 = 1;
            if (v77)
              goto LABEL_47;
          }
        }
        if ((*(_WORD *)(v75 + 28) & 8) == 0)
          break;
        v26 = v75;
LABEL_240:
        if ((WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>::elementMatches(*(_WORD *)(v3 + 21), v26) & 1) != 0)goto LABEL_168;
      }
      while (v75 != v24)
      {
        while (1)
        {
          v26 = *(_QWORD *)(v75 + 56);
          if (v26)
            break;
          v75 = *(_QWORD *)(v75 + 32);
          if (v75)
            v76 = v75 == v24;
          else
            v76 = 1;
          if (v76)
            goto LABEL_47;
        }
        v75 = *(_QWORD *)(v75 + 56);
        if ((*(_WORD *)(v26 + 28) & 8) != 0)
          goto LABEL_240;
      }
    }
LABEL_47:
    v26 = 0;
LABEL_168:
    *(_QWORD *)(v3 + 40) = v24;
    *(_QWORD *)(v3 + 48) = v26;
    *(_DWORD *)(v3 + 56) = 0;
    if (a2)
    {
      *(_DWORD *)(v3 + 56) = 0;
      while (1)
      {
        v65 = *(_QWORD **)(v3 + 40);
        v66 = *(_QWORD **)(v3 + 48);
        v67 = v66[10];
        if (!v67)
        {
          if (v66 == v65)
            goto LABEL_193;
          while (1)
          {
            v67 = v66[7];
            if (v67)
              break;
            v66 = (_QWORD *)v66[4];
            if (v66)
              v71 = v66 == v65;
            else
              v71 = 1;
            if (v71)
              goto LABEL_193;
          }
        }
        if ((*(_WORD *)(v67 + 28) & 8) == 0)
          break;
        v68 = v67;
LABEL_183:
        *(_QWORD *)(v3 + 48) = v68;
        if (WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>::elementMatches(*(_WORD *)(v3 + 21), v68))
        {
          v70 = *(_DWORD *)(v3 + 56) + 1;
          *(_DWORD *)(v3 + 56) = v70;
          if (v70 >= a2)
            return *(_QWORD *)(v3 + 48);
        }
      }
      while ((_QWORD *)v67 != v65)
      {
        while (1)
        {
          v68 = *(_QWORD *)(v67 + 56);
          if (v68)
            break;
          v67 = *(_QWORD *)(v67 + 32);
          if (v67)
            v69 = v67 == (_QWORD)v65;
          else
            v69 = 1;
          if (v69)
            goto LABEL_193;
        }
        v67 = *(_QWORD *)(v67 + 56);
        if ((*(_WORD *)(v68 + 28) & 8) != 0)
          goto LABEL_183;
      }
LABEL_193:
      *(_QWORD *)(v3 + 48) = 0;
    }
    return *(_QWORD *)(v3 + 48);
  }
  if ((v4 & 1) != 0 && *(_DWORD *)(v3 + 60) - a2 < v6)
  {
    if ((*(_WORD *)(v3 + 21) & 0x200) != 0 && (v80 = *(_QWORD *)(v3 + 24), (*(_BYTE *)(v80 + 22) & 0x18) != 0))
      v7 = *(uint64_t **)(v80 + 40);
    else
      v7 = (uint64_t *)(v3 + 24);
    v8 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>>(v3, *v7);
    result = v9;
    *(_QWORD *)(v3 + 40) = v8;
    *(_QWORD *)(v3 + 48) = v9;
    v10 = *(_DWORD *)(v3 + 60);
    if (v10 - 1 <= a2)
      goto LABEL_162;
    v11 = v10 + ~a2;
    if (!v11)
      goto LABEL_162;
    while (1)
    {
      v12 = *(_QWORD *)(v3 + 40);
      v13 = *(_QWORD *)(v3 + 48);
      v14 = *(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFLL;
      if (!v14)
        break;
      if ((*(_WORD *)((*(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        do
        {
          v17 = *(_QWORD *)(v14 + 88);
          if (!v17)
            break;
          v14 = *(_QWORD *)(v14 + 88);
        }
        while ((*(_WORD *)(v17 + 28) & 4) != 0);
      }
LABEL_17:
      while ((*(_WORD *)(v14 + 28) & 8) == 0)
      {
        if ((*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_WORD *)((*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            v14 = *(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL;
            do
            {
              v16 = *(_QWORD *)(v14 + 88);
              if (!v16)
                break;
              v14 = *(_QWORD *)(v14 + 88);
            }
            while ((*(_WORD *)(v16 + 28) & 4) != 0);
          }
          else
          {
            v14 = *(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL;
          }
        }
        else
        {
          v14 = *(_QWORD *)(v14 + 32);
          if (v14 == v12)
            goto LABEL_161;
        }
        if (!v14)
          goto LABEL_161;
      }
      *(_QWORD *)(v3 + 48) = v14;
      if (WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>::elementMatches(*(_WORD *)(v3 + 21), v14))
      {
        if (!--v11)
          goto LABEL_102;
      }
    }
    v14 = *(_QWORD *)(v13 + 32);
    if (v14 != v12 && v14 != 0)
      goto LABEL_17;
    goto LABEL_161;
  }
  if (a2 == v5)
  {
LABEL_162:
    *(_DWORD *)(v3 + 56) = a2;
    return result;
  }
  v27 = 0;
  while (1)
  {
    v28 = *(_QWORD **)(v3 + 40);
    v29 = *(_QWORD **)(v3 + 48);
    v30 = v29[10];
    if (!v30)
    {
      if (v29 == v28)
        goto LABEL_73;
      while (1)
      {
        v30 = v29[7];
        if (v30)
          break;
        v29 = (_QWORD *)v29[4];
        if (v29)
          v33 = v29 == v28;
        else
          v33 = 1;
        if (v33)
          goto LABEL_73;
      }
    }
    if ((*(_WORD *)(v30 + 28) & 8) == 0)
    {
      while ((_QWORD *)v30 != v28)
      {
        while (1)
        {
          v31 = *(_QWORD *)(v30 + 56);
          if (v31)
            break;
          v30 = *(_QWORD *)(v30 + 32);
          if (v30)
            v32 = v30 == (_QWORD)v28;
          else
            v32 = 1;
          if (v32)
            goto LABEL_73;
        }
        v30 = *(_QWORD *)(v30 + 56);
        if ((*(_WORD *)(v31 + 28) & 8) != 0)
          goto LABEL_63;
      }
LABEL_73:
      *(_QWORD *)(v3 + 48) = 0;
      v34 = *(_DWORD *)(v3 + 56) + v27;
      *(_DWORD *)(v3 + 56) = v34;
LABEL_74:
      result = 0;
      v35 = v34 + 1;
      goto LABEL_200;
    }
    v31 = v30;
LABEL_63:
    *(_QWORD *)(v3 + 48) = v31;
    if (WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>::elementMatches(*(_WORD *)(v3 + 21), v31))
    {
      if (++v27 == v6)
        break;
    }
  }
  result = *(_QWORD *)(v3 + 48);
  v34 = *(_DWORD *)(v3 + 56) + v6;
  *(_DWORD *)(v3 + 56) = v34;
  if (!result)
    goto LABEL_74;
  return result;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>,(WebCore::CollectionTraversalType)0>::namedItem(uint64_t a1, WTF::AtomString *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  const WebCore::TreeScope *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int i;
  unsigned int v18;
  uint64_t v19;
  int v21;
  unsigned int v22;
  int v23;
  int k;
  unsigned int v25;
  uint64_t v26;
  int m;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  uint64_t v37;
  int j;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || !*(_DWORD *)(v2 + 4))
    return 0;
  if ((*(_WORD *)(a1 + 21) & 0x200) != 0 && (v46 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v46 + 22) & 0x18) != 0))
    v7 = *(uint64_t **)(v46 + 40);
  else
    v7 = (uint64_t *)(a1 + 24);
  v8 = *v7;
  if ((*(_BYTE *)(*v7 + 22) & 0x18) != 0)
  {
    v9 = *(const WebCore::TreeScope **)(v8 + 40);
    v10 = (unsigned int *)*((_QWORD *)v9 + 3);
    if (!v10 || (v11 = *(_QWORD *)v10) == 0)
    {
LABEL_10:
      v12 = (unsigned int *)*((_QWORD *)v9 + 4);
      if (v12)
      {
        v13 = *(_QWORD *)v12;
        if (*(_QWORD *)v12)
        {
          v14 = 0;
          v15 = *(_DWORD *)(v13 - 8);
          v16 = *(_DWORD *)(v2 + 16) >> 8;
          for (i = v16; ; i = v14 + v18)
          {
            v18 = i & v15;
            v19 = *(_QWORD *)(v13 + 40 * v18);
            if (!v19)
              break;
            if (v19 != -1 && v19 == v2)
            {
              for (j = 0; ; v16 = j + v40)
              {
                v40 = v16 & v15;
                v41 = (uint64_t *)(v13 + 40 * (v16 & v15));
                v42 = *v41;
                if (!*v41)
                  break;
                if (v42 != -1 && v42 == v2)
                {
                  v44 = *(_DWORD *)(v13 - 4);
                  goto LABEL_60;
                }
                ++j;
              }
              v44 = *(_DWORD *)(v13 - 4);
              v41 = (uint64_t *)(v13 + 40 * v44);
LABEL_60:
              if (v41 != (uint64_t *)(v13 + 40 * v44) && *((_DWORD *)v41 + 4) > 1u)
                return WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
              WebCore::TreeScopeOrderedMap::getElementByName(v12, a2, v9, &v47);
              v3 = v47;
              if (!v47)
                return WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
              if ((*(_WORD *)(v47 + 28) & 0x10) == 0)
                goto LABEL_64;
              v34 = *(_WORD *)(a1 + 21);
              if ((v34 & 0x1F) == 7)
              {
                v45 = *(_QWORD *)(*(_QWORD *)(v47 + 96) + 24);
                if (*(_QWORD *)(WebCore::HTMLNames::aTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::embedTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::formTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::frameTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::imgTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::inputTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::mapTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::metaTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::objectTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::selectTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24) != v45)
                {
                  goto LABEL_64;
                }
              }
              goto LABEL_38;
            }
            ++v14;
          }
        }
      }
      return 0;
    }
    v21 = 0;
    v22 = *(_DWORD *)(v11 - 8);
    v23 = *(_DWORD *)(v2 + 16) >> 8;
    for (k = v23; ; k = v21 + v25)
    {
      v25 = k & v22;
      v26 = *(_QWORD *)(v11 + 40 * v25);
      if (!v26)
        goto LABEL_10;
      if (v26 != -1 && v26 == v2)
        break;
      ++v21;
    }
    for (m = 0; ; v23 = m + v29)
    {
      v29 = v23 & v22;
      v30 = (uint64_t *)(v11 + 40 * (v23 & v22));
      v31 = *v30;
      if (!*v30)
        break;
      if (v31 != -1 && v31 == v2)
      {
        v33 = *(_DWORD *)(v11 - 4);
        goto LABEL_34;
      }
      ++m;
    }
    v33 = *(_DWORD *)(v11 - 4);
    v30 = (uint64_t *)(v11 + 40 * v33);
LABEL_34:
    if (v30 == (uint64_t *)(v11 + 40 * v33) || *((_DWORD *)v30 + 4) <= 1u)
    {
      WebCore::TreeScopeOrderedMap::getElementById(v10, a2, v9, &v47);
      v3 = v47;
      if (v47)
      {
        v34 = *(_WORD *)(a1 + 21);
LABEL_38:
        if (WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>::elementMatches(v34, v3))
        {
          v36 = *(_WORD *)(v8 + 28);
          if ((v36 & 0xF000) == 0x9000)
          {
            if (**(_QWORD **)(v3 + 40) == v8
              && (*(_WORD *)(v3 + 28) & 0xF000) != 0x9000
              && (*(_BYTE *)(v3 + 22) & 8) != 0)
            {
LABEL_50:
              if (*(_DWORD *)(v3 + 24) == 2)
              {
                if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v3, v35);
              }
              else
              {
                *(_DWORD *)(v3 + 24) -= 2;
              }
              return v3;
            }
          }
          else if ((v36 & 4) != 0
                 && *(_QWORD *)(v8 + 80)
                 && ((*(unsigned __int8 *)(v3 + 22) ^ *(unsigned __int8 *)(v8 + 22)) & 8) == 0)
          {
            v37 = v3;
            do
              v37 = *(_QWORD *)(v37 + 32);
            while (v37 != v8 && v37 != 0);
            if (v37)
              goto LABEL_50;
          }
        }
LABEL_64:
        if (*(_DWORD *)(v3 + 24) == 2)
        {
          if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v3, v35);
        }
        else
        {
          *(_DWORD *)(v3 + 24) -= 2;
        }
      }
    }
  }
  return WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
}

void WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::~GenericCachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1E33B3BC8;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v6 = (uint64_t *)(v3 + 1760);
      v8 = a1;
      v7 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v8);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v6, v7);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
}

uint64_t WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::~GenericCachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)a1 = off_1E33B3BC8;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v9 = (uint64_t *)(v3 + 1760);
      v11 = a1;
      v10 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v11);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v9, v10);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
  return bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>,(WebCore::CollectionTraversalType)1>::length(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((*(_BYTE *)(a1 + 80) & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 80) & 2) == 0 && !*(_QWORD *)(a1 + 48))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
      v5 = v4 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
      ++*(_DWORD *)(v5 + 1768);
      if ((*(_BYTE *)(a1 + 22) & 2) != 0)
      {
        v21 = a1;
        WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v4 + 1760), &v21, (uint64_t)&v20);
      }
    }
    v6 = *(_WORD *)(a1 + 21);
    if ((v6 & 0x200) != 0 && (v19 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v19 + 22) & 0x18) != 0))
      v7 = *(_QWORD *)(v19 + 40);
    else
      v7 = a1 + 24;
    v8 = *(_QWORD *)(*(_QWORD *)v7 + 80);
    if (v8)
    {
      while ((*(_WORD *)(v8 + 28) & 8) == 0)
      {
        v2 = 0;
        v8 = *(_QWORD *)(v8 + 56);
        if (!v8)
          goto LABEL_12;
      }
      if ((WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::elementMatches(v6, v8) & 1) != 0)
      {
LABEL_17:
        v9 = *(_DWORD *)(a1 + 72);
        v10 = v9;
LABEL_18:
        v11 = *(unsigned int *)(a1 + 76);
        if ((_DWORD)v11 == v10)
        {
          v15 = v11 + (v11 >> 2);
          if (v15 >= 0x10)
            v16 = v15 + 1;
          else
            v16 = 16;
          if (v16 <= v11 + 1)
            v17 = v11 + 1;
          else
            v17 = v16;
          WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 64, v17);
          v11 = *(unsigned int *)(a1 + 76);
          v12 = *(_QWORD *)(a1 + 64);
          v13 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v8);
          if (v13)
          {
            do
              v18 = __ldaxr(v13);
            while (__stlxr(v18 + 1, v13));
          }
        }
        else
        {
          v12 = *(_QWORD *)(a1 + 64);
          v13 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v8);
          if (v13)
          {
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 + 1, v13));
          }
        }
        *(_QWORD *)(v12 + 8 * v11) = v13;
        ++*(_DWORD *)(a1 + 76);
        while (1)
        {
          v8 = *(_QWORD *)(v8 + 56);
          if (!v8)
            break;
          if ((*(_WORD *)(v8 + 28) & 8) != 0
            && WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::elementMatches(*(_WORD *)(a1 + 21), v8))
          {
            v10 = *(_DWORD *)(a1 + 72);
            goto LABEL_18;
          }
        }
        *(_BYTE *)(a1 + 80) |= 2u;
        if (*(_DWORD *)(a1 + 72) != v9)
          WebCore::reportExtraMemoryAllocatedForCollectionIndexCache((WebCore *)(8
                                                                               * (*(_DWORD *)(a1 + 72) - v9)));
        v2 = *(unsigned int *)(a1 + 76);
        goto LABEL_12;
      }
      while (1)
      {
        v8 = *(_QWORD *)(v8 + 56);
        if (!v8)
          break;
        if ((*(_WORD *)(v8 + 28) & 8) != 0
          && WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::elementMatches(*(_WORD *)(a1 + 21), v8))
        {
          goto LABEL_17;
        }
      }
    }
    v2 = 0;
LABEL_12:
    *(_DWORD *)(a1 + 60) = v2;
    *(_BYTE *)(a1 + 80) |= 1u;
    return v2;
  }
  return *(unsigned int *)(a1 + 60);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>,(WebCore::CollectionTraversalType)1>::item(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v2 = result;
  v3 = *(_BYTE *)(result + 80);
  if ((v3 & 1) != 0 && *(_DWORD *)(result + 60) <= a2)
    return 0;
  if ((*(_BYTE *)(result + 80) & 2) != 0)
  {
    if (*(_DWORD *)(result + 76) <= a2)
    {
      __break(0xC471u);
      return result;
    }
    v4 = *(_QWORD *)(*(_QWORD *)(result + 64) + 8 * a2);
    if (v4)
      return *(_QWORD *)(v4 + 8);
    return 0;
  }
  result = *(_QWORD *)(result + 48);
  if (result)
  {
    v5 = *(_DWORD *)(v2 + 56);
    if (v5 < a2)
      return WebCore::CollectionIndexCache<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>,WebCore::ElementChildIterator<WebCore::Element>>::traverseForwardTo(v2 + 40, v2, a2);
    if (v5 > a2)
      return WebCore::CollectionIndexCache<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>,WebCore::ElementChildIterator<WebCore::Element>>::traverseBackwardTo(v2 + 40, v2, a2);
    return result;
  }
  if ((v3 & 1) == 0)
  {
    WebCore::Document::registerCollection(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 40) + 8), (WebCore::HTMLCollection *)v2);
    goto LABEL_14;
  }
  if (*(_DWORD *)(v2 + 60) - a2 >= a2)
  {
LABEL_14:
    v7 = WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>,(WebCore::CollectionTraversalType)1>::collectionBegin(v2);
    result = v6;
    *(_DWORD *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 40) = v7;
    *(_QWORD *)(v2 + 48) = v6;
    if (a2)
    {
      if (v6)
      {
        WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>,(WebCore::CollectionTraversalType)1>::collectionTraverseForward(v2, v2 + 40, a2, (unsigned int *)(v2 + 56));
        result = *(_QWORD *)(v2 + 48);
        if (result)
          return result;
        v8 = *(_DWORD *)(v2 + 56) + 1;
LABEL_26:
        result = 0;
        *(_DWORD *)(v2 + 60) = v8;
        *(_BYTE *)(v2 + 80) |= 1u;
        return result;
      }
    }
    else if (v6)
    {
      return result;
    }
    v8 = 0;
    goto LABEL_26;
  }
  v9 = WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>,(WebCore::CollectionTraversalType)1>::collectionLast(v2);
  result = v10;
  *(_QWORD *)(v2 + 40) = v9;
  *(_QWORD *)(v2 + 48) = v10;
  v11 = *(_DWORD *)(v2 + 60);
  if (v11 - 1 > a2)
  {
    WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>,(WebCore::CollectionTraversalType)1>::collectionTraverseBackward(v2, v2 + 40, v11 + ~a2);
    result = *(_QWORD *)(v2 + 48);
  }
  *(_DWORD *)(v2 + 56) = a2;
  return result;
}

unint64_t WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>,(WebCore::CollectionTraversalType)1>::memoryCost(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 72);
  v3 = (unsigned __int8 *)(a1 + 20);
  if (__ldaxr((unsigned __int8 *)(a1 + 20)))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](a1 + 20);
    goto LABEL_4;
  }
  if (__stxr(1u, v3))
    goto LABEL_3;
LABEL_4:
  v5 = *(uint64_t **)(a1 + 32);
  if (v5)
  {
    v9 = *v5;
    if (*v5)
      LODWORD(v9) = *(_DWORD *)(v9 - 12);
    v10 = v5[1];
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 - 12);
    v6 = 8 * (*((unsigned int *)v5 + 7) + (unint64_t)(v10 + v9));
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr(v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, v3))
      return v6 + 8 * v2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return v6 + 8 * v2;
}

WebCore::Node *WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>,(WebCore::CollectionTraversalType)1>::namedItem(uint64_t a1, WTF::AtomString *a2)
{
  uint64_t v2;
  WebCore::Node *v3;
  uint64_t *v7;
  uint64_t v8;
  const WebCore::TreeScope *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int k;
  unsigned int v18;
  uint64_t v19;
  int v21;
  unsigned int v22;
  int v23;
  int i;
  unsigned int v25;
  uint64_t v26;
  int j;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v33;
  WebCore::Node *v34;
  char v35;
  void *v36;
  uint64_t v37;
  int m;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v43;
  void *v44;
  uint64_t v45;
  WebCore::Node *v46;
  WebCore *v47;
  uint64_t v48;
  WebCore::Node *v49;
  WebCore::Node *v50;

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 && *(_DWORD *)(v2 + 4))
  {
    if ((*(_WORD *)(a1 + 21) & 0x200) != 0 && (v48 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v48 + 22) & 0x18) != 0))
      v7 = *(uint64_t **)(v48 + 40);
    else
      v7 = (uint64_t *)(a1 + 24);
    v8 = *v7;
    if ((*(_BYTE *)(*v7 + 22) & 0x18) == 0)
      return (WebCore::Node *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
    v50 = 0;
    v9 = *(const WebCore::TreeScope **)(v8 + 40);
    v10 = (unsigned int *)*((_QWORD *)v9 + 3);
    if (v10)
    {
      v11 = *(_QWORD *)v10;
      if (*(_QWORD *)v10)
      {
        v21 = 0;
        v22 = *(_DWORD *)(v11 - 8);
        v23 = *(_DWORD *)(v2 + 16) >> 8;
        for (i = v23; ; i = v21 + v25)
        {
          v25 = i & v22;
          v26 = *(_QWORD *)(v11 + 40 * v25);
          if (!v26)
            break;
          if (v26 != -1 && v26 == v2)
          {
            for (j = 0; ; v23 = j + v29)
            {
              v29 = v23 & v22;
              v30 = (uint64_t *)(v11 + 40 * (v23 & v22));
              v31 = *v30;
              if (!*v30)
                break;
              if (v31 != -1 && v31 == v2)
              {
                v33 = *(_DWORD *)(v11 - 4);
                goto LABEL_34;
              }
              ++j;
            }
            v33 = *(_DWORD *)(v11 - 4);
            v30 = (uint64_t *)(v11 + 40 * v33);
LABEL_34:
            if (v30 == (uint64_t *)(v11 + 40 * v33) || *((_DWORD *)v30 + 4) <= 1u)
            {
              WebCore::TreeScopeOrderedMap::getElementById(v10, a2, v9, (uint64_t *)&v49);
              v34 = v49;
              v50 = v49;
            }
            else
            {
LABEL_36:
              v34 = v50;
            }
            if (!v34)
              return (WebCore::Node *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
            v35 = WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::elementMatches(*(_WORD *)(a1 + 21), (uint64_t)v34);
            v3 = v50;
            if ((v35 & 1) == 0)
            {
              v50 = 0;
              if (v3)
              {
                if (*((_DWORD *)v3 + 6) == 2)
                {
                  if ((*((_WORD *)v3 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v3, v36);
                }
                else
                {
                  *((_DWORD *)v3 + 6) -= 2;
                }
              }
              return (WebCore::Node *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
            }
            v37 = *((_QWORD *)v50 + 4);
            v50 = 0;
            if (*((_DWORD *)v3 + 6) == 2)
            {
              if ((*((_WORD *)v3 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v3, v36);
            }
            else
            {
              *((_DWORD *)v3 + 6) -= 2;
            }
            if (v37 != v8)
              return (WebCore::Node *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
            return v3;
          }
          ++v21;
        }
      }
    }
    v12 = (uint64_t *)*((_QWORD *)v9 + 4);
    if (v12)
    {
      v13 = *v12;
      if (v13)
      {
        v14 = 0;
        v15 = *(_DWORD *)(v13 - 8);
        v16 = *(_DWORD *)(v2 + 16) >> 8;
        for (k = v16; ; k = v14 + v18)
        {
          v18 = k & v15;
          v19 = *(_QWORD *)(v13 + 40 * v18);
          if (!v19)
            break;
          if (v19 != -1 && v19 == v2)
          {
            for (m = 0; ; v16 = m + v39)
            {
              v39 = v16 & v15;
              v40 = (uint64_t *)(v13 + 40 * (v16 & v15));
              v41 = *v40;
              if (!*v40)
                break;
              if (v41 != -1 && v41 == v2)
              {
                v43 = *(_DWORD *)(v13 - 4);
                goto LABEL_51;
              }
              ++m;
            }
            v43 = *(_DWORD *)(v13 - 4);
            v40 = (uint64_t *)(v13 + 40 * v43);
LABEL_51:
            if (v40 == (uint64_t *)(v13 + 40 * v43) || *((_DWORD *)v40 + 4) <= 1u)
            {
              WebCore::TreeScope::getElementByName(*(unsigned int **)(v8 + 40), a2, (uint64_t *)&v49);
              v45 = *WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v50, (uint64_t *)&v49);
              v46 = v49;
              v49 = 0;
              if (v46)
              {
                if (*((_DWORD *)v46 + 6) == 2)
                {
                  if ((*((_WORD *)v46 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v46, v44);
                }
                else
                {
                  *((_DWORD *)v46 + 6) -= 2;
                }
              }
              if (v45)
              {
                v47 = (WebCore *)*((unsigned __int16 *)v50 + 14);
                if ((v47 & 0x10) == 0
                  || (*(_WORD *)(a1 + 21) & 0x1F) == 7
                  && !WebCore::nameShouldBeVisibleInDocumentAll(v47, *((WebCore::Element **)v50 + 12)))
                {
                  WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v50, 0);
                }
              }
            }
            goto LABEL_36;
          }
          ++v14;
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>,(WebCore::CollectionTraversalType)1>::invalidateCacheForDocument(uint64_t a1, WebCore::Document *a2)
{
  uint64_t result;

  result = WebCore::HTMLCollection::invalidateCacheForDocument(a1, a2);
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    WebCore::Document::unregisterCollection((uint64_t)a2, (WebCore::HTMLCollection *)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 80) &= 0xFCu;
    return WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1 + 64, 0);
  }
  return result;
}

void WebCore::FileChooserSettings::~FileChooserSettings(WebCore::FileChooserSettings *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v9 = (WTF::StringImpl **)*((_QWORD *)this + 5);
    v10 = 8 * v3;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v4 = (WTF *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 9);
  if ((_DWORD)v5)
  {
    v12 = (WTF::StringImpl **)*((_QWORD *)this + 3);
    v13 = 8 * v5;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v6 = (WTF *)*((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *((unsigned int *)this + 5);
  if ((_DWORD)v7)
  {
    v15 = (WTF::StringImpl **)*((_QWORD *)this + 1);
    v16 = 8 * v7;
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, a2);
        else
          *(_DWORD *)v17 -= 2;
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  v8 = (WTF *)*((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v8, a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL17cloneIfIsFormDataEONS_7variantIJDnNS8_6RefPtrINSA_4FileENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringENSC_INSA_11DOMFormDataENSE_ISK_EENSG_ISK_EEEEEEEEUlSN_E_JZNSA_L17cloneIfIsFormDataESP_EUlRKT_E_EEEEEJONS0_6__baseILNS0_6_TraitE1EJDnSI_SJ_SN_EEEEEEDcSR_DpT0_(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL17cloneIfIsFormDataEONS_7variantIJDnNS8_6RefPtrINSA_4FileENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringENSC_INSA_11DOMFormDataENSE_ISK_EENSG_ISK_EEEEEEEEUlSN_E_JZNSA_L17cloneIfIsFormDataESP_EUlRKT_E_EEEEEJONS0_6__baseILNS0_6_TraitE1EJDnSI_SJ_SN_EEEEEEDcSR_DpT0_(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
    ++*(_DWORD *)(v2 + 16);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL17cloneIfIsFormDataEONS_7variantIJDnNS8_6RefPtrINSA_4FileENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringENSC_INSA_11DOMFormDataENSE_ISK_EENSG_ISK_EEEEEEEEUlSN_E_JZNSA_L17cloneIfIsFormDataESP_EUlRKT_E_EEEEEJONS0_6__baseILNS0_6_TraitE1EJDnSI_SJ_SN_EEEEEEDcSR_DpT0_(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  if (*a1)
    *v2 += 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 2;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL17cloneIfIsFormDataEONS_7variantIJDnNS8_6RefPtrINSA_4FileENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringENSC_INSA_11DOMFormDataENSE_ISK_EENSG_ISK_EEEEEEEEUlSN_E_JZNSA_L17cloneIfIsFormDataESP_EUlRKT_E_EEEEEJONS0_6__baseILNS0_6_TraitE1EJDnSI_SJ_SN_EEEEEEDcSR_DpT0_@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::ScriptExecutionContext *v8;
  __int128 v9;
  unsigned int *result;
  int v11;

  v3 = *a1;
  *a1 = 0;
  v4 = WTF::fastMalloc((WTF *)0x48);
  v5 = v4;
  v6 = *(_QWORD *)(v3 + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      v8 = (WebCore::ScriptExecutionContext *)(v7 - 96);
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
  }
  *(_DWORD *)(v4 + 16) = 1;
  *(_QWORD *)v4 = &off_1E33A18C0;
  *(_QWORD *)(v4 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v4, v8);
  *(_QWORD *)v5 = &off_1E33B0880;
  *(_QWORD *)(v5 + 24) = &off_1E31F4A18;
  v9 = *(_OWORD *)(v3 + 32);
  *(_WORD *)(v5 + 48) = *(_WORD *)(v3 + 48);
  *(_OWORD *)(v5 + 32) = v9;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  result = WTF::Vector<WebCore::DOMFormData::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v5 + 56), (unsigned int *)(v3 + 56));
  v11 = *(_DWORD *)(v5 + 16);
  *(_DWORD *)(v5 + 16) = v11 + 1;
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = 3;
  if (v11)
    *(_DWORD *)(v5 + 16) = v11;
  else
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  if (*(_DWORD *)(v3 + 16) == 1)
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  --*(_DWORD *)(v3 + 16);
  return result;
}

uint64_t WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      if (*(_QWORD *)v4 != -1)
      {
        WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::destroyAll((WTF::StringImpl **)(v4 + 16), a2);
        v5 = *(WTF **)(v4 + 32);
        if (v5)
        {
          *(_QWORD *)(v4 + 32) = 0;
          *(_DWORD *)(v4 + 40) = 0;
          WTF::fastFree(v5, a2);
        }
        v6 = *(WTF::StringImpl **)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        v7 = *(WTF::StringImpl **)v4;
        *(_QWORD *)v4 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
      }
      v4 += 48;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v3)
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = 8 * v3;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

void WebCore::HTMLAllCollection::~HTMLAllCollection(WebCore::HTMLAllCollection *this, void *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E33A09B8;
  if (*((_QWORD *)this + 6) || (*((_BYTE *)this + 80) & 3) != 0)
    WebCore::Document::unregisterCollection(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8), this);
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection(this, v3);
}

{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E33A09B8;
  if (*((_QWORD *)this + 6) || (*((_BYTE *)this + 80) & 3) != 0)
    WebCore::Document::unregisterCollection(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8), this);
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection(this, v3);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLAnchorElement::relList(void)::$_0,BOOL,WebCore::Document &,WTF::StringView>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v5;
  int v6;
  int v7;

  result = 0;
  switch((int)a4)
  {
    case 2:
      if ((a4 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a3 & 0xDF) != 0x41)
          return 0;
        v5 = *(unsigned __int8 *)(a3 + 1);
      }
      else
      {
        if ((*(_WORD *)a3 & 0xFFDF) != 0x41)
          return 0;
        v5 = *(unsigned __int16 *)(a3 + 2);
      }
      if ((v5 & 0xFFFFFFDF) != 0x52)
        return 0;
      return *(unsigned __int8 *)(*(_QWORD *)(a2 + 680) + 724) >> 7;
    case 6:
      if ((a4 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a3 & 0xDF) != 0x4F
          || (*(_BYTE *)(a3 + 1) & 0xDF) != 0x50
          || (*(_BYTE *)(a3 + 2) & 0xDF) != 0x45
          || (*(_BYTE *)(a3 + 3) & 0xDF) != 0x4E
          || (*(_BYTE *)(a3 + 4) & 0xDF) != 0x45)
        {
          return 0;
        }
        v7 = *(unsigned __int8 *)(a3 + 5);
      }
      else
      {
        if ((*(_WORD *)a3 & 0xFFDF) != 0x4F
          || (*(_WORD *)(a3 + 2) & 0xFFDF) != 0x50
          || (*(_WORD *)(a3 + 4) & 0xFFDF) != 0x45
          || (*(_WORD *)(a3 + 6) & 0xFFDF) != 0x4E
          || (*(_WORD *)(a3 + 8) & 0xFFDF) != 0x45)
        {
          return 0;
        }
        v7 = *(unsigned __int16 *)(a3 + 10);
      }
      return (v7 & 0xFFFFFFDF) == 82;
    case 8:
      if ((a4 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a3 & 0xDF) == 0x4E
          && (*(_BYTE *)(a3 + 1) & 0xDF) == 0x4F
          && (*(_BYTE *)(a3 + 2) & 0xDF) == 0x4F
          && (*(_BYTE *)(a3 + 3) & 0xDF) == 0x50
          && (*(_BYTE *)(a3 + 4) & 0xDF) == 0x45
          && (*(_BYTE *)(a3 + 5) & 0xDF) == 0x4E
          && (*(_BYTE *)(a3 + 6) & 0xDF) == 0x45)
        {
          v6 = *(unsigned __int8 *)(a3 + 7);
          return (v6 & 0xFFFFFFDF) == 0x52;
        }
      }
      else if ((*(_WORD *)a3 & 0xFFDF) == 0x4E
             && (*(_WORD *)(a3 + 2) & 0xFFDF) == 0x4F
             && (*(_WORD *)(a3 + 4) & 0xFFDF) == 0x4F
             && (*(_WORD *)(a3 + 6) & 0xFFDF) == 0x50
             && (*(_WORD *)(a3 + 8) & 0xFFDF) == 0x45
             && (*(_WORD *)(a3 + 10) & 0xFFDF) == 0x4E
             && (*(_WORD *)(a3 + 12) & 0xFFDF) == 0x45)
      {
        v6 = *(unsigned __int16 *)(a3 + 14);
        return (v6 & 0xFFFFFFDF) == 0x52;
      }
      return 0;
    case 10:
      if ((a4 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a3 & 0xDF) != 0x4E
          || (*(_BYTE *)(a3 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(a3 + 2) & 0xDF) != 0x52
          || (*(_BYTE *)(a3 + 3) & 0xDF) != 0x45
          || (*(_BYTE *)(a3 + 4) & 0xDF) != 0x46
          || (*(_BYTE *)(a3 + 5) & 0xDF) != 0x45
          || (*(_BYTE *)(a3 + 6) & 0xDF) != 0x52
          || (*(_BYTE *)(a3 + 7) & 0xDF) != 0x52
          || (*(_BYTE *)(a3 + 8) & 0xDF) != 0x45)
        {
          return 0;
        }
        v6 = *(unsigned __int8 *)(a3 + 9);
      }
      else
      {
        if ((*(_WORD *)a3 & 0xFFDF) != 0x4E
          || (*(_WORD *)(a3 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(a3 + 4) & 0xFFDF) != 0x52
          || (*(_WORD *)(a3 + 6) & 0xFFDF) != 0x45
          || (*(_WORD *)(a3 + 8) & 0xFFDF) != 0x46
          || (*(_WORD *)(a3 + 10) & 0xFFDF) != 0x45
          || (*(_WORD *)(a3 + 12) & 0xFFDF) != 0x52
          || (*(_WORD *)(a3 + 14) & 0xFFDF) != 0x52
          || (*(_WORD *)(a3 + 16) & 0xFFDF) != 0x45)
        {
          return 0;
        }
        v6 = *(unsigned __int16 *)(a3 + 18);
      }
      return (v6 & 0xFFFFFFDF) == 0x52;
    default:
      return result;
  }
}

uint64_t std::__optional_destruct_base<WebCore::PrivateClickMeasurement,false>::__optional_destruct_base[abi:sn180100]<WebCore::PrivateClickMeasurement>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(a2 + 24);
  v7 = *(_OWORD *)(a2 + 33);
  *(_BYTE *)(a1 + 56) = 0;
  v8 = a1 + 56;
  *(_OWORD *)(v8 - 23) = v7;
  *(_OWORD *)(v8 - 32) = v6;
  *(_BYTE *)(v8 + 128) = 0;
  if (*(_BYTE *)(a2 + 184))
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v8, a2 + 56);
    *(_BYTE *)(a1 + 184) = 1;
  }
  v9 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v9;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  if (*(_BYTE *)(a2 + 232))
  {
    v10 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a2 + 224) = 0;
    *(_QWORD *)(a1 + 224) = v10;
    *(_BYTE *)(a1 + 232) = 1;
  }
  v11 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a1 + 240) = v11;
  v12 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a1 + 248) = v12;
  v13 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a1 + 256) = v13;
  v14 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a1 + 264) = v14;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  if (*(_BYTE *)(a2 + 296))
  {
    v15 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a2 + 272) = 0;
    *(_QWORD *)(a1 + 272) = v15;
    v16 = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a2 + 280) = 0;
    *(_QWORD *)(a1 + 280) = v16;
    v17 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a2 + 288) = 0;
    *(_QWORD *)(a1 + 288) = v17;
    *(_BYTE *)(a1 + 296) = 1;
  }
  v18 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a1 + 304) = v18;
  *(_BYTE *)(a1 + 312) = 1;
  return a1;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (result)
  {
    v2 = *(_BYTE *)(a2 + 2);
    *(_WORD *)result = *(_WORD *)a2;
    *(_BYTE *)(result + 2) = v2;
    *(_BYTE *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    if (*(_BYTE *)(a2 + 16))
    {
      v3 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(result + 8) = v3;
      *(_BYTE *)(result + 16) = 1;
    }
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    if (*(_BYTE *)(a2 + 32))
    {
      v4 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(result + 24) = v4;
      *(_BYTE *)(result + 32) = 1;
    }
    *(_BYTE *)(result + 40) = 0;
    *(_BYTE *)(result + 48) = 0;
    if (*(_BYTE *)(a2 + 48))
    {
      v5 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(result + 40) = v5;
      *(_BYTE *)(result + 48) = 1;
    }
    *(_BYTE *)(result + 56) = 0;
    *(_BYTE *)(result + 88) = 0;
    if (*(_BYTE *)(a2 + 88))
    {
      v6 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(result + 56) = v6;
      v7 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(result + 64) = v7;
      v8 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 72) = 0;
      *(_QWORD *)(result + 72) = v8;
      v9 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(result + 80) = v9;
      *(_BYTE *)(result + 88) = 1;
    }
    *(_BYTE *)(result + 96) = 0;
    *(_BYTE *)(result + 120) = 0;
    if (*(_BYTE *)(a2 + 120))
    {
      v10 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(result + 96) = v10;
      v11 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a2 + 104) = 0;
      *(_QWORD *)(result + 104) = v11;
      v12 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a2 + 112) = 0;
      *(_QWORD *)(result + 112) = v12;
      *(_BYTE *)(result + 120) = 1;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void WebCore::PrivateClickMeasurement::~PrivateClickMeasurement(WebCore::PrivateClickMeasurement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*((_BYTE *)this + 296))
  {
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 36);
    *((_QWORD *)this + 36) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 35);
    *((_QWORD *)this + 35) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 34);
    *((_QWORD *)this + 34) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (const void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v8)
    CFRelease(v8);
  v9 = (const void *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v10)
    CFRelease(v10);
  if (*((_BYTE *)this + 232))
  {
    v11 = (WTF::StringImpl *)*((_QWORD *)this + 28);
    *((_QWORD *)this + 28) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, a2);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  if (*((_BYTE *)this + 184))
    WebCore::PCM::AttributionTriggerData::~AttributionTriggerData((WebCore::PrivateClickMeasurement *)((char *)this + 56), a2);
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
}

void WebCore::PCM::AttributionTriggerData::~AttributionTriggerData(WebCore::PCM::AttributionTriggerData *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  if (*((_BYTE *)this + 120))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  if (*((_BYTE *)this + 88))
  {
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = (const void *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v7)
      CFRelease(v7);
    v8 = (const void *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v8)
      CFRelease(v8);
    v9 = (const void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v9)
      CFRelease(v9);
  }
  if (*((_BYTE *)this + 48))
  {
    v10 = (WTF::StringImpl *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, a2);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  if (*((_BYTE *)this + 32))
  {
    v11 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, a2);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  if (*((_BYTE *)this + 16))
  {
    v12 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, a2);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileInputType::filesChosen(WTF::Vector<WebCore::FileChooserFileInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WebCore::Icon *)::$_1,void,WTF::Ref<WebCore::FileList,WTF::RawPtrTraits<WebCore::FileList>,WTF::DefaultRefDerefTraits<WebCore::FileList>> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  const void *v8;

  *a1 = &off_1E33B3AB8;
  v3 = (WTF *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v8 = (const void *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v8)
        CFRelease(v8);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileInputType::filesChosen(WTF::Vector<WebCore::FileChooserFileInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WebCore::Icon *)::$_1,void,WTF::Ref<WebCore::FileList,WTF::RawPtrTraits<WebCore::FileList>,WTF::DefaultRefDerefTraits<WebCore::FileList>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  const void *v8;

  *(_QWORD *)this = &off_1E33B3AB8;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v8 = (const void *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v8)
        CFRelease(v8);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::FileInputType::filesChosen(WTF::Vector<WebCore::FileChooserFileInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WebCore::Icon *)::$_1,void,WTF::Ref<WebCore::FileList,WTF::RawPtrTraits<WebCore::FileList>,WTF::DefaultRefDerefTraits<WebCore::FileList>> &&>::call(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = result[2];
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
      return (uint64_t *)WebCore::FileInputType::didCreateFileList(result[1], a2, result + 3);
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormAssociatedCustomElement::appendFormData(WebCore::DOMFormData &)::$_0,WebCore::FormAssociatedCustomElement::appendFormData(WebCore::DOMFormData &)::$_1,WebCore::FormAssociatedCustomElement::appendFormData(WebCore::DOMFormData &)::$_2,WebCore::FormAssociatedCustomElement::appendFormData(WebCore::DOMFormData &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String,std::__variant_detail::_Trait<WebCore::DOMFormData,WebCore::File<WebCore::DOMFormData>,WTF::RawPtrTraits<WTF::RefPtr><WebCore::DOMFormData>>> &>(uint64_t *a1, WebCore::Blob **a2)
{
  uint64_t v2;
  WebCore::Blob *v3;
  uint64_t v4;
  WTF::StringImpl *result;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  const WTF::String **v10;
  WebCore::DOMFormData *v11;
  uint64_t v12;
  unsigned int v13;
  const WTF::String **v14;
  const WTF::String **v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  v2 = *a1;
  v3 = *a2;
  if (*a2)
    ++*((_DWORD *)v3 + 4);
  v4 = *(_QWORD *)(v2 + 24);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v6 = *((_QWORD *)result + 13);
  if (v6 && (v7 = *(_DWORD *)(v6 + 4), (v7 & 2) != 0))
  {
    if ((v7 & 1) != 0)
    {
      v17 = *(uint64_t **)(v6 + 40);
      LODWORD(v18) = *(_DWORD *)(v6 + 52);
    }
    else
    {
      v17 = (uint64_t *)(v6 + 32);
      LODWORD(v18) = v7 >> 5;
    }
    if ((_DWORD)v18)
    {
      v18 = v18;
      while (1)
      {
        v19 = *v17;
        if (*v17 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v19 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v19 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v17 += 2;
        if (!--v18)
          goto LABEL_36;
      }
    }
    else
    {
LABEL_36:
      v17 = 0;
    }
    v8 = v17 + 1;
  }
  else
  {
    v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v9 = *v8;
  v10 = (const WTF::String **)MEMORY[0x1E0CBF3B8];
  if (!v9)
    v9 = *MEMORY[0x1E0CBF3B8];
  if (v9 && *(_DWORD *)(v9 + 4))
  {
    v11 = *(WebCore::DOMFormData **)(v2 + 32);
    v12 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) + 104);
    if (v12 && (v13 = *(_DWORD *)(v12 + 4), (v13 & 2) != 0))
    {
      if ((v13 & 1) != 0)
      {
        v20 = *(_QWORD **)(v12 + 40);
        LODWORD(v21) = *(_DWORD *)(v12 + 52);
      }
      else
      {
        v20 = (_QWORD *)(v12 + 32);
        LODWORD(v21) = v13 >> 5;
      }
      if ((_DWORD)v21)
      {
        v21 = v21;
        while (1)
        {
          v22 = *v20;
          if (*v20 == WebCore::HTMLNames::nameAttr
            || *(_QWORD *)(v22 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
            && *(_QWORD *)(v22 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
          {
            break;
          }
          v20 += 2;
          if (!--v21)
            goto LABEL_49;
        }
      }
      else
      {
LABEL_49:
        v20 = 0;
      }
      v14 = (const WTF::String **)(v20 + 1);
    }
    else
    {
      v14 = (const WTF::String **)MEMORY[0x1E0CBF2F8];
    }
    if (*v14)
      v15 = v14;
    else
      v15 = v10;
    v23 = 0;
    WebCore::DOMFormData::append(v11, v15, v3, (const WTF::String *)&v23);
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v3)
  {
    if (*((_DWORD *)v3 + 4) == 1)
      return (WTF::StringImpl *)(*(uint64_t (**)(WebCore::Blob *))(*(_QWORD *)v3 + 8))(v3);
    else
      --*((_DWORD *)v3 + 4);
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormAssociatedCustomElement::appendFormData(WebCore::DOMFormData &)::$_0,WebCore::FormAssociatedCustomElement::appendFormData(WebCore::DOMFormData &)::$_1,WebCore::FormAssociatedCustomElement::appendFormData(WebCore::DOMFormData &)::$_2,WebCore::FormAssociatedCustomElement::appendFormData(WebCore::DOMFormData &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String,std::__variant_detail::_Trait<WebCore::DOMFormData,WebCore::File<WebCore::DOMFormData>,WTF::RawPtrTraits<WTF::RefPtr><WebCore::DOMFormData>>> &>(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *result;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WebCore::DOMFormData *v11;
  uint64_t v12;
  unsigned int v13;
  WTF::StringImpl **v14;
  WTF::StringImpl **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 8);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v6 = *((_QWORD *)result + 13);
  if (v6 && (v7 = *(_DWORD *)(v6 + 4), (v7 & 2) != 0))
  {
    if ((v7 & 1) != 0)
    {
      v16 = *(uint64_t **)(v6 + 40);
      LODWORD(v17) = *(_DWORD *)(v6 + 52);
    }
    else
    {
      v16 = (uint64_t *)(v6 + 32);
      LODWORD(v17) = v7 >> 5;
    }
    if ((_DWORD)v17)
    {
      v17 = v17;
      while (1)
      {
        v18 = *v16;
        if (*v16 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v18 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v18 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v16 += 2;
        if (!--v17)
          goto LABEL_27;
      }
    }
    else
    {
LABEL_27:
      v16 = 0;
    }
    v8 = v16 + 1;
  }
  else
  {
    v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v9 = *v8;
  v10 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
  if (!v9)
    v9 = *MEMORY[0x1E0CBF3B8];
  if (v9 && *(_DWORD *)(v9 + 4))
  {
    v11 = *(WebCore::DOMFormData **)(v3 + 16);
    v12 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) + 104);
    if (v12 && (v13 = *(_DWORD *)(v12 + 4), (v13 & 2) != 0))
    {
      if ((v13 & 1) != 0)
      {
        v19 = *(_QWORD **)(v12 + 40);
        LODWORD(v20) = *(_DWORD *)(v12 + 52);
      }
      else
      {
        v19 = (_QWORD *)(v12 + 32);
        LODWORD(v20) = v13 >> 5;
      }
      if ((_DWORD)v20)
      {
        v20 = v20;
        while (1)
        {
          v21 = *v19;
          if (*v19 == WebCore::HTMLNames::nameAttr
            || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
            && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
          {
            break;
          }
          v19 += 2;
          if (!--v20)
            goto LABEL_40;
        }
      }
      else
      {
LABEL_40:
        v19 = 0;
      }
      v14 = (WTF::StringImpl **)(v19 + 1);
    }
    else
    {
      v14 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    }
    if (*v14)
      v15 = v14;
    else
      v15 = v10;
    return WebCore::DOMFormData::append(v11, v15, a2);
  }
  return result;
}

_QWORD **std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormAssociatedCustomElement::appendFormData(WebCore::DOMFormData &)::$_0,WebCore::FormAssociatedCustomElement::appendFormData(WebCore::DOMFormData &)::$_1,WebCore::FormAssociatedCustomElement::appendFormData(WebCore::DOMFormData &)::$_2,WebCore::FormAssociatedCustomElement::appendFormData(WebCore::DOMFormData &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String,std::__variant_detail::_Trait<WebCore::DOMFormData,WebCore::File<WebCore::DOMFormData>,WTF::RawPtrTraits<WTF::RefPtr><WebCore::DOMFormData>>> &>(_QWORD **result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  _QWORD *v11;

  v2 = *result;
  v3 = *a2;
  if (*a2)
    ++*(_DWORD *)(v3 + 16);
  v4 = *(unsigned int *)(v3 + 68);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(v3 + 56);
    v6 = 24 * v4;
    v7 = v5 + 8;
    do
    {
      v10[0] = *v2;
      v10[1] = v5;
      v10[2] = v10[0];
      v10[3] = v5;
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8 == -1)
      {
        v9 = std::__throw_bad_variant_access[abi:sn180100]();
        return (_QWORD **)std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormAssociatedCustomElement::appendFormData(WebCore::DOMFormData &)::$_0::operator() const(WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>)::{lambda(WTF::String const&)#1},WebCore::FormAssociatedCustomElement::appendFormData(WebCore::DOMFormData &)::$_0::operator() const(WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>)::{lambda(WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String> const&>(v9);
      }
      v11 = v10;
      result = (_QWORD **)((uint64_t (*)(_QWORD **, uint64_t))*(&off_1E33B3AF0 + v8))(&v11, v7);
      v7 += 24;
      v5 += 24;
      v6 -= 24;
    }
    while (v6);
    if (!v3)
      return result;
  }
  if (*(_DWORD *)(v3 + 16) == 1)
    return (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  --*(_DWORD *)(v3 + 16);
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormAssociatedCustomElement::appendFormData(WebCore::DOMFormData &)::$_0::operator() const(WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>)::{lambda(WTF::String const&)#1},WebCore::FormAssociatedCustomElement::appendFormData(WebCore::DOMFormData &)::$_0::operator() const(WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>)::{lambda(WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String> const&>(uint64_t *a1, WebCore::Blob **a2)
{
  uint64_t v2;
  WebCore::Blob *v3;
  WebCore::DOMFormData *v4;
  const WTF::String **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  v2 = *a1;
  v3 = *a2;
  v4 = *(WebCore::DOMFormData **)(*a1 + 16);
  v5 = *(const WTF::String ***)(v2 + 24);
  if (v3)
    ++*((_DWORD *)v3 + 4);
  v8 = 0;
  WebCore::DOMFormData::append(v4, v5, v3, (const WTF::String *)&v8);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  if (*((_DWORD *)v3 + 4) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(WebCore::Blob *))(*(_QWORD *)v3 + 8))(v3);
  --*((_DWORD *)v3 + 4);
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormAssociatedCustomElement::appendFormData(WebCore::DOMFormData &)::$_0::operator() const(WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>)::{lambda(WTF::String const&)#1},WebCore::FormAssociatedCustomElement::appendFormData(WebCore::DOMFormData &)::$_0::operator() const(WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>)::{lambda(WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String> const&>(WebCore::DOMFormData ***a1, WTF::StringImpl **a2)
{
  return WebCore::DOMFormData::append(**a1, (WTF::StringImpl **)(*a1)[1], a2);
}

uint64_t WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>(uint64_t a1)
{
  uint64_t result;
  __int16 v2;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    v2 = *(_WORD *)(result + 28);
    if ((v2 & 8) != 0)
    {
      while ((v2 & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
      {
        result = *(_QWORD *)(result + 32);
        if (!result)
          break;
        v2 = *(_WORD *)(result + 28);
        if ((v2 & 8) == 0)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormAssociatedCustomElement::saveFormControlState(void)::$_0,WebCore::FormAssociatedCustomElement::saveFormControlState(void)::$_2,WebCore::FormAssociatedCustomElement::saveFormControlState(void)::$_3,WebCore::FormAssociatedCustomElement::saveFormControlState(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String,std::__variant_detail::_Trait<WebCore::DOMFormData,WebCore::File<WTF::String>,WTF::RawPtrTraits<WTF::RefPtr><WTF::String>>> const&>(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  unsigned int *v3;
  unsigned int *result;

  v2 = *(_DWORD **)a2;
  v3 = (unsigned int *)(*a1 + 24);
  if (!*(_QWORD *)a2)
    return WebCore::FormAssociatedCustomElement::saveFormControlState(void)const::$_1::operator()(v3, a2);
  ++v2[4];
  result = WebCore::FormAssociatedCustomElement::saveFormControlState(void)const::$_1::operator()(v3, a2);
  if (v2[4] == 1)
    return (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  --v2[4];
  return result;
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormAssociatedCustomElement::saveFormControlState(void)::$_0,WebCore::FormAssociatedCustomElement::saveFormControlState(void)::$_2,WebCore::FormAssociatedCustomElement::saveFormControlState(void)::$_3,WebCore::FormAssociatedCustomElement::saveFormControlState(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String,std::__variant_detail::_Trait<WebCore::DOMFormData,WebCore::File<WTF::String>,WTF::RawPtrTraits<WTF::RefPtr><WTF::String>>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *result;
  uint64_t v5;
  int v6;
  uint64_t *v7;

  v2 = *(uint64_t **)(*(_QWORD *)a1 + 16);
  v3 = *((unsigned int *)v2 + 3);
  if ((_DWORD)v3 == *((_DWORD *)v2 + 2))
    return WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>(*(uint64_t **)(*(_QWORD *)a1 + 16), a2);
  v5 = *v2;
  result = (uint64_t *)*a2;
  if (*a2)
  {
    if ((result[2] & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase((WTF::AtomStringImpl *)result, (WTF::StringImpl *)a2);
      result = v7;
      v6 = *((_DWORD *)v2 + 3);
      goto LABEL_7;
    }
    *(_DWORD *)result += 2;
  }
  v6 = v3;
LABEL_7:
  *(_QWORD *)(v5 + 8 * v3) = result;
  *((_DWORD *)v2 + 3) = v6 + 1;
  return result;
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormAssociatedCustomElement::saveFormControlState(void)::$_0,WebCore::FormAssociatedCustomElement::saveFormControlState(void)::$_2,WebCore::FormAssociatedCustomElement::saveFormControlState(void)::$_3,WebCore::FormAssociatedCustomElement::saveFormControlState(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String,std::__variant_detail::_Trait<WebCore::DOMFormData,WebCore::File<WTF::String>,WTF::RawPtrTraits<WTF::RefPtr><WTF::String>>> const&>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[2];
  __int128 v15;
  _QWORD *v16;

  v2 = *result;
  v3 = *a2;
  if (*a2)
    ++*(_DWORD *)(v3 + 16);
  v4 = *(unsigned int **)v2;
  v5 = *(unsigned int *)(v3 + 68);
  if (!(_DWORD)v5)
  {
LABEL_12:
    result = (uint64_t *)WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v4, v4[3]);
LABEL_13:
    if (*(_DWORD *)(v3 + 16) == 1)
      return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    --*(_DWORD *)(v3 + 16);
    return result;
  }
  if (v5 >> 28)
  {
LABEL_17:
    __break(0xC471u);
    return result;
  }
  v6 = 2 * v5;
  v7 = WTF::fastMalloc((WTF *)(16 * v5));
  v4[2] = v6;
  *(_QWORD *)v4 = v7;
  v8 = *(unsigned int *)(v3 + 68);
  if (!(_DWORD)v8)
  {
    v4 = *(unsigned int **)v2;
    goto LABEL_12;
  }
  v9 = *(_QWORD *)(v3 + 56);
  v10 = 24 * v8;
  v11 = v9 + 8;
  do
  {
    v12 = *(_OWORD *)*(_QWORD *)(v2 + 8);
    v14[0] = *(_QWORD *)v2;
    v14[1] = v9;
    v15 = v12;
    v13 = *(unsigned int *)(v11 + 8);
    if ((_DWORD)v13 == -1)
    {
      result = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_17;
    }
    v16 = v14;
    ((void (*)(_QWORD **, uint64_t))off_1E33B3B20[v13])(&v16, v11);
    v11 += 24;
    v9 += 24;
    v10 -= 24;
  }
  while (v10);
  result = (uint64_t *)WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(*(unsigned int **)v2, *(unsigned int *)(*(_QWORD *)v2 + 12));
  if (v3)
    goto LABEL_13;
  return result;
}

unsigned int *WebCore::FormAssociatedCustomElement::saveFormControlState(void)const::$_1::operator()(unsigned int *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int *v5;
  WTF::StringImpl *v6;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 56) + 8) + 40) + 8);
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  v4 = *(_QWORD *)(v2 + 528);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 8))
    {
      v5 = result;
      if (!**((_BYTE **)result + 1))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::Document::addConsoleMessage((_QWORD *)v2, 1, 1, &v6, 0);
        result = (unsigned int *)v6;
        v6 = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          else
            *result -= 2;
        }
        **((_BYTE **)v5 + 1) = 1;
        v3 = *(_DWORD *)(v2 + 24) - 2;
      }
    }
  }
  if (v3)
  {
    *(_DWORD *)(v2 + 24) = v3;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  return result;
}

uint64_t *WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;

  v3 = result;
  v4 = *((unsigned int *)result + 2);
  v5 = *((unsigned int *)result + 3);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v9 = (void *)*result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *((_DWORD *)v3 + 2) = v8;
    *v3 = (uint64_t)v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if ((void *)*v3 == v9)
      {
        *v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v11 = *((unsigned int *)v3 + 3);
  v12 = *((_DWORD *)v3 + 3);
  v13 = *v3;
  result = (uint64_t *)*a2;
  if (*a2)
  {
    if ((result[2] & 0x10) != 0)
    {
      *(_DWORD *)result += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase((WTF::AtomStringImpl *)result, (WTF::StringImpl *)a2);
      result = v14;
      v12 = *((_DWORD *)v3 + 3);
    }
  }
  *(_QWORD *)(v13 + 8 * v11) = result;
  *((_DWORD *)v3 + 3) = v12 + 1;
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormAssociatedCustomElement::saveFormControlState(void)::$_0::operator() const(WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>)::{lambda(WTF::String const&)#1},WebCore::FormAssociatedCustomElement::saveFormControlState(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<std::__variant_detail::_Trait>,WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,WTF::String> const&>(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  unsigned int *v3;
  unsigned int *result;

  v2 = *(_DWORD **)a2;
  v3 = (unsigned int *)(*a1 + 16);
  if (!*(_QWORD *)a2)
    return WebCore::FormAssociatedCustomElement::saveFormControlState(void)const::$_1::operator()(v3, a2);
  ++v2[4];
  result = WebCore::FormAssociatedCustomElement::saveFormControlState(void)const::$_1::operator()(v3, a2);
  if (v2[4] == 1)
    return (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  --v2[4];
  return result;
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormAssociatedCustomElement::saveFormControlState(void)::$_0::operator() const(WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>)::{lambda(WTF::String const&)#1},WebCore::FormAssociatedCustomElement::saveFormControlState(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<std::__variant_detail::_Trait>,WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,WTF::String> const&>(uint64_t ***a1, uint64_t *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  int v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t *result;
  uint64_t v14;
  int v15;
  WTF::AtomStringImpl *v16;

  v3 = *a1;
  v5 = **a1;
  v4 = (*a1)[1];
  v6 = *((unsigned int *)v5 + 3);
  if ((_DWORD)v6 == *((_DWORD *)v5 + 2))
  {
    WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>(**a1, v4);
    goto LABEL_8;
  }
  v7 = *v5;
  v8 = (WTF::AtomStringImpl *)*v4;
  if (*v4)
  {
    if ((*((_BYTE *)v8 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase(v8, (WTF::StringImpl *)v4);
      v8 = v16;
      v9 = *((_DWORD *)v5 + 3);
      goto LABEL_7;
    }
    *(_DWORD *)v8 += 2;
  }
  v9 = v6;
LABEL_7:
  *(_QWORD *)(v7 + 8 * v6) = v8;
  *((_DWORD *)v5 + 3) = v9 + 1;
LABEL_8:
  v10 = *v3;
  v11 = *((_DWORD *)*v3 + 2);
  v12 = *((unsigned int *)*v3 + 3);
  if ((_DWORD)v12 == v11)
    return WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>(v10, a2);
  v14 = *v10;
  result = (uint64_t *)*a2;
  if (*a2)
  {
    if ((result[2] & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase((WTF::AtomStringImpl *)result, (WTF::StringImpl *)v4);
      result = (uint64_t *)v16;
      v15 = *((_DWORD *)v10 + 3);
      goto LABEL_14;
    }
    *(_DWORD *)result += 2;
  }
  v15 = v12;
LABEL_14:
  *(_QWORD *)(v14 + 8 * v12) = result;
  *((_DWORD *)v10 + 3) = v15 + 1;
  return result;
}

WTF::StringImpl **WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::destroyAll(WTF::StringImpl **result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  v2 = *result;
  v3 = result[1];
  v4 = result[2];
  v5 = (WTF::StringImpl *)((char *)v4 + 16 * (_QWORD)v3);
  if (*result <= v3)
  {
    if (*result != v3)
    {
      v11 = (uint64_t)v4 + 16 * (_QWORD)v2;
      do
      {
        v12 = *(unsigned int *)(v11 + 12);
        if ((_DWORD)v12)
        {
          v13 = *(WTF::StringImpl ***)v11;
          v14 = 8 * v12;
          do
          {
            v15 = *v13;
            *v13 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, a2);
              else
                *(_DWORD *)v15 -= 2;
            }
            ++v13;
            v14 -= 8;
          }
          while (v14);
        }
        result = *(WTF::StringImpl ***)v11;
        if (*(_QWORD *)v11)
        {
          *(_QWORD *)v11 = 0;
          *(_DWORD *)(v11 + 8) = 0;
          result = (WTF::StringImpl **)WTF::fastFree((WTF *)result, a2);
        }
        v11 += 16;
      }
      while ((WTF::StringImpl *)v11 != v5);
    }
  }
  else
  {
    v6 = result;
    if (v3)
    {
      do
      {
        v7 = *((unsigned int *)v4 + 3);
        if ((_DWORD)v7)
        {
          v8 = *(WTF::StringImpl ***)v4;
          v9 = 8 * v7;
          do
          {
            v10 = *v8;
            *v8 = 0;
            if (v10)
            {
              if (*(_DWORD *)v10 == 2)
                WTF::StringImpl::destroy(v10, a2);
              else
                *(_DWORD *)v10 -= 2;
            }
            ++v8;
            v9 -= 8;
          }
          while (v9);
        }
        result = *(WTF::StringImpl ***)v4;
        if (*(_QWORD *)v4)
        {
          *(_QWORD *)v4 = 0;
          *((_DWORD *)v4 + 2) = 0;
          result = (WTF::StringImpl **)WTF::fastFree((WTF *)result, a2);
        }
        v4 = (WTF::StringImpl *)((char *)v4 + 16);
      }
      while (v4 != v5);
      v4 = v6[2];
      v2 = *v6;
    }
    v16 = (WTF::StringImpl *)*((unsigned int *)v6 + 6);
    if (v2 != v16)
    {
      v17 = (uint64_t)v4 + 16 * (_QWORD)v16;
      v18 = (uint64_t)v4 + 16 * (_QWORD)v2;
      do
      {
        v19 = *(unsigned int *)(v18 + 12);
        if ((_DWORD)v19)
        {
          v20 = *(WTF::StringImpl ***)v18;
          v21 = 8 * v19;
          do
          {
            v22 = *v20;
            *v20 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, a2);
              else
                *(_DWORD *)v22 -= 2;
            }
            ++v20;
            v21 -= 8;
          }
          while (v21);
        }
        result = *(WTF::StringImpl ***)v18;
        if (*(_QWORD *)v18)
        {
          *(_QWORD *)v18 = 0;
          *(_DWORD *)(v18 + 8) = 0;
          result = (WTF::StringImpl **)WTF::fastFree((WTF *)result, a2);
        }
        v18 += 16;
      }
      while (v18 != v17);
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF *v18;
  _QWORD *v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  WTF::StringImpl **v28;
  unsigned int v29;
  uint64_t v30;
  _OWORD *v31;
  void *v32;
  WTF *v33;
  _QWORD *v34;
  WTF *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl **result;
  uint64_t v49;
  WTF::StringImpl **v52;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 48 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v49 = v5;
    do
    {
      v14 = (WTF::StringImpl **)(v4 + 48 * v11);
      v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        v16 = v14[1];
        if ((unint64_t)v15 | (unint64_t)v16)
        {
          v23 = *a1;
          if (*a1)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v52 = v12;
          v25 = v24 & ((0xD7862706ELL
                      * (unint64_t)(277951225 * (*((_DWORD *)v15 + 4) >> 8)
                                                       + 95187966 * (*((_DWORD *)v16 + 4) >> 8))) >> 4);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = (WTF::StringImpl **)(v23 + 48 * v25);
            v25 = (v25 + v26++) & v24;
          }
          while (*(_OWORD *)v28 != 0);
          v29 = v27;
          v30 = v23 + 48 * v27;
          v31 = (_OWORD *)(v30 + 16);
          WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::destroyAll((WTF::StringImpl **)(v30 + 16), v8);
          v35 = *(WTF **)(v30 + 32);
          v34 = (_QWORD *)(v30 + 32);
          v33 = v35;
          if (v35)
          {
            *v34 = 0;
            *(_DWORD *)(v23 + 48 * v29 + 40) = 0;
            WTF::fastFree(v33, v32);
          }
          v36 = v28[1];
          v28[1] = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v32);
            else
              *(_DWORD *)v36 -= 2;
          }
          v37 = *v28;
          *v28 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v32);
            else
              *(_DWORD *)v37 -= 2;
          }
          v38 = *v14;
          *v14 = 0;
          *v28 = v38;
          v39 = v14[1];
          v14[1] = 0;
          v28[1] = v39;
          v40 = v4 + 48 * v11;
          *v31 = 0u;
          v31[1] = 0u;
          v42 = *(_QWORD *)(v40 + 32);
          v41 = v40 + 32;
          *(_QWORD *)v31 = *(_QWORD *)(v41 - 16);
          *(_QWORD *)(v41 - 16) = 0;
          v43 = v23 + 48 * v29;
          v44 = *(_QWORD *)(v43 + 24);
          *(_QWORD *)(v43 + 24) = *(_QWORD *)(v41 - 8);
          *(_QWORD *)(v41 - 8) = v44;
          *v34 = v42;
          *(_QWORD *)v41 = 0;
          *(_DWORD *)(v43 + 40) = *(_DWORD *)(v41 + 8);
          *(_DWORD *)(v41 + 8) = 0;
          WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::destroyAll((WTF::StringImpl **)(v41 - 16), (WTF::StringImpl *)v32);
          v45 = *(WTF **)v41;
          if (*(_QWORD *)v41)
          {
            *(_QWORD *)v41 = 0;
            *(_DWORD *)(v41 + 8) = 0;
            WTF::fastFree(v45, v8);
          }
          v46 = v14[1];
          v14[1] = 0;
          v12 = v52;
          v13 = v49;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
              WTF::StringImpl::destroy(v46, v8);
            else
              *(_DWORD *)v46 -= 2;
          }
          v47 = *v14;
          *v14 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
              WTF::StringImpl::destroy(v47, v8);
            else
              *(_DWORD *)v47 -= 2;
          }
          if (v14 == a3)
            v12 = v28;
        }
        else
        {
          v17 = v4 + 48 * v11;
          WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::destroyAll((WTF::StringImpl **)(v17 + 16), v8);
          v20 = *(WTF **)(v17 + 32);
          v19 = (_QWORD *)(v17 + 32);
          v18 = v20;
          if (v20)
          {
            *v19 = 0;
            *(_DWORD *)(v4 + 48 * v11 + 40) = 0;
            WTF::fastFree(v18, v8);
          }
          v21 = v14[1];
          v14[1] = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v8);
            else
              *(_DWORD *)v21 -= 2;
          }
          v22 = *v14;
          *v14 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v8);
            else
              *(_DWORD *)v22 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>(uint64_t result, unsigned int a2, int a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  BOOL v16;
  _WORD *v17;
  int8x16_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  char *v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  _DWORD *v33;
  _WORD *v34;
  unsigned __int128 *v36;
  unsigned __int128 *v37;
  unsigned __int128 v38;
  char v39;
  _QWORD v40[3];
  int8x16x2_t v41;
  int8x16x2_t v42;
  int8x16x2_t v43;

  v8 = (_QWORD *)result;
  v40[2] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a2)
    {
      if ((a2 & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
        v9 = v40[0];
        if (v40[0])
        {
          v10 = (_BYTE *)(v40[0] + 20);
          *(_DWORD *)v40[0] = 2;
          *(_DWORD *)(v9 + 4) = a2;
          *(_QWORD *)(v9 + 8) = v9 + 20;
          *(_DWORD *)(v9 + 16) = 4;
          if (a4)
          {
            v11 = *(_BYTE **)(a4 + 8);
            v12 = *(unsigned int *)(a4 + 4);
            if ((*(_BYTE *)(a4 + 16) & 4) != 0)
            {
              if ((_DWORD)v12)
              {
                if ((_DWORD)v12 == 1)
                  *v10 = *v11;
                else
                  result = (uint64_t)memcpy((void *)(v9 + 20), v11, v12);
              }
            }
            else
            {
              if (v12 < 0x10)
              {
                v36 = (unsigned __int128 *)(v9 + 20);
              }
              else
              {
                v36 = (unsigned __int128 *)&v10[v12 & 0xFFFFFFF0];
                v37 = (unsigned __int128 *)(v9 + 20);
                do
                {
                  v38 = (unsigned __int128)vld2q_s8(v11);
                  v11 += 32;
                  *v37++ = v38;
                }
                while (v37 != v36);
              }
              while (v36 != (unsigned __int128 *)&v10[v12])
              {
                v39 = *v11;
                v11 += 2;
                *(_BYTE *)v36 = v39;
                v36 = (unsigned __int128 *)((char *)v36 + 1);
              }
            }
            v13 = *(unsigned int *)(a4 + 4);
          }
          else
          {
            v13 = 0;
          }
          v14 = 0;
          v15 = &v10[v13];
          *v15 = 8992;
          do
          {
            *((_BYTE *)&v40[1] + v14-- + 4) = (a5 % 0xA) | 0x30;
            v16 = a5 > 9;
            a5 /= 0xAu;
          }
          while (v16);
          if (v14 + 14 <= 13)
            result = (uint64_t)memcpy(v15 + 1, (char *)&v40[1] + v14 + 5, -v14);
        }
        goto LABEL_41;
      }
LABEL_43:
      v9 = 0;
      goto LABEL_41;
    }
LABEL_42:
    v9 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_41;
  }
  if (!a2)
    goto LABEL_42;
  if (a2 > 0x7FFFFFEF)
    goto LABEL_43;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
  v9 = v40[0];
  if (v40[0])
  {
    v17 = (_WORD *)(v40[0] + 20);
    *(_DWORD *)v40[0] = 2;
    *(_DWORD *)(v9 + 4) = a2;
    *(_QWORD *)(v9 + 8) = v9 + 20;
    *(_DWORD *)(v9 + 16) = 0;
    if (a4)
    {
      v18 = *(int8x16_t **)(a4 + 8);
      v19 = *(unsigned int *)(a4 + 4);
      if ((*(_BYTE *)(a4 + 16) & 4) != 0)
      {
        v20 = (char *)&v17[v19];
        if (v19 >= 0x40)
        {
          v21 = (char *)&v17[v19 & 0xFFFFFFC0];
          v23 = 0uLL;
          v24 = (char *)(v9 + 20);
          do
          {
            v41.val[0] = *v18;
            v25 = v18[1];
            v42.val[0] = v18[2];
            v26 = v18[3];
            v18 += 4;
            v27 = v26;
            v42.val[1] = 0uLL;
            v43.val[0] = v25;
            v41.val[1] = 0uLL;
            v28 = v24;
            vst2q_s8(v28, v41);
            v28 += 32;
            v43.val[1] = 0uLL;
            vst2q_s8(v28, v43);
            v29 = v24 + 64;
            vst2q_s8(v29, v42);
            v30 = v24 + 96;
            vst2q_s8(v30, *(int8x16x2_t *)(&v23 - 1));
            v24 += 128;
          }
          while (v24 != v21);
        }
        else
        {
          v21 = (char *)(v9 + 20);
        }
        while (v21 != v20)
        {
          v31 = v18->u8[0];
          v18 = (int8x16_t *)((char *)v18 + 1);
          *(_WORD *)v21 = v31;
          v21 += 2;
        }
      }
      else if ((_DWORD)v19 == 1)
      {
        *v17 = v18->i16[0];
      }
      else if ((_DWORD)v19)
      {
        result = (uint64_t)memcpy((void *)(v9 + 20), v18, 2 * v19);
      }
      v22 = *(unsigned int *)(a4 + 4);
    }
    else
    {
      v22 = 0;
    }
    v32 = 0;
    v33 = &v17[v22];
    *v33 = 2293792;
    do
    {
      *((_BYTE *)&v40[1] + v32-- + 4) = (a5 % 0xA) | 0x30;
      v16 = a5 > 9;
      a5 /= 0xAu;
    }
    while (v16);
    if (v32 + 14 <= 13)
    {
      v34 = v33 + 1;
      do
        *v34++ = *((unsigned __int8 *)&v40[1] + v32 + 5);
      while (!__CFADD__(v32++, 1));
    }
  }
LABEL_41:
  *v8 = v9;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **result;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl **v15;
  void *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (_QWORD *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::reinsert(*a1, (uint64_t)v14);
          WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair((uint64_t)v14, v16);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair((uint64_t)v14, v10);
        }
      }
      v14 += 3;
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::reinsert(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  WTF **v13;
  WTF *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = 0;
  v6 = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
  do
  {
    v7 = v6 & v4;
    v8 = (WTF::StringImpl **)(a1 + 24 * (v6 & v4));
    v6 = ++v5 + (v6 & v4);
  }
  while (*v8);
  v9 = a1 + 24 * v7;
  v12 = *(_DWORD *)(v9 + 20);
  v11 = (_DWORD *)(v9 + 20);
  v10 = v12;
  v13 = (WTF **)(v11 - 3);
  if (v12)
  {
    v19 = *v13;
    v20 = 8 * v10;
    do
    {
      v21 = *(_QWORD *)v19;
      *(_QWORD *)v19 = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 96))(v21);
      v19 = (WTF *)((char *)v19 + 8);
      v20 -= 8;
    }
    while (v20);
  }
  v14 = *v13;
  if (*v13)
  {
    *v13 = 0;
    *(_DWORD *)(a1 + 24 * v7 + 16) = 0;
    WTF::fastFree(v14, (void *)a2);
  }
  v15 = *v8;
  *v8 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  *v8 = v16;
  *v13 = 0;
  *(_QWORD *)(v11 - 1) = 0;
  v17 = *(WTF **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *v13 = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 24 * v7 + 16) = (_DWORD)v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *v11 = (_DWORD)v17;
  return v8;
}

uint64_t WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(uint64_t result, WTF::StringImpl **a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
  }
  v12 = *(unsigned int *)(v3 + 12);
  v13 = *(_QWORD *)v3;
  v14 = *a2;
  *a2 = 0;
  if (v14)
  {
    if ((*((_BYTE *)v14 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v17 = v14;
      v14 = v18;
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v15 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v15 = v12;
  }
  *(_QWORD *)(v13 + 8 * v12) = v14;
  *(_DWORD *)(v3 + 12) = v15 + 1;
  return 1;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::FormController::SavedFormState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::FormController::SavedFormState>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::FormController::SavedFormState,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::FormController::SavedFormState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = v5;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v4 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = *((_DWORD *)v14 + 4);
          if (v17 < 0x100)
            v18 = WTF::StringImpl::hashSlowCase(v14);
          else
            v18 = v17 >> 8;
          v19 = 0;
          do
          {
            v20 = v18 & v16;
            v18 = ++v19 + v20;
          }
          while (*(_QWORD *)(v15 + 16 * v20));
          v21 = v15 + 16 * v20;
          v23 = (_QWORD *)(v21 + 8);
          v22 = *(_QWORD *)(v21 + 8);
          if (v22)
          {
            WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::deallocateTable(v22, v8);
            v24 = *(WTF::StringImpl **)v21;
            *(_QWORD *)v21 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v8);
              else
                *(_DWORD *)v24 -= 2;
            }
          }
          else
          {
            *(_QWORD *)v21 = 0;
          }
          v25 = *v13;
          *v13 = 0;
          *(_QWORD *)v21 = v25;
          v26 = v4 + 16 * v11;
          *v23 = 0;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          *v23 = v27;
          v28 = *(_QWORD *)(v26 + 8);
          if (v28)
            WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::deallocateTable(v28, v8);
          v14 = *v13;
          *v13 = 0;
          if (!v14)
            goto LABEL_33;
          if (*(_DWORD *)v14 == 2)
            goto LABEL_35;
          *(_DWORD *)v14 -= 2;
        }
        else
        {
          if (*(_QWORD *)(v4 + 16 * v11 + 8))
          {
            WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::deallocateTable(*(_QWORD *)(v4 + 16 * v11 + 8), v8);
            v14 = *v13;
          }
          *v13 = 0;
          if (!v14)
            goto LABEL_33;
          if (*(_DWORD *)v14 == 2)
          {
LABEL_35:
            WTF::StringImpl::destroy(v14, v8);
            goto LABEL_33;
          }
          *(_DWORD *)v14 -= 2;
        }
      }
LABEL_33:
      if (++v11 == v12)
        goto LABEL_39;
    }
  }
  if (v4)
LABEL_39:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

void WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1E33B3B60;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v6 = (uint64_t *)(v3 + 1760);
      v8 = a1;
      v7 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v8);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v6, v7);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)a1 = off_1E33B3B60;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v9 = (uint64_t *)(v3 + 1760);
      v11 = a1;
      v10 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v11);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v9, v10);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
  return bmalloc::api::isoDeallocate(v6, v7);
}

void WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>,(WebCore::CollectionTraversalType)1>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1E33B3BC8;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v6 = (uint64_t *)(v3 + 1760);
      v8 = a1;
      v7 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v8);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v6, v7);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>,(WebCore::CollectionTraversalType)1>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)a1 = off_1E33B3BC8;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v9 = (uint64_t *)(v3 + 1760);
      v11 = a1;
      v10 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v11);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v9, v10);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
  return bmalloc::api::isoDeallocate(v6, v7);
}

void WebCore::CachedHTMLCollection<WebCore::HTMLAllNamedSubCollection,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(WebCore::HTMLCollection *a1, void *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)a1 = off_1E33B3C40;
  if (*((_QWORD *)a1 + 6) || (*((_BYTE *)a1 + 80) & 3) != 0)
    WebCore::Document::unregisterCollection(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 40) + 8), a1);
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection(a1, v3);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLAllNamedSubCollection,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(WebCore::HTMLCollection *a1, void *a2)
{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)a1 = off_1E33B3C40;
  if (*((_QWORD *)a1 + 6) || (*((_BYTE *)a1 + 80) & 3) != 0)
    WebCore::Document::unregisterCollection(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 40) + 8), a1);
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection(a1, v3);
  return bmalloc::api::isoDeallocate(v4, v5);
}

char *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(char *result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v5;
  int v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  char v14;
  uint64_t v15;
  _BYTE *v16;
  size_t v17;
  char *v18;
  size_t v19;
  _BYTE *v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned int v23;
  char *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _BYTE v28[4];

  v5 = 0;
  v6 = *((_DWORD *)result + 2);
  v7 = *a2;
  v8 = *a2;
  do
  {
    ++v5;
    v9 = v8;
    v8 /= 0xAu;
  }
  while (v9 > 9);
  v10 = *(_DWORD *)(a3 + 8);
  if ((v10 | v5) < 0)
    goto LABEL_28;
  v11 = 0;
  v12 = __OFADD__(v5, v10);
  v13 = v5 + v10;
  v14 = v12;
  if (v6 < 0 || (v14 & 1) != 0)
    goto LABEL_25;
  v15 = (v6 + v13);
  if (__OFADD__(v6, v13))
    goto LABEL_28;
  if (!(_DWORD)v15)
  {
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_25;
  }
  if ((v15 & 0x80000000) != 0)
  {
LABEL_28:
    v11 = 0;
    goto LABEL_25;
  }
  v16 = *(_BYTE **)result;
  v17 = *((unsigned int *)result + 2);
  v18 = *(char **)a3;
  v19 = *(unsigned int *)(a3 + 8);
  result = (char *)WTF::tryFastCompactMalloc((WTF *)(v15 + 20));
  v11 = v27;
  if (v27)
  {
    v20 = (_BYTE *)(v27 + 20);
    *(_DWORD *)v27 = 2;
    *(_DWORD *)(v27 + 4) = v15;
    *(_QWORD *)(v27 + 8) = v27 + 20;
    *(_DWORD *)(v27 + 16) = 4;
    if ((_DWORD)v17)
    {
      if ((_DWORD)v17 == 1)
        *v20 = *v16;
      else
        result = (char *)memcpy((void *)(v27 + 20), v16, v17);
    }
    v21 = 0;
    v22 = v7;
    do
    {
      v23 = v22;
      v28[v21-- + 3] = (v22 % 0xAu) | 0x30;
      v22 /= 0xAu;
    }
    while (v23 > 9);
    v24 = &v20[v17];
    if (v21 + 5 <= 4)
      result = (char *)memcpy(v24, &v28[v21 + 4], -v21);
    v25 = 0;
    do
    {
      ++v25;
      v26 = v7;
      v7 /= 0xAu;
    }
    while (v26 > 9);
    if ((_DWORD)v19)
    {
      result = &v24[v25];
      if ((_DWORD)v19 == 1)
        *result = *v18;
      else
        result = (char *)memcpy(result, v18, v19);
    }
  }
LABEL_25:
  *a4 = v11;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLAnchorElement::handleClick(WebCore::Event &)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E33B3CB8;
  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLAnchorElement::handleClick(WebCore::Event &)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E33B3CB8;
  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>(uint64_t a1, void *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;

  if (qword_1ECE83418)
  {
    v2 = *(_DWORD *)(qword_1ECE83418 - 8);
    v3 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    for (i = 1; ; ++i)
    {
      v8 = v6;
      v9 = *(_QWORD *)(qword_1ECE83418 + 16 * v6);
      if (v9 != -1)
      {
        if (!v9)
          return;
        if (v9 == a1)
          break;
      }
      v6 = (v8 + i) & v2;
    }
    if ((_DWORD)v8 != *(_DWORD *)(qword_1ECE83418 - 4))
    {
      WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::customDeleteBucket((_QWORD *)(qword_1ECE83418 + 16 * v8), a2);
      v10 = qword_1ECE83418;
      ++*(_DWORD *)(qword_1ECE83418 - 16);
      v11 = v10 ? *(_DWORD *)(v10 - 12) - 1 : -1;
      *(_DWORD *)(v10 - 12) = v11;
      if (qword_1ECE83418)
      {
        v12 = *(_DWORD *)(qword_1ECE83418 - 4);
        if (6 * *(_DWORD *)(qword_1ECE83418 - 12) < v12 && v12 >= 9)
          WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v12 >> 1);
      }
    }
  }
}

void WTF::WeakHashMap<WebCore::HTMLAnchorElement,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  unsigned int v20;

  v2 = qword_1ECE83418;
  if (qword_1ECE83418)
  {
    v3 = *(_DWORD *)(qword_1ECE83418 - 4);
    if (!v3)
      goto LABEL_19;
    v4 = 0;
    v5 = v3 - 1;
    do
    {
      v6 = (_QWORD *)(v2 + 16 * v5);
      if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(*v6 + 8))
      {
        WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::customDeleteBucket(v6, a2);
        ++v4;
      }
    }
    while ((unint64_t)v5--);
    v2 = qword_1ECE83418;
    if (v4)
    {
      *(_DWORD *)(qword_1ECE83418 - 16) += v4;
      if (qword_1ECE83418)
        v8 = *(_DWORD *)(qword_1ECE83418 - 12);
      else
        v8 = 0;
      *(_DWORD *)(qword_1ECE83418 - 12) = v8 - v4;
      v2 = qword_1ECE83418;
    }
    if (v2)
    {
      v9 = *(_DWORD *)(v2 - 4);
      v10 = *(unsigned int *)(v2 - 12);
      if (v9 >= 9 && 6 * (int)v10 < v9)
      {
        v14 = (v10 - 1) | ((v10 - 1) >> 1) | ((((_DWORD)v10 - 1) | ((v10 - 1) >> 1)) >> 2);
        v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 8);
        v16 = (v15 | HIWORD(v15)) + 1;
        if (v16 > 0x400)
        {
          if (v16 > 2 * v10)
            goto LABEL_30;
        }
        else if (3 * v16 > 4 * v10)
        {
LABEL_28:
          v17 = (double)v10;
          v18 = (double)v16;
          v19 = 0.604166667;
          goto LABEL_31;
        }
        LODWORD(v16) = 2 * v16;
        if (v16 <= 0x400)
          goto LABEL_28;
LABEL_30:
        v17 = (double)v10;
        v18 = (double)v16;
        v19 = 0.416666667;
LABEL_31:
        if (v18 * v19 <= v17)
          LODWORD(v16) = 2 * v16;
        if (v16 <= 8)
          v20 = 8;
        else
          v20 = v16;
        WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v20);
        v2 = qword_1ECE83418;
        dword_1ECE83420 = 0;
        if (!qword_1ECE83418)
        {
          v12 = 0;
          goto LABEL_23;
        }
LABEL_20:
        v12 = *(_DWORD *)(v2 - 12);
        v13 = 0x7FFFFFFF;
        if (v12 >= 0x7FFFFFFF)
          goto LABEL_24;
        goto LABEL_23;
      }
LABEL_19:
      dword_1ECE83420 = 0;
      goto LABEL_20;
    }
  }
  v12 = 0;
  dword_1ECE83420 = 0;
LABEL_23:
  v13 = v12;
LABEL_24:
  dword_1ECE83424 = 2 * v13;
}

uint64_t WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::customDeleteBucket(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1;
  v3 = *a1;
  *v2 = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v11 = *(unsigned int *)(v3 + 28);
      v15 = v2;
      if ((_DWORD)v11)
      {
        v14 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v11));
        v3 = v14;
      }
      v12 = *(WTF **)(v3 + 16);
      if (v12)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v13 = v3;
        WTF::fastFree(v12, a2);
        v3 = v13;
      }
      WTF::fastFree((WTF *)v3, a2);
      v2 = v15;
    }
  }
  result = v2[1];
  *v2 = -1;
  v2[1] = 0;
  if (result)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)result));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)result);
      v9 = *(unsigned int *)(result + 28);
      if ((_DWORD)v9)
      {
        v17 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v9));
        result = v17;
      }
      v10 = *(WTF **)(result + 16);
      if (v10)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v16 = result;
        WTF::fastFree(v10, a2);
        result = v16;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  void *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t i;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;

  v2 = qword_1ECE83418;
  if (qword_1ECE83418)
  {
    v3 = *(_DWORD *)(qword_1ECE83418 - 4);
    v4 = *(_DWORD *)(qword_1ECE83418 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v7 = (_DWORD *)v5;
  v8 = v5 + 16;
  if (a1)
    bzero((void *)(v5 + 16), 16 * a1);
  qword_1ECE83418 = v8;
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE83418 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v10 = (uint64_t *)(v2 + 16 * i);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          if (qword_1ECE83418)
            v12 = *(_DWORD *)(qword_1ECE83418 - 8);
          else
            v12 = 0;
          v13 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          v16 = v12 & ((v15 >> 31) ^ v15);
          v17 = 1;
          do
          {
            v18 = v16;
            v19 = *(_QWORD *)(qword_1ECE83418 + 16 * v16);
            v16 = (v16 + v17++) & v12;
          }
          while (v19);
          v20 = (uint64_t *)(qword_1ECE83418 + 16 * v18);
          std::pair<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::~pair(v20, v6);
          v21 = *v10;
          *v10 = 0;
          *v20 = v21;
          v22 = (uint64_t *)(v2 + 16 * i);
          v23 = v22[1];
          v22[1] = 0;
          v20[1] = v23;
          std::pair<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::~pair(v22, v24);
        }
        else
        {
          std::pair<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::~pair((uint64_t *)(v2 + 16 * i), v6);
        }
      }
    }
  }
  else if (!v2)
  {
    return;
  }
  WTF::fastFree((WTF *)(v2 - 16), v6);
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::HTMLAllNamedSubCollection>(WebCore::HTMLAllNamedSubCollection *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 88);
  if (v3)
  {
    if ((*(_WORD *)(v3 + 28) & 4) != 0)
    {
      do
      {
        v5 = *(_QWORD *)(v3 + 88);
        if (!v5)
          break;
        v3 = *(_QWORD *)(v3 + 88);
      }
      while ((*(_WORD *)(v5 + 28) & 4) != 0);
    }
    while ((*(_WORD *)(v3 + 28) & 8) == 0)
    {
      if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v6 = *(_QWORD *)(v3 + 88);
            if (!v6)
              break;
            v3 = *(_QWORD *)(v3 + 88);
          }
          while ((*(_WORD *)(v6 + 28) & 4) != 0);
        }
        else
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v3 = *(_QWORD *)(v3 + 32);
        if (v3 == a2)
          return a2;
      }
      if (!v3)
        return a2;
    }
    if (!WebCore::HTMLAllNamedSubCollection::elementMatches(this, (WebCore::Element *)v3))
    {
      while ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v10 = *(_QWORD *)(v3 + 88);
            if (!v10)
              break;
            v3 = *(_QWORD *)(v3 + 88);
          }
          while ((*(_WORD *)(v10 + 28) & 4) != 0);
        }
        else
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        }
LABEL_24:
        while ((*(_WORD *)(v3 + 28) & 8) == 0)
        {
          if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
            {
              v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
              do
              {
                v9 = *(_QWORD *)(v3 + 88);
                if (!v9)
                  break;
                v3 = *(_QWORD *)(v3 + 88);
              }
              while ((*(_WORD *)(v9 + 28) & 4) != 0);
            }
            else
            {
              v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
            }
          }
          else
          {
            v3 = *(_QWORD *)(v3 + 32);
            if (v3 == a2)
              return a2;
          }
          if (!v3)
            return a2;
        }
        if (WebCore::HTMLAllNamedSubCollection::elementMatches(this, (WebCore::Element *)v3))
          return a2;
      }
      v3 = *(_QWORD *)(v3 + 32);
      if (v3 != a2 && v3 != 0)
        goto LABEL_24;
    }
  }
  return a2;
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 88);
  if (v3)
  {
    if ((*(_WORD *)(v3 + 28) & 4) != 0)
    {
      do
      {
        v5 = *(_QWORD *)(v3 + 88);
        if (!v5)
          break;
        v3 = *(_QWORD *)(v3 + 88);
      }
      while ((*(_WORD *)(v5 + 28) & 4) != 0);
    }
    while ((*(_WORD *)(v3 + 28) & 8) == 0)
    {
      if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v6 = *(_QWORD *)(v3 + 88);
            if (!v6)
              break;
            v3 = *(_QWORD *)(v3 + 88);
          }
          while ((*(_WORD *)(v6 + 28) & 4) != 0);
        }
        else
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v3 = *(_QWORD *)(v3 + 32);
        if (v3 == a2)
          return a2;
      }
      if (!v3)
        return a2;
    }
    if ((WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>::elementMatches(*(_WORD *)(a1 + 21), v3) & 1) == 0)
    {
      while ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v10 = *(_QWORD *)(v3 + 88);
            if (!v10)
              break;
            v3 = *(_QWORD *)(v3 + 88);
          }
          while ((*(_WORD *)(v10 + 28) & 4) != 0);
        }
        else
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        }
LABEL_24:
        while ((*(_WORD *)(v3 + 28) & 8) == 0)
        {
          if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
            {
              v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
              do
              {
                v9 = *(_QWORD *)(v3 + 88);
                if (!v9)
                  break;
                v3 = *(_QWORD *)(v3 + 88);
              }
              while ((*(_WORD *)(v9 + 28) & 4) != 0);
            }
            else
            {
              v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
            }
          }
          else
          {
            v3 = *(_QWORD *)(v3 + 32);
            if (v3 == a2)
              return a2;
          }
          if (!v3)
            return a2;
        }
        if ((WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>::elementMatches(*(_WORD *)(a1 + 21), v3) & 1) != 0)return a2;
      }
      v3 = *(_QWORD *)(v3 + 32);
      if (v3 != a2 && v3 != 0)
        goto LABEL_24;
    }
  }
  return a2;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>,(WebCore::CollectionTraversalType)1>::collectionBegin(uint64_t a1)
{
  __int16 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v2 = *(_WORD *)(a1 + 21);
  if ((v2 & 0x200) != 0 && (v11 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v11 + 22) & 0x18) != 0))
    v3 = *(uint64_t **)(v11 + 40);
  else
    v3 = (uint64_t *)(a1 + 24);
  v4 = *v3;
  v5 = *(_QWORD *)(*v3 + 80);
  if (v5)
  {
    while ((*(_WORD *)(v5 + 28) & 8) == 0)
    {
      v5 = *(_QWORD *)(v5 + 56);
      if (!v5)
        return v4;
    }
    v7 = WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::elementMatches(v2, v5);
    v8 = v5;
    if ((v7 & 1) == 0)
    {
      while (1)
      {
        v8 = *(_QWORD *)(v8 + 56);
        if (!v8)
          break;
        v9 = v8;
        if ((*(_WORD *)(v8 + 28) & 8) != 0)
        {
          v10 = WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::elementMatches(*(_WORD *)(a1 + 21), v8);
          v8 = v9;
          if (v10)
            break;
        }
      }
    }
  }
  return v4;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>,(WebCore::CollectionTraversalType)1>::collectionTraverseForward(uint64_t result, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v7 = result;
  *a4 = 0;
  while (1)
  {
    v8 = *(_QWORD *)(a2 + 8);
    do
    {
      v8 = *(_QWORD *)(v8 + 56);
      if (!v8)
      {
        *(_QWORD *)(a2 + 8) = 0;
        return result;
      }
    }
    while ((*(_WORD *)(v8 + 28) & 8) == 0);
    *(_QWORD *)(a2 + 8) = v8;
    result = WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::elementMatches(*(_WORD *)(v7 + 21), v8);
    if ((_DWORD)result)
    {
      v9 = *a4 + 1;
      *a4 = v9;
      if (v9 >= a3)
        break;
    }
  }
  return result;
}

uint64_t WebCore::CollectionIndexCache<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>,WebCore::ElementChildIterator<WebCore::Element>>::traverseForwardTo(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = a3;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (*(_DWORD *)(a1 + 20) - a3 < a3 - *(_DWORD *)(a1 + 16))
    {
      v9 = *(_WORD *)(a2 + 21);
      if ((v9 & 0x200) != 0 && (v23 = *(_QWORD *)(a2 + 24), (*(_BYTE *)(v23 + 22) & 0x18) != 0))
        v10 = *(_QWORD *)(v23 + 40);
      else
        v10 = a2 + 24;
      v11 = *(_QWORD *)v10;
      v12 = *(_QWORD *)(*(_QWORD *)v10 + 80);
      if (v12)
      {
        v13 = 0;
        while ((*(_WORD *)(v12 + 28) & 8) == 0)
        {
          v12 = *(_QWORD *)(v12 + 56);
          if (!v12)
            goto LABEL_27;
        }
        v13 = v12;
        if ((WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::elementMatches(v9, v12) & 1) == 0)
        {
          do
            v13 = *(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFLL;
          while (v13
               && ((*(_WORD *)(v13 + 28) & 8) == 0
                || !WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::elementMatches(*(_WORD *)(a2 + 21), v13)));
        }
      }
      else
      {
        v13 = 0;
      }
LABEL_27:
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v13;
      v19 = *(_DWORD *)(a1 + 20);
      v20 = v19 + ~v3;
      if (v19 - 1 > v3 && v20 != 0)
      {
LABEL_31:
        v13 = *(_QWORD *)(a1 + 8);
        while (1)
        {
          v13 = *(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFLL;
          if (!v13)
            break;
          if ((*(_WORD *)(v13 + 28) & 8) != 0)
          {
            *(_QWORD *)(a1 + 8) = v13;
            if ((WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::elementMatches(*(_WORD *)(a2 + 21), v13) & 1) != 0&& !--v20)
            {
              v13 = *(_QWORD *)(a1 + 8);
              goto LABEL_38;
            }
            goto LABEL_31;
          }
        }
        *(_QWORD *)(a1 + 8) = 0;
      }
LABEL_38:
      *(_DWORD *)(a1 + 16) = v3;
      return v13;
    }
    v6 = (uint64_t *)(a1 + 8);
  }
  else
  {
    v6 = (uint64_t *)(a1 + 8);
    if ((*(_BYTE *)(a1 + 40) & 2) == 0 && !*(_QWORD *)(a1 + 8))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 40) + 8);
      v8 = v7 + 4 * (((unint64_t)*(unsigned __int16 *)(a2 + 21) >> 5) & 0xF);
      ++*(_DWORD *)(v8 + 1768);
      if ((*(_BYTE *)(a2 + 22) & 2) != 0)
      {
        v25 = a2;
        WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v7 + 1760), &v25, (uint64_t)&v24);
      }
    }
  }
  v14 = *(_DWORD *)(a1 + 16);
  v15 = v3 - v14;
  if (v3 != v14)
  {
    v16 = 0;
LABEL_14:
    v17 = *v6;
    while (1)
    {
      v17 = *(_QWORD *)(v17 + 56);
      if (!v17)
        break;
      if ((*(_WORD *)(v17 + 28) & 8) != 0)
      {
        *v6 = v17;
        if (WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::elementMatches(*(_WORD *)(a2 + 21), v17))
        {
          if (++v16 == v15)
          {
            v3 = *(_DWORD *)(a1 + 16);
            goto LABEL_20;
          }
        }
        goto LABEL_14;
      }
    }
    *(_QWORD *)(a1 + 8) = 0;
    v18 = *(_DWORD *)(a1 + 16) + v16;
    *(_DWORD *)(a1 + 16) = v18;
    goto LABEL_23;
  }
LABEL_20:
  v13 = *(_QWORD *)(a1 + 8);
  v18 = v15 + v3;
  *(_DWORD *)(a1 + 16) = v15 + v3;
  if (!v13)
  {
LABEL_23:
    v13 = 0;
    *(_DWORD *)(a1 + 20) = v18 + 1;
    *(_BYTE *)(a1 + 40) |= 1u;
  }
  return v13;
}

uint64_t WebCore::CollectionIndexCache<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>,WebCore::ElementChildIterator<WebCore::Element>>::traverseBackwardTo(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  __int16 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v6 = *(_DWORD *)(a1 + 16) - a3;
  if (v6 <= a3)
  {
    if (v6)
    {
      do
      {
        v12 = *(_QWORD *)(a1 + 8);
        do
        {
          v12 = *(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFLL;
          if (!v12)
          {
            *(_QWORD *)(a1 + 8) = 0;
            goto LABEL_14;
          }
        }
        while ((*(_WORD *)(v12 + 28) & 8) == 0);
        *(_QWORD *)(a1 + 8) = v12;
      }
      while ((WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::elementMatches(*(_WORD *)(a2 + 21), v12) & 1) == 0|| --v6);
    }
LABEL_14:
    *(_DWORD *)(a1 + 16) = a3;
  }
  else
  {
    v7 = *(_WORD *)(a2 + 21);
    if ((v7 & 0x200) != 0 && (v19 = *(_QWORD *)(a2 + 24), (*(_BYTE *)(v19 + 22) & 0x18) != 0))
      v8 = *(uint64_t **)(v19 + 40);
    else
      v8 = (uint64_t *)(a2 + 24);
    v9 = *v8;
    v10 = *(_QWORD *)(*v8 + 80);
    if (v10)
    {
      while ((*(_WORD *)(v10 + 28) & 8) == 0)
      {
        v11 = 0;
        v10 = *(_QWORD *)(v10 + 56);
        if (!v10)
          goto LABEL_17;
      }
      v16 = WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::elementMatches(v7, v10);
      v11 = v10;
      if ((v16 & 1) == 0)
      {
        while (1)
        {
          v11 = *(_QWORD *)(v11 + 56);
          if (!v11)
            break;
          v17 = v11;
          if ((*(_WORD *)(v11 + 28) & 8) != 0)
          {
            v18 = WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::elementMatches(*(_WORD *)(a2 + 21), v11);
            v11 = v17;
            if (v18)
              break;
          }
        }
      }
    }
    else
    {
      v11 = 0;
    }
LABEL_17:
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v11;
    *(_DWORD *)(a1 + 16) = 0;
    if (a3)
    {
      *(_DWORD *)(a1 + 16) = 0;
      while (1)
      {
        v13 = *(_QWORD *)(a1 + 8);
        do
        {
          v13 = *(_QWORD *)(v13 + 56);
          if (!v13)
          {
            *(_QWORD *)(a1 + 8) = 0;
            return *(_QWORD *)(a1 + 8);
          }
        }
        while ((*(_WORD *)(v13 + 28) & 8) == 0);
        *(_QWORD *)(a1 + 8) = v13;
        if (WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::elementMatches(*(_WORD *)(a2 + 21), v13))
        {
          v14 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 16) = v14;
          if (v14 >= a3)
            break;
        }
      }
    }
  }
  return *(_QWORD *)(a1 + 8);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>,(WebCore::CollectionTraversalType)1>::collectionLast(uint64_t a1)
{
  __int16 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_WORD *)(a1 + 21);
  if ((v2 & 0x200) != 0 && (v8 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v8 + 22) & 0x18) != 0))
    v3 = *(uint64_t **)(v8 + 40);
  else
    v3 = (uint64_t *)(a1 + 24);
  v4 = *v3;
  v5 = *(_QWORD *)(*v3 + 80);
  if (v5)
  {
    while ((*(_WORD *)(v5 + 28) & 8) == 0)
    {
      v5 = *(_QWORD *)(v5 + 56);
      if (!v5)
        return v4;
    }
    v7 = v5;
    if ((WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::elementMatches(v2, v5) & 1) == 0)
    {
      do
        v7 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL;
      while (v7
           && ((*(_WORD *)(v7 + 28) & 8) == 0
            || !WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::elementMatches(*(_WORD *)(a1 + 21), v7)));
    }
  }
  return v4;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>,(WebCore::CollectionTraversalType)1>::collectionTraverseBackward(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v6 = *(_QWORD *)(a2 + 8);
      do
      {
        v6 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFLL;
        if (!v6)
        {
          *(_QWORD *)(a2 + 8) = 0;
          return result;
        }
      }
      while ((*(_WORD *)(v6 + 28) & 8) == 0);
      *(_QWORD *)(a2 + 8) = v6;
      result = WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::elementMatches(*(_WORD *)(v5 + 21), v6);
    }
    while ((result & 1) == 0 || --v3);
  }
  return result;
}

double WebCore::HTMLAreaElement::create@<D0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _DWORD *v7;
  double result;

  v6 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v6 + 24) = 0x101C00000002;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = a2 + 96;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(v6 + 96) = v7;
  *(_QWORD *)(v6 + 104) = 0;
  *(_WORD *)(v6 + 120) = 0;
  *(_BYTE *)(v6 + 122) = 0;
  *(_DWORD *)(v6 + 124) = -1;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)v6 = off_1E33B5608;
  *(_QWORD *)(v6 + 112) = &unk_1E33B5B08;
  *(_QWORD *)(v6 + 144) = 0;
  *(_QWORD *)(v6 + 152) = 0;
  *(_QWORD *)&result = 0x3F0000003FLL;
  *(_QWORD *)(v6 + 160) = 0x3F0000003FLL;
  *(_BYTE *)(v6 + 168) = 2;
  *a3 = v6;
  return result;
}

void WebCore::HTMLAreaElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  int v6;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *v10;
  unsigned __int8 *v11;
  unint64_t v12;
  void *v13;
  WTF *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _QWORD v28[2];

  v6 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v6 != 291)
  {
    if (v6 == 413)
    {
      v10 = *a4;
      if (*a4)
      {
        v11 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
        v12 = *((unsigned int *)v10 + 1) | ((unint64_t)((*((_DWORD *)v10 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v11 = 0;
        v12 = 0x100000000;
      }
      WebCore::parseHTMLListOfOfFloatingPointNumberValues(v11, v12, (uint64_t)v28);
      v14 = *(WTF **)(a1 + 144);
      if (v14)
      {
        *(_QWORD *)(a1 + 144) = 0;
        *(_DWORD *)(a1 + 152) = 0;
        WTF::fastFree(v14, v13);
      }
      *(_QWORD *)(a1 + 144) = v28[0];
      *(_QWORD *)(a1 + 152) = v28[1];
      goto LABEL_12;
    }
    if (v6 != 832)
    {
      WebCore::HTMLAnchorElement::attributeChanged(a1, a2, a3, a4, a5, a6);
      return;
    }
    v8 = *a4;
    if (!*a4)
      goto LABEL_5;
    v15 = *((_DWORD *)v8 + 1);
    if (v15 != 7)
    {
      if (v15 == 6)
      {
        v22 = *((_QWORD *)v8 + 1);
        if ((*((_BYTE *)v8 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v22 & 0xDF) != 0x43
            || (*(_BYTE *)(v22 + 1) & 0xDF) != 0x49
            || (*(_BYTE *)(v22 + 2) & 0xDF) != 0x52
            || (*(_BYTE *)(v22 + 3) & 0xDF) != 0x43
            || (*(_BYTE *)(v22 + 4) & 0xDF) != 0x4C)
          {
            goto LABEL_5;
          }
          v23 = *(unsigned __int8 *)(v22 + 5);
        }
        else
        {
          if ((*(_WORD *)v22 & 0xFFDF) != 0x43
            || (*(_WORD *)(v22 + 2) & 0xFFDF) != 0x49
            || (*(_WORD *)(v22 + 4) & 0xFFDF) != 0x52
            || (*(_WORD *)(v22 + 6) & 0xFFDF) != 0x43
            || (*(_WORD *)(v22 + 8) & 0xFFDF) != 0x4C)
          {
            goto LABEL_5;
          }
          v23 = *(unsigned __int16 *)(v22 + 10);
        }
        if ((v23 & 0xFFFFFFDF) == 0x45)
          goto LABEL_44;
      }
      else if (v15 == 4)
      {
        v16 = *((_QWORD *)v8 + 1);
        if ((*((_BYTE *)v8 + 16) & 4) != 0)
        {
          v17 = *(_BYTE *)v16 & 0xDF;
          if (v17 == 67)
          {
            if ((*(_BYTE *)(v16 + 1) & 0xDF) != 0x49 || (*(_BYTE *)(v16 + 2) & 0xDF) != 0x52)
              goto LABEL_5;
            v18 = *(unsigned __int8 *)(v16 + 3);
LABEL_23:
            if ((v18 & 0xFFFFFFDF) != 0x43)
              goto LABEL_5;
LABEL_44:
            v9 = 3;
            goto LABEL_6;
          }
          if (v17 != 80 || (*(_BYTE *)(v16 + 1) & 0xDF) != 0x4F || (*(_BYTE *)(v16 + 2) & 0xDF) != 0x4C)
            goto LABEL_5;
          v25 = *(unsigned __int8 *)(v16 + 3);
        }
        else
        {
          v27 = *(_WORD *)v16 & 0xFFDF;
          if (v27 == 67)
          {
            if ((*(_WORD *)(v16 + 2) & 0xFFDF) != 0x49 || (*(_WORD *)(v16 + 4) & 0xFFDF) != 0x52)
              goto LABEL_5;
            v18 = *(unsigned __int16 *)(v16 + 6);
            goto LABEL_23;
          }
          if (v27 != 80 || (*(_WORD *)(v16 + 2) & 0xFFDF) != 0x4F || (*(_WORD *)(v16 + 4) & 0xFFDF) != 0x4C)
            goto LABEL_5;
          v25 = *(unsigned __int16 *)(v16 + 6);
        }
        if ((v25 & 0xFFFFFFDF) == 0x59)
        {
LABEL_59:
          v9 = 1;
          goto LABEL_6;
        }
      }
LABEL_5:
      v9 = 2;
LABEL_6:
      *(_BYTE *)(a1 + 168) = v9;
LABEL_12:
      *(_QWORD *)(a1 + 160) = 0xFFFFFFC0FFFFFFC0;
      return;
    }
    v19 = *((_QWORD *)v8 + 1);
    if ((*((_BYTE *)v8 + 16) & 4) != 0)
    {
      v20 = *(_BYTE *)v19 & 0xDF;
      if (v20 == 68)
      {
        if ((*(_BYTE *)(v19 + 1) & 0xDF) != 0x45
          || (*(_BYTE *)(v19 + 2) & 0xDF) != 0x46
          || (*(_BYTE *)(v19 + 3) & 0xDF) != 0x41
          || (*(_BYTE *)(v19 + 4) & 0xDF) != 0x55
          || (*(_BYTE *)(v19 + 5) & 0xDF) != 0x4C)
        {
          goto LABEL_5;
        }
        v21 = *(unsigned __int8 *)(v19 + 6);
        goto LABEL_34;
      }
      if (v20 != 80
        || (*(_BYTE *)(v19 + 1) & 0xDF) != 0x4F
        || (*(_BYTE *)(v19 + 2) & 0xDF) != 0x4C
        || (*(_BYTE *)(v19 + 3) & 0xDF) != 0x59
        || (*(_BYTE *)(v19 + 4) & 0xDF) != 0x47
        || (*(_BYTE *)(v19 + 5) & 0xDF) != 0x4F)
      {
        goto LABEL_5;
      }
      v24 = *(unsigned __int8 *)(v19 + 6);
    }
    else
    {
      v26 = *(_WORD *)v19 & 0xFFDF;
      if (v26 == 68)
      {
        if ((*(_WORD *)(v19 + 2) & 0xFFDF) != 0x45
          || (*(_WORD *)(v19 + 4) & 0xFFDF) != 0x46
          || (*(_WORD *)(v19 + 6) & 0xFFDF) != 0x41
          || (*(_WORD *)(v19 + 8) & 0xFFDF) != 0x55
          || (*(_WORD *)(v19 + 10) & 0xFFDF) != 0x4C)
        {
          goto LABEL_5;
        }
        v21 = *(unsigned __int16 *)(v19 + 12);
LABEL_34:
        if ((v21 & 0xFFFFFFDF) == 0x54)
        {
          v9 = 0;
          goto LABEL_6;
        }
        goto LABEL_5;
      }
      if (v26 != 80
        || (*(_WORD *)(v19 + 2) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v19 + 4) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v19 + 6) & 0xFFDF) != 0x59
        || (*(_WORD *)(v19 + 8) & 0xFFDF) != 0x47
        || (*(_WORD *)(v19 + 10) & 0xFFDF) != 0x4F)
      {
        goto LABEL_5;
      }
      v24 = *(unsigned __int16 *)(v19 + 12);
    }
    if ((v24 & 0xFFFFFFDF) != 0x4E)
      goto LABEL_5;
    goto LABEL_59;
  }
}

BOOL WebCore::HTMLAreaElement::mapMouseEvent(int32x2_t *a1, unint64_t a2, int32x2_t *a3, WebCore::HitTestResult *a4)
{
  int v5;
  unint64_t v7;
  uint64_t v10;
  void *v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  int32x2_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 result;
  void *v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  char v24;
  float v25[2];
  _BYTE v26[56];
  int v27;
  uint64_t v28;

  v5 = a2;
  v28 = *MEMORY[0x1E0C80C00];
  v7 = HIDWORD(a2);
  if (a1[20].i32[0] != a3->i32[0] || a1[20].i32[1] != a3->i32[1])
  {
    WebCore::HTMLAreaElement::getRegion((WebCore::HTMLAreaElement *)a1, a3, (uint64_t)v25);
    v10 = WTF::fastMalloc((WTF *)0x48);
    *(_BYTE *)(v10 + 8) = 0;
    v11 = (void *)(v10 + 8);
    *(_DWORD *)(v10 + 64) = -1;
    v12 = v27;
    if (v27 != -1)
    {
      ((void (*)(char *, void *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[v27])(&v24, v11, v26);
      *(_DWORD *)(v10 + 64) = v12;
    }
    v13 = (unsigned int *)a1[17];
    a1[17] = (int32x2_t)v10;
    if (v13)
    {
      v14 = v13[16];
      if ((_DWORD)v14 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v14])(&v24, v13 + 2);
      v13[16] = -1;
      WTF::fastFree((WTF *)v13, v11);
    }
    if (v27 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v27])(&v24, v26);
    a1[20] = *a3;
  }
  v15 = a1[17];
  v25[0] = (float)v5 * 0.015625;
  v25[1] = (float)(int)v7 * 0.015625;
  v16 = *(_DWORD *)(*(_QWORD *)&v15 + 64);
  if (v16 == 2)
  {
    v17 = *(_QWORD *)(*(_QWORD *)&v15 + 8);
    if (v17 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 200))(v17))
      return 0;
  }
  else if (!v16)
  {
    return 0;
  }
  v18 = WebCore::Path::ensurePlatformPathImpl(*(WebCore::Path **)&v15);
  result = WebCore::PathCG::contains(v18, v25, 1);
  if (result)
  {
    WebCore::HitTestResult::setInnerNode(a4, (WebCore::Node *)a1);
    a1[3].i32[0] += 2;
    v21 = *((_QWORD *)a4 + 13);
    *((_QWORD *)a4 + 13) = a1;
    if (v21)
    {
      if (*(_DWORD *)(v21 + 24) == 2)
      {
        v22 = *(_WORD *)(v21 + 30);
        if ((v22 & 0x400) == 0)
        {
          v23 = *(_WORD *)(v21 + 28);
          if ((v23 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v21, v20);
          }
          else
          {
            if ((v23 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v21 + 160) + 16))(*(_QWORD *)(v21 + 160));
              v22 = *(_WORD *)(v21 + 30);
            }
            *(_WORD *)(v21 + 30) = v22 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
          }
        }
      }
      else
      {
        *(_DWORD *)(v21 + 24) -= 2;
      }
    }
    return 1;
  }
  return result;
}

void WebCore::HTMLAreaElement::getRegion(WebCore::HTMLAreaElement *this@<X0>, int32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  float32x2_t v13;
  float64x2_t *v14;
  float v15;
  float v16;
  float64x2_t *v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  _BYTE v26[32];
  __int128 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned int *)this + 39);
  v5 = *((unsigned __int8 *)this + 168);
  if (!(_DWORD)v4)
  {
    if (*((_BYTE *)this + 168))
    {
      *(_QWORD *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
    else
    {
      *(_DWORD *)(a3 + 64) = 0;
LABEL_14:
      *(_QWORD *)v26 = 0;
      v13 = vmul_f32(vcvt_f32_s32(*a2), (float32x2_t)vdup_n_s32(0x3C800000u));
LABEL_15:
      *(float32x2_t *)&v26[8] = v13;
      WebCore::Path::addRect((WebCore::Path *)a3, (const WebCore::FloatRect *)v26);
    }
    return;
  }
  *(_DWORD *)(a3 + 64) = 0;
  switch(v5)
  {
    case 0:
      goto LABEL_14;
    case 1:
      if (v4 < 6)
        return;
      *(float32x2_t *)v26 = vcvt_f32_f64(*(float64x2_t *)*((_QWORD *)this + 18));
      WebCore::Path::moveTo((WebCore::Path *)a3, (const WebCore::FloatPoint *)v26);
      v7 = (8 * v4) & 0x7FFFFFFF0;
      v8 = 16;
      v9 = 1;
      do
      {
        v10 = *((unsigned int *)this + 39);
        if (v9 + 1 >= v10)
        {
          __break(0xC471u);
          JUMPOUT(0x195BB4A70);
        }
        v9 += 2;
        if (v9 >= v10)
        {
          __break(0xC471u);
          JUMPOUT(0x195BB4A78);
        }
        v11 = v8 + 16;
        *(float32x2_t *)v26 = vcvt_f32_f64(*(float64x2_t *)(*((_QWORD *)this + 18) + v8));
        WebCore::Path::addLineTo(a3, (const WebCore::FloatPoint *)v26);
        v8 = v11;
      }
      while (v7 != v11);
      v12 = *(_DWORD *)(a3 + 64);
      if (v12 == 2)
      {
        v20 = *(_QWORD *)(a3 + 8);
        if (!v20)
          goto LABEL_36;
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 200))(v20) & 1) != 0)
          return;
        v12 = *(_DWORD *)(a3 + 64);
      }
      else if (!v12)
      {
        return;
      }
      if (v12 == 2)
      {
        v22 = *(_QWORD *)(a3 + 8);
        if (v22)
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 208))(v22) & 1) != 0)
            return;
          if (*(_DWORD *)(a3 + 64) == 1)
          {
            v21 = *(_DWORD *)(a3 + 60);
            goto LABEL_34;
          }
        }
LABEL_36:
        v25 = WebCore::Path::ensureImpl((WebCore::Path *)a3);
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 120))(v25);
        return;
      }
      if (v12 != 1)
        goto LABEL_36;
      v21 = *(_DWORD *)(a3 + 60);
      if (v21 != 6 && v21 != 15)
      {
LABEL_34:
        if (v21 == 5)
        {
          *(_OWORD *)v26 = *(_OWORD *)(a3 + 8);
          *(_QWORD *)&v26[13] = *(_QWORD *)(a3 + 21);
          v23 = *(_OWORD *)&v26[16];
          *(_OWORD *)(a3 + 40) = v27;
          v24 = v28;
          *(_OWORD *)(a3 + 8) = *(_OWORD *)v26;
          *(_OWORD *)(a3 + 24) = v23;
          *(_DWORD *)(a3 + 56) = v24;
          *(_DWORD *)(a3 + 60) = 6;
          return;
        }
        goto LABEL_36;
      }
      return;
    case 2:
      if (v4 < 4)
        return;
      v14 = (float64x2_t *)*((_QWORD *)this + 18);
      v15 = v14->f64[0];
      v16 = v14->f64[1];
      v13 = vcvt_f32_f64(vsubq_f64(v14[1], *v14));
      *(float *)v26 = v15;
      *(float *)&v26[4] = v16;
      goto LABEL_15;
    case 3:
      if (v4 >= 3)
      {
        v17 = (float64x2_t *)*((_QWORD *)this + 18);
        v18 = *(uint64_t *)&v17[1].f64[0];
        if (*(double *)&v18 > 0.0)
        {
          *(float32x2_t *)v26 = vcvt_f32_f64(vsubq_f64(*v17, (float64x2_t)vdupq_lane_s64(v18, 0)));
          v19 = *(double *)&v18 + *(double *)&v18;
          *(float *)&v26[8] = v19;
          *(float *)&v26[12] = v19;
          WebCore::Path::addEllipseInRect((WebCore::Path *)a3, (__n128 *)v26);
        }
      }
      return;
    default:
      return;
  }
}

void WebCore::HTMLAreaElement::computePath(WebCore::HTMLAreaElement *this@<X0>, WebCore::RenderObject *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::RenderObject *v4;
  void *v6;
  float32x2_t v7;
  WTF *v8;
  WTF *v9;
  int32x2_t v10;
  float v11;
  int32x2_t v12;
  _BYTE v13[48];
  char v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  int v20;
  int v21;

  if (a2)
  {
    v4 = a2;
    v14 = 0;
    v16 = 0;
    v17 = 0;
    v15 = 0;
    v18 = 0;
    memset(v13, 0, 41);
    v19 = 1;
    v20 = 0;
    v21 = 0;
    (*(void (**)(WebCore::RenderObject *, _QWORD, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)a2 + 576))(a2, 0, v13, 4, 0);
    WebCore::TransformState::flatten((WebCore::TransformState *)v13, 0);
    v7 = *(float32x2_t *)v13;
    v8 = v16;
    v16 = 0;
    if (v8)
      WTF::fastFree(v8, v6);
    v9 = v15;
    v15 = 0;
    if (v9)
      WTF::fastFree(v9, v6);
    v12 = *(int32x2_t *)((char *)this + 160);
    if (!*((_BYTE *)this + 168))
    {
      (*(void (**)(WebCore::RenderObject *, _QWORD, _QWORD))(*(_QWORD *)v4 + 456))(v4, 0, 0);
      v12 = v10;
    }
    WebCore::HTMLAreaElement::getRegion(this, &v12, a3);
    if ((*((_BYTE *)v4 + 45) & 2) != 0)
      v4 = *(WebCore::RenderObject **)(*((_QWORD *)v4 + 4) + 8);
    v11 = *(float *)(*((_QWORD *)v4 + 13) + 184);
    if (v11 != 1.0)
    {
      *(_OWORD *)&v13[32] = xmmword_1969F1088;
      *(double *)v13 = v11;
      *(double *)&v13[8] = v11 * 0.0;
      *(double *)&v13[16] = *(double *)&v13[8];
      *(double *)&v13[24] = v11;
      WebCore::Path::transform((WebCore::Path *)a3, (float64x2_t *)v13);
    }
    *(_OWORD *)v13 = 0x3FF0000000000000uLL;
    *(_QWORD *)&v13[16] = 0;
    *(_QWORD *)&v13[24] = 0x3FF0000000000000;
    *(float64x2_t *)&v13[32] = vcvtq_f64_f32(v7);
    WebCore::Path::transform((WebCore::Path *)a3, (float64x2_t *)v13);
  }
  else
  {
    *(_QWORD *)(a3 + 64) = 0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

void WebCore::HTMLAreaElement::computePathForFocusRing(WebCore::HTMLAreaElement *this@<X0>, int32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((_BYTE *)this + 168))
    a2 = (int32x2_t *)((char *)this + 160);
  WebCore::HTMLAreaElement::getRegion(this, a2, a3);
}

uint64_t WebCore::HTMLAreaElement::computeRect(WebCore::HTMLAreaElement *this, WebCore::RenderObject *a2)
{
  float v2;
  float v3;
  float v4;
  unsigned int v5;
  uint64_t v6;
  float v7;
  unsigned int v8;
  uint64_t v9;
  char v11;
  _BYTE v12[8];
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  WebCore::HTMLAreaElement::computePath(this, a2, (uint64_t)v12);
  WebCore::Path::fastBoundingRect((WebCore::Path *)v12);
  v4 = floorf(v3 * 64.0);
  if (v4 > -2147500000.0)
    v5 = (int)v4;
  else
    v5 = 0x80000000;
  if (v4 < 2147500000.0)
    v6 = v5;
  else
    v6 = 0x7FFFFFFFLL;
  v7 = floorf(v2 * 64.0);
  if (v7 > -2147500000.0)
    v8 = (int)v7;
  else
    v8 = 0x80000000;
  if (v7 < 2147500000.0)
    v9 = v8;
  else
    v9 = 0x7FFFFFFFLL;
  if (v14 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v14])(&v11, &v13);
  return v6 | (v9 << 32);
}

unsigned int *WebCore::HTMLAreaElement::imageElement@<X0>(unsigned int *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  const WTF::AtomString *v3;
  uint64_t v4;
  int v5;
  const WebCore::TreeScope *v6;
  int v7;
  __int16 v8;
  __int16 v9;

  v2 = *((_QWORD *)this + 4);
  if (!v2
    || (*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::mapTag + 24))
  {
    *a2 = 0;
    return this;
  }
  v3 = (const WTF::AtomString *)(v2 + 112);
  v4 = *(_QWORD *)(v2 + 112);
  v5 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v5 + 2;
  if (!v4
    || !*(_DWORD *)(v4 + 4)
    || (v6 = *(const WebCore::TreeScope **)(v2 + 40), (this = (unsigned int *)*((_QWORD *)v6 + 6)) == 0))
  {
    *a2 = 0;
    if (!v5)
      goto LABEL_11;
LABEL_6:
    *(_DWORD *)(v2 + 24) = v5;
    return this;
  }
  this = WebCore::TreeScopeOrderedMap::getElementByUsemap(this, v3, v6, a2);
  v7 = *(_DWORD *)(v2 + 24);
  v5 = v7 - 2;
  if (v7 != 2)
    goto LABEL_6;
LABEL_11:
  v8 = *(_WORD *)(v2 + 30);
  if ((v8 & 0x400) == 0)
  {
    v9 = *(_WORD *)(v2 + 28);
    if ((v9 & 0xF000) == 0x9000)
    {
      return WebCore::Document::removedLastRef((WebCore::Document *)v2, v3);
    }
    else
    {
      if ((v9 & 0x20) != 0)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
        v8 = *(_WORD *)(v2 + 30);
      }
      *(_WORD *)(v2 + 30) = v8 | 0x400;
      return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
  }
  return this;
}

BOOL WebCore::HTMLAreaElement::isFocusable(WebCore::HTMLAreaElement *this)
{
  uint64_t v1;
  const WTF::AtomString *v3;
  uint64_t v4;
  int v5;
  WebCore::Element *v6;
  void *v7;
  _BOOL8 v8;
  const WebCore::TreeScope *v9;
  unsigned int *v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  __int16 v16;
  __int16 v17;
  WebCore::Element *v18;

  v1 = *((_QWORD *)this + 4);
  if (!v1
    || (*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::mapTag + 24))
  {
    return 0;
  }
  v3 = (const WTF::AtomString *)(v1 + 112);
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v5 + 2;
  if (!v4
    || !*(_DWORD *)(v4 + 4)
    || (v9 = *(const WebCore::TreeScope **)(v1 + 40), (v10 = (unsigned int *)*((_QWORD *)v9 + 6)) == 0))
  {
    v18 = 0;
    if (!v5)
      goto LABEL_15;
LABEL_6:
    *(_DWORD *)(v1 + 24) = v5;
    goto LABEL_7;
  }
  WebCore::TreeScopeOrderedMap::getElementByUsemap(v10, v3, v9, (uint64_t *)&v18);
  v5 = *(_DWORD *)(v1 + 24) - 2;
  if (*(_DWORD *)(v1 + 24) != 2)
    goto LABEL_6;
LABEL_15:
  v11 = *(_WORD *)(v1 + 30);
  if ((v11 & 0x400) == 0)
  {
    v12 = *(_WORD *)(v1 + 28);
    if ((v12 & 0xF000) == 0x9000)
    {
      WebCore::Document::removedLastRef((WebCore::Document *)v1, v3);
    }
    else
    {
      if ((v12 & 0x20) != 0)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 160) + 16))(*(_QWORD *)(v1 + 160));
        v11 = *(_WORD *)(v1 + 30);
      }
      *(_WORD *)(v1 + 30) = v11 | 0x400;
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
    }
  }
LABEL_7:
  v6 = v18;
  if (!v18)
    return 0;
  if (WebCore::Element::hasFocusableStyle(v18) && (*((_WORD *)this + 15) & 1) != 0)
  {
    v13 = WebCore::Element::tabIndexSetExplicitly(this);
    v8 = (v13 & 0xFF00000000) == 0 || (int)v13 >= 0;
  }
  else
  {
    v8 = 0;
  }
  if (*((_DWORD *)v6 + 6) == 2)
  {
    v16 = *((_WORD *)v6 + 15);
    if ((v16 & 0x400) == 0)
    {
      v17 = *((_WORD *)v6 + 14);
      if ((v17 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef(v6, v7);
      }
      else
      {
        if ((v17 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)v6 + 20) + 16))(*((_QWORD *)v6 + 20));
          v16 = *((_WORD *)v6 + 15);
        }
        *((_WORD *)v6 + 15) = v16 | 0x400;
        (*(void (**)(WebCore::Element *))(*(_QWORD *)v6 + 72))(v6);
      }
    }
  }
  else
  {
    *((_DWORD *)v6 + 6) -= 2;
  }
  return v8;
}

uint64_t WebCore::HTMLAreaElement::supportsFocus(WebCore::HTMLAreaElement *this)
{
  return *((_WORD *)this + 15) & 1;
}

uint64_t WebCore::HTMLAreaElement::setFocus(uint64_t this, _BOOL8 a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  const WTF::AtomString *v7;
  uint64_t v8;
  int v9;
  WebCore::Document *v10;
  uint64_t v11;
  int v12;
  const WebCore::TreeScope *v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  WebCore::Document *v18;
  _BYTE v19[20];
  __int128 v20;
  char v21;

  v5 = this;
  if ((*(_BYTE *)(this + 54) & 2) != 0)
  {
    this = WebCore::Element::isUserActionElementFocused((WebCore::Element *)this);
    if ((_DWORD)this == a2)
      return this;
  }
  else if (!a2)
  {
    return this;
  }
  this = WebCore::Element::setFocus(v5, a2, a3);
  v6 = *(_QWORD *)(v5 + 32);
  if (v6
    && (*(_WORD *)(v6 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::mapTag + 24))
  {
    v7 = (const WTF::AtomString *)(v6 + 112);
    v8 = *(_QWORD *)(v6 + 112);
    v9 = *(_DWORD *)(v6 + 24);
    *(_DWORD *)(v6 + 24) = v9 + 2;
    if (v8
      && *(_DWORD *)(v8 + 4)
      && (v13 = *(const WebCore::TreeScope **)(v6 + 40), (this = *((_QWORD *)v13 + 6)) != 0))
    {
      this = (uint64_t)WebCore::TreeScopeOrderedMap::getElementByUsemap((unsigned int *)this, v7, v13, (uint64_t *)&v18);
      v9 = *(_DWORD *)(v6 + 24) - 2;
      if (*(_DWORD *)(v6 + 24) == 2)
      {
LABEL_23:
        v14 = *(_WORD *)(v6 + 30);
        if ((v14 & 0x400) == 0)
        {
          v15 = *(_WORD *)(v6 + 28);
          if ((v15 & 0xF000) == 0x9000)
          {
            this = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v6, v7);
          }
          else
          {
            if ((v15 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
              v14 = *(_WORD *)(v6 + 30);
            }
            *(_WORD *)(v6 + 30) = v14 | 0x400;
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
          }
        }
LABEL_9:
        v10 = v18;
        if (!v18)
          return this;
        v11 = *((_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFLL;
        if (!v11)
          goto LABEL_17;
        if ((*(_BYTE *)((*((_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
        {
          if ((((*(_BYTE *)((*((_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((*((_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFLL) + 0x35)) != 1)
            goto LABEL_17;
          v12 = *(_DWORD *)((*((_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
          *(_DWORD *)((*((_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v12;
          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 8) + 40)
                                                                                                 + 8)
                                                                                     + 1944)
                                                                         + 24)
                                                             + 8)
                                                 + 40)
                                     + 8)
                         + 3382))
          {
            LOBYTE(v20) = 0;
            v21 = 0;
            v19[0] = 0;
            v19[16] = 0;
            this = WebCore::RenderObject::issueRepaint(v11, &v20, 0, 0, (uint64_t)v19);
            v12 = *(_DWORD *)(v11 + 16);
          }
          if (v12)
          {
            *(_DWORD *)(v11 + 16) = v12 - 1;
LABEL_17:
            if (*((_DWORD *)v10 + 6) == 2)
            {
              v16 = *((_WORD *)v10 + 15);
              if ((v16 & 0x400) == 0)
              {
                v17 = *((_WORD *)v10 + 14);
                if ((v17 & 0xF000) == 0x9000)
                {
                  return (uint64_t)WebCore::Document::removedLastRef(v10, v7);
                }
                else
                {
                  if ((v17 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)v10 + 20) + 16))(*((_QWORD *)v10 + 20));
                    v16 = *((_WORD *)v10 + 15);
                  }
                  *((_WORD *)v10 + 15) = v16 | 0x400;
                  return (*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v10 + 72))(v10);
                }
              }
            }
            else
            {
              *((_DWORD *)v10 + 6) -= 2;
            }
            return this;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x195BB52E4);
      }
    }
    else
    {
      v18 = 0;
      if (!v9)
        goto LABEL_23;
    }
    *(_DWORD *)(v6 + 24) = v9;
    goto LABEL_9;
  }
  return this;
}

uint64_t WebCore::HTMLAreaElement::focusAppearanceUpdateTarget@<X0>(WebCore::HTMLAreaElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  const WTF::AtomString *v6;
  uint64_t v7;
  int v8;
  const WebCore::TreeScope *v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;

  result = WebCore::HTMLAreaElement::isFocusable(this);
  if ((result & 1) != 0)
  {
    v5 = *((_QWORD *)this + 4);
    if (v5
      && (*(_WORD *)(v5 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::mapTag + 24))
    {
      v6 = (const WTF::AtomString *)(v5 + 112);
      v7 = *(_QWORD *)(v5 + 112);
      v8 = *(_DWORD *)(v5 + 24);
      *(_DWORD *)(v5 + 24) = v8 + 2;
      if (v7
        && *(_DWORD *)(v7 + 4)
        && (v9 = *(const WebCore::TreeScope **)(v5 + 40), (result = *((_QWORD *)v9 + 6)) != 0))
      {
        result = (uint64_t)WebCore::TreeScopeOrderedMap::getElementByUsemap((unsigned int *)result, v6, v9, &v12);
        v8 = *(_DWORD *)(v5 + 24) - 2;
        if (*(_DWORD *)(v5 + 24) == 2)
        {
LABEL_13:
          v10 = *(_WORD *)(v5 + 30);
          if ((v10 & 0x400) == 0)
          {
            v11 = *(_WORD *)(v5 + 28);
            if ((v11 & 0xF000) == 0x9000)
            {
              result = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v5, v6);
            }
            else
            {
              if ((v11 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
                v10 = *(_WORD *)(v5 + 30);
              }
              *(_WORD *)(v5 + 30) = v10 | 0x400;
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
            }
          }
          goto LABEL_8;
        }
      }
      else
      {
        v12 = 0;
        if (!v8)
          goto LABEL_13;
      }
      *(_DWORD *)(v5 + 24) = v8;
    }
    else
    {
      v12 = 0;
    }
LABEL_8:
    *a2 = v12;
    return result;
  }
  *a2 = 0;
  return result;
}

uint64_t WebCore::HTMLAreaElement::target@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(this + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (_DWORD **)(v4 + 8);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 1);
    if (v7 == WebCore::HTMLNames::targetAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::targetAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::targetAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (v8)
    *v8 += 2;
  *a2 = v8;
  return this;
}

uint64_t WebCore::HTMLArticleElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33B3D58;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLArticleElement::insertedIntoAncestor(WebCore::Element *a1, unsigned __int16 a2, uint64_t a3)
{
  char v4;
  uint64_t v6;
  WebCore::Document *v7;
  BOOL v8;

  v4 = a2;
  v6 = WebCore::HTMLElement::insertedIntoAncestor((uint64_t)a1, a2, a3);
  if ((v4 & 1) != 0)
  {
    v7 = *(WebCore::Document **)(*(_QWORD *)(a3 + 40) + 8);
    if (v7)
      v8 = (*((_WORD *)v7 + 1679) & 1) == 0;
    else
      v8 = 1;
    if (!v8)
      WebCore::Document::registerArticleElement(v7, a1);
  }
  return v6;
}

uint64_t *WebCore::HTMLArticleElement::removedFromAncestor(WebCore::Element *a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  if ((a2 & 1) != 0)
    WebCore::Document::unregisterArticleElement(*(uint64_t **)(*(_QWORD *)(a3 + 40) + 8), a1);
  return WebCore::HTMLElement::removedFromAncestor((uint64_t)a1, a2, a3, a4, a5);
}

void WebCore::HTMLAttachmentElement::~HTMLAttachmentElement(WebCore::HTMLAttachmentElement *this, void *a2)
{
  bmalloc::api *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  _DWORD *v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;

  v3 = (bmalloc::api *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      if (*(_QWORD *)v3)
      {
        *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
        *(_QWORD *)v3 = 0;
      }
      bmalloc::api::isoDeallocate(v3, a2);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  v4 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      v20 = *(_WORD *)(v4 + 30);
      if ((v20 & 0x400) == 0)
      {
        v21 = *(_WORD *)(v4 + 28);
        if ((v21 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v4, a2);
        }
        else
        {
          if ((v21 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
            v20 = *(_WORD *)(v4 + 30);
          }
          *(_WORD *)(v4 + 30) = v20 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
        }
      }
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      v22 = *(_WORD *)(v5 + 30);
      if ((v22 & 0x400) == 0)
      {
        v23 = *(_WORD *)(v5 + 28);
        if ((v23 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v5, a2);
        }
        else
        {
          if ((v23 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
            v22 = *(_WORD *)(v5 + 30);
          }
          *(_WORD *)(v5 + 30) = v22 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
        }
      }
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      v24 = *(_WORD *)(v6 + 30);
      if ((v24 & 0x400) == 0)
      {
        v25 = *(_WORD *)(v6 + 28);
        if ((v25 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v6, a2);
        }
        else
        {
          if ((v25 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
            v24 = *(_WORD *)(v6 + 30);
          }
          *(_WORD *)(v6 + 30) = v24 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
        }
      }
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      v26 = *(_WORD *)(v7 + 30);
      if ((v26 & 0x400) == 0)
      {
        v27 = *(_WORD *)(v7 + 28);
        if ((v27 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v7, a2);
        }
        else
        {
          if ((v27 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
            v26 = *(_WORD *)(v7 + 30);
          }
          *(_WORD *)(v7 + 30) = v26 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
        }
      }
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      v28 = *(_WORD *)(v8 + 30);
      if ((v28 & 0x400) == 0)
      {
        v29 = *(_WORD *)(v8 + 28);
        if ((v29 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v8, a2);
        }
        else
        {
          if ((v29 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
            v28 = *(_WORD *)(v8 + 30);
          }
          *(_WORD *)(v8 + 30) = v28 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
        }
      }
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      v30 = *(_WORD *)(v9 + 30);
      if ((v30 & 0x400) == 0)
      {
        v31 = *(_WORD *)(v9 + 28);
        if ((v31 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v9, a2);
        }
        else
        {
          if ((v31 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
            v30 = *(_WORD *)(v9 + 30);
          }
          *(_WORD *)(v9 + 30) = v30 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
        }
      }
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  v10 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      v32 = *(_WORD *)(v10 + 30);
      if ((v32 & 0x400) == 0)
      {
        v33 = *(_WORD *)(v10 + 28);
        if ((v33 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v10, a2);
        }
        else
        {
          if ((v33 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 160) + 16))(*(_QWORD *)(v10 + 160));
            v32 = *(_WORD *)(v10 + 30);
          }
          *(_WORD *)(v10 + 30) = v32 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
        }
      }
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v11 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      v34 = *(_WORD *)(v11 + 30);
      if ((v34 & 0x400) == 0)
      {
        v35 = *(_WORD *)(v11 + 28);
        if ((v35 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v11, a2);
        }
        else
        {
          if ((v35 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 160) + 16))(*(_QWORD *)(v11 + 160));
            v34 = *(_WORD *)(v11 + 30);
          }
          *(_WORD *)(v11 + 30) = v34 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
        }
      }
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  v12 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      v36 = *(_WORD *)(v12 + 30);
      if ((v36 & 0x400) == 0)
      {
        v37 = *(_WORD *)(v12 + 28);
        if ((v37 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v12, a2);
        }
        else
        {
          if ((v37 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 160) + 16))(*(_QWORD *)(v12 + 160));
            v36 = *(_WORD *)(v12 + 30);
          }
          *(_WORD *)(v12 + 30) = v36 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 72))(v12);
        }
      }
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  v13 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      v38 = *(_WORD *)(v13 + 30);
      if ((v38 & 0x400) == 0)
      {
        v39 = *(_WORD *)(v13 + 28);
        if ((v39 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v13, a2);
        }
        else
        {
          if ((v39 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v13 + 160) + 16))(*(_QWORD *)(v13 + 160));
            v38 = *(_WORD *)(v13 + 30);
          }
          *(_WORD *)(v13 + 30) = v38 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
        }
      }
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
  }
  v14 = (WTF *)*((_QWORD *)this + 22);
  if (v14)
  {
    *((_QWORD *)this + 22) = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v14, a2);
  }
  v15 = (WTF *)*((_QWORD *)this + 20);
  if (v15)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v15, a2);
  }
  v16 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  v17 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v19)
  {
    if (v19[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[4];
  }
  WebCore::Element::~Element((uint64_t)this);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLAttachmentElement::~HTMLAttachmentElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

unsigned int *WebCore::HTMLAttachmentElement::didAddUserAgentShadowRoot(unsigned int *this, WebCore::ShadowRoot *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::StyledElement *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WebCore::Document *v36;
  WebCore::Node *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unint64_t StatusReg;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  WebCore::AbortSignal *v56;
  WebCore *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  WebCore::AbortSignal *v62;
  WTF::StringImpl *v63;
  WebCore::Document *v64;
  void *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  void *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  const WTF::AtomString *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  void *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl **v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  void *v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t *v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t *v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl **v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  void *v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t *v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  void *v137;
  WebCore::Document *v138;
  bmalloc::api *v139;
  void *v140;
  bmalloc::api *v141;
  void *v142;
  __int16 v143;
  __int16 v144;
  __int16 v145;
  __int16 v146;
  __int16 v147;
  __int16 v148;
  __int16 v149;
  __int16 v150;
  __int16 v151;
  __int16 v152;
  __int16 v153;
  __int16 v154;
  __int16 v155;
  __int16 v156;
  __int16 v157;
  __int16 v158;
  __int16 v159;
  __int16 v160;
  __int16 v161;
  __int16 v162;
  __int16 v163;
  __int16 v164;
  __int16 v165;
  __int16 v166;
  uint64_t v167;
  WTF::StringImpl *v168;
  WebCore::Document *v169;
  uint64_t v170;
  int v171;
  WTF::StringImpl *v172;
  char v173;
  _BYTE v174[8];
  WTF::StringImpl *v175;
  char v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  char v179;
  const char *v180;
  uint64_t v181;

  if (*((_BYTE *)this + 112) != 1)
    return this;
  v2 = (uint64_t)this;
  if (*((_QWORD *)this + 30))
    return this;
  if ((_MergedGlobals_185 & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    qword_1ECE83440 = (uint64_t)v180;
    _MergedGlobals_185 = 1;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
  v5 = bmalloc::api::isoAllocate();
  v6 = v5;
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x101C00000002;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = v4 + 96;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  v7 = WebCore::HTMLNames::styleTag;
  if (WebCore::HTMLNames::styleTag)
    ++*(_DWORD *)WebCore::HTMLNames::styleTag;
  *(_QWORD *)(v5 + 96) = v7;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33CD4C8;
  *(_WORD *)(v5 + 112) = 0;
  *(_DWORD *)(v5 + 116) = 0;
  *(_DWORD *)(v5 + 120) = 0;
  *(_OWORD *)(v5 + 128) = 0uLL;
  *(_OWORD *)(v5 + 144) = 0uLL;
  *(_BYTE *)(v5 + 160) = 0;
  v8 = (const char *)qword_1ECE83440;
  if (qword_1ECE83440)
    *(_DWORD *)qword_1ECE83440 += 2;
  v180 = v8;
  WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)v5, (uint64_t)&v180);
  v10 = (WTF::StringImpl *)v180;
  v180 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  WebCore::ContainerNode::appendChild((uint64_t)a2, (WebCore::Node *)v6, (uint64_t)v174);
  if (v176)
  {
    v12 = v175;
    v175 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
  v14 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v14 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v14 + 24) = 0x101C00000002;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = v13 + 96;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  ++*(_DWORD *)(v13 + 3324);
  *(_QWORD *)(v14 + 80) = 0;
  *(_QWORD *)(v14 + 88) = 0;
  v16 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v14 + 96) = v16;
  *(_QWORD *)(v14 + 104) = 0;
  *(_QWORD *)v14 = off_1E33B9CC0;
  v17 = *(_QWORD *)(v2 + 200);
  *(_QWORD *)(v2 + 200) = v14;
  if (v17)
  {
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      v149 = *(_WORD *)(v17 + 30);
      if ((v149 & 0x400) == 0)
      {
        v150 = *(_WORD *)(v17 + 28);
        if ((v150 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v17, v15);
        }
        else
        {
          if ((v150 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v17 + 160) + 16))(*(_QWORD *)(v17 + 160));
            v149 = *(_WORD *)(v17 + 30);
          }
          *(_WORD *)(v17 + 30) = v149 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 72))(v17);
        }
      }
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
  }
  v18 = *(WTF::StringImpl **)(v2 + 200);
  if ((byte_1ECE83429 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    *(_QWORD *)algn_1ECE83448 = v180;
    byte_1ECE83429 = 1;
  }
  v19 = *((_QWORD *)v18 + 13);
  if (!v19)
    goto LABEL_35;
  v20 = *(_DWORD *)(v19 + 4);
  if ((v20 & 1) != 0)
  {
    v21 = *(uint64_t **)(v19 + 40);
    v22 = *(_DWORD *)(v19 + 52);
    if (!v22)
    {
LABEL_35:
      v23 = 0xFFFFFFFFLL;
      goto LABEL_36;
    }
  }
  else
  {
    v21 = (uint64_t *)(v19 + 32);
    v22 = v20 >> 5;
    if (!v22)
      goto LABEL_35;
  }
  v23 = 0;
  while (1)
  {
    v24 = *v21;
    if (*v21 == WebCore::HTMLNames::idAttr
      || *(_QWORD *)(v24 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
      && *(_QWORD *)(v24 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
    {
      break;
    }
    ++v23;
    v21 += 2;
    if (v22 == v23)
      goto LABEL_35;
  }
LABEL_36:
  WebCore::Element::setAttributeInternal(v18, v23, (WebCore::TreeScope *)&WebCore::HTMLNames::idAttr, (WTF::StringImpl **)algn_1ECE83448, 0);
  v25 = *(WebCore::StyledElement **)(v2 + 200);
  if ((byte_1ECE8342A & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE83450 = v180;
    byte_1ECE8342A = 1;
  }
  v180 = "px";
  v181 = 3;
  v171 = 1116733440;
  this = (unsigned int *)WTF::tryMakeString<float,WTF::ASCIILiteral>((uint64_t)&v180, &v177);
  if (!v177)
  {
    __break(0xC471u);
    return this;
  }
  WebCore::StyledElement::setInlineStyleCustomProperty(v25, (const WTF::AtomString *)&qword_1ECE83450, (const WTF::String *)&v177, 0);
  v27 = v177;
  v177 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  WebCore::ContainerNode::appendChild((uint64_t)a2, *(WebCore::Node **)(v2 + 200), (uint64_t)&v171);
  if (v173)
  {
    v29 = v172;
    v172 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v28);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  v30 = *(_QWORD *)(v2 + 200);
  if ((byte_1ECE8342B & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE83458 = (WTF::StringImpl *)v180;
    byte_1ECE8342B = 1;
  }
  v180 = 0;
  WebCore::createContainedElement<WebCore::HTMLDivElement>(&v170, v30, &qword_1ECE83458, (uint64_t)&v180);
  v32 = (WTF::StringImpl *)v180;
  v180 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v31);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v170;
  if ((byte_1ECE8342C & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE83460 = (WTF::StringImpl *)v180;
    byte_1ECE8342C = 1;
  }
  v180 = 0;
  WebCore::createContainedElement<WebCore::HTMLDivElement>((uint64_t *)&v169, v33, &qword_1ECE83460, (uint64_t)&v180);
  v35 = (WTF::StringImpl *)v180;
  v180 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v34);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = v169;
  if ((byte_1ECE8342D & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE83468 = (WTF::StringImpl *)v180;
    byte_1ECE8342D = 1;
  }
  WebCore::HTMLImageElement::create(*(WebCore::HTMLImageElement **)(*((_QWORD *)v36 + 5) + 8), (uint64_t *)&v168);
  v37 = v168;
  v38 = *((_QWORD *)v168 + 13);
  if (!v38)
    goto LABEL_70;
  v39 = *(_DWORD *)(v38 + 4);
  if ((v39 & 1) != 0)
  {
    v40 = *(uint64_t **)(v38 + 40);
    v41 = *(_DWORD *)(v38 + 52);
    if (!v41)
    {
LABEL_70:
      v42 = 0xFFFFFFFFLL;
      goto LABEL_71;
    }
  }
  else
  {
    v40 = (uint64_t *)(v38 + 32);
    v41 = v39 >> 5;
    if (!v41)
      goto LABEL_70;
  }
  v42 = 0;
  while (1)
  {
    v43 = *v40;
    if (*v40 == WebCore::HTMLNames::idAttr
      || *(_QWORD *)(v43 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
      && *(_QWORD *)(v43 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
    {
      break;
    }
    ++v42;
    v40 += 2;
    if (v41 == v42)
      goto LABEL_70;
  }
LABEL_71:
  WebCore::Element::setAttributeInternal(v168, v42, (WebCore::TreeScope *)&WebCore::HTMLNames::idAttr, &qword_1ECE83468, 0);
  WebCore::ContainerNode::appendChild((uint64_t)v36, v37, (uint64_t)&v177);
  if (v179)
  {
    v45 = v178;
    v178 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v44);
      else
        *(_DWORD *)v45 -= 2;
    }
  }
  v46 = *(_QWORD *)(v2 + 192);
  *(_QWORD *)(v2 + 192) = v37;
  if (v46)
  {
    if (*(_DWORD *)(v46 + 24) == 2)
    {
      v151 = *(_WORD *)(v46 + 30);
      if ((v151 & 0x400) == 0)
      {
        v152 = *(_WORD *)(v46 + 28);
        if ((v152 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v46, v44);
        }
        else
        {
          if ((v152 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v46 + 160) + 16))(*(_QWORD *)(v46 + 160));
            v151 = *(_WORD *)(v46 + 30);
          }
          *(_WORD *)(v46 + 30) = v151 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 72))(v46);
        }
      }
    }
    else
    {
      *(_DWORD *)(v46 + 24) -= 2;
    }
  }
  v47 = *(_QWORD *)(v2 + 192);
  v48 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v48 + 16) = 1;
  *(_BYTE *)(v48 + 20) = 3;
  *(_QWORD *)v48 = off_1E33B6058;
  *(_QWORD *)(v48 + 8) = 0;
  v49 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v2);
  if (v49)
  {
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 + 1, v49));
  }
  *(_QWORD *)(v48 + 24) = v49;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v52 = *(_QWORD *)(StatusReg + 736);
  if (!v52 || (v53 = *(_QWORD *)(v52 + 96)) == 0)
    v53 = WebCore::threadGlobalDataSlow((WebCore *)v49);
  v54 = *(_QWORD *)(v53 + 40);
  if (!v54)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v53);
    v54 = *(_QWORD *)(v53 + 40);
  }
  ++*(_DWORD *)(v48 + 16);
  v177 = (WTF::StringImpl *)v48;
  LOBYTE(v180) = 0;
  *(_WORD *)((char *)&v180 + 1) = 0;
  BYTE3(v180) = 0;
  v181 = 0;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, const char **))(*(_QWORD *)v47 + 24))(v47, v54 + 1104, &v177, &v180);
  v56 = (WebCore::AbortSignal *)v181;
  v181 = 0;
  if (v56)
  {
    if (*((_DWORD *)v56 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v56, v55);
      bmalloc::api::isoDeallocate(v139, v140);
    }
    else
    {
      --*((_DWORD *)v56 + 6);
    }
  }
  v57 = v177;
  v177 = 0;
  if (v57)
  {
    if (*((_DWORD *)v57 + 4) == 1)
      v57 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v57 + 8))(v57);
    else
      --*((_DWORD *)v57 + 4);
  }
  v58 = *(_QWORD *)(StatusReg + 736);
  if (!v58 || (v59 = *(_QWORD *)(v58 + 96)) == 0)
    v59 = WebCore::threadGlobalDataSlow(v57);
  v60 = *(_QWORD *)(v59 + 40);
  if (!v60)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v59);
    v60 = *(_QWORD *)(v59 + 40);
  }
  ++*(_DWORD *)(v48 + 16);
  v177 = (WTF::StringImpl *)v48;
  LOBYTE(v180) = 0;
  *(_WORD *)((char *)&v180 + 1) = 0;
  BYTE3(v180) = 0;
  v181 = 0;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, const char **))(*(_QWORD *)v47 + 24))(v47, v60 + 784, &v177, &v180);
  v62 = (WebCore::AbortSignal *)v181;
  v181 = 0;
  if (v62)
  {
    if (*((_DWORD *)v62 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v62, v61);
      bmalloc::api::isoDeallocate(v141, v142);
    }
    else
    {
      --*((_DWORD *)v62 + 6);
    }
  }
  v63 = v177;
  v177 = 0;
  if (v63)
  {
    if (*((_DWORD *)v63 + 4) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v63 + 8))(v63);
    else
      --*((_DWORD *)v63 + 4);
  }
  if (*(_DWORD *)(v48 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  else
    --*(_DWORD *)(v48 + 16);
  WebCore::HTMLAttachmentElement::updateImage((WebCore::HTMLAttachmentElement *)v2);
  v64 = v169;
  if ((byte_1ECE8342E & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE83470 = (WTF::StringImpl *)v180;
    byte_1ECE8342E = 1;
  }
  v177 = 0;
  WebCore::createContainedElement<WebCore::HTMLDivElement>((uint64_t *)&v180, (uint64_t)v64, &qword_1ECE83470, (uint64_t)&v177);
  v66 = *(_QWORD *)(v2 + 208);
  *(_QWORD *)(v2 + 208) = v180;
  if (v66)
  {
    if (*(_DWORD *)(v66 + 24) == 2)
    {
      v153 = *(_WORD *)(v66 + 30);
      if ((v153 & 0x400) == 0)
      {
        v154 = *(_WORD *)(v66 + 28);
        if ((v154 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v66, v65);
        }
        else
        {
          if ((v154 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v66 + 160) + 16))(*(_QWORD *)(v66 + 160));
            v153 = *(_WORD *)(v66 + 30);
          }
          *(_WORD *)(v66 + 30) = v153 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v66 + 72))(v66);
        }
      }
    }
    else
    {
      *(_DWORD *)(v66 + 24) -= 2;
    }
  }
  v67 = v177;
  v177 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v65);
    else
      *(_DWORD *)v67 -= 2;
  }
  if ((byte_1ECE8342F & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE83478 = (WTF::StringImpl *)v180;
    byte_1ECE8342F = 1;
  }
  v177 = 0;
  WebCore::createContainedElement<WebCore::HTMLDivElement>((uint64_t *)&v180, (uint64_t)v64, &qword_1ECE83478, (uint64_t)&v177);
  v69 = *(_QWORD *)(v2 + 216);
  *(_QWORD *)(v2 + 216) = v180;
  if (v69)
  {
    if (*(_DWORD *)(v69 + 24) == 2)
    {
      v155 = *(_WORD *)(v69 + 30);
      if ((v155 & 0x400) == 0)
      {
        v156 = *(_WORD *)(v69 + 28);
        if ((v156 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v69, v68);
        }
        else
        {
          if ((v156 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v69 + 160) + 16))(*(_QWORD *)(v69 + 160));
            v155 = *(_WORD *)(v69 + 30);
          }
          *(_WORD *)(v69 + 30) = v155 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v69 + 72))(v69);
        }
      }
    }
    else
    {
      *(_DWORD *)(v69 + 24) -= 2;
    }
  }
  v70 = v177;
  v177 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v68);
    else
      *(_DWORD *)v70 -= 2;
  }
  v71 = *(_QWORD *)(v2 + 104);
  if (!v71)
    goto LABEL_131;
  v72 = *(_DWORD *)(v71 + 4);
  if ((v72 & 1) == 0)
  {
    v73 = v71 + 32;
    LODWORD(v74) = v72 >> 5;
    if ((_DWORD)v74)
      goto LABEL_123;
LABEL_131:
    v75 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
    goto LABEL_132;
  }
  v73 = *(_QWORD *)(v71 + 40);
  LODWORD(v74) = *(_DWORD *)(v71 + 52);
  if (!(_DWORD)v74)
    goto LABEL_131;
LABEL_123:
  v74 = v74;
  v75 = (const WTF::AtomString *)(v73 + 8);
  while (1)
  {
    v76 = *((_QWORD *)v75 - 1);
    if (v76 == WebCore::HTMLNames::progressAttr
      || *(_QWORD *)(v76 + 24) == *(_QWORD *)(WebCore::HTMLNames::progressAttr + 24)
      && *(_QWORD *)(v76 + 32) == *(_QWORD *)(WebCore::HTMLNames::progressAttr + 32))
    {
      break;
    }
    v75 = (const WTF::AtomString *)((char *)v75 + 16);
    if (!--v74)
    {
      v75 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_132:
  WebCore::HTMLAttachmentElement::updateProgress((WTF::StringImpl *)v2, v75);
  v77 = v170;
  if ((byte_1ECE83430 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE83480 = (uint64_t)v180;
    byte_1ECE83430 = 1;
  }
  v180 = 0;
  WebCore::createContainedElement<WebCore::HTMLDivElement>((uint64_t *)&v177, v77, (WTF::StringImpl **)&qword_1ECE83480, (uint64_t)&v180);
  v79 = (WTF::StringImpl *)v180;
  v180 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, v78);
    else
      *(_DWORD *)v79 -= 2;
  }
  v80 = v177;
  if ((byte_1ECE83431 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE83488 = (WTF::StringImpl *)v180;
    byte_1ECE83431 = 1;
  }
  v168 = 0;
  WebCore::createContainedElement<WebCore::HTMLDivElement>((uint64_t *)&v180, (uint64_t)v80, &qword_1ECE83488, (uint64_t)&v168);
  v82 = *(_QWORD *)(v2 + 224);
  *(_QWORD *)(v2 + 224) = v180;
  if (v82)
  {
    if (*(_DWORD *)(v82 + 24) == 2)
    {
      v157 = *(_WORD *)(v82 + 30);
      if ((v157 & 0x400) == 0)
      {
        v158 = *(_WORD *)(v82 + 28);
        if ((v158 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v82, v81);
        }
        else
        {
          if ((v158 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v82 + 160) + 16))(*(_QWORD *)(v82 + 160));
            v157 = *(_WORD *)(v82 + 30);
          }
          *(_WORD *)(v82 + 30) = v157 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v82 + 72))(v82);
        }
      }
    }
    else
    {
      *(_DWORD *)(v82 + 24) -= 2;
    }
  }
  v83 = v168;
  v168 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
      WTF::StringImpl::destroy(v83, (WTF::StringImpl *)v81);
    else
      *(_DWORD *)v83 -= 2;
  }
  v84 = *(_QWORD *)(v2 + 224);
  if ((byte_1ECE83432 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE83490 = (WTF::StringImpl *)v180;
    byte_1ECE83432 = 1;
  }
  v85 = *(_QWORD *)(v2 + 104);
  if (!v85)
    goto LABEL_158;
  v86 = *(_DWORD *)(v85 + 4);
  if ((v86 & 1) == 0)
  {
    v87 = v85 + 32;
    LODWORD(v88) = v86 >> 5;
    if ((_DWORD)v88)
      goto LABEL_150;
LABEL_158:
    v89 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_159;
  }
  v87 = *(_QWORD *)(v85 + 40);
  LODWORD(v88) = *(_DWORD *)(v85 + 52);
  if (!(_DWORD)v88)
    goto LABEL_158;
LABEL_150:
  v88 = v88;
  v89 = (WTF::StringImpl **)(v87 + 8);
  while (1)
  {
    v90 = (uint64_t)*(v89 - 1);
    if (v90 == WebCore::HTMLNames::actionAttr
      || *(_QWORD *)(v90 + 24) == *(_QWORD *)(WebCore::HTMLNames::actionAttr + 24)
      && *(_QWORD *)(v90 + 32) == *(_QWORD *)(WebCore::HTMLNames::actionAttr + 32))
    {
      break;
    }
    v89 += 2;
    if (!--v88)
    {
      v89 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_159:
  v91 = *v89;
  if (v91)
    *(_DWORD *)v91 += 2;
  v168 = v91;
  WebCore::createContainedElement<WebCore::HTMLDivElement>((uint64_t *)&v180, v84, &qword_1ECE83490, (uint64_t)&v168);
  v93 = *(_QWORD *)(v2 + 232);
  *(_QWORD *)(v2 + 232) = v180;
  if (v93)
  {
    if (*(_DWORD *)(v93 + 24) == 2)
    {
      v159 = *(_WORD *)(v93 + 30);
      if ((v159 & 0x400) == 0)
      {
        v160 = *(_WORD *)(v93 + 28);
        if ((v160 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v93, v92);
        }
        else
        {
          if ((v160 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v93 + 160) + 16))(*(_QWORD *)(v93 + 160));
            v159 = *(_WORD *)(v93 + 30);
          }
          *(_WORD *)(v93 + 30) = v159 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v93 + 72))(v93);
        }
      }
    }
    else
    {
      *(_DWORD *)(v93 + 24) -= 2;
    }
  }
  v94 = v168;
  v168 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
      WTF::StringImpl::destroy(v94, (WTF::StringImpl *)v92);
    else
      *(_DWORD *)v94 -= 2;
  }
  v95 = *(WTF::StringImpl **)(v2 + 232);
  v96 = *((_QWORD *)v95 + 13);
  if (!v96)
    goto LABEL_179;
  v97 = *(_DWORD *)(v96 + 4);
  if ((v97 & 1) != 0)
  {
    v98 = *(uint64_t **)(v96 + 40);
    v99 = *(_DWORD *)(v96 + 52);
    if (!v99)
    {
LABEL_179:
      v100 = 0xFFFFFFFFLL;
      goto LABEL_180;
    }
  }
  else
  {
    v98 = (uint64_t *)(v96 + 32);
    v99 = v97 >> 5;
    if (!v99)
      goto LABEL_179;
  }
  v100 = 0;
  while (1)
  {
    v101 = *v98;
    if (*v98 == WebCore::HTMLNames::dirAttr
      || *(_QWORD *)(v101 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 24)
      && *(_QWORD *)(v101 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 32))
    {
      break;
    }
    ++v100;
    v98 += 2;
    if (v99 == v100)
      goto LABEL_179;
  }
LABEL_180:
  WebCore::Element::setAttributeInternal(v95, v100, (WebCore::TreeScope *)&WebCore::HTMLNames::dirAttr, (WTF::StringImpl **)&WebCore::autoAtomData, 0);
  v102 = *(_QWORD *)(v2 + 224);
  if ((byte_1ECE83433 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE83498 = (WTF::StringImpl *)v180;
    byte_1ECE83433 = 1;
  }
  WebCore::HTMLAttachmentElement::attachmentTitleForDisplay((char *)v2, &v168);
  WebCore::createContainedElement<WebCore::HTMLDivElement>((uint64_t *)&v180, v102, &qword_1ECE83498, (uint64_t)&v168);
  v104 = *(_QWORD *)(v2 + 240);
  *(_QWORD *)(v2 + 240) = v180;
  if (v104)
  {
    if (*(_DWORD *)(v104 + 24) == 2)
    {
      v161 = *(_WORD *)(v104 + 30);
      if ((v161 & 0x400) == 0)
      {
        v162 = *(_WORD *)(v104 + 28);
        if ((v162 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v104, v103);
        }
        else
        {
          if ((v162 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v104 + 160) + 16))(*(_QWORD *)(v104 + 160));
            v161 = *(_WORD *)(v104 + 30);
          }
          *(_WORD *)(v104 + 30) = v161 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v104 + 72))(v104);
        }
      }
    }
    else
    {
      *(_DWORD *)(v104 + 24) -= 2;
    }
  }
  v105 = v168;
  v168 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
      WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v103);
    else
      *(_DWORD *)v105 -= 2;
  }
  v106 = *(WTF::StringImpl **)(v2 + 240);
  v107 = *((_QWORD *)v106 + 13);
  if (!v107)
    goto LABEL_200;
  v108 = *(_DWORD *)(v107 + 4);
  if ((v108 & 1) != 0)
  {
    v109 = *(uint64_t **)(v107 + 40);
    v110 = *(_DWORD *)(v107 + 52);
    if (!v110)
    {
LABEL_200:
      v111 = 0xFFFFFFFFLL;
      goto LABEL_201;
    }
  }
  else
  {
    v109 = (uint64_t *)(v107 + 32);
    v110 = v108 >> 5;
    if (!v110)
      goto LABEL_200;
  }
  v111 = 0;
  while (1)
  {
    v112 = *v109;
    if (*v109 == WebCore::HTMLNames::dirAttr
      || *(_QWORD *)(v112 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 24)
      && *(_QWORD *)(v112 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 32))
    {
      break;
    }
    ++v111;
    v109 += 2;
    if (v110 == v111)
      goto LABEL_200;
  }
LABEL_201:
  WebCore::Element::setAttributeInternal(v106, v111, (WebCore::TreeScope *)&WebCore::HTMLNames::dirAttr, (WTF::StringImpl **)&WebCore::autoAtomData, 0);
  v113 = *(_QWORD *)(v2 + 224);
  if ((byte_1ECE83434 & 1) == 0)
  {
    v167 = *(_QWORD *)(v2 + 224);
    WTF::AtomStringImpl::add();
    v113 = v167;
    qword_1ECE834A0 = (WTF::StringImpl *)v180;
    byte_1ECE83434 = 1;
  }
  v114 = *(_QWORD *)(v2 + 104);
  if (!v114)
    goto LABEL_214;
  v115 = *(_DWORD *)(v114 + 4);
  if ((v115 & 1) == 0)
  {
    v116 = v114 + 32;
    LODWORD(v117) = v115 >> 5;
    if ((_DWORD)v117)
      goto LABEL_206;
LABEL_214:
    v118 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_215;
  }
  v116 = *(_QWORD *)(v114 + 40);
  LODWORD(v117) = *(_DWORD *)(v114 + 52);
  if (!(_DWORD)v117)
    goto LABEL_214;
LABEL_206:
  v117 = v117;
  v118 = (WTF::StringImpl **)(v116 + 8);
  while (1)
  {
    v119 = (uint64_t)*(v118 - 1);
    if (v119 == WebCore::HTMLNames::subtitleAttr
      || *(_QWORD *)(v119 + 24) == *(_QWORD *)(WebCore::HTMLNames::subtitleAttr + 24)
      && *(_QWORD *)(v119 + 32) == *(_QWORD *)(WebCore::HTMLNames::subtitleAttr + 32))
    {
      break;
    }
    v118 += 2;
    if (!--v117)
    {
      v118 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_215:
  v120 = *v118;
  if (v120)
    *(_DWORD *)v120 += 2;
  v168 = v120;
  WebCore::createContainedElement<WebCore::HTMLDivElement>((uint64_t *)&v180, v113, &qword_1ECE834A0, (uint64_t)&v168);
  v122 = *(_QWORD *)(v2 + 248);
  *(_QWORD *)(v2 + 248) = v180;
  if (v122)
  {
    if (*(_DWORD *)(v122 + 24) == 2)
    {
      v163 = *(_WORD *)(v122 + 30);
      if ((v163 & 0x400) == 0)
      {
        v164 = *(_WORD *)(v122 + 28);
        if ((v164 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v122, v121);
        }
        else
        {
          if ((v164 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v122 + 160) + 16))(*(_QWORD *)(v122 + 160));
            v163 = *(_WORD *)(v122 + 30);
          }
          *(_WORD *)(v122 + 30) = v163 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v122 + 72))(v122);
        }
      }
    }
    else
    {
      *(_DWORD *)(v122 + 24) -= 2;
    }
  }
  v123 = v168;
  v168 = 0;
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
      WTF::StringImpl::destroy(v123, (WTF::StringImpl *)v121);
    else
      *(_DWORD *)v123 -= 2;
  }
  v124 = *(WTF::StringImpl **)(v2 + 248);
  v125 = *((_QWORD *)v124 + 13);
  if (!v125)
    goto LABEL_235;
  v126 = *(_DWORD *)(v125 + 4);
  if ((v126 & 1) != 0)
  {
    v127 = *(uint64_t **)(v125 + 40);
    v128 = *(_DWORD *)(v125 + 52);
    if (!v128)
    {
LABEL_235:
      v129 = 0xFFFFFFFFLL;
      goto LABEL_236;
    }
  }
  else
  {
    v127 = (uint64_t *)(v125 + 32);
    v128 = v126 >> 5;
    if (!v128)
      goto LABEL_235;
  }
  v129 = 0;
  while (1)
  {
    v130 = *v127;
    if (*v127 == WebCore::HTMLNames::dirAttr
      || *(_QWORD *)(v130 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 24)
      && *(_QWORD *)(v130 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 32))
    {
      break;
    }
    ++v129;
    v127 += 2;
    if (v128 == v129)
      goto LABEL_235;
  }
LABEL_236:
  WebCore::Element::setAttributeInternal(v124, v129, (WebCore::TreeScope *)&WebCore::HTMLNames::dirAttr, (WTF::StringImpl **)&WebCore::autoAtomData, 0);
  v131 = *(_QWORD *)(v2 + 104);
  if (v131)
  {
    v132 = *(_DWORD *)(v131 + 4);
    if ((v132 & 1) != 0)
    {
      v133 = *(_QWORD *)(v131 + 40);
      LODWORD(v134) = *(_DWORD *)(v131 + 52);
      if ((_DWORD)v134)
      {
LABEL_239:
        v134 = v134;
        v135 = (_QWORD *)(v133 + 8);
        while (1)
        {
          v136 = *(v135 - 1);
          if (v136 == WebCore::HTMLNames::saveAttr
            || *(_QWORD *)(v136 + 24) == *(_QWORD *)(WebCore::HTMLNames::saveAttr + 24)
            && *(_QWORD *)(v136 + 32) == *(_QWORD *)(WebCore::HTMLNames::saveAttr + 32))
          {
            goto LABEL_248;
          }
          v135 += 2;
          if (!--v134)
          {
            v135 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_248;
          }
        }
      }
    }
    else
    {
      v133 = v131 + 32;
      LODWORD(v134) = v132 >> 5;
      if ((_DWORD)v134)
        goto LABEL_239;
    }
  }
  v135 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_248:
  this = WebCore::HTMLAttachmentElement::updateSaveButton((unsigned int *)v2, *v135 != 0);
  if (*((_DWORD *)v80 + 6) == 2)
  {
    v143 = *((_WORD *)v80 + 15);
    if ((v143 & 0x400) == 0)
    {
      v144 = *((_WORD *)v80 + 14);
      if ((v144 & 0xF000) == 0x9000)
      {
        this = WebCore::Document::removedLastRef(v80, v137);
      }
      else
      {
        if ((v144 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)v80 + 20) + 16))(*((_QWORD *)v80 + 20));
          v143 = *((_WORD *)v80 + 15);
        }
        *((_WORD *)v80 + 15) = v143 | 0x400;
        this = (unsigned int *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v80 + 72))(v80);
      }
    }
  }
  else
  {
    *((_DWORD *)v80 + 6) -= 2;
  }
  v138 = v169;
  if (v169)
  {
    if (*((_DWORD *)v169 + 6) == 2)
    {
      v165 = *((_WORD *)v169 + 15);
      if ((v165 & 0x400) == 0)
      {
        v166 = *((_WORD *)v169 + 14);
        if ((v166 & 0xF000) == 0x9000)
        {
          this = WebCore::Document::removedLastRef(v169, v137);
        }
        else
        {
          if ((v166 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v169 + 20) + 16))(*((_QWORD *)v169 + 20));
            v165 = *((_WORD *)v138 + 15);
          }
          *((_WORD *)v138 + 15) = v165 | 0x400;
          this = (unsigned int *)(*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v138 + 72))(v138);
        }
      }
    }
    else
    {
      *((_DWORD *)v169 + 6) -= 2;
    }
  }
  if (*(_DWORD *)(v77 + 24) == 2)
  {
    v145 = *(_WORD *)(v77 + 30);
    if ((v145 & 0x400) == 0)
    {
      v146 = *(_WORD *)(v77 + 28);
      if ((v146 & 0xF000) == 0x9000)
      {
        this = WebCore::Document::removedLastRef((WebCore::Document *)v77, v137);
      }
      else
      {
        if ((v146 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v77 + 160) + 16))(*(_QWORD *)(v77 + 160));
          v145 = *(_WORD *)(v77 + 30);
        }
        *(_WORD *)(v77 + 30) = v145 | 0x400;
        this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 72))(v77);
      }
    }
  }
  else
  {
    *(_DWORD *)(v77 + 24) -= 2;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    v147 = *(_WORD *)(v6 + 30);
    if ((v147 & 0x400) == 0)
    {
      v148 = *(_WORD *)(v6 + 28);
      if ((v148 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v6, v137);
      }
      else
      {
        if ((v148 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
          v147 = *(_WORD *)(v6 + 30);
        }
        *(_WORD *)(v6 + 30) = v147 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
      }
    }
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::createContainedElement<WebCore::HTMLDivElement>(uint64_t *a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  char v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;

  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
  v9 = bmalloc::api::isoAllocate();
  v10 = (unsigned __int16 *)v9;
  *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v9 + 24) = 0x101C00000002;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v8 + 96;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  ++*(_DWORD *)(v8 + 3324);
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  v11 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v9 + 96) = v11;
  *(_QWORD *)(v9 + 104) = 0;
  *(_QWORD *)v9 = off_1E33B9CC0;
  *a1 = v9;
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v9, 0xFFFFFFFFLL, (WebCore::TreeScope *)&WebCore::HTMLNames::idAttr, a3, 0);
  if (*(_QWORD *)a4 && *(_DWORD *)(*(_QWORD *)a4 + 4))
  {
    v14 = v10[14] >> 12;
    if (v14 == 1)
      goto LABEL_11;
    if (v14 > 0xB)
      goto LABEL_12;
    if (v14 == 11)
    {
LABEL_11:
      WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)v10, a4);
LABEL_12:
      v20 = 0;
      v21 = 0;
      v22 = 0;
      goto LABEL_4;
    }
    if (((1 << v14) & 0x19C) == 0)
      goto LABEL_12;
    (*(void (**)(uint64_t *__return_ptr, unsigned __int16 *, uint64_t))(*(_QWORD *)v10 + 120))(&v20, v10, a4);
    if ((_BYTE)v22)
    {
      v16 = v21;
      v21 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
  }
LABEL_4:
  result = (WTF::StringImpl *)WebCore::ContainerNode::appendChild(a2, (WebCore::Node *)v10, (uint64_t)&v17);
  if (v19)
  {
    result = v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF *WebCore::HTMLAttachmentElement::updateImage(WebCore::HTMLAttachmentElement *this)
{
  WTF *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Event *v7;
  uint64_t v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  WebCore::ScriptExecutionContext *v11;
  WTF *v12;
  WebCore::ScriptExecutionContext *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::Event *v31;
  uint64_t v32;
  _DWORD *v33;
  WebCore::ScriptExecutionContext *v34;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int *v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t *v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int *v62;
  WTF::StringImpl *v63;
  WTF *v64;
  int v65;
  int v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;

  result = (WTF *)*((_QWORD *)this + 24);
  if (!result)
    return result;
  if (!*((_DWORD *)this + 43))
  {
    if (*((_DWORD *)this + 47))
    {
      v27 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v27 || (v28 = *(_QWORD *)(v27 + 96)) == 0)
        v28 = WebCore::threadGlobalDataSlow(result);
      v29 = *(_QWORD *)(v28 + 40);
      if (!v29)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v28);
        v29 = *(_QWORD *)(v28 + 40);
      }
      v30 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v30);
      *(_DWORD *)(v30 + 16) = 1;
      *(_QWORD *)v30 = off_1E33A4B48;
      *(_QWORD *)(v30 + 8) = 0;
      *(_DWORD *)(v30 + 20) = *(_DWORD *)(v30 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v29 + 1112) != 0);
      v33 = *(_DWORD **)(v29 + 1112);
      if (v33)
        *v33 += 2;
      *(_QWORD *)(v30 + 24) = v33;
      *(_QWORD *)(v30 + 32) = 0;
      *(_QWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = v32;
      *(_QWORD *)(v30 + 64) = 0;
      WebCore::EventDispatcher::dispatchEvent((WebCore::EventNames **)this, (WebCore::Node *)v30, v31);
      if (*(_DWORD *)(v30 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      else
        --*(_DWORD *)(v30 + 16);
      v10 = (WTF::StringImpl *)*((_QWORD *)this + 24);
      v34 = (WebCore::ScriptExecutionContext *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 192);
      v35 = (WTF *)*((unsigned int *)this + 47);
      v64 = 0;
      v65 = 0;
      v66 = (int)v35;
      if ((_DWORD)v35)
      {
        v65 = (int)v35;
        v64 = (WTF *)WTF::fastMalloc(v35);
        memcpy(v64, *((const void **)this + 22), *((unsigned int *)this + 47));
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v13 = (WebCore::ScriptExecutionContext *)bmalloc::api::isoAllocate();
      v37 = *(_QWORD *)(WebCore::Blob::Blob((uint64_t)v13, v34, (uint64_t)&v64, &v63) + 32);
      if (v37)
      {
        v38 = *(_QWORD *)(v37 + 8);
        if (v38)
        {
          v39 = *(unsigned __int8 *)(v38 + 178);
          if (*(_BYTE *)(v38 + 178))
          {
            if (v39 == 1 || v39 == 2)
              ++*(_DWORD *)(v38 + 216);
          }
          else
          {
            *(_DWORD *)(v38 - 264) += 2;
          }
          v40 = (unsigned int *)(v38 - 96);
          v41 = (_DWORD *)((char *)v13 + 24);
          if (*(_BYTE *)(v38 + 179))
          {
            (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v41 + 24))((_DWORD *)v13 + 6, *(unsigned __int8 *)(v38 + 177));
            v41 = (_DWORD *)((char *)v13 + 24);
            v40 = (unsigned int *)(v38 - 96);
          }
          if (*(_BYTE *)(v38 + 180))
          {
            v62 = v40;
            (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 56))(v41);
            v40 = v62;
          }
          WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed(v40, v36);
        }
      }
      WebCore::DOMURL::createPublicURL((WebCore::ActiveDOMObject **)v34, v13, &v67);
      v42 = v67;
      if (v67)
      {
        v68 = v67;
        if ((*((_BYTE *)v67 + 16) & 0x10) == 0)
        {
          WTF::AtomStringImpl::addSlowCase();
          v44 = v68;
          v42 = v69;
          v69 = 0;
          v68 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v43);
            else
              *(_DWORD *)v44 -= 2;
          }
        }
      }
      v69 = v42;
      v45 = *((_QWORD *)v10 + 13);
      if (!v45)
        goto LABEL_81;
      v46 = *(_DWORD *)(v45 + 4);
      if ((v46 & 1) != 0)
      {
        v47 = *(uint64_t **)(v45 + 40);
        v48 = *(_DWORD *)(v45 + 52);
        if (!v48)
          goto LABEL_81;
      }
      else
      {
        v47 = (uint64_t *)(v45 + 32);
        v48 = v46 >> 5;
        if (!v48)
          goto LABEL_81;
      }
      v53 = 0;
      while (1)
      {
        v55 = *v47;
        if (*v47 == WebCore::HTMLNames::srcAttr
          || *(_QWORD *)(v55 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
          && *(_QWORD *)(v55 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
        {
          goto LABEL_82;
        }
        ++v53;
        v47 += 2;
        if (v48 == v53)
          goto LABEL_81;
      }
    }
    v49 = *((_QWORD *)result + 13);
    if (!v49)
      goto LABEL_105;
    v50 = *(_DWORD *)(v49 + 4);
    if ((v50 & 1) != 0)
    {
      v51 = *(uint64_t **)(v49 + 40);
      v52 = *(_DWORD *)(v49 + 52);
      if (!v52)
      {
LABEL_105:
        v59 = 0xFFFFFFFFLL;
        return WebCore::Element::setAttributeInternal(result, v59, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, MEMORY[0x1E0CBF2F8], 0);
      }
    }
    else
    {
      v51 = (uint64_t *)(v49 + 32);
      v52 = v50 >> 5;
      if (!v52)
        goto LABEL_105;
    }
    v59 = 0;
    while (1)
    {
      v60 = *v51;
      if (*v51 == WebCore::HTMLNames::srcAttr
        || *(_QWORD *)(v60 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
        && *(_QWORD *)(v60 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
      {
        return WebCore::Element::setAttributeInternal(result, v59, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, MEMORY[0x1E0CBF2F8], 0);
      }
      ++v59;
      v51 += 2;
      if (v52 == v59)
        goto LABEL_105;
    }
  }
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
    v4 = WebCore::threadGlobalDataSlow(result);
  v5 = *(_QWORD *)(v4 + 40);
  if (!v5)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
    v5 = *(_QWORD *)(v4 + 40);
  }
  v6 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
  *(_DWORD *)(v6 + 16) = 1;
  *(_QWORD *)v6 = off_1E33A4B48;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 20) = *(_DWORD *)(v6 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v5 + 1112) != 0);
  v9 = *(_DWORD **)(v5 + 1112);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v6 + 24) = v9;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = v8;
  *(_QWORD *)(v6 + 64) = 0;
  WebCore::EventDispatcher::dispatchEvent((WebCore::EventNames **)this, (WebCore::Node *)v6, v7);
  if (*(_DWORD *)(v6 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  else
    --*(_DWORD *)(v6 + 16);
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  v11 = (WebCore::ScriptExecutionContext *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 192);
  v12 = (WTF *)*((unsigned int *)this + 43);
  v64 = 0;
  v65 = 0;
  v66 = (int)v12;
  if ((_DWORD)v12)
  {
    v65 = (int)v12;
    v64 = (WTF *)WTF::fastMalloc(v12);
    memcpy(v64, *((const void **)this + 20), *((unsigned int *)this + 43));
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = (WebCore::ScriptExecutionContext *)bmalloc::api::isoAllocate();
  v15 = *(_QWORD *)(WebCore::Blob::Blob((uint64_t)v13, v11, (uint64_t)&v64, &v63) + 32);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      v17 = *(unsigned __int8 *)(v16 + 178);
      if (*(_BYTE *)(v16 + 178))
      {
        if (v17 == 1 || v17 == 2)
          ++*(_DWORD *)(v16 + 216);
      }
      else
      {
        *(_DWORD *)(v16 - 264) += 2;
      }
      v18 = (unsigned int *)(v16 - 96);
      v19 = (_DWORD *)((char *)v13 + 24);
      if (*(_BYTE *)(v16 + 179))
      {
        (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v19 + 24))((_DWORD *)v13 + 6, *(unsigned __int8 *)(v16 + 177));
        v19 = (_DWORD *)((char *)v13 + 24);
        v18 = (unsigned int *)(v16 - 96);
      }
      if (*(_BYTE *)(v16 + 180))
      {
        v61 = v18;
        (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 56))(v19);
        v18 = v61;
      }
      WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed(v18, v14);
    }
  }
  WebCore::DOMURL::createPublicURL((WebCore::ActiveDOMObject **)v11, v13, &v67);
  v20 = v67;
  if (v67)
  {
    v68 = v67;
    if ((*((_BYTE *)v67 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v22 = v68;
      v20 = v69;
      v69 = 0;
      v68 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v21);
        else
          *(_DWORD *)v22 -= 2;
      }
    }
  }
  v69 = v20;
  v23 = *((_QWORD *)v10 + 13);
  if (!v23)
    goto LABEL_81;
  v24 = *(_DWORD *)(v23 + 4);
  if ((v24 & 1) == 0)
  {
    v25 = (uint64_t *)(v23 + 32);
    v26 = v24 >> 5;
    if (!v26)
      goto LABEL_81;
LABEL_63:
    v53 = 0;
    while (1)
    {
      v54 = *v25;
      if (*v25 == WebCore::HTMLNames::srcAttr
        || *(_QWORD *)(v54 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
        && *(_QWORD *)(v54 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
      {
        goto LABEL_82;
      }
      ++v53;
      v25 += 2;
      if (v26 == v53)
        goto LABEL_81;
    }
  }
  v25 = *(uint64_t **)(v23 + 40);
  v26 = *(_DWORD *)(v23 + 52);
  if (v26)
    goto LABEL_63;
LABEL_81:
  v53 = 0xFFFFFFFFLL;
LABEL_82:
  WebCore::Element::setAttributeInternal(v10, v53, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, &v69, 0);
  v57 = v69;
  v69 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v56);
    else
      *(_DWORD *)v57 -= 2;
  }
  if (*((_DWORD *)v13 + 4) == 1)
    (*(void (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v13 + 8))(v13);
  else
    --*((_DWORD *)v13 + 4);
  v58 = v63;
  v63 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v56);
    else
      *(_DWORD *)v58 -= 2;
  }
  result = v64;
  if (v64)
    return (WTF *)WTF::fastFree(v64, v56);
  return result;
}

WTF::StringImpl *WebCore::HTMLAttachmentElement::updateProgress(WTF::StringImpl *this, const WTF::AtomString *a2)
{
  WebCore::StyledElement **v3;
  float v4;
  float v5;
  WebCore::StyledElement *v7;
  WebCore::StyledElement *v8;
  WebCore::StyledElement *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  BOOL v12;
  WTF::StringImpl *v13;

  if (!*((_QWORD *)this + 27))
    return this;
  v3 = (WebCore::StyledElement **)this;
  v12 = 0;
  WTF::String::toFloat(a2, &v12);
  v5 = v4;
  if (!v12 || (LODWORD(v4) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    WebCore::StyledElement::removeInlineStyleProperty(v3[24], (WTF::StringImpl *)7);
    WebCore::StyledElement::setInlineStyleProperty(v3[26], (WTF::StringImpl *)7, 6u, 0);
LABEL_7:
    WebCore::StyledElement::setInlineStyleProperty(v3[27], (WTF::StringImpl *)7, 6u, 0);
    v7 = v3[27];
    if ((byte_1ECE83435 & 1) == 0)
    {
      WTF::AtomStringImpl::add();
      qword_1ECE834A8 = v13;
      byte_1ECE83435 = 1;
    }
    return (WTF::StringImpl *)WebCore::StyledElement::removeInlineStyleCustomProperty(v7, (const WTF::AtomString *)&qword_1ECE834A8);
  }
  WebCore::StyledElement::setInlineStyleProperty(v3[24], (WTF::StringImpl *)7, 6u, 0);
  v8 = v3[26];
  if (v5 == 0.0)
  {
    WebCore::StyledElement::removeInlineStyleProperty(v8, (WTF::StringImpl *)7);
    goto LABEL_7;
  }
  WebCore::StyledElement::setInlineStyleProperty(v8, (WTF::StringImpl *)7, 6u, 0);
  WebCore::StyledElement::removeInlineStyleProperty(v3[27], (WTF::StringImpl *)7);
  v9 = v3[27];
  if ((byte_1ECE83435 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE834A8 = v13;
    byte_1ECE83435 = 1;
  }
  if (v5 >= 0.0 && v5 <= 1.0)
  {
    v10 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v10 += 2;
    v13 = v10;
  }
  else
  {
    WTF::AtomStringImpl::add();
  }
  WebCore::StyledElement::setInlineStyleCustomProperty(v9, (const WTF::AtomString *)&qword_1ECE834A8, (const WTF::String *)&v13, 0);
  this = v13;
  v13 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v11);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

char *WebCore::HTMLAttachmentElement::attachmentTitleForDisplay@<X0>(char *this@<X0>, _QWORD *a2@<X8>)
{
  char *v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  BOOL v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  _DWORD *v30;
  char *v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  uint64_t v36;
  _WORD *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  int8x16_t v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  char *v47;
  char *v48;
  __int16 v49;
  _DWORD *v50;
  char *v51;
  char *v52;
  __int128 v53;
  int8x16_t v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  char *v58;
  char *v59;
  __int16 v60;
  __int128 v61;
  char *v62;
  int8x16_t v63;
  __int128 v64;
  __int128 v65;
  char *v66;
  char *v67;
  char *v68;
  __int16 v69;
  uint64_t v70;
  int8x16x2_t v71;
  int8x16x2_t v72;
  int8x16x2_t v73;
  int8x16x2_t v74;
  int8x16x2_t v75;
  int8x16x2_t v76;
  int8x16x2_t v77;
  int8x16x2_t v78;
  int8x16x2_t v79;

  v2 = this;
  v4 = *((_QWORD *)this + 13);
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  v8 = (uint64_t *)(v6 + 8);
  while (1)
  {
    v9 = *(v8 - 1);
    if (v9 == WebCore::HTMLNames::titleAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v7)
    {
      v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v10 = *v8;
  if (!*v8 || !*(_DWORD *)(v10 + 4))
  {
    v11 = *((_QWORD *)this + 15);
    if (!v11)
    {
      v10 = 0;
LABEL_54:
      *a2 = v10;
      return this;
    }
    v10 = *(_QWORD *)(v11 + 144);
    if (!v10)
      goto LABEL_54;
  }
  *(_DWORD *)v10 += 2;
  this = (char *)WTF::StringImpl::reverseFind();
  if (this == (char *)-1)
    goto LABEL_54;
  v13 = *(const char **)(v10 + 8);
  v14 = *(unsigned int *)(v10 + 4);
  v15 = ((unint64_t)*(unsigned int *)(v10 + 16) >> 2) & 1;
  v16 = (v15 << 32) | this;
  if (v14 <= this)
    v16 = *(unsigned int *)(v10 + 4) | ((((unint64_t)*(unsigned int *)(v10 + 16) >> 2) & 1) << 32);
  if ((_DWORD)v14)
    v17 = *(const char **)(v10 + 8);
  else
    v17 = "";
  if ((_DWORD)v14)
    v18 = v16;
  else
    v18 = 0x100000000;
  if (v14 <= this)
  {
    v19 = 0x100000000;
    v13 = "";
    goto LABEL_31;
  }
  if ((_DWORD)this)
  {
    v19 = (v14 - (_DWORD)this);
    v40 = v14 - this;
    if ((_DWORD)v15)
    {
      if (v40 >= v19)
      {
        v13 += this;
        v19 |= 0x100000000uLL;
        goto LABEL_31;
      }
    }
    else if (v40 >= v19)
    {
      v13 += 2 * this;
      goto LABEL_31;
    }
    __break(1u);
    goto LABEL_115;
  }
  v19 = v14 | (v15 << 32);
LABEL_31:
  v20 = v18 & 0x100000000;
  if (v2[112] == 1 && !v20 && (this = (char *)ubidi_getBaseDirection(), (_DWORD)this == 1))
  {
    if ((v19 & 0x80000000) != 0 || __OFADD__((_DWORD)v19, 1) || __OFADD__(v19 + 1, 1))
      goto LABEL_115;
    v21 = v19 + 3;
    v22 = __OFADD__(v19 + 2, 1);
    if ((v18 & 0x80000000) != 0)
      goto LABEL_115;
    if (v22)
      goto LABEL_115;
    v23 = __OFADD__((_DWORD)v18, v21);
    v24 = v18 + v21;
    if (v23)
      goto LABEL_115;
    v23 = __OFADD__(v24, 1);
    v25 = v24 + 1;
    if (v23)
      goto LABEL_115;
    v23 = __OFADD__(v25, 1);
    v26 = v25 + 1;
    if (v23)
      goto LABEL_115;
    v27 = (v26 + 1);
    if (__OFADD__(v26, 1))
      goto LABEL_115;
    if (v26 != -1)
    {
      if (v27 <= 0x7FFFFFEF)
      {
        this = (char *)WTF::tryFastCompactMalloc((WTF *)(2 * v27 + 20));
        v28 = v70;
        if (v70)
        {
          *(_DWORD *)v70 = 2;
          *(_DWORD *)(v70 + 4) = v27;
          *(_QWORD *)(v70 + 8) = v70 + 20;
          *(_QWORD *)(v70 + 16) = 0x2066200F00000000;
          v29 = (_WORD *)(v70 + 26);
          *(_WORD *)(v70 + 24) = 8296;
          if ((_DWORD)v18 == 1)
          {
            *v29 = *(_WORD *)v17;
          }
          else if ((_DWORD)v18)
          {
            this = (char *)memcpy((void *)(v70 + 26), v17, 2 * v18);
          }
          v30 = &v29[v18];
          *v30 = 537600105;
          v31 = (char *)(v30 + 1);
          if ((v19 & 0x100000000) != 0)
          {
            if (v19 >= 0x40)
            {
              v39 = &v31[2 * (v19 & 0xFFFFFFC0)];
              v61 = 0uLL;
              v62 = v31;
              do
              {
                v73.val[0] = *(int8x16_t *)v13;
                v63 = *((int8x16_t *)v13 + 1);
                v76.val[0] = (int8x16_t)*((_OWORD *)v13 + 2);
                v64 = *((_OWORD *)v13 + 3);
                v13 += 64;
                v65 = v64;
                v76.val[1] = 0uLL;
                v79.val[0] = v63;
                v73.val[1] = 0uLL;
                v66 = v62;
                vst2q_s8(v66, v73);
                v66 += 32;
                v79.val[1] = 0uLL;
                vst2q_s8(v66, v79);
                v67 = v62 + 64;
                vst2q_s8(v67, v76);
                v68 = v62 + 96;
                vst2q_s8(v68, *(int8x16x2_t *)(&v61 - 1));
                v62 += 128;
              }
              while (v62 != v39);
            }
            else
            {
              v39 = v31;
            }
            while (v39 != &v31[2 * v19])
            {
              v69 = *(unsigned __int8 *)v13++;
              *(_WORD *)v39 = v69;
              v39 += 2;
            }
          }
          else if ((_DWORD)v19 == 1)
          {
            *(_WORD *)v31 = *(_WORD *)v13;
          }
          else if ((_DWORD)v19)
          {
            this = (char *)memcpy(v31, v13, 2 * v19);
          }
          *(_WORD *)&v31[2 * v19] = 8297;
          goto LABEL_110;
        }
      }
LABEL_115:
      *a2 = 0;
      __break(0xC471u);
      JUMPOUT(0x195BB8310);
    }
  }
  else
  {
    if ((v19 & 0x80000000) != 0 || __OFADD__((_DWORD)v19, 1))
      goto LABEL_115;
    v32 = v19 + 2;
    v33 = __OFADD__(v19 + 1, 1);
    if ((v18 & 0x80000000) != 0)
      goto LABEL_115;
    if (v33)
      goto LABEL_115;
    v23 = __OFADD__((_DWORD)v18, v32);
    v34 = v18 + v32;
    if (v23)
      goto LABEL_115;
    v23 = __OFADD__(v34, 1);
    v35 = v34 + 1;
    if (v23)
      goto LABEL_115;
    v36 = (v35 + 1);
    if (__OFADD__(v35, 1))
      goto LABEL_115;
    if (v35 != -1)
    {
      if (v36 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v36 + 20));
        v28 = v70;
        if (v70)
        {
          *(_DWORD *)v70 = 2;
          *(_DWORD *)(v70 + 4) = v36;
          *(_QWORD *)(v70 + 8) = v70 + 20;
          *(_QWORD *)(v70 + 16) = 0x2068200E00000000;
          v37 = (_WORD *)(v70 + 24);
          if (v20)
          {
            if (v18 >= 0x40)
            {
              v38 = (char *)&v37[v18 & 0xFFFFFFC0];
              v41 = 0uLL;
              v42 = (char *)(v70 + 24);
              do
              {
                v71.val[0] = *(int8x16_t *)v17;
                v43 = *((int8x16_t *)v17 + 1);
                v74.val[0] = (int8x16_t)*((_OWORD *)v17 + 2);
                v44 = *((_OWORD *)v17 + 3);
                v17 += 64;
                v45 = v44;
                v74.val[1] = 0uLL;
                v77.val[0] = v43;
                v71.val[1] = 0uLL;
                v46 = v42;
                vst2q_s8(v46, v71);
                v46 += 32;
                v77.val[1] = 0uLL;
                vst2q_s8(v46, v77);
                v47 = v42 + 64;
                vst2q_s8(v47, v74);
                v48 = v42 + 96;
                vst2q_s8(v48, *(int8x16x2_t *)(&v41 - 1));
                v42 += 128;
              }
              while (v42 != v38);
            }
            else
            {
              v38 = (char *)(v70 + 24);
            }
            while (v38 != (char *)&v37[v18])
            {
              v49 = *(unsigned __int8 *)v17++;
              *(_WORD *)v38 = v49;
              v38 += 2;
            }
          }
          else if ((_DWORD)v18 == 1)
          {
            *v37 = *(_WORD *)v17;
          }
          else if ((_DWORD)v18)
          {
            memcpy((void *)(v70 + 24), v17, 2 * v18);
          }
          v50 = &v37[v18];
          *v50 = 537600105;
          this = (char *)(v50 + 1);
          if ((v19 & 0x100000000) != 0)
          {
            v51 = &this[2 * v19];
            if (v19 >= 0x40)
            {
              v52 = &this[2 * (v19 & 0xFFFFFFC0)];
              v53 = 0uLL;
              do
              {
                v72.val[0] = *(int8x16_t *)v13;
                v54 = *((int8x16_t *)v13 + 1);
                v75.val[0] = (int8x16_t)*((_OWORD *)v13 + 2);
                v55 = *((_OWORD *)v13 + 3);
                v13 += 64;
                v56 = v55;
                v75.val[1] = 0uLL;
                v78.val[0] = v54;
                v72.val[1] = 0uLL;
                v57 = this;
                vst2q_s8(v57, v72);
                v57 += 32;
                v78.val[1] = 0uLL;
                vst2q_s8(v57, v78);
                v58 = this + 64;
                vst2q_s8(v58, v75);
                v59 = this + 96;
                vst2q_s8(v59, *(int8x16x2_t *)(&v53 - 1));
                this += 128;
              }
              while (this != v52);
              this = v52;
            }
            while (this != v51)
            {
              v60 = *(unsigned __int8 *)v13++;
              *(_WORD *)this = v60;
              this += 2;
            }
          }
          else if ((_DWORD)v19 == 1)
          {
            *(_WORD *)this = *(_WORD *)v13;
          }
          else if ((_DWORD)v19)
          {
            this = (char *)memcpy(this, v13, 2 * v19);
          }
          goto LABEL_110;
        }
      }
      goto LABEL_115;
    }
  }
  v28 = MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_110:
  *a2 = v28;
  if (*(_DWORD *)v10 == 2)
    return (char *)WTF::StringImpl::destroy((WTF::StringImpl *)v10, v12);
  *(_DWORD *)v10 -= 2;
  return this;
}

unsigned int *WebCore::HTMLAttachmentElement::updateSaveButton(unsigned int *this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  void *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  bmalloc::api *v35;
  void *v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  char v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  char v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;

  v2 = (uint64_t)this;
  v3 = *((_QWORD *)this + 33);
  if ((a2 & 1) != 0)
  {
    if (v3 || !*((_QWORD *)this + 30))
      return this;
    v4 = *((_QWORD *)this + 28);
    if ((byte_1ECE83436 & 1) == 0)
    {
      WTF::AtomStringImpl::add();
      qword_1ECE834B0 = v50;
      byte_1ECE83436 = 1;
    }
    v47 = 0;
    WebCore::createContainedElement<WebCore::HTMLDivElement>((uint64_t *)&v50, v4, &qword_1ECE834B0, (uint64_t)&v47);
    v6 = *(_QWORD *)(v2 + 256);
    *(_QWORD *)(v2 + 256) = v50;
    if (v6)
    {
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        v37 = *(_WORD *)(v6 + 30);
        if ((v37 & 0x400) == 0)
        {
          v38 = *(_WORD *)(v6 + 28);
          if ((v38 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v6, v5);
          }
          else
          {
            if ((v38 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
              v37 = *(_WORD *)(v6 + 30);
            }
            *(_WORD *)(v6 + 30) = v37 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
          }
        }
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
    v7 = v47;
    v47 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = *(_QWORD *)(v2 + 256);
    if ((byte_1ECE83437 & 1) == 0)
    {
      WTF::AtomStringImpl::add();
      qword_1ECE834B8 = v50;
      byte_1ECE83437 = 1;
    }
    v43 = 0;
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
    v10 = bmalloc::api::isoAllocate();
    v11 = (unsigned __int16 *)v10;
    *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v10 + 24) = 0x1C1C00000002;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = v9 + 96;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_OWORD *)(v10 + 64) = 0u;
    ++*(_DWORD *)(v9 + 3324);
    *(_QWORD *)(v10 + 80) = 0;
    *(_QWORD *)(v10 + 88) = 0;
    v12 = WebCore::HTMLNames::buttonTag;
    if (WebCore::HTMLNames::buttonTag)
      ++*(_DWORD *)WebCore::HTMLNames::buttonTag;
    *(_QWORD *)(v10 + 96) = v12;
    *(_QWORD *)(v10 + 104) = 0;
    *(_OWORD *)(v10 + 120) = 0uLL;
    *(_OWORD *)(v10 + 136) = 0uLL;
    *(_QWORD *)(v10 + 152) = 0;
    *(_WORD *)(v10 + 160) = 3;
    *(_BYTE *)(v10 + 162) = *(_BYTE *)(v10 + 162) & 0xFC | 2;
    *(_BYTE *)(v10 + 168) &= 0xF8u;
    *(_DWORD *)(v10 + 164) = 0;
    *(_QWORD *)v10 = off_1E33B8508;
    *(_QWORD *)(v10 + 112) = &unk_1E33B8A90;
    *(_DWORD *)(v10 + 172) = 0;
    *(_BYTE *)(v10 + 176) = 0;
    WebCore::Element::setAttributeInternal((WTF::StringImpl *)v10, 0xFFFFFFFFLL, (WebCore::TreeScope *)&WebCore::HTMLNames::idAttr, &qword_1ECE834B8, 0);
    if (!v43 || !*((_DWORD *)v43 + 1))
      goto LABEL_17;
    v30 = v11[14] >> 12;
    if (v30 == 1)
      goto LABEL_54;
    if (v30 > 0xB)
      goto LABEL_55;
    if (v30 == 11)
    {
LABEL_54:
      WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)v11, (uint64_t)&v43);
    }
    else if (((1 << v30) & 0x19C) != 0)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, unsigned __int16 *, WTF::StringImpl **))(*(_QWORD *)v11 + 120))(&v50, v11, &v43);
      if ((_BYTE)v52)
      {
        v42 = v51;
        v51 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v41);
          else
            *(_DWORD *)v42 -= 2;
        }
      }
      goto LABEL_17;
    }
LABEL_55:
    v50 = 0;
    v51 = 0;
    v52 = 0;
LABEL_17:
    WebCore::ContainerNode::appendChild(v8, (WebCore::Node *)v11, (uint64_t)&v47);
    if (v49)
    {
      v14 = v48;
      v48 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    v15 = *(_QWORD *)(v2 + 264);
    *(_QWORD *)(v2 + 264) = v11;
    if (v15)
    {
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        v39 = *(_WORD *)(v15 + 30);
        if ((v39 & 0x400) == 0)
        {
          v40 = *(_WORD *)(v15 + 28);
          if ((v40 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v15, v13);
          }
          else
          {
            if ((v40 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v15 + 160) + 16))(*(_QWORD *)(v15 + 160));
              v39 = *(_WORD *)(v15 + 30);
            }
            *(_WORD *)(v15 + 30) = v39 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
          }
        }
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
    v16 = v43;
    v43 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        v16 = (WTF::StringImpl *)WTF::StringImpl::destroy(v16, v13);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = *(_QWORD *)(v2 + 264);
    v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v18 || (v19 = *(_QWORD *)(v18 + 96)) == 0)
      v19 = WebCore::threadGlobalDataSlow(v16);
    v20 = *(_QWORD *)(v19 + 40);
    if (!v20)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v19);
      v20 = *(_QWORD *)(v19 + 40);
    }
    v21 = v20 + 400;
    v22 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v22 + 16) = 1;
    *(_BYTE *)(v22 + 20) = 3;
    *(_QWORD *)v22 = off_1E33B60B0;
    *(_QWORD *)(v22 + 8) = 0;
    v23 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v2);
    if (v23)
    {
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
    }
    *(_QWORD *)(v22 + 24) = v23;
    v47 = (WTF::StringImpl *)v22;
    LOBYTE(v50) = 0;
    *(_WORD *)((char *)&v50 + 1) = 0;
    BYTE3(v50) = 0;
    v51 = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v17 + 24))(v17, v21, &v47, &v50);
    v26 = v51;
    v51 = 0;
    if (v26)
    {
      if (*((_DWORD *)v26 + 6) == 1)
      {
        WebCore::AbortSignal::~AbortSignal(v26, v25);
        bmalloc::api::isoDeallocate(v35, v36);
      }
      else
      {
        --*((_DWORD *)v26 + 6);
      }
    }
    this = (unsigned int *)v47;
    v47 = 0;
    if (this)
    {
      if (this[4] == 1)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
      else
        --this[4];
    }
    return this;
  }
  if (v3)
  {
    this = (unsigned int *)WebCore::ContainerNode::removeChild(*((WebCore::ContainerNode **)this + 28), *((WebCore::Node **)this + 32), &v44);
    if (v46)
    {
      this = (unsigned int *)v45;
      v45 = 0;
      if (this)
      {
        if (*this == 2)
          this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v27);
        else
          *this -= 2;
      }
    }
    v28 = *(_QWORD *)(v2 + 264);
    *(_QWORD *)(v2 + 264) = 0;
    if (v28)
    {
      if (*(_DWORD *)(v28 + 24) == 2)
      {
        v31 = *(_WORD *)(v28 + 30);
        if ((v31 & 0x400) == 0)
        {
          v32 = *(_WORD *)(v28 + 28);
          if ((v32 & 0xF000) == 0x9000)
          {
            this = WebCore::Document::removedLastRef((WebCore::Document *)v28, v27);
          }
          else
          {
            if ((v32 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v28 + 160) + 16))(*(_QWORD *)(v28 + 160));
              v31 = *(_WORD *)(v28 + 30);
            }
            *(_WORD *)(v28 + 30) = v31 | 0x400;
            this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 72))(v28);
          }
        }
      }
      else
      {
        *(_DWORD *)(v28 + 24) -= 2;
      }
    }
    v29 = *(_QWORD *)(v2 + 256);
    *(_QWORD *)(v2 + 256) = 0;
    if (v29)
    {
      if (*(_DWORD *)(v29 + 24) == 2)
      {
        v33 = *(_WORD *)(v29 + 30);
        if ((v33 & 0x400) == 0)
        {
          v34 = *(_WORD *)(v29 + 28);
          if ((v34 & 0xF000) == 0x9000)
          {
            return WebCore::Document::removedLastRef((WebCore::Document *)v29, v27);
          }
          else
          {
            if ((v34 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v29 + 160) + 16))(*(_QWORD *)(v29 + 160));
              v33 = *(_WORD *)(v29 + 30);
            }
            *(_WORD *)(v29 + 30) = v33 | 0x400;
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 72))(v29);
          }
        }
      }
      else
      {
        *(_DWORD *)(v29 + 24) -= 2;
      }
    }
  }
  return this;
}

uint64_t WebCore::HTMLAttachmentElement::saveButtonClientRect(WebCore::HTMLAttachmentElement *this)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  bmalloc::api *v20;
  BOOL v21;

  result = *((_QWORD *)this + 33);
  if (result)
  {
    v21 = 0;
    v3 = WebCore::Node::absoluteBoundingRect((WebCore::Node *)result, &v21);
    v6 = v3 - (v5 & 0xFFFFFFC0);
    v8 = HIDWORD(v3) - (v7 & 0xFFFFFFC0);
    v10 = v6 + v9;
    if (__OFADD__(v6, v9))
      v10 = (v6 >> 31) + 0x7FFFFFFF;
    v11 = v8 + v4;
    v12 = (v8 >> 31) + 0x7FFFFFFF;
    if (__OFADD__(v8, v4))
      v11 = (v8 >> 31) + 0x7FFFFFFF;
    v13 = v8 + 32;
    v14 = v6 + 32;
    v15 = (double)((int)v3 / 64 + (v14 >> 6));
    v16 = (double)(SHIDWORD(v3) / 64 + (v13 >> 6));
    v17 = (double)(v10 / 64 - (v14 >> 6) + ((int)(v10 - (v12 & 0xFFFFFFC0) + 32) >> 6));
    v18 = (double)(v11 / 64 - (v13 >> 6) + ((int)(v11 - (v10 & 0xFFFFFFC0) + 32) >> 6));
    result = bmalloc::api::isoAllocate();
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 1;
    *(double *)(result + 16) = v15;
    *(double *)(result + 24) = v16;
    *(double *)(result + 32) = v17;
    *(double *)(result + 40) = v18;
    v20 = (bmalloc::api *)*((_QWORD *)this + 34);
    *((_QWORD *)this + 34) = result;
    if (v20)
    {
      if (*((_DWORD *)v20 + 2) == 1)
      {
        if (*(_QWORD *)v20)
        {
          *(_QWORD *)(*(_QWORD *)v20 + 8) = 3;
          *(_QWORD *)v20 = 0;
        }
        bmalloc::api::isoDeallocate(v20, v19);
        return *((_QWORD *)this + 34);
      }
      else
      {
        --*((_DWORD *)v20 + 2);
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLAttachmentElement::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = bmalloc::api::isoAllocate();
  result = WebCore::RenderLayerModelObject::RenderLayerModelObject(v6, 0, a1, a2, 12, 3);
  *(_OWORD *)(result + 200) = 0u;
  *(_OWORD *)(result + 184) = 0u;
  *(_OWORD *)(result + 168) = 0u;
  *(_OWORD *)(result + 152) = 0u;
  *(_DWORD *)(result + 20) |= 2u;
  *(_QWORD *)result = off_1E341EBB8;
  *(_DWORD *)(result + 216) = 0;
  *(_WORD *)(result + 220) = 1;
  *(_BYTE *)(result + 222) = *(_BYTE *)(a1 + 112) == 1;
  *a3 = result;
  return result;
}

WebCore::AttachmentAssociatedElement *WebCore::HTMLAttachmentElement::getAttachmentIdentifier@<X0>(WebCore::HTMLAttachmentElement *this@<X0>, WebCore::HTMLElement *a2@<X1>, const WTF::String *a3@<X8>)
{
  WebCore::AttachmentAssociatedElement *result;
  WebCore::AttachmentAssociatedElement *v6;
  void *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  int v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  WebCore::Document *v22;
  WTF::StringImpl *v23;
  __int16 v24;
  __int16 v25;
  _DWORD *v26;
  WebCore::Editor *v27;
  void *v28;
  WebCore::Editor *v29;
  uint64_t v30;
  void *v31;
  WebCore::Document *v32;
  WTF::StringImpl *v33;

  result = (WebCore::AttachmentAssociatedElement *)(*(uint64_t (**)(WebCore::HTMLAttachmentElement *, WebCore::HTMLElement *))(*(_QWORD *)this + 480))(this, a2);
  if (result)
  {
    v6 = result;
    (*(void (**)(WebCore::AttachmentAssociatedElement *))(*(_QWORD *)result + 48))(result);
    WebCore::AttachmentAssociatedElement::attachmentElement(v6, &v33);
    v8 = v33;
    if (v33)
    {
      v9 = (_DWORD *)*((_QWORD *)v33 + 16);
      if (v9)
        *v9 += 2;
      *(_QWORD *)a3 = v9;
      v10 = *((_DWORD *)v8 + 6) - 2;
      if (*((_DWORD *)v8 + 6) == 2)
      {
        v11 = *((_WORD *)v8 + 15);
        if ((v11 & 0x400) == 0)
        {
          v12 = *((_WORD *)v8 + 14);
          if ((v12 & 0xF000) == 0x9000)
          {
LABEL_39:
            WebCore::Document::removedLastRef(v8, v7);
            return (WebCore::AttachmentAssociatedElement *)(*(uint64_t (**)(WebCore::AttachmentAssociatedElement *))(*(_QWORD *)v6 + 56))(v6);
          }
LABEL_36:
          if ((v12 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v8 + 20) + 16))(*((_QWORD *)v8 + 20));
            v11 = *((_WORD *)v8 + 15);
          }
LABEL_38:
          *((_WORD *)v8 + 15) = v11 | 0x400;
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v8 + 72))(v8);
          return (WebCore::AttachmentAssociatedElement *)(*(uint64_t (**)(WebCore::AttachmentAssociatedElement *))(*(_QWORD *)v6 + 56))(v6);
        }
        return (WebCore::AttachmentAssociatedElement *)(*(uint64_t (**)(WebCore::AttachmentAssociatedElement *))(*(_QWORD *)v6 + 56))(v6);
      }
      goto LABEL_27;
    }
    v8 = *(WTF::StringImpl **)(*((_QWORD *)this + 5) + 8);
    *((_DWORD *)v8 + 6) += 2;
    v13 = bmalloc::api::isoAllocate();
    v14 = v13;
    *(_OWORD *)(v13 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v13 + 24) = 0x101C00000002;
    *(_QWORD *)(v13 + 32) = 0;
    v15 = (char *)v8 + 96;
    if (!v8)
      v15 = 0;
    *(_QWORD *)(v13 + 40) = v15;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    ++*((_DWORD *)v8 + 831);
    *(_QWORD *)(v13 + 80) = 0;
    *(_QWORD *)(v13 + 88) = 0;
    v16 = WebCore::HTMLNames::attachmentTag;
    if (WebCore::HTMLNames::attachmentTag)
      ++*(_DWORD *)WebCore::HTMLNames::attachmentTag;
    *(_QWORD *)(v13 + 96) = v16;
    *(_QWORD *)(v13 + 104) = 0;
    *(_QWORD *)v13 = off_1E33B4248;
    *(_BYTE *)(v13 + 112) = 0;
    *(_OWORD *)(v13 + 136) = 0uLL;
    *(_OWORD *)(v13 + 152) = 0uLL;
    *(_OWORD *)(v13 + 168) = 0uLL;
    *(_OWORD *)(v13 + 184) = 0uLL;
    *(_OWORD *)(v13 + 200) = 0uLL;
    *(_OWORD *)(v13 + 216) = 0uLL;
    *(_OWORD *)(v13 + 232) = 0uLL;
    *(_OWORD *)(v13 + 248) = 0uLL;
    *(_OWORD *)(v13 + 120) = 0uLL;
    *(_OWORD *)(v13 + 264) = 0uLL;
    *(_BYTE *)(v13 + 280) = 1;
    v32 = (WebCore::Document *)v13;
    if ((*(_QWORD *)(*((_QWORD *)v8 + 85) + 704) & 0x100000000000) != 0)
    {
      *(_BYTE *)(v13 + 112) = 1;
      v13 = WebCore::Element::ensureUserAgentShadowRoot((WebCore::Element *)v13);
      v17 = *(WTF::StringImpl **)(v14 + 128);
      if (v17)
      {
        if (*((_DWORD *)v17 + 1))
        {
LABEL_21:
          *(_DWORD *)v17 += 2;
LABEL_22:
          *(_QWORD *)a3 = v17;
          v21 = (WTF::StringImpl *)*((_QWORD *)v8 + 382);
          if (!v21)
          {
            v27 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
            WebCore::Editor::Editor(v27, v8);
            v29 = (WebCore::Editor *)*((_QWORD *)v8 + 382);
            *((_QWORD *)v8 + 382) = v27;
            if (v29)
            {
              WebCore::Editor::~Editor(v29, v28);
              if (*(_DWORD *)v30)
              {
                *(_QWORD *)(v30 + 496) = 0;
                *(_OWORD *)(v30 + 464) = 0u;
                *(_OWORD *)(v30 + 480) = 0u;
                *(_OWORD *)(v30 + 432) = 0u;
                *(_OWORD *)(v30 + 448) = 0u;
                *(_OWORD *)(v30 + 400) = 0u;
                *(_OWORD *)(v30 + 416) = 0u;
                *(_OWORD *)(v30 + 368) = 0u;
                *(_OWORD *)(v30 + 384) = 0u;
                *(_OWORD *)(v30 + 336) = 0u;
                *(_OWORD *)(v30 + 352) = 0u;
                *(_OWORD *)(v30 + 304) = 0u;
                *(_OWORD *)(v30 + 320) = 0u;
                *(_OWORD *)(v30 + 272) = 0u;
                *(_OWORD *)(v30 + 288) = 0u;
                *(_OWORD *)(v30 + 240) = 0u;
                *(_OWORD *)(v30 + 256) = 0u;
                *(_OWORD *)(v30 + 208) = 0u;
                *(_OWORD *)(v30 + 224) = 0u;
                *(_OWORD *)(v30 + 176) = 0u;
                *(_OWORD *)(v30 + 192) = 0u;
                *(_OWORD *)(v30 + 144) = 0u;
                *(_OWORD *)(v30 + 160) = 0u;
                *(_OWORD *)(v30 + 112) = 0u;
                *(_OWORD *)(v30 + 128) = 0u;
                *(_OWORD *)(v30 + 80) = 0u;
                *(_OWORD *)(v30 + 96) = 0u;
                *(_OWORD *)(v30 + 48) = 0u;
                *(_OWORD *)(v30 + 64) = 0u;
                *(_OWORD *)(v30 + 16) = 0u;
                *(_OWORD *)(v30 + 32) = 0u;
                *(_OWORD *)v30 = 0u;
              }
              else
              {
                WTF::fastFree((WTF *)v30, v31);
              }
            }
            v21 = (WTF::StringImpl *)*((_QWORD *)v8 + 382);
          }
          WebCore::Editor::registerAttachmentIdentifier(v21, a3, v6);
          (*(void (**)(WebCore::AttachmentAssociatedElement *, WebCore::Document **))(*(_QWORD *)v6 + 40))(v6, &v32);
          v22 = v32;
          v32 = 0;
          if (v22)
          {
            if (*((_DWORD *)v22 + 6) == 2)
            {
              v24 = *((_WORD *)v22 + 15);
              if ((v24 & 0x400) == 0)
              {
                v25 = *((_WORD *)v22 + 14);
                if ((v25 & 0xF000) == 0x9000)
                {
                  WebCore::Document::removedLastRef(v22, v7);
                }
                else
                {
                  if ((v25 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)v22 + 20) + 16))(*((_QWORD *)v22 + 20));
                    v24 = *((_WORD *)v22 + 15);
                  }
                  *((_WORD *)v22 + 15) = v24 | 0x400;
                  (*(void (**)(WebCore::Document *))(*(_QWORD *)v22 + 72))(v22);
                }
              }
            }
            else
            {
              *((_DWORD *)v22 + 6) -= 2;
            }
          }
          v10 = *((_DWORD *)v8 + 6) - 2;
          if (*((_DWORD *)v8 + 6) == 2)
          {
            v11 = *((_WORD *)v8 + 15);
            if ((v11 & 0x400) == 0)
            {
              v12 = *((_WORD *)v8 + 14);
              if (v8 && (v12 & 0xF000) == 0x9000)
                goto LABEL_39;
              if (!v8)
                goto LABEL_38;
              goto LABEL_36;
            }
            return (WebCore::AttachmentAssociatedElement *)(*(uint64_t (**)(WebCore::AttachmentAssociatedElement *))(*(_QWORD *)v6 + 56))(v6);
          }
LABEL_27:
          *((_DWORD *)v8 + 6) = v10;
          return (WebCore::AttachmentAssociatedElement *)(*(uint64_t (**)(WebCore::AttachmentAssociatedElement *))(*(_QWORD *)v6 + 56))(v6);
        }
      }
    }
    WTF::createVersion4UUIDString((WTF *)v13);
    v17 = v33;
    v33 = 0;
    v19 = *(WTF::StringImpl **)(v14 + 128);
    *(_QWORD *)(v14 + 128) = v17;
    if (!v19)
    {
LABEL_20:
      if (!v17)
        goto LABEL_22;
      goto LABEL_21;
    }
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, v18);
      v19 = v33;
      v33 = 0;
      if (!v19)
        goto LABEL_19;
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v23);
        goto LABEL_19;
      }
    }
    *(_DWORD *)v19 = v20;
LABEL_19:
    v17 = *(WTF::StringImpl **)(v14 + 128);
    goto LABEL_20;
  }
  v26 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
    *v26 += 2;
  *(_QWORD *)a3 = v26;
  return result;
}

uint64_t WebCore::HTMLAttachmentElement::copyNonAttributePropertiesFromElement(uint64_t this, const WebCore::Element *a2)
{
  __int16 v2;
  _DWORD *v3;
  WTF::StringImpl *v4;

  v2 = *((_WORD *)a2 + 14);
  if ((v2 & 0x10) != 0
    && (v2 & 0x110) != 0x110
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
  {
    v3 = (_DWORD *)*((_QWORD *)a2 + 16);
    if (v3)
      *v3 += 2;
    v4 = *(WTF::StringImpl **)(this + 128);
    *(_QWORD *)(this + 128) = v3;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        return WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  else
  {
    this = 96;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebCore::HTMLAttachmentElement::archiveResourceURL@<X0>(uint64_t a1@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9[5];

  v9[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v9);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  MEMORY[0x19AEA52F8](a1, v9, &v8, 0);
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v9[0];
  v9[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::URL::setPath();
}

uint64_t WebCore::HTMLAttachmentElement::file(WebCore::HTMLAttachmentElement *this)
{
  return *((_QWORD *)this + 15);
}

WTF::StringImpl *WebCore::HTMLAttachmentElement::blobURL@<X0>(WebCore::HTMLAttachmentElement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12[5];

  v12[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v12);
  v4 = *((_QWORD *)this + 13);
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    v8 = MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  v8 = v6 + 8;
  while (1)
  {
    v9 = *(_QWORD *)(v8 - 8);
    if (v9 == WebCore::HTMLNames::webkitattachmentbloburlAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::webkitattachmentbloburlAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::webkitattachmentbloburlAttr + 32))
    {
      break;
    }
    v8 += 16;
    if (!--v7)
    {
      v8 = MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  MEMORY[0x19AEA52F8](a2, v12, v8, 0);
  result = v12[0];
  v12[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::HTMLAttachmentElement::setFile(WebCore::Element *this, WTF::StringImpl *a2, int a3)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  const __CFString *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  int v39;
  WebCore::RenderElement *v40;
  uint64_t v41;
  int v42;
  WTF::StringImpl *v43[2];
  char v44;
  __int128 v45;
  char v46;

  v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v6 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = v5;
  if (!v6)
  {
LABEL_4:
    if (!a3)
      goto LABEL_65;
    goto LABEL_5;
  }
  if (v6[4] != 1)
  {
    --v6[4];
    goto LABEL_4;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  if (!a3)
    goto LABEL_65;
LABEL_5:
  v7 = *((_QWORD *)this + 15);
  if (v7)
  {
    v8 = *(WTF::AtomStringImpl **)(v7 + 144);
    if (v8)
    {
      if ((*((_BYTE *)v8 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v8 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v8, a2);
        v8 = (WTF::AtomStringImpl *)v45;
      }
    }
    *(_QWORD *)&v45 = v8;
    v9 = *((_QWORD *)this + 13);
    if (!v9)
      goto LABEL_24;
    v10 = *(_DWORD *)(v9 + 4);
    if ((v10 & 1) != 0)
    {
      v11 = *(uint64_t **)(v9 + 40);
      v12 = *(_DWORD *)(v9 + 52);
      if (!v12)
      {
LABEL_24:
        v13 = 0xFFFFFFFFLL;
        goto LABEL_25;
      }
    }
    else
    {
      v11 = (uint64_t *)(v9 + 32);
      v12 = v10 >> 5;
      if (!v12)
        goto LABEL_24;
    }
    v13 = 0;
    while (1)
    {
      v14 = *v11;
      if (*v11 == WebCore::HTMLNames::titleAttr
        || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
        && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
      {
        break;
      }
      ++v13;
      v11 += 2;
      if (v12 == v13)
        goto LABEL_24;
    }
LABEL_25:
    WebCore::Element::setAttributeInternal(this, v13, (WebCore::TreeScope *)&WebCore::HTMLNames::titleAttr, (WTF::StringImpl **)&v45, 0);
    v16 = (WTF::StringImpl *)v45;
    *(_QWORD *)&v45 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = *((_QWORD *)this + 15);
    if (!*(_BYTE *)(v17 + 64))
    {
      v18 = WebCore::ThreadableBlobRegistry::blobSize((WebCore::ThreadableBlobRegistry *)(v17 + 80), v15);
      *(_QWORD *)(v17 + 56) = v18 & ~(v18 >> 63);
      *(_BYTE *)(v17 + 64) = 1;
    }
    v19 = (WTF::AtomStringImpl *)NSLocalizedFileSizeDescription();
    WTF::AtomStringImpl::add(v19, v20);
    v43[0] = (WTF::StringImpl *)v45;
    v21 = *((_QWORD *)this + 13);
    if (!v21)
      goto LABEL_42;
    v22 = *(_DWORD *)(v21 + 4);
    if ((v22 & 1) != 0)
    {
      v23 = *(uint64_t **)(v21 + 40);
      v24 = *(_DWORD *)(v21 + 52);
      if (!v24)
      {
LABEL_42:
        v25 = 0xFFFFFFFFLL;
        goto LABEL_43;
      }
    }
    else
    {
      v23 = (uint64_t *)(v21 + 32);
      v24 = v22 >> 5;
      if (!v24)
        goto LABEL_42;
    }
    v25 = 0;
    while (1)
    {
      v26 = *v23;
      if (*v23 == WebCore::HTMLNames::subtitleAttr
        || *(_QWORD *)(v26 + 24) == *(_QWORD *)(WebCore::HTMLNames::subtitleAttr + 24)
        && *(_QWORD *)(v26 + 32) == *(_QWORD *)(WebCore::HTMLNames::subtitleAttr + 32))
      {
        break;
      }
      ++v25;
      v23 += 2;
      if (v24 == v25)
        goto LABEL_42;
    }
LABEL_43:
    WebCore::Element::setAttributeInternal(this, v25, (WebCore::TreeScope *)&WebCore::HTMLNames::subtitleAttr, v43, 0);
    v28 = v43[0];
    v43[0] = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
    v29 = *(WTF::AtomStringImpl **)(*((_QWORD *)this + 15) + 48);
    if (v29)
    {
      if ((*((_BYTE *)v29 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v29 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v29, v27);
        v29 = (WTF::AtomStringImpl *)v45;
      }
    }
    *(_QWORD *)&v45 = v29;
    v30 = *((_QWORD *)this + 13);
    if (!v30)
      goto LABEL_61;
    v31 = *(_DWORD *)(v30 + 4);
    if ((v31 & 1) != 0)
    {
      v32 = *(uint64_t **)(v30 + 40);
      v33 = *(_DWORD *)(v30 + 52);
      if (!v33)
      {
LABEL_61:
        v34 = 0xFFFFFFFFLL;
LABEL_62:
        WebCore::Element::setAttributeInternal(this, v34, (WebCore::TreeScope *)&WebCore::HTMLNames::typeAttr, (WTF::StringImpl **)&v45, 0);
        v37 = (WTF::StringImpl *)v45;
        *(_QWORD *)&v45 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v36);
          else
            *(_DWORD *)v37 -= 2;
        }
        goto LABEL_65;
      }
    }
    else
    {
      v32 = (uint64_t *)(v30 + 32);
      v33 = v31 >> 5;
      if (!v33)
        goto LABEL_61;
    }
    v34 = 0;
    while (1)
    {
      v35 = *v32;
      if (*v32 == WebCore::HTMLNames::typeAttr
        || *(_QWORD *)(v35 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
        && *(_QWORD *)(v35 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
      {
        goto LABEL_62;
      }
      ++v34;
      v32 += 2;
      if (v33 == v34)
        goto LABEL_61;
    }
  }
  WebCore::Element::removeAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::titleAttr);
  WebCore::Element::removeAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::subtitleAttr);
  WebCore::Element::removeAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::typeAttr);
LABEL_65:
  *((_BYTE *)this + 280) = 1;
  v38 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v38)
    return;
  if ((*(_BYTE *)(v38 + 45) & 2) != 0)
    goto LABEL_85;
  v39 = *(_DWORD *)(v38 + 20);
  if ((v39 & 8) != 0)
    goto LABEL_74;
  *(_DWORD *)(v38 + 20) = v39 | 8;
  v40 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v38, 0);
  WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v38, v40);
  if ((*(_BYTE *)(v38 + 21) & 0x80) == 0)
    goto LABEL_74;
  if ((*(_BYTE *)(v38 + 45) & 0x10) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195BB9624);
  }
  v41 = *(_QWORD *)(v38 + 144);
  if (v41)
  {
    v42 = *(_DWORD *)(v41 + 8) + 1;
    *(_DWORD *)(v41 + 8) = v42;
  }
  else
  {
    v42 = MEMORY[8];
  }
  *(_QWORD *)(v41 + 24) = *(_QWORD *)(v41 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
  if (!v42)
  {
LABEL_85:
    __break(0xC471u);
    JUMPOUT(0x195BB9604);
  }
  *(_DWORD *)(v41 + 8) = v42 - 1;
LABEL_74:
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944)
                                                                 + 24)
                                                     + 8)
                                         + 40)
                             + 8)
                 + 3382))
  {
    LOBYTE(v45) = 0;
    v46 = 0;
    LOBYTE(v43[0]) = 0;
    v44 = 0;
    WebCore::RenderObject::issueRepaint(v38, &v45, 0, 0, (uint64_t)v43);
  }
}

uint64_t WebCore::HTMLAttachmentElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  char v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  NSObject *v17;
  _BOOL8 v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  void *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  char *v27;
  double v28;
  char *v29;
  WTF *v30;
  WTF *v31;
  WTF::StringImpl *v32;
  WTF *v33;
  NSObject *v34;
  void *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  char *v38;
  double v39;
  char *v40;
  WTF *v41;
  WTF *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  NSObject *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  char *v48;
  char *v49;
  void *v50;
  WTF *v51;
  WTF *v52;
  WTF::StringImpl *v53;
  void *v54;
  WTF *v55;
  WTF *v57;
  WTF::StringImpl *v58;
  WTF *v59;
  uint8_t buf[4];
  double v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  double v65;
  __int16 v66;
  char *v67;
  uint64_t v68;

  v3 = a2;
  v68 = *MEMORY[0x1E0C80C00];
  v5 = WebCore::HTMLElement::insertedIntoAncestor(a1, a2, a3);
  v6 = v5;
  if (*(_BYTE *)(a1 + 112) == 1)
  {
    WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)a1, (WTF::StringImpl *)0x195, 6, 0, 1.0);
    WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)a1, (WTF::StringImpl *)0x196, 6, 0, 1.0);
    WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)a1, (WTF::StringImpl *)0x197, 6, 0, 1.0);
    v5 = WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)a1, (WTF::StringImpl *)0x192, 6, 0, 1.0);
  }
  if ((v3 & 1) != 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v8 = *(_QWORD *)(v7 + 528);
    if (!v8
      || (v9 = *(_QWORD *)(v8 + 8)) == 0
      || (v10 = *(_QWORD *)(*(_QWORD *)(v9 + 280) + 88)) == 0
      || *(_QWORD *)(v9 + 296) != v7
      || ((++*(_DWORD *)(v10 + 24),
           v5 = WTF::MonotonicTime::now((WTF::MonotonicTime *)v5),
           v13 = v12 - *(double *)(v10 + 2728),
           *(_DWORD *)(v10 + 24) == 1)
        ? (v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
        : --*(_DWORD *)(v10 + 24),
          v13 < 1.0))
    {
      if ((byte_1ECE83439 & 1) == 0)
      {
        v5 = __cxa_atexit((void (*)(void *))WebCore::AttachmentEvent::~AttachmentEvent, &qword_1ECE834C8, &dword_1940B8000);
        byte_1ECE83439 = 1;
      }
      if ((byte_1ECE8343A & 1) == 0)
      {
        v5 = __cxa_atexit((void (*)(void *))WebCore::AttachmentEvent::~AttachmentEvent, &qword_1ECE834F0, &dword_1940B8000);
        byte_1ECE8343A = 1;
      }
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
      v15 = v14;
      if (qword_1ECE834C8
        && qword_1ECE834F0
        && qword_1ECE834F0 != a1
        && (v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), qword_1ECE834F8 == v16))
      {
        v17 = qword_1ECE7C0B8;
        v18 = os_log_type_enabled((os_log_t)qword_1ECE7C0B8, OS_LOG_TYPE_DEFAULT);
        if (v18)
        {
          v19 = *(_QWORD *)(v16 + 528);
          v20 = 0.0;
          if (v19)
          {
            v21 = *(_QWORD *)(v19 + 8);
            if (v21)
            {
              v22 = *(_QWORD *)(*(_QWORD *)(v21 + 280) + 88);
              if (v22)
              {
                if (*(_QWORD *)(v21 + 296) == v16)
                {
                  ++*(_DWORD *)(v22 + 24);
                  WTF::MonotonicTime::now((WTF::MonotonicTime *)v18);
                  v20 = v23 - *(double *)(v22 + 2728);
                  if (*(_DWORD *)(v22 + 24) == 1)
                    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
                  else
                    --*(_DWORD *)(v22 + 24);
                }
              }
            }
          }
          *(_DWORD *)buf = 134218240;
          v61 = v20;
          v62 = 2048;
          v63 = qword_1ECE834F8;
          _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "HTMLAttachmentElement - quick insert(A)-remove(A)-insert(B) within %fs of the first document[%p] load, stacks below:", buf, 0x16u);
          v17 = qword_1ECE7C0B8;
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v25 = qword_1ECE834C8;
          v26 = (WTF::StringImpl *)qword_1ECE834D8;
          if (qword_1ECE834D8)
            *(_DWORD *)qword_1ECE834D8 += 2;
          v58 = v26;
          WTF::String::utf8();
          if (v59)
            v27 = (char *)v59 + 16;
          else
            v27 = 0;
          v28 = (v15 - *(double *)&qword_1ECE834E0) * 1000.0;
          WebCore::compactStackTrace((WebCore *)&v57, (WTF::StackTrace *)qword_1ECE834E8);
          if (v57)
            v29 = (char *)v57 + 16;
          else
            v29 = 0;
          *(_DWORD *)buf = 134218754;
          v61 = *(double *)&v25;
          v62 = 2080;
          v63 = (uint64_t)v27;
          v64 = 2048;
          v65 = v28;
          v66 = 2080;
          v67 = v29;
          _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "HTMLAttachmentElement[%p uuid=%s] - 1st insertion %fms ago:%s", buf, 0x2Au);
          v30 = v57;
          v57 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 1)
              WTF::fastFree(v30, v24);
            else
              --*(_DWORD *)v30;
          }
          v31 = v59;
          v59 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 1)
              WTF::fastFree(v31, v24);
            else
              --*(_DWORD *)v31;
          }
          v32 = v58;
          v58 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v24);
            else
              *(_DWORD *)v32 -= 2;
          }
        }
        qword_1ECE834C8 = 0;
        v33 = (WTF *)qword_1ECE834E8;
        qword_1ECE834E8 = 0;
        if (v33)
          WTF::fastFree(v33, v24);
        v34 = qword_1ECE7C0B8;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C0B8, OS_LOG_TYPE_DEFAULT))
        {
          v36 = qword_1ECE834F0;
          v37 = (WTF::StringImpl *)qword_1ECE83500;
          if (qword_1ECE83500)
            *(_DWORD *)qword_1ECE83500 += 2;
          v58 = v37;
          WTF::String::utf8();
          if (v59)
            v38 = (char *)v59 + 16;
          else
            v38 = 0;
          v39 = (v15 - *(double *)&qword_1ECE83508) * 1000.0;
          WebCore::compactStackTrace((WebCore *)&v57, (WTF::StackTrace *)qword_1ECE83510);
          if (v57)
            v40 = (char *)v57 + 16;
          else
            v40 = 0;
          *(_DWORD *)buf = 134218754;
          v61 = *(double *)&v36;
          v62 = 2080;
          v63 = (uint64_t)v38;
          v64 = 2048;
          v65 = v39;
          v66 = 2080;
          v67 = v40;
          _os_log_impl(&dword_1940B8000, v34, OS_LOG_TYPE_DEFAULT, "HTMLAttachmentElement[%p uuid=%s] - removal %fms ago:%s", buf, 0x2Au);
          v41 = v57;
          v57 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 1)
              WTF::fastFree(v41, v35);
            else
              --*(_DWORD *)v41;
          }
          v42 = v59;
          v59 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 1)
              WTF::fastFree(v42, v35);
            else
              --*(_DWORD *)v42;
          }
          v43 = v58;
          v58 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v35);
            else
              *(_DWORD *)v43 -= 2;
          }
        }
        qword_1ECE834F0 = 0;
        v44 = (WTF *)qword_1ECE83510;
        qword_1ECE83510 = 0;
        if (v44)
          WTF::fastFree(v44, v35);
        WebCore::AttachmentEvent::capture((uint64_t)&qword_1ECE834C8, (WTF::StringImpl *)a1, v15);
        v45 = qword_1ECE7C0B8;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C0B8, OS_LOG_TYPE_DEFAULT))
        {
          v46 = qword_1ECE834C8;
          v47 = (WTF::StringImpl *)qword_1ECE834D8;
          if (qword_1ECE834D8)
            *(_DWORD *)qword_1ECE834D8 += 2;
          v58 = v47;
          WTF::String::utf8();
          if (v59)
            v48 = (char *)v59 + 16;
          else
            v48 = 0;
          WebCore::compactStackTrace((WebCore *)&v57, (WTF::StackTrace *)qword_1ECE834E8);
          if (v57)
            v49 = (char *)v57 + 16;
          else
            v49 = 0;
          *(_DWORD *)buf = 134218498;
          v61 = *(double *)&v46;
          v62 = 2080;
          v63 = (uint64_t)v48;
          v64 = 2080;
          v65 = *(double *)&v49;
          _os_log_impl(&dword_1940B8000, v45, OS_LOG_TYPE_DEFAULT, "HTMLAttachmentElement[%p uuid=%s] - 2nd insertion:%s", buf, 0x20u);
          v51 = v57;
          v57 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 1)
              WTF::fastFree(v51, v50);
            else
              --*(_DWORD *)v51;
          }
          v52 = v59;
          v59 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 1)
              WTF::fastFree(v52, v50);
            else
              --*(_DWORD *)v52;
          }
          v53 = v58;
          v58 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v50);
            else
              *(_DWORD *)v53 -= 2;
          }
        }
      }
      else
      {
        WebCore::AttachmentEvent::capture((uint64_t)&qword_1ECE834C8, (WTF::StringImpl *)a1, v14);
        qword_1ECE834F0 = 0;
        v55 = (WTF *)qword_1ECE83510;
        qword_1ECE83510 = 0;
        if (v55)
          WTF::fastFree(v55, v54);
      }
    }
    WebCore::Document::didInsertAttachmentElement(*(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8), (WebCore::HTMLAttachmentElement *)a1, v11);
  }
  return v6;
}

void WebCore::compactStackTrace(WebCore *this, WTF::StackTrace *a2)
{
  uint64_t v3;
  void *const *v4;
  char **v5;
  void *v6;
  char **v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  int v11;
  int v12;
  char **v13;
  char v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const char *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  const char *v30;
  int v31;
  char **v32;
  char v33;
  char v34;
  char *v35;
  unint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  const char *v45;
  char *__s1;
  char v47;
  const char *v48;
  unint64_t v49;
  _QWORD v50[22];

  v50[20] = *MEMORY[0x1E0C80C00];
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v50);
  v3 = *(_QWORD *)a2;
  v4 = (void *const *)((char *)a2 + 8 * *((_QWORD *)a2 + 1) + 16);
  v5 = backtrace_symbols(v4, *(_QWORD *)a2);
  if (v5)
  {
    v7 = v5;
    if (!v3)
      goto LABEL_92;
    v8 = 0;
    while (1)
    {
      WTF::StackTraceSymbolResolver::demangle((WTF::StackTraceSymbolResolver *)v4[v8], v6);
      if (v47)
      {
        v9 = __s1;
        if (__s1 || (v9 = v45) != 0)
        {
          if (strcmp(v9, "<redacted>"))
            break;
        }
      }
      v9 = v7[v8++];
      if (v9)
        goto LABEL_10;
      v11 = 1;
      v9 = "?";
LABEL_14:
      v48 = v9;
      LODWORD(v49) = v11;
      BYTE4(v49) = 1;
      v12 = WTF::StringView::startsWith();
      v13 = &off_1E33B60F8;
      if (v12 || (v14 = WTF::StringView::startsWith(), v13 = &off_1E33B6108, (v14 & 1) != 0))
      {
        v15 = v13[1];
        if (v15)
          v16 = (_DWORD)v15 - 1;
        else
          v16 = 0;
        if (v49 <= v16)
        {
          v17 = 0x100000000;
          v18 = "";
        }
        else if (v16)
        {
          v27 = v49 - v16;
          if (v49 - (unint64_t)v16 < v27)
            goto LABEL_94;
          v18 = &v9[v16];
          v17 = v27 | 0x100000000;
        }
        else
        {
          v18 = v9;
          v17 = v49;
        }
        v48 = v18;
        LODWORD(v49) = v17;
        BYTE4(v49) = BYTE4(v17);
      }
      if (!WTF::StringView::startsWith() || v49 < 0xA)
        goto LABEL_56;
      v19 = 1;
      v20 = 9;
      if (!BYTE4(v49))
      {
        do
        {
          v21 = *(unsigned __int16 *)&v48[2 * v20];
          if (v21 == 41)
          {
            if (!--v19)
              goto LABEL_40;
          }
          else if (v21 == 40)
          {
            ++v19;
          }
          ++v20;
        }
        while (v49 != v20);
        goto LABEL_56;
      }
      while (1)
      {
        v22 = v48[v20];
        if (v22 != 40)
          break;
        ++v19;
LABEL_38:
        if (v49 == ++v20)
          goto LABEL_56;
      }
      if (v22 != 41)
        goto LABEL_38;
      if (--v19)
        goto LABEL_38;
LABEL_40:
      v23 = (v20 + 1);
      if (v49 <= v23)
      {
        v24 = 0x100000000;
        v26 = "";
      }
      else
      {
        v24 = (v49 - v23);
        v25 = v49 - (unint64_t)v23;
        if (BYTE4(v49))
        {
          if (v25 >= v24)
          {
            v26 = &v48[v23];
            v24 |= 0x100000000uLL;
            goto LABEL_48;
          }
LABEL_94:
          __break(1u);
        }
        if (v25 < v24)
          goto LABEL_94;
        v26 = &v48[2 * v23];
      }
LABEL_48:
      v48 = v26;
      LODWORD(v49) = v24;
      BYTE4(v49) = BYTE4(v24);
      if (WTF::StringView::startsWith())
      {
        if (v49 < 2)
        {
          v28 = 0x100000000;
          v30 = "";
        }
        else
        {
          v29 = v49 - 1;
          v28 = v29;
          if (BYTE4(v49))
          {
            if (v29 < v29)
              goto LABEL_94;
            v30 = v48 + 1;
            v28 |= 0x100000000uLL;
          }
          else
          {
            if (v29 < v29)
              goto LABEL_94;
            v30 = v48 + 2;
          }
        }
        v48 = v30;
        LODWORD(v49) = v28;
        BYTE4(v49) = BYTE4(v28);
      }
LABEL_56:
      if ((WTF::StringView::startsWith() & 1) == 0)
      {
        v31 = WTF::StringView::startsWith();
        v32 = &off_1E33B6118;
        if (v31
          || (v33 = WTF::StringView::startsWith(), v32 = &off_1E33B6128, (v33 & 1) != 0)
          || (v34 = WTF::StringView::startsWith(), v32 = &off_1E33B6138, (v34 & 1) != 0))
        {
          v35 = v32[1];
          if (v35)
          {
            v43 = ((_DWORD)v35 - 1);
            if (v49 <= v43)
              goto LABEL_89;
            if ((_DWORD)v35 == 1)
            {
LABEL_62:
              v37 = v48;
              v36 = v49;
            }
            else
            {
              v36 = (v49 - v43);
              v44 = v49 - (unint64_t)v43;
              if (BYTE4(v49))
              {
                if (v44 < v36)
                  goto LABEL_94;
                v37 = &v48[v43];
                v36 |= 0x100000000uLL;
              }
              else
              {
                if (v44 < v36)
                  goto LABEL_94;
                v37 = &v48[2 * v43];
              }
            }
          }
          else
          {
            if ((_DWORD)v49)
              goto LABEL_62;
LABEL_89:
            v36 = 0x100000000;
            v37 = "";
          }
          v48 = v37;
          BYTE4(v49) = BYTE4(v36);
          v38 = v36;
          if ((_DWORD)v36)
          {
LABEL_64:
            v39 = 0;
            if (BYTE4(v49))
            {
              do
              {
                v41 = v48[v39];
                if (v41 == 40)
                  break;
                if (v41 == 91)
                  break;
                ++v39;
              }
              while (v38 != v39);
            }
            else
            {
              do
              {
                v40 = *(unsigned __int16 *)&v48[2 * v39];
                if (v40 == 40)
                  break;
                if (v40 == 91)
                  break;
                ++v39;
              }
              while (v38 != v39);
            }
          }
        }
        else
        {
          v38 = v49;
          if ((_DWORD)v49)
            goto LABEL_64;
        }
        (*(void (**)(_QWORD *))(v50[0] + 32))(v50);
        WTF::ASCIILiteral::dump();
        WTF::printInternal();
        (*(void (**)(_QWORD *))(v50[0] + 40))(v50);
      }
      if (v47)
      {
        v42 = __s1;
        __s1 = 0;
        if (v42)
          free(v42);
      }
      if (v8 == v3)
      {
LABEL_92:
        free(v7);
        goto LABEL_93;
      }
    }
    ++v8;
LABEL_10:
    v10 = strlen(v9);
    v11 = 1023;
    if (v10 < 0x3FF)
      v11 = v10;
    goto LABEL_14;
  }
LABEL_93:
  WTF::StringPrintStream::toCString((WTF::StringPrintStream *)v50);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v50);
}

WTF *WebCore::AttachmentEvent::capture(uint64_t a1, WTF::StringImpl *a2, double a3)
{
  uint64_t v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  void *v8;
  WTF *result;
  WTF *v10;

  v5 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 16);
  if (v6)
    *v6 += 2;
  v7 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(double *)(a1 + 24) = a3;
  WTF::StackTrace::captureStackTrace((WTF::StackTrace *)0x40);
  result = *(WTF **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  if (result)
  {
    WTF::fastFree(result, v8);
    return 0;
  }
  return result;
}

uint64_t WebCore::HTMLAttachmentElement::removedFromAncestor(WTF::StringImpl *a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  char v5;
  uint64_t result;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;

  v5 = a2;
  result = (uint64_t)WebCore::HTMLElement::removedFromAncestor((uint64_t)a1, a2, a3, a4, a5);
  if ((v5 & 1) != 0)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
    v10 = *(_QWORD *)(v9 + 528);
    if (!v10
      || (v11 = *(_QWORD *)(v10 + 8)) == 0
      || (v12 = *(_QWORD *)(*(_QWORD *)(v11 + 280) + 88)) == 0
      || *(_QWORD *)(v11 + 296) != v9
      || ((++*(_DWORD *)(v12 + 24),
           result = WTF::MonotonicTime::now((WTF::MonotonicTime *)result),
           v14 = v13 - *(double *)(v12 + 2728),
           *(_DWORD *)(v12 + 24) == 1)
        ? (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
        : --*(_DWORD *)(v12 + 24),
          v14 < 1.0))
    {
      if ((byte_1ECE83439 & 1) == 0)
      {
        result = __cxa_atexit((void (*)(void *))WebCore::AttachmentEvent::~AttachmentEvent, &qword_1ECE834C8, &dword_1940B8000);
        byte_1ECE83439 = 1;
      }
      if (qword_1ECE834C8 && (WTF::StringImpl *)qword_1ECE834C8 == a1)
      {
        if ((byte_1ECE8343A & 1) == 0)
        {
          result = __cxa_atexit((void (*)(void *))WebCore::AttachmentEvent::~AttachmentEvent, &qword_1ECE834F0, &dword_1940B8000);
          byte_1ECE8343A = 1;
        }
        WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
        WebCore::AttachmentEvent::capture((uint64_t)&qword_1ECE834F0, a1, v15);
      }
    }
    return WebCore::Document::didRemoveAttachmentElement(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8), a1, v8);
  }
  return result;
}

uint64_t WebCore::HTMLAttachmentElement::setUniqueIdentifier(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;

  result = WTF::equal(this[16], *a2, a3);
  if ((result & 1) == 0)
  {
    v7 = *a2;
    if (*a2)
      *(_DWORD *)v7 += 2;
    result = (uint64_t)this[16];
    this[16] = v7;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      else
        *(_DWORD *)result -= 2;
    }
    v8 = *(_QWORD *)this[5];
    if (v8)
      v9 = (*(_WORD *)(v8 + 28) & 0x80) == 0;
    else
      v9 = 1;
    if (!v9)
    {
      v10 = *(_QWORD *)(v8 + 200);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          *(_DWORD *)(v11 + 24) += 2;
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 480))(v11);
          v13 = result;
          if (*(_DWORD *)(v11 + 24) == 2)
          {
            v14 = *(_WORD *)(v11 + 30);
            if ((v14 & 0x400) == 0)
            {
              v15 = *(_WORD *)(v11 + 28);
              if ((v15 & 0xF000) == 0x9000)
              {
                result = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v11, v12);
              }
              else
              {
                if ((v15 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 160) + 16))(*(_QWORD *)(v11 + 160));
                  v14 = *(_WORD *)(v11 + 30);
                }
                *(_WORD *)(v11 + 30) = v14 | 0x400;
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
              }
            }
          }
          else
          {
            *(_DWORD *)(v11 + 24) -= 2;
          }
          if (v13)
          {
            result = *(_QWORD *)(v13 + 8);
            *(_QWORD *)(v13 + 8) = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v12);
              else
                *(_DWORD *)result -= 2;
            }
          }
        }
      }
    }
  }
  return result;
}

void WebCore::HTMLAttachmentElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  WebCore::RenderElement *v15;
  uint64_t v16;
  int v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD **v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD **v33;
  uint64_t v34;
  unsigned __int16 *v35;
  WTF::StringImpl *v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  _DWORD *v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  _BYTE v55[20];
  __int128 v56;
  char v57;

  v11 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v11 > 0x3B6)
  {
    if (v11 - 951 > 1)
      goto LABEL_18;
    goto LABEL_7;
  }
  if (v11 == 283)
  {
LABEL_7:
    v12 = *(_QWORD *)(a1 + 64);
    v13 = v12 & 0xFFFFFFFFFFFFLL;
    if ((v12 & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_18;
    if ((*(_BYTE *)((v12 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195BBAC48);
    }
    goto LABEL_9;
  }
  if (v11 != 789)
  {
    if (v11 != 867)
      goto LABEL_18;
    goto LABEL_7;
  }
  if (*(_BYTE *)(a1 + 112))
    goto LABEL_18;
  v20 = *(_QWORD *)(a1 + 64);
  v13 = v20 & 0xFFFFFFFFFFFFLL;
  if ((v20 & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_18;
  if ((*(_BYTE *)((v20 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195BBA8A4);
  }
LABEL_9:
  v14 = *(_DWORD *)(v13 + 20);
  if ((v14 & 8) == 0)
  {
    *(_DWORD *)(v13 + 20) = v14 | 8;
    v15 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v13, 0);
    WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v13, v15);
    if ((*(_BYTE *)(v13 + 21) & 0x80) != 0)
    {
      if ((*(_BYTE *)(v13 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195BBAC68);
      }
      v16 = *(_QWORD *)(v13 + 144);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 + 8) + 1;
        *(_DWORD *)(v16 + 8) = v17;
      }
      else
      {
        v17 = MEMORY[8];
      }
      *(_QWORD *)(v16 + 24) = *(_QWORD *)(v16 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
      if (!v17)
      {
        __break(0xC471u);
        JUMPOUT(0x195BBAC94);
      }
      *(_DWORD *)(v16 + 8) = v17 - 1;
    }
  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944)
                                                                 + 24)
                                                     + 8)
                                         + 40)
                             + 8)
                 + 3382))
  {
    LOBYTE(v56) = 0;
    v57 = 0;
    v55[0] = 0;
    v55[16] = 0;
    WebCore::RenderObject::issueRepaint(v13, &v56, 0, 0, (uint64_t)v55);
  }
LABEL_18:
  WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  v19 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v19 > 0x362)
  {
    if (v19 != 867)
    {
      if (v19 != 951)
      {
        if (v19 != 952)
          return;
LABEL_61:
        *(_BYTE *)(a1 + 280) = 1;
        return;
      }
      v35 = *(unsigned __int16 **)(a1 + 240);
      if (!v35)
        goto LABEL_61;
      WebCore::HTMLAttachmentElement::attachmentTitleForDisplay((char *)a1, &v56);
      v37 = v35[14] >> 12;
      if (v37 == 1)
        goto LABEL_56;
      if (v37 > 0xB)
        goto LABEL_57;
      if (v37 == 11)
      {
LABEL_56:
        WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)v35, (uint64_t)&v56);
      }
      else if (((1 << v37) & 0x19C) != 0)
      {
        (*(void (**)(uint64_t *__return_ptr, unsigned __int16 *, __int128 *))(*(_QWORD *)v35 + 120))(&v49, v35, &v56);
        if ((_BYTE)v51)
        {
          v44 = v50;
          v50 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v36);
            else
              *(_DWORD *)v44 -= 2;
          }
        }
        goto LABEL_58;
      }
LABEL_57:
      v49 = 0;
      v50 = 0;
      v51 = 0;
LABEL_58:
      v38 = (WTF::StringImpl *)v56;
      *(_QWORD *)&v56 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v36);
        else
          *(_DWORD *)v38 -= 2;
      }
      goto LABEL_61;
    }
    v28 = *(unsigned __int16 **)(a1 + 248);
    if (!v28)
      return;
    v29 = *(_QWORD *)(a1 + 104);
    if (v29)
    {
      v30 = *(_DWORD *)(v29 + 4);
      if ((v30 & 1) != 0)
      {
        v31 = *(_QWORD *)(v29 + 40);
        LODWORD(v32) = *(_DWORD *)(v29 + 52);
        if ((_DWORD)v32)
        {
LABEL_47:
          v32 = v32;
          v33 = (_DWORD **)(v31 + 8);
          while (1)
          {
            v34 = (uint64_t)*(v33 - 1);
            if (v34 == WebCore::HTMLNames::subtitleAttr
              || *(_QWORD *)(v34 + 24) == *(_QWORD *)(WebCore::HTMLNames::subtitleAttr + 24)
              && *(_QWORD *)(v34 + 32) == *(_QWORD *)(WebCore::HTMLNames::subtitleAttr + 32))
            {
              goto LABEL_71;
            }
            v33 += 2;
            if (!--v32)
            {
              v33 = (_DWORD **)MEMORY[0x1E0CBF2F8];
              goto LABEL_71;
            }
          }
        }
      }
      else
      {
        v31 = v29 + 32;
        LODWORD(v32) = v30 >> 5;
        if ((_DWORD)v32)
          goto LABEL_47;
      }
    }
    v33 = (_DWORD **)MEMORY[0x1E0CBF2F8];
LABEL_71:
    v41 = *v33;
    if (v41)
      *v41 += 2;
    *(_QWORD *)&v56 = v41;
    v42 = v28[14] >> 12;
    if (v42 == 1)
      goto LABEL_74;
    if (v42 > 0xB)
      goto LABEL_75;
    if (v42 == 11)
    {
LABEL_74:
      WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)v28, (uint64_t)&v56);
    }
    else if (((1 << v42) & 0x19C) != 0)
    {
      (*(void (**)(uint64_t *__return_ptr, unsigned __int16 *, __int128 *))(*(_QWORD *)v28 + 120))(&v46, v28, &v56);
      if (!(_BYTE)v48)
        goto LABEL_76;
      v45 = v47;
      v47 = 0;
      if (!v45)
        goto LABEL_76;
LABEL_100:
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v18);
      else
        *(_DWORD *)v45 -= 2;
      goto LABEL_76;
    }
LABEL_75:
    v46 = 0;
    v47 = 0;
    v48 = 0;
    goto LABEL_76;
  }
  if (v19 != 283)
  {
    if (v19 == 789)
    {
      WebCore::HTMLAttachmentElement::updateProgress((WTF::StringImpl *)a1, (const WTF::AtomString *)a4);
    }
    else if (v19 == 815)
    {
      WebCore::HTMLAttachmentElement::updateSaveButton((unsigned int *)a1, *a4 != 0);
    }
    return;
  }
  v21 = *(unsigned __int16 **)(a1 + 232);
  if (!v21)
    return;
  v22 = *(_QWORD *)(a1 + 104);
  if (v22)
  {
    v23 = *(_DWORD *)(v22 + 4);
    if ((v23 & 1) != 0)
    {
      v24 = *(_QWORD *)(v22 + 40);
      LODWORD(v25) = *(_DWORD *)(v22 + 52);
      if ((_DWORD)v25)
      {
LABEL_35:
        v25 = v25;
        v26 = (_DWORD **)(v24 + 8);
        while (1)
        {
          v27 = (uint64_t)*(v26 - 1);
          if (v27 == WebCore::HTMLNames::actionAttr
            || *(_QWORD *)(v27 + 24) == *(_QWORD *)(WebCore::HTMLNames::actionAttr + 24)
            && *(_QWORD *)(v27 + 32) == *(_QWORD *)(WebCore::HTMLNames::actionAttr + 32))
          {
            goto LABEL_64;
          }
          v26 += 2;
          if (!--v25)
          {
            v26 = (_DWORD **)MEMORY[0x1E0CBF2F8];
            goto LABEL_64;
          }
        }
      }
    }
    else
    {
      v24 = v22 + 32;
      LODWORD(v25) = v23 >> 5;
      if ((_DWORD)v25)
        goto LABEL_35;
    }
  }
  v26 = (_DWORD **)MEMORY[0x1E0CBF2F8];
LABEL_64:
  v39 = *v26;
  if (v39)
    *v39 += 2;
  *(_QWORD *)&v56 = v39;
  v40 = v21[14] >> 12;
  if (v40 == 1)
    goto LABEL_67;
  if (v40 > 0xB)
    goto LABEL_68;
  if (v40 == 11)
  {
LABEL_67:
    WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)v21, (uint64_t)&v56);
LABEL_68:
    v52 = 0;
    v53 = 0;
    v54 = 0;
    goto LABEL_76;
  }
  if (((1 << v40) & 0x19C) == 0)
    goto LABEL_68;
  (*(void (**)(uint64_t *__return_ptr, unsigned __int16 *, __int128 *))(*(_QWORD *)v21 + 120))(&v52, v21, &v56);
  if ((_BYTE)v54)
  {
    v45 = v53;
    v53 = 0;
    if (v45)
      goto LABEL_100;
  }
LABEL_76:
  v43 = (WTF::StringImpl *)v56;
  *(_QWORD *)&v56 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v18);
    else
      *(_DWORD *)v43 -= 2;
  }
}

uint64_t WebCore::HTMLAttachmentElement::attachmentTitle@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(this + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::titleAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (v8 && *(_DWORD *)(v8 + 4) || (v8 = *(_QWORD *)(this + 120)) != 0 && (v8 = *(_QWORD *)(v8 + 144)) != 0)
    *(_DWORD *)v8 += 2;
  *a2 = v8;
  return this;
}

uint64_t WebCore::HTMLAttachmentElement::attachmentType@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(this + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (_DWORD **)(v4 + 8);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 1);
    if (v7 == WebCore::HTMLNames::typeAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (v8)
    *v8 += 2;
  *a2 = v8;
  return this;
}

void WebCore::HTMLAttachmentElement::updateAttributes(WebCore::Element *this, uint64_t a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  const __CFString *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  int v44;
  WebCore::RenderElement *v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  _BYTE v52[20];
  __int128 v53;
  char v54;

  v8 = **((_QWORD **)this + 5);
  if (v8)
    v9 = (*(_WORD *)(v8 + 28) & 0x80) == 0;
  else
    v9 = 1;
  if (v9)
    goto LABEL_6;
  v10 = *(_QWORD *)(v8 + 200);
  if (!v10)
    goto LABEL_6;
  v16 = *(_QWORD *)(v10 + 8);
  if (!v16)
    goto LABEL_6;
  *(_DWORD *)(v16 + 24) += 2;
  v11 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 480))(v16);
  if (*(_DWORD *)(v16 + 24) == 2)
  {
    v50 = *(_WORD *)(v16 + 30);
    if ((v50 & 0x400) == 0)
    {
      v51 = *(_WORD *)(v16 + 28);
      if ((v51 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v16, v17);
      }
      else
      {
        if ((v51 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v16 + 160) + 16))(*(_QWORD *)(v16 + 160));
          v50 = *(_WORD *)(v16 + 30);
        }
        *(_WORD *)(v16 + 30) = v50 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 72))(v16);
      }
    }
  }
  else
  {
    *(_DWORD *)(v16 + 24) -= 2;
  }
  if (v11)
  {
    v18 = (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v11 + 16))(v11);
    if (*(_QWORD *)(*(_QWORD *)(v18 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    {
      v11 = (WTF::StringImpl *)v18;
      *(_DWORD *)(v18 + 24) += 2;
      goto LABEL_7;
    }
LABEL_6:
    v11 = 0;
  }
LABEL_7:
  if (*a4)
  {
    if (!v11)
      goto LABEL_32;
    v12 = *((_QWORD *)v11 + 13);
    if (!v12)
      goto LABEL_30;
    v13 = *(_DWORD *)(v12 + 4);
    if ((v13 & 1) != 0)
    {
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (!v15)
      {
LABEL_30:
        v19 = 0xFFFFFFFFLL;
LABEL_31:
        WebCore::Element::setAttributeInternal(v11, v19, (WebCore::TreeScope *)&WebCore::HTMLNames::altAttr, a4, 0);
LABEL_32:
        v21 = *((_QWORD *)this + 13);
        if (v21)
        {
          v22 = *(_DWORD *)(v21 + 4);
          if ((v22 & 1) == 0)
          {
            v23 = (uint64_t *)(v21 + 32);
            v24 = v22 >> 5;
            if (!v24)
              goto LABEL_44;
LABEL_37:
            v25 = 0;
            while (1)
            {
              v26 = *v23;
              if (*v23 == WebCore::HTMLNames::titleAttr
                || *(_QWORD *)(v26 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
                && *(_QWORD *)(v26 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
              {
                goto LABEL_45;
              }
              ++v25;
              v23 += 2;
              if (v24 == v25)
                goto LABEL_44;
            }
          }
          v23 = *(uint64_t **)(v21 + 40);
          v24 = *(_DWORD *)(v21 + 52);
          if (v24)
            goto LABEL_37;
        }
LABEL_44:
        v25 = 0xFFFFFFFFLL;
LABEL_45:
        WebCore::Element::setAttributeInternal(this, v25, (WebCore::TreeScope *)&WebCore::HTMLNames::titleAttr, a4, 0);
        goto LABEL_46;
      }
    }
    else
    {
      v14 = (uint64_t *)(v12 + 32);
      v15 = v13 >> 5;
      if (!v15)
        goto LABEL_30;
    }
    v19 = 0;
    while (1)
    {
      v20 = *v14;
      if (*v14 == WebCore::HTMLNames::altAttr
        || *(_QWORD *)(v20 + 24) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 24)
        && *(_QWORD *)(v20 + 32) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 32))
      {
        goto LABEL_31;
      }
      ++v19;
      v14 += 2;
      if (v15 == v19)
        goto LABEL_30;
    }
  }
  if (v11)
    WebCore::Element::removeAttribute(v11, (const WebCore::QualifiedName *)&WebCore::HTMLNames::altAttr);
  WebCore::Element::removeAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::titleAttr);
LABEL_46:
  if (!*a3)
  {
    WebCore::Element::removeAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::typeAttr);
    goto LABEL_62;
  }
  v27 = *((_QWORD *)this + 13);
  if (!v27)
    goto LABEL_60;
  v28 = *(_DWORD *)(v27 + 4);
  if ((v28 & 1) == 0)
  {
    v29 = (uint64_t *)(v27 + 32);
    v30 = v28 >> 5;
    if (!v30)
      goto LABEL_60;
LABEL_53:
    v31 = 0;
    while (1)
    {
      v32 = *v29;
      if (*v29 == WebCore::HTMLNames::typeAttr
        || *(_QWORD *)(v32 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
        && *(_QWORD *)(v32 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
      {
        goto LABEL_61;
      }
      ++v31;
      v29 += 2;
      if (v30 == v31)
        goto LABEL_60;
    }
  }
  v29 = *(uint64_t **)(v27 + 40);
  v30 = *(_DWORD *)(v27 + 52);
  if (v30)
    goto LABEL_53;
LABEL_60:
  v31 = 0xFFFFFFFFLL;
LABEL_61:
  WebCore::Element::setAttributeInternal(this, v31, (WebCore::TreeScope *)&WebCore::HTMLNames::typeAttr, a3, 0);
LABEL_62:
  if (!*(_BYTE *)(a2 + 8))
  {
    WebCore::Element::removeAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::subtitleAttr);
    goto LABEL_80;
  }
  v33 = (WTF::AtomStringImpl *)NSLocalizedFileSizeDescription();
  WTF::AtomStringImpl::add(v33, v34);
  v35 = *((_QWORD *)this + 13);
  if (!v35)
    goto LABEL_76;
  v36 = *(_DWORD *)(v35 + 4);
  if ((v36 & 1) == 0)
  {
    v37 = (uint64_t *)(v35 + 32);
    v38 = v36 >> 5;
    if (!v38)
      goto LABEL_76;
LABEL_69:
    v40 = 0;
    while (1)
    {
      v41 = *v37;
      if (*v37 == WebCore::HTMLNames::subtitleAttr
        || *(_QWORD *)(v41 + 24) == *(_QWORD *)(WebCore::HTMLNames::subtitleAttr + 24)
        && *(_QWORD *)(v41 + 32) == *(_QWORD *)(WebCore::HTMLNames::subtitleAttr + 32))
      {
        goto LABEL_77;
      }
      ++v40;
      v37 += 2;
      if (v38 == v40)
        goto LABEL_76;
    }
  }
  v37 = *(uint64_t **)(v35 + 40);
  v38 = *(_DWORD *)(v35 + 52);
  if (v38)
    goto LABEL_69;
LABEL_76:
  v40 = 0xFFFFFFFFLL;
LABEL_77:
  WebCore::Element::setAttributeInternal(this, v40, (WebCore::TreeScope *)&WebCore::HTMLNames::subtitleAttr, (WTF::StringImpl **)&v53, 0);
  v42 = (WTF::StringImpl *)v53;
  *(_QWORD *)&v53 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v39);
    else
      *(_DWORD *)v42 -= 2;
  }
LABEL_80:
  *((_BYTE *)this + 280) = 1;
  v43 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v43)
    goto LABEL_91;
  if ((*(_BYTE *)(v43 + 45) & 2) != 0)
    goto LABEL_111;
  v44 = *(_DWORD *)(v43 + 20);
  if ((v44 & 8) == 0)
  {
    *(_DWORD *)(v43 + 20) = v44 | 8;
    v45 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v43, 0);
    WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v43, v45);
    if ((*(_BYTE *)(v43 + 21) & 0x80) != 0)
    {
      if ((*(_BYTE *)(v43 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195BBB42CLL);
      }
      v46 = *(_QWORD *)(v43 + 144);
      if (v46)
      {
        v47 = *(_DWORD *)(v46 + 8) + 1;
        *(_DWORD *)(v46 + 8) = v47;
      }
      else
      {
        v47 = MEMORY[8];
      }
      *(_QWORD *)(v46 + 24) = *(_QWORD *)(v46 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
      if (v47)
      {
        *(_DWORD *)(v46 + 8) = v47 - 1;
        goto LABEL_89;
      }
LABEL_111:
      __break(0xC471u);
      JUMPOUT(0x195BBB3F4);
    }
  }
LABEL_89:
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944)
                                                                 + 24)
                                                     + 8)
                                         + 40)
                             + 8)
                 + 3382))
  {
    LOBYTE(v53) = 0;
    v54 = 0;
    v52[0] = 0;
    v52[16] = 0;
    WebCore::RenderObject::issueRepaint(v43, &v53, 0, 0, (uint64_t)v52);
  }
LABEL_91:
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      v48 = *((_WORD *)v11 + 15);
      if ((v48 & 0x400) == 0)
      {
        v49 = *((_WORD *)v11 + 14);
        if ((v49 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef(v11, v39);
        }
        else
        {
          if ((v49 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v11 + 20) + 16))(*((_QWORD *)v11 + 20));
            v48 = *((_WORD *)v11 + 15);
          }
          *((_WORD *)v11 + 15) = v48 | 0x400;
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v11 + 72))(v11);
        }
      }
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
}

unsigned int *WebCore::HTMLAttachmentElement::updateAssociatedElementWithData(unsigned int *result, WebCore *a2, uint64_t *a3)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v10;
  unsigned int *v11;
  const WTF::String *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  BOOL v20;
  WTF::StringImpl *v21;
  int v22;
  unsigned int *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  WebCore::ActiveDOMObject **v28;
  WebCore::ScriptExecutionContext *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int *v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  __int16 v49;
  __int16 v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  unsigned int *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;

  if (*(_QWORD *)(*a3 + 48))
  {
    v3 = result;
    v4 = **((_QWORD **)result + 5);
    if (v4 && (*(_WORD *)(v4 + 28) & 0x80) != 0)
    {
      v6 = *(_QWORD *)(v4 + 200);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          *(_DWORD *)(v7 + 24) += 2;
          result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 480))(v7);
          v11 = result;
          if (*(_DWORD *)(v7 + 24) == 2)
          {
            v49 = *(_WORD *)(v7 + 30);
            if ((v49 & 0x400) == 0)
            {
              v50 = *(_WORD *)(v7 + 28);
              if ((v50 & 0xF000) == 0x9000)
              {
                result = WebCore::Document::removedLastRef((WebCore::Document *)v7, v10);
              }
              else
              {
                if ((v50 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
                  v49 = *(_WORD *)(v7 + 30);
                }
                *(_WORD *)(v7 + 30) = v49 | 0x400;
                result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
              }
            }
          }
          else
          {
            *(_DWORD *)(v7 + 24) -= 2;
          }
          if (v11)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 48))(v11);
            v13 = *(WTF::StringImpl **)a2;
            if (*(_QWORD *)a2)
              *(_DWORD *)v13 += 2;
            v60 = v13;
            if (!WebCore::isDeclaredUTI(a2, v12))
            {
LABEL_18:
              if (v13 && *((_DWORD *)v13 + 1))
              {
                *(_DWORD *)v13 += 2;
                v57 = v13;
                if ((WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)1> [43]>::contains<WTF::String>((const char ***)WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WTF::String const&)::supportedImageMIMETypeSet, (uint64_t *)&v57) & 1) != 0)
                {
                  v20 = 1;
                }
                {
                  if (WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes)
                    v20 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes, (WTF::ASCIICaseInsensitiveHash *)&v57) != 0;
                  else
                    v20 = 0;
                }
                else
                {
                  v20 = 0;
                  WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes = 0;
                }
                v21 = v57;
                v57 = 0;
                if (v21)
                {
                  if (*(_DWORD *)v21 == 2)
                  {
                    WTF::StringImpl::destroy(v21, v19);
                    if (v20)
                      goto LABEL_28;
                    goto LABEL_19;
                  }
                  *(_DWORD *)v21 -= 2;
                }
                if (v20)
                  goto LABEL_28;
              }
LABEL_19:
              if (!WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [2]>::contains<WTF::String>((unsigned __int8 ***)WebCore::MIMETypeRegistry::isPDFMIMEType(WTF::String const&)::set, (uint64_t *)&v60))
              {
LABEL_65:
                v48 = v60;
                v60 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, v18);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v11 + 56))(v11);
              }
LABEL_28:
              v22 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v11 + 32))(v11);
              result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
              v23 = result;
              if (v22 == 2)
                v24 = &WebCore::HTMLNames::srcsetAttr;
              else
                v24 = &WebCore::HTMLNames::srcAttr;
              v25 = *(_QWORD *)(*((_QWORD *)v3 + 5) + 8);
              v26 = *a3;
              v27 = atomic_load((unsigned int *)v26);
              if (v27 == 1)
              {
                WebCore::FragmentedSharedBuffer::takeData((WTF *)v26, &v57);
              }
              else
              {
                v57 = 0;
                v58 = 0;
                v52 = *(_QWORD *)(v26 + 48);
                if (v52)
                {
                  if (HIDWORD(v52))
                  {
                    __break(0xC471u);
                    return result;
                  }
                  v53 = (WTF::StringImpl *)WTF::fastMalloc(*(WTF **)(v26 + 48));
                  LODWORD(v58) = v52;
                  v57 = v53;
                }
                v54 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v54 = off_1E3406E88;
                *((_QWORD *)v54 + 1) = &v57;
                v62 = v54;
                WebCore::FragmentedSharedBuffer::forEachSegment(v26, &v62);
                v55 = v62;
                v62 = 0;
                if (v55)
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v55 + 8))(v55);
              }
              v28 = (WebCore::ActiveDOMObject **)(v25 + 192);
              v29 = (WebCore::ScriptExecutionContext *)bmalloc::api::isoAllocate();
              v31 = *(_QWORD *)(WebCore::Blob::Blob((uint64_t)v29, (WebCore::ScriptExecutionContext *)(v25 + 192), (uint64_t)&v57, &v60)+ 32);
              if (v31)
              {
                v32 = *(_QWORD *)(v31 + 8);
                if (v32)
                {
                  v33 = *(unsigned __int8 *)(v32 + 178);
                  if (*(_BYTE *)(v32 + 178))
                  {
                    if (v33 == 1 || v33 == 2)
                      ++*(_DWORD *)(v32 + 216);
                  }
                  else
                  {
                    *(_DWORD *)(v32 - 264) += 2;
                  }
                  v34 = (unsigned int *)(v32 - 96);
                  v35 = (_DWORD *)((char *)v29 + 24);
                  if (*(_BYTE *)(v32 + 179))
                  {
                    (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v35 + 24))((_DWORD *)v29 + 6, *(unsigned __int8 *)(v32 + 177));
                    v35 = (_DWORD *)((char *)v29 + 24);
                    v34 = (unsigned int *)(v32 - 96);
                  }
                  if (*(_BYTE *)(v32 + 180))
                  {
                    v56 = v34;
                    (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 56))(v35);
                    v34 = v56;
                  }
                  WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed(v34, v30);
                }
              }
              WebCore::DOMURL::createPublicURL(v28, v29, &v59);
              v36 = v59;
              if (v59)
              {
                v61 = v59;
                if ((*((_BYTE *)v59 + 16) & 0x10) == 0)
                {
                  WTF::AtomStringImpl::addSlowCase();
                  v38 = v61;
                  v36 = v62;
                  v61 = 0;
                  v62 = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2)
                      WTF::StringImpl::destroy(v38, v37);
                    else
                      *(_DWORD *)v38 -= 2;
                  }
                }
              }
              v62 = v36;
              v39 = *((_QWORD *)v23 + 13);
              if (!v39)
                goto LABEL_57;
              v40 = *(_DWORD *)(v39 + 4);
              if ((v40 & 1) != 0)
              {
                v41 = *(uint64_t **)(v39 + 40);
                v42 = *(_DWORD *)(v39 + 52);
                if (!v42)
                {
LABEL_57:
                  v43 = 0xFFFFFFFFLL;
LABEL_58:
                  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v23, v43, (WebCore::TreeScope *)v24, &v62, 0);
                  v46 = v62;
                  v62 = 0;
                  if (v46)
                  {
                    if (*(_DWORD *)v46 == 2)
                      WTF::StringImpl::destroy(v46, v18);
                    else
                      *(_DWORD *)v46 -= 2;
                  }
                  if (*((_DWORD *)v29 + 4) == 1)
                    (*(void (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v29 + 8))(v29);
                  else
                    --*((_DWORD *)v29 + 4);
                  v47 = v57;
                  if (v57)
                  {
                    v57 = 0;
                    LODWORD(v58) = 0;
                    WTF::fastFree(v47, v18);
                  }
                  goto LABEL_65;
                }
              }
              else
              {
                v41 = (uint64_t *)(v39 + 32);
                v42 = v40 >> 5;
                if (!v42)
                  goto LABEL_57;
              }
              v43 = 0;
              v44 = *v24;
              while (1)
              {
                v45 = *v41;
                if (*v41 == v44
                  || *(_QWORD *)(v45 + 24) == *(_QWORD *)(v44 + 24) && *(_QWORD *)(v45 + 32) == *(_QWORD *)(v44 + 32))
                {
                  goto LABEL_58;
                }
                ++v43;
                v41 += 2;
                if (v42 == v43)
                  goto LABEL_57;
              }
            }
            WebCore::MIMETypeFromUTI(a2, (uint64_t)&v57);
            v15 = v57;
            v57 = 0;
            v16 = v60;
            v60 = v15;
            if (v16)
            {
              v17 = *(_DWORD *)v16 - 2;
              if (*(_DWORD *)v16 == 2)
              {
                WTF::StringImpl::destroy(v16, v14);
                v16 = v57;
                v57 = 0;
                if (!v16)
                  goto LABEL_17;
                v17 = *(_DWORD *)v16 - 2;
                if (*(_DWORD *)v16 == 2)
                {
                  WTF::StringImpl::destroy(v16, v51);
                  goto LABEL_17;
                }
              }
              *(_DWORD *)v16 = v17;
            }
LABEL_17:
            v13 = v60;
            goto LABEL_18;
          }
        }
      }
    }
  }
  return result;
}

void WebCore::HTMLAttachmentElement::updateThumbnailForNarrowLayout(WebCore::Element *this, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  WebCore::RenderElement *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[20];
  __int128 v11;
  char v12;

  v3 = *a2;
  if (*a2)
    ++*(_DWORD *)(v3 + 8);
  v4 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v3;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  WebCore::Element::removeAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::progressAttr);
  v5 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    if ((*(_BYTE *)(v5 + 45) & 2) == 0)
    {
      v6 = *(_DWORD *)(v5 + 20);
      if ((v6 & 8) != 0)
        goto LABEL_15;
      *(_DWORD *)(v5 + 20) = v6 | 8;
      v7 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v5, 0);
      WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v5, v7);
      if ((*(_BYTE *)(v5 + 21) & 0x80) == 0)
        goto LABEL_15;
      if ((*(_BYTE *)(v5 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195BBBB50);
      }
      v8 = *(_QWORD *)(v5 + 144);
      if (v8)
      {
        v9 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v9;
      }
      else
      {
        v9 = MEMORY[8];
      }
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(v8 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
      if (v9)
      {
        *(_DWORD *)(v8 + 8) = v9 - 1;
LABEL_15:
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40)
                                                                                               + 8)
                                                                                   + 1944)
                                                                       + 24)
                                                           + 8)
                                               + 40)
                                   + 8)
                       + 3382))
        {
          LOBYTE(v11) = 0;
          v12 = 0;
          v10[0] = 0;
          v10[16] = 0;
          WebCore::RenderObject::issueRepaint(v5, &v11, 0, 0, (uint64_t)v10);
        }
        return;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x195BBBB30);
  }
}

WTF *WebCore::HTMLAttachmentElement::updateThumbnailForWideLayout(WebCore::HTMLAttachmentElement *this, _DWORD *a2)
{
  WTF *v4;
  uint64_t v5;

  v4 = (WTF *)*((_QWORD *)this + 20);
  if (v4)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)this + 20) = v5;
  LODWORD(v5) = a2[2];
  a2[2] = 0;
  *((_DWORD *)this + 42) = v5;
  LODWORD(v5) = a2[3];
  a2[3] = 0;
  *((_DWORD *)this + 43) = v5;
  return WebCore::HTMLAttachmentElement::updateImage(this);
}

uint64_t WebCore::HTMLAttachmentElement::updateIconForNarrowLayout(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  WebCore *v6;
  uint64_t v7;
  int v8;
  WebCore::RenderElement *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::Event *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t result;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::Event *v24;
  uint64_t v25;
  _DWORD *v26;
  _BYTE v27[20];
  __int128 v28;
  char v29;

  v4 = *a2;
  if (*a2)
  {
    ++*(_DWORD *)(v4 + 8);
    v6 = *(WebCore **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v4;
    if (v6)
    {
      if (*((_DWORD *)v6 + 2) == 1)
        v6 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v6 + 8))(v6);
      else
        --*((_DWORD *)v6 + 2);
    }
    *(_QWORD *)(a1 + 152) = *a3;
    v7 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v7)
    {
LABEL_16:
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(v6);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      v15 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v15);
      *(_DWORD *)(v15 + 16) = 1;
      *(_QWORD *)v15 = off_1E33A4B48;
      *(_QWORD *)(v15 + 8) = 0;
      *(_DWORD *)(v15 + 20) = *(_DWORD *)(v15 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v14 + 1104) != 0);
      v18 = *(_DWORD **)(v14 + 1104);
      if (v18)
        *v18 += 2;
      *(_QWORD *)(v15 + 24) = v18;
      *(_QWORD *)(v15 + 32) = 0;
      *(_QWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = v17;
      *(_QWORD *)(v15 + 64) = 0;
      result = WebCore::EventDispatcher::dispatchEvent((WebCore::EventNames **)a1, (WebCore::Node *)v15, v16);
      v20 = *(_DWORD *)(v15 + 16) - 1;
      if (*(_DWORD *)(v15 + 16) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      goto LABEL_33;
    }
    if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      v8 = *(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x14);
      if ((v8 & 8) != 0
        || (*(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x14) = v8 | 8,
            v9 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v7, 0),
            WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v7, v9),
            (*(_BYTE *)(v7 + 21) & 0x80) == 0))
      {
LABEL_14:
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40)
                                                                                               + 8)
                                                                                   + 1944)
                                                                       + 24)
                                                           + 8)
                                               + 40)
                                   + 8)
                       + 3382))
        {
          LOBYTE(v28) = 0;
          v29 = 0;
          v27[0] = 0;
          v27[16] = 0;
          v6 = (WebCore *)WebCore::RenderObject::issueRepaint(v7, &v28, 0, 0, (uint64_t)v27);
        }
        goto LABEL_16;
      }
      if ((*(_BYTE *)(v7 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195BBBF18);
      }
      v10 = *(_QWORD *)(v7 + 144);
      if (v10)
      {
        v11 = *(_DWORD *)(v10 + 8) + 1;
        *(_DWORD *)(v10 + 8) = v11;
      }
      else
      {
        v11 = MEMORY[8];
      }
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(v10 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
      if (v11)
      {
        *(_DWORD *)(v10 + 8) = v11 - 1;
        goto LABEL_14;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x195BBBEE8);
  }
  v21 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v21 || (v22 = *(_QWORD *)(v21 + 96)) == 0)
    v22 = WebCore::threadGlobalDataSlow((WebCore *)a1);
  v23 = *(_QWORD *)(v22 + 40);
  if (!v23)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v22);
    v23 = *(_QWORD *)(v22 + 40);
  }
  v15 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v15);
  *(_DWORD *)(v15 + 16) = 1;
  *(_QWORD *)v15 = off_1E33A4B48;
  *(_QWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 20) = *(_DWORD *)(v15 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v23 + 1152) != 0);
  v26 = *(_DWORD **)(v23 + 1152);
  if (v26)
    *v26 += 2;
  *(_QWORD *)(v15 + 24) = v26;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = v25;
  *(_QWORD *)(v15 + 64) = 0;
  result = WebCore::EventDispatcher::dispatchEvent((WebCore::EventNames **)a1, (WebCore::Node *)v15, v24);
  v20 = *(_DWORD *)(v15 + 16) - 1;
  if (*(_DWORD *)(v15 + 16) != 1)
  {
LABEL_33:
    *(_DWORD *)(v15 + 16) = v20;
    return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
}

WTF *WebCore::HTMLAttachmentElement::updateIconForWideLayout(WebCore::HTMLAttachmentElement *this, _DWORD *a2)
{
  WTF *v4;
  uint64_t v5;
  WTF *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::Event *v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL4 v14;
  _DWORD *v15;

  if (a2[3])
  {
    v4 = (WTF *)*((_QWORD *)this + 22);
    if (v4)
    {
      *((_QWORD *)this + 22) = 0;
      *((_DWORD *)this + 46) = 0;
      WTF::fastFree(v4, a2);
    }
    v5 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)this + 22) = v5;
    LODWORD(v5) = a2[2];
    a2[2] = 0;
    *((_DWORD *)this + 46) = v5;
    LODWORD(v5) = a2[3];
    a2[3] = 0;
    *((_DWORD *)this + 47) = v5;
    return WebCore::HTMLAttachmentElement::updateImage(this);
  }
  else
  {
    v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
      v8 = WebCore::threadGlobalDataSlow(this);
    v9 = *(_QWORD *)(v8 + 40);
    if (!v9)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
      v9 = *(_QWORD *)(v8 + 40);
    }
    v10 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
    *(_QWORD *)v10 = off_1E33A4B48;
    *(_QWORD *)(v10 + 8) = 0;
    v13 = *(_DWORD *)(v10 + 20) & 0xFFC00000 | 0x1E8200;
    v14 = *(_QWORD *)(v9 + 1152) != 0;
    *(_DWORD *)(v10 + 16) = 1;
    *(_DWORD *)(v10 + 20) = v13 | v14;
    v15 = *(_DWORD **)(v9 + 1152);
    if (v15)
      *v15 += 2;
    *(_QWORD *)(v10 + 24) = v15;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 48) = 0;
    *(_QWORD *)(v10 + 56) = v12;
    *(_QWORD *)(v10 + 64) = 0;
    result = (WTF *)WebCore::EventDispatcher::dispatchEvent((WebCore::EventNames **)this, (WebCore::Node *)v10, v11);
    if (*(_DWORD *)(v10 + 16) == 1)
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    else
      --*(_DWORD *)(v10 + 16);
  }
  return result;
}

uint64_t WebCore::HTMLAttachmentElement::requestWideLayoutIconIfNeeded(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Event *v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL4 v13;
  _DWORD *v14;
  uint64_t v15;
  int32x2_t v16;

  if (*(_BYTE *)(this + 280))
  {
    v1 = this;
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 8) + 528);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 24);
        if (v4)
        {
          v5 = *(_QWORD *)(v4 + 8);
          if (v5)
          {
            if (*(_QWORD *)(v5 + 1768))
            {
              *(_BYTE *)(this + 280) = 0;
              if (*(_QWORD *)(this + 192))
              {
                v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
                  v7 = WebCore::threadGlobalDataSlow((WebCore *)this);
                v8 = *(_QWORD *)(v7 + 40);
                if (!v8)
                {
                  WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
                  v8 = *(_QWORD *)(v7 + 40);
                }
                v9 = bmalloc::api::isoAllocate();
                WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
                *(_QWORD *)v9 = off_1E33A4B48;
                *(_QWORD *)(v9 + 8) = 0;
                v12 = *(_DWORD *)(v9 + 20) & 0xFFC00000 | 0x1E8200;
                v13 = *(_QWORD *)(v8 + 248) != 0;
                *(_DWORD *)(v9 + 16) = 1;
                *(_DWORD *)(v9 + 20) = v12 | v13;
                v14 = *(_DWORD **)(v8 + 248);
                if (v14)
                  *v14 += 2;
                *(_QWORD *)(v9 + 24) = v14;
                *(_QWORD *)(v9 + 32) = 0;
                *(_QWORD *)(v9 + 40) = 0;
                *(_QWORD *)(v9 + 48) = 0;
                *(_QWORD *)(v9 + 56) = v11;
                *(_QWORD *)(v9 + 64) = 0;
                WebCore::EventDispatcher::dispatchEvent((WebCore::EventNames **)v1, (WebCore::Node *)v9, v10);
                if (*(_DWORD *)(v9 + 16) == 1)
                  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
                else
                  --*(_DWORD *)(v9 + 16);
                v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 1768);
                v16 = vdup_n_s32(0x42900000u);
                return (*(uint64_t (**)(uint64_t, uint64_t, int32x2_t *))(*(_QWORD *)v15 + 16))(v15, v1 + 128, &v16);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::HTMLAttachmentElement::requestIconIfNeededWithSize(uint64_t this, const WebCore::FloatSize *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL4 v14;
  _DWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  if (*(_BYTE *)(this + 280))
  {
    v2 = this;
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 8) + 528);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 24);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 8);
          if (v6)
          {
            if (*(_QWORD *)(v6 + 1768))
            {
              *(_BYTE *)(this + 280) = 0;
              v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
                v9 = WebCore::threadGlobalDataSlow((WebCore *)this);
              v10 = *(_QWORD *)(v9 + 40);
              if (!v10)
              {
                WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
                v10 = *(_QWORD *)(v9 + 40);
              }
              v11 = bmalloc::api::isoAllocate();
              WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
              *(_QWORD *)v11 = off_1E33A4B48;
              *(_QWORD *)(v11 + 8) = 0;
              v13 = *(_DWORD *)(v11 + 20) & 0xFFC00000 | 0x1E8200;
              v14 = *(_QWORD *)(v10 + 248) != 0;
              *(_DWORD *)(v11 + 16) = 1;
              *(_DWORD *)(v11 + 20) = v13 | v14;
              v15 = *(_DWORD **)(v10 + 248);
              if (v15)
                *v15 += 2;
              *(_QWORD *)(v11 + 24) = v15;
              *(_QWORD *)(v11 + 32) = 0;
              *(_QWORD *)(v11 + 40) = 0;
              *(_QWORD *)(v11 + 48) = 0;
              *(_QWORD *)(v11 + 56) = v12;
              *(_QWORD *)(v11 + 64) = 0;
              *(_DWORD *)(v2 + 24) += 2;
              v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v16 = &off_1E33A6578;
              v16[1] = v2;
              v16[2] = v11;
              v18 = v16;
              WebCore::Node::queueTaskKeepingThisNodeAlive(v2, (WTF::StringImpl *)0x19, (uint64_t *)&v18);
              if (v18)
                (*(void (**)(_QWORD *))(*v18 + 8))(v18);
              v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8)
                                                                              + 528)
                                                                  + 8)
                                                      + 24)
                                          + 8)
                              + 1768);
              return (*(uint64_t (**)(uint64_t, uint64_t, const WebCore::FloatSize *))(*(_QWORD *)v17 + 16))(v17, v2 + 128, a2);
            }
          }
        }
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::HTMLAudioElement::createForLegacyFactoryFunction@<X0>(WebCore::HTMLAudioElement *this@<X0>, WTF::StringImpl **a2@<X1>, WebCore::HTMLMediaElement **a3@<X8>)
{
  WebCore::HTMLMediaElement *v7;
  WebCore::HTMLMediaElement *v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;

  v7 = (WebCore::HTMLMediaElement *)bmalloc::api::isoAllocate();
  v8 = WebCore::HTMLMediaElement::HTMLMediaElement(v7, (const WebCore::QualifiedName *)&WebCore::HTMLNames::audioTag, this, 0);
  *(_QWORD *)v8 = off_1E33B6158;
  *((_QWORD *)v8 + 14) = &unk_1E33B6C10;
  v10 = (char *)v8 + 112;
  *((_QWORD *)v7 + 17) = &unk_1E33B6C68;
  *((_QWORD *)v7 + 18) = &unk_1E33B6DA0;
  *((_QWORD *)v7 + 20) = &unk_1E33B6EC8;
  *((_QWORD *)v7 + 22) = &unk_1E33B6EF0;
  *((_QWORD *)v7 + 24) = &off_1E33B6158[523];
  *((_QWORD *)v7 + 26) = &off_1E33B6158[530];
  *((_QWORD *)v7 + 28) = &off_1E33B6158[535];
  *((_QWORD *)v7 + 30) = &off_1E33B6158[545];
  *((_QWORD *)v7 + 32) = &off_1E33B6158[559];
  *((_QWORD *)v7 + 34) = &off_1E33B6158[569];
  *((_QWORD *)v7 + 36) = &off_1E33B6158[575];
  *a3 = v7;
  v11 = *((_QWORD *)v7 + 15);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v12 + 178);
      if (*(_BYTE *)(v12 + 178))
      {
        if (v13 == 1 || v13 == 2)
          ++*(_DWORD *)(v12 + 216);
      }
      else
      {
        *(_DWORD *)(v12 - 264) += 2;
      }
      if (*(_BYTE *)(v12 + 179))
      {
        v27 = v10;
        WebCore::HTMLMediaElement::suspend(v7, (void *)*(unsigned __int8 *)(v12 + 177));
        v10 = v27;
      }
      if (*(_BYTE *)(v12 + 180))
        (*(void (**)(char *))(*(_QWORD *)v10 + 56))(v10);
      WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed((unsigned int *)(v12 - 96), v9);
    }
  }
  v14 = *((_QWORD *)v7 + 13);
  if (!v14)
    goto LABEL_22;
  v15 = *(_DWORD *)(v14 + 4);
  if ((v15 & 1) != 0)
  {
    v16 = *(uint64_t **)(v14 + 40);
    v17 = *(_DWORD *)(v14 + 52);
    if (!v17)
    {
LABEL_22:
      v18 = 0xFFFFFFFFLL;
      goto LABEL_23;
    }
  }
  else
  {
    v16 = (uint64_t *)(v14 + 32);
    v17 = v15 >> 5;
    if (!v17)
      goto LABEL_22;
  }
  v18 = 0;
  while (1)
  {
    v19 = *v16;
    if (*v16 == WebCore::HTMLNames::preloadAttr
      || *(_QWORD *)(v19 + 24) == *(_QWORD *)(WebCore::HTMLNames::preloadAttr + 24)
      && *(_QWORD *)(v19 + 32) == *(_QWORD *)(WebCore::HTMLNames::preloadAttr + 32))
    {
      break;
    }
    ++v18;
    v16 += 2;
    if (v17 == v18)
      goto LABEL_22;
  }
LABEL_23:
  WebCore::Element::setAttributeInternal(v7, v18, (WebCore::TreeScope *)&WebCore::HTMLNames::preloadAttr, (WTF::StringImpl **)&WebCore::autoAtomData, 0);
  v20 = *((_QWORD *)v7 + 13);
  if (!v20)
    goto LABEL_35;
  v21 = *(_DWORD *)(v20 + 4);
  if ((v21 & 1) != 0)
  {
    v22 = *(uint64_t **)(v20 + 40);
    v23 = *(_DWORD *)(v20 + 52);
    if (v23)
      goto LABEL_28;
LABEL_35:
    v24 = 0xFFFFFFFFLL;
    return WebCore::Element::setAttributeInternal(v7, v24, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, a2, 0);
  }
  v22 = (uint64_t *)(v20 + 32);
  v23 = v21 >> 5;
  if (!v23)
    goto LABEL_35;
LABEL_28:
  v24 = 0;
  while (1)
  {
    v25 = *v22;
    if (*v22 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v25 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v25 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(v7, v24, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, a2, 0);
    }
    ++v24;
    v22 += 2;
    if (v23 == v24)
      goto LABEL_35;
  }
}

uint64_t WebCore::HTMLBDIElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_DWORD *)(result + 24) = 2;
  *(_WORD *)(result + 28) = 4124;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33B4738;
  *(_WORD *)(result + 30) = 4;
  *(_BYTE *)(a2 + 3446) = 1;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLBRElement::create@<X0>(WebCore::HTMLBRElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = (char *)this + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v6 = WebCore::HTMLNames::brTag;
  if (WebCore::HTMLNames::brTag)
    ++*(_DWORD *)WebCore::HTMLNames::brTag;
  *(_QWORD *)(result + 96) = v6;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33B4C28;
  *a2 = result;
  return result;
}

uint64_t WebCore::HTMLBRElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33B4C28;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLBRElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::clearAttr)
    return 1;
  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 > 0x1F8)
  {
    if (v2 == 949 || v2 == 505 || v2 == 947)
      return result;
    return 0;
  }
  v4 = v2 - 411 > 0x20 || ((1 << (v2 + 101)) & 0x100200001) == 0;
  if (v4 && v2 != 286)
    return 0;
  return result;
}

WTF::StringImpl *WebCore::HTMLBRElement::collectPresentationalHintsForAttribute(WTF::StringImpl *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  int *v9;

  if (*(_QWORD *)a2 != WebCore::HTMLNames::clearAttr)
    return WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
  v4 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v5 = *(_DWORD *)(v4 + 4);
    if (v5)
    {
      if (v5 != 3)
        return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 84, (uint64_t)a3);
      v6 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v6 & 0xDF) != 0x41 || (*(_BYTE *)(v6 + 1) & 0xDF) != 0x4C)
          return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 84, (uint64_t)a3);
        v7 = *(unsigned __int8 *)(v6 + 2);
      }
      else
      {
        if ((*(_WORD *)v6 & 0xFFDF) != 0x41 || (*(_WORD *)(v6 + 2) & 0xFFDF) != 0x4C)
          return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 84, (uint64_t)a3);
        v7 = *(unsigned __int16 *)(v6 + 4);
      }
      if ((v7 & 0xFFFFFFDF) != 0x4C)
        return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 84, (uint64_t)a3);
      WebCore::staticCSSValuePool[4900] += 2;
      v9 = &WebCore::staticCSSValuePool[4900];
      WebCore::MutableStyleProperties::setProperty(a4, 84, &v9, 0);
      this = (WTF::StringImpl *)v9;
      v9 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)this, v8);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  return this;
}

void WebCore::HTMLBRElement::createElementRenderer(WebCore::Document *a1@<X0>, WebCore::Style *a2@<X1>, uint64_t *a3@<X8>)
{
  WebCore::RenderElement *v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  const WebCore::Element *v10;

  v6 = *(WebCore::RenderElement **)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 80);
  if (v6 && WebCore::RenderElement::isContentDataSupported(v6, a2))
  {
    WebCore::RenderElement::createFor(a1, a2, 0, v10, a3);
  }
  else
  {
    v7 = bmalloc::api::isoAllocate();
    if (*(_QWORD *)(*((_QWORD *)a1 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::wbrTag + 24))
      v8 = 258;
    else
      v8 = 2;
    v9 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v7, 17, (uint64_t)a1, a2, 8, v8);
    *(_QWORD *)v9 = off_1E34299B8;
    *(_BYTE *)(v9 + 152) = 0;
    *(_BYTE *)(v9 + 156) = 0;
    *a3 = v9;
  }
}

uint64_t WebCore::HTMLBaseElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33B5B38;
  *a3 = result;
  return result;
}

void WebCore::HTMLBaseElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  if (*(_QWORD *)a2 == WebCore::HTMLNames::hrefAttr || *(_QWORD *)a2 == WebCore::HTMLNames::targetAttr)
  {
    if ((*(_BYTE *)(a1 + 22) & 8) != 0)
      WebCore::Document::processBaseElement(*(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8));
  }
  else
  {
    WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t WebCore::HTMLBaseElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  char v3;

  v3 = a2;
  WebCore::HTMLElement::insertedIntoAncestor(a1, a2, a3);
  if ((v3 & 1) != 0)
    WebCore::Document::processBaseElement(*(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8));
  return 0;
}

uint64_t *WebCore::HTMLBaseElement::removedFromAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  char v5;
  uint64_t *result;

  v5 = a2;
  result = WebCore::HTMLElement::removedFromAncestor(a1, a2, a3, a4, a5);
  if ((v5 & 1) != 0)
    return (uint64_t *)WebCore::Document::processBaseElement(*(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8));
  return result;
}

BOOL WebCore::HTMLBaseElement::isURLAttribute(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24);
}

uint64_t WebCore::HTMLBaseElement::target@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(this + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (_DWORD **)(v4 + 8);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 1);
    if (v7 == WebCore::HTMLNames::targetAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::targetAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::targetAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (v8)
    *v8 += 2;
  *a2 = v8;
  return this;
}

WTF::StringImpl *WebCore::HTMLBaseElement::href@<X0>(WebCore::HTMLBaseElement *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::Document *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  char v18;
  WTF::StringImpl *v19;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (WTF::StringImpl **)(v5 + 8);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 1);
    if (v8 == WebCore::HTMLNames::hrefAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (v9 || (v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8]) != 0)
    *(_DWORD *)v9 += 2;
  v19 = v9;
  v10 = *(WebCore::Document **)(*((_QWORD *)this + 5) + 8);
  WebCore::Document::fallbackBaseURL(v10);
  WebCore::Document::completeURL(v10, &v19, (uint64_t)&v16, 0, (WTF::URL *)&v17);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  if ((v18 & 1) != 0)
  {
    v13 = v17;
    if (!v17)
    {
      *a2 = 0;
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  v13 = v19;
  if (v19)
LABEL_22:
    *(_DWORD *)v13 += 2;
  v14 = v17;
  *a2 = v13;
  v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
LABEL_26:
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLBaseElement::setHref(WebCore::HTMLBaseElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::hrefAttr, a2, 0);
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::hrefAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::hrefAttr, a2, 0);
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
}

uint64_t WebCore::HTMLBodyElement::create@<X0>(WebCore::HTMLBodyElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = (char *)this + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v6 = WebCore::HTMLNames::bodyTag;
  if (WebCore::HTMLNames::bodyTag)
    ++*(_DWORD *)WebCore::HTMLNames::bodyTag;
  *(_QWORD *)(result + 96) = v6;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33B5118;
  *a2 = result;
  return result;
}

uint64_t WebCore::HTMLBodyElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33B5118;
  *a3 = result;
  return result;
}

int *WebCore::HTMLBodyElement::collectPresentationalHintsForAttribute(WebCore::HTMLBodyElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  unsigned int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unint64_t v14;
  int *result;
  double v16;
  int v17;
  WebCore::HTMLBodyElement *v18;
  WebCore::MutableStyleProperties *v19;
  int v20;
  uint64_t v21;
  unsigned __int16 *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  char v33;
  WTF::StringImpl *v34;
  _DWORD *v35;
  WebCore::MutableStyleProperties *v36;
  int v37;
  __int128 v38;
  __int128 v39;
  WTF::StringImpl *v40;
  __int128 v41;
  __int128 v42;
  int *v43;
  double v44;
  _DWORD *v45;
  char v46;

  v7 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v7 <= 0x231)
  {
    if (v7 == 367)
    {
      WTF::String::trim();
      result = v43;
      if (!v43)
        return result;
      if (v43[1])
      {
        WebCore::Document::completeURL(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), &v43, *(_QWORD *)(*((_QWORD *)this + 5) + 8) + 848, 0, (WTF::URL *)&v40);
        v29 = *(_DWORD **)(*((_QWORD *)this + 12) + 24);
        if (v29)
          *v29 += 2;
        v30 = v40;
        if (v40)
          *(_DWORD *)v40 += 2;
        v40 = 0;
        v39 = v41;
        LODWORD(v41) = v41 & 0xFFFFFFFE;
        v38 = v42;
        v32 = WTF::fastCompactMalloc((WTF *)0x78);
        *(_DWORD *)v32 = 2;
        v33 = *(_BYTE *)(v32 + 6);
        *(_WORD *)(v32 + 4) = 2048;
        *(_BYTE *)(v32 + 6) = v33 & 0xFC;
        *(_QWORD *)(v32 + 8) = v30;
        *(_QWORD *)(v32 + 16) = v30;
        *(_OWORD *)(v32 + 24) = v39;
        *(_OWORD *)(v32 + 40) = v38;
        *(_BYTE *)(v32 + 56) = 0;
        *(_BYTE *)(v32 + 64) = 0;
        *(_QWORD *)(v32 + 72) = v29;
        *(_BYTE *)(v32 + 80) = 0;
        *(_QWORD *)(v32 + 88) = 0;
        *(_BYTE *)(v32 + 96) = 0;
        *(_QWORD *)(v32 + 104) = 0;
        *(_BYTE *)(v32 + 112) = 0;
        v34 = v40;
        v40 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v31);
          else
            *(_DWORD *)v34 -= 2;
        }
        LOWORD(v44) = 62;
        v45 = (_DWORD *)v32;
        WebCore::MutableStyleProperties::setProperty(a4, (unsigned __int16 *)&v44, 0);
        v35 = v45;
        v45 = 0;
        if (v35)
        {
          if (*v35 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, v28);
          else
            *v35 -= 2;
        }
        result = v43;
        v43 = 0;
        if (!result)
          return result;
      }
      else
      {
        v43 = 0;
      }
      if (*result == 2)
        return (int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v28);
      *result -= 2;
      return result;
    }
    if (v7 != 373)
    {
      if (v7 == 545)
        goto LABEL_9;
      return (int *)WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
    }
    v36 = a4;
    v37 = 61;
    return (int *)WebCore::HTMLElement::addHTMLColorToStyle((uint64_t)this, v36, v37, (uint64_t *)a3);
  }
  if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) > 0x36Eu)
  {
    if (v7 != 879)
    {
      if (v7 == 885)
        goto LABEL_25;
      return (int *)WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
    }
    v36 = a4;
    v37 = 5;
    return (int *)WebCore::HTMLElement::addHTMLColorToStyle((uint64_t)this, v36, v37, (uint64_t *)a3);
  }
  if (v7 != 562)
  {
    if (v7 != 563)
      return (int *)WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
LABEL_9:
    v8 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v9 = *(unsigned __int16 **)(v8 + 8);
      v10 = *(unsigned int *)(v8 + 4) | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v9 = 0;
      v10 = 0x100000000;
    }
    WebCore::parseHTMLDimensionInternal((uint64_t)&v44, v9, v10, 0);
    if (v46)
    {
      if ((_BYTE)v45)
        v11 = 6;
      else
        v11 = 3;
      WebCore::StyledElement::addPropertyToPresentationalHintStyle(v44, (uint64_t)this, a4, 406, v11);
    }
    v12 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v13 = *(unsigned __int16 **)(v12 + 8);
      v14 = *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v13 = 0;
      v14 = 0x100000000;
    }
    result = (int *)WebCore::parseHTMLDimensionInternal((uint64_t)&v44, v13, v14, 0);
    if (v46)
    {
      v16 = v44;
      if ((_BYTE)v45)
        v17 = 6;
      else
        v17 = 3;
      v18 = this;
      v19 = a4;
      v20 = 405;
      return WebCore::StyledElement::addPropertyToPresentationalHintStyle(v16, (uint64_t)v18, v19, v20, v17);
    }
    return result;
  }
LABEL_25:
  v21 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v22 = *(unsigned __int16 **)(v21 + 8);
    v23 = *(unsigned int *)(v21 + 4) | ((unint64_t)((*(_DWORD *)(v21 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v22 = 0;
    v23 = 0x100000000;
  }
  WebCore::parseHTMLDimensionInternal((uint64_t)&v44, v22, v23, 0);
  if (v46)
  {
    if ((_BYTE)v45)
      v24 = 6;
    else
      v24 = 3;
    WebCore::StyledElement::addPropertyToPresentationalHintStyle(v44, (uint64_t)this, a4, 402, v24);
  }
  v25 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v26 = *(unsigned __int16 **)(v25 + 8);
    v27 = *(unsigned int *)(v25 + 4) | ((unint64_t)((*(_DWORD *)(v25 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v26 = 0;
    v27 = 0x100000000;
  }
  result = (int *)WebCore::parseHTMLDimensionInternal((uint64_t)&v44, v26, v27, 0);
  if (v46)
  {
    v16 = v44;
    if ((_BYTE)v45)
      v17 = 6;
    else
      v17 = 3;
    v18 = this;
    v19 = a4;
    v20 = 407;
    return WebCore::StyledElement::addPropertyToPresentationalHintStyle(v16, (uint64_t)v18, v19, v20, v17);
  }
  return result;
}

uint64_t WebCore::HTMLBodyElement::eventNameForWindowEventHandlerAttribute(WebCore::HTMLBodyElement *this, const WebCore::QualifiedName *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WebCore::HTMLBodyElement *v5;
  WTF::StringImpl **v6;

  {
    v5 = this;
    WebCore::HTMLBodyElement::eventNameForWindowEventHandlerAttribute(WebCore::QualifiedName const&)::$_0::operator()(&v6);
    v3 = v6;
    v6 = 0;
    WebCore::HTMLBodyElement::eventNameForWindowEventHandlerAttribute(WebCore::QualifiedName const&)::map = (uint64_t)v3;
    WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::~HashMap(&v6, v4);
    this = v5;
  }
  return WebCore::HTMLElement::eventNameForEventHandlerAttribute((uint64_t)this, (WTF::StringImpl *)&WebCore::HTMLBodyElement::eventNameForWindowEventHandlerAttribute(WebCore::QualifiedName const&)::map);
}

BOOL WebCore::HTMLBodyElement::isURLAttribute(uint64_t a1, _QWORD *a2)
{
  return *a2 == WebCore::HTMLNames::backgroundAttr;
}

BOOL WebCore::HTMLBodyElement::supportsFocus(WebCore::HTMLBodyElement *this)
{
  uint64_t v2;
  uint64_t v4;

  v2 = 1;
  if (!WebCore::Node::computeEditability((uint64_t)this, 0, 1)
    && ((*((_QWORD *)this + 9) >> 58) & 3) - 1 >= 3)
  {
    v2 = 0;
    if (WebCore::Node::computeEditability((uint64_t)this, 0, 1))
    {
      v4 = *((_QWORD *)this + 4);
      return v4 && WebCore::Node::computeEditability(v4, 0, 1) == 0;
    }
  }
  return v2;
}

WTF::StringImpl *WebCore::HTMLBodyElement::addSubresourceAttributeURLs(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  WTF::StringImpl *result;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13[5];
  _BYTE v14[24];

  WebCore::StyledElement::addSubresourceAttributeURLs(a1, (uint64_t)a2);
  v4 = a1[13];
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  v8 = (_QWORD *)(v6 + 8);
  while (1)
  {
    v9 = *(v8 - 1);
    if (v9 == WebCore::HTMLNames::backgroundAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::backgroundAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::backgroundAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v7)
    {
      v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  result = WebCore::Document::completeURL(*(WebCore::Document **)(a1[5] + 8), v8, *(_QWORD *)(a1[5] + 8) + 848, 0, (WTF::URL *)v13);
  if (v13[0])
  {
    WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::add(a2, (uint64_t)v13, v11, (uint64_t)v14);
    result = v13[0];
    v13[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebCore::HTMLAreaElement::~HTMLAreaElement(WebCore::HTMLAreaElement *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  uint64_t v5;
  char v6;

  v3 = (WTF *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v4)
  {
    v5 = v4[16];
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v5])(&v6, v4 + 2);
    v4[16] = -1;
    WTF::fastFree((WTF *)v4, a2);
  }
  WebCore::HTMLAnchorElement::~HTMLAnchorElement(this, (WTF::StringImpl *)a2);
}

{
  WTF *v3;
  unsigned int *v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;
  char v8;

  v3 = (WTF *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v4)
  {
    v5 = v4[16];
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v5])(&v8, v4 + 2);
    v4[16] = -1;
    WTF::fastFree((WTF *)v4, a2);
  }
  WebCore::HTMLAnchorElement::~HTMLAnchorElement(this, (WTF::StringImpl *)a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

void `non-virtual thunk to'WebCore::HTMLAreaElement::~HTMLAreaElement(WebCore::HTMLAreaElement *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  uint64_t v5;
  char v6;

  v3 = (WTF *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    v5 = v4[16];
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v5])(&v6, v4 + 2);
    v4[16] = -1;
    WTF::fastFree((WTF *)v4, a2);
  }
  WebCore::HTMLAnchorElement::~HTMLAnchorElement((WebCore::HTMLAreaElement *)((char *)this - 112), (WTF::StringImpl *)a2);
}

{
  WTF *v3;
  unsigned int *v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;
  char v8;

  v3 = (WTF *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    v5 = v4[16];
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v5])(&v8, v4 + 2);
    v4[16] = -1;
    WTF::fastFree((WTF *)v4, a2);
  }
  WebCore::HTMLAnchorElement::~HTMLAnchorElement((WebCore::HTMLAreaElement *)((char *)this - 112), (WTF::StringImpl *)a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

void WebCore::HTMLArticleElement::~HTMLArticleElement(WebCore::HTMLArticleElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::HTMLAttachmentElement::canContainRangeEndPoint(WebCore::HTMLAttachmentElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLAttachmentElement::shouldSelectOnMouseDown(WebCore::HTMLAttachmentElement *this)
{
  return 0;
}

void WebCore::HTMLBRElement::~HTMLBRElement(WebCore::HTMLBRElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::HTMLBRElement::canContainRangeEndPoint(WebCore::HTMLBRElement *this)
{
  return 0;
}

void WebCore::HTMLBaseElement::~HTMLBaseElement(WebCore::HTMLBaseElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::HTMLBDIElement::~HTMLBDIElement(WebCore::HTMLBDIElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_SA_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_SA_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebCore::AttachmentImageEventsListener::~AttachmentImageEventsListener(WebCore::AttachmentImageEventsListener *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v13 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v13;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v12 = v3;
        WTF::fastFree(v8, a2);
        v3 = v12;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v9 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v13 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v13;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v12 = v3;
        WTF::fastFree(v8, a2);
        v3 = v12;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v9 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, a2);
}

WebCore *WebCore::AttachmentImageEventsListener::handleEvent(WebCore *this, WebCore::ScriptExecutionContext *a2, WebCore::Event *a3)
{
  WebCore *v4;
  unint64_t StatusReg;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::EventNames **v13;
  uint64_t v14;
  WebCore::Event *v15;
  uint64_t v16;
  unsigned int v17;
  _DWORD *v18;

  v4 = this;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(_QWORD *)(StatusReg + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
  {
    this = (WebCore *)WebCore::threadGlobalDataSlow(this);
    v7 = (uint64_t)this;
  }
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    this = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  if (*((_QWORD *)a3 + 3) == *(_QWORD *)(v8 + 1104))
    goto LABEL_13;
  v9 = *(_QWORD *)(StatusReg + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
  {
    this = (WebCore *)WebCore::threadGlobalDataSlow(this);
    v10 = (uint64_t)this;
  }
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    this = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  if (*((_QWORD *)a3 + 3) == *(_QWORD *)(v11 + 784))
  {
LABEL_13:
    v12 = *((_QWORD *)v4 + 3);
    if (v12)
      v13 = *(WebCore::EventNames ***)(v12 + 8);
    else
      v13 = 0;
    v14 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v14);
    *(_QWORD *)v14 = off_1E33A4B48;
    *(_QWORD *)(v14 + 8) = 0;
    v17 = *(_DWORD *)(v14 + 20) & 0xFFC00000 | (*((_QWORD *)a3 + 3) != 0) | 0x1E8200;
    *(_DWORD *)(v14 + 16) = 1;
    *(_DWORD *)(v14 + 20) = v17;
    v18 = (_DWORD *)*((_QWORD *)a3 + 3);
    if (v18)
      *v18 += 2;
    *(_QWORD *)(v14 + 24) = v18;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = 0;
    *(_QWORD *)(v14 + 48) = 0;
    *(_QWORD *)(v14 + 56) = v16;
    *(_QWORD *)(v14 + 64) = 0;
    this = (WebCore *)WebCore::EventDispatcher::dispatchEvent(v13, (WebCore::Node *)v14, v15);
    if (*(_DWORD *)(v14 + 16) == 1)
      return (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    else
      --*(_DWORD *)(v14 + 16);
  }
  return this;
}

void WebCore::AttachmentSaveEventListener::~AttachmentSaveEventListener(WebCore::AttachmentSaveEventListener *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v13 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v13;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v12 = v3;
        WTF::fastFree(v8, a2);
        v3 = v12;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v9 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v13 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v13;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v12 = v3;
        WTF::fastFree(v8, a2);
        v3 = v12;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v9 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, a2);
}

WebCore *WebCore::AttachmentSaveEventListener::handleEvent(WebCore *this, WebCore::ScriptExecutionContext *a2, WebCore::Event *a3)
{
  WebCore *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char v15;
  __int16 v16;
  __int16 v17;
  char v18;
  uint64_t v19;
  double v20;
  WebCore::MouseRelatedEvent *v21;
  char v22;
  char v23;
  WebCore::Event *v24;
  int v25;
  unint64_t v26;
  unint64_t v27;

  v4 = this;
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
  {
    this = (WebCore *)WebCore::threadGlobalDataSlow(this);
    v6 = (uint64_t)this;
  }
  v7 = *(_QWORD *)(v6 + 40);
  if (!v7)
  {
    this = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
    v7 = *(_QWORD *)(v6 + 40);
  }
  if (*((_QWORD *)a3 + 3) == *(_QWORD *)(v7 + 400))
  {
    if (((*(uint64_t (**)(WebCore::Event *, WebCore::ScriptExecutionContext *))(*(_QWORD *)a3 + 88))(a3, a2) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195BBE058);
    }
    if ((byte_1ECE83438 & 1) == 0)
    {
      WTF::AtomStringImpl::add();
      qword_1ECE834C0 = v27;
      byte_1ECE83438 = 1;
    }
    v8 = (_DWORD *)*((_QWORD *)a3 + 9);
    if (v8)
      ++*v8;
    v9 = *((_DWORD *)a3 + 20);
    v10 = *((_QWORD *)a3 + 11);
    v11 = *((_DWORD *)a3 + 24);
    v12 = *((_DWORD *)a3 + 25);
    if (v11 >= 0)
      v13 = *((_DWORD *)a3 + 24);
    else
      v13 = v11 + 63;
    v14 = v12 + 63;
    if (v12 >= 0)
      v14 = *((_DWORD *)a3 + 25);
    v26 = __PAIR64__(v14, v13);
    v15 = *((_BYTE *)a3 + 84);
    if ((unsigned __int16)(*((_WORD *)a3 + 77) + 2) >= 5u)
      LOBYTE(v16) = 3;
    else
      v16 = *((_WORD *)a3 + 77);
    v17 = *((_WORD *)a3 + 78);
    v18 = *((_BYTE *)a3 + 158);
    v19 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v19);
    v27 = 0;
    v21 = (WebCore::MouseRelatedEvent *)WebCore::Event::Event(v19, 76, &qword_1ECE834C0, 0, 0, 0, 1, v20);
    *(_QWORD *)(v19 + 72) = v8;
    *(_DWORD *)(v19 + 80) = v9;
    *(_BYTE *)(v19 + 84) = v15;
    *(_QWORD *)v19 = off_1E33A5D38;
    *(_QWORD *)(v19 + 88) = v10;
    *(_OWORD *)(v19 + 96) = 0u;
    *(_OWORD *)(v19 + 112) = 0u;
    *(_OWORD *)(v19 + 128) = 0u;
    *(_OWORD *)(v19 + 138) = 0u;
    WebCore::MouseRelatedEvent::init(v21, 0, (const WebCore::IntPoint *)&v27);
    *(_QWORD *)v19 = off_1E33A5C38;
    if (v16 == 254)
      v22 = 0;
    else
      v22 = v16;
    *(_WORD *)(v19 + 154) = v22;
    *(_WORD *)(v19 + 156) = v17;
    if (v16 == 254)
      v23 = 0;
    else
      v23 = v18;
    *(_BYTE *)(v19 + 158) = v23;
    *(_BYTE *)(v19 + 159) = v16 != 254;
    *(_QWORD *)(v19 + 160) = 0;
    *(_QWORD *)(v19 + 168) = 0;
    v27 = v26 & 0xFFFFFFC0FFFFFFC0;
    WebCore::MouseRelatedEvent::initCoordinates((WebCore::MouseRelatedEvent *)v19, (const WebCore::LayoutPoint *)&v27);
    v25 = *((_DWORD *)a3 + 5);
    if ((v25 & 0x404) == 4)
      v25 |= 0x40u;
    *((_DWORD *)a3 + 5) = v25 | 0x30;
    this = (WebCore *)WebCore::EventDispatcher::dispatchEvent(*(WebCore::EventNames ***)(*((_QWORD *)v4 + 3) + 8), (WebCore::Node *)v19, v24);
    if (*(_DWORD *)(v19 + 16) == 1)
      return (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    else
      --*(_DWORD *)(v19 + 16);
  }
  return this;
}

void WebCore::AttachmentEvent::~AttachmentEvent(WebCore::AttachmentEvent *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  v3 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

uint64_t WebCore::HTMLMediaElement::canStartSelection(WebCore::HTMLMediaElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLMediaElement::isMediaElement(WebCore::HTMLMediaElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLMediaElement::ref(uint64_t this)
{
  *(_DWORD *)(this + 24) += 2;
  return this;
}

uint64_t WebCore::HTMLMediaElement::deref(uint64_t this)
{
  _WORD *v1;
  __int16 v2;
  __int16 v3;

  v1 = (_WORD *)this;
  if (*(_DWORD *)(this + 24) == 2)
  {
    v2 = *(_WORD *)(this + 30);
    if ((v2 & 0x400) == 0)
    {
      v3 = *(_WORD *)(this + 28);
      if ((v3 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)this);
      }
      else
      {
        if ((v3 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(this + 160) + 16))(*(_QWORD *)(this + 160));
          v2 = v1[15];
        }
        v1[15] = v2 | 0x400;
        return (*(uint64_t (**)(_WORD *))(*(_QWORD *)v1 + 72))(v1);
      }
    }
  }
  else
  {
    *(_DWORD *)(this + 24) -= 2;
  }
  return this;
}

uint64_t WebCore::HTMLMediaElement::isVideo(WebCore::HTMLMediaElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLMediaElement::hasVideo(WebCore::HTMLMediaElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLMediaElement::supportsFullscreen(WebCore::HTMLMediaElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLMediaElement::isPlayingToWirelessPlaybackTarget(WebCore::HTMLMediaElement *this)
{
  return *((unsigned __int8 *)this + 1697);
}

uint64_t WebCore::HTMLMediaElement::isPlayingOnSecondScreen(WebCore::HTMLMediaElement *this)
{
  return *((unsigned __int8 *)this + 1698);
}

unint64_t WebCore::HTMLMediaElement::isPlaying(WebCore::HTMLMediaElement *this)
{
  return ((unint64_t)*(unsigned int *)((char *)this + 1265) >> 1) & 1;
}

uint64_t WebCore::HTMLMediaElement::logger(WebCore::HTMLMediaElement *this)
{
  return *((_QWORD *)this + 228);
}

uint64_t WebCore::HTMLMediaElement::logIdentifier(WebCore::HTMLMediaElement *this)
{
  return *((_QWORD *)this + 229);
}

const char *WebCore::HTMLMediaElement::logClassName(WebCore::HTMLMediaElement *this)
{
  return "HTMLMediaElement";
}

unint64_t WebCore::HTMLMediaElement::isAudible(WebCore::HTMLMediaElement *this)
{
  if (*((_BYTE *)this + 1697))
    return 1;
  if (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 467)
    || (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1456))(this) == 0.0
    || ((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1472))(this) & 1) != 0)
  {
    return 0;
  }
  if (*((_QWORD *)this + 142) && *((int *)this + 226) >= 1)
    return (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1280))(this);
  return ((unint64_t)*(unsigned int *)((char *)this + 1265) >> 27) & 1;
}

uint64_t WebCore::HTMLMediaElement::audioOutputDeviceId@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 1704);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::HTMLMediaElement::audioOutputDeviceIdOverride@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 1704);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerSourceApplicationIdentifier@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 8) + 528);
  if (!v3)
    goto LABEL_10;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_10;
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 280) + 336);
  if (v7)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
  do
  {
    v8 = __ldaxr(v5);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v5));
  if (!v9)
  {
    atomic_store(1u, v5);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = off_1E31FE290;
    v11[1] = v5;
    v12 = (uint64_t)v11;
    WTF::ensureOnMainThread();
    this = v12;
    if (v12)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (!v7)
  {
LABEL_10:
    v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v10 += 2;
    *a2 = v10;
  }
  return this;
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerElementId@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 1720);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerFullscreenMode(WebCore::HTMLMediaElement *this)
{
  return *((unsigned int *)this + 270);
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerIsVideoFullscreenStandby(WebCore::HTMLMediaElement *this)
{
  return *((unsigned __int8 *)this + 1084);
}

BOOL WebCore::HTMLMediaElement::mediaPlayerShouldDisableSleep(WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::shouldDisableSleep(this) == 1;
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerShouldDisableHDR(WebCore::HTMLMediaElement *this, WebCore::Widget *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore *v4;
  unsigned int v5;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && (v4 = *(WebCore **)(v3 + 288)) != 0)
  {
    ++*((_DWORD *)v4 + 2);
    v5 = WebCore::screenSupportsHighDynamicRange(v4, a2);
    if (*((_DWORD *)v4 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v4 + 8))(v4);
    else
      --*((_DWORD *)v4 + 2);
  }
  else
  {
    v5 = WebCore::screenSupportsHighDynamicRange(0, a2);
  }
  return v5 ^ 1;
}

float WebCore::HTMLMediaElement::mediaPlayerVideoLayerSize(WebCore::HTMLMediaElement *this)
{
  return *((float *)this + 443);
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerVideoLayerSizeDidChange(uint64_t this, const WebCore::FloatSize *a2)
{
  *(_QWORD *)(this + 1772) = *(_QWORD *)a2;
  return this;
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerClientIdentifier(WebCore::HTMLMediaElement *this)
{
  return *((_QWORD *)this + 19);
}

BOOL WebCore::HTMLMediaElement::hasCurrentSrc(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 114);
  return v1 && *(_DWORD *)(v1 + 4) != 0;
}

BOOL WebCore::HTMLMediaElement::isLiveStream(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 142);
  return v1 && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 824))(*(_QWORD *)(v1 + 72)) == 3;
}

uint64_t WebCore::HTMLAudioElement::presentationType(WebCore::HTMLAudioElement *this)
{
  return 3;
}

uint64_t WebCore::HTMLMediaElement::canReceiveRemoteControlCommands(WebCore::HTMLMediaElement *this)
{
  return 1;
}

BOOL WebCore::HTMLMediaElement::isEnded(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  double v5;

  if (*((_QWORD *)this + 204))
  {
    v2 = *((_QWORD *)this + 142);
    if (v2)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 72) + 1048))(*(_QWORD *)(v2 + 72)) & 1) != 0)
        return 1;
    }
  }
  result = WebCore::HTMLMediaElement::endedPlayback(this);
  if ((_DWORD)result)
  {
    v4 = *((_QWORD *)this + 177);
    if (v4)
      (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 256) + 40))(*(_QWORD *)(v4 + 256));
    else
      v5 = *((double *)this + 109);
    return v5 > 0.0;
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerLogIdentifier(WebCore::HTMLMediaElement *this)
{
  return *((_QWORD *)this + 229);
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerLogger(WebCore::HTMLMediaElement *this)
{
  return *((_QWORD *)this + 228);
}

void `non-virtual thunk to'WebCore::HTMLAudioElement::~HTMLAudioElement(WebCore::HTMLAudioElement *this, void *a2)
{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 136), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 136), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 144), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 144), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 160), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 160), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 176), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 176), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 192), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 192), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 208), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 208), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 224), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 224), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 240), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 240), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 256), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 256), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 272), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 272), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 288), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLAudioElement *)((char *)this - 288), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::ref(uint64_t this)
{
  *(_DWORD *)(this - 88) += 2;
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLMediaElement::deref(unsigned int *this, void *a2)
{
  unsigned int *v2;
  __int16 v3;
  __int16 v4;

  v2 = this;
  if (*(this - 22) == 2)
  {
    v3 = *((_WORD *)this - 41);
    if ((v3 & 0x400) == 0)
    {
      v4 = *((_WORD *)this - 42);
      if ((v4 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)(this - 28), a2);
      }
      else
      {
        if ((v4 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
          v3 = *((_WORD *)v2 - 41);
        }
        *((_WORD *)v2 - 41) = v3 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*((_QWORD *)v2 - 14) + 72))(v2 - 28);
      }
    }
  }
  else
  {
    *(this - 22) -= 2;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::supportsFullscreen(WebCore::HTMLMediaElement *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::hasVideo(WebCore::HTMLMediaElement *this)
{
  return 0;
}

BOOL `non-virtual thunk to'WebCore::HTMLMediaElement::isLiveStream(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 125);
  return v1 && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 824))(*(_QWORD *)(v1 + 72)) == 3;
}

BOOL `non-virtual thunk to'WebCore::HTMLMediaElement::hasCurrentSrc(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 97);
  return v1 && *(_DWORD *)(v1 + 4) != 0;
}

uint64_t `non-virtual thunk to'WebCore::HTMLAudioElement::presentationType(WebCore::HTMLAudioElement *this)
{
  return 3;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::canReceiveRemoteControlCommands(WebCore::HTMLMediaElement *this)
{
  return 1;
}

unint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::isPlaying(WebCore::HTMLMediaElement *this)
{
  return ((unint64_t)*(unsigned int *)((char *)this + 1121) >> 1) & 1;
}

unint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::isAudible(WebCore::HTMLMediaElement *this)
{
  char *v3;

  if (*((_BYTE *)this + 1553))
    return 1;
  if (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this - 13) + 8) + 467))
    return 0;
  v3 = (char *)this - 144;
  if ((*(double (**)(char *))(*((_QWORD *)this - 18) + 1456))((char *)this - 144) == 0.0
    || ((*(uint64_t (**)(char *))(*(_QWORD *)v3 + 1472))((char *)this - 144) & 1) != 0)
  {
    return 0;
  }
  if (*((_QWORD *)this + 124) && *((int *)this + 190) >= 1)
    return (*(uint64_t (**)(char *))(*(_QWORD *)v3 + 1280))((char *)this - 144);
  return ((unint64_t)*(unsigned int *)((char *)this + 1121) >> 27) & 1;
}

BOOL `non-virtual thunk to'WebCore::HTMLMediaElement::isEnded(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  double v5;

  if (*((_QWORD *)this + 186))
  {
    v2 = *((_QWORD *)this + 124);
    if (v2)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 72) + 1048))(*(_QWORD *)(v2 + 72)) & 1) != 0)
        return 1;
    }
  }
  result = WebCore::HTMLMediaElement::endedPlayback((WebCore::HTMLMediaElement *)((char *)this - 144));
  if ((_DWORD)result)
  {
    v4 = *((_QWORD *)this + 159);
    if (v4)
      (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 256) + 40))(*(_QWORD *)(v4 + 256));
    else
      v5 = *((double *)this + 91);
    return v5 > 0.0;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::isPlayingToWirelessPlaybackTarget(WebCore::HTMLMediaElement *this)
{
  return *((unsigned __int8 *)this + 1553);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::isPlayingOnSecondScreen(WebCore::HTMLMediaElement *this)
{
  return *((unsigned __int8 *)this + 1554);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::logger(WebCore::HTMLMediaElement *this)
{
  return *((_QWORD *)this + 210);
}

{
  return *((_QWORD *)this + 192);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::logIdentifier(WebCore::HTMLMediaElement *this)
{
  return *((_QWORD *)this + 211);
}

{
  return *((_QWORD *)this + 193);
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerRenderingCanBeAccelerated(WebCore::MediaPlayerClient *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerSourceApplicationIdentifier@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this - 136) + 8) + 528);
  if (!v3)
    goto LABEL_10;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_10;
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 280) + 336);
  if (v7)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
  do
  {
    v8 = __ldaxr(v5);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v5));
  if (!v9)
  {
    atomic_store(1u, v5);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = off_1E31FE290;
    v11[1] = v5;
    v12 = (uint64_t)v11;
    WTF::ensureOnMainThread();
    this = v12;
    if (v12)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (!v7)
  {
LABEL_10:
    v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v10 += 2;
    *a2 = v10;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerElementId@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 1544);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerFullscreenMode(WebCore::HTMLMediaElement *this)
{
  return *((unsigned int *)this + 226);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerIsVideoFullscreenStandby(WebCore::HTMLMediaElement *this)
{
  return *((unsigned __int8 *)this + 908);
}

BOOL `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerShouldDisableSleep(WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::shouldDisableSleep((WebCore::HTMLMediaElement *)((char *)this - 176)) == 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::audioOutputDeviceId@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 1528);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::audioOutputDeviceIdOverride@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 1528);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerShouldDisableHDR(WebCore::HTMLMediaElement *this, WebCore::Widget *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore *v4;
  unsigned int v5;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 17) + 8) + 528);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && (v4 = *(WebCore **)(v3 + 288)) != 0)
  {
    ++*((_DWORD *)v4 + 2);
    v5 = WebCore::screenSupportsHighDynamicRange(v4, a2);
    if (*((_DWORD *)v4 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v4 + 8))(v4);
    else
      --*((_DWORD *)v4 + 2);
  }
  else
  {
    v5 = WebCore::screenSupportsHighDynamicRange(0, a2);
  }
  return v5 ^ 1;
}

float `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerVideoLayerSize(WebCore::HTMLMediaElement *this)
{
  return *((float *)this + 399);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerVideoLayerSizeDidChange(uint64_t this, const WebCore::FloatSize *a2)
{
  *(_QWORD *)(this + 1596) = *(_QWORD *)a2;
  return this;
}

uint64_t WebCore::MediaPlayerClient::isGStreamerHolePunchingEnabled(WebCore::MediaPlayerClient *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerVideoTarget(WebCore::MediaPlayerClient *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerClientIdentifier(WebCore::HTMLMediaElement *this)
{
  return *((_QWORD *)this - 3);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerLogIdentifier(WebCore::HTMLMediaElement *this)
{
  return *((_QWORD *)this + 207);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerLogger(WebCore::HTMLMediaElement *this)
{
  return *((_QWORD *)this + 206);
}

uint64_t WebCore::MediaPlayerClient::canShowWhileLocked(WebCore::MediaPlayerClient *this)
{
  return 0;
}

const char *`non-virtual thunk to'WebCore::HTMLMediaElement::logClassName(WebCore::HTMLMediaElement *this)
{
  return "HTMLMediaElement";
}

uint64_t WebCore::HTMLButtonElement::create@<X0>(WebCore::HTMLButtonElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x1C1C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = (char *)this + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v6 = WebCore::HTMLNames::buttonTag;
  if (WebCore::HTMLNames::buttonTag)
    ++*(_DWORD *)WebCore::HTMLNames::buttonTag;
  *(_QWORD *)(result + 96) = v6;
  *(_QWORD *)(result + 104) = 0;
  *(_OWORD *)(result + 120) = 0uLL;
  *(_OWORD *)(result + 136) = 0uLL;
  *(_QWORD *)(result + 152) = 0;
  *(_WORD *)(result + 160) = 3;
  *(_BYTE *)(result + 162) = *(_BYTE *)(result + 162) & 0xFC | 2;
  *(_DWORD *)(result + 164) = 0;
  *(_BYTE *)(result + 168) &= 0xF8u;
  *(_QWORD *)result = off_1E33B8508;
  *(_QWORD *)(result + 112) = &unk_1E33B8A90;
  *(_DWORD *)(result + 172) = 0;
  *(_BYTE *)(result + 176) = 0;
  *a2 = result;
  return result;
}

WTF::StringImpl *WebCore::HTMLButtonElement::setType(WebCore::HTMLButtonElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::typeAttr, a2, 0);
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::typeAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::typeAttr, a2, 0);
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
}

void WebCore::HTMLButtonElement::createElementRenderer(WebCore::Document *a1@<X0>, WebCore::Style *this@<X1>, const WebCore::Element *a3@<X3>, uint64_t *a4@<X8>)
{
  unsigned int v7;
  BOOL v8;
  int v9;
  _QWORD *v11;
  uint64_t v12;

  v7 = *((_DWORD *)this + 4) & 0x1F;
  v8 = v7 > 0x14;
  v9 = (1 << v7) & 0x1B0000;
  if (v8 || v9 == 0)
  {
    v11 = (_QWORD *)bmalloc::api::isoAllocate();
    v12 = WebCore::RenderLayerModelObject::RenderLayerModelObject((uint64_t)v11, 2, (uint64_t)a1, this, 204, 0);
    *(_OWORD *)(v12 + 184) = 0u;
    *(_OWORD *)(v12 + 168) = 0u;
    *(_OWORD *)(v12 + 152) = 0u;
    *(_QWORD *)v12 = off_1E3423D88;
    *(_OWORD *)(v12 + 200) = 0u;
    *(_OWORD *)(v12 + 216) = 0u;
    *(_QWORD *)(v12 + 248) = v12 + 256;
    *(_QWORD *)(v12 + 256) = 0;
    *(_QWORD *)(v12 + 232) = v12;
    *(_QWORD *)(v12 + 240) = 0;
    *(_QWORD *)(v12 + 264) = 0;
    *(_QWORD *)(v12 + 272) = v12 + 256;
    *(_WORD *)(v12 + 280) = 1;
    *(_BYTE *)(v12 + 288) = 0;
    *(_BYTE *)(v12 + 296) = 0;
    *(_BYTE *)(v12 + 304) = 0;
    *(_BYTE *)(v12 + 312) = 0;
    *(_QWORD *)(v12 + 384) = 0;
    *(_OWORD *)(v12 + 352) = 0u;
    *(_OWORD *)(v12 + 368) = 0u;
    *(_OWORD *)(v12 + 320) = 0u;
    *(_OWORD *)(v12 + 336) = 0u;
    *(_DWORD *)(v12 + 392) = 2;
    *(_QWORD *)(v12 + 400) = 0;
    WebCore::RenderObject::setChildrenInline(v12, 0);
    *v11 = off_1E3420CD0;
    v11[51] = 0;
    v11[52] = 0;
    *a4 = (uint64_t)v11;
  }
  else
  {
    WebCore::RenderElement::createFor(a1, this, 0, a3, a4);
  }
}

uint64_t WebCore::HTMLButtonElement::defaultTabIndex(WebCore::HTMLButtonElement *this)
{
  return 0;
}

void *WebCore::HTMLButtonElement::formControlType(WebCore::HTMLButtonElement *this)
{
  int v1;

  v1 = *((_DWORD *)this + 43);
  switch(v1)
  {
    case 0:
      return &WebCore::submitAtomData;
    case 1:
      return &WebCore::resetAtomData;
    case 2:
      return (void *)(WebCore::HTMLNames::buttonTag + 24);
  }
  return (void *)MEMORY[0x1E0CBF3B8];
}

void *`non-virtual thunk to'WebCore::HTMLButtonElement::formControlType(WebCore::HTMLButtonElement *this)
{
  int v1;

  v1 = *((_DWORD *)this + 15);
  switch(v1)
  {
    case 0:
      return &WebCore::submitAtomData;
    case 1:
      return &WebCore::resetAtomData;
    case 2:
      return (void *)(WebCore::HTMLNames::buttonTag + 24);
  }
  return (void *)MEMORY[0x1E0CBF3B8];
}

uint64_t WebCore::HTMLButtonElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::alignAttr)
    return 0;
  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 > 0x1F8)
  {
    if (v2 == 949 || v2 == 505 || v2 == 947)
      return result;
    return 0;
  }
  v4 = v2 - 411 > 0x20 || ((1 << (v2 + 101)) & 0x100200001) == 0;
  if (v4 && v2 != 286)
    return 0;
  return result;
}

void WebCore::HTMLButtonElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  int v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;

  if (*(_QWORD *)a2 != WebCore::HTMLNames::typeAttr)
  {
    WebCore::HTMLFormControlElement::attributeChanged(a1, a2, a3, a4, a5, a6);
    return;
  }
  v7 = *(_DWORD *)(a1 + 172);
  v8 = *a4;
  if (!*a4)
    goto LABEL_4;
  v11 = *((_DWORD *)v8 + 1);
  if (v11 == 5)
  {
    v14 = *((_QWORD *)v8 + 1);
    if ((*((_BYTE *)v8 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v14 & 0xDF) != 0x52
        || (*(_BYTE *)(v14 + 1) & 0xDF) != 0x45
        || (*(_BYTE *)(v14 + 2) & 0xDF) != 0x53
        || (*(_BYTE *)(v14 + 3) & 0xDF) != 0x45)
      {
        goto LABEL_4;
      }
      v15 = *(unsigned __int8 *)(v14 + 4);
    }
    else
    {
      if ((*(_WORD *)v14 & 0xFFDF) != 0x52
        || (*(_WORD *)(v14 + 2) & 0xFFDF) != 0x45
        || (*(_WORD *)(v14 + 4) & 0xFFDF) != 0x53
        || (*(_WORD *)(v14 + 6) & 0xFFDF) != 0x45)
      {
        goto LABEL_4;
      }
      v15 = *(unsigned __int16 *)(v14 + 8);
    }
    if ((v15 & 0xFFFFFFDF) == 0x54)
    {
      v9 = 1;
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (v11 == 6)
  {
    v12 = *((_QWORD *)v8 + 1);
    if ((*((_BYTE *)v8 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v12 & 0xDF) != 0x42
        || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x55
        || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x54
        || (*(_BYTE *)(v12 + 3) & 0xDF) != 0x54
        || (*(_BYTE *)(v12 + 4) & 0xDF) != 0x4F)
      {
        goto LABEL_4;
      }
      v13 = *(unsigned __int8 *)(v12 + 5);
    }
    else
    {
      if ((*(_WORD *)v12 & 0xFFDF) != 0x42
        || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x55
        || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x54
        || (*(_WORD *)(v12 + 6) & 0xFFDF) != 0x54
        || (*(_WORD *)(v12 + 8) & 0xFFDF) != 0x4F)
      {
        goto LABEL_4;
      }
      v13 = *(unsigned __int16 *)(v12 + 10);
    }
    if ((v13 & 0xFFFFFFDF) == 0x4E)
    {
      v9 = 2;
      goto LABEL_5;
    }
  }
LABEL_4:
  v9 = 0;
LABEL_5:
  *(_DWORD *)(a1 + 172) = v9;
  if (v7 != v9)
  {
    WebCore::ValidatedFormListedElement::updateWillValidateAndValidity((WebCore::ValidatedFormListedElement *)(a1 + 112));
    v10 = *(_QWORD *)(a1 + 120);
    if (v10)
    {
      v16 = *(_QWORD **)(v10 + 8);
      if (v16)
      {
        if (!v7 || !*(_DWORD *)(a1 + 172))
          WebCore::HTMLFormElement::resetDefaultButton(v16);
      }
    }
  }
}

void WebCore::HTMLButtonElement::defaultEventHandler(WebCore::HTMLButtonElement *this, WebCore::Event *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WebCore::Document *v11;
  uint64_t v12;
  void *v13;
  double v14;
  double v15;
  float v16;
  uint64_t v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  void *v22;
  WebCore::Document *v23;
  __int16 v24;
  __int16 v25;
  uint64_t v26;
  int v27;
  WebCore::Document *v28;
  WebCore::Document *v29;

  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
    v5 = WebCore::threadGlobalDataSlow(this);
  v6 = *(_QWORD **)(v5 + 40);
  if (!v6)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD **)(v5 + 40);
  }
  if (*((_QWORD *)a2 + 3) == *v6 && (*((_BYTE *)this + 160) & 0x18) == 0)
  {
    v7 = *((_QWORD *)this + 15);
    if (v7)
    {
      v11 = *(WebCore::Document **)(v7 + 8);
      if (v11)
      {
        v28 = v11;
        *((_DWORD *)v11 + 6) += 2;
        v12 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
        *(_DWORD *)(v12 + 24) += 2;
        WebCore::Document::updateLayout(v12, 2u, 0);
        if (*(_DWORD *)(v12 + 24) == 2)
        {
          v18 = *(_WORD *)(v12 + 30);
          if ((v18 & 0x400) == 0)
          {
            v19 = *(_WORD *)(v12 + 28);
            if ((v19 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v12, v13);
            }
            else
            {
              if ((v19 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 160) + 16))(*(_QWORD *)(v12 + 160));
                v18 = *(_WORD *)(v12 + 30);
              }
              *(_WORD *)(v12 + 30) = v18 | 0x400;
              (*(void (**)(uint64_t))(*(_QWORD *)v12 + 72))(v12);
            }
          }
        }
        else
        {
          *(_DWORD *)(v12 + 24) -= 2;
        }
        v17 = *((_QWORD *)this + 15);
        if (v17)
        {
          v26 = *(_QWORD *)(v17 + 8);
          if (v26)
          {
            v27 = *((_DWORD *)this + 43);
            if (!v27)
            {
              WebCore::HTMLFormElement::submitIfPossible(v26, a2, this, 1, v14, v15, v16);
              v27 = *((_DWORD *)this + 43);
            }
            if (v27 == 1)
              WebCore::HTMLFormElement::reset(v26);
          }
        }
        if (*((_DWORD *)this + 43) <= 1u)
          *((_DWORD *)a2 + 5) |= 0x80u;
        if (*((_DWORD *)v28 + 6) == 2)
        {
          v20 = *((_WORD *)v28 + 15);
          if ((v20 & 0x400) == 0)
          {
            v21 = *((_WORD *)v28 + 14);
            if ((v21 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef(v28, v13);
            }
            else
            {
              if ((v21 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)v28 + 20) + 16))(*((_QWORD *)v28 + 20));
                v20 = *((_WORD *)v28 + 15);
              }
              *((_WORD *)v28 + 15) = v20 | 0x400;
              (*(void (**)(WebCore::Document *))(*(_QWORD *)v28 + 72))(v28);
            }
          }
        }
        else
        {
          *((_DWORD *)v28 + 6) -= 2;
        }
        goto LABEL_13;
      }
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 680) & 0x80000000) == 0)
    {
LABEL_12:
      WebCore::HTMLFormControlElement::handlePopoverTargetAction(this);
      goto LABEL_13;
    }
    v8 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
    if (v8 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      if (!WebCore::HTMLInputElement::isTextButton(this) && !WebCore::HTMLInputElement::isImageButton(this))
        goto LABEL_12;
    }
    else if (v8 != *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24))
    {
      goto LABEL_12;
    }
    WebCore::Element::getElementAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::invoketargetAttr, (uint64_t *)&v29);
    v23 = v29;
    v29 = 0;
    if (!v23)
      goto LABEL_12;
    if (*((_DWORD *)v23 + 6) == 2)
    {
      v24 = *((_WORD *)v23 + 15);
      if ((v24 & 0x400) == 0)
      {
        v25 = *((_WORD *)v23 + 14);
        if ((v25 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef(v23, v22);
        }
        else
        {
          if ((v25 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v23 + 20) + 16))(*((_QWORD *)v23 + 20));
            v24 = *((_WORD *)v23 + 15);
          }
          *((_WORD *)v23 + 15) = v24 | 0x400;
          (*(void (**)(WebCore::Document *))(*(_QWORD *)v23 + 72))(v23);
        }
      }
    }
    else
    {
      *((_DWORD *)v23 + 6) -= 2;
    }
    WebCore::HTMLFormControlElement::handleInvokeAction((unsigned int *)this);
  }
LABEL_13:
  if (!(*(unsigned int (**)(WebCore::Event *))(*(_QWORD *)a2 + 80))(a2))
    goto LABEL_26;
  ++*((_DWORD *)a2 + 4);
  v9 = *((_QWORD *)a2 + 3);
  if (v9 == v6[131])
  {
    if ((MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "U+0020", 6) & 1) != 0)
    {
      WebCore::Element::setActive((uint64_t)this, (void *)1, 0);
      goto LABEL_32;
    }
    v9 = *((_QWORD *)a2 + 3);
  }
  if (v9 != v6[132])
  {
LABEL_19:
    if (v9 == v6[134] && MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "U+0020", 6))
    {
      if ((*((_BYTE *)this + 54) & 2) == 0 || !WebCore::Element::isUserActionElementActive(this))
        goto LABEL_31;
      goto LABEL_30;
    }
    if (*((_DWORD *)a2 + 4) == 1)
      (*(void (**)(WebCore::Event *))(*(_QWORD *)a2 + 8))(a2);
    else
      --*((_DWORD *)a2 + 4);
LABEL_26:
    WebCore::Node::defaultEventHandler(this, (WebCore::Node **)a2);
    return;
  }
  v10 = WebCore::KeyboardEvent::charCode(a2);
  if (v10 == 13)
  {
LABEL_30:
    WebCore::simulateClick(this, (uint64_t)a2, 0, 1, 1);
    goto LABEL_31;
  }
  if (v10 != 32)
  {
    v9 = *((_QWORD *)a2 + 3);
    goto LABEL_19;
  }
LABEL_31:
  *((_DWORD *)a2 + 5) |= 0x80u;
LABEL_32:
  if (*((_DWORD *)a2 + 4) == 1)
    (*(void (**)(WebCore::Event *))(*(_QWORD *)a2 + 8))(a2);
  else
    --*((_DWORD *)a2 + 4);
}

BOOL WebCore::HTMLFormControlElement::isDisabledFormControl(WebCore::HTMLFormControlElement *this)
{
  return (*((_BYTE *)this + 160) & 0x18) != 0;
}

BOOL WebCore::HTMLButtonElement::willRespondToMouseClickEventsWithEditability(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 160) & 0x18) == 0;
}

BOOL WebCore::HTMLButtonElement::isSuccessfulSubmitButton(WebCore::HTMLButtonElement *this)
{
  return *((_DWORD *)this + 43) == 0;
}

WebCore::HTMLFormElement *WebCore::HTMLButtonElement::matchesDefaultPseudoClass(WebCore::HTMLButtonElement *this)
{
  uint64_t v2;
  WebCore::HTMLFormElement *result;

  if (*((_DWORD *)this + 43))
    return 0;
  v2 = *((_QWORD *)this + 15);
  if (!v2)
    return 0;
  result = *(WebCore::HTMLFormElement **)(v2 + 8);
  if (result)
    return (WebCore::HTMLFormElement *)(WebCore::HTMLFormElement::defaultButton(result) == (_QWORD)this);
  return result;
}

uint64_t WebCore::HTMLButtonElement::isActivatedSubmit(WebCore::HTMLButtonElement *this)
{
  return *((unsigned __int8 *)this + 176);
}

uint64_t WebCore::HTMLButtonElement::setActivatedSubmit(uint64_t this, char a2)
{
  *(_BYTE *)(this + 176) = a2;
  return this;
}

uint64_t WebCore::HTMLButtonElement::appendFormData(WebCore::HTMLButtonElement *this, WebCore::DOMFormData *a2)
{
  char *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v11;
  unsigned int v12;
  WTF::StringImpl **v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  if (*((_DWORD *)this + 43))
    return 0;
  v4 = (char *)this + 112;
  v5 = *(_QWORD *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 24))((char *)this + 112) + 104);
  if (v5 && (v6 = *(_DWORD *)(v5 + 4), (v6 & 2) != 0))
  {
    if ((v6 & 1) != 0)
    {
      v21 = *(uint64_t **)(v5 + 40);
      LODWORD(v22) = *(_DWORD *)(v5 + 52);
    }
    else
    {
      v21 = (uint64_t *)(v5 + 32);
      LODWORD(v22) = v6 >> 5;
    }
    if ((_DWORD)v22)
    {
      v22 = v22;
      while (1)
      {
        v23 = *v21;
        if (*v21 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v21 += 2;
        if (!--v22)
          goto LABEL_41;
      }
    }
    else
    {
LABEL_41:
      v21 = 0;
    }
    v7 = v21 + 1;
  }
  else
  {
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v8 = *v7;
  v9 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
  if (!v8)
    v8 = *MEMORY[0x1E0CBF3B8];
  if (!v8 || !*(_DWORD *)(v8 + 4) || !*((_BYTE *)this + 176))
    return 0;
  v11 = *(_QWORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v4 + 24))(v4) + 104);
  if (v11 && (v12 = *(_DWORD *)(v11 + 4), (v12 & 2) != 0))
  {
    if ((v12 & 1) != 0)
    {
      v24 = *(_QWORD **)(v11 + 40);
      LODWORD(v25) = *(_DWORD *)(v11 + 52);
    }
    else
    {
      v24 = (_QWORD *)(v11 + 32);
      LODWORD(v25) = v12 >> 5;
    }
    if ((_DWORD)v25)
    {
      v25 = v25;
      while (1)
      {
        v26 = *v24;
        if (*v24 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v26 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v26 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v24 += 2;
        if (!--v25)
          goto LABEL_54;
      }
    }
    else
    {
LABEL_54:
      v24 = 0;
    }
    v13 = (WTF::StringImpl **)(v24 + 1);
  }
  else
  {
    v13 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  }
  if (*v13)
    v14 = v13;
  else
    v14 = v9;
  v15 = *((_QWORD *)this + 13);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 + 4);
    if ((v16 & 1) != 0)
    {
      v17 = *(_QWORD *)(v15 + 40);
      LODWORD(v18) = *(_DWORD *)(v15 + 52);
      if ((_DWORD)v18)
      {
LABEL_20:
        v18 = v18;
        v19 = (WTF::StringImpl **)(v17 + 8);
        while (1)
        {
          v20 = (uint64_t)*(v19 - 1);
          if (v20 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v20 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v20 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_29;
          }
          v19 += 2;
          if (!--v18)
          {
            v19 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
            goto LABEL_29;
          }
        }
      }
    }
    else
    {
      v17 = v15 + 32;
      LODWORD(v18) = v16 >> 5;
      if ((_DWORD)v18)
        goto LABEL_20;
    }
  }
  v19 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_29:
  WebCore::DOMFormData::append(a2, v14, v19);
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLButtonElement::appendFormData(WebCore::HTMLButtonElement *this, WebCore::DOMFormData *a2)
{
  return WebCore::HTMLButtonElement::appendFormData((WebCore::HTMLButtonElement *)((char *)this - 112), a2);
}

BOOL WebCore::HTMLButtonElement::isURLAttribute(uint64_t a1, _QWORD *a2)
{
  return *a2 == WebCore::HTMLNames::formactionAttr;
}

uint64_t WebCore::HTMLButtonElement::computeWillValidate(WebCore::HTMLButtonElement *this)
{
  char *v2;
  char v3;
  uint64_t v4;
  int v5;

  if (*((_DWORD *)this + 43))
    return 0;
  v2 = (char *)this + 112;
  v3 = *((_BYTE *)this + 162);
  if ((v3 & 3) == 2)
  {
    v4 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 24))((char *)this + 112);
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 3288);
    if (v5)
      LOBYTE(v5) = WebCore::ancestorsOfType<WebCore::HTMLDataListElement>(v4) != 0;
    v3 = *((_BYTE *)this + 162) & 0xFC | v5;
    *((_BYTE *)this + 162) = v3;
  }
  if ((v3 & 3) != 0)
    return 0;
  if ((*((_BYTE *)this + 160) & 0x38) == 0)
    return 1;
  if ((*((_BYTE *)this + 160) & 0x18) != 0)
    return 0;
  if ((*((_BYTE *)this + 160) & 0x20) == 0)
    return 1;
  return (*(unsigned int (**)(char *))(*(_QWORD *)v2 + 344))(v2) ^ 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLButtonElement::computeWillValidate(WebCore::HTMLButtonElement *this)
{
  char v2;
  uint64_t v3;
  int v4;

  if (*((_DWORD *)this + 15))
    return 0;
  v2 = *((_BYTE *)this + 50);
  if ((v2 & 3) == 2)
  {
    v3 = (*(uint64_t (**)(WebCore::HTMLButtonElement *))(*(_QWORD *)this + 24))(this);
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 3288);
    if (v4)
      LOBYTE(v4) = WebCore::ancestorsOfType<WebCore::HTMLDataListElement>(v3) != 0;
    v2 = *((_BYTE *)this + 50) & 0xFC | v4;
    *((_BYTE *)this + 50) = v2;
  }
  if ((v2 & 3) != 0 || (*((_BYTE *)this + 48) & 0x18) != 0)
    return 0;
  if ((*((_BYTE *)this + 48) & 0x20) != 0)
    return (*(unsigned int (**)(WebCore::HTMLButtonElement *))(*(_QWORD *)this + 344))(this) ^ 1;
  return 1;
}

BOOL WebCore::HTMLButtonElement::isSubmitButton(WebCore::HTMLButtonElement *this)
{
  return *((_DWORD *)this + 43) == 0;
}

uint64_t *WebCore::HTMLCanvasElement::create@<X0>(WebCore::HTMLCanvasElement *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::HTMLCanvasElement *v12;
  uint64_t *result;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v5 = bmalloc::api::isoAllocate();
  v6 = v5;
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x181C00000002;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = (char *)this + 96;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  v7 = WebCore::HTMLNames::canvasTag;
  if (WebCore::HTMLNames::canvasTag)
    ++*(_DWORD *)WebCore::HTMLNames::canvasTag;
  *(_QWORD *)(v5 + 96) = v7;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33BC680;
  v8 = WebCore::Document::noiseInjectionHashSalt(this);
  *(_QWORD *)(v6 + 112) = off_1E33B0568;
  *(_QWORD *)(v6 + 120) = 0x960000012CLL;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  if (!v9)
    v8 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v6 + 176) = v8;
  *(_WORD *)(v6 + 184) = 1;
  *(_OWORD *)(v6 + 192) = 0uLL;
  *(_OWORD *)(v6 + 208) = 0uLL;
  v10 = v6 + 224;
  v11 = *((_QWORD *)this + 88);
  if (v11)
  {
    v12 = *(WebCore::HTMLCanvasElement **)(v11 + 8);
    if (v12)
      this = v12;
  }
  *(_QWORD *)(v6 + 224) = &off_1E33A18C0;
  *(_QWORD *)(v6 + 232) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v6 + 224), (WebCore::HTMLCanvasElement *)((char *)this + 192));
  *(_QWORD *)(v6 + 224) = &off_1E33A0540;
  *(_QWORD *)(v6 + 240) = 0;
  if (*((_BYTE *)this + 470))
  {
    __break(0xC471u);
    JUMPOUT(0x195BBFCCCLL);
  }
  v19 = v6 + 224;
  result = WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)this + 40, &v19, (uint64_t)&v18);
  *(_QWORD *)v6 = off_1E33B7438;
  *(_QWORD *)(v6 + 112) = &unk_1E33B79B0;
  *(_QWORD *)(v6 + 224) = &unk_1E33B7A68;
  *(_QWORD *)(v6 + 256) = 0;
  *(_QWORD *)(v6 + 264) = 0;
  *(_QWORD *)(v6 + 248) = 0;
  *(_DWORD *)(v6 + 272) = 0;
  *a2 = v6;
  v15 = *(_QWORD *)(v6 + 232);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      v17 = *(unsigned __int8 *)(v16 + 178);
      if (*(_BYTE *)(v16 + 178))
      {
        if (v17 == 1 || v17 == 2)
          ++*(_DWORD *)(v16 + 216);
      }
      else
      {
        *(_DWORD *)(v16 - 264) += 2;
      }
      if (*(_BYTE *)(v16 + 179))
        WebCore::ActiveDOMObject::suspend(v10, *(unsigned __int8 *)(v16 + 177));
      if (*(_BYTE *)(v16 + 180))
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
      return (uint64_t *)WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed((unsigned int *)(v16 - 96), v14);
    }
  }
  return result;
}

uint64_t *WebCore::HTMLCanvasElement::create@<X0>(WebCore::HTMLCanvasElement *this@<X0>, const WebCore::QualifiedName *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  const WebCore::QualifiedName *v14;
  uint64_t *result;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v7 = bmalloc::api::isoAllocate();
  v8 = v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x181C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = (char *)a2 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*((_DWORD *)a2 + 831);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    ++*v9;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33BC680;
  v10 = WebCore::Document::noiseInjectionHashSalt(a2);
  *(_QWORD *)(v8 + 112) = off_1E33B0568;
  *(_QWORD *)(v8 + 120) = 0x960000012CLL;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  if (!v11)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v8 + 176) = v10;
  *(_WORD *)(v8 + 184) = 1;
  *(_OWORD *)(v8 + 192) = 0uLL;
  *(_OWORD *)(v8 + 208) = 0uLL;
  v12 = v8 + 224;
  v13 = *((_QWORD *)a2 + 88);
  if (v13)
  {
    v14 = *(const WebCore::QualifiedName **)(v13 + 8);
    if (v14)
      a2 = v14;
  }
  *(_QWORD *)(v8 + 224) = &off_1E33A18C0;
  *(_QWORD *)(v8 + 232) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v8 + 224), (const WebCore::QualifiedName *)((char *)a2 + 192));
  *(_QWORD *)(v8 + 224) = &off_1E33A0540;
  *(_QWORD *)(v8 + 240) = 0;
  if (*((_BYTE *)a2 + 470))
  {
    __break(0xC471u);
    JUMPOUT(0x195BBFEE4);
  }
  v21 = v8 + 224;
  result = WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)a2 + 40, &v21, (uint64_t)&v20);
  *(_QWORD *)v8 = off_1E33B7438;
  *(_QWORD *)(v8 + 112) = &unk_1E33B79B0;
  *(_QWORD *)(v8 + 224) = &unk_1E33B7A68;
  *(_QWORD *)(v8 + 256) = 0;
  *(_QWORD *)(v8 + 264) = 0;
  *(_QWORD *)(v8 + 248) = 0;
  *(_DWORD *)(v8 + 272) = 0;
  *a3 = v8;
  v17 = *(_QWORD *)(v8 + 232);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if (v18)
    {
      v19 = *(unsigned __int8 *)(v18 + 178);
      if (*(_BYTE *)(v18 + 178))
      {
        if (v19 == 1 || v19 == 2)
          ++*(_DWORD *)(v18 + 216);
      }
      else
      {
        *(_DWORD *)(v18 - 264) += 2;
      }
      if (*(_BYTE *)(v18 + 179))
        WebCore::ActiveDOMObject::suspend(v12, *(unsigned __int8 *)(v18 + 177));
      if (*(_BYTE *)(v18 + 180))
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 56))(v12);
      return (uint64_t *)WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed((unsigned int *)(v18 - 96), v16);
    }
  }
  return result;
}

WTF::StringImpl ***std::unique_ptr<WebCore::CSSParserContext>::~unique_ptr[abi:sn180100](WTF::StringImpl ***a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = v3[5];
    v3[5] = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *v3;
    *v3 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

void `non-virtual thunk to'WebCore::HTMLCanvasElement::~HTMLCanvasElement(WebCore::HTMLCanvasElement *this)
{
  WebCore::HTMLCanvasElement::~HTMLCanvasElement((WebCore::HTMLCanvasElement *)((char *)this - 112));
}

{
  WebCore::HTMLCanvasElement::~HTMLCanvasElement((WebCore::HTMLCanvasElement *)((char *)this - 224));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::HTMLCanvasElement::~HTMLCanvasElement((WebCore::HTMLCanvasElement *)((char *)this - 112));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::HTMLCanvasElement::~HTMLCanvasElement((WebCore::HTMLCanvasElement *)((char *)this - 224));
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::HTMLCanvasElement::hasPresentationalHintsForAttribute(uint64_t a1, _QWORD *a2)
{
  if (*a2 == WebCore::HTMLNames::widthAttr || *a2 == WebCore::HTMLNames::heightAttr)
    return 1;
  else
    return WebCore::HTMLElement::hasPresentationalHintsForAttribute(a1, (uint64_t)a2);
}

WTF::StringImpl *WebCore::HTMLCanvasElement::collectPresentationalHintsForAttribute(WebCore::HTMLCanvasElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::widthAttr)
  {
    v10 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v17 = *(_DWORD *)(v10 + 16);
      v12 = *(uint64_t **)(v10 + 8);
      v10 = *(unsigned int *)(v10 + 4);
      v13 = (unint64_t)((v17 >> 2) & 1) << 32;
    }
    else
    {
      v12 = 0;
      v13 = 0x100000000;
    }
    v18 = *((_QWORD *)this + 13);
    if (v18
      && ((v19 = *(_DWORD *)(v18 + 4), (v19 & 1) != 0)
        ? (v20 = *(_QWORD *)(v18 + 40), LODWORD(v21) = *(_DWORD *)(v18 + 52))
        : (v20 = v18 + 32, LODWORD(v21) = v19 >> 5),
          (_DWORD)v21))
    {
      v21 = v21;
      v22 = (uint64_t *)(v20 + 8);
      while (1)
      {
        v23 = *(v22 - 1);
        if (v23 == WebCore::HTMLNames::heightAttr
          || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 24)
          && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 32))
        {
          break;
        }
        v22 += 2;
        if (!--v21)
        {
          v22 = (uint64_t *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v22 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    }
    v14 = *v22;
    if (!v14)
      goto LABEL_15;
    goto LABEL_28;
  }
  if (*(_QWORD *)a2 == WebCore::HTMLNames::heightAttr)
  {
    v5 = *((_QWORD *)this + 13);
    if (v5
      && ((v6 = *(_DWORD *)(v5 + 4), (v6 & 1) != 0)
        ? (v7 = *(_QWORD *)(v5 + 40), LODWORD(v5) = *(_DWORD *)(v5 + 52))
        : (v7 = v5 + 32, LODWORD(v5) = v6 >> 5),
          (_DWORD)v5))
    {
      v5 = v5;
      v8 = (uint64_t *)(v7 + 8);
      while (1)
      {
        v9 = *(v8 - 1);
        if (v9 == WebCore::HTMLNames::widthAttr
          || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 24)
          && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 32))
        {
          break;
        }
        v8 += 2;
        if (!--v5)
        {
          v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    }
    v10 = *v8;
    if (*v8)
    {
      v11 = *(_DWORD *)(v10 + 16);
      v12 = *(uint64_t **)(v10 + 8);
      v10 = *(unsigned int *)(v10 + 4);
      v13 = (unint64_t)((v11 >> 2) & 1) << 32;
    }
    else
    {
      v12 = 0;
      v13 = 0x100000000;
    }
    v14 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
    {
LABEL_15:
      v15 = 0;
      v16 = 0x100000000;
      return WebCore::HTMLElement::applyAspectRatioWithoutDimensionalRulesFromWidthAndHeightAttributesToStyle((uint64_t)this, v12, v13 | v10, v15, v16, a4);
    }
LABEL_28:
    v15 = *(uint64_t **)(v14 + 8);
    v16 = *(unsigned int *)(v14 + 4) | ((unint64_t)((*(_DWORD *)(v14 + 16) >> 2) & 1) << 32);
    return WebCore::HTMLElement::applyAspectRatioWithoutDimensionalRulesFromWidthAndHeightAttributesToStyle((uint64_t)this, v12, v13 | v10, v15, v16, a4);
  }
  return WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
}

void WebCore::HTMLCanvasElement::attributeChanged(WebCore::HTMLCanvasElement *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  if (*(_QWORD *)a2 == WebCore::HTMLNames::widthAttr || *(_QWORD *)a2 == WebCore::HTMLNames::heightAttr)
    WebCore::HTMLCanvasElement::reset(a1);
  WebCore::HTMLElement::attributeChanged((uint64_t)a1, a2, a3, a4, a5, a6);
}

void WebCore::HTMLCanvasElement::reset(WebCore::HTMLCanvasElement *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  WebCore::CanvasRenderingContext2DBase *v26;
  _BYTE *v27;
  int v28;
  int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WebCore::RenderView *v52;
  WebCore::RenderLayerCompositor *v53;
  int v54;
  void *v55;
  WebCore::CanvasRenderingContext *v57;
  WebCore::InspectorInstrumentation *v58;
  WebCore::ScriptExecutionContext *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  const void *v64;
  int v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  float *v70;
  int v71;
  __n128 v72;
  unint64_t v73;
  float *v74;
  double v75;
  WebCore::RenderLayerCompositor *v76;
  WebCore::RenderLayerCompositor *v77;
  WTF *v78;
  void *v79;
  unsigned int v80;
  uint64_t v81[2];
  char v82;
  __int128 cf;
  char v84;

  if (*((_BYTE *)this + 272))
    return;
  v2 = *((_QWORD *)this + 31);
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2) & 1) != 0)
      return;
  }
  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_17;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(_QWORD *)(v3 + 40);
    LODWORD(v6) = *(_DWORD *)(v3 + 52);
  }
  else
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
  }
  if (!(_DWORD)v6)
    goto LABEL_17;
  v6 = v6;
  i = (uint64_t *)(v5 + 8);
  do
  {
    v8 = *(i - 1);
    if (v8 == WebCore::HTMLNames::widthAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 32))
    {
      goto LABEL_12;
    }
    i += 2;
    --v6;
  }
  while (v6);
  for (i = (uint64_t *)MEMORY[0x1E0CBF2F8]; ; i = (uint64_t *)MEMORY[0x1E0CBF2F8])
  {
LABEL_12:
    v9 = *i;
    if (v9)
    {
      v10 = *(unsigned int *)(v9 + 16);
      v11 = *(uint64_t **)(v9 + 8);
      LODWORD(v9) = *(_DWORD *)(v9 + 4);
      v12 = (v10 >> 2) & 1;
    }
    else
    {
      v11 = 0;
      v12 = 1;
    }
    v13 = *((unsigned __int8 *)this + 185);
    WebCore::parseHTMLInteger(v11, v9 | (unint64_t)(v12 << 32), (uint64_t *)&cf);
    if (DWORD1(cf) == 1)
      goto LABEL_20;
    if (DWORD1(cf))
      goto LABEL_16;
    v14 = cf;
    if ((cf & 0x80000000) != 0)
LABEL_20:
      v14 = 300;
    if (v3
      && ((v15 = *(_DWORD *)(v3 + 4), (v15 & 1) != 0)
        ? (v16 = *(_QWORD *)(v3 + 40), LODWORD(v17) = *(_DWORD *)(v3 + 52))
        : (v16 = v3 + 32, LODWORD(v17) = v15 >> 5),
          (_DWORD)v17))
    {
      v17 = v17;
      v18 = (uint64_t *)(v16 + 8);
      while (1)
      {
        v19 = *(v18 - 1);
        if (v19 == WebCore::HTMLNames::heightAttr
          || *(_QWORD *)(v19 + 24) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 24)
          && *(_QWORD *)(v19 + 32) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 32))
        {
          break;
        }
        v18 += 2;
        if (!--v17)
        {
          v18 = (uint64_t *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v18 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    }
    v20 = *v18;
    if (v20)
    {
      v21 = *(unsigned int *)(v20 + 16);
      v22 = *(uint64_t **)(v20 + 8);
      LODWORD(v20) = *(_DWORD *)(v20 + 4);
      v23 = (v21 >> 2) & 1;
    }
    else
    {
      v22 = 0;
      v23 = 1;
    }
    WebCore::parseHTMLInteger(v22, v20 | (unint64_t)(v23 << 32), (uint64_t *)&cf);
    if (DWORD1(cf) == 1)
      goto LABEL_35;
    if (!DWORD1(cf))
      break;
LABEL_16:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_17:
    ;
  }
  v24 = cf;
  if ((cf & 0x80000000) == 0)
    goto LABEL_36;
LABEL_35:
  v24 = 150;
LABEL_36:
  v25 = (_QWORD *)((char *)this + 112);
  v26 = (WebCore::CanvasRenderingContext2DBase *)*((_QWORD *)this + 31);
  if (v26 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v26 + 24))(*((_QWORD *)this + 31)) & 1) != 0)
  {
    (*(void (**)(_QWORD *))(**((_QWORD **)v26 + 4) + 16))(*((_QWORD **)v26 + 4));
    WebCore::CanvasRenderingContext2DBase::reset(v26, v55);
    (*(void (**)(_QWORD *))(**((_QWORD **)v26 + 4) + 24))(*((_QWORD **)v26 + 4));
  }
  else
  {
    v27 = (_BYTE *)*((_QWORD *)this + 18);
    if (v27)
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)v27 + 104))(*(_QWORD *)v27, 1);
      v27[8] = 0;
      v61 = (_BYTE *)*((_QWORD *)this + 18);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)v61 + 96))(*(_QWORD *)v61, 1);
      v61[8] = 1;
    }
  }
  v29 = *((_DWORD *)this + 30);
  v28 = *((_DWORD *)this + 31);
  if (*((_BYTE *)this + 185))
  {
    if (v14 == v29 && (_DWORD)v24 == v28)
    {
      v62 = *((_QWORD *)this + 31);
      if (v62)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v62 + 24))(v62)
          && WebCore::CanvasBase::buffer((WebCore::HTMLCanvasElement *)((char *)this + 112)))
        {
          v80 = v14;
          (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)this + 31) + 200))(&cf);
          v63 = WebCore::CanvasBase::buffer((WebCore::HTMLCanvasElement *)((char *)this + 112));
          v64 = *(const void **)(v63 + 32);
          if (v64)
            CFRetain(*(CFTypeRef *)(v63 + 32));
          if (CGColorSpaceEqualToColorSpace())
          {
            v65 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 31) + 192))(*((_QWORD *)this + 31));
            v66 = v65 == *(unsigned __int8 *)(WebCore::CanvasBase::buffer((WebCore::HTMLCanvasElement *)((char *)this + 112))
                                            + 40);
          }
          else
          {
            v66 = 0;
          }
          if (v64)
            CFRelease(v64);
          v69 = (const void *)cf;
          *(_QWORD *)&cf = 0;
          if (v69)
            CFRelease(v69);
          v14 = v80;
          if (v66)
          {
            if (!*((_BYTE *)this + 273))
            {
              *((_BYTE *)this + 273) = 1;
              v70 = (float *)*((_QWORD *)this + 31);
              v71 = (*(uint64_t (**)(float *))(*(_QWORD *)v70 + 24))(v70);
              if (v71)
                v74 = v70;
              else
                v74 = 0;
              if (v74)
                (*(void (**)(_QWORD))(**((_QWORD **)v74 + 4) + 16))(*((_QWORD *)v74 + 4));
              if (v71)
              {
                v72.n128_u32[0] = *((_DWORD *)this + 30);
                LODWORD(v73) = *((_DWORD *)this + 31);
                v75 = (double)v72.n128_u64[0];
                v72.n128_u64[0] = 0;
                WebCore::CanvasRenderingContext2DBase::clearRect(v70, v72, 0.0, v75, (double)v73);
              }
              if (v74)
                (*(void (**)(_QWORD))(**((_QWORD **)v74 + 4) + 24))(*((_QWORD *)v74 + 4));
            }
            return;
          }
        }
      }
    }
  }
  if (v14 != *((_DWORD *)this + 30) || (_DWORD)v24 != *((_DWORD *)this + 31))
  {
    *((_QWORD *)this + 15) = v14 | (unint64_t)(v24 << 32);
    v30 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 88))((char *)this + 112);
    if (v30)
    {
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v57 = (WebCore::CanvasRenderingContext *)v30;
        v58 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 32) + 144))(*(_QWORD *)(v30 + 32));
        if (v58)
        {
          v60 = WebCore::InspectorInstrumentation::instrumentingAgents(v58, v59);
          if (v60)
            WebCore::InspectorInstrumentation::didChangeCanvasSizeImpl(v60, v57);
        }
      }
    }
  }
  *((_BYTE *)this + 185) = 0;
  v81[0] = 0;
  WebCore::CanvasBase::setImageBuffer((_DWORD *)this + 28, v81, &cf);
  v32 = cf;
  *(_QWORD *)&cf = 0;
  if (v32)
  {
    v33 = *(_QWORD *)(v32 + 8);
    if (__ldaxr((unsigned __int8 *)v33))
    {
      __clrex();
      goto LABEL_46;
    }
    if (__stxr(1u, (unsigned __int8 *)v33))
LABEL_46:
      MEMORY[0x19AEA534C](v33);
    v35 = *(_QWORD *)(v33 + 8);
    v36 = v35 - 1;
    *(_QWORD *)(v33 + 8) = v35 - 1;
    if (v35 == 1)
    {
      v67 = *(_QWORD *)(v33 + 16);
      v37 = *(_QWORD *)(v33 + 24);
      *(_QWORD *)(v33 + 24) = 0;
      v38 = v67 != 0;
    }
    else
    {
      v37 = 0;
      v38 = 1;
    }
    v39 = __ldxr((unsigned __int8 *)v33);
    if (v39 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v33))
      {
LABEL_51:
        if (!v36)
        {
          if (v37)
            (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
          if (!v38)
            WTF::fastFree((WTF *)v33, v31);
        }
        goto LABEL_52;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
    goto LABEL_51;
  }
LABEL_52:
  v40 = v81[0];
  v81[0] = 0;
  if (v40)
  {
    v41 = *(_QWORD *)(v40 + 8);
    if (__ldaxr((unsigned __int8 *)v41))
    {
      __clrex();
      goto LABEL_55;
    }
    if (__stxr(1u, (unsigned __int8 *)v41))
LABEL_55:
      MEMORY[0x19AEA534C](v41);
    v43 = *(_QWORD *)(v41 + 8);
    v44 = v43 - 1;
    *(_QWORD *)(v41 + 8) = v43 - 1;
    if (v43 == 1)
    {
      v68 = *(_QWORD *)(v41 + 16);
      v45 = *(_QWORD *)(v41 + 24);
      *(_QWORD *)(v41 + 24) = 0;
      v46 = v68 != 0;
    }
    else
    {
      v45 = 0;
      v46 = 1;
    }
    v47 = __ldxr((unsigned __int8 *)v41);
    if (v47 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v41))
      {
LABEL_60:
        if (!v44)
        {
          if (v45)
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
          if (!v46)
            WTF::fastFree((WTF *)v41, v31);
        }
        goto LABEL_61;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v41);
    goto LABEL_60;
  }
LABEL_61:
  v48 = (_DWORD *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v48)
  {
    if (v48[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 8))(v48);
    else
      --v48[2];
  }
  *((_BYTE *)this + 273) = 0;
  v49 = *((_QWORD *)this + 31);
  if (v49 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v49 + 56))(*((_QWORD *)this + 31)))
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 240))(v49);
  v50 = *((_QWORD *)this + 8);
  v51 = v50 & 0xFFFFFFFFFFFFLL;
  if ((v50 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((v50 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195BC090CLL);
    }
    if (*(_BYTE *)((v50 & 0xFFFFFFFFFFFFLL) + 0x2E) == 13)
    {
      ++*(_DWORD *)((v50 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (*((_DWORD *)this + 30) != v29 || *((_DWORD *)this + 31) != v28)
      {
        WebCore::RenderHTMLCanvas::canvasSizeChanged((WebCore::RenderHTMLCanvas *)v51);
        v52 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 24) + 8) + 40) + 8)
                                      + 1944);
        v53 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v52 + 50);
        if (!v53)
        {
          v76 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          v53 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v76, v52);
          v77 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v52 + 50);
          *((_QWORD *)v52 + 50) = v53;
          if (v77)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v77);
            WTF::fastFree(v78, v79);
            v53 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v52 + 50);
          }
        }
        if (*((_BYTE *)v53 + 132) && (*(_BYTE *)(v51 + 21) & 0x80) != 0)
          WebCore::RenderLayer::contentChanged(*(_QWORD *)(v51 + 144), (const WebCore::RenderObject *)3);
      }
      if (v13
        && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 24) + 8) + 40)
                                                                                             + 8)
                                                                                 + 1944)
                                                                     + 24)
                                                         + 8)
                                             + 40)
                                 + 8)
                     + 3382))
      {
        LOBYTE(cf) = 0;
        v84 = 0;
        LOBYTE(v81[0]) = 0;
        v82 = 0;
        WebCore::RenderObject::issueRepaint(v51, &cf, 0, 0, (uint64_t)v81);
      }
      v54 = *(_DWORD *)(v51 + 16);
      if (!v54)
      {
        __break(0xC471u);
        JUMPOUT(0x195BC092CLL);
      }
      *(_DWORD *)(v51 + 16) = v54 - 1;
    }
  }
  WebCore::CanvasBase::notifyObserversCanvasResized(v25);
}

void WebCore::HTMLCanvasElement::createElementRenderer(WebCore::Document *a1@<X0>, WebCore::Style *this@<X1>, const WebCore::Element *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;

  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 528);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *(_QWORD **)(*(_QWORD *)(v8 + 304) + 16);
    v12 = v11[37];
    if ((!v12 || (*(_BYTE *)(v12 + 268) & 0x10) == 0)
      && (v13 = v11[3]) != 0
      && *(_QWORD *)(v13 + 8)
      && ((v14 = *(_QWORD *)(v11[35] + 16), v15 = v11[17], *(_BYTE *)(v15 + 245))
        ? (v16 = *(unsigned __int8 *)(v15 + 244) != 0)
        : (v16 = (*(_QWORD *)(v15 + 688) >> 52) & 1),
          (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 968))(v14, v16)))
    {
      v17 = bmalloc::api::isoAllocate();
      v18 = *((_DWORD *)a1 + 30);
      v19 = *((_DWORD *)a1 + 31);
      v20 = v18 << 6;
      if (v18 < -33554432)
        v20 = 0x80000000;
      if (v18 <= 0x1FFFFFF)
        v21 = v20;
      else
        v21 = 0x7FFFFFFFLL;
      v22 = v19 << 6;
      if (v19 < -33554432)
        v22 = 0x80000000;
      if (v19 <= 0x1FFFFFF)
        v23 = v22;
      else
        v23 = 0x7FFFFFFFLL;
      v24 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v17, 13, (uint64_t)a1, this, 12, 3);
      *(_OWORD *)(v24 + 184) = 0u;
      *(_OWORD *)(v24 + 168) = 0u;
      *(_OWORD *)(v24 + 152) = 0u;
      *(_QWORD *)(v24 + 200) = v21 | (v23 << 32);
      *(_QWORD *)(v24 + 208) = 0;
      *(_DWORD *)(v24 + 20) |= 2u;
      *(_QWORD *)v24 = off_1E3427310;
      *a4 = v24;
    }
    else
    {
      WebCore::RenderElement::createFor(a1, this, 0, a3, a4);
    }
    do
    {
      v25 = __ldaxr(v9);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v9));
    if (!v26)
    {
      atomic_store(1u, v9);
      v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v27 = off_1E31FE290;
      v27[1] = v9;
      v28 = v27;
      WTF::ensureOnMainThread();
      if (v28)
        (*(void (**)(_QWORD *))(*v28 + 8))(v28);
    }
  }
  else
  {
    WebCore::RenderElement::createFor(a1, this, 0, a3, a4);
  }
}

uint64_t WebCore::HTMLCanvasElement::canContainRangeEndPoint(WebCore::HTMLCanvasElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLCanvasElement::canStartSelection(WebCore::HTMLCanvasElement *this)
{
  return 0;
}

WTF::StringImpl *WebCore::HTMLCanvasElement::setHeight@<X0>(WebCore::HTMLCanvasElement *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;

  v6 = *((_QWORD *)this + 31);
  if (v6
    && (result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6), (_DWORD)result))
  {
    *(_BYTE *)a3 = 8;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    if (a2 >= 0)
      v7 = a2;
    else
      v7 = 150;
    WTF::AtomString::number((WTF::AtomString *)v7);
    v8 = *((_QWORD *)this + 13);
    if (v8
      && ((v9 = *(_DWORD *)(v8 + 4), (v9 & 1) != 0)
        ? (v10 = *(uint64_t **)(v8 + 40), v11 = *(_DWORD *)(v8 + 52))
        : (v10 = (uint64_t *)(v8 + 32), v11 = v9 >> 5),
          v11))
    {
      v12 = 0;
      while (1)
      {
        v13 = *v10;
        if (*v10 == WebCore::HTMLNames::heightAttr
          || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 24)
          && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 32))
        {
          break;
        }
        ++v12;
        v10 += 2;
        if (v11 == v12)
          goto LABEL_13;
      }
    }
    else
    {
LABEL_13:
      v12 = 0xFFFFFFFFLL;
    }
    WebCore::Element::setAttributeInternal(this, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::heightAttr, &v16, 0);
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      else
        *(_DWORD *)result -= 2;
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLCanvasElement::setWidth@<X0>(WebCore::HTMLCanvasElement *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;

  v6 = *((_QWORD *)this + 31);
  if (v6
    && (result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6), (_DWORD)result))
  {
    *(_BYTE *)a3 = 8;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    if (a2 >= 0)
      v7 = a2;
    else
      v7 = 300;
    WTF::AtomString::number((WTF::AtomString *)v7);
    v8 = *((_QWORD *)this + 13);
    if (v8
      && ((v9 = *(_DWORD *)(v8 + 4), (v9 & 1) != 0)
        ? (v10 = *(uint64_t **)(v8 + 40), v11 = *(_DWORD *)(v8 + 52))
        : (v10 = (uint64_t *)(v8 + 32), v11 = v9 >> 5),
          v11))
    {
      v12 = 0;
      while (1)
      {
        v13 = *v10;
        if (*v10 == WebCore::HTMLNames::widthAttr
          || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 24)
          && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 32))
        {
          break;
        }
        ++v12;
        v10 += 2;
        if (v11 == v12)
          goto LABEL_13;
      }
    }
    else
    {
LABEL_13:
      v12 = 0xFFFFFFFFLL;
    }
    WebCore::Element::setAttributeInternal(this, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::widthAttr, &v16, 0);
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      else
        *(_DWORD *)result -= 2;
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

void WebCore::HTMLCanvasElement::setSize(WebCore::HTMLCanvasElement *this, const WebCore::IntSize *a2)
{
  int v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  v2 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 != *((_DWORD *)this + 30) || *((_DWORD *)a2 + 1) != *((_DWORD *)this + 31))
  {
    *((_BYTE *)this + 272) = 1;
    v6 = *((_QWORD *)this + 31);
    if (v6 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6) & 1) != 0)
      goto LABEL_27;
    if (v2 >= 0)
      v7 = v2;
    else
      v7 = 300;
    WTF::AtomString::number((WTF::AtomString *)v7);
    v8 = *((_QWORD *)this + 13);
    if (!v8)
      goto LABEL_23;
    v9 = *(_DWORD *)(v8 + 4);
    if ((v9 & 1) != 0)
    {
      v10 = *(uint64_t **)(v8 + 40);
      v11 = *(_DWORD *)(v8 + 52);
      if (!v11)
      {
LABEL_23:
        v12 = 0xFFFFFFFFLL;
LABEL_24:
        WebCore::Element::setAttributeInternal(this, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::widthAttr, &v27, 0);
        v15 = v27;
        v27 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
LABEL_27:
        v16 = *((_DWORD *)a2 + 1);
        v17 = *((_QWORD *)this + 31);
        if (v17 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 72))(v17) & 1) != 0)
        {
LABEL_49:
          *((_BYTE *)this + 272) = 0;
          WebCore::HTMLCanvasElement::reset(this);
          return;
        }
        if (v16 >= 0)
          v18 = v16;
        else
          v18 = 150;
        WTF::AtomString::number((WTF::AtomString *)v18);
        v19 = *((_QWORD *)this + 13);
        if (!v19)
          goto LABEL_45;
        v20 = *(_DWORD *)(v19 + 4);
        if ((v20 & 1) != 0)
        {
          v21 = *(uint64_t **)(v19 + 40);
          v22 = *(_DWORD *)(v19 + 52);
          if (!v22)
          {
LABEL_45:
            v23 = 0xFFFFFFFFLL;
LABEL_46:
            WebCore::Element::setAttributeInternal(this, v23, (WebCore::TreeScope *)&WebCore::HTMLNames::heightAttr, &v27, 0);
            v26 = v27;
            v27 = 0;
            if (v26)
            {
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v25);
              else
                *(_DWORD *)v26 -= 2;
            }
            goto LABEL_49;
          }
        }
        else
        {
          v21 = (uint64_t *)(v19 + 32);
          v22 = v20 >> 5;
          if (!v22)
            goto LABEL_45;
        }
        v23 = 0;
        while (1)
        {
          v24 = *v21;
          if (*v21 == WebCore::HTMLNames::heightAttr
            || *(_QWORD *)(v24 + 24) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 24)
            && *(_QWORD *)(v24 + 32) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 32))
          {
            goto LABEL_46;
          }
          ++v23;
          v21 += 2;
          if (v22 == v23)
            goto LABEL_45;
        }
      }
    }
    else
    {
      v10 = (uint64_t *)(v8 + 32);
      v11 = v9 >> 5;
      if (!v11)
        goto LABEL_23;
    }
    v12 = 0;
    while (1)
    {
      v13 = *v10;
      if (*v10 == WebCore::HTMLNames::widthAttr
        || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 24)
        && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 32))
      {
        goto LABEL_24;
      }
      ++v12;
      v10 += 2;
      if (v11 == v12)
        goto LABEL_23;
    }
  }
}

void `non-virtual thunk to'WebCore::HTMLCanvasElement::setSize(WebCore::HTMLCanvasElement *this, const WebCore::IntSize *a2)
{
  WebCore::HTMLCanvasElement::setSize((WebCore::HTMLCanvasElement *)((char *)this - 112), a2);
}

uint64_t WebCore::HTMLCanvasElement::getContext@<X0>(WebCore::HTMLCanvasElement *a1@<X0>, WebCore::JSDOMGlobalObject *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t result;
  _QWORD **v10;
  int v11;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Context2d;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  WTF *v22;
  void *v23;
  _QWORD **v24;
  const WTF::String *v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int **v32;
  uint64_t *v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t ContextWebGL;
  uint64_t v40;
  WebCore::GPU *v41;
  WebCore::LocalDOMWindow *v42;
  WebCore::Navigator *v43;
  const WTF::String *v44;
  uint64_t ContextWebGPU;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _QWORD **v49;
  _QWORD **v50;
  char v51;
  uint64_t *v52;
  uint64_t *v53;
  _QWORD **v54;
  unsigned int *v55;
  unsigned int *v56;
  int v57;
  int v58;
  unsigned int *v59;
  int v60;
  char v61;
  char v62;

  v8 = *((_QWORD *)a1 + 31);
  if (v8)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
    if ((_DWORD)result)
    {
      *(_BYTE *)(a5 + 8) = 8;
      *(_QWORD *)(a5 + 16) = 0;
      *(_DWORD *)(a5 + 32) = 1;
      return result;
    }
    v10 = (_QWORD **)*((_QWORD *)a1 + 31);
    if (((unsigned int (*)(_QWORD **))(*v10)[3])(v10))
    {
      (*(void (**)(_QWORD *))(*v10[4] + 16))(v10[4]);
      result = MEMORY[0x19AEA53F4](*a3, "2d", 2);
      if ((result & 1) != 0)
      {
        *(_QWORD *)(a5 + 8) = v10;
        v11 = 4;
LABEL_6:
        *(_DWORD *)(a5 + 16) = v11;
LABEL_7:
        *(_BYTE *)(a5 + 24) = 1;
LABEL_8:
        *(_DWORD *)(a5 + 32) = 0;
        return result;
      }
      LOBYTE(v59) = 0;
      v61 = 0;
      WebCore::ExceptionOr<std::optional<std::variant<WTF::RefPtr<WebCore::WebGLRenderingContext,WTF::RawPtrTraits<WebCore::WebGLRenderingContext>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderingContext>>,WTF::RefPtr<WebCore::WebGL2RenderingContext,WTF::RawPtrTraits<WebCore::WebGL2RenderingContext>,WTF::DefaultRefDerefTraits<WebCore::WebGL2RenderingContext>>,WTF::RefPtr<WebCore::GPUCanvasContext,WTF::RawPtrTraits<WebCore::GPUCanvasContext>,WTF::DefaultRefDerefTraits<WebCore::GPUCanvasContext>>,WTF::RefPtr<WebCore::ImageBitmapRenderingContext,WTF::RawPtrTraits<WebCore::ImageBitmapRenderingContext>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmapRenderingContext>>,WTF::RefPtr<WebCore::CanvasRenderingContext2D,WTF::RawPtrTraits<WebCore::CanvasRenderingContext2D>,WTF::DefaultRefDerefTraits<WebCore::CanvasRenderingContext2D>>>>>::ExceptionOr(a5, (uint64_t)&v59);
      if (v61)
      {
        if (v60 != -1)
          ((void (*)(unsigned int **, unsigned int **))off_1E33B9188[v60])(&v56, &v59);
      }
      return (*(uint64_t (**)(_QWORD *))(*v10[4] + 24))(v10[4]);
    }
    v24 = (_QWORD **)*((_QWORD *)a1 + 31);
    if (((unsigned int (*)(_QWORD **))(*v24)[8])(v24))
    {
      (*(void (**)(_QWORD *))(*v24[4] + 16))(v24[4]);
      result = MEMORY[0x19AEA53F4](*a3, "bitmaprenderer", 14);
      if (!(_DWORD)result)
      {
        *(_BYTE *)(a5 + 8) = 0;
        *(_BYTE *)(a5 + 24) = 0;
        *(_DWORD *)(a5 + 32) = 0;
        return (*(uint64_t (**)(_QWORD *))(*v24[4] + 24))(v24[4]);
      }
      *(_QWORD *)(a5 + 8) = v24;
      v11 = 3;
      goto LABEL_6;
    }
    v47 = *((_QWORD *)a1 + 31);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 32))(v47) & 1) != 0
      || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(v47), (_DWORD)result))
    {
      if ((MEMORY[0x19AEA53F4](*a3, "webgl", 5) & 1) != 0
        || (MEMORY[0x19AEA53F4](*a3, "experimental-webgl", 18) & 1) != 0
        || (MEMORY[0x19AEA53F4](*a3, "webgl2", 6) & 1) != 0
        || (result = MEMORY[0x19AEA53F4](*a3, "webkit-3d", 9), (result & 1) != 0))
      {
        v48 = MEMORY[0x19AEA53F4](*a3, "webgl2", 6);
        result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 31) + 32))(*((_QWORD *)a1 + 31));
        if (v48 != (_DWORD)result)
        {
          v49 = (_QWORD **)*((_QWORD *)a1 + 31);
          if (((unsigned int (*)(_QWORD **))(*v49)[4])(v49))
          {
            result = (*(uint64_t (**)(_QWORD *))(*v49[4] + 16))(v49[4]);
            *(_QWORD *)(a5 + 8) = v49 - 1;
            *(_DWORD *)(a5 + 16) = 0;
            goto LABEL_7;
          }
          v54 = (_QWORD **)*((_QWORD *)a1 + 31);
          if ((((uint64_t (*)(_QWORD **))(*v54)[5])(v54) & 1) != 0)
          {
            result = (*(uint64_t (**)(_QWORD *))(*v54[4] + 16))(v54[4]);
            *(_QWORD *)(a5 + 8) = v54 - 1;
            *(_DWORD *)(a5 + 16) = 1;
            goto LABEL_7;
          }
LABEL_126:
          __break(0xC471u);
          JUMPOUT(0x195BC19C8);
        }
      }
    }
    else
    {
      v50 = (_QWORD **)*((_QWORD *)a1 + 31);
      if (v50)
      {
        result = ((uint64_t (*)(_QWORD **))(*v50)[6])(v50);
        if ((_DWORD)result)
        {
          (*(void (**)(_QWORD *))(*v50[4] + 16))(v50[4]);
          if ((MEMORY[0x19AEA53F4](*a3, "webgpu", 6) & 1) != 0)
          {
            (*(void (**)(_QWORD *))(*v50[4] + 16))(v50[4]);
            *(_QWORD *)(a5 + 8) = v50;
            *(_DWORD *)(a5 + 16) = 2;
            v51 = 1;
          }
          else
          {
            v51 = 0;
            *(_BYTE *)(a5 + 8) = 0;
          }
          *(_BYTE *)(a5 + 24) = v51;
          *(_DWORD *)(a5 + 32) = 0;
          return (*(uint64_t (**)(_QWORD *))(*v50[4] + 24))(v50[4]);
        }
      }
    }
    *(_BYTE *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 24) = 0;
    goto LABEL_8;
  }
  if (MEMORY[0x19AEA53F4](*a3, "2d", 2))
  {
    v14 = (unsigned int *)*((_QWORD *)a2 + 7);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    v16 = *a4;
    if (*a4 && *(_DWORD *)v16)
    {
      v33 = *(uint64_t **)(v16 + 8);
      if (v33)
      {
        v17 = *v33;
        if ((*v33 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v17 + 5) > 0x16u)
          goto LABEL_15;
      }
      else if (MEMORY[5] > 0x16u)
      {
        v17 = 0;
        goto LABEL_15;
      }
      v17 = 2;
    }
    else
    {
      v17 = 10;
    }
LABEL_15:
    result = WebCore::convertDictionary<WebCore::CanvasRenderingContext2DSettings>(a2, (JSC::JSCell *)v17, (uint64_t)&v56);
    if (v58)
    {
      *(_BYTE *)(a5 + 8) = 37;
      *(_QWORD *)(a5 + 16) = 0;
      *(_DWORD *)(a5 + 32) = 1;
    }
    else
    {
      v59 = v56;
      v60 = v57;
      Context2d = WebCore::HTMLCanvasElement::createContext2d((uint64_t)a1, *a3, (uint64_t *)&v59);
      if (Context2d)
      {
        v19 = Context2d;
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(Context2d + 32) + 16))(*(_QWORD *)(Context2d + 32));
        *(_QWORD *)(a5 + 8) = v19;
        *(_DWORD *)(a5 + 16) = 4;
        *(_BYTE *)(a5 + 24) = 1;
        *(_DWORD *)(a5 + 32) = 0;
      }
      else
      {
        LOBYTE(v59) = 0;
        v61 = 0;
        result = WebCore::ExceptionOr<std::optional<std::variant<WTF::RefPtr<WebCore::WebGLRenderingContext,WTF::RawPtrTraits<WebCore::WebGLRenderingContext>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderingContext>>,WTF::RefPtr<WebCore::WebGL2RenderingContext,WTF::RawPtrTraits<WebCore::WebGL2RenderingContext>,WTF::DefaultRefDerefTraits<WebCore::WebGL2RenderingContext>>,WTF::RefPtr<WebCore::GPUCanvasContext,WTF::RawPtrTraits<WebCore::GPUCanvasContext>,WTF::DefaultRefDerefTraits<WebCore::GPUCanvasContext>>,WTF::RefPtr<WebCore::ImageBitmapRenderingContext,WTF::RawPtrTraits<WebCore::ImageBitmapRenderingContext>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmapRenderingContext>>,WTF::RefPtr<WebCore::CanvasRenderingContext2D,WTF::RawPtrTraits<WebCore::CanvasRenderingContext2D>,WTF::DefaultRefDerefTraits<WebCore::CanvasRenderingContext2D>>>>>::ExceptionOr(a5, (uint64_t)&v59);
        if (v61 && v60 != -1)
          result = ((uint64_t (*)(unsigned int **, unsigned int **))off_1E33B9188[v60])(&v55, &v59);
      }
    }
    if (v14)
    {
      do
      {
        v20 = __ldaxr(v14);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v14));
      if (!v21)
      {
        atomic_store(1u, v14);
        v22 = (WTF *)MEMORY[0x19AEA3AF8](v14);
        return WTF::fastFree(v22, v23);
      }
    }
    return result;
  }
  if (MEMORY[0x19AEA53F4](*a3, "bitmaprenderer", 14))
  {
    v26 = (unsigned int *)*((_QWORD *)a2 + 7);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
    v56 = v26;
    v28 = *a4;
    if (*a4 && *(_DWORD *)v28)
    {
      v52 = *(uint64_t **)(v28 + 8);
      if (v52)
      {
        v29 = *v52;
        if ((*v52 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v29 + 5) > 0x16u)
          goto LABEL_36;
        goto LABEL_115;
      }
      if (MEMORY[5] <= 0x16u)
      {
LABEL_115:
        v29 = 2;
        goto LABEL_36;
      }
      v29 = 0;
    }
    else
    {
      v29 = 10;
    }
LABEL_36:
    WebCore::convertDictionary<WebCore::ImageBitmapRenderingContextSettings>((JSC::JSCell *)v29, (unint64_t)a2, (uint64_t)&v55);
    if (HIDWORD(v55))
    {
      *(_BYTE *)(a5 + 8) = 37;
      *(_QWORD *)(a5 + 16) = 0;
      *(_DWORD *)(a5 + 32) = 1;
    }
    else
    {
      LOBYTE(v59) = (_BYTE)v55;
      v30 = WebCore::HTMLCanvasElement::createContextBitmapRenderer((uint64_t)a1, &v59);
      if (v30)
      {
        v31 = v30;
        (*(void (**)(_QWORD))(**(_QWORD **)(v30 + 32) + 16))(*(_QWORD *)(v30 + 32));
        v59 = (unsigned int *)v31;
        v60 = 3;
        v61 = 1;
      }
      else
      {
        LOBYTE(v59) = 0;
        v61 = 0;
      }
      WebCore::ExceptionOr<std::optional<std::variant<WTF::RefPtr<WebCore::WebGLRenderingContext,WTF::RawPtrTraits<WebCore::WebGLRenderingContext>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderingContext>>,WTF::RefPtr<WebCore::WebGL2RenderingContext,WTF::RawPtrTraits<WebCore::WebGL2RenderingContext>,WTF::DefaultRefDerefTraits<WebCore::WebGL2RenderingContext>>,WTF::RefPtr<WebCore::GPUCanvasContext,WTF::RawPtrTraits<WebCore::GPUCanvasContext>,WTF::DefaultRefDerefTraits<WebCore::GPUCanvasContext>>,WTF::RefPtr<WebCore::ImageBitmapRenderingContext,WTF::RawPtrTraits<WebCore::ImageBitmapRenderingContext>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmapRenderingContext>>,WTF::RefPtr<WebCore::CanvasRenderingContext2D,WTF::RawPtrTraits<WebCore::CanvasRenderingContext2D>,WTF::DefaultRefDerefTraits<WebCore::CanvasRenderingContext2D>>>>>::ExceptionOr(a5, (uint64_t)&v59);
      if (v61 && v60 != -1)
        ((void (*)(char *, unsigned int **))off_1E33B9188[v60])(&v62, &v59);
    }
    v32 = &v56;
    return (uint64_t)WTF::Ref<JSC::VM,WTF::RawPtrTraits<JSC::VM>,WTF::DefaultRefDerefTraits<JSC::VM>>::~Ref(v32);
  }
  if (WebCore::HTMLCanvasElement::isWebGLType((WebCore::HTMLCanvasElement *)a3, v25))
  {
    v34 = (unsigned int *)*((_QWORD *)a2 + 7);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
    v55 = v34;
    v36 = *a4;
    if (!*a4 || !*(_DWORD *)v36)
    {
      v37 = 10;
      goto LABEL_54;
    }
    v53 = *(uint64_t **)(v36 + 8);
    if (v53)
    {
      v37 = *v53;
      if ((*v53 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v37 + 5) > 0x16u)
      {
LABEL_54:
        WebCore::convertDictionary<WebCore::WebGLContextAttributes>(a2, (JSC::JSCell *)v37, (uint64_t)&v56);
        if (!v58)
        {
          v38 = MEMORY[0x19AEA53F4](*a3, "webgl2", 6);
          if (v58)
          {
            std::__throw_bad_variant_access[abi:sn180100]();
            goto LABEL_126;
          }
          ContextWebGL = WebCore::HTMLCanvasElement::createContextWebGL(a1, v38, (uint64_t)v56, v57);
          if (ContextWebGL)
          {
            v40 = ContextWebGL;
            (*(void (**)(_QWORD))(**(_QWORD **)(ContextWebGL + 40) + 16))(*(_QWORD *)(ContextWebGL + 40));
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v40 + 8) + 32))(v40 + 8))
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v40 + 40) + 16))(*(_QWORD *)(v40 + 40));
              v59 = (unsigned int *)v40;
              v60 = 0;
              v61 = 1;
              WebCore::ExceptionOr<std::optional<std::variant<WTF::RefPtr<WebCore::WebGLRenderingContext,WTF::RawPtrTraits<WebCore::WebGLRenderingContext>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderingContext>>,WTF::RefPtr<WebCore::WebGL2RenderingContext,WTF::RawPtrTraits<WebCore::WebGL2RenderingContext>,WTF::DefaultRefDerefTraits<WebCore::WebGL2RenderingContext>>,WTF::RefPtr<WebCore::GPUCanvasContext,WTF::RawPtrTraits<WebCore::GPUCanvasContext>,WTF::DefaultRefDerefTraits<WebCore::GPUCanvasContext>>,WTF::RefPtr<WebCore::ImageBitmapRenderingContext,WTF::RawPtrTraits<WebCore::ImageBitmapRenderingContext>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmapRenderingContext>>,WTF::RefPtr<WebCore::CanvasRenderingContext2D,WTF::RawPtrTraits<WebCore::CanvasRenderingContext2D>,WTF::DefaultRefDerefTraits<WebCore::CanvasRenderingContext2D>>>>>::ExceptionOr(a5, (uint64_t)&v59);
              if (v61 && v60 != -1)
                ((void (*)(char *, unsigned int **))off_1E33B9188[v60])(&v62, &v59);
              (*(void (**)(_QWORD))(**(_QWORD **)(v40 + 40) + 24))(*(_QWORD *)(v40 + 40));
              goto LABEL_62;
            }
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v40 + 8) + 40))(v40 + 8) & 1) == 0)
              goto LABEL_126;
            v59 = (unsigned int *)v40;
            v60 = 1;
            v61 = 1;
          }
          else
          {
            LOBYTE(v59) = 0;
            v61 = 0;
          }
          WebCore::ExceptionOr<std::optional<std::variant<WTF::RefPtr<WebCore::WebGLRenderingContext,WTF::RawPtrTraits<WebCore::WebGLRenderingContext>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderingContext>>,WTF::RefPtr<WebCore::WebGL2RenderingContext,WTF::RawPtrTraits<WebCore::WebGL2RenderingContext>,WTF::DefaultRefDerefTraits<WebCore::WebGL2RenderingContext>>,WTF::RefPtr<WebCore::GPUCanvasContext,WTF::RawPtrTraits<WebCore::GPUCanvasContext>,WTF::DefaultRefDerefTraits<WebCore::GPUCanvasContext>>,WTF::RefPtr<WebCore::ImageBitmapRenderingContext,WTF::RawPtrTraits<WebCore::ImageBitmapRenderingContext>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmapRenderingContext>>,WTF::RefPtr<WebCore::CanvasRenderingContext2D,WTF::RawPtrTraits<WebCore::CanvasRenderingContext2D>,WTF::DefaultRefDerefTraits<WebCore::CanvasRenderingContext2D>>>>>::ExceptionOr(a5, (uint64_t)&v59);
          if (v61 && v60 != -1)
            ((void (*)(char *, unsigned int **))off_1E33B9188[v60])(&v62, &v59);
          goto LABEL_62;
        }
        *(_BYTE *)(a5 + 8) = 37;
        *(_QWORD *)(a5 + 16) = 0;
        *(_DWORD *)(a5 + 32) = 1;
LABEL_62:
        v32 = &v55;
        return (uint64_t)WTF::Ref<JSC::VM,WTF::RawPtrTraits<JSC::VM>,WTF::DefaultRefDerefTraits<JSC::VM>>::~Ref(v32);
      }
    }
    else if (MEMORY[5] > 0x16u)
    {
      v37 = 0;
      goto LABEL_54;
    }
    v37 = 2;
    goto LABEL_54;
  }
  if (MEMORY[0x19AEA53F4](*a3, "webgpu", 6))
  {
    v42 = *(WebCore::LocalDOMWindow **)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 696);
    if (v42)
    {
      ++*((_DWORD *)v42 + 6);
      v43 = (WebCore::Navigator *)WebCore::LocalDOMWindow::navigator(v42);
      v44 = (const WTF::String *)WebCore::Navigator::gpu(v43);
      if (*((_DWORD *)v42 + 6) == 1)
        (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v42 + 72))(v42);
      else
        --*((_DWORD *)v42 + 6);
    }
    else
    {
      v44 = 0;
    }
    ContextWebGPU = WebCore::HTMLCanvasElement::createContextWebGPU(a1, v44, v41);
    if (ContextWebGPU)
    {
      v46 = ContextWebGPU;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(ContextWebGPU + 32) + 16))(*(_QWORD *)(ContextWebGPU + 32));
      *(_QWORD *)(a5 + 8) = v46;
      v11 = 2;
      goto LABEL_6;
    }
  }
  LOBYTE(v59) = 0;
  v61 = 0;
  result = WebCore::ExceptionOr<std::optional<std::variant<WTF::RefPtr<WebCore::WebGLRenderingContext,WTF::RawPtrTraits<WebCore::WebGLRenderingContext>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderingContext>>,WTF::RefPtr<WebCore::WebGL2RenderingContext,WTF::RawPtrTraits<WebCore::WebGL2RenderingContext>,WTF::DefaultRefDerefTraits<WebCore::WebGL2RenderingContext>>,WTF::RefPtr<WebCore::GPUCanvasContext,WTF::RawPtrTraits<WebCore::GPUCanvasContext>,WTF::DefaultRefDerefTraits<WebCore::GPUCanvasContext>>,WTF::RefPtr<WebCore::ImageBitmapRenderingContext,WTF::RawPtrTraits<WebCore::ImageBitmapRenderingContext>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmapRenderingContext>>,WTF::RefPtr<WebCore::CanvasRenderingContext2D,WTF::RawPtrTraits<WebCore::CanvasRenderingContext2D>,WTF::DefaultRefDerefTraits<WebCore::CanvasRenderingContext2D>>>>>::ExceptionOr(a5, (uint64_t)&v59);
  if (v61 && v60 != -1)
    return ((uint64_t (*)(unsigned int **, unsigned int **))off_1E33B9188[v60])(&v56, &v59);
  return result;
}

uint64_t WebCore::ExceptionOr<std::optional<std::variant<WTF::RefPtr<WebCore::WebGLRenderingContext,WTF::RawPtrTraits<WebCore::WebGLRenderingContext>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderingContext>>,WTF::RefPtr<WebCore::WebGL2RenderingContext,WTF::RawPtrTraits<WebCore::WebGL2RenderingContext>,WTF::DefaultRefDerefTraits<WebCore::WebGL2RenderingContext>>,WTF::RefPtr<WebCore::GPUCanvasContext,WTF::RawPtrTraits<WebCore::GPUCanvasContext>,WTF::DefaultRefDerefTraits<WebCore::GPUCanvasContext>>,WTF::RefPtr<WebCore::ImageBitmapRenderingContext,WTF::RawPtrTraits<WebCore::ImageBitmapRenderingContext>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmapRenderingContext>>,WTF::RefPtr<WebCore::CanvasRenderingContext2D,WTF::RawPtrTraits<WebCore::CanvasRenderingContext2D>,WTF::DefaultRefDerefTraits<WebCore::CanvasRenderingContext2D>>>>>::ExceptionOr(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    *(_DWORD *)(a1 + 16) = -1;
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
    {
      ((void (*)(char *))off_1E33B9BB0[v3])(&v5);
      *(_DWORD *)(a1 + 16) = v3;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_DWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t WebCore::HTMLCanvasElement::isWebGLType(WebCore::HTMLCanvasElement *this, const WTF::String *a2)
{
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "webgl", 5) & 1) == 0
    && (MEMORY[0x19AEA53F4](*(_QWORD *)this, "experimental-webgl", 18) & 1) == 0
    && (MEMORY[0x19AEA53F4](*(_QWORD *)this, "webgl2", 6) & 1) == 0)
  {
    JUMPOUT(0x19AEA53F4);
  }
  return 1;
}

uint64_t WebCore::HTMLCanvasElement::createContext2d(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v5;
  WebCore::CanvasRenderingContext *v6;
  uint64_t v8;
  WebCore::InspectorInstrumentation *v10;
  WebCore::ScriptExecutionContext *v11;
  uint64_t v12;
  WebCore::InspectorCanvasAgent *v13;
  uint64_t v14;
  WebCore::Node *ElementSibling;
  WebCore::Element *v16;

  MEMORY[0x19AEA53F4](a2, "2d", 2);
  v5 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3384) == 2;
  v6 = (WebCore::CanvasRenderingContext *)bmalloc::api::isoAllocate();
  WebCore::CanvasRenderingContext2D::CanvasRenderingContext2D((uint64_t)v6, a1 + 112, a3, v5);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v10 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)v6 + 4) + 144))(*((_QWORD **)v6 + 4));
    if (v10)
    {
      v12 = WebCore::InspectorInstrumentation::instrumentingAgents(v10, v11);
      if (v12)
      {
        v13 = *(WebCore::InspectorCanvasAgent **)(v12 + 96);
        if (v13)
          WebCore::InspectorCanvasAgent::didCreateCanvasRenderingContext(v13, v6);
      }
    }
  }
  v8 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v6;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WebCore::Node::invalidateStyle(a1, 3u, 1);
  if ((*(_BYTE *)(a1 + 71) & 1) != 0)
  {
    v14 = *(_QWORD *)(a1 + 32);
    if (!v14 || (*(_WORD *)(v14 + 28) & 8) == 0 || (*(_BYTE *)(v14 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(a1);
      WebCore::invalidateForSiblingCombinators(ElementSibling, v16);
    }
  }
  return *(_QWORD *)(a1 + 248);
}

unsigned int **WTF::Ref<JSC::VM,WTF::RawPtrTraits<JSC::VM>,WTF::DefaultRefDerefTraits<JSC::VM>>::~Ref(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WTF *v6;
  void *v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = (WTF *)MEMORY[0x19AEA3AF8]();
      WTF::fastFree(v6, v7);
    }
  }
  return a1;
}

uint64_t WebCore::HTMLCanvasElement::createContextBitmapRenderer(uint64_t a1, _BYTE *a2)
{
  WebCore::CanvasBase *v4;
  uint64_t v5;
  WebCore::CanvasRenderingContext *v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  WebCore::ImageBitmapRenderingContext *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  void *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  WebCore::InspectorInstrumentation *v23;
  WebCore::ScriptExecutionContext *v24;
  uint64_t v25;
  WebCore::InspectorCanvasAgent *v26;
  uint64_t v27;
  WebCore::Node *ElementSibling;
  WebCore::Element *v29;
  bmalloc::api *v30;
  _BYTE v31[8];
  WTF::StringImpl *v32;
  char v33;

  v4 = (WebCore::CanvasBase *)(a1 + 112);
  v5 = bmalloc::api::isoAllocate();
  v6 = WebCore::CanvasRenderingContext::CanvasRenderingContext((WebCore::CanvasRenderingContext *)v5, v4);
  *(_QWORD *)v6 = off_1E33DD028;
  *((_DWORD *)v6 + 10) = 1;
  *((_BYTE *)v6 + 44) = *a2;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v23 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 32) + 144))(*(_QWORD *)(v5 + 32));
    if (v23)
    {
      v25 = WebCore::InspectorInstrumentation::instrumentingAgents(v23, v24);
      if (v25)
      {
        v26 = *(WebCore::InspectorCanvasAgent **)(v25 + 96);
        if (v26)
          WebCore::InspectorCanvasAgent::didCreateCanvasRenderingContext(v26, (WebCore::CanvasRenderingContext *)v5);
      }
    }
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (v8)
    goto LABEL_38;
  v8 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = v5;
  v20 = *(unsigned int **)(v5 + 16);
  *(_QWORD *)(v5 + 16) = v8;
  if (!v20)
    goto LABEL_38;
  do
  {
    v21 = __ldaxr(v20);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v20));
  if (!v22)
  {
    atomic_store(1u, v20);
    WTF::fastFree((WTF *)v20, v19);
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (v8)
  {
LABEL_38:
    do
      v9 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v9 + 1, (unsigned int *)v8));
  }
  v10 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v5;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v8)
    v11 = *(WebCore::ImageBitmapRenderingContext **)(v8 + 8);
  else
    v11 = 0;
  v30 = 0;
  WebCore::ImageBitmapRenderingContext::transferFromImageBitmap(v11, &v30, (uint64_t)v31);
  if (v33)
  {
    v13 = v32;
    v32 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  v30 = 0;
  WebCore::Node::invalidateStyle(a1, 3u, 1);
  if ((*(_BYTE *)(a1 + 71) & 1) != 0)
  {
    v27 = *(_QWORD *)(a1 + 32);
    if (!v27 || (*(_WORD *)(v27 + 28) & 8) == 0 || (*(_BYTE *)(v27 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(a1);
      WebCore::invalidateForSiblingCombinators(ElementSibling, v29);
    }
  }
  if (!v8)
    return 0;
  v15 = *(_QWORD *)(v8 + 8);
  do
  {
    v16 = __ldaxr((unsigned int *)v8);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)v8));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)v8);
    WTF::fastFree((WTF *)v8, v14);
  }
  return v15;
}

uint64_t WebCore::HTMLCanvasElement::createContextWebGL(_QWORD *a1, int a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v4;
  void *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  WebCore::Node *ElementSibling;
  WebCore::Element *v27;
  WTF::StringImpl *v28;

  v4 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 680);
  if (~*(_DWORD *)(v4 + 664) & 0x10 | (unint64_t)(~*(_DWORD *)(v4 + 704) & 0x200000))
    return 0;
  WebCore::WebGLRenderingContextBase::create((WebCore::CanvasBase *)(a1 + 14), a3, a4, a2, &v28);
  v7 = v28;
  if (v28)
  {
    v8 = *((_QWORD *)v28 + 3);
    if (v8)
      goto LABEL_46;
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = (char *)v7 + 8;
    v22 = (unsigned int *)*((_QWORD *)v7 + 3);
    *((_QWORD *)v7 + 3) = v8;
    if (!v22)
      goto LABEL_46;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v6);
    }
    v8 = *((_QWORD *)v7 + 3);
    if (v8)
    {
LABEL_46:
      do
        v9 = __ldaxr((unsigned int *)v8);
      while (__stlxr(v9 + 1, (unsigned int *)v8));
    }
  }
  else
  {
    v8 = 0;
  }
  v11 = v28;
  v28 = 0;
  if (v11)
    v12 = (char *)v11 + 8;
  else
    v12 = 0;
  v13 = a1[31];
  a1[31] = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (v8)
  {
    if (*(_QWORD *)(v8 + 8))
    {
      WebCore::Node::invalidateStyle((uint64_t)a1, 3u, 1);
      v14 = a1[8];
      if ((v14 & 0x100000000000000) != 0)
      {
        v25 = a1[4];
        if (!v25 || (*(_WORD *)(v25 + 28) & 8) == 0 || (*(_BYTE *)(v25 + 70) & 4) == 0)
        {
          ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)a1);
          WebCore::invalidateForSiblingCombinators(ElementSibling, v27);
          v14 = a1[8];
        }
      }
      v15 = v14 & 0xFFFFFFFFFFFFLL;
      if ((v14 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v14 & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
      {
        v16 = *(_DWORD *)((v14 & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
        *(_DWORD *)(v15 + 16) = v16;
        if ((*(_BYTE *)(v15 + 21) & 0x80) != 0)
        {
          WebCore::RenderLayer::contentChanged(*(_QWORD *)(v15 + 144), (const WebCore::RenderObject *)3);
          v16 = *(_DWORD *)(v15 + 16);
        }
        if (!v16)
        {
          __break(0xC471u);
          JUMPOUT(0x195BC2080);
        }
        *(_DWORD *)(v15 + 16) = v16 - 1;
      }
    }
    v17 = *(_QWORD *)(v8 + 8);
    if (v17)
      v10 = v17 - 8;
    else
      v10 = 0;
    do
    {
      v18 = __ldaxr((unsigned int *)v8);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)v8));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)v8);
      WTF::fastFree((WTF *)v8, v6);
    }
  }
  else
  {
    v10 = 0;
  }
  v20 = v28;
  v28 = 0;
  if (v20)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 8))(v20);
  return v10;
}

uint64_t WebCore::HTMLCanvasElement::createContextWebGPU(WebCore::HTMLCanvasElement *this, const WTF::String *a2, WebCore::GPU *a3)
{
  uint64_t result;
  WebCore::GPUCanvasContextCocoa *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Node *ElementSibling;
  WebCore::Element *v9;
  WebCore::GPUCanvasContextCocoa *v10;

  result = 0;
  if (a2 && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 704) & 0x1000000) != 0)
  {
    WebCore::GPUCanvasContext::create((WebCore::HTMLCanvasElement *)((char *)this + 112), a2, &v10);
    v5 = v10;
    v6 = *((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = v10;
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v5 = (WebCore::GPUCanvasContextCocoa *)*((_QWORD *)this + 31);
    }
    if (v5)
    {
      WebCore::Node::invalidateStyle((uint64_t)this, 3u, 1);
      if ((*((_BYTE *)this + 71) & 1) != 0)
      {
        v7 = *((_QWORD *)this + 4);
        if (!v7 || (*(_WORD *)(v7 + 28) & 8) == 0 || (*(_BYTE *)(v7 + 70) & 4) == 0)
        {
          ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
          WebCore::invalidateForSiblingCombinators(ElementSibling, v9);
        }
      }
      return *((_QWORD *)this + 31);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::HTMLCanvasElement::getContext(WebCore::HTMLCanvasElement *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t ContextWebGL;
  _BYTE v11[9];

  if (MEMORY[0x19AEA53F4](*(_QWORD *)a2, "2d", 2))
  {
    *(_WORD *)v11 = 0;
    v11[2] = 0;
    v11[4] = 0;
    v11[8] = 0;
    MEMORY[0x19AEA53F4](*(_QWORD *)a2, "2d", 2);
    v4 = *((_QWORD *)this + 31);
    if (!v4)
      return WebCore::HTMLCanvasElement::createContext2d((uint64_t)this, *(_QWORD *)a2, (uint64_t *)v11);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4))
    {
      result = *((_QWORD *)this + 31);
      if (result)
        return result;
      return WebCore::HTMLCanvasElement::createContext2d((uint64_t)this, *(_QWORD *)a2, (uint64_t *)v11);
    }
    return 0;
  }
  if (MEMORY[0x19AEA53F4](*(_QWORD *)a2, "bitmaprenderer", 14))
  {
    v11[0] = 1;
    result = *((_QWORD *)this + 31);
    if (!result)
      return WebCore::HTMLCanvasElement::createContextBitmapRenderer((uint64_t)this, v11);
    return result;
  }
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)a2, "webgl", 5) & 1) == 0
    && (MEMORY[0x19AEA53F4](*(_QWORD *)a2, "experimental-webgl", 18) & 1) == 0
    && (MEMORY[0x19AEA53F4](*(_QWORD *)a2, "webgl2", 6) & 1) == 0
    && !MEMORY[0x19AEA53F4](*(_QWORD *)a2, "webkit-3d", 9))
  {
    if (MEMORY[0x19AEA53F4](*(_QWORD *)a2, "webgpu", 6)
      && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 704) & 0x1000000) != 0)
    {
      result = *((_QWORD *)this + 31);
      if (!result)
        return result;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 48))(result))
        return *((_QWORD *)this + 31);
    }
    return 0;
  }
  v6 = MEMORY[0x19AEA53F4](*(_QWORD *)a2, "webgl2", 6);
  *(_DWORD *)v11 = 16777473;
  v11[4] = 1;
  *(_DWORD *)&v11[5] = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680);
  if (~*(_DWORD *)(v7 + 664) & 0x10 | (unint64_t)(~*(_DWORD *)(v7 + 704) & 0x200000))
  {
LABEL_20:
    ContextWebGL = 0;
    goto LABEL_22;
  }
  v8 = v6;
  v9 = *((_QWORD *)this + 31);
  if (v9)
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v9 + 32))(*((_QWORD *)this + 31)) & 1) != 0
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9))
    {
      if (v8 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9))
        ContextWebGL = v9 - 8;
      else
        ContextWebGL = 0;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  ContextWebGL = WebCore::HTMLCanvasElement::createContextWebGL(this, v6, *(uint64_t *)v11, 0);
LABEL_22:
  if (ContextWebGL)
    return ContextWebGL + 8;
  else
    return 0;
}

void WebCore::HTMLCanvasElement::didDraw(uint64_t a1, float32x2_t *a2, int a3)
{
  _DWORD *v6;
  uint64_t v7;
  WebCore::RenderView *v8;
  WebCore::RenderLayerCompositor *v9;
  int v10;
  uint64_t v11;
  WebCore::CanvasRenderingContext *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  float v28;
  BOOL v29;
  float v30;
  float v31;
  float v32;
  BOOL v33;
  float v34;
  float v35;
  BOOL v36;
  float v37;
  int v38;
  int v39;
  float v40;
  float v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  int32x2_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  float32x2_t v56;
  float32x2_t v57;
  int8x8_t v58;
  int32x2_t v59;
  int8x8_t v60;
  float32x2_t v61;
  float32x2_t v62;
  int8x8_t v63;
  int8x8_t v64;
  float32x2_t v65;
  float32x2_t v66;
  int8x8_t v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  BOOL v73;
  float v74;
  float v75;
  BOOL v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  BOOL v82;
  float v83;
  float v84;
  BOOL v85;
  float v86;
  int v87;
  int v88;
  float v89;
  float v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  BOOL v96;
  int v97;
  uint64_t v98;
  int v99;
  WebCore::RenderLayerCompositor *v100;
  WebCore::RenderLayerCompositor *v101;
  WTF *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char v108;
  float v109[4];
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v6 = *(_DWORD **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  *(_BYTE *)(a1 + 273) = 0;
  v7 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
  if (v7 && (*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
  {
    ++*(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    if (*(_QWORD *)(a1 + 248))
    {
      v8 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8)
                                   + 1944);
      v9 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v8 + 50);
      if (!v9)
      {
        v100 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v9 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v100, v8);
        v101 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v8 + 50);
        *((_QWORD *)v8 + 50) = v9;
        if (v101)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v101);
          WTF::fastFree(v102, v103);
          v9 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v8 + 50);
        }
      }
      if (*((_BYTE *)v9 + 132)
        && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 120))(*(_QWORD *)(a1 + 248)))
      {
        if ((*(_BYTE *)(v7 + 21) & 0x80) != 0)
          WebCore::RenderLayer::contentChanged(*(_QWORD *)(v7 + 144), (const WebCore::RenderObject *)4);
        goto LABEL_11;
      }
    }
    if (!a2[2].i8[0])
    {
LABEL_11:
      v10 = *(_DWORD *)(v7 + 16);
      if (!v10)
      {
        __break(0xC471u);
        JUMPOUT(0x195BC2A8CLL);
      }
      *(_DWORD *)(v7 + 16) = v10 - 1;
      goto LABEL_13;
    }
    v48 = *(_BYTE *)(v7 + 52) & 7;
    if (v48 == 3)
    {
      ++*(_DWORD *)(v7 + 16);
      *(_QWORD *)&v110 = WebCore::RenderReplaced::intrinsicSize(v7);
      v49 = WebCore::RenderReplaced::replacedContentRect((WebCore::RenderReplaced *)v7, (int32x2_t *)&v110);
    }
    else
    {
      v49 = WebCore::RenderBox::contentBoxRect((WebCore::RenderBox *)v7);
    }
    if (v48 == 3)
    {
      v55 = *(_DWORD *)(v7 + 16);
      if (!v55)
      {
        __break(0xC471u);
        goto LABEL_160;
      }
      *(_DWORD *)(v7 + 16) = v55 - 1;
    }
    v55 = a2[2].u8[0];
    if (a2[2].i8[0])
    {
      v56 = (float32x2_t)vdup_n_s32(0x3C800000u);
      v57 = vmul_f32(vcvt_f32_s32(v50), v56);
      v58 = (int8x8_t)vmul_f32(vcvt_f32_s32((int32x2_t)v49), v56);
      v59 = *(int32x2_t *)(a1 + 120);
      v60 = 0;
      if (v59.i32[0])
      {
        v61 = 0;
        if (v59.i32[1])
        {
          v62 = vdiv_f32(v57, vcvt_f32_s32(v59));
          v60 = (int8x8_t)vmla_f32((float32x2_t)v58, v62, *a2);
          v61 = vmul_f32(v62, a2[1]);
        }
      }
      else
      {
        v61 = 0;
      }
      v63 = (int8x8_t)vadd_f32((float32x2_t)v60, v61);
      v64 = (int8x8_t)vadd_f32((float32x2_t)v58, v57);
      v65 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v58, (float32x2_t)v60), v58, v60);
      v66 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v63, (float32x2_t)v64), v64, v63);
      v67 = vmvn_s8((int8x8_t)vcge_f32(v65, v66));
      if ((v67.i32[0] & v67.i32[1] & 1) != 0)
      {
        v68 = v65.f32[1];
        v69 = v66.f32[1];
      }
      else
      {
        v65.i32[0] = 0;
        v68 = 0.0;
        v66.i32[0] = 0;
        v69 = 0.0;
      }
      v70 = v66.f32[0] - v65.f32[0];
      if ((float)(v66.f32[0] - v65.f32[0]) <= 0.0)
        goto LABEL_11;
      v71 = v69 - v68;
      if ((float)(v69 - v68) <= 0.0)
        goto LABEL_11;
      v72 = floorf(v65.f32[0]);
      v73 = v72 >= 2147500000.0 || v72 <= -2147500000.0;
      if (!v73 || (v74 = 2147500000.0, v72 < 2147500000.0) && (v74 = -2147500000.0, v72 > -2147500000.0))
        v74 = (float)(int)v72;
      v75 = floorf(v68);
      v76 = v75 >= 2147500000.0 || v75 <= -2147500000.0;
      if (!v76 || (v77 = 2147500000.0, v75 < 2147500000.0) && (v77 = -2147500000.0, v75 > -2147500000.0))
        v77 = (float)(int)v75;
      v78 = v68 + v71;
      v79 = ceilf(v65.f32[0] + v70);
      v80 = 2147500000.0;
      v81 = -2147500000.0;
      if (v79 > -2147500000.0)
        v81 = (float)(int)v79;
      if (v79 >= 2147500000.0)
      {
        v82 = 1;
      }
      else
      {
        v80 = v81;
        v82 = v79 <= -2147500000.0;
      }
      if (v82)
        v83 = v80;
      else
        v83 = (float)(int)v79;
      v84 = ceilf(v78);
      v85 = v84 >= 2147500000.0 || v84 <= -2147500000.0;
      if (!v85 || (v86 = 2147500000.0, v84 < 2147500000.0) && (v86 = -2147500000.0, v84 > -2147500000.0))
        v86 = (float)(int)v84;
      if (v74 < 2147500000.0 && v74 > -2147500000.0)
        goto LABEL_116;
      if (v74 >= 2147500000.0)
      {
        v87 = 0x7FFFFFFF;
        goto LABEL_117;
      }
      if (v74 > -2147500000.0)
LABEL_116:
        v87 = (int)v74;
      else
        v87 = 0x80000000;
LABEL_117:
      if (v77 < 2147500000.0 && v77 > -2147500000.0)
        goto LABEL_119;
      if (v77 >= 2147500000.0)
      {
        v88 = 0x7FFFFFFF;
      }
      else
      {
        if (v77 > -2147500000.0)
        {
LABEL_119:
          v88 = (int)v77;
          goto LABEL_120;
        }
        v88 = 0x80000000;
      }
LABEL_120:
      v89 = v83 - v74;
      v90 = v86 - v77;
      if (v89 < 2147500000.0 && v89 > -2147500000.0)
        goto LABEL_122;
      if (v89 >= 2147500000.0)
      {
        v91 = 0x7FFFFFFF;
        goto LABEL_123;
      }
      if (v89 > -2147500000.0)
LABEL_122:
        v91 = (int)v89;
      else
        v91 = 0x80000000;
LABEL_123:
      if (v90 < 2147500000.0 && v90 > -2147500000.0)
        goto LABEL_125;
      if (v90 >= 2147500000.0)
      {
        v92 = 0x7FFFFFFF;
      }
      else
      {
        if (v90 > -2147500000.0)
        {
LABEL_125:
          v92 = (int)v90;
          goto LABEL_126;
        }
        v92 = 0x80000000;
      }
LABEL_126:
      v53 = v87 << 6;
      if (v87 < -33554432)
        v53 = 0x80000000;
      if (v87 > 0x1FFFFFF)
        v53 = 0x7FFFFFFF;
      v55 = v88 << 6;
      if (v88 < -33554432)
        v55 = 0x80000000;
      if (v88 > 0x1FFFFFF)
        v55 = 0x7FFFFFFF;
      LODWORD(v51) = v91 << 6;
      if (v91 < -33554432)
        LODWORD(v51) = 0x80000000;
      if (v91 <= 0x1FFFFFF)
        v51 = v51;
      else
        v51 = 0x7FFFFFFFLL;
      LODWORD(v52) = v92 << 6;
      if (v92 < -33554432)
        LODWORD(v52) = 0x80000000;
      if (v92 <= 0x1FFFFFF)
        v52 = v52;
      else
        v52 = 0x7FFFFFFFLL;
      v93 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8) + 1944);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v93 + 24) + 8) + 40) + 8) + 3382))
        goto LABEL_11;
      v94 = *(_QWORD *)(v93 + 248);
      v54 = *(unsigned int *)(v94 + 508);
      if ((_DWORD)v54 && (v54 = *(_QWORD *)(*(_QWORD *)(v94 + 496) + 8 * v54 - 8)) != 0)
      {
        v95 = *(_DWORD *)(v54 + 64);
        LODWORD(v54) = *(_DWORD *)(v54 + 68);
      }
      else
      {
        v95 = 0;
      }
      v96 = __OFADD__(v53, v95);
      v97 = v53 + v95;
      if (!v96)
        goto LABEL_149;
      goto LABEL_161;
    }
LABEL_160:
    __break(1u);
LABEL_161:
    v97 = (v53 >> 31) + 0x7FFFFFFF;
LABEL_149:
    v98 = v51 | (v52 << 32);
    v99 = v55 + v54;
    if (__OFADD__(v55, (_DWORD)v54))
      v99 = (v55 >> 31) + 0x7FFFFFFF;
    *(_QWORD *)&v110 = __PAIR64__(v99, v97);
    *((_QWORD *)&v110 + 1) = v98;
    LOBYTE(v111) = 1;
    LOBYTE(v106) = 0;
    v108 = 0;
    WebCore::RenderObject::issueRepaint(v7, &v110, 1, 0, (uint64_t)&v106);
    goto LABEL_11;
  }
LABEL_13:
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 88))(a1 + 112);
  if (v11)
  {
    v12 = (WebCore::CanvasRenderingContext *)v11;
    if (!*(_BYTE *)(v11 + 24))
    {
      v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 144))(a1 + 112);
      if (v47)
      {
        if (!*(_BYTE *)(v47 + 274))
          WebCore::Document::addCanvasNeedingPreparationForDisplayOrFlush((WebCore::Document *)(v47 - 192), v12);
      }
    }
  }
  v13 = *(_QWORD *)(a1 + 120);
  v106 = 0;
  v107 = v13;
  v14 = HIDWORD(v13);
  if (!a2[2].i8[0])
  {
    v15 = 0;
    goto LABEL_17;
  }
  v24 = a2->f32[1];
  v25 = floorf(a2->f32[0]);
  v26 = v25 >= 2147500000.0 || v25 <= -2147500000.0;
  if (!v26 || (v27 = 2147500000.0, v25 < 2147500000.0) && (v27 = -2147500000.0, v25 > -2147500000.0))
    v27 = (float)(int)v25;
  v28 = floorf(v24);
  v29 = v28 >= 2147500000.0 || v28 <= -2147500000.0;
  if (!v29 || (v30 = 2147500000.0, v28 < 2147500000.0) && (v30 = -2147500000.0, v28 > -2147500000.0))
    v30 = (float)(int)v28;
  v31 = v24 + a2[1].f32[1];
  v32 = ceilf(a2->f32[0] + a2[1].f32[0]);
  v33 = v32 >= 2147500000.0 || v32 <= -2147500000.0;
  if (!v33 || (v34 = 2147500000.0, v32 < 2147500000.0) && (v34 = -2147500000.0, v32 > -2147500000.0))
    v34 = (float)(int)v32;
  v35 = ceilf(v31);
  v36 = v35 >= 2147500000.0 || v35 <= -2147500000.0;
  if (!v36 || (v37 = 2147500000.0, v35 < 2147500000.0) && (v37 = -2147500000.0, v35 > -2147500000.0))
    v37 = (float)(int)v35;
  if (v27 < 2147500000.0 && v27 > -2147500000.0)
    goto LABEL_58;
  if (v27 >= 2147500000.0)
  {
    v38 = 0x7FFFFFFF;
  }
  else
  {
    if (v27 > -2147500000.0)
    {
LABEL_58:
      v38 = (int)v27;
      goto LABEL_59;
    }
    v38 = 0x80000000;
  }
LABEL_59:
  if (v30 < 2147500000.0 && v30 > -2147500000.0)
    goto LABEL_61;
  if (v30 >= 2147500000.0)
  {
    v39 = 0x7FFFFFFF;
    goto LABEL_62;
  }
  if (v30 > -2147500000.0)
LABEL_61:
    v39 = (int)v30;
  else
    v39 = 0x80000000;
LABEL_62:
  v40 = v34 - v27;
  v41 = v37 - v30;
  if (v40 < 2147500000.0 && v40 > -2147500000.0)
    goto LABEL_64;
  if (v40 >= 2147500000.0)
  {
    v42 = 0x7FFFFFFF;
  }
  else
  {
    if (v40 > -2147500000.0)
    {
LABEL_64:
      v42 = (int)v40;
      goto LABEL_65;
    }
    v42 = 0x80000000;
  }
LABEL_65:
  if (v41 < 2147500000.0 && v41 > -2147500000.0)
    goto LABEL_67;
  if (v41 >= 2147500000.0)
  {
    v43 = 0x7FFFFFFF;
    goto LABEL_68;
  }
  if (v41 > -2147500000.0)
LABEL_67:
    v43 = (int)v41;
  else
    v43 = 0x80000000;
LABEL_68:
  v44 = v38 & ~(v38 >> 31);
  v45 = v42 + v38;
  if (v45 < (int)v13)
    LODWORD(v13) = v45;
  if (v43 + v39 < (int)v14)
    LODWORD(v14) = v43 + v39;
  if (v44 >= (int)v13 || (v46 = v39 & ~(v39 >> 31), v46 >= (int)v14))
  {
    v44 = 0;
    v46 = 0;
    LODWORD(v13) = 0;
    LODWORD(v14) = 0;
  }
  v106 = __PAIR64__(v46, v44);
  LODWORD(v13) = v13 - v44;
  LODWORD(v14) = v14 - v46;
  v107 = __PAIR64__(v14, v13);
  v15 = __PAIR64__(v46, v44);
LABEL_17:
  v109[0] = (float)(int)v15;
  v109[1] = (float)SHIDWORD(v15);
  v109[2] = (float)(int)v13;
  v109[3] = (float)(int)v14;
  v16 = *(_QWORD *)(a1 + 192);
  if (v16)
  {
    v22 = *(unsigned int *)(v16 - 4);
    v18 = v16 + 8 * v22;
    if (*(_DWORD *)(v16 - 12))
    {
      v17 = *(_QWORD *)(a1 + 192);
      if ((_DWORD)v22)
      {
        v23 = 8 * v22;
        v17 = *(_QWORD *)(a1 + 192);
        while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
        {
          v17 += 8;
          v23 -= 8;
          if (!v23)
          {
            v17 = v18;
            break;
          }
        }
      }
    }
    else
    {
      v17 = v16 + 8 * v22;
      v18 = v17;
    }
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  *(_QWORD *)&v110 = a1 + 192;
  *((_QWORD *)&v110 + 1) = v17;
  v111 = v18;
  if (v16)
  {
    v20 = *(unsigned int *)(v16 - 4);
    v19 = v16 + 8 * v20;
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  v112 = v19;
  v113 = v16 + 8 * v20;
  if (v17 != v19)
  {
    if (!*(_QWORD *)(*(_QWORD *)v17 + 8))
    {
      v104 = v17;
      do
      {
        v105 = v104 + 8;
        v104 = v18;
        if (v105 != v18)
        {
          v104 = v105;
          while ((unint64_t)(*(_QWORD *)v104 + 1) <= 1)
          {
            v104 += 8;
            if (v104 == v18)
            {
              v104 = v18;
              break;
            }
          }
        }
        v17 = v19;
        if (v104 == v19)
          break;
        v17 = v104;
      }
      while (!*(_QWORD *)(*(_QWORD *)v104 + 8));
    }
    *((_QWORD *)&v110 + 1) = v17;
  }
  if (v16)
    v21 = v16 + 8 * *(unsigned int *)(v16 - 4);
  else
    v21 = 0;
  while (v17 != v21)
  {
    (*(void (**)(_QWORD, uint64_t, float *))(**(_QWORD **)(*(_QWORD *)v17 + 8) + 24))(*(_QWORD *)(*(_QWORD *)v17 + 8), a1 + 112, v109);
    WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v110);
    v17 = *((_QWORD *)&v110 + 1);
  }
  if (*(_QWORD *)(a1 + 176) != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (a3)
    {
      WebCore::IntRect::unite((int32x2_t *)(a1 + 160), (int32x2_t *)&v106);
    }
    else if (!a2[2].i8[0])
    {
      *(_QWORD *)(a1 + 160) = 0;
      *(_QWORD *)(a1 + 168) = 0;
    }
  }
}

_DWORD *WebCore::HTMLCanvasElement::clearCopiedImage(WebCore::HTMLCanvasElement *this)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (result)
  {
    if (result[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  *((_BYTE *)this + 273) = 0;
  return result;
}

void `non-virtual thunk to'WebCore::HTMLCanvasElement::didDraw(uint64_t a1, float32x2_t *a2, int a3)
{
  WebCore::HTMLCanvasElement::didDraw(a1 - 112, a2, a3);
}

uint64_t WebCore::HTMLCanvasElement::paint(WebCore::HTMLCanvasElement *this, WebCore::GraphicsContext *a2, const WebCore::LayoutRect *a3)
{
  uint64_t result;
  WebCore::RenderView *v6;
  WebCore::RenderLayerCompositor *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  WebCore::ScriptExecutionContext *v19;
  uint64_t v20;
  WebCore::RenderLayerCompositor *v21;
  WebCore::RenderLayerCompositor *v22;
  WTF *v23;
  void *v24;
  _QWORD v25[3];

  result = *((_QWORD *)this + 31);
  if (!result)
    return result;
  (*(void (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  result = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 40))(a2);
  if ((result & 1) == 0)
  {
    if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0
      || (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0
      || !*((_QWORD *)this + 31))
    {
      goto LABEL_45;
    }
    v6 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL)
                                                                                 + 0x18)
                                                                     + 8)
                                                         + 40)
                                             + 8)
                                 + 1944);
    v7 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v6 + 50);
    if (!v7)
    {
      v21 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v7 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v21, v6);
      v22 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v6 + 50);
      *((_QWORD *)v6 + 50) = v7;
      if (v22)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v22);
        WTF::fastFree(v23, v24);
        v7 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v6 + 50);
      }
    }
    if (!*((_BYTE *)v7 + 132)
      || (result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 31) + 120))(*((_QWORD *)this + 31)),
          !(_DWORD)result)
      || *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3382)
      || *((_BYTE *)this + 275))
    {
LABEL_45:
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 31) + 168))(*((_QWORD *)this + 31)))
        (*(void (**)(_QWORD))(**((_QWORD **)this + 31) + 184))(*((_QWORD *)this + 31));
      if (*((_WORD *)a2 + 97) != 258
        || (result = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 31) + 112))(*((_QWORD *)this + 31), 1), (result & 1) == 0))
      {
        result = (uint64_t)(*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 31)
                                                                                           + 104))(v25, *((_QWORD *)this + 31), 1);
        if (v25[0])
        {
          v25[1] = 0;
          v25[2] = *(_QWORD *)(v25[0] + 16);
          result = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 384))(a2);
          v9 = v25[0];
          v25[0] = 0;
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 8);
            if (__ldaxr((unsigned __int8 *)v10))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v10))
            {
LABEL_18:
              v12 = *(_QWORD *)(v10 + 8);
              v13 = v12 - 1;
              *(_QWORD *)(v10 + 8) = v12 - 1;
              if (v12 == 1)
              {
                v20 = *(_QWORD *)(v10 + 16);
                v14 = *(_QWORD *)(v10 + 24);
                *(_QWORD *)(v10 + 24) = 0;
                v15 = v20 != 0;
              }
              else
              {
                v14 = 0;
                v15 = 1;
              }
              v16 = __ldxr((unsigned __int8 *)v10);
              if (v16 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v10))
                  goto LABEL_22;
              }
              else
              {
                __clrex();
              }
              result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_22:
              if (!v13)
              {
                if (v14)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
                if (!v15)
                  result = WTF::fastFree((WTF *)v10, v8);
              }
              goto LABEL_23;
            }
            result = MEMORY[0x19AEA534C](v10);
            goto LABEL_18;
          }
        }
      }
    }
  }
LABEL_23:
  v17 = *((_QWORD *)this + 31);
  if (*(_BYTE *)(v17 + 25))
  {
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 32) + 144))(*(_QWORD *)(v17 + 32));
      if (result)
      {
        result = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)result, v19);
        if (result)
          return WebCore::InspectorInstrumentation::didFinishRecordingCanvasFrameImpl(result, (WebCore::CanvasRenderingContext *)v17, 0);
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLCanvasElement::toDataURL@<X0>(uint64_t result@<X0>, WTF::String *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t *v8;
  double v9;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  WebCore::ThreadGlobalData *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  int v40[2];
  uint8_t buf[8];
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;

  if (!*(_BYTE *)(result + 184))
  {
    *(_BYTE *)a4 = 14;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v5 = result;
  if (*(int *)(result + 120) < 1 || *(int *)(result + 124) <= 0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 680) + 704) & 0x4000) != 0)
  {
    {
      WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
    }
    if (WebCore::sharedObserver(void)::observer)
      v8 = (uint64_t *)WebCore::sharedObserver(void)::observer;
    else
      v8 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
    result = (*(uint64_t (**)(uint64_t *))(*v8 + 48))(v8);
  }
  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    goto LABEL_12;
  v28 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v28 || (v29 = *(WebCore::ThreadGlobalData **)(v28 + 96)) == 0)
    v29 = (WebCore::ThreadGlobalData *)WebCore::threadGlobalDataSlow((WebCore *)result);
  v30 = (uint64_t *)*((_QWORD *)v29 + 9);
  if (!v30)
  {
    WebCore::ThreadGlobalData::initializeMimeTypeRegistryThreadGlobalData(v29);
    v30 = (uint64_t *)*((_QWORD *)v29 + 9);
  }
  if (*v30
    && WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(v30, a2))
  {
    WTF::String::convertToASCIILowercase(a2);
  }
  else
  {
LABEL_12:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v42 = v43;
  }
  if (a3 >> 49)
  {
    if (a3 >= 0xFFFE000000000000)
      v9 = (double)(int)a3;
    else
      *(_QWORD *)&v9 = a3 - 0x2000000000000;
    v10 = v9 >= 0.0;
    v11 = v9 <= 1.0;
    v12 = v10 & v11;
    if (v10 && v11)
      v13 = *(_QWORD *)&v9;
    else
      v13 = 0;
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  WebCore::HTMLCanvasElement::getImageData(v5, &v43);
  v14 = v43;
  if (v43)
  {
    WebCore::ImageData::pixelBuffer(v43, v40);
    WebCore::dataURL((WebCore *)&v42, *(uint64_t *)v40, v13, v12, buf);
    v15 = *(_DWORD **)v40;
    *(_QWORD *)a4 = *(_QWORD *)buf;
    *(_DWORD *)(a4 + 16) = 0;
    *(_QWORD *)v40 = 0;
    *(_QWORD *)buf = 0;
    if (v15)
    {
      if (v15[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
      else
        --v15[2];
    }
    WTF::RefCounted<WebCore::ImageData>::deref(v14);
    goto LABEL_78;
  }
  v17 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 688);
  if (!v17)
    v17 = (uint64_t *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(v5 + 40) + 8));
  v18 = *(_DWORD **)(v5 + 152);
  if (v18)
    *v18 += 2;
  *(_QWORD *)buf = v18;
  WebCore::Quirks::advancedPrivacyProtectionSubstituteDataURLForScriptWithFeatures(v17, (const WTF::String *)buf, *(_DWORD *)(v5 + 120), *(_DWORD *)(v5 + 124), &v43);
  v20 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (v43)
  {
    v21 = qword_1ECE7C1A8;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C1A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "HTMLCanvasElement::toDataURL: Quirking returned URL for identified fingerprinting script", buf, 2u);
    }
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
    v23 = *(_QWORD *)(v22 + 704);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 8);
      if (v24)
        v22 = v24;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint8_t *, _QWORD))(*(_QWORD *)(v22 + 192) + 248))(v22 + 192, 6, 4, buf, 0);
    v25 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v16);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = v43;
    if (v43)
    {
      v27 = *(_DWORD *)v43;
      *(_DWORD *)v43 += 2;
      *(_QWORD *)a4 = v26;
      *(_DWORD *)(a4 + 16) = 0;
      v43 = 0;
      if (v27)
        *(_DWORD *)v26 = v27;
      else
        WTF::StringImpl::destroy(v26, v16);
    }
    else
    {
      *(_QWORD *)a4 = 0;
      *(_DWORD *)(a4 + 16) = 0;
    }
    goto LABEL_78;
  }
  WebCore::CanvasBase::makeRenderingResultsAvailable(v5 + 112, 1, (uint64_t *)buf);
  if (*(_QWORD *)buf)
    WebCore::ImageBuffer::toDataURL(*(uint64_t *)buf, (WebCore *)&v42, v13, v12, 0, &v43);
  else
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)a4 = v43;
  *(_DWORD *)(a4 + 16) = 0;
  v31 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v31)
  {
    v32 = *(_QWORD *)(v31 + 8);
    if (__ldaxr((unsigned __int8 *)v32))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v32))
    {
      goto LABEL_63;
    }
    MEMORY[0x19AEA534C](v32);
LABEL_63:
    v34 = *(_QWORD *)(v32 + 8);
    v35 = v34 - 1;
    *(_QWORD *)(v32 + 8) = v34 - 1;
    if (v34 == 1)
    {
      v39 = *(_QWORD *)(v32 + 16);
      v36 = *(_QWORD *)(v32 + 24);
      *(_QWORD *)(v32 + 24) = 0;
      v37 = v39 != 0;
    }
    else
    {
      v36 = 0;
      v37 = 1;
    }
    v38 = __ldxr((unsigned __int8 *)v32);
    if (v38 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v32))
      {
LABEL_70:
        if (!v35)
        {
          if (v36)
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
          if (!v37)
            WTF::fastFree((WTF *)v32, v16);
        }
        goto LABEL_78;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v32);
    goto LABEL_70;
  }
LABEL_78:
  result = (uint64_t)v42;
  v42 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLCanvasElement::getImageData@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD **v3;
  uint64_t v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  uint64_t *v9;
  WebCore::CanvasNoiseInjection *v10;
  WebCore::PixelBuffer *v11;
  int v12;
  unint64_t v13;
  WebCore::PixelBuffer *v14;
  WebCore::PixelBuffer *v15;
  WebCore::PixelBuffer *v16;
  uint64_t v17;
  WebCore::PixelBuffer *v18;

  v3 = *(_QWORD ***)(this + 248);
  if (v3
    && ((v4 = this, (((uint64_t (*)(_QWORD))(*v3)[4])(*(_QWORD *)(this + 248)) & 1) != 0)
     || (this = ((uint64_t (*)(_QWORD **))(*v3)[5])(v3), (this & 1) != 0)))
  {
    (*(void (**)(_QWORD *))(*v3[4] + 16))(v3[4]);
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 680) + 704) & 0x4000) != 0)
    {
      {
        WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
      }
      if (WebCore::sharedObserver(void)::observer)
        v9 = (uint64_t *)WebCore::sharedObserver(void)::observer;
      else
        v9 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
      v5.n128_f64[0] = (*(double (**)(uint64_t *))(*v9 + 48))(v9);
    }
    WebCore::WebGLRenderingContextBase::drawingBufferToPixelBuffer((WebCore::WebGLRenderingContextBase *)(v3 - 1), (char **)&v18, v5, v6, v7, v8);
    v11 = v18;
    if (v18)
    {
      v12 = *((_DWORD *)v18 + 2);
      *((_DWORD *)v18 + 2) = v12 + 1;
      v13 = *(_QWORD *)(v4 + 176);
      if (v13 != 0x7FFFFFFFFFFFFFFFLL)
      {
        WebCore::CanvasNoiseInjection::postProcessPixelBufferResults(v10, v11, v13);
        v12 = *((_DWORD *)v11 + 2) - 1;
      }
      if (v12)
        *((_DWORD *)v11 + 2) = v12;
      else
        (*(void (**)(WebCore::PixelBuffer *))(*(_QWORD *)v11 + 8))(v11);
      v14 = v18;
      v16 = v18;
      v18 = 0;
      WebCore::ImageData::create((uint64_t *)&v16, &v17);
      *a2 = v17;
      if (v14)
      {
        if (*((_DWORD *)v14 + 2) == 1)
          (*(void (**)(WebCore::PixelBuffer *))(*(_QWORD *)v14 + 8))(v14);
        else
          --*((_DWORD *)v14 + 2);
      }
      v15 = v18;
      v18 = 0;
      if (v15)
      {
        if (*((_DWORD *)v15 + 2) == 1)
          (*(void (**)(WebCore::PixelBuffer *))(*(_QWORD *)v15 + 8))(v15);
        else
          --*((_DWORD *)v15 + 2);
      }
    }
    else
    {
      *a2 = 0;
    }
    return (*(uint64_t (**)(_QWORD *))(*v3[4] + 24))(v3[4]);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebCore::HTMLCanvasElement::canvasBaseScriptExecutionContext(WebCore::HTMLCanvasElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v2 = *(_QWORD *)(v1 + 704);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      v1 = v3;
  }
  return v1 + 192;
}

uint64_t WebCore::HTMLCanvasElement::toDataURL@<X0>(WebCore::HTMLCanvasElement *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::HTMLCanvasElement::toDataURL((uint64_t)this, a2, 0, a3);
}

WTF::StringImpl *WebCore::HTMLCanvasElement::toBlob@<X0>(WTF::ASCIICaseInsensitiveHash *this@<X2>, WTF::StringImpl *result@<X0>, uint64_t *a3@<X1>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t *v10;
  double v11;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  WebCore::ImageData *v19;
  WTF::StringImpl *v20;
  WebCore::ScriptExecutionContext *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int *v27;
  uint64_t v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::ThreadGlobalData *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  WTF::StringImpl *v53;
  WTF *v54;
  WebCore::ImageData *v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  int v67;
  int v68;
  WebCore::ImageData *v69;
  WTF::StringImpl *v70;
  int v71[2];
  char v72;

  if (!*((_BYTE *)result + 184))
  {
    *(_BYTE *)a5 = 14;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) = 1;
    return result;
  }
  v7 = (uint64_t)result;
  if (*((int *)result + 30) >= 1 && *((int *)result + 31) > 0)
  {
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 5) + 8) + 680) + 704) & 0x4000) != 0)
    {
      {
        WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
      }
      if (WebCore::sharedObserver(void)::observer)
        v10 = (uint64_t *)WebCore::sharedObserver(void)::observer;
      else
        v10 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t *))(*v10 + 48))(v10);
    }
    if (!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this + 4))
      goto LABEL_12;
    v37 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v37 || (v38 = *(WebCore::ThreadGlobalData **)(v37 + 96)) == 0)
      v38 = (WebCore::ThreadGlobalData *)WebCore::threadGlobalDataSlow(result);
    v39 = (uint64_t *)*((_QWORD *)v38 + 9);
    if (!v39)
    {
      WebCore::ThreadGlobalData::initializeMimeTypeRegistryThreadGlobalData(v38);
      v39 = (uint64_t *)*((_QWORD *)v38 + 9);
    }
    if (*v39
      && WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(v39, this))
    {
      WTF::String::convertToASCIILowercase(this);
    }
    else
    {
LABEL_12:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v70 = *(WTF::StringImpl **)v71;
    }
    if (a4 >> 49)
    {
      *(_QWORD *)&v11 = a4 - 0x2000000000000;
      if (a4 >= 0xFFFE000000000000)
        v11 = (double)(int)a4;
      v12 = v11 >= 0.0;
      v13 = v11 <= 1.0;
      v14 = v12 & v13;
      if (v12 && v13)
        v15 = *(_QWORD *)&v11;
      else
        v15 = 0;
    }
    else
    {
      v15 = 0;
      v14 = 0;
    }
    WebCore::HTMLCanvasElement::getImageData(v7, &v69);
    v19 = v69;
    if (v69)
    {
      WebCore::ImageData::pixelBuffer(v69, v71);
      WebCore::encodeToVector<WebCore::PixelBuffer const&>(&v66, *(uint64_t *)v71, (WebCore *)&v70, v15, v14);
      v20 = *(WTF::StringImpl **)v71;
      *(_QWORD *)v71 = 0;
      if (v20)
      {
        if (*((_DWORD *)v20 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 8))(v20);
        else
          --*((_DWORD *)v20 + 2);
      }
      if (v68)
      {
        v21 = (WebCore::ScriptExecutionContext *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 192);
        v22 = bmalloc::api::isoAllocate();
        v24 = *(_QWORD *)(WebCore::Blob::Blob(v22, v21, (uint64_t)&v66, &v70) + 32);
        if (v24)
        {
          v25 = *(_QWORD *)(v24 + 8);
          if (v25)
          {
            v26 = *(unsigned __int8 *)(v25 + 178);
            if (*(_BYTE *)(v25 + 178))
            {
              if (v26 == 1 || v26 == 2)
                ++*(_DWORD *)(v25 + 216);
            }
            else
            {
              *(_DWORD *)(v25 - 264) += 2;
            }
            v27 = (unsigned int *)(v25 - 96);
            v28 = v22 + 24;
            if (*(_BYTE *)(v25 + 179))
            {
              v64 = v25;
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 24))(v28, *(unsigned __int8 *)(v25 + 177));
              v25 = v64;
              v28 = v22 + 24;
            }
            if (*(_BYTE *)(v25 + 180))
              (*(void (**)(uint64_t))(*(_QWORD *)v28 + 56))(v28);
            WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed(v27, v23);
          }
        }
      }
      else
      {
        v22 = 0;
      }
      v40 = *a3;
      v41 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
      ++*(_DWORD *)(v40 + 16);
      v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v42 = &off_1E33AED18;
      v42[1] = v40;
      v42[2] = v40;
      v42[3] = v22;
      *(_QWORD *)v71 = v42;
      v72 = 0;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)(v41 + 192) + 336))(v41 + 192, v71);
      v44 = *(WTF::StringImpl **)v71;
      *(_QWORD *)v71 = 0;
      if (v44)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v44 + 8))(v44);
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      if (v66)
        WTF::fastFree(v66, v43);
      WTF::RefCounted<WebCore::ImageData>::deref(v19);
LABEL_89:
      result = v70;
      v70 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v45);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    WebCore::CanvasBase::makeRenderingResultsAvailable(v7 + 112, 1, (uint64_t *)&v69);
    if (v69)
    {
      WebCore::ImageBuffer::toData((WebCore *)&v70, (uint64_t)v69, v15, v14, 0, &v66);
      if (v68)
      {
        v29 = (WebCore::ScriptExecutionContext *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 192);
        v30 = bmalloc::api::isoAllocate();
        v32 = *(_QWORD *)(WebCore::Blob::Blob(v30, v29, (uint64_t)&v66, &v70) + 32);
        if (v32)
        {
          v33 = *(_QWORD *)(v32 + 8);
          if (v33)
          {
            v34 = *(unsigned __int8 *)(v33 + 178);
            if (*(_BYTE *)(v33 + 178))
            {
              if (v34 == 1 || v34 == 2)
                ++*(_DWORD *)(v33 + 216);
            }
            else
            {
              *(_DWORD *)(v33 - 264) += 2;
            }
            v35 = (unsigned int *)(v33 - 96);
            v36 = v30 + 24;
            if (*(_BYTE *)(v33 + 179))
            {
              v65 = v33;
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 24))(v30 + 24, *(unsigned __int8 *)(v33 + 177));
              v33 = v65;
            }
            if (*(_BYTE *)(v33 + 180))
              (*(void (**)(uint64_t))(*(_QWORD *)v36 + 56))(v30 + 24);
            WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed(v35, v31);
          }
        }
      }
      else
      {
        v30 = 0;
      }
      v50 = *a3;
      v51 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
      ++*(_DWORD *)(v50 + 16);
      v52 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v52 = &off_1E33AED18;
      v52[1] = v50;
      v52[2] = v50;
      v52[3] = v30;
      *(_QWORD *)v71 = v52;
      v72 = 0;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)(v51 + 192) + 336))(v51 + 192, v71);
      v53 = *(WTF::StringImpl **)v71;
      *(_QWORD *)v71 = 0;
      if (v53)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v53 + 8))(v53);
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      v54 = v66;
      if (v66)
      {
        v66 = 0;
        v67 = 0;
        WTF::fastFree(v54, v45);
      }
    }
    else
    {
      v46 = *a3;
      v47 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
      ++*(_DWORD *)(v46 + 16);
      v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v48 = &off_1E33AED18;
      v48[1] = v46;
      v48[2] = v46;
      v48[3] = 0;
      *(_QWORD *)v71 = v48;
      v72 = 0;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)(v47 + 192) + 336))(v47 + 192, v71);
      v49 = *(WTF::StringImpl **)v71;
      *(_QWORD *)v71 = 0;
      if (v49)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v49 + 8))(v49);
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
    }
    v55 = v69;
    v69 = 0;
    if (!v55)
      goto LABEL_89;
    v56 = *((_QWORD *)v55 + 1);
    if (__ldaxr((unsigned __int8 *)v56))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v56))
    {
      goto LABEL_77;
    }
    MEMORY[0x19AEA534C](v56);
LABEL_77:
    v58 = *(_QWORD *)(v56 + 8);
    v59 = v58 - 1;
    *(_QWORD *)(v56 + 8) = v58 - 1;
    if (v58 == 1)
    {
      v63 = *(_QWORD *)(v56 + 16);
      v60 = *(_QWORD *)(v56 + 24);
      *(_QWORD *)(v56 + 24) = 0;
      v61 = v63 != 0;
    }
    else
    {
      v60 = 0;
      v61 = 1;
    }
    v62 = __ldxr((unsigned __int8 *)v56);
    if (v62 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v56))
      {
LABEL_84:
        if (!v59)
        {
          if (v60)
            (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
          if (!v61)
            WTF::fastFree((WTF *)v56, v45);
        }
        goto LABEL_89;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v56);
    goto LABEL_84;
  }
  v16 = *a3;
  v17 = *(_QWORD *)(*((_QWORD *)result + 5) + 8);
  ++*(_DWORD *)(*a3 + 16);
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v18 = &off_1E33AED18;
  v18[1] = v16;
  v18[2] = v16;
  v18[3] = 0;
  *(_QWORD *)v71 = v18;
  v72 = 0;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)(v17 + 192) + 336))(v17 + 192, v71);
  result = *(WTF::StringImpl **)v71;
  *(_QWORD *)v71 = 0;
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  return result;
}

WebCore::PlaceholderRenderingContext *WebCore::HTMLCanvasElement::transferControlToOffscreen@<X0>(WebCore::PlaceholderRenderingContext *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  WebCore::ScriptExecutionContext *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Node *ElementSibling;
  WebCore::Element *v8;
  uint64_t v9;
  WebCore::ScriptExecutionContext *v10;

  if (*((_QWORD *)this + 31))
  {
    *(_BYTE *)a2 = 8;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
  }
  else
  {
    v3 = (uint64_t)this;
    WebCore::PlaceholderRenderingContext::create(this, &v10);
    v4 = v10;
    WebCore::OffscreenCanvas::create((WebCore::OffscreenCanvas *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 192), v10, &v9);
    v5 = *(_QWORD *)(v3 + 248);
    *(_QWORD *)(v3 + 248) = v4;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v4 = *(WebCore::ScriptExecutionContext **)(v3 + 248);
    }
    this = (WebCore::PlaceholderRenderingContext *)(*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v4 + 120))(v4);
    if ((_DWORD)this)
    {
      this = (WebCore::PlaceholderRenderingContext *)WebCore::Node::invalidateStyle(v3, 3u, 1);
      if ((*(_BYTE *)(v3 + 71) & 1) != 0)
      {
        v6 = *(_QWORD *)(v3 + 32);
        if (!v6 || (*(_WORD *)(v6 + 28) & 8) == 0 || (*(_BYTE *)(v6 + 70) & 4) == 0)
        {
          ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v3);
          this = WebCore::invalidateForSiblingCombinators(ElementSibling, v8);
        }
      }
    }
    *(_QWORD *)a2 = v9;
    *(_DWORD *)(a2 + 16) = 0;
  }
  return this;
}

void WebCore::HTMLCanvasElement::toVideoFrame(WebCore::HTMLCanvasElement *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  uint64_t *v9;
  uint64_t *v10;
  __n128 v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  int v16;
  int v17;
  int v18;
  void *v19;
  CFTypeRef v20;
  void (****v21)(WebCore::ImageBufferAllocator *__hidden);
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  void (**v31)(WebCore::ImageBufferAllocator *__hidden);
  void (***v32)(WebCore::ImageBufferAllocator *__hidden);
  int v33;
  int v34;
  void (****v35)(WebCore::ImageBufferAllocator *__hidden);
  CFTypeRef cf;
  uint64_t v37;
  void (****v38)(WebCore::ImageBufferAllocator *__hidden);

  v4 = *((_QWORD *)this + 31);
  if (v4
    && (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 32))(*((_QWORD *)this + 31)) & 1) != 0
     || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4)))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 32) + 16))(*(_QWORD *)(v4 + 32));
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 704) & 0x4000) != 0)
    {
      {
        WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
      }
      if (WebCore::sharedObserver(void)::observer)
        v9 = (uint64_t *)WebCore::sharedObserver(void)::observer;
      else
        v9 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
      (*(void (**)(uint64_t *))(*v9 + 48))(v9);
    }
    if (*(_BYTE *)(v4 + 356))
    {
      *a2 = 0;
    }
    else
    {
      WebCore::WebGLRenderingContextBase::clearIfComposited(v4 - 8, 1, 0, v5, v6, v7, v8);
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 80) + 2264))(*(_QWORD *)(v4 + 80), 0);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 32) + 24))(*(_QWORD *)(v4 + 32));
    return;
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 704) & 0x4000) != 0)
  {
    {
      WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
    }
    if (WebCore::sharedObserver(void)::observer)
      v10 = (uint64_t *)WebCore::sharedObserver(void)::observer;
    else
      v10 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
    (*(void (**)(uint64_t *))(*v10 + 48))(v10);
  }
  WebCore::CanvasBase::makeRenderingResultsAvailable((uint64_t)this + 112, 1, &v37);
  v12 = v37;
  if (!v37)
  {
    *a2 = 0;
    return;
  }
  LOWORD(v35) = 513;
  v13 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v13 != -1)
  {
    v32 = &v31;
    v38 = &v32;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v38, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  cf = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
  v14 = *(float *)(v37 + 16);
  v15 = *(float *)(v37 + 20);
  v11.n128_u64[0] = 0x4F0000004F000000;
  if (v14 > -2147500000.0)
    v16 = (int)v14;
  else
    v16 = 0x80000000;
  if (v14 >= 2147500000.0)
    v16 = 0x7FFFFFFF;
  if (v15 > -2147500000.0)
    v17 = (int)v15;
  else
    v17 = 0x80000000;
  if (v15 < 2147500000.0)
    v18 = v17;
  else
    v18 = 0x7FFFFFFF;
  v33 = v16;
  v34 = v18;
  v31 = off_1E340D360;
  v32 = 0;
  (*(void (**)(void (*****__return_ptr)(WebCore::ImageBufferAllocator *__hidden), uint64_t, void (*****)(WebCore::ImageBufferAllocator *__hidden), void (****)(WebCore::ImageBufferAllocator *__hidden), void (***)(WebCore::ImageBufferAllocator *__hidden), __n128))(*(_QWORD *)v12 + 88))(&v38, v12, &v35, &v32, &v31, v11);
  v20 = cf;
  cf = 0;
  if (v20)
    CFRelease(v20);
  if (v38)
  {
    v35 = v38;
    v38 = 0;
    v32 = 0;
    WebCore::VideoFrame::createFromPixelBuffer((uint64_t *)&v35, (__CVBuffer ***)&v32, a2);
    if (v35)
    {
      if (*((_DWORD *)v35 + 2) == 1)
        ((void (*)(void))(*v35)[1])();
      else
        --*((_DWORD *)v35 + 2);
    }
    v21 = v38;
    v38 = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 2) == 1)
        ((void (*)(_DWORD *))(*v21)[1])(v21);
      else
        --*((_DWORD *)v21 + 2);
    }
  }
  else
  {
    *a2 = 0;
  }
  v22 = v37;
  v37 = 0;
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 8);
    if (__ldaxr((unsigned __int8 *)v23))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v23))
    {
      goto LABEL_54;
    }
    MEMORY[0x19AEA534C](v23);
LABEL_54:
    v25 = *(_QWORD *)(v23 + 8);
    v26 = v25 - 1;
    *(_QWORD *)(v23 + 8) = v25 - 1;
    if (v25 == 1)
    {
      v30 = *(_QWORD *)(v23 + 16);
      v27 = *(_QWORD *)(v23 + 24);
      *(_QWORD *)(v23 + 24) = 0;
      v28 = v30 != 0;
    }
    else
    {
      v27 = 0;
      v28 = 1;
    }
    v29 = __ldxr((unsigned __int8 *)v23);
    if (v29 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v23))
      {
        if (v26)
          return;
LABEL_62:
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        if (!v28)
          WTF::fastFree((WTF *)v23, v19);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
    if (v26)
      return;
    goto LABEL_62;
  }
}

uint64_t WebCore::HTMLCanvasElement::captureStream@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t result;
  char v8;
  WebCore::Document *v9;
  void *v10;
  WebCore::Document *v11;
  WebCore::ContextDestructionObserver *v12;
  const WTF::StringImpl *v13;
  __int16 v14;
  __int16 v15;
  WebCore::Document *v16;
  WebCore::ContextDestructionObserver *v17;

  if (!*(_BYTE *)(a1 + 184))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 14;
    goto LABEL_13;
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 680) + 704) & 0x4000) != 0)
  {
    {
      WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
    }
    if (WebCore::sharedObserver(void)::observer)
      v6 = (uint64_t *)WebCore::sharedObserver(void)::observer;
    else
      v6 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
    (*(void (**)(uint64_t *))(*v6 + 48))(v6);
  }
  if (*(_BYTE *)(a2 + 8) && *(double *)a2 < 0.0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 6;
LABEL_13:
    *(_BYTE *)a3 = v8;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v9 = *(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8);
  *(_DWORD *)(a1 + 24) += 2;
  v16 = (WebCore::Document *)a1;
  WebCore::CanvasCaptureMediaStreamTrack::create(v9, (uint64_t *)&v16, (_OWORD *)a2, &v17);
  v11 = v16;
  if (v16)
  {
    if (*((_DWORD *)v16 + 6) == 2)
    {
      v14 = *((_WORD *)v16 + 15);
      if ((v14 & 0x400) == 0)
      {
        v15 = *((_WORD *)v16 + 14);
        if ((v15 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef(v16, v10);
        }
        else
        {
          if ((v15 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v16 + 20) + 16))(*((_QWORD *)v16 + 20));
            v14 = *((_WORD *)v11 + 15);
          }
          *((_WORD *)v11 + 15) = v14 | 0x400;
          (*(void (**)(WebCore::Document *))(*(_QWORD *)v11 + 72))(v11);
        }
      }
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
  }
  WebCore::MediaStream::create(*(WebCore::MediaStream **)(*(_QWORD *)(a1 + 40) + 8), (uint64_t *)&v16);
  v12 = v17;
  result = (uint64_t)WebCore::MediaStream::addTrack(v16, v17, v13);
  *(_QWORD *)a3 = v16;
  *(_DWORD *)(a3 + 16) = 0;
  if (*((_DWORD *)v12 + 6) == 1)
    return (*(uint64_t (**)(WebCore::ContextDestructionObserver *))(*(_QWORD *)v12 + 16))(v12);
  --*((_DWORD *)v12 + 6);
  return result;
}

void WebCore::HTMLCanvasElement::securityOrigin(WebCore::HTMLCanvasElement *this, WTF::StringImpl *a2)
{
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 192), a2);
}

void `non-virtual thunk to'WebCore::HTMLCanvasElement::securityOrigin(WebCore::HTMLCanvasElement *this, WTF::StringImpl *a2)
{
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*((_QWORD *)this - 9) + 8) + 192), a2);
}

WebCore::Node *WebCore::HTMLCanvasElement::createImageBuffer(int32x2_t *this)
{
  int32x2_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  WebCore::Node *result;
  uint64_t v21;
  uint64_t v22;
  int32x2_t v23;
  WebCore::Node *ElementSibling;
  WebCore::Element *v25;
  uint64_t v26;
  uint64_t v27;

  v2 = this + 14;
  this[23].i8[1] = 1;
  this[34].i8[1] = 1;
  WebCore::CanvasBase::allocateImageBuffer(this + 14, &v26);
  WebCore::CanvasBase::setImageBuffer(v2, &v26, &v27);
  v4 = v27;
  v27 = 0;
  if (!v4)
    goto LABEL_10;
  v5 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](v5);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v5))
    goto LABEL_4;
LABEL_5:
  v7 = *(_QWORD *)(v5 + 8);
  v8 = v7 - 1;
  *(_QWORD *)(v5 + 8) = v7 - 1;
  if (v7 == 1)
  {
    v21 = *(_QWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    v10 = v21 != 0;
  }
  else
  {
    v9 = 0;
    v10 = 1;
  }
  v11 = __ldxr((unsigned __int8 *)v5);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_9:
  if (!v8)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (!v10)
      WTF::fastFree((WTF *)v5, v3);
  }
LABEL_10:
  v12 = v26;
  v26 = 0;
  if (!v12)
    goto LABEL_19;
  v13 = *(_QWORD *)(v12 + 8);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
LABEL_13:
    MEMORY[0x19AEA534C](v13);
    goto LABEL_14;
  }
  if (__stxr(1u, (unsigned __int8 *)v13))
    goto LABEL_13;
LABEL_14:
  v15 = *(_QWORD *)(v13 + 8);
  v16 = v15 - 1;
  *(_QWORD *)(v13 + 8) = v15 - 1;
  if (v15 == 1)
  {
    v22 = *(_QWORD *)(v13 + 16);
    v17 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 24) = 0;
    v18 = v22 != 0;
  }
  else
  {
    v17 = 0;
    v18 = 1;
  }
  v19 = __ldxr((unsigned __int8 *)v13);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v13))
      goto LABEL_18;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_18:
  if (!v16)
  {
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    if (!v18)
      WTF::fastFree((WTF *)v13, v3);
  }
LABEL_19:
  result = (WebCore::Node *)this[31];
  if (result)
  {
    result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 24))(result);
    if ((_DWORD)result)
    {
      result = (WebCore::Node *)WebCore::Node::invalidateStyle((uint64_t)this, 3u, 1);
      if ((this[8].i8[7] & 1) != 0)
      {
        v23 = this[4];
        if (!*(_QWORD *)&v23
          || (*(_WORD *)(*(_QWORD *)&v23 + 28) & 8) == 0
          || (*(_BYTE *)(*(_QWORD *)&v23 + 70) & 4) == 0)
        {
          ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
          return WebCore::invalidateForSiblingCombinators(ElementSibling, v25);
        }
      }
    }
  }
  return result;
}

WebCore::Node *`non-virtual thunk to'WebCore::HTMLCanvasElement::createImageBuffer(int32x2_t *this)
{
  return WebCore::HTMLCanvasElement::createImageBuffer(this - 14);
}

uint64_t WebCore::HTMLCanvasElement::setImageBufferAndMarkDirty(int32x2_t *a1, uint64_t *a2)
{
  int32x2_t *v3;
  __int32 v4;
  __int32 v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  int32x2_t v15;
  int32x2_t v17;
  unsigned int v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int32x2_t v25;
  unsigned int v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int32x2_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  WTF::StringImpl *v37[2];
  char v38;
  uint64_t v39;

  v3 = a1 + 14;
  v5 = a1[15].i32[0];
  v4 = a1[15].i32[1];
  a1[23].i8[1] = 1;
  WebCore::CanvasBase::setImageBuffer(&a1[14], a2, &v39);
  v7 = v39;
  v39 = 0;
  if (!v7)
    goto LABEL_18;
  v8 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_6:
  v10 = *(_QWORD *)(v8 + 8);
  v11 = v10 - 1;
  *(_QWORD *)(v8 + 8) = v10 - 1;
  if (v10 == 1)
  {
    v36 = *(_QWORD *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    v13 = v36 != 0;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  v14 = __ldxr((unsigned __int8 *)v8);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v8))
    {
      if (v11)
        goto LABEL_18;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (v11)
    goto LABEL_18;
LABEL_14:
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (!v13)
    WTF::fastFree((WTF *)v8, v6);
LABEL_18:
  v15 = a1[31];
  if (*(_QWORD *)&v15
    && (*(unsigned int (**)(int32x2_t))(**(_QWORD **)&v15 + 72))(v15)
    && *(_QWORD *)&a1[15] != __PAIR64__(v4, v5))
  {
    WTF::AtomString::number((WTF::AtomString *)a1[15].u32[0]);
    v17 = a1[13];
    if (*(_QWORD *)&v17
      && ((v18 = *(_DWORD *)(*(_QWORD *)&v17 + 4), (v18 & 1) != 0)
        ? (v19 = *(uint64_t **)(*(_QWORD *)&v17 + 40), v20 = *(_DWORD *)(*(_QWORD *)&v17 + 52))
        : (v19 = (uint64_t *)(*(_QWORD *)&v17 + 32), v20 = v18 >> 5),
          v20))
    {
      v21 = 0;
      while (1)
      {
        v22 = *v19;
        if (*v19 == WebCore::HTMLNames::widthAttr
          || *(_QWORD *)(v22 + 24) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 24)
          && *(_QWORD *)(v22 + 32) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 32))
        {
          break;
        }
        ++v21;
        v19 += 2;
        if (v20 == v21)
          goto LABEL_34;
      }
    }
    else
    {
LABEL_34:
      v21 = 0xFFFFFFFFLL;
    }
    WebCore::Element::setAttributeInternal((WTF::StringImpl *)a1, v21, (WebCore::TreeScope *)&WebCore::HTMLNames::widthAttr, v37, 0);
    v24 = v37[0];
    v37[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    WTF::AtomString::number((WTF::AtomString *)a1[15].u32[1]);
    v25 = a1[13];
    if (*(_QWORD *)&v25
      && ((v26 = *(_DWORD *)(*(_QWORD *)&v25 + 4), (v26 & 1) != 0)
        ? (v27 = *(uint64_t **)(*(_QWORD *)&v25 + 40), v28 = *(_DWORD *)(*(_QWORD *)&v25 + 52))
        : (v27 = (uint64_t *)(*(_QWORD *)&v25 + 32), v28 = v26 >> 5),
          v28))
    {
      v29 = 0;
      while (1)
      {
        v30 = *v27;
        if (*v27 == WebCore::HTMLNames::heightAttr
          || *(_QWORD *)(v30 + 24) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 24)
          && *(_QWORD *)(v30 + 32) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 32))
        {
          break;
        }
        ++v29;
        v27 += 2;
        if (v28 == v29)
          goto LABEL_50;
      }
    }
    else
    {
LABEL_50:
      v29 = 0xFFFFFFFFLL;
    }
    WebCore::Element::setAttributeInternal((WTF::StringImpl *)a1, v29, (WebCore::TreeScope *)&WebCore::HTMLNames::heightAttr, v37, 0);
    v32 = v37[0];
    v37[0] = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v31);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = a1[8];
    v34 = *(_QWORD *)&v33 & 0xFFFFFFFFFFFFLL;
    if ((*(_QWORD *)&v33 & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_61;
    if ((*(_BYTE *)((*(_QWORD *)&v33 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      if (*(_BYTE *)((*(_QWORD *)&v33 & 0xFFFFFFFFFFFFLL) + 0x2E) != 13)
      {
LABEL_61:
        WebCore::CanvasBase::notifyObserversCanvasResized(v3);
        goto LABEL_19;
      }
      ++*(_DWORD *)((*(_QWORD *)&v33 & 0xFFFFFFFFFFFFLL) + 0x10);
      WebCore::RenderHTMLCanvas::canvasSizeChanged((WebCore::RenderHTMLCanvas *)v34);
      if ((*(_BYTE *)(v34 + 21) & 0x80) != 0)
        WebCore::RenderLayer::contentChanged(*(_QWORD *)(v34 + 144), (const WebCore::RenderObject *)3);
      v35 = *(_DWORD *)(v34 + 16);
      if (v35)
      {
        *(_DWORD *)(v34 + 16) = v35 - 1;
        goto LABEL_61;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x195BC4B64);
  }
LABEL_19:
  v37[0] = 0;
  v37[1] = (WTF::StringImpl *)vcvt_f32_s32(a1[15]);
  v38 = 1;
  return (*(uint64_t (**)(int32x2_t *, WTF::StringImpl **, uint64_t))(*(_QWORD *)&a1[14] + 104))(v3, v37, 1);
}

uint64_t `non-virtual thunk to'WebCore::HTMLCanvasElement::setImageBufferAndMarkDirty(uint64_t a1, uint64_t *a2)
{
  return WebCore::HTMLCanvasElement::setImageBufferAndMarkDirty((int32x2_t *)(a1 - 112), a2);
}

uint64_t WebCore::HTMLCanvasElement::copiedImage(WebCore::HTMLCanvasElement *this)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  result = *((_QWORD *)this + 32);
  if (!result)
  {
    v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 88))((char *)this + 112);
    if (v3)
    {
      (*(void (**)(_QWORD **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v3 + 104))(&v31, v3, 0);
      v4 = v31;
      if (!v31)
        return *((_QWORD *)this + 32);
LABEL_4:
      (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v4 + 48))(&v29, v4);
      WebCore::BitmapImage::create(&v29, &v30);
      v6 = v30;
      v30 = 0;
      v7 = (_DWORD *)*((_QWORD *)this + 32);
      *((_QWORD *)this + 32) = v6;
      if (v7)
      {
        if (v7[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
          v30 = 0;
        }
        else
        {
          --v7[2];
        }
      }
      v8 = v29;
      v29 = 0;
      if (!v8)
      {
LABEL_24:
        v16 = v31;
        v31 = 0;
        if (!v16)
          return *((_QWORD *)this + 32);
        v17 = v16[1];
        if (__ldaxr((unsigned __int8 *)v17))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v17))
        {
          goto LABEL_29;
        }
        MEMORY[0x19AEA534C](v17);
LABEL_29:
        v19 = *(_QWORD *)(v17 + 8);
        v20 = v19 - 1;
        *(_QWORD *)(v17 + 8) = v19 - 1;
        if (v19 == 1)
        {
          v24 = *(_QWORD *)(v17 + 16);
          v21 = *(_QWORD *)(v17 + 24);
          *(_QWORD *)(v17 + 24) = 0;
          v22 = v24 != 0;
        }
        else
        {
          v21 = 0;
          v22 = 1;
        }
        v23 = __ldxr((unsigned __int8 *)v17);
        if (v23 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v17))
          {
            if (!v20)
              goto LABEL_37;
            return *((_QWORD *)this + 32);
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v17);
        if (!v20)
        {
LABEL_37:
          if (v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          if (!v22)
            WTF::fastFree((WTF *)v17, v5);
        }
        return *((_QWORD *)this + 32);
      }
      v9 = *(_QWORD *)(v8 + 8);
      if (__ldaxr((unsigned __int8 *)v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v9))
      {
        goto LABEL_12;
      }
      MEMORY[0x19AEA534C](v9);
LABEL_12:
      v11 = *(_QWORD *)(v9 + 8);
      v12 = v11 - 1;
      *(_QWORD *)(v9 + 8) = v11 - 1;
      if (v11 == 1)
      {
        v25 = *(_QWORD *)(v9 + 16);
        v13 = *(_QWORD *)(v9 + 24);
        *(_QWORD *)(v9 + 24) = 0;
        v14 = v25 != 0;
      }
      else
      {
        v13 = 0;
        v14 = 1;
      }
      v15 = __ldxr((unsigned __int8 *)v9);
      if (v15 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v9))
        {
          if (v12)
            goto LABEL_24;
LABEL_20:
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
          if (!v14)
            WTF::fastFree((WTF *)v9, v5);
          goto LABEL_24;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      if (v12)
        goto LABEL_24;
      goto LABEL_20;
    }
    if (!*((_BYTE *)this + 185))
      (*(void (**)(char *))(*((_QWORD *)this + 14) + 160))((char *)this + 112);
    v4 = (_QWORD *)*((_QWORD *)this + 16);
    if (!v4)
    {
LABEL_58:
      v31 = v4;
      if (!v4)
        return *((_QWORD *)this + 32);
      goto LABEL_4;
    }
    v26 = v4[1];
    if (__ldaxr((unsigned __int8 *)v26))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v26))
    {
      goto LABEL_53;
    }
    MEMORY[0x19AEA534C](v26);
LABEL_53:
    ++*(_QWORD *)(v26 + 8);
    v28 = __ldxr((unsigned __int8 *)v26);
    if (v28 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v26))
        goto LABEL_58;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
    goto LABEL_58;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLCanvasElement::copiedImage(WebCore::HTMLCanvasElement *this)
{
  return WebCore::HTMLCanvasElement::copiedImage((WebCore::HTMLCanvasElement *)((char *)this - 112));
}

_DWORD *`non-virtual thunk to'WebCore::HTMLCanvasElement::clearCopiedImage(WebCore::HTMLCanvasElement *this)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (result)
  {
    if (result[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  *((_BYTE *)this + 161) = 0;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLCanvasElement::virtualHasPendingActivity(WebCore::HTMLCanvasElement *this)
{
  uint64_t result;
  _BYTE *v2;

  if (!*((_BYTE *)this + 50))
    return 0;
  v2 = (_BYTE *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 32))(*((_QWORD *)this + 3)) & 1) != 0)
    return !v2[356] || v2[352] != 0;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 40))(v2);
  if ((_DWORD)result)
    return !v2[356] || v2[352] != 0;
  return result;
}

WebCore::EventNames **WebCore::HTMLCanvasElement::eventListenersDidChange(WebCore::EventNames **this)
{
  WebCore::EventNames **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v1 = this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = (unint64_t)v1[2];
  if ((v5 & 0x1000000000000) != 0 && (v7 = v5 & 0xFFFFFFFFFFFFLL, v8 = *(unsigned int *)(v7 + 28), (_DWORD)v8))
  {
    v9 = *(_QWORD **)(v7 + 16);
    v10 = 32 * v8;
    v11 = v10;
    v12 = v9;
    do
    {
      if (*v12 == *(_QWORD *)(v4 + 2296))
      {
        v6 = 1;
        goto LABEL_8;
      }
      v12 += 4;
      v11 -= 32;
    }
    while (v11);
    v13 = *(_QWORD *)(v4 + 2304);
    v14 = v10 - 32;
    do
    {
      v15 = *v9;
      v9 += 4;
      v6 = v15 == v13;
      v16 = v15 == v13 || v14 == 0;
      v14 -= 32;
    }
    while (!v16);
  }
  else
  {
    v6 = 0;
  }
LABEL_8:
  *((_BYTE *)v1 + 274) = v6;
  return this;
}

uint64_t *WebCore::HTMLCanvasElement::didMoveToNewDocument(WebCore::HTMLCanvasElement *this, WebCore::Document *a2, WebCore::Document *a3)
{
  WTF::String *v6;
  uint64_t v7;

  WebCore::ActiveDOMObject::didMoveToNewDocument((WebCore::HTMLCanvasElement *)((char *)this + 224), a3);
  v7 = *((_QWORD *)this + 31);
  if (v7)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 32) + 16))(*(_QWORD *)(v7 + 32));
    WTF::WeakHashSet<WebCore::CanvasRenderingContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::CanvasRenderingContext>((uint64_t)a2 + 1816, (_QWORD *)v7);
    *(_BYTE *)(v7 + 24) = 0;
    WebCore::Document::addCanvasNeedingPreparationForDisplayOrFlush(a3, (WebCore::CanvasRenderingContext *)v7);
    (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 32) + 24))(*(_QWORD *)(v7 + 32));
  }
  return WebCore::Element::didMoveToNewDocument(this, a2, a3, v6);
}

uint64_t WebCore::HTMLCanvasElement::renderingContext(WebCore::HTMLCanvasElement *this)
{
  return *((_QWORD *)this + 31);
}

uint64_t WebCore::HTMLCanvasElement::prepareForDisplay(WebCore::HTMLCanvasElement *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t *v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 31);
  if (!v2)
    return WebCore::CanvasBase::notifyObserversCanvasDisplayBufferPrepared((uint64_t)this + 112);
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 32))(*((_QWORD *)this + 31));
  if ((result & 1) == 0 && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2), !(_DWORD)result)
    || (*((_BYTE *)this + 22) & 0x18) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)this + 31);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 184))(v4);
    return WebCore::CanvasBase::notifyObserversCanvasDisplayBufferPrepared((uint64_t)this + 112);
  }
  v5 = *((_QWORD *)this + 26);
  if (v5 && *(_DWORD *)(v5 - 12))
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      v7 = 8 * v6;
      for (i = (uint64_t *)*((_QWORD *)this + 26); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v7 -= 8;
        if (!v7)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)this + 26);
    }
    v9 = (uint64_t *)(v5 + 8 * v6);
    if (i != v9)
    {
      v10 = *i;
LABEL_19:
      if (*(_QWORD *)(v10 + 8))
        goto LABEL_5;
      while (++i != v9)
      {
        v10 = *i;
        if ((unint64_t)(*i + 1) > 1)
        {
          if (i != v9)
            goto LABEL_19;
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t (***WebCore::HTMLCanvasElement::queueTaskKeepingObjectAlive(uint64_t a1, char a2, uint64_t (***a3)()))()
{
  uint64_t v6;
  int v7;
  uint64_t (**v8)();
  uint64_t (***result)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  uint64_t (***v14)();

  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  v7 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v6 + 8) = a1;
  ++*(_QWORD *)(a1 + 240);
  *(_DWORD *)(a1 + 24) = v7 + 4;
  v8 = *a3;
  *a3 = 0;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E33B9BE8;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v6;
  result[3] = v8;
  v14 = result;
  v10 = *(_QWORD *)(a1 + 232);
  if (!v10)
  {
    v14 = 0;
    v13 = &off_1E33B9BE8;
    return (uint64_t (***)())v13[1]();
  }
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
  {
    v14 = 0;
    goto LABEL_6;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 - 96) + 104))(v11 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v12, a2, (uint64_t *)&v14);
  result = v14;
  v14 = 0;
  if (result)
  {
LABEL_6:
    v13 = *result;
    return (uint64_t (***)())v13[1]();
  }
  return result;
}

uint64_t (***`non-virtual thunk to'WebCore::HTMLCanvasElement::queueTaskKeepingObjectAlive(uint64_t a1, char a2, uint64_t (***a3)()))()
{
  uint64_t (**v6)();
  uint64_t v7;
  int v8;
  uint64_t (**v9)();
  uint64_t (***result)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  uint64_t (***v15)();

  v6 = (uint64_t (**)())(a1 - 112);
  v7 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  v8 = *(_DWORD *)(a1 - 88);
  *(_QWORD *)(v7 + 8) = v6;
  ++*(_QWORD *)(a1 + 128);
  *(_DWORD *)(a1 - 88) = v8 + 4;
  v9 = *a3;
  *a3 = 0;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E33B9BE8;
  result[1] = v6;
  result[2] = (uint64_t (**)())v7;
  result[3] = v9;
  v15 = result;
  v11 = *(_QWORD *)(a1 + 120);
  if (!v11)
  {
    v15 = 0;
    v14 = &off_1E33B9BE8;
    return (uint64_t (***)())v14[1]();
  }
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
  {
    v15 = 0;
    goto LABEL_6;
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 - 96) + 104))(v12 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v13, a2, (uint64_t *)&v15);
  result = v15;
  v15 = 0;
  if (result)
  {
LABEL_6:
    v14 = *result;
    return (uint64_t (***)())v14[1]();
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLCanvasElement::dispatchEvent(WebCore::EventNames **this, WebCore::Event *a2, WebCore::Event *a3)
{
  return WebCore::EventDispatcher::dispatchEvent(this - 14, a2, a3);
}

WebCore::CSSParserContext *WebCore::HTMLCanvasElement::cssParserContext(WebCore::HTMLCanvasElement *this)
{
  WebCore::CSSParserContext *result;
  const WebCore::Document *v3;
  WebCore::HTMLCanvasElement *v4;
  WebCore::CSSParserContext *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  result = (WebCore::CSSParserContext *)*((_QWORD *)this + 33);
  if (!result)
  {
    v3 = *(const WebCore::Document **)(*((_QWORD *)this + 5) + 8);
    v4 = this;
    v5 = (WebCore::CSSParserContext *)WTF::fastMalloc((WTF *)0x40);
    result = WebCore::CSSParserContext::CSSParserContext(v5, v3);
    v7 = (WTF::StringImpl **)*((_QWORD *)v4 + 33);
    *((_QWORD *)v4 + 33) = result;
    if (v7)
    {
      v8 = v7[5];
      v7[5] = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v6);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v6);
        else
          *(_DWORD *)v9 -= 2;
      }
      WTF::fastFree((WTF *)v7, v6);
      return (WebCore::CSSParserContext *)*((_QWORD *)v4 + 33);
    }
  }
  return result;
}

WebCore::CSSParserContext *`non-virtual thunk to'WebCore::HTMLCanvasElement::cssParserContext(WebCore::HTMLCanvasElement *this)
{
  WebCore::CSSParserContext *result;
  const WebCore::Document *v3;
  WebCore::HTMLCanvasElement *v4;
  WebCore::CSSParserContext *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  result = (WebCore::CSSParserContext *)*((_QWORD *)this + 19);
  if (!result)
  {
    v3 = *(const WebCore::Document **)(*((_QWORD *)this - 9) + 8);
    v4 = this;
    v5 = (WebCore::CSSParserContext *)WTF::fastMalloc((WTF *)0x40);
    result = WebCore::CSSParserContext::CSSParserContext(v5, v3);
    v7 = (WTF::StringImpl **)*((_QWORD *)v4 + 19);
    *((_QWORD *)v4 + 19) = result;
    if (v7)
    {
      v8 = v7[5];
      v7[5] = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v6);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v6);
        else
          *(_DWORD *)v9 -= 2;
      }
      WTF::fastFree((WTF *)v7, v6);
      return (WebCore::CSSParserContext *)*((_QWORD *)v4 + 19);
    }
  }
  return result;
}

void *WebCore::HTMLCollection::bisoHeap(WebCore::HTMLCollection *this)
{
  return &WebCore::HTMLCollection::bisoHeap(void)::heap;
}

uint64_t WebCore::HTMLCollection::operator new(uint64_t this)
{
  if (this == 40)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::HTMLCollection::HTMLCollection(uint64_t result, uint64_t a2, unsigned int a3)
{
  __int16 v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;

  v3 = 0;
  *(_DWORD *)(result + 16) = 1;
  *(_QWORD *)result = off_1E33B7AC0;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 20) = 0;
  v4 = 96;
  switch(a3)
  {
    case 4u:
      v4 = 192;
      goto LABEL_13;
    case 5u:
LABEL_13:
      v5 = *(_WORD *)(result + 21) & 0xFE00 | a3 & 0x1F | v4;
      goto LABEL_8;
    case 8u:
    case 9u:
    case 0xAu:
      v3 = 64;
      goto LABEL_3;
    case 0x11u:
    case 0x12u:
      v3 = 224;
      goto LABEL_3;
    case 0x14u:
    case 0x15u:
      v3 = 160;
      goto LABEL_3;
    case 0x16u:
      v5 = *(_WORD *)(result + 21) & 0xFE00 | a3 & 0x1F | 0x20;
      goto LABEL_5;
    default:
LABEL_3:
      v5 = *(_WORD *)(result + 21) & 0xFE00 | a3 & 0x1F | v3;
      if (a3 > 0x19 || ((1 << a3) & 0x3AFF800) != 0 || ((1 << a3) & 0x1007FF) == 0)
LABEL_5:
        v6 = 0;
      else
LABEL_8:
        v6 = 512;
      *(_WORD *)(result + 21) = v5 & 0xFDFF | v6;
      *(_DWORD *)(a2 + 24) += 2;
      *(_QWORD *)(result + 24) = a2;
      *(_QWORD *)(result + 32) = 0;
      return result;
  }
}

uint64_t WebCore::HTMLCollection::invalidateCacheForDocument(uint64_t this, WebCore::Document *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  WTF *v5;
  void *v6;
  int v7;

  if (*(_QWORD *)(this + 32))
  {
    v2 = this;
    --*((_DWORD *)a2 + 444);
    v3 = (unsigned __int8 *)(this + 20);
    if (__ldaxr((unsigned __int8 *)(this + 20)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
LABEL_5:
      this = *(_QWORD *)(v2 + 32);
      *(_QWORD *)(v2 + 32) = 0;
      if (this)
      {
        WebCore::CollectionNamedElementCache::~CollectionNamedElementCache((WebCore::CollectionNamedElementCache *)this, a2);
        this = WTF::fastFree(v5, v6);
      }
      v7 = __ldxr(v3);
      if (v7 == 1)
      {
        if (!__stlxr(0, v3))
          return this;
      }
      else
      {
        __clrex();
      }
      return WTF::Lock::unlockSlow((WTF::Lock *)v3);
    }
    MEMORY[0x19AEA534C](this + 20);
    goto LABEL_5;
  }
  return this;
}

WebCore::CollectionNamedElementCache *WebCore::HTMLCollection::invalidateNamedElementCache(WebCore::HTMLCollection *this, WebCore::Document *a2)
{
  unsigned __int8 *v3;
  WebCore::CollectionNamedElementCache *result;
  WTF *v6;
  void *v7;
  int v8;

  --*((_DWORD *)a2 + 444);
  v3 = (unsigned __int8 *)this + 20;
  if (__ldaxr((unsigned __int8 *)this + 20))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C]((char *)this + 20);
    goto LABEL_4;
  }
  if (__stxr(1u, v3))
    goto LABEL_3;
LABEL_4:
  result = (WebCore::CollectionNamedElementCache *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (result)
  {
    WebCore::CollectionNamedElementCache::~CollectionNamedElementCache(result, a2);
    result = (WebCore::CollectionNamedElementCache *)WTF::fastFree(v6, v7);
  }
  v8 = __ldxr(v3);
  if (v8 != 1)
  {
    __clrex();
    return (WebCore::CollectionNamedElementCache *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return (WebCore::CollectionNamedElementCache *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return result;
}

uint64_t WebCore::HTMLCollection::namedItemSlow(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;

  (*(void (**)(_QWORD *))(*a1 + 80))(a1);
  v4 = (uint64_t *)a1[4];
  v5 = *a2;
  v6 = *v4;
  if (*v4)
  {
    v9 = *(_DWORD *)(v6 - 8);
    v10 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = (uint64_t *)(v6 + 24 * v13);
    v15 = *v14;
    if (*v14 != v5)
    {
      v16 = 1;
      while (v15)
      {
        v13 = (v13 + v16) & v9;
        v14 = (uint64_t *)(v6 + 24 * v13);
        v15 = *v14;
        ++v16;
        if (*v14 == v5)
          goto LABEL_8;
      }
      v14 = (uint64_t *)(v6 + 24 * *(unsigned int *)(v6 - 4));
    }
LABEL_8:
    if (v14 != (uint64_t *)(v6 + 24 * *(unsigned int *)(v6 - 4)) && *((_DWORD *)v14 + 5))
      return *(_QWORD *)(*(_QWORD *)v14[1] + 8);
  }
  v7 = v4[1];
  if (!v7)
    return 0;
  v17 = *(_DWORD *)(v7 - 8);
  v18 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
  v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = v17 & ((v20 >> 31) ^ v20);
  v14 = (uint64_t *)(v7 + 24 * v21);
  v22 = *v14;
  if (*v14 != v5)
  {
    v23 = 1;
    while (v22)
    {
      v21 = (v21 + v23) & v17;
      v14 = (uint64_t *)(v7 + 24 * v21);
      v22 = *v14;
      ++v23;
      if (*v14 == v5)
        goto LABEL_15;
    }
    v14 = (uint64_t *)(v7 + 24 * *(unsigned int *)(v7 - 4));
  }
LABEL_15:
  if (v14 != (uint64_t *)(v7 + 24 * *(unsigned int *)(v7 - 4)) && *((_DWORD *)v14 + 5))
    return *(_QWORD *)(*(_QWORD *)v14[1] + 8);
  else
    return 0;
}

uint64_t WebCore::HTMLCollection::isSupportedPropertyName(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;

  (*(void (**)(_QWORD *))(*a1 + 80))(a1);
  v4 = (uint64_t *)a1[4];
  v5 = *a2;
  v6 = *v4;
  if (*v4)
  {
    v9 = *(_DWORD *)(v6 - 8);
    v10 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = (uint64_t *)(v6 + 24 * v13);
    v15 = *v14;
    if (*v14 != v5)
    {
      v16 = 1;
      while (v15)
      {
        v13 = (v13 + v16) & v9;
        v14 = (uint64_t *)(v6 + 24 * v13);
        v15 = *v14;
        ++v16;
        if (*v14 == v5)
          goto LABEL_8;
      }
      v14 = (uint64_t *)(v6 + 24 * *(unsigned int *)(v6 - 4));
    }
LABEL_8:
    if (v14 != (uint64_t *)(v6 + 24 * *(unsigned int *)(v6 - 4)))
      return 1;
  }
  v7 = v4[1];
  if (!v7)
    return 0;
  v17 = *(_DWORD *)(v7 - 8);
  v18 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
  v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = v17 & ((v20 >> 31) ^ v20);
  v22 = (uint64_t *)(v7 + 24 * v21);
  v23 = *v22;
  if (*v22 != v5)
  {
    v24 = 1;
    while (v23)
    {
      v21 = (v21 + v24) & v17;
      v22 = (uint64_t *)(v7 + 24 * v21);
      v23 = *v22;
      ++v24;
      if (*v22 == v5)
        return v22 != (uint64_t *)(v7 + 24 * *(unsigned int *)(v7 - 4));
    }
    v22 = (uint64_t *)(v7 + 24 * *(unsigned int *)(v7 - 4));
  }
  return v22 != (uint64_t *)(v7 + 24 * *(unsigned int *)(v7 - 4));
}

unsigned __int8 *WebCore::HTMLCollection::updateNamedElementCache(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v2;
  int v3;
  WebCore::HTMLElement *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  WTF *v10;
  void *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL4 ShouldBeVisibleInDocumentAll;
  uint64_t *v33;
  uint64_t *v34;

  if (!*((_QWORD *)this + 4))
  {
    v1 = this;
    v2 = WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    v3 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v1 + 16))(v1);
    if (v3)
    {
      v14 = v3;
      v15 = 0;
      v16 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      do
      {
        v17 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v1 + 24))(v1, v15);
        v18 = *(_QWORD *)(v17 + 104);
        if (v18)
        {
          v19 = v16;
          if (*(_QWORD *)(v18 + 24))
          {
            v25 = *(unsigned int *)(v18 + 4);
            if ((v25 & 1) != 0)
            {
              v26 = *(uint64_t **)(v18 + 40);
              v27 = *(unsigned int *)(v18 + 52);
            }
            else
            {
              v26 = (uint64_t *)(v18 + 32);
              v27 = v25 >> 5;
            }
            if (v27)
            {
              while (1)
              {
                v28 = *v26;
                if (*v26 == WebCore::HTMLNames::idAttr
                  || *(_QWORD *)(v28 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
                  && *(_QWORD *)(v28 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
                {
                  break;
                }
                v26 += 2;
                if (!--v27)
                  goto LABEL_48;
              }
            }
            else
            {
LABEL_48:
              v26 = 0;
            }
            v19 = v26 + 1;
          }
        }
        else
        {
          v19 = v16;
        }
        if (*v19 && *(_DWORD *)(*v19 + 4))
        {
          v33 = v19;
          WebCore::CollectionNamedElementCache::append((uint64_t *)v2, (uint64_t *)v2, v19, v17);
          v19 = v33;
        }
        if (v17)
          v20 = (*(_WORD *)(v17 + 28) & 0x10) == 0;
        else
          v20 = 1;
        if (!v20)
        {
          v21 = *(_QWORD *)(v17 + 104);
          if (v21)
          {
            v22 = *(unsigned int *)(v21 + 4);
            v23 = v16;
            if ((v22 & 2) != 0)
            {
              if ((v22 & 1) != 0)
              {
                v29 = *(uint64_t **)(v21 + 40);
                v30 = *(unsigned int *)(v21 + 52);
              }
              else
              {
                v29 = (uint64_t *)(v21 + 32);
                v30 = v22 >> 5;
              }
              if (v30)
              {
                while (1)
                {
                  v31 = *v29;
                  if (*v29 == WebCore::HTMLNames::nameAttr
                    || *(_QWORD *)(v31 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
                    && *(_QWORD *)(v31 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
                  {
                    break;
                  }
                  v29 += 2;
                  if (!--v30)
                    goto LABEL_57;
                }
              }
              else
              {
LABEL_57:
                v29 = 0;
              }
              v23 = v29 + 1;
            }
          }
          else
          {
            v23 = v16;
          }
          v24 = *v23;
          if (*v23)
          {
            if (*(_DWORD *)(v24 + 4))
            {
              if (*v19 != v24)
              {
                if ((*(_WORD *)(v1 + 21) & 0x1F) != 7
                  || (v34 = v23,
                      ShouldBeVisibleInDocumentAll = WebCore::nameShouldBeVisibleInDocumentAll(*(WebCore **)(*(_QWORD *)(v17 + 96) + 24), v4), v23 = v34, ShouldBeVisibleInDocumentAll))
                {
                  WebCore::CollectionNamedElementCache::append((uint64_t *)v2, (uint64_t *)(v2 + 8), v23, v17);
                }
              }
            }
          }
        }
        v15 = (v15 + 1);
      }
      while ((_DWORD)v15 != v14);
    }
    v5 = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
      LODWORD(v5) = *(_DWORD *)(v5 - 12);
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      LODWORD(v6) = *(_DWORD *)(v6 - 12);
    v7 = *(unsigned int *)(v2 + 28) + (unint64_t)(v6 + v5);
    if (v7)
      WebCore::reportExtraMemoryAllocatedForCollectionIndexCache((WebCore *)(8 * v7));
    v8 = v1 + 20;
    if (__ldaxr(v1 + 20))
    {
      __clrex();
    }
    else if (!__stxr(1u, v8))
    {
LABEL_12:
      this = (unsigned __int8 *)*((_QWORD *)v1 + 4);
      *((_QWORD *)v1 + 4) = v2;
      if (this)
      {
        WebCore::CollectionNamedElementCache::~CollectionNamedElementCache((WebCore::CollectionNamedElementCache *)this, v4);
        this = (unsigned __int8 *)WTF::fastFree(v10, v11);
      }
      v12 = __ldxr(v8);
      if (v12 == 1)
      {
        if (!__stlxr(0, v8))
          goto LABEL_19;
      }
      else
      {
        __clrex();
      }
      this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 20));
LABEL_19:
      v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 40) + 8);
      ++*(_DWORD *)(v13 + 1776);
      return this;
    }
    MEMORY[0x19AEA534C](v1 + 20);
    goto LABEL_12;
  }
  return this;
}

BOOL WebCore::nameShouldBeVisibleInDocumentAll(WebCore *this, WebCore::HTMLElement *a2)
{
  return *(WebCore **)(WebCore::HTMLNames::aTag + 24) == this
      || *(WebCore **)(WebCore::HTMLNames::buttonTag + 24) == this
      || *(WebCore **)(WebCore::HTMLNames::embedTag + 24) == this
      || *(WebCore **)(WebCore::HTMLNames::formTag + 24) == this
      || *(WebCore **)(WebCore::HTMLNames::frameTag + 24) == this
      || *(WebCore **)(WebCore::HTMLNames::framesetTag + 24) == this
      || *(WebCore **)(WebCore::HTMLNames::iframeTag + 24) == this
      || *(WebCore **)(WebCore::HTMLNames::imgTag + 24) == this
      || *(WebCore **)(WebCore::HTMLNames::inputTag + 24) == this
      || *(WebCore **)(WebCore::HTMLNames::mapTag + 24) == this
      || *(WebCore **)(WebCore::HTMLNames::metaTag + 24) == this
      || *(WebCore **)(WebCore::HTMLNames::objectTag + 24) == this
      || *(WebCore **)(WebCore::HTMLNames::selectTag + 24) == this
      || *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24) == (_QWORD)this;
}

uint64_t WebCore::HTMLCollection::namedItems@<X0>(uint64_t this@<X0>, const WTF::AtomString *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;

  *a3 = 0;
  a3[1] = 0;
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v5 = this;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 80))(this);
    v6 = *(uint64_t **)(v5 + 32);
    v7 = *(_QWORD *)a2;
    v8 = *v6;
    if (*v6)
    {
      v15 = *(_DWORD *)(v8 - 8);
      v16 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
      v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
      v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
      v19 = v15 & ((v18 >> 31) ^ v18);
      v20 = (uint64_t *)(v8 + 24 * v19);
      v21 = *v20;
      if (*v20 != v7)
      {
        v22 = 1;
        while (v21)
        {
          v19 = (v19 + v22) & v15;
          v20 = (uint64_t *)(v8 + 24 * v19);
          v21 = *v20;
          ++v22;
          if (*v20 == v7)
            goto LABEL_21;
        }
        v20 = (uint64_t *)(v8 + 24 * *(unsigned int *)(v8 - 4));
      }
LABEL_21:
      if (v20 == (uint64_t *)(v8 + 24 * *(unsigned int *)(v8 - 4)))
        v9 = 0;
      else
        v9 = (uint64_t)(v20 + 1);
    }
    else
    {
      v9 = 0;
    }
    v10 = v6[1];
    if (!v10)
      goto LABEL_7;
    v23 = *(_DWORD *)(v10 - 8);
    v24 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
    v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
    v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
    v27 = v23 & ((v26 >> 31) ^ v26);
    v28 = (uint64_t *)(v10 + 24 * v27);
    v29 = *v28;
    if (*v28 != v7)
    {
      v30 = 1;
      while (v29)
      {
        v27 = (v27 + v30) & v23;
        v28 = (uint64_t *)(v10 + 24 * v27);
        v29 = *v28;
        ++v30;
        if (*v28 == v7)
          goto LABEL_28;
      }
      v28 = (uint64_t *)(v10 + 24 * *(unsigned int *)(v10 - 4));
    }
LABEL_28:
    if (v28 == (uint64_t *)(v10 + 24 * *(unsigned int *)(v10 - 4)))
LABEL_7:
      v11 = 0;
    else
      v11 = (uint64_t)(v28 + 1);
    if (v9)
      v12 = *(unsigned int *)(v9 + 12);
    else
      v12 = 0;
    if (v11)
      v13 = *(unsigned int *)(v11 + 12);
    else
      v13 = 0;
    v14 = v13 + v12;
    if (v13 + v12)
    {
      if (v14 >> 29)
      {
        __break(0xC471u);
        return this;
      }
      this = WTF::fastMalloc((WTF *)(8 * v14));
      *((_DWORD *)a3 + 2) = v14;
      *a3 = this;
    }
    if (v9)
      this = WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendContainerWithMapping<WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::HTMLCollection::namedItems(WTF::AtomString const&)::$_0>((uint64_t)a3, v9);
    if (v11)
      return WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendContainerWithMapping<WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::HTMLCollection::namedItems(WTF::AtomString const&)::$_0>((uint64_t)a3, v11);
  }
  return this;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendContainerWithMapping<WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::HTMLCollection::namedItems(WTF::AtomString const&)::$_0>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(unsigned int *)(result + 12);
  v5 = *(unsigned int *)(a2 + 12) + v4;
  if (v5 > *(unsigned int *)(result + 8))
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v6 = *(void **)result;
    v7 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v3 + 8) = v5;
    *(_QWORD *)v3 = v7;
    result = (uint64_t)memcpy(v7, v6, 8 * v4);
    if (v6)
    {
      if (*(void **)v3 == v6)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v6, v8);
    }
  }
  v9 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v9)
  {
    v10 = *(uint64_t **)a2;
    v11 = *(_QWORD *)v3;
    v12 = 8 * v9;
    v13 = *(_DWORD *)(v3 + 12);
    do
    {
      v14 = *v10++;
      v15 = *(_QWORD *)(v14 + 8);
      *(_DWORD *)(v15 + 24) += 2;
      *(_QWORD *)(v11 + 8 * v13++) = v15;
      v12 -= 8;
    }
    while (v12);
    *(_DWORD *)(v3 + 12) = v13;
  }
  return result;
}

unint64_t WebCore::HTMLCollection::memoryCost(WebCore::HTMLCollection *this)
{
  unsigned __int8 *v2;
  uint64_t *v4;
  unint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;

  v2 = (unsigned __int8 *)this + 20;
  if (__ldaxr((unsigned __int8 *)this + 20))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C]((char *)this + 20);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (uint64_t *)*((_QWORD *)this + 4);
  if (v4)
  {
    v8 = *v4;
    if (*v4)
      LODWORD(v8) = *(_DWORD *)(v8 - 12);
    v9 = v4[1];
    if (v9)
      LODWORD(v9) = *(_DWORD *)(v9 - 12);
    v5 = 8 * (*((unsigned int *)v4 + 7) + (unint64_t)(v9 + v8));
  }
  else
  {
    v5 = 0;
  }
  v6 = __ldxr(v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, v2))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v5;
}

uint64_t WebCore::HTMLDListElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33B91C0;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLDataElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33B96B0;
  *a3 = result;
  return result;
}

void WebCore::HTMLDataListElement::~HTMLDataListElement(uint64_t this)
{
  --*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 8) + 3288);
  WebCore::Element::~Element(this);
}

void WebCore::HTMLDataListElement::~HTMLDataListElement(WebCore::HTMLDataListElement *this)
{
  bmalloc::api *v1;
  void *v2;

  --*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3288);
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t *WebCore::HTMLDataListElement::didMoveToNewDocument(WebCore::Element *this, WebCore::Document *a2, WebCore::Document *a3, WTF::String *a4)
{
  --*((_DWORD *)a2 + 822);
  ++*((_DWORD *)a3 + 822);
  return WebCore::Element::didMoveToNewDocument(this, a2, a3, a4);
}

uint64_t WebCore::HTMLDataListElement::options@<X0>(WebCore::HTMLDataListElement *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  WebCore::NodeListsNodeData *v7;
  WTF *v8;
  void *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  WTF::StringImpl *v17;
  BOOL v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v5)
  {
    WebCore::Node::materializeRareData(this);
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v6 = *v5;
  if (!*v5)
  {
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_QWORD *)(v6 + 32) = 0;
    v7 = (WebCore::NodeListsNodeData *)*v5;
    *v5 = v6;
    if (v7)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v7, a2);
      WTF::fastFree(v8, v9);
      v6 = *v5;
    }
  }
  v10 = (uint64_t *)(v6 + 32);
  v11 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v12 = *v10;
  if (*v10
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v6 + 32), 8u, 0), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = ((*((_DWORD *)v11 + 4) >> 8) + 18) & v13;
  v15 = (unsigned __int8 *)(v12 + 24 * v14);
  v16 = *v15;
  v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
  if (*v15)
    v18 = 0;
  else
    v18 = v17 == 0;
  if (v18)
  {
LABEL_25:
    *v15 = 18;
    *((_QWORD *)v15 + 1) = v11;
    *((_QWORD *)v15 + 2) = 0;
    v23 = *v10;
    if (*v10)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v26 = *v10;
    if (*v10)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_39;
    }
    else
    {
      if (3 * v29 > 4 * v28)
      {
LABEL_39:
        result = bmalloc::api::isoAllocate();
        *(_DWORD *)(result + 16) = 1;
        *(_BYTE *)(result + 20) = 0;
        *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0xF2;
        *((_DWORD *)this + 6) += 2;
        *(_QWORD *)(result + 24) = this;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)(result + 64) = 0u;
        *(_BYTE *)(result + 80) &= 0xFCu;
        *(_QWORD *)result = off_1E33B3320;
        *(_QWORD *)(result + 8) = 0;
        *((_QWORD *)v15 + 2) = result;
        goto LABEL_40;
      }
      if (!(_DWORD)v29)
      {
        v30 = 8;
        goto LABEL_46;
      }
    }
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_46:
    v15 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(v10, v30, (uint64_t)v15);
    goto LABEL_39;
  }
  v19 = 0;
  v20 = 1;
  while (1)
  {
    v21 = v19;
    v19 = v15;
    if (v16 != 255)
    {
      v19 = v21;
      if (v16 == 18 && v17 == v11)
        break;
    }
    v14 = ((_DWORD)v14 + v20) & v13;
    v15 = (unsigned __int8 *)(v12 + 24 * v14);
    v16 = *v15;
    v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
    ++v20;
    if (*v15)
      v22 = 0;
    else
      v22 = v17 == 0;
    if (v22)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
        --*(_DWORD *)(*v10 - 16);
        v15 = (unsigned __int8 *)v19;
      }
      goto LABEL_25;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = *(_QWORD *)(v12 + 24 * v14 + 16);
  ++*(_DWORD *)(result + 16);
LABEL_40:
  *a3 = result;
  return result;
}

unsigned int *WebCore::HTMLDataListElement::childrenChanged(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int *result;

  result = WebCore::HTMLElement::childrenChanged(a1, a2);
  if (a2[32] == 1)
    return (unsigned int *)WebCore::HTMLDataListElement::optionElementChildrenChanged(a1);
  return result;
}

uint64_t WebCore::HTMLDataListElement::optionElementChildrenChanged(uint64_t this)
{
  uint64_t v1;
  const WTF::AtomString *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(this + 104);
  if (v1 && *(_QWORD *)(v1 + 24))
  {
    v6 = *(_DWORD *)(v1 + 4);
    if ((v6 & 1) != 0)
    {
      v7 = *(uint64_t **)(v1 + 40);
      LODWORD(v8) = *(_DWORD *)(v1 + 52);
    }
    else
    {
      v7 = (uint64_t *)(v1 + 32);
      LODWORD(v8) = v6 >> 5;
    }
    if ((_DWORD)v8)
    {
      v8 = v8;
      while (1)
      {
        v9 = *v7;
        if (*v7 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v7 += 2;
        if (!--v8)
          goto LABEL_24;
      }
    }
    else
    {
LABEL_24:
      v7 = 0;
    }
    v2 = (const WTF::AtomString *)(v7 + 1);
  }
  else
  {
    v2 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
  }
  if (*(_QWORD *)v2)
  {
    if (*(_DWORD *)(*(_QWORD *)v2 + 4))
    {
      v3 = *(_QWORD *)(*(_QWORD *)(this + 40) + 64);
      if (v3)
      {
        v4 = *(_DWORD *)v3 + 1;
        *(_DWORD *)v3 = v4;
        v5 = *(_QWORD *)(v3 + 8);
        if (v5 && *(_DWORD *)(v5 - 12))
        {
          this = (uint64_t)WebCore::IdTargetObserverRegistry::notifyObserversInternal((WTF::StringImpl **)v3, v2);
          v4 = *(_DWORD *)v3;
        }
        if (v4)
        {
          *(_DWORD *)v3 = v4 - 1;
        }
        else
        {
          this = 286;
          __break(0xC471u);
        }
      }
    }
  }
  return this;
}

unsigned int *WebCore::DetailsSlotAssignment::hostChildElementDidChange(WebCore::DetailsSlotAssignment *this, const WebCore::Element *a2, WebCore::ShadowRoot *a3)
{
  WebCore::ShadowRoot *v4;
  WebCore::DetailsSlotAssignment *v5;
  uint64_t v6;

  if ((*((_WORD *)a2 + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::summaryTag + 24))
  {
    return WebCore::NamedSlotAssignment::didChangeSlot((unsigned int *)this, MEMORY[0x1E0CBF3B8], a3);
  }
  if ((_MergedGlobals_186 & 1) == 0)
  {
    v4 = a3;
    v5 = this;
    WTF::AtomStringImpl::add();
    a3 = v4;
    this = v5;
    qword_1ECE83520 = v6;
    _MergedGlobals_186 = 1;
  }
  return WebCore::NamedSlotAssignment::didChangeSlot((unsigned int *)this, (const WTF::AtomString *)&qword_1ECE83520, a3);
}

uint64_t *WebCore::DetailsSlotAssignment::slotNameForHostChild(WebCore::DetailsSlotAssignment *this, const WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)a2 + 4);
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::detailsTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195BC6924);
  }
  if ((*((_WORD *)a2 + 14) & 0x10) == 0)
    return (uint64_t *)MEMORY[0x1E0CBF3B8];
  v3 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24);
  if (v3 != *(_QWORD *)(WebCore::HTMLNames::summaryTag + 24))
    return (uint64_t *)MEMORY[0x1E0CBF3B8];
  v5 = *(_QWORD *)(v2 + 80);
  if (!v5)
    return (uint64_t *)MEMORY[0x1E0CBF3B8];
  result = (uint64_t *)MEMORY[0x1E0CBF3B8];
  while ((*(_WORD *)(v5 + 28) & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != v3)
  {
    v5 = *(_QWORD *)(v5 + 56);
    if (!v5)
      return result;
  }
  if ((const WebCore::Node *)v5 != a2)
    return (uint64_t *)MEMORY[0x1E0CBF3B8];
  if ((_MergedGlobals_186 & 1) != 0)
    return &qword_1ECE83520;
  WTF::AtomStringImpl::add();
  qword_1ECE83520 = v6;
  result = &qword_1ECE83520;
  _MergedGlobals_186 = 1;
  return result;
}

void WebCore::HTMLDetailsElement::create(WebCore::HTMLDetailsElement *this@<X0>, const WebCore::QualifiedName *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  WebCore *v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  WebCore::Style::Scope *v12;
  void *v13;
  WebCore::Document *v14;
  __int16 v15;
  __int16 v16;
  WebCore::Document *v17;

  v7 = bmalloc::api::isoAllocate();
  v8 = (WebCore *)v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = (char *)a2 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*((_DWORD *)a2 + 831);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    ++*v9;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33B7B28;
  *(_BYTE *)(v7 + 138) = 0;
  *(_QWORD *)(v7 + 120) = 0;
  *(_QWORD *)(v7 + 128) = 0;
  *(_QWORD *)(v7 + 112) = 0;
  *(_BYTE *)(v7 + 136) = 0;
  *a3 = v7;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  v10[2] = 0;
  v10[3] = 0;
  *v10 = off_1E33B9108;
  v10[1] = 0;
  v11 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v11 + 8) = xmmword_1968BC9D0;
  *(_DWORD *)(v11 + 24) = 2;
  *(_WORD *)(v11 + 28) = -20348;
  *(_OWORD *)(v11 + 30) = 0u;
  *(_OWORD *)(v11 + 46) = 0u;
  *(_OWORD *)(v11 + 62) = 0u;
  *(_WORD *)(v11 + 78) = 0;
  ++*((_DWORD *)a2 + 831);
  *(_QWORD *)(v11 + 80) = 0;
  *(_QWORD *)(v11 + 88) = 0;
  *(_QWORD *)(v11 + 96) = v11;
  *(_QWORD *)(v11 + 104) = a2;
  *(_QWORD *)(v11 + 112) = (char *)a2 + 96;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_QWORD *)(v11 + 40) = v11 + 96;
  *(_QWORD *)v11 = off_1E33A7A70;
  *(_BYTE *)(v11 + 192) &= 0x80u;
  *(_WORD *)(v11 + 193) = 256;
  *(_QWORD *)(v11 + 200) = 0;
  *(_QWORD *)(v11 + 208) = 0;
  v12 = (WebCore::Style::Scope *)WTF::fastMalloc((WTF *)0x140);
  *(_QWORD *)(v11 + 216) = WebCore::Style::Scope::Scope(v12, (WebCore::ShadowRoot *)v11);
  *(_QWORD *)(v11 + 224) = v10;
  *(_BYTE *)(v11 + 232) = 0;
  *(_BYTE *)(v11 + 240) = 0;
  *(_QWORD *)(v11 + 16) |= 0x30000000000000uLL;
  v17 = (WebCore::Document *)v11;
  WebCore::Element::addShadowRoot(v8, (uint64_t *)&v17);
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 6) == 2)
    {
      v15 = *((_WORD *)v14 + 15);
      if ((v15 & 0x400) == 0)
      {
        v16 = *((_WORD *)v14 + 14);
        if ((v16 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef(v14, v13);
        }
        else
        {
          if ((v16 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v14 + 20) + 16))(*((_QWORD *)v14 + 20));
            v15 = *((_WORD *)v14 + 15);
          }
          *((_WORD *)v14 + 15) = v15 | 0x400;
          (*(void (**)(WebCore::Document *))(*(_QWORD *)v14 + 72))(v14);
        }
      }
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
  }
}

double WebCore::HTMLDetailsElement::createElementRenderer@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double result;

  v6 = bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v6, 1, a1, a2, 76, 1);
  result = 0.0;
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)v7 = off_1E341F9F8;
  *(_DWORD *)(v7 + 200) = -1;
  *(_BYTE *)(v7 + 204) &= 0xFCu;
  *(_BYTE *)(v7 + 208) = 0;
  *(_BYTE *)(v7 + 212) = 0;
  *(_DWORD *)(v7 + 240) = 0;
  *(_QWORD *)(v7 + 216) = 0;
  *(_QWORD *)(v7 + 224) = 0;
  *(_DWORD *)(v7 + 20) |= 0x40000u;
  *a3 = v7;
  return result;
}

unsigned int *WebCore::HTMLDetailsElement::didAddUserAgentShadowRoot(WebCore::HTMLDetailsElement *this, WebCore::ShadowRoot *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WebCore::Node *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  WebCore::Node *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  unsigned int *result;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[8];
  WTF::StringImpl *v64;
  char v65;
  _BYTE v66[8];
  WTF::StringImpl *v67;
  char v68;
  WTF::StringImpl *v69;
  _BYTE v70[8];
  WTF::StringImpl *v71;
  char v72;
  WebCore::Node *v73;

  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v5 = bmalloc::api::isoAllocate();
  v6 = v5;
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x101C00000002;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = v4 + 96;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  v7 = WebCore::HTMLNames::slotTag;
  if (WebCore::HTMLNames::slotTag)
    ++*(_DWORD *)WebCore::HTMLNames::slotTag;
  *(_QWORD *)(v5 + 96) = v7;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33CB540;
  *(_WORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  *(_QWORD *)(v5 + 128) = 0;
  if ((_MergedGlobals_186 & 1) != 0)
    goto LABEL_4;
  WTF::AtomStringImpl::add();
  qword_1ECE83520 = (uint64_t)v73;
  _MergedGlobals_186 = 1;
  v57 = *(_QWORD *)(v6 + 104);
  if (!v57)
    goto LABEL_4;
  v58 = *(_DWORD *)(v57 + 4);
  if ((v58 & 1) != 0)
  {
    v59 = *(uint64_t **)(v57 + 40);
    v60 = *(_DWORD *)(v57 + 52);
  }
  else
  {
    v59 = (uint64_t *)(v57 + 32);
    v60 = v58 >> 5;
  }
  if (v60)
  {
    v61 = 0;
    v8 = 0xFFFFFFFFLL;
    while (1)
    {
      v62 = *v59;
      if (*v59 == WebCore::HTMLNames::nameAttr
        || *(_QWORD *)(v62 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
        && *(_QWORD *)(v62 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
      {
        break;
      }
      ++v61;
      v59 += 2;
      if (v60 == v61)
        goto LABEL_5;
    }
    v8 = v61;
  }
  else
  {
LABEL_4:
    v8 = 0xFFFFFFFFLL;
  }
LABEL_5:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v6, v8, (WebCore::TreeScope *)&WebCore::HTMLNames::nameAttr, (WTF::StringImpl **)&qword_1ECE83520, 0);
  v9 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v6);
  if (v9)
  {
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 + 1, v9));
  }
  v12 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v9;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v51 = *(unsigned int *)(v12 + 28);
      if ((_DWORD)v51)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v51));
      v52 = *(WTF **)(v12 + 16);
      if (v52)
      {
        *(_QWORD *)(v12 + 16) = 0;
        *(_DWORD *)(v12 + 24) = 0;
        WTF::fastFree(v52, v10);
      }
      WTF::fastFree((WTF *)v12, v10);
    }
  }
  WebCore::HTMLSummaryElement::create((WebCore::HTMLSummaryElement *)&WebCore::HTMLNames::summaryTag, *(const WebCore::QualifiedName **)(*((_QWORD *)this + 5) + 8), (uint64_t *)&v73);
  v15 = v73;
  v16 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  WebCore::defaultDetailsSummaryText((uint64_t)&v69);
  v17 = bmalloc::api::isoAllocate();
  v18 = v17;
  *(_OWORD *)(v17 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v17 + 24) = 0x300300000002;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 40) = v16 + 96;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  ++*(_DWORD *)(v16 + 3324);
  v19 = v69;
  if (v69 || (v19 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
    *(_DWORD *)v19 += 2;
  *(_QWORD *)(v17 + 80) = v19;
  *(_QWORD *)v17 = off_1E33A8078;
  WebCore::ContainerNode::appendChild((uint64_t)v15, (WebCore::Node *)v17, (uint64_t)v70);
  if (v72)
  {
    v21 = v71;
    v71 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  if (*(_DWORD *)(v18 + 24) == 2)
  {
    v43 = *(_WORD *)(v18 + 30);
    if ((v43 & 0x400) == 0)
    {
      v44 = *(_WORD *)(v18 + 28);
      if ((v44 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v18, v20);
      }
      else
      {
        if ((v44 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v18 + 160) + 16))(*(_QWORD *)(v18 + 160));
          v43 = *(_WORD *)(v18 + 30);
        }
        *(_WORD *)(v18 + 30) = v43 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
      }
    }
  }
  else
  {
    *(_DWORD *)(v18 + 24) -= 2;
  }
  v22 = v69;
  v69 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  if ((*((_QWORD *)v15 + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v23 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v23 = 1;
    *(_QWORD *)(v23 + 16) = 0;
    *(_QWORD *)(v23 + 24) = 0;
    *(_QWORD *)(v23 + 8) = v15;
    *(_BYTE *)(v23 + 32) = 0;
    v24 = *((_QWORD *)v15 + 2);
    *((_QWORD *)v15 + 2) = v24 & 0xFFFF000000000000 | v23;
    v25 = v24 & 0xFFFFFFFFFFFFLL;
    if ((v24 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v26 = __ldaxr((unsigned int *)v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, (unsigned int *)v25));
      if (!v27)
      {
        atomic_store(1u, (unsigned int *)v25);
        v55 = *(unsigned int *)(v25 + 28);
        if ((_DWORD)v55)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v25 + 16), (WTF::StringImpl *)(*(_QWORD *)(v25 + 16) + 32 * v55));
        v56 = *(WTF **)(v25 + 16);
        if (v56)
        {
          *(_QWORD *)(v25 + 16) = 0;
          *(_DWORD *)(v25 + 24) = 0;
          WTF::fastFree(v56, v20);
        }
        WTF::fastFree((WTF *)v25, v20);
      }
    }
  }
  v28 = (unsigned int *)(*((_QWORD *)v15 + 2) & 0xFFFFFFFFFFFFLL);
  if (v28)
  {
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 1, v28));
  }
  v30 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = v28;
  if (v30)
  {
    do
    {
      v31 = __ldaxr((unsigned int *)v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, (unsigned int *)v30));
    if (!v32)
    {
      atomic_store(1u, (unsigned int *)v30);
      v53 = *(unsigned int *)(v30 + 28);
      if ((_DWORD)v53)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v30 + 16), (WTF::StringImpl *)(*(_QWORD *)(v30 + 16) + 32 * v53));
      v54 = *(WTF **)(v30 + 16);
      if (v54)
      {
        *(_QWORD *)(v30 + 16) = 0;
        *(_DWORD *)(v30 + 24) = 0;
        WTF::fastFree(v54, v20);
      }
      WTF::fastFree((WTF *)v30, v20);
    }
  }
  v33 = v73;
  WebCore::ContainerNode::appendChild(v6, v73, (uint64_t)v66);
  if (v68)
  {
    v35 = v67;
    v67 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v34);
      else
        *(_DWORD *)v35 -= 2;
    }
  }
  WebCore::ContainerNode::appendChild((uint64_t)a2, (WebCore::Node *)v6, (uint64_t)v63);
  if (v65)
  {
    v37 = v64;
    v64 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v36);
      else
        *(_DWORD *)v37 -= 2;
    }
  }
  v38 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  result = (unsigned int *)bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 2) = xmmword_1968BC9D0;
  *((_QWORD *)result + 3) = 0x101C00000002;
  *((_QWORD *)result + 4) = 0;
  *((_QWORD *)result + 5) = v38 + 96;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  ++*(_DWORD *)(v38 + 3324);
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 11) = 0;
  v41 = WebCore::HTMLNames::slotTag;
  if (WebCore::HTMLNames::slotTag)
    ++*(_DWORD *)WebCore::HTMLNames::slotTag;
  *((_QWORD *)result + 12) = v41;
  *((_QWORD *)result + 13) = 0;
  *(_QWORD *)result = off_1E33CB540;
  *((_WORD *)result + 56) = 0;
  *((_QWORD *)result + 15) = 0;
  *((_QWORD *)result + 16) = 0;
  v42 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = result;
  if (v42)
  {
    if (*(_DWORD *)(v42 + 24) == 2)
    {
      v49 = *(_WORD *)(v42 + 30);
      if ((v49 & 0x400) == 0)
      {
        v50 = *(_WORD *)(v42 + 28);
        if ((v50 & 0xF000) == 0x9000)
        {
          result = WebCore::Document::removedLastRef((WebCore::Document *)v42, v40);
        }
        else
        {
          if ((v50 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v42 + 160) + 16))(*(_QWORD *)(v42 + 160));
            v49 = *(_WORD *)(v42 + 30);
          }
          *(_WORD *)(v42 + 30) = v49 | 0x400;
          result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 72))(v42);
        }
      }
    }
    else
    {
      *(_DWORD *)(v42 + 24) -= 2;
    }
  }
  if (*((_DWORD *)v33 + 6) == 2)
  {
    v45 = *((_WORD *)v33 + 15);
    if ((v45 & 0x400) == 0)
    {
      v46 = *((_WORD *)v33 + 14);
      if ((v46 & 0xF000) == 0x9000)
      {
        result = WebCore::Document::removedLastRef(v33, v40);
      }
      else
      {
        if ((v46 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)v33 + 20) + 16))(*((_QWORD *)v33 + 20));
          v45 = *((_WORD *)v33 + 15);
        }
        *((_WORD *)v33 + 15) = v45 | 0x400;
        result = (unsigned int *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v33 + 72))(v33);
      }
    }
  }
  else
  {
    *((_DWORD *)v33 + 6) -= 2;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    v47 = *(_WORD *)(v6 + 30);
    if ((v47 & 0x400) == 0)
    {
      v48 = *(_WORD *)(v6 + 28);
      if ((v48 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v6, v40);
      }
      else
      {
        if ((v48 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
          v47 = *(_WORD *)(v6 + 30);
        }
        *(_WORD *)(v6 + 30) = v47 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
      }
    }
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

BOOL WebCore::HTMLDetailsElement::isActiveSummary(WebCore::HTMLDetailsElement *this, WebCore::HTMLDetailsElement **a2)
{
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  WebCore::HTMLDetailsElement **v13;
  __int16 v15;
  __int16 v16;
  uint64_t v17;
  void *v18;
  _WORD *v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;

  v4 = *((_QWORD *)this + 14);
  if (v4)
    v5 = *(_QWORD ***)(v4 + 8);
  else
    v5 = 0;
  v6 = *v5[5];
  if (v6)
    v7 = (*(_WORD *)(v6 + 28) & 0x80) == 0;
  else
    v7 = 1;
  if (v7)
    goto LABEL_15;
  v8 = *(_DWORD *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v8 + 2;
  v9 = *(_QWORD *)(v6 + 224);
  if (v9)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    v8 = *(_DWORD *)(v6 + 24) - 2;
    if (*(_DWORD *)(v6 + 24) != 2)
    {
LABEL_10:
      *(_DWORD *)(v6 + 24) = v8;
      goto LABEL_11;
    }
  }
  else
  {
    v10 = 0;
    if (v8)
      goto LABEL_10;
  }
  v15 = *(_WORD *)(v6 + 30);
  if ((v15 & 0x400) == 0)
  {
    v16 = *(_WORD *)(v6 + 28);
    if ((v16 & 0xF000) == 0x9000)
    {
      WebCore::Document::removedLastRef((WebCore::Document *)v6, v5);
    }
    else
    {
      if ((v16 & 0x20) != 0)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
        v15 = *(_WORD *)(v6 + 30);
      }
      *(_WORD *)(v6 + 30) = v15 | 0x400;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
    }
  }
LABEL_11:
  if (v10)
  {
    if (a2[4] != this)
      return 0;
    v11 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x58) + 224);
    if (!v11)
      return 0;
    v17 = (*(uint64_t (**)(uint64_t, WebCore::HTMLDetailsElement **))(*(_QWORD *)v11 + 16))(v11, a2);
    if (!v17)
      return 0;
    v19 = (_WORD *)v17;
    v20 = *(_DWORD *)(v17 + 24);
    *(_DWORD *)(v17 + 24) = v20 + 2;
    v21 = *((_QWORD *)this + 14);
    if (v21)
      v21 = *(_QWORD *)(v21 + 8);
    v12 = v17 == v21;
    if (v20)
    {
      *(_DWORD *)(v17 + 24) = v20;
    }
    else
    {
      v22 = *(_WORD *)(v17 + 30);
      if ((v22 & 0x400) == 0)
      {
        v23 = *(_WORD *)(v17 + 28);
        if ((v23 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v17, v18);
        }
        else
        {
          if ((v23 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v17 + 160) + 16))(*(_QWORD *)(v17 + 160));
            v22 = v19[15];
          }
          v19[15] = v22 | 0x400;
          (*(void (**)(_WORD *))(*(_QWORD *)v19 + 72))(v19);
        }
      }
    }
    return v12;
  }
LABEL_15:
  v13 = (WebCore::HTMLDetailsElement **)*((_QWORD *)this + 15);
  if (v13)
    v13 = (WebCore::HTMLDetailsElement **)v13[1];
  return v13 == a2;
}

void WebCore::HTMLDetailsElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  uint64_t v10;
  uint64_t v11;
  WTF::String *v12;
  __n128 v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  char v16;
  WebCore::Node *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  BOOL v21;
  __int16 v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  int v33;
  __int16 v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WebCore::Element *v45;
  WTF *v46;
  uint64_t v47;
  __int16 v48;
  __int16 v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  WTF *v53;
  __int16 v54;
  __int16 v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  char v58;
  WTF *v59;
  unsigned int v60;
  _BYTE v61[8];
  WTF::StringImpl *v62;
  char v63;

  WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  if (*(_QWORD *)a2 != WebCore::HTMLNames::openAttr)
  {
    WebCore::HTMLDetailsElement::ensureDetailsExclusivityAfterMutation((WebCore::HTMLDetailsElement *)a1, v13, v10, v11, v12);
    return;
  }
  v14 = *a4;
  if (*(WTF::StringImpl **)a3 != *a4)
  {
    if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v15 = *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (v15)
      {
        v16 = 0;
        *(_DWORD *)(v15 + 24) += 2;
LABEL_7:
        v17 = *(WebCore::Node **)(a1 + 128);
        if (!v14)
        {
          WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v15, v17, &v56);
          if (v58 && v57)
          {
            if (*(_DWORD *)v57 == 2)
              WTF::StringImpl::destroy(v57, v32);
            else
              *(_DWORD *)v57 -= 2;
          }
          v33 = (*(unsigned __int16 *)(a1 + 136) | (*(unsigned __int8 *)(a1 + 138) << 16)) & 0xFF0000;
          if (*(_WORD *)(a1 + 136))
            v34 = v33 != 0;
          else
            v34 = 0;
          v35 = v34 | 0x100;
          if (!v33)
            *(_BYTE *)(a1 + 138) = 1;
          *(_WORD *)(a1 + 136) = v35;
          v36 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v36 = off_1E33B9C60;
          *(_QWORD *)(v36 + 8) = a1;
          *(_BYTE *)(v36 + 16) = 1;
          v59 = (WTF *)v36;
          WebCore::Node::queueTaskKeepingThisNodeAlive(a1, 0, (uint64_t *)&v59);
          if (v59)
            (*(void (**)(WTF *))(*(_QWORD *)v59 + 8))(v59);
          goto LABEL_49;
        }
        WebCore::ContainerNode::appendChild(v15, v17, (uint64_t)v61);
        if (v63)
        {
          v19 = v62;
          v62 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v18);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
        v20 = *(unsigned __int16 *)(a1 + 136) | (*(unsigned __int8 *)(a1 + 138) << 16);
        if (*(_WORD *)(a1 + 136))
          v21 = 0;
        else
          v21 = v20 >= 0x10000;
        v22 = !v21;
        if ((v20 & 0xFF0000) == 0)
          *(_BYTE *)(a1 + 138) = 1;
        *(_WORD *)(a1 + 136) = v22;
        v23 = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v23 = off_1E33B9C60;
        *(_QWORD *)(v23 + 8) = a1;
        *(_BYTE *)(v23 + 16) = 0;
        v59 = (WTF *)v23;
        WebCore::Node::queueTaskKeepingThisNodeAlive(a1, 0, (uint64_t *)&v59);
        if (v59)
          (*(void (**)(WTF *))(*(_QWORD *)v59 + 8))(v59);
        v25 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        if ((*(_QWORD *)(*(_QWORD *)(v25 + 680) + 672) & 0x200000000000) == 0)
        {
LABEL_49:
          if ((v16 & 1) == 0)
          {
            if (*(_DWORD *)(v15 + 24) == 2)
            {
              v54 = *(_WORD *)(v15 + 30);
              if ((v54 & 0x400) == 0)
              {
                v55 = *(_WORD *)(v15 + 28);
                if ((v55 & 0xF000) == 0x9000)
                {
                  WebCore::Document::removedLastRef((WebCore::Document *)v15, v24);
                }
                else
                {
                  if ((v55 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v15 + 160) + 16))(*(_QWORD *)(v15 + 160));
                    v54 = *(_WORD *)(v15 + 30);
                  }
                  *(_WORD *)(v15 + 30) = v54 | 0x400;
                  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
                }
              }
            }
            else
            {
              *(_DWORD *)(v15 + 24) -= 2;
            }
          }
          return;
        }
        v26 = *(_QWORD *)(a1 + 104);
        if (v26)
        {
          v27 = *(_DWORD *)(v26 + 4);
          if ((v27 & 1) != 0)
          {
            v28 = *(_QWORD *)(v26 + 40);
            LODWORD(v29) = *(_DWORD *)(v26 + 52);
            if ((_DWORD)v29)
            {
LABEL_26:
              v29 = v29;
              v30 = (uint64_t *)(v28 + 8);
              while (1)
              {
                v31 = *(v30 - 1);
                if (v31 == WebCore::HTMLNames::nameAttr
                  || *(_QWORD *)(v31 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
                  && *(_QWORD *)(v31 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
                {
                  goto LABEL_48;
                }
                v30 += 2;
                if (!--v29)
                {
                  v30 = (uint64_t *)MEMORY[0x1E0CBF2F8];
                  goto LABEL_48;
                }
              }
            }
          }
          else
          {
            v28 = v26 + 32;
            LODWORD(v29) = v27 >> 5;
            if ((_DWORD)v29)
              goto LABEL_26;
          }
        }
        v30 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_48:
        v37 = *v30;
        if (v37 && *(_DWORD *)(v37 + 4))
        {
          v38 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
          v39 = v38;
          do
            v40 = __ldaxr(v38);
          while (__stlxr(v40 + 1, v38));
          *(_BYTE *)(v25 + 3268) = 1;
          WebCore::HTMLDetailsElement::otherElementsInNameGroup((uint64_t)&v59, a1);
          v41 = v59;
          if (v60)
          {
            v42 = 8 * v60;
            v43 = v42;
            v44 = v59;
            do
            {
              v45 = *(WebCore::Element **)v44;
              v44 = (WTF *)((char *)v44 + 8);
              WebCore::Element::removeAttribute(v45, (const WebCore::QualifiedName *)&WebCore::HTMLNames::openAttr);
              v43 -= 8;
            }
            while (v43);
            v46 = v41;
            do
            {
              v47 = *(_QWORD *)v46;
              *(_QWORD *)v46 = 0;
              if (v47)
              {
                if (*(_DWORD *)(v47 + 24) == 2)
                {
                  v48 = *(_WORD *)(v47 + 30);
                  if ((v48 & 0x400) == 0)
                  {
                    v49 = *(_WORD *)(v47 + 28);
                    if ((v49 & 0xF000) == 0x9000)
                    {
                      WebCore::Document::removedLastRef((WebCore::Document *)v47, v24);
                    }
                    else
                    {
                      if ((v49 & 0x20) != 0)
                      {
                        (*(void (**)(_QWORD))(**(_QWORD **)(v47 + 160) + 16))(*(_QWORD *)(v47 + 160));
                        v48 = *(_WORD *)(v47 + 30);
                      }
                      *(_WORD *)(v47 + 30) = v48 | 0x400;
                      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 72))(v47);
                    }
                  }
                }
                else
                {
                  *(_DWORD *)(v47 + 24) -= 2;
                }
              }
              v46 = (WTF *)((char *)v46 + 8);
              v42 -= 8;
            }
            while (v42);
          }
          if (v41)
            WTF::fastFree(v41, v24);
          *(_BYTE *)(*((_QWORD *)v39 + 1) + 3268) = 0;
          do
          {
            v50 = __ldaxr(v39);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v39));
          if (!v51)
          {
            atomic_store(1u, v39);
            v52 = v39[7];
            if ((_DWORD)v52)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v39 + 2), (WTF::StringImpl *)(*((_QWORD *)v39 + 2) + 32 * v52));
            v53 = (WTF *)*((_QWORD *)v39 + 2);
            if (v53)
            {
              *((_QWORD *)v39 + 2) = 0;
              v39[6] = 0;
              WTF::fastFree(v53, v24);
            }
            WTF::fastFree((WTF *)v39, v24);
          }
        }
        goto LABEL_49;
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
    goto LABEL_7;
  }
}

uint64_t WebCore::HTMLDetailsElement::otherElementsInNameGroup(uint64_t this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  BOOL v9;
  void *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  __int16 v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;

  v3 = this;
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  if ((*(_BYTE *)(a2 + 22) & 0x18) != 0)
  {
    v5 = **(_QWORD **)(a2 + 40);
  }
  else
  {
    v4 = a2;
    do
    {
      v5 = v4;
      v4 = *(_QWORD *)(v4 + 32);
    }
    while (v4);
  }
  v6 = *(_QWORD *)(v5 + 80);
  if (v6)
  {
    while (1)
    {
      v7 = v6;
      v8 = *(_WORD *)(v6 + 28);
      if ((v8 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::detailsTag + 24))
      {
        break;
      }
      if ((v8 & 4) != 0)
      {
        v6 = *(_QWORD *)(v7 + 80);
        if (v6)
          continue;
      }
      if (v7 == v5)
        return this;
      while (1)
      {
        v6 = *(_QWORD *)(v7 + 56);
        if (v6)
          break;
        v7 = *(_QWORD *)(v7 + 32);
        if (v7)
          v9 = v7 == v5;
        else
          v9 = 1;
        if (v9)
          return this;
      }
    }
    v10 = 0;
    v11 = 0;
    this = 0;
    v12 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    while (1)
    {
      if (v7 != a2)
      {
        v13 = *(_QWORD *)(v7 + 104);
        if (v13
          && ((v14 = *(unsigned int *)(v13 + 4), (v14 & 1) != 0)
            ? (v15 = *(_QWORD *)(v13 + 40), v16 = *(unsigned int *)(v13 + 52))
            : (v15 = v13 + 32, v16 = v14 >> 5),
              v16))
        {
          v17 = (_QWORD *)(v15 + 8);
          while (1)
          {
            v18 = *(v17 - 1);
            if (v18 == WebCore::HTMLNames::nameAttr
              || *(_QWORD *)(v18 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
              && *(_QWORD *)(v18 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
            {
              break;
            }
            v17 += 2;
            if (!--v16)
              goto LABEL_31;
          }
        }
        else
        {
LABEL_31:
          v17 = v12;
        }
        v19 = *(_QWORD *)(a2 + 104);
        if (v19
          && ((v20 = *(unsigned int *)(v19 + 4), (v20 & 1) != 0)
            ? (v21 = *(_QWORD *)(v19 + 40), v22 = *(unsigned int *)(v19 + 52))
            : (v21 = v19 + 32, v22 = v20 >> 5),
              v22))
        {
          v23 = (_QWORD *)(v21 + 8);
          while (1)
          {
            v24 = *(v23 - 1);
            if (v24 == WebCore::HTMLNames::nameAttr
              || *(_QWORD *)(v24 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
              && *(_QWORD *)(v24 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
            {
              break;
            }
            v23 += 2;
            if (!--v22)
              goto LABEL_44;
          }
        }
        else
        {
LABEL_44:
          v23 = v12;
        }
        if (*v17 == *v23)
        {
          v25 = this;
          if ((_DWORD)this == v11)
          {
            v35 = this;
            v26 = this + ((unint64_t)this >> 2);
            if (v26 >= 0x10)
              v27 = v26 + 1;
            else
              v27 = 16;
            if (v27 <= (unint64_t)this + 1)
              v28 = this + 1;
            else
              v28 = v27;
            if (v28 >> 29)
            {
              __break(0xC471u);
              return this;
            }
            v29 = (void *)WTF::fastMalloc((WTF *)(8 * v28));
            v36 = v28;
            *(_DWORD *)(v3 + 8) = v28;
            *(_QWORD *)v3 = v29;
            memcpy(v29, v10, 8 * v25);
            if (v10)
            {
              if (v29 == v10)
              {
                v36 = 0;
                v29 = 0;
                *(_QWORD *)v3 = 0;
                *(_DWORD *)(v3 + 8) = 0;
              }
              WTF::fastFree((WTF *)v10, v30);
            }
            v10 = v29;
            v11 = v36;
            LODWORD(this) = v35;
          }
          *(_DWORD *)(v7 + 24) += 2;
          this = (this + 1);
          *((_QWORD *)v10 + v25) = v7;
          *(_DWORD *)(v3 + 12) = this;
        }
      }
      v31 = *(_QWORD *)(v7 + 80);
      if (!v31)
        break;
LABEL_61:
      while (1)
      {
        v7 = v31;
        v32 = *(_WORD *)(v31 + 28);
        if ((v32 & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::detailsTag + 24))
        {
          break;
        }
        if ((v32 & 4) != 0)
        {
          v31 = *(_QWORD *)(v7 + 80);
          if (v31)
            continue;
        }
        if (v7 == v5)
          return this;
        while (1)
        {
          v31 = *(_QWORD *)(v7 + 56);
          if (v31)
            break;
          v7 = *(_QWORD *)(v7 + 32);
          if (v7)
            v33 = v7 == v5;
          else
            v33 = 1;
          if (v33)
            return this;
        }
      }
    }
    if (v7 != v5)
    {
      do
      {
        v31 = *(_QWORD *)(v7 + 56);
        if (v31)
          goto LABEL_61;
        v7 = *(_QWORD *)(v7 + 32);
        if (v7)
          v34 = v7 == v5;
        else
          v34 = 1;
      }
      while (!v34);
    }
  }
  return this;
}

void WebCore::HTMLDetailsElement::ensureDetailsExclusivityAfterMutation(WebCore::HTMLDetailsElement *this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  WTF::String *v19;
  __n128 v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::Element **v24;
  _BOOL4 hasAttribute;
  __n128 v26;
  WTF *v27;
  uint64_t v28;
  __int16 v29;
  __int16 v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  WTF **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  unsigned int v51;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 672) & 0x200000000000) == 0
    || !WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::openAttr, a4, a5, a2))
  {
    return;
  }
  v6 = *((_QWORD *)this + 13);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if ((_DWORD)v9)
      {
LABEL_6:
        v9 = v9;
        v10 = (uint64_t *)(v8 + 8);
        while (1)
        {
          v11 = *(v10 - 1);
          if (v11 == WebCore::HTMLNames::nameAttr
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
            && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
          {
            goto LABEL_15;
          }
          v10 += 2;
          if (!--v9)
          {
            v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            goto LABEL_15;
          }
        }
      }
    }
    else
    {
      v8 = v6 + 32;
      LODWORD(v9) = v7 >> 5;
      if ((_DWORD)v9)
        goto LABEL_6;
    }
  }
  v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_15:
  v12 = *v10;
  if (v12 && *(_DWORD *)(v12 + 4))
  {
    v13 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    v14 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v13);
    v15 = v14;
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 + 1, v14));
    *(_BYTE *)(v13 + 3268) = 1;
    WebCore::HTMLDetailsElement::otherElementsInNameGroup((uint64_t)&v50, (uint64_t)this);
    v21 = v50;
    if (v51)
    {
      v22 = 8 * v51;
      v23 = v22;
      v24 = (WebCore::Element **)v50;
      while (!WebCore::Element::hasAttribute(*v24, (const WebCore::QualifiedName *)&WebCore::HTMLNames::openAttr, v18, v19, v20))
      {
        ++v24;
        v23 -= 8;
        if (!v23)
          goto LABEL_26;
      }
      hasAttribute = WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::openAttr, v18, v19, v20);
      WebCore::Element::setBooleanAttribute((WTF::StringImpl **)this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::openAttr, !hasAttribute, v26);
      if (WebCore::Document::hasEverCreatedAnAXObjectCache)
      {
        v35 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
        if (*(_BYTE *)(v35 + 3362) || *(_BYTE *)(v35 + 3405))
        {
          v43 = *(_QWORD *)(v35 + 528);
          i = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
          if (v43)
          {
            v44 = *(_QWORD *)(v43 + 8);
            i = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
            if (v44)
            {
              v45 = *(_QWORD *)(v44 + 120);
              i = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
              if (v45)
              {
                v46 = *(_QWORD *)(v45 + 8);
                for (i = *(_QWORD *)(*((_QWORD *)this + 5) + 8); v46; v46 = *(_QWORD *)(v49 + 8))
                {
                  i = *(_QWORD *)(*(_QWORD *)(v46 + 40) + 8);
                  v47 = *(_QWORD *)(i + 528);
                  if (!v47)
                    break;
                  v48 = *(_QWORD *)(v47 + 8);
                  if (!v48)
                    break;
                  v49 = *(_QWORD *)(v48 + 120);
                  if (!v49)
                    break;
                }
              }
            }
          }
        }
        else
        {
          v36 = *(_QWORD *)(v35 + 528);
          i = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
          if (v36)
          {
            v38 = *(_QWORD *)(v36 + 8);
            i = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
            if (v38)
            {
              v39 = *(_QWORD *)(*(_QWORD *)(v38 + 128) + 8);
              v40 = v39 && *(_BYTE *)(v39 + 144) == 0;
              i = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
              if (v40)
              {
                v41 = *(_QWORD *)(v39 + 296);
                i = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
                if (v41)
                  i = v41;
              }
            }
          }
        }
        v42 = *(WTF ***)(i + 1488);
        if (v42)
          WebCore::AXObjectCache::postNotification(v42, 0, v35, 75, 0);
      }
LABEL_26:
      v27 = v21;
      do
      {
        v28 = *(_QWORD *)v27;
        *(_QWORD *)v27 = 0;
        if (v28)
        {
          if (*(_DWORD *)(v28 + 24) == 2)
          {
            v29 = *(_WORD *)(v28 + 30);
            if ((v29 & 0x400) == 0)
            {
              v30 = *(_WORD *)(v28 + 28);
              if ((v30 & 0xF000) == 0x9000)
              {
                WebCore::Document::removedLastRef((WebCore::Document *)v28, v17);
              }
              else
              {
                if ((v30 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v28 + 160) + 16))(*(_QWORD *)(v28 + 160));
                  v29 = *(_WORD *)(v28 + 30);
                }
                *(_WORD *)(v28 + 30) = v29 | 0x400;
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 72))(v28);
              }
            }
          }
          else
          {
            *(_DWORD *)(v28 + 24) -= 2;
          }
        }
        v27 = (WTF *)((char *)v27 + 8);
        v22 -= 8;
      }
      while (v22);
    }
    if (v21)
      WTF::fastFree(v21, v17);
    *(_BYTE *)(*((_QWORD *)v15 + 1) + 3268) = 0;
    do
    {
      v31 = __ldaxr(v15);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v15));
    if (!v32)
    {
      atomic_store(1u, v15);
      v33 = v15[7];
      if ((_DWORD)v33)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v15 + 2), (WTF::StringImpl *)(*((_QWORD *)v15 + 2) + 32 * v33));
      v34 = (WTF *)*((_QWORD *)v15 + 2);
      if (v34)
      {
        *((_QWORD *)v15 + 2) = 0;
        v15[6] = 0;
        WTF::fastFree(v34, v17);
      }
      WTF::fastFree((WTF *)v15, v17);
    }
  }
}

uint64_t WebCore::HTMLDetailsElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  char v3;

  v3 = a2;
  WebCore::HTMLElement::insertedIntoAncestor(a1, a2, a3);
  return v3 & 1;
}

double WebCore::HTMLDetailsElement::toggleOpen(WebCore::HTMLDetailsElement *this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  _BOOL4 hasAttribute;
  __n128 v7;
  double result;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  hasAttribute = WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::openAttr, a4, a5, a2);
  WebCore::Element::setBooleanAttribute((WTF::StringImpl **)this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::openAttr, !hasAttribute, v7);
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v9 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    if (*(_BYTE *)(v9 + 3362) || *(_BYTE *)(v9 + 3405))
    {
      v17 = *(_QWORD *)(v9 + 528);
      i = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 8);
        i = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 120);
          i = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
          if (v19)
          {
            v20 = *(_QWORD *)(v19 + 8);
            for (i = *(_QWORD *)(*((_QWORD *)this + 5) + 8); v20; v20 = *(_QWORD *)(v23 + 8))
            {
              i = *(_QWORD *)(*(_QWORD *)(v20 + 40) + 8);
              v21 = *(_QWORD *)(i + 528);
              if (!v21)
                break;
              v22 = *(_QWORD *)(v21 + 8);
              if (!v22)
                break;
              v23 = *(_QWORD *)(v22 + 120);
              if (!v23)
                break;
            }
          }
        }
      }
    }
    else
    {
      v10 = *(_QWORD *)(v9 + 528);
      i = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
      if (v10)
      {
        v12 = *(_QWORD *)(v10 + 8);
        i = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
        if (v12)
        {
          v13 = *(_QWORD *)(*(_QWORD *)(v12 + 128) + 8);
          if (v13)
            v14 = *(_BYTE *)(v13 + 144) == 0;
          else
            v14 = 0;
          i = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
          if (v14)
          {
            v15 = *(_QWORD *)(v13 + 296);
            i = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
            if (v15)
              i = v15;
          }
        }
      }
    }
    v16 = *(WTF ***)(i + 1488);
    if (v16)
      return WebCore::AXObjectCache::postNotification(v16, 0, v9, 75, 0);
  }
  return result;
}

uint64_t WebCore::HTMLDialogElement::operator new(uint64_t this)
{
  if (this == 136)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::HTMLDialogElement::HTMLDialogElement(uint64_t result, _DWORD **a2, uint64_t a3)
{
  _DWORD *v3;

  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a3 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a3 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v3 = *a2;
  if (*a2)
    ++*v3;
  *(_QWORD *)result = off_1E33B8018;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 96) = v3;
  *(_BYTE *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  return result;
}

uint64_t WebCore::HTMLDialogElement::show@<X0>(WebCore::HTMLDialogElement *this@<X0>, uint64_t a2@<X2>, WTF::String *a3@<X3>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t result;
  __n128 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WebCore::Node *v15;
  uint64_t v16;
  WTF *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  char v24;

  result = WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::openAttr, a2, a3, a5);
  if ((_DWORD)result)
  {
    if (*((_BYTE *)this + 120))
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a4 = 8;
      *(_BYTE *)(a4 + 16) = 1;
      return result;
    }
  }
  else
  {
    WebCore::Element::setAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::openAttr, MEMORY[0x1E0CBF3B8], 0, &v22, v8);
    if (v24 && v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v9);
      else
        *(_DWORD *)v23 -= 2;
    }
    v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1248);
    if (v10)
    {
      v18 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v10);
      v11 = v18;
      if (v18)
      {
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
      }
    }
    else
    {
      v11 = 0;
    }
    v12 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v11;
    if (v12)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v12));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)v12);
        v16 = *(unsigned int *)(v12 + 28);
        if ((_DWORD)v16)
        {
          v21 = v12;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v16));
          v12 = v21;
        }
        v17 = *(WTF **)(v12 + 16);
        if (v17)
        {
          *(_QWORD *)(v12 + 16) = 0;
          *(_DWORD *)(v12 + 24) = 0;
          v20 = v12;
          WTF::fastFree(v17, v9);
          v12 = v20;
        }
        WTF::fastFree((WTF *)v12, v9);
      }
    }
    v15 = WebCore::Element::topmostPopoverAncestor(this, 0);
    WebCore::Document::hideAllPopoversUntil(*(WTF::StringImpl **)(*((_QWORD *)this + 5) + 8), v15, 0, 0);
    result = WebCore::HTMLDialogElement::runFocusingSteps(this);
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t WebCore::HTMLDialogElement::runFocusingSteps(WebCore::HTMLDialogElement *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::HTMLDialogElement *v7;
  WTF::StringImpl *v8;
  WebCore::Document *v9;
  uint64_t v10;
  WebCore::SecurityOrigin *v11;
  WebCore::SecurityOrigin *v12;
  WTF::StringImpl *v13;
  const WebCore::SecurityOrigin *v14;
  uint64_t result;
  void *v16;
  uint64_t v17;
  void *v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  WebCore::HTMLDialogElement *v23;
  int v24;
  __int16 v25;

  if (!*((_BYTE *)this + 120))
    goto LABEL_14;
  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_14;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v2 + 40);
    LODWORD(v5) = *(_DWORD *)(v2 + 52);
    if (!(_DWORD)v5)
      goto LABEL_14;
  }
  else
  {
    v4 = (uint64_t *)(v2 + 32);
    LODWORD(v5) = v3 >> 5;
    if (!(_DWORD)v5)
      goto LABEL_14;
  }
  v5 = v5;
  while (1)
  {
    v6 = *v4;
    if (*v4 == WebCore::HTMLNames::autofocusAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::autofocusAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::autofocusAttr + 32))
    {
      break;
    }
    v4 += 2;
    if (!--v5)
      goto LABEL_14;
  }
  if (!this)
  {
LABEL_14:
    WebCore::Element::findFocusDelegateForTarget((uint64_t)this, 0, (uint64_t *)&v23);
    v7 = v23;
    if (v23)
      goto LABEL_16;
  }
  *((_DWORD *)this + 6) += 2;
  v7 = this;
LABEL_16:
  if ((*(unsigned int (**)(WebCore::HTMLDialogElement *))(*(_QWORD *)v7 + 552))(v7))
  {
    (*(void (**)(WebCore::HTMLDialogElement *))(*(_QWORD *)v7 + 696))(v7);
  }
  else if (*((_BYTE *)this + 120))
  {
    v9 = *(WebCore::Document **)(*((_QWORD *)this + 5) + 8);
    v25 = 0;
    v24 = 0;
    WebCore::Document::setFocusedElement(v9, 0, &v24);
  }
  v10 = *(_QWORD *)(*((_QWORD *)v7 + 5) + 8);
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v10 + 192), v8);
  v12 = v11;
  WebCore::Document::topOrigin((WebCore::Document *)v10, v13);
  result = WebCore::SecurityOrigin::isSameOriginAs(v12, v14);
  if ((_DWORD)result)
  {
    v17 = WebCore::Document::topDocument(*(_QWORD *)(*((_QWORD *)v7 + 5) + 8));
    *(_DWORD *)(v17 + 24) += 2;
    result = (uint64_t)WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::clear(v17 + 1216, v18);
    *(_BYTE *)(v17 + 3401) = 1;
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      v21 = *(_WORD *)(v17 + 30);
      if ((v21 & 0x400) == 0)
      {
        v22 = *(_WORD *)(v17 + 28);
        if ((v22 & 0xF000) == 0x9000)
        {
          result = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v17, v16);
        }
        else
        {
          if ((v22 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v17 + 160) + 16))(*(_QWORD *)(v17 + 160));
            v21 = *(_WORD *)(v17 + 30);
          }
          *(_WORD *)(v17 + 30) = v21 | 0x400;
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 72))(v17);
        }
      }
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
  }
  if (*((_DWORD *)v7 + 6) == 2)
  {
    v19 = *((_WORD *)v7 + 15);
    if ((v19 & 0x400) == 0)
    {
      v20 = *((_WORD *)v7 + 14);
      if ((v20 & 0xF000) == 0x9000)
      {
        return (uint64_t)WebCore::Document::removedLastRef(v7, v16);
      }
      else
      {
        if ((v20 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)v7 + 20) + 16))(*((_QWORD *)v7 + 20));
          v19 = *((_WORD *)v7 + 15);
        }
        *((_WORD *)v7 + 15) = v19 | 0x400;
        return (*(uint64_t (**)(WebCore::HTMLDialogElement *))(*(_QWORD *)v7 + 72))(v7);
      }
    }
  }
  else
  {
    *((_DWORD *)v7 + 6) -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLDialogElement::showModal@<X0>(WebCore::HTMLDialogElement *this@<X0>, uint64_t a2@<X2>, WTF::String *a3@<X3>, _QWORD *a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t result;
  __n128 v8;
  int v9;
  WTF::StringImpl *v10;
  WebCore::RenderBlock *v11;
  WebCore::RenderObject *v12;
  WebCore::RenderObject *v13;
  WebCore::RenderObject *v14;
  WTF *v15;
  uint64_t v16;
  WebCore::RenderElement *v17;
  WebCore::RenderElement *v18;
  void *v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  WebCore::Node *v26;
  void *v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  WTF *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  char v44;

  result = WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::openAttr, a2, a3, a5);
  if ((_DWORD)result)
  {
    if (*((_BYTE *)this + 120))
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      return result;
    }
    goto LABEL_17;
  }
  if ((*((_BYTE *)this + 22) & 8) == 0
    || (*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0
    && (v30 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE8)) != 0
    && *(_BYTE *)(v30 + 1))
  {
LABEL_17:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 8;
    *((_BYTE *)a4 + 16) = 1;
    return result;
  }
  {
    v9 = qword_1EE2F5808;
  }
  else
  {
    v9 = 0;
    WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
    unk_1EE2F5800 = 0;
    qword_1EE2F5808 = 0;
  }
  LODWORD(qword_1EE2F5808) = v9 + 1;
  WebCore::Element::setAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::openAttr, MEMORY[0x1E0CBF3B8], 0, &v42, v8);
  if (v44 && v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v10);
    else
      *(_DWORD *)v43 -= 2;
  }
  WebCore::HTMLDialogElement::setIsModal((unsigned __int8 *)this, (void *)1);
  v12 = (WebCore::RenderObject *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
  if (!v12)
    goto LABEL_18;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195BC8940);
  }
  v13 = WebCore::RenderObject::containingBlock(v12);
  if (v13)
  {
    v14 = v13;
    v15 = (WTF *)*((_QWORD *)v13 + 1);
    if (v15)
      goto LABEL_16;
    v15 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v15 = 1;
    *((_QWORD *)v15 + 1) = v14;
    v32 = (WTF *)*((_QWORD *)v14 + 1);
    *((_QWORD *)v14 + 1) = v15;
    if (!v32)
      goto LABEL_16;
    if (*(_DWORD *)v32 != 1)
    {
      --*(_DWORD *)v32;
LABEL_16:
      ++*(_DWORD *)v15;
      goto LABEL_19;
    }
    WTF::fastFree(v32, v31);
    v15 = (WTF *)*((_QWORD *)v14 + 1);
    if (v15)
      goto LABEL_16;
  }
  else
  {
LABEL_18:
    v15 = 0;
  }
LABEL_19:
  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    WebCore::Element::addToTopLayer(this);
  v16 = *((_QWORD *)this + 8);
  v17 = (WebCore::RenderElement *)(v16 & 0xFFFFFFFFFFFFLL);
  if ((v16 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((v16 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195BC8960);
    }
    ++*(_DWORD *)((v16 & 0xFFFFFFFFFFFFLL) + 0x10);
  }
  if (v15)
    v18 = (WebCore::RenderElement *)*((_QWORD *)v15 + 1);
  else
    v18 = 0;
  WebCore::RenderElement::markRendererDirtyAfterTopLayerChange(v17, v18, v11);
  if (v17)
  {
    v20 = *((_DWORD *)v17 + 4);
    if (!v20)
    {
      __break(0xC471u);
      JUMPOUT(0x195BC8900);
    }
    *((_DWORD *)v17 + 4) = v20 - 1;
  }
  v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1248);
  if (v21)
  {
    v36 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v21);
    v22 = v36;
    if (v36)
    {
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
    }
  }
  else
  {
    v22 = 0;
  }
  v23 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v22;
  if (v23)
  {
    do
    {
      v24 = __ldaxr((unsigned int *)v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)v23));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)v23);
      v33 = *(unsigned int *)(v23 + 28);
      if ((_DWORD)v33)
      {
        v41 = v23;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v23 + 16), (WTF::StringImpl *)(*(_QWORD *)(v23 + 16) + 32 * v33));
        v23 = v41;
      }
      v34 = *(WTF **)(v23 + 16);
      if (v34)
      {
        *(_QWORD *)(v23 + 16) = 0;
        *(_DWORD *)(v23 + 24) = 0;
        v35 = v23;
        WTF::fastFree(v34, v19);
        v23 = v35;
      }
      WTF::fastFree((WTF *)v23, v19);
    }
  }
  v26 = WebCore::Element::topmostPopoverAncestor(this, 0);
  WebCore::Document::hideAllPopoversUntil(*(WTF::StringImpl **)(*((_QWORD *)this + 5) + 8), v26, 0, 0);
  result = WebCore::HTMLDialogElement::runFocusingSteps(this);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
      result = WTF::fastFree(v15, v27);
    else
      --*(_DWORD *)v15;
  }
  {
    unk_1EE2F5800 = 0;
    qword_1EE2F5808 = 0xFFFFFFFFLL;
    WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
    return result;
  }
  LODWORD(qword_1EE2F5808) = qword_1EE2F5808 - 1;
  if (!(_DWORD)qword_1EE2F5808)
  {
    v28 = (WTF *)WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue;
    v29 = dword_1EE2F5804;
    WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
    unk_1EE2F5800 = 0;
    if (!(_DWORD)v29)
    {
      if (!v28)
        return result;
      return WTF::fastFree(v28, v27);
    }
    v38 = 0;
    v39 = 16 * v29;
    v40 = (_DWORD *)((char *)v28 + 16 * v29);
    do
    {
      result = WebCore::ScopedEventQueue::dispatchEvent(result, (WTF *)((char *)v28 + v38));
      v38 += 16;
    }
    while (v39 != v38);
    result = (uint64_t)WTF::VectorDestructor<true,WebCore::ScopedEventQueue::ScopedEvent>::destruct(v28, v40);
    if (v28)
      return WTF::fastFree(v28, v27);
  }
  return result;
}

unsigned __int8 *WebCore::HTMLDialogElement::setIsModal(unsigned __int8 *this, void *a2)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  char v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;

  if (this[120] == (_DWORD)a2)
    return this;
  v2 = a2;
  v3 = this;
  if ((this[22] & 8) == 0)
    goto LABEL_21;
  v4 = (uint64_t *)*((_QWORD *)this + 5);
  v5 = v4[1];
  if (!*(_QWORD *)(v5 + 1944) || *(_BYTE *)(v5 + 3405))
    goto LABEL_21;
  if ((this[70] & 4) != 0)
  {
    v9 = *v4;
    v10 = (*(_WORD *)(v9 + 28) & 0x80) == 0 || v9 == 0;
    v11 = v9 + 216;
    if (v10)
      v11 = v5 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v11 + 236))
      goto LABEL_21;
  }
  v6 = *(_QWORD *)(v5 + 1272);
  if (v6 && (*(_BYTE *)(v6 + 70) & 4) != 0)
  {
LABEL_21:
    LOBYTE(v16) = 0;
    v18 = 0;
    v19 = 0;
    v17 = this;
  }
  else
  {
    if (*(_BYTE *)(v5 + 3362)
      || (v7 = *(unsigned __int8 *)(v5 + 3390), !*(_BYTE *)(v5 + 3390))
      && (*(_BYTE *)(v5 + 70) & 8) == 0
      && !*(_QWORD *)(v5 + 1560)
      && (v8 = *(_QWORD *)(v5 + 1328), !*(_BYTE *)(v8 + 233))
      && !*(_BYTE *)(v8 + 234))
    {
      LOBYTE(v16) = 1;
      v18 = 0;
      v19 = 0;
      v17 = this;
      goto LABEL_35;
    }
    v12 = *(unsigned __int8 *)(v5 + 3391);
    if (v7)
      v13 = v12 == 0;
    else
      v13 = 0;
    v14 = !v13;
    LOBYTE(v16) = v14;
    v18 = 0;
    v19 = 0;
    v17 = this;
    if (!v13)
    {
LABEL_35:
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v16, (WTF::StringImpl *)0x2F, (int)a2, 0);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v17, &v18);
      v15 = v16;
      v3[120] = v2;
      if (v15)
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v17, &v19);
      goto LABEL_23;
    }
  }
  this[120] = a2;
LABEL_23:
  if (v19)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v19, a2);
  this = v18;
  if (v18)
    return (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v18, a2);
  return this;
}

uint64_t WebCore::HTMLDialogElement::close(WebCore::HTMLDialogElement *this, const WTF::String *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  uint64_t Ref;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _BOOL4 v28;
  _DWORD *v29;
  _QWORD *v30;
  __int16 v31;
  __int16 v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  __int16 v38;
  _QWORD *v39;

  result = WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::openAttr, a3, a4, a5);
  if (!(_DWORD)result)
    return result;
  v8 = *((_QWORD *)this + 13);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 4);
    if ((v9 & 1) != 0)
    {
      v10 = *(uint64_t **)(v8 + 40);
      v11 = *(_DWORD *)(v8 + 52);
      if (!v11)
        goto LABEL_14;
    }
    else
    {
      v10 = (uint64_t *)(v8 + 32);
      v11 = v9 >> 5;
      if (!v11)
        goto LABEL_14;
    }
    v12 = 0;
    while (1)
    {
      v13 = *v10;
      if (*v10 == WebCore::HTMLNames::openAttr
        || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::openAttr + 24)
        && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::openAttr + 32))
      {
        break;
      }
      v12 = (WTF::StringImpl *)((char *)v12 + 1);
      v10 += 2;
      if ((WTF::StringImpl *)v11 == v12)
        goto LABEL_14;
    }
    WebCore::Element::removeAttributeInternal((uint64_t)this, v12, 0);
  }
LABEL_14:
  if (*((_BYTE *)this + 120))
    WebCore::Element::removeFromTopLayer(this);
  WebCore::HTMLDialogElement::setIsModal((unsigned __int8 *)this, 0);
  v15 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
  {
    *v15 += 2;
    v16 = (WTF::StringImpl *)*((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v15;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  Ref = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (!Ref)
    goto LABEL_28;
  v18 = *(_QWORD *)(Ref + 8);
  if (v18)
    *(_DWORD *)(v18 + 24) += 2;
  do
  {
    v19 = __ldaxr((unsigned int *)Ref);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, (unsigned int *)Ref));
  if (!v20)
  {
    atomic_store(1u, (unsigned int *)Ref);
    v33 = *(unsigned int *)(Ref + 28);
    if ((_DWORD)v33)
    {
      v36 = Ref;
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(Ref + 16), (WTF::StringImpl *)(*(_QWORD *)(Ref + 16) + 32 * v33));
      Ref = v36;
    }
    v34 = *(WTF **)(Ref + 16);
    if (v34)
    {
      *(_QWORD *)(Ref + 16) = 0;
      *(_DWORD *)(Ref + 24) = 0;
      v35 = Ref;
      WTF::fastFree(v34, v14);
      Ref = v35;
    }
    Ref = WTF::fastFree((WTF *)Ref, v14);
    if (!v18)
      goto LABEL_28;
    goto LABEL_26;
  }
  if (v18)
  {
LABEL_26:
    v37 = 0;
    v38 = 256;
    Ref = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v18 + 656))(v18, &v37);
    if (*(_DWORD *)(v18 + 24) == 2)
    {
      v31 = *(_WORD *)(v18 + 30);
      if ((v31 & 0x400) == 0)
      {
        v32 = *(_WORD *)(v18 + 28);
        if ((v32 & 0xF000) == 0x9000)
        {
          Ref = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v18, v21);
        }
        else
        {
          if ((v32 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v18 + 160) + 16))(*(_QWORD *)(v18 + 160));
            v31 = *(_WORD *)(v18 + 30);
          }
          *(_WORD *)(v18 + 30) = v31 | 0x400;
          Ref = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
        }
      }
    }
    else
    {
      *(_DWORD *)(v18 + 24) -= 2;
    }
  }
LABEL_28:
  v22 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v22 || (v23 = *(_QWORD *)(v22 + 96)) == 0)
    v23 = WebCore::threadGlobalDataSlow((WebCore *)Ref);
  v24 = *(_QWORD *)(v23 + 40);
  if (!v24)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v23);
    v24 = *(_QWORD *)(v23 + 40);
  }
  v25 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v25);
  *(_QWORD *)v25 = off_1E33A4B48;
  *(_QWORD *)(v25 + 8) = 0;
  v27 = *(_DWORD *)(v25 + 20) & 0xFFC00000 | 0x1E8200;
  v28 = *(_QWORD *)(v24 + 408) != 0;
  *(_DWORD *)(v25 + 16) = 1;
  *(_DWORD *)(v25 + 20) = v27 | v28;
  v29 = *(_DWORD **)(v24 + 408);
  if (v29)
    *v29 += 2;
  *(_QWORD *)(v25 + 24) = v29;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 56) = v26;
  *(_QWORD *)(v25 + 64) = 0;
  *((_DWORD *)this + 6) += 2;
  v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v30 = &off_1E33A6578;
  v30[1] = this;
  v30[2] = v25;
  v39 = v30;
  WebCore::Node::queueTaskKeepingThisNodeAlive((uint64_t)this, (WTF::StringImpl *)0x14, (uint64_t *)&v39);
  result = (uint64_t)v39;
  if (v39)
    return (*(uint64_t (**)(_QWORD *))(*v39 + 8))(v39);
  return result;
}

BOOL WebCore::HTMLDialogElement::isValidInvokeAction(uint64_t a1, int a2)
{
  return a2 == 1 || (a2 - 3) < 3 || (a2 & 0xFE) == 6;
}

BOOL WebCore::HTMLDialogElement::handleInvokeInternal(WebCore::HTMLElement *a1, const WebCore::HTMLFormControlElement *a2, unsigned __int8 *a3)
{
  uint64_t v5;
  WTF::String *v6;
  __n128 v7;
  _BOOL4 hasAttribute;
  uint64_t v10;
  WTF::String *v11;
  __n128 v12;
  int v13;
  BOOL v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;

  if ((WebCore::HTMLElement::handleInvokeInternal(a1, a2, a3) & 1) != 0)
    return 1;
  if ((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v18 = *(_QWORD *)((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) + 0xE8);
    if (v18)
    {
      if (*(_BYTE *)(v18 + 1))
        return 0;
    }
  }
  hasAttribute = WebCore::Element::hasAttribute(a1, (const WebCore::QualifiedName *)&WebCore::HTMLNames::openAttr, v5, v6, v7);
  v13 = *a3;
  if (!hasAttribute)
  {
    if (v13 == 6 || v13 == 1)
    {
      WebCore::HTMLDialogElement::showModal(a1, v10, v11, &v19, v12);
      if (v21)
      {
        v16 = v20;
        v20 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v15);
          else
            *(_DWORD *)v16 -= 2;
        }
      }
      v14 = v13 == 6;
      return v14 || v13 == 1;
    }
    return 0;
  }
  if (v13 != 7 && v13 != 1)
    return 0;
  WebCore::HTMLDialogElement::close(a1, MEMORY[0x1E0CBF6F0], v10, v11, v12);
  v14 = v13 == 7;
  return v14 || v13 == 1;
}

_QWORD *WebCore::HTMLDialogElement::queueCancelTask(WebCore::HTMLDialogElement *this)
{
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E33B9C98;
  v2[1] = this;
  v4 = v2;
  WebCore::Node::queueTaskKeepingThisNodeAlive((uint64_t)this, (WTF::StringImpl *)0x14, (uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

unsigned __int8 *WebCore::HTMLDialogElement::removedFromAncestor(unsigned __int8 *a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  WebCore::HTMLElement::removedFromAncestor((uint64_t)a1, a2, a3, a4, a5);
  return WebCore::HTMLDialogElement::setIsModal(a1, 0);
}

void WebCore::HTMLButtonElement::~HTMLButtonElement(WebCore::HTMLButtonElement *this, void *a2)
{
  WebCore::FormListedElement *v3;
  uint64_t v4;
  WebCore::HTMLFormElement *v5;
  __int16 v6;
  __int16 v7;
  WebCore::Document *v8;
  WebCore::FormListedElement *v9;
  WebCore::HTMLFormElement *v10;

  *(_QWORD *)this = off_1E33BAC98;
  *((_QWORD *)this + 14) = &unk_1E33BB200;
  v3 = (WebCore::HTMLButtonElement *)((char *)this + 112);
  v10 = 0;
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 8))
    {
      v9 = v3;
      WebCore::FormListedElement::setFormInternal(v3, &v10);
      v3 = v9;
      v5 = v10;
      v10 = 0;
      if (v5)
      {
        if (*((_DWORD *)v5 + 6) == 2)
        {
          v6 = *((_WORD *)v5 + 15);
          if ((v6 & 0x400) == 0)
          {
            v8 = v5;
            v7 = *((_WORD *)v5 + 14);
            if ((v7 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef(v8, a2);
            }
            else
            {
              if ((v7 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)v8 + 20) + 16))(*((_QWORD *)v8 + 20));
                v6 = *((_WORD *)v8 + 15);
              }
              *((_WORD *)v8 + 15) = v6 | 0x400;
              (*(void (**)(WebCore::Document *))(*(_QWORD *)v8 + 72))(v8);
            }
            v3 = v9;
          }
        }
        else
        {
          *((_DWORD *)v5 + 6) -= 2;
        }
      }
    }
  }
  WebCore::ValidatedFormListedElement::~ValidatedFormListedElement(v3, (WTF::StringImpl *)a2);
  WebCore::Element::~Element((uint64_t)this);
}

{
  WebCore::FormListedElement *v3;
  uint64_t v4;
  bmalloc::api *v5;
  void *v6;
  WebCore::HTMLFormElement *v7;
  __int16 v8;
  __int16 v9;
  WebCore::Document *v10;
  WebCore::FormListedElement *v11;
  WebCore::HTMLFormElement *v12;

  *(_QWORD *)this = off_1E33BAC98;
  *((_QWORD *)this + 14) = &unk_1E33BB200;
  v3 = (WebCore::HTMLButtonElement *)((char *)this + 112);
  v12 = 0;
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 8))
    {
      v11 = v3;
      WebCore::FormListedElement::setFormInternal(v3, &v12);
      v3 = v11;
      v7 = v12;
      v12 = 0;
      if (v7)
      {
        if (*((_DWORD *)v7 + 6) == 2)
        {
          v8 = *((_WORD *)v7 + 15);
          if ((v8 & 0x400) == 0)
          {
            v10 = v7;
            v9 = *((_WORD *)v7 + 14);
            if ((v9 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef(v10, a2);
            }
            else
            {
              if ((v9 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)v10 + 20) + 16))(*((_QWORD *)v10 + 20));
                v8 = *((_WORD *)v10 + 15);
              }
              *((_WORD *)v10 + 15) = v8 | 0x400;
              (*(void (**)(WebCore::Document *))(*(_QWORD *)v10 + 72))(v10);
            }
            v3 = v11;
          }
        }
        else
        {
          *((_DWORD *)v7 + 6) -= 2;
        }
      }
    }
  }
  WebCore::ValidatedFormListedElement::~ValidatedFormListedElement(v3, (WTF::StringImpl *)a2);
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v5, v6);
}

uint64_t WebCore::HTMLButtonElement::canStartSelection(WebCore::HTMLButtonElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLFormControlElement::asFormListedElement(WebCore::HTMLFormControlElement *this)
{
  return (uint64_t)this + 112;
}

uint64_t WebCore::HTMLFormControlElement::asValidatedFormListedElement(WebCore::HTMLFormControlElement *this)
{
  return (uint64_t)this + 112;
}

BOOL WebCore::HTMLFormControlElement::supportsFocus(WebCore::HTMLFormControlElement *this)
{
  return (*((_BYTE *)this + 160) & 0x18) == 0;
}

uint64_t WebCore::HTMLFormControlElement::matchesValidPseudoClass(WebCore::HTMLFormControlElement *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 272))((char *)this + 112);
  if ((_DWORD)result)
    return *((_BYTE *)this + 160) & 1;
  return result;
}

uint64_t WebCore::HTMLFormControlElement::matchesInvalidPseudoClass(WebCore::HTMLFormControlElement *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 272))((char *)this + 112);
  if ((_DWORD)result)
    return (*((_BYTE *)this + 160) & 1) == 0;
  return result;
}

uint64_t WebCore::HTMLFormControlElement::matchesUserValidPseudoClass(WebCore::HTMLFormControlElement *this)
{
  uint64_t result;

  if ((*((_BYTE *)this + 160) & 0x40) == 0)
    return 0;
  result = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 272))((char *)this + 112);
  if ((_DWORD)result)
    return *((_BYTE *)this + 160) & 1;
  return result;
}

uint64_t WebCore::HTMLFormControlElement::matchesUserInvalidPseudoClass(WebCore::HTMLFormControlElement *this)
{
  uint64_t result;

  if ((*((_BYTE *)this + 160) & 0x40) == 0)
    return 0;
  result = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 272))((char *)this + 112);
  if ((_DWORD)result)
    return (*((_BYTE *)this + 160) & 1) == 0;
  return result;
}

uint64_t WebCore::HTMLFormControlElement::isFormListedElement(WebCore::HTMLFormControlElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLFormControlElement::isValidatedFormListedElement(WebCore::HTMLFormControlElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLButtonElement::isOptionalFormControl(WebCore::HTMLButtonElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLButtonElement::isLabelable(WebCore::HTMLButtonElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLFormControlElement::asFormAssociatedElement(WebCore::HTMLFormControlElement *this)
{
  return (uint64_t)this + 112;
}

uint64_t WebCore::HTMLButtonElement::isInteractiveContent(WebCore::HTMLButtonElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLFormControlElement::canTriggerImplicitSubmission(WebCore::HTMLFormControlElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLFormControlElement::refFormAssociatedElement(uint64_t this)
{
  *(_DWORD *)(this + 24) += 2;
  return this;
}

unsigned int *WebCore::HTMLFormControlElement::derefFormAssociatedElement(unsigned int *this, void *a2)
{
  unsigned int *v2;
  __int16 v3;
  __int16 v4;

  v2 = this;
  if (this[6] == 2)
  {
    v3 = *((_WORD *)this + 15);
    if ((v3 & 0x400) == 0)
    {
      v4 = *((_WORD *)this + 14);
      if ((v4 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)this, a2);
      }
      else
      {
        if ((v4 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
          v3 = *((_WORD *)v2 + 15);
        }
        *((_WORD *)v2 + 15) = v3 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 72))(v2);
      }
    }
  }
  else
  {
    this[6] -= 2;
  }
  return this;
}

uint64_t WebCore::HTMLButtonElement::isEnumeratable(WebCore::HTMLButtonElement *this)
{
  return 1;
}

void `non-virtual thunk to'WebCore::HTMLButtonElement::~HTMLButtonElement(WebCore::HTMLButtonElement *this, void *a2)
{
  char *v2;
  uint64_t v3;
  WebCore::HTMLFormElement *v4;
  __int16 v5;
  __int16 v6;
  WebCore::Document *v7;
  WebCore::HTMLButtonElement *v8;
  WebCore::HTMLFormElement *v9;

  *((_QWORD *)this - 14) = off_1E33BAC98;
  v2 = (char *)this - 112;
  *(_QWORD *)this = &unk_1E33BB200;
  v9 = 0;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      v8 = this;
      WebCore::FormListedElement::setFormInternal(this, &v9);
      this = v8;
      v4 = v9;
      v9 = 0;
      if (v4)
      {
        if (*((_DWORD *)v4 + 6) == 2)
        {
          v5 = *((_WORD *)v4 + 15);
          if ((v5 & 0x400) == 0)
          {
            v7 = v4;
            v6 = *((_WORD *)v4 + 14);
            if ((v6 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef(v7, a2);
            }
            else
            {
              if ((v6 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)v7 + 20) + 16))(*((_QWORD *)v7 + 20));
                v5 = *((_WORD *)v7 + 15);
              }
              *((_WORD *)v7 + 15) = v5 | 0x400;
              (*(void (**)(WebCore::Document *))(*(_QWORD *)v7 + 72))(v7);
            }
            this = v8;
          }
        }
        else
        {
          *((_DWORD *)v4 + 6) -= 2;
        }
      }
    }
  }
  WebCore::ValidatedFormListedElement::~ValidatedFormListedElement(this, (WTF::StringImpl *)a2);
  WebCore::Element::~Element((uint64_t)v2);
}

{
  char *v2;
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;
  WebCore::HTMLFormElement *v6;
  __int16 v7;
  __int16 v8;
  WebCore::Document *v9;
  WebCore::HTMLButtonElement *v10;
  WebCore::HTMLFormElement *v11;

  *((_QWORD *)this - 14) = off_1E33BAC98;
  v2 = (char *)this - 112;
  *(_QWORD *)this = &unk_1E33BB200;
  v11 = 0;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      v10 = this;
      WebCore::FormListedElement::setFormInternal(this, &v11);
      this = v10;
      v6 = v11;
      v11 = 0;
      if (v6)
      {
        if (*((_DWORD *)v6 + 6) == 2)
        {
          v7 = *((_WORD *)v6 + 15);
          if ((v7 & 0x400) == 0)
          {
            v9 = v6;
            v8 = *((_WORD *)v6 + 14);
            if ((v8 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef(v9, a2);
            }
            else
            {
              if ((v8 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)v9 + 20) + 16))(*((_QWORD *)v9 + 20));
                v7 = *((_WORD *)v9 + 15);
              }
              *((_WORD *)v9 + 15) = v7 | 0x400;
              (*(void (**)(WebCore::Document *))(*(_QWORD *)v9 + 72))(v9);
            }
            this = v10;
          }
        }
        else
        {
          *((_DWORD *)v6 + 6) -= 2;
        }
      }
    }
  }
  WebCore::ValidatedFormListedElement::~ValidatedFormListedElement(this, (WTF::StringImpl *)a2);
  WebCore::Element::~Element((uint64_t)v2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t `non-virtual thunk to'WebCore::HTMLFormControlElement::isFormListedElement(WebCore::HTMLFormControlElement *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLFormControlElement::refFormAssociatedElement(uint64_t this)
{
  *(_DWORD *)(this - 88) += 2;
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLFormControlElement::derefFormAssociatedElement(unsigned int *this, void *a2)
{
  unsigned int *v2;
  __int16 v3;
  __int16 v4;

  v2 = this;
  if (*(this - 22) == 2)
  {
    v3 = *((_WORD *)this - 41);
    if ((v3 & 0x400) == 0)
    {
      v4 = *((_WORD *)this - 42);
      if ((v4 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)(this - 28), a2);
      }
      else
      {
        if ((v4 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
          v3 = *((_WORD *)v2 - 41);
        }
        *((_WORD *)v2 - 41) = v3 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*((_QWORD *)v2 - 14) + 72))(v2 - 28);
      }
    }
  }
  else
  {
    *(this - 22) -= 2;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLFormControlElement::isValidatedFormListedElement(WebCore::HTMLFormControlElement *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLFormControlElement::isFormControlElement(WebCore::HTMLFormControlElement *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLButtonElement::isEnumeratable(WebCore::HTMLButtonElement *this)
{
  return 1;
}

uint64_t WebCore::ValidatedFormListedElement::shouldSaveAndRestoreFormControlState(WebCore::ValidatedFormListedElement *this)
{
  return 0;
}

uint64_t WebCore::ValidatedFormListedElement::readOnlyBarsFromConstraintValidation(WebCore::ValidatedFormListedElement *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::HTMLFormControlElement::validationAnchorElement(WebCore::HTMLFormControlElement *this)
{
  return (uint64_t)this - 112;
}

uint64_t WebCore::HTMLCanvasElement::ref(uint64_t this)
{
  *(_DWORD *)(this + 24) += 2;
  return this;
}

unsigned int *WebCore::HTMLCanvasElement::deref(unsigned int *this, void *a2)
{
  if (this[6] == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
  }
  else
  {
    this[6] -= 2;
  }
  return this;
}

uint64_t WebCore::HTMLCanvasElement::isHTMLCanvasElement(WebCore::HTMLCanvasElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLCanvasElement::refCanvasBase(uint64_t this)
{
  *(_DWORD *)(this + 24) += 2;
  return this;
}

unsigned int *WebCore::HTMLCanvasElement::derefCanvasBase(unsigned int *this, void *a2)
{
  unsigned int *v2;
  __int16 v3;
  __int16 v4;

  v2 = this;
  if (this[6] == 2)
  {
    v3 = *((_WORD *)this + 15);
    if ((v3 & 0x400) == 0)
    {
      v4 = *((_WORD *)this + 14);
      if ((v4 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)this, a2);
      }
      else
      {
        if ((v4 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
          v3 = *((_WORD *)v2 + 15);
        }
        *((_WORD *)v2 + 15) = v3 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 72))(v2);
      }
    }
  }
  else
  {
    this[6] -= 2;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLCanvasElement::refCanvasBase(uint64_t this)
{
  *(_DWORD *)(this - 88) += 2;
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLCanvasElement::derefCanvasBase(unsigned int *this, void *a2)
{
  unsigned int *v2;
  __int16 v3;
  __int16 v4;

  v2 = this;
  if (*(this - 22) == 2)
  {
    v3 = *((_WORD *)this - 41);
    if ((v3 & 0x400) == 0)
    {
      v4 = *((_WORD *)this - 42);
      if ((v4 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)(this - 28), a2);
      }
      else
      {
        if ((v4 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
          v3 = *((_WORD *)v2 - 41);
        }
        *((_WORD *)v2 - 41) = v3 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*((_QWORD *)v2 - 14) + 72))(v2 - 28);
      }
    }
  }
  else
  {
    *(this - 22) -= 2;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLCanvasElement::isHTMLCanvasElement(WebCore::HTMLCanvasElement *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLCanvasElement::ref(uint64_t this)
{
  *(_DWORD *)(this - 200) += 2;
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLCanvasElement::deref(unsigned int *this, void *a2)
{
  uint64_t v2;
  __int16 v3;
  __int16 v4;

  v2 = (uint64_t)this;
  if (*(this - 50) == 2)
  {
    v3 = *((_WORD *)this - 97);
    if ((v3 & 0x400) == 0)
    {
      v4 = *((_WORD *)this - 98);
      if ((v4 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)(this - 56), a2);
      }
      else
      {
        if ((v4 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this - 8) + 16))(*((_QWORD *)this - 8));
          v3 = *(_WORD *)(v2 - 194);
        }
        *(_WORD *)(v2 - 194) = v3 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 224) + 72))(v2 - 224);
      }
    }
  }
  else
  {
    *(this - 50) -= 2;
  }
  return this;
}

void WebCore::DetailsSlotAssignment::~DetailsSlotAssignment(WebCore::DetailsSlotAssignment *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WebCore::NamedSlotAssignment::Slot *v6;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = off_1E33A7C10;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = (WTF::StringImpl **)*((_QWORD *)this + 3);
      do
      {
        v5 = *v4;
        if (*v4 != (WTF::StringImpl *)-1)
        {
          v6 = v4[1];
          v4[1] = 0;
          if (v6)
          {
            WebCore::NamedSlotAssignment::Slot::~Slot(v6, a2);
            WTF::fastFree(v7, v8);
            v5 = *v4;
          }
          *v4 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
              WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v5 -= 2;
          }
        }
        v4 += 2;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WebCore::NamedSlotAssignment::Slot *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = off_1E33A7C10;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF::StringImpl **)*((_QWORD *)this + 3);
      do
      {
        v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          v7 = v5[1];
          v5[1] = 0;
          if (v7)
          {
            WebCore::NamedSlotAssignment::Slot::~Slot(v7, a2);
            WTF::fastFree(v8, v9);
            v6 = *v5;
          }
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WTF::fastFree(this, a2);
}

void WebCore::HTMLDetailsElement::~HTMLDetailsElement(WebCore::HTMLDetailsElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLDetailsElement::~HTMLDetailsElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      v10 = *(_WORD *)(v3 + 30);
      if ((v10 & 0x400) == 0)
      {
        v11 = *(_WORD *)(v3 + 28);
        if ((v11 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v3, a2);
        }
        else
        {
          if ((v11 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
            v10 = *(_WORD *)(v3 + 30);
          }
          *(_WORD *)(v3 + 30) = v10 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
        }
      }
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v12 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v12)
      {
        v18 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v12));
        v4 = v18;
      }
      v13 = *(WTF **)(v4 + 16);
      if (v13)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v16 = v4;
        WTF::fastFree(v13, a2);
        v4 = v16;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v14 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v14)
      {
        v19 = v7;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v14));
        v7 = v19;
      }
      v15 = *(WTF **)(v7 + 16);
      if (v15)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v17 = v7;
        WTF::fastFree(v15, a2);
        v7 = v17;
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  WebCore::Element::~Element((uint64_t)this);
}

uint64_t WebCore::HTMLDetailsElement::isInteractiveContent(WebCore::HTMLDetailsElement *this)
{
  return 1;
}

void WebCore::HTMLDialogElement::~HTMLDialogElement(WebCore::HTMLDialogElement *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebCore::Element::~Element((uint64_t)this);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  bmalloc::api *v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v9 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v9)
      {
        v12 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v9));
        v3 = v12;
      }
      v10 = *(WTF **)(v3 + 16);
      if (v10)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v11 = v3;
        WTF::fastFree(v10, a2);
        v3 = v11;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v7, v8);
}

void WebCore::CollectionNamedElementCache::~CollectionNamedElementCache(WebCore::CollectionNamedElementCache *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v11 = (WTF::StringImpl **)*((_QWORD *)this + 2);
    v12 = 8 * v3;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      v7 = v5 + 8;
      do
      {
        if (*(_QWORD *)(v7 - 8) != -1)
          v7 = WTF::Vector<WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7, a2);
        v7 += 24;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = v8 + 8;
      do
      {
        if (*(_QWORD *)(v10 - 8) != -1)
          v10 = WTF::Vector<WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, a2);
        v10 += 24;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
}

WTF *WebCore::CollectionNamedElementCache::append(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  WTF *result;
  _DWORD **v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  WTF *v36;
  WTF *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];

  v8 = *a3;
  v9 = *a1;
  if (*a1)
  {
    v22 = *(_DWORD *)(v9 - 8);
    v23 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
    v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
    v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
    v26 = v22 & ((v25 >> 31) ^ v25);
    v27 = *(_QWORD *)(v9 + 24 * v26);
    if (v27 == v8)
      goto LABEL_8;
    v28 = 1;
    while (v27)
    {
      v26 = (v26 + v28) & v22;
      v27 = *(_QWORD *)(v9 + 24 * v26);
      ++v28;
      if (v27 == v8)
        goto LABEL_8;
    }
  }
  v10 = a1[1];
  if (v10)
  {
    v29 = *(_DWORD *)(v10 - 8);
    v30 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
    v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
    v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
    v33 = v29 & ((v32 >> 31) ^ v32);
    v34 = *(_QWORD *)(v10 + 24 * v33);
    if (v34 == v8)
      goto LABEL_8;
    v35 = 1;
    while (v34)
    {
      v33 = (v33 + v35) & v29;
      v34 = *(_QWORD *)(v10 + 24 * v33);
      ++v35;
      if (v34 == v8)
        goto LABEL_8;
    }
  }
  v11 = a1 + 2;
  v12 = *((unsigned int *)a1 + 7);
  if ((_DWORD)v12 == *((_DWORD *)a1 + 6))
  {
    v19 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v12 + 1, (unint64_t)a3);
    v12 = *((unsigned int *)a1 + 7);
    v20 = a1[2];
    v21 = *v19;
    if (*v19)
      *v21 += 2;
    *(_QWORD *)(v20 + 8 * v12) = v21;
  }
  else
  {
    v13 = *v11;
    if (v8)
      *(_DWORD *)v8 += 2;
    *(_QWORD *)(v13 + 8 * v12) = v8;
  }
  *((_DWORD *)a1 + 7) = v12 + 1;
  v8 = *a3;
LABEL_8:
  v47 = 0;
  v48 = v8;
  v46 = 0;
  WTF::HashMap<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomStringImpl *>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTraits<WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, &v48, (uint64_t)&v46, (uint64_t)v49);
  v14 = v49[0];
  v15 = (uint64_t *)(v49[0] + 8);
  v16 = *(unsigned int *)(v49[0] + 20);
  if ((_DWORD)v16 == *(_DWORD *)(v49[0] + 16))
  {
    WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>((uint64_t)v15, a4);
  }
  else
  {
    v43 = *v15;
    v44 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a4);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 + 1, v44));
    *(_QWORD *)(v43 + 8 * v16) = v44;
    ++*(_DWORD *)(v14 + 20);
  }
  if (HIDWORD(v47))
  {
    v36 = v46;
    v37 = (WTF *)((char *)v46 + 8 * HIDWORD(v47));
    do
    {
      v38 = *(_QWORD *)v36;
      *(_QWORD *)v36 = 0;
      if (v38)
      {
        do
        {
          v39 = __ldaxr((unsigned int *)v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, (unsigned int *)v38));
        if (!v40)
        {
          atomic_store(1u, (unsigned int *)v38);
          v41 = *(unsigned int *)(v38 + 28);
          if ((_DWORD)v41)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v38 + 16), (WTF::StringImpl *)(*(_QWORD *)(v38 + 16) + 32 * v41));
          v42 = *(WTF **)(v38 + 16);
          if (v42)
          {
            *(_QWORD *)(v38 + 16) = 0;
            *(_DWORD *)(v38 + 24) = 0;
            WTF::fastFree(v42, v17);
          }
          WTF::fastFree((WTF *)v38, v17);
        }
      }
      v36 = (WTF *)((char *)v36 + 8);
    }
    while (v36 != v37);
  }
  result = v46;
  if (v46)
  {
    v46 = 0;
    LODWORD(v47) = 0;
    return (WTF *)WTF::fastFree(result, v17);
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomStringImpl *>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTraits<WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t *v28;
  int v29;
  unsigned int v30;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::AtomStringImpl *,WTF::KeyValuePair<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::AtomStringImpl *>,WTF::HashMap<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomStringImpl *>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTraits<WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomStringImpl *>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (uint64_t *)(v8 + 24 * v15);
  v17 = *v16;
  if (*v16)
  {
    v28 = 0;
    v29 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v30 = 0;
        else
          v30 = *(_DWORD *)(v8 - 4);
        v27 = 0;
        v26 = v8 + 24 * v30;
        goto LABEL_16;
      }
      if (v17 == -1)
        v28 = v16;
      v15 = (v15 + v29) & v10;
      v16 = (uint64_t *)(v8 + 24 * v15);
      v17 = *v16;
      ++v29;
    }
    while (*v16);
    if (v28)
    {
      *v28 = 0;
      v28[1] = 0;
      v28[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v28;
    }
  }
  *v16 = v11;
  v18 = *((unsigned int *)v16 + 5);
  if ((_DWORD)v18)
    WTF::VectorTypeOperations<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>::destruct(v16[1], (uint64_t *)(v16[1] + 8 * v18));
  result = (uint64_t *)v16[1];
  if (result)
  {
    v16[1] = 0;
    *((_DWORD *)v16 + 4) = 0;
    result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
  }
  v19 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v16[1] = v19;
  LODWORD(v19) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = 0;
  *((_DWORD *)v16 + 4) = v19;
  LODWORD(v19) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = 0;
  *((_DWORD *)v16 + 5) = v19;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24)
      goto LABEL_15;
LABEL_20:
    result = WTF::HashTable<WTF::AtomStringImpl *,WTF::KeyValuePair<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::AtomStringImpl *>,WTF::HashMap<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomStringImpl *>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTraits<WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomStringImpl *>>::expand(v6, v16);
    v16 = result;
    v22 = *v6;
    if (*v6)
      LODWORD(v25) = *(_DWORD *)(v22 - 4);
    else
      LODWORD(v25) = 0;
    goto LABEL_15;
  }
  if (3 * v25 <= 4 * v24)
    goto LABEL_20;
LABEL_15:
  v26 = v22 + 24 * v25;
  v27 = 1;
LABEL_16:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 16) = v27;
  return result;
}

_QWORD *WTF::HashTable<WTF::AtomStringImpl *,WTF::KeyValuePair<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::AtomStringImpl *>,WTF::HashMap<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomStringImpl *>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTraits<WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomStringImpl *>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::AtomStringImpl *,WTF::KeyValuePair<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::AtomStringImpl *>,WTF::HashMap<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomStringImpl *>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTraits<WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomStringImpl *>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::AtomStringImpl *,WTF::KeyValuePair<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::AtomStringImpl *>,WTF::HashMap<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomStringImpl *>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTraits<WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomStringImpl *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (_QWORD *)v6;
    do
    {
      if (*v14 != -1)
      {
        v15 = v13;
        if (*v14)
        {
          v17 = v11;
          v18 = v14;
          v21 = v6;
          v19 = WTF::HashTable<WTF::AtomStringImpl *,WTF::KeyValuePair<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::AtomStringImpl *>,WTF::HashMap<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomStringImpl *>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTraits<WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomStringImpl *>>::reinsert(a1, (uint64_t)v14);
          WTF::Vector<WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v18 + 1), v20);
          v14 = v18;
          if (v18 == a3)
            v11 = v19;
          else
            v11 = v17;
          v6 = v21;
        }
        else
        {
          v16 = v14;
          WTF::Vector<WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v14 + 1), v10);
          v14 = v16;
        }
        v13 = v15;
      }
      v14 += 3;
      --v13;
    }
    while (v13);
    goto LABEL_17;
  }
  result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::AtomStringImpl *,WTF::KeyValuePair<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::AtomStringImpl *>,WTF::HashMap<WTF::AtomStringImpl *,WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomStringImpl *>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTraits<WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomStringImpl *>>::reinsert(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  void *v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 8);
  else
    v4 = 0;
  v5 = WTF::IdentityHashTranslator<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::JSObject *>>::hash<JSC::JSObject *>((_QWORD *)a2);
  v7 = 0;
  do
  {
    v8 = v5 & v4;
    v9 = (_QWORD *)(v3 + 24 * (v5 & v4));
    v5 = ++v7 + (v5 & v4);
  }
  while (*v9);
  v10 = v3 + 24 * v8;
  WTF::Vector<WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10 + 8, v6);
  *v9 = *(_QWORD *)a2;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(v10 + 8) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(v10 + 16) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(v10 + 20) = v11;
  return v9;
}

void WebCore::HTMLDListElement::~HTMLDListElement(WebCore::HTMLDListElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::HTMLDataElement::~HTMLDataElement(WebCore::HTMLDataElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

WebCore::ImageData *WTF::RefCounted<WebCore::ImageData>::deref(WebCore::ImageData *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::ImageData::~ImageData(result);
    return (WebCore::ImageData *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::HTMLCanvasElement>(WebCore::HTMLCanvasElement &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;

  *a1 = &off_1E33B9BE8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 240);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        v10 = *(_WORD *)(v7 + 30);
        if ((v10 & 0x400) == 0)
        {
          v11 = *(_WORD *)(v7 + 28);
          if ((v11 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v7, a2);
          }
          else
          {
            if ((v11 & 0x20) != 0)
            {
              v12 = v7;
              (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
              v7 = v12;
              v10 = *(_WORD *)(v12 + 30);
            }
            *(_WORD *)(v7 + 30) = v10 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
          }
        }
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      v8 = *(_WORD *)(v5 + 30);
      if ((v8 & 0x400) == 0)
      {
        v9 = *(_WORD *)(v5 + 28);
        if ((v9 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v5, a2);
        }
        else
        {
          if ((v9 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
            v8 = *(_WORD *)(v5 + 30);
          }
          *(_WORD *)(v5 + 30) = v8 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
        }
      }
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::HTMLCanvasElement>(WebCore::HTMLCanvasElement &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E33B9BE8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 240);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        v10 = *(_WORD *)(v7 + 30);
        if ((v10 & 0x400) == 0)
        {
          v11 = *(_WORD *)(v7 + 28);
          if ((v11 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v7, a2);
          }
          else
          {
            if ((v11 & 0x20) != 0)
            {
              v12 = v7;
              (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
              v7 = v12;
              v10 = *(_WORD *)(v12 + 30);
            }
            *(_WORD *)(v7 + 30) = v10 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
          }
        }
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      v8 = *(_WORD *)(v5 + 30);
      if ((v8 & 0x400) == 0)
      {
        v9 = *(_WORD *)(v5 + 28);
        if ((v9 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v5, a2);
        }
        else
        {
          if ((v9 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
            v8 = *(_WORD *)(v5 + 30);
          }
          *(_WORD *)(v5 + 30) = v8 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
        }
      }
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::HTMLCanvasElement>(WebCore::HTMLCanvasElement &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLDetailsElement::queueDetailsToggleEventTask(WebCore::DetailsState,WebCore::DetailsState)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Event *v6;
  uint64_t v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v1 = *(_QWORD *)(result + 8);
  if ((*(unsigned __int16 *)(v1 + 136) | (*(unsigned __int8 *)(v1 + 138) << 16)) < 0x10000u
    || ((*(_WORD *)(v1 + 136) & 0xFF00) != 0) != (*(_BYTE *)(result + 16) != 0))
  {
    return result;
  }
  *(_BYTE *)(v1 + 138) = 0;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow((WebCore *)result);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)(v5 + 8) = 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x2F0200 | (*(_QWORD *)(v4 + 2056) != 0);
  v8 = *(_DWORD **)(v4 + 2056);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(v5 + 24) = v8;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v7;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)v5 = off_1E33A8648;
  if (v10)
    *(_DWORD *)v10 += 2;
  *(_QWORD *)(v5 + 72) = v10;
  if (v10)
    *(_DWORD *)v10 += 2;
  *(_QWORD *)(v5 + 80) = v10;
  result = WebCore::EventDispatcher::dispatchEvent((WebCore::EventNames **)v1, (WebCore::Node *)v5, v6);
  if (*(_DWORD *)(v5 + 16) == 1)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (!v10)
      goto LABEL_18;
  }
  else
  {
    --*(_DWORD *)(v5 + 16);
    if (!v10)
      goto LABEL_18;
  }
  if (*(_DWORD *)v10 == 2)
    result = WTF::StringImpl::destroy(v10, v9);
  else
    *(_DWORD *)v10 -= 2;
LABEL_18:
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLDialogElement::queueCancelTask(void)::$_0,void>::call(WebCore *a1)
{
  WebCore::EventNames **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Event *v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  _DWORD *v10;
  uint64_t result;
  uint64_t v12;
  WTF::String *v13;
  __n128 v14;

  v1 = (WebCore::EventNames **)*((_QWORD *)a1 + 1);
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(a1);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v8 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8204;
  v9 = *(_QWORD *)(v4 + 344) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v8 | v9;
  v10 = *(_DWORD **)(v4 + 344);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(v5 + 24) = v10;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v7;
  *(_QWORD *)(v5 + 64) = 0;
  result = WebCore::EventDispatcher::dispatchEvent(v1, (WebCore::Node *)v5, v6);
  if ((*(_BYTE *)(v5 + 20) & 0x40) == 0)
    result = WebCore::HTMLDialogElement::close((WebCore::HTMLDialogElement *)v1, MEMORY[0x1E0CBF6F0], v12, v13, v14);
  if (*(_DWORD *)(v5 + 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  --*(_DWORD *)(v5 + 16);
  return result;
}

uint64_t WebCore::HTMLDirectoryElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33BBFD0;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLDivElement::HTMLDivElement(uint64_t result, _DWORD **a2, uint64_t a3, __int16 a4)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_DWORD *)(result + 24) = 2;
  *(_WORD *)(result + 28) = a4 | 0x101C;
  *(_WORD *)(result + 30) = 0;
  if ((a4 & 0x80) != 0)
    v4 = 0;
  else
    v4 = a3;
  if ((a4 & 0xE000 | 0x1000) == 0x9000)
    v4 = 0;
  if (v4)
    v5 = v4 + 96;
  else
    v5 = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = v5;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a3 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v6 = *a2;
  if (*a2)
    ++*v6;
  *(_QWORD *)(result + 96) = v6;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33B9CC0;
  return result;
}

uint64_t WebCore::HTMLDivElement::create@<X0>(WebCore::HTMLDivElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = (char *)this + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v6 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(result + 96) = v6;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33B9CC0;
  *a2 = result;
  return result;
}

WTF::StringImpl *WebCore::HTMLDivElement::collectPresentationalHintsForAttribute(WebCore::HTMLDivElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  int v8;
  WebCore::MutableStyleProperties *v9;
  unsigned int v10;

  if (*(_QWORD *)a2 != WebCore::HTMLNames::alignAttr)
    return WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
  if ((WTF::equalLettersIgnoringASCIICase((uint64_t *)a3, "middle", 7uLL) & 1) != 0
    || WTF::equalLettersIgnoringASCIICase((uint64_t *)a3, "center", 7uLL))
  {
    v8 = (int)this;
    v9 = a4;
    v10 = 264;
    return (WTF::StringImpl *)WebCore::StyledElement::addPropertyToPresentationalHintStyle(v8, v9, 249, v10);
  }
  if (WTF::equalLettersIgnoringASCIICase((uint64_t *)a3, "left", 5uLL))
  {
    v8 = (int)this;
    v9 = a4;
    v10 = 262;
    return (WTF::StringImpl *)WebCore::StyledElement::addPropertyToPresentationalHintStyle(v8, v9, 249, v10);
  }
  if (WTF::equalLettersIgnoringASCIICase((uint64_t *)a3, "right", 6uLL))
  {
    v8 = (int)this;
    v9 = a4;
    v10 = 263;
    return (WTF::StringImpl *)WebCore::StyledElement::addPropertyToPresentationalHintStyle(v8, v9, 249, v10);
  }
  return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 249, (uint64_t)a3);
}

void *WebCore::HTMLDocument::bisoHeap(WebCore::HTMLDocument *this)
{
  return &WebCore::HTMLDocument::bisoHeap(void)::heap;
}

uint64_t WebCore::HTMLDocument::operator new(uint64_t this)
{
  if (this == 3536)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::HTMLDocument::createSynthesizedDocument@<X0>(WebCore::HTMLDocument *this@<X0>, WebCore::LocalFrame *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t result;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v7 = bmalloc::api::isoAllocate();
  v8 = *((_QWORD *)this + 17);
  v18 = 0;
  v17 = 0u;
  v9 = WebCore::Document::Document(v7, (uint64_t)this, v8, (uint64_t)a2, 1, 1, (uint64_t *)&v17);
  *(_QWORD *)v9 = off_1E33BA1B0;
  *(_QWORD *)(v9 + 192) = &unk_1E33BA500;
  v11 = v9 + 192;
  *(_QWORD *)(v9 + 288) = &unk_1E33BA6C0;
  *(_QWORD *)(v9 + 504) = &unk_1E33BA6E8;
  *(_QWORD *)(v9 + 512) = &unk_1E33BA710;
  *(_QWORD *)(v9 + 544) = &unk_1E33BA740;
  *(_QWORD *)(v9 + 552) = &unk_1E33BA768;
  *(_OWORD *)(v9 + 3512) = 0u;
  v12 = *(WTF::StringImpl **)(v9 + 1704);
  *(_QWORD *)(v7 + 1704) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  *a3 = v7;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_8:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v16 = v11;
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v7 + 416), &v16, (uint64_t)&v17);
  v15 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v15 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
}

unint64_t WebCore::HTMLDocument::HTMLDocument(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, __int16 a6, char a7)
{
  __int128 v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = a5[1];
  v13[0] = *a5;
  v13[1] = v8;
  v9 = WebCore::Document::Document(a1, a2, a3, a4, a6 & 0xFFFE | 1u, a7, (uint64_t *)v13);
  *(_QWORD *)v9 = off_1E33BA1B0;
  *(_QWORD *)(v9 + 192) = &unk_1E33BA500;
  *(_QWORD *)(v9 + 288) = &unk_1E33BA6C0;
  *(_QWORD *)(v9 + 504) = &unk_1E33BA6E8;
  *(_QWORD *)(v9 + 512) = &unk_1E33BA710;
  *(_QWORD *)(v9 + 544) = &unk_1E33BA740;
  *(_QWORD *)(v9 + 552) = &unk_1E33BA768;
  *(_OWORD *)(v9 + 3512) = 0u;
  v11 = *(WTF::StringImpl **)(v9 + 1704);
  *(_QWORD *)(a1 + 1704) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  return a1;
}

void `non-virtual thunk to'WebCore::HTMLDocument::~HTMLDocument(WebCore::HTMLDocument *this, void *a2)
{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  *((_QWORD *)this - 24) = off_1E33BA1B0;
  v3 = (WebCore::HTMLDocument *)((char *)this - 192);
  *(_QWORD *)this = &unk_1E33BA500;
  *((_QWORD *)this + 12) = &unk_1E33BA6C0;
  *((_QWORD *)this + 39) = &unk_1E33BA6E8;
  *((_QWORD *)this + 40) = &unk_1E33BA710;
  *((_QWORD *)this + 44) = &unk_1E33BA740;
  *((_QWORD *)this + 45) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 416);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 415);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::HTMLDocument *)((char *)this - 288);
  *((_QWORD *)this - 36) = off_1E33BA1B0;
  *((_QWORD *)this - 12) = &unk_1E33BA500;
  *(_QWORD *)this = &unk_1E33BA6C0;
  *((_QWORD *)this + 27) = &unk_1E33BA6E8;
  *((_QWORD *)this + 28) = &unk_1E33BA710;
  *((_QWORD *)this + 32) = &unk_1E33BA740;
  *((_QWORD *)this + 33) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 404);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 403);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::HTMLDocument *)((char *)this - 504);
  *((_QWORD *)this - 63) = off_1E33BA1B0;
  *((_QWORD *)this - 39) = &unk_1E33BA500;
  *((_QWORD *)this - 27) = &unk_1E33BA6C0;
  *(_QWORD *)this = &unk_1E33BA6E8;
  *((_QWORD *)this + 1) = &unk_1E33BA710;
  *((_QWORD *)this + 5) = &unk_1E33BA740;
  *((_QWORD *)this + 6) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 377);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 376);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::HTMLDocument *)((char *)this - 512);
  *((_QWORD *)this - 64) = off_1E33BA1B0;
  *((_QWORD *)this - 40) = &unk_1E33BA500;
  *((_QWORD *)this - 28) = &unk_1E33BA6C0;
  *((_QWORD *)this - 1) = &unk_1E33BA6E8;
  *(_QWORD *)this = &unk_1E33BA710;
  *((_QWORD *)this + 4) = &unk_1E33BA740;
  *((_QWORD *)this + 5) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 376);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 375);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::HTMLDocument *)((char *)this - 544);
  *((_QWORD *)this - 68) = off_1E33BA1B0;
  *((_QWORD *)this - 44) = &unk_1E33BA500;
  *((_QWORD *)this - 32) = &unk_1E33BA6C0;
  *((_QWORD *)this - 5) = &unk_1E33BA6E8;
  *((_QWORD *)this - 4) = &unk_1E33BA710;
  *(_QWORD *)this = &unk_1E33BA740;
  *((_QWORD *)this + 1) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 372);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 371);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::HTMLDocument *)((char *)this - 552);
  *((_QWORD *)this - 69) = off_1E33BA1B0;
  *((_QWORD *)this - 45) = &unk_1E33BA500;
  *((_QWORD *)this - 33) = &unk_1E33BA6C0;
  *((_QWORD *)this - 6) = &unk_1E33BA6E8;
  *((_QWORD *)this - 5) = &unk_1E33BA710;
  *((_QWORD *)this - 1) = &unk_1E33BA740;
  *(_QWORD *)this = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 371);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 370);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *((_QWORD *)this - 24) = off_1E33BA1B0;
  v3 = (WebCore::HTMLDocument *)((char *)this - 192);
  *(_QWORD *)this = &unk_1E33BA500;
  *((_QWORD *)this + 12) = &unk_1E33BA6C0;
  *((_QWORD *)this + 39) = &unk_1E33BA6E8;
  *((_QWORD *)this + 40) = &unk_1E33BA710;
  *((_QWORD *)this + 44) = &unk_1E33BA740;
  *((_QWORD *)this + 45) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 416);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 415);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::HTMLDocument *)((char *)this - 288);
  *((_QWORD *)this - 36) = off_1E33BA1B0;
  *((_QWORD *)this - 12) = &unk_1E33BA500;
  *(_QWORD *)this = &unk_1E33BA6C0;
  *((_QWORD *)this + 27) = &unk_1E33BA6E8;
  *((_QWORD *)this + 28) = &unk_1E33BA710;
  *((_QWORD *)this + 32) = &unk_1E33BA740;
  *((_QWORD *)this + 33) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 404);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 403);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::HTMLDocument *)((char *)this - 504);
  *((_QWORD *)this - 63) = off_1E33BA1B0;
  *((_QWORD *)this - 39) = &unk_1E33BA500;
  *((_QWORD *)this - 27) = &unk_1E33BA6C0;
  *(_QWORD *)this = &unk_1E33BA6E8;
  *((_QWORD *)this + 1) = &unk_1E33BA710;
  *((_QWORD *)this + 5) = &unk_1E33BA740;
  *((_QWORD *)this + 6) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 377);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 376);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::HTMLDocument *)((char *)this - 512);
  *((_QWORD *)this - 64) = off_1E33BA1B0;
  *((_QWORD *)this - 40) = &unk_1E33BA500;
  *((_QWORD *)this - 28) = &unk_1E33BA6C0;
  *((_QWORD *)this - 1) = &unk_1E33BA6E8;
  *(_QWORD *)this = &unk_1E33BA710;
  *((_QWORD *)this + 4) = &unk_1E33BA740;
  *((_QWORD *)this + 5) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 376);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 375);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::HTMLDocument *)((char *)this - 544);
  *((_QWORD *)this - 68) = off_1E33BA1B0;
  *((_QWORD *)this - 44) = &unk_1E33BA500;
  *((_QWORD *)this - 32) = &unk_1E33BA6C0;
  *((_QWORD *)this - 5) = &unk_1E33BA6E8;
  *((_QWORD *)this - 4) = &unk_1E33BA710;
  *(_QWORD *)this = &unk_1E33BA740;
  *((_QWORD *)this + 1) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 372);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 371);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::HTMLDocument *)((char *)this - 552);
  *((_QWORD *)this - 69) = off_1E33BA1B0;
  *((_QWORD *)this - 45) = &unk_1E33BA500;
  *((_QWORD *)this - 33) = &unk_1E33BA6C0;
  *((_QWORD *)this - 6) = &unk_1E33BA6E8;
  *((_QWORD *)this - 5) = &unk_1E33BA710;
  *((_QWORD *)this - 1) = &unk_1E33BA740;
  *(_QWORD *)this = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 371);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 370);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

void WebCore::HTMLDocument::removeDocumentNamedItem(WebCore::HTMLDocument *this, const WTF::AtomString *a2, WebCore::Element *a3)
{
  WebCore::TreeScopeOrderedMap::remove((WebCore::HTMLDocument *)((char *)this + 3512), a2, a3);
}

BOOL WebCore::HTMLDocument::isFrameSet(WebCore::HTMLDocument *this)
{
  uint64_t v1;
  uint64_t i;

  v1 = *((_QWORD *)this + 159);
  if (!v1)
    return 0;
  for (i = *(_QWORD *)(v1 + 80); i; i = *(_QWORD *)(i + 56))
  {
    if ((*(_WORD *)(i + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
    {
      break;
    }
  }
  return i != 0;
}

uint64_t WebCore::HTMLDocument::cloneDocumentWithoutChildren@<X0>(WebCore::HTMLDocument *this@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t result;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 85);
  v4 = (char *)this + 736;
  v15 = 0;
  v14 = 0u;
  v5 = bmalloc::api::isoAllocate();
  v6 = WebCore::Document::Document(v5, 0, v3, (uint64_t)v4, 1, 0, (uint64_t *)&v14);
  *(_QWORD *)v6 = off_1E33BA1B0;
  *(_QWORD *)(v6 + 192) = &unk_1E33BA500;
  v8 = v6 + 192;
  *(_QWORD *)(v6 + 288) = &unk_1E33BA6C0;
  *(_QWORD *)(v6 + 504) = &unk_1E33BA6E8;
  *(_QWORD *)(v6 + 512) = &unk_1E33BA710;
  *(_QWORD *)(v6 + 544) = &unk_1E33BA740;
  *(_QWORD *)(v6 + 552) = &unk_1E33BA768;
  *(_OWORD *)(v6 + 3512) = 0u;
  v9 = *(WTF::StringImpl **)(v6 + 1704);
  *(_QWORD *)(v5 + 1704) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_8:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v13 = v8;
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v5 + 416), &v13, (uint64_t)&v14);
  v12 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v12 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      goto LABEL_15;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
LABEL_15:
  *a2 = v5;
  return result;
}

uint64_t WebCore::HTMLElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33BC680;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLElement::parseBorderWidthAttribute(WebCore::HTMLElement *this, const WTF::AtomString *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(uint64_t **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v4, v5, &v7);
  if (HIDWORD(v7) == 1)
    return *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24) && v3 != 0;
  if (HIDWORD(v7))
    std::__throw_bad_variant_access[abi:sn180100]();
  result = v7;
  if ((v7 & 0x80000000) != 0)
    return *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24) && v3 != 0;
  return result;
}

int *WebCore::HTMLElement::applyBorderAttributeToStyle(WebCore::HTMLElement *this, const WTF::AtomString *a2, WebCore::MutableStyleProperties *a3)
{
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  int v8;
  double v9;
  uint64_t v10;
  char v11;
  int *v13;
  int v14;
  WTF::StringImpl *v15;
  int *v16;
  WTF::StringImpl *v17;
  int *result;
  int *v19;

  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v6 = *(uint64_t **)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v6, v7, (uint64_t *)&v19);
  if (HIDWORD(v19) == 1)
    goto LABEL_9;
  if (HIDWORD(v19))
    std::__throw_bad_variant_access[abi:sn180100]();
  v8 = (int)v19;
  if ((v19 & 0x80000000) != 0)
  {
LABEL_9:
    v8 = *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24) && v5 != 0;
  }
  else if (v19 > 0xFF)
  {
    v9 = (double)v19;
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 2;
    v11 = *(_BYTE *)(v10 + 6);
    *(_WORD *)(v10 + 4) = 6;
    *(_BYTE *)(v10 + 6) = v11 & 0xFC;
    *(double *)(v10 + 8) = v9;
    goto LABEL_16;
  }
  v13 = &WebCore::staticCSSValuePool[4 * v8];
  v14 = v13[16];
  v10 = (uint64_t)(v13 + 16);
  *(_DWORD *)v10 = v14 + 2;
LABEL_16:
  v19 = (int *)v10;
  WebCore::MutableStyleProperties::setProperty(a3, 485, &v19, 0);
  v16 = v19;
  v19 = 0;
  if (v16)
  {
    if (*v16 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v15);
    else
      *v16 -= 2;
  }
  dword_1ECE8BCC8 += 2;
  v19 = &WebCore::staticCSSValuePool[3144];
  WebCore::MutableStyleProperties::setProperty(a3, 483, &v19, 0);
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*result == 2)
      return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v17);
    else
      *result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLElement::mapLanguageAttributeToLocale(WebCore::HTMLElement *this, const WTF::AtomString *a2, WebCore::MutableStyleProperties *a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    return (WTF::StringImpl *)WebCore::StyledElement::addPropertyToPresentationalHintStyle((int)this, a3, 33, 0x18Au);
  WebCore::serializeString(a2, a3, &v7);
  WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a3, 33, (uint64_t)&v7);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::HTMLElement *this, const WebCore::QualifiedName *a2)
{
  int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  int v8;
  int v9;
  unsigned int i;
  uint64_t v11;
  int *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::HTMLElement *v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl **v19;

  {
    v16 = this;
    WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::$_0::operator()((uint64_t *)&v19);
    v17 = v19;
    v19 = 0;
    WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map = (uint64_t)v17;
    WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::~HashMap(&v19, v18);
    this = v16;
  }
  if (*(_QWORD *)(*(_QWORD *)this + 32))
    return MEMORY[0x1E0CBF2F8];
  v2 = *(int **)(*(_QWORD *)this + 24);
  if (v2[1] < 3)
    return MEMORY[0x1E0CBF2F8];
  v3 = v2[4];
  v4 = *((_QWORD *)v2 + 1);
  if ((v3 & 4) != 0)
  {
    if (*(_BYTE *)v4 != 111)
      return MEMORY[0x1E0CBF2F8];
    v7 = *(unsigned __int8 *)(v4 + 1);
  }
  else
  {
    if (*(_WORD *)v4 != 111)
      return MEMORY[0x1E0CBF2F8];
    v7 = *(unsigned __int16 *)(v4 + 2);
  }
  v5 = MEMORY[0x1E0CBF2F8];
  if (v7 == 110)
  {
    v8 = *v2;
    *v2 += 2;
    if (WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map)
    {
      v9 = 0;
      for (i = v3 >> 8; ; i = v9 + v11)
      {
        v11 = i & *(_DWORD *)(WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
                            - 8);
        v12 = *(int **)(WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
                      + 16 * v11);
        if (!v12)
          break;
        v13 = v12 != (int *)-1 && v12 == v2;
        if (v13)
          goto LABEL_21;
        ++v9;
      }
      v11 = *(unsigned int *)(WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
                            - 4);
LABEL_21:
      v14 = WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map + 16 * v11;
    }
    else
    {
      v14 = 0;
    }
    if (v8)
      *v2 = v8;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
    v15 = WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map;
    if (WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map)
      v15 = WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
          + 16
          * *(unsigned int *)(WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
                            - 4);
    v13 = v14 == v15;
    v5 = MEMORY[0x1E0CBF2F8];
    if (!v13)
      return v14 + 8;
  }
  return v5;
}

WTF::StringImpl *WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::$_0::operator()(uint64_t *a1)
{
  WTF::StringImpl *v2;
  uint64_t **v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int i;
  unsigned int v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;

  *a1 = 0;
  v2 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E33BC558;
  *((_QWORD *)v2 + 1) = a1;
  v22 = v2;
  WebCore::JSHTMLElement::forEachEventHandlerContentAttribute((WebCore *)&v22);
  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v2 + 8))(v2);
  v3 = (uint64_t **)&WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::$_0::operator() const(void)::table;
  do
  {
    v4 = **v3;
    WTF::AtomStringImpl::add(*(WTF::AtomStringImpl **)(v4 + 24), (WTF::StringImpl *)2);
    v6 = v22;
    v7 = *a1;
    if (*a1
      || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(a1, 0), (v7 = *a1) != 0))
    {
      v8 = *(_DWORD *)(v7 - 8);
    }
    else
    {
      v8 = 0;
    }
    v9 = 0;
    v10 = *(WTF::StringImpl **)(v4 + 24);
    v11 = *((_DWORD *)v10 + 4) >> 8;
    for (i = 1; ; ++i)
    {
      v13 = v11 & v8;
      v14 = (WTF::StringImpl **)(v7 + 16 * v13);
      result = *v14;
      if (!*v14)
        break;
      if (result != (WTF::StringImpl *)-1)
      {
        v14 = v9;
        if (result == v10)
        {
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v5);
            else
              *(_DWORD *)v6 -= 2;
          }
          goto LABEL_21;
        }
      }
      v11 = i + v13;
      v9 = v14;
    }
    if (v9)
    {
      *v9 = 0;
      v9[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v10 = *(WTF::StringImpl **)(v4 + 24);
      v14 = v9;
      if (!v10)
        goto LABEL_12;
LABEL_11:
      *(_DWORD *)v10 += 2;
      goto LABEL_12;
    }
    if (v10)
      goto LABEL_11;
LABEL_12:
    *v14 = v10;
    result = v14[1];
    v14[1] = v6;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
    v16 = *a1;
    if (*a1)
      v17 = *(_DWORD *)(v16 - 12) + 1;
    else
      v17 = 1;
    *(_DWORD *)(v16 - 12) = v17;
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12);
    else
      v19 = 0;
    v20 = (*(_DWORD *)(v18 - 16) + v19);
    v21 = *(unsigned int *)(v18 - 4);
    if (v21 > 0x400)
    {
      if (v21 > 2 * v20)
        goto LABEL_21;
    }
    else if (3 * v21 > 4 * v20)
    {
      goto LABEL_21;
    }
    result = (WTF::StringImpl *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(a1, v14);
LABEL_21:
    ++v3;
  }
  return result;
}

uint64_t WebCore::HTMLElement::editabilityFromContentEditableAttr(uint64_t a1, char a2)
{
  __int16 v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  __int16 v25;
  __int16 v26;

  if ((a2 & 1) != 0)
    return 2;
  v2 = *(_WORD *)(a1 + 28);
  v3 = a1;
  if ((v2 & 8) != 0 || (v3 = *(_QWORD *)(a1 + 32)) != 0 && (v2 = *(_WORD *)(v3 + 28), (v2 & 8) != 0))
  {
    if ((v2 & 0x10) == 0)
    {
      do
      {
        v3 = *(_QWORD *)(v3 + 32);
        if (!v3)
          goto LABEL_63;
        v4 = *(_WORD *)(v3 + 28);
        if ((v4 & 8) == 0)
          goto LABEL_63;
      }
      while ((v4 & 0x10) == 0);
    }
LABEL_7:
    v5 = *(_QWORD *)(v3 + 104);
    if (v5
      && ((v6 = *(unsigned int *)(v5 + 4), (v6 & 1) != 0)
        ? (v7 = *(_QWORD *)(v5 + 40), v8 = *(unsigned int *)(v5 + 52))
        : (v7 = v5 + 32, v8 = v6 >> 5),
          v8))
    {
      v9 = (uint64_t *)(v7 + 8);
      while (1)
      {
        v10 = *(v9 - 1);
        if (v10 == WebCore::HTMLNames::contenteditableAttr
          || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::contenteditableAttr + 24)
          && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::contenteditableAttr + 32))
        {
          break;
        }
        v9 += 2;
        if (!--v8)
          goto LABEL_15;
      }
    }
    else
    {
LABEL_15:
      v9 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    }
    v11 = *v9;
    if (!v11)
      goto LABEL_17;
    v13 = *(_DWORD *)(v11 + 4);
    if (v13 > 4)
    {
      if (v13 == 5)
      {
        v17 = *(_QWORD *)(v11 + 8);
        if ((*(_BYTE *)(v11 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v17 & 0xDF) != 0x46
            || (*(_BYTE *)(v17 + 1) & 0xDF) != 0x41
            || (*(_BYTE *)(v17 + 2) & 0xDF) != 0x4C
            || (*(_BYTE *)(v17 + 3) & 0xDF) != 0x53)
          {
            goto LABEL_17;
          }
          v18 = *(unsigned __int8 *)(v17 + 4);
        }
        else
        {
          if ((*(_WORD *)v17 & 0xFFDF) != 0x46
            || (*(_WORD *)(v17 + 2) & 0xFFDF) != 0x41
            || (*(_WORD *)(v17 + 4) & 0xFFDF) != 0x4C
            || (*(_WORD *)(v17 + 6) & 0xFFDF) != 0x53)
          {
            goto LABEL_17;
          }
          v18 = *(unsigned __int16 *)(v17 + 8);
        }
        if ((v18 & 0xFFFFFFDF) != 0x45)
          goto LABEL_17;
        return 0;
      }
      else
      {
        if (v13 != 14)
          goto LABEL_17;
        v19 = *(_QWORD *)(v11 + 8);
        if ((*(_BYTE *)(v11 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v19 & 0xDF) != 0x50
            || (*(_BYTE *)(v19 + 1) & 0xDF) != 0x4C
            || (*(_BYTE *)(v19 + 2) & 0xDF) != 0x41
            || (*(_BYTE *)(v19 + 3) & 0xDF) != 0x49
            || (*(_BYTE *)(v19 + 4) & 0xDF) != 0x4E
            || (*(_BYTE *)(v19 + 5) & 0xDF) != 0x54
            || (*(_BYTE *)(v19 + 6) & 0xDF) != 0x45
            || (*(_BYTE *)(v19 + 7) & 0xDF) != 0x58
            || (*(_BYTE *)(v19 + 8) & 0xDF) != 0x54
            || (*(_BYTE *)(v19 + 9) & 0xDF) != 0xD
            || (*(_BYTE *)(v19 + 10) & 0xDF) != 0x4F
            || (*(_BYTE *)(v19 + 11) & 0xDF) != 0x4E
            || (*(_BYTE *)(v19 + 12) & 0xDF) != 0x4C)
          {
            goto LABEL_17;
          }
          v20 = *(unsigned __int8 *)(v19 + 13);
        }
        else
        {
          if ((*(_WORD *)v19 & 0xFFDF) != 0x50
            || (*(_WORD *)(v19 + 2) & 0xFFDF) != 0x4C
            || (*(_WORD *)(v19 + 4) & 0xFFDF) != 0x41
            || (*(_WORD *)(v19 + 6) & 0xFFDF) != 0x49
            || (*(_WORD *)(v19 + 8) & 0xFFDF) != 0x4E
            || (*(_WORD *)(v19 + 10) & 0xFFDF) != 0x54
            || (*(_WORD *)(v19 + 12) & 0xFFDF) != 0x45
            || (*(_WORD *)(v19 + 14) & 0xFFDF) != 0x58
            || (*(_WORD *)(v19 + 16) & 0xFFDF) != 0x54
            || (*(_WORD *)(v19 + 18) & 0xFFDF) != 0xD
            || (*(_WORD *)(v19 + 20) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v19 + 22) & 0xFFDF) != 0x4E
            || (*(_WORD *)(v19 + 24) & 0xFFDF) != 0x4C)
          {
            goto LABEL_17;
          }
          v20 = *(unsigned __int16 *)(v19 + 26);
        }
        if ((v20 & 0xFFFFFFDF) != 0x59)
          goto LABEL_17;
        return 1;
      }
    }
    if (v13 == 4)
    {
      v14 = *(_QWORD *)(v11 + 8);
      if ((*(_BYTE *)(v11 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v14 & 0xDF) != 0x54
          || (*(_BYTE *)(v14 + 1) & 0xDF) != 0x52
          || (*(_BYTE *)(v14 + 2) & 0xDF) != 0x55)
        {
          goto LABEL_17;
        }
        v15 = *(unsigned __int8 *)(v14 + 3);
      }
      else
      {
        if ((*(_WORD *)v14 & 0xFFDF) != 0x54
          || (*(_WORD *)(v14 + 2) & 0xFFDF) != 0x52
          || (*(_WORD *)(v14 + 4) & 0xFFDF) != 0x55)
        {
LABEL_17:
          while (1)
          {
            v3 = *(_QWORD *)(v3 + 32);
            if (!v3)
              goto LABEL_63;
            v12 = *(_WORD *)(v3 + 28);
            if ((v12 & 8) == 0)
              goto LABEL_63;
            if ((v12 & 0x10) != 0)
              goto LABEL_7;
          }
        }
        v15 = *(unsigned __int16 *)(v14 + 6);
      }
      if ((v15 & 0xFFFFFFDF) != 0x45)
        goto LABEL_17;
    }
    else if (v13)
    {
      goto LABEL_17;
    }
    return 2;
  }
LABEL_63:
  v21 = *(_QWORD **)(a1 + 40);
  if ((*(_WORD *)(*v21 + 28) & 0x80) != 0)
    v22 = *v21;
  else
    v22 = 0;
  if (v22 && (v23 = *(_DWORD *)(v22 + 24), *(_DWORD *)(v22 + 24) = v23 + 2, !*(_BYTE *)(v22 + 193)))
  {
    v16 = 0;
  }
  else
  {
    if (*(_BYTE *)(v21[1] + 3361) && (*(_QWORD *)(a1 + 16) & 0x18000000000000) == 0x8000000000000)
      v16 = 2;
    else
      v16 = 0;
    if (!v22)
      return v16;
    v23 = *(_DWORD *)(v22 + 24) - 2;
  }
  if (v23)
  {
    *(_DWORD *)(v22 + 24) = v23;
  }
  else
  {
    v25 = *(_WORD *)(v22 + 30);
    if ((v25 & 0x400) == 0)
    {
      v26 = *(_WORD *)(v22 + 28);
      if ((v26 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v22);
      }
      else
      {
        if ((v26 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v22 + 160) + 16))(*(_QWORD *)(v22 + 160));
          v25 = *(_WORD *)(v22 + 30);
        }
        *(_WORD *)(v22 + 30) = v25 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 72))(v22);
      }
    }
  }
  return v16;
}

uint64_t WebCore::lineageOfType<WebCore::HTMLElement>(uint64_t result)
{
  __int16 v1;

  v1 = *(_WORD *)(result + 28);
  while ((v1 & 0x10) == 0)
  {
    result = *(_QWORD *)(result + 32);
    if (!result)
      break;
    v1 = *(_WORD *)(result + 28);
    if ((v1 & 8) == 0)
      return 0;
  }
  return result;
}

uint64_t WebCore::contentEditableType(WebCore *this, const WebCore::HTMLElement *a2)
{
  unsigned int v2;
  char *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  if (this
    && ((v2 = *((_DWORD *)this + 1), (v2 & 1) != 0)
      ? (v3 = (char *)*((_QWORD *)this + 5), LODWORD(v4) = *((_DWORD *)this + 13))
      : (v3 = (char *)this + 32, LODWORD(v4) = v2 >> 5),
        (_DWORD)v4))
  {
    v4 = v4;
    v5 = (uint64_t *)(v3 + 8);
    while (1)
    {
      v6 = *(v5 - 1);
      if (v6 == WebCore::HTMLNames::contenteditableAttr
        || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::contenteditableAttr + 24)
        && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::contenteditableAttr + 32))
      {
        break;
      }
      v5 += 2;
      if (!--v4)
      {
        v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v7 = *v5;
  if (!*v5)
    return 0;
  v9 = *(_DWORD *)(v7 + 4);
  if (v9 <= 4)
  {
    if (v9 == 4)
    {
      v12 = *(_QWORD *)(v7 + 8);
      if ((*(_BYTE *)(v7 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v12 & 0xDF) != 0x54
          || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x52
          || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x55)
        {
          return 0;
        }
        v13 = *(unsigned __int8 *)(v12 + 3);
      }
      else
      {
        if ((*(_WORD *)v12 & 0xFFDF) != 0x54
          || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x52
          || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x55)
        {
          return 0;
        }
        v13 = *(unsigned __int16 *)(v12 + 6);
      }
      if ((v13 & 0xFFFFFFDF) != 0x45)
        return 0;
    }
    else if (v9)
    {
      return 0;
    }
    return 1;
  }
  else
  {
    if (v9 != 5)
    {
      if (v9 == 14)
      {
        v10 = *(_QWORD *)(v7 + 8);
        if ((*(_BYTE *)(v7 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v10 & 0xDF) != 0x50
            || (*(_BYTE *)(v10 + 1) & 0xDF) != 0x4C
            || (*(_BYTE *)(v10 + 2) & 0xDF) != 0x41
            || (*(_BYTE *)(v10 + 3) & 0xDF) != 0x49
            || (*(_BYTE *)(v10 + 4) & 0xDF) != 0x4E
            || (*(_BYTE *)(v10 + 5) & 0xDF) != 0x54
            || (*(_BYTE *)(v10 + 6) & 0xDF) != 0x45
            || (*(_BYTE *)(v10 + 7) & 0xDF) != 0x58
            || (*(_BYTE *)(v10 + 8) & 0xDF) != 0x54
            || (*(_BYTE *)(v10 + 9) & 0xDF) != 0xD
            || (*(_BYTE *)(v10 + 10) & 0xDF) != 0x4F
            || (*(_BYTE *)(v10 + 11) & 0xDF) != 0x4E
            || (*(_BYTE *)(v10 + 12) & 0xDF) != 0x4C)
          {
            return 0;
          }
          v11 = *(unsigned __int8 *)(v10 + 13);
        }
        else
        {
          if ((*(_WORD *)v10 & 0xFFDF) != 0x50
            || (*(_WORD *)(v10 + 2) & 0xFFDF) != 0x4C
            || (*(_WORD *)(v10 + 4) & 0xFFDF) != 0x41
            || (*(_WORD *)(v10 + 6) & 0xFFDF) != 0x49
            || (*(_WORD *)(v10 + 8) & 0xFFDF) != 0x4E
            || (*(_WORD *)(v10 + 10) & 0xFFDF) != 0x54
            || (*(_WORD *)(v10 + 12) & 0xFFDF) != 0x45
            || (*(_WORD *)(v10 + 14) & 0xFFDF) != 0x58
            || (*(_WORD *)(v10 + 16) & 0xFFDF) != 0x54
            || (*(_WORD *)(v10 + 18) & 0xFFDF) != 0xD
            || (*(_WORD *)(v10 + 20) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v10 + 22) & 0xFFDF) != 0x4E
            || (*(_WORD *)(v10 + 24) & 0xFFDF) != 0x4C)
          {
            return 0;
          }
          v11 = *(unsigned __int16 *)(v10 + 26);
        }
        if ((v11 & 0xFFFFFFDF) == 0x59)
          return 3;
      }
      return 0;
    }
    v14 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v14 & 0xDF) != 0x46
        || (*(_BYTE *)(v14 + 1) & 0xDF) != 0x41
        || (*(_BYTE *)(v14 + 2) & 0xDF) != 0x4C
        || (*(_BYTE *)(v14 + 3) & 0xDF) != 0x53)
      {
        return 0;
      }
      v15 = *(unsigned __int8 *)(v14 + 4);
    }
    else
    {
      if ((*(_WORD *)v14 & 0xFFDF) != 0x46
        || (*(_WORD *)(v14 + 2) & 0xFFDF) != 0x41
        || (*(_WORD *)(v14 + 4) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v14 + 6) & 0xFFDF) != 0x53)
      {
        return 0;
      }
      v15 = *(unsigned __int16 *)(v14 + 8);
    }
    if ((v15 & 0xFFFFFFDF) != 0x45)
      return 0;
    return 2;
  }
}

uint64_t WebCore::ElementAncestorIterator<WebCore::HTMLElement const>::operator++(uint64_t result)
{
  uint64_t v1;
  __int16 v2;

  v1 = *(_QWORD *)(result + 8);
  do
  {
    v1 = *(_QWORD *)(v1 + 32);
    if (!v1)
      break;
    v2 = *(_WORD *)(v1 + 28);
    if ((v2 & 8) == 0)
    {
      v1 = 0;
      break;
    }
  }
  while ((v2 & 0x10) == 0);
  *(_QWORD *)(result + 8) = v1;
  return result;
}

BOOL WebCore::HTMLElement::matchesReadWritePseudoClass(WebCore::HTMLElement *this)
{
  return WebCore::HTMLElement::editabilityFromContentEditableAttr((uint64_t)this, 0) != 0;
}

unsigned __int8 *WebCore::HTMLElement::dirAttributeChanged(WebCore::HTMLElement *this, const WTF::AtomString *a2, uint64_t a3, WebCore::Node *a4, WTF::StringBuilder *a5, __n128 a6)
{
  uint64_t *v8;
  uint64_t v9;
  __int16 v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  WebCore::HTMLElement *v15;
  unsigned __int8 *result;
  unint64_t v17;
  void *v18;
  WebCore::Element *v19;
  WebCore::Node *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  uint64_t v30;
  int v31;
  int v32;
  WebCore::HTMLElement *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;

  if (this && (*((_WORD *)this + 14) & 0x80) != 0)
  {
    v35 = *((_QWORD *)this + 25);
    if (!v35)
      goto LABEL_68;
    v8 = (uint64_t *)(v35 + 8);
  }
  else
  {
    v8 = (uint64_t *)((char *)this + 32);
  }
  v9 = *v8;
  if (!*v8)
    goto LABEL_69;
  v10 = *(_WORD *)(v9 + 28);
  if ((v10 & 0x80) == 0)
  {
    if ((v10 & 8) != 0)
    {
LABEL_7:
      v11 = 0;
      *(_DWORD *)(v9 + 24) += 2;
      goto LABEL_8;
    }
    goto LABEL_68;
  }
  v36 = *(_QWORD *)(v9 + 200);
  if (!v36)
  {
LABEL_68:
    v9 = 0;
    goto LABEL_69;
  }
  v9 = *(_QWORD *)(v36 + 8);
  if (v9)
    goto LABEL_7;
LABEL_69:
  v11 = 1;
LABEL_8:
  v12 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v13 = *(_DWORD *)(v12 + 24);
  *(_DWORD *)(v12 + 24) = v13 + 2;
  *(_BYTE *)(v12 + 3446) = 1;
  if (v13)
  {
    *(_DWORD *)(v12 + 24) = v13;
  }
  else
  {
    v26 = *(_WORD *)(v12 + 30);
    if ((v26 & 0x400) == 0)
    {
      v27 = *(_WORD *)(v12 + 28);
      if ((v27 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v12, a2);
      }
      else
      {
        if ((v27 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 160) + 16))(*(_QWORD *)(v12 + 160));
          v26 = *(_WORD *)(v12 + 30);
        }
        *(_WORD *)(v12 + 30) = v26 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 72))(v12);
      }
    }
  }
  v14 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_11;
  v23 = *(_DWORD *)(v14 + 4);
  if (v23 == 3)
  {
    v30 = *(_QWORD *)(v14 + 8);
    if ((*(_BYTE *)(v14 + 16) & 4) != 0)
    {
      v31 = *(_BYTE *)v30 & 0xDF;
      if (v31 == 76)
      {
        if ((*(_BYTE *)(v30 + 1) & 0xDF) != 0x54)
          goto LABEL_11;
        v32 = *(unsigned __int8 *)(v30 + 2);
LABEL_60:
        if ((v32 & 0xFFFFFFDF) != 0x52)
          goto LABEL_11;
        if ((*((_WORD *)this + 15) & 4) != 0)
          WebCore::setHasDirAutoFlagRecursively((uint64_t)this, 0, 0, a4);
        v33 = this;
        v34 = 256;
        goto LABEL_64;
      }
      if (v31 != 82 || (*(_BYTE *)(v30 + 1) & 0xDF) != 0x54)
        goto LABEL_11;
      v37 = *(unsigned __int8 *)(v30 + 2);
    }
    else
    {
      v38 = *(_WORD *)v30 & 0xFFDF;
      if (v38 == 76)
      {
        if ((*(_WORD *)(v30 + 2) & 0xFFDF) != 0x54)
          goto LABEL_11;
        v32 = *(unsigned __int16 *)(v30 + 4);
        goto LABEL_60;
      }
      if (v38 != 82 || (*(_WORD *)(v30 + 2) & 0xFFDF) != 0x54)
        goto LABEL_11;
      v37 = *(unsigned __int16 *)(v30 + 4);
    }
    if ((v37 & 0xFFFFFFDF) != 0x4C)
      goto LABEL_11;
    if ((*((_WORD *)this + 15) & 4) != 0)
      WebCore::setHasDirAutoFlagRecursively((uint64_t)this, 0, 0, a4);
    v33 = this;
    v34 = 257;
LABEL_64:
    result = WebCore::HTMLElement::updateEffectiveDirectionality((uint64_t)v33, (void *)v34);
    if ((v11 & 1) != 0)
      return result;
    v21 = 1;
    goto LABEL_27;
  }
  if (v23 != 4)
    goto LABEL_11;
  v24 = *(_QWORD *)(v14 + 8);
  if ((*(_BYTE *)(v14 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v24 & 0xDF) != 0x41 || (*(_BYTE *)(v24 + 1) & 0xDF) != 0x55 || (*(_BYTE *)(v24 + 2) & 0xDF) != 0x54)
      goto LABEL_11;
    v25 = *(unsigned __int8 *)(v24 + 3);
  }
  else
  {
    if ((*(_WORD *)v24 & 0xFFDF) != 0x41
      || (*(_WORD *)(v24 + 2) & 0xFFDF) != 0x55
      || (*(_WORD *)(v24 + 4) & 0xFFDF) != 0x54)
    {
      goto LABEL_11;
    }
    v25 = *(unsigned __int16 *)(v24 + 6);
  }
  if ((v25 & 0xFFFFFFDF) == 0x4F)
  {
    *((_QWORD *)this + 9) |= 0x4000000000000000uLL;
    result = (unsigned __int8 *)WebCore::HTMLElement::updateEffectiveDirectionalityOfDirAuto(this, a6, (uint64_t)a2, a3, (uint64_t)a4, a5);
    if ((v11 & 1) != 0)
      return result;
    v22 = 0;
    v21 = 1;
    goto LABEL_28;
  }
LABEL_11:
  if ((*((_WORD *)this + 15) & 4) == 0)
    goto LABEL_12;
  if ((v11 & 1) != 0 || (*(_WORD *)(v9 + 30) & 4) == 0)
  {
    if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::bdiTag + 24))
      WebCore::setHasDirAutoFlagRecursively((uint64_t)this, 0, 0, a4);
LABEL_12:
    if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      v15 = this;
    else
      v15 = 0;
    if ((v11 & 1) != 0)
      return WebCore::HTMLElement::updateEffectiveDirectionality((uint64_t)this, 0);
    goto LABEL_24;
  }
  if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    v15 = this;
  else
    v15 = 0;
LABEL_24:
  v17 = *(_QWORD *)(v9 + 72);
  if ((v17 & 0x4000000000000000) == 0 || v15 && *(_DWORD *)(*((_QWORD *)v15 + 30) + 12) == 0x20000)
    v18 = 0;
  else
    v18 = (void *)((v17 >> 63) | 0x100);
  result = WebCore::HTMLElement::updateEffectiveDirectionality((uint64_t)this, v18);
  v21 = 0;
LABEL_27:
  v22 = 1;
LABEL_28:
  if ((*(_WORD *)(v9 + 28) & 0x10) != 0 && (*(_WORD *)(v9 + 30) & 4) != 0)
  {
    if ((v21 & v22) == 1)
      WebCore::setHasDirAutoFlagRecursively((uint64_t)this, 0, 0, v20);
    result = (unsigned __int8 *)WebCore::HTMLElement::adjustDirectionalityIfNeededAfterChildAttributeChanged((unsigned int *)v9, v19);
  }
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    v28 = *(_WORD *)(v9 + 30);
    if ((v28 & 0x400) == 0)
    {
      v29 = *(_WORD *)(v9 + 28);
      if ((v29 & 0xF000) == 0x9000)
      {
        return (unsigned __int8 *)WebCore::Document::removedLastRef((WebCore::Document *)v9, v19);
      }
      else
      {
        if ((v29 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
          v28 = *(_WORD *)(v9 + 30);
        }
        *(_WORD *)(v9 + 30) = v28 | 0x400;
        return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
      }
    }
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLElement::canonicalInputMode(WebCore::HTMLElement *this, const WTF::AtomString *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WTF **v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (WTF **)MEMORY[0x1E0CBF2F8];
    return WebCore::inputModeForAttributeValue(v7, a2, a3);
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (WTF **)(v5 + 8);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 1);
    if (v8 == WebCore::HTMLNames::inputmodeAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::inputmodeAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::inputmodeAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (WTF **)MEMORY[0x1E0CBF2F8];
      return WebCore::inputModeForAttributeValue(v7, a2, a3);
    }
  }
  return WebCore::inputModeForAttributeValue(v7, a2, a3);
}

uint64_t WebCore::HTMLElement::popoverAttributeChanged(WebCore::HTMLElement *this, WTF **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  WebCore::PopoverData *v20;
  WTF *v21;
  void *v22;
  int v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  const WTF::StringImpl *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  WTF **v32;
  uint64_t v33;
  const WTF::StringImpl *v34;
  WebCore::PopoverData *v35;
  WTF *v36;
  void *v37;
  _BYTE v38[8];
  WTF::StringImpl *v39;
  char v40;
  uint64_t v41;
  WebCore::HTMLElement *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;

  result = (uint64_t)*a2;
  if (*a2)
  {
    result = WTF::equal((WTF *)result, (const WTF::StringImpl *)*MEMORY[0x1E0CBF738], a3);
    v7 = 1;
    if ((result & 1) == 0)
    {
      result = WTF::equalIgnoringASCIICase(*a2, (const WTF::StringImpl *)WebCore::autoAtomData, v6);
      if ((_DWORD)result)
        v7 = 1;
      else
        v7 = 2;
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    v9 = *(unsigned __int8 **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE8);
    if (v9)
      LODWORD(v9) = *v9;
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if ((_DWORD)v9 != v7)
  {
    if ((*((_BYTE *)this + 22) & 8) == 0)
      goto LABEL_29;
    v10 = (uint64_t *)*((_QWORD *)this + 5);
    v11 = v10[1];
    if (!*(_QWORD *)(v11 + 1944) || *(_BYTE *)(v11 + 3405))
      goto LABEL_29;
    if ((*((_BYTE *)this + 70) & 4) != 0)
    {
      v15 = *v10;
      v16 = (*(_WORD *)(v15 + 28) & 0x80) == 0 || v15 == 0;
      v17 = v15 + 216;
      if (v16)
        v17 = v11 + 1328;
      if (!*(_BYTE *)(*(_QWORD *)v17 + 236))
        goto LABEL_29;
    }
    v12 = *(_QWORD *)(v11 + 1272);
    if (v12 && (*(_BYTE *)(v12 + 70) & 4) != 0)
    {
LABEL_29:
      LOBYTE(v41) = 0;
      v43 = 0;
      v44 = 0;
      v42 = this;
    }
    else
    {
      if (*(_BYTE *)(v11 + 3362)
        || (v13 = *(unsigned __int8 *)(v11 + 3390), !*(_BYTE *)(v11 + 3390))
        && (*(_BYTE *)(v11 + 70) & 8) == 0
        && !*(_QWORD *)(v11 + 1560)
        && (v14 = *(_QWORD *)(v11 + 1328), !*(_BYTE *)(v14 + 233))
        && !*(_BYTE *)(v14 + 234))
      {
        LOBYTE(v41) = 1;
        v43 = 0;
        v44 = 0;
        v42 = this;
LABEL_52:
        WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v41, (WTF::StringImpl *)0x40, 0, 0);
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v42, &v43);
        v8 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
        goto LABEL_30;
      }
      v23 = *(unsigned __int8 *)(v11 + 3391);
      if (v13)
        v24 = v23 == 0;
      else
        v24 = 0;
      v25 = !v24;
      LOBYTE(v41) = v25;
      v43 = 0;
      v44 = 0;
      v42 = this;
      if (!v24)
        goto LABEL_52;
    }
LABEL_30:
    if (v8 && (v26 = *(_QWORD *)(v8 + 232)) != 0 && *(_BYTE *)(v26 + 1))
    {
      WebCore::HTMLElement::hidePopoverInternal((uint64_t)this, 1, 1, (uint64_t)v38);
      if (v40 && v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v39 -= 2;
      }
      v28 = *((_QWORD *)this + 13);
      if (v28
        && ((v29 = *(_DWORD *)(v28 + 4), (v29 & 1) != 0)
          ? (v30 = *(_QWORD *)(v28 + 40), LODWORD(v31) = *(_DWORD *)(v28 + 52))
          : (v30 = v28 + 32, LODWORD(v31) = v29 >> 5),
            (_DWORD)v31))
      {
        v31 = v31;
        v32 = (WTF **)(v30 + 8);
        while (1)
        {
          v33 = (uint64_t)*(v32 - 1);
          if (v33 == WebCore::HTMLNames::popoverAttr
            || *(_QWORD *)(v33 + 24) == *(_QWORD *)(WebCore::HTMLNames::popoverAttr + 24)
            && *(_QWORD *)(v33 + 32) == *(_QWORD *)(WebCore::HTMLNames::popoverAttr + 32))
          {
            break;
          }
          v32 += 2;
          if (!--v31)
          {
            v32 = (WTF **)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v32 = (WTF **)MEMORY[0x1E0CBF2F8];
      }
      if (*v32)
      {
        v7 = 1;
        if ((WTF::equal(*v32, (const WTF::StringImpl *)*MEMORY[0x1E0CBF738], v27) & 1) == 0)
        {
          if (WTF::equalIgnoringASCIICase(*v32, (const WTF::StringImpl *)WebCore::autoAtomData, v34))
            v7 = 1;
          else
            v7 = 2;
        }
        goto LABEL_32;
      }
      v8 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
    }
    else if (v7)
    {
LABEL_32:
      v18 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
      if (!v18)
      {
        WebCore::Node::materializeRareData(this);
        v18 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
      }
      v19 = *(_OWORD **)(v18 + 232);
      if (!v19)
      {
        v19 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
        *v19 = 0u;
        v19[1] = 0u;
        v20 = *(WebCore::PopoverData **)(v18 + 232);
        *(_QWORD *)(v18 + 232) = v19;
        if (v20)
        {
          WebCore::PopoverData::~PopoverData(v20, a2);
          WTF::fastFree(v21, v22);
          v19 = *(_OWORD **)(v18 + 232);
        }
      }
      *(_BYTE *)v19 = v7;
LABEL_38:
      if ((_BYTE)v41)
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v42, &v44);
      if (v44)
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v44, a2);
      result = (uint64_t)v43;
      if (v43)
        return WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v43, a2);
      return result;
    }
    if (v8)
    {
      v35 = *(WebCore::PopoverData **)(v8 + 232);
      *(_QWORD *)(v8 + 232) = 0;
      if (v35)
      {
        WebCore::PopoverData::~PopoverData(v35, a2);
        WTF::fastFree(v36, v37);
      }
    }
    goto LABEL_38;
  }
  return result;
}

BOOL WebCore::elementAffectsDirectionality(WebCore *this, const WebCore::HTMLElement *a2)
{
  unsigned int v2;
  char *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;

  if (*(WebCore **)(WebCore::HTMLNames::bdiTag + 24) == this)
    return 1;
  if (!a2)
    goto LABEL_13;
  v2 = *((_DWORD *)a2 + 1);
  if ((v2 & 1) == 0)
  {
    v3 = (char *)a2 + 32;
    LODWORD(v4) = v2 >> 5;
    if (v2 >> 5)
      goto LABEL_5;
LABEL_13:
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_10;
  }
  v3 = (char *)*((_QWORD *)a2 + 5);
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  if (!(_DWORD)v4)
    goto LABEL_13;
LABEL_5:
  v4 = v4;
  v5 = (uint64_t *)(v3 + 8);
  while (1)
  {
    v6 = *(v5 - 1);
    if (v6 == WebCore::HTMLNames::dirAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 32))
    {
      break;
    }
    v5 += 2;
    if (!--v4)
    {
      v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_10:
  v7 = *v5;
  if (!*v5)
    return 0;
  v9 = *(_DWORD *)(v7 + 4);
  if (v9 == 3)
  {
    v12 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      v13 = *(_BYTE *)v12 & 0xDF;
      if (v13 == 76)
      {
        if ((*(_BYTE *)(v12 + 1) & 0xDF) != 0x54)
          return 0;
        v14 = *(unsigned __int8 *)(v12 + 2);
        return (v14 & 0xFFFFFFDF) == 0x52;
      }
      if (v13 != 82 || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x54)
        return 0;
      v15 = *(unsigned __int8 *)(v12 + 2);
    }
    else
    {
      v16 = *(_WORD *)v12 & 0xFFDF;
      if (v16 == 76)
      {
        if ((*(_WORD *)(v12 + 2) & 0xFFDF) != 0x54)
          return 0;
        v14 = *(unsigned __int16 *)(v12 + 4);
        return (v14 & 0xFFFFFFDF) == 0x52;
      }
      if (v16 != 82 || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x54)
        return 0;
      v15 = *(unsigned __int16 *)(v12 + 4);
    }
    return (v15 & 0xFFFFFFDF) == 0x4C;
  }
  if (v9 != 4)
    return 0;
  v10 = *(_QWORD *)(v7 + 8);
  if ((*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v10 & 0xDF) != 0x41 || (*(_BYTE *)(v10 + 1) & 0xDF) != 0x55 || (*(_BYTE *)(v10 + 2) & 0xDF) != 0x54)
      return 0;
    v11 = *(unsigned __int8 *)(v10 + 3);
  }
  else
  {
    if ((*(_WORD *)v10 & 0xFFDF) != 0x41
      || (*(_WORD *)(v10 + 2) & 0xFFDF) != 0x55
      || (*(_WORD *)(v10 + 4) & 0xFFDF) != 0x54)
    {
      return 0;
    }
    v11 = *(unsigned __int16 *)(v10 + 6);
  }
  return (v11 & 0xFFFFFFDF) == 0x4F;
}

WebCore *WebCore::HTMLElement::hidePopoverInternal@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v4;
  WebCore *result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  int v47;
  BOOL v48;
  char v49;
  _BYTE *v50;
  int v51;
  uint64_t v52;
  void *v53;
  int v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  __int16 v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  __int16 v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  WebCore::AXObjectCache *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t v89[2];
  int v90;
  char v91[8];
  uint64_t v92;
  int v93;
  char v94;

  result = (WebCore *)WebCore::checkPopoverValidity(v91, a1, 1, 0);
  if (v93)
  {
    if (v93 == 1)
    {
      v11 = v92;
      v92 = 0;
      *(_BYTE *)a4 = v91[0];
      *(_QWORD *)(a4 + 8) = v11;
      *(_BYTE *)(a4 + 16) = 1;
      goto LABEL_157;
    }
    goto LABEL_180;
  }
  if (!v91[0])
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_157;
  }
  *(_DWORD *)(a1 + 24) += 2;
  v12 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL;
  if (v12)
  {
    v50 = *(_BYTE **)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0xE8);
    v51 = v50[24];
    v4 = v50[24] == 0;
    v50[24] = 1;
    if (v51)
      a3 = 0;
    else
      a3 = a3;
    if (*v50 == 1)
    {
      v52 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      *(_DWORD *)(v52 + 24) += 2;
      WebCore::Document::hideAllPopoversUntil((WTF::StringImpl *)v52, (WTF::StringImpl *)a1, a2, a3);
      if (*(_DWORD *)(v52 + 24) == 2)
      {
        v56 = *(_WORD *)(v52 + 30);
        if ((v56 & 0x400) == 0)
        {
          v57 = *(_WORD *)(v52 + 28);
          if ((v57 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v52, v53);
          }
          else
          {
            if ((v57 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v52 + 160) + 16))(*(_QWORD *)(v52 + 160));
              v56 = *(_WORD *)(v52 + 30);
            }
            *(_WORD *)(v52 + 30) = v56 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v52 + 72))(v52);
          }
        }
      }
      else
      {
        *(_DWORD *)(v52 + 24) -= 2;
      }
      WebCore::checkPopoverValidity((char *)v89, a1, 1, 0);
      LOBYTE(v85) = 0;
      LODWORD(v87) = -1;
      v54 = v90;
      if (v90 != -1)
      {
        ((void (*)(char *, WTF::StringImpl **, uint64_t *))off_1E33BC580[v90])(&v94, &v85, v89);
        LODWORD(v87) = v54;
      }
      result = (WebCore *)std::__variant_detail::__impl<BOOL,WebCore::Exception>::__swap[abi:sn180100]((uint64_t)&v85, (uint64_t)v91);
      if ((_DWORD)v87 != -1)
        result = (WebCore *)off_1E33BC570[v87](&v94, (uint64_t)&v85);
      if (v90 != -1)
        result = (WebCore *)off_1E33BC570[v90]((char *)&v85, (uint64_t)v89);
      if (v93)
      {
        if (v93 == 1)
        {
          v55 = v92;
          v92 = 0;
          *(_BYTE *)a4 = v91[0];
          *(_QWORD *)(a4 + 8) = v55;
          *(_BYTE *)(a4 + 16) = 1;
          if (!v51)
            goto LABEL_154;
          goto LABEL_155;
        }
        goto LABEL_180;
      }
      if (!v91[0])
      {
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        if (!v51)
          goto LABEL_154;
        goto LABEL_155;
      }
      v12 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL;
    }
  }
  else
  {
    v13 = MEMORY[0x18];
    MEMORY[0x18] = 1;
    v4 = v13 == 0;
    if (v13)
      a3 = 0;
    else
      a3 = a3;
  }
  v14 = *(_QWORD *)(v12 + 232);
  v15 = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v14 + 16) = 0;
  if (!v15)
    goto LABEL_12;
  do
  {
    v16 = __ldaxr((unsigned int *)v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)v15));
  if (v17)
  {
LABEL_12:
    if (!(_DWORD)a3)
      goto LABEL_31;
LABEL_13:
    v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v18 || (v19 = *(_QWORD *)(v18 + 96)) == 0)
      v19 = WebCore::threadGlobalDataSlow(result);
    v20 = *(_QWORD *)(v19 + 40);
    if (!v20)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v19);
      v20 = *(_QWORD *)(v19 + 40);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21 = v85;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v22 = v85;
    v23 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v23);
    *(_QWORD *)(v23 + 8) = 0;
    *(_DWORD *)(v23 + 16) = 1;
    *(_DWORD *)(v23 + 20) = *(_DWORD *)(v23 + 20) & 0xFFC00000 | 0x2F0200 | (*(_QWORD *)(v20 + 272) != 0);
    v25 = *(_DWORD **)(v20 + 272);
    if (v25)
      *v25 += 2;
    *(_QWORD *)(v23 + 24) = v25;
    *(_QWORD *)(v23 + 32) = 0;
    *(_QWORD *)(v23 + 40) = 0;
    *(_QWORD *)(v23 + 48) = 0;
    *(_QWORD *)(v23 + 56) = v24;
    *(_QWORD *)(v23 + 64) = 0;
    *(_QWORD *)v23 = off_1E33A8648;
    if (v21)
      *(_DWORD *)v21 += 2;
    *(_QWORD *)(v23 + 72) = v21;
    if (v22)
      *(_DWORD *)v22 += 2;
    *(_QWORD *)(v23 + 80) = v22;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v23);
    if (*(_DWORD *)(v23 + 16) == 1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      if (!v22)
        goto LABEL_28;
    }
    else
    {
      --*(_DWORD *)(v23 + 16);
      if (!v22)
        goto LABEL_28;
    }
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v26);
    else
      *(_DWORD *)v22 -= 2;
LABEL_28:
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v26);
      else
        *(_DWORD *)v21 -= 2;
    }
    goto LABEL_31;
  }
  atomic_store(1u, (unsigned int *)v15);
  v58 = *(unsigned int *)(v15 + 28);
  if ((_DWORD)v58)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v58));
  v59 = *(WTF **)(v15 + 16);
  if (v59)
  {
    *(_QWORD *)(v15 + 16) = 0;
    *(_DWORD *)(v15 + 24) = 0;
    WTF::fastFree(v59, v10);
  }
  result = (WebCore *)WTF::fastFree((WTF *)v15, v10);
  if ((_DWORD)a3)
    goto LABEL_13;
LABEL_31:
  WebCore::checkPopoverValidity((char *)v89, a1, 1, 0);
  LOBYTE(v85) = 0;
  LODWORD(v87) = -1;
  v27 = v90;
  if (v90 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, uint64_t *))off_1E33BC580[v90])(&v94, &v85, v89);
    LODWORD(v87) = v27;
  }
  result = (WebCore *)std::__variant_detail::__impl<BOOL,WebCore::Exception>::__swap[abi:sn180100]((uint64_t)&v85, (uint64_t)v91);
  if ((_DWORD)v87 != -1)
    result = (WebCore *)off_1E33BC570[v87](&v94, (uint64_t)&v85);
  if (v90 != -1)
    result = (WebCore *)off_1E33BC570[v90]((char *)&v85, (uint64_t)v89);
  if (v93)
  {
    if (v93 != 1)
    {
LABEL_180:
      v72 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_181:
      *(_QWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 24) = 0;
      WTF::fastFree(v72, v10);
LABEL_179:
      WTF::fastFree((WTF *)a2, v10);
      goto LABEL_145;
    }
    v28 = v92;
    v92 = 0;
    *(_BYTE *)a4 = v91[0];
    *(_QWORD *)(a4 + 8) = v28;
    *(_BYTE *)(a4 + 16) = 1;
    if (!v4)
      goto LABEL_155;
LABEL_154:
    if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v68 = *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0xE8);
      if (v68)
        *(_BYTE *)(v68 + 24) = 0;
    }
    goto LABEL_155;
  }
  if (!v91[0])
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    if (!v4)
      goto LABEL_155;
    goto LABEL_154;
  }
  WebCore::Element::removeFromTopLayer((WebCore::Element *)a1);
  if ((*(_BYTE *)(a1 + 22) & 8) == 0)
    goto LABEL_64;
  v29 = *(uint64_t **)(a1 + 40);
  v30 = v29[1];
  if (!*(_QWORD *)(v30 + 1944) || *(_BYTE *)(v30 + 3405))
    goto LABEL_64;
  if ((*(_BYTE *)(a1 + 70) & 4) != 0)
  {
    v34 = *v29;
    v35 = (*(_WORD *)(v34 + 28) & 0x80) == 0 || v34 == 0;
    v36 = v34 + 216;
    if (v35)
      v36 = v30 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v36 + 236))
      goto LABEL_64;
  }
  v31 = *(_QWORD *)(v30 + 1272);
  if (v31)
  {
    if ((*(_BYTE *)(v31 + 70) & 4) != 0)
    {
LABEL_64:
      LOBYTE(v85) = 0;
      v87 = 0;
      v88 = 0;
      v86 = a1;
      goto LABEL_65;
    }
  }
  if (*(_BYTE *)(v30 + 3362)
    || (v32 = *(unsigned __int8 *)(v30 + 3390), !*(_BYTE *)(v30 + 3390))
    && (*(_BYTE *)(v30 + 70) & 8) == 0
    && !*(_QWORD *)(v30 + 1560)
    && (v33 = *(_QWORD *)(v30 + 1328), !*(_BYTE *)(v33 + 233))
    && !*(_BYTE *)(v33 + 234))
  {
    LOBYTE(v85) = 1;
    v87 = 0;
    v88 = 0;
    v86 = a1;
LABEL_92:
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v85, (WTF::StringImpl *)0x40, 0, 0);
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v86, (unsigned __int8 **)&v87);
    goto LABEL_65;
  }
  v47 = *(unsigned __int8 *)(v30 + 3391);
  if (v32)
    v48 = v47 == 0;
  else
    v48 = 0;
  v49 = !v48;
  LOBYTE(v85) = v49;
  v87 = 0;
  v88 = 0;
  v86 = a1;
  if (!v48)
    goto LABEL_92;
LABEL_65:
  v37 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL;
  if (v37)
  {
    v38 = *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0xE8);
    *(_BYTE *)(v38 + 1) = 0;
    if (!(_DWORD)a3)
      goto LABEL_79;
    v39 = v38 + 2;
  }
  else
  {
    MEMORY[1] = 0;
    if ((a3 & 1) == 0)
      goto LABEL_79;
    v38 = 0;
    v39 = 2;
  }
  v40 = *(unsigned __int16 *)v39 | (*(unsigned __int8 *)(v39 + 2) << 16);
  if ((_BYTE)v40)
    v41 = 0;
  else
    v41 = v40 >= 0x10000;
  v42 = !v41;
  if (!*(_BYTE *)(v38 + 4))
    *(_BYTE *)(v38 + 4) = 1;
  *(_WORD *)(v38 + 2) = v42;
  v43 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v43 = off_1E33BC600;
  *(_QWORD *)(v43 + 8) = a1;
  *(_BYTE *)(v43 + 16) = 0;
  v89[0] = v43;
  WebCore::Node::queueTaskKeepingThisNodeAlive(a1, 0, v89);
  if (v89[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v89[0] + 8))(v89[0]);
  v37 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL;
LABEL_79:
  v44 = *(_QWORD *)(*(_QWORD *)(v37 + 232) + 8);
  if (!v44)
    goto LABEL_147;
  a3 = *(_QWORD *)(v44 + 8);
  if (!a3)
    goto LABEL_147;
  *(_DWORD *)(a3 + 24) += 2;
  if ((_DWORD)a2)
  {
    v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 1248);
    v46 = v45 != 0;
    if (v45 != a1 && v45)
    {
      do
      {
        if ((*(_WORD *)(v45 + 28) & 0x80) != 0)
        {
          v60 = *(_QWORD *)(v45 + 200);
          if (!v60)
            goto LABEL_142;
          v61 = (uint64_t *)(v60 + 8);
        }
        else
        {
          v61 = (uint64_t *)(v45 + 32);
        }
        v45 = *v61;
        v46 = v45 != 0;
      }
      while (v45 != a1 && v45 != 0);
    }
    if (v46)
    {
      LODWORD(v89[0]) = 0;
      WORD2(v89[0]) = 256;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 656))(a3, v89);
      v37 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL;
    }
  }
LABEL_142:
  v63 = *(_QWORD *)(v37 + 232);
  a2 = *(_QWORD *)(v63 + 8);
  *(_QWORD *)(v63 + 8) = 0;
  if (a2)
  {
    do
    {
      v64 = __ldaxr((unsigned int *)a2);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, (unsigned int *)a2));
    if (!v65)
    {
      atomic_store(1u, (unsigned int *)a2);
      v71 = *(unsigned int *)(a2 + 28);
      if ((_DWORD)v71)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(a2 + 16), (WTF::StringImpl *)(*(_QWORD *)(a2 + 16) + 32 * v71));
      v72 = *(WTF **)(a2 + 16);
      if (!v72)
        goto LABEL_179;
      goto LABEL_181;
    }
  }
LABEL_145:
  if (*(_DWORD *)(a3 + 24) == 2)
  {
    v69 = *(_WORD *)(a3 + 30);
    if ((v69 & 0x400) == 0)
    {
      v70 = *(_WORD *)(a3 + 28);
      if ((v70 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)a3, v10);
      }
      else
      {
        if ((v70 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 160) + 16))(*(_QWORD *)(a3 + 160));
          v69 = *(_WORD *)(a3 + 30);
        }
        *(_WORD *)(a3 + 30) = v69 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)a3 + 72))(a3);
      }
    }
  }
  else
  {
    *(_DWORD *)(a3 + 24) -= 2;
  }
LABEL_147:
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v73 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    if (*(_BYTE *)(v73 + 3362) || *(_BYTE *)(v73 + 3405))
    {
      while (1)
      {
        v81 = *(_QWORD *)(v73 + 528);
        if (!v81)
          break;
        v82 = *(_QWORD *)(v81 + 8);
        if (!v82)
          break;
        v83 = *(_QWORD *)(v82 + 120);
        if (!v83)
          break;
        v84 = *(_QWORD *)(v83 + 8);
        if (!v84)
          break;
        v73 = *(_QWORD *)(*(_QWORD *)(v84 + 40) + 8);
      }
    }
    else
    {
      v74 = *(_QWORD *)(v73 + 528);
      if (v74)
      {
        v75 = *(_QWORD *)(v74 + 8);
        if (v75)
        {
          v76 = *(_QWORD *)(*(_QWORD *)(v75 + 128) + 8);
          if (v76 && *(_BYTE *)(v76 + 144) == 0)
          {
            v78 = *(_QWORD *)(v76 + 296);
            if (v78)
              v73 = v78;
          }
        }
      }
    }
    v79 = *(WebCore::AXObjectCache **)(v73 + 1488);
    if (v79)
    {
      ++*((_DWORD *)v79 + 2);
      WebCore::AXObjectCache::onPopoverToggle(v79, (const WebCore::HTMLElement *)a1);
      v80 = *((_DWORD *)v79 + 2);
      if (!v80)
      {
        __break(0xC471u);
        JUMPOUT(0x195BCDF54);
      }
      *((_DWORD *)v79 + 2) = v80 - 1;
    }
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if ((_BYTE)v85)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v86, &v88);
  if (v88)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v88, v10);
  result = (WebCore *)v87;
  if (v87)
  {
    result = (WebCore *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v87, v10);
    if (v4)
      goto LABEL_154;
  }
  else if (v4)
  {
    goto LABEL_154;
  }
LABEL_155:
  if (*(_DWORD *)(a1 + 24) == 2)
  {
    v66 = *(_WORD *)(a1 + 30);
    if ((v66 & 0x400) == 0)
    {
      v67 = *(_WORD *)(a1 + 28);
      if ((v67 & 0xF000) == 0x9000)
      {
        result = (WebCore *)WebCore::Document::removedLastRef((WebCore::Document *)a1, v10);
      }
      else
      {
        if ((v67 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 16))(*(_QWORD *)(a1 + 160));
          v66 = *(_WORD *)(a1 + 30);
        }
        *(_WORD *)(a1 + 30) = v66 | 0x400;
        result = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 24) -= 2;
  }
LABEL_157:
  if (v93 != -1)
    return (WebCore *)off_1E33BC570[v93]((char *)&v85, (uint64_t)v91);
  return result;
}

BOOL WebCore::isValidDirValue(_BOOL8 result)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;

  if (result)
  {
    v1 = *(_DWORD *)(result + 4);
    if (v1 != 3)
    {
      if (v1 != 4)
        return 0;
      v5 = *(_QWORD *)(result + 8);
      if ((*(_BYTE *)(result + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v5 & 0xDF) != 0x41 || (*(_BYTE *)(v5 + 1) & 0xDF) != 0x55 || (*(_BYTE *)(v5 + 2) & 0xDF) != 0x54)
          return 0;
        v6 = *(unsigned __int8 *)(v5 + 3);
      }
      else
      {
        if ((*(_WORD *)v5 & 0xFFDF) != 0x41
          || (*(_WORD *)(v5 + 2) & 0xFFDF) != 0x55
          || (*(_WORD *)(v5 + 4) & 0xFFDF) != 0x54)
        {
          return 0;
        }
        v6 = *(unsigned __int16 *)(v5 + 6);
      }
      return (v6 & 0xFFFFFFDF) == 0x4F;
    }
    v2 = *(_QWORD *)(result + 8);
    if ((*(_BYTE *)(result + 16) & 4) != 0)
    {
      v3 = *(_BYTE *)v2 & 0xDF;
      if (v3 == 76)
      {
        if ((*(_BYTE *)(v2 + 1) & 0xDF) != 0x54)
          return 0;
        v4 = *(unsigned __int8 *)(v2 + 2);
        return (v4 & 0xFFFFFFDF) == 0x52;
      }
      if (v3 != 82 || (*(_BYTE *)(v2 + 1) & 0xDF) != 0x54)
        return 0;
      v7 = *(unsigned __int8 *)(v2 + 2);
    }
    else
    {
      v8 = *(_WORD *)v2 & 0xFFDF;
      if (v8 == 76)
      {
        if ((*(_WORD *)(v2 + 2) & 0xFFDF) != 0x54)
          return 0;
        v4 = *(unsigned __int16 *)(v2 + 4);
        return (v4 & 0xFFFFFFDF) == 0x52;
      }
      if (v8 != 82 || (*(_WORD *)(v2 + 2) & 0xFFDF) != 0x54)
        return 0;
      v7 = *(unsigned __int16 *)(v2 + 4);
    }
    return (v7 & 0xFFFFFFDF) == 0x4C;
  }
  return result;
}

uint64_t *WebCore::HTMLElement::dir(WebCore::HTMLElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *result;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  const char *v19;
  uint64_t v20;

  v1 = *((_QWORD *)this + 13);
  if (v1
    && ((v2 = *(_DWORD *)(v1 + 4), (v2 & 1) != 0)
      ? (v3 = *(_QWORD *)(v1 + 40), LODWORD(v4) = *(_DWORD *)(v1 + 52))
      : (v3 = v1 + 32, LODWORD(v4) = v2 >> 5),
        (_DWORD)v4))
  {
    v4 = v4;
    v5 = (_QWORD *)(v3 + 8);
    while (1)
    {
      v6 = *(v5 - 1);
      if (v6 == WebCore::HTMLNames::dirAttr
        || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 24)
        && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 32))
      {
        break;
      }
      v5 += 2;
      if (!--v4)
      {
        v5 = (_QWORD *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v5 = (_QWORD *)MEMORY[0x1E0CBF2F8];
  }
  if ((byte_1ECE83531 & 1) == 0)
  {
    v19 = "ltr";
    v20 = 4;
    v17 = v5;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE83540, (uint64_t)&v19);
    v5 = v17;
    byte_1ECE83531 = 1;
  }
  if ((byte_1ECE83532 & 1) == 0)
  {
    v19 = "rtl";
    v20 = 4;
    v18 = v5;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE83548, (uint64_t)&v19);
    v5 = v18;
    byte_1ECE83532 = 1;
  }
  v7 = *v5;
  if (!*v5)
    return (uint64_t *)MEMORY[0x1E0CBF2F8];
  v9 = *(_DWORD *)(v7 + 4);
  if (v9 == 3)
  {
    v12 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      v13 = *(_BYTE *)v12 & 0xDF;
      if (v13 == 76)
      {
        if ((*(_BYTE *)(v12 + 1) & 0xDF) != 0x54)
          return (uint64_t *)MEMORY[0x1E0CBF2F8];
        v14 = *(unsigned __int8 *)(v12 + 2);
LABEL_33:
        if ((v14 & 0xFFFFFFDF) == 0x52)
          return &qword_1ECE83540;
        return (uint64_t *)MEMORY[0x1E0CBF2F8];
      }
      if (v13 != 82 || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x54)
        return (uint64_t *)MEMORY[0x1E0CBF2F8];
      v15 = *(unsigned __int8 *)(v12 + 2);
    }
    else
    {
      v16 = *(_WORD *)v12 & 0xFFDF;
      if (v16 == 76)
      {
        if ((*(_WORD *)(v12 + 2) & 0xFFDF) != 0x54)
          return (uint64_t *)MEMORY[0x1E0CBF2F8];
        v14 = *(unsigned __int16 *)(v12 + 4);
        goto LABEL_33;
      }
      if (v16 != 82 || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x54)
        return (uint64_t *)MEMORY[0x1E0CBF2F8];
      v15 = *(unsigned __int16 *)(v12 + 4);
    }
    if ((v15 & 0xFFFFFFDF) == 0x4C)
      return &qword_1ECE83548;
    return (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  if (v9 != 4)
    return (uint64_t *)MEMORY[0x1E0CBF2F8];
  v10 = *(_QWORD *)(v7 + 8);
  if ((*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v10 & 0xDF) == 0x41 && (*(_BYTE *)(v10 + 1) & 0xDF) == 0x55)
    {
      result = (uint64_t *)MEMORY[0x1E0CBF2F8];
      if ((*(_BYTE *)(v10 + 2) & 0xDF) != 0x54)
        return result;
      v11 = *(unsigned __int8 *)(v10 + 3);
      goto LABEL_26;
    }
    return (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  if ((*(_WORD *)v10 & 0xFFDF) != 0x41 || (*(_WORD *)(v10 + 2) & 0xFFDF) != 0x55)
    return (uint64_t *)MEMORY[0x1E0CBF2F8];
  result = (uint64_t *)MEMORY[0x1E0CBF2F8];
  if ((*(_WORD *)(v10 + 4) & 0xFFDF) != 0x54)
    return result;
  v11 = *(unsigned __int16 *)(v10 + 6);
LABEL_26:
  if ((v11 & 0xFFFFFFDF) == 0x4F)
    return &WebCore::autoAtomData;
  return result;
}

WTF::StringImpl *WebCore::HTMLElement::setDir(WebCore::HTMLElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::dirAttr, a2, 0);
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::dirAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::dirAttr, a2, 0);
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
}

WTF::StringImpl *WebCore::HTMLElement::setInnerText@<X0>(WebCore::ContainerNode *a1@<X0>, WTF *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v12;
  int v13;
  WTF::StringImpl *result;
  double v16;
  double v17;
  float v18;
  double v19;
  double v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  const WTF::String *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  __int16 v31;
  __int16 v32;
  WTF::StringImpl *v33;

  v6 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_16;
  v7 = *(unsigned __int16 **)(v6 + 8);
  v8 = *(unsigned int *)(v6 + 4);
  if ((*(_BYTE *)(v6 + 16) & 4) != 0)
  {
    if (!(_DWORD)v8)
      goto LABEL_16;
    while (1)
    {
      v13 = *(unsigned __int8 *)v7;
      v7 = (unsigned __int16 *)((char *)v7 + 1);
      v12 = v13;
      if (v13 == 10 || v12 == 13)
        break;
      if (!--v8)
        goto LABEL_16;
    }
  }
  else
  {
    if (!(_DWORD)v8)
      goto LABEL_16;
    while (1)
    {
      v10 = *v7++;
      v9 = v10;
      if (v10 == 10 || v9 == 13)
        break;
      if (!--v8)
        goto LABEL_16;
    }
  }
  if ((*((_BYTE *)a1 + 22) & 8) != 0
    && (*(unsigned int (**)(WebCore::ContainerNode *))(*(_QWORD *)a1 + 1176))(a1))
  {
    if (*(_QWORD *)a2 && WTF::StringImpl::find(*(_QWORD *)a2, 0xDu, 0, v16, v17, v18) != -1)
    {
      v22 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        v23 = *(_QWORD *)(v22 + 8);
        v24 = *(unsigned int *)(v22 + 4);
        if ((*(_BYTE *)(v22 + 16) & 4) != 0)
        {
          if (!(_DWORD)v24)
          {
LABEL_36:
            *(_DWORD *)v22 += 2;
            goto LABEL_37;
          }
          v25 = 16;
          if (v24 < 0x10)
            v25 = *(unsigned int *)(v22 + 4);
          v26 = v25;
          v27 = *(_BYTE **)(v22 + 8);
          do
          {
            if (*v27 == 13)
              goto LABEL_32;
            ++v27;
            --v26;
          }
          while (v26);
          if (v24 >= 0x11)
          {
            v27 = memchr((void *)(v23 + v25), 13, v24 - v25);
            if (v27)
            {
LABEL_32:
              v28 = (const WTF::String *)&v27[-v23];
              goto LABEL_33;
            }
          }
        }
        else
        {
          v28 = (const WTF::String *)WTF::find<char16_t,(void *)0>(*(_QWORD *)(v22 + 8), v24, 0xDu, 0, v19, v20, v21);
LABEL_33:
          if (v28 != (const WTF::String *)-1)
          {
            WTF::makeStringBySimplifyingNewLinesSlowCase(a2, v28);
LABEL_38:
            WebCore::ContainerNode::stringReplaceAll(a1, (uint64_t)&v33);
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            result = v33;
            v33 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
              else
                *(_DWORD *)result -= 2;
            }
            return result;
          }
          v22 = *(_QWORD *)a2;
        }
        if (v22)
          goto LABEL_36;
      }
LABEL_37:
      v33 = (WTF::StringImpl *)v22;
      goto LABEL_38;
    }
LABEL_16:
    result = WebCore::ContainerNode::stringReplaceAll(a1, (uint64_t)a2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  WebCore::textToFragment((WebCore *)&v33, *(WebCore::Document **)(*((_QWORD *)a1 + 5) + 8), (WTF::StringImpl **)a2);
  result = WebCore::replaceChildrenWithFragment(a1, &v33, a3);
  v30 = v33;
  v33 = 0;
  if (v30)
  {
    if (*((_DWORD *)v30 + 6) == 2)
    {
      v31 = *((_WORD *)v30 + 15);
      if ((v31 & 0x400) == 0)
      {
        v32 = *((_WORD *)v30 + 14);
        if ((v32 & 0xF000) == 0x9000)
        {
          return (WTF::StringImpl *)WebCore::Document::removedLastRef(v30);
        }
        else
        {
          if ((v32 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v30 + 20) + 16))(*((_QWORD *)v30 + 20));
            v31 = *((_WORD *)v30 + 15);
          }
          *((_WORD *)v30 + 15) = v31 | 0x400;
          return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 72))(v30);
        }
      }
    }
    else
    {
      *((_DWORD *)v30 + 6) -= 2;
    }
  }
  return result;
}

void WebCore::textToFragment(WebCore *this, WebCore::Document *a2, WTF::StringImpl **a3)
{
  unsigned int v6;
  unsigned int v7;
  char *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  int v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  char v37[8];
  WTF::StringImpl *v38;
  char v39;
  char v40[8];
  WTF::StringImpl *v41;
  char v42;
  WTF::StringImpl *v43;

  WebCore::DocumentFragment::create(a2, (uint64_t *)this);
  if (*a3)
  {
    v6 = *((_DWORD *)*a3 + 1);
    if (v6)
    {
      v7 = 0;
      v8 = (char *)a2 + 96;
      do
      {
        v9 = *a3;
        if (*a3)
        {
          v10 = *((unsigned int *)v9 + 1);
          if (v6 <= v7 + 1)
            v11 = v7 + 1;
          else
            v11 = v6;
          v12 = v7;
          v13 = v11;
          while (1)
          {
            if (v12 >= v10)
            {
              v15 = 0;
            }
            else
            {
              v14 = *((_QWORD *)v9 + 1);
              if ((*((_BYTE *)v9 + 16) & 4) != 0)
                v15 = *(unsigned __int8 *)(v14 + v12);
              else
                v15 = *(unsigned __int16 *)(v14 + 2 * v12);
              if (v15 == 10 || v15 == 13)
              {
                v11 = v12;
LABEL_21:
                if (v11 > v7)
                {
                  v17 = *(_QWORD *)this;
                  if (v7 || v10 > v11)
                  {
                    WTF::StringImpl::substring(*a3);
                    v9 = v43;
                  }
                  else
                  {
                    *(_DWORD *)v9 += 2;
                  }
                  goto LABEL_25;
                }
                goto LABEL_37;
              }
            }
            ++v12;
            if (v7 == --v13)
              goto LABEL_21;
          }
        }
        v15 = 0;
        if (v6 <= v7 + 1)
          v11 = v7 + 1;
        else
          v11 = v6;
        v17 = *(_QWORD *)this;
LABEL_25:
        v18 = bmalloc::api::isoAllocate();
        v19 = v18;
        *(_OWORD *)(v18 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v18 + 24) = 0x300300000002;
        *(_QWORD *)(v18 + 32) = 0;
        *(_QWORD *)(v18 + 40) = v8;
        *(_OWORD *)(v18 + 48) = 0u;
        *(_OWORD *)(v18 + 64) = 0u;
        ++*((_DWORD *)a2 + 831);
        v20 = v9;
        if (v9 || (v20 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
          *(_DWORD *)v20 += 2;
        *(_QWORD *)(v18 + 80) = v20;
        *(_QWORD *)v18 = off_1E33A8078;
        WebCore::ContainerNode::appendChild(v17, (WebCore::Node *)v18, (uint64_t)v40);
        if (v42)
        {
          v22 = v41;
          v41 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v21);
            else
              *(_DWORD *)v22 -= 2;
          }
        }
        if (*(_DWORD *)(v19 + 24) == 2)
        {
          v35 = *(_WORD *)(v19 + 30);
          if ((v35 & 0x400) == 0)
          {
            v36 = *(_WORD *)(v19 + 28);
            if ((v36 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v19);
            }
            else
            {
              if ((v36 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v19 + 160) + 16))(*(_QWORD *)(v19 + 160));
                v35 = *(_WORD *)(v19 + 30);
              }
              *(_WORD *)(v19 + 30) = v35 | 0x400;
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 72))(v19);
            }
          }
        }
        else
        {
          *(_DWORD *)(v19 + 24) -= 2;
        }
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v21);
          else
            *(_DWORD *)v9 -= 2;
        }
LABEL_37:
        if (v11 == v6)
          break;
        v23 = *(_QWORD *)this;
        v24 = bmalloc::api::isoAllocate();
        v25 = v24;
        *(_OWORD *)(v24 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v24 + 24) = 0x101C00000002;
        *(_QWORD *)(v24 + 32) = 0;
        *(_QWORD *)(v24 + 40) = v8;
        *(_OWORD *)(v24 + 48) = 0u;
        *(_OWORD *)(v24 + 64) = 0u;
        ++*((_DWORD *)a2 + 831);
        *(_QWORD *)(v24 + 80) = 0;
        *(_QWORD *)(v24 + 88) = 0;
        v26 = WebCore::HTMLNames::brTag;
        if (WebCore::HTMLNames::brTag)
          ++*(_DWORD *)WebCore::HTMLNames::brTag;
        *(_QWORD *)(v24 + 96) = v26;
        *(_QWORD *)(v24 + 104) = 0;
        *(_QWORD *)v24 = off_1E33B4C28;
        WebCore::ContainerNode::appendChild(v23, (WebCore::Node *)v24, (uint64_t)v37);
        if (v39)
        {
          v28 = v38;
          v38 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v27);
            else
              *(_DWORD *)v28 -= 2;
          }
        }
        if (*(_DWORD *)(v25 + 24) == 2)
        {
          v33 = *(_WORD *)(v25 + 30);
          if ((v33 & 0x400) == 0)
          {
            v34 = *(_WORD *)(v25 + 28);
            if ((v34 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v25);
            }
            else
            {
              if ((v34 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v25 + 160) + 16))(*(_QWORD *)(v25 + 160));
                v33 = *(_WORD *)(v25 + 30);
              }
              *(_WORD *)(v25 + 30) = v33 | 0x400;
              (*(void (**)(uint64_t))(*(_QWORD *)v25 + 72))(v25);
            }
          }
        }
        else
        {
          *(_DWORD *)(v25 + 24) -= 2;
        }
        if (v15 == 13)
        {
          v29 = v11 + 1;
          if (v29 < v6)
          {
            v30 = *a3;
            if (*a3)
            {
              if (*((_DWORD *)v30 + 1) > v29)
              {
                v31 = *((_QWORD *)v30 + 1);
                if ((*((_BYTE *)v30 + 16) & 4) != 0)
                  v32 = *(unsigned __int8 *)(v31 + v29);
                else
                  v32 = *(unsigned __int16 *)(v31 + 2 * v29);
                if (v32 == 10)
                  ++v11;
              }
            }
          }
        }
        v7 = v11 + 1;
      }
      while (v11 + 1 < v6);
    }
  }
}

void WebCore::HTMLElement::setOuterText(WTF::StringImpl **a1@<X1>, WebCore::Node *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  WTF::StringImpl *v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  char v52;

  v4 = *((_QWORD *)a2 + 4);
  if (!v4)
  {
    *(_BYTE *)a3 = 4;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return;
  }
  *(_DWORD *)(v4 + 24) += 2;
  v7 = *((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFLL;
  if (v7)
    *(_DWORD *)((*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
  v8 = *((_QWORD *)a2 + 7);
  if (v8)
    *(_DWORD *)(v8 + 24) += 2;
  v9 = *a1;
  if (*a1)
  {
    v10 = (unsigned __int16 *)*((_QWORD *)v9 + 1);
    v11 = *((unsigned int *)v9 + 1);
    if ((*((_BYTE *)v9 + 16) & 4) != 0)
    {
      if ((_DWORD)v11)
      {
        do
        {
          v16 = *(unsigned __int8 *)v10;
          v10 = (unsigned __int16 *)((char *)v10 + 1);
          v15 = v16;
          if (v16 == 10 || v15 == 13)
            goto LABEL_25;
        }
        while (--v11);
      }
    }
    else if ((_DWORD)v11)
    {
      while (1)
      {
        v13 = *v10++;
        v12 = v13;
        if (v13 == 10 || v12 == 13)
          break;
        if (!--v11)
          goto LABEL_21;
      }
LABEL_25:
      WebCore::textToFragment((WebCore *)&v50, *(WebCore::Document **)(*((_QWORD *)a2 + 5) + 8), a1);
      v21 = v50;
      goto LABEL_26;
    }
  }
LABEL_21:
  v18 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  v19 = bmalloc::api::isoAllocate();
  v21 = v19;
  *(_OWORD *)(v19 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v19 + 24) = 0x300300000002;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = v18 + 96;
  *(_OWORD *)(v19 + 48) = 0u;
  *(_OWORD *)(v19 + 64) = 0u;
  ++*(_DWORD *)(v18 + 3324);
  v22 = *a1;
  if (*a1 || (v22 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
    *(_DWORD *)v22 += 2;
  *(_QWORD *)(v19 + 80) = v22;
  *(_QWORD *)v19 = off_1E33A8078;
LABEL_26:
  if (!*((_QWORD *)a2 + 4))
  {
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    if (v21)
      goto LABEL_49;
    goto LABEL_51;
  }
  WebCore::ContainerNode::replaceChild((WebCore::ContainerNode *)v4, (WebCore::Node *)v21, a2, (uint64_t)&v50);
  if (v52)
  {
    v23 = v51;
    v51 = 0;
    *(_BYTE *)a3 = v50;
    *(_QWORD *)(a3 + 8) = v23;
    *(_BYTE *)(a3 + 16) = 1;
    goto LABEL_44;
  }
  if (v8)
  {
    v24 = *(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFLL;
    if (v24)
    {
      if ((*(_WORD *)((*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 2) != 0)
      {
        *(_DWORD *)((*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
        WebCore::Element::mergeWithNextTextNode((unsigned int *)v24, &v47);
        if (v49)
        {
          v25 = v48;
          *(_BYTE *)a3 = v47;
          *(_QWORD *)(a3 + 8) = v25;
          *(_BYTE *)(a3 + 16) = 1;
          if (*(_DWORD *)(v24 + 24) == 2)
          {
            v36 = *(_WORD *)(v24 + 30);
            if ((v36 & 0x400) == 0)
            {
              v37 = *(_WORD *)(v24 + 28);
              if ((v37 & 0xF000) == 0x9000)
              {
                WebCore::Document::removedLastRef((WebCore::Document *)v24, v20);
              }
              else
              {
                if ((v37 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v24 + 160) + 16))(*(_QWORD *)(v24 + 160));
                  v36 = *(_WORD *)(v24 + 30);
                }
                *(_WORD *)(v24 + 30) = v36 | 0x400;
                (*(void (**)(uint64_t))(*(_QWORD *)v24 + 72))(v24);
              }
            }
          }
          else
          {
            *(_DWORD *)(v24 + 24) -= 2;
          }
          goto LABEL_44;
        }
        if (*(_DWORD *)(v24 + 24) == 2)
        {
          v38 = *(_WORD *)(v24 + 30);
          if ((v38 & 0x400) == 0)
          {
            v39 = *(_WORD *)(v24 + 28);
            if ((v39 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v24, v20);
            }
            else
            {
              if ((v39 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v24 + 160) + 16))(*(_QWORD *)(v24 + 160));
                v38 = *(_WORD *)(v24 + 30);
              }
              *(_WORD *)(v24 + 30) = v38 | 0x400;
              (*(void (**)(uint64_t))(*(_QWORD *)v24 + 72))(v24);
            }
          }
        }
        else
        {
          *(_DWORD *)(v24 + 24) -= 2;
        }
      }
    }
  }
  if (!v7)
  {
LABEL_43:
    v7 = 0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    goto LABEL_44;
  }
  v26 = *(_WORD *)(v7 + 28);
  if ((v26 & 2) == 0)
  {
    if (*(_DWORD *)(v7 + 24) != 2)
    {
      *(_DWORD *)(v7 + 24) -= 2;
      goto LABEL_43;
    }
    v40 = *(_WORD *)(v7 + 30);
    if ((v40 & 0x400) != 0)
      goto LABEL_43;
    if ((v26 & 0xF000) != 0x9000)
    {
      if ((v26 & 0x20) != 0)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
        v40 = *(_WORD *)(v7 + 30);
      }
      v41 = v40 | 0x400;
LABEL_101:
      *(_WORD *)(v7 + 30) = v41;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      goto LABEL_43;
    }
    goto LABEL_121;
  }
  WebCore::Element::mergeWithNextTextNode((unsigned int *)v7, &v47);
  if (!v49)
  {
    if (*(_DWORD *)(v7 + 24) != 2)
    {
      *(_DWORD *)(v7 + 24) -= 2;
      goto LABEL_43;
    }
    v45 = *(_WORD *)(v7 + 30);
    if ((v45 & 0x400) != 0)
      goto LABEL_43;
    v46 = *(_WORD *)(v7 + 28);
    if ((v46 & 0xF000) != 0x9000)
    {
      if ((v46 & 0x20) != 0)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
        v45 = *(_WORD *)(v7 + 30);
      }
      v41 = v45 | 0x400;
      goto LABEL_101;
    }
LABEL_121:
    WebCore::Document::removedLastRef((WebCore::Document *)v7, v20);
    goto LABEL_43;
  }
  v42 = v48;
  *(_BYTE *)a3 = v47;
  *(_QWORD *)(a3 + 8) = v42;
  *(_BYTE *)(a3 + 16) = 1;
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    v43 = *(_WORD *)(v7 + 30);
    if ((v43 & 0x400) == 0)
    {
      v44 = *(_WORD *)(v7 + 28);
      if ((v44 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v7, v20);
      }
      else
      {
        if ((v44 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
          v43 = *(_WORD *)(v7 + 30);
        }
        *(_WORD *)(v7 + 30) = v43 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      }
    }
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  v7 = 0;
LABEL_44:
  if (!v52 || (v27 = v51, v51 = 0, !v27))
  {
LABEL_48:
    if (v21)
      goto LABEL_49;
    goto LABEL_51;
  }
  if (*(_DWORD *)v27 != 2)
  {
    *(_DWORD *)v27 -= 2;
    goto LABEL_48;
  }
  WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v20);
  if (v21)
  {
LABEL_49:
    if (*(_DWORD *)(v21 + 24) == 2)
    {
      v30 = *(_WORD *)(v21 + 30);
      if ((v30 & 0x400) == 0)
      {
        v31 = *(_WORD *)(v21 + 28);
        if ((v31 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v21, v20);
        }
        else
        {
          if ((v31 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v21 + 160) + 16))(*(_QWORD *)(v21 + 160));
            v30 = *(_WORD *)(v21 + 30);
          }
          *(_WORD *)(v21 + 30) = v30 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
        }
      }
    }
    else
    {
      *(_DWORD *)(v21 + 24) -= 2;
    }
  }
LABEL_51:
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      v32 = *(_WORD *)(v8 + 30);
      if ((v32 & 0x400) == 0)
      {
        v33 = *(_WORD *)(v8 + 28);
        if ((v33 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v8, v20);
        }
        else
        {
          if ((v33 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
            v32 = *(_WORD *)(v8 + 30);
          }
          *(_WORD *)(v8 + 30) = v32 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
        }
      }
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      v34 = *(_WORD *)(v7 + 30);
      if ((v34 & 0x400) == 0)
      {
        v35 = *(_WORD *)(v7 + 28);
        if ((v35 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v7, v20);
        }
        else
        {
          if ((v35 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
            v34 = *(_WORD *)(v7 + 30);
          }
          *(_WORD *)(v7 + 30) = v34 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
        }
      }
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    v28 = *(_WORD *)(v4 + 30);
    if ((v28 & 0x400) == 0)
    {
      v29 = *(_WORD *)(v4 + 28);
      if ((v29 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v4, v20);
      }
      else
      {
        if ((v29 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
          v28 = *(_WORD *)(v4 + 30);
        }
        *(_WORD *)(v4 + 30) = v28 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
      }
    }
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
}

WebCore::HTMLElement *WebCore::HTMLElement::applyAspectRatioFromWidthAndHeightAttributesToStyle(uint64_t a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, WebCore::MutableStyleProperties *a6)
{
  WebCore::HTMLElement *result;
  BOOL v10;
  BOOL v11;
  double v12;
  char v13;
  char v14;
  double v15;
  char v16;
  char v17;

  result = (WebCore::HTMLElement *)WebCore::parseHTMLDimensionInternal((uint64_t)&v15, a2, a3, 0);
  if (v17)
    v10 = v16 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    result = (WebCore::HTMLElement *)WebCore::parseHTMLDimensionInternal((uint64_t)&v12, a4, a5, 0);
    if (v14)
      v11 = v13 == 0;
    else
      v11 = 1;
    if (!v11)
      return (WebCore::HTMLElement *)WebCore::HTMLElement::addParsedWidthAndHeightToAspectRatioList(result, v15, v12, a6);
  }
  return result;
}

_DWORD *WebCore::HTMLElement::addParsedWidthAndHeightToAspectRatioList(WebCore::HTMLElement *this, double a2, double a3, WebCore::MutableStyleProperties *a4)
{
  int *v8;
  char v9;
  int *v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  WTF::StringImpl *v17;
  _DWORD *result;
  _DWORD *v19;

  WebCore::staticCSSValuePool[4664] += 2;
  if ((int)a2 <= 0xFF && *(_QWORD *)&a2 == COERCE__INT64((double)(int)a2))
  {
    v8 = &WebCore::staticCSSValuePool[4 * (int)a2 + 2064];
    *v8 += 2;
  }
  else
  {
    v8 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v8 = 2;
    v9 = *((_BYTE *)v8 + 6);
    *((_WORD *)v8 + 2) = 1;
    *((_BYTE *)v8 + 6) = v9 & 0xFC;
    *((double *)v8 + 1) = a2;
  }
  if ((int)a3 <= 0xFF && *(_QWORD *)&a3 == COERCE__INT64((double)(int)a3))
  {
    v11 = &WebCore::staticCSSValuePool[4 * (int)a3 + 2064];
    *v11 += 2;
  }
  else
  {
    v11 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v11 = 2;
    v12 = *((_BYTE *)v11 + 6);
    *((_WORD *)v11 + 2) = 1;
    *((_BYTE *)v11 + 6) = v12 & 0xFC;
    *((double *)v11 + 1) = a3;
  }
  v13 = WTF::fastCompactMalloc((WTF *)0x38);
  *(_DWORD *)v13 = 2;
  v14 = (*(unsigned __int8 *)(v13 + 6) << 16) & 0xFC0000;
  *(_DWORD *)(v13 + 8) = 2;
  *(_WORD *)(v13 + 4) = -9216;
  *(_BYTE *)(v13 + 6) = (v14 | 0x10000u) >> 16;
  *(_QWORD *)(v13 + 16) = v8;
  *(_QWORD *)(v13 + 24) = v11;
  v15 = WTF::fastCompactMalloc((WTF *)0x38);
  *(_DWORD *)v15 = 2;
  v16 = (*(unsigned __int8 *)(v15 + 6) << 16) & 0xFC0000;
  *(_DWORD *)(v15 + 8) = 2;
  *(_WORD *)(v15 + 4) = -10240;
  *(_BYTE *)(v15 + 6) = (v16 | 0x10000u) >> 16;
  *(_QWORD *)(v15 + 16) = &WebCore::staticCSSValuePool[4664];
  *(_QWORD *)(v15 + 24) = v13;
  v19 = (_DWORD *)v15;
  WebCore::MutableStyleProperties::setProperty(a4, 57, &v19, 0);
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v17);
    else
      *result -= 2;
  }
  return result;
}

WebCore::HTMLElement *WebCore::HTMLElement::applyAspectRatioWithoutDimensionalRulesFromWidthAndHeightAttributesToStyle(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, WebCore::MutableStyleProperties *a6)
{
  WebCore::HTMLElement *result;
  unsigned int v10;
  uint64_t v11;

  result = (WebCore::HTMLElement *)WebCore::parseHTMLInteger(a2, a3, &v11);
  if (HIDWORD(v11) != 1)
  {
    if (!HIDWORD(v11))
      goto LABEL_4;
    while (1)
    {
      result = (WebCore::HTMLElement *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_4:
      v10 = v11;
      if ((v11 & 0x80000000) != 0)
        break;
      result = (WebCore::HTMLElement *)WebCore::parseHTMLInteger(a4, a5, &v11);
      if (HIDWORD(v11) == 1)
        break;
      if (!HIDWORD(v11))
      {
        if ((v11 & 0x80000000) == 0)
          return (WebCore::HTMLElement *)WebCore::HTMLElement::addParsedWidthAndHeightToAspectRatioList(result, (double)v10, (double)v11, a6);
        return result;
      }
    }
  }
  return result;
}

void WebCore::HTMLElement::applyAlignmentAttributeToStyle(WebCore::HTMLElement *this, const WTF::AtomString *a2, WebCore::MutableStyleProperties *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int *v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _DWORD *v29;

  v3 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return;
  switch(*(_DWORD *)(v3 + 4))
  {
    case 3:
      v15 = *(_QWORD *)(v3 + 8);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v15 & 0xDF) != 0x54 || (*(_BYTE *)(v15 + 1) & 0xDF) != 0x4F)
          return;
        v16 = *(unsigned __int8 *)(v15 + 2);
      }
      else
      {
        if ((*(_WORD *)v15 & 0xFFDF) != 0x54 || (*(_WORD *)(v15 + 2) & 0xFFDF) != 0x4F)
          return;
        v16 = *(unsigned __int16 *)(v15 + 4);
      }
      if ((v16 & 0xFFFFFFDF) == 0x50)
        goto LABEL_67;
      return;
    case 4:
      v7 = *(_QWORD *)(v3 + 8);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v7 & 0xDF) != 0x4C || (*(_BYTE *)(v7 + 1) & 0xDF) != 0x45 || (*(_BYTE *)(v7 + 2) & 0xDF) != 0x46)
          return;
        v8 = *(unsigned __int8 *)(v7 + 3);
      }
      else
      {
        if ((*(_WORD *)v7 & 0xFFDF) != 0x4C
          || (*(_WORD *)(v7 + 2) & 0xFFDF) != 0x45
          || (*(_WORD *)(v7 + 4) & 0xFFDF) != 0x46)
        {
          return;
        }
        v8 = *(unsigned __int16 *)(v7 + 6);
      }
      if ((v8 & 0xFFFFFFDF) == 0x54)
      {
        v9 = 258;
        goto LABEL_38;
      }
      return;
    case 5:
      v10 = *(_QWORD *)(v3 + 8);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v10 & 0xDF) != 0x52
          || (*(_BYTE *)(v10 + 1) & 0xDF) != 0x49
          || (*(_BYTE *)(v10 + 2) & 0xDF) != 0x47
          || (*(_BYTE *)(v10 + 3) & 0xDF) != 0x48)
        {
          return;
        }
        v11 = *(unsigned __int8 *)(v10 + 4);
      }
      else
      {
        if ((*(_WORD *)v10 & 0xFFDF) != 0x52
          || (*(_WORD *)(v10 + 2) & 0xFFDF) != 0x49
          || (*(_WORD *)(v10 + 4) & 0xFFDF) != 0x47
          || (*(_WORD *)(v10 + 6) & 0xFFDF) != 0x48)
        {
          return;
        }
        v11 = *(unsigned __int16 *)(v10 + 8);
      }
      if ((v11 & 0xFFFFFFDF) == 0x54)
      {
        v9 = 259;
LABEL_38:
        v12 = &WebCore::staticCSSValuePool[4 * v9];
        v12[3088] += 2;
        v29 = v12 + 3088;
        WebCore::MutableStyleProperties::setProperty(a3, 123, &v29, 0);
        v14 = v29;
        v29 = 0;
        if (v14)
        {
          if (*v14 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v13);
          else
            *v14 -= 2;
        }
LABEL_67:
        v6 = 254;
        goto LABEL_68;
      }
      return;
    case 6:
      v19 = *(_QWORD *)(v3 + 8);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      {
        v20 = *(_BYTE *)v19 & 0xDF;
        if (v20 == 77)
        {
          if ((*(_BYTE *)(v19 + 1) & 0xDF) != 0x49
            || (*(_BYTE *)(v19 + 2) & 0xDF) != 0x44
            || (*(_BYTE *)(v19 + 3) & 0xDF) != 0x44
            || (*(_BYTE *)(v19 + 4) & 0xDF) != 0x4C)
          {
            return;
          }
          v21 = *(unsigned __int8 *)(v19 + 5);
LABEL_64:
          if ((v21 & 0xFFFFFFDF) == 0x45)
          {
            v6 = 256;
            goto LABEL_68;
          }
          return;
        }
        if (v20 == 67)
        {
          if ((*(_BYTE *)(v19 + 1) & 0xDF) != 0x45
            || (*(_BYTE *)(v19 + 2) & 0xDF) != 0x4E
            || (*(_BYTE *)(v19 + 3) & 0xDF) != 0x54
            || (*(_BYTE *)(v19 + 4) & 0xDF) != 0x45)
          {
            return;
          }
          v26 = *(unsigned __int8 *)(v19 + 5);
LABEL_88:
          if ((v26 & 0xFFFFFFDF) == 0x52)
            goto LABEL_22;
          return;
        }
        if (v20 != 66
          || (*(_BYTE *)(v19 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(v19 + 2) & 0xDF) != 0x54
          || (*(_BYTE *)(v19 + 3) & 0xDF) != 0x54
          || (*(_BYTE *)(v19 + 4) & 0xDF) != 0x4F)
        {
          return;
        }
        v28 = *(unsigned __int8 *)(v19 + 5);
      }
      else
      {
        v27 = *(_WORD *)v19 & 0xFFDF;
        if (v27 == 77)
        {
          if ((*(_WORD *)(v19 + 2) & 0xFFDF) != 0x49
            || (*(_WORD *)(v19 + 4) & 0xFFDF) != 0x44
            || (*(_WORD *)(v19 + 6) & 0xFFDF) != 0x44
            || (*(_WORD *)(v19 + 8) & 0xFFDF) != 0x4C)
          {
            return;
          }
          v21 = *(unsigned __int16 *)(v19 + 10);
          goto LABEL_64;
        }
        if (v27 == 67)
        {
          if ((*(_WORD *)(v19 + 2) & 0xFFDF) != 0x45
            || (*(_WORD *)(v19 + 4) & 0xFFDF) != 0x4E
            || (*(_WORD *)(v19 + 6) & 0xFFDF) != 0x54
            || (*(_WORD *)(v19 + 8) & 0xFFDF) != 0x45)
          {
            return;
          }
          v26 = *(unsigned __int16 *)(v19 + 10);
          goto LABEL_88;
        }
        if (v27 != 66
          || (*(_WORD *)(v19 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v19 + 4) & 0xFFDF) != 0x54
          || (*(_WORD *)(v19 + 6) & 0xFFDF) != 0x54
          || (*(_WORD *)(v19 + 8) & 0xFFDF) != 0x4F)
        {
          return;
        }
        v28 = *(unsigned __int16 *)(v19 + 10);
      }
      if ((v28 & 0xFFFFFFDF) == 0x4D)
      {
        v6 = 248;
        goto LABEL_68;
      }
      return;
    case 7:
      v17 = *(_QWORD *)(v3 + 8);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v17 & 0xDF) != 0x54
          || (*(_BYTE *)(v17 + 1) & 0xDF) != 0x45
          || (*(_BYTE *)(v17 + 2) & 0xDF) != 0x58
          || (*(_BYTE *)(v17 + 3) & 0xDF) != 0x54
          || (*(_BYTE *)(v17 + 4) & 0xDF) != 0x54
          || (*(_BYTE *)(v17 + 5) & 0xDF) != 0x4F)
        {
          return;
        }
        v18 = *(unsigned __int8 *)(v17 + 6);
      }
      else
      {
        if ((*(_WORD *)v17 & 0xFFDF) != 0x54
          || (*(_WORD *)(v17 + 2) & 0xFFDF) != 0x45
          || (*(_WORD *)(v17 + 4) & 0xFFDF) != 0x58
          || (*(_WORD *)(v17 + 6) & 0xFFDF) != 0x54
          || (*(_WORD *)(v17 + 8) & 0xFFDF) != 0x54
          || (*(_WORD *)(v17 + 10) & 0xFFDF) != 0x4F)
        {
          return;
        }
        v18 = *(unsigned __int16 *)(v17 + 12);
      }
      if ((v18 & 0xFFFFFFDF) == 0x50)
      {
        v6 = 252;
        goto LABEL_68;
      }
      return;
    case 9:
      v5 = *(_QWORD *)(v3 + 8);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v5 & 0xDF) != 0x41)
          return;
        if ((*(_BYTE *)(v5 + 1) & 0xDF) == 0x42
          && (*(_BYTE *)(v5 + 2) & 0xDF) == 0x53
          && (*(_BYTE *)(v5 + 3) & 0xDF) == 0x4D
          && (*(_BYTE *)(v5 + 4) & 0xDF) == 0x49
          && (*(_BYTE *)(v5 + 5) & 0xDF) == 0x44
          && (*(_BYTE *)(v5 + 6) & 0xDF) == 0x44
          && (*(_BYTE *)(v5 + 7) & 0xDF) == 0x4C
          && (*(_BYTE *)(v5 + 8) & 0xDF) == 0x45
          || (*(_BYTE *)(v5 + 1) & 0xDF) == 0x42
          && (*(_BYTE *)(v5 + 2) & 0xDF) == 0x53
          && (*(_BYTE *)(v5 + 3) & 0xDF) == 0x43
          && (*(_BYTE *)(v5 + 4) & 0xDF) == 0x45
          && (*(_BYTE *)(v5 + 5) & 0xDF) == 0x4E
          && (*(_BYTE *)(v5 + 6) & 0xDF) == 0x54
          && (*(_BYTE *)(v5 + 7) & 0xDF) == 0x45
          && (*(_BYTE *)(v5 + 8) & 0xDF) == 0x52)
        {
LABEL_22:
          v6 = 249;
          goto LABEL_68;
        }
        if ((*(_BYTE *)(v5 + 1) & 0xDF) != 0x42
          || (*(_BYTE *)(v5 + 2) & 0xDF) != 0x53
          || (*(_BYTE *)(v5 + 3) & 0xDF) != 0x42
          || (*(_BYTE *)(v5 + 4) & 0xDF) != 0x4F
          || (*(_BYTE *)(v5 + 5) & 0xDF) != 0x54
          || (*(_BYTE *)(v5 + 6) & 0xDF) != 0x54
          || (*(_BYTE *)(v5 + 7) & 0xDF) != 0x4F)
        {
          return;
        }
        v25 = *(unsigned __int8 *)(v5 + 8);
      }
      else
      {
        if ((*(_WORD *)v5 & 0xFFDF) != 0x41)
          return;
        if ((*(_WORD *)(v5 + 2) & 0xFFDF) == 0x42
          && (*(_WORD *)(v5 + 4) & 0xFFDF) == 0x53
          && (*(_WORD *)(v5 + 6) & 0xFFDF) == 0x4D
          && (*(_WORD *)(v5 + 8) & 0xFFDF) == 0x49
          && (*(_WORD *)(v5 + 10) & 0xFFDF) == 0x44
          && (*(_WORD *)(v5 + 12) & 0xFFDF) == 0x44
          && (*(_WORD *)(v5 + 14) & 0xFFDF) == 0x4C
          && (*(_WORD *)(v5 + 16) & 0xFFDF) == 0x45
          || (*(_WORD *)(v5 + 2) & 0xFFDF) == 0x42
          && (*(_WORD *)(v5 + 4) & 0xFFDF) == 0x53
          && (*(_WORD *)(v5 + 6) & 0xFFDF) == 0x43
          && (*(_WORD *)(v5 + 8) & 0xFFDF) == 0x45
          && (*(_WORD *)(v5 + 10) & 0xFFDF) == 0x4E
          && (*(_WORD *)(v5 + 12) & 0xFFDF) == 0x54
          && (*(_WORD *)(v5 + 14) & 0xFFDF) == 0x45
          && (*(_WORD *)(v5 + 16) & 0xFFDF) == 0x52)
        {
          goto LABEL_22;
        }
        if ((*(_WORD *)(v5 + 2) & 0xFFDF) != 0x42
          || (*(_WORD *)(v5 + 4) & 0xFFDF) != 0x53
          || (*(_WORD *)(v5 + 6) & 0xFFDF) != 0x42
          || (*(_WORD *)(v5 + 8) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v5 + 10) & 0xFFDF) != 0x54
          || (*(_WORD *)(v5 + 12) & 0xFFDF) != 0x54
          || (*(_WORD *)(v5 + 14) & 0xFFDF) != 0x4F)
        {
          return;
        }
        v25 = *(unsigned __int16 *)(v5 + 16);
      }
      if ((v25 & 0xFFFFFFDF) != 0x4D)
        return;
      v6 = 255;
LABEL_68:
      v22 = &WebCore::staticCSSValuePool[4 * v6];
      v22[3088] += 2;
      v29 = v22 + 3088;
      WebCore::MutableStyleProperties::setProperty(a3, 288, &v29, 0);
      v24 = v29;
      v29 = 0;
      if (v24)
      {
        if (*v24 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v23);
        else
          *v24 -= 2;
      }
      return;
    default:
      return;
  }
}

uint64_t WebCore::HTMLElement::hasCustomFocusLogic(WebCore::HTMLElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLElement::supportsFocus(WebCore::HTMLElement *this)
{
  uint64_t result;
  int v3;

  if (((*((_QWORD *)this + 9) >> 58) & 3) - 1 < 3)
    return 1;
  v3 = WebCore::Node::computeEditability((uint64_t)this, 0, 1);
  result = 0;
  if (v3)
  {
    result = *((_QWORD *)this + 4);
    if (result)
      return WebCore::Node::computeEditability(result, 0, 1) == 0;
  }
  return result;
}

uint64_t WebCore::HTMLElement::contentEditable@<X0>(WebCore **this@<X0>, const WebCore::HTMLElement *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  _DWORD *v5;

  result = WebCore::contentEditableType(this[13], a2);
  switch((_DWORD)result)
  {
    case 0:
      return WTF::StringImpl::createWithoutCopyingNonEmpty();
    case 1:
      v5 = (_DWORD *)WebCore::trueAtomData;
      if (!WebCore::trueAtomData)
        goto LABEL_7;
      goto LABEL_6;
    case 2:
      v5 = (_DWORD *)WebCore::falseAtomData;
      if (!WebCore::falseAtomData)
        goto LABEL_7;
      goto LABEL_6;
  }
  v5 = (_DWORD *)WebCore::plaintextOnlyAtomData;
  if (WebCore::plaintextOnlyAtomData)
LABEL_6:
    *v5 += 2;
LABEL_7:
  *a3 = v5;
  return result;
}

uint64_t WebCore::HTMLElement::setContentEditable@<X0>(WebCore::HTMLElement *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  uint64_t result;

  if (WTF::equalLettersIgnoringASCIICase((uint64_t *)a2, "true", 5uLL))
  {
    v6 = &WebCore::trueAtomData;
    goto LABEL_4;
  }
  if (WTF::equalLettersIgnoringASCIICase((uint64_t *)a2, "false", 6uLL))
  {
    v6 = &WebCore::falseAtomData;
LABEL_4:
    result = (uint64_t)WebCore::Element::setAttributeWithoutSynchronization(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::contenteditableAttr, (WTF::StringImpl **)v6);
LABEL_5:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  if (WTF::equalLettersIgnoringASCIICase((uint64_t *)a2, "plaintext-only", 0xFuLL))
  {
    v6 = &WebCore::plaintextOnlyAtomData;
    goto LABEL_4;
  }
  result = WTF::equalLettersIgnoringASCIICase((uint64_t *)a2, "inherit", 8uLL);
  if ((_DWORD)result)
  {
    result = WebCore::Element::removeAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::contenteditableAttr);
    goto LABEL_5;
  }
  *(_BYTE *)a3 = 9;
  a3[1] = 0;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

BOOL WebCore::HTMLElement::draggable(WebCore::HTMLElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    goto LABEL_12;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_4;
LABEL_12:
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    goto LABEL_12;
LABEL_4:
  v4 = v4;
  v5 = (uint64_t *)(v3 + 8);
  while (1)
  {
    v6 = *(v5 - 1);
    if (v6 == WebCore::HTMLNames::draggableAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::draggableAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::draggableAttr + 32))
    {
      break;
    }
    v5 += 2;
    if (!--v4)
    {
      v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v7 = (*(uint64_t (**)(WebCore::HTMLElement *))(*(_QWORD *)this + 1168))(this);
  v8 = *v5;
  if (v7)
  {
    if (v8 && *(_DWORD *)(v8 + 4) == 5)
    {
      v11 = *(_QWORD *)(v8 + 8);
      if ((*(_BYTE *)(v8 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v11 & 0xDF) == 0x46
          && (*(_BYTE *)(v11 + 1) & 0xDF) == 0x41
          && (*(_BYTE *)(v11 + 2) & 0xDF) == 0x4C
          && (*(_BYTE *)(v11 + 3) & 0xDF) == 0x53)
        {
          v12 = *(unsigned __int8 *)(v11 + 4);
LABEL_26:
          v9 = (v12 & 0xFFFFFFDF) == 69;
          return !v9;
        }
      }
      else if ((*(_WORD *)v11 & 0xFFDF) == 0x46
             && (*(_WORD *)(v11 + 2) & 0xFFDF) == 0x41
             && (*(_WORD *)(v11 + 4) & 0xFFDF) == 0x4C
             && (*(_WORD *)(v11 + 6) & 0xFFDF) == 0x53)
      {
        v12 = *(unsigned __int16 *)(v11 + 8);
        goto LABEL_26;
      }
    }
    v9 = 0;
    return !v9;
  }
  if (!v8 || *(_DWORD *)(v8 + 4) != 4)
    return 0;
  v13 = *(_QWORD *)(v8 + 8);
  if ((*(_BYTE *)(v8 + 16) & 4) == 0)
  {
    if ((*(_WORD *)v13 & 0xFFDF) == 0x54
      && (*(_WORD *)(v13 + 2) & 0xFFDF) == 0x52
      && (*(_WORD *)(v13 + 4) & 0xFFDF) == 0x55)
    {
      v14 = *(unsigned __int16 *)(v13 + 6);
      return (v14 & 0xFFFFFFDF) == 69;
    }
    return 0;
  }
  if ((*(_BYTE *)v13 & 0xDF) != 0x54 || (*(_BYTE *)(v13 + 1) & 0xDF) != 0x52 || (*(_BYTE *)(v13 + 2) & 0xDF) != 0x55)
    return 0;
  v14 = *(unsigned __int8 *)(v13 + 3);
  return (v14 & 0xFFFFFFDF) == 69;
}

WTF::StringImpl *WebCore::HTMLElement::setDraggable(WebCore::HTMLElement *this, int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_13;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v2 + 40);
    v5 = *(_DWORD *)(v2 + 52);
    if (!v5)
    {
LABEL_13:
      v6 = 0xFFFFFFFFLL;
      goto LABEL_14;
    }
  }
  else
  {
    v4 = (uint64_t *)(v2 + 32);
    v5 = v3 >> 5;
    if (!(v3 >> 5))
      goto LABEL_13;
  }
  v6 = 0;
  while (1)
  {
    v7 = *v4;
    if (*v4 == WebCore::HTMLNames::draggableAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::draggableAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::draggableAttr + 32))
    {
      break;
    }
    ++v6;
    v4 += 2;
    if (v5 == v6)
      goto LABEL_13;
  }
LABEL_14:
  if (a2)
    v8 = &WebCore::trueAtomData;
  else
    v8 = &WebCore::falseAtomData;
  return WebCore::Element::setAttributeInternal(this, v6, (WebCore::TreeScope *)&WebCore::HTMLNames::draggableAttr, (WTF::StringImpl **)v8, 0);
}

WTF::StringImpl *WebCore::HTMLElement::setSpellcheck(WebCore::HTMLElement *this, int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_13;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v2 + 40);
    v5 = *(_DWORD *)(v2 + 52);
    if (!v5)
    {
LABEL_13:
      v6 = 0xFFFFFFFFLL;
      goto LABEL_14;
    }
  }
  else
  {
    v4 = (uint64_t *)(v2 + 32);
    v5 = v3 >> 5;
    if (!(v3 >> 5))
      goto LABEL_13;
  }
  v6 = 0;
  while (1)
  {
    v7 = *v4;
    if (*v4 == WebCore::HTMLNames::spellcheckAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::spellcheckAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::spellcheckAttr + 32))
    {
      break;
    }
    ++v6;
    v4 += 2;
    if (v5 == v6)
      goto LABEL_13;
  }
LABEL_14:
  if (a2)
    v8 = &WebCore::trueAtomData;
  else
    v8 = &WebCore::falseAtomData;
  return WebCore::Element::setAttributeInternal(this, v6, (WebCore::TreeScope *)&WebCore::HTMLNames::spellcheckAttr, (WTF::StringImpl **)v8, 0);
}

WTF::StringImpl *WebCore::HTMLElement::setWritingsuggestions(WebCore::HTMLElement *this, int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_13;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v2 + 40);
    v5 = *(_DWORD *)(v2 + 52);
    if (!v5)
    {
LABEL_13:
      v6 = 0xFFFFFFFFLL;
      goto LABEL_14;
    }
  }
  else
  {
    v4 = (uint64_t *)(v2 + 32);
    v5 = v3 >> 5;
    if (!(v3 >> 5))
      goto LABEL_13;
  }
  v6 = 0;
  while (1)
  {
    v7 = *v4;
    if (*v4 == WebCore::HTMLNames::writingsuggestionsAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::writingsuggestionsAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::writingsuggestionsAttr + 32))
    {
      break;
    }
    ++v6;
    v4 += 2;
    if (v5 == v6)
      goto LABEL_13;
  }
LABEL_14:
  if (a2)
    v8 = &WebCore::trueAtomData;
  else
    v8 = &WebCore::falseAtomData;
  return WebCore::Element::setAttributeInternal(this, v6, (WebCore::TreeScope *)&WebCore::HTMLNames::writingsuggestionsAttr, (WTF::StringImpl **)v8, 0);
}

unsigned int *WebCore::HTMLElement::effectiveSpellcheckAttributeChanged(unsigned int *this, void *a2)
{
  unsigned int *v2;
  unsigned int *v4;
  __int16 v5;
  unsigned int *v6;
  BOOL v7;
  _QWORD *v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  BOOL v19;
  unsigned int *v20;
  BOOL v22;
  unsigned int *v23;
  __int16 v25;
  BOOL v26;
  __int16 v27;
  __int16 v28;

  v2 = (unsigned int *)*((_QWORD *)this + 10);
  if (v2)
  {
    v4 = this;
    v5 = *((_WORD *)v2 + 14);
    if ((v5 & 0x10) != 0)
    {
      v6 = (unsigned int *)*((_QWORD *)this + 10);
    }
    else
    {
      do
      {
        if ((v5 & 4) == 0 || (v6 = (unsigned int *)*((_QWORD *)v2 + 10)) == 0)
        {
          if (v2 == this)
            return this;
          while (1)
          {
            v6 = (unsigned int *)*((_QWORD *)v2 + 7);
            if (v6)
              break;
            v2 = (unsigned int *)*((_QWORD *)v2 + 4);
            if (v2)
              v7 = v2 == this;
            else
              v7 = 1;
            if (v7)
              return this;
          }
        }
        v5 = *((_WORD *)v6 + 14);
        v2 = v6;
      }
      while ((v5 & 0x10) == 0);
    }
    v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    while (1)
    {
      v9 = v6;
      v6[6] += 2;
      v10 = *((_QWORD *)v6 + 13);
      if (!v10)
        break;
      v11 = *(unsigned int *)(v10 + 4);
      if ((v11 & 1) != 0)
      {
        v12 = *(_QWORD *)(v10 + 40);
        v13 = *(unsigned int *)(v10 + 52);
        if (!v13)
          break;
      }
      else
      {
        v12 = v10 + 32;
        v13 = v11 >> 5;
        if (!(v11 >> 5))
          break;
      }
      v14 = (_QWORD *)(v12 + 8);
      while (1)
      {
        v15 = *(v14 - 1);
        if (v15 == WebCore::HTMLNames::spellcheckAttr
          || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::spellcheckAttr + 24)
          && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::spellcheckAttr + 32))
        {
          break;
        }
        v14 += 2;
        if (!--v13)
          goto LABEL_29;
      }
LABEL_30:
      if (*v14)
      {
        if (v6 == v4)
          goto LABEL_93;
        v16 = (unsigned int *)*((_QWORD *)v6 + 7);
        if (!v16)
        {
          v17 = v6;
          do
          {
            v17 = (unsigned int *)*((_QWORD *)v17 + 4);
            if (!v17 || v17 == v4)
              goto LABEL_93;
            v16 = (unsigned int *)*((_QWORD *)v17 + 7);
          }
          while (!v16);
        }
        if ((v16[7] & 0x10) == 0)
        {
          while (v16 != v4)
          {
            while (1)
            {
              v6 = (unsigned int *)*((_QWORD *)v16 + 7);
              if (v6)
                break;
              v16 = (unsigned int *)*((_QWORD *)v16 + 4);
              if (v16)
                v19 = v16 == v4;
              else
                v19 = 1;
              if (v19)
                goto LABEL_93;
            }
            v16 = (unsigned int *)*((_QWORD *)v16 + 7);
            if ((v6[7] & 0x10) != 0)
              goto LABEL_94;
          }
LABEL_93:
          v6 = 0;
          goto LABEL_94;
        }
      }
      else
      {
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 872))(v6);
        if ((_DWORD)this)
        {
          this = (unsigned int *)(*(uint64_t (**)(unsigned int *, void *))(*(_QWORD *)v6 + 1240))(v6, a2);
          if (v6 == v4)
            goto LABEL_93;
          v16 = (unsigned int *)*((_QWORD *)v6 + 7);
          if (!v16)
          {
            v20 = v6;
            do
            {
              v20 = (unsigned int *)*((_QWORD *)v20 + 4);
              if (!v20 || v20 == v4)
                goto LABEL_93;
              v16 = (unsigned int *)*((_QWORD *)v20 + 7);
            }
            while (!v16);
          }
          if ((v16[7] & 0x10) == 0)
          {
            while (v16 != v4)
            {
              while (1)
              {
                v6 = (unsigned int *)*((_QWORD *)v16 + 7);
                if (v6)
                  break;
                v16 = (unsigned int *)*((_QWORD *)v16 + 4);
                if (v16)
                  v22 = v16 == v4;
                else
                  v22 = 1;
                if (v22)
                  goto LABEL_93;
              }
              v16 = (unsigned int *)*((_QWORD *)v16 + 7);
              if ((v6[7] & 0x10) != 0)
                goto LABEL_94;
            }
            goto LABEL_93;
          }
        }
        else
        {
          v16 = (unsigned int *)*((_QWORD *)v6 + 10);
          if (!v16)
          {
            if (v6 == v4)
              goto LABEL_93;
            v16 = (unsigned int *)*((_QWORD *)v6 + 7);
            if (!v16)
            {
              v23 = v6;
              do
              {
                v23 = (unsigned int *)*((_QWORD *)v23 + 4);
                if (!v23 || v23 == v4)
                  goto LABEL_93;
                v16 = (unsigned int *)*((_QWORD *)v23 + 7);
              }
              while (!v16);
            }
          }
          v25 = *((_WORD *)v16 + 14);
          if ((v25 & 0x10) == 0)
          {
            do
            {
              if ((v25 & 4) == 0 || (v6 = (unsigned int *)*((_QWORD *)v16 + 10)) == 0)
              {
                if (v16 == v4)
                  goto LABEL_93;
                while (1)
                {
                  v6 = (unsigned int *)*((_QWORD *)v16 + 7);
                  if (v6)
                    break;
                  v16 = (unsigned int *)*((_QWORD *)v16 + 4);
                  if (v16)
                    v26 = v16 == v4;
                  else
                    v26 = 1;
                  if (v26)
                    goto LABEL_93;
                }
              }
              v25 = *((_WORD *)v6 + 14);
              v16 = v6;
            }
            while ((v25 & 0x10) == 0);
            goto LABEL_94;
          }
        }
      }
      v6 = v16;
LABEL_94:
      if (v9[6] == 2)
      {
        v27 = *((_WORD *)v9 + 15);
        if ((v27 & 0x400) == 0)
        {
          v28 = *((_WORD *)v9 + 14);
          if ((v28 & 0xF000) == 0x9000)
          {
            this = WebCore::Document::removedLastRef((WebCore::Document *)v9, a2);
          }
          else
          {
            if ((v28 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)v9 + 20) + 16))(*((_QWORD *)v9 + 20));
              v27 = *((_WORD *)v9 + 15);
            }
            *((_WORD *)v9 + 15) = v27 | 0x400;
            this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 72))(v9);
          }
        }
      }
      else
      {
        v9[6] -= 2;
      }
      if (!v6)
        return this;
    }
LABEL_29:
    v14 = v8;
    goto LABEL_30;
  }
  return this;
}

uint64_t *WebCore::ElementIterator<WebCore::HTMLElement>::traverseNextSkippingChildren(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;

  v1 = *result;
  v2 = result[1];
  if (v2 != *result)
  {
    while (1)
    {
      v3 = *(_QWORD *)(v2 + 56);
      if (v3)
        break;
      v2 = *(_QWORD *)(v2 + 32);
      if (v2)
        v4 = v2 == v1;
      else
        v4 = 1;
      if (v4)
        goto LABEL_8;
    }
    if ((*(_WORD *)(v3 + 28) & 0x10) != 0)
    {
      v5 = *(_QWORD *)(v2 + 56);
      goto LABEL_21;
    }
    while (v3 != v1)
    {
      while (1)
      {
        v5 = *(_QWORD *)(v3 + 56);
        if (v5)
          break;
        v3 = *(_QWORD *)(v3 + 32);
        if (v3)
          v6 = v3 == v1;
        else
          v6 = 1;
        if (v6)
          goto LABEL_8;
      }
      v3 = *(_QWORD *)(v3 + 56);
      if ((*(_WORD *)(v5 + 28) & 0x10) != 0)
        goto LABEL_21;
    }
  }
LABEL_8:
  v5 = 0;
LABEL_21:
  result[1] = v5;
  return result;
}

uint64_t WebCore::HTMLElement::click(WebCore::HTMLElement *this)
{
  return WebCore::simulateClick(this, 0, 0, 0, 0);
}

uint64_t WebCore::HTMLElement::accessKeyAction(WebCore::HTMLElement *this, int a2)
{
  int v5;
  __int16 v6;

  if ((*(unsigned int (**)(WebCore::HTMLElement *))(*(_QWORD *)this + 552))(this))
  {
    v6 = 0;
    v5 = 0;
    (*(void (**)(WebCore::HTMLElement *, int *))(*(_QWORD *)this + 656))(this, &v5);
  }
  return WebCore::simulateClick(this, 0, a2, 1, 1);
}

WTF::StringImpl *WebCore::HTMLElement::accessKeyLabel@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  char v16;
  __int16 v17;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (WTF::StringImpl **)(v5 + 8);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 1);
    if (v8 == WebCore::HTMLNames::accesskeyAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::accesskeyAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::accesskeyAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  if (*v7 && *((_DWORD *)*v7 + 1))
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 1;
    v9 = WebCore::AXObjectCache::gAccessibilityEnhancedUserInterfaceEnabled;
    v17 = 8963;
    WTF::StringBuilder::append();
    if (!v9)
    {
      v17 = 8997;
      WTF::StringBuilder::append();
    }
    WTF::StringBuilder::append(&v13, v7);
    v11 = v13;
    if (v13
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v13),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v13),
          (v11 = v13) != 0))
    {
      *(_DWORD *)v11 += 2;
    }
    *a2 = v11;
    v12 = v14;
    v14 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
    this = v13;
    v13 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v10);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebCore::HTMLElement::translate(WebCore::HTMLElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;

  v1 = WebCore::lineageOfType<WebCore::HTMLElement>((uint64_t)this);
  v17 = 0;
  v18 = v1;
  if (!v1)
    return 1;
  v2 = WebCore::HTMLNames::translateAttr;
  v3 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  while (1)
  {
    v4 = *(_QWORD *)(v1 + 104);
    if (!v4)
    {
LABEL_15:
      v8 = v3;
      goto LABEL_16;
    }
    v5 = *(unsigned int *)(v4 + 4);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(v4 + 40);
      v7 = *(unsigned int *)(v4 + 52);
      if (!v7)
        goto LABEL_15;
    }
    else
    {
      v6 = v4 + 32;
      v7 = v5 >> 5;
      if (!(v5 >> 5))
        goto LABEL_15;
    }
    v8 = (uint64_t *)(v6 + 8);
    while (1)
    {
      v9 = *(v8 - 1);
      if (v9 == v2 || *(_QWORD *)(v9 + 24) == *(_QWORD *)(v2 + 24) && *(_QWORD *)(v9 + 32) == *(_QWORD *)(v2 + 32))
        break;
      v8 += 2;
      if (!--v7)
        goto LABEL_15;
    }
LABEL_16:
    v10 = *v8;
    if (!v10)
      goto LABEL_17;
    v11 = *(_DWORD *)(v10 + 4);
    if (!v11)
      return 1;
    if (v11 == 3)
    {
      v14 = *(_QWORD *)(v10 + 8);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v14 & 0xDF) != 0x59 || (*(_BYTE *)(v14 + 1) & 0xDF) != 0x45)
          goto LABEL_17;
        v15 = *(unsigned __int8 *)(v14 + 2);
      }
      else
      {
        if ((*(_WORD *)v14 & 0xFFDF) != 0x59 || (*(_WORD *)(v14 + 2) & 0xFFDF) != 0x45)
          goto LABEL_17;
        v15 = *(unsigned __int16 *)(v14 + 4);
      }
      if ((v15 & 0xFFFFFFDF) == 0x53)
        return 1;
      goto LABEL_17;
    }
    if (v11 != 2)
      goto LABEL_17;
    v12 = *(_QWORD *)(v10 + 8);
    if ((*(_BYTE *)(v10 + 16) & 4) == 0)
      break;
    if ((*(_BYTE *)v12 & 0xDF) == 0x4E)
    {
      v13 = *(unsigned __int8 *)(v12 + 1);
      goto LABEL_25;
    }
LABEL_17:
    WebCore::ElementAncestorIterator<WebCore::HTMLElement const>::operator++((uint64_t)&v17);
    v1 = v18;
    if (!v18)
      return 1;
  }
  if ((*(_WORD *)v12 & 0xFFDF) != 0x4E)
    goto LABEL_17;
  v13 = *(unsigned __int16 *)(v12 + 2);
LABEL_25:
  if ((v13 & 0xFFFFFFDF) != 0x4F)
    goto LABEL_17;
  return 0;
}

WTF::StringImpl *WebCore::HTMLElement::setTranslate(WebCore::HTMLElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v10[2];

  WTF::AtomStringImpl::add();
  v10[0] = v10[1];
  v1 = *((_QWORD *)this + 13);
  if (!v1)
    goto LABEL_13;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) != 0)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = *(_DWORD *)(v1 + 52);
    if (!v4)
    {
LABEL_13:
      v5 = 0xFFFFFFFFLL;
      goto LABEL_14;
    }
  }
  else
  {
    v3 = (uint64_t *)(v1 + 32);
    v4 = v2 >> 5;
    if (!v4)
      goto LABEL_13;
  }
  v5 = 0;
  while (1)
  {
    v6 = *v3;
    if (*v3 == WebCore::HTMLNames::translateAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::translateAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::translateAttr + 32))
    {
      break;
    }
    ++v5;
    v3 += 2;
    if (v4 == v5)
      goto LABEL_13;
  }
LABEL_14:
  WebCore::Element::setAttributeInternal(this, v5, (WebCore::TreeScope *)&WebCore::HTMLNames::translateAttr, v10, 0);
  result = v10[0];
  v10[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLElement::asFormAssociatedElement(WebCore::HTMLElement *this)
{
  return 0;
}

unsigned int *WebCore::HTMLElement::adjustDirectionalityIfNeededAfterChildrenChanged(unsigned int *result, uint64_t a2, int a3)
{
  WebCore::Node *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringBuilder *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((*((_WORD *)result + 15) & 4) != 0)
  {
    v13 = (uint64_t)result;
    v17 = 0;
    if (a2)
    {
      if (a3)
      {
        a2 = *(_QWORD *)(a2 + 56);
      }
      else
      {
        do
          a2 = *(_QWORD *)(a2 + 56);
        while (a2 && (*(_WORD *)(a2 + 28) & 8) == 0);
      }
      while (1)
      {
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(&v17, a2);
        v4 = v17;
        if (!v17)
          break;
        if ((*(_WORD *)(v17 + 28) & 0x10) == 0
          || !WebCore::elementAffectsDirectionality(*(WebCore **)(*(_QWORD *)(v17 + 96) + 24), *(const WebCore::HTMLElement **)(v17 + 104)))
        {
          WebCore::setHasDirAutoFlagRecursively(v4, 0, 0, v3);
          break;
        }
        a2 = *(_QWORD *)(v4 + 56);
      }
    }
    v5 = WebCore::lineageOfType<WebCore::HTMLElement>(v13);
    v15 = 0;
    v16 = v5;
    if (v5)
    {
      v7 = v5;
      while (1)
      {
        *(_DWORD *)(v7 + 24) += 2;
        v14 = v7;
        if (WebCore::elementAffectsDirectionality(*(WebCore **)(*(_QWORD *)(v7 + 96) + 24), *(const WebCore::HTMLElement **)(v7 + 104)))
        {
          break;
        }
        WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(&v14);
        WebCore::ElementAncestorIterator<WebCore::HTMLElement const>::operator++((uint64_t)&v15);
        v7 = v16;
        if (!v16)
          goto LABEL_20;
      }
      WebCore::HTMLElement::updateEffectiveDirectionalityOfDirAuto((WebCore::HTMLElement *)v7, v12, v8, v9, v10, v11);
      WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(&v14);
    }
LABEL_20:
    result = (unsigned int *)v17;
    v17 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLElement::computeDirectionalityFromText@<X0>(uint64_t this@<X0>, WTF::StringBuilder *a2@<X4>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  _WORD *v4;
  char v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 *v10;
  __int16 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  _BOOL8 *v24;
  uint64_t v25;
  _WORD *v26;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  __int16 v31;
  _WORD *v32;
  __int16 v34;
  int v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  WTF::StringImpl *v40;

  v4 = (_WORD *)this;
  if (!this)
    goto LABEL_14;
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 872))(this);
  if (!(_DWORD)this)
    goto LABEL_14;
  *((_DWORD *)v4 + 6) += 2;
  this = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v4 + 1432))(v4);
  v6 = this;
  if ((_DWORD)this)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _WORD *))(*(_QWORD *)v4 + 1392))(&v40, v4);
    this = (uint64_t)v40;
    if (v40)
    {
      v8 = WTF::StringImpl::defaultWritingDirection(v40);
      this = (uint64_t)v40;
      v40 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
        else
          *(_DWORD *)this -= 2;
      }
      if ((v8 & 0xFF00000000) != 0)
      {
        *(_BYTE *)a3 = (_DWORD)v8 != 0;
        *(_QWORD *)(a3 + 8) = v4;
        return this;
      }
    }
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  if (*((_DWORD *)v4 + 6) == 2)
  {
    v36 = v4[15];
    if ((v36 & 0x400) == 0)
    {
      v37 = v4[14];
      if ((v37 & 0xF000) == 0x9000)
      {
        this = WebCore::Document::removedLastRef((WebCore::Document *)v4);
      }
      else
      {
        if ((v37 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)v4 + 20) + 16))(*((_QWORD *)v4 + 20));
          v36 = v4[15];
        }
        v4[15] = v36 | 0x400;
        this = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v4 + 72))(v4);
      }
    }
  }
  else
  {
    *((_DWORD *)v4 + 6) -= 2;
  }
  if ((v6 & 1) == 0)
  {
LABEL_14:
    v9 = *((_QWORD *)v4 + 10);
    if (!v9)
    {
LABEL_95:
      *(_BYTE *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      return this;
    }
    *(_DWORD *)(v9 + 24) += 2;
    v10 = (_BOOL8 *)MEMORY[0x1E0CBF2F8];
    while (1)
    {
      v11 = *(_WORD *)(v9 + 28);
      if ((v11 & 8) != 0)
        v12 = (_QWORD *)v9;
      else
        v12 = 0;
      if ((v11 & 0x10) != 0)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24);
        if (v13 == *(_QWORD *)(WebCore::HTMLNames::bdiTag + 24)
          || v13 == *(_QWORD *)(WebCore::HTMLNames::scriptTag + 24)
          || v13 == *(_QWORD *)(WebCore::HTMLNames::styleTag + 24))
        {
          goto LABEL_25;
        }
      }
      if (!v12)
        goto LABEL_68;
      this = (*(uint64_t (**)(_QWORD *))(*v12 + 880))(v12);
      if ((_DWORD)this)
      {
LABEL_25:
        if ((_WORD *)v9 != v4)
        {
          v14 = *(_QWORD *)(v9 + 56);
          if (v14)
            goto LABEL_33;
          v15 = (_WORD *)v9;
          while (1)
          {
            v15 = (_WORD *)*((_QWORD *)v15 + 4);
            if (!v15 || v15 == v4)
              break;
            v14 = *((_QWORD *)v15 + 7);
            if (v14)
              goto LABEL_33;
          }
        }
        goto LABEL_87;
      }
      v17 = v12[13];
      if (!v17)
        break;
      v18 = *(unsigned int *)(v17 + 4);
      if ((v18 & 1) != 0)
      {
        v19 = *(_QWORD *)(v17 + 40);
        v20 = *(unsigned int *)(v17 + 52);
        if (!v20)
          break;
      }
      else
      {
        v19 = v17 + 32;
        v20 = v18 >> 5;
        if (!(v18 >> 5))
          break;
      }
      v24 = (_BOOL8 *)(v19 + 8);
      while (1)
      {
        v25 = *(v24 - 1);
        if (v25 == WebCore::HTMLNames::dirAttr
          || *(_QWORD *)(v25 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 24)
          && *(_QWORD *)(v25 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 32))
        {
          break;
        }
        v24 += 2;
        if (!--v20)
          goto LABEL_56;
      }
LABEL_57:
      this = WebCore::isValidDirValue(*v24);
      if ((this & 1) == 0)
      {
        v11 = *(_WORD *)(v9 + 28);
LABEL_68:
        if ((v11 & 2) != 0)
        {
          this = (uint64_t)WebCore::Node::textContent((WebCore::Node *)v9, (const WebCore::Node *)1, a2, &v40, a4);
          v28 = v40;
          if (v40)
          {
            this = WTF::StringImpl::defaultWritingDirection(v40);
            v30 = this;
            if (*(_DWORD *)v28 == 2)
              this = WTF::StringImpl::destroy(v28, v29);
            else
              *(_DWORD *)v28 -= 2;
            if ((v30 & 0xFF00000000) != 0)
            {
              *(_BYTE *)a3 = (_DWORD)v30 != 0;
              v35 = *(_DWORD *)(v9 + 24);
              *(_DWORD *)(v9 + 24) = v35 + 2;
              *(_QWORD *)(a3 + 8) = v9;
              if (v35)
              {
                *(_DWORD *)(v9 + 24) = v35;
              }
              else
              {
                v38 = *(_WORD *)(v9 + 30);
                if ((v38 & 0x400) == 0)
                {
                  v39 = *(_WORD *)(v9 + 28);
                  if ((v39 & 0xF000) == 0x9000)
                  {
                    return WebCore::Document::removedLastRef((WebCore::Document *)v9);
                  }
                  else
                  {
                    if ((v39 & 0x20) != 0)
                    {
                      (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
                      v38 = *(_WORD *)(v9 + 30);
                    }
                    *(_WORD *)(v9 + 30) = v38 | 0x400;
                    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
                  }
                }
              }
              return this;
            }
          }
        }
        v31 = *(_WORD *)(v9 + 28);
        if ((v31 & 4) != 0)
        {
          v14 = *(_QWORD *)(v9 + 80);
          if (v14)
            goto LABEL_84;
        }
        if ((_WORD *)v9 == v4)
          goto LABEL_76;
        v14 = *(_QWORD *)(v9 + 56);
        if (v14)
        {
LABEL_84:
          *(_DWORD *)(v14 + 24) += 2;
        }
        else
        {
          v32 = (_WORD *)v9;
          while (1)
          {
            v32 = (_WORD *)*((_QWORD *)v32 + 4);
            if (!v32 || v32 == v4)
              break;
            v14 = *((_QWORD *)v32 + 7);
            if (v14)
              goto LABEL_84;
          }
LABEL_76:
          v14 = 0;
        }
        if (*(_DWORD *)(v9 + 24) != 2)
        {
          *(_DWORD *)(v9 + 24) -= 2;
          goto LABEL_36;
        }
        v34 = *(_WORD *)(v9 + 30);
        if ((v34 & 0x400) != 0)
          goto LABEL_36;
        if ((v31 & 0xF000) == 0x9000)
        {
LABEL_93:
          this = WebCore::Document::removedLastRef((WebCore::Document *)v9);
          goto LABEL_36;
        }
        if ((v31 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
          v34 = *(_WORD *)(v9 + 30);
        }
        v23 = v34 | 0x400;
LABEL_47:
        *(_WORD *)(v9 + 30) = v23;
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
        goto LABEL_36;
      }
      if (v12 != (_QWORD *)v4)
      {
        v14 = v12[7];
        if (v14)
        {
LABEL_33:
          *(_DWORD *)(v14 + 24) += 2;
          goto LABEL_34;
        }
        v26 = (_WORD *)v9;
        while (1)
        {
          v26 = (_WORD *)*((_QWORD *)v26 + 4);
          if (!v26 || v26 == v4)
            break;
          v14 = *((_QWORD *)v26 + 7);
          if (v14)
            goto LABEL_33;
        }
      }
LABEL_87:
      v14 = 0;
LABEL_34:
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        v21 = *(_WORD *)(v9 + 30);
        if ((v21 & 0x400) == 0)
        {
          v22 = *(_WORD *)(v9 + 28);
          if ((v22 & 0xF000) == 0x9000)
            goto LABEL_93;
          if ((v22 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
            v21 = *(_WORD *)(v9 + 30);
          }
          v23 = v21 | 0x400;
          goto LABEL_47;
        }
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
LABEL_36:
      v9 = v14;
      if (!v14)
        goto LABEL_95;
    }
LABEL_56:
    v24 = v10;
    goto LABEL_57;
  }
  return this;
}

void WebCore::HTMLElement::TextDirectionWithStrongDirectionalityNode::~TextDirectionWithStrongDirectionalityNode(WebCore::HTMLElement::TextDirectionWithStrongDirectionalityNode *this)
{
  uint64_t v1;
  __int16 v2;
  __int16 v3;

  v1 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v1)
  {
    if (*(_DWORD *)(v1 + 24) == 2)
    {
      v2 = *(_WORD *)(v1 + 30);
      if ((v2 & 0x400) == 0)
      {
        v3 = *(_WORD *)(v1 + 28);
        if ((v3 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v1);
        }
        else
        {
          if ((v3 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 160) + 16))(*(_QWORD *)(v1 + 160));
            v2 = *(_WORD *)(v1 + 30);
          }
          *(_WORD *)(v1 + 30) = v2 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
        }
      }
    }
    else
    {
      *(_DWORD *)(v1 + 24) -= 2;
    }
  }
}

uint64_t WebCore::setHasDirAutoFlagRecursively(uint64_t this, WebCore::Node *a2, uint64_t a3, WebCore::Node *a4)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v12;
  __int16 v13;
  uint64_t v14;
  __int16 v16;
  __int16 v17;

  if ((_DWORD)a2)
    v4 = 4;
  else
    v4 = 0;
  *(_WORD *)(this + 30) = *(_WORD *)(this + 30) & 0xFFFB | v4;
  if (!this)
    return this;
  v5 = this;
  if ((*(_WORD *)(this + 28) & 4) == 0)
    return this;
  v6 = *(_QWORD *)(this + 80);
  if (!v6)
    return this;
  *(_DWORD *)(v6 + 24) += 2;
  while (1)
  {
    v8 = *(_WORD *)(v6 + 28);
    if ((v8 & 0x10) != 0)
    {
      this = WebCore::elementAffectsDirectionality(*(WebCore **)(*(_QWORD *)(v6 + 96) + 24), *(const WebCore::HTMLElement **)(v6 + 104));
      if ((_DWORD)this)
      {
        if (v6 == a3)
          break;
        if (v6 != v5)
        {
          v9 = *(_QWORD *)(v6 + 56);
          if (v9)
          {
LABEL_19:
            *(_DWORD *)(v9 + 24) += 2;
            goto LABEL_20;
          }
          v10 = v6;
          while (1)
          {
            v10 = *(_QWORD *)(v10 + 32);
            if (!v10 || v10 == v5)
              break;
            v9 = *(_QWORD *)(v10 + 56);
            if (v9)
              goto LABEL_19;
          }
        }
        v9 = 0;
LABEL_20:
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          v13 = *(_WORD *)(v6 + 30);
          if ((v13 & 0x400) == 0)
          {
LABEL_43:
            if ((v8 & 0xF000) == 0x9000)
            {
              this = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v6, a2);
            }
            else
            {
              if ((v8 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
                v13 = *(_WORD *)(v6 + 30);
              }
              *(_WORD *)(v6 + 30) = v13 | 0x400;
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
            }
            goto LABEL_37;
          }
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
        goto LABEL_37;
      }
    }
    v12 = *(_WORD *)(v6 + 30);
    v13 = v12 & 0xFFFB | v4;
    *(_WORD *)(v6 + 30) = v13;
    if (v6 == a3)
      break;
    if ((v8 & 4) == 0 || (v9 = *(_QWORD *)(v6 + 80)) == 0)
    {
      if (v6 == v5)
        goto LABEL_26;
      v9 = *(_QWORD *)(v6 + 56);
      if (!v9)
      {
        v14 = v6;
        while (1)
        {
          v14 = *(_QWORD *)(v14 + 32);
          if (!v14 || v14 == v5)
            break;
          v9 = *(_QWORD *)(v14 + 56);
          if (v9)
            goto LABEL_34;
        }
LABEL_26:
        v9 = 0;
        goto LABEL_35;
      }
    }
LABEL_34:
    *(_DWORD *)(v9 + 24) += 2;
LABEL_35:
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((v12 & 0x400) == 0)
        goto LABEL_43;
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
LABEL_37:
    v6 = v9;
    if (!v9)
      return this;
  }
  if (*(_DWORD *)(a3 + 24) == 2)
  {
    v16 = *(_WORD *)(a3 + 30);
    if ((v16 & 0x400) == 0)
    {
      v17 = *(_WORD *)(a3 + 28);
      if ((v17 & 0xF000) == 0x9000)
      {
        return (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)a3, a2);
      }
      else
      {
        if ((v17 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 160) + 16))(*(_QWORD *)(a3 + 160));
          v16 = *(_WORD *)(a3 + 30);
        }
        *(_WORD *)(a3 + 30) = v16 | 0x400;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 72))(a3);
      }
    }
  }
  else
  {
    *(_DWORD *)(a3 + 24) -= 2;
  }
  return this;
}

unsigned __int8 *WebCore::HTMLElement::updateEffectiveDirectionality(uint64_t a1, void *a2)
{
  unint64_t v2;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *result;
  int v22;
  BOOL v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned __int16 *v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  uint64_t v32;
  BOOL v33;
  _BOOL8 *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BOOL8 *v39;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  BOOL v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int16 *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  __int16 v63;

  v63 = (__int16)a2;
  v4 = BYTE1(a2);
  if ((*(_BYTE *)(a1 + 22) & 8) == 0)
    goto LABEL_20;
  v5 = *(uint64_t **)(a1 + 40);
  v6 = v5[1];
  if (!*(_QWORD *)(v6 + 1944) || *(_BYTE *)(v6 + 3405))
    goto LABEL_20;
  if ((*(_BYTE *)(a1 + 70) & 4) != 0)
  {
    v10 = *v5;
    v11 = (*(_WORD *)(v10 + 28) & 0x80) == 0 || v10 == 0;
    v12 = v10 + 216;
    if (v11)
      v12 = v6 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v12 + 236))
      goto LABEL_20;
  }
  v7 = *(_QWORD *)(v6 + 1272);
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 70) & 4) != 0)
    {
LABEL_20:
      LOBYTE(v59) = 0;
      v61 = 0;
      v62 = 0;
      v13 = a2;
      v60 = a1;
      goto LABEL_21;
    }
  }
  if (*(_BYTE *)(v6 + 3362)
    || (v8 = *(unsigned __int8 *)(v6 + 3390), !*(_BYTE *)(v6 + 3390))
    && (*(_BYTE *)(v6 + 70) & 8) == 0
    && !*(_QWORD *)(v6 + 1560)
    && (v9 = *(_QWORD *)(v6 + 1328), !*(_BYTE *)(v9 + 233))
    && !*(_BYTE *)(v9 + 234))
  {
    LOBYTE(v59) = 1;
    v61 = 0;
    v62 = 0;
    v60 = a1;
LABEL_42:
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v59, (WTF::StringImpl *)0x15, 2, 0);
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v60, &v61);
    v4 = HIBYTE(v63);
    v13 = v63;
    goto LABEL_21;
  }
  v22 = *(unsigned __int8 *)(v6 + 3391);
  if (v8)
    v23 = v22 == 0;
  else
    v23 = 0;
  v24 = !v23;
  LOBYTE(v59) = v24;
  v61 = 0;
  v62 = 0;
  v60 = a1;
  if (!v23)
    goto LABEL_42;
  v13 = a2;
LABEL_21:
  v14 = v4 != 0;
  if ((v14 & (v13 != 0)) != 0)
    v15 = 0x8000000000000000;
  else
    v15 = 0;
  v11 = v4 == 0;
  v16 = *(_QWORD *)(a1 + 72);
  v17 = v16 & 0xBFFFFFFFFFFFFFFFLL;
  v18 = v16 & 0x3FFFFFFFFFFFFFFFLL | (v14 << 62) | v15;
  if (v11)
    v18 = v17;
  *(_QWORD *)(a1 + 72) = v18;
  v58 = (unsigned __int16 *)&v63;
  v19 = v18 & 0xFFFFFFFFFFFFLL;
  if (v19)
  {
    v25 = *(_QWORD *)(v19 + 88);
    if (v25)
    {
      v26 = *(_DWORD *)(v25 + 24);
      *(_DWORD *)(v25 + 24) = v26 + 2;
      v27 = *(_QWORD *)(v25 + 80);
      if (v27)
      {
        while ((*(_WORD *)(v27 + 28) & 0x10) == 0)
        {
          v27 = *(_QWORD *)(v27 + 56);
          if (!v27)
            goto LABEL_60;
        }
        v28 = (unsigned __int16 *)&v63;
LABEL_49:
        *(_DWORD *)(v27 + 24) += 2;
        v2 = v2 & 0xFFFFFFFFFFFF0000 | *v28;
        WebCore::HTMLElement::updateEffectiveDirectionality(v27, v2);
        if (*(_DWORD *)(v27 + 24) == 2)
        {
          v29 = *(_WORD *)(v27 + 30);
          if ((v29 & 0x400) == 0)
          {
            v30 = *(_WORD *)(v27 + 28);
            if ((v30 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v27, a2);
            }
            else
            {
              if ((v30 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v27 + 160) + 16))(*(_QWORD *)(v27 + 160));
                v29 = *(_WORD *)(v27 + 30);
              }
              *(_WORD *)(v27 + 30) = v29 | 0x400;
              (*(void (**)(uint64_t))(*(_QWORD *)v27 + 72))(v27);
            }
          }
        }
        else
        {
          *(_DWORD *)(v27 + 24) -= 2;
        }
        while (1)
        {
          v27 = *(_QWORD *)(v27 + 56);
          if (!v27)
            break;
          if ((*(_WORD *)(v27 + 28) & 0x10) != 0)
          {
            v28 = v58;
            goto LABEL_49;
          }
        }
        v26 = *(_DWORD *)(v25 + 24) - 2;
      }
LABEL_60:
      if (v26)
      {
        *(_DWORD *)(v25 + 24) = v26;
      }
      else if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v25, a2);
      }
    }
  }
  v20 = *(_QWORD *)(a1 + 80);
  if (v20)
  {
    v31 = *(_WORD *)(v20 + 28);
    if ((v31 & 0x10) != 0)
    {
      v32 = *(_QWORD *)(a1 + 80);
    }
    else
    {
      do
      {
        if ((v31 & 4) == 0 || (v32 = *(_QWORD *)(v20 + 80)) == 0)
        {
          if (v20 == a1)
            goto LABEL_28;
          while (1)
          {
            v32 = *(_QWORD *)(v20 + 56);
            if (v32)
              break;
            v20 = *(_QWORD *)(v20 + 32);
            if (v20)
              v33 = v20 == a1;
            else
              v33 = 1;
            if (v33)
              goto LABEL_28;
          }
        }
        v31 = *(_WORD *)(v32 + 28);
        v20 = v32;
      }
      while ((v31 & 0x10) == 0);
    }
    v56 = a1;
    v57 = v32;
    v34 = (_BOOL8 *)MEMORY[0x1E0CBF2F8];
    while (1)
    {
      *(_DWORD *)(v32 + 24) += 2;
      v35 = *(_QWORD *)(v32 + 104);
      if (v35
        && ((v36 = *(unsigned int *)(v35 + 4), (v36 & 1) != 0)
          ? (v37 = *(_QWORD *)(v35 + 40), v38 = *(unsigned int *)(v35 + 52))
          : (v37 = v35 + 32, v38 = v36 >> 5),
            v38))
      {
        v39 = (_BOOL8 *)(v37 + 8);
        while (1)
        {
          v40 = *(v39 - 1);
          if (v40 == WebCore::HTMLNames::dirAttr
            || *(_QWORD *)(v40 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 24)
            && *(_QWORD *)(v40 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 32))
          {
            break;
          }
          v39 += 2;
          if (!--v38)
            goto LABEL_84;
        }
      }
      else
      {
LABEL_84:
        v39 = v34;
      }
      if (!WebCore::isValidDirValue(*v39))
        break;
      WebCore::ElementIterator<WebCore::HTMLElement>::traverseNextSkippingChildren(&v56);
LABEL_120:
      if (*(_DWORD *)(v32 + 24) == 2)
      {
        if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v32, a2);
      }
      else
      {
        *(_DWORD *)(v32 + 24) -= 2;
      }
      v32 = v57;
      if (!v57)
        goto LABEL_28;
    }
    WebCore::HTMLElement::updateEffectiveDirectionality(std::optional<WebCore::TextDirection>)::$_0::operator()((unsigned int *)&v58, *(_QWORD *)(v32 + 72));
    v41 = WebCore::Element::needsStyleInvalidation((WebCore::Element *)v32);
    LOBYTE(v52) = v41;
    v53 = v32;
    v54 = 0;
    v55 = 0;
    if (v41)
    {
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v52, (WTF::StringImpl *)0x15, 2, 0);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v53, &v54);
    }
    v42 = *(_QWORD *)(v32 + 72);
    v43 = v42 & 0xBFFFFFFFFFFFFFFFLL;
    v44 = v42 & 0x3FFFFFFFFFFFFFFFLL | ((unint64_t)HIBYTE(v63) << 62) | v15;
    if (HIBYTE(v63))
      v45 = v44;
    else
      v45 = v43;
    *(_QWORD *)(v32 + 72) = v45;
    v46 = v57;
    v47 = *(_QWORD *)(v57 + 80);
    if (!v47)
    {
      if (v57 == v56)
      {
LABEL_113:
        v49 = 0;
LABEL_114:
        v57 = v49;
        if ((_BYTE)v52)
          WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v53, &v55);
        if (v55)
          WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v55, a2);
        if (v54)
          WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v54, a2);
        goto LABEL_120;
      }
      while (1)
      {
        v47 = *(_QWORD *)(v46 + 56);
        if (v47)
          break;
        v46 = *(_QWORD *)(v46 + 32);
        if (v46)
          v51 = v46 == v56;
        else
          v51 = 1;
        if (v51)
          goto LABEL_113;
      }
    }
    v48 = *(_WORD *)(v47 + 28);
    if ((v48 & 0x10) != 0)
    {
      v49 = v47;
    }
    else
    {
      do
      {
        if ((v48 & 4) == 0 || (v49 = *(_QWORD *)(v47 + 80)) == 0)
        {
          if (v47 == v56)
            goto LABEL_113;
          while (1)
          {
            v49 = *(_QWORD *)(v47 + 56);
            if (v49)
              break;
            v47 = *(_QWORD *)(v47 + 32);
            if (v47)
              v50 = v47 == v56;
            else
              v50 = 1;
            if (v50)
              goto LABEL_113;
          }
        }
        v48 = *(_WORD *)(v49 + 28);
        v47 = v49;
      }
      while ((v48 & 0x10) == 0);
    }
    goto LABEL_114;
  }
LABEL_28:
  if ((_BYTE)v59)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v60, &v62);
  if (v62)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v62, a2);
  result = v61;
  if (v61)
    return (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v61, a2);
  return result;
}

unsigned int *WebCore::HTMLElement::updateEffectiveDirectionalityOfDirAuto(WebCore::HTMLElement *this, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, WTF::StringBuilder *a6)
{
  uint64_t v7;
  WebCore::Node *v8;
  int v9;
  unsigned int *result;
  void *v11;
  __int16 v12;
  __int16 v13;
  uint64_t v14;
  WebCore::Node *ElementSibling;
  WebCore::Element *v16;
  _BYTE v17[8];
  BOOL v18[8];

  WebCore::HTMLElement::computeDirectionalityFromText((uint64_t)this, a6, (uint64_t)v17, a2);
  v7 = *(_QWORD *)v18;
  WebCore::setHasDirAutoFlagRecursively((uint64_t)this, (WebCore::Node *)1, *(uint64_t *)v18, v8);
  v9 = v17[0];
  result = (unsigned int *)WebCore::HTMLElement::updateEffectiveDirectionality((uint64_t)this, (void *)(v17[0] | 0x100));
  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195BD1B6CLL);
    }
    if ((v9 != 0) != (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x7B) & 4) >> 2)
    {
      result = (unsigned int *)WebCore::Node::invalidateStyle((uint64_t)this, 4u, 0);
      if ((*((_BYTE *)this + 71) & 1) != 0)
      {
        v14 = *((_QWORD *)this + 4);
        if (!v14 || (*(_WORD *)(v14 + 28) & 8) == 0 || (*(_BYTE *)(v14 + 70) & 4) == 0)
        {
          ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
          result = (unsigned int *)WebCore::invalidateForSiblingCombinators(ElementSibling, v16);
        }
      }
    }
  }
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      v12 = *(_WORD *)(v7 + 30);
      if ((v12 & 0x400) == 0)
      {
        v13 = *(_WORD *)(v7 + 28);
        if ((v13 & 0xF000) == 0x9000)
        {
          return WebCore::Document::removedLastRef((WebCore::Document *)v7, v11);
        }
        else
        {
          if ((v13 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
            v12 = *(_WORD *)(v7 + 30);
          }
          *(_WORD *)(v7 + 30) = v12 | 0x400;
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
        }
      }
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::HTMLElement::adjustDirectionalityIfNeededAfterChildAttributeChanged(unsigned int *this, WebCore::Element *a2)
{
  uint64_t v2;
  __int16 v3;
  _DWORD *v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringBuilder *v9;
  __n128 v10;
  void *v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;

  v2 = (uint64_t)this;
  if ((this[7] & 0x10) != 0)
  {
LABEL_5:
    v4 = (_DWORD *)(v2 + 24);
    v5 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v5 + 2;
    this = (unsigned int *)WebCore::elementAffectsDirectionality(*(WebCore **)(*(_QWORD *)(v2 + 96) + 24), *(const WebCore::HTMLElement **)(v2 + 104));
    if ((this & 1) != 0)
    {
LABEL_6:
      this = WebCore::HTMLElement::updateEffectiveDirectionalityOfDirAuto((WebCore::HTMLElement *)v2, v10, (uint64_t)v6, v7, v8, v9);
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        v15 = *(_WORD *)(v2 + 30);
        if ((v15 & 0x400) == 0)
        {
          v16 = *(_WORD *)(v2 + 28);
          if ((v16 & 0xF000) == 0x9000)
          {
            return WebCore::Document::removedLastRef((WebCore::Document *)v2, v11);
          }
          else
          {
            if ((v16 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
              v15 = *(_WORD *)(v2 + 30);
            }
            *(_WORD *)(v2 + 30) = v15 | 0x400;
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
          }
        }
      }
      else
      {
        *v4 = *(_DWORD *)(v2 + 24) - 2;
      }
    }
    else
    {
LABEL_9:
      if (v5)
      {
        *v4 = v5;
      }
      else
      {
        v13 = *(_WORD *)(v2 + 30);
        if ((v13 & 0x400) == 0)
        {
          v14 = *(_WORD *)(v2 + 28);
          if ((v14 & 0xF000) == 0x9000)
          {
            this = WebCore::Document::removedLastRef((WebCore::Document *)v2, v6);
          }
          else
          {
            if ((v14 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
              v13 = *(_WORD *)(v2 + 30);
            }
            *(_WORD *)(v2 + 30) = v13 | 0x400;
            this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
          }
        }
      }
      while (1)
      {
        v2 = *(_QWORD *)(v2 + 32);
        if (!v2)
          break;
        v12 = *(_WORD *)(v2 + 28);
        if ((v12 & 8) == 0)
          break;
        if ((v12 & 0x10) != 0)
        {
          v4 = (_DWORD *)(v2 + 24);
          v5 = *(_DWORD *)(v2 + 24);
          *(_DWORD *)(v2 + 24) = v5 + 2;
          this = (unsigned int *)WebCore::elementAffectsDirectionality(*(WebCore **)(*(_QWORD *)(v2 + 96) + 24), *(const WebCore::HTMLElement **)(v2 + 104));
          if (!(_DWORD)this)
            goto LABEL_9;
          goto LABEL_6;
        }
      }
    }
  }
  else
  {
    while (1)
    {
      v2 = *(_QWORD *)(v2 + 32);
      if (!v2)
        break;
      v3 = *(_WORD *)(v2 + 28);
      if ((v3 & 8) == 0)
        break;
      if ((v3 & 0x10) != 0)
        goto LABEL_5;
    }
  }
  return this;
}

unsigned int *WebCore::HTMLElement::updateEffectiveDirectionality(std::optional<WebCore::TextDirection>)::$_0::operator()(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int *v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;

  if ((a2 & 0xFFFFFFFFFFFFLL) != 0)
  {
    v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 24);
      *(_DWORD *)(v3 + 24) = v4 + 2;
      v5 = *(_QWORD *)(v3 + 80);
      if (v5)
      {
        v6 = result;
        while ((*(_WORD *)(v5 + 28) & 0x10) == 0)
        {
          v5 = *(_QWORD *)(v5 + 56);
          if (!v5)
            goto LABEL_21;
        }
LABEL_9:
        *(_DWORD *)(v5 + 24) += 2;
        v2 = v2 & 0xFFFFFFFFFFFF0000 | **(unsigned __int16 **)v6;
        result = (unsigned int *)WebCore::HTMLElement::updateEffectiveDirectionality(v5, v2);
        if (*(_DWORD *)(v5 + 24) == 2)
        {
          v7 = *(_WORD *)(v5 + 30);
          if ((v7 & 0x400) == 0)
          {
            v8 = *(_WORD *)(v5 + 28);
            if ((v8 & 0xF000) == 0x9000)
            {
              result = WebCore::Document::removedLastRef((WebCore::Document *)v5, (void *)a2);
            }
            else
            {
              if ((v8 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
                v7 = *(_WORD *)(v5 + 30);
              }
              *(_WORD *)(v5 + 30) = v7 | 0x400;
              result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
            }
          }
        }
        else
        {
          *(_DWORD *)(v5 + 24) -= 2;
        }
        while (1)
        {
          v5 = *(_QWORD *)(v5 + 56);
          if (!v5)
            break;
          if ((*(_WORD *)(v5 + 28) & 0x10) != 0)
            goto LABEL_9;
        }
        v4 = *(_DWORD *)(v3 + 24) - 2;
      }
LABEL_21:
      if (v4)
      {
        *(_DWORD *)(v3 + 24) = v4;
      }
      else
      {
        v9 = *(_WORD *)(v3 + 30);
        if ((v9 & 0x400) == 0)
        {
          v10 = *(_WORD *)(v3 + 28);
          if ((v10 & 0xF000) == 0x9000)
          {
            return WebCore::Document::removedLastRef((WebCore::Document *)v3, (void *)a2);
          }
          else
          {
            if ((v10 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
              v9 = *(_WORD *)(v3 + 30);
            }
            *(_WORD *)(v3 + 30) = v9 | 0x400;
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
          }
        }
      }
    }
  }
  return result;
}

unsigned __int8 *WebCore::HTMLElement::updateTextDirectionalityAfterInputTypeChange(WebCore::HTMLElement *this, __n128 a2, uint64_t a3, uint64_t a4, WebCore::Node *a5, WTF::StringBuilder *a6)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::AtomString *v10;
  uint64_t v11;

  v6 = *((_QWORD *)this + 13);
  if (!v6)
    goto LABEL_12;
  v7 = *(_DWORD *)(v6 + 4);
  if ((v7 & 1) == 0)
  {
    v8 = v6 + 32;
    LODWORD(v9) = v7 >> 5;
    if ((_DWORD)v9)
      goto LABEL_4;
LABEL_12:
    v10 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
    return WebCore::HTMLElement::dirAttributeChanged(this, v10, a4, a5, a6, a2);
  }
  v8 = *(_QWORD *)(v6 + 40);
  LODWORD(v9) = *(_DWORD *)(v6 + 52);
  if (!(_DWORD)v9)
    goto LABEL_12;
LABEL_4:
  v9 = v9;
  v10 = (const WTF::AtomString *)(v8 + 8);
  while (1)
  {
    v11 = *((_QWORD *)v10 - 1);
    if (v11 == WebCore::HTMLNames::dirAttr
      || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 24)
      && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 32))
    {
      break;
    }
    v10 = (const WTF::AtomString *)((char *)v10 + 16);
    if (!--v9)
    {
      v10 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
      return WebCore::HTMLElement::dirAttributeChanged(this, v10, a4, a5, a6, a2);
    }
  }
  return WebCore::HTMLElement::dirAttributeChanged(this, v10, a4, a5, a6, a2);
}

int *WebCore::HTMLElement::addHTMLLengthToStyle(uint64_t a1, WebCore::MutableStyleProperties *a2, int a3, unsigned __int16 *a4, uint64_t a5, char a6, int a7, int a8, char a9)
{
  int *result;
  int v16;
  double v17;
  char v18;
  char v19;

  result = (int *)WebCore::parseHTMLDimensionInternal((uint64_t)&v17, a4, a5, a8);
  if (v19)
  {
    if (v17 != 0.0 || a9 != 0)
    {
      if (v18)
      {
        if (a7)
          v16 = 6;
        else
          v16 = 1;
        return WebCore::StyledElement::addPropertyToPresentationalHintStyle(v17, a1, a2, a3, v16);
      }
      if ((a6 & 1) != 0)
      {
        v16 = 3;
        return WebCore::StyledElement::addPropertyToPresentationalHintStyle(v17, a1, a2, a3, v16);
      }
    }
  }
  return result;
}

int *WebCore::HTMLElement::addHTMLLengthToStyle(uint64_t a1, WebCore::MutableStyleProperties *a2, int a3, unsigned __int16 *a4, uint64_t a5, int a6)
{
  int *result;
  int v12;
  double v13;
  char v14;
  char v15;

  result = (int *)WebCore::parseHTMLDimensionInternal((uint64_t)&v13, a4, a5, 0);
  if (v15)
  {
    if (v13 != 0.0 || a6 != 0)
    {
      if (v14)
        v12 = 6;
      else
        v12 = 3;
      return WebCore::StyledElement::addPropertyToPresentationalHintStyle(v13, a1, a2, a3, v12);
    }
  }
  return result;
}

unint64_t WebCore::HTMLElement::parseLegacyColorValue(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v2;
  unsigned __int16 *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int32x2_t v24;
  unsigned __int16 *v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  size_t v37;
  int v38;
  int v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  WTF *v46;
  WTF *v47;
  char *v48;
  char *v49;
  WTF *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  char v56;
  int8x8_t v57;
  int8x8_t v58;
  int8x8_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  unsigned int v70;
  int v71;
  char v72;
  char v73;
  unsigned int v74;
  int v75;
  int v76;
  char v77;
  char v78;
  unsigned int v79;
  int v80;
  unsigned __int8 v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  char v88;
  _BOOL4 v89;
  char v90;
  char v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  int v94;
  unint64_t v95;
  char v96;
  WTF *v97;
  uint64_t v98;
  _BYTE v99[144];

  if (!(_DWORD)a2)
    goto LABEL_172;
  v3 = a1;
  v4 = a2 - 1;
  v5 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) != 0)
  {
    v6 = 0;
    while (1)
    {
      v7 = *((unsigned __int8 *)a1 + v6);
      v8 = v7 > 0x20;
      v9 = (1 << v7) & 0x100003600;
      if (v8 || v9 == 0)
        break;
      if (a2 == ++v6)
        goto LABEL_40;
    }
    if ((_DWORD)a2 == 1)
    {
      v2 = a2;
      if (!(_DWORD)v6)
        goto LABEL_20;
      LODWORD(v11) = 0;
    }
    else
    {
      v11 = (a2 - 1);
      do
      {
        if (v11 >= a2)
          goto LABEL_190;
        v12 = *((unsigned __int8 *)a1 + v11);
        v8 = v12 > 0x20;
        v13 = (1 << v12) & 0x100003600;
        if (v8 || v13 == 0)
          break;
        --v11;
      }
      while ((_DWORD)v11);
      if (!(_DWORD)v6)
      {
        v2 = a2;
        if ((_DWORD)v11 == v4)
          goto LABEL_20;
      }
    }
    v95 = (v11 - v6 + 1);
    if ((unint64_t)a2 - v6 >= v95)
    {
      v3 = (unsigned __int16 *)((char *)a1 + v6);
      v2 = v95 | 0x100000000;
      goto LABEL_20;
    }
LABEL_190:
    __break(1u);
    goto LABEL_191;
  }
  v25 = a1;
  while (1)
  {
    v26 = *v25;
    v8 = v26 > 0x20;
    v27 = (1 << v26) & 0x100003600;
    if (v8 || v27 == 0)
      break;
    ++v5;
    ++v25;
    if (a2 == v5)
      goto LABEL_40;
  }
  if ((_DWORD)a2 == 1)
  {
    v2 = a2;
    if (!(_DWORD)v5)
      goto LABEL_20;
    LODWORD(v29) = 0;
    goto LABEL_51;
  }
  v29 = (a2 - 1);
  do
  {
    if (v29 >= a2)
      goto LABEL_190;
    v30 = a1[v29];
    v8 = v30 > 0x20;
    v31 = (1 << v30) & 0x100003600;
    if (v8 || v31 == 0)
      break;
    --v29;
  }
  while ((_DWORD)v29);
  if ((_DWORD)v5 || (v2 = a2, (_DWORD)v29 != v4))
  {
LABEL_51:
    v2 = (v29 - v5 + 1);
    v3 = v25;
    if ((unint64_t)a2 - v5 >= v2)
      goto LABEL_20;
    goto LABEL_190;
  }
LABEL_20:
  if (!(_DWORD)v2)
  {
LABEL_40:
    v18 = 0;
    v19 = -16777216;
    goto LABEL_158;
  }
  if ((_DWORD)v2 == 11)
  {
    if ((v2 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)v3 & 0xDF) != 0x54
        || (*((_BYTE *)v3 + 1) & 0xDF) != 0x52
        || (v3[1] & 0xDF) != 0x41
        || (*((_BYTE *)v3 + 3) & 0xDF) != 0x4E
        || (v3[2] & 0xDF) != 0x53
        || (*((_BYTE *)v3 + 5) & 0xDF) != 0x50
        || (v3[3] & 0xDF) != 0x41
        || (*((_BYTE *)v3 + 7) & 0xDF) != 0x52
        || (v3[4] & 0xDF) != 0x45
        || (*((_BYTE *)v3 + 9) & 0xDF) != 0x4E)
      {
        goto LABEL_22;
      }
      v86 = *((unsigned __int8 *)v3 + 10);
LABEL_171:
      if ((v86 & 0xFFFFFFDF) != 0x54)
        goto LABEL_22;
LABEL_172:
      v17 = 0;
      v18 = 0;
      v19 = 0;
      return v19 & 0xFFFFFF00 | v18 | (unint64_t)(v17 << 32);
    }
LABEL_191:
    if ((*v3 & 0xFFDF) != 0x54
      || (v3[1] & 0xFFDF) != 0x52
      || (v3[2] & 0xFFDF) != 0x41
      || (v3[3] & 0xFFDF) != 0x4E
      || (v3[4] & 0xFFDF) != 0x53
      || (v3[5] & 0xFFDF) != 0x50
      || (v3[6] & 0xFFDF) != 0x41
      || (v3[7] & 0xFFDF) != 0x52
      || (v3[8] & 0xFFDF) != 0x45
      || (v3[9] & 0xFFDF) != 0x4E)
    {
      goto LABEL_22;
    }
    v86 = v3[10];
    goto LABEL_171;
  }
LABEL_22:
  v15 = WebCore::CSSParserFastPaths::parseNamedColor(v3, (const char *)(a2 & 0xFFFFFF0000000000 | v2 & 0xFFFFFFFFFFLL));
  v17 = BYTE4(v15);
  if (BYTE4(v15))
  {
    v18 = v15;
    v19 = v15 & 0xFFFFFF00;
    return v19 & 0xFFFFFF00 | v18 | (unint64_t)(v17 << 32);
  }
  if ((_DWORD)v2 != 4)
  {
    v97 = (WTF *)v99;
    v24 = (int32x2_t)130;
    v98 = 130;
    if (!BYTE4(v2))
    {
      v20 = *v3;
      goto LABEL_55;
    }
    goto LABEL_64;
  }
  if (BYTE4(v2))
  {
    if (*(_BYTE *)v3 == 35)
    {
      v34 = *((unsigned __int8 *)v3 + 1);
      if (v34 - 48 < 0xA || (v34 | 0x20) - 97 < 6)
      {
        v22 = *((unsigned __int8 *)v3 + 2);
        if (v22 - 48 < 0xA || (v22 | 0x20) - 97 < 6)
        {
          v23 = *((unsigned __int8 *)v3 + 3);
          if (v23 - 48 < 0xA || (v23 | 0x20) - 97 <= 5)
          {
            if (v34 >= 0x41)
              v88 = (v34 + 9) & 0xF;
            else
              v88 = v34 - 48;
LABEL_180:
            v89 = v22 < 0x41;
            v90 = v22 - 48;
            v91 = (v22 + 9) & 0xF;
            if (v89)
              v91 = v90;
            v92 = 17 * v88;
            v93 = 17 * v91;
            if (v23 >= 0x41)
              v94 = ((_BYTE)v23 + 9) & 0xF;
            else
              v94 = v23 - 48;
            v19 = (v93 << 8) | (1114112 * v94) | 0xFF000000;
            v18 = v92;
            goto LABEL_158;
          }
        }
      }
    }
    v97 = (WTF *)v99;
    v24 = (int32x2_t)130;
    v98 = 130;
LABEL_64:
    v33 = 0;
    v20 = *(unsigned __int8 *)v3;
    goto LABEL_65;
  }
  v20 = *v3;
  if (v20 == 35)
  {
    v21 = v3[1];
    if (v21 - 48 < 0xA || (unsigned __int16)((v21 | 0x20) - 97) < 6u)
    {
      v22 = v3[2];
      if (v22 - 48 < 0xA || (unsigned __int16)((v22 | 0x20) - 97) < 6u)
      {
        v23 = v3[3];
        if (v23 - 48 < 0xA || (unsigned __int16)((v23 | 0x20) - 97) < 6u)
        {
          v88 = (v21 + 9) & 0xF;
          if (v21 < 0x41)
            v88 = v21 - 48;
          goto LABEL_180;
        }
      }
    }
  }
  v97 = (WTF *)v99;
  v24 = (int32x2_t)130;
  v98 = 130;
LABEL_55:
  v33 = 1;
LABEL_65:
  if ((v20 == 35) >= v2)
  {
    v18 = 0;
    v19 = -16777216;
    v50 = (WTF *)v99;
    goto LABEL_155;
  }
  v35 = 0;
  v36 = v20 == 35;
  while (1)
  {
    v37 = v35;
    if (v35 > 0x7F)
      break;
    if (v33)
    {
      v38 = v3[v36];
      if ((v38 - 48) < 0xA || (v38 | 0x20u) - 97 < 6)
      {
        LOBYTE(v40) = v3[v36];
LABEL_78:
        if (v35 == (_DWORD)v98)
        {
          v42 = v35 + 1;
          v43 = v37 + (v37 >> 2);
          if (v43 >= 0x10)
            v44 = v43 + 1;
          else
            v44 = 16;
          if (v44 <= v42)
            v45 = v37 + 1;
          else
            v45 = v44;
          v46 = v97;
          if (v45 < 0x83)
          {
            v97 = (WTF *)v99;
            LODWORD(v98) = 130;
            v47 = (WTF *)v99;
          }
          else
          {
            if (HIDWORD(v45))
            {
              __break(0xC471u);
              JUMPOUT(0x195BD2A5CLL);
            }
            v47 = (WTF *)WTF::fastMalloc((WTF *)v45);
            LODWORD(v98) = v45;
            v97 = v47;
          }
          memcpy(v47, v46, v37);
          if (v99 != (_BYTE *)v46 && v46)
          {
            if (v97 == v46)
            {
              v97 = 0;
              LODWORD(v98) = 0;
            }
            WTF::fastFree(v46, (void *)v16);
          }
          *((_BYTE *)v97 + HIDWORD(v98)) = v40;
        }
        else
        {
          *((_BYTE *)v97 + v35) = v40;
        }
        goto LABEL_99;
      }
    }
    else
    {
      v40 = *((unsigned __int8 *)v3 + v36);
      if ((v40 - 48) < 0xA || (v40 | 0x20u) - 97 < 6)
        goto LABEL_78;
    }
    v96 = 48;
    if (v35 == (_DWORD)v98)
    {
      v48 = WTF::Vector<char,130ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v97, (WTF *)(v35 + 1), (unint64_t)&v96);
      *((_BYTE *)v97 + HIDWORD(v98)) = *v48;
    }
    else
    {
      *((_BYTE *)v97 + v35) = 48;
    }
LABEL_99:
    v35 = ++HIDWORD(v98);
    if ((_DWORD)v2 == (_DWORD)++v36)
    {
      if (!v35)
      {
        v18 = 0;
        v19 = -16777216;
        v50 = v97;
        goto LABEL_155;
      }
      v37 = v35;
      break;
    }
  }
  v96 = 48;
  if (v35 == (_DWORD)v98)
  {
    v49 = WTF::Vector<char,130ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v97, (WTF *)(v37 + 1), (unint64_t)&v96);
    *((_BYTE *)v97 + HIDWORD(v98)) = *v49;
  }
  else
  {
    *((_BYTE *)v97 + v37) = 48;
  }
  v51 = (HIDWORD(v98) + 1);
  HIDWORD(v98) = v51;
  v96 = 48;
  if ((_DWORD)v51 == (_DWORD)v98)
  {
    v52 = WTF::Vector<char,130ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v97, (WTF *)(v51 + 1), (unint64_t)&v96);
    *((_BYTE *)v97 + HIDWORD(v98)) = *v52;
  }
  else
  {
    *((_BYTE *)v97 + v51) = 48;
  }
  v53 = HIDWORD(v98);
  v54 = (HIDWORD(v98) + 1);
  HIDWORD(v98) = v54;
  if (v54 > 5)
  {
    v60 = v54 / 3;
    if (v54 / 3 >= 8)
      v61 = 8;
    else
      v61 = v54 / 3;
    v62 = v60 - v61;
    if (v54 <= v60 - v61)
      goto LABEL_214;
    v63 = 0;
    v64 = 3 * v60 - v61;
    v65 = 2 * v60 - v61;
    v50 = v97;
    v66 = ~v53 + v62;
    while (1)
    {
      v67 = v64 + v63;
      v68 = v65 + v63;
      v69 = *((char *)v97 + v62 + v63);
      if (v69 != 48)
        break;
      if (v68 >= v54)
      {
        __break(0xC471u);
        JUMPOUT(0x195BD2A4CLL);
      }
      if (*((_BYTE *)v97 + v65 + v63) != 48)
        break;
      if (v67 >= v54)
      {
        __break(0xC471u);
        JUMPOUT(0x195BD2A54);
      }
      if (v61 < 3 || *((_BYTE *)v97 + v64 + v63) != 48)
        break;
      ++v63;
      --v61;
      if (!(v66 + v63))
        goto LABEL_214;
    }
    v70 = v62 + v63 + 1;
    if (v54 <= v70)
    {
      __break(0xC471u);
      JUMPOUT(0x195BD2A7CLL);
    }
    v71 = *((char *)v97 + v70);
    if (v69 >= 65)
      v72 = 9;
    else
      v72 = 0;
    if (v71 >= 65)
      v73 = (v71 + 9) & 0xF;
    else
      v73 = v71 - 48;
    if (v54 <= v68)
    {
      __break(0xC471u);
      JUMPOUT(0x195BD2A84);
    }
    v74 = v65 + v63 + 1;
    if (v54 <= v74)
    {
      __break(0xC471u);
      JUMPOUT(0x195BD2A8CLL);
    }
    v75 = *((char *)v97 + v68);
    v76 = *((char *)v97 + v74);
    if (v75 >= 65)
      v77 = 9;
    else
      v77 = 0;
    v16 = (v76 - 48);
    if (v76 >= 65)
      v78 = (v76 + 9) & 0xF;
    else
      v78 = v76 - 48;
    if (v54 <= v67)
    {
      __break(0xC471u);
      JUMPOUT(0x195BD2A94);
    }
    v79 = v64 + v63 + 1;
    if (v54 <= v79)
    {
LABEL_214:
      __break(0xC471u);
      JUMPOUT(0x195BD26E4);
    }
    v80 = *((char *)v97 + v67);
    v81 = v78 | (16 * (v77 + v75));
    v82 = *((char *)v97 + v79);
    if (v80 >= 65)
      v83 = 9;
    else
      v83 = 0;
    v84 = v83 + v80;
    if (v82 >= 65)
      v85 = ((_BYTE)v82 + 9) & 0xF;
    else
      v85 = v82 - 48;
    v19 = (v84 << 20) | (v85 << 16) | (v81 << 8) | 0xFF000000;
    v18 = v73 | (16 * (v72 + v69));
  }
  else
  {
    if (!(_DWORD)v54)
    {
      __break(0xC471u);
      JUMPOUT(0x195BD2A64);
    }
    v50 = v97;
    v55 = *(char *)v97;
    if (v55 >= 65)
      v56 = (*(_BYTE *)v97 + 9) & 0xF;
    else
      v56 = v55 - 48;
    if (!(_DWORD)v53)
    {
      __break(0xC471u);
      JUMPOUT(0x195BD2A6CLL);
    }
    if (v54 <= 2)
    {
      __break(0xC471u);
      JUMPOUT(0x195BD2A74);
    }
    v24.i8[0] = *((_BYTE *)v97 + 1);
    v24.i8[4] = *((_BYTE *)v97 + 2);
    v57 = (int8x8_t)vcgt_s32((int32x2_t)0x4100000041, vshr_n_s32(vshl_n_s32(v24, 0x18uLL), 0x18uLL));
    v58 = (int8x8_t)vshl_u32((uint32x2_t)vand_s8(vorr_s8(vand_s8((int8x8_t)vadd_s32(v24, (int32x2_t)0xD0000000D0), v57), vand_s8(vbic_s8((int8x8_t)vadd_s32(v24, (int32x2_t)0x900000009), v57), (int8x8_t)0xF0000000FLL)), (int8x8_t)0xFF000000FFLL), (uint32x2_t)0x1000000008);
    v59 = vorr_s8((int8x8_t)vdup_lane_s32((int32x2_t)v58, 1), v58);
    v19 = v59.i32[0] | 0xFF000000;
    v18 = v59.i8[0] | v56;
  }
LABEL_155:
  if (v99 != (_BYTE *)v50 && v50)
  {
    v97 = 0;
    LODWORD(v98) = 0;
    WTF::fastFree(v50, (void *)v16);
  }
LABEL_158:
  v17 = 1;
  return v19 & 0xFFFFFF00 | v18 | (unint64_t)(v17 << 32);
}

unsigned int *WebCore::HTMLElement::addHTMLColorToStyle(uint64_t a1, WebCore::MutableStyleProperties *a2, int a3, uint64_t *a4)
{
  uint64_t v6;
  unsigned __int16 *v7;
  unint64_t v8;
  unsigned int *result;
  int *v10;
  WTF::StringImpl *v11;
  int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int *v16;
  int *v17;

  v6 = *a4;
  if (*a4)
  {
    v7 = *(unsigned __int16 **)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  result = (unsigned int *)WebCore::HTMLElement::parseLegacyColorValue(v7, v8);
  if (BYTE4(result))
  {
    {
      WebCore::CSSValuePool::singleton(void)::pool = 0;
      unk_1ECE88B90 = 0;
      qword_1ECE88B98 = 0;
    }
    v15 = bswap32(result) | 0x1104000000000000;
    WebCore::CSSValuePool::createColorValue((uint64_t)&WebCore::CSSValuePool::singleton(void)::pool, (const WebCore::Color *)&v15, &v16);
    v10 = v16;
    v16 = 0;
    v17 = v10;
    WebCore::MutableStyleProperties::setProperty(a2, a3, &v17, 0);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*v12 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v11);
      else
        *v12 -= 2;
    }
    result = (unsigned int *)v16;
    v16 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v11);
      else
        *result -= 2;
    }
    if ((v15 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
      do
      {
        v13 = __ldaxr(result);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, result));
      if (!v14)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v11);
      }
    }
  }
  return result;
}

WebCore::EventNames **WebCore::HTMLElement::willRespondToMouseMoveEvents(WebCore::EventNames **this)
{
  if (((*((uint64_t (**)(WebCore::EventNames **))*this + 120))(this) & 1) != 0)
    return 0;
  else
    return WebCore::Node::willRespondToMouseMoveEvents(this);
}

uint64_t WebCore::HTMLElement::willRespondToMouseClickEventsWithEditability(uint64_t a1, int a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1) & 1) != 0)
    return 0;
  else
    return WebCore::Node::willRespondToMouseClickEventsWithEditability(a1, a2);
}

uint64_t WebCore::HTMLElement::canBeActuallyDisabled(WebCore::HTMLElement *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
  if (v1 == *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24)
    || v1 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
    || v1 == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24)
    || v1 == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24)
    || v1 == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
    || v1 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24)
    || v1 == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
  {
    return 1;
  }
  result = (*(uint64_t (**)(WebCore::HTMLElement *))(*(_QWORD *)this + 856))(this);
  if ((_DWORD)result)
    return WebCore::HTMLMaybeFormAssociatedCustomElement::isFormAssociatedCustomElement(this);
  return result;
}

uint64_t WebCore::HTMLElement::isActuallyDisabled(WebCore::HTMLElement *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
  if (v2 == *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24)
    || v2 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
    || v2 == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24)
    || v2 == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24)
    || v2 == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
    || v2 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24)
    || v2 == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24)
    || (*(unsigned int (**)(WebCore::HTMLElement *))(*(_QWORD *)this + 856))(this)
    && WebCore::HTMLMaybeFormAssociatedCustomElement::isFormAssociatedCustomElement(this))
  {
    return (*(uint64_t (**)(WebCore::HTMLElement *))(*(_QWORD *)this + 960))(this);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::HTMLElement::labels@<X0>(WebCore::HTMLElement *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t *v5;
  uint64_t v6;
  WebCore::NodeListsNodeData *v7;
  WTF *v8;
  void *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  WTF::StringImpl *v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  int v27;
  _QWORD *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;

  if (!(*(unsigned int (**)(WebCore::HTMLElement *))(*(_QWORD *)this + 1192))(this))
  {
    result = 0;
    goto LABEL_27;
  }
  v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v5)
  {
    WebCore::Node::materializeRareData(this);
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v6 = *v5;
  if (!*v5)
  {
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_QWORD *)(v6 + 32) = 0;
    v7 = (WebCore::NodeListsNodeData *)*v5;
    *v5 = v6;
    if (v7)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v7, v4);
      WTF::fastFree(v8, v9);
      v6 = *v5;
    }
  }
  v10 = (uint64_t *)(v6 + 16);
  v11 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v12 = *v10;
  if (*v10
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::expand((uint64_t *)(v6 + 16), 0), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = ((*((_DWORD *)v11 + 4) >> 8) + 2) & v13;
  v15 = (unsigned __int8 *)(v12 + 24 * v14);
  v16 = *v15;
  v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
  if (*v15)
    v18 = 0;
  else
    v18 = v17 == 0;
  if (v18)
  {
LABEL_17:
    *v15 = 2;
    *((_QWORD *)v15 + 1) = v11;
    *((_QWORD *)v15 + 2) = 0;
    v19 = *v10;
    if (*v10)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v22 = *v10;
    if (*v10)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        goto LABEL_26;
    }
    else if (3 * v25 > 4 * v24)
    {
LABEL_26:
      result = bmalloc::api::isoAllocate();
      *(_DWORD *)(result + 16) = 1;
      *((_DWORD *)this + 6) += 2;
      *(_QWORD *)(result + 24) = this;
      *(_WORD *)(result + 32) = 4;
      *(_OWORD *)(result + 40) = 0u;
      *(_OWORD *)(result + 56) = 0u;
      *(_QWORD *)(result + 72) = 0;
      *(_BYTE *)(result + 80) &= 0xFCu;
      *(_QWORD *)result = off_1E33D56F0;
      *(_QWORD *)(result + 8) = 0;
      *((_QWORD *)v15 + 2) = result;
      goto LABEL_27;
    }
    v15 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::expand(v10, v15);
    goto LABEL_26;
  }
  v26 = 0;
  v27 = 1;
  while (1)
  {
    v28 = v26;
    v26 = v15;
    if (v16 != 255)
    {
      v26 = v28;
      if (v16 == 2 && v17 == v11)
        break;
    }
    v14 = ((_DWORD)v14 + v27) & v13;
    v15 = (unsigned __int8 *)(v12 + 24 * v14);
    v16 = *v15;
    v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
    ++v27;
    if (*v15)
      v29 = 0;
    else
      v29 = v17 == 0;
    if (v29)
    {
      if (v26)
      {
        *v26 = 0;
        v26[1] = 0;
        v26[2] = 0;
        --*(_DWORD *)(*v10 - 16);
        v15 = (unsigned __int8 *)v26;
      }
      goto LABEL_17;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      v30 = v12;
      v31 = v14;
      WTF::StringImpl::destroy(v11, v4);
      v14 = v31;
      v12 = v30;
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  result = *(_QWORD *)(v12 + 24 * v14 + 16);
  ++*(_DWORD *)(result + 16);
LABEL_27:
  *a2 = result;
  return result;
}

uint64_t *WebCore::HTMLElement::autocapitalize(WebCore::HTMLElement *this)
{
  uint64_t *result;
  uint64_t v2;

  switch((*(unsigned int (**)(WebCore::HTMLElement *))(*(_QWORD *)this + 1224))(this))
  {
    case 1u:
      result = &WebCore::noneAtomData;
      break;
    case 2u:
      result = &WebCore::stringForAutocapitalizeType(WebCore::AutocapitalizeType)::valueWords;
      {
        WTF::AtomStringImpl::add();
        result = &WebCore::stringForAutocapitalizeType(WebCore::AutocapitalizeType)::valueWords;
        WebCore::stringForAutocapitalizeType(WebCore::AutocapitalizeType)::valueWords = v2;
      }
      break;
    case 3u:
      result = &WebCore::stringForAutocapitalizeType(WebCore::AutocapitalizeType)::valueSentences;
      {
        WTF::AtomStringImpl::add();
        result = &WebCore::stringForAutocapitalizeType(WebCore::AutocapitalizeType)::valueSentences;
        WebCore::stringForAutocapitalizeType(WebCore::AutocapitalizeType)::valueSentences = v2;
      }
      break;
    case 4u:
      result = &WebCore::stringForAutocapitalizeType(WebCore::AutocapitalizeType)::valueAllCharacters;
      {
        WTF::AtomStringImpl::add();
        result = &WebCore::stringForAutocapitalizeType(WebCore::AutocapitalizeType)::valueAllCharacters;
        WebCore::stringForAutocapitalizeType(WebCore::AutocapitalizeType)::valueAllCharacters = v2;
      }
      break;
    default:
      result = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
  }
  return result;
}

uint64_t WebCore::HTMLElement::autocapitalizeType(WebCore::HTMLElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return WebCore::autocapitalizeTypeForAttributeValue(MEMORY[0x1E0CBF2F8]);
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_4;
    return WebCore::autocapitalizeTypeForAttributeValue(MEMORY[0x1E0CBF2F8]);
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    return WebCore::autocapitalizeTypeForAttributeValue(MEMORY[0x1E0CBF2F8]);
LABEL_4:
  v4 = v4;
  for (i = (uint64_t *)(v3 + 8); ; i += 2)
  {
    v6 = *(i - 1);
    if (v6 == WebCore::HTMLNames::autocapitalizeAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::autocapitalizeAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::autocapitalizeAttr + 32))
    {
      break;
    }
    if (!--v4)
      return WebCore::autocapitalizeTypeForAttributeValue(MEMORY[0x1E0CBF2F8]);
  }
  return WebCore::autocapitalizeTypeForAttributeValue(i);
}

WTF::StringImpl *WebCore::HTMLElement::setAutocapitalize(WebCore::HTMLElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::autocapitalizeAttr, a2, 0);
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::autocapitalizeAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::autocapitalizeAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::autocapitalizeAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::autocapitalizeAttr, a2, 0);
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
}

uint64_t WebCore::HTMLElement::shouldAutocorrect(WebCore::HTMLElement *this)
{
  uint64_t *v1;

  v1 = (uint64_t *)WebCore::Element::attributeWithoutSynchronization((uint64_t)this, &WebCore::HTMLNames::autocorrectAttr);
  return WTF::equalLettersIgnoringASCIICase(v1, "off", 4uLL) ^ 1;
}

WTF::StringImpl *WebCore::HTMLElement::setAutocorrect(WebCore::HTMLElement *this, int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_13;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v2 + 40);
    v5 = *(_DWORD *)(v2 + 52);
    if (!v5)
    {
LABEL_13:
      v6 = 0xFFFFFFFFLL;
      goto LABEL_14;
    }
  }
  else
  {
    v4 = (uint64_t *)(v2 + 32);
    v5 = v3 >> 5;
    if (!(v3 >> 5))
      goto LABEL_13;
  }
  v6 = 0;
  while (1)
  {
    v7 = *v4;
    if (*v4 == WebCore::HTMLNames::autocorrectAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::autocorrectAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::autocorrectAttr + 32))
    {
      break;
    }
    ++v6;
    v4 += 2;
    if (v5 == v6)
      goto LABEL_13;
  }
LABEL_14:
  if (a2)
    v8 = &WebCore::onAtomData;
  else
    v8 = &WebCore::offAtomData;
  return WebCore::Element::setAttributeInternal(this, v6, (WebCore::TreeScope *)&WebCore::HTMLNames::autocorrectAttr, (WTF::StringImpl **)v8, 0);
}

uint64_t *WebCore::HTMLElement::inputMode(WebCore::HTMLElement *this, const WTF::AtomString *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WTF **v7;
  uint64_t v8;
  uint64_t *result;
  uint64_t v10;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (WTF **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (WTF **)(v5 + 8);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 1);
    if (v8 == WebCore::HTMLNames::inputmodeAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::inputmodeAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::inputmodeAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (WTF **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  switch(WebCore::inputModeForAttributeValue(v7, a2, a3))
  {
    case 1u:
      result = &WebCore::noneAtomData;
      break;
    case 2u:
      result = &WebCore::textAtomData;
      break;
    case 3u:
      result = &WebCore::telAtomData;
      break;
    case 4u:
      result = &WebCore::urlAtomData;
      break;
    case 5u:
      result = &WebCore::emailAtomData;
      break;
    case 6u:
      result = &WebCore::InputModeNames::numeric(void)::mode;
      {
        WTF::AtomStringImpl::add();
        result = &WebCore::InputModeNames::numeric(void)::mode;
        WebCore::InputModeNames::numeric(void)::mode = v10;
      }
      break;
    case 7u:
      result = &WebCore::InputModeNames::decimal(void)::mode;
      {
        WTF::AtomStringImpl::add();
        result = &WebCore::InputModeNames::decimal(void)::mode;
        WebCore::InputModeNames::decimal(void)::mode = v10;
      }
      break;
    case 8u:
      result = &WebCore::searchAtomData;
      break;
    default:
      result = (uint64_t *)MEMORY[0x1E0CBF3B8];
      break;
  }
  return result;
}

uint64_t WebCore::HTMLElement::canonicalEnterKeyHint(WebCore::HTMLElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    goto LABEL_12;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_4;
LABEL_12:
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    goto LABEL_12;
LABEL_4:
  v4 = v4;
  v5 = (uint64_t *)(v3 + 8);
  while (1)
  {
    v6 = *(v5 - 1);
    if (v6 == WebCore::HTMLNames::enterkeyhintAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::enterkeyhintAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::enterkeyhintAttr + 32))
    {
      break;
    }
    v5 += 2;
    if (!--v4)
    {
      v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v7 = *v5;
  if (v7)
    return WebCore::enterKeyHintForAttributeValue(*(unsigned __int16 **)(v7 + 8), *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32));
  else
    return WebCore::enterKeyHintForAttributeValue(0, 0x100000000);
}

uint64_t WebCore::HTMLElement::shouldExtendSelectionToTargetNode(WebCore::HTMLElement *this, const WebCore::Node *a2, const WebCore::VisibleSelection *a3)
{
  char isOverlayText;
  const WebCore::SimpleRange *v5;
  const WebCore::Node *v6;
  int isInsideOverlay;
  WebCore::Document *v8;
  WebCore::Document *v9;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  WebCore::Document *v15[2];
  WebCore::Document *v16;
  char v17;

  WebCore::VisibleSelection::range(a2, (uint64_t)v15);
  if (v17)
  {
    isInsideOverlay = WebCore::ImageOverlay::isInsideOverlay((WebCore::ImageOverlay *)v15, v5);
    if (isInsideOverlay)
      isOverlayText = WebCore::ImageOverlay::isOverlayText(this, v6);
    if (v17)
    {
      v8 = v16;
      v16 = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 6) == 2)
        {
          v11 = *((_WORD *)v8 + 15);
          if ((v11 & 0x400) == 0)
          {
            v12 = *((_WORD *)v8 + 14);
            if ((v12 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef(v8, v6);
            }
            else
            {
              if ((v12 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)v8 + 20) + 16))(*((_QWORD *)v8 + 20));
                v11 = *((_WORD *)v8 + 15);
              }
              *((_WORD *)v8 + 15) = v11 | 0x400;
              (*(void (**)(WebCore::Document *))(*(_QWORD *)v8 + 72))(v8);
            }
          }
        }
        else
        {
          *((_DWORD *)v8 + 6) -= 2;
        }
      }
      v9 = v15[0];
      v15[0] = 0;
      if (v9)
      {
        if (*((_DWORD *)v9 + 6) == 2)
        {
          v13 = *((_WORD *)v9 + 15);
          if ((v13 & 0x400) == 0)
          {
            v14 = *((_WORD *)v9 + 14);
            if ((v14 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef(v9, v6);
            }
            else
            {
              if ((v14 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)v9 + 20) + 16))(*((_QWORD *)v9 + 20));
                v13 = *((_WORD *)v9 + 15);
              }
              *((_WORD *)v9 + 15) = v13 | 0x400;
              (*(void (**)(WebCore::Document *))(*(_QWORD *)v9 + 72))(v9);
            }
          }
        }
        else
        {
          *((_DWORD *)v9 + 6) -= 2;
        }
      }
    }
  }
  else
  {
    LOBYTE(isInsideOverlay) = 0;
  }
  return isOverlayText & 1 | ((isInsideOverlay & 1) == 0);
}

uint64_t WebCore::HTMLElement::attachInternals@<X0>(WebCore::HTMLElement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  void *v10;
  unsigned int v11;
  _DWORD *v12;

  v3 = *((_QWORD *)this + 9);
  if ((v3 & 0xFFFFFFFFFFFFLL) != 0 && (v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 0x60)) != 0)
  {
    ++*(_DWORD *)v4;
    if ((*(_BYTE *)(*(_QWORD *)(v4 + 8) + 160) & 1) != 0
      || *(_BYTE *)(v4 + 88)
      || (v7 = v3 & 0x3000000000000000, v7 != 0x2000000000000000)
      && (v7 != 0x3000000000000000 || (*((_WORD *)this + 14) & 0x100) != 0))
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a2 = 6;
      *(_DWORD *)(a2 + 16) = 1;
    }
    else
    {
      *(_BYTE *)(v4 + 88) = 1;
      v8 = bmalloc::api::isoAllocate();
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v8 + 8) = 1;
      v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
      if (v9)
      {
        do
          v11 = __ldaxr(v9);
        while (__stlxr(v11 + 1, v9));
      }
      *(_QWORD *)(v8 + 16) = v9;
      v12 = 0;
      *(_QWORD *)a2 = v8;
      *(_DWORD *)(a2 + 16) = 0;
      result = (uint64_t)WTF::Ref<WebCore::BarProp,WTF::RawPtrTraits<WebCore::BarProp>,WTF::DefaultRefDerefTraits<WebCore::BarProp>>::~Ref(&v12, v10);
    }
    if (*(_DWORD *)v4)
    {
      --*(_DWORD *)v4;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 6;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

unsigned int *WebCore::HTMLElement::showPopover@<X0>(WebCore::HTMLElement *this@<X0>, const WebCore::HTMLFormControlElement *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned int *result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  void *v21;
  int v22;
  int v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  WTF::String *v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  __int16 v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  __int16 v58;
  __int16 v59;
  __int16 v60;
  int v61;
  BOOL v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  WTF *v69;
  __int16 v70;
  __int16 v71;
  __int16 v72;
  __int16 v73;
  _BYTE *v74;
  WebCore::Node *v75;
  unsigned int v76;
  WebCore::HTMLElement *v77;
  uint64_t v78;
  WTF *v79;
  _BYTE *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WebCore::SecurityOrigin *v85;
  WebCore::SecurityOrigin *v86;
  WTF::StringImpl *v87;
  const WebCore::SecurityOrigin *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  WTF *v92;
  __int16 v93;
  __int16 v94;
  __int16 v95;
  __int16 v96;
  uint64_t v97;
  const WebCore::HTMLFormControlElement *i;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  const WebCore::HTMLFormControlElement *v102;
  WebCore::AXObjectCache *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  _BOOL4 v113;
  WTF::StringImpl *v114;
  WebCore::HTMLElement *v115;
  uint64_t v116;
  unsigned __int8 *v117;
  uint64_t v118[2];
  int v119;
  char v120[8];
  uint64_t v121;
  int v122;
  char v123;

  result = (unsigned int *)WebCore::checkPopoverValidity(v120, (uint64_t)this, 0, 0);
  if (v122)
  {
    if (v122 == 1)
    {
      v10 = v121;
      v121 = 0;
      *(_BYTE *)a3 = v120[0];
      *(_QWORD *)(a3 + 8) = v10;
      *(_BYTE *)(a3 + 16) = 1;
      goto LABEL_104;
    }
LABEL_200:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_201;
  }
  if (!v120[0])
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    goto LABEL_104;
  }
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v40 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE8);
    if (v40)
    {
      if (a2)
      {
        result = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)a2);
        if (result)
        {
          do
            v41 = __ldaxr(result);
          while (__stlxr(v41 + 1, result));
        }
      }
      else
      {
        result = 0;
      }
      v65 = *(_QWORD *)(v40 + 16);
      *(_QWORD *)(v40 + 16) = result;
      if (v65)
      {
        do
        {
          v66 = __ldaxr((unsigned int *)v65);
          v67 = v66 - 1;
        }
        while (__stlxr(v67, (unsigned int *)v65));
        if (!v67)
        {
          atomic_store(1u, (unsigned int *)v65);
          v68 = *(unsigned int *)(v65 + 28);
          if ((_DWORD)v68)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v65 + 16), (WTF::StringImpl *)(*(_QWORD *)(v65 + 16) + 32 * v68));
          v69 = *(WTF **)(v65 + 16);
          if (v69)
          {
            *(_QWORD *)(v65 + 16) = 0;
            *(_DWORD *)(v65 + 24) = 0;
            WTF::fastFree(v69, v9);
          }
          result = (unsigned int *)WTF::fastFree((WTF *)v65, v9);
        }
      }
    }
  }
  *((_DWORD *)this + 6) += 2;
  v11 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE8);
  v4 = *(unsigned __int8 *)(v11 + 24);
  *(_BYTE *)(v11 + 24) = 1;
  a2 = *(const WebCore::HTMLFormControlElement **)(*((_QWORD *)this + 5) + 8);
  *((_DWORD *)a2 + 6) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow((WebCore *)result);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = v114;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = v114;
  v3 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v3);
  *(_QWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 16) = 1;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(v3 + 20) & 0xFFC00000 | 0x2F0204 | (*(_QWORD *)(v14 + 272) != 0);
  v19 = *(_DWORD **)(v14 + 272);
  if (v19)
    *v19 += 2;
  *(_QWORD *)(v3 + 24) = v19;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = v18;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)v3 = off_1E33A8648;
  if (v15)
    *(_DWORD *)v15 += 2;
  *(_QWORD *)(v3 + 72) = v15;
  if (v16)
  {
    v20 = *(_DWORD *)v16;
    *(_DWORD *)v16 += 2;
    *(_QWORD *)(v3 + 80) = v16;
    if (v20)
      *(_DWORD *)v16 = v20;
    else
      WTF::StringImpl::destroy(v16, v17);
  }
  else
  {
    *(_QWORD *)(v3 + 80) = 0;
  }
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v17);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = (unsigned int *)(*(uint64_t (**)(WebCore::HTMLElement *, uint64_t))(*(_QWORD *)this + 48))(this, v3);
  if ((*(_BYTE *)(v3 + 20) & 0xC0) != 0)
  {
LABEL_22:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    goto LABEL_96;
  }
  WebCore::checkPopoverValidity((char *)v118, (uint64_t)this, 0, (uint64_t)a2);
  LOBYTE(v114) = 0;
  LODWORD(v116) = -1;
  v22 = v119;
  if (v119 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, uint64_t *))off_1E33BC580[v119])(&v123, &v114, v118);
    LODWORD(v116) = v22;
  }
  result = (unsigned int *)std::__variant_detail::__impl<BOOL,WebCore::Exception>::__swap[abi:sn180100]((uint64_t)&v114, (uint64_t)v120);
  if ((_DWORD)v116 != -1)
    result = (unsigned int *)off_1E33BC570[v116](&v123, (uint64_t)&v114);
  if (v119 != -1)
    result = (unsigned int *)off_1E33BC570[v119]((char *)&v114, (uint64_t)v118);
  v23 = v122;
  if (v122)
    goto LABEL_31;
  if (!v120[0])
    goto LABEL_22;
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0
    || (v74 = *(_BYTE **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE8)) == 0
    || *v74 != 1)
  {
    v25 = 0;
    goto LABEL_36;
  }
  v75 = WebCore::Element::topmostPopoverAncestor(this, (void *)1);
  WebCore::Document::hideAllPopoversUntil(a2, v75, 0, v4 == 0);
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0
    || (v80 = *(_BYTE **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE8)) == 0
    || *v80 != 1)
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_BYTE *)(a3 + 16) = 1;
    goto LABEL_96;
  }
  WebCore::checkPopoverValidity((char *)v118, (uint64_t)this, 0, (uint64_t)a2);
  LOBYTE(v114) = 0;
  LODWORD(v116) = -1;
  v81 = v119;
  if (v119 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, uint64_t *))off_1E33BC580[v119])(&v123, &v114, v118);
    LODWORD(v116) = v81;
  }
  result = (unsigned int *)std::__variant_detail::__impl<BOOL,WebCore::Exception>::__swap[abi:sn180100]((uint64_t)&v114, (uint64_t)v120);
  if ((_DWORD)v116 != -1)
    result = (unsigned int *)off_1E33BC570[v116](&v123, (uint64_t)&v114);
  if (v119 != -1)
    result = (unsigned int *)off_1E33BC570[v119]((char *)&v114, (uint64_t)v118);
  v23 = v122;
  if (v122)
  {
LABEL_31:
    if (v23 == 1)
    {
      v24 = v121;
      v121 = 0;
      *(_BYTE *)a3 = v120[0];
      *(_QWORD *)(a3 + 8) = v24;
      *(_BYTE *)(a3 + 16) = 1;
      goto LABEL_96;
    }
    goto LABEL_200;
  }
  if (!v120[0])
    goto LABEL_22;
  v82 = *((_QWORD *)a2 + 389);
  if (v82)
  {
    if (!*(_DWORD *)(v82 - 12))
    {
LABEL_201:
      v82 = 0;
      goto LABEL_202;
    }
    v82 = **((_QWORD **)a2 + 391);
  }
LABEL_202:
  v25 = v82 == 0;
LABEL_36:
  v26 = *((_QWORD *)a2 + 156);
  if (v26)
    *(_DWORD *)(v26 + 24) += 2;
  WebCore::Element::addToTopLayer(this);
  v31 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE8);
  v32 = *(_QWORD *)(v31 + 8);
  *(_QWORD *)(v31 + 8) = 0;
  if (v32)
  {
    do
    {
      v33 = __ldaxr((unsigned int *)v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, (unsigned int *)v32));
    if (!v34)
    {
      atomic_store(1u, (unsigned int *)v32);
      v78 = *(unsigned int *)(v32 + 28);
      if ((_DWORD)v78)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v32 + 16), (WTF::StringImpl *)(*(_QWORD *)(v32 + 16) + 32 * v78));
      v79 = *(WTF **)(v32 + 16);
      if (v79)
      {
        *(_QWORD *)(v32 + 16) = 0;
        *(_DWORD *)(v32 + 24) = 0;
        WTF::fastFree(v79, v27);
      }
      WTF::fastFree((WTF *)v32, v27);
    }
  }
  if ((*((_BYTE *)this + 22) & 8) == 0)
    goto LABEL_67;
  v35 = (uint64_t *)*((_QWORD *)this + 5);
  v36 = v35[1];
  if (!*(_QWORD *)(v36 + 1944) || *(_BYTE *)(v36 + 3405))
    goto LABEL_67;
  if ((*((_BYTE *)this + 70) & 4) != 0)
  {
    v42 = *v35;
    v43 = (*(_WORD *)(v42 + 28) & 0x80) == 0 || v42 == 0;
    v44 = v42 + 216;
    if (v43)
      v44 = v36 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v44 + 236))
      goto LABEL_67;
  }
  v37 = *(_QWORD *)(v36 + 1272);
  if (v37)
  {
    if ((*(_BYTE *)(v37 + 70) & 4) != 0)
    {
LABEL_67:
      LOBYTE(v114) = 0;
      v116 = 0;
      v117 = 0;
      v115 = this;
      goto LABEL_68;
    }
  }
  if (*(_BYTE *)(v36 + 3362)
    || (v38 = *(unsigned __int8 *)(v36 + 3390), !*(_BYTE *)(v36 + 3390))
    && (*(_BYTE *)(v36 + 70) & 8) == 0
    && !*(_QWORD *)(v36 + 1560)
    && (v39 = *(_QWORD *)(v36 + 1328), !*(_BYTE *)(v39 + 233))
    && !*(_BYTE *)(v39 + 234))
  {
    LOBYTE(v114) = 1;
    v116 = 0;
    v117 = 0;
    v115 = this;
LABEL_125:
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v114, (WTF::StringImpl *)0x40, 1, 0);
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v115, (unsigned __int8 **)&v116);
    goto LABEL_68;
  }
  v61 = *(unsigned __int8 *)(v36 + 3391);
  if (v38)
    v62 = v61 == 0;
  else
    v62 = 0;
  v63 = !v62;
  LOBYTE(v114) = v63;
  v116 = 0;
  v117 = 0;
  v115 = this;
  if (!v62)
    goto LABEL_125;
LABEL_68:
  *(_BYTE *)(*(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE8) + 1) = 1;
  if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::dialogTag + 24))
  {
    v112 = v4;
    v113 = v25;
    if (WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::autofocusAttr, v28, v29, v30))
    {
      *((_DWORD *)this + 6) += 2;
      v118[0] = (uint64_t)this;
      v77 = this;
    }
    else
    {
      WebCore::autoFocusDelegate((uint64_t)v118, (uint64_t)this, 0);
      v77 = (WebCore::HTMLElement *)v118[0];
      if (!v118[0])
      {
LABEL_189:
        v4 = v112;
        v25 = v113;
        goto LABEL_71;
      }
    }
    (*(void (**)(WebCore::HTMLElement *))(*(_QWORD *)v77 + 696))(v77);
    v83 = *(_QWORD *)(*((_QWORD *)v77 + 5) + 8);
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v83 + 192), v84);
    v86 = v85;
    WebCore::Document::topOrigin((WebCore::Document *)v83, v87);
    if (WebCore::SecurityOrigin::isSameOriginAs(v86, v88))
    {
      v89 = WebCore::Document::topDocument(*(_QWORD *)(*((_QWORD *)v77 + 5) + 8));
      *(_DWORD *)(v89 + 24) += 2;
      WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::clear(v89 + 1216, v90);
      *(_BYTE *)(v89 + 3401) = 1;
      if (*(_DWORD *)(v89 + 24) == 2)
      {
        v95 = *(_WORD *)(v89 + 30);
        if ((v95 & 0x400) == 0)
        {
          v96 = *(_WORD *)(v89 + 28);
          if ((v96 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v89, v45);
          }
          else
          {
            if ((v96 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v89 + 160) + 16))(*(_QWORD *)(v89 + 160));
              v95 = *(_WORD *)(v89 + 30);
            }
            *(_WORD *)(v89 + 30) = v95 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v89 + 72))(v89);
          }
        }
      }
      else
      {
        *(_DWORD *)(v89 + 24) -= 2;
      }
    }
    if (*((_DWORD *)v77 + 6) == 2)
    {
      v93 = *((_WORD *)v77 + 15);
      if ((v93 & 0x400) == 0)
      {
        v94 = *((_WORD *)v77 + 14);
        if ((v94 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef(v77, v45);
        }
        else
        {
          if ((v94 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v77 + 20) + 16))(*((_QWORD *)v77 + 20));
            v93 = *((_WORD *)v77 + 15);
          }
          *((_WORD *)v77 + 15) = v93 | 0x400;
          (*(void (**)(WebCore::HTMLElement *))(*(_QWORD *)v77 + 72))(v77);
        }
      }
    }
    else
    {
      *((_DWORD *)v77 + 6) -= 2;
    }
    goto LABEL_189;
  }
  *((_DWORD *)this + 6) += 2;
  WebCore::HTMLDialogElement::runFocusingSteps(this);
  if (*((_DWORD *)this + 6) == 2)
  {
    v70 = *((_WORD *)this + 15);
    if ((v70 & 0x400) == 0)
    {
      v71 = *((_WORD *)this + 14);
      if ((v71 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef(this, v45);
      }
      else
      {
        if ((v71 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
          v70 = *((_WORD *)this + 15);
        }
        *((_WORD *)this + 15) = v70 | 0x400;
        (*(void (**)(WebCore::HTMLElement *))(*(_QWORD *)this + 72))(this);
      }
    }
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
LABEL_71:
  if (!v25)
    goto LABEL_78;
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v46 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE8);
    if (!v26)
      goto LABEL_74;
LABEL_155:
    v47 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v26);
    if (v47)
    {
      do
        v76 = __ldaxr(v47);
      while (__stlxr(v76 + 1, v47));
    }
    goto LABEL_75;
  }
  v46 = 0;
  if (v26)
    goto LABEL_155;
LABEL_74:
  v47 = 0;
LABEL_75:
  v48 = *(_QWORD *)(v46 + 8);
  *(_QWORD *)(v46 + 8) = v47;
  if (v48)
  {
    do
    {
      v49 = __ldaxr((unsigned int *)v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, (unsigned int *)v48));
    if (!v50)
    {
      atomic_store(1u, (unsigned int *)v48);
      v91 = *(unsigned int *)(v48 + 28);
      if ((_DWORD)v91)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v48 + 16), (WTF::StringImpl *)(*(_QWORD *)(v48 + 16) + 32 * v91));
      v92 = *(WTF **)(v48 + 16);
      if (v92)
      {
        *(_QWORD *)(v48 + 16) = 0;
        *(_DWORD *)(v48 + 24) = 0;
        WTF::fastFree(v92, v45);
      }
      WTF::fastFree((WTF *)v48, v45);
    }
  }
LABEL_78:
  v51 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (v51)
  {
    v51 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE8);
    v52 = v51 + 2;
  }
  else
  {
    v52 = 2;
  }
  v53 = *(unsigned __int16 *)v52 | (*(unsigned __int8 *)(v52 + 2) << 16);
  if ((_BYTE)v53)
    v54 = (v53 & 0xFF0000) != 0;
  else
    v54 = 0;
  v55 = v54 | 0x100;
  if (!*(_BYTE *)(v51 + 4))
    *(_BYTE *)(v51 + 4) = 1;
  *(_WORD *)(v51 + 2) = v55;
  v56 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v56 = off_1E33BC600;
  *(_QWORD *)(v56 + 8) = this;
  *(_BYTE *)(v56 + 16) = 1;
  v118[0] = v56;
  WebCore::Node::queueTaskKeepingThisNodeAlive((uint64_t)this, 0, v118);
  if (v118[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v118[0] + 8))(v118[0]);
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    if (*((_BYTE *)a2 + 3362) || *((_BYTE *)a2 + 3405))
    {
      v105 = *((_QWORD *)a2 + 66);
      i = a2;
      if (v105)
      {
        v106 = *(_QWORD *)(v105 + 8);
        i = a2;
        if (v106)
        {
          v107 = *(_QWORD *)(v106 + 120);
          i = a2;
          if (v107)
          {
            v108 = *(_QWORD *)(v107 + 8);
            for (i = a2; v108; v108 = *(_QWORD *)(v111 + 8))
            {
              i = *(const WebCore::HTMLFormControlElement **)(*(_QWORD *)(v108 + 40) + 8);
              v109 = *((_QWORD *)i + 66);
              if (!v109)
                break;
              v110 = *(_QWORD *)(v109 + 8);
              if (!v110)
                break;
              v111 = *(_QWORD *)(v110 + 120);
              if (!v111)
                break;
            }
          }
        }
      }
    }
    else
    {
      v97 = *((_QWORD *)a2 + 66);
      i = a2;
      if (v97)
      {
        v99 = *(_QWORD *)(v97 + 8);
        i = a2;
        if (v99)
        {
          v100 = *(_QWORD *)(*(_QWORD *)(v99 + 128) + 8);
          v101 = v100 && *(_BYTE *)(v100 + 144) == 0;
          i = a2;
          if (v101)
          {
            v102 = *(const WebCore::HTMLFormControlElement **)(v100 + 296);
            i = a2;
            if (v102)
              i = v102;
          }
        }
      }
    }
    v103 = (WebCore::AXObjectCache *)*((_QWORD *)i + 186);
    if (v103)
    {
      ++*((_DWORD *)v103 + 2);
      WebCore::AXObjectCache::onPopoverToggle(v103, this);
      v104 = *((_DWORD *)v103 + 2);
      if (!v104)
      {
        __break(0xC471u);
        JUMPOUT(0x195BD470CLL);
      }
      *((_DWORD *)v103 + 2) = v104 - 1;
    }
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if ((_BYTE)v114)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v115, &v117);
  if (v117)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v117, v21);
  result = (unsigned int *)v116;
  if (v116)
  {
    result = (unsigned int *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v116, v21);
    if (v26)
    {
LABEL_94:
      if (*(_DWORD *)(v26 + 24) == 2)
      {
        v72 = *(_WORD *)(v26 + 30);
        if ((v72 & 0x400) == 0)
        {
          v73 = *(_WORD *)(v26 + 28);
          if ((v73 & 0xF000) == 0x9000)
          {
            result = WebCore::Document::removedLastRef((WebCore::Document *)v26, v21);
          }
          else
          {
            if ((v73 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v26 + 160) + 16))(*(_QWORD *)(v26 + 160));
              v72 = *(_WORD *)(v26 + 30);
            }
            *(_WORD *)(v26 + 30) = v72 | 0x400;
            result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 72))(v26);
          }
        }
      }
      else
      {
        *(_DWORD *)(v26 + 24) -= 2;
      }
    }
  }
  else if (v26)
  {
    goto LABEL_94;
  }
LABEL_96:
  if (*(_DWORD *)(v3 + 16) == 1)
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  else
    --*(_DWORD *)(v3 + 16);
  if (*((_DWORD *)a2 + 6) == 2)
  {
    v57 = *((_WORD *)a2 + 15);
    if ((v57 & 0x400) == 0)
    {
      v58 = *((_WORD *)a2 + 14);
      if ((v58 & 0xF000) == 0x9000)
      {
        result = WebCore::Document::removedLastRef(a2, v21);
      }
      else
      {
        if ((v58 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)a2 + 20) + 16))(*((_QWORD *)a2 + 20));
          v57 = *((_WORD *)a2 + 15);
        }
        *((_WORD *)a2 + 15) = v57 | 0x400;
        result = (unsigned int *)(*(uint64_t (**)(const WebCore::HTMLFormControlElement *))(*(_QWORD *)a2 + 72))(a2);
      }
    }
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  if (!v4 && (*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v64 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE8);
    if (v64)
      *(_BYTE *)(v64 + 24) = 0;
  }
  if (*((_DWORD *)this + 6) == 2)
  {
    v59 = *((_WORD *)this + 15);
    if ((v59 & 0x400) == 0)
    {
      v60 = *((_WORD *)this + 14);
      if ((v60 & 0xF000) == 0x9000)
      {
        result = WebCore::Document::removedLastRef(this, v21);
      }
      else
      {
        if ((v60 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
          v59 = *((_WORD *)this + 15);
        }
        *((_WORD *)this + 15) = v59 | 0x400;
        result = (unsigned int *)(*(uint64_t (**)(WebCore::HTMLElement *))(*(_QWORD *)this + 72))(this);
      }
    }
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
LABEL_104:
  if (v122 != -1)
    return (unsigned int *)off_1E33BC570[v122]((char *)&v114, (uint64_t)v120);
  return result;
}

char *WebCore::checkPopoverValidity(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  char v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;

  v4 = result;
  if ((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) != 0
    && (v8 = *(_BYTE **)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0xE8)) != 0
    && *v8)
  {
    if ((v8[1] != 0) != a3)
    {
      v7 = 0;
      *result = 0;
      goto LABEL_4;
    }
    if ((*(_BYTE *)(a2 + 22) & 8) != 0
      && (!a4 || *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) == a4)
      && (*(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::dialogTag + 24)
       || !*(_BYTE *)(a2 + 120))
      && (*(_BYTE *)(a2 + 54) & 0x40) == 0)
    {
      v7 = 0;
      *result = 1;
      goto LABEL_4;
    }
    result = (char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v9;
    v6 = 8;
  }
  else
  {
    result = (char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v9;
    v6 = 6;
  }
  *v4 = v6;
  *((_QWORD *)v4 + 1) = v5;
  v7 = 1;
LABEL_4:
  *((_DWORD *)v4 + 4) = v7;
  return result;
}

WebCore *WebCore::HTMLElement::hidePopover@<X0>(WebCore::HTMLElement *this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::HTMLElement::hidePopoverInternal((uint64_t)this, 1, 1, a2);
}

void *WebCore::HTMLElement::togglePopover@<X0>(WebCore::HTMLElement *this@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  _BOOL4 i;
  void *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14[8];
  uint64_t v15;
  int v16;

  v5 = a2;
  v6 = HIBYTE(a2);
  v7 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (v7)
    goto LABEL_8;
  if (!HIBYTE(a2) || (_BYTE)a2)
  {
LABEL_18:
    result = WebCore::HTMLElement::showPopover(this, 0, (uint64_t)v14);
    if ((_BYTE)v16)
    {
LABEL_19:
      v11 = v15;
      *(_BYTE *)a3 = v14[0];
      *(_QWORD *)(a3 + 8) = v11;
      *(_DWORD *)(a3 + 16) = 1;
      return result;
    }
  }
  else
  {
LABEL_4:
    for (i = 1; ; i = *(_BYTE *)(v10 + 1) != 0)
    {
      result = WebCore::checkPopoverValidity(v14, (uint64_t)this, i, 0);
      if (!v16)
        break;
      if (v16 == 1)
        goto LABEL_19;
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_8:
      v10 = *(_QWORD *)(v7 + 232);
      if (!v10)
      {
        if (v6 && !v5)
          goto LABEL_4;
        goto LABEL_18;
      }
      if (*(_BYTE *)(v10 + 1) && (!v6 || !v5))
      {
        result = WebCore::HTMLElement::hidePopoverInternal((uint64_t)this, 1, 1, (uint64_t)v14);
        if (!(_BYTE)v16)
          break;
        v12 = v15;
        *(_BYTE *)a3 = v14[0];
        *(_QWORD *)(a3 + 8) = v12;
        *(_DWORD *)(a3 + 16) = 1;
        return result;
      }
      if (!*(_BYTE *)(v10 + 1) && (!v6 || v5))
        goto LABEL_18;
    }
  }
  v13 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (v13)
  {
    v13 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE8);
    if (v13)
      LOBYTE(v13) = *(_BYTE *)(v13 + 1) != 0;
  }
  *(_BYTE *)a3 = v13;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

BOOL WebCore::HTMLElement::isValidInvokeAction(uint64_t a1, int a2)
{
  return a2 == 1 || (a2 - 3) < 3;
}

uint64_t WebCore::HTMLElement::handleInvokeInternal(WebCore::HTMLElement *a1, const WebCore::HTMLFormControlElement *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  _BYTE *v5;
  int v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;
  _BYTE v14[8];
  WTF::StringImpl *v15;
  char v16;

  if ((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  v5 = *(_BYTE **)((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) + 0xE8);
  if (!v5 || !*v5)
    return 0;
  v6 = v5[1];
  v7 = *a3;
  v3 = 0;
  if (v6)
  {
    if (v7 <= 4 && ((1 << v7) & 0x1A) != 0)
    {
      v3 = 1;
      WebCore::HTMLElement::hidePopoverInternal((uint64_t)a1, 1, 1, (uint64_t)v14);
      if (v16)
      {
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v8);
          else
            *(_DWORD *)v15 -= 2;
        }
      }
    }
  }
  else if (v7 <= 5 && ((1 << v7) & 0x2A) != 0)
  {
    WebCore::HTMLElement::showPopover(a1, a2, (uint64_t)&v11);
    if (v13)
    {
      v10 = v12;
      v12 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    return 1;
  }
  return v3;
}

uint64_t WebCore::HTMLEmbedElement::renderWidgetLoadingPlugin(WebCore::HTMLEmbedElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  char v12;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v3 = *(_QWORD *)(v2 + 528);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    v5 = 0;
    goto LABEL_30;
  }
  v5 = *(_QWORD *)(v4 + 288);
  if (!v5)
  {
LABEL_30:
    v12 = 1;
LABEL_31:
    WebCore::Document::updateLayout(v2, 3u, 0);
    v6 = WebCore::HTMLFrameOwnerElement::renderWidget(this);
    if ((v12 & 1) != 0)
      goto LABEL_10;
    goto LABEL_8;
  }
  ++*(_DWORD *)(v5 + 8);
  if (!*(_BYTE *)(v5 + 1389) && !*(_BYTE *)(v5 + 480) && !*(_BYTE *)(v5 + 1374))
  {
    v12 = 0;
    goto LABEL_31;
  }
  v6 = WebCore::HTMLFrameOwnerElement::renderWidget(this);
LABEL_8:
  if (*(_DWORD *)(v5 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  else
    --*(_DWORD *)(v5 + 8);
LABEL_10:
  if (!v6)
  {
    v7 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (v7)
      goto LABEL_12;
    v9 = *((_QWORD *)this + 4);
    if (!v9)
      return 0;
    v10 = *(_WORD *)(v9 + 28);
    if ((v10 & 8) == 0)
      return 0;
    while ((v10 & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
    {
      v9 = *(_QWORD *)(v9 + 32);
      if (v9)
      {
        v10 = *(_WORD *)(v9 + 28);
        if ((v10 & 8) != 0)
          continue;
      }
      return 0;
    }
    v7 = *(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL;
    if (v7)
    {
LABEL_12:
      v8 = (*(unsigned __int8 *)(v7 + 53) >> 2) & 1;
      if ((*(_BYTE *)(v7 + 52) & 7) != 3)
        LOBYTE(v8) = 0;
      if ((v8 & 1) != 0)
        return v7;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

void WebCore::HTMLEmbedElement::collectPresentationalHintsForAttribute(WebCore::HTMLEmbedElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  WTF::StringImpl *v5;
  int *v6;
  WTF::StringImpl *v7;
  int *v8;
  int *v9;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::hiddenAttr)
  {
    dword_1ECE88BE8 += 2;
    v9 = &dword_1ECE88BE8;
    WebCore::MutableStyleProperties::setProperty(a4, 450, &v9, 0);
    v6 = v9;
    v9 = 0;
    if (v6)
    {
      if (*v6 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, v5);
      else
        *v6 -= 2;
    }
    dword_1ECE88BE8 += 2;
    v9 = &dword_1ECE88BE8;
    WebCore::MutableStyleProperties::setProperty(a4, 393, &v9, 0);
    v8 = v9;
    v9 = 0;
    if (v8)
    {
      if (*v8 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v7);
      else
        *v8 -= 2;
    }
  }
  else
  {
    WebCore::HTMLPlugInElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
  }
}

void WebCore::HTMLEmbedElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  double v9;
  double v10;
  float v11;
  int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;

  WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  v12 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v12 == 399)
  {
    WTF::String::trim();
    v25 = v47;
    v47 = 0;
    v26 = *(WTF::StringImpl **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v25;
    if (!v26)
      return;
    v27 = *(_DWORD *)v26 - 2;
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::destroy(v26, v24);
      v26 = v47;
      v47 = 0;
      if (!v26)
        return;
      v27 = *(_DWORD *)v26 - 2;
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::destroy(v26, v45);
        return;
      }
    }
    *(_DWORD *)v26 = v27;
    return;
  }
  if (v12 == 844)
  {
    WTF::String::trim();
    v29 = v47;
    v47 = 0;
    v30 = *(WTF::StringImpl **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v29;
    if (!v30)
      goto LABEL_26;
    v31 = *(_DWORD *)v30 - 2;
    if (*(_DWORD *)v30 != 2)
      goto LABEL_25;
    WTF::StringImpl::destroy(v30, v28);
    v30 = v47;
    v47 = 0;
    if (v30)
    {
      v31 = *(_DWORD *)v30 - 2;
      if (*(_DWORD *)v30 != 2)
      {
LABEL_25:
        *(_DWORD *)v30 = v31;
        goto LABEL_26;
      }
      WTF::StringImpl::destroy(v30, v28);
    }
LABEL_26:
    if (!*(_BYTE *)(a1 + 240))
    {
      *(_BYTE *)(a1 + 240) = 1;
      if ((*(_BYTE *)(a1 + 22) & 8) != 0)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        if (*(_QWORD *)(v32 + 1944))
        {
          if (!*(_BYTE *)(v32 + 3405))
            WebCore::HTMLPlugInImageElement::scheduleUpdateForAfterStyleResolution(a1, v28);
        }
      }
      WebCore::Element::invalidateStyle((WebCore::Node *)a1);
    }
    if ((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) == 0)
      return;
    if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
LABEL_93:
      JUMPOUT(0x195BD5164);
    }
    v33 = *(_QWORD *)(a1 + 104);
    if (!v33)
      goto LABEL_76;
    v34 = *(_DWORD *)(v33 + 4);
    LODWORD(v35) = v34 >> 5;
    if ((v34 & 1) != 0)
    {
      v36 = *(uint64_t **)(v33 + 40);
      LODWORD(v37) = *(_DWORD *)(v33 + 52);
      if (!(_DWORD)v37)
      {
LABEL_57:
        if ((v34 & 1) != 0)
        {
          v41 = *(uint64_t **)(v33 + 40);
          LODWORD(v35) = *(_DWORD *)(v33 + 52);
          if (!(_DWORD)v35)
            goto LABEL_76;
        }
        else
        {
          v41 = (uint64_t *)(v33 + 32);
          if (!(_DWORD)v35)
            goto LABEL_76;
        }
        v35 = v35;
        while (1)
        {
          v43 = *v41;
          if (*v41 == WebCore::HTMLNames::srcAttr
            || *(_QWORD *)(v43 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
            && *(_QWORD *)(v43 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
          {
            return;
          }
          v41 += 2;
          if (!--v35)
            goto LABEL_76;
        }
      }
    }
    else
    {
      v36 = (uint64_t *)(v33 + 32);
      LODWORD(v37) = v34 >> 5;
      if (!(_DWORD)v35)
        goto LABEL_57;
    }
    v37 = v37;
    while (1)
    {
      v40 = *v36;
      if (*v36 == WebCore::HTMLNames::typeAttr
        || *(_QWORD *)(v40 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
        && *(_QWORD *)(v40 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
      {
        return;
      }
      v36 += 2;
      if (!--v37)
        goto LABEL_57;
    }
  }
  if (v12 != 952)
    return;
  if (*a4 && (v13 = WTF::StringImpl::find((uint64_t)*a4, 0x3Bu, 0, v9, v10, v11), (v14 = *a4) != 0))
  {
    if (*((_DWORD *)v14 + 1) > v13)
    {
      WTF::StringImpl::substring(v14);
    }
    else
    {
      *(_DWORD *)v14 += 2;
      v46 = v14;
    }
  }
  else
  {
    v46 = 0;
  }
  WTF::String::convertToASCIILowercase((WTF::String *)&v46);
  v16 = v47;
  v47 = 0;
  v17 = *(WTF::StringImpl **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v16;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy(v17, v15);
      v44 = v47;
      v47 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v15);
        else
          *(_DWORD *)v44 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v17 -= 2;
      v47 = 0;
    }
  }
  v18 = v46;
  v46 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  if ((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) == 0)
    return;
  if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    goto LABEL_93;
  }
  v19 = *(_QWORD *)(a1 + 104);
  if (!v19)
    goto LABEL_76;
  v20 = *(_DWORD *)(v19 + 4);
  LODWORD(v21) = v20 >> 5;
  if ((v20 & 1) != 0)
  {
    v22 = *(uint64_t **)(v19 + 40);
    LODWORD(v23) = *(_DWORD *)(v19 + 52);
    if (!(_DWORD)v23)
    {
LABEL_46:
      if ((v20 & 1) == 0)
      {
        v39 = (uint64_t *)(v19 + 32);
        if (!(_DWORD)v21)
          goto LABEL_76;
        goto LABEL_61;
      }
      v39 = *(uint64_t **)(v19 + 40);
      LODWORD(v21) = *(_DWORD *)(v19 + 52);
      if ((_DWORD)v21)
      {
LABEL_61:
        v21 = v21;
        do
        {
          v42 = *v39;
          if (*v39 == WebCore::HTMLNames::srcAttr
            || *(_QWORD *)(v42 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
            && *(_QWORD *)(v42 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
          {
            return;
          }
          v39 += 2;
        }
        while (--v21);
      }
LABEL_76:
      WebCore::Element::invalidateStyle((WebCore::Node *)a1);
      return;
    }
  }
  else
  {
    v22 = (uint64_t *)(v19 + 32);
    LODWORD(v23) = v20 >> 5;
    if (!(_DWORD)v21)
      goto LABEL_46;
  }
  v23 = v23;
  while (1)
  {
    v38 = *v22;
    if (*v22 == WebCore::HTMLNames::typeAttr
      || *(_QWORD *)(v38 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
      && *(_QWORD *)(v38 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
    {
      break;
    }
    v22 += 2;
    if (!--v23)
      goto LABEL_46;
  }
}

uint64_t WebCore::HTMLEmbedElement::updateWidget(uint64_t result, char a2)
{
  uint64_t v3;
  uint64_t v4;
  const WTF::String *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::String *v9;
  char canLoadURL;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  WTF *v20;
  _DWORD *v21;
  WTF *v22;
  _DWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  WTF *v26;
  _DWORD *v27;
  WTF *v28;
  _DWORD *v29;
  int v30;
  int v31;
  WTF *v32;
  WTF *v33;
  __int16 v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  WTF::StringImpl *v42[5];

  v3 = result;
  v5 = (const WTF::String *)(result + 216);
  v4 = *(_QWORD *)(result + 216);
  if (!v4 || !*(_DWORD *)(v4 + 4))
  {
    v6 = *(_QWORD *)(result + 208);
    if (!v6 || !*(_DWORD *)(v6 + 4))
      goto LABEL_54;
  }
  WebCore::Document::completeURL(*(WebCore::Document **)(*(_QWORD *)(result + 40) + 8), v5, *(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 848, 0, (WTF::URL *)v42);
  canLoadURL = WebCore::HTMLPlugInImageElement::canLoadURL((WebCore::HTMLPlugInImageElement *)v3, (const WTF::URL *)v42);
  result = (uint64_t)v42[0];
  v42[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
      if ((canLoadURL & 1) != 0)
        goto LABEL_10;
LABEL_54:
      *(_BYTE *)(v3 + 224) = 0;
      return result;
    }
    *(_DWORD *)result -= 2;
  }
  if ((canLoadURL & 1) == 0)
    goto LABEL_54;
LABEL_10:
  if ((a2 & 1) == 0)
  {
    result = WebCore::HTMLPlugInImageElement::wouldLoadAsPlugIn((WebCore::HTMLPlugInImageElement *)v3, v5, (const WTF::String *)(v3 + 208));
    if ((result & 1) != 0)
      return result;
  }
  *(_BYTE *)(v3 + 224) = 0;
  v40 = 0;
  v41 = 0;
  v38 = 0;
  v39 = 0;
  v12 = *(_QWORD *)(v3 + 104);
  if (v12)
  {
    if ((*(_BYTE *)(v12 + 4) & 8) != 0)
      result = (uint64_t)WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v3, (unsigned __int8 *)v7, v11, v8, v9);
    if ((*(_WORD *)(v3 + 28) & 0x20) != 0)
      result = (uint64_t)WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v3);
    v13 = *(_QWORD *)(v3 + 104);
    if (v13)
    {
      v14 = *(_DWORD *)(v13 + 4);
      if ((v14 & 1) != 0)
      {
        v16 = *(_DWORD *)(v13 + 52);
        if (!v16)
          goto LABEL_39;
        v15 = *(_QWORD *)(v13 + 40);
      }
      else
      {
        if (v14 < 0x20)
          goto LABEL_39;
        v15 = v13 + 32;
        v16 = v14 >> 5;
      }
      v17 = 0;
      do
      {
        v18 = (_QWORD *)(*(_QWORD *)(v15 + 16 * v17) + 24);
        v19 = HIDWORD(v41);
        if (HIDWORD(v41) == (_DWORD)v41)
        {
          result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, HIDWORD(v41) + 1, (unint64_t)v18);
          v19 = HIDWORD(v41);
          v22 = v40;
          v23 = *(_DWORD **)result;
          if (*(_QWORD *)result)
            *v23 += 2;
          *((_QWORD *)v22 + v19) = v23;
        }
        else
        {
          v20 = v40;
          v21 = (_DWORD *)*v18;
          if (*v18)
            *v21 += 2;
          *((_QWORD *)v20 + v19) = v21;
        }
        HIDWORD(v41) = v19 + 1;
        v24 = (_QWORD *)(v15 + 16 * v17 + 8);
        v25 = HIDWORD(v39);
        if (HIDWORD(v39) == (_DWORD)v39)
        {
          result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v38, HIDWORD(v39) + 1, (unint64_t)v24);
          v25 = HIDWORD(v39);
          v28 = v38;
          v29 = *(_DWORD **)result;
          if (*(_QWORD *)result)
            *v29 += 2;
          *((_QWORD *)v28 + v25) = v29;
        }
        else
        {
          v26 = v38;
          v27 = (_DWORD *)*v24;
          if (*v24)
            *v27 += 2;
          *((_QWORD *)v26 + v25) = v27;
        }
        HIDWORD(v39) = v25 + 1;
        v30 = v17 + 1;
        v17 = (v17 + 1);
      }
      while (v16 != v30);
    }
  }
LABEL_39:
  *(_DWORD *)(v3 + 24) += 2;
  if ((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_46;
  if ((*(_BYTE *)((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  WebCore::Document::completeURL(*(WebCore::Document **)(*(_QWORD *)(v3 + 40) + 8), v5, *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 848, 0, (WTF::URL *)v42);
  v31 = WebCore::HTMLPlugInImageElement::canLoadURL((WebCore::HTMLPlugInImageElement *)v3, (const WTF::URL *)v42);
  result = (uint64_t)v42[0];
  v42[0] = 0;
  if (!result)
  {
LABEL_44:
    if (!v31)
      goto LABEL_46;
    goto LABEL_45;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_44;
  }
  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
  if (v31)
LABEL_45:
    result = WebCore::HTMLPlugInImageElement::requestObject(v3, v5, (WTF::StringImpl **)(v3 + 208), (uint64_t)&v40, (uint64_t)&v38);
LABEL_46:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    v34 = *(_WORD *)(v3 + 30);
    if ((v34 & 0x400) == 0)
    {
      v35 = *(_WORD *)(v3 + 28);
      if ((v35 & 0xF000) == 0x9000)
      {
        result = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v3, v7);
      }
      else
      {
        if ((v35 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
          v34 = *(_WORD *)(v3 + 30);
        }
        *(_WORD *)(v3 + 30) = v34 | 0x400;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
      }
    }
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  v32 = v38;
  if (HIDWORD(v39))
  {
    v36 = 8 * HIDWORD(v39);
    do
    {
      result = *(_QWORD *)v32;
      *(_QWORD *)v32 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
        else
          *(_DWORD *)result -= 2;
      }
      v32 = (WTF *)((char *)v32 + 8);
      v36 -= 8;
    }
    while (v36);
    v32 = v38;
    if (!v38)
      goto LABEL_50;
    goto LABEL_78;
  }
  if (v38)
  {
LABEL_78:
    v38 = 0;
    LODWORD(v39) = 0;
    result = WTF::fastFree(v32, v7);
  }
LABEL_50:
  v33 = v40;
  if (!HIDWORD(v41))
  {
    if (!v40)
      return result;
LABEL_52:
    v40 = 0;
    LODWORD(v41) = 0;
    return WTF::fastFree(v33, v7);
  }
  v37 = 8 * HIDWORD(v41);
  do
  {
    result = *(_QWORD *)v33;
    *(_QWORD *)v33 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
      else
        *(_DWORD *)result -= 2;
    }
    v33 = (WTF *)((char *)v33 + 8);
    v37 -= 8;
  }
  while (v37);
  v33 = v40;
  if (v40)
    goto LABEL_52;
  return result;
}

uint64_t WebCore::HTMLEmbedElement::rendererIsNeeded(WebCore::HTMLEmbedElement *this, const WebCore::RenderStyle *a2)
{
  uint64_t v2;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  int v16;
  uint64_t result;
  __int16 v18;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
    return 0;
  v5 = *(_DWORD *)(v2 + 4);
  LODWORD(v6) = v5 >> 5;
  if ((v5 & 1) == 0)
  {
    v7 = (uint64_t *)(v2 + 32);
    LODWORD(v8) = v5 >> 5;
    if (!(_DWORD)v6)
      goto LABEL_13;
LABEL_6:
    v8 = v8;
    while (1)
    {
      v9 = *v7;
      if (*v7 == WebCore::HTMLNames::typeAttr
        || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
        && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
      {
        goto LABEL_23;
      }
      v7 += 2;
      if (!--v8)
        goto LABEL_13;
    }
  }
  v7 = *(uint64_t **)(v2 + 40);
  LODWORD(v8) = *(_DWORD *)(v2 + 52);
  if ((_DWORD)v8)
    goto LABEL_6;
LABEL_13:
  if ((v5 & 1) != 0)
  {
    v10 = *(uint64_t **)(v2 + 40);
    LODWORD(v6) = *(_DWORD *)(v2 + 52);
    if (!(_DWORD)v6)
      return 0;
  }
  else
  {
    v10 = (uint64_t *)(v2 + 32);
    if (!(_DWORD)v6)
      return 0;
  }
  v6 = v6;
  while (1)
  {
    v11 = *v10;
    if (*v10 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    v10 += 2;
    if (!--v6)
      return 0;
  }
LABEL_23:
  if (WebCore::HTMLPlugInImageElement::isImageType(this))
    return (*((_QWORD *)a2 + 2) & 0x17) != 18;
  v13 = *((_QWORD *)this + 4);
  if (!v13)
    return (*((_QWORD *)a2 + 2) & 0x17) != 18;
  v14 = *(_WORD *)(v13 + 28);
  if ((v14 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
    return (*((_QWORD *)a2 + 2) & 0x17) != 18;
  v15 = *(_DWORD *)(v13 + 24);
  *(_DWORD *)(v13 + 24) = v15 + 2;
  if ((*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_31;
  if ((*(_BYTE *)((*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    if (*(_BYTE *)(v13 + 289))
    {
      v16 = 1;
      goto LABEL_32;
    }
LABEL_31:
    v16 = 0;
LABEL_32:
    if (v15)
    {
      *(_DWORD *)(v13 + 24) = v15;
    }
    else
    {
      v18 = *(_WORD *)(v13 + 30);
      if ((v18 & 0x400) == 0)
      {
        if ((v14 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v13, v12);
        }
        else
        {
          if ((v14 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v13 + 160) + 16))(*(_QWORD *)(v13 + 160));
            v18 = *(_WORD *)(v13 + 30);
          }
          *(_WORD *)(v13 + 30) = v18 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
        }
      }
    }
    if (!v16)
      return 0;
    return (*((_QWORD *)a2 + 2) & 0x17) != 18;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

BOOL WebCore::HTMLEmbedElement::isURLAttribute(uint64_t a1, _QWORD *a2)
{
  return *a2 == WebCore::HTMLNames::srcAttr;
}

uint64_t WebCore::HTMLEmbedElement::imageSourceURL(WebCore::HTMLEmbedElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return MEMORY[0x1E0CBF2F8];
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_4;
    return MEMORY[0x1E0CBF2F8];
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    return MEMORY[0x1E0CBF2F8];
LABEL_4:
  v4 = v4;
  for (result = v3 + 8; ; result += 16)
  {
    v6 = *(_QWORD *)(result - 8);
    if (v6 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    if (!--v4)
      return MEMORY[0x1E0CBF2F8];
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLEmbedElement::addSubresourceAttributeURLs(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  WTF::StringImpl *result;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13[5];
  _BYTE v14[24];

  WebCore::StyledElement::addSubresourceAttributeURLs(a1, (uint64_t)a2);
  v4 = a1[13];
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  v8 = (_QWORD *)(v6 + 8);
  while (1)
  {
    v9 = *(v8 - 1);
    if (v9 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v7)
    {
      v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  result = WebCore::Document::completeURL(*(WebCore::Document **)(a1[5] + 8), v8, *(_QWORD *)(a1[5] + 8) + 848, 0, (WTF::URL *)v13);
  if (v13[0])
  {
    WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::add(a2, (uint64_t)v13, v11, (uint64_t)v14);
    result = v13[0];
    v13[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebCore::HTMLFieldSetElement::~HTMLFieldSetElement(WebCore::HTMLFieldSetElement *this, void *a2)
{
  WebCore::FormListedElement *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WebCore::HTMLFormElement *v6;

  v3 = (WebCore::HTMLFieldSetElement *)((char *)this + 112);
  if ((*((_BYTE *)this + 160) & 8) != 0)
    --*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3284);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 22, a2);
  *(_QWORD *)this = off_1E33BAC98;
  *((_QWORD *)this + 14) = &unk_1E33BB200;
  v6 = 0;
  v5 = *((_QWORD *)this + 15);
  if (v5 && *(_QWORD *)(v5 + 8))
    WebCore::FormListedElement::setFormInternal(v3, &v6);
  WebCore::ValidatedFormListedElement::~ValidatedFormListedElement(v3, v4);
  WebCore::Element::~Element((uint64_t)this);
}

{
  WebCore::FormListedElement *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;
  WebCore::HTMLFormElement *v8;

  v3 = (WebCore::HTMLFieldSetElement *)((char *)this + 112);
  if ((*((_BYTE *)this + 160) & 8) != 0)
    --*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3284);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 22, a2);
  *(_QWORD *)this = off_1E33BAC98;
  *((_QWORD *)this + 14) = &unk_1E33BB200;
  v8 = 0;
  v5 = *((_QWORD *)this + 15);
  if (v5 && *(_QWORD *)(v5 + 8))
    WebCore::FormListedElement::setFormInternal(v3, &v8);
  WebCore::ValidatedFormListedElement::~ValidatedFormListedElement(v3, v4);
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v6, v7);
}

void `non-virtual thunk to'WebCore::HTMLFieldSetElement::~HTMLFieldSetElement(WebCore::HTMLFieldSetElement *this, void *a2)
{
  char *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WebCore::HTMLFormElement *v6;

  v3 = (char *)this - 112;
  if ((*((_BYTE *)this + 48) & 8) != 0)
    --*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this - 9) + 8) + 3284);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 8, a2);
  *((_QWORD *)this - 14) = off_1E33BAC98;
  *(_QWORD *)this = &unk_1E33BB200;
  v6 = 0;
  v5 = *((_QWORD *)this + 1);
  if (v5 && *(_QWORD *)(v5 + 8))
    WebCore::FormListedElement::setFormInternal(this, &v6);
  WebCore::ValidatedFormListedElement::~ValidatedFormListedElement(this, v4);
  WebCore::Element::~Element((uint64_t)v3);
}

{
  char *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;
  WebCore::HTMLFormElement *v8;

  v3 = (char *)this - 112;
  if ((*((_BYTE *)this + 48) & 8) != 0)
    --*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this - 9) + 8) + 3284);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 8, a2);
  *((_QWORD *)this - 14) = off_1E33BAC98;
  *(_QWORD *)this = &unk_1E33BB200;
  v8 = 0;
  v5 = *((_QWORD *)this + 1);
  if (v5 && *(_QWORD *)(v5 + 8))
    WebCore::FormListedElement::setFormInternal(this, &v8);
  WebCore::ValidatedFormListedElement::~ValidatedFormListedElement(this, v4);
  WebCore::Element::~Element((uint64_t)v3);
  bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t WebCore::HTMLFieldSetElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  _DWORD *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x1C1C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v9 = *a1;
  if (*a1)
    ++*v9;
  v10 = 0;
  *(_QWORD *)(result + 96) = v9;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33BC680;
  *(_QWORD *)(result + 112) = off_1E33B3CE0;
  *(_QWORD *)(result + 120) = 0;
  if (a3)
  {
    v11 = result;
    v12 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a3);
    v10 = v12;
    if (v12)
    {
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
    result = v11;
  }
  *(_QWORD *)(result + 128) = v10;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)(result + 152) = 0;
  *(_WORD *)(result + 160) = 3;
  *(_BYTE *)(result + 162) = *(_BYTE *)(result + 162) & 0xFC | 2;
  *(_DWORD *)(result + 164) = 0;
  *(_BYTE *)(result + 168) &= 0xF8u;
  *(_QWORD *)result = off_1E33BB8C8;
  *(_QWORD *)(result + 112) = &unk_1E33BBE48;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 184) = 0;
  *a4 = result;
  return result;
}

BOOL WebCore::HTMLFieldSetElement::isDisabledFormControl(WebCore::HTMLFieldSetElement *this)
{
  return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 696) & 0x20) == 0
      && (*((_BYTE *)this + 160) & 0x18) != 0;
}

BOOL WebCore::HTMLFieldSetElement::isActuallyDisabled(WebCore::HTMLFieldSetElement *this)
{
  return (*((_BYTE *)this + 160) & 0x18) != 0;
}

void WebCore::HTMLFieldSetElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  int v7;
  uint64_t v8;
  int v9;
  int v10;

  v7 = (*(unsigned __int8 *)(a1 + 160) >> 3) & 1;
  WebCore::HTMLFormControlElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  if (v7 != (*(_BYTE *)(a1 + 160) & 8) >> 3)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v9 = *(_DWORD *)(v8 + 3284);
    if ((*(_BYTE *)(a1 + 160) & 8) != 0)
      v10 = v9 + 1;
    else
      v10 = v9 - 1;
    *(_DWORD *)(v8 + 3284) = v10;
  }
}

uint64_t WebCore::HTMLFieldSetElement::disabledStateChanged(WebCore::HTMLFieldSetElement *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  WebCore::HTMLElement *v7;
  void *v8;

  result = WebCore::HTMLFormControlElement::disabledStateChanged(this);
  if ((*((_BYTE *)this + 160) & 0x10) == 0)
  {
    result = WebCore::Element::hasAttributeWithoutSynchronization((uint64_t)this, &WebCore::HTMLNames::disabledAttr);
    v3 = *((_QWORD *)this + 10);
    if (v3)
    {
      v4 = result;
      while ((*(_WORD *)(v3 + 28) & 0x10) == 0)
      {
        v3 = *(_QWORD *)(v3 + 56);
        if (!v3)
          return result;
      }
      v5 = 0;
      *(_DWORD *)(v3 + 24) += 2;
      do
      {
        v6 = v3;
        if ((v5 & 1) == 0
          && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
        {
          v7 = 0;
          v5 = 1;
        }
        else
        {
          v7 = (WebCore::HTMLElement *)v4;
        }
        result = WebCore::updateFromControlElementsAncestorDisabledStateUnder(v3, v7);
        while (1)
        {
          v3 = *(_QWORD *)(v3 + 56);
          if (!v3)
            break;
          if ((*(_WORD *)(v3 + 28) & 0x10) != 0)
          {
            *(_DWORD *)(v3 + 24) += 2;
            break;
          }
        }
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
      while (v3);
    }
  }
  return result;
}

uint64_t WebCore::HTMLFormControlElement::disabledStateChanged(WebCore::HTMLFormControlElement *this)
{
  uint64_t result;
  _BYTE v3[20];
  __int128 v4;
  char v5;

  WebCore::ValidatedFormListedElement::updateWillValidateAndValidity((WebCore::HTMLFormControlElement *)((char *)this + 112));
  result = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (result)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
    }
    else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x58) + 32) + 148) & 0x1FC000) != 0
           && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40)
                                                                                                + 8)
                                                                                    + 1944)
                                                                        + 24)
                                                            + 8)
                                                + 40)
                                    + 8)
                        + 3382))
    {
      LOBYTE(v4) = 0;
      v5 = 0;
      v3[0] = 0;
      v3[16] = 0;
      return WebCore::RenderObject::issueRepaint(result, &v4, 0, 0, (uint64_t)v3);
    }
  }
  return result;
}

uint64_t WebCore::updateFromControlElementsAncestorDisabledStateUnder(uint64_t this, WebCore::HTMLElement *a2)
{
  int v2;
  uint64_t v3;
  _BYTE *v4;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = (int)a2;
  v3 = this;
  if ((*(_WORD *)(this + 28) & 8) != 0)
  {
LABEL_7:
    v9 = (_QWORD *)v3;
    v10 = this;
    while (1)
    {
      v4 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 464))(this);
      if (v4)
        WebCore::ValidatedFormListedElement::setDisabledInternal(v4, (v4[48] >> 3) & 1, v2);
      v5 = (_QWORD *)v10;
      if ((*(_WORD *)(v10 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
      {
        if ((WebCore::Element::hasAttributeWithoutSynchronization(v10, &WebCore::HTMLNames::disabledAttr) & 1) != 0)
        {
          WebCore::ElementIterator<WebCore::Element>::traverseNextSkippingChildren((uint64_t *)&v9);
          this = v10;
          goto LABEL_26;
        }
        v5 = (_QWORD *)v10;
      }
      v6 = v5[10];
      if (!v6)
      {
        if (v5 == v9)
          goto LABEL_35;
        while (1)
        {
          v6 = v5[7];
          if (v6)
            break;
          v5 = (_QWORD *)v5[4];
          if (v5)
            v8 = v5 == v9;
          else
            v8 = 1;
          if (v8)
            goto LABEL_35;
        }
      }
      if ((*(_WORD *)(v6 + 28) & 8) == 0)
      {
        while ((_QWORD *)v6 != v9)
        {
          while (1)
          {
            this = *(_QWORD *)(v6 + 56);
            if (this)
              break;
            v6 = *(_QWORD *)(v6 + 32);
            if (v6)
              v7 = v6 == (_QWORD)v9;
            else
              v7 = 1;
            if (v7)
              goto LABEL_35;
          }
          v6 = *(_QWORD *)(v6 + 56);
          if ((*(_WORD *)(this + 28) & 8) != 0)
            goto LABEL_25;
        }
LABEL_35:
        this = 0;
        goto LABEL_25;
      }
      this = v6;
LABEL_25:
      v10 = this;
LABEL_26:
      if (!this)
        return this;
    }
  }
  this = *(_QWORD *)(this + 80);
  if (this)
  {
    while ((*(_WORD *)(this + 28) & 8) == 0)
    {
      this = *(_QWORD *)(this + 56);
      if (!this)
        return this;
    }
    goto LABEL_7;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLFieldSetElement::disabledStateChanged(WebCore::HTMLFieldSetElement *this)
{
  return WebCore::HTMLFieldSetElement::disabledStateChanged((WebCore::HTMLFieldSetElement *)((char *)this - 112));
}

_QWORD *WebCore::HTMLFieldSetElement::childrenChanged(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *result;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char v20;

  result = (_QWORD *)WebCore::ContainerNode::childrenChanged(a1, a2);
  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_2;
  v11 = *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v11)
    goto LABEL_2;
  v12 = *(_DWORD *)(v11 + 24);
  *(_DWORD *)(v11 + 24) = v12 + 2;
  v13 = *a2;
  if ((v13 - 2) < 3)
  {
    result = *(_QWORD **)(v11 + 224);
    if (!result)
      goto LABEL_20;
    v14 = 14;
    goto LABEL_31;
  }
  if (v13 == 8 || v13 == 5)
  {
    result = *(_QWORD **)(v11 + 224);
    if (result)
    {
      v14 = 13;
LABEL_31:
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
      v12 = *(_DWORD *)(v11 + 24) - 2;
    }
  }
LABEL_20:
  if (v12)
  {
    *(_DWORD *)(v11 + 24) = v12;
  }
  else
  {
    v15 = *(_WORD *)(v11 + 30);
    if ((v15 & 0x400) == 0)
    {
      v16 = *(_WORD *)(v11 + 28);
      if ((v16 & 0xF000) == 0x9000)
      {
        result = WebCore::Document::removedLastRef((WebCore::Document *)v11, v5);
      }
      else
      {
        if ((v16 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 160) + 16))(*(_QWORD *)(v11 + 160));
          v15 = *(_WORD *)(v11 + 30);
        }
        *(_WORD *)(v11 + 30) = v15 | 0x400;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
      }
    }
  }
LABEL_2:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3446))
    result = WebCore::HTMLElement::adjustDirectionalityIfNeededAfterChildrenChanged((unsigned int *)a1, *((_QWORD *)a2 + 2), *a2);
  v6 = *(_QWORD *)(a1 + 104);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(uint64_t **)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
    }
    else
    {
      v8 = (uint64_t *)(v6 + 32);
      LODWORD(v9) = v7 >> 5;
    }
    if ((_DWORD)v9)
    {
      v9 = v9;
      while (1)
      {
        v10 = *v8;
        if (*v8 == WebCore::HTMLNames::disabledAttr
          || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::disabledAttr + 24)
          && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::disabledAttr + 32))
        {
          break;
        }
        v8 += 2;
        if (!--v9)
          return result;
      }
      v17 = *(_QWORD *)(a1 + 80);
      if (v17)
      {
        while ((*(_WORD *)(v17 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
        {
          v17 = *(_QWORD *)(v17 + 56);
          if (!v17)
            return result;
        }
        *(_DWORD *)(v17 + 24) += 2;
        result = (_QWORD *)WebCore::updateFromControlElementsAncestorDisabledStateUnder(v17, 0);
        while (1)
        {
          v19 = *(_QWORD *)(v17 + 56);
          if (v19)
          {
            while ((*(_WORD *)(v19 + 28) & 0x10) == 0
                 || *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
            {
              v19 = *(_QWORD *)(v19 + 56);
              if (!v19)
                goto LABEL_43;
            }
            v20 = 0;
            *(_DWORD *)(v19 + 24) += 2;
          }
          else
          {
LABEL_43:
            v20 = 1;
          }
          if (*(_DWORD *)(v17 + 24) == 2)
          {
            if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)v17, v18);
          }
          else
          {
            *(_DWORD *)(v17 + 24) -= 2;
          }
          if ((v20 & 1) != 0)
            break;
          result = (_QWORD *)WebCore::updateFromControlElementsAncestorDisabledStateUnder(v19, (WebCore::HTMLElement *)1);
          v17 = v19;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLFieldSetElement::didMoveToNewDocument(WebCore::HTMLFieldSetElement *this, WebCore::Document *a2, WebCore::Document *a3, WTF::String *a4)
{
  uint64_t result;

  WebCore::Element::didMoveToNewDocument(this, a2, a3, a4);
  result = WebCore::FormListedElement::didMoveToNewDocument((WebCore::HTMLFieldSetElement *)((char *)this + 112));
  if ((*((_BYTE *)this + 160) & 8) != 0)
  {
    --*((_DWORD *)a2 + 821);
    ++*((_DWORD *)a3 + 821);
  }
  return result;
}

uint64_t WebCore::HTMLFormControlElement::didMoveToNewDocument(WebCore::HTMLFormControlElement *this, WebCore::Document *a2, WebCore::Document *a3, WTF::String *a4)
{
  WebCore::FormListedElement *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  WebCore::Element::didMoveToNewDocument(this, a2, a3, a4);
  v6 = *((_QWORD *)this + 14);
  v5 = (WebCore::HTMLFormControlElement *)((char *)this + 112);
  result = (*(uint64_t (**)(WebCore::FormListedElement *))(v6 + 16))(v5);
  v8 = *(_QWORD *)(result + 104);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 4);
    if ((v9 & 1) != 0)
    {
      v10 = *(uint64_t **)(v8 + 40);
      LODWORD(v11) = *(_DWORD *)(v8 + 52);
    }
    else
    {
      v10 = (uint64_t *)(v8 + 32);
      LODWORD(v11) = v9 >> 5;
    }
    if ((_DWORD)v11)
    {
      v11 = v11;
      while (1)
      {
        v12 = *v10;
        if (*v10 == WebCore::HTMLNames::formAttr
          || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
          && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
        {
          break;
        }
        v10 += 2;
        if (!--v11)
          return result;
      }
      if ((*(_BYTE *)(result + 22) & 8) != 0)
        return WebCore::FormListedElement::resetFormAttributeTargetObserver(v5);
    }
  }
  return result;
}

BOOL WebCore::HTMLFieldSetElement::matchesValidPseudoClass(WebCore::HTMLFieldSetElement *this)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)*((_QWORD *)this + 22);
  if (!v1 || !*((_DWORD *)v1 - 3))
    return 1;
  v3 = *((unsigned int *)v1 - 1);
  v4 = &v1[v3];
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while ((unint64_t)(*v1 + 1) <= 1)
    {
      ++v1;
      v5 -= 8;
      if (!v5)
        goto LABEL_15;
    }
  }
  if (v1 != v4)
  {
    v6 = *v1;
LABEL_11:
    if (*(_QWORD *)(v6 + 8))
      return v1 == v4;
    while (++v1 != v4)
    {
      v6 = *v1;
      if ((unint64_t)(*v1 + 1) > 1)
      {
        if (v1 != v4)
          goto LABEL_11;
        break;
      }
    }
  }
LABEL_15:
  v1 = v4;
  return v1 == v4;
}

BOOL WebCore::HTMLFieldSetElement::matchesInvalidPseudoClass(WebCore::HTMLFieldSetElement *this)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)*((_QWORD *)this + 22);
  if (!v1 || !*((_DWORD *)v1 - 3))
    return 0;
  v3 = *((unsigned int *)v1 - 1);
  v4 = &v1[v3];
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while ((unint64_t)(*v1 + 1) <= 1)
    {
      ++v1;
      v5 -= 8;
      if (!v5)
        goto LABEL_15;
    }
  }
  if (v1 != v4)
  {
    v6 = *v1;
LABEL_11:
    if (*(_QWORD *)(v6 + 8))
      return v1 != v4;
    while (++v1 != v4)
    {
      v6 = *v1;
      if ((unint64_t)(*v1 + 1) > 1)
      {
        if (v1 != v4)
          goto LABEL_11;
        break;
      }
    }
  }
LABEL_15:
  v1 = v4;
  return v1 != v4;
}

uint64_t WebCore::HTMLFieldSetElement::supportsFocus(WebCore::HTMLFieldSetElement *this)
{
  uint64_t result;
  int v3;
  int v4;

  if (((*((_QWORD *)this + 9) >> 58) & 3) - 1 < 3)
    return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 696) & 0x20) != 0
        || (*((_BYTE *)this + 160) & 0x18) == 0;
  v3 = WebCore::Node::computeEditability((uint64_t)this, 0, 1);
  result = 0;
  if (v3)
  {
    if ((result = *((_QWORD *)this + 4)) != 0)
    {
      v4 = WebCore::Node::computeEditability(result, 0, 1);
      result = 0;
      if (!v4)
        return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 696) & 0x20) != 0
            || (*((_BYTE *)this + 160) & 0x18) == 0;
    }
  }
  return result;
}

uint64_t *WebCore::HTMLFieldSetElement::formControlType(WebCore::HTMLFieldSetElement *this)
{
  uint64_t v2;

  if ((_MergedGlobals_187 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE83538 = v2;
    _MergedGlobals_187 = 1;
  }
  return &qword_1ECE83538;
}

uint64_t *`non-virtual thunk to'WebCore::HTMLFieldSetElement::formControlType(WebCore::HTMLFieldSetElement *this)
{
  uint64_t v2;

  if ((_MergedGlobals_187 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE83538 = v2;
    _MergedGlobals_187 = 1;
  }
  return &qword_1ECE83538;
}

void WebCore::HTMLFieldSetElement::createElementRenderer(WebCore::Document *a1@<X0>, WebCore::Style *a2@<X1>, const WebCore::Element *a3@<X3>, uint64_t *a4@<X8>)
{
  WebCore::RenderElement::createFor(a1, a2, 5, a3, a4);
}

uint64_t WebCore::HTMLFieldSetElement::legend(WebCore::HTMLFieldSetElement *this)
{
  uint64_t result;

  for (result = *((_QWORD *)this + 10); result; result = *(_QWORD *)(result + 56))
  {
    if ((*(_WORD *)(result + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
    {
      break;
    }
  }
  return result;
}

uint64_t WebCore::HTMLFieldSetElement::elements@<X0>(WebCore::HTMLFieldSetElement *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  WebCore::NodeListsNodeData *v7;
  WTF *v8;
  void *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  WTF::StringImpl *v17;
  BOOL v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v5)
  {
    WebCore::Node::materializeRareData(this);
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v6 = *v5;
  if (!*v5)
  {
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_QWORD *)(v6 + 32) = 0;
    v7 = (WebCore::NodeListsNodeData *)*v5;
    *v5 = v6;
    if (v7)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v7, a2);
      WTF::fastFree(v8, v9);
      v6 = *v5;
    }
  }
  v10 = (uint64_t *)(v6 + 32);
  v11 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v12 = *v10;
  if (*v10
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v6 + 32), 8u, 0), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = ((*((_DWORD *)v11 + 4) >> 8) + 21) & v13;
  v15 = (unsigned __int8 *)(v12 + 24 * v14);
  v16 = *v15;
  v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
  if (*v15)
    v18 = 0;
  else
    v18 = v17 == 0;
  if (v18)
  {
LABEL_25:
    *v15 = 21;
    *((_QWORD *)v15 + 1) = v11;
    *((_QWORD *)v15 + 2) = 0;
    v23 = *v10;
    if (*v10)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v26 = *v10;
    if (*v10)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_39;
    }
    else
    {
      if (3 * v29 > 4 * v28)
      {
LABEL_39:
        result = bmalloc::api::isoAllocate();
        *(_DWORD *)(result + 16) = 1;
        *(_BYTE *)(result + 20) = 0;
        *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0xB5;
        *((_DWORD *)this + 6) += 2;
        *(_QWORD *)(result + 24) = this;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)(result + 64) = 0u;
        *(_BYTE *)(result + 80) &= 0xFCu;
        *(_QWORD *)result = off_1E33B3320;
        *(_QWORD *)(result + 8) = 0;
        *((_QWORD *)v15 + 2) = result;
        goto LABEL_40;
      }
      if (!(_DWORD)v29)
      {
        v30 = 8;
        goto LABEL_46;
      }
    }
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_46:
    v15 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(v10, v30, (uint64_t)v15);
    goto LABEL_39;
  }
  v19 = 0;
  v20 = 1;
  while (1)
  {
    v21 = v19;
    v19 = v15;
    if (v16 != 255)
    {
      v19 = v21;
      if (v16 == 21 && v17 == v11)
        break;
    }
    v14 = ((_DWORD)v14 + v20) & v13;
    v15 = (unsigned __int8 *)(v12 + 24 * v14);
    v16 = *v15;
    v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
    ++v20;
    if (*v15)
      v22 = 0;
    else
      v22 = v17 == 0;
    if (v22)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
        --*(_DWORD *)(*v10 - 16);
        v15 = (unsigned __int8 *)v19;
      }
      goto LABEL_25;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = *(_QWORD *)(v12 + 24 * v14 + 16);
  ++*(_DWORD *)(result + 16);
LABEL_40:
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLFieldSetElement::addInvalidDescendant(WebCore::HTMLFieldSetElement *this, const WebCore::HTMLElement *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int8 *v12[3];
  int v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  char v18;

  v14[0] = 0;
  v18 = 0;
  v4 = (char *)this + 176;
  v3 = *((_QWORD *)this + 22);
  if (!v3 || !*(_DWORD *)(v3 - 12))
    goto LABEL_2;
  v7 = *(unsigned int *)(v3 - 4);
  if ((_DWORD)v7)
  {
    v8 = 8 * v7;
    v9 = (uint64_t *)*((_QWORD *)this + 22);
    while ((unint64_t)(*v9 + 1) <= 1)
    {
      ++v9;
      v8 -= 8;
      if (!v8)
        goto LABEL_2;
    }
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 22);
  }
  v10 = (uint64_t *)(v3 + 8 * v7);
  if (v9 == v10)
    goto LABEL_2;
  v11 = *v9;
LABEL_20:
  if (!*(_QWORD *)(v11 + 8))
  {
    while (++v9 != v10)
    {
      v11 = *v9;
      if ((unint64_t)(*v9 + 1) > 1)
      {
        if (v9 != v10)
          goto LABEL_20;
        break;
      }
    }
LABEL_2:
    v13 = 19464270;
    v12[0] = (unsigned __int8 *)&v13;
    v12[1] = (unsigned __int8 *)2;
    std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,std::initializer_list<std::pair<WebCore::CSSSelectorPseudoClass,BOOL>> &,void>((uint64_t)v14, this, v12);
  }
  result = WTF::WeakHashSet<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::HTMLElement>((uint64_t)v4, a2, (uint64_t)v12);
  if (v18)
  {
    if (v14[0])
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v15, &v17);
    if (v17)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v17, v6);
    result = v16;
    if (v16)
      return WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v16, v6);
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::HTMLElement>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  void *v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF *v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t *v26;
  unsigned int v28;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 <= v6)
    goto LABEL_6;
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_3;
  v23 = *(_DWORD *)(v8 - 4);
  if (!v23)
    goto LABEL_35;
  v24 = 0;
  v25 = v23 - 1;
  do
  {
    v26 = (uint64_t *)(v8 + 8 * v25);
    if ((unint64_t)(*v26 + 1) >= 2 && !*(_QWORD *)(*v26 + 8))
    {
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket(v26, a2);
      ++v24;
    }
  }
  while ((unint64_t)v25--);
  v8 = *(_QWORD *)a1;
  if (v24)
  {
    *(_DWORD *)(v8 - 16) += v24;
    v38 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v39 = *(_DWORD *)(v38 - 12);
    else
      v39 = 0;
    *(_DWORD *)(v38 - 12) = v39 - v24;
    v8 = *(_QWORD *)a1;
  }
  if (v8)
  {
    v28 = *(_DWORD *)(v8 - 4);
    if (v28 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v28)
    {
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
LABEL_36:
      v9 = *(_DWORD *)(v8 - 12);
      v10 = 0x7FFFFFFF;
      if (v9 >= 0x7FFFFFFF)
        goto LABEL_5;
      goto LABEL_4;
    }
LABEL_35:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_36;
  }
LABEL_3:
  v9 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
  v10 = v9;
LABEL_5:
  *(_DWORD *)(a1 + 12) = 2 * v10;
LABEL_6:
  if ((a2[2] & 0xFFFFFFFFFFFFLL) == 0)
  {
    v30 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v30 = 1;
    *(_QWORD *)(v30 + 16) = 0;
    *(_QWORD *)(v30 + 24) = 0;
    *(_QWORD *)(v30 + 8) = a2;
    *(_BYTE *)(v30 + 32) = 0;
    v32 = a2[2];
    a2[2] = v32 & 0xFFFF000000000000 | v30;
    v33 = v32 & 0xFFFFFFFFFFFFLL;
    if ((v32 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v34 = __ldaxr((unsigned int *)v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, (unsigned int *)v33));
      if (!v35)
      {
        atomic_store(1u, (unsigned int *)v33);
        v36 = *(unsigned int *)(v33 + 28);
        if ((_DWORD)v36)
        {
          v43 = v33;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v33 + 16), (WTF::StringImpl *)(*(_QWORD *)(v33 + 16) + 32 * v36));
          v33 = v43;
        }
        v37 = *(WTF **)(v33 + 16);
        if (v37)
        {
          *(_QWORD *)(v33 + 16) = 0;
          *(_DWORD *)(v33 + 24) = 0;
          v42 = v33;
          WTF::fastFree(v37, v31);
          v33 = v42;
        }
        WTF::fastFree((WTF *)v33, v31);
      }
    }
  }
  v11 = a2[2] & 0xFFFFFFFFFFFFLL;
  do
    v12 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v12 + 1, (unsigned int *)v11));
  do
    v13 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v13 + 1, (unsigned int *)v11));
  v44 = (WTF *)v11;
  result = (uint64_t)WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::add((uint64_t *)a1, (uint64_t *)&v44, a3);
  v16 = v44;
  v44 = 0;
  if (v16)
  {
    do
    {
      v19 = __ldaxr((unsigned int *)v16);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v16));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v16);
      v21 = *((unsigned int *)v16 + 7);
      if ((_DWORD)v21)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v16 + 2), (WTF::StringImpl *)(*((_QWORD *)v16 + 2) + 32 * v21));
      v22 = (WTF *)*((_QWORD *)v16 + 2);
      if (v22)
      {
        *((_QWORD *)v16 + 2) = 0;
        *((_DWORD *)v16 + 6) = 0;
        WTF::fastFree(v22, v15);
      }
      result = WTF::fastFree(v16, v15);
    }
  }
  if (v11)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v11);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v11));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v11);
      v40 = *(unsigned int *)(v11 + 28);
      if ((_DWORD)v40)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v40));
      v41 = *(WTF **)(v11 + 16);
      if (v41)
      {
        *(_QWORD *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 24) = 0;
        WTF::fastFree(v41, v15);
      }
      return WTF::fastFree((WTF *)v11, v15);
    }
  }
  return result;
}

uint64_t WebCore::HTMLFieldSetElement::removeInvalidDescendant(WebCore::HTMLFieldSetElement *this, const WebCore::HTMLElement *a2)
{
  char *v4;
  uint64_t result;
  void *v6;
  int v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  char v12;
  unsigned __int8 *v13[2];

  v8[0] = 0;
  v12 = 0;
  v4 = (char *)this + 176;
  if (WTF::WeakHashSet<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)this + 176) == 1)
  {
    v7 = 2687310;
    v13[0] = (unsigned __int8 *)&v7;
    v13[1] = (unsigned __int8 *)2;
    std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,std::initializer_list<std::pair<WebCore::CSSSelectorPseudoClass,BOOL>> &,void>((uint64_t)v8, this, v13);
  }
  result = WTF::WeakHashSet<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::HTMLElement>((uint64_t)v4, (uint64_t)a2);
  if (v12)
  {
    if (v8[0])
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v9, &v11);
    if (v11)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v11, v6);
    result = v10;
    if (v10)
      return WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v10, v6);
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned int v4;
  int v5;
  char v6;

  _ZN3WTF7HashSetINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetINS2_11HTMLElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a1, &v6);
  *(_DWORD *)(a1 + 8) = 0;
  v2 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(v2 - 12);
    if (v4 >= 0x7FFFFFFF)
      v5 = -2;
    else
      v5 = 2 * v4;
    *(_DWORD *)(a1 + 12) = v5;
    return *(unsigned int *)(v2 - 12);
  }
  else
  {
    result = 0;
    *(_DWORD *)(a1 + 12) = 0;
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::HTMLElement>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  char v9;

  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    _ZN3WTF7HashSetINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetINS2_11HTMLElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a1, &v9);
    v6 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    if (*(_QWORD *)a1)
    {
      v6 = *(_DWORD *)(*(_QWORD *)a1 - 12);
      if (v6 > 0x7FFFFFFE)
        v6 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 12) = 2 * v6;
  }
  v7 = (WTF *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL);
  if (v7 && *(_QWORD *)((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL) + 8))
    return WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>((uint64_t *)a1, v7);
  else
    return 0;
}

uint64_t WebCore::HTMLFontElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33BA7A8;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLFontElement::cssValueFromFontSizeNumber(uint64_t *a1, _WORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  int v12;
  int v13;
  int v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  uint64_t v18;
  int v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  unsigned int v46;
  char v47;
  unsigned __int16 v48;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(unsigned int *)(v2 + 4);
  if (!(_DWORD)v4)
    return 0;
  v6 = *(unsigned __int16 **)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) == 0)
  {
    v7 = &v6[v4];
    do
    {
      v8 = *v6;
      v9 = v8 > 0x20;
      v10 = (1 << v8) & 0x100003600;
      if (v9 || v10 == 0)
        break;
      ++v6;
    }
    while (v6 < v7);
    if (v6 == v7)
      return 0;
    v12 = *v6;
    if (v12 == 45)
    {
      v14 = 0;
      ++v6;
      v13 = 1;
    }
    else if (v12 == 43)
    {
      v13 = 0;
      ++v6;
      v14 = 1;
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 1;
    WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v44);
    while (v6 < v7)
    {
      v22 = *v6;
      if ((v22 - 48) > 9)
        break;
      v48 = *v6;
      if (v45 && ((v23 = v46, v46 < *((_DWORD *)v45 + 1)) ? (v24 = v44 == 0) : (v24 = 0), v24))
      {
        v25 = *((_DWORD *)v45 + 4);
        v26 = *((_QWORD *)v45 + 1);
        ++v46;
        if ((v25 & 4) != 0)
          *(_BYTE *)(v26 + v23) = v22;
        else
          *(_WORD *)(v26 + 2 * v23) = v22;
      }
      else
      {
        WTF::StringBuilder::append();
      }
      ++v6;
    }
    v27 = v46;
    if (v46)
    {
      v29 = v44;
      v28 = v45;
      if (v45)
      {
        v30 = v45;
      }
      else
      {
        v30 = v44;
        if (!v44)
        {
LABEL_67:
          if ((v46 & 0x80000000) != 0)
            goto LABEL_107;
          goto LABEL_72;
        }
      }
      if ((*((_BYTE *)v30 + 16) & 4) != 0)
        goto LABEL_67;
      if ((v46 & 0x80000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195BD733CLL);
      }
LABEL_78:
      if (v29)
        v28 = v29;
      v39 = WTF::parseInteger<int,char16_t>(*((_QWORD *)v28 + 1), v27, 10, 0);
      goto LABEL_81;
    }
LABEL_64:
    v38 = 0;
    goto LABEL_93;
  }
  v15 = (char *)v6 + v4;
  v16 = *(_BYTE **)(v2 + 8);
  do
  {
    v17 = *v16;
    v9 = v17 > 0x20;
    v18 = (1 << v17) & 0x100003600;
    if (v9 || v18 == 0)
      break;
    ++v16;
  }
  while (v16 < v15);
  if (v16 == v15)
    return 0;
  v20 = *v16;
  if (v20 == 45)
  {
    v14 = 0;
    ++v16;
    v13 = 1;
  }
  else if (v20 == 43)
  {
    v13 = 0;
    ++v16;
    v14 = 1;
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v44);
  if (v16 < v15)
  {
    v31 = (char *)v6 + v4 - v16;
    do
    {
      v32 = *v16;
      if ((v32 - 48) > 9)
        break;
      LOBYTE(v48) = *v16;
      if (v45 && ((v33 = v46, v46 < *((_DWORD *)v45 + 1)) ? (v34 = v44 == 0) : (v34 = 0), v34))
      {
        v35 = *((_DWORD *)v45 + 4);
        v36 = *((_QWORD *)v45 + 1);
        ++v46;
        if ((v35 & 4) != 0)
          *(_BYTE *)(v36 + v33) = v32;
        else
          *(_WORD *)(v36 + 2 * v33) = v32;
      }
      else
      {
        WTF::StringBuilder::append();
      }
      ++v16;
      --v31;
    }
    while (v31);
  }
  v27 = v46;
  if (!v46)
    goto LABEL_64;
  v29 = v44;
  v28 = v45;
  if (v45)
  {
    v37 = v45;
  }
  else
  {
    v37 = v44;
    if (!v44)
      goto LABEL_71;
  }
  if ((*((_BYTE *)v37 + 16) & 4) == 0)
  {
    if ((v46 & 0x80000000) != 0)
    {
LABEL_107:
      __break(0xC471u);
      JUMPOUT(0x195BD72E8);
    }
    goto LABEL_78;
  }
LABEL_71:
  if ((v46 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195BD7420);
  }
LABEL_72:
  if (v29)
    v28 = v29;
  v39 = WTF::parseInteger<int,unsigned char>(*((_QWORD *)v28 + 1), v27, 10, 0);
LABEL_81:
  if ((v39 & 0xFF00000000) != 0)
    v40 = v39;
  else
    v40 = 0;
  v41 = v40 + 3;
  if (v13)
    v40 = 3 - v40;
  if (v14)
    v40 = v41;
  if (v40 >= 7)
    v40 = 7;
  if (v40 <= 1)
    v38 = 1;
  else
    v38 = v40;
LABEL_93:
  v42 = v45;
  v45 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v21);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = v44;
  v44 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::destroy(v43, v21);
      if ((_DWORD)v27)
        goto LABEL_100;
      return 0;
    }
    *(_DWORD *)v43 -= 2;
  }
  if (!(_DWORD)v27)
    return 0;
LABEL_100:
  if ((v38 - 1) <= 6)
    *a2 = v38 + 94;
  return 1;
}

uint64_t WebCore::HTMLFontElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;

  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 > 0x341)
  {
    if (v2 != 834 && v2 != 949 && v2 != 947)
      return 0;
  }
  else
  {
    v4 = v2 - 402 > 0x38 || ((1 << (v2 + 110)) & 0x100020040000201) == 0;
    if (v4 && v2 != 286 && v2 != 505)
      return 0;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFontElement::collectPresentationalHintsForAttribute(WTF::StringImpl *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  int v5;
  int *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebCore::HTMLElement *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v5 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  switch(v5)
  {
    case 402:
      return (WTF::StringImpl *)WebCore::HTMLElement::addHTMLColorToStyle((uint64_t)this, a4, 5, (uint64_t *)a3);
    case 458:
      if (*(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
      {
        {
          WebCore::CSSValuePool::singleton(void)::pool = 0;
          unk_1ECE88B90 = 0;
          qword_1ECE88B98 = 0;
        }
        this = WebCore::CSSValuePool::createFontFaceValue((WebCore::CSSValuePool *)&WebCore::CSSValuePool::singleton(void)::pool, (unsigned int **)a3, &v11);
        if (v11)
        {
          v10 = v11;
          v11 = 0;
          LOWORD(v9) = -32760;
          WebCore::MutableStyleProperties::setProperty(a4, (unsigned __int16 *)&v9, 0);
          v8 = v10;
          v10 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v7);
            else
              *(_DWORD *)v8 -= 2;
          }
          this = v11;
          v11 = 0;
          if (this)
          {
LABEL_7:
            if (*(_DWORD *)this == 2)
              return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)this, v7);
            else
              *(_DWORD *)this -= 2;
          }
        }
      }
      break;
    case 834:
      LOWORD(v11) = 0;
      this = (WTF::StringImpl *)WebCore::HTMLFontElement::cssValueFromFontSizeNumber((uint64_t *)a3, &v11);
      if ((_DWORD)this)
      {
        if ((unsigned __int16)v11 >= 0x48EuLL)
        {
          __break(0xC471u);
          JUMPOUT(0x195BD7658);
        }
        v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v11];
        v6[3088] += 2;
        v9 = (WebCore::HTMLElement *)(v6 + 3088);
        WebCore::MutableStyleProperties::setProperty(a4, 13, (_DWORD **)&v9, 0);
        this = v9;
        v9 = 0;
        if (this)
          goto LABEL_7;
      }
      break;
    default:
      return WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
  }
  return this;
}

uint64_t *WebCore::HTMLFormControlElement::formEnctype@<X0>(WebCore::HTMLFormControlElement *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;
  _DWORD *v8;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    result = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  result = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(result - 1);
    if (v7 == WebCore::HTMLNames::formenctypeAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::formenctypeAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::formenctypeAttr + 32))
    {
      break;
    }
    result += 2;
    if (!--v5)
    {
      result = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  if (*result)
    return WebCore::FormSubmission::Attributes::parseEncodingType(result, a2);
  v8 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v8 += 2;
  *a2 = (uint64_t)v8;
  return result;
}

WTF::StringImpl *WebCore::HTMLFormControlElement::setFormEnctype(WebCore::HTMLFormControlElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::formenctypeAttr, a2, 0);
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::formenctypeAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::formenctypeAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::formenctypeAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::formenctypeAttr, a2, 0);
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
}

WebCore::FormSubmission::Attributes *WebCore::HTMLFormControlElement::formMethod@<X0>(WebCore::HTMLFormControlElement *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::FormSubmission::Attributes *result;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;

  v4 = *((_QWORD *)this + 13);
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    result = (WebCore::FormSubmission::Attributes *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  result = (WebCore::FormSubmission::Attributes *)(v6 + 8);
  while (1)
  {
    v9 = *((_QWORD *)result - 1);
    if (v9 == WebCore::HTMLNames::formmethodAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::formmethodAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::formmethodAttr + 32))
    {
      break;
    }
    result = (WebCore::FormSubmission::Attributes *)((char *)result + 16);
    if (!--v7)
    {
      result = (WebCore::FormSubmission::Attributes *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  if (*(_QWORD *)result)
  {
    WebCore::FormSubmission::Attributes::parseMethodType(result, a2);
    result = (WebCore::FormSubmission::Attributes *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = v11;
  }
  else
  {
    v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v10 += 2;
  }
  *a3 = v10;
  return result;
}

WTF::StringImpl *WebCore::HTMLFormControlElement::setFormMethod(WebCore::HTMLFormControlElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::formmethodAttr, a2, 0);
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::formmethodAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::formmethodAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::formmethodAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::formmethodAttr, a2, 0);
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
}

WTF::StringImpl *WebCore::HTMLFormControlElement::formAction@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (_QWORD *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::formactionAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::formactionAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::formactionAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  if (*v7 && *(_DWORD *)(*v7 + 4))
  {
    WebCore::Document::completeURL(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), v7, *(_QWORD *)(*((_QWORD *)this + 5) + 8) + 848, 0, (WTF::URL *)&v12);
    this = v12;
    if (v12)
    {
      v11 = *(_DWORD *)v12;
      *(_DWORD *)v12 += 2;
      *a2 = this;
      v12 = 0;
      if (v11)
        *(_DWORD *)this = v11;
      else
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v10);
    }
    else
    {
      *a2 = 0;
    }
  }
  else
  {
    v9 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 736);
    if (v9)
      *(_DWORD *)v9 += 2;
    *a2 = v9;
  }
  return this;
}

WTF::StringImpl *WebCore::HTMLFormControlElement::setFormAction(WebCore::HTMLFormControlElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::formactionAttr, a2, 0);
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::formactionAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::formactionAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::formactionAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::formactionAttr, a2, 0);
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
}

uint64_t WebCore::HTMLFormControlElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  char v4;
  char v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  WebCore *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;

  v4 = a2;
  v6 = a2;
  WebCore::Element::insertedIntoAncestor((WebCore::Element *)a1, (WebCore::Element *)a2, a3);
  if ((*(_BYTE *)(a1 + 22) & 8) != 0)
  {
    v8 = *(_QWORD *)(a1 + 104);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 + 4);
      if ((v9 & 1) != 0)
      {
        v10 = *(uint64_t **)(v8 + 40);
        LODWORD(v11) = *(_DWORD *)(v8 + 52);
        if ((_DWORD)v11)
          goto LABEL_5;
      }
      else
      {
        v10 = (uint64_t *)(v8 + 32);
        LODWORD(v11) = v9 >> 5;
        if ((_DWORD)v11)
        {
LABEL_5:
          v11 = v11;
          while (1)
          {
            v12 = *v10;
            if (*v10 == WebCore::HTMLNames::nonceAttr
              || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::nonceAttr + 24)
              && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::nonceAttr + 32))
            {
              break;
            }
            v10 += 2;
            if (!--v11)
              goto LABEL_9;
          }
          WebCore::Element::hideNonceSlow((WebCore::Element *)a1);
          if (!a1)
            goto LABEL_11;
          goto LABEL_10;
        }
      }
    }
  }
LABEL_9:
  if (!a1)
  {
LABEL_11:
    v13 = (uint64_t *)(a1 + 32);
    goto LABEL_12;
  }
LABEL_10:
  if ((*(_WORD *)(a1 + 28) & 0x80) == 0)
    goto LABEL_11;
  v18 = *(_QWORD *)(a1 + 200);
  if (!v18)
    goto LABEL_18;
  v13 = (uint64_t *)(v18 + 8);
LABEL_12:
  v14 = *v13;
  if (!*v13)
    goto LABEL_18;
  v15 = *(_WORD *)(v14 + 28);
  if ((v15 & 0x80) != 0)
  {
    v19 = *(_QWORD *)(v14 + 200);
    if (!v19)
      goto LABEL_18;
    v14 = *(_QWORD *)(v19 + 8);
    if (!v14)
      goto LABEL_18;
  }
  else if ((v15 & 8) == 0)
  {
    goto LABEL_18;
  }
  v16 = *(_DWORD *)(v14 + 24);
  *(_DWORD *)(v14 + 24) = v16 + 2;
  if ((*(_BYTE *)(v14 + 79) & 0x40) != 0)
  {
    v20 = *(WebCore **)(*(_QWORD *)(a1 + 96) + 24);
    v21 = v20 == *(WebCore **)(WebCore::HTMLNames::inputTag + 24) ? a1 : 0;
    if (!WebCore::elementAffectsDirectionality(v20, *(const WebCore::HTMLElement **)(a1 + 104))
      && (!v21 || *(_DWORD *)(*(_QWORD *)(v21 + 240) + 12) != 0x20000))
    {
      v22 = *(_QWORD *)(a1 + 72) | 0x4000000000000000;
      *(_QWORD *)(a1 + 72) = v22;
      v23 = *(_QWORD *)(v14 + 72);
      if ((v23 & 0x4000000000000000) != 0)
        v24 = v23 >> 63;
      else
        LODWORD(v24) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 8) + 3360) != 0;
      v25 = (_DWORD)v24 == 0;
      v26 = 0x8000000000000000;
      if (v25)
        v26 = 0;
      *(_QWORD *)(a1 + 72) = v26 & 0x8000000000000000 | v22 & 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  if (v16)
  {
    *(_DWORD *)(v14 + 24) = v16;
  }
  else if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v14, v7);
  }
LABEL_18:
  WebCore::ValidatedFormListedElement::insertedIntoAncestor((WebCore::ValidationMessage **)(a1 + 112), v6, a3);
  return v4 & 1;
}

unsigned int *WebCore::HTMLFormControlElement::didFinishInsertingNode(WebCore::HTMLFormControlElement *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int *result;
  const WTF::AtomString *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Node *v14;
  __int16 v15;
  WebCore::Node *v16;
  uint64_t v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::Node *v26;
  WebCore::Node *v27;

  v2 = (char *)this + 112;
  v3 = *((_QWORD *)this + 15);
  if (!v3)
  {
    v4 = 0;
LABEL_3:
    v5 = 1;
    goto LABEL_4;
  }
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_3;
  v5 = 0;
  *(_DWORD *)(v4 + 24) += 2;
LABEL_4:
  result = (unsigned int *)(*(uint64_t (**)(char *))(*(_QWORD *)v2 + 16))((char *)this + 112);
  v8 = (uint64_t)result;
  if ((*((_BYTE *)result + 22) & 8) == 0)
  {
LABEL_14:
    v14 = (WebCore::Node *)v4;
    if (v5)
    {
      v14 = *(WebCore::Node **)(v8 + 32);
      if (!v14)
        goto LABEL_18;
      v15 = *((_WORD *)v14 + 14);
      if ((v15 & 8) == 0)
        goto LABEL_17;
      while ((v15 & 0x10) == 0
           || *(_QWORD *)(*((_QWORD *)v14 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
      {
        v14 = (WebCore::Node *)*((_QWORD *)v14 + 4);
        if (!v14)
          goto LABEL_18;
        v15 = *((_WORD *)v14 + 14);
        if ((v15 & 8) == 0)
          goto LABEL_17;
      }
    }
    *((_DWORD *)v14 + 6) += 2;
    goto LABEL_18;
  }
  v9 = *((_QWORD *)result + 13);
  if (!v9)
    goto LABEL_36;
  v10 = *(_DWORD *)(v9 + 4);
  if ((v10 & 1) == 0)
  {
    v11 = v9 + 32;
    LODWORD(v12) = v10 >> 5;
    if ((_DWORD)v12)
      goto LABEL_8;
LABEL_36:
    v7 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v11 = *(_QWORD *)(v9 + 40);
  LODWORD(v12) = *(_DWORD *)(v9 + 52);
  if (!(_DWORD)v12)
    goto LABEL_36;
LABEL_8:
  v12 = v12;
  v7 = (const WTF::AtomString *)(v11 + 8);
  while (1)
  {
    v13 = *((_QWORD *)v7 - 1);
    if (v13 == WebCore::HTMLNames::formAttr
      || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
      && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
    {
      break;
    }
    v7 = (const WTF::AtomString *)((char *)v7 + 16);
    if (!--v12)
    {
      v7 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  if (!*(_QWORD *)v7)
    goto LABEL_14;
  result = WebCore::TreeScope::getElementById(*((unsigned int **)result + 5), v7, (uint64_t *)&v27);
  v14 = v27;
  if (v27)
  {
    if ((*((_WORD *)v27 + 14) & 0x10) == 0
      || *(_QWORD *)(*((_QWORD *)v27 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
    {
      if (*((_DWORD *)v27 + 6) == 2)
      {
        if ((*((_WORD *)v27 + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef(v27, v7);
      }
      else
      {
        *((_DWORD *)v27 + 6) -= 2;
      }
LABEL_17:
      v14 = 0;
      goto LABEL_18;
    }
    v24 = v8;
    do
    {
      v25 = v24;
      v24 = *(_QWORD *)(v24 + 32);
    }
    while (v24);
    if (v25 != **(_QWORD **)(v8 + 40))
    {
      if (*((_DWORD *)v27 + 6) == 2)
      {
        if ((*((_WORD *)v27 + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef(v27, v7);
      }
      else
      {
        *((_DWORD *)v27 + 6) -= 2;
      }
      goto LABEL_14;
    }
  }
LABEL_18:
  v26 = v14;
  v16 = (WebCore::Node *)*((_QWORD *)this + 15);
  if (v16)
    v16 = (WebCore::Node *)*((_QWORD *)v16 + 1);
  if (v14 != v16)
  {
    result = (unsigned int *)(*(uint64_t (**)(char *, WebCore::Node **))(*(_QWORD *)v2 + 80))(v2, &v26);
    v14 = v26;
  }
  v26 = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 6) == 2)
    {
      v18 = *((_WORD *)v14 + 15);
      if ((v18 & 0x400) == 0)
      {
        v19 = *((_WORD *)v14 + 14);
        if ((v19 & 0xF000) == 0x9000)
        {
          result = WebCore::Document::removedLastRef(v14, v7);
        }
        else
        {
          if ((v19 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v14 + 20) + 16))(*((_QWORD *)v14 + 20));
            v18 = *((_WORD *)v14 + 15);
          }
          *((_WORD *)v14 + 15) = v18 | 0x400;
          result = (unsigned int *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v14 + 72))(v14);
        }
      }
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
  }
  v17 = *((_QWORD *)this + 15);
  if (v17)
  {
    v22 = *(_QWORD *)(v17 + 8);
    v23 = !v22 || v4 == v22;
    if (!v23 && (*(_BYTE *)(v22 + 22) & 8) != 0)
      result = (unsigned int *)WebCore::Document::didAssociateFormControl(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8), (WebCore::Element *)v8);
  }
  if ((v5 & 1) == 0)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      v20 = *(_WORD *)(v4 + 30);
      if ((v20 & 0x400) == 0)
      {
        v21 = *(_WORD *)(v4 + 28);
        if ((v21 & 0xF000) == 0x9000)
        {
          return WebCore::Document::removedLastRef((WebCore::Document *)v4, v7);
        }
        else
        {
          if ((v21 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
            v20 = *(_WORD *)(v4 + 30);
          }
          *(_WORD *)(v4 + 30) = v20 | 0x400;
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
        }
      }
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLFormControlElement::removedFromAncestor(WebCore::Element *this, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  unint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];

  v7 = a2;
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE8))
  {
    WebCore::HTMLElement::hidePopoverInternal((uint64_t)this, 0, 0, (uint64_t)v22);
    WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v22, v10);
  }
  WebCore::Element::removedFromAncestor(this, (void *)v7, a3, a4, a5);
  v8 = *((_QWORD *)this + 9);
  if ((v8 & 0x4000000000000000) == 0)
    return WebCore::ValidatedFormListedElement::removedFromAncestor((uint64_t)this + 112, v7, a3);
  v11 = *((_QWORD *)this + 13);
  if (v11
    && ((v12 = *(_DWORD *)(v11 + 4), (v12 & 1) != 0)
      ? (v13 = *(_QWORD *)(v11 + 40), LODWORD(v14) = *(_DWORD *)(v11 + 52))
      : (v13 = v11 + 32, LODWORD(v14) = v12 >> 5),
        (_DWORD)v14))
  {
    v14 = v14;
    v15 = (_BOOL8 *)(v13 + 8);
    while (1)
    {
      v16 = *(v15 - 1);
      if (v16 == WebCore::HTMLNames::dirAttr
        || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 24)
        && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 32))
      {
        break;
      }
      v15 += 2;
      if (!--v14)
      {
        v15 = (_BOOL8 *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v15 = (_BOOL8 *)MEMORY[0x1E0CBF2F8];
  }
  if (WebCore::isValidDirValue(*v15))
    return WebCore::ValidatedFormListedElement::removedFromAncestor((uint64_t)this + 112, v7, a3);
  if (this && (*((_WORD *)this + 14) & 0x80) != 0)
  {
    v20 = *((_QWORD *)this + 25);
    if (!v20)
      goto LABEL_23;
    v17 = (uint64_t *)(v20 + 8);
  }
  else
  {
    v17 = (uint64_t *)((char *)this + 32);
  }
  v18 = *v17;
  if (!v18)
    goto LABEL_23;
  v19 = *(_WORD *)(v18 + 28);
  if ((v19 & 0x80) == 0)
  {
    if ((v19 & 8) != 0)
      goto LABEL_22;
LABEL_23:
    *((_QWORD *)this + 9) = v8 & 0xBFFFFFFFFFFFFFFFLL;
    return WebCore::ValidatedFormListedElement::removedFromAncestor((uint64_t)this + 112, v7, a3);
  }
  v21 = *(_QWORD *)(v18 + 200);
  if (!v21)
    goto LABEL_23;
  v18 = *(_QWORD *)(v21 + 8);
  if (!v18)
    goto LABEL_23;
LABEL_22:
  if ((*(_BYTE *)(v18 + 79) & 0x40) == 0)
    goto LABEL_23;
  return WebCore::ValidatedFormListedElement::removedFromAncestor((uint64_t)this + 112, v7, a3);
}

WTF *WebCore::HTMLFormControlElement::finishParsingChildren(WebCore::HTMLFormControlElement *this)
{
  __int16 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  const WebCore::ValidatedFormListedElement *v14;
  WTF *result;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  WebCore::FormController *v27;
  WTF *v28;
  void *v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t ElementChild;
  WTF::MonotonicTime *ElementSibling;
  unint64_t v36;
  WTF *v37[2];
  __int128 v38;
  uint64_t v39;

  v2 = *((_WORD *)this + 15);
  if ((v2 & 0x200) != 0)
  {
    v8 = 0;
    *((_WORD *)this + 15) = v2 & 0xFDFF;
    v39 = 0;
    *(_OWORD *)v37 = 0u;
    v38 = 0u;
    LOBYTE(v37[0]) = 8;
    v9 = *((_QWORD *)this + 10);
    if (v9)
    {
      while ((*(_WORD *)(v9 + 28) & 8) == 0)
      {
        v8 = 0;
        v9 = *(_QWORD *)(v9 + 56);
        if (!v9)
          goto LABEL_16;
      }
      v8 = v9;
    }
LABEL_16:
    if (v8)
      v10 = 2;
    else
      v10 = 1;
    BYTE1(v39) = v10;
    (*(void (**)(WebCore::HTMLFormControlElement *, WTF **))(*(_QWORD *)this + 376))(this, v37);
    v2 = *((_WORD *)this + 15);
  }
  *((_WORD *)this + 15) = v2 & 0xFFFD;
  if ((*((_BYTE *)this + 22) & 8) != 0)
  {
    v3 = (uint64_t *)*((_QWORD *)this + 5);
    v4 = v3[1];
    if (*(_QWORD *)(v4 + 1944))
    {
      if (!*(_BYTE *)(v4 + 3405))
      {
        v5 = *((_QWORD *)this + 8);
        if ((v5 & 0x4000000000000) == 0)
          goto LABEL_88;
        v11 = *v3;
        v12 = (*(_WORD *)(v11 + 28) & 0x80) == 0 || v11 == 0;
        v13 = v11 + 216;
        if (v12)
          v13 = v4 + 1328;
        if (*(_BYTE *)(*(_QWORD *)v13 + 236))
        {
LABEL_88:
          v6 = *(_QWORD *)(v4 + 1272);
          if ((!v6 || (*(_BYTE *)(v6 + 70) & 4) == 0)
            && (*(_BYTE *)(v4 + 3362) || !*(_BYTE *)(v4 + 3390) || *(_BYTE *)(v4 + 3391)))
          {
            if ((v5 & 0x800000000000000) != 0)
            {
              v33 = v5 & 0xFFFFFFFFFFFFLL;
              if ((v5 & 0xFFFFFFFFFFFFLL) == 0)
                goto LABEL_76;
              if ((*(_BYTE *)((v5 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                v33 = *(_QWORD *)(*(_QWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
              if ((*(_BYTE *)(v33 + 100) & 0x80) == 0 || *((_QWORD *)this + 10))
LABEL_76:
                WebCore::Element::invalidateStyleForSubtree(this);
            }
            v7 = *((_QWORD *)this + 11);
            if (v7)
            {
              while ((*(_WORD *)(v7 + 28) & 8) == 0)
              {
                v7 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL;
                if (!v7)
                  goto LABEL_26;
              }
              v25 = *((_QWORD *)this + 8);
              if ((v25 & 0x80000000000000) != 0)
              {
                WebCore::Style::invalidateForLastChildState((WTF::MonotonicTime *)v7, 0);
                v25 = *((_QWORD *)this + 8);
              }
              if (v25 >> 62)
              {
                v36 = v25;
                if ((v25 & 0x8000000000000000) != 0)
                {
                  do
                  {
                    if ((v25 & 0x4000000000000000) != 0)
                      WebCore::Element::invalidateStyleInternal((WTF::MonotonicTime *)v7);
                    ElementChild = WebCore::ContainerNode::firstElementChild((WebCore::ContainerNode *)v7);
                    if (ElementChild)
                    {
                      ElementSibling = (WTF::MonotonicTime *)ElementChild;
                      do
                      {
                        WebCore::Element::invalidateStyleForSubtreeInternal(ElementSibling);
                        ElementSibling = (WTF::MonotonicTime *)WebCore::Node::nextElementSibling((uint64_t)ElementSibling);
                      }
                      while (ElementSibling);
                    }
                    v7 = WebCore::Node::previousElementSibling(v7);
                    v25 = v36;
                  }
                  while (v7);
                }
                else if ((v25 & 0x4000000000000000) != 0)
                {
                  do
                  {
                    WebCore::Element::invalidateStyleInternal((WTF::MonotonicTime *)v7);
                    v7 = WebCore::Node::previousElementSibling(v7);
                  }
                  while (v7);
                }
                else
                {
                  do
                    v7 = WebCore::Node::previousElementSibling(v7);
                  while (v7);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_26:
  v14 = (WebCore::HTMLFormControlElement *)((char *)this + 112);
  result = (WTF *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 24))((char *)this + 112);
  v16 = *((_QWORD *)result + 13);
  if (!v16)
    goto LABEL_33;
  v17 = *(_DWORD *)(v16 + 4);
  if ((v17 & 1) == 0)
  {
    v18 = (uint64_t *)(v16 + 32);
    LODWORD(v19) = v17 >> 5;
    if ((_DWORD)v19)
      goto LABEL_29;
LABEL_33:
    v21 = *((_QWORD *)this + 15);
    if (v21 && *(_QWORD *)(v21 + 8))
      return result;
    goto LABEL_34;
  }
  v18 = *(uint64_t **)(v16 + 40);
  LODWORD(v19) = *(_DWORD *)(v16 + 52);
  if (!(_DWORD)v19)
    goto LABEL_33;
LABEL_29:
  v19 = v19;
  while (1)
  {
    v20 = *v18;
    if (*v18 == WebCore::HTMLNames::formAttr
      || *(_QWORD *)(v20 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
      && *(_QWORD *)(v20 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
    {
      break;
    }
    v18 += 2;
    if (!--v19)
      goto LABEL_33;
  }
LABEL_34:
  v22 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v14 + 16))((char *)this + 112) + 40)
                  + 8);
  v23 = *(WTF::StringImpl **)(v22 + 1352);
  if (!v23)
  {
    v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    v27 = *(WebCore::FormController **)(v22 + 1352);
    *(_QWORD *)(v22 + 1352) = v23;
    if (v27)
    {
      WebCore::FormController::~FormController(v27, v26);
      WTF::fastFree(v28, v29);
      v23 = *(WTF::StringImpl **)(v22 + 1352);
    }
  }
  result = (WTF *)(*(uint64_t (**)(const WebCore::ValidatedFormListedElement *))(*(_QWORD *)v14 + 304))(v14);
  if ((_DWORD)result)
  {
    result = (WTF *)(*(uint64_t (**)(const WebCore::ValidatedFormListedElement *))(*(_QWORD *)v14 + 24))(v14);
    if ((*((_BYTE *)result + 22) & 8) != 0)
    {
      result = (WTF *)(*(uint64_t (**)(const WebCore::ValidatedFormListedElement *))(*(_QWORD *)v14 + 296))(v14);
      if ((_DWORD)result)
      {
        WebCore::FormController::takeStateForFormElement(v23, v14, v37);
        if (HIDWORD(v37[1]))
        {
          (*(void (**)(const WebCore::ValidatedFormListedElement *, WTF **))(*(_QWORD *)v14 + 320))(v14, v37);
          if (HIDWORD(v37[1]))
          {
            v30 = (WTF::StringImpl **)v37[0];
            v31 = 8 * HIDWORD(v37[1]);
            do
            {
              v32 = *v30;
              *v30 = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                  WTF::StringImpl::destroy(v32, v24);
                else
                  *(_DWORD *)v32 -= 2;
              }
              ++v30;
              v31 -= 8;
            }
            while (v31);
          }
        }
        result = v37[0];
        if (v37[0])
        {
          v37[0] = 0;
          LODWORD(v37[1]) = 0;
          return (WTF *)WTF::fastFree(result, v24);
        }
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLFormControlElement::disabledStateChanged(WebCore::HTMLFormControlElement *this)
{
  uint64_t result;
  _BYTE v3[20];
  __int128 v4;
  char v5;

  WebCore::ValidatedFormListedElement::updateWillValidateAndValidity(this);
  result = *((_QWORD *)this - 6) & 0xFFFFFFFFFFFFLL;
  if (result)
  {
    if ((*(_BYTE *)((*((_QWORD *)this - 6) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
    }
    else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)this - 6) & 0xFFFFFFFFFFFFLL) + 0x58) + 32) + 148) & 0x1FC000) != 0
           && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)this - 6) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40)
                                                                                                + 8)
                                                                                    + 1944)
                                                                        + 24)
                                                            + 8)
                                                + 40)
                                    + 8)
                        + 3382))
    {
      LOBYTE(v4) = 0;
      v5 = 0;
      v3[0] = 0;
      v3[16] = 0;
      return WebCore::RenderObject::issueRepaint(result, &v4, 0, 0, (uint64_t)v3);
    }
  }
  return result;
}

WebCore::Node *WebCore::HTMLFormControlElement::readOnlyStateChanged(WebCore::HTMLFormControlElement *this)
{
  WebCore::Node *result;
  uint64_t v3;
  WebCore::Node *ElementSibling;
  WebCore::Element *v5;

  WebCore::ValidatedFormListedElement::updateWillValidateAndValidity((WebCore::HTMLFormControlElement *)((char *)this + 112));
  result = (WebCore::Node *)WebCore::Node::invalidateStyle((uint64_t)this, 4u, 0);
  if ((*((_BYTE *)this + 71) & 1) != 0)
  {
    v3 = *((_QWORD *)this + 4);
    if (!v3 || (*(_WORD *)(v3 + 28) & 8) == 0 || (*(_BYTE *)(v3 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
      return WebCore::invalidateForSiblingCombinators(ElementSibling, v5);
    }
  }
  return result;
}

WebCore::Node *`non-virtual thunk to'WebCore::HTMLFormControlElement::readOnlyStateChanged(WebCore::HTMLFormControlElement *this)
{
  char *v2;
  WebCore::Node *result;
  uint64_t v4;
  WebCore::Node *ElementSibling;
  WebCore::Element *v6;

  v2 = (char *)this - 112;
  WebCore::ValidatedFormListedElement::updateWillValidateAndValidity(this);
  result = (WebCore::Node *)WebCore::Node::invalidateStyle((uint64_t)v2, 4u, 0);
  if ((*((_BYTE *)this - 41) & 1) != 0)
  {
    v4 = *((_QWORD *)this - 10);
    if (!v4 || (*(_WORD *)(v4 + 28) & 8) == 0 || (*(_BYTE *)(v4 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)v2);
      return WebCore::invalidateForSiblingCombinators(ElementSibling, v6);
    }
  }
  return result;
}

uint64_t WebCore::HTMLFormControlElement::requiredStateChanged(WebCore::HTMLFormControlElement *this)
{
  return WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this + 112);
}

uint64_t WebCore::HTMLFormControlElement::didAttachRenderers(WebCore::HTMLFormControlElement *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (result)
  {
    if ((*(_BYTE *)(result + 45) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 312))(result);
    }
  }
  return result;
}

WebCore::Node *WebCore::HTMLFormControlElement::dispatchChangeEvent(WebCore::HTMLFormControlElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Event *v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  _DWORD *v10;
  WebCore::Node *result;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v8 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8202;
  v9 = *(_QWORD *)(v4 + 368) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v8 | v9;
  v10 = *(_DWORD **)(v4 + 368);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(v5 + 24) = v10;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v7;
  *(_QWORD *)(v5 + 64) = 0;
  result = WebCore::EventDispatcher::dispatchScopedEvent(this, (WebCore::Node *)v5, v6);
  if (*(_DWORD *)(v5 + 16) == 1)
    return (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  --*(_DWORD *)(v5 + 16);
  return result;
}

WebCore::Node *WebCore::HTMLFormControlElement::dispatchCancelEvent(WebCore::HTMLFormControlElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Event *v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  _DWORD *v10;
  WebCore::Node *result;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v8 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8202;
  v9 = *(_QWORD *)(v4 + 344) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v8 | v9;
  v10 = *(_DWORD **)(v4 + 344);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(v5 + 24) = v10;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v7;
  *(_QWORD *)(v5 + 64) = 0;
  result = WebCore::EventDispatcher::dispatchScopedEvent(this, (WebCore::Node *)v5, v6);
  if (*(_DWORD *)(v5 + 16) == 1)
    return (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  --*(_DWORD *)(v5 + 16);
  return result;
}

unsigned __int8 *WebCore::HTMLFormControlElement::dispatchFormControlChangeEvent(WebCore::HTMLFormControlElement *this)
{
  WebCore::HTMLFormControlElement::dispatchChangeEvent(this);
  *((_BYTE *)this + 168) &= ~4u;
  return WebCore::ValidatedFormListedElement::setInteractedWithSinceLastFormSubmitEvent((unsigned __int8 *)this + 112, 1);
}

WebCore::Node *WebCore::HTMLFormControlElement::dispatchFormControlInputEvent(WebCore::Node *this)
{
  *((_BYTE *)this + 168) |= 4u;
  return WebCore::Node::dispatchInputEvent(this);
}

uint64_t WebCore::HTMLFormControlElement::isKeyboardFocusable(WebCore::HTMLFormControlElement *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v5;
  uint64_t v6;

  if ((WebCore::Element::tabIndexSetExplicitly(this) & 0xFF00000000) != 0)
    return WebCore::Element::isKeyboardFocusable(this, a2);
  if ((*(unsigned int (**)(WebCore::HTMLFormControlElement *))(*(_QWORD *)this + 552))(this))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
        return WebCore::EventHandler::tabsToAllFormControls(*(WebCore::EventHandler **)(v6 + 640), a2);
    }
  }
  return 0;
}

uint64_t WebCore::HTMLFormControlElement::isMouseFocusable(WebCore::HTMLFormControlElement *this)
{
  WebCore::Document *v3;

  if ((WebCore::Element::tabIndexSetExplicitly(this) & 0xFF00000000) != 0)
    return (*(uint64_t (**)(WebCore::HTMLFormControlElement *))(*(_QWORD *)this + 552))(this);
  v3 = *(WebCore::Document **)(*((_QWORD *)this + 5) + 8);
  if (!*((_QWORD *)v3 + 86))
    WebCore::Document::ensureQuirks(v3);
  return 0;
}

uint64_t WebCore::HTMLFormControlElement::runFocusingStepsForAutofocus(WebCore::HTMLFormControlElement *this)
{
  char v2;
  int v3;
  char v4;

  v2 = 2;
  v3 = 0;
  v4 = 0;
  return (*(uint64_t (**)(WebCore::HTMLFormControlElement *, char *))(*(_QWORD *)this + 656))(this, &v2);
}

WebCore::ValidationMessage *WebCore::HTMLFormControlElement::dispatchBlurEvent(_QWORD *a1, uint64_t *a2)
{
  WebCore::ValidationMessage *result;

  WebCore::Element::dispatchBlurEvent(a1, a2);
  result = (WebCore::ValidationMessage *)a1[19];
  if (result)
    return (WebCore::ValidationMessage *)WebCore::ValidationMessage::requestToHideMessage(result);
  return result;
}

uint64_t WebCore::HTMLFormControlElement::shouldAutocorrect(WebCore::HTMLFormControlElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void *v10;
  unsigned int v11;

  v1 = *((_QWORD *)this + 13);
  if (v1
    && ((v2 = *(_DWORD *)(v1 + 4), (v2 & 1) != 0)
      ? (v3 = *(_QWORD *)(v1 + 40), LODWORD(v4) = *(_DWORD *)(v1 + 52))
      : (v3 = v1 + 32, LODWORD(v4) = v2 >> 5),
        (_DWORD)v4))
  {
    v4 = v4;
    v5 = (uint64_t *)(v3 + 8);
    while (1)
    {
      v6 = *(v5 - 1);
      if (v6 == WebCore::HTMLNames::autocorrectAttr
        || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::autocorrectAttr + 24)
        && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::autocorrectAttr + 32))
      {
        break;
      }
      v5 += 2;
      if (!--v4)
      {
        v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  if (*v5 && *(_DWORD *)(*v5 + 4))
    return WTF::equalLettersIgnoringASCIICase(v5, "off", 4uLL) ^ 1;
  v7 = *((_QWORD *)this + 15);
  if (!v7)
    return 1;
  v9 = *(_QWORD *)(v7 + 8);
  if (!v9)
    return 1;
  *(_DWORD *)(v9 + 24) += 2;
  result = WebCore::HTMLElement::shouldAutocorrect((WebCore::HTMLElement *)v9);
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    v11 = result;
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9, v10);
    return v11;
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLFormControlElement::autocapitalizeType(WebCore::HTMLFormControlElement *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  __int16 v18;
  __int16 v19;
  unsigned int v20;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::autocapitalizeAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::autocapitalizeAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::autocapitalizeAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  result = WebCore::autocapitalizeTypeForAttributeValue(v6);
  if (!(_DWORD)result)
  {
    v9 = *((_QWORD *)this + 15);
    if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
    {
      *(_DWORD *)(v10 + 24) += 2;
      v11 = *(_QWORD *)(v10 + 104);
      if (v11
        && ((v12 = *(_DWORD *)(v11 + 4), (v12 & 1) != 0)
          ? (v13 = *(_QWORD *)(v11 + 40), LODWORD(v14) = *(_DWORD *)(v11 + 52))
          : (v13 = v11 + 32, LODWORD(v14) = v12 >> 5),
            (_DWORD)v14))
      {
        v14 = v14;
        v15 = (uint64_t *)(v13 + 8);
        while (1)
        {
          v16 = *(v15 - 1);
          if (v16 == WebCore::HTMLNames::autocapitalizeAttr
            || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::autocapitalizeAttr + 24)
            && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::autocapitalizeAttr + 32))
          {
            break;
          }
          v15 += 2;
          if (!--v14)
          {
            v15 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v15 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      }
      result = WebCore::autocapitalizeTypeForAttributeValue(v15);
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        v20 = result;
        v18 = *(_WORD *)(v10 + 30);
        if ((v18 & 0x400) == 0)
        {
          v19 = *(_WORD *)(v10 + 28);
          if ((v19 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v10, v17);
          }
          else
          {
            if ((v19 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 160) + 16))(*(_QWORD *)(v10 + 160));
              v18 = *(_WORD *)(v10 + 30);
            }
            *(_WORD *)(v10 + 30) = v18 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
          }
        }
        return v20;
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFormControlElement::autocomplete@<X0>(WebCore::HTMLFormControlElement *this@<X0>, const WebCore::HTMLFormControlElement *a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  uint64_t v7;

  WebCore::AutofillData::createFromHTMLFormControlElement(this, a2, (uint64_t)&v6);
  result = v6;
  *a3 = v7;
  v6 = 0;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFormControlElement::setAutocomplete(WebCore::HTMLFormControlElement *this, WTF::StringImpl **a2)
{
  return WebCore::Element::setAttributeWithoutSynchronization(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::autocompleteAttr, a2);
}

uint64_t WebCore::HTMLFormControlElement::resultForDialogSubmit@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(this + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (_DWORD **)(v4 + 8);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 1);
    if (v7 == WebCore::HTMLNames::valueAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (v8)
    *v8 += 2;
  *a2 = v8;
  return this;
}

unsigned int *WebCore::HTMLFormControlElement::popoverTargetElement@<X0>(unsigned int *this@<X0>, unsigned int **a2@<X8>)
{
  WebCore::Element *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int16 v7;
  int v8;
  _BYTE *v10;
  WebCore::Node *v11;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 688) & 0x20000000) == 0)
    goto LABEL_10;
  v3 = (WebCore::Element *)this;
  v4 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
  if (v4 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    v8 = *(_DWORD *)(*((_QWORD *)this + 30) + 12);
    if (v8 != 256 && (v8 & 0x14001) == 0)
      goto LABEL_10;
  }
  else if (v4 != *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24))
  {
LABEL_10:
    *a2 = 0;
    return this;
  }
  this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 960))(this);
  if ((_DWORD)this)
    goto LABEL_10;
  v5 = *((_QWORD *)v3 + 15);
  if (v5)
  {
    if (*(_QWORD *)(v5 + 8))
    {
      this = (unsigned int *)(*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)v3 + 1288))(v3);
      if ((_DWORD)this)
        goto LABEL_10;
    }
  }
  WebCore::Element::getElementAttribute(v3, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::popovertargetAttr, (uint64_t *)&v11);
  this = (unsigned int *)v11;
  if (!v11)
    goto LABEL_10;
  v7 = *((_WORD *)v11 + 14);
  v11 = 0;
  if ((v7 & 0x10) == 0)
  {
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)this, v6);
    }
    else
    {
      this[6] -= 2;
    }
    goto LABEL_10;
  }
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0
    && (v10 = *(_BYTE **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE8)) != 0
    && *v10)
  {
    *a2 = this;
  }
  else
  {
    *a2 = 0;
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)this, v6);
    }
    else
    {
      this[6] -= 2;
    }
  }
  return this;
}

uint64_t *WebCore::HTMLFormControlElement::popoverTargetAction(WebCore::HTMLFormControlElement *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WTF **v7;
  uint64_t v8;
  WTF *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  uint64_t *v13;
  const WTF::StringImpl *v14;
  char *v16;
  uint64_t v17;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (WTF **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (WTF **)(v5 + 8);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 1);
    if (v8 == WebCore::HTMLNames::popovertargetactionAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::popovertargetactionAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::popovertargetactionAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (WTF **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (*v7)
    *(_DWORD *)v9 += 2;
  if (byte_1ECE83533 == 1)
  {
    v10 = (const WTF::StringImpl *)qword_1ECE83550;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v10 = (const WTF::StringImpl *)v17;
    qword_1ECE83550 = v17;
    byte_1ECE83533 = 1;
  }
  if (WTF::equalIgnoringASCIICase(v9, v10, a3))
  {
    if ((byte_1ECE83533 & 1) != 0)
    {
      v13 = &qword_1ECE83550;
      if (!v9)
        return v13;
      goto LABEL_29;
    }
    WTF::AtomStringImpl::add();
    v16 = &byte_1ECE83533;
    qword_1ECE83550 = v17;
    v13 = &qword_1ECE83550;
  }
  else
  {
    if (byte_1ECE83534 == 1)
    {
      v14 = (const WTF::StringImpl *)qword_1ECE83558;
    }
    else
    {
      WTF::AtomStringImpl::add();
      v14 = (const WTF::StringImpl *)v17;
      qword_1ECE83558 = v17;
      byte_1ECE83534 = 1;
    }
    if (WTF::equalIgnoringASCIICase(v9, v14, v12))
    {
      if ((byte_1ECE83534 & 1) != 0)
      {
        v13 = &qword_1ECE83558;
        if (!v9)
          return v13;
        goto LABEL_29;
      }
      WTF::AtomStringImpl::add();
      v16 = &byte_1ECE83534;
      qword_1ECE83558 = v17;
      v13 = &qword_1ECE83558;
    }
    else
    {
      if ((byte_1ECE83535 & 1) != 0)
      {
        v13 = &qword_1ECE83560;
        if (!v9)
          return v13;
        goto LABEL_29;
      }
      WTF::AtomStringImpl::add();
      v16 = &byte_1ECE83535;
      qword_1ECE83560 = v17;
      v13 = &qword_1ECE83560;
    }
  }
  *v16 = 1;
  if (!v9)
    return v13;
LABEL_29:
  if (*(_DWORD *)v9 == 2)
    WTF::StringImpl::destroy(v9, v11);
  else
    *(_DWORD *)v9 -= 2;
  return v13;
}

unsigned int *WebCore::HTMLFormControlElement::handlePopoverTargetAction(WebCore::HTMLFormControlElement *this)
{
  unsigned int *result;
  uint64_t v3;
  const WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  WTF::StringImpl *v13;
  const WebCore::HTMLFormControlElement *v14;
  WebCore::Node *v15;
  _BYTE v16[24];
  _BYTE v17[24];
  WebCore::Node *v18;
  uint64_t v19;

  result = WebCore::HTMLFormControlElement::popoverTargetElement((unsigned int *)this, (unsigned int **)&v18);
  if (!v18)
    return result;
  v14 = this;
  v15 = v18;
  result = (unsigned int *)WebCore::HTMLFormControlElement::popoverTargetAction(this, v3, v4);
  v6 = *(WTF::StringImpl **)result;
  if (*(_QWORD *)result)
    *(_DWORD *)v6 += 2;
  if (byte_1ECE83534 == 1)
  {
    v7 = qword_1ECE83558;
  }
  else
  {
    result = (unsigned int *)WTF::AtomStringImpl::add();
    v7 = v19;
    qword_1ECE83558 = v19;
    byte_1ECE83534 = 1;
  }
  v9 = (v6 == (WTF::StringImpl *)v7
     || (byte_1ECE83535 != 1
       ? (result = (unsigned int *)WTF::AtomStringImpl::add(), v8 = v19, qword_1ECE83560 = v19, byte_1ECE83535 = 1)
       : (v8 = qword_1ECE83560),
         v6 == (WTF::StringImpl *)v8))
    && *(_BYTE *)(*(_QWORD *)((*((_QWORD *)v15 + 9) & 0xFFFFFFFFFFFFLL) + 0xE8) + 1) != 0;
  if (byte_1ECE83533 == 1)
  {
    v10 = qword_1ECE83550;
  }
  else
  {
    result = (unsigned int *)WTF::AtomStringImpl::add();
    v10 = v19;
    qword_1ECE83550 = v19;
    byte_1ECE83533 = 1;
  }
  if (v6 != (WTF::StringImpl *)v10)
  {
    if (byte_1ECE83535 == 1)
    {
      v11 = qword_1ECE83560;
    }
    else
    {
      result = (unsigned int *)WTF::AtomStringImpl::add();
      v11 = v19;
      qword_1ECE83560 = v19;
      byte_1ECE83535 = 1;
    }
    if (v6 != (WTF::StringImpl *)v11)
    {
      if (!v9)
        goto LABEL_24;
      goto LABEL_22;
    }
  }
  if (v9)
  {
LABEL_22:
    v12 = v17;
    WebCore::HTMLElement::hidePopoverInternal((uint64_t)v15, 1, 1, (uint64_t)v17);
    goto LABEL_23;
  }
  if (*(_BYTE *)(*(_QWORD *)((*((_QWORD *)v15 + 9) & 0xFFFFFFFFFFFFLL) + 0xE8) + 1))
    goto LABEL_24;
  v12 = v16;
  WebCore::HTMLElement::showPopover(v15, v14, (uint64_t)v16);
LABEL_23:
  result = (unsigned int *)WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v12, v13);
LABEL_24:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      result = (unsigned int *)WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (*((_DWORD *)v15 + 6) == 2)
  {
    result = (unsigned int *)v15;
    if ((*((_WORD *)v15 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v15, v5);
  }
  else
  {
    *((_DWORD *)v15 + 6) -= 2;
  }
  return result;
}

unsigned int *WebCore::HTMLFormControlElement::handleInvokeAction(unsigned int *this)
{
  uint64_t v1;
  int v2;
  WTF::StringImpl *v4;
  double v5;
  double v6;
  float v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  _DWORD *v42;
  WebCore::Node *v43;
  char v44;
  WebCore::Node *v45;

  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 680) & 0x80000000) == 0)
    return this;
  v1 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
  if (v1 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    v2 = *(_DWORD *)(*((_QWORD *)this + 30) + 12);
    if (v2 != 256 && (v2 & 0x14001) == 0)
      return this;
  }
  else if (v1 != *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24))
  {
    return this;
  }
  v43 = (WebCore::Node *)this;
  WebCore::Element::getElementAttribute((WebCore::Element *)this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::invoketargetAttr, (uint64_t *)&v45);
  this = (unsigned int *)v45;
  if (!v45)
    return this;
  v8 = *((_QWORD *)v43 + 13);
  if (v8
    && ((v9 = *(_DWORD *)(v8 + 4), (v9 & 1) != 0)
      ? (v10 = *(_QWORD *)(v8 + 40), LODWORD(v11) = *(_DWORD *)(v8 + 52))
      : (v10 = v8 + 32, LODWORD(v11) = v9 >> 5),
        (_DWORD)v11))
  {
    v11 = v11;
    v12 = (WTF::StringImpl **)(v10 + 8);
    while (1)
    {
      v13 = (uint64_t)*(v12 - 1);
      if (v13 == WebCore::HTMLNames::invokeactionAttr
        || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::invokeactionAttr + 24)
        && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::invokeactionAttr + 32))
      {
        break;
      }
      v12 += 2;
      if (!--v11)
      {
        v12 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v12 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  }
  v14 = *v12;
  if (*v12)
    *(_DWORD *)v14 += 2;
  if (v8
    && ((v15 = *(_DWORD *)(v8 + 4), (v15 & 1) != 0)
      ? (v16 = *(_QWORD *)(v8 + 40), LODWORD(v17) = *(_DWORD *)(v8 + 52))
      : (v16 = v8 + 32, LODWORD(v17) = v15 >> 5),
        (_DWORD)v17))
  {
    v17 = v17;
    v18 = (uint64_t *)(v16 + 8);
    while (1)
    {
      v19 = *(v18 - 1);
      if (v19 == WebCore::HTMLNames::invokeactionAttr
        || *(_QWORD *)(v19 + 24) == *(_QWORD *)(WebCore::HTMLNames::invokeactionAttr + 24)
        && *(_QWORD *)(v19 + 32) == *(_QWORD *)(WebCore::HTMLNames::invokeactionAttr + 32))
      {
        break;
      }
      v18 += 2;
      if (!--v17)
      {
        v18 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v18 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v20 = *v18;
  if (!*v18)
  {
    v23 = 1;
    v44 = 1;
    goto LABEL_161;
  }
  v21 = *(_DWORD *)v20;
  v22 = *(_DWORD *)(v20 + 4);
  *(_DWORD *)v20 += 2;
  if (v22)
  {
    switch(v22)
    {
      case 5:
        v31 = *(_QWORD *)(v20 + 8);
        if ((*(_BYTE *)(v20 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v31 & 0xDF) != 0x43
            || (*(_BYTE *)(v31 + 1) & 0xDF) != 0x4C
            || (*(_BYTE *)(v31 + 2) & 0xDF) != 0x4F
            || (*(_BYTE *)(v31 + 3) & 0xDF) != 0x53)
          {
            goto LABEL_155;
          }
          v32 = *(unsigned __int8 *)(v31 + 4);
        }
        else
        {
          if ((*(_WORD *)v31 & 0xFFDF) != 0x43
            || (*(_WORD *)(v31 + 2) & 0xFFDF) != 0x4C
            || (*(_WORD *)(v31 + 4) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v31 + 6) & 0xFFDF) != 0x53)
          {
            goto LABEL_155;
          }
          v32 = *(unsigned __int16 *)(v31 + 8);
        }
        if ((v32 & 0xFFFFFFDF) != 0x45)
          goto LABEL_155;
        v23 = 7;
        goto LABEL_156;
      case 9:
        v29 = *(_QWORD *)(v20 + 8);
        if ((*(_BYTE *)(v20 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v29 & 0xDF) != 0x53
            || (*(_BYTE *)(v29 + 1) & 0xDF) != 0x48
            || (*(_BYTE *)(v29 + 2) & 0xDF) != 0x4F
            || (*(_BYTE *)(v29 + 3) & 0xDF) != 0x57
            || (*(_BYTE *)(v29 + 4) & 0xDF) != 0x4D
            || (*(_BYTE *)(v29 + 5) & 0xDF) != 0x4F
            || (*(_BYTE *)(v29 + 6) & 0xDF) != 0x44
            || (*(_BYTE *)(v29 + 7) & 0xDF) != 0x41)
          {
            goto LABEL_155;
          }
          v30 = *(unsigned __int8 *)(v29 + 8);
        }
        else
        {
          if ((*(_WORD *)v29 & 0xFFDF) != 0x53
            || (*(_WORD *)(v29 + 2) & 0xFFDF) != 0x48
            || (*(_WORD *)(v29 + 4) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v29 + 6) & 0xFFDF) != 0x57
            || (*(_WORD *)(v29 + 8) & 0xFFDF) != 0x4D
            || (*(_WORD *)(v29 + 10) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v29 + 12) & 0xFFDF) != 0x44
            || (*(_WORD *)(v29 + 14) & 0xFFDF) != 0x41)
          {
            goto LABEL_155;
          }
          v30 = *(unsigned __int16 *)(v29 + 16);
        }
        if ((v30 & 0xFFFFFFDF) != 0x4C)
          goto LABEL_155;
        v23 = 6;
        goto LABEL_156;
      case 11:
        v26 = *(_QWORD *)(v20 + 8);
        if ((*(_BYTE *)(v20 + 16) & 4) != 0)
        {
          v27 = *(_BYTE *)v26 & 0xDF;
          if (v27 == 83)
          {
            if ((*(_BYTE *)(v26 + 1) & 0xDF) != 0x48
              || (*(_BYTE *)(v26 + 2) & 0xDF) != 0x4F
              || (*(_BYTE *)(v26 + 3) & 0xDF) != 0x57
              || (*(_BYTE *)(v26 + 4) & 0xDF) != 0x50
              || (*(_BYTE *)(v26 + 5) & 0xDF) != 0x4F
              || (*(_BYTE *)(v26 + 6) & 0xDF) != 0x50
              || (*(_BYTE *)(v26 + 7) & 0xDF) != 0x4F
              || (*(_BYTE *)(v26 + 8) & 0xDF) != 0x56
              || (*(_BYTE *)(v26 + 9) & 0xDF) != 0x45)
            {
              goto LABEL_155;
            }
            v28 = *(unsigned __int8 *)(v26 + 10);
LABEL_70:
            if ((v28 & 0xFFFFFFDF) != 0x52)
              goto LABEL_155;
            v23 = 5;
            goto LABEL_156;
          }
          if (v27 != 72
            || (*(_BYTE *)(v26 + 1) & 0xDF) != 0x49
            || (*(_BYTE *)(v26 + 2) & 0xDF) != 0x44
            || (*(_BYTE *)(v26 + 3) & 0xDF) != 0x45
            || (*(_BYTE *)(v26 + 4) & 0xDF) != 0x50
            || (*(_BYTE *)(v26 + 5) & 0xDF) != 0x4F
            || (*(_BYTE *)(v26 + 6) & 0xDF) != 0x50
            || (*(_BYTE *)(v26 + 7) & 0xDF) != 0x4F
            || (*(_BYTE *)(v26 + 8) & 0xDF) != 0x56
            || (*(_BYTE *)(v26 + 9) & 0xDF) != 0x45)
          {
            goto LABEL_155;
          }
          v33 = *(unsigned __int8 *)(v26 + 10);
        }
        else
        {
          v34 = *(_WORD *)v26 & 0xFFDF;
          if (v34 == 83)
          {
            if ((*(_WORD *)(v26 + 2) & 0xFFDF) != 0x48
              || (*(_WORD *)(v26 + 4) & 0xFFDF) != 0x4F
              || (*(_WORD *)(v26 + 6) & 0xFFDF) != 0x57
              || (*(_WORD *)(v26 + 8) & 0xFFDF) != 0x50
              || (*(_WORD *)(v26 + 10) & 0xFFDF) != 0x4F
              || (*(_WORD *)(v26 + 12) & 0xFFDF) != 0x50
              || (*(_WORD *)(v26 + 14) & 0xFFDF) != 0x4F
              || (*(_WORD *)(v26 + 16) & 0xFFDF) != 0x56
              || (*(_WORD *)(v26 + 18) & 0xFFDF) != 0x45)
            {
              goto LABEL_155;
            }
            v28 = *(unsigned __int16 *)(v26 + 20);
            goto LABEL_70;
          }
          if (v34 != 72
            || (*(_WORD *)(v26 + 2) & 0xFFDF) != 0x49
            || (*(_WORD *)(v26 + 4) & 0xFFDF) != 0x44
            || (*(_WORD *)(v26 + 6) & 0xFFDF) != 0x45
            || (*(_WORD *)(v26 + 8) & 0xFFDF) != 0x50
            || (*(_WORD *)(v26 + 10) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v26 + 12) & 0xFFDF) != 0x50
            || (*(_WORD *)(v26 + 14) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v26 + 16) & 0xFFDF) != 0x56
            || (*(_WORD *)(v26 + 18) & 0xFFDF) != 0x45)
          {
            goto LABEL_155;
          }
          v33 = *(unsigned __int16 *)(v26 + 20);
        }
        if ((v33 & 0xFFFFFFDF) != 0x52)
          goto LABEL_155;
        v23 = 4;
        goto LABEL_156;
      case 13:
        v24 = *(_QWORD *)(v20 + 8);
        if ((*(_BYTE *)(v20 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v24 & 0xDF) != 0x54
            || (*(_BYTE *)(v24 + 1) & 0xDF) != 0x4F
            || (*(_BYTE *)(v24 + 2) & 0xDF) != 0x47
            || (*(_BYTE *)(v24 + 3) & 0xDF) != 0x47
            || (*(_BYTE *)(v24 + 4) & 0xDF) != 0x4C
            || (*(_BYTE *)(v24 + 5) & 0xDF) != 0x45
            || (*(_BYTE *)(v24 + 6) & 0xDF) != 0x50
            || (*(_BYTE *)(v24 + 7) & 0xDF) != 0x4F
            || (*(_BYTE *)(v24 + 8) & 0xDF) != 0x50
            || (*(_BYTE *)(v24 + 9) & 0xDF) != 0x4F
            || (*(_BYTE *)(v24 + 10) & 0xDF) != 0x56
            || (*(_BYTE *)(v24 + 11) & 0xDF) != 0x45)
          {
            goto LABEL_155;
          }
          v25 = *(unsigned __int8 *)(v24 + 12);
        }
        else
        {
          if ((*(_WORD *)v24 & 0xFFDF) != 0x54
            || (*(_WORD *)(v24 + 2) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v24 + 4) & 0xFFDF) != 0x47
            || (*(_WORD *)(v24 + 6) & 0xFFDF) != 0x47
            || (*(_WORD *)(v24 + 8) & 0xFFDF) != 0x4C
            || (*(_WORD *)(v24 + 10) & 0xFFDF) != 0x45
            || (*(_WORD *)(v24 + 12) & 0xFFDF) != 0x50
            || (*(_WORD *)(v24 + 14) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v24 + 16) & 0xFFDF) != 0x50
            || (*(_WORD *)(v24 + 18) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v24 + 20) & 0xFFDF) != 0x56
            || (*(_WORD *)(v24 + 22) & 0xFFDF) != 0x45)
          {
            goto LABEL_155;
          }
          v25 = *(unsigned __int16 *)(v24 + 24);
        }
        if ((v25 & 0xFFFFFFDF) != 0x52)
          goto LABEL_155;
        v23 = 3;
        goto LABEL_156;
      default:
LABEL_155:
        this = (unsigned int *)WTF::StringImpl::find(v20, 0x2Du, 0, v5, v6, v7);
        v23 = 2 * (this != (unsigned int *)-1);
        v21 = *(_DWORD *)v20 - 2;
        goto LABEL_156;
    }
  }
  v23 = 1;
LABEL_156:
  if (v21)
    *(_DWORD *)v20 = v21;
  else
    this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)v20, v4);
  v44 = v23;
  if (!(_DWORD)v23)
    goto LABEL_188;
  if ((_DWORD)v23 == 2)
    goto LABEL_162;
  this = (unsigned int *)v45;
LABEL_161:
  this = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)this + 984))(this, v23);
  if ((_DWORD)this)
  {
LABEL_162:
    if (v43)
      *((_DWORD *)v43 + 6) += 2;
    v35 = v14;
    if (v14 || (v35 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8]) != 0)
      *(_DWORD *)v35 += 2;
    v36 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v36 || (v37 = *(_QWORD *)(v36 + 96)) == 0)
      v37 = WebCore::threadGlobalDataSlow((WebCore *)this);
    v38 = *(_QWORD *)(v37 + 40);
    if (!v38)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v37);
      v38 = *(_QWORD *)(v37 + 40);
    }
    v39 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v39);
    *(_QWORD *)(v39 + 8) = 0;
    v41 = *(_DWORD *)(v39 + 20) & 0xFFC00000 | 0x24020C | (*(_QWORD *)(v38 + 1040) != 0);
    *(_DWORD *)(v39 + 16) = 1;
    *(_DWORD *)(v39 + 20) = v41;
    v42 = *(_DWORD **)(v38 + 1040);
    if (v42)
    {
      *v42 += 2;
      v41 = *(_DWORD *)(v39 + 20);
    }
    *(_QWORD *)(v39 + 24) = v42;
    *(_QWORD *)(v39 + 32) = 0;
    *(_QWORD *)(v39 + 40) = 0;
    *(_QWORD *)(v39 + 48) = 0;
    *(_QWORD *)(v39 + 56) = v40;
    *(_QWORD *)(v39 + 64) = 0;
    *(_DWORD *)(v39 + 20) = v41 | 0x4000;
    *(_QWORD *)v39 = off_1E33A5320;
    if (v43)
      *((_DWORD *)v43 + 6) += 2;
    *(_QWORD *)(v39 + 72) = v43;
    if (v35)
      *(_DWORD *)v35 += 2;
    *(_QWORD *)(v39 + 80) = v35;
    (*(void (**)(WebCore::Node *, uint64_t))(*(_QWORD *)v45 + 48))(v45, v39);
    if ((*(_BYTE *)(v39 + 20) & 0x40) == 0 && (_DWORD)v23 != 2)
      (*(void (**)(WebCore::Node *, WebCore::Node *, char *))(*(_QWORD *)v45 + 992))(v45, v43, &v44);
    if (*(_DWORD *)(v39 + 16) == 1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      if (!v35)
        goto LABEL_185;
    }
    else
    {
      --*(_DWORD *)(v39 + 16);
      if (!v35)
        goto LABEL_185;
    }
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v4);
    else
      *(_DWORD *)v35 -= 2;
LABEL_185:
    if (v43)
    {
      if (*((_DWORD *)v43 + 6) == 2)
      {
        if ((*((_WORD *)v43 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v43, v4);
      }
      else
      {
        *((_DWORD *)v43 + 6) -= 2;
      }
    }
  }
LABEL_188:
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v4);
    else
      *(_DWORD *)v14 -= 2;
  }
  this = (unsigned int *)v45;
  v45 = 0;
  if (this)
  {
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)this, v4);
    }
    else
    {
      this[6] -= 2;
    }
  }
  return this;
}

void WebCore::HTMLElement::~HTMLElement(WebCore::HTMLElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::HTMLEmbedElement::~HTMLEmbedElement(WebCore::HTMLEmbedElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLPlugInImageElement::~HTMLPlugInImageElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::HTMLFrameOwnerElement::isHTMLFrameOwnerElement(WebCore::HTMLFrameOwnerElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLPlugInElement::canContainRangeEndPoint(WebCore::HTMLPlugInElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLPlugInElement::willRespondToMouseMoveEvents(WebCore::HTMLPlugInElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLEmbedElement::isInteractiveContent(WebCore::HTMLEmbedElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLFrameOwnerElement::scrollingMode(WebCore::HTMLFrameOwnerElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLFrameOwnerElement::referrerPolicy(WebCore::HTMLFrameOwnerElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLFrameOwnerElement::shouldLoadFrameLazily(WebCore::HTMLFrameOwnerElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLFrameOwnerElement::isLazyLoadObserverActive(WebCore::HTMLFrameOwnerElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLPlugInImageElement::isPlugInImageElement(WebCore::HTMLPlugInImageElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLPlugInElement::useFallbackContent(WebCore::HTMLPlugInElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLFormControlElement::isSuccessfulSubmitButton(WebCore::HTMLFormControlElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLFormControlElement::isActivatedSubmit(WebCore::HTMLFormControlElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLFormControlElement::isSubmitButton(WebCore::HTMLFormControlElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLFieldSetElement::isEnumeratable(WebCore::HTMLFieldSetElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLFieldSetElement::computeWillValidate(WebCore::HTMLFieldSetElement *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::HTMLFieldSetElement::isEnumeratable(WebCore::HTMLFieldSetElement *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLFieldSetElement::computeWillValidate(WebCore::HTMLFieldSetElement *this)
{
  return 0;
}

void WebCore::HTMLFontElement::~HTMLFontElement(WebCore::HTMLFontElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::ValidatedFormListedElement::isEnumeratable(WebCore::ValidatedFormListedElement *this)
{
  return 0;
}

void WebCore::HTMLDirectoryElement::~HTMLDirectoryElement(WebCore::HTMLDirectoryElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *,false>(uint64_t result, WTF::StringImpl *a2, uint64_t (**a3)(WTF::StringImpl **, WTF::StringImpl **), uint64_t a4, char a5)
{
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl **v21;
  WTF::StringImpl **v22;
  WTF::StringImpl **v23;
  uint64_t *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  BOOL v34;
  WTF::StringImpl *v35;
  WTF::StringImpl **v36;
  uint64_t *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl **v47;
  BOOL v49;
  uint64_t v50;
  WTF::StringImpl **v51;
  WTF::StringImpl **v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t j;
  WTF::StringImpl **v57;
  WTF::StringImpl *v58;
  uint64_t *v59;
  WTF::StringImpl *v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  WTF::StringImpl **v64;
  uint64_t v65;
  WTF::StringImpl **v66;
  WTF::StringImpl *v67;
  WTF::StringImpl **v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl **v77;
  WTF::StringImpl **v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  unint64_t v86;
  WTF::StringImpl **v87;
  WTF::StringImpl *v88;
  uint64_t *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  int v93;
  uint64_t v95;
  WTF::StringImpl **v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl **v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  WTF::StringImpl **i;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  int v105;
  WTF::StringImpl *v106;
  int64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl **v109;
  WTF::StringImpl *v110;

  v8 = (WTF::StringImpl **)a2;
  v9 = (WTF::StringImpl **)result;
LABEL_2:
  v109 = v8 - 1;
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)v8 - (char *)v10;
    v12 = v8 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(v109, v9);
        if ((_DWORD)result)
        {
          a3 = (uint64_t (**)(WTF::StringImpl **, WTF::StringImpl **))*v9;
          *v9 = 0;
          v46 = *v109;
          *v109 = 0;
          result = (uint64_t)*v9;
          *v9 = v46;
          if (!result)
            goto LABEL_109;
          if (*(_DWORD *)result != 2)
          {
            *(_DWORD *)result -= 2;
            goto LABEL_109;
          }
          goto LABEL_235;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(v9, v9 + 1, v109, a3);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(v9, v9 + 1, v9 + 2, v109, a3);
      case 5uLL:
        return (uint64_t)std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(v9, v9 + 1, v9 + 2, v9 + 3, v109, a3);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v9 == v8)
              return result;
            v61 = (v12 - 2) >> 1;
            v109 = (WTF::StringImpl **)v61;
            do
            {
              v62 = v61;
              if ((uint64_t)v109 >= v61)
              {
                v107 = v61;
                v63 = (2 * v61) | 1;
                v64 = &v9[v63];
                v65 = 2 * v61 + 2;
                if (v65 < (uint64_t)v12 && (*a3)(&v9[v63], v64 + 1))
                {
                  ++v64;
                  v63 = v65;
                }
                v62 = v107;
                v66 = &v9[v107];
                result = (*a3)(v64, v66);
                if ((result & 1) == 0)
                {
                  v67 = *v66;
                  *v66 = 0;
                  v110 = v67;
                  do
                  {
                    v68 = v64;
                    v69 = *v64;
                    *v64 = 0;
                    v70 = *v66;
                    *v66 = v69;
                    if (v70)
                    {
                      if (*(_DWORD *)v70 == 2)
                        WTF::StringImpl::destroy(v70, a2);
                      else
                        *(_DWORD *)v70 -= 2;
                    }
                    if ((uint64_t)v109 < v63)
                      break;
                    v71 = (2 * v63) | 1;
                    v64 = &v9[v71];
                    v72 = 2 * v63 + 2;
                    if (v72 < (uint64_t)v12 && (*a3)(&v9[v71], v64 + 1))
                    {
                      ++v64;
                      v71 = v72;
                    }
                    v66 = v68;
                    v63 = v71;
                  }
                  while (!(*a3)(v64, &v110));
                  v73 = v110;
                  v110 = 0;
                  v74 = *v68;
                  *v68 = v73;
                  if (v74)
                  {
                    if (*(_DWORD *)v74 == 2)
                      WTF::StringImpl::destroy(v74, a2);
                    else
                      *(_DWORD *)v74 -= 2;
                  }
                  result = (uint64_t)v110;
                  v110 = 0;
                  v62 = v107;
                  if (result)
                  {
                    if (*(_DWORD *)result == 2)
                      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                    else
                      *(_DWORD *)result -= 2;
                  }
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            v75 = (unint64_t)v11 >> 3;
            while (1)
            {
              if (v75 <= 0)
                goto LABEL_234;
              if (v75 == 1)
                return result;
              v109 = (WTF::StringImpl **)(v75 - 1);
              v76 = 0;
              v108 = *v9;
              *v9 = 0;
              v77 = v9;
              do
              {
                v78 = v77;
                v77 += v76 + 1;
                v79 = 2 * v76;
                v76 = (2 * v76) | 1;
                v80 = v79 + 2;
                if (v79 + 2 < v75 && (*a3)(v77, v77 + 1))
                {
                  ++v77;
                  v76 = v80;
                }
                v81 = *v77;
                *v77 = 0;
                v82 = *v78;
                *v78 = v81;
                if (v82)
                {
                  if (*(_DWORD *)v82 == 2)
                    WTF::StringImpl::destroy(v82, a2);
                  else
                    *(_DWORD *)v82 -= 2;
                }
              }
              while (v76 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
              if (v77 == --v8)
              {
                result = (uint64_t)*v77;
                *v77 = v108;
                if (!result)
                  goto LABEL_208;
                goto LABEL_206;
              }
              v83 = *v8;
              *v8 = 0;
              v84 = *v77;
              *v77 = v83;
              if (v84)
              {
                if (*(_DWORD *)v84 == 2)
                  WTF::StringImpl::destroy(v84, a2);
                else
                  *(_DWORD *)v84 -= 2;
              }
              result = (uint64_t)*v8;
              *v8 = v108;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                else
                  *(_DWORD *)result -= 2;
              }
              v85 = (char *)(v77 + 1) - (char *)v9;
              if (v85 >= 9)
              {
                v86 = (((unint64_t)v85 >> 3) - 2) >> 1;
                v87 = &v9[v86];
                result = (*a3)(v87, v77);
                if ((_DWORD)result)
                  break;
              }
LABEL_208:
              if ((unint64_t)v75-- <= 2)
                return result;
            }
            v88 = *v77;
            *v77 = 0;
            v110 = v88;
            while (1)
            {
              v89 = (uint64_t *)v87;
              v90 = *v87;
              *v87 = 0;
              v91 = *v77;
              *v77 = v90;
              if (!v91)
                goto LABEL_197;
              if (*(_DWORD *)v91 != 2)
                break;
              WTF::StringImpl::destroy(v91, a2);
              if (!v86)
              {
LABEL_201:
                v92 = v110;
                v110 = 0;
                result = *v89;
                *v89 = (uint64_t)v92;
                if (!result)
                  goto LABEL_208;
                v93 = *(_DWORD *)result - 2;
                if (*(_DWORD *)result == 2)
                {
                  WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                  result = (uint64_t)v110;
                  v110 = 0;
                  if (!result)
                    goto LABEL_208;
LABEL_206:
                  v93 = *(_DWORD *)result - 2;
                  if (*(_DWORD *)result == 2)
                  {
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                    goto LABEL_208;
                  }
                }
                *(_DWORD *)result = v93;
                goto LABEL_208;
              }
LABEL_198:
              v86 = (v86 - 1) >> 1;
              v87 = &v9[v86];
              v77 = (WTF::StringImpl **)v89;
              if (((*a3)(v87, &v110) & 1) == 0)
                goto LABEL_201;
            }
            *(_DWORD *)v91 -= 2;
LABEL_197:
            if (!v86)
              goto LABEL_201;
            goto LABEL_198;
          }
          v13 = v12 >> 1;
          v14 = &v9[v12 >> 1];
          if ((unint64_t)v11 < 0x401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(&v9[v12 >> 1], v9, v109, a3);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(v9, &v9[v12 >> 1], v109, a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(v9 + 1, v14 - 1, v8 - 2, a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(v9 + 2, &v9[v13 + 1], v8 - 3, a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(v14 - 1, &v9[v12 >> 1], &v9[v13 + 1], a3);
            v15 = *v9;
            *v9 = 0;
            v16 = *v14;
            *v14 = 0;
            v17 = *v9;
            *v9 = v16;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, a2);
              else
                *(_DWORD *)v17 -= 2;
            }
            v18 = *v14;
            *v14 = v15;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, a2);
              else
                *(_DWORD *)v18 -= 2;
            }
          }
          --a4;
          if ((a5 & 1) == 0 && ((*a3)(v9 - 1, v9) & 1) == 0)
          {
            v35 = *v9;
            *v9 = 0;
            v110 = v35;
            result = (*a3)(&v110, v109);
            if ((result & 1) != 0)
            {
              v10 = v9;
              while (1)
              {
                if (++v10 == v8)
                  goto LABEL_234;
                result = (*a3)(&v110, v10);
                if ((result & 1) != 0)
                  goto LABEL_70;
              }
            }
            v36 = v9 + 1;
            do
            {
              v10 = v36;
              if (v36 >= v8)
                break;
              result = (*a3)(&v110, v36);
              v36 = v10 + 1;
            }
            while (!(_DWORD)result);
LABEL_70:
            v37 = (uint64_t *)v8;
            if (v10 < v8)
            {
              v37 = (uint64_t *)v8;
              while (v37 != (uint64_t *)v9)
              {
                result = (*a3)(&v110, (WTF::StringImpl **)--v37);
                if ((result & 1) == 0)
                  goto LABEL_74;
              }
              goto LABEL_234;
            }
LABEL_74:
            if (v10 < (WTF::StringImpl **)v37)
            {
              v38 = *v10;
              *v10 = 0;
              v39 = *v37;
              *v37 = 0;
              v40 = *v10;
              *v10 = (WTF::StringImpl *)v39;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, a2);
                else
                  *(_DWORD *)v40 -= 2;
              }
              result = *v37;
              *v37 = (uint64_t)v38;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                else
                  *(_DWORD *)result -= 2;
              }
              while (1)
              {
                if (++v10 == v8)
                  goto LABEL_234;
                result = (*a3)(&v110, v10);
                if ((_DWORD)result)
                {
                  while (v37 != (uint64_t *)v9)
                  {
                    result = (*a3)(&v110, (WTF::StringImpl **)--v37);
                    if ((result & 1) == 0)
                      goto LABEL_74;
                  }
                  goto LABEL_234;
                }
              }
            }
            v41 = v10 - 1;
            if (v10 - 1 != v9)
            {
              v42 = *v41;
              *v41 = 0;
              v43 = *v9;
              *v9 = v42;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, a2);
                else
                  *(_DWORD *)v43 -= 2;
              }
            }
            v44 = v110;
            v110 = 0;
            v45 = *v41;
            *v41 = v44;
            if (v45)
            {
              if (*(_DWORD *)v45 == 2)
                WTF::StringImpl::destroy(v45, a2);
              else
                *(_DWORD *)v45 -= 2;
            }
            result = (uint64_t)v110;
            v110 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
              else
                *(_DWORD *)result -= 2;
            }
            a5 = 0;
            continue;
          }
          v19 = 0;
          v20 = *v9;
          *v9 = 0;
          v110 = v20;
          do
          {
            result = (uint64_t)&v9[v19 + 1];
            if ((WTF::StringImpl **)result == v8)
              goto LABEL_234;
            result = (*a3)((WTF::StringImpl **)result, &v110);
            ++v19;
          }
          while ((result & 1) != 0);
          v21 = &v9[v19];
          v22 = v8;
          if (v19 != 1)
          {
            while (v22 != v9)
            {
              result = (*a3)(--v22, &v110);
              if ((_DWORD)result)
                goto LABEL_26;
            }
LABEL_234:
            __break(1u);
LABEL_235:
            WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
LABEL_109:
            result = (uint64_t)*v109;
            *v109 = (WTF::StringImpl *)a3;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                return WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
              else
                *(_DWORD *)result -= 2;
            }
            return result;
          }
          v22 = v8;
          do
          {
            if (v21 >= v22)
              break;
            --v22;
          }
          while (((*a3)(v22, &v110) & 1) == 0);
LABEL_26:
          if (v21 >= v22)
          {
            v28 = v21 - 1;
          }
          else
          {
            v23 = &v9[v19];
            v24 = (uint64_t *)v22;
            do
            {
              v25 = *v23;
              *v23 = 0;
              v26 = *v24;
              *v24 = 0;
              v27 = *v23;
              *v23 = (WTF::StringImpl *)v26;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2)
                  WTF::StringImpl::destroy(v27, a2);
                else
                  *(_DWORD *)v27 -= 2;
              }
              result = *v24;
              *v24 = (uint64_t)v25;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                else
                  *(_DWORD *)result -= 2;
              }
              do
              {
                if (++v23 == v8)
                  goto LABEL_234;
                result = (*a3)(v23, &v110);
              }
              while ((result & 1) != 0);
              do
              {
                if (v24 == (uint64_t *)v9)
                  goto LABEL_234;
                result = (*a3)((WTF::StringImpl **)--v24, &v110);
              }
              while (!(_DWORD)result);
            }
            while (v23 < (WTF::StringImpl **)v24);
            v28 = v23 - 1;
          }
          if (v28 != v9)
          {
            v29 = *v28;
            *v28 = 0;
            v30 = *v9;
            *v9 = v29;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, a2);
              else
                *(_DWORD *)v30 -= 2;
            }
          }
          v31 = v110;
          v110 = 0;
          v32 = *v28;
          *v28 = v31;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, a2);
            else
              *(_DWORD *)v32 -= 2;
          }
          v33 = v110;
          v110 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, a2);
            else
              *(_DWORD *)v33 -= 2;
          }
          if (v21 < v22)
          {
LABEL_56:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *,false>(v9, v28, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v28 + 1;
            continue;
          }
          v34 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(v9, v28, a3);
          v10 = v28 + 1;
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(v28 + 1, v8, a3);
          if (!(_DWORD)result)
          {
            if (v34)
              continue;
            goto LABEL_56;
          }
          v8 = v28;
          if (v34)
            return result;
          goto LABEL_2;
        }
        v47 = v9 + 1;
        v49 = v9 == v8 || v47 == v8;
        if ((a5 & 1) == 0)
        {
          if (v49)
            return result;
          v95 = 0;
          v96 = v9 - 1;
          v97 = -1;
          v98 = 1;
LABEL_216:
          v99 = &v9[v95];
          v95 = v98;
          result = (*a3)(v47, v99);
          if (!(_DWORD)result)
            goto LABEL_229;
          result = 0;
          v100 = *v47;
          *v47 = 0;
          v110 = v100;
          v101 = v97;
          for (i = v96; ; --i)
          {
            v103 = i[1];
            i[1] = 0;
            i[2] = v103;
            if (!result)
              goto LABEL_221;
            if (*(_DWORD *)result != 2)
              break;
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
            if (!v101)
              goto LABEL_234;
LABEL_222:
            if (((*a3)(&v110, i) & 1) == 0)
            {
              v104 = v110;
              v110 = 0;
              result = (uint64_t)i[1];
              i[1] = v104;
              if (result)
              {
                v105 = *(_DWORD *)result - 2;
                if (*(_DWORD *)result != 2)
                  goto LABEL_228;
                WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                result = (uint64_t)v110;
                v110 = 0;
                if (result)
                {
                  v105 = *(_DWORD *)result - 2;
                  if (*(_DWORD *)result == 2)
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v106);
                  else
LABEL_228:
                    *(_DWORD *)result = v105;
                }
              }
LABEL_229:
              v98 = v95 + 1;
              v47 = &v9[v95 + 1];
              ++v96;
              --v97;
              if (v47 == v8)
                return result;
              goto LABEL_216;
            }
            result = (uint64_t)i[1];
            ++v101;
          }
          *(_DWORD *)result -= 2;
LABEL_221:
          if (!v101)
            goto LABEL_234;
          goto LABEL_222;
        }
        if (v49)
          return result;
        v50 = 0;
        v51 = v9;
        do
        {
          v52 = v51;
          v51 = v47;
          result = (*a3)(v47, v52);
          if (!(_DWORD)result)
            goto LABEL_140;
          v54 = 0;
          v55 = *v47;
          *v47 = 0;
          v110 = v55;
          for (j = v50; ; j -= 8)
          {
            v57 = (WTF::StringImpl **)((char *)v9 + j);
            v58 = *(WTF::StringImpl **)((char *)v9 + j);
            *v57 = 0;
            v57[1] = v58;
            if (!v54)
              goto LABEL_129;
            if (*(_DWORD *)v54 == 2)
              break;
            *(_DWORD *)v54 -= 2;
LABEL_129:
            if (!j)
              goto LABEL_133;
LABEL_130:
            v59 = (uint64_t *)((char *)v9 + j);
            if (((*a3)(&v110, (WTF::StringImpl **)((char *)v9 + j - 8)) & 1) == 0)
              goto LABEL_134;
            v54 = *v57;
          }
          WTF::StringImpl::destroy(v54, v53);
          if (j)
            goto LABEL_130;
LABEL_133:
          v59 = (uint64_t *)v9;
LABEL_134:
          v60 = v110;
          v110 = 0;
          result = *v59;
          *v59 = (uint64_t)v60;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)result, v53);
            else
              *(_DWORD *)result -= 2;
            result = (uint64_t)v110;
            v110 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v53);
              else
                *(_DWORD *)result -= 2;
            }
          }
LABEL_140:
          v47 = v51 + 1;
          v50 += 8;
        }
        while (v51 + 1 != v8);
        return result;
    }
  }
}

WTF::StringImpl *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(WTF::StringImpl **a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t (**a4)(WTF::StringImpl **, WTF::StringImpl **))
{
  char v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v8 = (*a4)(a2, a1);
  result = (WTF::StringImpl *)(*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    v11 = *a1;
    *a1 = 0;
    if ((_DWORD)result)
    {
      v12 = *a3;
      *a3 = 0;
      v13 = *a1;
      *a1 = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v10);
        else
          *(_DWORD *)v13 -= 2;
      }
      result = *a3;
      *a3 = v11;
      if (!result)
        return result;
LABEL_32:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      *(_DWORD *)result -= 2;
      return result;
    }
    v21 = *a2;
    *a2 = 0;
    v22 = *a1;
    *a1 = v21;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v10);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = *a2;
    *a2 = v11;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v10);
      else
        *(_DWORD *)v23 -= 2;
    }
    result = (WTF::StringImpl *)(*a4)(a3, a2);
    if ((_DWORD)result)
    {
      v24 = *a2;
      *a2 = 0;
      v25 = *a3;
      *a3 = 0;
      v26 = *a2;
      *a2 = v25;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v10);
        else
          *(_DWORD *)v26 -= 2;
      }
      result = *a3;
      *a3 = v24;
      if (result)
        goto LABEL_32;
    }
  }
  else if ((_DWORD)result)
  {
    v14 = *a2;
    *a2 = 0;
    v15 = *a3;
    *a3 = 0;
    v16 = *a2;
    *a2 = v15;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v10);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = *a3;
    *a3 = v14;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v10);
      else
        *(_DWORD *)v17 -= 2;
    }
    result = (WTF::StringImpl *)(*a4)(a2, a1);
    if ((_DWORD)result)
    {
      v18 = *a1;
      *a1 = 0;
      v19 = *a2;
      *a2 = 0;
      v20 = *a1;
      *a1 = v19;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v10);
        else
          *(_DWORD *)v20 -= 2;
      }
      result = *a2;
      *a2 = v18;
      if (result)
        goto LABEL_32;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(WTF::StringImpl **a1, WTF::StringImpl **a2, uint64_t (**a3)(WTF::StringImpl **, WTF::StringImpl **))
{
  uint64_t v6;
  _BOOL8 result;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t i;
  char *v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        v10 = *a1;
        *a1 = 0;
        v11 = *v8;
        *v8 = 0;
        v12 = *a1;
        *a1 = v11;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v9);
          else
            *(_DWORD *)v12 -= 2;
        }
        v13 = *v8;
        *v8 = v10;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v9);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v14 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(a1, a1 + 1, a1 + 2, a3);
      v15 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v15, v14))
    {
      v19 = 0;
      v20 = *v15;
      *v15 = 0;
      v28 = v20;
      for (i = v16; ; i -= 8)
      {
        v22 = (char *)a1 + i;
        v23 = *(uint64_t *)((char *)a1 + i + 16);
        *((_QWORD *)v22 + 2) = 0;
        *((_QWORD *)v22 + 3) = v23;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v18);
          else
            *(_DWORD *)v19 -= 2;
        }
        if (i == -16)
        {
          v24 = a1;
          goto LABEL_22;
        }
        if (((*a3)(&v28, (WTF::StringImpl **)((char *)a1 + i + 8)) & 1) == 0)
          break;
        v19 = (WTF::StringImpl *)*((_QWORD *)v22 + 2);
      }
      v24 = (WTF::StringImpl **)((char *)a1 + i + 16);
LABEL_22:
      v25 = v28;
      v28 = 0;
      v26 = *v24;
      *v24 = v25;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v18);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = v28;
      v28 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v18);
        else
          *(_DWORD *)v27 -= 2;
      }
      if (++v17 == 8)
        return v15 + 1 == a2;
    }
    v14 = v15;
    v16 += 8;
    if (++v15 == a2)
      return 1;
  }
}

WTF::StringImpl *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(WTF::StringImpl **a1, WTF::StringImpl **a2, WTF::StringImpl **a3, WTF::StringImpl **a4, uint64_t (**a5)(WTF::StringImpl **, WTF::StringImpl **))
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(a1, a2, a3, a5);
  result = (WTF::StringImpl *)(*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v12 = *a3;
    *a3 = 0;
    v13 = *a4;
    *a4 = 0;
    v14 = *a3;
    *a3 = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = *a4;
    *a4 = v12;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    result = (WTF::StringImpl *)(*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v17 = *a2;
      *a2 = 0;
      v18 = *a3;
      *a3 = 0;
      v19 = *a2;
      *a2 = v18;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v16);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = *a3;
      *a3 = v17;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v16);
        else
          *(_DWORD *)v20 -= 2;
      }
      result = (WTF::StringImpl *)(*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v22 = *a1;
        *a1 = 0;
        v23 = *a2;
        *a2 = 0;
        v24 = *a1;
        *a1 = v23;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v21);
          else
            *(_DWORD *)v24 -= 2;
        }
        result = *a2;
        *a2 = v22;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(WTF::StringImpl **a1, WTF::StringImpl **a2, WTF::StringImpl **a3, WTF::StringImpl **a4, WTF::StringImpl **a5, uint64_t (**a6)(WTF::StringImpl **, WTF::StringImpl **))
{
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::AtomString *>(a1, a2, a3, a4, a6);
  result = (WTF::StringImpl *)(*a6)(a5, a4);
  if ((_DWORD)result)
  {
    v14 = *a4;
    *a4 = 0;
    v15 = *a5;
    *a5 = 0;
    v16 = *a4;
    *a4 = v15;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v13);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = *a5;
    *a5 = v14;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v13);
      else
        *(_DWORD *)v17 -= 2;
    }
    result = (WTF::StringImpl *)(*a6)(a4, a3);
    if ((_DWORD)result)
    {
      v19 = *a3;
      *a3 = 0;
      v20 = *a4;
      *a4 = 0;
      v21 = *a3;
      *a3 = v20;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v18);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = *a4;
      *a4 = v19;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v18);
        else
          *(_DWORD *)v22 -= 2;
      }
      result = (WTF::StringImpl *)(*a6)(a3, a2);
      if ((_DWORD)result)
      {
        v24 = *a2;
        *a2 = 0;
        v25 = *a3;
        *a3 = 0;
        v26 = *a2;
        *a2 = v25;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v23);
          else
            *(_DWORD *)v26 -= 2;
        }
        v27 = *a3;
        *a3 = v24;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v23);
          else
            *(_DWORD *)v27 -= 2;
        }
        result = (WTF::StringImpl *)(*a6)(a2, a1);
        if ((_DWORD)result)
        {
          v29 = *a1;
          *a1 = 0;
          v30 = *a2;
          *a2 = 0;
          v31 = *a1;
          *a1 = v30;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v28);
            else
              *(_DWORD *)v31 -= 2;
          }
          result = *a2;
          *a2 = v29;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::$_0::operator() const(void)::{lambda(WTF::AtomString const&,WTF::AtomString const&)#1},void,WTF::AtomString const&,WTF::AtomString const&>::call(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  _BYTE v3[24];

  if (*(_QWORD *)a2 != *(_QWORD *)(WebCore::HTMLNames::oncuechangeAttr + 24))
    return WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add<WTF::AtomString const&>(*((uint64_t **)result + 1), a2, a3, (uint64_t)v3);
  return result;
}

uint64_t std::__variant_detail::__impl<BOOL,WebCore::Exception>::__swap[abi:sn180100](uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _BOOL4 v5;
  uint64_t v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE v16[16];
  unsigned int v17;
  char v18;

  v2 = *(_DWORD *)(result + 16);
  v3 = *(unsigned int *)(a2 + 16);
  if (v2 != -1 || (_DWORD)v3 != -1)
  {
    v5 = v2 == -1;
    if (v2 == -1)
      v6 = -1;
    else
      v6 = *(unsigned int *)(result + 16);
    if ((_DWORD)v3 != -1)
      v5 = v6 == v3;
    if (v5)
    {
      return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E33BC590[v6])(v16, result, a2);
    }
    else
    {
      v8 = (v2 - 1) < 0xFFFFFFFE || (v3 + 1) < 2;
      if (v8)
        v9 = result;
      else
        v9 = a2;
      if (v8)
        v10 = a2;
      else
        v10 = result;
      v16[0] = 0;
      v17 = -1;
      v11 = *(unsigned int *)(v10 + 16);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(char *, _BYTE *, uint64_t))off_1E33BC580[v11])(&v18, v16, v10);
        v17 = v11;
        v12 = *(unsigned int *)(v10 + 16);
        if ((_DWORD)v12 != -1)
          result = off_1E33BC570[v12](&v18, v10);
      }
      *(_DWORD *)(v10 + 16) = -1;
      v13 = *(unsigned int *)(v9 + 16);
      if ((_DWORD)v13 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E33BC5A0[v13])(&v18, v10, v9);
        *(_DWORD *)(v10 + 16) = v13;
        v14 = *(unsigned int *)(v9 + 16);
        if ((_DWORD)v14 != -1)
          result = off_1E33BC570[v14](&v18, v9);
      }
      *(_DWORD *)(v9 + 16) = -1;
      v15 = v17;
      if (v17 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, _BYTE *))off_1E33BC5A0[v17])(&v18, v9, v16);
        *(_DWORD *)(v9 + 16) = v15;
        if (v17 != -1)
          return off_1E33BC570[v17](&v18, (uint64_t)v16);
      }
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJbN7WebCore9ExceptionEEE6__swapB8sn180100ERS9_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJbS8_EEESK_EEEDcSB_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJbN7WebCore9ExceptionEEE6__swapB8sn180100ERS9_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJbS8_EEESK_EEEDcSB_DpT0_(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;

  v4 = *(_BYTE *)a2;
  v5 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_BYTE *)a2 = *(_BYTE *)a3;
  v6 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_BYTE *)a3 = v4;
  result = *(WTF::StringImpl **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore9ExceptionEEEEE19__generic_constructB8sn180100INS0_6__implIJbS9_EEEEEvRSB_OT_EUlRSG_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJbS9_EEEOSP_EEEDcSG_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore9ExceptionEEEEE19__generic_constructB8sn180100INS0_6__implIJbS9_EEEEEvRSB_OT_EUlRSG_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJbS9_EEEOSP_EEEDcSG_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

char *WTF::Vector<char,130ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[v3 - (_QWORD)v5];
      }
      if (v10 < 0x83)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 130;
        goto LABEL_31;
      }
      if (!HIDWORD(v10))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)v10);
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v20);
          v19 = *a1;
        }
        return &v19[v3 - (_QWORD)v5];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x195BDBB70);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 0x83)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 130;
    }
    else
    {
      if (HIDWORD(v15))
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)v15);
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLElement::queuePopoverToggleEventTask(WebCore::PopoverVisibilityState,WebCore::PopoverVisibilityState)::$_0,void>::call(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v1 = *(_QWORD **)(result + 8);
  if ((v1[9] & 0xFFFFFFFFFFFFLL) == 0)
    return result;
  v2 = *(_QWORD *)((v1[9] & 0xFFFFFFFFFFFFLL) + 0xE8);
  if (!v2
    || (*(unsigned __int16 *)(v2 + 2) | (*(unsigned __int8 *)(v2 + 4) << 16)) < 0x10000u
    || ((*(_WORD *)(v2 + 2) & 0xFF00) != 0) != (*(_BYTE *)(result + 16) != 0))
  {
    return result;
  }
  *(_BYTE *)(v2 + 4) = 0;
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
    v4 = WebCore::threadGlobalDataSlow((WebCore *)result);
  v5 = *(_QWORD *)(v4 + 40);
  if (!v5)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
    v5 = *(_QWORD *)(v4 + 40);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 16) = 1;
  *(_DWORD *)(v6 + 20) = *(_DWORD *)(v6 + 20) & 0xFFC00000 | 0x2F0200 | (*(_QWORD *)(v5 + 2056) != 0);
  v8 = *(_DWORD **)(v5 + 2056);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(v6 + 24) = v8;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = v7;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)v6 = off_1E33A8648;
  if (v10)
    *(_DWORD *)v10 += 2;
  *(_QWORD *)(v6 + 72) = v10;
  if (v10)
    *(_DWORD *)v10 += 2;
  *(_QWORD *)(v6 + 80) = v10;
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v1 + 48))(v1, v6);
  if (*(_DWORD *)(v6 + 16) == 1)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (!v10)
      goto LABEL_21;
  }
  else
  {
    --*(_DWORD *)(v6 + 16);
    if (!v10)
      goto LABEL_21;
  }
  if (*(_DWORD *)v10 == 2)
    result = WTF::StringImpl::destroy(v10, v9);
  else
    *(_DWORD *)v10 -= 2;
LABEL_21:
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  return result;
}

uint64_t _ZN3WTF7HashSetINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetINS2_11HTMLElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(uint64_t *a1, void *a2)
{
  uint64_t v2;
  int v4;
  int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  int v15;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 4);
    if (v4)
    {
      v6 = 0;
      v7 = v4 - 1;
      do
      {
        v8 = (uint64_t *)(v2 + 8 * v7);
        if ((unint64_t)(*v8 + 1) >= 2 && !*(_QWORD *)(*v8 + 8))
        {
          WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket(v8, a2);
          ++v6;
        }
      }
      while ((unint64_t)v7--);
      v10 = *a1;
      v2 = v6 != 0;
      if (v6)
      {
        *(_DWORD *)(v10 - 16) += v6;
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 12);
        else
          v15 = 0;
        *(_DWORD *)(v14 - 12) = v15 - v6;
        v10 = *a1;
      }
      if (v10)
      {
        v11 = *(_DWORD *)(v10 - 4);
        v12 = 6 * *(_DWORD *)(v10 - 12);
        if (v11 >= 9 && v12 < v11)
          WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize(a1);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLFormControlElement::didRecalcStyle(WebCore::Style::Change)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  __int16 v5;
  __int16 v6;

  v3 = a1[1];
  *a1 = &off_1E33BC658;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      v5 = *(_WORD *)(v3 + 30);
      if ((v5 & 0x400) == 0)
      {
        v6 = *(_WORD *)(v3 + 28);
        if ((v6 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v3, a2);
        }
        else
        {
          if ((v6 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
            v5 = *(_WORD *)(v3 + 30);
          }
          *(_WORD *)(v3 + 30) = v5 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
        }
      }
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLFormControlElement::didRecalcStyle(WebCore::Style::Change)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  __int16 v5;
  __int16 v6;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33BC658;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      v5 = *(_WORD *)(v3 + 30);
      if ((v5 & 0x400) == 0)
      {
        v6 = *(_WORD *)(v3 + 28);
        if ((v6 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v3, a2);
        }
        else
        {
          if ((v6 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
            v5 = *(_WORD *)(v3 + 30);
          }
          *(_WORD *)(v3 + 30) = v5 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
        }
      }
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLFormControlElement::didRecalcStyle(WebCore::Style::Change)::$_0,void>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) & 0xFFFFFFFFFFFFLL;
  if (result)
  {
    if ((*(_BYTE *)(result + 45) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 312))(result);
    }
  }
  return result;
}

void WebCore::HTMLFormControlsCollection::~HTMLFormControlsCollection(WebCore::HTMLFormControlsCollection *this, void *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  WebCore::HTMLFormControlsCollection *v8;

  *(_QWORD *)this = off_1E33BEA00;
  if (*((_QWORD *)this + 5) || (*((_BYTE *)this + 72) & 3) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8);
    v5 = v4 + 4 * (((unint64_t)*(unsigned __int16 *)((char *)this + 21) >> 5) & 0xF);
    --*(_DWORD *)(v5 + 1768);
    if ((*((_BYTE *)this + 22) & 2) != 0)
    {
      v6 = (uint64_t *)(v4 + 1760);
      v8 = this;
      v7 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v4 + 1760), (uint64_t *)&v8);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v6, v7);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  WebCore::HTMLCollection::~HTMLCollection(this, v3);
}

{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  WebCore::HTMLFormControlsCollection *v10;

  *(_QWORD *)this = off_1E33BEA00;
  if (*((_QWORD *)this + 5) || (*((_BYTE *)this + 72) & 3) != 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8);
    v7 = v6 + 4 * (((unint64_t)*(unsigned __int16 *)((char *)this + 21) >> 5) & 0xF);
    --*(_DWORD *)(v7 + 1768);
    if ((*((_BYTE *)this + 22) & 2) != 0)
    {
      v8 = (uint64_t *)(v6 + 1760);
      v10 = this;
      v9 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v6 + 1760), (uint64_t *)&v10);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v8, v9);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  WebCore::HTMLCollection::~HTMLCollection(this, v3);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::HTMLFormControlsCollection::namedItemOrItems@<X0>(WebCore::HTMLFormControlsCollection *this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  uint64_t v8;
  WebCore::ContainerNode *v9;
  unsigned int *v10;
  int v11;
  uint64_t *v12;
  int v13;
  char v14;

  WebCore::HTMLCollection::namedItems((uint64_t)this, a2, &v12);
  if (v13)
  {
    if (v13 == 1)
    {
      v8 = *v12;
      *v12 = 0;
      v11 = 1;
      v10 = 0;
      *(_QWORD *)a3 = v8;
      *(_DWORD *)(a3 + 8) = 1;
      *(_BYTE *)(a3 + 16) = 1;
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13RadioNodeListENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_7ElementENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)&v14, &v10);
    }
    else
    {
      v9 = (WebCore::ContainerNode *)WebCore::HTMLFormControlsCollection::ownerNode(this);
      WebCore::ContainerNode::radioNodeList(v9, a2, (_QWORD *)a3);
      *(_DWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v6);
}

uint64_t WebCore::HTMLFormControlsCollection::ownerNode(WebCore::HTMLFormControlsCollection *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if ((*(_WORD *)(result + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v8);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
      }
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WebCore::Element *WebCore::HTMLFormControlsCollection::customElementAfter(WebCore::HTMLFormControlsCollection *this, WebCore::Element *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Element *v10;
  uint64_t v11;
  void *v12;
  int v13;

  ++WebCore::ScriptDisallowedScope::s_count;
  v4 = WebCore::HTMLFormControlsCollection::ownerNode(this);
  v5 = v4;
  v6 = (_QWORD *)(v4 + 176);
  if (a2)
  {
    if (*((WebCore::Element **)this + 10) == a2)
      v7 = *((_DWORD *)this + 22) + 1;
    else
      v7 = WebCore::findFormListedElement(v4 + 176, a2) + 1;
  }
  else
  {
    v7 = 0;
  }
  if (*(_DWORD *)(v5 + 188) <= v7)
  {
LABEL_15:
    a2 = 0;
  }
  else
  {
    v8 = v7;
    while (1)
    {
      v9 = *(_QWORD *)(*v6 + 8 * v8);
      if (v9)
      {
        v10 = *(WebCore::Element **)(v9 + 8);
        if (v10)
          *((_DWORD *)v10 + 6) += 2;
      }
      else
      {
        v10 = 0;
      }
      v11 = (*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)v10 + 456))(v10);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 120))(v11);
      if (v13)
      {
        *((_QWORD *)this + 10) = v10;
        *((_DWORD *)this + 22) = v8;
        a2 = v10;
      }
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v12);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
      if (v13)
        break;
      if (++v8 >= (unint64_t)*(unsigned int *)(v5 + 188))
        goto LABEL_15;
    }
  }
  --WebCore::ScriptDisallowedScope::s_count;
  return a2;
}

uint64_t WebCore::HTMLFormElement::unsafeListedElements(WebCore::HTMLFormElement *this)
{
  return (uint64_t)this + 176;
}

unint64_t WebCore::findFormListedElement(uint64_t a1, WebCore::Node *a2)
{
  unint64_t v4;
  uint64_t v5;
  WebCore::Node *v6;
  uint64_t v7;
  int v8;
  void *v9;
  int v10;
  unint64_t result;

  if (!*(_DWORD *)(a1 + 12))
    return 0;
  v4 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v4);
    if (v5)
    {
      v6 = *(WebCore::Node **)(v5 + 8);
      if (v6)
        *((_DWORD *)v6 + 6) += 2;
    }
    else
    {
      v6 = 0;
    }
    v7 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v6 + 456))(v6);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7);
    v10 = v6 == a2 ? v8 : 0;
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6, v9);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
    if (v10)
      break;
    ++v4;
    result = *(unsigned int *)(a1 + 12);
    if (v4 >= result)
      return result;
  }
  return v4;
}

_QWORD *WebCore::HTMLFormControlsCollection::updateNamedElementCache(_QWORD *this)
{
  _QWORD *v1;
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  WTF *v23;
  void *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::Element *v41;
  uint64_t *IdAttribute;
  uint64_t *NameAttribute;
  uint64_t v44;
  uint64_t *v46;
  _BYTE v47[24];
  WTF::StringImpl **v48;

  if (this[4])
    return this;
  v1 = this;
  v2 = (uint64_t *)WTF::fastMalloc((WTF *)0x20);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  v48 = 0;
  ++WebCore::ScriptDisallowedScope::s_count;
  v4 = v1[3];
  if ((*(_BYTE *)(v4 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195BDC854);
  }
  v5 = v2;
  v6 = *(unsigned int *)(v4 + 188);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(v4 + 176);
    v8 = v7 + 8 * v6;
    v9 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    do
    {
      if (*(_QWORD *)v7)
      {
        v10 = *(_QWORD *)(*(_QWORD *)v7 + 8);
        if (v10)
          *(_DWORD *)(v10 + 24) += 2;
      }
      else
      {
        v10 = 0;
      }
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 456))(v10);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 120))(v11))
      {
        v12 = *(_QWORD *)(v10 + 104);
        if (v12)
        {
          v13 = v9;
          if (*(_QWORD *)(v12 + 24))
          {
            v31 = *(unsigned int *)(v12 + 4);
            if ((v31 & 1) != 0)
            {
              v32 = *(uint64_t **)(v12 + 40);
              v33 = *(unsigned int *)(v12 + 52);
            }
            else
            {
              v32 = (uint64_t *)(v12 + 32);
              v33 = v31 >> 5;
            }
            if (v33)
            {
              while (1)
              {
                v34 = *v32;
                if (*v32 == WebCore::HTMLNames::idAttr
                  || *(_QWORD *)(v34 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
                  && *(_QWORD *)(v34 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
                {
                  break;
                }
                v32 += 2;
                if (!--v33)
                  goto LABEL_70;
              }
            }
            else
            {
LABEL_70:
              v32 = 0;
            }
            v13 = v32 + 1;
          }
        }
        else
        {
          v13 = v9;
        }
        if (*v13 && *(_DWORD *)(*v13 + 4))
        {
          WebCore::CollectionNamedElementCache::append(v5, v5, v13, v10);
          WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add((uint64_t *)&v48, (WTF::StringImpl *)v13, (uint64_t)v47);
          v12 = *(_QWORD *)(v10 + 104);
        }
        if (v12)
        {
          v14 = *(unsigned int *)(v12 + 4);
          v15 = v9;
          if ((v14 & 2) != 0)
          {
            if ((v14 & 1) != 0)
            {
              v35 = *(uint64_t **)(v12 + 40);
              v36 = *(unsigned int *)(v12 + 52);
            }
            else
            {
              v35 = (uint64_t *)(v12 + 32);
              v36 = v14 >> 5;
            }
            if (v36)
            {
              while (1)
              {
                v37 = *v35;
                if (*v35 == WebCore::HTMLNames::nameAttr
                  || *(_QWORD *)(v37 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
                  && *(_QWORD *)(v37 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
                {
                  break;
                }
                v35 += 2;
                if (!--v36)
                  goto LABEL_79;
              }
            }
            else
            {
LABEL_79:
              v35 = 0;
            }
            v15 = v35 + 1;
          }
        }
        else
        {
          v15 = v9;
        }
        v16 = *v15;
        if (*v15 && *(_DWORD *)(v16 + 4) && *v13 != v16)
        {
          WebCore::CollectionNamedElementCache::append(v5, v5 + 1, v15, v10);
          WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add((uint64_t *)&v48, (WTF::StringImpl *)v15, (uint64_t)v47);
        }
      }
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10, v3);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
      v7 += 8;
    }
    while (v7 != v8);
    v4 = v1[3];
    if ((*(_WORD *)(v4 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x195BDC874);
    }
  }
  v17 = *(unsigned int *)(v4 + 204);
  if ((_DWORD)v17)
  {
    v38 = *(uint64_t **)(v4 + 192);
    v39 = 8 * v17;
    do
    {
      v40 = *v38;
      if (*v38)
      {
        v41 = *(WebCore::Element **)(v40 + 8);
        if (v41)
        {
          IdAttribute = WebCore::Element::getIdAttribute(*(WebCore::Element **)(v40 + 8));
          if (*IdAttribute
            && *(_DWORD *)(*IdAttribute + 4)
            && (WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::contains((uint64_t *)&v48, (uint64_t)IdAttribute) & 1) == 0)
          {
            WebCore::CollectionNamedElementCache::append(v5, v5, IdAttribute, (uint64_t)v41);
          }
          NameAttribute = WebCore::Element::getNameAttribute(v41);
          v44 = *NameAttribute;
          if (*NameAttribute)
          {
            if (*(_DWORD *)(v44 + 4) && *IdAttribute != v44)
            {
              v46 = NameAttribute;
              if ((WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::contains((uint64_t *)&v48, (uint64_t)NameAttribute) & 1) == 0)WebCore::CollectionNamedElementCache::append(v5, v5 + 1, v46, (uint64_t)v41);
            }
          }
        }
      }
      ++v38;
      v39 -= 8;
    }
    while (v39);
  }
  v18 = *v5;
  if (*v5)
    LODWORD(v18) = *(_DWORD *)(v18 - 12);
  v19 = v5[1];
  if (v19)
    LODWORD(v19) = *(_DWORD *)(v19 - 12);
  v20 = *((unsigned int *)v5 + 7) + (unint64_t)(v19 + v18);
  if (v20)
    WebCore::reportExtraMemoryAllocatedForCollectionIndexCache((WebCore *)(8 * v20));
  v21 = (unsigned __int8 *)v1 + 20;
  if (__ldaxr((unsigned __int8 *)v1 + 20))
  {
    __clrex();
LABEL_40:
    MEMORY[0x19AEA534C]((char *)v1 + 20);
    goto LABEL_41;
  }
  if (__stxr(1u, v21))
    goto LABEL_40;
LABEL_41:
  this = (_QWORD *)v1[4];
  v1[4] = v5;
  if (this)
  {
    WebCore::CollectionNamedElementCache::~CollectionNamedElementCache((WebCore::CollectionNamedElementCache *)this, (WTF::StringImpl *)v3);
    this = (_QWORD *)WTF::fastFree(v23, v24);
  }
  v25 = __ldxr(v21);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_47;
  }
  if (__stlxr(0, v21))
LABEL_47:
    this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)((char *)v1 + 20));
  v26 = *(_QWORD *)(*(_QWORD *)(v1[3] + 40) + 8);
  ++*(_DWORD *)(v26 + 1776);
  --WebCore::ScriptDisallowedScope::s_count;
  v27 = (uint64_t)v48;
  if (v48)
  {
    v28 = *((unsigned int *)v48 - 1);
    if ((_DWORD)v28)
    {
      v29 = v48;
      do
      {
        v30 = *v29;
        if (*v29 != (WTF::StringImpl *)-1)
        {
          *v29 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v3);
            else
              *(_DWORD *)v30 -= 2;
          }
        }
        ++v29;
        --v28;
      }
      while (v28);
    }
    return (_QWORD *)WTF::fastFree((WTF *)(v27 - 16), v3);
  }
  return this;
}

uint64_t WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::contains(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = (*(_DWORD *)(*(_QWORD *)a2 + 16) >> 8) & v4;
  v6 = *(_QWORD *)(v2 + 8 * v5);
  if (!v6)
    return 0;
  while (v6 == -1 || v6 != *(_QWORD *)a2)
  {
    v5 = (++v3 + v5) & v4;
    v6 = *(_QWORD *)(v2 + 8 * v5);
    if (!v6)
      return 0;
  }
  return 1;
}

uint64_t WebCore::HTMLFormControlsCollection::invalidateCacheForDocument(WebCore::HTMLFormControlsCollection *this, WebCore::Document *a2)
{
  uint64_t result;

  result = WebCore::CachedHTMLCollection<WebCore::HTMLFormControlsCollection,(WebCore::CollectionTraversalType)2>::invalidateCacheForDocument((uint64_t)this, (uint64_t *)a2);
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  return result;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLFormControlsCollection,(WebCore::CollectionTraversalType)2>::invalidateCacheForDocument(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  unsigned __int8 *v13;
  WTF *v15;
  void *v16;
  int v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;

  v3 = result;
  if (!*(_QWORD *)(result + 32))
    goto LABEL_2;
  --*((_DWORD *)a2 + 444);
  v13 = (unsigned __int8 *)(result + 20);
  if (__ldaxr((unsigned __int8 *)(result + 20)))
  {
    __clrex();
LABEL_23:
    MEMORY[0x19AEA534C](result + 20);
    goto LABEL_24;
  }
  if (__stxr(1u, v13))
    goto LABEL_23;
LABEL_24:
  result = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  if (result)
  {
    WebCore::CollectionNamedElementCache::~CollectionNamedElementCache((WebCore::CollectionNamedElementCache *)result, (WTF::StringImpl *)a2);
    result = WTF::fastFree(v15, v16);
  }
  v17 = __ldxr(v13);
  if (v17 == 1)
  {
    if (!__stlxr(0, v13))
      goto LABEL_2;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 20));
LABEL_2:
  if (*(_QWORD *)(v3 + 40) || (*(_BYTE *)(v3 + 72) & 3) != 0)
  {
    v4 = (_DWORD *)a2 + (((unint64_t)*(unsigned __int16 *)(v3 + 21) >> 5) & 0xF);
    --v4[442];
    if ((*(_WORD *)(v3 + 21) & 0x200) != 0)
    {
      v18 = a2 + 220;
      v21 = v3;
      v19 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>(v18, &v21);
      result = WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v18, v19);
    }
    *(_QWORD *)(v3 + 40) = 0;
    *(_BYTE *)(v3 + 72) &= 0xFCu;
    v5 = *(unsigned int *)(v3 + 68);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v3 + 56);
      v7 = &v6[v5];
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr((unsigned int *)v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, (unsigned int *)v8));
          if (!v10)
          {
            v20 = v7;
            atomic_store(1u, (unsigned int *)v8);
            v11 = *(unsigned int *)(v8 + 28);
            if ((_DWORD)v11)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v11));
            v12 = *(WTF **)(v8 + 16);
            if (v12)
            {
              *(_QWORD *)(v8 + 16) = 0;
              *(_DWORD *)(v8 + 24) = 0;
              WTF::fastFree(v12, a2);
            }
            result = WTF::fastFree((WTF *)v8, a2);
            v7 = v20;
          }
        }
        ++v6;
      }
      while (v6 != v7);
    }
    *(_DWORD *)(v3 + 68) = 0;
  }
  return result;
}

uint64_t WebCore::HTMLFormControlsCollection::item(WebCore::HTMLFormControlsCollection *this, unsigned int a2)
{
  uint64_t result;

  result = (uint64_t)WebCore::CollectionIndexCache<WebCore::HTMLFormControlsCollection,WebCore::Element *>::nodeAt((WebCore::HTMLFormControlsCollection *)((char *)this + 40), this, a2);
  if (result)
  {
    if ((*(_WORD *)(result + 28) & 0x10) == 0)
    {
      result = 105;
      __break(0xC471u);
    }
  }
  return result;
}

WebCore::Element *WebCore::CachedHTMLCollection<WebCore::HTMLFormControlsCollection,(WebCore::CollectionTraversalType)2>::item(uint64_t a1, unsigned int a2)
{
  return WebCore::CollectionIndexCache<WebCore::HTMLFormControlsCollection,WebCore::Element *>::nodeAt((WebCore::Element *)(a1 + 40), (WebCore::HTMLFormControlsCollection *)a1, a2);
}

void WebCore::HTMLFormElement::~HTMLFormElement(WebCore::HTMLFormElement *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF *v21;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  void *v26;
  uint64_t v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t **v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WebCore::FormController *v51;
  WTF *v52;
  void *v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  WTF *v59;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v3 = *(_QWORD **)(v2 + 1352);
  if (!v3)
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = 0;
    v3[1] = 0;
    v51 = *(WebCore::FormController **)(v2 + 1352);
    *(_QWORD *)(v2 + 1352) = v3;
    if (v51)
    {
      WebCore::FormController::~FormController(v51, v50);
      WTF::fastFree(v52, v53);
      v3 = *(_QWORD **)(v2 + 1352);
    }
  }
  v4 = v3[1];
  if (v4)
    WTF::WeakHashMap<WebCore::HTMLFormElement,WTF::String,WebCore::WeakPtrImplWithEventTargetData>::remove(v4, this);
  if (!WebCore::HTMLFormElement::shouldAutocomplete(this))
    WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1840, this);
  v6 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v54 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v54)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v54));
      v55 = *(WTF **)(v6 + 16);
      if (v55)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        WTF::fastFree(v55, v5);
      }
      WTF::fastFree((WTF *)v6, v5);
    }
  }
  v9 = *((_QWORD *)this + 22);
  v10 = *((unsigned int *)this + 47);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v9 + 8) + 456))(*(_QWORD *)(*(_QWORD *)v9 + 8));
      v13 = v12;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13);
      v9 += 8;
      v11 -= 8;
    }
    while (v11);
  }
  v14 = *((unsigned int *)this + 51);
  if ((_DWORD)v14)
  {
    v39 = *((_QWORD *)this + 24);
    v40 = 8 * v14;
    do
    {
      if (*(_QWORD *)v39)
        v41 = *(_QWORD *)(*(_QWORD *)v39 + 8);
      else
        v41 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)(v41 + 128) + 40))(v41 + 128);
      v39 += 8;
      v40 -= 8;
    }
    while (v40);
  }
  v15 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 48);
    *(_QWORD *)(v15 + 48) = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = *(unsigned int *)(v15 + 36);
    if ((_DWORD)v17)
    {
      v18 = *(WTF::StringImpl ***)(v15 + 24);
      v19 = 8 * v17;
      do
      {
        v20 = *v18;
        *v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v5);
          else
            *(_DWORD *)v20 -= 2;
        }
        ++v18;
        v19 -= 8;
      }
      while (v19);
    }
    v21 = *(WTF **)(v15 + 24);
    if ((WTF *)(v15 + 40) != v21 && v21 != 0)
    {
      *(_QWORD *)(v15 + 24) = 0;
      *(_DWORD *)(v15 + 32) = 0;
      WTF::fastFree(v21, v5);
    }
    WTF::fastFree((WTF *)v15, v5);
  }
  v23 = (unsigned int *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v23)
  {
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, v5);
    }
  }
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 26, v5);
  v27 = *((unsigned int *)this + 51);
  if ((_DWORD)v27)
  {
    v42 = (uint64_t *)*((_QWORD *)this + 24);
    v43 = &v42[v27];
    do
    {
      v44 = *v42;
      *v42 = 0;
      if (v44)
      {
        do
        {
          v45 = __ldaxr((unsigned int *)v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, (unsigned int *)v44));
        if (!v46)
        {
          atomic_store(1u, (unsigned int *)v44);
          v58 = *(unsigned int *)(v44 + 28);
          if ((_DWORD)v58)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v44 + 16), (WTF::StringImpl *)(*(_QWORD *)(v44 + 16) + 32 * v58));
          v59 = *(WTF **)(v44 + 16);
          if (v59)
          {
            *(_QWORD *)(v44 + 16) = 0;
            *(_DWORD *)(v44 + 24) = 0;
            WTF::fastFree(v59, v26);
          }
          WTF::fastFree((WTF *)v44, v26);
        }
      }
      ++v42;
    }
    while (v42 != v43);
  }
  v28 = (WTF *)*((_QWORD *)this + 24);
  if (v28)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v28, v26);
  }
  WTF::Vector<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 176, v26);
  v30 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr((unsigned int *)v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, (unsigned int *)v30));
    if (!v32)
    {
      atomic_store(1u, (unsigned int *)v30);
      v56 = *(unsigned int *)(v30 + 28);
      if ((_DWORD)v56)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v30 + 16), (WTF::StringImpl *)(*(_QWORD *)(v30 + 16) + 32 * v56));
      v57 = *(WTF **)(v30 + 16);
      if (v57)
      {
        *(_QWORD *)(v30 + 16) = 0;
        *(_DWORD *)(v30 + 24) = 0;
        WTF::fastFree(v57, v29);
      }
      WTF::fastFree((WTF *)v30, v29);
    }
  }
  v33 = *((_QWORD *)this + 20);
  if (v33)
  {
    v47 = *(unsigned int *)(v33 - 4);
    if ((_DWORD)v47)
    {
      v48 = (uint64_t **)(v33 + 8);
      do
      {
        if (*(v48 - 1) != (uint64_t *)-1)
        {
          std::unique_ptr<WebCore::RadioButtonGroup>::~unique_ptr[abi:sn180100](v48, v29);
          v49 = (WTF::StringImpl *)*(v48 - 1);
          *(v48 - 1) = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v29);
            else
              *(_DWORD *)v49 -= 2;
          }
        }
        v48 += 2;
        --v47;
      }
      while (v47);
    }
    WTF::fastFree((WTF *)(v33 - 16), v29);
  }
  v34 = *((_QWORD *)this + 19);
  if (v34)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v34, v29);
  v35 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v29);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v29);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v29);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v29);
    else
      *(_DWORD *)v38 -= 2;
  }
  WebCore::Element::~Element((uint64_t)this);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::HTMLFormElement::~HTMLFormElement(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

BOOL WebCore::HTMLFormElement::shouldAutocomplete(WebCore::HTMLFormElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v10;
  int v11;

  v1 = *((_QWORD *)this + 13);
  if (v1
    && ((v2 = *(_DWORD *)(v1 + 4), (v2 & 1) != 0)
      ? (v3 = *(_QWORD *)(v1 + 40), LODWORD(v4) = *(_DWORD *)(v1 + 52))
      : (v3 = v1 + 32, LODWORD(v4) = v2 >> 5),
        (_DWORD)v4))
  {
    v4 = v4;
    v5 = (uint64_t *)(v3 + 8);
    while (1)
    {
      v6 = *(v5 - 1);
      if (v6 == WebCore::HTMLNames::autocompleteAttr
        || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::autocompleteAttr + 24)
        && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::autocompleteAttr + 32))
      {
        break;
      }
      v5 += 2;
      if (!--v4)
      {
        v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v7 = *v5;
  if (*v5 && *(_DWORD *)(v7 + 4) == 3)
  {
    v10 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v10 & 0xDF) == 0x4F && (*(_BYTE *)(v10 + 1) & 0xDF) == 0x46)
      {
        v11 = *(unsigned __int8 *)(v10 + 2);
LABEL_20:
        v8 = (v11 & 0xFFFFFFDF) == 70;
        return !v8;
      }
    }
    else if ((*(_WORD *)v10 & 0xFFDF) == 0x4F && (*(_WORD *)(v10 + 2) & 0xFFDF) == 0x46)
    {
      v11 = *(unsigned __int16 *)(v10 + 4);
      goto LABEL_20;
    }
  }
  v8 = 0;
  return !v8;
}

uint64_t WebCore::HTMLFormElement::insertedIntoAncestor(WebCore::Element *a1, unsigned __int16 a2, uint64_t a3)
{
  char v3;

  v3 = a2;
  WebCore::HTMLElement::insertedIntoAncestor((uint64_t)a1, a2, a3);
  if ((v3 & 1) != 0)
    WebCore::Document::didAssociateFormControl(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8), a1);
  return 0;
}

WTF *WebCore::HTMLFormElement::removedFromAncestor(uint64_t a1, void *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  unsigned __int16 v6;
  const WebCore::Node *v8;
  const WebCore::Node *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Node *v17;
  uint64_t v18;
  WTF **v19;
  WebCore::FormListedElement **v20;
  WebCore::FormListedElement *v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  WTF *result;
  WTF **v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;

  v6 = (unsigned __int16)a2;
  v8 = (const WebCore::Node *)a1;
  do
  {
    v9 = v8;
    v8 = (const WebCore::Node *)*((_QWORD *)v8 + 4);
  }
  while (v8);
  v10 = *(unsigned int *)(a1 + 188);
  if (!(_DWORD)v10)
  {
    v19 = 0;
    v12 = 0;
LABEL_34:
    LOBYTE(v14) = 1;
    goto LABEL_18;
  }
  if (v10 >> 29)
    goto LABEL_69;
  v11 = WTF::fastMalloc((WTF *)(8 * v10));
  v12 = (WTF *)v11;
  v13 = *(unsigned int *)(a1 + 188);
  if (!(_DWORD)v13)
  {
    LOBYTE(v14) = 1;
    v19 = (WTF **)v11;
    goto LABEL_18;
  }
  v14 = 0;
  v15 = *(_QWORD *)(a1 + 176);
  v16 = 8 * v13;
  do
  {
    v17 = *(WebCore::Node **)(*(_QWORD *)(v15 + v14) + 8);
    *((_DWORD *)v17 + 6) += 2;
    v18 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v17 + 456))(v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 88))(v18);
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17, a2);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
    *(_QWORD *)((char *)v12 + v14) = v18;
    v14 += 8;
  }
  while (v16 != v14);
  v19 = (WTF **)((char *)v12 + v14);
  if (!v14)
    goto LABEL_34;
  v20 = (WebCore::FormListedElement **)v12;
  do
  {
    v21 = *v20++;
    WebCore::FormListedElement::formOwnerRemovedFromTree(v21, v9);
    v14 -= 8;
  }
  while (v14);
LABEL_18:
  v41 = 0;
  v42 = 0;
  v22 = *(unsigned int *)(a1 + 204);
  if (!(_DWORD)v22)
  {
LABEL_19:
    v23 = 0;
    goto LABEL_20;
  }
  if (v22 >> 29)
  {
LABEL_69:
    __break(0xC471u);
    JUMPOUT(0x195BDD63CLL);
  }
  LODWORD(v42) = *(_DWORD *)(a1 + 204);
  v41 = (WTF *)WTF::fastMalloc((WTF *)(8 * v22));
  v33 = *(unsigned int *)(a1 + 204);
  if (!(_DWORD)v33)
    goto LABEL_19;
  v34 = *(_QWORD *)(a1 + 192);
  v35 = 8 * v33;
  do
  {
    if (*(_QWORD *)v34)
    {
      v36 = *(_QWORD *)(*(_QWORD *)v34 + 8);
      if (v36)
      {
        *(_DWORD *)(v36 + 24) += 2;
        v43 = v36;
        v37 = HIDWORD(v42);
        if (HIDWORD(v42) == (_DWORD)v42)
        {
          WTF::Vector<std::unique_ptr<WebCore::DetachedOffscreenCanvas>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::DetachedOffscreenCanvas>>((uint64_t)&v41, (unint64_t)&v43);
        }
        else
        {
          v43 = 0;
          *((_QWORD *)v41 + HIDWORD(v42)) = v36;
          HIDWORD(v42) = v37 + 1;
        }
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v43);
      }
    }
    v34 += 8;
    v35 -= 8;
  }
  while (v35);
  LODWORD(v22) = v42;
  v23 = HIDWORD(v42);
LABEL_20:
  if (v23 >= v22)
    goto LABEL_21;
  v27 = v41;
  if (v23)
  {
    if ((_DWORD)v42)
    {
      LODWORD(v42) = v23;
      v41 = (WTF *)WTF::fastRealloc(v41, (void *)(8 * v23));
      goto LABEL_21;
    }
    if (v23 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195BDD644);
    }
    v31 = HIDWORD(v42);
    v32 = (WTF *)WTF::fastMalloc((WTF *)(8 * v23));
    LODWORD(v42) = v23;
    v41 = v32;
    if (v32 != v27)
      memcpy(v32, v27, 8 * v31);
  }
  if (v27)
  {
    if (v41 == v27)
    {
      v41 = 0;
      LODWORD(v42) = 0;
    }
    WTF::fastFree(v27, a2);
  }
LABEL_21:
  if (HIDWORD(v42))
  {
    v28 = v41;
    v29 = 8 * HIDWORD(v42);
    do
    {
      v30 = *(unsigned int **)v28;
      v28 = (WTF *)((char *)v28 + 8);
      WebCore::HTMLImageElement::formOwnerRemovedFromTree(v30, v9);
      v29 -= 8;
    }
    while (v29);
  }
  WebCore::HTMLElement::removedFromAncestor(a1, v6, a3, a4, a5);
  if (HIDWORD(v42))
  {
    v38 = v41;
    v39 = 8 * HIDWORD(v42);
    do
    {
      v40 = *(_QWORD *)v38;
      *(_QWORD *)v38 = 0;
      if (v40)
      {
        if (*(_DWORD *)(v40 + 24) == 2)
        {
          if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v40, v24);
        }
        else
        {
          *(_DWORD *)(v40 + 24) -= 2;
        }
      }
      v38 = (WTF *)((char *)v38 + 8);
      v39 -= 8;
    }
    while (v39);
  }
  result = v41;
  if (v41)
  {
    v41 = 0;
    LODWORD(v42) = 0;
    result = (WTF *)WTF::fastFree(result, v24);
  }
  if ((v14 & 1) == 0)
  {
    v26 = (WTF **)v12;
    do
    {
      result = *v26;
      *v26 = 0;
      if (result)
        result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 96))(result);
      ++v26;
    }
    while (v26 != v19);
  }
  if (v12)
    return (WTF *)WTF::fastFree(v12, v24);
  return result;
}

uint64_t WebCore::HTMLFormElement::copyListedElementsVector@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Node *v10;
  uint64_t v11;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = *(unsigned int *)(this + 188);
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = this;
      this = WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(a2 + 8) = v2;
      *(_QWORD *)a2 = this;
      v5 = *(unsigned int *)(v4 + 188);
      if ((_DWORD)v5)
      {
        v6 = this;
        v7 = 0;
        v8 = *(_QWORD *)(v4 + 176);
        v9 = 8 * v5;
        do
        {
          v10 = *(WebCore::Node **)(*(_QWORD *)(v8 + 8 * v7) + 8);
          *((_DWORD *)v10 + 6) += 2;
          v11 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v10 + 456))(v10);
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11);
          if (*((_DWORD *)v10 + 6) == 2)
          {
            if ((*((_WORD *)v10 + 15) & 0x400) == 0)
              this = WebCore::Node::removedLastRef(v10);
          }
          else
          {
            *((_DWORD *)v10 + 6) -= 2;
          }
          *(_QWORD *)(v6 + 8 * v7++) = v11;
          *(_DWORD *)(a2 + 12) = v7;
          v9 -= 8;
        }
        while (v9);
      }
    }
  }
  return this;
}

uint64_t WebCore::HTMLFormElement::length(WebCore::HTMLFormElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Node *v5;
  uint64_t v6;
  void *v7;
  int v8;

  v1 = *((unsigned int *)this + 47);
  if (!(_DWORD)v1)
    return 0;
  LODWORD(v2) = 0;
  v3 = *((_QWORD *)this + 22);
  v4 = 8 * v1;
  do
  {
    v5 = *(WebCore::Node **)(*(_QWORD *)v3 + 8);
    *((_DWORD *)v5 + 6) += 2;
    v6 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v5 + 456))(v5);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 120))(v6);
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5, v7);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
    v2 = (v2 + v8);
    v3 += 8;
    v4 -= 8;
  }
  while (v4);
  return v2;
}

uint64_t WebCore::HTMLFormElement::item(WebCore::HTMLFormElement *this, WTF::StringImpl *a2)
{
  unsigned int v2;
  WebCore::HTMLFormControlsCollection *v3;
  uint64_t v4;
  WebCore::HTMLFormControlsCollection *v6;

  v2 = a2;
  WebCore::HTMLFormElement::elements(this, a2, (uint64_t *)&v6);
  v3 = v6;
  v4 = WebCore::HTMLFormControlsCollection::item(v6, v2);
  if (*((_DWORD *)v3 + 4) == 1)
    (*(void (**)(WebCore::HTMLFormControlsCollection *))(*(_QWORD *)v3 + 8))(v3);
  else
    --*((_DWORD *)v3 + 4);
  return v4;
}

double WebCore::HTMLFormElement::elements@<D0>(WebCore::HTMLFormElement *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  double result;
  uint64_t v7;
  WebCore::NodeListsNodeData *v8;
  WTF *v9;
  void *v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  WTF::StringImpl *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v5)
  {
    WebCore::Node::materializeRareData(this);
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v7 = *v5;
  if (!*v5)
  {
    v7 = WTF::fastMalloc((WTF *)0x28);
    result = 0.0;
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_QWORD *)(v7 + 32) = 0;
    v8 = (WebCore::NodeListsNodeData *)*v5;
    *v5 = v7;
    if (v8)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v8, a2);
      WTF::fastFree(v9, v10);
      v7 = *v5;
    }
  }
  v11 = (uint64_t *)(v7 + 32);
  v12 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v13 = *v11;
  if (*v11
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v7 + 32), 8u, 0), (v13 = *v11) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = ((*((_DWORD *)v12 + 4) >> 8) + 20) & v14;
  v16 = (unsigned __int8 *)(v13 + 24 * v15);
  v17 = *v16;
  v18 = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
  if (*v16)
    v19 = 0;
  else
    v19 = v18 == 0;
  if (!v19)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      v22 = v20;
      v20 = v16;
      if (v17 != 255)
      {
        v20 = v22;
        if (v17 == 20 && v18 == v12)
        {
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, a2);
            else
              *(_DWORD *)v12 -= 2;
          }
          v23 = *(_QWORD *)(v13 + 24 * v15 + 16);
          ++*(_DWORD *)(v23 + 16);
          *a3 = v23;
          return result;
        }
      }
      v15 = ((_DWORD)v15 + v21) & v14;
      v16 = (unsigned __int8 *)(v13 + 24 * v15);
      v17 = *v16;
      v18 = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
      ++v21;
      if (*v16)
        v24 = 0;
      else
        v24 = v18 == 0;
    }
    while (!v24);
    if (v20)
    {
      *v20 = 0;
      v20[1] = 0;
      v20[2] = 0;
      --*(_DWORD *)(*v11 - 16);
      v16 = (unsigned __int8 *)v20;
    }
  }
  *v16 = 20;
  *((_QWORD *)v16 + 1) = v12;
  *((_QWORD *)v16 + 2) = 0;
  v25 = *v11;
  if (*v11)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v27 = *v11;
  if (*v11)
    v28 = *(_DWORD *)(v27 - 12);
  else
    v28 = 0;
  v29 = (*(_DWORD *)(v27 - 16) + v28);
  v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 > 2 * v29)
      goto LABEL_37;
LABEL_42:
    v16 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::expand(v11, (uint64_t)v16);
    goto LABEL_37;
  }
  if (3 * v30 <= 4 * v29)
    goto LABEL_42;
LABEL_37:
  v31 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v31 + 16) = 1;
  *(_BYTE *)(v31 + 20) = 0;
  *(_WORD *)(v31 + 21) = *(_WORD *)(v31 + 21) & 0xFC00 | 0x2B4;
  *((_DWORD *)this + 6) += 2;
  *(_QWORD *)(v31 + 24) = this;
  result = 0.0;
  *(_OWORD *)(v31 + 32) = 0u;
  *(_OWORD *)(v31 + 48) = 0u;
  *(_QWORD *)(v31 + 64) = 0;
  *(_BYTE *)(v31 + 72) &= 0xFCu;
  *(_QWORD *)v31 = off_1E33BCB70;
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 80) = 0;
  *(_DWORD *)(v31 + 88) = 0;
  *a3 = v31;
  *((_QWORD *)v16 + 2) = v31;
  return result;
}

WTF *WebCore::HTMLFormElement::namedItem@<X0>(WebCore::HTMLFormElement *this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  WTF *result;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  WTF *v14;
  int v15;
  unsigned int v16;
  char v17;

  WebCore::HTMLFormElement::namedElements((uint64_t)this, a2, (_QWORD **)&v14);
  if (v16)
  {
    if (v16 == 1)
    {
      v8 = *(_QWORD *)v14;
      *(_QWORD *)v14 = 0;
      v13 = 1;
      v12 = 0;
      *(_QWORD *)a3 = v8;
      *(_DWORD *)(a3 + 8) = 1;
      *(_BYTE *)(a3 + 16) = 1;
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13RadioNodeListENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_7ElementENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)&v17, &v12);
    }
    else
    {
      WebCore::ContainerNode::radioNodeList(this, a2, (_QWORD *)a3);
      *(_DWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
    if (v16)
    {
      v9 = v14;
      v10 = 8 * v16;
      do
      {
        v11 = *(_QWORD *)v9;
        *(_QWORD *)v9 = 0;
        if (v11)
        {
          if (*(_DWORD *)(v11 + 24) == 2)
          {
            if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v11, v6);
          }
          else
          {
            *(_DWORD *)(v11 + 24) -= 2;
          }
        }
        v9 = (WTF *)((char *)v9 + 8);
        v10 -= 8;
      }
      while (v10);
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  result = v14;
  if (v14)
  {
    v14 = 0;
    v15 = 0;
    return (WTF *)WTF::fastFree(result, v6);
  }
  return result;
}

uint64_t WebCore::HTMLFormElement::namedElements@<X0>(uint64_t this@<X0>, const WTF::AtomString *a2@<X1>, _QWORD **a3@<X8>)
{
  WebCore::HTMLFormElement *v5;
  WebCore::HTMLCollection *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  WebCore::FormAssociatedElement *v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::HTMLCollection *v20;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    *a3 = 0;
    a3[1] = 0;
    return this;
  }
  v5 = (WebCore::HTMLFormElement *)this;
  WebCore::HTMLFormElement::elements((WebCore::HTMLFormElement *)this, a2, (uint64_t *)&v20);
  v6 = v20;
  WebCore::HTMLCollection::namedItems((uint64_t)v20, a2, a3);
  if (v6)
  {
    if (*((_DWORD *)v6 + 4) == 1)
      (*(void (**)(WebCore::HTMLCollection *))(*(_QWORD *)v6 + 8))(v6);
    else
      --*((_DWORD *)v6 + 4);
  }
  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 && *(_DWORD *)(v8 + 4) && (v7 = (_DWORD *)*((_QWORD *)v5 + 19)) != 0 && *(v7 - 3))
  {
    WTF::HashMap<WTF::AtomString,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::get((unsigned int **)&v20, (uint64_t)v7, v8);
    if (v20)
    {
      v13 = *((_QWORD *)v20 + 1);
      v14 = v13;
      if (v13)
        *(_DWORD *)(v13 + 24) += 2;
    }
    else
    {
      v14 = 0;
    }
    WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr((uint64_t *)&v20, v12);
    this = v14;
  }
  else
  {
    this = 0;
  }
  v9 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v9 != 1)
  {
    if (!this)
      return this;
    if (!(_DWORD)v9)
    {
      v10 = this;
      if (*((_DWORD *)a3 + 2))
      {
        v11 = (uint64_t)*a3;
        *(_DWORD *)(this + 24) += 2;
        *(_QWORD *)(v11 + 8 * v9) = this;
        *((_DWORD *)a3 + 3) = 1;
      }
      else
      {
        v18 = (uint64_t)a3;
        v19 = v10;
        WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTMLElement&>(v18, v10);
        this = v19;
      }
    }
    goto LABEL_27;
  }
  v15 = (_WORD *)**a3;
  v16 = this;
  if ((_WORD *)this != v15)
  {
    if ((v15[14] & 0x10) == 0)
    {
      this = 96;
      __break(0xC471u);
      return this;
    }
    v17 = (WebCore::FormAssociatedElement *)(*(uint64_t (**)(_WORD *))(*(_QWORD *)v15 + 1200))(v15);
    WebCore::HTMLFormElement::addToPastNamesMap(v5, v17, *(const WTF::AtomString **)a2);
  }
  this = v16;
  if (v16)
  {
LABEL_27:
    if (*(_DWORD *)(this + 24) == 2)
    {
      if ((*(_WORD *)(this + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, v7);
    }
    else
    {
      *(_DWORD *)(this + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::HTMLFormElement::submitImplicitly(uint64_t this, WebCore::Event *a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  WebCore *v10;
  double v11;
  double v12;
  float v13;

  v3 = *(unsigned int *)(this + 188);
  if ((_DWORD)v3)
  {
    v6 = this;
    v7 = 0;
    v8 = *(_QWORD *)(this + 176);
    v9 = 8 * v3;
    do
    {
      if (*(_QWORD *)v8)
        v10 = *(WebCore **)(*(_QWORD *)v8 + 8);
      else
        v10 = 0;
      this = (*(uint64_t (**)(WebCore *))(*(_QWORD *)v10 + 848))(v10);
      if ((_DWORD)this)
      {
        if (((*(uint64_t (**)(WebCore *))(*(_QWORD *)v10 + 1264))(v10) & 1) != 0)
          return WebCore::simulateClick(v10, (uint64_t)a2, 0, 1, 1);
        this = (*(uint64_t (**)(WebCore *))(*(_QWORD *)v10 + 1256))(v10);
        v7 += this;
      }
      v8 += 8;
      v9 -= 8;
    }
    while (v9);
    if (v7
      && a3
      && (v7 == 1 || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 680) + 664) & 0x20000) != 0))
    {
      return WebCore::HTMLFormElement::submitIfPossible(v6, a2, 0, 1, v11, v12, v13);
    }
  }
  return this;
}

uint64_t WebCore::HTMLFormElement::submitIfPossible(uint64_t result, const WebCore::Event *a2, WebCore::Node *this, int a4, double a5, double a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  const WebCore::Event *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::Node *v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  WebCore::Frame *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  WTF::StringImpl *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _DWORD *v51;
  int v52;
  int v53;
  WTF::StringImpl **v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  int v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  WTF::StringImpl **v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WebCore::LocalFrame *v76;
  WebCore::Node *v77;
  uint64_t v78;
  uint64_t v79;
  WebCore::Frame *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  void *v85;
  WebCore::Event *v86;
  WTF::StringImpl *v87;
  void *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  WebCore::Frame *v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  unsigned int v106;
  unsigned int v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  const WebCore::Event *v110;
  int v111;
  WebCore::Node *v112;
  uint64_t v113;
  uint64_t v114;
  WebCore::Frame *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;

  if ((*(_BYTE *)(result + 22) & 8) == 0)
    return result;
  v8 = result;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 528);
  if (!v9)
    return result;
  v10 = *(unsigned int **)(v9 + 8);
  if (!v10)
    return result;
  v13 = a2;
  v14 = v10 + 2;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  if (*(_BYTE *)(result + 249))
    goto LABEL_159;
  *(_WORD *)(result + 249) = 1;
  v16 = *(unsigned int *)(result + 188);
  if ((_DWORD)v16)
  {
    v17 = *(_QWORD *)(result + 176);
    v7 = 8 * v16;
    do
    {
      if (*(_QWORD *)v17)
        v18 = *(unsigned __int8 **)(*(_QWORD *)v17 + 8);
      else
        v18 = 0;
      if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v18 + 848))(v18))
        WebCore::ValidatedFormListedElement::setInteractedWithSinceLastFormSubmitEvent(v18 + 112, 1);
      v17 += 8;
      v7 -= 8;
    }
    while (v7);
  }
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 528);
  if (!v19)
    goto LABEL_56;
  v20 = *(_QWORD *)(v19 + 8);
  if (!v20)
    goto LABEL_56;
  v21 = *(_QWORD *)(v20 + 24);
  if (!v21)
    goto LABEL_56;
  v22 = *(_QWORD *)(v21 + 8);
  if (!v22 || (*(_QWORD *)(*(_QWORD *)(v22 + 112) + 680) & 0x20000000) == 0)
    goto LABEL_56;
  v23 = *(_QWORD *)(v8 + 104);
  if (v23)
  {
    v24 = *(_DWORD *)(v23 + 4);
    if ((v24 & 1) != 0)
    {
      v25 = *(uint64_t **)(v23 + 40);
      LODWORD(v26) = *(_DWORD *)(v23 + 52);
      if (!(_DWORD)v26)
        goto LABEL_33;
    }
    else
    {
      v25 = (uint64_t *)(v23 + 32);
      LODWORD(v26) = v24 >> 5;
      if (!(_DWORD)v26)
        goto LABEL_33;
    }
    v26 = v26;
    do
    {
      v27 = *v25;
      if (*v25 == WebCore::HTMLNames::novalidateAttr
        || *(_QWORD *)(v27 + 24) == *(_QWORD *)(WebCore::HTMLNames::novalidateAttr + 24)
        && *(_QWORD *)(v27 + 32) == *(_QWORD *)(WebCore::HTMLNames::novalidateAttr + 32))
      {
        goto LABEL_56;
      }
      v25 += 2;
    }
    while (--v26);
  }
LABEL_33:
  v28 = this;
  if (this)
    goto LABEL_34;
  if (v13)
  {
    v28 = (WebCore::Node *)*((_QWORD *)v13 + 6);
    if (v28)
    {
      if ((*((_QWORD *)v28 + 2) & 0x2000000000000) != 0)
      {
        if ((*((_WORD *)v28 + 14) & 8) == 0)
          goto LABEL_188;
        while (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v28 + 848))(v28) & 1) == 0)
        {
LABEL_188:
          v28 = (WebCore::Node *)*((_QWORD *)v28 + 4);
          if (!v28 || (*((_WORD *)v28 + 14) & 8) == 0)
            goto LABEL_55;
        }
LABEL_34:
        v29 = *((_DWORD *)v28 + 6);
        *((_DWORD *)v28 + 6) = v29 + 2;
        v30 = *((_QWORD *)v28 + 13);
        if (v30
          && ((v31 = *(_DWORD *)(v30 + 4), (v31 & 1) != 0)
            ? (v32 = *(uint64_t **)(v30 + 40), LODWORD(v33) = *(_DWORD *)(v30 + 52))
            : (v32 = (uint64_t *)(v30 + 32), LODWORD(v33) = v31 >> 5),
              (_DWORD)v33))
        {
          v33 = v33;
          while (1)
          {
            v34 = *v32;
            if (*v32 == WebCore::HTMLNames::formnovalidateAttr
              || *(_QWORD *)(v34 + 24) == *(_QWORD *)(WebCore::HTMLNames::formnovalidateAttr + 24)
              && *(_QWORD *)(v34 + 32) == *(_QWORD *)(WebCore::HTMLNames::formnovalidateAttr + 32))
            {
              break;
            }
            v32 += 2;
            if (!--v33)
              goto LABEL_51;
          }
          v35 = 1;
        }
        else
        {
LABEL_51:
          v35 = 0;
        }
        if (v29)
        {
          *((_DWORD *)v28 + 6) = v29;
        }
        else if ((*((_WORD *)v28 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v28, a2);
        }
        if ((v35 & 1) == 0)
          goto LABEL_55;
LABEL_56:
        v36 = (WTF::StringImpl *)*((_QWORD *)v10 + 35);
        WebCore::HTMLFormElement::effectiveTarget(v8, v13, this, &v116, a5, a6, a7);
        WebCore::FrameLoader::findFrameForNavigation(v36, (const WTF::AtomString *)&v116, *(WebCore::Document **)(*(_QWORD *)(v8 + 40) + 8), &v115);
        v38 = v116;
        v116 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v37);
          else
            *(_DWORD *)v38 -= 2;
        }
        if (!v115)
        {
          do
            v39 = __ldaxr(v14);
          while (__stlxr(v39 + 1, v14));
          v40 = v115;
          v115 = (WebCore::Frame *)v10;
          if (v40)
          {
            v41 = (unsigned int *)((char *)v40 + 8);
            do
            {
              v42 = __ldaxr(v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v41));
            if (!v43)
            {
              atomic_store(1u, v41);
              v104 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v104 = off_1E31FE290;
              *((_QWORD *)v104 + 1) = v41;
              v116 = v104;
              WTF::ensureOnMainThread();
              v105 = v116;
              v116 = 0;
              if (v105)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v105 + 8))(v105);
            }
          }
        }
        v112 = 0;
        v113 = 0;
        v44 = (WTF::StringImpl *)*(unsigned int *)(v8 + 188);
        if ((_DWORD)v44)
        {
          if (v44 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x195BDE8FCLL);
          }
          LODWORD(v113) = *(_DWORD *)(v8 + 188);
          v112 = (WebCore::Node *)WTF::fastMalloc((WTF *)(16 * (_QWORD)v44));
          v46 = *(unsigned int *)(v8 + 188);
          if ((_DWORD)v46)
          {
            v110 = v13;
            v111 = a4;
            v47 = *(_QWORD *)(v8 + 176);
            v48 = v47 + 8 * v46;
            while (1)
            {
              if (*(_QWORD *)v47)
              {
                v49 = *(_QWORD *)(*(_QWORD *)v47 + 8);
                if (v49)
                {
                  if (*(_QWORD *)(*(_QWORD *)(v49 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
                    break;
                }
              }
              v7 &= 0xFFFFFFFFFFFFFF00;
LABEL_114:
              v47 += 8;
              if (v47 == v48)
              {
                v71 = HIDWORD(v113);
                a4 = v111;
                v13 = v110;
                goto LABEL_122;
              }
            }
            v50 = *(_DWORD *)(v49 + 24) + 2;
            *(_DWORD *)(v49 + 24) = v50;
            v51 = *(_DWORD **)(v49 + 240);
            v52 = v51[3];
            v53 = v52 & 0x2A8C20;
            if ((v52 & 0x2A8C20) == 0)
            {
              v7 &= 0xFFFFFFFFFFFFFF00;
LABEL_101:
              v62 = v50 - 2;
              if (v62)
              {
                *(_DWORD *)(v49 + 24) = v62;
              }
              else if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v49, v45);
              }
              if (v53)
              {
                v116 = (WTF::StringImpl *)v7;
                v117 = v44;
                v63 = HIDWORD(v113);
                if (HIDWORD(v113) == (_DWORD)v113)
                {
                  v64 = (_QWORD *)WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v112, HIDWORD(v113) + 1, (unint64_t)&v116);
                  v63 = HIDWORD(v113);
                  v65 = (uint64_t *)((char *)v112 + 16 * HIDWORD(v113));
                  v66 = *v64;
                  *v64 = 0;
                  v67 = (WTF::StringImpl **)(v64 + 1);
                  *v65 = v66;
                }
                else
                {
                  v67 = &v117;
                  v65 = (uint64_t *)((char *)v112 + 16 * HIDWORD(v113));
                  v116 = 0;
                  *v65 = v7;
                }
                v68 = *v67;
                *v67 = 0;
                v65[1] = (uint64_t)v68;
                HIDWORD(v113) = v63 + 1;
                v69 = v117;
                v117 = 0;
                if (v69)
                {
                  if (*(_DWORD *)v69 == 2)
                    WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v45);
                  else
                    *(_DWORD *)v69 -= 2;
                }
                v70 = v116;
                v116 = 0;
                if (v70)
                {
                  if (*(_DWORD *)v70 == 2)
                    WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v45);
                  else
                    *(_DWORD *)v70 -= 2;
                }
                v44 = 0;
                v7 = 0;
              }
              goto LABEL_114;
            }
            if (*(_QWORD *)(v49 + 208))
              v54 = (WTF::StringImpl **)(v49 + 208);
            else
              v54 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
            if (v52 == 64)
            {
              WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v51, &v116);
              goto LABEL_98;
            }
            v55 = *(WTF::StringImpl **)(v49 + 216);
            if (v55)
            {
              *(_DWORD *)v55 += 2;
              v116 = v55;
              goto LABEL_98;
            }
            v56 = *(_QWORD *)(v49 + 104);
            if (!v56)
              goto LABEL_92;
            v57 = *(unsigned int *)(v56 + 4);
            if ((v57 & 1) != 0)
            {
              v58 = *(_QWORD *)(v56 + 40);
              v59 = *(unsigned int *)(v56 + 52);
              if (!v59)
              {
LABEL_92:
                v60 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                goto LABEL_93;
              }
            }
            else
            {
              v58 = v56 + 32;
              v59 = v57 >> 5;
              if (!(v57 >> 5))
                goto LABEL_92;
            }
            v60 = (_QWORD *)(v58 + 8);
            while (1)
            {
              v61 = *(v60 - 1);
              if (v61 == WebCore::HTMLNames::valueAttr
                || *(_QWORD *)(v61 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
                && *(_QWORD *)(v61 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
              {
                break;
              }
              v60 += 2;
              if (!--v59)
                goto LABEL_92;
            }
LABEL_93:
            if (*v60)
            {
              (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v51 + 296))(&v116);
              if (v116)
                goto LABEL_98;
              v116 = 0;
              v51 = *(_DWORD **)(v49 + 240);
            }
            (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v51 + 64))(&v116);
LABEL_98:
            v7 = (uint64_t)*v54;
            if (v7)
              *(_DWORD *)v7 += 2;
            v44 = v116;
            v50 = *(_DWORD *)(v49 + 24);
            goto LABEL_101;
          }
        }
        v71 = 0;
LABEL_122:
        WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v112, v71);
        v72 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
        v73 = WTF::fastMalloc((WTF *)0x48);
        v74 = v73;
        *(_DWORD *)(v73 + 24) = 1;
        v75 = *(_QWORD *)(v72 + 528);
        if (v75)
          v76 = *(WebCore::LocalFrame **)(v75 + 8);
        else
          v76 = 0;
        *(_QWORD *)(v73 + 8) = 0;
        *(_QWORD *)(v73 + 16) = 0;
        *(_QWORD *)v73 = off_1E33FEB10;
        WebCore::FrameDestructionObserver::observeFrame((WebCore::FrameDestructionObserver *)v73, v76);
        *(_QWORD *)v74 = off_1E33F39E8;
        *(_DWORD *)(v8 + 24) += 2;
        v77 = v112;
        *(_QWORD *)(v74 + 32) = v8;
        *(_QWORD *)(v74 + 40) = v77;
        v78 = v113;
        v112 = 0;
        v113 = 0;
        *(_QWORD *)(v74 + 48) = v78;
        *(_DWORD *)(v72 + 24) += 2;
        *(_QWORD *)(v74 + 56) = v72;
        *(_DWORD *)(v74 + 64) = 1;
        v79 = *(_QWORD *)(v72 + 528);
        if (!v79 || !*(_QWORD *)(v79 + 8))
        {
          __break(0xC471u);
          JUMPOUT(0x195BDE75CLL);
        }
        v114 = v74;
        v80 = v115;
        if (v115)
        {
          v81 = (unsigned int *)((char *)v115 + 8);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 + 1, v81));
          if (*((_BYTE *)v80 + 144))
          {
            do
            {
              v106 = __ldaxr(v81);
              v107 = v106 - 1;
            }
            while (__stlxr(v107, v81));
            if (!v107)
            {
              atomic_store(1u, v81);
              v108 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v108 = off_1E31FE290;
              *((_QWORD *)v108 + 1) = v81;
              v116 = v108;
              WTF::ensureOnMainThread();
              v109 = v116;
              v116 = 0;
              if (v109)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v109 + 8))(v109);
            }
          }
          else
          {
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(*((_QWORD *)v80 + 35) + 16) + 432))(*(_QWORD *)(*((_QWORD *)v80 + 35) + 16), &v114);
            do
            {
              v83 = __ldaxr(v81);
              v84 = v83 - 1;
            }
            while (__stlxr(v84, v81));
            if (!v84)
            {
              atomic_store(1u, v81);
              v102 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v102 = off_1E31FE290;
              *((_QWORD *)v102 + 1) = v81;
              v116 = v102;
              WTF::ensureOnMainThread();
              v103 = v116;
              v116 = 0;
              if (v103)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v103 + 8))(v103);
            }
          }
        }
        *(_DWORD *)(v8 + 24) += 2;
        if (this)
          *((_DWORD *)this + 6) += 2;
        v112 = this;
        WebCore::SubmitEvent::create((uint64_t *)&v112, &v116);
        if (v112)
        {
          if (*((_DWORD *)v112 + 6) == 2)
          {
            if ((*((_WORD *)v112 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v112, v85);
          }
          else
          {
            *((_DWORD *)v112 + 6) -= 2;
          }
        }
        v87 = v116;
        WebCore::EventDispatcher::dispatchEvent((WebCore::EventNames **)v8, v116, v86);
        if ((*((_BYTE *)v87 + 20) & 0x40) != 0)
        {
          v89 = *(unsigned __int8 *)(v8 + 250);
          *(_BYTE *)(v8 + 249) = 0;
          if (!v89)
          {
LABEL_148:
            if (*((_DWORD *)v87 + 4) == 1)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v87 + 8))(v87);
            else
              --*((_DWORD *)v87 + 4);
LABEL_150:
            if (*(_DWORD *)(v8 + 24) == 2)
            {
              if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v8, v88);
            }
            else
            {
              *(_DWORD *)(v8 + 24) -= 2;
            }
            result = v114;
            v114 = 0;
            if (result)
            {
              if (*(_DWORD *)(result + 24) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
              else
                --*(_DWORD *)(result + 24);
            }
            v94 = v115;
            v115 = 0;
            if (v94)
            {
              v95 = (unsigned int *)((char *)v94 + 8);
              do
              {
                v96 = __ldaxr(v95);
                v97 = v96 - 1;
              }
              while (__stlxr(v97, v95));
              if (!v97)
              {
                atomic_store(1u, v95);
                v101 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v101 = off_1E31FE290;
                *((_QWORD *)v101 + 1) = v95;
                v116 = v101;
                WTF::ensureOnMainThread();
                result = (uint64_t)v116;
                v116 = 0;
                if (result)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              }
            }
            goto LABEL_159;
          }
        }
        else
        {
          *(_WORD *)(v8 + 249) = 256;
        }
        v90 = *(_QWORD *)(v8 + 224);
        *(_QWORD *)(v8 + 224) = 0;
        if (v90)
        {
          v91 = *(_QWORD *)(v90 + 8);
          if (v91)
            *(_BYTE *)(v91 + 17) = 1;
          do
          {
            v92 = __ldaxr((unsigned int *)v90);
            v93 = v92 - 1;
          }
          while (__stlxr(v93, (unsigned int *)v90));
          if (!v93)
          {
            atomic_store(1u, (unsigned int *)v90);
            WTF::fastFree((WTF *)v90, v88);
          }
        }
        WebCore::HTMLFormElement::submit(v8, (uint64_t)v13, this == 0, a4, this);
        v87 = v116;
        if (!v116)
          goto LABEL_150;
        goto LABEL_148;
      }
    }
  }
LABEL_55:
  result = WebCore::HTMLFormElement::validateInteractively((WebCore::HTMLFormElement *)v8);
  if ((result & 1) != 0)
    goto LABEL_56;
  *(_BYTE *)(v8 + 249) = 0;
  do
  {
LABEL_159:
    v98 = __ldaxr(v14);
    v99 = v98 - 1;
  }
  while (__stlxr(v99, v14));
  if (!v99)
  {
    atomic_store(1u, v14);
    v100 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v100 = off_1E31FE290;
    *((_QWORD *)v100 + 1) = v14;
    v116 = v100;
    WTF::ensureOnMainThread();
    result = (uint64_t)v116;
    v116 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::HTMLFormElement::validateInteractively(WebCore::HTMLFormElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::ValidationMessage *v6;
  void *v7;
  int v8;
  int v9;
  WebCore::ValidatedFormListedElement **v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WebCore::ValidatedFormListedElement *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::HTMLElement *v21;
  WTF *v22;
  uint64_t v23;

  v2 = *((unsigned int *)this + 47);
  if ((_DWORD)v2)
  {
    v3 = *((_QWORD *)this + 22);
    v4 = 8 * v2;
    do
    {
      v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v3 + 8) + 464))(*(_QWORD *)(*(_QWORD *)v3 + 8));
      if (v5)
      {
        v6 = *(WebCore::ValidationMessage **)(v5 + 40);
        if (v6)
          WebCore::ValidationMessage::requestToHideMessage(v6);
      }
      v3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  v22 = 0;
  v23 = 0;
  v8 = WebCore::HTMLFormElement::checkInvalidControlsAndCollectUnhandled((uint64_t)this, (uint64_t)&v22);
  if ((v8 & 1) == 0)
    goto LABEL_32;
  v9 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v9 + 2;
  if (!HIDWORD(v23))
  {
LABEL_30:
    if (v9)
    {
      *((_DWORD *)this + 6) = v9;
    }
    else if ((*((_WORD *)this + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(this, v7);
    }
    goto LABEL_32;
  }
  v10 = (WebCore::ValidatedFormListedElement **)v22;
  v11 = 8 * HIDWORD(v23);
  v12 = 1;
  do
  {
    v13 = (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)*v10 + 368))(*v10);
    if (!v13)
      goto LABEL_20;
    v14 = v13;
    v15 = *(_DWORD *)(v13 + 24);
    *(_DWORD *)(v13 + 24) = v15 + 2;
    if ((*(_BYTE *)(v13 + 22) & 8) == 0)
      goto LABEL_18;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 552))(v13) & 1) == 0)
    {
      v15 = *(_DWORD *)(v14 + 24) - 2;
LABEL_18:
      if (v15)
      {
        *(_DWORD *)(v14 + 24) = v15;
      }
      else if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v7);
      }
LABEL_20:
      WebCore::ValidatedFormListedElement::reportNonFocusableControlError(*v10);
      goto LABEL_21;
    }
    if ((v12 & 1) != 0)
    {
      v16 = *v10;
      v21 = (WebCore::HTMLElement *)v14;
      WebCore::ValidatedFormListedElement::focusAndShowValidationMessage(v16, &v21);
      v21 = 0;
    }
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v7);
      v12 = 0;
    }
    else
    {
      v12 = 0;
      *(_DWORD *)(v14 + 24) -= 2;
    }
LABEL_21:
    ++v10;
    v11 -= 8;
  }
  while (v11);
  if (this)
  {
    v9 = *((_DWORD *)this + 6) - 2;
    goto LABEL_30;
  }
LABEL_32:
  v17 = v22;
  if (HIDWORD(v23))
  {
    v18 = 8 * HIDWORD(v23);
    do
    {
      v19 = *(_QWORD *)v17;
      *(_QWORD *)v17 = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 96))(v19);
      v17 = (WTF *)((char *)v17 + 8);
      v18 -= 8;
    }
    while (v18);
    v17 = v22;
  }
  if (v17)
  {
    v22 = 0;
    LODWORD(v23) = 0;
    WTF::fastFree(v17, v7);
  }
  return v8 ^ 1u;
}

uint64_t WebCore::HTMLFormElement::checkInvalidControlsAndCollectUnhandled(uint64_t a1, uint64_t a2)
{
  void *v4;
  WTF *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v13;
  int v14;
  unsigned int v15;

  *(_DWORD *)(a1 + 24) += 2;
  WebCore::HTMLFormElement::copyValidatedListedElementsVector((unsigned int *)a1, (uint64_t)&v13);
  v5 = v13;
  if (v15)
  {
    v6 = 0;
    v7 = 8 * v15;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)v5 + 8);
      if (v8)
        v8 = *(_QWORD *)(v8 + 8);
      if (v8 == a1 && (WebCore::ValidatedFormListedElement::checkValidity(*(_BYTE **)v5, a2) & 1) == 0)
      {
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        if (v9)
          v9 = *(_QWORD *)(v9 + 8);
        v6 |= v9 == a1;
      }
      v5 = (WTF *)((char *)v5 + 8);
      v7 -= 8;
    }
    while (v7);
    v5 = v13;
    if (v15)
    {
      v10 = 8 * v15;
      do
      {
        v11 = *(_QWORD *)v5;
        *(_QWORD *)v5 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
        v5 = (WTF *)((char *)v5 + 8);
        v10 -= 8;
      }
      while (v10);
      v5 = v13;
    }
    if (v5)
      goto LABEL_18;
  }
  else
  {
    v6 = 0;
    if (v13)
    {
LABEL_18:
      v13 = 0;
      v14 = 0;
      WTF::fastFree(v5, v4);
    }
  }
  if (a1)
  {
    if (*(_DWORD *)(a1 + 24) == 2)
    {
      if ((*(_WORD *)(a1 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)a1, v4);
    }
    else
    {
      *(_DWORD *)(a1 + 24) -= 2;
    }
  }
  return v6 & 1;
}

uint64_t WebCore::HTMLFormElement::effectiveTarget@<X0>(uint64_t this@<X0>, const WebCore::Event *a2@<X1>, WebCore::HTMLFormControlElement *a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>, double a6@<D1>, float a7@<S2>)
{
  WebCore::HTMLFormControlElement *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;

  v7 = a3;
  v8 = this;
  if (!a3)
  {
    if (!a2)
      goto LABEL_24;
    v7 = (WebCore::HTMLFormControlElement *)*((_QWORD *)a2 + 6);
    if (!v7 || (*((_QWORD *)v7 + 2) & 0x2000000000000) == 0)
      goto LABEL_24;
    if ((*((_WORD *)v7 + 14) & 8) == 0)
      goto LABEL_46;
    while (1)
    {
      this = (*(uint64_t (**)(WebCore::HTMLFormControlElement *))(*(_QWORD *)v7 + 848))(v7);
      if ((this & 1) != 0)
        break;
LABEL_46:
      v7 = (WebCore::HTMLFormControlElement *)*((_QWORD *)v7 + 4);
      if (!v7 || (*((_WORD *)v7 + 14) & 8) == 0)
        goto LABEL_24;
    }
  }
  v10 = *((_DWORD *)v7 + 6);
  *((_DWORD *)v7 + 6) = v10 + 2;
  v11 = *((_QWORD *)v7 + 13);
  if (!v11)
    goto LABEL_18;
  v12 = *(_DWORD *)(v11 + 4);
  if ((v12 & 1) == 0)
  {
    v13 = v11 + 32;
    LODWORD(v14) = v12 >> 5;
    if ((_DWORD)v14)
      goto LABEL_5;
LABEL_18:
    this = MEMORY[0x1E0CBF2F8];
    goto LABEL_19;
  }
  v13 = *(_QWORD *)(v11 + 40);
  LODWORD(v14) = *(_DWORD *)(v11 + 52);
  if (!(_DWORD)v14)
    goto LABEL_18;
LABEL_5:
  v14 = v14;
  this = v13 + 8;
  while (1)
  {
    v15 = *(_QWORD *)(this - 8);
    if (v15 == WebCore::HTMLNames::formtargetAttr
      || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::formtargetAttr + 24)
      && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::formtargetAttr + 32))
    {
      break;
    }
    this += 16;
    if (!--v14)
    {
      this = MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_19:
  v16 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    this = (uint64_t)WebCore::Element::makeTargetBlankIfHasDanglingMarkup((WebCore::Element *)this, a4, a5, a6, a7);
    v10 = *((_DWORD *)v7 + 6) - 2;
  }
  if (v10)
  {
    *((_DWORD *)v7 + 6) = v10;
  }
  else if ((*((_WORD *)v7 + 15) & 0x400) == 0)
  {
    this = (uint64_t)WebCore::Node::removedLastRef(v7, a2);
  }
  if (!v16)
  {
LABEL_24:
    v17 = *(_QWORD *)(v8 + 104);
    if (v17)
    {
      v18 = *(_DWORD *)(v17 + 4);
      if ((v18 & 1) != 0)
      {
        v19 = *(_QWORD *)(v17 + 40);
        LODWORD(v20) = *(_DWORD *)(v17 + 52);
        if ((_DWORD)v20)
        {
LABEL_27:
          v20 = v20;
          v21 = (WTF::StringImpl **)(v19 + 8);
          while (1)
          {
            v22 = (uint64_t)*(v21 - 1);
            if (v22 == WebCore::HTMLNames::targetAttr
              || *(_QWORD *)(v22 + 24) == *(_QWORD *)(WebCore::HTMLNames::targetAttr + 24)
              && *(_QWORD *)(v22 + 32) == *(_QWORD *)(WebCore::HTMLNames::targetAttr + 32))
            {
              goto LABEL_36;
            }
            v21 += 2;
            if (!--v20)
            {
              v21 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
              goto LABEL_36;
            }
          }
        }
      }
      else
      {
        v19 = v17 + 32;
        LODWORD(v20) = v18 >> 5;
        if ((_DWORD)v20)
          goto LABEL_27;
      }
    }
    v21 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_36:
    v23 = *v21;
    if (*v21)
    {
      *(_DWORD *)v23 += 2;
      v26 = v23;
      this = (uint64_t)WebCore::Element::makeTargetBlankIfHasDanglingMarkup((WebCore::Element *)&v26, a4, a5, a6, a7);
      if (*(_DWORD *)v23 == 2)
        return WTF::StringImpl::destroy(v23, v24);
      else
        *(_DWORD *)v23 -= 2;
    }
    else
    {
      v25 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 1176);
      if (v25)
        *v25 += 2;
      *a4 = v25;
    }
  }
  return this;
}

uint64_t WebCore::HTMLFormElement::submit(uint64_t this, uint64_t a2, char a3, int a4, WTF::StringImpl *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  unsigned int *v13;
  unsigned int v14;
  void *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::String *v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::String *v33;
  __n128 v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v46;
  int v47;
  int v48;
  WebCore::FormSubmission *v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  _BOOL4 isBlankTargetFrameName;
  char IsJavaScript;
  WTF::StringImpl *v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  __int16 v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  WTF::String *v69;
  __n128 v70;
  WTF *v71;
  void *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  _DWORD *v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  __int16 v81;
  char v82;
  WebCore::FormSubmission *v83;
  WTF::StringImpl **v84;
  unsigned int v85;
  unsigned int v86;
  BOOL v87;

  if ((*(_BYTE *)(this + 22) & 8) == 0)
    return this;
  v5 = this;
  if (*(_BYTE *)(this + 252))
    return this;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 8) + 528);
  if (!v6)
    return this;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return this;
  v8 = *(_DWORD **)(v7 + 288);
  if (!v8)
  {
    v13 = (unsigned int *)(v7 + 8);
    do
      v73 = __ldaxr(v13);
    while (__stlxr(v73 + 1, v13));
    do
    {
      v74 = __ldaxr(v13);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v13));
    if (v75)
      return this;
    goto LABEL_168;
  }
  v9 = a5;
  ++v8[2];
  v13 = (unsigned int *)(v7 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  if (*(_BYTE *)(this + 249))
  {
    *(_BYTE *)(this + 250) = 1;
    goto LABEL_144;
  }
  *(_BYTE *)(this + 249) = 1;
  *(_BYTE *)(this + 248) = a3;
  if (a2 && !a5)
  {
    WebCore::HTMLFormElement::copyListedElementsVector(this, (uint64_t)&v79);
    v16 = v79;
    if (HIDWORD(v80))
    {
      v77 = v7;
      v78 = v8;
      v17 = 8 * HIDWORD(v80);
      v18 = v17;
      v19 = v79;
      while (1)
      {
        v20 = *(_QWORD *)v19;
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v19 + 112))(*(_QWORD *)v19))
        {
          v21 = *(_QWORD *)(v20 - 112);
          v9 = (WTF::StringImpl *)(v20 - 112);
          if (((*(uint64_t (**)(WTF::StringImpl *))(v21 + 1264))(v9) & 1) != 0)
            break;
        }
        v19 = (WTF::StringImpl *)((char *)v19 + 8);
        v18 -= 8;
        if (!v18)
        {
          v9 = 0;
          break;
        }
      }
      v22 = v16;
      do
      {
        v23 = *(_QWORD *)v22;
        *(_QWORD *)v22 = 0;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 96))(v23);
        v22 = (WTF::StringImpl *)((char *)v22 + 8);
        v17 -= 8;
      }
      while (v17);
      v7 = v77;
      v8 = v78;
    }
    else
    {
      v9 = 0;
    }
    if (v16)
      WTF::fastFree(v16, v15);
  }
  *(_DWORD *)(v5 + 24) += 2;
  WebCore::FormSubmission::create(v5, v9, (__int16 *)(v5 + 112), a2, a3 ^ 1, a4, (uint64_t *)&v83);
  if ((*(_BYTE *)(v5 + 22) & 8) != 0)
  {
    v28 = *(_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v5, (const WebCore::QualifiedName *)&WebCore::HTMLNames::relAttr, v25, v26, v27);
    if (v28)
    {
      v29 = *(unsigned int *)(v28 + 16);
      v30 = *(WTF::StringImpl **)(v28 + 8);
      LODWORD(v28) = *(_DWORD *)(v28 + 4);
      v31 = (v29 >> 2) & 1;
    }
    else
    {
      v30 = 0;
      v31 = 1;
    }
    v79 = v30;
    v80 = v28 | (unint64_t)(v31 << 32);
    v81 = 32;
    v82 = 0;
    v84 = &v79;
    v85 = 0;
    v87 = (_DWORD)v28 == 0;
    WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v84);
    v35 = v80;
    v36 = v85;
    if (v85 != (_DWORD)v80 || (v37 = 0, v38 = 0, v39 = 0, !v87))
    {
      v39 = 0;
      v38 = 0;
      v37 = 0;
      do
      {
        v40 = *((unsigned int *)v84 + 2);
        if (v40 <= v36)
          goto LABEL_44;
        LODWORD(v41) = v86;
        if (v40 - v36 <= v86)
        {
          if (!v36)
          {
            v44 = (uint64_t)*v84;
            v41 = (uint64_t)v84[1];
            goto LABEL_41;
          }
          LODWORD(v41) = v40 - v36;
        }
        v42 = v36;
        v41 = v41;
        v43 = (unsigned int *)(v40 - v36);
        if (*((_BYTE *)v84 + 12))
        {
          if ((unint64_t)v43 < v41)
            goto LABEL_162;
          v44 = (uint64_t)*v84 + v42;
          v41 = v41 | 0x100000000;
        }
        else
        {
          if ((unint64_t)v43 < v41)
          {
LABEL_162:
            __break(1u);
            goto LABEL_163;
          }
          v44 = (uint64_t)*v84 + 2 * v42;
        }
LABEL_41:
        switch((_DWORD)v41)
        {
          case 8:
            if ((v41 & 0xFF00000000) != 0)
            {
              if ((*(_BYTE *)v44 & 0xDF) == 0x4E
                && (*(_BYTE *)(v44 + 1) & 0xDF) == 0x4F
                && (*(_BYTE *)(v44 + 2) & 0xDF) == 0x4F
                && (*(_BYTE *)(v44 + 3) & 0xDF) == 0x50
                && (*(_BYTE *)(v44 + 4) & 0xDF) == 0x45
                && (*(_BYTE *)(v44 + 5) & 0xDF) == 0x4E
                && (*(_BYTE *)(v44 + 6) & 0xDF) == 0x45)
              {
                v46 = *(unsigned __int8 *)(v44 + 7);
                goto LABEL_59;
              }
            }
            else if ((*(_WORD *)v44 & 0xFFDF) == 0x4E
                   && (*(_WORD *)(v44 + 2) & 0xFFDF) == 0x4F
                   && (*(_WORD *)(v44 + 4) & 0xFFDF) == 0x4F
                   && (*(_WORD *)(v44 + 6) & 0xFFDF) == 0x50
                   && (*(_WORD *)(v44 + 8) & 0xFFDF) == 0x45
                   && (*(_WORD *)(v44 + 10) & 0xFFDF) == 0x4E
                   && (*(_WORD *)(v44 + 12) & 0xFFDF) == 0x45)
            {
              v46 = *(unsigned __int16 *)(v44 + 14);
LABEL_59:
              if ((v46 & 0xFFFFFFDF) == 0x52)
                v37 = 1;
            }
            break;
          case 0xA:
            if ((v41 & 0xFF00000000) != 0)
            {
              if ((*(_BYTE *)v44 & 0xDF) == 0x4E
                && (*(_BYTE *)(v44 + 1) & 0xDF) == 0x4F
                && (*(_BYTE *)(v44 + 2) & 0xDF) == 0x52
                && (*(_BYTE *)(v44 + 3) & 0xDF) == 0x45
                && (*(_BYTE *)(v44 + 4) & 0xDF) == 0x46
                && (*(_BYTE *)(v44 + 5) & 0xDF) == 0x45
                && (*(_BYTE *)(v44 + 6) & 0xDF) == 0x52
                && (*(_BYTE *)(v44 + 7) & 0xDF) == 0x52
                && (*(_BYTE *)(v44 + 8) & 0xDF) == 0x45)
              {
                v47 = *(unsigned __int8 *)(v44 + 9);
                goto LABEL_72;
              }
            }
            else if ((*(_WORD *)v44 & 0xFFDF) == 0x4E
                   && (*(_WORD *)(v44 + 2) & 0xFFDF) == 0x4F
                   && (*(_WORD *)(v44 + 4) & 0xFFDF) == 0x52
                   && (*(_WORD *)(v44 + 6) & 0xFFDF) == 0x45
                   && (*(_WORD *)(v44 + 8) & 0xFFDF) == 0x46
                   && (*(_WORD *)(v44 + 10) & 0xFFDF) == 0x45
                   && (*(_WORD *)(v44 + 12) & 0xFFDF) == 0x52
                   && (*(_WORD *)(v44 + 14) & 0xFFDF) == 0x52
                   && (*(_WORD *)(v44 + 16) & 0xFFDF) == 0x45)
            {
              v47 = *(unsigned __int16 *)(v44 + 18);
LABEL_72:
              if ((v47 & 0xFFFFFFDF) == 0x52)
                v38 = 1;
            }
            break;
          case 6:
            if ((v41 & 0xFF00000000) != 0)
            {
              if ((*(_BYTE *)v44 & 0xDF) == 0x4F
                && (*(_BYTE *)(v44 + 1) & 0xDF) == 0x50
                && (*(_BYTE *)(v44 + 2) & 0xDF) == 0x45
                && (*(_BYTE *)(v44 + 3) & 0xDF) == 0x4E
                && (*(_BYTE *)(v44 + 4) & 0xDF) == 0x45)
              {
                v48 = *(unsigned __int8 *)(v44 + 5);
                goto LABEL_81;
              }
            }
            else if ((*(_WORD *)v44 & 0xFFDF) == 0x4F
                   && (*(_WORD *)(v44 + 2) & 0xFFDF) == 0x50
                   && (*(_WORD *)(v44 + 4) & 0xFFDF) == 0x45
                   && (*(_WORD *)(v44 + 6) & 0xFFDF) == 0x4E
                   && (*(_WORD *)(v44 + 8) & 0xFFDF) == 0x45)
            {
              v48 = *(unsigned __int16 *)(v44 + 10);
LABEL_81:
              if ((v48 & 0xFFFFFFDF) == 0x52)
                v39 = 1;
            }
            break;
        }
LABEL_44:
        WTF::StringView::SplitResult::Iterator::operator++();
        v36 = v85;
      }
      while (v85 != v35 || !v87);
    }
    v49 = v83;
    if (((v38 | v37) & 1) != 0)
    {
      *((_BYTE *)v83 + 144) = 0;
      if ((v38 & 1) != 0)
        *((_BYTE *)v49 + 145) = 1;
    }
    else if ((v39 & 1) == 0)
    {
      v50 = *((_QWORD *)v83 + 8);
      if (v50)
      {
        v51 = *(unsigned int *)(v50 + 16);
        v52 = *(unsigned __int8 **)(v50 + 8);
        LODWORD(v50) = *(_DWORD *)(v50 + 4);
        v53 = (v51 >> 2) & 1;
      }
      else
      {
        v52 = 0;
        v53 = 1;
      }
      isBlankTargetFrameName = WebCore::isBlankTargetFrameName(v52, v50 | (unint64_t)(v53 << 32));
      v49 = v83;
      if (isBlankTargetFrameName)
      {
        WebCore::FormSubmission::requestURL((uint64_t)v83, (uint64_t)&v79);
        IsJavaScript = WTF::URL::protocolIsJavaScript((WTF::URL *)&v79);
        v56 = v79;
        v79 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
            WTF::StringImpl::destroy(v56, v24);
          else
            *(_DWORD *)v56 -= 2;
        }
        v49 = v83;
        if ((IsJavaScript & 1) == 0)
          *((_BYTE *)v83 + 144) = 0;
      }
    }
    v57 = *((_QWORD *)v49 + 1);
    if (v57)
      goto LABEL_173;
    v57 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v57 = 1;
    *(_QWORD *)(v57 + 8) = v49;
    v58 = (unsigned int *)*((_QWORD *)v49 + 1);
    *((_QWORD *)v49 + 1) = v57;
    if (!v58)
      goto LABEL_173;
    do
    {
      v59 = __ldaxr(v58);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v58));
    if (!v60)
    {
      atomic_store(1u, v58);
      WTF::fastFree((WTF *)v58, v24);
    }
    v57 = *((_QWORD *)v49 + 1);
    if (v57)
    {
LABEL_173:
      do
        v61 = __ldaxr((unsigned int *)v57);
      while (__stlxr(v61 + 1, (unsigned int *)v57));
    }
    v43 = *(unsigned int **)(v5 + 224);
    *(_QWORD *)(v5 + 224) = v57;
    if (v43)
    {
      do
      {
        v62 = __ldaxr(v43);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v43));
      if (!v63)
      {
LABEL_163:
        atomic_store(1u, v43);
        WTF::fastFree((WTF *)v43, v24);
      }
    }
    if (*((_BYTE *)v83 + 16) == 2)
    {
      v64 = *(_QWORD *)(v5 + 32);
      if (v64)
      {
        v65 = *(_WORD *)(v64 + 28);
        if ((v65 & 8) != 0)
        {
          while ((v65 & 0x10) == 0
               || *(_QWORD *)(*(_QWORD *)(v64 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::dialogTag + 24))
          {
            v64 = *(_QWORD *)(v64 + 32);
            if (v64)
            {
              v65 = *(_WORD *)(v64 + 28);
              if ((v65 & 8) != 0)
                continue;
            }
            goto LABEL_138;
          }
          *(_DWORD *)(v64 + 24) += 2;
          if (WebCore::Element::hasAttribute((WebCore::Element *)v64, (const WebCore::QualifiedName *)&WebCore::HTMLNames::openAttr, v32, v33, v34))
          {
            WebCore::HTMLDialogElement::close((WebCore::HTMLDialogElement *)v64, (WebCore::FormSubmission *)((char *)v83 + 136), v68, v69, v70);
          }
          if (*(_DWORD *)(v64 + 24) == 2)
          {
            if ((*(_WORD *)(v64 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v64, v24);
          }
          else
          {
            *(_DWORD *)(v64 + 24) -= 2;
          }
        }
      }
    }
    else
    {
      WebCore::FrameLoader::submitForm(*(WTF::URL **)(v7 + 280), (uint64_t *)&v83);
    }
LABEL_138:
    *(_WORD *)(v5 + 249) = 0;
  }
  this = (uint64_t)v83;
  v83 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 1)
    {
      WebCore::FormSubmission::~FormSubmission((WebCore::FormSubmission *)this, v24);
      this = WTF::fastFree(v71, v72);
    }
    else
    {
      --*(_DWORD *)this;
    }
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v5, v24);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  do
  {
LABEL_144:
    v66 = __ldaxr(v13);
    v67 = v66 - 1;
  }
  while (__stlxr(v67, v13));
  if (v67)
  {
LABEL_146:
    if (v8[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    --v8[2];
    return this;
  }
LABEL_168:
  atomic_store(1u, v13);
  v76 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v76 = off_1E31FE290;
  *((_QWORD *)v76 + 1) = v13;
  v79 = v76;
  WTF::ensureOnMainThread();
  this = (uint64_t)v79;
  v79 = 0;
  if (this)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  if (v8)
    goto LABEL_146;
  return this;
}

uint64_t WebCore::HTMLFormElement::submit(WebCore::HTMLFormElement *this)
{
  return WebCore::HTMLFormElement::submit((uint64_t)this, 0, 1, 1, 0);
}

unsigned int *WebCore::HTMLFormElement::requestSubmit@<X0>(WebCore::HTMLFormElement *this@<X0>, WebCore::HTMLElement *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void *v7;
  double v8;
  double v9;
  float v10;
  WebCore::HTMLElement *v11;
  WebCore::HTMLFormElement *v12;
  unsigned int *result;
  void *v14;

  v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  WebCore::Document::updateLayout(v6, 2u, 0);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (!a2)
    goto LABEL_13;
  if ((*(unsigned int (**)(WebCore::HTMLElement *))(*(_QWORD *)a2 + 848))(a2))
    v11 = a2;
  else
    v11 = 0;
  if (!v11
    || (*((_DWORD *)v11 + 6) += 2,
        ((*(uint64_t (**)(WebCore::HTMLElement *))(*(_QWORD *)v11 + 1288))(v11) & 1) == 0))
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 33;
    *(_BYTE *)(a3 + 16) = 1;
    a2 = v11;
    if (!v11)
      return result;
    goto LABEL_16;
  }
  v12 = (WebCore::HTMLFormElement *)*((_QWORD *)v11 + 15);
  if (v12)
    v12 = (WebCore::HTMLFormElement *)*((_QWORD *)v12 + 1);
  if (v12 == this)
  {
LABEL_13:
    result = (unsigned int *)WebCore::HTMLFormElement::submitIfPossible((uint64_t)this, 0, a2, 0, v8, v9, v10);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (!a2)
      return result;
  }
  else
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 5;
    *(_BYTE *)(a3 + 16) = 1;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(a2, v14);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLFormElement::reset(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::Event *v11;
  uint64_t v12;
  _DWORD *v13;
  void *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  WTF *v22;
  int v23;
  unsigned int v24;

  if (!*(_BYTE *)(this + 251))
  {
    v1 = this;
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 8) + 528);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v4 = (unsigned int *)(v3 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        *(_DWORD *)(this + 24) += 2;
        v6 = *(_BYTE *)(this + 251);
        *(_BYTE *)(this + 251) = 1;
        v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
          v8 = WebCore::threadGlobalDataSlow((WebCore *)this);
        v9 = *(_QWORD *)(v8 + 40);
        if (!v9)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
          v9 = *(_QWORD *)(v8 + 40);
        }
        v10 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
        *(_DWORD *)(v10 + 16) = 1;
        *(_QWORD *)v10 = off_1E33A4B48;
        *(_QWORD *)(v10 + 8) = 0;
        *(_DWORD *)(v10 + 20) = *(_DWORD *)(v10 + 20) & 0xFFC00000 | 0x1E8206 | (*(_QWORD *)(v9 + 1688) != 0);
        v13 = *(_DWORD **)(v9 + 1688);
        if (v13)
          *v13 += 2;
        *(_QWORD *)(v10 + 24) = v13;
        *(_QWORD *)(v10 + 32) = 0;
        *(_QWORD *)(v10 + 40) = 0;
        *(_QWORD *)(v10 + 48) = 0;
        *(_QWORD *)(v10 + 56) = v12;
        *(_QWORD *)(v10 + 64) = 0;
        this = WebCore::EventDispatcher::dispatchEvent((WebCore::EventNames **)v1, (WebCore::Node *)v10, v11);
        if ((*(_BYTE *)(v10 + 20) & 0x40) == 0)
        {
          this = (uint64_t)WebCore::HTMLFormElement::copyValidatedListedElementsVector((unsigned int *)v1, (uint64_t)&v22);
          v15 = v22;
          if (v24)
          {
            v16 = 8 * v24;
            do
            {
              v17 = *(_QWORD *)v15;
              v15 = (WTF *)((char *)v15 + 8);
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 280))(v17);
              v16 -= 8;
            }
            while (v16);
            v15 = v22;
            if (v24)
            {
              v18 = 8 * v24;
              do
              {
                this = *(_QWORD *)v15;
                *(_QWORD *)v15 = 0;
                if (this)
                  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 96))(this);
                v15 = (WTF *)((char *)v15 + 8);
                v18 -= 8;
              }
              while (v18);
              v15 = v22;
            }
          }
          if (v15)
          {
            v22 = 0;
            v23 = 0;
            this = WTF::fastFree(v15, v14);
          }
        }
        if (*(_DWORD *)(v10 + 16) == 1)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        else
          --*(_DWORD *)(v10 + 16);
        *(_BYTE *)(v1 + 251) = v6;
        if (*(_DWORD *)(v1 + 24) == 2)
        {
          if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
            this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v1, v14);
        }
        else
        {
          *(_DWORD *)(v1 + 24) -= 2;
        }
        do
        {
          v19 = __ldaxr(v4);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v4));
        if (!v20)
        {
          atomic_store(1u, v4);
          v21 = (WTF *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v21 = off_1E31FE290;
          *((_QWORD *)v21 + 1) = v4;
          v22 = v21;
          WTF::ensureOnMainThread();
          this = (uint64_t)v22;
          v22 = 0;
          if (this)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        }
      }
    }
  }
  return this;
}

unsigned int *WebCore::HTMLFormElement::copyValidatedListedElementsVector@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = this[47];
  if (!(_DWORD)v3)
    goto LABEL_12;
  if (!(v3 >> 29))
  {
    v4 = (uint64_t)this;
    v5 = WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(a2 + 8) = v3;
    *(_QWORD *)a2 = v5;
    v6 = *(unsigned int *)(v4 + 188);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)(v4 + 176);
      v8 = 8 * v6;
      do
      {
        v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v7 + 8) + 464))(*(_QWORD *)(*(_QWORD *)v7 + 8));
        if (v9)
        {
          v10 = v9;
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
          v18 = v10;
          v11 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v11 == *(_DWORD *)(a2 + 8))
          {
            v15 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v11 + 1, (unint64_t)&v18);
            v11 = *(unsigned int *)(a2 + 12);
            v16 = *(char **)a2;
            v17 = *(_QWORD *)v15;
            *(_QWORD *)v15 = 0;
            *(_QWORD *)&v16[8 * v11] = v17;
          }
          else
          {
            v12 = *(char **)a2;
            v18 = 0;
            *(_QWORD *)&v12[8 * v11] = v10;
          }
          *(_DWORD *)(a2 + 12) = v11 + 1;
          v13 = v18;
          v18 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13);
        }
        v7 += 8;
        v8 -= 8;
      }
      while (v8);
      v14 = *(unsigned int *)(a2 + 12);
      return WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a2, v14);
    }
LABEL_12:
    v14 = 0;
    return WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a2, v14);
  }
  __break(0xC471u);
  return this;
}

void WebCore::HTMLFormElement::attributeChanged(WebCore::HTMLFormElement *this, WTF::StringImpl *a2, WTF::AtomString *a3, const WTF::String **a4, int a5, __n128 a6)
{
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  WebCore::Document *v15;
  WebCore **v16;
  const WTF::URL *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  BOOL shouldAutocomplete;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23[5];

  v7 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v7 <= 0x1C2)
  {
    switch(v7)
    {
      case 0x118u:
        WebCore::FormSubmission::Attributes::setAcceptCharset((WebCore::HTMLFormElement *)((char *)this + 112), *a4);
        return;
      case 0x11Bu:
        WebCore::FormSubmission::Attributes::parseAction((WebCore::HTMLFormElement *)((char *)this + 112), (const WTF::String *)a4);
        v9 = (_QWORD *)((char *)this + 120);
        v8 = *((_QWORD *)this + 15);
        if (v8)
        {
          if (*(_DWORD *)(v8 + 4))
          {
            v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
            if (v10)
            {
              v11 = *(_QWORD *)(v10 + 8);
              if (v11)
              {
                v12 = (unsigned int *)(v11 + 8);
                do
                  v13 = __ldaxr(v12);
                while (__stlxr(v13 + 1, v12));
                v14 = WebCore::FrameTree::top((WebCore::FrameTree *)(v11 + 48));
                if (!*(_BYTE *)(v14 + 144))
                {
                  v15 = *(WebCore::Document **)(*((_QWORD *)this + 5) + 8);
                  v16 = (WebCore **)v14;
                  WebCore::Document::completeURL(v15, v9, (uint64_t)v15 + 848, 0, (WTF::URL *)v23);
                  WebCore::MixedContentChecker::checkFormForMixedContent(v16, (WebCore::LocalFrame *)v23, v17);
                  v19 = v23[0];
                  v23[0] = 0;
                  if (v19)
                  {
                    if (*(_DWORD *)v19 == 2)
                      WTF::StringImpl::destroy(v19, v18);
                    else
                      *(_DWORD *)v19 -= 2;
                  }
                }
                WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
              }
            }
          }
        }
        return;
      case 0x167u:
        shouldAutocomplete = WebCore::HTMLFormElement::shouldAutocomplete(this);
        v21 = *(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1840;
        if (shouldAutocomplete)
          WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>(v21, this);
        else
          WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(v21, this, (uint64_t)v23);
        return;
    }
LABEL_9:
    WebCore::HTMLElement::attributeChanged((uint64_t)this, a2, a3, a4, a5, a6);
    return;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) > 0x31Bu)
  {
    if (v7 == 796)
    {
      v22 = *((_QWORD *)this + 29);
      if (v22)
      {
        if (!*(_BYTE *)(v22 + 16))
          *(_BYTE *)(v22 + 17) = 1;
      }
      return;
    }
    if (v7 == 876)
    {
      WebCore::FormSubmission::Attributes::setTarget((WebCore::HTMLFormElement *)((char *)this + 112), *a4);
      return;
    }
    goto LABEL_9;
  }
  if (v7 != 451)
  {
    if (v7 == 584)
    {
      WebCore::FormSubmission::Attributes::updateMethodType((WebCore::HTMLFormElement *)((char *)this + 112), (const WTF::String *)a4);
      return;
    }
    goto LABEL_9;
  }
  WebCore::FormSubmission::Attributes::updateEncodingType((WebCore::HTMLFormElement *)((char *)this + 112), (const WTF::String *)a4);
}

WTF::StringImpl *WebCore::FormSubmission::Attributes::setTarget(WebCore::FormSubmission::Attributes *this, const WTF::AtomString *a2)
{
  WTF::StringImpl *result;

  if (a2)
    *(_DWORD *)a2 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = a2;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::FormSubmission::Attributes::setAcceptCharset(WebCore::FormSubmission::Attributes *this, const WTF::String *a2)
{
  WTF::StringImpl *result;

  if (a2)
    *(_DWORD *)a2 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = a2;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLFormElement::formElementIndexWithFormAttribute(WebCore::HTMLFormElement *this, WebCore::Element *a2, uint64_t a3, int a4)
{
  unsigned int v4;
  uint64_t v5;
  int v8;
  unsigned int v9;

  v4 = *((_DWORD *)this + 47);
  if (!v4)
    return 0;
  v5 = a3;
  if ((_DWORD)a3 != a4)
  {
    v8 = a4 - 1;
    if (a4 - 1 != (_DWORD)a3)
    {
      do
      {
        v9 = v5 + ((v8 - v5) >> 1);
        if (*((_DWORD *)this + 47) <= v9)
          goto LABEL_16;
        if ((WebCore::Node::compareDocumentPosition(a2, *(WebCore::Node **)(*(_QWORD *)(*((_QWORD *)this + 22) + 8 * v9) + 8)) & 4) != 0)v8 = v5 + ((v8 - v5) >> 1);
        else
          LODWORD(v5) = v9 + 1;
      }
      while ((_DWORD)v5 != v8);
      v4 = *((_DWORD *)this + 47);
    }
    if (v4 <= v5)
    {
LABEL_16:
      __break(0xC471u);
      JUMPOUT(0x195BE0004);
    }
    if ((WebCore::Node::compareDocumentPosition(a2, *(WebCore::Node **)(*(_QWORD *)(*((_QWORD *)this + 22) + 8 * v5) + 8)) & 4) != 0)return v5;
    else
      return (v5 + 1);
  }
  return v5;
}

uint64_t WebCore::HTMLFormElement::formElementIndex(WebCore::HTMLFormElement *this, WebCore::FormListedElement *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  WebCore::HTMLFormElement *v12;
  WebCore::HTMLFormElement *v14;
  __int16 i;
  WebCore::HTMLFormElement *v16;
  BOOL v17;
  WebCore::HTMLFormElement *v18;
  uint64_t v19;
  WebCore::HTMLFormElement *v21;
  __int16 v23;
  WebCore::HTMLFormElement *v24;
  BOOL v25;
  WebCore::HTMLFormElement *v26;
  _BOOL4 v27;
  BOOL v28;
  char v29;
  int32x2_t v30;
  WebCore::HTMLFormElement *v31;
  WebCore::HTMLFormElement *v32;

  v3 = (*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)a2 + 16))(a2);
  v4 = v3;
  v5 = *(_QWORD *)(v3 + 104);
  if (!v5)
    goto LABEL_9;
  v6 = *(_DWORD *)(v5 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = *(uint64_t **)(v5 + 40);
    LODWORD(v8) = *(_DWORD *)(v5 + 52);
  }
  else
  {
    v7 = (uint64_t *)(v5 + 32);
    LODWORD(v8) = v6 >> 5;
  }
  if (!(_DWORD)v8)
    goto LABEL_9;
  v8 = v8;
  while (1)
  {
    v9 = *v7;
    if (*v7 == WebCore::HTMLNames::formAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v8)
      goto LABEL_9;
  }
  if ((*(_BYTE *)(v3 + 22) & 8) == 0)
    goto LABEL_9;
  v29 = WebCore::Node::compareDocumentPosition(this, (WebCore::Node *)v3);
  if ((v29 & 2) == 0)
  {
    if ((v29 & 0x14) == 4)
      return WebCore::HTMLFormElement::formElementIndexWithFormAttribute(this, (WebCore::Element *)v4, *((unsigned int *)this + 61), *((_DWORD *)this + 47));
LABEL_9:
    v10 = *((unsigned int *)this + 61);
    *((_DWORD *)this + 61) = v10 + 1;
    v11 = *((_WORD *)this + 14);
    if ((v11 & 0xF000) == 0x9000)
    {
      if (**(WebCore::HTMLFormElement ***)(v4 + 40) != this
        || (*(_WORD *)(v4 + 28) & 0xF000) == 0x9000
        || (*(_BYTE *)(v4 + 22) & 8) == 0)
      {
        return v10;
      }
    }
    else
    {
      if ((v11 & 4) == 0
        || !*((_QWORD *)this + 10)
        || ((*(unsigned __int8 *)(v4 + 22) ^ *((unsigned __int8 *)this + 22)) & 8) != 0)
      {
        return v10;
      }
      v12 = (WebCore::HTMLFormElement *)v4;
      do
        v12 = (WebCore::HTMLFormElement *)*((_QWORD *)v12 + 4);
      while (v12 != this && v12 != 0);
      if (!v12)
        return v10;
    }
    v14 = *(WebCore::HTMLFormElement **)(v4 + 80);
    if (v14)
      goto LABEL_21;
    if ((WebCore::HTMLFormElement *)v4 != this)
    {
      v14 = *(WebCore::HTMLFormElement **)(v4 + 56);
      if (v14)
      {
LABEL_21:
        for (i = *((_WORD *)v14 + 14); (i & 0x10) == 0; v14 = v16)
        {
          if ((i & 4) == 0 || (v16 = (WebCore::HTMLFormElement *)*((_QWORD *)v14 + 10)) == 0)
          {
            if (v14 == this)
              return v10;
            while (1)
            {
              v16 = (WebCore::HTMLFormElement *)*((_QWORD *)v14 + 7);
              if (v16)
                break;
              v14 = (WebCore::HTMLFormElement *)*((_QWORD *)v14 + 4);
              if (v14)
                v17 = v14 == this;
              else
                v17 = 1;
              if (v17)
                return v10;
            }
          }
          i = *((_WORD *)v16 + 14);
        }
        v18 = (WebCore::HTMLFormElement *)*((_QWORD *)this + 10);
        if (v18)
        {
          v19 = *((unsigned int *)this + 60);
          v23 = *((_WORD *)v18 + 14);
          if ((v23 & 0x10) != 0)
          {
            v24 = (WebCore::HTMLFormElement *)*((_QWORD *)this + 10);
          }
          else
          {
            do
            {
              if ((v23 & 4) == 0 || (v24 = (WebCore::HTMLFormElement *)*((_QWORD *)v18 + 10)) == 0)
              {
                if (v18 == this)
                  return v10;
                while (1)
                {
                  v24 = (WebCore::HTMLFormElement *)*((_QWORD *)v18 + 7);
                  if (v24)
                    break;
                  v18 = (WebCore::HTMLFormElement *)*((_QWORD *)v18 + 4);
                  if (v18)
                    v25 = v18 == this;
                  else
                    v25 = 1;
                  if (v25)
                    return v10;
                }
              }
              v23 = *((_WORD *)v24 + 14);
              v18 = v24;
            }
            while ((v23 & 0x10) == 0);
          }
          v31 = this;
          v32 = v24;
          if ((WebCore::HTMLFormElement *)v4 == v24)
          {
            v27 = 0;
          }
          else
          {
            do
            {
              if ((*(unsigned int (**)(WebCore::HTMLFormElement *))(*(_QWORD *)v24 + 832))(v24))
              {
                v26 = *(WebCore::HTMLFormElement **)((*(uint64_t (**)(WebCore::HTMLFormElement *))(*(_QWORD *)v24 + 456))(v24)
                                                   + 8);
                if (v26)
                  v26 = (WebCore::HTMLFormElement *)*((_QWORD *)v26 + 1);
                if (v26 == this)
                  v19 = (v19 + 1);
                else
                  v19 = v19;
              }
              WebCore::ElementDescendantIterator<WebCore::HTMLElement>::operator++(&v31);
              v24 = v32;
              v27 = v32 == 0;
              if (v32)
                v28 = v32 == (WebCore::HTMLFormElement *)v4;
              else
                v28 = 1;
            }
            while (!v28);
          }
          if (!v27)
            return v19;
        }
        return v10;
      }
      v21 = (WebCore::HTMLFormElement *)v4;
      while (1)
      {
        v21 = (WebCore::HTMLFormElement *)*((_QWORD *)v21 + 4);
        if (!v21 || v21 == this)
          break;
        v14 = (WebCore::HTMLFormElement *)*((_QWORD *)v21 + 7);
        if (v14)
          goto LABEL_21;
      }
    }
    return v10;
  }
  v30 = *(int32x2_t *)((char *)this + 240);
  *((int32x2_t *)this + 30) = vadd_s32(v30, (int32x2_t)0x100000001);
  return WebCore::HTMLFormElement::formElementIndexWithFormAttribute(this, (WebCore::Element *)v4, 0, v30.i32[0]);
}

_QWORD *WebCore::ElementDescendantIterator<WebCore::HTMLElement>::operator++(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  __int16 v4;
  _QWORD *v5;
  BOOL v6;
  BOOL v7;

  v1 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v3 = (_QWORD *)v2[10];
  if (!v3)
  {
    if (v2 == v1)
    {
LABEL_22:
      v5 = 0;
      goto LABEL_23;
    }
    while (1)
    {
      v3 = (_QWORD *)v2[7];
      if (v3)
        break;
      v2 = (_QWORD *)v2[4];
      if (v2)
        v7 = v2 == v1;
      else
        v7 = 1;
      if (v7)
        goto LABEL_22;
    }
  }
  v4 = *((_WORD *)v3 + 14);
  if ((v4 & 0x10) != 0)
  {
    v5 = v3;
  }
  else
  {
    do
    {
      if ((v4 & 4) == 0 || (v5 = (_QWORD *)v3[10]) == 0)
      {
        if (v3 == v1)
          goto LABEL_22;
        while (1)
        {
          v5 = (_QWORD *)v3[7];
          if (v5)
            break;
          v3 = (_QWORD *)v3[4];
          if (v3)
            v6 = v3 == v1;
          else
            v6 = 1;
          if (v6)
            goto LABEL_22;
        }
      }
      v4 = *((_WORD *)v5 + 14);
      v3 = v5;
    }
    while ((v4 & 0x10) == 0);
  }
LABEL_23:
  result[1] = v5;
  return result;
}

WebCore::Node *WebCore::HTMLFormElement::registerFormListedElement(WebCore::HTMLFormElement *this, WebCore::FormListedElement *a2)
{
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  WebCore::Node *result;
  uint64_t v8;
  uint64_t v9;
  WebCore::Node *ElementSibling;
  WebCore::Element *v11;

  v4 = (unsigned int *)((char *)this + 176);
  v5 = WebCore::HTMLFormElement::formElementIndex(this, a2);
  v6 = (*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)a2 + 16))(a2);
  WTF::Vector<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::HTMLElement&>(v4, (void *)v5, v6);
  result = (WebCore::Node *)(*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)a2 + 112))(a2);
  if ((_DWORD)result)
  {
    result = (WebCore::Node *)(*(uint64_t (**)(char *))(*((_QWORD *)a2 - 14) + 1264))((char *)a2 - 112);
    if ((_DWORD)result)
    {
      v8 = *((_QWORD *)this + 21);
      if (v8 && *(_QWORD *)(v8 + 8))
      {
        return (WebCore::Node *)WebCore::HTMLFormElement::resetDefaultButton(this);
      }
      else
      {
        result = (WebCore::Node *)WebCore::Node::invalidateStyle((uint64_t)a2 - 112, 4u, 0);
        if ((*((_BYTE *)a2 - 41) & 1) != 0)
        {
          v9 = *((_QWORD *)a2 - 10);
          if (!v9 || (*(_WORD *)(v9 + 28) & 8) == 0 || (*(_BYTE *)(v9 + 70) & 4) == 0)
          {
            ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)a2 - 112);
            return WebCore::invalidateForSiblingCombinators(ElementSibling, v11);
          }
        }
      }
    }
  }
  return result;
}

unsigned int *WTF::Vector<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::HTMLElement&>(unsigned int *result, void *a2, uint64_t a3)
{
  unsigned int *v5;
  unint64_t v6;
  WTF *v7;
  unint64_t v8;
  unsigned int **v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;

  v5 = result;
  v6 = result[3];
  v7 = *(WTF **)result;
  if ((_DWORD)v6 == result[2])
  {
    v11 = v6 + (v6 >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 <= v6 + 1)
      v13 = v6 + 1;
    else
      v13 = v12;
    if (v13 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v14 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v13));
    v5[2] = v13;
    *(_QWORD *)v5 = v14;
    if ((_DWORD)v6)
    {
      v22 = 8 * v6;
      v23 = (uint64_t *)v7;
      v24 = (uint64_t *)v7;
      do
      {
        v25 = *v23;
        *v24++ = 0;
        *v14++ = v25;
        WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(v23, a2);
        v23 = v24;
        v22 -= 8;
      }
      while (v22);
      v14 = *(uint64_t **)v5;
    }
    if (v7)
    {
      if (v14 == (uint64_t *)v7)
      {
        *(_QWORD *)v5 = 0;
        v5[2] = 0;
      }
      WTF::fastFree(v7, a2);
      v7 = *(WTF **)v5;
    }
    else
    {
      v7 = (WTF *)v14;
    }
  }
  v8 = v5[3];
  v9 = (unsigned int **)((char *)v7 + 8 * (_QWORD)a2);
  if ((void *)v8 != a2)
  {
    v15 = (char *)v7 + 8 * v8;
    v16 = 8 * (_QWORD)a2;
    v17 = (uint64_t *)((char *)v7 + 8 * (_QWORD)a2 + ((v15 - (char *)v9) & 0xFFFFFFFFFFFFFFF8));
    v18 = v16 - 8 * v8;
    v19 = (uint64_t *)(v15 - 8);
    v20 = (uint64_t *)(v15 - 8);
    do
    {
      v21 = *v19;
      *v20-- = 0;
      *v17-- = v21;
      WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(v19, a2);
      v19 = v20;
      v18 += 8;
    }
    while (v18);
  }
  result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a3);
  if (result)
  {
    do
      v10 = __ldaxr(result);
    while (__stlxr(v10 + 1, result));
  }
  *v9 = result;
  ++v5[3];
  return result;
}

_QWORD *WebCore::HTMLFormElement::resetDefaultButton(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WebCore::Node *ElementSibling;
  WebCore::Element *v14;
  uint64_t v15;
  WebCore::Node *v16;
  WebCore::Element *v17;

  v1 = this[21];
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = this;
    ++WebCore::ScriptDisallowedScope::s_count;
    this[21] = 0;
    this = (_QWORD *)WebCore::HTMLFormElement::defaultButton((WebCore::HTMLFormElement *)this);
    v4 = v2[21];
    if (v4)
      v5 = *(_QWORD *)(v4 + 8);
    else
      v5 = 0;
    v6 = *(_QWORD *)(v1 + 8);
    if (v5 != v6)
    {
      if (v6)
      {
        this = (_QWORD *)WebCore::Node::invalidateStyle(*(_QWORD *)(v1 + 8), 4u, 0);
        if ((*(_BYTE *)(v6 + 71) & 1) != 0)
        {
          v12 = *(_QWORD *)(v6 + 32);
          if (!v12 || (*(_WORD *)(v12 + 28) & 8) == 0 || (*(_BYTE *)(v12 + 70) & 4) == 0)
          {
            ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v6);
            this = WebCore::invalidateForSiblingCombinators(ElementSibling, v14);
          }
        }
        v4 = v2[21];
      }
      if (v4)
      {
        v7 = *(_QWORD *)(v4 + 8);
        if (v7)
        {
          this = (_QWORD *)WebCore::Node::invalidateStyle(*(_QWORD *)(v4 + 8), 4u, 0);
          if ((*(_BYTE *)(v7 + 71) & 1) != 0)
          {
            v15 = *(_QWORD *)(v7 + 32);
            if (!v15 || (*(_WORD *)(v15 + 28) & 8) == 0 || (*(_BYTE *)(v15 + 70) & 4) == 0)
            {
              v16 = (WebCore::Node *)WebCore::Node::nextElementSibling(v7);
              this = WebCore::invalidateForSiblingCombinators(v16, v17);
            }
          }
        }
      }
    }
    do
    {
      v8 = __ldaxr((unsigned int *)v1);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v1));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v1);
      v10 = *(unsigned int *)(v1 + 28);
      if ((_DWORD)v10)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v1 + 16), (WTF::StringImpl *)(*(_QWORD *)(v1 + 16) + 32 * v10));
      v11 = *(WTF **)(v1 + 16);
      if (v11)
      {
        *(_QWORD *)(v1 + 16) = 0;
        *(_DWORD *)(v1 + 24) = 0;
        WTF::fastFree(v11, v3);
      }
      this = (_QWORD *)WTF::fastFree((WTF *)v1, v3);
    }
    --WebCore::ScriptDisallowedScope::s_count;
  }
  return this;
}

_QWORD *WebCore::HTMLFormElement::unregisterFormListedElement(WebCore::HTMLFormElement *this, WebCore::FormListedElement *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *result;
  _QWORD **v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = (*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)a2 + 16))(a2);
  v5 = *((unsigned int *)this + 47);
  if ((_DWORD)v5)
  {
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(*((_QWORD *)this + 22) + 8 * v6);
      if (v7)
      {
        if (*(_QWORD *)(v7 + 8) == v4)
          break;
      }
      if (v5 == ++v6)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    LODWORD(v6) = -1;
  }
  v8 = *((_DWORD *)this + 60);
  if (v8 > v6)
    *((_DWORD *)this + 60) = v8 - 1;
  v9 = *((_DWORD *)this + 61);
  if (v9 > v6)
    *((_DWORD *)this + 61) = v9 - 1;
  WebCore::HTMLFormElement::removeFromPastNamesMap(this, a2);
  v11 = (uint64_t *)(*((_QWORD *)this + 22) + 8 * v6);
  v12 = *v11;
  *v11 = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v20 = *(unsigned int *)(v12 + 28);
      if ((_DWORD)v20)
      {
        v23 = v12;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v20));
        v12 = v23;
      }
      v21 = *(WTF **)(v12 + 16);
      if (v21)
      {
        *(_QWORD *)(v12 + 16) = 0;
        *(_DWORD *)(v12 + 24) = 0;
        v22 = v12;
        WTF::fastFree(v21, v10);
        v12 = v22;
      }
      WTF::fastFree((WTF *)v12, v10);
    }
  }
  result = WTF::VectorTypeOperations<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::moveOverlapping(v11 + 1, (uint64_t *)(*((_QWORD *)this + 22) + 8 * *((unsigned int *)this + 47)), v11);
  --*((_DWORD *)this + 47);
  v16 = (_QWORD **)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (v16)
  {
    result = *v16;
    if (*v16)
      result = (_QWORD *)WebCore::NodeListsNodeData::invalidateCaches((uint64_t)result);
  }
  v17 = *((_QWORD *)this + 21);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if (v18)
      v19 = v18 + 112 == (_QWORD)a2;
    else
      v19 = 0;
    if (v19)
      return WebCore::HTMLFormElement::resetDefaultButton(this);
  }
  return result;
}

void WebCore::HTMLFormElement::removeFromPastNamesMap(WebCore::HTMLFormElement *this, WebCore::FormAssociatedElement *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  double v28;
  double v29;
  double v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;

  v3 = (uint64_t *)((char *)this + 152);
  v2 = *((_QWORD *)this + 19);
  if (!v2)
    return;
  if (!*(_DWORD *)(v2 - 12))
    return;
  v4 = (*(uint64_t (**)(WebCore::FormAssociatedElement *))(*(_QWORD *)a2 + 16))(a2);
  v6 = *v3;
  if (!*v3)
    return;
  v7 = *(_DWORD *)(v6 - 4);
  if (!v7)
    return;
  v8 = 0;
  do
  {
    v9 = --v7;
    v10 = v6 + 16 * v7;
    v11 = *(WTF::StringImpl **)v10;
    if ((unint64_t)(*(_QWORD *)v10 + 1) >= 2)
    {
      v12 = *(_QWORD *)(v10 + 8);
      if (v12)
      {
        if (*(_QWORD *)(v12 + 8) == v4)
        {
          *(_QWORD *)v10 = -1;
          if (*(_DWORD *)v11 == 2)
          {
            v15 = v4;
            v16 = (uint64_t *)(v6 + 16 * v7 + 8);
            WTF::StringImpl::destroy(v11, v5);
            v4 = v15;
            v12 = *v16;
            *v16 = 0;
            if (!v12)
            {
LABEL_14:
              ++v8;
              continue;
            }
          }
          else
          {
            *(_DWORD *)v11 -= 2;
            *(_QWORD *)(v6 + 16 * v7 + 8) = 0;
          }
          do
          {
            v13 = __ldaxr((unsigned int *)v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, (unsigned int *)v12));
          if (!v14)
          {
            v32 = v4;
            atomic_store(1u, (unsigned int *)v12);
            v33 = (WTF *)v12;
            v17 = *(unsigned int *)(v12 + 28);
            if ((_DWORD)v17)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v17));
            v18 = (WTF *)*((_QWORD *)v33 + 2);
            if (v18)
            {
              *((_QWORD *)v33 + 2) = 0;
              *((_DWORD *)v33 + 6) = 0;
              WTF::fastFree(v18, v5);
            }
            WTF::fastFree(v33, v5);
            v4 = v32;
            v9 = v7;
          }
          goto LABEL_14;
        }
      }
    }
  }
  while (v9);
  v19 = *v3;
  if (v8)
  {
    *(_DWORD *)(v19 - 16) += v8;
    v20 = *v3;
    if (*v3)
      v21 = *(_DWORD *)(v20 - 12);
    else
      v21 = 0;
    *(_DWORD *)(v20 - 12) = v21 - v8;
    v19 = *v3;
  }
  if (v19)
  {
    v22 = *(_DWORD *)(v19 - 4);
    v23 = *(unsigned int *)(v19 - 12);
    if (v22 >= 9 && 6 * (int)v23 < v22)
    {
      v25 = (v23 - 1) | ((v23 - 1) >> 1) | ((((_DWORD)v23 - 1) | ((v23 - 1) >> 1)) >> 2);
      v26 = v25 | (v25 >> 4) | ((v25 | (v25 >> 4)) >> 8);
      v27 = (v26 | HIWORD(v26)) + 1;
      if (v27 > 0x400)
      {
        if (v27 <= 2 * v23)
        {
LABEL_35:
          LODWORD(v27) = 2 * v27;
          if (v27 <= 0x400)
            goto LABEL_36;
        }
        v28 = (double)v23;
        v29 = (double)v27;
        v30 = 0.416666667;
      }
      else
      {
        if (3 * v27 <= 4 * v23)
          goto LABEL_35;
LABEL_36:
        v28 = (double)v23;
        v29 = (double)v27;
        v30 = 0.604166667;
      }
      if (v29 * v30 <= v28)
        LODWORD(v27) = 2 * v27;
      if (v27 <= 8)
        v31 = 8;
      else
        v31 = v27;
      WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v3, v31);
    }
  }
}

uint64_t WebCore::HTMLFormElement::addInvalidFormControl(WebCore::HTMLFormElement *this, const WebCore::HTMLElement *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;
  void *v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  char v12;
  uint64_t *v13[5];
  uint64_t **v14;
  uint64_t v15;

  v8[0] = 0;
  v12 = 0;
  v5 = (uint64_t *)((char *)this + 208);
  v4 = *((_QWORD *)this + 26);
  if (!v4
    || !*(_DWORD *)(v4 - 12)
    || (WTF::WeakHashSet<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t **)&v14, v5), WTF::WeakHashSet<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v13, v5), (uint64_t *)v15 == v13[1]))
  {
    LODWORD(v13[0]) = 19464270;
    v14 = v13;
    v15 = 2;
    std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,std::initializer_list<std::pair<WebCore::CSSSelectorPseudoClass,BOOL>> &,void>((uint64_t)v8, this, (unsigned __int8 **)&v14);
  }
  result = WTF::WeakHashSet<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::HTMLElement>((uint64_t)v5, a2, (uint64_t)&v14);
  if (v12)
  {
    if (v8[0])
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v9, &v11);
    if (v11)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v11, v7);
    result = v10;
    if (v10)
      return WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v10, v7);
  }
  return result;
}

uint64_t WebCore::HTMLFormElement::removeInvalidFormControlIfNeeded(uint64_t this, const WebCore::HTMLElement *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  void *v16;
  int v17;
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  char v22;
  unsigned __int8 *v23[2];

  ++*(_DWORD *)(this + 216);
  v2 = *((_QWORD *)a2 + 2);
  v3 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v4 = (void *)this;
      v5 = this + 208;
      v6 = *(_QWORD *)(this + 208);
      if (v6)
      {
        v8 = *(_DWORD *)(v6 - 8);
        v9 = (v3 + ~(v2 << 32)) ^ ((unint64_t)(v3 + ~(v2 << 32)) >> 22);
        v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        v12 = v8 & ((v11 >> 31) ^ v11);
        for (i = 1; ; ++i)
        {
          v14 = *(_QWORD *)(v6 + 8 * v12);
          if (!v14)
            break;
          if (v14 != -1 && v14 == v3)
          {
            v18[0] = 0;
            v22 = 0;
            if (WTF::WeakHashSet<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(this + 208) == 1)
            {
              v17 = 2687310;
              v23[0] = (unsigned __int8 *)&v17;
              v23[1] = (unsigned __int8 *)2;
              std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,std::initializer_list<std::pair<WebCore::CSSSelectorPseudoClass,BOOL>> &,void>((uint64_t)v18, v4, v23);
            }
            this = WTF::WeakHashSet<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::HTMLElement>(v5, (uint64_t)a2);
            if (v22)
            {
              if (v18[0])
                WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v19, &v21);
              if (v21)
                WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v21, v16);
              this = v20;
              if (v20)
                return WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v20, v16);
            }
            return this;
          }
          v12 = (v12 + i) & v8;
        }
      }
    }
  }
  return this;
}

BOOL WebCore::HTMLFormElement::isURLAttribute(uint64_t a1, _QWORD *a2)
{
  return *a2 == WebCore::HTMLNames::actionAttr;
}

WTF::StringImpl *WebCore::HTMLFormElement::action@<X0>(WebCore::HTMLFormElement *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;

  result = (WTF::StringImpl *)WebCore::Element::attributeWithoutSynchronization((uint64_t)this, &WebCore::HTMLNames::actionAttr);
  if (*(_QWORD *)result && *(_DWORD *)(*(_QWORD *)result + 4))
  {
    WebCore::Document::completeURL(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), result, *(_QWORD *)(*((_QWORD *)this + 5) + 8) + 848, 0, (WTF::URL *)&v8);
    result = v8;
    if (v8)
    {
      v7 = *(_DWORD *)v8;
      *(_DWORD *)v8 += 2;
      *a2 = result;
      v8 = 0;
      if (v7)
        *(_DWORD *)result = v7;
      else
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else
    {
      *a2 = 0;
    }
  }
  else
  {
    v5 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 736);
    if (v5)
      *(_DWORD *)v5 += 2;
    *a2 = v5;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFormElement::setAction(WebCore::HTMLFormElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::actionAttr, a2, 0);
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::actionAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::actionAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::actionAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::actionAttr, a2, 0);
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
}

WTF::StringImpl *WebCore::HTMLFormElement::setEnctype(WebCore::HTMLFormElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::enctypeAttr, a2, 0);
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::enctypeAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::enctypeAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::enctypeAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::enctypeAttr, a2, 0);
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
}

_QWORD *WebCore::HTMLFormElement::method@<X0>(WebCore::HTMLFormElement *this@<X0>, objc_method *a2@<X1>, _QWORD *a3@<X8>)
{
  const char *v4;
  uint64_t v5;

  v4 = WebCore::FormSubmission::Attributes::methodString((WebCore::FormSubmission::Attributes *)*((unsigned __int8 *)this + 112), a2);
  return WTF::String::String(a3, (uint64_t)v4, v5);
}

WTF::StringImpl *WebCore::HTMLFormElement::setMethod(WebCore::HTMLFormElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::methodAttr, a2, 0);
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::methodAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::methodAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::methodAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::methodAttr, a2, 0);
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
}

uint64_t WebCore::HTMLFormElement::relList(WebCore::HTMLFormElement *this)
{
  uint64_t v1;
  _QWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;

  v1 = *((_QWORD *)this + 29);
  if (!v1)
  {
    v1 = WTF::fastMalloc((WTF *)0x38);
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E33BE9C8;
    *(_QWORD *)v1 = this;
    *(_QWORD *)(v1 + 8) = &WebCore::HTMLNames::relAttr;
    *(_WORD *)(v1 + 16) = 256;
    *(_QWORD *)(v1 + 24) = v1 + 40;
    *(_QWORD *)(v1 + 32) = 1;
    *(_QWORD *)(v1 + 48) = v3;
    v5 = *((_QWORD *)this + 29);
    *((_QWORD *)this + 29) = v1;
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 48);
      *(_QWORD *)(v5 + 48) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = *(unsigned int *)(v5 + 36);
      if ((_DWORD)v7)
      {
        v8 = *(WTF::StringImpl ***)(v5 + 24);
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v4);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      v11 = *(WTF **)(v5 + 24);
      if ((WTF *)(v5 + 40) != v11 && v11 != 0)
      {
        *(_QWORD *)(v5 + 24) = 0;
        *(_DWORD *)(v5 + 32) = 0;
        WTF::fastFree(v11, v4);
      }
      WTF::fastFree((WTF *)v5, v4);
      return *((_QWORD *)this + 29);
    }
  }
  return v1;
}

uint64_t WebCore::HTMLFormElement::target@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(this + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (_DWORD **)(v4 + 8);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 1);
    if (v7 == WebCore::HTMLNames::targetAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::targetAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::targetAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (v8)
    *v8 += 2;
  *a2 = v8;
  return this;
}

uint64_t WebCore::HTMLFormElement::defaultButton(WebCore::HTMLFormElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *((_QWORD *)this + 21);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 8)) == 0)
  {
    v4 = *((unsigned int *)this + 47);
    if ((_DWORD)v4)
    {
      v5 = *((_QWORD *)this + 22);
      v6 = 8 * v4;
      while (1)
      {
        v3 = *(_QWORD *)v5 ? *(_QWORD *)(*(_QWORD *)v5 + 8) : 0;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 848))(v3)
          && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 1264))(v3))
        {
          break;
        }
        v5 += 8;
        v6 -= 8;
        if (!v6)
          return 0;
      }
      v7 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v3);
      v9 = v7;
      if (v7)
      {
        do
          v10 = __ldaxr(v7);
        while (__stlxr(v10 + 1, v7));
      }
      v11 = *((_QWORD *)this + 21);
      *((_QWORD *)this + 21) = v9;
      if (v11)
      {
        do
        {
          v12 = __ldaxr((unsigned int *)v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, (unsigned int *)v11));
        if (!v13)
        {
          atomic_store(1u, (unsigned int *)v11);
          v15 = *(unsigned int *)(v11 + 28);
          if ((_DWORD)v15)
          {
            v18 = v11;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v15));
            v11 = v18;
          }
          v16 = *(WTF **)(v11 + 16);
          if (v16)
          {
            *(_QWORD *)(v11 + 16) = 0;
            *(_DWORD *)(v11 + 24) = 0;
            v17 = v11;
            WTF::fastFree(v16, v8);
            v11 = v17;
          }
          WTF::fastFree((WTF *)v11, v8);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t WebCore::HTMLFormElement::checkValidity(WebCore::HTMLFormElement *this)
{
  void *v1;
  int v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v2 = WebCore::HTMLFormElement::checkInvalidControlsAndCollectUnhandled((uint64_t)this, (uint64_t)&v8);
  if (HIDWORD(v9))
  {
    v3 = v8;
    v4 = 8 * HIDWORD(v9);
    do
    {
      v5 = *(_QWORD *)v3;
      *(_QWORD *)v3 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
      v3 = (WTF *)((char *)v3 + 8);
      v4 -= 8;
    }
    while (v4);
  }
  v6 = v8;
  if (v8)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    WTF::fastFree(v6, v1);
  }
  return v2 ^ 1u;
}

unsigned int **WTF::HashMap<WTF::AtomString,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::get(unsigned int **result, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  if (a2)
  {
    v3 = 0;
    for (i = *(_DWORD *)(a3 + 16) >> 8; ; i = v3 + v5)
    {
      v5 = i & *(_DWORD *)(a2 - 8);
      v6 = *(_QWORD *)(a2 + 16 * v5);
      if (v6 != -1)
      {
        if (!v6)
          goto LABEL_7;
        if (v6 == a3)
          break;
      }
      ++v3;
    }
    v7 = *(unsigned int **)(a2 + 16 * v5 + 8);
    if (v7)
    {
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  else
  {
LABEL_7:
    v7 = 0;
  }
  *result = v7;
  return result;
}

void WebCore::HTMLFormElement::addToPastNamesMap(WebCore::HTMLFormElement *this, WebCore::FormAssociatedElement *a2, const WTF::AtomString *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  int v11;
  int i;
  uint64_t v13;
  const WTF::AtomString **v14;
  const WTF::AtomString *v15;
  unsigned int *v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;

  if (!a3 || !*((_DWORD *)a3 + 1))
    return;
  *(_DWORD *)a3 += 2;
  v5 = (*(uint64_t (**)(WebCore::FormAssociatedElement *))(*(_QWORD *)a2 + 16))(a2);
  v8 = *((_QWORD *)this + 19);
  v6 = (uint64_t *)((char *)this + 152);
  v7 = v8;
  if (v8
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v6, 8u), (v7 = *v6) != 0))
  {
    v9 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
  v11 = *((_DWORD *)a3 + 4) >> 8;
  for (i = 1; ; ++i)
  {
    v13 = v11 & v9;
    v14 = (const WTF::AtomString **)(v7 + 16 * v13);
    v15 = *v14;
    if (*v14 != (const WTF::AtomString *)-1)
      break;
    v10 = (_QWORD *)(v7 + 16 * v13);
LABEL_13:
    v11 = i + v13;
  }
  if (!v15)
  {
    if (v10)
    {
      *v10 = 0;
      v10[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      *v10 = a3;
    }
    else
    {
      *v14 = a3;
      v10 = (_QWORD *)(v7 + 16 * v13);
    }
    v23 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v5);
    if (v23)
    {
      do
        v25 = __ldaxr(v23);
      while (__stlxr(v25 + 1, v23));
    }
    v26 = v10[1];
    v10[1] = v23;
    if (v26)
    {
      do
      {
        v27 = __ldaxr((unsigned int *)v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, (unsigned int *)v26));
      if (!v28)
      {
        atomic_store(1u, (unsigned int *)v26);
        v36 = *(unsigned int *)(v26 + 28);
        if ((_DWORD)v36)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v26 + 16), (WTF::StringImpl *)(*(_QWORD *)(v26 + 16) + 32 * v36));
        v37 = *(WTF **)(v26 + 16);
        if (v37)
        {
          *(_QWORD *)(v26 + 16) = 0;
          *(_DWORD *)(v26 + 24) = 0;
          WTF::fastFree(v37, v24);
        }
        WTF::fastFree((WTF *)v26, v24);
      }
    }
    v29 = *v6;
    if (*v6)
      v30 = *(_DWORD *)(v29 - 12) + 1;
    else
      v30 = 1;
    *(_DWORD *)(v29 - 12) = v30;
    v31 = *v6;
    if (*v6)
      v32 = *(_DWORD *)(v31 - 12);
    else
      v32 = 0;
    v33 = (*(_DWORD *)(v31 - 16) + v32);
    v34 = *(unsigned int *)(v31 - 4);
    if (v34 > 0x400)
    {
      if (v34 > 2 * v33)
        return;
    }
    else
    {
      if (3 * v34 > 4 * v33)
        return;
      if (!(_DWORD)v34)
      {
        v35 = 8;
        goto LABEL_39;
      }
    }
    v35 = (_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34));
LABEL_39:
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v6, v35);
    return;
  }
  if (v15 != a3)
    goto LABEL_13;
  v16 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v5);
  if (v16)
  {
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 + 1, v16));
  }
  v19 = v7 + 16 * v13;
  v20 = *(_QWORD *)(v19 + 8);
  *(_QWORD *)(v19 + 8) = v16;
  if (v20)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v20));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v20);
      v38 = *(unsigned int *)(v20 + 28);
      if ((_DWORD)v38)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v20 + 16), (WTF::StringImpl *)(*(_QWORD *)(v20 + 16) + 32 * v38));
      v39 = *(WTF **)(v20 + 16);
      if (v39)
      {
        *(_QWORD *)(v20 + 16) = 0;
        *(_DWORD *)(v20 + 24) = 0;
        WTF::fastFree(v39, v17);
      }
      WTF::fastFree((WTF *)v20, v17);
    }
  }
  if (*(_DWORD *)a3 == 2)
    WTF::StringImpl::destroy(a3, (WTF::StringImpl *)v17);
  else
    *(_DWORD *)a3 -= 2;
}

BOOL WebCore::HTMLFormElement::matchesValidPseudoClass(WebCore::HTMLFormElement *this)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)*((_QWORD *)this + 26);
  if (!v1 || !*((_DWORD *)v1 - 3))
    return 1;
  v3 = *((unsigned int *)v1 - 1);
  v4 = &v1[v3];
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while ((unint64_t)(*v1 + 1) <= 1)
    {
      ++v1;
      v5 -= 8;
      if (!v5)
        goto LABEL_15;
    }
  }
  if (v1 != v4)
  {
    v6 = *v1;
LABEL_11:
    if (*(_QWORD *)(v6 + 8))
      return v1 == v4;
    while (++v1 != v4)
    {
      v6 = *v1;
      if ((unint64_t)(*v1 + 1) > 1)
      {
        if (v1 != v4)
          goto LABEL_11;
        break;
      }
    }
  }
LABEL_15:
  v1 = v4;
  return v1 == v4;
}

BOOL WebCore::HTMLFormElement::matchesInvalidPseudoClass(WebCore::HTMLFormElement *this)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)*((_QWORD *)this + 26);
  if (!v1 || !*((_DWORD *)v1 - 3))
    return 0;
  v3 = *((unsigned int *)v1 - 1);
  v4 = &v1[v3];
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while ((unint64_t)(*v1 + 1) <= 1)
    {
      ++v1;
      v5 -= 8;
      if (!v5)
        goto LABEL_15;
    }
  }
  if (v1 != v4)
  {
    v6 = *v1;
LABEL_11:
    if (*(_QWORD *)(v6 + 8))
      return v1 != v4;
    while (++v1 != v4)
    {
      v6 = *v1;
      if ((unint64_t)(*v1 + 1) > 1)
      {
        if (v1 != v4)
          goto LABEL_11;
        break;
      }
    }
  }
LABEL_15:
  v1 = v4;
  return v1 != v4;
}

uint64_t WebCore::HTMLFormElement::isSupportedPropertyName(WebCore::HTMLFormElement *this, const WTF::AtomString *a2)
{
  uint64_t isSupportedPropertyName;
  _DWORD *v5;
  _QWORD *v6;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    return 0;
  WebCore::HTMLFormElement::elements(this, a2, (uint64_t *)&v6);
  v5 = v6;
  isSupportedPropertyName = WebCore::HTMLCollection::isSupportedPropertyName(v6, (uint64_t *)a2);
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[4];
  }
  return isSupportedPropertyName;
}

uint64_t WebCore::HTMLFormElement::resumeFromDocumentSuspension(WebCore::HTMLFormElement *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *((_DWORD *)this + 6) += 2;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33BEA78;
  v3[1] = this;
  v7 = *(_OWORD *)(v2 + 416);
  v8 = *(_OWORD *)(v2 + 432);
  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v4 = &off_1E33A3A20;
  *(_OWORD *)(v4 + 16) = v7;
  *(_OWORD *)(v4 + 32) = v8;
  *(_QWORD *)(v4 + 48) = v3;
  *(_BYTE *)(v4 + 56) = 0;
  v6 = v4;
  WTF::callOnMainThread();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t *WebCore::HTMLFormElement::didMoveToNewDocument(WebCore::HTMLFormElement *this, WebCore::Document *a2, WebCore::Document *a3)
{
  WTF::String *v6;
  _BYTE v8[24];

  if (!WebCore::HTMLFormElement::shouldAutocomplete(this))
  {
    WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>((uint64_t)a2 + 1840, this);
    WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>((uint64_t)a3 + 1840, this, (uint64_t)v8);
  }
  return WebCore::Element::didMoveToNewDocument(this, a2, a3, v6);
}

const WebCore::ValidatedFormListedElement *WebCore::HTMLFormElement::finishParsingChildren(WebCore::HTMLFormElement *this)
{
  uint64_t v2;
  WebCore::FormController *v3;
  WTF::StringImpl *v5;
  WebCore::FormController *v6;
  WTF *v7;
  void *v8;

  WebCore::Element::finishParsingChildren(this);
  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v3 = *(WebCore::FormController **)(v2 + 1352);
  if (!v3)
  {
    v3 = (WebCore::FormController *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    v6 = *(WebCore::FormController **)(v2 + 1352);
    *(_QWORD *)(v2 + 1352) = v3;
    if (v6)
    {
      WebCore::FormController::~FormController(v6, v5);
      WTF::fastFree(v7, v8);
      v3 = *(WebCore::FormController **)(v2 + 1352);
    }
  }
  return WebCore::FormController::restoreControlStateIn(v3, this);
}

uint64_t WebCore::HTMLFormElement::findClosestFormAncestor(WebCore::HTMLFormElement *this, const WebCore::Element *a2)
{
  uint64_t result;
  __int16 v3;

  result = *((_QWORD *)this + 4);
  if (result)
  {
    v3 = *(_WORD *)(result + 28);
    if ((v3 & 8) != 0)
    {
      while ((v3 & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
      {
        result = *(_QWORD *)(result + 32);
        if (!result)
          break;
        v3 = *(_WORD *)(result + 28);
        if ((v3 & 8) == 0)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFormElement::setAutocomplete(WebCore::HTMLFormElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::autocompleteAttr, a2, 0);
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::autocompleteAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::autocompleteAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::autocompleteAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::autocompleteAttr, a2, 0);
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
}

uint64_t *WebCore::HTMLFormElement::autocomplete(WebCore::HTMLFormElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *result;
  uint64_t v9;
  int v10;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    goto LABEL_12;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_4;
LABEL_12:
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    goto LABEL_12;
LABEL_4:
  v4 = v4;
  v5 = (uint64_t *)(v3 + 8);
  while (1)
  {
    v6 = *(v5 - 1);
    if (v6 == WebCore::HTMLNames::autocompleteAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::autocompleteAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::autocompleteAttr + 32))
    {
      break;
    }
    v5 += 2;
    if (!--v4)
    {
      v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v7 = *v5;
  if (!*v5 || *(_DWORD *)(v7 + 4) != 3)
    return &WebCore::onAtomData;
  v9 = *(_QWORD *)(v7 + 8);
  if ((*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v9 & 0xDF) == 0x4F)
    {
      result = &WebCore::onAtomData;
      if ((*(_BYTE *)(v9 + 1) & 0xDF) != 0x46)
        return result;
      v10 = *(unsigned __int8 *)(v9 + 2);
      goto LABEL_20;
    }
    return &WebCore::onAtomData;
  }
  if ((*(_WORD *)v9 & 0xFFDF) != 0x4F)
    return &WebCore::onAtomData;
  result = &WebCore::onAtomData;
  if ((*(_WORD *)(v9 + 2) & 0xFFDF) != 0x46)
    return result;
  v10 = *(unsigned __int16 *)(v9 + 4);
LABEL_20:
  if ((v10 & 0xFFFFFFDF) == 0x46)
    return &WebCore::offAtomData;
  return result;
}

unsigned int *WebCore::HTMLFormElement::constructEntryList@<X0>(unsigned int *this@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v5;
  _QWORD *v8;
  uint64_t v9;
  WebCore *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  int v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl **v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WebCore::Node *v41;
  int v42;
  WebCore **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::Event *v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::ScriptExecutionContext *v57;
  __int128 v58;
  WTF *v59;
  _QWORD *v60;
  uint64_t *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF *v65;
  unsigned int v66;

  v5 = a5;
  if (*((_BYTE *)this + 252))
  {
    *a5 = 0;
    return this;
  }
  v8 = a2;
  v9 = (uint64_t)this;
  *((_BYTE *)this + 252) = 1;
  if (*a2)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 1280))(*a2, 1);
  v10 = (WebCore *)WebCore::HTMLFormElement::copyListedElementsVector(v9, (uint64_t)&v65);
  v12 = v65;
  if (v66)
  {
    v60 = v8;
    v61 = v5;
    v13 = 8 * v66;
    v59 = v65;
    if (a4)
    {
      v14 = (WTF *)((char *)v65 + 8 * v66);
      while (1)
      {
        v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v12 + 16))(*(_QWORD *)v12);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 960))(v15) & 1) == 0)
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v12 + 136))(*(_QWORD *)v12, *a3);
        if (*(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
          goto LABEL_51;
        v16 = *(_DWORD *)(v15 + 24) + 2;
        *(_DWORD *)(v15 + 24) = v16;
        v17 = *(_DWORD **)(v15 + 240);
        v18 = v17[3];
        if ((v18 & 0x2A8C20) != 0)
          break;
LABEL_49:
        if (v16 == 2)
        {
          if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v15);
        }
        else
        {
          *(_DWORD *)(v15 + 24) = v16 - 2;
        }
LABEL_51:
        v12 = (WTF *)((char *)v12 + 8);
        if (v12 == v14)
          goto LABEL_69;
      }
      v19 = (WTF::StringImpl **)(v15 + 208);
      if (!*(_QWORD *)(v15 + 208))
        v19 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
      if (v18 == 64)
      {
        WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v17, &v62);
        goto LABEL_34;
      }
      v20 = *(WTF::StringImpl **)(v15 + 216);
      if (v20)
      {
        *(_DWORD *)v20 += 2;
        v62 = v20;
        goto LABEL_34;
      }
      v21 = *(_QWORD *)(v15 + 104);
      if (!v21)
        goto LABEL_28;
      v22 = *(unsigned int *)(v21 + 4);
      if ((v22 & 1) != 0)
      {
        v23 = *(_QWORD *)(v21 + 40);
        v24 = *(unsigned int *)(v21 + 52);
        if (!v24)
        {
LABEL_28:
          v25 = (_QWORD *)MEMORY[0x1E0CBF2F8];
          goto LABEL_29;
        }
      }
      else
      {
        v23 = v21 + 32;
        v24 = v22 >> 5;
        if (!(v22 >> 5))
          goto LABEL_28;
      }
      v25 = (_QWORD *)(v23 + 8);
      while (1)
      {
        v26 = *(v25 - 1);
        if (v26 == WebCore::HTMLNames::valueAttr
          || *(_QWORD *)(v26 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
          && *(_QWORD *)(v26 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
        {
          break;
        }
        v25 += 2;
        if (!--v24)
          goto LABEL_28;
      }
LABEL_29:
      if (*v25)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v17 + 296))(&v62);
        if (v62)
          goto LABEL_34;
        v62 = 0;
        v17 = *(_DWORD **)(v15 + 240);
      }
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v17 + 64))(&v62);
LABEL_34:
      v27 = *v19;
      if (*v19)
        *(_DWORD *)v27 += 2;
      v28 = v62;
      v62 = 0;
      v63 = v27;
      v64 = v28;
      v29 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v29 == *(_DWORD *)(a4 + 8))
      {
        v30 = (_QWORD *)WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v29 + 1, (unint64_t)&v63);
        v29 = *(unsigned int *)(a4 + 12);
        v31 = (_QWORD *)(*(_QWORD *)a4 + 16 * v29);
        v32 = *v30;
        *v30 = 0;
        v33 = (WTF::StringImpl **)(v30 + 1);
        *v31 = v32;
        v34 = (WTF::StringImpl **)(v31 + 1);
      }
      else
      {
        v35 = (WTF::StringImpl **)(*(_QWORD *)a4 + 16 * v29);
        v63 = 0;
        *v35 = v27;
        v34 = v35 + 1;
        v33 = &v64;
      }
      v36 = *v33;
      *v33 = 0;
      *v34 = v36;
      *(_DWORD *)(a4 + 12) = v29 + 1;
      v37 = v64;
      v64 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v11);
        else
          *(_DWORD *)v37 -= 2;
      }
      v38 = v63;
      v63 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v11);
        else
          *(_DWORD *)v38 -= 2;
      }
      v39 = v62;
      v62 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v11);
        else
          *(_DWORD *)v39 -= 2;
      }
      (*(void (**)(_QWORD))(**(_QWORD **)(v15 + 240) + 632))(*(_QWORD *)(v15 + 240));
      v16 = *(_DWORD *)(v15 + 24);
      goto LABEL_49;
    }
    v40 = 8 * v66;
    do
    {
      v41 = (WebCore::Node *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v12 + 16))(*(_QWORD *)v12);
      if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v41 + 960))(v41) & 1) == 0)
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v12 + 136))(*(_QWORD *)v12, *a3);
      if (*(_QWORD *)(*((_QWORD *)v41 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        v42 = *((_DWORD *)v41 + 6);
        *((_DWORD *)v41 + 6) = v42 + 2;
        if (v42)
        {
          *((_DWORD *)v41 + 6) = v42;
        }
        else if ((*((_WORD *)v41 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v41);
        }
      }
      v12 = (WTF *)((char *)v12 + 8);
      v40 -= 8;
    }
    while (v40);
LABEL_69:
    v12 = v59;
    v8 = v60;
    v43 = (WebCore **)v59;
    v5 = v61;
    do
    {
      v10 = *v43;
      *v43 = 0;
      if (v10)
        v10 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v10 + 96))(v10);
      ++v43;
      v13 -= 8;
    }
    while (v13);
  }
  if (v12)
    v10 = (WebCore *)WTF::fastFree(v12, v11);
  v44 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v44 || (v45 = *(_QWORD *)(v44 + 96)) == 0)
    v45 = WebCore::threadGlobalDataSlow(v10);
  v46 = *(_QWORD *)(v45 + 40);
  if (!v46)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v45);
    v46 = *(_QWORD *)(v45 + 40);
  }
  v47 = *a3;
  ++*(_DWORD *)(*a3 + 16);
  v48 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v48);
  *(_QWORD *)(v48 + 8) = 0;
  *(_DWORD *)(v48 + 16) = 1;
  *(_DWORD *)(v48 + 20) = *(_DWORD *)(v48 + 20) & 0xFFC00000 | 0x218202 | (*(_QWORD *)(v46 + 840) != 0);
  v51 = *(_DWORD **)(v46 + 840);
  if (v51)
    *v51 += 2;
  *(_QWORD *)(v48 + 24) = v51;
  *(_QWORD *)(v48 + 32) = 0;
  *(_QWORD *)(v48 + 40) = 0;
  *(_QWORD *)(v48 + 48) = 0;
  *(_QWORD *)(v48 + 56) = v50;
  *(_QWORD *)v48 = off_1E33A4E58;
  *(_QWORD *)(v48 + 64) = 0;
  *(_QWORD *)(v48 + 72) = v47;
  WebCore::EventDispatcher::dispatchEvent((WebCore::EventNames **)v9, (WebCore::Node *)v48, v49);
  if (*(_DWORD *)(v48 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  else
    --*(_DWORD *)(v48 + 16);
  if (*v8)
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v8 + 1280))(*v8, 0);
  v52 = *a3;
  v53 = WTF::fastMalloc((WTF *)0x48);
  v54 = v53;
  v55 = *(_QWORD *)(v52 + 8);
  if (v55)
  {
    v56 = *(_QWORD *)(v55 + 8);
    if (v56)
      v57 = (WebCore::ScriptExecutionContext *)(v56 - 96);
    else
      v57 = 0;
  }
  else
  {
    v57 = 0;
  }
  *(_DWORD *)(v53 + 16) = 1;
  *(_QWORD *)v53 = &off_1E33A18C0;
  *(_QWORD *)(v53 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v53, v57);
  *(_QWORD *)v54 = &off_1E33B0880;
  *(_QWORD *)(v54 + 24) = &off_1E31F4A18;
  v58 = *(_OWORD *)(v52 + 32);
  *(_WORD *)(v54 + 48) = *(_WORD *)(v52 + 48);
  *(_OWORD *)(v54 + 32) = v58;
  *(_QWORD *)(v54 + 64) = 0;
  *(_QWORD *)(v54 + 56) = 0;
  this = WTF::Vector<WebCore::DOMFormData::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v54 + 56), (unsigned int *)(v52 + 56));
  *v5 = v54;
  *(_BYTE *)(v9 + 252) = 0;
  return this;
}

uint64_t WebCore::HTMLFrameElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x141C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 128) = 0;
  *(_BYTE *)(result + 136) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 96) = v7;
  *(_DWORD *)(result + 120) = 0;
  *(_QWORD *)result = off_1E33BE4B0;
  *(_WORD *)(result + 137) = 1;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLFrameElement::rendererIsNeeded(WebCore::HTMLFrameElement *this, const WebCore::RenderStyle *a2)
{
  uint64_t canLoadURL;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[5];

  if ((*((_QWORD *)a2 + 2) & 0x17) == 0x12)
    return 0;
  v4 = *((_QWORD *)this + 16);
  if (!v4 || !*(_DWORD *)(v4 + 4))
    return 1;
  WebCore::Document::completeURL(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), (_QWORD *)this + 16, *(_QWORD *)(*((_QWORD *)this + 5) + 8) + 848, 0, (WTF::URL *)v8);
  canLoadURL = WebCore::HTMLFrameElementBase::canLoadURL(this, (const WTF::URL *)v8);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return canLoadURL;
}

double WebCore::HTMLFrameElement::createElementRenderer@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double result;
  int v9;

  v6 = bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v6, 10, a1, a2, 12, 1027);
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)&result = 0x258000004B00;
  *(_QWORD *)(v7 + 200) = 0x258000004B00;
  v9 = *(_DWORD *)(v7 + 20);
  *(_DWORD *)(v7 + 224) = 1;
  *(_QWORD *)(v7 + 240) = 0;
  *(_QWORD *)(v7 + 248) = 0;
  *(_QWORD *)(v7 + 232) = 0;
  *(_DWORD *)(v7 + 20) = v9 | 3;
  *(_QWORD *)v7 = off_1E3425E18;
  *(_QWORD *)(v7 + 208) = 0;
  *(_QWORD *)(v7 + 216) = &unk_1E34264D8;
  *a3 = v7;
  return result;
}

unsigned int *WebCore::HTMLFrameElement::didAttachRenderers(WebCore::HTMLFrameElement *this)
{
  void *v2;
  unsigned int *result;
  __int16 v4;
  unsigned int v5;

  WebCore::HTMLFrameElementBase::didAttachRenderers((unsigned int *)this);
  result = (unsigned int *)*((_QWORD *)this + 4);
  if (result)
  {
    v4 = *((_WORD *)result + 14);
    if ((v4 & 8) != 0)
    {
      while ((v4 & 0x10) == 0
           || *(_QWORD *)(*((_QWORD *)result + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
      {
        result = (unsigned int *)*((_QWORD *)result + 4);
        if (result)
        {
          v4 = *((_WORD *)result + 14);
          if ((v4 & 8) != 0)
            continue;
        }
        return result;
      }
      v5 = result[6];
      result[6] = v5 + 2;
      if (!*((_BYTE *)this + 138))
        *((_BYTE *)this + 137) = *((_BYTE *)result + 142);
      if (v5)
      {
        result[6] = v5;
      }
      else if ((*((_WORD *)result + 15) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v2);
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLFrameElement::defaultTabIndex(WebCore::HTMLFrameElement *this)
{
  return 0;
}

void WebCore::HTMLFrameElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  WTF::StringImpl *v7;
  uint64_t *v8;
  unint64_t v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::frameborderAttr)
  {
    v7 = *a4;
    if (*a4)
    {
      v8 = (uint64_t *)*((_QWORD *)v7 + 1);
      v9 = *((unsigned int *)v7 + 1) | ((unint64_t)((*((_DWORD *)v7 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v8 = 0;
      v9 = 0x100000000;
    }
    WebCore::parseHTMLInteger(v8, v9, &v15);
    if (HIDWORD(v15))
      v10 = 1;
    else
      v10 = (_DWORD)v15 == 0;
    v11 = !v10;
    *(_BYTE *)(a1 + 137) = v11;
    *(_BYTE *)(a1 + 138) = v7 != 0;
  }
  else
  {
    if (*(_QWORD *)a2 != WebCore::HTMLNames::noresizeAttr)
    {
      WebCore::HTMLFrameElementBase::attributeChanged(a1, a2, a3, a4, a5, a6);
      return;
    }
    if ((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        goto LABEL_27;
      if (*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) != 10)
      {
        __break(0xC471u);
        JUMPOUT(0x195BE26A8);
      }
      v12 = *(_QWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          if (*(_BYTE *)(v13 + 46) == 11)
          {
            v14 = *(_DWORD *)(v13 + 16) + 1;
            *(_DWORD *)(v13 + 16) = v14;
            if ((*(_BYTE *)(v13 + 20) & 0xF8) == 0)
            {
              WebCore::RenderFrameSet::computeEdgeInfo((WebCore::RenderFrameSet *)v13);
              v14 = *(_DWORD *)(v13 + 16);
            }
            if (v14)
            {
              *(_DWORD *)(v13 + 16) = v14 - 1;
              return;
            }
LABEL_27:
            __break(0xC471u);
            JUMPOUT(0x195BE2688);
          }
        }
      }
    }
  }
}

uint64_t WebCore::HTMLFrameOwnerElement::contentDocument(WebCore::HTMLFrameOwnerElement *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 14);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && !*(_BYTE *)(v2 + 144))
    return *(_QWORD *)(v2 + 296);
  else
    return 0;
}

uint64_t WebCore::HTMLFrameOwnerElement::isProhibitedSelfReference(WebCore::HTMLFrameOwnerElement *this, const WTF::URL *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v5 = 0;
  while (*(_BYTE *)(v3 + 144))
  {
LABEL_8:
    v7 = *(_QWORD *)(v3 + 56);
    if (!v7)
      return 0;
    result = 0;
    v3 = *(_QWORD *)(v7 + 8);
    if (!v3)
      return result;
  }
  v6 = WTF::equalIgnoringFragmentIdentifier();
  if ((v6 & v5 & 1) == 0)
  {
    v5 |= v6;
    goto LABEL_8;
  }
  return 1;
}

_QWORD *WebCore::HTMLFrameElementBase::openURL(WebCore::LockHistory,WebCore::LockBackForwardList)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[4];
  a1[4] = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v13 = off_1E31FE290;
      v13[1] = v5;
      v18 = v13;
      WTF::ensureOnMainThread();
      if (v18)
        (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    }
  }
  v8 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = a1[1];
  a1[1] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v14)
      {
        v17 = v9;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v14));
        v9 = v17;
      }
      v15 = *(WTF **)(v9 + 16);
      if (v15)
      {
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
        v16 = v9;
        WTF::fastFree(v15, a2);
        v9 = v16;
      }
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  return a1;
}

uint64_t WebCore::HTMLFrameOwnerElement::renderWidget(WebCore::HTMLFrameOwnerElement *this)
{
  int v1;
  uint64_t result;

  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    result = 105;
    __break(0xC471u);
  }
  else
  {
    v1 = (*(unsigned __int8 *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
      LOBYTE(v1) = 0;
    if ((v1 & 1) != 0)
      return *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    else
      return 0;
  }
  return result;
}

uint64_t WebCore::HTMLFrameElementBase::supportsFocus(WebCore::HTMLFrameElementBase *this)
{
  return 1;
}

uint64_t WebCore::HTMLFrameElementBase::setFocus(uint64_t a1, _BOOL8 a2, char a3)
{
  _BOOL4 v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  WebCore::Frame *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a2;
  result = WebCore::Element::setFocus(a1, a2, a3);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 24);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 72);
          v11 = *(_DWORD *)v10 + 1;
          *(_DWORD *)v10 = v11;
          if (v3)
          {
            v12 = *(_QWORD *)(a1 + 112);
            if (v12)
            {
              v13 = *(WebCore::Frame **)(v12 + 8);
LABEL_14:
              result = WebCore::FocusController::setFocusedFrame(v10, v13, 1);
              v11 = *(_DWORD *)v10;
LABEL_15:
              if (v11)
              {
                *(_DWORD *)v10 = v11 - 1;
              }
              else
              {
                result = 286;
                __break(0xC471u);
              }
              return result;
            }
          }
          else
          {
            v14 = *(_QWORD *)(v10 + 16);
            if (v14)
              v14 = *(_QWORD *)(v14 + 8);
            v15 = *(_QWORD *)(a1 + 112);
            if (v15)
              v15 = *(_QWORD *)(v15 + 8);
            if (v14 != v15)
              goto LABEL_15;
          }
          v13 = 0;
          goto LABEL_14;
        }
      }
    }
  }
  return result;
}

BOOL WebCore::HTMLFrameElementBase::isURLAttribute(uint64_t a1, _QWORD *a2)
{
  return *a2 == WebCore::HTMLNames::srcAttr || *a2 == WebCore::HTMLNames::longdescAttr;
}

BOOL WebCore::HTMLFrameElementBase::isHTMLContentAttribute(uint64_t a1, _QWORD *a2)
{
  return *a2 == WebCore::HTMLNames::srcdocAttr;
}

WebCore::HTMLFrameOwnerElement *WebCore::HTMLFrameOwnerElement::clearContentFrame(WebCore::HTMLFrameOwnerElement **this, void *a2)
{
  WebCore::HTMLFrameOwnerElement *v2;
  WebCore::HTMLFrameOwnerElement *result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WebCore::HTMLFrameOwnerElement **v7;
  uint64_t v8;

  v2 = (WebCore::HTMLFrameOwnerElement *)this;
  result = this[14];
  if (result && *((_QWORD *)result + 1))
  {
    *((_QWORD *)v2 + 14) = 0;
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      WTF::fastFree(result, a2);
    }
    *((_DWORD *)v2 + 6) += 2;
    while (1)
    {
      v6 = *((_QWORD *)v2 + 9);
      if ((v6 & 0x3FF000000000000) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195BE2B4CLL);
      }
      result = v2;
      *((_QWORD *)v2 + 9) = v6 & 0xFFFFFFFFFFFFLL | ((unint64_t)(HIWORD(v6) & 0xFC00 | (HIWORD(v6) - 1) & 0x3FFu) << 48);
      if ((*((_WORD *)v2 + 14) & 0x80) == 0)
        break;
      v8 = *((_QWORD *)v2 + 25);
      if (v8)
      {
        v7 = (WebCore::HTMLFrameOwnerElement **)(v8 + 8);
LABEL_11:
        v2 = *v7;
        if (*v7)
          *((_DWORD *)v2 + 6) += 2;
        goto LABEL_13;
      }
      v2 = 0;
LABEL_13:
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (WebCore::HTMLFrameOwnerElement *)WebCore::Node::removedLastRef(result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
      if (!v2)
        return result;
    }
    v7 = (WebCore::HTMLFrameOwnerElement **)((char *)v2 + 32);
    goto LABEL_11;
  }
  return result;
}

uint64_t WebCore::HTMLFrameOwnerElement::disconnectContentFrame(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  WebCore::HTMLFrameOwnerElement **v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;

  v1 = *(_QWORD *)(this + 112);
  if (!v1)
    return this;
  v2 = *(unsigned int **)(v1 + 8);
  if (!v2)
    return this;
  v3 = this;
  v4 = v2 + 2;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  this = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
  v7 = *(_QWORD *)(v3 + 112);
  if (v7)
  {
    v8 = *(unsigned int **)(v7 + 8);
    if (v2 == v8)
    {
      v9 = *((_QWORD *)v2 + 15);
      if (v9)
      {
        v10 = *(WebCore::HTMLFrameOwnerElement ***)(v9 + 8);
        if (v10)
        {
          WebCore::HTMLFrameOwnerElement::clearContentFrame(v10, v6);
          v12 = (unsigned int *)*((_QWORD *)v2 + 15);
          *((_QWORD *)v2 + 15) = 0;
          if (v12)
          {
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              atomic_store(1u, v12);
              v21 = (WTF *)v12;
              v19 = v12[7];
              if ((_DWORD)v19)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v21 + 2), (WTF::StringImpl *)(*((_QWORD *)v21 + 2) + 32 * v19));
              v20 = (WTF *)*((_QWORD *)v21 + 2);
              if (v20)
              {
                *((_QWORD *)v21 + 2) = 0;
                *((_DWORD *)v21 + 6) = 0;
                WTF::fastFree(v20, v11);
              }
              WTF::fastFree(v21, v11);
            }
          }
        }
      }
      this = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 120))(v2);
      v15 = *(_QWORD *)(v3 + 112);
      if (!v15)
        goto LABEL_15;
      v8 = *(unsigned int **)(v15 + 8);
    }
    if (v2 == v8)
    {
      __break(0xC471u);
      JUMPOUT(0x195BE2CA0);
    }
  }
  do
  {
LABEL_15:
    v16 = __ldaxr(v4);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v4));
  if (!v17)
  {
    atomic_store(1u, v4);
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v18 = off_1E31FE290;
    v18[1] = v4;
    v22 = (uint64_t)v18;
    WTF::ensureOnMainThread();
    this = v22;
    if (v22)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  return this;
}

void WebCore::HTMLFrameOwnerElement::~HTMLFrameOwnerElement(WebCore::HTMLFrameOwnerElement *this, void *a2)
{
  uint64_t v3;
  WebCore::Frame *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;

  *(_QWORD *)this = off_1E33BD0C8;
  v3 = *((_QWORD *)this + 14);
  if (v3)
  {
    v4 = *(WebCore::Frame **)(v3 + 8);
    if (v4)
    {
      v5 = (unsigned int *)((char *)v4 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      WebCore::Frame::disconnectOwnerElement(v4, a2);
      do
      {
        v7 = __ldaxr(v5);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v5));
      if (!v8)
      {
        atomic_store(1u, v5);
        v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v12 = off_1E31FE290;
        v12[1] = v5;
        v13 = v12;
        WTF::ensureOnMainThread();
        if (v13)
          (*(void (**)(_QWORD *))(*v13 + 8))(v13);
      }
    }
    v9 = (unsigned int *)*((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 14) = 0;
  }
  WebCore::Element::~Element((uint64_t)this);
}

uint64_t WebCore::HTMLFrameOwnerElement::contentWindow(WebCore::HTMLFrameOwnerElement *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 14);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return *(_QWORD *)(v2 + 112);
  else
    return 0;
}

uint64_t WebCore::HTMLFrameOwnerElement::isKeyboardFocusable(WebCore::HTMLFrameOwnerElement *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v2;
  uint64_t result;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v2 = *((_QWORD *)this + 14);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return 0;
  result = (*(uint64_t (**)(WebCore::HTMLFrameOwnerElement *, WebCore::KeyboardEvent *))(*(_QWORD *)this
                                                                                                 + 552))(this, a2);
  if ((_DWORD)result)
  {
    if (((*(uint64_t (**)(WebCore::HTMLFrameOwnerElement *))(*(_QWORD *)this + 1120))(this) & 0x80000000) == 0
      || (result = (*(uint64_t (**)(WebCore::HTMLFrameOwnerElement *))(*(_QWORD *)this + 544))(this),
          (_DWORD)result))
    {
      v6 = *((_QWORD *)this + 9);
      v7 = (v6 >> 58) & 3;
      if ((_DWORD)v7 == 2)
        return 0;
      v8 = v6 & 0xFFFFFFFFFFFFLL;
      if ((_DWORD)v7 == 3 && (*(_DWORD *)(v8 + 28) & 0x80000000) != 0)
        return 0;
      if (v8 && (v10 = *(_QWORD *)(v8 + 88)) != 0)
      {
        v11 = *(_DWORD *)(v10 + 24);
        *(_DWORD *)(v10 + 24) = v11 + 2;
        v9 = (*(unsigned __int8 *)(v10 + 192) >> 1) & 1;
        if (v11)
        {
          *(_DWORD *)(v10 + 24) = v11;
        }
        else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v10, v5);
        }
      }
      else
      {
        v9 = 0;
      }
      return v9 ^ 1u;
    }
  }
  return result;
}

double WebCore::HTMLFrameSetElement::create@<D0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _DWORD *v7;
  double result;

  v6 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v6 + 24) = 0x141C00000002;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = a2 + 96;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(v6 + 96) = v7;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)v6 = off_1E33BD5E0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = 0x100000001;
  *(_DWORD *)(v6 + 136) = 6;
  *(_QWORD *)&result = 0x1000000010000;
  *(_DWORD *)(v6 + 140) = 0x10000;
  *(_BYTE *)(v6 + 144) = 0;
  *a3 = v6;
  return result;
}

uint64_t WebCore::HTMLFrameSetElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::bordercolorAttr)
    return 1;
  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 > 0x1F8)
  {
    if (v2 == 949 || v2 == 505 || v2 == 947)
      return result;
    return 0;
  }
  v4 = v2 - 411 > 0x20 || ((1 << (v2 + 101)) & 0x100200001) == 0;
  if (v4 && v2 != 286)
    return 0;
  return result;
}

unsigned int *WebCore::HTMLFrameSetElement::collectPresentationalHintsForAttribute(WebCore::HTMLFrameSetElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  if (*(_QWORD *)a2 == WebCore::HTMLNames::bordercolorAttr)
    return WebCore::HTMLElement::addHTMLColorToStyle((uint64_t)this, a4, 471, (uint64_t *)a3);
  else
    return (unsigned int *)WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
}

void WebCore::HTMLFrameSetElement::attributeChanged(uint64_t a1, WebCore::HTMLBodyElement *this, WTF::AtomString *a3, const WTF::AtomString *a4, int a5)
{
  WTF::StringImpl **v10;
  __n128 v11;
  WTF::StringImpl **v12;
  WebCore::Document *v13;
  WebCore::DOMWrapperWorld *v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  WebCore::Node *ElementSibling;
  WebCore::Element *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  WTF::StringImpl **v47;
  WebCore::Document *v48;
  uint64_t v49;

  v10 = (WTF::StringImpl **)WebCore::HTMLBodyElement::eventNameForWindowEventHandlerAttribute(this, this);
  if (*v10)
  {
    v12 = v10;
    v13 = *(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8);
    {
      v14 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
LABEL_4:
      WebCore::Document::setWindowAttributeEventListener(v13, v12, this, a4, v14);
      goto LABEL_6;
    }
    v47 = v12;
    v48 = *(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8);
    v45 = WebCore::g_commonVMOrNull;
    if (WebCore::g_commonVMOrNull)
    {
LABEL_102:
      v14 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v45 + 41456) + 16);
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v14;
      v12 = v47;
      v13 = v48;
      goto LABEL_4;
    }
    WTF::RunLoop::webIfExists(v13);
    JSC::VM::create();
    v45 = v49;
    WebCore::g_commonVMOrNull = v49;
    if (__ldaxr((unsigned int *)(v49 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v49 + 1096)))
    {
LABEL_99:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v49 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v45 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v45, 0);
      goto LABEL_102;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v49 + 192));
    goto LABEL_99;
  }
  WebCore::HTMLElement::attributeChanged(a1, this, a3, (WTF::StringImpl **)a4, a5, v11);
LABEL_6:
  v15 = *(unsigned __int16 *)(*(_QWORD *)this + 10);
  if (v15 <= 0x1EA)
  {
    if (v15 == 375)
    {
      if (*(_QWORD *)a4)
      {
        WebCore::parseHTMLInteger(*(uint64_t **)(*(_QWORD *)a4 + 8), *(unsigned int *)(*(_QWORD *)a4 + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)a4 + 16) >> 2) & 1) << 32), &v49);
        if (HIDWORD(v49))
          v26 = 0;
        else
          v26 = v49;
        *(_DWORD *)(a1 + 136) = v26;
        *(_BYTE *)(a1 + 140) = 1;
      }
      else
      {
        *(_BYTE *)(a1 + 140) = 0;
      }
    }
    else
    {
      if (v15 != 376)
      {
        if (v15 != 405 || !*(_QWORD *)a4)
          return;
        WebCore::newLengthArray((const WTF::String *)(a1 + 132), &v49);
        v17 = v49;
        v49 = 0;
        v18 = *(_QWORD *)(a1 + 120);
        *(_QWORD *)(a1 + 120) = v17;
        if (!v18)
          goto LABEL_71;
        v19 = *(_QWORD *)(v18 - 8);
        if (v19)
        {
          v20 = 8 * v19;
          do
          {
            if (*(_BYTE *)(v18 + v20 - 4) == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v18 + v20 - 8));
            }
            v20 -= 8;
          }
          while (v20);
        }
        WTF::fastFree((WTF *)(v18 - 16), v16);
        v31 = v49;
        v49 = 0;
        if (!v31)
          goto LABEL_71;
        v32 = *(_QWORD *)(v31 - 8);
        if (v32)
        {
          v33 = 8 * v32;
          do
          {
            if (*(_BYTE *)(v31 + v33 - 4) == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v31 + v33 - 8));
            }
            v33 -= 8;
          }
          while (v33);
        }
        v37 = (WTF *)(v31 - 16);
        goto LABEL_70;
      }
      v29 = *(_QWORD *)a4;
      if (*(_QWORD *)a4)
        LOBYTE(v29) = *(_DWORD *)(v29 + 4) != 0;
      *(_BYTE *)(a1 + 141) = v29;
    }
    return;
  }
  if (v15 == 491)
  {
    v27 = *(_QWORD *)a4;
    if (!*(_QWORD *)a4)
    {
      *(_WORD *)(a1 + 142) = 0;
      return;
    }
    if (*(_DWORD *)(v27 + 4) != 2)
    {
LABEL_40:
      if (!MEMORY[0x19AEA53F4]())
      {
        v28 = *(_QWORD *)a4;
        if (*(_QWORD *)a4 && *(_DWORD *)(v28 + 4) == 3)
        {
          v43 = *(_QWORD *)(v28 + 8);
          if ((*(_BYTE *)(v28 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v43 & 0xDF) == 0x59 && (*(_BYTE *)(v43 + 1) & 0xDF) == 0x45)
            {
              v44 = *(unsigned __int8 *)(v43 + 2);
              goto LABEL_87;
            }
          }
          else if ((*(_WORD *)v43 & 0xFFDF) == 0x59 && (*(_WORD *)(v43 + 2) & 0xFFDF) == 0x45)
          {
            v44 = *(unsigned __int16 *)(v43 + 4);
LABEL_87:
            if ((v44 & 0xFFFFFFDF) == 0x53)
              goto LABEL_43;
          }
        }
        if (!MEMORY[0x19AEA53F4]())
          return;
LABEL_43:
        *(_BYTE *)(a1 + 143) = 1;
        return;
      }
LABEL_80:
      *(_WORD *)(a1 + 142) = 256;
      return;
    }
    v41 = *(_QWORD *)(v27 + 8);
    if ((*(_BYTE *)(v27 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v41 & 0xDF) != 0x4E)
        goto LABEL_40;
      v42 = *(unsigned __int8 *)(v41 + 1);
    }
    else
    {
      if ((*(_WORD *)v41 & 0xFFDF) != 0x4E)
        goto LABEL_40;
      v42 = *(unsigned __int16 *)(v41 + 2);
    }
    if ((v42 & 0xFFFFFFDF) == 0x4F)
      goto LABEL_80;
    goto LABEL_40;
  }
  if (v15 == 596)
  {
    *(_BYTE *)(a1 + 144) = 1;
    return;
  }
  if (v15 == 808 && *(_QWORD *)a4)
  {
    WebCore::newLengthArray((const WTF::String *)(a1 + 128), &v49);
    v22 = v49;
    v49 = 0;
    v23 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v22;
    if (!v23)
      goto LABEL_71;
    v24 = *(_QWORD *)(v23 - 8);
    if (v24)
    {
      v25 = 8 * v24;
      do
      {
        if (*(_BYTE *)(v23 + v25 - 4) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + v25 - 8));
        }
        v25 -= 8;
      }
      while (v25);
    }
    WTF::fastFree((WTF *)(v23 - 16), v21);
    v34 = v49;
    v49 = 0;
    if (!v34)
      goto LABEL_71;
    v35 = *(_QWORD *)(v34 - 8);
    if (v35)
    {
      v36 = 8 * v35;
      do
      {
        if (*(_BYTE *)(v34 + v36 - 4) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v34 + v36 - 8));
        }
        v36 -= 8;
      }
      while (v36);
    }
    v37 = (WTF *)(v34 - 16);
LABEL_70:
    WTF::fastFree(v37, v30);
LABEL_71:
    WebCore::Node::invalidateStyle(a1, 4u, 0);
    if ((*(_BYTE *)(a1 + 71) & 1) != 0)
    {
      v38 = *(_QWORD *)(a1 + 32);
      if (!v38 || (*(_WORD *)(v38 + 28) & 8) == 0 || (*(_BYTE *)(v38 + 70) & 4) == 0)
      {
        ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(a1);
        WebCore::invalidateForSiblingCombinators(ElementSibling, v40);
      }
    }
  }
}

double WebCore::HTMLFrameSetElement::createElementRenderer@<D0>(WebCore::Document *a1@<X0>, WebCore::Style *this@<X1>, const WebCore::Element *a3@<X3>, uint64_t *a4@<X8>)
{
  double result;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 80))
  {
    WebCore::RenderElement::createFor(a1, this, 0, a3, a4);
  }
  else
  {
    v8 = bmalloc::api::isoAllocate();
    v9 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v8, 11, (uint64_t)a1, this, 12, 0);
    result = 0.0;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_QWORD *)v9 = off_1E3426500;
    *(_OWORD *)(v9 + 200) = 0u;
    *(_OWORD *)(v9 + 216) = 0u;
    *(_OWORD *)(v9 + 232) = 0u;
    *(_OWORD *)(v9 + 248) = 0u;
    *(_DWORD *)(v9 + 264) = -1;
    *(_OWORD *)(v9 + 272) = 0u;
    *(_OWORD *)(v9 + 288) = 0u;
    *(_OWORD *)(v9 + 304) = 0u;
    *(_OWORD *)(v9 + 320) = 0u;
    *(_DWORD *)(v9 + 336) = -1;
    *(_BYTE *)(v9 + 344) = 0;
    *(_DWORD *)(v9 + 20) |= 1u;
    *a4 = v9;
  }
  return result;
}

unsigned int *WebCore::HTMLFrameSetElement::willAttachRenderers(WebCore::HTMLFrameSetElement *this, void *a2)
{
  unsigned int *result;
  __int16 v4;
  unsigned int v5;
  int v6;
  unsigned int v7;

  result = (unsigned int *)*((_QWORD *)this + 4);
  if (!result)
    return result;
  v4 = *((_WORD *)result + 14);
  if ((v4 & 8) == 0)
    return result;
  while ((v4 & 0x10) == 0
       || *(_QWORD *)(*((_QWORD *)result + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
  {
    result = (unsigned int *)*((_QWORD *)result + 4);
    if (result)
    {
      v4 = *((_WORD *)result + 14);
      if ((v4 & 8) != 0)
        continue;
    }
    return result;
  }
  v5 = result[6];
  result[6] = v5 + 2;
  if (*((_BYTE *)this + 143))
  {
    if (!*((_BYTE *)this + 142))
      goto LABEL_18;
LABEL_12:
    if (!*((_BYTE *)this + 140))
    {
      v7 = *((unsigned __int8 *)result + 142);
      if (*((_BYTE *)result + 142))
        v7 = result[34];
      *((_DWORD *)this + 34) = v7;
    }
    if (!*((_BYTE *)this + 141))
      *((_BYTE *)this + 141) = *((_BYTE *)result + 141);
    goto LABEL_18;
  }
  v6 = *((unsigned __int8 *)result + 142);
  *((_BYTE *)this + 142) = v6;
  if (v6)
    goto LABEL_12;
LABEL_18:
  if (!*((_BYTE *)this + 144))
    *((_BYTE *)this + 144) = *((_BYTE *)result + 144);
  if (v5)
  {
    result[6] = v5;
  }
  else if ((*((_WORD *)result + 15) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
  }
  return result;
}

void WebCore::HTMLFrameSetElement::defaultEventHandler(WebCore::HTMLFrameSetElement *this, WebCore::Node **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  if (!(*((unsigned int (**)(WebCore::Node **))*a2 + 11))(a2))
    goto LABEL_3;
  if (*((_BYTE *)this + 144))
    goto LABEL_3;
  v4 = *((_QWORD *)this + 8);
  v5 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_3;
  if ((*(_BYTE *)((v4 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    goto LABEL_14;
  if (*(_BYTE *)((v4 & 0xFFFFFFFFFFFFLL) + 0x2E) != 11)
  {
LABEL_3:
    WebCore::Node::defaultEventHandler(this, a2);
    return;
  }
  ++*(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10);
  if (!WebCore::RenderFrameSet::userResize((WebCore::EventNames **)v5, (int32x2_t *)a2))
  {
    v7 = *(_DWORD *)(v5 + 16);
    if (v7)
    {
      *(_DWORD *)(v5 + 16) = v7 - 1;
      goto LABEL_3;
    }
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x195BE3840);
  }
  *((_DWORD *)a2 + 5) |= 0x80u;
  v6 = *(_DWORD *)(v5 + 16);
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195BE3860);
  }
  *(_DWORD *)(v5 + 16) = v6 - 1;
}

void WebCore::HTMLFrameSetElement::willRecalcStyle(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  WebCore::RenderElement *v4;
  uint64_t v5;
  int v6;

  v1 = *(_QWORD *)(a1 + 64);
  if ((v1 & 0x7000000000000) != 0 || (*(_WORD *)(a1 + 30) & 0x20) != 0)
  {
    v2 = v1 & 0xFFFFFFFFFFFFLL;
    if ((v1 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((v1 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        goto LABEL_16;
      v3 = *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 0x14);
      if ((v3 & 8) == 0)
      {
        *(_DWORD *)(v2 + 20) = v3 | 8;
        v4 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v2, 0);
        WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v2, v4);
        if ((*(_BYTE *)(v2 + 21) & 0x80) != 0)
        {
          if ((*(_BYTE *)(v2 + 45) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195BE3964);
          }
          v5 = *(_QWORD *)(v2 + 144);
          if (v5)
          {
            v6 = *(_DWORD *)(v5 + 8) + 1;
            *(_DWORD *)(v5 + 8) = v6;
          }
          else
          {
            v6 = MEMORY[8];
          }
          *(_QWORD *)(v5 + 24) = *(_QWORD *)(v5 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
          if (v6)
          {
            *(_DWORD *)(v5 + 8) = v6 - 1;
            return;
          }
LABEL_16:
          __break(0xC471u);
          JUMPOUT(0x195BE3944);
        }
      }
    }
  }
}

uint64_t WebCore::HTMLFrameSetElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  WebCore::HTMLElement::insertedIntoAncestor(a1, a2, a3);
  return 0;
}

uint64_t *WebCore::HTMLFrameSetElement::removedFromAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  return WebCore::HTMLElement::removedFromAncestor(a1, a2, a3, a4, a5);
}

uint64_t WebCore::HTMLFrameSetElement::namedItem(WebCore::HTMLFrameSetElement *this, const WTF::AtomString *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v12;

  WebCore::ContainerNode::children(this, a2, &v12);
  v3 = (*(uint64_t (**)(_DWORD *, const WTF::AtomString *))(*(_QWORD *)v12 + 64))(v12, a2);
  v5 = v3;
  if (v3)
  {
    if ((*(_WORD *)(v3 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::frameTag + 24))
    {
      v6 = 0;
      *(_DWORD *)(v3 + 24) += 2;
      goto LABEL_7;
    }
    v5 = 0;
  }
  v6 = 1;
LABEL_7:
  v7 = v12;
  v12 = 0;
  if (!v7)
    goto LABEL_10;
  if (v7[4] != 1)
  {
    --v7[4];
LABEL_10:
    if (!v5)
      goto LABEL_16;
    goto LABEL_11;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
  if (!v5)
    goto LABEL_16;
LABEL_11:
  v8 = *(_QWORD *)(v5 + 112);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 8)) == 0)
  {
LABEL_16:
    v10 = 0;
    if ((v6 & 1) != 0)
      return v10;
    goto LABEL_17;
  }
  v10 = *(_QWORD *)(v9 + 112);
  if ((v6 & 1) != 0)
    return v10;
LABEL_17:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

_QWORD *WebCore::HTMLHRElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _QWORD *result;

  v6 = bmalloc::api::isoAllocate();
  result = (_QWORD *)WebCore::Element::Element(v6, a1, a2, 16);
  *result = off_1E33BDAD0;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLHRElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;
  BOOL v5;

  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 > 0x254)
  {
    v5 = v2 - 922 > 0x1B || ((1 << (v2 + 102)) & 0xA000001) == 0;
    if (v5 && v2 != 597 && v2 != 834)
      return 0;
  }
  else
  {
    v4 = v2 - 402 > 0x29 || ((1 << (v2 + 110)) & 0x20040000201) == 0;
    if (v4 && v2 != 286 && v2 != 505)
      return 0;
  }
  return result;
}

int *WebCore::HTMLHRElement::collectPresentationalHintsForAttribute(int *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  int *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  double v24;
  uint64_t v26;
  char v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int *v30;
  WebCore::MutableStyleProperties *v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int *v35;
  void *v36;
  int *v37;
  WTF::StringImpl *v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  _DWORD *v41;
  int *v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  int *v49;
  uint64_t v50;
  int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  int *v56;
  char v57;
  char v58;

  v6 = this;
  v7 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v7 > 0x254)
  {
    if (v7 != 597)
    {
      if (v7 != 834)
      {
        if (v7 == 922)
        {
          v8 = *(_QWORD *)a3;
          if (*(_QWORD *)a3)
          {
            v9 = *(unsigned __int16 **)(v8 + 8);
            v10 = *(unsigned int *)(v8 + 4) | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32);
          }
          else
          {
            v9 = 0;
            v10 = 0x100000000;
          }
          this = (int *)WebCore::parseHTMLDimensionInternal((uint64_t)&v56, v9, v10, 0);
          if (v58)
          {
            if (v57)
              v11 = 6;
            else
              v11 = 3;
            return WebCore::StyledElement::addPropertyToPresentationalHintStyle(*(double *)&v56, (uint64_t)v6, a4, 450, v11);
          }
          return this;
        }
        return (int *)WebCore::HTMLElement::collectPresentationalHintsForAttribute((WTF::StringImpl *)this, a2, a3, a4);
      }
      v18 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v19 = *(uint64_t **)(v18 + 8);
        v20 = *(unsigned int *)(v18 + 4) | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v19 = 0;
        v20 = 0x100000000;
      }
      WebCore::parseHTMLInteger(v19, v20, (uint64_t *)&v56);
      if (HIDWORD(v56))
        v21 = 0;
      else
        v21 = (int)v56;
      v22 = __OFSUB__(v21, 2);
      v23 = v21 - 2;
      if (v23 < 0 != v22)
      {
        dword_1ECE88BE8 += 2;
        v56 = &dword_1ECE88BE8;
        v31 = a4;
        v32 = 365;
      }
      else
      {
        v24 = (double)v23;
        if (v23 <= 0xFF && COERCE__INT64((double)v23) == COERCE__INT64((double)v23))
        {
          v42 = &WebCore::staticCSSValuePool[4 * v23];
          v43 = v42[16];
          v26 = (uint64_t)(v42 + 16);
          *(_DWORD *)v26 = v43 + 2;
        }
        else
        {
          v26 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v26 = 2;
          v27 = *(_BYTE *)(v26 + 6);
          *(_WORD *)(v26 + 4) = 6;
          *(_BYTE *)(v26 + 6) = v27 & 0xFC;
          *(double *)(v26 + 8) = v24;
        }
        v56 = (int *)v26;
        v31 = a4;
        v32 = 393;
      }
      goto LABEL_69;
    }
    v14 = *((_QWORD *)this + 13);
    if (v14)
    {
      v15 = *(_DWORD *)(v14 + 4);
      if ((v15 & 1) == 0)
      {
        v16 = (uint64_t *)(v14 + 32);
        LODWORD(v17) = v15 >> 5;
        if (!(_DWORD)v17)
          goto LABEL_47;
        goto LABEL_40;
      }
      v16 = *(uint64_t **)(v14 + 40);
      LODWORD(v17) = *(_DWORD *)(v14 + 52);
      if ((_DWORD)v17)
      {
LABEL_40:
        v17 = v17;
        do
        {
          v33 = *v16;
          if (*v16 == WebCore::HTMLNames::colorAttr
            || *(_QWORD *)(v33 + 24) == *(_QWORD *)(WebCore::HTMLNames::colorAttr + 24)
            && *(_QWORD *)(v33 + 32) == *(_QWORD *)(WebCore::HTMLNames::colorAttr + 32))
          {
            return this;
          }
          v16 += 2;
        }
        while (--v17);
      }
    }
LABEL_47:
    dword_1ECE8BCC8 += 2;
    v56 = &WebCore::staticCSSValuePool[3144];
    WebCore::MutableStyleProperties::setProperty(a4, 483, &v56, 0);
    v35 = v56;
    v56 = 0;
    if (v35)
    {
      if (*v35 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, v34);
      else
        *v35 -= 2;
    }
    {
      WebCore::CSSValuePool::singleton(void)::pool = 0;
      unk_1ECE88B90 = 0;
      qword_1ECE88B98 = 0;
    }
    v55 = 0x11040000808080FFLL;
    WebCore::CSSValuePool::createColorValue((uint64_t)&WebCore::CSSValuePool::singleton(void)::pool, (const WebCore::Color *)&v55, &v56);
    if ((v55 & 0x8000000000000) != 0)
    {
      v52 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFLL);
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        atomic_store(1u, v52);
        WTF::fastFree((WTF *)v52, v36);
      }
    }
    v37 = v56;
    *v56 += 2;
    v55 = (unint64_t)v37;
    WebCore::MutableStyleProperties::setProperty(a4, 471, (_DWORD **)&v55, 0);
    v39 = (_DWORD *)v55;
    v55 = 0;
    if (v39)
    {
      if (*v39 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v39, v38);
      else
        *v39 -= 2;
    }
    v55 = (unint64_t)v56;
    v56 = 0;
    WebCore::MutableStyleProperties::setProperty(a4, 61, (_DWORD **)&v55, 0);
    v41 = (_DWORD *)v55;
    v55 = 0;
    if (v41)
    {
      if (*v41 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v41, v40);
      else
        *v41 -= 2;
    }
    goto LABEL_70;
  }
  if (v7 == 286)
  {
    v28 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v44 = *(_DWORD *)(v28 + 4);
      if (v44 == 4)
      {
        v50 = *(_QWORD *)(v28 + 8);
        if ((*(_BYTE *)(v28 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v50 & 0xDF) != 0x4C
            || (*(_BYTE *)(v50 + 1) & 0xDF) != 0x45
            || (*(_BYTE *)(v50 + 2) & 0xDF) != 0x46)
          {
            goto LABEL_33;
          }
          v51 = *(unsigned __int8 *)(v50 + 3);
        }
        else
        {
          if ((*(_WORD *)v50 & 0xFFDF) != 0x4C
            || (*(_WORD *)(v50 + 2) & 0xFFDF) != 0x45
            || (*(_WORD *)(v50 + 4) & 0xFFDF) != 0x46)
          {
            goto LABEL_33;
          }
          v51 = *(unsigned __int16 *)(v50 + 6);
        }
        if ((v51 & 0xFFFFFFDF) == 0x54)
        {
          dword_1ECE88BE8 += 2;
          v56 = &dword_1ECE88BE8;
          goto LABEL_34;
        }
      }
      else if (v44 == 5)
      {
        v45 = *(_QWORD *)(v28 + 8);
        if ((*(_BYTE *)(v28 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v45 & 0xDF) != 0x52
            || (*(_BYTE *)(v45 + 1) & 0xDF) != 0x49
            || (*(_BYTE *)(v45 + 2) & 0xDF) != 0x47
            || (*(_BYTE *)(v45 + 3) & 0xDF) != 0x48)
          {
            goto LABEL_33;
          }
          v46 = *(unsigned __int8 *)(v45 + 4);
        }
        else
        {
          if ((*(_WORD *)v45 & 0xFFDF) != 0x52
            || (*(_WORD *)(v45 + 2) & 0xFFDF) != 0x49
            || (*(_WORD *)(v45 + 4) & 0xFFDF) != 0x47
            || (*(_WORD *)(v45 + 6) & 0xFFDF) != 0x48)
          {
            goto LABEL_33;
          }
          v46 = *(unsigned __int16 *)(v45 + 8);
        }
        if ((v46 & 0xFFFFFFDF) == 0x54)
        {
          v47 = 0x1238u;
          WebCore::staticCSSValuePool[v47] += 2;
          v56 = &WebCore::staticCSSValuePool[v47];
          WebCore::MutableStyleProperties::setProperty(a4, 405, &v56, 0);
          v49 = v56;
          v56 = 0;
          if (v49)
          {
            if (*v49 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v49, v48);
            else
              *v49 -= 2;
          }
          dword_1ECE88BE8 += 2;
          v56 = &dword_1ECE88BE8;
          goto LABEL_54;
        }
      }
    }
LABEL_33:
    WebCore::staticCSSValuePool[4664] += 2;
    v56 = &WebCore::staticCSSValuePool[4664];
LABEL_34:
    WebCore::MutableStyleProperties::setProperty(a4, 405, &v56, 0);
    v30 = v56;
    v56 = 0;
    if (v30)
    {
      if (*v30 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v30, v29);
      else
        *v30 -= 2;
    }
    WebCore::staticCSSValuePool[4664] += 2;
    v56 = &WebCore::staticCSSValuePool[4664];
LABEL_54:
    v31 = a4;
    v32 = 406;
LABEL_69:
    WebCore::MutableStyleProperties::setProperty(v31, v32, &v56, 0);
LABEL_70:
    this = v56;
    v56 = 0;
    if (this)
    {
      if (*this == 2)
        return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)this, v40);
      else
        *this -= 2;
    }
    return this;
  }
  if (v7 != 402)
    return (int *)WebCore::HTMLElement::collectPresentationalHintsForAttribute((WTF::StringImpl *)this, a2, a3, a4);
  dword_1ECE8BCC8 += 2;
  v56 = &WebCore::staticCSSValuePool[3144];
  WebCore::MutableStyleProperties::setProperty(a4, 483, &v56, 0);
  v13 = v56;
  v56 = 0;
  if (v13)
  {
    if (*v13 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v12);
    else
      *v13 -= 2;
  }
  WebCore::HTMLElement::addHTMLColorToStyle((uint64_t)v6, a4, 471, (uint64_t *)a3);
  return (int *)WebCore::HTMLElement::addHTMLColorToStyle((uint64_t)v6, a4, 61, (uint64_t *)a3);
}

BOOL WebCore::HTMLHRElement::canContainRangeEndPoint(WebCore::HTMLHRElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  int v11;

  if (!*((_QWORD *)this + 10))
    return 0;
  v1 = *((_QWORD *)this + 13);
  if (!v1)
    goto LABEL_14;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_5;
LABEL_14:
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_15;
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    goto LABEL_14;
LABEL_5:
  v4 = v4;
  v5 = (uint64_t *)(v3 + 8);
  while (1)
  {
    v6 = *(v5 - 1);
    if (v6 == WebCore::HTMLNames::roleAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
    {
      break;
    }
    v5 += 2;
    if (!--v4)
    {
      v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_15:
  v8 = *v5;
  if (*v5 && *(_DWORD *)(v8 + 4) == 3)
  {
    v10 = *(_QWORD *)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v10 & 0xDF) == 0x49 && (*(_BYTE *)(v10 + 1) & 0xDF) == 0x4D)
      {
        v11 = *(unsigned __int8 *)(v10 + 2);
LABEL_23:
        v9 = (v11 & 0xFFFFFFDF) == 71;
        return !v9;
      }
    }
    else if ((*(_WORD *)v10 & 0xFFDF) == 0x49 && (*(_WORD *)(v10 + 2) & 0xFFDF) == 0x4D)
    {
      v11 = *(unsigned __int16 *)(v10 + 4);
      goto LABEL_23;
    }
  }
  v9 = 0;
  return !v9;
}

uint64_t WebCore::HTMLHeadElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33BDFC0;
  *a3 = result;
  return result;
}

WebCore::Element *WebCore::CachedHTMLCollection<WebCore::HTMLFormControlsCollection,(WebCore::CollectionTraversalType)2>::length(WebCore::HTMLCollection *a1)
{
  return WebCore::CollectionIndexCache<WebCore::HTMLFormControlsCollection,WebCore::Element *>::nodeCount((uint64_t)a1 + 40, a1);
}

unint64_t WebCore::CachedHTMLCollection<WebCore::HTMLFormControlsCollection,(WebCore::CollectionTraversalType)2>::memoryCost(unsigned int *a1)
{
  uint64_t v1;

  v1 = a1[16];
  return WebCore::HTMLCollection::memoryCost((WebCore::HTMLCollection *)a1) + 8 * v1;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLFormControlsCollection,(WebCore::CollectionTraversalType)2>::namedItem(_QWORD *a1, uint64_t *a2)
{
  if (*a2 && *(_DWORD *)(*a2 + 4))
    return WebCore::HTMLCollection::namedItemSlow(a1, a2);
  else
    return 0;
}

void WebCore::HTMLFrameElementBase::~HTMLFrameElementBase(WebCore::HTMLFrameElementBase *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E33BEB58;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::HTMLFrameOwnerElement::~HTMLFrameOwnerElement(this, a2);
}

{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E33BEB58;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::HTMLFrameOwnerElement::~HTMLFrameOwnerElement(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::HTMLFrameElementBase::canContainRangeEndPoint(WebCore::HTMLFrameElementBase *this)
{
  return 0;
}

void WebCore::HTMLFrameElement::~HTMLFrameElement(WebCore::HTMLFrameElement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E33BEB58;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::HTMLFrameOwnerElement::~HTMLFrameOwnerElement(this, a2);
}

{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E33BEB58;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::HTMLFrameOwnerElement::~HTMLFrameOwnerElement(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::HTMLFrameSetElement::~HTMLFrameSetElement(WebCore::HTMLFrameSetElement *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 - 8);
    if (v4)
    {
      v5 = 8 * v4;
      do
      {
        if (*(_BYTE *)(v3 + v5 - 4) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + v5 - 8));
        }
        v5 -= 8;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v6 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 - 8);
    if (v7)
    {
      v8 = 8 * v7;
      do
      {
        if (*(_BYTE *)(v6 + v8 - 4) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + v8 - 8));
        }
        v8 -= 8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  WebCore::Element::~Element((uint64_t)this);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  bmalloc::api *v9;
  void *v10;

  v3 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 - 8);
    if (v4)
    {
      v5 = 8 * v4;
      do
      {
        if (*(_BYTE *)(v3 + v5 - 4) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + v5 - 8));
        }
        v5 -= 8;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v6 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 - 8);
    if (v7)
    {
      v8 = 8 * v7;
      do
      {
        if (*(_BYTE *)(v6 + v8 - 4) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + v8 - 8));
        }
        v8 -= 8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v9, v10);
}

void WebCore::HTMLHRElement::~HTMLHRElement(WebCore::HTMLHRElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

BOOL WTF::Detail::CallableWrapper<WebCore::HTMLFormElement::relList(void)::$_0,BOOL,WebCore::Document &,WTF::StringView>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;

  if ((_DWORD)a4 == 10)
  {
    if ((a4 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)a3 & 0xDF) != 0x4E
        || (*(_BYTE *)(a3 + 1) & 0xDF) != 0x4F
        || (*(_BYTE *)(a3 + 2) & 0xDF) != 0x52
        || (*(_BYTE *)(a3 + 3) & 0xDF) != 0x45
        || (*(_BYTE *)(a3 + 4) & 0xDF) != 0x46
        || (*(_BYTE *)(a3 + 5) & 0xDF) != 0x45
        || (*(_BYTE *)(a3 + 6) & 0xDF) != 0x52
        || (*(_BYTE *)(a3 + 7) & 0xDF) != 0x52
        || (*(_BYTE *)(a3 + 8) & 0xDF) != 0x45)
      {
        return 0;
      }
      v5 = *(unsigned __int8 *)(a3 + 9);
    }
    else
    {
      if ((*(_WORD *)a3 & 0xFFDF) != 0x4E
        || (*(_WORD *)(a3 + 2) & 0xFFDF) != 0x4F
        || (*(_WORD *)(a3 + 4) & 0xFFDF) != 0x52
        || (*(_WORD *)(a3 + 6) & 0xFFDF) != 0x45
        || (*(_WORD *)(a3 + 8) & 0xFFDF) != 0x46
        || (*(_WORD *)(a3 + 10) & 0xFFDF) != 0x45
        || (*(_WORD *)(a3 + 12) & 0xFFDF) != 0x52
        || (*(_WORD *)(a3 + 14) & 0xFFDF) != 0x52
        || (*(_WORD *)(a3 + 16) & 0xFFDF) != 0x45)
      {
        return 0;
      }
      v5 = *(unsigned __int16 *)(a3 + 18);
    }
    return (v5 & 0xFFFFFFDF) == 0x52;
  }
  if ((_DWORD)a4 == 8)
  {
    if ((a4 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)a3 & 0xDF) != 0x4E
        || (*(_BYTE *)(a3 + 1) & 0xDF) != 0x4F
        || (*(_BYTE *)(a3 + 2) & 0xDF) != 0x4F
        || (*(_BYTE *)(a3 + 3) & 0xDF) != 0x50
        || (*(_BYTE *)(a3 + 4) & 0xDF) != 0x45
        || (*(_BYTE *)(a3 + 5) & 0xDF) != 0x4E
        || (*(_BYTE *)(a3 + 6) & 0xDF) != 0x45)
      {
        return 0;
      }
      v5 = *(unsigned __int8 *)(a3 + 7);
    }
    else
    {
      if ((*(_WORD *)a3 & 0xFFDF) != 0x4E
        || (*(_WORD *)(a3 + 2) & 0xFFDF) != 0x4F
        || (*(_WORD *)(a3 + 4) & 0xFFDF) != 0x4F
        || (*(_WORD *)(a3 + 6) & 0xFFDF) != 0x50
        || (*(_WORD *)(a3 + 8) & 0xFFDF) != 0x45
        || (*(_WORD *)(a3 + 10) & 0xFFDF) != 0x4E
        || (*(_WORD *)(a3 + 12) & 0xFFDF) != 0x45)
      {
        return 0;
      }
      v5 = *(unsigned __int16 *)(a3 + 14);
    }
    return (v5 & 0xFFFFFFDF) == 0x52;
  }
  if ((_DWORD)a4 != 6)
    return 0;
  if ((a4 & 0xFF00000000) != 0)
  {
    if ((*(_BYTE *)a3 & 0xDF) != 0x4F
      || (*(_BYTE *)(a3 + 1) & 0xDF) != 0x50
      || (*(_BYTE *)(a3 + 2) & 0xDF) != 0x45
      || (*(_BYTE *)(a3 + 3) & 0xDF) != 0x4E
      || (*(_BYTE *)(a3 + 4) & 0xDF) != 0x45)
    {
      return 0;
    }
    v6 = *(unsigned __int8 *)(a3 + 5);
  }
  else
  {
    if ((*(_WORD *)a3 & 0xFFDF) != 0x4F
      || (*(_WORD *)(a3 + 2) & 0xFFDF) != 0x50
      || (*(_WORD *)(a3 + 4) & 0xFFDF) != 0x45
      || (*(_WORD *)(a3 + 6) & 0xFFDF) != 0x4E
      || (*(_WORD *)(a3 + 8) & 0xFFDF) != 0x45)
    {
      return 0;
    }
    v6 = *(unsigned __int16 *)(a3 + 10);
  }
  return (v6 & 0xFFFFFFDF) == 82;
}

void WebCore::CachedHTMLCollection<WebCore::HTMLFormControlsCollection,(WebCore::CollectionTraversalType)2>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1E33BEA00;
  if (*(_QWORD *)(a1 + 40) || (*(_BYTE *)(a1 + 72) & 3) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v5 = v4 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v5 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v6 = (uint64_t *)(v4 + 1760);
      v8 = a1;
      v7 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v4 + 1760), &v8);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v6, v7);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v3);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLFormControlsCollection,(WebCore::CollectionTraversalType)2>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)a1 = off_1E33BEA00;
  if (*(_QWORD *)(a1 + 40) || (*(_BYTE *)(a1 + 72) & 3) != 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v8 = v7 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v8 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v9 = (uint64_t *)(v7 + 1760);
      v11 = a1;
      v10 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v7 + 1760), &v11);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v9, v10);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v3);
  return bmalloc::api::isoDeallocate(v4, v5);
}

WebCore::Element *WebCore::CollectionIndexCache<WebCore::HTMLFormControlsCollection,WebCore::Element *>::nodeAt(WebCore::Element *result, WebCore::HTMLFormControlsCollection *this, unsigned int a3)
{
  WebCore::Element *v5;
  uint64_t v6;
  WebCore::Element *v7;
  unsigned int v8;
  WebCore::Element *v9;
  WebCore::Element *v10;
  WebCore::Element *v11;
  unsigned int v12;
  int v13;

  v5 = result;
  if ((*((_BYTE *)result + 32) & 1) != 0 && *((_DWORD *)result + 3) <= a3)
    return 0;
  if ((*((_BYTE *)result + 32) & 2) != 0)
  {
    if (*((_DWORD *)result + 7) > a3)
    {
      v6 = *(_QWORD *)(*((_QWORD *)result + 2) + 8 * a3);
      if (v6)
        return *(WebCore::Element **)(v6 + 8);
      return 0;
    }
    __break(0xC471u);
  }
  else
  {
    v7 = *(WebCore::Element **)result;
    if (!*(_QWORD *)result)
    {
      if ((*((_BYTE *)result + 32) & 1) == 0)
        WebCore::Document::registerCollection(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8), this);
      v9 = WebCore::HTMLFormControlsCollection::customElementAfter(this, 0);
      v10 = v9;
      *(_QWORD *)v5 = v9;
      *((_DWORD *)v5 + 2) = 0;
      v7 = v9;
      if (a3)
      {
        v7 = v9;
        if (v9)
        {
          *((_DWORD *)v5 + 2) = 0;
          v7 = v9;
          do
          {
            v11 = WebCore::HTMLFormControlsCollection::customElementAfter(this, v7);
            v7 = v11;
            if (!v11)
              break;
            v12 = *((_DWORD *)v5 + 2) + 1;
            *((_DWORD *)v5 + 2) = v12;
          }
          while (v12 < a3);
          *(_QWORD *)v5 = v11;
        }
      }
      if (!v7)
      {
        if (v10)
          v13 = *((_DWORD *)v5 + 2) + 1;
        else
          v13 = 0;
        v7 = 0;
        *((_DWORD *)v5 + 3) = v13;
        *((_BYTE *)v5 + 32) |= 1u;
      }
      return v7;
    }
    v8 = *((_DWORD *)result + 2);
    if (v8 >= a3)
    {
      if (v8 <= a3)
        return v7;
      return WebCore::CollectionIndexCache<WebCore::HTMLFormControlsCollection,WebCore::Element *>::traverseBackwardTo((uint64_t)result, this, a3);
    }
    else
    {
      return WebCore::CollectionIndexCache<WebCore::HTMLFormControlsCollection,WebCore::Element *>::traverseForwardTo((uint64_t)result, this, a3);
    }
  }
  return result;
}

WebCore::Element *WebCore::CollectionIndexCache<WebCore::HTMLFormControlsCollection,WebCore::Element *>::traverseForwardTo(uint64_t a1, WebCore::HTMLFormControlsCollection *this, int a3)
{
  WebCore::Element *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  WebCore::Element *v13;
  uint64_t v15;
  WebCore::HTMLFormControlsCollection *v16;

  v5 = *(WebCore::Element **)a1;
  if ((*(_BYTE *)(a1 + 32) & 1) != 0 || v5)
  {
LABEL_9:
    v8 = *(_DWORD *)(a1 + 8);
    if (v8 == a3)
    {
      *(_QWORD *)a1 = v5;
      if (v5)
        return v5;
      goto LABEL_15;
    }
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) == 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8);
    v7 = v6 + 4 * (((unint64_t)*(unsigned __int16 *)((char *)this + 21) >> 5) & 0xF);
    ++*(_DWORD *)(v7 + 1768);
    if ((*((_BYTE *)this + 22) & 2) != 0)
    {
      v16 = this;
      v9 = a3;
      WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v6 + 1760), (uint64_t *)&v16, (uint64_t)&v15);
      a3 = v9;
      v5 = *(WebCore::Element **)a1;
      goto LABEL_9;
    }
  }
  v8 = *(_DWORD *)(a1 + 8);
  if (v8 != a3)
  {
    v5 = 0;
LABEL_10:
    v10 = 0;
    v11 = a3 - v8;
    v12 = v8 - a3;
    while (1)
    {
      v13 = WebCore::HTMLFormControlsCollection::customElementAfter(this, v5);
      if (!v13)
        break;
      v5 = v13;
      if (v12 == --v10)
      {
        *(_QWORD *)a1 = v13;
        *(_DWORD *)(a1 + 8) += v11;
        return v5;
      }
    }
    *(_QWORD *)a1 = 0;
    a3 = *(_DWORD *)(a1 + 8) - v10;
    *(_DWORD *)(a1 + 8) = a3;
    goto LABEL_15;
  }
  *(_QWORD *)a1 = 0;
LABEL_15:
  v5 = 0;
  *(_DWORD *)(a1 + 12) = a3 + 1;
  *(_BYTE *)(a1 + 32) |= 1u;
  return v5;
}

WebCore::Element *WebCore::CollectionIndexCache<WebCore::HTMLFormControlsCollection,WebCore::Element *>::traverseBackwardTo(uint64_t a1, WebCore::HTMLFormControlsCollection *this, unsigned int a3)
{
  WebCore::Element *v6;
  WebCore::Element *v7;
  unsigned int v8;

  v6 = WebCore::HTMLFormControlsCollection::customElementAfter(this, 0);
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = 0;
  if (a3)
  {
    *(_DWORD *)(a1 + 8) = 0;
    do
    {
      v7 = WebCore::HTMLFormControlsCollection::customElementAfter(this, v6);
      v6 = v7;
      if (!v7)
        break;
      v8 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v8;
    }
    while (v8 < a3);
    *(_QWORD *)a1 = v7;
  }
  return v6;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = *(_QWORD *)a1 + 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        do
        {
          v7 = __ldaxr((unsigned int *)v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)v6));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)v6);
          v11 = *(unsigned int *)(v6 + 28);
          if ((_DWORD)v11)
          {
            v14 = v6;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v11));
            v6 = v14;
          }
          v12 = *(WTF **)(v6 + 16);
          if (v12)
          {
            *(_QWORD *)(v6 + 16) = 0;
            *(_DWORD *)(v6 + 24) = 0;
            v13 = v6;
            WTF::fastFree(v12, a2);
            v6 = v13;
          }
          WTF::fastFree((WTF *)v6, a2);
        }
      }
      v4 = (WTF *)((char *)v4 + 8);
    }
    while (v4 != (WTF *)v5);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

void WebCore::FormSubmission::~FormSubmission(WebCore::FormSubmission *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  WebCore::FormData *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  bmalloc::api *v17;
  void *v18;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[4];
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WebCore::FormData *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::FormData::~FormData(v8, a2);
      bmalloc::api::isoDeallocate(v17, v18);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    if (v9[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 24))(v9);
    else
      --v9[6];
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v14 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t *WTF::VectorTypeOperations<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::moveOverlapping(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;

  v3 = result;
  if (result > a3)
  {
    if (result != a2)
    {
      v4 = result;
      do
      {
        v5 = *v3;
        *v4++ = 0;
        *a3 = v5;
        v6 = v3;
        v7 = a2;
        v8 = a3 + 1;
        result = WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(v6, a2);
        a3 = v8;
        a2 = v7;
        v3 = v4;
      }
      while (v4 != a2);
    }
  }
  else if (a2 != result)
  {
    v9 = (uint64_t *)((char *)a3 + (((char *)a2 - (char *)result) & 0xFFFFFFFFFFFFFFF8) - 8);
    result = a2 - 1;
    v10 = a2 - 1;
    do
    {
      v11 = *result;
      *v10-- = 0;
      *v9-- = v11;
      v12 = WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(result, a2) == v3;
      result = v10;
    }
    while (!v12);
  }
  return result;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = (_QWORD *)v6;
      v9 = (WTF *)((char *)v4 + 8 * v5);
      v10 = v4;
      do
      {
        v11 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        *v8 = v11;
        v12 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        if (v12)
        {
          do
          {
            v13 = __ldaxr((unsigned int *)v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, (unsigned int *)v12));
          if (!v14)
          {
            atomic_store(1u, (unsigned int *)v12);
            v15 = *(unsigned int *)(v12 + 28);
            if ((_DWORD)v15)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v15));
            v16 = *(WTF **)(v12 + 16);
            if (v16)
            {
              *(_QWORD *)(v12 + 16) = 0;
              *(_DWORD *)(v12 + 24) = 0;
              WTF::fastFree(v16, v7);
            }
            WTF::fastFree((WTF *)v12, v7);
          }
        }
        ++v8;
        v10 = (WTF *)((char *)v10 + 8);
      }
      while (v10 != v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

BOOL WTF::Vector<WTF::WeakPtr<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<BOOL WTF::Vector<WTF::WeakPtr<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirst<WebCore::HTMLImageElement*>(WebCore::HTMLImageElement* const&)::{lambda(WTF::WeakPtr<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>> const&)#1}>(uint64_t *a1, uint64_t **a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *i;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  BOOL v21;
  _QWORD *v22;

  v3 = *((unsigned int *)a1 + 3);
  if (v3 <= a3)
  {
    return 0;
  }
  else
  {
    v4 = *a1;
    v5 = **a2;
    if (v5)
    {
      v6 = 1;
      while (1)
      {
        v7 = *(_QWORD *)(v4 + 8 * a3);
        if (v7)
        {
          if (*(_QWORD *)(v7 + 8) == v5)
            break;
        }
        v6 = ++a3 < v3;
        if (v3 == a3)
          return 0;
      }
    }
    else
    {
      v8 = a3 + 1;
      v6 = 1;
      for (i = (_QWORD *)(v4 + 8 * a3); ; ++i)
      {
        v7 = *i;
        if (!*i)
        {
          *i = 0;
          goto LABEL_18;
        }
        if (!*(_QWORD *)(v7 + 8))
          break;
        v6 = v8++ < v3;
        if (v8 - v3 == 1)
          return 0;
      }
      a3 = v8 - 1;
    }
    i = (_QWORD *)(v4 + 8 * a3);
    *i = 0;
    do
    {
      v10 = __ldaxr((unsigned int *)v7);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v7));
    if (!v11)
    {
      v22 = i;
      v21 = v6;
      v20 = a1;
      atomic_store(1u, (unsigned int *)v7);
      v16 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v16)
      {
        v19 = v7;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v16));
        v7 = v19;
      }
      v17 = *(WTF **)(v7 + 16);
      if (v17)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v18 = v7;
        WTF::fastFree(v17, a2);
        v7 = v18;
      }
      WTF::fastFree((WTF *)v7, a2);
      a1 = v20;
      v6 = v21;
      i = v22;
    }
LABEL_18:
    v12 = i + 1;
    v13 = *((unsigned int *)a1 + 3);
    v14 = *a1 + 8 * v13;
    while (v12 != (_QWORD *)v14)
    {
      *(v12 - 1) = *v12;
      *v12++ = 0;
    }
    *((_DWORD *)a1 + 3) = v13 - 1;
  }
  return v6;
}

void WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = v5;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v4 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = 0;
          v23 = *((_DWORD *)v14 + 4) >> 8;
          do
          {
            v24 = v23 & v21;
            v23 = ++v22 + v24;
          }
          while (*(_QWORD *)(v20 + 16 * v24));
          v25 = v20 + 16 * v24;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr((unsigned int *)v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, (unsigned int *)v26));
            if (!v28)
            {
              atomic_store(1u, (unsigned int *)v26);
              v38 = *(unsigned int *)(v26 + 28);
              if ((_DWORD)v38)
              {
                v47 = v26;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v26 + 16), (WTF::StringImpl *)(*(_QWORD *)(v26 + 16) + 32 * v38));
                v26 = v47;
              }
              v39 = *(WTF **)(v26 + 16);
              if (v39)
              {
                *(_QWORD *)(v26 + 16) = 0;
                *(_DWORD *)(v26 + 24) = 0;
                v46 = v26;
                WTF::fastFree(v39, v8);
                v26 = v46;
              }
              WTF::fastFree((WTF *)v26, v8);
            }
          }
          v29 = *(WTF::StringImpl **)v25;
          *(_QWORD *)v25 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v29 -= 2;
          }
          v30 = *v13;
          *v13 = 0;
          *(_QWORD *)v25 = v30;
          v31 = v4 + 16 * v11;
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          *(_QWORD *)(v25 + 8) = v32;
          v33 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          if (v33)
          {
            do
            {
              v34 = __ldaxr((unsigned int *)v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, (unsigned int *)v33));
            if (!v35)
            {
              atomic_store(1u, (unsigned int *)v33);
              v40 = *(unsigned int *)(v33 + 28);
              if ((_DWORD)v40)
              {
                v45 = v33;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v33 + 16), (WTF::StringImpl *)(*(_QWORD *)(v33 + 16) + 32 * v40));
                v33 = v45;
              }
              v41 = *(WTF **)(v33 + 16);
              if (v41)
              {
                *(_QWORD *)(v33 + 16) = 0;
                *(_DWORD *)(v33 + 24) = 0;
                v43 = v33;
                WTF::fastFree(v41, v8);
                v33 = v43;
              }
              WTF::fastFree((WTF *)v33, v8);
            }
          }
          v19 = *v13;
          *v13 = 0;
          if (!v19)
            goto LABEL_33;
          if (*(_DWORD *)v19 == 2)
            goto LABEL_35;
          *(_DWORD *)v19 -= 2;
        }
        else
        {
          v15 = v4 + 16 * v11;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            do
            {
              v17 = __ldaxr((unsigned int *)v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, (unsigned int *)v16));
            if (!v18)
            {
              atomic_store(1u, (unsigned int *)v16);
              v36 = *(unsigned int *)(v16 + 28);
              if ((_DWORD)v36)
              {
                v44 = v16;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v16 + 16), (WTF::StringImpl *)(*(_QWORD *)(v16 + 16) + 32 * v36));
                v16 = v44;
              }
              v37 = *(WTF **)(v16 + 16);
              if (v37)
              {
                *(_QWORD *)(v16 + 16) = 0;
                *(_DWORD *)(v16 + 24) = 0;
                v42 = v16;
                WTF::fastFree(v37, v8);
                v16 = v42;
              }
              WTF::fastFree((WTF *)v16, v8);
            }
          }
          v19 = *v13;
          *v13 = 0;
          if (!v19)
            goto LABEL_33;
          if (*(_DWORD *)v19 == 2)
          {
LABEL_35:
            WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v8);
            goto LABEL_33;
          }
          *(_DWORD *)v19 -= 2;
        }
      }
LABEL_33:
      if (++v11 == v12)
        goto LABEL_54;
    }
  }
  if (v4)
LABEL_54:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLFormElement::resumeFromDocumentSuspension(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *result, void *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = result[1];
  *result = off_1E33BEA78;
  result[1] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      {
        v3 = result;
        WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
        return v3;
      }
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLFormElement::resumeFromDocumentSuspension(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v2 = *((_QWORD *)a1 + 1);
  *(_QWORD *)a1 = off_1E33BEA78;
  *((_QWORD *)a1 + 1) = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      {
        v4 = a1;
        WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
        a1 = v4;
      }
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return WTF::fastFree(a1, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::HTMLFormElement::resumeFromDocumentSuspension(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  unsigned int *result;
  void *v2;
  WTF *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  WTF *v7;
  int v8;
  unsigned int v9;

  result = WebCore::HTMLFormElement::copyValidatedListedElementsVector(*(unsigned int **)(a1 + 8), (uint64_t)&v7);
  v3 = v7;
  if (v9)
  {
    v4 = 8 * v9;
    do
    {
      v5 = *(unsigned int **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 280))(v5);
      v4 -= 8;
    }
    while (v4);
    v3 = v7;
    if (v9)
    {
      v6 = 8 * v9;
      do
      {
        result = *(unsigned int **)v3;
        *(_QWORD *)v3 = 0;
        if (result)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 96))(result);
        v3 = (WTF *)((char *)v3 + 8);
        v6 -= 8;
      }
      while (v6);
      v3 = v7;
    }
  }
  if (v3)
  {
    v7 = 0;
    v8 = 0;
    return (unsigned int *)WTF::fastFree(v3, v2);
  }
  return result;
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  unint64_t v4;
  unsigned int **v5;
  uint64_t v6;
  WTF *v7;

  if (result[2] > a2)
  {
    v3 = result;
    v4 = result[3];
    if (v4 > a2)
    {
      v5 = (unsigned int **)(*(_QWORD *)result + 8 * a2);
      v6 = 8 * v4 - 8 * a2;
      do
      {
        result = *v5;
        *v5 = 0;
        if (result)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 96))(result);
        ++v5;
        v6 -= 8;
      }
      while (v6);
      v3[3] = a2;
      LODWORD(v4) = a2;
    }
    v7 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        result = (unsigned int *)WTF::fastRealloc(v7, (void *)(8 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v7)
        result = (unsigned int *)memcpy(result, v7, 8 * v4);
    }
    if (v7)
    {
      if (*(WTF **)v3 == v7)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v7, (void *)a2);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLFrameElementBase::openURL(WebCore::LockHistory,WebCore::LockBackForwardList)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E33BEAB0;
  WebCore::HTMLFrameElementBase::openURL(WebCore::LockHistory,WebCore::LockBackForwardList)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLFrameElementBase::openURL(WebCore::LockHistory,WebCore::LockBackForwardList)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E33BEAB0;
  WebCore::HTMLFrameElementBase::openURL(WebCore::LockHistory,WebCore::LockBackForwardList)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::HTMLFrameElementBase::openURL(WebCore::LockHistory,WebCore::LockBackForwardList)::$_0,void>::call(unsigned int *result)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  void *v5;
  uint64_t v6;
  WebCore::SecurityOrigin *v7;
  WebCore::SecurityOrigin *v8;
  WTF::StringImpl *v9;
  WebCore::SecurityOrigin *v10;

  v1 = *((_QWORD *)result + 2);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = result;
    v3 = *((_QWORD *)result + 1);
    *(_DWORD *)(v3 + 24) += 2;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 1272))(v3))
    {
      result = WebCore::FrameLoader::SubframeLoader::createFrameIfNecessary(*(unsigned int **)(*(_QWORD *)(*((_QWORD *)v2 + 5) + 280) + 56), (WebCore::HTMLFrameOwnerElement *)v3, (const WTF::AtomString *)(v2 + 6));
    }
    else
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
      if (*(_BYTE *)(v6 + 3435))
      {
        *(_BYTE *)(v6 + 3435) = 1;
      }
      else
      {
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v6 + 192), v4);
        v8 = v7;
        WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)(v2 + 12), (uint64_t *)&v10);
        *(_BYTE *)(v6 + 3435) = !WebCore::SecurityOrigin::isSameOriginAs(v8, v10);
        WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v10, v9);
      }
      result = (unsigned int *)WebCore::FrameLoader::SubframeLoader::requestFrame(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 5) + 280) + 56), (WebCore *)v3, (_QWORD *)(v3 + 128), (uint64_t)(v2 + 6), *((_BYTE *)v2 + 32), *((_BYTE *)v2 + 33));
    }
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v3, v5);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLFrameElementBase::didFinishInsertingNode(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = &off_1E33BEAD8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLFrameElementBase::didFinishInsertingNode(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = &off_1E33BEAD8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::HTMLFrameElementBase::didFinishInsertingNode(void)::$_0,void>::call(unsigned int *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *((_QWORD *)result + 2);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v3 = *((_QWORD *)result + 1);
    v4 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 24) = v4 + 2;
    *(_BYTE *)(v3 + 136) = 1;
    if ((*(_BYTE *)(v3 + 22) & 8) != 0)
    {
      result = (unsigned int *)WebCore::HTMLFrameElementBase::openURL((WTF::StringImpl *)v3, 1, 1);
      v4 = *(_DWORD *)(v3 + 24) - 2;
    }
    *(_BYTE *)(v3 + 136) = 0;
    if (v4)
    {
      *(_DWORD *)(v3 + 24) = v4;
    }
    else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLFrameOwnerElement::scheduleInvalidateStyleAndLayerComposition(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E33BEB00;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLFrameOwnerElement::scheduleInvalidateStyleAndLayerComposition(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33BEB00;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::Node *WTF::Detail::CallableWrapper<WebCore::HTMLFrameOwnerElement::scheduleInvalidateStyleAndLayerComposition(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WebCore::Node *result;
  uint64_t v3;
  WebCore::Node *ElementSibling;
  WebCore::Element *v5;

  v1 = *(_QWORD *)(a1 + 8);
  result = (WebCore::Node *)WebCore::Node::invalidateStyle(v1, 3u, 1);
  if ((*(_BYTE *)(v1 + 71) & 1) != 0)
  {
    v3 = *(_QWORD *)(v1 + 32);
    if (!v3 || (*(_WORD *)(v3 + 28) & 8) == 0 || (*(_BYTE *)(v3 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v1);
      return WebCore::invalidateForSiblingCombinators(ElementSibling, v5);
    }
  }
  return result;
}

WebCore::Element *WebCore::CollectionIndexCache<WebCore::HTMLFormControlsCollection,WebCore::Element *>::nodeCount(uint64_t a1, WebCore::HTMLCollection *a2)
{
  WebCore::Element *result;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
    return (WebCore::Element *)*(unsigned int *)(a1 + 12);
  if ((*(_BYTE *)(a1 + 32) & 2) == 0 && !*(_QWORD *)a1)
    WebCore::Document::registerCollection(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 40) + 8), a2);
  result = WebCore::CollectionIndexCache<WebCore::HTMLFormControlsCollection,WebCore::Element *>::computeNodeCountUpdatingListCache(a1, a2);
  *(_DWORD *)(a1 + 12) = (_DWORD)result;
  *(_BYTE *)(a1 + 32) |= 1u;
  return result;
}

WebCore::Element *WebCore::CollectionIndexCache<WebCore::HTMLFormControlsCollection,WebCore::Element *>::computeNodeCountUpdatingListCache(uint64_t a1, WebCore::HTMLFormControlsCollection *this)
{
  WebCore::Element *result;
  WebCore::Element *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  result = WebCore::HTMLFormControlsCollection::customElementAfter(this, 0);
  if (result)
  {
    v5 = result;
    v6 = *(_DWORD *)(a1 + 24);
    do
    {
      v7 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v7 == *(_DWORD *)(a1 + 24))
      {
        WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(a1 + 16, (uint64_t)v5);
      }
      else
      {
        v8 = *(_QWORD *)(a1 + 16);
        v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v5);
        if (v9)
        {
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 + 1, v9));
        }
        *(_QWORD *)(v8 + 8 * v7) = v9;
        ++*(_DWORD *)(a1 + 28);
      }
      v5 = WebCore::HTMLFormControlsCollection::customElementAfter(this, v5);
    }
    while (v5);
    *(_BYTE *)(a1 + 32) |= 2u;
    if (*(_DWORD *)(a1 + 24) != v6)
      WebCore::reportExtraMemoryAllocatedForCollectionIndexCache((WebCore *)(8
                                                                           * (*(_DWORD *)(a1 + 24) - v6)));
    return (WebCore::Element *)*(unsigned int *)(a1 + 28);
  }
  return result;
}

uint64_t WebCore::HTMLHeadingElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33C13C0;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLHtmlElement::create@<X0>(WebCore::HTMLHtmlElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = (char *)this + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v6 = WebCore::HTMLNames::htmlTag;
  if (WebCore::HTMLNames::htmlTag)
    ++*(_DWORD *)WebCore::HTMLNames::htmlTag;
  *(_QWORD *)(result + 96) = v6;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33BF070;
  *a2 = result;
  return result;
}

uint64_t WebCore::HTMLHtmlElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33BF070;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLIFrameElement::defaultTabIndex(WebCore::HTMLIFrameElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLIFrameElement::sandbox(WebCore::HTMLIFrameElement *this)
{
  uint64_t v1;
  _QWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;

  v1 = *((_QWORD *)this + 18);
  if (!v1)
  {
    v1 = WTF::fastMalloc((WTF *)0x38);
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E33C18B0;
    *(_QWORD *)v1 = this;
    *(_QWORD *)(v1 + 8) = &WebCore::HTMLNames::sandboxAttr;
    *(_WORD *)(v1 + 16) = 256;
    *(_QWORD *)(v1 + 24) = v1 + 40;
    *(_QWORD *)(v1 + 32) = 1;
    *(_QWORD *)(v1 + 48) = v3;
    v5 = *((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = v1;
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 48);
      *(_QWORD *)(v5 + 48) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = *(unsigned int *)(v5 + 36);
      if ((_DWORD)v7)
      {
        v8 = *(WTF::StringImpl ***)(v5 + 24);
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v4);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      v11 = *(WTF **)(v5 + 24);
      if ((WTF *)(v5 + 40) != v11 && v11 != 0)
      {
        *(_QWORD *)(v5 + 24) = 0;
        *(_DWORD *)(v5 + 32) = 0;
        WTF::fastFree(v11, v4);
      }
      WTF::fastFree((WTF *)v5, v4);
      return *((_QWORD *)this + 18);
    }
  }
  return v1;
}

void WebCore::HTMLIFrameElement::collectPresentationalHintsForAttribute(WebCore::HTMLIFrameElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  WebCore::HTMLElement *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unint64_t v13;
  WebCore::MutableStyleProperties *v14;
  int v15;
  uint64_t v16;
  WebCore::HTMLElement *v17;

  v5 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v5 > 0x1F7)
  {
    if (v5 == 504)
    {
      v16 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v12 = *(unsigned __int16 **)(v16 + 8);
        v13 = *(unsigned int *)(v16 + 4) | ((unint64_t)((*(_DWORD *)(v16 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v12 = 0;
        v13 = 0x100000000;
      }
      v14 = a4;
      v15 = 393;
    }
    else
    {
      if (v5 != 922)
        goto LABEL_17;
      v11 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v12 = *(unsigned __int16 **)(v11 + 8);
        v13 = *(unsigned int *)(v11 + 4) | ((unint64_t)((*(_DWORD *)(v11 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v12 = 0;
        v13 = 0x100000000;
      }
      v14 = a4;
      v15 = 450;
    }
    WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)this, v14, v15, v12, v13, 1);
    return;
  }
  if (v5 != 491)
  {
    if (v5 == 286)
    {
      WebCore::HTMLElement::applyAlignmentAttributeToStyle(this, a3, a4);
      return;
    }
LABEL_17:
    WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
    return;
  }
  v6 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v7 = *(uint64_t **)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v7, v8, (uint64_t *)&v17);
  if (HIDWORD(v17) || !(_DWORD)v17)
  {
    dword_1ECE88BE8 += 2;
    v17 = (WebCore::HTMLElement *)&dword_1ECE88BE8;
    WebCore::MutableStyleProperties::setProperty(a4, 485, (_DWORD **)&v17, 0);
    v10 = v17;
    v17 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
}

WebCore::LazyLoadFrameObserver *WebCore::HTMLIFrameElement::loadDeferredFrame(WebCore::HTMLIFrameElement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WebCore::LazyLoadFrameObserver *result;
  WTF *v7;
  void *v8;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  if (v3)
    *(_DWORD *)v3 += 2;
  v4 = *(WTF::StringImpl **)(*((_QWORD *)this + 20) + 8);
  if (v4)
    *(_DWORD *)v4 += 4;
  *((_QWORD *)this + 16) = v4;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      if (!v4)
        goto LABEL_11;
      goto LABEL_9;
    }
    *(_DWORD *)v3 -= 2;
  }
  if (!v4)
    goto LABEL_11;
LABEL_9:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, a2);
  else
    *(_DWORD *)v4 -= 2;
LABEL_11:
  if ((*((_BYTE *)this + 22) & 8) != 0)
    WebCore::HTMLFrameElementBase::openURL(this, 1, 1);
  if (v3)
    *(_DWORD *)v3 += 2;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v3;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = (WebCore::LazyLoadFrameObserver *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (result)
  {
    WebCore::LazyLoadFrameObserver::~LazyLoadFrameObserver(result, a2);
    result = (WebCore::LazyLoadFrameObserver *)WTF::fastFree(v7, v8);
  }
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      return (WebCore::LazyLoadFrameObserver *)WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return result;
}

int *WebCore::HTMLIFrameElement::referrerPolicyForBindings@<X0>(int *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;
  unsigned __int8 v13;
  _DWORD *v14;
  _DWORD *v15;

  v3 = *((_QWORD *)this + 20);
  if (v3)
  {
    v13 = *(_BYTE *)(v3 + 16);
    goto LABEL_18;
  }
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 4);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(v4 + 40);
      LODWORD(v7) = *(_DWORD *)(v4 + 52);
      if ((_DWORD)v7)
      {
LABEL_5:
        v7 = v7;
        v8 = (uint64_t *)(v6 + 8);
        while (1)
        {
          v9 = *(v8 - 1);
          if (v9 == WebCore::HTMLNames::referrerpolicyAttr
            || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 24)
            && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 32))
          {
            goto LABEL_14;
          }
          v8 += 2;
          if (!--v7)
          {
            v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            goto LABEL_14;
          }
        }
      }
    }
    else
    {
      v6 = v4 + 32;
      LODWORD(v7) = v5 >> 5;
      if ((_DWORD)v7)
        goto LABEL_5;
    }
  }
  v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_14:
  v10 = *v8;
  if (v10)
  {
    v11 = *(unsigned __int16 **)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  this = (int *)WebCore::parseReferrerPolicy(v11, v12, 2);
  v13 = this;
  if ((unsigned __int16)this <= 0x100u)
    v13 = 0;
LABEL_18:
  {
    v15 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v15 += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_3::operator() const(void)::impl += 2;
    this = &WebCore::convertEnumerationToString(WebCore::CanvasLineCap)::$_2::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::values[0] = (uint64_t)v15;
    unk_1EE2F45C0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_0::operator() const(void)::impl;
    qword_1EE2F45C8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_1::operator() const(void)::impl;
    unk_1EE2F45D0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_2::operator() const(void)::impl;
    qword_1EE2F45D8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_3::operator() const(void)::impl;
    unk_1EE2F45E0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_4::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_6::operator() const(void)::impl += 2;
    qword_1EE2F45E8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_5::operator() const(void)::impl;
    unk_1EE2F45F0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_6::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_7::operator() const(void)::impl += 2;
    qword_1EE2F45F8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_7::operator() const(void)::impl;
  }
  v14 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::values[v13];
  if (v14)
    *v14 += 2;
  *a2 = v14;
  return this;
}

void *WebCore::HTMLIFrameElement::loadingForBindings(WebCore::HTMLIFrameElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  int v10;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    goto LABEL_12;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_4;
LABEL_12:
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    goto LABEL_12;
LABEL_4:
  v4 = v4;
  v5 = (uint64_t *)(v3 + 8);
  while (1)
  {
    v6 = *(v5 - 1);
    if (v6 == WebCore::HTMLNames::loadingAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::loadingAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::loadingAttr + 32))
    {
      break;
    }
    v5 += 2;
    if (!--v4)
    {
      v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v7 = *v5;
  if (!*v5 || *(_DWORD *)(v7 + 4) != 4)
    return &WebCore::eagerAtomData;
  v9 = *(_QWORD *)(v7 + 8);
  if ((*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v9 & 0xDF) == 0x4C && (*(_BYTE *)(v9 + 1) & 0xDF) == 0x41)
    {
      result = &WebCore::eagerAtomData;
      if ((*(_BYTE *)(v9 + 2) & 0xDF) != 0x5A)
        return result;
      v10 = *(unsigned __int8 *)(v9 + 3);
      goto LABEL_21;
    }
    return &WebCore::eagerAtomData;
  }
  if ((*(_WORD *)v9 & 0xFFDF) != 0x4C || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0x41)
    return &WebCore::eagerAtomData;
  result = &WebCore::eagerAtomData;
  if ((*(_WORD *)(v9 + 4) & 0xFFDF) != 0x5A)
    return result;
  v10 = *(unsigned __int16 *)(v9 + 6);
LABEL_21:
  if ((v10 & 0xFFFFFFDF) == 0x59)
    return &WebCore::lazyAtomData;
  return result;
}

WTF::StringImpl *WebCore::HTMLIFrameElement::setSrcdoc@<X0>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  WebCore::HTMLIFrameElement *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl *v31[2];
  WTF::StringImpl *v32;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 40) + 8);
  v7 = *(_QWORD *)(v6 + 704);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v6 = v8;
  }
  v9 = (WTF::StringImpl *)(v6 + 192);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v31[0] = v9;
  v31[1] = (WTF::StringImpl *)&v27;
  v10 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v10 == -1)
    goto LABEL_38;
  v32 = (WTF::StringImpl *)v31;
  ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore26trustedTypeCompliantStringERNS8_22ScriptExecutionContextEONS_7variantIJNS6_6RefPtrINS8_11TrustedHTMLENS6_12RawPtrTraitsISD_EENS6_21DefaultRefDerefTraitsISD_EEEENS6_6StringEEEERKSJ_E3__0JZNS8_26trustedTypeCompliantStringESA_SL_SN_E3__1EEEEEJNS0_6__implIJSI_SJ_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v28, &v32, a2);
  v12 = v27;
  v27 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (v30)
  {
    if (v30 == 1)
    {
      v13 = v29;
      v29 = 0;
      *(_BYTE *)a3 = (_BYTE)v28;
      *(_QWORD *)(a3 + 8) = v13;
      v14 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33C18C8[v14])(v31, &v28);
    }
LABEL_38:
    v26 = (WebCore::HTMLIFrameElement *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::HTMLIFrameElement::lazyLoadFrameObserver(v26);
  }
  v15 = v28;
  v28 = 0;
  if (v15)
  {
    v32 = v15;
    if ((*((_BYTE *)v15 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v17 = v32;
      v15 = v31[0];
      v31[0] = 0;
      v32 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
  }
  v31[0] = v15;
  v18 = *((_QWORD *)a1 + 13);
  if (!v18)
    goto LABEL_27;
  v19 = *(_DWORD *)(v18 + 4);
  if ((v19 & 1) != 0)
  {
    v20 = *(uint64_t **)(v18 + 40);
    v21 = *(_DWORD *)(v18 + 52);
    if (!v21)
    {
LABEL_27:
      v22 = 0xFFFFFFFFLL;
      goto LABEL_28;
    }
  }
  else
  {
    v20 = (uint64_t *)(v18 + 32);
    v21 = v19 >> 5;
    if (!v21)
      goto LABEL_27;
  }
  v22 = 0;
  while (1)
  {
    v23 = *v20;
    if (*v20 == WebCore::HTMLNames::srcdocAttr
      || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcdocAttr + 24)
      && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcdocAttr + 32))
    {
      break;
    }
    ++v22;
    v20 += 2;
    if (v21 == v22)
      goto LABEL_27;
  }
LABEL_28:
  WebCore::Element::setAttributeInternal(a1, v22, (WebCore::TreeScope *)&WebCore::HTMLNames::srcdocAttr, v31, 0);
  result = v31[0];
  v31[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v14 = v30;
  if (v30 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33C18C8[v14])(v31, &v28);
  return result;
}

_QWORD *WebCore::HTMLIFrameElement::lazyLoadFrameObserver(WebCore::HTMLIFrameElement *this)
{
  _QWORD *v1;
  unsigned int *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  WebCore::LazyLoadFrameObserver *v6;
  WTF *v7;
  void *v8;

  v1 = (_QWORD *)*((_QWORD *)this + 20);
  if (!v1)
  {
    v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    v3 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)this);
    do
      v5 = __ldaxr(v3);
    while (__stlxr(v5 + 1, v3));
    *v1 = v3;
    v1[1] = 0;
    v1[3] = 0;
    v6 = (WebCore::LazyLoadFrameObserver *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = v1;
    if (v6)
    {
      WebCore::LazyLoadFrameObserver::~LazyLoadFrameObserver(v6, v4);
      WTF::fastFree(v7, v8);
      return (_QWORD *)*((_QWORD *)this + 20);
    }
  }
  return v1;
}

BOOL WebCore::HTMLIFrameElement::isLazyLoadObserverActive(WebCore::HTMLIFrameElement *this)
{
  return *((_QWORD *)this + 20) != 0;
}

uint64_t WebCore::HTMLImageElement::HTMLImageElement(uint64_t a1, _DWORD **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _DWORD *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t StatusReg;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a3;
  *(_OWORD *)(a1 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(a1 + 24) = 0x1C1C00000002;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a3 + 96;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  ++*(_DWORD *)(a3 + 3324);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v6 = *a2;
  if (*a2)
    ++*v6;
  v7 = 0;
  *(_QWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = off_1E33BC680;
  *(_QWORD *)(a1 + 112) = off_1E33AF7B0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = off_1E33B3CE0;
  *(_QWORD *)(a1 + 136) = 0;
  if (a4)
  {
    v7 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a4);
    if (v7)
    {
      do
        v18 = __ldaxr(v7);
      while (__stlxr(v18 + 1, v7));
    }
  }
  *(_QWORD *)(a1 + 144) = v7;
  v8 = *(_QWORD *)(v4 + 704);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v4 = v9;
  }
  *(_QWORD *)(a1 + 152) = &off_1E33A18C0;
  *(_QWORD *)(a1 + 160) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(a1 + 152), (WebCore::ScriptExecutionContext *)(v4 + 192));
  *(_QWORD *)(a1 + 152) = &off_1E33A0540;
  *(_QWORD *)(a1 + 168) = 0;
  if (*(_BYTE *)(v4 + 470))
  {
    __break(0xC471u);
    JUMPOUT(0x195BE6F70);
  }
  v20 = a1 + 152;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v4 + 320), &v20, (uint64_t)&v19);
  *(_QWORD *)a1 = off_1E33BF560;
  *(_QWORD *)(a1 + 112) = &unk_1E33BFAB8;
  *(_QWORD *)(a1 + 128) = &unk_1E33BFB20;
  *(_QWORD *)(a1 + 152) = &unk_1E33BFB98;
  v10 = WTF::fastMalloc((WTF *)0x88);
  *(_QWORD *)v10 = off_1E33F60F0;
  *(_QWORD *)(v10 + 8) = 0;
  v11 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a1);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(v10 + 16) = v11;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  v14 = *(unsigned int **)(StatusReg + 736);
  if (!v14)
    v14 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(v10 + 72) = v14;
  *(_QWORD *)(v10 + 32) = off_1E31F7378;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v16 = off_1E33F6510;
  v16[1] = WebCore::ImageLoader::timerFired;
  v16[2] = 0;
  v16[3] = v10;
  *(_QWORD *)(v10 + 80) = v16;
  *(_QWORD *)(v10 + 120) = 0;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_BYTE *)(v10 + 128) = *(_BYTE *)(v10 + 128) & 0xC0 | 8;
  *(_BYTE *)(v10 + 129) = 0;
  *(_QWORD *)v10 = off_1E33BFBF0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = v10;
  *(_QWORD *)(a1 + 200) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 200));
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 256) = 2;
  *(_DWORD *)(a1 + 260) = 1065353216;
  *(_WORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  return a1;
}

unsigned int *WebCore::HTMLImageElement::create@<X0>(WebCore::HTMLImageElement *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::HTMLImageElement *v10;
  WebCore::ImageLoader *v11;
  WebCore::ImageLoader *v12;
  unsigned int *result;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v5 = bmalloc::api::isoAllocate();
  v6 = v5;
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x1C1C00000002;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = (char *)this + 96;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  v7 = WebCore::HTMLNames::imgTag;
  if (WebCore::HTMLNames::imgTag)
    ++*(_DWORD *)WebCore::HTMLNames::imgTag;
  *(_QWORD *)(v5 + 96) = v7;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33BC680;
  *(_QWORD *)(v5 + 112) = off_1E33AF7B0;
  *(_QWORD *)(v5 + 120) = 0;
  v8 = v5 + 152;
  *(_QWORD *)(v5 + 136) = 0;
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 128) = off_1E33B3CE0;
  v9 = *((_QWORD *)this + 88);
  if (v9)
  {
    v10 = *(WebCore::HTMLImageElement **)(v9 + 8);
    if (v10)
      this = v10;
  }
  *(_QWORD *)(v5 + 152) = &off_1E33A18C0;
  *(_QWORD *)(v5 + 160) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v5 + 152), (WebCore::HTMLImageElement *)((char *)this + 192));
  *(_QWORD *)(v6 + 152) = &off_1E33A0540;
  *(_QWORD *)(v6 + 168) = 0;
  if (*((_BYTE *)this + 470))
  {
    __break(0xC471u);
    JUMPOUT(0x195BE719CLL);
  }
  v19 = v6 + 152;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)this + 40, &v19, (uint64_t)&v18);
  *(_QWORD *)v6 = off_1E33BF560;
  *(_QWORD *)(v6 + 112) = &unk_1E33BFAB8;
  *(_QWORD *)(v6 + 128) = &unk_1E33BFB20;
  *(_QWORD *)(v6 + 152) = &unk_1E33BFB98;
  v11 = (WebCore::ImageLoader *)WTF::fastMalloc((WTF *)0x88);
  v12 = WebCore::ImageLoader::ImageLoader(v11, (WebCore::Element *)v6);
  *(_QWORD *)v12 = off_1E33BFBF0;
  *(_QWORD *)(v6 + 176) = v12;
  *(_QWORD *)(v6 + 184) = 0;
  *(_QWORD *)(v6 + 192) = 0;
  *(_QWORD *)(v6 + 200) = 0;
  result = (unsigned int *)WTF::URL::invalidate((WTF::URL *)(v6 + 200));
  *(_QWORD *)(v6 + 240) = 0;
  *(_QWORD *)(v6 + 248) = 0;
  *(_BYTE *)(v6 + 256) = 2;
  *(_DWORD *)(v6 + 260) = 1065353216;
  *(_WORD *)(v6 + 264) = 0;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 288) = 0u;
  *a2 = v6;
  v15 = *(_QWORD *)(v6 + 160);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      v17 = *(unsigned __int8 *)(v16 + 178);
      if (*(_BYTE *)(v16 + 178))
      {
        if (v17 == 1 || v17 == 2)
          ++*(_DWORD *)(v16 + 216);
      }
      else
      {
        *(_DWORD *)(v16 - 264) += 2;
      }
      if (*(_BYTE *)(v16 + 179))
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 24))(v8, *(unsigned __int8 *)(v16 + 177));
      if (*(_BYTE *)(v16 + 180))
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
      return WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed((unsigned int *)(v16 - 96), v14);
    }
  }
  return result;
}

void WebCore::HTMLImageElement::~HTMLImageElement(WebCore::HTMLImageElement *this)
{
  char *v2;
  WebCore::ActiveDOMObject *v3;
  _QWORD *v4;
  WTF **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  WebCore::ImageLoader *v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::ScriptExecutionContext *v31;
  int v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  WebCore::Node *v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WebCore::Node *v58;

  *(_QWORD *)this = off_1E33BF560;
  *((_QWORD *)this + 14) = &unk_1E33BFAB8;
  *((_QWORD *)this + 16) = &unk_1E33BFB20;
  v2 = (char *)this + 128;
  *((_QWORD *)this + 19) = &unk_1E33BFB98;
  v3 = (WebCore::HTMLImageElement *)((char *)this + 152);
  v5 = (WTF **)((char *)this + 184);
  v4 = (_QWORD *)*((_QWORD *)this + 23);
  if (v4)
    WebCore::Element::disconnectFromIntersectionObserversSlow(this, v4);
  WTF::WeakHashSet<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::HTMLImageElement>(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 2000, this);
  v58 = 0;
  v7 = *((_QWORD *)this + 17);
  if (v7)
  {
    if (*(_QWORD *)(v7 + 8))
    {
      (*(void (**)(char *, WebCore::Node **))(*(_QWORD *)v2 + 80))(v2, &v58);
      v43 = v58;
      v58 = 0;
      if (v43)
      {
        if (*((_DWORD *)v43 + 6) == 2)
        {
          if ((*((_WORD *)v43 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v43, v6);
        }
        else
        {
          *((_DWORD *)v43 + 6) -= 2;
        }
      }
    }
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 24);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          WTF::WeakHashSet<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::HTMLImageElement>(v11 + 552, this);
          if (!WTF::WeakHashSet<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(v11 + 552, v12)&& !*(_BYTE *)(v11 + 545))
          {
            (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v11 + 48) + 16) + 1448))(*(_QWORD *)(*(_QWORD *)(v11 + 48) + 16), 0);
          }
        }
      }
    }
  }
  v13 = *((unsigned int *)this + 75);
  if ((_DWORD)v13)
  {
    v52 = *((_QWORD *)this + 36);
    v53 = 24 * v13;
    do
    {
      v52 = WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v52, v6) + 24;
      v53 -= 24;
    }
    while (v53);
  }
  v14 = (WTF *)*((_QWORD *)this + 36);
  if (v14)
  {
    *((_QWORD *)this + 36) = 0;
    *((_DWORD *)this + 74) = 0;
    WTF::fastFree(v14, v6);
  }
  v15 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v15));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v15);
      v44 = *(unsigned int *)(v15 + 28);
      if ((_DWORD)v44)
      {
        v56 = v15;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v44));
        v15 = v56;
      }
      v45 = *(WTF **)(v15 + 16);
      if (v45)
      {
        *(_QWORD *)(v15 + 16) = 0;
        *(_DWORD *)(v15 + 24) = 0;
        v54 = v15;
        WTF::fastFree(v45, v6);
        v15 = v54;
      }
      WTF::fastFree((WTF *)v15, v6);
    }
  }
  v18 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr((unsigned int *)v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v18));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v18);
      v46 = *(unsigned int *)(v18 + 28);
      if ((_DWORD)v46)
      {
        v57 = v18;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v18 + 16), (WTF::StringImpl *)(*(_QWORD *)(v18 + 16) + 32 * v46));
        v18 = v57;
      }
      v47 = *(WTF **)(v18 + 16);
      if (v47)
      {
        *(_QWORD *)(v18 + 16) = 0;
        *(_DWORD *)(v18 + 24) = 0;
        v55 = v18;
        WTF::fastFree(v47, v6);
        v18 = v55;
      }
      WTF::fastFree((WTF *)v18, v6);
    }
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *v5;
  *v5 = 0;
  if (v25)
    std::default_delete<WebCore::IntersectionObserverData>::operator()[abi:sn180100]((int)v5, v25);
  v26 = (WebCore::ImageLoader *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v26)
  {
    WebCore::ImageLoader::~ImageLoader(v26, v25);
    WTF::fastFree(v27, v28);
  }
  *((_QWORD *)this + 19) = &off_1E33A0540;
  v29 = *((_QWORD *)this + 20);
  if (v29)
  {
    v30 = *(_QWORD *)(v29 + 8);
    if (v30)
    {
      v31 = (WebCore::ScriptExecutionContext *)(v30 - 96);
      v32 = *(unsigned __int8 *)(v30 + 178);
      if (*(_BYTE *)(v30 + 178))
      {
        if (v32 == 1 || v32 == 2)
          ++*(_DWORD *)(v30 + 216);
      }
      else
      {
        *(_DWORD *)(v30 - 264) += 2;
      }
      WebCore::ScriptExecutionContext::willDestroyActiveDOMObject(v31, v3);
      WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed((unsigned int *)v31, v33);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(v3, v25);
  *((_QWORD *)this + 16) = off_1E33B3CE0;
  v35 = *((_QWORD *)this + 17);
  if (v35 && *(_QWORD *)(v35 + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x195BE7674);
  }
  v36 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v36)
  {
    do
    {
      v37 = __ldaxr((unsigned int *)v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, (unsigned int *)v36));
    if (!v38)
    {
      atomic_store(1u, (unsigned int *)v36);
      v48 = *(unsigned int *)(v36 + 28);
      if ((_DWORD)v48)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v36 + 16), (WTF::StringImpl *)(*(_QWORD *)(v36 + 16) + 32 * v48));
      v49 = *(WTF **)(v36 + 16);
      if (v49)
      {
        *(_QWORD *)(v36 + 16) = 0;
        *(_DWORD *)(v36 + 24) = 0;
        WTF::fastFree(v49, v34);
      }
      WTF::fastFree((WTF *)v36, v34);
    }
  }
  v39 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v39)
  {
    do
    {
      v40 = __ldaxr((unsigned int *)v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, (unsigned int *)v39));
    if (!v41)
    {
      atomic_store(1u, (unsigned int *)v39);
      v50 = *(unsigned int *)(v39 + 28);
      if ((_DWORD)v50)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v39 + 16), (WTF::StringImpl *)(*(_QWORD *)(v39 + 16) + 32 * v50));
      v51 = *(WTF **)(v39 + 16);
      if (v51)
      {
        *(_QWORD *)(v39 + 16) = 0;
        *(_DWORD *)(v39 + 24) = 0;
        WTF::fastFree(v51, v34);
      }
      WTF::fastFree((WTF *)v39, v34);
    }
  }
  v42 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 14) = off_1E33AF7B0;
  *((_QWORD *)this + 15) = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v34);
    else
      *(_DWORD *)v42 -= 2;
  }
  WebCore::Element::~Element((uint64_t)this);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::HTMLImageElement::~HTMLImageElement(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void `non-virtual thunk to'WebCore::HTMLImageElement::~HTMLImageElement(WebCore::HTMLImageElement *this)
{
  WebCore::HTMLImageElement::~HTMLImageElement((WebCore::HTMLImageElement *)((char *)this - 112));
}

{
  WebCore::HTMLImageElement::~HTMLImageElement((WebCore::HTMLImageElement *)((char *)this - 128));
}

{
  WebCore::HTMLImageElement::~HTMLImageElement((WebCore::HTMLImageElement *)((char *)this - 152));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::HTMLImageElement::~HTMLImageElement((WebCore::HTMLImageElement *)((char *)this - 112));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::HTMLImageElement::~HTMLImageElement((WebCore::HTMLImageElement *)((char *)this - 128));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::HTMLImageElement::~HTMLImageElement((WebCore::HTMLImageElement *)((char *)this - 152));
  bmalloc::api::isoDeallocate(v1, v2);
}

unsigned int *WebCore::HTMLImageElement::resetFormOwner(WebCore::HTMLImageElement *this, const WebCore::Element *a2)
{
  unsigned int *result;
  void *v4;
  uint64_t v5;
  unsigned int *v6;

  result = (unsigned int *)WebCore::HTMLFormElement::findClosestFormAncestor(this, a2);
  if (result)
    result[6] += 2;
  v6 = result;
  v5 = *((_QWORD *)this + 17);
  if (v5)
    v5 = *(_QWORD *)(v5 + 8);
  if (result != (unsigned int *)v5)
  {
    (*(void (**)(char *, unsigned int **))(*((_QWORD *)this + 16) + 80))((char *)this + 128, &v6);
    result = v6;
  }
  v6 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v4);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLImageElement::resetFormOwner(unsigned int *this, void *a2)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;

  v2 = *((_QWORD *)this - 12);
  if (v2)
  {
    v3 = *(_WORD *)(v2 + 28);
    if ((v3 & 8) != 0)
    {
      while ((v3 & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
      {
        v2 = *(_QWORD *)(v2 + 32);
        if (!v2)
          goto LABEL_8;
        v3 = *(_WORD *)(v2 + 28);
        if ((v3 & 8) == 0)
          goto LABEL_7;
      }
      *(_DWORD *)(v2 + 24) += 2;
    }
    else
    {
LABEL_7:
      v2 = 0;
    }
  }
LABEL_8:
  v7 = v2;
  v4 = *((_QWORD *)this + 1);
  if (v4)
    v4 = *(_QWORD *)(v4 + 8);
  if (v2 != v4)
  {
    this = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t *))(*(_QWORD *)this + 80))(this, &v7);
    v2 = v7;
  }
  v7 = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      v5 = *(_WORD *)(v2 + 30);
      if ((v5 & 0x400) == 0)
      {
        v6 = *(_WORD *)(v2 + 28);
        if ((v6 & 0xF000) == 0x9000)
        {
          return WebCore::Document::removedLastRef((WebCore::Document *)v2, a2);
        }
        else
        {
          if ((v6 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
            v5 = *(_WORD *)(v2 + 30);
          }
          *(_WORD *)(v2 + 30) = v5 | 0x400;
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
        }
      }
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return this;
}

unsigned int *WebCore::HTMLImageElement::setFormInternal(uint64_t a1, uint64_t *a2)
{
  WebCore::FormAssociatedElement *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  __int16 v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  v4 = (WebCore::FormAssociatedElement *)(a1 + 128);
  v5 = *(_QWORD *)(a1 + 136);
  if (v5)
  {
    v20 = *(_QWORD *)(v5 + 8);
    if (v20)
    {
      WebCore::HTMLFormElement::removeFromPastNamesMap(*(WebCore::HTMLFormElement **)(v5 + 8), v4);
      v21 = a1;
      v22 = &v21;
      WTF::Vector<WTF::WeakPtr<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<BOOL WTF::Vector<WTF::WeakPtr<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirst<WebCore::HTMLImageElement*>(WebCore::HTMLImageElement* const&)::{lambda(WTF::WeakPtr<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>> const&)#1}>((uint64_t *)(v20 + 192), &v22, 0);
    }
  }
  v6 = *a2;
  if (*a2)
  {
    *(_DWORD *)(v6 + 24) += 2;
    v22 = (uint64_t *)v6;
    result = (unsigned int *)WebCore::FormAssociatedElement::setFormInternal((uint64_t)v4, (uint64_t *)&v22);
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      v18 = *(_WORD *)(v6 + 30);
      if ((v18 & 0x400) == 0)
      {
        v19 = *(_WORD *)(v6 + 28);
        if ((v19 & 0xF000) == 0x9000)
        {
          result = WebCore::Document::removedLastRef((WebCore::Document *)v6, v8);
        }
        else
        {
          if ((v19 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
            v18 = *(_WORD *)(v6 + 30);
          }
          *(_WORD *)(v6 + 30) = v18 | 0x400;
          result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
        }
      }
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  else
  {
    v22 = 0;
    result = (unsigned int *)WebCore::FormAssociatedElement::setFormInternal((uint64_t)v4, (uint64_t *)&v22);
  }
  v9 = *a2;
  if (v9)
  {
    v10 = (uint64_t *)(v9 + 192);
    v11 = *(unsigned int *)(v9 + 204);
    if ((_DWORD)v11 == *(_DWORD *)(v9 + 200))
    {
      v12 = v11 + (v11 >> 2);
      if (v12 >= 0x10)
        v13 = v12 + 1;
      else
        v13 = 16;
      if (v13 <= v11 + 1)
        v14 = v11 + 1;
      else
        v14 = v13;
      WTF::Vector<WTF::WeakPtr<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v10, v14);
      v11 = *(unsigned int *)(v9 + 204);
      v15 = *(_QWORD *)(v9 + 192);
      result = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(a1);
      if (result)
      {
        do
          v16 = __ldaxr(result);
        while (__stlxr(v16 + 1, result));
      }
    }
    else
    {
      v15 = *v10;
      result = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(a1);
      if (result)
      {
        do
          v17 = __ldaxr(result);
        while (__stlxr(v17 + 1, result));
      }
    }
    *(_QWORD *)(v15 + 8 * v11) = result;
    ++*(_DWORD *)(v9 + 204);
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLImageElement::setFormInternal(uint64_t a1, uint64_t *a2)
{
  return WebCore::HTMLImageElement::setFormInternal(a1 - 128, a2);
}

unsigned int *WebCore::HTMLImageElement::formOwnerRemovedFromTree(unsigned int *this, const WebCore::Node *a2)
{
  uint64_t v2;
  const WebCore::Node *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  WebCore::Document *v9;
  uint64_t v10;

  v2 = (uint64_t)this;
  do
  {
    v3 = (const WebCore::Node *)v2;
    v2 = *(_QWORD *)(v2 + 32);
  }
  while (v2);
  if (v3 != a2)
  {
    v10 = 0;
    v4 = *((_QWORD *)this + 17);
    if (v4)
    {
      if (*(_QWORD *)(v4 + 8))
      {
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t *))(*((_QWORD *)this + 16) + 80))(this + 32, &v10);
        v6 = v10;
        v10 = 0;
        if (v6)
        {
          if (*(_DWORD *)(v6 + 24) == 2)
          {
            v7 = *(_WORD *)(v6 + 30);
            if ((v7 & 0x400) == 0)
            {
              v9 = (WebCore::Document *)v6;
              v8 = *(_WORD *)(v6 + 28);
              if ((v8 & 0xF000) == 0x9000)
              {
                return WebCore::Document::removedLastRef(v9, v5);
              }
              else
              {
                if ((v8 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)v9 + 20) + 16))(*((_QWORD *)v9 + 20));
                  v7 = *((_WORD *)v9 + 15);
                }
                *((_WORD *)v9 + 15) = v7 | 0x400;
                return (unsigned int *)(*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v9 + 72))(v9);
              }
            }
          }
          else
          {
            *(_DWORD *)(v6 + 24) -= 2;
          }
        }
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::HTMLImageElement::setWidth(WebCore::HTMLImageElement *this, int a2)
{
  __n128 v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v9;

  WTF::AtomString::number((WTF::AtomString *)(a2 & ~(a2 >> 31)));
  WebCore::Element::setAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::widthAttr, &v6, 0, &v7, v3);
  if (v9 && v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLImageElement::setHeight(WebCore::HTMLImageElement *this, int a2)
{
  __n128 v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v9;

  WTF::AtomString::number((WTF::AtomString *)(a2 & ~(a2 >> 31)));
  WebCore::Element::setAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::heightAttr, &v6, 0, &v7, v3);
  if (v9 && v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::HTMLImageElement::collectPresentationalHintsForAttribute(WebCore::HTMLImageElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  unsigned int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unint64_t v30;
  WebCore::HTMLImageElement *v31;
  WebCore::MutableStyleProperties *v32;
  int v33;
  uint64_t v34;
  unsigned __int16 *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unsigned int v44;
  WebCore::HTMLElement *v45;
  uint64_t v46;
  unsigned __int16 *v47;
  unint64_t v48;
  uint64_t v49;
  double v50;
  char v51;
  char v52;
  double v53;
  char v54;
  char v55;

  v7 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v7 > 0x1FE)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) <= 0x399u)
    {
      switch(v7)
      {
        case 0x1FFu:
          v46 = *(_QWORD *)a3;
          if (*(_QWORD *)a3)
          {
            v47 = *(unsigned __int16 **)(v46 + 8);
            v48 = *(unsigned int *)(v46 + 4) | ((unint64_t)((*(_DWORD *)(v46 + 16) >> 2) & 1) << 32);
          }
          else
          {
            v47 = 0;
            v48 = 0x100000000;
          }
          WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)this, a4, 405, v47, v48, 1);
          v49 = *(_QWORD *)a3;
          if (*(_QWORD *)a3)
          {
            v29 = *(unsigned __int16 **)(v49 + 8);
            v30 = *(unsigned int *)(v49 + 4) | ((unint64_t)((*(_DWORD *)(v49 + 16) >> 2) & 1) << 32);
          }
          else
          {
            v29 = 0;
            v30 = 0x100000000;
          }
          v31 = this;
          v32 = a4;
          v33 = 406;
          break;
        case 0x382u:
          WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 288, (uint64_t)a3);
          return;
        case 0x390u:
          v25 = *(_QWORD *)a3;
          if (*(_QWORD *)a3)
          {
            v26 = *(unsigned __int16 **)(v25 + 8);
            v27 = *(unsigned int *)(v25 + 4) | ((unint64_t)((*(_DWORD *)(v25 + 16) >> 2) & 1) << 32);
          }
          else
          {
            v26 = 0;
            v27 = 0x100000000;
          }
          WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)this, a4, 407, v26, v27, 1);
          v28 = *(_QWORD *)a3;
          if (*(_QWORD *)a3)
          {
            v29 = *(unsigned __int16 **)(v28 + 8);
            v30 = *(unsigned int *)(v28 + 4) | ((unint64_t)((*(_DWORD *)(v28 + 16) >> 2) & 1) << 32);
          }
          else
          {
            v29 = 0;
            v30 = 0x100000000;
          }
          v31 = this;
          v32 = a4;
          v33 = 402;
          break;
        default:
          goto LABEL_5;
      }
      WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)v31, v32, v33, v29, v30, 1);
      return;
    }
    if (v7 != 922)
      goto LABEL_5;
    v8 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v9 = *(unsigned __int16 **)(v8 + 8);
      v10 = *(unsigned int *)(v8 + 4) | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v9 = 0;
      v10 = 0x100000000;
    }
    WebCore::parseHTMLDimensionInternal((uint64_t)&v53, v9, v10, 1);
    if (v55)
    {
      if (v54)
        v11 = 6;
      else
        v11 = 3;
      WebCore::StyledElement::addPropertyToPresentationalHintStyle(v53, (uint64_t)this, a4, 450, v11);
    }
    v12 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v13 = *(_DWORD *)(v12 + 16);
      v14 = *(unsigned __int16 **)(v12 + 8);
      v12 = *(unsigned int *)(v12 + 4);
      v15 = (unint64_t)((v13 >> 2) & 1) << 32;
    }
    else
    {
      v14 = 0;
      v15 = 0x100000000;
    }
    v16 = *((_QWORD *)this + 13);
    if (v16
      && ((v17 = *(_DWORD *)(v16 + 4), (v17 & 1) != 0)
        ? (v18 = *(_QWORD *)(v16 + 40), LODWORD(v19) = *(_DWORD *)(v16 + 52))
        : (v18 = v16 + 32, LODWORD(v19) = v17 >> 5),
          (_DWORD)v19))
    {
      v19 = v19;
      v20 = (uint64_t *)(v18 + 8);
      while (1)
      {
        v21 = *(v20 - 1);
        if (v21 == WebCore::HTMLNames::heightAttr
          || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 24)
          && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 32))
        {
          break;
        }
        v20 += 2;
        if (!--v19)
        {
          v20 = (uint64_t *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v20 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    }
    v22 = *v20;
    if (v22)
      goto LABEL_55;
    goto LABEL_27;
  }
  switch(v7)
  {
    case 0x1F8u:
      v34 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v35 = *(unsigned __int16 **)(v34 + 8);
        v36 = *(unsigned int *)(v34 + 4) | ((unint64_t)((*(_DWORD *)(v34 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v35 = 0;
        v36 = 0x100000000;
      }
      WebCore::parseHTMLDimensionInternal((uint64_t)&v53, v35, v36, 1);
      if (v55)
      {
        if (v54)
          v37 = 6;
        else
          v37 = 3;
        WebCore::StyledElement::addPropertyToPresentationalHintStyle(v53, (uint64_t)this, a4, 393, v37);
      }
      v38 = *((_QWORD *)this + 13);
      if (v38
        && ((v39 = *(_DWORD *)(v38 + 4), (v39 & 1) != 0)
          ? (v40 = *(_QWORD *)(v38 + 40), LODWORD(v41) = *(_DWORD *)(v38 + 52))
          : (v40 = v38 + 32, LODWORD(v41) = v39 >> 5),
            (_DWORD)v41))
      {
        v41 = v41;
        v42 = (uint64_t *)(v40 + 8);
        while (1)
        {
          v43 = *(v42 - 1);
          if (v43 == WebCore::HTMLNames::widthAttr
            || *(_QWORD *)(v43 + 24) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 24)
            && *(_QWORD *)(v43 + 32) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 32))
          {
            break;
          }
          v42 += 2;
          if (!--v41)
          {
            v42 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v42 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      }
      v12 = *v42;
      if (v12)
      {
        v44 = *(_DWORD *)(v12 + 16);
        v14 = *(unsigned __int16 **)(v12 + 8);
        v12 = *(unsigned int *)(v12 + 4);
        v15 = (unint64_t)((v44 >> 2) & 1) << 32;
      }
      else
      {
        v14 = 0;
        v15 = 0x100000000;
      }
      v22 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
LABEL_55:
        v23 = *(unsigned __int16 **)(v22 + 8);
        v24 = *(unsigned int *)(v22 + 4) | ((unint64_t)((*(_DWORD *)(v22 + 16) >> 2) & 1) << 32);
        goto LABEL_56;
      }
LABEL_27:
      v23 = 0;
      v24 = 0x100000000;
LABEL_56:
      WebCore::parseHTMLDimensionInternal((uint64_t)&v53, v14, v15 | v12, 0);
      if (v55)
      {
        if (v54)
        {
          v45 = (WebCore::HTMLElement *)WebCore::parseHTMLDimensionInternal((uint64_t)&v50, v23, v24, 0);
          if (v52)
          {
            if (v51)
              WebCore::HTMLElement::addParsedWidthAndHeightToAspectRatioList(v45, v53, v50, a4);
          }
        }
      }
      return;
    case 0x11Eu:
      WebCore::HTMLElement::applyAlignmentAttributeToStyle(this, a3, a4);
      break;
    case 0x177u:
      WebCore::HTMLElement::applyBorderAttributeToStyle(this, a3, a4);
      break;
    default:
LABEL_5:
      WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
      return;
  }
}

WebCore::HTMLElement *WebCore::HTMLImageElement::collectExtraStyleForPresentationalHints(WebCore::HTMLElement *this, WebCore::MutableStyleProperties *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::HTMLElement *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 35);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = this;
      v5 = WebCore::Element::attributeWithoutSynchronization(v3, &WebCore::HTMLNames::widthAttr);
      v9 = (uint64_t)v4;
      v6 = *((_QWORD *)v4 + 35);
      if (v6)
        v7 = *(_QWORD *)(v6 + 8);
      else
        v7 = 0;
      v8 = WebCore::Element::attributeWithoutSynchronization(v7, &WebCore::HTMLNames::heightAttr);
      if (*(_QWORD *)v5)
      {
        WebCore::HTMLElement::addHTMLLengthToStyle(v9, a2, 450, *(unsigned __int16 **)(*(_QWORD *)v5 + 8), *(unsigned int *)(*(_QWORD *)v5 + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)v5 + 16) >> 2) & 1) << 32), 1);
      }
      else
      {
        this = (WebCore::HTMLElement *)v9;
        if (!*(_QWORD *)v8)
          return this;
        WebCore::StyledElement::addPropertyToPresentationalHintStyle(v9, a2, 450, 0x18Au);
      }
      if (*(_QWORD *)v8)
        WebCore::HTMLElement::addHTMLLengthToStyle(v9, a2, 393, *(unsigned __int16 **)(*(_QWORD *)v8 + 8), *(unsigned int *)(*(_QWORD *)v8 + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)v8 + 16) >> 2) & 1) << 32), 1);
      else
        WebCore::StyledElement::addPropertyToPresentationalHintStyle(v9, a2, 393, 0x18Au);
      if (*(_QWORD *)v5 && *(_QWORD *)v8)
        return WebCore::HTMLElement::applyAspectRatioFromWidthAndHeightAttributesToStyle(v9, *(unsigned __int16 **)(*(_QWORD *)v5 + 8), *(unsigned int *)(*(_QWORD *)v5 + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)v5 + 16) >> 2) & 1) << 32), *(unsigned __int16 **)(*(_QWORD *)v8 + 8), *(unsigned int *)(*(_QWORD *)v8 + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)v8 + 16) >> 2) & 1) << 32), a2);
      else
        return (WebCore::HTMLElement *)WebCore::StyledElement::addPropertyToPresentationalHintStyle(v9, a2, 57, 0x18Au);
    }
  }
  return this;
}

WTF::StringImpl **WebCore::HTMLImageElement::currentSrc(WebCore::HTMLImageElement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v2 = (WTF::StringImpl **)((char *)this + 240);
  if (!*((_QWORD *)this + 30))
  {
    v3 = *((_QWORD *)this + 25);
    if (v3)
    {
      if (*(_DWORD *)(v3 + 4))
      {
        if ((*(_BYTE *)(v3 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v3 += 2;
          *v2 = (WTF::StringImpl *)v3;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((WTF::AtomStringImpl *)v3, a2);
          v6 = *v2;
          *v2 = v7;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, v5);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
      }
    }
  }
  return v2;
}

_BYTE *WebCore::extractMIMETypeFromTypeAttributeForLookup(_BYTE *this, const WTF::String *a2, double a3, double a4, float a5)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  int16x8_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  int16x8_t *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int16x8_t *v34;
  int16x8_t v35;
  int16x8_t *v36;
  int8x16_t v37;
  int16x8_t *v38;
  char *v39;
  int16x8_t v40;
  char *j;
  uint64_t v42;
  uint64_t v43;

  v5 = this;
  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v7 = *(_DWORD *)(v6 + 16);
    v8 = *(int16x8_t **)(v6 + 8);
    v9 = *(unsigned int *)(v6 + 4);
    if ((v7 & 4) == 0)
      goto LABEL_68;
    if ((_DWORD)v9)
    {
      v10 = 16;
      if (v9 < 0x10)
        v10 = v9;
      v11 = v10;
      this = v8;
      while (*this != 59)
      {
        ++this;
        if (!--v11)
        {
          if (v9 < 0x11)
            return (_BYTE *)WTF::String::trim();
          this = memchr(&v8->i8[v10], 59, v9 - v10);
          if (!this)
            return (_BYTE *)WTF::String::trim();
          break;
        }
      }
      for (i = this - (_BYTE *)v8; ; i = (j - (char *)v8) >> 1)
      {
        if (i == -1)
          return (_BYTE *)WTF::String::trim();
        i = v9 <= i ? v9 : i;
        v13 = i & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)((v7 >> 2) & 1) << 32);
        if (((v7 >> 2) & 1) != 0)
        {
          if (!(_DWORD)i)
            goto LABEL_55;
          v14 = 0;
          while (1)
          {
            v15 = v8->u8[v14];
            v16 = v15 > 0x20;
            v17 = (1 << v15) & 0x100003600;
            if (v16 || v17 == 0)
              break;
            if (i == ++v14)
              goto LABEL_44;
          }
          if ((_DWORD)i == 1)
          {
            if (!(_DWORD)v14)
              goto LABEL_55;
            LODWORD(v19) = 0;
LABEL_35:
            v23 = (v19 - v14 + 1);
            if (i - v14 >= v23)
            {
              v13 = v23 | 0x100000000;
LABEL_55:
              if ((v13 & 0x100000000) != 0)
              {
                if ((_DWORD)v13)
                {
                  this = (_BYTE *)WTF::StringImpl::createWithoutCopyingNonEmpty();
                  goto LABEL_60;
                }
LABEL_44:
                v29 = MEMORY[0x1E0CBEF70];
                *MEMORY[0x1E0CBEF70] += 2;
              }
              else
              {
                if (!(_DWORD)v13)
                  goto LABEL_44;
                this = (_BYTE *)WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_60:
                v29 = v43;
              }
              *v5 = v29;
              return this;
            }
          }
          else
          {
            v19 = (i - 1);
            while (v19 < i)
            {
              v20 = v8->u8[v19];
              v16 = v20 > 0x20;
              v21 = (1 << v20) & 0x100003600;
              if (!v16 && v21 != 0)
              {
                if ((_DWORD)--v19)
                  continue;
              }
              if (!(_DWORD)v14 && (_DWORD)v19 == (_DWORD)i - 1)
                goto LABEL_55;
              goto LABEL_35;
            }
          }
        }
        else
        {
          if (!(_DWORD)i)
            goto LABEL_55;
          v24 = 0;
          v25 = v8;
          while (1)
          {
            v26 = v25->u16[0];
            v16 = v26 > 0x20;
            v27 = (1 << v26) & 0x100003600;
            if (v16 || v27 == 0)
              break;
            ++v24;
            v25 = (int16x8_t *)((char *)v25 + 2);
            if (i == v24)
              goto LABEL_44;
          }
          if ((_DWORD)i == 1)
          {
            if (!(_DWORD)v24)
              goto LABEL_55;
            LODWORD(v30) = 0;
LABEL_66:
            v13 = (v30 - v24 + 1);
            v8 = v25;
            if (i - v24 >= v13)
              goto LABEL_55;
          }
          else
          {
            v30 = (i - 1);
            while (v30 < i)
            {
              v31 = v8->u16[v30];
              v16 = v31 > 0x20;
              v32 = (1 << v31) & 0x100003600;
              if (!v16 && v32 != 0)
              {
                if ((_DWORD)--v30)
                  continue;
              }
              if ((_DWORD)v24 || (_DWORD)v30 != (_DWORD)i - 1)
                goto LABEL_66;
              goto LABEL_55;
            }
          }
        }
        __break(1u);
LABEL_68:
        if (!(_DWORD)v9)
          return (_BYTE *)WTF::String::trim();
        v34 = (int16x8_t *)((char *)v8 + 2 * v9);
        if (v9 > 0x1F)
          break;
        v42 = 2 * v9;
        for (j = (char *)v8; *(_WORD *)j != 59; j += 2)
        {
          v42 -= 2;
          if (!v42)
            return (_BYTE *)WTF::String::trim();
        }
LABEL_77:
        if (j == (char *)v34)
          return (_BYTE *)WTF::String::trim();
      }
      v35.i64[0] = 0x3B003B003B003BLL;
      v35.i64[1] = 0x3B003B003B003BLL;
      v36 = v8;
      do
      {
        v37 = (int8x16_t)vceqq_s16(*v36, v35);
        LOWORD(a5) = vmaxvq_u16((uint16x8_t)v37);
        if (a5 != 0.0)
          goto LABEL_76;
        v38 = v36 + 1;
        v39 = &v36[1].i8[14];
        ++v36;
      }
      while (v39 < (char *)v34);
      if (v38 < v34)
      {
        v40.i64[0] = 0x3B003B003B003BLL;
        v40.i64[1] = 0x3B003B003B003BLL;
        v37 = (int8x16_t)vceqq_s16(v34[-1], v40);
        v40.i16[0] = vmaxvq_u16((uint16x8_t)v37);
        if (v40.i32[0])
        {
          v36 = v34 - 1;
LABEL_76:
          j = &v36->i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v37))];
          goto LABEL_77;
        }
      }
    }
  }
  return (_BYTE *)WTF::String::trim();
}

uint64_t WTF::Vector<WebCore::MQ::MediaQueryResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::MQ::MediaQueryResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;

  if (a3)
  {
    v4 = result;
    v6 = *(unsigned int *)(result + 12);
    v7 = v6 + a3;
    if (v7 > *(unsigned int *)(result + 8)
      && (result = WTF::Vector<WebCore::MQ::MediaQueryResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v6 + a3), v6 = *(unsigned int *)(v4 + 12), v7 < v6))
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::VectorCopier<false,WebCore::MQ::MediaQueryResult>::uninitializedCopy<WebCore::MQ::MediaQueryResult>(a2, a2 + 24 * a3, *(_QWORD *)v4 + 24 * v6);
      *(_DWORD *)(v4 + 12) = v7;
    }
  }
  return result;
}

WebCore::Node *WebCore::HTMLImageElement::setSourceElement(WebCore::Node *this, WebCore::HTMLSourceElement *a2)
{
  WebCore::HTMLSourceElement *v2;
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  void *v6;
  WebCore::HTMLImageElement *v7;
  unsigned int *v8;

  v2 = (WebCore::HTMLSourceElement *)*((_QWORD *)this + 35);
  if (v2)
    v2 = (WebCore::HTMLSourceElement *)*((_QWORD *)v2 + 1);
  if (v2 != a2)
  {
    v7 = this;
    v3 = (uint64_t *)((char *)this + 280);
    if (a2)
    {
      v4 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)a2);
      if (v4)
      {
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
      }
    }
    else
    {
      v4 = 0;
    }
    v8 = v4;
    WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::operator=(v3, (uint64_t *)&v8);
    WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr((uint64_t *)&v8, v6);
    return WebCore::HTMLImageElement::invalidateAttributeMapping(v7);
  }
  return this;
}

void WebCore::SizesAttributeParser::~SizesAttributeParser(WebCore::SizesAttributeParser *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v10 = *((_QWORD *)this + 1);
    v11 = 24 * v3;
    do
    {
      v10 = WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, a2) + 24;
      v11 -= 24;
    }
    while (v11);
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v8 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v8)
      {
        v13 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v8));
        v5 = v13;
      }
      v9 = *(WTF **)(v5 + 16);
      if (v9)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v12 = v5;
        WTF::fastFree(v9, a2);
        v5 = v12;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
}

WTF::StringImpl *WebCore::HTMLImageElement::evaluateDynamicMediaQueryDependencies(WebCore::HTMLImageElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  const WebCore::MQ::MediaQuery *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WTF *v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl *result;
  __int16 v25;
  __int16 v26;
  uint64_t v27;
  WTF *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  uint64_t v31;
  char v32;
  _BYTE v33[8];
  WTF::StringImpl *v34;
  char v35;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v3 = *(_QWORD *)(v2 + 1272);
  if (v3)
  {
    *(_DWORD *)(v3 + 24) += 2;
    if (*(_BYTE *)(v2 + 3382))
      v4 = &WebCore::printAtomData;
    else
      v4 = &WebCore::screenAtomData;
    v33[0] = 0;
    v35 = 0;
    v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 264))(v3, v33);
    if (v35)
    {
      v7 = v34;
      v34 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v5);
        else
          *(_DWORD *)v7 -= 2;
      }
    }
  }
  else
  {
    v6 = 0;
    if (*(_BYTE *)(v2 + 3382))
      v4 = &WebCore::printAtomData;
    else
      v4 = &WebCore::screenAtomData;
  }
  v8 = (WTF::StringImpl *)*v4;
  if (*v4)
    *(_DWORD *)v8 += 2;
  v29 = v8;
  v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v2);
  if (v9)
  {
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 + 1, v9));
  }
  v30 = (WTF *)v9;
  v31 = v6;
  v32 = 2;
  v12 = *((_DWORD *)this + 75);
  if (v12)
  {
    v13 = *((_QWORD *)this + 36);
    v14 = v13 + 24 * v12;
    while (1)
    {
      v15 = *(unsigned __int8 *)(v13 + 16);
      v16 = *(_DWORD *)(v13 + 12);
      if (v16)
      {
        v17 = *(const WebCore::MQ::MediaQuery **)v13;
        v18 = 56 * v16 - 56;
        do
        {
          v19 = WebCore::MQ::MediaQueryEvaluator::evaluate((WebCore::MQ::MediaQueryEvaluator *)&v29, v17);
          if ((v19 & 1) != 0)
            break;
          v17 = (const WebCore::MQ::MediaQuery *)((char *)v17 + 56);
          v20 = v18;
          v18 -= 56;
        }
        while (v20);
      }
      else
      {
        v19 = 1;
      }
      if (v15 != v19)
        break;
      v13 += 24;
      if (v13 == v14)
        goto LABEL_24;
    }
    WebCore::HTMLImageElement::selectImageSource((uint64_t)this, 0);
  }
LABEL_24:
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v21));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v21);
      v27 = *((unsigned int *)v21 + 7);
      if ((_DWORD)v27)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v21 + 2), (WTF::StringImpl *)(*((_QWORD *)v21 + 2) + 32 * v27));
      v28 = (WTF *)*((_QWORD *)v21 + 2);
      if (v28)
      {
        *((_QWORD *)v21 + 2) = 0;
        *((_DWORD *)v21 + 6) = 0;
        WTF::fastFree(v28, v10);
      }
      WTF::fastFree(v21, v10);
    }
  }
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
      if (!v3)
        return result;
      goto LABEL_31;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v3)
    return result;
LABEL_31:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    v25 = *(_WORD *)(v3 + 30);
    if ((v25 & 0x400) == 0)
    {
      v26 = *(_WORD *)(v3 + 28);
      if ((v26 & 0xF000) == 0x9000)
      {
        return (WTF::StringImpl *)WebCore::Document::removedLastRef((WebCore::Document *)v3);
      }
      else
      {
        if ((v26 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
          v25 = *(_WORD *)(v3 + 30);
        }
        *(_WORD *)(v3 + 30) = v25 | 0x400;
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
      }
    }
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLImageElement::canStartSelection(WebCore::HTMLImageElement *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0
    || !*(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x58))
  {
    return 0;
  }
  if (WebCore::Node::hasEditableStyle((uint64_t)this, 0))
    return 1;
  v3 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      v3 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 32) + 148) & 0xC00000) == 0x800000)
    {
      v4 = *(_QWORD *)(v3 + 104);
      if ((*(_BYTE *)(v4 + 239) & 1) != 0 || (*(_DWORD *)(v4 + 228) & 0x18000) == 0)
        return 0;
    }
  }
  if ((*((_WORD *)this + 14) & 0x80) != 0)
  {
    v6 = *((_QWORD *)this + 25);
    if (v6)
    {
      v5 = *(_QWORD *)(v6 + 8);
      if (v5)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 248))(v5);
    }
  }
  else
  {
    v5 = *((_QWORD *)this + 4);
    if (v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 248))(v5);
  }
  return 1;
}

uint64_t WebCore::HTMLImageElement::isInteractiveContent(WebCore::HTMLImageElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) != 0)
  {
    v3 = *(uint64_t **)(v1 + 40);
    LODWORD(v4) = *(_DWORD *)(v1 + 52);
    if (!(_DWORD)v4)
      return 0;
  }
  else
  {
    v3 = (uint64_t *)(v1 + 32);
    LODWORD(v4) = v2 >> 5;
    if (!(_DWORD)v4)
      return 0;
  }
  v4 = v4;
  while (1)
  {
    v5 = *v3;
    if (*v3 == WebCore::HTMLNames::usemapAttr
      || *(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::usemapAttr + 24)
      && *(_QWORD *)(v5 + 32) == *(_QWORD *)(WebCore::HTMLNames::usemapAttr + 32))
    {
      break;
    }
    v3 += 2;
    if (!--v4)
      return 0;
  }
  return 1;
}

uint64_t WebCore::HTMLImageElement::setPictureElement(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = result;
  if (a2)
  {
    if ((a2[2] & 0xFFFFFFFFFFFFLL) == 0)
    {
      v4 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v4 = 1;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 8) = a2;
      *(_BYTE *)(v4 + 32) = 0;
      v5 = a2[2];
      a2[2] = v5 & 0xFFFF000000000000 | v4;
      result = v5 & 0xFFFFFFFFFFFFLL;
      if ((v5 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v6 = __ldaxr((unsigned int *)result);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, (unsigned int *)result));
        if (!v7)
        {
          atomic_store(1u, (unsigned int *)result);
          v15 = *(unsigned int *)(result + 28);
          if ((_DWORD)v15)
          {
            v18 = result;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v15));
            result = v18;
          }
          v16 = *(WTF **)(result + 16);
          if (v16)
          {
            *(_QWORD *)(result + 16) = 0;
            *(_DWORD *)(result + 24) = 0;
            v17 = result;
            WTF::fastFree(v16, a2);
            result = v17;
          }
          result = WTF::fastFree((WTF *)result, a2);
        }
      }
    }
    v8 = (unsigned int *)(a2[2] & 0xFFFFFFFFFFFFLL);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = *(_QWORD *)(v2 + 272);
  *(_QWORD *)(v2 + 272) = v8;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v13)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v13));
      v14 = *(WTF **)(v10 + 16);
      if (v14)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        WTF::fastFree(v14, a2);
      }
      return WTF::fastFree((WTF *)v10, a2);
    }
  }
  return result;
}

uint64_t WebCore::HTMLImageElement::width(WebCore::HTMLImageElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  float v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  double v20;
  int v21;
  double v22;
  uint64_t v24;

  if ((*((_BYTE *)this + 22) & 8) != 0)
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    if (*(_QWORD *)(v2 + 1944))
    {
      if (!*(_BYTE *)(v2 + 3405))
        WebCore::Document::updateLayout(v2, 6u, (uint64_t)this);
    }
  }
  v3 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195BE9040);
    }
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
      return 0;
    v5 = WebCore::RenderBox::contentBoxRect((WebCore::RenderBox *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL));
    if (v5 <= 0)
      v7 = -(-v5 & 0x3F);
    else
      v7 = v5 & 0x3F;
    v8 = v7 + v6;
    if (__OFADD__(v7, v6))
      v8 = (v7 >> 31) + 0x7FFFFFFF;
    result = (v8 / 64
                          - ((int)(v7 + 32) >> 6)
                          + ((int)(v8 - (((v7 >> 31) + 0x7FFFFFFF) & 0xFFFFFFC0) + 32) >> 6));
    v9 = *(float *)(*(_QWORD *)(v3 + 104) + 184);
    if (v9 != 1.0)
    {
      v21 = result - 1;
      if ((int)result >= 0)
        v21 = result + 1;
      if (v9 <= 1.0)
        v21 = result;
      v22 = (double)v21 / v9 + dbl_1968DE9C0[(double)v21 / v9 < 0.0];
      if (v22 >= -2147483650.0 && v22 <= 2147483650.0)
        return (int)v22;
      else
        return 0;
    }
    return result;
  }
  v10 = *((_QWORD *)this + 13);
  if (!v10)
    goto LABEL_28;
  v11 = *(_DWORD *)(v10 + 4);
  if ((v11 & 1) == 0)
  {
    v12 = v10 + 32;
    LODWORD(v13) = v11 >> 5;
    if ((_DWORD)v13)
      goto LABEL_20;
LABEL_28:
    v14 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_29;
  }
  v12 = *(_QWORD *)(v10 + 40);
  LODWORD(v13) = *(_DWORD *)(v10 + 52);
  if (!(_DWORD)v13)
    goto LABEL_28;
LABEL_20:
  v13 = v13;
  v14 = (uint64_t *)(v12 + 8);
  while (1)
  {
    v15 = *(v14 - 1);
    if (v15 == WebCore::HTMLNames::widthAttr
      || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 24)
      && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 32))
    {
      break;
    }
    v14 += 2;
    if (!--v13)
    {
      v14 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_29:
  v16 = *v14;
  if (v16)
  {
    v17 = *(uint64_t **)(v16 + 8);
    v18 = *(unsigned int *)(v16 + 4) | ((unint64_t)((*(_DWORD *)(v16 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v17 = 0;
    v18 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v17, v18, &v24);
  if (HIDWORD(v24) == 1)
    goto LABEL_35;
  if (HIDWORD(v24))
    std::__throw_bad_variant_access[abi:sn180100]();
  result = v24;
  if ((v24 & 0x80000000) != 0)
  {
LABEL_35:
    v19 = *(_QWORD *)(*((_QWORD *)this + 22) + 24);
    if (!v19)
      return 0;
    result = *(_QWORD *)(v19 + 8);
    if (result)
    {
      v20 = WebCore::CachedImage::imageSizeForRenderer(result, 0, 0) * 64.0;
      if (v20 >= 2147483650.0)
      {
        return 0x1FFFFFFLL;
      }
      else if (v20 <= -2147483650.0)
      {
        return 4261412864;
      }
      else
      {
        return ((int)v20 / 64);
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLImageElement::height(WebCore::HTMLImageElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  float v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  float v20;
  double v21;
  int v22;
  double v23;
  uint64_t v25;

  if ((*((_BYTE *)this + 22) & 8) != 0)
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    if (*(_QWORD *)(v2 + 1944))
    {
      if (!*(_BYTE *)(v2 + 3405))
        WebCore::Document::updateLayout(v2, 6u, (uint64_t)this);
    }
  }
  v3 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195BE92F4);
    }
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
      return 0;
    v5 = WebCore::RenderBox::contentBoxRect((WebCore::RenderBox *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL));
    if (SHIDWORD(v5) <= 0)
      v7 = -(-HIDWORD(v5) & 0x3F);
    else
      v7 = BYTE4(v5) & 0x3F;
    v8 = v7 + v6;
    if (__OFADD__(v7, v6))
      v8 = (v7 >> 31) + 0x7FFFFFFF;
    result = (v8 / 64
                          - ((int)(v7 + 32) >> 6)
                          + ((int)(v8 - (((v7 >> 31) + 0x7FFFFFFF) & 0xFFFFFFC0) + 32) >> 6));
    v9 = *(float *)(*(_QWORD *)(v3 + 104) + 184);
    if (v9 != 1.0)
    {
      v22 = result - 1;
      if ((int)result >= 0)
        v22 = result + 1;
      if (v9 <= 1.0)
        v22 = result;
      v23 = (double)v22 / v9 + dbl_1968DE9C0[(double)v22 / v9 < 0.0];
      if (v23 >= -2147483650.0 && v23 <= 2147483650.0)
        return (int)v23;
      else
        return 0;
    }
    return result;
  }
  v10 = *((_QWORD *)this + 13);
  if (!v10)
    goto LABEL_28;
  v11 = *(_DWORD *)(v10 + 4);
  if ((v11 & 1) == 0)
  {
    v12 = v10 + 32;
    LODWORD(v13) = v11 >> 5;
    if ((_DWORD)v13)
      goto LABEL_20;
LABEL_28:
    v14 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_29;
  }
  v12 = *(_QWORD *)(v10 + 40);
  LODWORD(v13) = *(_DWORD *)(v10 + 52);
  if (!(_DWORD)v13)
    goto LABEL_28;
LABEL_20:
  v13 = v13;
  v14 = (uint64_t *)(v12 + 8);
  while (1)
  {
    v15 = *(v14 - 1);
    if (v15 == WebCore::HTMLNames::heightAttr
      || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 24)
      && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 32))
    {
      break;
    }
    v14 += 2;
    if (!--v13)
    {
      v14 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_29:
  v16 = *v14;
  if (v16)
  {
    v17 = *(uint64_t **)(v16 + 8);
    v18 = *(unsigned int *)(v16 + 4) | ((unint64_t)((*(_DWORD *)(v16 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v17 = 0;
    v18 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v17, v18, &v25);
  if (HIDWORD(v25) == 1)
    goto LABEL_35;
  if (HIDWORD(v25))
    std::__throw_bad_variant_access[abi:sn180100]();
  result = v25;
  if ((v25 & 0x80000000) != 0)
  {
LABEL_35:
    v19 = *(_QWORD *)(*((_QWORD *)this + 22) + 24);
    if (!v19)
      return 0;
    result = *(_QWORD *)(v19 + 8);
    if (result)
    {
      WebCore::CachedImage::imageSizeForRenderer(result, 0, 0);
      v21 = v20 * 64.0;
      if (v21 >= 2147483650.0)
      {
        return 0x1FFFFFFLL;
      }
      else if (v21 <= -2147483650.0)
      {
        return 4261412864;
      }
      else
      {
        return ((int)v21 / 64);
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLImageElement::naturalWidth(WebCore::HTMLImageElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  WTF *v5;
  float v6;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12[2];

  v1 = *(_QWORD *)(*((_QWORD *)this + 22) + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v4 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
      if (v4 && (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195BE9480);
      }
      if ((*(_WORD *)(v2 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v2 + 720) & 0x10) != 0)
      {
        WebCore::CachedImage::brokenImage(1.0, (uint64_t)v12);
        v9 = (unsigned int *)v12[0];
        if (v12[0])
        {
          v5 = (WTF *)*((_QWORD *)v12[0] + 1);
          v12[0] = 0;
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            atomic_store(1u, v9);
            WTF::fastFree((WTF *)v9, v8);
          }
        }
        else
        {
          v5 = 0;
        }
      }
      else
      {
        v5 = *(WTF **)(v2 + 688);
        if (v5)
          goto LABEL_7;
        {
          v5 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
        }
        else
        {
          WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v12);
          v5 = v12[0];
          WebCore::Image::nullImage(void)::nullImage = (uint64_t)v12[0];
        }
      }
      if (!v5)
      {
LABEL_9:
        v6 = *((float *)this + 65);
        return ((int)WebCore::CachedImage::unclampedImageSizeForRenderer(v2, v4, 0, v6) / 64);
      }
LABEL_7:
      v6 = 1.0;
      if (((*(uint64_t (**)(WTF *))(*(_QWORD *)v5 + 56))(v5) & 1) != 0
        || ((*(uint64_t (**)(WTF *))(*(_QWORD *)v5 + 64))(v5) & 1) != 0)
      {
        return ((int)WebCore::CachedImage::unclampedImageSizeForRenderer(v2, v4, 0, v6) / 64);
      }
      goto LABEL_9;
    }
  }
  return 0;
}

uint64_t WebCore::HTMLImageElement::naturalHeight(WebCore::HTMLImageElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  WTF *v5;
  float v6;
  uint64_t v7;
  unint64_t v8;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14[2];

  v1 = *(_QWORD *)(*((_QWORD *)this + 22) + 24);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v4 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v4 && (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195BE9624);
  }
  if ((*(_WORD *)(v2 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v2 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v14);
    v11 = (unsigned int *)v14[0];
    if (v14[0])
    {
      v5 = (WTF *)*((_QWORD *)v14[0] + 1);
      v14[0] = 0;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v10);
      }
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = *(WTF **)(v2 + 688);
    if (v5)
      goto LABEL_7;
    {
      v5 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
    }
    else
    {
      WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v14);
      v5 = v14[0];
      WebCore::Image::nullImage(void)::nullImage = (uint64_t)v14[0];
    }
  }
  if (!v5)
  {
LABEL_9:
    v6 = *((float *)this + 65);
    goto LABEL_10;
  }
LABEL_7:
  v6 = 1.0;
  if (((*(uint64_t (**)(WTF *))(*(_QWORD *)v5 + 56))(v5) & 1) == 0
    && ((*(uint64_t (**)(WTF *))(*(_QWORD *)v5 + 64))(v5) & 1) == 0)
  {
    goto LABEL_9;
  }
LABEL_10:
  v7 = WebCore::CachedImage::unclampedImageSizeForRenderer(v2, v4, 0, v6);
  v8 = HIDWORD(v7);
  if (v7 < 0)
    LODWORD(v8) = HIDWORD(v7) + 63;
  return ((int)v8 >> 6);
}

uint64_t WebCore::HTMLImageElement::attributeContainsURL(uint64_t a1, _QWORD *a2)
{
  if (*a2 == WebCore::HTMLNames::srcsetAttr)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 600))(a1);
}

void WebCore::HTMLImageElement::completeURLsInAttributeValue(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, WTF::StringImpl **a5@<X8>)
{
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  int *v14;
  uint64_t v15;
  int v16;
  WTF::StringImpl *v17;
  BOOL v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  uint64_t v40;
  unsigned int v41;
  char v42;
  char __s[124];
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a3 != WebCore::HTMLNames::srcsetAttr)
  {
    WebCore::Element::resolveURLStringIfNeeded(a1, (WTF::StringImpl **)(a3 + 8), a4, a2, a5);
    return;
  }
  if (!a4)
  {
    v30 = *(WTF::StringImpl **)(a3 + 8);
    if (v30)
      *(_DWORD *)v30 += 2;
    *a5 = v30;
    return;
  }
  v10 = *(_QWORD *)(a3 + 8);
  if (v10)
  {
    v11 = *(unsigned __int8 **)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  WebCore::parseImageCandidatesFromSrcsetAttribute(v11, v12, (WTF *)&v40);
  if (a4 == 1)
  {
    if (!v41)
    {
LABEL_91:
      v33 = *(WTF::StringImpl **)(a3 + 8);
      if (v33)
        *(_DWORD *)v33 += 2;
      *a5 = v33;
      goto LABEL_94;
    }
    v14 = (int *)(v40 + 16);
    v15 = 40 * v41;
    while (1)
    {
      v16 = *v14;
      v17 = (WTF::StringImpl *)*((_QWORD *)v14 - 2);
      if (v17)
      {
        if (v16 != *((_DWORD *)v17 + 1))
          goto LABEL_31;
        *(_DWORD *)v17 += 2;
      }
      else if (v16)
      {
LABEL_31:
        if (*((_BYTE *)v14 + 4))
          WTF::String::String();
        else
          WTF::String::String();
        goto LABEL_13;
      }
      v36 = v17;
LABEL_13:
      if (*a2)
        MEMORY[0x19AEA52F8](__s, a2, &v36, 0);
      else
        WebCore::Document::completeURL(*(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8), &v36, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 848, 0, (WTF::URL *)__s);
      v18 = (__s[8] & 2) == 0
         && WebCore::Document::shouldMaskURLForBindingsInternal(*(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8), (const WTF::URL *)__s);
      v19 = *(WTF::StringImpl **)__s;
      *(_QWORD *)__s = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v13);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = v36;
      v36 = 0;
      if (!v20)
        goto LABEL_24;
      if (*(_DWORD *)v20 != 2)
      {
        *(_DWORD *)v20 -= 2;
LABEL_24:
        if (v18)
          break;
        goto LABEL_25;
      }
      WTF::StringImpl::destroy(v20, v13);
      if (v18)
        break;
LABEL_25:
      v14 += 10;
      v15 -= 40;
      if (!v15)
        goto LABEL_91;
    }
  }
  v34 = a5;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 1;
  if (!v41)
    goto LABEL_83;
  v21 = v40;
  v22 = v40 + 40 * v41;
  do
  {
    if (!v41)
    {
      __break(0xC471u);
      return;
    }
    if (v21 != v40)
      WTF::StringBuilder::append();
    v23 = *(_DWORD *)(v21 + 16);
    v24 = *(WTF::StringImpl **)v21;
    if (*(_QWORD *)v21)
    {
      if (v23 == *((_DWORD *)v24 + 1))
      {
        *(_DWORD *)v24 += 2;
LABEL_43:
        v35 = v24;
        goto LABEL_44;
      }
    }
    else if (!v23)
    {
      goto LABEL_43;
    }
    if (*(_BYTE *)(v21 + 20))
      WTF::String::String();
    else
      WTF::String::String();
LABEL_44:
    WebCore::Element::resolveURLStringIfNeeded(a1, &v35, a4, a2, (WTF::StringImpl **)__s);
    v25 = *(WTF::StringImpl **)__s;
    if (!v38 && !v37)
    {
      if (*(_QWORD *)__s)
        **(_DWORD **)__s += 2;
      v26 = v36;
      v36 = v25;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
        {
          WTF::StringImpl::destroy(v26, v13);
          if (v25)
            goto LABEL_52;
          goto LABEL_72;
        }
        *(_DWORD *)v26 -= 2;
      }
      if (v25)
      {
LABEL_52:
        v27 = *((_DWORD *)v25 + 1);
        goto LABEL_53;
      }
LABEL_72:
      v27 = 0;
LABEL_53:
      v38 = v27;
      if (!v25)
        goto LABEL_56;
      goto LABEL_54;
    }
    if (*(_QWORD *)__s && (*(_BYTE *)(*(_QWORD *)__s + 16) & 4) == 0)
    {
      WTF::StringBuilder::append();
    }
    else
    {
      WTF::StringBuilder::append();
      if (!v25)
        goto LABEL_56;
    }
LABEL_54:
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v13);
    else
      *(_DWORD *)v25 -= 2;
LABEL_56:
    v28 = v35;
    v35 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v13);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (*(float *)(v21 + 24) != -1.0)
    {
      LOBYTE(v35) = 32;
      WTF::numberToString();
      v44 = strlen(__s);
      v42 = 120;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<float,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v36, (char *)&v35, (__int128 *)__s, &v42);
    }
    v29 = *(_DWORD *)(v21 + 28);
    if (v29 != -1)
    {
      LOBYTE(v35) = 32;
      *(_DWORD *)__s = v29;
      v42 = 119;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v36, &v35, (unsigned int *)__s, &v42);
    }
    v21 += 40;
  }
  while (v21 != v22);
  v31 = v36;
  if (v36)
    goto LABEL_84;
LABEL_83:
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v36);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v36);
  v31 = v36;
  if (v36)
LABEL_84:
    *(_DWORD *)v31 += 2;
  *v34 = v31;
  v32 = v37;
  v37 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::destroy(v32, v13);
      v31 = v36;
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  v36 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v13);
    else
      *(_DWORD *)v31 -= 2;
  }
LABEL_94:
  WTF::Vector<WebCore::ImageCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v13);
}

uint64_t WebCore::HTMLImageElement::alt(WebCore::HTMLImageElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return MEMORY[0x1E0CBF2F8];
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_4;
    return MEMORY[0x1E0CBF2F8];
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    return MEMORY[0x1E0CBF2F8];
LABEL_4:
  v4 = v4;
  for (result = v3 + 8; ; result += 16)
  {
    v6 = *(_QWORD *)(result - 8);
    if (v6 == WebCore::HTMLNames::altAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 32))
    {
      break;
    }
    if (!--v4)
      return MEMORY[0x1E0CBF2F8];
  }
  return result;
}

uint64_t WebCore::HTMLImageElement::x(WebCore::HTMLImageElement *this)
{
  uint64_t result;
  uint64_t v3;

  WebCore::Document::updateLayout(*(_QWORD *)(*((_QWORD *)this + 5) + 8), 6u, (uint64_t)this);
  result = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (result)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
    }
    else
    {
      v3 = 0;
      return (int)WebCore::RenderObject::localToAbsolute(result, &v3, 0, 0);
    }
  }
  return result;
}

uint64_t WebCore::HTMLImageElement::y(WebCore::HTMLImageElement *this)
{
  uint64_t result;
  float v3;
  uint64_t v4;

  WebCore::Document::updateLayout(*(_QWORD *)(*((_QWORD *)this + 5) + 8), 6u, (uint64_t)this);
  result = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (result)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
    }
    else
    {
      v4 = 0;
      WebCore::RenderObject::localToAbsolute(result, &v4, 0, 0);
      return (int)v3;
    }
  }
  return result;
}

uint64_t WebCore::HTMLImageElement::complete(WebCore::HTMLImageElement *this)
{
  return (*(unsigned __int8 *)(*((_QWORD *)this + 22) + 128) >> 3) & 1;
}

uint64_t WebCore::HTMLImageElement::decode(uint64_t a1, uint64_t *a2)
{
  return WebCore::ImageLoader::decode(*(_QWORD *)(a1 + 176), a2);
}

WTF::StringImpl *WebCore::HTMLImageElement::addSubresourceAttributeURLs(_QWORD *a1, uint64_t *a2)
{
  WebCore::Document *v4;
  _QWORD *v5;
  const WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  WTF::StringImpl *result;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18[5];
  _BYTE v19[24];

  WebCore::StyledElement::addSubresourceAttributeURLs(a1, (uint64_t)a2);
  v4 = *(WebCore::Document **)(a1[5] + 8);
  v5 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 640))(a1);
  WebCore::Document::completeURL(v4, v5, (uint64_t)v4 + 848, 0, (WTF::URL *)v18);
  if (v18[0])
  {
    WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::add(a2, (uint64_t)v18, v6, (uint64_t)v19);
    v8 = v18[0];
    v18[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  v9 = a1[13];
  if (!v9)
    goto LABEL_16;
  v10 = *(_DWORD *)(v9 + 4);
  if ((v10 & 1) == 0)
  {
    v11 = v9 + 32;
    LODWORD(v12) = v10 >> 5;
    if ((_DWORD)v12)
      goto LABEL_8;
LABEL_16:
    v13 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_17;
  }
  v11 = *(_QWORD *)(v9 + 40);
  LODWORD(v12) = *(_DWORD *)(v9 + 52);
  if (!(_DWORD)v12)
    goto LABEL_16;
LABEL_8:
  v12 = v12;
  v13 = (_QWORD *)(v11 + 8);
  while (1)
  {
    v14 = *(v13 - 1);
    if (v14 == WebCore::HTMLNames::usemapAttr
      || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::usemapAttr + 24)
      && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::usemapAttr + 32))
    {
      break;
    }
    v13 += 2;
    if (!--v12)
    {
      v13 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_17:
  result = WebCore::Document::completeURL(*(WebCore::Document **)(a1[5] + 8), v13, *(_QWORD *)(a1[5] + 8) + 848, 0, (WTF::URL *)v18);
  if (v18[0])
  {
    WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::add(a2, (uint64_t)v18, v16, (uint64_t)v19);
    result = v18[0];
    v18[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLImageElement::addCandidateSubresourceURLs(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *result;
  WTF::StringImpl *v28[5];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30[5];
  WTF::StringImpl *v31;

  v4 = *(_QWORD *)(a1 + 104);
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if (v5 >> 5)
      goto LABEL_4;
LABEL_12:
    v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  v8 = (WTF::StringImpl **)(v6 + 8);
  while (1)
  {
    v9 = (uint64_t)*(v8 - 1);
    if (v9 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v7)
    {
      v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v10 = *v8;
  if (v10)
  {
    *(_DWORD *)v10 += 2;
    v31 = v10;
    if (*((_DWORD *)v10 + 1))
    {
      v28[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v28);
      WebCore::Element::resolveURLStringIfNeeded(a1, &v31, 2, v28, &v29);
      MEMORY[0x19AEA52D4](v30, &v29, 0);
      v13 = v29;
      v29 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v11);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v28[0];
      v28[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v11);
        else
          *(_DWORD *)v14 -= 2;
      }
      if (v30[0])
      {
        WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::add(a2, (uint64_t)v30, v12, (uint64_t)v28);
        v16 = v30[0];
        v30[0] = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v15);
          else
            *(_DWORD *)v16 -= 2;
        }
      }
      v4 = *(_QWORD *)(a1 + 104);
    }
    if (!v4)
      goto LABEL_42;
  }
  else
  {
    v31 = 0;
    if (!v4)
      goto LABEL_42;
  }
  v17 = *(_DWORD *)(v4 + 4);
  if ((v17 & 1) != 0)
  {
    v18 = *(_QWORD *)(v4 + 40);
    v19 = *(_DWORD *)(v4 + 52);
    if (v19)
      goto LABEL_31;
LABEL_42:
    v21 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_43;
  }
  v18 = v4 + 32;
  v19 = v17 >> 5;
  if (!(v17 >> 5))
    goto LABEL_42;
LABEL_31:
  v20 = v19;
  v21 = (uint64_t *)(v18 + 8);
  while (1)
  {
    v22 = *(v21 - 1);
    if (v22 == WebCore::HTMLNames::srcsetAttr
      || *(_QWORD *)(v22 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcsetAttr + 24)
      && *(_QWORD *)(v22 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcsetAttr + 32))
    {
      break;
    }
    v21 += 2;
    if (!--v20)
    {
      v21 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_43:
  v23 = *v21;
  if (v23)
  {
    v24 = *(unsigned __int8 **)(v23 + 8);
    v25 = *(unsigned int *)(v23 + 4) | ((unint64_t)((*(_DWORD *)(v23 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v24 = 0;
    v25 = 0x100000000;
  }
  WebCore::getURLsFromSrcsetAttribute(a1, v24, v25, a2);
  result = v31;
  v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebCore::HTMLImageElement::didMoveToNewDocument(WebCore::ImageLoader **this, WebCore::Document *a2, WebCore::Document *a3)
{
  WTF::String *v6;
  unsigned int *result;
  void *v8;
  WebCore::ImageLoader *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  __int16 v13;
  __int16 v14;
  uint64_t v15;

  WebCore::ActiveDOMObject::didMoveToNewDocument((WebCore::ActiveDOMObject *)(this + 19), a3);
  WTF::WeakHashSet<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::HTMLImageElement>((uint64_t)a2 + 2000, this);
  WebCore::HTMLImageElement::selectImageSource((uint64_t)this, 0);
  WebCore::ImageLoader::elementDidMoveToNewDocument(this[22], a2);
  result = (unsigned int *)WebCore::Element::didMoveToNewDocument((WebCore::Element *)this, a2, a3, v6);
  v9 = this[34];
  if (v9)
  {
    v10 = *((_QWORD *)v9 + 1);
    if (v10)
    {
      *(_DWORD *)(v10 + 24) += 2;
      v11 = *(_QWORD *)(v10 + 80);
      if (v11)
      {
        while ((*(_WORD *)(v11 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
        {
          v11 = *(_QWORD *)(v11 + 56);
          if (!v11)
            goto LABEL_15;
        }
        result = (unsigned int *)WebCore::HTMLImageElement::selectImageSource(v11, (void *)1);
        for (i = *(_QWORD *)(v11 + 56); i; i = *(_QWORD *)(v15 + 56))
        {
          while ((*(_WORD *)(i + 28) & 0x10) == 0
               || *(_QWORD *)(*(_QWORD *)(i + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
          {
            i = *(_QWORD *)(i + 56);
            if (!i)
              goto LABEL_15;
          }
          v15 = i;
          result = (unsigned int *)WebCore::HTMLImageElement::selectImageSource(i, (void *)1);
        }
      }
LABEL_15:
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        v13 = *(_WORD *)(v10 + 30);
        if ((v13 & 0x400) == 0)
        {
          v14 = *(_WORD *)(v10 + 28);
          if ((v14 & 0xF000) == 0x9000)
          {
            return WebCore::Document::removedLastRef((WebCore::Document *)v10, v8);
          }
          else
          {
            if ((v14 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 160) + 16))(*(_QWORD *)(v10 + 160));
              v13 = *(_WORD *)(v10 + 30);
            }
            *(_WORD *)(v10 + 30) = v13 | 0x400;
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
          }
        }
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
    }
  }
  return result;
}

BOOL WebCore::HTMLImageElement::isServerMap(WebCore::HTMLImageElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  _BOOL8 v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) != 0)
  {
    v3 = *(uint64_t **)(v1 + 40);
    LODWORD(v4) = *(_DWORD *)(v1 + 52);
    if (!(_DWORD)v4)
      return 0;
  }
  else
  {
    v3 = (uint64_t *)(v1 + 32);
    LODWORD(v4) = v2 >> 5;
    if (!(v2 >> 5))
      return 0;
  }
  v4 = v4;
  while (1)
  {
    v5 = *v3;
    if (*v3 == WebCore::HTMLNames::ismapAttr
      || *(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::ismapAttr + 24)
      && *(_QWORD *)(v5 + 32) == *(_QWORD *)(WebCore::HTMLNames::ismapAttr + 32))
    {
      break;
    }
    v3 += 2;
    if (!--v4)
      return 0;
  }
  if ((v2 & 1) == 0)
  {
    v6 = v1 + 32;
    LODWORD(v7) = v2 >> 5;
    if ((_DWORD)v7)
      goto LABEL_14;
LABEL_22:
    v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_23;
  }
  v6 = *(_QWORD *)(v1 + 40);
  LODWORD(v7) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v7)
    goto LABEL_22;
LABEL_14:
  v7 = v7;
  v8 = (uint64_t *)(v6 + 8);
  while (1)
  {
    v9 = *(v8 - 1);
    if (v9 == WebCore::HTMLNames::usemapAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::usemapAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::usemapAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v7)
    {
      v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_23:
  v10 = *v8;
  if (*v8 && *(_DWORD *)(v10 + 4))
  {
    v11 = *(unsigned __int8 **)(v10 + 8);
    v12 = (*(_BYTE *)(v10 + 16) & 4) != 0 ? *v11 : *(unsigned __int16 *)v11;
    if (v12 == 35)
      return 0;
  }
  WebCore::Document::completeURL(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), v8, *(_QWORD *)(*((_QWORD *)this + 5) + 8) + 848, 0, (WTF::URL *)&v17);
  v16 = v17;
  if (!v17)
    return 1;
  v13 = *((_DWORD *)v17 + 1) == 0;
  v17 = 0;
  if (*(_DWORD *)v16 == 2)
    WTF::StringImpl::destroy(v16, v15);
  else
    *(_DWORD *)v16 -= 2;
  return v13;
}

WTF::StringImpl *WebCore::HTMLImageElement::setCrossOrigin(WebCore::HTMLImageElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::crossoriginAttr, a2, 0);
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::crossoriginAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::crossoriginAttr, a2, 0);
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
}

_QWORD *WebCore::HTMLImageElement::crossOrigin@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v2 = this[13];
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::crossoriginAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
  {
    *a2 = 0;
    return this;
  }
  if (*(_DWORD *)(v8 + 4) != 15)
    return WTF::String::String(a2, (uint64_t)"anonymous", 10);
  v9 = *(_QWORD *)(v8 + 8);
  if ((*(_BYTE *)(v8 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v9 & 0xDF) != 0x55
      || (*(_BYTE *)(v9 + 1) & 0xDF) != 0x53
      || (*(_BYTE *)(v9 + 2) & 0xDF) != 0x45
      || (*(_BYTE *)(v9 + 3) & 0xDF) != 0xD
      || (*(_BYTE *)(v9 + 4) & 0xDF) != 0x43
      || (*(_BYTE *)(v9 + 5) & 0xDF) != 0x52
      || (*(_BYTE *)(v9 + 6) & 0xDF) != 0x45
      || (*(_BYTE *)(v9 + 7) & 0xDF) != 0x44
      || (*(_BYTE *)(v9 + 8) & 0xDF) != 0x45
      || (*(_BYTE *)(v9 + 9) & 0xDF) != 0x4E
      || (*(_BYTE *)(v9 + 10) & 0xDF) != 0x54
      || (*(_BYTE *)(v9 + 11) & 0xDF) != 0x49
      || (*(_BYTE *)(v9 + 12) & 0xDF) != 0x41
      || (*(_BYTE *)(v9 + 13) & 0xDF) != 0x4C)
    {
      return WTF::String::String(a2, (uint64_t)"anonymous", 10);
    }
    v10 = *(unsigned __int8 *)(v9 + 14);
  }
  else
  {
    if ((*(_WORD *)v9 & 0xFFDF) != 0x55
      || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0x53
      || (*(_WORD *)(v9 + 4) & 0xFFDF) != 0x45
      || (*(_WORD *)(v9 + 6) & 0xFFDF) != 0xD
      || (*(_WORD *)(v9 + 8) & 0xFFDF) != 0x43
      || (*(_WORD *)(v9 + 10) & 0xFFDF) != 0x52
      || (*(_WORD *)(v9 + 12) & 0xFFDF) != 0x45
      || (*(_WORD *)(v9 + 14) & 0xFFDF) != 0x44
      || (*(_WORD *)(v9 + 16) & 0xFFDF) != 0x45
      || (*(_WORD *)(v9 + 18) & 0xFFDF) != 0x4E
      || (*(_WORD *)(v9 + 20) & 0xFFDF) != 0x54
      || (*(_WORD *)(v9 + 22) & 0xFFDF) != 0x49
      || (*(_WORD *)(v9 + 24) & 0xFFDF) != 0x41
      || (*(_WORD *)(v9 + 26) & 0xFFDF) != 0x4C)
    {
      return WTF::String::String(a2, (uint64_t)"anonymous", 10);
    }
    v10 = *(unsigned __int16 *)(v9 + 28);
  }
  if ((v10 & 0xFFFFFFDF) == 0x53)
    return WTF::String::String(a2, (uint64_t)"use-credentials", 16);
  return WTF::String::String(a2, (uint64_t)"anonymous", 10);
}

uint64_t WebCore::HTMLImageElement::cachedImage(WebCore::HTMLImageElement *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 22) + 24);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

WTF *WebCore::HTMLImageElement::image(WebCore::HTMLImageElement *this)
{
  uint64_t v1;
  uint64_t v2;
  WTF *result;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9[2];

  v1 = *(_QWORD *)(*((_QWORD *)this + 22) + 24);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if ((*(_WORD *)(v2 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v2 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v9);
    v5 = (unsigned int *)v9[0];
    if (!v9[0])
      return 0;
    v8 = *((_QWORD *)v9[0] + 1);
    v9[0] = 0;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
    return (WTF *)v8;
  }
  else
  {
    result = *(WTF **)(v2 + 688);
    if (!result)
    {
      {
        return (WTF *)WebCore::Image::nullImage(void)::nullImage;
      }
      else
      {
        WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v9);
        result = v9[0];
        WebCore::Image::nullImage(void)::nullImage = (uint64_t)v9[0];
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLImageElement::allowsAnimation(WebCore::HTMLImageElement *this)
{
  uint64_t v1;
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  uint64_t v5;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  WebCore::HTMLImageElement *v12;
  WebCore::HTMLImageElement *v13;
  WTF *v14[2];

  v1 = *(_QWORD *)(*((_QWORD *)this + 22) + 24);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if ((*(_WORD *)(v2 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v2 + 720) & 0x10) != 0)
  {
    v12 = this;
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v14);
    v8 = (unsigned int *)v14[0];
    if (v14[0])
    {
      v11 = (WTF *)*((_QWORD *)v14[0] + 1);
      v14[0] = 0;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v7);
      }
    }
    else
    {
      v11 = 0;
    }
    v3 = v11;
    this = v12;
  }
  else
  {
    v3 = *(WTF **)(v2 + 688);
    if (v3)
      goto LABEL_5;
    {
      v3 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
    }
    else
    {
      v13 = this;
      WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v14);
      this = v13;
      v3 = v14[0];
      WebCore::Image::nullImage(void)::nullImage = (uint64_t)v14[0];
    }
  }
  if (!v3)
    return 0;
LABEL_5:
  v4 = *((unsigned __int16 *)v3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v5)
  {
    v5 = *(_QWORD *)(v5 + 8);
    if (v5)
    {
      v5 = *(_QWORD *)(v5 + 24);
      if (v5)
      {
        v5 = *(_QWORD *)(v5 + 8);
        if (v5)
          LODWORD(v5) = *(unsigned __int8 *)(v5 + 545) != 0;
      }
    }
  }
  if (v4 >= 0x100)
    return v4 != 0;
  else
    return v5;
}

WebCore::HTMLImageElement *WebCore::HTMLImageElement::setAllowsAnimation(WebCore::HTMLImageElement *result, void *a2)
{
  WebCore::HTMLImageElement *v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  _BYTE v14[20];
  __int128 v15;
  char v16;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 5) + 8) + 680) + 704) & 0x8000000000) == 0)
    return result;
  v2 = result;
  v3 = *(_QWORD *)(*((_QWORD *)result + 22) + 24);
  if (!v3)
    return result;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return result;
  v5 = (__int16)a2;
  if ((*(_WORD *)(v4 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v4 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)&v15);
    result = (WebCore::HTMLImageElement *)v15;
    if ((_QWORD)v15)
    {
      v6 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)&v15 = 0;
      do
      {
        v12 = __ldaxr((unsigned int *)result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)result));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)result);
        result = (WebCore::HTMLImageElement *)WTF::fastFree(result, a2);
      }
    }
    else
    {
      v6 = 0;
    }
LABEL_22:
    if (!v6)
      return result;
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(v4 + 688);
  if (!v6)
  {
    {
      v6 = WebCore::Image::nullImage(void)::nullImage;
    }
    else
    {
      result = (WebCore::HTMLImageElement *)WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v15);
      v6 = v15;
      WebCore::Image::nullImage(void)::nullImage = v15;
    }
    goto LABEL_22;
  }
LABEL_6:
  *(_WORD *)(v6 + 48) = v5;
  result = (WebCore::HTMLImageElement *)(*((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL);
  if (result)
  {
    if ((*(_BYTE *)((*((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195BEACA8);
    }
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40)
                                                                                           + 8)
                                                                               + 1944)
                                                                   + 24)
                                                       + 8)
                                           + 40)
                               + 8)
                   + 3382))
    {
      LOBYTE(v15) = 0;
      v16 = 0;
      v14[0] = 0;
      v14[16] = 0;
      result = (WebCore::HTMLImageElement *)WebCore::RenderObject::issueRepaint((uint64_t)result, &v15, 0, 0, (uint64_t)v14);
    }
  }
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 5) + 8) + 528);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 24);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          if ((v5 & 0xFF00) != 0 && (_BYTE)v5)
          {
            v11 = WTF::WeakHashSet<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(v10 + 552, a2);
            result = (WebCore::HTMLImageElement *)WTF::WeakHashSet<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::HTMLImageElement>(v10 + 552, v2, (uint64_t)&v15);
            if (!v11 && !*(_BYTE *)(v10 + 545))
              return (WebCore::HTMLImageElement *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v10 + 48) + 16)
                                                                                             + 1448))(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16), 1);
          }
          else
          {
            return (WebCore::HTMLImageElement *)WebCore::Page::removeIndividuallyPlayingAnimationElement((WebCore::Page *)v10, v2);
          }
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLImageElement::setAttachmentElement(uint64_t a1, WebCore::StyledElement **a2)
{
  return WebCore::AttachmentAssociatedElement::setAttachmentElement(a1 + 112, a2);
}

uint64_t WebCore::HTMLImageElement::willRespondToMouseClickEventsWithEditability(_QWORD *a1, int a2)
{
  uint64_t result;

  if ((a1[8] & 0xFFFFFFFFFFFFLL) == 0)
    return 1;
  if ((*(_BYTE *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  if ((*(_BYTE *)(*(_QWORD *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x68) + 236) & 0x40) != 0)
    return 1;
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 960))(a1) & 1) != 0)
    return 0;
  else
    return WebCore::Node::willRespondToMouseClickEventsWithEditability((uint64_t)a1, a2);
}

BOOL WebCore::HTMLImageElement::isSystemPreviewImage(WebCore::HTMLImageElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680);
  if (((*(unsigned int *)(v1 + 720) | (unint64_t)((uint64_t)*(char *)(v1 + 724) << 32)) & 0x8000000000000000) != 0
    && (v2 = *((_QWORD *)this + 4)) != 0
    && (~*(unsigned __int16 *)(v2 + 28) & 0x18) == 0
    && ((v4 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24), v5 = *(_QWORD *)(WebCore::HTMLNames::aTag + 24), v4 == v5)
     || v4 == *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24)
     && (v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 680),
         ((*(unsigned int *)(v6 + 720) | (unint64_t)((uint64_t)*(char *)(v6 + 724) << 32)) & 0x8000000000000000) != 0)
     && (v2 = *(_QWORD *)(v2 + 32)) != 0
     && (~*(unsigned __int16 *)(v2 + 28) & 0x18) == 0
     && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == v5))
  {
    return WebCore::HTMLAnchorElement::isSystemPreviewLink((WebCore::HTMLAnchorElement *)v2);
  }
  else
  {
    return 0;
  }
}

WTF::StringImpl *WebCore::HTMLImageElement::copyNonAttributePropertiesFromElement(WebCore::HTMLImageElement *this, const WebCore::Element *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *result;

  if ((*((_WORD *)a2 + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195BEAF38);
  }
  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 15);
  if (v3 && *((_DWORD *)v3 + 1))
  {
    v4 = (WTF::StringImpl **)((char *)this + 120);
  }
  else
  {
    v3 = *(WTF::StringImpl **)WebCore::AttachmentAssociatedElement::attachmentIdentifier((const WebCore::Element *)((char *)a2 + 112));
    v4 = (WTF::StringImpl **)((char *)this + 120);
    if (!v3)
      goto LABEL_6;
  }
  *(_DWORD *)v3 += 2;
LABEL_6:
  result = *v4;
  *v4 = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::HTMLImageElement::copyNonAttributePropertiesFromElement(WebCore::HTMLImageElement *this, const WebCore::Element *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *result;

  if ((*((_WORD *)a2 + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195BEAFFCLL);
  }
  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 15);
  if (v3 && *((_DWORD *)v3 + 1))
  {
    v4 = (WTF::StringImpl **)((char *)this + 8);
  }
  else
  {
    v3 = *(WTF::StringImpl **)WebCore::AttachmentAssociatedElement::attachmentIdentifier((const WebCore::Element *)((char *)a2 + 112));
    v4 = (WTF::StringImpl **)((char *)this + 8);
    if (!v3)
      goto LABEL_6;
  }
  *(_DWORD *)v3 += 2;
LABEL_6:
  result = *v4;
  *v4 = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLImageElement::virtualHasPendingActivity(WebCore::HTMLImageElement *this)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  unsigned int v4;

  v1 = *((_QWORD *)this + 22);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (v2)
    {
      v3 = *(_WORD *)(v2 + 557);
      LODWORD(v2) = (v3 & 0x400) == 0 && (v3 & 0xE0) == 0 && (v3 >> 5) - 5 < 0xFFFFFFFE;
    }
  }
  v4 = *(unsigned __int8 *)(v1 + 128);
  if ((v4 & 2) != 0 && !(_DWORD)v2)
    return 1;
  else
    return (v4 >> 2) & 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLImageElement::virtualHasPendingActivity(WebCore::HTMLImageElement *this)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  unsigned int v4;

  v1 = *((_QWORD *)this + 3);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (v2)
    {
      v3 = *(_WORD *)(v2 + 557);
      LODWORD(v2) = (v3 & 0x400) == 0 && (v3 & 0xE0) == 0 && (v3 >> 5) - 5 < 0xFFFFFFFE;
    }
  }
  v4 = *(unsigned __int8 *)(v1 + 128);
  if ((v4 & 2) != 0 && !(_DWORD)v2)
    return 1;
  else
    return (v4 >> 2) & 1;
}

uint64_t WebCore::HTMLImageElement::pendingDecodePromisesCountForTesting(WebCore::HTMLImageElement *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 22) + 124);
}

void *WebCore::HTMLImageElement::loadingForBindings(WebCore::HTMLImageElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    goto LABEL_12;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_4;
LABEL_12:
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    goto LABEL_12;
LABEL_4:
  v4 = v4;
  v5 = (uint64_t *)(v3 + 8);
  while (1)
  {
    v6 = *(v5 - 1);
    if (v6 == WebCore::HTMLNames::loadingAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::loadingAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::loadingAttr + 32))
    {
      break;
    }
    v5 += 2;
    if (!--v4)
    {
      v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v7 = *v5;
  if (!*v5 || *(_DWORD *)(v7 + 4) != 4)
    return &WebCore::eagerAtomData;
  v9 = *(_QWORD *)(v7 + 8);
  if ((*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v9 & 0xDF) != 0x4C || (*(_BYTE *)(v9 + 1) & 0xDF) != 0x41 || (*(_BYTE *)(v9 + 2) & 0xDF) != 0x5A)
      return &WebCore::eagerAtomData;
    v10 = *(unsigned __int8 *)(v9 + 3);
  }
  else
  {
    if ((*(_WORD *)v9 & 0xFFDF) != 0x4C
      || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0x41
      || (*(_WORD *)(v9 + 4) & 0xFFDF) != 0x5A)
    {
      return &WebCore::eagerAtomData;
    }
    v10 = *(unsigned __int16 *)(v9 + 6);
  }
  if ((v10 & 0xFFFFFFDF) != 0x59)
    return &WebCore::eagerAtomData;
  return &WebCore::lazyAtomData;
}

WebCore::Node *WebCore::HTMLImageElement::invalidateAttributeMapping(WebCore::HTMLImageElement *this)
{
  uint64_t v2;
  int v3;

  v2 = *((_QWORD *)this + 13);
  if (!v2 || (v3 = *(_DWORD *)(v2 + 4), (v3 & 1) == 0))
  {
    WebCore::Element::createUniqueElementData(this);
    v2 = *((_QWORD *)this + 13);
    v3 = *(_DWORD *)(v2 + 4);
  }
  *(_DWORD *)(v2 + 4) = v3 | 4;
  return WebCore::Element::invalidateStyle(this);
}

uint64_t WebCore::HTMLImageElement::cloneElementWithoutAttributesAndChildren@<X0>(WebCore::HTMLImageElement *this@<X0>, WebCore::Document *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Document *v10;
  uint64_t v11;
  WebCore::Document *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t StatusReg;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;

  v6 = bmalloc::api::isoAllocate();
  v7 = v6;
  *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v6 + 24) = 0x1C1C00000002;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = (char *)a2 + 96;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  ++*((_DWORD *)a2 + 831);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v8 = WebCore::HTMLNames::imgTag;
  if (WebCore::HTMLNames::imgTag)
    ++*(_DWORD *)WebCore::HTMLNames::imgTag;
  *(_QWORD *)(v6 + 96) = v8;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)v6 = off_1E33BC680;
  *(_QWORD *)(v6 + 112) = off_1E33AF7B0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = off_1E33B3CE0;
  v9 = v6 + 152;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 144) = 0;
  v10 = a2;
  v11 = *((_QWORD *)a2 + 88);
  if (v11)
  {
    v12 = *(WebCore::Document **)(v11 + 8);
    if (v12)
      v10 = v12;
    else
      v10 = a2;
  }
  *(_QWORD *)(v6 + 152) = &off_1E33A18C0;
  *(_QWORD *)(v6 + 160) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v6 + 152), (WebCore::Document *)((char *)v10 + 192));
  *(_QWORD *)(v7 + 152) = &off_1E33A0540;
  *(_QWORD *)(v7 + 168) = 0;
  if (*((_BYTE *)v10 + 470))
  {
    __break(0xC471u);
    JUMPOUT(0x195BEB538);
  }
  v26 = v7 + 152;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v10 + 40, &v26, (uint64_t)&v25);
  *(_QWORD *)v7 = off_1E33BF560;
  *(_QWORD *)(v7 + 112) = &unk_1E33BFAB8;
  *(_QWORD *)(v7 + 128) = &unk_1E33BFB20;
  *(_QWORD *)(v7 + 152) = &unk_1E33BFB98;
  v13 = WTF::fastMalloc((WTF *)0x88);
  *(_QWORD *)v13 = off_1E33F60F0;
  *(_QWORD *)(v13 + 8) = 0;
  v14 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v7);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(v13 + 16) = v14;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  v17 = *(unsigned int **)(StatusReg + 736);
  if (!v17)
    v17 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  *(_QWORD *)(v13 + 72) = v17;
  *(_QWORD *)(v13 + 32) = off_1E31F7378;
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v19 = off_1E33F6510;
  v19[1] = WebCore::ImageLoader::timerFired;
  v19[2] = 0;
  v19[3] = v13;
  *(_QWORD *)(v13 + 80) = v19;
  *(_QWORD *)(v13 + 120) = 0;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_BYTE *)(v13 + 128) = *(_BYTE *)(v13 + 128) & 0xC0 | 8;
  *(_BYTE *)(v13 + 129) = 0;
  *(_QWORD *)v13 = off_1E33BFBF0;
  *(_QWORD *)(v7 + 200) = 0;
  *(_QWORD *)(v7 + 184) = 0;
  *(_QWORD *)(v7 + 192) = 0;
  *(_QWORD *)(v7 + 176) = v13;
  WTF::URL::invalidate((WTF::URL *)(v7 + 200));
  *(_QWORD *)(v7 + 240) = 0;
  *(_QWORD *)(v7 + 248) = 0;
  *(_BYTE *)(v7 + 256) = 2;
  *(_DWORD *)(v7 + 260) = 1065353216;
  *(_WORD *)(v7 + 264) = 0;
  *(_OWORD *)(v7 + 272) = 0u;
  *(_OWORD *)(v7 + 288) = 0u;
  v21 = *(_QWORD *)(v7 + 160);
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 8);
    if (v22)
    {
      v23 = *(unsigned __int8 *)(v22 + 178);
      if (*(_BYTE *)(v22 + 178))
      {
        if (v23 == 1 || v23 == 2)
          ++*(_DWORD *)(v22 + 216);
      }
      else
      {
        *(_DWORD *)(v22 - 264) += 2;
      }
      if (*(_BYTE *)(v22 + 179))
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 24))(v7 + 152, *(unsigned __int8 *)(v22 + 177));
      if (*(_BYTE *)(v22 + 180))
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 56))(v7 + 152);
      WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed((unsigned int *)(v22 - 96), v20);
    }
  }
  result = WebCore::AttachmentAssociatedElement::cloneAttachmentAssociatedElementWithoutAttributesAndChildren((WebCore::HTMLImageElement *)((char *)this + 112), (WebCore::AttachmentAssociatedElement *)(v7 + 112), a2);
  *a3 = v7;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLImageElement::cloneElementWithoutAttributesAndChildren@<X0>(WebCore::HTMLImageElement *this@<X0>, WebCore::Document *a2@<X1>, uint64_t *a3@<X8>)
{
  return WebCore::HTMLImageElement::cloneElementWithoutAttributesAndChildren((WebCore::HTMLImageElement *)((char *)this - 112), a2, a3);
}

uint64_t WebCore::HTMLImageElement::fetchPriorityForBindings@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 8) + 680) + 672) & 0x8000000000000000) == 0)
  {
    v9 = 2;
    goto LABEL_17;
  }
  v3 = *(_QWORD *)(this + 104);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 4);
    if ((v4 & 1) != 0)
    {
      v5 = *(_QWORD *)(v3 + 40);
      LODWORD(v6) = *(_DWORD *)(v3 + 52);
      if ((_DWORD)v6)
      {
LABEL_5:
        v6 = v6;
        v7 = (uint64_t *)(v5 + 8);
        while (1)
        {
          v8 = *(v7 - 1);
          if (v8 == WebCore::HTMLNames::fetchpriorityAttr
            || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::fetchpriorityAttr + 24)
            && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::fetchpriorityAttr + 32))
          {
            goto LABEL_14;
          }
          v7 += 2;
          if (!--v6)
          {
            v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            goto LABEL_14;
          }
        }
      }
    }
    else
    {
      v5 = v3 + 32;
      LODWORD(v6) = v4 >> 5;
      if ((_DWORD)v6)
        goto LABEL_5;
    }
  }
  v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_14:
  this = WebCore::parseEnumerationFromString<WebCore::RequestPriority>(v7);
  if ((this & 0xFF00) != 0)
    v9 = this;
  else
    v9 = 2;
LABEL_17:
  {
    WebCore::convertEnumerationToString(WebCore::RequestPriority)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RequestPriority)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RequestPriority)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RequestPriority)::$_0::operator() const(void)::impl;
    unk_1EE2F4BF0 = &WebCore::convertEnumerationToString(WebCore::RequestPriority)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::RequestPriority)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4BF8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RequestPriority)::$_2::operator() const(void)::impl;
  }
  v10 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::RequestPriority)::values[v9];
  if (v10)
    *v10 += 2;
  *a2 = v10;
  return this;
}

BOOL WebCore::HTMLImageElement::originClean(WebCore::HTMLImageElement *this, const WebCore::SecurityOrigin *a2)
{
  uint64_t v2;
  uint64_t v3;
  _WORD *v4;
  WTF::StringImpl *v5;
  _BOOL8 v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  int v10;
  WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v19[5];

  v2 = *(_QWORD *)(*((_QWORD *)this + 22) + 24);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 1;
  v4 = (_WORD *)(v3 + 557);
  if ((*(_WORD *)(v3 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v3 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v19);
    v16 = (unsigned int *)v19[0];
    if (v19[0])
    {
      v5 = (WTF::StringImpl *)*((_QWORD *)v19[0] + 1);
      v19[0] = 0;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v15);
      }
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = *(WTF::StringImpl **)(v3 + 688);
    if (v5)
      goto LABEL_5;
    {
      v5 = (WTF::StringImpl *)WebCore::Image::nullImage(void)::nullImage;
    }
    else
    {
      WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v19);
      v5 = v19[0];
      WebCore::Image::nullImage(void)::nullImage = (uint64_t)v19[0];
    }
  }
  if (!v5)
    return 1;
LABEL_5:
  ++*((_DWORD *)v5 + 2);
  if (((*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v5 + 120))(v5) & 1) != 0)
  {
    v6 = 0;
    goto LABEL_26;
  }
  v7 = *((_QWORD *)v5 + 4);
  if (v7 && (v8 = *(_DWORD **)(v7 + 8)) != 0)
  {
    v8[2] += 2;
    (*(void (**)(WTF::StringImpl **__return_ptr, _DWORD *))(*(_QWORD *)v8 + 16))(v19, v8);
    v9 = v8[2] - 1;
    if (v8[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      v9 = v8[2];
    }
    else
    {
      v8[2] = v9;
    }
    v10 = v9 - 1;
    if (v10)
      v8[2] = v10;
    else
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  }
  else
  {
    v19[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v19);
  }
  v12 = WTF::URL::protocolIs();
  v13 = v19[0];
  v19[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, v11);
      if ((v12 & 1) != 0)
        goto LABEL_17;
      goto LABEL_25;
    }
    *(_DWORD *)v13 -= 2;
  }
  if ((v12 & 1) != 0)
  {
LABEL_17:
    v6 = 1;
    goto LABEL_26;
  }
LABEL_25:
  v6 = (*v4 & 2) == 0;
LABEL_26:
  if (*((_DWORD *)v5 + 2) == 1)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v5 + 8))(v5);
  else
    --*((_DWORD *)v5 + 2);
  return v6;
}

_OWORD *WebCore::HTMLImageElement::ensureIntersectionObserverData(WebCore::HTMLImageElement *this)
{
  _OWORD *result;
  char *v2;
  WTF *v3;

  v2 = (char *)this + 184;
  result = (_OWORD *)*((_QWORD *)this + 23);
  if (!result)
  {
    result = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
    *result = 0u;
    result[1] = 0u;
    v3 = *(WTF **)v2;
    *(_QWORD *)v2 = result;
    if (v3)
    {
      std::default_delete<WebCore::IntersectionObserverData>::operator()[abi:sn180100]((int)v2, v3);
      return *(_OWORD **)v2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLImageElement::intersectionObserverDataIfExists(WebCore::HTMLImageElement *this)
{
  return *((_QWORD *)this + 23);
}

void WebCore::HTMLImageLoader::~HTMLImageLoader(WebCore::HTMLImageLoader *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ImageLoader::~ImageLoader(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::HTMLImageLoader::notifyFinished(WebCore::ImageLoader *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  WTF::RunLoop *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  __int16 v12;
  __int16 v13;
  uint64_t v14;
  char v15;
  unsigned int **v16;
  unsigned int *v17;

  v2 = *((_QWORD *)a1 + 3);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v4 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  WebCore::ImageLoader::notifyFinished(a1, (WTF::StringImpl *)v3);
  if ((*(_WORD *)(v3 + 557) >> 5) - 3 >= 2)
  {
    v6 = *(uint64_t **)(v3 + 400);
    if (!v6)
    {
      v11 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
      if (v11 != -1)
      {
        v17 = (unsigned int *)&v15;
        v16 = &v17;
        std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
      }
      v6 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
    }
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v6, 1);
    if (*((__int16 *)v6 + 68) <= 399)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8) + 22) & 8) != 0)
        goto LABEL_12;
      v8 = WebCore::g_commonVMOrNull;
      if (WebCore::g_commonVMOrNull)
        goto LABEL_8;
      WTF::RunLoop::webIfExists(v7);
      JSC::VM::create();
      v8 = (uint64_t)v17;
      WebCore::g_commonVMOrNull = (uint64_t)v17;
      if (__ldaxr(v17 + 274))
      {
        __clrex();
      }
      else if (!__stlxr(4u, v17 + 274))
      {
        goto LABEL_18;
      }
      JSC::Heap::acquireAccessSlow((JSC::Heap *)(v8 + 192));
LABEL_18:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v8 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v8 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v8, 0);
LABEL_8:
      MEMORY[0x19AEA3294](&v17, v8);
      v9 = *(_QWORD *)(v3 + 400);
      if (v9 && *(_DWORD *)(v9 + 400) >= 0x101u)
        JSC::Heap::deprecatedReportExtraMemorySlowCase((JSC::Heap *)(v8 + 192));
      MEMORY[0x19AEA32A0](&v17);
      goto LABEL_12;
    }
  }
  v14 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
  if ((*(_WORD *)(v14 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
  {
    *(_DWORD *)(v14 + 24) += 2;
    WebCore::HTMLObjectElement::renderFallbackContent(v14, v5);
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v5);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
LABEL_12:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    v12 = *(_WORD *)(v4 + 30);
    if ((v12 & 0x400) == 0)
    {
      v13 = *(_WORD *)(v4 + 28);
      if ((v13 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v4, v5);
      }
      else
      {
        if ((v13 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
          v12 = *(_WORD *)(v4 + 30);
        }
        *(_WORD *)(v4 + 30) = v12 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
      }
    }
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
}

uint64_t WebCore::HTMLInputElement::cloneElementWithoutAttributesAndChildren@<X0>(WebCore::HTMLInputElement *this@<X0>, WebCore::Document *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = bmalloc::api::isoAllocate();
  result = WebCore::HTMLTextFormControlElement::HTMLTextFormControlElement(v6, (WebCore::HTMLInputElement *)((char *)this + 96), a2, 0);
  *(_QWORD *)result = off_1E33BFC70;
  *(_QWORD *)(result + 112) = &unk_1E33C0318;
  *(_QWORD *)(result + 208) = 0;
  *(_QWORD *)(result + 216) = 0;
  *(_DWORD *)(result + 224) = 20;
  *(_WORD *)(result + 228) = -1;
  *(_WORD *)(result + 230) &= 0xC000u;
  *(_WORD *)(result + 232) &= 0x8000u;
  *(_QWORD *)(result + 248) = 0;
  *(_QWORD *)(result + 256) = 0;
  *(_QWORD *)(result + 240) = 0;
  *a3 = result;
  return result;
}

void `non-virtual thunk to'WebCore::HTMLInputElement::~HTMLInputElement(WebCore::HTMLInputElement *this, void *a2)
{
  WebCore::HTMLInputElement::~HTMLInputElement((WebCore::HTMLInputElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLInputElement::~HTMLInputElement((WebCore::HTMLInputElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::HTMLInputElement::name(WebCore::HTMLInputElement *this)
{
  uint64_t result;
  uint64_t v2;

  v2 = *((_QWORD *)this + 26);
  result = (uint64_t)this + 208;
  if (!v2)
    return MEMORY[0x1E0CBF3B8];
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLInputElement::name(WebCore::HTMLInputElement *this)
{
  uint64_t result;
  uint64_t v2;

  v2 = *((_QWORD *)this + 12);
  result = (uint64_t)this + 96;
  if (!v2)
    return MEMORY[0x1E0CBF3B8];
  return result;
}

uint64_t WebCore::HTMLInputElement::innerTextElement(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 544))(*((_QWORD *)this + 30));
}

uint64_t WebCore::HTMLInputElement::autoFillButtonElement(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 560))(*((_QWORD *)this + 30));
}

uint64_t WebCore::HTMLInputElement::placeholderElement(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 600))(*((_QWORD *)this + 30));
}

uint64_t WebCore::HTMLInputElement::dataListButtonElement(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 608))(*((_QWORD *)this + 30));
}

BOOL WebCore::HTMLInputElement::shouldAutocomplete(WebCore::HTMLInputElement *this)
{
  uint64_t v1;
  WebCore::HTMLFormElement *v3;

  if (*((_WORD *)this + 115) >> 6)
    return *((_WORD *)this + 115) >> 6 == 1;
  v1 = *((_QWORD *)this + 15);
  return !v1 || (v3 = *(WebCore::HTMLFormElement **)(v1 + 8)) == 0 || WebCore::HTMLFormElement::shouldAutocomplete(v3);
}

uint64_t WebCore::HTMLInputElement::tooShort(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 + 240) + 12) & 0x2A8820) == 0)
    return 0;
  v3 = *(_DWORD *)(a1 + 176);
  if (v3 < 1 || !*(_QWORD *)(a1 + 216))
    return 0;
  if (v3 > a3)
    return *(_BYTE *)(a1 + 233) & (a3 != 0);
  return 0;
}

uint64_t WebCore::HTMLInputElement::tooShort(WebCore::HTMLInputElement *this)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  char v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v16;

  v2 = (_DWORD *)*((_QWORD *)this + 30);
  if (v2[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v2, &v16);
    goto LABEL_17;
  }
  v3 = *((_QWORD *)this + 27);
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    v16 = v3;
    goto LABEL_22;
  }
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 4);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(v4 + 40);
      LODWORD(v7) = *(_DWORD *)(v4 + 52);
      if ((_DWORD)v7)
      {
LABEL_6:
        v7 = v7;
        v8 = (_QWORD *)(v6 + 8);
        while (1)
        {
          v9 = *(v8 - 1);
          if (v9 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_15;
          }
          v8 += 2;
          if (!--v7)
          {
            v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_15;
          }
        }
      }
    }
    else
    {
      v6 = v4 + 32;
      LODWORD(v7) = v5 >> 5;
      if ((_DWORD)v7)
        goto LABEL_6;
    }
  }
  v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_15:
  if (*v8)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 296))(&v16);
    v3 = v16;
    if (v16)
      goto LABEL_22;
    v16 = 0;
    v2 = (_DWORD *)*((_QWORD *)this + 30);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 64))(&v16);
LABEL_17:
  v3 = v16;
  if (!v16)
  {
    v10 = 0;
    v11 = 0;
    v12 = 1;
    goto LABEL_23;
  }
LABEL_22:
  v12 = 0;
  v10 = *(_QWORD *)(v3 + 8);
  v11 = *(_DWORD *)(v3 + 4);
LABEL_23:
  v14 = WebCore::HTMLInputElement::tooShort((uint64_t)this, v10, v11);
  v16 = 0;
  if ((v12 & 1) == 0)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v3, v13);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v14;
}

uint64_t `non-virtual thunk to'WebCore::HTMLInputElement::tooShort(WebCore::HTMLInputElement *this)
{
  return WebCore::HTMLInputElement::tooShort((WebCore::HTMLInputElement *)((char *)this - 112));
}

BOOL WebCore::HTMLInputElement::tooLong(WebCore::HTMLInputElement *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  char v12;
  unsigned int v13;
  _BOOL8 v14;
  _BOOL4 v16;
  WTF::StringImpl *v17;

  v3 = (_DWORD *)*((_QWORD *)this + 30);
  if (v3[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v3, &v17);
    goto LABEL_17;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  if (v4)
  {
    *(_DWORD *)v4 += 2;
    goto LABEL_22;
  }
  v5 = *((_QWORD *)this + 13);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 4);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(v5 + 40);
      LODWORD(v8) = *(_DWORD *)(v5 + 52);
      if ((_DWORD)v8)
      {
LABEL_6:
        v8 = v8;
        v9 = (_QWORD *)(v7 + 8);
        while (1)
        {
          v10 = *(v9 - 1);
          if (v10 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_15;
          }
          v9 += 2;
          if (!--v8)
          {
            v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_15;
          }
        }
      }
    }
    else
    {
      v7 = v5 + 32;
      LODWORD(v8) = v6 >> 5;
      if ((_DWORD)v8)
        goto LABEL_6;
    }
  }
  v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_15:
  if (*v9)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v3 + 296))(&v17);
    v4 = v17;
    if (v17)
      goto LABEL_22;
    v17 = 0;
    v3 = (_DWORD *)*((_QWORD *)this + 30);
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v3 + 64))(&v17);
LABEL_17:
  v4 = v17;
  if (v17)
  {
LABEL_22:
    v12 = 0;
    v11 = *((_DWORD *)v4 + 1);
    goto LABEL_23;
  }
  v11 = 0;
  v12 = 1;
  if ((*(_DWORD *)(*((_QWORD *)this + 30) + 12) & 0x2A8820) == 0)
    goto LABEL_27;
LABEL_23:
  v13 = *((_DWORD *)this + 43);
  if (v13 >= 0x80000)
    v13 = 0x80000;
  if (*((_QWORD *)this + 27))
  {
    v16 = v13 < v11;
    v14 = (*((_WORD *)this + 116) & 0x100) != 0 && v16;
  }
  else
  {
LABEL_27:
    v14 = 0;
  }
  v17 = 0;
  if ((v12 & 1) == 0)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v14;
}

BOOL `non-virtual thunk to'WebCore::HTMLInputElement::tooLong(WebCore::HTMLInputElement *this, WTF::StringImpl *a2)
{
  return WebCore::HTMLInputElement::tooLong((WebCore::HTMLInputElement *)((char *)this - 112), a2);
}

uint64_t WebCore::HTMLInputElement::typeMismatch(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 288))(*((_QWORD *)this + 30));
}

uint64_t `non-virtual thunk to'WebCore::HTMLInputElement::typeMismatch(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 288))(*((_QWORD *)this + 16));
}

uint64_t WebCore::HTMLInputElement::valueMissing(WebCore::HTMLInputElement *this)
{
  _DWORD *v1;
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;

  v1 = (_DWORD *)*((_QWORD *)this + 30);
  if (v1[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue(*((_QWORD *)this + 30), &v15);
    goto LABEL_20;
  }
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    v15 = v3;
    goto LABEL_20;
  }
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 4);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(v4 + 40);
      LODWORD(v7) = *(_DWORD *)(v4 + 52);
      if ((_DWORD)v7)
      {
LABEL_6:
        v7 = v7;
        v8 = (_QWORD *)(v6 + 8);
        while (1)
        {
          v9 = *(v8 - 1);
          if (v9 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_15;
          }
          v8 += 2;
          if (!--v7)
          {
            v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_15;
          }
        }
      }
    }
    else
    {
      v6 = v4 + 32;
      LODWORD(v7) = v5 >> 5;
      if ((_DWORD)v7)
        goto LABEL_6;
    }
  }
  v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_15:
  v10 = *((_QWORD *)this + 30);
  if (!*v8)
  {
LABEL_16:
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v10 + 64))(&v15);
    goto LABEL_20;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _DWORD *))(*(_QWORD *)v1 + 296))(&v15, v1);
  if (!v15)
  {
    v15 = 0;
    v10 = *((_QWORD *)this + 30);
    goto LABEL_16;
  }
LABEL_20:
  v12 = (*(uint64_t (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v1 + 152))(v1, &v15);
  v13 = v15;
  v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v12;
}

uint64_t `non-virtual thunk to'WebCore::HTMLInputElement::valueMissing(WebCore::HTMLInputElement *this)
{
  return WebCore::HTMLInputElement::valueMissing((WebCore::HTMLInputElement *)((char *)this - 112));
}

uint64_t WebCore::HTMLInputElement::hasBadInput(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 160))(*((_QWORD *)this + 30));
}

uint64_t `non-virtual thunk to'WebCore::HTMLInputElement::hasBadInput(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 160))(*((_QWORD *)this + 16));
}

uint64_t WebCore::HTMLInputElement::patternMismatch(WebCore::HTMLInputElement *this)
{
  _DWORD *v1;
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;

  v1 = (_DWORD *)*((_QWORD *)this + 30);
  if (v1[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue(*((_QWORD *)this + 30), &v15);
    goto LABEL_20;
  }
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    v15 = v3;
    goto LABEL_20;
  }
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 4);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(v4 + 40);
      LODWORD(v7) = *(_DWORD *)(v4 + 52);
      if ((_DWORD)v7)
      {
LABEL_6:
        v7 = v7;
        v8 = (_QWORD *)(v6 + 8);
        while (1)
        {
          v9 = *(v8 - 1);
          if (v9 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_15;
          }
          v8 += 2;
          if (!--v7)
          {
            v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_15;
          }
        }
      }
    }
    else
    {
      v6 = v4 + 32;
      LODWORD(v7) = v5 >> 5;
      if ((_DWORD)v7)
        goto LABEL_6;
    }
  }
  v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_15:
  v10 = *((_QWORD *)this + 30);
  if (!*v8)
  {
LABEL_16:
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v10 + 64))(&v15);
    goto LABEL_20;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _DWORD *))(*(_QWORD *)v1 + 296))(&v15, v1);
  if (!v15)
  {
    v15 = 0;
    v10 = *((_QWORD *)this + 30);
    goto LABEL_16;
  }
LABEL_20:
  v12 = (*(uint64_t (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v1 + 168))(v1, &v15);
  v13 = v15;
  v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v12;
}

uint64_t `non-virtual thunk to'WebCore::HTMLInputElement::patternMismatch(WebCore::HTMLInputElement *this)
{
  return WebCore::HTMLInputElement::patternMismatch((WebCore::HTMLInputElement *)((char *)this - 112));
}

BOOL WebCore::HTMLInputElement::rangeUnderflow(WebCore::HTMLInputElement *this)
{
  WebCore::InputType *v1;
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _BOOL8 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;

  v1 = (WebCore::InputType *)*((_QWORD *)this + 30);
  if (*((_DWORD *)v1 + 3) == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue(*((_QWORD *)this + 30), &v15);
    goto LABEL_20;
  }
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    v15 = v3;
    goto LABEL_20;
  }
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 4);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(v4 + 40);
      LODWORD(v7) = *(_DWORD *)(v4 + 52);
      if ((_DWORD)v7)
      {
LABEL_6:
        v7 = v7;
        v8 = (_QWORD *)(v6 + 8);
        while (1)
        {
          v9 = *(v8 - 1);
          if (v9 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_15;
          }
          v8 += 2;
          if (!--v7)
          {
            v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_15;
          }
        }
      }
    }
    else
    {
      v6 = v4 + 32;
      LODWORD(v7) = v5 >> 5;
      if ((_DWORD)v7)
        goto LABEL_6;
    }
  }
  v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_15:
  v10 = *((_QWORD *)this + 30);
  if (!*v8)
  {
LABEL_16:
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v10 + 64))(&v15);
    goto LABEL_20;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InputType *))(*(_QWORD *)v1 + 296))(&v15, v1);
  if (!v15)
  {
    v15 = 0;
    v10 = *((_QWORD *)this + 30);
    goto LABEL_16;
  }
LABEL_20:
  v12 = WebCore::InputType::rangeUnderflow(v1, (const WTF::String *)&v15);
  v13 = v15;
  v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v12;
}

BOOL `non-virtual thunk to'WebCore::HTMLInputElement::rangeUnderflow(WebCore::HTMLInputElement *this)
{
  return WebCore::HTMLInputElement::rangeUnderflow((WebCore::HTMLInputElement *)((char *)this - 112));
}

BOOL WebCore::HTMLInputElement::rangeOverflow(WebCore::HTMLInputElement *this)
{
  WebCore::InputType *v1;
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _BOOL8 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;

  v1 = (WebCore::InputType *)*((_QWORD *)this + 30);
  if (*((_DWORD *)v1 + 3) == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue(*((_QWORD *)this + 30), &v15);
    goto LABEL_20;
  }
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    v15 = v3;
    goto LABEL_20;
  }
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 4);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(v4 + 40);
      LODWORD(v7) = *(_DWORD *)(v4 + 52);
      if ((_DWORD)v7)
      {
LABEL_6:
        v7 = v7;
        v8 = (_QWORD *)(v6 + 8);
        while (1)
        {
          v9 = *(v8 - 1);
          if (v9 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_15;
          }
          v8 += 2;
          if (!--v7)
          {
            v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_15;
          }
        }
      }
    }
    else
    {
      v6 = v4 + 32;
      LODWORD(v7) = v5 >> 5;
      if ((_DWORD)v7)
        goto LABEL_6;
    }
  }
  v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_15:
  v10 = *((_QWORD *)this + 30);
  if (!*v8)
  {
LABEL_16:
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v10 + 64))(&v15);
    goto LABEL_20;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InputType *))(*(_QWORD *)v1 + 296))(&v15, v1);
  if (!v15)
  {
    v15 = 0;
    v10 = *((_QWORD *)this + 30);
    goto LABEL_16;
  }
LABEL_20:
  v12 = WebCore::InputType::rangeOverflow(v1, (const WTF::String *)&v15);
  v13 = v15;
  v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v12;
}

BOOL `non-virtual thunk to'WebCore::HTMLInputElement::rangeOverflow(WebCore::HTMLInputElement *this)
{
  return WebCore::HTMLInputElement::rangeOverflow((WebCore::HTMLInputElement *)((char *)this - 112));
}

uint64_t WebCore::HTMLInputElement::validationMessage@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  char v4;
  _DWORD *v5;
  char v6;

  v2 = this;
  v4 = *(_BYTE *)(this + 160);
  if ((v4 & 4) == 0 || (*(_BYTE *)(this + 162) & 3) == 2)
  {
    *(_BYTE *)(this + 160) = v4 | 4;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this + 112) + 336))(this + 112);
    v4 = *(_BYTE *)(v2 + 160);
    if (((this ^ ((v4 & 2) == 0)) & 1) == 0)
    {
      if ((_DWORD)this)
        v6 = 2;
      else
        v6 = 0;
      v4 = v4 & 0xFD | v6;
      *(_BYTE *)(v2 + 160) = v4;
    }
  }
  if ((v4 & 2) != 0)
  {
    v5 = *(_DWORD **)(v2 + 144);
    if (v5 && v5[1])
    {
      *v5 += 2;
      *a2 = v5;
    }
    else
    {
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 240) + 128))(*(_QWORD *)(v2 + 240));
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

_BYTE *`non-virtual thunk to'WebCore::HTMLInputElement::validationMessage@<X0>(_BYTE *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v2;
  char v4;
  _DWORD *v5;
  char v6;

  v2 = this;
  v4 = this[48];
  if ((v4 & 4) == 0 || (this[50] & 3) == 2)
  {
    this[48] = v4 | 4;
    this = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 336))(this);
    v4 = v2[48];
    if (((this ^ ((v4 & 2) == 0)) & 1) == 0)
    {
      if ((_DWORD)this)
        v6 = 2;
      else
        v6 = 0;
      v4 = v4 & 0xFD | v6;
      v2[48] = v4;
    }
  }
  if ((v4 & 2) != 0)
  {
    v5 = (_DWORD *)*((_QWORD *)v2 + 4);
    if (v5 && v5[1])
    {
      *v5 += 2;
      *a2 = v5;
    }
    else
    {
      return (_BYTE *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 16) + 128))(*((_QWORD *)v2 + 16));
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

WTF::StringImpl *WebCore::HTMLInputElement::minimum(WebCore::HTMLInputElement *this)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v2;
  _QWORD v3[3];
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  BOOL v9;

  result = (WTF::StringImpl *)(*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 30)
                                                                                              + 208))(v3, *((_QWORD *)this + 30), 0);
  v6 = v4;
  v7 = v5;
  if ((HIDWORD(v4) & 0xFFFFFFFD) != 0)
  {
    v9 = 0;
    WebCore::Decimal::toString((WTF::StringImpl *)&v6, &v8);
    WTF::String::toDouble((WTF::String *)&v8, &v9);
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLInputElement::maximum(WebCore::HTMLInputElement *this)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  BOOL v8;

  result = (WTF::StringImpl *)(*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 30)
                                                                                                + 208))(&v3, *((_QWORD *)this + 30), 0);
  v5 = v3;
  v6 = v4;
  if ((HIDWORD(v3) & 0xFFFFFFFD) != 0)
  {
    v8 = 0;
    WebCore::Decimal::toString((WTF::StringImpl *)&v5, &v7);
    WTF::String::toDouble((WTF::String *)&v7, &v8);
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

BOOL WebCore::HTMLInputElement::stepMismatch(WebCore::HTMLInputElement *this)
{
  WebCore::InputType *v1;
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _BOOL8 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;

  v1 = (WebCore::InputType *)*((_QWORD *)this + 30);
  if (*((_DWORD *)v1 + 3) == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue(*((_QWORD *)this + 30), &v15);
    goto LABEL_20;
  }
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    v15 = v3;
    goto LABEL_20;
  }
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 4);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(v4 + 40);
      LODWORD(v7) = *(_DWORD *)(v4 + 52);
      if ((_DWORD)v7)
      {
LABEL_6:
        v7 = v7;
        v8 = (_QWORD *)(v6 + 8);
        while (1)
        {
          v9 = *(v8 - 1);
          if (v9 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_15;
          }
          v8 += 2;
          if (!--v7)
          {
            v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_15;
          }
        }
      }
    }
    else
    {
      v6 = v4 + 32;
      LODWORD(v7) = v5 >> 5;
      if ((_DWORD)v7)
        goto LABEL_6;
    }
  }
  v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_15:
  v10 = *((_QWORD *)this + 30);
  if (!*v8)
  {
LABEL_16:
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v10 + 64))(&v15);
    goto LABEL_20;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InputType *))(*(_QWORD *)v1 + 296))(&v15, v1);
  if (!v15)
  {
    v15 = 0;
    v10 = *((_QWORD *)this + 30);
    goto LABEL_16;
  }
LABEL_20:
  v12 = WebCore::InputType::stepMismatch(v1, (const WTF::String *)&v15);
  v13 = v15;
  v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v12;
}

BOOL `non-virtual thunk to'WebCore::HTMLInputElement::stepMismatch(WebCore::HTMLInputElement *this)
{
  return WebCore::HTMLInputElement::stepMismatch((WebCore::HTMLInputElement *)((char *)this - 112));
}

uint64_t WebCore::HTMLInputElement::listOptionValueAsDouble(WebCore::InputType **this, const WebCore::HTMLOptionElement *a2)
{
  WTF::StringImpl *v3;
  int isValidValue;
  unsigned __int8 *v5;
  unsigned int v6;
  WebCore::InputType *v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  WebCore::HTMLOptionElement::value(a2, a2, &v19);
  isValidValue = WebCore::InputType::isValidValue(this[30], (const WTF::String *)&v19);
  v5 = (unsigned __int8 *)v19;
  if (!isValidValue
    || (!v19 ? (v6 = 0) : (v6 = *((_DWORD *)v19 + 1)),
        (v7 = this[30], (v8 = *((_DWORD *)v7 + 3) & 0x2A8820) != 0)
     && (v9 = *((_DWORD *)this + 44), v9 >= 1)
     && v6
     && v9 > v6))
  {
LABEL_11:
    v12 = 0.0;
    goto LABEL_21;
  }
  if (v19)
  {
    v10 = *((_DWORD *)v19 + 1);
    if (!v8)
      goto LABEL_14;
  }
  else
  {
    v10 = 0;
    if (!v8)
      goto LABEL_14;
  }
  v11 = *((_DWORD *)this + 43);
  if (v11 >= 0x80000)
    v11 = 0x80000;
  if (v11 < v10)
    goto LABEL_11;
LABEL_14:
  if (!v19)
  {
    v13 = 0;
    v18 = 0;
    goto LABEL_28;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InputType *, WTF::StringImpl **))(*(_QWORD *)v7 + 296))(&v18, this[30], &v19);
  v13 = (unint64_t)v18;
  if (!v18)
  {
    v5 = 0;
LABEL_28:
    v14 = 0x100000000;
    goto LABEL_17;
  }
  v5 = (unsigned __int8 *)*((_QWORD *)v18 + 1);
  v13 = *((unsigned int *)v18 + 1);
  v14 = (unint64_t)((*((_DWORD *)v18 + 4) >> 2) & 1) << 32;
LABEL_17:
  v15 = WebCore::parseToDoubleForNumberType(v5, v14 | v13, NAN);
  v16 = v18;
  v18 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v3);
    else
      *(_DWORD *)v16 -= 2;
  }
  v12 = v15;
  v5 = (unsigned __int8 *)v19;
LABEL_21:
  v19 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return *(_QWORD *)&v12;
}

uint64_t WebCore::HTMLInputElement::stepUp(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 216))(*((_QWORD *)this + 30));
}

uint64_t WebCore::HTMLInputElement::stepDown(WebCore::HTMLInputElement *this, int a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 30) + 216))(*((_QWORD *)this + 30), -a2);
}

uint64_t WebCore::HTMLInputElement::blur(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 496))(*((_QWORD *)this + 30));
}

uint64_t WebCore::HTMLInputElement::hasCustomFocusLogic(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 424))(*((_QWORD *)this + 30));
}

uint64_t WebCore::HTMLInputElement::defaultTabIndex(WebCore::HTMLInputElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLInputElement::isKeyboardFocusable(WebCore::HTMLInputElement *this, WebCore::KeyboardEvent *a2)
{
  return (*(uint64_t (**)(_QWORD, WebCore::KeyboardEvent *))(**((_QWORD **)this + 30) + 432))(*((_QWORD *)this + 30), a2);
}

uint64_t WebCore::HTMLInputElement::isMouseFocusable(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 440))(*((_QWORD *)this + 30));
}

BOOL WebCore::HTMLInputElement::isInteractiveContent(WebCore::HTMLInputElement *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 30) + 12) != 128;
}

uint64_t WebCore::HTMLInputElement::updateFocusAppearance(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  WebCore::Document *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t result;
  WebCore::Editor *v12;
  void *v13;
  WebCore::Editor *v14;
  uint64_t v15;
  void *v16;
  __int128 v18;

  v3 = a3;
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 240) + 12) & 0x2A8C20) == 0)
    return WebCore::Element::updateFocusAppearance((WebCore::Node *)a1, a2, a3);
  if ((_DWORD)a2)
    return WebCore::HTMLInputElement::setDefaultSelectionAfterFocus(a1, a2, a3);
  if (*(_BYTE *)(a1 + 188))
  {
    v18 = 0uLL;
    result = WebCore::HTMLTextFormControlElement::setSelectionRange(a1, *(_DWORD *)(a1 + 180), *(_DWORD *)(a1 + 184), *(_BYTE *)(a1 + 169) & 3, a3, (uint64_t *)&v18, 0);
    if ((_DWORD)result)
      return WebCore::HTMLTextFormControlElement::scheduleSelectEvent((WebCore::HTMLTextFormControlElement *)a1);
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
    if (!v5)
      goto LABEL_8;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      goto LABEL_8;
    v7 = *(WebCore::Document **)(v6 + 296);
    v8 = *((_QWORD *)v7 + 382);
    if (!v8)
    {
      v12 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v12, v7);
      v14 = (WebCore::Editor *)*((_QWORD *)v7 + 382);
      *((_QWORD *)v7 + 382) = v12;
      if (v14)
      {
        WebCore::Editor::~Editor(v14, v13);
        if (*(_DWORD *)v15)
        {
          *(_QWORD *)(v15 + 496) = 0;
          *(_OWORD *)(v15 + 464) = 0u;
          *(_OWORD *)(v15 + 480) = 0u;
          *(_OWORD *)(v15 + 432) = 0u;
          *(_OWORD *)(v15 + 448) = 0u;
          *(_OWORD *)(v15 + 400) = 0u;
          *(_OWORD *)(v15 + 416) = 0u;
          *(_OWORD *)(v15 + 368) = 0u;
          *(_OWORD *)(v15 + 384) = 0u;
          *(_OWORD *)(v15 + 336) = 0u;
          *(_OWORD *)(v15 + 352) = 0u;
          *(_OWORD *)(v15 + 304) = 0u;
          *(_OWORD *)(v15 + 320) = 0u;
          *(_OWORD *)(v15 + 272) = 0u;
          *(_OWORD *)(v15 + 288) = 0u;
          *(_OWORD *)(v15 + 240) = 0u;
          *(_OWORD *)(v15 + 256) = 0u;
          *(_OWORD *)(v15 + 208) = 0u;
          *(_OWORD *)(v15 + 224) = 0u;
          *(_OWORD *)(v15 + 176) = 0u;
          *(_OWORD *)(v15 + 192) = 0u;
          *(_OWORD *)(v15 + 144) = 0u;
          *(_OWORD *)(v15 + 160) = 0u;
          *(_OWORD *)(v15 + 112) = 0u;
          *(_OWORD *)(v15 + 128) = 0u;
          *(_OWORD *)(v15 + 80) = 0u;
          *(_OWORD *)(v15 + 96) = 0u;
          *(_OWORD *)(v15 + 48) = 0u;
          *(_OWORD *)(v15 + 64) = 0u;
          *(_OWORD *)(v15 + 16) = 0u;
          *(_OWORD *)(v15 + 32) = 0u;
          *(_OWORD *)v15 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v15, v16);
        }
      }
      v8 = *((_QWORD *)v7 + 382);
      v3 = a3;
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 8) + 680) + 370) == 3)
    {
      v10 = 1;
      v9 = -1;
    }
    else
    {
LABEL_8:
      v9 = 0;
      v10 = 0;
    }
    v18 = xmmword_1969F1100;
    return WebCore::HTMLTextFormControlElement::setSelectionRange(a1, v9, 0xFFFFFFFF, v10, v3, (uint64_t *)&v18, 0);
  }
  return result;
}

BOOL WebCore::HTMLInputElement::isTextField(WebCore::HTMLInputElement *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 30) + 12) & 0x2A8C20) != 0;
}

uint64_t WebCore::HTMLInputElement::setDefaultSelectionAfterFocus(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  __int128 v12;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
  if (v6
    && (v7 = *(_QWORD *)(v6 + 8)) != 0
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(WebCore::Document::editor(*(WebCore::Document **)(v7 + 296)) + 16)
                                        + 8)
                            + 680)
                + 370) == 3)
  {
    v9 = 1;
    v8 = -1;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  if (a2 == 2)
    v10 = v8;
  else
    v10 = -1;
  v12 = xmmword_1969F1100;
  return WebCore::HTMLTextFormControlElement::setSelectionRange(a1, v8, v10, v9, a3, (uint64_t *)&v12, 0);
}

void WebCore::HTMLInputElement::endEditing(WebCore::HTMLInputElement *this)
{
  WebCore::HTMLInputElement *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::Document *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  WebCore::Editor *v13;
  void *v14;
  WebCore::Editor *v15;
  uint64_t v16;
  void *v17;
  unsigned int *v19;
  _QWORD *v20;

  if ((*(_DWORD *)(*((_QWORD *)this + 30) + 12) & 0x2A8C20) != 0)
  {
    v1 = this;
    v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v4 = (unsigned int *)(v3 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        v6 = *(WebCore::Document **)(v3 + 296);
        v7 = *((_QWORD *)v6 + 382);
        if (!v7)
        {
          v19 = v4;
          v13 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          WebCore::Editor::Editor(v13, v6);
          v15 = (WebCore::Editor *)*((_QWORD *)v6 + 382);
          *((_QWORD *)v6 + 382) = v13;
          if (v15)
          {
            WebCore::Editor::~Editor(v15, v14);
            if (*(_DWORD *)v16)
            {
              *(_QWORD *)(v16 + 496) = 0;
              *(_OWORD *)(v16 + 464) = 0u;
              *(_OWORD *)(v16 + 480) = 0u;
              *(_OWORD *)(v16 + 432) = 0u;
              *(_OWORD *)(v16 + 448) = 0u;
              *(_OWORD *)(v16 + 400) = 0u;
              *(_OWORD *)(v16 + 416) = 0u;
              *(_OWORD *)(v16 + 368) = 0u;
              *(_OWORD *)(v16 + 384) = 0u;
              *(_OWORD *)(v16 + 336) = 0u;
              *(_OWORD *)(v16 + 352) = 0u;
              *(_OWORD *)(v16 + 304) = 0u;
              *(_OWORD *)(v16 + 320) = 0u;
              *(_OWORD *)(v16 + 272) = 0u;
              *(_OWORD *)(v16 + 288) = 0u;
              *(_OWORD *)(v16 + 240) = 0u;
              *(_OWORD *)(v16 + 256) = 0u;
              *(_OWORD *)(v16 + 208) = 0u;
              *(_OWORD *)(v16 + 224) = 0u;
              *(_OWORD *)(v16 + 176) = 0u;
              *(_OWORD *)(v16 + 192) = 0u;
              *(_OWORD *)(v16 + 144) = 0u;
              *(_OWORD *)(v16 + 160) = 0u;
              *(_OWORD *)(v16 + 112) = 0u;
              *(_OWORD *)(v16 + 128) = 0u;
              *(_OWORD *)(v16 + 80) = 0u;
              *(_OWORD *)(v16 + 96) = 0u;
              *(_OWORD *)(v16 + 48) = 0u;
              *(_OWORD *)(v16 + 64) = 0u;
              *(_OWORD *)(v16 + 16) = 0u;
              *(_OWORD *)(v16 + 32) = 0u;
              *(_OWORD *)v16 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v16, v17);
            }
          }
          v7 = *((_QWORD *)v6 + 382);
          v1 = this;
          v4 = v19;
        }
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9)
            (*(void (**)(uint64_t, WebCore::HTMLInputElement *))(*(_QWORD *)v9 + 464))(v9, v1);
        }
        do
        {
          v10 = __ldaxr(v4);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v4));
        if (!v11)
        {
          atomic_store(1u, v4);
          v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v12 = off_1E31FE290;
          v12[1] = v4;
          v20 = v12;
          WTF::ensureOnMainThread();
          if (v20)
            (*(void (**)(_QWORD *))(*v20 + 8))(v20);
        }
      }
    }
  }
}

uint64_t WebCore::HTMLInputElement::shouldUseInputMethod(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 448))(*((_QWORD *)this + 30));
}

WTF::MonotonicTime *WebCore::HTMLInputElement::handleFocusEvent(uint64_t a1)
{
  WTF::MonotonicTime *result;
  uint64_t v3;

  result = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 456))(*(_QWORD *)(a1 + 240));
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 240) + 12) & 0x2A8C20) != 0)
  {
    v3 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
    if (v3)
    {
      if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        v3 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 32) + 150) & 0x20) != 0)
        return WebCore::Element::invalidateStyleForSubtreeInternal((WTF::MonotonicTime *)a1);
    }
  }
  return result;
}

WTF::MonotonicTime *WebCore::HTMLInputElement::handleBlurEvent(WebCore::HTMLInputElement *this)
{
  WTF::MonotonicTime *result;
  uint64_t v3;

  result = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 464))(*((_QWORD *)this + 30));
  if ((*(_DWORD *)(*((_QWORD *)this + 30) + 12) & 0x2A8C20) != 0)
  {
    v3 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (v3)
    {
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        v3 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 32) + 150) & 0x20) != 0)
        return WebCore::Element::invalidateStyleForSubtreeInternal(this);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLInputElement::setType(WebCore::HTMLInputElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (v3
    && ((v4 = *(_DWORD *)(v3 + 4), (v4 & 1) != 0)
      ? (v5 = *(uint64_t **)(v3 + 40), v6 = *(_DWORD *)(v3 + 52))
      : (v5 = (uint64_t *)(v3 + 32), v6 = v4 >> 5),
        v6))
  {
    v7 = 0;
    while (1)
    {
      v8 = *v5;
      if (*v5 == WebCore::HTMLNames::typeAttr
        || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
        && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
      {
        break;
      }
      ++v7;
      v5 += 2;
      if (v6 == v7)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v7 = 0xFFFFFFFFLL;
  }
  return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::typeAttr, a2, 0);
}

unsigned __int8 *WebCore::HTMLInputElement::setAutoFilled(unsigned __int8 *this, void *a2)
{
  __int16 v2;
  int v3;
  unsigned __int8 *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  BOOL v15;
  char v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;

  v2 = *((_WORD *)this + 115);
  if (((((v2 & 0x100) == 0) ^ a2) & 1) != 0)
    return this;
  v3 = (int)a2;
  v4 = this;
  if ((this[22] & 8) == 0)
    goto LABEL_21;
  v5 = (uint64_t *)*((_QWORD *)this + 5);
  v6 = v5[1];
  if (!*(_QWORD *)(v6 + 1944) || *(_BYTE *)(v6 + 3405))
    goto LABEL_21;
  if ((this[70] & 4) != 0)
  {
    v10 = *v5;
    v11 = (*(_WORD *)(v10 + 28) & 0x80) == 0 || v10 == 0;
    v12 = v10 + 216;
    if (v11)
      v12 = v6 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v12 + 236))
      goto LABEL_21;
  }
  v7 = *(_QWORD *)(v6 + 1272);
  if (v7 && (*(_BYTE *)(v7 + 70) & 4) != 0)
  {
LABEL_21:
    LOBYTE(v19) = 0;
    v21 = 0;
    v22 = 0;
    v20 = this;
  }
  else
  {
    if (*(_BYTE *)(v6 + 3362)
      || (v8 = *(unsigned __int8 *)(v6 + 3390), !*(_BYTE *)(v6 + 3390))
      && (*(_BYTE *)(v6 + 70) & 8) == 0
      && !*(_QWORD *)(v6 + 1560)
      && (v9 = *(_QWORD *)(v6 + 1328), !*(_BYTE *)(v9 + 233))
      && !*(_BYTE *)(v9 + 234))
    {
      LOBYTE(v19) = 1;
      v21 = 0;
      v22 = 0;
      v20 = this;
      goto LABEL_38;
    }
    v14 = *(unsigned __int8 *)(v6 + 3391);
    if (v8)
      v15 = v14 == 0;
    else
      v15 = 0;
    v16 = !v15;
    LOBYTE(v19) = v16;
    v21 = 0;
    v22 = 0;
    v20 = this;
    if (!v15)
    {
LABEL_38:
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v19, (WTF::StringImpl *)0xE, (int)a2, 0);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v20, &v21);
      v17 = v19;
      if (v3)
        v18 = 256;
      else
        v18 = 0;
      *((_WORD *)v4 + 115) = *((_WORD *)v4 + 115) & 0xFEFF | v18;
      if (v17)
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v20, &v22);
      goto LABEL_26;
    }
  }
  if ((_DWORD)a2)
    v13 = 256;
  else
    v13 = 0;
  *((_WORD *)this + 115) = v2 & 0xFEFF | v13;
LABEL_26:
  if (v22)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v22, a2);
  this = v21;
  if (v21)
    return (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v21, a2);
  return this;
}

unsigned __int8 *WebCore::HTMLInputElement::setAutoFilledAndViewable(unsigned __int8 *this, void *a2)
{
  __int16 v2;
  int v3;
  unsigned __int8 *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  BOOL v15;
  char v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;

  v2 = *((_WORD *)this + 115);
  if (((((v2 & 0x200) == 0) ^ a2) & 1) != 0)
    return this;
  v3 = (int)a2;
  v4 = this;
  if ((this[22] & 8) == 0)
    goto LABEL_21;
  v5 = (uint64_t *)*((_QWORD *)this + 5);
  v6 = v5[1];
  if (!*(_QWORD *)(v6 + 1944) || *(_BYTE *)(v6 + 3405))
    goto LABEL_21;
  if ((this[70] & 4) != 0)
  {
    v10 = *v5;
    v11 = (*(_WORD *)(v10 + 28) & 0x80) == 0 || v10 == 0;
    v12 = v10 + 216;
    if (v11)
      v12 = v6 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v12 + 236))
      goto LABEL_21;
  }
  v7 = *(_QWORD *)(v6 + 1272);
  if (v7 && (*(_BYTE *)(v7 + 70) & 4) != 0)
  {
LABEL_21:
    LOBYTE(v19) = 0;
    v21 = 0;
    v22 = 0;
    v20 = this;
  }
  else
  {
    if (*(_BYTE *)(v6 + 3362)
      || (v8 = *(unsigned __int8 *)(v6 + 3390), !*(_BYTE *)(v6 + 3390))
      && (*(_BYTE *)(v6 + 70) & 8) == 0
      && !*(_QWORD *)(v6 + 1560)
      && (v9 = *(_QWORD *)(v6 + 1328), !*(_BYTE *)(v9 + 233))
      && !*(_BYTE *)(v9 + 234))
    {
      LOBYTE(v19) = 1;
      v21 = 0;
      v22 = 0;
      v20 = this;
      goto LABEL_38;
    }
    v14 = *(unsigned __int8 *)(v6 + 3391);
    if (v8)
      v15 = v14 == 0;
    else
      v15 = 0;
    v16 = !v15;
    LOBYTE(v19) = v16;
    v21 = 0;
    v22 = 0;
    v20 = this;
    if (!v15)
    {
LABEL_38:
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v19, (WTF::StringImpl *)9, (int)a2, 0);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v20, &v21);
      v17 = v19;
      if (v3)
        v18 = 512;
      else
        v18 = 0;
      *((_WORD *)v4 + 115) = *((_WORD *)v4 + 115) & 0xFDFF | v18;
      if (v17)
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v20, &v22);
      goto LABEL_26;
    }
  }
  if ((_DWORD)a2)
    v13 = 512;
  else
    v13 = 0;
  *((_WORD *)this + 115) = v2 & 0xFDFF | v13;
LABEL_26:
  if (v22)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v22, a2);
  this = v21;
  if (v21)
    return (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v21, a2);
  return this;
}

void WebCore::HTMLInputElement::setShowAutoFillButton(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v4;
  WebCore::Node *ElementSibling;
  WebCore::Element *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  WebCore::AXObjectCache *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(unsigned __int16 *)(a1 + 230);
  if (((v2 >> 11) & 7) != a2)
  {
    *(_WORD *)(a1 + 232) = *(_WORD *)(a1 + 232) & 0xFFF8 | (*(_WORD *)(a1 + 230) >> 11) & 7;
    *(_WORD *)(a1 + 230) = v2 & 0xC7FF | ((a2 & 7) << 11);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 792))(*(_QWORD *)(a1 + 240));
    WebCore::HTMLTextFormControlElement::updateInnerTextElementEditability((WebCore::HTMLTextFormControlElement *)a1);
    WebCore::Node::invalidateStyle(a1, 4u, 0);
    if ((*(_BYTE *)(a1 + 71) & 1) != 0)
    {
      v4 = *(_QWORD *)(a1 + 32);
      if (!v4 || (*(_WORD *)(v4 + 28) & 8) == 0 || (*(_BYTE *)(v4 + 70) & 4) == 0)
      {
        ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(a1);
        WebCore::invalidateForSiblingCombinators(ElementSibling, v6);
      }
    }
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      if (*(_BYTE *)(v7 + 3362) || *(_BYTE *)(v7 + 3405))
      {
        while (1)
        {
          v15 = *(_QWORD *)(v7 + 528);
          if (!v15)
            break;
          v16 = *(_QWORD *)(v15 + 8);
          if (!v16)
            break;
          v17 = *(_QWORD *)(v16 + 120);
          if (!v17)
            break;
          v18 = *(_QWORD *)(v17 + 8);
          if (!v18)
            break;
          v7 = *(_QWORD *)(*(_QWORD *)(v18 + 40) + 8);
        }
      }
      else
      {
        v8 = *(_QWORD *)(v7 + 528);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9)
          {
            v10 = *(_QWORD *)(*(_QWORD *)(v9 + 128) + 8);
            if (v10 && *(_BYTE *)(v10 + 144) == 0)
            {
              v12 = *(_QWORD *)(v10 + 296);
              if (v12)
                v7 = v12;
            }
          }
        }
      }
      v13 = *(WebCore::AXObjectCache **)(v7 + 1488);
      if (v13)
      {
        ++*((_DWORD *)v13 + 2);
        WebCore::AXObjectCache::postNotification(v13, (WebCore::Node *)a1, 4, 0);
        v14 = *((_DWORD *)v13 + 2);
        if (!v14)
        {
          __break(0xC471u);
          JUMPOUT(0x195BED874);
        }
        *((_DWORD *)v13 + 2) = v14 - 1;
      }
    }
  }
}

uint64_t WebCore::HTMLInputElement::readOnlyStateChanged(WebCore::HTMLInputElement *this)
{
  uint64_t v3;
  WebCore::Node *ElementSibling;
  WebCore::Element *v5;

  WebCore::ValidatedFormListedElement::updateWillValidateAndValidity((WebCore::HTMLInputElement *)((char *)this + 112));
  WebCore::Node::invalidateStyle((uint64_t)this, 4u, 0);
  if ((*((_BYTE *)this + 71) & 1) != 0)
  {
    v3 = *((_QWORD *)this + 4);
    if (!v3 || (*(_WORD *)(v3 + 28) & 8) == 0 || (*(_BYTE *)(v3 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
      WebCore::invalidateForSiblingCombinators(ElementSibling, v5);
    }
  }
  WebCore::HTMLTextFormControlElement::updateInnerTextElementEditability(this);
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 768))(*((_QWORD *)this + 30));
}

uint64_t WebCore::HTMLInputElement::unregisterForSuspensionCallbackIfNeeded(WebCore::HTMLInputElement *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 30);
  if (!v2)
    return WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1840, this);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 696))(v2);
  if ((result & 1) == 0)
  {
    if ((*((_WORD *)this + 115) & 0xC0) != 0x80)
      return WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1840, this);
    if ((*(_DWORD *)(*((_QWORD *)this + 30) + 12) & 0x2A8820) != 0)
    {
      v4 = *((_QWORD *)this + 13);
      if (v4
        && ((v5 = *(_DWORD *)(v4 + 4), (v5 & 1) != 0)
          ? (v6 = *(_QWORD *)(v4 + 40), LODWORD(v7) = *(_DWORD *)(v4 + 52))
          : (v6 = v4 + 32, LODWORD(v7) = v5 >> 5),
            (_DWORD)v7))
      {
        v7 = v7;
        v8 = (uint64_t *)(v6 + 8);
        while (1)
        {
          v9 = *(v8 - 1);
          if (v9 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            break;
          }
          v8 += 2;
          if (!--v7)
          {
            v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      }
      v10 = *v8;
      if (v10)
      {
        if (*(_DWORD *)(v10 + 4))
          return WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1840, this);
      }
    }
  }
  return result;
}

unsigned int *WebCore::HTMLInputElement::subtreeHasChanged(WebCore::HTMLInputElement *this)
{
  unsigned int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringBuilder *v6;
  __n128 v7;

  result = (unsigned int *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 488))(*((_QWORD *)this + 30));
  if ((*((_WORD *)this + 15) & 4) != 0)
    return WebCore::HTMLElement::updateEffectiveDirectionalityOfDirAuto(this, v7, v3, v4, v5, v6);
  return result;
}

uint64_t WebCore::HTMLInputElement::formControlType(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 16))(*((_QWORD *)this + 30));
}

uint64_t `non-virtual thunk to'WebCore::HTMLInputElement::formControlType(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16));
}

uint64_t WebCore::HTMLInputElement::shouldSaveAndRestoreFormControlState(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 24))(*((_QWORD *)this + 30));
}

uint64_t WebCore::HTMLInputElement::saveFormControlState(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 32))(*((_QWORD *)this + 30));
}

uint64_t `non-virtual thunk to'WebCore::HTMLInputElement::saveFormControlState(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 32))(*((_QWORD *)this + 16));
}

uint64_t WebCore::HTMLInputElement::restoreFormControlState(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 40))(*(_QWORD *)(a1 + 240));
  *(_WORD *)(a1 + 232) |= 0x20u;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLInputElement::restoreFormControlState(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 40))(*(_QWORD *)(a1 + 128));
  *(_WORD *)(a1 + 120) |= 0x20u;
  return result;
}

uint64_t WebCore::HTMLInputElement::canStartSelection(WebCore::HTMLInputElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if ((*(_DWORD *)(*((_QWORD *)this + 30) + 12) & 0x2A8C20) == 0)
    return 0;
  if (!WebCore::Node::hasEditableStyle((uint64_t)this, 0))
  {
    v2 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (!v2)
      goto LABEL_9;
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      v2 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 32) + 148) & 0xC00000) != 0x800000
      || (v3 = *(_QWORD *)(v2 + 104), (*(_BYTE *)(v3 + 239) & 1) == 0) && (*(_DWORD *)(v3 + 228) & 0x18000) != 0)
    {
LABEL_9:
      if ((*((_WORD *)this + 14) & 0x80) != 0)
      {
        v6 = *((_QWORD *)this + 25);
        if (v6)
        {
          v4 = *(_QWORD *)(v6 + 8);
          if (v4)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 248))(v4);
        }
      }
      else
      {
        v4 = *((_QWORD *)this + 4);
        if (v4)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 248))(v4);
      }
      return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t WebCore::HTMLInputElement::accessKeyAction(WebCore::HTMLInputElement *this)
{
  _DWORD *v1;
  uint64_t v2;

  v1 = (_DWORD *)*((_QWORD *)this + 30);
  ++v1[2];
  v2 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 472))(v1);
  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  return v2;
}

BOOL WebCore::HTMLInputElement::isImageButton(WebCore::HTMLInputElement *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 30) + 12) == 256;
}

void WebCore::HTMLInputElement::collectPresentationalHintsForAttribute(WebCore::HTMLInputElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  unsigned int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unint64_t v24;
  double v25;
  int v26;
  WebCore::HTMLInputElement *v27;
  WebCore::MutableStyleProperties *v28;
  int v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  unsigned __int16 *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned __int16 *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned __int16 *v53;
  unint64_t v54;
  double v55;
  char v56;
  char v57;

  v7 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v7 > 0x1FE)
  {
    if (v7 == 511)
    {
      if (*(_DWORD *)(*((_QWORD *)this + 30) + 12) != 256)
        return;
      v30 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v31 = *(unsigned __int16 **)(v30 + 8);
        v32 = *(unsigned int *)(v30 + 4) | ((unint64_t)((*(_DWORD *)(v30 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v31 = 0;
        v32 = 0x100000000;
      }
      WebCore::parseHTMLDimensionInternal((uint64_t)&v55, v31, v32, 0);
      if (v57)
      {
        if (v56)
          v33 = 6;
        else
          v33 = 3;
        WebCore::StyledElement::addPropertyToPresentationalHintStyle(v55, (uint64_t)this, a4, 405, v33);
      }
      v34 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v35 = *(unsigned __int16 **)(v34 + 8);
        v36 = *(unsigned int *)(v34 + 4) | ((unint64_t)((*(_DWORD *)(v34 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v35 = 0;
        v36 = 0x100000000;
      }
      WebCore::parseHTMLDimensionInternal((uint64_t)&v55, v35, v36, 0);
      if (!v57)
        return;
      v25 = v55;
      if (v56)
        v26 = 6;
      else
        v26 = 3;
      v27 = this;
      v28 = a4;
      v29 = 406;
      goto LABEL_61;
    }
    if (v7 != 922)
    {
      if (v7 != 912)
        goto LABEL_84;
      if (*(_DWORD *)(*((_QWORD *)this + 30) + 12) != 256)
        return;
      v18 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v19 = *(unsigned __int16 **)(v18 + 8);
        v20 = *(unsigned int *)(v18 + 4) | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v19 = 0;
        v20 = 0x100000000;
      }
      WebCore::parseHTMLDimensionInternal((uint64_t)&v55, v19, v20, 0);
      if (v57)
      {
        if (v56)
          v21 = 6;
        else
          v21 = 3;
        WebCore::StyledElement::addPropertyToPresentationalHintStyle(v55, (uint64_t)this, a4, 407, v21);
      }
      v22 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v23 = *(unsigned __int16 **)(v22 + 8);
        v24 = *(unsigned int *)(v22 + 4) | ((unint64_t)((*(_DWORD *)(v22 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v23 = 0;
        v24 = 0x100000000;
      }
      WebCore::parseHTMLDimensionInternal((uint64_t)&v55, v23, v24, 0);
      if (!v57)
        return;
      v25 = v55;
      if (v56)
        v26 = 6;
      else
        v26 = 3;
      v27 = this;
      v28 = a4;
      v29 = 402;
LABEL_61:
      WebCore::StyledElement::addPropertyToPresentationalHintStyle(v25, (uint64_t)v27, v28, v29, v26);
      return;
    }
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 30) + 712))(*((_QWORD *)this + 30)))
    {
      v37 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v38 = *(unsigned __int16 **)(v37 + 8);
        v39 = *(unsigned int *)(v37 + 4) | ((unint64_t)((*(_DWORD *)(v37 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v38 = 0;
        v39 = 0x100000000;
      }
      WebCore::parseHTMLDimensionInternal((uint64_t)&v55, v38, v39, 0);
      if (v57)
      {
        if (v56)
          v40 = 6;
        else
          v40 = 3;
        WebCore::StyledElement::addPropertyToPresentationalHintStyle(v55, (uint64_t)this, a4, 450, v40);
      }
    }
    if (*(_DWORD *)(*((_QWORD *)this + 30) + 12) != 256)
      return;
    v41 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v42 = *(_DWORD *)(v41 + 16);
      v43 = *(unsigned __int16 **)(v41 + 8);
      v41 = *(unsigned int *)(v41 + 4);
      v44 = (unint64_t)((v42 >> 2) & 1) << 32;
    }
    else
    {
      v43 = 0;
      v44 = 0x100000000;
    }
    v45 = *((_QWORD *)this + 13);
    if (v45)
    {
      v46 = *(_DWORD *)(v45 + 4);
      if ((v46 & 1) != 0)
      {
        v47 = *(_QWORD *)(v45 + 40);
        LODWORD(v48) = *(_DWORD *)(v45 + 52);
        if ((_DWORD)v48)
        {
LABEL_76:
          v48 = v48;
          v49 = (uint64_t *)(v47 + 8);
          while (1)
          {
            v50 = *(v49 - 1);
            if (v50 == WebCore::HTMLNames::heightAttr
              || *(_QWORD *)(v50 + 24) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 24)
              && *(_QWORD *)(v50 + 32) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 32))
            {
              break;
            }
            v49 += 2;
            if (!--v48)
            {
              v49 = (uint64_t *)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
LABEL_94:
          v52 = *v49;
          if (v52)
          {
LABEL_90:
            v53 = *(unsigned __int16 **)(v52 + 8);
            v54 = *(unsigned int *)(v52 + 4) | ((unint64_t)((*(_DWORD *)(v52 + 16) >> 2) & 1) << 32);
LABEL_91:
            WebCore::HTMLElement::applyAspectRatioFromWidthAndHeightAttributesToStyle((uint64_t)this, v43, v44 | v41, v53, v54, a4);
            return;
          }
LABEL_95:
          v53 = 0;
          v54 = 0x100000000;
          goto LABEL_91;
        }
      }
      else
      {
        v47 = v45 + 32;
        LODWORD(v48) = v46 >> 5;
        if ((_DWORD)v48)
          goto LABEL_76;
      }
    }
    v49 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_94;
  }
  if (v7 == 286)
  {
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 30) + 656))(*((_QWORD *)this + 30)))
      WebCore::HTMLElement::applyAlignmentAttributeToStyle(this, a3, a4);
    return;
  }
  if (v7 == 375)
  {
    if (*(_DWORD *)(*((_QWORD *)this + 30) + 12) == 256)
      WebCore::HTMLElement::applyBorderAttributeToStyle(this, a3, a4);
    return;
  }
  if (v7 != 504)
  {
LABEL_84:
    WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
    return;
  }
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 30) + 712))(*((_QWORD *)this + 30)))
  {
    v8 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v9 = *(unsigned __int16 **)(v8 + 8);
      v10 = *(unsigned int *)(v8 + 4) | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v9 = 0;
      v10 = 0x100000000;
    }
    WebCore::parseHTMLDimensionInternal((uint64_t)&v55, v9, v10, 0);
    if (v57)
    {
      if (v56)
        v11 = 6;
      else
        v11 = 3;
      WebCore::StyledElement::addPropertyToPresentationalHintStyle(v55, (uint64_t)this, a4, 393, v11);
    }
  }
  if (*(_DWORD *)(*((_QWORD *)this + 30) + 12) == 256)
  {
    v12 = *((_QWORD *)this + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) != 0)
      {
        v14 = *(_QWORD *)(v12 + 40);
        LODWORD(v15) = *(_DWORD *)(v12 + 52);
        if ((_DWORD)v15)
        {
LABEL_17:
          v15 = v15;
          v16 = (uint64_t *)(v14 + 8);
          while (1)
          {
            v17 = *(v16 - 1);
            if (v17 == WebCore::HTMLNames::widthAttr
              || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 24)
              && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 32))
            {
              break;
            }
            v16 += 2;
            if (!--v15)
            {
              v16 = (uint64_t *)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
LABEL_87:
          v41 = *v16;
          if (v41)
          {
            v51 = *(_DWORD *)(v41 + 16);
            v43 = *(unsigned __int16 **)(v41 + 8);
            v41 = *(unsigned int *)(v41 + 4);
            v44 = (unint64_t)((v51 >> 2) & 1) << 32;
          }
          else
          {
            v43 = 0;
            v44 = 0x100000000;
          }
          v52 = *(_QWORD *)a3;
          if (*(_QWORD *)a3)
            goto LABEL_90;
          goto LABEL_95;
        }
      }
      else
      {
        v14 = v12 + 32;
        LODWORD(v15) = v13 >> 5;
        if ((_DWORD)v15)
          goto LABEL_17;
      }
    }
    v16 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_87;
  }
}

uint64_t WebCore::HTMLInputElement::initializeInputTypeAfterParsingOrCloning(WebCore::HTMLInputElement *this)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WTF::AtomString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t *v15;
  int v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  _WORD *v24;
  WebCore::Document *v25;
  __int16 v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  _DWORD *v30;
  char v31;
  char v32;
  int v33;
  int v34;
  char v35;
  int v36;
  int v37;
  WebCore::ValidationMessage *v38;
  WebCore::ValidationMessage *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  WTF *v65;
  __int16 v66;
  unint64_t v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  int v87;
  int v88;
  __int16 v89;
  __int16 v90;
  __int16 v91;
  __int16 v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  void *v105;
  WebCore::Element *v106;
  unsigned int v107;
  int v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  const WebCore::HTMLElement **v114;
  WebCore::ContainerNode *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  const WebCore::HTMLElement **v124;
  WebCore::ContainerNode *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  uint64_t v135;
  void *v136;
  WebCore::Element *v137;
  unsigned int v138;
  int v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  void *v147;
  WebCore::Element *v148;
  unsigned int v149;
  int v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  uint64_t v159;
  __int16 v160;
  uint64_t v161;
  __int16 v162;
  int v163;
  BOOL v164;
  char v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  BOOL v172;
  uint64_t v173;
  uint64_t v174;
  __int16 v175;
  uint64_t v176;
  __int16 v177;
  int v178;
  BOOL v179;
  char v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  BOOL v187;
  uint64_t v188;
  uint64_t v189;
  __int16 v190;
  uint64_t v191;
  __int16 v192;
  int v193;
  BOOL v194;
  char v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  WebCore::HTMLFieldSetElement *v201;
  uint64_t v202;
  int v203;
  WTF::StringImpl *v204;
  uint64_t v205;
  WebCore::HTMLFieldSetElement *v206;
  WebCore::HTMLFieldSetElement *v207;
  WebCore::HTMLFormElement *v208;
  WebCore::HTMLFormElement *v209;
  WebCore::HTMLFormElement *v210;
  WebCore::AXObjectCache *v211;
  WebCore::AXObjectCache *v212;
  int v213;
  WebCore::AXObjectCache *v214;
  WebCore::AXObjectCache *v215;
  int v216;
  WebCore::AXObjectCache *v217;
  WebCore::AXObjectCache *v218;
  int v219;
  char v220;
  char v221;
  WTF::StringImpl *v222;
  WTF::StringImpl *v223;
  uint64_t v224;
  unsigned __int8 *v225;
  unsigned __int8 *v226;

  v2 = *((_QWORD *)this + 13);
  v3 = (_QWORD *)MEMORY[0x1E0CBF2F8];
  if (!v2)
  {
    v7 = (WTF::AtomString *)MEMORY[0x1E0CBF2F8];
    goto LABEL_9;
  }
  v4 = *(_DWORD *)(v2 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v2 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_47:
    v7 = (WTF::AtomString *)MEMORY[0x1E0CBF2F8];
    goto LABEL_9;
  }
  v5 = *(_QWORD *)(v2 + 40);
  LODWORD(v6) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v6)
    goto LABEL_47;
LABEL_4:
  v6 = v6;
  v7 = (WTF::AtomString *)(v5 + 8);
  while (1)
  {
    v8 = *((_QWORD *)v7 - 1);
    if (v8 == WebCore::HTMLNames::typeAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
    {
      break;
    }
    v7 = (WTF::AtomString *)((char *)v7 + 16);
    if (!--v6)
    {
      v7 = (WTF::AtomString *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_9:
  if (*(_QWORD *)v7)
  {
    *((_WORD *)this + 115) |= 0x10u;
    v9 = *(_QWORD *)v7;
    if (*(_QWORD *)v7 && *(_DWORD *)(v9 + 4))
    {
      if (v9 != *v3)
      {
        {
          WebCore::createInputTypeFactoryMap((WebCore *)&v223);
          WebCore::findFactory(WTF::AtomString const&)::factoryMap = (uint64_t)v223;
          v202 = v224;
          v223 = 0;
          v224 = 0;
          qword_1EE2F59C0 = v202;
          v203 = (int)v225;
          LODWORD(v225) = 0;
          dword_1EE2F59C8 = v203;
          LOBYTE(v203) = BYTE4(v225);
          BYTE4(v225) = 0;
          byte_1EE2F59CC = v203;
          WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashMap((uint64_t)&v223, v204);
        }
        if (WebCore::findFactory(WTF::AtomString const&)::factoryMap)
        {
          v40 = qword_1EE2F59C0 - 1;
          v41 = *(_DWORD *)(*(_QWORD *)v7 + 16);
          v42 = (dword_1EE2F59C8 ^ (v41 >> 8)) & ((_DWORD)qword_1EE2F59C0 - 1);
          v43 = *(_QWORD *)(WebCore::findFactory(WTF::AtomString const&)::factoryMap + 32 * v42);
          if (v43)
          {
            v44 = v41 >> 8;
            v45 = -1;
            do
            {
              v46 = *(_DWORD *)(v43 + 16);
              if (++v45 > (((_DWORD)v42 + (_DWORD)qword_1EE2F59C0 - ((dword_1EE2F59C8 ^ (v46 >> 8)) & v40)) & v40))
                break;
              if (v43 == *(_QWORD *)v7 && v46 >> 8 == v44)
              {
                v47 = WebCore::findFactory(WTF::AtomString const&)::factoryMap + 32 * v42;
                goto LABEL_71;
              }
              v42 = ((_DWORD)v42 + 1) & v40;
              v43 = *(_QWORD *)(WebCore::findFactory(WTF::AtomString const&)::factoryMap + 32 * v42);
            }
            while (v43);
          }
          v47 = WebCore::findFactory(WTF::AtomString const&)::factoryMap + 32 * qword_1EE2F59C0;
        }
        else
        {
          v47 = 32 * qword_1EE2F59C0;
        }
LABEL_71:
        if (v47 == WebCore::findFactory(WTF::AtomString const&)::factoryMap + 32 * qword_1EE2F59C0)
        {
          WTF::AtomString::convertToASCIILowercase(v7);
          v47 = WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::find(&WebCore::findFactory(WTF::AtomString const&)::factoryMap, (uint64_t)&v223);
          v123 = v223;
          v223 = 0;
          if (v123)
          {
            if (*(_DWORD *)v123 == 2)
              WTF::StringImpl::destroy(v123, v122);
            else
              *(_DWORD *)v123 -= 2;
          }
          if (WebCore::findFactory(WTF::AtomString const&)::factoryMap + 32 * qword_1EE2F59C0 == v47)
            goto LABEL_11;
        }
        if (*(_QWORD *)v47 != *v3)
        {
          v48 = *(_QWORD *)(v47 + 8);
          v49 = *(_QWORD *)(v47 + 16);
          if (!(v49 & 1 | v48))
            goto LABEL_74;
          v80 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + (v49 >> 1));
          if ((v49 & 1) != 0)
            v48 = *(_QWORD *)(*v80 + v48);
          if (((unsigned int (*)(_QWORD *))v48)(v80))
          {
LABEL_74:
            (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::HTMLInputElement *))(v47 + 24))(&v223, this);
            v10 = (uint64_t)v223;
            goto LABEL_15;
          }
          goto LABEL_11;
        }
      }
      v10 = 0;
      goto LABEL_15;
    }
LABEL_11:
    v10 = WTF::fastMalloc((WTF *)0xB0);
    *(_QWORD *)v10 = off_1E33D5AC0;
    *(_QWORD *)(v10 + 8) = 0x20000000000001;
    *(_BYTE *)(v10 + 16) = 0;
    if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v50 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v50 = 1;
      *(_QWORD *)(v50 + 16) = 0;
      *(_QWORD *)(v50 + 24) = 0;
      *(_QWORD *)(v50 + 8) = this;
      *(_BYTE *)(v50 + 32) = 0;
      v52 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v52 & 0xFFFF000000000000 | v50;
      v53 = v52 & 0xFFFFFFFFFFFFLL;
      if ((v52 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v54 = __ldaxr((unsigned int *)v53);
          v55 = v54 - 1;
        }
        while (__stlxr(v55, (unsigned int *)v53));
        if (!v55)
        {
          atomic_store(1u, (unsigned int *)v53);
          v56 = *(unsigned int *)(v53 + 28);
          if ((_DWORD)v56)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v53 + 16), (WTF::StringImpl *)(*(_QWORD *)(v53 + 16) + 32 * v56));
          v57 = *(WTF **)(v53 + 16);
          if (v57)
          {
            *(_QWORD *)(v53 + 16) = 0;
            *(_DWORD *)(v53 + 24) = 0;
            WTF::fastFree(v57, v51);
          }
          WTF::fastFree((WTF *)v53, v51);
        }
      }
    }
    v11 = (unsigned int *)(*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL);
    if (v11)
    {
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    *(_BYTE *)(v10 + 72) = 0;
    *(_OWORD *)(v10 + 80) = 0u;
    *(_OWORD *)(v10 + 96) = 0u;
    *(_OWORD *)(v10 + 112) = 0u;
    *(_OWORD *)(v10 + 128) = 0u;
    *(_OWORD *)(v10 + 144) = 0u;
    *(_OWORD *)(v10 + 160) = 0u;
    *(_QWORD *)v10 = off_1E33DB6B8;
    *(_QWORD *)(v10 + 24) = v11;
    *(_QWORD *)(v10 + 32) = &unk_1E33DBAE0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 48) = &unk_1E33DBB28;
    *(_QWORD *)(v10 + 56) = &unk_1E33DBB50;
    *(_QWORD *)(v10 + 64) = &unk_1E33DBB90;
LABEL_15:
    v223 = 0;
    v13 = (WTF::StringImpl *)*((_QWORD *)this + 30);
    *((_QWORD *)this + 30) = v10;
    if (v13)
    {
      v14 = *((_DWORD *)v13 + 2) - 1;
      if (*((_DWORD *)v13 + 2) == 1)
      {
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 8))(v13);
        v13 = v223;
        v223 = 0;
        if (!v13)
          goto LABEL_18;
        v14 = *((_DWORD *)v13 + 2) - 1;
        if (*((_DWORD *)v13 + 2) == 1)
        {
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 8))(v13);
          goto LABEL_18;
        }
      }
      *((_DWORD *)v13 + 2) = v14;
    }
LABEL_18:
    v15 = (uint64_t *)((char *)this + 112);
    v16 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 336))((char *)this + 112);
    v17 = *((_BYTE *)this + 160);
    if ((v17 & 4) != 0 && ((v16 ^ ((v17 & 2) == 0)) & 1) != 0)
    {
LABEL_20:
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 696))(*((_QWORD *)this + 30));
      if ((result & 1) != 0)
        goto LABEL_191;
      v19 = *((_QWORD *)this + 30);
      if ((*((_WORD *)this + 115) & 0xC0) == 0x80)
      {
        if ((*(_DWORD *)(v19 + 12) & 0x2A8820) == 0)
          goto LABEL_191;
        v95 = *((_QWORD *)this + 13);
        if (v95
          && ((v96 = *(_DWORD *)(v95 + 4), (v96 & 1) != 0)
            ? (v97 = *(_QWORD *)(v95 + 40), LODWORD(v98) = *(_DWORD *)(v95 + 52))
            : (v97 = v95 + 32, LODWORD(v98) = v96 >> 5),
              (_DWORD)v98))
        {
          v98 = v98;
          v99 = (uint64_t *)(v97 + 8);
          while (1)
          {
            v100 = *(v99 - 1);
            if (v100 == WebCore::HTMLNames::valueAttr
              || *(_QWORD *)(v100 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
              && *(_QWORD *)(v100 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
            {
              break;
            }
            v99 += 2;
            if (!--v98)
            {
              v99 = (uint64_t *)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
        }
        else
        {
          v99 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        }
        v101 = *v99;
        if (!v101 || !*(_DWORD *)(v101 + 4))
        {
LABEL_191:
          result = (uint64_t)WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1840, this, (uint64_t)&v223);
          v19 = *((_QWORD *)this + 30);
        }
      }
      v20 = *(_DWORD *)(v19 + 12);
      if (v20 == 2 && (v21 = *(_QWORD *)(v19 + 24)) != 0 && (v22 = *(_QWORD *)(v21 + 8)) != 0)
      {
        v23 = *(_WORD *)(v22 + 232);
        v24 = (_WORD *)((char *)this + 232);
        if (((((*((_WORD *)this + 116) & 0x400) == 0) ^ ((unsigned __int16)(v23 & 0x2000) >> 13)) & 1) != 0)
        {
LABEL_102:
          v67 = *((_QWORD *)this + 8);
          if ((v67 & 0xFFFFFFFFFFFFLL) == 0)
            goto LABEL_157;
          if ((*(_BYTE *)((v67 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
          {
            if ((*((_BYTE *)this + 22) & 8) == 0)
              goto LABEL_157;
            v68 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
            if (!*(_QWORD *)(v68 + 1944) || *(_BYTE *)(v68 + 3405) || *(_BYTE *)(v68 + 3392))
              goto LABEL_157;
            v69 = *((_WORD *)this + 15);
            *((_WORD *)this + 15) = v69 | 0x10;
            v70 = HIWORD(v67) & 7;
            if (v70 >= 4)
            {
              *((_WORD *)this + 15) = v69 | 0x30;
              goto LABEL_157;
            }
            *((_QWORD *)this + 8) = v67 & 0xFFF8FFFFFFFFFFFFLL | 0x4000000000000;
            *((_WORD *)this + 15) = v69 | 0x30;
            if ((_DWORD)v70)
              goto LABEL_157;
            *((_DWORD *)this + 6) += 2;
            v71 = *((unsigned __int16 *)this + 14);
            if ((v71 & 0x80) != 0)
            {
              v79 = *((_QWORD *)this + 25);
              if (!v79)
                goto LABEL_148;
            }
            else if ((~v71 & 0x408) == 0
                   && (result = (*(uint64_t (**)(WebCore::HTMLInputElement *))(*(_QWORD *)this + 368))(this),
                       (_DWORD)result))
            {
              v79 = *v15;
              if (!*v15)
                goto LABEL_148;
            }
            else
            {
              v72 = *((_QWORD *)this + 4);
              if (!v72)
                goto LABEL_148;
              v73 = *(_WORD *)(v72 + 28);
              if ((v73 & 0x80) == 0)
              {
                if ((v73 & 8) == 0)
                  goto LABEL_148;
                if ((*(_QWORD *)(v72 + 72) & 0xFFFFFFFFFFFFLL) == 0)
                  goto LABEL_117;
                v77 = *(_QWORD *)((*(_QWORD *)(v72 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
                if (!v77)
                  goto LABEL_117;
                result = *(_QWORD *)(v77 + 224);
                if (!result)
                  goto LABEL_148;
                result = (*(uint64_t (**)(uint64_t, WebCore::HTMLInputElement *))(*(_QWORD *)result + 16))(result, this);
                v72 = result;
LABEL_137:
                if (!v72)
                {
LABEL_148:
                  if (*((_DWORD *)this + 6) == 2)
                  {
                    v91 = *((_WORD *)this + 15);
                    if ((v91 & 0x400) == 0)
                    {
                      v92 = *((_WORD *)this + 14);
                      if ((v92 & 0xF000) == 0x9000)
                      {
                        result = WebCore::Document::removedLastRef(this);
                      }
                      else
                      {
                        if ((v92 & 0x20) != 0)
                        {
                          (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
                          v91 = *((_WORD *)this + 15);
                        }
                        *((_WORD *)this + 15) = v91 | 0x400;
                        result = (*(uint64_t (**)(WebCore::HTMLInputElement *))(*(_QWORD *)this + 72))(this);
                      }
                    }
                  }
                  else
                  {
                    *((_DWORD *)this + 6) -= 2;
                  }
LABEL_150:
                  v82 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
                  v83 = *(_QWORD *)(v82 + 1272);
                  if (v83)
                  {
                    v84 = *(_QWORD *)(v83 + 64);
                    if ((v84 & 0x8000000000000) != 0
                      || (v84 & 0x7000000000000) != 0
                      || (*(_WORD *)(v83 + 30) & 0x20) != 0)
                    {
                      *(_DWORD *)(v82 + 24) += 2;
                      *(_QWORD *)(v82 + 64) |= 0x8000000000000uLL;
                      if (((*(_QWORD *)(v82 + 1536) & 0xFFFFFFFFFFFFLL) == 0
                         || *(double *)((*(_QWORD *)(v82 + 1536) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
                        && !*(_BYTE *)(v82 + 3362))
                      {
                        *(_QWORD *)(v82 + 1528) = 0;
                        WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
                        result = WebCore::TimerBase::setNextFireTime(v82 + 1504, v85 + 0.0);
                        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                        {
                          v118 = *(_QWORD *)(v82 + 528);
                          if (v118)
                          {
                            v119 = *(_QWORD *)(v118 + 8);
                            if (v119)
                            {
                              v120 = *(_QWORD *)(v119 + 24);
                              if (v120)
                              {
                                v121 = *(_QWORD *)(v120 + 8);
                                if (v121)
                                  goto LABEL_217;
                              }
                            }
                          }
                          v128 = *(_QWORD *)(v82 + 2632);
                          if (v128)
                          {
                            v129 = *(_QWORD *)(v128 + 8);
                            if (v129)
                            {
                              v130 = *(_QWORD *)(v129 + 528);
                              if (v130)
                              {
                                v131 = *(_QWORD *)(v130 + 8);
                                if (v131)
                                {
                                  v132 = *(_QWORD *)(v131 + 24);
                                  if (v132)
                                  {
                                    v121 = *(_QWORD *)(v132 + 8);
                                    if (v121)
                                    {
LABEL_217:
                                      result = *(_QWORD *)(*(_QWORD *)(v121 + 80) + 8);
                                      if (result)
                                        result = (uint64_t)WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl((WTF::StringImpl *)result, (WebCore::Document *)v82);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      if (*(_DWORD *)(v82 + 24) == 2)
                      {
                        v89 = *(_WORD *)(v82 + 30);
                        if ((v89 & 0x400) == 0)
                        {
                          v90 = *(_WORD *)(v82 + 28);
                          if ((v90 & 0xF000) == 0x9000)
                          {
                            result = WebCore::Document::removedLastRef((WebCore::Document *)v82);
                          }
                          else
                          {
                            if ((v90 & 0x20) != 0)
                            {
                              (*(void (**)(_QWORD))(**(_QWORD **)(v82 + 160) + 16))(*(_QWORD *)(v82 + 160));
                              v89 = *(_WORD *)(v82 + 30);
                            }
                            *(_WORD *)(v82 + 30) = v89 | 0x400;
                            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 72))(v82);
                          }
                        }
                      }
                      else
                      {
                        *(_DWORD *)(v82 + 24) -= 2;
                      }
                    }
                  }
LABEL_157:
                  if (*(WebCore::HTMLInputElement **)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1248) == this)
                    result = WebCore::HTMLInputElement::updateFocusAppearance((uint64_t)this, 0, 0);
                  *((_BYTE *)this + 168) &= ~4u;
                  if (*(_DWORD *)(*((_QWORD *)this + 30) + 12) == 4096)
                  {
                    v93 = *((_QWORD *)this + 15);
                    if (v93 && (v205 = *(_QWORD *)(v93 + 8)) != 0)
                    {
                      v94 = (uint64_t *)(v205 + 160);
                    }
                    else
                    {
                      if ((*((_BYTE *)this + 22) & 0x18) == 0)
                        goto LABEL_160;
                      v94 = WebCore::TreeScope::radioButtonGroups(*((WebCore::TreeScope **)this + 5));
                    }
                    result = (uint64_t)WebCore::RadioButtonGroups::addButton(v94, this);
                  }
LABEL_160:
                  if (*((_DWORD *)this + 41))
                    return result;
                  v87 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 272))((char *)this + 112);
                  v88 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 224))((char *)this + 112);
                  if (((v88 ^ ((*((_BYTE *)this + 160) & 1) == 0)) & 1) != 0)
                    goto LABEL_162;
                  v102 = v88;
                  v103 = v87;
                  v104 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 16))((char *)this + 112);
                  v106 = (WebCore::Element *)v104;
                  v107 = *((unsigned __int8 *)this + 160);
                  if ((v107 & 0x40) != 0)
                    v108 = v102;
                  else
                    v108 = 0;
                  if ((*(_BYTE *)(v104 + 22) & 8) == 0)
                    goto LABEL_276;
                  v109 = *(uint64_t **)(v104 + 40);
                  v110 = v109[1];
                  if (!*(_QWORD *)(v110 + 1944) || *(_BYTE *)(v110 + 3405))
                    goto LABEL_276;
                  if ((*(_BYTE *)(v104 + 70) & 4) != 0)
                  {
                    v156 = *v109;
                    v157 = (*(_WORD *)(v156 + 28) & 0x80) == 0 || v156 == 0;
                    v158 = v156 + 216;
                    if (v157)
                      v158 = v110 + 1328;
                    if (!*(_BYTE *)(*(_QWORD *)v158 + 236))
                      goto LABEL_276;
                  }
                  v111 = *(_QWORD *)(v110 + 1272);
                  if (v111)
                  {
                    if ((*(_BYTE *)(v111 + 70) & 4) != 0)
                    {
LABEL_276:
                      LOBYTE(v223) = 0;
                      v225 = 0;
                      v226 = 0;
                      v224 = v104;
                      goto LABEL_277;
                    }
                  }
                  if (!*(_BYTE *)(v110 + 3362)
                    && ((v112 = *(unsigned __int8 *)(v110 + 3390), *(_BYTE *)(v110 + 3390))
                     || (*(_BYTE *)(v110 + 70) & 8) != 0
                     || *(_QWORD *)(v110 + 1560)
                     || (v113 = *(_QWORD *)(v110 + 1328), *(_BYTE *)(v113 + 233))
                     || *(_BYTE *)(v113 + 234)))
                  {
                    v163 = *(unsigned __int8 *)(v110 + 3391);
                    if (v112)
                      v164 = v163 == 0;
                    else
                      v164 = 0;
                    v165 = !v164;
                    LOBYTE(v223) = v165;
                    v225 = 0;
                    v226 = 0;
                    v224 = v104;
                    if (v164)
                    {
LABEL_277:
                      LOBYTE(v107) = v107 & 0xFE | v102;
                      *((_BYTE *)this + 160) = v107;
                      if (!v103)
                      {
LABEL_283:
                        if (WebCore::Document::hasEverCreatedAnAXObjectCache)
                        {
                          v211 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*((_QWORD *)v106 + 5) + 8));
                          if (v211)
                          {
                            v212 = v211;
                            ++*((_DWORD *)v211 + 2);
                            WebCore::AXObjectCache::onValidityChange(v211, v106);
                            v213 = *((_DWORD *)v212 + 2);
                            if (!v213)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x195BEFB70);
                            }
                            *((_DWORD *)v212 + 2) = v213 - 1;
                          }
                        }
                        if ((_BYTE)v223)
                          WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v224, &v226);
                        if (v226)
                          WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v226, v105);
                        if (v225)
                          WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v225, v105);
LABEL_162:
                        result = *((_QWORD *)this + 19);
                        if (result)
                        {
                          result = WebCore::ValidationMessage::isVisible((WebCore::ValidationMessage *)result);
                          if ((_DWORD)result)
                          {
                            result = WebCore::ValidatedFormListedElement::focusableValidationAnchorElement((WebCore::HTMLInputElement *)((char *)this + 112), &v223);
                            if (v223)
                            {
                              v222 = v223;
                              WebCore::ValidatedFormListedElement::updateVisibleValidationMessage((_QWORD *)this + 14, (uint64_t *)&v222);
                              return (uint64_t)WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v222);
                            }
                          }
                        }
                        return result;
                      }
                      v107 = (char)v107;
                      if ((v102 & 1) != 0)
                      {
                        if ((v107 & 0x80000000) == 0)
                        {
                          v167 = *((_QWORD *)v106 + 4);
                          if (v167)
                          {
                            if ((*(_WORD *)(v167 + 28) & 8) != 0)
                            {
                              v168 = WebCore::lineageOfType<WebCore::HTMLFieldSetElement>(v167);
                              if (v168)
                              {
                                v201 = (WebCore::HTMLFieldSetElement *)v168;
                                do
                                {
                                  WebCore::HTMLFieldSetElement::removeInvalidDescendant(v201, v106);
                                  v201 = (WebCore::HTMLFieldSetElement *)WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>((uint64_t)v201);
                                }
                                while (v201);
                              }
                            }
                          }
                        }
                        v169 = *((_QWORD *)this + 15);
                        if (v169)
                        {
                          v170 = *(_QWORD *)(v169 + 8);
                          if (v170)
                            WebCore::HTMLFormElement::removeInvalidFormControlIfNeeded(v170, v106);
                        }
                        goto LABEL_283;
                      }
                      if ((v107 & 0x80000000) != 0
                        || (v159 = *((_QWORD *)v106 + 4)) == 0
                        || (v160 = *(_WORD *)(v159 + 28), (v160 & 8) == 0))
                      {
LABEL_282:
                        v161 = *((_QWORD *)this + 15);
                        if (v161)
                        {
                          v208 = *(WebCore::HTMLFormElement **)(v161 + 8);
                          if (v208)
                            WebCore::HTMLFormElement::addInvalidFormControl(v208, v106);
                        }
                        goto LABEL_283;
                      }
                      if ((v160 & 0x10) == 0
                        || *(_QWORD *)(*(_QWORD *)(v159 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
                      {
                        v159 = *(_QWORD *)(v159 + 32);
                        if (!v159)
                          goto LABEL_282;
                        v162 = *(_WORD *)(v159 + 28);
                        if ((v162 & 8) == 0)
                          goto LABEL_282;
                        while ((v162 & 0x10) == 0
                             || *(_QWORD *)(*(_QWORD *)(v159 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag
                                                                                        + 24))
                        {
                          v159 = *(_QWORD *)(v159 + 32);
                          if (v159)
                          {
                            v162 = *(_WORD *)(v159 + 28);
                            if ((v162 & 8) != 0)
                              continue;
                          }
                          goto LABEL_282;
                        }
                      }
                      do
                      {
                        WebCore::HTMLFieldSetElement::addInvalidDescendant((WebCore::HTMLFieldSetElement *)v159, v106);
                        v159 = WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>(v159);
                      }
                      while (v159);
                      goto LABEL_282;
                    }
                  }
                  else
                  {
                    LOBYTE(v223) = 1;
                    v225 = 0;
                    v226 = 0;
                    v224 = v104;
                  }
                  v166 = (v102 ^ 1) & (v107 >> 6);
                  WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v223, (WTF::StringImpl *)0x4E, v102, 0);
                  WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v223, (WTF::StringImpl *)0x29, v102 ^ 1, 0);
                  WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v223, (WTF::StringImpl *)0x4D, v108, 0);
                  WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v223, (WTF::StringImpl *)0x4C, v166, 0);
                  WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v224, &v225);
                  LOBYTE(v107) = *((_BYTE *)this + 160);
                  goto LABEL_277;
                }
LABEL_117:
                *(_QWORD *)(v72 + 64) |= 0x10000000000000uLL;
                do
                {
                  if ((*(_QWORD *)(v72 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                  {
                    v76 = *(_QWORD *)((*(_QWORD *)(v72 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
                    if (v76)
                      *(_QWORD *)(v76 + 64) |= 0x8000000000000uLL;
                  }
                  v74 = *(_QWORD *)(v72 + 64);
                  if ((v74 & 0x8000000000000) != 0)
                    break;
                  *(_QWORD *)(v72 + 64) = v74 | 0x8000000000000;
                  result = *(_QWORD *)(v72 + 32);
                  if (!result)
                    break;
                  v75 = *(_WORD *)(result + 28);
                  if ((v75 & 0x80) != 0)
                  {
                    v81 = *(_QWORD *)(result + 200);
                    if (!v81)
                      break;
                    result = *(_QWORD *)(v81 + 8);
                  }
                  else
                  {
                    if ((v75 & 8) == 0)
                      break;
                    if ((*(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFLL) != 0)
                    {
                      v78 = *(_QWORD *)((*(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
                      if (v78)
                      {
                        result = *(_QWORD *)(v78 + 224);
                        if (!result)
                          break;
                        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                      }
                    }
                  }
                  v72 = result;
                }
                while (result);
                if (!this)
                  goto LABEL_150;
                goto LABEL_148;
              }
              v79 = *(_QWORD *)(v72 + 200);
              if (!v79)
                goto LABEL_148;
            }
            v72 = *(_QWORD *)(v79 + 8);
            goto LABEL_137;
          }
          __break(0xC471u);
LABEL_469:
          JUMPOUT(0x195BEED30);
        }
        v25 = *(WebCore::Document **)(*((_QWORD *)this + 5) + 8);
        if ((v23 & 0x2000) != 0)
        {
          result = (uint64_t)WebCore::Document::addTouchEventHandler(v25, this);
          v26 = 1024;
LABEL_99:
          v66 = *((_WORD *)this + 116) & 0xFBFF | v26;
          *((_WORD *)this + 116) = v66;
          v20 = *(_DWORD *)(*((_QWORD *)this + 30) + 12);
LABEL_100:
          if (v20 == 2048)
            *v24 = v66 | 0x4000;
          goto LABEL_102;
        }
      }
      else
      {
        v24 = (_WORD *)((char *)this + 232);
        v66 = *((_WORD *)this + 116);
        if ((v66 & 0x400) == 0)
          goto LABEL_100;
        v25 = *(WebCore::Document **)(*((_QWORD *)this + 5) + 8);
      }
      result = WebCore::Document::removeTouchEventHandler((uint64_t)v25, (uint64_t)this, 0);
      v26 = 0;
      goto LABEL_99;
    }
    if (v16)
      v35 = 6;
    else
      v35 = 4;
    *((_BYTE *)this + 160) = v17 & 0xF9 | v35;
    if (*((_DWORD *)this + 41))
    {
LABEL_54:
      if ((*((_BYTE *)this + 160) & 2) == 0 && (v17 & 1) == 0)
      {
        v114 = (const WebCore::HTMLElement **)(*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 16))((char *)this + 112);
        WebCore::removeInvalidElementToAncestorFromInsertionPoint((const WebCore::HTMLElement *)v114, v114[4], v115);
        v116 = *((_QWORD *)this + 15);
        if (v116)
        {
          v117 = *(_QWORD *)(v116 + 8);
          if (v117)
          {
            *(_DWORD *)(v117 + 24) += 2;
            WebCore::HTMLFormElement::removeInvalidFormControlIfNeeded(v117, (const WebCore::HTMLElement *)v114);
            if (*(_DWORD *)(v117 + 24) == 2)
            {
              if ((*(_WORD *)(v117 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v117);
            }
            else
            {
              *(_DWORD *)(v117 + 24) -= 2;
            }
          }
        }
      }
      if ((*((_BYTE *)this + 160) & 2) == 0)
      {
        v39 = (WebCore::ValidationMessage *)*((_QWORD *)this + 19);
        if (v39)
          WebCore::ValidationMessage::requestToHideMessage(v39);
      }
      goto LABEL_20;
    }
    v36 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 272))((char *)this + 112);
    v37 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 224))((char *)this + 112);
    if (((v37 ^ ((*((_BYTE *)this + 160) & 1) == 0)) & 1) != 0)
    {
LABEL_53:
      v38 = (WebCore::ValidationMessage *)*((_QWORD *)this + 19);
      if (v38)
      {
        if (WebCore::ValidationMessage::isVisible(v38))
        {
          WebCore::ValidatedFormListedElement::focusableValidationAnchorElement((WebCore::HTMLInputElement *)((char *)this + 112), &v223);
          if (v223)
          {
            v222 = v223;
            WebCore::ValidatedFormListedElement::updateVisibleValidationMessage((_QWORD *)this + 14, (uint64_t *)&v222);
            WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v222);
          }
        }
      }
      goto LABEL_54;
    }
    v220 = v17;
    v133 = v37;
    v134 = v36;
    v135 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 16))((char *)this + 112);
    v137 = (WebCore::Element *)v135;
    v138 = *((unsigned __int8 *)this + 160);
    if ((v138 & 0x40) != 0)
      v139 = v133;
    else
      v139 = 0;
    if ((*(_BYTE *)(v135 + 22) & 8) == 0)
      goto LABEL_322;
    v140 = *(uint64_t **)(v135 + 40);
    v141 = v140[1];
    if (!*(_QWORD *)(v141 + 1944) || *(_BYTE *)(v141 + 3405))
      goto LABEL_322;
    if ((*(_BYTE *)(v135 + 70) & 4) != 0)
    {
      v171 = *v140;
      v172 = (*(_WORD *)(v171 + 28) & 0x80) == 0 || v171 == 0;
      v173 = v171 + 216;
      if (v172)
        v173 = v141 + 1328;
      if (!*(_BYTE *)(*(_QWORD *)v173 + 236))
        goto LABEL_322;
    }
    v142 = *(_QWORD *)(v141 + 1272);
    if (v142)
    {
      if ((*(_BYTE *)(v142 + 70) & 4) != 0)
      {
LABEL_322:
        LOBYTE(v223) = 0;
        v225 = 0;
        v226 = 0;
        v224 = v135;
        goto LABEL_323;
      }
    }
    if (!*(_BYTE *)(v141 + 3362)
      && ((v143 = *(unsigned __int8 *)(v141 + 3390), *(_BYTE *)(v141 + 3390))
       || (*(_BYTE *)(v141 + 70) & 8) != 0
       || *(_QWORD *)(v141 + 1560)
       || (v144 = *(_QWORD *)(v141 + 1328), *(_BYTE *)(v144 + 233))
       || *(_BYTE *)(v144 + 234)))
    {
      v178 = *(unsigned __int8 *)(v141 + 3391);
      if (v143)
        v179 = v178 == 0;
      else
        v179 = 0;
      v180 = !v179;
      LOBYTE(v223) = v180;
      v225 = 0;
      v226 = 0;
      v224 = v135;
      if (v179)
      {
LABEL_323:
        LOBYTE(v138) = v138 & 0xFE | v133;
        *((_BYTE *)this + 160) = v138;
        if (!v134)
        {
LABEL_329:
          if (WebCore::Document::hasEverCreatedAnAXObjectCache)
          {
            v214 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*((_QWORD *)v137 + 5) + 8));
            if (v214)
            {
              v215 = v214;
              ++*((_DWORD *)v214 + 2);
              WebCore::AXObjectCache::onValidityChange(v214, v137);
              v216 = *((_DWORD *)v215 + 2);
              if (!v216)
              {
                __break(0xC471u);
                JUMPOUT(0x195BEFB90);
              }
              *((_DWORD *)v215 + 2) = v216 - 1;
            }
          }
          if ((_BYTE)v223)
            WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v224, &v226);
          if (v226)
            WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v226, v136);
          if (v225)
            WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v225, v136);
          v17 = v220;
          goto LABEL_53;
        }
        v138 = (char)v138;
        if ((v133 & 1) != 0)
        {
          if ((v138 & 0x80000000) == 0)
          {
            v182 = *((_QWORD *)v137 + 4);
            if (v182)
            {
              if ((*(_WORD *)(v182 + 28) & 8) != 0)
              {
                v183 = WebCore::lineageOfType<WebCore::HTMLFieldSetElement>(v182);
                if (v183)
                {
                  v206 = (WebCore::HTMLFieldSetElement *)v183;
                  do
                  {
                    WebCore::HTMLFieldSetElement::removeInvalidDescendant(v206, v137);
                    v206 = (WebCore::HTMLFieldSetElement *)WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>((uint64_t)v206);
                  }
                  while (v206);
                }
              }
            }
          }
          v184 = *((_QWORD *)this + 15);
          if (v184)
          {
            v185 = *(_QWORD *)(v184 + 8);
            if (v185)
              WebCore::HTMLFormElement::removeInvalidFormControlIfNeeded(v185, v137);
          }
          goto LABEL_329;
        }
        if ((v138 & 0x80000000) != 0
          || (v174 = *((_QWORD *)v137 + 4)) == 0
          || (v175 = *(_WORD *)(v174 + 28), (v175 & 8) == 0))
        {
LABEL_328:
          v176 = *((_QWORD *)this + 15);
          if (v176)
          {
            v209 = *(WebCore::HTMLFormElement **)(v176 + 8);
            if (v209)
              WebCore::HTMLFormElement::addInvalidFormControl(v209, v137);
          }
          goto LABEL_329;
        }
        if ((v175 & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v174 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
        {
          v174 = *(_QWORD *)(v174 + 32);
          if (!v174)
            goto LABEL_328;
          v177 = *(_WORD *)(v174 + 28);
          if ((v177 & 8) == 0)
            goto LABEL_328;
          while ((v177 & 0x10) == 0
               || *(_QWORD *)(*(_QWORD *)(v174 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
          {
            v174 = *(_QWORD *)(v174 + 32);
            if (v174)
            {
              v177 = *(_WORD *)(v174 + 28);
              if ((v177 & 8) != 0)
                continue;
            }
            goto LABEL_328;
          }
        }
        do
        {
          WebCore::HTMLFieldSetElement::addInvalidDescendant((WebCore::HTMLFieldSetElement *)v174, v137);
          v174 = WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>(v174);
        }
        while (v174);
        goto LABEL_328;
      }
    }
    else
    {
      LOBYTE(v223) = 1;
      v225 = 0;
      v226 = 0;
      v224 = v135;
    }
    v181 = (v133 ^ 1) & (v138 >> 6);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v223, (WTF::StringImpl *)0x4E, v133, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v223, (WTF::StringImpl *)0x29, v133 ^ 1, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v223, (WTF::StringImpl *)0x4D, v139, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v223, (WTF::StringImpl *)0x4C, v181, 0);
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v224, &v225);
    LOBYTE(v138) = *((_BYTE *)this + 160);
    goto LABEL_323;
  }
  v27 = WTF::fastMalloc((WTF *)0xB0);
  *(_QWORD *)v27 = off_1E33D5AC0;
  *(_QWORD *)(v27 + 8) = 0x20000000000001;
  *(_BYTE *)(v27 + 16) = 0;
  if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v58 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v58 = 1;
    *(_QWORD *)(v58 + 16) = 0;
    *(_QWORD *)(v58 + 24) = 0;
    *(_QWORD *)(v58 + 8) = this;
    *(_BYTE *)(v58 + 32) = 0;
    v60 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v60 & 0xFFFF000000000000 | v58;
    v61 = v60 & 0xFFFFFFFFFFFFLL;
    if ((v60 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v62 = __ldaxr((unsigned int *)v61);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, (unsigned int *)v61));
      if (!v63)
      {
        atomic_store(1u, (unsigned int *)v61);
        v64 = *(unsigned int *)(v61 + 28);
        if ((_DWORD)v64)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v61 + 16), (WTF::StringImpl *)(*(_QWORD *)(v61 + 16) + 32 * v64));
        v65 = *(WTF **)(v61 + 16);
        if (v65)
        {
          *(_QWORD *)(v61 + 16) = 0;
          *(_DWORD *)(v61 + 24) = 0;
          WTF::fastFree(v65, v59);
        }
        WTF::fastFree((WTF *)v61, v59);
      }
    }
  }
  v28 = (unsigned int *)(*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL);
  if (v28)
  {
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 1, v28));
  }
  *(_BYTE *)(v27 + 72) = 0;
  *(_OWORD *)(v27 + 80) = 0u;
  *(_OWORD *)(v27 + 96) = 0u;
  *(_OWORD *)(v27 + 112) = 0u;
  *(_OWORD *)(v27 + 128) = 0u;
  *(_OWORD *)(v27 + 144) = 0u;
  *(_OWORD *)(v27 + 160) = 0u;
  *(_QWORD *)v27 = off_1E33DB6B8;
  *(_QWORD *)(v27 + 24) = v28;
  *(_QWORD *)(v27 + 32) = &unk_1E33DBAE0;
  *(_QWORD *)(v27 + 40) = 0;
  *(_QWORD *)(v27 + 48) = &unk_1E33DBB28;
  *(_QWORD *)(v27 + 56) = &unk_1E33DBB50;
  *(_QWORD *)(v27 + 64) = &unk_1E33DBB90;
  v30 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = v27;
  if (v30)
  {
    if (v30[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
    else
      --v30[2];
  }
  result = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 336))((char *)this + 112);
  v31 = *((_BYTE *)this + 160);
  if ((v31 & 4) == 0 || ((result ^ ((v31 & 2) == 0)) & 1) == 0)
  {
    if ((_DWORD)result)
      v32 = 6;
    else
      v32 = 4;
    *((_BYTE *)this + 160) = v31 & 0xF9 | v32;
    if (*((_DWORD *)this + 41))
    {
LABEL_42:
      if ((*((_BYTE *)this + 160) & 2) == 0 && (v31 & 1) == 0)
      {
        v124 = (const WebCore::HTMLElement **)(*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 16))((char *)this + 112);
        result = (uint64_t)WebCore::removeInvalidElementToAncestorFromInsertionPoint((const WebCore::HTMLElement *)v124, v124[4], v125);
        v126 = *((_QWORD *)this + 15);
        if (v126)
        {
          v127 = *(_QWORD *)(v126 + 8);
          if (v127)
          {
            *(_DWORD *)(v127 + 24) += 2;
            result = WebCore::HTMLFormElement::removeInvalidFormControlIfNeeded(v127, (const WebCore::HTMLElement *)v124);
            if (*(_DWORD *)(v127 + 24) == 2)
            {
              if ((*(_WORD *)(v127 + 30) & 0x400) == 0)
                result = WebCore::Node::removedLastRef((WebCore::Node *)v127);
            }
            else
            {
              *(_DWORD *)(v127 + 24) -= 2;
            }
          }
        }
      }
      if ((*((_BYTE *)this + 160) & 2) == 0)
      {
        result = *((_QWORD *)this + 19);
        if (result)
          return WebCore::ValidationMessage::requestToHideMessage((WebCore::ValidationMessage *)result);
      }
      return result;
    }
    v33 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 272))((char *)this + 112);
    v34 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 224))((char *)this + 112);
    if (((v34 ^ ((*((_BYTE *)this + 160) & 1) == 0)) & 1) != 0)
    {
LABEL_41:
      result = *((_QWORD *)this + 19);
      if (result)
      {
        result = WebCore::ValidationMessage::isVisible((WebCore::ValidationMessage *)result);
        if ((_DWORD)result)
        {
          result = WebCore::ValidatedFormListedElement::focusableValidationAnchorElement((WebCore::HTMLInputElement *)((char *)this + 112), &v223);
          if (v223)
          {
            v222 = v223;
            WebCore::ValidatedFormListedElement::updateVisibleValidationMessage((_QWORD *)this + 14, (uint64_t *)&v222);
            result = (uint64_t)WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v222);
          }
        }
      }
      goto LABEL_42;
    }
    v221 = v31;
    v145 = v34;
    v146 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 16))((char *)this + 112);
    v148 = (WebCore::Element *)v146;
    v149 = *((unsigned __int8 *)this + 160);
    if ((v149 & 0x40) != 0)
      v150 = v145;
    else
      v150 = 0;
    if ((*(_BYTE *)(v146 + 22) & 8) == 0)
      goto LABEL_368;
    v151 = *(uint64_t **)(v146 + 40);
    v152 = v151[1];
    if (!*(_QWORD *)(v152 + 1944) || *(_BYTE *)(v152 + 3405))
      goto LABEL_368;
    if ((*(_BYTE *)(v146 + 70) & 4) != 0)
    {
      v186 = *v151;
      v187 = (*(_WORD *)(v186 + 28) & 0x80) == 0 || v186 == 0;
      v188 = v186 + 216;
      if (v187)
        v188 = v152 + 1328;
      if (!*(_BYTE *)(*(_QWORD *)v188 + 236))
        goto LABEL_368;
    }
    v153 = *(_QWORD *)(v152 + 1272);
    if (v153)
    {
      if ((*(_BYTE *)(v153 + 70) & 4) != 0)
      {
LABEL_368:
        LOBYTE(v223) = 0;
        v225 = 0;
        v226 = 0;
        v224 = v146;
        goto LABEL_369;
      }
    }
    if (!*(_BYTE *)(v152 + 3362)
      && ((v154 = *(unsigned __int8 *)(v152 + 3390), *(_BYTE *)(v152 + 3390))
       || (*(_BYTE *)(v152 + 70) & 8) != 0
       || *(_QWORD *)(v152 + 1560)
       || (v155 = *(_QWORD *)(v152 + 1328), *(_BYTE *)(v155 + 233))
       || *(_BYTE *)(v155 + 234)))
    {
      v193 = *(unsigned __int8 *)(v152 + 3391);
      if (v154)
        v194 = v193 == 0;
      else
        v194 = 0;
      v195 = !v194;
      LOBYTE(v223) = v195;
      v225 = 0;
      v226 = 0;
      v224 = v146;
      if (v194)
      {
LABEL_369:
        LOBYTE(v149) = v149 & 0xFE | v145;
        *((_BYTE *)this + 160) = v149;
        if (!v33)
        {
LABEL_375:
          if (WebCore::Document::hasEverCreatedAnAXObjectCache)
          {
            v217 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*((_QWORD *)v148 + 5) + 8));
            if (v217)
            {
              v218 = v217;
              ++*((_DWORD *)v217 + 2);
              WebCore::AXObjectCache::onValidityChange(v217, v148);
              v219 = *((_DWORD *)v218 + 2);
              if (!v219)
              {
                __break(0xC471u);
                goto LABEL_469;
              }
              *((_DWORD *)v218 + 2) = v219 - 1;
            }
          }
          if ((_BYTE)v223)
            WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v224, &v226);
          if (v226)
            WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v226, v147);
          if (v225)
            WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v225, v147);
          v31 = v221;
          goto LABEL_41;
        }
        v149 = (char)v149;
        if ((v145 & 1) != 0)
        {
          if ((v149 & 0x80000000) == 0)
          {
            v197 = *((_QWORD *)v148 + 4);
            if (v197)
            {
              if ((*(_WORD *)(v197 + 28) & 8) != 0)
              {
                v198 = WebCore::lineageOfType<WebCore::HTMLFieldSetElement>(v197);
                if (v198)
                {
                  v207 = (WebCore::HTMLFieldSetElement *)v198;
                  do
                  {
                    WebCore::HTMLFieldSetElement::removeInvalidDescendant(v207, v148);
                    v207 = (WebCore::HTMLFieldSetElement *)WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>((uint64_t)v207);
                  }
                  while (v207);
                }
              }
            }
          }
          v199 = *((_QWORD *)this + 15);
          if (v199)
          {
            v200 = *(_QWORD *)(v199 + 8);
            if (v200)
              WebCore::HTMLFormElement::removeInvalidFormControlIfNeeded(v200, v148);
          }
          goto LABEL_375;
        }
        if ((v149 & 0x80000000) != 0
          || (v189 = *((_QWORD *)v148 + 4)) == 0
          || (v190 = *(_WORD *)(v189 + 28), (v190 & 8) == 0))
        {
LABEL_374:
          v191 = *((_QWORD *)this + 15);
          if (v191)
          {
            v210 = *(WebCore::HTMLFormElement **)(v191 + 8);
            if (v210)
              WebCore::HTMLFormElement::addInvalidFormControl(v210, v148);
          }
          goto LABEL_375;
        }
        if ((v190 & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v189 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
        {
          v189 = *(_QWORD *)(v189 + 32);
          if (!v189)
            goto LABEL_374;
          v192 = *(_WORD *)(v189 + 28);
          if ((v192 & 8) == 0)
            goto LABEL_374;
          while ((v192 & 0x10) == 0
               || *(_QWORD *)(*(_QWORD *)(v189 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
          {
            v189 = *(_QWORD *)(v189 + 32);
            if (v189)
            {
              v192 = *(_WORD *)(v189 + 28);
              if ((v192 & 8) != 0)
                continue;
            }
            goto LABEL_374;
          }
        }
        do
        {
          WebCore::HTMLFieldSetElement::addInvalidDescendant((WebCore::HTMLFieldSetElement *)v189, v148);
          v189 = WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>(v189);
        }
        while (v189);
        goto LABEL_374;
      }
    }
    else
    {
      LOBYTE(v223) = 1;
      v225 = 0;
      v226 = 0;
      v224 = v146;
    }
    v196 = (v145 ^ 1) & (v149 >> 6);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v223, (WTF::StringImpl *)0x4E, v145, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v223, (WTF::StringImpl *)0x29, v145 ^ 1, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v223, (WTF::StringImpl *)0x4D, v150, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v223, (WTF::StringImpl *)0x4C, v196, 0);
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v224, &v225);
    LOBYTE(v149) = *((_BYTE *)this + 160);
    goto LABEL_369;
  }
  return result;
}

uint64_t WebCore::HTMLInputElement::maxLengthAttributeChanged(WebCore::HTMLInputElement *this, const WTF::AtomString *a2)
{
  int v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  const WTF::StringImpl *v7;
  unsigned int v8;
  uint64_t v10;

  if (*((_DWORD *)this + 43) >= 0x80000u)
    v3 = 0x80000;
  else
    v3 = *((_DWORD *)this + 43);
  if (a2)
  {
    v4 = (uint64_t *)*((_QWORD *)a2 + 1);
    v5 = *((unsigned int *)a2 + 1) | ((unint64_t)((*((_DWORD *)a2 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v4, v5, &v10);
  if (HIDWORD(v10) == 1)
    goto LABEL_10;
  if (HIDWORD(v10))
    std::__throw_bad_variant_access[abi:sn180100]();
  v8 = v10;
  if ((v10 & 0x80000000) != 0)
LABEL_10:
    v8 = -1;
  *((_DWORD *)this + 43) = v8;
  if (v8 >= 0x80000)
    v8 = 0x80000;
  if (v3 != v8)
    WebCore::HTMLInputElement::updateValueIfNeeded(this, v6, v7);
  return WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this + 112);
}

uint64_t WebCore::HTMLInputElement::minLengthAttributeChanged(WebCore::HTMLInputElement *this, const WTF::AtomString *a2)
{
  uint64_t *v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  const WTF::StringImpl *v7;
  int v8;
  uint64_t v10;

  if (a2)
  {
    v3 = (uint64_t *)*((_QWORD *)a2 + 1);
    v4 = *((unsigned int *)a2 + 1) | ((unint64_t)((*((_DWORD *)a2 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v3 = 0;
    v4 = 0x100000000;
  }
  v5 = *((_DWORD *)this + 44);
  WebCore::parseHTMLInteger(v3, v4, &v10);
  if (HIDWORD(v10) == 1)
    goto LABEL_7;
  if (HIDWORD(v10))
    std::__throw_bad_variant_access[abi:sn180100]();
  v8 = v10;
  if ((v10 & 0x80000000) != 0)
LABEL_7:
    v8 = -1;
  *((_DWORD *)this + 44) = v8;
  if (v5 != v8)
    WebCore::HTMLInputElement::updateValueIfNeeded(this, v6, v7);
  return WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this + 112);
}

void WebCore::RenderObject::setNeedsLayoutAndPrefWidthsRecalc(WebCore::RenderObject *this)
{
  int v2;
  WebCore::RenderObject *v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  WebCore::RenderObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  WebCore::WillChangeData *v18;
  uint64_t v19;
  char v20;
  int v21;
  char v22;
  char v23;
  uint64_t v24;
  int v25;
  WebCore::RenderObject *v26;
  WebCore::RenderObject *v27;
  uint64_t v28;
  _DWORD *v30;
  int v31;
  WebCore::RenderObject *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  _QWORD *v41[3];
  WebCore::RenderObject *v42;
  _BYTE *v43;
  uint64_t v44;

  v2 = *((_DWORD *)this + 5);
  if ((v2 & 8) != 0)
    goto LABEL_4;
  *((_DWORD *)this + 5) = v2 | 8;
  v3 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
  if (v3)
  {
    if (*((_BYTE *)v3 + 46) == 49)
    {
      v30 = (_DWORD *)*((_QWORD *)v3 + 31);
      ++v30[2];
      ++v30[84];
      WebCore::LocalFrameViewLayoutContext::scheduleLayout((WebCore::LocalFrameViewLayoutContext *)(v30 + 84));
      v31 = v30[84];
      if (!v31)
      {
        __break(0xC471u);
        JUMPOUT(0x195BF00A4);
      }
    }
    else
    {
      v26 = *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 3) + 8) + 40) + 8)
                                      + 1944);
      if (v26 != v3)
      {
        v27 = v3;
        while (1)
        {
          v28 = *((_QWORD *)v27 + 4);
          if (!v28)
            goto LABEL_3;
          v27 = *(WebCore::RenderObject **)(v28 + 8);
          if (v27 == v26 || v27 == 0)
          {
            if (!v27)
              goto LABEL_3;
            break;
          }
        }
      }
      v30 = (_DWORD *)*((_QWORD *)v26 + 31);
      ++v30[2];
      ++v30[84];
      WebCore::LocalFrameViewLayoutContext::scheduleSubtreeLayout((WebCore::RenderObject *)(v30 + 84), (WTF::MonotonicTime **)v3);
      v31 = v30[84];
      if (!v31)
      {
        __break(0xC471u);
        JUMPOUT(0x195BF026CLL);
      }
    }
    v30[84] = v31 - 1;
    if (v30[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
    else
      --v30[2];
  }
LABEL_3:
  v2 = *((_DWORD *)this + 5);
  if ((v2 & 0x8000) != 0)
  {
    if ((*((_BYTE *)this + 45) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195BF0200);
    }
    v12 = *((_QWORD *)this + 18);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 8) + 1;
      *(_DWORD *)(v12 + 8) = v13;
    }
    else
    {
      v13 = MEMORY[8];
    }
    *(_QWORD *)(v12 + 24) = *(_QWORD *)(v12 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x195BF022CLL);
    }
    *(_DWORD *)(v12 + 8) = v13 - 1;
    v2 = *((_DWORD *)this + 5);
  }
LABEL_4:
  *((_DWORD *)this + 5) = v2 | 0x2000;
  if ((v2 & 0x2000) != 0)
    return;
  v4 = *((_BYTE *)this + 45);
  if ((v4 & 2) == 0 && (*((_QWORD *)this + 12) & 0x180000) == 0x100000)
    return;
  v5 = *((unsigned __int8 *)this + 46);
  if (v5 == 37)
  {
    v10 = WebCore::RenderObject::containingBlock(this);
    goto LABEL_20;
  }
  v43 = 0;
  v44 = 0;
  if ((v4 & 2) != 0 || v5 == 17)
    goto LABEL_18;
  v41[0] = &v43;
  v41[1] = &v44;
  v41[2] = &v42;
  v42 = this;
  if ((v4 & 1) != 0)
    goto LABEL_163;
  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v6)
    goto LABEL_163;
  if ((*(_WORD *)(v6 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195BF013CLL);
  }
  if ((*(_BYTE *)(v6 + 23) & 0x20) == 0)
  {
LABEL_163:
    v7 = *((_QWORD *)this + 12);
    if ((v7 & 0xF80000000000) != 0x480000000000)
    {
      v8 = (v7 >> 19) & 7;
      if (v8 <= 3 && v8 != 2)
      {
LABEL_18:
        v9 = *((_QWORD *)this + 4);
        if (v9)
        {
          v10 = *(WebCore::RenderObject **)(v9 + 8);
          goto LABEL_20;
        }
        goto LABEL_108;
      }
      v14 = *((_QWORD *)this + 4);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
          ++*(_DWORD *)(v15 + 16);
      }
      else
      {
        v15 = 0;
      }
      if (v8 == 2)
      {
        if (v15)
        {
          while (1)
          {
            v16 = *(unsigned __int8 *)(v15 + 46);
            if (v16 == 49 || (*(_BYTE *)(v15 + 98) & 0x38) != 0)
              break;
            if (((*(_BYTE *)(v15 + 45) & 0x40) != 0 || (v16 - 36) <= 4 && v16 != 38)
              && (*(_BYTE *)(v15 + 22) & 2) != 0)
            {
              break;
            }
            v17 = *(_QWORD *)(*(_QWORD *)(v15 + 88) + 40);
            if (*(_DWORD *)(*(_QWORD *)(v17 + 72) + 20))
            {
              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8))
                break;
            }
            if ((*(_BYTE *)(v15 + 45) & 0x40) != 0)
            {
              v18 = *(WebCore::WillChangeData **)(v17 + 200);
              if (v18)
              {
                if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v18, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 24) + 8) + 40) + 8)+ 1272) == *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8)) & 1) != 0)break;
                v16 = *(unsigned __int8 *)(v15 + 46);
              }
            }
            if (v16 == 67 || v16 == 90)
              break;
            v19 = *(_QWORD *)(*(_QWORD *)(v15 + 88) + 40);
            v20 = *(_BYTE *)(v19 + 462);
            v21 = *(_BYTE *)(v19 + 642) & 3;
            v22 = v20 | 0x19;
            if (v21 == 1)
              v20 |= 0x15u;
            v23 = v21 == 2 ? v22 : v20;
            if ((v23 & 3) != 0
              && ((*(_BYTE *)(v15 + 20) & 1) != 0
               || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v15))
              && (*(_QWORD *)(v15 + 96) & 0x1FLL) != 0x19
              && (*(unsigned __int8 *)(v15 + 46) - 36 > 4 || (*(_BYTE *)(v15 + 52) & 7) == 1))
            {
              break;
            }
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 88) + 40) + 636) & 0xC0000) != 0
              && ((*(_BYTE *)(v15 + 20) & 1) != 0
               || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v15))
              && (*(_QWORD *)(v15 + 96) & 0x1FLL) != 0x19)
            {
              v40 = *(unsigned __int8 *)(v15 + 46);
              if ((v40 - 36) <= 4)
              {
                if (v40 == 36)
                  break;
              }
              else if (v40 != 63 && v40 != 35)
              {
                break;
              }
            }
            if (v43 && v15 == v44)
              *v43 = 1;
            v24 = *(_QWORD *)(v15 + 32);
            if (v24)
            {
              v24 = *(_QWORD *)(v24 + 8);
              if (v24)
                ++*(_DWORD *)(v24 + 16);
            }
            v25 = *(_DWORD *)(v15 + 16);
            if (!v25)
            {
              __break(0xC471u);
              JUMPOUT(0x195BF024CLL);
            }
            v10 = 0;
            *(_DWORD *)(v15 + 16) = v25 - 1;
            v15 = v24;
            if (!v24)
              goto LABEL_20;
          }
LABEL_125:
          v10 = (WebCore::RenderObject *)v15;
LABEL_126:
          v39 = *(_DWORD *)(v15 + 16);
          if (!v39)
          {
            __break(0xC471u);
            JUMPOUT(0x195BF0354);
          }
LABEL_127:
          *(_DWORD *)(v15 + 16) = v39 - 1;
          goto LABEL_20;
        }
      }
      else if (v15)
      {
        while (!WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v15))
        {
          if ((*(_BYTE *)(v15 + 45) & 1) == 0)
          {
            v35 = *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8);
            if (v35)
            {
              if ((*(_WORD *)(v35 + 28) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x195BF039CLL);
              }
              if ((*(_BYTE *)(v35 + 23) & 0x20) != 0)
                goto LABEL_133;
            }
          }
          if ((*(_QWORD *)(v15 + 96) & 0xF80000000000) == 0x480000000000)
          {
LABEL_133:
            WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(v41);
            v10 = *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v42 + 3) + 8) + 40)
                                                        + 8)
                                            + 1944);
            goto LABEL_126;
          }
          if (v43 && v15 == v44)
            *v43 = 1;
          v36 = *(_QWORD *)(v15 + 32);
          if (!v36)
          {
            v39 = *(_DWORD *)(v15 + 16);
            if (!v39)
            {
LABEL_130:
              __break(0xC471u);
              JUMPOUT(0x195BF037CLL);
            }
            v10 = 0;
            goto LABEL_127;
          }
          v37 = *(_QWORD *)(v36 + 8);
          if (v37)
            ++*(_DWORD *)(v37 + 16);
          v38 = *(_DWORD *)(v15 + 16);
          if (!v38)
            goto LABEL_130;
          v10 = 0;
          *(_DWORD *)(v15 + 16) = v38 - 1;
          v15 = v37;
          if (!v37)
            goto LABEL_20;
        }
        goto LABEL_125;
      }
LABEL_108:
      v10 = 0;
      goto LABEL_20;
    }
  }
  WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(v41);
  v10 = *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v42 + 3) + 8) + 40) + 8)
                                  + 1944);
LABEL_20:
  if (v10)
  {
    ++*((_DWORD *)v10 + 4);
    while ((*((_BYTE *)v10 + 21) & 0x20) == 0)
    {
      if (*((_BYTE *)v10 + 46) == 37)
        v32 = WebCore::RenderObject::containingBlock(v10);
      else
        v32 = (WebCore::RenderObject *)WebCore::RenderObject::container(v10);
      if (v32)
      {
        ++*((_DWORD *)v32 + 4);
        *((_DWORD *)v10 + 5) |= 0x2000u;
        if ((*((_QWORD *)v10 + 12) & 0x180000) == 0x100000)
        {
          v34 = *((_DWORD *)v32 + 4);
          if (!v34)
          {
            __break(0xC471u);
            JUMPOUT(0x195BF03BCLL);
          }
          *((_DWORD *)v32 + 4) = v34 - 1;
          break;
        }
      }
      else
      {
        if (*((_BYTE *)v10 + 46) != 49)
          break;
        *((_DWORD *)v10 + 5) |= 0x2000u;
        if ((*((_QWORD *)v10 + 12) & 0x180000) == 0x100000)
          break;
      }
      v33 = *((_DWORD *)v10 + 4);
      if (!v33)
      {
        __break(0xC471u);
        JUMPOUT(0x195BF02C4);
      }
      *((_DWORD *)v10 + 4) = v33 - 1;
      v10 = v32;
      if (!v32)
        return;
    }
    v11 = *((_DWORD *)v10 + 4);
    if (!v11)
    {
      __break(0xC471u);
      JUMPOUT(0x195BF011CLL);
    }
    *((_DWORD *)v10 + 4) = v11 - 1;
  }
}

uint64_t WebCore::HTMLInputElement::dataListMayHaveChanged(WebCore::HTMLInputElement *this)
{
  uint64_t result;

  if (this)
    ++*((_DWORD *)this + 2);
  result = (*(uint64_t (**)(WebCore::HTMLInputElement *))(*(_QWORD *)this + 888))(this);
  if (*((_DWORD *)this + 2) == 1)
    return (*(uint64_t (**)(WebCore::HTMLInputElement *))(*(_QWORD *)this + 8))(this);
  --*((_DWORD *)this + 2);
  return result;
}

uint64_t WebCore::HTMLInputElement::updateTouchEventHandler(uint64_t this)
{
  WebCore::Node *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  _WORD *v6;
  WebCore::Document *v7;
  __int16 v8;

  v1 = (WebCore::Node *)this;
  v2 = *(_QWORD *)(this + 240);
  if (*(_DWORD *)(v2 + 12) != 2 || (v3 = *(_QWORD *)(v2 + 24)) == 0 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    v6 = (_WORD *)(this + 232);
    if ((*(_WORD *)(this + 232) & 0x400) == 0)
      return this;
    v7 = *(WebCore::Document **)(*(_QWORD *)(this + 40) + 8);
    goto LABEL_9;
  }
  v5 = *(_WORD *)(v4 + 232);
  v6 = (_WORD *)(this + 232);
  if (((((*(_WORD *)(this + 232) & 0x400) == 0) ^ ((unsigned __int16)(v5 & 0x2000) >> 13)) & 1) != 0)
    return this;
  v7 = *(WebCore::Document **)(*(_QWORD *)(this + 40) + 8);
  if ((v5 & 0x2000) == 0)
  {
LABEL_9:
    this = WebCore::Document::removeTouchEventHandler((uint64_t)v7, (uint64_t)v1, 0);
    v8 = 0;
    goto LABEL_10;
  }
  this = (uint64_t)WebCore::Document::addTouchEventHandler(v7, v1);
  v8 = 1024;
LABEL_10:
  *v6 = *v6 & 0xFBFF | v8;
  return this;
}

uint64_t WebCore::HTMLInputElement::disabledStateChanged(WebCore::HTMLInputElement *this)
{
  WebCore::HTMLFormControlElement::disabledStateChanged(this);
  WebCore::HTMLTextFormControlElement::updateInnerTextElementEditability(this);
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 760))(*((_QWORD *)this + 30));
}

uint64_t `non-virtual thunk to'WebCore::HTMLInputElement::disabledStateChanged(WebCore::HTMLInputElement *this)
{
  WebCore::HTMLTextFormControlElement *v2;

  v2 = (WebCore::HTMLInputElement *)((char *)this - 112);
  WebCore::HTMLFormControlElement::disabledStateChanged((WebCore::HTMLInputElement *)((char *)this - 112));
  WebCore::HTMLTextFormControlElement::updateInnerTextElementEditability(v2);
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 760))(*((_QWORD *)this + 16));
}

uint64_t `non-virtual thunk to'WebCore::HTMLInputElement::readOnlyStateChanged(WebCore::HTMLInputElement *this)
{
  WebCore::HTMLTextFormControlElement *v2;
  uint64_t v4;
  WebCore::Node *ElementSibling;
  WebCore::Element *v6;

  v2 = (WebCore::HTMLInputElement *)((char *)this - 112);
  WebCore::ValidatedFormListedElement::updateWillValidateAndValidity(this);
  WebCore::Node::invalidateStyle((uint64_t)v2, 4u, 0);
  if ((*((_BYTE *)this - 41) & 1) != 0)
  {
    v4 = *((_QWORD *)this - 10);
    if (!v4 || (*(_WORD *)(v4 + 28) & 8) == 0 || (*(_BYTE *)(v4 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)v2);
      WebCore::invalidateForSiblingCombinators(ElementSibling, v6);
    }
  }
  WebCore::HTMLTextFormControlElement::updateInnerTextElementEditability(v2);
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 768))(*((_QWORD *)this + 16));
}

uint64_t WebCore::HTMLInputElement::supportsReadOnly(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 728))(*((_QWORD *)this + 30));
}

uint64_t WebCore::HTMLInputElement::createElementRenderer(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 624))(*(_QWORD *)(a1 + 240));
}

const WTF::AtomString **WebCore::HTMLInputElement::willAttachRenderers(const WTF::AtomString **this)
{
  const WTF::AtomString *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const WTF::AtomString *v5;
  uint64_t v6;

  if ((*((_WORD *)this + 115) & 0x10) == 0)
  {
    v1 = this[13];
    if (v1
      && ((v2 = *((_DWORD *)v1 + 1), (v2 & 1) != 0)
        ? (v3 = *((_QWORD *)v1 + 5), LODWORD(v4) = *((_DWORD *)v1 + 13))
        : (v3 = (uint64_t)v1 + 32, LODWORD(v4) = v2 >> 5),
          (_DWORD)v4))
    {
      v4 = v4;
      v5 = (const WTF::AtomString *)(v3 + 8);
      while (1)
      {
        v6 = *((_QWORD *)v5 - 1);
        if (v6 == WebCore::HTMLNames::typeAttr
          || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
          && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
        {
          break;
        }
        v5 = (const WTF::AtomString *)((char *)v5 + 16);
        if (!--v4)
        {
          v5 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
          return (const WTF::AtomString **)WebCore::HTMLInputElement::updateType(this, v5);
        }
      }
    }
    else
    {
      v5 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
    }
    return (const WTF::AtomString **)WebCore::HTMLInputElement::updateType(this, v5);
  }
  return this;
}

WebCore::HTMLInputElement **WebCore::HTMLInputElement::didAttachRenderers(WebCore::HTMLInputElement *this)
{
  _BYTE *v2;
  WTF::StringImpl *v3;
  WebCore::HTMLInputElement **result;
  uint64_t v5;
  WebCore::HTMLInputElement **v6;
  WTF *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  WebCore::HTMLInputElement **v16;

  v2 = (_BYTE *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
  if (v2)
  {
    if ((v2[45] & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195BF08B8);
    }
    (*(void (**)(_BYTE *))(*(_QWORD *)v2 + 312))(v2);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 30) + 640))(*((_QWORD *)this + 30));
  result = *(WebCore::HTMLInputElement ***)(*((_QWORD *)this + 5) + 8);
  if (result[156] == this)
  {
    v5 = WebCore::Document::eventLoop((WebCore::Document *)result, v3);
    WTF::WeakPtr<WebCore::MediaQueryList,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::WeakPtr<void>((unsigned int **)&v15, (uint64_t)this);
    v6 = (WebCore::HTMLInputElement **)WTF::fastMalloc((WTF *)0x10);
    *v6 = (WebCore::HTMLInputElement *)&off_1E33C19D0;
    v7 = v15;
    v15 = 0;
    v16 = v6;
    v6[1] = v7;
    WebCore::EventLoopTaskGroup::queueTask(v5, 20, (uint64_t *)&v16);
    result = v16;
    v16 = 0;
    if (result)
      result = (WebCore::HTMLInputElement **)(*((uint64_t (**)(WebCore::HTMLInputElement **))*result + 1))(result);
    v9 = (unsigned int *)v15;
    v15 = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        v12 = v9;
        v13 = v9[7];
        if ((_DWORD)v13)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v12 + 2), (WTF::StringImpl *)(*((_QWORD *)v12 + 2) + 32 * v13));
        v14 = (WTF *)*((_QWORD *)v12 + 2);
        if (v14)
        {
          *((_QWORD *)v12 + 2) = 0;
          v12[6] = 0;
          WTF::fastFree(v14, v8);
        }
        return (WebCore::HTMLInputElement **)WTF::fastFree((WTF *)v12, v8);
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLInputElement::didDetachRenderers(WebCore::HTMLInputElement *this)
{
  *((_BYTE *)this + 168) &= ~2u;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 648))(*((_QWORD *)this + 30));
}

void WebCore::HTMLInputElement::altText(WebCore::HTMLInputElement *this@<X0>, _QWORD *a1@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD **v16;
  uint64_t v17;
  _DWORD *v18;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
  {
    v8 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
    if (!*MEMORY[0x1E0CBF2F8])
    {
LABEL_16:
      WebCore::inputElementAltText((uint64_t)a1);
      return;
    }
LABEL_14:
    *v8 += 2;
    *a1 = v8;
    return;
  }
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if (v3 >> 5)
      goto LABEL_4;
LABEL_12:
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (_DWORD **)(v4 + 8);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 1);
    if (v7 == WebCore::HTMLNames::altAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (v8)
    goto LABEL_14;
  if ((v3 & 1) != 0)
  {
    v9 = *(_QWORD *)(v2 + 40);
    LODWORD(v10) = *(_DWORD *)(v2 + 52);
  }
  else
  {
    v9 = v2 + 32;
    LODWORD(v10) = v3 >> 5;
  }
  if ((_DWORD)v10)
  {
    v10 = v10;
    v11 = (_DWORD **)(v9 + 8);
    while (1)
    {
      v12 = (uint64_t)*(v11 - 1);
      if (v12 == WebCore::HTMLNames::titleAttr
        || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
        && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
      {
        break;
      }
      v11 += 2;
      if (!--v10)
      {
        v11 = (_DWORD **)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v11 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v8 = *v11;
  if (v8)
    goto LABEL_14;
  if ((v3 & 1) != 0)
  {
    v13 = *(_QWORD *)(v2 + 40);
    v14 = *(_DWORD *)(v2 + 52);
  }
  else
  {
    v13 = v2 + 32;
    v14 = v3 >> 5;
  }
  if (v14)
  {
    v15 = v14;
    v16 = (_DWORD **)(v13 + 8);
    while (1)
    {
      v17 = (uint64_t)*(v16 - 1);
      if (v17 == WebCore::HTMLNames::valueAttr
        || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
        && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
      {
        break;
      }
      v16 += 2;
      if (!--v15)
      {
        v16 = (_DWORD **)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v16 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v18 = *v16;
  if (!v18)
    goto LABEL_16;
  *v18 += 2;
  *a1 = v18;
}

uint64_t WebCore::HTMLInputElement::isSuccessfulSubmitButton(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 480))(*((_QWORD *)this + 30));
}

WebCore::HTMLFormElement *WebCore::HTMLInputElement::matchesDefaultPseudoClass(WebCore::HTMLInputElement *this)
{
  uint64_t v2;
  WebCore::HTMLFormElement *result;

  if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 30) + 480))(*((_QWORD *)this + 30)))
  {
    if ((*(_WORD *)(*((_QWORD *)this + 30) + 12) & 0x1002) != 0)
      return (WebCore::HTMLFormElement *)((*((unsigned __int16 *)this + 115) >> 2) & 1);
    return 0;
  }
  if ((*((_BYTE *)this + 160) & 0x18) != 0)
    return 0;
  v2 = *((_QWORD *)this + 15);
  if (!v2)
    return 0;
  result = *(WebCore::HTMLFormElement **)(v2 + 8);
  if (result)
    return (WebCore::HTMLFormElement *)(WebCore::HTMLFormElement::defaultButton(result) == (_QWORD)this);
  return result;
}

uint64_t WebCore::HTMLInputElement::isActivatedSubmit(WebCore::HTMLInputElement *this)
{
  return (*((unsigned __int16 *)this + 115) >> 5) & 1;
}

uint64_t WebCore::HTMLInputElement::setActivatedSubmit(uint64_t this, int a2)
{
  __int16 v2;

  if (a2)
    v2 = 32;
  else
    v2 = 0;
  *(_WORD *)(this + 230) = *(_WORD *)(this + 230) & 0xFFDF | v2;
  return this;
}

uint64_t WebCore::HTMLInputElement::appendFormData(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;

  v4 = *(_DWORD **)(a1 + 240);
  ++v4[2];
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v4 + 48))(v4))
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 240) + 56))(*(_QWORD *)(a1 + 240), a2);
  else
    v5 = 0;
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[2];
  return v5;
}

uint64_t `non-virtual thunk to'WebCore::HTMLInputElement::appendFormData(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;

  v4 = *(_DWORD **)(a1 + 128);
  ++v4[2];
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v4 + 48))(v4))
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 128) + 56))(*(_QWORD *)(a1 + 128), a2);
  else
    v5 = 0;
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[2];
  return v5;
}

unsigned __int8 *WebCore::HTMLInputElement::reset(WebCore::HTMLInputElement *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *result;
  WTF::StringImpl *v11;
  _BYTE v12[8];
  WTF::StringImpl *v13;
  char v14;

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 30) + 680))(*((_QWORD *)this + 30)))
  {
    v11 = 0;
    WebCore::HTMLInputElement::setValue((uint64_t)this, (uint64_t)&v11, 0, 0, (uint64_t)v12);
    if (v14 && v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v2);
      else
        *(_DWORD *)v13 -= 2;
    }
    v3 = v11;
    v11 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this + 112);
  }
  WebCore::ValidatedFormListedElement::setInteractedWithSinceLastFormSubmitEvent((unsigned __int8 *)this + 112, 0);
  WebCore::HTMLInputElement::setAutoFilled((unsigned __int8 *)this, 0);
  WebCore::HTMLInputElement::setAutoFilledAndViewable((unsigned __int8 *)this, 0);
  WebCore::HTMLInputElement::setAutoFilledAndObscured((unsigned __int8 *)this, 0);
  WebCore::HTMLInputElement::setShowAutoFillButton((uint64_t)this, 0);
  v4 = *((_QWORD *)this + 13);
  if (!v4)
    goto LABEL_22;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = *(uint64_t **)(v4 + 40);
    LODWORD(v7) = *(_DWORD *)(v4 + 52);
    if (!(_DWORD)v7)
    {
LABEL_22:
      v9 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    v6 = (uint64_t *)(v4 + 32);
    LODWORD(v7) = v5 >> 5;
    if (!(_DWORD)v7)
      goto LABEL_22;
  }
  v7 = v7;
  while (1)
  {
    v8 = *v6;
    if (*v6 == WebCore::HTMLNames::checkedAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::checkedAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::checkedAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v7)
      goto LABEL_22;
  }
  v9 = 1;
LABEL_23:
  result = WebCore::HTMLInputElement::setChecked((unsigned __int8 *)this, v9);
  *((_WORD *)this + 115) &= ~2u;
  return result;
}

unsigned int *WebCore::HTMLInputElement::setValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int *result;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringBuilder *v24;
  __n128 v25;
  char v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;

  result = *(unsigned int **)(a1 + 240);
  if (result[3] == 64 && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    *(_BYTE *)a5 = 8;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) = 1;
    return result;
  }
  *(_DWORD *)(a1 + 24) += 2;
  {
    v10 = qword_1EE2F5808;
  }
  else
  {
    v10 = 0;
    WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
    unk_1EE2F5800 = 0;
    qword_1EE2F5808 = 0;
  }
  LODWORD(qword_1EE2F5808) = v10 + 1;
  if (*(_QWORD *)a2)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)result + 296))(&v39);
    result = *(unsigned int **)(a1 + 240);
  }
  else
  {
    v39 = 0;
  }
  if (result[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)result, &v38);
  }
  else
  {
    v11 = *(WTF::StringImpl **)(a1 + 216);
    if (v11)
    {
      *(_DWORD *)v11 += 2;
      v38 = v11;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 104);
      if (v12
        && ((v13 = *(_DWORD *)(v12 + 4), (v13 & 1) != 0)
          ? (v14 = *(_QWORD *)(v12 + 40), LODWORD(v15) = *(_DWORD *)(v12 + 52))
          : (v14 = v12 + 32, LODWORD(v15) = v13 >> 5),
            (_DWORD)v15))
      {
        v15 = v15;
        v16 = (_QWORD *)(v14 + 8);
        while (1)
        {
          v17 = *(v16 - 1);
          if (v17 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            break;
          }
          v16 += 2;
          if (!--v15)
          {
            v16 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v16 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      }
      if (!*v16)
        goto LABEL_18;
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)result + 296))(&v38);
      if (!v38)
      {
        v38 = 0;
        result = *(unsigned int **)(a1 + 240);
LABEL_18:
        (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)result + 64))(&v38);
      }
    }
  }
  v19 = WTF::equal(v39, v38, a3);
  v20 = v38;
  v38 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  *(_BYTE *)(a1 + 169) &= ~4u;
  *(_BYTE *)(a1 + 168) &= ~2u;
  (*(void (**)(_QWORD, WTF::StringImpl **, _QWORD, const WTF::StringImpl *, uint64_t))(**(_QWORD **)(a1 + 240)
                                                                                               + 688))(*(_QWORD *)(a1 + 240), &v39, v19 ^ 1u, a3, a4);
  if ((*(_WORD *)(a1 + 30) & 4) != 0)
    WebCore::HTMLElement::updateEffectiveDirectionalityOfDirAuto((WebCore::HTMLElement *)a1, v25, (uint64_t)v21, v22, v23, v24);
  if ((_DWORD)a3)
    v26 = 1;
  else
    v26 = v19;
  if ((v26 & 1) == 0)
  {
    v27 = v39;
    if (v39)
      *(_DWORD *)v39 += 2;
    v28 = *(WTF::StringImpl **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v27;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v21);
      else
        *(_DWORD *)v28 -= 2;
    }
    goto LABEL_33;
  }
  if (!(_DWORD)a3)
  {
LABEL_33:
    if ((*(_WORD *)(a1 + 230) & 0x3800) == 0x1800)
    {
      WebCore::HTMLInputElement::setAutoFilled((unsigned __int8 *)a1, 0);
      WebCore::HTMLInputElement::setAutoFilledAndViewable((unsigned __int8 *)a1, 0);
      WebCore::HTMLInputElement::setShowAutoFillButton(a1, 0);
      v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
      if (v31)
      {
        v32 = *(_QWORD *)(v31 + 8);
        if (v32)
        {
          v33 = *(_QWORD *)(v32 + 24);
          if (v33)
          {
            v34 = *(_QWORD *)(v33 + 8);
            if (v34)
              (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v34 + 48) + 16) + 1512))(*(_QWORD *)(*(_QWORD *)(v34 + 48) + 16), a1);
          }
        }
      }
    }
    if ((*(_WORD *)(a1 + 230) & 0x400) != 0)
      WebCore::HTMLInputElement::setAutoFilledAndObscured((unsigned __int8 *)a1, 0);
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  result = (unsigned int *)v39;
  v39 = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
    else
      *result -= 2;
  }
  {
    LODWORD(qword_1EE2F5808) = qword_1EE2F5808 - 1;
    if (!(_DWORD)qword_1EE2F5808)
    {
      v29 = (WTF *)WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue;
      v30 = dword_1EE2F5804;
      WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
      unk_1EE2F5800 = 0;
      if ((_DWORD)v30)
      {
        v35 = 0;
        v36 = 16 * v30;
        v37 = (_DWORD *)((char *)v29 + 16 * v30);
        do
        {
          result = (unsigned int *)WebCore::ScopedEventQueue::dispatchEvent((uint64_t)result, (WTF *)((char *)v29 + v35));
          v35 += 16;
        }
        while (v36 != v35);
        result = WTF::VectorDestructor<true,WebCore::ScopedEventQueue::ScopedEvent>::destruct(v29, v37);
      }
      if (v29)
        result = (unsigned int *)WTF::fastFree(v29, v21);
    }
  }
  else
  {
    unk_1EE2F5800 = 0;
    qword_1EE2F5808 = 0xFFFFFFFFLL;
    WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
  }
  if (*(_DWORD *)(a1 + 24) == 2)
  {
    if ((*(_WORD *)(a1 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)a1, v21);
  }
  else
  {
    *(_DWORD *)(a1 + 24) -= 2;
  }
  return result;
}

unsigned __int8 *WebCore::HTMLInputElement::setAutoFilledAndObscured(unsigned __int8 *this, void *a2)
{
  __int16 v2;
  int v3;
  unsigned __int8 *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;

  v2 = *((_WORD *)this + 115);
  if (((((v2 & 0x400) == 0) ^ a2) & 1) != 0)
    return this;
  v3 = (int)a2;
  v4 = this;
  if ((this[22] & 8) == 0)
    goto LABEL_21;
  v5 = (uint64_t *)*((_QWORD *)this + 5);
  v6 = v5[1];
  if (!*(_QWORD *)(v6 + 1944) || *(_BYTE *)(v6 + 3405))
    goto LABEL_21;
  if ((this[70] & 4) != 0)
  {
    v10 = *v5;
    v11 = (*(_WORD *)(v10 + 28) & 0x80) == 0 || v10 == 0;
    v12 = v10 + 216;
    if (v11)
      v12 = v6 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v12 + 236))
      goto LABEL_21;
  }
  v7 = *(_QWORD *)(v6 + 1272);
  if (v7 && (*(_BYTE *)(v7 + 70) & 4) != 0)
  {
LABEL_21:
    LOBYTE(v29) = 0;
    v31 = 0;
    v32 = 0;
    v30 = this;
  }
  else
  {
    if (!*(_BYTE *)(v6 + 3362)
      && ((v8 = *(unsigned __int8 *)(v6 + 3390), *(_BYTE *)(v6 + 3390))
       || (*(_BYTE *)(v6 + 70) & 8) != 0
       || *(_QWORD *)(v6 + 1560)
       || (v9 = *(_QWORD *)(v6 + 1328), *(_BYTE *)(v9 + 233))
       || *(_BYTE *)(v9 + 234)))
    {
      v14 = *(unsigned __int8 *)(v6 + 3391);
      if (v8)
        v15 = v14 == 0;
      else
        v15 = 0;
      v16 = !v15;
      LOBYTE(v29) = v16;
      v31 = 0;
      v32 = 0;
      v30 = this;
      if (v15)
        goto LABEL_22;
    }
    else
    {
      LOBYTE(v29) = 1;
      v31 = 0;
      v32 = 0;
      v30 = this;
    }
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v29, (WTF::StringImpl *)7, (int)a2, 0);
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v30, &v31);
    v2 = *((_WORD *)v4 + 115);
  }
LABEL_22:
  if (v3)
    v13 = 1024;
  else
    v13 = 0;
  *((_WORD *)v4 + 115) = v2 & 0xFBFF | v13;
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v17 = *(_QWORD *)(*((_QWORD *)v4 + 5) + 8);
    if (*(_BYTE *)(v17 + 3362) || *(_BYTE *)(v17 + 3405))
    {
      while (1)
      {
        v25 = *(_QWORD *)(v17 + 528);
        if (!v25)
          break;
        v26 = *(_QWORD *)(v25 + 8);
        if (!v26)
          break;
        v27 = *(_QWORD *)(v26 + 120);
        if (!v27)
          break;
        v28 = *(_QWORD *)(v27 + 8);
        if (!v28)
          break;
        v17 = *(_QWORD *)(*(_QWORD *)(v28 + 40) + 8);
      }
    }
    else
    {
      v18 = *(_QWORD *)(v17 + 528);
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 8);
        if (v19)
        {
          v20 = *(_QWORD *)(*(_QWORD *)(v19 + 128) + 8);
          if (v20 && *(_BYTE *)(v20 + 144) == 0)
          {
            v22 = *(_QWORD *)(v20 + 296);
            if (v22)
              v17 = v22;
          }
        }
      }
    }
    v23 = *(_QWORD *)(v17 + 1488);
    if (v23)
    {
      v24 = *(_DWORD *)(v23 + 8);
      *(_DWORD *)(v23 + 8) = v24 + 1;
      if (v24 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x195BF14DCLL);
      }
      *(_DWORD *)(v23 + 8) = v24;
    }
  }
  if ((_BYTE)v29)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v30, &v32);
  if (v32)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v32, a2);
  this = v31;
  if (v31)
    return (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v31, a2);
  return this;
}

unsigned __int8 *`non-virtual thunk to'WebCore::HTMLInputElement::reset(WebCore::HTMLInputElement *this)
{
  return WebCore::HTMLInputElement::reset((WebCore::HTMLInputElement *)((char *)this - 112));
}

_QWORD *WebCore::HTMLInputElement::radioButtonGroups(WebCore::HTMLInputElement *this)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(*((_QWORD *)this + 30) + 12) != 4096)
    return 0;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      return (_QWORD *)(v3 + 160);
  }
  if ((*((_BYTE *)this + 22) & 0x18) == 0)
    return 0;
  return WebCore::TreeScope::radioButtonGroups(*((WebCore::TreeScope **)this + 5));
}

unsigned __int8 *WebCore::HTMLInputElement::setIndeterminate(unsigned __int8 *this, void *a2)
{
  __int16 v2;
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  WebCore::AXObjectCache *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  _BYTE v34[20];
  __int128 v35;
  char v36;

  v2 = *((_WORD *)this + 115);
  if ((_DWORD)a2 == (v2 & 8) >> 3)
    return this;
  v3 = (int)a2;
  v4 = (uint64_t)this;
  if ((this[22] & 8) == 0)
    goto LABEL_21;
  v5 = (uint64_t *)*((_QWORD *)this + 5);
  v6 = v5[1];
  if (!*(_QWORD *)(v6 + 1944) || *(_BYTE *)(v6 + 3405))
    goto LABEL_21;
  if ((this[70] & 4) != 0)
  {
    v10 = *v5;
    v11 = (*(_WORD *)(v10 + 28) & 0x80) == 0 || v10 == 0;
    v12 = v10 + 216;
    if (v11)
      v12 = v6 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v12 + 236))
      goto LABEL_21;
  }
  v7 = *(_QWORD *)(v6 + 1272);
  if (v7 && (*(_BYTE *)(v7 + 70) & 4) != 0)
  {
LABEL_21:
    LOBYTE(v30) = 0;
    v32 = 0;
    v33 = 0;
    v31 = this;
  }
  else
  {
    if (!*(_BYTE *)(v6 + 3362)
      && ((v8 = *(unsigned __int8 *)(v6 + 3390), *(_BYTE *)(v6 + 3390))
       || (*(_BYTE *)(v6 + 70) & 8) != 0
       || *(_QWORD *)(v6 + 1560)
       || (v9 = *(_QWORD *)(v6 + 1328), *(_BYTE *)(v9 + 233))
       || *(_BYTE *)(v9 + 234)))
    {
      v15 = *(unsigned __int8 *)(v6 + 3391);
      if (v8)
        v16 = v15 == 0;
      else
        v16 = 0;
      v17 = !v16;
      LOBYTE(v30) = v17;
      v32 = 0;
      v33 = 0;
      v31 = this;
      if (v16)
        goto LABEL_22;
    }
    else
    {
      LOBYTE(v30) = 1;
      v32 = 0;
      v33 = 0;
      v31 = this;
    }
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v30, (WTF::StringImpl *)0x28, (int)a2, 0);
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v31, &v32);
    v2 = *(_WORD *)(v4 + 230);
  }
LABEL_22:
  if (v3)
    v13 = 8;
  else
    v13 = 0;
  *(_WORD *)(v4 + 230) = v2 & 0xFFF7 | v13;
  v14 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
  if (v14)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195BF1768);
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 32) + 148) & 0x1FC000) != 0
      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40)
                                                                                           + 8)
                                                                               + 1944)
                                                                   + 24)
                                                       + 8)
                                           + 40)
                               + 8)
                   + 3382))
    {
      LOBYTE(v35) = 0;
      v36 = 0;
      v34[0] = 0;
      v34[16] = 0;
      WebCore::RenderObject::issueRepaint(v14, &v35, 0, 0, (uint64_t)v34);
    }
  }
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
    if (*(_BYTE *)(v18 + 3362) || *(_BYTE *)(v18 + 3405))
    {
      while (1)
      {
        v26 = *(_QWORD *)(v18 + 528);
        if (!v26)
          break;
        v27 = *(_QWORD *)(v26 + 8);
        if (!v27)
          break;
        v28 = *(_QWORD *)(v27 + 120);
        if (!v28)
          break;
        v29 = *(_QWORD *)(v28 + 8);
        if (!v29)
          break;
        v18 = *(_QWORD *)(*(_QWORD *)(v29 + 40) + 8);
      }
    }
    else
    {
      v19 = *(_QWORD *)(v18 + 528);
      if (v19)
      {
        v20 = *(_QWORD *)(v19 + 8);
        if (v20)
        {
          v21 = *(_QWORD *)(*(_QWORD *)(v20 + 128) + 8);
          if (v21 && *(_BYTE *)(v21 + 144) == 0)
          {
            v23 = *(_QWORD *)(v21 + 296);
            if (v23)
              v18 = v23;
          }
        }
      }
    }
    v24 = *(WebCore::AXObjectCache **)(v18 + 1488);
    if (v24)
    {
      ++*((_DWORD *)v24 + 2);
      WebCore::AXObjectCache::postNotification(v24, (WebCore::Node *)v4, 57, 0);
      v25 = *((_DWORD *)v24 + 2);
      if (!v25)
      {
        __break(0xC471u);
        JUMPOUT(0x195BF1838);
      }
      *((_DWORD *)v24 + 2) = v25 - 1;
    }
  }
  if ((_BYTE)v30)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v31, &v33);
  if (v33)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v33, a2);
  this = v32;
  if (v32)
    return (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v32, a2);
  return this;
}

_DWORD *WebCore::HTMLInputElement::valueWithDefault@<X0>(WebCore::HTMLInputElement *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *result;
  _DWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  result = (_DWORD *)*((_QWORD *)this + 30);
  if (result[3] != 64)
  {
    v5 = (_DWORD *)*((_QWORD *)this + 27);
    if (v5)
    {
      *v5 += 2;
      *a2 = v5;
      return result;
    }
    v6 = *((_QWORD *)this + 13);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 4);
      if ((v7 & 1) != 0)
      {
        v8 = *(_QWORD *)(v6 + 40);
        LODWORD(v9) = *(_DWORD *)(v6 + 52);
        if ((_DWORD)v9)
        {
LABEL_6:
          v9 = v9;
          v10 = (_QWORD *)(v8 + 8);
          while (1)
          {
            v11 = *(v10 - 1);
            if (v11 == WebCore::HTMLNames::valueAttr
              || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
              && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
            {
              goto LABEL_15;
            }
            v10 += 2;
            if (!--v9)
            {
              v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
              goto LABEL_15;
            }
          }
        }
      }
      else
      {
        v8 = v6 + 32;
        LODWORD(v9) = v7 >> 5;
        if ((_DWORD)v9)
          goto LABEL_6;
      }
    }
    v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_15:
    if (*v10)
    {
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 296))(result);
      if (*a2)
        return result;
      *a2 = 0;
      result = (_DWORD *)*((_QWORD *)this + 30);
    }
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 64))(result);
    goto LABEL_17;
  }
  result = (_DWORD *)WebCore::FileInputType::firstElementPathForInputValue((uint64_t)result, a2);
LABEL_17:
  if (!*a2)
  {
    *a2 = 0;
    return (_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 72))(*((_QWORD *)this + 30));
  }
  return result;
}

BOOL WebCore::HTMLInputElement::isFileUpload(WebCore::HTMLInputElement *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 30) + 12) == 64;
}

uint64_t WebCore::HTMLInputElement::valueAsDate(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 80))(*((_QWORD *)this + 30));
}

uint64_t WebCore::HTMLInputElement::setValueAsDate(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 88))(*(_QWORD *)(a1 + 240));
}

uint64_t WebCore::HTMLInputElement::accessibilityValueAsDate(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 96))(*((_QWORD *)this + 30));
}

uint64_t WebCore::HTMLInputElement::valueAsNumber(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 104))(*((_QWORD *)this + 30));
}

uint64_t WebCore::HTMLInputElement::setValueAsNumber@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 240) + 112))(*(_QWORD *)(result + 240));
  *(_BYTE *)a2 = 6;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

unsigned __int8 *WebCore::HTMLInputElement::setValueFromRenderer(WebCore::HTMLInputElement *this, const WTF::String *a2)
{
  int v4;
  WTF::StringImpl *v5;
  const WTF::String *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  unsigned __int8 *result;
  __int16 v10;

  v4 = MEMORY[0x19AEA53F4](*(_QWORD *)a2, "\n", 1);
  v6 = (const WTF::String *)MEMORY[0x1E0CBF738];
  if (!v4)
    v6 = a2;
  v7 = *(_DWORD **)v6;
  if (v7)
    *v7 += 2;
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  *((_BYTE *)this + 168) |= 2u;
  *((_WORD *)this + 116) |= 0x100u;
  if ((*(_DWORD *)(*((_QWORD *)this + 30) + 12) & 0x2A8C20) == 0)
    WebCore::Node::dispatchInputEvent(this);
  WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this + 112);
  result = WebCore::HTMLInputElement::setAutoFilled((unsigned __int8 *)this, 0);
  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v10 = *((_WORD *)this + 115);
    if ((v10 & 0x200) != 0)
    {
      result = WebCore::HTMLInputElement::setAutoFilledAndViewable((unsigned __int8 *)this, 0);
      v10 = *((_WORD *)this + 115);
    }
    if ((v10 & 0x400) != 0)
      return WebCore::HTMLInputElement::setAutoFilledAndObscured((unsigned __int8 *)this, 0);
  }
  return result;
}

WebCore::EventNames **WebCore::HTMLInputElement::willDispatchEvent(WebCore::EventNames **result, uint64_t a2, _BYTE *a3)
{
  WebCore::EventNames **v5;
  uint64_t v6;
  WebCore::EventNames **v7;
  WebCore::EventNames *v8;
  unsigned int v9;
  WebCore::EventNames *v10;

  v5 = result;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(WebCore::EventNames ***)(v6 + 96)) == 0)
  {
    result = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)result);
    v7 = result;
  }
  v8 = v7[5];
  if (!v8)
  {
    result = WebCore::ThreadGlobalData::initializeEventNames(v7);
    v8 = v7[5];
  }
  if (*(_QWORD *)(a2 + 24) == *((_QWORD *)v8 + 254))
  {
    v10 = v8;
    result = (WebCore::EventNames **)(*(uint64_t (**)(WebCore::EventNames *, uint64_t))(*(_QWORD *)v5[30]
                                                                                               + 416))(v5[30], a2);
    v8 = v10;
    if ((_DWORD)result)
      *(_DWORD *)(a2 + 20) |= 0x10u;
  }
  if (*(_QWORD *)(a2 + 24) == *((_QWORD *)v8 + 50))
  {
    result = (WebCore::EventNames **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
    if ((_DWORD)result)
    {
      v9 = *(unsigned __int16 *)(a2 + 154);
      if ((v9 < 3 || v9 - 65534 <= 1) && !*(_WORD *)(a2 + 154))
      {
        result = (WebCore::EventNames **)(*(uint64_t (**)(WebCore::EventNames *, _BYTE *))(*(_QWORD *)v5[30] + 328))(v5[30], a3);
        *a3 = 1;
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLInputElement::didBlur(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 504))(*((_QWORD *)this + 30));
}

void WebCore::HTMLInputElement::defaultEventHandler(WebCore::HTMLInputElement *this, WebCore::Event *a2)
{
  WebCore::EventNames **v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  BOOL v7;
  WebCore::EventNames **v9;
  uint64_t v10;
  WebCore::EventNames **v11;
  WebCore::EventNames *v12;
  unint64_t v13;
  uint64_t v14;
  WebCore::EventNames **v15;
  WebCore::EventNames *v16;
  uint64_t v17;
  WebCore::EventNames **v18;
  WebCore::EventNames *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  WebCore::EventNames **v26;
  uint64_t v27;
  WebCore::EventNames **v28;
  WebCore::EventNames *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(void);
  WTF::StringImpl *v34;
  unint64_t StatusReg;
  uint64_t v36;
  WebCore::EventNames *v37;
  uint64_t v38;
  WebCore::EventNames *v39;
  uint64_t v40;
  WebCore::EventNames *v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  void *v47;
  WebCore::EventNames **v48;
  WebCore::EventNames **v49;
  WebCore::EventNames **v50;
  int v51;
  void *v52;
  WebCore::Node *v53;
  WebCore::Node *v54;

  v4 = (WebCore::EventNames **)(*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 88))(a2);
  if (!(_DWORD)v4)
    goto LABEL_9;
  v6 = *((unsigned __int16 *)a2 + 77);
  v7 = v6 >= 3 && v6 - 65534 > 1;
  if (v7 || *((_WORD *)a2 + 77) != 0)
    goto LABEL_9;
  v34 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  if (v34)
    *(_DWORD *)v34 += 2;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v36 = *(_QWORD *)(StatusReg + 736);
  if (!v36 || (v4 = *(WebCore::EventNames ***)(v36 + 96)) == 0)
    v4 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)v4);
  v37 = v4[5];
  if (!v37)
  {
    v48 = v4;
    v4 = WebCore::ThreadGlobalData::initializeEventNames(v4);
    v37 = v48[5];
  }
  if (v34 == *((WTF::StringImpl **)v37 + 50))
  {
    v42 = 38;
    goto LABEL_99;
  }
  v38 = *(_QWORD *)(StatusReg + 736);
  if (!v38 || (v4 = *(WebCore::EventNames ***)(v38 + 96)) == 0)
    v4 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)v4);
  v39 = v4[5];
  if (!v39)
  {
    v49 = v4;
    v4 = WebCore::ThreadGlobalData::initializeEventNames(v4);
    v39 = v49[5];
  }
  if (v34 == *((WTF::StringImpl **)v39 + 151))
  {
    v42 = 39;
    goto LABEL_99;
  }
  v40 = *(_QWORD *)(StatusReg + 736);
  if (!v40 || (v4 = *(WebCore::EventNames ***)(v40 + 96)) == 0)
    v4 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)v4);
  v41 = v4[5];
  if (!v41)
  {
    v50 = v4;
    WebCore::ThreadGlobalData::initializeEventNames(v4);
    v41 = v50[5];
  }
  if (v34 == *((WTF::StringImpl **)v41 + 154))
  {
    v42 = 40;
LABEL_99:
    (*(void (**)(void))(**((_QWORD **)this + 30) + 8 * v42))();
  }
  v45 = *((_DWORD *)a2 + 5);
  if (!v34)
    goto LABEL_103;
  if (*(_DWORD *)v34 != 2)
  {
    *(_DWORD *)v34 -= 2;
LABEL_103:
    if ((v45 & 0x80) != 0)
      return;
    goto LABEL_9;
  }
  WTF::StringImpl::destroy(v34, v5);
  if ((v45 & 0x80) != 0)
    return;
LABEL_9:
  if (!(*(unsigned int (**)(WebCore::Event *))(*(_QWORD *)a2 + 120))(a2)
    || ((*(void (**)(_QWORD, WebCore::Event *))(**((_QWORD **)this + 30) + 408))(*((_QWORD *)this + 30), a2), (*((_BYTE *)a2 + 20) & 0x80) == 0))
  {
    v9 = (WebCore::EventNames **)(*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 80))(a2);
    if (!(_DWORD)v9)
      goto LABEL_32;
    v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v10 || (v11 = *(WebCore::EventNames ***)(v10 + 96)) == 0)
    {
      v9 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)v9);
      v11 = v9;
    }
    v12 = v11[5];
    if (!v12)
    {
      v9 = WebCore::ThreadGlobalData::initializeEventNames(v11);
      v12 = v11[5];
    }
    if (*((_QWORD *)a2 + 3) != *((_QWORD *)v12 + 131)
      || (v9 = (WebCore::EventNames **)(*(uint64_t (**)(_QWORD, WebCore::Event *))(**((_QWORD **)this + 30)
                                                                                           + 368))(*((_QWORD *)this + 30), a2), (*((_BYTE *)a2 + 20) & 0x80) == 0)&& (_DWORD)v9)
    {
      if ((*(_DWORD *)(*((_QWORD *)this + 30) + 12) & 0x2A8C20) == 0)
        goto LABEL_33;
LABEL_32:
      v13 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v14 = *(_QWORD *)(v13 + 736);
      if (!v14 || (v15 = *(WebCore::EventNames ***)(v14 + 96)) == 0)
      {
        v9 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)v9);
        v15 = v9;
      }
      v16 = v15[5];
      if (!v16)
      {
        v9 = WebCore::ThreadGlobalData::initializeEventNames(v15);
        v16 = v15[5];
      }
      if (*((_QWORD *)a2 + 3) == *((_QWORD *)v16 + 131))
        goto LABEL_34;
      v17 = *(_QWORD *)(v13 + 736);
      if (!v17 || (v18 = *(WebCore::EventNames ***)(v17 + 96)) == 0)
      {
        v9 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)v9);
        v18 = v9;
      }
      v19 = v18[5];
      if (!v19)
      {
        v9 = WebCore::ThreadGlobalData::initializeEventNames(v18);
        v19 = v18[5];
      }
      if (*((_QWORD *)a2 + 3) == *((_QWORD *)v19 + 132))
      {
LABEL_34:
        WebCore::Node::defaultEventHandler(this, (WebCore::Node **)a2);
        if ((*((_BYTE *)a2 + 20) & 0x80) != 0)
          return;
        v20 = 1;
      }
      else
      {
LABEL_33:
        v20 = 0;
      }
      v21 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v22 = *(_QWORD *)(v21 + 736);
      if (!v22 || (v23 = *(_QWORD *)(v22 + 96)) == 0)
        v23 = WebCore::threadGlobalDataSlow((WebCore *)v9);
      v24 = *(_QWORD **)(v23 + 40);
      if (!v24)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v23);
        v24 = *(_QWORD **)(v23 + 40);
      }
      if (*((_QWORD *)a2 + 3) != *v24)
        goto LABEL_47;
      (*(void (**)(_QWORD, WebCore::Event *))(**((_QWORD **)this + 30) + 344))(*((_QWORD *)this + 30), a2);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 680) & 0x80000000) == 0)
        goto LABEL_45;
      v25 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
      if (v25 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        v51 = *(_DWORD *)(*((_QWORD *)this + 30) + 12);
        if (v51 != 256 && (v51 & 0x14001) == 0)
          goto LABEL_45;
      }
      else if (v25 != *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24))
      {
        goto LABEL_45;
      }
      WebCore::Element::getElementAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::invoketargetAttr, (uint64_t *)&v54);
      v53 = v54;
      v54 = 0;
      if (v53)
      {
        if (*((_DWORD *)v53 + 6) == 2)
        {
          if ((*((_WORD *)v53 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v53, v52);
        }
        else
        {
          *((_DWORD *)v53 + 6) -= 2;
        }
        WebCore::HTMLFormControlElement::handleInvokeAction((unsigned int *)this);
LABEL_46:
        if ((*((_BYTE *)a2 + 20) & 0x80) != 0)
          return;
LABEL_47:
        v26 = (WebCore::EventNames **)(*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 80))(a2);
        if ((_DWORD)v26)
        {
          v27 = *(_QWORD *)(v21 + 736);
          if (!v27 || (v28 = *(WebCore::EventNames ***)(v27 + 96)) == 0)
          {
            v26 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)v26);
            v28 = v26;
          }
          v29 = v28[5];
          if (!v29)
          {
            v26 = WebCore::ThreadGlobalData::initializeEventNames(v28);
            v29 = v28[5];
          }
          if (*((_QWORD *)a2 + 3) == *((_QWORD *)v29 + 132))
          {
            v33 = *(void (**)(void))(**((_QWORD **)this + 30) + 376);
LABEL_83:
            v33();
            if ((*((_BYTE *)a2 + 20) & 0x80) != 0)
              return;
            goto LABEL_84;
          }
          v30 = *(_QWORD *)(v21 + 736);
          if (!v30 || (v31 = *(_QWORD *)(v30 + 96)) == 0)
            v31 = WebCore::threadGlobalDataSlow((WebCore *)v26);
          v32 = *(_QWORD *)(v31 + 40);
          if (!v32)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v31);
            v32 = *(_QWORD *)(v31 + 40);
          }
          if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v32 + 1072))
          {
            v33 = *(void (**)(void))(**((_QWORD **)this + 30) + 384);
            goto LABEL_83;
          }
        }
LABEL_84:
        if ((*(unsigned int (**)(_QWORD, WebCore::Event *))(**((_QWORD **)this + 30) + 416))(*((_QWORD *)this + 30), a2))
        {
          v43 = (_DWORD *)*((_QWORD *)this + 30);
          if (v43[3] == 0x8000)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 632))(v43);
            if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 696) & 1) != 0)
              WebCore::HTMLInputElement::onSearch((WebCore::EventNames **)this);
          }
          if ((*((_BYTE *)this + 168) & 4) != 0)
            WebCore::HTMLTextFormControlElement::dispatchFormControlChangeEvent((WTF **)this);
          v44 = *((_QWORD *)this + 15);
          if (v44)
          {
            v46 = *(_QWORD *)(v44 + 8);
            if (v46)
            {
              *(_DWORD *)(v46 + 24) += 2;
              WebCore::HTMLFormElement::submitImplicitly(v46, a2, (*(_DWORD *)(*((_QWORD *)this + 30) + 12) & 0x2A8C20) != 0);
              if (*(_DWORD *)(v46 + 24) == 2)
              {
                if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v46, v47);
              }
              else
              {
                *(_DWORD *)(v46 + 24) -= 2;
              }
            }
          }
          *((_DWORD *)a2 + 5) |= 0x80u;
        }
        else
        {
          if ((*(unsigned int (**)(WebCore::Event *))(*(_QWORD *)a2 + 16))(a2))
            (*(void (**)(_QWORD, WebCore::Event *))(**((_QWORD **)this + 30) + 392))(*((_QWORD *)this + 30), a2);
          (*(void (**)(_QWORD, WebCore::Event *))(**((_QWORD **)this + 30) + 400))(*((_QWORD *)this + 30), a2);
          if ((v20 & 1) == 0 && (*((_BYTE *)a2 + 20) & 0x80) == 0)
            WebCore::Node::defaultEventHandler(this, (WebCore::Node **)a2);
        }
        return;
      }
LABEL_45:
      WebCore::HTMLFormControlElement::handlePopoverTargetAction(this);
      goto LABEL_46;
    }
  }
}

BOOL WebCore::HTMLInputElement::isSearchField(WebCore::HTMLInputElement *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 30) + 12) == 0x8000;
}

WebCore::EventNames **WebCore::HTMLInputElement::onSearch(WebCore::EventNames **this)
{
  WebCore::EventNames *v1;
  WebCore::EventNames **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Event *v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL4 v10;
  _DWORD *v11;

  v1 = this[30];
  if (v1 && *((_DWORD *)v1 + 3) == 0x8000)
  {
    v2 = this;
    if ((*((_QWORD *)v1 + 28) & 0xFFFFFFFFFFFFLL) != 0)
      this = (WebCore::EventNames **)WebCore::TimerBase::stopSlowCase((WebCore::EventNames *)((char *)v1 + 192));
    v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
      v4 = WebCore::threadGlobalDataSlow((WebCore *)this);
    v5 = *(_QWORD *)(v4 + 40);
    if (!v5)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
      v5 = *(_QWORD *)(v4 + 40);
    }
    v6 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
    *(_QWORD *)v6 = off_1E33A4B48;
    *(_QWORD *)(v6 + 8) = 0;
    v9 = *(_DWORD *)(v6 + 20) & 0xFFC00000 | 0x1E8202;
    v10 = *(_QWORD *)(v5 + 1744) != 0;
    *(_DWORD *)(v6 + 16) = 1;
    *(_DWORD *)(v6 + 20) = v9 | v10;
    v11 = *(_DWORD **)(v5 + 1744);
    if (v11)
      *v11 += 2;
    *(_QWORD *)(v6 + 24) = v11;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 56) = v8;
    *(_QWORD *)(v6 + 64) = 0;
    this = (WebCore::EventNames **)WebCore::EventDispatcher::dispatchEvent(v2, (WebCore::Node *)v6, v7);
    if (*(_DWORD *)(v6 + 16) == 1)
      return (WebCore::EventNames **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    else
      --*(_DWORD *)(v6 + 16);
  }
  return this;
}

BOOL WebCore::HTMLInputElement::canTriggerImplicitSubmission(WebCore::HTMLInputElement *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 30) + 12) & 0x2A8C20) != 0;
}

uint64_t WebCore::HTMLInputElement::willRespondToMouseClickEventsWithEditability(_BYTE *a1, int a2)
{
  if ((a1[160] & 0x18) == 0)
    return 1;
  if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 960))(a1) & 1) != 0)
    return 0;
  return WebCore::Node::willRespondToMouseClickEventsWithEditability((uint64_t)a1, a2);
}

BOOL WebCore::HTMLInputElement::isURLAttribute(uint64_t a1, _QWORD *a2)
{
  return *a2 == WebCore::HTMLNames::srcAttr || *a2 == WebCore::HTMLNames::formactionAttr;
}

uint64_t WebCore::HTMLInputElement::showPicker@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WebCore::LocalDOMWindow *v8;
  char v9;
  uint64_t v10;
  unsigned int *v11;
  WTF::StringImpl *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  BOOL isSameOriginAs;
  WTF::StringImpl *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  BOOL v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  char v33;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 8) + 528);
  if (!v3)
    goto LABEL_11;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_11;
  v5 = this;
  if ((*(_BYTE *)(this + 160) & 0x18) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(this + 112) + 288))(this + 112)
    && (*(_BYTE *)(v5 + 160) & 0x20) != 0)
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 8;
    goto LABEL_27;
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 240) + 352))(*(_QWORD *)(v5 + 240)) & 1) == 0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 8) + 128) + 8);
    if (*(_BYTE *)(v10 + 144))
      goto LABEL_25;
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v4 + 296) + 192), v6);
    v13 = v11;
    if (v11)
    {
      do
        v14 = __ldaxr(v11);
      while (__stlxr(v14 + 1, v11));
    }
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v10 + 296) + 192), v12);
    v16 = v15;
    if (v15)
    {
      do
        v17 = __ldaxr(v15);
      while (__stlxr(v17 + 1, v15));
    }
    isSameOriginAs = WebCore::SecurityOrigin::isSameOriginAs((WebCore::SecurityOrigin *)v13, (const WebCore::SecurityOrigin *)v15);
    do
    {
      v20 = __ldaxr(v16);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v16));
    if (v21)
    {
      if (!v13)
        goto LABEL_24;
    }
    else
    {
      v31 = isSameOriginAs;
      atomic_store(1u, v16);
      v24 = (WTF::StringImpl *)*((_QWORD *)v16 + 6);
      *((_QWORD *)v16 + 6) = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v19);
        else
          *(_DWORD *)v24 -= 2;
      }
      v25 = (WTF::StringImpl *)*((_QWORD *)v16 + 5);
      *((_QWORD *)v16 + 5) = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v19);
        else
          *(_DWORD *)v25 -= 2;
      }
      v26 = v16[8];
      if ((_DWORD)v26 != -1)
        ((void (*)(char *, unsigned int *))off_1E33C18D8[v26])(&v32, v16 + 2);
      v16[8] = -1;
      WTF::fastFree((WTF *)v16, v19);
      isSameOriginAs = v31;
      if (!v13)
        goto LABEL_24;
    }
    do
    {
      v22 = __ldaxr(v13);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v13));
    if (!v23)
    {
      v27 = isSameOriginAs;
      atomic_store(1u, v13);
      v28 = (WTF::StringImpl *)*((_QWORD *)v13 + 6);
      *((_QWORD *)v13 + 6) = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v19);
        else
          *(_DWORD *)v28 -= 2;
      }
      v29 = (WTF::StringImpl *)*((_QWORD *)v13 + 5);
      *((_QWORD *)v13 + 5) = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v19);
        else
          *(_DWORD *)v29 -= 2;
      }
      v30 = v13[8];
      if ((_DWORD)v30 != -1)
        ((void (*)(char *, unsigned int *))off_1E33C18D8[v30])(&v33, v13 + 2);
      v13[8] = -1;
      WTF::fastFree((WTF *)v13, v19);
      if (v27)
        goto LABEL_7;
      goto LABEL_25;
    }
LABEL_24:
    if (isSameOriginAs)
      goto LABEL_7;
LABEL_25:
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 14;
    goto LABEL_27;
  }
LABEL_7:
  v7 = *(_QWORD *)(v4 + 296);
  if (v7)
  {
    v8 = *(WebCore::LocalDOMWindow **)(v7 + 696);
    if (v8)
    {
      if (WebCore::LocalDOMWindow::hasTransientActivation(v8))
      {
        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 240) + 360))(*(_QWORD *)(v5 + 240));
LABEL_11:
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        return this;
      }
    }
  }
  this = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v9 = 31;
LABEL_27:
  *(_BYTE *)a2 = v9;
  *((_BYTE *)a2 + 16) = 1;
  return this;
}

uint64_t WebCore::HTMLInputElement::defaultValue(WebCore::HTMLInputElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return MEMORY[0x1E0CBF2F8];
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) != 0)
  {
    v3 = *(_QWORD *)(v1 + 40);
    LODWORD(v4) = *(_DWORD *)(v1 + 52);
  }
  else
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
  }
  if (!(_DWORD)v4)
    return MEMORY[0x1E0CBF2F8];
  v4 = v4;
  for (result = v3 + 8; ; result += 16)
  {
    v6 = *(_QWORD *)(result - 8);
    if (v6 == WebCore::HTMLNames::valueAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
    {
      break;
    }
    if (!--v4)
      return MEMORY[0x1E0CBF2F8];
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLInputElement::setDefaultValue(WebCore::HTMLInputElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (v3
    && ((v4 = *(_DWORD *)(v3 + 4), (v4 & 1) != 0)
      ? (v5 = *(uint64_t **)(v3 + 40), v6 = *(_DWORD *)(v3 + 52))
      : (v5 = (uint64_t *)(v3 + 32), v6 = v4 >> 5),
        v6))
  {
    v7 = 0;
    while (1)
    {
      v8 = *v5;
      if (*v5 == WebCore::HTMLNames::valueAttr
        || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
        && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
      {
        break;
      }
      ++v7;
      v5 += 2;
      if (v6 == v7)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v7 = 0xFFFFFFFFLL;
  }
  return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::valueAttr, a2, 0);
}

unsigned __int16 *WebCore::parseAcceptAttribute(unsigned __int16 *result, uint64_t a2, uint64_t a3, unsigned int (*a4)(void))
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  _QWORD v41[2];
  unsigned __int16 **v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  char v49;

  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  if (!(_DWORD)a3)
    return result;
  v5 = (uint64_t)result;
  v46 = a2;
  v47 = a3;
  v48 = 44;
  v49 = 0;
  v42 = (unsigned __int16 **)&v46;
  v43 = 0;
  v45 = 0;
  result = (unsigned __int16 *)WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v42);
  v6 = v47;
  v7 = v43;
  if (v43 == (_DWORD)v47)
  {
    if (v45)
      return result;
  }
  while (1)
  {
    v8 = *((unsigned int *)v42 + 2);
    if (v8 > v7)
      break;
LABEL_59:
    result = (unsigned __int16 *)WTF::StringView::SplitResult::Iterator::operator++();
    v7 = v43;
    if (v43 == v6 && v45 != 0)
      return result;
  }
  v9 = v44;
  if (v8 - v7 <= v44)
  {
    if (!v7)
    {
      result = *v42;
      v11 = (unint64_t)v42[1];
      goto LABEL_13;
    }
    v9 = v8 - v7;
  }
  v10 = v7;
  v11 = v9;
  v12 = v8 - v7;
  if (*((_BYTE *)v42 + 12))
  {
    if (v12 < v9)
      goto LABEL_72;
    result = (unsigned __int16 *)((char *)*v42 + v10);
    v11 = v9 | 0x100000000;
  }
  else
  {
    if (v12 < v9)
      goto LABEL_72;
    result = &(*v42)[v10];
  }
LABEL_13:
  v13 = v11;
  if ((v11 & 0xFF00000000) != 0)
  {
    if ((_DWORD)v11)
    {
      v14 = 0;
      while (1)
      {
        v15 = *((unsigned __int8 *)result + v14);
        v16 = v15 > 0x20;
        v17 = (1 << v15) & 0x100003600;
        if (v16 || v17 == 0)
          break;
        if (v11 == ++v14)
          goto LABEL_59;
      }
      if ((_DWORD)v11 != 1)
      {
        v19 = (v11 - 1);
        while (v19 < v11)
        {
          v20 = *((unsigned __int8 *)result + v19);
          v16 = v20 > 0x20;
          v21 = (1 << v20) & 0x100003600;
          if (!v16 && v21 != 0)
          {
            if ((_DWORD)--v19)
              continue;
          }
          if (!(_DWORD)v14 && (_DWORD)v19 == (_DWORD)v11 - 1)
            goto LABEL_52;
          goto LABEL_32;
        }
        goto LABEL_72;
      }
      if ((_DWORD)v14)
      {
        LODWORD(v19) = 0;
LABEL_32:
        v23 = (v19 - v14 + 1);
        if ((unint64_t)v11 - v14 < v23)
          goto LABEL_72;
        result = (unsigned __int16 *)((char *)result + v14);
        v11 = v23 | 0x100000000;
      }
    }
    goto LABEL_52;
  }
  if (!(_DWORD)v11)
  {
LABEL_52:
    v41[0] = result;
    v41[1] = v11;
    if ((_DWORD)v11 && a4())
    {
      WTF::StringView::convertToASCIILowercase((WTF::StringView *)v41);
      v34 = *(unsigned int *)(v5 + 12);
      if ((_DWORD)v34 == *(_DWORD *)(v5 + 8))
      {
        v39 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, v34 + 1, (unint64_t)&v40);
        v34 = *(unsigned int *)(v5 + 12);
        v35 = *(_QWORD *)v5;
        v36 = *v39;
        *v39 = 0;
      }
      else
      {
        v35 = *(_QWORD *)v5;
        v36 = v40;
        v40 = 0;
      }
      *(_QWORD *)(v35 + 8 * v34) = v36;
      *(_DWORD *)(v5 + 12) = v34 + 1;
      v37 = v40;
      v40 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v33);
        else
          *(_DWORD *)v37 -= 2;
      }
    }
    goto LABEL_59;
  }
  v24 = 0;
  v25 = result;
  while (1)
  {
    v26 = *v25;
    v16 = v26 > 0x20;
    v27 = (1 << v26) & 0x100003600;
    if (v16 || v27 == 0)
      break;
    ++v24;
    ++v25;
    if (v11 == v24)
      goto LABEL_59;
  }
  if ((_DWORD)v11 == 1)
  {
    if ((_DWORD)v24)
    {
      LODWORD(v29) = 0;
LABEL_71:
      v11 = (v29 - v24 + 1);
      result = v25;
      if (v13 - v24 < v11)
        goto LABEL_72;
    }
    goto LABEL_52;
  }
  v29 = (v11 - 1);
  while (v29 < v11)
  {
    v30 = result[v29];
    v16 = v30 > 0x20;
    v31 = (1 << v30) & 0x100003600;
    if (!v16 && v31 != 0)
    {
      if ((_DWORD)--v29)
        continue;
    }
    if ((_DWORD)v24 || (_DWORD)v29 != (_DWORD)v11 - 1)
      goto LABEL_71;
    goto LABEL_52;
  }
LABEL_72:
  __break(1u);
  return result;
}

int16x8_t *WebCore::isValidMIMEType(int16x8_t *result, uint64_t a2, double a3, double a4, float a5)
{
  int v5;
  int16x8_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  int16x8_t *v28;
  int16x8_t *v29;
  int16x8_t v30;
  int16x8_t *v31;
  int8x16_t v32;
  char *v33;
  int16x8_t v34;
  char *i;

  v5 = a2;
  v6 = result;
  v7 = a2;
  v8 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a2)
    {
      v9 = 16;
      if (a2 < 0x10uLL)
        v9 = a2;
      v10 = v9;
      do
      {
        if (result->i8[0] == 47)
          goto LABEL_10;
        result = (int16x8_t *)((char *)result + 1);
        --v10;
      }
      while (v10);
      if (a2 >= 0x11uLL)
      {
        result = (int16x8_t *)memchr(&v6->i8[v9], 47, a2 - v9);
        if (result)
        {
LABEL_10:
          v11 = (char *)result - (char *)v6;
          goto LABEL_11;
        }
      }
    }
    return 0;
  }
  if (!(_DWORD)a2)
    return 0;
  v27 = 2 * a2;
  if (v27 > -2)
  {
    v28 = (int16x8_t *)((char *)result + 2 * a2);
    if ((unint64_t)v27 <= 0x3E)
    {
      for (i = (char *)result; *(_WORD *)i != 47; i += 2)
      {
        v14 = 0;
        v27 -= 2;
        if (!v27)
          return (int16x8_t *)v14;
      }
    }
    else
    {
      v29 = result;
      if (a2 < 8uLL)
      {
LABEL_55:
        if (v29 >= v28)
          return 0;
        v31 = v28 - 1;
        v34.i64[0] = 0x2F002F002F002FLL;
        v34.i64[1] = 0x2F002F002F002FLL;
        v32 = (int8x16_t)vceqq_s16(v28[-1], v34);
        v34.i16[0] = vmaxvq_u16((uint16x8_t)v32);
        if (!v34.i32[0])
          return 0;
      }
      else
      {
        v30.i64[0] = 0x2F002F002F002FLL;
        v30.i64[1] = 0x2F002F002F002FLL;
        v31 = result;
        while (1)
        {
          v32 = (int8x16_t)vceqq_s16(*v31, v30);
          LOWORD(a5) = vmaxvq_u16((uint16x8_t)v32);
          if (a5 != 0.0)
            break;
          v29 = v31 + 1;
          v33 = &v31[1].i8[14];
          ++v31;
          if (v33 >= (char *)v28)
            goto LABEL_55;
        }
      }
      i = &v31->i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v32))];
    }
    if (i != (char *)v28)
    {
      v11 = (i - (char *)result) >> 1;
LABEL_11:
      v13 = v11 == v5 - 1 || (unint64_t)(v11 + 1) < 2;
      v14 = !v13;
      if (!v13)
      {
        v14 = 0;
        v15 = 0;
        if (v8)
        {
          do
          {
            v25 = v6->u8[v15];
            if ((v25 - 33) > 0x5E
              || ((v25 - 34) <= 0x3B
                ? (v26 = ((1 << (v25 - 34)) & 0xE0000007F0024C1) == 0)
                : (v26 = 1),
                  !v26
               || ((v22 = v25 - 123, v19 = v22 > 4, v23 = (1 << v22) & 0x15, !v19) ? (v24 = v23 == 0) : (v24 = 1), !v24)))
            {
              if (v11 != v15)
                break;
            }
            v14 = ++v15 >= v7;
          }
          while (v7 != v15);
        }
        else
        {
          do
          {
            v16 = v6->u16[v15];
            if ((v16 - 33) > 0x5E
              || ((v16 - 34) <= 0x3B
                ? (v17 = ((1 << (v16 - 34)) & 0xE0000007F0024C1) == 0)
                : (v17 = 1),
                  !v17
               || ((v18 = v16 - 123, v19 = v18 > 4, v20 = (1 << v18) & 0x15, !v19) ? (v21 = v20 == 0) : (v21 = 1), !v21)))
            {
              if (v11 != v15)
                break;
            }
            v14 = ++v15 >= v7;
          }
          while (v7 != v15);
        }
      }
      return (int16x8_t *)v14;
    }
    return 0;
  }
  __break(1u);
  return result;
}

BOOL WebCore::isValidFileExtension(unsigned __int8 *a1, uint64_t a2)
{
  int v2;

  if ((a2 & 0xFFFFFFFE) == 0)
    return 0;
  if ((a2 & 0xFF00000000) != 0)
    v2 = *a1;
  else
    v2 = *(unsigned __int16 *)a1;
  return v2 == 46;
}

uint64_t WebCore::HTMLInputElement::alt@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(this + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (_DWORD **)(v4 + 8);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 1);
    if (v7 == WebCore::HTMLNames::altAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (v8)
    *v8 += 2;
  *a2 = v8;
  return this;
}

uint64_t WebCore::HTMLInputElement::multiple(WebCore::HTMLInputElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) != 0)
  {
    v3 = *(uint64_t **)(v1 + 40);
    LODWORD(v4) = *(_DWORD *)(v1 + 52);
    if (!(_DWORD)v4)
      return 0;
  }
  else
  {
    v3 = (uint64_t *)(v1 + 32);
    LODWORD(v4) = v2 >> 5;
    if (!(_DWORD)v4)
      return 0;
  }
  v4 = v4;
  while (1)
  {
    v5 = *v3;
    if (*v3 == WebCore::HTMLNames::multipleAttr
      || *(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 24)
      && *(_QWORD *)(v5 + 32) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 32))
    {
      break;
    }
    v3 += 2;
    if (!--v4)
      return 0;
  }
  return 1;
}

WebCore::Element *WebCore::HTMLInputElement::setSize@<X0>(WebCore::Element *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  char v5;

  if (a2)
  {
    if (a2 <= 0)
      v4 = 20;
    else
      v4 = a2;
    this = WebCore::Element::setUnsignedIntegralAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::sizeAttr, v4);
    v5 = 0;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    a3[1] = 0;
    v5 = 1;
  }
  *(_BYTE *)a3 = 0;
  *((_BYTE *)a3 + 16) = v5;
  return this;
}

uint64_t WebCore::HTMLInputElement::files(WebCore::HTMLInputElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 30);
  if (*(_DWORD *)(v1 + 12) == 64)
    return *(_QWORD *)(v1 + 72);
  else
    return 0;
}

unsigned int *WebCore::HTMLInputElement::setFiles(uint64_t a1, uint64_t *a2, char a3)
{
  unsigned int *result;

  result = *(unsigned int **)(a1 + 240);
  if (result[3] == 64)
    return WebCore::FileInputType::setFiles(result, a2, (const WTF::StringImpl *)1, a3);
  return result;
}

BOOL WebCore::HTMLInputElement::isInRange(WebCore::HTMLInputElement *this)
{
  char v2;
  _BOOL8 v3;
  WebCore::InputType *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v16;
  char v17;
  WTF::StringImpl *v18;

  v2 = *((_BYTE *)this + 160);
  if ((v2 & 4) == 0 || (*((_BYTE *)this + 162) & 3) == 2)
  {
    *((_BYTE *)this + 160) = v2 | 4;
    v16 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 336))((char *)this + 112);
    v2 = *((_BYTE *)this + 160);
    if (((v16 ^ ((v2 & 2) == 0)) & 1) == 0)
    {
      if (v16)
        v17 = 2;
      else
        v17 = 0;
      v2 = v2 & 0xFD | v17;
      *((_BYTE *)this + 160) = v2;
    }
  }
  if ((v2 & 2) == 0)
    return 0;
  v4 = (WebCore::InputType *)*((_QWORD *)this + 30);
  if (*((_DWORD *)v4 + 3) == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue(*((_QWORD *)this + 30), &v18);
    goto LABEL_24;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  if (v5)
  {
    *(_DWORD *)v5 += 2;
    v18 = v5;
    goto LABEL_24;
  }
  v6 = *((_QWORD *)this + 13);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if ((_DWORD)v9)
      {
LABEL_10:
        v9 = v9;
        v10 = (_QWORD *)(v8 + 8);
        while (1)
        {
          v11 = *(v10 - 1);
          if (v11 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_19;
          }
          v10 += 2;
          if (!--v9)
          {
            v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_19;
          }
        }
      }
    }
    else
    {
      v8 = v6 + 32;
      LODWORD(v9) = v7 >> 5;
      if ((_DWORD)v9)
        goto LABEL_10;
    }
  }
  v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_19:
  v12 = *((_QWORD *)this + 30);
  if (!*v10)
  {
LABEL_20:
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v12 + 64))(&v18);
    goto LABEL_24;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD))(*(_QWORD *)v4 + 296))(&v18, *((_QWORD *)this + 30));
  if (!v18)
  {
    v18 = 0;
    v12 = *((_QWORD *)this + 30);
    goto LABEL_20;
  }
LABEL_24:
  v3 = WebCore::InputType::isInRange(v4, (const WTF::String *)&v18);
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return v3;
}

BOOL WebCore::HTMLInputElement::isOutOfRange(WebCore::HTMLInputElement *this)
{
  char v2;
  _BOOL8 isOutOfRange;
  WebCore::InputType *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v16;
  char v17;
  WTF::StringImpl *v18;

  v2 = *((_BYTE *)this + 160);
  if ((v2 & 4) == 0 || (*((_BYTE *)this + 162) & 3) == 2)
  {
    *((_BYTE *)this + 160) = v2 | 4;
    v16 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 336))((char *)this + 112);
    v2 = *((_BYTE *)this + 160);
    if (((v16 ^ ((v2 & 2) == 0)) & 1) == 0)
    {
      if (v16)
        v17 = 2;
      else
        v17 = 0;
      v2 = v2 & 0xFD | v17;
      *((_BYTE *)this + 160) = v2;
    }
  }
  if ((v2 & 2) == 0)
    return 0;
  v4 = (WebCore::InputType *)*((_QWORD *)this + 30);
  if (*((_DWORD *)v4 + 3) == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue(*((_QWORD *)this + 30), &v18);
    goto LABEL_24;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  if (v5)
  {
    *(_DWORD *)v5 += 2;
    v18 = v5;
    goto LABEL_24;
  }
  v6 = *((_QWORD *)this + 13);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if ((_DWORD)v9)
      {
LABEL_10:
        v9 = v9;
        v10 = (_QWORD *)(v8 + 8);
        while (1)
        {
          v11 = *(v10 - 1);
          if (v11 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_19;
          }
          v10 += 2;
          if (!--v9)
          {
            v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_19;
          }
        }
      }
    }
    else
    {
      v8 = v6 + 32;
      LODWORD(v9) = v7 >> 5;
      if ((_DWORD)v9)
        goto LABEL_10;
    }
  }
  v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_19:
  v12 = *((_QWORD *)this + 30);
  if (!*v10)
  {
LABEL_20:
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v12 + 64))(&v18);
    goto LABEL_24;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD))(*(_QWORD *)v4 + 296))(&v18, *((_QWORD *)this + 30));
  if (!v18)
  {
    v18 = 0;
    v12 = *((_QWORD *)this + 30);
    goto LABEL_20;
  }
LABEL_24:
  isOutOfRange = WebCore::InputType::isOutOfRange(v4, (const WTF::String *)&v18);
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return isOutOfRange;
}

uint64_t WebCore::HTMLInputElement::isRequiredFormControl(WebCore::HTMLInputElement *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 144))(*((_QWORD *)this + 30));
  if ((_DWORD)result)
    return *((_BYTE *)this + 168) & 1;
  return result;
}

uint64_t WebCore::HTMLInputElement::matchesReadWritePseudoClass(WebCore::HTMLInputElement *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 728))(*((_QWORD *)this + 30));
  if ((_DWORD)result)
  {
    if ((*((_BYTE *)this + 160) & 0x18) != 0)
      return 0;
    else
      return !(*(unsigned int (**)(char *))(*((_QWORD *)this + 14) + 288))((char *)this + 112)
          || (*((_BYTE *)this + 160) & 0x20) == 0;
  }
  return result;
}

uint64_t WebCore::HTMLInputElement::resumeFromDocumentSuspension(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  if (*(_DWORD *)(*(_QWORD *)(this + 240) + 12) != 4)
  {
    v1 = this;
    v2 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
    *(_DWORD *)(this + 24) += 2;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = &off_1E33C19F8;
    v3[1] = v1;
    v6 = *(_OWORD *)(v2 + 416);
    v7 = *(_OWORD *)(v2 + 432);
    v4 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v4 = &off_1E33A3A20;
    *(_OWORD *)(v4 + 16) = v6;
    *(_OWORD *)(v4 + 32) = v7;
    *(_QWORD *)(v4 + 48) = v3;
    *(_BYTE *)(v4 + 56) = 0;
    v5 = v4;
    WTF::callOnMainThread();
    this = v5;
    if (v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return this;
}

BOOL WebCore::HTMLInputElement::isColorControl(WebCore::HTMLInputElement *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 30) + 12) == 4;
}

uint64_t WebCore::HTMLInputElement::prepareForDocumentSuspension(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 648))(*((_QWORD *)this + 30));
}

WebCore::HTMLInputElement *WebCore::HTMLInputElement::willChangeForm(WebCore::HTMLInputElement *this)
{
  uint64_t v1;
  uint64_t v2;
  const WebCore::HTMLElement *v3;
  uint64_t v4;
  WebCore::HTMLInputElement *v5;
  _QWORD *v6;
  uint64_t v7;

  if (*(_DWORD *)(*((_QWORD *)this + 30) + 12) == 4096)
  {
    v4 = *((_QWORD *)this + 15);
    if (v4 && (v7 = *(_QWORD *)(v4 + 8)) != 0)
    {
      v5 = this;
      v6 = (_QWORD *)(v7 + 160);
    }
    else
    {
      if ((*((_BYTE *)this + 22) & 0x18) == 0)
        goto LABEL_2;
      v5 = this;
      v6 = WebCore::TreeScope::radioButtonGroups(*((WebCore::TreeScope **)this + 5));
    }
    WebCore::RadioButtonGroups::removeButton((uint64_t)v6, v5);
    this = v5;
  }
LABEL_2:
  v1 = *((_QWORD *)this + 15);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = (const WebCore::HTMLElement *)(*(uint64_t (**)(uint64_t))(*((_QWORD *)this + 14) + 16))((uint64_t)this + 112);
      return (WebCore::HTMLInputElement *)WebCore::HTMLFormElement::removeInvalidFormControlIfNeeded(v2, v3);
    }
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::HTMLInputElement::willChangeForm(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  const WebCore::HTMLElement *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  WebCore::RadioButtonGroups *v10;
  WTF *v11;
  void *v12;
  uint64_t v13;

  if (*(_DWORD *)(this[16] + 12) == 4096)
  {
    v4 = this[1];
    if (v4 && (v13 = *(_QWORD *)(v4 + 8)) != 0)
    {
      v5 = this;
      v7 = (_QWORD *)(v13 + 160);
    }
    else
    {
      if ((*((_BYTE *)this - 90) & 0x18) == 0)
        goto LABEL_2;
      v5 = this;
      v6 = *(this - 9);
      v7 = *(_QWORD **)(v6 + 72);
      if (!v7)
      {
        v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        v7 = WebCore::RadioButtonGroups::RadioButtonGroups(v8);
        v10 = *(WebCore::RadioButtonGroups **)(v6 + 72);
        *(_QWORD *)(v6 + 72) = v7;
        if (v10)
        {
          WebCore::RadioButtonGroups::~RadioButtonGroups(v10, v9);
          WTF::fastFree(v11, v12);
          v7 = *(_QWORD **)(v6 + 72);
        }
      }
    }
    WebCore::RadioButtonGroups::removeButton((uint64_t)v7, (WebCore::HTMLInputElement *)(v5 - 14));
    this = v5;
  }
LABEL_2:
  v1 = this[1];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = (const WebCore::HTMLElement *)(*(uint64_t (**)(_QWORD *))(*this + 16))(this);
      return (_QWORD *)WebCore::HTMLFormElement::removeInvalidFormControlIfNeeded(v2, v3);
    }
  }
  return this;
}

uint64_t *WebCore::HTMLInputElement::didChangeForm(uint64_t *this)
{
  int v1;
  uint64_t v2;
  WebCore::HTMLFormElement *v3;
  const WebCore::HTMLElement *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  WebCore::HTMLInputElement *v9;

  v1 = WebCore::ScriptDisallowedScope::s_count++;
  v2 = this[15];
  if (v2)
  {
    v3 = *(WebCore::HTMLFormElement **)(v2 + 8);
    if (v3)
    {
      if ((this[20] & 7) == 6)
      {
        v8 = this;
        v4 = (const WebCore::HTMLElement *)(*(uint64_t (**)(uint64_t *))(this[14] + 16))(this + 14);
        WebCore::HTMLFormElement::addInvalidFormControl(v3, v4);
        this = v8;
        v1 = WebCore::ScriptDisallowedScope::s_count - 1;
      }
    }
  }
  WebCore::ScriptDisallowedScope::s_count = v1;
  if (*(_DWORD *)(this[30] + 12) == 4096)
  {
    v5 = this[15];
    if (v5 && (v7 = *(_QWORD *)(v5 + 8)) != 0)
    {
      v9 = (WebCore::HTMLInputElement *)this;
      v6 = (uint64_t *)(v7 + 160);
    }
    else
    {
      if ((*((_BYTE *)this + 22) & 0x18) == 0)
        return this;
      v9 = (WebCore::HTMLInputElement *)this;
      v6 = WebCore::TreeScope::radioButtonGroups((WebCore::TreeScope *)this[5]);
    }
    return WebCore::RadioButtonGroups::addButton(v6, v9);
  }
  return this;
}

uint64_t *`non-virtual thunk to'WebCore::HTMLInputElement::didChangeForm(uint64_t *this)
{
  int v1;
  uint64_t v2;
  WebCore::HTMLFormElement *v3;
  uint64_t *v4;
  const WebCore::HTMLElement *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  void *v11;
  WebCore::RadioButtonGroups *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  v1 = WebCore::ScriptDisallowedScope::s_count++;
  v2 = this[1];
  if (v2)
  {
    v3 = *(WebCore::HTMLFormElement **)(v2 + 8);
    if (v3)
    {
      if ((this[6] & 7) == 6)
      {
        v4 = this;
        v5 = (const WebCore::HTMLElement *)(*(uint64_t (**)(void))(*this + 16))();
        WebCore::HTMLFormElement::addInvalidFormControl(v3, v5);
        this = v4;
        v1 = WebCore::ScriptDisallowedScope::s_count - 1;
      }
    }
  }
  WebCore::ScriptDisallowedScope::s_count = v1;
  if (*(_DWORD *)(this[16] + 12) == 4096)
  {
    v6 = this[1];
    if (v6 && (v15 = *(_QWORD *)(v6 + 8)) != 0)
    {
      v7 = this;
      v9 = (uint64_t *)(v15 + 160);
    }
    else
    {
      if ((*((_BYTE *)this - 90) & 0x18) == 0)
        return this;
      v7 = this;
      v8 = *(this - 9);
      v9 = *(uint64_t **)(v8 + 72);
      if (!v9)
      {
        v10 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        v9 = WebCore::RadioButtonGroups::RadioButtonGroups(v10);
        v12 = *(WebCore::RadioButtonGroups **)(v8 + 72);
        *(_QWORD *)(v8 + 72) = v9;
        if (v12)
        {
          WebCore::RadioButtonGroups::~RadioButtonGroups(v12, v11);
          WTF::fastFree(v13, v14);
          v9 = *(uint64_t **)(v8 + 72);
        }
      }
    }
    return WebCore::RadioButtonGroups::addButton(v9, (WebCore::HTMLInputElement *)(v7 - 14));
  }
  return this;
}

unsigned int *WebCore::HTMLInputElement::updateUserAgentShadowTree(WebCore::HTMLInputElement *this)
{
  unsigned int *result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;

  result = WebCore::Document::removeElementWithPendingUserAgentShadowTreeUpdate(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), this);
  *((_WORD *)this + 116) &= ~0x1000u;
  v3 = *((_QWORD *)this + 30);
  if (!*(_BYTE *)(v3 + 16))
  {
    v4 = *(_DWORD *)(v3 + 12);
    if ((v4 & 0x15183) != 0)
    {
      if (v4 != 2)
        return result;
      v5 = *(_QWORD *)(v3 + 24);
      if (!v5)
        return result;
      result = *(unsigned int **)(v5 + 8);
      if (!result || (result[58] & 0x2000) == 0)
        return result;
      v6 = (_DWORD *)(v3 + 8);
      ++*(_DWORD *)(v3 + 8);
    }
    else
    {
      v6 = (_DWORD *)(v3 + 8);
      v7 = *(_QWORD *)(v3 + 24);
      ++*(_DWORD *)(v3 + 8);
      if (v7)
        result = *(unsigned int **)(v7 + 8);
      else
        result = 0;
    }
    WebCore::Element::ensureUserAgentShadowRoot((WebCore::Element *)result);
    *(_BYTE *)(v3 + 16) = 1;
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 512))(v3);
    if (*(_DWORD *)(v3 + 8) == 1)
      return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    else
      *v6 = *(_DWORD *)(v3 + 8) - 1;
  }
  return result;
}

uint64_t WebCore::HTMLInputElement::didMoveToNewDocument(WebCore::HTMLInputElement *this, WebCore::Document *a2, WebCore::Document *a3, WTF::String *a4)
{
  WebCore::ImageLoader *v7;
  uint64_t v8;
  WebCore::FormListedElement *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];

  v7 = (WebCore::ImageLoader *)*((_QWORD *)this + 31);
  if (v7)
    WebCore::ImageLoader::elementDidMoveToNewDocument(v7, a2);
  v8 = *((_QWORD *)this + 30);
  if (v8)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 696))(v8) & 1) != 0)
      goto LABEL_37;
    if ((*((_WORD *)this + 115) & 0xC0) == 0x80)
    {
      if ((*(_DWORD *)(*((_QWORD *)this + 30) + 12) & 0x2A8820) == 0)
        goto LABEL_37;
      v17 = *((_QWORD *)this + 13);
      if (v17
        && ((v18 = *(_DWORD *)(v17 + 4), (v18 & 1) != 0)
          ? (v19 = *(_QWORD *)(v17 + 40), LODWORD(v20) = *(_DWORD *)(v17 + 52))
          : (v19 = v17 + 32, LODWORD(v20) = v18 >> 5),
            (_DWORD)v20))
      {
        v20 = v20;
        v21 = (uint64_t *)(v19 + 8);
        while (1)
        {
          v22 = *(v21 - 1);
          if (v22 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v22 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v22 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            break;
          }
          v21 += 2;
          if (!--v20)
          {
            v21 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v21 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      }
      v23 = *v21;
      if (!v23 || !*(_DWORD *)(v23 + 4))
      {
LABEL_37:
        WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>((uint64_t)a2 + 1840, this);
        WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>((uint64_t)a3 + 1840, this, (uint64_t)v24);
      }
    }
  }
  if ((*((_WORD *)this + 116) & 0x400) != 0)
  {
    WebCore::Document::removeTouchEventHandler((uint64_t)a2, (uint64_t)this, 0);
    WebCore::Document::addTouchEventHandler(a3, this);
  }
  WebCore::Element::didMoveToNewDocument(this, a2, a3, a4);
  v10 = *((_QWORD *)this + 14);
  v9 = (WebCore::HTMLInputElement *)((char *)this + 112);
  result = (*(uint64_t (**)(WebCore::FormListedElement *))(v10 + 16))(v9);
  v12 = *(_QWORD *)(result + 104);
  if (v12)
  {
    v13 = *(_DWORD *)(v12 + 4);
    if ((v13 & 1) != 0)
    {
      v14 = *(uint64_t **)(v12 + 40);
      LODWORD(v15) = *(_DWORD *)(v12 + 52);
      if (!(_DWORD)v15)
        return result;
    }
    else
    {
      v14 = (uint64_t *)(v12 + 32);
      LODWORD(v15) = v13 >> 5;
      if (!(_DWORD)v15)
        return result;
    }
    v15 = v15;
    while (1)
    {
      v16 = *v14;
      if (*v14 == WebCore::HTMLNames::formAttr
        || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
        && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
      {
        break;
      }
      v14 += 2;
      if (!--v15)
        return result;
    }
    if ((*(_BYTE *)(result + 22) & 8) != 0)
      return WebCore::FormListedElement::resetFormAttributeTargetObserver(v9);
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLInputElement::addSubresourceAttributeURLs(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  WTF::StringImpl *result;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13[5];
  _BYTE v14[24];

  WebCore::StyledElement::addSubresourceAttributeURLs(a1, (uint64_t)a2);
  v4 = a1[13];
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  v8 = (_QWORD *)(v6 + 8);
  while (1)
  {
    v9 = *(v8 - 1);
    if (v9 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v7)
    {
      v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  result = WebCore::Document::completeURL(*(WebCore::Document **)(a1[5] + 8), v8, *(_QWORD *)(a1[5] + 8) + 848, 0, (WTF::URL *)v13);
  if (v13[0])
  {
    WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::add(a2, (uint64_t)v13, v11, (uint64_t)v14);
    result = v13[0];
    v13[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLInputElement::computeWillValidate(WebCore::HTMLInputElement *this)
{
  char *v2;
  char v3;
  uint64_t v4;
  int v5;

  if ((*(_WORD *)(*((_QWORD *)this + 30) + 12) & 0x4181) != 0)
    return 0;
  v2 = (char *)this + 112;
  v3 = *((_BYTE *)this + 162);
  if ((v3 & 3) == 2)
  {
    v4 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 24))((char *)this + 112);
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 3288);
    if (v5)
      LOBYTE(v5) = WebCore::ancestorsOfType<WebCore::HTMLDataListElement>(v4) != 0;
    v3 = *((_BYTE *)this + 162) & 0xFC | v5;
    *((_BYTE *)this + 162) = v3;
  }
  if ((v3 & 3) != 0)
    return 0;
  if ((*((_BYTE *)this + 160) & 0x38) == 0)
    return 1;
  if ((*((_BYTE *)this + 160) & 0x18) != 0)
    return 0;
  if ((*((_BYTE *)this + 160) & 0x20) == 0)
    return 1;
  return (*(unsigned int (**)(char *))(*(_QWORD *)v2 + 344))(v2) ^ 1;
}

uint64_t WebCore::HTMLInputElement::requiredStateChanged(WebCore::HTMLInputElement *this)
{
  _DWORD *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this + 112);
  v2 = (_DWORD *)*((_QWORD *)this + 30);
  if (v2[3] == 4096)
  {
    v4 = *((_QWORD *)this + 15);
    if (v4 && (v6 = *(_QWORD *)(v4 + 8)) != 0)
    {
      v5 = (uint64_t *)(v6 + 160);
    }
    else
    {
      if ((*((_BYTE *)this + 22) & 0x18) == 0)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 776))(v2);
      v5 = WebCore::TreeScope::radioButtonGroups(*((WebCore::TreeScope **)this + 5));
    }
    WebCore::RadioButtonGroups::requiredStateChanged(v5, this);
    v2 = (_DWORD *)*((_QWORD *)this + 30);
  }
  return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 776))(v2);
}

WTF::StringImpl *WebCore::HTMLInputElement::valueAsColor@<X0>(WebCore::HTMLInputElement *this@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *result;
  BOOL v3;

  result = (WTF::StringImpl *)*((_QWORD *)this + 30);
  if (result)
    v3 = *((_DWORD *)result + 3) == 4;
  else
    v3 = 0;
  if (v3)
    return WebCore::ColorInputType::valueAsColor(result, a2);
  *a2 = 0x1104000000000000;
  return result;
}

void WebCore::HTMLInputElement::selectColor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::ColorInputType *v3;
  BOOL v4;
  unint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  v3 = *(WebCore::ColorInputType **)(a1 + 240);
  if (v3)
    v4 = *((_DWORD *)v3 + 3) == 4;
  else
    v4 = 0;
  if (v4)
  {
    v5 = WebCore::parseSimpleColorValue(a2, a3);
    if (BYTE4(v5))
    {
      v10 = bswap32(v5) | 0x1104000000000000;
      WebCore::ColorInputType::didChooseColor(v3, (const WebCore::Color *)&v10);
      if ((v10 & 0x8000000000000) != 0)
      {
        v7 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, v6);
        }
      }
    }
  }
}

unsigned int *WebCore::HTMLInputElement::suggestedColors@<X0>(WebCore::HTMLInputElement *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *result;
  BOOL v3;

  result = (unsigned int *)*((_QWORD *)this + 30);
  if (result)
    v3 = result[3] == 4;
  else
    v3 = 0;
  if (v3)
    return WebCore::ColorInputType::suggestedColors((WebCore::ColorInputType *)result, (uint64_t)a2);
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t WebCore::HTMLInputElement::dataList@<X0>(uint64_t this@<X0>, WebCore::Node **a2@<X8>)
{
  uint64_t v2;
  WebCore::Node **v3;
  uint64_t v4;
  unsigned int *v5;
  const WTF::AtomString *v6;
  void *v7;
  __int16 v8;
  WebCore::Node *v9;

  if ((*(_WORD *)(this + 232) & 0x10) != 0
    && (v2 = this,
        v3 = a2,
        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 240) + 704))(*(_QWORD *)(this + 240)),
        a2 = v3,
        (this & 1) != 0))
  {
    v4 = v2;
    v5 = *(unsigned int **)(v2 + 40);
    v6 = (const WTF::AtomString *)WebCore::Element::attributeWithoutSynchronization(v4, &WebCore::HTMLNames::listAttr);
    WebCore::TreeScope::getElementById(v5, v6, (uint64_t *)&v9);
    this = (uint64_t)v9;
    if (!v9
      || (v8 = *((_WORD *)v9 + 14), (v8 & 0x10) != 0)
      && (v8 & 0x110) != 0x110
      && *(_QWORD *)(*((_QWORD *)v9 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::datalistTag + 24))
    {
      *v3 = v9;
    }
    else
    {
      *v3 = 0;
      if (*(_DWORD *)(this + 24) == 2)
      {
        if ((*(_WORD *)(this + 30) & 0x400) == 0)
          return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, v7);
      }
      else
      {
        *(_DWORD *)(this + 24) -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebCore::HTMLInputElement::isFocusingWithDataListDropdown(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 840))(*((_QWORD *)this + 30));
}

BOOL WebCore::HTMLInputElement::isTextButton(WebCore::HTMLInputElement *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 30) + 12) & 0x14001) != 0;
}

BOOL WebCore::HTMLInputElement::isPasswordField(WebCore::HTMLInputElement *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 30) + 12) == 2048;
}

BOOL WebCore::HTMLInputElement::isText(WebCore::HTMLInputElement *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 30) + 12) & 0x2A8820) != 0;
}

BOOL WebCore::HTMLInputElement::isEmailField(WebCore::HTMLInputElement *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 30) + 12) == 32;
}

BOOL WebCore::HTMLInputElement::isNumberField(WebCore::HTMLInputElement *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 30) + 12) == 1024;
}

BOOL WebCore::HTMLInputElement::isSubmitButton(WebCore::HTMLInputElement *this)
{
  int v1;

  v1 = *(_DWORD *)(*((_QWORD *)this + 30) + 12);
  return v1 == 0x10000 || v1 == 256;
}

BOOL WebCore::HTMLInputElement::isTelephoneField(WebCore::HTMLInputElement *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 30) + 12) == 0x20000;
}

BOOL WebCore::HTMLInputElement::isURLField(WebCore::HTMLInputElement *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 30) + 12) == 0x80000;
}

BOOL WebCore::HTMLInputElement::isDateField(WebCore::HTMLInputElement *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 30) + 12) == 8;
}

BOOL WebCore::HTMLInputElement::isDateTimeLocalField(WebCore::HTMLInputElement *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 30) + 12) == 16;
}

BOOL WebCore::HTMLInputElement::isMonthField(WebCore::HTMLInputElement *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 30) + 12) == 512;
}

BOOL WebCore::HTMLInputElement::isTimeField(WebCore::HTMLInputElement *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 30) + 12) == 0x40000;
}

BOOL WebCore::HTMLInputElement::isWeekField(WebCore::HTMLInputElement *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 30) + 12) == 0x100000;
}

BOOL WebCore::HTMLInputElement::isEnumeratable(WebCore::HTMLInputElement *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 30) + 12) != 256;
}

BOOL `non-virtual thunk to'WebCore::HTMLInputElement::isEnumeratable(WebCore::HTMLInputElement *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 16) + 12) != 256;
}

BOOL WebCore::HTMLInputElement::isLabelable(WebCore::HTMLInputElement *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 30) + 12) != 128;
}

BOOL WebCore::HTMLInputElement::matchesCheckedPseudoClass(WebCore::HTMLInputElement *this)
{
  return (*((_WORD *)this + 115) & 1) != 0 && (*(_WORD *)(*((_QWORD *)this + 30) + 12) & 0x1002) != 0;
}

uint64_t WebCore::HTMLInputElement::updatePlaceholderText(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 744))(*((_QWORD *)this + 30));
}

uint64_t WebCore::HTMLInputElement::matchesIndeterminatePseudoClass(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 808))(*((_QWORD *)this + 30));
}

uint64_t WebCore::HTMLInputElement::mediaCaptureType(WebCore::HTMLInputElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;

  if (*(_DWORD *)(*((_QWORD *)this + 30) + 12) != 64)
    return 0;
  v1 = *((_QWORD *)this + 13);
  if (!v1)
    goto LABEL_13;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_5;
LABEL_13:
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_14;
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    goto LABEL_13;
LABEL_5:
  v4 = v4;
  v5 = (uint64_t *)(v3 + 8);
  while (1)
  {
    v6 = *(v5 - 1);
    if (v6 == WebCore::HTMLNames::captureAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::captureAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::captureAttr + 32))
    {
      break;
    }
    v5 += 2;
    if (!--v4)
    {
      v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_14:
  v7 = *v5;
  if (!*v5)
    return 0;
  if (*(_DWORD *)(v7 + 4) != 4)
    return 2;
  v9 = *(_QWORD *)(v7 + 8);
  if ((*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v9 & 0xDF) != 0x55 || (*(_BYTE *)(v9 + 1) & 0xDF) != 0x53 || (*(_BYTE *)(v9 + 2) & 0xDF) != 0x45)
      return 2;
    v10 = *(unsigned __int8 *)(v9 + 3);
  }
  else
  {
    if ((*(_WORD *)v9 & 0xFFDF) != 0x55
      || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0x53
      || (*(_WORD *)(v9 + 4) & 0xFFDF) != 0x45)
    {
      return 2;
    }
    v10 = *(unsigned __int16 *)(v9 + 6);
  }
  if ((v10 & 0xFFFFFFDF) != 0x52)
    return 2;
  return 1;
}

uint64_t *WebCore::HTMLInputElement::radioButtonGroup@<X0>(uint64_t *this@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_DWORD *)(this[30] + 12) != 4096)
    goto LABEL_2;
  v3 = this[15];
  if (v3 && (v6 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v5 = this;
    v13 = (uint64_t)a3;
    this = (uint64_t *)(v6 + 160);
  }
  else
  {
    if ((*((_BYTE *)this + 22) & 0x18) == 0)
    {
LABEL_2:
      *a3 = 0;
      a3[1] = 0;
      return this;
    }
    v13 = (uint64_t)a3;
    v4 = this;
    this = WebCore::TreeScope::radioButtonGroups((WebCore::TreeScope *)this[5]);
    if (*(_DWORD *)(v4[30] + 12) != 4096)
    {
LABEL_19:
      a3 = (_QWORD *)v13;
      goto LABEL_2;
    }
    v5 = v4;
  }
  v7 = v5[26];
  if (!v7)
  {
    v7 = *MEMORY[0x1E0CBF3B8];
    if (!*MEMORY[0x1E0CBF3B8])
      goto LABEL_19;
  }
  v8 = *this;
  if (!*this)
    goto LABEL_19;
  v9 = 0;
  for (i = *(_DWORD *)(v7 + 16) >> 8; ; i = ++v9 + v11)
  {
    v11 = i & *(_DWORD *)(v8 - 8);
    v12 = *(_QWORD *)(v8 + 16 * v11);
    if (v12 != -1)
    {
      if (!v12)
        goto LABEL_19;
      if (v12 == v7)
        break;
    }
  }
  this = *(uint64_t **)(v8 + 16 * v11 + 8);
  if (!this)
    goto LABEL_19;
  return WebCore::RadioButtonGroup::members((WebCore::RadioButtonGroup *)this, a2, v13);
}

WTF::StringImpl *WebCore::HTMLInputElement::checkedRadioButtonForGroup@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WebCore::RadioButtonGroups *v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  if ((*((_WORD *)this + 115) & 1) != 0)
  {
    *((_DWORD *)this + 6) += 2;
    *a2 = this;
    return this;
  }
  if (*((_QWORD *)this + 26))
    v3 = (WTF::StringImpl **)((char *)this + 208);
  else
    v3 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
  if (*(_DWORD *)(*((_QWORD *)this + 30) + 12) != 4096)
    goto LABEL_6;
  v6 = *((_QWORD *)this + 15);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 8);
    if (v8)
    {
      v7 = (WebCore::RadioButtonGroups *)(v8 + 160);
      return WebCore::RadioButtonGroups::checkedButtonForGroup(v7, v3, a2);
    }
  }
  if ((*((_BYTE *)this + 22) & 0x18) != 0)
  {
    v7 = (WebCore::RadioButtonGroups *)WebCore::TreeScope::radioButtonGroups(*((WebCore::TreeScope **)this + 5));
    return WebCore::RadioButtonGroups::checkedButtonForGroup(v7, v3, a2);
  }
LABEL_6:
  if (*v3 && *((_DWORD *)*v3 + 1))
  {
    *a2 = 0;
    if ((*((_BYTE *)this + 22) & 0x18) != 0)
    {
      v4 = **((_QWORD **)this + 5);
    }
    else
    {
      do
      {
        v4 = (uint64_t)this;
        this = (WTF::StringImpl *)*((_QWORD *)this + 4);
      }
      while (this);
    }
    v5 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v5 = off_1E33C1A20;
    *((_QWORD *)v5 + 1) = a2;
    v9 = v5;
    WebCore::RadioInputType::forEachButtonInDetachedGroup(v4, v3, (const WTF::StringImpl *)&v9);
    this = v9;
    v9 = 0;
    if (this)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebCore::HTMLInputElement::height(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 872))(*((_QWORD *)this + 30));
}

uint64_t WebCore::HTMLInputElement::width(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 880))(*((_QWORD *)this + 30));
}

WTF::StringImpl *WebCore::HTMLInputElement::setHeight(WebCore::HTMLInputElement *this, int a2)
{
  return WebCore::Element::setUnsignedIntegralAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::heightAttr, a2);
}

WTF::StringImpl *WebCore::HTMLInputElement::setWidth(WebCore::HTMLInputElement *this, int a2)
{
  return WebCore::Element::setUnsignedIntegralAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::widthAttr, a2);
}

_QWORD *WebCore::ListAttributeTargetObserver::idTargetChanged(WebCore::ListAttributeTargetObserver *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *result;
  _QWORD *v8;

  v3 = WebCore::Document::eventLoop(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 40) + 8), a2);
  v4 = (unsigned int *)*((_QWORD *)this + 4);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E33C1A48;
  v6[1] = v4;
  v8 = v6;
  WebCore::EventLoopTaskGroup::queueTask(v3, 0, (uint64_t *)&v8);
  result = v8;
  v8 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

WTF::StringImpl *WebCore::HTMLInputElement::setRangeText@<X0>(WTF::StringImpl *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 30) + 824))(*((_QWORD **)a1 + 30));
  if ((result & 1) != 0)
    return WebCore::HTMLTextFormControlElement::setRangeText(a1, a2, a3, a4, a5, a6, a7);
  *(_BYTE *)a7 = 8;
  *(_QWORD *)(a7 + 8) = 0;
  *(_BYTE *)(a7 + 16) = 1;
  return result;
}

uint64_t WebCore::HTMLInputElement::setSelectionStartForBindings@<X0>(WebCore::HTMLTextFormControlElement *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v5;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  _BOOL4 v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = (_DWORD *)*((_QWORD *)a1 + 30);
  if ((v5[3] & 0x2A8C20) != 0)
  {
    if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 824))(v5) & 1) != 0)
    {
      if ((a2 & 0xFF00000000) != 0)
        v7 = a2;
      else
        v7 = 0;
      result = WebCore::HTMLTextFormControlElement::setSelectionStart(a1, v7);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return result;
    }
    v5 = (_DWORD *)*((_QWORD *)a1 + 30);
  }
  v9 = *(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 + 4);
    *(_DWORD *)v9 += 2;
    if (v10 < 0)
    {
LABEL_22:
      v16 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    v10 = 0;
  }
  v11 = __OFADD__(v10, 30);
  v12 = v10 + 30;
  if (v11 || __OFADD__(v12, 27))
    goto LABEL_22;
  v13 = !v9 || (*(_BYTE *)(v9 + 16) & 4) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v12 + 27), v13, (int8x16_t *)"The input element's type ('", 0x1Bu, v9, (int8x16_t *)"') does not support selection.", 0x1Eu, &v16);
  v15 = v16;
  if (!v16)
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x195BF478CLL);
  }
  *(_BYTE *)a3 = 8;
  a3[1] = v15;
  *((_BYTE *)a3 + 16) = 1;
  v16 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)v9, v14);
    else
      *(_DWORD *)v9 -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLInputElement::setSelectionEndForBindings@<X0>(WebCore::HTMLTextFormControlElement *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v5;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  _BOOL4 v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = (_DWORD *)*((_QWORD *)a1 + 30);
  if ((v5[3] & 0x2A8C20) != 0)
  {
    if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 824))(v5) & 1) != 0)
    {
      if ((a2 & 0xFF00000000) != 0)
        v7 = a2;
      else
        v7 = 0;
      result = WebCore::HTMLTextFormControlElement::setSelectionEnd(a1, v7);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return result;
    }
    v5 = (_DWORD *)*((_QWORD *)a1 + 30);
  }
  v9 = *(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 + 4);
    *(_DWORD *)v9 += 2;
    if (v10 < 0)
    {
LABEL_22:
      v16 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    v10 = 0;
  }
  v11 = __OFADD__(v10, 30);
  v12 = v10 + 30;
  if (v11 || __OFADD__(v12, 27))
    goto LABEL_22;
  v13 = !v9 || (*(_BYTE *)(v9 + 16) & 4) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v12 + 27), v13, (int8x16_t *)"The input element's type ('", 0x1Bu, v9, (int8x16_t *)"') does not support selection.", 0x1Eu, &v16);
  v15 = v16;
  if (!v16)
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x195BF48CCLL);
  }
  *(_BYTE *)a3 = 8;
  a3[1] = v15;
  *((_BYTE *)a3 + 16) = 1;
  v16 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)v9, v14);
    else
      *(_DWORD *)v9 -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLInputElement::setSelectionDirectionForBindings@<X0>(WebCore::HTMLInputElement *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v5;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  int v13;
  _BOOL4 v14;
  uint64_t result;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[2];

  v5 = (_DWORD *)*((_QWORD *)this + 30);
  if ((v5[3] & 0x2A8C20) != 0)
  {
    if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 824))(v5) & 1) != 0)
    {
      v7 = WebCore::HTMLTextFormControlElement::selectionStart(this);
      v8 = WebCore::HTMLTextFormControlElement::selectionEnd(this);
      v19[0] = 0;
      v19[1] = 0;
      if ((MEMORY[0x19AEA53F4](*(_QWORD *)a2, "forward", 7) & 1) != 0)
      {
        v9 = 1;
      }
      else if (MEMORY[0x19AEA53F4](*(_QWORD *)a2, "backward", 8))
      {
        v9 = 2;
      }
      else
      {
        v9 = 0;
      }
      result = WebCore::HTMLTextFormControlElement::setSelectionRange((uint64_t)this, v7, v8, v9, 3, v19, 0);
      if ((_DWORD)result)
        result = WebCore::HTMLTextFormControlElement::scheduleSelectEvent(this);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return result;
    }
    v5 = (_DWORD *)*((_QWORD *)this + 30);
  }
  v10 = *(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
  if (v10)
  {
    v11 = *(_DWORD *)(v10 + 4);
    *(_DWORD *)v10 += 2;
    if (v11 < 0)
    {
LABEL_26:
      v18 = 0;
      goto LABEL_27;
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = __OFADD__(v11, 30);
  v13 = v11 + 30;
  if (v12 || __OFADD__(v13, 27))
    goto LABEL_26;
  v14 = !v10 || (*(_BYTE *)(v10 + 16) & 4) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v13 + 27), v14, (int8x16_t *)"The input element's type ('", 0x1Bu, v10, (int8x16_t *)"') does not support selection.", 0x1Eu, &v18);
  v17 = v18;
  if (!v18)
  {
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x195BF4A88);
  }
  *(_BYTE *)a3 = 8;
  a3[1] = v17;
  *((_BYTE *)a3 + 16) = 1;
  v18 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)v10, v16);
    else
      *(_DWORD *)v10 -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLInputElement::setSelectionRangeForBindings@<X0>(WebCore::HTMLInputElement *this@<X0>, const WTF::String *a2@<X3>, unsigned int a3@<W1>, unsigned int a4@<W2>, _QWORD *a5@<X8>)
{
  _DWORD *v7;
  int v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  _BOOL4 v16;
  uint64_t result;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20[2];
  uint64_t v21;

  v7 = (_DWORD *)*((_QWORD *)this + 30);
  if ((v7[3] & 0x2A8C20) != 0)
  {
    if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 824))(v7) & 1) != 0)
    {
      v20[0] = 0;
      v20[1] = 0;
      if ((MEMORY[0x19AEA53F4](*(_QWORD *)a2, "forward", 7) & 1) != 0)
      {
        v11 = 1;
      }
      else if (MEMORY[0x19AEA53F4](*(_QWORD *)a2, "backward", 8))
      {
        v11 = 2;
      }
      else
      {
        v11 = 0;
      }
      result = WebCore::HTMLTextFormControlElement::setSelectionRange((uint64_t)this, a3, a4, v11, 3, v20, 1);
      if ((_DWORD)result)
        result = WebCore::HTMLTextFormControlElement::scheduleSelectEvent(this);
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      return result;
    }
    v7 = (_DWORD *)*((_QWORD *)this + 30);
  }
  v12 = *(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
  if (v12)
  {
    v13 = *(_DWORD *)(v12 + 4);
    *(_DWORD *)v12 += 2;
    if (v13 < 0)
    {
LABEL_26:
      v21 = 0;
      goto LABEL_27;
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = __OFADD__(v13, 30);
  v15 = v13 + 30;
  if (v14 || __OFADD__(v15, 27))
    goto LABEL_26;
  v16 = !v12 || (*(_BYTE *)(v12 + 16) & 4) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v15 + 27), v16, (int8x16_t *)"The input element's type ('", 0x1Bu, v12, (int8x16_t *)"') does not support selection.", 0x1Eu, &v21);
  v19 = v21;
  if (!v21)
  {
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x195BF4C34);
  }
  *(_BYTE *)a5 = 8;
  a5[1] = v19;
  *((_BYTE *)a5 + 16) = 1;
  v21 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)v12, v18);
    else
      *(_DWORD *)v12 -= 2;
  }
  return result;
}

void WebCore::HTMLInputElement::createInnerTextStyle(WebCore::HTMLInputElement *this@<X0>, const WebCore::RenderStyle *a2@<X1>, const WTF::StringImpl *a3@<X2>, WebCore::RenderStyle *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::StyleRareInheritedData *v13;
  int v14;
  int v15;
  void *v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::StyleRareInheritedData *v22;
  WebCore::StyleRareInheritedData *v23;
  int v24;
  WTF *v25;
  void *v26;
  WTF *v27;
  void *v28;
  void *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  WebCore::StyleRareInheritedData *v33;

  {
    WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
  }
  *(_DWORD *)a4 = 0;
  v7 = qword_1ECE913C0;
  ++*(_DWORD *)qword_1ECE913C0;
  v8 = qword_1ECE913C8;
  v9 = (_DWORD *)qword_1ECE913D0;
  *((_QWORD *)a4 + 1) = v7;
  *((_QWORD *)a4 + 2) = v8;
  ++*v9;
  *((_QWORD *)a4 + 3) = v9;
  v10 = qword_1ECE913D8;
  ++*(_DWORD *)qword_1ECE913D8;
  v11 = qword_1ECE913E0;
  *((_QWORD *)a4 + 4) = v10;
  *((_QWORD *)a4 + 5) = v11;
  *((_QWORD *)a4 + 6) = 0;
  v12 = qword_1ECE913F0;
  ++*(_DWORD *)qword_1ECE913F0;
  *((_QWORD *)a4 + 7) = v12;
  WebCore::RenderStyle::inheritFrom(a4, a2, a3);
  WebCore::HTMLTextFormControlElement::adjustInnerTextStyle(this, a2, a4);
  *((_DWORD *)a4 + 10) = *((_DWORD *)a4 + 10) & 0x87FFFFFF | 0x48000000;
  v13 = (WebCore::StyleRareInheritedData *)*((_QWORD *)a4 + 3);
  v14 = *((_DWORD *)v13 + 57);
  if ((v14 & 0x600) != 0)
  {
    if (*(_DWORD *)v13 == 1)
    {
LABEL_19:
      *((_DWORD *)v13 + 57) = v14 & 0xFFFFF9FF;
      goto LABEL_4;
    }
    WebCore::StyleRareInheritedData::copy(v13, &v33);
    v22 = v33;
    v33 = 0;
    v23 = (WebCore::StyleRareInheritedData *)*((_QWORD *)a4 + 3);
    *((_QWORD *)a4 + 3) = v22;
    if (v23)
    {
      v24 = *(_DWORD *)v23 - 1;
      if (*(_DWORD *)v23 == 1)
      {
        WebCore::StyleRareInheritedData::~StyleRareInheritedData(v23);
        WTF::fastFree(v25, v26);
        v23 = v33;
        v33 = 0;
        if (!v23)
          goto LABEL_23;
        v24 = *(_DWORD *)v23 - 1;
        if (*(_DWORD *)v23 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v23);
          WTF::fastFree(v27, v28);
          goto LABEL_23;
        }
      }
      *(_DWORD *)v23 = v24;
    }
LABEL_23:
    v13 = (WebCore::StyleRareInheritedData *)*((_QWORD *)a4 + 3);
    v14 = *((_DWORD *)v13 + 57);
    goto LABEL_19;
  }
LABEL_4:
  *((_QWORD *)a4 + 2) = *((_QWORD *)a4 + 2) & 0xFFFFFFFFFFFF03FFLL | 0x2400;
  if ((*(_DWORD *)(*((_QWORD *)this + 30) + 12) & 0x2A8C20) == 0
    || *(WebCore::HTMLInputElement **)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1248) == this)
  {
    v15 = 0;
  }
  else
  {
    v15 = (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 150) >> 5) & 1;
  }
  WebCore::RenderStyle::setTextOverflow((uint64_t)a4, v15);
  *((_QWORD *)a4 + 2) = *((_QWORD *)a4 + 2) & 0xFFFFFFFFFFFFFC00 | 0x21;
  if ((*((_WORD *)this + 115) & 0x3800) == 0x1800
    && (*((_BYTE *)this + 160) & 0x18) == 0
    && (!(*(unsigned int (**)(char *))(*((_QWORD *)this + 14) + 288))((char *)this + 112)
     || (*((_BYTE *)this + 160) & 0x20) == 0))
  {
    *((_QWORD *)a4 + 2) = *((_QWORD *)a4 + 2) & 0xFFFFFFFFFFFFFC00 | 0x63;
    LODWORD(v33) = 100;
    WORD2(v33) = 3;
    BYTE6(v33) = 0;
    WebCore::RenderStyle::setLogicalMaxWidth((uint64_t)a4, (WebCore::Length *)&v33);
    if (BYTE4(v33) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v33);
    }
    v33 = (WebCore::StyleRareInheritedData *)0x1104000000000099;
    WebCore::RenderStyle::setColor(a4, (const WebCore::Color *)&v33);
    if (((unint64_t)v33 & 0x8000000000000) != 0)
    {
      v30 = (unsigned int *)((unint64_t)v33 & 0xFFFFFFFFFFFFLL);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        atomic_store(1u, v30);
        WTF::fastFree((WTF *)v30, v29);
      }
    }
    WebCore::RenderStyle::setTextOverflow((uint64_t)a4, 0);
    WebCore::autoFillStrongPasswordMaskImage((WebCore *)&v33);
    WebCore::RenderStyle::setMaskImage((uint64_t)a4, (uint64_t *)&v33);
    if (v33)
    {
      if (*((_DWORD *)v33 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v33 + 8))();
      else
        --*((_DWORD *)v33 + 2);
    }
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 8) + 68) & 2) != 0)
      WebCore::RenderStyle::setUsedZIndex(a4, 0);
  }
  v17 = (float)*((int *)WebCore::RenderStyle::metricsOfPrimaryFont(a4, v16) + 14);
  if (WebCore::RenderStyle::computedLineHeight(a2, v18) < v17)
    goto LABEL_9;
  if ((*(_DWORD *)(*((_QWORD *)this + 30) + 12) & 0x2A8820) != 0)
  {
    v19 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
    v20 = v19 + 4;
    v21 = v19 + 12;
    if (((*((_DWORD *)a2 + 11) >> 13) & 6u) - 2 >= 4)
      v20 = v21;
    if (*(_BYTE *)(v20 + 4) && (*((_WORD *)this + 115) & 0x3800) != 0x1800)
    {
LABEL_9:
      LODWORD(v33) = -1027080192;
      WORD2(v33) = 3;
      BYTE6(v33) = 1;
      WebCore::RenderStyle::setLineHeight((uint64_t)a4, (WebCore::Length *)&v33);
      if (BYTE4(v33) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v33);
      }
    }
  }
}

_DWORD *WebCore::RenderStyle::setLogicalMaxWidth(uint64_t a1, WebCore::Length *a2)
{
  if (((*(_DWORD *)(a1 + 44) >> 13) & 6u) - 2 < 4)
    return WebCore::RenderStyle::setMaxHeight(a1, a2);
  else
    return WebCore::RenderStyle::setMaxWidth(a1, a2);
}

_DWORD *WebCore::RenderStyle::setMaskImage(uint64_t a1, uint64_t *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  WTF::StringImpl *v6;
  WebCore::StyleMiscNonInheritedData *v7;
  WebCore::StyleMiscNonInheritedData *v8;
  int v9;
  const WebCore::FillLayer *v10;
  uint64_t v11;
  WebCore::FillLayer *v12;
  uint64_t v13;
  _DWORD *result;
  WTF *v15;
  void *v16;
  WTF *v17;
  void *v18;
  WTF::StringImpl *v19;
  WTF *v20;
  void *v21;
  WebCore::StyleMiscNonInheritedData *v22;

  v3 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)(a1 + 8));
  v4 = *((_QWORD *)v3 + 4);
  if (*(_DWORD *)v4 != 1)
  {
    v5 = v3;
    WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v3 + 4), (uint64_t *)&v22);
    v7 = v22;
    v22 = 0;
    v8 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
    *((_QWORD *)v5 + 4) = v7;
    if (v8)
    {
      v9 = *(_DWORD *)v8 - 1;
      if (*(_DWORD *)v8 == 1)
      {
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v8, v6);
        WTF::fastFree(v17, v18);
        v8 = v22;
        v22 = 0;
        if (!v8)
          goto LABEL_5;
        v9 = *(_DWORD *)v8 - 1;
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v8, v19);
          WTF::fastFree(v20, v21);
          goto LABEL_5;
        }
      }
      *(_DWORD *)v8 = v9;
    }
LABEL_5:
    v4 = *((_QWORD *)v5 + 4);
  }
  v10 = *(const WebCore::FillLayer **)(v4 + 48);
  if (*(_DWORD *)v10 == 1)
  {
    v11 = *(_QWORD *)(v4 + 48);
  }
  else
  {
    v11 = WTF::fastMalloc((WTF *)0x40);
    WebCore::FillLayer::FillLayer((WebCore::FillLayer *)v11, v10);
    v12 = *(WebCore::FillLayer **)(v4 + 48);
    *(_QWORD *)(v4 + 48) = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        WebCore::FillLayer::~FillLayer(v12);
        WTF::fastFree(v15, v16);
        v11 = *(_QWORD *)(v4 + 48);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
  }
  v13 = *a2;
  *a2 = 0;
  result = *(_DWORD **)(v11 + 16);
  *(_QWORD *)(v11 + 16) = v13;
  if (result)
  {
    if (result[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  *(_DWORD *)(v11 + 60) |= 0x80u;
  return result;
}

uint64_t WebCore::autoFillStrongPasswordMaskImage(WebCore *this)
{
  uint64_t v2;
  int v3;
  int *v4;
  int v5;
  int *v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  int *v11;
  _BYTE v12[25];
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD v16[4];
  _QWORD *v17;
  uint64_t v18;
  int v19;
  char v20;
  unsigned int v21;
  __int16 v22;
  char v23;
  unsigned __int8 v24;
  uint64_t v25;
  int v26;
  char v27;
  unsigned int v28;
  __int16 v29;
  char v30;
  char v31;
  _BYTE v32[8];
  _OWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v12[0] = 12;
  *(_QWORD *)&v12[8] = 0x4056800000000000;
  *(_DWORD *)&v12[16] = 1;
  v12[24] = 0;
  v18 = 0x11040000000000FFLL;
  v19 = 0;
  v20 = 1;
  v22 = 3;
  v23 = 0;
  v21 = 50;
  v24 = 1;
  v25 = 0x1104000000000000;
  v26 = 0;
  v27 = 1;
  v29 = 3;
  v30 = 0;
  v28 = 100;
  v31 = 1;
  v2 = WTF::fastMalloc((WTF *)0x50);
  v14 = 2;
  v13 = v2;
  *(_BYTE *)v2 = 0;
  *(_BYTE *)(v2 + 16) = 0;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_(&v18, v2);
  *(_BYTE *)(v2 + 16) = 1;
  v3 = v24;
  *(_BYTE *)(v2 + 24) = 0;
  v4 = (int *)(v2 + 24);
  *(_BYTE *)(v2 + 32) = 0;
  if (v3)
  {
    *(_DWORD *)(v2 + 24) = 0;
    *(_BYTE *)(v2 + 30) = 0;
    v5 = v22;
    *(_WORD *)(v2 + 28) = v22;
    if ((v5 - 2) >= 9)
    {
      if (v5 == 11)
      {
        *v4 = v21;
        WebCore::Length::ref(v4);
      }
    }
    else
    {
      *(_BYTE *)(v2 + 30) = v23;
      *v4 = v21;
    }
    *(_BYTE *)(v2 + 32) = 1;
  }
  *(_BYTE *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 56) = 0;
  if (v27)
  {
    v16[0] = &v15;
    v16[1] = &v15;
    v16[2] = &v15;
    v16[3] = &v15;
    if (v26 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_36;
    }
    v17 = v16;
    ((void (*)(_QWORD **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v26])(&v17, &v25);
    *(_BYTE *)(v2 + 56) = 1;
  }
  *(_BYTE *)(v2 + 64) = 0;
  v6 = (int *)(v2 + 64);
  *(_BYTE *)(v2 + 72) = 0;
  if (v31)
  {
    *(_DWORD *)(v2 + 64) = 0;
    *(_BYTE *)(v2 + 70) = 0;
    v7 = v29;
    *(_WORD *)(v2 + 68) = v29;
    if ((v7 - 2) >= 9)
    {
      if (v7 == 11)
      {
        *v6 = v28;
        WebCore::Length::ref(v6);
      }
    }
    else
    {
      *(_BYTE *)(v2 + 70) = v30;
      *v6 = v28;
    }
    *(_BYTE *)(v2 + 72) = 1;
  }
  v33[0] = *(_OWORD *)v12;
  *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)&v12[9];
  v13 = 0;
  v14 = 0;
  v34 = v2;
  v35 = 0x200000002;
  v36 = 0;
  v8 = WTF::fastMalloc((WTF *)0xC0);
  *(_QWORD *)this = WebCore::StyleGradientImage::StyleGradientImage(v8, (uint64_t)v32, 0x600000000, 1);
  if (v36 != -1)
    ((void (*)(_QWORD *, _OWORD *))off_1E33C18E8[v36])(v16, v33);
  v36 = -1;
  result = WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v9);
  if (v31 && v29 == 11)
  {
    v11 = &dword_1ECE90000;
    {
LABEL_31:
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v28);
      goto LABEL_20;
    }
LABEL_36:
    WebCore::calculationValues(void)::map = 1;
    qword_1ECE90C98 = 0;
    *((_BYTE *)v11 + 3232) = 1;
    goto LABEL_31;
  }
LABEL_20:
  if (v27)
  {
    if (v26 != -1)
      result = ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v26])(v16, &v25);
    v26 = -1;
  }
  if (v24 && v22 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v21);
  }
  if (v20)
  {
    if (v19 != -1)
      return ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v19])(v16, &v18);
  }
  return result;
}

uint64_t WebCore::HTMLInputElement::resultForDialogSubmit(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 928))(*((_QWORD *)this + 30));
}

WTF *WebCore::HTMLInputElement::placeholder@<X0>(WTF *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int **v8;
  uint64_t v9;
  int *v10;
  int v11;
  unint64_t v12;
  int v13;
  _WORD *v14;
  uint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t v19;
  int8x16_t v20;
  int8x16_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  int v24;
  unint64_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t *v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  int v35;
  unint64_t v37;
  uint64_t v38;
  unsigned __int16 *v39;
  unsigned int v40;
  size_t v42;
  unsigned __int8 *v43;
  unsigned int v44;
  int *v46;
  WTF *v47;
  uint64_t v48;
  unsigned __int16 *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v53;
  WTF *v55;
  unsigned __int8 *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v60;
  void *v62;
  int *v63;
  WTF *v64;

  v4 = *((_QWORD *)this + 13);
  if (v4
    && ((v5 = *(_DWORD *)(v4 + 4), (v5 & 1) != 0)
      ? (v6 = *(_QWORD *)(v4 + 40), LODWORD(v7) = *(_DWORD *)(v4 + 52))
      : (v6 = v4 + 32, LODWORD(v7) = v5 >> 5),
        (_DWORD)v7))
  {
    v7 = v7;
    v8 = (int **)(v6 + 8);
    while (1)
    {
      v9 = (uint64_t)*(v8 - 1);
      if (v9 == WebCore::HTMLNames::placeholderAttr
        || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::placeholderAttr + 24)
        && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::placeholderAttr + 32))
      {
        break;
      }
      v8 += 2;
      if (!--v7)
      {
        v8 = (int **)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v8 = (int **)MEMORY[0x1E0CBF2F8];
  }
  v10 = *v8;
  if (!*v8)
  {
LABEL_19:
    *a3 = v10;
    return this;
  }
  v11 = *v10;
  v12 = v10[1];
  *v10 += 2;
  v13 = v10[4];
  v14 = (_WORD *)*((_QWORD *)v10 + 1);
  if ((v13 & 4) != 0)
  {
    if (v12 >= 0x10)
    {
      v15 = 0;
      v16 = 0uLL;
      v17.i64[0] = 0xD0D0D0D0D0D0D0DLL;
      v17.i64[1] = 0xD0D0D0D0D0D0D0DLL;
      v18.i64[0] = 0xA0A0A0A0A0A0A0ALL;
      v18.i64[1] = 0xA0A0A0A0A0A0A0ALL;
      do
      {
        v16 = vorrq_s8(v16, vorrq_s8(vceqq_s8(*(int8x16_t *)&v14[v15], v17), vceqq_s8(*(int8x16_t *)&v14[v15], v18)));
        v19 = v15 * 2 + 31;
        v15 += 8;
      }
      while (v19 < v12);
      if ((v12 & 0xFFFFFFF0) < v12)
      {
        v20.i64[0] = 0xD0D0D0D0D0D0D0DLL;
        v20.i64[1] = 0xD0D0D0D0D0D0D0DLL;
        v21.i64[0] = 0xA0A0A0A0A0A0A0ALL;
        v21.i64[1] = 0xA0A0A0A0A0A0A0ALL;
        v16 = vorrq_s8(v16, vorrq_s8(vceqq_s8(*(int8x16_t *)((char *)v14 + v12 - 16), v20), vceqq_s8(*(int8x16_t *)((char *)v14 + v12 - 16), v21)));
      }
      v16.i8[0] = vmaxvq_u8((uint8x16_t)v16);
      goto LABEL_18;
    }
    if (!(_DWORD)v12)
      goto LABEL_19;
    v22 = v12;
    v23 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
    while (1)
    {
      v24 = *v23;
      if (v24 == 10 || v24 == 13)
        break;
      ++v23;
      if (!--v22)
        goto LABEL_19;
    }
  }
  else
  {
    if (v12 >= 8)
    {
      v16 = 0uLL;
      v26 = 7;
      v27.i64[0] = 0xD000D000D000DLL;
      v27.i64[1] = 0xD000D000D000DLL;
      v28.i64[0] = 0xA000A000A000ALL;
      v28.i64[1] = 0xA000A000A000ALL;
      v29 = (int16x8_t *)*((_QWORD *)v10 + 1);
      do
      {
        v30 = *v29++;
        v16 = vorrq_s8(v16, vorrq_s8((int8x16_t)vceqq_s16(v30, v27), (int8x16_t)vceqq_s16(v30, v28)));
        v26 += 8;
      }
      while (v26 < v12);
      if ((v12 & 0xFFFFFFF8) < v12)
      {
        v31.i64[0] = 0xD000D000D000DLL;
        v31.i64[1] = 0xD000D000D000DLL;
        v32.i64[0] = 0xA000A000A000ALL;
        v32.i64[1] = 0xA000A000A000ALL;
        v16 = vorrq_s8(v16, vorrq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v14[v12 - 8], v31), (int8x16_t)vceqq_s16(*(int16x8_t *)&v14[v12 - 8], v32)));
      }
      v16.i16[0] = vmaxvq_u16((uint16x8_t)v16);
LABEL_18:
      if (!v16.i32[0])
        goto LABEL_19;
      goto LABEL_44;
    }
    if (!(_DWORD)v12)
      goto LABEL_19;
    v33 = 2 * v12;
    v34 = (unsigned __int16 *)*((_QWORD *)v10 + 1);
    while (1)
    {
      v35 = *v34;
      if (v35 == 10 || v35 == 13)
        break;
      ++v34;
      v33 -= 2;
      if (!v33)
        goto LABEL_19;
    }
  }
LABEL_44:
  if ((v13 & 4) == 0)
  {
    v37 = 0;
    v38 = 0;
    v39 = &v14[v12];
    while (1)
    {
      v40 = (unsigned __int16)v14[v37];
      if (v40 <= 0xD && (v40 == 10 || v40 == 13))
        break;
      v38 -= 2;
      ++v37;
      if (-2 * v12 == v38)
        goto LABEL_60;
    }
    this = (WTF *)WTF::fastMalloc((WTF *)(2 * v12));
    v64 = this;
    if (v37 <= v12)
    {
      v47 = this;
      v48 = -2 * v12;
      if ((_DWORD)v37 == 1)
      {
        *(_WORD *)this = *v14;
      }
      else if ((_DWORD)v37)
      {
        memcpy(this, v14, -v38);
      }
      if (v48 != v38)
      {
        v49 = &v14[v38 / 0xFFFFFFFFFFFFFFFELL];
        v50 = v37;
        do
        {
          while (1)
          {
            v51 = *v49;
            if (v51 > 0xD)
              break;
            if (v51 != 13 && v51 != 10)
              break;
            if (++v49 == v39)
              goto LABEL_111;
          }
          if (v49 == v39)
            break;
          while (1)
          {
            v53 = *v49;
            if (v53 <= 0xD && (v53 == 10 || v53 == 13))
              break;
            ++v49;
            *((_WORD *)v47 + v50++) = v53;
            if (v49 == v39)
              goto LABEL_111;
          }
        }
        while (v49 != v39);
      }
LABEL_111:
      WTF::StringImpl::adopt();
      goto LABEL_115;
    }
LABEL_119:
    __break(1u);
    return this;
  }
  v42 = 0;
  v43 = (unsigned __int8 *)v14 + v12;
  do
  {
    v44 = *((unsigned __int8 *)v14 + v42);
    if (v44 <= 0xD && (v44 == 10 || v44 == 13))
    {
      this = (WTF *)WTF::fastMalloc((WTF *)v12);
      v64 = this;
      if (v42 > v12)
        goto LABEL_119;
      v55 = this;
      if ((_DWORD)v42)
      {
        if ((_DWORD)v42 == 1)
          *(_BYTE *)this = *(_BYTE *)v14;
        else
          memcpy(this, v14, v42);
      }
      if (v12 == v42)
      {
LABEL_114:
        WTF::StringImpl::adopt();
LABEL_115:
        this = (WTF *)WTF::fastFree(v64, v62);
        v46 = v63;
        goto LABEL_61;
      }
      v56 = (unsigned __int8 *)v14 + v42;
      v57 = v42;
      while (1)
      {
        while (1)
        {
          v58 = *v56;
          if (v58 <= 0xD && (v58 == 13 || v58 == 10))
            break;
LABEL_100:
          if (v56 != v43)
          {
            while (1)
            {
              v60 = *v56;
              if (v60 <= 0xD && (v60 == 10 || v60 == 13))
                break;
              ++v56;
              *((_BYTE *)v55 + v57++) = v60;
              if (v56 == v43)
                goto LABEL_114;
            }
            if (v56 != v43)
              continue;
          }
          goto LABEL_114;
        }
        if (++v56 == v43)
        {
          v56 = (unsigned __int8 *)v14 + v12;
          goto LABEL_100;
        }
      }
    }
    ++v42;
  }
  while (v12 != v42);
LABEL_60:
  *v10 = v11 + 4;
  v46 = v10;
LABEL_61:
  *a3 = v46;
  if (*v10 == 2)
    return (WTF *)WTF::StringImpl::destroy((WTF::StringImpl *)v10, a2);
  *v10 -= 2;
  return this;
}

uint64_t WebCore::HTMLInputElement::dirAutoUsesValue(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 832))(*((_QWORD *)this + 30));
}

uint64_t WebCore::HTMLLIElement::create@<X0>(WebCore::HTMLLIElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x141C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = (char *)this + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v6 = WebCore::HTMLNames::liTag;
  if (WebCore::HTMLNames::liTag)
    ++*(_DWORD *)WebCore::HTMLNames::liTag;
  *(_QWORD *)(result + 96) = v6;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33C04C8;
  *a2 = result;
  return result;
}

WTF::StringImpl *WebCore::HTMLLIElement::collectPresentationalHintsForAttribute(WebCore::HTMLLIElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  WTF::StringImpl *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  _BYTE *v19;
  size_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32[3];

  v32[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a2 == WebCore::HTMLNames::typeAttr)
  {
    if (MEMORY[0x19AEA53F4](*(_QWORD *)a3, "a", 1))
    {
      v8 = 0x10C8u;
LABEL_31:
      WebCore::staticCSSValuePool[v8] += 2;
      v32[0] = (WTF::StringImpl *)&WebCore::staticCSSValuePool[v8];
      WebCore::MutableStyleProperties::setProperty(a4, 157, (_DWORD **)v32, 0);
      result = v32[0];
      v32[0] = 0;
      if (!result)
        return result;
      v22 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v23);
      goto LABEL_33;
    }
    if (MEMORY[0x19AEA53F4](*(_QWORD *)a3, "A", 1))
    {
      v8 = 0x10D0u;
      goto LABEL_31;
    }
    if (MEMORY[0x19AEA53F4](*(_QWORD *)a3, "i", 1))
    {
      v8 = 0x10BCu;
      goto LABEL_31;
    }
    if (MEMORY[0x19AEA53F4](*(_QWORD *)a3, "I", 1))
    {
      v8 = 0x10C0u;
      goto LABEL_31;
    }
    if (MEMORY[0x19AEA53F4](*(_QWORD *)a3, "1", 1))
    {
      v8 = 0x105Cu;
      goto LABEL_31;
    }
    WTF::AtomString::convertToASCIILowercase(a3);
    if ((MEMORY[0x19AEA53F4](v31, "disc", 4) & 1) != 0)
    {
      v24 = 272;
    }
    else if ((MEMORY[0x19AEA53F4](v31, "circle", 6) & 1) != 0)
    {
      v24 = 273;
    }
    else if ((MEMORY[0x19AEA53F4](v31, "round", 5) & 1) != 0)
    {
      v24 = 596;
    }
    else if ((MEMORY[0x19AEA53F4](v31, "square", 6) & 1) != 0)
    {
      v24 = 274;
    }
    else
    {
      if (!MEMORY[0x19AEA53F4](v31, "none", 4))
        goto LABEL_51;
      v24 = 6;
    }
    v25 = &WebCore::staticCSSValuePool[4 * v24];
    v25[3088] += 2;
    v32[0] = (WTF::StringImpl *)(v25 + 3088);
    WebCore::MutableStyleProperties::setProperty(a4, 157, (_DWORD **)v32, 0);
    v26 = v32[0];
    v32[0] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v21);
      else
        *(_DWORD *)v26 -= 2;
    }
LABEL_51:
    result = v31;
    v31 = 0;
    if (result)
    {
LABEL_21:
      v22 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
LABEL_33:
      *(_DWORD *)result = v22;
      return result;
    }
    return result;
  }
  if (*(_QWORD *)a2 != WebCore::HTMLNames::valueAttr)
    return WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
  v9 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v10 = *(uint64_t **)(v9 + 8);
    v11 = *(unsigned int *)(v9 + 4) | ((unint64_t)((*(_DWORD *)(v9 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v10 = 0;
    v11 = 0x100000000;
  }
  result = (WTF::StringImpl *)WebCore::parseHTMLInteger(v10, v11, (uint64_t *)&v31);
  if (!HIDWORD(v31))
  {
    v12 = v31;
    if ((v31 & 0x80000000) != 0)
    {
      v29 = -(int)v31;
      v13 = 1;
      do
      {
        ++v13;
        v30 = v29 >= 0xA;
        v29 /= 0xAu;
      }
      while (v30);
    }
    else
    {
      v13 = 0;
      v14 = v31;
      do
      {
        ++v13;
        v15 = v14 > 9;
        v14 /= 0xAu;
      }
      while (v15);
    }
    if (v13 < 0
      || (v16 = (v13 + 10), __OFADD__(v13, 10))
      || (result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v16 + 20)), (v17 = v32[0]) == 0))
    {
      __break(0xC471u);
      return result;
    }
    *(_DWORD *)v32[0] = 2;
    *((_DWORD *)v17 + 1) = v16;
    *(_QWORD *)((char *)v17 + 20) = *(_QWORD *)"list-item ";
    *((_QWORD *)v17 + 1) = (char *)v17 + 20;
    *((_DWORD *)v17 + 4) = 4;
    *((_WORD *)v17 + 14) = 8301;
    v18 = 0;
    if ((v12 & 0x80000000) != 0)
    {
      v27 = -v12;
      do
      {
        *((_BYTE *)&v32[1] + v18-- + 4) = (v27 % 0xA) | 0x30;
        v15 = v27 > 9;
        v27 /= 0xAu;
      }
      while (v15);
      v28 = v18 + 12;
      v19 = (char *)&v32[1] + v18 + 4;
      *v19 = 45;
      if (v18 + 14 <= 14)
      {
        if (v28 <= 12)
          v28 = 12;
        v20 = v28 - v18 - 11;
        goto LABEL_19;
      }
    }
    else
    {
      do
      {
        *((_BYTE *)&v32[1] + v18-- + 4) = (v12 % 0xA) | 0x30;
        v15 = v12 > 9;
        v12 /= 0xAu;
      }
      while (v15);
      if (v18 + 14 <= 13)
      {
        v19 = (char *)&v32[1] + v18 + 5;
        v20 = -v18;
LABEL_19:
        memcpy((char *)v17 + 30, v19, v20);
      }
    }
    v32[0] = v17;
    WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 105, (uint64_t)v32);
    result = v32[0];
    v32[0] = 0;
    if (!result)
      return result;
    goto LABEL_21;
  }
  return result;
}

uint64_t WebCore::HTMLLabelElement::create@<X0>(WebCore::HTMLLabelElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = (char *)this + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v6 = WebCore::HTMLNames::labelTag;
  if (WebCore::HTMLNames::labelTag)
    ++*(_DWORD *)WebCore::HTMLNames::labelTag;
  *(_QWORD *)(result + 96) = v6;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33C0ED0;
  *(_BYTE *)(result + 112) = 0;
  *a2 = result;
  return result;
}

uint64_t WebCore::HTMLLabelElement::control@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  const WTF::AtomString *v8;
  uint64_t v9;
  const WebCore::TreeScope *v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int16 v16;
  BOOL v17;
  uint64_t v19;
  __int16 v20;
  BOOL v21;
  BOOL v22;
  _WORD *v23;

  v2 = this;
  v4 = *(_QWORD *)(this + 104);
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    v8 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  v8 = (const WTF::AtomString *)(v6 + 8);
  while (1)
  {
    v9 = *((_QWORD *)v8 - 1);
    if (v9 == WebCore::HTMLNames::forAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::forAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::forAttr + 32))
    {
      break;
    }
    v8 = (const WTF::AtomString *)((char *)v8 + 16);
    if (!--v7)
    {
      v8 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  if (*(_QWORD *)v8)
  {
    if ((*(_BYTE *)(this + 22) & 8) != 0)
    {
      if (*(_DWORD *)(*(_QWORD *)v8 + 4))
      {
        v10 = *(const WebCore::TreeScope **)(this + 40);
        this = *((_QWORD *)v10 + 3);
        if (this)
        {
          this = (uint64_t)WebCore::TreeScopeOrderedMap::getElementById((unsigned int *)this, v8, v10, (uint64_t *)&v23);
          v11 = (uint64_t)v23;
          if (v23)
          {
            v12 = v23[14];
            v13 = (v12 & 0x10) != 0 ? (uint64_t)v23 : 0;
            v14 = 1;
            if ((v12 & 0x10) != 0)
            {
              this = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v23 + 1192))(v23);
              if ((this & 1) != 0)
                v14 = 0;
            }
            if (*(_DWORD *)(v11 + 24) == 2)
            {
              if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
                this = WebCore::Node::removedLastRef((WebCore::Node *)v11);
            }
            else
            {
              *(_DWORD *)(v11 + 24) -= 2;
            }
            if ((v12 & 0x10) != 0 && !v14)
            {
              *(_DWORD *)(v13 + 24) += 2;
              goto LABEL_45;
            }
          }
        }
      }
    }
    goto LABEL_44;
  }
  v15 = *(_QWORD *)(this + 80);
  if (!v15)
  {
LABEL_44:
    v11 = 0;
    goto LABEL_45;
  }
  v16 = *(_WORD *)(v15 + 28);
  if ((v16 & 0x10) != 0)
  {
    v11 = *(_QWORD *)(this + 80);
  }
  else
  {
    do
    {
      if ((v16 & 4) == 0 || (v11 = *(_QWORD *)(v15 + 80)) == 0)
      {
        if (v15 == this)
          goto LABEL_44;
        while (1)
        {
          v11 = *(_QWORD *)(v15 + 56);
          if (v11)
            break;
          v15 = *(_QWORD *)(v15 + 32);
          if (v15)
            v17 = v15 == this;
          else
            v17 = 1;
          if (v17)
            goto LABEL_44;
        }
      }
      v16 = *(_WORD *)(v11 + 28);
      v15 = v11;
    }
    while ((v16 & 0x10) == 0);
  }
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1192))(v11);
  if ((this & 1) == 0)
  {
    do
    {
      v19 = *(_QWORD *)(v11 + 80);
      if (!v19)
      {
        if (v11 == v2)
          goto LABEL_44;
        while (1)
        {
          v19 = *(_QWORD *)(v11 + 56);
          if (v19)
            break;
          v11 = *(_QWORD *)(v11 + 32);
          if (v11)
            v22 = v11 == v2;
          else
            v22 = 1;
          if (v22)
            goto LABEL_44;
        }
      }
      v20 = *(_WORD *)(v19 + 28);
      if ((v20 & 0x10) != 0)
      {
        v11 = v19;
      }
      else
      {
        do
        {
          if ((v20 & 4) == 0 || (v11 = *(_QWORD *)(v19 + 80)) == 0)
          {
            if (v19 == v2)
              goto LABEL_44;
            while (1)
            {
              v11 = *(_QWORD *)(v19 + 56);
              if (v11)
                break;
              v19 = *(_QWORD *)(v19 + 32);
              if (v19)
                v21 = v19 == v2;
              else
                v21 = 1;
              if (v21)
                goto LABEL_44;
            }
          }
          v20 = *(_WORD *)(v11 + 28);
          v19 = v11;
        }
        while ((v20 & 0x10) == 0);
      }
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1192))(v11);
    }
    while (!(_DWORD)this);
  }
  *(_DWORD *)(v11 + 24) += 2;
LABEL_45:
  *a2 = v11;
  return this;
}

uint64_t WebCore::HTMLLabelElement::form(WebCore::HTMLLabelElement *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;

  WebCore::HTMLLabelElement::control((uint64_t)this, &v8);
  v1 = v8;
  if (!v8)
    return 0;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 464))(v8);
  if (!v2)
  {
    v6 = *(_DWORD *)(v1 + 24) - 2;
    if (*(_DWORD *)(v1 + 24) != 2)
    {
      v5 = 0;
LABEL_10:
      *(_DWORD *)(v1 + 24) = v6;
      return v5;
    }
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v3);
    return 0;
  }
  v4 = *(_QWORD *)(v2 + 8);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v6 = *(_DWORD *)(v1 + 24) - 2;
  if (*(_DWORD *)(v1 + 24) != 2)
    goto LABEL_10;
  if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v1, v3);
  return v5;
}

uint64_t WebCore::HTMLLabelElement::setActive(uint64_t this, void *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v5 = this;
  if ((*(_BYTE *)(this + 54) & 2) != 0)
  {
    this = WebCore::Element::isUserActionElementActive((WebCore::Element *)this);
    if ((_DWORD)this == (_DWORD)a2)
      return this;
  }
  else if ((a2 & 1) == 0)
  {
    return this;
  }
  WebCore::Element::setActive(v5, a2, a3);
  this = WebCore::HTMLLabelElement::control(v5, &v8);
  v6 = v8;
  if (v8)
  {
    this = (*(uint64_t (**)(uint64_t, void *, _QWORD))(*(_QWORD *)v8 + 520))(v8, a2, 0);
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::HTMLLabelElement::setHovered(uint64_t this, void *a2, int a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v5 = (unsigned __int8 *)this;
  if ((*(_BYTE *)(this + 54) & 2) != 0)
  {
    this = WebCore::Element::isUserActionElementHovered((WebCore::Element *)this);
    if ((_DWORD)this == (_DWORD)a2)
      return this;
  }
  else if ((a2 & 1) == 0)
  {
    return this;
  }
  WebCore::Element::setHovered(v5, a2, a3);
  this = WebCore::HTMLLabelElement::control((uint64_t)v5, &v8);
  v6 = v8;
  if (v8)
  {
    this = (*(uint64_t (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v8 + 528))(v8, a2, 0, 0x100000103);
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  return this;
}

void WebCore::HTMLLabelElement::defaultEventHandler(WebCore::HTMLLabelElement *this, WebCore::Event *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int16 v32;
  uint64_t v33;

  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
    v5 = WebCore::threadGlobalDataSlow(this);
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  if (*((_QWORD *)a2 + 3) != *(_QWORD *)(v6 + 400) || *((_BYTE *)this + 112))
    goto LABEL_8;
  WebCore::HTMLLabelElement::control((uint64_t)this, &v33);
  v8 = *((_QWORD *)a2 + 6);
  v9 = v33;
  if (!v8)
  {
    if (v33)
      goto LABEL_11;
LABEL_8:
    WebCore::Node::defaultEventHandler(this, (WebCore::Node **)a2);
    return;
  }
  if (!v33)
    goto LABEL_8;
  v13 = *(_QWORD *)(v8 + 16);
  if ((v13 & 0x2000000000000) == 0)
    goto LABEL_11;
  if (v8 == v33)
    goto LABEL_21;
  v14 = *((_QWORD *)a2 + 6);
  do
  {
    if ((*(_WORD *)(v14 + 28) & 0x80) != 0)
    {
      v17 = *(_QWORD *)(v14 + 200);
      if (!v17)
        goto LABEL_35;
      v15 = (uint64_t *)(v17 + 8);
    }
    else
    {
      v15 = (uint64_t *)(v14 + 32);
    }
    v14 = *v15;
  }
  while (v14 != v33 && v14 != 0);
  if (v14)
    goto LABEL_21;
LABEL_35:
  if ((v13 & 0x2000000000000) == 0)
  {
LABEL_11:
    v10 = *((_BYTE *)this + 112);
    *((_BYTE *)this + 112) = 1;
    WebCore::simulateClick((WebCore *)v9, (uint64_t)a2, 0, 1, 1);
    WebCore::Document::updateLayout(*(_QWORD *)(*((_QWORD *)this + 5) + 8), 2u, 0);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 568))(v9))
    {
      v31 = 0x1000000;
      v32 = 0;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 656))(v9, &v31);
    }
    *((_DWORD *)a2 + 5) |= 0x80u;
    *((_BYTE *)this + 112) = v10;
    v33 = 0;
    v12 = 1;
    goto LABEL_14;
  }
  v18 = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v8 + 24) = v18 + 2;
  if ((WebCore::HTMLLabelElement *)v8 == this)
    goto LABEL_37;
  v19 = v8;
  do
  {
    if ((*(_WORD *)(v19 + 28) & 0x80) != 0)
    {
      v22 = *(_QWORD *)(v19 + 200);
      if (!v22)
        goto LABEL_37;
      v20 = (uint64_t *)(v22 + 8);
    }
    else
    {
      v20 = (uint64_t *)(v19 + 32);
    }
    v19 = *v20;
  }
  while ((WebCore::HTMLLabelElement *)v19 != this && v19 != 0);
  if (!v19)
  {
LABEL_37:
    if (v18)
    {
      *(_DWORD *)(v8 + 24) = v18;
    }
    else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v7);
    }
    goto LABEL_11;
  }
  v23 = v8;
  while ((*(_WORD *)(v23 + 28) & 0x10) == 0
       || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 1208))(v23) & 1) == 0)
  {
    v24 = *(_QWORD *)(v23 + 32);
    if (!v24
      || (*(_WORD *)(v24 + 28) & 8) == 0
      || (v25 = *(_QWORD *)(v24 + 72) & 0xFFFFFFFFFFFFLL) == 0
      || (v29 = *(_QWORD *)(v25 + 88)) == 0
      || (v30 = *(_QWORD *)(v29 + 224)) == 0
      || (v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v23)) == 0)
    {
      if ((~*(unsigned __int16 *)(v23 + 28) & 0x408) != 0
        || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 368))(v23))
      {
        v27 = *(_QWORD *)(v23 + 32);
        if (!v27)
          goto LABEL_71;
        v28 = *(_WORD *)(v27 + 28);
        if ((v28 & 0x80) == 0)
        {
          if ((v28 & 8) == 0)
            goto LABEL_71;
          goto LABEL_63;
        }
        v26 = *(_QWORD *)(v27 + 200);
        if (!v26)
          goto LABEL_71;
      }
      else
      {
        v26 = *(_QWORD *)(v23 + 112);
        if (!v26)
          goto LABEL_71;
      }
      v27 = *(_QWORD *)(v26 + 8);
    }
LABEL_63:
    if (v27)
    {
      v23 = v27;
      if ((WebCore::HTMLLabelElement *)v27 != this)
        continue;
    }
LABEL_71:
    v18 = *(_DWORD *)(v8 + 24) - 2;
    goto LABEL_37;
  }
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v7);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
LABEL_21:
  WebCore::Node::defaultEventHandler(this, (WebCore::Node **)a2);
  v12 = 0;
  v33 = 0;
LABEL_14:
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9, v11);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  if (v12)
    goto LABEL_8;
}

uint64_t WebCore::HTMLLabelElement::willRespondToMouseClickEventsWithEditability(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;

  WebCore::HTMLLabelElement::control(a1, &v8);
  v4 = v8;
  if (v8)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 320))(v8, a2) & 1) != 0)
    {
      v6 = 1;
    }
    else if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1) & 1) != 0)
    {
      v6 = 0;
    }
    else
    {
      v6 = WebCore::Node::willRespondToMouseClickEventsWithEditability(a1, a2);
    }
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  else
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1) & 1) == 0)
      return WebCore::Node::willRespondToMouseClickEventsWithEditability(a1, a2);
    return 0;
  }
  return v6;
}

unsigned int *WebCore::HTMLLabelElement::focus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  void *v6;
  uint64_t v7;
  _BYTE v8[2];
  int v9;
  uint64_t v10;

  *(_DWORD *)(a1 + 24) += 2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  if ((!WebCore::Style::Scope::hasPendingSheets(*(WebCore::Style::Scope **)(v4 + 1328)) || *(_BYTE *)(v4 + 3379))
    && (WebCore::Document::updateLayout(v4, 0, 0), WebCore::Element::isFocusable((WebCore::Element *)a1)))
  {
    result = WebCore::Element::focus((unsigned int *)a1, (_DWORD *)a2);
  }
  else
  {
    result = (unsigned int *)WebCore::HTMLLabelElement::control(a1, &v10);
    v7 = v10;
    if (v10)
    {
      v8[0] = 0;
      v8[1] = *(_BYTE *)(a2 + 1);
      v9 = 0;
      result = (unsigned int *)(*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 656))(v10, v8);
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v7, v6);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (*(_DWORD *)(a1 + 24) == 2)
  {
    if ((*(_WORD *)(a1 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)a1, v6);
  }
  else
  {
    *(_DWORD *)(a1 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLLabelElement::accessKeyAction(WebCore::HTMLLabelElement *this, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  __int16 v10;

  WebCore::HTMLLabelElement::control((uint64_t)this, &v8);
  v4 = v8;
  if (v8)
  {
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 592))(v8, a2);
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  else
  {
    if ((*(unsigned int (**)(WebCore::HTMLLabelElement *))(*(_QWORD *)this + 552))(this))
    {
      v10 = 0;
      v9 = 0;
      (*(void (**)(WebCore::HTMLLabelElement *, int *))(*(_QWORD *)this + 656))(this, &v9);
    }
    return WebCore::simulateClick(this, 0, a2, 1, 1);
  }
  return v6;
}

uint64_t WebCore::HTMLLabelElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  WTF::String *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  uint64_t v20;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  WebCore *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  WebCore::ContentSecurityPolicy *v34;
  unsigned int v35;
  int v36;
  unsigned int v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  __int16 v42;
  __int16 v43;
  WebCore::ContentSecurityPolicy *v44;
  WTF *v45;
  WebCore::ContentSecurityPolicy *v47;
  WTF *v48;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  WebCore::ContentSecurityPolicy *v52;
  WTF::StringImpl *v53;
  char v54;
  WTF::StringImpl *v55;

  v9 = WebCore::Element::insertedIntoAncestor((WebCore::Element *)a1, (WebCore::Element *)a2, a3);
  if ((*(_BYTE *)(a1 + 22) & 8) != 0)
  {
    v11 = *(_QWORD *)(a1 + 104);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 + 4);
      if ((v12 & 1) != 0)
      {
        v13 = *(uint64_t **)(v11 + 40);
        LODWORD(v14) = *(_DWORD *)(v11 + 52);
      }
      else
      {
        v13 = (uint64_t *)(v11 + 32);
        LODWORD(v14) = v12 >> 5;
      }
      if ((_DWORD)v14)
      {
        v14 = v14;
        while (1)
        {
          v15 = *v13;
          if (*v13 == WebCore::HTMLNames::nonceAttr
            || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::nonceAttr + 24)
            && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::nonceAttr + 32))
          {
            break;
          }
          v13 += 2;
          if (!--v14)
            goto LABEL_10;
        }
        v33 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        *(_DWORD *)(v33 + 24) += 2;
        v34 = *(WebCore::ContentSecurityPolicy **)(v33 + 208);
        if (!v34)
        {
          (*(void (**)(WebCore::ContentSecurityPolicy **__return_ptr, uint64_t))(*(_QWORD *)(v33 + 192) + 56))(&v52, v33 + 192);
          v34 = v52;
          v52 = 0;
          v44 = *(WebCore::ContentSecurityPolicy **)(v33 + 208);
          *(_QWORD *)(v33 + 208) = v34;
          if (v44)
          {
            WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(v44);
            if (atomic_load((unsigned int *)v45))
            {
              v10 = 0uLL;
              *((_OWORD *)v45 + 13) = 0u;
              *((_OWORD *)v45 + 14) = 0u;
              *((_OWORD *)v45 + 11) = 0u;
              *((_OWORD *)v45 + 12) = 0u;
              *((_OWORD *)v45 + 9) = 0u;
              *((_OWORD *)v45 + 10) = 0u;
              *((_OWORD *)v45 + 7) = 0u;
              *((_OWORD *)v45 + 8) = 0u;
              *((_OWORD *)v45 + 5) = 0u;
              *((_OWORD *)v45 + 6) = 0u;
              *((_OWORD *)v45 + 3) = 0u;
              *((_OWORD *)v45 + 4) = 0u;
              *((_OWORD *)v45 + 1) = 0u;
              *((_OWORD *)v45 + 2) = 0u;
              *(_OWORD *)v45 = 0u;
            }
            else
            {
              WTF::fastFree(v45, v6);
            }
            v47 = v52;
            v52 = 0;
            if (v47)
            {
              WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(v47);
              if (atomic_load((unsigned int *)v48))
              {
                v10 = 0uLL;
                *((_OWORD *)v48 + 13) = 0u;
                *((_OWORD *)v48 + 14) = 0u;
                *((_OWORD *)v48 + 11) = 0u;
                *((_OWORD *)v48 + 12) = 0u;
                *((_OWORD *)v48 + 9) = 0u;
                *((_OWORD *)v48 + 10) = 0u;
                *((_OWORD *)v48 + 7) = 0u;
                *((_OWORD *)v48 + 8) = 0u;
                *((_OWORD *)v48 + 5) = 0u;
                *((_OWORD *)v48 + 6) = 0u;
                *((_OWORD *)v48 + 3) = 0u;
                *((_OWORD *)v48 + 4) = 0u;
                *((_OWORD *)v48 + 1) = 0u;
                *((_OWORD *)v48 + 2) = 0u;
                *(_OWORD *)v48 = 0u;
              }
              else
              {
                WTF::fastFree(v48, v6);
              }
            }
            v34 = *(WebCore::ContentSecurityPolicy **)(v33 + 208);
          }
        }
        do
          v35 = __ldaxr((unsigned int *)v34);
        while (__stlxr(v35 + 1, (unsigned int *)v34));
        v36 = *((unsigned __int8 *)v34 + 232);
        if (!atomic_load((unsigned int *)v34))
        {
          __break(0xC471u);
          JUMPOUT(0x195BF6EECLL);
        }
        do
          v38 = __ldaxr((unsigned int *)v34);
        while (__stlxr(v38 - 1, (unsigned int *)v34));
        if (*(_DWORD *)(v33 + 24) == 2)
        {
          v42 = *(_WORD *)(v33 + 30);
          if ((v42 & 0x400) == 0)
          {
            v43 = *(_WORD *)(v33 + 28);
            if ((v43 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v33, v6);
            }
            else
            {
              if ((v43 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v33 + 160) + 16))(*(_QWORD *)(v33 + 160));
                v42 = *(_WORD *)(v33 + 30);
              }
              *(_WORD *)(v33 + 30) = v42 | 0x400;
              (*(void (**)(uint64_t))(*(_QWORD *)v33 + 72))(v33);
            }
          }
        }
        else
        {
          *(_DWORD *)(v33 + 24) -= 2;
        }
        if (v36)
        {
          if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) != 0
            && WebCore::Element::isNonceable((WebCore::Element *)a1, (unsigned __int8 *)v6, v7, v8, v10))
          {
            v39 = (WTF::StringImpl **)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 216);
          }
          else
          {
            v39 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
          }
          v40 = *v39;
          if (*v39)
          {
            *(_DWORD *)v40 += 2;
            v55 = v40;
            WebCore::Element::setAttribute((WebCore::Element *)a1, (const WebCore::QualifiedName *)&WebCore::HTMLNames::nonceAttr, MEMORY[0x1E0CBF3B8], 0, &v52, v10);
            if (v54 && v53)
            {
              if (*(_DWORD *)v53 == 2)
                WTF::StringImpl::destroy(v53, v41);
              else
                *(_DWORD *)v53 -= 2;
            }
            WebCore::Element::setNonce((_QWORD *)a1, (const WTF::AtomString *)&v55);
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v40 -= 2;
          }
          else
          {
            v55 = 0;
            WebCore::Element::setAttribute((WebCore::Element *)a1, (const WebCore::QualifiedName *)&WebCore::HTMLNames::nonceAttr, MEMORY[0x1E0CBF3B8], 0, &v52, v10);
            if (v54 && v53)
            {
              if (*(_DWORD *)v53 == 2)
                WTF::StringImpl::destroy(v53, v51);
              else
                *(_DWORD *)v53 -= 2;
            }
            WebCore::Element::setNonce((_QWORD *)a1, (const WTF::AtomString *)&v55);
          }
        }
      }
    }
  }
LABEL_10:
  if (a1 && (*(_WORD *)(a1 + 28) & 0x80) != 0)
  {
    v24 = *(_QWORD *)(a1 + 200);
    if (!v24)
      goto LABEL_19;
    v16 = (uint64_t *)(v24 + 8);
  }
  else
  {
    v16 = (uint64_t *)(a1 + 32);
  }
  v17 = *v16;
  if (*v16)
  {
    v18 = *(_WORD *)(v17 + 28);
    if ((v18 & 0x80) != 0)
    {
      v25 = *(_QWORD *)(v17 + 200);
      if (!v25)
        goto LABEL_19;
      v17 = *(_QWORD *)(v25 + 8);
      if (!v17)
        goto LABEL_19;
    }
    else if ((v18 & 8) == 0)
    {
      goto LABEL_19;
    }
    v19 = *(_DWORD *)(v17 + 24);
    *(_DWORD *)(v17 + 24) = v19 + 2;
    if ((*(_BYTE *)(v17 + 79) & 0x40) != 0)
    {
      v26 = *(WebCore **)(*(_QWORD *)(a1 + 96) + 24);
      v27 = v26 == *(WebCore **)(WebCore::HTMLNames::inputTag + 24) ? a1 : 0;
      if (!WebCore::elementAffectsDirectionality(v26, *(const WebCore::HTMLElement **)(a1 + 104))
        && (!v27 || *(_DWORD *)(*(_QWORD *)(v27 + 240) + 12) != 0x20000))
      {
        v28 = *(_QWORD *)(a1 + 72) | 0x4000000000000000;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = *(_QWORD *)(v17 + 72);
        if ((v29 & 0x4000000000000000) != 0)
          v30 = v29 >> 63;
        else
          LODWORD(v30) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 8) + 3360) != 0;
        v31 = (_DWORD)v30 == 0;
        v32 = 0x8000000000000000;
        if (v31)
          v32 = 0;
        *(_QWORD *)(a1 + 72) = v32 & 0x8000000000000000 | v28 & 0x7FFFFFFFFFFFFFFFLL;
      }
    }
    if (v19)
    {
      *(_DWORD *)(v17 + 24) = v19;
    }
    else
    {
      v22 = *(_WORD *)(v17 + 30);
      if ((v22 & 0x400) == 0)
      {
        v23 = *(_WORD *)(v17 + 28);
        if ((v23 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v17, v6);
        }
        else
        {
          if ((v23 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v17 + 160) + 16))(*(_QWORD *)(v17 + 160));
            v22 = *(_WORD *)(v17 + 30);
          }
          *(_WORD *)(v17 + 30) = v22 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 72))(v17);
        }
      }
    }
  }
LABEL_19:
  if ((*(_BYTE *)(a3 + 22) & 0x18) != 0 && (a2 & 0x100) != 0)
  {
    v20 = *(_QWORD *)(a3 + 40);
    if (*(_QWORD *)(v20 + 56))
    {
      v50 = (WTF::StringImpl **)WebCore::Element::attributeWithoutSynchronization(a1, &WebCore::HTMLNames::forAttr);
      WebCore::HTMLLabelElement::updateLabel((WebCore::HTMLLabelElement *)a1, (WebCore::TreeScopeOrderedMap **)v20, MEMORY[0x1E0CBF2F8], v50);
    }
  }
  return v9;
}

void WebCore::HTMLLabelElement::updateLabel(WebCore::HTMLLabelElement *this, WebCore::TreeScopeOrderedMap **a2, const WTF::AtomString *a3, WTF::StringImpl **a4)
{
  uint64_t v5;
  WTF::StringImpl *v6;

  if ((*((_BYTE *)this + 22) & 8) != 0)
  {
    v5 = *(_QWORD *)a3;
    v6 = *a4;
    if (*(WTF::StringImpl **)a3 != *a4)
    {
      if (v5 && *(_DWORD *)(v5 + 4))
      {
        WebCore::TreeScopeOrderedMap::remove(a2[7], a3, this);
        v6 = *a4;
      }
      if (v6)
      {
        if (*((_DWORD *)v6 + 1))
          WebCore::TreeScopeOrderedMap::add(a2[7], a4, (const WebCore::TreeScope **)this, (const WebCore::TreeScope *)a2);
      }
    }
  }
}

uint64_t *WebCore::HTMLLabelElement::removedFromAncestor(WebCore::Element *this, unint64_t a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v7;
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  const WTF::AtomString *v23;
  uint64_t v24;
  unint64_t v25;
  __int16 v26;
  _BYTE v27[24];

  if ((*(_BYTE *)(a3 + 22) & 0x18) != 0 && (a2 & 0x100) != 0)
  {
    v7 = *(_QWORD *)(a3 + 40);
    if (*(_QWORD *)(v7 + 56))
    {
      v24 = a3;
      v26 = a2;
      v23 = (const WTF::AtomString *)WebCore::Element::attributeWithoutSynchronization((uint64_t)this, &WebCore::HTMLNames::forAttr);
      WebCore::HTMLLabelElement::updateLabel(this, (WebCore::TreeScopeOrderedMap **)v7, v23, MEMORY[0x1E0CBF2F8]);
      a3 = v24;
      LOWORD(a2) = v26;
    }
  }
  a2 = (unsigned __int16)a2;
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE8))
  {
    v25 = (unsigned __int16)a2;
    v10 = a3;
    WebCore::HTMLElement::hidePopoverInternal((uint64_t)this, 0, 0, (uint64_t)v27);
    WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v27, v11);
    a2 = v25;
    a3 = v10;
  }
  result = WebCore::Element::removedFromAncestor(this, (void *)a2, a3, a4, a5);
  v9 = *((_QWORD *)this + 9);
  if ((v9 & 0x4000000000000000) == 0)
    return result;
  v12 = *((_QWORD *)this + 13);
  if (v12
    && ((v13 = *(_DWORD *)(v12 + 4), (v13 & 1) != 0)
      ? (v14 = *(_QWORD *)(v12 + 40), LODWORD(v15) = *(_DWORD *)(v12 + 52))
      : (v14 = v12 + 32, LODWORD(v15) = v13 >> 5),
        (_DWORD)v15))
  {
    v15 = v15;
    v16 = (_BOOL8 *)(v14 + 8);
    while (1)
    {
      v17 = *(v16 - 1);
      if (v17 == WebCore::HTMLNames::dirAttr
        || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 24)
        && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 32))
      {
        break;
      }
      v16 += 2;
      if (!--v15)
      {
        v16 = (_BOOL8 *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v16 = (_BOOL8 *)MEMORY[0x1E0CBF2F8];
  }
  result = (uint64_t *)WebCore::isValidDirValue(*v16);
  if ((result & 1) != 0)
    return result;
  if (this && (*((_WORD *)this + 14) & 0x80) != 0)
  {
    v21 = *((_QWORD *)this + 25);
    if (!v21)
      goto LABEL_29;
    v18 = (uint64_t *)(v21 + 8);
  }
  else
  {
    v18 = (uint64_t *)((char *)this + 32);
  }
  v19 = *v18;
  if (!v19)
    goto LABEL_29;
  v20 = *(_WORD *)(v19 + 28);
  if ((v20 & 0x80) == 0)
  {
    if ((v20 & 8) != 0)
      goto LABEL_28;
LABEL_29:
    *((_QWORD *)this + 9) = v9 & 0xBFFFFFFFFFFFFFFFLL;
    return result;
  }
  v22 = *(_QWORD *)(v19 + 200);
  if (!v22)
    goto LABEL_29;
  v19 = *(_QWORD *)(v22 + 8);
  if (!v19)
    goto LABEL_29;
LABEL_28:
  if ((*(_BYTE *)(v19 + 79) & 0x40) == 0)
    goto LABEL_29;
  return result;
}

void WebCore::HTMLIFrameElement::~HTMLIFrameElement(WebCore::HTMLIFrameElement *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLIFrameElement::~HTMLIFrameElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::LazyLoadFrameObserver *v3;
  WTF *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  WTF::StringImpl *v14;

  v3 = (WebCore::LazyLoadFrameObserver *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
  {
    WebCore::LazyLoadFrameObserver::~LazyLoadFrameObserver(v3, a2);
    WTF::fastFree(v4, v5);
  }
  v6 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 48);
    *(_QWORD *)(v6 + 48) = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v8)
    {
      v9 = *(WTF::StringImpl ***)(v6 + 24);
      v10 = 8 * v8;
      do
      {
        v11 = *v9;
        *v9 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, a2);
          else
            *(_DWORD *)v11 -= 2;
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
    v12 = *(WTF **)(v6 + 24);
    if ((WTF *)(v6 + 40) != v12 && v12 != 0)
    {
      *(_QWORD *)(v6 + 24) = 0;
      *(_DWORD *)(v6 + 32) = 0;
      WTF::fastFree(v12, a2);
    }
    WTF::fastFree((WTF *)v6, a2);
  }
  *(_QWORD *)this = off_1E33BEB58;
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  WebCore::HTMLFrameOwnerElement::~HTMLFrameOwnerElement(this, a2);
}

uint64_t WebCore::HTMLIFrameElement::isInteractiveContent(WebCore::HTMLIFrameElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLImageElement::canContainRangeEndPoint(WebCore::HTMLImageElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLImageElement::asAttachmentAssociatedElement(WebCore::HTMLImageElement *this)
{
  return (uint64_t)this + 112;
}

uint64_t WebCore::HTMLImageElement::isFormListedElement(WebCore::HTMLImageElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLImageElement::isDraggableIgnoringAttributes(WebCore::HTMLImageElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLImageElement::asFormAssociatedElement(WebCore::HTMLImageElement *this)
{
  return (uint64_t)this + 128;
}

uint64_t WebCore::HTMLImageElement::ref(uint64_t this)
{
  *(_DWORD *)(this + 24) += 2;
  return this;
}

uint64_t WebCore::HTMLImageElement::deref(uint64_t this)
{
  _WORD *v1;
  __int16 v2;
  __int16 v3;

  v1 = (_WORD *)this;
  if (*(_DWORD *)(this + 24) == 2)
  {
    v2 = *(_WORD *)(this + 30);
    if ((v2 & 0x400) == 0)
    {
      v3 = *(_WORD *)(this + 28);
      if ((v3 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)this);
      }
      else
      {
        if ((v3 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(this + 160) + 16))(*(_QWORD *)(this + 160));
          v2 = v1[15];
        }
        v1[15] = v2 | 0x400;
        return (*(uint64_t (**)(_WORD *))(*(_QWORD *)v1 + 72))(v1);
      }
    }
  }
  else
  {
    *(_DWORD *)(this + 24) -= 2;
  }
  return this;
}

uint64_t WebCore::HTMLImageElement::refFormAssociatedElement(uint64_t this)
{
  *(_DWORD *)(this + 24) += 2;
  return this;
}

unsigned int *WebCore::HTMLImageElement::derefFormAssociatedElement(unsigned int *this, void *a2)
{
  unsigned int *v2;
  __int16 v3;
  __int16 v4;

  v2 = this;
  if (this[6] == 2)
  {
    v3 = *((_WORD *)this + 15);
    if ((v3 & 0x400) == 0)
    {
      v4 = *((_WORD *)this + 14);
      if ((v4 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)this, a2);
      }
      else
      {
        if ((v4 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
          v3 = *((_WORD *)v2 + 15);
        }
        *((_WORD *)v2 + 15) = v3 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 72))(v2);
      }
    }
  }
  else
  {
    this[6] -= 2;
  }
  return this;
}

uint64_t WebCore::HTMLImageElement::refAttachmentAssociatedElement(uint64_t this)
{
  *(_DWORD *)(this + 24) += 2;
  return this;
}

unsigned int *WebCore::HTMLImageElement::derefAttachmentAssociatedElement(unsigned int *this, void *a2)
{
  unsigned int *v2;
  __int16 v3;
  __int16 v4;

  v2 = this;
  if (this[6] == 2)
  {
    v3 = *((_WORD *)this + 15);
    if ((v3 & 0x400) == 0)
    {
      v4 = *((_WORD *)this + 14);
      if ((v4 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)this, a2);
      }
      else
      {
        if ((v4 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
          v3 = *((_WORD *)v2 + 15);
        }
        *((_WORD *)v2 + 15) = v3 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 72))(v2);
      }
    }
  }
  else
  {
    this[6] -= 2;
  }
  return this;
}

uint64_t WebCore::HTMLImageElement::attachmentAssociatedElementType(WebCore::HTMLImageElement *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLImageElement::asHTMLElement(WebCore::HTMLImageElement *this)
{
  return (uint64_t)this - 112;
}

{
  return (uint64_t)this - 112;
}

{
  return (uint64_t)this - 128;
}

{
  return (uint64_t)this - 128;
}

uint64_t `non-virtual thunk to'WebCore::HTMLImageElement::attachmentAssociatedElementType(WebCore::HTMLImageElement *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLImageElement::refAttachmentAssociatedElement(uint64_t this)
{
  *(_DWORD *)(this - 88) += 2;
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLImageElement::derefAttachmentAssociatedElement(unsigned int *this, void *a2)
{
  unsigned int *v2;
  __int16 v3;
  __int16 v4;

  v2 = this;
  if (*(this - 22) == 2)
  {
    v3 = *((_WORD *)this - 41);
    if ((v3 & 0x400) == 0)
    {
      v4 = *((_WORD *)this - 42);
      if ((v4 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)(this - 28), a2);
      }
      else
      {
        if ((v4 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
          v3 = *((_WORD *)v2 - 41);
        }
        *((_WORD *)v2 - 41) = v3 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*((_QWORD *)v2 - 14) + 72))(v2 - 28);
      }
    }
  }
  else
  {
    *(this - 22) -= 2;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLImageElement::isFormListedElement(WebCore::HTMLImageElement *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::HTMLImageElement::refFormAssociatedElement(uint64_t this)
{
  *(_DWORD *)(this - 104) += 2;
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLImageElement::derefFormAssociatedElement(unsigned int *this, void *a2)
{
  unsigned int *v2;
  __int16 v3;
  __int16 v4;

  v2 = this;
  if (*(this - 26) == 2)
  {
    v3 = *((_WORD *)this - 49);
    if ((v3 & 0x400) == 0)
    {
      v4 = *((_WORD *)this - 50);
      if ((v4 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)(this - 32), a2);
      }
      else
      {
        if ((v4 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4));
          v3 = *((_WORD *)v2 - 49);
        }
        *((_WORD *)v2 - 49) = v3 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*((_QWORD *)v2 - 16) + 72))(v2 - 32);
      }
    }
  }
  else
  {
    *(this - 26) -= 2;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLImageElement::ref(uint64_t this)
{
  *(_DWORD *)(this - 128) += 2;
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLImageElement::deref(unsigned int *this, void *a2)
{
  unsigned int *v2;
  __int16 v3;
  __int16 v4;

  v2 = this;
  if (*(this - 32) == 2)
  {
    v3 = *((_WORD *)this - 61);
    if ((v3 & 0x400) == 0)
    {
      v4 = *((_WORD *)this - 62);
      if ((v4 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)(this - 38), a2);
      }
      else
      {
        if ((v4 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
          v3 = *((_WORD *)v2 - 61);
        }
        *((_WORD *)v2 - 61) = v3 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*((_QWORD *)v2 - 19) + 72))(v2 - 38);
      }
    }
  }
  else
  {
    *(this - 32) -= 2;
  }
  return this;
}

void WebCore::ListAttributeTargetObserver::~ListAttributeTargetObserver(WebCore::ListAttributeTargetObserver *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v9 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v9)
      {
        v12 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v9));
        v3 = v12;
      }
      v10 = *(WTF **)(v3 + 16);
      if (v10)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v11 = v3;
        WTF::fastFree(v10, a2);
        v3 = v11;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = off_1E33A5038;
  v6 = (WTF::StringImpl **)*((_QWORD *)this + 2);
  if (v6)
    WebCore::IdTargetObserverRegistry::removeObserver(v6, (WebCore::ListAttributeTargetObserver *)((char *)this + 24), this);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 2);
  if (v8)
  {
    if (!*v8)
    {
      __break(0xC471u);
      JUMPOUT(0x195BF77FCLL);
    }
    --*v8;
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v9 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v9)
      {
        v12 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v9));
        v3 = v12;
      }
      v10 = *(WTF **)(v3 + 16);
      if (v10)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v11 = v3;
        WTF::fastFree(v10, a2);
        v3 = v11;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = off_1E33A5038;
  v6 = (WTF::StringImpl **)*((_QWORD *)this + 2);
  if (v6)
    WebCore::IdTargetObserverRegistry::removeObserver(v6, (WebCore::ListAttributeTargetObserver *)((char *)this + 24), this);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 2);
  if (v8)
  {
    if (!*v8)
    {
      __break(0xC471u);
      JUMPOUT(0x195BF793CLL);
    }
    --*v8;
  }
  if (*((_DWORD *)this + 2))
  {
    *((_QWORD *)this + 4) = 0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    WTF::fastFree(this, a2);
  }
}

uint64_t WebCore::HTMLTextFormControlElement::canContainRangeEndPoint(WebCore::HTMLTextFormControlElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLTextFormControlElement::isTextFormControlElement(WebCore::HTMLTextFormControlElement *this)
{
  return 1;
}

BOOL WebCore::HTMLInputElement::isOptionalFormControl(WebCore::HTMLInputElement *this)
{
  return !(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 30) + 144))(*((_QWORD *)this + 30))
      || (*((_BYTE *)this + 168) & 1) == 0;
}

BOOL WebCore::HTMLInputElement::isInnerTextElementEditable(WebCore::HTMLInputElement *this)
{
  if ((*((_WORD *)this + 115) & 0x3800) == 0x1800 || (*((_BYTE *)this + 160) & 0x18) != 0)
    return 0;
  if ((*(unsigned int (**)(char *))(*((_QWORD *)this + 14) + 288))((char *)this + 112))
    return (*((_BYTE *)this + 160) & 0x20) == 0;
  return 1;
}

uint64_t WebCore::HTMLTextFormControlElement::readOnlyBarsFromConstraintValidation(WebCore::HTMLTextFormControlElement *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLTextFormControlElement::readOnlyBarsFromConstraintValidation(WebCore::HTMLTextFormControlElement *this)
{
  return 1;
}

void WebCore::HTMLLIElement::~HTMLLIElement(WebCore::HTMLLIElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::HTMLLabelElement::~HTMLLabelElement(WebCore::HTMLLabelElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::HTMLLabelElement::isInteractiveContent(WebCore::HTMLLabelElement *this)
{
  return 1;
}

void WebCore::HTMLHeadingElement::~HTMLHeadingElement(WebCore::HTMLHeadingElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLIFrameElement::sandbox(void)::$_0,BOOL,WebCore::Document &,WTF::StringView>::call(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  return WebCore::SecurityContext::isSupportedSandboxPolicy(a3, a4);
}

void WebCore::LazyLoadFrameObserver::~LazyLoadFrameObserver(WebCore::LazyLoadFrameObserver *this, WTF::StringImpl *a2)
{
  WebCore::IntersectionObserver *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (WebCore::IntersectionObserver *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::IntersectionObserver::~IntersectionObserver(v3);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v10 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v10)
      {
        v13 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v10));
        v5 = v13;
      }
      v11 = *(WTF **)(v5 + 16);
      if (v11)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v12 = v5;
        WTF::fastFree(v11, a2);
        v5 = v12;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
}

unsigned int **std::make_unique[abi:sn180100]<WebCore::ListAttributeTargetObserver,WTF::AtomString const&,WebCore::HTMLInputElement &>(uint64_t *a1, _DWORD **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int **result;

  v6 = WTF::fastMalloc((WTF *)0x28);
  v7 = *(_QWORD *)(a3 + 40);
  v8 = *(WTF::StringImpl **)(v7 + 64);
  if (!v8)
  {
    v9 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    v11 = *(WTF **)(v7 + 64);
    *(_QWORD *)(v7 + 64) = v9;
    if (v11)
    {
      v12 = (_DWORD *)*((_QWORD *)v11 + 2);
      if (v12)
      {
        if (!*v12)
        {
          __break(0xC471u);
          JUMPOUT(0x195BF7CB8);
        }
        --*v12;
      }
      v13 = *((_QWORD *)v11 + 1);
      if (v13)
        WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v13, v10);
      if (*(_DWORD *)v11)
      {
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = 0;
      }
      else
      {
        WTF::fastFree(v11, v10);
      }
    }
    v8 = *(WTF::StringImpl **)(v7 + 64);
  }
  *(_DWORD *)(v6 + 8) = 0;
  *(_QWORD *)v6 = off_1E33A5038;
  *(_QWORD *)(v6 + 16) = v8;
  ++*(_DWORD *)v8;
  v14 = *a2;
  if (*a2)
    *v14 += 2;
  *(_QWORD *)(v6 + 24) = v14;
  WebCore::IdTargetObserverRegistry::addObserver(v8, (WTF::StringImpl **)(v6 + 24), (WebCore::IdTargetObserver *)v6);
  *(_QWORD *)v6 = off_1E33C04A0;
  result = WTF::WeakPtr<WebCore::MediaQueryList,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::WeakPtr<void>((unsigned int **)(v6 + 32), a3);
  *a1 = v6;
  return result;
}

uint64_t WTF::VectorCopier<false,WebCore::MQ::MediaQueryResult>::uninitializedCopy<WebCore::MQ::MediaQueryResult>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (result != a2)
  {
    v5 = result;
    for (i = 0; v5 + i != a2; i += 24)
    {
      v7 = v5 + i;
      v8 = *(unsigned int *)(v5 + i + 12);
      v9 = a3 + i;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 12) = v8;
      if ((_DWORD)v8)
      {
        if (v8 >= 0x4924925)
        {
          __break(0xC471u);
          return result;
        }
        v10 = 56 * v8;
        v11 = WTF::fastMalloc((WTF *)(56 * v8));
        v12 = a3 + i;
        *(_DWORD *)(v12 + 8) = v10 / 0x38;
        *(_QWORD *)v12 = v11;
        result = WTF::VectorCopier<false,WebCore::MQ::MediaQuery>::uninitializedCopy<WebCore::MQ::MediaQuery>(*(_QWORD *)(v5 + i), *(_QWORD *)(v5 + i) + 56 * *(unsigned int *)(v7 + 12), v11);
      }
      *(_BYTE *)(v9 + 16) = *(_BYTE *)(v7 + 16);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLImageElement::bestFitSourceFromPictureElement(void)::$_0,BOOL,WebCore::ImageCandidate const&>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::ImageLoader::shouldIgnoreCandidateWhenLoadingFromArchive(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 176), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLImageElement::selectImageSource(WebCore::RelevantMutation)::$_0,BOOL,WebCore::ImageCandidate const&>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::ImageLoader::shouldIgnoreCandidateWhenLoadingFromArchive(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 176), a2);
}

uint64_t WTF::Vector<WebCore::ImageCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::StringImpl ***)a1;
    v5 = 40 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 5;
      v5 -= 40;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<float,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, char *a2, __int128 *a3, char *a4)
{
  uint64_t v7;
  char *result;
  __int16 v9;
  char *v10;
  int8x16_t *p_src;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 __src;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  size_t __n[2];
  uint64_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;

  v45 = *MEMORY[0x1E0C80C00];
  v7 = *((_QWORD *)a1 + 1);
  if ((v7 || (v7 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v33 = a3[4];
      v34 = a3[5];
      v35 = a3[6];
      v36 = a3[7];
      v29 = *a3;
      v30 = a3[1];
      v31 = a3[2];
      v32 = a3[3];
      v9 = *a4;
      *(_WORD *)result = *a2;
      result += 2;
      v41 = v33;
      v42 = v34;
      v43 = v35;
      *(_OWORD *)__n = v36;
      __src = v29;
      v38 = v30;
      v10 = &result[2 * HIDWORD(v36)];
      v39 = v31;
      v40 = v32;
      if (HIDWORD(v36) >= 0x40)
      {
        v20 = &result[2 * (HIDWORD(v36) & 0xFFFFFFC0)];
        p_src = (int8x16_t *)&__src;
        v21 = 0uLL;
        do
        {
          v46.val[0] = *p_src;
          v22 = p_src[1];
          v47.val[0] = p_src[2];
          v23 = p_src[3];
          p_src += 4;
          v24 = v23;
          v47.val[1] = 0uLL;
          v48.val[0] = v22;
          v46.val[1] = 0uLL;
          v25 = result;
          vst2q_s8(v25, v46);
          v25 += 32;
          v48.val[1] = 0uLL;
          vst2q_s8(v25, v48);
          v26 = result + 64;
          vst2q_s8(v26, v47);
          v27 = result + 96;
          vst2q_s8(v27, *(int8x16x2_t *)(&v21 - 1));
          result += 128;
        }
        while (result != v20);
        result = v20;
      }
      else
      {
        p_src = (int8x16_t *)&__src;
      }
      while (result != v10)
      {
        v28 = p_src->u8[0];
        p_src = (int8x16_t *)((char *)p_src + 1);
        *(_WORD *)result = v28;
        result += 2;
      }
      *(_WORD *)v10 = v9;
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v12 = *a2;
      v13 = a3[5];
      v41 = a3[4];
      v42 = v13;
      v14 = a3[7];
      v43 = a3[6];
      *(_OWORD *)__n = v14;
      v15 = a3[1];
      __src = *a3;
      v38 = v15;
      v16 = a3[3];
      v39 = a3[2];
      v40 = v16;
      v17 = *a4;
      *result = v12;
      v18 = result + 1;
      v19 = HIDWORD(__n[1]);
      if (HIDWORD(__n[1]))
      {
        if (HIDWORD(__n[1]) == 1)
          *v18 = __src;
        else
          result = (char *)memcpy(result + 1, &__src, HIDWORD(__n[1]));
      }
      v18[v19] = v17;
    }
  }
  return result;
}

_BYTE *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, _BYTE *a2, unsigned int *a3, char *a4)
{
  unsigned int v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  _BYTE *result;
  unsigned int v12;
  __int16 v13;
  uint64_t v14;
  unsigned int v15;
  _WORD *v16;
  BOOL v17;
  unsigned int v18;
  char v19;
  _BYTE *v20;
  uint64_t v21;
  unsigned int v22;
  _BYTE *v23;
  size_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _WORD *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  _BYTE v36[13];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v7 = *a3;
  if ((*a3 & 0x80000000) != 0)
  {
    v30 = -v7;
    v31 = 1;
    do
    {
      ++v31;
      v17 = v30 >= 0xA;
      v30 /= 0xAu;
    }
    while (v17);
  }
  else
  {
    v8 = 0;
    do
    {
      ++v8;
      v9 = v7 > 9;
      v7 /= 0xAu;
    }
    while (v9);
  }
  v10 = *((_QWORD *)a1 + 1);
  if (!v10 && (v10 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v10 + 16) & 4) != 0)
  {
    result = (_BYTE *)MEMORY[0x19AEA4824]();
    if (!result)
      return result;
    v18 = *a3;
    v19 = *a4;
    *result = *a2;
    v20 = result + 1;
    v21 = 0;
    if ((v18 & 0x80000000) != 0)
    {
      v32 = -v18;
      do
      {
        v36[v21-- + 12] = (v32 % 0xA) | 0x30;
        v9 = v32 > 9;
        v32 /= 0xAu;
      }
      while (v9);
      v33 = v21 + 12;
      v23 = &v36[v21 + 12];
      *v23 = 45;
      if (v21 + 14 <= 14)
      {
        if (v33 <= 12)
          v33 = 12;
        v24 = v33 - v21 - 11;
        goto LABEL_22;
      }
    }
    else
    {
      v22 = v18;
      do
      {
        v36[v21-- + 12] = (v22 % 0xA) | 0x30;
        v9 = v22 > 9;
        v22 /= 0xAu;
      }
      while (v9);
      if (v21 + 14 <= 13)
      {
        v23 = &v36[v21 + 13];
        v24 = -v21;
LABEL_22:
        result = memcpy(result + 1, v23, v24);
      }
    }
    if ((v18 & 0x80000000) != 0)
    {
      v34 = -v18;
      v25 = 1;
      do
      {
        ++v25;
        v17 = v34 >= 0xA;
        v34 /= 0xAu;
      }
      while (v17);
    }
    else
    {
      v25 = 0;
      do
      {
        ++v25;
        v9 = v18 > 9;
        v18 /= 0xAu;
      }
      while (v9);
    }
    v20[v25] = v19;
    return result;
  }
  result = (_BYTE *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (result)
  {
    v12 = *a3;
    v13 = *a4;
    *(_WORD *)result = (char)*a2;
    result += 2;
    if ((v12 & 0x80000000) != 0)
    {
      v26 = -v12;
      v27 = 12;
      do
      {
        v36[v27--] = (v26 % 0xA) | 0x30;
        v9 = v26 > 9;
        v26 /= 0xAu;
      }
      while (v9);
      v36[v27] = 45;
      if (v27 + 2 <= 14)
      {
        v28 = result;
        do
        {
          *v28++ = v36[v27];
          v9 = v27++ < 12;
        }
        while (v9);
      }
    }
    else
    {
      v14 = 0;
      v15 = v12;
      do
      {
        v36[v14-- + 12] = (v15 % 0xA) | 0x30;
        v9 = v15 > 9;
        v15 /= 0xAu;
      }
      while (v9);
      if (v14 + 14 <= 13)
      {
        v16 = result;
        do
        {
          *v16++ = *((unsigned __int8 *)&v37 + v14);
          v17 = __CFADD__(v14++, 1);
        }
        while (!v17);
      }
    }
    if ((v12 & 0x80000000) != 0)
    {
      v35 = -v12;
      v29 = 1;
      do
      {
        ++v29;
        v17 = v35 >= 0xA;
        v35 /= 0xAu;
      }
      while (v17);
    }
    else
    {
      v29 = 0;
      do
      {
        ++v29;
        v9 = v12 > 9;
        v12 /= 0xAu;
      }
      while (v9);
    }
    *(_WORD *)&result[2 * v29] = v13;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLInputElement::didAttachRenderers(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1[1];
  *a1 = &off_1E33C19D0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLInputElement::didAttachRenderers(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33C19D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::HTMLInputElement::didAttachRenderers(void)::$_0,void>::call(unsigned int *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 24);
      *(_DWORD *)(v3 + 24) = v4 + 2;
      if (v3 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 1248))
      {
        result = (unsigned int *)WebCore::HTMLInputElement::updateFocusAppearance(v3, 0, 0);
        v4 = *(_DWORD *)(v3 + 24) - 2;
      }
      if (v4)
      {
        *(_DWORD *)(v3 + 24) = v4;
      }
      else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLInputElement::resumeFromDocumentSuspension(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E33C19F8;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLInputElement::resumeFromDocumentSuspension(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33C19F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::HTMLInputElement::resumeFromDocumentSuspension(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  return WebCore::HTMLInputElement::reset(*(WebCore::HTMLInputElement **)(a1 + 8));
}

BOOL WTF::Detail::CallableWrapper<WebCore::HTMLInputElement::checkedRadioButtonForGroup(void)::$_0,BOOL,WebCore::HTMLInputElement&>::call(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *(_WORD *)(a2 + 230);
  if ((v2 & 1) != 0)
  {
    v3 = *(uint64_t **)(a1 + 8);
    *(_DWORD *)(a2 + 24) += 2;
    v4 = *v3;
    *v3 = a2;
    if (v4)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, (void *)a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
  }
  return (v2 & 1) == 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ListAttributeTargetObserver::idTargetChanged(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1[1];
  *a1 = &off_1E33C1A48;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ListAttributeTargetObserver::idTargetChanged(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33C1A48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ListAttributeTargetObserver::idTargetChanged(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_DWORD **)(v2 + 240);
      if (v3)
        ++v3[2];
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 888))(v3);
      if (v3[2] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      else
        --v3[2];
    }
  }
  return result;
}

uint64_t WebCore::HTMLLegendElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33C46A0;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLLegendElement::form(WebCore::HTMLLegendElement *this, void *a2)
{
  uint64_t v2;
  __int16 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v8;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = *(_WORD *)(v2 + 28);
  if ((v3 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
    return 0;
  v4 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v4 + 2;
  v5 = *(_QWORD *)(v2 + 120);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v4)
      goto LABEL_6;
  }
  else
  {
    v6 = 0;
    if (v4)
    {
LABEL_6:
      *(_DWORD *)(v2 + 24) = v4;
      return v6;
    }
  }
  v8 = *(_WORD *)(v2 + 30);
  if ((v8 & 0x400) == 0)
  {
    if ((v3 & 0xF000) == 0x9000)
    {
      WebCore::Document::removedLastRef((WebCore::Document *)v2, a2);
    }
    else
    {
      if ((v3 & 0x20) != 0)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
        v8 = *(_WORD *)(v2 + 30);
      }
      *(_WORD *)(v2 + 30) = v8 | 0x400;
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
  }
  return v6;
}

uint64_t *std::unique_ptr<WebCore::DOMTokenList>::~unique_ptr[abi:sn180100](uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 48);
    *(_QWORD *)(v3 + 48) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *(unsigned int *)(v3 + 36);
    if ((_DWORD)v5)
    {
      v6 = *(WTF::StringImpl ***)(v3 + 24);
      v7 = 8 * v5;
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
    v9 = *(WTF **)(v3 + 24);
    if ((WTF *)(v3 + 40) != v9 && v9 != 0)
    {
      *(_QWORD *)(v3 + 24) = 0;
      *(_DWORD *)(v3 + 32) = 0;
      WTF::fastFree(v9, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

void `non-virtual thunk to'WebCore::HTMLLinkElement::~HTMLLinkElement(WebCore::HTMLLinkElement *this, void *a2)
{
  WebCore::HTMLLinkElement::~HTMLLinkElement((WebCore::HTMLLinkElement *)((char *)this - 112), a2);
}

{
  WebCore::HTMLLinkElement::~HTMLLinkElement((WebCore::HTMLLinkElement *)((char *)this - 128), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLLinkElement::~HTMLLinkElement((WebCore::HTMLLinkElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLLinkElement::~HTMLLinkElement((WebCore::HTMLLinkElement *)((char *)this - 128), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::HTMLLinkElement::setDisabledState(WebCore::HTMLLinkElement *this, unsigned __int8 *a2, uint64_t a3, WTF::String *a4)
{
  int v4;
  int v5;
  WebCore::HTMLLinkElement *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];

  v4 = *((unsigned __int8 *)this + 288);
  if ((_DWORD)a2)
    v5 = 2;
  else
    v5 = 1;
  *((_BYTE *)this + 288) = v5;
  if (v4 == v5)
    return;
  v6 = this;
  if ((*((_BYTE *)this + 22) & 8) == 0)
    return;
  if ((*((_BYTE *)this + 291) & 1) != 0)
  {
    if ((_DWORD)a2)
LABEL_24:
      WebCore::HTMLLinkElement::removePendingSheet(v6);
  }
  else
  {
    v7 = *((_QWORD *)this + 25);
    if (!v7)
    {
LABEL_60:
      if (v5 == 1)
      {
        WebCore::HTMLLinkElement::process(v6, a2, a3, a4);
        return;
      }
      goto LABEL_9;
    }
    if (!*(_DWORD *)(*(_QWORD *)(v7 + 24) + 68))
    {
LABEL_9:
      v8 = *((_QWORD *)v6 + 23);
      if (!*(_BYTE *)(v8 + 233))
      {
        *(_WORD *)(v8 + 232) = 256;
        if (*(_QWORD *)(v8 + 24))
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 1328) + 234) = 1;
      }
      if ((*(_QWORD *)(v8 + 112) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*(_QWORD *)(v8 + 112) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        v9 = v8 + 80;
        *(_QWORD *)(v8 + 104) = 0;
        WTF::MonotonicTime::now(this);
        WebCore::TimerBase::setNextFireTime(v9, v10 + 0.0);
      }
      v11 = *((_QWORD *)v6 + 25);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 96);
        *(_QWORD *)(v11 + 96) = 0;
        if (v12)
        {
          do
          {
            v13 = __ldaxr((unsigned int *)v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, (unsigned int *)v12));
          if (!v14)
          {
            atomic_store(1u, (unsigned int *)v12);
            v25 = *(unsigned int *)(v12 + 28);
            if ((_DWORD)v25)
            {
              v29 = v12;
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v25));
              v12 = v29;
            }
            v26 = *(WTF **)(v12 + 16);
            if (v26)
            {
              *(_QWORD *)(v12 + 16) = 0;
              *(_DWORD *)(v12 + 24) = 0;
              v27 = v12;
              WTF::fastFree(v26, a2);
              v12 = v27;
            }
            WTF::fastFree((WTF *)v12, a2);
          }
        }
        v15 = (_DWORD *)*((_QWORD *)v6 + 25);
        *((_QWORD *)v6 + 25) = 0;
        if (v15)
        {
          if (v15[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
          else
            --v15[2];
        }
      }
      return;
    }
    v30 = *(_QWORD *)(v7 + 24);
    v28 = 0;
    while (1)
    {
      this = (WebCore::HTMLLinkElement *)WebCore::StyleRuleImport::isLoading(*(WebCore::StyleRuleImport **)(*(_QWORD *)(v30 + 56) + 8 * v28));
      if ((_DWORD)this)
        break;
      if (++v28 >= (unint64_t)*(unsigned int *)(v30 + 68))
      {
        if (*((_QWORD *)v6 + 25))
          goto LABEL_9;
        LOBYTE(v5) = *((_BYTE *)v6 + 288);
        goto LABEL_60;
      }
    }
    if (*((_BYTE *)v6 + 288) == 2)
      goto LABEL_24;
  }
  v16 = *((_BYTE *)v6 + 290);
  if ((v16 & 2) != 0 && *((_BYTE *)v6 + 288) == 1 && !*((_BYTE *)v6 + 292))
  {
    *((_BYTE *)v6 + 292) = 1;
    v17 = *((_QWORD *)v6 + 23);
    v18 = *((_QWORD *)v6 + 4);
    if (v18 && (v19 = *(_WORD *)(v18 + 28), (v19 & 8) != 0))
    {
      while ((v19 & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(v18 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::headTag + 24))
      {
        v18 = *(_QWORD *)(v18 + 32);
        if (v18)
        {
          v19 = *(_WORD *)(v18 + 28);
          if ((v19 & 8) != 0)
            continue;
        }
        goto LABEL_34;
      }
      v20 = v17 + 160;
    }
    else
    {
LABEL_34:
      v20 = v17 + 176;
    }
    WTF::WeakHashSet<WebCore::Element const,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(v20, v6, (uint64_t)v31);
    v16 = *((_BYTE *)v6 + 290);
  }
  if ((v16 & 2) == 0 && v4 == 2 && *((_BYTE *)v6 + 288) == 1 && !*((_BYTE *)v6 + 292))
  {
    *((_BYTE *)v6 + 292) = 1;
    v21 = *((_QWORD *)v6 + 23);
    v22 = *((_QWORD *)v6 + 4);
    if (v22 && (v23 = *(_WORD *)(v22 + 28), (v23 & 8) != 0))
    {
      while ((v23 & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(v22 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::headTag + 24))
      {
        v22 = *(_QWORD *)(v22 + 32);
        if (v22)
        {
          v23 = *(_WORD *)(v22 + 28);
          if ((v23 & 8) != 0)
            continue;
        }
        goto LABEL_46;
      }
      v24 = v21 + 160;
    }
    else
    {
LABEL_46:
      v24 = v21 + 176;
    }
    WTF::WeakHashSet<WebCore::Element const,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(v24, v6, (uint64_t)v31);
  }
}

double WebCore::HTMLLinkElement::removePendingSheet(WebCore::HTMLLinkElement *this)
{
  int v1;
  double result;

  v1 = *((unsigned __int8 *)this + 292);
  *((_BYTE *)this + 292) = 0;
  if (v1)
  {
    if (v1 == 2)
      return WebCore::Style::Scope::didChangeActiveStyleSheetCandidates(*((WebCore::Style::Scope **)this + 23));
    else
      WebCore::Style::Scope::removePendingSheet(*((WebCore::Document ***)this + 23), this);
  }
  return result;
}

WebCore::CSSStyleSheet *WebCore::HTMLLinkElement::clearSheet(WebCore::CSSStyleSheet **this, void *a2)
{
  WebCore::CSSStyleSheet *result;

  WebCore::CSSStyleSheet::clearOwnerNode(this[25], a2);
  result = this[25];
  this[25] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      return (WebCore::CSSStyleSheet *)(*(uint64_t (**)(WebCore::CSSStyleSheet *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  return result;
}

WTF::StringImpl *WebCore::CSSStyleSheet::setTitle(WebCore::CSSStyleSheet *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLLinkElement::shouldLoadLink(WebCore::HTMLLinkElement *this)
{
  return (*((unsigned __int8 *)this + 22) >> 3) & 1;
}

WTF::StringImpl *WebCore::HTMLLinkElement::setCrossOrigin(WebCore::HTMLLinkElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::crossoriginAttr, a2, 0);
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::crossoriginAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::crossoriginAttr, a2, 0);
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
}

uint64_t *WebCore::HTMLLinkElement::crossOrigin@<X0>(WebCore::HTMLLinkElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8;
  const char *v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 13);
  if (v3
    && ((v4 = *(_DWORD *)(v3 + 4), (v4 & 1) != 0)
      ? (v5 = *(_QWORD *)(v3 + 40), LODWORD(v6) = *(_DWORD *)(v3 + 52))
      : (v5 = v3 + 32, LODWORD(v6) = v4 >> 5),
        (_DWORD)v6))
  {
    v6 = v6;
    result = (uint64_t *)(v5 + 8);
    while (1)
    {
      v8 = *(result - 1);
      if (v8 == WebCore::HTMLNames::crossoriginAttr
        || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
        && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
      {
        break;
      }
      result += 2;
      if (!--v6)
      {
        result = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    result = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  if (*result)
  {
    if (WTF::equalLettersIgnoringASCIICase(result, "use-credentials", 0x10uLL))
    {
      v9 = "use-credentials";
      v10 = a2;
      v11 = 16;
    }
    else
    {
      v9 = "anonymous";
      v10 = a2;
      v11 = 10;
    }
    return WTF::String::String(v10, (uint64_t)v9, v11);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLLinkElement::setAs(WebCore::HTMLLinkElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::asAttr, a2, 0);
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::asAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::asAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::asAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::asAttr, a2, 0);
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
}

WTF::StringImpl *WebCore::HTMLLinkElement::as@<X0>(WebCore::HTMLLinkElement *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *result;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  WTF::StringImpl *v29;

  v4 = *((_QWORD *)this + 13);
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  v8 = (WTF::StringImpl **)(v6 + 8);
  while (1)
  {
    v9 = (uint64_t)*(v8 - 1);
    if (v9 == WebCore::HTMLNames::asAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::asAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::asAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v7)
    {
      v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  result = *v8;
  if (!*v8)
  {
    v29 = 0;
    goto LABEL_16;
  }
  v11 = *((_DWORD *)result + 1);
  *(_DWORD *)result += 2;
  v29 = result;
  if (v11 == 5)
  {
    v16 = *((_QWORD *)result + 1);
    if ((*((_BYTE *)result + 16) & 4) != 0)
    {
      v17 = *(_BYTE *)v16 & 0xDF;
      if (v17 == 70)
      {
        if ((*(_BYTE *)(v16 + 1) & 0xDF) != 0x45
          || (*(_BYTE *)(v16 + 2) & 0xDF) != 0x54
          || (*(_BYTE *)(v16 + 3) & 0xDF) != 0x43)
        {
          goto LABEL_16;
        }
        v18 = *(unsigned __int8 *)(v16 + 4);
LABEL_36:
        if ((v18 & 0xFFFFFFDF) == 0x48)
          goto LABEL_46;
        goto LABEL_16;
      }
      if (v17 == 73)
      {
        if ((*(_BYTE *)(v16 + 1) & 0xDF) != 0x4D
          || (*(_BYTE *)(v16 + 2) & 0xDF) != 0x41
          || (*(_BYTE *)(v16 + 3) & 0xDF) != 0x47)
        {
          goto LABEL_16;
        }
      }
      else if (v17 != 83
             || (*(_BYTE *)(v16 + 1) & 0xDF) != 0x54
             || (*(_BYTE *)(v16 + 2) & 0xDF) != 0x59
             || (*(_BYTE *)(v16 + 3) & 0xDF) != 0x4C)
      {
        goto LABEL_16;
      }
      v23 = *(unsigned __int8 *)(v16 + 4);
    }
    else
    {
      v27 = *(_WORD *)v16 & 0xFFDF;
      if (v27 == 70)
      {
        if ((*(_WORD *)(v16 + 2) & 0xFFDF) != 0x45
          || (*(_WORD *)(v16 + 4) & 0xFFDF) != 0x54
          || (*(_WORD *)(v16 + 6) & 0xFFDF) != 0x43)
        {
          goto LABEL_16;
        }
        v18 = *(unsigned __int16 *)(v16 + 8);
        goto LABEL_36;
      }
      if (v27 == 73)
      {
        if ((*(_WORD *)(v16 + 2) & 0xFFDF) != 0x4D
          || (*(_WORD *)(v16 + 4) & 0xFFDF) != 0x41
          || (*(_WORD *)(v16 + 6) & 0xFFDF) != 0x47)
        {
          goto LABEL_16;
        }
      }
      else if (v27 != 83
             || (*(_WORD *)(v16 + 2) & 0xFFDF) != 0x54
             || (*(_WORD *)(v16 + 4) & 0xFFDF) != 0x59
             || (*(_WORD *)(v16 + 6) & 0xFFDF) != 0x4C)
      {
        goto LABEL_16;
      }
      v23 = *(unsigned __int16 *)(v16 + 8);
    }
    if ((v23 & 0xFFFFFFDF) == 0x45)
      goto LABEL_46;
    goto LABEL_16;
  }
  if (v11 != 6)
    goto LABEL_16;
  v19 = *((_QWORD *)result + 1);
  if ((*((_BYTE *)result + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v19 & 0xDF) != 0x53
      || (*(_BYTE *)(v19 + 1) & 0xDF) != 0x43
      || (*(_BYTE *)(v19 + 2) & 0xDF) != 0x52
      || (*(_BYTE *)(v19 + 3) & 0xDF) != 0x49
      || (*(_BYTE *)(v19 + 4) & 0xDF) != 0x50)
    {
      goto LABEL_16;
    }
    v20 = *(unsigned __int8 *)(v19 + 5);
  }
  else
  {
    if ((*(_WORD *)v19 & 0xFFDF) != 0x53
      || (*(_WORD *)(v19 + 2) & 0xFFDF) != 0x43
      || (*(_WORD *)(v19 + 4) & 0xFFDF) != 0x52
      || (*(_WORD *)(v19 + 6) & 0xFFDF) != 0x49
      || (*(_WORD *)(v19 + 8) & 0xFFDF) != 0x50)
    {
      goto LABEL_16;
    }
    v20 = *(unsigned __int16 *)(v19 + 10);
  }
  if ((v20 & 0xFFFFFFDF) == 0x54)
    goto LABEL_46;
LABEL_16:
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 688) & 0x200) == 0)
  {
    if (!result)
      goto LABEL_29;
    v12 = *((_DWORD *)result + 1);
    if (v12 == 5)
      goto LABEL_19;
LABEL_53:
    if (v12 != 4)
      goto LABEL_29;
    v21 = *((_QWORD *)result + 1);
    if ((*((_BYTE *)result + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v21 & 0xDF) != 0x46
        || (*(_BYTE *)(v21 + 1) & 0xDF) != 0x4F
        || (*(_BYTE *)(v21 + 2) & 0xDF) != 0x4E)
      {
        goto LABEL_29;
      }
      v22 = *(unsigned __int8 *)(v21 + 3);
    }
    else
    {
      if ((*(_WORD *)v21 & 0xFFDF) != 0x46
        || (*(_WORD *)(v21 + 2) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v21 + 4) & 0xFFDF) != 0x4E)
      {
        goto LABEL_29;
      }
      v22 = *(unsigned __int16 *)(v21 + 6);
    }
    if ((v22 & 0xFFFFFFDF) != 0x54)
      goto LABEL_29;
    goto LABEL_46;
  }
  if (!result)
    goto LABEL_29;
  v12 = *((_DWORD *)result + 1);
  if (v12 != 5)
    goto LABEL_53;
  v13 = *((_DWORD *)result + 4);
  v14 = *((_QWORD *)result + 1);
  if ((v13 & 4) != 0)
  {
    v24 = *(_BYTE *)v14 & 0xDF;
    if (v24 == 86)
    {
      if ((*(_BYTE *)(v14 + 1) & 0xDF) == 0x49
        && (*(_BYTE *)(v14 + 2) & 0xDF) == 0x44
        && (*(_BYTE *)(v14 + 3) & 0xDF) == 0x45)
      {
        v25 = *(unsigned __int8 *)(v14 + 4);
        goto LABEL_74;
      }
      goto LABEL_20;
    }
    if (v24 != 65)
      goto LABEL_20;
    if ((*(_BYTE *)(v14 + 1) & 0xDF) == 0x55
      && (*(_BYTE *)(v14 + 2) & 0xDF) == 0x44
      && (*(_BYTE *)(v14 + 3) & 0xDF) == 0x49)
    {
      v26 = *(unsigned __int8 *)(v14 + 4);
      goto LABEL_81;
    }
    goto LABEL_19;
  }
  v28 = *(_WORD *)v14 & 0xFFDF;
  if (v28 != 86)
  {
    if (v28 != 65)
      goto LABEL_20;
    if ((*(_WORD *)(v14 + 2) & 0xFFDF) == 0x55
      && (*(_WORD *)(v14 + 4) & 0xFFDF) == 0x44
      && (*(_WORD *)(v14 + 6) & 0xFFDF) == 0x49)
    {
      v26 = *(unsigned __int16 *)(v14 + 8);
LABEL_81:
      if ((v26 & 0xFFFFFFDF) == 0x4F)
        goto LABEL_46;
    }
LABEL_19:
    v13 = *((_DWORD *)result + 4);
    v14 = *((_QWORD *)result + 1);
    goto LABEL_20;
  }
  if ((*(_WORD *)(v14 + 2) & 0xFFDF) == 0x49
    && (*(_WORD *)(v14 + 4) & 0xFFDF) == 0x44
    && (*(_WORD *)(v14 + 6) & 0xFFDF) == 0x45)
  {
    v25 = *(unsigned __int16 *)(v14 + 8);
LABEL_74:
    if ((v25 & 0xFFFFFFDF) == 0x4F)
      goto LABEL_46;
  }
LABEL_20:
  if ((v13 & 4) != 0)
  {
    if ((*(_BYTE *)v14 & 0xDF) != 0x54
      || (*(_BYTE *)(v14 + 1) & 0xDF) != 0x52
      || (*(_BYTE *)(v14 + 2) & 0xDF) != 0x41
      || (*(_BYTE *)(v14 + 3) & 0xDF) != 0x43)
    {
      goto LABEL_29;
    }
    v15 = *(unsigned __int8 *)(v14 + 4);
  }
  else
  {
    if ((*(_WORD *)v14 & 0xFFDF) != 0x54
      || (*(_WORD *)(v14 + 2) & 0xFFDF) != 0x52
      || (*(_WORD *)(v14 + 4) & 0xFFDF) != 0x41
      || (*(_WORD *)(v14 + 6) & 0xFFDF) != 0x43)
    {
      goto LABEL_29;
    }
    v15 = *(unsigned __int16 *)(v14 + 8);
  }
  if ((v15 & 0xFFFFFFDF) != 0x4B)
  {
LABEL_29:
    *a3 = 0;
    goto LABEL_47;
  }
LABEL_46:
  WTF::String::convertToASCIILowercase((WTF::String *)&v29);
  result = v29;
LABEL_47:
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLLinkElement::referrerPolicy(WebCore::HTMLLinkElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  unsigned int v10;

  v1 = *((_QWORD *)this + 13);
  if (v1
    && ((v2 = *(_DWORD *)(v1 + 4), (v2 & 1) != 0)
      ? (v3 = *(_QWORD *)(v1 + 40), LODWORD(v4) = *(_DWORD *)(v1 + 52))
      : (v3 = v1 + 32, LODWORD(v4) = v2 >> 5),
        (_DWORD)v4))
  {
    v4 = v4;
    v5 = (uint64_t *)(v3 + 8);
    while (1)
    {
      v6 = *(v5 - 1);
      if (v6 == WebCore::HTMLNames::referrerpolicyAttr
        || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 24)
        && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 32))
      {
        break;
      }
      v5 += 2;
      if (!--v4)
      {
        v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v7 = *v5;
  if (v7)
  {
    v8 = *(unsigned __int16 **)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  v10 = (unsigned __int16)WebCore::parseReferrerPolicy(v8, v9, 2);
  if (v10 <= 0x100)
    LOBYTE(v10) = 0;
  return v10;
}

BOOL WebCore::HTMLLinkElement::initializeStyleSheet(uint64_t a1, void *a2, WebCore::CachedResource *this, int a4)
{
  WebCore::CSSStyleSheet *v6;
  uint64_t v7;
  _DWORD *v8;
  void *v9;
  WebCore::CSSTokenizer *v10;
  const WebCore::CSSParserToken *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  void *v14;
  unsigned int v15;
  WTF *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _BOOL8 result;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  __int16 v32;
  char v33;
  uint64_t v34;
  const WebCore::CSSParserToken *v35[2];

  v32 = a4;
  v33 = BYTE2(a4);
  v31 = 0;
  if (*((_BYTE *)this + 17) == 3)
    v31 = WebCore::CachedResource::isCORSSameOrigin(this) | 0x100;
  v6 = *(WebCore::CSSStyleSheet **)(a1 + 200);
  if (v6)
    WebCore::CSSStyleSheet::clearOwnerNode(v6, a2);
  v7 = WTF::fastMalloc((WTF *)0x98);
  v35[0] = 0;
  WebCore::CSSStyleSheet::CSSStyleSheet(v7, (uint64_t *)a2, a1, v35, 0, &v31);
  v8 = *(_DWORD **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v7;
  if (v8)
  {
    if (v8[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      v7 = *(_QWORD *)(a1 + 200);
    }
    else
    {
      --v8[2];
    }
  }
  WebCore::CSSTokenizer::tryCreate((unsigned int **)(a1 + 216), &v34);
  v10 = (WebCore::CSSTokenizer *)v34;
  if (v34)
  {
    v11 = (const WebCore::CSSParserToken *)(*(_QWORD *)(v34 + 48) + 24 * *(unsigned int *)(v34 + 60));
    v35[0] = *(const WebCore::CSSParserToken **)(v34 + 48);
    v35[1] = v11;
    WebCore::MQ::MediaQueryParser::consumeMediaQueryList(v35, (WebCore::CSSParserTokenRange *)&v32, (uint64_t)&v29);
    WebCore::CSSTokenizer::~CSSTokenizer(v10, v12);
    WTF::fastFree(v13, v14);
  }
  else
  {
    v29 = 0;
    v30 = 0;
  }
  v15 = *(_DWORD *)(v7 + 60);
  if (v15)
    WTF::VectorTypeOperations<WebCore::MQ::MediaQuery>::destruct(*(WTF::StringImpl **)(v7 + 48), (WTF::StringImpl *)(*(_QWORD *)(v7 + 48) + 56 * v15));
  v16 = *(WTF **)(v7 + 48);
  if (v16)
  {
    *(_QWORD *)(v7 + 48) = 0;
    *(_DWORD *)(v7 + 56) = 0;
    WTF::fastFree(v16, v9);
  }
  *(_QWORD *)(v7 + 48) = v29;
  v17 = v30;
  v29 = 0;
  v30 = 0;
  *(_QWORD *)(v7 + 56) = v17;
  WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v9);
  if ((*(_BYTE *)(a1 + 22) & 0x10) == 0)
  {
    v19 = *(_QWORD *)(a1 + 200);
    v20 = *(_QWORD *)(a1 + 104);
    if (v20
      && ((v21 = *(_DWORD *)(v20 + 4), (v21 & 1) != 0)
        ? (v22 = *(_QWORD *)(v20 + 40), LODWORD(v23) = *(_DWORD *)(v20 + 52))
        : (v22 = v20 + 32, LODWORD(v23) = v21 >> 5),
          (_DWORD)v23))
    {
      v23 = v23;
      v24 = (WTF::StringImpl **)(v22 + 8);
      while (1)
      {
        v25 = (uint64_t)*(v24 - 1);
        if (v25 == WebCore::HTMLNames::titleAttr
          || *(_QWORD *)(v25 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
          && *(_QWORD *)(v25 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
        {
          break;
        }
        v24 += 2;
        if (!--v23)
        {
          v24 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v24 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    }
    v26 = *v24;
    if (*v24)
      *(_DWORD *)v26 += 4;
    v27 = *(WTF::StringImpl **)(v19 + 40);
    *(_QWORD *)(v19 + 40) = v26;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v18);
      else
        *(_DWORD *)v27 -= 2;
    }
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v18);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  result = WebCore::CSSStyleSheet::canAccessRules(*(WebCore::CSSStyleSheet **)(a1 + 200), v18);
  if (!result)
    *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 24) + 187) |= 4u;
  return result;
}

uint64_t WebCore::HTMLLinkElement::sizes(WebCore::HTMLLinkElement *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  result = *((_QWORD *)this + 34);
  if (!result)
  {
    v3 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v3 = this;
    *(_QWORD *)(v3 + 8) = &WebCore::HTMLNames::sizesAttr;
    *(_WORD *)(v3 + 16) = 256;
    *(_QWORD *)(v3 + 24) = v3 + 40;
    *(_QWORD *)(v3 + 32) = 1;
    *(_QWORD *)(v3 + 48) = 0;
    v5 = v3;
    std::unique_ptr<WebCore::DOMTokenList>::operator=[abi:sn180100]((uint64_t *)this + 34, (WTF::StringImpl *)&v5);
    std::unique_ptr<WebCore::DOMTokenList>::~unique_ptr[abi:sn180100](&v5, v4);
    return *((_QWORD *)this + 34);
  }
  return result;
}

uint64_t *std::unique_ptr<WebCore::DOMTokenList>::operator=[abi:sn180100](uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF *v10;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 48);
    *(_QWORD *)(v4 + 48) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v6)
    {
      v7 = *(WTF::StringImpl ***)(v4 + 24);
      v8 = 8 * v6;
      do
      {
        v9 = *v7;
        *v7 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, a2);
          else
            *(_DWORD *)v9 -= 2;
        }
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
    v10 = *(WTF **)(v4 + 24);
    if ((WTF *)(v4 + 40) != v10 && v10 != 0)
    {
      *(_QWORD *)(v4 + 24) = 0;
      *(_DWORD *)(v4 + 32) = 0;
      WTF::fastFree(v10, a2);
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t std::optional<WebCore::RenderStyle>::operator=[abi:sn180100]<WebCore::RenderStyle,void>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    WebCore::RenderStyle::operator=((_QWORD *)a1, a2);
  }
  else
  {
    *(_DWORD *)a1 = 0;
    v3 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    v4 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)(a1 + 24) = v4;
    v5 = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = 0;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    v6 = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 6) = 0;
    *(_QWORD *)(a1 + 48) = v6;
    v7 = *((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = 0;
    *(_QWORD *)(a1 + 56) = v7;
    *(_BYTE *)(a1 + 64) = 1;
  }
  return a1;
}

double WebCore::HTMLLinkElement::linkLoaded(WebCore::HTMLLinkElement *this)
{
  WebCore::HTMLLinkElement *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v1 = this;
  v2 = *((_BYTE *)this + 291);
  *((_BYTE *)this + 291) = v2 | 4;
  if ((*((_BYTE *)this + 290) & 0x40) == 0 || (v2 & 0x10) != 0)
  {
    {
      this = (WebCore::HTMLLinkElement *)WebCore::Timer::Timer<WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>,WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>>((uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, (uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, (uint64_t)WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::timerFired, 0);
      *(_OWORD *)((char *)this + 72) = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
    }
    v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
      v4 = WebCore::threadGlobalDataSlow(this);
    v5 = *(_QWORD *)(v4 + 40);
    if (!v5)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
      v5 = *(_QWORD *)(v4 + 40);
    }
    return WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::dispatchEventSoon((uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, v1, (WTF::StringImpl **)(v5 + 1104));
  }
  return result;
}

double WebCore::HTMLLinkElement::linkLoadingErrored(WebCore::HTMLLinkElement *this)
{
  WebCore::HTMLLinkElement *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v1 = this;
  if ((*((_BYTE *)this + 290) & 0x40) == 0 || (*((_BYTE *)this + 291) & 0x10) != 0)
  {
    {
      this = (WebCore::HTMLLinkElement *)WebCore::Timer::Timer<WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>,WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>>((uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, (uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, (uint64_t)WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::timerFired, 0);
      *(_OWORD *)((char *)this + 72) = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
    }
    v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
      v3 = WebCore::threadGlobalDataSlow(this);
    v4 = *(_QWORD *)(v3 + 40);
    if (!v4)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
      v4 = *(_QWORD *)(v3 + 40);
    }
    return WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::dispatchEventSoon((uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, v1, (WTF::StringImpl **)(v4 + 784));
  }
  return result;
}

double `non-virtual thunk to'WebCore::HTMLLinkElement::linkLoadingErrored(WebCore::HTMLLinkElement *this)
{
  WebCore::HTMLLinkElement *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v1 = this;
  if ((*((_BYTE *)this + 162) & 0x40) == 0 || (*((_BYTE *)this + 163) & 0x10) != 0)
  {
    {
      this = (WebCore::HTMLLinkElement *)WebCore::Timer::Timer<WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>,WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>>((uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, (uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, (uint64_t)WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::timerFired, 0);
      *(_OWORD *)((char *)this + 72) = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
    }
    v2 = (_QWORD *)((char *)v1 - 128);
    v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
      v4 = WebCore::threadGlobalDataSlow(this);
    v5 = *(_QWORD *)(v4 + 40);
    if (!v5)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
      v5 = *(_QWORD *)(v4 + 40);
    }
    return WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::dispatchEventSoon((uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, v2, (WTF::StringImpl **)(v5 + 784));
  }
  return result;
}

uint64_t WebCore::HTMLLinkElement::relList(WebCore::HTMLLinkElement *this)
{
  uint64_t result;
  WTF::StringImpl *v3;
  uint64_t v4;

  result = *((_QWORD *)this + 35);
  if (!result)
  {
    std::make_unique[abi:sn180100]<WebCore::DOMTokenList,WebCore::HTMLLinkElement &,WTF::LazyNeverDestroyed<WebCore::QualifiedName const,WTF::AnyThreadsAccessTraits> &,WebCore::HTMLLinkElement::relList(void)::$_0>(&v4, (uint64_t)this);
    std::unique_ptr<WebCore::DOMTokenList>::operator=[abi:sn180100]((uint64_t *)this + 35, (WTF::StringImpl *)&v4);
    std::unique_ptr<WebCore::DOMTokenList>::~unique_ptr[abi:sn180100](&v4, v3);
    return *((_QWORD *)this + 35);
  }
  return result;
}

uint64_t WebCore::HTMLLinkElement::startLoadingDynamicSheet(uint64_t this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  _BYTE v6[24];

  if (!*(_BYTE *)(this + 292))
  {
    v1 = (_QWORD *)this;
    *(_BYTE *)(this + 292) = 1;
    v2 = *(_QWORD *)(this + 184);
    v3 = *(_QWORD *)(this + 32);
    if (v3 && (v4 = *(_WORD *)(v3 + 28), (v4 & 8) != 0))
    {
      while ((v4 & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::headTag + 24))
      {
        v3 = *(_QWORD *)(v3 + 32);
        if (v3)
        {
          v4 = *(_WORD *)(v3 + 28);
          if ((v4 & 8) != 0)
            continue;
        }
        goto LABEL_8;
      }
      v5 = v2 + 160;
    }
    else
    {
LABEL_8:
      v5 = v2 + 176;
    }
    return WTF::WeakHashSet<WebCore::Element const,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(v5, v1, (uint64_t)v6);
  }
  return this;
}

BOOL WebCore::HTMLLinkElement::isURLAttribute(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24);
}

WTF::StringImpl *WebCore::HTMLLinkElement::href@<X0>(WebCore::HTMLLinkElement *this@<X0>, WTF::URL *a2@<X8>)
{
  WebCore::Document *v3;
  _QWORD *v4;

  v3 = *(WebCore::Document **)(*((_QWORD *)this + 5) + 8);
  v4 = (_QWORD *)WebCore::Element::attributeWithoutSynchronization((uint64_t)this, &WebCore::HTMLNames::hrefAttr);
  return WebCore::Document::completeURL(v3, v4, (uint64_t)v3 + 848, 0, a2);
}

uint64_t WebCore::HTMLLinkElement::rel(WebCore::HTMLLinkElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return MEMORY[0x1E0CBF2F8];
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_4;
    return MEMORY[0x1E0CBF2F8];
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    return MEMORY[0x1E0CBF2F8];
LABEL_4:
  v4 = v4;
  for (result = v3 + 8; ; result += 16)
  {
    v6 = *(_QWORD *)(result - 8);
    if (v6 == WebCore::HTMLNames::relAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::relAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::relAttr + 32))
    {
      break;
    }
    if (!--v4)
      return MEMORY[0x1E0CBF2F8];
  }
  return result;
}

uint64_t WebCore::HTMLLinkElement::target@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(this + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (_DWORD **)(v4 + 8);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 1);
    if (v7 == WebCore::HTMLNames::targetAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::targetAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::targetAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (v8)
    *v8 += 2;
  *a2 = v8;
  return this;
}

uint64_t WebCore::HTMLLinkElement::type(WebCore::HTMLLinkElement *this)
{
  return WebCore::Element::attributeWithoutSynchronization((uint64_t)this, &WebCore::HTMLNames::typeAttr);
}

uint64_t WebCore::HTMLLinkElement::iconType(WebCore::HTMLLinkElement *this)
{
  int v1;
  int v2;

  v1 = *((unsigned __int8 *)this + 289);
  v2 = v1 != 255;
  if (v1 == 255)
    v1 = 0;
  return v1 | (v2 << 8);
}

WTF::StringImpl *WebCore::HTMLLinkElement::addSubresourceAttributeURLs(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  const WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10[5];
  _BYTE v11[24];

  result = (WTF::StringImpl *)WebCore::StyledElement::addSubresourceAttributeURLs((_QWORD *)a1, (uint64_t)a2);
  if ((*(_WORD *)(a1 + 289) & 0x99FF) != 0xFF)
  {
    result = WebCore::HTMLLinkElement::href((WebCore::HTMLLinkElement *)a1, (WTF::URL *)v10);
    if (v10[0])
    {
      WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::add(a2, (uint64_t)v10, v5, (uint64_t)v11);
      result = v10[0];
      v10[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        else
          *(_DWORD *)result -= 2;
      }
    }
    v7 = *(_QWORD *)(a1 + 200);
    if (v7)
    {
      ++*(_DWORD *)(v7 + 8);
      v8 = *(_QWORD *)(v7 + 24);
      v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v9 = off_1E33C5728;
      *((_QWORD *)v9 + 1) = a2;
      v10[0] = v9;
      WebCore::StyleSheetContents::traverseSubresources(v8, (uint64_t)v10);
      result = v10[0];
      v10[0] = 0;
      if (result)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      if (*(_DWORD *)(v7 + 8) == 1)
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      else
        --*(_DWORD *)(v7 + 8);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLLinkElement::debugDescription@<X0>(WebCore::HTMLLinkElement *this@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _BYTE *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  char v19;
  int v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *result;
  _DWORD *v28;
  _BYTE *v29;
  size_t v30;
  uint64_t v31;
  unsigned __int128 *v32;
  unsigned __int128 *v33;
  unsigned __int128 v34;
  char v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  _DWORD *v38;

  WebCore::Element::debugDescription(this, &v37);
  v4 = *((_QWORD *)this + 13);
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  v8 = (WTF::StringImpl **)(v6 + 8);
  while (1)
  {
    v9 = (uint64_t)*(v8 - 1);
    if (v9 == WebCore::HTMLNames::typeAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v7)
    {
      v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v10 = *v8;
  if (*v8)
    *(_DWORD *)v10 += 2;
  WebCore::HTMLLinkElement::href(this, (WTF::URL *)&v36);
  v12 = v36;
  if (v36)
    *(_DWORD *)v36 += 2;
  v13 = v37;
  if (v37)
  {
    v14 = *((_DWORD *)v37 + 1);
    if (v10)
      goto LABEL_19;
  }
  else
  {
    v14 = 0;
    if (v10)
    {
LABEL_19:
      v15 = *((_DWORD *)v10 + 1);
      if (v12)
        goto LABEL_20;
LABEL_61:
      v16 = 0;
      goto LABEL_21;
    }
  }
  v15 = 0;
  if (!v12)
    goto LABEL_61;
LABEL_20:
  v16 = *((_DWORD *)v12 + 1);
  if (v16 < 0)
    goto LABEL_81;
LABEL_21:
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  v19 = v17;
  if (v15 < 0)
    goto LABEL_81;
  if ((v19 & 1) != 0)
    goto LABEL_81;
  v17 = __OFADD__(v15, v18);
  v20 = v15 + v18;
  if (v17)
    goto LABEL_81;
  v17 = __OFADD__(v20, 1);
  v21 = v20 + 1;
  v22 = v17;
  if (v14 < 0)
    goto LABEL_81;
  if (v22)
    goto LABEL_81;
  v23 = (v14 + v21);
  if (__OFADD__(v14, v21))
    goto LABEL_81;
  if (v37 && (*((_BYTE *)v37 + 16) & 4) == 0)
  {
    v24 = 0;
    goto LABEL_40;
  }
  if (!v10)
  {
    if (v12)
    {
LABEL_39:
      v24 = (*((unsigned __int8 *)v12 + 16) >> 2) & 1;
      goto LABEL_40;
    }
    if (!(_DWORD)v23)
    {
      v28 = (_DWORD *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
LABEL_73:
      *(_QWORD *)a2 = v28;
      goto LABEL_44;
    }
    if ((v23 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v23 + 20));
      v28 = v38;
      if (v38)
      {
        v29 = v38 + 5;
        *v38 = 2;
        v28[1] = v23;
        *((_QWORD *)v28 + 1) = v28 + 5;
        v28[4] = 4;
        if (v13)
        {
          v11 = (_BYTE *)*((_QWORD *)v13 + 1);
          v30 = *((unsigned int *)v13 + 1);
          if ((*((_BYTE *)v13 + 16) & 4) != 0)
          {
            if ((_DWORD)v30)
            {
              if ((_DWORD)v30 == 1)
                *v29 = *v11;
              else
                memcpy(v28 + 5, v11, v30);
            }
          }
          else
          {
            if (v30 < 0x10)
            {
              v32 = (unsigned __int128 *)(v28 + 5);
            }
            else
            {
              v32 = (unsigned __int128 *)&v29[v30 & 0xFFFFFFF0];
              v33 = (unsigned __int128 *)(v28 + 5);
              do
              {
                v34 = (unsigned __int128)vld2q_s8(v11);
                v11 += 32;
                *v33++ = v34;
              }
              while (v33 != v32);
            }
            while (v32 != (unsigned __int128 *)&v29[v30])
            {
              v35 = *v11;
              v11 += 2;
              *(_BYTE *)v32 = v35;
              v32 = (unsigned __int128 *)((char *)v32 + 1);
            }
          }
          v31 = *((unsigned int *)v13 + 1);
        }
        else
        {
          v31 = 0;
        }
        *(_WORD *)&v29[v31] = 8224;
        goto LABEL_73;
      }
    }
LABEL_81:
    *(_QWORD *)a2 = 0;
    goto LABEL_82;
  }
  v25 = *((_DWORD *)v10 + 4);
  v24 = (v25 >> 2) & 1;
  if (v12 && (v25 & 4) != 0)
    goto LABEL_39;
LABEL_40:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(a2, v23, v24, (uint64_t)v37, (uint64_t)v10, (uint64_t)v12);
  if (!*(_QWORD *)a2)
  {
LABEL_82:
    __break(0xC471u);
    JUMPOUT(0x195BFA678);
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)v12 -= 2;
  }
LABEL_44:
  v26 = v36;
  v36 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v11);
      if (!v10)
        goto LABEL_50;
      goto LABEL_48;
    }
    *(_DWORD *)v26 -= 2;
  }
  if (!v10)
    goto LABEL_50;
LABEL_48:
  if (*(_DWORD *)v10 == 2)
    WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v11);
  else
    *(_DWORD *)v10 -= 2;
LABEL_50:
  result = v37;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)v37 -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLMapElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)result = off_1E33C1A90;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 96) = v7;
  *a3 = result;
  return result;
}

void WebCore::HTMLMapElement::~HTMLMapElement(WebCore::HTMLMapElement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Element::~Element((uint64_t)this);
}

{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v4, v5);
}

BOOL WebCore::HTMLMapElement::mapMouseEvent(uint64_t a1, void *a2, int32x2_t *a3, WebCore::HitTestResult *a4)
{
  uint64_t (*v4)();
  int32x2_t *v9;
  __int16 v10;
  BOOL v11;
  int32x2_t *v12;
  _BOOL8 v13;
  __int16 v15;
  __int16 v16;
  int32x2_t *v17;
  __int16 v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  __int16 v24;

  v4 = *(uint64_t (**)())(a1 + 80);
  if (v4)
  {
    while (1)
    {
      v9 = (int32x2_t *)v4;
      v10 = *((_WORD *)v4 + 14);
      if ((v10 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)&v9[12] + 24) == *(_QWORD *)(WebCore::HTMLNames::areaTag + 24))
        break;
      if ((v10 & 4) != 0)
      {
        v4 = (uint64_t (*)())v9[10];
        if (v4)
          continue;
      }
      if (v9 == (int32x2_t *)a1)
      {
LABEL_14:
        v12 = 0;
        goto LABEL_15;
      }
      while (1)
      {
        v4 = (uint64_t (*)())v9[7];
        if (v4)
          break;
        v9 = (int32x2_t *)v9[4];
        if (v9)
          v11 = v9 == (int32x2_t *)a1;
        else
          v11 = 1;
        if (v11)
          goto LABEL_14;
      }
    }
    v12 = 0;
    while (1)
    {
      if (v9[21].i8[0])
      {
        if (WebCore::HTMLAreaElement::mapMouseEvent(v9, (unint64_t)a2, a3, a4))
        {
          v13 = 1;
          if (v12)
            goto LABEL_18;
          return v13;
        }
      }
      else if (!v12)
      {
        v9[3].i32[0] += 2;
        v12 = v9;
      }
      v17 = (int32x2_t *)v9[10];
      if (!v17)
        break;
LABEL_33:
      while (1)
      {
        v9 = v17;
        v18 = v17[3].i16[2];
        if ((v18 & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)&v9[12] + 24) == *(_QWORD *)(WebCore::HTMLNames::areaTag + 24))
        {
          break;
        }
        if ((v18 & 4) != 0)
        {
          v17 = (int32x2_t *)v9[10];
          if (v17)
            continue;
        }
        if (v9 == (int32x2_t *)a1)
          goto LABEL_52;
        while (1)
        {
          v17 = (int32x2_t *)v9[7];
          if (v17)
            break;
          v9 = (int32x2_t *)v9[4];
          if (v9)
            v19 = v9 == (int32x2_t *)a1;
          else
            v19 = 1;
          if (v19)
            goto LABEL_52;
        }
      }
    }
    if (v9 != (int32x2_t *)a1)
    {
      do
      {
        v17 = (int32x2_t *)v9[7];
        if (v17)
          goto LABEL_33;
        v9 = (int32x2_t *)v9[4];
        if (v9)
          v20 = v9 == (int32x2_t *)a1;
        else
          v20 = 1;
      }
      while (!v20);
    }
LABEL_52:
    if (v12)
    {
      WebCore::HitTestResult::setInnerNode(a4, (WebCore::Node *)v12);
      v12[3].i32[0] += 2;
      v21 = *((_QWORD *)a4 + 13);
      *((_QWORD *)a4 + 13) = v12;
      if (v21)
      {
        v22 = *(_DWORD *)(v21 + 24);
        if (v22 == 2)
        {
          v23 = *(_WORD *)(v21 + 30);
          if ((v23 & 0x400) == 0)
          {
            v24 = *(_WORD *)(v21 + 28);
            if ((v24 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v21, a2);
            }
            else
            {
              if ((v24 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v21 + 160) + 16))(*(_QWORD *)(v21 + 160));
                v23 = *(_WORD *)(v21 + 30);
              }
              *(_WORD *)(v21 + 30) = v23 | 0x400;
              (*(void (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
            }
          }
        }
        else
        {
          *(_DWORD *)(v21 + 24) = v22 - 2;
        }
      }
      v4 = WTF::RefPtr<WebCore::HTMLAreaElement,WTF::RawPtrTraits<WebCore::HTMLAreaElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLAreaElement>>::unspecifiedBoolTypeInstance;
      goto LABEL_17;
    }
LABEL_15:
    v4 = 0;
  }
  else
  {
    v12 = 0;
  }
LABEL_17:
  v13 = v4 != 0;
  if (v12)
  {
LABEL_18:
    if (v12[3].i32[0] == 2)
    {
      v15 = v12[3].i16[3];
      if ((v15 & 0x400) == 0)
      {
        v16 = v12[3].i16[2];
        if ((v16 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v12, a2);
        }
        else
        {
          if ((v16 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)&v12[20] + 16))(*(_QWORD *)&v12[20]);
            v15 = v12[3].i16[3];
          }
          v12[3].i16[3] = v15 | 0x400;
          (*(void (**)(int32x2_t *))(*(_QWORD *)v12 + 72))(v12);
        }
      }
    }
    else
    {
      v12[3].i32[0] -= 2;
    }
  }
  return v13;
}

void WebCore::HTMLMapElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  WTF::StringImpl *v11;
  __n128 v12;
  WebCore::TreeScopeOrderedMap *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  if (*(_QWORD *)a2 == WebCore::HTMLNames::idAttr)
  {
    WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, v12);
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3358) & 1) != 0)
      return;
  }
  else if (*(_QWORD *)a2 != WebCore::HTMLNames::nameAttr)
  {
    return;
  }
  if ((*(_BYTE *)(a1 + 22) & 0x18) != 0)
  {
    v13 = *(WebCore::TreeScopeOrderedMap **)(*(_QWORD *)(a1 + 40) + 40);
    if (v13)
    {
      v14 = *(WTF::StringImpl **)(a1 + 112);
      if (v14)
      {
        *(_DWORD *)v14 += 2;
        v24 = v14;
        WebCore::TreeScopeOrderedMap::remove(v13, (const WTF::AtomString *)&v24, (WebCore::Element *)a1);
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v11);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }
  v15 = *a4;
  if (v15)
  {
    v16 = *((unsigned int *)v15 + 1);
    *(_DWORD *)v15 += 2;
    if ((_DWORD)v16)
    {
      v17 = *((_DWORD *)v15 + 4);
      v18 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
      v19 = (v17 & 4) != 0 ? *v18 : *(unsigned __int16 *)v18;
      if (v19 == 35)
      {
        if (v16 < 2)
          goto LABEL_22;
        v21 = v16 - 1;
        v20 = v21;
        if ((v17 & 4) != 0)
        {
          if (v21 >= v21)
          {
            v20 = v21 | 0x100000000;
            goto LABEL_21;
          }
        }
        else if (v21 >= v21)
        {
LABEL_21:
          if ((v20 & 0x100000000) == 0)
          {
            WTF::AtomStringImpl::add();
LABEL_23:
            v22 = v24;
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v11);
            else
              *(_DWORD *)v15 -= 2;
            goto LABEL_25;
          }
LABEL_22:
          WTF::AtomStringImpl::add();
          goto LABEL_23;
        }
        __break(1u);
        return;
      }
    }
    v22 = v15;
  }
  else
  {
    v22 = 0;
  }
LABEL_25:
  v23 = *(WTF::StringImpl **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v11);
    else
      *(_DWORD *)v23 -= 2;
  }
  if ((*(_BYTE *)(a1 + 22) & 0x18) != 0)
    WebCore::TreeScope::addImageMap(*(WebCore::TreeScope **)(a1 + 40), (WebCore::Element *)a1);
}

uint64_t WebCore::HTMLMapElement::areas@<X0>(WebCore::HTMLMapElement *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  WebCore::NodeListsNodeData *v7;
  WTF *v8;
  void *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  WTF::StringImpl *v17;
  BOOL v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v5)
  {
    WebCore::Node::materializeRareData(this);
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v6 = *v5;
  if (!*v5)
  {
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_QWORD *)(v6 + 32) = 0;
    v7 = (WebCore::NodeListsNodeData *)*v5;
    *v5 = v6;
    if (v7)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v7, a2);
      WTF::fastFree(v8, v9);
      v6 = *v5;
    }
  }
  v10 = (uint64_t *)(v6 + 32);
  v11 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v12 = *v10;
  if (*v10
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v6 + 32), 8u, 0), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = ((*((_DWORD *)v11 + 4) >> 8) + 19) & v13;
  v15 = (unsigned __int8 *)(v12 + 24 * v14);
  v16 = *v15;
  v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
  if (*v15)
    v18 = 0;
  else
    v18 = v17 == 0;
  if (v18)
  {
LABEL_25:
    *v15 = 19;
    *((_QWORD *)v15 + 1) = v11;
    *((_QWORD *)v15 + 2) = 0;
    v23 = *v10;
    if (*v10)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v26 = *v10;
    if (*v10)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_39;
    }
    else
    {
      if (3 * v29 > 4 * v28)
      {
LABEL_39:
        result = bmalloc::api::isoAllocate();
        *(_DWORD *)(result + 16) = 1;
        *(_BYTE *)(result + 20) = 0;
        *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0x13;
        *((_DWORD *)this + 6) += 2;
        *(_QWORD *)(result + 24) = this;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)(result + 64) = 0u;
        *(_BYTE *)(result + 80) &= 0xFCu;
        *(_QWORD *)result = off_1E33B3320;
        *(_QWORD *)(result + 8) = 0;
        *((_QWORD *)v15 + 2) = result;
        goto LABEL_40;
      }
      if (!(_DWORD)v29)
      {
        v30 = 8;
        goto LABEL_46;
      }
    }
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_46:
    v15 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(v10, v30, (uint64_t)v15);
    goto LABEL_39;
  }
  v19 = 0;
  v20 = 1;
  while (1)
  {
    v21 = v19;
    v19 = v15;
    if (v16 != 255)
    {
      v19 = v21;
      if (v16 == 19 && v17 == v11)
        break;
    }
    v14 = ((_DWORD)v14 + v20) & v13;
    v15 = (unsigned __int8 *)(v12 + 24 * v14);
    v16 = *v15;
    v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
    ++v20;
    if (*v15)
      v22 = 0;
    else
      v22 = v17 == 0;
    if (v22)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
        --*(_DWORD *)(*v10 - 16);
        v15 = (unsigned __int8 *)v19;
      }
      goto LABEL_25;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = *(_QWORD *)(v12 + 24 * v14 + 16);
  ++*(_DWORD *)(result + 16);
LABEL_40:
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLMapElement::insertedIntoAncestor(WebCore::TreeScope **a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t v5;

  v5 = WebCore::HTMLElement::insertedIntoAncestor((uint64_t)a1, a2, a3);
  if ((a2 & 0x100) != 0)
    WebCore::TreeScope::addImageMap(a1[5], (WebCore::Element *)a1);
  return v5;
}

uint64_t *WebCore::HTMLMapElement::removedFromAncestor(WebCore::Element *a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  WebCore::TreeScopeOrderedMap *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;

  if ((a2 & 0x100) != 0)
  {
    v8 = *(WebCore::TreeScopeOrderedMap **)(*(_QWORD *)(a3 + 40) + 40);
    if (v8)
    {
      v9 = (WTF::StringImpl *)*((_QWORD *)a1 + 14);
      if (v9)
      {
        *(_DWORD *)v9 += 2;
        v12 = v9;
        WebCore::TreeScopeOrderedMap::remove(v8, (const WTF::AtomString *)&v12, a1);
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v10);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
  return WebCore::HTMLElement::removedFromAncestor((uint64_t)a1, a2, a3, a4, a5);
}

uint64_t *WebCore::HTMLMarqueeElement::create@<X0>(WebCore::HTMLMarqueeElement *this@<X0>, const WebCore::QualifiedName *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  const WebCore::QualifiedName *v12;
  uint64_t *result;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v7 = bmalloc::api::isoAllocate();
  v8 = (_QWORD *)v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x181C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = (char *)a2 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*((_DWORD *)a2 + 831);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    ++*v9;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33BC680;
  v10 = v7 + 112;
  v11 = *((_QWORD *)a2 + 88);
  if (v11)
  {
    v12 = *(const WebCore::QualifiedName **)(v11 + 8);
    if (v12)
      a2 = v12;
  }
  *(_QWORD *)(v7 + 112) = &off_1E33A18C0;
  *(_QWORD *)(v7 + 120) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v7 + 112), (const WebCore::QualifiedName *)((char *)a2 + 192));
  v8[14] = &off_1E33A0540;
  v8[16] = 0;
  if (*((_BYTE *)a2 + 470))
  {
    __break(0xC471u);
    goto LABEL_31;
  }
  v22 = v8 + 14;
  result = WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)a2 + 40, (uint64_t *)&v22, (uint64_t)&v21);
  *v8 = off_1E33C3C40;
  v8[14] = &unk_1E33C4158;
  *a3 = v8;
  v15 = v8[15];
  if (!v15)
    return result;
  v16 = *(_QWORD *)(v15 + 8);
  if (!v16)
    return result;
  v17 = *(unsigned __int8 *)(v16 + 178);
  if (*(_BYTE *)(v16 + 178))
  {
    if (v17 == 1 || v17 == 2)
      ++*(_DWORD *)(v16 + 216);
  }
  else
  {
    *(_DWORD *)(v16 - 264) += 2;
  }
  if (*(_BYTE *)(v16 + 179))
  {
    v18 = v8[8] & 0xFFFFFFFFFFFFLL;
    if (v18)
    {
      if ((*(_BYTE *)((v8[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
      {
        if ((*(_BYTE *)((v8[8] & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) != 0)
        {
          if ((*(_BYTE *)((v8[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 8) == 0)
            v18 = 0;
          v19 = *(_QWORD *)(*(_QWORD *)(v18 + 144) + 264);
          if (v19)
          {
            v20 = *(_QWORD *)(v19 + 168);
            if (v20)
            {
              if ((*(_QWORD *)(v20 + 40) & 0xFFFFFFFFFFFFLL) != 0)
                WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v20 + 8));
              *(_BYTE *)(v20 + 94) = 1;
            }
          }
        }
        goto LABEL_12;
      }
      __break(0xC471u);
LABEL_31:
      JUMPOUT(0x195BFB17CLL);
    }
  }
LABEL_12:
  if (*(_BYTE *)(v16 + 180))
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
  return (uint64_t *)WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed((unsigned int *)(v16 - 96), v14);
}

uint64_t WebCore::HTMLMarqueeElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v5;
  BOOL v6;

  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 > 0x1F7)
  {
    if (v2 - 504 > 0x34 || ((1 << (v2 + 8)) & 0x10000000000083) == 0)
    {
      v5 = v2 - 912 > 0x25 || ((1 << (v2 + 112)) & 0x2800000401) == 0;
      if (v5 && v2 - 819 >= 2)
        return 0;
    }
  }
  else if (v2 - 372 >= 2)
  {
    v6 = v2 - 411 > 0x20 || ((1 << (v2 + 101)) & 0x100600001) == 0;
    if (v6 && v2 != 286)
      return 0;
  }
  return result;
}

int *WebCore::HTMLMarqueeElement::collectPresentationalHintsForAttribute(int *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;
  WebCore::MutableStyleProperties *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::MutableStyleProperties *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int *v35;

  v6 = this;
  v7 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v7 > 0x22B)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) > 0x333u)
    {
      if (v7 == 820)
      {
        v23 = *(_QWORD *)a3;
        if (*(_QWORD *)a3)
        {
          v24 = *(unsigned int *)(v23 + 4);
          if ((_DWORD)v24)
            return WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)this, a4, 333, *(unsigned __int16 **)(v23 + 8), v24 | ((unint64_t)((*(_DWORD *)(v23 + 16) >> 2) & 1) << 32), 1, 0, 0, 1);
        }
        return this;
      }
      if (v7 == 912)
      {
        v25 = *(_QWORD *)a3;
        if (*(_QWORD *)a3)
        {
          v26 = *(unsigned int *)(v25 + 4);
          if ((_DWORD)v26)
          {
            WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)this, a4, 407, *(unsigned __int16 **)(v25 + 8), v26 | ((unint64_t)((*(_DWORD *)(v25 + 16) >> 2) & 1) << 32), 1);
            v27 = *(_QWORD *)a3;
            if (*(_QWORD *)a3)
            {
              v11 = *(unsigned __int16 **)(v27 + 8);
              v12 = *(unsigned int *)(v27 + 4) | ((unint64_t)((*(_DWORD *)(v27 + 16) >> 2) & 1) << 32);
            }
            else
            {
              v11 = 0;
              v12 = 0x100000000;
            }
            this = v6;
            v13 = a4;
            v14 = 402;
            return WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)this, v13, v14, v11, v12, 1);
          }
        }
        return this;
      }
      if (v7 != 922)
        return (int *)WebCore::HTMLElement::collectPresentationalHintsForAttribute((WTF::StringImpl *)this, a2, a3, a4);
      v15 = *(_QWORD *)a3;
      if (!*(_QWORD *)a3)
        return this;
      v16 = *(unsigned int *)(v15 + 4);
      if (!(_DWORD)v16)
        return this;
      v11 = *(unsigned __int16 **)(v15 + 8);
      v12 = v16 | ((unint64_t)((*(_DWORD *)(v15 + 16) >> 2) & 1) << 32);
      v13 = a4;
      v14 = 450;
      return WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)this, v13, v14, v11, v12, 1);
    }
    if (v7 != 556)
    {
      if (v7 != 819)
        return (int *)WebCore::HTMLElement::collectPresentationalHintsForAttribute((WTF::StringImpl *)this, a2, a3, a4);
      v17 = *(_QWORD *)a3;
      if (!*(_QWORD *)a3)
        return this;
      v18 = *(unsigned int *)(v17 + 4);
      if (!(_DWORD)v18)
        return this;
      v11 = *(unsigned __int16 **)(v17 + 8);
      v12 = v18 | ((unint64_t)((*(_DWORD *)(v17 + 16) >> 2) & 1) << 32);
      v13 = a4;
      v14 = 331;
      return WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)this, v13, v14, v11, v12, 1);
    }
    this = *(int **)a3;
    if (!*(_QWORD *)a3 || !this[1])
      return this;
    if ((MEMORY[0x19AEA53F4]() & 1) != 0)
    {
LABEL_50:
      WebCore::staticCSSValuePool[5244] += 2;
      v35 = &WebCore::staticCSSValuePool[5244];
      WebCore::MutableStyleProperties::setProperty(a4, 332, &v35, 0);
      this = v35;
      v35 = 0;
      if (this)
      {
        if (*this == 2)
          return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)this, v28);
        else
          *this -= 2;
      }
      return this;
    }
    v29 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
    {
      v30 = 0;
      v31 = 0x100000000;
      return WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)v6, a4, 332, (unsigned __int16 *)v30, v31, 1, 0, 0, 1);
    }
    v32 = *(unsigned int *)(v29 + 4);
    v33 = *(_DWORD *)(v29 + 16);
    if ((_DWORD)v32 != 8)
    {
      v30 = *(_QWORD *)(v29 + 8);
LABEL_63:
      v31 = v32 | ((unint64_t)((v33 >> 2) & 1) << 32);
      return WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)v6, a4, 332, (unsigned __int16 *)v30, v31, 1, 0, 0, 1);
    }
    v30 = *(_QWORD *)(v29 + 8);
    if ((v33 & 4) != 0)
    {
      if ((*(_BYTE *)v30 & 0xDF) != 0x49
        || (*(_BYTE *)(v30 + 1) & 0xDF) != 0x4E
        || (*(_BYTE *)(v30 + 2) & 0xDF) != 0x46
        || (*(_BYTE *)(v30 + 3) & 0xDF) != 0x49
        || (*(_BYTE *)(v30 + 4) & 0xDF) != 0x4E
        || (*(_BYTE *)(v30 + 5) & 0xDF) != 0x49
        || (*(_BYTE *)(v30 + 6) & 0xDF) != 0x54)
      {
        goto LABEL_63;
      }
      v34 = *(unsigned __int8 *)(v30 + 7);
    }
    else
    {
      if ((*(_WORD *)v30 & 0xFFDF) != 0x49
        || (*(_WORD *)(v30 + 2) & 0xFFDF) != 0x4E
        || (*(_WORD *)(v30 + 4) & 0xFFDF) != 0x46
        || (*(_WORD *)(v30 + 6) & 0xFFDF) != 0x49
        || (*(_WORD *)(v30 + 8) & 0xFFDF) != 0x4E
        || (*(_WORD *)(v30 + 10) & 0xFFDF) != 0x49
        || (*(_WORD *)(v30 + 12) & 0xFFDF) != 0x54)
      {
        goto LABEL_63;
      }
      v34 = *(unsigned __int16 *)(v30 + 14);
    }
    if ((v34 & 0xFFFFFFDF) == 0x45)
      goto LABEL_50;
    goto LABEL_63;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) <= 0x1B0u)
  {
    if (v7 == 372)
    {
      if (!*(_QWORD *)a3 || !*(_DWORD *)(*(_QWORD *)a3 + 4))
        return this;
      v19 = a4;
      v20 = 334;
      return (int *)WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)v19, v20, (uint64_t)a3);
    }
    if (v7 == 373)
    {
      if (*(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
        return (int *)WebCore::HTMLElement::addHTMLColorToStyle((uint64_t)this, a4, 61, (uint64_t *)a3);
      return this;
    }
    return (int *)WebCore::HTMLElement::collectPresentationalHintsForAttribute((WTF::StringImpl *)this, a2, a3, a4);
  }
  if (v7 == 433)
  {
    if (!*(_QWORD *)a3 || !*(_DWORD *)(*(_QWORD *)a3 + 4))
      return this;
    v19 = a4;
    v20 = 330;
    return (int *)WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)v19, v20, (uint64_t)a3);
  }
  if (v7 == 504)
  {
    v21 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      return this;
    v22 = *(unsigned int *)(v21 + 4);
    if (!(_DWORD)v22)
      return this;
    v11 = *(unsigned __int16 **)(v21 + 8);
    v12 = v22 | ((unint64_t)((*(_DWORD *)(v21 + 16) >> 2) & 1) << 32);
    v13 = a4;
    v14 = 393;
    return WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)this, v13, v14, v11, v12, 1);
  }
  if (v7 != 511)
    return (int *)WebCore::HTMLElement::collectPresentationalHintsForAttribute((WTF::StringImpl *)this, a2, a3, a4);
  v8 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v9 = *(unsigned int *)(v8 + 4);
    if ((_DWORD)v9)
    {
      WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)this, a4, 405, *(unsigned __int16 **)(v8 + 8), v9 | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32), 1);
      v10 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v11 = *(unsigned __int16 **)(v10 + 8);
        v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v11 = 0;
        v12 = 0x100000000;
      }
      this = v6;
      v13 = a4;
      v14 = 406;
      return WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)this, v13, v14, v11, v12, 1);
    }
  }
  return this;
}

uint64_t WebCore::HTMLMarqueeElement::start(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL;
  if (v1)
  {
    if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      this = 105;
      __break(0xC471u);
    }
    else if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 8) == 0)
        v1 = 0;
      v2 = *(_QWORD *)(*(_QWORD *)(v1 + 144) + 264);
      if (v2)
      {
        this = *(_QWORD *)(v2 + 168);
        if (this)
          return (uint64_t)WebCore::RenderMarquee::start((WebCore::RenderMarquee *)this);
      }
    }
  }
  return this;
}

uint64_t WebCore::HTMLMarqueeElement::stop(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL;
  if (v1)
  {
    if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      this = 105;
      __break(0xC471u);
    }
    else if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 8) == 0)
        v1 = 0;
      v2 = *(_QWORD *)(*(_QWORD *)(v1 + 144) + 264);
      if (v2)
      {
        v3 = *(_QWORD *)(v2 + 168);
        if (v3)
        {
          if ((*(_QWORD *)(v3 + 40) & 0xFFFFFFFFFFFFLL) != 0)
            this = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v3 + 8));
          *(_BYTE *)(v3 + 95) = 1;
        }
      }
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMarqueeElement::stop(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(this - 48) & 0xFFFFFFFFFFFFLL;
  if (v1)
  {
    if ((*(_BYTE *)((*(_QWORD *)(this - 48) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      this = 105;
      __break(0xC471u);
    }
    else if ((*(_BYTE *)((*(_QWORD *)(this - 48) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(this - 48) & 0xFFFFFFFFFFFFLL) + 0x2D) & 8) == 0)
        v1 = 0;
      v2 = *(_QWORD *)(*(_QWORD *)(v1 + 144) + 264);
      if (v2)
      {
        v3 = *(_QWORD *)(v2 + 168);
        if (v3)
        {
          if ((*(_QWORD *)(v3 + 40) & 0xFFFFFFFFFFFFLL) != 0)
            this = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v3 + 8));
          *(_BYTE *)(v3 + 95) = 1;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::HTMLMarqueeElement::scrollAmount(WebCore::HTMLMarqueeElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    goto LABEL_12;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_4;
LABEL_12:
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    goto LABEL_12;
LABEL_4:
  v4 = v4;
  v5 = (uint64_t *)(v3 + 8);
  while (1)
  {
    v6 = *(v5 - 1);
    if (v6 == WebCore::HTMLNames::scrollamountAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::scrollamountAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::scrollamountAttr + 32))
    {
      break;
    }
    v5 += 2;
    if (!--v4)
    {
      v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v7 = *v5;
  if (v7)
  {
    v8 = *(uint64_t **)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v8, v9, &v11);
  if (HIDWORD(v11) == 1)
    return 6;
  if (HIDWORD(v11))
    std::__throw_bad_variant_access[abi:sn180100]();
  result = v11;
  if ((v11 & 0x80000000) != 0)
    return 6;
  return result;
}

WTF::StringImpl *WebCore::HTMLMarqueeElement::setScrollAmount(WebCore::HTMLMarqueeElement *this, int a2)
{
  uint64_t v3;
  __n128 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;

  if (a2 >= 0)
    v3 = a2;
  else
    v3 = 6;
  WTF::AtomString::number((WTF::AtomString *)v3);
  WebCore::Element::setAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::scrollamountAttr, &v7, 0, &v8, v4);
  if (v10 && v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLMarqueeElement::scrollDelay(WebCore::HTMLMarqueeElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    goto LABEL_12;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_4;
LABEL_12:
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    goto LABEL_12;
LABEL_4:
  v4 = v4;
  v5 = (uint64_t *)(v3 + 8);
  while (1)
  {
    v6 = *(v5 - 1);
    if (v6 == WebCore::HTMLNames::scrolldelayAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::scrolldelayAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::scrolldelayAttr + 32))
    {
      break;
    }
    v5 += 2;
    if (!--v4)
    {
      v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v7 = *v5;
  if (v7)
  {
    v8 = *(uint64_t **)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v8, v9, &v11);
  if (HIDWORD(v11) == 1)
    return 85;
  if (HIDWORD(v11))
    std::__throw_bad_variant_access[abi:sn180100]();
  result = v11;
  if ((v11 & 0x80000000) != 0)
    return 85;
  return result;
}

WTF::StringImpl *WebCore::HTMLMarqueeElement::setScrollDelay(WebCore::HTMLMarqueeElement *this, int a2)
{
  uint64_t v3;
  __n128 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;

  if (a2 >= 0)
    v3 = a2;
  else
    v3 = 85;
  WTF::AtomString::number((WTF::AtomString *)v3);
  WebCore::Element::setAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::scrolldelayAttr, &v7, 0, &v8, v4);
  if (v10 && v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLMarqueeElement::loop(WebCore::HTMLMarqueeElement *this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  int v8;
  uint64_t v10;

  v5 = *(_QWORD *)WebCore::Element::getAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::loopAttr, a4, a5, a2);
  if (v5)
  {
    v6 = *(uint64_t **)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v6, v7, &v10);
  if (HIDWORD(v10))
    v8 = 0;
  else
    v8 = v10;
  if (v8 <= 0)
    return 0xFFFFFFFFLL;
  else
    return v8;
}

WebCore::Element *WebCore::HTMLMarqueeElement::setLoop@<X0>(WebCore::Element *this@<X0>, WTF::AtomString *a2@<X1>, _QWORD *a3@<X8>)
{
  char v4;

  if ((int)a2 > 0 || (_DWORD)a2 == -1)
  {
    this = WebCore::Element::setIntegralAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::loopAttr, a2);
    v4 = 0;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    a3[1] = 0;
    v4 = 1;
  }
  *(_BYTE *)a3 = 0;
  *((_BYTE *)a3 + 16) = v4;
  return this;
}

unsigned int *WebCore::HTMLMarqueeElement::didMoveToNewDocument(WebCore::HTMLMarqueeElement *this, WebCore::Document *a2, WebCore::Document *a3, WTF::String *a4)
{
  WebCore::Element::didMoveToNewDocument(this, a2, a3, a4);
  return WebCore::ActiveDOMObject::didMoveToNewDocument((WebCore::HTMLMarqueeElement *)((char *)this + 112), a3);
}

uint64_t WebCore::HTMLMarqueeElement::suspend(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL;
  if (v1)
  {
    if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
    }
    else if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 8) == 0)
        v1 = 0;
      v2 = *(_QWORD *)(*(_QWORD *)(v1 + 144) + 264);
      if (v2)
      {
        v3 = *(_QWORD *)(v2 + 168);
        if (v3)
        {
          if ((*(_QWORD *)(v3 + 40) & 0xFFFFFFFFFFFFLL) != 0)
            result = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v3 + 8));
          *(_BYTE *)(v3 + 94) = 1;
        }
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMarqueeElement::suspend(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result - 48) & 0xFFFFFFFFFFFFLL;
  if (v1)
  {
    if ((*(_BYTE *)((*(_QWORD *)(result - 48) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
    }
    else if ((*(_BYTE *)((*(_QWORD *)(result - 48) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(result - 48) & 0xFFFFFFFFFFFFLL) + 0x2D) & 8) == 0)
        v1 = 0;
      v2 = *(_QWORD *)(*(_QWORD *)(v1 + 144) + 264);
      if (v2)
      {
        v3 = *(_QWORD *)(v2 + 168);
        if (v3)
        {
          if ((*(_QWORD *)(v3 + 40) & 0xFFFFFFFFFFFFLL) != 0)
            result = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v3 + 8));
          *(_BYTE *)(v3 + 94) = 1;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLMarqueeElement::resume(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL;
  if (v1)
  {
    if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      this = 105;
      __break(0xC471u);
    }
    else if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 8) == 0)
        v1 = 0;
      v2 = *(_QWORD *)(*(_QWORD *)(v1 + 144) + 264);
      if (v2)
      {
        this = *(_QWORD *)(v2 + 168);
        if (this)
          return (uint64_t)WebCore::RenderMarquee::updateMarqueePosition((WebCore::RenderMarquee *)this);
      }
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMarqueeElement::resume(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this - 48) & 0xFFFFFFFFFFFFLL;
  if (v1)
  {
    if ((*(_BYTE *)((*(_QWORD *)(this - 48) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      this = 105;
      __break(0xC471u);
    }
    else if ((*(_BYTE *)((*(_QWORD *)(this - 48) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(this - 48) & 0xFFFFFFFFFFFFLL) + 0x2D) & 8) == 0)
        v1 = 0;
      v2 = *(_QWORD *)(*(_QWORD *)(v1 + 144) + 264);
      if (v2)
      {
        this = *(_QWORD *)(v2 + 168);
        if (this)
          return (uint64_t)WebCore::RenderMarquee::updateMarqueePosition((WebCore::RenderMarquee *)this);
      }
    }
  }
  return this;
}

void WebCore::HTMLMaybeFormAssociatedCustomElement::~HTMLMaybeFormAssociatedCustomElement(WebCore::HTMLMaybeFormAssociatedCustomElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::HTMLMaybeFormAssociatedCustomElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x181C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33C1F80;
  *a3 = result;
  return result;
}

BOOL WebCore::HTMLMaybeFormAssociatedCustomElement::isFormListedElement(WebCore::HTMLMaybeFormAssociatedCustomElement *this)
{
  return (*((_BYTE *)this + 23) & 8) != 0 && (*((_QWORD *)this + 9) & 0x3000000000000000) == 0x2000000000000000;
}

BOOL WebCore::HTMLMaybeFormAssociatedCustomElement::isFormAssociatedCustomElement(WebCore::HTMLMaybeFormAssociatedCustomElement *this)
{
  return (*((_BYTE *)this + 23) & 8) != 0 && (*((_QWORD *)this + 9) & 0x3000000000000000) == 0x2000000000000000;
}

BOOL WebCore::HTMLMaybeFormAssociatedCustomElement::isValidatedFormListedElement(WebCore::HTMLMaybeFormAssociatedCustomElement *this)
{
  return (*((_BYTE *)this + 23) & 8) != 0 && (*((_QWORD *)this + 9) & 0x3000000000000000) == 0x2000000000000000;
}

uint64_t WebCore::HTMLMaybeFormAssociatedCustomElement::asFormAssociatedElement(WebCore::HTMLMaybeFormAssociatedCustomElement *this)
{
  uint64_t result;

  if ((*((_BYTE *)this + 23) & 8) == 0 || (*((_QWORD *)this + 9) & 0x3000000000000000) != 0x2000000000000000)
    return 0;
  if (((*(uint64_t (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)this + 856))(this) & 1) != 0)
    return *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x70);
  result = 5670;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::HTMLMaybeFormAssociatedCustomElement::asFormListedElement(WebCore::HTMLMaybeFormAssociatedCustomElement *this)
{
  uint64_t result;

  if ((*((_BYTE *)this + 23) & 8) == 0 || (*((_QWORD *)this + 9) & 0x3000000000000000) != 0x2000000000000000)
    return 0;
  if (((*(uint64_t (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)this + 856))(this) & 1) != 0)
    return *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x70);
  result = 5670;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::HTMLMaybeFormAssociatedCustomElement::asValidatedFormListedElement(WebCore::HTMLMaybeFormAssociatedCustomElement *this)
{
  uint64_t result;

  if ((*((_BYTE *)this + 23) & 8) == 0 || (*((_QWORD *)this + 9) & 0x3000000000000000) != 0x2000000000000000)
    return 0;
  if (((*(uint64_t (**)(void))(*(_QWORD *)this + 856))() & 1) != 0)
    return *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x70);
  result = 5670;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::HTMLMaybeFormAssociatedCustomElement::matchesValidPseudoClass(WebCore::HTMLMaybeFormAssociatedCustomElement *this)
{
  uint64_t result;

  if ((*((_BYTE *)this + 23) & 8) == 0 || (*((_QWORD *)this + 9) & 0x3000000000000000) != 0x2000000000000000)
    return 0;
  if (((*(uint64_t (**)(void))(*(_QWORD *)this + 856))() & 1) != 0)
    return WebCore::ValidatedFormListedElement::matchesValidPseudoClass(*(WebCore::ValidatedFormListedElement **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x70));
  result = 5670;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::HTMLMaybeFormAssociatedCustomElement::matchesInvalidPseudoClass(WebCore::HTMLMaybeFormAssociatedCustomElement *this)
{
  uint64_t result;
  _BYTE *v3;

  if ((*((_BYTE *)this + 23) & 8) == 0 || (*((_QWORD *)this + 9) & 0x3000000000000000) != 0x2000000000000000)
    return 0;
  if (((*(uint64_t (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)this + 856))(this) & 1) != 0)
  {
    v3 = *(_BYTE **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x70);
    result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 272))(v3);
    if ((_DWORD)result)
      return (v3[48] & 1) == 0;
  }
  else
  {
    result = 5670;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::HTMLMaybeFormAssociatedCustomElement::matchesUserValidPseudoClass(WebCore::HTMLMaybeFormAssociatedCustomElement *this)
{
  uint64_t result;
  _BYTE *v3;

  if ((*((_BYTE *)this + 23) & 8) == 0 || (*((_QWORD *)this + 9) & 0x3000000000000000) != 0x2000000000000000)
    return 0;
  if (((*(uint64_t (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)this + 856))(this) & 1) == 0)
  {
    result = 5670;
    __break(0xC471u);
    return result;
  }
  v3 = *(_BYTE **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x70);
  if ((v3[48] & 0x40) == 0)
    return 0;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 272))(v3);
  if ((_DWORD)result)
    return v3[48] & 1;
  return result;
}

uint64_t WebCore::HTMLMaybeFormAssociatedCustomElement::matchesUserInvalidPseudoClass(WebCore::HTMLMaybeFormAssociatedCustomElement *this)
{
  uint64_t result;
  _BYTE *v3;

  if ((*((_BYTE *)this + 23) & 8) == 0 || (*((_QWORD *)this + 9) & 0x3000000000000000) != 0x2000000000000000)
    return 0;
  if (((*(uint64_t (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)this + 856))(this) & 1) == 0)
  {
    result = 5670;
    __break(0xC471u);
    return result;
  }
  v3 = *(_BYTE **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x70);
  if ((v3[48] & 0x40) == 0)
    return 0;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 272))(v3);
  if ((_DWORD)result)
    return (v3[48] & 1) == 0;
  return result;
}

uint64_t WebCore::HTMLMaybeFormAssociatedCustomElement::supportsFocus(WebCore::HTMLMaybeFormAssociatedCustomElement *this)
{
  unint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *((_QWORD *)this + 9);
  if ((*((_BYTE *)this + 23) & 8) != 0 && (v2 & 0x3000000000000000) == 0x2000000000000000)
  {
    if ((v2 & 0xFFFFFFFFFFFFLL) == 0
      || (v6 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 0x58)) == 0
      || (*(_BYTE *)(v6 + 192) & 2) == 0)
    {
      if (((v2 >> 58) & 3) - 1 < 3
        || (v7 = WebCore::Node::computeEditability((uint64_t)this, 0, 1), result = 0, v7)
        && (result = *((_QWORD *)this + 4)) != 0
        && (v8 = WebCore::Node::computeEditability(result, 0, 1), result = 0, !v8))
      {
        if (((*(uint64_t (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)this + 856))(this) & 1) == 0)
        {
          result = 5670;
          __break(0xC471u);
          return result;
        }
        return (*(_BYTE *)(*(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x70) + 48) & 0x18) == 0;
      }
      return result;
    }
    return 1;
  }
  if (((v2 >> 58) & 3) - 1 < 3)
    return 1;
  v4 = WebCore::Node::computeEditability((uint64_t)this, 0, 1);
  result = 0;
  if (v4)
  {
    result = *((_QWORD *)this + 4);
    if (result)
      return WebCore::Node::computeEditability(result, 0, 1) == 0;
  }
  return result;
}

BOOL WebCore::HTMLMaybeFormAssociatedCustomElement::isLabelable(WebCore::HTMLMaybeFormAssociatedCustomElement *this)
{
  return (*((_BYTE *)this + 23) & 8) != 0 && (*((_QWORD *)this + 9) & 0x3000000000000000) == 0x2000000000000000;
}

uint64_t WebCore::HTMLMaybeFormAssociatedCustomElement::isDisabledFormControl(WebCore::HTMLMaybeFormAssociatedCustomElement *this)
{
  uint64_t result;

  if ((*((_BYTE *)this + 23) & 8) == 0 || (*((_QWORD *)this + 9) & 0x3000000000000000) != 0x2000000000000000)
    return 0;
  if (((*(uint64_t (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)this + 856))(this) & 1) != 0)
    return (*(_BYTE *)(*(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x70) + 48) & 0x18) != 0;
  result = 5670;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::HTMLMaybeFormAssociatedCustomElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  char v4;
  char v6;
  uint64_t result;

  v4 = a2;
  v6 = a2;
  WebCore::HTMLElement::insertedIntoAncestor(a1, a2, a3);
  if ((*(_BYTE *)(a1 + 23) & 8) == 0 || (*(_QWORD *)(a1 + 72) & 0x3000000000000000) != 0x2000000000000000)
    return v4 & 1;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 856))(a1) & 1) != 0)
  {
    WebCore::ValidatedFormListedElement::insertedIntoAncestor(*(WebCore::ValidationMessage ***)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x70), v6, a3);
    return v4 & 1;
  }
  result = 5670;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::HTMLMaybeFormAssociatedCustomElement::didFinishInsertingNode(uint64_t this)
{
  uint64_t v1;

  if ((*(_BYTE *)(this + 23) & 8) != 0 && (*(_QWORD *)(this + 72) & 0x3000000000000000) == 0x2000000000000000)
  {
    v1 = this;
    if (((*(uint64_t (**)(void))(*(_QWORD *)this + 856))() & 1) != 0)
    {
      return (uint64_t)WebCore::ValidatedFormListedElement::didFinishInsertingNode(*(WebCore::ValidatedFormListedElement **)((*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFLL) + 0x70));
    }
    else
    {
      this = 5670;
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t WebCore::HTMLMaybeFormAssociatedCustomElement::didMoveToNewDocument(WebCore::HTMLMaybeFormAssociatedCustomElement *this, WebCore::Document *a2, WebCore::Document *a3, WTF::String *a4)
{
  uint64_t result;
  WebCore::FormListedElement *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  result = (uint64_t)WebCore::Element::didMoveToNewDocument(this, a2, a3, a4);
  if ((*((_BYTE *)this + 23) & 8) != 0 && (*((_QWORD *)this + 9) & 0x3000000000000000) == 0x2000000000000000)
  {
    if (((*(uint64_t (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)this + 856))(this) & 1) != 0)
    {
      v6 = *(WebCore::FormListedElement **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x70);
      result = (*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)v6 + 16))(v6);
      v7 = *(_QWORD *)(result + 104);
      if (v7)
      {
        v8 = *(_DWORD *)(v7 + 4);
        if ((v8 & 1) != 0)
        {
          v9 = *(uint64_t **)(v7 + 40);
          LODWORD(v10) = *(_DWORD *)(v7 + 52);
        }
        else
        {
          v9 = (uint64_t *)(v7 + 32);
          LODWORD(v10) = v8 >> 5;
        }
        if ((_DWORD)v10)
        {
          v10 = v10;
          while (1)
          {
            v11 = *v9;
            if (*v9 == WebCore::HTMLNames::formAttr
              || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
              && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
            {
              break;
            }
            v9 += 2;
            if (!--v10)
              return result;
          }
          if ((*(_BYTE *)(result + 22) & 8) != 0)
            return WebCore::FormListedElement::resetFormAttributeTargetObserver(v6);
        }
      }
    }
    else
    {
      result = 5670;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::HTMLMaybeFormAssociatedCustomElement::removedFromAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  char v7;
  uint64_t result;

  v7 = a2;
  result = (uint64_t)WebCore::HTMLElement::removedFromAncestor(a1, a2, a3, a4, a5);
  if ((*(_BYTE *)(a1 + 23) & 8) != 0 && (*(_QWORD *)(a1 + 72) & 0x3000000000000000) == 0x2000000000000000)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 856))(a1) & 1) != 0)
    {
      return WebCore::ValidatedFormListedElement::removedFromAncestor(*(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x70), v7, a3);
    }
    else
    {
      result = 5670;
      __break(0xC471u);
    }
  }
  return result;
}

void WebCore::HTMLMaybeFormAssociatedCustomElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  if ((*(_BYTE *)(a1 + 23) & 8) != 0 && (*(_QWORD *)(a1 + 72) & 0x3000000000000000) == 0x2000000000000000)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 856))(a1) & 1) != 0)
      WebCore::ValidatedFormListedElement::parseAttribute(*(unsigned __int8 **)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x70), a2, (const WTF::AtomString *)a4);
    else
      __break(0xC471u);
  }
}

uint64_t WebCore::HTMLMaybeFormAssociatedCustomElement::finishParsingChildren(WebCore::HTMLMaybeFormAssociatedCustomElement *this)
{
  uint64_t result;

  result = (uint64_t)WebCore::Element::finishParsingChildren(this);
  if ((*((_BYTE *)this + 23) & 8) != 0 && (*((_QWORD *)this + 9) & 0x3000000000000000) == 0x2000000000000000)
  {
    if (((*(uint64_t (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)this + 856))(this) & 1) != 0)
    {
      return (uint64_t)WebCore::FormAssociatedCustomElement::finishParsingChildren(*(WebCore::FormAssociatedCustomElement **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x70));
    }
    else
    {
      result = 5670;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::HTMLMaybeFormAssociatedCustomElement::setInterfaceIsFormAssociated(WebCore::HTMLMaybeFormAssociatedCustomElement *this)
{
  *((_QWORD *)this + 2) |= 0x800000000000000uLL;
  return WebCore::Element::ensureFormAssociatedCustomElement(this);
}

uint64_t WebCore::HTMLMaybeFormAssociatedCustomElement::willUpgradeFormAssociated(WebCore::HTMLMaybeFormAssociatedCustomElement *this)
{
  uint64_t result;
  uint64_t v3;

  *((_QWORD *)this + 2) |= 0x800000000000000uLL;
  WebCore::Element::ensureFormAssociatedCustomElement(this);
  result = (*(uint64_t (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)this + 856))(this);
  if ((result & 1) != 0)
  {
    v3 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x70);
    *(_BYTE *)(v3 + 50) &= 0xFCu;
  }
  else
  {
    result = 5670;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::HTMLMaybeFormAssociatedCustomElement::didUpgradeFormAssociated(WebCore::HTMLMaybeFormAssociatedCustomElement *this)
{
  uint64_t result;

  if (((*(uint64_t (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)this + 856))(this) & 1) != 0)
    return (uint64_t)WebCore::FormAssociatedCustomElement::didUpgrade(*(WebCore::FormAssociatedCustomElement **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x70));
  result = 5670;
  __break(0xC471u);
  return result;
}

uint64_t *WebCore::HTMLMediaElement::allMediaElements(WebCore::HTMLMediaElement *this)
{
  {
    WebCore::HTMLMediaElement::allMediaElements(void)::elements = 0;
  }
  return &WebCore::HTMLMediaElement::allMediaElements(void)::elements;
}

WebCore::HTMLMediaElement *WebCore::HTMLMediaElement::HTMLMediaElement(WebCore::HTMLMediaElement *this, const WebCore::QualifiedName *a2, WebCore::Document *a3, int a4)
{
  _DWORD *v7;
  uint64_t v8;
  WebCore::Document *v9;
  WebCore::Document *v10;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t StatusReg;
  unsigned int *v17;
  _DWORD *v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int *v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  _QWORD *v32;
  unsigned int *v33;
  unsigned int v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  WTF::MediaTime *IdentifierInternal;
  WTF::MediaTime *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  _BOOL4 v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  _BOOL4 v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  uint64_t v87;
  void *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  int i;
  unsigned int v102;
  uint64_t *v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WebCore::InspectorDOMAgent *v126;
  _QWORD v127[4];
  uint64_t v128;

  *(_OWORD *)((char *)this + 8) = xmmword_1968BC9D0;
  *((_QWORD *)this + 3) = 0x1C1C00000002;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = (char *)a3 + 96;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  ++*((_DWORD *)a3 + 831);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v7 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    ++*v7;
  *((_QWORD *)this + 12) = v7;
  *((_QWORD *)this + 13) = 0;
  *(_QWORD *)this = off_1E33BC680;
  v8 = *((_QWORD *)a3 + 88);
  v9 = a3;
  if (v8)
  {
    v10 = *(WebCore::Document **)(v8 + 8);
    if (v10)
      v9 = v10;
    else
      v9 = a3;
  }
  *((_QWORD *)this + 14) = &off_1E33A18C0;
  *((_QWORD *)this + 15) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::HTMLMediaElement *)((char *)this + 112), (WebCore::Document *)((char *)v9 + 192));
  *((_QWORD *)this + 14) = &off_1E33A0540;
  *((_QWORD *)this + 16) = 0;
  if (*((_BYTE *)v9 + 470))
  {
    __break(0xC471u);
    JUMPOUT(0x195BFD778);
  }
  v128 = (uint64_t)this + 112;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v9 + 40, &v128, (uint64_t)v127);
  *((_QWORD *)this + 17) = off_1E33C5F00;
  *((_QWORD *)this + 18) = &unk_1E3407AC8;
  *((_QWORD *)this + 19) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *((_QWORD *)this + 20) = &unk_1E33C4C00;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = off_1E33C4C28;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = &unk_1E33C4EE8;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = off_1E33C4F20;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = &off_1E33C4F48;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = &off_1E33C4F98;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = &off_1E33C5008;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = off_1E33C5058;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = off_1E33C5088;
  *((_QWORD *)this + 37) = 0;
  v12 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = this;
  v13 = (unsigned int *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = v12;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v11);
    }
  }
  *(_QWORD *)this = off_1E33C2470;
  *((_QWORD *)this + 14) = &unk_1E33C2F28;
  *((_QWORD *)this + 17) = &unk_1E33C2F80;
  *((_QWORD *)this + 18) = &unk_1E33C30B8;
  *((_QWORD *)this + 20) = &unk_1E33C31E0;
  *((_QWORD *)this + 22) = &unk_1E33C3208;
  *((_QWORD *)this + 24) = &off_1E33C2470[523];
  *((_QWORD *)this + 26) = &off_1E33C2470[530];
  *((_QWORD *)this + 28) = &off_1E33C2470[535];
  *((_QWORD *)this + 30) = &off_1E33C2470[545];
  *((_QWORD *)this + 32) = &off_1E33C2470[559];
  *((_QWORD *)this + 34) = &off_1E33C2470[569];
  *((_QWORD *)this + 36) = &off_1E33C2470[575];
  *((_QWORD *)this + 38) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  v17 = *(unsigned int **)(StatusReg + 736);
  if (!v17)
    v17 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  v18 = (_DWORD *)((char *)this + 1265);
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 + 1, v17));
  *((_QWORD *)this + 43) = v17;
  *((_QWORD *)this + 38) = off_1E31F7378;
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v20 = off_1E33C5780;
  v20[1] = WebCore::HTMLMediaElement::progressEventTimerFired;
  v20[2] = 0;
  v20[3] = this;
  *((_QWORD *)this + 44) = v20;
  *((_QWORD *)this + 45) = off_1E3407128;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  v21 = *(unsigned int **)(StatusReg + 736);
  if (!v21)
    v21 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  *((_QWORD *)this + 50) = v21;
  *((_QWORD *)this + 45) = off_1E31F7378;
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v23 = off_1E33C5780;
  v23[1] = WebCore::HTMLMediaElement::playbackProgressTimerFired;
  v23[2] = 0;
  v23[3] = this;
  *((_QWORD *)this + 51) = v23;
  *((_QWORD *)this + 52) = off_1E3407128;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  v24 = *(unsigned int **)(StatusReg + 736);
  if (!v24)
    v24 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 + 1, v24));
  *((_QWORD *)this + 57) = v24;
  *((_QWORD *)this + 52) = off_1E31F7378;
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v26 = off_1E33C5780;
  v26[1] = WebCore::HTMLMediaElement::scanTimerFired;
  v26[2] = 0;
  v26[3] = this;
  *((_QWORD *)this + 58) = v26;
  *((_QWORD *)this + 59) = off_1E3407128;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  v27 = *(unsigned int **)(StatusReg + 736);
  if (!v27)
    v27 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  *((_QWORD *)this + 64) = v27;
  *((_QWORD *)this + 59) = off_1E31F7378;
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v29 = off_1E33C5780;
  v29[1] = WebCore::HTMLMediaElement::playbackControlsManagerBehaviorRestrictionsTimerFired;
  v29[2] = 0;
  v29[3] = this;
  *((_QWORD *)this + 65) = v29;
  *((_QWORD *)this + 66) = off_1E3407128;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  v30 = *(unsigned int **)(StatusReg + 736);
  if (!v30)
    v30 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 + 1, v30));
  *((_QWORD *)this + 71) = v30;
  *((_QWORD *)this + 66) = off_1E31F7378;
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v32 = off_1E33C5780;
  v32[1] = WebCore::HTMLMediaElement::seekToPlaybackPositionEndedTimerFired;
  v32[2] = 0;
  v32[3] = this;
  *((_QWORD *)this + 72) = v32;
  *((_QWORD *)this + 73) = off_1E3407128;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  v33 = *(unsigned int **)(StatusReg + 736);
  if (!v33)
    v33 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 + 1, v33));
  *((_QWORD *)this + 78) = v33;
  *((_QWORD *)this + 73) = off_1E31F7378;
  v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v35 = off_1E33C5780;
  v35[1] = WebCore::HTMLMediaElement::checkPlaybackTargetCompatibility;
  v35[2] = 0;
  v35[3] = this;
  *((_QWORD *)this + 79) = v35;
  *((_QWORD *)this + 80) = 0;
  v36 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v36 = 0;
  *((_QWORD *)this + 81) = v36;
  *((_QWORD *)this + 82) = 0;
  v37 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v37 = 0;
  *((_QWORD *)this + 83) = v37;
  *((_QWORD *)this + 84) = 0;
  v38 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v38 = 0;
  *((_QWORD *)this + 85) = v38;
  *((_QWORD *)this + 86) = 0;
  v39 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v39 = 0;
  *((_QWORD *)this + 87) = v39;
  *((_QWORD *)this + 88) = 0;
  v40 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v40 = 0;
  *((_QWORD *)this + 89) = v40;
  *((_QWORD *)this + 90) = 0;
  v41 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v41 = 0;
  *((_QWORD *)this + 91) = v41;
  *((_QWORD *)this + 92) = 0;
  v42 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v42 = 0;
  *((_QWORD *)this + 93) = v42;
  *((_QWORD *)this + 94) = 0;
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v43 = 0;
  *((_QWORD *)this + 95) = v43;
  *((_QWORD *)this + 96) = 0;
  v44 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v44 = 0;
  *((_QWORD *)this + 97) = v44;
  *((_QWORD *)this + 98) = 0;
  v45 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v45 = 0;
  *((_QWORD *)this + 99) = v45;
  *((_QWORD *)this + 100) = 0;
  v46 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v46 = 0;
  *((_QWORD *)this + 101) = v46;
  *((_OWORD *)this + 51) = 0u;
  v47 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v47 = 0;
  *((_QWORD *)this + 104) = v47;
  *((_QWORD *)this + 105) = 0;
  v48 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v48 = 0;
  *((_QWORD *)this + 106) = v48;
  *(_OWORD *)((char *)this + 856) = 0u;
  *((_QWORD *)this + 109) = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 55) = _Q0;
  *((_BYTE *)this + 896) = 1;
  *((_DWORD *)this + 229) = 0;
  *(_OWORD *)((char *)this + 900) = 0u;
  WTF::URL::invalidate((WebCore::HTMLMediaElement *)((char *)this + 912));
  if (WTF::ObjectIdentifierGeneric<WebCore::MediaUniqueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x195BFD798);
  }
  IdentifierInternal = (WTF::MediaTime *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *((_QWORD *)this + 119) = IdentifierInternal;
  *((_OWORD *)this + 60) = 0u;
  *((_DWORD *)this + 244) = 0;
  *((_QWORD *)this + 123) = 0x3FF0000000000000;
  *((_BYTE *)this + 992) = 0;
  *((_QWORD *)this + 125) = 0;
  *((_DWORD *)this + 252) = 10000000;
  *((_BYTE *)this + 1012) = 1;
  *((_QWORD *)this + 127) = 0x7FF0000000000000;
  *((_OWORD *)this + 64) = 0u;
  v55 = (WTF::MediaTime *)WTF::MediaTime::positiveInfiniteTime(IdentifierInternal);
  *((_OWORD *)this + 65) = *(_OWORD *)v55;
  *((_DWORD *)this + 264) = 0;
  *((_QWORD *)this + 136) = 0;
  *((_BYTE *)this + 1096) = 0;
  *(_QWORD *)((char *)this + 1077) = 0;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *(_OWORD *)((char *)this + 1112) = 0u;
  *((_QWORD *)this + 138) = 0;
  *((_BYTE *)this + 1128) = 1;
  *((_QWORD *)this + 142) = 0;
  *((_BYTE *)this + 1144) = 2;
  *(_OWORD *)((char *)this + 1148) = 0u;
  *((_OWORD *)this + 73) = *(_OWORD *)WTF::MediaTime::zeroTime(v55);
  *((_QWORD *)this + 148) = 0;
  *((_DWORD *)this + 298) = 10000000;
  *((_BYTE *)this + 1196) = 1;
  *((_QWORD *)this + 151) = 0;
  *((_QWORD *)this + 152) = 0;
  *((_QWORD *)this + 150) = 0;
  *((_DWORD *)this + 306) = 10000000;
  *((_BYTE *)this + 1228) = 1;
  *((_QWORD *)this + 154) = 0;
  *((_DWORD *)this + 310) = 10000000;
  *((_BYTE *)this + 1244) = 1;
  *((_OWORD *)this + 78) = xmmword_1969F1120;
  *((_BYTE *)this + 1264) = 0;
  v56 = 1121;
  if (a4)
    v56 = 4195425;
  v57 = *(_DWORD *)((_BYTE *)this + 1265) & 0xFF803000 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32) | v56;
  *v18 = *v18 & 0xFF803000 | v56;
  v58 = *((_QWORD *)a3 + 66);
  if (!v58
    || (v59 = *(_QWORD *)(v58 + 8)) == 0
    || (v60 = *(_QWORD *)(v59 + 24)) == 0
    || (v61 = *(_QWORD *)(v60 + 8)) == 0
    || *((_BYTE *)a3 + 3437))
  {
    v62 = v57 & 0xFFC001403461;
    goto LABEL_42;
  }
  v62 = v57 & 0xFFC001403461;
  if ((*(_WORD *)(v61 + 658) & 4) == 0)
  {
LABEL_42:
    v63 = 0xC00800000;
    goto LABEL_43;
  }
  v63 = 0xC00000000;
LABEL_43:
  v64 = v63 | v62;
  *v18 = v64;
  *(_WORD *)((char *)this + 1269) = WORD2(v64);
  v65 = WebCore::Document::topDocument((uint64_t)a3);
  v66 = *(_QWORD *)(v65 + 528);
  if (v66)
  {
    v67 = *(_QWORD *)(v66 + 8);
    if (v67)
    {
      v68 = *(_QWORD *)(*(_QWORD *)(v67 + 280) + 88);
      if (v68)
      {
        if (*(_QWORD *)(v67 + 296) == v65)
        {
          v69 = *(_DWORD *)(v68 + 24);
          *(_DWORD *)(v68 + 24) = v69 + 1;
          v70 = *(unsigned __int8 *)(v68 + 3520);
          if (v69)
          {
            *(_DWORD *)(v68 + 24) = v69;
            if (v70)
              goto LABEL_49;
          }
          else
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v68 + 24))(v68);
            if (v70)
            {
LABEL_49:
              if ((v70 & 0xFE) == 2)
                goto LABEL_50;
              goto LABEL_55;
            }
          }
        }
      }
    }
  }
  if ((*(_QWORD *)(*(_QWORD *)(v65 + 680) + 688) & 0x100000000000) != 0)
  {
LABEL_50:
    v71 = WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8));
    v72 = 0x4000000000;
    if (v71)
      v72 = 0;
    goto LABEL_56;
  }
LABEL_55:
  v72 = 0;
LABEL_56:
  v73 = (*v18 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32)) & 0xFFFFFFBFFFFFFFFFLL | v72;
  *v18 = v73;
  *(_WORD *)((char *)this + 1269) = WORD2(v73);
  v74 = WebCore::Document::topDocument((uint64_t)a3);
  v75 = *(_QWORD *)(v74 + 528);
  if (!v75)
    goto LABEL_64;
  v76 = *(_QWORD *)(v75 + 8);
  if (!v76)
    goto LABEL_64;
  v77 = *(_QWORD *)(*(_QWORD *)(v76 + 280) + 88);
  if (!v77 || *(_QWORD *)(v76 + 296) != v74)
    goto LABEL_64;
  v78 = *(_DWORD *)(v77 + 24);
  *(_DWORD *)(v77 + 24) = v78 + 1;
  v79 = *(unsigned __int8 *)(v77 + 3520);
  if (v78)
    *(_DWORD *)(v77 + 24) = v78;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 24))(v77);
  if (v79 == 3)
    goto LABEL_66;
  if (!v79)
  {
LABEL_64:
    if ((*(_QWORD *)(*(_QWORD *)(v74 + 680) + 688) & 0x200000000000) == 0)
      goto LABEL_65;
LABEL_66:
    v81 = WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8));
    v80 = 0x18000000000;
    if (v81)
      v80 = 0x10000000000;
    goto LABEL_68;
  }
LABEL_65:
  v80 = 0x10000000000;
LABEL_68:
  v82 = (*(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32)) & 0xFFFFF87FFFFFFFFFLL | v80;
  *v18 = v82;
  *(_WORD *)((char *)this + 1269) = WORD2(v82);
  *((_DWORD *)this + 323) = 0;
  *((_QWORD *)this + 162) = 0;
  *((_BYTE *)this + 1304) = 0;
  *((_BYTE *)this + 1312) = 0;
  *((_BYTE *)this + 1288) = 0;
  *(_OWORD *)((char *)this + 1272) = 0u;
  *((_QWORD *)this + 165) = -1;
  *((_DWORD *)this + 332) = 1;
  *((_BYTE *)this + 1332) = 1;
  *((_WORD *)this + 668) = 0;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *((_OWORD *)this + 86) = 0u;
  *(_QWORD *)((char *)this + 1389) = 0;
  *(_OWORD *)((char *)this + 1400) = 0u;
  *(_OWORD *)((char *)this + 1416) = 0u;
  *(_OWORD *)((char *)this + 1426) = 0u;
  *(_OWORD *)((char *)this + 1448) = 0u;
  WTF::URL::invalidate((WebCore::HTMLMediaElement *)((char *)this + 1456));
  *((_BYTE *)this + 1544) = 0;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *(_OWORD *)((char *)this + 1512) = 0u;
  *((_BYTE *)this + 1528) = 0;
  v83 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v83 = off_1E33C57A8;
  v83[1] = this;
  *((_QWORD *)this + 194) = 0;
  *((_QWORD *)this + 195) = v83;
  *((_BYTE *)this + 1568) = 0;
  *((_BYTE *)this + 1656) = 0;
  *((_BYTE *)this + 1688) = 0;
  *((_QWORD *)this + 217) = 0;
  *((_BYTE *)this + 1744) = 0;
  *((_QWORD *)this + 219) = 0;
  *((_WORD *)this + 796) = 0;
  *(_OWORD *)((char *)this + 1576) = 0u;
  *(_OWORD *)((char *)this + 1625) = 0u;
  *((_OWORD *)this + 101) = 0u;
  *((_OWORD *)this + 100) = 0u;
  *(_DWORD *)((char *)this + 1647) = 0;
  *((_DWORD *)this + 411) = 0;
  *((_DWORD *)this + 424) = 0;
  *((_QWORD *)this + 215) = 0;
  *((_DWORD *)this + 432) = 0;
  *(_OWORD *)((char *)this + 1704) = 0u;
  *((_QWORD *)this + 220) = 0x3FF0000000000000;
  *((_WORD *)this + 884) = 0;
  *((_BYTE *)this + 1770) = 0;
  *((_QWORD *)this + 223) = 0;
  *((_BYTE *)this + 1792) = 0;
  *((_BYTE *)this + 1800) = 0;
  *((_BYTE *)this + 1816) = 0;
  *(_QWORD *)((char *)this + 1772) = 0;
  v84 = WebCore::Document::logger(a3);
  v85 = (unsigned int *)(v84 + 8);
  do
    v86 = __ldaxr(v85);
  while (__stlxr(v86 + 1, v85));
  *((_QWORD *)this + 228) = v84;
  *((_QWORD *)this + 229) = WTF::cryptographicallyRandomNumber<unsigned long long>();
  WebCore::RemotePlayback::create(this, (WebCore::RemotePlayback **)this + 230);
  *((_BYTE *)this + 1848) = 0;
  *((_DWORD *)this + 463) = 0;
  {
    WebCore::HTMLMediaElement::allMediaElements(void)::elements = 0;
  }
  v87 = *((_QWORD *)this + 37);
  if (!v87)
  {
    v87 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v87 = 1;
    *(_QWORD *)(v87 + 8) = this;
    v89 = (unsigned int *)*((_QWORD *)this + 37);
    *((_QWORD *)this + 37) = v87;
    if (v89)
    {
      do
      {
        v90 = __ldaxr(v89);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v89));
      if (!v91)
      {
        atomic_store(1u, v89);
        WTF::fastFree((WTF *)v89, v88);
      }
      v87 = *((_QWORD *)this + 37);
    }
  }
  do
    v92 = __ldaxr((unsigned int *)v87);
  while (__stlxr(v92 + 1, (unsigned int *)v87));
  v93 = WebCore::HTMLMediaElement::allMediaElements(void)::elements;
  if (WebCore::HTMLMediaElement::allMediaElements(void)::elements
    || (WTF::HashTable<WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>>>::rehash(8u),
        (v93 = WebCore::HTMLMediaElement::allMediaElements(void)::elements) != 0))
  {
    v94 = *(_DWORD *)(v93 - 8);
  }
  else
  {
    v94 = 0;
  }
  v95 = 0;
  v96 = *(_QWORD *)(v87 + 8);
  v97 = (~(v96 << 32) + v96) ^ ((unint64_t)(~(v96 << 32) + v96) >> 22);
  v98 = 9 * ((v97 + ~(v97 << 13)) ^ ((v97 + ~(v97 << 13)) >> 8));
  v99 = (v98 ^ (v98 >> 15)) + ~((v98 ^ (v98 >> 15)) << 27);
  v100 = (v99 >> 31) ^ v99;
  for (i = 1; ; ++i)
  {
    v102 = v100 & v94;
    v103 = (uint64_t *)(v93 + 8 * v102);
    v104 = *v103;
    if (*v103 != -1)
      break;
    v95 = (uint64_t *)(v93 + 8 * v102);
LABEL_88:
    v100 = i + v102;
  }
  if (!v104)
  {
    if (v95)
    {
      *v95 = 0;
      --*(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 16);
      *v95 = v87;
    }
    else
    {
      *v103 = v87;
    }
    if (WebCore::HTMLMediaElement::allMediaElements(void)::elements)
      v107 = *(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 12) + 1;
    else
      v107 = 1;
    *(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 12) = v107;
    if (WebCore::HTMLMediaElement::allMediaElements(void)::elements)
      v108 = *(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 12);
    else
      v108 = 0;
    v109 = (*(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 16) + v108);
    v110 = *(unsigned int *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 4);
    if (v110 > 0x400)
    {
      if (v110 > 2 * v109)
        goto LABEL_109;
    }
    else
    {
      if (3 * v110 > 4 * v109)
        goto LABEL_109;
      if (!(_DWORD)v110)
      {
        v111 = 8;
        goto LABEL_108;
      }
    }
    v111 = (_DWORD)v110 << (6 * *(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 12) >= (2 * v110));
LABEL_108:
    WTF::HashTable<WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>>>::rehash(v111);
    goto LABEL_109;
  }
  if (*(_QWORD *)(v104 + 8) != v96)
    goto LABEL_88;
  if (v87)
  {
    do
    {
      v105 = __ldaxr((unsigned int *)v87);
      v106 = v105 - 1;
    }
    while (__stlxr(v106, (unsigned int *)v87));
    if (!v106)
    {
      atomic_store(1u, (unsigned int *)v87);
      WTF::fastFree((WTF *)v87, v95);
    }
  }
LABEL_109:
  v112 = *((_QWORD *)this + 228);
  v113 = *((_QWORD *)this + 229);
  v127[0] = "HTMLMediaElement";
  v127[1] = 17;
  v127[2] = "HTMLMediaElement";
  v127[3] = v113;
  if (*(_BYTE *)(v112 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v127);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v116 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    v117 = *(_QWORD *)(v116 + 528);
    if (v117)
    {
      v118 = *(_QWORD *)(v117 + 8);
      if (v118)
      {
        v119 = *(_QWORD *)(v118 + 24);
        if (v119)
        {
          v120 = *(_QWORD *)(v119 + 8);
          if (v120)
            goto LABEL_128;
        }
      }
    }
    v121 = *(_QWORD *)(v116 + 2632);
    if (v121)
    {
      v122 = *(_QWORD *)(v121 + 8);
      if (v122)
      {
        v123 = *(_QWORD *)(v122 + 528);
        if (v123)
        {
          v124 = *(_QWORD *)(v123 + 8);
          if (v124)
          {
            v125 = *(_QWORD *)(v124 + 24);
            if (v125)
            {
              v120 = *(_QWORD *)(v125 + 8);
              if (v120)
              {
LABEL_128:
                v126 = *(WebCore::InspectorDOMAgent **)(*(_QWORD *)(*(_QWORD *)(v120 + 80) + 8) + 40);
                if (v126)
                  WebCore::InspectorDOMAgent::addEventListenersToNode(v126, this);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::HTMLMediaElement::progressEventTimerFired(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;

  if (*(_DWORD *)(this + 900) == 2)
  {
    v1 = this;
    WebCore::HTMLMediaElement::updateSleepDisabling((WTF **)this);
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 1136) + 72) + 264))(*(_QWORD *)(*(_QWORD *)(v1 + 1136) + 72));
    if ((_DWORD)this)
    {
      v2 = *(_QWORD *)(v1 + 1136);
      v3 = *(_QWORD *)(v1 + 296);
      if (v3)
        goto LABEL_14;
      v3 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v3 = 1;
      *(_QWORD *)(v3 + 8) = v1;
      v5 = *(unsigned int **)(v1 + 296);
      *(_QWORD *)(v1 + 296) = v3;
      if (!v5)
        goto LABEL_14;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v4);
      }
      v3 = *(_QWORD *)(v1 + 296);
      if (v3)
      {
LABEL_14:
        do
          v8 = __ldaxr((unsigned int *)v3);
        while (__stlxr(v8 + 1, (unsigned int *)v3));
      }
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v9 = &off_1E33C5AD0;
      v9[1] = v1;
      v9[2] = v3;
      v10 = (uint64_t)v9;
      (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v2 + 72) + 632))(*(_QWORD *)(v2 + 72), &v10);
      this = v10;
      v10 = 0;
      if (this)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

void WebCore::HTMLMediaElement::playbackProgressTimerFired(WebCore::HTMLMediaElement *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  int v22;

  if ((*((_BYTE *)this + 1244) & 1) != 0)
  {
    v2 = (_QWORD *)((char *)this + 1232);
    v18 = (const char *)WebCore::HTMLMediaElement::currentMediaTime(this);
    v19 = v3;
    v4 = WTF::MediaTime::compare((WTF::MediaTime *)&v18, (WebCore::HTMLMediaElement *)((char *)this + 1232));
    if ((v4 & 0x80000000) == 0)
    {
      v5 = *((_QWORD *)this + 177);
      if (v5)
        v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 256) + 40))(*(_QWORD *)(v5 + 256));
      else
        v6 = *((double *)this + 109);
      if (v6 > 0.0)
      {
        v7 = (_QWORD *)WTF::MediaTime::invalidTime((WTF::MediaTime *)v4);
        v8 = *(_QWORD *)((char *)v7 + 5);
        *v2 = *v7;
        *(_QWORD *)((char *)this + 1237) = v8;
        if (!*((_QWORD *)this + 177) && (*(_DWORD *)((_BYTE *)this + 1265) & 0x400) == 0)
          WebCore::HTMLMediaElement::pauseInternal(this);
      }
    }
  }
  WebCore::HTMLMediaElement::scheduleTimeupdateEvent(this, 1);
  v9 = *((_QWORD *)this + 177);
  if (v9)
    (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 256) + 40))(*(_QWORD *)(v9 + 256));
  else
    v10 = *((double *)this + 109);
  if (v10 != 0.0)
  {
    v18 = (const char *)WebCore::HTMLMediaElement::currentMediaTime(this);
    v19 = v11;
    WebCore::HTMLMediaElement::updateActiveTextTrackCues((uint64_t)this, (const WTF::MediaTime *)&v18);
    v12 = (_DWORD *)*((_QWORD *)this + 144);
    if (v12)
    {
      ++v12[2];
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 24))(v12);
      if (v12[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      else
        --v12[2];
    }
    if ((*(_DWORD *)((_BYTE *)this + 1265) & 0x800) == 0
      && (*((_DWORD *)this + 323) & 0xFFFFFFFE) == 2
      && (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1360))(this)
       - *((double *)this + 128) > 10.0)
    {
      if (*((_DWORD *)this + 323) == 3)
        v13 = 2;
      else
        v13 = 1;
      WebCore::HTMLMediaElement::handleAutoplayEvent(this, v13);
      v22 = 0;
      v14 = *((_QWORD *)this + 228);
      v15 = *((_QWORD *)this + 229);
      v18 = "HTMLMediaElement";
      v19 = 17;
      v20 = "setAutoplayEventPlaybackState";
      v21 = v15;
      if (*(_BYTE *)(v14 + 12))
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::HTMLMediaElement::AutoplayEventPlaybackState>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v18, &v22);
        v17 = v22;
        *((_DWORD *)this + 323) = v22;
        if (v17 == 1)
        {
          WebCore::HTMLMediaElement::dispatchPlayPauseEventsIfNeedsQuirks(this, v16);
          WebCore::HTMLMediaElement::handleAutoplayEvent(this, 0);
        }
      }
      else
      {
        *((_DWORD *)this + 323) = 0;
      }
    }
  }
}

uint64_t WebCore::HTMLMediaElement::scanTimerFired(WebCore::HTMLMediaElement *this)
{
  __n128 v2;
  double v3;
  int v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;

  if (*((_DWORD *)this + 314))
  {
    v3 = (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1408))(this);
    v4 = *((_DWORD *)this + 315);
    v5 = *((_QWORD *)this + 142);
    v6 = 0.0;
    if (v5)
    {
      v7 = (*(double (**)(_QWORD))(**(_QWORD **)(v5 + 72) + 544))(*(_QWORD *)(v5 + 72));
      v8 = *((_QWORD *)this + 142);
      if (v8)
        v6 = (*(double (**)(_QWORD))(**(_QWORD **)(v8 + 72) + 536))(*(_QWORD *)(v8 + 72));
    }
    else
    {
      v7 = 0.0;
    }
    v2.n128_f64[0] = fmin(fabs(v3 + v3), 8.0);
    if (!v4)
      v2.n128_f64[0] = -v2.n128_f64[0];
    if (v2.n128_f64[0] < v7)
      v2.n128_f64[0] = v7;
    if (v6 < v2.n128_f64[0])
      v2.n128_f64[0] = v6;
    v10 = 177;
  }
  else
  {
    v9 = dbl_1969F1130[*((_DWORD *)this + 315) == 1];
    v2.n128_f64[0] = v9 + (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1360))(this);
    v10 = 171;
  }
  return (*(uint64_t (**)(WebCore::HTMLMediaElement *, __n128))(*(_QWORD *)this + 8 * v10))(this, v2);
}

unsigned int *WebCore::HTMLMediaElement::playbackControlsManagerBehaviorRestrictionsTimerFired(unsigned int *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)();

  v1 = (uint64_t)this;
  v2 = (unsigned int *)**((_QWORD **)this + 95);
  if (!v2 || (v3 = atomic_load(v2), v3 == 1))
  {
    v4 = *((_QWORD *)this + 200);
    if (!v4)
    {
      this = WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)this);
      v4 = *(_QWORD *)(v1 + 1600);
    }
    if ((*(_BYTE *)(v4 + 89) & 0x20) != 0)
    {
      v5 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v5 = off_1E33C5E90;
      *(_QWORD *)(v5 + 8) = v1;
      v6 = (uint64_t (**)())v5;
      WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(v1, 9, v1 + 752, &v6);
      this = (unsigned int *)v6;
      v6 = 0;
      if (this)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

uint64_t WebCore::HTMLMediaElement::checkPlaybackTargetCompatibility(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  char v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  uint64_t (**v15[4])();

  if (*(_BYTE *)(this + 1697))
  {
    v1 = this;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(this + 1136) + 72) + 752))(*(_QWORD *)(*(_QWORD *)(this + 1136) + 72));
    if ((this & 1) == 0)
    {
      if (!*(_BYTE *)(v1 + 1688) && *(_DWORD *)(v1 + 1056) == 2)
      {
        v2 = WebCore::HTMLMediaElement::currentMediaTime((WebCore::HTMLMediaElement *)v1);
        v4 = v3;
        v5 = (*(double (**)(uint64_t))(*(_QWORD *)v1 + 1408))(v1);
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1384))(v1);
        if (!*(_BYTE *)(v1 + 1688))
          *(_BYTE *)(v1 + 1688) = 1;
        *(_QWORD *)(v1 + 1656) = v2;
        *(_QWORD *)(v1 + 1664) = v4;
        *(double *)(v1 + 1672) = v5;
        *(_BYTE *)(v1 + 1680) = v6;
        if ((WebCore::HTMLMediaElement::havePotentialSourceChild((WebCore::HTMLMediaElement *)v1, v7) & 1) != 0)
        {
          v8 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v8 = off_1E33C58C0;
          *(_QWORD *)(v8 + 8) = WebCore::HTMLMediaElement::loadNextSourceChild;
          *(_QWORD *)(v8 + 16) = 0;
          *(_QWORD *)(v8 + 24) = v1;
          v15[0] = (uint64_t (**)())v8;
          WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(v1, 9, v1 + 784, v15);
          this = (uint64_t)v15[0];
          v15[0] = 0;
          if (this)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          return this;
        }
      }
      v9 = *(_QWORD *)(v1 + 1824);
      v10 = *(uint64_t (***)())(v1 + 1832);
      v15[0] = (uint64_t (**)())"HTMLMediaElement";
      v15[1] = (uint64_t (**)())17;
      v15[2] = (uint64_t (**)())"checkPlaybackTargetCompatibility";
      v15[3] = v10;
      if (*(_BYTE *)(v9 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [66]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)v15, "player incompatible, calling setShouldPlayToPlaybackTarget(false)");
      *(_BYTE *)(v1 + 1649) = 1;
      *(_BYTE *)(v1 + 1656) = 0;
      *(_BYTE *)(v1 + 1688) = 0;
      v11 = *(_QWORD *)(v1 + 1136);
      if (!v11)
        return (*(uint64_t (**)(_QWORD, _QWORD))(*MEMORY[0x48] + 776))(MEMORY[0x48], 0);
      v12 = *(unsigned __int8 **)v11;
      if (__ldaxr(*(unsigned __int8 **)v11))
      {
        __clrex();
      }
      else if (!__stxr(1u, v12))
      {
        goto LABEL_17;
      }
      MEMORY[0x19AEA534C](v12);
LABEL_17:
      ++*((_QWORD *)v12 + 1);
      v14 = __ldxr(v12);
      if (v14 == 1)
      {
        if (!__stlxr(0, v12))
          goto LABEL_22;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_22:
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v11 + 72) + 776))(*(_QWORD *)(v11 + 72), 0);
      return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v11);
    }
  }
  return this;
}

char *WebCore::HTMLMediaElement::logChannel(WebCore::HTMLMediaElement *this)
{
  return &WebCore::LogMedia;
}

unsigned int *WebCore::HTMLMediaElement::initializeMediaSession(WebCore::HTMLMediaElement *this)
{
  WebCore::MediaElementSession *v2;
  WebCore::MediaElementSession *v3;
  WebCore::MediaElementSession *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  WebCore::Quirks *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  WebCore::PlatformMediaSessionManager *v38;
  uint64_t v39;
  unsigned int *result;
  void *v41;
  WTF *v42;
  void *v43;
  __int16 v44;
  __int16 v45;

  v2 = (WebCore::MediaElementSession *)WTF::fastMalloc((WTF *)0x198);
  v3 = WebCore::MediaElementSession::MediaElementSession(v2, this);
  v4 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
  *((_QWORD *)this + 200) = v3;
  if (v4)
  {
    WebCore::MediaElementSession::~MediaElementSession(v4);
    WTF::fastFree(v5, v6);
    v3 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
  }
  WebCore::MediaElementSession::addBehaviorRestriction((uint64_t)v3, 4);
  WebCore::MediaElementSession::addBehaviorRestriction(*((_QWORD *)this + 200), 8);
  WebCore::MediaElementSession::addBehaviorRestriction(*((_QWORD *)this + 200), 256);
  WebCore::MediaElementSession::addBehaviorRestriction(*((_QWORD *)this + 200), 0x2000);
  WebCore::MediaElementSession::addBehaviorRestriction(*((_QWORD *)this + 200), 0x4000);
  v7 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  v8 = *(_QWORD *)(v7 + 528);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 8)) == 0 || (v10 = *(_QWORD *)(v9 + 24)) == 0)
  {
    v11 = 0;
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
  {
LABEL_9:
    v12 = 1;
    goto LABEL_10;
  }
  v12 = 0;
  ++*(_DWORD *)v11;
LABEL_10:
  v13 = *(_QWORD *)(v7 + 680);
  if ((*(_QWORD *)(v13 + 680) & 0x40000000) != 0)
  {
    WebCore::MediaElementSession::addBehaviorRestriction(*((_QWORD *)this + 200), 2048);
    v13 = *(_QWORD *)(v7 + 680);
  }
  if ((*(_QWORD *)(v13 + 688) & 0x80000000000) != 0)
    WebCore::MediaElementSession::addBehaviorRestriction(*((_QWORD *)this + 200), 0x10000);
  v14 = *(_QWORD *)(v7 + 528);
  if ((!v14 || (v15 = *(_QWORD *)(v14 + 8)) == 0 || (v16 = *(_QWORD *)(v15 + 120)) == 0 || !*(_QWORD *)(v16 + 8))
    && (*(_WORD *)(v7 + 3358) & 0x10) != 0)
  {
    goto LABEL_44;
  }
  v17 = (unsigned int *)((char *)this + 1265);
  if (((*(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32)) & 0x8000000000) != 0)
  {
    WebCore::MediaElementSession::addBehaviorRestriction(*((_QWORD *)this + 200), 2);
    if ((*(_QWORD *)(*(_QWORD *)(v7 + 680) + 688) & 0x400000000000) != 0)
      WebCore::MediaElementSession::addBehaviorRestriction(*((_QWORD *)this + 200), 1);
  }
  if (v11 && (*(_BYTE *)(v11 + 1168) & 4) != 0)
    WebCore::MediaElementSession::addBehaviorRestriction(*((_QWORD *)this + 200), 0x8000);
  v18 = *v17 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
  if ((v18 & 0x4000000000) != 0)
  {
    WebCore::MediaElementSession::addBehaviorRestriction(*((_QWORD *)this + 200), 32);
    v18 = *v17 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
  }
  if ((v18 & 0xC000000000) != 0)
    WebCore::MediaElementSession::addBehaviorRestriction(*((_QWORD *)this + 200), 64);
  v19 = *(_QWORD *)(v7 + 528);
  if (!v19)
    goto LABEL_37;
  v20 = *(_QWORD *)(v19 + 8);
  if (!v20)
    goto LABEL_37;
  v21 = *(_QWORD *)(*(_QWORD *)(v20 + 280) + 88);
  if (!v21 || *(_QWORD *)(v20 + 296) != v7)
    goto LABEL_37;
  v22 = *(_DWORD *)(v21 + 24);
  *(_DWORD *)(v21 + 24) = v22 + 1;
  v23 = *(unsigned __int8 *)(v21 + 3520);
  if (v22)
    *(_DWORD *)(v21 + 24) = v22;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
  if (v23 == 3)
    goto LABEL_38;
  if (!v23)
  {
LABEL_37:
    if ((*(_QWORD *)(*(_QWORD *)(v7 + 680) + 688) & 0x100) == 0)
    {
LABEL_38:
      v24 = *(WebCore::Quirks **)(v7 + 688);
      if (!v24)
        v24 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)v7);
      if (!WebCore::Quirks::needsPreloadAutoQuirk(v24))
        WebCore::MediaElementSession::addBehaviorRestriction(*((_QWORD *)this + 200), 1024);
    }
  }
  if ((*(_QWORD *)(*(_QWORD *)(v7 + 680) + 688) & 8) != 0)
    WebCore::MediaElementSession::addBehaviorRestriction(*((_QWORD *)this + 200), 4096);
LABEL_44:
  v25 = *(_QWORD *)(v7 + 528);
  if (!v25)
    goto LABEL_52;
  v26 = *(_QWORD *)(v25 + 8);
  if (!v26)
    goto LABEL_52;
  v27 = *(_QWORD *)(*(_QWORD *)(v26 + 280) + 88);
  if (!v27 || *(_QWORD *)(v26 + 296) != v7)
    goto LABEL_52;
  v28 = *(_DWORD *)(v27 + 24);
  *(_DWORD *)(v27 + 24) = v28 + 1;
  v29 = *(unsigned __int8 *)(v27 + 3520);
  if (v28)
    *(_DWORD *)(v27 + 24) = v28;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
  if (v29 == 3)
    goto LABEL_61;
  if (!v29)
  {
LABEL_52:
    if ((*(_QWORD *)(*(_QWORD *)(v7 + 680) + 688) & 0x200000000000) != 0)
      goto LABEL_61;
  }
  v30 = *(_QWORD *)(v7 + 528);
  if (!v30)
    goto LABEL_72;
  v31 = *(_QWORD *)(v30 + 8);
  if (!v31)
    goto LABEL_72;
  v32 = *(_QWORD *)(*(_QWORD *)(v31 + 280) + 88);
  if (!v32 || *(_QWORD *)(v31 + 296) != v7)
    goto LABEL_72;
  v33 = *(_DWORD *)(v32 + 24);
  *(_DWORD *)(v32 + 24) = v33 + 1;
  v34 = *(unsigned __int8 *)(v32 + 3520);
  if (v33)
  {
    *(_DWORD *)(v32 + 24) = v33;
    if (v34)
      goto LABEL_59;
LABEL_72:
    if ((*(_QWORD *)(*(_QWORD *)(v7 + 680) + 688) & 0x100000000000) != 0)
      goto LABEL_61;
    goto LABEL_60;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
  if (!v34)
    goto LABEL_72;
LABEL_59:
  if ((v34 & 0xFE) != 2)
LABEL_60:
    WebCore::MediaElementSession::removeBehaviorRestriction(*((WTF::MonotonicTime **)this + 200), 4);
LABEL_61:
  WebCore::HTMLMediaElement::registerWithDocument(this, (WebCore::Document *)v7);
  v35 = *((_QWORD *)this + 200);
  WebCore::PlatformMediaSession::clientWillBeginAutoplaying(v35);
  *(_BYTE *)(v35 + 177) = 0;
  if ((*(_QWORD *)(v35 + 360) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*(_QWORD *)(v35 + 360) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v35 + 328));
  }
  v36 = *(_QWORD *)(v35 + 80);
  v37 = WebCore::MediaElementSession::preferredBufferingPolicy((WebCore::MediaElementSession *)v35);
  v38 = (WebCore::PlatformMediaSessionManager *)WebCore::HTMLMediaElement::setBufferingPolicy(v36, v37);
  v39 = WebCore::PlatformMediaSessionManager::sharedManager(v38);
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 192))(v39);
  if ((v12 & 1) == 0)
  {
    if (*(_DWORD *)v11 == 1)
    {
      WebCore::Page::~Page(v11);
      result = (unsigned int *)WTF::fastFree(v42, v43);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    v44 = *(_WORD *)(v7 + 30);
    if ((v44 & 0x400) == 0)
    {
      v45 = *(_WORD *)(v7 + 28);
      if ((v45 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v7, v41);
      }
      else
      {
        if ((v45 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
          v44 = *(_WORD *)(v7 + 30);
        }
        *(_WORD *)(v7 + 30) = v44 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      }
    }
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return result;
}

WebCore::Page *WebCore::HTMLMediaElement::registerWithDocument(WebCore::HTMLMediaElement *this, WebCore::Document *a2)
{
  WebCore::MediaElementSession *v4;
  _BYTE v6[24];

  WTF::WeakHashSet<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::HTMLMediaElement>((uint64_t)a2 + 1856, this, (uint64_t)v6);
  v4 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
  if (!v4)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v4 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
  }
  WebCore::Document::addPlaybackTargetPickerClient((uint64_t)a2, (uint64_t)v4);
  WebCore::MediaElementSession::ensureIsObservingMediaSession(v4);
  if ((*(_DWORD *)((_BYTE *)this + 1265) & 4) != 0)
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)a2 + 1960, (_QWORD *)this + 20, (uint64_t)v6);
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)a2 + 1912, (_QWORD *)this + 26, (uint64_t)v6);
  if (*((_BYTE *)this + 1396))
    WebCore::Document::registerForCaptionPreferencesChangedCallbacks(a2, this);
  WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>((uint64_t)a2 + 1840, this, (uint64_t)v6);
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)a2 + 2664, (_QWORD *)this + 24, (uint64_t)v6);
  return WebCore::Document::updateIsPlayingMedia(a2);
}

unsigned int *WebCore::HTMLMediaElement::setShouldDelayLoadEvent(unsigned int *this, unint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  double v13;
  __int16 v14;
  __int16 v15;
  _QWORD v16[4];
  unsigned __int8 v17;

  v17 = a2;
  v2 = (unsigned int *)((char *)this + 1265);
  v3 = *(unsigned int *)((char *)this + 1265);
  v4 = v3 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
  if (((((v3 & 8) == 0) ^ a2) & 1) == 0)
  {
    v5 = this;
    v6 = *((_QWORD *)this + 228);
    v7 = *((_QWORD *)this + 229);
    v16[0] = "HTMLMediaElement";
    v16[1] = 17;
    v16[2] = "setShouldDelayLoadEvent";
    v16[3] = v7;
    if (*(_BYTE *)(v6 + 12))
    {
      this = (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v16);
      a2 = v17;
      v4 = *v2 | ((unint64_t)*((unsigned __int16 *)v2 + 2) << 32);
    }
    *((_WORD *)v2 + 2) = WORD2(v4);
    *v2 = v4 & 0xFFFFFFF7 | (8 * (a2 & 0x1F));
    v8 = *(_QWORD *)(*((_QWORD *)v5 + 5) + 8);
    v9 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v9 + 2;
    if ((_DWORD)a2)
    {
      ++*(_DWORD *)(v8 + 3328);
      if (v9)
      {
LABEL_6:
        *(_DWORD *)(v8 + 24) = v9;
        return this;
      }
    }
    else
    {
      v10 = *(_DWORD *)(v8 + 3328) - 1;
      *(_DWORD *)(v8 + 3328) = v10;
      v11 = *(_QWORD *)(v8 + 528);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8) && v10 == 0;
        if (v12
          && ((*(_QWORD *)(v8 + 2152) & 0xFFFFFFFFFFFFLL) == 0
           || *(double *)((*(_QWORD *)(v8 + 2152) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
        {
          *(_QWORD *)(v8 + 2144) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
          this = (unsigned int *)WebCore::TimerBase::setNextFireTime(v8 + 2120, v13 + 0.0);
          v9 = *(_DWORD *)(v8 + 24) - 2;
        }
      }
      if (v9)
        goto LABEL_6;
    }
    v14 = *(_WORD *)(v8 + 30);
    if ((v14 & 0x400) == 0)
    {
      v15 = *(_WORD *)(v8 + 28);
      if ((v15 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v8, (void *)a2);
      }
      else
      {
        if ((v15 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
          v14 = *(_WORD *)(v8 + 30);
        }
        *(_WORD *)(v8 + 30) = v14 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
      }
    }
  }
  return this;
}

unsigned int *WebCore::HTMLMediaElement::updateMediaState(WebCore::HTMLMediaElement *this)
{
  unsigned int *result;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __int16 v6;
  __int16 v7;

  result = (unsigned int *)(*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1848))(this);
  if (*((_DWORD *)this + 411) != (_DWORD)result)
  {
    *((_DWORD *)this + 411) = (_DWORD)result;
    v3 = *((_QWORD *)this + 200);
    if (!v3)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(this);
      v3 = *((_QWORD *)this + 200);
      LODWORD(result) = *((_DWORD *)this + 411);
    }
    WebCore::Document::playbackTargetPickerClientStateDidChange(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 80) + 40) + 8), v3, result);
    v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v4 + 24) += 2;
    result = (unsigned int *)WebCore::Document::updateIsPlayingMedia((WebCore::Document *)v4);
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      v6 = *(_WORD *)(v4 + 30);
      if ((v6 & 0x400) == 0)
      {
        v7 = *(_WORD *)(v4 + 28);
        if ((v7 & 0xF000) == 0x9000)
        {
          return WebCore::Document::removedLastRef((WebCore::Document *)v4, v5);
        }
        else
        {
          if ((v7 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
            v6 = *(_WORD *)(v4 + 30);
          }
          *(_WORD *)(v4 + 30) = v6 | 0x400;
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
        }
      }
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::webkitSetMediaKeys(uint64_t this, WebCore::WebKitMediaKeys *a2)
{
  WebCore::WebKitMediaKeys *v2;
  WebCore::HTMLMediaElement *v3;
  WebCore::WebKitMediaKeys *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  void *v7;
  WTF *v8;
  void *v9;
  WTF *v10;
  void *v11;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 8) + 680) + 712) & 0x100) != 0)
  {
    v2 = a2;
    v3 = (WebCore::HTMLMediaElement *)this;
    v4 = *(WebCore::WebKitMediaKeys **)(this + 1576);
    if (v4 != a2)
    {
      if (v4)
      {
        ++*((_DWORD *)v4 + 2);
        WebCore::WebKitMediaKeys::setMediaElement(v4, 0);
        if (*((_DWORD *)v4 + 2) == 1)
        {
          WebCore::WebKitMediaKeys::~WebKitMediaKeys(v4, a2);
          WTF::fastFree(v6, v7);
          if (!v2)
          {
LABEL_8:
            this = *((_QWORD *)v3 + 197);
            *((_QWORD *)v3 + 197) = v2;
            if (this)
            {
              if (*(_DWORD *)(this + 8) == 1)
              {
                WebCore::WebKitMediaKeys::~WebKitMediaKeys((WebCore::WebKitMediaKeys *)this, a2);
                this = WTF::fastFree(v8, v9);
                v2 = (WebCore::WebKitMediaKeys *)*((_QWORD *)v3 + 197);
                if (!v2)
                  return this;
                goto LABEL_12;
              }
              --*(_DWORD *)(this + 8);
            }
            if (!v2)
              return this;
LABEL_12:
            ++*((_DWORD *)v2 + 2);
            this = (uint64_t)WebCore::WebKitMediaKeys::setMediaElement(v2, v3);
            if (*((_DWORD *)v2 + 2) == 1)
            {
              WebCore::WebKitMediaKeys::~WebKitMediaKeys(v2, v5);
              return WTF::fastFree(v10, v11);
            }
            else
            {
              --*((_DWORD *)v2 + 2);
            }
            return this;
          }
LABEL_7:
          ++*((_DWORD *)v2 + 2);
          goto LABEL_8;
        }
        --*((_DWORD *)v4 + 2);
      }
      if (!v2)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  return this;
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::~HTMLMediaElement(WebCore::HTMLMediaElement *this, void *a2)
{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 112), a2);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 136), a2);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 144), a2);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 160), a2);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 176), a2);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 192), a2);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 208), a2);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 224), a2);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 240), a2);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 256), a2);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 272), a2);
}

{
  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 288), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 136), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 144), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 160), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 176), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 192), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 208), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 224), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 240), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 256), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 272), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement((WebCore::HTMLMediaElement *)((char *)this - 288), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::HTMLMediaElement::playerIdentifier(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 142);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 1152))(*(_QWORD *)(v1 + 72));
  else
    return 0;
}

uint64_t WebCore::HTMLMediaElement::bestMediaElementForRemoteControls@<X0>(WebCore::PlatformMediaSessionManager *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  WTF *v14;
  uint64_t v15;

  v15 = a2;
  v4 = WebCore::PlatformMediaSessionManager::sharedManager(a1);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E33C57D0;
  v5[1] = &v15;
  v13 = v5;
  WebCore::PlatformMediaSessionManager::bestEligibleSessionForRemoteControls(v4, &v13, &v14);
  v7 = v13;
  v13 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  result = (uint64_t)v14;
  if (!v14)
  {
    *a3 = 0;
    return result;
  }
  v9 = *((_QWORD *)v14 + 1);
  if (!v9)
  {
    *a3 = 0;
    v14 = 0;
    do
    {
LABEL_10:
      v11 = __ldaxr((unsigned int *)result);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)result));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v6);
    }
    return result;
  }
  if ((***(unsigned int (****)(_QWORD))(v9 + 32))(*(_QWORD *)(v9 + 32)) - 1 >= 3)
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  result = (uint64_t)v14;
  v10 = *(_QWORD *)(v9 + 80);
  *(_DWORD *)(v10 + 24) += 2;
  *a3 = v10;
  v14 = 0;
  if (result)
    goto LABEL_10;
  return result;
}

BOOL WebCore::HTMLMediaElement::isNowPlayingEligible(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL8 hasNowPlayingInfo;
  WTF *v8;
  void *v9;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = (*(_DWORD *)v4)++;
          if (*(_BYTE *)(v4 + 1095))
          {
            hasNowPlayingInfo = 0;
            if (v5)
            {
LABEL_7:
              *(_DWORD *)v4 = v5;
              return hasNowPlayingInfo;
            }
          }
          else
          {
            hasNowPlayingInfo = WebCore::MediaElementSession::hasNowPlayingInfo(*((WebCore::MediaElementSession **)this
                                                                                + 200));
            v5 = *(_DWORD *)v4 - 1;
            if (*(_DWORD *)v4 != 1)
              goto LABEL_7;
          }
          WebCore::Page::~Page(v4);
          WTF::fastFree(v8, v9);
          return hasNowPlayingInfo;
        }
      }
    }
  }
  return WebCore::MediaElementSession::hasNowPlayingInfo(*((WebCore::MediaElementSession **)this + 200));
}

BOOL `non-virtual thunk to'WebCore::HTMLMediaElement::isNowPlayingEligible(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL8 hasNowPlayingInfo;
  WTF *v8;
  void *v9;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 13) + 8) + 528);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = (*(_DWORD *)v4)++;
          if (*(_BYTE *)(v4 + 1095))
          {
            hasNowPlayingInfo = 0;
            if (v5)
            {
LABEL_7:
              *(_DWORD *)v4 = v5;
              return hasNowPlayingInfo;
            }
          }
          else
          {
            hasNowPlayingInfo = WebCore::MediaElementSession::hasNowPlayingInfo(*((WebCore::MediaElementSession **)this
                                                                                + 182));
            v5 = *(_DWORD *)v4 - 1;
            if (*(_DWORD *)v4 != 1)
              goto LABEL_7;
          }
          WebCore::Page::~Page(v4);
          WTF::fastFree(v8, v9);
          return hasNowPlayingInfo;
        }
      }
    }
  }
  return WebCore::MediaElementSession::hasNowPlayingInfo(*((WebCore::MediaElementSession **)this + 182));
}

uint64_t WebCore::HTMLMediaElement::nowPlayingInfo@<X0>(WebCore::MediaElementSession **this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::MediaElementSession::computeNowPlayingInfo(this[200], a2);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::nowPlayingInfo@<X0>(WebCore::MediaElementSession **this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::MediaElementSession::computeNowPlayingInfo(this[182], a2);
}

void WebCore::HTMLMediaElement::selectBestMediaSession(uint64_t *a1@<X1>, unsigned int a2@<W2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char canShowControlsManager;
  unsigned __int8 v16;
  char v17;
  char v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  char v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  WTF *v34;
  unsigned int *v35;
  unsigned int v36;
  int v37;
  char *v38;
  __int128 v39;
  char v40;
  WTF *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  __int16 v47;
  __int16 v48;
  WTF *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  WTF *v60;
  WTF *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned __int8 v66;
  WTF *v67;
  __int128 v68;
  unsigned __int8 v69;
  WTF *v70;
  uint64_t v71;
  _QWORD v72[2];

  v3 = *((unsigned int *)a1 + 3);
  if (!(_DWORD)v3)
  {
    *a3 = 0;
    return;
  }
  v66 = 0;
  v70 = 0;
  v71 = 0;
  v5 = *a1;
  v6 = *a1 + 8 * v3;
  do
  {
    if (*(_QWORD *)v5)
    {
      v7 = *(_QWORD *)(*(_QWORD *)v5 + 8);
      if (v7 && (***(unsigned int (****)(_QWORD))(v7 + 32))(*(_QWORD *)(v7 + 32)) - 1 >= 3)
      {
LABEL_6:
        __break(0xC471u);
        JUMPOUT(0x195BFF218);
      }
    }
    else
    {
      v7 = 0;
    }
    v8 = *(_QWORD *)(v7 + 80);
    *(_DWORD *)(v8 + 24) += 2;
    v9 = *(_QWORD *)(v7 + 16);
    if (v9)
      goto LABEL_117;
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = v7;
    v11 = *(unsigned int **)(v7 + 16);
    *(_QWORD *)(v7 + 16) = v9;
    if (!v11)
      goto LABEL_117;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v10);
    }
    v9 = *(_QWORD *)(v7 + 16);
    if (v9)
    {
LABEL_117:
      do
        v14 = __ldaxr((unsigned int *)v9);
      while (__stlxr(v14 + 1, (unsigned int *)v9));
    }
    v67 = (WTF *)v9;
    LODWORD(v68) = a2;
    *((_QWORD *)&v68 + 1) = *(_QWORD *)(v7 + 256);
    canShowControlsManager = WebCore::MediaElementSession::canShowControlsManager(v7, a2);
    v16 = v69;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1800))(v8) & 1) != 0)
    {
      v17 = 2;
    }
    else if ((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        goto LABEL_6;
      if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
        || (*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195BFF238);
      }
      v17 = 2 * ((*(_WORD *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x4C) & 6) == 2);
    }
    else
    {
      v17 = 0;
    }
    if (WebCore::isElementLargeEnoughForMainContent(*(_QWORD *)(v7 + 80), 0))
      v19 = 4;
    else
      v19 = 0;
    v20 = *(_QWORD *)(v7 + 80);
    if ((*(int (**)(uint64_t))(*(_QWORD *)v20 + 1352))(v20) >= 1)
    {
      v22 = *(_QWORD *)(v20 + 1152);
      if (v22)
      {
        v23 = *(uint64_t (**)(void))(*(_QWORD *)v22 + 40);
      }
      else
      {
        v27 = *(_QWORD *)(v20 + 1136);
        if (!v27 || *(int *)(v20 + 904) < 1)
        {
          v28 = (uint64_t *)WTF::MediaTime::invalidTime(0);
          v24 = *v28;
          v25 = v28[1];
          goto LABEL_36;
        }
        v23 = *(uint64_t (**)(void))(**(_QWORD **)(v27 + 72) + 336);
      }
      v24 = v23();
LABEL_36:
      v72[0] = v24;
      v72[1] = v25;
      v26 = 8
          * (WTF::MediaTime::compare((WTF::MediaTime *)v72, (const WTF::MediaTime *)&WebCore::isElementLongEnoughForMainContent(WebCore::HTMLMediaElement const&)::YouveGotMailDuration) == 1);
      goto LABEL_37;
    }
    v26 = 0;
LABEL_37:
    if ((*(_DWORD *)(v8 + 1265) & 2) != 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 1280))(v8))
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 1472))(v8))
        v29 = 0;
      else
        v29 = 16;
    }
    else
    {
      v29 = 0;
    }
    v69 = v16 & 0xC0 | canShowControlsManager | v17 | v19 | v26 | v29 | (*(_DWORD *)(v8 + 1265) >> 21) & 0x20;
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      v47 = *(_WORD *)(v8 + 30);
      if ((v47 & 0x400) == 0)
      {
        v48 = *(_WORD *)(v8 + 28);
        if ((v48 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v8, v21);
        }
        else
        {
          if ((v48 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
            v47 = *(_WORD *)(v8 + 30);
          }
          *(_WORD *)(v8 + 30) = v47 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
        }
      }
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
    if ((v69 & 1) == 0)
    {
      if (a2 != 2)
      {
        if (a2 == 1)
        {
          v30 = (v69 >> 4) & 1;
LABEL_62:
          v66 |= v30;
          goto LABEL_63;
        }
        if ((v69 & 2) != 0)
        {
          v30 = (v69 >> 2) & 1;
          goto LABEL_62;
        }
      }
      LOBYTE(v30) = 0;
      goto LABEL_62;
    }
    v31 = HIDWORD(v71);
    if (HIDWORD(v71) == (_DWORD)v71)
    {
      v32 = WTF::Vector<WebCore::MediaElementSessionInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v70, HIDWORD(v71) + 1, (unint64_t)&v67);
      v33 = HIDWORD(v71);
      v34 = v70;
      v35 = *(unsigned int **)v32;
      if (*(_QWORD *)v32)
      {
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 + 1, v35));
        v37 = HIDWORD(v71);
      }
      else
      {
        v37 = HIDWORD(v71);
      }
      v38 = (char *)v34 + 32 * v33;
      *(_QWORD *)v38 = v35;
      v39 = *(_OWORD *)(v32 + 8);
      v40 = *(_BYTE *)(v32 + 24);
    }
    else
    {
      v41 = v70;
      v42 = (unsigned int *)v67;
      if (v67)
      {
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 + 1, v42));
        v37 = HIDWORD(v71);
      }
      else
      {
        v37 = HIDWORD(v71);
      }
      v38 = (char *)v41 + 32 * v31;
      *(_QWORD *)v38 = v42;
      v39 = v68;
      v40 = v69;
    }
    v38[24] = v40;
    *(_OWORD *)(v38 + 8) = v39;
    HIDWORD(v71) = v37 + 1;
LABEL_63:
    v44 = (unsigned int *)v67;
    v67 = 0;
    if (v44)
    {
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
      {
        atomic_store(1u, v44);
        WTF::fastFree((WTF *)v44, v21);
      }
    }
    v5 += 8;
  }
  while (v5 != v6);
  if (!HIDWORD(v71))
  {
    *a3 = 0;
    goto LABEL_106;
  }
  v49 = v70;
  v67 = (WTF *)WebCore::preferMediaControlsForCandidateSessionOverOtherCandidateSession;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*,false>((uint64_t)v70, (_QWORD *)v70 + 4 * HIDWORD(v71), (uint64_t (**)(uint64_t, uint64_t))&v67, 126 - 2 * __clz(HIDWORD(v71)), 1);
  v50 = *(_QWORD *)v49;
  if (*(_QWORD *)v49)
  {
    do
      v51 = __ldaxr((unsigned int *)v50);
    while (__stlxr(v51 + 1, (unsigned int *)v50));
    if ((((*((_BYTE *)v49 + 24) & 0x12) == 0) & v66) != 0 || (v52 = *(_QWORD *)(v50 + 8)) == 0)
    {
      v53 = 0;
    }
    else
    {
      v53 = *(_QWORD *)(v52 + 16);
      if (v53)
        goto LABEL_118;
      v53 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v53 = 1;
      *(_QWORD *)(v53 + 8) = v52;
      v54 = *(unsigned int **)(v52 + 16);
      *(_QWORD *)(v52 + 16) = v53;
      if (!v54)
        goto LABEL_118;
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        atomic_store(1u, v54);
        WTF::fastFree((WTF *)v54, v21);
      }
      v53 = *(_QWORD *)(v52 + 16);
      if (v53)
      {
LABEL_118:
        do
          v57 = __ldaxr((unsigned int *)v53);
        while (__stlxr(v57 + 1, (unsigned int *)v53));
      }
    }
    *a3 = v53;
    do
    {
      v58 = __ldaxr((unsigned int *)v50);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, (unsigned int *)v50));
    if (!v59)
    {
      atomic_store(1u, (unsigned int *)v50);
      WTF::fastFree((WTF *)v50, v21);
    }
  }
  else
  {
    *a3 = 0;
  }
  v60 = v70;
  if (HIDWORD(v71))
  {
    v61 = (WTF *)((char *)v70 + 32 * HIDWORD(v71));
    do
    {
      v62 = *(unsigned int **)v60;
      *(_QWORD *)v60 = 0;
      if (v62)
      {
        do
        {
          v63 = __ldaxr(v62);
          v64 = v63 - 1;
        }
        while (__stlxr(v64, v62));
        if (!v64)
        {
          atomic_store(1u, v62);
          WTF::fastFree((WTF *)v62, v21);
        }
      }
      v60 = (WTF *)((char *)v60 + 32);
    }
    while (v60 != v61);
LABEL_106:
    v60 = v70;
  }
  if (v60)
    WTF::fastFree(v60, v21);
}

BOOL WebCore::preferMediaControlsForCandidateSessionOverOtherCandidateSession(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  char v4;
  unsigned int v5;
  BOOL v7;

  v2 = *(_DWORD *)(a1 + 8);
  if ((v2 | 2) == 2 && (v3 = *(_BYTE *)(a1 + 24) & 2, ((*(unsigned __int8 *)(a2 + 24) >> 1) & 1) != v3 >> 1))
  {
    v7 = v3 == 0;
  }
  else
  {
    if ((v2 - 1) > 1)
      return *(double *)(a1 + 16) > *(double *)(a2 + 16);
    v4 = *(_BYTE *)(a1 + 24);
    v5 = *(unsigned __int8 *)(a2 + 24);
    if (((v5 >> 2) & 1) == (v4 & 4) >> 2)
    {
      if (v2 != 2 || ((v5 >> 5) & 1) == (v4 & 0x20) >> 5)
        return *(double *)(a1 + 16) > *(double *)(a2 + 16);
      v7 = (v4 & 0x20) == 0;
    }
    else
    {
      v7 = (v4 & 4) == 0;
    }
  }
  return !v7;
}

uint64_t WebCore::HTMLMediaElement::mediaSession(WebCore::HTMLMediaElement *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 200);
  if (!result)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    return *((_QWORD *)this + 200);
  }
  return result;
}

void WebCore::HTMLMediaElement::didMoveToNewDocument(WebCore::HTMLMediaElement *this, WebCore::Document *a2, WebCore::Document *a3)
{
  WTF::MonotonicTime *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD **v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD **v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD **v25;
  uint64_t v26;
  _DWORD *v27;
  WTF::String *v28;
  void *v29;
  _QWORD v30[4];

  v6 = (WTF::MonotonicTime *)WebCore::ActiveDOMObject::didMoveToNewDocument((WebCore::HTMLMediaElement *)((char *)this + 112), a3);
  v7 = *((_QWORD *)this + 228);
  v8 = *((_QWORD *)this + 229);
  v30[0] = "HTMLMediaElement";
  v30[1] = 17;
  v30[2] = "didMoveToNewDocument";
  v30[3] = v8;
  if (*(_BYTE *)(v7 + 12))
    v6 = (WTF::MonotonicTime *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v30);
  if ((*(_DWORD *)((_BYTE *)this + 1265) & 8) != 0)
  {
    v9 = *((_DWORD *)a2 + 832) - 1;
    *((_DWORD *)a2 + 832) = v9;
    v10 = *((_QWORD *)a2 + 66);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8) && v9 == 0;
      if (v11
        && ((*((_QWORD *)a2 + 269) & 0xFFFFFFFFFFFFLL) == 0
         || *(double *)((*((_QWORD *)a2 + 269) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
      {
        *((_QWORD *)a2 + 268) = 0;
        WTF::MonotonicTime::now(v6);
        WebCore::TimerBase::setNextFireTime((uint64_t)a2 + 2120, v12 + 0.0);
      }
    }
    ++*((_DWORD *)a3 + 832);
  }
  v13 = *((_QWORD *)this + 168);
  if (v13)
  {
    ++*(_DWORD *)(v13 + 24);
    WebCore::ActiveDOMObject::didMoveToNewDocument((WebCore::ActiveDOMObject *)(v13 + 32), a3);
    v14 = *(unsigned int *)(v13 + 68);
    if ((_DWORD)v14)
    {
      v15 = *(_DWORD ***)(v13 + 56);
      v16 = 8 * v14;
      do
      {
        v17 = *v15;
        if (*v15)
          ++v17[4];
        (*(void (**)(_DWORD *, WebCore::Document *))(*(_QWORD *)v17 + 24))(v17, a3);
        if (v17[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
        else
          --v17[4];
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    if (*(_DWORD *)(v13 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
    else
      --*(_DWORD *)(v13 + 24);
  }
  v18 = *((_QWORD *)this + 169);
  if (v18)
  {
    ++*(_DWORD *)(v18 + 24);
    WebCore::ActiveDOMObject::didMoveToNewDocument((WebCore::ActiveDOMObject *)(v18 + 32), a3);
    v19 = *(unsigned int *)(v18 + 68);
    if ((_DWORD)v19)
    {
      v20 = *(_DWORD ***)(v18 + 56);
      v21 = 8 * v19;
      do
      {
        v22 = *v20;
        if (*v20)
          ++v22[4];
        (*(void (**)(_DWORD *, WebCore::Document *))(*(_QWORD *)v22 + 24))(v22, a3);
        if (v22[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
        else
          --v22[4];
        ++v20;
        v21 -= 8;
      }
      while (v21);
    }
    if (*(_DWORD *)(v18 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
    else
      --*(_DWORD *)(v18 + 24);
  }
  v23 = *((_QWORD *)this + 170);
  if (v23)
  {
    ++*(_DWORD *)(v23 + 24);
    WebCore::ActiveDOMObject::didMoveToNewDocument((WebCore::ActiveDOMObject *)(v23 + 32), a3);
    v24 = *(unsigned int *)(v23 + 68);
    if ((_DWORD)v24)
    {
      v25 = *(_DWORD ***)(v23 + 56);
      v26 = 8 * v24;
      do
      {
        v27 = *v25;
        if (*v25)
          ++v27[4];
        (*(void (**)(_DWORD *, WebCore::Document *))(*(_QWORD *)v27 + 24))(v27, a3);
        if (v27[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 16))(v27);
        else
          --v27[4];
        ++v25;
        v26 -= 8;
      }
      while (v26);
    }
    if (*(_DWORD *)(v23 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 72))(v23);
    else
      --*(_DWORD *)(v23 + 24);
  }
  WebCore::HTMLMediaElement::unregisterWithDocument(this, a2);
  WebCore::HTMLMediaElement::registerWithDocument(this, a3);
  WebCore::Element::didMoveToNewDocument(this, a2, a3, v28);
  WebCore::HTMLMediaElement::updateShouldAutoplay(this, v29);
  WebCore::HTMLMediaElement::visibilityStateChanged(this);
}

WTF::StringImpl *WebCore::HTMLMediaElement::updateShouldAutoplay(WTF::StringImpl *this, void *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v3 = this;
    v4 = *(_DWORD *)(v2 + 4);
    if ((v4 & 1) != 0)
    {
      v5 = *(uint64_t **)(v2 + 40);
      LODWORD(v6) = *(_DWORD *)(v2 + 52);
      if (!(_DWORD)v6)
        return this;
    }
    else
    {
      v5 = (uint64_t *)(v2 + 32);
      LODWORD(v6) = v4 >> 5;
      if (!(_DWORD)v6)
        return this;
    }
    v6 = v6;
    while (1)
    {
      v7 = *v5;
      if (*v5 == WebCore::HTMLNames::autoplayAttr
        || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::autoplayAttr + 24)
        && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::autoplayAttr + 32))
      {
        break;
      }
      v5 += 2;
      if (!--v6)
        return this;
    }
    this = (WTF::StringImpl *)*((_QWORD *)this + 200);
    if (!this)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(v3);
      this = (WTF::StringImpl *)*((_QWORD *)v3 + 200);
    }
    if ((*((_BYTE *)this + 89) & 8) != 0 || *((_BYTE *)v3 + 1730))
    {
      this = (WTF::StringImpl *)WebCore::MediaElementSession::autoplayPermitted(this, a2);
      if ((_DWORD)this)
      {
        if (*((_BYTE *)v3 + 1730))
        {
          *((_BYTE *)v3 + 1730) = 0;
          v8 = *((_QWORD *)v3 + 200);
          if (!v8)
          {
            WebCore::HTMLMediaElement::initializeMediaSession(v3);
            v8 = *((_QWORD *)v3 + 200);
          }
          return WebCore::PlatformMediaSession::endInterruption(v8, 1u);
        }
        else if ((*(_DWORD *)((_BYTE *)v3 + 1265) & 2) == 0)
        {
          return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v3 + 2576))(v3);
        }
      }
      else
      {
        this = (WTF::StringImpl *)*((_QWORD *)v3 + 200);
        if (!this)
        {
          WebCore::HTMLMediaElement::initializeMediaSession(v3);
          this = (WTF::StringImpl *)*((_QWORD *)v3 + 200);
        }
        if (*((_BYTE *)this + 48) != 4)
        {
          if (*((_BYTE *)v3 + 1730))
          {
            *((_BYTE *)v3 + 1730) = 0;
            WebCore::PlatformMediaSession::endInterruption((uint64_t)this, 0);
            this = (WTF::StringImpl *)*((_QWORD *)v3 + 200);
            *((_BYTE *)v3 + 1730) = 1;
            if (!this)
            {
              WebCore::HTMLMediaElement::initializeMediaSession(v3);
              this = (WTF::StringImpl *)*((_QWORD *)v3 + 200);
            }
          }
          else
          {
            *((_BYTE *)v3 + 1730) = 1;
          }
          return WebCore::PlatformMediaSession::beginInterruption((uint64_t)this, 5);
        }
      }
    }
  }
  return this;
}

void WebCore::HTMLMediaElement::visibilityStateChanged(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  BOOL v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::MediaElementSession *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BOOL4 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD v26[4];

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1992);
  if ((*(unsigned int (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1264))(this))
    v3 = v2 == 0;
  else
    v3 = 1;
  if (!v3 && *(_QWORD *)(v2 + 56)
    || *((_DWORD *)this + 270)
    || (v15 = *(_QWORD *)(*((_QWORD *)this + 5) + 8), (v16 = *(_QWORD *)(v15 + 528)) != 0)
    && (v17 = *(_QWORD *)(v16 + 8)) != 0
    && (v18 = *(_QWORD *)(v17 + 24)) != 0
    && (v19 = *(_QWORD *)(v18 + 8)) != 0
    && !*(_BYTE *)(v15 + 3437)
    && (*(_WORD *)(v19 + 658) & 4) != 0)
  {
    v4 = (char *)this + 1265;
    v5 = *(unsigned int *)((char *)this + 1265);
    v6 = v5 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
    if ((v5 & 0x800000) == 0)
      return;
    goto LABEL_8;
  }
  v20 = *((_QWORD *)this + 142);
  if (!v20)
  {
    v4 = (char *)this + 1265;
    v25 = *(unsigned int *)((char *)this + 1265);
    v6 = v25 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
    if ((v25 & 0x800000) != 0)
      return;
    goto LABEL_36;
  }
  v21 = *(unsigned __int8 *)(v20 + 225);
  v22 = *(_BYTE *)(v20 + 225) == 0;
  v4 = (char *)this + 1265;
  v23 = *(unsigned int *)((char *)this + 1265);
  v6 = v23 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
  if (((v22 ^ ((v23 & 0x800000) == 0)) & 1) != 0)
    return;
  if (v21)
  {
LABEL_8:
    v7 = 0;
    goto LABEL_9;
  }
LABEL_36:
  v7 = 0x800000;
LABEL_9:
  v8 = v6 & 0xFFFFFFFFFF7FFFFFLL;
  *((_WORD *)v4 + 2) = WORD2(v8);
  *(_DWORD *)v4 = v7 | v8;
  v9 = *((_QWORD *)this + 228);
  v10 = *((_QWORD *)this + 229);
  v26[0] = "HTMLMediaElement";
  v26[1] = 17;
  v26[2] = "visibilityStateChanged";
  v26[3] = v10;
  if (*(_BYTE *)(v9 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v26, "visible = ");
  WebCore::HTMLMediaElement::updateSleepDisabling((WTF **)this);
  v11 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
  if (!v11)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v11 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
  }
  WebCore::MediaElementSession::visibilityChanged(v11);
  v12 = *((_QWORD *)this + 142);
  if (v12)
  {
    v13 = *(unsigned __int8 **)v12;
    if (__ldaxr(*(unsigned __int8 **)v12))
    {
      __clrex();
    }
    else if (!__stxr(1u, v13))
    {
      goto LABEL_28;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_28:
    ++*((_QWORD *)v13 + 1);
    v24 = __ldxr(v13);
    if (v24 == 1)
    {
      if (!__stlxr(0, v13))
        goto LABEL_33;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_33:
    *(_BYTE *)(v12 + 224) = (*(_DWORD *)v4 & 0x800000) == 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 72) + 312))(*(_QWORD *)(v12 + 72));
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v12);
  }
}

unsigned int *WebCore::HTMLMediaElement::prepareForDocumentSuspension(WebCore::HTMLMediaElement *this)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  unsigned int *result;
  __int16 v6;
  __int16 v7;

  v2 = (_QWORD *)*((_QWORD *)this + 200);
  if (!v2)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v2 = (_QWORD *)*((_QWORD *)this + 200);
  }
  v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  WebCore::Document::removePlaybackTargetPickerClient((uint64_t *)v3, v2);
  result = (unsigned int *)v2[50];
  v2[50] = 0;
  if (result)
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    v6 = *(_WORD *)(v3 + 30);
    if ((v6 & 0x400) == 0)
    {
      v7 = *(_WORD *)(v3 + 28);
      if ((v7 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v3, v4);
      }
      else
      {
        if ((v7 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
          v6 = *(_WORD *)(v3 + 30);
        }
        *(_WORD *)(v3 + 30) = v6 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
      }
    }
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLMediaElement::resumeFromDocumentSuspension(WebCore::HTMLMediaElement *this)
{
  WebCore::MediaElementSession *v2;
  uint64_t v3;
  void *v4;
  __int16 v6;
  __int16 v7;

  v2 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
  if (!v2)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v2 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
  }
  v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  WebCore::Document::addPlaybackTargetPickerClient(v3, (uint64_t)v2);
  WebCore::MediaElementSession::ensureIsObservingMediaSession(v2);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    v6 = *(_WORD *)(v3 + 30);
    if ((v6 & 0x400) == 0)
    {
      v7 = *(_WORD *)(v3 + 28);
      if ((v7 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v3, v4);
      }
      else
      {
        if ((v7 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
          v6 = *(_WORD *)(v3 + 30);
        }
        *(_WORD *)(v3 + 30) = v6 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
      }
    }
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return WebCore::HTMLMediaElement::updateShouldAutoplay(this, v4);
}

uint64_t WebCore::HTMLMediaElement::supportsFocus(WebCore::HTMLMediaElement *this)
{
  uint64_t result;
  int v3;

  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3358) & 0x10) != 0)
    return 0;
  if ((WebCore::HTMLMediaElement::controls(this) & 1) != 0 || ((*((_QWORD *)this + 9) >> 58) & 3) - 1 < 3)
    return 1;
  v3 = WebCore::Node::computeEditability((uint64_t)this, 0, 1);
  result = 0;
  if (v3)
  {
    result = *((_QWORD *)this + 4);
    if (result)
      return WebCore::Node::computeEditability(result, 0, 1) == 0;
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::controls(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v23;
  _QWORD *v24;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_33;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
  {
LABEL_33:
    v12 = 1;
LABEL_13:
    v13 = *((_QWORD *)this + 13);
    if (v13)
    {
      v14 = *(_DWORD *)(v13 + 4);
      if ((v14 & 1) == 0)
      {
        v15 = (uint64_t *)(v13 + 32);
        LODWORD(v16) = v14 >> 5;
        if (!(_DWORD)v16)
          goto LABEL_26;
LABEL_19:
        v16 = v16;
        while (1)
        {
          v18 = *v15;
          if (*v15 == WebCore::HTMLNames::controlsAttr
            || *(_QWORD *)(v18 + 24) == *(_QWORD *)(WebCore::HTMLNames::controlsAttr + 24)
            && *(_QWORD *)(v18 + 32) == *(_QWORD *)(WebCore::HTMLNames::controlsAttr + 32))
          {
            break;
          }
          v15 += 2;
          if (!--v16)
            goto LABEL_26;
        }
        v17 = 1;
LABEL_27:
        if ((v12 & 1) != 0)
          return v17;
        goto LABEL_28;
      }
      v15 = *(uint64_t **)(v13 + 40);
      LODWORD(v16) = *(_DWORD *)(v13 + 52);
      if ((_DWORD)v16)
        goto LABEL_19;
    }
LABEL_26:
    v17 = 0;
    goto LABEL_27;
  }
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(_QWORD **)(*(_QWORD *)(v3 + 304) + 16);
  v7 = v6[37];
  if (!v7 || (*(_BYTE *)(v7 + 268) & 0x10) == 0)
  {
    v8 = v6[3];
    if (v8 && *(_QWORD *)(v8 + 8))
    {
      v9 = *(_QWORD *)(v6[35] + 16);
      v10 = v6[17];
      v11 = *(_BYTE *)(v10 + 245) ? *(_BYTE *)(v10 + 244) != 0 : (*(_QWORD *)(v10 + 688) >> 52) & 1;
      if ((*(unsigned int (**)(uint64_t, _BOOL8))(*(_QWORD *)v9 + 968))(v9, v11))
      {
        v12 = 0;
        goto LABEL_13;
      }
    }
  }
  v17 = 1;
LABEL_28:
  v19 = (unsigned int *)(v3 + 8);
  do
  {
    v20 = __ldaxr(v19);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v19));
  if (!v21)
  {
    atomic_store(1u, v19);
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v23 = off_1E31FE290;
    v23[1] = v19;
    v24 = v23;
    WTF::ensureOnMainThread();
    if (v24)
      (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  }
  return v17;
}

uint64_t WebCore::HTMLMediaElement::isMouseFocusable(WebCore::HTMLMediaElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLMediaElement::removeAllEventListeners(WebCore::HTMLMediaElement *this, uint64_t a2)
{
  uint64_t result;
  void *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;

  result = WebCore::Node::removeAllEventListeners((uint64_t)this, a2);
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v8 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v8)
    {
      *(_DWORD *)(v8 + 24) += 2;
      result = WebCore::ShadowRoot::removeAllEventListeners((WebCore::ShadowRoot *)v8, (uint64_t)v4);
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        v9 = *(_WORD *)(v8 + 30);
        if ((v9 & 0x400) == 0)
        {
          v10 = *(_WORD *)(v8 + 28);
          if ((v10 & 0xF000) == 0x9000)
          {
            result = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v8, v4);
          }
          else
          {
            if ((v10 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
              v9 = *(_WORD *)(v8 + 30);
            }
            *(_WORD *)(v8 + 30) = v9 | 0x400;
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
          }
        }
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 168);
  if (v5)
  {
    ++v5[6];
    result = WebCore::EventTarget::removeAllEventListeners((uint64_t)v5, v4);
    if (v5[6] == 1)
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 72))(v5);
    else
      --v5[6];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 169);
  if (v6)
  {
    ++v6[6];
    result = WebCore::EventTarget::removeAllEventListeners((uint64_t)v6, v4);
    if (v6[6] == 1)
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
    else
      --v6[6];
  }
  v7 = (_DWORD *)*((_QWORD *)this + 170);
  if (v7)
  {
    ++v7[6];
    result = WebCore::EventTarget::removeAllEventListeners((uint64_t)v7, v4);
    if (v7[6] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 72))(v7);
    else
      --v7[6];
  }
  return result;
}

void WebCore::HTMLMediaElement::attributeChanged(WebCore::HTMLMediaElement *this, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  WebCore::HTMLMediaElement *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  WebCore::PlatformMediaSession *v15;
  _DWORD *v16;
  WebCore::NavigatorMediaSession *v17;
  WebCore::Navigator *v18;
  WTF::StringImpl *v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WebCore::MediaElementSession *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  WTF::MonotonicTime *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WebCore::PlatformMediaSessionManager *v55;
  char v56;
  BOOL v57;
  uint64_t v58;
  WebCore::HTMLMediaElement *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  WebCore::PlatformMediaSessionManager *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v77;
  _DWORD *v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  __int16 v102;
  __int16 v103;
  uint64_t v104;
  int v105;
  WebCore::NavigatorMediaSession *v106;
  uint64_t v107;
  const char *v108;
  WebCore::PlatformMediaSessionManager *v109;
  char v110;

  v10 = this;
  v11 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v11 <= 0x246)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) <= 0x1B4u)
    {
      if (v11 != 363)
      {
        if (v11 == 412)
        {
          WebCore::HTMLMediaElement::configureMediaControls(this);
          return;
        }
        goto LABEL_158;
      }
      if (WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8)))
      {
        *((_BYTE *)v10 + 1699) = 1;
        v34 = (WTF::MonotonicTime *)*((_QWORD *)v10 + 200);
        if (!v34)
        {
          WebCore::HTMLMediaElement::initializeMediaSession(v10);
          v34 = (WTF::MonotonicTime *)*((_QWORD *)v10 + 200);
        }
        WebCore::MediaElementSession::removeBehaviorRestriction(v34, 43367);
        v35 = WebCore::Document::topDocument(*(_QWORD *)(*((_QWORD *)v10 + 5) + 8));
        *(_DWORD *)(v35 + 24) += 2;
        WebCore::Document::noteUserInteractionWithMediaElement((unsigned int *)v35, v36);
        if (*(_DWORD *)(v35 + 24) == 2)
        {
          v102 = *(_WORD *)(v35 + 30);
          if ((v102 & 0x400) == 0)
          {
            v103 = *(_WORD *)(v35 + 28);
            if ((v103 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v35, v37);
            }
            else
            {
              if ((v103 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v35 + 160) + 16))(*(_QWORD *)(v35 + 160));
                v102 = *(_WORD *)(v35 + 30);
              }
              *(_WORD *)(v35 + 30) = v102 | 0x400;
              (*(void (**)(uint64_t))(*(_QWORD *)v35 + 72))(v35);
            }
          }
        }
        else
        {
          *(_DWORD *)(v35 + 24) -= 2;
        }
      }
      return;
    }
    if (v11 == 437)
    {
LABEL_41:
      v28 = *((_QWORD *)v10 + 13);
      if (v28)
      {
        v29 = *(_DWORD *)(v28 + 4);
        if ((v29 & 1) != 0)
        {
          v30 = *(_QWORD *)(v28 + 40);
          LODWORD(v31) = *(_DWORD *)(v28 + 52);
          if ((_DWORD)v31)
          {
LABEL_44:
            v31 = v31;
            v32 = (uint64_t *)(v30 + 8);
            while (1)
            {
              v33 = *(v32 - 1);
              if (v33 == WebCore::HTMLNames::webkitairplayAttr
                || *(_QWORD *)(v33 + 24) == *(_QWORD *)(WebCore::HTMLNames::webkitairplayAttr + 24)
                && *(_QWORD *)(v33 + 32) == *(_QWORD *)(WebCore::HTMLNames::webkitairplayAttr + 32))
              {
                break;
              }
              v32 += 2;
              if (!--v31)
              {
                v32 = (uint64_t *)MEMORY[0x1E0CBF2F8];
                break;
              }
            }
LABEL_58:
            v38 = *v32;
            if (*v32 && *(_DWORD *)(v38 + 4) == 4)
            {
              v70 = *(_QWORD *)(v38 + 8);
              if ((*(_BYTE *)(v38 + 16) & 4) != 0)
              {
                if ((*(_BYTE *)v70 & 0xDF) == 0x44
                  && (*(_BYTE *)(v70 + 1) & 0xDF) == 0x45
                  && (*(_BYTE *)(v70 + 2) & 0xDF) == 0x4E)
                {
                  v71 = *(unsigned __int8 *)(v70 + 3);
LABEL_134:
                  v72 = (v71 & 0xFFFFFFDF) == 89;
                  LODWORD(v40) = v72;
                  if (!v28 || v72)
                  {
LABEL_91:
                    if (*((unsigned __int8 *)v10 + 1696) == (_DWORD)v40)
                      goto LABEL_153;
                    *((_BYTE *)v10 + 1696) = v40;
                    if ((v40 & 1) != 0)
                    {
LABEL_93:
                      v47 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                      if (!v47 || (v48 = *(_QWORD *)(v47 + 96)) == 0)
                        v48 = WebCore::threadGlobalDataSlow(this);
                      v49 = *(_QWORD *)(v48 + 40);
                      if (!v49)
                      {
                        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v48);
                        v49 = *(_QWORD *)(v48 + 40);
                      }
                      v50 = *((_QWORD *)v10 + 2);
                      if ((v50 & 0x1000000000000) != 0
                        && (v92 = v50 & 0xFFFFFFFFFFFFLL, v93 = *(unsigned int *)(v92 + 28), (_DWORD)v93))
                      {
                        v94 = *(_QWORD **)(v92 + 16);
                        v95 = *(_QWORD *)(v49 + 2464);
                        v96 = 32 * v93;
                        while (*v94 != v95)
                        {
                          v94 += 4;
                          v96 -= 32;
                          if (!v96)
                            goto LABEL_99;
                        }
                      }
                      else
                      {
LABEL_99:
                        v51 = *((_QWORD *)v10 + 230);
                        v52 = *(_QWORD *)(v51 + 88);
                        if ((!v52 || !*(_DWORD *)(v52 - 12)) && !*(_DWORD *)(v51 + 140))
                          goto LABEL_152;
                      }
                      *((_BYTE *)v10 + 1648) = 0;
                      v53 = *((_QWORD *)v10 + 200);
                      if (!v53)
                      {
                        WebCore::HTMLMediaElement::initializeMediaSession(v10);
                        v53 = *((_QWORD *)v10 + 200);
                      }
                      v110 = 0;
                      v54 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v53 + 32) + 248))(*(_QWORD *)(v53 + 32));
                      v55 = (WebCore::PlatformMediaSessionManager *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v53 + 32) + 256))(*(_QWORD *)(v53 + 32));
                      v106 = (WebCore::NavigatorMediaSession *)"MediaElementSession";
                      v107 = 20;
                      v108 = "setHasPlaybackTargetAvailabilityListeners";
                      v109 = v55;
                      v56 = *(_BYTE *)(v54 + 12);
                      if (v56)
                      {
                        if (WebCore::LogMedia)
                          v57 = byte_1ECE7C490 >= 3u;
                        else
                          v57 = 0;
                        if (v57)
                        {
                          v55 = (WebCore::PlatformMediaSessionManager *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v106);
                          v56 = v110;
                        }
                        else
                        {
                          v56 = 0;
                        }
                      }
                      *(_BYTE *)(v53 + 250) = v56;
                      v77 = WebCore::PlatformMediaSessionManager::sharedManager(v55);
                      (*(void (**)(uint64_t))(*(_QWORD *)v77 + 192))(v77);
                      if (!*((_BYTE *)v10 + 1650))
                        goto LABEL_152;
                      goto LABEL_151;
                    }
                    v58 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                    if (!v58 || (v59 = *(WebCore::HTMLMediaElement **)(v58 + 96)) == 0)
                    {
                      this = (WebCore::HTMLMediaElement *)WebCore::threadGlobalDataSlow(this);
                      v59 = this;
                    }
                    v60 = *((_QWORD *)v59 + 5);
                    if (!v60)
                    {
                      this = (WebCore::HTMLMediaElement *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v59);
                      v60 = *((_QWORD *)v59 + 5);
                    }
                    v61 = *((_QWORD *)v10 + 2);
                    if ((v61 & 0x1000000000000) != 0
                      && (v97 = v61 & 0xFFFFFFFFFFFFLL, v98 = *(unsigned int *)(v97 + 28), (_DWORD)v98))
                    {
                      v99 = *(_QWORD **)(v97 + 16);
                      v100 = *(_QWORD *)(v60 + 2464);
                      v101 = 32 * v98;
                      while (*v99 != v100)
                      {
                        v99 += 4;
                        v101 -= 32;
                        if (!v101)
                          goto LABEL_116;
                      }
                    }
                    else
                    {
LABEL_116:
                      v62 = *((_QWORD *)v10 + 230);
                      v63 = *(_QWORD *)(v62 + 88);
                      if ((!v63 || !*(_DWORD *)(v63 - 12)) && !*(_DWORD *)(v62 + 140))
                      {
                        if (!*((_BYTE *)v10 + 1696))
                          goto LABEL_152;
                        goto LABEL_93;
                      }
                    }
                    *((_BYTE *)v10 + 1648) = 1;
                    v64 = *((_QWORD *)v10 + 200);
                    if (!v64)
                    {
                      WebCore::HTMLMediaElement::initializeMediaSession(v10);
                      v64 = *((_QWORD *)v10 + 200);
                    }
                    v65 = 1;
                    WebCore::PlatformMediaSession::setActive(v64, 1);
                    v66 = *((_QWORD *)v10 + 200);
                    if (!v66)
                    {
                      WebCore::HTMLMediaElement::initializeMediaSession(v10);
                      v66 = *((_QWORD *)v10 + 200);
                    }
                    v110 = 1;
                    v67 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v66 + 32) + 248))(*(_QWORD *)(v66 + 32));
                    v68 = (WebCore::PlatformMediaSessionManager *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v66 + 32) + 256))(*(_QWORD *)(v66 + 32));
                    v106 = (WebCore::NavigatorMediaSession *)"MediaElementSession";
                    v107 = 20;
                    v108 = "setHasPlaybackTargetAvailabilityListeners";
                    v109 = v68;
                    if (*(_BYTE *)(v67 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
                    {
                      v68 = (WebCore::PlatformMediaSessionManager *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v106);
                      v65 = v110;
                    }
                    *(_BYTE *)(v66 + 250) = v65;
                    v69 = WebCore::PlatformMediaSessionManager::sharedManager(v68);
                    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 192))(v69);
LABEL_151:
                    WebCore::HTMLMediaElement::enqueuePlaybackTargetAvailabilityChangedEvent((uint64_t (**)())v10, 0);
LABEL_152:
                    WebCore::HTMLMediaElement::scheduleUpdateMediaState((uint64_t (**)())v10);
LABEL_153:
                    v78 = (_DWORD *)*((_QWORD *)v10 + 144);
                    if (v78)
                    {
                      v79 = v78[2];
                      v78[2] = v79 + 1;
                      if (*((_BYTE *)v10 + 1696))
                      {
                        (*(void (**)(_DWORD *))(*(_QWORD *)v78 + 88))(v78);
                        v79 = v78[2] - 1;
                      }
                      if (v79)
                        v78[2] = v79;
                      else
                        (*(void (**)(_DWORD *))(*(_QWORD *)v78 + 8))(v78);
                    }
                    goto LABEL_158;
                  }
LABEL_60:
                  v39 = *(_DWORD *)(v28 + 4);
                  LODWORD(v40) = v39 >> 5;
                  if ((v39 & 1) != 0)
                  {
                    v41 = *(uint64_t **)(v28 + 40);
                    LODWORD(v42) = *(_DWORD *)(v28 + 52);
                    if (!(_DWORD)v42)
                    {
LABEL_71:
                      if ((v39 & 1) != 0)
                      {
                        v44 = *(uint64_t **)(v28 + 40);
                        LODWORD(v40) = *(_DWORD *)(v28 + 52);
                        if (!(_DWORD)v40)
                          goto LABEL_91;
                      }
                      else
                      {
                        v44 = (uint64_t *)(v28 + 32);
                        if (!(_DWORD)v40)
                          goto LABEL_91;
                      }
                      v40 = v40;
                      while (1)
                      {
                        v45 = *v44;
                        if (*v44 == WebCore::HTMLNames::disableremoteplaybackAttr
                          || *(_QWORD *)(v45 + 24) == *(_QWORD *)(WebCore::HTMLNames::disableremoteplaybackAttr + 24)
                          && *(_QWORD *)(v45 + 32) == *(_QWORD *)(WebCore::HTMLNames::disableremoteplaybackAttr + 32))
                        {
                          break;
                        }
                        v44 += 2;
                        if (!--v40)
                          goto LABEL_91;
                      }
LABEL_81:
                      LODWORD(v40) = 1;
                      goto LABEL_91;
                    }
                  }
                  else
                  {
                    v41 = (uint64_t *)(v28 + 32);
                    LODWORD(v42) = v39 >> 5;
                    if (!(_DWORD)v40)
                      goto LABEL_71;
                  }
                  v42 = v42;
                  while (1)
                  {
                    v43 = *v41;
                    if (*v41 == WebCore::HTMLNames::webkitwirelessvideoplaybackdisabledAttr
                      || *(_QWORD *)(v43 + 24) == *(_QWORD *)(WebCore::HTMLNames::webkitwirelessvideoplaybackdisabledAttr
                                                            + 24)
                      && *(_QWORD *)(v43 + 32) == *(_QWORD *)(WebCore::HTMLNames::webkitwirelessvideoplaybackdisabledAttr
                                                            + 32))
                    {
                      goto LABEL_81;
                    }
                    v41 += 2;
                    if (!--v42)
                      goto LABEL_71;
                  }
                }
              }
              else if ((*(_WORD *)v70 & 0xFFDF) == 0x44
                     && (*(_WORD *)(v70 + 2) & 0xFFDF) == 0x45
                     && (*(_WORD *)(v70 + 4) & 0xFFDF) == 0x4E)
              {
                v71 = *(unsigned __int16 *)(v70 + 6);
                goto LABEL_134;
              }
            }
            if (!v28)
            {
              LODWORD(v40) = 0;
              goto LABEL_91;
            }
            goto LABEL_60;
          }
        }
        else
        {
          v30 = v28 + 32;
          LODWORD(v31) = v29 >> 5;
          if (v29 >> 5)
            goto LABEL_44;
        }
      }
      v32 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      goto LABEL_58;
    }
    if (v11 == 513)
    {
      v25 = *a4;
      if (*a4)
        *(_DWORD *)v25 += 2;
      v26 = (WTF::StringImpl *)*((_QWORD *)this + 215);
      *((_QWORD *)v10 + 215) = v25;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, a2);
        else
          *(_DWORD *)v26 -= 2;
      }
      goto LABEL_158;
    }
    if (v11 != 556)
    {
LABEL_158:
      WebCore::HTMLElement::attributeChanged((uint64_t)v10, a2, a3, a4, a5, a6);
      return;
    }
    WebCore::HTMLMediaElement::updateSleepDisabling((WTF **)this);
    v12 = *((_QWORD *)v10 + 142);
    if (!v12)
      return;
    v13 = *(unsigned __int8 **)v12;
    if (__ldaxr(*(unsigned __int8 **)v12))
    {
      __clrex();
    }
    else if (!__stxr(1u, v13))
    {
      goto LABEL_84;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_84:
    ++*((_QWORD *)v13 + 1);
    v46 = __ldxr(v13);
    if (v46 == 1)
    {
      if (!__stlxr(0, v13))
        goto LABEL_89;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_89:
    (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 72) + 1256))(*(_QWORD *)(v12 + 72));
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v12);
    return;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) <= 0x391u)
  {
    if (v11 == 583)
    {
      WebCore::HTMLMediaElement::setMediaGroup((WTF **)this, a4, a3);
      return;
    }
    if (v11 != 785)
    {
      if (v11 == 844)
      {
        if (*a4)
          WebCore::HTMLMediaElement::prepareForLoad(this);
        return;
      }
      goto LABEL_158;
    }
    v19 = *a4;
    if (!*a4)
      goto LABEL_28;
    v89 = *((_DWORD *)v19 + 1);
    if (v89 == 4)
    {
      v104 = *((_QWORD *)v19 + 1);
      if ((*((_BYTE *)v19 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v104 & 0xDF) != 0x4E
          || (*(_BYTE *)(v104 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(v104 + 2) & 0xDF) != 0x4E)
        {
          goto LABEL_28;
        }
        v105 = *(unsigned __int8 *)(v104 + 3);
      }
      else
      {
        if ((*(_WORD *)v104 & 0xFFDF) != 0x4E
          || (*(_WORD *)(v104 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v104 + 4) & 0xFFDF) != 0x4E)
        {
          goto LABEL_28;
        }
        v105 = *(unsigned __int16 *)(v104 + 6);
      }
      if ((v105 & 0xFFFFFFDF) == 0x45)
      {
        v20 = 0;
LABEL_29:
        *((_BYTE *)this + 1144) = v20;
        v21 = *((_QWORD *)this + 13);
        if (v21)
        {
          v22 = *(_DWORD *)(v21 + 4);
          if ((v22 & 1) == 0)
          {
            v23 = (uint64_t *)(v21 + 32);
            LODWORD(v24) = v22 >> 5;
            if (!(_DWORD)v24)
              goto LABEL_145;
            goto LABEL_138;
          }
          v23 = *(uint64_t **)(v21 + 40);
          LODWORD(v24) = *(_DWORD *)(v21 + 52);
          if ((_DWORD)v24)
          {
LABEL_138:
            v24 = v24;
            do
            {
              v73 = *v23;
              if (*v23 == WebCore::HTMLNames::autoplayAttr
                || *(_QWORD *)(v73 + 24) == *(_QWORD *)(WebCore::HTMLNames::autoplayAttr + 24)
                && *(_QWORD *)(v73 + 32) == *(_QWORD *)(WebCore::HTMLNames::autoplayAttr + 32))
              {
                return;
              }
              v23 += 2;
            }
            while (--v24);
          }
        }
LABEL_145:
        if ((*(_DWORD *)((_BYTE *)this + 1265) & 0x200000) != 0)
          return;
        v74 = *((_QWORD *)this + 142);
        if (!v74)
          return;
        v75 = *(unsigned __int8 **)v74;
        if (__ldaxr(*(unsigned __int8 **)v74))
        {
          __clrex();
        }
        else if (!__stxr(1u, v75))
        {
          goto LABEL_164;
        }
        MEMORY[0x19AEA534C](v75);
LABEL_164:
        ++*((_QWORD *)v75 + 1);
        v80 = __ldxr(v75);
        if (v80 == 1)
        {
          if (!__stlxr(0, v75))
            goto LABEL_169;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v75);
LABEL_169:
        v81 = *((_QWORD *)v10 + 200);
        if (!v81)
        {
          WebCore::HTMLMediaElement::initializeMediaSession(v10);
          v81 = *((_QWORD *)v10 + 200);
        }
        v82 = *(_QWORD *)(v81 + 80);
        v83 = *(unsigned __int8 *)(v82 + 1144);
        v84 = *(_QWORD *)(*(_QWORD *)(v82 + 40) + 8);
        v85 = *(_QWORD *)(v84 + 528);
        if (!v85)
          goto LABEL_176;
        v86 = *(_QWORD *)(v85 + 8);
        if (!v86)
          goto LABEL_176;
        v87 = *(_QWORD *)(v86 + 24);
        if (v87)
          v87 = *(_QWORD *)(v87 + 8);
        if ((*(_WORD *)(v84 + 3358) & 0x10) == 0
          || (v88 = *(_QWORD *)(v86 + 120)) != 0 && *(_QWORD *)(v88 + 8)
          || !v87
          || !*(_BYTE *)(v87 + 1088))
        {
LABEL_176:
          if (((v83 > 1) & (*(unsigned __int8 *)(v81 + 89) >> 2)) != 0)
            LOBYTE(v83) = 1;
        }
        *(_BYTE *)(v74 + 208) = v83;
        (*(void (**)(_QWORD))(**(_QWORD **)(v74 + 72) + 704))(*(_QWORD *)(v74 + 72));
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v74);
        return;
      }
    }
    else if (v89 == 8)
    {
      v90 = *((_QWORD *)v19 + 1);
      if ((*((_BYTE *)v19 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v90 & 0xDF) != 0x4D
          || (*(_BYTE *)(v90 + 1) & 0xDF) != 0x45
          || (*(_BYTE *)(v90 + 2) & 0xDF) != 0x54
          || (*(_BYTE *)(v90 + 3) & 0xDF) != 0x41
          || (*(_BYTE *)(v90 + 4) & 0xDF) != 0x44
          || (*(_BYTE *)(v90 + 5) & 0xDF) != 0x41
          || (*(_BYTE *)(v90 + 6) & 0xDF) != 0x54)
        {
          goto LABEL_28;
        }
        v91 = *(unsigned __int8 *)(v90 + 7);
      }
      else
      {
        if ((*(_WORD *)v90 & 0xFFDF) != 0x4D
          || (*(_WORD *)(v90 + 2) & 0xFFDF) != 0x45
          || (*(_WORD *)(v90 + 4) & 0xFFDF) != 0x54
          || (*(_WORD *)(v90 + 6) & 0xFFDF) != 0x41
          || (*(_WORD *)(v90 + 8) & 0xFFDF) != 0x44
          || (*(_WORD *)(v90 + 10) & 0xFFDF) != 0x41
          || (*(_WORD *)(v90 + 12) & 0xFFDF) != 0x54)
        {
          goto LABEL_28;
        }
        v91 = *(unsigned __int16 *)(v90 + 14);
      }
      if ((v91 & 0xFFFFFFDF) == 0x41)
      {
        v20 = 1;
        goto LABEL_29;
      }
    }
LABEL_28:
    v20 = 2;
    goto LABEL_29;
  }
  if (v11 == 914)
    goto LABEL_41;
  if (v11 == 921)
  {
    v27 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
    if (!v27)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(v10);
      v27 = (WebCore::MediaElementSession *)*((_QWORD *)v10 + 200);
    }
    this = (WebCore::HTMLMediaElement *)WebCore::MediaElementSession::setWirelessVideoPlaybackDisabled(v27, *a4 != (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8]);
    goto LABEL_41;
  }
  if (v11 != 951)
    goto LABEL_158;
  v15 = (WebCore::PlatformMediaSession *)*((_QWORD *)this + 200);
  if (v15)
  {
    v16 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 10) + 40) + 8) + 696);
    if (v16)
    {
      WebCore::LocalDOMWindow::protectedNavigator(v16, &v106);
      v17 = v106;
      WebCore::NavigatorMediaSession::mediaSession(v106, v18);
      if (*((_DWORD *)v17 + 4) == 1)
        (*(void (**)(WebCore::NavigatorMediaSession *))(*(_QWORD *)v17 + 16))(v17);
      else
        --*((_DWORD *)v17 + 4);
    }
    WebCore::PlatformMediaSession::clientCharacteristicsChanged(v15, 0);
  }
}

uint64_t WebCore::HTMLMediaElement::prepareForLoad(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WTF::MonotonicTime *v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WebCore *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WebCore *v38;
  _DWORD *v39;
  unsigned __int8 *updated;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char v61;
  WTF::MediaTime *v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t *v66;
  uint64_t v67;
  __int16 v68;
  __int16 v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  WebCore::MediaController *v77;
  const WTF::MediaTime *v78;
  WTF::StringImpl *v79;
  WTF *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  WebCore::PlatformMediaSessionManager *v84;
  uint64_t v85;
  WebCore *v86;
  void *v87;
  WebCore::MediaElementSession *v88;
  WTF::StringImpl *v89;
  __int16 v90;
  __int16 v91;
  WTF *v92;
  bmalloc::api *v93;
  void *v94;
  __int16 v95;
  __int16 v96;
  __int16 v97;
  __int16 v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  WebCore *v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;

  v2 = *((_QWORD *)this + 228);
  v3 = *((_QWORD *)this + 229);
  v103 = (WebCore *)"HTMLMediaElement";
  v104 = 17;
  v105 = "prepareForLoad";
  v106 = v3;
  WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8));
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v103, "gesture = ");
  if (WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8)))
  {
    *((_BYTE *)this + 1699) = 1;
    v5 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
    if (!v5)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(this);
      v5 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
    }
    WebCore::MediaElementSession::removeBehaviorRestriction(v5, 43367);
    v6 = WebCore::Document::topDocument(*(_QWORD *)(*((_QWORD *)this + 5) + 8));
    *(_DWORD *)(v6 + 24) += 2;
    WebCore::Document::noteUserInteractionWithMediaElement((unsigned int *)v6, v7);
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      v95 = *(_WORD *)(v6 + 30);
      if ((v95 & 0x400) == 0)
      {
        v96 = *(_WORD *)(v6 + 28);
        if ((v96 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v6, v4);
        }
        else
        {
          if ((v96 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
            v95 = *(_WORD *)(v6 + 30);
          }
          *(_WORD *)(v6 + 30) = v95 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
        }
      }
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  if ((*((_QWORD *)this + 42) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 304));
  if ((*((_QWORD *)this + 49) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 360));
  if ((*((_QWORD *)this + 77) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 584));
  v8 = (uint64_t *)*((_QWORD *)this + 99);
  v9 = *v8;
  *v8 = 0;
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    do
    {
      v99 = __ldaxr((unsigned int *)v9);
      v100 = v99 - 1;
    }
    while (__stlxr(v100, (unsigned int *)v9));
    if (!v100)
    {
      atomic_store(1u, (unsigned int *)v9);
      WTF::fastFree((WTF *)v9, v4);
    }
  }
  *(_DWORD *)((char *)this + 1265) &= 0xFFCCFFEF;
  if (WTF::ObjectIdentifierGeneric<WebCore::MediaUniqueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x195C016D4);
  }
  result = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *((_QWORD *)this + 119) = result;
  *((_BYTE *)this + 1649) = 0;
  *((_DWORD *)this + 264) = 0;
  v12 = *((_QWORD *)this + 133);
  *((_QWORD *)this + 133) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      v90 = *(_WORD *)(v12 + 30);
      if ((v90 & 0x400) == 0)
      {
        v91 = *(_WORD *)(v12 + 28);
        if ((v91 & 0xF000) == 0x9000)
        {
          result = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v12, v11);
        }
        else
        {
          if ((v91 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 160) + 16))(*(_QWORD *)(v12 + 160));
            v90 = *(_WORD *)(v12 + 30);
          }
          *(_WORD *)(v12 + 30) = v90 | 0x400;
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 72))(v12);
        }
      }
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  *((_BYTE *)this + 1593) = 0;
  v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v13 && *(_QWORD *)(v13 + 8))
  {
    WebCore::HTMLMediaElement::createMediaPlayer(this);
    v15 = *((_QWORD *)this + 228);
    v16 = *((_QWORD *)this + 229);
    v103 = (WebCore *)"HTMLMediaElement";
    v104 = 17;
    v105 = "cancelPendingEventsAndCallbacks";
    v106 = v16;
    if (*(_BYTE *)(v15 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v103);
    v17 = (uint64_t *)*((_QWORD *)this + 104);
    v18 = *v17;
    *v17 = 0;
    if (v18)
    {
      *(_QWORD *)(v18 + 8) = 0;
      do
      {
        v101 = __ldaxr((unsigned int *)v18);
        v102 = v101 - 1;
      }
      while (__stlxr(v102, (unsigned int *)v18));
      if (!v102)
      {
        atomic_store(1u, (unsigned int *)v18);
        WTF::fastFree((WTF *)v18, v14);
      }
    }
    v19 = *((_QWORD *)this + 10);
    if (v19)
    {
      while ((*(_WORD *)(v19 + 28) & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
      {
        v19 = *(_QWORD *)(v19 + 56);
        if (!v19)
          goto LABEL_30;
      }
      while (1)
      {
        *(_DWORD *)(v19 + 24) += 2;
        v66 = *(uint64_t **)(v19 + 160);
        v67 = *v66;
        *v66 = 0;
        if (v67)
        {
          *(_QWORD *)(v67 + 8) = 0;
          do
          {
            v70 = __ldaxr((unsigned int *)v67);
            v71 = v70 - 1;
          }
          while (__stlxr(v71, (unsigned int *)v67));
          if (!v71)
          {
            atomic_store(1u, (unsigned int *)v67);
            WTF::fastFree((WTF *)v67, v14);
          }
        }
        if (*(_DWORD *)(v19 + 24) == 2)
        {
          v68 = *(_WORD *)(v19 + 30);
          if ((v68 & 0x400) == 0)
          {
            v69 = *(_WORD *)(v19 + 28);
            if ((v69 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v19, v14);
            }
            else
            {
              if ((v69 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v19 + 160) + 16))(*(_QWORD *)(v19 + 160));
                v68 = *(_WORD *)(v19 + 30);
              }
              *(_WORD *)(v19 + 30) = v68 | 0x400;
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 72))(v19);
            }
          }
        }
        else
        {
          *(_DWORD *)(v19 + 24) -= 2;
        }
        v19 = *(_QWORD *)(v19 + 56);
        if (!v19)
          break;
        while ((*(_WORD *)(v19 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
        {
          v19 = *(_QWORD *)(v19 + 56);
          if (!v19)
            goto LABEL_30;
        }
      }
    }
LABEL_30:
    WebCore::DOMException::create(0x10u, MEMORY[0x1E0CBF738], (uint64_t *)&v103);
    v20 = *((unsigned int *)this + 217);
    if ((_DWORD)v20)
    {
      v21 = (uint64_t *)*((_QWORD *)this + 107);
      v22 = 8 * v20;
      do
      {
        v23 = *v21++;
        WebCore::DeferredPromise::reject<WebCore::IDLInterface<WebCore::DOMException>>(v23, v103);
        v22 -= 8;
      }
      while (v22);
    }
    v24 = v103;
    v103 = 0;
    if (v24)
    {
      if (*((_DWORD *)v24 + 2) == 1)
        v24 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v24 + 8))(v24);
      else
        --*((_DWORD *)v24 + 2);
    }
    v25 = *((_DWORD *)this + 225);
    if ((v25 - 1) <= 1)
    {
      v26 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v26 || (v27 = *(_QWORD *)(v26 + 96)) == 0)
        v27 = WebCore::threadGlobalDataSlow(v24);
      v28 = *(_QWORD *)(v27 + 40);
      if (!v28)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v27);
        v28 = *(_QWORD *)(v27 + 40);
      }
      v29 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v29);
      *(_DWORD *)(v29 + 16) = 1;
      *(_QWORD *)v29 = off_1E33A4B48;
      *(_QWORD *)(v29 + 8) = 0;
      *(_DWORD *)(v29 + 20) = *(_DWORD *)(v29 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v28 + 64) != 0);
      v31 = *(_DWORD **)(v28 + 64);
      if (v31)
        *v31 += 2;
      *(_QWORD *)(v29 + 24) = v31;
      *(_QWORD *)(v29 + 32) = 0;
      *(_QWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = v30;
      *(_QWORD *)(v29 + 64) = 0;
      v103 = (WebCore *)v29;
      WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)this + 28, (uint64_t)this, 9, (uint64_t)this + 824, (uint64_t *)&v103);
      v24 = v103;
      v103 = 0;
      if (v24)
      {
        if (*((_DWORD *)v24 + 4) == 1)
          v24 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v24 + 8))(v24);
        else
          --*((_DWORD *)v24 + 4);
      }
      v25 = *((_DWORD *)this + 225);
    }
    if (v25)
    {
      v32 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v32 || (v33 = *(_QWORD *)(v32 + 96)) == 0)
        v33 = WebCore::threadGlobalDataSlow(v24);
      v34 = *(_QWORD *)(v33 + 40);
      if (!v34)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v33);
        v34 = *(_QWORD *)(v33 + 40);
      }
      v35 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v35);
      *(_DWORD *)(v35 + 16) = 1;
      *(_QWORD *)v35 = off_1E33A4B48;
      *(_QWORD *)(v35 + 8) = 0;
      *(_DWORD *)(v35 + 20) = *(_DWORD *)(v35 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v34 + 720) != 0);
      v37 = *(_DWORD **)(v34 + 720);
      if (v37)
        *v37 += 2;
      *(_QWORD *)(v35 + 24) = v37;
      *(_QWORD *)(v35 + 32) = 0;
      *(_QWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = 0;
      *(_QWORD *)(v35 + 56) = v36;
      *(_QWORD *)(v35 + 64) = 0;
      v103 = (WebCore *)v35;
      WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)this + 28, (uint64_t)this, 9, (uint64_t)this + 824, (uint64_t *)&v103);
      v38 = v103;
      v103 = 0;
      if (v38)
      {
        if (*((_DWORD *)v38 + 4) == 1)
          (*(void (**)(WebCore *))(*(_QWORD *)v38 + 8))(v38);
        else
          --*((_DWORD *)v38 + 4);
      }
      *((_DWORD *)this + 225) = 0;
      v39 = (_DWORD *)*((_QWORD *)this + 144);
      *((_QWORD *)this + 144) = 0;
      if (v39)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 80))(v39);
        (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v39 + 104))(v39, 0);
        if (v39[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 8))(v39);
        else
          --v39[2];
      }
      WebCore::HTMLMediaElement::forgetResourceSpecificTracks((uint64_t (**)())this);
      *((_QWORD *)this + 113) = 0;
      updated = WebCore::HTMLMediaElement::setPaused((unsigned __int8 *)this, 1);
      v41 = *(unsigned int *)((char *)this + 1265);
      if ((v41 & 2) != 0)
      {
        v42 = v41 & 0xFFFFFFFFFFFFFFFDLL | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
        *(_DWORD *)((char *)this + 1265) = v41 & 0xFFFFFFFD;
        *(_WORD *)((char *)this + 1269) = WORD2(v42);
        v43 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
        *(_DWORD *)(v43 + 24) += 2;
        WebCore::Document::updateIsPlayingMedia((WebCore::Document *)v43);
        if (*(_DWORD *)(v43 + 24) == 2)
        {
          v97 = *(_WORD *)(v43 + 30);
          if ((v97 & 0x400) == 0)
          {
            v98 = *(_WORD *)(v43 + 28);
            if ((v98 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v43, v44);
            }
            else
            {
              if ((v98 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v43 + 160) + 16))(*(_QWORD *)(v43 + 160));
                v97 = *(_WORD *)(v43 + 30);
              }
              *(_WORD *)(v43 + 30) = v97 | 0x400;
              (*(void (**)(uint64_t))(*(_QWORD *)v43 + 72))(v43);
            }
          }
        }
        else
        {
          *(_DWORD *)(v43 + 24) -= 2;
        }
        updated = (unsigned __int8 *)WebCore::HTMLMediaElement::scheduleUpdateMediaState((uint64_t (**)())this);
      }
      v45 = *((_QWORD *)this + 142);
      if (v45)
      {
        v46 = WTF::MediaTime::invalidTime((WTF::MediaTime *)updated);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v45 + 72) + 384))(*(_QWORD *)(v45 + 72), v46);
      }
      v47 = WebCore::HTMLMediaElement::setSeeking((unsigned __int8 *)this, 0);
      v48 = *(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
      *((_DWORD *)this + 244) = 0;
      v48 &= 0xFFFFFFFFFFFF3FFFLL;
      *(_DWORD *)((char *)this + 1265) = v48;
      *(_WORD *)((char *)this + 1269) = WORD2(v48);
      v49 = WTF::MediaTime::invalidTime((WTF::MediaTime *)v47);
      v50 = (_QWORD *)((char *)this + 1184);
      v51 = *(_QWORD *)(v49 + 5);
      *((_QWORD *)this + 148) = *(_QWORD *)v49;
      *(_QWORD *)((char *)this + 1189) = v51;
      v52 = *((_QWORD *)this + 142);
      if (v52 && (*(double (**)(_QWORD))(**(_QWORD **)(v52 + 72) + 848))(*(_QWORD *)(v52 + 72)) != 0.0)
      {
        v49 = WTF::MonotonicTime::now((WTF::MonotonicTime *)v49);
        *((double *)this + 151) = v53 + 0.5;
      }
      v54 = (_QWORD *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v49);
      v55 = *(_QWORD *)((char *)v54 + 5);
      *((_QWORD *)this + 125) = *v54;
      *(_QWORD *)((char *)this + 1005) = v55;
      v56 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v56 = 1;
      v56[1] = 0;
      v56[2] = 0;
      v58 = *((_QWORD *)this + 102);
      *((_QWORD *)this + 102) = v56;
      if (v58)
      {
        if (*(_DWORD *)v58 == 1)
        {
          v92 = *(WTF **)(v58 + 8);
          if (v92)
          {
            *(_QWORD *)(v58 + 8) = 0;
            *(_DWORD *)(v58 + 16) = 0;
            WTF::fastFree(v92, v57);
          }
          v56 = (_QWORD *)WTF::fastFree((WTF *)v58, v57);
        }
        else
        {
          --*(_DWORD *)v58;
        }
      }
      v59 = *((_QWORD *)this + 142);
      if (v59)
      {
        *((_QWORD *)this + 148) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v59 + 72) + 352))(*(_QWORD *)(v59 + 72));
        *((_DWORD *)this + 298) = v60;
        *((_BYTE *)this + 1196) = v61;
        v62 = (WTF::MediaTime *)WTF::MediaTime::operator!();
        if ((_DWORD)v62)
        {
          v56 = (_QWORD *)WTF::MediaTime::invalidTime(v62);
          v63 = *(_QWORD *)((char *)v56 + 5);
          *v50 = *v56;
          *(_QWORD *)((char *)this + 1189) = v63;
          v64 = *((_QWORD *)this + 142);
          if (v64 && (*(double (**)(_QWORD))(**(_QWORD **)(v64 + 72) + 848))(*(_QWORD *)(v64 + 72)) != 0.0)
          {
            v56 = (_QWORD *)WTF::MonotonicTime::now((WTF::MonotonicTime *)v56);
            *((double *)this + 151) = v65 + 0.5;
          }
        }
        else
        {
          v56 = (_QWORD *)WTF::MonotonicTime::now(v62);
          *((_QWORD *)this + 150) = v72;
        }
      }
      v73 = WTF::MediaTime::invalidTime((WTF::MediaTime *)v56);
      v74 = *(_QWORD *)(v73 + 5);
      *v50 = *(_QWORD *)v73;
      *(_QWORD *)((char *)this + 1189) = v74;
      v75 = *((_QWORD *)this + 142);
      if (v75 && (*(double (**)(_QWORD))(**(_QWORD **)(v75 + 72) + 848))(*(_QWORD *)(v75 + 72)) != 0.0)
      {
        v73 = WTF::MonotonicTime::now((WTF::MonotonicTime *)v73);
        *((double *)this + 151) = v76 + 0.5;
      }
      v77 = (WebCore::MediaController *)*((_QWORD *)this + 177);
      if (v77)
      {
        ++*((_DWORD *)v77 + 2);
        WebCore::MediaController::updateReadyState((uint64_t)v77);
        WebCore::MediaController::updatePlaybackState((uint64_t)v77);
        if (*((_DWORD *)v77 + 2) == 1)
        {
          WebCore::MediaController::~MediaController(v77);
          v73 = bmalloc::api::isoDeallocate(v93, v94);
        }
        else
        {
          --*((_DWORD *)v77 + 2);
        }
      }
      v78 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v73);
      WebCore::HTMLMediaElement::updateActiveTextTrackCues((uint64_t)this, v78);
    }
    (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1392))(this);
    (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1416))(this);
    v80 = (WTF *)*((_QWORD *)this + 120);
    *((_QWORD *)this + 120) = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 1)
      {
        v89 = (WTF::StringImpl *)*((_QWORD *)v80 + 1);
        *((_QWORD *)v80 + 1) = 0;
        if (v89)
        {
          if (*(_DWORD *)v89 == 2)
            WTF::StringImpl::destroy(v89, v79);
          else
            *(_DWORD *)v89 -= 2;
        }
        WTF::fastFree(v80, v79);
      }
      else
      {
        --*(_DWORD *)v80;
      }
    }
    *(_DWORD *)((char *)this + 1265) |= 0x40u;
    v81 = *((_QWORD *)this + 200);
    if (!v81)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(this);
      v81 = *((_QWORD *)this + 200);
    }
    WebCore::PlatformMediaSession::clientWillBeginAutoplaying(v81);
    *(_BYTE *)(v81 + 177) = 0;
    if ((*(_QWORD *)(v81 + 360) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*(_QWORD *)(v81 + 360) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v81 + 328));
    }
    v82 = *(_QWORD *)(v81 + 80);
    v83 = WebCore::MediaElementSession::preferredBufferingPolicy((WebCore::MediaElementSession *)v81);
    v84 = (WebCore::PlatformMediaSessionManager *)WebCore::HTMLMediaElement::setBufferingPolicy(v82, v83);
    v85 = WebCore::PlatformMediaSessionManager::sharedManager(v84);
    v86 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 192))(v85);
    {
      if (!(_BYTE)WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings
        && !*((_DWORD *)WebCore::installedMediaEngines(v86) + 3))
      {
        WebCore::HTMLMediaElement::noneSupported((unsigned __int8 *)this, v87);
        return WebCore::HTMLMediaElement::configureMediaControls(this);
      }
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
    v88 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
    if (!v88)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(this);
      v88 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
    }
    if (WebCore::MediaElementSession::dataLoadingPermitted(v88))
      WebCore::HTMLMediaElement::selectMediaResource(this);
    return WebCore::HTMLMediaElement::configureMediaControls(this);
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::configureMediaControls(WebCore::HTMLMediaElement *this)
{
  int v2;
  WebCore::MediaElementSession *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = WebCore::HTMLMediaElement::controls(this);
  if ((*(unsigned int (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1264))(this))
  {
    v3 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
    if (!v3)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(this);
      v3 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
    }
    v2 |= WebCore::MediaElementSession::requiresFullscreenForVideoPlayback(v3);
  }
  (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1800))(this);
  if ((*(unsigned int (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1264))(this))
  {
    v4 = *((_QWORD *)this + 13);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 4);
      if ((v5 & 1) != 0)
      {
        v6 = *(uint64_t **)(v4 + 40);
        LODWORD(v7) = *(_DWORD *)(v4 + 52);
        if (!(_DWORD)v7)
          goto LABEL_20;
      }
      else
      {
        v6 = (uint64_t *)(v4 + 32);
        LODWORD(v7) = v5 >> 5;
        if (!(_DWORD)v7)
          goto LABEL_20;
      }
      v7 = v7;
      while (1)
      {
        v8 = *v6;
        if (*v6 == WebCore::HTMLNames::autoplayAttr
          || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::autoplayAttr + 24)
          && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::autoplayAttr + 32))
        {
          break;
        }
        v6 += 2;
        if (!--v7)
          goto LABEL_20;
      }
      v9 = *((_QWORD *)this + 200);
      if (!v9)
      {
        WebCore::HTMLMediaElement::initializeMediaSession(this);
        v9 = *((_QWORD *)this + 200);
      }
      v2 |= *(unsigned __int8 *)(v9 + 89) >> 7;
    }
  }
LABEL_20:
  result = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1800))(this);
  if ((*((_BYTE *)this + 1697) || v2)
    && (*((_BYTE *)this + 22) & 8) != 0
    && (*(_DWORD *)((_BYTE *)this + 1265) & 0x20) != 0)
  {
    return WebCore::HTMLMediaElement::ensureMediaControls(this);
  }
  return result;
}

unsigned __int8 *WebCore::HTMLMediaElement::updateSleepDisabling(WTF **this)
{
  unsigned __int8 *result;
  WTF::StringImpl *v3;
  int v4;
  int v5;
  WTF *v6;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t *v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t IdentifierInternal;
  PAL::SleepDisablerCocoa *v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  unsigned __int8 *v23;
  int v25;
  uint64_t v26;
  int8x16_t v27;
  WTF::StringImpl *v28;

  result = (unsigned __int8 *)WebCore::HTMLMediaElement::shouldDisableSleep((WebCore::HTMLMediaElement *)this);
  v4 = (int)result;
  if (!(_DWORD)result)
  {
    v16 = this[178];
    if (!v16)
      goto LABEL_29;
    this[178] = 0;
      goto LABEL_24;
    WebCore::sleepDisablerClient(void)::client = 0;
    goto LABEL_26;
  }
  v5 = (_DWORD)result == 1;
  v6 = this[178];
  if (v6 && *((_DWORD *)v6 + 4) == v5)
    goto LABEL_29;
  v7 = *(_QWORD *)(*((_QWORD *)this[5] + 1) + 528);
  v8 = 0uLL;
  if (v7 && (v9 = *(_QWORD *)(v7 + 8)) != 0 && (v10 = *(_QWORD *)(v9 + 24)) != 0)
  {
    v11 = *(int8x16_t **)(v10 + 8);
    v12 = 0uLL;
    if (v11)
    {
      v13 = v11[2];
      v14.i64[0] = -256;
      v14.i64[1] = -256;
      v12 = vandq_s8(v13, v14);
      v15.i64[0] = 255;
      v15.i64[1] = 255;
      v8 = vandq_s8(v13, v15);
    }
  }
  else
  {
    v12 = 0uLL;
  }
  v27 = vorrq_s8(v8, v12);
  v17 = WTF::fastMalloc((WTF *)0x28);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_DWORD *)(v17 + 16) = v5;
  *(int8x16_t *)(v17 + 24) = v27;
  {
    if (WebCore::sleepDisablerClient(void)::client)
    {
      IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
      *(_QWORD *)(v17 + 8) = IdentifierInternal;
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, BOOL, uint64_t, uint64_t))(*(_QWORD *)WebCore::sleepDisablerClient(void)::client
                                                                                           + 16))(WebCore::sleepDisablerClient(void)::client, IdentifierInternal, &v28, v4 == 1, v27.i64[0], v27.i64[1]);
      goto LABEL_19;
    }
  }
  else
  {
    WebCore::sleepDisablerClient(void)::client = 0;
  }
  v19 = (PAL::SleepDisablerCocoa *)operator new();
  PAL::SleepDisablerCocoa::SleepDisablerCocoa(v19, (WTF::String *)&v28, v4 == 1);
  v20 = *(_QWORD *)v17;
  *(_QWORD *)v17 = v19;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
LABEL_19:
  result = (unsigned __int8 *)v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  v16 = this[178];
  this[178] = (WTF *)v17;
  if (v16)
  {
    {
LABEL_24:
      if (WebCore::sleepDisablerClient(void)::client)
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)WebCore::sleepDisablerClient(void)::client
                                                                + 24))(WebCore::sleepDisablerClient(void)::client, *((_QWORD *)v16 + 1), *((_QWORD *)v16 + 3), *((_QWORD *)v16 + 4));
      goto LABEL_26;
    }
    WebCore::sleepDisablerClient(void)::client = 0;
LABEL_26:
    v21 = *(_QWORD *)v16;
    *(_QWORD *)v16 = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    result = (unsigned __int8 *)WTF::fastFree(v16, v3);
  }
LABEL_29:
  v22 = this[142];
  if (!v22)
    return result;
  v23 = *(unsigned __int8 **)v22;
  if (__ldaxr(*(unsigned __int8 **)v22))
  {
    __clrex();
  }
  else if (!__stxr(1u, v23))
  {
    goto LABEL_34;
  }
  MEMORY[0x19AEA534C](v23);
LABEL_34:
  ++*((_QWORD *)v23 + 1);
  v25 = __ldxr(v23);
  if (v25 == 1)
  {
    if (!__stlxr(0, v23))
      goto LABEL_39;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v23);
LABEL_39:
  v26 = *((_QWORD *)v22 + 9);
  if (v26)
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v26 + 1088))(v26, v4 == 1);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v22);
}

uint64_t WebCore::HTMLMediaElement::setMediaGroup(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WebCore::MediaController *v10;
  void *v11;
  uint64_t v12;
  WebCore::MediaController *v13;
  void *v14;
  bmalloc::api *v15;
  void *v16;
  __int16 v17;
  __int16 v18;
  bmalloc::api *v19;
  void *v20;
  __int16 v21;
  __int16 v22;
  WebCore::MediaController *v23;

  result = WTF::equal(this[176], *a2, a3);
  if ((result & 1) == 0)
  {
    v7 = *a2;
    if (*a2)
      *(_DWORD *)v7 += 2;
    v8 = this[176];
    this[176] = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v23 = 0;
    WebCore::HTMLMediaElement::setController((WebCore::HTMLMediaElement *)this, (uint64_t *)&v23);
    result = (uint64_t)v23;
    if (v23)
    {
      if (*((_DWORD *)v23 + 2) == 1)
      {
        WebCore::MediaController::~MediaController(v23);
        result = bmalloc::api::isoDeallocate(v15, v16);
      }
      else
      {
        --*((_DWORD *)v23 + 2);
      }
    }
    if (*a2 && *((_DWORD *)*a2 + 1))
    {
      v9 = *((_QWORD *)this[5] + 1);
      *(_DWORD *)(v9 + 24) += 2;
      v10 = (WebCore::MediaController *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v10 = off_1E33C5D00;
      *((_QWORD *)v10 + 1) = this;
      *((_QWORD *)v10 + 2) = a2;
      v23 = v10;
      WebCore::Document::forEachMediaElement(v9, (uint64_t)&v23);
      result = (uint64_t)v23;
      v23 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        v17 = *(_WORD *)(v9 + 30);
        if ((v17 & 0x400) == 0)
        {
          v18 = *(_WORD *)(v9 + 28);
          if ((v18 & 0xF000) == 0x9000)
          {
            result = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v9, v11);
          }
          else
          {
            if ((v18 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
              v17 = *(_WORD *)(v9 + 30);
            }
            *(_WORD *)(v9 + 30) = v17 | 0x400;
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
          }
        }
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
      if (!this[177])
      {
        v12 = *((_QWORD *)this[5] + 1);
        *(_DWORD *)(v12 + 24) += 2;
        v13 = (WebCore::MediaController *)bmalloc::api::isoAllocate();
        v23 = WebCore::MediaController::MediaController(v13, (WebCore::ScriptExecutionContext *)(v12 + 192));
        WebCore::HTMLMediaElement::setController((WebCore::HTMLMediaElement *)this, (uint64_t *)&v23);
        result = (uint64_t)v23;
        if (v23)
        {
          if (*((_DWORD *)v23 + 2) == 1)
          {
            WebCore::MediaController::~MediaController(v23);
            result = bmalloc::api::isoDeallocate(v19, v20);
          }
          else
          {
            --*((_DWORD *)v23 + 2);
          }
        }
        if (*(_DWORD *)(v12 + 24) == 2)
        {
          v21 = *(_WORD *)(v12 + 30);
          if ((v21 & 0x400) == 0)
          {
            v22 = *(_WORD *)(v12 + 28);
            if ((v22 & 0xF000) == 0x9000)
            {
              return (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v12, v14);
            }
            else
            {
              if ((v22 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 160) + 16))(*(_QWORD *)(v12 + 160));
                v21 = *(_WORD *)(v12 + 30);
              }
              *(_WORD *)(v12 + 30) = v21 | 0x400;
              return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 72))(v12);
            }
          }
        }
        else
        {
          *(_DWORD *)(v12 + 24) -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t (**WebCore::HTMLMediaElement::finishParsingChildren(WebCore::HTMLMediaElement *this))()
{
  uint64_t (**result)();
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __int16 v6;

  result = (uint64_t (**)())WebCore::Element::finishParsingChildren(this);
  v3 = *(unsigned int *)((char *)this + 1265);
  v4 = v3 & 0xFFFFFFFFFFBFFFFFLL | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
  *(_DWORD *)((char *)this + 1265) = v3 & 0xFFBFFFFF;
  *(_WORD *)((char *)this + 1269) = WORD2(v4);
  v5 = *((_QWORD *)this + 10);
  if (v5)
  {
    while (1)
    {
      v6 = *(_WORD *)(v5 + 28);
      if ((v6 & 0x10) != 0
        && (v6 & 0x110) != 0x110
        && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::trackTag + 24))
      {
        break;
      }
      v5 = *(_QWORD *)(v5 + 56);
      if (!v5)
        return result;
    }
    return WebCore::HTMLMediaElement::scheduleConfigureTextTracks((uint64_t (**)())this);
  }
  return result;
}

uint64_t (**WebCore::HTMLMediaElement::scheduleConfigureTextTracks(uint64_t (**this)()))()
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t (*v4)();
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t (**v8)();
  __int128 v9;
  __int128 v10;

  v1 = (uint64_t)this;
  v2 = *(unsigned int **)this[81];
  if (!v2 || (v3 = atomic_load(v2), v3 == 1))
  {
    v4 = this[229];
    *(_QWORD *)&v9 = "HTMLMediaElement";
    *((_QWORD *)&v9 + 1) = 17;
    *(_QWORD *)&v10 = "scheduleConfigureTextTracks";
    *((_QWORD *)&v10 + 1) = v4;
    if (*((_BYTE *)this[228] + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v9, "task scheduled");
    v6 = v9;
    v7 = v10;
    v5 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v5 = off_1E33C5BC0;
    *(_QWORD *)(v5 + 8) = v1;
    *(_OWORD *)(v5 + 16) = v6;
    *(_OWORD *)(v5 + 32) = v7;
    v8 = (uint64_t (**)())v5;
    WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(v1, 9, v1 + 640, &v8);
    this = v8;
    v8 = 0;
    if (this)
      return (uint64_t (**)())(*((uint64_t (**)(uint64_t (**)()))*this + 1))(this);
  }
  return this;
}

uint64_t WebCore::HTMLMediaElement::rendererIsNeeded(WebCore::HTMLMediaElement *this, const WebCore::RenderStyle *a2)
{
  uint64_t result;

  LODWORD(result) = WebCore::HTMLMediaElement::controls(this);
  if ((*((_QWORD *)a2 + 2) & 0x17) == 0x12)
    return 0;
  else
    return result;
}

uint64_t WebCore::HTMLMediaElement::createElementRenderer@<X0>(WebCore::ImageOverlay *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const WebCore::HTMLElement *v9;
  char hasOverlay;
  uint64_t result;

  v6 = bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v6, 21, (uint64_t)a1, a2, 12, 771);
  *(_OWORD *)(v7 + 200) = 0u;
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_DWORD *)(v7 + 20) |= 2u;
  *(_QWORD *)v7 = off_1E34280E8;
  *(_QWORD *)(v7 + 216) = 0;
  v8 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v8 + 8) = 0;
  *(_QWORD *)v8 = off_1E34287A0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 32) = 1;
  *(_QWORD *)(v6 + 224) = v8;
  *(_WORD *)(v6 + 232) = 0;
  *(_BYTE *)(v6 + 234) = 0;
  if ((*((_BYTE *)a1 + 28) & 0x10) != 0)
    hasOverlay = WebCore::ImageOverlay::hasOverlay(a1, v9);
  else
    hasOverlay = 0;
  *(_BYTE *)(v6 + 235) = hasOverlay;
  *(_DWORD *)(v6 + 236) = 1065353216;
  result = WebCore::RenderImage::updateAltText(v6);
  *(_QWORD *)v6 = off_1E342AD58;
  *(_BYTE *)(v6 + 234) = 1;
  *a3 = v6;
  return result;
}

uint64_t WebCore::HTMLMediaElement::childShouldCreateRenderer(WebCore::HTMLMediaElement *this, const WebCore::Node *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 4);
  if (!v2 || (*(_WORD *)(v2 + 28) & 0x80) == 0)
    return 0;
  if ((*((_WORD *)a2 + 14) & 0x20) == 0)
    return 1;
  if (*(_QWORD *)(*((_QWORD *)a2 + 12) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    return 0;
  return (*(uint64_t (**)(const WebCore::Node *))(*(_QWORD *)a2 + 1232))(a2);
}

uint64_t WebCore::HTMLMediaElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  WTF::MonotonicTime *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  _QWORD v14[4];

  v6 = *(_QWORD *)(a1 + 1824);
  v7 = *(_QWORD *)(a1 + 1832);
  v14[0] = "HTMLMediaElement";
  v14[1] = 17;
  v14[2] = "insertedIntoAncestor";
  v14[3] = v7;
  if (*(_BYTE *)(v6 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v14);
  v8 = (WTF::MonotonicTime *)WebCore::HTMLElement::insertedIntoAncestor(a1, a2, a3);
  if ((a2 & 1) != 0)
  {
    v9 = *(_DWORD *)(a1 + 1265);
    if ((v9 & 0x20) == 0)
    {
      *(_WORD *)(a1 + 1269) = *(_WORD *)(a1 + 1269);
      *(_DWORD *)(a1 + 1265) = v9 | 0x20;
      v10 = *(_QWORD *)(a1 + 1600);
      if (v10)
      {
        *(_BYTE *)(v10 + 177) = (*(_DWORD *)(*(_QWORD *)(v10 + 80) + 1265) & 0x20) == 0;
        if ((*(_QWORD *)(v10 + 360) & 0xFFFFFFFFFFFFLL) == 0
          || *(double *)((*(_QWORD *)(v10 + 360) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        {
          v11 = v10 + 328;
          *(_QWORD *)(v10 + 352) = 0;
          WTF::MonotonicTime::now(v8);
          WebCore::TimerBase::setNextFireTime(v11, v12 + 0.1);
        }
      }
    }
  }
  return a2 & 1;
}

unsigned int *WebCore::HTMLMediaElement::didFinishInsertingNode(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  WebCore::PlatformMediaSession *v21;
  unsigned int *result;
  void *v23;
  __int16 v24;
  __int16 v25;
  _QWORD v26[4];

  *((_DWORD *)this + 6) += 2;
  v2 = *((_QWORD *)this + 228);
  v3 = *((_QWORD *)this + 229);
  v26[0] = "HTMLMediaElement";
  v26[1] = 17;
  v26[2] = "didFinishInsertingNode";
  v26[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v26);
  v4 = (_DWORD *)((char *)this + 1265);
  if ((*(_DWORD *)((_BYTE *)this + 1265) & 0x20) != 0 && !*((_DWORD *)this + 225))
  {
    v5 = *((_QWORD *)this + 13);
    if (v5)
    {
      v6 = *(_DWORD *)(v5 + 4);
      if ((v6 & 1) != 0)
      {
        v7 = *(_QWORD *)(v5 + 40);
        LODWORD(v8) = *(_DWORD *)(v5 + 52);
        if ((_DWORD)v8)
        {
LABEL_8:
          v8 = v8;
          v9 = (uint64_t *)(v7 + 8);
          while (1)
          {
            v10 = *(v9 - 1);
            if (v10 == WebCore::HTMLNames::srcAttr
              || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
              && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
            {
              goto LABEL_17;
            }
            v9 += 2;
            if (!--v8)
            {
              v9 = (uint64_t *)MEMORY[0x1E0CBF2F8];
              goto LABEL_17;
            }
          }
        }
      }
      else
      {
        v7 = v5 + 32;
        LODWORD(v8) = v6 >> 5;
        if ((_DWORD)v8)
          goto LABEL_8;
      }
    }
    v9 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_17:
    v11 = *v9;
    if (v11 && *(_DWORD *)(v11 + 4))
      WebCore::HTMLMediaElement::prepareForLoad(this);
  }
  WebCore::HTMLMediaElement::visibilityAdjustmentStateDidChange(this);
  v12 = *v4 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
  if ((*v4 & 0x100) != 0)
    goto LABEL_35;
  v13 = v12 | 0x100;
  *(_WORD *)((char *)this + 1269) = WORD2(v12);
  *v4 = v12 | 0x100;
  v14 = *((_QWORD *)this + 13);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 + 4);
    if ((v15 & 1) != 0)
    {
      v16 = *(uint64_t **)(v14 + 40);
      v17 = *(_DWORD *)(v14 + 52);
      if (!v17)
      {
LABEL_31:
        LODWORD(v14) = 0;
        goto LABEL_32;
      }
    }
    else
    {
      v16 = (uint64_t *)(v14 + 32);
      v17 = v15 >> 5;
      if (!(v15 >> 5))
        goto LABEL_31;
    }
    v18 = v17;
    LODWORD(v14) = 128;
    while (1)
    {
      v19 = *v16;
      if (*v16 == WebCore::HTMLNames::mutedAttr
        || *(_QWORD *)(v19 + 24) == *(_QWORD *)(WebCore::HTMLNames::mutedAttr + 24)
        && *(_QWORD *)(v19 + 32) == *(_QWORD *)(WebCore::HTMLNames::mutedAttr + 32))
      {
        break;
      }
      v16 += 2;
      if (!--v18)
        goto LABEL_31;
    }
  }
LABEL_32:
  v20 = v13 & 0xFFFFFFFFFFFFFF7FLL;
  *(_WORD *)((char *)this + 1269) = WORD2(v20);
  *v4 = v14 | v20;
  v21 = (WebCore::PlatformMediaSession *)*((_QWORD *)this + 200);
  if (!v21)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v21 = (WebCore::PlatformMediaSession *)*((_QWORD *)this + 200);
  }
  WebCore::PlatformMediaSession::canProduceAudioChanged(v21);
LABEL_35:
  result = (unsigned int *)WebCore::HTMLMediaElement::configureMediaControls(this);
  if (*((_DWORD *)this + 6) == 2)
  {
    v24 = *((_WORD *)this + 15);
    if ((v24 & 0x400) == 0)
    {
      v25 = *((_WORD *)this + 14);
      if ((v25 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef(this, v23);
      }
      else
      {
        if ((v25 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
          v24 = *((_WORD *)this + 15);
        }
        *((_WORD *)this + 15) = v24 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 72))(this);
      }
    }
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::visibilityAdjustmentStateDidChange(WebCore::HTMLMediaElement *this)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  int v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v28;

  result = WebCore::Element::isInVisibilityAdjustmentSubtree(this);
  if (((result ^ (((*(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32)) & 0x20000000000) == 0)) & 1) != 0)
    return result;
  v3 = result;
  if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1472))(this) & 1) == 0)
  {
    v4 = *((_QWORD *)this + 177);
    if (!v4 || !*(_BYTE *)(v4 + 104))
    {
      v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
      if (!v5)
        goto LABEL_11;
      v6 = *(_QWORD *)(v5 + 8);
      if (!v6)
        goto LABEL_11;
      v7 = *(_QWORD *)(v6 + 24);
      if (!v7)
        goto LABEL_11;
      v8 = *(_QWORD *)(v7 + 8);
      if (!v8)
        goto LABEL_11;
      v9 = (*(_DWORD *)v8)++;
      v10 = *(_BYTE *)(v8 + 352);
      if (v9)
      {
        *(_DWORD *)v8 = v9;
        if ((v10 & 1) == 0)
        {
LABEL_11:
          v11 = (*(unsigned __int16 *)((char *)this + 1269) >> 9) & 1;
          goto LABEL_14;
        }
      }
      else
      {
        WebCore::Page::~Page(v8);
        WTF::fastFree(v12, v13);
        if ((v10 & 1) == 0)
          goto LABEL_11;
      }
    }
  }
  v11 = 1;
LABEL_14:
  v14 = 0x20000000000;
  if (!v3)
    v14 = 0;
  v15 = (*(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32)) & 0xFFFFFDFFFFFFFFFFLL;
  *(_DWORD *)((char *)this + 1265) = *(_DWORD *)((char *)this + 1265);
  *(_WORD *)((char *)this + 1269) = (v15 | v14) >> 32;
  result = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1472))(this);
  if ((result & 1) != 0)
    goto LABEL_28;
  v16 = *((_QWORD *)this + 177);
  if (v16)
  {
    if (*(_BYTE *)(v16 + 104))
      goto LABEL_28;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 24);
      if (v19)
      {
        result = *(_QWORD *)(v19 + 8);
        if (result)
        {
          v20 = (*(_DWORD *)result)++;
          v21 = *(_BYTE *)(result + 352);
          if (v20)
          {
            *(_DWORD *)result = v20;
            if ((v21 & 1) == 0)
              goto LABEL_25;
LABEL_28:
            if ((v11 & 1) != 0)
              return result;
            v22 = 1;
            goto LABEL_31;
          }
          WebCore::Page::~Page(result);
          result = WTF::fastFree(v23, v24);
          if ((v21 & 1) != 0)
            goto LABEL_28;
        }
      }
    }
  }
LABEL_25:
  v22 = (*(unsigned __int16 *)((char *)this + 1269) >> 9) & 1;
  if (v11 == (_DWORD)v22)
    return result;
LABEL_31:
  v25 = *((_QWORD *)this + 142);
  if (v25)
  {
    v26 = *(unsigned __int8 **)v25;
    if (__ldaxr(*(unsigned __int8 **)v25))
    {
      __clrex();
    }
    else if (!__stxr(1u, v26))
    {
      goto LABEL_36;
    }
    MEMORY[0x19AEA534C](v26);
LABEL_36:
    ++*((_QWORD *)v26 + 1);
    v28 = __ldxr(v26);
    if (v28 == 1)
    {
      if (!__stlxr(0, v26))
        goto LABEL_41;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_41:
    *(_BYTE *)(v25 + 227) = v22;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v25 + 72) + 512))(*(_QWORD *)(v25 + 72), v22);
    return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v25);
  }
  return result;
}

void WebCore::HTMLMediaElement::exitFullscreen(WebCore::HTMLMediaElement *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::MediaElementSession *v13;
  uint64_t v14;
  int v15;
  __n128 v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::FullscreenManager *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  __int16 v30;
  uint64_t v31;
  int v32;
  int v33;
  WTF *v34;
  void *v35;
  __int16 v36;
  __int16 v37;
  WebCore *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _DWORD *v44;
  const char *v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  WebCore::FullscreenManager *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  const char *v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  WebCore::FullscreenManager *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  WebCore::FullscreenManager *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  char v73;

  v3 = *((_QWORD *)this + 228);
  v4 = *((_QWORD *)this + 229);
  v69 = "HTMLMediaElement";
  v70 = 17;
  v71 = "exitFullscreen";
  v72 = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v69);
  v5 = (*(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32)) & 0xFFFFFFFEFFFFFFFFLL;
  *(_DWORD *)((char *)this + 1265) = *(_DWORD *)((char *)this + 1265);
  *(_WORD *)((char *)this + 1269) = WORD2(v5);
  v6 = *((_QWORD *)this + 5);
  v7 = *(_QWORD *)(v6 + 8);
  if ((*(_QWORD *)(*(_QWORD *)(v7 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_6;
  v8 = *(_QWORD *)(v7 + 1992);
  if (!v8)
  {
    v48 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v48 = 0;
    *(_DWORD *)(v48 + 8) = 0;
    v49 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v7);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 + 1, v49));
    *(_QWORD *)(v48 + 24) = 0;
    *(_QWORD *)(v48 + 32) = 0;
    *(_QWORD *)(v48 + 16) = v49;
    *(_BYTE *)(v48 + 40) = 0;
    *(_OWORD *)(v48 + 48) = 0u;
    *(_OWORD *)(v48 + 64) = 0u;
    *(_OWORD *)(v48 + 80) = 0u;
    *(_OWORD *)(v48 + 96) = 0u;
    *(_OWORD *)(v48 + 112) = 0u;
    *(_DWORD *)(v48 + 127) = 0;
    *(_QWORD *)(v48 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
    v51 = *(WebCore::FullscreenManager **)(v7 + 1992);
    *(_QWORD *)(v7 + 1992) = v48;
    if (v51)
    {
      WebCore::FullscreenManager::~FullscreenManager(v51, a2);
      if (*(_DWORD *)(v52 + 8))
      {
        *(_OWORD *)(v52 + 112) = 0u;
        *(_OWORD *)(v52 + 128) = 0u;
        *(_OWORD *)(v52 + 80) = 0u;
        *(_OWORD *)(v52 + 96) = 0u;
        *(_OWORD *)(v52 + 48) = 0u;
        *(_OWORD *)(v52 + 64) = 0u;
        *(_OWORD *)(v52 + 16) = 0u;
        *(_OWORD *)(v52 + 32) = 0u;
        *(_OWORD *)v52 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v52, a2);
      }
    }
    v8 = *(_QWORD *)(v7 + 1992);
    v6 = *((_QWORD *)this + 5);
  }
  if (*(WebCore::HTMLMediaElement **)(v8 + 56) != this)
  {
LABEL_6:
    v9 = *((unsigned int *)this + 270);
    *((_DWORD *)this + 6) += 2;
    v10 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 528);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 24);
        if (v12)
        {
          if (*(_QWORD *)(v12 + 8)
            && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
          {
            if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1384))(this) & 1) == 0)
            {
              v13 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
              if (!v13)
              {
                WebCore::HTMLMediaElement::initializeMediaSession(this);
                v13 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
              }
              if (WebCore::MediaElementSession::requiresFullscreenForVideoPlayback(v13))
              {
                if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 664) & 0x800000) == 0)
                  goto LABEL_35;
                v14 = *((_QWORD *)this + 8);
                if ((v14 & 0xFFFFFFFFFFFFLL) == 0)
                  goto LABEL_35;
                if ((*(_BYTE *)((v14 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195C02EECLL);
                }
                if ((*(_BYTE *)((v14 & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
                  || (*(_BYTE *)((v14 & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195C02F0CLL);
                }
                if (*(_BYTE *)((v14 & 0xFFFFFFFFFFFFLL) + 0x2E) == 48
                  && (WebCore::RenderVideo::videoBox((WebCore::RenderVideo *)(v14 & 0xFFFFFFFFFFFFLL)), v17 >= 2)
                  && v15 > 1)
                {
                  v18 = 1;
                  *((_BYTE *)this + 1096) = 1;
                  v73 = 1;
                  v19 = *((_QWORD *)this + 228);
                  v20 = *((_QWORD *)this + 229);
                  v69 = "HTMLMediaElement";
                  v70 = 17;
                  v71 = "setControls";
                  v72 = v20;
                  if (*(_BYTE *)(v19 + 12))
                  {
                    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v69);
                    v18 = v73 != 0;
                  }
                  WebCore::Element::setBooleanAttribute((WTF::StringImpl **)this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::controlsAttr, v18, v16);
                }
                else
                {
LABEL_35:
                  WebCore::HTMLMediaElement::pauseInternal(this);
                }
              }
            }
            v27 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
            if (*(_BYTE *)(v27 + 467) || *(_BYTE *)(v27 + 468))
            {
              WebCore::HTMLMediaElement::setFullscreenMode(this, 0);
              v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528)
                                                      + 8)
                                          + 24)
                              + 8);
              ++*(_DWORD *)v28;
              (*(void (**)(_QWORD, WebCore::HTMLMediaElement *, _QWORD))(**(_QWORD **)(*(_QWORD *)(v28 + 48)
                                                                                                + 16)
                                                                                  + 1160))(*(_QWORD *)(*(_QWORD *)(v28 + 48) + 16), this, 0);
              goto LABEL_39;
            }
            v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 528) + 8) + 24) + 8);
            ++*(_DWORD *)v31;
            v32 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v31 + 48) + 16) + 1096))(*(_QWORD *)(*(_QWORD *)(v31 + 48) + 16), v9);
            v33 = v32;
            if (*(_DWORD *)v31 == 1)
            {
              WebCore::Page::~Page(v31);
              WTF::fastFree(v46, v47);
              if (!v33)
                goto LABEL_41;
            }
            else
            {
              --*(_DWORD *)v31;
              if (!v32)
                goto LABEL_41;
            }
            if (*((_BYTE *)this + 1084))
            {
              WebCore::HTMLMediaElement::setFullscreenMode(this, 0);
              *(_WORD *)((char *)this + 1269) |= 2u;
              v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528)
                                                      + 8)
                                          + 24)
                              + 8);
              ++*(_DWORD *)v28;
              (*(void (**)(_QWORD, WebCore::HTMLMediaElement *, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v28 + 48) + 16)
                                                                                          + 1120))(*(_QWORD *)(*(_QWORD *)(v28 + 48) + 16), this, *((unsigned int *)this + 270), *((unsigned __int8 *)this + 1084));
LABEL_39:
              if (*(_DWORD *)v28 == 1)
              {
                WebCore::Page::~Page(v28);
                WTF::fastFree(v34, v35);
              }
              else
              {
                --*(_DWORD *)v28;
              }
              goto LABEL_41;
            }
            *(_WORD *)((char *)this + 1269) = (*(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32) | 0x200000000) >> 32;
            if ((_DWORD)v9 == 4 || (_DWORD)v9 == 1)
            {
              v38 = (WebCore *)WebCore::HTMLMediaElement::setFullscreenMode(this, 0);
              v39 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v39 || (v40 = *(_QWORD *)(v39 + 96)) == 0)
                v40 = WebCore::threadGlobalDataSlow(v38);
              v41 = *(_QWORD *)(v40 + 40);
              if (!v41)
              {
                WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v40);
                v41 = *(_QWORD *)(v40 + 40);
              }
              v42 = (char *)bmalloc::api::isoAllocate();
              WTF::MonotonicTime::now((WTF::MonotonicTime *)v42);
              *((_DWORD *)v42 + 4) = 1;
              *(_QWORD *)v42 = off_1E33A4B48;
              *((_QWORD *)v42 + 1) = 0;
              *((_DWORD *)v42 + 5) = *((_DWORD *)v42 + 5) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v41 + 2368) != 0);
              v44 = *(_DWORD **)(v41 + 2368);
              if (v44)
                *v44 += 2;
              *((_QWORD *)v42 + 3) = v44;
              *((_QWORD *)v42 + 4) = 0;
              *((_QWORD *)v42 + 5) = 0;
              *((_QWORD *)v42 + 6) = 0;
              *((_QWORD *)v42 + 7) = v43;
              *((_QWORD *)v42 + 8) = 0;
              v69 = v42;
              WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)this + 28, (uint64_t)this, 9, (uint64_t)this + 824, (uint64_t *)&v69);
              v45 = v69;
              v69 = 0;
              if (v45)
              {
                if (*((_DWORD *)v45 + 4) == 1)
                  (*(void (**)(const char *))(*(_QWORD *)v45 + 8))(v45);
                else
                  --*((_DWORD *)v45 + 4);
              }
              goto LABEL_41;
            }
            WebCore::HTMLMediaElement::setFullscreenMode(this, 0);
            v53 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
            if (v53)
            {
              v54 = *(_QWORD *)(v53 + 8);
              if (v54)
              {
                v55 = *(_QWORD *)(v54 + 24);
                if (v55)
                {
                  v28 = *(_QWORD *)(v55 + 8);
                  if (v28)
                  {
                    ++*(_DWORD *)v28;
                    v56 = *(_QWORD *)(*(_QWORD *)(v28 + 48) + 16);
                    v57 = (char *)WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v57 = off_1E33C5CB0;
                    v69 = v57;
                    (*(void (**)(uint64_t, WebCore::HTMLMediaElement *, const char **))(*(_QWORD *)v56 + 1152))(v56, this, &v69);
                    v58 = v69;
                    v69 = 0;
                    if (v58)
                      (*(void (**)(const char *))(*(_QWORD *)v58 + 8))(v58);
                    goto LABEL_39;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_41:
    if (*((_DWORD *)this + 6) == 2)
    {
      v29 = *((_WORD *)this + 15);
      if ((v29 & 0x400) == 0)
      {
        v30 = *((_WORD *)this + 14);
        if ((v30 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef(this, a2);
        }
        else
        {
          if ((v30 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
            v29 = *((_WORD *)this + 15);
          }
          *((_WORD *)this + 15) = v29 | 0x400;
          (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 72))(this);
        }
      }
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
    return;
  }
  v21 = *(_QWORD *)(v6 + 8);
  v22 = *(_QWORD *)(v21 + 1992);
  if (!v22)
  {
    v59 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v59 = 0;
    *(_DWORD *)(v59 + 8) = 0;
    v60 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v21);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 + 1, v60));
    *(_QWORD *)(v59 + 24) = 0;
    *(_QWORD *)(v59 + 32) = 0;
    *(_QWORD *)(v59 + 16) = v60;
    *(_BYTE *)(v59 + 40) = 0;
    *(_OWORD *)(v59 + 48) = 0u;
    *(_OWORD *)(v59 + 64) = 0u;
    *(_OWORD *)(v59 + 80) = 0u;
    *(_OWORD *)(v59 + 96) = 0u;
    *(_OWORD *)(v59 + 112) = 0u;
    *(_DWORD *)(v59 + 127) = 0;
    *(_QWORD *)(v59 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
    v62 = *(WebCore::FullscreenManager **)(v21 + 1992);
    *(_QWORD *)(v21 + 1992) = v59;
    if (v62)
    {
      WebCore::FullscreenManager::~FullscreenManager(v62, a2);
      if (*(_DWORD *)(v63 + 8))
      {
        *(_OWORD *)(v63 + 112) = 0u;
        *(_OWORD *)(v63 + 128) = 0u;
        *(_OWORD *)(v63 + 80) = 0u;
        *(_OWORD *)(v63 + 96) = 0u;
        *(_OWORD *)(v63 + 48) = 0u;
        *(_OWORD *)(v63 + 64) = 0u;
        *(_OWORD *)(v63 + 16) = 0u;
        *(_OWORD *)(v63 + 32) = 0u;
        *(_OWORD *)v63 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v63, a2);
      }
    }
    v22 = *(_QWORD *)(v21 + 1992);
  }
  if (*(_QWORD *)(v22 + 56))
  {
    *(_WORD *)((char *)this + 1269) |= 2u;
    v23 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v23 + 24) += 2;
    v24 = *(WebCore::FullscreenManager **)(v23 + 1992);
    if (!v24)
    {
      v64 = WTF::fastMalloc((WTF *)0x90);
      *(_QWORD *)v64 = 0;
      *(_DWORD *)(v64 + 8) = 0;
      v65 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v23);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 + 1, v65));
      *(_QWORD *)(v64 + 24) = 0;
      *(_QWORD *)(v64 + 32) = 0;
      *(_QWORD *)(v64 + 16) = v65;
      *(_BYTE *)(v64 + 40) = 0;
      *(_OWORD *)(v64 + 48) = 0u;
      *(_OWORD *)(v64 + 64) = 0u;
      *(_OWORD *)(v64 + 80) = 0u;
      *(_OWORD *)(v64 + 96) = 0u;
      *(_OWORD *)(v64 + 112) = 0u;
      *(_DWORD *)(v64 + 127) = 0;
      *(_QWORD *)(v64 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
      v67 = *(WebCore::FullscreenManager **)(v23 + 1992);
      *(_QWORD *)(v23 + 1992) = v64;
      if (v67)
      {
        WebCore::FullscreenManager::~FullscreenManager(v67, a2);
        if (*(_DWORD *)(v68 + 8))
        {
          *(_OWORD *)(v68 + 112) = 0u;
          *(_OWORD *)(v68 + 128) = 0u;
          *(_OWORD *)(v68 + 80) = 0u;
          *(_OWORD *)(v68 + 96) = 0u;
          *(_OWORD *)(v68 + 48) = 0u;
          *(_OWORD *)(v68 + 64) = 0u;
          *(_OWORD *)(v68 + 16) = 0u;
          *(_OWORD *)(v68 + 32) = 0u;
          *(_OWORD *)v68 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v68, a2);
        }
      }
      v24 = *(WebCore::FullscreenManager **)(v23 + 1992);
    }
    ++*((_DWORD *)v24 + 2);
    WebCore::FullscreenManager::cancelFullscreen(v24, a2);
    v25 = *((_DWORD *)v24 + 2);
    if (!v25)
    {
      __break(0xC471u);
      JUMPOUT(0x195C02ECCLL);
    }
    *((_DWORD *)v24 + 2) = v25 - 1;
    if (*(_DWORD *)(v23 + 24) == 2)
    {
      v36 = *(_WORD *)(v23 + 30);
      if ((v36 & 0x400) == 0)
      {
        v37 = *(_WORD *)(v23 + 28);
        if ((v37 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v23, a2);
        }
        else
        {
          if ((v37 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v23 + 160) + 16))(*(_QWORD *)(v23 + 160));
            v36 = *(_WORD *)(v23 + 30);
          }
          *(_WORD *)(v23 + 30) = v36 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 72))(v23);
        }
      }
    }
    else
    {
      *(_DWORD *)(v23 + 24) -= 2;
    }
  }
  v26 = *((_DWORD *)this + 270);
  if (v26 != 1 && v26 != 4)
  {
    v6 = *((_QWORD *)this + 5);
    goto LABEL_6;
  }
}

uint64_t WebCore::HTMLMediaElement::setupAndCallJS(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t result;
  WTF *v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t *v22;
  WTF::StringImpl *v23;
  WebCore::DOMWrapperWorld *v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  unsigned int v27;
  WebCore::DOMWrapperWorld *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  JSC::JSGlobalObject *v33;
  uint64_t v34;
  void *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  WTF *v41;
  void *v42;
  __int16 v43;
  __int16 v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  WTF::StringImpl *v50;
  _QWORD v51[3];
  uint64_t v52;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4)
    return 0;
  v5 = *(_DWORD **)(v4 + 8);
  if (!v5)
    return 0;
  ++*v5;
  result = WTF::fastMalloc((WTF *)0x10);
  v9 = (WTF *)result;
  *(_DWORD *)result = 1;
  *(_DWORD *)(a1 + 24) += 2;
  *(_QWORD *)(result + 8) = a1;
  ++*(_QWORD *)(a1 + 128);
  if (*(_QWORD *)(a1 + 1624))
  {
LABEL_39:
    v28 = *(WebCore::DOMWrapperWorld **)(a1 + 1624);
    v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528) + 8);
    v30 = (unsigned int *)(v29 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
    v32 = *(_QWORD *)(v29 + 304);
    v33 = (JSC::JSGlobalObject *)*((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(v32 + 16) + 112), v28)+ 2);
    v34 = *((_QWORD *)v33 + 7);
    MEMORY[0x19AEA3294](v51, v34);
    v12 = (*(uint64_t (**)(_QWORD, JSC::JSGlobalObject *, JSC::JSGlobalObject *, uint64_t, WebCore::DOMWrapperWorld *))(*(_QWORD *)*a2 + 16))(*a2, v33, v33, v32, v28);
    if (*(_DWORD *)(v34 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v34))
    {
      v45 = *(_QWORD *)(v34 + 16);
      JSC::VM::clearException((JSC::VM *)v34);
      WebCore::reportException(v33, v45, 0, 0, 0);
      v12 = 0;
    }
    MEMORY[0x19AEA32A0](v51);
    do
    {
      v36 = __ldaxr(v30);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v30));
    if (!v37)
    {
      atomic_store(1u, v30);
      v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v46 = off_1E31FE290;
      v46[1] = v30;
      v51[0] = v46;
      WTF::ensureOnMainThread();
      v47 = v51[0];
      v51[0] = 0;
      if (v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
    }
    if (*(_DWORD *)v9 == 1)
    {
      v38 = *((_QWORD *)v9 + 1);
      --*(_QWORD *)(v38 + 128);
      *((_QWORD *)v9 + 1) = 0;
      if (*(_DWORD *)(v38 + 24) == 2)
      {
        v43 = *(_WORD *)(v38 + 30);
        if ((v43 & 0x400) == 0)
        {
          v44 = *(_WORD *)(v38 + 28);
          if ((v44 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v38, v35);
          }
          else
          {
            if ((v44 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v38 + 160) + 16))(*(_QWORD *)(v38 + 160));
              v43 = *(_WORD *)(v38 + 30);
            }
            *(_WORD *)(v38 + 30) = v43 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 72))(v38);
          }
        }
      }
      else
      {
        *(_DWORD *)(v38 + 24) -= 2;
      }
      WTF::fastFree(v9, v35);
    }
    else
    {
      --*(_DWORD *)v9;
    }
    if (*v5 == 1)
    {
      WebCore::Page::~Page((uint64_t)v5);
      WTF::fastFree(v39, v40);
    }
    else
    {
      --*v5;
    }
    return v12;
  }
  v10 = WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists((WTF::RunLoop *)result);
    JSC::VM::create();
    v10 = v51[0];
    WebCore::g_commonVMOrNull = v51[0];
    if (__ldaxr((unsigned int *)(v51[0] + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v51[0] + 1096)))
    {
LABEL_12:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v51[0] + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v10 + 584));
      result = WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v10, 0);
      goto LABEL_15;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v51[0] + 192));
    goto LABEL_12;
  }
  do
LABEL_15:
    v13 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v13 + 1, (unsigned int *)v10));
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 + 4);
    *(_DWORD *)v14 += 2;
    if (v15 < 0)
    {
LABEL_69:
      v50 = 0;
      goto LABEL_70;
    }
  }
  else
  {
    v15 = 0;
  }
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    goto LABEL_69;
  result = (v17 + 16);
  if (__OFADD__(v17, 16))
    goto LABEL_69;
  v18 = !v14 || (*(_BYTE *)(v14 + 16) & 4) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>(result, v18, "Media Controls (", 0x10u, v14, 41, &v50);
  if (v50)
  {
    v19 = WTF::fastMalloc((WTF *)0x38);
    v20 = v19;
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = v10;
    *(_QWORD *)(v19 + 24) = 0;
    *(_QWORD *)(v19 + 32) = 0;
    v21 = v50;
    if (v50)
      *(_DWORD *)v50 += 2;
    *(_QWORD *)(v19 + 40) = v21;
    *(_DWORD *)(v19 + 48) = 2;
    *(_WORD *)(v19 + 52) = 0;
    v22 = (uint64_t *)(*(_QWORD *)(v10 + 41456) + 8);
    v52 = v20;
    WTF::HashTable<WebCore::DOMWrapperWorld *,WebCore::DOMWrapperWorld *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>>::add(v22, &v52, (uint64_t)v51);
    v24 = *(WebCore::DOMWrapperWorld **)(a1 + 1624);
    *(_QWORD *)(a1 + 1624) = v20;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
      {
        WebCore::DOMWrapperWorld::~DOMWrapperWorld(v24, v23);
        WTF::fastFree(v41, v42);
      }
      else
      {
        --*(_DWORD *)v24;
      }
    }
    v25 = v50;
    v50 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, v23);
        if (v14)
        {
LABEL_34:
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v14, v23);
          else
            *(_DWORD *)v14 -= 2;
          goto LABEL_36;
        }
        do
        {
LABEL_36:
          v26 = __ldaxr((unsigned int *)v10);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, (unsigned int *)v10));
        if (!v27)
        {
          atomic_store(1u, (unsigned int *)v10);
          v48 = (WTF *)MEMORY[0x19AEA3AF8](v10);
          WTF::fastFree(v48, v49);
        }
        goto LABEL_39;
      }
      *(_DWORD *)v25 -= 2;
    }
    if (v14)
      goto LABEL_34;
    goto LABEL_36;
  }
LABEL_70:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::HTMLMediaElement::removedFromAncestor(WTF::MonotonicTime *a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v7;
  uint64_t v8;
  WebCore::NavigatorMediaSession *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  WebCore::NavigatorMediaSession *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v22)();
  WebCore::PlatformMediaSession *v23;
  _DWORD *v24;
  WebCore::NavigatorMediaSession *v25;
  WebCore::Navigator *v26;
  WebCore::NavigatorMediaSession *v28[4];

  v7 = (uint64_t)a1;
  v8 = *((_QWORD *)a1 + 228);
  v9 = (WebCore::NavigatorMediaSession *)*((_QWORD *)a1 + 229);
  v28[0] = (WebCore::NavigatorMediaSession *)"HTMLMediaElement";
  v28[1] = (WebCore::NavigatorMediaSession *)17;
  v28[2] = (WebCore::NavigatorMediaSession *)"removedFromAncestor";
  v28[3] = v9;
  if (*(_BYTE *)(v8 + 12))
    a1 = (WTF::MonotonicTime *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v28);
  v10 = *(unsigned int *)(v7 + 1265);
  if ((v10 & 0x20) != 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFDFLL | ((unint64_t)*(unsigned __int16 *)(v7 + 1269) << 32);
    *(_DWORD *)(v7 + 1265) = v10 & 0xFFFFFFDF;
    *(_WORD *)(v7 + 1269) = WORD2(v11);
    v12 = *(_QWORD *)(v7 + 1600);
    if (v12)
    {
      *(_BYTE *)(v12 + 177) = (*(_DWORD *)(*(_QWORD *)(v12 + 80) + 1265) & 0x20) == 0;
      if ((*(_QWORD *)(v12 + 360) & 0xFFFFFFFFFFFFLL) == 0
        || (a5.n128_u64[0] = *(_QWORD *)((*(_QWORD *)(v12 + 360) & 0xFFFFFFFFFFFFLL) + 8), a5.n128_f64[0] == 0.0))
      {
        v13 = v12 + 328;
        *(_QWORD *)(v12 + 352) = 0;
        WTF::MonotonicTime::now(a1);
        WebCore::TimerBase::setNextFireTime(v13, v14 + 0.1);
      }
    }
  }
  if ((a2 & 1) != 0)
  {
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = off_1E33C5848;
    v15[1] = v7;
    v16 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v16 = 1;
    v17 = *(_DWORD *)(v7 + 24);
    *(_QWORD *)(v16 + 8) = v7;
    ++*(_QWORD *)(v7 + 128);
    *(_DWORD *)(v7 + 24) = v17 + 4;
    v18 = (WebCore::NavigatorMediaSession *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v18 = &off_1E33C5820;
    *((_QWORD *)v18 + 1) = v7;
    *((_QWORD *)v18 + 2) = v16;
    *((_QWORD *)v18 + 3) = v15;
    v28[0] = v18;
    v19 = *(_QWORD *)(v7 + 120);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v20)
      {
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v20 - 96) + 104))(v20 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v21, 9, (uint64_t *)v28);
        v18 = v28[0];
        v28[0] = 0;
        if (!v18)
          goto LABEL_15;
      }
      else
      {
        v28[0] = 0;
      }
      v22 = *(uint64_t (***)())v18;
    }
    else
    {
      v28[0] = 0;
      v22 = &off_1E33C5820;
    }
    v22[1]();
  }
LABEL_15:
  v23 = *(WebCore::PlatformMediaSession **)(v7 + 1600);
  if (v23)
  {
    v24 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v23 + 10) + 40) + 8) + 696);
    if (v24)
    {
      WebCore::LocalDOMWindow::protectedNavigator(v24, v28);
      v25 = v28[0];
      WebCore::NavigatorMediaSession::mediaSession(v28[0], v26);
      if (*((_DWORD *)v25 + 4) == 1)
        (*(void (**)(WebCore::NavigatorMediaSession *))(*(_QWORD *)v25 + 16))(v25);
      else
        --*((_DWORD *)v25 + 4);
    }
    WebCore::PlatformMediaSession::clientCharacteristicsChanged(v23, 0);
  }
  WebCore::HTMLElement::removedFromAncestor(v7, a2, a3, a4, a5);
  return WebCore::HTMLMediaElement::visibilityAdjustmentStateDidChange((WebCore::HTMLMediaElement *)v7);
}

WTF *WebCore::HTMLMediaElement::didAttachRenderers(WTF *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t (**v12[3])();

  v1 = (uint64_t)this;
  v2 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v2)
    goto LABEL_14;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    goto LABEL_23;
  }
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
    || (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195C037DCLL);
  }
  ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  this = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 312))(v2);
  v4 = *(_QWORD *)(v1 + 1600);
  if (!v4)
    goto LABEL_12;
  this = (WTF *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 80) + 1264))(*(_QWORD *)(v4 + 80));
  if (!(_DWORD)this)
    goto LABEL_12;
  v5 = *(_WORD *)(v2 + 76);
  if ((v5 & 1) != 0)
    goto LABEL_12;
  *(_WORD *)(v2 + 76) = v5 | 1;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40) + 8) + 1944);
  ++*(_DWORD *)(v6 + 16);
  this = WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>(v6 + 480, (_QWORD *)v2, (uint64_t)v12);
  v7 = *(_DWORD *)(v6 + 16);
  if (!v7)
  {
    __break(0xC471u);
LABEL_23:
    JUMPOUT(0x195C037BCLL);
  }
  *(_DWORD *)(v6 + 16) = v7 - 1;
LABEL_12:
  v8 = *(_DWORD *)(v2 + 16);
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x195C037FCLL);
  }
  *(_DWORD *)(v2 + 16) = v8 - 1;
LABEL_14:
  v9 = **(unsigned int ***)(v1 + 808);
  if (!v9 || (v10 = atomic_load(v9), v10 == 1))
  {
    v11 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v11 = off_1E33C5E68;
    *(_QWORD *)(v11 + 8) = v1;
    v12[0] = (uint64_t (**)())v11;
    WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(v1, 9, v1 + 800, v12);
    this = (WTF *)v12[0];
    v12[0] = 0;
    if (this)
      return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

uint64_t WebCore::HTMLMediaElement::willDetachRenderers(uint64_t this)
{
  uint64_t v1;
  int v3;
  __int16 v4;
  WebCore::RenderView *v5;
  int v6;
  uint64_t v7;

  v1 = *(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL;
  if (v1)
  {
    if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
        || (*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195C038CCLL);
      }
      v3 = *(_DWORD *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
      *(_DWORD *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v3;
      v4 = *(_WORD *)(v1 + 76);
      if ((v4 & 1) == 0)
      {
        if (v3)
        {
LABEL_9:
          *(_DWORD *)(v1 + 16) = v3 - 1;
          return this;
        }
LABEL_15:
        __break(0xC471u);
        JUMPOUT(0x195C0393CLL);
      }
      *(_WORD *)(v1 + 76) = v4 & 0xFFFE;
      v5 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) + 40) + 8)
                                   + 1944);
      ++*((_DWORD *)v5 + 4);
      v7 = v1;
      this = WebCore::RenderView::unregisterForVisibleInViewportCallback(v5, (WebCore::RenderElement *)v1);
      v6 = *((_DWORD *)v5 + 4);
      if (v6)
      {
        *((_DWORD *)v5 + 4) = v6 - 1;
        v1 = v7;
        v3 = *(_DWORD *)(v7 + 16);
        if (v3)
          goto LABEL_9;
        goto LABEL_15;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x195C038ACLL);
  }
  return this;
}

uint64_t (**WebCore::HTMLMediaElement::didDetachRenderers(WebCore::HTMLMediaElement *this))()
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t (**v5)();
  uint64_t (*v6)();
  uint64_t v7;
  int v8;
  uint64_t (**result)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t (**v14)();

  v2 = (unsigned int *)**((_QWORD **)this + 101);
  if (!v2 || (v3 = atomic_load(v2), v3 == 1))
  {
    v4 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E33C5E68;
    *(_QWORD *)(v4 + 8) = this;
    v14 = (uint64_t (**)())v4;
    WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>((uint64_t)this, 9, (uint64_t)this + 800, &v14);
    v5 = v14;
    v14 = 0;
    if (v5)
      (*((void (**)(uint64_t (**)()))*v5 + 1))(v5);
  }
  v6 = (uint64_t (*)())WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E33C5870;
  *((_QWORD *)v6 + 1) = this;
  v7 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  v8 = *((_DWORD *)this + 6);
  *(_QWORD *)(v7 + 8) = this;
  ++*((_QWORD *)this + 16);
  *((_DWORD *)this + 6) = v8 + 4;
  result = (uint64_t (**)())WTF::fastMalloc((WTF *)0x20);
  *result = (uint64_t (*)())&off_1E33C5820;
  result[1] = (uint64_t (*)())this;
  result[2] = (uint64_t (*)())v7;
  result[3] = v6;
  v14 = result;
  v10 = *((_QWORD *)this + 15);
  if (!v10)
  {
    v14 = 0;
    v13 = (uint64_t (*)())&off_1E33C5820;
    return (uint64_t (**)())(*((uint64_t (**)(void))v13 + 1))();
  }
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
  {
    v14 = 0;
    goto LABEL_10;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 - 96) + 104))(v11 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v12, 9, (uint64_t *)&v14);
  result = v14;
  v14 = 0;
  if (result)
  {
LABEL_10:
    v13 = *result;
    return (uint64_t (**)())(*((uint64_t (**)(void))v13 + 1))();
  }
  return result;
}

unsigned __int8 *WebCore::HTMLMediaElement::updateRenderer(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  _DWORD *v3;
  int v5;
  WebCore::MediaControlsHost *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  _QWORD v15[2];

  v2 = this;
  v3 = (_DWORD *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
  if (v3)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      goto LABEL_29;
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
      || (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C03C48);
    }
    ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
    this = (unsigned __int8 *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 312))(v3);
    v5 = v3[4];
    if (!v5)
    {
LABEL_29:
      __break(0xC471u);
      JUMPOUT(0x195C03C28);
    }
    v3[4] = v5 - 1;
  }
  v6 = (WebCore::MediaControlsHost *)*((_QWORD *)v2 + 202);
  if (v6)
  {
    v7 = (*(_DWORD *)v6)++;
    this = (unsigned __int8 *)*((_QWORD *)v6 + 3);
    if (this)
    {
      this = (unsigned __int8 *)WebCore::MediaControlTextTrackContainerElement::updateSizes((WebCore::RenderVideo *)this, 0);
      v7 = *(_DWORD *)v6 - 1;
    }
    if (v7)
    {
      *(_DWORD *)v6 = v7;
    }
    else
    {
      WebCore::MediaControlsHost::~MediaControlsHost(v6, a2);
      this = (unsigned __int8 *)WTF::fastFree(v13, v14);
    }
  }
  v8 = *((_QWORD *)v2 + 142);
  if (v8)
  {
    v9 = *(unsigned __int8 **)v8;
    if (__ldaxr(*(unsigned __int8 **)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_19;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_19:
    ++*((_QWORD *)v9 + 1);
    v11 = __ldxr(v9);
    if (v11 == 1)
    {
      if (!__stlxr(0, v9))
        goto LABEL_24;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_24:
    v15[0] = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v2 + 2248))(v2);
    v15[1] = v12;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v8 + 72) + 1216))(*(_QWORD *)(v8 + 72), v15);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v8);
  }
  return this;
}

uint64_t *WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(uint64_t a1, char a2, uint64_t a3, uint64_t (***a4)())
{
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t (**v10)();
  uint64_t v11;
  int v12;
  uint64_t (***v13)();
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (**v20)();
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  _OWORD v26[2];
  uint64_t (***v27)();

  v7 = *(uint64_t **)(a3 + 8);
  v8 = *v7;
  if (*v7)
    goto LABEL_20;
  v8 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = v7;
  v23 = (unsigned int *)*v7;
  *v7 = v8;
  if (!v23)
    goto LABEL_20;
  do
  {
    v24 = __ldaxr(v23);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v23));
  if (!v25)
  {
    atomic_store(1u, v23);
    WTF::fastFree((WTF *)v23, v22);
  }
  v8 = *v7;
  if (*v7)
  {
LABEL_20:
    do
      v9 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v9 + 1, (unsigned int *)v8));
  }
  v10 = *a4;
  *a4 = 0;
  v11 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  v12 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v11 + 8) = a1;
  ++*(_QWORD *)(a1 + 128);
  *(_DWORD *)(a1 + 24) = v12 + 4;
  v13 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x28);
  *v13 = off_1E33C5898;
  v13[1] = (uint64_t (**)())a1;
  v13[2] = (uint64_t (**)())v11;
  v13[3] = (uint64_t (**)())v8;
  memset(v26, 0, sizeof(v26));
  v13[4] = v10;
  v27 = v13;
  v17 = *(_QWORD *)(a1 + 120);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if (v18)
    {
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v18 - 96) + 104))(v18 - 96);
      WebCore::EventLoopTaskGroup::queueTask(v19, a2, (uint64_t *)&v27);
      v13 = v27;
      v27 = 0;
      if (!v13)
        return WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(WebCore::HTMLMediaElement &,WebCore::TaskSource,WTF::TaskCancellationGroup &,WTF::Function<void ()(void)> &&)::{lambda(void)#1}::~Function((uint64_t *)v26, v14);
    }
    else
    {
      v27 = 0;
    }
    v20 = *v13;
  }
  else
  {
    v27 = 0;
    v20 = off_1E33C5898;
  }
  ((void (*)(uint64_t (***)(), void *, uint64_t, uint64_t))v20[1])(v13, v14, v15, v16);
  return WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(WebCore::HTMLMediaElement &,WebCore::TaskSource,WTF::TaskCancellationGroup &,WTF::Function<void ()(void)> &&)::{lambda(void)#1}::~Function((uint64_t *)v26, v14);
}

WTF::StringImpl *WebCore::HTMLMediaElement::loadNextSourceChild(WebCore::HTMLMediaElement *this, __n128 a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  char v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;

  v9 = 0;
  v10 = 0;
  v8 = 0;
  WebCore::HTMLMediaElement::selectNextSourceChild((WTF::URL *)&v6, (uint64_t)this, (uint64_t)&v9, (WTF::String *)1, a2);
  if ((v7 & 1) != 0)
  {
    WebCore::HTMLMediaElement::createMediaPlayer(this);
    *((_DWORD *)this + 264) = 2;
    WebCore::HTMLMediaElement::loadResource((WTF::StringImpl **)this, (const WTF::URL *)&v6, (const WebCore::ContentType *)&v9, (const WTF::String *)&v8);
  }
  else
  {
    WebCore::HTMLMediaElement::waitForSourceChange(this);
  }
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerActiveSourceBuffersChanged(WebCore::HTMLMediaElement *this)
{
  int v2;
  unsigned int *v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  WebCore::PlatformMediaSession *v9;

  v2 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1280))(this);
  v3 = (unsigned int *)((char *)this + 1265);
  v4 = *(_DWORD *)((_BYTE *)this + 1265) & 0x8000000;
  if (v2)
    v4 = 0x8000000;
  v5 = v4 | *(_DWORD *)((_BYTE *)this + 1265) & 0xF7FFFFFF;
  *(_WORD *)((char *)this + 1269) = *(_WORD *)((char *)this + 1269);
  *v3 = v5;
  v6 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1272))(this);
  v7 = *v3 & 0x10000000;
  if (v6)
    v7 = 0x10000000;
  v8 = v7 | *v3 & 0xEFFFFFFF;
  *(_WORD *)((char *)this + 1269) = *(_WORD *)((char *)this + 1269);
  *v3 = v8;
  v9 = (WebCore::PlatformMediaSession *)*((_QWORD *)this + 200);
  if (!v9)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v9 = (WebCore::PlatformMediaSession *)*((_QWORD *)this + 200);
  }
  return WebCore::PlatformMediaSession::canProduceAudioChanged(v9);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerActiveSourceBuffersChanged(WebCore::HTMLMediaElement *this)
{
  WebCore::HTMLMediaElement *v2;
  int v3;
  unsigned int *v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  WebCore::PlatformMediaSession *v10;

  v2 = (WebCore::HTMLMediaElement *)((char *)this - 176);
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this - 22) + 1280))((char *)this - 176);
  v4 = (unsigned int *)((char *)v2 + 1265);
  v5 = *(_DWORD *)((_BYTE *)v2 + 1265) & 0x8000000;
  if (v3)
    v5 = 0x8000000;
  v6 = v5 | *(_DWORD *)((_BYTE *)v2 + 1265) & 0xF7FFFFFF;
  *(_WORD *)((char *)v2 + 1269) = *(_WORD *)((char *)v2 + 1269);
  *v4 = v6;
  v7 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v2 + 1272))(v2);
  v8 = *v4 & 0x10000000;
  if (v7)
    v8 = 0x10000000;
  v9 = v8 | *v4 & 0xEFFFFFFF;
  *(_WORD *)((char *)v2 + 1269) = *(_WORD *)((char *)v2 + 1269);
  *v4 = v9;
  v10 = (WebCore::PlatformMediaSession *)*((_QWORD *)v2 + 200);
  if (!v10)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(v2);
    v10 = (WebCore::PlatformMediaSession *)*((_QWORD *)this + 178);
  }
  return WebCore::PlatformMediaSession::canProduceAudioChanged(v10);
}

_DWORD *WebCore::HTMLMediaElement::scheduleEvent(WebCore::HTMLMediaElement *this, const WTF::AtomString *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _DWORD *v7;
  _DWORD *result;
  _DWORD *v9;

  v4 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v4);
  *(_QWORD *)v4 = off_1E33A4B48;
  *(_QWORD *)(v4 + 8) = 0;
  v6 = *(_DWORD *)(v4 + 20) & 0xFFC00000 | (*(_QWORD *)a2 != 0) | 0x1E8204;
  *(_DWORD *)(v4 + 16) = 1;
  *(_DWORD *)(v4 + 20) = v6;
  v7 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v7 += 2;
  *(_QWORD *)(v4 + 24) = v7;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = v5;
  *(_QWORD *)(v4 + 64) = 0;
  v9 = (_DWORD *)v4;
  WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)this + 28, (uint64_t)this, 9, (uint64_t)this + 824, (uint64_t *)&v9);
  result = v9;
  v9 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::scheduleRejectPendingPlayPromises(uint64_t result, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  uint64_t v14;

  v2 = *(_DWORD *)(result + 868);
  if (v2)
  {
    v3 = result;
    v4 = *a2;
    *a2 = 0;
    v5 = *(_QWORD *)(result + 856);
    *(_QWORD *)(result + 856) = 0;
    v6 = *(_DWORD *)(result + 864);
    *(_QWORD *)(result + 864) = 0;
    v7 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v7 = &off_1E33C5910;
    *(_QWORD *)(v7 + 8) = v3;
    *(_QWORD *)(v7 + 16) = v4;
    *(_QWORD *)(v7 + 24) = v5;
    *(_DWORD *)(v7 + 32) = v6;
    *(_DWORD *)(v7 + 36) = v2;
    v8 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    v9 = *(_DWORD *)(v3 + 24);
    *(_QWORD *)(v8 + 8) = v3;
    ++*(_QWORD *)(v3 + 128);
    *(_DWORD *)(v3 + 24) = v9 + 4;
    result = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)result = &off_1E33C5820;
    *(_QWORD *)(result + 8) = v3;
    *(_QWORD *)(result + 16) = v8;
    *(_QWORD *)(result + 24) = v7;
    v14 = result;
    v10 = *(_QWORD *)(v3 + 120);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 - 96) + 104))(v11 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v12, 9, &v14);
        result = v14;
        v14 = 0;
        if (!result)
          return result;
      }
      else
      {
        v14 = 0;
      }
      v13 = *(uint64_t (***)())result;
    }
    else
    {
      v14 = 0;
      v13 = &off_1E33C5820;
    }
    return v13[1]();
  }
  return result;
}

_QWORD *WebCore::HTMLMediaElement::scheduleNotifyAboutPlaying(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  _QWORD *v12;

  v2 = *((_QWORD *)this + 107);
  *((_QWORD *)this + 107) = 0;
  v3 = *((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = &off_1E33C5938;
  v4[1] = this;
  v4[2] = v2;
  v4[3] = v3;
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *((_DWORD *)this + 6);
  *(_QWORD *)(v5 + 8) = this;
  ++*((_QWORD *)this + 16);
  *((_DWORD *)this + 6) = v6 + 4;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E33C5820;
  result[1] = this;
  result[2] = v5;
  result[3] = v4;
  v12 = result;
  v8 = *((_QWORD *)this + 15);
  if (!v8)
  {
    v12 = 0;
    v11 = &off_1E33C5820;
    return (_QWORD *)v11[1]();
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
    v12 = 0;
    goto LABEL_6;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 104))(v9 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v10, 9, (uint64_t *)&v12);
  result = v12;
  v12 = 0;
  if (result)
  {
LABEL_6:
    v11 = (uint64_t (**)())*result;
    return (_QWORD *)v11[1]();
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::currentMediaTime(WebCore::HTMLMediaElement *this)
{
  WebCore::HTMLMediaElement *v1;
  char *v2;
  const WTF::MediaTime *v3;
  WTF::MonotonicTime *v4;
  int v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  char v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  NSObject *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  char v43;
  uint64_t v44;
  int v45;
  double v46;
  double v47;
  double v48;
  double v49;
  BOOL v50;
  double v51;
  uint64_t v52;
  double v53;
  unsigned int v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  NSObject *v59;
  uint64_t v60;
  char *v61;
  unsigned __int8 *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  WTF::Logger *v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::Logger *v75;
  uint64_t v76;
  WTF::StringImpl **v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  int v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  char v95;
  int v96;
  char v97;
  uint64_t v98;
  int v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  NSObject *v105;
  uint64_t v106;
  void *v107;
  char *v108;
  unsigned __int8 *v109;
  int v110;
  int v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  WTF::Logger *v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::Logger *v125;
  uint64_t v126;
  WTF::StringImpl **v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  char v145;
  int v146;
  char v147;
  uint64_t v148;
  int v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  NSObject *v155;
  uint64_t v156;
  void *v157;
  char *v158;
  unsigned __int8 *v159;
  int v160;
  int v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  WTF::Logger *v167;
  uint64_t v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::Logger *v173;
  uint64_t v174;
  WTF::StringImpl **v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  int v181;
  unsigned int v182;
  uint64_t v183;
  int v184;
  char v185;
  WTF::MediaTime *v186;
  uint64_t v187;
  uint64_t v188;
  double v189;
  uint64_t v190;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  WTF::Logger *v197;
  uint64_t v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  WTF::Logger *v203;
  uint64_t v204;
  WTF::StringImpl **v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  int v211;
  unsigned int v212;
  WTF::StringImpl *v213;
  uint64_t v214;
  uint64_t v215;
  WTF::StringImpl *v216;
  uint64_t v217;
  const char *v218;
  uint64_t v219;
  const char *v220;
  uint64_t v221;
  __int128 v222;
  WTF::Logger *v223;
  uint64_t v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  __int128 buf;
  int v231;
  WTF::StringImpl *v232;
  int v233;
  WTF::StringImpl *v234;
  int v235;
  WTF::StringImpl *v236[5];

  v1 = this;
  v236[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if ((byte_1EE337C0D & 1) == 0)
  {
    this = (WebCore::HTMLMediaElement *)WTF::MediaTime::createWithDouble(this, 1.0);
    qword_1EE337C20[0] = this;
    qword_1EE337C20[1] = v214;
    byte_1EE337C0D = 1;
  }
  if (!*((_QWORD *)v1 + 142))
    return *(_OWORD *)WTF::MediaTime::zeroTime(this);
  v2 = (char *)v1 + 1168;
  v3 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(this);
  v4 = (WTF::MonotonicTime *)WTF::MediaTime::compare((WebCore::HTMLMediaElement *)((char *)v1 + 1168), v3);
  if ((_DWORD)v4)
    return *(_OWORD *)v2;
  v6 = *(_DWORD *)((char *)v1 + 1265);
  v7 = *((_QWORD *)v1 + 228);
  if ((v6 & 0x800) != 0)
  {
    v38 = *((_QWORD *)v1 + 229);
    v218 = "HTMLMediaElement";
    v219 = 17;
    v220 = "currentMediaTime";
    v221 = v38;
    v2 = (char *)v1 + 1000;
    if (!*(_BYTE *)(v7 + 12))
      return *(_OWORD *)v2;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v218);
    WTF::String::String((WTF::String *)&v228, "seeking, returning");
    WTF::MediaTime::toJSONString((WebCore::HTMLMediaElement *)((char *)v1 + 1000));
    if (v229)
    {
      v39 = *((_DWORD *)v229 + 1);
      if (v228)
        goto LABEL_75;
    }
    else
    {
      v39 = 0;
      if (v228)
      {
LABEL_75:
        v40 = *((_DWORD *)v228 + 1);
        if (v227)
        {
LABEL_76:
          v41 = *((_DWORD *)v227 + 1);
LABEL_77:
          if ((v41 | v40) < 0
            || ((v19 = __OFADD__(v40, v41), v42 = v40 + v41, !v19) ? (v43 = 0) : (v43 = 1),
                v39 < 0 || (v43 & 1) != 0 || (v44 = (v39 + v42), __OFADD__(v39, v42))))
          {
            v216 = 0;
            goto LABEL_496;
          }
          if (v229 && (*((_BYTE *)v229 + 16) & 4) == 0)
          {
            v45 = 0;
            goto LABEL_106;
          }
          if (v228)
          {
            v54 = *((_DWORD *)v228 + 4);
            v45 = (v54 >> 2) & 1;
            if (v227 && (v54 & 4) != 0)
              goto LABEL_105;
          }
          else
          {
            if (v227)
            {
LABEL_105:
              v45 = (*((unsigned __int8 *)v227 + 16) >> 2) & 1;
              goto LABEL_106;
            }
            v45 = 1;
          }
LABEL_106:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v44, v45, v229, (uint64_t)v228, (uint64_t)v227, &v216);
          if (v216)
          {
            v56 = v227;
            v227 = 0;
            if (v56)
            {
              if (*(_DWORD *)v56 == 2)
                WTF::StringImpl::destroy(v56, v55);
              else
                *(_DWORD *)v56 -= 2;
            }
            v57 = v228;
            v228 = 0;
            if (v57)
            {
              if (*(_DWORD *)v57 == 2)
                WTF::StringImpl::destroy(v57, v55);
              else
                *(_DWORD *)v57 -= 2;
            }
            v58 = v229;
            v229 = 0;
            if (v58)
            {
              if (*(_DWORD *)v58 == 2)
                WTF::StringImpl::destroy(v58, v55);
              else
                *(_DWORD *)v58 -= 2;
            }
            v59 = qword_1ECE7C4A0;
            v60 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v60)
            {
              WTF::String::utf8();
              v61 = v223 ? (char *)v223 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v61;
              _os_log_impl(&dword_1940B8000, v59, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v60 = (uint64_t)v223;
              v223 = 0;
              if (v60)
              {
                if (*(_DWORD *)v60 == 1)
                  v60 = WTF::fastFree((WTF *)v60, v33);
                else
                  --*(_DWORD *)v60;
              }
            }
            if (WebCore::LogMedia)
            {
              v62 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v63 = *v62;
                if ((v63 & 1) != 0)
                  break;
                v64 = __ldaxr(v62);
                if (v64 == v63)
                {
                  if (!__stxr(v63 | 1, v62))
                  {
                    v65 = WTF::Logger::observers((WTF::Logger *)v60);
                    v66 = *(unsigned int *)(v65 + 12);
                    if ((_DWORD)v66)
                    {
                      v67 = *(uint64_t **)v65;
                      v68 = *(_QWORD *)v65 + 8 * v66;
                      do
                      {
                        v69 = *v67;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v218);
                        v231 = 0;
                        WTF::String::String((WTF::String *)&v232, "seeking, returning");
                        v233 = 1;
                        WTF::MediaTime::toJSONString((WTF::MediaTime *)v2);
                        v223 = 0;
                        v224 = 0;
                        v70 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v224) = 3;
                        v223 = v70;
                        v71 = HIDWORD(v224);
                        *((_DWORD *)v70 + 4 * HIDWORD(v224)) = buf;
                        v72 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v70 + 2 * v71 + 1) = v72;
                        *((_DWORD *)v70 + 4 * (v71 + 1)) = v231;
                        v73 = v232;
                        if (v232)
                          *(_DWORD *)v232 += 2;
                        *((_QWORD *)v70 + 2 * (v71 + 1) + 1) = v73;
                        *((_DWORD *)v70 + 4 * (v71 + 2)) = v233;
                        v74 = v234;
                        if (v234)
                          *(_DWORD *)v234 += 2;
                        *((_QWORD *)v70 + 2 * (v71 + 2) + 1) = v74;
                        HIDWORD(v224) = v71 + 3;
                        (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v69 + 16))(v69, &WebCore::LogMedia, 0, &v223);
                        v75 = v223;
                        if (HIDWORD(v224))
                        {
                          v76 = 16 * HIDWORD(v224);
                          v77 = (WTF::StringImpl **)((char *)v223 + 8);
                          do
                          {
                            v78 = *v77;
                            *v77 = 0;
                            if (v78)
                            {
                              if (*(_DWORD *)v78 == 2)
                                WTF::StringImpl::destroy(v78, (WTF::StringImpl *)v33);
                              else
                                *(_DWORD *)v78 -= 2;
                            }
                            v77 += 2;
                            v76 -= 16;
                          }
                          while (v76);
                          v75 = v223;
                        }
                        if (v75)
                        {
                          v223 = 0;
                          LODWORD(v224) = 0;
                          WTF::fastFree(v75, v33);
                        }
                        v79 = v234;
                        v234 = 0;
                        if (v79)
                        {
                          if (*(_DWORD *)v79 == 2)
                            WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v33);
                          else
                            *(_DWORD *)v79 -= 2;
                        }
                        v80 = v232;
                        v232 = 0;
                        if (v80)
                        {
                          if (*(_DWORD *)v80 == 2)
                            WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v33);
                          else
                            *(_DWORD *)v80 -= 2;
                        }
                        v81 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v81)
                        {
                          if (*(_DWORD *)v81 == 2)
                            WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v33);
                          else
                            *(_DWORD *)v81 -= 2;
                        }
                        ++v67;
                      }
                      while (v67 != (uint64_t *)v68);
                    }
                    v82 = __ldxr(v62);
                    if (v82 == 1)
                    {
                      if (!__stlxr(0, v62))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v83 = v216;
            v216 = 0;
            if (!v83)
              return *(_OWORD *)v2;
LABEL_168:
            if (*(_DWORD *)v83 == 2)
              WTF::StringImpl::destroy(v83, (WTF::StringImpl *)v33);
            else
              *(_DWORD *)v83 -= 2;
            return *(_OWORD *)v2;
          }
          goto LABEL_496;
        }
LABEL_177:
        v41 = 0;
        goto LABEL_77;
      }
    }
    v40 = 0;
    if (v227)
      goto LABEL_76;
    goto LABEL_177;
  }
  if (*(_BYTE *)(v7 + 12))
  {
    if (WebCore::LogMedia)
      v8 = byte_1ECE7C490 > 3u;
    else
      v8 = 0;
    v9 = v8;
    v2 = (char *)v1 + 1184;
    v10 = (char *)v1 + 1196;
    if ((v6 & 0x400) != 0 && (*((_BYTE *)v1 + 1196) & 1) != 0)
    {
      if (!v9)
        return *(_OWORD *)v2;
      *(_QWORD *)&buf = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v1 + 142) + 72) + 352))(*(_QWORD *)(*((_QWORD *)v1 + 142) + 72));
      *((_QWORD *)&buf + 1) = v11;
      v216 = (WTF::StringImpl *)WTF::MediaTime::operator-();
      v217 = v12;
      if (WTF::MediaTime::compare((WTF::MediaTime *)&v216, (const WTF::MediaTime *)qword_1EE337C20) != 1)
        return *(_OWORD *)v2;
      v13 = *((_QWORD *)v1 + 228);
      v14 = *((_QWORD *)v1 + 229);
      v218 = "HTMLMediaElement";
      v219 = 17;
      v220 = "currentMediaTime";
      v221 = v14;
      if (!*(_BYTE *)(v13 + 12) || !WebCore::LogMedia || byte_1ECE7C490 < 2u)
        return *(_OWORD *)v2;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v218);
      WTF::String::String((WTF::String *)&v227, "cached time is ");
      WTF::MediaTime::toJSONString((WTF::MediaTime *)&v216);
      WTF::String::String((WTF::String *)&v225, " seconds off of media time when paused");
      if (v228)
        v15 = *((_DWORD *)v228 + 1);
      else
        v15 = 0;
      if (v227)
      {
        v16 = *((_DWORD *)v227 + 1);
        if (v226)
          goto LABEL_25;
      }
      else
      {
        v16 = 0;
        if (v226)
        {
LABEL_25:
          v17 = *((_DWORD *)v226 + 1);
          if (v225)
          {
LABEL_26:
            v18 = *((_DWORD *)v225 + 1);
LABEL_27:
            if ((v18 | v17) < 0
              || ((v19 = __OFADD__(v17, v18), v20 = v17 + v18, !v19) ? (v21 = 0) : (v21 = 1),
                  v16 < 0
               || (v21 & 1) != 0
               || ((v19 = __OFADD__(v16, v20), v22 = v16 + v20, !v19) ? (v23 = 0) : (v23 = 1),
                   v15 < 0 || (v23 & 1) != 0 || (v24 = (v15 + v22), __OFADD__(v15, v22)))))
            {
              v229 = 0;
              goto LABEL_492;
            }
            if (v228 && (*((_BYTE *)v228 + 16) & 4) == 0 || v227 && (*((_BYTE *)v227 + 16) & 4) == 0)
            {
              v25 = 0;
              goto LABEL_44;
            }
            if (v226)
            {
              v162 = *((_DWORD *)v226 + 4);
              v25 = (v162 >> 2) & 1;
              if (v225 && (v162 & 4) != 0)
                goto LABEL_339;
            }
            else
            {
              if (v225)
              {
LABEL_339:
                v25 = (*((unsigned __int8 *)v225 + 16) >> 2) & 1;
                goto LABEL_44;
              }
              v25 = 1;
            }
LABEL_44:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v24, v25, (uint64_t)v228, v227, (uint64_t)v226, (uint64_t)v225, &v229);
            if (v229)
            {
              v27 = v225;
              v225 = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2)
                  WTF::StringImpl::destroy(v27, v26);
                else
                  *(_DWORD *)v27 -= 2;
              }
              v28 = v226;
              v226 = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 2)
                  WTF::StringImpl::destroy(v28, v26);
                else
                  *(_DWORD *)v28 -= 2;
              }
              v29 = v227;
              v227 = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 2)
                  WTF::StringImpl::destroy(v29, v26);
                else
                  *(_DWORD *)v29 -= 2;
              }
              v30 = v228;
              v228 = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                  WTF::StringImpl::destroy(v30, v26);
                else
                  *(_DWORD *)v30 -= 2;
              }
              v31 = qword_1ECE7C4A0;
              v32 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v32)
              {
                WTF::String::utf8();
                v34 = v223 ? (char *)v223 + 16 : 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v34;
                _os_log_impl(&dword_1940B8000, v31, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v32 = (uint64_t)v223;
                v223 = 0;
                if (v32)
                {
                  if (*(_DWORD *)v32 == 1)
                    v32 = WTF::fastFree((WTF *)v32, v33);
                  else
                    --*(_DWORD *)v32;
                }
              }
              if (WebCore::LogMedia && byte_1ECE7C490 >= 2u)
              {
                v35 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v36 = *v35;
                  if ((v36 & 1) != 0)
                    break;
                  v37 = __ldaxr(v35);
                  if (v37 == v36)
                  {
                    if (!__stxr(v36 | 1, v35))
                    {
                      v114 = WTF::Logger::observers((WTF::Logger *)v32);
                      v115 = *(unsigned int *)(v114 + 12);
                      if ((_DWORD)v115)
                      {
                        v116 = *(uint64_t **)v114;
                        v117 = *(_QWORD *)v114 + 8 * v115;
                        do
                        {
                          v118 = *v116;
                          LODWORD(buf) = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v218);
                          v231 = 0;
                          WTF::String::String((WTF::String *)&v232, "cached time is ");
                          v233 = 1;
                          WTF::MediaTime::toJSONString((WTF::MediaTime *)&v216);
                          v235 = 0;
                          WTF::String::String((WTF::String *)v236, " seconds off of media time when paused");
                          v223 = 0;
                          v224 = 0;
                          v119 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                          LODWORD(v224) = 4;
                          v223 = v119;
                          v120 = HIDWORD(v224);
                          *((_DWORD *)v119 + 4 * HIDWORD(v224)) = buf;
                          v121 = *((_QWORD *)&buf + 1);
                          if (*((_QWORD *)&buf + 1))
                            **((_DWORD **)&buf + 1) += 2;
                          *((_QWORD *)v119 + 2 * v120 + 1) = v121;
                          *((_DWORD *)v119 + 4 * (v120 + 1)) = v231;
                          v122 = v232;
                          if (v232)
                            *(_DWORD *)v232 += 2;
                          *((_QWORD *)v119 + 2 * (v120 + 1) + 1) = v122;
                          *((_DWORD *)v119 + 4 * (v120 + 2)) = v233;
                          v123 = v234;
                          if (v234)
                            *(_DWORD *)v234 += 2;
                          *((_QWORD *)v119 + 2 * (v120 + 2) + 1) = v123;
                          *((_DWORD *)v119 + 4 * (v120 + 3)) = v235;
                          v124 = v236[0];
                          if (v236[0])
                            *(_DWORD *)v236[0] += 2;
                          *((_QWORD *)v119 + 2 * (v120 + 3) + 1) = v124;
                          HIDWORD(v224) = v120 + 4;
                          (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v118 + 16))(v118, &WebCore::LogMedia, 2, &v223);
                          v125 = v223;
                          if (HIDWORD(v224))
                          {
                            v126 = 16 * HIDWORD(v224);
                            v127 = (WTF::StringImpl **)((char *)v223 + 8);
                            do
                            {
                              v128 = *v127;
                              *v127 = 0;
                              if (v128)
                              {
                                if (*(_DWORD *)v128 == 2)
                                  WTF::StringImpl::destroy(v128, (WTF::StringImpl *)v33);
                                else
                                  *(_DWORD *)v128 -= 2;
                              }
                              v127 += 2;
                              v126 -= 16;
                            }
                            while (v126);
                            v125 = v223;
                          }
                          if (v125)
                          {
                            v223 = 0;
                            LODWORD(v224) = 0;
                            WTF::fastFree(v125, v33);
                          }
                          v129 = v236[0];
                          v236[0] = 0;
                          if (v129)
                          {
                            if (*(_DWORD *)v129 == 2)
                              WTF::StringImpl::destroy(v129, (WTF::StringImpl *)v33);
                            else
                              *(_DWORD *)v129 -= 2;
                          }
                          v130 = v234;
                          v234 = 0;
                          if (v130)
                          {
                            if (*(_DWORD *)v130 == 2)
                              WTF::StringImpl::destroy(v130, (WTF::StringImpl *)v33);
                            else
                              *(_DWORD *)v130 -= 2;
                          }
                          v131 = v232;
                          v232 = 0;
                          if (v131)
                          {
                            if (*(_DWORD *)v131 == 2)
                              WTF::StringImpl::destroy(v131, (WTF::StringImpl *)v33);
                            else
                              *(_DWORD *)v131 -= 2;
                          }
                          v132 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                          *((_QWORD *)&buf + 1) = 0;
                          if (v132)
                          {
                            if (*(_DWORD *)v132 == 2)
                              WTF::StringImpl::destroy(v132, (WTF::StringImpl *)v33);
                            else
                              *(_DWORD *)v132 -= 2;
                          }
                          ++v116;
                        }
                        while (v116 != (uint64_t *)v117);
                      }
                      v133 = __ldxr(v35);
                      if (v133 == 1)
                      {
                        if (!__stlxr(0, v35))
                          break;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              v83 = v229;
              v229 = 0;
              if (!v83)
                return *(_OWORD *)v2;
              goto LABEL_168;
            }
LABEL_492:
            __break(0xC471u);
            JUMPOUT(0x195C05B84);
          }
LABEL_412:
          v18 = 0;
          goto LABEL_27;
        }
      }
      v17 = 0;
      if (v225)
        goto LABEL_26;
      goto LABEL_412;
    }
  }
  else
  {
    v9 = 0;
    v2 = (char *)v1 + 1184;
    v10 = (char *)v1 + 1196;
    if ((v6 & 0x400) != 0 && (*((_BYTE *)v1 + 1196) & 1) != 0)
      return *(_OWORD *)v2;
  }
  WTF::MonotonicTime::now(v4);
  v47 = v46;
  v48 = (*(double (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v1 + 142) + 72) + 848))(*(_QWORD *)(*((_QWORD *)v1 + 142) + 72));
  if (v48 == 0.0
    || (*v10 & 1) == 0
    || (*(_DWORD *)((_BYTE *)v1 + 1265) & 0x400) != 0
    || v47 <= *((double *)v1 + 151)
    || (v49 = v47 - *((double *)v1 + 150), v49 >= v48))
  {
    if (!v9)
      goto LABEL_394;
    v50 = v48 == 0.0 || (*v10 & 1) == 0;
    if (v50 || v47 <= *((double *)v1 + 151))
      goto LABEL_394;
    v51 = v47 - *((double *)v1 + 150);
    v52 = *((_QWORD *)v1 + 177);
    if (v52)
      this = (WebCore::HTMLMediaElement *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v52 + 256) + 40))(*(_QWORD *)(v52 + 256));
    else
      v53 = *((double *)v1 + 110);
    v218 = (const char *)WTF::MediaTime::createWithDouble(this, v51 * v53);
    v219 = v84;
    *(_QWORD *)&buf = WTF::MediaTime::operator+();
    *((_QWORD *)&buf + 1) = v85;
    v223 = (WTF::Logger *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v1 + 142) + 72) + 352))(*(_QWORD *)(*((_QWORD *)v1 + 142) + 72));
    v224 = v86;
    v216 = (WTF::StringImpl *)WTF::MediaTime::operator-();
    v217 = v87;
    this = (WebCore::HTMLMediaElement *)WTF::MediaTime::compare((WTF::MediaTime *)&v216, (const WTF::MediaTime *)qword_1EE337C20);
    if ((_DWORD)this != 1)
      goto LABEL_394;
    v88 = *((_QWORD *)v1 + 228);
    v89 = *((_QWORD *)v1 + 229);
    v218 = "HTMLMediaElement";
    v219 = 17;
    v220 = "currentMediaTime";
    v221 = v89;
    if (!*(_BYTE *)(v88 + 12) || !WebCore::LogMedia || byte_1ECE7C490 < 2u)
      goto LABEL_394;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v218);
    WTF::String::String((WTF::String *)&v227, "cached time was ");
    WTF::MediaTime::toJSONString((WTF::MediaTime *)&v216);
    WTF::String::String((WTF::String *)&v225, " seconds off of media time when it expired");
    if (v228)
      v90 = *((_DWORD *)v228 + 1);
    else
      v90 = 0;
    if (v227)
    {
      v91 = *((_DWORD *)v227 + 1);
      if (v226)
        goto LABEL_187;
    }
    else
    {
      v91 = 0;
      if (v226)
      {
LABEL_187:
        v92 = *((_DWORD *)v226 + 1);
        if (v225)
        {
LABEL_188:
          v93 = *((_DWORD *)v225 + 1);
LABEL_189:
          if ((v93 | v92) < 0
            || ((v19 = __OFADD__(v92, v93), v94 = v92 + v93, !v19) ? (v95 = 0) : (v95 = 1),
                v91 < 0
             || (v95 & 1) != 0
             || ((v19 = __OFADD__(v91, v94), v96 = v91 + v94, !v19) ? (v97 = 0) : (v97 = 1),
                 v90 < 0 || (v97 & 1) != 0 || (v98 = (v90 + v96), __OFADD__(v90, v96)))))
          {
            v229 = 0;
            goto LABEL_494;
          }
          if (v228 && (*((_BYTE *)v228 + 16) & 4) == 0 || v227 && (*((_BYTE *)v227 + 16) & 4) == 0)
          {
            v99 = 0;
            goto LABEL_206;
          }
          if (v226)
          {
            v182 = *((_DWORD *)v226 + 4);
            v99 = (v182 >> 2) & 1;
            if (v225 && (v182 & 4) != 0)
              goto LABEL_388;
          }
          else
          {
            if (v225)
            {
LABEL_388:
              v99 = (*((unsigned __int8 *)v225 + 16) >> 2) & 1;
              goto LABEL_206;
            }
            v99 = 1;
          }
LABEL_206:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v98, v99, (uint64_t)v228, v227, (uint64_t)v226, (uint64_t)v225, &v229);
          if (v229)
          {
            v101 = v225;
            v225 = 0;
            if (v101)
            {
              if (*(_DWORD *)v101 == 2)
                WTF::StringImpl::destroy(v101, v100);
              else
                *(_DWORD *)v101 -= 2;
            }
            v102 = v226;
            v226 = 0;
            if (v102)
            {
              if (*(_DWORD *)v102 == 2)
                WTF::StringImpl::destroy(v102, v100);
              else
                *(_DWORD *)v102 -= 2;
            }
            v103 = v227;
            v227 = 0;
            if (v103)
            {
              if (*(_DWORD *)v103 == 2)
                WTF::StringImpl::destroy(v103, v100);
              else
                *(_DWORD *)v103 -= 2;
            }
            v104 = v228;
            v228 = 0;
            if (v104)
            {
              if (*(_DWORD *)v104 == 2)
                WTF::StringImpl::destroy(v104, v100);
              else
                *(_DWORD *)v104 -= 2;
            }
            v105 = qword_1ECE7C4A0;
            v106 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v106)
            {
              WTF::String::utf8();
              v108 = v223 ? (char *)v223 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v108;
              _os_log_impl(&dword_1940B8000, v105, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v106 = (uint64_t)v223;
              v223 = 0;
              if (v106)
              {
                if (*(_DWORD *)v106 == 1)
                  v106 = WTF::fastFree((WTF *)v106, v107);
                else
                  --*(_DWORD *)v106;
              }
            }
            if (WebCore::LogMedia && byte_1ECE7C490 >= 2u)
            {
              v109 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v110 = *v109;
                if ((v110 & 1) != 0)
                  break;
                v111 = __ldaxr(v109);
                if (v111 == v110)
                {
                  if (!__stxr(v110 | 1, v109))
                  {
                    v163 = WTF::Logger::observers((WTF::Logger *)v106);
                    v164 = *(unsigned int *)(v163 + 12);
                    if ((_DWORD)v164)
                    {
                      v165 = *(uint64_t **)v163;
                      v215 = *(_QWORD *)v163 + 8 * v164;
                      do
                      {
                        v166 = *v165;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v218);
                        v231 = 0;
                        WTF::String::String((WTF::String *)&v232, "cached time was ");
                        v233 = 1;
                        WTF::MediaTime::toJSONString((WTF::MediaTime *)&v216);
                        v235 = 0;
                        WTF::String::String((WTF::String *)v236, " seconds off of media time when it expired");
                        v223 = 0;
                        v224 = 0;
                        v167 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                        LODWORD(v224) = 4;
                        v223 = v167;
                        v168 = HIDWORD(v224);
                        *((_DWORD *)v167 + 4 * HIDWORD(v224)) = buf;
                        v169 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v167 + 2 * v168 + 1) = v169;
                        *((_DWORD *)v167 + 4 * (v168 + 1)) = v231;
                        v170 = v232;
                        if (v232)
                          *(_DWORD *)v232 += 2;
                        *((_QWORD *)v167 + 2 * (v168 + 1) + 1) = v170;
                        *((_DWORD *)v167 + 4 * (v168 + 2)) = v233;
                        v171 = v234;
                        if (v234)
                          *(_DWORD *)v234 += 2;
                        *((_QWORD *)v167 + 2 * (v168 + 2) + 1) = v171;
                        *((_DWORD *)v167 + 4 * (v168 + 3)) = v235;
                        v172 = v236[0];
                        if (v236[0])
                          *(_DWORD *)v236[0] += 2;
                        *((_QWORD *)v167 + 2 * (v168 + 3) + 1) = v172;
                        HIDWORD(v224) = v168 + 4;
                        (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v166 + 16))(v166, &WebCore::LogMedia, 2, &v223);
                        v173 = v223;
                        if (HIDWORD(v224))
                        {
                          v174 = 16 * HIDWORD(v224);
                          v175 = (WTF::StringImpl **)((char *)v223 + 8);
                          do
                          {
                            v176 = *v175;
                            *v175 = 0;
                            if (v176)
                            {
                              if (*(_DWORD *)v176 == 2)
                                WTF::StringImpl::destroy(v176, (WTF::StringImpl *)v107);
                              else
                                *(_DWORD *)v176 -= 2;
                            }
                            v175 += 2;
                            v174 -= 16;
                          }
                          while (v174);
                          v173 = v223;
                        }
                        if (v173)
                        {
                          v223 = 0;
                          LODWORD(v224) = 0;
                          WTF::fastFree(v173, v107);
                        }
                        v177 = v236[0];
                        v236[0] = 0;
                        if (v177)
                        {
                          if (*(_DWORD *)v177 == 2)
                            WTF::StringImpl::destroy(v177, (WTF::StringImpl *)v107);
                          else
                            *(_DWORD *)v177 -= 2;
                        }
                        v178 = v234;
                        v234 = 0;
                        if (v178)
                        {
                          if (*(_DWORD *)v178 == 2)
                            WTF::StringImpl::destroy(v178, (WTF::StringImpl *)v107);
                          else
                            *(_DWORD *)v178 -= 2;
                        }
                        v179 = v232;
                        v232 = 0;
                        if (v179)
                        {
                          if (*(_DWORD *)v179 == 2)
                            WTF::StringImpl::destroy(v179, (WTF::StringImpl *)v107);
                          else
                            *(_DWORD *)v179 -= 2;
                        }
                        v180 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v180)
                        {
                          if (*(_DWORD *)v180 == 2)
                            WTF::StringImpl::destroy(v180, (WTF::StringImpl *)v107);
                          else
                            *(_DWORD *)v180 -= 2;
                        }
                        ++v165;
                      }
                      while (v165 != (uint64_t *)v215);
                    }
                    v181 = __ldxr(v109);
                    if (v181 == 1)
                    {
                      if (!__stlxr(0, v109))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            this = v229;
            v229 = 0;
            if (this)
            {
              if (*(_DWORD *)this == 2)
                this = (WebCore::HTMLMediaElement *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v107);
              else
                *(_DWORD *)this -= 2;
            }
LABEL_394:
            v183 = *((_QWORD *)v1 + 142);
            if (v183)
            {
              *((_QWORD *)v1 + 148) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v183 + 72) + 352))(*(_QWORD *)(v183 + 72));
              *((_DWORD *)v1 + 298) = v184;
              *((_BYTE *)v1 + 1196) = v185;
              v186 = (WTF::MediaTime *)WTF::MediaTime::operator!();
              if ((_DWORD)v186)
              {
                this = (WebCore::HTMLMediaElement *)WTF::MediaTime::invalidTime(v186);
                v187 = *(_QWORD *)((char *)this + 5);
                *(_QWORD *)v2 = *(_QWORD *)this;
                *(_QWORD *)(v2 + 5) = v187;
                v188 = *((_QWORD *)v1 + 142);
                if (v188
                  && (*(double (**)(_QWORD))(**(_QWORD **)(v188 + 72) + 848))(*(_QWORD *)(v188 + 72)) != 0.0)
                {
                  this = (WebCore::HTMLMediaElement *)WTF::MonotonicTime::now(this);
                  *((double *)v1 + 151) = v189 + 0.5;
                }
              }
              else
              {
                this = (WebCore::HTMLMediaElement *)WTF::MonotonicTime::now(v186);
                *((_QWORD *)v1 + 150) = v190;
              }
            }
            if ((*v10 & 1) != 0)
              return *(_OWORD *)v2;
            return *(_OWORD *)WTF::MediaTime::zeroTime(this);
          }
LABEL_494:
          __break(0xC471u);
          JUMPOUT(0x195C05B90);
        }
LABEL_467:
        v93 = 0;
        goto LABEL_189;
      }
    }
    v92 = 0;
    if (v225)
      goto LABEL_188;
    goto LABEL_467;
  }
  v112 = *((_QWORD *)v1 + 177);
  if (v112)
    this = (WebCore::HTMLMediaElement *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v112 + 256) + 40))(*(_QWORD *)(v112 + 256));
  else
    v113 = *((double *)v1 + 110);
  *(_QWORD *)&buf = WTF::MediaTime::createWithDouble(this, v49 * v113);
  *((_QWORD *)&buf + 1) = v134;
  *(_QWORD *)&v222 = WTF::MediaTime::operator+();
  *((_QWORD *)&v222 + 1) = v135;
  if (v9)
  {
    *(_QWORD *)&buf = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v1 + 142) + 72) + 352))(*(_QWORD *)(*((_QWORD *)v1 + 142) + 72));
    *((_QWORD *)&buf + 1) = v136;
    v216 = (WTF::StringImpl *)WTF::MediaTime::operator-();
    v217 = v137;
    if (WTF::MediaTime::compare((WTF::MediaTime *)&v216, (const WTF::MediaTime *)qword_1EE337C20) == 1)
    {
      v138 = *((_QWORD *)v1 + 228);
      v139 = *((_QWORD *)v1 + 229);
      v218 = "HTMLMediaElement";
      v219 = 17;
      v220 = "currentMediaTime";
      v221 = v139;
      if (*(_BYTE *)(v138 + 12))
      {
        if (WebCore::LogMedia && byte_1ECE7C490 >= 2u)
        {
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v218);
          WTF::String::String((WTF::String *)&v227, "cached time is ");
          WTF::MediaTime::toJSONString((WTF::MediaTime *)&v216);
          WTF::String::String((WTF::String *)&v225, " seconds off of media time when playing");
          if (v228)
            v140 = *((_DWORD *)v228 + 1);
          else
            v140 = 0;
          if (v227)
          {
            v141 = *((_DWORD *)v227 + 1);
            if (v226)
              goto LABEL_289;
          }
          else
          {
            v141 = 0;
            if (v226)
            {
LABEL_289:
              v142 = *((_DWORD *)v226 + 1);
              if (v225)
              {
LABEL_290:
                v143 = *((_DWORD *)v225 + 1);
LABEL_291:
                if ((v143 | v142) < 0
                  || ((v19 = __OFADD__(v142, v143), v144 = v142 + v143, !v19) ? (v145 = 0) : (v145 = 1),
                      v141 < 0
                   || (v145 & 1) != 0
                   || ((v19 = __OFADD__(v141, v144), v146 = v141 + v144, !v19) ? (v147 = 0) : (v147 = 1),
                       v140 < 0 || (v147 & 1) != 0 || (v148 = (v140 + v146), __OFADD__(v140, v146)))))
                {
                  v229 = 0;
                  goto LABEL_496;
                }
                if (v228 && (*((_BYTE *)v228 + 16) & 4) == 0 || v227 && (*((_BYTE *)v227 + 16) & 4) == 0)
                {
                  v149 = 0;
                  goto LABEL_308;
                }
                if (v226)
                {
                  v212 = *((_DWORD *)v226 + 4);
                  v149 = (v212 >> 2) & 1;
                  if (v225 && (v212 & 4) != 0)
                    goto LABEL_462;
                }
                else
                {
                  if (v225)
                  {
LABEL_462:
                    v149 = (*((unsigned __int8 *)v225 + 16) >> 2) & 1;
                    goto LABEL_308;
                  }
                  v149 = 1;
                }
LABEL_308:
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v148, v149, (uint64_t)v228, v227, (uint64_t)v226, (uint64_t)v225, &v229);
                if (v229)
                {
                  v151 = v225;
                  v225 = 0;
                  if (v151)
                  {
                    if (*(_DWORD *)v151 == 2)
                      WTF::StringImpl::destroy(v151, v150);
                    else
                      *(_DWORD *)v151 -= 2;
                  }
                  v152 = v226;
                  v226 = 0;
                  if (v152)
                  {
                    if (*(_DWORD *)v152 == 2)
                      WTF::StringImpl::destroy(v152, v150);
                    else
                      *(_DWORD *)v152 -= 2;
                  }
                  v153 = v227;
                  v227 = 0;
                  if (v153)
                  {
                    if (*(_DWORD *)v153 == 2)
                      WTF::StringImpl::destroy(v153, v150);
                    else
                      *(_DWORD *)v153 -= 2;
                  }
                  v154 = v228;
                  v228 = 0;
                  if (v154)
                  {
                    if (*(_DWORD *)v154 == 2)
                      WTF::StringImpl::destroy(v154, v150);
                    else
                      *(_DWORD *)v154 -= 2;
                  }
                  v155 = qword_1ECE7C4A0;
                  v156 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                  if ((_DWORD)v156)
                  {
                    WTF::String::utf8();
                    v158 = v223 ? (char *)v223 + 16 : 0;
                    LODWORD(buf) = 136446210;
                    *(_QWORD *)((char *)&buf + 4) = v158;
                    _os_log_impl(&dword_1940B8000, v155, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                    v156 = (uint64_t)v223;
                    v223 = 0;
                    if (v156)
                    {
                      if (*(_DWORD *)v156 == 1)
                        v156 = WTF::fastFree((WTF *)v156, v157);
                      else
                        --*(_DWORD *)v156;
                    }
                  }
                  if (WebCore::LogMedia && byte_1ECE7C490 >= 2u)
                  {
                    v159 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                    while (1)
                    {
                      v160 = *v159;
                      if ((v160 & 1) != 0)
                        break;
                      v161 = __ldaxr(v159);
                      if (v161 == v160)
                      {
                        if (!__stxr(v160 | 1, v159))
                        {
                          v192 = WTF::Logger::observers((WTF::Logger *)v156);
                          v193 = *(unsigned int *)(v192 + 12);
                          if ((_DWORD)v193)
                          {
                            v194 = *(uint64_t **)v192;
                            v195 = *(_QWORD *)v192 + 8 * v193;
                            do
                            {
                              v196 = *v194;
                              LODWORD(buf) = 0;
                              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v218);
                              v231 = 0;
                              WTF::String::String((WTF::String *)&v232, "cached time is ");
                              v233 = 1;
                              WTF::MediaTime::toJSONString((WTF::MediaTime *)&v216);
                              v235 = 0;
                              WTF::String::String((WTF::String *)v236, " seconds off of media time when playing");
                              v223 = 0;
                              v224 = 0;
                              v197 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                              LODWORD(v224) = 4;
                              v223 = v197;
                              v198 = HIDWORD(v224);
                              *((_DWORD *)v197 + 4 * HIDWORD(v224)) = buf;
                              v199 = *((_QWORD *)&buf + 1);
                              if (*((_QWORD *)&buf + 1))
                                **((_DWORD **)&buf + 1) += 2;
                              *((_QWORD *)v197 + 2 * v198 + 1) = v199;
                              *((_DWORD *)v197 + 4 * (v198 + 1)) = v231;
                              v200 = v232;
                              if (v232)
                                *(_DWORD *)v232 += 2;
                              *((_QWORD *)v197 + 2 * (v198 + 1) + 1) = v200;
                              *((_DWORD *)v197 + 4 * (v198 + 2)) = v233;
                              v201 = v234;
                              if (v234)
                                *(_DWORD *)v234 += 2;
                              *((_QWORD *)v197 + 2 * (v198 + 2) + 1) = v201;
                              *((_DWORD *)v197 + 4 * (v198 + 3)) = v235;
                              v202 = v236[0];
                              if (v236[0])
                                *(_DWORD *)v236[0] += 2;
                              *((_QWORD *)v197 + 2 * (v198 + 3) + 1) = v202;
                              HIDWORD(v224) = v198 + 4;
                              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v196 + 16))(v196, &WebCore::LogMedia, 2, &v223);
                              v203 = v223;
                              if (HIDWORD(v224))
                              {
                                v204 = 16 * HIDWORD(v224);
                                v205 = (WTF::StringImpl **)((char *)v223 + 8);
                                do
                                {
                                  v206 = *v205;
                                  *v205 = 0;
                                  if (v206)
                                  {
                                    if (*(_DWORD *)v206 == 2)
                                      WTF::StringImpl::destroy(v206, (WTF::StringImpl *)v157);
                                    else
                                      *(_DWORD *)v206 -= 2;
                                  }
                                  v205 += 2;
                                  v204 -= 16;
                                }
                                while (v204);
                                v203 = v223;
                              }
                              if (v203)
                              {
                                v223 = 0;
                                LODWORD(v224) = 0;
                                WTF::fastFree(v203, v157);
                              }
                              v207 = v236[0];
                              v236[0] = 0;
                              if (v207)
                              {
                                if (*(_DWORD *)v207 == 2)
                                  WTF::StringImpl::destroy(v207, (WTF::StringImpl *)v157);
                                else
                                  *(_DWORD *)v207 -= 2;
                              }
                              v208 = v234;
                              v234 = 0;
                              if (v208)
                              {
                                if (*(_DWORD *)v208 == 2)
                                  WTF::StringImpl::destroy(v208, (WTF::StringImpl *)v157);
                                else
                                  *(_DWORD *)v208 -= 2;
                              }
                              v209 = v232;
                              v232 = 0;
                              if (v209)
                              {
                                if (*(_DWORD *)v209 == 2)
                                  WTF::StringImpl::destroy(v209, (WTF::StringImpl *)v157);
                                else
                                  *(_DWORD *)v209 -= 2;
                              }
                              v210 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                              *((_QWORD *)&buf + 1) = 0;
                              if (v210)
                              {
                                if (*(_DWORD *)v210 == 2)
                                  WTF::StringImpl::destroy(v210, (WTF::StringImpl *)v157);
                                else
                                  *(_DWORD *)v210 -= 2;
                              }
                              ++v194;
                            }
                            while (v194 != (uint64_t *)v195);
                          }
                          v211 = __ldxr(v159);
                          if (v211 == 1)
                          {
                            if (!__stlxr(0, v159))
                              break;
                          }
                          else
                          {
                            __clrex();
                          }
                          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                          break;
                        }
                      }
                      else
                      {
                        __clrex();
                      }
                    }
                  }
                  v213 = v229;
                  v229 = 0;
                  if (v213)
                  {
                    if (*(_DWORD *)v213 == 2)
                      WTF::StringImpl::destroy(v213, (WTF::StringImpl *)v157);
                    else
                      *(_DWORD *)v213 -= 2;
                  }
                  return v222;
                }
LABEL_496:
                __break(0xC471u);
                JUMPOUT(0x195C05B78);
              }
LABEL_486:
              v143 = 0;
              goto LABEL_291;
            }
          }
          v142 = 0;
          if (v225)
            goto LABEL_290;
          goto LABEL_486;
        }
      }
    }
  }
  return v222;
}

