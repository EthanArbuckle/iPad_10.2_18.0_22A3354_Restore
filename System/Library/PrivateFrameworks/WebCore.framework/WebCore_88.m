BOOL WebCore::MediaPlayer::load(unsigned __int8 **this, const WTF::URL *a2, unsigned __int8 **a3, const WTF::String *a4, char a5)
{
  unsigned __int8 *v10;
  int v12;
  unsigned __int8 *v13;
  WTF::StringImpl *v14;
  unsigned __int8 *v15;
  WTF::StringImpl *v16;
  __int128 v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned __int8 *v20;
  uint64_t v22;
  uint64_t v23;
  int v24;
  WebCore::MediaStreamPrivate *v25;
  _BOOL8 v26;
  WTF *v28;
  void *v29;
  int v30;
  WTF::StringImpl *v31;

  v10 = *this;
  if (__ldaxr(*this))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v10);
LABEL_5:
  ++*((_QWORD *)v10 + 1);
  v12 = __ldxr(v10);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v10))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  v13 = *a3;
  if (*a3)
    *(_DWORD *)v13 += 2;
  v14 = (WTF::StringImpl *)this[18];
  this[18] = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  *((_BYTE *)this + 152) = *((_BYTE *)a3 + 8);
  v15 = *(unsigned __int8 **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v15 += 2;
  v16 = (WTF::StringImpl *)this[13];
  this[13] = v15;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(_OWORD *)((char *)a2 + 24);
  *((_OWORD *)this + 7) = *(_OWORD *)((char *)a2 + 8);
  *((_OWORD *)this + 8) = v17;
  WTF::String::convertToASCIILowercase(a4);
  v19 = (WTF::StringImpl *)this[20];
  this[20] = (unsigned __int8 *)v31;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  *((_BYTE *)this + 266) = a5;
  v20 = this[30];
  this[30] = 0;
  if (v20)
  {
    if (__ldaxr(v20))
    {
      __clrex();
    }
    else if (!__stxr(1u, v20))
    {
      goto LABEL_28;
    }
    MEMORY[0x19AEA534C](v20);
LABEL_28:
    v22 = *((_QWORD *)v20 + 2) - 1;
    *((_QWORD *)v20 + 2) = v22;
    if (!v22)
    {
      v23 = *((_QWORD *)v20 + 1);
      v24 = __ldxr(v20);
      if (v24 == 1)
      {
        if (!__stlxr(0, v20))
        {
          if (v23)
            goto LABEL_36;
LABEL_35:
          WTF::fastFree((WTF *)v20, v18);
          goto LABEL_36;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v20);
      if (v23)
        goto LABEL_36;
      goto LABEL_35;
    }
    v30 = __ldxr(v20);
    if (v30 == 1)
    {
      if (!__stlxr(0, v20))
        goto LABEL_36;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v20);
  }
LABEL_36:
  v25 = (WebCore::MediaStreamPrivate *)this[32];
  this[31] = 0;
  this[32] = 0;
  if (v25)
  {
    if (*((_DWORD *)v25 + 4) == 1)
    {
      WebCore::MediaStreamPrivate::~MediaStreamPrivate(v25, v18);
      WTF::fastFree(v28, v29);
    }
    else
    {
      --*((_DWORD *)v25 + 4);
    }
  }
  WebCore::MediaPlayer::loadWithNextMediaEngine((WebCore::MediaPlayer *)this, 0);
  v26 = this[10] != 0;
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*this);
  return v26;
}

uint64_t WebCore::MediaPlayer::loadWithNextMediaEngine(WebCore::MediaPlayer *this, const WebCore::MediaPlayerFactory *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  void *v17;
  _QWORD *BestMediaEngine;
  uint64_t *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  void *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  void *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  WebCore *v48;
  WTF::MonotonicTime *MediaEngine;
  double v50;
  int v51;
  void *v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  int v60;
  unsigned int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  uint64_t v71;
  uint64_t v72;
  int v73;
  _QWORD v74[3];
  WTF *v75;

  *((_BYTE *)this + 232) = 1;
  (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 216))(*(_QWORD *)(*((_QWORD *)this + 1)
                                                                                                  + 8));
  v5 = *((_QWORD *)this + 18);
  if (v5 && *(_DWORD *)(v5 + 4) || *((_QWORD *)this + 32))
    goto LABEL_35;
  v6 = *((_QWORD *)this + 30);
  if (!v6)
    goto LABEL_36;
  v7 = *((_QWORD *)this + 31);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_10:
  if (*(_QWORD *)(v6 + 24))
    ++*(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v9 = __ldxr((unsigned __int8 *)v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  if (!v7)
    goto LABEL_36;
  v10 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEA534C](v10);
LABEL_23:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v72 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v72 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 != 1)
  {
    __clrex();
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      goto LABEL_35;
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
    goto LABEL_30;
  if (v13)
    goto LABEL_35;
LABEL_31:
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (!v15)
    WTF::fastFree((WTF *)v10, v4);
LABEL_35:
  BestMediaEngine = WebCore::MediaPlayer::nextBestMediaEngine(this, a2);
  if (BestMediaEngine)
  {
LABEL_37:
    if (*((_QWORD **)this + 10) == BestMediaEngine)
      goto LABEL_76;
    *((_QWORD *)this + 10) = BestMediaEngine;
    v19 = (uint64_t *)((char *)this + 88);
    v20 = *((_DWORD *)this + 25);
    v21 = *((_DWORD *)this + 24) + 1;
    *((_DWORD *)this + 24) = v21;
    if (v21 <= v20)
    {
LABEL_43:
      v25 = BestMediaEngine[1];
      if (!v25)
      {
        v25 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v25 = 1;
        *(_QWORD *)(v25 + 8) = BestMediaEngine;
        v27 = (unsigned int *)BestMediaEngine[1];
        BestMediaEngine[1] = v25;
        if (v27)
        {
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            atomic_store(1u, v27);
            WTF::fastFree((WTF *)v27, v26);
          }
          v25 = BestMediaEngine[1];
        }
      }
      do
        v30 = __ldaxr((unsigned int *)v25);
      while (__stlxr(v30 + 1, (unsigned int *)v25));
      do
        v31 = __ldaxr((unsigned int *)v25);
      while (__stlxr(v31 + 1, (unsigned int *)v25));
      v75 = (WTF *)v25;
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)this + 11, &v75, (uint64_t)v74);
      v33 = (unsigned int *)v75;
      v75 = 0;
      if (!v33)
        goto LABEL_54;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        atomic_store(1u, v33);
        WTF::fastFree((WTF *)v33, v32);
        if (v25)
        {
          do
          {
LABEL_55:
            v36 = __ldaxr((unsigned int *)v25);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, (unsigned int *)v25));
          if (!v37)
          {
            atomic_store(1u, (unsigned int *)v25);
            WTF::fastFree((WTF *)v25, v32);
          }
        }
      }
      else
      {
LABEL_54:
        if (v25)
          goto LABEL_55;
      }
      (*(void (**)(_QWORD *__return_ptr, _QWORD *, WebCore::MediaPlayer *))(*BestMediaEngine + 24))(v74, BestMediaEngine, this);
      v38 = v74[0];
      v74[0] = 0;
      v39 = *((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = v38;
      if (v39)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
        v40 = v74[0];
        v74[0] = 0;
        if (v40)
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
        v38 = *((_QWORD *)this + 9);
      }
      if (v38)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 112))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
        if (*((_BYTE *)this + 224))
          (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 9) + 312))(*((_QWORD *)this + 9), 1);
        if (*((_BYTE *)this + 226))
          (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 9) + 328))(*((_QWORD *)this + 9), 1);
        if (*((_BYTE *)this + 265))
          (*(void (**)(_QWORD))(**((_QWORD **)this + 9) + 1200))(*((_QWORD *)this + 9));
        if (*((_DWORD *)this + 70))
          (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 9) + 1224))(*((_QWORD *)this + 9), (char *)this + 280);
        if (*((_BYTE *)this + 264))
          (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 9) + 976))(*((_QWORD *)this + 9), 1);
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 9) + 72))(*((_QWORD *)this + 9), *((unsigned __int8 *)this + 229), *((unsigned __int8 *)this + 208), *((unsigned __int8 *)this + 228), *((unsigned __int8 *)this + 230), *((unsigned __int8 *)this + 231));
      }
      goto LABEL_76;
    }
    v22 = *v19;
    if (!*v19)
      goto LABEL_40;
    v62 = *(_DWORD *)(v22 - 4);
    if (!v62)
      goto LABEL_139;
    v63 = 0;
    do
    {
      while (1)
      {
        v64 = *(_QWORD *)(v22 + 8 * --v62);
        if ((unint64_t)(v64 + 1) >= 2 && !*(_QWORD *)(v64 + 8))
          break;
        if (!v62)
          goto LABEL_129;
      }
      *(_QWORD *)(v22 + 8 * v62) = 0;
      do
      {
        v65 = __ldaxr((unsigned int *)v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, (unsigned int *)v64));
      if (!v66)
      {
        atomic_store(1u, (unsigned int *)v64);
        v73 = v63;
        WTF::fastFree((WTF *)v64, v17);
        v63 = v73;
      }
      *(_QWORD *)(v22 + 8 * v62) = -1;
      ++v63;
    }
    while (v62);
LABEL_129:
    v22 = *v19;
    if (v63)
    {
      *(_DWORD *)(v22 - 16) += v63;
      v67 = *v19;
      if (*v19)
        v68 = *(_DWORD *)(v67 - 12);
      else
        v68 = 0;
      *(_DWORD *)(v67 - 12) = v68 - v63;
      v22 = *v19;
    }
    if (!v22)
    {
LABEL_40:
      v23 = 0;
      *((_DWORD *)this + 24) = 0;
LABEL_41:
      v24 = v23;
LABEL_42:
      *((_DWORD *)this + 25) = 2 * v24;
      goto LABEL_43;
    }
    v69 = *(_DWORD *)(v22 - 4);
    if (v69 < 9 || 6 * *(_DWORD *)(v22 - 12) >= v69)
    {
LABEL_139:
      *((_DWORD *)this + 24) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)this + 11);
      v22 = *((_QWORD *)this + 11);
      *((_DWORD *)this + 24) = 0;
      if (!v22)
      {
        v23 = 0;
        goto LABEL_41;
      }
    }
    v23 = *(_DWORD *)(v22 - 12);
    v24 = 0x7FFFFFFF;
    if (v23 >= 0x7FFFFFFF)
      goto LABEL_42;
    goto LABEL_41;
  }
LABEL_36:
  BestMediaEngine = WebCore::MediaPlayer::nextMediaEngine(this, a2);
  if (BestMediaEngine)
    goto LABEL_37;
  v41 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
LABEL_76:
  v42 = *((_QWORD *)this + 9);
  if (v42)
  {
    v43 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 504))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 1264))(v42, v43);
    v44 = *((_QWORD *)this + 30);
    if (!v44)
      goto LABEL_100;
    v45 = *((_QWORD *)this + 31);
    if (__ldaxr((unsigned __int8 *)v44))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v44))
    {
      goto LABEL_90;
    }
    MEMORY[0x19AEA534C](v44);
LABEL_90:
    if (*(_QWORD *)(v44 + 24))
      ++*(_QWORD *)(v44 + 8);
    else
      v45 = 0;
    v51 = __ldxr((unsigned __int8 *)v44);
    if (v51 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v44))
      {
        if (v45)
          goto LABEL_96;
        goto LABEL_100;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
    if (v45)
    {
LABEL_96:
      (*(void (**)(_QWORD, char *, char *, uint64_t))(**((_QWORD **)this + 9) + 48))(*((_QWORD *)this + 9), (char *)this + 104, (char *)this + 144, v45);
      v53 = *(_QWORD *)(v45 + 8);
      if (__ldaxr((unsigned __int8 *)v53))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v53))
      {
        goto LABEL_105;
      }
      MEMORY[0x19AEA534C](v53);
LABEL_105:
      v56 = *(_QWORD *)(v53 + 8);
      v57 = v56 - 1;
      *(_QWORD *)(v53 + 8) = v56 - 1;
      if (v56 == 1)
      {
        v71 = *(_QWORD *)(v53 + 16);
        v58 = *(_QWORD *)(v53 + 24);
        *(_QWORD *)(v53 + 24) = 0;
        v59 = v71 != 0;
      }
      else
      {
        v58 = 0;
        v59 = 1;
      }
      v60 = __ldxr((unsigned __int8 *)v53);
      if (v60 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v53))
        {
          if (v57)
            goto LABEL_117;
          goto LABEL_113;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v53);
      if (v57)
        goto LABEL_117;
LABEL_113:
      if (v58)
        (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
      if (!v59)
        WTF::fastFree((WTF *)v53, v52);
      goto LABEL_117;
    }
LABEL_100:
    v55 = *((_QWORD *)this + 9);
    if (*((_QWORD *)this + 32))
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 56))(v55);
    else
      (*(void (**)(uint64_t, char *, char *, char *))(*(_QWORD *)v55 + 40))(v55, (char *)this + 104, (char *)this + 144, (char *)this + 160);
    goto LABEL_117;
  }
  v47 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)(v47 + 8) = 0;
  *(_QWORD *)(v47 + 16) = 0;
  *(_QWORD *)v47 = off_1E340D798;
  *(_BYTE *)(v47 + 24) = 0;
  *(_OWORD *)(v47 + 32) = *(_OWORD *)WTF::MediaTime::invalidTime((WTF::MediaTime *)v47);
  *(_DWORD *)(v47 + 48) = 1;
  *(_QWORD *)v47 = off_1E340DD08;
  v48 = (WebCore *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v47;
  if (v48)
    v48 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v48 + 24))(v48);
  if (!*((_BYTE *)this + 169)
    && (WebCore::installedMediaEngines(v48), dword_1ECE90EB4 >= 2)
    && ((MediaEngine = (WTF::MonotonicTime *)WebCore::MediaPlayer::nextBestMediaEngine(this, *((const WebCore::MediaPlayerFactory **)this + 10))) != 0|| (MediaEngine = WebCore::MediaPlayer::nextMediaEngine(this, *((const WebCore::MediaPlayerFactory **)this + 10))) != 0))
  {
    *((_QWORD *)this + 5) = 0;
    WTF::MonotonicTime::now(MediaEngine);
    WebCore::TimerBase::setNextFireTime((uint64_t)this + 16, v50 + 0.0);
  }
  else
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 112))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
    (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 88))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
  }
LABEL_117:
  *((_BYTE *)this + 232) = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 224))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

BOOL WebCore::MediaPlayer::load(WebCore::MediaPlayer *this, const WTF::URL *a2, const WebCore::ContentType *a3, WebCore::MediaSourcePrivateClient *a4)
{
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  __int128 v12;
  _DWORD *v13;
  WTF::StringImpl *v14;

  WTF::ThreadSafeWeakPtr<WebCore::WebTransportSessionClient>::operator=<WebCore::WebTransportSessionClient,(void *)0>((uint64_t *)this + 30, a4);
  v8 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v8 += 2;
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *((_BYTE *)this + 152) = *((_BYTE *)a3 + 8);
  v10 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v10 += 2;
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(_OWORD *)((char *)a2 + 24);
  *((_OWORD *)this + 7) = *(_OWORD *)((char *)a2 + 8);
  *((_OWORD *)this + 8) = v12;
  v13 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v13 += 2;
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v7);
    else
      *(_DWORD *)v14 -= 2;
  }
  *((_BYTE *)this + 266) = 0;
  WebCore::MediaPlayer::loadWithNextMediaEngine(this, 0);
  return *((_QWORD *)this + 10) != 0;
}

BOOL WebCore::MediaPlayer::load(WebCore::MediaPlayer *this, WebCore::MediaStreamPrivate *a2)
{
  WebCore::MediaStreamPrivate *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF *v8;
  void *v9;

  ++*((_DWORD *)a2 + 4);
  v3 = (WebCore::MediaStreamPrivate *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = a2;
  if (v3)
  {
    if (*((_DWORD *)v3 + 4) == 1)
    {
      WebCore::MediaStreamPrivate::~MediaStreamPrivate(v3, a2);
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*((_DWORD *)v3 + 4);
    }
  }
  v4 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v4 += 2;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *((_BYTE *)this + 266) = 0;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  *((_BYTE *)this + 152) = 0;
  WebCore::MediaPlayer::loadWithNextMediaEngine(this, 0);
  return *((_QWORD *)this + 10) != 0;
}

_QWORD *WebCore::MediaPlayer::nextBestMediaEngine(WebCore::MediaPlayer *this, const WebCore::MediaPlayerFactory *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  void *v44;
  double v45;
  double v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  int v53;
  _QWORD *v54;
  int v56;
  unint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  char v60;
  WTF::StringImpl *v61;
  __int128 v62;
  __int128 v63;
  __int16 v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68[4];
  char v69;
  unsigned int v70[4];
  char v71;
  WTF *v72;
  int v73;
  int v74;
  char v75;
  WTF *v76;
  int v77;
  int v78;
  char v79;
  WTF *v80;
  int v81;
  int v82;
  char v83;

  v59 = 0;
  v60 = 0;
  v61 = 0;
  WTF::URL::invalidate((WTF::URL *)&v61);
  v64 = 0;
  v65 = 0;
  v69 = 0;
  LOBYTE(v70[0]) = 0;
  v71 = 0;
  LOBYTE(v72) = 0;
  v75 = 0;
  LOBYTE(v76) = 0;
  v79 = 0;
  LOBYTE(v80) = 0;
  v83 = 0;
  v66 = 0;
  v67 = 0;
  LOBYTE(v68[0]) = 0;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  if (v5)
    *(_DWORD *)v5 += 2;
  v6 = v59;
  v59 = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v60 = *((_BYTE *)this + 152);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  if (v7)
    *(_DWORD *)v7 += 2;
  v8 = v61;
  v61 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *((_OWORD *)this + 8);
  v62 = *((_OWORD *)this + 7);
  v63 = v9;
  v10 = *((_QWORD *)this + 30);
  if (!v10)
  {
    LOBYTE(v64) = 0;
    goto LABEL_42;
  }
  v11 = *((_QWORD *)this + 31);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v10);
LABEL_17:
  if (*(_QWORD *)(v10 + 24))
    ++*(_QWORD *)(v10 + 8);
  else
    v11 = 0;
  v13 = __ldxr((unsigned __int8 *)v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
LABEL_24:
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  LOBYTE(v64) = v11 != 0;
  if (!v11)
    goto LABEL_42;
  v14 = *(_QWORD *)(v11 + 8);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_30;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_30:
  v16 = *(_QWORD *)(v14 + 8);
  v17 = v16 - 1;
  *(_QWORD *)(v14 + 8) = v16 - 1;
  if (v16 == 1)
  {
    v58 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v14 + 24) = 0;
    v19 = v58 != 0;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  v20 = __ldxr((unsigned __int8 *)v14);
  if (v20 != 1)
  {
    __clrex();
LABEL_37:
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
    if (v17)
      goto LABEL_42;
    goto LABEL_38;
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    goto LABEL_37;
  if (v17)
    goto LABEL_42;
LABEL_38:
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (!v19)
    WTF::fastFree((WTF *)v14, v4);
LABEL_42:
  HIBYTE(v64) = *((_QWORD *)this + 32) != 0;
  v21 = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 512))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>(v68, v21);
  v22 = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 520))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>(v70, v22);
  v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 528))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
  v25 = v23;
  if (v75 == *(_BYTE *)(v23 + 16))
  {
    if (v75)
      WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)&v72, (WTF *)v23);
  }
  else if (v75)
  {
    v26 = v72;
    if (v72)
    {
      v72 = 0;
      v73 = 0;
      WTF::fastFree(v26, v24);
    }
    v75 = 0;
  }
  else
  {
    v27 = *(unsigned int *)(v23 + 12);
    v72 = 0;
    v73 = 0;
    v74 = v27;
    if ((_DWORD)v27)
    {
      if (v27 >> 30)
        goto LABEL_101;
      v28 = (WTF *)WTF::fastMalloc((WTF *)(4 * v27));
      v73 = v27;
      v72 = v28;
      v29 = *(unsigned int *)(v25 + 12);
      if ((_DWORD)v29)
      {
        v30 = *(int **)v25;
        v31 = 4 * v29;
        do
        {
          v32 = *v30++;
          *(_DWORD *)v28 = v32;
          v28 = (WTF *)((char *)v28 + 4);
          v31 -= 4;
        }
        while (v31);
      }
    }
    v75 = 1;
  }
  v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 536))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
  v35 = v33;
  if (v79 == *(_BYTE *)(v33 + 16))
  {
    if (v79)
      WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)&v76, (WTF *)v33);
  }
  else if (v79)
  {
    v36 = v76;
    if (v76)
    {
      v76 = 0;
      v77 = 0;
      WTF::fastFree(v36, v34);
    }
    v79 = 0;
  }
  else
  {
    v37 = *(unsigned int *)(v33 + 12);
    v76 = 0;
    v77 = 0;
    v78 = v37;
    if ((_DWORD)v37)
    {
      if (v37 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1961982D0);
      }
      v38 = (WTF *)WTF::fastMalloc((WTF *)(4 * v37));
      v77 = v37;
      v76 = v38;
      v39 = *(unsigned int *)(v35 + 12);
      if ((_DWORD)v39)
      {
        v40 = *(int **)v35;
        v41 = 4 * v39;
        do
        {
          v42 = *v40++;
          *(_DWORD *)v38 = v42;
          v38 = (WTF *)((char *)v38 + 4);
          v41 -= 4;
        }
        while (v41);
      }
    }
    v79 = 1;
  }
  v43 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 544))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
  v48 = v43;
  if (v83 == *(_BYTE *)(v43 + 16))
  {
    if (v83)
      v43 = (uint64_t)WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)&v80, (WTF *)v43);
  }
  else if (v83)
  {
    v43 = (uint64_t)v80;
    if (v80)
    {
      v80 = 0;
      v81 = 0;
      v43 = WTF::fastFree((WTF *)v43, v44);
    }
    v83 = 0;
  }
  else
  {
    v49 = *(unsigned int *)(v43 + 12);
    v80 = 0;
    v81 = 0;
    v82 = v49;
    if ((_DWORD)v49)
    {
      if (v49 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1961982D8);
      }
      v43 = WTF::fastMalloc((WTF *)(4 * v49));
      v81 = v49;
      v80 = (WTF *)v43;
      v50 = *(unsigned int *)(v48 + 12);
      if ((_DWORD)v50)
      {
        v51 = *(int **)v48;
        v52 = 4 * v50;
        do
        {
          v53 = *v51++;
          *(_DWORD *)v43 = v53;
          v43 += 4;
          v52 -= 4;
        }
        while (v52);
      }
    }
    v83 = 1;
  }
  if (!*((_BYTE *)this + 169))
  {
    v54 = WebCore::bestMediaEngineForSupportParameters((WebCore::ContentType *)&v59, (uint64_t *)this + 11, a2, v45, v46, v47);
    goto LABEL_85;
  }
  if (a2)
    goto LABEL_83;
  v56 = *((unsigned __int8 *)this + 168);
  WebCore::installedMediaEngines((WebCore *)v43);
  if (!dword_1ECE90EB4)
    goto LABEL_83;
  v57 = 0;
  while ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines
                                                               + 8 * v57)
                                                 + 16))(*(_QWORD *)(WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines
                                                                    + 8 * v57)) != v56)
  {
    if (++v57 >= dword_1ECE90EB4)
      goto LABEL_83;
  }
  if (v57 >= dword_1ECE90EB4)
  {
LABEL_101:
    __break(0xC471u);
    JUMPOUT(0x1961982C8);
  }
  v54 = *(_QWORD **)(WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines + 8 * v57);
  if (!v54
    || !(*(unsigned int (**)(_QWORD, WTF::StringImpl **))(*v54 + 40))(*(_QWORD *)(WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines + 8 * v57), &v59))
  {
LABEL_83:
    v54 = 0;
  }
LABEL_85:
  WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)&v59, v44);
  return v54;
}

uint64_t WebCore::MediaPlayer::allowedMediaContainerTypes(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 512))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::allowedMediaCodecTypes(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 520))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::allowedMediaVideoCodecIDs(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 528))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::allowedMediaAudioCodecIDs(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 536))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::allowedMediaCaptionFormatTypes(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 544))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

_QWORD *WebCore::bestMediaEngineForSupportParameters(WebCore::ContentType *this, uint64_t *a2, _QWORD *a3, double a4, double a5, float a6)
{
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  float v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  _QWORD *v18;
  unsigned __int8 v19;
  _QWORD **v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int i;
  uint64_t v31;
  unsigned int v32;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  unsigned int v39;
  WTF::StringImpl *v40;

  if ((!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this + 4)) && !*((_BYTE *)this + 56) && *((_BYTE *)this + 57) == 0)
    return 0;
  WebCore::ContentType::containerType(this, a4, a5, a6);
  WebCore::applicationOctetStream((WebCore *)&v40);
  v10 = v40;
  v13 = WTF::equal(v37, v40, v11);
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v12);
    else
      *(_DWORD *)v10 -= 2;
  }
  v15 = v37;
  v37 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      v15 = (WTF::StringImpl *)WTF::StringImpl::destroy(v15, v12);
      if (!v13)
        goto LABEL_17;
      goto LABEL_14;
    }
    *(_DWORD *)v15 -= 2;
  }
  if (!v13)
    goto LABEL_17;
LABEL_14:
  WebCore::ContentType::codecs(this, (uint64_t)&v37, v14);
  v17 = v39;
  if (v39)
  {
    v34 = v37;
    v35 = 8 * v39;
    do
    {
      v36 = *(WTF::StringImpl **)v34;
      *(_QWORD *)v34 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v16);
        else
          *(_DWORD *)v36 -= 2;
      }
      v34 = (WTF::StringImpl *)((char *)v34 + 8);
      v35 -= 8;
    }
    while (v35);
  }
  v15 = v37;
  if (v37)
  {
    v37 = 0;
    v38 = 0;
    v15 = (WTF::StringImpl *)WTF::fastFree(v15, v16);
    if (v17)
      return 0;
  }
  else if (v17)
  {
    return 0;
  }
LABEL_17:
  WebCore::installedMediaEngines(v15);
  if (dword_1ECE90EB4)
  {
    v18 = 0;
    v19 = 0;
    v20 = (_QWORD **)WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines;
    v21 = WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines + 8 * dword_1ECE90EB4;
    while (1)
    {
      v22 = *v20;
      if (a3)
      {
        if (a3 == v22)
          a3 = 0;
        goto LABEL_34;
      }
      ++*((_DWORD *)a2 + 2);
      v23 = v22[1];
      if (v23)
      {
        if (*(_QWORD *)(v23 + 8))
        {
          v24 = *a2;
          if (*a2)
            break;
        }
      }
LABEL_31:
      v32 = (*(uint64_t (**)(_QWORD *, WebCore::ContentType *))(*v22 + 40))(v22, this);
      if (v32 <= v19)
        goto LABEL_33;
      a3 = 0;
      v18 = *v20;
      v19 = v32;
LABEL_34:
      if (++v20 == (_QWORD **)v21)
        return v18;
    }
    v25 = *(_DWORD *)(v24 - 8);
    v26 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
    v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
    v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
    v29 = v25 & ((v28 >> 31) ^ v28);
    for (i = 1; ; ++i)
    {
      v31 = *(_QWORD *)(v24 + 8 * v29);
      if (v31 != -1)
      {
        if (!v31)
          goto LABEL_31;
        if (v31 == v23)
          break;
      }
      v29 = (v29 + i) & v25;
    }
LABEL_33:
    a3 = 0;
    goto LABEL_34;
  }
  return 0;
}

uint64_t WebCore::MediaPlayer::reloadAndResumePlaybackIfNeeded(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 392))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::queueTaskOnEventLoop(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 592))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
}

uint64_t WebCore::MediaPlayer::hasAvailableVideoFrame(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 712))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::prepareForRendering(WebCore::MediaPlayer *this)
{
  *((_BYTE *)this + 231) = 1;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 832))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::cancelLoad(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 64))(*((_QWORD *)this + 9));
}

unsigned __int8 *WebCore::MediaPlayer::prepareToPlay(unsigned __int8 **this)
{
  unsigned __int8 *v2;
  int v4;

  v2 = *this;
  if (__ldaxr(*this))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_5:
  ++*((_QWORD *)v2 + 1);
  v4 = __ldxr(v2);
  if (v4 == 1)
  {
    if (!__stlxr(0, v2))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_10:
  *((_BYTE *)this + 230) = 1;
  (*(void (**)(unsigned __int8 *))(*(_QWORD *)this[9] + 80))(this[9]);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*this);
}

uint64_t WebCore::MediaPlayer::play(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 216))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::pause(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 224))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::setBufferingPolicy(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 232))(*(_QWORD *)(a1 + 72));
}

uint64_t WebCore::MediaPlayer::createSession(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 912))(*(_QWORD *)(a1 + 72));
}

uint64_t WebCore::MediaPlayer::setCDM(WebCore::MediaPlayer *this, WebCore::LegacyCDM *a2)
{
  return (*(uint64_t (**)(_QWORD, WebCore::LegacyCDM *))(**((_QWORD **)this + 9) + 920))(*((_QWORD *)this + 9), a2);
}

uint64_t WebCore::MediaPlayer::setCDMSession(WebCore::MediaPlayer *this, WebCore::LegacyCDMSession *a2)
{
  return (*(uint64_t (**)(_QWORD, WebCore::LegacyCDMSession *))(**((_QWORD **)this + 9) + 928))(*((_QWORD *)this + 9), a2);
}

uint64_t WebCore::MediaPlayer::keyAdded(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 936))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::cdmInstanceAttached(WebCore::MediaPlayer *this, WebCore::CDMInstance *a2)
{
  return (*(uint64_t (**)(_QWORD, WebCore::CDMInstance *))(**((_QWORD **)this + 9) + 944))(*((_QWORD *)this + 9), a2);
}

uint64_t WebCore::MediaPlayer::cdmInstanceDetached(WebCore::MediaPlayer *this, WebCore::CDMInstance *a2)
{
  return (*(uint64_t (**)(_QWORD, WebCore::CDMInstance *))(**((_QWORD **)this + 9) + 952))(*((_QWORD *)this + 9), a2);
}

uint64_t WebCore::MediaPlayer::attemptToDecryptWithInstance(WebCore::MediaPlayer *this, WebCore::CDMInstance *a2)
{
  return (*(uint64_t (**)(_QWORD, WebCore::CDMInstance *))(**((_QWORD **)this + 9) + 960))(*((_QWORD *)this + 9), a2);
}

uint64_t WebCore::MediaPlayer::setShouldContinueAfterKeyNeeded(WebCore::MediaPlayer *this, char a2)
{
  *((_BYTE *)this + 264) = a2;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 976))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::duration(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 336))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::startTime(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 416))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::initialTime(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 424))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::currentTime(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 352))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::timeIsProgressing(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 360))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::setCurrentTimeDidChangeCallback(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 368))(*(_QWORD *)(a1 + 72));
}

uint64_t WebCore::MediaPlayer::getStartDate(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 376))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::willSeekToTarget(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 384))(*(_QWORD *)(a1 + 72));
}

uint64_t WebCore::MediaPlayer::seekToTarget(WTF::MediaTime *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((_QWORD *)a1 + 9);
  v5 = WTF::MediaTime::invalidTime(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 384))(v4, v5);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a1 + 9) + 400))(*((_QWORD *)a1 + 9), a2);
}

uint64_t WebCore::MediaPlayer::seekToTime(WebCore::MediaPlayer *this, const WTF::MediaTime *a2)
{
  WTF::MediaTime *v3;
  WTF::MediaTime *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[3];

  v8[0] = *(_OWORD *)a2;
  v3 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(this);
  v8[1] = *(_OWORD *)v3;
  v4 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v3);
  v8[2] = *(_OWORD *)v4;
  v5 = *((_QWORD *)this + 9);
  v6 = WTF::MediaTime::invalidTime(v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 384))(v5, v6);
  return (*(uint64_t (**)(_QWORD, _OWORD *))(**((_QWORD **)this + 9) + 400))(*((_QWORD *)this + 9), v8);
}

__n128 WebCore::MediaPlayer::seekWhenPossible(WebCore::MediaPlayer *this, const WTF::MediaTime *a2)
{
  WTF::MediaTime *v4;
  __n128 result;
  WTF::MediaTime *v6;
  WTF::MediaTime *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _OWORD v12[3];

  v4 = (WTF::MediaTime *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 560))(*((_QWORD *)this + 9));
  if ((_DWORD)v4)
  {
    v12[0] = *(_OWORD *)a2;
    v6 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v4);
    v12[1] = *(_OWORD *)v6;
    v7 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v6);
    v12[2] = *(_OWORD *)v7;
    v8 = *((_QWORD *)this + 9);
    v9 = WTF::MediaTime::invalidTime(v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 384))(v8, v9);
    (*(void (**)(_QWORD, _OWORD *))(**((_QWORD **)this + 9) + 400))(*((_QWORD *)this + 9), v12);
  }
  else
  {
    v10 = (_QWORD *)((char *)this + 176);
    if (*((_BYTE *)this + 192))
    {
      v11 = *(_QWORD *)a2;
      *(_QWORD *)((char *)this + 181) = *(_QWORD *)((char *)a2 + 5);
      *v10 = v11;
    }
    else
    {
      result = *(__n128 *)a2;
      *(_OWORD *)v10 = *(_OWORD *)a2;
      *((_BYTE *)this + 192) = 1;
    }
  }
  return result;
}

uint64_t WebCore::MediaPlayer::seeked(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
}

uint64_t WebCore::MediaPlayer::paused(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 480))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::seeking(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 408))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::supportsFullscreen(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 248))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::canSaveMediaData(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 280))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::supportsScanning(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 256))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::supportsProgressMonitoring(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 264))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::requiresImmediateCompositing(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 272))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::naturalSize(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 288))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::hasVideo(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 296))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::hasAudio(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 304))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::platformLayer(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 88))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::createVideoFullscreenLayer(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 96))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::setVideoFullscreenLayer(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 104))(*(_QWORD *)(a1 + 72));
}

uint64_t WebCore::MediaPlayer::updateVideoFullscreenInlineImage(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 112))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::setVideoFullscreenFrame(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 120))(*(_QWORD *)(a1 + 72));
}

uint64_t WebCore::MediaPlayer::setVideoFullscreenGravity(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 128))(*(_QWORD *)(a1 + 72));
}

uint64_t WebCore::MediaPlayer::setVideoFullscreenMode(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 136))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::fullscreenMode(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 464))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::videoFullscreenStandbyChanged(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 144))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::isVideoFullscreenStandby(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 472))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::videoLayerSize(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 624))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::canShowWhileLocked(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 680))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::videoLayerSizeDidChange(WebCore::MediaPlayer *this, const WebCore::FloatSize *a2)
{
  return (*(uint64_t (**)(_QWORD, const WebCore::FloatSize *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8)
                                                                       + 632))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2);
}

uint64_t WebCore::MediaPlayer::setVideoLayerSizeFenced(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 176))(*(_QWORD *)(a1 + 72));
}

uint64_t WebCore::MediaPlayer::timedMetadata(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 184))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::accessLog(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 192))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::errorLog(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 200))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::networkState(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 552))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::readyState(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 560))(*((_QWORD *)this + 9));
}

double WebCore::MediaPlayer::volume(WebCore::MediaPlayer *this)
{
  return *((double *)this + 27);
}

uint64_t WebCore::MediaPlayer::setVolume(WebCore::MediaPlayer *this, double a2)
{
  *((double *)this + 27) = a2;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 496))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::muted(WebCore::MediaPlayer *this)
{
  return *((unsigned __int8 *)this + 227);
}

uint64_t WebCore::MediaPlayer::setMuted(WebCore::MediaPlayer *this, char a2)
{
  *((_BYTE *)this + 227) = a2;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 512))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::hasClosedCaptions(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 520))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::setClosedCaptionsVisible(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 528))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::rate(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 448))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::setRate(WebCore::MediaPlayer *this, double a2)
{
  return (*(uint64_t (**)(_QWORD, double))(**((_QWORD **)this + 9) + 440))(*((_QWORD *)this + 9), a2);
}

uint64_t WebCore::MediaPlayer::effectiveRate(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 456))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::requestedRate(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 456))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::preservesPitch(WebCore::MediaPlayer *this)
{
  return *((unsigned __int8 *)this + 228);
}

uint64_t WebCore::MediaPlayer::setPreservesPitch(WebCore::MediaPlayer *this, char a2)
{
  *((_BYTE *)this + 228) = a2;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 464))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::setPitchCorrectionAlgorithm(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 234) != a2)
  {
    *(_BYTE *)(result + 234) = a2;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 72) + 472))(*(_QWORD *)(result + 72));
  }
  return result;
}

uint64_t WebCore::MediaPlayer::buffered(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 592))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::seekable(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 568))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::maxTimeSeekable(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 576))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::minTimeSeekable(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 584))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::seekableTimeRangesLastModifiedTime(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 600))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::bufferedTimeRangesChanged(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 552))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::seekableTimeRangesChanged(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 560))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::liveUpdateInterval(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 608))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::didLoadingProgress(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 632))(*(_QWORD *)(a1 + 72));
}

uint64_t WebCore::MediaPlayer::setPresentationSize(uint64_t this, const WebCore::IntSize *a2)
{
  if (*(_DWORD *)(this + 200) != *(_DWORD *)a2 || *(_DWORD *)(this + 204) != *((_DWORD *)a2 + 1))
  {
    *(_QWORD *)(this + 200) = *(_QWORD *)a2;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 72) + 640))(*(_QWORD *)(this + 72));
  }
  return this;
}

uint64_t WebCore::MediaPlayer::setPageIsVisible(WebCore::MediaPlayer *this, char a2)
{
  *((_BYTE *)this + 224) = a2;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 312))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::setVisibleForCanvas(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 225) != a2)
  {
    *(_BYTE *)(this + 225) = a2;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 72) + 320))(*(_QWORD *)(this + 72));
  }
  return this;
}

uint64_t WebCore::MediaPlayer::setVisibleInViewport(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 226) != a2)
  {
    *(_BYTE *)(this + 226) = a2;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 72) + 328))(*(_QWORD *)(this + 72));
  }
  return this;
}

uint64_t WebCore::MediaPlayer::setResourceOwner(uint64_t a1, const WTF::MachSendRight *a2)
{
  _BYTE v5[4];

  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v5, a2);
  WTF::MachSendRight::operator=();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
  return (*(uint64_t (**)(_QWORD, const WTF::MachSendRight *))(**(_QWORD **)(a1 + 72) + 1224))(*(_QWORD *)(a1 + 72), a2);
}

uint64_t WebCore::MediaPlayer::preload(WebCore::MediaPlayer *this)
{
  return *((unsigned __int8 *)this + 208);
}

uint64_t WebCore::MediaPlayer::setPreload(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 208) = a2;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 704))(*(_QWORD *)(a1 + 72));
}

uint64_t WebCore::MediaPlayer::paint(WebCore::MediaPlayer *this, WebCore::GraphicsContext *a2, const WebCore::FloatRect *a3)
{
  return (*(uint64_t (**)(_QWORD, WebCore::GraphicsContext *, const WebCore::FloatRect *))(**((_QWORD **)this + 9) + 648))(*((_QWORD *)this + 9), a2, a3);
}

uint64_t WebCore::MediaPlayer::videoFrameForCurrentTime(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 664))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::nativeImageForCurrentTime(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 672))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::colorSpace(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 680))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::shouldGetNativeImageForCanvasDrawing(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 688))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::supportsType(WebCore::MediaPlayer *this, const WebCore::MediaEngineSupportParameters *a2, double a3, double a4, float a5)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char v11;
  double v12;
  double v13;
  float v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  _QWORD *v18;
  void *v19;
  WTF::StringImpl *v20[2];
  WTF::StringImpl *v21;

  WebCore::ContentType::containerType(this, a3, a4, a5);
  WTF::AtomString::AtomString(&v21, v20);
  v7 = v20[0];
  v20[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::applicationOctetStream((WebCore *)v20);
  v8 = v20[0];
  v11 = WTF::equal(v21, v20[0], v9);
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v10);
    else
      *(_DWORD *)v8 -= 2;
  }
  if ((v11 & 1) != 0)
    goto LABEL_14;
  if (!v21)
    return 0;
  if (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v21, (uint64_t)"video/", 6uLL))
    goto LABEL_19;
  if (!v21)
    return 0;
  if (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v21, (uint64_t)"audio/", 6uLL))
    goto LABEL_19;
  if (!v21)
    return 0;
  if (!WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v21, (uint64_t)"application/", 0xCuLL))
  {
LABEL_14:
    v15 = 0;
    goto LABEL_15;
  }
LABEL_19:
  v20[0] = 0;
  v20[1] = 0;
  v18 = WebCore::bestMediaEngineForSupportParameters(this, (uint64_t *)v20, 0, v12, v13, v14);
  WTF::WeakHashSet<WebCore::CanvasDisplayBufferObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakHashSet((uint64_t *)v20, v19);
  if (!v18)
    goto LABEL_14;
  v15 = (*(uint64_t (**)(_QWORD *, WebCore::MediaPlayer *))(*v18 + 40))(v18, this);
LABEL_15:
  v16 = v21;
  v21 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v10);
    else
      *(_DWORD *)v16 -= 2;
  }
  return v15;
}

uint64_t WebCore::applicationOctetStream(WebCore *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = WTF::isMainThread(this);
  if ((_DWORD)result)
  {
    v3 = WebCore::applicationOctetStreamAtomData;
    if (WebCore::applicationOctetStreamAtomData)
      *(_DWORD *)WebCore::applicationOctetStreamAtomData += 2;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v3 = v4;
  }
  *(_QWORD *)this = v3;
  return result;
}

WTF::StringImpl **WebCore::MediaPlayer::getSupportedTypes(WebCore *a1)
{
  WTF::StringImpl **result;
  _QWORD *v3;
  WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl **v13;
  int i;
  int v15;
  WTF::StringImpl **v16;
  WTF *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  WTF::StringImpl **v27;

  result = (WTF::StringImpl **)WebCore::installedMediaEngines(a1);
  if (dword_1ECE90EB4)
  {
    v3 = (_QWORD *)WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines;
    v25 = WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines + 8 * dword_1ECE90EB4;
    do
    {
      v26 = v3;
      v27 = 0;
      (*(void (**)(_QWORD, WTF::StringImpl ***))(*(_QWORD *)*v3 + 32))(*v3, &v27);
      v6 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(&v27);
      v7 = (WTF::StringImpl **)v4;
      result = v27;
      if (v27)
        v8 = &v27[*((unsigned int *)v27 - 1)];
      else
        v8 = 0;
      if (v8 != v6)
      {
        do
        {
          v9 = *(_QWORD *)a1;
          if (*(_QWORD *)a1
            || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand((uint64_t *)a1, 0), (v9 = *(_QWORD *)a1) != 0))
          {
            v10 = *(_DWORD *)(v9 - 8);
          }
          else
          {
            v10 = 0;
          }
          v11 = *((_DWORD *)*v6 + 4);
          if (v11 < 0x100)
            v12 = WTF::StringImpl::hashSlowCase(*v6);
          else
            v12 = v11 >> 8;
          v13 = 0;
          for (i = 1; ; ++i)
          {
            v15 = v12 & v10;
            v16 = (WTF::StringImpl **)(v9 + 8 * (v12 & v10));
            v17 = *v16;
            if (!*v16)
              break;
            if (v17 != (WTF *)-1)
            {
              v16 = v13;
              if ((WTF::equal(v17, *v6, v5) & 1) != 0)
                goto LABEL_28;
            }
            v12 = i + v15;
            v13 = v16;
          }
          if (v13)
          {
            *v13 = 0;
            --*(_DWORD *)(*(_QWORD *)a1 - 16);
            v16 = v13;
          }
          v18 = *v6;
          if (*v6)
            *(_DWORD *)v18 += 2;
          *v16 = v18;
          v19 = *(_QWORD *)a1;
          if (*(_QWORD *)a1)
            v20 = *(_DWORD *)(v19 - 12) + 1;
          else
            v20 = 1;
          *(_DWORD *)(v19 - 12) = v20;
          v21 = *(_QWORD *)a1;
          if (*(_QWORD *)a1)
            v22 = *(_DWORD *)(v21 - 12);
          else
            v22 = 0;
          v23 = (*(_DWORD *)(v21 - 16) + v22);
          v24 = *(unsigned int *)(v21 - 4);
          if (v24 > 0x400)
          {
            if (v24 > 2 * v23)
              goto LABEL_28;
          }
          else if (3 * v24 > 4 * v23)
          {
            goto LABEL_28;
          }
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand((uint64_t *)a1, v16);
LABEL_28:
          while (++v6 != v7)
          {
            if ((unint64_t)*v6 + 1 > 1)
              goto LABEL_32;
          }
          v6 = v7;
LABEL_32:
          ;
        }
        while (v6 != v8);
        result = v27;
      }
      if (result)
        result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v4);
      v3 = v26 + 1;
    }
    while (v26 + 1 != (_QWORD *)v25);
  }
  return result;
}

BOOL WebCore::MediaPlayer::isAvailable(WebCore::MediaPlayer *this)
{
  _BOOL8 result;

  {
    if ((_BYTE)WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings)
    {
      return 1;
    }
    else
    {
      WebCore::installedMediaEngines(this);
      return dword_1ECE90EB4 != 0;
    }
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    result = 1;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  return result;
}

uint64_t WebCore::MediaPlayer::supportsPictureInPicture(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 240))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::isCurrentPlaybackTargetWireless(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 760))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::wirelessPlaybackTargetName(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 720))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::wirelessPlaybackTargetType(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 728))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::wirelessVideoPlaybackDisabled(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 736))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::setWirelessVideoPlaybackDisabled(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 744))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::currentPlaybackTargetIsWirelessChanged(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 208))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::canPlayToWirelessPlaybackTarget(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 752))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::setWirelessPlaybackTarget(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 768))(*(_QWORD *)(a1 + 72));
}

uint64_t WebCore::MediaPlayer::setShouldPlayToPlaybackTarget(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 776))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::maxFastForwardRate(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 536))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::minFastReverseRate(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 544))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::acceleratedRenderingStateChanged(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 792))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::supportsAcceleratedRendering(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 784))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::setShouldMaintainAspectRatio(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 800))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::requestHostingContextID(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 152))(*(_QWORD *)(a1 + 72));
}

uint64_t WebCore::MediaPlayer::hostingContextID(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 160))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::didPassCORSAccessCheck(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 808))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::isCrossOrigin(WebCore::MediaPlayer *this, const WebCore::SecurityOrigin *a2)
{
  unsigned __int16 v4;
  WebCore::ThreadableBlobRegistry *v5;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 816))(*((_QWORD *)this + 9));
  if (v4 >= 0x100u)
    return v4 != 0;
  v5 = (WebCore::MediaPlayer *)((char *)this + 104);
  if ((WTF::URL::protocolIs() & 1) != 0)
    return 0;
  {
    WebCore::EmptyOriginAccessPatterns::singleton(void)::instance = (uint64_t)&off_1E3400560;
  }
  return WebCore::SecurityOrigin::canRequest((uint64_t)a2, v5, (uint64_t (***)(_QWORD, uint64_t))&WebCore::EmptyOriginAccessPatterns::singleton(void)::instance) ^ 1;
}

uint64_t WebCore::MediaPlayer::movieLoadType(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 824))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::mediaTimeForTimeValue(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 840))(*(_QWORD *)(a1 + 72));
}

uint64_t WebCore::MediaPlayer::maximumDurationToCacheMediaTime(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 848))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::decodedFrameCount(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 856))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::droppedFrameCount(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 864))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::audioDecodedByteCount(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 872))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::videoDecodedByteCount(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 880))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::originsInMediaCache@<X0>(WebCore::MediaPlayer *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  _QWORD v32[3];
  char v33;

  *a2 = 0;
  result = (uint64_t)WebCore::installedMediaEngines(this);
  if (!dword_1ECE90EB4)
    return result;
  v6 = (_QWORD *)WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines;
  v7 = WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines + 8 * dword_1ECE90EB4;
  while (1)
  {
    result = (uint64_t)(*(_QWORD *(**)(unsigned int **__return_ptr, _QWORD, WebCore::MediaPlayer *))(*(_QWORD *)*v6 + 48))(&v31, *v6, this);
    v9 = *a2;
    if (!*a2)
    {
      *a2 = (uint64_t)v31;
      goto LABEL_5;
    }
    v10 = v31;
    if (*(_DWORD *)(v9 - 12))
    {
      if (v31)
      {
        v12 = *(v31 - 1);
        v30 = v31;
        v13 = &v31[8 * v12];
        if (*(v31 - 3))
        {
          if ((_DWORD)v12)
          {
            v19 = 32 * v12;
            while (1)
            {
              result = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v30);
              if ((result & 1) == 0)
              {
                v20 = v30[6];
                if ((_DWORD)v20 == -1)
                  goto LABEL_55;
                v32[0] = &v33;
                result = ((uint64_t (*)(_QWORD *, unsigned int *))off_1E340E4D0[v20])(v32, v30);
                if (!(_DWORD)result)
                  break;
              }
              v30 += 8;
              v19 -= 32;
              if (!v19)
              {
                v30 = v13;
                break;
              }
            }
            v11 = (uint64_t)v30;
            v30 = v31;
          }
          else
          {
            v11 = (uint64_t)v31;
          }
          v10 = v30;
          if (v30)
            goto LABEL_11;
          goto LABEL_33;
        }
        v11 = (uint64_t)&v31[8 * v12];
        v10 = v31;
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
      v13 = &v10[8 * v12];
      if (v10)
      {
LABEL_11:
        v14 = &v10[8 * *(v10 - 1)];
        goto LABEL_34;
      }
LABEL_33:
      v14 = 0;
LABEL_34:
      if (v14 != (unsigned int *)v11)
      {
        while (1)
        {
          result = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(a2, v11, (uint64_t)v32);
          v21 = v11 + 32;
          v11 = (uint64_t)v13;
          if ((unsigned int *)v21 != v13)
            break;
LABEL_43:
          if ((unsigned int *)v11 == v14)
            goto LABEL_44;
        }
        v11 = v21;
        while (1)
        {
          v22 = *(unsigned int *)(v11 + 24);
          if ((_DWORD)v22 == -1)
            goto LABEL_55;
          v32[0] = &v33;
          result = ((uint64_t (*)(_QWORD *, uint64_t))off_1E340E518[v22])(v32, v11);
          if ((result & 1) == 0)
          {
            v23 = *(unsigned int *)(v11 + 24);
            if ((_DWORD)v23 == -1)
              goto LABEL_55;
            v32[0] = &v33;
            result = ((uint64_t (*)(_QWORD *, uint64_t))off_1E340E4D0[v23])(v32, v11);
            if (!(_DWORD)result)
              goto LABEL_43;
          }
          v11 += 32;
          if ((unsigned int *)v11 == v13)
          {
            v11 = (uint64_t)v13;
            goto LABEL_43;
          }
        }
      }
      goto LABEL_44;
    }
    v31 = 0;
    *a2 = (uint64_t)v10;
    v15 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v15)
      break;
LABEL_20:
    result = WTF::fastFree((WTF *)(v9 - 16), v8);
LABEL_44:
    v24 = v31;
    if (v31)
    {
      v25 = *(v31 - 1);
      if ((_DWORD)v25)
      {
        v26 = v31;
        do
        {
          v27 = v26[6];
          if ((_DWORD)v27 == -1)
            goto LABEL_55;
          v32[0] = &v33;
          if ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E340E4D0[v27])(v32, v26) & 1) == 0)
          {
            v28 = v26[6];
            if ((_DWORD)v28 != -1)
              ((void (*)(_QWORD *, unsigned int *))off_1E340E4E0[v28])(v32, v26);
            v26[6] = -1;
          }
          v26 += 8;
        }
        while (--v25);
      }
      result = WTF::fastFree((WTF *)(v24 - 4), v8);
    }
LABEL_5:
    if (++v6 == (_QWORD *)v7)
      return result;
  }
  v16 = v9;
  while (1)
  {
    v17 = *(unsigned int *)(v16 + 24);
    if ((_DWORD)v17 == -1)
      break;
    v32[0] = &v33;
    if ((((uint64_t (*)(_QWORD *, uint64_t))off_1E340E4D0[v17])(v32, v16) & 1) == 0)
    {
      v18 = *(unsigned int *)(v16 + 24);
      if ((_DWORD)v18 != -1)
        ((void (*)(_QWORD *, uint64_t))off_1E340E4E0[v18])(v32, v16);
      *(_DWORD *)(v16 + 24) = -1;
    }
    v16 += 32;
    if (!--v15)
      goto LABEL_20;
  }
LABEL_55:
  v29 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::MediaPlayer::clearMediaCache(v29);
}

uint64_t *WebCore::MediaPlayer::clearMediaCache(WebCore *a1, double a2)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  result = WebCore::installedMediaEngines(a1);
  if (dword_1ECE90EB4)
  {
    v5 = (uint64_t *)WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines;
    v6 = 8 * dword_1ECE90EB4;
    do
    {
      v7 = *v5++;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, WebCore *, double))(*(_QWORD *)v7 + 56))(v7, a1, a2);
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t *WebCore::MediaPlayer::clearMediaCacheForOrigins(WebCore *a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  result = WebCore::installedMediaEngines(a1);
  if (dword_1ECE90EB4)
  {
    v5 = (uint64_t *)WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines;
    v6 = 8 * dword_1ECE90EB4;
    do
    {
      v7 = *v5++;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, WebCore *, uint64_t))(*(_QWORD *)v7 + 64))(v7, a1, a2);
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t WebCore::MediaPlayer::supportsKeySystem(WebCore::MediaPlayer *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  WebCore::installedMediaEngines(this);
  if (!dword_1ECE90EB4)
    return 0;
  v5 = (uint64_t *)WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines;
  v6 = 8 * dword_1ECE90EB4 - 8;
  do
  {
    v7 = *v5++;
    result = (*(uint64_t (**)(uint64_t, WebCore::MediaPlayer *, const WTF::String *))(*(_QWORD *)v7 + 72))(v7, this, a2);
    if ((result & 1) != 0)
      break;
    v9 = v6;
    v6 -= 8;
  }
  while (v9);
  return result;
}

uint64_t WebCore::MediaPlayer::setPrivateBrowsingMode(WebCore::MediaPlayer *this, char a2)
{
  uint64_t result;

  *((_BYTE *)this + 229) = a2;
  result = *((_QWORD *)this + 9);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 888))(result);
  return result;
}

uint64_t WebCore::MediaPlayer::networkStateChanged(WebCore::MediaPlayer *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WebCore *v6;
  WTF::MonotonicTime *BestMediaEngine;
  double v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 9) + 552))(*((_QWORD *)this + 9)) >= 4)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)this + 9) + 1232))(&v11);
    v3 = v11;
    v11 = 0;
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 34);
    *((_QWORD *)this + 34) = v3;
    if (v4)
    {
      v5 = *(_DWORD *)v4 - 2;
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::destroy(v4, v2);
        v4 = v11;
        v11 = 0;
        if (!v4)
          goto LABEL_5;
        v5 = *(_DWORD *)v4 - 2;
        if (*(_DWORD *)v4 == 2)
        {
          WTF::StringImpl::destroy(v4, v10);
          goto LABEL_5;
        }
      }
      *(_DWORD *)v4 = v5;
    }
  }
LABEL_5:
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 9) + 552))(*((_QWORD *)this + 9)) < 4)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 9) + 560))(*((_QWORD *)this + 9)))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
  v6 = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 448))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
  if (*((_BYTE *)this + 169))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
  WebCore::installedMediaEngines(v6);
  if (dword_1ECE90EB4 < 2)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
  BestMediaEngine = (WTF::MonotonicTime *)WebCore::MediaPlayer::nextBestMediaEngine(this, *((const WebCore::MediaPlayerFactory **)this + 10));
  if (!BestMediaEngine)
  {
    BestMediaEngine = WebCore::MediaPlayer::nextMediaEngine(this, *((const WebCore::MediaPlayerFactory **)this + 10));
    if (!BestMediaEngine)
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
  }
  *((_QWORD *)this + 5) = 0;
  WTF::MonotonicTime::now(BestMediaEngine);
  return WebCore::TimerBase::setNextFireTime((uint64_t)this + 16, v8 + 0.0);
}

WTF::MediaTime *WebCore::MediaPlayer::readyStateChanged(WebCore::MediaPlayer *this)
{
  WTF::MediaTime *result;
  WTF::MediaTime *v3;
  WTF::MediaTime *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v7[3];

  result = (WTF::MediaTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 24))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
  if (*((_BYTE *)this + 192))
  {
    result = (WTF::MediaTime *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 560))(*((_QWORD *)this + 9));
    if ((_DWORD)result == 1)
    {
      if (!*((_BYTE *)this + 192))
        __break(1u);
      *((_BYTE *)this + 192) = 0;
      v7[0] = *((_OWORD *)this + 11);
      v3 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(result);
      v7[1] = *(_OWORD *)v3;
      v4 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v3);
      v7[2] = *(_OWORD *)v4;
      v5 = *((_QWORD *)this + 9);
      v6 = WTF::MediaTime::invalidTime(v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 384))(v5, v6);
      return (WTF::MediaTime *)(*(uint64_t (**)(_QWORD, _OWORD *))(**((_QWORD **)this + 9) + 400))(*((_QWORD *)this + 9), v7);
    }
  }
  return result;
}

uint64_t WebCore::MediaPlayer::volumeChanged(WebCore::MediaPlayer *this, double a2)
{
  *((double *)this + 27) = (*(float (**)(_QWORD, double))(**((_QWORD **)this + 9) + 504))(*((_QWORD *)this + 9), a2);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 32))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::muteChanged(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 227) != a2)
  {
    *(_BYTE *)(this + 227) = a2;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(this + 8) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(this + 8) + 8));
  }
  return this;
}

uint64_t WebCore::MediaPlayer::timeChanged(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 56))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::sizeChanged(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 104))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::repaint(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 96))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::durationChanged(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 64))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::rateChanged(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 72))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::playbackStateChanged(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 80))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::firstVideoFrameAvailable(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 120))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::characteristicChanged(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 128))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::audioSourceProvider(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 904))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::cachedKeyForKeyId(WebCore::MediaPlayer *this, const WTF::String *a2)
{
  return (*(uint64_t (**)(_QWORD, const WTF::String *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 168))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2);
}

uint64_t WebCore::MediaPlayer::keyNeeded(WebCore::MediaPlayer *this, const WebCore::SharedBuffer *a2)
{
  return (*(uint64_t (**)(_QWORD, const WebCore::SharedBuffer *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8)
                                                                          + 176))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2);
}

uint64_t WebCore::MediaPlayer::mediaKeysStorageDirectory(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 184))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::initializationDataEncountered(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 192))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
}

uint64_t WebCore::MediaPlayer::waitingForKeyChanged(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 200))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::waitingForKey(WebCore::MediaPlayer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 968))(result);
  return result;
}

uint64_t WebCore::MediaPlayer::referrer(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 232))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::userAgent(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 240))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::engineDescription@<X0>(WebCore::MediaPlayer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 896))(result);
  *a2 = 0;
  return result;
}

uint64_t WebCore::MediaPlayer::platformErrorCode(WebCore::MediaPlayer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 208))(result);
  return result;
}

uint64_t WebCore::MediaPlayer::cachedResourceLoader(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 304))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::createResourceLoader(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 312))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::addAudioTrack(WebCore::MediaPlayer *this, WebCore::AudioTrackPrivate *a2)
{
  return (*(uint64_t (**)(_QWORD, WebCore::AudioTrackPrivate *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8)
                                                                         + 344))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2);
}

uint64_t WebCore::MediaPlayer::removeAudioTrack(WebCore::MediaPlayer *this, WebCore::AudioTrackPrivate *a2)
{
  return (*(uint64_t (**)(_QWORD, WebCore::AudioTrackPrivate *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8)
                                                                         + 368))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2);
}

uint64_t WebCore::MediaPlayer::addTextTrack(WebCore::MediaPlayer *this, WebCore::InbandTextTrackPrivate *a2)
{
  return (*(uint64_t (**)(_QWORD, WebCore::InbandTextTrackPrivate *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8)
                                                                              + 352))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2);
}

uint64_t WebCore::MediaPlayer::removeTextTrack(WebCore::MediaPlayer *this, WebCore::InbandTextTrackPrivate *a2)
{
  return (*(uint64_t (**)(_QWORD, WebCore::InbandTextTrackPrivate *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8)
                                                                              + 376))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2);
}

uint64_t WebCore::MediaPlayer::addVideoTrack(WebCore::MediaPlayer *this, WebCore::VideoTrackPrivate *a2)
{
  return (*(uint64_t (**)(_QWORD, WebCore::VideoTrackPrivate *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8)
                                                                         + 360))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2);
}

uint64_t WebCore::MediaPlayer::removeVideoTrack(WebCore::MediaPlayer *this, WebCore::VideoTrackPrivate *a2)
{
  return (*(uint64_t (**)(_QWORD, WebCore::VideoTrackPrivate *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8)
                                                                         + 384))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2);
}

uint64_t WebCore::MediaPlayer::setTextTrackRepresentation(WebCore::MediaPlayer *this, WebCore::TextTrackRepresentation *a2)
{
  return (*(uint64_t (**)(_QWORD, WebCore::TextTrackRepresentation *))(**((_QWORD **)this + 9) + 984))(*((_QWORD *)this + 9), a2);
}

uint64_t WebCore::MediaPlayer::syncTextTrackBounds(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 992))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::tracksChanged(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 1000))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::notifyTrackModeChanged(WebCore::MediaPlayer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 1072))(result);
  return result;
}

uint64_t WebCore::MediaPlayer::outOfBandTrackSources(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 408))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

void WebCore::MediaPlayer::resetMediaEngines(WebCore::MediaPlayer *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (__ldaxr(WebCore::mediaEngineVectorLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::mediaEngineVectorLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::mediaEngineVectorLock);
LABEL_5:
  {
    if (dword_1ECE90EB0)
    {
      v3 = (WTF *)WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines;
      if (dword_1ECE90EB4)
      {
        v4 = 8 * dword_1ECE90EB4;
        do
        {
          v5 = *(_QWORD *)v3;
          *(_QWORD *)v3 = 0;
          if (v5)
            (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
          v3 = (WTF *)((char *)v3 + 8);
          v4 -= 8;
        }
        while (v4);
        dword_1ECE90EB4 = 0;
        v3 = (WTF *)WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines;
      }
      if (v3)
      {
        WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines = 0;
        dword_1ECE90EB0 = 0;
        WTF::fastFree(v3, a2);
      }
    }
  }
  else
  {
    WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines = 0;
    *(_QWORD *)&dword_1ECE90EB0 = 0;
  }
  WebCore::haveMediaEnginesVector(void)::haveVector = 0;
  v6 = __ldxr(WebCore::mediaEngineVectorLock);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, WebCore::mediaEngineVectorLock))
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::mediaEngineVectorLock);
}

uint64_t WebCore::MediaPlayer::reset(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = this;
  v3 = *(_QWORD *)(this + 88);
  if (v3)
  {
    *(_QWORD *)(this + 88) = 0;
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = *(unsigned int **)(v3 + 8 * i);
        if (v6 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v6)
          {
            do
            {
              v7 = __ldaxr(v6);
              v8 = v7 - 1;
            }
            while (__stlxr(v8, v6));
            if (!v8)
            {
              atomic_store(1u, v6);
              v10 = i;
              v11 = v3;
              v9 = v4;
              WTF::fastFree((WTF *)v6, a2);
              v4 = v9;
              i = v10;
              v3 = v11;
            }
          }
        }
      }
    }
    this = WTF::fastFree((WTF *)(v3 - 16), a2);
    v3 = *(_QWORD *)(v2 + 88);
    *(_DWORD *)(v2 + 96) = 0;
    if (v3)
    {
      LODWORD(v3) = *(_DWORD *)(v3 - 12);
      if (v3 > 0x7FFFFFFE)
        LODWORD(v3) = 0x7FFFFFFF;
    }
  }
  else
  {
    *(_DWORD *)(this + 96) = 0;
  }
  *(_DWORD *)(v2 + 100) = 2 * v3;
  return this;
}

uint64_t WebCore::MediaPlayer::beginSimulatedHDCPError(WebCore::MediaPlayer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 1008))(result);
  return result;
}

uint64_t WebCore::MediaPlayer::endSimulatedHDCPError(WebCore::MediaPlayer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 1016))(result);
  return result;
}

uint64_t WebCore::MediaPlayer::languageOfPrimaryAudioTrack@<X0>(WebCore::MediaPlayer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _DWORD *v3;

  result = *((_QWORD *)this + 9);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 1024))(result);
  v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v3 += 2;
  *a2 = v3;
  return result;
}

uint64_t WebCore::MediaPlayer::extraMemoryCost(WebCore::MediaPlayer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 1032))(result);
  return result;
}

uint64_t WebCore::MediaPlayer::fileSize(WebCore::MediaPlayer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 1040))(result);
  return result;
}

uint64_t WebCore::MediaPlayer::ended(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 1048))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::videoPlaybackQualityMetrics@<X0>(WebCore::MediaPlayer *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 1056))(result);
  *a2 = 0;
  a2[32] = 0;
  return result;
}

WTF *WebCore::MediaPlayer::asyncVideoPlaybackQualityMetrics@<X0>(WebCore::MediaPlayer *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v3 = *((_QWORD *)this + 9);
  if (v3)
    return (WTF *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 1064))(a2);
  v10 = 7;
  v8 = 0uLL;
  *(_QWORD *)&v9 = "asyncVideoPlaybackQualityMetrics";
  *((_QWORD *)&v9 + 1) = 0;
  v5 = WTF::fastMalloc((WTF *)0x98);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = off_1E3205210;
  v6 = v9;
  *(_OWORD *)(v5 + 16) = v8;
  *(_OWORD *)(v5 + 32) = v6;
  *(_BYTE *)(v5 + 48) = 0;
  *(_DWORD *)(v5 + 96) = 0;
  *(_QWORD *)(v5 + 104) = v5 + 120;
  *(_QWORD *)(v5 + 112) = 1;
  *(_QWORD *)(v5 + 128) = 0;
  *(_QWORD *)(v5 + 136) = 0;
  *(_WORD *)(v5 + 144) = 0;
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v5);
  if (*v7)
  {
    if (v7[16] >= 4u)
      WTF::Logger::log<char [10],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>((uint64_t)v7, 4u, "creating ", v5);
  }
  *a2 = v5;
  return WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v5, &v10, (WTF::Logger::LogSiteIdentifier *)&v8);
}

uint64_t WebCore::MediaPlayer::sourceApplicationIdentifier(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 432))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::preferredAudioCharacteristics(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 480))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayerFactorySupport::callRegisterMediaEngine(uint64_t (*a1)(_QWORD))
{
  return a1(WebCore::addMediaEngine);
}

unint64_t WebCore::addMediaEngine(unint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = (uint64_t *)result;
  {
    v2 = dword_1ECE90EB4;
    if (dword_1ECE90EB4 != dword_1ECE90EB0)
    {
      v3 = (_QWORD *)(WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines
                    + 8 * dword_1ECE90EB4);
      goto LABEL_5;
    }
  }
  else
  {
    v2 = 0;
    WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines = 0;
    *(_QWORD *)&dword_1ECE90EB0 = 0;
  }
  result = WTF::Vector<std::unique_ptr<WebCore::MediaPlayerFactory>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2 + 1, result);
  v1 = (uint64_t *)result;
  LODWORD(v2) = dword_1ECE90EB4;
  v3 = (_QWORD *)(WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines
                + 8 * dword_1ECE90EB4);
LABEL_5:
  v4 = *v1;
  *v1 = 0;
  *v3 = v4;
  dword_1ECE90EB4 = v2 + 1;
  return result;
}

uint64_t WebCore::MediaPlayer::doesHaveAttribute(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 320))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
}

uint64_t WebCore::MediaPlayer::mediaPlayerNetworkInterfaceName(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 416))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::getRawCookies(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 424))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
}

uint64_t WebCore::MediaPlayer::setShouldDisableSleep(WebCore::MediaPlayer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 1088))(result);
  return result;
}

uint64_t WebCore::MediaPlayer::shouldDisableSleep(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 488))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

WTF::StringImpl *WebCore::MediaPlayer::contentMIMEType(WebCore::MediaPlayer *this, double a2, double a3, float a4)
{
  return WebCore::ContentType::containerType((WebCore::MediaPlayer *)((char *)this + 144), a2, a3, a4);
}

uint64_t *WebCore::MediaPlayer::contentTypeCodecs@<X0>(WebCore::MediaPlayer *this@<X0>, _QWORD *a2@<X8>, float a3@<S2>)
{
  WebCore::MediaPlayer *v4;
  _QWORD *v5;
  uint64_t v6;

  {
    v4 = this;
    v5 = a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    this = v4;
    a2 = v5;
    WebCore::ContentType::codecsParameter(void)::codecs = v6;
  }
  return WebCore::ContentType::parameter((uint64_t *)this + 18, (const WTF::String *)&WebCore::ContentType::codecsParameter(void)::codecs, a2, a3);
}

uint64_t WebCore::MediaPlayer::contentMIMETypeWasInferredFromExtension(WebCore::MediaPlayer *this)
{
  return *((unsigned __int8 *)this + 152);
}

uint64_t WebCore::MediaPlayer::mediaContentTypesRequiringHardwareSupport(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 496))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::applicationWillResignActive(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 1096))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::applicationDidBecomeActive(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 1104))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::objCAVFoundationAVPlayer(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 1112))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::performTaskAtTime(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 1120))(*(_QWORD *)(a1 + 72));
}

uint64_t WebCore::MediaPlayer::shouldIgnoreIntrinsicSize(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 1128))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::isLoopingChanged(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 1256))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::remoteEngineFailedToLoad(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 448))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::documentSecurityOrigin(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 568))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::setPreferredDynamicRangeMode(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 233) = a2;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 1136))(*(_QWORD *)(a1 + 72));
}

uint64_t WebCore::MediaPlayer::audioOutputDeviceChanged(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 1144))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::identifier(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 1152))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::videoFrameMetadata(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 1192))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::startVideoFrameMetadataGathering(WebCore::MediaPlayer *this)
{
  *((_BYTE *)this + 265) = 1;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 1200))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::stopVideoFrameMetadataGathering(WebCore::MediaPlayer *this)
{
  *((_BYTE *)this + 265) = 0;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 1208))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::renderVideoWillBeDestroyed(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 1240))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::setShouldDisableHDR(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 696))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::playerContentBoxRectChanged(WebCore::MediaPlayer *this, const WebCore::LayoutRect *a2)
{
  return (*(uint64_t (**)(_QWORD, const WebCore::LayoutRect *))(**((_QWORD **)this + 9) + 1216))(*((_QWORD *)this + 9), a2);
}

uint64_t WebCore::MediaPlayer::onNewVideoFrameMetadata(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 600))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
}

uint64_t WebCore::MediaPlayer::elementId(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 440))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::supportsPlayAtHostTime(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 1160))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::supportsPauseAtHostTime(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 1168))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::playAtHostTime(WebCore::MediaPlayer *this, const MonotonicTime *a2)
{
  return (*(uint64_t (**)(_QWORD, const MonotonicTime *))(**((_QWORD **)this + 9) + 1176))(*((_QWORD *)this + 9), a2);
}

uint64_t WebCore::MediaPlayer::pauseAtHostTime(WebCore::MediaPlayer *this, const MonotonicTime *a2)
{
  return (*(uint64_t (**)(_QWORD, const MonotonicTime *))(**((_QWORD **)this + 9) + 1184))(*((_QWORD *)this + 9), a2);
}

uint64_t WebCore::MediaPlayer::setShouldCheckHardwareSupport(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 1264))(*((_QWORD *)this + 9));
}

uint64_t WebCore::MediaPlayer::setInFullscreenOrPictureInPicture(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 267) != a2)
  {
    *(_BYTE *)(this + 267) = a2;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 72) + 1280))(*(_QWORD *)(this + 72));
  }
  return this;
}

uint64_t WebCore::MediaPlayer::isInFullscreenOrPictureInPicture(WebCore::MediaPlayer *this)
{
  return *((unsigned __int8 *)this + 267);
}

uint64_t WebCore::MediaPlayer::mediaPlayerLogger(WebCore::MediaPlayer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 672))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebCore::MediaPlayer::lastErrorMessage@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 272);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::SeekTarget::toString@<X0>(WebCore::SeekTarget *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t result;
  int8x16_t *v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  char v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  char *v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int16 v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int8x16x2_t v39;
  int8x16x2_t v40;
  int8x16x2_t v41;

  WTF::MediaTime::toJSONString(this);
  WTF::MediaTime::toJSONString((WebCore::SeekTarget *)((char *)this + 16));
  result = WTF::MediaTime::toJSONString((WebCore::SeekTarget *)((char *)this + 32));
  if (v36)
  {
    v6 = *((_DWORD *)v36 + 1);
    if (v35)
      goto LABEL_3;
  }
  else
  {
    v6 = 0;
    if (v35)
    {
LABEL_3:
      v7 = *((_DWORD *)v35 + 1);
      if (v34)
        goto LABEL_4;
LABEL_42:
      v8 = 0;
      goto LABEL_5;
    }
  }
  v7 = 0;
  if (!v34)
    goto LABEL_42;
LABEL_4:
  v8 = *((_DWORD *)v34 + 1);
  if (v8 < 0)
    goto LABEL_67;
LABEL_5:
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  v11 = v9;
  if (v7 < 0 || (v11 & 1) != 0)
    goto LABEL_67;
  v9 = __OFADD__(v7, v10);
  v12 = v7 + v10;
  v13 = v9;
  if (v6 < 0)
    goto LABEL_67;
  if (v13)
    goto LABEL_67;
  v9 = __OFADD__(v6, v12);
  v14 = v6 + v12;
  if (v9)
    goto LABEL_67;
  v15 = (v14 + 1);
  if (__OFADD__(v14, 1))
    goto LABEL_67;
  if (v36 && (*((_BYTE *)v36 + 16) & 4) == 0
    || v35 && (*((_BYTE *)v35 + 16) & 4) == 0
    || v34 && (*((_BYTE *)v34 + 16) & 4) == 0)
  {
    if (v14 != -1)
    {
      if (v15 <= 0x7FFFFFEF)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(2 * v15 + 20));
        v16 = v38;
        if (v38)
        {
          *(_DWORD *)v38 = 2;
          *((_DWORD *)v16 + 1) = v15;
          *((_WORD *)v16 + 10) = 91;
          *((_QWORD *)v16 + 1) = (char *)v16 + 20;
          *((_DWORD *)v16 + 4) = 0;
          v37 = v36;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v37, (char *)v16 + 22);
          v17 = (uint64_t)v37;
          if (v37)
            v17 = *((unsigned int *)v37 + 1);
          v18 = (char *)v16 + 2 * v17 + 22;
          v38 = v35;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v38, v18);
          v19 = (unint64_t)v38;
          if (v38)
            v19 = *((unsigned int *)v38 + 1);
          v20 = &v18[2 * v19];
          if (v34)
          {
            v5 = (int8x16_t *)*((_QWORD *)v34 + 1);
            v21 = *((unsigned int *)v34 + 1);
            if ((*((_BYTE *)v34 + 16) & 4) != 0)
            {
              v22 = &v20[2 * v21];
              if (v21 >= 0x40)
              {
                v23 = &v20[2 * (v21 & 0xFFFFFFC0)];
                v25 = 0uLL;
                v26 = v20;
                do
                {
                  v39.val[0] = *v5;
                  v27 = v5[1];
                  v40.val[0] = v5[2];
                  v28 = v5[3];
                  v5 += 4;
                  v29 = v28;
                  v40.val[1] = 0uLL;
                  v41.val[0] = v27;
                  v39.val[1] = 0uLL;
                  v30 = v26;
                  vst2q_s8(v30, v39);
                  v30 += 32;
                  v41.val[1] = 0uLL;
                  vst2q_s8(v30, v41);
                  v31 = v26 + 64;
                  vst2q_s8(v31, v40);
                  v32 = v26 + 96;
                  vst2q_s8(v32, *(int8x16x2_t *)(&v25 - 1));
                  v26 += 128;
                }
                while (v26 != v23);
              }
              else
              {
                v23 = v20;
              }
              while (v23 != v22)
              {
                v33 = v5->u8[0];
                v5 = (int8x16_t *)((char *)v5 + 1);
                *(_WORD *)v23 = v33;
                v23 += 2;
              }
            }
            else if ((_DWORD)v21 == 1)
            {
              *(_WORD *)v20 = v5->i16[0];
            }
            else if ((_DWORD)v21)
            {
              memcpy(v20, v5, 2 * v21);
            }
            v24 = *((unsigned int *)v34 + 1);
          }
          else
          {
            v24 = 0;
          }
          *(_WORD *)&v20[2 * v24] = 93;
          goto LABEL_53;
        }
      }
LABEL_67:
      *a2 = 0;
      __break(0xC471u);
      return result;
    }
    goto LABEL_66;
  }
  if (v14 == -1)
  {
LABEL_66:
    v16 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_53;
  }
  if ((v15 & 0x80000000) != 0)
    goto LABEL_67;
  result = WTF::tryFastCompactMalloc((WTF *)(v15 + 20));
  v16 = v38;
  if (!v38)
    goto LABEL_67;
  *(_DWORD *)v38 = 2;
  *((_DWORD *)v16 + 1) = v15;
  *((_BYTE *)v16 + 20) = 91;
  *((_QWORD *)v16 + 1) = (char *)v16 + 20;
  *((_DWORD *)v16 + 4) = 4;
  WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((_BYTE *)v16 + 21, (uint64_t)v36, (uint64_t)v35, (uint64_t)v34, 93);
LABEL_53:
  *a2 = v16;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v34 -= 2;
  }
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v35 -= 2;
  }
  result = (uint64_t)v36;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      return WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v36 -= 2;
  }
  return result;
}

WebCore::MediaPlayerPrivateInterface *WebCore::MediaPlayerPrivateInterface::MediaPlayerPrivateInterface(WebCore::MediaPlayerPrivateInterface *this)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E340D798;
  *((_BYTE *)this + 24) = 0;
  *((_OWORD *)this + 2) = *(_OWORD *)WTF::MediaTime::invalidTime(this);
  return this;
}

void WebCore::MediaPlayerPrivateInterface::~MediaPlayerPrivateInterface(WebCore::MediaPlayerPrivateInterface *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E340D798;
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
}

void WebCore::MediaPlayerPrivateInterface::videoFrameForCurrentTime(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::MediaPlayerPrivateInterface::videoFrameMetadata(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[96] = 0;
}

uint64_t *WebCore::MediaPlayerPrivateInterface::seekable(WebCore::MediaPlayerPrivateInterface *this)
{
  uint64_t v2;
  const WTF::MediaTime *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  char *v8;
  unint64_t v9;
  __int128 v11;
  __int128 v12;
  WTF::MediaTime *v13;
  uint64_t v14;

  v13 = (WTF::MediaTime *)(*(uint64_t (**)(WebCore::MediaPlayerPrivateInterface *))(*(_QWORD *)this + 576))(this);
  v14 = v2;
  v3 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v13);
  if (WTF::MediaTime::compare((WTF::MediaTime *)&v13, v3))
  {
    *(_QWORD *)&v12 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateInterface *))(*(_QWORD *)this + 584))(this);
    *((_QWORD *)&v12 + 1) = v4;
    *(_QWORD *)&v11 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateInterface *))(*(_QWORD *)this + 576))(this);
    *((_QWORD *)&v11 + 1) = v5;
    v13 = 0;
    v14 = 0;
    WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v13, &v12, &v11, 0);
    v8 = (char *)this + 8;
    v7 = (WTF *)*((_QWORD *)this + 1);
    if (v7)
    {
      *((_QWORD *)this + 1) = 0;
      *((_DWORD *)this + 4) = 0;
      WTF::fastFree(v7, v6);
    }
    *((_QWORD *)this + 1) = v13;
    *((_QWORD *)this + 2) = v14;
  }
  else
  {
    v9 = atomic_load(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey);
    if (v9 != -1)
    {
      v13 = (WTF::MediaTime *)&v11;
      *(_QWORD *)&v12 = &v13;
      std::__call_once(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformTimeRanges::emptyRanges(void)::$_0 &&>>);
    }
    return &WebCore::PlatformTimeRanges::emptyRanges(void)::emptyRanges;
  }
  return (uint64_t *)v8;
}

WTF *WebCore::MediaPlayerPrivateInterface::asyncVideoPlaybackQualityMetrics@<X0>(WebCore::MediaPlayerPrivateInterface *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  _BYTE *v5;
  uint64_t v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)this + 1056))(&v12);
  if (v14)
  {
    v10 = 0uLL;
    *(_QWORD *)&v11 = "asyncVideoPlaybackQualityMetrics";
    *((_QWORD *)&v11 + 1) = 0;
    v3 = WTF::fastMalloc((WTF *)0x98);
    *(_DWORD *)(v3 + 8) = 1;
    *(_QWORD *)v3 = off_1E3205210;
    v4 = v11;
    *(_OWORD *)(v3 + 16) = v10;
    *(_OWORD *)(v3 + 32) = v4;
    *(_BYTE *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 96) = 0;
    *(_QWORD *)(v3 + 104) = v3 + 120;
    *(_QWORD *)(v3 + 112) = 1;
    *(_QWORD *)(v3 + 128) = 0;
    *(_QWORD *)(v3 + 136) = 0;
    *(_WORD *)(v3 + 144) = 0;
    v5 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v3);
    if (*v5)
    {
      if (v5[16] >= 4u)
        WTF::Logger::log<char [10],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>((uint64_t)v5, 4u, "creating ", v3);
    }
    *a2 = v3;
    return WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::resolve<WebCore::VideoPlaybackQualityMetrics,std::enable_if<true,void>>(v3, &v12, (WTF::Logger::LogSiteIdentifier *)&v10);
  }
  else
  {
    LOBYTE(v10) = 10;
    v12 = 0uLL;
    *(_QWORD *)&v13 = "asyncVideoPlaybackQualityMetrics";
    *((_QWORD *)&v13 + 1) = 0;
    v7 = WTF::fastMalloc((WTF *)0x98);
    *(_DWORD *)(v7 + 8) = 1;
    *(_QWORD *)v7 = off_1E3205210;
    v8 = v13;
    *(_OWORD *)(v7 + 16) = v12;
    *(_OWORD *)(v7 + 32) = v8;
    *(_BYTE *)(v7 + 48) = 0;
    *(_DWORD *)(v7 + 96) = 0;
    *(_QWORD *)(v7 + 104) = v7 + 120;
    *(_QWORD *)(v7 + 112) = 1;
    *(_QWORD *)(v7 + 128) = 0;
    *(_QWORD *)(v7 + 136) = 0;
    *(_WORD *)(v7 + 144) = 0;
    v9 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
    if (*v9 && v9[16] >= 4u)
      WTF::Logger::log<char [10],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>((uint64_t)v9, 4u, "creating ", v7);
    *a2 = v7;
    return WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v7, (char *)&v10, (WTF::Logger::LogSiteIdentifier *)&v12);
  }
}

uint64_t WebCore::MediaPlayerPrivateInterface::currentOrPendingSeekTime(WebCore::MediaPlayerPrivateInterface *this)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(WebCore::MediaPlayerPrivateInterface *))(*(_QWORD *)this + 392))(this);
  if ((v3 & 0x100000000) == 0)
    return (*(uint64_t (**)(WebCore::MediaPlayerPrivateInterface *))(*(_QWORD *)this + 352))(this);
  return result;
}

void WebCore::MIMETypeCache::~MIMETypeCache(WebCore::MIMETypeCache *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;

  *(_QWORD *)this = off_1E340DCB0;
  if (*((_BYTE *)this + 32))
  {
    v3 = *((_QWORD *)this + 3);
    if (v3)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        v5 = (WTF::StringImpl **)*((_QWORD *)this + 3);
        do
        {
          v6 = *v5;
          if (*v5 != (WTF::StringImpl *)-1)
          {
            *v5 = 0;
            if (v6)
            {
              if (*(_DWORD *)v6 == 2)
                WTF::StringImpl::destroy(v6, a2);
              else
                *(_DWORD *)v6 -= 2;
            }
          }
          v5 += 2;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
  }
  if (*((_BYTE *)this + 16))
  {
    v7 = (WTF::StringImpl **)*((_QWORD *)this + 1);
    if (v7)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v7, a2);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;

  *(_QWORD *)this = off_1E340DCB0;
  if (*((_BYTE *)this + 32))
  {
    v3 = *((_QWORD *)this + 3);
    if (v3)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        v5 = (WTF::StringImpl **)*((_QWORD *)this + 3);
        do
        {
          v6 = *v5;
          if (*v5 != (WTF::StringImpl *)-1)
          {
            *v5 = 0;
            if (v6)
            {
              if (*(_DWORD *)v6 == 2)
                WTF::StringImpl::destroy(v6, a2);
              else
                *(_DWORD *)v6 -= 2;
            }
          }
          v5 += 2;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
  }
  if (*((_BYTE *)this + 16))
  {
    v7 = (WTF::StringImpl **)*((_QWORD *)this + 1);
    if (v7)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v7, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::MediaPlayerPrivateInterface::platformLayer(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

void WebCore::MediaPlayerPrivateInterface::createVideoFullscreenLayer(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::setVideoFullscreenLayer(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
}

uint64_t WebCore::MediaPlayerPrivateInterface::supportsPictureInPicture(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::supportsFullscreen(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::duration(WebCore::MediaPlayerPrivateInterface *this)
{
  return *(_QWORD *)WTF::MediaTime::zeroTime(this);
}

uint64_t WebCore::MediaPlayerPrivateInterface::currentTime(WebCore::MediaPlayerPrivateInterface *this)
{
  return *(_QWORD *)WTF::MediaTime::zeroTime(this);
}

uint64_t WebCore::MediaPlayerPrivateInterface::paintCurrentFrameInContext(WebCore::MediaPlayerPrivateInterface *this, WebCore::GraphicsContext *a2, const WebCore::FloatRect *a3)
{
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateInterface *, WebCore::GraphicsContext *, const WebCore::FloatRect *))(*(_QWORD *)this + 648))(this, a2, a3);
}

uint64_t WebCore::MediaPlayerPrivateInterface::supportsAcceleratedRendering(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::movieLoadType(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

void WebCore::MediaPlayerPrivateInterface::engineDescription(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

void WebCore::NullMediaPlayerPrivate::~NullMediaPlayerPrivate(WebCore::NullMediaPlayerPrivate *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E340D798;
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E340D798;
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::NullMediaPlayerPrivate::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 48);
  return this;
}

uint64_t WebCore::NullMediaPlayerPrivate::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  WTF *v3;

  v2 = this;
  if (*(_DWORD *)(this + 48) == 1)
  {
    *(_QWORD *)this = off_1E340D798;
    v3 = *(WTF **)(this + 8);
    if (v3)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v3, a2);
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)(this + 48);
  }
  return this;
}

uint64_t WebCore::NullMediaPlayerPrivate::platformLayer(WebCore::NullMediaPlayerPrivate *this)
{
  return 0;
}

float WebCore::NullMediaPlayerPrivate::naturalSize(WebCore::NullMediaPlayerPrivate *this)
{
  return 0.0;
}

uint64_t WebCore::NullMediaPlayerPrivate::hasVideo(WebCore::NullMediaPlayerPrivate *this)
{
  return 0;
}

uint64_t WebCore::NullMediaPlayerPrivate::hasAudio(WebCore::NullMediaPlayerPrivate *this)
{
  return 0;
}

uint64_t WebCore::NullMediaPlayerPrivate::seeking(WebCore::NullMediaPlayerPrivate *this)
{
  return 0;
}

uint64_t WebCore::NullMediaPlayerPrivate::paused(WebCore::NullMediaPlayerPrivate *this)
{
  return 1;
}

uint64_t WebCore::NullMediaPlayerPrivate::hasClosedCaptions(WebCore::NullMediaPlayerPrivate *this)
{
  return 0;
}

uint64_t WebCore::NullMediaPlayerPrivate::networkState(WebCore::NullMediaPlayerPrivate *this)
{
  return 0;
}

uint64_t WebCore::NullMediaPlayerPrivate::readyState(WebCore::NullMediaPlayerPrivate *this)
{
  return 0;
}

uint64_t *WebCore::NullMediaPlayerPrivate::buffered(WebCore::NullMediaPlayerPrivate *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformTimeRanges::emptyRanges(void)::$_0 &&>>);
  }
  return &WebCore::PlatformTimeRanges::emptyRanges(void)::emptyRanges;
}

double WebCore::NullMediaPlayerPrivate::seekableTimeRangesLastModifiedTime(WebCore::NullMediaPlayerPrivate *this)
{
  return 0.0;
}

double WebCore::NullMediaPlayerPrivate::liveUpdateInterval(WebCore::NullMediaPlayerPrivate *this)
{
  return 0.0;
}

uint64_t WebCore::NullMediaPlayerPrivate::totalBytes(WebCore::NullMediaPlayerPrivate *this)
{
  return 0;
}

uint64_t WebCore::NullMediaPlayerPrivate::didLoadingProgress(WebCore::NullMediaPlayerPrivate *this)
{
  return 0;
}

CFTypeRef WebCore::NullMediaPlayerPrivate::colorSpace@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v3;
  CFTypeRef result;
  char v5;
  char **v6;
  char *v7;

  v3 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v3 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  result = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  *a1 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t WebCore::NullMediaPlayerPrivate::engineDescription(WebCore::NullMediaPlayerPrivate *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

void WebCore::NullMediaPlayerClient::~NullMediaPlayerClient(WebCore::NullMediaPlayerClient *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x19AEA7644);
}

void WebCore::NullMediaPlayerClient::mediaPlayerCachedKeyForKeyId(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::NullMediaPlayerClient::mediaPlayerCreateResourceLoader(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *WebCore::NullMediaPlayerClient::mediaContentTypesRequiringHardwareSupport(WebCore::NullMediaPlayerClient *this)
{
  if ((byte_1ECE83C52 & 1) == 0)
  {
    qword_1ECE83C68[1] = 0;
    qword_1ECE83C68[0] = 0;
    byte_1ECE83C52 = 1;
  }
  return qword_1ECE83C68;
}

char *WebCore::NullMediaPlayerClient::allowedMediaContainerTypes(WebCore::NullMediaPlayerClient *this)
{
  if ((byte_1ECE83C53 & 1) == 0)
  {
    byte_1ECE83C78 = 0;
    byte_1ECE83C88 = 0;
    byte_1ECE83C53 = 1;
  }
  return &byte_1ECE83C78;
}

char *WebCore::NullMediaPlayerClient::allowedMediaCodecTypes(WebCore::NullMediaPlayerClient *this)
{
  if ((byte_1ECE83C53 & 1) == 0)
  {
    byte_1ECE83C78 = 0;
    byte_1ECE83C88 = 0;
    byte_1ECE83C53 = 1;
  }
  return &byte_1ECE83C78;
}

char *WebCore::NullMediaPlayerClient::allowedMediaVideoCodecIDs(WebCore::NullMediaPlayerClient *this)
{
  if ((byte_1ECE83C54 & 1) == 0)
  {
    byte_1ECE83C90 = 0;
    byte_1ECE83CA0 = 0;
    byte_1ECE83C54 = 1;
  }
  return &byte_1ECE83C90;
}

char *WebCore::NullMediaPlayerClient::allowedMediaAudioCodecIDs(WebCore::NullMediaPlayerClient *this)
{
  if ((byte_1ECE83C54 & 1) == 0)
  {
    byte_1ECE83C90 = 0;
    byte_1ECE83CA0 = 0;
    byte_1ECE83C54 = 1;
  }
  return &byte_1ECE83C90;
}

char *WebCore::NullMediaPlayerClient::allowedMediaCaptionFormatTypes(WebCore::NullMediaPlayerClient *this)
{
  if ((byte_1ECE83C54 & 1) == 0)
  {
    byte_1ECE83C90 = 0;
    byte_1ECE83CA0 = 0;
    byte_1ECE83C54 = 1;
  }
  return &byte_1ECE83C90;
}

uint64_t WebCore::NullMediaPlayerClient::mediaPlayerLogger(WebCore::NullMediaPlayerClient *this)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if ((byte_1ECE83C55 & 1) != 0)
  {
    result = qword_1ECE83C60;
    if (qword_1ECE83C60)
      return result;
  }
  else
  {
    qword_1ECE83C60 = 0;
    byte_1ECE83C55 = 1;
  }
  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E335DEC0;
  *(_BYTE *)(result + 12) = 1;
  *(_QWORD *)(result + 16) = this;
  if ((byte_1ECE83C55 & 1) != 0)
  {
    v3 = (unsigned int *)qword_1ECE83C60;
    qword_1ECE83C60 = result;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      }
      if (byte_1ECE83C55 == 1)
      {
        result = qword_1ECE83C60;
      }
      else
      {
        result = 0;
        qword_1ECE83C60 = 0;
        byte_1ECE83C55 = 1;
      }
    }
  }
  else
  {
    byte_1ECE83C55 = 1;
    qword_1ECE83C60 = result;
  }
  if (*(WebCore::NullMediaPlayerClient **)(result + 16) == this)
    *(_BYTE *)(result + 12) = 0;
  return result;
}

uint64_t WTF::Vector<std::unique_ptr<WebCore::MediaPlayerFactory>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;

  v2 = a2;
  v3 = (void *)WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines;
  if (WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines <= a2)
  {
    v4 = dword_1ECE90EB4;
    if (WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines
       + 8 * (unint64_t)dword_1ECE90EB4 > a2)
    {
      v5 = dword_1ECE90EB0 + ((unint64_t)dword_1ECE90EB0 >> 2);
      if (v5 >= 0x10)
        v6 = v5 + 1;
      else
        v6 = 16;
      if (v6 <= a1)
        v7 = a1;
      else
        v7 = v6;
      if (v7 <= dword_1ECE90EB0)
      {
        v10 = WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines;
        return v10 + 8 * ((uint64_t)(v2 - (_QWORD)v3) >> 3);
      }
      if (!(v7 >> 29))
      {
        v8 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
        dword_1ECE90EB0 = v7;
        WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines = (uint64_t)v8;
        memcpy(v8, v3, 8 * v4);
        v10 = WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines;
        if (v3)
        {
          if ((void *)WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines == v3)
          {
            WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines = 0;
            dword_1ECE90EB0 = 0;
          }
          WTF::fastFree((WTF *)v3, v9);
          v10 = WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines;
        }
        return v10 + 8 * ((uint64_t)(v2 - (_QWORD)v3) >> 3);
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x19619B668);
    }
  }
  v11 = dword_1ECE90EB0 + ((unint64_t)dword_1ECE90EB0 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= a1)
    v13 = a1;
  else
    v13 = v12;
  if (v13 > dword_1ECE90EB0)
  {
    if (v13 >> 29)
      goto LABEL_30;
    v14 = dword_1ECE90EB4;
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    dword_1ECE90EB0 = v13;
    WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines = (uint64_t)v15;
    memcpy(v15, v3, 8 * v14);
    if (v3)
    {
      if ((void *)WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines == v3)
      {
        WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines = 0;
        dword_1ECE90EB0 = 0;
      }
      WTF::fastFree((WTF *)v3, v16);
    }
  }
  return v2;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::MediaPlayerSupportsType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::MediaPlayerSupportsType>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_BYTE *)(v9 + 24);
    do
    {
      *((_QWORD *)v12 - 1) = 0;
      *v12 = 0;
      v12 += 16;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (WTF::StringImpl **)(v6 + 16 * v13);
      v16 = *v15;
      if (*v15 != (WTF::StringImpl *)-1)
      {
        if (v16)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = *((_DWORD *)v16 + 4);
          if (v19 < 0x100)
            v20 = WTF::StringImpl::hashSlowCase(v16);
          else
            v20 = v19 >> 8;
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v17 + 16 * v22));
          v23 = v17 + 16 * v22;
          *(_QWORD *)v23 = 0;
          v24 = *v15;
          *v15 = 0;
          *(_QWORD *)v23 = v24;
          *(_BYTE *)(v23 + 8) = *(_BYTE *)(v6 + 16 * v13 + 8);
          v25 = *v15;
          *v15 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v10);
            else
              *(_DWORD *)v25 -= 2;
          }
          if (v15 == a3)
            v14 = v23;
        }
        else
        {
          *v15 = 0;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::MediaPlayer::*&)(void),WebCore::MediaPlayer*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void WebCore::MediaResourceSniffer::create(uint64_t a1@<X0>, _BYTE *a2@<X1>, unint64_t a3@<X2>, unsigned __int8 a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  int v10;
  unint64_t v11;
  BOOL v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::NativePromiseBase *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v32;
  unsigned int *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned __int8 *v38;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  const char *v62;
  _QWORD v63[2];

  v63[1] = *MEMORY[0x1E0C80C00];
  v9 = a4;
  if (a4)
  {
    v10 = 0;
    v11 = a3;
    do
    {
      ++v10;
      v12 = v11 > 9;
      v11 /= 0xAuLL;
    }
    while (v12);
    if (v10 < 0
      || (v13 = __OFADD__(v10, 1), v14 = v10 + 1, v13)
      || (v13 = __OFADD__(v14, 1), v15 = v14 + 1, v13)
      || (v16 = (v15 + 6), __OFADD__(v15, 6))
      || (WTF::tryFastCompactMalloc((WTF *)(v16 + 20)), (v17 = v60) == 0))
    {
      __break(0xC471u);
      return;
    }
    v18 = 0;
    *(_DWORD *)v60 = 2;
    *((_DWORD *)v17 + 1) = v16;
    *((_QWORD *)v17 + 1) = (char *)v17 + 20;
    *((_QWORD *)v17 + 2) = 0x6574796200000004;
    v19 = a3;
    *((_DWORD *)v17 + 6) = 758136179;
    do
    {
      *((_BYTE *)v63 + v18--) = (v19 % 0xA) | 0x30;
      v12 = v19 > 9;
      v19 /= 0xAuLL;
    }
    while (v12);
    if (v18 + 26 <= 25)
      memcpy((char *)v17 + 28, (char *)v63 + v18 + 1, -v18);
    v60 = v17;
    if ((a2[184] & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      a2[184] |= 1u;
    }
    WebCore::HTTPHeaderMap::add((WTF::StringImpl *)(a2 + 96), 59, (uint64_t *)&v60);
    a2[184] &= ~2u;
    v21 = v60;
    v60 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 32))(&v58, a1, a2, 2);
  v22 = v58;
  v23 = WTF::fastMalloc((WTF *)0x58);
  v24 = v23;
  if (!v22)
  {
    *(_DWORD *)(v23 + 8) = 1;
    *(_QWORD *)v23 = off_1E340E550;
    *(_QWORD *)(v23 + 24) = 0;
    *(_QWORD *)(v23 + 32) = 0;
    *(_QWORD *)(v23 + 16) = 0;
    v60 = 0;
    v61 = 0;
    v62 = "MediaResourceSniffer";
    v63[0] = 0;
    v28 = (WTF::NativePromiseBase *)WTF::NativePromiseProducer<WebCore::ContentType,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>(v23 + 40, (WTF::Logger::LogSiteIdentifier *)&v60);
    *(_QWORD *)(v24 + 80) = 0;
    v59 = 11;
    v60 = 0;
    v61 = 0;
    v62 = "MediaResourceSniffer";
    v63[0] = 0;
    v29 = *(_QWORD *)(v24 + 40);
    if (!v29)
    {
      v45 = 0;
      goto LABEL_59;
    }
    v30 = (unsigned __int8 *)(v29 + 48);
    if (__ldaxr((unsigned __int8 *)(v29 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v30))
    {
      goto LABEL_53;
    }
    v28 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v29 + 48);
LABEL_53:
    v46 = *(_DWORD *)(v29 + 80);
    v47 = __ldxr(v30);
    if (v47 == 1)
    {
      if (!__stlxr(0, v30))
      {
LABEL_58:
        v45 = *(_QWORD *)(v24 + 40);
        if (!v46)
        {
          WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(*(_QWORD *)(v24 + 40), &v59, (WTF::Logger::LogSiteIdentifier *)&v60);
LABEL_63:
          *a5 = v24;
          goto LABEL_64;
        }
LABEL_59:
        v48 = (_BYTE *)WTF::NativePromiseBase::logChannel(v28);
        if (*v48 && v48[16] >= 4u)
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>>((uint64_t)v48, (WTF::Logger::LogSiteIdentifier *)&v60, v45);
        goto LABEL_63;
      }
    }
    else
    {
      __clrex();
    }
    v28 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v30);
    goto LABEL_58;
  }
  v25 = v58;
  v26 = *(_QWORD *)(v58 + 8);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_26;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_26:
  ++*(_QWORD *)(v26 + 8);
  v32 = __ldxr((unsigned __int8 *)v26);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
  *(_DWORD *)(v24 + 8) = 1;
  v33 = (unsigned int *)(v24 + 8);
  *(_QWORD *)v24 = off_1E340E550;
  if (v9)
    v34 = a3;
  else
    v34 = -1;
  *(_QWORD *)(v24 + 16) = v25;
  *(_QWORD *)(v24 + 24) = v34;
  *(_QWORD *)(v24 + 32) = 0;
  v60 = 0;
  v61 = 0;
  v62 = "MediaResourceSniffer";
  v63[0] = 0;
  WTF::NativePromiseProducer<WebCore::ContentType,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>(v24 + 40, (WTF::Logger::LogSiteIdentifier *)&v60);
  *(_QWORD *)(v24 + 80) = 0;
  *a5 = v24;
  v36 = v58;
  do
    v37 = __ldaxr(v33);
  while (__stlxr(v37 + 1, v33));
  v38 = (unsigned __int8 *)(v36 + 24);
  if (__ldaxr((unsigned __int8 *)(v36 + 24)))
  {
    __clrex();
LABEL_39:
    MEMORY[0x19AEA534C](v36 + 24);
    goto LABEL_40;
  }
  if (__stxr(1u, v38))
    goto LABEL_39;
LABEL_40:
  v40 = *(unsigned int **)(v36 + 16);
  *(_QWORD *)(v36 + 16) = v24;
  if (v40)
  {
    v41 = v40 + 2;
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, v40 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v40 + 8))(v40);
    }
  }
  v44 = __ldxr(v38);
  if (v44 != 1)
  {
    __clrex();
    goto LABEL_49;
  }
  if (__stlxr(0, v38))
LABEL_49:
    WTF::Lock::unlockSlow((WTF::Lock *)(v36 + 24));
LABEL_64:
  v49 = v58;
  v58 = 0;
  if (!v49)
    return;
  v50 = *(_QWORD *)(v49 + 8);
  if (__ldaxr((unsigned __int8 *)v50))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v50))
  {
    goto LABEL_69;
  }
  MEMORY[0x19AEA534C](v50);
LABEL_69:
  v52 = *(_QWORD *)(v50 + 8);
  v53 = v52 - 1;
  *(_QWORD *)(v50 + 8) = v52 - 1;
  if (v52 == 1)
  {
    v57 = *(_QWORD *)(v50 + 16);
    v54 = *(_QWORD *)(v50 + 24);
    *(_QWORD *)(v50 + 24) = 0;
    v55 = v57 != 0;
  }
  else
  {
    v54 = 0;
    v55 = 1;
  }
  v56 = __ldxr((unsigned __int8 *)v50);
  if (v56 != 1)
  {
    __clrex();
LABEL_76:
    WTF::Lock::unlockSlow((WTF::Lock *)v50);
    if (v53)
      return;
    goto LABEL_77;
  }
  if (__stlxr(0, (unsigned __int8 *)v50))
    goto LABEL_76;
  if (v53)
    return;
LABEL_77:
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
  if (!v55)
    WTF::fastFree((WTF *)v50, v35);
}

void WebCore::MediaResourceSniffer::~MediaResourceSniffer(WebCore::MediaResourceSniffer *this, void *a2)
{
  void *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (**v23)();
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t (**v27)();
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;

  WebCore::MediaResourceSniffer::cancel(this, a2);
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v20 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v20)
      {
        v21 = *(_QWORD *)(v4 + 8);
        v22 = v21 + 16 * v20;
        v23 = off_1E340EAD8;
        do
        {
          v24 = *(unsigned int **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              v27 = v23;
              v34 = v21;
              v35 = v22;
              v28 = v4;
              atomic_store(1u, v24);
              v29 = v24[6];
              if ((_DWORD)v29 != -1)
                ((void (*)(char *, unsigned int *))v23[v29])(&v36, v24 + 2);
              v24[6] = -1;
              WTF::fastFree((WTF *)v24, v3);
              v4 = v28;
              v21 = v34;
              v22 = v35;
              v23 = v27;
            }
          }
          v21 += 16;
        }
        while (v21 != v22);
      }
      v31 = *(WTF **)(v4 + 8);
      if ((WTF *)(v4 + 24) != v31 && v31 != 0)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        v33 = v4;
        WTF::fastFree(v31, v3);
        v4 = v33;
      }
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  v7 = *((_QWORD *)this + 5);
  if (v7)
  {
    WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::assertIsDead(v7);
    v8 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v8)
    {
      v9 = v8 + 2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v8 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_16;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_16:
    v15 = *(_QWORD *)(v13 + 8);
    v16 = v15 - 1;
    *(_QWORD *)(v13 + 8) = v15 - 1;
    if (v15 == 1)
    {
      v30 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 24) = 0;
      v18 = v30 != 0;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v19 = __ldxr((unsigned __int8 *)v13);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
        if (v16)
          return;
LABEL_24:
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        if (!v18)
          WTF::fastFree((WTF *)v13, v3);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      return;
    goto LABEL_24;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::MediaResourceSniffer::~MediaResourceSniffer(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::MediaResourceSniffer::cancel(WebCore::MediaResourceSniffer *this, void *a2)
{
  WebCore::MediaResourceSniffer *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  _BYTE *v15;
  BOOL v16;
  int v17;
  int v18;
  uint64_t v20;
  unsigned __int8 *v21;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  char v30;

  v2 = this;
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_18;
  this = (WebCore::MediaResourceSniffer *)(*(uint64_t (**)(_QWORD *))(*v3 + 24))(v3);
  v4 = v3[1];
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  this = (WebCore::MediaResourceSniffer *)MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v25 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v25 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    this = (WebCore::MediaResourceSniffer *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    this = (WebCore::MediaResourceSniffer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  if (!v9)
    this = (WebCore::MediaResourceSniffer *)WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = *((_QWORD *)v2 + 5);
  if (!v11)
  {
    v14 = 0;
    v26 = 0;
    v27 = 0;
    v28 = "cancel";
    v29 = 0;
    goto LABEL_22;
  }
  v12 = (unsigned __int8 *)(v11 + 48);
  if (__ldaxr((unsigned __int8 *)(v11 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_30;
  }
  this = (WebCore::MediaResourceSniffer *)MEMORY[0x19AEA534C](v11 + 48);
LABEL_30:
  v17 = *(_DWORD *)(v11 + 80);
  v18 = __ldxr(v12);
  if (v18 == 1)
  {
    if (!__stlxr(0, v12))
    {
      if (v17)
        return WebCore::SharedBufferBuilder::reset((WebCore::MediaResourceSniffer *)((char *)v2 + 80), a2);
      goto LABEL_37;
    }
  }
  else
  {
    __clrex();
  }
  this = (WebCore::MediaResourceSniffer *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
  if (v17)
    return WebCore::SharedBufferBuilder::reset((WebCore::MediaResourceSniffer *)((char *)v2 + 80), a2);
LABEL_37:
  v20 = *((_QWORD *)v2 + 5);
  v30 = 7;
  v26 = 0;
  v27 = 0;
  v28 = "cancel";
  v29 = 0;
  if (v20)
  {
    v21 = (unsigned __int8 *)(v20 + 48);
    if (__ldaxr((unsigned __int8 *)(v20 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v21))
    {
      goto LABEL_43;
    }
    this = (WebCore::MediaResourceSniffer *)MEMORY[0x19AEA534C](v20 + 48);
LABEL_43:
    v23 = *(_DWORD *)(v20 + 80);
    v24 = __ldxr(v21);
    if (v24 == 1)
    {
      if (!__stlxr(0, v21))
      {
LABEL_48:
        v14 = *((_QWORD *)v2 + 5);
        if (!v23)
        {
          WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(*((_QWORD *)v2 + 5), &v30, (WTF::Logger::LogSiteIdentifier *)&v26);
          return WebCore::SharedBufferBuilder::reset((WebCore::MediaResourceSniffer *)((char *)v2 + 80), a2);
        }
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    this = (WebCore::MediaResourceSniffer *)WTF::Lock::unlockSlow((WTF::Lock *)v21);
    goto LABEL_48;
  }
  v14 = 0;
LABEL_22:
  v15 = (_BYTE *)WTF::NativePromiseBase::logChannel(this);
  if (*v15)
    v16 = v15[16] >= 4u;
  else
    v16 = 0;
  if (v16)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>>((uint64_t)v15, (WTF::Logger::LogSiteIdentifier *)&v26, v14);
  return WebCore::SharedBufferBuilder::reset((WebCore::MediaResourceSniffer *)((char *)v2 + 80), a2);
}

uint64_t *WebCore::MediaResourceSniffer::dataReceived(WebCore::MediaResourceSniffer *this, WebCore::PlatformMediaResource *a2, const WebCore::SharedBuffer *a3)
{
  uint64_t v5;
  unsigned int v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v23;
  int v24;
  int v25;
  _BYTE *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  uint64_t v35;
  WTF *v36;
  WebCore::MediaResourceSniffer *v38;
  WebCore::PlatformMediaResource *v39;
  const WebCore::ResourceError *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[4];
  WTF::StringImpl *v44;
  char v45;
  WTF::StringImpl *v46;
  uint64_t v47;

  *((_QWORD *)this + 4) += *((_QWORD *)a3 + 6);
  WebCore::SharedBufferBuilder::ensureBuffer((uint64_t *)this + 10);
  WebCore::FragmentedSharedBuffer::append(*((WebCore::FragmentedSharedBuffer **)this + 10), a3);
  v5 = *((_QWORD *)this + 10);
  if (v5)
  {
    do
      v6 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v6 + 1, (unsigned int *)v5));
    WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)v5, &v47);
    do
    {
      v8 = __ldaxr((unsigned int *)v5);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v5));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v5);
      v28 = *(unsigned int *)(v5 + 20);
      if ((_DWORD)v28)
      {
        v29 = *(_QWORD *)(v5 + 8);
        v30 = v29 + 16 * v28;
        do
        {
          v31 = *(unsigned int **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v31)
          {
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              v41 = v29;
              v42 = v30;
              atomic_store(1u, v31);
              v34 = v31;
              v35 = v31[6];
              if ((_DWORD)v35 != -1)
                ((void (*)(_QWORD *, unsigned int *))off_1E340EAD8[v35])(v43, v31 + 2);
              v34[6] = -1;
              WTF::fastFree((WTF *)v34, v7);
              v29 = v41;
              v30 = v42;
            }
          }
          v29 += 16;
        }
        while (v29 != v30);
      }
      v36 = *(WTF **)(v5 + 8);
      if ((WTF *)(v5 + 24) != v36 && v36 != 0)
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        WTF::fastFree(v36, v7);
      }
      WTF::fastFree((WTF *)v5, v7);
    }
  }
  else
  {
    WebCore::FragmentedSharedBuffer::makeContiguous(0, &v47);
  }
  v10 = v47;
  if (*(_DWORD *)(v47 + 20))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v47 + 8) + 8);
    v12 = *(unsigned int *)(v11 + 24);
    if ((_DWORD)v12 == -1)
    {
      v38 = (WebCore::MediaResourceSniffer *)std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)WebCore::MediaResourceSniffer::loadFailed(v38, v39, v40);
    }
    v43[0] = &v44;
    v13 = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v12])(v43, v11 + 8);
  }
  else
  {
    v13 = 0;
  }
  WebCore::MIMESniffer::getMIMETypeFromContent(v13, *(_QWORD *)(v10 + 48), &v46);
  v15 = v46;
  if (v46 && *((_DWORD *)v46 + 1) || *((_QWORD *)this + 4) >= *((_QWORD *)this + 3))
  {
    v16 = *((_QWORD *)this + 5);
    if (!v16)
      goto LABEL_25;
    v17 = (unsigned __int8 *)(v16 + 48);
    if (__ldaxr((unsigned __int8 *)(v16 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_18;
    }
    MEMORY[0x19AEA534C](v16 + 48);
LABEL_18:
    v19 = *(_DWORD *)(v16 + 80);
    v20 = __ldxr(v17);
    if (v20 == 1)
    {
      if (!__stlxr(0, v17))
      {
        if (!v19)
          goto LABEL_24;
        goto LABEL_44;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (!v19)
    {
LABEL_24:
      v15 = v46;
      v16 = *((_QWORD *)this + 5);
LABEL_25:
      v46 = 0;
      v43[3] = 0;
      v44 = v15;
      v45 = 0;
      v43[0] = 0;
      v43[1] = 0;
      v43[2] = "dataReceived";
      if (!v16)
      {
        v23 = 0;
        goto LABEL_37;
      }
      v21 = (unsigned __int8 *)(v16 + 48);
      if (__ldaxr((unsigned __int8 *)(v16 + 48)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v21))
      {
        goto LABEL_31;
      }
      v15 = (WTF::StringImpl *)MEMORY[0x19AEA534C](v16 + 48);
LABEL_31:
      v24 = *(_DWORD *)(v16 + 80);
      v25 = __ldxr(v21);
      if (v25 == 1)
      {
        if (!__stlxr(0, v21))
        {
LABEL_36:
          v23 = *((_QWORD *)this + 5);
          if (!v24)
          {
            WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::resolve<WebCore::ContentType,std::enable_if<true,void>>(*((_QWORD *)this + 5), (uint64_t *)&v44, (WTF::Logger::LogSiteIdentifier *)v43);
LABEL_41:
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
                WTF::StringImpl::destroy(v44, v14);
              else
                *(_DWORD *)v44 -= 2;
            }
            goto LABEL_44;
          }
LABEL_37:
          v26 = (_BYTE *)WTF::NativePromiseBase::logChannel(v15);
          if (*v26 && v26[16] >= 4u)
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>>((uint64_t)v26, (WTF::Logger::LogSiteIdentifier *)v43, v23);
          goto LABEL_41;
        }
      }
      else
      {
        __clrex();
      }
      v15 = (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v21);
      goto LABEL_36;
    }
LABEL_44:
    WebCore::MediaResourceSniffer::cancel(this, v14);
    v15 = v46;
  }
  v46 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v47, v14);
}

uint64_t WebCore::MediaResourceSniffer::loadFailed(WebCore::MediaResourceSniffer *this, WebCore::PlatformMediaResource *a2, const WebCore::ResourceError *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v13;
  int v14;
  _BYTE *v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  char v22;

  v3 = (uint64_t *)this;
  v4 = *((_QWORD *)this + 5);
  if (!v4)
  {
    v7 = 0;
    v18 = 0;
    v19 = 0;
    v20 = "loadFailed";
    v21 = 0;
    goto LABEL_25;
  }
  v5 = (unsigned __int8 *)(v4 + 48);
  if (__ldaxr((unsigned __int8 *)(v4 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_7;
  }
  this = (WebCore::MediaResourceSniffer *)MEMORY[0x19AEA534C](v4 + 48, a2, a3);
LABEL_7:
  v8 = *(_DWORD *)(v4 + 80);
  v9 = __ldxr(v5);
  if (v9 == 1)
  {
    if (!__stlxr(0, v5))
    {
      if (v8)
        return WebCore::MediaResourceSniffer::cancel((WebCore::MediaResourceSniffer *)v3, a2);
      goto LABEL_13;
    }
  }
  else
  {
    __clrex();
  }
  this = (WebCore::MediaResourceSniffer *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (v8)
    return WebCore::MediaResourceSniffer::cancel((WebCore::MediaResourceSniffer *)v3, a2);
LABEL_13:
  v10 = v3[5];
  v22 = 11;
  v18 = 0;
  v19 = 0;
  v20 = "loadFailed";
  v21 = 0;
  if (v10)
  {
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_19;
    }
    this = (WebCore::MediaResourceSniffer *)MEMORY[0x19AEA534C](v10 + 48, a2, a3);
LABEL_19:
    v13 = *(_DWORD *)(v10 + 80);
    v14 = __ldxr(v11);
    if (v14 == 1)
    {
      if (!__stlxr(0, v11))
      {
LABEL_24:
        v7 = v3[5];
        if (!v13)
        {
          WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v3[5], &v22, (WTF::Logger::LogSiteIdentifier *)&v18);
          return WebCore::MediaResourceSniffer::cancel((WebCore::MediaResourceSniffer *)v3, a2);
        }
        goto LABEL_25;
      }
    }
    else
    {
      __clrex();
    }
    this = (WebCore::MediaResourceSniffer *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
    goto LABEL_24;
  }
  v7 = 0;
LABEL_25:
  v15 = (_BYTE *)WTF::NativePromiseBase::logChannel(this);
  if (*v15)
    v16 = v15[16] >= 4u;
  else
    v16 = 0;
  if (v16)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>>((uint64_t)v15, (WTF::Logger::LogSiteIdentifier *)&v18, v7);
  return WebCore::MediaResourceSniffer::cancel((WebCore::MediaResourceSniffer *)v3, a2);
}

uint64_t *WebCore::MediaResourceSniffer::loadFinished(uint64_t *this, WebCore::PlatformMediaResource *a2, const WebCore::NetworkLoadMetrics *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::NativePromiseBase *MIMETypeFromContent;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v20;
  int v21;
  int v22;
  _BYTE *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WebCore::MediaSourcePrivate *v27;
  const WTF::MediaTime *v28;
  uint64_t v29[4];
  WTF::StringImpl *v30;
  char v31;
  WTF::StringImpl *v32;
  uint64_t v33;

  v3 = this;
  v4 = this[5];
  if (!v4)
    goto LABEL_12;
  v5 = (unsigned __int8 *)(v4 + 48);
  if (__ldaxr((unsigned __int8 *)(v4 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_6;
  }
  this = (uint64_t *)MEMORY[0x19AEA534C](v4 + 48, a2, a3);
LABEL_6:
  v7 = *(_DWORD *)(v4 + 80);
  v8 = __ldxr(v5);
  if (v8 == 1)
  {
    if (!__stlxr(0, v5))
    {
      if (v7)
        return this;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  this = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (v7)
    return this;
LABEL_12:
  v9 = v3[10];
  if (v9)
  {
    v3[10] = 0;
  }
  else
  {
    v9 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = v9 + 24;
    *(_QWORD *)(v9 + 16) = 1;
    *(_BYTE *)(v9 + 40) = 0;
    *(_QWORD *)(v9 + 48) = 0;
  }
  v29[0] = v9;
  WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)v9, &v33);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v29, v10);
  v11 = v33;
  if (*(_DWORD *)(v33 + 20))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v33 + 8) + 8);
    v13 = *(unsigned int *)(v12 + 24);
    if ((_DWORD)v13 == -1)
    {
      v27 = (WebCore::MediaSourcePrivate *)std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)WebCore::MediaSourcePrivate::hasFutureTime(v27, v28);
    }
    v29[0] = (uint64_t)&v30;
    v14 = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v13])(v29, v12 + 8);
  }
  else
  {
    v14 = 0;
  }
  MIMETypeFromContent = (WTF::NativePromiseBase *)WebCore::MIMESniffer::getMIMETypeFromContent(v14, *(_QWORD *)(v11 + 48), &v32);
  v16 = v32;
  v32 = 0;
  v29[3] = 0;
  v30 = v16;
  v31 = 0;
  v29[0] = 0;
  v29[1] = 0;
  v29[2] = (uint64_t)"loadFinished";
  v17 = v3[5];
  if (!v17)
  {
    v20 = 0;
LABEL_29:
    v23 = (_BYTE *)WTF::NativePromiseBase::logChannel(MIMETypeFromContent);
    if (*v23 && v23[16] >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>>((uint64_t)v23, (WTF::Logger::LogSiteIdentifier *)v29, v20);
    goto LABEL_33;
  }
  v18 = (unsigned __int8 *)(v17 + 48);
  if (__ldaxr((unsigned __int8 *)(v17 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_23;
  }
  MIMETypeFromContent = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v17 + 48);
LABEL_23:
  v21 = *(_DWORD *)(v17 + 80);
  v22 = __ldxr(v18);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, v18))
LABEL_27:
    MIMETypeFromContent = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v18);
  v20 = v3[5];
  if (v21)
    goto LABEL_29;
  WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::resolve<WebCore::ContentType,std::enable_if<true,void>>(v3[5], (uint64_t *)&v30, (WTF::Logger::LogSiteIdentifier *)v29);
LABEL_33:
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v24);
    else
      *(_DWORD *)v30 -= 2;
  }
  WebCore::MediaResourceSniffer::cancel((WebCore::MediaResourceSniffer *)v3, v24);
  v26 = v32;
  v32 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v33, v25);
}

uint64_t WebCore::MediaSourcePrivate::hasFutureTime(WebCore::MediaSourcePrivate *this, const WTF::MediaTime *a2)
{
  __int128 v3;

  v3 = xmmword_1968A1610;
  return WebCore::MediaSourcePrivate::hasFutureTime(this, a2, (const WTF::MediaTime *)&v3);
}

uint64_t WebCore::MediaSourcePrivate::hasFutureTime(WebCore::MediaSourcePrivate *this, const WTF::MediaTime *a2, const WTF::MediaTime *a3)
{
  unsigned __int8 *v6;
  __int128 v8;
  int v9;
  uint64_t result;
  _BOOL8 v11;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::MediaTime *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  WTF *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[2];
  WTF *v43;
  int v44;
  unsigned int v45;
  __int128 v46;
  __int128 v47;

  v6 = (unsigned __int8 *)this + 64;
  if (__ldaxr((unsigned __int8 *)this + 64))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 64);
LABEL_5:
  v8 = *(_OWORD *)((char *)this + 72);
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v6))
  {
LABEL_9:
    v39 = v8;
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    v8 = v39;
  }
  v47 = v8;
  result = WTF::MediaTime::compare(a2, (const WTF::MediaTime *)&v47);
  if ((result & 0x80000000) == 0)
    return 0;
  if (__ldaxr(v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_16;
  }
  result = MEMORY[0x19AEA534C](v6);
LABEL_16:
  v13 = *((unsigned int *)this + 25);
  v43 = 0;
  v44 = 0;
  v45 = v13;
  if (!(_DWORD)v13)
    goto LABEL_21;
  if (!(v13 >> 27))
  {
    v14 = (WTF *)WTF::fastMalloc((WTF *)(32 * v13));
    v44 = v13;
    v43 = v14;
    v15 = *((unsigned int *)this + 25);
    if ((_DWORD)v15)
    {
      v16 = (__int128 *)*((_QWORD *)this + 11);
      v17 = 32 * v15;
      do
      {
        v18 = *v16;
        v19 = v16[1];
        v16 += 2;
        *(_OWORD *)v14 = v18;
        *((_OWORD *)v14 + 1) = v19;
        v14 = (WTF *)((char *)v14 + 32);
        v17 -= 32;
      }
      while (v17);
    }
LABEL_21:
    v20 = __ldxr(v6);
    if (v20 == 1)
    {
      if (!__stlxr(0, v6))
        goto LABEL_26;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_26:
    v42[0] = WebCore::PlatformTimeRanges::nearest((WebCore::PlatformTimeRanges *)&v43, a2);
    v42[1] = v21;
    *(_QWORD *)&v46 = WTF::MediaTime::operator-();
    *((_QWORD *)&v46 + 1) = v22;
    *(_QWORD *)&v47 = WTF::abs();
    *((_QWORD *)&v47 + 1) = v23;
    v41 = *((_OWORD *)this + 8);
    v11 = 0;
    if (WTF::MediaTime::compare((WTF::MediaTime *)&v47, (const WTF::MediaTime *)&v41) == 1 || !v45)
      goto LABEL_51;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v47 = *(_OWORD *)((char *)v43 + v25);
      v27 = WTF::MediaTime::compare((WTF::MediaTime *)v42, (const WTF::MediaTime *)&v47);
      if ((v27 & 0x80000000) == 0)
      {
        if (v26 >= v45)
        {
          v28 = (_QWORD *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v27);
          v29 = v28 + 1;
        }
        else
        {
          v28 = (_QWORD *)((char *)v43 + v25 + 16);
          v29 = (uint64_t *)((char *)v43 + v25 + 24);
        }
        v30 = *v29;
        *(_QWORD *)&v46 = *v28;
        *((_QWORD *)&v46 + 1) = v30;
        v31 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)v42, (const WTF::MediaTime *)&v46);
        if ((int)v31 < 1)
          break;
      }
      ++v26;
      v25 += 32;
      if (v26 >= v45)
      {
        v11 = 0;
        goto LABEL_51;
      }
    }
    if (v45 <= v26)
    {
      v32 = (_QWORD *)WTF::MediaTime::zeroTime(v31);
      v33 = v32 + 1;
    }
    else
    {
      v32 = (_QWORD *)((char *)v43 + v25 + 16);
      v33 = (uint64_t *)((char *)v43 + v25 + 24);
    }
    v34 = *v33;
    *(_QWORD *)&v47 = *v32;
    *((_QWORD *)&v47 + 1) = v34;
    LODWORD(v34) = __ldaxr(v6);
    if ((_DWORD)v34)
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_43;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_43:
    v35 = *(_OWORD *)((char *)this + 72);
    v36 = __ldxr(v6);
    if (v36 == 1)
    {
      if (!__stlxr(0, v6))
      {
LABEL_48:
        v46 = v35;
        if (WTF::MediaTime::compare((WTF::MediaTime *)&v47, (const WTF::MediaTime *)&v46))
        {
          *(_QWORD *)&v46 = WTF::MediaTime::operator-();
          *((_QWORD *)&v46 + 1) = v37;
          v11 = WTF::MediaTime::compare((WTF::MediaTime *)&v46, a3) == 1;
        }
        else
        {
          v11 = 1;
        }
LABEL_51:
        v38 = v43;
        if (v43)
        {
          v43 = 0;
          v44 = 0;
          WTF::fastFree(v38, v24);
        }
        return v11;
      }
    }
    else
    {
      __clrex();
    }
    v40 = v35;
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    v35 = v40;
    goto LABEL_48;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::MediaSourcePrivate::duration(WebCore::MediaSourcePrivate *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;

  v2 = (unsigned __int8 *)this + 64;
  if (__ldaxr((unsigned __int8 *)this + 64))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 64);
LABEL_5:
  v4 = *((_QWORD *)this + 9);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4;
}

uint64_t WebCore::MediaSourcePrivate::buffered@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  int v12;

  v2 = this;
  v4 = (unsigned __int8 *)(this + 64);
  if (__ldaxr((unsigned __int8 *)(this + 64)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](this + 64);
LABEL_5:
  v6 = *(unsigned int *)(v2 + 100);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v6;
  if ((_DWORD)v6)
  {
    if (v6 >> 27)
    {
      __break(0xC471u);
      return this;
    }
    this = WTF::fastMalloc((WTF *)(32 * v6));
    *(_DWORD *)(a2 + 8) = v6;
    *(_QWORD *)a2 = this;
    v7 = *(unsigned int *)(v2 + 100);
    if ((_DWORD)v7)
    {
      v8 = *(__int128 **)(v2 + 88);
      v9 = 32 * v7;
      do
      {
        v10 = *v8;
        v11 = v8[1];
        v8 += 2;
        *(_OWORD *)this = v10;
        *(_OWORD *)(this + 16) = v11;
        this += 32;
        v9 -= 32;
      }
      while (v9);
    }
  }
  v12 = __ldxr(v4);
  if (v12 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return this;
}

WebCore::MediaSourcePrivate *WebCore::MediaSourcePrivate::MediaSourcePrivate(WebCore::MediaSourcePrivate *this, WebCore::MediaSourcePrivateClient *a2)
{
  RefCountedSerialFunctionDispatcher *v4;

  v4 = (RefCountedSerialFunctionDispatcher *)WTF::RunLoop::current(this);
  return WebCore::MediaSourcePrivate::MediaSourcePrivate(this, a2, v4);
}

WebCore::MediaSourcePrivate *WebCore::MediaSourcePrivate::MediaSourcePrivate(WebCore::MediaSourcePrivate *this, WebCore::MediaSourcePrivateClient *a2, RefCountedSerialFunctionDispatcher *a3)
{
  uint64_t v6;
  WTF::MediaTime *v7;
  uint64_t v8;
  uint64_t v10;
  int v11;

  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_19689B170;
  *(_QWORD *)(v6 + 24) = this;
  *(_QWORD *)this = off_1E340E5B0;
  *((_QWORD *)this + 1) = v6;
  *((_DWORD *)this + 13) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_BYTE *)this + 48) = 0;
  v7 = (WTF::MediaTime *)(*((uint64_t (**)(RefCountedSerialFunctionDispatcher *))a3->var0 + 4))(a3);
  *((_QWORD *)this + 7) = a3;
  *((_BYTE *)this + 64) = 0;
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)WTF::MediaTime::invalidTime(v7);
  *((_QWORD *)this + 16) = 0;
  *((_WORD *)this + 60) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 34) = 10000000;
  *((_BYTE *)this + 140) = 1;
  v8 = *((_QWORD *)a2 + 1);
  if (!v8)
  {
    v10 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v8);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v8))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v8 + 24))
  {
    ++*(_QWORD *)(v8 + 16);
    v10 = v8;
  }
  else
  {
    v10 = 0;
  }
  v11 = __ldxr((unsigned __int8 *)v8);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v8))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_13:
  *((_QWORD *)this + 18) = v10;
  *((_QWORD *)this + 19) = a2;
  return this;
}

void WebCore::MediaSourcePrivate::~MediaSourcePrivate(WebCore::MediaSourcePrivate *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  int v17;

  *(_QWORD *)this = off_1E340E5B0;
  v3 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    if (__ldaxr((unsigned __int8 *)v3))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v3))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v3);
LABEL_6:
    v5 = *(_QWORD *)(v3 + 16) - 1;
    *(_QWORD *)(v3 + 16) = v5;
    if (!v5)
    {
      v6 = *(_QWORD *)(v3 + 8);
      v7 = __ldxr((unsigned __int8 *)v3);
      if (v7 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v3))
        {
          if (v6)
            goto LABEL_14;
LABEL_13:
          WTF::fastFree((WTF *)v3, a2);
          goto LABEL_14;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
      if (v6)
        goto LABEL_14;
      goto LABEL_13;
    }
    v17 = __ldxr((unsigned __int8 *)v3);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
LABEL_14:
  v8 = (WTF *)*((_QWORD *)this + 13);
  if (v8)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = (WTF *)*((_QWORD *)this + 11);
  if (v9)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  v11 = (WTF *)*((_QWORD *)this + 4);
  if (v11)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = *((unsigned int *)this + 7);
  if ((_DWORD)v12)
  {
    v13 = (uint64_t *)*((_QWORD *)this + 2);
    v14 = 8 * v12;
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v15 + 8));
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  v16 = (WTF *)*((_QWORD *)this + 2);
  if (v16)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v16, a2);
  }
}

uint64_t WebCore::MediaSourcePrivate::client@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v6;

  v3 = *(_QWORD *)(this + 144);
  if (!v3)
  {
    *a2 = 0;
    return this;
  }
  v4 = *(_QWORD *)(this + 152);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_7;
  }
  this = MEMORY[0x19AEA534C](v3);
LABEL_7:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  *a2 = v4;
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return this;
}

WTF::Lock *WebCore::MediaSourcePrivate::waitForTarget@<X0>(WebCore::MediaSourcePrivate *this@<X0>, const WebCore::SeekTarget *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  int v8;
  WTF::Lock *result;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  char v24;

  v4 = *((_QWORD *)this + 18);
  if (!v4)
    goto LABEL_16;
  v6 = (_QWORD *)*((_QWORD *)this + 19);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
    ++*(_QWORD *)(v4 + 8);
  else
    v6 = 0;
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v6)
        goto LABEL_12;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v6)
  {
LABEL_12:
    result = (WTF::Lock *)(*(uint64_t (**)(_QWORD *, const WebCore::SeekTarget *))(*v6 + 24))(v6, a2);
    v11 = v6[1];
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_22;
    }
    result = (WTF::Lock *)MEMORY[0x19AEA534C](v11);
LABEL_22:
    v16 = *(_QWORD *)(v11 + 8);
    v17 = v16 - 1;
    *(_QWORD *)(v11 + 8) = v16 - 1;
    if (v16 == 1)
    {
      v21 = *(_QWORD *)(v11 + 16);
      v18 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      v19 = v21 != 0;
    }
    else
    {
      v18 = 0;
      v19 = 1;
    }
    v20 = __ldxr((unsigned __int8 *)v11);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
        if (v17)
          return result;
LABEL_30:
        if (v18)
          result = (WTF::Lock *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        if (!v19)
          return (WTF::Lock *)WTF::fastFree((WTF *)v11, v10);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (WTF::Lock *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v17)
      return result;
    goto LABEL_30;
  }
LABEL_16:
  v24 = 1;
  v22 = 0uLL;
  *(_QWORD *)&v23 = "waitForTarget";
  *((_QWORD *)&v23 + 1) = 0;
  v13 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)v13 = off_1E335DEE0;
  v14 = v23;
  *(_OWORD *)(v13 + 16) = v22;
  *(_OWORD *)(v13 + 32) = v14;
  *(_BYTE *)(v13 + 48) = 0;
  *(_DWORD *)(v13 + 80) = 0;
  *(_QWORD *)(v13 + 88) = v13 + 104;
  *(_QWORD *)(v13 + 96) = 1;
  *(_QWORD *)(v13 + 112) = 0;
  *(_QWORD *)(v13 + 120) = 0;
  *(_WORD *)(v13 + 128) = 0;
  v15 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v13);
  if (*v15 && v15[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>((uint64_t)v15, 4u, "creating ", v13);
  *a3 = v13;
  return WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v13, &v24, (WTF::Logger::LogSiteIdentifier *)&v22);
}

WTF *WebCore::MediaSourcePrivate::seekToTime@<X0>(WebCore::MediaSourcePrivate *this@<X0>, const WTF::MediaTime *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  int v8;
  WTF *result;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  char v24;

  v4 = *((_QWORD *)this + 18);
  if (!v4)
    goto LABEL_16;
  v6 = (_QWORD *)*((_QWORD *)this + 19);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
    ++*(_QWORD *)(v4 + 8);
  else
    v6 = 0;
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v6)
        goto LABEL_12;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v6)
  {
LABEL_12:
    result = (WTF *)(*(uint64_t (**)(_QWORD *, const WTF::MediaTime *))(*v6 + 32))(v6, a2);
    v11 = v6[1];
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_22;
    }
    result = (WTF *)MEMORY[0x19AEA534C](v11);
LABEL_22:
    v16 = *(_QWORD *)(v11 + 8);
    v17 = v16 - 1;
    *(_QWORD *)(v11 + 8) = v16 - 1;
    if (v16 == 1)
    {
      v21 = *(_QWORD *)(v11 + 16);
      v18 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      v19 = v21 != 0;
    }
    else
    {
      v18 = 0;
      v19 = 1;
    }
    v20 = __ldxr((unsigned __int8 *)v11);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
        if (v17)
          return result;
LABEL_30:
        if (v18)
          result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        if (!v19)
          return (WTF *)WTF::fastFree((WTF *)v11, v10);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v17)
      return result;
    goto LABEL_30;
  }
LABEL_16:
  v24 = 1;
  v22 = 0uLL;
  *(_QWORD *)&v23 = "seekToTime";
  *((_QWORD *)&v23 + 1) = 0;
  v13 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)v13 = off_1E3207198;
  v14 = v23;
  *(_OWORD *)(v13 + 16) = v22;
  *(_OWORD *)(v13 + 32) = v14;
  *(_BYTE *)(v13 + 48) = 0;
  *(_DWORD *)(v13 + 64) = 0;
  *(_QWORD *)(v13 + 72) = v13 + 88;
  *(_QWORD *)(v13 + 80) = 1;
  *(_QWORD *)(v13 + 96) = 0;
  *(_QWORD *)(v13 + 104) = 0;
  *(_WORD *)(v13 + 112) = 0;
  v15 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v13);
  if (*v15 && v15[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v15, 4u, "creating ", v13);
  *a3 = v13;
  return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v13, &v24, (WTF::Logger::LogSiteIdentifier *)&v22);
}

WebCore::SourceBufferPrivate **WebCore::MediaSourcePrivate::removeSourceBuffer(WebCore::SourceBufferPrivate **this, unsigned __int8 **a2)
{
  WebCore::SourceBufferPrivate ***v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  WebCore::SourceBufferPrivate **v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::SourceBufferPrivate *v10;
  WebCore::SourceBufferPrivate **v11;

  v3 = (WebCore::SourceBufferPrivate ***)this;
  v4 = *((unsigned int *)this + 11);
  if ((_DWORD)v4)
  {
    this = (WebCore::SourceBufferPrivate **)this[4];
    v5 = 8 * v4 - 8;
    while (*this != (WebCore::SourceBufferPrivate *)a2)
    {
      ++this;
      v5 -= 8;
      if (v5 == -8)
        goto LABEL_7;
    }
    memmove(this, this + 1, v5);
    --*((_DWORD *)v3 + 11);
    this = (WebCore::SourceBufferPrivate **)((uint64_t (*)(WebCore::SourceBufferPrivate ***))(*v3)[6])(v3);
  }
LABEL_7:
  v6 = *((unsigned int *)v3 + 7);
  if ((_DWORD)v6)
  {
    v7 = v3[2];
    if (*v7 == (WebCore::SourceBufferPrivate *)a2)
    {
      v8 = 0;
LABEL_14:
      v11 = &v7[v8];
      *v11 = 0;
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(a2[1]);
      this = (WebCore::SourceBufferPrivate **)memmove(v11, v11 + 1, (char *)&v3[2][*((unsigned int *)v3 + 7)] - (char *)(v11 + 1));
      --*((_DWORD *)v3 + 7);
    }
    else
    {
      v8 = 0;
      v9 = v6 - 1;
      while (v9 != v8)
      {
        v10 = v7[++v8];
        if (v10 == (WebCore::SourceBufferPrivate *)a2)
          goto LABEL_14;
      }
    }
  }
  return this;
}

char **WebCore::MediaSourcePrivate::sourceBufferPrivateDidChangeActiveState(WebCore::MediaSourcePrivate *this, WebCore::SourceBufferPrivate *a2, int a3)
{
  char **result;
  uint64_t v5;
  char *v6;
  size_t v7;
  char *v8;
  WebCore::SourceBufferPrivate *v9;

  result = (char **)((char *)this + 32);
  v5 = *((unsigned int *)this + 11);
  if ((_DWORD)v5)
  {
    v6 = *result;
    v7 = 8 * v5 - 8;
    while (*(WebCore::SourceBufferPrivate **)v6 != a2)
    {
      v6 += 8;
      v7 -= 8;
      if (v7 == -8)
        goto LABEL_5;
    }
    if ((a3 & 1) == 0)
    {
      memmove(v6, v6 + 8, v7);
      --*((_DWORD *)this + 11);
      return (char **)(*(uint64_t (**)(WebCore::MediaSourcePrivate *))(*(_QWORD *)this + 48))(this);
    }
  }
  else
  {
LABEL_5:
    if (a3)
    {
      v9 = a2;
      if ((_DWORD)v5 == *((_DWORD *)this + 10))
      {
        v8 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v5 + 1, (unint64_t)&v9);
        v5 = *((unsigned int *)this + 11);
        *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v5) = *(_QWORD *)v8;
      }
      else
      {
        *(_QWORD *)&(*result)[8 * v5] = a2;
      }
      *((_DWORD *)this + 11) = v5 + 1;
      return (char **)(*(uint64_t (**)(WebCore::MediaSourcePrivate *))(*(_QWORD *)this + 48))(this);
    }
  }
  return result;
}

BOOL WebCore::MediaSourcePrivate::hasAudio(WebCore::MediaSourcePrivate *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  BOOL v6;

  v1 = *((unsigned int *)this + 11);
  if (!(_DWORD)v1)
    return 0;
  v2 = (uint64_t *)*((_QWORD *)this + 4);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = *(_BYTE *)(v4 + 72) != 0;
    if (*(_BYTE *)(v4 + 72))
      v6 = 1;
    else
      v6 = v3 == 0;
    v3 -= 8;
  }
  while (!v6);
  return result;
}

BOOL WebCore::MediaSourcePrivate::hasVideo(WebCore::MediaSourcePrivate *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  BOOL v6;

  v1 = *((unsigned int *)this + 11);
  if (!(_DWORD)v1)
    return 0;
  v2 = (uint64_t *)*((_QWORD *)this + 4);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = *(_BYTE *)(v4 + 73) != 0;
    if (*(_BYTE *)(v4 + 73))
      v6 = 1;
    else
      v6 = v3 == 0;
    v3 -= 8;
  }
  while (!v6);
  return result;
}

uint64_t WebCore::MediaSourcePrivate::durationChanged(WebCore::MediaSourcePrivate *this, const WTF::MediaTime *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  int v9;
  _QWORD *v10;
  uint64_t result;
  __int128 v12;
  _QWORD *v13;

  v4 = (unsigned __int8 *)this + 64;
  if (__ldaxr((unsigned __int8 *)this + 64))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 64);
LABEL_5:
  v6 = *(_QWORD *)a2;
  *(_QWORD *)((char *)this + 77) = *(_QWORD *)((char *)a2 + 5);
  *((_QWORD *)this + 9) = v6;
  LODWORD(v6) = __ldxr(v4);
  if ((_DWORD)v6 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v4))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v7 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_14:
  ++*(_QWORD *)(v7 + 8);
  v9 = __ldxr((unsigned __int8 *)v7);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  *(_QWORD *)&v12 = *(_QWORD *)a2;
  *(_QWORD *)((char *)&v12 + 5) = *(_QWORD *)((char *)a2 + 5);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v10 = &off_1E340EBD0;
  v10[1] = this;
  v10[2] = this;
  v10[3] = v12;
  *(_QWORD *)((char *)v10 + 29) = *(_QWORD *)((char *)&v12 + 5);
  v13 = v10;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 7) + 24))(*((_QWORD *)this + 7)))
  {
    (*(void (**)(_QWORD *))(*v10 + 16))(v10);
    v13 = 0;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD **))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7), &v13);
    v10 = v13;
    v13 = 0;
    if (!v10)
      return result;
  }
  return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
}

uint64_t WebCore::MediaSourcePrivate::ensureOnDispatcher(uint64_t a1, _QWORD *a2)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56)))
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    return (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), a2);
}

WTF *WebCore::MediaSourcePrivate::bufferedChanged(WebCore::MediaSourcePrivate *this, const WebCore::PlatformTimeRanges *a2)
{
  unsigned __int8 *v4;
  WTF *result;
  int v7;

  v4 = (unsigned __int8 *)this + 64;
  if (__ldaxr((unsigned __int8 *)this + 64))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 64);
LABEL_5:
  result = WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WebCore::MediaSourcePrivate *)((char *)this + 88), a2);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

BOOL WebCore::MediaSourcePrivate::hasBufferedData(WebCore::MediaSourcePrivate *this)
{
  unsigned __int8 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int8 *)this + 64;
  if (__ldaxr((unsigned __int8 *)this + 64))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 64);
LABEL_5:
  v4 = *((_DWORD *)this + 25);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 != 0;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 != 0;
}

WTF *WebCore::MediaSourcePrivate::seekable@<X0>(WebCore::MediaSourcePrivate *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  WTF::MediaTime *v6;
  void *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  __int128 *v17;
  WebCore::PlatformTimeRanges *v18;
  unsigned int v19;
  WTF *v20;
  int v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 v26;
  WTF::MediaTime *v27;
  __int128 *v28;
  __int128 *v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF::MediaTime *v34;
  __int128 *v35;
  unint64_t v36;
  WTF *v37;
  WTF *result;
  unint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  WTF *v47;
  uint64_t v48;
  WTF *v49;
  unint64_t v50;
  _BYTE v51[13];
  __int128 v52;
  char v53;

  v50 = 0;
  *(_QWORD *)v51 = 0;
  *(_DWORD *)&v51[8] = 10000000;
  v51[12] = 1;
  v48 = 0;
  v49 = 0;
  v47 = 0;
  v4 = (unsigned __int8 *)this + 64;
  if (__ldaxr((unsigned __int8 *)this + 64))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 64);
LABEL_5:
  *(_QWORD *)v51 = *((_QWORD *)this + 9);
  *(_QWORD *)&v51[5] = *(_QWORD *)((char *)this + 77);
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)&v49, (WebCore::MediaSourcePrivate *)((char *)this + 88));
  v6 = WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)&v47, (WebCore::MediaSourcePrivate *)((char *)this + 104));
  v8 = __ldxr(v4);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v4))
LABEL_9:
    v6 = (WTF::MediaTime *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if ((v51[12] & 1) == 0)
  {
    v9 = atomic_load(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey);
    if (v9 != -1)
    {
      *(_QWORD *)&v52 = &v53;
      *(_QWORD *)&v46 = &v52;
      std::__call_once(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey, &v46, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformTimeRanges::emptyRanges(void)::$_0 &&>>);
    }
    v10 = dword_1EE2F8C6C;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v10;
    if ((_DWORD)v10)
    {
      if (!(v10 >> 27))
      {
        v11 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v10));
        *(_DWORD *)(a2 + 8) = v10;
        *(_QWORD *)a2 = v11;
        if (dword_1EE2F8C6C)
        {
          v12 = (__int128 *)WebCore::PlatformTimeRanges::emptyRanges(void)::emptyRanges;
          v13 = 32 * dword_1EE2F8C6C;
          do
          {
            v14 = *v12;
            v15 = v12[1];
            v12 += 2;
            *v11 = v14;
            v11[1] = v15;
            v11 += 2;
            v13 -= 32;
          }
          while (v13);
        }
        goto LABEL_44;
      }
LABEL_62:
      __break(0xC471u);
      JUMPOUT(0x19619DDBCLL);
    }
    goto LABEL_44;
  }
  if ((v51[12] & 4) == 0)
  {
    v16 = (__int128 *)WTF::MediaTime::zeroTime(v6);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v17 = (__int128 *)v51;
    v18 = (WebCore::PlatformTimeRanges *)a2;
LABEL_21:
    WebCore::PlatformTimeRanges::add(v18, v16, v17, 0);
    goto LABEL_44;
  }
  if (HIDWORD(v48))
  {
    v19 = HIDWORD(v50);
    *(_QWORD *)&v52 = 0;
    DWORD2(v52) = 0;
    HIDWORD(v52) = HIDWORD(v50);
    if (HIDWORD(v50))
    {
      if (HIDWORD(v50) >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x19619DDC4);
      }
      v20 = (WTF *)WTF::fastMalloc((WTF *)(32 * HIDWORD(v50)));
      DWORD2(v52) = v19;
      *(_QWORD *)&v52 = v20;
      v21 = HIDWORD(v50);
      if (HIDWORD(v50))
      {
        v22 = 0;
        v23 = v49;
        v24 = 32 * HIDWORD(v50);
        do
        {
          v25 = (_OWORD *)((char *)v20 + v22);
          v26 = *(_OWORD *)((char *)v23 + v22 + 16);
          *v25 = *(_OWORD *)((char *)v23 + v22);
          v25[1] = v26;
          v22 += 32;
        }
        while (v24 != v22);
      }
    }
    else
    {
      v21 = 0;
      v20 = 0;
    }
    v30 = v19;
    if (HIDWORD(v48))
    {
      v31 = 0;
      v32 = 16;
      do
      {
        WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v52, (__int128 *)((char *)v47 + v32 - 16), (__int128 *)((char *)v47 + v32), 0);
        ++v31;
        v32 += 32;
      }
      while (v31 < HIDWORD(v48));
      v20 = (WTF *)v52;
      v30 = DWORD2(v52);
      v19 = HIDWORD(v52);
      v21 = HIDWORD(v50);
    }
    v33 = v49;
    v49 = v20;
    v50 = __PAIR64__(v19, v30);
    HIDWORD(v52) = v21;
    if (v33)
    {
      *(_QWORD *)&v52 = 0;
      DWORD2(v52) = 0;
      v20 = (WTF *)WTF::fastFree(v33, v7);
      v19 = HIDWORD(v50);
    }
    if (v19)
    {
      v52 = *(_OWORD *)v49;
    }
    else
    {
      v34 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v20);
      v19 = HIDWORD(v50);
      v52 = *(_OWORD *)v34;
      if (!HIDWORD(v50))
      {
        v35 = (__int128 *)WTF::MediaTime::invalidTime(v34);
        goto LABEL_43;
      }
    }
    v35 = (__int128 *)((char *)v49 + 32 * v19 - 16);
LABEL_43:
    v46 = *v35;
    WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v49, &v52, &v46, 0);
    *(_QWORD *)a2 = v49;
    v36 = v50;
    v49 = 0;
    v50 = 0;
    *(_QWORD *)(a2 + 8) = v36;
    goto LABEL_44;
  }
  if (HIDWORD(v50))
  {
    v27 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v6);
    v28 = (__int128 *)v27;
    if (HIDWORD(v50))
      v29 = (__int128 *)((char *)v49 + 32 * (HIDWORD(v50) - 1) + 16);
    else
      v29 = (__int128 *)WTF::MediaTime::invalidTime(v27);
    v52 = *v29;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v17 = &v52;
    v18 = (WebCore::PlatformTimeRanges *)a2;
    v16 = v28;
    goto LABEL_21;
  }
  v39 = atomic_load(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey);
  if (v39 != -1)
  {
    *(_QWORD *)&v52 = &v53;
    *(_QWORD *)&v46 = &v52;
    std::__call_once(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey, &v46, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformTimeRanges::emptyRanges(void)::$_0 &&>>);
  }
  v40 = dword_1EE2F8C6C;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v40;
  if ((_DWORD)v40)
  {
    if (v40 >> 27)
      goto LABEL_62;
    v41 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v40));
    *(_DWORD *)(a2 + 8) = v40;
    *(_QWORD *)a2 = v41;
    if (dword_1EE2F8C6C)
    {
      v42 = (__int128 *)WebCore::PlatformTimeRanges::emptyRanges(void)::emptyRanges;
      v43 = 32 * dword_1EE2F8C6C;
      do
      {
        v44 = *v42;
        v45 = v42[1];
        v42 += 2;
        *v41 = v44;
        v41[1] = v45;
        v41 += 2;
        v43 -= 32;
      }
      while (v43);
    }
  }
LABEL_44:
  v37 = v47;
  if (v47)
  {
    v47 = 0;
    LODWORD(v48) = 0;
    WTF::fastFree(v37, v7);
  }
  result = v49;
  if (v49)
  {
    v49 = 0;
    LODWORD(v50) = 0;
    return (WTF *)WTF::fastFree(result, v7);
  }
  return result;
}

WTF *WebCore::MediaSourcePrivate::setLiveSeekableRange(WebCore::MediaSourcePrivate *this, const WebCore::PlatformTimeRanges *a2)
{
  unsigned __int8 *v4;
  WTF *result;
  int v7;

  v4 = (unsigned __int8 *)this + 64;
  if (__ldaxr((unsigned __int8 *)this + 64))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 64);
LABEL_5:
  result = WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WebCore::MediaSourcePrivate *)((char *)this + 104), a2);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

unsigned __int8 *WebCore::MediaSourcePrivate::clearLiveSeekableRange(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v5;

  v2 = this;
  v3 = this + 64;
  if (__ldaxr(this + 64))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this + 64);
LABEL_5:
  if (*((_DWORD *)v2 + 28))
  {
    if (*((_DWORD *)v2 + 29))
      *((_DWORD *)v2 + 29) = 0;
    this = (unsigned __int8 *)*((_QWORD *)v2 + 13);
    if (this)
    {
      *((_QWORD *)v2 + 13) = 0;
      *((_DWORD *)v2 + 28) = 0;
      this = (unsigned __int8 *)WTF::fastFree((WTF *)this, a2);
    }
  }
  v5 = __ldxr(v3);
  if (v5 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return this;
}

uint64_t WebCore::MediaSourcePrivate::liveSeekableRange(WebCore::MediaSourcePrivate *this)
{
  unsigned __int8 *v2;
  int v4;

  v2 = (unsigned __int8 *)this + 64;
  if (__ldaxr((unsigned __int8 *)this + 64))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 64);
LABEL_5:
  v4 = __ldxr(v2);
  if (v4 == 1)
  {
    if (!__stlxr(0, v2))
      return (uint64_t)this + 104;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return (uint64_t)this + 104;
}

uint64_t WebCore::MediaSourcePrivate::setCDMSession(uint64_t this, WebCore::LegacyCDMSession *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(this + 28);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(this + 16);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      this = (*(uint64_t (**)(uint64_t, WebCore::LegacyCDMSession *))(*(_QWORD *)v6 + 384))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

uint64_t WebCore::MediaSourcePrivate::currentTime(WebCore::MediaSourcePrivate *this)
{
  uint64_t v1;
  WTF::MediaTime *v2;
  WTF::MediaTime *v4;

  (*(void (**)(WTF::MediaTime **__return_ptr))(*(_QWORD *)this + 16))(&v4);
  if (!v4)
    return *(_QWORD *)WTF::MediaTime::invalidTime(0);
  v1 = (*(uint64_t (**)(WTF::MediaTime *))(*(_QWORD *)v4 + 344))(v4);
  v2 = v4;
  v4 = 0;
  if (v2)
    (*(void (**)(WTF::MediaTime *))(*(_QWORD *)v2 + 24))(v2);
  return v1;
}

uint64_t WebCore::MediaSourcePrivate::timeIsProgressing(WebCore::MediaSourcePrivate *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v4);
  if (!v4)
    return 0;
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 360))(v4);
  v2 = v4;
  v4 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v1;
}

__n128 WebCore::Model::create@<Q0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  uint64_t v12;
  __int128 v13;

  v8 = WTF::fastMalloc((WTF *)0x40);
  v9 = *a2;
  *a2 = 0;
  v10 = *a3;
  *a3 = 0;
  result = *(__n128 *)(a3 + 1);
  *((_DWORD *)a3 + 2) = result.n128_u32[0] & 0xFFFFFFFE;
  *(_DWORD *)v8 = 1;
  v12 = *a1;
  *a1 = 0;
  *(_QWORD *)(v8 + 8) = v12;
  *(_QWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 24) = v10;
  v13 = *(_OWORD *)(a3 + 3);
  *(__n128 *)(v8 + 32) = result;
  *(_OWORD *)(v8 + 48) = v13;
  *a4 = v8;
  return result;
}

void WebCore::Model::~Model(WebCore::Model *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)this + 1, a2);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)this + 1, a2);
}

uint64_t WebCore::NamedImageGeneratedImage::draw(uint64_t a1, uint64_t a2, float *a3, float *a4, unsigned int a5)
{
  int v10;
  int v11;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t (**v18)();
  uint64_t v20;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  v10 = (a5 >> 8) & 0xF;
  v11 = a5 & 0x1F;
  if (*(unsigned __int8 *)(a2 + 194) != v10 || *(unsigned __int8 *)(a2 + 195) != v11)
  {
    *(_WORD *)(a2 + 194) = v10 | ((_WORD)v11 << 8);
    *(_DWORD *)(a2 + 184) |= 0x20u;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
  (*(void (**)(uint64_t, float *))(*(_QWORD *)a2 + 456))(a2, a3);
  (*(void (**)(uint64_t, float, float))(*(_QWORD *)a2 + 648))(a2, *a3, a3[1]);
  v13 = a3[2];
  v14 = a3[3];
  v15 = a4[2];
  v16 = a4[3];
  if (v13 != v15 || v14 != v16)
  {
    *(float *)&v20 = v13 / v15;
    *((float *)&v20 + 1) = v14 / v16;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 632))(a2, &v20);
  }
  (*(void (**)(uint64_t, float, float))(*(_QWORD *)a2 + 648))(a2, -*a4, -a4[1]);
  {
    v18 = (uint64_t (**)())WebCore::Theme::singleton(void)::theme;
  }
  else
  {
    v18 = &off_1E3354DA0;
    WebCore::Theme::singleton(void)::theme = (uint64_t)&off_1E3354DA0;
  }
  v20 = *((_QWORD *)a3 + 1);
  ((void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))v18[5])(&WebCore::Theme::singleton(void)::theme, a1 + 72, a2, &v20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  return 3;
}

uint64_t WebCore::NamedImageGeneratedImage::drawPattern(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t (**v19)();
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char **v32;
  char *v33;

  v30 = *(_QWORD *)(a1 + 64);
  v16 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v16 != -1)
  {
    v33 = &v31;
    v32 = &v33;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v32, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  (*(void (**)(char **__return_ptr, uint64_t, uint64_t *, uint64_t *, _QWORD))(*(_QWORD *)a2 + 336))(&v33, a2, &v30, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0);
  result = (uint64_t)v33;
  if (v33)
  {
    v18 = (*(uint64_t (**)(char *))(*(_QWORD *)v33 + 16))(v33);
    {
      v19 = (uint64_t (**)())WebCore::Theme::singleton(void)::theme;
    }
    else
    {
      v19 = &off_1E3354DA0;
      WebCore::Theme::singleton(void)::theme = (uint64_t)&off_1E3354DA0;
    }
    v32 = *(char ***)(a1 + 64);
    ((void (*)(uint64_t *, uint64_t, uint64_t, char ***))v19[5])(&WebCore::Theme::singleton(void)::theme, a1 + 72, v18, &v32);
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 416))(a2, v33, a3, a4, a5, a6, a7, *(_QWORD *)&a8 & 0xFFFFFFLL, v30);
    v21 = v33;
    v33 = 0;
    if (v21)
    {
      v22 = *((_QWORD *)v21 + 1);
      if (__ldaxr((unsigned __int8 *)v22))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v22))
      {
        goto LABEL_11;
      }
      result = MEMORY[0x19AEA534C](v22);
LABEL_11:
      v24 = *(_QWORD *)(v22 + 8);
      v25 = v24 - 1;
      *(_QWORD *)(v22 + 8) = v24 - 1;
      if (v24 == 1)
      {
        v29 = *(_QWORD *)(v22 + 16);
        v26 = *(_QWORD *)(v22 + 24);
        *(_QWORD *)(v22 + 24) = 0;
        v27 = v29 != 0;
      }
      else
      {
        v26 = 0;
        v27 = 1;
      }
      v28 = __ldxr((unsigned __int8 *)v22);
      if (v28 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v22))
        {
          if (v25)
            return result;
LABEL_19:
          if (v26)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          if (!v27)
            return WTF::fastFree((WTF *)v22, v20);
          return result;
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v22);
      if (v25)
        return result;
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t WebCore::NamedImageGeneratedImage::dump(WebCore::NamedImageGeneratedImage *this, WTF::TextStream *a2)
{
  WebCore::Image::dump(this, a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(a2);
}

_QWORD *WebCore::NativeImageBackend::NativeImageBackend(_QWORD *this)
{
  *this = off_1E340E7C8;
  return this;
}

uint64_t WebCore::NativeImageBackend::isRemoteNativeImageBackendProxy(WebCore::NativeImageBackend *this)
{
  return 0;
}

_QWORD *WebCore::PlatformImageNativeImageBackend::PlatformImageNativeImageBackend(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E340E810;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E340E810;
  result[1] = v2;
  return result;
}

uint64_t WebCore::NativeImage::replaceBackend(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::NativeImageSource::dump(WebCore::NativeImageSource *this, WTF::TextStream *a2)
{
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(a2);
}

uint64_t WebCore::NativeImageSource::size(uint64_t a1)
{
  return *(_QWORD *)(a1 + 20);
}

double WebCore::NullImageBufferBackend::create@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  double result;
  int v7;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = *(_QWORD *)a1;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 8);
  v5 = *(const void **)(a1 + 16);
  *(_QWORD *)(v4 + 24) = v5;
  if (v5)
    CFRetain(v5);
  *(_WORD *)(v4 + 32) = *(_WORD *)(a1 + 24);
  *(_QWORD *)v4 = &off_1E340EA10;
  v7 = 0;
  *(_QWORD *)(v4 + 40) = off_1E340BA10;
  WebCore::GraphicsContextState::GraphicsContextState(v4 + 48, &v7, 0);
  *(_QWORD *)(v4 + 392) = v4 + 408;
  *(_QWORD *)&result = 1;
  *(_QWORD *)(v4 + 400) = 1;
  *(_DWORD *)(v4 + 752) = 0;
  *(_BYTE *)(v4 + 756) &= 0xFCu;
  *(_QWORD *)(v4 + 40) = off_1E33FFA58;
  *(_BYTE *)(v4 + 757) = 0;
  *a2 = v4;
  return result;
}

void WebCore::NullImageBufferBackend::~NullImageBufferBackend(WebCore::NullImageBufferBackend *this, void *a2)
{
  unsigned int v3;
  WTF *v4;
  const void *v6;

  *((_QWORD *)this + 5) = off_1E340BA10;
  v3 = *((_DWORD *)this + 101);
  if (v3)
    WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct(*((unsigned int **)this + 49), (unsigned int *)(*((_QWORD *)this + 49) + 344 * v3));
  v4 = (WTF *)*((_QWORD *)this + 49);
  if ((WebCore::NullImageBufferBackend *)((char *)this + 408) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 49) = 0;
    *((_DWORD *)this + 100) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::NullImageBufferBackend *)((char *)this + 48), a2);
  *(_QWORD *)this = off_1E340D390;
  v6 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    CFRelease(v6);
}

{
  unsigned int v3;
  WTF *v4;
  const void *v6;

  *((_QWORD *)this + 5) = off_1E340BA10;
  v3 = *((_DWORD *)this + 101);
  if (v3)
    WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct(*((unsigned int **)this + 49), (unsigned int *)(*((_QWORD *)this + 49) + 344 * v3));
  v4 = (WTF *)*((_QWORD *)this + 49);
  if ((WebCore::NullImageBufferBackend *)((char *)this + 408) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 49) = 0;
    *((_DWORD *)this + 100) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::NullImageBufferBackend *)((char *)this + 48), a2);
  *(_QWORD *)this = off_1E340D390;
  v6 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    CFRelease(v6);
}

{
  unsigned int v3;
  WTF *v4;
  const void *v6;

  *((_QWORD *)this + 5) = off_1E340BA10;
  v3 = *((_DWORD *)this + 101);
  if (v3)
    WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct(*((unsigned int **)this + 49), (unsigned int *)(*((_QWORD *)this + 49) + 344 * v3));
  v4 = (WTF *)*((_QWORD *)this + 49);
  if ((WebCore::NullImageBufferBackend *)((char *)this + 408) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 49) = 0;
    *((_DWORD *)this + 100) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::NullImageBufferBackend *)((char *)this + 48), a2);
  *(_QWORD *)this = off_1E340D390;
  v6 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    CFRelease(v6);
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::NullImageBufferBackend::context(WebCore::NullImageBufferBackend *this)
{
  return (uint64_t)this + 40;
}

void WebCore::NullImageBufferBackend::copyNativeImage(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::NullImageBufferBackend::createNativeImageReference(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::NullImageBufferBackend::getPixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  bzero(*(void **)(a3 + 40), *(_QWORD *)(a3 + 48));
}

uint64_t WebCore::NullImageBufferBackend::bytesPerRow(WebCore::NullImageBufferBackend *this)
{
  return 0;
}

uint64_t WebCore::NullImageBufferBackend::canMapBackingStore(WebCore::NullImageBufferBackend *this)
{
  return 0;
}

WTF::StringImpl *WebCore::NullImageBufferBackend::debugDescription(WebCore::NullImageBufferBackend *this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  char v7;
  int v8;
  __int16 v9;
  int v10;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 1;
  v8 = 0;
  v9 = 256;
  v10 = 0;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::release((WTF::TextStream *)&v4);
  v2 = v5;
  v5 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v1);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Path::Path(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  unsigned int **v8;
  unsigned int *v9;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;

  *(_DWORD *)(a1 + 64) = 0;
  v4 = *((_DWORD *)a2 + 3);
  if (v4 == 1)
  {
    v15 = (__int128 *)*a2;
    *(_DWORD *)(a1 + 64) = -1;
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    *(_QWORD *)(a1 + 56) = *((_QWORD *)v15 + 6);
    *(_OWORD *)(a1 + 40) = v18;
    *(_OWORD *)(a1 + 24) = v17;
    *(_OWORD *)(a1 + 8) = v16;
    v11 = 1;
    goto LABEL_9;
  }
  if (!v4)
    return a1;
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = off_1E340EC98;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  v6 = (__int128 *)*a2;
  *a2 = 0;
  *(_QWORD *)(v5 + 16) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(v5 + 24) = (_DWORD)v6;
  LODWORD(v6) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(v5 + 28) = (_DWORD)v6;
  v7 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v7 == -1)
  {
LABEL_8:
    *(_QWORD *)(a1 + 8) = v5;
    v11 = 2;
LABEL_9:
    *(_DWORD *)(a1 + 64) = v11;
    return a1;
  }
  v8 = (unsigned int **)(a1 + 8);
  if ((_DWORD)v7 != 2)
  {
    ((void (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v7])(&v19, v8);
    goto LABEL_8;
  }
  v9 = *v8;
  *v8 = (unsigned int *)v5;
  if (v9)
  {
    v12 = v9 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  return a1;
}

uint64_t WebCore::Path::Path(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = result;
  *(_DWORD *)(result + 64) = 0;
  v3 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 == -1)
  {
    *(_DWORD *)(result + 64) = -1;
  }
  else
  {
    v4 = result + 8;
    ((void (*)(uint64_t *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v3])(&v4, result + 8, a2 + 8);
    return v2;
  }
  return result;
}

__n128 WebCore::Path::Path(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_DWORD *)(a1 + 64) = -1;
  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  *(__n128 *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 64) = 1;
  return result;
}

{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_DWORD *)(a1 + 64) = -1;
  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  *(__n128 *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 64) = 1;
  return result;
}

uint64_t WebCore::Path::ensurePlatformPathImpl(WebCore::Path *this)
{
  unsigned int *v1;
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int **v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int **v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (!this)
    goto LABEL_26;
  v3 = *((_DWORD *)this + 16);
  if (v3 == 1)
  {
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)v4 = off_1E3412578;
    *(_QWORD *)(v4 + 16) = CGPathCreateMutable();
    v53 = *((_QWORD *)this + 7);
    v5 = *(_OWORD *)((char *)this + 40);
    v51 = *(_OWORD *)((char *)this + 24);
    v52 = v5;
    v50 = *(_OWORD *)((char *)this + 8);
    v44 = v4;
    v45 = v4;
    v46 = v4;
    v47 = v4;
    v48 = v4;
    if (HIDWORD(v53) != -1)
    {
      v49 = &v44;
      ((void (*)(uint64_t **, __int128 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore8PathImpl10addSegmentENS8_11PathSegmentEEUlOT_E_JZNS9_10addSegmentESA_EUlNS8_12PathDataLineEE_ZNS9_10addSegmentESA_EUlNS8_17PathDataQuadCurveEE_ZNS9_10addSegmentESA_EUlNS8_19PathDataBezierCurveEE_ZNS9_10addSegmentESA_EUlNS8_11PathDataArcEE_EEEEEJNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectESE_SG_SI_SK_NS8_16PathCloseSubpathEEEEEEEDcSC_DpOT0____fmatrix
                                                    + HIDWORD(v53)))(&v49, &v50);
      v6 = *((unsigned int *)this + 16);
      if ((_DWORD)v6 != -1)
      {
        v7 = (unsigned int **)((char *)this + 8);
        if ((_DWORD)v6 == 2)
        {
          v8 = *v7;
          *v7 = (unsigned int *)v4;
          if (v8)
          {
            v9 = v8 + 2;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v8 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
            }
          }
LABEL_40:
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4))
            goto LABEL_64;
          return v4;
        }
        ((void (*)(__int128 *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v6])(&v50, v7);
      }
      *((_QWORD *)this + 1) = v4;
      *((_DWORD *)this + 16) = 2;
      goto LABEL_40;
    }
    goto LABEL_62;
  }
  if (v3 != 2)
    goto LABEL_26;
  v12 = (unsigned int **)((char *)this + 8);
  v13 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 8));
  v1 = (unsigned int *)*((_QWORD *)this + 1);
  if (v13 != 1)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD))(*(_QWORD *)v1 + 24))(&v50, *((_QWORD *)this + 1));
    v32 = (unsigned int *)v50;
    *(_QWORD *)&v50 = 0;
    v33 = *v12;
    *v12 = v32;
    if (v33)
    {
      v34 = v33 + 2;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        atomic_store(1u, v33 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
      }
      v37 = (unsigned int *)v50;
      *(_QWORD *)&v50 = 0;
      if (v37)
      {
        v38 = v37 + 2;
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v37 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 8))(v37);
        }
      }
    }
    v1 = *v12;
  }
  if (!v1)
  {
LABEL_26:
    WebCore::PathCG::create((uint64_t *)&v50);
    v4 = v50;
    *(_QWORD *)&v50 = 0;
    v24 = *((unsigned int *)this + 16);
    if ((_DWORD)v24 != -1)
    {
      v25 = (unsigned int **)((char *)this + 8);
      if ((_DWORD)v24 == 2)
      {
        v26 = *v25;
        *v25 = (unsigned int *)v4;
        if (v26)
        {
          v27 = v26 + 2;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            atomic_store(1u, v26 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
          }
        }
        goto LABEL_35;
      }
      ((void (*)(uint64_t *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v24])(&v44, v25);
    }
    *((_QWORD *)this + 1) = v4;
    *((_DWORD *)this + 16) = 2;
LABEL_35:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4))
    {
      __break(0xC471u);
      JUMPOUT(0x19619F258);
    }
    v30 = (unsigned int *)v50;
    *(_QWORD *)&v50 = 0;
    if (v30)
    {
      v41 = v30 + 2;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
      {
        atomic_store(1u, v30 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
      }
    }
    return v4;
  }
  if (!(*(unsigned int (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1))
    goto LABEL_63;
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3412578;
  *(_QWORD *)(v4 + 16) = CGPathCreateMutable();
  v14 = v1[7];
  if (!(_DWORD)v14)
  {
LABEL_19:
    v19 = *((unsigned int *)this + 16);
    if ((_DWORD)v19 != -1)
    {
      if ((_DWORD)v19 == 2)
      {
        v20 = *v12;
        *v12 = (unsigned int *)v4;
        if (v20)
        {
          v21 = v20 + 2;
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, v20 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
          }
        }
        goto LABEL_46;
      }
      ((void (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v19])(&v50, (char *)this + 8);
    }
    *((_QWORD *)this + 1) = v4;
    *((_DWORD *)this + 16) = 2;
LABEL_46:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4))
    {
      __break(0xC471u);
      JUMPOUT(0x19619F1ACLL);
    }
    return v4;
  }
  v1 = (unsigned int *)*((_QWORD *)v1 + 2);
  v15 = 56 * v14;
  while (1)
  {
    v16 = *(_OWORD *)v1;
    v17 = *((_OWORD *)v1 + 1);
    v18 = *((_OWORD *)v1 + 2);
    v53 = *((_QWORD *)v1 + 6);
    v51 = v17;
    v52 = v18;
    v50 = v16;
    v44 = v4;
    v45 = v4;
    v46 = v4;
    v47 = v4;
    v48 = v4;
    if (HIDWORD(v53) == -1)
      break;
    v49 = &v44;
    ((void (*)(uint64_t **, __int128 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore8PathImpl10addSegmentENS8_11PathSegmentEEUlOT_E_JZNS9_10addSegmentESA_EUlNS8_12PathDataLineEE_ZNS9_10addSegmentESA_EUlNS8_17PathDataQuadCurveEE_ZNS9_10addSegmentESA_EUlNS8_19PathDataBezierCurveEE_ZNS9_10addSegmentESA_EUlNS8_11PathDataArcEE_EEEEEJNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectESE_SG_SI_SK_NS8_16PathCloseSubpathEEEEEEEDcSC_DpOT0____fmatrix
                                                  + HIDWORD(v53)))(&v49, &v50);
    v1 += 14;
    v15 -= 56;
    if (!v15)
      goto LABEL_19;
  }
LABEL_62:
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_63:
  v4 = (uint64_t)v1;
  if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1))
  {
LABEL_64:
    __break(0xC471u);
    JUMPOUT(0x19619F124);
  }
  return v4;
}

uint64_t WebCore::Path::moveTo(WebCore::Path *this, const WebCore::FloatPoint *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  BOOL v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  char v32;
  __int128 v33;
  _BYTE v34[32];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 16);
  if (v4 != 2)
  {
    if (v4)
      goto LABEL_3;
    v15 = *(_QWORD *)a2;
    v13 = (char *)this + 8;
    goto LABEL_18;
  }
  v13 = (char *)this + 8;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 200))(*((_QWORD *)this + 1));
  v4 = *((_DWORD *)this + 16);
  if ((_DWORD)result)
  {
    v15 = *(_QWORD *)a2;
    if (v4 == -1)
    {
LABEL_19:
      *((_QWORD *)this + 1) = v15;
      v16 = v33;
      v17 = *(_OWORD *)v34;
      *(_OWORD *)(v13 + 36) = *(_OWORD *)&v34[12];
      *(_OWORD *)(v13 + 24) = v17;
      *(_OWORD *)(v13 + 8) = v16;
      *((_DWORD *)v13 + 13) = 0;
      *((_DWORD *)this + 16) = 1;
      return result;
    }
    if (v4 == 1)
    {
      *((_QWORD *)this + 1) = v15;
      *((_DWORD *)this + 15) = 0;
      return result;
    }
LABEL_18:
    result = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v4])(&v32, v13);
    goto LABEL_19;
  }
LABEL_3:
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      v5 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 8));
      v6 = *((_QWORD *)this + 1);
      if (v5 != 1)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD))(*(_QWORD *)v6 + 24))(&v33, *((_QWORD *)this + 1));
        v23 = v33;
        *(_QWORD *)&v33 = 0;
        v24 = (unsigned int *)*((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v23;
        if (v24)
        {
          v25 = v24 + 2;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            atomic_store(1u, v24 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
          }
          v28 = (unsigned int *)v33;
          *(_QWORD *)&v33 = 0;
          if (v28)
          {
            v29 = v28 + 2;
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
            {
              atomic_store(1u, v28 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
            }
          }
        }
        v6 = *((_QWORD *)this + 1);
      }
      if (v6)
        return (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v6 + 32))(v6, *(float *)a2, *((float *)a2 + 1));
    }
    v6 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v6 + 8) = 1;
    *(_QWORD *)v6 = off_1E340EC98;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    v7 = *((unsigned int *)this + 16);
    if ((_DWORD)v7 == -1)
      goto LABEL_29;
    v8 = (unsigned int **)((char *)this + 8);
    if ((_DWORD)v7 == 2)
    {
      v9 = *v8;
      *v8 = (unsigned int *)v6;
      if (v9)
      {
        v10 = v9 + 2;
        do
        {
          v11 = __ldaxr(v10);
          v12 = --v11 == 0;
        }
        while (__stlxr(v11, v10));
LABEL_25:
        if (v12)
        {
          atomic_store(1u, v9 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
        return (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v6 + 32))(v6, *(float *)a2, *((float *)a2 + 1));
      }
      return (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v6 + 32))(v6, *(float *)a2, *((float *)a2 + 1));
    }
    goto LABEL_28;
  }
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = off_1E340EC98;
  v18 = *(_OWORD *)((char *)this + 24);
  v33 = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)v34 = v18;
  *(_OWORD *)&v34[16] = *(_OWORD *)((char *)this + 40);
  v35 = *((_QWORD *)this + 7);
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  v19 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v6 + 24) = 1;
  *(_QWORD *)(v6 + 16) = v19;
  v20 = v19 + 56 * *(unsigned int *)(v6 + 28);
  *(_OWORD *)v20 = v33;
  *(_OWORD *)(v20 + 16) = *(_OWORD *)v34;
  *(_OWORD *)(v20 + 32) = *(_OWORD *)&v34[16];
  *(_QWORD *)(v20 + 48) = v35;
  ++*(_DWORD *)(v6 + 28);
  v7 = *((unsigned int *)this + 16);
  if ((_DWORD)v7 == -1)
  {
LABEL_29:
    *((_QWORD *)this + 1) = v6;
    *((_DWORD *)this + 16) = 2;
    return (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v6 + 32))(v6, *(float *)a2, *((float *)a2 + 1));
  }
  v8 = (unsigned int **)((char *)this + 8);
  if ((_DWORD)v7 != 2)
  {
LABEL_28:
    ((void (*)(__int128 *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v7])(&v33, v8);
    goto LABEL_29;
  }
  v9 = *v8;
  *v8 = (unsigned int *)v6;
  if (v9)
  {
    v21 = v9 + 2;
    do
    {
      v22 = __ldaxr(v21);
      v12 = --v22 == 0;
    }
    while (__stlxr(v22, v21));
    goto LABEL_25;
  }
  return (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v6 + 32))(v6, *(float *)a2, *((float *)a2 + 1));
}

uint64_t WebCore::Path::isEmpty(WebCore::Path *this)
{
  int v1;
  uint64_t result;

  v1 = *((_DWORD *)this + 16);
  if (v1 != 2)
    return v1 == 0;
  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
  return result;
}

uint64_t WebCore::Path::addLineTo(uint64_t this, const WebCore::FloatPoint *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  unsigned int **v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v3 = this;
  v38 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(this + 64);
  if (v4 == 2)
  {
    v6 = this + 8;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 8) + 200))(*(_QWORD *)(this + 8));
    v4 = *(_DWORD *)(v3 + 64);
    if ((_DWORD)this)
    {
      v5 = *(_QWORD *)a2;
      if (v4 == -1)
        goto LABEL_5;
      if (v4 != 1)
      {
LABEL_4:
        this = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v4])(&v33, v6);
LABEL_5:
        *(_QWORD *)(v3 + 8) = 0;
        *(_QWORD *)(v6 + 8) = v5;
        v7 = v36;
        v8 = v35;
        *(_OWORD *)(v6 + 16) = v34;
        *(_OWORD *)(v6 + 32) = v8;
        *(_DWORD *)(v6 + 48) = v7;
        *(_DWORD *)(v6 + 52) = 11;
        *(_DWORD *)(v3 + 64) = 1;
        return this;
      }
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = v5;
      goto LABEL_32;
    }
  }
  else if (!v4)
  {
    v5 = *(_QWORD *)a2;
    v6 = this + 8;
    goto LABEL_4;
  }
  if (v4 == 2)
  {
    v19 = atomic_load((unsigned int *)(*(_QWORD *)(v3 + 8) + 8));
    v10 = *(_QWORD *)(v3 + 8);
    if (v19 != 1)
    {
      (*(void (**)(__int128 *__return_ptr, _QWORD))(*(_QWORD *)v10 + 24))(&v34, *(_QWORD *)(v3 + 8));
      v24 = v34;
      *(_QWORD *)&v34 = 0;
      v25 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = v24;
      if (v25)
      {
        v26 = v25 + 2;
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v25 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
        }
        v29 = (unsigned int *)v34;
        *(_QWORD *)&v34 = 0;
        if (v29)
        {
          v30 = v29 + 2;
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            atomic_store(1u, v29 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 8))(v29);
          }
        }
      }
      v10 = *(_QWORD *)(v3 + 8);
    }
    if (v10)
      return (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v10 + 40))(v10, *(float *)a2, *((float *)a2 + 1));
LABEL_18:
    v10 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v10 + 8) = 1;
    *(_QWORD *)v10 = off_1E340EC98;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    v20 = *(unsigned int *)(v3 + 64);
    if ((_DWORD)v20 != -1)
    {
      v21 = (unsigned int **)(v3 + 8);
      if ((_DWORD)v20 == 2)
      {
        v15 = *v21;
        *v21 = (unsigned int *)v10;
        if (v15)
        {
          v22 = v15 + 2;
          do
          {
            v23 = __ldaxr(v22);
            v18 = --v23 == 0;
          }
          while (__stlxr(v23, v22));
          goto LABEL_23;
        }
        return (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v10 + 40))(v10, *(float *)a2, *((float *)a2 + 1));
      }
      ((void (*)(__int128 *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v20])(&v34, v21);
    }
LABEL_29:
    *(_QWORD *)(v3 + 8) = v10;
    *(_DWORD *)(v3 + 64) = 2;
    return (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v10 + 40))(v10, *(float *)a2, *((float *)a2 + 1));
  }
  if (v4 != 1)
    goto LABEL_18;
  if (*(_DWORD *)(v3 + 60))
  {
    v9 = (unsigned int **)(v3 + 8);
    v10 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v10 + 8) = 1;
    *(_QWORD *)v10 = off_1E340EC98;
    v11 = *(_OWORD *)(v3 + 24);
    v34 = *(_OWORD *)(v3 + 8);
    v35 = v11;
    v36 = *(_OWORD *)(v3 + 40);
    v37 = *(_QWORD *)(v3 + 56);
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    v12 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v10 + 24) = 1;
    *(_QWORD *)(v10 + 16) = v12;
    v13 = v12 + 56 * *(unsigned int *)(v10 + 28);
    *(_OWORD *)v13 = v34;
    *(_OWORD *)(v13 + 16) = v35;
    *(_OWORD *)(v13 + 32) = v36;
    *(_QWORD *)(v13 + 48) = v37;
    ++*(_DWORD *)(v10 + 28);
    v14 = *(unsigned int *)(v3 + 64);
    if ((_DWORD)v14 != -1)
    {
      if ((_DWORD)v14 == 2)
      {
        v15 = *v9;
        *v9 = (unsigned int *)v10;
        if (v15)
        {
          v16 = v15 + 2;
          do
          {
            v17 = __ldaxr(v16);
            v18 = --v17 == 0;
          }
          while (__stlxr(v17, v16));
LABEL_23:
          if (v18)
          {
            atomic_store(1u, v15 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
          }
          return (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v10 + 40))(v10, *(float *)a2, *((float *)a2 + 1));
        }
        return (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v10 + 40))(v10, *(float *)a2, *((float *)a2 + 1));
      }
      ((void (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v14])(&v34, v3 + 8);
    }
    goto LABEL_29;
  }
  *(_QWORD *)(v3 + 16) = *(_QWORD *)a2;
LABEL_32:
  *(_DWORD *)(v3 + 60) = 11;
  return this;
}

uint64_t WebCore::Path::addQuadCurveTo(uint64_t this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int **v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int **v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  _OWORD v37[2];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v5 = this;
  v40 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(this + 64);
  if (v6 == 2)
  {
    v9 = this + 8;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 8) + 200))(*(_QWORD *)(this + 8));
    v6 = *(_DWORD *)(v5 + 64);
    if ((_DWORD)this)
    {
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)a3;
      if (v6 == -1)
        goto LABEL_5;
      if (v6 != 1)
      {
LABEL_4:
        this = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v6])(&v36, v9);
LABEL_5:
        *(_QWORD *)(v5 + 8) = 0;
        *(_QWORD *)(v9 + 8) = v7;
        *(_QWORD *)(v9 + 16) = v8;
        v10 = *(_OWORD *)((char *)v37 + 12);
        *(_OWORD *)(v9 + 24) = v37[0];
        *(_OWORD *)(v9 + 36) = v10;
        *(_DWORD *)(v9 + 52) = 12;
        *(_DWORD *)(v5 + 64) = 1;
        return this;
      }
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = v7;
      *(_QWORD *)(v5 + 24) = v8;
      goto LABEL_32;
    }
  }
  else if (!v6)
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)a3;
    v9 = this + 8;
    goto LABEL_4;
  }
  if (v6 == 2)
  {
    v21 = atomic_load((unsigned int *)(*(_QWORD *)(v5 + 8) + 8));
    v12 = *(_QWORD *)(v5 + 8);
    if (v21 != 1)
    {
      (*(void (**)(_OWORD *__return_ptr, _QWORD))(*(_QWORD *)v12 + 24))(v37, *(_QWORD *)(v5 + 8));
      v26 = *(_QWORD *)&v37[0];
      *(_QWORD *)&v37[0] = 0;
      v27 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = v26;
      if (v27)
      {
        v29 = v27 + 2;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          atomic_store(1u, v27 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
        }
        v32 = *(unsigned int **)&v37[0];
        *(_QWORD *)&v37[0] = 0;
        if (v32)
        {
          v33 = v32 + 2;
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            atomic_store(1u, v32 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
          }
        }
      }
      v12 = *(_QWORD *)(v5 + 8);
    }
    if (v12)
      return (*(uint64_t (**)(uint64_t, float, float, float, float))(*(_QWORD *)v12 + 48))(v12, *(float *)a2, *((float *)a2 + 1), *(float *)a3, *((float *)a3 + 1));
LABEL_18:
    v12 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v12 + 8) = 1;
    *(_QWORD *)v12 = off_1E340EC98;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 24) = 0;
    v22 = *(unsigned int *)(v5 + 64);
    if ((_DWORD)v22 != -1)
    {
      v23 = (unsigned int **)(v5 + 8);
      if ((_DWORD)v22 == 2)
      {
        v17 = *v23;
        *v23 = (unsigned int *)v12;
        if (v17)
        {
          v24 = v17 + 2;
          do
          {
            v25 = __ldaxr(v24);
            v20 = --v25 == 0;
          }
          while (__stlxr(v25, v24));
          goto LABEL_23;
        }
        return (*(uint64_t (**)(uint64_t, float, float, float, float))(*(_QWORD *)v12 + 48))(v12, *(float *)a2, *((float *)a2 + 1), *(float *)a3, *((float *)a3 + 1));
      }
      ((void (*)(_OWORD *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v22])(v37, v23);
    }
LABEL_29:
    *(_QWORD *)(v5 + 8) = v12;
    *(_DWORD *)(v5 + 64) = 2;
    return (*(uint64_t (**)(uint64_t, float, float, float, float))(*(_QWORD *)v12 + 48))(v12, *(float *)a2, *((float *)a2 + 1), *(float *)a3, *((float *)a3 + 1));
  }
  if (v6 != 1)
    goto LABEL_18;
  if (*(_DWORD *)(v5 + 60))
  {
    v11 = (unsigned int **)(v5 + 8);
    v12 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v12 + 8) = 1;
    *(_QWORD *)v12 = off_1E340EC98;
    v13 = *(_OWORD *)(v5 + 24);
    v37[0] = *(_OWORD *)(v5 + 8);
    v37[1] = v13;
    v38 = *(_OWORD *)(v5 + 40);
    v39 = *(_QWORD *)(v5 + 56);
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 24) = 0;
    v14 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v12 + 24) = 1;
    *(_QWORD *)(v12 + 16) = v14;
    v15 = v14 + 56 * *(unsigned int *)(v12 + 28);
    *(_OWORD *)v15 = v37[0];
    *(_OWORD *)(v15 + 16) = v37[1];
    *(_OWORD *)(v15 + 32) = v38;
    *(_QWORD *)(v15 + 48) = v39;
    ++*(_DWORD *)(v12 + 28);
    v16 = *(unsigned int *)(v5 + 64);
    if ((_DWORD)v16 != -1)
    {
      if ((_DWORD)v16 == 2)
      {
        v17 = *v11;
        *v11 = (unsigned int *)v12;
        if (v17)
        {
          v18 = v17 + 2;
          do
          {
            v19 = __ldaxr(v18);
            v20 = --v19 == 0;
          }
          while (__stlxr(v19, v18));
LABEL_23:
          if (v20)
          {
            atomic_store(1u, v17 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
          }
          return (*(uint64_t (**)(uint64_t, float, float, float, float))(*(_QWORD *)v12 + 48))(v12, *(float *)a2, *((float *)a2 + 1), *(float *)a3, *((float *)a3 + 1));
        }
        return (*(uint64_t (**)(uint64_t, float, float, float, float))(*(_QWORD *)v12 + 48))(v12, *(float *)a2, *((float *)a2 + 1), *(float *)a3, *((float *)a3 + 1));
      }
      ((void (*)(_OWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v16])(v37, v5 + 8);
    }
    goto LABEL_29;
  }
  v28 = *(_QWORD *)a3;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)a2;
  *(_QWORD *)(v5 + 24) = v28;
LABEL_32:
  *(_DWORD *)(v5 + 60) = 12;
  return this;
}

uint64_t WebCore::Path::addBezierCurveTo(uint64_t this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3, const WebCore::FloatPoint *a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int **v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int **v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  _QWORD v40[3];
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v7 = this;
  v46 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(this + 64);
  if (v8 == 2)
  {
    v11 = this + 8;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 8) + 200))(*(_QWORD *)(this + 8));
    v8 = *(_DWORD *)(v7 + 64);
    if ((_DWORD)this)
    {
      v9 = *(_QWORD *)a2;
      v10 = *(_QWORD *)a3;
      v12 = *(_QWORD *)a4;
      if (v8 == -1)
        goto LABEL_5;
      if (v8 != 1)
      {
LABEL_4:
        this = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v8])(&v41, v11);
LABEL_5:
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = v9;
        *(_QWORD *)(v7 + 24) = v10;
        *(_QWORD *)(v7 + 32) = v12;
        *(_OWORD *)(v7 + 40) = v42;
        *(_DWORD *)(v7 + 56) = v43;
        *(_QWORD *)(v7 + 60) = 0x10000000DLL;
        return this;
      }
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = v9;
      *(_QWORD *)(v7 + 24) = v10;
      *(_QWORD *)(v7 + 32) = v12;
      goto LABEL_32;
    }
  }
  else if (!v8)
  {
    v9 = *(_QWORD *)a2;
    v10 = *(_QWORD *)a3;
    v11 = this + 8;
    v12 = *(_QWORD *)a4;
    goto LABEL_4;
  }
  if (v8 == 2)
  {
    v23 = atomic_load((unsigned int *)(*(_QWORD *)(v7 + 8) + 8));
    v14 = *(_QWORD *)(v7 + 8);
    if (v23 != 1)
    {
      (*(void (**)(__int128 *__return_ptr, _QWORD))(*(_QWORD *)v14 + 24))(&v42, *(_QWORD *)(v7 + 8));
      v28 = v42;
      *(_QWORD *)&v42 = 0;
      v29 = *(unsigned int **)(v7 + 8);
      *(_QWORD *)(v7 + 8) = v28;
      if (v29)
      {
        v33 = v29 + 2;
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          atomic_store(1u, v29 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 8))(v29);
        }
        v36 = (unsigned int *)v42;
        *(_QWORD *)&v42 = 0;
        if (v36)
        {
          v37 = v36 + 2;
          do
          {
            v38 = __ldaxr(v37);
            v39 = v38 - 1;
          }
          while (__stlxr(v39, v37));
          if (!v39)
          {
            atomic_store(1u, v36 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 8))(v36);
          }
        }
      }
      v14 = *(_QWORD *)(v7 + 8);
    }
    if (v14)
      goto LABEL_30;
LABEL_18:
    v14 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v14 + 8) = 1;
    *(_QWORD *)v14 = off_1E340EC98;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    v24 = *(unsigned int *)(v7 + 64);
    if ((_DWORD)v24 != -1)
    {
      v25 = (unsigned int **)(v7 + 8);
      if ((_DWORD)v24 == 2)
      {
        v19 = *v25;
        *v25 = (unsigned int *)v14;
        if (v19)
        {
          v26 = v19 + 2;
          do
          {
            v27 = __ldaxr(v26);
            v22 = --v27 == 0;
          }
          while (__stlxr(v27, v26));
          goto LABEL_23;
        }
LABEL_30:
        v30 = *(_QWORD *)a3;
        v40[0] = *(_QWORD *)a2;
        v40[1] = v30;
        v40[2] = *(_QWORD *)a4;
        return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 56))(v14, v40);
      }
      ((void (*)(__int128 *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v24])(&v42, v25);
    }
LABEL_29:
    *(_QWORD *)(v7 + 8) = v14;
    *(_DWORD *)(v7 + 64) = 2;
    goto LABEL_30;
  }
  if (v8 != 1)
    goto LABEL_18;
  if (*(_DWORD *)(v7 + 60))
  {
    v13 = (unsigned int **)(v7 + 8);
    v14 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v14 + 8) = 1;
    *(_QWORD *)v14 = off_1E340EC98;
    v15 = *(_OWORD *)(v7 + 24);
    v42 = *(_OWORD *)(v7 + 8);
    v43 = v15;
    v44 = *(_OWORD *)(v7 + 40);
    v45 = *(_QWORD *)(v7 + 56);
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    v16 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v14 + 24) = 1;
    *(_QWORD *)(v14 + 16) = v16;
    v17 = v16 + 56 * *(unsigned int *)(v14 + 28);
    *(_OWORD *)v17 = v42;
    *(_OWORD *)(v17 + 16) = v43;
    *(_OWORD *)(v17 + 32) = v44;
    *(_QWORD *)(v17 + 48) = v45;
    ++*(_DWORD *)(v14 + 28);
    v18 = *(unsigned int *)(v7 + 64);
    if ((_DWORD)v18 != -1)
    {
      if ((_DWORD)v18 == 2)
      {
        v19 = *v13;
        *v13 = (unsigned int *)v14;
        if (v19)
        {
          v20 = v19 + 2;
          do
          {
            v21 = __ldaxr(v20);
            v22 = --v21 == 0;
          }
          while (__stlxr(v21, v20));
LABEL_23:
          if (v22)
          {
            atomic_store(1u, v19 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
          }
          goto LABEL_30;
        }
        goto LABEL_30;
      }
      ((void (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v18])(&v42, v7 + 8);
    }
    goto LABEL_29;
  }
  v31 = *(_QWORD *)a3;
  v32 = *(_QWORD *)a4;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)a2;
  *(_QWORD *)(v7 + 24) = v31;
  *(_QWORD *)(v7 + 32) = v32;
LABEL_32:
  *(_DWORD *)(v7 + 60) = 13;
  return this;
}

uint64_t WebCore::Path::addArcTo(uint64_t this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3, float a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  float v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v7 = this;
  v21 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(this + 64);
  if (v8 != 2)
  {
    if (v8)
      goto LABEL_3;
    v14 = *(_QWORD *)a2;
    v15 = *(_QWORD *)a3;
    v11 = this + 8;
    goto LABEL_9;
  }
  v11 = this + 8;
  v10 = *(_QWORD *)(this + 8);
  if (!v10)
  {
LABEL_7:
    v12 = WebCore::Path::ensureImpl((WebCore::Path *)v7);
    v13 = *(_QWORD *)a3;
    v16[0] = *(_QWORD *)a2;
    v16[1] = v13;
    v17 = a4;
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 64))(v12, v16);
  }
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 200))(v10);
  v8 = *(_DWORD *)(v7 + 64);
  if ((_DWORD)this)
  {
    v14 = *(_QWORD *)a2;
    v15 = *(_QWORD *)a3;
    if (v8 == -1)
      goto LABEL_10;
    if (v8 == 1)
    {
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = v14;
      *(_QWORD *)(v7 + 24) = v15;
      goto LABEL_15;
    }
LABEL_9:
    this = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v8])(&v18, v11);
LABEL_10:
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v11 + 8) = v14;
    *(_QWORD *)(v11 + 16) = v15;
    *(float *)(v11 + 24) = a4;
    *(_OWORD *)(v11 + 28) = v19;
    *(_QWORD *)(v11 + 44) = v20;
    *(_DWORD *)(v11 + 52) = 14;
    *(_DWORD *)(v7 + 64) = 1;
    return this;
  }
LABEL_3:
  if (v8 != 1 || *(_DWORD *)(v7 + 60))
    goto LABEL_7;
  v9 = *(_QWORD *)a3;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)a2;
  *(_QWORD *)(v7 + 24) = v9;
LABEL_15:
  *(float *)(v7 + 32) = a4;
  *(_DWORD *)(v7 + 60) = 14;
  return this;
}

uint64_t WebCore::Path::addArc(uint64_t result, uint64_t *a2, char a3, float a4, float a5, float a6)
{
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  char v42;
  char v43;
  _OWORD v44[2];
  __int128 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if ((LODWORD(a4) & 0x7FFFFFFFu) <= 0x7F7FFFFF
    && (LODWORD(a5) & 0x7FFFFFFFu) <= 0x7F7FFFFF
    && (LODWORD(a6) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v11 = result;
    v12 = *(_DWORD *)(result + 64);
    if (v12 == 2)
    {
      v21 = result + 8;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 200))(*(_QWORD *)(result + 8));
      v12 = *(_DWORD *)(v11 + 64);
      if (!(_DWORD)result)
      {
LABEL_6:
        if (v12 == 1)
        {
          v14 = WTF::fastMalloc((WTF *)0x20);
          *(_DWORD *)(v14 + 8) = 1;
          *(_QWORD *)v14 = off_1E340EC98;
          v24 = *(_OWORD *)(v11 + 24);
          v44[0] = *(_OWORD *)(v11 + 8);
          v44[1] = v24;
          v45 = *(_OWORD *)(v11 + 40);
          v46 = *(_QWORD *)(v11 + 56);
          *(_QWORD *)(v14 + 16) = 0;
          *(_QWORD *)(v14 + 24) = 0;
          v25 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v14 + 24) = 1;
          *(_QWORD *)(v14 + 16) = v25;
          v26 = v25 + 56 * *(unsigned int *)(v14 + 28);
          *(_OWORD *)v26 = v44[0];
          *(_OWORD *)(v26 + 16) = v44[1];
          *(_OWORD *)(v26 + 32) = v45;
          *(_QWORD *)(v26 + 48) = v46;
          ++*(_DWORD *)(v14 + 28);
          v15 = *(unsigned int *)(v11 + 64);
          if ((_DWORD)v15 == -1)
          {
LABEL_33:
            *(_QWORD *)(v11 + 8) = v14;
            *(_DWORD *)(v11 + 64) = 2;
            goto LABEL_34;
          }
          v16 = (unsigned int **)(v11 + 8);
          if ((_DWORD)v15 == 2)
          {
            v17 = *v16;
            *v16 = (unsigned int *)v14;
            if (v17)
            {
              v27 = v17 + 2;
              do
              {
                v28 = __ldaxr(v27);
                v20 = --v28 == 0;
              }
              while (__stlxr(v28, v27));
              goto LABEL_29;
            }
LABEL_34:
            v38 = *a2;
            v39 = a4;
            v40 = a5;
            v41 = a6;
            v42 = a3;
            return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 72))(v14, &v38);
          }
        }
        else
        {
          if (v12 == 2)
          {
            v13 = atomic_load((unsigned int *)(*(_QWORD *)(v11 + 8) + 8));
            v14 = *(_QWORD *)(v11 + 8);
            if (v13 != 1)
            {
              (*(void (**)(_OWORD *__return_ptr, _QWORD))(*(_QWORD *)v14 + 24))(v44, *(_QWORD *)(v11 + 8));
              v29 = *(_QWORD *)&v44[0];
              *(_QWORD *)&v44[0] = 0;
              v30 = *(unsigned int **)(v11 + 8);
              *(_QWORD *)(v11 + 8) = v29;
              if (v30)
              {
                v31 = v30 + 2;
                do
                {
                  v32 = __ldaxr(v31);
                  v33 = v32 - 1;
                }
                while (__stlxr(v33, v31));
                if (!v33)
                {
                  atomic_store(1u, v30 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
                }
                v34 = *(unsigned int **)&v44[0];
                *(_QWORD *)&v44[0] = 0;
                if (v34)
                {
                  v35 = v34 + 2;
                  do
                  {
                    v36 = __ldaxr(v35);
                    v37 = v36 - 1;
                  }
                  while (__stlxr(v37, v35));
                  if (!v37)
                  {
                    atomic_store(1u, v34 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
                  }
                }
              }
              v14 = *(_QWORD *)(v11 + 8);
            }
            if (v14)
              goto LABEL_34;
          }
          v14 = WTF::fastMalloc((WTF *)0x20);
          *(_DWORD *)(v14 + 8) = 1;
          *(_QWORD *)v14 = off_1E340EC98;
          *(_QWORD *)(v14 + 16) = 0;
          *(_QWORD *)(v14 + 24) = 0;
          v15 = *(unsigned int *)(v11 + 64);
          if ((_DWORD)v15 == -1)
            goto LABEL_33;
          v16 = (unsigned int **)(v11 + 8);
          if ((_DWORD)v15 == 2)
          {
            v17 = *v16;
            *v16 = (unsigned int *)v14;
            if (v17)
            {
              v18 = v17 + 2;
              do
              {
                v19 = __ldaxr(v18);
                v20 = --v19 == 0;
              }
              while (__stlxr(v19, v18));
LABEL_29:
              if (v20)
              {
                atomic_store(1u, v17 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
              }
              goto LABEL_34;
            }
            goto LABEL_34;
          }
        }
        ((void (*)(_OWORD *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v15])(v44, v16);
        goto LABEL_33;
      }
      v22 = *a2;
      if (v12 == -1)
        goto LABEL_22;
      if (v12 == 1)
      {
        *(_QWORD *)(v11 + 8) = v22;
        *(float *)(v11 + 16) = a4;
        *(float *)(v11 + 20) = a5;
        *(float *)(v11 + 24) = a6;
        *(_BYTE *)(v11 + 28) = a3;
        *(_DWORD *)(v11 + 60) = 5;
        return result;
      }
    }
    else
    {
      if (v12)
        goto LABEL_6;
      v22 = *a2;
      v21 = result + 8;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v12])(&v43, v21);
LABEL_22:
    *(_QWORD *)(v11 + 8) = v22;
    *(float *)(v21 + 8) = a4;
    *(float *)(v21 + 12) = a5;
    *(float *)(v21 + 16) = a6;
    *(_BYTE *)(v21 + 20) = a3;
    v23 = *(_OWORD *)((char *)v44 + 15);
    *(_OWORD *)(v21 + 21) = v44[0];
    *(_OWORD *)(v21 + 36) = v23;
    *(_DWORD *)(v21 + 52) = 5;
    *(_DWORD *)(v11 + 64) = 1;
  }
  return result;
}

uint64_t WebCore::Path::addEllipse(WebCore::Path *this, uint64_t *a2, char a3, float a4, float a5, float a6, float a7, float a8)
{
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  char v28;
  char v29;
  _BYTE v30[23];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v16 = *((_DWORD *)this + 16);
  if (v16 != 2)
  {
    if (!v16)
    {
      v17 = *a2;
      v18 = (char *)this + 8;
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  v18 = (char *)this + 8;
  v20 = *((_QWORD *)this + 1);
  if (!v20 || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 200))(v20), !(_DWORD)result))
  {
LABEL_11:
    v21 = WebCore::Path::ensureImpl(this);
    v22 = *a2;
    v23 = a4;
    v24 = a5;
    v25 = a6;
    v26 = a7;
    v27 = a8;
    v28 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v21 + 88))(v21, &v22);
  }
  v16 = *((_DWORD *)this + 16);
  v17 = *a2;
  if (v16 == -1)
    goto LABEL_5;
  if (v16 != 1)
  {
LABEL_4:
    result = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v16])(&v29, v18);
LABEL_5:
    *((_QWORD *)this + 1) = v17;
    *((float *)v18 + 2) = a4;
    *((float *)v18 + 3) = a5;
    *((float *)v18 + 4) = a6;
    *((float *)v18 + 5) = a7;
    *((float *)v18 + 6) = a8;
    v18[28] = a3;
    *(_OWORD *)(v18 + 29) = *(_OWORD *)v30;
    *(_QWORD *)(v18 + 44) = *(_QWORD *)&v30[15];
    *((_DWORD *)v18 + 13) = 7;
    *((_DWORD *)this + 16) = 1;
    return result;
  }
  *((_QWORD *)this + 1) = v17;
  *((float *)this + 4) = a4;
  *((float *)this + 5) = a5;
  *((float *)this + 6) = a6;
  *((float *)this + 7) = a7;
  *((float *)this + 8) = a8;
  *((_BYTE *)this + 36) = a3;
  *((_DWORD *)this + 15) = 7;
  return result;
}

__n128 WebCore::Path::addEllipseInRect(WebCore::Path *this, __n128 *a2)
{
  int v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  int v11;
  char v12;
  __n128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 16);
  if (v4 == 2)
  {
    v8 = (char *)this + 8;
    v7 = *((_QWORD *)this + 1);
    if (!v7 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7))
      goto LABEL_3;
    v4 = *((_DWORD *)this + 16);
    v13 = *a2;
    v17 = v13;
    v18 = v14;
    v19 = v15;
    v20 = v16;
    if (v4 == -1)
      goto LABEL_11;
    if (v4 == 1)
    {
      v9 = v14;
      *(__n128 *)v8 = v13;
      *(_OWORD *)((char *)this + 24) = v9;
      result.n128_u64[0] = v15;
      *(_OWORD *)((char *)this + 40) = v15;
      *((_DWORD *)this + 14) = v16;
      *((_DWORD *)this + 15) = 8;
      return result;
    }
  }
  else
  {
    if (v4)
    {
LABEL_3:
      v5 = WebCore::Path::ensureImpl(this);
      (*(void (**)(uint64_t, float, float, float, float))(*(_QWORD *)v5 + 96))(v5, a2->n128_f32[0], a2->n128_f32[1], a2->n128_f32[2], a2->n128_f32[3]);
      return result;
    }
    v13 = *a2;
    v17 = v13;
    v18 = v14;
    v19 = v15;
    v20 = v16;
    v8 = (char *)this + 8;
  }
  ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v4])(&v12, v8);
LABEL_11:
  result = v17;
  v10 = v19;
  v11 = v20;
  *((_OWORD *)v8 + 1) = v18;
  *((_OWORD *)v8 + 2) = v10;
  *(__n128 *)v8 = result;
  *((_DWORD *)v8 + 12) = v11;
  *((_DWORD *)v8 + 13) = 8;
  *((_DWORD *)this + 16) = 1;
  return result;
}

double WebCore::Path::addRoundedRect(WebCore::Path *this, __n128 *a2, float *a3, char a4, __n128 a5)
{
  float v5;
  int v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  unint64_t v20;
  __n128 *v21;
  uint64_t v22;
  __n128 v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  char v33;
  __n128 v34;
  char v35;

  v5 = a2->n128_f32[2];
  if (v5 <= 0.0)
    return a5.n128_f64[0];
  a5.n128_u32[0] = a2->n128_u32[3];
  if (a5.n128_f32[0] <= 0.0)
    return a5.n128_f64[0];
  v10 = *((_DWORD *)this + 16);
  if (v10 == 2)
  {
    v15 = *((_QWORD *)this + 1);
    if (!v15 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 200))(v15))
      goto LABEL_5;
    v5 = a2->n128_f32[2];
    a5.n128_u32[0] = a2->n128_u32[3];
LABEL_20:
    v17 = *a3;
    v16 = a3[1];
    if (*a3 < 0.0)
    {
      v17 = 0.0;
      if (v16 >= 0.0)
        v17 = a3[1];
    }
    v18 = v5 * 0.5;
    if (v16 < 0.0)
      v16 = v17;
    v19 = a5.n128_f32[0] * 0.5;
    if (v17 > v18)
      v17 = v18;
    if (v16 > v19)
      v16 = v19;
    v34 = *a2;
    v20 = LODWORD(v17) | ((unint64_t)LODWORD(v16) << 32);
    v21 = (__n128 *)((char *)this + 8);
    v22 = *((unsigned int *)this + 16);
    if ((_DWORD)v22 != -1)
    {
      if ((_DWORD)v22 == 1)
      {
        a5 = *a2;
        *v21 = *a2;
        *((_QWORD *)this + 3) = v20;
        *((_QWORD *)this + 4) = v20;
        *((_QWORD *)this + 5) = v20;
        *((_QWORD *)this + 6) = v20;
        *((_BYTE *)this + 56) = a4;
        *((_DWORD *)this + 15) = 10;
        return a5.n128_f64[0];
      }
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v22])(&v35, (char *)this + 8);
    }
    *v21 = v34;
    *((_QWORD *)this + 3) = v20;
    *((_QWORD *)this + 4) = v20;
    *((_QWORD *)this + 5) = v20;
    *((_QWORD *)this + 6) = v20;
    *((_BYTE *)this + 56) = a4;
    a5.n128_u64[0] = 0x10000000ALL;
    *(_QWORD *)((char *)this + 60) = 0x10000000ALL;
    return a5.n128_f64[0];
  }
  if (!v10)
    goto LABEL_20;
LABEL_5:
  v11 = WebCore::Path::ensureImpl(this);
  v12 = *a3;
  v13 = a3[1];
  v14 = 0.0;
  if (v13 >= 0.0)
    v14 = a3[1];
  if (v12 < 0.0)
    v12 = v14;
  if (v13 < 0.0)
    v13 = v12;
  if (v12 > (float)(a2->n128_f32[2] * 0.5))
    v12 = a2->n128_f32[2] * 0.5;
  if (v13 > (float)(a2->n128_f32[3] * 0.5))
    v13 = a2->n128_f32[3] * 0.5;
  v24 = *a2;
  v25 = v12;
  v26 = v13;
  v27 = v12;
  v28 = v13;
  v29 = v12;
  v30 = v13;
  v31 = v12;
  v32 = v13;
  v33 = a4;
  (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v11 + 112))(v11, &v24);
  return a5.n128_f64[0];
}

double WebCore::Path::addRoundedRect(WebCore::Path *this, int32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  _OWORD v5[3];

  v2 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  v3 = vmulq_f32(vcvtq_f32_s32(a2[1]), v2);
  v5[0] = vmulq_f32(vcvtq_f32_s32(*a2), v2);
  v5[1] = v3;
  v5[2] = vmulq_f32(vcvtq_f32_s32(a2[2]), v2);
  return WebCore::Path::addRoundedRect(this, (WebCore::FloatRect *)v5, 0);
}

uint64_t WebCore::Path::closeSubpath(uint64_t this)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[32];
  __int128 v8;
  int v9;

  v1 = this;
  v2 = *(_DWORD *)(this + 64);
  if (v2 == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if (!v4)
      goto LABEL_9;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 200))(v4);
    if ((this & 1) != 0)
      return this;
    v2 = *(_DWORD *)(v1 + 64);
  }
  else if (!v2)
  {
    return this;
  }
  if (v2 == 2)
  {
    v6 = *(_QWORD *)(v1 + 8);
    if (!v6)
      goto LABEL_9;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 208))(v6);
    if ((this & 1) != 0)
      return this;
    if (*(_DWORD *)(v1 + 64) != 1)
      goto LABEL_9;
    v3 = *(_DWORD *)(v1 + 60);
LABEL_14:
    if (v3 == 5)
    {
      *(_OWORD *)v7 = *(_OWORD *)(v1 + 8);
      *(_QWORD *)&v7[13] = *(_QWORD *)(v1 + 21);
      *(_OWORD *)(v1 + 40) = v8;
      *(_OWORD *)(v1 + 8) = *(_OWORD *)v7;
      *(_OWORD *)(v1 + 24) = *(_OWORD *)&v7[16];
      *(_DWORD *)(v1 + 56) = v9;
      *(_DWORD *)(v1 + 60) = 6;
      return this;
    }
LABEL_9:
    v5 = WebCore::Path::ensureImpl((WebCore::Path *)v1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 120))(v5);
  }
  if (v2 != 1)
    goto LABEL_9;
  v3 = *(_DWORD *)(v1 + 60);
  if (v3 != 6 && v3 != 15)
    goto LABEL_14;
  return this;
}

uint64_t WebCore::Path::applySegments(uint64_t result, _QWORD *a2)
{
  int v2;

  if (result)
  {
    v2 = *(_DWORD *)(result + 64);
    if (v2 == 2)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
    }
    else if (v2 == 1)
    {
      return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, result + 8);
    }
  }
  return result;
}

void WebCore::Path::applyElements(WebCore::Path *this, void *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Path *v9;
  float64x2_t *v10;
  void *v11;
  void **v12;

  v4 = *((_DWORD *)this + 16);
  if (v4 == 2)
  {
    v6 = *((_QWORD *)this + 1);
    if (!v6)
      goto LABEL_9;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6) & 1) != 0)
      return;
    v4 = *((_DWORD *)this + 16);
  }
  else if (!v4)
  {
    return;
  }
  if (v4 != 1)
  {
LABEL_4:
    if (v4 == 2)
    {
      v5 = *((_QWORD *)this + 1);
      if (v5)
      {
        if (((*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v5 + 136))(v5, a2) & 1) != 0)
          return;
      }
    }
LABEL_9:
    v7 = WebCore::Path::ensurePlatformPathImpl(this);
    CGPathApply(*(CGPathRef *)(v7 + 16), a2, (CGPathApplierFunction)WebCore::pathElementApplierCallback);
    return;
  }
  v11 = a2;
  v8 = *((unsigned int *)this + 15);
  if ((_DWORD)v8 == -1)
  {
    v9 = (WebCore::Path *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::Path::transform(v9, v10);
    return;
  }
  v12 = &v11;
  if ((((uint64_t (*)(void ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment13applyElementsERKNS6_8FunctionIFvRKNS8_11PathElementEEEEE3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v12, (char *)this + 8) & 1) == 0)
  {
    v4 = *((_DWORD *)this + 16);
    goto LABEL_4;
  }
}

void WebCore::Path::transform(WebCore::Path *this, float64x2_t *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  float64x2_t v8;
  CGMutablePathRef v9;
  const void *v10;
  CGFloat a;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float64x2_t *v23;
  CGAffineTransform transform;

  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*a2, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(a2[1], (float64x2_t)xmmword_1968A14C0))))) & 1) == 0&& a2[2].f64[0] == 0.0&& a2[2].f64[1] == 0.0)
  {
    return;
  }
  v4 = *((_DWORD *)this + 16);
  if (v4 == 2)
  {
    if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 200))(*((_QWORD *)this + 1)) & 1) != 0)
      return;
    v4 = *((_DWORD *)this + 16);
  }
  else if (!v4)
  {
    return;
  }
  if (v4 != 1)
    goto LABEL_10;
  v23 = a2;
  v20 = *((unsigned int *)this + 15);
  if ((_DWORD)v20 == -1)
  {
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::Path::singleSegment(v21, v22);
    return;
  }
  *(_QWORD *)&transform.a = &v23;
  if ((((uint64_t (*)(CGAffineTransform *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore11PathSegment9transformERKNS8_15AffineTransformEE3__0JEEEEEJRNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v20])(&transform, (char *)this + 8) & 1) == 0)
  {
    v4 = *((_DWORD *)this + 16);
LABEL_10:
    if (v4 != 2)
      goto LABEL_14;
    v5 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 8));
    v6 = *((_QWORD *)this + 1);
    if (v5 != 1)
    {
      (*(void (**)(CGAffineTransform *__return_ptr))(*(_QWORD *)v6 + 24))(&transform);
      a = transform.a;
      transform.a = 0.0;
      v12 = (unsigned int *)*((_QWORD *)this + 1);
      *((CGFloat *)this + 1) = a;
      if (v12)
      {
        v13 = v12 + 2;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v12 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
        }
        v16 = *(unsigned int **)&transform.a;
        transform.a = 0.0;
        if (v16)
        {
          v17 = v16 + 2;
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            atomic_store(1u, v16 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
          }
        }
      }
      v6 = *((_QWORD *)this + 1);
    }
    if (!v6 || ((*(uint64_t (**)(uint64_t, float64x2_t *))(*(_QWORD *)v6 + 144))(v6, a2) & 1) == 0)
    {
LABEL_14:
      v7 = WebCore::Path::ensurePlatformPathImpl(this);
      v8 = a2[1];
      *(float64x2_t *)&transform.a = *a2;
      *(float64x2_t *)&transform.c = v8;
      *(float64x2_t *)&transform.tx = a2[2];
      v9 = CGPathCreateMutableCopyByTransformingPath(*(CGPathRef *)(v7 + 16), &transform);
      v10 = *(const void **)(v7 + 16);
      *(_QWORD *)(v7 + 16) = v9;
      if (v10)
        CFRelease(v10);
    }
  }
}

uint64_t WebCore::Path::singleSegment@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  __int128 v3;

  if (this)
  {
    v2 = *(_DWORD *)(this + 64);
    if (v2 == 2)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 152))(this);
    }
    else if (v2 == 1)
    {
      v3 = *(_OWORD *)(this + 24);
      *(_OWORD *)a2 = *(_OWORD *)(this + 8);
      *(_OWORD *)(a2 + 16) = v3;
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(this + 40);
      *(_QWORD *)(a2 + 48) = *(_QWORD *)(this + 56);
      *(_BYTE *)(a2 + 56) = 1;
      return this;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 56) = 0;
  return this;
}

uint64_t WebCore::Path::segmentsIfExists(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  if (this)
  {
    if (*(_DWORD *)(this + 64) == 2 && (v1 = *(_QWORD *)(this + 8)) != 0)
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v1 + 16))(*(_QWORD *)(this + 8)))
        v2 = v1;
      else
        v2 = 0;
      if (v2)
        return v2 + 16;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return this;
}

uint64_t (***WebCore::Path::length(WebCore::Path *this))()
{
  uint64_t (***v2)();
  int v3;
  uint64_t (**v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (***result)();
  uint64_t v9;
  WebCore::Path *v10;
  uint64_t (***info)();
  int v12;
  char v13;
  __int128 v14;
  _BYTE v15[21];
  uint64_t (****p_info)();
  uint64_t (*****p_p_info)();

  v12 = 0;
  v13 = 0;
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  v2 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E340EC20;
  v2[1] = (uint64_t (**)())&v12;
  info = v2;
  v3 = *((_DWORD *)this + 16);
  if (v3 != 2)
  {
    if (!v3)
    {
      info = 0;
      v4 = off_1E340EC20;
      return (uint64_t (***)())v4[1]();
    }
LABEL_7:
    if (v3 == 1)
    {
      p_info = &info;
      v9 = *((unsigned int *)this + 15);
      if ((_DWORD)v9 == -1)
      {
        v10 = (WebCore::Path *)std::__throw_bad_variant_access[abi:sn180100]();
        return (uint64_t (***)())WebCore::Path::currentPoint(v10);
      }
      p_p_info = &p_info;
      if ((((uint64_t (*)(uint64_t (******)(), char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment13applyElementsERKNS6_8FunctionIFvRKNS8_11PathElementEEEEE3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v9])(&p_p_info, (char *)this + 8) & 1) != 0)goto LABEL_12;
      v3 = *((_DWORD *)this + 16);
    }
    if (v3 != 2)
      goto LABEL_11;
    v6 = *((_QWORD *)this + 1);
    if (!v6
      || ((*(uint64_t (**)(uint64_t, uint64_t (****)()))(*(_QWORD *)v6 + 136))(v6, &info) & 1) == 0)
    {
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  v5 = *((_QWORD *)this + 1);
  if (!v5)
  {
LABEL_11:
    v7 = WebCore::Path::ensurePlatformPathImpl(this);
    CGPathApply(*(CGPathRef *)(v7 + 16), &info, (CGPathApplierFunction)WebCore::pathElementApplierCallback);
    goto LABEL_12;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 200))(v5) & 1) == 0)
  {
    v3 = *((_DWORD *)this + 16);
    goto LABEL_7;
  }
LABEL_12:
  result = info;
  info = 0;
  if (!result)
    return result;
  v4 = *result;
  return (uint64_t (***)())v4[1]();
}

void WebCore::Path::currentPoint(WebCore::Path *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::Path *v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  _QWORD *v10;

  if (this)
  {
    v1 = *((_DWORD *)this + 16);
    if (v1 == 2)
    {
      v3 = *((_QWORD *)this + 1);
      if (v3)
        (*(void (**)(uint64_t, float, float))(*(_QWORD *)v3 + 224))(v3, 0.0, 0.0);
    }
    else if (v1 == 1)
    {
      v7 = 0;
      v8 = 0;
      v9[0] = &v7;
      v9[1] = &v8;
      v2 = *((unsigned int *)this + 15);
      if ((_DWORD)v2 == -1)
      {
        v4 = (WebCore::Path *)std::__throw_bad_variant_access[abi:sn180100]();
        WebCore::Path::traversalStateAtLength(v4, v6, v5);
      }
      else
      {
        v10 = v9;
        ((void (*)(_QWORD **, char *, float, float))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment17calculateEndPointERKNS8_10FloatPointERSA_E3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v10, (char *)this + 8, 0.0, 0.0);
      }
    }
  }
}

void WebCore::Path::traversalStateAtLength(WebCore::Path *this@<X0>, float a2@<S0>, uint64_t a3@<X8>)
{
  uint64_t (***v5)();
  int v6;
  uint64_t (**v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (***v11)();
  uint64_t v12;
  WebCore::Path *v13;
  uint64_t (***info)();
  uint64_t (****p_info)();
  uint64_t (*****p_p_info)();

  *(_DWORD *)a3 = 1;
  *(_BYTE *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(float *)(a3 + 28) = a2;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 37) = 0;
  v5 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E340EC48;
  v5[1] = (uint64_t (**)())a3;
  info = v5;
  v6 = *((_DWORD *)this + 16);
  if (v6 != 2)
  {
    if (!v6)
    {
      info = 0;
      v7 = off_1E340EC48;
      goto LABEL_14;
    }
LABEL_7:
    if (v6 == 1)
    {
      p_info = &info;
      v12 = *((unsigned int *)this + 15);
      if ((_DWORD)v12 == -1)
      {
        v13 = (WebCore::Path *)std::__throw_bad_variant_access[abi:sn180100]();
        WebCore::Path::fastBoundingRect(v13);
        return;
      }
      p_p_info = &p_info;
      if ((((uint64_t (*)(uint64_t (******)(), char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment13applyElementsERKNS6_8FunctionIFvRKNS8_11PathElementEEEEE3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v12])(&p_p_info, (char *)this + 8) & 1) != 0)goto LABEL_12;
      v6 = *((_DWORD *)this + 16);
    }
    if (v6 != 2)
      goto LABEL_11;
    v9 = *((_QWORD *)this + 1);
    if (!v9
      || ((*(uint64_t (**)(uint64_t, uint64_t (****)()))(*(_QWORD *)v9 + 136))(v9, &info) & 1) == 0)
    {
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  v8 = *((_QWORD *)this + 1);
  if (!v8)
  {
LABEL_11:
    v10 = WebCore::Path::ensurePlatformPathImpl(this);
    CGPathApply(*(CGPathRef *)(v10 + 16), &info, (CGPathApplierFunction)WebCore::pathElementApplierCallback);
    goto LABEL_12;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 200))(v8) & 1) == 0)
  {
    v6 = *((_DWORD *)this + 16);
    goto LABEL_7;
  }
LABEL_12:
  v11 = info;
  info = 0;
  if (!v11)
    return;
  v7 = *v11;
LABEL_14:
  v7[1]();
}

void WebCore::Path::fastBoundingRect(WebCore::Path *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Path *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t **v13;

  if (this)
  {
    v2 = *((_DWORD *)this + 16);
    if (v2 == 2)
    {
      v5 = *((_QWORD *)this + 1);
      if (v5)
        (*(void (**)(uint64_t, float, float, float, float))(*(_QWORD *)v5 + 232))(v5, 0.0, 0.0, 0.0, 0.0);
    }
    else if (v2 == 1)
    {
      v7 = 0;
      v8 = 0;
      v9 = xmmword_1969F1470;
      v10 = &v7;
      v11 = &v8;
      v12 = &v9;
      v3 = *((unsigned int *)this + 15);
      if ((_DWORD)v3 == -1
        || (v13 = &v10,
            ((void (*)(uint64_t ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment22extendFastBoundingRectERKNS8_10FloatPointESC_RNS8_9FloatRectEE3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v13, (char *)this + 8), v10 = &v7, v11 = &v8, v4 = *((unsigned int *)this + 15), (_DWORD)v4 == -1))
      {
        v6 = (WebCore::Path *)std::__throw_bad_variant_access[abi:sn180100]();
        WebCore::Path::boundingRect(v6);
      }
      else
      {
        v13 = &v10;
        ((void (*)(uint64_t ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment17calculateEndPointERKNS8_10FloatPointERSA_E3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v13, (char *)this + 8);
      }
    }
  }
}

void WebCore::Path::boundingRect(WebCore::Path *this)
{
  int v1;
  uint64_t v2;

  if (this)
  {
    v1 = *((_DWORD *)this + 16);
    if (v1 == 2)
    {
      v2 = *((_QWORD *)this + 1);
      if (v2)
        (*(void (**)(uint64_t, float, float, float, float))(*(_QWORD *)v2 + 240))(v2, 0.0, 0.0, 0.0, 0.0);
    }
    else if (v1 == 1)
    {
      WebCore::PathStream::computeBoundingRect((uint64_t)this + 8, 1);
    }
  }
}

BOOL WebCore::Path::strokeBoundingRect(WebCore::Path *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = WebCore::Path::ensurePlatformPathImpl(a1);
  return WebCore::PathCG::strokeBoundingRect(v3, a2);
}

uint64_t WebCore::PlatformMediaResourceClient::responseReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebCore::PlatformMediaResourceClient::redirectReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebCore::PlatformMediaResourceClient::shouldCacheResponse()
{
  return 1;
}

uint64_t WebCore::MediaSourcePrivate::markEndOfStream(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 48));
  return result;
}

void WebCore::NamedImageGeneratedImage::~NamedImageGeneratedImage(WebCore::NamedImageGeneratedImage *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Image::~Image(this, a2);
}

{
  WTF::StringImpl *v3;
  WTF *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Image::~Image(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::NamedImageGeneratedImage::isNamedImageGeneratedImage(WebCore::NamedImageGeneratedImage *this)
{
  return 1;
}

void WebCore::NativeImageSource::~NativeImageSource(WebCore::NativeImageSource *this)
{
  *(_QWORD *)this = off_1E340E898;
  WebCore::ImageFrame::~ImageFrame((WebCore::NativeImageSource *)((char *)this + 16));
}

{
  void *v2;

  *(_QWORD *)this = off_1E340E898;
  WebCore::ImageFrame::~ImageFrame((WebCore::NativeImageSource *)((char *)this + 16));
  WTF::fastFree(this, v2);
}

uint64_t WebCore::NativeImageSource::primaryImageFrame(uint64_t a1)
{
  return a1 + 16;
}

uint64_t WebCore::NativeImageSource::primaryNativeImage@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v6;

  v3 = *(_QWORD *)(this + 32);
  if (!v3)
    goto LABEL_11;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    this = MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_11:
  *a2 = v3;
  return this;
}

uint64_t WebCore::NativeImageSource::colorSpace(WebCore::NativeImageSource *this)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (__ldaxr((unsigned __int8 *)v2))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v2))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v2);
LABEL_6:
    ++*(_QWORD *)(v2 + 8);
    v4 = __ldxr((unsigned __int8 *)v2);
    if (v4 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
LABEL_11:
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 48) + 40))(*(_QWORD *)(v1 + 48));
  v7 = *(_QWORD *)(v1 + 8);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_15;
  }
  result = MEMORY[0x19AEA534C](v7);
LABEL_15:
  v9 = *(_QWORD *)(v7 + 8);
  v10 = v9 - 1;
  *(_QWORD *)(v7 + 8) = v9 - 1;
  if (v9 == 1)
  {
    v14 = *(_QWORD *)(v7 + 16);
    v11 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;
    v12 = v14 != 0;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 != 1)
  {
    __clrex();
LABEL_22:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (v10)
      return result;
    goto LABEL_23;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
    goto LABEL_22;
  if (v10)
    return result;
LABEL_23:
  if (v11)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (!v12)
    return WTF::fastFree((WTF *)v7, v6);
  return result;
}

void WebCore::NativeImageSource::singlePixelSolidColor(WebCore::NativeImageSource *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::NativeImage *v3;
  uint64_t v4;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;

  v3 = (WebCore::NativeImage *)*((_QWORD *)this + 4);
  if (!v3)
  {
    WebCore::NativeImage::singlePixelSolidColor(0, a2);
    return;
  }
  v4 = *((_QWORD *)v3 + 1);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_10:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  WebCore::NativeImage::singlePixelSolidColor(v3, a2);
  v8 = *((_QWORD *)v3 + 1);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_15;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_15:
  v10 = *(_QWORD *)(v8 + 8);
  v11 = v10 - 1;
  *(_QWORD *)(v8 + 8) = v10 - 1;
  if (v10 == 1)
  {
    v15 = *(_QWORD *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    v13 = v15 != 0;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  v14 = __ldxr((unsigned __int8 *)v8);
  if (v14 != 1)
  {
    __clrex();
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return;
    goto LABEL_23;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
    goto LABEL_22;
  if (v11)
    return;
LABEL_23:
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (!v13)
    WTF::fastFree((WTF *)v8, v7);
}

WTF *WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, WTF *a2)
{
  WTF *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  _OWORD *v10;
  void *v11;
  uint64_t v12;
  WTF *v13;
  __int128 v14;
  __int128 v15;
  WTF *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  v2 = result;
  if (a2 == result)
    return v2;
  v4 = *((_DWORD *)result + 3);
  v5 = *((_DWORD *)a2 + 3);
  if (v4 > v5)
  {
    *((_DWORD *)result + 3) = v5;
LABEL_20:
    v16 = *(WTF **)v2;
    if (v5)
    {
      memmove(v16, *(const void **)a2, 32 * v5);
      v17 = *((_DWORD *)v2 + 3);
      v16 = *(WTF **)v2;
    }
    else
    {
      v17 = 0;
    }
    v18 = *((unsigned int *)a2 + 3);
    if (v17 != (_DWORD)v18)
    {
      v19 = v17;
      v20 = (_OWORD *)((char *)v16 + 32 * v17);
      v21 = (__int128 *)(*(_QWORD *)a2 + 32 * v19);
      v22 = 32 * v18 - 32 * v19;
      do
      {
        v23 = *v21;
        v24 = v21[1];
        v21 += 2;
        *v20 = v23;
        v20[1] = v24;
        v20 += 2;
        v22 -= 32;
      }
      while (v22);
      v17 = *((_DWORD *)a2 + 3);
    }
    *((_DWORD *)v2 + 3) = v17;
    return v2;
  }
  v6 = *((_DWORD *)result + 2);
  if (v5 <= v6)
    goto LABEL_19;
  if (v6)
  {
    if (v4)
      *((_DWORD *)result + 3) = 0;
    result = *(WTF **)result;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
      v6 = *((_DWORD *)v2 + 2);
    }
  }
  v7 = *((unsigned int *)a2 + 3);
  if (v6 >= v7)
  {
LABEL_19:
    v5 = *((_DWORD *)v2 + 3);
    goto LABEL_20;
  }
  if (!(v7 >> 27))
  {
    v8 = *(WTF **)v2;
    v9 = *((unsigned int *)v2 + 3);
    v10 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v7));
    *((_DWORD *)v2 + 2) = v7;
    *(_QWORD *)v2 = v10;
    if ((_DWORD)v9)
    {
      v12 = 32 * v9;
      v13 = v8;
      do
      {
        v14 = *(_OWORD *)v13;
        v15 = *((_OWORD *)v13 + 1);
        v13 = (WTF *)((char *)v13 + 32);
        *v10 = v14;
        v10[1] = v15;
        v10 += 2;
        v12 -= 32;
      }
      while (v12);
    }
    if (v8)
    {
      if (*(WTF **)v2 == v8)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree(v8, v11);
    }
    goto LABEL_19;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::NativePromiseProducer<WebCore::ContentType,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *a2)
{
  uint64_t v4;
  __int128 v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t result;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::Logger *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::Logger *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  __int128 v40;
  _BYTE *v42;
  int v43;
  WTF::Logger::LogSiteIdentifier *v44;
  uint64_t v45;
  WTF::Logger *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint8_t buf[4];
  _BYTE v52[12];
  int v53;
  WTF::StringImpl *v54[3];

  v54[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v4 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E340EB38;
  v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 32) = v5;
  *(_BYTE *)(v4 + 48) = 0;
  v6 = (unsigned __int8 *)(v4 + 48);
  *(_DWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = v4 + 104;
  *(_QWORD *)(v4 + 96) = 1;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  *(_WORD *)(v4 + 128) = 0;
  v7 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v4);
  if (!*v7)
    goto LABEL_68;
  v8 = v7;
  if (v7[16] < 4u)
    goto LABEL_68;
  WTF::String::String((WTF::String *)&v49, "creating ");
  result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v4, &v48);
  if (!v49)
  {
    v10 = 0;
    if (v48)
      goto LABEL_5;
LABEL_86:
    v11 = 0;
    goto LABEL_6;
  }
  v10 = *((_DWORD *)v49 + 1);
  if (!v48)
    goto LABEL_86;
LABEL_5:
  v11 = *((_DWORD *)v48 + 1);
LABEL_6:
  if ((v11 | v10) < 0 || (result = (v10 + v11), __OFADD__(v10, v11)))
  {
    v50 = 0;
    goto LABEL_90;
  }
  if (v49)
  {
    v12 = *((_DWORD *)v49 + 4);
    v13 = (v12 >> 2) & 1;
    if (v48 && (v12 & 4) != 0)
      goto LABEL_11;
  }
  else
  {
    if (v48)
    {
LABEL_11:
      v13 = (*((unsigned __int8 *)v48 + 16) >> 2) & 1;
      goto LABEL_12;
    }
    v13 = 1;
  }
LABEL_12:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, (uint64_t)v49, (uint64_t)v48, &v50);
  if (v50)
  {
    v15 = v48;
    v48 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v49;
    v49 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = *((_QWORD *)v8 + 4);
    v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v18)
    {
      WTF::String::utf8();
      v20 = v46 ? (char *)v46 + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v52 = v20;
      _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v18 = (uint64_t)v46;
      v46 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 1)
          v18 = WTF::fastFree((WTF *)v18, v19);
        else
          --*(_DWORD *)v18;
      }
    }
    if (*v8 && v8[16] >= 4u)
    {
      v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v22 = *v21;
        if ((v22 & 1) != 0)
          break;
        v23 = __ldaxr(v21);
        if (v23 == v22)
        {
          if (!__stxr(v22 | 1, v21))
          {
            v44 = a2;
            v45 = a1;
            v24 = WTF::Logger::observers((WTF::Logger *)v18);
            v25 = *(unsigned int *)(v24 + 12);
            if ((_DWORD)v25)
            {
              v26 = *(uint64_t **)v24;
              v27 = *(_QWORD *)v24 + 8 * v25;
              do
              {
                v28 = *v26;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&v52[4], "creating ");
                v53 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v4, v54);
                v46 = 0;
                v47 = 0;
                v29 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                LODWORD(v47) = 2;
                v46 = v29;
                v30 = HIDWORD(v47);
                *((_DWORD *)v29 + 4 * HIDWORD(v47)) = *(_DWORD *)buf;
                v31 = *(_QWORD *)&v52[4];
                if (*(_QWORD *)&v52[4])
                  **(_DWORD **)&v52[4] += 2;
                *((_QWORD *)v29 + 2 * v30 + 1) = v31;
                *((_DWORD *)v29 + 4 * (v30 + 1)) = v53;
                v32 = v54[0];
                if (v54[0])
                  *(_DWORD *)v54[0] += 2;
                *((_QWORD *)v29 + 2 * (v30 + 1) + 1) = v32;
                HIDWORD(v47) = v30 + 2;
                (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, v8, 4, &v46);
                v33 = v46;
                if (HIDWORD(v47))
                {
                  v34 = 16 * HIDWORD(v47);
                  v35 = (WTF::StringImpl **)((char *)v46 + 8);
                  do
                  {
                    v36 = *v35;
                    *v35 = 0;
                    if (v36)
                    {
                      if (*(_DWORD *)v36 == 2)
                        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v19);
                      else
                        *(_DWORD *)v36 -= 2;
                    }
                    v35 += 2;
                    v34 -= 16;
                  }
                  while (v34);
                  v33 = v46;
                }
                if (v33)
                {
                  v46 = 0;
                  LODWORD(v47) = 0;
                  WTF::fastFree(v33, v19);
                }
                v37 = v54[0];
                v54[0] = 0;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2)
                    WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v19);
                  else
                    *(_DWORD *)v37 -= 2;
                }
                v38 = *(WTF::StringImpl **)&v52[4];
                *(_QWORD *)&v52[4] = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2)
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v19);
                  else
                    *(_DWORD *)v38 -= 2;
                }
                ++v26;
              }
              while (v26 != (uint64_t *)v27);
            }
            v39 = __ldxr(v21);
            if (v39 == 1)
            {
              a2 = v44;
              a1 = v45;
              if (!__stlxr(0, v21))
                break;
            }
            else
            {
              __clrex();
              a2 = v44;
              a1 = v45;
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v7 = (unsigned __int8 *)v50;
    v50 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        v7 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v7, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v7 -= 2;
    }
LABEL_68:
    *(_QWORD *)a1 = v4;
    v40 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 24) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 8) = v40;
    if (__ldaxr(v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_72;
    }
    v7 = (unsigned __int8 *)MEMORY[0x19AEA534C](v6);
LABEL_72:
    v42 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
    if (*v42)
    {
      if (v42[16] >= 4u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>>((uint64_t)v42, a2, " runSynchronouslyOnTarget ", v4);
    }
    atomic_store(0, (unsigned __int8 *)(v4 + 129));
    v43 = __ldxr(v6);
    if (v43 == 1)
    {
      if (!__stlxr(0, v6))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    return a1;
  }
LABEL_90:
  __break(0xC471u);
  return result;
}

uint64_t WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 124);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 112);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::Logger *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::Logger *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  void *v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v46;
  unsigned int **v47;
  unsigned int **v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  WTF *v53;
  uint64_t v55;
  WTF::Logger *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint8_t buf[4];
  _BYTE v62[12];
  int v63;
  WTF::StringImpl *v64[3];

  v64[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v59, "destroying ");
    result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a1, &v58);
    if (v59)
    {
      v6 = *((_DWORD *)v59 + 1);
      if (v58)
      {
LABEL_8:
        v7 = *((_DWORD *)v58 + 1);
LABEL_9:
        if ((v7 | v6) < 0 || (result = (v6 + v7), __OFADD__(v6, v7)))
        {
          v60 = 0;
          goto LABEL_108;
        }
        if (v59)
        {
          v8 = *((_DWORD *)v59 + 4);
          v9 = (v8 >> 2) & 1;
          if (v58 && (v8 & 4) != 0)
            goto LABEL_14;
        }
        else
        {
          if (v58)
          {
LABEL_14:
            v9 = (*((unsigned __int8 *)v58 + 16) >> 2) & 1;
            goto LABEL_15;
          }
          v9 = 1;
        }
LABEL_15:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v59, (uint64_t)v58, &v60);
        if (v60)
        {
          v11 = v58;
          v58 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = v59;
          v59 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v10);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = *((_QWORD *)v4 + 4);
          v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v14)
          {
            WTF::String::utf8();
            v16 = v56 ? (char *)v56 + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)v62 = v16;
            _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v14 = (uint64_t)v56;
            v56 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 1)
                v14 = WTF::fastFree((WTF *)v14, v15);
              else
                --*(_DWORD *)v14;
            }
          }
          if (*v4 && v4[16] >= 4u)
          {
            v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v18 = *v17;
              if ((v18 & 1) != 0)
                break;
              v19 = __ldaxr(v17);
              if (v19 == v18)
              {
                if (!__stxr(v18 | 1, v17))
                {
                  v20 = WTF::Logger::observers((WTF::Logger *)v14);
                  v21 = *(unsigned int *)(v20 + 12);
                  if ((_DWORD)v21)
                  {
                    v22 = *(uint64_t **)v20;
                    v23 = *(_QWORD *)v20 + 8 * v21;
                    do
                    {
                      v24 = *v22;
                      *(_DWORD *)buf = 0;
                      WTF::String::String((WTF::String *)&v62[4], "destroying ");
                      v63 = 0;
                      WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a1, v64);
                      v56 = 0;
                      v57 = 0;
                      v25 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v57) = 2;
                      v56 = v25;
                      v26 = HIDWORD(v57);
                      *((_DWORD *)v25 + 4 * HIDWORD(v57)) = *(_DWORD *)buf;
                      v27 = *(_QWORD *)&v62[4];
                      if (*(_QWORD *)&v62[4])
                        **(_DWORD **)&v62[4] += 2;
                      *((_QWORD *)v25 + 2 * v26 + 1) = v27;
                      *((_DWORD *)v25 + 4 * (v26 + 1)) = v63;
                      v28 = v64[0];
                      if (v64[0])
                        *(_DWORD *)v64[0] += 2;
                      *((_QWORD *)v25 + 2 * (v26 + 1) + 1) = v28;
                      HIDWORD(v57) = v26 + 2;
                      (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v24 + 16))(v24, v4, 4, &v56);
                      v29 = v56;
                      if (HIDWORD(v57))
                      {
                        v30 = 16 * HIDWORD(v57);
                        v31 = (WTF::StringImpl **)((char *)v56 + 8);
                        do
                        {
                          v32 = *v31;
                          *v31 = 0;
                          if (v32)
                          {
                            if (*(_DWORD *)v32 == 2)
                              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v15);
                            else
                              *(_DWORD *)v32 -= 2;
                          }
                          v31 += 2;
                          v30 -= 16;
                        }
                        while (v30);
                        v29 = v56;
                      }
                      if (v29)
                      {
                        v56 = 0;
                        LODWORD(v57) = 0;
                        WTF::fastFree(v29, v15);
                      }
                      v33 = v64[0];
                      v64[0] = 0;
                      if (v33)
                      {
                        if (*(_DWORD *)v33 == 2)
                          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v33 -= 2;
                      }
                      v34 = *(WTF::StringImpl **)&v62[4];
                      *(_QWORD *)&v62[4] = 0;
                      if (v34)
                      {
                        if (*(_DWORD *)v34 == 2)
                          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v34 -= 2;
                      }
                      ++v22;
                    }
                    while (v22 != (uint64_t *)v23);
                  }
                  v35 = __ldxr(v17);
                  if (v35 == 1)
                  {
                    if (!__stlxr(0, v17))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v36 = v60;
          v60 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)v36 -= 2;
          }
          goto LABEL_71;
        }
LABEL_108:
        __break(0xC471u);
        return result;
      }
    }
    else
    {
      v6 = 0;
      if (v58)
        goto LABEL_8;
    }
    v7 = 0;
    goto LABEL_9;
  }
LABEL_71:
  WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::assertIsDead(a1);
  v38 = *(_DWORD *)(a1 + 124);
  if (v38)
  {
    v39 = *(uint64_t **)(a1 + 112);
    v40 = &v39[5 * v38];
    do
    {
      if (*v39)
      {
        WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::assertIsDead(*v39);
        v41 = (unsigned int *)*v39;
        *v39 = 0;
        if (v41)
        {
          v42 = v41 + 2;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            atomic_store(1u, v41 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 16))(v41);
          }
        }
      }
      else
      {
        *v39 = 0;
      }
      v39 += 5;
    }
    while (v39 != v40);
  }
  v45 = *(WTF **)(a1 + 112);
  if (v45)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v45, v37);
  }
  v46 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v46)
  {
    v47 = *(unsigned int ***)(a1 + 88);
    v48 = &v47[v46];
    do
    {
      v49 = *v47;
      *v47 = 0;
      if (v49)
      {
        v50 = v49 + 2;
        do
        {
          v51 = __ldaxr(v50);
          v52 = v51 - 1;
        }
        while (__stlxr(v52, v50));
        if (!v52)
        {
          atomic_store(1u, v49 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
        }
      }
      ++v47;
    }
    while (v47 != v48);
  }
  v53 = *(WTF **)(a1 + 88);
  if ((WTF *)(a1 + 104) != v53 && v53 != 0)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v53, v37);
  }
  v55 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v55 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E340EB50[v55])(buf, a1 + 56);
  *(_DWORD *)(a1 + 80) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore11ContentTypeENSA_18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E340EB68[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore11ContentTypeENSA_18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(uint64_t a1, char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  WTF::Lock *v12;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>>((uint64_t)v8, a3, " rejecting ", a1);
  v10 = *a2;
  v11 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, uint64_t))off_1E340EB50[v11])(&v16, a1 + 56);
  *(_BYTE *)(a1 + 56) = v10;
  *(_DWORD *)(a1 + 72) = 1;
  *(_DWORD *)(a1 + 80) = 1;
  WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::dispatchAll(a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    v12 = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v12);
  }
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, uint64_t a3)
{
  uint64_t result;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  char v12;
  int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  uint64_t v44;
  WTF::Logger *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint8_t buf[4];
  _BYTE v52[12];
  int v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56[3];

  v56[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v48, " ignored already resolved or rejected ");
  v44 = a3;
  result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a3, &v47);
  if (v49)
  {
    v7 = *((_DWORD *)v49 + 1);
    if (v48)
      goto LABEL_3;
LABEL_91:
    v8 = 0;
    if (v47)
      goto LABEL_4;
LABEL_92:
    v9 = 0;
    goto LABEL_5;
  }
  v7 = 0;
  if (!v48)
    goto LABEL_91;
LABEL_3:
  v8 = *((_DWORD *)v48 + 1);
  if (!v47)
    goto LABEL_92;
LABEL_4:
  v9 = *((_DWORD *)v47 + 1);
LABEL_5:
  if ((v9 | v8) < 0
    || ((v10 = __OFADD__(v8, v9), v11 = v8 + v9, !v10) ? (v12 = 0) : (v12 = 1),
        v7 < 0 || (v12 & 1) != 0 || (result = (v7 + v11), __OFADD__(v7, v11))))
  {
    v50 = 0;
    goto LABEL_96;
  }
  if (v49 && (*((_BYTE *)v49 + 16) & 4) == 0)
  {
    v13 = 0;
    goto LABEL_19;
  }
  if (v48)
  {
    v14 = *((_DWORD *)v48 + 4);
    v13 = (v14 >> 2) & 1;
    if (v47 && (v14 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v47)
    {
LABEL_18:
      v13 = (*((unsigned __int8 *)v47 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v13 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, v49, (uint64_t)v48, (uint64_t)v47, &v50);
  if (!v50)
  {
LABEL_96:
    __break(0xC471u);
    return result;
  }
  v16 = v47;
  v47 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v48;
  v48 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v49;
  v49 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(NSObject **)(a1 + 32);
  v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v20)
  {
    WTF::String::utf8();
    v22 = v45 ? (char *)v45 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v52 = v22;
    _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v20 = (uint64_t)v45;
    v45 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
        v20 = WTF::fastFree((WTF *)v20, v21);
      else
        --*(_DWORD *)v20;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v24 = *v23;
      if ((v24 & 1) != 0)
        break;
      v25 = __ldaxr(v23);
      if (v25 == v24)
      {
        if (!__stxr(v24 | 1, v23))
        {
          v26 = WTF::Logger::observers((WTF::Logger *)v20);
          v27 = *(unsigned int *)(v26 + 12);
          if ((_DWORD)v27)
          {
            v28 = *(uint64_t **)v26;
            v29 = *(_QWORD *)v26 + 8 * v27;
            do
            {
              v30 = *v28;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v53 = 0;
              WTF::String::String((WTF::String *)&v54, " ignored already resolved or rejected ");
              v55 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v44, v56);
              v45 = 0;
              v46 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v46) = 3;
              v45 = v31;
              v32 = HIDWORD(v46);
              *((_DWORD *)v31 + 4 * HIDWORD(v46)) = *(_DWORD *)buf;
              v33 = *(_QWORD *)&v52[4];
              if (*(_QWORD *)&v52[4])
                **(_DWORD **)&v52[4] += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v53;
              v34 = v54;
              if (v54)
                *(_DWORD *)v54 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v55;
              v35 = v56[0];
              if (v56[0])
                *(_DWORD *)v56[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v46) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, 4, &v45);
              v36 = v45;
              if (HIDWORD(v46))
              {
                v37 = 16 * HIDWORD(v46);
                v38 = (WTF::StringImpl **)((char *)v45 + 8);
                do
                {
                  v39 = *v38;
                  *v38 = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v21);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                  v38 += 2;
                  v37 -= 16;
                }
                while (v37);
                v36 = v45;
              }
              if (v36)
              {
                v45 = 0;
                LODWORD(v46) = 0;
                WTF::fastFree(v36, v21);
              }
              v40 = v56[0];
              v56[0] = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v40 -= 2;
              }
              v41 = v54;
              v54 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = *(WTF::StringImpl **)&v52[4];
              *(_QWORD *)&v52[4] = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v42 -= 2;
              }
              ++v28;
            }
            while (v28 != (uint64_t *)v29);
          }
          v43 = __ldxr(v23);
          if (v43 == 1)
          {
            if (!__stlxr(0, v23))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v50;
  v50 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  WTF::NativePromiseBase **v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::NativePromiseBase *v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v31;
  unsigned int v32;
  uint64_t v33;
  const char **v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;

  v34 = &v36;
  v35 = 1;
  v31 = (WTF *)&v33;
  v4 = *(WTF::NativePromiseBase ***)(a1 + 88);
  if (v4 == (WTF::NativePromiseBase **)(a1 + 104))
  {
    v5 = *(unsigned int *)(a1 + 100);
    memcpy(&v33, v4, 8 * v5);
    v4 = (WTF::NativePromiseBase **)&v33;
  }
  else
  {
    *(_QWORD *)(a1 + 88) = a1 + 104;
    v31 = (WTF *)v4;
    v5 = *(unsigned int *)(a1 + 100);
  }
  v32 = v5;
  *(_QWORD *)(a1 + 96) = 1;
  v6 = *(WTF **)(a1 + 112);
  v7 = *(_DWORD *)(a1 + 124);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    do
    {
      v9 = *v4++;
      WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(v9, a1, a2);
      v8 -= 8;
    }
    while (v8);
  }
  if (v7)
  {
    v10 = (unsigned int **)((char *)v6 + 40 * v7);
    v11 = a1 + 56;
    v12 = (unsigned int **)v6;
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        v14 = v13 + 2;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        v34 = 0;
        v35 = 0;
        v36 = "<chained promise>";
        v37 = 0;
        WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::Storage>((uint64_t)v13, v11, (WTF::Logger::LogSiteIdentifier *)&v34);
        do
        {
          v16 = __ldaxr(v14);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v14));
        if (!v17)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
        WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::assertIsDead((uint64_t)v13);
        do
        {
          v18 = __ldaxr(v14);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v14));
        if (!v19)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
      }
      else
      {
        v34 = 0;
        v35 = 0;
        v36 = "<chained promise>";
        v37 = 0;
        WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::Storage>(0, v11, (WTF::Logger::LogSiteIdentifier *)&v34);
      }
      v12 += 5;
    }
    while (v12 != v10);
    v20 = (uint64_t *)v6;
    do
    {
      if (*v20)
      {
        WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::assertIsDead(*v20);
        v21 = (unsigned int *)*v20;
        *v20 = 0;
        if (v21)
        {
          v22 = v21 + 2;
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            atomic_store(1u, v21 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
          }
        }
      }
      else
      {
        *v20 = 0;
      }
      v20 += 5;
    }
    while (v20 != (uint64_t *)v10);
  }
  if (v6)
    WTF::fastFree(v6, a2);
  v25 = v31;
  if (v32)
  {
    do
    {
      v26 = *(unsigned int **)v25;
      *(_QWORD *)v25 = 0;
      if (v26)
      {
        v27 = v26 + 2;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v26 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
        }
      }
      v25 = (WTF *)((char *)v25 + 8);
    }
    while (v25 != (WTF *)((char *)v31 + 8 * v32));
    v25 = v31;
  }
  if (&v33 != (uint64_t *)v25 && v25 != 0)
    WTF::fastFree(v25, a2);
}

WTF::Lock *WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 80);
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E340EB50[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 80) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E340EB88[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore11ContentTypeENSA_18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E340EB50[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore11ContentTypeENSA_18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  _BYTE *v12;
  BOOL v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE v19[16];
  int v20;
  _BYTE v21[16];
  int v22;
  char v23;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = (_BYTE *)a2;
      v19[0] = 0;
      v20 = -1;
      v7 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v7 == -1)
      {
        v8 = *(_DWORD *)(a2 + 16);
        if (v8 == -1)
        {
LABEL_41:
          if (v20 != -1)
            return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E340EB68[v20])(v21, v19);
          return result;
        }
      }
      else
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))off_1E340EB78[v7])(v21, v19, a3);
        v20 = v7;
        v8 = *((_DWORD *)v6 + 4);
        if (v8 != -1 && (_DWORD)v7 == v8)
        {
          result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))off_1E340EBA0[v7])(v21, v19, v6);
          goto LABEL_41;
        }
        if ((_DWORD)v7 != 1)
        {
          v14 = v19;
LABEL_32:
          v21[0] = 0;
          v22 = -1;
          if (v8 != -1)
          {
            result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E340EB78[v8])(&v23, v21, v6);
            v22 = v8;
            v15 = *((unsigned int *)v6 + 4);
            if ((_DWORD)v15 != -1)
              result = ((uint64_t (*)(char *, _BYTE *))off_1E340EB68[v15])(&v23, v6);
          }
          *((_DWORD *)v6 + 4) = -1;
          v16 = *((unsigned int *)v14 + 4);
          if ((_DWORD)v16 != -1)
          {
            result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E340EBB0[v16])(&v23, v6, v14);
            *((_DWORD *)v6 + 4) = v16;
            v17 = *((unsigned int *)v14 + 4);
            if ((_DWORD)v17 != -1)
              result = ((uint64_t (*)(char *, _BYTE *))off_1E340EB68[v17])(&v23, v14);
          }
          *((_DWORD *)v14 + 4) = -1;
          v18 = v22;
          if (v22 != -1)
          {
            result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E340EBB0[v22])(&v23, v14, v21);
            *((_DWORD *)v14 + 4) = v18;
            if (v22 != -1)
              result = ((uint64_t (*)(char *, _BYTE *))off_1E340EB68[v22])(&v23, v21);
          }
          goto LABEL_41;
        }
      }
      v10 = v19;
      if (v8 == 1)
        v11 = 1;
      else
        v11 = v7;
      if (v8 == 1)
        v12 = v19;
      else
        v12 = v6;
      if (v8 == 1)
        v10 = v6;
      v13 = v8 == -1;
      if (v8 == -1)
        v8 = -1;
      else
        v8 = v11;
      if (v13)
        v14 = v19;
      else
        v14 = v12;
      if (!v13)
        v6 = v10;
      goto LABEL_32;
    }
    result = ((uint64_t (*)(_BYTE *, uint64_t))off_1E340EB50[v5])(v21, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 16) = -1;
  v9 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v9 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E340EB78[v9])(v21, v4, a3);
    *(_DWORD *)(v4 + 16) = v9;
  }
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore11ContentTypeENSA_18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E340EB50[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore11ContentTypeENS7_18PlatformMediaErrorEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_S9_EEESL_EEEDcSC_DpT0_(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  char v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;

  v5 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v6 = *((_BYTE *)a2 + 8);
  v7 = *(WTF::StringImpl **)a3;
  *(_QWORD *)a3 = 0;
  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  *((_BYTE *)a2 + 8) = *(_BYTE *)(a3 + 8);
  result = *(WTF::StringImpl **)a3;
  *(_QWORD *)a3 = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_BYTE *)(a3 + 8) = v6;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore11ContentTypeENS7_18PlatformMediaErrorEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_S9_EEESL_EEEDcSC_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11ContentTypeENS8_18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11ContentTypeENS8_18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::resolve<WebCore::ContentType,std::enable_if<true,void>>(uint64_t a1, uint64_t *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *v12;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>>((uint64_t)v8, a3, " resolving ", a1);
  v10 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, uint64_t))off_1E340EB50[v10])(&v16, a1 + 56);
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 8);
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 1;
  WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::dispatchAll(a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    v12 = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v12);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSourcePrivate::durationChanged(WTF::MediaTime const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  v3 = a1[1];
  *a1 = &off_1E340EBD0;
  a1[1] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSourcePrivate::durationChanged(WTF::MediaTime const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E340EBD0;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSourcePrivate::durationChanged(WTF::MediaTime const&)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = result[2];
  v2 = *(unsigned int *)(v1 + 28);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 16);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      v6 = *(_QWORD *)((char *)result + 29);
      *(_QWORD *)(v5 + 256) = result[3];
      *(_QWORD *)(v5 + 261) = v6;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Path::segments(void)::$_0,void,WebCore::PathSegment const&>::call(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(unsigned int *)(v2 + 12);
  if ((_DWORD)v3 == *(_DWORD *)(v2 + 8))
  {
    result = WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(result + 8), v3 + 1, a2);
    v4 = *(_QWORD *)v2 + 56 * *(unsigned int *)(v2 + 12);
    v5 = *(_OWORD *)result;
    v6 = *(_OWORD *)(result + 16);
    v7 = *(_OWORD *)(result + 32);
    v8 = *(_QWORD *)(result + 48);
  }
  else
  {
    v4 = *(_QWORD *)v2 + 56 * v3;
    v5 = *(_OWORD *)a2;
    v6 = *(_OWORD *)(a2 + 16);
    v7 = *(_OWORD *)(a2 + 32);
    v8 = *(_QWORD *)(a2 + 48);
  }
  *(_QWORD *)(v4 + 48) = v8;
  *(_OWORD *)(v4 + 16) = v6;
  *(_OWORD *)(v4 + 32) = v7;
  *(_OWORD *)v4 = v5;
  ++*(_DWORD *)(v2 + 12);
  return result;
}

uint64_t WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 56 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x4924925)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 56 * v8;
    v11 = WTF::fastMalloc((WTF *)(56 * v8));
    *(_DWORD *)(v4 + 8) = v10 / 0x38;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v13 = 56 * v9;
      v14 = v5;
      do
      {
        v15 = *(_OWORD *)v14;
        v16 = *((_OWORD *)v14 + 1);
        v17 = *((_OWORD *)v14 + 2);
        *(_QWORD *)(v11 + 48) = *((_QWORD *)v14 + 6);
        *(_OWORD *)(v11 + 16) = v16;
        *(_OWORD *)(v11 + 32) = v17;
        *(_OWORD *)v11 = v15;
        v11 += 56;
        v14 = (WTF *)((char *)v14 + 56);
        v13 -= 56;
      }
      while (v13);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x4924925)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *(WTF **)result;
      v7 = *(unsigned int *)(result + 12);
      v8 = 56 * v4;
      result = WTF::fastMalloc((WTF *)(56 * v4));
      *(_DWORD *)(v5 + 8) = v8 / 0x38;
      *(_QWORD *)v5 = result;
      if ((_DWORD)v7)
      {
        v10 = 56 * v7;
        v11 = v6;
        do
        {
          v12 = *(_OWORD *)v11;
          v13 = *((_OWORD *)v11 + 1);
          v14 = *((_OWORD *)v11 + 2);
          *(_QWORD *)(result + 48) = *((_QWORD *)v11 + 6);
          *(_OWORD *)(result + 16) = v13;
          *(_OWORD *)(result + 32) = v14;
          *(_OWORD *)result = v12;
          result += 56;
          v11 = (WTF *)((char *)v11 + 56);
          v10 -= 56;
        }
        while (v10);
      }
      if (v6)
      {
        if (*(WTF **)v5 == v6)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        return WTF::fastFree(v6, v9);
      }
    }
  }
  return result;
}

BOOL WTF::Detail::CallableWrapper<WebCore::Path::length(void)::$_0,void,WebCore::PathElement const&>::call(_BOOL8 result, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  WebCore::FloatPoint *v4;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  v2 = *(_QWORD *)(result + 8);
  if (!*(_BYTE *)(v2 + 4))
  {
    v4 = (WebCore::FloatPoint *)(a2 + 4);
    v3 = *a2;
    if (*(_BYTE *)(v2 + 44))
    {
      v5 = *(_OWORD *)(v2 + 16);
      v6[0] = *(_OWORD *)v2;
      v6[1] = v5;
      v7 = *(_OWORD *)(v2 + 32);
      result = WebCore::PathTraversalState::appendPathElement((WebCore::PathTraversalState *)v6, v3, v4);
      *(_BYTE *)(v2 + 4) = result;
      *(_DWORD *)(v2 + 40) = DWORD2(v7);
    }
    else
    {
      return WebCore::PathTraversalState::appendPathElement(*(WebCore::PathTraversalState **)(result + 8), v3, v4);
    }
  }
  return result;
}

BOOL WTF::Detail::CallableWrapper<WebCore::Path::traversalStateAtLength(float)::$_0,void,WebCore::PathElement const&>::call(_BOOL8 result, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  WebCore::FloatPoint *v4;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  v2 = *(_QWORD *)(result + 8);
  if (!*(_BYTE *)(v2 + 4))
  {
    v4 = (WebCore::FloatPoint *)(a2 + 4);
    v3 = *a2;
    if (*(_BYTE *)(v2 + 44))
    {
      v5 = *(_OWORD *)(v2 + 16);
      v6[0] = *(_OWORD *)v2;
      v6[1] = v5;
      v7 = *(_OWORD *)(v2 + 32);
      result = WebCore::PathTraversalState::appendPathElement((WebCore::PathTraversalState *)v6, v3, v4);
      *(_BYTE *)(v2 + 4) = result;
      *(_DWORD *)(v2 + 40) = DWORD2(v7);
    }
    else
    {
      return WebCore::PathTraversalState::appendPathElement(*(WebCore::PathTraversalState **)(result + 8), v3, v4);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::operator<<(WTF::TextStream &,WebCore::Path const&)::$_0,void,WebCore::PathSegment const&>::call(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  WebCore::PathImpl *v7;
  const WebCore::FloatRoundedRect *v8;
  uint64_t v9;
  uint64_t *v10;

  v4 = *(_BYTE **)(a1 + 16);
  if (*v4)
    *v4 = 0;
  else
    WTF::TextStream::operator<<();
  v9 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned int *)(a2 + 52);
  if ((_DWORD)v5 == -1)
  {
    v7 = (WebCore::PathImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::PathImpl::addBeziersForRoundedRect(v7, v8);
  }
  else
  {
    v10 = &v9;
    return ((uint64_t (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCorelsERNS6_10TextStreamERKNS8_11PathSegmentEE3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v10, a2);
  }
}

uint64_t WebCore::PathImpl::addBeziersForRoundedRect(WebCore::PathImpl *this, const WebCore::FloatRoundedRect *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v19[6];
  float v20[6];
  float v21[6];
  float v22[6];

  (*(void (**)(WebCore::PathImpl *, float, float))(*(_QWORD *)this + 32))(this, *(float *)a2 + *((float *)a2 + 4), *((float *)a2 + 1));
  (*(void (**)(WebCore::PathImpl *, float, float))(*(_QWORD *)this + 40))(this, (float)(*(float *)a2 + *((float *)a2 + 2)) - *((float *)a2 + 6), *((float *)a2 + 1));
  v5 = *((float *)a2 + 6);
  v4 = *((float *)a2 + 7);
  if (v5 > 0.0 || v4 > 0.0)
  {
    v6 = *((float *)a2 + 1);
    v7 = *(float *)a2 + *((float *)a2 + 2);
    v22[0] = v7 - (float)(v5 * 0.44772);
    v22[1] = v6;
    v22[2] = v7;
    v22[3] = v6 + (float)(v4 * 0.44772);
    v22[4] = v7;
    v22[5] = v4 + v6;
    (*(void (**)(WebCore::PathImpl *, float *))(*(_QWORD *)this + 56))(this, v22);
  }
  (*(void (**)(WebCore::PathImpl *, float, float))(*(_QWORD *)this + 40))(this, *(float *)a2 + *((float *)a2 + 2), (float)(*((float *)a2 + 1) + *((float *)a2 + 3)) - *((float *)a2 + 11));
  v8 = *((float *)a2 + 10);
  v9 = *((float *)a2 + 11);
  if (v8 > 0.0 || v9 > 0.0)
  {
    v10 = *((float *)a2 + 1) + *((float *)a2 + 3);
    v21[0] = *(float *)a2 + *((float *)a2 + 2);
    v21[1] = v10 - (float)(v9 * 0.44772);
    v21[2] = v21[0] - (float)(v8 * 0.44772);
    v21[3] = v10;
    v21[4] = v21[0] - v8;
    v21[5] = v10;
    (*(void (**)(WebCore::PathImpl *, float *))(*(_QWORD *)this + 56))(this, v21);
  }
  (*(void (**)(WebCore::PathImpl *, float, float))(*(_QWORD *)this + 40))(this, *(float *)a2 + *((float *)a2 + 8), *((float *)a2 + 1) + *((float *)a2 + 3));
  v12 = *((float *)a2 + 8);
  v11 = *((float *)a2 + 9);
  if (v12 > 0.0 || v11 > 0.0)
  {
    v13 = *(float *)a2;
    v14 = *((float *)a2 + 1) + *((float *)a2 + 3);
    v20[0] = *(float *)a2 + (float)(v12 * 0.44772);
    v20[1] = v14;
    v20[2] = v13;
    v20[3] = v14 - (float)(v11 * 0.44772);
    v20[4] = v13;
    v20[5] = v14 - v11;
    (*(void (**)(WebCore::PathImpl *, float *))(*(_QWORD *)this + 56))(this, v20);
  }
  (*(void (**)(WebCore::PathImpl *, float, float))(*(_QWORD *)this + 40))(this, *(float *)a2, *((float *)a2 + 1) + *((float *)a2 + 5));
  v15 = *((float *)a2 + 4);
  v16 = *((float *)a2 + 5);
  if (v15 > 0.0 || v16 > 0.0)
  {
    v17 = *((float *)a2 + 1);
    v19[0] = *(float *)a2;
    v19[1] = v17 + (float)(v16 * 0.44772);
    v19[2] = v19[0] + (float)(v15 * 0.44772);
    v19[3] = v17;
    v19[4] = v15 + v19[0];
    v19[5] = v17;
    (*(void (**)(WebCore::PathImpl *, float *))(*(_QWORD *)this + 56))(this, v19);
  }
  return (*(uint64_t (**)(WebCore::PathImpl *))(*(_QWORD *)this + 120))(this);
}

uint64_t WebCore::PathImpl::applySegments(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E340EE30;
  v4[1] = a2;
  v6 = v4;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)a1 + 136))(a1, &v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::PathImpl::isClosed(WebCore::PathImpl *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  unsigned __int8 v6;

  v6 = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E340EE58;
  v2[1] = &v6;
  v5 = v2;
  (*(void (**)(WebCore::PathImpl *, _QWORD **))(*(_QWORD *)this + 136))(this, &v5);
  v3 = v5;
  v5 = 0;
  if (v3)
    (*(void (**)(_QWORD *))(*v3 + 8))(v3);
  return v6;
}

BOOL WebCore::PathImpl::hasSubpaths(WebCore::PathImpl *this)
{
  float v1;
  float v2;

  (*(void (**)(WebCore::PathImpl *))(*(_QWORD *)this + 232))(this);
  return v2 != 0.0 || v1 != 0.0;
}

uint64_t WebCore::PathSegment::calculateEndPoint(WebCore::PathSegment *this, const WebCore::FloatPoint *a2, WebCore::FloatPoint *a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[2];
  _QWORD *v7;

  v6[0] = a2;
  v6[1] = a3;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::operator<<(v5);
  }
  else
  {
    v7 = v6;
    return ((uint64_t (*)(_QWORD **, WebCore::PathSegment *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment17calculateEndPointERKNS8_10FloatPointERSA_E3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v7, this);
  }
}

void WebCore::PathArc::extendBoundingRect(float32x2_t *this, float32x2_t *a2, const WebCore::FloatPoint *a3, WebCore::FloatRect *a4, double a5, double a6, int32x2_t a7)
{
  float v8;
  float32x2_t v9;
  int8x8_t v10;
  float32x2_t v11;
  float v12;
  __float2 v14;
  float v15;
  float v16;
  __float2 v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;
  float32x2_t v25;
  float v26;
  float v28;
  BOOL v29;
  float v30;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  int8x8_t v42;
  int8x8_t v43;
  int8x8_t v44;
  float32x2_t v45;
  int8x8_t v46;
  float32x2_t v47;
  float v48;
  float32x2_t v49;

  a7.i32[0] = this[1].i32[0];
  v8 = this[1].f32[1];
  v9 = (float32x2_t)vdup_lane_s32(a7, 0);
  v10 = (int8x8_t)vsub_f32(*this, v9);
  v11 = vsub_f32(vadd_f32(v9, *this), (float32x2_t)v10);
  v12 = this[2].f32[0];
  if ((float)(v12 - v8) >= 6.2832)
  {
    v42 = (int8x8_t)vadd_f32((float32x2_t)v10, v11);
    v43 = vbsl_s8((int8x8_t)vcgt_f32(*a2, (float32x2_t)v10), v10, (int8x8_t)*a2);
    v44 = (int8x8_t)vadd_f32(*a2, a2[1]);
    v45 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v43, (float32x2_t)v42), v42, v43);
    v46 = (int8x8_t)vadd_f32((float32x2_t)v43, vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v10, (float32x2_t)v44), v10, v44), (float32x2_t)v43));
    *a2 = v45;
    a2[1] = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v42, (float32x2_t)v46), v42, v46), v45);
  }
  else
  {
    v47 = (float32x2_t)v10;
    v48 = this[1].f32[0];
    v49 = *this;
    v14 = __sincosf_stret(this[1].f32[1]);
    v15 = v49.f32[0] + (float)(v48 * v14.__cosval);
    v16 = v49.f32[1] + (float)(v48 * v14.__sinval);
    v17 = __sincosf_stret(v12);
    v18 = v49.f32[0] + (float)(v48 * v17.__cosval);
    v19 = v49.f32[1] + (float)(v48 * v17.__sinval);
    if (v15 <= v18)
      v20 = v49.f32[0] + (float)(v48 * v17.__cosval);
    else
      v20 = v49.f32[0] + (float)(v48 * v14.__cosval);
    if (v15 <= v18)
      v18 = v49.f32[0] + (float)(v48 * v14.__cosval);
    if (v16 <= v19)
      v21 = v49.f32[1] + (float)(v48 * v17.__sinval);
    else
      v21 = v49.f32[1] + (float)(v48 * v14.__sinval);
    if (v16 <= v19)
      v19 = v49.f32[1] + (float)(v48 * v14.__sinval);
    v22 = v12 + -6.2832;
    if (this[2].i8[4])
    {
      v22 = v8;
      v23 = v12;
    }
    else
    {
      v23 = v8;
    }
    v24 = v23 < 0.0 || v22 > 0.0;
    v25 = vadd_f32(v47, v11);
    if (!v24)
      v20 = v25.f32[0];
    v26 = flt_1969F7CD0[this[2].i8[4] == 0];
    if (v26 <= v23 && v26 >= v22)
      v21 = v25.f32[1];
    v28 = flt_1969F7CD8[this[2].i8[4] == 0];
    v29 = v28 > v23 || v28 < v22;
    v30 = flt_1969F7CE0[this[2].i8[4] == 0];
    if (!v29)
      v18 = v47.f32[0];
    if (v30 <= v23 && v30 >= v22)
      v19 = v47.f32[1];
    v32 = a2->f32[1];
    if (v18 >= a2->f32[0])
      v33 = a2->f32[0];
    else
      v33 = v18;
    if (v19 >= v32)
      v34 = a2->f32[1];
    else
      v34 = v19;
    v35 = a2[1].f32[1];
    if ((float)(a2->f32[0] + a2[1].f32[0]) >= v18)
      v18 = a2->f32[0] + a2[1].f32[0];
    if ((float)(v32 + v35) >= v19)
      v19 = v32 + v35;
    v36 = v18 - v33;
    v37 = v19 - v34;
    if (v20 >= v33)
      v38 = v33;
    else
      v38 = v20;
    if (v21 >= v34)
      v39 = v34;
    else
      v39 = v21;
    v40 = v33 + v36;
    if (v40 < v20)
      v40 = v20;
    v41 = v34 + v37;
    if (v41 < v21)
      v41 = v21;
    a2->f32[0] = v38;
    a2->f32[1] = v39;
    a2[1].f32[0] = v40 - v38;
    a2[1].f32[1] = v41 - v39;
  }
}

float WebCore::PathEllipse::calculateEndPoint(WebCore::PathEllipse *this, const WebCore::FloatPoint *a2, WebCore::FloatPoint *a3)
{
  float v5;
  __float2 v6;
  float v7;
  float v8;
  float v9;
  __float2 v10;
  float v11;
  float v12;
  float v13;
  __double2 v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  BOOL v20;
  double v21;
  float v22;
  float v23;

  v5 = *((float *)this + 2);
  v6 = __sincosf_stret(*((float *)this + 5));
  v7 = *(float *)this + (float)(v5 * v6.__cosval);
  v8 = *((float *)this + 1) - (float)(*((float *)this + 3) * v6.__sinval);
  *(float *)a2 = v7;
  *((float *)a2 + 1) = v8;
  v9 = *((float *)this + 2);
  v10 = __sincosf_stret(*((float *)this + 6));
  v11 = *(float *)this + (float)(v9 * v10.__cosval);
  v12 = *((float *)this + 4);
  v13 = *((float *)this + 1) - (float)(*((float *)this + 3) * v10.__sinval);
  if (v12 != 0.0)
  {
    v14 = __sincos_stret((float)(v12 * 0.017453) * 0.0174532925);
    v15 = 0.0;
    v16 = v14.__cosval + v14.__sinval * 0.0;
    v17 = v14.__sinval + v14.__cosval * 0.0;
    v18 = v14.__cosval * 0.0 - v14.__sinval;
    v19 = v14.__cosval - v14.__sinval * 0.0;
    if (v19 != 1.0 || v18 != 0.0 || (v17 == 0.0 ? (v20 = v16 == 1.0) : (v20 = 0), v21 = 0.0, !v20))
    {
      v15 = v18 * -0.0 + v16 * -0.0 + 0.0;
      v21 = v19 * -0.0 + v17 * -0.0 + 0.0;
    }
    v22 = v15 + v18 * v8 + v16 * v7;
    v23 = v21 + v19 * v8 + v17 * v7;
    *(float *)a2 = v22;
    *((float *)a2 + 1) = v23;
    return v18 * v13 + v16 * v11 + v15;
  }
  return v11;
}

float32x2_t WebCore::PathRect::extendBoundingRect(float32x2_t *this, float32x2_t *a2, const WebCore::FloatPoint *a3, WebCore::FloatRect *a4)
{
  float32x2_t v7;

  v7 = *this;
  WebCore::FloatRect::extend(a2, &v7);
  v7 = vadd_f32(*this, this[1]);
  return WebCore::FloatRect::extend(a2, &v7);
}

float WebCore::PathDataArc::calculateEndPoint(WebCore::PathDataArc *this, const WebCore::FloatPoint *a2, WebCore::FloatPoint *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  *(_QWORD *)a2 = *(_QWORD *)this;
  v4 = *((float *)this + 5);
  v3 = *((float *)this + 6);
  v5 = *((float *)this + 3);
  v6 = *((float *)this + 4);
  v7 = *((float *)this + 2);
  v8 = *((float *)this + 1) - v5;
  if (vabds_f32(*(float *)this, v7) >= 0.00001)
    v9 = atan2f(v8, *(float *)this - v7);
  else
    v9 = flt_1969F7CF0[v8 >= 0.0];
  v10 = v5 - v4;
  if (vabds_f32(v7, v6) >= 0.00001)
    v11 = atan2f(v10, v7 - v6);
  else
    v11 = flt_1969F7CF0[v10 >= 0.0];
  v12 = vabds_f32(v11, v9);
  if (v12 < 1.5708 && v12 >= 0.00001)
  {
    v13 = fabsf(v3 / tanf((float)(v11 - v9) * 0.5));
    return v7 + (float)(v13 * __sincosf_stret(v11).__cosval);
  }
  return v7;
}

__n128 WebCore::PathStream::create@<Q0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __n128 v10;
  uint64_t v11;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E340EC98;
  v8 = *a1;
  v9 = a1[1];
  v10 = (__n128)a1[2];
  v11 = *((_QWORD *)a1 + 6);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v5 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v4 + 24) = 1;
  *(_QWORD *)(v4 + 16) = v5;
  v6 = v5 + 56 * *(unsigned int *)(v4 + 28);
  *(_OWORD *)v6 = v8;
  *(_OWORD *)(v6 + 16) = v9;
  result = v10;
  *(__n128 *)(v6 + 32) = v10;
  *(_QWORD *)(v6 + 48) = v11;
  ++*(_DWORD *)(v4 + 28);
  *a2 = v4;
  return result;
}

uint64_t WebCore::PathStream::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E340EC98;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *a2 = result;
  if (*(_DWORD *)(a1 + 12) >= 2u)
  {
    v5 = result;
    WebCore::PathStream::add(result, **(float **)a1, *(float *)(*(_QWORD *)a1 + 4));
    if (*(_DWORD *)(a1 + 12) >= 2u)
    {
      v6 = 0;
      v7 = 1;
      do
      {
        WebCore::PathStream::add(v5, *(float *)(*(_QWORD *)a1 + v6 + 8), *(float *)(*(_QWORD *)a1 + v6 + 12));
        ++v7;
        v6 += 8;
      }
      while (v7 < *(unsigned int *)(a1 + 12));
    }
    return WebCore::PathStream::add(v5);
  }
  return result;
}

uint64_t WebCore::PathStream::add(uint64_t result, float a2, float a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  WTF *v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  _BYTE v20[28];

  v5 = result;
  v6 = *(unsigned int *)(result + 28);
  if ((_DWORD)v6 != *(_DWORD *)(result + 24))
  {
    v18 = *(_QWORD *)(result + 16) + 56 * v6;
    *(float *)v18 = a2;
    *(float *)(v18 + 4) = a3;
LABEL_18:
    *(_DWORD *)(v18 + 52) = 0;
    ++*(_DWORD *)(v5 + 28);
    return result;
  }
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= v6 + 1)
    v9 = v6 + 1;
  else
    v9 = v8;
  if (v9 < 0x4924925)
  {
    v10 = *(WTF **)(result + 16);
    v11 = 56 * v9;
    result = WTF::fastMalloc((WTF *)(56 * v9));
    *(_DWORD *)(v5 + 24) = v11 / 0x38;
    *(_QWORD *)(v5 + 16) = result;
    if ((_DWORD)v6)
    {
      v13 = 56 * v6;
      v14 = v10;
      do
      {
        v15 = *(_OWORD *)v14;
        v16 = *((_OWORD *)v14 + 1);
        v17 = *((_OWORD *)v14 + 2);
        *(_QWORD *)(result + 48) = *((_QWORD *)v14 + 6);
        *(_OWORD *)(result + 16) = v16;
        *(_OWORD *)(result + 32) = v17;
        *(_OWORD *)result = v15;
        result += 56;
        v14 = (WTF *)((char *)v14 + 56);
        v13 -= 56;
      }
      while (v13);
      result = *(_QWORD *)(v5 + 16);
    }
    if (v10)
    {
      if ((WTF *)result == v10)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
      }
      WTF::fastFree(v10, v12);
      result = *(_QWORD *)(v5 + 16);
    }
    v18 = result + 56 * *(unsigned int *)(v5 + 28);
    *(float *)v18 = a2;
    *(float *)(v18 + 4) = a3;
    *(_OWORD *)(v18 + 36) = *(_OWORD *)&v20[12];
    *(_OWORD *)(v18 + 24) = *(_OWORD *)v20;
    *(_OWORD *)(v18 + 8) = v19;
    goto LABEL_18;
  }
  __break(0xC471u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  _BYTE v23[28];

  v5 = result;
  v6 = *(unsigned int *)(result + 28);
  if ((_DWORD)v6 && (v7 = *(_QWORD *)(result + 16)) != 0 && (v8 = v7 + 56 * v6, !*(_DWORD *)(v8 - 4)))
  {
    v21 = v8 - 56;
    *(_QWORD *)(v21 + 8) = LODWORD(a2) | ((unint64_t)LODWORD(a3) << 32);
    *(_DWORD *)(v21 + 52) = 11;
  }
  else
  {
    if ((_DWORD)v6 != *(_DWORD *)(result + 24))
    {
      v9 = *(_QWORD *)(result + 16) + 56 * v6;
      *(float *)v9 = a2;
      *(float *)(v9 + 4) = a3;
LABEL_6:
      *(_DWORD *)(v9 + 52) = 1;
      ++*(_DWORD *)(v5 + 28);
      return result;
    }
    v10 = v6 + (v6 >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 <= v6 + 1)
      v12 = v6 + 1;
    else
      v12 = v11;
    if (v12 < 0x4924925)
    {
      v13 = *(WTF **)(result + 16);
      v14 = 56 * v12;
      result = WTF::fastMalloc((WTF *)(56 * v12));
      *(_DWORD *)(v5 + 24) = v14 / 0x38;
      *(_QWORD *)(v5 + 16) = result;
      if ((_DWORD)v6)
      {
        v16 = 56 * v6;
        v17 = v13;
        do
        {
          v18 = *(_OWORD *)v17;
          v19 = *((_OWORD *)v17 + 1);
          v20 = *((_OWORD *)v17 + 2);
          *(_QWORD *)(result + 48) = *((_QWORD *)v17 + 6);
          *(_OWORD *)(result + 16) = v19;
          *(_OWORD *)(result + 32) = v20;
          *(_OWORD *)result = v18;
          result += 56;
          v17 = (WTF *)((char *)v17 + 56);
          v16 -= 56;
        }
        while (v16);
        result = *(_QWORD *)(v5 + 16);
      }
      if (v13)
      {
        if ((WTF *)result == v13)
        {
          *(_QWORD *)(v5 + 16) = 0;
          *(_DWORD *)(v5 + 24) = 0;
        }
        WTF::fastFree(v13, v15);
        result = *(_QWORD *)(v5 + 16);
      }
      v9 = result + 56 * *(unsigned int *)(v5 + 28);
      *(float *)v9 = a2;
      *(float *)(v9 + 4) = a3;
      *(_OWORD *)(v9 + 36) = *(_OWORD *)&v23[12];
      *(_OWORD *)(v9 + 24) = *(_OWORD *)v23;
      *(_OWORD *)(v9 + 8) = v22;
      goto LABEL_6;
    }
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::PathStream::add(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  WTF *v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v1 = result;
  v2 = *(unsigned int *)(result + 28);
  if ((_DWORD)v2 != *(_DWORD *)(result + 24))
  {
    v3 = *(_QWORD *)(result + 16) + 56 * v2;
LABEL_3:
    *(_DWORD *)(v3 + 52) = 15;
    ++*(_DWORD *)(v1 + 28);
    return result;
  }
  v4 = v2 + (v2 >> 2);
  if (v4 >= 0x10)
    v5 = v4 + 1;
  else
    v5 = 16;
  if (v5 <= v2 + 1)
    v6 = v2 + 1;
  else
    v6 = v5;
  if (v6 < 0x4924925)
  {
    v7 = *(WTF **)(result + 16);
    v8 = 56 * v6;
    result = WTF::fastMalloc((WTF *)(56 * v6));
    *(_DWORD *)(v1 + 24) = v8 / 0x38;
    *(_QWORD *)(v1 + 16) = result;
    if ((_DWORD)v2)
    {
      v10 = 56 * v2;
      v11 = v7;
      do
      {
        v12 = *(_OWORD *)v11;
        v13 = *((_OWORD *)v11 + 1);
        v14 = *((_OWORD *)v11 + 2);
        *(_QWORD *)(result + 48) = *((_QWORD *)v11 + 6);
        *(_OWORD *)(result + 16) = v13;
        *(_OWORD *)(result + 32) = v14;
        *(_OWORD *)result = v12;
        result += 56;
        v11 = (WTF *)((char *)v11 + 56);
        v10 -= 56;
      }
      while (v10);
      result = *(_QWORD *)(v1 + 16);
    }
    if (v7)
    {
      if ((WTF *)result == v7)
      {
        *(_QWORD *)(v1 + 16) = 0;
        *(_DWORD *)(v1 + 24) = 0;
      }
      WTF::fastFree(v7, v9);
      result = *(_QWORD *)(v1 + 16);
    }
    v3 = result + 56 * *(unsigned int *)(v1 + 28);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::PathStream::add(uint64_t result, float a2, int32x2_t a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  __int32 v26;
  __int128 v28;
  __int128 v29;
  int v30;

  v5 = result;
  v6 = *(unsigned int *)(result + 28);
  if ((_DWORD)v6 && (v7 = *(_QWORD *)(result + 16)) != 0 && (v8 = v7 + 56 * v6, !*(_DWORD *)(v8 - 4)))
  {
    v22 = v8 - 56;
    *(float *)&a3.i32[1] = a5;
    v23.i64[0] = LODWORD(a2);
    v23.i64[1] = LODWORD(a4);
    *(int8x16_t *)(v22 + 8) = vorrq_s8((int8x16_t)vshll_n_s32(a3, 0x20uLL), v23);
    *(_DWORD *)(v22 + 52) = 12;
  }
  else
  {
    if ((_DWORD)v6 != *(_DWORD *)(result + 24))
    {
      v9 = *(_QWORD *)(result + 16) + 56 * v6;
      *(float *)v9 = a2;
      *(_DWORD *)(v9 + 4) = a3.i32[0];
      *(float *)(v9 + 8) = a4;
      *(float *)(v9 + 12) = a5;
      *(_DWORD *)(v9 + 52) = 2;
LABEL_22:
      ++*(_DWORD *)(v5 + 28);
      return result;
    }
    v26 = a3.i32[0];
    v10 = v6 + (v6 >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 <= v6 + 1)
      v12 = v6 + 1;
    else
      v12 = v11;
    if (v12 < 0x4924925)
    {
      v13 = *(WTF **)(result + 16);
      v14 = 56 * v12;
      result = WTF::fastMalloc((WTF *)(56 * v12));
      *(_DWORD *)(v5 + 24) = v14 / 0x38;
      *(_QWORD *)(v5 + 16) = result;
      if ((_DWORD)v6)
      {
        v16 = 56 * v6;
        v17 = v13;
        do
        {
          v18 = *(_OWORD *)v17;
          v19 = *((_OWORD *)v17 + 1);
          v20 = *((_OWORD *)v17 + 2);
          *(_QWORD *)(result + 48) = *((_QWORD *)v17 + 6);
          *(_OWORD *)(result + 16) = v19;
          *(_OWORD *)(result + 32) = v20;
          *(_OWORD *)result = v18;
          result += 56;
          v17 = (WTF *)((char *)v17 + 56);
          v16 -= 56;
        }
        while (v16);
        result = *(_QWORD *)(v5 + 16);
      }
      if (v13)
      {
        if ((WTF *)result == v13)
        {
          *(_QWORD *)(v5 + 16) = 0;
          *(_DWORD *)(v5 + 24) = 0;
        }
        WTF::fastFree(v13, v15);
        result = *(_QWORD *)(v5 + 16);
      }
      v21 = result + 56 * *(unsigned int *)(v5 + 28);
      *(float *)v21 = a2;
      *(_DWORD *)(v21 + 4) = v26;
      *(float *)(v21 + 8) = a4;
      *(float *)(v21 + 12) = a5;
      *(_OWORD *)(v21 + 16) = v28;
      *(_OWORD *)(v21 + 32) = v29;
      *(_DWORD *)(v21 + 48) = v30;
      *(_DWORD *)(v21 + 52) = 2;
      goto LABEL_22;
    }
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::PathStream::add(uint64_t result, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  WTF *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  __int128 v19;
  __int128 v20;
  int v21;

  v3 = result;
  v4 = *(unsigned int *)(result + 28);
  if ((_DWORD)v4 != *(_DWORD *)(result + 24))
  {
    v16 = *(_QWORD *)(result + 16) + 56 * v4;
    v19 = a2[1];
    *(_OWORD *)v16 = *a2;
    *(_OWORD *)(v16 + 16) = v19;
    *(_OWORD *)(v16 + 32) = v20;
    v18 = v21;
LABEL_19:
    *(_DWORD *)(v16 + 48) = v18;
    *(_DWORD *)(v16 + 52) = 7;
    ++*(_DWORD *)(v3 + 28);
    return result;
  }
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  if (v7 < 0x4924925)
  {
    v8 = *(WTF **)(result + 16);
    v9 = 56 * v7;
    result = WTF::fastMalloc((WTF *)(56 * v7));
    *(_DWORD *)(v3 + 24) = v9 / 0x38;
    *(_QWORD *)(v3 + 16) = result;
    if ((_DWORD)v4)
    {
      v11 = 56 * v4;
      v12 = v8;
      do
      {
        v13 = *(_OWORD *)v12;
        v14 = *((_OWORD *)v12 + 1);
        v15 = *((_OWORD *)v12 + 2);
        *(_QWORD *)(result + 48) = *((_QWORD *)v12 + 6);
        *(_OWORD *)(result + 16) = v14;
        *(_OWORD *)(result + 32) = v15;
        *(_OWORD *)result = v13;
        result += 56;
        v12 = (WTF *)((char *)v12 + 56);
        v11 -= 56;
      }
      while (v11);
      result = *(_QWORD *)(v3 + 16);
    }
    if (v8)
    {
      if ((WTF *)result == v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
      }
      WTF::fastFree(v8, v10);
      result = *(_QWORD *)(v3 + 16);
    }
    v16 = result + 56 * *(unsigned int *)(v3 + 28);
    v17 = *a2;
    v18 = v21;
    *(_OWORD *)(v16 + 16) = a2[1];
    *(_OWORD *)(v16 + 32) = v20;
    *(_OWORD *)v16 = v17;
    goto LABEL_19;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::PathStream::applySegments(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned int *)(result + 28);
  if ((_DWORD)v2)
  {
    v4 = *(_QWORD *)(result + 16);
    v5 = 56 * v2;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v4);
      v4 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return result;
}

uint64_t WebCore::PathStream::applyElements(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::PathStream *v13;
  const WebCore::AffineTransform *v14;
  uint64_t v15;
  uint64_t *v16;

  v2 = *(unsigned int *)(a1 + 28);
  if (!(_DWORD)v2)
    return 1;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = 56 * v2;
  while (1)
  {
    v7 = *(unsigned int *)(v5 + 52);
    if ((_DWORD)v7 == -1)
      break;
    v16 = &v15;
    if ((((uint64_t (*)(uint64_t **, uint64_t))off_1E340F070[v7])(&v16, v5) & 1) == 0)
      return 0;
    v5 += 56;
    v6 -= 56;
    if (!v6)
    {
      v8 = *(unsigned int *)(a1 + 28);
      if (!(_DWORD)v8)
        return 1;
      v9 = *(_QWORD *)(a1 + 16);
      v10 = 56 * v8;
      while (1)
      {
        v15 = a2;
        v11 = *(unsigned int *)(v9 + 52);
        if ((_DWORD)v11 == -1)
          break;
        v16 = &v15;
        ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment13applyElementsERKNS6_8FunctionIFvRKNS8_11PathElementEEEEE3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v16, v9);
        v9 += 56;
        v10 -= 56;
        if (!v10)
          return 1;
      }
      break;
    }
  }
  v13 = (WebCore::PathStream *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::PathStream::transform(v13, v14);
}

uint64_t WebCore::PathStream::transform(WebCore::PathStream *this, const WebCore::AffineTransform *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  const WebCore::AffineTransform *v15;
  const WebCore::AffineTransform **v16;

  v2 = *((unsigned int *)this + 7);
  if (!(_DWORD)v2)
    return 1;
  v5 = *((_QWORD *)this + 2);
  v6 = 56 * v2;
  while (1)
  {
    v7 = *(unsigned int *)(v5 + 52);
    if ((_DWORD)v7 == -1)
      break;
    v16 = &v15;
    if ((((uint64_t (*)(const WebCore::AffineTransform ***, uint64_t))off_1E340F170[v7])(&v16, v5) & 1) == 0)
      return 0;
    v5 += 56;
    v6 -= 56;
    if (!v6)
    {
      v8 = *((unsigned int *)this + 7);
      if (!(_DWORD)v8)
        return 1;
      v9 = *((_QWORD *)this + 2);
      v10 = 56 * v8;
      while (1)
      {
        v15 = a2;
        v11 = *(unsigned int *)(v9 + 52);
        if ((_DWORD)v11 == -1)
          break;
        v16 = &v15;
        ((void (*)(const WebCore::AffineTransform ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore11PathSegment9transformERKNS8_15AffineTransformEE3__0JEEEEEJRNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v16, v9);
        v9 += 56;
        v10 -= 56;
        if (!v10)
          return 1;
      }
      break;
    }
  }
  v13 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::PathStream::singleDataLine(v13, v14);
}

uint64_t WebCore::PathStream::singleDataLine@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  if (*(_DWORD *)(this + 28) == 1 && (v2 = *(_QWORD *)(this + 16), *(_DWORD *)(v2 + 52) == 11))
  {
    *(_BYTE *)a2 = *(_BYTE *)v2;
    *(_QWORD *)(a2 + 1) = *(_QWORD *)(v2 + 1);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(v2 + 8);
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return this;
}

uint64_t WebCore::PathStream::singleArc@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;

  if (*(_DWORD *)(this + 28) == 1 && (v3 = *(_QWORD *)(this + 16), *(_DWORD *)(v3 + 52) == 5))
  {
    *(_BYTE *)a2 = *(_BYTE *)v3;
    *(_OWORD *)(a2 + 1) = *(_OWORD *)(v3 + 1);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 16);
    v2 = 1;
  }
  else
  {
    v2 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 24) = v2;
  return this;
}

uint64_t WebCore::PathStream::singleClosedArc@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;

  if (*(_DWORD *)(this + 28) == 1 && (v3 = *(_QWORD *)(this + 16), *(_DWORD *)(v3 + 52) == 6))
  {
    *(_BYTE *)a2 = *(_BYTE *)v3;
    *(_OWORD *)(a2 + 1) = *(_OWORD *)(v3 + 1);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 16);
    v2 = 1;
  }
  else
  {
    v2 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 24) = v2;
  return this;
}

uint64_t WebCore::PathStream::singleQuadCurve@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;

  if (*(_DWORD *)(this + 28) == 1 && (v3 = *(_QWORD *)(this + 16), *(_DWORD *)(v3 + 52) == 12))
  {
    *(_BYTE *)a2 = *(_BYTE *)v3;
    *(_OWORD *)(a2 + 1) = *(_OWORD *)(v3 + 1);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 16);
    v2 = 1;
  }
  else
  {
    v2 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 24) = v2;
  return this;
}

uint64_t WebCore::PathStream::singleBezierCurve@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;

  if (*(_DWORD *)(this + 28) == 1 && (v3 = *(_QWORD *)(this + 16), *(_DWORD *)(v3 + 52) == 13))
  {
    *(_BYTE *)a2 = *(_BYTE *)v3;
    *(_OWORD *)(a2 + 1) = *(_OWORD *)(v3 + 1);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(v3 + 16);
    v2 = 1;
  }
  else
  {
    v2 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 32) = v2;
  return this;
}

BOOL WebCore::PathStream::isClosed(WebCore::PathStream *this)
{
  unsigned int v1;
  int v2;

  v1 = *((_DWORD *)this + 7);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(*((_QWORD *)this + 2) + 56 * v1 - 4);
  return v2 == 15 || v2 == 6;
}

float WebCore::PathStream::currentPoint(WebCore::PathStream *this)
{
  unsigned int v1;
  uint64_t v3;
  uint64_t v4;
  float v5;
  char v6;
  float result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[2];
  _QWORD *v16;

  v1 = *((_DWORD *)this + 7);
  if (!v1)
    return 0.0;
  v3 = *((_QWORD *)this + 2) + 56 * v1;
  v4 = *(unsigned int *)(v3 - 4);
  if ((_DWORD)v4 == -1)
    goto LABEL_10;
  v15[0] = &v16;
  LODWORD(v5) = ((uint64_t (*)(_QWORD *, uint64_t))off_1E340EEF0[v4])(v15, v3 - 56);
  if (v6)
    return v5;
  v13 = 0;
  v14 = 0;
  v8 = *((unsigned int *)this + 7);
  if ((_DWORD)v8)
  {
    v9 = *((_QWORD *)this + 2);
    v10 = 56 * v8;
    while (1)
    {
      v15[0] = &v14;
      v15[1] = &v13;
      v11 = *(unsigned int *)(v9 + 52);
      if ((_DWORD)v11 == -1)
        break;
      v16 = v15;
      result = ((float (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment17calculateEndPointERKNS8_10FloatPointERSA_E3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v16, v9);
      v14 = __PAIR64__(v12, LODWORD(result));
      v9 += 56;
      v10 -= 56;
      if (!v10)
        return result;
    }
LABEL_10:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  return 0.0;
}

uint64_t WebCore::PathStream::computeHasSubpaths(unsigned int *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  float v6;
  _BOOL4 v9;
  float v10;
  float v11;
  float v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;

  v14 = 0;
  v15 = 0;
  v13 = xmmword_1969F1470;
  if (a2)
  {
    v3 = 56 * a2;
    while (1)
    {
      v16[0] = &v14;
      v16[1] = &v15;
      v16[2] = &v13;
      v4 = a1[13];
      if ((_DWORD)v4 == -1)
        break;
      v17 = v16;
      ((void (*)(_QWORD **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment22extendFastBoundingRectERKNS8_10FloatPointESC_RNS8_9FloatRectEE3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v17, a1);
      if (*(float *)&v13 != 1.7014e38 || *((float *)&v13 + 1) != 1.7014e38)
        goto LABEL_28;
      v6 = *((float *)&v13 + 3);
      if (*((float *)&v13 + 2) != -3.4028e38 || *((float *)&v13 + 3) != -3.4028e38)
        goto LABEL_13;
LABEL_23:
      WebCore::PathSegment::calculateEndPoint((WebCore::PathSegment *)a1, (const WebCore::FloatPoint *)&v14, (WebCore::FloatPoint *)&v15);
      v14 = __PAIR64__(LODWORD(v10), LODWORD(v12));
      a1 += 14;
      v3 -= 56;
      if (!v3)
      {
        v11 = *((float *)&v13 + 3);
        if (*(float *)&v13 == 1.7014e38 && *((float *)&v13 + 1) == 1.7014e38)
        {
          v9 = *((float *)&v13 + 2) == -3.4028e38;
          goto LABEL_17;
        }
        return v11 != 0.0 || *((float *)&v13 + 2) != 0.0;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_28:
    v6 = *((float *)&v13 + 3);
LABEL_13:
    if (v6 != 0.0 || *((float *)&v13 + 2) != 0.0)
      return 1;
    goto LABEL_23;
  }
  v9 = 1;
  v10 = 0.0;
  v11 = -3.4028e38;
  v12 = 0.0;
LABEL_17:
  if (v9 && v11 == -3.4028e38)
  {
    *((float *)&v13 + 2) = fmaxf(v12, -1.7014e38) - fminf(v12, 1.7014e38);
    v11 = fmaxf(v10, -1.7014e38) - fminf(v10, 1.7014e38);
  }
  return v11 != 0.0 || *((float *)&v13 + 2) != 0.0;
}

uint64_t WebCore::PathStream::hasSubpaths(unsigned int **this)
{
  return WebCore::PathStream::computeHasSubpaths(this[2], *((unsigned int *)this + 7));
}

float WebCore::PathStream::fastBoundingRect(WebCore::PathStream *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  unsigned int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t *v20;
  uint64_t *v21;
  __int128 *v22;
  unint64_t **v23;

  v1 = *((_QWORD *)this + 2);
  v2 = *((unsigned int *)this + 7);
  v17 = 0;
  v18 = 0;
  v19 = xmmword_1969F1470;
  if ((_DWORD)v2)
  {
    v3 = 56 * v2;
    while (1)
    {
      v20 = &v17;
      v21 = &v18;
      v22 = &v19;
      v4 = *(unsigned int *)(v1 + 52);
      if ((_DWORD)v4 == -1)
        break;
      v23 = &v20;
      ((void (*)(unint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment22extendFastBoundingRectERKNS8_10FloatPointESC_RNS8_9FloatRectEE3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v23, v1);
      v20 = &v17;
      v21 = &v18;
      v5 = *(unsigned int *)(v1 + 52);
      if ((_DWORD)v5 == -1)
        break;
      v23 = &v20;
      v6 = ((float (*)(unint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment17calculateEndPointERKNS8_10FloatPointERSA_E3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v23, v1);
      v17 = __PAIR64__(v7, LODWORD(v6));
      v1 += 56;
      v3 -= 56;
      if (!v3)
      {
        v8 = *((float *)&v19 + 1);
        v9 = *(float *)&v19;
        v11 = *((float *)&v19 + 3);
        v10 = *((float *)&v19 + 2);
        goto LABEL_7;
      }
    }
    v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::PathStream::computeBoundingRect(v15, v16);
  }
  else
  {
    v8 = 1.7014e38;
    v11 = -3.4028e38;
    v6 = 0.0;
    v10 = -3.4028e38;
    v9 = 1.7014e38;
LABEL_7:
    if (v9 == 1.7014e38 && v8 == 1.7014e38)
    {
      if (v10 == -3.4028e38 && v11 == -3.4028e38)
        return fminf(v6, 1.7014e38);
      else
        return 1.7014e38;
    }
    return v9;
  }
}

float WebCore::PathStream::computeBoundingRect(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  unsigned int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t *v18;
  uint64_t *v19;
  __int128 *v20;
  unint64_t **v21;

  v15 = 0;
  v16 = 0;
  v17 = xmmword_1969F1470;
  if (a2)
  {
    v3 = 56 * a2;
    while (1)
    {
      v18 = &v15;
      v19 = &v16;
      v20 = &v17;
      v4 = *(unsigned int *)(a1 + 52);
      if ((_DWORD)v4 == -1)
        break;
      v21 = &v18;
      ((void (*)(unint64_t ***, uint64_t))off_1E340EFF0[v4])(&v21, a1);
      v18 = &v15;
      v19 = &v16;
      v5 = *(unsigned int *)(a1 + 52);
      if ((_DWORD)v5 == -1)
        break;
      v21 = &v18;
      v6 = ((float (*)(unint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment17calculateEndPointERKNS8_10FloatPointERSA_E3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v21, a1);
      v15 = __PAIR64__(v7, LODWORD(v6));
      a1 += 56;
      v3 -= 56;
      if (!v3)
      {
        v8 = *((float *)&v17 + 1);
        v9 = *(float *)&v17;
        v11 = *((float *)&v17 + 3);
        v10 = *((float *)&v17 + 2);
        goto LABEL_7;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    return fminf(v6, 1.7014e38);
  }
  v8 = 1.7014e38;
  v11 = -3.4028e38;
  v6 = 0.0;
  v10 = -3.4028e38;
  v9 = 1.7014e38;
LABEL_7:
  if (v9 == 1.7014e38 && v8 == 1.7014e38)
  {
    if (v10 == -3.4028e38 && v11 == -3.4028e38)
      return fminf(v6, 1.7014e38);
    return 1.7014e38;
  }
  return v9;
}

float WebCore::PathStream::boundingRect(WebCore::PathStream *this)
{
  return WebCore::PathStream::computeBoundingRect(*((_QWORD *)this + 2), *((unsigned int *)this + 7));
}

float WebCore::PathTraversalState::quadraticBezierTo(WebCore::PathTraversalState *this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3)
{
  unsigned int v4;
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  float i;
  float v11;
  float v12;
  void *v13;
  BOOL v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  BOOL v20;
  BOOL v21;
  BOOL v23;
  BOOL v24;
  char *v28;
  char *v29;
  __int128 v30;
  unint64_t v31;
  float *v32;
  WTF *v33;
  float result;
  float v35;
  float v36;
  float v37;
  float v38;
  __int128 v39;
  unint64_t v40;
  WTF *v41;
  uint64_t v42;
  _BYTE v43[480];

  v4 = 0;
  v38 = *((float *)this + 2);
  v5 = *(float *)a2;
  v6 = *((float *)a2 + 1);
  v7 = *(float *)a3;
  v8 = *((unsigned int *)a3 + 1);
  v9 = v38;
  v36 = *((float *)this + 3);
  v41 = (WTF *)v43;
  v42 = 20;
  v35 = 0.0;
  v37 = v6;
  for (i = v5; ; i = v5)
  {
    v11 = hypotf(v5 - v9, v6 - v36);
    v12 = v11 + hypotf(v7 - v5, *(float *)&v8 - v6);
    v39 = 0uLL;
    v40 = 0;
    v14 = (float)(v12 - hypotf(v7 - v9, *(float *)&v8 - v36)) <= 0.00001 || v4 > 0x13;
    v9 = v38;
    if (v14)
      break;
    v5 = (float)(i + v38) * 0.5;
    v6 = (float)(v37 + v36) * 0.5;
    v16 = (float)(i + v7) * 0.5;
    v17 = (float)(v37 + *(float *)&v8) * 0.5;
    *((_QWORD *)&v39 + 1) = __PAIR64__(LODWORD(v17), LODWORD(v16));
    v18 = (float)(v16 + v5) * 0.5;
    v19 = (float)(v17 + v6) * 0.5;
    *(float *)&v39 = v18;
    *((float *)&v39 + 1) = v19;
    v40 = LODWORD(v7) | (unint64_t)(v8 << 32);
    v20 = v5 == i && v6 == v37;
    v21 = v20 && v18 == v7;
    if (v21 && v19 == *(float *)&v8)
      break;
    v23 = v18 == v38 && v19 == v36;
    v24 = v23 && v16 == i;
    if (v24 && v17 == v37)
      break;
    v7 = (float)(v16 + v5) * 0.5;
    v8 = LODWORD(v19);
    if (v4 == (_DWORD)v42)
    {
      v28 = WTF::Vector<WebCore::QuadraticBezier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v41, (void *)(v4 + 1), (unint64_t)&v39);
      v29 = (char *)v41 + 24 * HIDWORD(v42);
      v30 = *(_OWORD *)v28;
      v31 = *((_QWORD *)v28 + 2);
    }
    else
    {
      v29 = (char *)v41 + 24 * v4;
      v30 = v39;
      v31 = v40;
    }
    *((_QWORD *)v29 + 2) = v31;
    *(_OWORD *)v29 = v30;
    v4 = HIDWORD(v42) + 1;
LABEL_44:
    HIDWORD(v42) = v4;
    v37 = v6;
    v38 = v9;
  }
  v15 = v35 + v12;
  if (*(_DWORD *)this == 1)
  {
    *((float *)this + 8) = v38;
    *((float *)this + 9) = v36;
    *((float *)this + 2) = v7;
    *((_DWORD *)this + 3) = v8;
    if ((float)(v15 + *((float *)this + 6)) > *((float *)this + 7) || !v4)
      goto LABEL_46;
    goto LABEL_41;
  }
  if (v4)
  {
LABEL_41:
    v32 = (float *)((char *)v41 + 24 * v4);
    v9 = *(v32 - 6);
    v35 = v15;
    v36 = *(v32 - 5);
    v5 = *(v32 - 4);
    v6 = *(v32 - 3);
    v7 = *(v32 - 2);
    v8 = *((unsigned int *)v32 - 1);
    --v4;
    goto LABEL_44;
  }
  *((float *)this + 8) = v38;
  *((float *)this + 9) = v36;
  *((float *)this + 2) = v7;
  *((_DWORD *)this + 3) = v8;
LABEL_46:
  v33 = v41;
  if (v43 != (_BYTE *)v41 && v41)
  {
    v41 = 0;
    LODWORD(v42) = 0;
    WTF::fastFree(v33, v13);
  }
  result = v15 + *((float *)this + 6);
  *((float *)this + 6) = result;
  return result;
}

float WebCore::PathTraversalState::cubicBezierTo(WebCore::PathTraversalState *this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3, const WebCore::FloatPoint *a4)
{
  unsigned int v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  void *v17;
  BOOL v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  BOOL v31;
  BOOL v32;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  float *v45;
  WTF *v46;
  float result;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  unint64_t v54;
  float v55;
  float v56;
  __int128 v57;
  __int128 v58;
  WTF *v59;
  uint64_t v60;
  _BYTE v61[640];

  v5 = 0;
  v7 = *(float *)a2;
  v6 = *((float *)a2 + 1);
  v9 = *(float *)a3;
  v8 = *((float *)a3 + 1);
  v10 = *(float *)a4;
  v11 = *((float *)a4 + 1);
  v55 = *((float *)this + 2);
  v56 = *((float *)this + 3);
  v12 = v55;
  v59 = (WTF *)v61;
  v60 = 20;
  v48 = 0.0;
  v49 = v11;
  v54 = __PAIR64__(LODWORD(v11), LODWORD(v10));
  v52 = v9;
  v53 = v8;
  v50 = v7;
  v51 = v6;
  while (1)
  {
    v13 = v12;
    v14 = hypotf(v7 - v12, v6 - v56);
    v15 = v14 + hypotf(v9 - v7, v8 - v6);
    v16 = v15 + hypotf(v10 - v9, v49 - v8);
    v57 = 0u;
    v58 = 0u;
    v18 = (float)(v16 - hypotf(v10 - v13, v49 - v56)) <= 0.00001 || v5 > 0x13;
    v19 = v55;
    if (v18)
      break;
    v21 = (float)(v52 + v50) * 0.5;
    v22 = (float)(v53 + v51) * 0.5;
    v7 = (float)(v50 + v55) * 0.5;
    v6 = (float)(v51 + v56) * 0.5;
    v23 = (float)(v21 + v7) * 0.5;
    v24 = (float)(v22 + v6) * 0.5;
    v25 = (float)(*(float *)&v54 + v52) * 0.5;
    v26 = (float)(*((float *)&v54 + 1) + v53) * 0.5;
    *(_QWORD *)&v58 = __PAIR64__(LODWORD(v26), LODWORD(v25));
    v27 = (float)(v25 + v21) * 0.5;
    v28 = (float)(v26 + v22) * 0.5;
    *((_QWORD *)&v57 + 1) = __PAIR64__(LODWORD(v28), LODWORD(v27));
    *((_QWORD *)&v58 + 1) = v54;
    v29 = (float)(v27 + v23) * 0.5;
    v30 = (float)(v28 + v24) * 0.5;
    *(float *)&v57 = v29;
    *((float *)&v57 + 1) = v30;
    if (v7 == v50 && v6 == v51)
    {
      v31 = v23 == v52 && v24 == v53;
      v32 = v31 && v29 == *(float *)&v54;
      if (v32 && v30 == *((float *)&v54 + 1))
        break;
    }
    v34 = v29 == v55 && v30 == v56;
    v35 = v34 && v27 == v50;
    v36 = v35 && v28 == v51;
    v37 = v36 && v25 == v52;
    if (v37 && v26 == v53)
      break;
    if (v5 == (_DWORD)v60)
    {
      v41 = WTF::Vector<WebCore::CubicBezier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v59, (void *)(v5 + 1), (unint64_t)&v57);
      v42 = (char *)v59 + 32 * HIDWORD(v60);
      v43 = *(_OWORD *)v41;
      v44 = *((_OWORD *)v41 + 1);
    }
    else
    {
      v42 = (char *)v59 + 32 * v5;
      v43 = v57;
      v44 = v58;
    }
    *(_OWORD *)v42 = v43;
    *((_OWORD *)v42 + 1) = v44;
    v5 = HIDWORD(v60) + 1;
LABEL_52:
    v49 = v30;
    v50 = v7;
    v54 = __PAIR64__(LODWORD(v30), LODWORD(v29));
    HIDWORD(v60) = v5;
    v52 = v23;
    v53 = v24;
    v51 = v6;
    v55 = v19;
    v12 = v19;
    v10 = v29;
    v8 = v24;
    v9 = v23;
  }
  v20 = v48 + v16;
  if (*(_DWORD *)this == 1)
  {
    *((float *)this + 8) = v55;
    *((float *)this + 9) = v56;
    *((_QWORD *)this + 1) = v54;
    if ((float)(v20 + *((float *)this + 6)) > *((float *)this + 7) || !v5)
      goto LABEL_54;
    goto LABEL_49;
  }
  if (v5)
  {
LABEL_49:
    v48 = v48 + v16;
    v45 = (float *)((char *)v59 + 32 * v5);
    v19 = *(v45 - 8);
    v56 = *(v45 - 7);
    v7 = *(v45 - 6);
    v6 = *(v45 - 5);
    v23 = *(v45 - 4);
    v24 = *(v45 - 3);
    v29 = *(v45 - 2);
    v30 = *(v45 - 1);
    --v5;
    goto LABEL_52;
  }
  *((float *)this + 8) = v55;
  *((float *)this + 9) = v56;
  *((_QWORD *)this + 1) = v54;
LABEL_54:
  v46 = v59;
  if (v61 != (_BYTE *)v59 && v59)
  {
    v59 = 0;
    LODWORD(v60) = 0;
    WTF::fastFree(v46, v17);
  }
  result = v20 + *((float *)this + 6);
  *((float *)this + 6) = result;
  return result;
}

BOOL WebCore::PathTraversalState::finalizeAppendPathElement(WebCore::PathTraversalState *this)
{
  _BOOL8 result;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  __float2 v9;

  if (!*(_DWORD *)this)
    return 0;
  if (*(_DWORD *)this == 2)
  {
    if (*((float *)this + 6) >= *((float *)this + 7))
    {
      result = 1;
      *((_BYTE *)this + 4) = 1;
      return result;
    }
  }
  else
  {
    v4 = *((float *)this + 6);
    v3 = *((float *)this + 7);
    if (v4 >= v3)
    {
      v5 = *((float *)this + 2);
      v6 = *((float *)this + 3);
      v7 = atan2f(v6 - *((float *)this + 9), v5 - *((float *)this + 8));
      v8 = v3 - v4;
      v9 = __sincosf_stret(v7);
      *((float *)this + 2) = v5 + (float)(v8 * v9.__cosval);
      *((float *)this + 3) = v6 + (float)(v8 * v9.__sinval);
      if (v3 == 0.0 && *((_BYTE *)this + 44) == 0)
      {
        *((_BYTE *)this + 44) = 1;
      }
      else
      {
        *((_BYTE *)this + 4) = 1;
        *((float *)this + 10) = v7 * 57.296;
      }
    }
    *((_QWORD *)this + 4) = *((_QWORD *)this + 1);
  }
  return *((_BYTE *)this + 4) != 0;
}

BOOL WebCore::PathTraversalState::appendPathElement(WebCore::PathTraversalState *this, int a2, WebCore::FloatPoint *a3)
{
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  __float2 v14;

  switch(a2)
  {
    case 0:
      v5 = *(_QWORD *)a3;
      *((_QWORD *)this + 1) = *(_QWORD *)a3;
      *((_QWORD *)this + 2) = v5;
      *((_QWORD *)this + 4) = v5;
      break;
    case 1:
      *((float *)this + 6) = hypotf(*(float *)a3 - *((float *)this + 2), *((float *)a3 + 1) - *((float *)this + 3))
                           + *((float *)this + 6);
      v6 = *(_QWORD *)a3;
      goto LABEL_7;
    case 2:
      WebCore::PathTraversalState::quadraticBezierTo(this, a3, (WebCore::FloatPoint *)((char *)a3 + 8));
      break;
    case 3:
      WebCore::PathTraversalState::cubicBezierTo(this, a3, (WebCore::FloatPoint *)((char *)a3 + 8), (WebCore::FloatPoint *)((char *)a3 + 16));
      break;
    case 4:
      *((float *)this + 6) = hypotf(*((float *)this + 4) - *((float *)this + 2), *((float *)this + 5) - *((float *)this + 3))+ *((float *)this + 6);
      v6 = *((_QWORD *)this + 2);
LABEL_7:
      *((_QWORD *)this + 1) = v6;
      break;
    default:
      break;
  }
  if (!*(_DWORD *)this)
    return 0;
  if (*(_DWORD *)this == 2)
  {
    if (*((float *)this + 6) >= *((float *)this + 7))
    {
      result = 1;
      *((_BYTE *)this + 4) = 1;
      return result;
    }
  }
  else
  {
    v9 = *((float *)this + 6);
    v8 = *((float *)this + 7);
    if (v9 >= v8)
    {
      v10 = *((float *)this + 2);
      v11 = *((float *)this + 3);
      v12 = atan2f(v11 - *((float *)this + 9), v10 - *((float *)this + 8));
      v13 = v8 - v9;
      v14 = __sincosf_stret(v12);
      *((float *)this + 2) = v10 + (float)(v13 * v14.__cosval);
      *((float *)this + 3) = v11 + (float)(v13 * v14.__sinval);
      if (v8 == 0.0 && *((_BYTE *)this + 44) == 0)
      {
        *((_BYTE *)this + 44) = 1;
      }
      else
      {
        *((_BYTE *)this + 4) = 1;
        *((float *)this + 10) = v12 * 57.296;
      }
    }
    *((_QWORD *)this + 4) = *((_QWORD *)this + 1);
  }
  return *((_BYTE *)this + 4) != 0;
}

float *WebCore::FloatPointGraph::findOrCreateNode(uint64_t a1, float a2, float a3)
{
  uint64_t v6;
  char *v7;
  float v8;
  float v9;
  uint64_t v10;
  float *result;
  float v12;
  float v13;
  float v14;
  float v15;
  BOOL v17;
  BOOL v18;
  float v19;
  BOOL v20;
  BOOL v21;
  float v22;
  float v23;
  BOOL v25;
  BOOL v26;
  float v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  WTF *v35;
  unsigned int v36;
  WTF *v37;
  WTF *v38;

  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(char **)a1;
    v8 = fabsf(a2);
    v9 = fabsf(a3);
    v10 = 8 * v6;
    while (1)
    {
      result = *(float **)v7;
      v12 = **(float **)v7;
      if (v12 == a2)
        goto LABEL_24;
      v22 = vabds_f32(v12, a2);
      v23 = fabsf(v12);
      if (v23 >= 1.0 || (float)(v23 * 3.4028e38) >= v22)
      {
        v25 = v8 < 1.0;
        if ((float)(v8 * 3.4028e38) >= v22)
          v25 = 0;
        v26 = (float)(v23 * 1.1755e-38) <= v22 || v23 <= 1.0;
        v27 = v22 / v23;
        v28 = v26 && v27 > 0.00000011921;
        if (!v28 && !v25)
        {
          v29 = (float)(v8 * 1.1755e-38) <= v22 || v8 <= 1.0;
          if (!v29 || (float)(v22 / v8) <= 0.00000011921)
          {
LABEL_24:
            v13 = result[1];
            if (v13 == a3)
              break;
            v14 = vabds_f32(v13, a3);
            v15 = fabsf(v13);
            if (v15 >= 1.0 || (float)(v15 * 3.4028e38) >= v14)
            {
              v17 = v9 < 1.0;
              if ((float)(v9 * 3.4028e38) >= v14)
                v17 = 0;
              v18 = (float)(v15 * 1.1755e-38) <= v14 || v15 <= 1.0;
              v19 = v14 / v15;
              v20 = v18 && v19 > 0.00000011921;
              if (!v20 && !v17)
              {
                v21 = (float)(v9 * 1.1755e-38) <= v14 || v9 <= 1.0;
                if (!v21 || (float)(v14 / v9) <= 0.00000011921)
                  break;
              }
            }
          }
        }
      }
      v7 += 8;
      v10 -= 8;
      if (!v10)
        goto LABEL_50;
    }
  }
  else
  {
LABEL_50:
    result = (float *)WTF::fastMalloc((WTF *)0x20);
    *result = a2;
    result[1] = a3;
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
    *((_BYTE *)result + 24) = 0;
    v38 = (WTF *)result;
    v30 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v30 == *(_DWORD *)(a1 + 8))
    {
      result = (float *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, v30 + 1, (unint64_t)&v38);
      v32 = *(unsigned int *)(a1 + 12);
      v33 = *(char **)a1;
      v34 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)&v33[8 * v32] = v34;
      v35 = v38;
      v36 = v32 + 1;
      *(_DWORD *)(a1 + 12) = v36;
      v38 = 0;
      if (v35)
      {
        v37 = (WTF *)*((_QWORD *)v35 + 1);
        if (v37)
        {
          *((_QWORD *)v35 + 1) = 0;
          *((_DWORD *)v35 + 4) = 0;
          WTF::fastFree(v37, v31);
        }
        result = (float *)WTF::fastFree(v35, v31);
        v36 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = result;
      v36 = v30 + 1;
      *(_DWORD *)(a1 + 12) = v36;
    }
    if (v36)
      return *(float **)(*(_QWORD *)a1 + 8 * v36 - 8);
    else
      __break(0xC471u);
  }
  return result;
}

void WebCore::PathUtilities::pathsWithShrinkWrappedRects(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4;
  float v5;
  __n128 *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  float32x2_t **v17;
  uint64_t v18;
  const WebCore::FloatPoint **v19;
  float32x2_t *v20;
  float32x2_t v21;
  int32x2_t v22;
  float v23;
  int32x2_t v24;
  float v25;
  double v26;
  BOOL v27;
  double v28;
  float32x2_t v29;
  const WebCore::FloatPoint *v30;
  uint64_t v31;
  unint64_t v32;
  float32x2_t **v33;
  float32x2_t v34;
  int32x2_t v35;
  float v36;
  int32x2_t v37;
  float v38;
  double v39;
  double v40;
  float32x2_t v41;
  const WebCore::FloatPoint *v42;
  uint64_t v43;
  char v44;
  _DWORD *v45;
  int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)();
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  __n128 *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  WTF *v63;
  WTF *v64;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  WTF *v68;
  WTF *v69;
  unsigned int *v70;
  int32x2_t v71;
  int32x2_t v72;
  float v73;
  float v74;
  double v75;
  double v76;
  double v77;
  double v78;
  WTF *v79;
  unsigned int v80;
  WTF *v81;
  uint64_t v82;
  float v83;
  float v84;
  _BYTE v85[56];
  unsigned int v86;
  char v87[8];
  _OWORD v88[3];
  int v89;
  int v90;
  unsigned int v91;
  _BYTE v92[32];
  __int128 v93;
  int v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v4)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    return;
  }
  v5 = a3.n128_f32[0];
  if (v4 >= 0x15)
  {
    v91 = 0;
    v7 = *(__n128 **)a1;
    v8 = 16 * v4;
    do
    {
      v83 = v5;
      v84 = v5;
      a3.n128_f64[0] = WebCore::Path::addRoundedRect((WebCore::Path *)v87, v7++, &v83, 0, a3);
      v8 -= 16;
    }
    while (v8);
    v9 = v91;
    v85[0] = 0;
    v86 = -1;
    if (v91 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, _OWORD *, double))off_1E340EDD8[v91])(v92, v85, v88, a3.n128_f64[0]);
      v86 = v9;
    }
    v10 = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)(a2 + 8) = 1;
    *(_QWORD *)a2 = v10;
    *(_DWORD *)(v10 + 64) = 0;
    if (v86 == -1)
    {
      *(_DWORD *)(v10 + 64) = -1;
    }
    else
    {
      *(_QWORD *)v92 = v10 + 8;
      ((void (*)(_BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v86])(v92);
    }
    *(_DWORD *)(a2 + 12) = 1;
    if (v86 != -1)
      ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_8[v86])(v92, v85);
    if (v91 != -1)
      ((void (*)(float *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_8[v91])(&v83, v88);
    return;
  }
  v81 = 0;
  v82 = 0;
  WebCore::polygonsForRect((uint64_t)&v79, (uint64_t *)a1, (uint64_t)&v81, a3);
  v12 = v80;
  if (!v80)
  {
    v91 = 0;
    v56 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v56)
    {
      v57 = *(__n128 **)a1;
      v58 = 16 * v56;
      do
      {
        v83 = v5;
        v84 = v5;
        v11.n128_f64[0] = WebCore::Path::addRoundedRect((WebCore::Path *)v87, v57++, &v83, 0, v11);
        v58 -= 16;
      }
      while (v58);
      v59 = v91;
      v85[0] = 0;
      v86 = -1;
      if (v91 == -1)
        goto LABEL_81;
    }
    else
    {
      v59 = 0;
      v85[0] = 0;
      v86 = -1;
    }
    ((void (*)(_BYTE *, _BYTE *, _OWORD *, __n128))off_1E340EDD8[v59])(v92, v85, v88, v11);
    v86 = v59;
LABEL_81:
    v60 = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)(a2 + 8) = 1;
    *(_QWORD *)a2 = v60;
    *(_DWORD *)(v60 + 64) = 0;
    if (v86 == -1)
    {
      *(_DWORD *)(v60 + 64) = -1;
    }
    else
    {
      *(_QWORD *)v92 = v60 + 8;
      ((void (*)(_BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v86])(v92);
    }
    *(_DWORD *)(a2 + 12) = 1;
    if (v86 != -1)
      ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_8[v86])(v92, v85);
    if (v91 != -1)
      ((void (*)(float *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_8[v91])(&v83, v88);
    v55 = v79;
    if ((_DWORD)v12)
      goto LABEL_89;
    goto LABEL_93;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (v12 >= 0x38E38E4)
  {
    __break(0xC471u);
    return;
  }
  v13 = WTF::fastMalloc((WTF *)(72 * v12));
  v14 = 0;
  *(_DWORD *)(a2 + 8) = 72 * (int)v12 / 0x48u;
  *(_QWORD *)a2 = v13;
  v15 = (unsigned int *)v79;
  v70 = (unsigned int *)((char *)v79 + 16 * v12);
  v69 = v79;
  do
  {
    v91 = 0;
    v16 = v15[3];
    if (!(_DWORD)v16)
    {
      v43 = 0;
      goto LABEL_55;
    }
    v17 = *(float32x2_t ***)v15;
    v18 = *(_QWORD *)v15 + 16 * v16;
    v20 = *(float32x2_t **)(v18 - 8);
    v19 = (const WebCore::FloatPoint **)(v18 - 8);
    v21 = *v20;
    v75 = COERCE_DOUBLE(vsub_f32(*v20, *(float32x2_t *)*(v19 - 1)));
    v77 = COERCE_DOUBLE(vsub_f32(**(float32x2_t **)(*(_QWORD *)v15 + 8), ***(float32x2_t ***)v15));
    *(float *)v22.i32 = hypotf(*(float *)&v75, *((float *)&v75 + 1));
    v71 = v22;
    if ((float)(*(float *)v22.i32 * 0.5) >= v5)
      v23 = v5;
    else
      v23 = *(float *)v22.i32 * 0.5;
    *(float *)v24.i32 = hypotf(*(float *)&v77, *((float *)&v77 + 1));
    if ((float)(*(float *)v24.i32 * 0.5) >= v23)
      v25 = v23;
    else
      v25 = *(float *)v24.i32 * 0.5;
    v26 = COERCE_DOUBLE(vdiv_f32(*(float32x2_t *)&v75, (float32x2_t)vdup_lane_s32(v71, 0)));
    if (*(float *)v71.i32 == 0.0)
      v26 = v75;
    v27 = *(float *)v24.i32 == 0.0;
    v28 = COERCE_DOUBLE(vdiv_f32(*(float32x2_t *)&v77, (float32x2_t)vdup_lane_s32(v24, 0)));
    if (v27)
      v28 = v77;
    v73 = v25;
    v29 = vmul_n_f32(*(float32x2_t *)&v28, v25);
    *(float32x2_t *)v92 = vsub_f32(v21, vmul_n_f32(*(float32x2_t *)&v26, v25));
    WebCore::Path::moveTo((WebCore::Path *)v87, (const WebCore::FloatPoint *)v92);
    v30 = *v19;
    *(float32x2_t *)v92 = vadd_f32(v29, **v17);
    WebCore::Path::addArcTo((uint64_t)v87, v30, (const WebCore::FloatPoint *)v92, v73);
    if (v15[3] >= 2)
    {
      v31 = 0;
      v32 = 1;
      do
      {
        v33 = (float32x2_t **)(*(_QWORD *)v15 + v31);
        v34 = *v33[1];
        v76 = COERCE_DOUBLE(vsub_f32(v34, **v33));
        v78 = COERCE_DOUBLE(vsub_f32(*v33[3], *v33[2]));
        *(float *)v35.i32 = hypotf(*(float *)&v76, *((float *)&v76 + 1));
        v72 = v35;
        if ((float)(*(float *)v35.i32 * 0.5) >= v5)
          v36 = v5;
        else
          v36 = *(float *)v35.i32 * 0.5;
        *(float *)v37.i32 = hypotf(*(float *)&v78, *((float *)&v78 + 1));
        if ((float)(*(float *)v37.i32 * 0.5) >= v36)
          v38 = v36;
        else
          v38 = *(float *)v37.i32 * 0.5;
        v39 = COERCE_DOUBLE(vdiv_f32(*(float32x2_t *)&v76, (float32x2_t)vdup_lane_s32(v72, 0)));
        if (*(float *)v72.i32 == 0.0)
          v39 = v76;
        v27 = *(float *)v37.i32 == 0.0;
        v40 = COERCE_DOUBLE(vdiv_f32(*(float32x2_t *)&v78, (float32x2_t)vdup_lane_s32(v37, 0)));
        if (v27)
          v40 = v78;
        v74 = v38;
        v41 = vmul_n_f32(*(float32x2_t *)&v40, v38);
        *(float32x2_t *)v92 = vsub_f32(v34, vmul_n_f32(*(float32x2_t *)&v39, v38));
        WebCore::Path::addLineTo((uint64_t)v87, (const WebCore::FloatPoint *)v92);
        v42 = (const WebCore::FloatPoint *)v33[1];
        *(float32x2_t *)v92 = vadd_f32(v41, *v33[2]);
        WebCore::Path::addArcTo((uint64_t)v87, v42, (const WebCore::FloatPoint *)v92, v74);
        ++v32;
        v31 += 16;
      }
      while (v32 < v15[3]);
    }
    v43 = v91;
    if (v91 != 2)
    {
      if (!v91)
        goto LABEL_55;
LABEL_43:
      if (v43 == 2)
      {
        if (!*(_QWORD *)&v88[0])
          goto LABEL_56;
        v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v88[0] + 208))(*(_QWORD *)&v88[0]);
        v43 = v91;
        if ((v47 & 1) != 0)
          goto LABEL_57;
        if (v91 != 1)
          goto LABEL_56;
        v46 = v90;
      }
      else
      {
        if (v43 != 1)
          goto LABEL_56;
        v46 = v90;
        if (v90 == 6)
          goto LABEL_54;
        v43 = 1;
        if (v90 == 15)
          goto LABEL_55;
      }
      if (v46 == 5)
      {
        *(_OWORD *)v92 = v88[0];
        *(_QWORD *)&v92[13] = *(_QWORD *)((char *)v88 + 13);
        v88[1] = *(_OWORD *)&v92[16];
        v88[2] = v93;
        v89 = v94;
        v88[0] = *(_OWORD *)v92;
        v90 = 6;
LABEL_54:
        v43 = 1;
LABEL_55:
        v85[0] = 0;
        v86 = -1;
        goto LABEL_59;
      }
LABEL_56:
      v48 = WebCore::Path::ensureImpl((WebCore::Path *)v87);
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 120))(v48);
      v43 = v91;
      goto LABEL_57;
    }
    if (!*(_QWORD *)&v88[0])
      goto LABEL_56;
    v44 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v88[0] + 200))(*(_QWORD *)&v88[0]);
    v43 = v91;
    if ((v44 & 1) == 0)
      goto LABEL_43;
LABEL_57:
    v85[0] = 0;
    v86 = -1;
    if (v43 == 0xFFFFFFFFLL)
    {
      v49 = v13 + 72 * v14;
      *(_BYTE *)(v49 + 8) = 0;
      *(_DWORD *)(v49 + 64) = -1;
LABEL_61:
      *(_DWORD *)(a2 + 12) = ++v14;
      goto LABEL_66;
    }
LABEL_59:
    v50 = off_1E340EDD8[v43];
    ((void (*)(_BYTE *, _BYTE *, _OWORD *))v50)(v92, v85, v88);
    v86 = v43;
    if (v91 == -1)
    {
      v53 = v13 + 72 * v14;
      *(_BYTE *)(v53 + 8) = 0;
      v53 += 8;
      *(_DWORD *)(v53 + 56) = -1;
      v52 = (_DWORD *)(v53 + 56);
    }
    else
    {
      ((void (*)(_BYTE *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_8[v91])(v92, v88);
      v43 = v86;
      v51 = v13 + 72 * v14;
      *(_DWORD *)(v51 + 64) = -1;
      v52 = (_DWORD *)(v51 + 64);
      *((_BYTE *)v52 - 56) = 0;
      v45 = v52 - 14;
      if ((_DWORD)v43 == -1)
        goto LABEL_61;
      v50 = off_1E340EDD8[v43];
    }
    ((void (*)(char *))v50)(v87);
    *v52 = v43;
    v54 = v86;
    *(_DWORD *)(a2 + 12) = ++v14;
    if ((_DWORD)v54 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_8[v54])(v87, v85);
LABEL_66:
    v15 += 4;
  }
  while (v15 != v70);
  v55 = v69;
  if (!(_DWORD)v12)
    goto LABEL_93;
LABEL_89:
  v61 = 16 * v12;
  v62 = v55;
  do
  {
    v63 = *(WTF **)v62;
    if (*(_QWORD *)v62)
    {
      *(_QWORD *)v62 = 0;
      *((_DWORD *)v62 + 2) = 0;
      WTF::fastFree(v63, v45);
    }
    v62 = (WTF *)((char *)v62 + 16);
    v61 -= 16;
  }
  while (v61);
LABEL_93:
  if (v55)
    WTF::fastFree(v55, v45);
  v64 = v81;
  if (HIDWORD(v82))
  {
    v65 = 8 * HIDWORD(v82);
    v66 = v81;
    do
    {
      v67 = *(_QWORD *)v66;
      *(_QWORD *)v66 = 0;
      if (v67)
      {
        v68 = *(WTF **)(v67 + 8);
        if (v68)
        {
          *(_QWORD *)(v67 + 8) = 0;
          *(_DWORD *)(v67 + 16) = 0;
          WTF::fastFree(v68, v45);
        }
        WTF::fastFree((WTF *)v67, v45);
      }
      v66 = (WTF *)((char *)v66 + 8);
      v65 -= 8;
    }
    while (v65);
  }
  if (v64)
    WTF::fastFree(v64, v45);
}

void WebCore::polygonsForRect(uint64_t a1, uint64_t *a2, uint64_t a3, __n128 a4)
{
  unint64_t v4;
  __n128 *v5;
  unint64_t v6;
  uint64_t v7;
  __n128 v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  unsigned int v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *Node;
  float v26;
  float *v27;
  float v28;
  float *v29;
  float *v30;
  WTF *v31;
  unint64_t v32;
  int v33;
  char *v34;
  uint64_t v35;
  WTF *v36;
  int v37;
  WTF *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  __int128 *v50;
  unint64_t v51;
  size_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  float **v60;
  float **v61;
  _OWORD *v62;
  uint64_t v63;
  unsigned int v64;
  float *v65;
  float *v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v83;
  float v84;
  float *v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF **v93;
  WTF *v94;
  uint64_t v95;
  char **v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  WTF *v101;
  WTF *v102;
  void **v103;
  uint64_t v104;
  void **v105;
  float *v106;
  WTF *v107;
  unsigned int v108;
  float *v109;
  float *v110;
  float *v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  uint64_t v117;
  float **v118;
  uint64_t v119;
  float v120;
  float *v121;
  float v122;
  float v123;
  float v124;
  float v125;
  char *v127;
  int v128;
  int v129;
  unint64_t v130;
  int v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  char v136;
  int v137;
  char *v138;
  void *v139;
  WTF *v140;
  WTF *v141;
  uint64_t v142;
  WTF *v143;
  WTF *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int *v148;
  uint64_t v149;
  void *v150;
  WTF *v151;
  uint64_t v152;
  uint64_t v153;
  WTF *v154;
  char *v155;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  WTF *v162;
  char v164;
  __n128 *v165;
  __int128 v166;
  WTF *v168;
  WTF *v169;
  uint64_t v170;
  WTF *v171;
  uint64_t v172;
  void *__src[2];
  WTF *v174[2];

  v4 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v4)
  {
    if (v4 >> 28)
    {
      __break(0xC471u);
      goto LABEL_188;
    }
    v157 = WTF::fastMalloc((WTF *)(16 * v4));
    v5 = (__n128 *)v157;
    v158 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v158)
    {
      v159 = 0;
      v160 = *a2;
      v161 = 16 * v158;
      do
      {
        a4 = *(__n128 *)(v160 + v159);
        *(__n128 *)(v157 + v159) = a4;
        v159 += 16;
      }
      while (v161 != v159);
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 126 - 2 * __clz(v4);
  if ((_DWORD)v4)
    v7 = v6;
  else
    v7 = 0;
  v8.n128_f32[0] = std::__introsort<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_0 &,WebCore::FloatRect*,false>(v5, &v5[v4], v7, 1, a4);
  v165 = &v5[v4];
  std::__introsort<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_1 &,WebCore::FloatRect*,false>(v5, v165, v7, 1, v8);
  v169 = 0;
  v170 = 0;
  v162 = (WTF *)v5;
  if ((_DWORD)v4)
  {
    if (v4 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1961A8B50);
    }
    v10 = 16 * v4;
    v11 = (WTF *)WTF::fastMalloc((WTF *)(16 * v4));
    v12 = 0;
    v13 = 0;
    LODWORD(v170) = v4;
    v169 = v11;
    v14 = (float *)v162;
    do
    {
      v15 = v12;
      v16 = v10;
      v17 = (float *)((char *)v162 + 8);
      while (1)
      {
        if (v15)
        {
          v18 = *(v17 - 2);
          if (v18 <= *v14 && (float)(v18 + *v17) >= (float)(*v14 + v14[2]))
          {
            v19 = *(v17 - 1);
            v20 = v14[1];
            if (v19 <= v20 && (float)(v19 + v17[1]) >= (float)(v20 + v14[3]))
              break;
          }
        }
        v17 += 4;
        v15 -= 16;
        v16 -= 16;
        if (!v16)
        {
          v21 = *v14;
          v22 = v14[1];
          v24 = v14[2];
          v23 = v14[3];
          Node = WebCore::FloatPointGraph::findOrCreateNode(a3, *v14, v22);
          v26 = v22 + v23;
          v27 = WebCore::FloatPointGraph::findOrCreateNode(a3, v21, v26);
          v28 = v21 + v24;
          v29 = WebCore::FloatPointGraph::findOrCreateNode(a3, v28, v26);
          v30 = WebCore::FloatPointGraph::findOrCreateNode(a3, v28, v22);
          v31 = (WTF *)WTF::fastMalloc((WTF *)0x40);
          v174[0] = v31;
          *(_QWORD *)v31 = Node;
          *((_QWORD *)v31 + 1) = v30;
          *((_QWORD *)v31 + 2) = v30;
          *((_QWORD *)v31 + 3) = v29;
          *((_QWORD *)v31 + 4) = v29;
          *((_QWORD *)v31 + 5) = v27;
          *((_QWORD *)v31 + 6) = v27;
          *((_QWORD *)v31 + 7) = Node;
          v174[1] = (WTF *)0x400000004;
          if (v13 == (_DWORD)v170)
          {
            v32 = WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v169, v13 + 1, (unint64_t)v174);
            v33 = HIDWORD(v170);
            v11 = v169;
            v34 = (char *)v169 + 16 * HIDWORD(v170);
            *(_QWORD *)v34 = 0;
            *((_QWORD *)v34 + 1) = 0;
            v35 = *(_QWORD *)v32;
            *(_QWORD *)v32 = 0;
            *(_QWORD *)v34 = v35;
            LODWORD(v35) = *(_DWORD *)(v32 + 8);
            *(_DWORD *)(v32 + 8) = 0;
            *((_DWORD *)v34 + 2) = v35;
          }
          else
          {
            v34 = (char *)v11 + 16 * v13;
            *(_QWORD *)v34 = 0;
            *((_QWORD *)v34 + 1) = 0;
            v36 = v174[0];
            v174[0] = 0;
            *(_QWORD *)v34 = v36;
            *((_DWORD *)v34 + 2) = v174[1];
            v32 = (unint64_t)v174;
            v33 = HIDWORD(v170);
          }
          v37 = *(_DWORD *)(v32 + 12);
          *(_DWORD *)(v32 + 12) = 0;
          *((_DWORD *)v34 + 3) = v37;
          v13 = v33 + 1;
          HIDWORD(v170) = v33 + 1;
          v38 = v174[0];
          if (v174[0])
          {
            v174[0] = 0;
            LODWORD(v174[1]) = 0;
            WTF::fastFree(v38, v9);
          }
          break;
        }
      }
      v14 += 4;
      v12 += 16;
    }
    while (v14 != (float *)v165);
  }
  else
  {
    v13 = 0;
  }
  v39 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v39)
  {
    v40 = *(uint64_t **)a3;
    v41 = 8 * v39;
    do
    {
      v42 = *v40;
      *(_BYTE *)(v42 + 24) = 0;
      if (*(_DWORD *)(v42 + 16))
      {
        if (*(_DWORD *)(v42 + 20))
          *(_DWORD *)(v42 + 20) = 0;
        v43 = *(WTF **)(v42 + 8);
        if (v43)
        {
          *(_QWORD *)(v42 + 8) = 0;
          *(_DWORD *)(v42 + 16) = 0;
          WTF::fastFree(v43, v9);
        }
      }
      ++v40;
      v41 -= 8;
    }
    while (v41);
  }
  if (!v13)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
LABEL_161:
    v151 = v169;
    goto LABEL_169;
  }
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = v169;
  v48 = (WTF *)((char *)v169 + 16 * v13);
  do
  {
    v49 = *((unsigned int *)v47 + 3);
    if ((_DWORD)v49)
    {
      v50 = *(__int128 **)v47;
      v51 = v49 + v44;
      v52 = 16 * v44;
      if (v49 + v44 > v45)
      {
        v53 = v45 + (v45 >> 2);
        if (v53 >= 0x10)
          v54 = v53 + 1;
        else
          v54 = 16;
        if (v54 <= v51)
          v45 = v51;
        else
          v45 = v54;
        if (v45 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x1961A8B38);
        }
        v55 = (char *)WTF::fastMalloc((WTF *)(16 * v45));
        v45 = v45;
        memcpy(v55, v46, v52);
        if (v46)
        {
          if (v55 == v46)
          {
            v55 = 0;
            v45 = 0;
          }
          WTF::fastFree((WTF *)v46, v9);
        }
        v46 = v55;
      }
      v56 = 16 * v49;
      do
      {
        v57 = *v50++;
        *(_OWORD *)&v46[v52] = v57;
        v52 += 16;
        v56 -= 16;
      }
      while (v56);
      v44 = v51;
    }
    v47 = (WTF *)((char *)v47 + 16);
  }
  while (v47 != v48);
  if (!v44)
  {
    if (v46)
      WTF::fastFree((WTF *)v46, v9);
LABEL_153:
    v145 = HIDWORD(v170);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 12) = v145;
    if ((_DWORD)v145)
    {
      if (v145 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1961A8B58);
      }
      v146 = 16 * v145;
      v147 = WTF::fastMalloc((WTF *)(16 * v145));
      *(_DWORD *)(a1 + 8) = v145;
      *(_QWORD *)a1 = v147;
      v148 = (unsigned int *)((char *)v169 + 12);
      do
      {
        v149 = *v148;
        *(_QWORD *)v147 = 0;
        *(_QWORD *)(v147 + 8) = 0;
        *(_DWORD *)(v147 + 12) = v149;
        if ((_DWORD)v149)
        {
          if (v149 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x1961A8B40);
          }
          v150 = (void *)WTF::fastMalloc((WTF *)(16 * v149));
          *(_DWORD *)(v147 + 8) = v149;
          *(_QWORD *)v147 = v150;
          memcpy(v150, *(const void **)(v148 - 3), 16 * *v148);
        }
        v147 += 16;
        v148 += 4;
        v146 -= 16;
      }
      while (v146);
      goto LABEL_164;
    }
    goto LABEL_161;
  }
  v58 = 0;
  v164 = 0;
  v59 = 16 * v44;
  v60 = (float **)v46;
  v61 = (float **)&v46[16 * v44];
  do
  {
    v166 = *(_OWORD *)v60;
    v62 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
    v63 = 0;
    __src[0] = v62;
    *v62 = v166;
    __src[1] = (void *)0x200000002;
    v64 = 2;
    do
    {
      if (v58 != v63)
      {
        v65 = v60[1];
        v67 = *(float **)&v46[v63];
        v66 = *(float **)&v46[v63 + 8];
        v69 = **v60;
        v68 = (*v60)[1];
        v70 = *v65 - v69;
        v71 = v65[1] - v68;
        v73 = *v67;
        v72 = v67[1];
        v74 = *v66 - *v67;
        v75 = v66[1] - v72;
        v76 = (float)(v70 * v75) - (float)(v71 * v74);
        if (v76 != 0.0)
        {
          v77 = (float)((float)((float)(v73 - v69) * v75) - (float)((float)(v72 - v68) * v74)) / v76;
          v78 = v69 + (float)(v77 * v70);
          v79 = v68 + (float)(v77 * v71);
          v80 = (float)(v71 * (float)(v79 - v68)) + (float)(v70 * (float)(v78 - v69));
          v81 = (float)(v71 * v71) + (float)(v70 * v70);
          if (v80 >= 0.0 && v80 <= v81)
          {
            v83 = (float)(v75 * (float)(v79 - v72)) + (float)(v74 * (float)(v78 - v73));
            v84 = (float)(v75 * v75) + (float)(v74 * v74);
            if (v83 >= 0.0 && v83 <= v84)
            {
              v86 = WebCore::FloatPointGraph::findOrCreateNode(a3, v78, v79);
              v174[0] = (WTF *)v86;
              if (v64 == LODWORD(__src[1]))
              {
                v87 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)__src, v64 + 1, (unint64_t)v174);
                v64 = HIDWORD(__src[1]);
                v62 = __src[0];
                *((_QWORD *)__src[0] + HIDWORD(__src[1])) = *(_QWORD *)v87;
              }
              else
              {
                *((_QWORD *)v62 + v64) = v86;
              }
              HIDWORD(__src[1]) = ++v64;
              v164 = 1;
            }
          }
        }
      }
      v63 += 16;
    }
    while (v59 != v63);
    v88 = v64;
    *(_OWORD *)v174 = *(_OWORD *)v60;
    v89 = 126 - 2 * __clz(v64);
    if (v64)
      v90 = v89;
    else
      v90 = 0;
    std::__introsort<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **,false>((float **)v62, (float **)v62 + v64, (float **)v174, v90, 1);
    if (v64 >= 2)
    {
      v91 = v64 + 1;
      v92 = 1;
      while (v92 != v91)
      {
        v93 = (WTF **)v62 + v92;
        v95 = (uint64_t)*(v93 - 1);
        v94 = *v93;
        v174[0] = *v93;
        v96 = (char **)(v95 + 8);
        v97 = *(unsigned int *)(v95 + 20);
        if ((_DWORD)v97)
        {
          v98 = *v96;
          v99 = *(unsigned int *)(v95 + 20);
          while (*(WTF **)v98 != v94)
          {
            v98 += 8;
            if (!--v99)
              goto LABEL_82;
          }
        }
        else
        {
LABEL_82:
          if ((_DWORD)v97 == *(_DWORD *)(v95 + 16))
          {
            v100 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v96, v97 + 1, (unint64_t)v174);
            v97 = *(unsigned int *)(v95 + 20);
            *(_QWORD *)(*(_QWORD *)(v95 + 8) + 8 * v97) = *(_QWORD *)v100;
          }
          else
          {
            *(_QWORD *)&(*v96)[8 * v97] = v94;
          }
          *(_DWORD *)(v95 + 20) = v97 + 1;
        }
        if (++v92 >= v88)
          goto LABEL_87;
      }
      __break(0xC471u);
LABEL_188:
      JUMPOUT(0x1961A8B30);
    }
LABEL_87:
    if (v62)
    {
      __src[0] = 0;
      LODWORD(__src[1]) = 0;
      WTF::fastFree((WTF *)v62, v9);
    }
    v60 += 2;
    v58 += 16;
  }
  while (v60 != v61);
  if (v46)
    WTF::fastFree((WTF *)v46, v9);
  if ((v164 & 1) == 0)
    goto LABEL_153;
  v171 = 0;
  v172 = 0;
  if (!HIDWORD(v170))
  {
LABEL_162:
    *(_QWORD *)a1 = v171;
    *(_QWORD *)(a1 + 8) = v172;
    goto LABEL_163;
  }
  v101 = (WTF *)((char *)v169 + 16 * HIDWORD(v170));
  v168 = v169;
  v102 = v169;
  do
  {
LABEL_95:
    v103 = *(void ***)v102;
    v104 = *((unsigned int *)v102 + 3);
    v105 = *(void ***)v102;
    if (!(_DWORD)v104)
    {
      __break(0xC471u);
      JUMPOUT(0x1961A8B48);
    }
    do
    {
      if (*((_BYTE *)*v105 + 24) || *((_BYTE *)v105[1] + 24))
      {
        v102 = (WTF *)((char *)v102 + 16);
        if (v102 == v101)
          goto LABEL_162;
        goto LABEL_95;
      }
      v105 += 2;
    }
    while (v105 != (void **)(*(_QWORD *)v102 + 16 * v104));
    v106 = (float *)*v103;
    if (!*v103)
      goto LABEL_162;
    v107 = 0;
    v108 = 0;
    v174[0] = 0;
    v174[1] = 0;
    v109 = v106;
    v110 = v106;
LABEL_101:
    v111 = v110;
    v110 = v109;
    *((_BYTE *)v109 + 24) = 1;
    v112 = *v109;
    v113 = v109[1];
    v114 = *v111 - *v109;
    v115 = v111[1] - v113;
    v116 = hypotf(v114, v115);
    if (v116 != 0.0)
    {
      v114 = v114 / v116;
      v115 = v115 / v116;
    }
    v117 = *((unsigned int *)v109 + 5);
    if ((_DWORD)v117)
    {
      v109 = 0;
      v118 = (float **)*((_QWORD *)v110 + 1);
      v119 = 8 * v117;
      v120 = 0.0;
      while (1)
      {
        v121 = *v118;
        if (*v118 != v110)
        {
          if (v121 == v106)
          {
            v109 = v106;
            if (!v106)
              break;
LABEL_121:
            __src[0] = v110;
            __src[1] = v109;
            if (v108 == LODWORD(v174[1]))
            {
              v127 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v174, v108 + 1, (unint64_t)__src);
              v128 = HIDWORD(v174[1]);
              v107 = v174[0];
              *((_OWORD *)v174[0] + HIDWORD(v174[1])) = *(_OWORD *)v127;
            }
            else
            {
              *((_OWORD *)v107 + v108) = *(_OWORD *)__src;
              v128 = HIDWORD(v174[1]);
            }
            v108 = v128 + 1;
            HIDWORD(v174[1]) = v128 + 1;
            if (v109 == v106)
            {
              __src[0] = v174[0];
              LODWORD(__src[1]) = v174[1];
              HIDWORD(__src[1]) = v128 + 1;
              if (v128 == -1)
                goto LABEL_136;
LABEL_131:
              v129 = HIDWORD(v172);
              if (HIDWORD(v172) == (_DWORD)v172)
              {
                v130 = WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v171, HIDWORD(v172) + 1, (unint64_t)__src);
                v131 = HIDWORD(v172);
                v132 = (char *)v171 + 16 * HIDWORD(v172);
                v133 = *(unsigned int *)(v130 + 12);
                *(_QWORD *)v132 = 0;
                *((_QWORD *)v132 + 1) = 0;
                *((_DWORD *)v132 + 3) = v133;
                if ((_DWORD)v133)
                {
                  if (v133 >> 28)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1961A8B60);
                  }
                  v134 = v130;
                  v135 = (void *)WTF::fastMalloc((WTF *)(16 * v133));
                  *((_DWORD *)v132 + 2) = v133;
                  *(_QWORD *)v132 = v135;
                  memcpy(v135, *(const void **)v134, 16 * *(unsigned int *)(v134 + 12));
                }
                v136 = 0;
                v137 = v131 + 1;
              }
              else
              {
                v138 = (char *)v171 + 16 * HIDWORD(v172);
                *(_QWORD *)v138 = 0;
                *((_QWORD *)v138 + 1) = 0;
                *((_DWORD *)v138 + 3) = v108;
                if (v108 >> 28)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1961A8B68);
                }
                v139 = (void *)WTF::fastMalloc((WTF *)(16 * v108));
                *((_DWORD *)v138 + 2) = v108;
                *(_QWORD *)v138 = v139;
                memcpy(v139, __src[0], 16 * HIDWORD(__src[1]));
                v136 = 0;
                v137 = v129 + 1;
              }
              HIDWORD(v172) = v137;
              goto LABEL_140;
            }
            goto LABEL_101;
          }
          if (!*((_BYTE *)v121 + 24))
          {
            v122 = *v121 - v112;
            v123 = v121[1] - v113;
            v124 = hypotf(v122, v123);
            if (v124 != 0.0)
            {
              v122 = v122 / v124;
              v123 = v123 / v124;
            }
            v125 = acosf((float)(v115 * v123) + (float)(v122 * v114));
            if ((float)((float)(v122 * v115) - (float)(v123 * v114)) < 0.0)
              v125 = 6.2832 - v125;
            if (v125 > v120 || v109 == 0)
            {
              v109 = v121;
              v120 = v125;
            }
          }
        }
        ++v118;
        v119 -= 8;
        if (!v119)
        {
          if (!v109)
            break;
          goto LABEL_121;
        }
      }
    }
    __src[0] = 0;
    __src[1] = 0;
    if (v174[0])
    {
      WTF::fastFree(v174[0], v9);
      v108 = HIDWORD(__src[1]);
      if (HIDWORD(__src[1]))
        goto LABEL_131;
    }
LABEL_136:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v136 = 1;
LABEL_140:
    v140 = (WTF *)__src[0];
    if (__src[0])
    {
      __src[0] = 0;
      LODWORD(__src[1]) = 0;
      WTF::fastFree(v140, v9);
    }
    v102 = v168;
  }
  while ((v136 & 1) == 0);
  v141 = v171;
  if (HIDWORD(v172))
  {
    v142 = 16 * HIDWORD(v172);
    v143 = v171;
    do
    {
      v144 = *(WTF **)v143;
      if (*(_QWORD *)v143)
      {
        *(_QWORD *)v143 = 0;
        *((_DWORD *)v143 + 2) = 0;
        WTF::fastFree(v144, v9);
      }
      v143 = (WTF *)((char *)v143 + 16);
      v142 -= 16;
    }
    while (v142);
  }
  if (v141)
    WTF::fastFree(v141, v9);
LABEL_163:
  LODWORD(v145) = HIDWORD(v170);
LABEL_164:
  v151 = v169;
  if ((_DWORD)v145)
  {
    v152 = 0;
    v153 = 16 * v145;
    do
    {
      v154 = *(WTF **)((char *)v151 + v152);
      if (v154)
      {
        v155 = (char *)v151 + v152;
        *(_QWORD *)v155 = 0;
        *((_DWORD *)v155 + 2) = 0;
        WTF::fastFree(v154, v9);
      }
      v152 += 16;
    }
    while (v153 != v152);
  }
LABEL_169:
  if (v151)
    WTF::fastFree(v151, v9);
  if (v162)
    WTF::fastFree(v162, v9);
}

void WebCore::PathUtilities::pathWithShrinkWrappedRects(uint64_t a1@<X0>, WebCore::Path *a2@<X8>, __n128 a3@<Q0>)
{
  void *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  int v9;
  uint64_t v10;
  WebCore::PathCG *v11;
  CGPathRef *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  WTF *v16;
  unsigned int v17;
  char v18;

  WebCore::PathUtilities::pathsWithShrinkWrappedRects(a1, (uint64_t)&v16, a3);
  *((_DWORD *)a2 + 16) = 0;
  v5 = v16;
  v6 = v17;
  if (!v17)
    goto LABEL_15;
  v7 = 72 * v17;
  v8 = v16;
  do
  {
    v9 = *((_DWORD *)v8 + 16);
    if (v9 == 2)
    {
      v10 = *((_QWORD *)v8 + 1);
      if (!v10 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 200))(v10) & 1) == 0)
      {
LABEL_8:
        v11 = (WebCore::PathCG *)WebCore::Path::ensurePlatformPathImpl(a2);
        v12 = (CGPathRef *)WebCore::Path::ensurePlatformPathImpl(v8);
        WebCore::PathCG::addPath(v11, v12, (const WebCore::AffineTransform *)&constinit_3);
      }
    }
    else if (v9)
    {
      goto LABEL_8;
    }
    v8 = (WTF *)((char *)v8 + 72);
    v7 -= 72;
  }
  while (v7);
  v13 = 72 * v6;
  v14 = (_DWORD *)((char *)v5 + 64);
  do
  {
    v15 = *v14;
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_8[v15])(&v18, v14 - 14);
    *v14 = -1;
    v14 += 18;
    v13 -= 72;
  }
  while (v13);
  v5 = v16;
LABEL_15:
  if (v5)
    WTF::fastFree(v5, v4);
}

void WebCore::PathUtilities::pathWithShrinkWrappedRects(WebCore::FloatRoundedRect::Radii *this@<X1>, uint64_t a2@<X0>, WebCore::Path *a3@<X8>)
{
  __n128 v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  WebCore::PathCG *v14;
  CGPathRef *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  WTF *v24[2];
  __int128 v25;
  __int128 v26;
  char v27;

  if (!WebCore::FloatRoundedRect::Radii::isUniformCornerRadius(this))
  {
    *((_DWORD *)a3 + 16) = 0;
    v19 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v19)
    {
      v20 = *(__int128 **)a2;
      v21 = 16 * v19;
      do
      {
        v22 = *v20++;
        *(_OWORD *)v24 = v22;
        v23 = *((_OWORD *)this + 1);
        v25 = *(_OWORD *)this;
        v26 = v23;
        WebCore::Path::addRoundedRect(a3, (WebCore::FloatRect *)v24, 0);
        v21 -= 16;
      }
      while (v21);
    }
    return;
  }
  v6.n128_u32[0] = *(_DWORD *)this;
  WebCore::PathUtilities::pathsWithShrinkWrappedRects(a2, (uint64_t)v24, v6);
  *((_DWORD *)a3 + 16) = 0;
  v8 = v24[0];
  v9 = HIDWORD(v24[1]);
  if (!HIDWORD(v24[1]))
    goto LABEL_16;
  v10 = 72 * HIDWORD(v24[1]);
  v11 = v24[0];
  do
  {
    v12 = *((_DWORD *)v11 + 16);
    if (v12 == 2)
    {
      v13 = *((_QWORD *)v11 + 1);
      if (!v13 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 200))(v13) & 1) == 0)
      {
LABEL_9:
        v14 = (WebCore::PathCG *)WebCore::Path::ensurePlatformPathImpl(a3);
        v15 = (CGPathRef *)WebCore::Path::ensurePlatformPathImpl(v11);
        WebCore::PathCG::addPath(v14, v15, (const WebCore::AffineTransform *)&constinit_3);
      }
    }
    else if (v12)
    {
      goto LABEL_9;
    }
    v11 = (WTF *)((char *)v11 + 72);
    v10 -= 72;
  }
  while (v10);
  v16 = 72 * v9;
  v17 = (_DWORD *)((char *)v8 + 64);
  do
  {
    v18 = *v17;
    if ((_DWORD)v18 != -1)
      ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_8[v18])(&v27, v17 - 14);
    *v17 = -1;
    v17 += 18;
    v16 -= 72;
  }
  while (v16);
  v8 = v24[0];
LABEL_16:
  if (v8)
    WTF::fastFree(v8, v7);
}

void WebCore::PathUtilities::pathWithShrinkWrappedRectsForOutline(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, __n128 a6@<Q0>, float a7@<S1>)
{
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  void *v19;
  uint64_t v20;
  unsigned int *v21;
  _QWORD *v22;
  float *v23;
  float *v24;
  float *v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  BOOL v31;
  float v32;
  float v33;
  float v34;
  int v35;
  float v36;
  float v37;
  float *v38;
  float *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float *v45;
  float *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  float *v52;
  float *v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  void *v72;
  float *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t i;
  float **v77;
  unint64_t v78;
  _QWORD *v79;
  float *v80;
  float *v81;
  float *v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  int v92;
  float v93;
  float v97;
  float v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  __int128 v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  WTF *v108;
  WTF *v109;
  uint64_t v110;
  WTF *v111;
  uint64_t v112;
  WTF *v113;
  _BOOL4 v114;
  _BOOL4 v115;
  float v116;
  float v117;
  _BOOL4 v118;
  _BOOL4 v119;
  float v120;
  float v121;
  float v122;
  float v123;
  _BOOL4 v124;
  _BOOL4 v125;
  float v126;
  float v127;
  float v128;
  float v129;
  uint64_t v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  unint64_t v139;
  float v140;
  float v141;
  char v142;
  WTF *v143;
  unsigned int v144;
  WTF *v145;
  uint64_t v146;
  float v147[10];
  _BYTE v148[32];
  __int128 v149;
  int v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 110))
    v9 = *(float *)(a2 + 104);
  else
    v9 = (float)*(int *)(a2 + 104);
  if (*(_BYTE *)(a2 + 118))
    v10 = *(float *)(a2 + 112);
  else
    v10 = (float)*(int *)(a2 + 112);
  if (*(_BYTE *)(a2 + 126))
    v11 = *(float *)(a2 + 120);
  else
    v11 = (float)*(int *)(a2 + 120);
  if (*(_BYTE *)(a2 + 134))
    v12 = *(float *)(a2 + 128);
  else
    v12 = (float)*(int *)(a2 + 128);
  if (*(_BYTE *)(a2 + 158))
    v13 = *(float *)(a2 + 152);
  else
    v13 = (float)*(int *)(a2 + 152);
  if (*(_BYTE *)(a2 + 166))
    v14 = *(float *)(a2 + 160);
  else
    v14 = (float)*(int *)(a2 + 160);
  if (*(_BYTE *)(a2 + 142))
    v15 = *(float *)(a2 + 136);
  else
    v15 = (float)*(int *)(a2 + 136);
  if (*(_BYTE *)(a2 + 150))
    v16 = *(float *)(a2 + 144);
  else
    v16 = (float)*(int *)(a2 + 144);
  v147[0] = v9;
  v147[1] = v10;
  v147[2] = v11;
  v147[3] = v12;
  v147[4] = v13;
  v147[5] = v14;
  v147[6] = v15;
  v147[7] = v16;
  v147[8] = a6.n128_f32[0];
  v147[9] = a7;
  if (*(_DWORD *)(a1 + 12) == 1)
  {
    WebCore::PathUtilities::pathWithShrinkWrappedRectsForOutline(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::BorderData const&,float,WebCore::TextDirection,WebCore::WritingMode,float)::$_0::operator()((WebCore::Path *)a5, v147, *(float **)a1);
    return;
  }
  v145 = 0;
  v146 = 0;
  WebCore::polygonsForRect((uint64_t)&v143, (uint64_t *)a1, (uint64_t)&v145, a6);
  v20 = v144;
  if (v144 == 1)
  {
    v21 = (unsigned int *)v143;
    if (*((_DWORD *)v143 + 3) != 4)
      goto LABEL_69;
    v22 = *(_QWORD **)v143;
    v24 = *(float **)(*(_QWORD *)v143 + 48);
    v23 = *(float **)(*(_QWORD *)v143 + 56);
    v25 = **(float ***)v143;
    v26 = *(float **)(*(_QWORD *)v143 + 8);
    v27 = v23[1];
    v28 = *v26;
    v29 = v27 - v24[1];
    v30 = *v26 - *v25;
    if (v29 >= 0.0 || v30 <= 0.0)
    {
      v33 = v26[1];
      v34 = v33 - v25[1];
      v32 = *v23;
      if ((float)(*v23 - *v24) <= 0.0 || v34 <= 0.0)
      {
        v35 = 0;
        v31 = v29 > 0.0 && v30 < 0.0;
        v37 = 0.0;
        if (v31)
          v36 = v32;
        else
          v36 = 0.0;
      }
      else
      {
        v31 = 0;
        v35 = 0;
        v37 = 0.0;
        v36 = 0.0;
      }
    }
    else
    {
      v31 = 0;
      v32 = *v23;
      v33 = v26[1];
      v34 = v33 - v25[1];
      v35 = 1;
      v36 = 0.0;
      v37 = v32;
    }
    v38 = (float *)v22[2];
    v39 = (float *)v22[3];
    v40 = *v39;
    v41 = *v39 - *v38;
    if (v34 >= 0.0 || v41 <= 0.0)
    {
      v42 = v39[1];
      v43 = v42 - v38[1];
      if (v30 > 0.0 && v43 > 0.0 || v34 <= 0.0 || v41 >= 0.0)
      {
        v44 = v27;
      }
      else
      {
        v31 = 1;
        v44 = v33;
        v36 = v28;
      }
      v33 = v27;
    }
    else
    {
      v42 = v39[1];
      v43 = v42 - v38[1];
      v35 = 1;
      v37 = v28;
      v44 = v27;
    }
    v46 = (float *)v22[4];
    v45 = (float *)v22[5];
    v47 = *v45 - *v46;
    if (v43 >= 0.0 || v47 <= 0.0)
    {
      v48 = v45[1];
      v49 = v48 - v46[1];
      if (v41 > 0.0 && v49 > 0.0 || v43 <= 0.0 || v47 >= 0.0)
      {
        v40 = v36;
      }
      else
      {
        v31 = 1;
        v44 = v42;
      }
    }
    else
    {
      v48 = v45[1];
      v49 = v48 - v46[1];
      v35 = 1;
      v37 = *v39;
      v40 = v36;
      v33 = v42;
    }
    v50 = v32 - *v24;
    if (v49 >= 0.0 || v50 <= 0.0)
    {
      if ((v29 <= 0.0 || v47 <= 0.0) && v49 > 0.0 && v50 < 0.0)
      {
        v31 = 1;
        v44 = v48;
        v40 = *v45;
      }
      v48 = v33;
      if (!v35)
        goto LABEL_69;
    }
    else
    {
      v37 = *v45;
    }
    if (v31)
    {
      v139 = LODWORD(v37) | ((unint64_t)LODWORD(v48) << 32);
      v140 = v40 - v37;
      v141 = v44 - v48;
      v142 = 1;
      WebCore::PathUtilities::pathWithShrinkWrappedRectsForOutline(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::BorderData const&,float,WebCore::TextDirection,WebCore::WritingMode,float)::$_0::operator()((WebCore::Path *)a5, v147, (float *)&v139);
      goto LABEL_153;
    }
LABEL_69:
    LOBYTE(v139) = 0;
    v142 = 0;
    *(_DWORD *)(a5 + 64) = 0;
    v51 = *(unsigned int *)(a1 + 12);
    if ((a3 & 1) != 0)
    {
      if (!(_DWORD)v51)
      {
        __break(0xC471u);
        JUMPOUT(0x1961A987CLL);
      }
      v52 = *(float **)a1;
      v53 = (float *)(*(_QWORD *)a1 + 16 * v51 - 16);
    }
    else
    {
      if (!(_DWORD)v51)
      {
        __break(0xC471u);
        JUMPOUT(0x1961A9884);
      }
      v53 = *(float **)a1;
      v52 = (float *)(*(_QWORD *)a1 + 16 * v51 - 16);
    }
    v54 = v53[2];
    v55 = v9 + v11;
    v56 = 1.0;
    if ((float)(v9 + v11) > v54)
    {
      if ((float)(v54 / v55) <= 1.0)
        v56 = v54 / v55;
      else
        v56 = 1.0;
    }
    v57 = v53[3];
    v58 = v13 + v15;
    if ((float)(v13 + v15) > v54 && v56 >= (float)(v54 / v58))
      v56 = v54 / v58;
    v59 = v10 + v16;
    if ((float)(v10 + v16) > v57 && v56 >= (float)(v57 / v59))
      v56 = v57 / v59;
    v60 = v12 + v14;
    if ((float)(v12 + v14) > v57 && v56 >= (float)(v57 / v60))
      v56 = v57 / v60;
    v61 = v52[2];
    v62 = 1.0;
    if (v56 != 1.0)
    {
      v114 = (float)(v9 * v56) != 0.0;
      v115 = (float)(v10 * v56) != 0.0;
      if (v114 && v115)
        v10 = v10 * v56;
      else
        v10 = 0.0;
      if (v114 && v115)
        v9 = v9 * v56;
      else
        v9 = 0.0;
      v116 = v15 * v56;
      v117 = v16 * v56;
      v118 = v116 != 0.0;
      v119 = v117 != 0.0;
      if (v118 && v119)
        v16 = v117;
      else
        v16 = 0.0;
      if (v118 && v119)
        v15 = v116;
      else
        v15 = 0.0;
    }
    if (v55 > v61)
    {
      v62 = v61 / v55;
      if ((float)(v61 / v55) > 1.0)
        v62 = 1.0;
    }
    v63 = v52[3];
    if (v58 > v61)
    {
      v127 = v61 / v58;
      if (v62 >= v127)
        v62 = v127;
    }
    if (v59 > v63 && v62 >= (float)(v63 / v59))
      v62 = v63 / v59;
    v136 = v9;
    if (v60 > v63 && v62 >= (float)(v63 / v60))
      v62 = v63 / v60;
    v64 = v52[1];
    v135 = v10;
    if (v62 == 1.0)
    {
      v132 = v13;
      v133 = v12;
      v134 = v11;
    }
    else
    {
      v120 = v11 * v62;
      v121 = v12 * v62;
      if ((float)(v11 * v62) == 0.0 || (float)(v12 * v62) == 0.0)
      {
        v121 = 0.0;
        v120 = 0.0;
      }
      v133 = v121;
      v134 = v120;
      v122 = v13 * v62;
      v123 = v14 * v62;
      v124 = v122 != 0.0;
      v125 = v123 != 0.0;
      if (v124 && v125)
        v14 = v123;
      else
        v14 = 0.0;
      if (v124 && v125)
        v126 = v122;
      else
        v126 = 0.0;
      v132 = v126;
    }
    v128 = v16;
    v129 = v15;
    v131 = v14;
    v130 = v20;
    v65 = *v53;
    v66 = v53[1];
    v67 = *v52;
    v68 = v64 + v63;
    if ((a4 - 2) < 4)
    {
      v71 = v65 + v54;
      v69 = v67 + v61;
      v64 = v53[1];
      v70 = v68;
    }
    else
    {
      v69 = v67 + v61;
      v70 = v66 + v57;
      v71 = v67 + v61;
      v67 = *v53;
    }
    v73 = (float *)WTF::fastMalloc((WTF *)0x20);
    *v73 = v65;
    v73[1] = v66;
    v73[2] = v71;
    v73[3] = v64;
    v73[4] = v69;
    v73[5] = v68;
    v73[6] = v67;
    v73[7] = v70;
    v74 = v21[3];
    if ((_DWORD)v74)
    {
      v75 = 0;
      for (i = 0; i < v74; ++i)
      {
        v77 = (float **)(*(_QWORD *)v21 + v75);
        v78 = v74 - 1;
        if (i)
          v78 = (i - 1);
        v79 = (_QWORD *)(*(_QWORD *)v21 + 16 * v78);
        v80 = (float *)v79[1];
        v82 = *v77;
        v81 = v77[1];
        v83 = *v80;
        v84 = v80[1];
        v85 = *v82;
        v86 = v82[1];
        v87 = *v80 - *(float *)*v79;
        v88 = v84 - *(float *)(*v79 + 4);
        v89 = *v81 - *v82;
        v90 = v81[1] - v86;
        if (v88 >= 0.0 || v89 <= 0.0)
        {
          if (v87 <= 0.0 || v90 <= 0.0)
          {
            if (v88 <= 0.0 || v89 >= 0.0)
            {
              if (v87 < 0.0 && v90 < 0.0 && v73[6] == v83 && v73[7] == v84)
              {
                v92 = 3;
                v138 = v128;
                v93 = v129;
LABEL_125:
                v137 = v93;
                v97 = hypotf(v87, v88);
                if (v97 != 0.0)
                {
                  v87 = v87 / v97;
                  v88 = v88 / v97;
                }
                v98 = hypotf(v89, v90);
                if (v98 != 0.0)
                {
                  v89 = v89 / v98;
                  v90 = v90 / v98;
                }
                *(float *)v148 = v83 - (float)(v137 * v87);
                *(float *)&v148[4] = v84 - (float)(v138 * v88);
                *(float *)&v148[8] = (float)(v137 * v89) + v85;
                *(float *)&v148[12] = (float)(v138 * v90) + v86;
                if (i)
                  WebCore::Path::addLineTo(a5, (const WebCore::FloatPoint *)v148);
                else
                  WebCore::Path::moveTo((WebCore::Path *)a5, (const WebCore::FloatPoint *)v148);
                __asm { BR              X11 }
              }
            }
            else if (v73[4] == v83 && v73[5] == v84)
            {
              v92 = 2;
              v138 = v131;
              v93 = v132;
              goto LABEL_125;
            }
          }
          else if (v73[2] == v83 && v73[3] == v84)
          {
            v92 = 1;
            v138 = v133;
            v93 = v134;
            goto LABEL_125;
          }
        }
        else if (*v73 == v83 && v73[1] == v84)
        {
          v92 = 0;
          v138 = v135;
          v93 = v136;
          goto LABEL_125;
        }
        if (i)
          WebCore::Path::addLineTo(a5, (const WebCore::FloatPoint *)v80);
        else
          WebCore::Path::moveTo((WebCore::Path *)a5, (const WebCore::FloatPoint *)v80);
        v74 = v21[3];
        v75 += 16;
      }
    }
    v99 = *(_DWORD *)(a5 + 64);
    if (v99 == 2)
    {
      v100 = *(_QWORD *)(a5 + 8);
      v20 = v130;
      if (!v100)
        goto LABEL_151;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 200))(v100) & 1) != 0)
        goto LABEL_152;
      v99 = *(_DWORD *)(a5 + 64);
    }
    else
    {
      v20 = v130;
      if (!v99)
        goto LABEL_152;
    }
    if (v99 != 2)
    {
      if (v99 != 1)
        goto LABEL_151;
      v101 = *(_DWORD *)(a5 + 60);
      if (v101 == 6 || v101 == 15)
        goto LABEL_152;
      goto LABEL_149;
    }
    v102 = *(_QWORD *)(a5 + 8);
    if (!v102)
      goto LABEL_151;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 208))(v102) & 1) == 0)
    {
      if (*(_DWORD *)(a5 + 64) != 1)
        goto LABEL_151;
      v101 = *(_DWORD *)(a5 + 60);
LABEL_149:
      if (v101 == 5)
      {
        *(_OWORD *)v148 = *(_OWORD *)(a5 + 8);
        *(_QWORD *)&v148[13] = *(_QWORD *)(a5 + 21);
        v103 = *(_OWORD *)&v148[16];
        *(_OWORD *)(a5 + 40) = v149;
        v104 = v150;
        *(_OWORD *)(a5 + 8) = *(_OWORD *)v148;
        *(_OWORD *)(a5 + 24) = v103;
        *(_DWORD *)(a5 + 56) = v104;
        *(_DWORD *)(a5 + 60) = 6;
        goto LABEL_152;
      }
LABEL_151:
      v105 = WebCore::Path::ensureImpl((WebCore::Path *)a5);
      (*(void (**)(uint64_t))(*(_QWORD *)v105 + 120))(v105);
    }
LABEL_152:
    WTF::fastFree((WTF *)v73, v72);
    goto LABEL_153;
  }
  *(_QWORD *)(a5 + 64) = 0;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  v21 = (unsigned int *)v143;
LABEL_153:
  if ((_DWORD)v20)
  {
    v106 = 16 * v20;
    v107 = v21;
    do
    {
      v108 = *(WTF **)v107;
      if (*(_QWORD *)v107)
      {
        *(_QWORD *)v107 = 0;
        v107[2] = 0;
        WTF::fastFree(v108, v19);
      }
      v107 += 4;
      v106 -= 16;
    }
    while (v106);
  }
  if (v21)
    WTF::fastFree((WTF *)v21, v19);
  v109 = v145;
  if (HIDWORD(v146))
  {
    v110 = 8 * HIDWORD(v146);
    v111 = v145;
    do
    {
      v112 = *(_QWORD *)v111;
      *(_QWORD *)v111 = 0;
      if (v112)
      {
        v113 = *(WTF **)(v112 + 8);
        if (v113)
        {
          *(_QWORD *)(v112 + 8) = 0;
          *(_DWORD *)(v112 + 16) = 0;
          WTF::fastFree(v113, v19);
        }
        WTF::fastFree((WTF *)v112, v19);
      }
      v111 = (WTF *)((char *)v111 + 8);
      v110 -= 8;
    }
    while (v110);
  }
  if (v109)
    WTF::fastFree(v109, v19);
}

double WebCore::PathUtilities::pathWithShrinkWrappedRectsForOutline(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::BorderData const&,float,WebCore::TextDirection,WebCore::WritingMode,float)::$_0::operator()(WebCore::Path *a1, float *a2, float *a3)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  double v36;
  int v37;
  double v38;
  int v39;
  double v40;
  int v41;
  double v42;
  int v43;
  double v44;
  uint64_t v45;
  double v46;
  unint64_t v47;
  double v48;
  uint64_t v49;
  double v50;
  unint64_t v51;
  double v52;
  uint64_t v53;
  double v54;
  unint64_t v55;
  double v56;
  uint64_t v57;
  double v58;
  unint64_t v59;
  _BYTE v61[48];
  _DWORD v62[4];
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;

  v4 = a2[8];
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[3];
  if ((float)(v6 - v4) >= v4)
    v8 = a2[8];
  else
    v8 = v6 - v4;
  if (v6 <= v4)
    v8 = 0.0;
  v9 = v6 + v8;
  if (v9 <= 0.0)
    v9 = 0.0;
  v10 = a2[2];
  v11 = a2[5];
  v12 = v5 - v4;
  if ((float)(v5 - v4) >= v4)
    v12 = a2[8];
  if (v5 <= v4)
    v13 = 0.0;
  else
    v13 = v12;
  v14 = v7 - v4;
  if ((float)(v7 - v4) >= v4)
    v14 = a2[8];
  if (v7 <= v4)
    v14 = 0.0;
  v15 = v7 + v14;
  if (v15 <= 0.0)
    v15 = 0.0;
  v16 = v5 + v13;
  v17 = a2[7];
  v18 = a2[4];
  v19 = v10 - v4;
  if ((float)(v10 - v4) >= v4)
    v19 = a2[8];
  if (v10 <= v4)
    v19 = 0.0;
  v20 = v10 + v19;
  v21 = v11 - v4;
  if ((float)(v11 - v4) >= v4)
    v21 = a2[8];
  if (v11 <= v4)
    v21 = 0.0;
  v22 = v11 + v21;
  if (v22 <= 0.0)
    v22 = 0.0;
  v23 = a2[6];
  v24 = fmaxf(v16, 0.0);
  v25 = fmaxf(v20, 0.0);
  v26 = v18 - v4;
  if ((float)(v18 - v4) >= v4)
    v26 = a2[8];
  if (v18 <= v4)
    v26 = 0.0;
  v27 = v18 + v26;
  v28 = v17 - v4;
  if ((float)(v17 - v4) >= v4)
    v28 = a2[8];
  if (v17 <= v4)
    v28 = 0.0;
  v29 = v17 + v28;
  if (v29 <= 0.0)
    v29 = 0.0;
  v30 = fmaxf(v27, 0.0);
  v31 = v23 - v4;
  if ((float)(v23 - v4) >= v4)
    v31 = a2[8];
  if (v23 <= v4)
    v31 = 0.0;
  v32 = fmaxf(v23 + v31, 0.0);
  v33 = a3[2];
  v34 = 1.0;
  if ((float)(v24 + v25) > v33)
  {
    v34 = v33 / (float)(v24 + v25);
    if (v34 > 1.0)
      v34 = 1.0;
  }
  if ((float)(v32 + v30) > v33 && v34 >= (float)(v33 / (float)(v32 + v30)))
    v34 = v33 / (float)(v32 + v30);
  v35 = a3[3];
  if ((float)(v9 + v29) > v35 && v34 >= (float)(v35 / (float)(v9 + v29)))
    v34 = v35 / (float)(v9 + v29);
  if ((float)(v15 + v22) > v35 && v34 >= (float)(v35 / (float)(v15 + v22)))
    v34 = v35 / (float)(v15 + v22);
  if (v34 != 1.0)
  {
    v24 = v24 * v34;
    v9 = v9 * v34;
    if (v24 == 0.0 || v9 == 0.0)
    {
      v24 = 0.0;
      v9 = 0.0;
    }
    v25 = v25 * v34;
    v15 = v15 * v34;
    if (v25 == 0.0 || v15 == 0.0)
    {
      v25 = 0.0;
      v15 = 0.0;
    }
    v32 = v32 * v34;
    v29 = v29 * v34;
    if (v32 == 0.0 || v29 == 0.0)
    {
      v32 = 0.0;
      v29 = 0.0;
    }
    v30 = v30 * v34;
    v22 = v22 * v34;
    if (v30 == 0.0 || v22 == 0.0)
    {
      v30 = 0.0;
      v22 = 0.0;
    }
  }
  v36 = *a3 * 64.0;
  if (v36 >= 2147483650.0)
  {
    v37 = 0x7FFFFFFF;
  }
  else if (v36 <= -2147483650.0)
  {
    v37 = 0x80000000;
  }
  else
  {
    v37 = (int)v36;
  }
  v38 = a3[1] * 64.0;
  if (v38 >= 2147483650.0)
  {
    v39 = 0x7FFFFFFF;
  }
  else if (v38 <= -2147483650.0)
  {
    v39 = 0x80000000;
  }
  else
  {
    v39 = (int)v38;
  }
  v40 = v33 * 64.0;
  if (v40 >= 2147483650.0)
  {
    v41 = 0x7FFFFFFF;
  }
  else if (v40 <= -2147483650.0)
  {
    v41 = 0x80000000;
  }
  else
  {
    v41 = (int)v40;
  }
  v42 = v35 * 64.0;
  if (v42 >= 2147483650.0)
  {
    v43 = 0x7FFFFFFF;
  }
  else if (v42 <= -2147483650.0)
  {
    v43 = 0x80000000;
  }
  else
  {
    v43 = (int)v42;
  }
  v44 = v24 * 64.0;
  if (v44 >= 2147483650.0)
  {
    v45 = 0x7FFFFFFFLL;
  }
  else
  {
    v45 = 0x80000000;
    if (v44 > -2147483650.0)
      v45 = (int)v44;
  }
  v46 = v9 * 64.0;
  if (v46 >= 2147483650.0)
  {
    v47 = 0x7FFFFFFF00000000;
  }
  else if (v46 <= -2147483650.0)
  {
    v47 = 0x8000000000000000;
  }
  else
  {
    v47 = (unint64_t)(int)v46 << 32;
  }
  v48 = v25 * 64.0;
  if (v48 >= 2147483650.0)
  {
    v49 = 0x7FFFFFFFLL;
  }
  else
  {
    v49 = 0x80000000;
    if (v48 > -2147483650.0)
      v49 = (int)v48;
  }
  v50 = v15 * 64.0;
  if (v50 >= 2147483650.0)
  {
    v51 = 0x7FFFFFFF00000000;
  }
  else if (v50 <= -2147483650.0)
  {
    v51 = 0x8000000000000000;
  }
  else
  {
    v51 = (unint64_t)(int)v50 << 32;
  }
  v52 = v32 * 64.0;
  if (v52 >= 2147483650.0)
  {
    v53 = 0x7FFFFFFFLL;
  }
  else
  {
    v53 = 0x80000000;
    if (v52 > -2147483650.0)
      v53 = (int)v52;
  }
  v54 = v29 * 64.0;
  if (v54 >= 2147483650.0)
  {
    v55 = 0x7FFFFFFF00000000;
  }
  else if (v54 <= -2147483650.0)
  {
    v55 = 0x8000000000000000;
  }
  else
  {
    v55 = (unint64_t)(int)v54 << 32;
  }
  v56 = v30 * 64.0;
  if (v56 >= 2147483650.0)
  {
    v57 = 0x7FFFFFFFLL;
  }
  else if (v56 <= -2147483650.0)
  {
    v57 = 0x80000000;
  }
  else
  {
    v57 = (int)v56;
  }
  v58 = v22 * 64.0;
  if (v58 >= 2147483650.0)
  {
    v59 = 0x7FFFFFFF00000000;
  }
  else if (v58 <= -2147483650.0)
  {
    v59 = 0x8000000000000000;
  }
  else
  {
    v59 = (unint64_t)(int)v58 << 32;
  }
  v62[0] = v37;
  v62[1] = v39;
  v62[2] = v41;
  v62[3] = v43;
  v63 = v47 | v45;
  v64 = v51 | v49;
  v65 = v55 | v53;
  v66 = v59 | v57;
  *((_DWORD *)a1 + 16) = 0;
  WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)v62, a2[9], (uint64_t)v61);
  return WebCore::Path::addRoundedRect(a1, (WebCore::FloatRect *)v61, 0);
}

__n128 WebCore::Pattern::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  char v12;
  char v13;

  v6 = WTF::fastMalloc((WTF *)0x68);
  *(_DWORD *)v6 = 1;
  *(_BYTE *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 16) = -1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[v7])(&v12, v6 + 8, a1);
    *(_DWORD *)(v6 + 16) = v7;
  }
  *(_BYTE *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 40) = 0;
  if (*(_BYTE *)(a1 + 32))
  {
    *(_DWORD *)(v6 + 32) = -1;
    v8 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[v8])(&v13);
      *(_DWORD *)(v6 + 32) = v8;
    }
    *(_BYTE *)(v6 + 40) = 1;
  }
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  v11 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v6 + 96) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 64) = v10;
  *(_OWORD *)(v6 + 80) = v11;
  *(__n128 *)(v6 + 48) = result;
  *a3 = v6;
  return result;
}

void WebCore::Pattern::~Pattern(WebCore::Pattern *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  if (*((_BYTE *)this + 40))
  {
    v2 = *((unsigned int *)this + 8);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v2])(&v4, (char *)this + 24);
    *((_DWORD *)this + 8) = -1;
  }
  v3 = *((unsigned int *)this + 4);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v3])(&v5, (char *)this + 8);
  *((_DWORD *)this + 4) = -1;
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  if (*((_BYTE *)this + 40))
  {
    v2 = *((unsigned int *)this + 8);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v2])(&v4, (char *)this + 24);
    *((_DWORD *)this + 8) = -1;
  }
  v3 = *((unsigned int *)this + 4);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v3])(&v5, (char *)this + 8);
  *((_DWORD *)this + 4) = -1;
}

uint64_t WebCore::PixelBuffer::supportedPixelFormat(unsigned int a1)
{
  return (a1 < 5) & (5u >> a1);
}

void WebCore::PixelBuffer::computeBufferSize(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  int v5;

  v2 = *a1;
  if ((v2 & 0x80000000) != 0
    || ((v3 = (int)a1[1] * v2, !HIDWORD(v3)) ? (v4 = v3 >> 30 == 0) : (v4 = 0), !v4))
  {
    *(_DWORD *)(a2 + 4) = 0;
    goto LABEL_10;
  }
  v5 = 4 * v3;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 4) = v5;
  if (v5 < 0)
LABEL_10:
    *(_BYTE *)a2 = 1;
}

uint64_t WebCore::PixelBuffer::PixelBuffer(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t a5)
{
  const void *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E340EDA0;
  *(_WORD *)(a1 + 16) = *(_WORD *)a2;
  v9 = *(const void **)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v9;
  if (v9)
    CFRetain(v9);
  v10 = *a3;
  *(_QWORD *)(a1 + 32) = *a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a5;
  if ((v10 & 0x80000000) == 0)
    v11 = v10;
  else
    v11 = -(int)v10;
  v12 = HIDWORD(v10);
  if ((v12 & 0x80000000) != 0)
    LODWORD(v12) = -(int)v12;
  v13 = v12 * (unint64_t)v11;
  if ((v13 & 0xFFFFFFFF00000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1961AA14CLL);
  }
  if (v13 >> 30 || a5 < (4 * v13))
  {
    __break(0xC471u);
    JUMPOUT(0x1961AA144);
  }
  return a1;
}

void WebCore::PixelBuffer::~PixelBuffer(WebCore::PixelBuffer *this)
{
  const void *v2;

  *(_QWORD *)this = off_1E340EDA0;
  v2 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    CFRelease(v2);
}

BOOL WebCore::PixelBuffer::zeroRange(WebCore::PixelBuffer *this, uint64_t a2, size_t a3)
{
  _BOOL4 v3;
  _BOOL8 v4;

  v3 = !__CFADD__(a2, a3);
  v4 = a2 + a3 <= *((_QWORD *)this + 6) && v3;
  if (v4)
    bzero((void *)(*((_QWORD *)this + 5) + a2), a3);
  return v4;
}

uint64_t WebCore::PixelBuffer::item(WebCore::PixelBuffer *this, unint64_t a2)
{
  uint64_t result;

  if (*((_QWORD *)this + 6) > a2)
    return *(unsigned __int8 *)(*((_QWORD *)this + 5) + a2);
  result = 92;
  __break(0xC471u);
  return result;
}

void WebCore::PathImpl::singleSegment(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[56] = 0;
}

void WebCore::PathImpl::singleDataLine(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void WebCore::PathImpl::singleArc(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void WebCore::PathImpl::singleClosedArc(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void WebCore::PathImpl::singleQuadCurve(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void WebCore::PathImpl::singleBezierCurve(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[32] = 0;
}

uint64_t WebCore::PixelBuffer::isByteArrayPixelBuffer(WebCore::PixelBuffer *this)
{
  return 0;
}

float std::__introsort<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_0 &,WebCore::FloatRect*,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  float *v9;
  float *v10;
  float *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  float v23;
  float v24;
  float v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 *v29;
  __n128 *v30;
  __n128 *v31;
  float v32;
  float v33;
  float v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  float v38;
  float v39;
  unsigned __int32 v40;
  unsigned __int32 v41;
  unsigned __int32 v42;
  uint64_t v43;
  __n128 *v44;
  __n128 *v45;
  float v46;
  float v47;
  __n128 *v48;
  float *v49;
  float v50;
  float v51;
  BOOL v52;
  __n128 v53;
  float v54;
  float v55;
  float *v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  __n128 *v62;
  __n128 *v63;
  __n128 *v64;
  __n128 *v65;
  float v66;
  BOOL v68;
  uint64_t v69;
  __n128 *v70;
  __n128 *v71;
  uint64_t v72;
  unsigned __int32 v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  int64_t v77;
  int64_t v78;
  uint64_t v79;
  float *v80;
  __n128 *v81;
  __n128 v82;
  float *v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  __n128 *v89;
  __n128 *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  __n128 *v95;
  unint64_t v96;
  unsigned __int32 v97;
  __n128 *v98;
  uint64_t v99;
  uint64_t v100;
  __n128 *v101;
  unint64_t v102;
  unsigned __int32 v103;
  uint64_t v104;
  __n128 *v105;
  __n128 *v107;
  float v108;
  __n128 v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_0 &,WebCore::FloatRect*>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  __n128 *v7;
  __n128 *v8;
  float v9;
  float v10;
  __n128 v11;
  __n128 *v12;
  float v13;
  __n128 *v14;
  float v15;
  float v16;
  __n128 v17;
  __n128 *v18;
  __n128 *v19;
  __n128 *v20;
  __n128 *v21;
  float v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 *v33;
  uint64_t v34;
  int v35;
  __n128 v36;
  uint64_t v37;
  float v38;
  __n128 *v39;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 1;
      if (a2[-1].n128_f32[0] < a1->n128_f32[0])
        goto LABEL_6;
      return result;
    case 3:
      v8 = a1 + 1;
      v9 = a1[1].n128_f32[0];
      v7 = a2 - 1;
      v10 = a2[-1].n128_f32[0];
      if (v9 >= a1->n128_f32[0])
      {
        if (v10 < v9)
        {
          v27 = *v8;
          *v8 = *v7;
          *v7 = v27;
          if (a1[1].n128_f32[0] < a1->n128_f32[0])
          {
            v28 = *a1;
            *a1 = *v8;
            *v8 = v28;
          }
        }
      }
      else
      {
        if (v10 < v9)
        {
LABEL_6:
          v11 = *a1;
          *a1 = *v7;
LABEL_7:
          *v7 = v11;
          return result;
        }
        v31 = *a1;
        *a1 = *v8;
        *v8 = v31;
        if (v7->n128_f32[0] < a1[1].n128_f32[0])
        {
          v11 = *v8;
          *v8 = *v7;
          goto LABEL_7;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_0 &,WebCore::FloatRect*>(a1, (float *)&a1[1], (float *)&a1[2], (unsigned __int32 *)&a2[-1], a3);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_0 &,WebCore::FloatRect*>(a1, (float *)&a1[1], (float *)&a1[2], (unsigned __int32 *)&a1[3], a3);
      v22 = a2[-1].n128_f32[0];
      v21 = a2 - 1;
      if (v22 < a1[3].n128_f32[0])
      {
        v23 = *v20;
        *v20 = *v21;
        *v21 = v23;
        if (v20->n128_f32[0] < v19->n128_f32[0])
        {
          v24 = *v19;
          *v19 = *v20;
          *v20 = v24;
          if (v19->n128_f32[0] < v18->n128_f32[0])
          {
            v25 = *v18;
            *v18 = *v19;
            *v19 = v25;
            if (a1[1].n128_f32[0] < a1->n128_f32[0])
            {
              v26 = *a1;
              *a1 = *v18;
              *v18 = v26;
            }
          }
        }
      }
      return 1;
    default:
      v12 = a1 + 2;
      v13 = a1[2].n128_f32[0];
      v14 = a1 + 1;
      v15 = a1[1].n128_f32[0];
      v16 = a1->n128_f32[0];
      if (v15 >= a1->n128_f32[0])
      {
        if (v13 < v15)
        {
          v29 = *v14;
          *v14 = *v12;
          *v12 = v29;
          if (v14->n128_f32[0] < v16)
          {
            v30 = *a1;
            *a1 = *v14;
            *v14 = v30;
          }
        }
      }
      else
      {
        if (v13 >= v15)
        {
          v32 = *a1;
          *a1 = *v14;
          *v14 = v32;
          if (v13 >= a1[1].n128_f32[0])
            goto LABEL_28;
          v17 = *v14;
          *v14 = *v12;
        }
        else
        {
          v17 = *a1;
          *a1 = *v12;
        }
        *v12 = v17;
      }
LABEL_28:
      v33 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v34 = 0;
      v35 = 0;
      while (1)
      {
        v36 = *v33;
        if (COERCE_FLOAT(*v33) < v12->n128_f32[0])
        {
          v37 = v34;
          while (1)
          {
            *(__n128 *)((char *)a1 + v37 + 48) = *(__n128 *)((char *)a1 + v37 + 32);
            if (v37 == -32)
              break;
            v38 = *(float *)((char *)a1[1].n128_f32 + v37);
            v37 -= 16;
            if (v36.n128_f32[0] >= v38)
            {
              v39 = (__n128 *)((char *)a1 + v37 + 48);
              goto LABEL_36;
            }
          }
          v39 = a1;
LABEL_36:
          *v39 = v36;
          if (++v35 == 8)
            return &v33[1] == a2;
        }
        v12 = v33;
        v34 += 16;
        if (++v33 == a2)
          return 1;
      }
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_0 &,WebCore::FloatRect*>(__n128 *a1, float *a2, float *a3, unsigned __int32 *a4, __n128 result)
{
  float v5;
  float v6;

  v5 = *a2;
  v6 = *a3;
  if (*a2 >= a1->n128_f32[0])
  {
    if (v6 < v5)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < a1->n128_f32[0])
      {
        result = *a1;
        *a1 = *(__n128 *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      result = *a1;
      *a1 = *(__n128 *)a3;
LABEL_9:
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    *a1 = *(__n128 *)a2;
    *(__n128 *)a2 = result;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_u32[0] = *a4;
  if (*(float *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_f32[0] = *a3;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_f32[0] = *a2;
      if (*a2 < a1->n128_f32[0])
      {
        result = *a1;
        *a1 = *(__n128 *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_1 &,WebCore::FloatRect*,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  float v17;
  float v18;
  float v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  float v23;
  float v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 *v28;
  __n128 *v29;
  __n128 *v30;
  float v31;
  float v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  float v36;
  float v37;
  unsigned __int32 v38;
  float v39;
  unsigned __int32 v40;
  uint64_t v41;
  float v42;
  __n128 *v43;
  __n128 *v44;
  __n128 *v45;
  float v46;
  __n128 *v47;
  float v48;
  __n128 *v49;
  __n128 *v50;
  float v51;
  __n128 *v52;
  float v53;
  BOOL v54;
  __n128 v55;
  __n128 *v56;
  float v57;
  float v58;
  __n128 *v59;
  __n128 *v60;
  float v61;
  __n128 *v62;
  float v63;
  __n128 *v64;
  float v65;
  __n128 *v66;
  float v67;
  float v68;
  __n128 v69;
  __n128 *v70;
  __n128 *v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __n128 *v75;
  BOOL v77;
  uint64_t v78;
  __n128 *v79;
  __n128 *v80;
  float v81;
  unsigned __int32 v82;
  unint64_t v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  int64_t v87;
  int64_t v88;
  uint64_t v89;
  __n128 *v90;
  __n128 *v91;
  __n128 v92;
  float v93;
  __n128 *v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  __n128 *v100;
  __n128 *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  __n128 *v106;
  float v107;
  unsigned __int32 v108;
  unint64_t v109;
  __n128 *v110;
  __n128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __n128 *v115;
  __n128 *v116;
  float v117;
  unsigned __int32 v118;
  unint64_t v119;
  float *v120;
  uint64_t v121;
  float *v123;
  float v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_1 &,WebCore::FloatRect*>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  __n128 v7;
  __n128 *v8;
  __n128 *v9;
  float v10;
  float v11;
  __n128 v12;
  __n128 *v13;
  __n128 *v14;
  float v15;
  float v16;
  float v17;
  __n128 v18;
  __n128 *v19;
  __n128 *v20;
  __n128 *v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 *v32;
  uint64_t v33;
  int v34;
  __n128 v35;
  float v36;
  uint64_t v37;
  float v38;
  __n128 *v39;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (a2[-1].n128_f32[1] < a1->n128_f32[1])
      {
        v7 = *a1;
        *a1 = a2[-1];
        a2[-1] = v7;
      }
      return result;
    case 3:
      v8 = a1 + 1;
      v9 = a2 - 1;
      v10 = a1[1].n128_f32[1];
      v11 = a2[-1].n128_f32[1];
      if (v10 >= a1->n128_f32[1])
      {
        if (v11 < v10)
        {
          v26 = *v8;
          *v8 = *v9;
          *v9 = v26;
          if (a1[1].n128_f32[1] < a1->n128_f32[1])
          {
            v27 = *a1;
            *a1 = *v8;
            *v8 = v27;
          }
        }
      }
      else
      {
        if (v11 >= v10)
        {
          v30 = *a1;
          *a1 = *v8;
          *v8 = v30;
          if (a2[-1].n128_f32[1] >= a1[1].n128_f32[1])
            return result;
          v12 = *v8;
          *v8 = *v9;
        }
        else
        {
          v12 = *a1;
          *a1 = *v9;
        }
        *v9 = v12;
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_1 &,WebCore::FloatRect*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v19 = a1 + 1;
      v20 = a1 + 2;
      v21 = a1 + 3;
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_1 &,WebCore::FloatRect*>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if (a2[-1].n128_f32[1] < a1[3].n128_f32[1])
      {
        v22 = *v21;
        *v21 = a2[-1];
        a2[-1] = v22;
        if (a1[3].n128_f32[1] < a1[2].n128_f32[1])
        {
          v23 = *v20;
          *v20 = *v21;
          *v21 = v23;
          if (a1[2].n128_f32[1] < a1[1].n128_f32[1])
          {
            v24 = *v19;
            *v19 = *v20;
            *v20 = v24;
            if (a1[1].n128_f32[1] < a1->n128_f32[1])
            {
              v25 = *a1;
              *a1 = *v19;
              *v19 = v25;
            }
          }
        }
      }
      return 1;
    default:
      v13 = a1 + 2;
      v14 = a1 + 1;
      v15 = a1[1].n128_f32[1];
      v16 = a1->n128_f32[1];
      v17 = a1[2].n128_f32[1];
      if (v15 >= v16)
      {
        if (v17 < v15)
        {
          v28 = *v14;
          *v14 = *v13;
          *v13 = v28;
          if (a1[1].n128_f32[1] < v16)
          {
            v29 = *a1;
            *a1 = *v14;
            *v14 = v29;
          }
        }
      }
      else
      {
        if (v17 >= v15)
        {
          v31 = *a1;
          *a1 = *v14;
          *v14 = v31;
          if (v17 >= a1[1].n128_f32[1])
            goto LABEL_28;
          v18 = *v14;
          *v14 = *v13;
        }
        else
        {
          v18 = *a1;
          *a1 = *v13;
        }
        *v13 = v18;
      }
LABEL_28:
      v32 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v33 = 0;
      v34 = 0;
      break;
  }
  while (1)
  {
    v35 = *v32;
    LODWORD(v36) = HIDWORD(v32->n128_u64[0]);
    if (v36 < v13->n128_f32[1])
    {
      v37 = v33;
      while (1)
      {
        *(__n128 *)((char *)a1 + v37 + 48) = *(__n128 *)((char *)a1 + v37 + 32);
        if (v37 == -32)
          break;
        v38 = *(float *)((char *)&a1[1].n128_f32[1] + v37);
        v37 -= 16;
        if (v36 >= v38)
        {
          v39 = (__n128 *)((char *)a1 + v37 + 48);
          goto LABEL_36;
        }
      }
      v39 = a1;
LABEL_36:
      *v39 = v35;
      if (++v34 == 8)
        return &v32[1] == a2;
    }
    v13 = v32;
    v33 += 16;
    if (++v32 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_1 &,WebCore::FloatRect*>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  float v5;
  float v6;

  v5 = a2->n128_f32[1];
  v6 = a3->n128_f32[1];
  if (v5 >= a1->n128_f32[1])
  {
    if (v6 < v5)
    {
      result = *a2;
      *a2 = *a3;
      *a3 = result;
      if (a2->n128_f32[1] < a1->n128_f32[1])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      result = *a1;
      *a1 = *a3;
LABEL_9:
      *a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    *a1 = *a2;
    *a2 = result;
    if (a3->n128_f32[1] < a2->n128_f32[1])
    {
      result = *a2;
      *a2 = *a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_u32[0] = a4->n128_u32[1];
  if (result.n128_f32[0] < a3->n128_f32[1])
  {
    result = *a3;
    *a3 = *a4;
    *a4 = result;
    result.n128_u32[0] = a3->n128_u32[1];
    if (result.n128_f32[0] < a2->n128_f32[1])
    {
      result = *a2;
      *a2 = *a3;
      *a3 = result;
      result.n128_u32[0] = a2->n128_u32[1];
      if (result.n128_f32[0] < a1->n128_f32[1])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  return result;
}

float **std::__introsort<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **,false>(float **result, float **a2, float **a3, uint64_t a4, char a5)
{
  float **v9;
  float **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float **v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  unint64_t v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float **v31;
  float **v32;
  float *v33;
  float *v34;
  float *v35;
  float **v36;
  float **v37;
  float **v38;
  float v39;
  float v40;
  float v41;
  float **v42;
  float *v43;
  float *v44;
  BOOL v45;
  float **v46;
  float *v47;
  float **v48;
  float **v49;
  float *v50;
  float *v51;
  float *v52;
  float v53;
  float v54;
  float v55;
  float **v56;
  float *v57;
  float *v58;
  float **v59;
  float *v60;
  float *v61;
  float v62;
  float v63;
  float **v64;
  BOOL v66;
  uint64_t v67;
  float **v68;
  float *v69;
  float *v70;
  float v71;
  float v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  float **v77;
  int64_t v78;
  int64_t v79;
  int64_t v80;
  uint64_t v81;
  float **v82;
  float *v83;
  float v84;
  float v85;
  float **v86;
  float *v87;
  float *v88;
  float v89;
  float v90;
  float **v91;
  uint64_t v92;
  uint64_t v93;
  float v94;
  float v95;
  uint64_t v96;
  uint64_t v97;
  float *v98;
  float **v99;
  float **v100;
  uint64_t v101;
  uint64_t v102;
  float v103;
  float v104;
  uint64_t v105;
  unint64_t v106;
  float **v107;
  float *v108;
  float *v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float **v114;
  float v115;
  float v116;
  uint64_t v118;
  uint64_t v119;
  float *v120;
  float *v121;
  float v122;
  float v123;
  float v124;
  uint64_t v125;
  float **v126;
  float v127;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v60 = *(a2 - 1);
        v61 = *v10;
        v62 = **a3;
        v63 = (*a3)[1];
        if ((float)((float)((float)(v63 - (*v10)[1]) * (float)(v63 - (*v10)[1]))
                   + (float)((float)(v62 - **v10) * (float)(v62 - **v10))) > (float)((float)((float)(v63 - v60[1])
                                                                                           * (float)(v63 - v60[1]))
                                                                                   + (float)((float)(v62 - *v60)
                                                                                           * (float)(v62 - *v60))))
        {
          *v10 = v60;
          *(a2 - 1) = v61;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **,0>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v11 <= 191)
        {
          v64 = v10 + 1;
          v66 = v10 == a2 || v64 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v66)
            {
              v67 = 8;
              v68 = v10;
              do
              {
                v69 = *v68;
                v68 = v64;
                v70 = *v64;
                v71 = *v70;
                v72 = v70[1];
                v73 = (*a3)[1];
                if ((float)((float)((float)(v73 - v69[1]) * (float)(v73 - v69[1]))
                           + (float)((float)(**a3 - *v69) * (float)(**a3 - *v69))) > (float)((float)((float)(v73 - v72) * (float)(v73 - v72))
                                                                                           + (float)((float)(**a3 - *v70) * (float)(**a3 - *v70))))
                {
                  v74 = v67;
                  while (1)
                  {
                    *(float **)((char *)v10 + v74) = v69;
                    v75 = v74 - 8;
                    if (v74 == 8)
                      break;
                    v69 = *(float **)((char *)v10 + v74 - 16);
                    v76 = (*a3)[1];
                    v74 -= 8;
                    if ((float)((float)((float)(v76 - v69[1]) * (float)(v76 - v69[1]))
                               + (float)((float)(**a3 - *v69) * (float)(**a3 - *v69))) <= (float)((float)((float)(v76 - v72) * (float)(v76 - v72))
                                                                                                + (float)((float)(**a3 - v71) * (float)(**a3 - v71))))
                    {
                      v77 = (float **)((char *)v10 + v75);
                      goto LABEL_91;
                    }
                  }
                  v77 = v10;
LABEL_91:
                  *v77 = v70;
                }
                v64 = v68 + 1;
                v67 += 8;
              }
              while (v68 + 1 != a2);
            }
          }
          else if (!v66)
          {
            v118 = 0;
            v119 = 1;
            while (1)
            {
              v120 = v10[v118];
              v118 = v119;
              v121 = *v64;
              v122 = **v64;
              v123 = (*v64)[1];
              v124 = (*a3)[1];
              if ((float)((float)((float)(v124 - v120[1]) * (float)(v124 - v120[1]))
                         + (float)((float)(**a3 - *v120) * (float)(**a3 - *v120))) > (float)((float)((float)(v124 - v123) * (float)(v124 - v123))
                                                                                           + (float)((float)(**a3 - v122) * (float)(**a3 - v122))))
                break;
LABEL_133:
              v119 = v118 + 1;
              if (++v64 == a2)
                return result;
            }
            v125 = 0;
            while (1)
            {
              v126 = &v64[v125];
              *v126 = v120;
              if (!(v118 + v125))
                break;
              v120 = *(v126 - 2);
              v127 = (*a3)[1];
              --v125;
              if ((float)((float)((float)(v127 - v120[1]) * (float)(v127 - v120[1]))
                         + (float)((float)(**a3 - *v120) * (float)(**a3 - *v120))) <= (float)((float)((float)(v127 - v123) * (float)(v127 - v123))
                                                                                            + (float)((float)(**a3 - v122) * (float)(**a3 - v122))))
              {
                v64[v125] = v121;
                goto LABEL_133;
              }
            }
LABEL_135:
            __break(1u);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v78 = (v12 - 2) >> 1;
            v79 = v78;
            do
            {
              v80 = v79;
              if (v78 >= v79)
              {
                v81 = (2 * v79) | 1;
                v82 = &v10[v81];
                v83 = *a3;
                v84 = **a3;
                if (2 * v80 + 2 >= (uint64_t)v12)
                {
                  v85 = v83[1];
                }
                else
                {
                  result = (float **)v82[1];
                  v85 = v83[1];
                  if ((float)((float)((float)(v85 - *((float *)result + 1)) * (float)(v85 - *((float *)result + 1)))
                             + (float)((float)(v84 - *(float *)result) * (float)(v84 - *(float *)result))) > (float)((float)((float)(v85 - (*v82)[1]) * (float)(v85 - (*v82)[1])) + (float)((float)(v84 - **v82) * (float)(v84 - **v82))))
                  {
                    ++v82;
                    v81 = 2 * v80 + 2;
                  }
                }
                v86 = &v10[v80];
                v87 = *v82;
                v88 = *v86;
                v89 = **v86;
                v90 = (*v86)[1];
                if ((float)((float)((float)(v85 - v90) * (float)(v85 - v90))
                           + (float)((float)(v84 - v89) * (float)(v84 - v89))) <= (float)((float)((float)(v85 - (*v82)[1])
                                                                                                * (float)(v85 - (*v82)[1]))
                                                                                        + (float)((float)(v84 - **v82)
                                                                                                * (float)(v84 - **v82))))
                {
                  do
                  {
                    v91 = v82;
                    *v86 = v87;
                    if (v78 < v81)
                      break;
                    v92 = 2 * v81;
                    v81 = (2 * v81) | 1;
                    v82 = &v10[v81];
                    v93 = v92 + 2;
                    result = (float **)*a3;
                    v94 = **a3;
                    if (v93 >= (uint64_t)v12)
                    {
                      v95 = *((float *)result + 1);
                    }
                    else
                    {
                      v95 = *((float *)result + 1);
                      if ((float)((float)((float)(v95 - v82[1][1]) * (float)(v95 - v82[1][1]))
                                 + (float)((float)(v94 - *v82[1]) * (float)(v94 - *v82[1]))) > (float)((float)((float)(v95 - (*v82)[1]) * (float)(v95 - (*v82)[1])) + (float)((float)(v94 - **v82) * (float)(v94 - **v82))))
                      {
                        ++v82;
                        v81 = v93;
                      }
                    }
                    v87 = *v82;
                    v86 = v91;
                  }
                  while ((float)((float)((float)(v95 - v90) * (float)(v95 - v90))
                                + (float)((float)(v94 - v89) * (float)(v94 - v89))) <= (float)((float)((float)(v95 - (*v82)[1]) * (float)(v95 - (*v82)[1]))
                                                                                             + (float)((float)(v94 - **v82) * (float)(v94 - **v82))));
                  *v91 = v88;
                }
              }
              v79 = v80 - 1;
            }
            while (v80);
            v96 = (unint64_t)v11 >> 3;
            do
            {
              v97 = 0;
              v98 = *v10;
              v99 = v10;
              do
              {
                v100 = v99;
                v99 += v97 + 1;
                v101 = 2 * v97;
                v97 = (2 * v97) | 1;
                v102 = v101 + 2;
                if (v102 < v96)
                {
                  result = (float **)*a3;
                  v103 = **a3;
                  v104 = (*a3)[1];
                  if ((float)((float)((float)(v104 - v99[1][1]) * (float)(v104 - v99[1][1]))
                             + (float)((float)(v103 - *v99[1]) * (float)(v103 - *v99[1]))) > (float)((float)((float)(v104 - (*v99)[1]) * (float)(v104 - (*v99)[1])) + (float)((float)(v103 - **v99) * (float)(v103 - **v99))))
                  {
                    ++v99;
                    v97 = v102;
                  }
                }
                *v100 = *v99;
              }
              while (v97 <= (uint64_t)((unint64_t)(v96 - 2) >> 1));
              if (v99 == --a2)
              {
                *v99 = v98;
              }
              else
              {
                *v99 = *a2;
                *a2 = v98;
                v105 = (char *)v99 - (char *)v10 + 8;
                if (v105 >= 9)
                {
                  v106 = (((unint64_t)v105 >> 3) - 2) >> 1;
                  v107 = &v10[v106];
                  v108 = *v107;
                  v109 = *v99;
                  v110 = **v99;
                  v111 = (*v99)[1];
                  v112 = **a3;
                  v113 = (*a3)[1];
                  if ((float)((float)((float)(v113 - v111) * (float)(v113 - v111))
                             + (float)((float)(v112 - v110) * (float)(v112 - v110))) > (float)((float)((float)(v113 - (*v107)[1]) * (float)(v113 - (*v107)[1]))
                                                                                             + (float)((float)(v112 - **v107) * (float)(v112 - **v107))))
                  {
                    do
                    {
                      v114 = v107;
                      *v99 = v108;
                      if (!v106)
                        break;
                      v106 = (v106 - 1) >> 1;
                      v107 = &v10[v106];
                      v108 = *v107;
                      v115 = **a3;
                      v116 = (*a3)[1];
                      v99 = v114;
                    }
                    while ((float)((float)((float)(v116 - v111) * (float)(v116 - v111))
                                  + (float)((float)(v115 - v110) * (float)(v115 - v110))) > (float)((float)((float)(v116 - (*v107)[1]) * (float)(v116 - (*v107)[1]))
                                                                                                  + (float)((float)(v115 - **v107) * (float)(v115 - **v107))));
                    *v114 = v109;
                  }
                }
              }
            }
            while (v96-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **>(&v10[v12 >> 1], v10, a2 - 1, a3);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **>(v10, &v10[v12 >> 1], a2 - 1, a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **>(v10 + 1, v14 - 1, a2 - 2, a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **>(v10 + 2, &v10[v13 + 1], a2 - 3, a3);
          result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **>(v14 - 1, v14, &v10[v13 + 1], a3);
          v15 = *v10;
          *v10 = *v14;
          *v14 = v15;
        }
        --a4;
        v16 = *v10;
        if ((a5 & 1) == 0)
        {
          v17 = *v16;
          v18 = v16[1];
          v19 = **a3;
          v20 = (*a3)[1];
          v21 = (float)((float)(v20 - v18) * (float)(v20 - v18)) + (float)((float)(v19 - *v16) * (float)(v19 - *v16));
          if (v21 <= (float)((float)((float)(v20 - (*(v10 - 1))[1]) * (float)(v20 - (*(v10 - 1))[1]))
                            + (float)((float)(v19 - **(v10 - 1)) * (float)(v19 - **(v10 - 1)))))
          {
            v46 = v10 + 1;
            if ((float)((float)((float)(v20 - (*(a2 - 1))[1]) * (float)(v20 - (*(a2 - 1))[1]))
                       + (float)((float)(v19 - **(a2 - 1)) * (float)(v19 - **(a2 - 1)))) <= v21)
            {
              do
              {
                v48 = v46;
                if (v46 >= a2)
                  break;
                ++v46;
              }
              while ((float)((float)((float)(v20 - (*v48)[1]) * (float)(v20 - (*v48)[1]))
                            + (float)((float)(v19 - **v48) * (float)(v19 - **v48))) <= v21);
            }
            else
            {
              do
              {
                if (v46 == a2)
                  goto LABEL_135;
                v47 = *v46++;
              }
              while ((float)((float)((float)(v20 - v47[1]) * (float)(v20 - v47[1]))
                            + (float)((float)(v19 - *v47) * (float)(v19 - *v47))) <= v21);
              v48 = v46 - 1;
            }
            v49 = a2;
            if (v48 < a2)
            {
              v49 = a2;
              while (v49 != v10)
              {
                v50 = *--v49;
                if ((float)((float)((float)(v20 - v50[1]) * (float)(v20 - v50[1]))
                           + (float)((float)(v19 - *v50) * (float)(v19 - *v50))) <= v21)
                  goto LABEL_52;
              }
              goto LABEL_135;
            }
LABEL_52:
            if (v48 < v49)
            {
              v51 = *v48;
              v52 = *v49;
              v10 = v48;
              while (1)
              {
                *v10++ = v52;
                *v49 = v51;
                if (v10 == a2)
                  goto LABEL_135;
                v51 = *v10;
                v53 = **a3;
                v54 = (*a3)[1];
                v55 = (float)((float)(v54 - v18) * (float)(v54 - v18))
                    + (float)((float)(v53 - v17) * (float)(v53 - v17));
                if ((float)((float)((float)(v54 - (*v10)[1]) * (float)(v54 - (*v10)[1]))
                           + (float)((float)(v53 - **v10) * (float)(v53 - **v10))) > v55)
                  goto LABEL_60;
                v56 = v48 + 2;
                do
                {
                  if (v56 == a2)
                    goto LABEL_135;
                  v57 = *v56++;
                  v51 = v57;
                }
                while ((float)((float)((float)(v54 - v57[1]) * (float)(v54 - v57[1]))
                              + (float)((float)(v53 - *v57) * (float)(v53 - *v57))) <= v55);
                v10 = v56 - 1;
                do
                {
LABEL_60:
                  if (v49 == v9)
                    goto LABEL_135;
                  v58 = *--v49;
                  v52 = v58;
                }
                while ((float)((float)((float)(v54 - v58[1]) * (float)(v54 - v58[1]))
                              + (float)((float)(v53 - *v58) * (float)(v53 - *v58))) > v55);
                v48 = v10;
                if (v10 >= v49)
                  goto LABEL_65;
              }
            }
            v10 = v48;
LABEL_65:
            v59 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v59;
            a5 = 0;
            *v59 = v16;
            continue;
          }
        }
        v22 = (unint64_t)(v10 + 1);
        if (v10 + 1 == a2)
          goto LABEL_135;
        v23 = *(float **)v22;
        v24 = *v16;
        v25 = v16[1];
        v26 = **a3;
        v27 = (*a3)[1];
        v28 = (float)((float)(v27 - v25) * (float)(v27 - v25)) + (float)((float)(v26 - *v16) * (float)(v26 - *v16));
        if (v28 > (float)((float)((float)(v27 - *(float *)(*(_QWORD *)v22 + 4))
                                 * (float)(v27 - *(float *)(*(_QWORD *)v22 + 4)))
                         + (float)((float)(v26 - **(float **)v22) * (float)(v26 - **(float **)v22))))
        {
          v29 = 0;
          do
          {
            v30 = (uint64_t)&v10[v29 + 2];
            if ((float **)v30 == a2)
              goto LABEL_135;
            v23 = *(float **)v30;
            ++v29;
          }
          while (v28 > (float)((float)((float)(v27 - *(float *)(*(_QWORD *)v30 + 4))
                                      * (float)(v27 - *(float *)(*(_QWORD *)v30 + 4)))
                              + (float)((float)(v26 - **(float **)v30) * (float)(v26 - **(float **)v30))));
          v31 = &v10[v29];
          v22 = (unint64_t)&v10[v29 + 1];
          v32 = a2;
          if (v29 * 8)
          {
            while (v32 != v10)
            {
              v33 = *--v32;
              if (v28 > (float)((float)((float)(v27 - v33[1]) * (float)(v27 - v33[1]))
                               + (float)((float)(v26 - *v33) * (float)(v26 - *v33))))
                goto LABEL_24;
            }
            goto LABEL_135;
          }
        }
        v32 = a2;
        do
        {
          if (v22 >= (unint64_t)v32)
            break;
          v34 = *--v32;
        }
        while (v28 <= (float)((float)((float)(v27 - v34[1]) * (float)(v27 - v34[1]))
                             + (float)((float)(v26 - *v34) * (float)(v26 - *v34))));
        v31 = v10;
LABEL_24:
        if (v22 < (unint64_t)v32)
        {
          v35 = *v32;
          v36 = (float **)v22;
          v37 = v32;
          do
          {
            *v36 = v35;
            v38 = v36 + 1;
            *v37 = v23;
            if (v36 + 1 == a2)
              goto LABEL_135;
            v23 = *v38;
            v39 = **a3;
            v40 = (*a3)[1];
            v41 = (float)((float)(v40 - v25) * (float)(v40 - v25)) + (float)((float)(v39 - v24) * (float)(v39 - v24));
            if (v41 > (float)((float)((float)(v40 - (*v38)[1]) * (float)(v40 - (*v38)[1]))
                             + (float)((float)(v39 - **v38) * (float)(v39 - **v38))))
            {
              v42 = v36 + 2;
              while (v42 != a2)
              {
                v43 = *v42++;
                v23 = v43;
                if (v41 <= (float)((float)((float)(v40 - v43[1]) * (float)(v40 - v43[1]))
                                  + (float)((float)(v39 - *v43) * (float)(v39 - *v43))))
                {
                  v31 = v42 - 2;
                  v36 = v42 - 1;
                  goto LABEL_33;
                }
              }
              goto LABEL_135;
            }
            v31 = v36++;
            do
            {
LABEL_33:
              if (v37 == v10)
                goto LABEL_135;
              v44 = *--v37;
              v35 = v44;
            }
            while (v41 <= (float)((float)((float)(v40 - v44[1]) * (float)(v40 - v44[1]))
                                 + (float)((float)(v39 - *v44) * (float)(v39 - *v44))));
          }
          while (v36 < v37);
        }
        if (v31 != v10)
          *v10 = *v31;
        *v31 = v16;
        if (v22 < (unint64_t)v32)
        {
LABEL_41:
          result = (float **)std::__introsort<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **,false>(v9, v31, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v31 + 1;
          continue;
        }
        v45 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **>(v10, v31, a3);
        v10 = v31 + 1;
        result = (float **)std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **>(v31 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v45)
            continue;
          goto LABEL_41;
        }
        a2 = v31;
        if (!v45)
          goto LABEL_2;
        return result;
    }
  }
}

float **std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **,0>(float **a1, float **a2, float **a3, float **a4, float **a5, float **a6)
{
  float **result;
  float *v13;
  float v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float *v19;
  float v20;
  float v21;
  float *v22;
  float v23;
  float v24;

  result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **>(a1, a2, a3, a4, a6);
  v13 = *a4;
  v14 = **a6;
  v15 = (*a6)[1];
  if ((float)((float)((float)(v15 - (*a4)[1]) * (float)(v15 - (*a4)[1]))
             + (float)((float)(v14 - **a4) * (float)(v14 - **a4))) > (float)((float)((float)(v15 - (*a5)[1])
                                                                                   * (float)(v15 - (*a5)[1]))
                                                                           + (float)((float)(v14 - **a5)
                                                                                   * (float)(v14 - **a5))))
  {
    *a4 = *a5;
    *a5 = v13;
    v16 = *a3;
    v17 = **a6;
    v18 = (*a6)[1];
    if ((float)((float)((float)(v18 - (*a3)[1]) * (float)(v18 - (*a3)[1]))
               + (float)((float)(v17 - **a3) * (float)(v17 - **a3))) > (float)((float)((float)(v18 - (*a4)[1])
                                                                                     * (float)(v18 - (*a4)[1]))
                                                                             + (float)((float)(v17 - **a4)
                                                                                     * (float)(v17 - **a4))))
    {
      *a3 = *a4;
      *a4 = v16;
      v19 = *a2;
      v20 = **a6;
      v21 = (*a6)[1];
      if ((float)((float)((float)(v21 - (*a2)[1]) * (float)(v21 - (*a2)[1]))
                 + (float)((float)(v20 - **a2) * (float)(v20 - **a2))) > (float)((float)((float)(v21 - (*a3)[1])
                                                                                       * (float)(v21 - (*a3)[1]))
                                                                               + (float)((float)(v20 - **a3)
                                                                                       * (float)(v20 - **a3))))
      {
        *a2 = *a3;
        *a3 = v19;
        v22 = *a1;
        v23 = **a6;
        v24 = (*a6)[1];
        if ((float)((float)((float)(v24 - (*a1)[1]) * (float)(v24 - (*a1)[1]))
                   + (float)((float)(v23 - **a1) * (float)(v23 - **a1))) > (float)((float)((float)(v24 - (*a2)[1])
                                                                                         * (float)(v24 - (*a2)[1]))
                                                                                 + (float)((float)(v23 - **a2)
                                                                                         * (float)(v23 - **a2))))
        {
          *a1 = *a2;
          *a2 = v22;
        }
      }
    }
  }
  return result;
}

float **std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **>(float **result, float **a2, float **a3, float **a4)
{
  float *v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float *v11;
  float v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;

  v4 = *a2;
  v5 = *result;
  v6 = **result;
  v7 = (*result)[1];
  v8 = **a4;
  v9 = (*a4)[1];
  v10 = (float)((float)(v9 - (*a2)[1]) * (float)(v9 - (*a2)[1])) + (float)((float)(v8 - **a2) * (float)(v8 - **a2));
  v11 = *a3;
  v12 = (float)((float)(v9 - (*a3)[1]) * (float)(v9 - (*a3)[1])) + (float)((float)(v8 - **a3) * (float)(v8 - **a3));
  if ((float)((float)((float)(v9 - v7) * (float)(v9 - v7)) + (float)((float)(v8 - v6) * (float)(v8 - v6))) <= v10)
  {
    if (v10 > v12)
    {
      *a2 = v11;
      *a3 = v4;
      v13 = *result;
      v14 = **a4;
      v15 = (*a4)[1];
      if ((float)((float)((float)(v15 - (*result)[1]) * (float)(v15 - (*result)[1]))
                 + (float)((float)(v14 - **result) * (float)(v14 - **result))) > (float)((float)((float)(v15 - (*a2)[1])
                                                                                               * (float)(v15 - (*a2)[1]))
                                                                                       + (float)((float)(v14 - **a2)
                                                                                               * (float)(v14 - **a2))))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  else
  {
    if (v10 <= v12)
    {
      *result = v4;
      *a2 = v5;
      v16 = **a4;
      v17 = (*a4)[1];
      if ((float)((float)((float)(v17 - v7) * (float)(v17 - v7)) + (float)((float)(v16 - v6) * (float)(v16 - v6))) <= (float)((float)((float)(v17 - (*a3)[1]) * (float)(v17 - (*a3)[1])) + (float)((float)(v16 - **a3) * (float)(v16 - **a3))))
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v11;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **>(float **a1, float **a2, float **a3)
{
  uint64_t v6;
  _BOOL8 result;
  float *v8;
  float *v9;
  float v10;
  float v11;
  float **v12;
  float **v13;
  int v14;
  float *v15;
  uint64_t v16;
  float *v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float **v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = **a3;
      v11 = (*a3)[1];
      if ((float)((float)((float)(v11 - (*a1)[1]) * (float)(v11 - (*a1)[1]))
                 + (float)((float)(v10 - **a1) * (float)(v10 - **a1))) > (float)((float)((float)(v11 - v8[1])
                                                                                       * (float)(v11 - v8[1]))
                                                                               + (float)((float)(v10 - *v8)
                                                                                       * (float)(v10 - *v8))))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v12 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **>(a1, a1 + 1, a1 + 2, a3);
      v13 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v14 = 0;
      v15 = *a3;
      v16 = 24;
      break;
  }
  while (1)
  {
    v17 = *v13;
    v18 = *v12;
    v19 = **v13;
    v20 = (*v13)[1];
    v21 = v15[1];
    if ((float)((float)((float)(v21 - (*v12)[1]) * (float)(v21 - (*v12)[1]))
               + (float)((float)(*v15 - **v12) * (float)(*v15 - **v12))) > (float)((float)((float)(v21 - v20)
                                                                                         * (float)(v21 - v20))
                                                                                 + (float)((float)(*v15 - v19)
                                                                                         * (float)(*v15 - v19))))
      break;
LABEL_14:
    v12 = v13;
    v16 += 8;
    if (++v13 == a2)
      return 1;
  }
  v22 = v16;
  while (1)
  {
    *(float **)((char *)a1 + v22) = v18;
    v23 = v22 - 8;
    if (v22 == 8)
      break;
    v18 = *(float **)((char *)a1 + v22 - 16);
    v24 = (*a3)[1];
    v22 -= 8;
    if ((float)((float)((float)(v24 - v18[1]) * (float)(v24 - v18[1]))
               + (float)((float)(**a3 - *v18) * (float)(**a3 - *v18))) <= (float)((float)((float)(v24 - v20)
                                                                                        * (float)(v24 - v20))
                                                                                + (float)((float)(**a3 - v19)
                                                                                        * (float)(**a3 - v19))))
    {
      v25 = (float **)((char *)a1 + v23);
      goto LABEL_12;
    }
  }
  v25 = a1;
LABEL_12:
  *v25 = v17;
  if (++v14 != 8)
  {
    v15 = *a3;
    goto LABEL_14;
  }
  return v13 + 1 == a2;
}

float **std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **>(float **a1, float **a2, float **a3, float **a4, float **a5)
{
  float **result;
  float *v11;
  float v12;
  float v13;
  float *v14;
  float v15;
  float v16;
  float *v17;
  float v18;
  float v19;

  result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::addIntersectionPoints(WTF::Vector<WTF::Vector<std::pair<WebCore::FloatPointGraph::Node *,WebCore::FloatPointGraph::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::FloatPointGraph&)::$_0 &,WebCore::FloatPointGraph::Node **>(a1, a2, a3, a5);
  v11 = *a3;
  v12 = **a5;
  v13 = (*a5)[1];
  if ((float)((float)((float)(v13 - (*a3)[1]) * (float)(v13 - (*a3)[1]))
             + (float)((float)(v12 - **a3) * (float)(v12 - **a3))) > (float)((float)((float)(v13 - (*a4)[1])
                                                                                   * (float)(v13 - (*a4)[1]))
                                                                           + (float)((float)(v12 - **a4)
                                                                                   * (float)(v12 - **a4))))
  {
    *a3 = *a4;
    *a4 = v11;
    v14 = *a2;
    v15 = **a5;
    v16 = (*a5)[1];
    if ((float)((float)((float)(v16 - (*a2)[1]) * (float)(v16 - (*a2)[1]))
               + (float)((float)(v15 - **a2) * (float)(v15 - **a2))) > (float)((float)((float)(v16 - (*a3)[1])
                                                                                     * (float)(v16 - (*a3)[1]))
                                                                             + (float)((float)(v15 - **a3)
                                                                                     * (float)(v15 - **a3))))
    {
      *a2 = *a3;
      *a3 = v14;
      v17 = *a1;
      v18 = **a5;
      v19 = (*a5)[1];
      if ((float)((float)((float)(v19 - (*a1)[1]) * (float)(v19 - (*a1)[1]))
                 + (float)((float)(v18 - **a1) * (float)(v18 - **a1))) > (float)((float)((float)(v19 - (*a2)[1])
                                                                                       * (float)(v19 - (*a2)[1]))
                                                                               + (float)((float)(v18 - **a2)
                                                                                       * (float)(v18 - **a2))))
      {
        *a1 = *a2;
        *a2 = v17;
      }
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS15_EEEDcSX_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS15_EEEDcSX_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS15_EEEDcSX_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PathImpl::applySegments(WTF::Function<void ()(WebCore::PathSegment const&)> const&)::$_0,void,WebCore::PathElement const&>::call(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  switch(*(_BYTE *)a2)
  {
    case 0:
      v2 = *(_QWORD **)(result + 8);
      *(_QWORD *)&v5 = *(_QWORD *)(a2 + 4);
      v7 = 0;
      goto LABEL_8;
    case 1:
      v2 = *(_QWORD **)(result + 8);
      *(_QWORD *)&v5 = *(_QWORD *)(a2 + 4);
      v3 = 1;
      goto LABEL_7;
    case 2:
      v2 = *(_QWORD **)(result + 8);
      v5 = *(_OWORD *)(a2 + 4);
      v3 = 2;
      goto LABEL_7;
    case 3:
      v2 = *(_QWORD **)(result + 8);
      v4 = *(_QWORD *)(a2 + 20);
      v5 = *(_OWORD *)(a2 + 4);
      v6 = v4;
      v3 = 3;
      goto LABEL_7;
    case 4:
      v2 = *(_QWORD **)(result + 8);
      v3 = 15;
LABEL_7:
      v7 = v3;
LABEL_8:
      result = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*v2 + 16))(*v2, &v5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PathImpl::isClosed(void)::$_0,void,WebCore::PathElement const&>::call(uint64_t result, _BYTE *a2)
{
  **(_BYTE **)(result + 8) = *a2 == 4;
  return result;
}

float std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::calculateEndPoint(WebCore::FloatPoint const&,WebCore::FloatPoint&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  **(_QWORD **)(*(_QWORD *)a1 + 8) = *a2;
  return *(float *)&v2;
}

float std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::calculateEndPoint(WebCore::FloatPoint const&,WebCore::FloatPoint&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t a2)
{
  return *(float *)a2;
}

float std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::calculateEndPoint(WebCore::FloatPoint const&,WebCore::FloatPoint&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::calculateEndPoint(WebCore::FloatPoint const&,WebCore::FloatPoint&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 16);
}

float std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::calculateEndPoint(WebCore::FloatPoint const&,WebCore::FloatPoint&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(float ***a1, float *a2)
{
  float *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v2 = **a1;
  v4 = a2[3];
  v3 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = *a2;
  v8 = v2[1] - v5;
  if (vabds_f32(*v2, *a2) >= 0.00001)
    v9 = atan2f(v8, *v2 - v7);
  else
    v9 = flt_1969F7CF0[v8 >= 0.0];
  v10 = v5 - v4;
  if (vabds_f32(v7, v6) >= 0.00001)
    v11 = atan2f(v10, v7 - v6);
  else
    v11 = flt_1969F7CF0[v10 >= 0.0];
  v12 = vabds_f32(v11, v9);
  if (v12 < 1.5708 && v12 >= 0.00001)
  {
    v13 = fabsf(v3 / tanf((float)(v11 - v9) * 0.5));
    return v7 + (float)(v13 * __sincosf_stret(v11).__cosval);
  }
  return v7;
}

float std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::calculateEndPoint(WebCore::FloatPoint const&,WebCore::FloatPoint&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float *a2)
{
  float *v3;
  float v4;
  __float2 v5;
  float v6;
  float v7;

  v3 = *(float **)(*(_QWORD *)a1 + 8);
  v4 = a2[2];
  v5 = __sincosf_stret(a2[3]);
  v6 = a2[1];
  *v3 = *a2 + (float)(v4 * v5.__cosval);
  v3[1] = v6 - (float)(v4 * v5.__sinval);
  v7 = a2[2];
  return *a2 + (float)(v7 * __sincosf_stret(a2[16]).__cosval);
}

float std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::calculateEndPoint(WebCore::FloatPoint const&,WebCore::FloatPoint&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float *a2)
{
  float *v3;
  float v4;
  __float2 v5;
  float v6;
  float v7;

  v3 = *(float **)(*(_QWORD *)a1 + 8);
  v4 = a2[2];
  v5 = __sincosf_stret(a2[3]);
  v6 = *a2 + (float)(v4 * v5.__cosval);
  v7 = a2[1] - (float)(v4 * v5.__sinval);
  *v3 = v6;
  v3[1] = v7;
  return v6;
}

float std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::calculateEndPoint(WebCore::FloatPoint const&,WebCore::FloatPoint&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, WebCore::PathEllipse *this, WebCore::FloatPoint *a3)
{
  return WebCore::PathEllipse::calculateEndPoint(this, *(const WebCore::FloatPoint **)(*(_QWORD *)a1 + 8), a3);
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::calculateEndPoint(WebCore::FloatPoint const&,WebCore::FloatPoint&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float32x2_t *a2)
{
  float32x2_t v2;
  float32x2_t result;

  v2 = vmul_f32(a2[1], (float32x2_t)0x3F0000003F000000);
  result = vadd_f32(vadd_f32(*a2, v2), (float32x2_t)v2.u32[0]);
  **(float32x2_t **)(*(_QWORD *)a1 + 8) = result;
  return result;
}

float std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::calculateEndPoint(WebCore::FloatPoint const&,WebCore::FloatPoint&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t a2)
{
  float result;
  int v3;
  _DWORD *v4;

  result = *(float *)a2;
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD **)(*(_QWORD *)a1 + 8);
  *v4 = *(_DWORD *)a2;
  v4[1] = v3;
  return result;
}

float std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::calculateEndPoint(WebCore::FloatPoint const&,WebCore::FloatPoint&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t a2)
{
  float result;
  int v3;
  _DWORD *v4;

  result = *(float *)a2;
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD **)(*(_QWORD *)a1 + 8);
  *v4 = *(_DWORD *)a2;
  v4[1] = v3;
  return result;
}

float std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::calculateEndPoint(WebCore::FloatPoint const&,WebCore::FloatPoint&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t a2)
{
  **(_QWORD **)(*(_QWORD *)a1 + 8) = *(_QWORD *)a2;
  return *(float *)(a2 + 8);
}

float std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::calculateEndPoint(WebCore::FloatPoint const&,WebCore::FloatPoint&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t a2)
{
  **(_QWORD **)(*(_QWORD *)a1 + 8) = *(_QWORD *)a2;
  return *(float *)(a2 + 16);
}

float std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::calculateEndPoint(WebCore::FloatPoint const&,WebCore::FloatPoint&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t a2)
{
  **(_QWORD **)(*(_QWORD *)a1 + 8) = *(_QWORD *)a2;
  return *(float *)(a2 + 24);
}

float std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::calculateEndPoint(WebCore::FloatPoint const&,WebCore::FloatPoint&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, WebCore::PathDataArc *this, WebCore::FloatPoint *a3)
{
  return WebCore::PathDataArc::calculateEndPoint(this, *(const WebCore::FloatPoint **)(*(_QWORD *)a1 + 8), a3);
}

float std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::calculateEndPoint(WebCore::FloatPoint const&,WebCore::FloatPoint&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1)
{
  return **(float **)(*(_QWORD *)a1 + 8);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::tryGetEndPointWithoutContext(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::tryGetEndPointWithoutContext(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::tryGetEndPointWithoutContext(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::tryGetEndPointWithoutContext(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::tryGetEndPointWithoutContext(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::tryGetEndPointWithoutContext(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  __float2 v5;

  v3 = a2[1];
  v2 = a2[2];
  v4 = *a2;
  v5 = __sincosf_stret(a2[4]);
  return COERCE_UNSIGNED_INT(v4 + (float)(v2 * v5.__cosval)) | ((unint64_t)COERCE_UNSIGNED_INT(v3 - (float)(v2 * v5.__sinval)) << 32);
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::tryGetEndPointWithoutContext(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float *a2)
{
  float v3;
  __float2 v4;

  v3 = a2[2];
  v4 = __sincosf_stret(a2[3]);
  return COERCE_UNSIGNED_INT(*a2 + (float)(v3 * v4.__cosval)) | ((unint64_t)COERCE_UNSIGNED_INT(a2[1] - (float)(v3 * v4.__sinval)) << 32);
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::tryGetEndPointWithoutContext(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(int a1, WebCore::PathEllipse *this, WebCore::FloatPoint *a3)
{
  float v3;
  unsigned int v4;
  _BYTE v6[8];

  v3 = WebCore::PathEllipse::calculateEndPoint(this, (const WebCore::FloatPoint *)v6, a3);
  return LODWORD(v3) | ((unint64_t)v4 << 32);
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::tryGetEndPointWithoutContext(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float *a2)
{
  return COERCE_UNSIGNED_INT((float)(a2[2] * 0.5) + (float)(*a2 + (float)(a2[2] * 0.5))) | ((unint64_t)COERCE_UNSIGNED_INT((float)(a2[1] + (float)(a2[3] * 0.5)) + 0.0) << 32);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::tryGetEndPointWithoutContext(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::tryGetEndPointWithoutContext(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::tryGetEndPointWithoutContext(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::tryGetEndPointWithoutContext(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::tryGetEndPointWithoutContext(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::tryGetEndPointWithoutContext(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(int a1, WebCore::PathDataArc *this, WebCore::FloatPoint *a3)
{
  float v3;
  unsigned int v4;
  _BYTE v6[8];

  v3 = WebCore::PathDataArc::calculateEndPoint(this, (const WebCore::FloatPoint *)v6, a3);
  return LODWORD(v3) | ((unint64_t)v4 << 32);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::tryGetEndPointWithoutContext(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendFastBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(float32x2_t ***a1, float32x2_t *a2)
{
  float32x2_t *v2;
  float32x2_t *v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t result;

  v2 = **a1;
  v3 = (*a1)[2];
  v4 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v3, *v2), (int8x8_t)*v2, (int8x8_t)*v3);
  v5 = vadd_f32(*v3, v3[1]);
  v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, v5), (int8x8_t)*v2, (int8x8_t)v5);
  *v3 = v4;
  v7 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v4, *a2), (int8x8_t)*a2, (int8x8_t)v4);
  v8 = vadd_f32(v4, vsub_f32(v6, v4));
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, v8), (int8x8_t)*a2, (int8x8_t)v8), v7);
  *v3 = v7;
  v3[1] = result;
  return result;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendFastBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(float32x2_t ***a1, float32x2_t *a2)
{
  float32x2_t *v2;
  float32x2_t *v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t result;

  v2 = **a1;
  v3 = (*a1)[2];
  v4 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v3, *v2), (int8x8_t)*v2, (int8x8_t)*v3);
  v5 = vadd_f32(*v3, v3[1]);
  v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, v5), (int8x8_t)*v2, (int8x8_t)v5);
  *v3 = v4;
  v7 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v4, *a2), (int8x8_t)*a2, (int8x8_t)v4);
  v8 = vadd_f32(v4, vsub_f32(v6, v4));
  v9 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, v8), (int8x8_t)*a2, (int8x8_t)v8);
  *v3 = v7;
  v10 = a2[1];
  v11 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v7, v10), (int8x8_t)v10, (int8x8_t)v7);
  v12 = vadd_f32(v7, vsub_f32(v9, v7));
  *v3 = v11;
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v10, v12), (int8x8_t)v10, (int8x8_t)v12), v11);
  v3[1] = result;
  return result;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendFastBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(float32x2_t ***a1, float32x2_t *a2)
{
  float32x2_t *v2;
  float32x2_t *v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t result;

  v2 = **a1;
  v3 = (*a1)[2];
  v4 = *v2;
  v5 = *v3;
  v6 = v3[1];
  v7 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v3, *v2), (int8x8_t)*v2, (int8x8_t)*v3);
  *v3 = v7;
  v8 = vadd_f32(v5, v6);
  v9 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v7, *a2), (int8x8_t)*a2, (int8x8_t)v7);
  v10 = vadd_f32(v7, vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v4, v8), (int8x8_t)v4, (int8x8_t)v8), v7));
  v11 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, v10), (int8x8_t)*a2, (int8x8_t)v10);
  *v3 = v9;
  v12 = a2[1];
  v13 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v9, v12), (int8x8_t)v12, (int8x8_t)v9);
  v14 = vadd_f32(v9, vsub_f32(v11, v9));
  *v3 = v13;
  v15 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v12, v14), (int8x8_t)v12, (int8x8_t)v14), v13);
  v16 = a2[2];
  v17 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v13, v16), (int8x8_t)v16, (int8x8_t)v13);
  v18 = vadd_f32(v13, v15);
  *v3 = v17;
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v16, v18), (int8x8_t)v16, (int8x8_t)v18), v17);
  v3[1] = result;
  return result;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendFastBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(float32x2_t ***a1, float32x2_t *a2)
{
  float32x2_t *v2;
  float32x2_t *v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t result;

  v2 = **a1;
  v3 = (*a1)[2];
  v4 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v3, *v2), (int8x8_t)*v2, (int8x8_t)*v3);
  v5 = vadd_f32(*v3, v3[1]);
  v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, v5), (int8x8_t)*v2, (int8x8_t)v5);
  *v3 = v4;
  v7 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v4, *a2), (int8x8_t)*a2, (int8x8_t)v4);
  v8 = vadd_f32(v4, vsub_f32(v6, v4));
  v9 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, v8), (int8x8_t)*a2, (int8x8_t)v8);
  *v3 = v7;
  v10 = a2[1];
  v11 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v7, v10), (int8x8_t)v10, (int8x8_t)v7);
  v12 = vadd_f32(v7, vsub_f32(v9, v7));
  *v3 = v11;
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v10, v12), (int8x8_t)v10, (int8x8_t)v12), v11);
  v3[1] = result;
  return result;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendFastBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t a2)
{
  float32x2_t *v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t result;

  v2 = *(float32x2_t **)(*(_QWORD *)a1 + 16);
  v3 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 8), 0);
  v4 = vsub_f32(*(float32x2_t *)a2, v3);
  v5 = vadd_f32(v3, *(float32x2_t *)a2);
  v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, v4), (int8x8_t)v4, (int8x8_t)*v2);
  v7 = vadd_f32(*v2, v2[1]);
  v8 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v4, v7), (int8x8_t)v4, (int8x8_t)v7), v6);
  v9 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v6, v5), (int8x8_t)v5, (int8x8_t)v6);
  v10 = vadd_f32(v6, v8);
  *v2 = v9;
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v5, v10), (int8x8_t)v5, (int8x8_t)v10), v9);
  v2[1] = result;
  return result;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendFastBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, uint64_t a2)
{
  float32x2_t *v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t result;

  v2 = *(float32x2_t **)(*(_QWORD *)a1 + 16);
  v3 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 8), 0);
  v4 = vsub_f32(*(float32x2_t *)a2, v3);
  v5 = vadd_f32(v3, *(float32x2_t *)a2);
  v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, v4), (int8x8_t)v4, (int8x8_t)*v2);
  v7 = vadd_f32(*v2, v2[1]);
  v8 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v4, v7), (int8x8_t)v4, (int8x8_t)v7), v6);
  v9 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v6, v5), (int8x8_t)v5, (int8x8_t)v6);
  v10 = vadd_f32(v6, v8);
  *v2 = v9;
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v5, v10), (int8x8_t)v5, (int8x8_t)v10), v9);
  v2[1] = result;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendFastBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float32x2_t *a2)
{
  float32x2_t *v2;
  float32x2_t v3;
  int8x8_t v4;
  int8x8_t v5;
  float v6;
  __double2 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  float32x2_t v15;
  __int32 v16;
  int8x8_t v17;
  int8x8_t v18;
  float32x2_t v19;
  __int32 v20;
  float32x2_t v21;
  int8x8_t v22;
  float32x2_t v23;
  int8x8_t v24;
  float32x2_t v25;
  int8x8_t v26;
  int8x8_t v27;
  float32x2_t v28;
  float32x2_t v29;
  int8x8_t v30;
  double v31[6];
  _QWORD v32[2];

  v2 = *(float32x2_t **)(*(_QWORD *)a1 + 16);
  v3 = a2[1];
  v4 = (int8x8_t)vsub_f32(*a2, v3);
  v5 = (int8x8_t)vadd_f32(v3, *a2);
  v6 = a2[2].f32[0];
  if (v6 == 0.0)
  {
    v26 = vbsl_s8((int8x8_t)vcgt_f32(*v2, (float32x2_t)v4), v4, (int8x8_t)*v2);
    v27 = (int8x8_t)vadd_f32(*v2, v2[1]);
    v28 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v4, (float32x2_t)v27), v4, v27), (float32x2_t)v26);
    v29 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v26, (float32x2_t)v5), v5, v26);
    v30 = (int8x8_t)vadd_f32((float32x2_t)v26, v28);
    *v2 = v29;
    v25 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v5, (float32x2_t)v30), v5, v30), v29);
  }
  else
  {
    v32[0] = v4;
    v32[1] = vsub_f32((float32x2_t)v5, (float32x2_t)v4);
    v7 = __sincos_stret((float)(v6 * 0.017453) * 0.0174532925);
    v8 = 0.0;
    v9 = v7.__cosval + v7.__sinval * 0.0;
    v10 = v7.__sinval + v7.__cosval * 0.0;
    v11 = v7.__cosval * 0.0 - v7.__sinval;
    v12 = v7.__cosval - v7.__sinval * 0.0;
    v31[0] = v9;
    v31[1] = v10;
    v31[2] = v11;
    v31[3] = v12;
    if (v12 != 1.0 || v11 != 0.0 || (v10 == 0.0 ? (v13 = v9 == 1.0) : (v13 = 0), v14 = 0.0, !v13))
    {
      v8 = v11 * -0.0 + v9 * -0.0 + 0.0;
      v14 = v12 * -0.0 + v10 * -0.0 + 0.0;
    }
    v31[4] = v8;
    v31[5] = v14;
    v15.f32[0] = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v31, (const WebCore::FloatRect *)v32);
    v15.i32[1] = v16;
    v17 = vbsl_s8((int8x8_t)vcgt_f32(*v2, v15), (int8x8_t)v15, (int8x8_t)*v2);
    v18 = (int8x8_t)vadd_f32(*v2, v2[1]);
    v19 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v15, (float32x2_t)v18), (int8x8_t)v15, v18), (float32x2_t)v17);
    v21.i32[1] = v20;
    v22 = (int8x8_t)vadd_f32(v15, v21);
    v23 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v17, (float32x2_t)v22), v22, v17);
    v24 = (int8x8_t)vadd_f32((float32x2_t)v17, v19);
    v25 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v22, (float32x2_t)v24), v22, v24), v23);
    *v2 = v23;
  }
  v2[1] = v25;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendFastBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float32x2_t *a2)
{
  float32x2_t *v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t result;

  v2 = *(float32x2_t **)(*(_QWORD *)a1 + 16);
  v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, *a2), (int8x8_t)*a2, (int8x8_t)*v2);
  v4 = vadd_f32(*v2, v2[1]);
  v5 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, v4), (int8x8_t)*a2, (int8x8_t)v4), v3);
  *v2 = v3;
  v2[1] = v5;
  v6 = vadd_f32(*a2, a2[1]);
  v7 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v3, v6), (int8x8_t)v6, (int8x8_t)v3);
  v8 = vadd_f32(v3, v5);
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v6, v8), (int8x8_t)v6, (int8x8_t)v8), v7);
  *v2 = v7;
  v2[1] = result;
  return result;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendFastBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float32x2_t *a2)
{
  float32x2_t *v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t result;

  v2 = *(float32x2_t **)(*(_QWORD *)a1 + 16);
  v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, *a2), (int8x8_t)*a2, (int8x8_t)*v2);
  v4 = vadd_f32(*v2, v2[1]);
  v5 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, v4), (int8x8_t)*a2, (int8x8_t)v4), v3);
  *v2 = v3;
  v2[1] = v5;
  v6 = vadd_f32(*a2, a2[1]);
  v7 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v3, v6), (int8x8_t)v6, (int8x8_t)v3);
  v8 = vadd_f32(v3, v5);
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v6, v8), (int8x8_t)v6, (int8x8_t)v8), v7);
  *v2 = v7;
  v2[1] = result;
  return result;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendFastBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float32x2_t *a2)
{
  float32x2_t *v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t result;

  v2 = *(float32x2_t **)(*(_QWORD *)a1 + 16);
  v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, *a2), (int8x8_t)*a2, (int8x8_t)*v2);
  v4 = vadd_f32(*v2, v2[1]);
  v5 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, v4), (int8x8_t)*a2, (int8x8_t)v4), v3);
  *v2 = v3;
  v2[1] = v5;
  v6 = vadd_f32(*a2, a2[1]);
  v7 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v3, v6), (int8x8_t)v6, (int8x8_t)v3);
  v8 = vadd_f32(v3, v5);
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v6, v8), (int8x8_t)v6, (int8x8_t)v8), v7);
  *v2 = v7;
  v2[1] = result;
  return result;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendFastBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float32x2_t *a2)
{
  float32x2_t *v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t result;

  v2 = *(float32x2_t **)(*(_QWORD *)a1 + 16);
  v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, *a2), (int8x8_t)*a2, (int8x8_t)*v2);
  v4 = vadd_f32(*v2, v2[1]);
  v5 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, v4), (int8x8_t)*a2, (int8x8_t)v4);
  *v2 = v3;
  v6 = a2[1];
  v7 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v3, v6), (int8x8_t)v6, (int8x8_t)v3);
  v8 = vadd_f32(v3, vsub_f32(v5, v3));
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v6, v8), (int8x8_t)v6, (int8x8_t)v8), v7);
  *v2 = v7;
  v2[1] = result;
  return result;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendFastBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float32x2_t *a2)
{
  float32x2_t *v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t result;

  v2 = *(float32x2_t **)(*(_QWORD *)a1 + 16);
  v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, *a2), (int8x8_t)*a2, (int8x8_t)*v2);
  v4 = vadd_f32(*v2, v2[1]);
  v5 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, v4), (int8x8_t)*a2, (int8x8_t)v4);
  *v2 = v3;
  v6 = a2[1];
  v7 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v3, v6), (int8x8_t)v6, (int8x8_t)v3);
  v8 = vadd_f32(v3, vsub_f32(v5, v3));
  *v2 = v7;
  v9 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v6, v8), (int8x8_t)v6, (int8x8_t)v8), v7);
  v10 = a2[2];
  v11 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v7, v10), (int8x8_t)v10, (int8x8_t)v7);
  v12 = vadd_f32(v7, v9);
  *v2 = v11;
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v10, v12), (int8x8_t)v10, (int8x8_t)v12), v11);
  v2[1] = result;
  return result;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendFastBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float32x2_t *a2)
{
  float32x2_t *v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t result;

  v2 = *(float32x2_t **)(*(_QWORD *)a1 + 16);
  v3 = *a2;
  v4 = *v2;
  v5 = v2[1];
  v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, *a2), (int8x8_t)*a2, (int8x8_t)*v2);
  *v2 = v6;
  v7 = vadd_f32(v4, v5);
  v8 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v3, v7), (int8x8_t)v3, (int8x8_t)v7), v6);
  v9 = a2[1];
  v10 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v6, v9), (int8x8_t)v9, (int8x8_t)v6);
  v11 = vadd_f32(v6, v8);
  *v2 = v10;
  v12 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v9, v11), (int8x8_t)v9, (int8x8_t)v11), v10);
  v13 = a2[2];
  v14 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v10, v13), (int8x8_t)v13, (int8x8_t)v10);
  v15 = vadd_f32(v10, v12);
  *v2 = v14;
  v16 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v13, v15), (int8x8_t)v13, (int8x8_t)v15), v14);
  v17 = a2[3];
  v18 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v14, v17), (int8x8_t)v17, (int8x8_t)v14);
  v19 = vadd_f32(v14, v16);
  *v2 = v18;
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v17, v19), (int8x8_t)v17, (int8x8_t)v19), v18);
  v2[1] = result;
  return result;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendFastBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float32x2_t *a2)
{
  float32x2_t *v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t result;

  v2 = *(float32x2_t **)(*(_QWORD *)a1 + 16);
  v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, *a2), (int8x8_t)*a2, (int8x8_t)*v2);
  v4 = vadd_f32(*v2, v2[1]);
  v5 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, v4), (int8x8_t)*a2, (int8x8_t)v4);
  *v2 = v3;
  v6 = a2[1];
  v7 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v3, v6), (int8x8_t)v6, (int8x8_t)v3);
  v8 = vadd_f32(v3, vsub_f32(v5, v3));
  *v2 = v7;
  v9 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v6, v8), (int8x8_t)v6, (int8x8_t)v8), v7);
  v10 = a2[2];
  v11 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v7, v10), (int8x8_t)v10, (int8x8_t)v7);
  v12 = vadd_f32(v7, v9);
  *v2 = v11;
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v10, v12), (int8x8_t)v10, (int8x8_t)v12), v11);
  v2[1] = result;
  return result;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendFastBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1)
{
  float32x2_t *v1;
  float32x2_t *v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t result;

  v2 = *(float32x2_t **)(*(_QWORD *)a1 + 8);
  v1 = *(float32x2_t **)(*(_QWORD *)a1 + 16);
  v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v1, *v2), (int8x8_t)*v2, (int8x8_t)*v1);
  v4 = vadd_f32(*v1, v1[1]);
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, v4), (int8x8_t)*v2, (int8x8_t)v4), v3);
  *v1 = v3;
  v1[1] = result;
  return result;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(float32x2_t ***a1, float32x2_t *a2)
{
  float32x2_t *v2;
  float32x2_t *v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t result;

  v2 = **a1;
  v3 = (*a1)[2];
  v4 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v3, *v2), (int8x8_t)*v2, (int8x8_t)*v3);
  v5 = vadd_f32(*v3, v3[1]);
  v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, v5), (int8x8_t)*v2, (int8x8_t)v5);
  *v3 = v4;
  v7 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v4, *a2), (int8x8_t)*a2, (int8x8_t)v4);
  v8 = vadd_f32(v4, vsub_f32(v6, v4));
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, v8), (int8x8_t)*a2, (int8x8_t)v8), v7);
  *v3 = v7;
  v3[1] = result;
  return result;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(float32x2_t ***a1, float *a2)
{
  float32x2_t *v2;
  float32x2_t v3;
  float v4;
  float v5;
  float v6;
  float32x2_t v7;
  float v8;
  float v10;
  float v11;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t result;

  v2 = (*a1)[2];
  v3 = ***a1;
  v4 = a2[1];
  v6 = a2[2];
  v5 = a2[3];
  v7.i32[0] = v3.i32[0];
  v8 = (float)(v7.f32[0] - *a2) / (float)((float)(v7.f32[0] + (float)(*a2 * -2.0)) + v6);
  if (v8 >= 0.0 && v8 <= 1.0)
    v7.f32[0] = (float)((float)(*a2 * (float)(v8 * (float)((float)(1.0 - v8) + (float)(1.0 - v8))))
                      + (float)((float)((float)(1.0 - v8) * (float)(1.0 - v8)) * v3.f32[0]))
              + (float)((float)(v8 * v8) * v6);
  v10 = v3.f32[1];
  v11 = (float)(v3.f32[1] - v4) / (float)((float)(v3.f32[1] + (float)(v4 * -2.0)) + v5);
  if (v11 >= 0.0 && v11 <= 1.0)
    v10 = (float)((float)(v4 * (float)(v11 * (float)((float)(1.0 - v11) + (float)(1.0 - v11))))
                + (float)((float)((float)(1.0 - v11) * (float)(1.0 - v11)) * v3.f32[1]))
        + (float)((float)(v11 * v11) * v5);
  v13 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, v3), (int8x8_t)v3, (int8x8_t)*v2);
  v14 = vadd_f32(*v2, v2[1]);
  v15 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v3, v14), (int8x8_t)v3, (int8x8_t)v14), v13);
  v7.f32[1] = v10;
  v16 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v13, v7), (int8x8_t)v7, (int8x8_t)v13);
  v17 = vadd_f32(v13, v15);
  *v2 = v16;
  v18 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v7, v17), (int8x8_t)v7, (int8x8_t)v17), v16);
  v19 = *(float32x2_t *)(a2 + 2);
  v20 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v16, v19), (int8x8_t)v19, (int8x8_t)v16);
  v21 = vadd_f32(v16, v18);
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v19, v21), (int8x8_t)v19, (int8x8_t)v21), v20);
  *v2 = v20;
  v2[1] = result;
  return result;
}

float std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(float ***a1, float *a2)
{
  float *v2;
  float *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  BOOL v25;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  BOOL v38;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float result;
  float v65;
  BOOL v66;
  float v67;
  BOOL v68;

  v2 = **a1;
  v3 = (*a1)[2];
  v5 = *v2;
  v4 = v2[1];
  v7 = *a2;
  v6 = a2[1];
  v9 = a2[2];
  v8 = a2[3];
  v11 = a2[4];
  v10 = a2[5];
  v12 = *a2 - *v2;
  v13 = v9 - *a2;
  v14 = (float)((float)(v13 * -6.0) + (float)(v12 * 3.0)) + (float)((float)(v11 - v9) * 3.0);
  v15 = (float)(v12 * -6.0) + (float)(v13 * 6.0);
  v16 = v12 * 3.0;
  if (fabsf(v14) < 0.00001)
  {
    v65 = (float)-v16 / v15;
    v66 = v65 < 0.0 || v65 > 1.0;
    v18 = *v2;
    v19 = *v2;
    if (!v66)
    {
      v18 = (float)((float)((float)(v7 * (float)(v65 * (float)((float)(1.0 - v65) * (float)((float)(1.0 - v65) * 3.0))))
                          + (float)((float)((float)(1.0 - v65) * (float)((float)(1.0 - v65) * (float)(1.0 - v65))) * v5))
                  + (float)((float)(v65 * (float)(v65 * (float)((float)(1.0 - v65) * 3.0))) * v9))
          + (float)((float)(v65 * (float)(v65 * v65)) * v11);
      v19 = v18;
    }
  }
  else
  {
    v17 = (float)(v16 * (float)(v14 * -4.0)) + (float)(v15 * v15);
    v18 = *v2;
    v19 = *v2;
    if (v17 >= 0.0)
    {
      v20 = -v15;
      v21 = sqrtf(v17);
      v22 = v14 + v14;
      v23 = (float)(v21 - v15) / v22;
      v24 = (float)(v20 - v21) / v22;
      v25 = v23 < 0.0 || v23 > 1.0;
      v18 = *v2;
      if (!v25)
        v18 = (float)((float)((float)(v7 * (float)(v23 * (float)((float)(1.0 - v23) * (float)((float)(1.0 - v23) * 3.0))))
                            + (float)((float)((float)(1.0 - v23) * (float)((float)(1.0 - v23) * (float)(1.0 - v23))) * v5))
                    + (float)((float)(v23 * (float)(v23 * (float)((float)(1.0 - v23) * 3.0))) * v9))
            + (float)((float)(v23 * (float)(v23 * v23)) * v11);
      if (v24 < 0.0 || v24 > 1.0)
        v19 = *v2;
      else
        v19 = (float)((float)((float)(v7 * (float)(v24 * (float)((float)(1.0 - v24) * (float)((float)(1.0 - v24) * 3.0))))
                            + (float)((float)((float)(1.0 - v24) * (float)((float)(1.0 - v24) * (float)(1.0 - v24))) * v5))
                    + (float)((float)(v24 * (float)(v24 * (float)((float)(1.0 - v24) * 3.0))) * v9))
            + (float)((float)(v24 * (float)(v24 * v24)) * v11);
    }
  }
  v27 = (float)((float)((float)(v8 - v6) * -6.0) + (float)((float)(v6 - v4) * 3.0)) + (float)((float)(v10 - v8) * 3.0);
  v28 = (float)((float)(v6 - v4) * -6.0) + (float)((float)(v8 - v6) * 6.0);
  v29 = (float)(v6 - v4) * 3.0;
  if (fabsf(v27) < 0.00001)
  {
    v67 = (float)-v29 / v28;
    v68 = v67 < 0.0 || v67 > 1.0;
    v31 = v2[1];
    v32 = v31;
    if (!v68)
    {
      v31 = (float)((float)((float)(v6 * (float)(v67 * (float)((float)(1.0 - v67) * (float)((float)(1.0 - v67) * 3.0))))
                          + (float)((float)((float)(1.0 - v67) * (float)((float)(1.0 - v67) * (float)(1.0 - v67))) * v4))
                  + (float)((float)(v67 * (float)(v67 * (float)((float)(1.0 - v67) * 3.0))) * v8))
          + (float)((float)(v67 * (float)(v67 * v67)) * v10);
      v32 = v31;
    }
  }
  else
  {
    v30 = (float)(v29 * (float)(v27 * -4.0)) + (float)(v28 * v28);
    v31 = v2[1];
    v32 = v31;
    if (v30 >= 0.0)
    {
      v33 = -v28;
      v34 = sqrtf(v30);
      v35 = v27 + v27;
      v36 = (float)(v34 - v28) / v35;
      v37 = (float)(v33 - v34) / v35;
      v38 = v36 < 0.0 || v36 > 1.0;
      v31 = v2[1];
      if (!v38)
        v31 = (float)((float)((float)(v6 * (float)(v36 * (float)((float)(1.0 - v36) * (float)((float)(1.0 - v36) * 3.0))))
                            + (float)((float)((float)(1.0 - v36) * (float)((float)(1.0 - v36) * (float)(1.0 - v36))) * v4))
                    + (float)((float)(v36 * (float)(v36 * (float)((float)(1.0 - v36) * 3.0))) * v8))
            + (float)((float)(v36 * (float)(v36 * v36)) * v10);
      if (v37 < 0.0 || v37 > 1.0)
        v32 = v2[1];
      else
        v32 = (float)((float)((float)(v6 * (float)(v37 * (float)((float)(1.0 - v37) * (float)((float)(1.0 - v37) * 3.0))))
                            + (float)((float)((float)(1.0 - v37) * (float)((float)(1.0 - v37) * (float)(1.0 - v37))) * v4))
                    + (float)((float)(v37 * (float)(v37 * (float)((float)(1.0 - v37) * 3.0))) * v8))
            + (float)((float)(v37 * (float)(v37 * v37)) * v10);
    }
  }
  v40 = v3[1];
  if (*v3 <= v5)
    v41 = *v3;
  else
    v41 = *v2;
  v42 = v3[3];
  if (v40 <= v4)
    v43 = v3[1];
  else
    v43 = v2[1];
  if ((float)(*v3 + v3[2]) >= v5)
    v5 = *v3 + v3[2];
  if ((float)(v40 + v42) >= v4)
    v4 = v40 + v42;
  v44 = v5 - v41;
  v45 = v4 - v43;
  if (v18 >= v41)
    v46 = v41;
  else
    v46 = v18;
  if (v31 >= v43)
    v47 = v43;
  else
    v47 = v31;
  v48 = v41 + v44;
  if (v48 < v18)
    v48 = v18;
  v49 = v43 + v45;
  if (v49 < v31)
    v49 = v31;
  v50 = v48 - v46;
  v51 = v49 - v47;
  if (v19 >= v46)
    v52 = v46;
  else
    v52 = v19;
  if (v32 >= v47)
    v53 = v47;
  else
    v53 = v32;
  v54 = v46 + v50;
  if (v54 < v19)
    v54 = v19;
  v55 = v47 + v51;
  if (v55 < v32)
    v55 = v32;
  *v3 = v52;
  v3[1] = v53;
  v56 = v54 - v52;
  v57 = v55 - v53;
  v58 = a2[4];
  v59 = a2[5];
  if (v58 >= v52)
    v60 = v52;
  else
    v60 = a2[4];
  if (v59 >= v53)
    v61 = v53;
  else
    v61 = a2[5];
  v62 = v52 + v56;
  if (v62 < v58)
    v62 = a2[4];
  v63 = v53 + v57;
  if (v63 < v59)
    v63 = a2[5];
  *v3 = v60;
  v3[1] = v61;
  result = v63 - v61;
  v3[2] = v62 - v60;
  v3[3] = result;
  return result;
}

float std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(float32x2_t ***a1, float32x2_t *a2)
{
  float32x2_t *v2;
  float32x2_t *v3;
  int8x8_t v4;
  int8x8_t v5;
  float32x2_t v6;
  float32x2_t v7;
  int8x8_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  __float2 v22;
  float v23;
  float v24;
  float32x2_t v25;
  float v26;
  float result;
  float32x2_t v28;

  v2 = **a1;
  v3 = (*a1)[2];
  v4 = vbsl_s8((int8x8_t)vcgt_f32(*v3, *v2), (int8x8_t)*v2, (int8x8_t)*v3);
  v5 = (int8x8_t)vadd_f32(*v3, v3[1]);
  v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, (float32x2_t)v5), (int8x8_t)*v2, v5);
  *v3 = (float32x2_t)v4;
  v7 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v4, *a2), (int8x8_t)*a2, v4);
  v8 = (int8x8_t)vadd_f32((float32x2_t)v4, vsub_f32(v6, (float32x2_t)v4));
  v9 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, (float32x2_t)v8), (int8x8_t)*a2, v8);
  *v3 = v7;
  v28 = v7;
  v10 = vsub_f32(v9, v7);
  v3[1] = v10;
  v12 = a2[1].f32[1];
  v11 = a2[2].f32[0];
  v14 = a2->f32[1];
  v13 = a2[1].f32[0];
  v15 = a2->f32[0];
  v16 = v2->f32[1] - v14;
  if (vabds_f32(v2->f32[0], a2->f32[0]) >= 0.00001)
    v17 = atan2f(v16, v2->f32[0] - v15);
  else
    v17 = flt_1969F7CF0[v16 >= 0.0];
  v18 = v14 - v12;
  if (vabds_f32(v15, v13) >= 0.00001)
    v19 = atan2f(v18, v15 - v13);
  else
    v19 = flt_1969F7CF0[v18 >= 0.0];
  v20 = vabds_f32(v19, v17);
  if (v20 < 1.5708 && v20 >= 0.00001)
  {
    v21 = fabsf(v11 / tanf((float)(v19 - v17) * 0.5));
    v22 = __sincosf_stret(v19);
    v15 = v15 + (float)(v21 * v22.__cosval);
    v14 = v14 - (float)(v21 * v22.__sinval);
  }
  if (v15 >= v28.f32[0])
    v23 = v28.f32[0];
  else
    v23 = v15;
  v24 = v28.f32[1];
  if (v14 < v28.f32[1])
    v24 = v14;
  v25 = vadd_f32(v28, v10);
  if (v25.f32[0] >= v15)
    v26 = v25.f32[0];
  else
    v26 = v15;
  v25.i32[0] = v25.i32[1];
  if (v25.f32[1] < v14)
    v25.f32[0] = v14;
  v3->f32[0] = v23;
  v3->f32[1] = v24;
  v3[1].f32[0] = v26 - v23;
  result = v25.f32[0] - v24;
  v3[1].f32[1] = v25.f32[0] - v24;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float32x2_t *this, const WebCore::FloatPoint *a3, WebCore::FloatRect *a4, double a5, double a6, int32x2_t a7)
{
  WebCore::PathArc::extendBoundingRect(this, *(float32x2_t **)(*(_QWORD *)a1 + 16), a3, a4, a5, a6, a7);
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float32x2_t *this, const WebCore::FloatPoint *a3, WebCore::FloatRect *a4, double a5, double a6, int32x2_t a7)
{
  WebCore::PathArc::extendBoundingRect(this, *(float32x2_t **)(*(_QWORD *)a1 + 16), a3, a4, a5, a6, a7);
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(float32x2_t ***a1)
{
  float32x2_t *v1;
  float32x2_t *v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t result;

  v1 = **a1;
  v2 = (*a1)[2];
  v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, *v1), (int8x8_t)*v1, (int8x8_t)*v2);
  v4 = vadd_f32(*v2, v2[1]);
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v1, v4), (int8x8_t)*v1, (int8x8_t)v4), v3);
  *v2 = v3;
  v2[1] = result;
  return result;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float32x2_t *a2)
{
  float32x2_t *v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t result;

  v2 = *(float32x2_t **)(*(_QWORD *)a1 + 16);
  v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, *a2), (int8x8_t)*a2, (int8x8_t)*v2);
  v4 = vadd_f32(*v2, v2[1]);
  v5 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, v4), (int8x8_t)*a2, (int8x8_t)v4), v3);
  *v2 = v3;
  v2[1] = v5;
  v6 = vadd_f32(*a2, a2[1]);
  v7 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v3, v6), (int8x8_t)v6, (int8x8_t)v3);
  v8 = vadd_f32(v3, v5);
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v6, v8), (int8x8_t)v6, (int8x8_t)v8), v7);
  *v2 = v7;
  v2[1] = result;
  return result;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float32x2_t *this, const WebCore::FloatPoint *a3, WebCore::FloatRect *a4)
{
  return WebCore::PathRect::extendBoundingRect(this, *(float32x2_t **)(*(_QWORD *)a1 + 16), a3, a4);
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float32x2_t *a2)
{
  float32x2_t *v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t result;

  v2 = *(float32x2_t **)(*(_QWORD *)a1 + 16);
  v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, *a2), (int8x8_t)*a2, (int8x8_t)*v2);
  v4 = vadd_f32(*v2, v2[1]);
  v5 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, v4), (int8x8_t)*a2, (int8x8_t)v4), v3);
  *v2 = v3;
  v2[1] = v5;
  v6 = vadd_f32(*a2, a2[1]);
  v7 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v3, v6), (int8x8_t)v6, (int8x8_t)v3);
  v8 = vadd_f32(v3, v5);
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v6, v8), (int8x8_t)v6, (int8x8_t)v8), v7);
  *v2 = v7;
  v2[1] = result;
  return result;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float32x2_t *a2)
{
  float32x2_t *v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t result;

  v2 = *(float32x2_t **)(*(_QWORD *)a1 + 16);
  v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, *a2), (int8x8_t)*a2, (int8x8_t)*v2);
  v4 = vadd_f32(*v2, v2[1]);
  v5 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, v4), (int8x8_t)*a2, (int8x8_t)v4);
  *v2 = v3;
  v6 = a2[1];
  v7 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v3, v6), (int8x8_t)v6, (int8x8_t)v3);
  v8 = vadd_f32(v3, vsub_f32(v5, v3));
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v6, v8), (int8x8_t)v6, (int8x8_t)v8), v7);
  *v2 = v7;
  v2[1] = result;
  return result;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float32x2_t *a2)
{
  float32x2_t *v2;
  float32x2_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float32x2_t v8;
  float v9;
  float v11;
  float v12;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t result;

  v2 = *(float32x2_t **)(*(_QWORD *)a1 + 16);
  v3 = *a2;
  v5 = a2[1].f32[0];
  v4 = a2[1].f32[1];
  v7 = a2[2].f32[0];
  v6 = a2[2].f32[1];
  v8.i32[0] = (__int32)*a2;
  v9 = (float)(v8.f32[0] - v5) / (float)((float)(v8.f32[0] + (float)(v5 * -2.0)) + v7);
  if (v9 >= 0.0 && v9 <= 1.0)
    v8.f32[0] = (float)((float)(v5 * (float)(v9 * (float)((float)(1.0 - v9) + (float)(1.0 - v9))))
                      + (float)((float)((float)(1.0 - v9) * (float)(1.0 - v9)) * v8.f32[0]))
              + (float)((float)(v9 * v9) * v7);
  LODWORD(v11) = HIDWORD(*(unint64_t *)a2);
  v12 = (float)(v3.f32[1] - v4) / (float)((float)(v3.f32[1] + (float)(v4 * -2.0)) + v6);
  if (v12 >= 0.0 && v12 <= 1.0)
    v11 = (float)((float)(v4 * (float)(v12 * (float)((float)(1.0 - v12) + (float)(1.0 - v12))))
                + (float)((float)((float)(1.0 - v12) * (float)(1.0 - v12)) * v3.f32[1]))
        + (float)((float)(v12 * v12) * v6);
  v14 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, v3), (int8x8_t)v3, (int8x8_t)*v2);
  v15 = vadd_f32(*v2, v2[1]);
  v16 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v3, v15), (int8x8_t)v3, (int8x8_t)v15), v14);
  v8.f32[1] = v11;
  v17 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v14, v8), (int8x8_t)v8, (int8x8_t)v14);
  v18 = vadd_f32(v14, v16);
  *v2 = v17;
  v19 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v8, v18), (int8x8_t)v8, (int8x8_t)v18), v17);
  v20 = a2[2];
  v21 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v17, v20), (int8x8_t)v20, (int8x8_t)v17);
  v22 = vadd_f32(v17, v19);
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v20, v22), (int8x8_t)v20, (int8x8_t)v22), v21);
  *v2 = v21;
  v2[1] = result;
  return result;
}

float std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float *a2)
{
  float *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  BOOL v23;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  BOOL v36;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float result;
  float v63;
  BOOL v64;
  float v65;
  BOOL v66;

  v2 = *(float **)(*(_QWORD *)a1 + 16);
  v4 = *a2;
  v3 = a2[1];
  v6 = a2[2];
  v5 = a2[3];
  v8 = a2[4];
  v7 = a2[5];
  v10 = a2[6];
  v9 = a2[7];
  v11 = v6 - *a2;
  v12 = (float)((float)((float)(v8 - v6) * -6.0) + (float)(v11 * 3.0)) + (float)((float)(v10 - v8) * 3.0);
  v13 = (float)(v11 * -6.0) + (float)((float)(v8 - v6) * 6.0);
  v14 = v11 * 3.0;
  if (fabsf(v12) < 0.00001)
  {
    v63 = (float)-v14 / v13;
    v64 = v63 < 0.0 || v63 > 1.0;
    v16 = *a2;
    v17 = *a2;
    if (!v64)
    {
      v16 = (float)((float)((float)(v6 * (float)(v63 * (float)((float)(1.0 - v63) * (float)((float)(1.0 - v63) * 3.0))))
                          + (float)((float)((float)(1.0 - v63) * (float)((float)(1.0 - v63) * (float)(1.0 - v63))) * v4))
                  + (float)((float)(v63 * (float)(v63 * (float)((float)(1.0 - v63) * 3.0))) * v8))
          + (float)((float)(v63 * (float)(v63 * v63)) * v10);
      v17 = v16;
    }
  }
  else
  {
    v15 = (float)(v14 * (float)(v12 * -4.0)) + (float)(v13 * v13);
    v16 = *a2;
    v17 = *a2;
    if (v15 >= 0.0)
    {
      v18 = -v13;
      v19 = sqrtf(v15);
      v20 = v12 + v12;
      v21 = (float)(v19 - v13) / v20;
      v22 = (float)(v18 - v19) / v20;
      v23 = v21 < 0.0 || v21 > 1.0;
      v16 = *a2;
      if (!v23)
        v16 = (float)((float)((float)(v6 * (float)(v21 * (float)((float)(1.0 - v21) * (float)((float)(1.0 - v21) * 3.0))))
                            + (float)((float)((float)(1.0 - v21) * (float)((float)(1.0 - v21) * (float)(1.0 - v21))) * v4))
                    + (float)((float)(v21 * (float)(v21 * (float)((float)(1.0 - v21) * 3.0))) * v8))
            + (float)((float)(v21 * (float)(v21 * v21)) * v10);
      if (v22 < 0.0 || v22 > 1.0)
        v17 = *a2;
      else
        v17 = (float)((float)((float)(v6 * (float)(v22 * (float)((float)(1.0 - v22) * (float)((float)(1.0 - v22) * 3.0))))
                            + (float)((float)((float)(1.0 - v22) * (float)((float)(1.0 - v22) * (float)(1.0 - v22))) * v4))
                    + (float)((float)(v22 * (float)(v22 * (float)((float)(1.0 - v22) * 3.0))) * v8))
            + (float)((float)(v22 * (float)(v22 * v22)) * v10);
    }
  }
  v25 = (float)((float)((float)(v7 - v5) * -6.0) + (float)((float)(v5 - v3) * 3.0)) + (float)((float)(v9 - v7) * 3.0);
  v26 = (float)((float)(v5 - v3) * -6.0) + (float)((float)(v7 - v5) * 6.0);
  v27 = (float)(v5 - v3) * 3.0;
  if (fabsf(v25) < 0.00001)
  {
    v65 = (float)-v27 / v26;
    v66 = v65 < 0.0 || v65 > 1.0;
    v29 = a2[1];
    v30 = v29;
    if (!v66)
    {
      v29 = (float)((float)((float)(v5 * (float)(v65 * (float)((float)(1.0 - v65) * (float)((float)(1.0 - v65) * 3.0))))
                          + (float)((float)((float)(1.0 - v65) * (float)((float)(1.0 - v65) * (float)(1.0 - v65))) * v3))
                  + (float)((float)(v65 * (float)(v65 * (float)((float)(1.0 - v65) * 3.0))) * v7))
          + (float)((float)(v65 * (float)(v65 * v65)) * v9);
      v30 = v29;
    }
  }
  else
  {
    v28 = (float)(v27 * (float)(v25 * -4.0)) + (float)(v26 * v26);
    v29 = a2[1];
    v30 = v29;
    if (v28 >= 0.0)
    {
      v31 = -v26;
      v32 = sqrtf(v28);
      v33 = v25 + v25;
      v34 = (float)(v32 - v26) / v33;
      v35 = (float)(v31 - v32) / v33;
      v36 = v34 < 0.0 || v34 > 1.0;
      v29 = a2[1];
      if (!v36)
        v29 = (float)((float)((float)(v5 * (float)(v34 * (float)((float)(1.0 - v34) * (float)((float)(1.0 - v34) * 3.0))))
                            + (float)((float)((float)(1.0 - v34) * (float)((float)(1.0 - v34) * (float)(1.0 - v34))) * v3))
                    + (float)((float)(v34 * (float)(v34 * (float)((float)(1.0 - v34) * 3.0))) * v7))
            + (float)((float)(v34 * (float)(v34 * v34)) * v9);
      if (v35 < 0.0 || v35 > 1.0)
        v30 = a2[1];
      else
        v30 = (float)((float)((float)(v5 * (float)(v35 * (float)((float)(1.0 - v35) * (float)((float)(1.0 - v35) * 3.0))))
                            + (float)((float)((float)(1.0 - v35) * (float)((float)(1.0 - v35) * (float)(1.0 - v35))) * v3))
                    + (float)((float)(v35 * (float)(v35 * (float)((float)(1.0 - v35) * 3.0))) * v7))
            + (float)((float)(v35 * (float)(v35 * v35)) * v9);
    }
  }
  v38 = v2[1];
  if (v4 >= *v2)
    v39 = *v2;
  else
    v39 = *a2;
  v40 = v2[3];
  if (v3 >= v38)
    v41 = v2[1];
  else
    v41 = a2[1];
  if ((float)(*v2 + v2[2]) >= v4)
    v4 = *v2 + v2[2];
  if ((float)(v38 + v40) >= v3)
    v3 = v38 + v40;
  v42 = v4 - v39;
  v43 = v3 - v41;
  if (v16 >= v39)
    v44 = v39;
  else
    v44 = v16;
  if (v29 >= v41)
    v45 = v41;
  else
    v45 = v29;
  v46 = v39 + v42;
  if (v46 < v16)
    v46 = v16;
  v47 = v41 + v43;
  if (v47 < v29)
    v47 = v29;
  v48 = v46 - v44;
  v49 = v47 - v45;
  if (v17 >= v44)
    v50 = v44;
  else
    v50 = v17;
  if (v30 >= v45)
    v51 = v45;
  else
    v51 = v30;
  v52 = v44 + v48;
  if (v52 < v17)
    v52 = v17;
  v53 = v45 + v49;
  if (v53 < v30)
    v53 = v30;
  *v2 = v50;
  v2[1] = v51;
  v54 = v52 - v50;
  v55 = v53 - v51;
  v56 = a2[6];
  v57 = a2[7];
  if (v56 >= v50)
    v58 = v50;
  else
    v58 = a2[6];
  if (v57 >= v51)
    v59 = v51;
  else
    v59 = a2[7];
  v60 = v50 + v54;
  if (v60 < v56)
    v60 = a2[6];
  v61 = v51 + v55;
  if (v61 < v57)
    v61 = a2[7];
  *v2 = v58;
  v2[1] = v59;
  result = v61 - v59;
  v2[2] = v60 - v58;
  v2[3] = result;
  return result;
}

float std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1, float32x2_t *a2)
{
  float32x2_t *v2;
  int8x8_t v3;
  int8x8_t v4;
  float32x2_t v5;
  int8x8_t v6;
  float32x2_t v7;
  int8x8_t v8;
  float32x2_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  __float2 v21;
  float v22;
  float v23;
  float32x2_t v24;
  float v25;
  float result;
  float32x2_t v27;

  v2 = *(float32x2_t **)(*(_QWORD *)a1 + 16);
  v3 = vbsl_s8((int8x8_t)vcgt_f32(*v2, *a2), (int8x8_t)*a2, (int8x8_t)*v2);
  v4 = (int8x8_t)vadd_f32(*v2, v2[1]);
  v5 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, (float32x2_t)v4), (int8x8_t)*a2, v4);
  *v2 = (float32x2_t)v3;
  v6 = (int8x8_t)a2[1];
  v7 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v3, (float32x2_t)v6), v6, v3);
  v8 = (int8x8_t)vadd_f32((float32x2_t)v3, vsub_f32(v5, (float32x2_t)v3));
  *v2 = v7;
  v27 = v7;
  v9 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v6, (float32x2_t)v8), v6, v8), v7);
  v2[1] = v9;
  v11 = a2[2].f32[1];
  v10 = a2[3].f32[0];
  v13 = a2[1].f32[1];
  v12 = a2[2].f32[0];
  v14 = a2[1].f32[0];
  v15 = a2->f32[1] - v13;
  if (vabds_f32(a2->f32[0], v14) >= 0.00001)
    v16 = atan2f(v15, a2->f32[0] - v14);
  else
    v16 = flt_1969F7CF0[v15 >= 0.0];
  v17 = v13 - v11;
  if (vabds_f32(v14, v12) >= 0.00001)
    v18 = atan2f(v17, v14 - v12);
  else
    v18 = flt_1969F7CF0[v17 >= 0.0];
  v19 = vabds_f32(v18, v16);
  if (v19 < 1.5708 && v19 >= 0.00001)
  {
    v20 = fabsf(v10 / tanf((float)(v18 - v16) * 0.5));
    v21 = __sincosf_stret(v18);
    v14 = v14 + (float)(v20 * v21.__cosval);
    v13 = v13 - (float)(v20 * v21.__sinval);
  }
  if (v14 >= v27.f32[0])
    v22 = v27.f32[0];
  else
    v22 = v14;
  v23 = v27.f32[1];
  if (v13 < v27.f32[1])
    v23 = v13;
  v24 = vadd_f32(v27, v9);
  if (v24.f32[0] >= v14)
    v25 = v24.f32[0];
  else
    v25 = v14;
  v24.i32[0] = v24.i32[1];
  if (v24.f32[1] < v13)
    v24.f32[0] = v13;
  v2->f32[0] = v22;
  v2->f32[1] = v23;
  v2[1].f32[0] = v25 - v22;
  result = v24.f32[0] - v23;
  v2[1].f32[1] = v24.f32[0] - v23;
  return result;
}

float32x2_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::extendBoundingRect(WebCore::FloatPoint const&,WebCore::FloatPoint const&,WebCore::FloatRect &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t a1)
{
  float32x2_t *v1;
  float32x2_t *v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t result;

  v2 = *(float32x2_t **)(*(_QWORD *)a1 + 8);
  v1 = *(float32x2_t **)(*(_QWORD *)a1 + 16);
  v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v1, *v2), (int8x8_t)*v2, (int8x8_t)*v1);
  v4 = vadd_f32(*v1, v1[1]);
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v2, v4), (int8x8_t)*v2, (int8x8_t)v4), v3);
  *v1 = v3;
  v1[1] = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canApplyElements(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canApplyElements(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canApplyElements(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canApplyElements(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canApplyElements(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canApplyElements(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canApplyElements(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canApplyElements(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canApplyElements(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canApplyElements(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canApplyElements(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canApplyElements(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canApplyElements(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canApplyElements(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canApplyElements(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canApplyElements(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::applyElements(WTF::Function<void ()(WebCore::PathElement const&)> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t ***a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[4];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a2;
  v3 = ***a1;
  v5[0] = 0;
  v6 = v2;
  v7 = 0;
  v8 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v5);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::applyElements(WTF::Function<void ()(WebCore::PathElement const&)> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t ***a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5[4];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a2;
  v3 = ***a1;
  v5[0] = 1;
  v6 = v2;
  v7 = 0;
  v8 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v3 + 16))(v3, v5);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::applyElements(WTF::Function<void ()(WebCore::PathElement const&)> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t ***a1, __int128 *a2)
{
  uint64_t v2;
  char v4[4];
  __int128 v5;
  uint64_t v6;

  v2 = ***a1;
  v4[0] = 2;
  v5 = *a2;
  v6 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v2 + 16))(v2, v4);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::applyElements(WTF::Function<void ()(WebCore::PathElement const&)> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t ***a1, __int128 *a2)
{
  uint64_t v2;
  char v4[4];
  __int128 v5;
  uint64_t v6;

  v2 = ***a1;
  v4[0] = 3;
  v5 = *a2;
  v6 = *((_QWORD *)a2 + 2);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v2 + 16))(v2, v4);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::applyElements(WTF::Function<void ()(WebCore::PathElement const&)> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::applyElements(WTF::Function<void ()(WebCore::PathElement const&)> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::applyElements(WTF::Function<void ()(WebCore::PathElement const&)> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::applyElements(WTF::Function<void ()(WebCore::PathElement const&)> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::applyElements(WTF::Function<void ()(WebCore::PathElement const&)> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::applyElements(WTF::Function<void ()(WebCore::PathElement const&)> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::applyElements(WTF::Function<void ()(WebCore::PathElement const&)> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::applyElements(WTF::Function<void ()(WebCore::PathElement const&)> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(_QWORD ***a1, uint64_t *a2)
{
  _QWORD *v3;
  _BYTE v5[4];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = **a1;
  v5[0] = 0;
  v6 = *a2;
  v7 = 0;
  v8 = 0;
  (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*v3 + 16))(*v3, v5);
  v5[0] = 1;
  v6 = a2[1];
  v7 = 0;
  v8 = 0;
  (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*v3 + 16))(*v3, v5);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::applyElements(WTF::Function<void ()(WebCore::PathElement const&)> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(_QWORD ***a1, unint64_t *a2)
{
  _QWORD *v3;
  _BYTE v5[4];
  __int128 v6;
  uint64_t v7;

  v3 = **a1;
  v5[0] = 0;
  v6 = *a2;
  v7 = 0;
  (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*v3 + 16))(*v3, v5);
  v5[0] = 2;
  v6 = *(_OWORD *)(a2 + 1);
  v7 = 0;
  (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*v3 + 16))(*v3, v5);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::applyElements(WTF::Function<void ()(WebCore::PathElement const&)> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(_QWORD ***a1, unint64_t *a2)
{
  _QWORD *v3;
  _BYTE v5[4];
  __int128 v6;
  unint64_t v7;

  v3 = **a1;
  v5[0] = 0;
  v6 = *a2;
  v7 = 0;
  (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*v3 + 16))(*v3, v5);
  v5[0] = 3;
  v6 = *(_OWORD *)(a2 + 1);
  v7 = a2[3];
  (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*v3 + 16))(*v3, v5);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::applyElements(WTF::Function<void ()(WebCore::PathElement const&)> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::applyElements(WTF::Function<void ()(WebCore::PathElement const&)> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t ***a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = ***a1;
  v3 = 4;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v1 + 16))(v1, &v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canTransform(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canTransform(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canTransform(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canTransform(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canTransform(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canTransform(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canTransform(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canTransform(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canTransform(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canTransform(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canTransform(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canTransform(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canTransform(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canTransform(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canTransform(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::canTransform(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::transform(WebCore::AffineTransform const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> &>(float64x2_t ***a1, float32x2_t *a2)
{
  *a2 = vcvt_f32_f64(vaddq_f64((**a1)[2], vmlaq_n_f64(vmulq_n_f64((**a1)[1], a2->f32[1]), ***a1, a2->f32[0])));
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::transform(WebCore::AffineTransform const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> &>(float64x2_t ***a1, float32x2_t *a2)
{
  *a2 = vcvt_f32_f64(vaddq_f64((**a1)[2], vmlaq_n_f64(vmulq_n_f64((**a1)[1], a2->f32[1]), ***a1, a2->f32[0])));
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::transform(WebCore::AffineTransform const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> &>(double ***a1, float *a2)
{
  double *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v2 = **a1;
  v3 = *a2;
  v4 = a2[1];
  v5 = v2[2];
  v6 = v2[3];
  v7 = *v2;
  v8 = v2[1];
  v9 = v5 * v4 + *v2 * v3;
  v10 = v6 * v4 + v8 * v3;
  v11 = v2[4];
  v12 = v2[5];
  *(float *)&v9 = v11 + v9;
  *(float *)&v10 = v12 + v10;
  *a2 = *(float *)&v9;
  a2[1] = *(float *)&v10;
  v13 = a2[2];
  v14 = a2[3];
  *(float *)&v11 = v11 + v5 * v14 + v7 * v13;
  *(float *)&v13 = v12 + v6 * v14 + v8 * v13;
  a2[2] = *(float *)&v11;
  a2[3] = *(float *)&v13;
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::transform(WebCore::AffineTransform const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> &>(double ***a1, float *a2)
{
  double *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v2 = **a1;
  v3 = *a2;
  v4 = a2[1];
  v5 = v2[2];
  v6 = v2[3];
  v7 = *v2;
  v8 = v2[1];
  v9 = v2[4];
  v10 = v2[5];
  v11 = v9 + v5 * v4 + *v2 * v3;
  v12 = v10 + v6 * v4 + v8 * v3;
  *(float *)&v4 = v11;
  *(float *)&v12 = v12;
  *a2 = *(float *)&v4;
  a2[1] = *(float *)&v12;
  v13 = a2[2];
  v14 = a2[3];
  v15 = v9 + v5 * v14 + v7 * v13;
  v16 = v10 + v6 * v14 + v8 * v13;
  *(float *)&v14 = v15;
  *(float *)&v16 = v16;
  a2[2] = *(float *)&v14;
  a2[3] = *(float *)&v16;
  v17 = a2[4];
  v18 = a2[5];
  v19 = v9 + v5 * v18 + v7 * v17;
  v20 = v10 + v6 * v18 + v8 * v17;
  *(float *)&v18 = v19;
  *(float *)&v20 = v20;
  a2[4] = *(float *)&v18;
  a2[5] = *(float *)&v20;
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::transform(WebCore::AffineTransform const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> &>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::transform(WebCore::AffineTransform const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> &>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::transform(WebCore::AffineTransform const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> &>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::transform(WebCore::AffineTransform const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> &>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::transform(WebCore::AffineTransform const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> &>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::transform(WebCore::AffineTransform const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> &>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::transform(WebCore::AffineTransform const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> &>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::transform(WebCore::AffineTransform const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> &>(double ***a1, float *a2)
{
  double *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v2 = **a1;
  v3 = *a2;
  v4 = a2[1];
  v5 = v2[2];
  v6 = v2[3];
  v7 = *v2;
  v8 = v2[1];
  v9 = v5 * v4 + *v2 * v3;
  v10 = v6 * v4 + v8 * v3;
  v11 = v2[4];
  v12 = v2[5];
  *(float *)&v9 = v11 + v9;
  *(float *)&v10 = v12 + v10;
  *a2 = *(float *)&v9;
  a2[1] = *(float *)&v10;
  v13 = a2[2];
  v14 = a2[3];
  *(float *)&v11 = v11 + v5 * v14 + v7 * v13;
  *(float *)&v13 = v12 + v6 * v14 + v8 * v13;
  a2[2] = *(float *)&v11;
  a2[3] = *(float *)&v13;
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::transform(WebCore::AffineTransform const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> &>(double ***a1, float *a2)
{
  double *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v2 = **a1;
  v3 = *a2;
  v4 = a2[1];
  v5 = v2[2];
  v6 = v2[3];
  v7 = *v2;
  v8 = v2[1];
  v9 = v2[4];
  v10 = v2[5];
  v11 = v9 + v5 * v4 + *v2 * v3;
  v12 = v10 + v6 * v4 + v8 * v3;
  *(float *)&v4 = v11;
  *(float *)&v12 = v12;
  *a2 = *(float *)&v4;
  a2[1] = *(float *)&v12;
  v13 = a2[2];
  v14 = a2[3];
  v15 = v9 + v5 * v14 + v7 * v13;
  v16 = v10 + v6 * v14 + v8 * v13;
  *(float *)&v14 = v15;
  *(float *)&v16 = v16;
  a2[2] = *(float *)&v14;
  a2[3] = *(float *)&v16;
  v17 = a2[4];
  v18 = a2[5];
  v19 = v9 + v5 * v18 + v7 * v17;
  v20 = v10 + v6 * v18 + v8 * v17;
  *(float *)&v18 = v19;
  *(float *)&v20 = v20;
  a2[4] = *(float *)&v18;
  a2[5] = *(float *)&v20;
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::transform(WebCore::AffineTransform const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> &>(double ***a1, float *a2)
{
  double *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;

  v2 = **a1;
  v3 = *a2;
  v4 = a2[1];
  v5 = v2[2];
  v6 = v2[3];
  v7 = *v2;
  v8 = v2[1];
  v9 = v2[4];
  v10 = v2[5];
  v11 = v9 + v5 * v4 + *v2 * v3;
  v12 = v10 + v6 * v4 + v8 * v3;
  *(float *)&v4 = v11;
  *(float *)&v12 = v12;
  *a2 = *(float *)&v4;
  a2[1] = *(float *)&v12;
  v13 = a2[2];
  v14 = a2[3];
  v15 = v9 + v5 * v14 + v7 * v13;
  v16 = v10 + v6 * v14 + v8 * v13;
  *(float *)&v14 = v15;
  *(float *)&v16 = v16;
  a2[2] = *(float *)&v14;
  a2[3] = *(float *)&v16;
  v17 = a2[4];
  v18 = a2[5];
  v19 = v9 + v5 * v18 + v7 * v17;
  v20 = v10 + v6 * v18 + v8 * v17;
  *(float *)&v18 = v19;
  *(float *)&v20 = v20;
  a2[4] = *(float *)&v18;
  a2[5] = *(float *)&v20;
  v21 = a2[6];
  v22 = a2[7];
  v23 = v9 + v5 * v22 + v7 * v21;
  v24 = v10 + v6 * v22 + v8 * v21;
  *(float *)&v22 = v23;
  *(float *)&v24 = v24;
  a2[6] = *(float *)&v22;
  a2[7] = *(float *)&v24;
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::transform(WebCore::AffineTransform const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> &>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PathSegment::transform(WebCore::AffineTransform const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> &>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::PathSegment const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t **a1)
{
  uint64_t v1;

  v1 = **a1;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return v1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::PathSegment const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t **a1)
{
  uint64_t v1;

  v1 = **a1;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return v1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::PathSegment const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t **a1)
{
  uint64_t v1;

  v1 = **a1;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return v1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::PathSegment const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t **a1)
{
  uint64_t v1;

  v1 = **a1;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return v1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::PathSegment const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t **a1)
{
  uint64_t v1;

  v1 = **a1;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return v1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::PathSegment const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t **a1)
{
  return WebCore::operator<<(**a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::PathSegment const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t **a1)
{
  return WebCore::operator<<(**a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::PathSegment const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t **a1)
{
  return WebCore::operator<<(**a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::PathSegment const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **a1;
  v2 = WTF::TextStream::operator<<();
  WebCore::operator<<(v2);
  return v1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::PathSegment const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **a1;
  v2 = WTF::TextStream::operator<<();
  WebCore::operator<<(v2);
  return v1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::PathSegment const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t **a1)
{
  uint64_t v1;
  WTF::TextStream *v2;

  v1 = **a1;
  v2 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WebCore::operator<<(v2);
  return v1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::PathSegment const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t **a1)
{
  uint64_t v1;

  v1 = **a1;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return v1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::PathSegment const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t **a1)
{
  uint64_t v1;

  v1 = **a1;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return v1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::PathSegment const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t **a1)
{
  uint64_t v1;

  v1 = **a1;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return v1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::PathSegment const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t **a1)
{
  uint64_t v1;

  v1 = **a1;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return v1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::PathSegment const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t **a1)
{
  uint64_t v1;

  v1 = **a1;
  WTF::TextStream::operator<<();
  return v1;
}

char *WTF::Vector<WebCore::QuadraticBezier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  __int128 v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 24 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v9 = (unint64_t)a2;
      if (v9 <= v7)
      {
        v21 = *(WTF **)a1;
        return (char *)v21 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (v9 < 0x15)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 20;
        goto LABEL_32;
      }
      if (v9 < 0xAAAAAAB)
      {
        v10 = 24 * v9;
        v11 = WTF::fastMalloc((WTF *)(24 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)a1 = v11;
LABEL_32:
        v22 = 0;
        do
        {
          v23 = v11 + v22;
          v24 = *(_OWORD *)((char *)v5 + v22);
          *(_QWORD *)(v23 + 16) = *(_QWORD *)((char *)v5 + v22 + 16);
          *(_OWORD *)v23 = v24;
          v22 += 24;
        }
        while (24 * v6 != v22);
        v21 = *(WTF **)a1;
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (v21 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
          v21 = *(WTF **)a1;
        }
        return (char *)v21 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_41:
      __break(0xC471u);
      JUMPOUT(0x1961B03B4);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  if (v14 > v12)
  {
    v15 = *(unsigned int *)(a1 + 12);
    if (v14 < 0x15)
    {
      v17 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 20;
      if (!(_DWORD)v15)
        goto LABEL_25;
    }
    else
    {
      if (v14 >= 0xAAAAAAB)
        goto LABEL_41;
      v16 = 24 * v14;
      v17 = WTF::fastMalloc((WTF *)(24 * v14));
      *(_DWORD *)(a1 + 8) = (v16 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v17;
      if (!(_DWORD)v15)
        goto LABEL_25;
    }
    v18 = 24 * v15;
    v19 = v5;
    do
    {
      v20 = *(_OWORD *)v19;
      *(_QWORD *)(v17 + 16) = *((_QWORD *)v19 + 2);
      *(_OWORD *)v17 = v20;
      v17 += 24;
      v19 = (WTF *)((char *)v19 + 24);
      v18 -= 24;
    }
    while (v18);
LABEL_25:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return (char *)v3;
}

char *WTF::Vector<WebCore::CubicBezier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  WTF *v19;
  __int128 v20;
  __int128 v21;
  WTF *v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 32 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v22 = *(WTF **)a1;
        return (char *)v22 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
      }
      if (v10 < 0x15)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 20;
        goto LABEL_34;
      }
      if (!(v10 >> 27))
      {
        v11 = WTF::fastMalloc((WTF *)(32 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_34:
        v23 = 0;
        do
        {
          v24 = (_OWORD *)(v11 + v23);
          v25 = *(_OWORD *)((char *)v5 + v23 + 16);
          *v24 = *(_OWORD *)((char *)v5 + v23);
          v24[1] = v25;
          v23 += 32;
        }
        while (32 * v6 != v23);
        v22 = *(WTF **)a1;
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (v22 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
          v22 = *(WTF **)a1;
        }
        return (char *)v22 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x1961B0580);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x15)
    {
      v17 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 20;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    else
    {
      if (v15 >> 27)
        goto LABEL_43;
      v17 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    v18 = 32 * v16;
    v19 = v5;
    do
    {
      v20 = *(_OWORD *)v19;
      v21 = *((_OWORD *)v19 + 1);
      v19 = (WTF *)((char *)v19 + 32);
      *v17 = v20;
      v17[1] = v21;
      v17 += 2;
      v18 -= 32;
    }
    while (v18);
LABEL_27:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return (char *)v3;
}

void WebCore::convertImagePixels(unsigned __int8 *a1, unsigned __int8 *a2, int *a3)
{
  vImagePixelCount v5;
  size_t v6;
  void *v7;
  size_t v8;
  void *v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  CGBitmapInfo v14;
  int v15;
  CGColorSpace *v16;
  int v17;
  BOOL v18;
  CGBitmapInfo v19;
  int v20;
  CGColorSpace *v21;
  vImageConverter *v22;
  vImageConverter *v23;
  int *v24;
  vImage_Error error;
  vImage_CGImageFormat destFormat;
  vImage_CGImageFormat permuteMap;
  vImage_Buffer dest;
  vImage_Buffer src;

  if (*a1 == *a2 && a1[1] == a2[1])
  {
    v24 = a3;
    v11 = CGColorSpaceEqualToColorSpace();
    a3 = v24;
    if (v11)
    {
      if (*a1)
        WebCore::convertImagePixelsUnaccelerated<&void WebCore::convertSinglePixelUnpremultipliedToUnpremultiplied<(WebCore::PixelFormatConversion)0>>((uint64_t)a1, (uint64_t)a2, v24);
      else
        WebCore::convertImagePixelsUnaccelerated<&void WebCore::convertSinglePixelPremultipliedToPremultiplied<(WebCore::PixelFormatConversion)0>>((uint64_t)a1, (uint64_t)a2, v24);
      return;
    }
  }
  v5 = a3[1];
  v6 = *((unsigned int *)a1 + 4);
  v7 = (void *)*((_QWORD *)a1 + 3);
  src.width = *a3;
  src.rowBytes = v6;
  src.data = v7;
  src.height = v5;
  v8 = *((unsigned int *)a2 + 4);
  v9 = (void *)*((_QWORD *)a2 + 3);
  dest.width = src.width;
  dest.rowBytes = v8;
  dest.data = v9;
  dest.height = v5;
  if ((CGColorSpaceEqualToColorSpace() & 1) != 0)
  {
    v10 = *a2;
    if (*a1 != v10)
    {
      if (v10 == 1)
        vImageUnpremultiplyData_RGBA8888(&src, &dest, 0);
      else
        vImagePremultiplyData_RGBA8888(&src, &dest, 0);
      src = dest;
    }
    if (a1[1] != a2[1])
    {
      permuteMap.bitsPerComponent = 50331906;
      vImagePermuteChannels_ARGB8888(&src, &dest, (const uint8_t *)&permuteMap, 0);
    }
    return;
  }
  *(_QWORD *)&permuteMap.renderingIntent = 0;
  v12 = *a1;
  if (a1[1] == 2)
  {
    v13 = v12 == 0;
    v14 = 8196;
    v15 = 8194;
  }
  else
  {
    if (a1[1])
    {
      v14 = 8196;
      goto LABEL_21;
    }
    v13 = v12 == 0;
    v14 = 16387;
    v15 = 16385;
  }
  if (v13)
    v14 = v15;
LABEL_21:
  v16 = (CGColorSpace *)*((_QWORD *)a1 + 1);
  *(_QWORD *)&permuteMap.bitsPerComponent = 0x2000000008;
  permuteMap.colorSpace = v16;
  permuteMap.bitmapInfo = v14;
  *(const CGFloat **)((char *)&permuteMap.decode + 4) = 0;
  *(_QWORD *)&permuteMap.version = 0;
  *(_QWORD *)&destFormat.renderingIntent = 0;
  v17 = *a2;
  if (a2[1] == 2)
  {
    v18 = v17 == 0;
    v19 = 8196;
    v20 = 8194;
LABEL_26:
    if (v18)
      v19 = v20;
    goto LABEL_28;
  }
  if (!a2[1])
  {
    v18 = v17 == 0;
    v19 = 16387;
    v20 = 16385;
    goto LABEL_26;
  }
  v19 = 8196;
LABEL_28:
  v21 = (CGColorSpace *)*((_QWORD *)a2 + 1);
  *(_QWORD *)&destFormat.bitsPerComponent = 0x2000000008;
  destFormat.colorSpace = v21;
  destFormat.bitmapInfo = v19;
  *(_OWORD *)&destFormat.version = 0uLL;
  error = 0;
  v22 = vImageConverter_CreateWithCGImageFormat(&permuteMap, &destFormat, 0, 0, &error);
  v23 = v22;
  if (!error)
    vImageConvert_AnyToAny(v22, &src, &dest, 0, 0);
  if (v23)
    CFRelease(v23);
}

uint64_t WebCore::convertImagePixelsUnaccelerated<&void WebCore::convertSinglePixelPremultipliedToPremultiplied<(WebCore::PixelFormatConversion)0>>(uint64_t result, uint64_t a2, int *a3)
{
  uint64_t v3;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v3 = *a3;
  if (a3[1] >= 1 && (_DWORD)v3 != 0)
  {
    v5 = 0;
    v6 = 4 * v3;
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_QWORD *)(result + 24);
    do
    {
      v9 = 0;
      do
      {
        if (*(_BYTE *)(v8 + v9 + 3))
          v10 = *(_DWORD *)(v8 + v9);
        else
          v10 = 0;
        *(_DWORD *)(v7 + v9) = v10;
        v9 += 4;
      }
      while (v9 < v6);
      v8 += *(unsigned int *)(result + 16);
      v7 += *(unsigned int *)(a2 + 16);
      ++v5;
    }
    while (v5 < a3[1]);
  }
  return result;
}

uint64_t WebCore::convertImagePixelsUnaccelerated<&void WebCore::convertSinglePixelUnpremultipliedToUnpremultiplied<(WebCore::PixelFormatConversion)0>>(uint64_t result, uint64_t a2, int *a3)
{
  uint64_t v3;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *a3;
  if (a3[1] >= 1 && (_DWORD)v3 != 0)
  {
    v5 = 0;
    v6 = 4 * v3;
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_QWORD *)(result + 24);
    do
    {
      v9 = 0;
      do
      {
        *(_DWORD *)(v7 + v9) = *(_DWORD *)(v8 + v9);
        v9 += 4;
      }
      while (v9 < v6);
      v8 += *(unsigned int *)(result + 16);
      v7 += *(unsigned int *)(a2 + 16);
      ++v5;
    }
    while (v5 < a3[1]);
  }
  return result;
}

uint64_t WebCore::copyRows(uint64_t this, char *__src, const unsigned __int8 *a3, char *__dst, unsigned __int8 *a5, size_t __len)
{
  int v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = (int)a5;
  v7 = __dst;
  v8 = __src;
  if ((_DWORD)this == (_DWORD)a3 && (_DWORD)__len == (_DWORD)this)
  {
    v9 = ((_DWORD)a5 * this);
    if ((_DWORD)v9)
      return (uint64_t)memmove(__dst, __src, v9);
  }
  else if ((_DWORD)a5 && (_DWORD)__len)
  {
    v10 = __len;
    v11 = this;
    v12 = a3;
    do
    {
      this = (uint64_t)memmove(v7, v8, v10);
      v8 += v11;
      v7 += v12;
      --v6;
    }
    while (v6);
  }
  return this;
}

_QWORD *WebCore::PlatformTimeRanges::PlatformTimeRanges(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

WebCore::PlatformTimeRanges *WebCore::PlatformTimeRanges::PlatformTimeRanges(WebCore::PlatformTimeRanges *this, const WTF::MediaTime *a2, const WTF::MediaTime *a3)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  WebCore::PlatformTimeRanges::add(this, (__int128 *)a2, (__int128 *)a3, 0);
  return this;
}

{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  WebCore::PlatformTimeRanges::add(this, (__int128 *)a2, (__int128 *)a3, 0);
  return this;
}

__n128 WebCore::PlatformTimeRanges::add(WebCore::PlatformTimeRanges *this, __int128 *a2, __int128 *a3, int a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::MediaTime *v10;
  uint64_t v11;
  uint64_t v12;
  const WTF::MediaTime *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  WTF::MediaTime *v25;
  WTF::MediaTime *v26;
  const WTF::MediaTime *v27;
  const WTF::MediaTime *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  __n128 result;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  v7 = *a2;
  v47 = *a3;
  v48 = v7;
  if (a4 == 1)
  {
    *(_QWORD *)&v49 = WebCore::PlatformTimeRanges::nearest(this, (const WTF::MediaTime *)&v48);
    *((_QWORD *)&v49 + 1) = v8;
    if ((v8 & 0x100000000) != 0)
    {
      *(_QWORD *)&v43 = WTF::MediaTime::operator-();
      *((_QWORD *)&v43 + 1) = v9;
      v10 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v43);
      v46 = xmmword_1969F7D70;
      if (WTF::MediaTime::isBetween((WTF::MediaTime *)&v43, v10, (const WTF::MediaTime *)&v46))
      {
        *(_QWORD *)&v48 = v49;
        *(_QWORD *)((char *)&v48 + 5) = *(_QWORD *)((char *)&v49 + 5);
      }
    }
    *(_QWORD *)&v43 = WebCore::PlatformTimeRanges::nearest(this, (const WTF::MediaTime *)&v47);
    *((_QWORD *)&v43 + 1) = v11;
    if ((v11 & 0x100000000) != 0)
    {
      *(_QWORD *)&v46 = WTF::MediaTime::operator-();
      *((_QWORD *)&v46 + 1) = v12;
      v13 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v46);
      v45 = xmmword_1969F7D70;
      if (WTF::MediaTime::isBetween((WTF::MediaTime *)&v46, v13, (const WTF::MediaTime *)&v45))
      {
        *(_QWORD *)&v47 = v43;
        *(_QWORD *)((char *)&v47 + 5) = *(_QWORD *)((char *)&v43 + 5);
      }
    }
  }
  *(_QWORD *)&v43 = v48;
  *(_QWORD *)((char *)&v43 + 5) = *(_QWORD *)((char *)&v48 + 5);
  *(_QWORD *)&v44 = v47;
  *(_QWORD *)((char *)&v44 + 5) = *(_QWORD *)((char *)&v47 + 5);
  v14 = *((unsigned int *)this + 3);
  if ((_DWORD)v14
    && (v15 = *(_QWORD *)((char *)a2 + 5),
        v16 = *(_QWORD *)a3,
        *(_QWORD *)&v49 = *(_QWORD *)a2,
        *(_QWORD *)((char *)&v49 + 5) = v15,
        *(_QWORD *)&v50 = v16,
        *(_QWORD *)((char *)&v50 + 5) = *(_QWORD *)((char *)a3 + 5),
        v17 = v14 - 1,
        (unint64_t)(v14 - 1) >= 2))
  {
    v18 = 0;
    v19 = 0;
    v20 = v17 >> 1;
    do
    {
      if (v20 >= *((unsigned int *)this + 3))
      {
LABEL_67:
        __break(0xC471u);
        JUMPOUT(0x1961B0E98);
      }
      v21 = WTF::MediaTime::compare((WTF::MediaTime *)&v49, (const WTF::MediaTime *)(*(_QWORD *)this + 32 * v20 + 16));
      if (v21 < 0)
        v17 = v20 - 1;
      else
        v19 = v20 + 1;
      if (v21 >= 0)
        v18 = v20;
      v20 = v19 + ((v17 - v19) >> 1);
    }
    while (v17 > v19 && v20 != 0);
    LODWORD(v14) = *((_DWORD *)this + 3);
  }
  else
  {
    v18 = 0;
  }
  if (v18 < v14)
  {
    while (1)
    {
      v23 = *(_QWORD *)this + 32 * v18;
      if ((int)WTF::MediaTime::compare((WTF::MediaTime *)&v43, (const WTF::MediaTime *)v23) <= 0
        && WTF::MediaTime::compare((WTF::MediaTime *)v23, (const WTF::MediaTime *)&v44) == -1
        || (int)WTF::MediaTime::compare((WTF::MediaTime *)&v43, (const WTF::MediaTime *)(v23 + 16)) <= 0
        && WTF::MediaTime::compare((WTF::MediaTime *)(v23 + 16), (const WTF::MediaTime *)&v44) == -1
        || (int)WTF::MediaTime::compare((WTF::MediaTime *)v23, (const WTF::MediaTime *)&v43) <= 0
        && WTF::MediaTime::compare((WTF::MediaTime *)&v43, (const WTF::MediaTime *)(v23 + 16)) == -1)
      {
        goto LABEL_40;
      }
      if (v18 >= *((unsigned int *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1961B0EA8);
      }
      v24 = *(_QWORD *)this + 32 * v18;
      if (!WTF::MediaTime::compare((WTF::MediaTime *)v24, (const WTF::MediaTime *)&v44)
        || !WTF::MediaTime::compare((WTF::MediaTime *)(v24 + 16), (const WTF::MediaTime *)&v43))
      {
LABEL_40:
        if (v18 >= *((unsigned int *)this + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1961B0EA0);
        }
        v25 = (WTF::MediaTime *)(*(_QWORD *)this + 32 * v18);
        if (WTF::MediaTime::compare(v25, (const WTF::MediaTime *)&v43) == -1)
          v26 = v25;
        else
          v26 = (WTF::MediaTime *)&v43;
        *(_QWORD *)&v49 = *(_QWORD *)v26;
        *(_QWORD *)((char *)&v49 + 5) = *(_QWORD *)((char *)v26 + 5);
        v27 = (WTF::MediaTime *)((char *)v25 + 16);
        if (WTF::MediaTime::compare((WTF::MediaTime *)&v44, v27) == -1)
          v28 = v27;
        else
          v28 = (const WTF::MediaTime *)&v44;
        *(_QWORD *)&v50 = *(_QWORD *)v28;
        *(_QWORD *)((char *)&v50 + 5) = *(_QWORD *)((char *)v28 + 5);
        v43 = v49;
        v44 = v50;
        v29 = *(_QWORD *)this + 32 * v18;
        v30 = *((unsigned int *)this + 3);
        if (v29 + 32 != *(_QWORD *)this + 32 * v30)
        {
          memmove((void *)v29, (const void *)(v29 + 32), 32 * (v30 - v18) - 32);
          LODWORD(v30) = *((_DWORD *)this + 3);
        }
        *((_DWORD *)this + 3) = v30 - 1;
        --v18;
      }
      else if (v18)
      {
        if (v18 - 1 >= *((unsigned int *)this + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1961B0EB0);
        }
        if ((WTF::MediaTime::compare((WTF::MediaTime *)&v43, (const WTF::MediaTime *)(*(_QWORD *)this + 32 * (v18 - 1) + 16)) & 0x80000000) == 0)
        {
          if (v18 >= *((unsigned int *)this + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1961B0EB8);
          }
          if ((WTF::MediaTime::compare((WTF::MediaTime *)(*(_QWORD *)this + 32 * v18), (const WTF::MediaTime *)&v44) & 0x80000000) == 0)
            goto LABEL_54;
        }
      }
      else
      {
        if (!*((_DWORD *)this + 3))
          goto LABEL_67;
        v18 = 0;
        if ((WTF::MediaTime::compare(*(WTF::MediaTime **)this, (const WTF::MediaTime *)&v44) & 0x80000000) == 0)
        {
LABEL_54:
          LODWORD(v14) = *((_DWORD *)this + 3);
          break;
        }
      }
      if (++v18 >= *((unsigned int *)this + 3))
        goto LABEL_54;
    }
  }
  if ((_DWORD)v14 == *((_DWORD *)this + 2))
  {
    v31 = WTF::Vector<WebCore::Layout::InlineItemRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v14 + 1, (unint64_t)&v43);
    LODWORD(v14) = *((_DWORD *)this + 3);
  }
  else
  {
    v31 = (char *)&v43;
  }
  v32 = *(_QWORD *)this;
  v33 = (_OWORD *)(*(_QWORD *)this + 32 * v18);
  if (v18 != v14)
  {
    v34 = v14;
    v35 = v32 + 32 * v14;
    v36 = (_OWORD *)(v32 + ((v35 - (_QWORD)v33) & 0xFFFFFFFFFFFFFFE0) + 32 * v18);
    v37 = 32 * v18 - 32 * v34;
    v38 = (__int128 *)(v35 - 32);
    do
    {
      v39 = *v38;
      v40 = v38[1];
      v38 -= 2;
      *v36 = v39;
      v36[1] = v40;
      v36 -= 2;
      v37 += 32;
    }
    while (v37);
  }
  result = *(__n128 *)v31;
  v42 = *((_OWORD *)v31 + 1);
  *v33 = *(_OWORD *)v31;
  v33[1] = v42;
  ++*((_DWORD *)this + 3);
  return result;
}

uint64_t WebCore::PlatformTimeRanges::PlatformTimeRanges(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 8) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 12) = v2;
  return result;
}

{
  uint64_t v2;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 8) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 12) = v2;
  return result;
}

uint64_t *WebCore::PlatformTimeRanges::emptyRanges(WebCore::PlatformTimeRanges *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformTimeRanges::emptyRanges(void)::$_0 &&>>);
  }
  return &WebCore::PlatformTimeRanges::emptyRanges(void)::emptyRanges;
}

uint64_t WebCore::PlatformTimeRanges::timeFudgeFactor(WebCore::PlatformTimeRanges *this)
{
  return 2002;
}

WTF *WebCore::PlatformTimeRanges::invert(WebCore::PlatformTimeRanges *this)
{
  WTF::MediaTime *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 *v7;
  WTF *result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  v2 = (WTF::MediaTime *)WTF::MediaTime::positiveInfiniteTime(this);
  v12 = *(_OWORD *)v2;
  v11 = *(_OWORD *)WTF::MediaTime::negativeInfiniteTime(v2);
  if (!*((_DWORD *)this + 3))
  {
    v7 = &v11;
    goto LABEL_12;
  }
  v10 = *(_OWORD *)*(_QWORD *)this;
  if (WTF::MediaTime::compare((WTF::MediaTime *)&v10, (const WTF::MediaTime *)&v11))
    WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v13, &v11, &v10, 0);
  v3 = *((unsigned int *)this + 3);
  if (v3 >= 2)
  {
    v4 = 1;
    v5 = 32;
    while (v4 - 1 < v3)
    {
      WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v13, (__int128 *)(*(_QWORD *)this + v5 - 16), (__int128 *)(*(_QWORD *)this + v5), 0);
      ++v4;
      v3 = *((unsigned int *)this + 3);
      v5 += 32;
      if (v4 >= v3)
        goto LABEL_8;
    }
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x1961B10E4);
  }
LABEL_8:
  if (!(_DWORD)v3)
    goto LABEL_16;
  v9 = *(_OWORD *)(*(_QWORD *)this + 32 * v3 - 16);
  if (WTF::MediaTime::compare((WTF::MediaTime *)&v9, (const WTF::MediaTime *)&v12))
  {
    v7 = &v9;
LABEL_12:
    WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v13, v7, &v12, 0);
  }
  result = *(WTF **)this;
  *(_QWORD *)this = v13;
  *((_QWORD *)this + 1) = v14;
  if (result)
    return (WTF *)WTF::fastFree(result, v6);
  return result;
}

WTF *WebCore::PlatformTimeRanges::intersectWith(WTF *this, __int128 **a2)
{
  WebCore::PlatformTimeRanges *v2;
  uint64_t v3;
  WTF *v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  WTF *v12;
  int v13;
  int v14;

  v2 = this;
  v3 = *((unsigned int *)a2 + 3);
  v12 = 0;
  v13 = 0;
  v14 = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 27)
    {
      __break(0xC471u);
      return this;
    }
    v5 = (WTF *)WTF::fastMalloc((WTF *)(32 * v3));
    v13 = v3;
    v12 = v5;
    v6 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v6)
    {
      v7 = *a2;
      v8 = 32 * v6;
      do
      {
        v9 = *v7;
        v10 = v7[1];
        v7 += 2;
        *(_OWORD *)v5 = v9;
        *((_OWORD *)v5 + 1) = v10;
        v5 = (WTF *)((char *)v5 + 32);
        v8 -= 32;
      }
      while (v8);
    }
  }
  WebCore::PlatformTimeRanges::invert((WebCore::PlatformTimeRanges *)&v12);
  WebCore::PlatformTimeRanges::invert(v2);
  WebCore::PlatformTimeRanges::unionWith((uint64_t)v2, (const WebCore::PlatformTimeRanges *)&v12);
  WebCore::PlatformTimeRanges::invert(v2);
  this = v12;
  if (v12)
    return (WTF *)WTF::fastFree(v12, v11);
  return this;
}

uint64_t WebCore::PlatformTimeRanges::unionWith(uint64_t this, const WebCore::PlatformTimeRanges *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  int32x2_t v13;
  WTF *v14;
  uint64_t v15;
  int32x2_t v16;

  v3 = this;
  v4 = *(unsigned int *)(this + 12);
  v15 = 0;
  v16.i32[0] = 0;
  v16.i32[1] = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 27)
    {
      __break(0xC471u);
      return this;
    }
    this = WTF::fastMalloc((WTF *)(32 * v4));
    v16.i32[0] = v4;
    v15 = this;
    v5 = *(unsigned int *)(v3 + 12);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = *(WTF **)v3;
      v8 = 32 * v5;
      do
      {
        v9 = (_OWORD *)(this + v6);
        v10 = *(_OWORD *)((char *)v7 + v6 + 16);
        *v9 = *(_OWORD *)((char *)v7 + v6);
        v9[1] = v10;
        v6 += 32;
      }
      while (v8 != v6);
    }
  }
  else
  {
    this = 0;
  }
  if (*((_DWORD *)a2 + 3))
  {
    v11 = 0;
    v12 = 16;
    do
    {
      WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v15, (__int128 *)(*(_QWORD *)a2 + v12 - 16), (__int128 *)(*(_QWORD *)a2 + v12), 0);
      ++v11;
      v12 += 32;
    }
    while (v11 < *((unsigned int *)a2 + 3));
    this = v15;
    v13 = v16;
  }
  else
  {
    v13 = vdup_n_s32(v4);
  }
  v14 = *(WTF **)v3;
  *(_QWORD *)v3 = this;
  *(int32x2_t *)(v3 + 8) = v13;
  if (v14)
    return WTF::fastFree(v14, a2);
  return this;
}

uint64_t WebCore::PlatformTimeRanges::operator+=(uint64_t a1, const WebCore::PlatformTimeRanges *a2)
{
  WebCore::PlatformTimeRanges::unionWith(a1, a2);
  return a1;
}

_QWORD **WebCore::PlatformTimeRanges::operator-=(_QWORD **result, uint64_t a2)
{
  uint64_t v2;
  WTF::MediaTime *v3;
  uint64_t v4;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v3 = *(WTF::MediaTime **)a2;
    v4 = 32 * v2;
    do
    {
      result = WebCore::PlatformTimeRanges::operator-=(result, v3);
      v3 = (WTF::MediaTime *)((char *)v3 + 32);
      v4 -= 32;
    }
    while (v4);
  }
  return result;
}

_QWORD **WebCore::PlatformTimeRanges::operator-=(_QWORD **a1, WTF::MediaTime *this)
{
  WTF::MediaTime *v4;
  WTF::MediaTime *v5;
  WTF::MediaTime *v6;
  uint64_t v7;
  const WTF::MediaTime *v8;
  WTF::MediaTime *v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  int v16;
  _OWORD *v17;
  __int128 v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  unsigned int v28;
  void *v29;
  void *v30;
  __int128 v32;
  __int128 v33;
  WTF *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;

  v4 = (WTF::MediaTime *)((char *)this + 16);
  if (!WTF::MediaTime::compare(this, (WTF::MediaTime *)((char *)this + 16)) || !*((_DWORD *)a1 + 3))
    return a1;
  v5 = (WTF::MediaTime *)*a1;
  if (WTF::MediaTime::compare((WTF::MediaTime *)*a1, this) == -1)
    v6 = this;
  else
    v6 = v5;
  v37 = *(_OWORD *)v6;
  v7 = *((unsigned int *)a1 + 3);
  if (!(_DWORD)v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1961B1564);
  }
  v8 = (const WTF::MediaTime *)&(*a1)[4 * v7 - 2];
  if (WTF::MediaTime::compare(v4, v8) == -1)
    v9 = v4;
  else
    v9 = v8;
  v36 = *(_OWORD *)v9;
  v10 = WTF::fastMalloc((WTF *)0x40);
  v35 = 0x200000002;
  v34 = (WTF *)v10;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_DWORD *)(v10 + 8) = 10000000;
  *(_BYTE *)(v10 + 12) = 1;
  *(_DWORD *)(v10 + 24) = 10000000;
  *(_BYTE *)(v10 + 28) = 1;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_DWORD *)(v10 + 40) = 10000000;
  *(_BYTE *)(v10 + 44) = 1;
  *(_DWORD *)(v10 + 56) = 10000000;
  *(_BYTE *)(v10 + 60) = 1;
  if (!*((_DWORD *)a1 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x1961B156CLL);
  }
  v11 = (WTF *)v10;
  v12 = WTF::MediaTime::compare((WTF::MediaTime *)*a1, (const WTF::MediaTime *)&v37);
  v13 = *((_DWORD *)a1 + 3);
  if (v12)
  {
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x1961B1574);
    }
    v14 = *(_QWORD *)((char *)*a1 + 5);
    *(_QWORD *)&v32 = **a1;
    *(_QWORD *)((char *)&v32 + 5) = v14;
    *(_QWORD *)&v33 = v37;
    *(_QWORD *)((char *)&v33 + 5) = *(_QWORD *)((char *)&v37 + 5);
    v15 = WTF::Vector<WebCore::Layout::InlineItemRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v34, 3uLL, (unint64_t)&v32);
    v16 = HIDWORD(v35);
    v11 = v34;
    v17 = (_OWORD *)((char *)v34 + 32 * HIDWORD(v35));
    v18 = *((_OWORD *)v15 + 1);
    *v17 = *(_OWORD *)v15;
    v17[1] = v18;
    v13 = *((_DWORD *)a1 + 3);
    v19 = v16 + 1;
    HIDWORD(v35) = v16 + 1;
    if (!v13)
      goto LABEL_28;
  }
  else
  {
    v19 = 2;
    if (!v13)
      goto LABEL_28;
  }
  if (WTF::MediaTime::compare((WTF::MediaTime *)&v36, (const WTF::MediaTime *)&(*a1)[4 * v13 - 2]))
  {
    *(_QWORD *)&v32 = v36;
    *(_QWORD *)((char *)&v32 + 5) = *(_QWORD *)((char *)&v36 + 5);
    v20 = *((unsigned int *)a1 + 3);
    if ((_DWORD)v20)
    {
      v21 = (uint64_t)&(*a1)[4 * v20];
      v22 = *(_QWORD *)(v21 - 11);
      *(_QWORD *)&v33 = *(_QWORD *)(v21 - 16);
      *(_QWORD *)((char *)&v33 + 5) = v22;
      if (v19 == (_DWORD)v35)
      {
        v23 = WTF::Vector<WebCore::Layout::InlineItemRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v34, v19 + 1, (unint64_t)&v32);
        v19 = HIDWORD(v35);
        v11 = v34;
        v24 = (_OWORD *)((char *)v34 + 32 * HIDWORD(v35));
        v25 = *((_OWORD *)v23 + 1);
        *v24 = *(_OWORD *)v23;
        v24[1] = v25;
      }
      else
      {
        v26 = v33;
        v27 = (_OWORD *)((char *)v11 + 32 * v19);
        *v27 = v32;
        v27[1] = v26;
      }
      ++v19;
      goto LABEL_22;
    }
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x1961B14FCLL);
  }
LABEL_22:
  *(_QWORD *)&v32 = v11;
  v28 = v35;
  v34 = 0;
  v35 = 0;
  *((_QWORD *)&v32 + 1) = __PAIR64__(v19, v28);
  WebCore::PlatformTimeRanges::intersectWith((WTF *)a1, (__int128 **)&v32);
  *(_QWORD *)&v32 = 0;
  DWORD2(v32) = 0;
  WTF::fastFree(v11, v29);
  if (v34)
    WTF::fastFree(v34, v30);
  return a1;
}

uint64_t WebCore::PlatformTimeRanges::start(WebCore::PlatformTimeRanges *this, unsigned int a2)
{
  uint64_t v2;

  if (*((_DWORD *)this + 3) <= a2)
    v2 = WTF::MediaTime::zeroTime(this);
  else
    v2 = *(_QWORD *)this + 32 * a2;
  return *(_QWORD *)v2;
}

uint64_t WebCore::PlatformTimeRanges::start(WebCore::PlatformTimeRanges *this, unsigned int a2, BOOL *a3)
{
  uint64_t v3;

  if (*((_DWORD *)this + 3) <= a2)
  {
    *a3 = 0;
    v3 = WTF::MediaTime::zeroTime(this);
  }
  else
  {
    *a3 = 1;
    v3 = *(_QWORD *)this + 32 * a2;
  }
  return *(_QWORD *)v3;
}

uint64_t WebCore::PlatformTimeRanges::end(WebCore::PlatformTimeRanges *this, unsigned int a2)
{
  uint64_t v2;

  if (*((_DWORD *)this + 3) <= a2)
    v2 = WTF::MediaTime::zeroTime(this);
  else
    v2 = *(_QWORD *)this + 32 * a2 + 16;
  return *(_QWORD *)v2;
}

uint64_t WebCore::PlatformTimeRanges::end(WebCore::PlatformTimeRanges *this, unsigned int a2, BOOL *a3)
{
  uint64_t v3;

  if (*((_DWORD *)this + 3) <= a2)
  {
    *a3 = 0;
    v3 = WTF::MediaTime::zeroTime(this);
  }
  else
  {
    *a3 = 1;
    v3 = *(_QWORD *)this + 32 * a2 + 16;
  }
  return *(_QWORD *)v3;
}

uint64_t WebCore::PlatformTimeRanges::duration(WebCore::PlatformTimeRanges *this, unsigned int a2)
{
  if (*((_DWORD *)this + 3) <= a2)
    return *(_QWORD *)WTF::MediaTime::invalidTime(this);
  else
    return WTF::MediaTime::operator-();
}

uint64_t WebCore::PlatformTimeRanges::maximumBufferedTime(WebCore::PlatformTimeRanges *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 3);
  if (v1)
    v2 = *(_QWORD *)this + 32 * (v1 - 1) + 16;
  else
    v2 = WTF::MediaTime::invalidTime(this);
  return *(_QWORD *)v2;
}

uint64_t WebCore::PlatformTimeRanges::minimumBufferedTime(WebCore::PlatformTimeRanges *this)
{
  uint64_t v1;

  if (*((_DWORD *)this + 3))
    v1 = *(_QWORD *)this;
  else
    v1 = WTF::MediaTime::invalidTime(this);
  return *(_QWORD *)v1;
}

uint64_t WebCore::PlatformTimeRanges::nearest(WebCore::PlatformTimeRanges *this, const WTF::MediaTime *a2)
{
  WTF::MediaTime *v4;
  WTF::MediaTime *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t i;
  unint64_t v11;
  WTF::MediaTime *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  v4 = (WTF::MediaTime *)WTF::MediaTime::positiveInfiniteTime(this);
  v24 = *(_OWORD *)v4;
  v5 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v4);
  v6 = *((unsigned int *)this + 3);
  if (!(_DWORD)v6)
    return *(_QWORD *)WTF::MediaTime::invalidTime(v5);
  v7 = 0;
  v8 = *(_QWORD *)v5;
  v9 = *((_QWORD *)v5 + 1);
  for (i = 16; ; i += 32)
  {
    v11 = *((unsigned int *)this + 3);
    if (v7 >= v11)
    {
      v12 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v5);
      v11 = *((unsigned int *)this + 3);
    }
    else
    {
      v12 = (WTF::MediaTime *)(*(_QWORD *)this + i - 16);
    }
    v23 = *(_OWORD *)v12;
    v13 = (uint64_t *)(v11 <= v7 ? WTF::MediaTime::zeroTime(v12) : *(_QWORD *)this + i);
    v14 = v13[1];
    v21 = *v13;
    v22 = v14;
    if ((WTF::MediaTime::compare(a2, (const WTF::MediaTime *)&v23) & 0x80000000) == 0
      && (int)WTF::MediaTime::compare(a2, (const WTF::MediaTime *)&v21) < 1)
    {
      break;
    }
    *(_QWORD *)&v19 = WTF::MediaTime::operator-();
    *((_QWORD *)&v19 + 1) = v15;
    *(_QWORD *)&v20 = WTF::abs();
    *((_QWORD *)&v20 + 1) = v16;
    if (WTF::MediaTime::compare((WTF::MediaTime *)&v20, (const WTF::MediaTime *)&v24) == -1)
    {
      v8 = v23;
      v9 = v9 & 0xFFFFFF0000000000 | DWORD2(v23) | ((unint64_t)BYTE12(v23) << 32);
      *(_QWORD *)&v24 = v20;
      *(_QWORD *)((char *)&v24 + 5) = *(_QWORD *)((char *)&v20 + 5);
    }
    WTF::MediaTime::operator-();
    *(_QWORD *)&v19 = WTF::abs();
    *((_QWORD *)&v19 + 1) = v17;
    v5 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)&v19, (const WTF::MediaTime *)&v24);
    if ((_DWORD)v5 == -1)
    {
      v8 = v21;
      v9 = v9 & 0xFFFFFF0000000000 | v22 | ((unint64_t)BYTE4(v22) << 32);
      *(_QWORD *)&v24 = v19;
      *(_QWORD *)((char *)&v24 + 5) = *(_QWORD *)((char *)&v19 + 5);
    }
    if (v6 == ++v7)
      return v8;
  }
  return *(_QWORD *)a2;
}

unint64_t WebCore::PlatformTimeRanges::findLastRangeIndexBefore(unint64_t this, const WTF::MediaTime *a2, const WTF::MediaTime *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];

  v3 = *(unsigned int *)(this + 12);
  if ((_DWORD)v3
    && (v4 = *(_QWORD *)((char *)a2 + 5),
        v5 = *(_QWORD *)a3,
        v12[0] = *(_QWORD *)a2,
        *(_QWORD *)((char *)v12 + 5) = v4,
        v13[0] = v5,
        *(_QWORD *)((char *)v13 + 5) = *(_QWORD *)((char *)a3 + 5),
        v6 = v3 - 1,
        (unint64_t)(v3 - 1) >= 2))
  {
    v7 = this;
    v8 = 0;
    v9 = 0;
    v10 = v6 >> 1;
    while (v10 < *(unsigned int *)(v7 + 12))
    {
      this = WTF::MediaTime::compare((WTF::MediaTime *)v12, (const WTF::MediaTime *)(*(_QWORD *)v7 + 32 * v10 + 16));
      if ((this & 0x80000000) != 0)
        v6 = v10 - 1;
      else
        v9 = v10 + 1;
      if ((this & 0x80000000) == 0)
        v8 = v10;
      v10 = v9 + ((v6 - v9) >> 1);
      if (v6 <= v9 || v10 == 0)
        return v8;
    }
    __break(0xC471u);
  }
  else
  {
    return 0;
  }
  return this;
}

uint64_t WebCore::PlatformTimeRanges::clear(uint64_t this, void *a2)
{
  WTF *v2;

  if (*(_DWORD *)(this + 8))
  {
    if (*(_DWORD *)(this + 12))
      *(_DWORD *)(this + 12) = 0;
    v2 = *(WTF **)this;
    if (*(_QWORD *)this)
    {
      *(_QWORD *)this = 0;
      *(_DWORD *)(this + 8) = 0;
      return WTF::fastFree(v2, a2);
    }
  }
  return this;
}

uint64_t WebCore::PlatformTimeRanges::contain(WebCore::PlatformTimeRanges *this, const WTF::MediaTime *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD v12[2];
  __int128 v13;

  if (!*((_DWORD *)this + 3))
    return 0;
  v4 = 0;
  v5 = 0;
  while (1)
  {
    v13 = *(_OWORD *)(*(_QWORD *)this + v4);
    v6 = WTF::MediaTime::compare(a2, (const WTF::MediaTime *)&v13);
    if ((v6 & 0x80000000) == 0)
    {
      if (v5 >= *((unsigned int *)this + 3))
      {
        v8 = (_QWORD *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v6);
        v9 = v8 + 1;
      }
      else
      {
        v7 = *(_QWORD *)this + v4;
        v8 = (_QWORD *)(v7 + 16);
        v9 = (uint64_t *)(v7 + 24);
      }
      v10 = *v9;
      v12[0] = *v8;
      v12[1] = v10;
      if ((int)WTF::MediaTime::compare(a2, (const WTF::MediaTime *)v12) < 1)
        break;
    }
    ++v5;
    v4 += 32;
    if (v5 >= *((unsigned int *)this + 3))
      return 0;
  }
  return 1;
}

unint64_t WebCore::PlatformTimeRanges::find(WebCore::PlatformTimeRanges *this, const WTF::MediaTime *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD v12[2];
  __int128 v13;

  if (!*((_DWORD *)this + 3))
    return -1;
  v4 = 0;
  v5 = 0;
  while (1)
  {
    v13 = *(_OWORD *)(*(_QWORD *)this + v4);
    v6 = WTF::MediaTime::compare(a2, (const WTF::MediaTime *)&v13);
    if ((v6 & 0x80000000) == 0)
    {
      if (v5 >= *((unsigned int *)this + 3))
      {
        v8 = (_QWORD *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v6);
        v9 = v8 + 1;
      }
      else
      {
        v7 = *(_QWORD *)this + v4;
        v8 = (_QWORD *)(v7 + 16);
        v9 = (uint64_t *)(v7 + 24);
      }
      v10 = *v9;
      v12[0] = *v8;
      v12[1] = v10;
      if ((int)WTF::MediaTime::compare(a2, (const WTF::MediaTime *)v12) < 1)
        break;
    }
    ++v5;
    v4 += 32;
    if (v5 >= *((unsigned int *)this + 3))
      return -1;
  }
  return v5;
}

unint64_t WebCore::PlatformTimeRanges::findWithEpsilon(WebCore::PlatformTimeRanges *this, const WTF::MediaTime *a2, const WTF::MediaTime *a3)
{
  unint64_t v5;
  uint64_t i;
  WTF::MediaTime *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[2];
  __int128 v15;
  _QWORD v16[2];

  if (!*((_DWORD *)this + 3))
    return -1;
  v5 = 0;
  for (i = 16; ; i += 32)
  {
    v7 = (WTF::MediaTime *)WTF::MediaTime::operator+();
    v16[0] = v7;
    v16[1] = v8;
    v9 = (__int128 *)(v5 >= *((unsigned int *)this + 3) ? WTF::MediaTime::zeroTime(v7) : *(_QWORD *)this + i - 16);
    v15 = *v9;
    v10 = WTF::MediaTime::compare((WTF::MediaTime *)v16, (const WTF::MediaTime *)&v15);
    if ((v10 & 0x80000000) == 0)
    {
      v11 = (_QWORD *)(v5 >= *((unsigned int *)this + 3)
                     ? WTF::MediaTime::zeroTime((WTF::MediaTime *)v10)
                     : *(_QWORD *)this + i);
      v12 = v11[1];
      v14[0] = *v11;
      v14[1] = v12;
      if (WTF::MediaTime::compare(a2, (const WTF::MediaTime *)v14) == -1)
        break;
    }
    if (++v5 >= *((unsigned int *)this + 3))
      return -1;
  }
  return v5;
}

uint64_t WebCore::PlatformTimeRanges::copyWithEpsilon@<X0>(uint64_t this@<X0>, unint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  __int128 *v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  int v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v3 = this;
  v4 = a2;
  LODWORD(a2) = *(_DWORD *)(this + 12);
  if (a2 > 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v36 = 0;
    v37 = 0;
    v13 = 1;
    v14 = 16;
    do
    {
      if (v13 - 1 >= a2)
        goto LABEL_26;
      v15 = (_QWORD *)(*(_QWORD *)v3 + v14);
      *(_QWORD *)&v34 = WTF::MediaTime::operator+();
      *((_QWORD *)&v34 + 1) = v16;
      if (v13 >= *(unsigned int *)(v3 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x1961B1E8CLL);
      }
      this = WTF::MediaTime::compare((WTF::MediaTime *)&v34, (const WTF::MediaTime *)(*(_QWORD *)v3 + v14 + 16));
      if ((_DWORD)this == -1)
      {
        if (*(_DWORD *)(v3 + 12) <= v12)
        {
          __break(0xC471u);
          JUMPOUT(0x1961B1E94);
        }
        v17 = (_QWORD *)(*(_QWORD *)v3 + 32 * v12);
        v18 = *(_QWORD *)((char *)v17 + 5);
        *(_QWORD *)&v34 = *v17;
        *(_QWORD *)((char *)&v34 + 5) = v18;
        v19 = *(_QWORD *)((char *)v15 + 5);
        *(_QWORD *)&v35 = *v15;
        *(_QWORD *)((char *)&v35 + 5) = v19;
        if (v11 == (_DWORD)v37)
        {
          this = (uint64_t)WTF::Vector<WebCore::Layout::InlineItemRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, v11 + 1, (unint64_t)&v34);
          v11 = HIDWORD(v37);
          v10 = v36;
          v20 = (_OWORD *)(v36 + 32 * HIDWORD(v37));
          v21 = *(_OWORD *)(this + 16);
          *v20 = *(_OWORD *)this;
          v20[1] = v21;
        }
        else
        {
          v22 = v35;
          v23 = (_OWORD *)(v10 + 32 * v11);
          *v23 = v34;
          v23[1] = v22;
        }
        HIDWORD(v37) = ++v11;
        v12 = v13;
      }
      ++v13;
      a2 = *(unsigned int *)(v3 + 12);
      v14 += 32;
    }
    while (v13 < a2);
    if (a2 <= v12)
    {
LABEL_26:
      __break(0xC471u);
      JUMPOUT(0x1961B1E84);
    }
    v24 = *(__int128 **)v3;
    v25 = (_QWORD *)(*(_QWORD *)v3 + 32 * v12);
    v26 = *(_QWORD *)((char *)v25 + 5);
    *(_QWORD *)&v34 = *v25;
    *(_QWORD *)((char *)&v34 + 5) = v26;
    v27 = &v24[2 * (a2 - 1)];
    v28 = *(_QWORD *)((char *)v27 + 21);
    *(_QWORD *)&v35 = *((_QWORD *)v27 + 2);
    *(_QWORD *)((char *)&v35 + 5) = v28;
    v29 = v37;
    if (v11 == (_DWORD)v37)
    {
      this = (uint64_t)WTF::Vector<WebCore::Layout::InlineItemRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, v11 + 1, (unint64_t)&v34);
      v10 = v36;
      v29 = v37;
      v11 = HIDWORD(v37);
      v30 = (_OWORD *)(v36 + 32 * HIDWORD(v37));
      v31 = *(_OWORD *)(this + 16);
      *v30 = *(_OWORD *)this;
      v30[1] = v31;
    }
    else
    {
      v32 = v35;
      v33 = (_OWORD *)(v10 + 32 * v11);
      *v33 = v34;
      v33[1] = v32;
    }
    *(_QWORD *)v4 = v10;
    *(_DWORD *)(v4 + 8) = v29;
    *(_DWORD *)(v4 + 12) = v11 + 1;
  }
  else
  {
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 12) = a2;
    if ((_DWORD)a2)
    {
      this = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(v4 + 8) = 1;
      *(_QWORD *)v4 = this;
      v5 = *(unsigned int *)(v3 + 12);
      if ((_DWORD)v5)
      {
        v6 = *(__int128 **)v3;
        v7 = 32 * v5;
        do
        {
          v8 = *v6;
          v9 = v6[1];
          v6 += 2;
          *(_OWORD *)this = v8;
          *(_OWORD *)(this + 16) = v9;
          this += 32;
          v7 -= 32;
        }
        while (v7);
      }
    }
  }
  return this;
}

uint64_t WebCore::PlatformTimeRanges::totalDuration(WebCore::PlatformTimeRanges *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t i;
  uint64_t result;
  __int128 v6;

  v6 = *(_OWORD *)WTF::MediaTime::zeroTime(this);
  v2 = *((unsigned int *)this + 3);
  if (!(_DWORD)v2)
    return v6;
  v3 = 0;
  for (i = 0; i < v2; ++i)
  {
    if (i >= v2)
      WTF::MediaTime::zeroTime((WTF::MediaTime *)(*(_QWORD *)this + v3));
    WTF::MediaTime::operator-();
    WTF::abs();
    result = WTF::MediaTime::operator+();
    v2 = *((unsigned int *)this + 3);
    v3 += 32;
  }
  return result;
}

WTF::MediaTime *WebCore::PlatformTimeRanges::dump(WTF::MediaTime *result, uint64_t a2)
{
  unint64_t v2;
  WTF::MediaTime *v4;
  unint64_t v5;
  uint64_t v6;
  WTF::MediaTime *v7;

  LODWORD(v2) = *((_DWORD *)result + 3);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = 0;
    v6 = 24;
    do
    {
      if (v2 <= v5)
      {
        v7 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(result);
        LODWORD(v2) = *((_DWORD *)v4 + 3);
      }
      else
      {
        v7 = (WTF::MediaTime *)(*(_QWORD *)v4 + v6 - 24);
      }
      if (v2 <= v5)
        WTF::MediaTime::zeroTime(v7);
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      WTF::printInternal();
      WTF::MediaTime::dump();
      WTF::printInternal();
      WTF::MediaTime::dump();
      WTF::printInternal();
      result = (WTF::MediaTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      ++v5;
      v2 = *((unsigned int *)v4 + 3);
      v6 += 32;
    }
    while (v5 < v2);
  }
  return result;
}

WTF::StringImpl *WebCore::PlatformTimeRanges::toString@<X0>(WebCore::PlatformTimeRanges *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl **v2;
  WebCore::PlatformTimeRanges *v3;
  unint64_t v4;
  uint64_t v5;
  __int128 *v6;
  WTF::MediaTime *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _WORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _BYTE *v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  _QWORD v20[2];
  WTF::StringImpl *v21;
  __int128 v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  char v27;

  v2 = a2;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  LODWORD(a2) = *((_DWORD *)this + 3);
  if ((_DWORD)a2)
  {
    v3 = this;
    v4 = 0;
    v5 = 24;
    do
    {
      if (a2 <= v4)
        v6 = (__int128 *)WTF::MediaTime::zeroTime(this);
      else
        v6 = (__int128 *)(*(_QWORD *)v3 + v5 - 24);
      v22 = *v6;
      v7 = (WTF::MediaTime *)WTF::MediaTime::toString((WTF::MediaTime *)&v22);
      if (*((_DWORD *)v3 + 3) <= v4)
      {
        v9 = (uint64_t *)WTF::MediaTime::zeroTime(v7);
        v8 = v9 + 1;
      }
      else
      {
        v8 = (uint64_t *)(*(_QWORD *)v3 + v5);
        v9 = v8 - 1;
      }
      v10 = *v8;
      v20[0] = *v9;
      v20[1] = v10;
      WTF::MediaTime::toString((WTF::MediaTime *)v20);
      v11 = v23;
      v12 = v21;
      v13 = v25;
      if ((v25 || (v13 = v24) != 0) && (*((_BYTE *)v13 + 16) & 4) == 0
        || v23 && (*((_BYTE *)v23 + 16) & 4) == 0
        || v21 && (*((_BYTE *)v21 + 16) & 4) == 0)
      {
        v14 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v24);
        if (v14)
        {
          *v14 = 91;
          WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v14 + 1, (uint64_t)v11, (int8x16_t *)"..", 2, (uint64_t)v12, (int8x16_t *)"] ", 2);
        }
      }
      else
      {
        v17 = (_BYTE *)MEMORY[0x19AEA4824](&v24);
        if (v17)
        {
          *v17 = 91;
          WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v17 + 1, (uint64_t)v11, "..", 2u, (uint64_t)v12, "] ", 2u);
        }
      }
      v16 = v21;
      v21 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      this = v23;
      v23 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WebCore::PlatformTimeRanges *)WTF::StringImpl::destroy(this, v15);
        else
          *(_DWORD *)this -= 2;
      }
      ++v4;
      a2 = (WTF::StringImpl **)*((unsigned int *)v3 + 3);
      v5 += 32;
    }
    while (v4 < (unint64_t)a2);
    result = v24;
    if (v24)
      goto LABEL_32;
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v24);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v24);
  result = v24;
  if (v24)
LABEL_32:
    *(_DWORD *)result += 2;
  *v2 = result;
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, v15);
      result = v24;
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

__n128 WebCore::Region::Region(WebCore::Region *this, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *(__n128 *)this = *a2;
  *((_QWORD *)this + 2) = 0;
  return result;
}

_OWORD *WebCore::Region::Region(_OWORD *this, const WebCore::Region *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _OWORD *v4;

  *this = *(_OWORD *)a2;
  v2 = (uint64_t *)(this + 1);
  v3 = *((_QWORD *)a2 + 2);
  if (v3)
  {
    v4 = this;
    std::make_unique[abi:sn180100]<WebCore::Region::Shape,WebCore::Region::Shape&>(v3, v2);
    return v4;
  }
  else
  {
    *v2 = 0;
  }
  return this;
}

uint64_t WebCore::Region::contains(uint64_t this, const WebCore::IntPoint *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int *v8;
  int v9;
  int *v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_DWORD *)a2;
  if (*(_DWORD *)this > *(_DWORD *)a2)
    return 0;
  if (*(_DWORD *)(this + 8) + *(_DWORD *)this <= v2)
    return 0;
  v3 = *((_DWORD *)a2 + 1);
  v4 = *(_DWORD *)(this + 4);
  if (v4 > v3 || *(_DWORD *)(this + 12) + v4 <= v3)
    return 0;
  v5 = *(_QWORD *)(this + 16);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 + 156);
    if (v6 >= 2)
    {
      v7 = *(int **)(v5 + 144);
      v8 = &v7[4 * v6];
      v10 = v7 + 4;
      v9 = *v7;
      while (v9 <= v3)
      {
        v11 = v10;
        v9 = v7[4];
        if (v9 > v3)
        {
          v12 = *((_QWORD *)v7 + 1);
          v13 = *(unsigned int *)(v5 + 12);
          if (v12 != v13)
          {
            if (v12 >= v13)
            {
              __break(0xC471u);
              return this;
            }
            v14 = *((_QWORD *)v7 + 3);
            if (v12 != v14)
            {
              v15 = (int *)(*(_QWORD *)v5 + 4 * v12 + 4);
              if (v15 != (int *)(*(_QWORD *)v5 + 4 * v14))
              {
                v16 = 4 * v14 - 4 * v12 - 12;
                do
                {
                  if (*(v15 - 1) > v2)
                    break;
                  if (*v15 > v2)
                    return 1;
                  if (v16 == -4)
                    break;
                  v17 = v16;
                  v16 -= 8;
                  v15 += 2;
                }
                while (v17);
              }
            }
          }
        }
        this = 0;
        if (v11 != v8)
        {
          v10 = v11 + 4;
          v7 = v11;
          if (v11 + 4 != v8)
            continue;
        }
        return this;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t WebCore::Region::intersects(WebCore::Region *this, const WebCore::Region *a2)
{
  int v2;
  int v3;
  const WebCore::Region *v4;
  int v5;
  int v6;
  int v8;
  int v9;
  int v10;
  int v12;
  int v13;
  int v14;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  int v37;
  int v38;
  WTF *v39;
  WTF *v40;
  WTF *v41;
  WTF *v42;
  WTF *v43;
  BOOL v44;
  int v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  int v52;
  int v53;
  char *v55;
  WTF *v58;
  WTF *v59;
  WTF *v60;
  unsigned int v61;
  _DWORD v62[32];
  WTF *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  WTF *v69;
  uint64_t v70;
  _DWORD v71[32];
  WTF *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;

  v2 = *((_DWORD *)this + 2);
  if (v2 < 1)
    return 0;
  v3 = *((_DWORD *)this + 3);
  if (v3 < 1)
    return 0;
  v4 = a2;
  v5 = *((_DWORD *)a2 + 2);
  v6 = *((_DWORD *)a2 + 3);
  if (v5 < 1 || v6 < 1)
    return 0;
  v8 = *(_DWORD *)this;
  v9 = *(_DWORD *)a2 + v5;
  v10 = *(_DWORD *)this + v2;
  if (*(_DWORD *)this >= v9 || *(_DWORD *)a2 >= v10)
    return 0;
  v12 = *((_DWORD *)this + 1);
  v13 = *((_DWORD *)a2 + 1);
  v14 = v12 + v3;
  if (v12 >= v13 + v6 || v13 >= v14)
    return 0;
  v18 = *((_QWORD *)this + 2);
  if (v18)
  {
    v19 = *(unsigned int *)(v18 + 12);
    v20 = (WTF *)v71;
    v69 = (WTF *)v71;
    LODWORD(v70) = 32;
    HIDWORD(v70) = v19;
    if (v19 >= 0x21)
    {
      if (v19 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1961B29FCLL);
      }
      v20 = (WTF *)WTF::fastMalloc((WTF *)(4 * v19));
      LODWORD(v70) = v19;
      v69 = v20;
    }
    memcpy(v20, *(const void **)v18, 4 * *(unsigned int *)(v18 + 12));
    v21 = *(unsigned int *)(v18 + 156);
    v22 = (WTF *)&v74;
    v72 = (WTF *)&v74;
    LODWORD(v73) = 16;
    HIDWORD(v73) = v21;
    if (v21 >= 0x11)
    {
      if (v21 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1961B2A0CLL);
      }
      v22 = (WTF *)WTF::fastMalloc((WTF *)(16 * v21));
      LODWORD(v73) = v21;
      v72 = v22;
    }
    v23 = *(unsigned int *)(v18 + 156);
    if ((_DWORD)v23)
    {
      v24 = *(__int128 **)(v18 + 144);
      v25 = 16 * v23;
      do
      {
        v26 = *v24++;
        *(_OWORD *)v22 = v26;
        v22 = (WTF *)((char *)v22 + 16);
        v25 -= 16;
      }
      while (v25);
    }
  }
  else
  {
    if (!*((_QWORD *)a2 + 2))
      return 1;
    v69 = (WTF *)v71;
    v71[0] = v8;
    v71[1] = v10;
    v70 = 0x200000020;
    v72 = (WTF *)&v74;
    v74 = v12;
    v75 = 0;
    v76 = v14;
    v77 = 2;
    v73 = 0x200000010;
  }
  v27 = *((_QWORD *)v4 + 2);
  if (v27)
  {
    v28 = *(unsigned int *)(v27 + 12);
    v60 = (WTF *)v62;
    v61 = v28;
    v29 = (WTF *)v62;
    if (v28 >= 0x21)
    {
      if (v28 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1961B2A04);
      }
      v29 = (WTF *)WTF::fastMalloc((WTF *)(4 * v28));
      v60 = v29;
    }
    memcpy(v29, *(const void **)v27, 4 * *(unsigned int *)(v27 + 12));
    v30 = *(unsigned int *)(v27 + 156);
    v31 = (WTF *)&v65;
    v63 = (WTF *)&v65;
    LODWORD(v64) = 16;
    HIDWORD(v64) = v30;
    if (v30 >= 0x11)
    {
      if (v30 >> 28)
      {
LABEL_102:
        __break(0xC471u);
        JUMPOUT(0x1961B29ECLL);
      }
      v31 = (WTF *)WTF::fastMalloc((WTF *)(16 * v30));
      LODWORD(v64) = v30;
      v63 = v31;
    }
    v32 = *(unsigned int *)(v27 + 156);
    if ((_DWORD)v32)
    {
      v33 = *(__int128 **)(v27 + 144);
      v34 = 16 * v32;
      do
      {
        v35 = *v33++;
        *(_OWORD *)v31 = v35;
        v31 = (WTF *)((char *)v31 + 16);
        v34 -= 16;
      }
      while (v34);
      v31 = v63;
    }
  }
  else
  {
    v36 = *((_DWORD *)v4 + 1);
    v37 = *((_DWORD *)v4 + 3);
    v38 = *((_DWORD *)v4 + 2) + *(_DWORD *)v4;
    v60 = (WTF *)v62;
    v62[0] = *(_DWORD *)v4;
    v62[1] = v38;
    v61 = 2;
    v31 = (WTF *)&v65;
    v63 = (WTF *)&v65;
    v65 = v36;
    v66 = 0;
    v67 = v37 + v36;
    v68 = 2;
    v64 = 0x200000010;
  }
  if (HIDWORD(v73))
  {
    v39 = v72;
    v40 = (WTF *)((char *)v72 + 16 * HIDWORD(v73));
    v41 = (WTF *)((char *)v31 + 16 * HIDWORD(v64));
    v42 = v31;
    do
    {
      v43 = (WTF *)((char *)v39 + 16);
      v44 = (WTF *)((char *)v39 + 16) == v40 || v42 == v41;
      if (v44 || (WTF *)((char *)v42 + 16) == v41)
        break;
      a2 = (const WebCore::Region *)*((unsigned int *)v39 + 4);
      v45 = *((_DWORD *)v42 + 4);
      v46 = *((_QWORD *)v39 + 1);
      if (v46 == HIDWORD(v70))
      {
        v47 = 0;
        v48 = 0;
      }
      else
      {
        if (v46 >= HIDWORD(v70))
          goto LABEL_102;
        v47 = (char *)v69 + 4 * v46;
        v48 = (char *)v69 + 4 * *((_QWORD *)v39 + 3);
      }
      v49 = *((_QWORD *)v42 + 1);
      if (v49 == v61)
      {
        v50 = 0;
        v51 = 0;
      }
      else
      {
        if (v49 >= v61)
        {
          __break(0xC471u);
          JUMPOUT(0x1961B29F4);
        }
        v50 = (_DWORD *)((char *)v60 + 4 * v49);
        v51 = (_DWORD *)((char *)v60 + 4 * *((_QWORD *)v42 + 3));
      }
      if (v45 > *(_DWORD *)v39 && *(_DWORD *)v42 < (int)a2)
      {
        while (1)
        {
          if (v47 == v48 || v50 == v51)
            goto LABEL_61;
          v52 = *((_DWORD *)v47 + 1);
          v53 = v50[1];
          if (v53 > *(_DWORD *)v47 && *v50 < v52)
            break;
          v55 = v47 + 8;
          if (v53 >= v52)
            v47 += 8;
          if (v52 >= v53)
            v50 += 2;
          else
            v47 = v55;
        }
        v16 = 1;
        goto LABEL_72;
      }
LABEL_61:
      if (v45 >= (int)a2)
        v39 = (WTF *)((char *)v39 + 16);
      if ((int)a2 < v45)
        v39 = v43;
      else
        v42 = (WTF *)((char *)v42 + 16);
    }
    while (v39 != v40);
  }
  v16 = 0;
LABEL_72:
  if (&v65 != (int *)v31 && v31 != 0)
  {
    v63 = 0;
    LODWORD(v64) = 0;
    WTF::fastFree(v31, a2);
  }
  if (v62 != (_DWORD *)v60 && v60 != 0)
    WTF::fastFree(v60, a2);
  v58 = v72;
  if (&v74 != (int *)v72 && v72)
  {
    v72 = 0;
    LODWORD(v73) = 0;
    WTF::fastFree(v58, a2);
  }
  v59 = v69;
  if (v71 != (_DWORD *)v69 && v69)
  {
    v69 = 0;
    LODWORD(v70) = 0;
    WTF::fastFree(v59, a2);
  }
  return v16;
}

uint64_t *WebCore::Region::Shape::translate(uint64_t *this, const WebCore::IntSize *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _DWORD *v6;

  if (*((_DWORD *)this + 3))
  {
    v2 = 0;
    v3 = *this;
    do
      *(_DWORD *)(v3 + 4 * v2++) += *(_DWORD *)a2;
    while (v2 < *((unsigned int *)this + 3));
  }
  v4 = *((unsigned int *)this + 39);
  if ((_DWORD)v4)
  {
    v5 = *((_DWORD *)a2 + 1);
    v6 = (_DWORD *)this[18];
    do
    {
      *v6 += v5;
      v6 += 4;
      --v4;
    }
    while (v4);
  }
  return this;
}

uint64_t WebCore::Region::Shape::shapeOperation<WebCore::Region::Shape::UnionOperation>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, WebCore::Region::Shape *a3@<X8>)
{
  WebCore::Region::Shape *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  int v20;
  int *v21;
  int *v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  WTF *v33;
  char *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  WTF *v39;
  int v40;
  WTF *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  WTF *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  WebCore::Region::Shape *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int *v58;
  int v59;
  WTF *v60;
  uint64_t v61;
  _BYTE v62[136];

  v4 = a3;
  *(_QWORD *)a3 = (char *)a3 + 16;
  *((_QWORD *)a3 + 1) = 32;
  *((_QWORD *)a3 + 18) = (char *)a3 + 160;
  v5 = (uint64_t)a3 + 144;
  *((_QWORD *)a3 + 19) = 16;
  v6 = *(unsigned int *)(result + 156);
  if (!(_DWORD)v6)
  {
    WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v4, (const void **)a2);
    return WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v5, (const void **)(a2 + 144));
  }
  v56 = result;
  v7 = *(unsigned int **)(result + 144);
  v8 = &v7[4 * v6];
  v9 = *(unsigned int *)(a2 + 156);
  if (!(_DWORD)v9)
    goto LABEL_69;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v55 = v4;
  v14 = *(unsigned int **)(a2 + 144);
  v57 = v8;
  v58 = &v14[4 * v9];
  do
  {
    v15 = *v7;
    v16 = *v14;
    if ((int)v15 > (int)v16)
      goto LABEL_43;
    v17 = *((_QWORD *)v7 + 1);
    v18 = *(unsigned int *)(v56 + 12);
    if (v17 == v18)
    {
      v13 = 0;
      v12 = 0;
    }
    else
    {
      if (v17 >= v18)
      {
LABEL_99:
        __break(0xC471u);
        JUMPOUT(0x1961B30D8);
      }
      v13 = *(_QWORD *)v56 + 4 * v17;
      v12 = *(_QWORD *)v56 + 4 * *((_QWORD *)v7 + 3);
    }
    v7 += 4;
    if ((((_DWORD)v15 - (_DWORD)v16) & 0x80000000) == 0)
    {
LABEL_43:
      v36 = *((_QWORD *)v14 + 1);
      v37 = *(unsigned int *)(a2 + 12);
      if (v36 == v37)
      {
        v11 = 0;
        v10 = 0;
      }
      else
      {
        if (v36 >= v37)
        {
          __break(0xC471u);
          JUMPOUT(0x1961B30E0);
        }
        v11 = *(_QWORD *)a2 + 4 * v36;
        v10 = *(_QWORD *)a2 + 4 * *((_QWORD *)v14 + 3);
      }
      v14 += 4;
      v15 = v16;
    }
    v60 = (WTF *)v62;
    v61 = 32;
    v19 = v11 != v10;
    if (v13 == v12 || v11 == v10)
    {
      v31 = 0;
      if (v13 == v12)
      {
        v21 = (int *)v11;
        goto LABEL_41;
      }
      v22 = (int *)v13;
LABEL_25:
      v32 = ((v12 - (uint64_t)v22) >> 2) + v31;
      v33 = v60;
      if (v32 > v61)
      {
        v51 = v15;
        if (v32 < 0x21)
        {
          v41 = (WTF *)v62;
          v60 = (WTF *)v62;
          LODWORD(v61) = 32;
        }
        else
        {
          if (v32 >> 30)
          {
            __break(0xC471u);
            JUMPOUT(0x1961B30E8);
          }
          v41 = (WTF *)WTF::fastMalloc((WTF *)(4 * v32));
          LODWORD(v61) = ((v12 - (uint64_t)v22) >> 2) + v31;
          v60 = v41;
        }
        result = (uint64_t)memcpy(v41, v33, 4 * v31);
        v34 = (char *)v60;
        if (v62 == (_BYTE *)v33)
        {
          v15 = v51;
        }
        else
        {
          v15 = v51;
          if (v33)
          {
            if (v60 == v33)
            {
              v60 = 0;
              LODWORD(v61) = 0;
            }
            result = WTF::fastFree(v33, (void *)v51);
            v34 = (char *)v60;
            v15 = v51;
          }
        }
      }
      else
      {
        v34 = (char *)v60;
      }
      v31 = HIDWORD(v61);
      if (v22 == (int *)v12)
      {
        v4 = v55;
      }
      else
      {
        v4 = v55;
        do
        {
          v35 = *v22++;
          *(_DWORD *)&v34[4 * v31] = v35;
          v31 = ++HIDWORD(v61);
        }
        while (v22 != (int *)v12);
      }
      v8 = v57;
      goto LABEL_31;
    }
    v20 = 0;
    v21 = (int *)v11;
    v22 = (int *)v13;
    do
    {
      v23 = *v22;
      v24 = *v21;
      v59 = 0;
      v25 = __OFSUB__(v23, v24);
      v26 = v23 - v24;
      if (!((v26 < 0) ^ v25 | (v26 == 0)))
      {
        v29 = v20;
LABEL_22:
        v30 = *v21++;
        v27 = v30;
        v59 = v30;
        v29 ^= 2u;
        goto LABEL_15;
      }
      v28 = *v22++;
      v27 = v28;
      v59 = v28;
      v29 = v20 ^ 1;
      if ((v26 & 0x80000000) == 0)
        goto LABEL_22;
LABEL_15:
      if (!v20 || !v29)
      {
        if (HIDWORD(v61) == (_DWORD)v61)
        {
          v53 = v15;
          result = (uint64_t)WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>((uint64_t)&v60, (unint64_t)&v59);
          v15 = v53;
        }
        else
        {
          *((_DWORD *)v60 + HIDWORD(v61)) = v27;
          ++HIDWORD(v61);
        }
      }
      v19 = v21 != (int *)v10;
      if (v22 == (int *)v12)
        break;
      v20 = v29;
    }
    while (v21 != (int *)v10);
    v31 = HIDWORD(v61);
    if (v22 != (int *)v12)
      goto LABEL_25;
    v8 = v57;
LABEL_41:
    if (v19)
    {
      v38 = ((v10 - (uint64_t)v21) >> 2) + v31;
      v39 = v60;
      if (v38 > v61)
      {
        v52 = v15;
        if (v38 < 0x21)
        {
          v50 = (WTF *)v62;
          v60 = (WTF *)v62;
          LODWORD(v61) = 32;
        }
        else
        {
          if (v38 >> 30)
          {
            __break(0xC471u);
            JUMPOUT(0x1961B30F8);
          }
          v50 = (WTF *)WTF::fastMalloc((WTF *)(4 * v38));
          LODWORD(v61) = ((v10 - (uint64_t)v21) >> 2) + v31;
          v60 = v50;
        }
        result = (uint64_t)memcpy(v50, v39, 4 * v31);
        v34 = (char *)v60;
        v8 = v57;
        if (v62 == (_BYTE *)v39)
        {
          v15 = v52;
        }
        else
        {
          v15 = v52;
          if (v39)
          {
            if (v60 == v39)
            {
              v60 = 0;
              LODWORD(v61) = 0;
            }
            result = WTF::fastFree(v39, (void *)v52);
            v34 = (char *)v60;
            v8 = v57;
            v15 = v52;
          }
        }
      }
      else
      {
        v34 = (char *)v60;
        v8 = v57;
      }
      v31 = HIDWORD(v61);
      if (v21 == (int *)v10)
      {
        v4 = v55;
      }
      else
      {
        v4 = v55;
        do
        {
          v40 = *v21++;
          *(_DWORD *)&v34[4 * v31] = v40;
          v31 = ++HIDWORD(v61);
        }
        while (v21 != (int *)v10);
      }
    }
    else
    {
      v34 = (char *)v60;
    }
LABEL_31:
    if (v31 | *((_DWORD *)v4 + 39))
    {
      result = WebCore::Region::Shape::appendSpan(v4, v15, v34, &v34[4 * v31]);
      v34 = (char *)v60;
    }
    if (v62 != v34 && v34)
    {
      v60 = 0;
      LODWORD(v61) = 0;
      result = WTF::fastFree((WTF *)v34, (void *)v15);
    }
  }
  while (v7 != v8 && v14 != v58);
  if (v7 == v8)
  {
    for (; v14 != v58; v14 += 4)
    {
      v42 = *((_QWORD *)v14 + 1);
      v43 = *(unsigned int *)(a2 + 12);
      if (v42 == v43)
      {
        v44 = 0;
        v45 = 0;
      }
      else
      {
        if (v42 >= v43)
        {
          __break(0xC471u);
          JUMPOUT(0x1961B30F0);
        }
        v44 = (char *)(*(_QWORD *)a2 + 4 * v42);
        v45 = (char *)(*(_QWORD *)a2 + 4 * *((_QWORD *)v14 + 3));
      }
      result = WebCore::Region::Shape::appendSpan(v4, *v14, v44, v45);
    }
  }
  else
  {
    do
    {
LABEL_69:
      v46 = *((_QWORD *)v7 + 1);
      v47 = *(unsigned int *)(v56 + 12);
      if (v46 == v47)
      {
        v48 = 0;
        v49 = 0;
      }
      else
      {
        if (v46 >= v47)
          goto LABEL_99;
        v48 = (char *)(*(_QWORD *)v56 + 4 * v46);
        v49 = (char *)(*(_QWORD *)v56 + 4 * *((_QWORD *)v7 + 3));
      }
      result = WebCore::Region::Shape::appendSpan(v4, *v7, v48, v49);
      v7 += 4;
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t WebCore::Region::Shape::shapeOperation<WebCore::Region::Shape::IntersectOperation>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, WebCore::Region::Shape *a3@<X8>)
{
  WebCore::Region::Shape *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  WebCore::Region::Shape *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int *v23;
  int *v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int *v41;
  int v42;
  void *__s1;
  uint64_t v44;
  _BYTE v45[136];

  v3 = a3;
  *(_QWORD *)a3 = (char *)a3 + 16;
  *((_QWORD *)a3 + 1) = 32;
  *((_QWORD *)a3 + 18) = (char *)a3 + 160;
  *((_QWORD *)a3 + 19) = 16;
  v4 = *(unsigned int *)(result + 156);
  if ((_DWORD)v4)
  {
    v5 = *(unsigned int *)(a2 + 156);
    if ((_DWORD)v5)
    {
      v6 = result;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = *(unsigned int **)(result + 144);
      v41 = &v11[4 * v4];
      v12 = *(unsigned int **)(a2 + 144);
      v39 = &v12[4 * v5];
      while (1)
      {
        v13 = *v11;
        v14 = *v12;
        if ((int)v13 > (int)v14)
          goto LABEL_32;
        v15 = *((_QWORD *)v11 + 1);
        v16 = *(unsigned int *)(v6 + 12);
        if (v15 == v16)
        {
          v10 = 0;
          v9 = 0;
        }
        else
        {
          if (v15 >= v16)
            goto LABEL_40;
          v10 = (int *)(*(_QWORD *)v6 + 4 * v15);
          v9 = *(_QWORD *)v6 + 4 * *((_QWORD *)v11 + 3);
        }
        v11 += 4;
        if ((((_DWORD)v13 - (_DWORD)v14) & 0x80000000) == 0)
        {
LABEL_32:
          v34 = *((_QWORD *)v12 + 1);
          v35 = *(unsigned int *)(a2 + 12);
          if (v34 == v35)
          {
            v8 = 0;
            v7 = 0;
          }
          else
          {
            if (v34 >= v35)
            {
LABEL_40:
              __break(0xC471u);
              JUMPOUT(0x1961B33B0);
            }
            v8 = *(_QWORD *)a2 + 4 * v34;
            v7 = *(_QWORD *)a2 + 4 * *((_QWORD *)v12 + 3);
          }
          v12 += 4;
          v13 = v14;
        }
        v17 = 0;
        __s1 = v45;
        v44 = 32;
        v18 = v45;
        if (v10 != (int *)v9 && v8 != v7)
          break;
LABEL_23:
        if (v17 || *((_DWORD *)v3 + 39))
        {
          v33 = v7;
          result = WebCore::Region::Shape::appendSpan(v3, v13, v18, &v18[4 * v17]);
          v7 = v33;
          v18 = (char *)__s1;
        }
        if (v45 != v18 && v18)
        {
          __s1 = 0;
          LODWORD(v44) = 0;
          v36 = v7;
          result = WTF::fastFree((WTF *)v18, (void *)v13);
          v7 = v36;
        }
        if (v11 == v41 || v12 == v39)
          return result;
      }
      v19 = v3;
      v20 = v6;
      v21 = 0;
      v22 = v8;
      v23 = (int *)v8;
      v24 = v10;
      while (1)
      {
        v25 = *v10;
        v26 = *v23;
        v42 = 0;
        v27 = __OFSUB__(v25, v26);
        v28 = v25 - v26;
        if ((v28 < 0) ^ v27 | (v28 == 0))
        {
          v30 = *v10++;
          v29 = v30;
          v42 = v30;
          v31 = v21 ^ 1;
          if (v28 < 0)
            goto LABEL_16;
        }
        else
        {
          v31 = v21;
        }
        v32 = *v23++;
        v29 = v32;
        v42 = v32;
        v31 ^= 2u;
LABEL_16:
        if (v21 == 3 || v31 == 3)
        {
          if (HIDWORD(v44) == (_DWORD)v44)
          {
            v38 = v13;
            v37 = v7;
            result = (uint64_t)WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>((uint64_t)&__s1, (unint64_t)&v42);
            v7 = v37;
            v13 = v38;
          }
          else
          {
            *((_DWORD *)__s1 + HIDWORD(v44)) = v29;
            ++HIDWORD(v44);
          }
        }
        if (v10 != (int *)v9)
        {
          v21 = v31;
          if (v23 != (int *)v7)
            continue;
        }
        v17 = HIDWORD(v44);
        v18 = (char *)__s1;
        v6 = v20;
        v3 = v19;
        v10 = v24;
        v8 = v22;
        goto LABEL_23;
      }
    }
  }
  return result;
}

WebCore::Region::Shape *WebCore::Region::Shape::shapeOperation<WebCore::Region::Shape::SubtractOperation>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, WebCore::Region::Shape *a3@<X8>)
{
  WebCore::Region::Shape *result;
  unsigned int *v5;
  uint64_t v6;
  _BOOL4 v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int *v21;
  int *v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  WTF *v33;
  unint64_t v34;
  char *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  WTF *v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  unsigned int *v48;
  unsigned int *v49;
  WebCore::Region::Shape *v50;
  int v51;
  WTF *v52;
  uint64_t v53;
  _BYTE v54[136];

  result = a3;
  *(_QWORD *)a3 = (char *)a3 + 16;
  *((_QWORD *)a3 + 1) = 32;
  *((_QWORD *)a3 + 18) = (char *)a3 + 160;
  *((_QWORD *)a3 + 19) = 16;
  v5 = (unsigned int *)a1[18];
  v6 = *((unsigned int *)a1 + 39);
  v7 = *((_DWORD *)a1 + 39) != 0;
  v8 = &v5[4 * v6];
  v50 = result;
  if (!(_DWORD)v6)
    goto LABEL_49;
  v9 = a2;
  v10 = *(unsigned int *)(a2 + 156);
  if (!(_DWORD)v10)
    goto LABEL_49;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = *(unsigned int **)(a2 + 144);
  v48 = v8;
  v49 = &v15[4 * v10];
  v46 = a1;
  do
  {
    v16 = *v5;
    v17 = *v15;
    if ((int)v16 > (int)v17)
      goto LABEL_5;
    v37 = *((_QWORD *)v5 + 1);
    v38 = *((unsigned int *)a1 + 3);
    if (v37 == v38)
    {
      v14 = 0;
      v13 = 0;
    }
    else
    {
      if (v37 >= v38)
      {
        __break(0xC471u);
        JUMPOUT(0x1961B37B0);
      }
      v14 = *a1 + 4 * v37;
      v13 = *a1 + 4 * *((_QWORD *)v5 + 3);
    }
    v5 += 4;
    if ((_DWORD)v16 - (_DWORD)v17 < 0)
    {
      v17 = v16;
    }
    else
    {
LABEL_5:
      v18 = *((_QWORD *)v15 + 1);
      v19 = *(unsigned int *)(v9 + 12);
      if (v18 == v19)
      {
        v12 = 0;
        v11 = 0;
      }
      else
      {
        if (v18 >= v19)
          goto LABEL_72;
        v12 = *(_QWORD *)v9 + 4 * v18;
        v11 = *(_QWORD *)v9 + 4 * *((_QWORD *)v15 + 3);
      }
      v15 += 4;
    }
    v52 = (WTF *)v54;
    v53 = 32;
    if (v14 == v13 || v12 == v11)
    {
      v31 = 0;
      if (v14 == v13)
      {
        v35 = v54;
        goto LABEL_40;
      }
      v33 = (WTF *)v54;
      v32 = 32;
      v22 = (int *)v14;
LABEL_26:
      v34 = ((v13 - (uint64_t)v22) >> 2) + v31;
      if (v34 > v32)
      {
        v44 = v17;
        if (v34 < 0x21)
        {
          v52 = (WTF *)v54;
          LODWORD(v53) = 32;
          v43 = (WTF *)v54;
        }
        else
        {
          if (v34 >> 30)
          {
LABEL_72:
            __break(0xC471u);
            JUMPOUT(0x1961B37A0);
          }
          v43 = (WTF *)WTF::fastMalloc((WTF *)(4 * v34));
          LODWORD(v53) = ((v13 - (uint64_t)v22) >> 2) + v31;
          v52 = v43;
        }
        memcpy(v43, v33, 4 * v31);
        v35 = (char *)v52;
        a1 = v46;
        if (v54 == (_BYTE *)v33)
        {
          result = v50;
          v17 = v44;
        }
        else
        {
          result = v50;
          v17 = v44;
          if (v33)
          {
            if (v52 == v33)
            {
              v52 = 0;
              LODWORD(v53) = 0;
            }
            WTF::fastFree(v33, (void *)v44);
            v35 = (char *)v52;
            a1 = v46;
            result = v50;
            v17 = v44;
          }
        }
      }
      else
      {
        v35 = (char *)v33;
        a1 = v46;
      }
      v31 = HIDWORD(v53);
      while (v22 != (int *)v13)
      {
        v36 = *v22++;
        *(_DWORD *)&v35[4 * v31] = v36;
        v31 = ++HIDWORD(v53);
      }
      goto LABEL_39;
    }
    v20 = 0;
    v21 = (int *)v12;
    v22 = (int *)v14;
    do
    {
      v23 = *v22;
      v24 = *v21;
      v51 = 0;
      v25 = __OFSUB__(v23, v24);
      v26 = v23 - v24;
      if ((v26 < 0) ^ v25 | (v26 == 0))
      {
        v30 = *v22++;
        v28 = v30;
        v51 = v30;
        v27 = v20 ^ 1;
        if (v26 < 0)
          goto LABEL_15;
      }
      else
      {
        v27 = v20;
      }
      v29 = *v21++;
      v28 = v29;
      v51 = v29;
      v27 ^= 2u;
LABEL_15:
      if (v20 == 1 || v27 == 1)
      {
        if (HIDWORD(v53) == (_DWORD)v53)
        {
          v45 = v17;
          WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>((uint64_t)&v52, (unint64_t)&v51);
          v17 = v45;
          result = v50;
        }
        else
        {
          *((_DWORD *)v52 + HIDWORD(v53)) = v28;
          ++HIDWORD(v53);
        }
      }
      if (v22 == (int *)v13)
        break;
      v20 = v27;
    }
    while (v21 != (int *)v11);
    v31 = HIDWORD(v53);
    if (v22 != (int *)v13)
    {
      v32 = v53;
      v33 = v52;
      goto LABEL_26;
    }
    v35 = (char *)v52;
LABEL_39:
    v9 = a2;
    v8 = v48;
LABEL_40:
    if (v31 | *((_DWORD *)result + 39))
    {
      WebCore::Region::Shape::appendSpan(result, v17, v35, &v35[4 * v31]);
      result = v50;
      v35 = (char *)v52;
    }
    if (v54 != v35 && v35)
    {
      v52 = 0;
      LODWORD(v53) = 0;
      WTF::fastFree((WTF *)v35, (void *)v17);
      result = v50;
    }
    v7 = v5 != v8;
  }
  while (v5 != v8 && v15 != v49);
LABEL_49:
  if (v7)
  {
    do
    {
      v39 = *((_QWORD *)v5 + 1);
      v40 = *((unsigned int *)a1 + 3);
      if (v39 == v40)
      {
        v41 = 0;
        v42 = 0;
      }
      else
      {
        if (v39 >= v40)
        {
          __break(0xC471u);
          JUMPOUT(0x1961B37A8);
        }
        v41 = (char *)(*a1 + 4 * v39);
        v42 = (char *)(*a1 + 4 * *((_QWORD *)v5 + 3));
      }
      WebCore::Region::Shape::appendSpan(result, *v5, v41, v42);
      result = v50;
      v5 += 4;
    }
    while (v5 != v8);
  }
  return result;
}

int32x2_t *WebCore::Region::translate(int32x2_t *this, int32x2_t *a2)
{
  int32x2_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int32 v6;
  _DWORD *v7;

  *this = vadd_s32(*this, *a2);
  v2 = this[2];
  if (v2)
  {
    if (*(_DWORD *)(*(_QWORD *)&v2 + 12))
    {
      v3 = 0;
      v4 = **(_QWORD **)&v2;
      do
        *(_DWORD *)(v4 + 4 * v3++) += a2->i32[0];
      while (v3 < *(unsigned int *)(*(_QWORD *)&v2 + 12));
    }
    v5 = *(unsigned int *)(*(_QWORD *)&v2 + 156);
    if ((_DWORD)v5)
    {
      v6 = a2->i32[1];
      v7 = *(_DWORD **)(*(_QWORD *)&v2 + 144);
      do
      {
        *v7 += v6;
        v7 += 4;
        --v5;
      }
      while (v5);
    }
  }
  return this;
}

BOOL WebCore::Region::Shape::isValid(WebCore::Region::Shape *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _BOOL8 result;
  BOOL v7;

  v1 = *((unsigned int *)this + 39);
  if (!(_DWORD)v1)
    return 1;
  v2 = *((unsigned int *)this + 3);
  v3 = 16 * v1 - 16;
  v4 = (unint64_t *)(*((_QWORD *)this + 18) + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
    result = v5 <= v2;
    v7 = v5 > v2 || v3 == 0;
    v3 -= 16;
  }
  while (!v7);
  return result;
}

WTF::TextStream *WebCore::operator<<(WTF::TextStream *a1, __int128 *a2)
{
  WTF::TextStream *result;
  void *v5;
  uint64_t v6;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v29;
  int v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;

  result = (WTF::TextStream *)WTF::TextStream::operator<<();
  ++*((_DWORD *)a1 + 6);
  v32 = (WTF *)&v34;
  v33 = 1;
  v6 = *((_QWORD *)a2 + 2);
  if (v6)
  {
    v12 = *(unsigned int *)(v6 + 156);
    if (v12 >= 2)
    {
      v13 = 0;
      v14 = *(unsigned int **)(v6 + 144);
      v15 = &v14[4 * v12];
      v16 = v14 + 4;
      do
      {
        v17 = v16;
        v18 = *v14;
        v19 = v14[4] - *v14;
        v20 = (uint64_t *)*((_QWORD *)a2 + 2);
        v21 = *((_QWORD *)v14 + 1);
        v22 = *((unsigned int *)v20 + 3);
        if (v21 != v22)
        {
          if (v21 >= v22)
          {
            __break(0xC471u);
            return result;
          }
          v23 = *v20;
          v24 = v23 + 4 * v21;
          v25 = *((_QWORD *)v14 + 3);
          v26 = (_DWORD *)(v23 + 4 * v25);
          v27 = (_DWORD *)(v24 + 4);
          if (v21 != v25 && v27 != v26)
          {
            v29 = 4 * v25 - 4 * v21 - 12;
            do
            {
              v30 = *v27 - *(v27 - 1);
              LODWORD(v35) = *(v27 - 1);
              *(_QWORD *)((char *)&v35 + 4) = __PAIR64__(v30, v18);
              HIDWORD(v35) = v19;
              if (v13 == (_DWORD)v33)
              {
                result = (WTF::TextStream *)WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v32, (void *)(v13 + 1), (unint64_t)&v35);
                *((_OWORD *)v32 + HIDWORD(v33)) = *(_OWORD *)result;
              }
              else
              {
                *((_OWORD *)v32 + v13) = v35;
              }
              v13 = ++HIDWORD(v33);
              if (v29 == -4)
                break;
              v27 += 2;
              v31 = v29;
              v29 -= 8;
            }
            while (v31);
          }
        }
        if (v17 == v15)
          break;
        v16 = v17 + 4;
        v14 = v17;
      }
      while (v17 + 4 != v15);
      v9 = v32;
      if (!v13)
        goto LABEL_10;
      v8 = (WTF *)((char *)v32 + 16 * v13);
      goto LABEL_8;
    }
  }
  else if (*((int *)a2 + 2) >= 1 && *((_DWORD *)a2 + 3) >= 1)
  {
    v34 = *a2;
    HIDWORD(v33) = 1;
    v8 = (WTF *)&v35;
    v9 = (WTF *)&v34;
    do
    {
LABEL_8:
      WTF::TextStream::writeIndent(a1);
      v10 = WTF::TextStream::operator<<();
      WebCore::operator<<(v10);
      WTF::TextStream::operator<<();
      v9 = (WTF *)((char *)v9 + 16);
    }
    while (v9 != v8);
    v9 = v32;
LABEL_10:
    if (&v34 != (__int128 *)v9 && v9 != 0)
    {
      v32 = 0;
      LODWORD(v33) = 0;
      WTF::fastFree(v9, v5);
    }
  }
  --*((_DWORD *)a1 + 6);
  return a1;
}

_OWORD *std::make_unique[abi:sn180100]<WebCore::Region::Shape,WebCore::Region::Shape&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _OWORD *result;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;

  v4 = WTF::fastMalloc((WTF *)0x1A0);
  v5 = *(unsigned int *)(a1 + 12);
  v6 = (void *)(v4 + 16);
  *(_QWORD *)v4 = v4 + 16;
  *(_DWORD *)(v4 + 8) = 32;
  *(_DWORD *)(v4 + 12) = v5;
  if (v5 >= 0x21)
  {
    if (v5 >> 30)
      goto LABEL_11;
    v6 = (void *)WTF::fastMalloc((WTF *)(4 * v5));
    *(_DWORD *)(v4 + 8) = v5;
    *(_QWORD *)v4 = v6;
  }
  memcpy(v6, *(const void **)a1, 4 * *(unsigned int *)(a1 + 12));
  v7 = *(unsigned int *)(a1 + 156);
  result = (_OWORD *)(v4 + 160);
  *(_QWORD *)(v4 + 144) = v4 + 160;
  *(_DWORD *)(v4 + 152) = 16;
  *(_DWORD *)(v4 + 156) = v7;
  if (v7 < 0x11)
    goto LABEL_3;
  if (v7 >> 28)
  {
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x1961B3C70);
  }
  result = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v7));
  *(_DWORD *)(v4 + 152) = v7;
  *(_QWORD *)(v4 + 144) = result;
LABEL_3:
  v9 = *(unsigned int *)(a1 + 156);
  if ((_DWORD)v9)
  {
    v10 = *(__int128 **)(a1 + 144);
    v11 = 16 * v9;
    do
    {
      v12 = *v10++;
      *result++ = v12;
      v11 -= 16;
    }
    while (v11);
  }
  *a2 = v4;
  return result;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformTimeRanges::emptyRanges(void)::$_0 &&>>()
{
  WebCore::PlatformTimeRanges::emptyRanges(void)::emptyRanges = 0;
  unk_1EE2F8C68 = 0;
}

uint64_t WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  __int128 v11;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v6 = result;
    v7 = *(WTF **)result;
    v8 = *(unsigned int *)(result + 12);
    if (v5 < 2)
    {
      result += 16;
      *(_QWORD *)v6 = v6 + 16;
      *(_DWORD *)(v6 + 8) = 1;
    }
    else
    {
      if (v5 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
    }
    if ((_DWORD)v8)
    {
      v9 = 16 * v8;
      v10 = v7;
      do
      {
        v11 = *(_OWORD *)v10;
        v10 = (WTF *)((char *)v10 + 16);
        *(_OWORD *)result = v11;
        result += 16;
        v9 -= 16;
      }
      while (v9);
    }
    if ((WTF *)(v6 + 16) != v7 && v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      return WTF::fastFree(v7, a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  WTF *v13;
  __int128 v14;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= (unint64_t)a2)
    v9 = (unint64_t)a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 0x11)
  {
    v11 = (_OWORD *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 16;
    goto LABEL_13;
  }
  if (!(v9 >> 28))
  {
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_13:
    if ((_DWORD)v10)
    {
      v12 = 16 * v10;
      v13 = v5;
      do
      {
        v14 = *(_OWORD *)v13;
        v13 = (WTF *)((char *)v13 + 16);
        *v11++ = v14;
        v12 -= 16;
      }
      while (v12);
    }
    if ((WTF *)(v4 + 16) != v5 && v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  __int128 v11;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v6 = result;
    v7 = *(WTF **)result;
    v8 = *(unsigned int *)(result + 12);
    if (v5 < 0x11)
    {
      result += 16;
      *(_QWORD *)v6 = v6 + 16;
      *(_DWORD *)(v6 + 8) = 16;
    }
    else
    {
      if (v5 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
    }
    if ((_DWORD)v8)
    {
      v9 = 16 * v8;
      v10 = v7;
      do
      {
        v11 = *(_OWORD *)v10;
        v10 = (WTF *)((char *)v10 + 16);
        *(_OWORD *)result = v11;
        result += 16;
        v9 -= 16;
      }
      while (v9);
    }
    if ((WTF *)(v6 + 16) != v7 && v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      return WTF::fastFree(v7, a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  __int128 v8;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    if (a2 < 0x11)
    {
      result += 16;
      *(_QWORD *)v3 = v3 + 16;
      *(_DWORD *)(v3 + 8) = 16;
    }
    else
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
    }
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      v7 = v4;
      do
      {
        v8 = *(_OWORD *)v7;
        v7 = (WTF *)((char *)v7 + 16);
        *(_OWORD *)result = v8;
        result += 16;
        v6 -= 16;
      }
      while (v6);
    }
    if ((WTF *)(v3 + 16) != v4 && v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

void **WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  int v2;
  void **v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    v3 = result;
    v4 = (void **)*result;
    v5 = *((unsigned int *)result + 3);
    if (a2 < 0x21)
    {
      v6 = result + 2;
      *v3 = v3 + 2;
      *((_DWORD *)v3 + 2) = 32;
    }
    else
    {
      if (a2 >> 30)
      {
        __break(0xC471u);
        return result;
      }
      v6 = (void *)WTF::fastMalloc((WTF *)(4 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *v3 = v6;
    }
    result = (void **)memcpy(v6, v4, 4 * v5);
    if (v3 + 2 != v4 && v4 != 0)
    {
      if (*v3 == v4)
      {
        *v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v4, v7);
    }
  }
  return result;
}

_DWORD *WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

unint64_t WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 > a3 || (unint64_t)v5 + 4 * *(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  else
  {
    v6 = a3 - (_QWORD)v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, const void **a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 == (const void **)a1)
    return a1;
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *((_DWORD *)a2 + 3);
  if (v4 <= v5)
  {
    v6 = *(_DWORD *)(a1 + 8);
    if (v5 <= v6)
      goto LABEL_13;
    if (v6)
    {
      if (v4)
        *(_DWORD *)(a1 + 12) = 0;
      v8 = a1 + 16;
      v7 = *(WTF **)a1;
      if (a1 + 16 != *(_QWORD *)a1 && v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
        WTF::fastFree(v7, a2);
        v8 = a1 + 16;
        if (*(_QWORD *)a1)
          goto LABEL_12;
        goto LABEL_11;
      }
      if (!v7)
      {
LABEL_11:
        *(_QWORD *)a1 = v8;
        *(_DWORD *)(a1 + 8) = 32;
      }
    }
LABEL_12:
    WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, *((unsigned int *)a2 + 3));
    v4 = *(_DWORD *)(a1 + 12);
    goto LABEL_13;
  }
  *(_DWORD *)(a1 + 12) = v5;
  v4 = v5;
LABEL_13:
  if (v4)
  {
    memmove(*(void **)a1, *a2, 4 * v4);
    v9 = *(unsigned int *)(a1 + 12);
  }
  else
  {
    v9 = 0;
  }
  memcpy((void *)(*(_QWORD *)a1 + 4 * v9), (char *)*a2 + 4 * v9, (_BYTE *)*a2 + 4 * *((unsigned int *)a2 + 3) - ((_BYTE *)*a2 + 4 * v9));
  *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  return a1;
}

uint64_t WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, const void **a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;

  if (a2 == (const void **)a1)
    return a1;
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *((_DWORD *)a2 + 3);
  if (v4 <= v5)
  {
    v6 = *(_DWORD *)(a1 + 8);
    if (v5 <= v6)
      goto LABEL_13;
    if (v6)
    {
      if (v4)
        *(_DWORD *)(a1 + 12) = 0;
      v7 = *(WTF **)a1;
      if (a1 + 16 != *(_QWORD *)a1 && v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
        WTF::fastFree(v7, a2);
        if (*(_QWORD *)a1)
          goto LABEL_12;
        goto LABEL_11;
      }
      if (!v7)
      {
LABEL_11:
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
      }
    }
LABEL_12:
    WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *((unsigned int *)a2 + 3));
    v4 = *(_DWORD *)(a1 + 12);
    goto LABEL_13;
  }
  *(_DWORD *)(a1 + 12) = v5;
  v4 = v5;
LABEL_13:
  if (v4)
  {
    memmove(*(void **)a1, *a2, 16 * v4);
    v4 = *(_DWORD *)(a1 + 12);
  }
  v8 = *((unsigned int *)a2 + 3);
  if (v4 != (_DWORD)v8)
  {
    v9 = (_OWORD *)(*(_QWORD *)a1 + 16 * v4);
    v10 = (__int128 *)((char *)*a2 + 16 * v4);
    v11 = 16 * v8 - 16 * v4;
    do
    {
      v12 = *v10++;
      *v9++ = v12;
      v11 -= 16;
    }
    while (v11);
    v4 = *((_DWORD *)a2 + 3);
  }
  *(_DWORD *)(a1 + 12) = v4;
  return a1;
}

BOOL WebCore::RoundedRectRadii::isZero(WebCore::RoundedRectRadii *this)
{
  return !*(_DWORD *)this
      && !*((_DWORD *)this + 1)
      && !*((_DWORD *)this + 2)
      && !*((_DWORD *)this + 3)
      && !*((_DWORD *)this + 4)
      && !*((_DWORD *)this + 5)
      && !*((_DWORD *)this + 6)
      && *((_DWORD *)this + 7) == 0;
}

__n128 WebCore::RoundedRect::RoundedRect(WebCore::RoundedRect *this, const WebCore::LayoutRect *a2, const WebCore::RoundedRectRadii *a3)
{
  __n128 result;
  __int128 v4;

  *(_OWORD *)this = *(_OWORD *)a2;
  result = *(__n128 *)a3;
  v4 = *((_OWORD *)a3 + 1);
  *((_OWORD *)this + 1) = *(_OWORD *)a3;
  *((_OWORD *)this + 2) = v4;
  return result;
}

{
  __n128 result;
  __int128 v4;

  *(_OWORD *)this = *(_OWORD *)a2;
  result = *(__n128 *)a3;
  v4 = *((_OWORD *)a3 + 1);
  *((_OWORD *)this + 1) = *(_OWORD *)a3;
  *((_OWORD *)this + 2) = v4;
  return result;
}

__n128 WebCore::RoundedRect::RoundedRect(WebCore::RoundedRect *this, __n128 *a2, const WebCore::LayoutSize *a3, const WebCore::LayoutSize *a4, const WebCore::LayoutSize *a5, const WebCore::LayoutSize *a6)
{
  __n128 result;

  result = *a2;
  *(__n128 *)this = *a2;
  *((_QWORD *)this + 2) = *(_QWORD *)a3;
  *((_QWORD *)this + 3) = *(_QWORD *)a4;
  *((_QWORD *)this + 4) = *(_QWORD *)a5;
  *((_QWORD *)this + 5) = *(_QWORD *)a6;
  return result;
}

{
  __n128 result;

  result = *a2;
  *(__n128 *)this = *a2;
  *((_QWORD *)this + 2) = *(_QWORD *)a3;
  *((_QWORD *)this + 3) = *(_QWORD *)a4;
  *((_QWORD *)this + 4) = *(_QWORD *)a5;
  *((_QWORD *)this + 5) = *(_QWORD *)a6;
  return result;
}

BOOL WebCore::RoundedRect::isRenderable(WebCore::RoundedRect *this)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v1 = *((_DWORD *)this + 4);
  if (v1 < 0)
    return 0;
  v2 = *((_DWORD *)this + 5);
  if (v2 < 0)
    return 0;
  v3 = *((_DWORD *)this + 8);
  if (v3 < 0)
    return 0;
  v4 = *((_DWORD *)this + 9);
  if (v4 < 0)
    return 0;
  v5 = *((_DWORD *)this + 6);
  if (v5 < 0)
    return 0;
  v6 = *((_DWORD *)this + 7);
  if (v6 < 0)
    return 0;
  v7 = *((_DWORD *)this + 10);
  if (v7 < 0)
    return 0;
  v8 = *((_DWORD *)this + 11);
  if (v8 < 0)
    return 0;
  v9 = __OFADD__(v1, v5);
  v10 = v1 + v5;
  if (v9)
    v10 = 0x7FFFFFFF;
  v11 = *((_DWORD *)this + 2);
  if (v10 > v11)
    return 0;
  v9 = __OFADD__(v3, v7);
  v12 = v3 + v7;
  if (v9)
    v12 = 0x7FFFFFFF;
  if (v12 > v11)
    return 0;
  v9 = __OFADD__(v2, v4);
  v13 = v2 + v4;
  if (v9)
    v13 = 0x7FFFFFFF;
  v14 = *((_DWORD *)this + 3);
  if (v13 > v14)
    return 0;
  v9 = __OFADD__(v6, v8);
  v15 = v6 + v8;
  if (v9)
    v15 = 0x7FFFFFFF;
  return v15 <= v14;
}

int *WebCore::RoundedRect::adjustRadii(int32x2_t *this)
{
  int *v2;
  unsigned __int32 v3;
  int v4;
  BOOL v5;
  int v6;
  int v7;
  __int32 v8;
  __int32 v9;
  unsigned __int32 v10;
  unsigned __int32 v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned __int32 v16;
  int v17;
  int v18;
  __int32 v19;
  int v20;
  int v21;
  float32x2_t v22;

  v3 = this[2].u32[0];
  v2 = (int *)&this[2];
  v4 = v2[2];
  v5 = __OFADD__(v3, v4);
  v6 = v3 + v4;
  v7 = (v3 >> 31) + 0x7FFFFFFF;
  if (!v5)
    v7 = v6;
  v9 = this[4].i32[1];
  v8 = this[5].i32[0];
  v11 = this[3].u32[1];
  v10 = this[4].u32[0];
  v5 = __OFADD__(v10, v8);
  v12 = v10 + v8;
  v13 = (v10 >> 31) + 0x7FFFFFFF;
  if (v5)
    v12 = v13;
  if (v7 <= v12)
    v14 = v12;
  else
    v14 = v7;
  v15 = v14 + 63;
  if (v14 >= 0)
    v15 = v14;
  v16 = this[2].u32[1];
  v5 = __OFADD__(v16, v9);
  v17 = v16 + v9;
  v18 = (v16 >> 31) + 0x7FFFFFFF;
  if (!v5)
    v18 = v17;
  v19 = this[5].i32[1];
  v5 = __OFADD__(v11, v19);
  v20 = v11 + v19;
  v21 = (v11 >> 31) + 0x7FFFFFFF;
  if (!v5)
    v21 = v20;
  if (v18 <= v21)
    v18 = v21;
  v22.i32[0] = 0;
  if (v14 >= 64 && v18 >= 64)
  {
    v22 = vdiv_f32(vmul_f32(vcvt_f32_s32(this[1]), (float32x2_t)vdup_n_s32(0x3C800000u)), vcvt_f32_s32((int32x2_t)__PAIR64__(v18 >> 6, v15 >> 6)));
    if (v22.f32[0] >= v22.f32[1])
      v22.f32[0] = v22.f32[1];
  }
  return WebCore::RoundedRectRadii::scale(v2, v22.f32[0]);
}

BOOL WebCore::RoundedRect::intersectsQuad(int32x4_t *this, float32x4_t *a2)
{
  _BOOL8 result;
  int v5;
  int v6;
  int32x4_t v7;
  float32x4_t v8;
  unsigned __int32 v9;
  __int32 v10;
  __int32 v11;
  int v12;
  float32x2_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  int v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int v21;
  int v22;
  __int32 v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  int32x4_t v28;
  float32x4_t v29;
  __int32 v30;
  unsigned __int32 v31;
  unsigned int v32;
  __int32 v33;
  __int32 v34;
  int v35;
  int v36;
  float32x2_t v37;
  uint64_t v38;
  int v39;
  int v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int v44;
  int v45;
  float32x2_t v46;
  unsigned __int32 v47;
  __int32 v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  float32x4_t v53;
  unsigned __int32 v54;
  __int32 v55;
  __int32 v56;
  int v57;
  float32x2_t v58;
  uint64_t v59;
  __int32 v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int v68;
  int v69;
  unsigned __int32 v70;
  __int32 v71;
  __int32 v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  int v76;
  float32x2_t v77;
  float v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  float32x4_t v83;
  unsigned __int32 v84;
  __int32 v85;
  __int32 v86;
  unsigned int v87;
  unsigned int v88;
  __int32 v89;
  __int32 v90;
  int v91;
  int v92;
  float32x2_t v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  int v97;
  int v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  uint64_t v104;
  float32x4_t v105;
  float32x4_t v106;

  v103 = vmulq_f32(vcvtq_f32_s32(*this), (float32x4_t)vdupq_n_s32(0x3C800000u));
  result = WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)a2, (const WebCore::FloatRect *)&v103);
  if (result)
  {
    v5 = this[1].i32[0];
    if (v5 < 1)
      goto LABEL_11;
    v6 = this[1].i32[1];
    if (v6 < 1)
      goto LABEL_11;
    v7.i64[0] = this->i64[0];
    v7.i64[1] = __PAIR64__(v6, v5);
    v102 = vmulq_f32(vcvtq_f32_s32(v7), (float32x4_t)vdupq_n_s32(0x3C800000u));
    if (!WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)a2, (const WebCore::FloatRect *)&v102))
      goto LABEL_11;
    v9 = this->u32[1];
    v10 = this[1].i32[0];
    v11 = this[1].i32[1];
    v12 = ((unsigned __int32)this->i32[0] >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(this->i32[0], v10))
      v12 = this->i32[0] + v10;
    v13 = (float32x2_t)vdup_n_s32(0x3C800000u);
    *(float *)&v14 = (float)v12 * 0.015625;
    v15 = __OFADD__(v9, v11);
    v16 = v9 + v11;
    v17 = (v9 >> 31) + 0x7FFFFFFF;
    if (v15)
      v16 = v17;
    *(float32x2_t *)v18.f32 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v10, v11)), v13);
    v19 = a2[1];
    *((float *)&v14 + 1) = (float)v16 * 0.015625;
    *(int32x2_t *)v8.f32 = vdup_lane_s32(*(int32x2_t *)v18.f32, 1);
    v18.i64[1] = v18.i64[0];
    v20 = (float32x4_t)vdupq_lane_s64(v14, 0);
    v105 = *a2;
    v105 = vmulq_f32(v18, vsubq_f32(v105, v20));
    v106 = vmulq_f32(v18, vsubq_f32(v19, v20));
    v104 = 0;
    result = WebCore::FloatQuad::intersectsCircle((WebCore::FloatQuad *)&v105, (const WebCore::FloatPoint *)&v104, vmulq_f32(v8, v18).f32[0]);
    if (result)
    {
LABEL_11:
      v21 = this[1].i32[2];
      if (v21 < 1)
        goto LABEL_27;
      v22 = this[1].i32[3];
      if (v22 < 1)
        goto LABEL_27;
      v23 = this->i32[2];
      v15 = __OFADD__(this->i32[0], v23);
      v24 = this->i32[0] + v23;
      v25 = ((unsigned __int32)this->i32[0] >> 31) + 0x7FFFFFFF;
      if (!v15)
        v25 = v24;
      v15 = __OFSUB__(v25, v21);
      v26 = v25 - v21;
      v27 = (v25 >> 31) + 0x7FFFFFFF;
      if (!v15)
        v27 = v26;
      v28.i32[0] = v27;
      v28.i32[1] = this->i32[1];
      v28.i64[1] = __PAIR64__(v22, v21);
      v102 = vmulq_f32(vcvtq_f32_s32(v28), (float32x4_t)vdupq_n_s32(0x3C800000u));
      if (!WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)a2, (const WebCore::FloatRect *)&v102))
        goto LABEL_27;
      v31 = this->u32[1];
      v30 = this->i32[2];
      v15 = __OFADD__(this->i32[0], v30);
      v32 = this->i32[0] + v30;
      if (v15)
        v32 = ((unsigned __int32)this->i32[0] >> 31) + 0x7FFFFFFF;
      v33 = this[1].i32[2];
      v34 = this[1].i32[3];
      v15 = __OFSUB__(v32, v33);
      v35 = v32 - v33;
      v36 = (v32 >> 31) + 0x7FFFFFFF;
      if (!v15)
        v36 = v35;
      v37 = (float32x2_t)vdup_n_s32(0x3C800000u);
      *(float *)&v38 = (float)v36 * 0.015625;
      v15 = __OFADD__(v31, v34);
      v39 = v31 + v34;
      v40 = (v31 >> 31) + 0x7FFFFFFF;
      if (v15)
        v39 = v40;
      *(float32x2_t *)v41.f32 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v33, v34)), v37);
      v42 = a2[1];
      *((float *)&v38 + 1) = (float)v39 * 0.015625;
      *(int32x2_t *)v29.f32 = vdup_lane_s32(*(int32x2_t *)v41.f32, 1);
      v41.i64[1] = v41.i64[0];
      v43 = (float32x4_t)vdupq_lane_s64(v38, 0);
      v105 = *a2;
      v105 = vmulq_f32(v41, vsubq_f32(v105, v43));
      v106 = vmulq_f32(v41, vsubq_f32(v42, v43));
      v104 = 0;
      result = WebCore::FloatQuad::intersectsCircle((WebCore::FloatQuad *)&v105, (const WebCore::FloatPoint *)&v104, vmulq_f32(v29, v41).f32[0]);
      if (result)
      {
LABEL_27:
        v44 = this[2].i32[0];
        if (v44 < 1)
          goto LABEL_42;
        v45 = this[2].i32[1];
        if (v45 < 1)
          goto LABEL_42;
        v46 = (float32x2_t)vdup_n_s32(0x3C800000u);
        v47 = this->u32[1];
        v48 = this->i32[3];
        v15 = __OFADD__(v47, v48);
        v49 = v47 + v48;
        v50 = (v47 >> 31) + 0x7FFFFFFF;
        if (!v15)
          v50 = v49;
        v15 = __OFSUB__(v50, v45);
        v51 = v50 - v45;
        v52 = (v50 >> 31) + 0x7FFFFFFF;
        if (!v15)
          v52 = v51;
        v102.f32[0] = (float)this->i32[0] * 0.015625;
        *(float32x2_t *)&v102.i32[1] = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v44, v52)), v46);
        v102.f32[3] = (float)v45 * 0.015625;
        if (!WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)a2, (const WebCore::FloatRect *)&v102))
          goto LABEL_42;
        v54 = this->u32[1];
        v55 = this[2].i32[0];
        v56 = this[2].i32[1];
        v57 = ((unsigned __int32)this->i32[0] >> 31) + 0x7FFFFFFF;
        if (!__OFADD__(this->i32[0], v55))
          v57 = this->i32[0] + v55;
        v58 = (float32x2_t)vdup_n_s32(0x3C800000u);
        *(float *)&v59 = (float)v57 * 0.015625;
        v60 = this->i32[3];
        v15 = __OFADD__(v54, v60);
        v61 = v54 + v60;
        v62 = (v54 >> 31) + 0x7FFFFFFF;
        if (v15)
          v61 = v62;
        v15 = __OFSUB__(v61, v56);
        v63 = v61 - v56;
        v64 = (v61 >> 31) + 0x7FFFFFFF;
        if (!v15)
          v64 = v63;
        *(float32x2_t *)v65.f32 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v55, v56)), v58);
        v66 = a2[1];
        *((float *)&v59 + 1) = (float)v64 * 0.015625;
        *(int32x2_t *)v53.f32 = vdup_lane_s32(*(int32x2_t *)v65.f32, 1);
        v65.i64[1] = v65.i64[0];
        v67 = (float32x4_t)vdupq_lane_s64(v59, 0);
        v105 = *a2;
        v105 = vmulq_f32(v65, vsubq_f32(v105, v67));
        v106 = vmulq_f32(v65, vsubq_f32(v66, v67));
        v104 = 0;
        result = WebCore::FloatQuad::intersectsCircle((WebCore::FloatQuad *)&v105, (const WebCore::FloatPoint *)&v104, vmulq_f32(v53, v65).f32[0]);
        if (result)
        {
LABEL_42:
          v68 = this[2].i32[2];
          if (v68 < 1)
            return 1;
          v69 = this[2].i32[3];
          if (v69 < 1)
            return 1;
          v70 = this->u32[1];
          v71 = this->i32[2];
          v72 = this->i32[3];
          v15 = __OFADD__(this->i32[0], v71);
          v73 = this->i32[0] + v71;
          v74 = ((unsigned __int32)this->i32[0] >> 31) + 0x7FFFFFFF;
          if (!v15)
            v74 = v73;
          v15 = __OFSUB__(v74, v68);
          v75 = v74 - v68;
          v76 = (v74 >> 31) + 0x7FFFFFFF;
          if (!v15)
            v76 = v75;
          v77 = (float32x2_t)vdup_n_s32(0x3C800000u);
          v78 = (float)v76 * 0.015625;
          v15 = __OFADD__(v70, v72);
          v79 = v70 + v72;
          v80 = (v70 >> 31) + 0x7FFFFFFF;
          if (v15)
            v79 = v80;
          v15 = __OFSUB__(v79, v69);
          v81 = v79 - v69;
          v82 = (v79 >> 31) + 0x7FFFFFFF;
          if (!v15)
            v82 = v81;
          v102.f32[0] = v78;
          *(float32x2_t *)&v102.i32[1] = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v68, v82)), v77);
          v102.f32[3] = (float)v69 * 0.015625;
          if (!WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)a2, (const WebCore::FloatRect *)&v102))
            return 1;
          v84 = this->u32[1];
          v85 = this->i32[2];
          v86 = this->i32[3];
          v15 = __OFADD__(this->i32[0], v85);
          v87 = this->i32[0] + v85;
          v88 = ((unsigned __int32)this->i32[0] >> 31) + 0x7FFFFFFF;
          if (!v15)
            v88 = v87;
          v89 = this[2].i32[2];
          v90 = this[2].i32[3];
          v15 = __OFSUB__(v88, v89);
          v91 = v88 - v89;
          v92 = (v88 >> 31) + 0x7FFFFFFF;
          if (!v15)
            v92 = v91;
          v93 = (float32x2_t)vdup_n_s32(0x3C800000u);
          *(float *)&v94 = (float)v92 * 0.015625;
          v15 = __OFADD__(v84, v86);
          v95 = v84 + v86;
          v96 = (v84 >> 31) + 0x7FFFFFFF;
          if (v15)
            v95 = v96;
          v15 = __OFSUB__(v95, v90);
          v97 = v95 - v90;
          v98 = (v95 >> 31) + 0x7FFFFFFF;
          if (!v15)
            v98 = v97;
          *(float32x2_t *)v99.f32 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v89, v90)), v93);
          v100 = a2[1];
          *((float *)&v94 + 1) = (float)v98 * 0.015625;
          *(int32x2_t *)v83.f32 = vdup_lane_s32(*(int32x2_t *)v99.f32, 1);
          v99.i64[1] = v99.i64[0];
          v101 = (float32x4_t)vdupq_lane_s64(v94, 0);
          v105 = *a2;
          v105 = vmulq_f32(v99, vsubq_f32(v105, v101));
          v106 = vmulq_f32(v99, vsubq_f32(v100, v101));
          v104 = 0;
          result = WebCore::FloatQuad::intersectsCircle((WebCore::FloatQuad *)&v105, (const WebCore::FloatPoint *)&v104, vmulq_f32(v83, v99).f32[0]);
          if (result)
            return 1;
        }
      }
    }
  }
  return result;
}

float32x2_t WebCore::FloatRoundedRect::Radii::Radii(float32x2_t *this, int32x2_t *a2)
{
  float32x2_t v2;
  float32x2_t result;

  v2 = (float32x2_t)vdup_n_s32(0x3C800000u);
  *this = vmul_f32(vcvt_f32_s32(*a2), v2);
  this[1] = vmul_f32(vcvt_f32_s32(a2[1]), v2);
  this[2] = vmul_f32(vcvt_f32_s32(a2[2]), v2);
  result = vmul_f32(vcvt_f32_s32(a2[3]), v2);
  this[3] = result;
  return result;
}

uint64_t WebCore::ShadowBlur::blurLayerImage(uint64_t result, uint64_t a2, unint64_t a3, int *a4, int a5)
{
  float v5;
  float v6;
  int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  char v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  char v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  unsigned __int8 *v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  BOOL v80;
  float v81;
  float v82;
  float v83;
  int v84;
  int v85;
  unsigned int v86;
  BOOL v87;
  unsigned int v88;
  unsigned int v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int *v94;
  int v95;
  unint64_t v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v5 = *(float *)(result + 16);
  v6 = (float)((float)((float)(v5 * 0.5) * 1.88) * 0.88) + 0.5;
  if (*(_BYTE *)(result + 32))
    v6 = v5 * 0.66667;
  v7 = vcvtms_s32_f32(v6);
  if (v7 <= 2)
    v7 = 2;
  v8 = (v7 >> 1) - 1;
  v9 = (v7 - 1) >> 1;
  v10 = (v7 & 1) == 0;
  if ((v7 & 1) != 0)
    v11 = (v7 - 1) >> 1;
  else
    v11 = v7 >> 1;
  if (v10)
    v12 = v8;
  else
    v12 = v9;
  v98 = v11;
  v99 = v12;
  v100 = v12;
  v101 = v11;
  v102 = v11;
  v103 = v11;
  v13 = a5;
  v14 = 1;
  v15 = *a4;
  v16 = a4[1];
  v17 = 4;
  v18 = a5;
  v19 = v16;
  v20 = *a4;
  do
  {
    v21 = v14;
    if ((v5 != 0.0 || (v14 & 1) == 0) && v19 >= 1)
    {
      v90 = v14;
      v91 = result;
      v93 = a3;
      v94 = a4;
      v22 = 0;
      v23 = a3 - v17;
      v92 = a2;
      v24 = a2;
      v25 = a3;
      v96 = v18;
      v95 = v19;
      do
      {
        v97 = v22;
        v26 = 0;
        v27 = 3;
        do
        {
          if (v25 <= v27)
            goto LABEL_104;
          v28 = v27;
          v29 = v17 * (v20 - 1) + v27;
          if (v25 <= v29)
            goto LABEL_104;
          v30 = v26 + 1;
          v27 = dword_1969F7DA0[v26 + 1];
          if (v25 < v27)
            goto LABEL_104;
          v31 = (int *)(&v98 + 2 * v26);
          v33 = *v31;
          v32 = v31[1];
          v34 = *v31 + 1;
          v35 = v32 + 1;
          v36 = v24 + v28;
          v37 = *(unsigned __int8 *)(v24 + v28);
          v38 = *(unsigned __int8 *)(v24 + v29);
          v39 = v17 + v28;
          v40 = v25 - (v17 + v28);
          if (v25 < v17 + v28)
            v40 = 0;
          v41 = v28 + v17 * v35;
          if (v41 >= v25)
            v42 = 0;
          else
            v42 = v24 + v41;
          if (v25 >= v41)
            v43 = v25 - v41;
          else
            v43 = 0;
          v44 = v34 * v37;
          if (v20 >= v35)
            v45 = v32 + 1;
          else
            v45 = v20;
          if (v45 > 1 && v40 >= v17)
          {
            v46 = (unsigned __int8 *)(v24 + v39);
            if (v39 >= v25)
              v46 = 0;
            if (v25 < v39)
              v39 = v25;
            v47 = -(uint64_t)v39;
            v48 = 2;
            while (v25 + v47)
            {
              v44 += *v46;
              if (v48 < v45)
              {
                v49 = v23 + v47;
                v46 += v17;
                ++v48;
                v47 -= v17;
                if (v49 >= v17)
                  continue;
              }
              goto LABEL_40;
            }
LABEL_104:
            __break(1u);
          }
LABEL_40:
          v50 = 0;
          v51 = v34 + v32;
          v52 = v34 + v32 + 0x7FFF;
          v53 = v25 - v27;
          v54 = (v35 - v45) * v38;
          if (v45 > v32)
            v54 = 0;
          v55 = v44 + v54;
          v56 = v24 + v27;
          if (v33 >= v20)
            v57 = v20;
          else
            v57 = v33;
          v58 = v52 / v51;
          if (v57 >= 1 && v53 >= v17 && v43 >= v17)
          {
            v59 = 0;
            v60 = 0;
            if (v25 >= v41)
              v61 = v28 + v17 * v35;
            else
              v61 = v25;
            v62 = v23 - v61;
            v63 = v25 - v61;
            v64 = 1;
            do
            {
              if (!(v53 + v60))
                goto LABEL_104;
              *(_BYTE *)(v24 + v27 + v59) = (v55 * v58) >> 15;
              v65 = v38;
              if (v32 + v64 < v20)
              {
                if (!(v63 + v60))
                  goto LABEL_104;
                v65 = *(unsigned __int8 *)(v42 + v59);
              }
              v55 = v65 + v55 - v37;
              v66 = v64 + 1;
              v67 = v60 - v17;
              if (v64 >= v57)
                break;
              if (v23 - v27 + v60 < v17)
                break;
              v68 = v62 + v60;
              v59 += v17;
              v60 -= v17;
              ++v64;
            }
            while (v68 >= v17);
            v35 = v32 + v66;
            v50 = v66 - 1;
            v69 = v25 - v41;
            if (v25 < v41)
              v69 = 0;
            v43 = v69 + v67;
            v42 -= v67;
            v56 = v24 + v27 - v67;
            v53 += v67;
          }
          v70 = v25 - v28;
          if (v25 - v28 >= v17 && v53 >= v17 && v35 < v20 && v43 >= v17)
          {
            v71 = 0;
            v72 = 0;
            v73 = v35 + 1;
            do
            {
              if (!(v53 + v72))
                goto LABEL_104;
              *(_BYTE *)(v56 + v71) = (v55 * v58) >> 15;
              if (-(uint64_t)v43 == v72 || !(v70 + v72))
                goto LABEL_104;
              v55 = v55 + *(unsigned __int8 *)(v42 + v71) - *(unsigned __int8 *)(v24 + v28 + v71);
              ++v50;
              v74 = v72 - v17;
              if (v73 >= v20)
                break;
              if (v53 - v17 + v72 < v17)
                break;
              if (v23 - v28 + v72 < v17)
                break;
              v75 = v43 - v17 + v72;
              ++v73;
              v71 += v17;
              v72 -= v17;
            }
            while (v75 >= v17);
            v70 += v74;
            v36 = v24 + v28 - v74;
            v56 -= v74;
            v53 += v74;
          }
          if (v53 >= v17 && v50 < v20 && v70 >= v17)
          {
            v76 = 0;
            v77 = v50 + 1;
            v78 = -(uint64_t)v17;
            while (v53 != v76)
            {
              *(_BYTE *)(v56 + v76) = (v55 * v58) >> 15;
              if (v70 == v76)
                break;
              if (v77 < v20 && v53 + v78 >= v17)
              {
                v55 = v55 + v38 - *(unsigned __int8 *)(v36 + v76);
                v79 = v70 + v78;
                ++v77;
                v78 -= v17;
                v76 += v17;
                if (v79 >= v17)
                  continue;
              }
              goto LABEL_84;
            }
            goto LABEL_104;
          }
LABEL_84:
          v26 = v30;
        }
        while (v30 != 3);
        v80 = v25 >= v96;
        v25 -= v96;
        if (!v80)
          goto LABEL_104;
        v22 = v97 + 1;
        v24 += v96;
        v23 -= v96;
      }
      while (v97 + 1 != v95);
      a3 = v93;
      a4 = v94;
      v15 = *v94;
      v16 = v94[1];
      result = v91;
      a2 = v92;
      v21 = v90;
    }
    v81 = *(float *)(result + 20);
    if (v81 == 0.0)
      break;
    v5 = *(float *)(result + 16);
    if (v5 != v81)
    {
      v82 = (float)((float)((float)(v81 * 0.5) * 1.88) * 0.88) + 0.5;
      v83 = v81 * 0.66667;
      if (!*(_BYTE *)(result + 32))
        v83 = v82;
      v84 = vcvtms_s32_f32(v83);
      if (v84 <= 2)
        v84 = 2;
      v85 = (v84 >> 1) - 1;
      v86 = (v84 - 1) >> 1;
      v87 = (v84 & 1) == 0;
      if ((v84 & 1) != 0)
        v88 = (v84 - 1) >> 1;
      else
        v88 = v84 >> 1;
      if (v87)
        v89 = v85;
      else
        v89 = v86;
      v98 = v88;
      v99 = v89;
      v100 = v89;
      v101 = v88;
      v102 = v88;
      v103 = v88;
    }
    v14 = 0;
    v17 = v13;
    v18 = 4;
    v19 = v15;
    v20 = v16;
  }
  while ((v21 & 1) != 0);
  return result;
}

void WebCore::ShadowBlur::calculateLayerBoundingRect(WebCore::ShadowBlur *this, const WebCore::AffineTransform *a2, float64x2_t *a3, const WebCore::IntRect *a4, uint64_t a5)
{
  float v8;
  int v9;
  int v10;
  float v11;
  int v12;
  int v13;
  double v14;
  double v15;
  _BOOL4 v16;
  double v17;
  double v18;
  _BOOL4 v19;
  double v20;
  double v21;
  float v22;
  float v23;
  float32x4_t v24;
  double v25;
  double v26;
  BOOL v27;
  double v28;
  double v29;
  double v30;
  double v31;
  __int128 *v32;
  float64x2_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v42;
  float v43;
  float v44;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  int v67;
  int v68;
  float v69;
  float v70;
  int v71;
  int v72;
  int v73;
  float v74;
  float v75;
  int v76;
  int v77;
  float v78;
  uint64_t v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  int v86;
  int v87;
  int v88;
  int v89;
  BOOL v90;
  int v91;
  int v92;
  float v93;
  float v94;
  unint64_t v95;
  float v96;
  float v97;
  char v99;
  float v100;
  float v101;
  float32x4_t v102;
  double v103;
  double v104;
  double v105;
  double v106;
  float64x2_t v107[3];
  float32x4_t v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float32x4_t v113;
  float32x4_t v114;

  v8 = ceilf(*((float *)a2 + 4));
  if (v8 > -2147500000.0)
    v9 = (int)v8;
  else
    v9 = 0x80000000;
  if (v8 < 2147500000.0)
    v10 = v9;
  else
    v10 = 0x7FFFFFFF;
  v11 = ceilf(*((float *)a2 + 5));
  if (v11 >= 2147500000.0)
  {
    v13 = 0x7FFFFFFF;
  }
  else
  {
    if (v11 > -2147500000.0)
    {
      if (v10 == 1)
        v12 = 2;
      else
        v12 = v10;
      if ((int)v11 == 1)
        v13 = 2;
      else
        v13 = (int)v11;
      goto LABEL_15;
    }
    v13 = 0x80000000;
  }
  if (v10 == 1)
    v12 = 2;
  else
    v12 = v10;
LABEL_15:
  if (!*((_BYTE *)a2 + 32))
    goto LABEL_76;
  v14 = a3->f64[0];
  v15 = a3->f64[1];
  v16 = a3->f64[0] == 1.0;
  if (v15 != 0.0)
    v16 = 0;
  v18 = a3[1].f64[0];
  v17 = a3[1].f64[1];
  if (v18 != 0.0)
    v16 = 0;
  v19 = v17 == 1.0 && v16;
  v21 = a3[2].f64[0];
  v20 = a3[2].f64[1];
  if (v19 && v21 == 0.0 && v20 == 0.0)
  {
LABEL_76:
    v23 = *(float *)a4;
    v22 = *((float *)a4 + 1);
    v47 = *((float *)a4 + 2);
    v48 = *((float *)a4 + 3);
    v36 = *(float *)a4 + *((float *)a2 + 6);
    v42 = v22 + *((float *)a2 + 7);
    v51 = v48;
    v50 = v47;
  }
  else
  {
    v23 = *(float *)a4;
    v22 = *((float *)a4 + 1);
    v102.i64[0] = __PAIR64__(LODWORD(v22), LODWORD(v23));
    v100 = *((float *)a4 + 3);
    v101 = *((float *)a4 + 2);
    v102.f32[2] = v23 + v101;
    v102.f32[3] = v22;
    *(float *)&v103 = v23 + v101;
    *((float *)&v103 + 1) = v22 + v100;
    *(float *)&v104 = v23;
    *((float *)&v104 + 1) = v22 + v100;
    WebCore::AffineTransform::mapQuad(a3, &v102, &v113);
    v24.i64[0] = *((_QWORD *)a2 + 3);
    v24.i64[1] = v24.i64[0];
    v113 = vaddq_f32(v24, v113);
    v114 = vaddq_f32(v24, v114);
    v25 = v14 * v17 - v15 * v18;
    v26 = fabs(v25);
    v27 = (unint64_t)(*(_QWORD *)&v26 - 0x10000000000000) >> 53 > 0x3FE
       && (unint64_t)(*(_QWORD *)&v26 - 1) > 0xFFFFFFFFFFFFELL;
    if (v27)
    {
      v102.i8[0] = 0;
      v32 = &xmmword_1969F7DE0;
    }
    else
    {
      if (v19)
      {
        v30 = -v21;
        v31 = -v20;
        v102.i64[1] = 0;
        v103 = 0.0;
        v28 = 1.0;
        v29 = 1.0;
      }
      else
      {
        v28 = v17 / v25;
        v29 = v14 / v25;
        v30 = (v18 * v20 - v17 * v21) / v25;
        *(double *)&v102.i64[1] = -v15 / v25;
        v103 = -v18 / v25;
        v31 = (v15 * v21 - v14 * v20) / v25;
      }
      *(double *)v102.i64 = v28;
      v104 = v29;
      v105 = v30;
      v32 = (__int128 *)&v102;
      v106 = v31;
    }
    v33 = (float64x2_t)v32[1];
    v107[0] = (float64x2_t)*v32;
    v107[1] = v33;
    v107[2] = (float64x2_t)v32[2];
    WebCore::AffineTransform::mapQuad(v107, &v113, &v108);
    v35 = v109;
    v34 = v110;
    if (v111 >= v109)
      v36 = v109;
    else
      v36 = v111;
    v37 = v108.f32[1];
    v38 = v108.f32[0];
    if (v108.f32[2] >= v108.f32[0])
      v39 = v108.f32[0];
    else
      v39 = v108.f32[2];
    if (v36 >= v39)
      v36 = v39;
    v40 = fabsf(v36);
    if (v40 == INFINITY || v40 > 2147500000.0)
      v36 = (float)((SLODWORD(v36) >> 31) ^ 0x7FFFFFFF);
    if (v112 >= v110)
      v42 = v110;
    else
      v42 = v112;
    if (v108.f32[3] >= v108.f32[1])
      v43 = v108.f32[1];
    else
      v43 = v108.f32[3];
    if (v42 >= v43)
      v42 = v43;
    v44 = fabsf(v42);
    if (v44 == INFINITY || v44 > 2147500000.0)
      v42 = (float)((SLODWORD(v42) >> 31) ^ 0x7FFFFFFF);
    if (v108.f32[0] < v108.f32[2])
      v38 = v108.f32[2];
    if (v109 < v111)
      v35 = v111;
    if (v38 >= v35)
      v35 = v38;
    v46 = fabsf(v35);
    if (v46 == INFINITY || v46 > 2147500000.0)
      v35 = (float)((SLODWORD(v35) >> 31) ^ 0x7FFFFFFF);
    v48 = v100;
    v47 = v101;
    if (v108.f32[1] < v108.f32[3])
      v37 = v108.f32[3];
    if (v110 < v112)
      v34 = v112;
    if (v37 >= v34)
      v34 = v37;
    v49 = fabsf(v34);
    if (v49 == INFINITY || v49 > 2147500000.0)
      v34 = (float)((SLODWORD(v34) >> 31) ^ 0x7FFFFFFF);
    v50 = v35 - v36;
    v51 = v34 - v42;
  }
  v52 = *(float *)a2;
  v53 = 0.0;
  if (*(_DWORD *)a2 == 2)
  {
    v53 = (float)v12;
    v36 = v36 - (float)v12;
    v50 = (float)(v50 + (float)v12) + (float)v12;
    v54 = (float)v13;
    v42 = v42 - (float)v13;
    v51 = (float)(v51 + (float)v13) + (float)v13;
  }
  else
  {
    v54 = 0.0;
  }
  v55 = floorf(v36);
  v56 = -2147500000.0;
  if (v55 > -2147500000.0)
    v56 = (float)(int)v55;
  if (v55 >= 2147500000.0)
    v56 = 2147500000.0;
  v57 = floorf(v42);
  v58 = -2147500000.0;
  if (v57 > -2147500000.0)
    v58 = (float)(int)v57;
  if (v57 >= 2147500000.0)
    v58 = 2147500000.0;
  v59 = v50 + v36;
  v60 = v51 + v42;
  v61 = ceilf(v50 + v36);
  v62 = 2147500000.0;
  if (v61 < 2147500000.0)
  {
    v62 = -2147500000.0;
    v27 = v61 <= -2147500000.0;
    v63 = (float)(int)v61;
    if (!v27)
      v62 = v63;
  }
  v64 = ceilf(v60);
  v65 = 2147500000.0;
  if (v64 < 2147500000.0)
  {
    v65 = -2147500000.0;
    v27 = v64 <= -2147500000.0;
    v66 = (float)(int)v64;
    if (!v27)
      v65 = v66;
  }
  if (v56 >= 2147500000.0)
  {
    v67 = 0x7FFFFFFF;
  }
  else if (v56 <= -2147500000.0)
  {
    v67 = 0x80000000;
  }
  else
  {
    v67 = (int)v56;
  }
  if (v58 >= 2147500000.0)
  {
    v68 = 0x7FFFFFFF;
  }
  else if (v58 <= -2147500000.0)
  {
    v68 = 0x80000000;
  }
  else
  {
    v68 = (int)v58;
  }
  v69 = v62 - v56;
  v70 = v65 - v58;
  if (v69 >= 2147500000.0)
  {
    v71 = 0x7FFFFFFF;
  }
  else if (v69 <= -2147500000.0)
  {
    v71 = 0x80000000;
  }
  else
  {
    v71 = (int)v69;
  }
  if (v70 >= 2147500000.0)
  {
    v72 = 0x7FFFFFFF;
  }
  else if (v70 <= -2147500000.0)
  {
    v72 = 0x80000000;
  }
  else
  {
    v72 = (int)v70;
  }
  if (*(_DWORD *)a5 > v67
    || *(_DWORD *)(a5 + 8) + *(_DWORD *)a5 < v71 + v67
    || (v73 = *(_DWORD *)(a5 + 4), v73 > v68)
    || (v74 = v42, v75 = v36, *(_DWORD *)(a5 + 12) + v73 < v72 + v68))
  {
    v77 = *(_DWORD *)a5;
    v76 = *(_DWORD *)(a5 + 4);
    v78 = (float)v76;
    v79 = *(_QWORD *)(a5 + 8);
    v80 = (float)SHIDWORD(v79);
    if (v36 >= (float)*(int *)a5)
      v81 = v36;
    else
      v81 = (float)v77;
    if (v42 >= v78)
      v82 = v42;
    else
      v82 = (float)v76;
    if ((float)((float)v77 + (float)(int)v79) >= v59)
      v83 = v59;
    else
      v83 = (float)v77 + (float)(int)v79;
    v84 = v78 + v80;
    if ((float)(v78 + v80) >= v60)
      v84 = v60;
    if (v81 >= v83 || v82 >= v84)
    {
      v81 = 0.0;
      v82 = 0.0;
      v83 = 0.0;
      v84 = 0.0;
    }
    if ((float)(v83 - v81) <= 0.0 || (float)(v84 - v82) <= 0.0)
    {
      v99 = 0;
      *(_BYTE *)this = 0;
      goto LABEL_155;
    }
    v86 = v77 - 1;
    v87 = v76 - 1;
    v88 = v77 - v12;
    v89 = v76 - v13;
    v90 = LODWORD(v52) == 2;
    if (LODWORD(v52) == 2)
      v91 = v89;
    else
      v91 = v87;
    if (v90)
      v92 = v88;
    else
      v92 = v86;
    v93 = (float)v92;
    v94 = (float)v91;
    if (v90)
      v95 = (v79 + 2 * v12) | ((unint64_t)(HIDWORD(v79) + 2 * v13) << 32);
    else
      v95 = (v79 & 0xFFFFFFFF00000000 | (v79 + 2)) + 0x200000000;
    if (v36 >= v93)
      v75 = v36;
    else
      v75 = (float)v92;
    if (v42 >= v94)
      v74 = v42;
    else
      v74 = v94;
    v96 = v93 + (float)(int)v95;
    if (v96 >= v59)
      v96 = v59;
    v97 = v94 + (float)SHIDWORD(v95);
    if (v97 < v60)
      v60 = v97;
    if (v75 >= v96 || v74 >= v60)
    {
      v75 = 0.0;
      v74 = 0.0;
      v96 = 0.0;
      v60 = 0.0;
    }
    v50 = v96 - v75;
    v51 = v60 - v74;
  }
  *(float *)this = v47 + (float)(int)(float)(v53 + v53);
  *((float *)this + 1) = v48 + (float)(int)(float)(v54 + v54);
  *((float *)this + 2) = v75;
  *((float *)this + 3) = v74;
  *((float *)this + 4) = v50;
  *((float *)this + 5) = v51;
  *((float *)this + 6) = (float)(v53 - v23) - vabds_f32(v36, v75);
  *((float *)this + 7) = (float)(v54 - v22) - vabds_f32(v42, v74);
  v99 = 1;
LABEL_155:
  *((_BYTE *)this + 32) = v99;
}

uint64_t WebCore::ShadowBlur::drawShadowBuffer(WebCore::ShadowBlur *this, WebCore::GraphicsContext *a2, WebCore::ImageBuffer *a3, const WebCore::FloatPoint *a4, const WebCore::FloatSize *a5)
{
  unint64_t v10;
  float v11;
  float v12;
  __n128 v13;
  __n128 v14;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;

  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  v10 = WebCore::ImageBuffer::calculateBackendSize(*((float *)a3 + 4), *((float *)a3 + 5), *((float *)a3 + 6));
  v11 = (float)(int)v10;
  v12 = (float)SHIDWORD(v10);
  v13.n128_u32[0] = *(_DWORD *)a5;
  v14.n128_u32[0] = *((_DWORD *)a5 + 1);
  if (*(float *)a5 != (float)(int)v10 || v14.n128_f32[0] != v12)
  {
    v16 = *(_QWORD *)a5;
    v23 = *(_QWORD *)a4;
    v24 = v16;
    (*(void (**)(WebCore::GraphicsContext *, uint64_t *, __n128, __n128))(*(_QWORD *)a2 + 456))(a2, &v23, v13, v14);
  }
  v23 = *(_QWORD *)a4;
  v24 = __PAIR64__(LODWORD(v12), LODWORD(v11));
  (*(void (**)(WebCore::GraphicsContext *, WebCore::ImageBuffer *, uint64_t *))(*(_QWORD *)a2 + 504))(a2, a3, &v23);
  WebCore::GraphicsContext::setFillColor(a2, (WebCore::ShadowBlur *)((char *)this + 8));
  LOBYTE(v23) = 0;
  v26 = 0;
  WebCore::GraphicsContextState::setDropShadow((uint64_t)a2 + 8, (uint64_t)&v23);
  if (v26)
  {
    if ((v25 & 0x8000000000000) != 0)
    {
      v20 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v17);
      }
    }
  }
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
  v18 = *(_QWORD *)a5;
  v23 = *(_QWORD *)a4;
  v24 = v18;
  (*(void (**)(WebCore::GraphicsContext *, uint64_t *, uint64_t))(*(_QWORD *)a2 + 216))(a2, &v23, 1);
  return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
}

void WebCore::ShadowBlur::drawRectShadow(float32x2_t *a1, float64x2_t *a2, uint64_t a3, float *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7)
{
  WTF::RunLoop *v13;
  double v14;
  long double v15;
  float32x2_t v17;
  BOOL v22;
  float v23;
  int v24;
  float v25;
  int v26;
  float v27;
  float v28;
  float v29;
  int v30;
  float v31;
  float v32;
  float v33;
  int v34;
  float v35;
  int v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  float v42;
  int v43;
  float v44;
  float v45;
  unint64_t v46;
  WebCore::GraphicsContext *v47;
  void *v48;
  WebCore::GraphicsContext *v49;
  void *v50;
  double v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  WebCore::ImageBuffer *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  int v66;
  int v67;
  uint64_t *v68;
  WTF::RunLoop *v69;
  void *v70;
  WebCore::ImageBuffer *v71;
  uint64_t *v72;
  float32x2_t *v73;
  unint64_t v74;
  float32x2_t v75;
  float32x2_t v76;
  __int128 v77;
  char v78;
  void *v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  int v86;
  int v87;
  float v88;
  float v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  _QWORD *v96;
  _QWORD *v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t *v107;
  long double v108;
  WTF::RunLoop *v109;
  WTF::RunLoop *v110;
  uint64_t v111;
  int32x2_t v112;
  float v113[2];
  int v114;
  uint64_t v115;
  float v116;
  float v117;
  char v118;
  float32x2_t v119;
  WebCore::ImageBuffer *v120[2];
  char v121;
  WebCore::ImageBuffer *v122;
  uint64_t v123;
  _QWORD v124[7];
  int v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  WebCore::ShadowBlur::calculateLayerBoundingRect((WebCore::ShadowBlur *)v113, (const WebCore::AffineTransform *)a1, a2, (const WebCore::IntRect *)a4, a3);
  if (!v118)
    return;
  v14 = a2->f64[1];
  if (a1[4].i8[0])
  {
    v108 = hypot(a2->f64[0], a2->f64[1]);
    v15 = hypot(a2[1].f64[0], a2[1].f64[1]);
    _Q1.f64[0] = v108;
    _Q1.f64[1] = v15;
    v17 = vcvt_f32_f64(_Q1);
    __asm { FMOV            V1.2S, #1.0 }
    a1[2] = vmul_f32(vdiv_f32(*(float32x2_t *)&_Q1.f64[0], v17), a1[2]);
  }
  v22 = (v14 != 0.0 || a2[1].f64[0] != 0.0) && (a2->f64[0] != 0.0 || a2[1].f64[1] != 0.0) || a1->i32[0] != 2;
  v23 = ceilf(a1[2].f32[0]);
  if (v23 >= 2147500000.0)
  {
    v24 = 0x7FFFFFFF;
  }
  else if (v23 <= -2147500000.0)
  {
    v24 = 0x80000000;
  }
  else
  {
    v24 = (int)v23;
  }
  v25 = ceilf(a1[2].f32[1]);
  if (v25 >= 2147500000.0)
  {
    v26 = 0x7FFFFFFF;
  }
  else
  {
    if (v25 > -2147500000.0)
    {
      v26 = (int)v25;
      if (v24 == 1)
        v24 = 2;
      if (v26 == 1)
        v26 = 2;
      goto LABEL_20;
    }
    v26 = 0x80000000;
  }
  if (v24 == 1)
    v24 = 2;
LABEL_20:
  v27 = a4[4];
  v28 = (float)(int)(float)((float)v24 + (float)v24);
  v29 = a4[7];
  if (v27 < a4[8])
    v27 = a4[8];
  v30 = (int)(float)(v27 + v28);
  v32 = a4[5];
  v31 = a4[6];
  v33 = a4[9];
  if (v31 < a4[10])
    v31 = a4[10];
  v112.i32[0] = v24;
  v112.i32[1] = v26;
  v34 = (int)(float)(v31 + v28);
  v35 = (float)(int)(float)((float)v26 + (float)v26);
  if (v32 < v29)
    v32 = v29;
  v36 = (int)(float)(v32 + v35);
  v37 = a4[11];
  if (v33 >= v37)
    v37 = v33;
  v38 = (v30 + v34 + 1);
  v39 = (v36 + (int)(float)(v37 + v35) + 1);
  v111 = v38 | (v39 << 32);
  if (a4[2] < (float)(int)v38 || a4[3] < (float)(int)v39)
    goto LABEL_39;
  if ((int)v39 >= 0)
    v40 = v36 + (int)(float)(v37 + v35) + 1;
  else
    v40 = -(int)v39;
  if ((int)v38 >= 0)
    v41 = v38;
  else
    v41 = -(int)v38;
  if ((float)(v113[0] * v113[1]) < (float)(v40 * (unint64_t)v41))
    v22 = 1;
  if (v22)
  {
LABEL_39:
    v42 = ceilf(*(float *)&v115);
    if (v42 >= 2147500000.0)
    {
      v43 = 0x7FFFFFFF;
    }
    else if (v42 <= -2147500000.0)
    {
      v43 = 0x80000000;
    }
    else
    {
      v43 = (int)v42;
    }
    v44 = ceilf(*((float *)&v115 + 1));
    v45 = 2147500000.0;
    if (v44 < 2147500000.0)
    {
      v45 = -2147500000.0;
      if (v44 > -2147500000.0)
        v45 = (float)(int)v44;
    }
    *(float *)&v122 = (float)v43;
    *((float *)&v122 + 1) = v45;
    v46 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v46 != -1)
    {
      v123 = (uint64_t)&v119;
      v120[0] = (WebCore::ImageBuffer *)&v123;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v120, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v123 = 0;
    v124[0] = 0;
    WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>((float *)&v122, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, (uint64_t *)v120, 1.0);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)v124 + 4));
    if (v120[0])
    {
      v47 = (WebCore::GraphicsContext *)(*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)v120[0] + 16))(v120[0]);
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v47 + 96))(v47, 1);
      v123 = 0x11040000000000FFLL;
      WebCore::GraphicsContext::setFillColor(v47, (const WebCore::Color *)&v123);
      if ((v123 & 0x8000000000000) != 0)
      {
        v98 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFLL);
        do
        {
          v99 = __ldaxr(v98);
          v100 = v99 - 1;
        }
        while (__stlxr(v100, v98));
        if (!v100)
        {
          atomic_store(1u, v98);
          WTF::fastFree((WTF *)v98, v48);
        }
      }
      v49 = (WebCore::GraphicsContext *)(*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)v120[0] + 16))(v120[0]);
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v49 + 96))(v49, 1);
      (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)v49 + 648))(v49, v116, v117);
      v123 = 0x11040000000000FFLL;
      WebCore::GraphicsContext::setFillColor(v49, (const WebCore::Color *)&v123);
      if ((v123 & 0x8000000000000) != 0)
      {
        v101 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFLL);
        do
        {
          v102 = __ldaxr(v101);
          v103 = v102 - 1;
        }
        while (__stlxr(v103, v101));
        if (!v103)
        {
          atomic_store(1u, v101);
          WTF::fastFree((WTF *)v101, v50);
        }
      }
      if (WebCore::FloatRoundedRect::Radii::isZero((WebCore::FloatRoundedRect::Radii *)(a4 + 4)))
      {
        (*(void (**)(WebCore::GraphicsContext *, float *, uint64_t))(*(_QWORD *)v49 + 216))(v49, a4, 1);
      }
      else
      {
        v125 = 0;
        v51 = WebCore::Path::addRoundedRect((WebCore::Path *)&v123, (WebCore::FloatRect *)a4, 0);
        (*(void (**)(WebCore::GraphicsContext *, uint64_t *, double))(*(_QWORD *)v49 + 176))(v49, &v123, v51);
        if (v125 != -1)
          ((void (*)(WebCore::ImageBuffer **, _QWORD *))off_1E340F5D0[v125])(&v122, v124);
      }
      v52 = ceilf(*(float *)&v115);
      v53 = 0x7FFFFFFFLL;
      v54 = (int)v52;
      if (v52 <= -2147500000.0)
        v54 = 0x80000000;
      if (v52 < 2147500000.0)
        v53 = v54;
      v55 = ceilf(*((float *)&v115 + 1));
      v56 = 0x7FFFFFFF00000000;
      v57 = 0x8000000000000000;
      if (v55 > -2147500000.0)
        v57 = (unint64_t)(int)v55 << 32;
      if (v55 < 2147500000.0)
        v56 = v57;
      v123 = v56 | v53;
      WebCore::ShadowBlur::blurShadowBuffer((WebCore::ShadowBlur *)a1, v120[0], (const WebCore::IntSize *)&v123);
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v49 + 104))(v49, 1);
      (*(void (**)(_QWORD, WebCore::ImageBuffer *, int *, uint64_t *))(*(_QWORD *)*a5 + 16))(*a5, v120[0], &v114, &v115);
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v47 + 104))(v47, 1);
      v59 = v120[0];
      v120[0] = 0;
      if (v59)
      {
LABEL_63:
        v60 = *((_QWORD *)v59 + 1);
        if (__ldaxr((unsigned __int8 *)v60))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v60))
        {
          goto LABEL_67;
        }
        MEMORY[0x19AEA534C](v60);
LABEL_67:
        v62 = *(_QWORD *)(v60 + 8);
        v63 = v62 - 1;
        *(_QWORD *)(v60 + 8) = v62 - 1;
        if (v62 == 1)
        {
          v92 = *(_QWORD *)(v60 + 16);
          v64 = *(_QWORD *)(v60 + 24);
          *(_QWORD *)(v60 + 24) = 0;
          v65 = v92 != 0;
        }
        else
        {
          v64 = 0;
          v65 = 1;
        }
        v66 = __ldxr((unsigned __int8 *)v60);
        if (v66 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v60))
          {
            if (v63)
              return;
LABEL_75:
            if (v64)
              (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
            if (!v65)
              WTF::fastFree((WTF *)v60, v58);
            return;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v60);
        if (v63)
          return;
        goto LABEL_75;
      }
    }
  }
  else
  {
    *(float *)v120 = (float)v24;
    *((float *)v120 + 1) = (float)v26;
    *(float *)&v120[1] = (float)(v38 - 2 * v24);
    *((float *)&v120[1] + 1) = (float)(v39 - 2 * v26);
    while ((_MergedGlobals_228 & 1) == 0)
    {
      v67 = __ldaxr((unsigned __int8 *)&_MergedGlobals_228);
      if (v67 == _MergedGlobals_228)
      {
        if (!__stxr(_MergedGlobals_228 | 1, (unsigned __int8 *)&_MergedGlobals_228))
        {
          v68 = &qword_1ECE83000;
          if ((byte_1ECE83DC9 & 1) == 0)
          {
            qword_1ECE83DD0 = 0;
            v109 = (WTF::RunLoop *)WTF::RunLoop::main(v13);
            v96 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
            *v96 = off_1E340FA68;
            v96[1] = WebCore::ScratchBuffer::purgeTimerFired;
            v96[2] = 0;
            v96[3] = &qword_1ECE83DD0;
            WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)qword_1ECE83DD8, v109);
            qword_1ECE83DD8[0] = off_1E32051C0;
            qword_1ECE83DD8[3] = v96;
            v68 = &qword_1ECE83000;
            *(_QWORD *)&dword_1ECE83E4C = 0;
            xmmword_1ECE83DF8 = 0u;
            xmmword_1ECE83E08 = 0u;
            xmmword_1ECE83E18 = 0u;
            *(_OWORD *)&dword_1ECE83E28 = 0u;
            *(_OWORD *)&qword_1ECE83E38 = 0u;
            byte_1ECE83E48 = 0;
            byte_1ECE83DC9 = 1;
          }
          WebCore::ScratchBuffer::getScratchBuffer((WebCore::ScratchBuffer *)&v123, (const WebCore::IntSize *)v111, SHIDWORD(v111));
          v71 = (WebCore::ImageBuffer *)v123;
          if (v123)
          {
            v72 = &qword_1ECE83000;
            if ((*((_BYTE *)v68 + 3529) & 1) != 0)
            {
              v73 = a1 + 1;
              if (byte_1ECE83E48)
              {
                v74 = qword_1ECE83E38;
                goto LABEL_91;
              }
              v88 = *((float *)&qword_1ECE83E40 + 1);
              v89 = *(float *)&qword_1ECE83E40;
              v74 = qword_1ECE83E38;
            }
            else
            {
              qword_1ECE83DD0 = 0;
              v110 = (WTF::RunLoop *)WTF::RunLoop::main(v69);
              v97 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
              *v97 = off_1E340FA68;
              v97[1] = WebCore::ScratchBuffer::purgeTimerFired;
              v97[2] = 0;
              v97[3] = &qword_1ECE83DD0;
              WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)qword_1ECE83DD8, v110);
              v72 = &qword_1ECE83000;
              v74 = 0;
              qword_1ECE83DD8[0] = off_1E32051C0;
              qword_1ECE83DD8[3] = v97;
              *(_QWORD *)&dword_1ECE83E4C = 0;
              xmmword_1ECE83DF8 = 0u;
              xmmword_1ECE83E08 = 0u;
              xmmword_1ECE83E18 = 0u;
              *(_OWORD *)&dword_1ECE83E28 = 0u;
              byte_1ECE83DC9 = 1;
              v73 = a1 + 1;
              *(_OWORD *)&qword_1ECE83E38 = 0u;
              v88 = 0.0;
              v89 = 0.0;
              byte_1ECE83E48 = 0;
            }
            if (v89 != a1[2].f32[0] || v88 != a1[2].f32[1])
              goto LABEL_91;
            v90 = (unint64_t)*v73;
            if ((v74 & 0x8000000000000) != 0)
            {
              if ((v90 & 0x8000000000000) == 0
                || *(float *)((v74 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 4)
                || *(float *)((v74 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 8)
                || *(float *)((v74 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 0xC)
                || *(float *)((v74 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 0x10)
                || HIBYTE(v74) != HIBYTE(v90)
                || BYTE6(v74) != BYTE6(v90))
              {
                goto LABEL_91;
              }
LABEL_124:
              if (*(float *)&xmmword_1ECE83E08 != *(float *)v120
                || *((float *)&xmmword_1ECE83E08 + 1) != *((float *)v120 + 1)
                || *((float *)&xmmword_1ECE83E08 + 2) != *(float *)&v120[1]
                || *((float *)&xmmword_1ECE83E08 + 3) != *((float *)&v120[1] + 1)
                || *(float *)&xmmword_1ECE83E18 != a4[4]
                || *((float *)&xmmword_1ECE83E18 + 1) != a4[5]
                || *((float *)&xmmword_1ECE83E18 + 2) != a4[6]
                || *((float *)&xmmword_1ECE83E18 + 3) != a4[7]
                || *(float *)&dword_1ECE83E28 != a4[8]
                || *(float *)&dword_1ECE83E2C != a4[9]
                || *(float *)&dword_1ECE83E30 != a4[10]
                || *(float *)&dword_1ECE83E34 != a4[11]
                || *(float *)&dword_1ECE83E4C != *(float *)&v115
                || *(float *)&dword_1ECE83E50 != *((float *)&v115 + 1))
              {
                goto LABEL_91;
              }
              v78 = 0;
            }
            else
            {
              if (v74 == v90 && (v90 & 0x8000000000000) == 0)
                goto LABEL_124;
LABEL_91:
              byte_1ECE83E48 = 0;
              qword_1ECE83E40 = (uint64_t)a1[2];
              v75 = a1[1];
              if ((v74 & 0x8000000000000) != 0)
              {
                v104 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFLL);
                if ((*(_QWORD *)&v75 & 0x8000000000000) == 0
                  || *(float *)((v74 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*(_QWORD *)&v75 & 0xFFFFFFFFFFFFLL) + 4)
                  || *(float *)((v74 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*(_QWORD *)&v75 & 0xFFFFFFFFFFFFLL) + 8)
                  || *(float *)((v74 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*(_QWORD *)&v75 & 0xFFFFFFFFFFFFLL) + 0xC)
                  || *(float *)((v74 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*(_QWORD *)&v75 & 0xFFFFFFFFFFFFLL)
                                                                             + 0x10)
                  || HIBYTE(v74) != HIBYTE(*(_QWORD *)&v75)
                  || BYTE6(v74) != v75.u8[6])
                {
                  do
                  {
                    v105 = __ldaxr(v104);
                    v106 = v105 - 1;
                  }
                  while (__stlxr(v106, v104));
                  if (!v106)
                  {
                    atomic_store(1u, v104);
                    v107 = v72;
                    WTF::fastFree((WTF *)v104, v70);
                    v72 = v107;
                  }
LABEL_94:
                  v76 = *v73;
                  v72[455] = (uint64_t)*v73;
                  if ((*(_QWORD *)&v76 & 0x8000000000000) != 0)
                  {
                    v94 = (unsigned int *)(*(_QWORD *)&v76 & 0xFFFFFFFFFFFFLL);
                    do
                      v95 = __ldaxr(v94);
                    while (__stlxr(v95 + 1, v94));
                  }
                }
              }
              else if (v74 != *(_QWORD *)&v75 || (*(_QWORD *)&v75 & 0x8000000000000) != 0)
              {
                goto LABEL_94;
              }
              xmmword_1ECE83E08 = *(_OWORD *)v120;
              v77 = *((_OWORD *)a4 + 2);
              xmmword_1ECE83E18 = *((_OWORD *)a4 + 1);
              *(_OWORD *)&dword_1ECE83E28 = v77;
              *(_QWORD *)&dword_1ECE83E4C = v115;
              v78 = 1;
              v71 = (WebCore::ImageBuffer *)v123;
            }
            WebCore::ShadowBlur::drawRectShadowWithTilingWithLayerImageBuffer(a1, v71, (long double *)a2->f64, (uint64_t)a4, (int32x2_t *)&v111, &v112, a6, a7, v120, v78);
            v123 = 0;
            v80 = *((_QWORD *)v71 + 1);
            if (__ldaxr((unsigned __int8 *)v80))
            {
              __clrex();
              goto LABEL_99;
            }
            if (__stxr(1u, (unsigned __int8 *)v80))
LABEL_99:
              MEMORY[0x19AEA534C](v80);
            v82 = *(_QWORD *)(v80 + 8);
            v83 = v82 - 1;
            *(_QWORD *)(v80 + 8) = v82 - 1;
            if (v82 == 1)
            {
              v93 = *(_QWORD *)(v80 + 16);
              v84 = *(_QWORD *)(v80 + 24);
              *(_QWORD *)(v80 + 24) = 0;
              v85 = v93 != 0;
            }
            else
            {
              v84 = 0;
              v85 = 1;
            }
            v86 = __ldxr((unsigned __int8 *)v80);
            if (v86 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v80))
                goto LABEL_107;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v80);
LABEL_107:
            if (!v83)
            {
              if (v84)
                (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
              if (!v85)
                WTF::fastFree((WTF *)v80, v79);
            }
          }
          v87 = __ldxr((unsigned __int8 *)&_MergedGlobals_228);
          if (v87 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_228))
              return;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_228);
          return;
        }
      }
      else
      {
        __clrex();
      }
    }
    v119 = vcvt_f32_s32((int32x2_t)v111);
    v91 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v91 != -1)
    {
      v123 = (uint64_t)&v121;
      v122 = (WebCore::ImageBuffer *)&v123;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v122, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v123 = 0;
    v124[0] = 0;
    WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>((float *)&v119, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, (uint64_t *)&v122, 1.0);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)v124 + 4));
    if (v122)
    {
      WebCore::ShadowBlur::drawRectShadowWithTilingWithLayerImageBuffer(a1, v122, (long double *)a2->f64, (uint64_t)a4, (int32x2_t *)&v111, &v112, a6, a7, v120, 1);
      v59 = v122;
      v122 = 0;
      if (v59)
        goto LABEL_63;
    }
  }
}

void WebCore::ShadowBlur::drawInsetShadow(float32x2_t *a1, float64x2_t *a2, uint64_t a3, const WebCore::IntRect *a4, float *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  WTF::RunLoop *v15;
  double v16;
  long double v17;
  float32x2_t v19;
  BOOL v23;
  float v24;
  int v25;
  float v26;
  int v27;
  float v28;
  float v29;
  float v30;
  int v31;
  float v32;
  float v33;
  float v34;
  int v35;
  float v36;
  int v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  int v44;
  float v45;
  float v46;
  unint64_t v47;
  WebCore::GraphicsContext *v48;
  __n128 v49;
  void *v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  WebCore::ImageBuffer *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  int v65;
  int v66;
  WTF::RunLoop *v67;
  void *v68;
  WebCore::ImageBuffer **v69;
  uint64_t *v70;
  unint64_t v71;
  float32x2_t v73;
  uint64_t v74;
  __int128 v75;
  char v76;
  void *v77;
  WebCore::ImageBuffer *v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  _QWORD *v92;
  _QWORD *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t *v100;
  long double v101;
  WTF::RunLoop *v102;
  WTF::RunLoop *v103;
  uint64_t v104;
  int32x2_t v105;
  char v106[8];
  int v107;
  float v108;
  float v109;
  float v110;
  float v111;
  char v112;
  float32x2_t v113;
  __int128 v114;
  WebCore::ImageBuffer *v115[2];
  char v116;
  WebCore::ImageBuffer ***v117;
  WebCore::ImageBuffer **v118;
  _QWORD v119[7];
  int v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  WebCore::ShadowBlur::calculateLayerBoundingRect((WebCore::ShadowBlur *)v106, (const WebCore::AffineTransform *)a1, a2, a4, a3);
  if (!v112)
    return;
  v16 = a2->f64[1];
  if (a1[4].i8[0])
  {
    v101 = hypot(a2->f64[0], a2->f64[1]);
    v17 = hypot(a2[1].f64[0], a2[1].f64[1]);
    _Q1.f64[0] = v101;
    _Q1.f64[1] = v17;
    v19 = vcvt_f32_f64(_Q1);
    __asm { FMOV            V1.2S, #1.0 }
    a1[2] = vmul_f32(vdiv_f32(*(float32x2_t *)&_Q1.f64[0], v19), a1[2]);
  }
  v23 = (v16 != 0.0 || a2[1].f64[0] != 0.0) && (a2->f64[0] != 0.0 || a2[1].f64[1] != 0.0) || a1->i32[0] != 2;
  v24 = ceilf(a1[2].f32[0]);
  if (v24 >= 2147500000.0)
  {
    v25 = 0x7FFFFFFF;
  }
  else if (v24 <= -2147500000.0)
  {
    v25 = 0x80000000;
  }
  else
  {
    v25 = (int)v24;
  }
  v26 = ceilf(a1[2].f32[1]);
  if (v26 >= 2147500000.0)
  {
    v27 = 0x7FFFFFFF;
  }
  else
  {
    if (v26 > -2147500000.0)
    {
      v27 = (int)v26;
      if (v25 == 1)
        v25 = 2;
      if (v27 == 1)
        v27 = 2;
      goto LABEL_20;
    }
    v27 = 0x80000000;
  }
  if (v25 == 1)
    v25 = 2;
LABEL_20:
  v28 = a5[4];
  v29 = (float)(int)(float)((float)v25 + (float)v25);
  v30 = a5[7];
  if (v28 < a5[8])
    v28 = a5[8];
  v31 = (int)(float)(v28 + v29);
  v33 = a5[5];
  v32 = a5[6];
  v34 = a5[9];
  if (v32 < a5[10])
    v32 = a5[10];
  v105.i32[0] = v25;
  v105.i32[1] = v27;
  v35 = (int)(float)(v32 + v29);
  v36 = (float)(int)(float)((float)v27 + (float)v27);
  if (v33 < v30)
    v33 = v30;
  v37 = (int)(float)(v33 + v36);
  v38 = a5[11];
  if (v34 >= v38)
    v38 = v34;
  v39 = (v31 + v35 + 1);
  v40 = (v37 + (int)(float)(v38 + v36) + 1);
  v104 = v39 | (v40 << 32);
  v41 = a5[2];
  if (v41 < (float)(int)v39)
    goto LABEL_33;
  v42 = a5[3];
  if (v42 < (float)(int)v40)
    goto LABEL_33;
  if ((float)(v41 * v42) < (float)(v40 * v39))
    v23 = 1;
  if (v23)
  {
LABEL_33:
    v43 = ceilf(v108);
    if (v43 >= 2147500000.0)
    {
      v44 = 0x7FFFFFFF;
    }
    else if (v43 <= -2147500000.0)
    {
      v44 = 0x80000000;
    }
    else
    {
      v44 = (int)v43;
    }
    v45 = ceilf(v109);
    v46 = 2147500000.0;
    if (v45 < 2147500000.0)
    {
      v46 = -2147500000.0;
      if (v45 > -2147500000.0)
        v46 = (float)(int)v45;
    }
    *(float *)&v114 = (float)v44;
    *((float *)&v114 + 1) = v46;
    v47 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v47 != -1)
    {
      v118 = (WebCore::ImageBuffer **)&v117;
      v115[0] = (WebCore::ImageBuffer *)&v118;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v115, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v118 = 0;
    v119[0] = 0;
    WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>((float *)&v114, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, (uint64_t *)v115, 1.0);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)v119 + 4));
    if (v115[0])
    {
      v48 = (WebCore::GraphicsContext *)(*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)v115[0] + 16))(v115[0]);
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v48 + 96))(v48, 1);
      (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)v48 + 648))(v48, v110, v111);
      v120 = 0;
      WebCore::Path::addRect((WebCore::Path *)&v118, a4);
      if (WebCore::FloatRoundedRect::Radii::isZero((WebCore::FloatRoundedRect::Radii *)(a5 + 4)))
        v49.n128_f64[0] = WebCore::Path::addRect((WebCore::Path *)&v118, (const WebCore::FloatRect *)a5);
      else
        v49.n128_f64[0] = WebCore::Path::addRoundedRect((WebCore::Path *)&v118, (WebCore::FloatRect *)a5, 0);
      if (!*((_BYTE *)v48 + 192))
      {
        *((_BYTE *)v48 + 192) = 1;
        *((_DWORD *)v48 + 46) |= 2u;
      }
      (*(void (**)(WebCore::GraphicsContext *, uint64_t, __n128))(*(_QWORD *)v48 + 88))(v48, (uint64_t)v48 + 8, v49);
      *(_QWORD *)&v114 = 0x11040000000000FFLL;
      WebCore::GraphicsContext::setFillColor(v48, (const WebCore::Color *)&v114);
      if ((v114 & 0x8000000000000) != 0)
      {
        v94 = (unsigned int *)(v114 & 0xFFFFFFFFFFFFLL);
        do
        {
          v95 = __ldaxr(v94);
          v96 = v95 - 1;
        }
        while (__stlxr(v96, v94));
        if (!v96)
        {
          atomic_store(1u, v94);
          WTF::fastFree((WTF *)v94, v50);
        }
      }
      (*(void (**)(WebCore::GraphicsContext *, WebCore::ImageBuffer ***))(*(_QWORD *)v48 + 176))(v48, &v118);
      v51 = ceilf(v108);
      v52 = 0x7FFFFFFFLL;
      v53 = (int)v51;
      if (v51 <= -2147500000.0)
        v53 = 0x80000000;
      if (v51 < 2147500000.0)
        v52 = v53;
      v54 = ceilf(v109);
      v55 = 0x7FFFFFFF00000000;
      v56 = 0x8000000000000000;
      if (v54 > -2147500000.0)
        v56 = (unint64_t)(int)v54 << 32;
      if (v54 < 2147500000.0)
        v55 = v56;
      *(_QWORD *)&v114 = v55 | v52;
      WebCore::ShadowBlur::blurShadowBuffer((WebCore::ShadowBlur *)a1, v115[0], (const WebCore::IntSize *)&v114);
      if (v120 != -1)
        ((void (*)(__int128 *, _QWORD *))off_1E340F5D0[v120])(&v114, v119);
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v48 + 104))(v48, 1);
      (*(void (**)(_QWORD, WebCore::ImageBuffer *, int *, float *))(*(_QWORD *)*a6 + 16))(*a6, v115[0], &v107, &v108);
      v58 = v115[0];
      v115[0] = 0;
      if (v58)
      {
LABEL_59:
        v59 = *((_QWORD *)v58 + 1);
        if (__ldaxr((unsigned __int8 *)v59))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v59))
        {
          goto LABEL_63;
        }
        MEMORY[0x19AEA534C](v59);
LABEL_63:
        v61 = *(_QWORD *)(v59 + 8);
        v62 = v61 - 1;
        *(_QWORD *)(v59 + 8) = v61 - 1;
        if (v61 == 1)
        {
          v88 = *(_QWORD *)(v59 + 16);
          v63 = *(_QWORD *)(v59 + 24);
          *(_QWORD *)(v59 + 24) = 0;
          v64 = v88 != 0;
        }
        else
        {
          v63 = 0;
          v64 = 1;
        }
        v65 = __ldxr((unsigned __int8 *)v59);
        if (v65 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v59))
          {
            if (v62)
              return;
LABEL_71:
            if (v63)
              (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
            if (!v64)
              WTF::fastFree((WTF *)v59, v57);
            return;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v59);
        if (v62)
          return;
        goto LABEL_71;
      }
    }
  }
  else
  {
    v115[0] = 0;
    *(float *)&v115[1] = (float)(int)v39;
    *((float *)&v115[1] + 1) = (float)(int)v40;
    *(float *)&v114 = (float)v25;
    *((float *)&v114 + 1) = (float)v27;
    *((float *)&v114 + 2) = (float)(v39 - 2 * v25);
    *((float *)&v114 + 3) = (float)(v40 - 2 * v27);
    while ((_MergedGlobals_228 & 1) == 0)
    {
      v66 = __ldaxr((unsigned __int8 *)&_MergedGlobals_228);
      if (v66 == _MergedGlobals_228)
      {
        if (!__stxr(_MergedGlobals_228 | 1, (unsigned __int8 *)&_MergedGlobals_228))
        {
          if ((byte_1ECE83DC9 & 1) == 0)
          {
            qword_1ECE83DD0 = 0;
            v102 = (WTF::RunLoop *)WTF::RunLoop::main(v15);
            v92 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
            *v92 = off_1E340FA68;
            v92[1] = WebCore::ScratchBuffer::purgeTimerFired;
            v92[2] = 0;
            v92[3] = &qword_1ECE83DD0;
            WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)qword_1ECE83DD8, v102);
            qword_1ECE83DD8[0] = off_1E32051C0;
            qword_1ECE83DD8[3] = v92;
            *(_QWORD *)&dword_1ECE83E4C = 0;
            xmmword_1ECE83DF8 = 0u;
            xmmword_1ECE83E08 = 0u;
            xmmword_1ECE83E18 = 0u;
            *(_OWORD *)&dword_1ECE83E28 = 0u;
            *(_OWORD *)&qword_1ECE83E38 = 0u;
            byte_1ECE83E48 = 0;
            byte_1ECE83DC9 = 1;
          }
          WebCore::ScratchBuffer::getScratchBuffer((WebCore::ScratchBuffer *)&v118, (const WebCore::IntSize *)v104, SHIDWORD(v104));
          v69 = v118;
          if (v118)
          {
            if ((byte_1ECE83DC9 & 1) == 0)
            {
              qword_1ECE83DD0 = 0;
              v103 = (WTF::RunLoop *)WTF::RunLoop::main(v67);
              v93 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
              *v93 = off_1E340FA68;
              v93[1] = WebCore::ScratchBuffer::purgeTimerFired;
              v93[2] = 0;
              v93[3] = &qword_1ECE83DD0;
              WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)qword_1ECE83DD8, v103);
              v71 = 0;
              qword_1ECE83DD8[0] = off_1E32051C0;
              qword_1ECE83DD8[3] = v93;
              *(_QWORD *)&dword_1ECE83E4C = 0;
              xmmword_1ECE83E08 = 0u;
              xmmword_1ECE83E18 = 0u;
              *(_OWORD *)&dword_1ECE83E28 = 0u;
              *(_OWORD *)&qword_1ECE83E38 = 0u;
              v70 = (uint64_t *)&a1[1];
              byte_1ECE83DC9 = 1;
              goto LABEL_90;
            }
            v70 = (uint64_t *)&a1[1];
            v71 = qword_1ECE83E38;
            if (byte_1ECE83E48
              && (*(float *)&qword_1ECE83E40 == a1[2].f32[0]
                ? (_ZF = *((float *)&qword_1ECE83E40 + 1) == a1[2].f32[1])
                : (_ZF = 0),
                  _ZF))
            {
              v86 = *v70;
              if ((qword_1ECE83E38 & 0x8000000000000) != 0)
              {
                if ((v86 & 0x8000000000000) == 0
                  || *(float *)((qword_1ECE83E38 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v86 & 0xFFFFFFFFFFFFLL) + 4)
                  || *(float *)((qword_1ECE83E38 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v86 & 0xFFFFFFFFFFFFLL) + 8)
                  || *(float *)((qword_1ECE83E38 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v86 & 0xFFFFFFFFFFFFLL) + 0xC)
                  || *(float *)((qword_1ECE83E38 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v86 & 0xFFFFFFFFFFFFLL)
                                                                                         + 0x10)
                  || HIBYTE(qword_1ECE83E38) != HIBYTE(v86)
                  || BYTE6(qword_1ECE83E38) != BYTE6(v86))
                {
                  goto LABEL_90;
                }
              }
              else if (qword_1ECE83E38 != v86 || (v86 & 0x8000000000000) != 0)
              {
                goto LABEL_90;
              }
              if (*(float *)&xmmword_1ECE83DF8 != *(float *)v115
                || *((float *)&xmmword_1ECE83DF8 + 1) != *((float *)v115 + 1)
                || *((float *)&xmmword_1ECE83DF8 + 2) != *(float *)&v115[1]
                || *((float *)&xmmword_1ECE83DF8 + 3) != *((float *)&v115[1] + 1)
                || *(float *)&v114 != *(float *)&xmmword_1ECE83E08
                || *((float *)&v114 + 1) != *((float *)&xmmword_1ECE83E08 + 1)
                || *((float *)&v114 + 2) != *((float *)&xmmword_1ECE83E08 + 2)
                || *((float *)&v114 + 3) != *((float *)&xmmword_1ECE83E08 + 3)
                || a5[4] != *(float *)&xmmword_1ECE83E18
                || a5[5] != *((float *)&xmmword_1ECE83E18 + 1)
                || a5[6] != *((float *)&xmmword_1ECE83E18 + 2)
                || a5[7] != *((float *)&xmmword_1ECE83E18 + 3)
                || a5[8] != *(float *)&dword_1ECE83E28
                || a5[9] != *(float *)&dword_1ECE83E2C
                || a5[10] != *(float *)&dword_1ECE83E30
                || a5[11] != *(float *)&dword_1ECE83E34)
              {
                goto LABEL_90;
              }
              v76 = 0;
            }
            else
            {
LABEL_90:
              byte_1ECE83E48 = 1;
              xmmword_1ECE83DF8 = *(_OWORD *)v115;
              qword_1ECE83E40 = (uint64_t)a1[2];
              v73 = a1[1];
              if ((v71 & 0x8000000000000) != 0)
              {
                v97 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFLL);
                if ((*(_QWORD *)&v73 & 0x8000000000000) == 0
                  || *(float *)((v71 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*(_QWORD *)&v73 & 0xFFFFFFFFFFFFLL) + 4)
                  || *(float *)((v71 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*(_QWORD *)&v73 & 0xFFFFFFFFFFFFLL) + 8)
                  || *(float *)((v71 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*(_QWORD *)&v73 & 0xFFFFFFFFFFFFLL) + 0xC)
                  || *(float *)((v71 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*(_QWORD *)&v73 & 0xFFFFFFFFFFFFLL)
                                                                             + 0x10)
                  || HIBYTE(v71) != HIBYTE(*(_QWORD *)&v73)
                  || BYTE6(v71) != v73.u8[6])
                {
                  do
                  {
                    v98 = __ldaxr(v97);
                    v99 = v98 - 1;
                  }
                  while (__stlxr(v99, v97));
                  if (!v99)
                  {
                    atomic_store(1u, v97);
                    v100 = v70;
                    WTF::fastFree((WTF *)v97, v68);
                    v70 = v100;
                  }
LABEL_93:
                  v74 = *v70;
                  qword_1ECE83E38 = v74;
                  if ((v74 & 0x8000000000000) != 0)
                  {
                    v90 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFLL);
                    do
                      v91 = __ldaxr(v90);
                    while (__stlxr(v91 + 1, v90));
                  }
                }
              }
              else if (v71 != *(_QWORD *)&v73 || (*(_QWORD *)&v73 & 0x8000000000000) != 0)
              {
                goto LABEL_93;
              }
              xmmword_1ECE83E08 = v114;
              v75 = *((_OWORD *)a5 + 2);
              xmmword_1ECE83E18 = *((_OWORD *)a5 + 1);
              *(_OWORD *)&dword_1ECE83E28 = v75;
              v76 = 1;
              v69 = v118;
            }
            WebCore::ShadowBlur::drawInsetShadowWithTilingWithLayerImageBuffer(a1, (WebCore::ImageBuffer *)v69, (long double *)a2->f64, a4, (uint64_t)a5, (const WebCore::IntSize *)&v104, &v105, a7, a8, (const WebCore::FloatRect *)v115, (const WebCore::FloatRect *)&v114, v76);
            v118 = 0;
            v78 = v69[1];
            if (__ldaxr((unsigned __int8 *)v78))
            {
              __clrex();
              goto LABEL_98;
            }
            if (__stxr(1u, (unsigned __int8 *)v78))
LABEL_98:
              MEMORY[0x19AEA534C](v78);
            v80 = *((_QWORD *)v78 + 1);
            v81 = v80 - 1;
            *((_QWORD *)v78 + 1) = v80 - 1;
            if (v80 == 1)
            {
              v89 = *((_QWORD *)v78 + 2);
              v82 = *((_QWORD *)v78 + 3);
              *((_QWORD *)v78 + 3) = 0;
              v83 = v89 != 0;
            }
            else
            {
              v82 = 0;
              v83 = 1;
            }
            v84 = __ldxr((unsigned __int8 *)v78);
            if (v84 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v78))
                goto LABEL_106;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(v78);
LABEL_106:
            if (!v81)
            {
              if (v82)
                (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
              if (!v83)
                WTF::fastFree(v78, v77);
            }
          }
          v85 = __ldxr((unsigned __int8 *)&_MergedGlobals_228);
          if (v85 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_228))
              return;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_228);
          return;
        }
      }
      else
      {
        __clrex();
      }
    }
    v113 = vcvt_f32_s32((int32x2_t)v104);
    v87 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v87 != -1)
    {
      v118 = (WebCore::ImageBuffer **)&v116;
      v117 = &v118;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v117, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v118 = 0;
    v119[0] = 0;
    WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>((float *)&v113, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, (uint64_t *)&v117, 1.0);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)v119 + 4));
    if (v117)
    {
      WebCore::ShadowBlur::drawInsetShadowWithTilingWithLayerImageBuffer(a1, (WebCore::ImageBuffer *)v117, (long double *)a2->f64, a4, (uint64_t)a5, (const WebCore::IntSize *)&v104, &v105, a7, a8, (const WebCore::FloatRect *)v115, (const WebCore::FloatRect *)&v114, 1);
      v58 = (WebCore::ImageBuffer *)v117;
      v117 = 0;
      if (v58)
        goto LABEL_59;
    }
  }
}

void WebCore::ShadowBlur::blurShadowBuffer(WebCore::ShadowBlur *this, WebCore::ImageBuffer *a2, const WebCore::IntSize *a3)
{
  unint64_t v6;
  uint64_t v7;
  int *v8;
  CFTypeRef v9;
  void (**v10)(WebCore::ImageBufferAllocator *__hidden);
  _QWORD v11[2];
  __int16 v12;
  CFTypeRef cf;
  int *v14;

  if (*(_DWORD *)this == 2)
  {
    v12 = 1;
    v6 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v6 != -1)
    {
      v11[0] = &v10;
      v14 = (int *)v11;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    cf = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
    if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
      CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    v7 = *(_QWORD *)a3;
    v11[0] = 0;
    v11[1] = v7;
    v10 = off_1E340D360;
    (*(void (**)(int **__return_ptr, WebCore::ImageBuffer *, __int16 *, _QWORD *, void (***)(WebCore::ImageBufferAllocator *__hidden)))(*(_QWORD *)a2 + 88))(&v14, a2, &v12, v11, &v10);
    if (v14)
    {
      WebCore::ShadowBlur::blurLayerImage((uint64_t)this, *((_QWORD *)v14 + 5), *((_QWORD *)v14 + 6), v14 + 8, 4 * v14[8]);
      v10 = 0;
      (*(void (**)(WebCore::ImageBuffer *, int *, _QWORD *, void (***)(WebCore::ImageBufferAllocator *__hidden), _QWORD))(*(_QWORD *)a2 + 96))(a2, v14, v11, &v10, 0);
      v8 = v14;
      v14 = 0;
      if (v8)
      {
        if (v8[2] == 1)
          (*(void (**)(int *))(*(_QWORD *)v8 + 8))(v8);
        else
          --v8[2];
      }
    }
    v9 = cf;
    cf = 0;
    if (v9)
      CFRelease(v9);
  }
}

void WebCore::ScratchBuffer::getScratchBuffer(WebCore::ScratchBuffer *this, const WebCore::IntSize *a2, int a3)
{
  int v4;
  uint64_t v6;
  float v7;
  int v8;
  float v10;
  int v11;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  int32x2_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float32x2_t v46;
  char v47;
  char **v48;
  char *v49;
  uint64_t v50;

  v4 = (int)a2;
  v6 = qword_1ECE83DD0;
  if (!qword_1ECE83DD0)
  {
    qword_1ECE83DD0 = 0;
    goto LABEL_28;
  }
  v7 = *(float *)(qword_1ECE83DD0 + 16);
  v8 = (int)fmaxf(v7, -2147500000.0);
  if (v7 >= 2147500000.0 || v8 >= (int)a2)
  {
    v10 = *(float *)(qword_1ECE83DD0 + 20);
    v11 = (int)fmaxf(v10, -2147500000.0);
    if (v10 >= 2147500000.0 || v11 >= a3)
      goto LABEL_66;
  }
  qword_1ECE83DD0 = 0;
  v13 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v13);
LABEL_16:
  v15 = *(_QWORD *)(v13 + 8);
  v16 = v15 - 1;
  *(_QWORD *)(v13 + 8) = v15 - 1;
  if (v15 == 1)
  {
    v45 = *(_QWORD *)(v13 + 16);
    v17 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 24) = 0;
    v18 = v45 != 0;
  }
  else
  {
    v17 = 0;
    v18 = 1;
  }
  v19 = __ldxr((unsigned __int8 *)v13);
  if (v19 != 1)
  {
    __clrex();
LABEL_23:
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      goto LABEL_28;
    goto LABEL_24;
  }
  if (__stlxr(0, (unsigned __int8 *)v13))
    goto LABEL_23;
  if (v16)
    goto LABEL_28;
LABEL_24:
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (!v18)
    WTF::fastFree((WTF *)v13, a2);
LABEL_28:
  v20.i32[0] = v4 & 0xFFFFFFE0;
  v20.i32[1] = a3 & 0xFFFFFFE0;
  qword_1ECE83E40 = 0;
  *(_QWORD *)&dword_1ECE83E4C = 0;
  v46 = vcvt_f32_s32(vadd_s32(v20, (int32x2_t)0x2000000020));
  v21 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v21 != -1)
  {
    v49 = &v47;
    v48 = &v49;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v49 = 0;
  v50 = 0;
  WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>((float *)&v46, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, (uint64_t *)&v48, 1.0);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v50 + 4));
  v6 = (uint64_t)v48;
  v48 = 0;
  v23 = qword_1ECE83DD0;
  qword_1ECE83DD0 = v6;
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 8);
    if (__ldaxr((unsigned __int8 *)v24))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v24))
    {
      goto LABEL_35;
    }
    MEMORY[0x19AEA534C](v24);
LABEL_35:
    v26 = *(_QWORD *)(v24 + 8);
    v27 = v26 - 1;
    *(_QWORD *)(v24 + 8) = v26 - 1;
    if (v26 == 1)
    {
      v43 = *(_QWORD *)(v24 + 16);
      v28 = *(_QWORD *)(v24 + 24);
      *(_QWORD *)(v24 + 24) = 0;
      v29 = v43 != 0;
    }
    else
    {
      v28 = 0;
      v29 = 1;
    }
    v30 = __ldxr((unsigned __int8 *)v24);
    if (v30 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v24))
      {
        if (v27)
          goto LABEL_47;
LABEL_43:
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        if (!v29)
          WTF::fastFree((WTF *)v24, v22);
LABEL_47:
        v31 = (uint64_t)v48;
        v48 = 0;
        if (!v31)
          goto LABEL_64;
        v32 = *(_QWORD *)(v31 + 8);
        if (__ldaxr((unsigned __int8 *)v32))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v32))
        {
          goto LABEL_52;
        }
        MEMORY[0x19AEA534C](v32);
LABEL_52:
        v34 = *(_QWORD *)(v32 + 8);
        v35 = v34 - 1;
        *(_QWORD *)(v32 + 8) = v34 - 1;
        if (v34 == 1)
        {
          v44 = *(_QWORD *)(v32 + 16);
          v36 = *(_QWORD *)(v32 + 24);
          *(_QWORD *)(v32 + 24) = 0;
          v37 = v44 != 0;
        }
        else
        {
          v36 = 0;
          v37 = 1;
        }
        v38 = __ldxr((unsigned __int8 *)v32);
        if (v38 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v32))
          {
            if (!v35)
              goto LABEL_60;
            goto LABEL_64;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v32);
        if (!v35)
        {
LABEL_60:
          if (v36)
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
          if (!v37)
            WTF::fastFree((WTF *)v32, v22);
        }
LABEL_64:
        v6 = qword_1ECE83DD0;
        goto LABEL_65;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
    if (v27)
      goto LABEL_47;
    goto LABEL_43;
  }
LABEL_65:
  if (!v6)
    goto LABEL_75;
LABEL_66:
  v39 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v39))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v39))
  {
    goto LABEL_70;
  }
  MEMORY[0x19AEA534C](v39);
LABEL_70:
  ++*(_QWORD *)(v39 + 8);
  v41 = __ldxr((unsigned __int8 *)v39);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_74;
  }
  if (__stlxr(0, (unsigned __int8 *)v39))
LABEL_74:
    WTF::Lock::unlockSlow((WTF::Lock *)v39);
LABEL_75:
  v42 = qword_1ECE83DD0;
  *(_QWORD *)this = v6;
  if (v42)
    WTF::RunLoop::TimerBase::start();
}

uint64_t WebCore::ShadowBlur::drawRectShadowWithTilingWithLayerImageBuffer(float32x2_t *a1, WebCore::ImageBuffer *a2, long double *a3, uint64_t a4, int32x2_t *a5, int32x2_t *a6, _QWORD *a7, uint64_t *a8, _OWORD *a9, char a10)
{
  _QWORD *v11;
  WebCore::GraphicsContext *v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  double v22;
  float32x2_t v23;
  long double v24;
  float64x2_t v25;
  uint64_t v31;
  int8x8_t v32;
  uint64_t v33;
  int8x8_t v34;
  int32x2_t v35;
  float32x2_t v36;
  int8x8_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int32x2_t v42;
  int v44;
  int v45;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  long double v51;
  _OWORD v52[3];
  float32x2_t v53;
  float32x2_t v54[7];
  int v55;
  uint64_t v56;

  v11 = a7;
  v56 = *MEMORY[0x1E0C80C00];
  if (a10)
  {
    v18 = (WebCore::GraphicsContext *)(*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)a2 + 16))(a2);
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v18 + 96))(v18, 1);
    v53 = 0;
    v54[0] = vcvt_f32_s32(*a5);
    (*(void (**)(WebCore::GraphicsContext *, float32x2_t *))(*(_QWORD *)v18 + 280))(v18, &v53);
    v53 = (float32x2_t)0x11040000000000FFLL;
    WebCore::GraphicsContext::setFillColor(v18, (const WebCore::Color *)&v53);
    if ((*(_QWORD *)&v53 & 0x8000000000000) != 0)
    {
      v47 = (unsigned int *)(*(_QWORD *)&v53 & 0xFFFFFFFFFFFFLL);
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v19);
      }
    }
    if (WebCore::FloatRoundedRect::Radii::isZero((WebCore::FloatRoundedRect::Radii *)(a4 + 16)))
    {
      (*(void (**)(WebCore::GraphicsContext *, _OWORD *, uint64_t))(*(_QWORD *)v18 + 216))(v18, a9, 1);
    }
    else
    {
      v55 = 0;
      v20 = *(_OWORD *)(a4 + 16);
      v21 = *(_OWORD *)(a4 + 32);
      v52[0] = *a9;
      v52[1] = v20;
      v52[2] = v21;
      v22 = WebCore::Path::addRoundedRect((WebCore::Path *)&v53, (WebCore::FloatRect *)v52, 0);
      (*(void (**)(WebCore::GraphicsContext *, float32x2_t *, double))(*(_QWORD *)v18 + 176))(v18, &v53, v22);
      if (v55 != -1)
        ((void (*)(_OWORD *, float32x2_t *))off_1E340F5D0[v55])(v52, v54);
    }
    v11 = a7;
    WebCore::ShadowBlur::blurAndColorShadowBuffer((WebCore::ShadowBlur *)a1, a2, (const WebCore::IntSize *)a5);
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v18 + 104))(v18, 1);
  }
  v23 = a1[3];
  if (a1[4].i8[0])
  {
    v51 = hypot(*a3, a3[1]);
    v24 = hypot(a3[2], a3[3]);
    v25.f64[0] = v51;
    v25.f64[1] = v24;
    __asm { FMOV            V0.2D, #1.0 }
    v23 = vmul_f32(v23, vcvt_f32_f64(vdivq_f64(_Q0, v25)));
  }
  v52[0] = *(_OWORD *)a4;
  v31 = *a8;
  v32 = *(int8x8_t *)(a4 + 24);
  v32.i32[1] = *(_DWORD *)(a4 + 36);
  v34 = *(int8x8_t *)(a4 + 16);
  v33 = a4 + 16;
  v35 = *a6;
  v36 = vcvt_f32_s32(*a6);
  v37 = (int8x8_t)vrev64_s32(*(int32x2_t *)(v33 + 12));
  v38 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v37, (float32x2_t)v34), v37, v34);
  v39 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v33 + 24), (float32x2_t)v32), *(int8x8_t *)(v33 + 24), v32);
  v40 = vcvt_f32_s32(vadd_s32(v35, v35));
  v41 = vcvt_f32_s32(vcvt_s32_f32(vadd_f32(v38, v40)));
  *(float32x2_t *)&v52[0] = vsub_f32(vadd_f32(v23, *(float32x2_t *)&v52[0]), v36);
  *((float32x2_t *)&v52[0] + 1) = vadd_f32(vadd_f32(*(float32x2_t *)((char *)v52 + 8), v36), v36);
  v42 = vcvt_s32_f32(vsub_f32(vsub_f32(*(float32x2_t *)((char *)v52 + 8), v41), vcvt_f32_s32(vcvt_s32_f32(vadd_f32(v39, v40)))));
  v53 = vadd_f32(*(float32x2_t *)&v52[0], v41);
  v54[0] = vcvt_f32_s32(v42);
  if (v42.i32[0] < 1 || v42.i32[1] < 1)
  {
    v44 = v35.i32[0];
    v45 = v35.i32[1];
  }
  else
  {
    (*(void (**)(uint64_t, float32x2_t *, float32x2_t *))(*(_QWORD *)v31 + 16))(v31, &v53, a1 + 1);
    v44 = a6->i32[0];
    v45 = a6->i32[1];
  }
  return WebCore::ShadowBlur::drawLayerPieces((uint64_t)a2, (float *)v52, (float *)v33, v44, v45, a5, v11);
}

uint64_t WebCore::ShadowBlur::blurAndColorShadowBuffer(WebCore::ShadowBlur *this, WebCore::ImageBuffer *a2, const WebCore::IntSize *a3)
{
  WebCore::GraphicsContext *v6;
  _QWORD v9[2];

  WebCore::ShadowBlur::blurShadowBuffer(this, a2, a3);
  v6 = (WebCore::GraphicsContext *)(*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v6 + 96))(v6, 1);
  if (*((_BYTE *)v6 + 194) != 3 || *((_BYTE *)v6 + 195) != 1)
  {
    *((_WORD *)v6 + 97) = 259;
    *((_DWORD *)v6 + 46) |= 0x20u;
  }
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v6 + 88))(v6, (uint64_t)v6 + 8);
  WebCore::GraphicsContext::setFillColor(v6, (WebCore::ShadowBlur *)((char *)this + 8));
  v9[0] = 0;
  v9[1] = vcvt_f32_s32(*(int32x2_t *)a3);
  (*(void (**)(WebCore::GraphicsContext *, _QWORD *, uint64_t))(*(_QWORD *)v6 + 216))(v6, v9, 1);
  return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v6 + 104))(v6, 1);
}

uint64_t WebCore::ShadowBlur::drawInsetShadowWithTilingWithLayerImageBuffer(float32x2_t *a1, WebCore::ImageBuffer *a2, long double *a3, _OWORD *a4, uint64_t a5, const WebCore::IntSize *a6, int32x2_t *a7, _QWORD *a8, _QWORD *a9, const WebCore::FloatRect *a10, const WebCore::FloatRect *a11, char a12)
{
  _QWORD *v12;
  _QWORD *v20;
  WebCore::GraphicsContext *v21;
  void *v22;
  __n128 v23;
  __int128 v24;
  __int128 v25;
  float32x2_t v26;
  long double v27;
  float64x2_t v28;
  float32x2_t v34;
  float32x2_t v35;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  long double v41;
  _OWORD v42[3];
  float32x2_t v43[8];
  int v44;
  uint64_t v45;

  v12 = a8;
  v20 = a9;
  v45 = *MEMORY[0x1E0C80C00];
  if (a12)
  {
    v21 = (WebCore::GraphicsContext *)(*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)a2 + 16))(a2);
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v21 + 96))(v21, 1);
    (*(void (**)(WebCore::GraphicsContext *, const WebCore::FloatRect *))(*(_QWORD *)v21 + 280))(v21, a10);
    if (!*((_BYTE *)v21 + 192))
    {
      *((_BYTE *)v21 + 192) = 1;
      *((_DWORD *)v21 + 46) |= 2u;
    }
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v21 + 88))(v21, (uint64_t)v21 + 8);
    v43[0] = (float32x2_t)0x11040000000000FFLL;
    WebCore::GraphicsContext::setFillColor(v21, (const WebCore::Color *)v43);
    if ((*(_QWORD *)v43 & 0x8000000000000) != 0)
    {
      v37 = (unsigned int *)(*(_QWORD *)v43 & 0xFFFFFFFFFFFFLL);
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        atomic_store(1u, v37);
        WTF::fastFree((WTF *)v37, v22);
      }
    }
    v44 = 0;
    WebCore::Path::addRect((WebCore::Path *)v43, a10);
    if (WebCore::FloatRoundedRect::Radii::isZero((WebCore::FloatRoundedRect::Radii *)(a5 + 16)))
    {
      v23.n128_f64[0] = WebCore::Path::addRect((WebCore::Path *)v43, a11);
    }
    else
    {
      v24 = *(_OWORD *)(a5 + 16);
      v25 = *(_OWORD *)(a5 + 32);
      v42[0] = *(_OWORD *)a11;
      v42[1] = v24;
      v42[2] = v25;
      v23.n128_f64[0] = WebCore::Path::addRoundedRect((WebCore::Path *)v43, (WebCore::FloatRect *)v42, 0);
    }
    v12 = a8;
    (*(void (**)(WebCore::GraphicsContext *, float32x2_t *, __n128))(*(_QWORD *)v21 + 176))(v21, v43, v23);
    WebCore::ShadowBlur::blurAndColorShadowBuffer((WebCore::ShadowBlur *)a1, a2, a6);
    if (v44 != -1)
      ((void (*)(_OWORD *, float32x2_t *))off_1E340F5D0[v44])(v42, &v43[1]);
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v21 + 104))(v21, 1);
    v20 = a9;
  }
  v26 = a1[3];
  if (a1[4].i8[0])
  {
    v41 = hypot(*a3, a3[1]);
    v27 = hypot(a3[2], a3[3]);
    v28.f64[0] = v41;
    v28.f64[1] = v27;
    __asm { FMOV            V0.2D, #1.0 }
    v26 = vmul_f32(v26, vcvt_f32_f64(vdivq_f64(_Q0, v28)));
  }
  *(_OWORD *)v43[0].f32 = *a4;
  v43[0] = vadd_f32(v26, v43[0]);
  v34 = vcvt_f32_s32(*a7);
  v35 = vadd_f32(vadd_f32(*(float32x2_t *)(a5 + 8), v34), v34);
  *(float32x2_t *)&v42[0] = vsub_f32(vadd_f32(v26, *(float32x2_t *)a5), v34);
  *((float32x2_t *)&v42[0] + 1) = v35;
  (*(void (**)(_QWORD, float32x2_t *, _OWORD *, float32x2_t *))(*(_QWORD *)*v20 + 16))(*v20, v43, v42, a1 + 1);
  return WebCore::ShadowBlur::drawLayerPieces((uint64_t)a2, (float *)v42, (float *)(a5 + 16), a7->i32[0], a7->i32[1], a6, v12);
}

uint64_t WebCore::ShadowBlur::drawLayerPieces(uint64_t a1, float *a2, float *a3, int a4, int a5, _DWORD *a6, _QWORD *a7)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int v17;
  float v18;
  int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  unsigned int v27;
  float v28;
  float v29;
  float v30;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  _BYTE v38[12];
  float v39;

  v10 = (float)(2 * a4);
  v11 = *a3;
  v12 = a3[1];
  v13 = a3[5];
  if (*a3 < a3[4])
    v11 = a3[4];
  v14 = v11 + v10;
  v15 = a3[2];
  if (v15 < a3[6])
    v15 = a3[6];
  v16 = v15 + v10;
  v17 = (int)v16;
  v18 = (float)(2 * a5);
  if (v12 < a3[3])
    v12 = a3[3];
  if (v13 < a3[7])
    v13 = a3[7];
  v19 = (int)(float)(v13 + v18);
  v20 = (float)(int)v14;
  v21 = (float)(int)v16;
  v22 = (float)(int)(float)(v12 + v18);
  v23 = a2[1];
  v24 = *a2 + v20;
  v25 = v23 + v22;
  v32 = (float)(int)(float)((float)(a2[2] - v20) - v21);
  v26 = (float)(int)(float)((float)(a2[3] - v22) - (float)v19);
  v37 = v22;
  *(float *)v38 = v20;
  *(_QWORD *)&v38[4] = 0x3F80000000000000;
  v39 = v22;
  v33 = (float)(v23 + v22) - v22;
  v34 = v24;
  v35 = v33;
  v36 = v32;
  (*(void (**)(_QWORD, uint64_t, float *, _BYTE *))(*(_QWORD *)*a7 + 16))(*a7, a1, &v34, v38);
  *(float *)&v38[4] = (float)(a6[1] - v19);
  v39 = (float)v19;
  v35 = v25 + v26;
  v37 = (float)v19;
  (*(void (**)(_QWORD, uint64_t, float *, _BYTE *))(*(_QWORD *)*a7 + 16))(*a7, a1, &v34, v38);
  *(_DWORD *)v38 = 0;
  *(float *)&v38[4] = v22;
  *(float *)&v38[8] = v20;
  v39 = 1.0;
  v34 = v24 - v20;
  v35 = v25;
  v36 = v20;
  v37 = v26;
  (*(void (**)(_QWORD, uint64_t, float *, _BYTE *))(*(_QWORD *)*a7 + 16))(*a7, a1, &v34, v38);
  *(float *)v38 = (float)(*a6 - v17);
  *(float *)&v38[8] = v21;
  v34 = v24 + v32;
  v36 = v21;
  (*(void (**)(_QWORD, uint64_t, float *, _BYTE *))(*(_QWORD *)*a7 + 16))(*a7, a1, &v34, v38);
  *(_QWORD *)v38 = 0;
  *(float *)&v38[8] = v20;
  v39 = v22;
  v34 = v24 - v20;
  v35 = v33;
  v36 = v20;
  v37 = v22;
  (*(void (**)(_QWORD, uint64_t, float *, _BYTE *))(*(_QWORD *)*a7 + 16))(*a7, a1, &v34, v38);
  *(float *)&v27 = (float)(*a6 - v17);
  v37 = v22;
  *(_QWORD *)v38 = v27;
  *(float *)&v38[8] = v21;
  v39 = v22;
  v34 = v24 + v32;
  v35 = v33;
  v36 = v21;
  (*(void (**)(_QWORD, uint64_t, float *, _BYTE *))(*(_QWORD *)*a7 + 16))(*a7, a1, &v34, v38);
  v28 = (float)(a6[1] - v19);
  *(float *)v38 = (float)(*a6 - v17);
  *(float *)&v38[4] = v28;
  *(float *)&v38[8] = v21;
  v39 = (float)v19;
  v34 = v24 + v32;
  v29 = v25 + v26;
  v35 = v29;
  v36 = v21;
  v37 = (float)v19;
  (*(void (**)(_QWORD, uint64_t, float *, _BYTE *))(*(_QWORD *)*a7 + 16))(*a7, a1, &v34, v38);
  v30 = (float)(a6[1] - v19);
  *(_DWORD *)v38 = 0;
  *(float *)&v38[4] = v30;
  *(float *)&v38[8] = v20;
  v39 = (float)v19;
  v34 = v24 - v20;
  v35 = v29;
  v36 = v20;
  v37 = (float)v19;
  return (*(uint64_t (**)(_QWORD, uint64_t, float *, _BYTE *))(*(_QWORD *)*a7 + 16))(*a7, a1, &v34, v38);
}

uint64_t WebCore::ShareableBitmapConfiguration::ShareableBitmapConfiguration(uint64_t a1, WebCore::ShareableBitmapConfiguration *a2, uint64_t a3, const WebCore::DestinationColorSpace *a4)
{
  uint64_t *v7;
  const void *v8;
  CFTypeRef v9;
  uint64_t *v10;
  _BOOL8 v11;
  uint64_t *v12;
  WebCore::DestinationColorSpace *v13;
  CFTypeRef cf;
  char v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = (uint64_t *)(a1 + 8);
  LOBYTE(cf) = 0;
  v16 = 0;
  if (*(_BYTE *)(a3 + 8))
  {
    v8 = *(const void **)a3;
    cf = v8;
    if (v8)
      CFRetain(v8);
    v16 = 1;
  }
  WebCore::ShareableBitmapConfiguration::validateColorSpace((uint64_t)&cf, v7);
  if (v16)
  {
    v9 = cf;
    cf = 0;
    if (v9)
      CFRelease(v9);
  }
  *(_BYTE *)(a1 + 24) = (_BYTE)a4;
  v10 = v7;
  if (!*(_BYTE *)(a1 + 16))
    v10 = WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)v7);
  v11 = WebCore::ShareableBitmapConfiguration::calculateBytesPerPixel((CGColorSpaceRef *)v10, a1 + 28);
  v12 = v7;
  if (!*(_BYTE *)(a1 + 16))
    v12 = WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)v11);
  v13 = (WebCore::DestinationColorSpace *)WebCore::ShareableBitmapConfiguration::calculateBytesPerRow(a2, (CGColorSpaceRef *)v12, a1 + 36);
  if (!*(_BYTE *)(a1 + 16))
    v7 = WebCore::DestinationColorSpace::SRGB(v13);
  *(_DWORD *)(a1 + 44) = WebCore::ShareableBitmapConfiguration::calculateBitmapInfo((CGColorSpaceRef *)v7, a4);
  return a1;
}

uint64_t WebCore::ShareableBitmapConfiguration::ShareableBitmapConfiguration(uint64_t a1, _QWORD *a2, uint64_t a3, char a4, int a5, int a6, int a7)
{
  const void *v12;

  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_BYTE *)(a3 + 8))
  {
    v12 = *(const void **)a3;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a3;
    if (v12)
      CFRetain(v12);
    *(_BYTE *)(a1 + 16) = 1;
  }
  *(_BYTE *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = a5;
  *(_BYTE *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 44) = a7;
  return a1;
}

{
  const void *v12;

  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_BYTE *)(a3 + 8))
  {
    v12 = *(const void **)a3;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a3;
    if (v12)
      CFRetain(v12);
    *(_BYTE *)(a1 + 16) = 1;
  }
  *(_BYTE *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = a5;
  *(_BYTE *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 44) = a7;
  return a1;
}

uint64_t WebCore::ShareableBitmapConfiguration::calculateSizeInBytes@<X0>(WebCore::ShareableBitmapConfiguration *this@<X0>, CGColorSpaceRef *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = CGColorSpaceUsesExtendedRange(*a2);
  v7 = *(int *)this;
  v8 = 2;
  if ((_DWORD)result)
    v8 = 3;
  v9 = v7 << v8;
  if ((unint64_t)(v7 << v8) >> 32)
  {
LABEL_8:
    *(_DWORD *)(a3 + 4) = 0;
    *(_BYTE *)a3 = 1;
    return result;
  }
  result = WebCore::IOSurface::bytesPerRowAlignment((WebCore::IOSurface *)result);
  if (!__CFADD__(v9 & 0xFFFFFFFC, result - 1))
  {
    v10 = ((v9 & 0xFFFFFFFC) + result - 1) & -result;
    if (!HIDWORD(v10))
    {
      v11 = v10 * *((int *)this + 1);
      if (!HIDWORD(v11))
      {
        *(_BYTE *)a3 = 0;
        *(_DWORD *)(a3 + 4) = v11;
        return result;
      }
    }
    goto LABEL_8;
  }
  __break(0xC471u);
  return result;
}

mach_vm_size_t WebCore::ShareableBitmap::create@<X0>(mach_vm_size_t this@<X0>, uint64_t *a2@<X8>)
{
  const WebCore::ShareableBitmapConfiguration *v4;
  uint64_t v5;
  CFTypeRef v6;
  unsigned int *v7;
  _BYTE v8[8];
  CFTypeRef cf;
  char v10;
  unsigned int *v11;

  if (*(_BYTE *)(this + 36)
    || (v4 = (const WebCore::ShareableBitmapConfiguration *)this,
        this = *(int *)(this + 4) * (unint64_t)*(unsigned int *)(this + 40),
        HIDWORD(this))
    || (this = WebCore::SharedMemory::allocate(this, &v11), !v11))
  {
    *a2 = 0;
  }
  else
  {
    v5 = WTF::fastMalloc((WTF *)0x60);
    WebCore::ShareableBitmapConfiguration::ShareableBitmapConfiguration((WebCore::ShareableBitmapConfiguration *)v8, v4);
    v7 = v11;
    v11 = 0;
    WebCore::ShareableBitmap::ShareableBitmap(v5, (uint64_t)v8, (uint64_t *)&v7);
    *a2 = v5;
    WTF::Ref<WebCore::SharedMemory,WTF::RawPtrTraits<WebCore::SharedMemory>,WTF::DefaultRefDerefTraits<WebCore::SharedMemory>>::~Ref(&v7);
    if (v10)
    {
      v6 = cf;
      cf = 0;
      if (v6)
        CFRelease(v6);
    }
    this = (mach_vm_size_t)v11;
    v11 = 0;
    if (this)
      return (mach_vm_size_t)WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)this);
  }
  return this;
}

uint64_t WebCore::ShareableBitmap::ShareableBitmap(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const void *v6;
  uint64_t v7;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    v6 = *(const void **)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v6;
    if (v6)
      CFRetain(v6);
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 36) = 0;
  if (*(_BYTE *)(a2 + 28))
    *(_BYTE *)(a1 + 36) = 1;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 44) = 0;
  if (*(_BYTE *)(a2 + 36))
    *(_BYTE *)(a1 + 44) = 1;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 40);
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) &= ~1u;
  return a1;
}

void WebCore::ShareableBitmap::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void *v10;
  char v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;

  if (*((_BYTE *)a1 + 36)
    || (v5 = *((int *)a1 + 1) * (unint64_t)*((unsigned int *)a1 + 10), HIDWORD(v5))
    || *(_QWORD *)(*a2 + 8) < v5)
  {
    *a3 = 0;
  }
  else
  {
    v7 = WTF::fastMalloc((WTF *)0x60);
    v8 = *a1;
    v9 = *((unsigned __int8 *)a1 + 16);
    v18 = a3;
    if (*((_BYTE *)a1 + 16))
    {
      v10 = (const void *)a1[1];
      if (v10)
        CFRetain((CFTypeRef)a1[1]);
    }
    else
    {
      v10 = 0;
    }
    v11 = *((_BYTE *)a1 + 24);
    v12 = *((unsigned __int8 *)a1 + 28);
    v13 = *((_DWORD *)a1 + 8);
    v14 = *((unsigned __int8 *)a1 + 36);
    v15 = a1[5];
    v16 = 1;
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = v8;
    *(_BYTE *)(v7 + 16) = 0;
    *(_BYTE *)(v7 + 24) = 0;
    if (v9)
    {
      *(_QWORD *)(v7 + 16) = v10;
      if (v10)
        CFRetain(v10);
      v16 = 1;
      *(_BYTE *)(v7 + 24) = 1;
    }
    *(_BYTE *)(v7 + 32) = v11;
    if (!v12)
      v16 = 0;
    *(_BYTE *)(v7 + 36) = v16;
    *(_DWORD *)(v7 + 40) = v13;
    *(_BYTE *)(v7 + 44) = v14 != 0;
    *(_QWORD *)(v7 + 48) = v15;
    v17 = *a2;
    *a2 = 0;
    *(_QWORD *)(v7 + 56) = v17;
    *(_BYTE *)(v7 + 64) = 0;
    *(_BYTE *)(v7 + 80) = 0;
    *(_BYTE *)(v7 + 88) &= ~1u;
    *v18 = v7;
    if (v9)
    {
      if (v10)
        CFRelease(v10);
    }
  }
}

void WebCore::ShareableBitmap::createFromImageDraw(WebCore::ShareableBitmap *this@<X0>, WebCore::ShareableBitmap **a2@<X8>)
{
  CFTypeRef v5;
  CFTypeRef cf;
  uint64_t v7;

  (*(void (**)(CFTypeRef *__return_ptr))(**((_QWORD **)this + 6) + 40))(&cf);
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6));
  WebCore::ShareableBitmap::createFromImageDraw(this, &cf, (const WebCore::DestinationColorSpace *)&v7, a2);
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
}

void WebCore::ShareableBitmap::createFromImageDraw(WebCore::ShareableBitmap *this@<X0>, const void **a2@<X1>, const WebCore::DestinationColorSpace *a3@<X2>, WebCore::ShareableBitmap **a4@<X8>)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(_QWORD, const void **, const WebCore::DestinationColorSpace *))(**((_QWORD **)this + 6)
                                                                                                + 24))(*((_QWORD *)this + 6), a2, a3);
  WebCore::ShareableBitmap::createFromImageDraw(this, a2, (const WebCore::DestinationColorSpace *)&v7, a4);
}

{
  const void *v8;
  CFTypeRef v9;
  WebCore::ShareableBitmap *v10;
  void *v11;
  WebCore::GraphicsContext *v12;
  unsigned int v13;
  unsigned int v14;
  float32x2_t v15;
  unsigned int v16;
  unsigned int v17;
  WebCore::GraphicsContext *v18;
  const void *v19;
  char v20;
  uint64_t v21;
  CFTypeRef cf;
  char v23;
  WebCore::ShareableBitmap *v24;

  v8 = *a2;
  v19 = v8;
  if (v8)
    CFRetain(v8);
  v20 = 1;
  WebCore::ShareableBitmapConfiguration::ShareableBitmapConfiguration((uint64_t)&v21, a3, (uint64_t)&v19, 0);
  WebCore::ShareableBitmap::create((mach_vm_size_t)&v21, (uint64_t *)&v24);
  if (v23)
  {
    v9 = cf;
    cf = 0;
    if (v9)
      CFRelease(v9);
  }
  if (v8)
    CFRelease(v8);
  v10 = v24;
  if (v24)
  {
    WebCore::ShareableBitmap::createGraphicsContext(v24, (uint64_t *)&v18);
    v12 = v18;
    if (v18)
    {
      *(float *)&v13 = (float)*(int *)a3;
      *(float *)&v14 = (float)*((int *)a3 + 1);
      v21 = 0;
      cf = (CFTypeRef)__PAIR64__(v14, v13);
      v15 = 0;
      v16 = v13;
      v17 = v14;
      WebCore::GraphicsContext::drawNativeImage(v18, (uint64_t)this, (uint64_t)&v21, &v15, 4385);
      *a4 = v10;
      (*(void (**)(WebCore::GraphicsContext *))(*(_QWORD *)v12 + 8))(v12);
    }
    else
    {
      *a4 = 0;
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v10, v11);
    }
  }
  else
  {
    *a4 = 0;
  }
}

unsigned int *WebCore::ShareableBitmap::create@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  void *v14;
  WebCore::SharedMemory *v15;
  WebCore::SharedMemory *v16;

  result = (unsigned int *)WebCore::SharedMemory::map(a1, a2, (uint64_t *)&v16);
  if (v16)
  {
    v15 = v16;
    v16 = 0;
    WebCore::ShareableBitmap::create((uint64_t *)(a1 + 16), (uint64_t *)&v15, a3);
    v6 = (unsigned int *)v15;
    v15 = 0;
    if (v6)
    {
      do
      {
        v9 = __ldaxr(v6);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v6));
      if (!v10)
      {
        atomic_store(1u, v6);
        WebCore::SharedMemory::~SharedMemory((WebCore::SharedMemory *)v6);
        WTF::fastFree(v11, v12);
      }
    }
    result = (unsigned int *)v16;
    v16 = 0;
    if (result)
    {
      do
      {
        v7 = __ldaxr(result);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, result));
      if (!v8)
      {
        atomic_store(1u, result);
        WebCore::SharedMemory::~SharedMemory((WebCore::SharedMemory *)result);
        return (unsigned int *)WTF::fastFree(v13, v14);
      }
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

WebCore::SharedMemory *WebCore::ShareableBitmap::createReadOnly@<X0>(WebCore::SharedMemory *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  const void *v3;
  int v4;
  uint64_t v5;
  WebCore::SharedMemory *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  int v12;
  int v13;
  char v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  void *v19;
  WebCore::SharedMemory *v20;

  if (!*((_BYTE *)result + 64))
  {
    *a2 = 0;
    a2[8] = 0;
    return result;
  }
  v7 = result;
  WebCore::SharedMemory::map((uint64_t)result, 0, (uint64_t *)&v20);
  if (v20)
  {
    v8 = WTF::fastMalloc((WTF *)0x60);
    if (*((_BYTE *)v7 + 64))
    {
      v2 = v8;
      v9 = *((_QWORD *)v7 + 2);
      v4 = *((unsigned __int8 *)v7 + 32);
      if (*((_BYTE *)v7 + 32))
      {
        v3 = (const void *)*((_QWORD *)v7 + 3);
        if (v3)
          CFRetain(*((CFTypeRef *)v7 + 3));
      }
      else
      {
        v3 = 0;
      }
      v10 = *((_BYTE *)v7 + 40);
      v11 = *((unsigned __int8 *)v7 + 44);
      v12 = *((_DWORD *)v7 + 12);
      v13 = *((unsigned __int8 *)v7 + 52);
      v5 = *((_QWORD *)v7 + 7);
      v7 = v20;
      v20 = 0;
      v14 = 1;
      *(_DWORD *)v2 = 1;
      *(_QWORD *)(v2 + 8) = v9;
      *(_BYTE *)(v2 + 16) = 0;
      *(_BYTE *)(v2 + 24) = 0;
      if (v4)
      {
        *(_QWORD *)(v2 + 16) = v3;
        if (v3)
          CFRetain(v3);
        v14 = 1;
        *(_BYTE *)(v2 + 24) = 1;
      }
      *(_BYTE *)(v2 + 32) = v10;
      if (!v11)
        v14 = 0;
      *(_BYTE *)(v2 + 36) = v14;
      *(_DWORD *)(v2 + 40) = v12;
      if (!v13)
      {
        v15 = 0;
LABEL_18:
        *(_BYTE *)(v2 + 44) = v15;
        *(_QWORD *)(v2 + 48) = v5;
        *(_QWORD *)(v2 + 56) = v7;
        *(_BYTE *)(v2 + 64) = 0;
        *(_BYTE *)(v2 + 80) = 0;
        *(_BYTE *)(v2 + 88) &= ~1u;
        *(_QWORD *)a2 = v2;
        a2[8] = 1;
        if (v4 && v3)
          CFRelease(v3);
        goto LABEL_21;
      }
    }
    else
    {
      __break(1u);
    }
    v15 = 1;
    goto LABEL_18;
  }
  *a2 = 0;
  a2[8] = 0;
LABEL_21:
  result = v20;
  v20 = 0;
  if (result)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)result);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)result));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)result);
      WebCore::SharedMemory::~SharedMemory(result);
      return (WebCore::SharedMemory *)WTF::fastFree(v18, v19);
    }
  }
  return result;
}

void WebCore::ShareableBitmap::createHandle(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const void *v6;
  int v7;
  CFTypeRef v8;
  CFTypeRef v9;
  _BYTE v10[8];
  __int128 v11;
  CFTypeRef cf;
  unsigned __int8 v13;
  char v14;
  BOOL v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  _BYTE v19[8];
  uint64_t v20;
  char v21;

  WebCore::SharedMemory::createHandle(*(_QWORD *)(a1 + 56), a2, (uint64_t)v19);
  if (v21)
  {
    WTF::MachSendRight::MachSendRight();
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v11 = v20;
    *((_QWORD *)&v11 + 1) = v5;
    LOBYTE(cf) = 0;
    v13 = 0;
    if (*(_BYTE *)(a1 + 24))
    {
      v6 = *(const void **)(a1 + 16);
      cf = v6;
      if (v6)
        CFRetain(v6);
      v13 = 1;
    }
    v14 = *(_BYTE *)(a1 + 32);
    v15 = *(_BYTE *)(a1 + 36) != 0;
    v16 = *(_DWORD *)(a1 + 40);
    v17 = *(_BYTE *)(a1 + 44) != 0;
    v18 = *(_QWORD *)(a1 + 48);
    WTF::MachSendRight::MachSendRight();
    *(_OWORD *)(a3 + 8) = v11;
    *(_BYTE *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 0;
    v7 = v13;
    if (v13)
    {
      v8 = cf;
      cf = 0;
      *(_QWORD *)(a3 + 24) = v8;
      *(_BYTE *)(a3 + 32) = 1;
    }
    *(_BYTE *)(a3 + 40) = v14;
    *(_BYTE *)(a3 + 44) = 0;
    if (v15)
      *(_BYTE *)(a3 + 44) = 1;
    *(_DWORD *)(a3 + 48) = v16;
    *(_BYTE *)(a3 + 52) = 0;
    if (v17)
      *(_BYTE *)(a3 + 52) = 1;
    *(_QWORD *)(a3 + 56) = v18;
    *(_BYTE *)(a3 + 64) = 1;
    if (v7)
    {
      v9 = cf;
      cf = 0;
      if (v9)
        CFRelease(v9);
    }
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v10);
    if (v21)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v19);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 64) = 0;
  }
}

uint64_t WebCore::ShareableBitmapHandle::ShareableBitmapHandle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const void *v7;

  v6 = WTF::MachSendRight::MachSendRight();
  *(_QWORD *)(v6 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)a3;
  *(_BYTE *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  if (*(_BYTE *)(a3 + 16))
  {
    v7 = *(const void **)(a3 + 8);
    *(_QWORD *)(a1 + 24) = v7;
    if (v7)
      CFRetain(v7);
    *(_BYTE *)(a1 + 32) = 1;
  }
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a3 + 24);
  *(_BYTE *)(a1 + 44) = 0;
  if (*(_BYTE *)(a3 + 28))
    *(_BYTE *)(a1 + 44) = 1;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 32);
  *(_BYTE *)(a1 + 52) = 0;
  if (*(_BYTE *)(a3 + 36))
    *(_BYTE *)(a1 + 52) = 1;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a3 + 40);
  return a1;
}

{
  uint64_t v6;
  const void *v7;

  v6 = WTF::MachSendRight::MachSendRight();
  *(_QWORD *)(v6 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)a3;
  *(_BYTE *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  if (*(_BYTE *)(a3 + 16))
  {
    v7 = *(const void **)(a3 + 8);
    *(_QWORD *)(a1 + 24) = v7;
    if (v7)
      CFRetain(v7);
    *(_BYTE *)(a1 + 32) = 1;
  }
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a3 + 24);
  *(_BYTE *)(a1 + 44) = 0;
  if (*(_BYTE *)(a3 + 28))
    *(_BYTE *)(a1 + 44) = 1;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 32);
  *(_BYTE *)(a1 + 52) = 0;
  if (*(_BYTE *)(a3 + 36))
    *(_BYTE *)(a1 + 52) = 1;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a3 + 40);
  return a1;
}

void WebCore::ShareableBitmap::createReadOnlyHandle(WebCore::ShareableBitmap *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::ShareableBitmap::createHandle((uint64_t)this, 0, a2);
}

uint64_t WebCore::ShareableBitmap::span(WebCore::ShareableBitmap *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 16);
}

uint64_t WebCore::ShareableBitmap::mutableSpan(WebCore::ShareableBitmap *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 16);
}

uint64_t WebCore::SourceBrush::SourceBrush(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  char v9;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x8000000000000) != 0)
  {
    v7 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  v5 = *(unsigned int *)(a3 + 72);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal[v5])(&v9);
    *(_DWORD *)(a1 + 80) = v5;
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  char v9;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x8000000000000) != 0)
  {
    v7 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  v5 = *(unsigned int *)(a3 + 72);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal[v5])(&v9);
    *(_DWORD *)(a1 + 80) = v5;
  }
  return a1;
}

char *WebCore::SourceBrush::gradientSpaceTransform(WebCore::SourceBrush *this)
{
  char *v1;
  int v2;
  char *v3;

  v1 = (char *)this + 16;
  v2 = *((_DWORD *)this + 20);
  if (v2 != 1)
    v1 = 0;
  v3 = v1 + 16;
  if (v2 == 1)
    return v3;
  else
    return (char *)&WebCore::identity;
}

uint64_t WebCore::SourceBrush::gradient(WebCore::SourceBrush *this)
{
  if (*((_DWORD *)this + 20) != 1 || *((_DWORD *)this + 6))
    return 0;
  else
    return *((_QWORD *)this + 2);
}

uint64_t WebCore::SourceBrush::setGradient(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;

  v3 = result;
  v4 = *a2;
  *a2 = 0;
  v22 = v4;
  v23 = 0;
  v5 = a3[1];
  v24 = *a3;
  v25 = v5;
  v26 = a3[2];
  v6 = (uint64_t *)(result + 16);
  v7 = *(unsigned int *)(result + 80);
  if ((_DWORD)v7 == 1)
  {
    v11 = *(unsigned int *)(result + 24);
    if ((_DWORD)v11 != -1)
    {
      if (!(_DWORD)v11)
      {
        v22 = 0;
        v12 = *v6;
        *v6 = v4;
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 8);
          if (__ldaxr((unsigned __int8 *)v13))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v13))
          {
LABEL_14:
            v15 = *(_QWORD *)(v13 + 8);
            v16 = v15 - 1;
            *(_QWORD *)(v13 + 8) = v15 - 1;
            if (v15 == 1)
            {
              v21 = *(_QWORD *)(v13 + 16);
              v17 = *(_QWORD *)(v13 + 24);
              *(_QWORD *)(v13 + 24) = 0;
              v18 = v21 != 0;
            }
            else
            {
              v17 = 0;
              v18 = 1;
            }
            v19 = __ldxr((unsigned __int8 *)v13);
            if (v19 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v13))
              {
LABEL_25:
                if (!v16)
                {
                  if (v17)
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
                  if (!v18)
                    result = WTF::fastFree((WTF *)v13, a2);
                }
                goto LABEL_22;
              }
            }
            else
            {
              __clrex();
            }
            result = WTF::Lock::unlockSlow((WTF::Lock *)v13);
            goto LABEL_25;
          }
          result = MEMORY[0x19AEA534C](v13);
          goto LABEL_14;
        }
LABEL_22:
        v20 = v25;
        *(_OWORD *)(v3 + 32) = v24;
        *(_OWORD *)(v3 + 48) = v20;
        *(_OWORD *)(v3 + 64) = v26;
        goto LABEL_5;
      }
      result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSM_EEEDcOSN_DpOT0____fmatrix[v11])(&v27, v6);
      v4 = v22;
    }
    v22 = 0;
    *(_QWORD *)(v3 + 16) = v4;
    *(_DWORD *)(v3 + 24) = 0;
    goto LABEL_22;
  }
  if ((_DWORD)v7 == -1)
  {
    v8 = 0;
    *(_DWORD *)(result + 24) = -1;
    v9 = (_DWORD *)(result + 24);
    *(_DWORD *)(result + 80) = -1;
    *(_BYTE *)(result + 16) = 0;
  }
  else
  {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v7])(&v27, v6);
    v8 = v23;
    *(_DWORD *)(v3 + 24) = -1;
    v9 = (_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 80) = -1;
    *(_BYTE *)(v3 + 16) = 0;
  }
  result = ((uint64_t (*)(char *, uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JSQ_SP_EEEDcmSS_DpOT0____fdiagonal[v8])(&v27, v6, &v22);
  *v9 = v8;
  v10 = v25;
  *(_OWORD *)(v3 + 32) = v24;
  *(_OWORD *)(v3 + 48) = v10;
  *(_OWORD *)(v3 + 64) = v26;
  *(_DWORD *)(v3 + 80) = 1;
LABEL_5:
  if (v23 != -1)
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSM_EEEDcOSN_DpOT0____fmatrix[v23])(&v27, &v22);
  return result;
}

uint64_t WebCore::SourceBrush::setPattern(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = result;
  v4 = *(unsigned int *)(result + 80);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v4])(&v6, result + 16);
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)(v3 + 16) = v5;
  *(_DWORD *)(v3 + 80) = 2;
  return result;
}

WebCore::SourceBufferPrivate *WebCore::SourceBufferPrivate::SourceBufferPrivate(WebCore::SourceBufferPrivate *this, WebCore::MediaSourcePrivate *a2)
{
  RefCountedSerialFunctionDispatcher *v4;

  v4 = (RefCountedSerialFunctionDispatcher *)WTF::RunLoop::current(this);
  return WebCore::SourceBufferPrivate::SourceBufferPrivate(this, a2, v4);
}

WebCore::SourceBufferPrivate *WebCore::SourceBufferPrivate::SourceBufferPrivate(WebCore::SourceBufferPrivate *this, WebCore::MediaSourcePrivate *a2, RefCountedSerialFunctionDispatcher *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  WTF::NativePromiseBase *v13;
  _BYTE *v14;
  uint64_t v15;
  __int128 v16;
  _BYTE *v17;
  WTF *v18;
  WTF::MediaTime *v19;
  WTF::MediaTime *v20;
  WTF::MediaTime *v21;
  WTF::MediaTime *v22;
  __int128 v24;
  __int128 v25;

  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_19689B170;
  *(_QWORD *)(v6 + 24) = this;
  *(_QWORD *)this = off_1E340F370;
  *((_QWORD *)this + 1) = v6;
  v7 = *((_QWORD *)a2 + 1);
  if (!v7)
  {
    v9 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v7);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v7 + 24))
  {
    ++*(_QWORD *)(v7 + 16);
    v9 = v7;
  }
  else
  {
    v9 = 0;
  }
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_13:
  *((_QWORD *)this + 2) = v9;
  *((_QWORD *)this + 3) = a2;
  (*((void (**)(RefCountedSerialFunctionDispatcher *))a3->var0 + 4))(a3);
  *((_QWORD *)this + 4) = a3;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_DWORD *)((char *)this + 71) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *((_BYTE *)this + 136) = 0;
  v24 = 0uLL;
  *(_QWORD *)&v25 = "SourceBufferPrivate";
  *((_QWORD *)&v25 + 1) = 0;
  v11 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)v11 = off_1E340F638;
  v12 = v25;
  *(_OWORD *)(v11 + 16) = v24;
  *(_OWORD *)(v11 + 32) = v12;
  *(_BYTE *)(v11 + 48) = 0;
  v13 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v13 = 1;
  *((_DWORD *)v13 + 4) = 0;
  *(_QWORD *)(v11 + 56) = v13;
  *(_QWORD *)(v11 + 64) = v11 + 80;
  *(_QWORD *)(v11 + 72) = 3;
  *(_WORD *)(v11 + 120) = 0;
  *(_QWORD *)(v11 + 104) = 0;
  *(_QWORD *)(v11 + 112) = 0;
  v14 = (_BYTE *)WTF::NativePromiseBase::logChannel(v13);
  if (*v14 && v14[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v14, v11);
  *((_QWORD *)this + 18) = v11;
  WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::resolve<std::enable_if<true,void>>(v11, (WTF::Logger::LogSiteIdentifier *)&v24);
  *((_WORD *)this + 76) = 0;
  *((_BYTE *)this + 154) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 20) = 0;
  v24 = 0uLL;
  v25 = (unint64_t)"SourceBufferPrivate";
  v15 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)v15 = off_1E3207198;
  v16 = v25;
  *(_OWORD *)(v15 + 16) = v24;
  *(_OWORD *)(v15 + 32) = v16;
  *(_BYTE *)(v15 + 48) = 0;
  *(_DWORD *)(v15 + 64) = 0;
  *(_QWORD *)(v15 + 72) = v15 + 88;
  *(_QWORD *)(v15 + 80) = 1;
  *(_QWORD *)(v15 + 96) = 0;
  *(_QWORD *)(v15 + 104) = 0;
  *(_WORD *)(v15 + 112) = 0;
  v17 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v15);
  if (*v17 && v17[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v17, 4u, "creating ", v15);
  *((_QWORD *)this + 23) = v15;
  v18 = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::resolve<std::enable_if<true,void>>(v15, (WTF::Logger::LogSiteIdentifier *)&v24);
  *((_QWORD *)this + 24) = 0;
  *((_DWORD *)this + 50) = 10000000;
  *((_BYTE *)this + 204) = 1;
  v19 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v18);
  *((_OWORD *)this + 13) = *(_OWORD *)v19;
  v20 = (WTF::MediaTime *)WTF::MediaTime::positiveInfiniteTime(v19);
  *((_OWORD *)this + 14) = *(_OWORD *)v20;
  *((_QWORD *)this + 30) = 0;
  *((_DWORD *)this + 62) = 10000000;
  *((_BYTE *)this + 252) = 1;
  v21 = (WTF::MediaTime *)WTF::MediaTime::invalidTime(v20);
  *((_OWORD *)this + 16) = *(_OWORD *)v21;
  v22 = (WTF::MediaTime *)WTF::MediaTime::invalidTime(v21);
  *((_OWORD *)this + 17) = *(_OWORD *)v22;
  *((_OWORD *)this + 18) = *(_OWORD *)WTF::MediaTime::zeroTime(v22);
  *((_BYTE *)this + 304) = 0;
  return this;
}

void WebCore::SourceBufferPrivate::~SourceBufferPrivate(WebCore::SourceBufferPrivate *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int **v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;

  *(_QWORD *)this = off_1E340F370;
  v3 = (unsigned int *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = *((unsigned int *)this + 45);
  if ((_DWORD)v7)
  {
    v8 = (unsigned int **)*((_QWORD *)this + 21);
    v9 = &v8[v7];
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        v11 = v10 + 2;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v10 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
        }
      }
      ++v8;
    }
    while (v8 != v9);
  }
  v14 = (WTF *)*((_QWORD *)this + 21);
  if (v14)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v14, a2);
  }
  v15 = (unsigned int *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
    }
  }
  v19 = (WTF *)*((_QWORD *)this + 14);
  if (v19)
  {
    do
    {
      v20 = *(WTF **)v19;
      v21 = (void *)*((_QWORD *)v19 + 3);
      *((_QWORD *)v19 + 3) = 0;
      if (v21)
        std::default_delete<WebCore::TrackBuffer>::operator()[abi:sn180100]((uint64_t)v19 + 24, (uint64_t)v21);
      WTF::fastFree(v19, v21);
      v19 = v20;
    }
    while (v20);
  }
  v22 = (WTF *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v22)
    WTF::fastFree(v22, a2);
  v23 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v23)
  {
    if (__ldaxr((unsigned __int8 *)v23))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v23))
    {
      goto LABEL_32;
    }
    MEMORY[0x19AEA534C](v23);
LABEL_32:
    v25 = *(_QWORD *)(v23 + 16) - 1;
    *(_QWORD *)(v23 + 16) = v25;
    if (!v25)
    {
      v26 = *(_QWORD *)(v23 + 8);
      v27 = __ldxr((unsigned __int8 *)v23);
      if (v27 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v23))
        {
          if (v26)
            goto LABEL_40;
LABEL_39:
          WTF::fastFree((WTF *)v23, a2);
          goto LABEL_40;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v23);
      if (v26)
        goto LABEL_40;
      goto LABEL_39;
    }
    v34 = __ldxr((unsigned __int8 *)v23);
    if (v34 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v23))
        goto LABEL_40;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
  }
LABEL_40:
  v28 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
  v29 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v29)
  {
    if (__ldaxr((unsigned __int8 *)v29))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v29))
    {
      goto LABEL_47;
    }
    MEMORY[0x19AEA534C](v29);
LABEL_47:
    v31 = *(_QWORD *)(v29 + 16) - 1;
    *(_QWORD *)(v29 + 16) = v31;
    if (!v31)
    {
      v32 = *(_QWORD *)(v29 + 8);
      v33 = __ldxr((unsigned __int8 *)v29);
      if (v33 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v29))
        {
          if (v32)
            return;
LABEL_54:
          WTF::fastFree((WTF *)v29, a2);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v29);
      if (v32)
        return;
      goto LABEL_54;
    }
    v35 = __ldxr((unsigned __int8 *)v29);
    if (v35 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v29))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v29);
  }
}

uint64_t WebCore::SourceBufferPrivate::removedFromMediaSource(WebCore::SourceBufferPrivate *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  _QWORD *v11;
  uint64_t result;
  _QWORD v13[4];

  v2 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 16))(this);
  v3 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 32))(this);
  v4 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 24))(this);
  v6 = v5;
  v7 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 40))(this);
  v13[0] = v4;
  v13[1] = v6;
  v13[2] = "removedFromMediaSource";
  v13[3] = v7;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>(v3, 0, (WTF::Logger::LogSiteIdentifier *)v13);
  v8 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_7:
  ++*(_QWORD *)(v8 + 8);
  v10 = __ldxr((unsigned __int8 *)v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = &off_1E340FB90;
  v11[1] = this;
  v11[2] = this;
  v13[0] = v11;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4)))
  {
    (*(void (**)(_QWORD *))(*v11 + 16))(v11);
    v13[0] = 0;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD *))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), v13);
    v11 = (_QWORD *)v13[0];
    v13[0] = 0;
    if (!v11)
      return result;
  }
  return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
}

uint64_t WebCore::SourceBufferPrivate::ensureOnDispatcher(uint64_t a1, _QWORD *a2)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)))
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    return (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2);
}

uint64_t *WebCore::SourceBufferPrivate::setClient(uint64_t a1, _QWORD *a2)
{
  return WTF::ThreadSafeWeakPtr<WebCore::WebTransportSessionClient>::operator=<WebCore::WebTransportSessionClient,(void *)0>((uint64_t *)(a1 + 80), a2);
}

uint64_t WebCore::SourceBufferPrivate::currentTime(WebCore::SourceBufferPrivate *this)
{
  uint64_t v1;
  _QWORD *v2;
  int v4;
  void *v5;
  WTF::MediaTime *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v15;
  WTF::MediaTime *v16;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return v1;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v1);
LABEL_7:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (v2)
        goto LABEL_13;
      return 0;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (!v2)
    return 0;
LABEL_13:
  (*(void (**)(WTF::MediaTime **__return_ptr, _QWORD *))(*v2 + 16))(&v16, v2);
  if (v16)
  {
    v1 = (*(uint64_t (**)(WTF::MediaTime *))(*(_QWORD *)v16 + 344))(v16);
    v6 = v16;
    v16 = 0;
    if (v6)
      (*(void (**)(WTF::MediaTime *))(*(_QWORD *)v6 + 24))(v6);
  }
  else
  {
    v1 = *(_QWORD *)WTF::MediaTime::invalidTime(0);
  }
  v7 = v2[1];
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_24;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_24:
  v9 = *(_QWORD *)(v7 + 8);
  v10 = v9 - 1;
  *(_QWORD *)(v7 + 8) = v9 - 1;
  if (v9 == 1)
  {
    v15 = *(_QWORD *)(v7 + 16);
    v11 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;
    v12 = v15 != 0;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
    {
      if (v10)
        return v1;
      goto LABEL_32;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (v10)
    return v1;
LABEL_32:
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (!v12)
    WTF::fastFree((WTF *)v7, v5);
  return v1;
}

uint64_t WebCore::SourceBufferPrivate::resetTimestampOffsetInTrackBuffers(WebCore::SourceBufferPrivate *this)
{
  uint64_t v2;
  uint64_t (**v3)();
  _QWORD *v4;

  v2 = WTF::fastMalloc((WTF *)0x10);
  v3 = off_1E340FBB8;
  *(_QWORD *)v2 = off_1E340FBB8;
  v4 = (_QWORD *)*((_QWORD *)this + 14);
  if (v4)
  {
    do
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, v4[3]);
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    v3 = *(uint64_t (***)())v2;
  }
  return ((uint64_t (*)(uint64_t))v3[1])(v2);
}

uint64_t WebCore::SourceBufferPrivate::resetTrackBuffers(WebCore::SourceBufferPrivate *this)
{
  uint64_t v2;
  uint64_t (**v3)();
  _QWORD *v4;

  v2 = WTF::fastMalloc((WTF *)0x10);
  v3 = off_1E340FBE0;
  *(_QWORD *)v2 = off_1E340FBE0;
  v4 = (_QWORD *)*((_QWORD *)this + 14);
  if (v4)
  {
    do
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, v4[3]);
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    v3 = *(uint64_t (***)())v2;
  }
  return ((uint64_t (*)(uint64_t))v3[1])(v2);
}

uint64_t WebCore::SourceBufferPrivate::updateHighestPresentationTimestamp(WebCore::SourceBufferPrivate *this)
{
  uint64_t (***v2)();
  uint64_t (**v3)();
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  _BYTE v20[13];

  *(_QWORD *)v20 = 0;
  *(_DWORD *)&v20[8] = 10000000;
  v20[12] = 1;
  v2 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
  v3 = off_1E340FC08;
  *v2 = off_1E340FC08;
  v2[1] = (uint64_t (**)())v20;
  v4 = (_QWORD *)*((_QWORD *)this + 14);
  if (v4)
  {
    do
    {
      ((void (*)(uint64_t (***)(), _QWORD))(*v2)[2])(v2, v4[3]);
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    v3 = *v2;
  }
  ((void (*)(uint64_t (***)()))v3[1])(v2);
  v5 = (_QWORD *)((char *)this + 240);
  result = WTF::MediaTime::compare((WebCore::SourceBufferPrivate *)((char *)this + 240), (const WTF::MediaTime *)v20);
  if ((_DWORD)result)
  {
    *v5 = *(_QWORD *)v20;
    *(_QWORD *)((char *)this + 245) = *(_QWORD *)&v20[5];
    v7 = *((_QWORD *)this + 10);
    if (v7)
    {
      v8 = (_QWORD *)*((_QWORD *)this + 11);
      if (__ldaxr((unsigned __int8 *)v7))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v7))
      {
        goto LABEL_10;
      }
      result = MEMORY[0x19AEA534C](v7);
LABEL_10:
      if (*(_QWORD *)(v7 + 24))
        ++*(_QWORD *)(v7 + 8);
      else
        v8 = 0;
      v10 = __ldxr((unsigned __int8 *)v7);
      if (v10 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v7))
        {
          if (!v8)
            return result;
          goto LABEL_19;
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v7);
      if (!v8)
        return result;
LABEL_19:
      result = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v8 + 40))(v8, v5);
      v12 = v8[1];
      if (__ldaxr((unsigned __int8 *)v12))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v12))
      {
        goto LABEL_23;
      }
      result = MEMORY[0x19AEA534C](v12);
LABEL_23:
      v14 = *(_QWORD *)(v12 + 8);
      v15 = v14 - 1;
      *(_QWORD *)(v12 + 8) = v14 - 1;
      if (v14 == 1)
      {
        v19 = *(_QWORD *)(v12 + 16);
        v16 = *(_QWORD *)(v12 + 24);
        *(_QWORD *)(v12 + 24) = 0;
        v17 = v19 != 0;
      }
      else
      {
        v16 = 0;
        v17 = 1;
      }
      v18 = __ldxr((unsigned __int8 *)v12);
      if (v18 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v12))
        {
          if (v15)
            return result;
LABEL_31:
          if (v16)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          if (!v17)
            return WTF::fastFree((WTF *)v12, v11);
          return result;
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v12);
      if (v15)
        return result;
      goto LABEL_31;
    }
  }
  return result;
}

uint64_t WebCore::SourceBufferPrivate::client@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v6;

  v3 = *(_QWORD *)(this + 80);
  if (!v3)
  {
    *a2 = 0;
    return this;
  }
  v4 = *(_QWORD *)(this + 88);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_7;
  }
  this = MEMORY[0x19AEA534C](v3);
LABEL_7:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  *a2 = v4;
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return this;
}

WTF *WebCore::SourceBufferPrivate::updateBuffered(WebCore::SourceBufferPrivate *this, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v7;
  _QWORD *v8;
  unint64_t v9;
  WTF *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  char *v21;
  void *v22;
  WTF *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  int v36;
  _QWORD *v37;
  unint64_t v38;
  WTF *v39;
  uint64_t v40;
  __int128 v41;
  _BYTE *v42;
  WTF *result;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 v53;
  char *v54;
  void *v55;
  WTF *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67[2];
  __int128 v68;
  char v69;

  v4 = a2[2];
  if (!v4)
    goto LABEL_53;
  v5 = (_QWORD *)a2[3];
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
    ++*(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 != 1)
  {
    __clrex();
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (!v5)
      goto LABEL_53;
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_14;
  if (!v5)
    goto LABEL_53;
LABEL_15:
  v67[0] = 0;
  v67[1] = 0;
  v8 = (_QWORD *)a2[14];
  v9 = a2[15];
  if (!v9)
  {
    v10 = 0;
    if (!v8)
      goto LABEL_29;
LABEL_20:
    v11 = 0;
    while (1)
    {
      v12 = v8[3];
      v13 = *(unsigned int *)(v12 + 108);
      if ((_DWORD)v13)
      {
        if (v13 >> 27)
        {
          __break(0xC471u);
          goto LABEL_116;
        }
        v14 = WTF::fastMalloc((WTF *)(32 * v13));
        v15 = *(unsigned int *)(v12 + 108);
        if ((_DWORD)v15)
        {
          v16 = 0;
          v17 = *(_QWORD *)(v12 + 96);
          v18 = 32 * v15;
          do
          {
            v19 = (_OWORD *)(v14 + v16);
            v20 = *(_OWORD *)(v17 + v16 + 16);
            *v19 = *(_OWORD *)(v17 + v16);
            v19[1] = v20;
            v16 += 32;
          }
          while (v18 != v16);
        }
      }
      else
      {
        v14 = 0;
      }
      v21 = (char *)v10 + 16 * v11;
      *(_QWORD *)v21 = v14;
      *((_DWORD *)v21 + 2) = v13;
      *((_DWORD *)v21 + 3) = v13;
      HIDWORD(v67[1]) = ++v11;
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_29;
    }
  }
  if (v9 >> 28)
  {
    __break(0xC471u);
    JUMPOUT(0x1961BA7A4);
  }
  v10 = (WTF *)WTF::fastMalloc((WTF *)(16 * v9));
  LODWORD(v67[1]) = v9;
  v67[0] = v10;
  if (v8)
    goto LABEL_20;
LABEL_29:
  (*(void (**)(_QWORD *, _QWORD *, WTF **))(*v5 + 72))(v5, a2, v67);
  v23 = v67[0];
  if (HIDWORD(v67[1]))
  {
    v24 = 16 * HIDWORD(v67[1]);
    do
    {
      v25 = *(WTF **)v23;
      if (*(_QWORD *)v23)
      {
        *(_QWORD *)v23 = 0;
        *((_DWORD *)v23 + 2) = 0;
        WTF::fastFree(v25, v22);
      }
      v23 = (WTF *)((char *)v23 + 16);
      v24 -= 16;
    }
    while (v24);
    v23 = v67[0];
  }
  if (v23)
  {
    v67[0] = 0;
    LODWORD(v67[1]) = 0;
    WTF::fastFree(v23, v22);
  }
  v26 = v5[1];
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_41;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_41:
  v28 = *(_QWORD *)(v26 + 8);
  v29 = v28 - 1;
  *(_QWORD *)(v26 + 8) = v28 - 1;
  if (v28 == 1)
  {
    v65 = *(_QWORD *)(v26 + 16);
    v30 = *(_QWORD *)(v26 + 24);
    *(_QWORD *)(v26 + 24) = 0;
    v31 = v65 != 0;
  }
  else
  {
    v30 = 0;
    v31 = 1;
  }
  v32 = __ldxr((unsigned __int8 *)v26);
  if (v32 != 1)
  {
    __clrex();
LABEL_48:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
    if (v29)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
    goto LABEL_48;
  if (v29)
    goto LABEL_53;
LABEL_49:
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  if (!v31)
    WTF::fastFree((WTF *)v26, v22);
LABEL_53:
  v33 = a2[10];
  if (!v33)
    goto LABEL_70;
  v34 = (_QWORD *)a2[11];
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_58;
  }
  MEMORY[0x19AEA534C](v33);
LABEL_58:
  if (*(_QWORD *)(v33 + 24))
    ++*(_QWORD *)(v33 + 8);
  else
    v34 = 0;
  v36 = __ldxr((unsigned __int8 *)v33);
  if (v36 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v33))
    {
      if (v34)
        goto LABEL_64;
      goto LABEL_70;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v33);
  if (v34)
  {
LABEL_64:
    v67[0] = 0;
    v67[1] = 0;
    v37 = (_QWORD *)a2[14];
    v38 = a2[15];
    if (v38)
    {
      if (v38 >> 28)
      {
        __break(0xC471u);
LABEL_116:
        JUMPOUT(0x1961BA794);
      }
      v39 = (WTF *)WTF::fastMalloc((WTF *)(16 * v38));
      LODWORD(v67[1]) = v38;
      v67[0] = v39;
      if (!v37)
      {
LABEL_85:
        result = (WTF *)(*(uint64_t (**)(_QWORD *, WTF **))(*v34 + 24))(v34, v67);
        v56 = v67[0];
        if (HIDWORD(v67[1]))
        {
          v57 = 16 * HIDWORD(v67[1]);
          do
          {
            result = *(WTF **)v56;
            if (*(_QWORD *)v56)
            {
              *(_QWORD *)v56 = 0;
              *((_DWORD *)v56 + 2) = 0;
              result = (WTF *)WTF::fastFree(result, v55);
            }
            v56 = (WTF *)((char *)v56 + 16);
            v57 -= 16;
          }
          while (v57);
          v56 = v67[0];
        }
        if (v56)
        {
          v67[0] = 0;
          LODWORD(v67[1]) = 0;
          result = (WTF *)WTF::fastFree(v56, v55);
        }
        v58 = v34[1];
        if (__ldaxr((unsigned __int8 *)v58))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v58))
        {
          goto LABEL_97;
        }
        result = (WTF *)MEMORY[0x19AEA534C](v58);
LABEL_97:
        v60 = *(_QWORD *)(v58 + 8);
        v61 = v60 - 1;
        *(_QWORD *)(v58 + 8) = v60 - 1;
        if (v60 == 1)
        {
          v66 = *(_QWORD *)(v58 + 16);
          v62 = *(_QWORD *)(v58 + 24);
          *(_QWORD *)(v58 + 24) = 0;
          v63 = v66 != 0;
        }
        else
        {
          v62 = 0;
          v63 = 1;
        }
        v64 = __ldxr((unsigned __int8 *)v58);
        if (v64 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v58))
          {
            if (v61)
              return result;
LABEL_105:
            if (v62)
              result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
            if (!v63)
              return (WTF *)WTF::fastFree((WTF *)v58, v55);
            return result;
          }
        }
        else
        {
          __clrex();
        }
        result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v58);
        if (v61)
          return result;
        goto LABEL_105;
      }
    }
    else
    {
      v39 = 0;
      if (!v37)
        goto LABEL_85;
    }
    v44 = 0;
    do
    {
      v45 = v37[3];
      v46 = *(unsigned int *)(v45 + 108);
      if ((_DWORD)v46)
      {
        if (v46 >> 27)
        {
          __break(0xC471u);
          JUMPOUT(0x1961BA79CLL);
        }
        v47 = WTF::fastMalloc((WTF *)(32 * v46));
        v48 = *(unsigned int *)(v45 + 108);
        if ((_DWORD)v48)
        {
          v49 = 0;
          v50 = *(_QWORD *)(v45 + 96);
          v51 = 32 * v48;
          do
          {
            v52 = (_OWORD *)(v47 + v49);
            v53 = *(_OWORD *)(v50 + v49 + 16);
            *v52 = *(_OWORD *)(v50 + v49);
            v52[1] = v53;
            v49 += 32;
          }
          while (v51 != v49);
        }
      }
      else
      {
        v47 = 0;
      }
      v54 = (char *)v39 + 16 * v44;
      *(_QWORD *)v54 = v47;
      *((_DWORD *)v54 + 2) = v46;
      *((_DWORD *)v54 + 3) = v46;
      ++v44;
      v37 = (_QWORD *)*v37;
    }
    while (v37);
    HIDWORD(v67[1]) = v44;
    goto LABEL_85;
  }
LABEL_70:
  v69 = 2;
  v67[0] = 0;
  v67[1] = 0;
  *(_QWORD *)&v68 = "updateBuffered";
  *((_QWORD *)&v68 + 1) = 0;
  v40 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v40 + 8) = 1;
  *(_QWORD *)v40 = off_1E3207198;
  v41 = v68;
  *(_OWORD *)(v40 + 16) = *(_OWORD *)v67;
  *(_OWORD *)(v40 + 32) = v41;
  *(_BYTE *)(v40 + 48) = 0;
  *(_DWORD *)(v40 + 64) = 0;
  *(_QWORD *)(v40 + 72) = v40 + 88;
  *(_QWORD *)(v40 + 80) = 1;
  *(_QWORD *)(v40 + 96) = 0;
  *(_QWORD *)(v40 + 104) = 0;
  *(_WORD *)(v40 + 112) = 0;
  v42 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v40);
  if (*v42 && v42[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v42, 4u, "creating ", v40);
  *(_QWORD *)this = v40;
  return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v40, &v69, (WTF::Logger::LogSiteIdentifier *)v67);
}

uint64_t WebCore::SourceBufferPrivate::trackBuffersRanges@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_QWORD **)(this + 112);
  v4 = *(_QWORD *)(this + 120);
  if (!v4)
  {
    v5 = 0;
    if (!v3)
      return this;
    goto LABEL_6;
  }
  if (v4 >> 28)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x1961BA88CLL);
  }
  this = WTF::fastMalloc((WTF *)(16 * v4));
  v5 = this;
  *(_DWORD *)(a2 + 8) = v4;
  *(_QWORD *)a2 = this;
  if (v3)
  {
LABEL_6:
    v6 = 0;
    do
    {
      v7 = v3[3];
      v8 = *(unsigned int *)(v7 + 108);
      if ((_DWORD)v8)
      {
        if (v8 >> 27)
          goto LABEL_16;
        this = WTF::fastMalloc((WTF *)(32 * v8));
        v9 = *(unsigned int *)(v7 + 108);
        if ((_DWORD)v9)
        {
          v10 = 0;
          v11 = *(_QWORD *)(v7 + 96);
          v12 = 32 * v9;
          do
          {
            v13 = (_OWORD *)(this + v10);
            v14 = *(_OWORD *)(v11 + v10 + 16);
            *v13 = *(_OWORD *)(v11 + v10);
            v13[1] = v14;
            v10 += 32;
          }
          while (v12 != v10);
        }
      }
      else
      {
        this = 0;
      }
      v15 = v5 + 16 * v6;
      *(_QWORD *)v15 = this;
      *(_DWORD *)(v15 + 8) = v8;
      *(_DWORD *)(v15 + 12) = v8;
      *(_DWORD *)(a2 + 12) = ++v6;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  return this;
}

WebCore::SourceBufferPrivate *WebCore::SourceBufferPrivate::reenqueSamples(WebCore::SourceBufferPrivate *this, WTF::String *a2, int a3)
{
  uint64_t v3;
  WebCore::SourceBufferPrivate *v6;
  uint64_t v7;
  int v9;
  int8x8_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  _QWORD v29[2];
  _QWORD v30[2];

  v3 = *((_QWORD *)this + 10);
  if (!v3)
    return this;
  v6 = this;
  v7 = *((_QWORD *)this + 11);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  this = (WebCore::SourceBufferPrivate *)MEMORY[0x19AEA534C](v3);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v7 = 0;
  v9 = __ldxr((unsigned __int8 *)v3);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v7)
        return this;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  this = (WebCore::SourceBufferPrivate *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v7)
    return this;
LABEL_15:
  v10 = *(int8x8_t *)((char *)v6 + 104);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8(v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = (unint64_t)a2;
      if (*(_QWORD *)&v10 <= (unint64_t)a2)
        v12 = (unint64_t)a2 % *(_QWORD *)&v10;
    }
    else
    {
      v12 = (*(_QWORD *)&v10 - 1) & (unint64_t)a2;
    }
    v13 = *(_QWORD **)(*((_QWORD *)v6 + 12) + 8 * v12);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (v14)
      {
        if (v11.u32[0] >= 2uLL)
        {
          while (1)
          {
            v17 = v14[1];
            if ((WTF::String *)v17 == a2)
            {
              if ((WTF::String *)v14[2] == a2)
              {
LABEL_38:
                v18 = v14[3];
                *(_BYTE *)(v18 + 310) = 1;
                v29[0] = WebCore::SourceBufferPrivate::currentTime(v6);
                v29[1] = v19;
                if (a3)
                  (*(void (**)(WebCore::SourceBufferPrivate *, WTF::String *))(*(_QWORD *)v6 + 456))(v6, a2);
                v30[0] = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)v6 + 432))(v6);
                v30[1] = v20;
                this = (WebCore::SourceBufferPrivate *)WebCore::TrackBuffer::reenqueueMediaForTime((WTF **)v18, (const WTF::MediaTime *)v29, (const WTF::MediaTime *)v30);
                if ((_DWORD)this)
                  this = (WebCore::SourceBufferPrivate *)WebCore::SourceBufferPrivate::provideMediaData(v6, (WebCore::TrackBuffer *)v18, a2);
                goto LABEL_42;
              }
            }
            else
            {
              if (v17 >= *(_QWORD *)&v10)
                v17 %= *(_QWORD *)&v10;
              if (v17 != v12)
                goto LABEL_42;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_42;
          }
        }
        v15 = *(_QWORD *)&v10 - 1;
        do
        {
          v16 = v14[1];
          if ((WTF::String *)v16 == a2)
          {
            if ((WTF::String *)v14[2] == a2)
              goto LABEL_38;
          }
          else if ((v16 & v15) != v12)
          {
            break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_42:
  v21 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v21))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v21))
  {
    goto LABEL_46;
  }
  this = (WebCore::SourceBufferPrivate *)MEMORY[0x19AEA534C](v21);
LABEL_46:
  v23 = *(_QWORD *)(v21 + 8);
  v24 = v23 - 1;
  *(_QWORD *)(v21 + 8) = v23 - 1;
  if (v23 == 1)
  {
    v28 = *(_QWORD *)(v21 + 16);
    v25 = *(_QWORD *)(v21 + 24);
    *(_QWORD *)(v21 + 24) = 0;
    v26 = v28 != 0;
  }
  else
  {
    v25 = 0;
    v26 = 1;
  }
  v27 = __ldxr((unsigned __int8 *)v21);
  if (v27 != 1)
  {
    __clrex();
LABEL_53:
    this = (WebCore::SourceBufferPrivate *)WTF::Lock::unlockSlow((WTF::Lock *)v21);
    if (v24)
      return this;
    goto LABEL_54;
  }
  if (__stlxr(0, (unsigned __int8 *)v21))
    goto LABEL_53;
  if (v24)
    return this;
LABEL_54:
  if (v25)
    this = (WebCore::SourceBufferPrivate *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (!v26)
    return (WebCore::SourceBufferPrivate *)WTF::fastFree((WTF *)v21, a2);
  return this;
}

WTF::Lock *WebCore::SourceBufferPrivate::computeSeekTime@<X0>(WebCore::SourceBufferPrivate *this@<X0>, uint64_t (**a2)()@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  int v9;
  uint64_t (***v10)();
  uint64_t (**v11)();
  _QWORD *v12;
  double v13;
  int v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  _BYTE *v18;
  WTF::Lock *result;
  void *v20;
  uint64_t v21;
  uint64_t v23;
  __int128 v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v4 = *((_QWORD *)this + 10);
  if (!v4)
    goto LABEL_27;
  v7 = *((_QWORD *)this + 11);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
    ++*(_QWORD *)(v4 + 8);
  else
    v7 = 0;
  v9 = __ldxr((unsigned __int8 *)v4);
  if (v9 != 1)
  {
    __clrex();
LABEL_26:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_12;
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_26;
  if (v7)
  {
LABEL_12:
    v32 = *(_OWORD *)a2;
    if ((WTF::MediaTime::operator BOOL() & 1) != 0 || WTF::MediaTime::operator BOOL())
    {
      v10 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x18);
      v11 = off_1E340FC30;
      *v10 = off_1E340FC30;
      v10[1] = a2;
      v10[2] = (uint64_t (**)())&v32;
      v12 = (_QWORD *)*((_QWORD *)this + 14);
      if (v12)
      {
        do
        {
          ((void (*)(uint64_t (***)(), _QWORD))(*v10)[2])(v10, v12[3]);
          v12 = (_QWORD *)*v12;
        }
        while (v12);
        v11 = *v10;
      }
      ((void (*)(uint64_t (***)()))v11[1])(v10);
    }
    if ((BYTE12(v32) & 0x20) != 0)
    {
      WTF::MediaTime::toDouble((WTF::MediaTime *)&v32);
      *(_QWORD *)&v32 = WTF::MediaTime::createWithDouble((WTF::MediaTime *)0x989680, v13);
      DWORD2(v32) = v14;
      BYTE12(v32) = v15;
    }
    WebCore::SourceBufferPrivate::computeEvictionData(this, 0);
    v33 = 0uLL;
    *(_QWORD *)&v34 = "computeSeekTime";
    *((_QWORD *)&v34 + 1) = 0;
    v16 = WTF::fastMalloc((WTF *)0x88);
    *(_DWORD *)(v16 + 8) = 1;
    *(_QWORD *)v16 = off_1E335DEE0;
    v17 = v34;
    *(_OWORD *)(v16 + 16) = v33;
    *(_OWORD *)(v16 + 32) = v17;
    *(_BYTE *)(v16 + 48) = 0;
    *(_DWORD *)(v16 + 80) = 0;
    *(_QWORD *)(v16 + 88) = v16 + 104;
    *(_QWORD *)(v16 + 96) = 1;
    *(_QWORD *)(v16 + 112) = 0;
    *(_QWORD *)(v16 + 120) = 0;
    *(_WORD *)(v16 + 128) = 0;
    v18 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v16);
    if (*v18 && v18[16] >= 4u)
      WTF::Logger::log<char [10],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>((uint64_t)v18, 4u, "creating ", v16);
    *a3 = v16;
    result = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::resolve<WTF::MediaTime&,std::enable_if<true,void>>(v16, &v32, (WTF::Logger::LogSiteIdentifier *)&v33);
    v21 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v21))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v21))
    {
      goto LABEL_33;
    }
    result = (WTF::Lock *)MEMORY[0x19AEA534C](v21);
LABEL_33:
    v26 = *(_QWORD *)(v21 + 8);
    v27 = v26 - 1;
    *(_QWORD *)(v21 + 8) = v26 - 1;
    if (v26 == 1)
    {
      v31 = *(_QWORD *)(v21 + 16);
      v28 = *(_QWORD *)(v21 + 24);
      *(_QWORD *)(v21 + 24) = 0;
      v29 = v31 != 0;
    }
    else
    {
      v28 = 0;
      v29 = 1;
    }
    v30 = __ldxr((unsigned __int8 *)v21);
    if (v30 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v21))
      {
        if (v27)
          return result;
LABEL_41:
        if (v28)
          result = (WTF::Lock *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        if (!v29)
          return (WTF::Lock *)WTF::fastFree((WTF *)v21, v20);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (WTF::Lock *)WTF::Lock::unlockSlow((WTF::Lock *)v21);
    if (v27)
      return result;
    goto LABEL_41;
  }
LABEL_27:
  LOBYTE(v32) = 2;
  v33 = 0uLL;
  *(_QWORD *)&v34 = "computeSeekTime";
  *((_QWORD *)&v34 + 1) = 0;
  v23 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v23 + 8) = 1;
  *(_QWORD *)v23 = off_1E335DEE0;
  v24 = v34;
  *(_OWORD *)(v23 + 16) = v33;
  *(_OWORD *)(v23 + 32) = v24;
  *(_BYTE *)(v23 + 48) = 0;
  *(_DWORD *)(v23 + 80) = 0;
  *(_QWORD *)(v23 + 88) = v23 + 104;
  *(_QWORD *)(v23 + 96) = 1;
  *(_QWORD *)(v23 + 112) = 0;
  *(_QWORD *)(v23 + 120) = 0;
  *(_WORD *)(v23 + 128) = 0;
  v25 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v23);
  if (*v25 && v25[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>((uint64_t)v25, 4u, "creating ", v23);
  *a3 = v23;
  return WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v23, (char *)&v32, (WTF::Logger::LogSiteIdentifier *)&v33);
}

WTF *WebCore::SourceBufferPrivate::computeEvictionData(_QWORD *a1, int a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (***v7)();
  uint64_t (**v8)();
  _QWORD *v9;
  uint64_t v10;
  WTF *result;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::MediaTime *v20;
  uint64_t v21;
  uint64_t (***v22)();
  uint64_t (**v23)();
  _QWORD *v24;
  uint64_t v25;
  uint64_t (***v26)();
  uint64_t (**v27)();
  _QWORD *v28;
  uint64_t *v29;
  WTF::MediaTime *v30;
  uint64_t (***v31)();
  uint64_t (**v32)();
  _QWORD *v33;
  WTF::MediaTime *v34;
  __int128 *v35;
  uint64_t (***v36)();
  uint64_t (**v37)();
  _QWORD *v38;
  WTF::MediaTime *v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  WTF::MediaTime **v53;
  WTF::MediaTime *v54;
  uint64_t (***v55)();
  uint64_t (**v56)();
  _QWORD *v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  int v64;
  uint64_t v65;
  _QWORD *v66;
  int v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  WTF::MediaTime *v81;
  uint64_t v82;
  WTF *v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  int v88;
  char v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD v94[2];

  v4 = a1 + 5;
  v5 = a1[5];
  v6 = a1[6];
  v78 = a1[8];
  v79 = a1[7];
  if ((*(uint64_t (**)(_QWORD *))(*a1 + 208))(a1))
  {
    *(_QWORD *)&v94[0] = 0;
    v7 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
    v8 = off_1E340F740;
    *v7 = off_1E340F740;
    v7[1] = (uint64_t (**)())v94;
    v9 = (_QWORD *)a1[14];
    if (v9)
    {
      do
      {
        ((void (*)(uint64_t (***)(), _QWORD))(*v7)[2])(v7, v9[3]);
        v9 = (_QWORD *)*v9;
      }
      while (v9);
      v8 = *v7;
    }
    ((void (*)(uint64_t (***)()))v8[1])(v7);
    v10 = *(_QWORD *)&v94[0];
  }
  else
  {
    v10 = 0;
  }
  a1[8] = v10;
  result = (WTF *)(*(uint64_t (**)(_QWORD *))(*a1 + 216))(a1);
  a1[5] = result;
  v13 = a1[2];
  if (!v13)
    goto LABEL_23;
  v14 = (_QWORD *)a1[3];
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_12;
  }
  result = (WTF *)MEMORY[0x19AEA534C](v13);
LABEL_12:
  if (*(_QWORD *)(v13 + 24))
    ++*(_QWORD *)(v13 + 8);
  else
    v14 = 0;
  v16 = __ldxr((unsigned __int8 *)v13);
  if (v16 != 1)
  {
    __clrex();
LABEL_22:
    result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v14)
      goto LABEL_18;
LABEL_23:
    v21 = 0;
    goto LABEL_94;
  }
  if (__stlxr(0, (unsigned __int8 *)v13))
    goto LABEL_22;
  if (!v14)
    goto LABEL_23;
LABEL_18:
  v91 = 0;
  (*(void (**)(_OWORD *__return_ptr, _QWORD *))(*v14 + 16))(v94, v14);
  if (*(_QWORD *)&v94[0])
  {
    v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v94[0] + 344))(*(_QWORD *)&v94[0]);
    v19 = v18;
    v20 = *(WTF::MediaTime **)&v94[0];
    *(_QWORD *)&v94[0] = 0;
    if (v20)
      v20 = (WTF::MediaTime *)(*(uint64_t (**)(WTF::MediaTime *))(*(_QWORD *)v20 + 24))(v20);
  }
  else
  {
    v20 = (WTF::MediaTime *)WTF::MediaTime::invalidTime(0);
    v17 = *(_QWORD *)v20;
    v19 = *((_QWORD *)v20 + 1);
  }
  *(_QWORD *)&v90 = v17;
  *((_QWORD *)&v90 + 1) = v19;
  v87 = 3000;
  v88 = 1000;
  v89 = 1;
  v94[0] = *(_OWORD *)WTF::MediaTime::positiveInfiniteTime(v20);
  v22 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
  v23 = off_1E340FEB0;
  *v22 = off_1E340FEB0;
  v22[1] = (uint64_t (**)())v94;
  v24 = (_QWORD *)a1[14];
  if (v24)
  {
    do
    {
      ((void (*)(uint64_t (***)(), _QWORD))(*v22)[2])(v22, v24[3]);
      v24 = (_QWORD *)*v24;
    }
    while (v24);
    v23 = *v22;
  }
  ((void (*)(uint64_t (***)()))v23[1])(v22);
  v86 = v94[0];
  v92 = WTF::MediaTime::operator-();
  v93 = v25;
  v94[0] = v90;
  v26 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x18);
  v27 = off_1E340FD40;
  *v26 = off_1E340FD40;
  v26[1] = (uint64_t (**)())&v90;
  v26[2] = (uint64_t (**)())v94;
  v28 = (_QWORD *)a1[14];
  if (v28)
  {
    do
    {
      ((void (*)(uint64_t (***)(), _QWORD))(*v26)[2])(v26, v28[3]);
      v28 = (_QWORD *)*v28;
    }
    while (v28);
    v27 = *v26;
  }
  ((void (*)(uint64_t (***)()))v27[1])(v26);
  if (WTF::MediaTime::compare((WTF::MediaTime *)v94, (const WTF::MediaTime *)&v92) == -1)
    v29 = (uint64_t *)v94;
  else
    v29 = &v92;
  v85 = *(_OWORD *)v29;
  v30 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)&v86, (const WTF::MediaTime *)&v85);
  if ((_DWORD)v30 == -1)
  {
    v31 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
    v32 = off_1E340F768;
    *v31 = off_1E340F768;
    v31[1] = (uint64_t (**)())&v91;
    v31[2] = (uint64_t (**)())&v86;
    v31[3] = (uint64_t (**)())&v85;
    v33 = (_QWORD *)a1[14];
    if (v33)
    {
      do
      {
        ((void (*)(uint64_t (***)(), _QWORD))(*v31)[2])(v31, v33[3]);
        v33 = (_QWORD *)*v33;
      }
      while (v33);
      v32 = *v31;
    }
    v30 = (WTF::MediaTime *)((uint64_t (*)(uint64_t (***)()))v32[1])(v31);
  }
  v34 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v30);
  v35 = (__int128 *)WTF::MediaTime::positiveInfiniteTime(v34);
  v83 = 0;
  v84 = 0;
  WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v83, (__int128 *)v34, v35, 0);
  v36 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
  v37 = off_1E340F790;
  *v36 = off_1E340F790;
  v36[1] = (uint64_t (**)())&v83;
  v38 = (_QWORD *)a1[14];
  if (v38)
  {
    do
    {
      ((void (*)(uint64_t (***)(), _QWORD))(*v36)[2])(v36, v38[3]);
      v38 = (_QWORD *)*v38;
    }
    while (v38);
    v37 = *v36;
  }
  ((void (*)(uint64_t (***)()))v37[1])(v36);
  v39 = (WTF::MediaTime *)WTF::MediaTime::operator+();
  v81 = v39;
  v82 = v40;
  if (HIDWORD(v84))
    v41 = (__int128 *)((char *)v83 + 32 * (HIDWORD(v84) - 1) + 16);
  else
    v41 = (__int128 *)WTF::MediaTime::invalidTime(v39);
  v80 = *v41;
  if ((WTF::MediaTime::compare((WTF::MediaTime *)&v81, (const WTF::MediaTime *)&v80) & 0x80000000) != 0)
  {
    if (!HIDWORD(v84))
      goto LABEL_72;
    v42 = 0;
    v43 = 0;
    while (1)
    {
      v94[0] = *(_OWORD *)((char *)v83 + v42);
      v44 = WTF::MediaTime::compare((WTF::MediaTime *)&v90, (const WTF::MediaTime *)v94);
      if ((v44 & 0x80000000) == 0)
      {
        if (v43 >= HIDWORD(v84))
        {
          v45 = (uint64_t *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v44);
          v46 = v45 + 1;
        }
        else
        {
          v45 = (uint64_t *)((char *)v83 + v42 + 16);
          v46 = (uint64_t *)((char *)v83 + v42 + 24);
        }
        v47 = *v46;
        v92 = *v45;
        v93 = v47;
        v44 = WTF::MediaTime::compare((WTF::MediaTime *)&v90, (const WTF::MediaTime *)&v92);
        if ((int)v44 <= 0)
          break;
      }
      ++v43;
      v42 += 32;
      if (v43 >= HIDWORD(v84))
      {
        v43 = -1;
        if (!HIDWORD(v84))
          goto LABEL_64;
        goto LABEL_57;
      }
    }
    if (!HIDWORD(v84))
    {
LABEL_64:
      v49 = -1;
      goto LABEL_65;
    }
LABEL_57:
    v48 = 0;
    v49 = 0;
    while (1)
    {
      v94[0] = *(_OWORD *)((char *)v83 + v48);
      v44 = WTF::MediaTime::compare((WTF::MediaTime *)&v81, (const WTF::MediaTime *)v94);
      if ((v44 & 0x80000000) == 0)
      {
        if (v49 >= HIDWORD(v84))
        {
          v50 = (uint64_t *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v44);
          v51 = v50 + 1;
        }
        else
        {
          v50 = (uint64_t *)((char *)v83 + v48 + 16);
          v51 = (uint64_t *)((char *)v83 + v48 + 24);
        }
        v52 = *v51;
        v92 = *v50;
        v93 = v52;
        v44 = WTF::MediaTime::compare((WTF::MediaTime *)&v81, (const WTF::MediaTime *)&v92);
        if ((int)v44 < 1)
          break;
      }
      ++v49;
      v48 += 32;
      if (v49 >= HIDWORD(v84))
        goto LABEL_64;
    }
LABEL_65:
    if (v43 == -1
      || v49 != v43
      || v43 + 1 != HIDWORD(v84)
      && (HIDWORD(v84) <= (v43 + 1)
        ? (v53 = (WTF::MediaTime **)WTF::MediaTime::zeroTime((WTF::MediaTime *)v44))
        : (v53 = (WTF::MediaTime **)((char *)v83 + 32 * (v43 + 1))),
          v54 = v53[1],
          v81 = *v53,
          LODWORD(v82) = (_DWORD)v54,
          BYTE4(v82) = BYTE4(v54),
          (WTF::MediaTime::compare((WTF::MediaTime *)&v81, (const WTF::MediaTime *)&v80) & 0x80000000) != 0))
    {
LABEL_72:
      v55 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
      v56 = off_1E340F7B8;
      *v55 = off_1E340F7B8;
      v55[1] = (uint64_t (**)())&v91;
      v55[2] = (uint64_t (**)())&v81;
      v55[3] = (uint64_t (**)())&v80;
      v57 = (_QWORD *)a1[14];
      if (v57)
      {
        do
        {
          ((void (*)(uint64_t (***)(), _QWORD))(*v55)[2])(v55, v57[3]);
          v57 = (_QWORD *)*v57;
        }
        while (v57);
        v56 = *v55;
      }
      ((void (*)(uint64_t (***)()))v56[1])(v55);
    }
  }
  v21 = v91;
  result = v83;
  if (v83)
  {
    v83 = 0;
    LODWORD(v84) = 0;
    result = (WTF *)WTF::fastFree(result, v12);
  }
  v58 = v14[1];
  if (__ldaxr((unsigned __int8 *)v58))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v58))
  {
    goto LABEL_82;
  }
  result = (WTF *)MEMORY[0x19AEA534C](v58);
LABEL_82:
  v60 = *(_QWORD *)(v58 + 8);
  v61 = v60 - 1;
  *(_QWORD *)(v58 + 8) = v60 - 1;
  if (v60 == 1)
  {
    v76 = *(_QWORD *)(v58 + 16);
    v62 = *(_QWORD *)(v58 + 24);
    *(_QWORD *)(v58 + 24) = 0;
    v63 = v76 != 0;
  }
  else
  {
    v62 = 0;
    v63 = 1;
  }
  v64 = __ldxr((unsigned __int8 *)v58);
  if (v64 != 1)
  {
    __clrex();
LABEL_89:
    result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v58);
    if (v61)
      goto LABEL_94;
    goto LABEL_90;
  }
  if (__stlxr(0, (unsigned __int8 *)v58))
    goto LABEL_89;
  if (v61)
    goto LABEL_94;
LABEL_90:
  if (v62)
    result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  if (!v63)
    result = (WTF *)WTF::fastFree((WTF *)v58, v12);
LABEL_94:
  a1[6] = v21;
  v65 = a1[10];
  if (!v65)
    return result;
  v66 = (_QWORD *)a1[11];
  if (__ldaxr((unsigned __int8 *)v65))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v65))
  {
    goto LABEL_99;
  }
  result = (WTF *)MEMORY[0x19AEA534C](v65);
LABEL_99:
  if (*(_QWORD *)(v65 + 24))
    ++*(_QWORD *)(v65 + 8);
  else
    v66 = 0;
  v68 = __ldxr((unsigned __int8 *)v65);
  if (v68 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v65))
    {
      if (!v66)
        return result;
      goto LABEL_108;
    }
  }
  else
  {
    __clrex();
  }
  result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v65);
  if (!v66)
    return result;
LABEL_108:
  if (a2 == 1 || v5 != *v4 || v6 != a1[6] || v79 != a1[7] || v78 != a1[8])
    result = (WTF *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v66 + 64))(v66, v4);
  v69 = v66[1];
  if (__ldaxr((unsigned __int8 *)v69))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v69))
  {
    goto LABEL_118;
  }
  result = (WTF *)MEMORY[0x19AEA534C](v69);
LABEL_118:
  v71 = *(_QWORD *)(v69 + 8);
  v72 = v71 - 1;
  *(_QWORD *)(v69 + 8) = v71 - 1;
  if (v71 == 1)
  {
    v77 = *(_QWORD *)(v69 + 16);
    v73 = *(_QWORD *)(v69 + 24);
    *(_QWORD *)(v69 + 24) = 0;
    v74 = v77 != 0;
  }
  else
  {
    v73 = 0;
    v74 = 1;
  }
  v75 = __ldxr((unsigned __int8 *)v69);
  if (v75 != 1)
  {
    __clrex();
LABEL_125:
    result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v69);
    if (v72)
      return result;
    goto LABEL_126;
  }
  if (__stlxr(0, (unsigned __int8 *)v69))
    goto LABEL_125;
  if (v72)
    return result;
LABEL_126:
  if (v73)
    result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  if (!v74)
    return (WTF *)WTF::fastFree((WTF *)v69, v12);
  return result;
}

WTF *WebCore::SourceBufferPrivate::seekToTime(WebCore::SourceBufferPrivate *this, const WTF::MediaTime *a2)
{
  _QWORD *i;
  WebCore::TrackBuffer *v5;
  WTF::String *v6;
  uint64_t v7;
  _QWORD v9[2];

  for (i = (_QWORD *)*((_QWORD *)this + 14); i; i = (_QWORD *)*i)
  {
    v6 = (WTF::String *)i[2];
    v5 = (WebCore::TrackBuffer *)i[3];
    *((_BYTE *)v5 + 310) = 1;
    (*(void (**)(WebCore::SourceBufferPrivate *, WTF::String *))(*(_QWORD *)this + 456))(this, v6);
    v9[0] = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 432))(this);
    v9[1] = v7;
    if (WebCore::TrackBuffer::reenqueueMediaForTime((WTF **)v5, a2, (const WTF::MediaTime *)v9))
      WebCore::SourceBufferPrivate::provideMediaData(this, v5, v6);
  }
  return WebCore::SourceBufferPrivate::computeEvictionData(this, 0);
}

unsigned int *WebCore::SourceBufferPrivate::clearTrackBuffers(WebCore::SourceBufferPrivate *this, int a2)
{
  uint64_t v4;
  uint64_t (**v5)();
  _QWORD *v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;

  v4 = WTF::fastMalloc((WTF *)0x10);
  v5 = off_1E340FC58;
  *(_QWORD *)v4 = off_1E340FC58;
  v6 = (_QWORD *)*((_QWORD *)this + 14);
  if (v6)
  {
    do
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, v6[3]);
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    v5 = *(uint64_t (***)())v4;
  }
  result = (unsigned int *)((uint64_t (*)(uint64_t))v5[1])(v4);
  if (a2)
  {
    WebCore::SourceBufferPrivate::computeEvictionData(this, 0);
    WebCore::SourceBufferPrivate::updateHighestPresentationTimestamp(this);
    WebCore::SourceBufferPrivate::updateBuffered((WebCore::SourceBufferPrivate *)&v11, this);
    result = v11;
    v11 = 0;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
      }
    }
  }
  return result;
}

WTF *WebCore::SourceBufferPrivate::bufferedSamplesForTrackId@<X0>(WTF *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  _BYTE *v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  unint64_t v17;
  WTF *v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  __int128 v28;
  _BYTE *v29;
  WTF *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = *(int8x8_t *)((char *)this + 104);
  if (!*(_QWORD *)&v4)
    goto LABEL_23;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = a2;
    if (*(_QWORD *)&v4 <= a2)
      v6 = a2 % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & a2;
  }
  v7 = *(_QWORD **)(*((_QWORD *)this + 12) + 8 * v6);
  if (!v7 || (v8 = (_QWORD *)*v7) == 0)
  {
LABEL_23:
    v36 = 0;
    v37 = 0;
    v39 = 0uLL;
    *(_QWORD *)&v40 = "bufferedSamplesForTrackId";
    *((_QWORD *)&v40 + 1) = 0;
    v12 = WTF::fastMalloc((WTF *)0x88);
    *(_DWORD *)(v12 + 8) = 1;
    *(_QWORD *)v12 = off_1E340FC80;
    v13 = v40;
    *(_OWORD *)(v12 + 16) = v39;
    *(_OWORD *)(v12 + 32) = v13;
    *(_BYTE *)(v12 + 48) = 0;
    *(_DWORD *)(v12 + 80) = 0;
    *(_QWORD *)(v12 + 88) = v12 + 104;
    *(_QWORD *)(v12 + 96) = 1;
    *(_QWORD *)(v12 + 112) = 0;
    *(_QWORD *)(v12 + 120) = 0;
    *(_WORD *)(v12 + 128) = 0;
    v14 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v12);
    if (*v14 && v14[16] >= 4u)
      WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v14, 4u, "creating ", v12);
    *a3 = v12;
    WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::resolve<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::enable_if<true,void>>(v12, (uint64_t)&v36, (WTF::Logger::LogSiteIdentifier *)&v39);
    if (HIDWORD(v37))
    {
      v33 = v36;
      v34 = 8 * HIDWORD(v37);
      do
      {
        v35 = *(WTF::StringImpl **)v33;
        *(_QWORD *)v33 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v15);
          else
            *(_DWORD *)v35 -= 2;
        }
        v33 = (WTF *)((char *)v33 + 8);
        v34 -= 8;
      }
      while (v34);
    }
LABEL_27:
    this = v36;
    if (v36)
    {
      v36 = 0;
      LODWORD(v37) = 0;
      return (WTF *)WTF::fastFree(this, v15);
    }
    return this;
  }
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    do
    {
      v10 = v8[1];
      if (v10 == a2)
      {
        if (v8[2] == a2)
          goto LABEL_30;
      }
      else if ((v10 & v9) != v6)
      {
        goto LABEL_23;
      }
      v8 = (_QWORD *)*v8;
    }
    while (v8);
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v8[1];
    if (v11 == a2)
      break;
    if (v11 >= *(_QWORD *)&v4)
      v11 %= *(_QWORD *)&v4;
    if (v11 != v6)
      goto LABEL_23;
LABEL_22:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_23;
  }
  if (v8[2] != a2)
    goto LABEL_22;
LABEL_30:
  v16 = (_QWORD *)v8[3];
  v36 = 0;
  v37 = 0;
  v17 = v16[3];
  if (!v17)
  {
    v18 = 0;
LABEL_33:
    v19 = (_QWORD *)v16[1];
    v20 = v16 + 2;
    if (v19 != v16 + 2)
    {
      v21 = 0;
      do
      {
        v22 = v19[8];
        WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v39);
        v23 = (*(uint64_t (**)(__int128 *))(v39 + 32))(&v39);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 136))(v22, v23);
        (*(void (**)(__int128 *))(v39 + 40))(&v39);
        WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v39);
        WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v39);
        *((_QWORD *)v18 + v21) = v38;
        v24 = (_QWORD *)v19[1];
        if (v24)
        {
          do
          {
            v25 = v24;
            v24 = (_QWORD *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v25 = (_QWORD *)v19[2];
            v26 = *v25 == (_QWORD)v19;
            v19 = v25;
          }
          while (!v26);
        }
        ++v21;
        v19 = v25;
      }
      while (v25 != v20);
      HIDWORD(v37) = v21;
    }
    v39 = 0uLL;
    *(_QWORD *)&v40 = "bufferedSamplesForTrackId";
    *((_QWORD *)&v40 + 1) = 0;
    v27 = WTF::fastMalloc((WTF *)0x88);
    *(_DWORD *)(v27 + 8) = 1;
    *(_QWORD *)v27 = off_1E340FC80;
    v28 = v40;
    *(_OWORD *)(v27 + 16) = v39;
    *(_OWORD *)(v27 + 32) = v28;
    *(_BYTE *)(v27 + 48) = 0;
    *(_DWORD *)(v27 + 80) = 0;
    *(_QWORD *)(v27 + 88) = v27 + 104;
    *(_QWORD *)(v27 + 96) = 1;
    *(_QWORD *)(v27 + 112) = 0;
    *(_QWORD *)(v27 + 120) = 0;
    *(_WORD *)(v27 + 128) = 0;
    v29 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v27);
    if (*v29 && v29[16] >= 4u)
      WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v29, 4u, "creating ", v27);
    *a3 = v27;
    WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::resolve<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::enable_if<true,void>>(v27, (uint64_t)&v36, (WTF::Logger::LogSiteIdentifier *)&v39);
    if (HIDWORD(v37))
    {
      v30 = v36;
      v31 = 8 * HIDWORD(v37);
      do
      {
        v32 = *(WTF::StringImpl **)v30;
        *(_QWORD *)v30 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v15);
          else
            *(_DWORD *)v32 -= 2;
        }
        v30 = (WTF *)((char *)v30 + 8);
        v31 -= 8;
      }
      while (v31);
    }
    goto LABEL_27;
  }
  if (!(v17 >> 29))
  {
    v18 = (WTF *)WTF::fastMalloc((WTF *)(8 * v17));
    LODWORD(v37) = v17;
    v36 = v18;
    goto LABEL_33;
  }
  __break(0xC471u);
  return this;
}

WTF *WebCore::SourceBufferPrivate::enqueuedSamplesForTrackID@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  __int128 v4;
  _BYTE *v5;
  WTF::StringImpl *v6;
  WTF *result;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  __int128 v11;
  __int128 v12;
  WTF *v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  v11 = 0uLL;
  *(_QWORD *)&v12 = "enqueuedSamplesForTrackID";
  *((_QWORD *)&v12 + 1) = 0;
  v3 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)v3 = off_1E340FC80;
  v4 = v12;
  *(_OWORD *)(v3 + 16) = v11;
  *(_OWORD *)(v3 + 32) = v4;
  *(_BYTE *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = v3 + 104;
  *(_QWORD *)(v3 + 96) = 1;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_WORD *)(v3 + 128) = 0;
  v5 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v3);
  if (*v5 && v5[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v5, 4u, "creating ", v3);
  *a1 = v3;
  WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::resolve<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::enable_if<true,void>>(v3, (uint64_t)&v13, (WTF::Logger::LogSiteIdentifier *)&v11);
  if (HIDWORD(v14))
  {
    v8 = v13;
    v9 = 8 * HIDWORD(v14);
    do
    {
      v10 = *(WTF::StringImpl **)v8;
      *(_QWORD *)v8 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v6);
        else
          *(_DWORD *)v10 -= 2;
      }
      v8 = (WTF *)((char *)v8 + 8);
      v9 -= 8;
    }
    while (v9);
  }
  result = v13;
  if (v13)
  {
    v13 = 0;
    LODWORD(v14) = 0;
    return (WTF *)WTF::fastFree(result, v6);
  }
  return result;
}

uint64_t WebCore::SourceBufferPrivate::setMediaSourceEnded(uint64_t this, int a2)
{
  _BYTE *v2;
  _QWORD *i;
  uint64_t v4;
  WTF::String *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  _QWORD v15[4];
  WTF::String *v16;

  if (*(unsigned __int8 *)(this + 304) != a2)
  {
    v2 = (_BYTE *)this;
    *(_BYTE *)(this + 304) = a2;
    if (a2)
    {
      for (i = *(_QWORD **)(this + 112); i; i = (_QWORD *)*i)
      {
        v5 = (WTF::String *)i[2];
        v4 = i[3];
        v16 = v5;
        v6 = *(_QWORD *)(v4 + 80);
        if (v2[304])
          v7 = v6 == 0;
        else
          v7 = 0;
        if (v7)
        {
          v8 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 16))(v2);
          v9 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 32))(v2);
          v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 24))(v2);
          v12 = v11;
          v13 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 40))(v2);
          v15[0] = v10;
          v15[1] = v12;
          v15[2] = "trySignalAllSamplesInTrackEnqueued";
          v15[3] = v13;
          if (*(_BYTE *)(v8 + 12))
          {
            if (*v9)
              v14 = v9[16] >= 4u;
            else
              v14 = 0;
            if (v14)
              WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [23],unsigned long long,char [12]>((uint64_t)v9, (WTF::Logger::LogSiteIdentifier *)v15, &v16);
          }
          this = (*(uint64_t (**)(_BYTE *, WTF::String *))(*(_QWORD *)v2 + 472))(v2, v5);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::SourceBufferPrivate::provideMediaData(WebCore::SourceBufferPrivate *this, WebCore::TrackBuffer *a2, WTF::String *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v9;
  WTF::String *v10;
  WTF::MediaTime *v11;
  _QWORD *v12;
  uint64_t v13;
  WTF::String *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  uint64_t *v32;
  void *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  int v48;
  char v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::String *v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  WTF::String *v68;
  WTF::String *v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  WTF::String *v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  WTF::String *v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;

  v90 = a3;
  result = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 448))(this);
  if ((result & 1) != 0)
    return result;
  v6 = *((_QWORD *)this + 10);
  if (!v6)
    return result;
  v7 = *((_QWORD *)this + 11);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_7;
  }
  result = MEMORY[0x19AEA534C](v6);
LABEL_7:
  if (*(_QWORD *)(v6 + 24))
    ++*(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v9 = __ldxr((unsigned __int8 *)v6);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
    {
      if (!v7)
        return result;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v6);
  if (!v7)
    return result;
LABEL_16:
  v85 = v7;
  v89 = 0;
  if (*((_BYTE *)a2 + 311))
  {
    v10 = v90;
    v11 = (WTF::MediaTime *)(*(uint64_t (**)(WebCore::SourceBufferPrivate *, WTF::String *))(*(_QWORD *)this + 496))(this, v90);
    if ((_DWORD)v11)
    {
      v12 = (_QWORD *)WTF::MediaTime::invalidTime(v11);
      v13 = v12[1];
      *((_QWORD *)a2 + 24) = *v12;
      *((_DWORD *)a2 + 50) = v13;
      *((_BYTE *)a2 + 204) = BYTE4(v13);
      (*(void (**)(WebCore::SourceBufferPrivate *, WTF::String *))(*(_QWORD *)this + 512))(this, v10);
    }
  }
  if (*((_QWORD *)a2 + 10))
  {
    while (1)
    {
      v14 = v90;
      if (((*(uint64_t (**)(WebCore::SourceBufferPrivate *, WTF::String *))(*(_QWORD *)this + 480))(this, v90) & 1) == 0)
      {
        v54 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 16))(this);
        v55 = (_BYTE *)(*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 32))(this);
        v56 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 24))(this);
        v58 = v57;
        v59 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 40))(this);
        v91 = v56;
        v92 = v58;
        v93 = "provideMediaData";
        v94 = v59;
        if (*(_BYTE *)(v54 + 12))
        {
          if (*v55 && v55[16] >= 4u)
          {
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [25],unsigned long long,char [28]>((uint64_t)v55, 4u, (WTF::Logger::LogSiteIdentifier *)&v91, "bailing early, track id ", &v90, " is not ready for more data");
            v14 = v90;
          }
        }
        (*(void (**)(WebCore::SourceBufferPrivate *, WTF::String *))(*(_QWORD *)this + 488))(this, v14);
        goto LABEL_59;
      }
      v15 = *(unsigned int **)(*((_QWORD *)a2 + 8) + 64);
      v16 = v15 + 2;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      v88 = v15;
      v91 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v15 + 24))(v15);
      v92 = v18;
      v19 = WTF::MediaTime::compare((WTF::MediaTime *)&v91, (WebCore::TrackBuffer *)((char *)a2 + 240));
      if (v19 == 1)
      {
        v20 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 16))(this);
        v21 = (_BYTE *)(*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 32))(this);
        v22 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 24))(this);
        v24 = v23;
        v25 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 40))(this);
        v91 = v22;
        v92 = v24;
        v93 = "provideMediaData";
        v94 = v25;
        v86 = (WTF::String *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v88 + 24))(v88);
        v87 = v26;
        if (*(_BYTE *)(v20 + 12) && *v21 && v21[16] >= 4u)
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [54],WTF::MediaTime,char [41],WTF::MediaTime>((uint64_t)v21, 4u, (WTF::Logger::LogSiteIdentifier *)&v91, "bailing early because of unbuffered gap, new sample: ", (WTF::MediaTime *)&v86, " >= the current discontinuity boundary: ", (WebCore::TrackBuffer *)((char *)a2 + 240));
        goto LABEL_43;
      }
      v27 = (uint64_t *)*((_QWORD *)a2 + 8);
      v28 = (uint64_t *)v27[1];
      v29 = v27;
      if (v28)
      {
        do
        {
          v30 = v28;
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v30 = (uint64_t *)v29[2];
          v31 = *v30 == (_QWORD)v29;
          v29 = v30;
        }
        while (!v31);
      }
      *((_QWORD *)a2 + 8) = v30;
      v32 = (uint64_t *)*((_QWORD *)a2 + 9);
      --*((_QWORD *)a2 + 10);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v32, v27);
      v34 = (unsigned int *)v27[8];
      v27[8] = 0;
      if (v34)
      {
        v35 = v34 + 2;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, v34 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
        }
      }
      WTF::fastFree((WTF *)v27, v33);
      v86 = (WTF::String *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v88 + 16))(v88);
      v87 = v38;
      (*(void (**)(unsigned int *))(*(_QWORD *)v88 + 32))(v88);
      v39 = WTF::MediaTime::operator+();
      v91 = v39;
      v92 = v40;
      if ((*((_BYTE *)a2 + 188) & 1) == 0)
        goto LABEL_41;
      if (WTF::MediaTime::compare((WTF::MediaTime *)&v91, (WebCore::TrackBuffer *)((char *)a2 + 176)) == 1)
        break;
LABEL_42:
      v41 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v88 + 24))(v88);
      v43 = v42;
      v44 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v88 + 16))(v88);
      *((_QWORD *)a2 + 26) = v41;
      *((_BYTE *)a2 + 220) = BYTE4(v43);
      *((_DWORD *)a2 + 54) = v43;
      *((_QWORD *)a2 + 28) = v44;
      *((_DWORD *)a2 + 58) = v45;
      *((_BYTE *)a2 + 236) = v46;
      (*(void (**)(unsigned int *))(*(_QWORD *)v88 + 24))(v88);
      (*(void (**)(unsigned int *))(*(_QWORD *)v88 + 32))(v88);
      v86 = (WTF::String *)WTF::MediaTime::operator+();
      v87 = v47;
      *((_QWORD *)a2 + 30) = WTF::MediaTime::operator+();
      *((_DWORD *)a2 + 62) = v48;
      *((_BYTE *)a2 + 252) = v49;
      (*(void (**)(WebCore::SourceBufferPrivate *, unsigned int **, WTF::String *))(*(_QWORD *)this + 464))(this, &v88, v90);
      ++v89;
LABEL_43:
      v50 = v88;
      v88 = 0;
      if (v50)
      {
        v51 = v50 + 2;
        do
        {
          v52 = __ldaxr(v51);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v51));
        if (!v53)
        {
          atomic_store(1u, v50 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 8))(v50);
        }
      }
      if (v19 == 1 || !*((_QWORD *)a2 + 10))
        goto LABEL_59;
    }
    v39 = v91;
    v40 = v92;
LABEL_41:
    *((_QWORD *)a2 + 22) = v39;
    *((_DWORD *)a2 + 46) = v40;
    *((_BYTE *)a2 + 188) = BYTE4(v40);
    goto LABEL_42;
  }
LABEL_59:
  v61 = v90;
  if ((*(unsigned int (**)(WebCore::SourceBufferPrivate *, WTF::String *))(*(_QWORD *)this + 496))(this, v90)&& WebCore::TrackBuffer::updateMinimumUpcomingPresentationTime(a2))
  {
    (*(void (**)(WebCore::SourceBufferPrivate *, WTF::String *, char *))(*(_QWORD *)this + 504))(this, v61, (char *)a2 + 192);
  }
  v62 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 16))(this);
  v63 = (_BYTE *)(*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 32))(this);
  v64 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 24))(this);
  v66 = v65;
  result = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 40))(this);
  v91 = v64;
  v92 = v66;
  v93 = "provideMediaData";
  v94 = result;
  v68 = (WTF::String *)*((_QWORD *)a2 + 10);
  v86 = v68;
  if (*(_BYTE *)(v62 + 12))
  {
    if (*v63 && v63[16] >= 4u)
    {
      result = (uint64_t)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [10],unsigned int,char [11],unsigned long long,char [11]>((uint64_t)v63, 4u, (WTF::Logger::LogSiteIdentifier *)&v91, "enqueued ", &v89, " samples, ", &v86, " remaining");
      v68 = (WTF::String *)*((_QWORD *)a2 + 10);
    }
  }
  v70 = v90;
  v86 = v90;
  if (*((_BYTE *)this + 304) && !v68)
  {
    v71 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 16))(this);
    v72 = (_BYTE *)(*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 32))(this);
    v73 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 24))(this);
    v75 = v74;
    v76 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 40))(this);
    v91 = v73;
    v92 = v75;
    v93 = "trySignalAllSamplesInTrackEnqueued";
    v94 = v76;
    if (*(_BYTE *)(v71 + 12) && *v72 && v72[16] >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [23],unsigned long long,char [12]>((uint64_t)v72, (WTF::Logger::LogSiteIdentifier *)&v91, &v86);
    result = (*(uint64_t (**)(WebCore::SourceBufferPrivate *, WTF::String *))(*(_QWORD *)this + 472))(this, v70);
  }
  v77 = *(_QWORD *)(v85 + 8);
  if (__ldaxr((unsigned __int8 *)v77))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v77))
  {
    goto LABEL_80;
  }
  result = MEMORY[0x19AEA534C](v77);
LABEL_80:
  v79 = *(_QWORD *)(v77 + 8);
  v80 = v79 - 1;
  *(_QWORD *)(v77 + 8) = v79 - 1;
  if (v79 == 1)
  {
    v84 = *(_QWORD *)(v77 + 16);
    v81 = *(_QWORD *)(v77 + 24);
    *(_QWORD *)(v77 + 24) = 0;
    v82 = v84 != 0;
  }
  else
  {
    v81 = 0;
    v82 = 1;
  }
  v83 = __ldxr((unsigned __int8 *)v77);
  if (v83 != 1)
  {
    __clrex();
LABEL_87:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v77);
    if (v80)
      return result;
    goto LABEL_88;
  }
  if (__stlxr(0, (unsigned __int8 *)v77))
    goto LABEL_87;
  if (v80)
    return result;
LABEL_88:
  if (v81)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  if (!v82)
    return WTF::fastFree((WTF *)v77, v67);
  return result;
}

WebCore::SourceBufferPrivate *WebCore::SourceBufferPrivate::reenqueueMediaIfNeeded(WebCore::SourceBufferPrivate *this, const WTF::MediaTime *a2)
{
  _QWORD *v2;
  WebCore::SourceBufferPrivate *v4;
  uint64_t v5;
  WTF::String *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;

  v2 = (_QWORD *)*((_QWORD *)this + 14);
  if (v2)
  {
    v4 = this;
    do
    {
      v6 = (WTF::String *)v2[2];
      v5 = v2[3];
      if (!*(_BYTE *)(v5 + 310))
        goto LABEL_12;
      v7 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)v4 + 16))(v4);
      v8 = (_BYTE *)(*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)v4 + 32))(v4);
      v9 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)v4 + 24))(v4);
      v11 = v10;
      v12 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)v4 + 40))(v4);
      v15 = v9;
      v16 = v11;
      v17 = "reenqueueMediaIfNeeded";
      v18 = v12;
      if (*(_BYTE *)(v7 + 12))
      {
        if (*v8)
          v13 = v8[16] >= 4u;
        else
          v13 = 0;
        if (v13)
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21],WTF::MediaTime>((uint64_t)v8, 4u, (WTF::Logger::LogSiteIdentifier *)&v15, "reenqueuing at time ", a2);
      }
      (*(void (**)(WebCore::SourceBufferPrivate *, WTF::String *))(*(_QWORD *)v4 + 456))(v4, v6);
      v15 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)v4 + 432))(v4);
      v16 = v14;
      this = (WebCore::SourceBufferPrivate *)WebCore::TrackBuffer::reenqueueMediaForTime((WTF **)v5, a2, (const WTF::MediaTime *)&v15);
      if ((_DWORD)this)
LABEL_12:
        this = (WebCore::SourceBufferPrivate *)WebCore::SourceBufferPrivate::provideMediaData(v4, (WebCore::TrackBuffer *)v5, v6);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return this;
}

unsigned int *WebCore::SourceBufferPrivate::removeCodedFrames@<X0>(WebCore::SourceBufferPrivate *this@<X0>, WTF::NativePromiseBase **a2@<X1>, const WTF::MediaTime *a3@<X2>, const WTF::MediaTime *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF::NativePromiseBase *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *result;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *v50;
  WTF::NativePromiseBase *v51;
  __int128 v52;
  const char *v53;
  uint64_t v54;
  unsigned int *v55;
  WTF::NativePromiseBase *v56[2];
  __int128 v57;
  const char *v58;
  uint64_t v59;
  __int128 v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)this + 18);
  v11 = *((_QWORD *)this + 4);
  v12 = *((_QWORD *)this + 1);
  if (!v12)
  {
    v14 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v12);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v12))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v12 + 24))
  {
    ++*(_QWORD *)(v12 + 16);
    v14 = v12;
  }
  else
  {
    v14 = 0;
  }
  v15 = __ldxr((unsigned __int8 *)v12);
  if (v15 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v12))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_13:
  v56[0] = *a2;
  *(WTF::NativePromiseBase **)((char *)v56 + 5) = *(WTF::NativePromiseBase **)((char *)a2 + 5);
  *(_QWORD *)((char *)&v60 + 3) = *(_QWORD *)a3;
  *((_QWORD *)&v60 + 1) = *(_QWORD *)((char *)a3 + 5);
  *(_QWORD *)((char *)&v57 + 3) = *(_QWORD *)a4;
  *((_QWORD *)&v57 + 1) = *(_QWORD *)((char *)a4 + 5);
  v16 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  v17 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v17 = &off_1E340F610;
  *(_QWORD *)(v17 + 8) = v14;
  *(_QWORD *)(v17 + 16) = this;
  *(_QWORD *)(v17 + 24) = this;
  *(WTF::NativePromiseBase **)(v17 + 32) = v56[0];
  *(WTF::NativePromiseBase **)(v17 + 37) = *(WTF::NativePromiseBase **)((char *)v56 + 5);
  *(_OWORD *)(v17 + 45) = v60;
  *(_OWORD *)(v17 + 61) = v57;
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = v11;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = "removeCodedFrames";
  *(_QWORD *)(v16 + 48) = 0;
  *(_WORD *)(v16 + 56) = 0;
  *(_QWORD *)v16 = &off_1E340F6E0;
  v18 = (unsigned int *)(v10 + 8);
  *(_QWORD *)(v16 + 64) = 0;
  *(_QWORD *)(v16 + 72) = v17;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  v50 = (unsigned int *)v10;
  v51 = (WTF::NativePromiseBase *)v16;
  v52 = 0uLL;
  v53 = "removeCodedFrames";
  v54 = 0;
  WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>>::completionPromise((uint64_t *)&v55, (uint64_t *)&v50);
  v20 = (uint64_t)v55;
  v55 = 0;
  v21 = (unsigned int *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v20;
  if (v21)
  {
    v22 = v21 + 2;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v21 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
    }
    v25 = v55;
    v55 = 0;
    if (v25)
    {
      v26 = v25 + 2;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v25 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 16))(v25);
      }
    }
  }
  v29 = v51;
  if (v51)
  {
    v51 = 0;
    v56[0] = v29;
    WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::maybeSettle((uint64_t)v50, v56, (WTF::Logger::LogSiteIdentifier *)&v52);
    v30 = (unsigned int *)v56[0];
    v56[0] = 0;
    if (v30)
    {
      v31 = v30 + 2;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v30 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
      }
    }
    v34 = (unsigned int *)v51;
    v51 = 0;
    if (v34)
    {
      v35 = v34 + 2;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        atomic_store(1u, v34 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
      }
    }
  }
  else
  {
    v51 = 0;
  }
  v38 = v50;
  v50 = 0;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 16))(v38);
    }
  }
  v42 = (unsigned __int8 *)*((_QWORD *)this + 18);
  v57 = 0uLL;
  v58 = "operator Ref";
  v59 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v50, 0, &v57);
  v43 = (uint64_t)v50;
  if (v50)
  {
    v44 = v50 + 2;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 + 1, v44));
  }
  *a5 = v43;
  v60 = 0uLL;
  v61 = "convert";
  v62 = 0;
  WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::chainTo<void,WebCore::PlatformMediaError,0u>(v42, (uint64_t)&v50, (WTF::Logger::LogSiteIdentifier *)&v60);
  result = v50;
  if (v50)
  {
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead((uint64_t)v50);
    result = v50;
    v50 = 0;
    if (result)
    {
      v47 = result + 2;
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
      }
    }
  }
  return result;
}

uint64_t WebCore::SourceBufferPrivate::platformEvictionThreshold(WebCore::SourceBufferPrivate *this)
{
  return 0;
}

uint64_t WebCore::SourceBufferPrivate::setMaximumBufferSize@<X0>(WebCore::SourceBufferPrivate *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t result;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  __int128 v40;
  __int128 v41;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint8_t buf[4];
  _BYTE v48[12];
  int v49;
  WTF::StringImpl *v50[3];

  v50[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 7) != a2)
  {
    *((_QWORD *)this + 7) = a2;
    WebCore::SourceBufferPrivate::computeEvictionData(this, 1);
  }
  v40 = 0uLL;
  *(_QWORD *)&v41 = "setMaximumBufferSize";
  *((_QWORD *)&v41 + 1) = 0;
  v4 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E340FDE8;
  v5 = v41;
  *(_OWORD *)(v4 + 16) = v40;
  *(_OWORD *)(v4 + 32) = v5;
  *(_BYTE *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = v4 + 88;
  *(_QWORD *)(v4 + 80) = 1;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  *(_WORD *)(v4 + 112) = 0;
  v6 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v4);
  if (!*v6 || (v7 = v6, v6[16] < 4u))
  {
LABEL_70:
    *a3 = v4;
    return (uint64_t)WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(v4, (WTF::Logger::LogSiteIdentifier *)&v40);
  }
  WTF::String::String((WTF::String *)&v45, "creating ");
  result = WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(v4, &v44);
  if (!v45)
  {
    v9 = 0;
    if (v44)
      goto LABEL_7;
LABEL_76:
    v10 = 0;
    goto LABEL_8;
  }
  v9 = *((_DWORD *)v45 + 1);
  if (!v44)
    goto LABEL_76;
LABEL_7:
  v10 = *((_DWORD *)v44 + 1);
LABEL_8:
  if ((v10 | v9) < 0 || (result = (v9 + v10), __OFADD__(v9, v10)))
  {
    v46 = 0;
    goto LABEL_80;
  }
  if (v45)
  {
    v11 = *((_DWORD *)v45 + 4);
    v12 = (v11 >> 2) & 1;
    if (v44 && (v11 & 4) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v44)
    {
LABEL_13:
      v12 = (*((unsigned __int8 *)v44 + 16) >> 2) & 1;
      goto LABEL_14;
    }
    v12 = 1;
  }
LABEL_14:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v12, (uint64_t)v45, (uint64_t)v44, &v46);
  if (v46)
  {
    v14 = v44;
    v44 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v45;
    v45 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = *((_QWORD *)v7 + 4);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v17)
    {
      WTF::String::utf8();
      v19 = v42 ? (char *)v42 + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v48 = v19;
      _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v17 = (uint64_t)v42;
      v42 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
          v17 = WTF::fastFree((WTF *)v17, v18);
        else
          --*(_DWORD *)v17;
      }
    }
    if (*v7 && v7[16] >= 4u)
    {
      v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v21 = *v20;
        if ((v21 & 1) != 0)
          break;
        v22 = __ldaxr(v20);
        if (v22 == v21)
        {
          if (!__stxr(v21 | 1, v20))
          {
            v23 = WTF::Logger::observers((WTF::Logger *)v17);
            v24 = *(unsigned int *)(v23 + 12);
            if ((_DWORD)v24)
            {
              v25 = *(uint64_t **)v23;
              v26 = *(_QWORD *)v23 + 8 * v24;
              do
              {
                v27 = *v25;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&v48[4], "creating ");
                v49 = 0;
                WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(v4, v50);
                v42 = 0;
                v43 = 0;
                v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                LODWORD(v43) = 2;
                v42 = v28;
                v29 = HIDWORD(v43);
                *((_DWORD *)v28 + 4 * HIDWORD(v43)) = *(_DWORD *)buf;
                v30 = *(_QWORD *)&v48[4];
                if (*(_QWORD *)&v48[4])
                  **(_DWORD **)&v48[4] += 2;
                *((_QWORD *)v28 + 2 * v29 + 1) = v30;
                *((_DWORD *)v28 + 4 * (v29 + 1)) = v49;
                v31 = v50[0];
                if (v50[0])
                  *(_DWORD *)v50[0] += 2;
                *((_QWORD *)v28 + 2 * (v29 + 1) + 1) = v31;
                HIDWORD(v43) = v29 + 2;
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v27 + 16))(v27, v7, 4, &v42);
                v32 = v42;
                if (HIDWORD(v43))
                {
                  v33 = 16 * HIDWORD(v43);
                  v34 = (WTF::StringImpl **)((char *)v42 + 8);
                  do
                  {
                    v35 = *v34;
                    *v34 = 0;
                    if (v35)
                    {
                      if (*(_DWORD *)v35 == 2)
                        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v18);
                      else
                        *(_DWORD *)v35 -= 2;
                    }
                    v34 += 2;
                    v33 -= 16;
                  }
                  while (v33);
                  v32 = v42;
                }
                if (v32)
                {
                  v42 = 0;
                  LODWORD(v43) = 0;
                  WTF::fastFree(v32, v18);
                }
                v36 = v50[0];
                v50[0] = 0;
                if (v36)
                {
                  if (*(_DWORD *)v36 == 2)
                    WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v36 -= 2;
                }
                v37 = *(WTF::StringImpl **)&v48[4];
                *(_QWORD *)&v48[4] = 0;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2)
                    WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v37 -= 2;
                }
                ++v25;
              }
              while (v25 != (uint64_t *)v26);
            }
            v38 = __ldxr(v20);
            if (v38 == 1)
            {
              if (!__stlxr(0, v20))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v39 = v46;
    v46 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v39 -= 2;
    }
    goto LABEL_70;
  }
LABEL_80:
  __break(0xC471u);
  return result;
}

unsigned int *WebCore::SourceBufferPrivate::asyncEvictCodedFrames(WebCore::SourceBufferPrivate *this, uint64_t a2, WTF::NativePromiseBase **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::NativePromiseBase *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  WTF::NativePromiseBase *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *result;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  WTF::NativePromiseBase *v40;
  __int128 v41;
  const char *v42;
  uint64_t v43;
  unsigned int *v44;
  WTF::NativePromiseBase *v45[3];

  v45[2] = *(WTF::NativePromiseBase **)MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 18);
  v7 = *((_QWORD *)this + 4);
  v8 = *((_QWORD *)this + 1);
  if (!v8)
  {
    v10 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v8);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v8))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v8 + 24))
  {
    ++*(_QWORD *)(v8 + 16);
    v10 = v8;
  }
  else
  {
    v10 = 0;
  }
  v11 = __ldxr((unsigned __int8 *)v8);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v8))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_13:
  v45[0] = *a3;
  *(WTF::NativePromiseBase **)((char *)v45 + 5) = *(WTF::NativePromiseBase **)((char *)a3 + 5);
  v12 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  v13 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v13 = &off_1E340F7E0;
  *(_QWORD *)(v13 + 8) = v10;
  *(_QWORD *)(v13 + 16) = this;
  *(_QWORD *)(v13 + 24) = this;
  v14 = v45[0];
  *(_QWORD *)(v13 + 32) = a2;
  *(_QWORD *)(v13 + 40) = v14;
  *(WTF::NativePromiseBase **)(v13 + 45) = *(WTF::NativePromiseBase **)((char *)v45 + 5);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = v7;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = "asyncEvictCodedFrames";
  *(_QWORD *)(v12 + 48) = 0;
  *(_WORD *)(v12 + 56) = 0;
  *(_QWORD *)v12 = &off_1E340F6E0;
  v15 = (unsigned int *)(v6 + 8);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = v13;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v39 = (unsigned int *)v6;
  v40 = (WTF::NativePromiseBase *)v12;
  v41 = 0uLL;
  v42 = "asyncEvictCodedFrames";
  v43 = 0;
  WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>>::completionPromise((uint64_t *)&v44, (uint64_t *)&v39);
  v17 = (uint64_t)v44;
  v44 = 0;
  v18 = (unsigned int *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v17;
  if (v18)
  {
    v19 = v18 + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v18 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
    }
    v22 = v44;
    v44 = 0;
    if (v22)
    {
      v23 = v22 + 2;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v22 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
      }
    }
  }
  v26 = v40;
  if (v40)
  {
    v40 = 0;
    v45[0] = v26;
    WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::maybeSettle((uint64_t)v39, v45, (WTF::Logger::LogSiteIdentifier *)&v41);
    v27 = (unsigned int *)v45[0];
    v45[0] = 0;
    if (v27)
    {
      v28 = v27 + 2;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v27 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
      }
    }
    v31 = (unsigned int *)v40;
    v40 = 0;
    if (v31)
    {
      v32 = v31 + 2;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v31 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
      }
    }
  }
  else
  {
    v40 = 0;
  }
  result = v39;
  v39 = 0;
  if (result)
  {
    v36 = result + 2;
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

uint64_t WebCore::SourceBufferPrivate::evictCodedFrames(WebCore::SourceBufferPrivate *this, uint64_t a2, const WTF::MediaTime *a3)
{
  uint64_t v3;
  uint64_t v7;
  int v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::String *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  NSObject *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  WTF::String *v39;
  WTF::Logger *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::Logger *v49;
  const WTF::MediaTime *v50;
  uint64_t v51;
  WTF::StringImpl **v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  WTF::String *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::String *v70;
  int v71;
  int v72;
  int v73;
  BOOL v74;
  int v75;
  char v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  unsigned int v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  NSObject *v89;
  uint64_t v90;
  char *v91;
  unsigned __int8 *v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::Logger *v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::Logger *v105;
  uint64_t v106;
  WTF::StringImpl **v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  int v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  int v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  WTF::String *v127;
  WTF::String *v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::Logger *v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  __int128 buf;
  const char *v148;
  WTF::StringImpl *v149;
  int v150;
  WTF::StringImpl *v151;
  int v152;
  WTF::StringImpl *v153;
  int v154;
  WTF::StringImpl *v155;
  int v156;
  WTF::StringImpl *v157;
  int v158;
  WTF::StringImpl *v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 10);
  if (!v3)
    return 1;
  v7 = *((_QWORD *)this + 11);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v7 = 0;
  v9 = __ldxr((unsigned __int8 *)v3);
  if (v9 != 1)
  {
    __clrex();
LABEL_56:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v7)
      goto LABEL_12;
    return 1;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_56;
  if (!v7)
    return 1;
LABEL_12:
  if (((*(uint64_t (**)(WebCore::SourceBufferPrivate *, uint64_t))(*(_QWORD *)this + 288))(this, a2) & 1) == 0)
  {
    v10 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 208))(this);
    if (!v10 || *((_QWORD *)this + 8) <= v10)
    {
LABEL_145:
      v34 = 0;
      goto LABEL_216;
    }
  }
  v12 = *((_QWORD *)this + 5);
  v13 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 16))(this);
  v14 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 32))(this);
  v15 = (WTF::String *)(*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 24))(this);
  v17 = v16;
  v18 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 40))(this);
  v128 = v15;
  v129 = v17;
  v130 = "evictCodedFrames";
  v131 = v18;
  if (*(_BYTE *)(v13 + 12) && *(_BYTE *)v14 && *(unsigned __int8 *)(v14 + 16) >= 4u)
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v128);
    WTF::String::String((WTF::String *)&v137, "currentTime = ");
    WTF::MediaTime::toJSONString(a3);
    WTF::String::String((WTF::String *)&v135, ", require ");
    v127 = (WTF::String *)(v12 + a2);
    WTF::String::number((WTF::String *)(v12 + a2));
    WTF::String::String((WTF::String *)&v133, " bytes, maximum buffer size is ");
    WTF::String::number(*((WTF::String **)this + 7));
    v146 = v136;
    *(_QWORD *)&buf = v138;
    v144 = v134;
    v145 = v135;
    v143 = v133;
    v140 = v132;
    v141 = v137;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v141, (uint64_t *)&v146, (uint64_t *)&v145, (uint64_t *)&v144, (uint64_t *)&v143, (uint64_t *)&v140, &v139);
    if (!v139)
      goto LABEL_254;
    v20 = v132;
    v132 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v133;
    v133 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v134;
    v134 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v19);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v135;
    v135 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v19);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v136;
    v136 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v19);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v137;
    v137 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v19);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = v138;
    v138 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v19);
      else
        *(_DWORD *)v26 -= 2;
    }
    v125 = v12;
    v27 = *(NSObject **)(v14 + 32);
    v28 = os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v28)
    {
      WTF::String::utf8();
      v30 = v141 ? (char *)v141 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v30;
      _os_log_impl(&dword_1940B8000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v28 = (uint64_t)v141;
      v141 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 1)
          v28 = WTF::fastFree((WTF *)v28, v29);
        else
          --*(_DWORD *)v28;
      }
    }
    if (*(_BYTE *)v14 && *(unsigned __int8 *)(v14 + 16) >= 4u)
    {
      v31 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v32 = *v31;
        if ((v32 & 1) != 0)
          break;
        v33 = __ldaxr(v31);
        if (v33 == v32)
        {
          if (!__stxr(v32 | 1, v31))
          {
            v123 = v7;
            v35 = WTF::Logger::observers((WTF::Logger *)v28);
            v36 = *(unsigned int *)(v35 + 12);
            if ((_DWORD)v36)
            {
              v37 = *(uint64_t **)v35;
              v126 = *(_QWORD *)v35 + 8 * v36;
              do
              {
                v38 = *v37;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v128);
                LODWORD(v148) = 0;
                WTF::String::String((WTF::String *)&v149, "currentTime = ");
                v150 = 1;
                WTF::MediaTime::toJSONString(a3);
                v152 = 0;
                WTF::String::String((WTF::String *)&v153, ", require ");
                v154 = 0;
                WTF::String::number(v127);
                v156 = 0;
                WTF::String::String((WTF::String *)&v157, " bytes, maximum buffer size is ");
                v39 = (WTF::String *)*((_QWORD *)this + 7);
                v158 = 0;
                WTF::String::number(v39);
                v141 = 0;
                v142 = 0;
                v40 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                LODWORD(v142) = 7;
                v141 = v40;
                v41 = HIDWORD(v142);
                *((_DWORD *)v40 + 4 * HIDWORD(v142)) = buf;
                v42 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v40 + 2 * v41 + 1) = v42;
                *((_DWORD *)v40 + 4 * (v41 + 1)) = (_DWORD)v148;
                v43 = v149;
                if (v149)
                  *(_DWORD *)v149 += 2;
                *((_QWORD *)v40 + 2 * (v41 + 1) + 1) = v43;
                *((_DWORD *)v40 + 4 * (v41 + 2)) = v150;
                v44 = v151;
                if (v151)
                  *(_DWORD *)v151 += 2;
                *((_QWORD *)v40 + 2 * (v41 + 2) + 1) = v44;
                *((_DWORD *)v40 + 4 * (v41 + 3)) = v152;
                v45 = v153;
                if (v153)
                  *(_DWORD *)v153 += 2;
                *((_QWORD *)v40 + 2 * (v41 + 3) + 1) = v45;
                *((_DWORD *)v40 + 4 * (v41 + 4)) = v154;
                v46 = v155;
                if (v155)
                  *(_DWORD *)v155 += 2;
                *((_QWORD *)v40 + 2 * (v41 + 4) + 1) = v46;
                *((_DWORD *)v40 + 4 * (v41 + 5)) = v156;
                v47 = v157;
                if (v157)
                  *(_DWORD *)v157 += 2;
                *((_QWORD *)v40 + 2 * (v41 + 5) + 1) = v47;
                *((_DWORD *)v40 + 4 * (v41 + 6)) = v158;
                v48 = v159;
                if (v159)
                  *(_DWORD *)v159 += 2;
                *((_QWORD *)v40 + 2 * (v41 + 6) + 1) = v48;
                HIDWORD(v142) = v41 + 7;
                (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v38 + 16))(v38, v14, 4, &v141);
                v49 = v141;
                if (HIDWORD(v142))
                {
                  v50 = a3;
                  v51 = 16 * HIDWORD(v142);
                  v52 = (WTF::StringImpl **)((char *)v141 + 8);
                  do
                  {
                    v53 = *v52;
                    *v52 = 0;
                    if (v53)
                    {
                      if (*(_DWORD *)v53 == 2)
                        WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v29);
                      else
                        *(_DWORD *)v53 -= 2;
                    }
                    v52 += 2;
                    v51 -= 16;
                  }
                  while (v51);
                  v49 = v141;
                  a3 = v50;
                }
                if (v49)
                {
                  v141 = 0;
                  LODWORD(v142) = 0;
                  WTF::fastFree(v49, v29);
                }
                v54 = v159;
                v159 = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                v55 = v157;
                v157 = 0;
                if (v55)
                {
                  if (*(_DWORD *)v55 == 2)
                    WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v55 -= 2;
                }
                v56 = v155;
                v155 = 0;
                if (v56)
                {
                  if (*(_DWORD *)v56 == 2)
                    WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v56 -= 2;
                }
                v57 = v153;
                v153 = 0;
                if (v57)
                {
                  if (*(_DWORD *)v57 == 2)
                    WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v57 -= 2;
                }
                v58 = v151;
                v151 = 0;
                if (v58)
                {
                  if (*(_DWORD *)v58 == 2)
                    WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v58 -= 2;
                }
                v59 = v149;
                v149 = 0;
                if (v59)
                {
                  if (*(_DWORD *)v59 == 2)
                    WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v59 -= 2;
                }
                v60 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v60)
                {
                  if (*(_DWORD *)v60 == 2)
                    WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v60 -= 2;
                }
                ++v37;
              }
              while (v37 != (uint64_t *)v126);
            }
            v61 = __ldxr(v31);
            if (v61 == 1)
            {
              v7 = v123;
              if (!__stlxr(0, v31))
                break;
            }
            else
            {
              __clrex();
              v7 = v123;
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v62 = v139;
    v139 = 0;
    v12 = v125;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v29);
      else
        *(_DWORD *)v62 -= 2;
    }
  }
  v63 = WebCore::SourceBufferPrivate::evictFrames(this, a2, a3);
  WebCore::SourceBufferPrivate::computeEvictionData(this, 0);
  v64 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 16))(this);
  v65 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 32))(this);
  if ((v63 & 1) == 0)
  {
    v79 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 24))(this);
    v81 = v80;
    v82 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 40))(this);
    *(_QWORD *)&buf = v79;
    *((_QWORD *)&buf + 1) = v81;
    v148 = "evictCodedFrames";
    v149 = v82;
    v128 = (WTF::String *)(v12 - *((_QWORD *)this + 5));
    if (*(_BYTE *)(v64 + 12))
    {
      if (*(_BYTE *)v65 && *(unsigned __int8 *)(v65 + 16) >= 4u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [9],unsigned long long>(v65, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, "evicted ", &v128);
    }
    goto LABEL_145;
  }
  v66 = (WTF::String *)(*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 24))(this);
  v68 = v67;
  v69 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 40))(this);
  v128 = v66;
  v129 = v68;
  v130 = "evictCodedFrames";
  v131 = v69;
  if (*(_BYTE *)(v64 + 12))
  {
    v70 = (WTF::String *)(v12 - *((_QWORD *)this + 5));
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v128);
    WTF::String::String((WTF::String *)&v144, "FAILED to free enough after evicting ");
    WTF::String::number(v70);
    if (v145)
    {
      v71 = *((_DWORD *)v145 + 1);
      if (v144)
        goto LABEL_126;
    }
    else
    {
      v71 = 0;
      if (v144)
      {
LABEL_126:
        v72 = *((_DWORD *)v144 + 1);
        if (v143)
        {
LABEL_127:
          v73 = *((_DWORD *)v143 + 1);
LABEL_128:
          if ((v73 | v72) < 0
            || ((v74 = __OFADD__(v72, v73), v75 = v72 + v73, !v74) ? (v76 = 0) : (v76 = 1),
                v71 < 0 || (v76 & 1) != 0 || (v77 = (v71 + v75), __OFADD__(v71, v75))))
          {
            v146 = 0;
            goto LABEL_254;
          }
          if (v145 && (*((_BYTE *)v145 + 16) & 4) == 0)
          {
            v78 = 0;
            goto LABEL_150;
          }
          if (v144)
          {
            v84 = *((_DWORD *)v144 + 4);
            v78 = (v84 >> 2) & 1;
            if (v143 && (v84 & 4) != 0)
              goto LABEL_149;
          }
          else
          {
            if (v143)
            {
LABEL_149:
              v78 = (*((unsigned __int8 *)v143 + 16) >> 2) & 1;
              goto LABEL_150;
            }
            v78 = 1;
          }
LABEL_150:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v77, v78, v145, (uint64_t)v144, (uint64_t)v143, &v146);
          if (v146)
          {
            v86 = v143;
            v143 = 0;
            if (v86)
            {
              if (*(_DWORD *)v86 == 2)
                WTF::StringImpl::destroy(v86, v85);
              else
                *(_DWORD *)v86 -= 2;
            }
            v87 = v144;
            v144 = 0;
            if (v87)
            {
              if (*(_DWORD *)v87 == 2)
                WTF::StringImpl::destroy(v87, v85);
              else
                *(_DWORD *)v87 -= 2;
            }
            v88 = v145;
            v145 = 0;
            if (v88)
            {
              if (*(_DWORD *)v88 == 2)
                WTF::StringImpl::destroy(v88, v85);
              else
                *(_DWORD *)v88 -= 2;
            }
            v89 = *(NSObject **)(v65 + 32);
            v90 = os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v90)
            {
              WTF::String::utf8();
              v91 = v141 ? (char *)v141 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v91;
              _os_log_impl(&dword_1940B8000, v89, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v90 = (uint64_t)v141;
              v141 = 0;
              if (v90)
              {
                if (*(_DWORD *)v90 == 1)
                  v90 = WTF::fastFree((WTF *)v90, v11);
                else
                  --*(_DWORD *)v90;
              }
            }
            if (*(_BYTE *)v65 && *(_BYTE *)(v65 + 16))
            {
              v92 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v93 = *v92;
                if ((v93 & 1) != 0)
                  break;
                v94 = __ldaxr(v92);
                if (v94 == v93)
                {
                  if (!__stxr(v93 | 1, v92))
                  {
                    v124 = v7;
                    v95 = WTF::Logger::observers((WTF::Logger *)v90);
                    v96 = *(unsigned int *)(v95 + 12);
                    if ((_DWORD)v96)
                    {
                      v97 = *(uint64_t **)v95;
                      v98 = *(_QWORD *)v95 + 8 * v96;
                      do
                      {
                        v99 = *v97;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v128);
                        LODWORD(v148) = 0;
                        WTF::String::String((WTF::String *)&v149, "FAILED to free enough after evicting ");
                        v150 = 0;
                        WTF::String::number(v70);
                        v141 = 0;
                        v142 = 0;
                        v100 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v142) = 3;
                        v141 = v100;
                        v101 = HIDWORD(v142);
                        *((_DWORD *)v100 + 4 * HIDWORD(v142)) = buf;
                        v102 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v100 + 2 * v101 + 1) = v102;
                        *((_DWORD *)v100 + 4 * (v101 + 1)) = (_DWORD)v148;
                        v103 = v149;
                        if (v149)
                          *(_DWORD *)v149 += 2;
                        *((_QWORD *)v100 + 2 * (v101 + 1) + 1) = v103;
                        *((_DWORD *)v100 + 4 * (v101 + 2)) = v150;
                        v104 = v151;
                        if (v151)
                          *(_DWORD *)v151 += 2;
                        *((_QWORD *)v100 + 2 * (v101 + 2) + 1) = v104;
                        HIDWORD(v142) = v101 + 3;
                        (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v99 + 16))(v99, v65, 1, &v141);
                        v105 = v141;
                        if (HIDWORD(v142))
                        {
                          v106 = 16 * HIDWORD(v142);
                          v107 = (WTF::StringImpl **)((char *)v141 + 8);
                          do
                          {
                            v108 = *v107;
                            *v107 = 0;
                            if (v108)
                            {
                              if (*(_DWORD *)v108 == 2)
                                WTF::StringImpl::destroy(v108, (WTF::StringImpl *)v11);
                              else
                                *(_DWORD *)v108 -= 2;
                            }
                            v107 += 2;
                            v106 -= 16;
                          }
                          while (v106);
                          v105 = v141;
                        }
                        if (v105)
                        {
                          v141 = 0;
                          LODWORD(v142) = 0;
                          WTF::fastFree(v105, v11);
                        }
                        v109 = v151;
                        v151 = 0;
                        if (v109)
                        {
                          if (*(_DWORD *)v109 == 2)
                            WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v11);
                          else
                            *(_DWORD *)v109 -= 2;
                        }
                        v110 = v149;
                        v149 = 0;
                        if (v110)
                        {
                          if (*(_DWORD *)v110 == 2)
                            WTF::StringImpl::destroy(v110, (WTF::StringImpl *)v11);
                          else
                            *(_DWORD *)v110 -= 2;
                        }
                        v111 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v111)
                        {
                          if (*(_DWORD *)v111 == 2)
                            WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v11);
                          else
                            *(_DWORD *)v111 -= 2;
                        }
                        ++v97;
                      }
                      while (v97 != (uint64_t *)v98);
                    }
                    v112 = __ldxr(v92);
                    if (v112 == 1)
                    {
                      v7 = v124;
                      if (!__stlxr(0, v92))
                        break;
                    }
                    else
                    {
                      __clrex();
                      v7 = v124;
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v113 = v146;
            v146 = 0;
            if (v113)
            {
              if (*(_DWORD *)v113 == 2)
                WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v11);
              else
                *(_DWORD *)v113 -= 2;
            }
            goto LABEL_215;
          }
LABEL_254:
          __break(0xC471u);
          JUMPOUT(0x1961BE12CLL);
        }
LABEL_249:
        v73 = 0;
        goto LABEL_128;
      }
    }
    v72 = 0;
    if (v143)
      goto LABEL_127;
    goto LABEL_249;
  }
LABEL_215:
  v34 = 1;
LABEL_216:
  v114 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v114))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v114))
  {
    goto LABEL_220;
  }
  MEMORY[0x19AEA534C](v114);
LABEL_220:
  v116 = *(_QWORD *)(v114 + 8);
  v117 = v116 - 1;
  *(_QWORD *)(v114 + 8) = v116 - 1;
  if (v116 == 1)
  {
    v122 = *(_QWORD *)(v114 + 16);
    v118 = *(_QWORD *)(v114 + 24);
    *(_QWORD *)(v114 + 24) = 0;
    v119 = v122 != 0;
  }
  else
  {
    v118 = 0;
    v119 = 1;
  }
  v120 = __ldxr((unsigned __int8 *)v114);
  if (v120 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v114))
    {
      if (v117)
        return v34;
      goto LABEL_228;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v114);
  if (v117)
    return v34;
LABEL_228:
  if (v118)
    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
  if (!v119)
    WTF::fastFree((WTF *)v114, v11);
  return v34;
}

uint64_t WebCore::SourceBufferPrivate::evictFrames(WebCore::SourceBufferPrivate *this, uint64_t a2, const WTF::MediaTime *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t (***v7)();
  uint64_t (**v8)();
  _QWORD *v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t (***v12)();
  _QWORD *v13;
  uint64_t (**v14)();
  uint64_t v15;
  __int128 *v16;
  uint64_t updated;
  uint64_t (***v18)();
  uint64_t (**v19)();
  _QWORD *v20;
  uint64_t (***v21)();
  _QWORD *v22;
  uint64_t (**v23)();
  unint64_t v24;
  uint64_t v25;
  WTF::MediaTime *v26;
  uint64_t v27;
  WTF::MediaTime *v28;
  __int128 *v29;
  uint64_t (***v30)();
  _QWORD *v31;
  uint64_t (**v32)();
  WTF::MediaTime *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 *v36;
  void *v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (***v53)();
  uint64_t (**v54)();
  _QWORD *v55;
  uint64_t (***v56)();
  uint64_t (**v57)();
  _QWORD *v58;
  char v59;
  unint64_t v61;
  __int128 v63;
  __int128 v64;
  WTF *v65[2];
  __int128 v66;
  __int128 v67;
  unint64_t v68;
  uint64_t v69;
  __int128 v70;

  v5 = 30000;
  do
  {
    v68 = v5;
    LODWORD(v69) = 1000;
    BYTE4(v69) = 1;
    *(_QWORD *)&v66 = WTF::MediaTime::operator-();
    *((_QWORD *)&v66 + 1) = v6;
    v70 = *(_OWORD *)a3;
    v7 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x18);
    v8 = off_1E340FD40;
    *v7 = off_1E340FD40;
    v7[1] = (uint64_t (**)())a3;
    v7[2] = (uint64_t (**)())&v70;
    v9 = (_QWORD *)*((_QWORD *)this + 14);
    if (v9)
    {
      do
      {
        ((void (*)(uint64_t (***)(), _QWORD))(*v7)[2])(v7, v9[3]);
        v9 = (_QWORD *)*v9;
      }
      while (v9);
      v8 = *v7;
    }
    ((void (*)(uint64_t (***)()))v8[1])(v7);
    v10 = WTF::MediaTime::compare((WTF::MediaTime *)&v70, (const WTF::MediaTime *)&v66);
    if ((_DWORD)v10 == -1)
      v11 = &v70;
    else
      v11 = &v66;
    v67 = *v11;
    while (1)
    {
      v70 = *(_OWORD *)WTF::MediaTime::positiveInfiniteTime((WTF::MediaTime *)v10);
      v12 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
      *v12 = off_1E340FEB0;
      v12[1] = (uint64_t (**)())&v70;
      v13 = (_QWORD *)*((_QWORD *)this + 14);
      if (v13)
      {
        do
        {
          ((void (*)(uint64_t (***)(), _QWORD))(*v12)[2])(v12, v13[3]);
          v13 = (_QWORD *)*v13;
        }
        while (v13);
        v14 = *v12;
      }
      else
      {
        v14 = off_1E340FEB0;
      }
      ((void (*)(uint64_t (***)()))v14[1])(v12);
      v66 = v70;
      *(_QWORD *)&v70 = WTF::MediaTime::operator+();
      *((_QWORD *)&v70 + 1) = v15;
      v16 = WTF::MediaTime::compare((WTF::MediaTime *)&v67, (const WTF::MediaTime *)&v70) == -1
          ? &v67
          : &v70;
      *(_OWORD *)v65 = *v16;
      if ((WTF::MediaTime::compare((WTF::MediaTime *)&v66, (const WTF::MediaTime *)v65) & 0x80000000) == 0)
        break;
      updated = WTF::MediaTime::compare((WTF::MediaTime *)&v66, (const WTF::MediaTime *)v65);
      if ((updated & 0x80000000) != 0)
      {
        v18 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x28);
        v19 = off_1E340FDC0;
        *v18 = off_1E340FDC0;
        v18[1] = (uint64_t (**)())this;
        v18[2] = (uint64_t (**)())&v66;
        v18[3] = (uint64_t (**)())v65;
        v18[4] = (uint64_t (**)())a3;
        v20 = (_QWORD *)*((_QWORD *)this + 14);
        if (v20)
        {
          do
          {
            ((void (*)(uint64_t (***)(), _QWORD))(*v18)[2])(v18, v20[3]);
            v20 = (_QWORD *)*v20;
          }
          while (v20);
          v19 = *v18;
        }
        ((void (*)(uint64_t (***)()))v19[1])(v18);
        (*(void (**)(WebCore::SourceBufferPrivate *, const WTF::MediaTime *))(*(_QWORD *)this + 120))(this, a3);
        updated = WebCore::SourceBufferPrivate::updateHighestPresentationTimestamp(this);
      }
      v70 = *(_OWORD *)WTF::MediaTime::positiveInfiniteTime((WTF::MediaTime *)updated);
      v21 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
      *v21 = off_1E340FEB0;
      v21[1] = (uint64_t (**)())&v70;
      v22 = (_QWORD *)*((_QWORD *)this + 14);
      if (v22)
      {
        do
        {
          ((void (*)(uint64_t (***)(), _QWORD))(*v21)[2])(v21, v22[3]);
          v22 = (_QWORD *)*v22;
        }
        while (v22);
        v23 = *v21;
      }
      else
      {
        v23 = off_1E340FEB0;
      }
      ((void (*)(uint64_t (***)()))v23[1])(v21);
      if (!WTF::MediaTime::compare((WTF::MediaTime *)&v70, (const WTF::MediaTime *)&v66))
        break;
      v10 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *, uint64_t))(*(_QWORD *)this + 288))(this, a2);
      if ((v10 & 1) == 0)
      {
        v59 = 0;
        return v59 & 1;
      }
    }
    v24 = v5 >> 4;
    v5 >>= 1;
  }
  while (v24 > 0x176);
  v25 = 30000;
  do
  {
    v61 = v25;
    *(_QWORD *)&v67 = v25;
    DWORD2(v67) = 1000;
    v59 = 1;
    BYTE12(v67) = 1;
    v26 = (WTF::MediaTime *)WTF::MediaTime::operator+();
    *(_QWORD *)&v66 = v26;
    *((_QWORD *)&v66 + 1) = v27;
    do
    {
      v28 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v26);
      v29 = (__int128 *)WTF::MediaTime::positiveInfiniteTime(v28);
      v65[0] = 0;
      v65[1] = 0;
      WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)v65, (__int128 *)v28, v29, 0);
      v30 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
      *v30 = off_1E340FF00;
      v30[1] = (uint64_t (**)())v65;
      v31 = (_QWORD *)*((_QWORD *)this + 14);
      if (v31)
      {
        do
        {
          ((void (*)(uint64_t (***)(), _QWORD))(*v30)[2])(v30, v31[3]);
          v31 = (_QWORD *)*v31;
        }
        while (v31);
        v32 = *v30;
      }
      else
      {
        v32 = off_1E340FF00;
      }
      v33 = (WTF::MediaTime *)((uint64_t (*)(uint64_t (***)()))v32[1])(v30);
      if (HIDWORD(v65[1]))
        v34 = (__int128 *)((char *)v65[0] + 32 * (HIDWORD(v65[1]) - 1) + 16);
      else
        v34 = (__int128 *)WTF::MediaTime::invalidTime(v33);
      v64 = *v34;
      *(_QWORD *)&v70 = WTF::MediaTime::operator-();
      *((_QWORD *)&v70 + 1) = v35;
      if (WTF::MediaTime::compare((WTF::MediaTime *)&v66, (const WTF::MediaTime *)&v70) == -1)
        v36 = &v70;
      else
        v36 = &v66;
      v63 = *v36;
      if ((WTF::MediaTime::compare((WTF::MediaTime *)&v63, (const WTF::MediaTime *)&v64) & 0x80000000) == 0)
        goto LABEL_43;
      if (HIDWORD(v65[1]))
      {
        v39 = 0;
        v40 = 0;
        while (1)
        {
          v70 = *(_OWORD *)((char *)v65[0] + v39);
          v41 = WTF::MediaTime::compare(a3, (const WTF::MediaTime *)&v70);
          if ((v41 & 0x80000000) == 0)
          {
            if (v40 >= HIDWORD(v65[1]))
            {
              v42 = (unint64_t *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v41);
              v43 = (uint64_t *)(v42 + 1);
            }
            else
            {
              v42 = (unint64_t *)((char *)v65[0] + v39 + 16);
              v43 = (uint64_t *)((char *)v65[0] + v39 + 24);
            }
            v44 = *v43;
            v68 = *v42;
            v69 = v44;
            v41 = WTF::MediaTime::compare(a3, (const WTF::MediaTime *)&v68);
            if ((int)v41 <= 0)
              break;
          }
          ++v40;
          v39 += 32;
          if (v40 >= HIDWORD(v65[1]))
          {
            v40 = -1;
            if (!HIDWORD(v65[1]))
              goto LABEL_66;
            goto LABEL_59;
          }
        }
        if (!HIDWORD(v65[1]))
        {
LABEL_66:
          v46 = -1;
          goto LABEL_67;
        }
LABEL_59:
        v45 = 0;
        v46 = 0;
        while (1)
        {
          v70 = *(_OWORD *)((char *)v65[0] + v45);
          v41 = WTF::MediaTime::compare((WTF::MediaTime *)&v63, (const WTF::MediaTime *)&v70);
          if ((v41 & 0x80000000) == 0)
          {
            if (v46 >= HIDWORD(v65[1]))
            {
              v47 = (unint64_t *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v41);
              v48 = (uint64_t *)(v47 + 1);
            }
            else
            {
              v47 = (unint64_t *)((char *)v65[0] + v45 + 16);
              v48 = (uint64_t *)((char *)v65[0] + v45 + 24);
            }
            v49 = *v48;
            v68 = *v47;
            v69 = v49;
            v41 = WTF::MediaTime::compare((WTF::MediaTime *)&v63, (const WTF::MediaTime *)&v68);
            if ((int)v41 < 1)
              break;
          }
          ++v46;
          v45 += 32;
          if (v46 >= HIDWORD(v65[1]))
            goto LABEL_66;
        }
LABEL_67:
        if (v40 != -1 && v46 == v40)
        {
          if (v40 + 1 == HIDWORD(v65[1]))
            goto LABEL_43;
          v50 = HIDWORD(v65[1]) <= (v40 + 1)
              ? (WTF *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v41)
              : (WTF *)((char *)v65[0] + 32 * (v40 + 1));
          v51 = *((_QWORD *)v50 + 1);
          *(_QWORD *)&v63 = *(_QWORD *)v50;
          DWORD2(v63) = v51;
          BYTE12(v63) = BYTE4(v51);
          if ((WTF::MediaTime::compare((WTF::MediaTime *)&v63, (const WTF::MediaTime *)&v64) & 0x80000000) == 0)
            goto LABEL_43;
        }
      }
      v52 = WTF::MediaTime::compare((WTF::MediaTime *)&v63, (const WTF::MediaTime *)&v64);
      if ((v52 & 0x80000000) != 0)
      {
        v53 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x28);
        v54 = off_1E340FDC0;
        *v53 = off_1E340FDC0;
        v53[1] = (uint64_t (**)())this;
        v53[2] = (uint64_t (**)())&v63;
        v53[3] = (uint64_t (**)())&v64;
        v53[4] = (uint64_t (**)())a3;
        v55 = (_QWORD *)*((_QWORD *)this + 14);
        if (v55)
        {
          do
          {
            ((void (*)(uint64_t (***)(), _QWORD))(*v53)[2])(v53, v55[3]);
            v55 = (_QWORD *)*v55;
          }
          while (v55);
          v54 = *v53;
        }
        ((void (*)(uint64_t (***)()))v54[1])(v53);
        (*(void (**)(WebCore::SourceBufferPrivate *, const WTF::MediaTime *))(*(_QWORD *)this + 120))(this, a3);
        v52 = WebCore::SourceBufferPrivate::updateHighestPresentationTimestamp(this);
      }
      v70 = *(_OWORD *)WTF::MediaTime::negativeInfiniteTime((WTF::MediaTime *)v52);
      v56 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
      v57 = off_1E340FED8;
      *v56 = off_1E340FED8;
      v56[1] = (uint64_t (**)())&v70;
      v58 = (_QWORD *)*((_QWORD *)this + 14);
      if (v58)
      {
        do
        {
          ((void (*)(uint64_t (***)(), _QWORD))(*v56)[2])(v56, v58[3]);
          v58 = (_QWORD *)*v58;
        }
        while (v58);
        v57 = *v56;
      }
      ((void (*)(uint64_t (***)()))v57[1])(v56);
      if (WTF::MediaTime::compare((WTF::MediaTime *)&v70, (const WTF::MediaTime *)&v64))
      {
        v59 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *, uint64_t))(*(_QWORD *)this + 288))(this, a2);
        v38 = 0;
      }
      else
      {
LABEL_43:
        v38 = 1;
      }
      v26 = v65[0];
      if (v65[0])
      {
        v65[0] = 0;
        LODWORD(v65[1]) = 0;
        v26 = (WTF::MediaTime *)WTF::fastFree(v26, v37);
      }
    }
    while (!(v38 & 1 | ((v59 & 1) == 0)));
    v25 = v61 >> 1;
  }
  while (((v61 >> 4 > 0x176) & v59) != 0);
  return v59 & 1;
}

BOOL WebCore::SourceBufferPrivate::isBufferFullFor(WebCore::SourceBufferPrivate *this, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = *((_QWORD *)this + 5);
  v3 = __CFADD__(v2, a2);
  v4 = v2 + a2;
  return v3 || v4 >= *((_QWORD *)this + 7);
}

BOOL WebCore::SourceBufferPrivate::canAppend(WebCore::SourceBufferPrivate *this, uint64_t a2)
{
  return (unint64_t)(*((_QWORD *)this + 5) + a2 - *((_QWORD *)this + 6)) <= *((_QWORD *)this + 7);
}

uint64_t WebCore::SourceBufferPrivate::totalTrackBufferSizeInBytes(WebCore::SourceBufferPrivate *this)
{
  uint64_t (***v2)();
  uint64_t (**v3)();
  _QWORD *v4;
  uint64_t v6;

  v6 = 0;
  v2 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
  v3 = off_1E340FE10;
  *v2 = off_1E340FE10;
  v2[1] = (uint64_t (**)())&v6;
  v4 = (_QWORD *)*((_QWORD *)this + 14);
  if (v4)
  {
    do
    {
      ((void (*)(uint64_t (***)(), _QWORD))(*v2)[2])(v2, v4[3]);
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    v3 = *v2;
  }
  ((void (*)(uint64_t (***)()))v3[1])(v2);
  return v6;
}

void WebCore::SourceBufferPrivate::addTrackBuffer(_BYTE *a1, unint64_t a2, uint64_t *a3)
{
  char v5;
  char v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23[4];

  v21 = a2;
  if (a1[72])
    v5 = 1;
  else
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 24))(*a3);
  a1[72] = v5;
  if (a1[73])
    v6 = 1;
  else
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 16))(*a3);
  a1[73] = v6;
  v7 = WebCore::TrackBuffer::create(a3, &WebCore::discontinuityTolerance, &v20);
  v8 = v20;
  v9 = (*(uint64_t (**)(_BYTE *, double))(*(_QWORD *)a1 + 16))(a1, v7);
  v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1);
  v11 = (unsigned int *)(v9 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *(unsigned int **)(v8 + 288);
  *(_QWORD *)(v8 + 288) = v9;
  if (v13)
  {
    v14 = v13 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
    }
  }
  v17 = WTF::cryptographicallyRandomNumber<unsigned int>();
  *(_QWORD *)(v8 + 296) = v10 & 0xFFFFFFFFFFFF0000 | v17;
  v18 = *(_QWORD *)(v8 + 288);
  v23[0] = "TrackBuffer";
  v23[1] = (_QWORD *)12;
  v23[2] = "setLogger";
  v23[3] = (_QWORD *)(v10 & 0xFFFFFFFFFFFF0000 | v17);
  if (*(_BYTE *)(v18 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v23);
  v23[0] = &v21;
  v22 = &v20;
  std::__hash_table<std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<WTF::UniqueRef<WebCore::TrackBuffer>&&>>((uint64_t)(a1 + 96), &v21, (uint64_t)&std::piecewise_construct, v23, &v22);
  v19 = v20;
  v20 = 0;
  if (v19)
    std::default_delete<WebCore::TrackBuffer>::operator()[abi:sn180100]((uint64_t)&v20, v19);
}

uint64_t WebCore::SourceBufferPrivate::updateTrackIds(uint64_t a1, unsigned int *a2)
{
  WTF *v4;
  int8x8_t v5;
  WTF **v6;
  WTF *v7;
  WTF **v8;
  uint64_t v9;
  unint64_t v10;
  WTF *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  WTF **v18;
  WTF *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  WTF *v24;
  WTF **v25;
  unint64_t v26;
  unint64_t v27;
  WTF *v28;
  unint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  size_t prime;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  void *v46;
  int8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  WTF **v50;
  unint64_t v51;
  WTF *v52;
  WTF *v53;
  void *v54;
  uint64_t result;
  WTF *v56;
  int8x8_t v57;
  WTF *v58;
  uint64_t v59;
  int v60;

  v4 = *(WTF **)(a1 + 96);
  v5 = *(int8x8_t *)(a1 + 104);
  v6 = (WTF **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v56 = v4;
  v57 = v5;
  v8 = (WTF **)(a1 + 112);
  v7 = *(WTF **)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120);
  v58 = v7;
  v59 = v9;
  v60 = *(_DWORD *)(a1 + 128);
  if (v9)
  {
    v10 = *((_QWORD *)v7 + 1);
    if ((*(_QWORD *)&v5 & (*(_QWORD *)&v5 - 1)) != 0)
    {
      if (v10 >= *(_QWORD *)&v5)
        v10 %= *(_QWORD *)&v5;
    }
    else
    {
      v10 &= *(_QWORD *)&v5 - 1;
    }
    *((_QWORD *)v4 + v10) = &v58;
    *v8 = 0;
    *(_QWORD *)(a1 + 120) = 0;
  }
  v11 = *v6;
  *v6 = 0;
  if (v11)
  {
    WTF::fastFree(v11, a2);
    v5 = v57;
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 1065353216;
  v12 = a2[3];
  if ((_DWORD)v12 && *(_QWORD *)&v5)
  {
    v13 = *(unint64_t **)a2;
    v14 = *(_QWORD *)a2 + 16 * v12;
LABEL_12:
    v15 = *v13;
    v16 = (uint8x8_t)vcnt_s8(v5);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v17 = *v13;
      if (v15 >= *(_QWORD *)&v5)
        v17 = v15 % *(_QWORD *)&v5;
    }
    else
    {
      v17 = v15 & (*(_QWORD *)&v5 - 1);
    }
    v18 = (WTF **)*((_QWORD *)v56 + v17);
    if (v18)
    {
      v19 = *v18;
      if (*v18)
      {
        v20 = v13[1];
        v21 = *(_QWORD *)&v5 - 1;
        if (v16.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = *((_QWORD *)v19 + 1);
            if (v22 == v15)
            {
              if (*((_QWORD *)v19 + 2) == v15)
                goto LABEL_33;
            }
            else if ((v22 & v21) != v17)
            {
              goto LABEL_120;
            }
            v19 = *(WTF **)v19;
            if (!v19)
              goto LABEL_120;
          }
        }
        do
        {
          v23 = *((_QWORD *)v19 + 1);
          if (v23 == v15)
          {
            if (*((_QWORD *)v19 + 2) == v15)
            {
LABEL_33:
              if (v16.u32[0] > 1uLL)
              {
                if (v15 >= *(_QWORD *)&v5)
                  v15 %= *(_QWORD *)&v5;
              }
              else
              {
                v15 &= v21;
              }
              v24 = (WTF *)*((_QWORD *)v56 + v15);
              do
              {
                v25 = (WTF **)v24;
                v24 = *(WTF **)v24;
              }
              while (v24 != v19);
              if (v25 == &v58)
                goto LABEL_50;
              v26 = (unint64_t)v25[1];
              if (v16.u32[0] > 1uLL)
              {
                if (v26 >= *(_QWORD *)&v5)
                  v26 %= *(_QWORD *)&v5;
              }
              else
              {
                v26 &= v21;
              }
              if (v26 != v15)
              {
LABEL_50:
                if (!*(_QWORD *)v19)
                  goto LABEL_51;
                v27 = *(_QWORD *)(*(_QWORD *)v19 + 8);
                if (v16.u32[0] > 1uLL)
                {
                  if (v27 >= *(_QWORD *)&v5)
                    v27 %= *(_QWORD *)&v5;
                }
                else
                {
                  v27 &= v21;
                }
                if (v27 != v15)
LABEL_51:
                  *((_QWORD *)v56 + v15) = 0;
              }
              v28 = *(WTF **)v19;
              if (*(_QWORD *)v19)
              {
                v29 = *((_QWORD *)v28 + 1);
                if (v16.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&v5)
                    v29 %= *(_QWORD *)&v5;
                }
                else
                {
                  v29 &= v21;
                }
                if (v29 != v15)
                {
                  *((_QWORD *)v56 + v29) = v25;
                  v28 = *(WTF **)v19;
                }
              }
              *v25 = v28;
              *(_QWORD *)v19 = 0;
              --v59;
              *((_QWORD *)v19 + 1) = v20;
              *((_QWORD *)v19 + 2) = v20;
              v30 = *(_QWORD *)(a1 + 104);
              if (v30)
              {
                v31 = (uint8x8_t)vcnt_s8((int8x8_t)v30);
                v31.i16[0] = vaddlv_u8(v31);
                if (v31.u32[0] > 1uLL)
                {
                  v32 = v20;
                  if (v30 <= v20)
                    v32 = v20 % v30;
                }
                else
                {
                  v32 = (v30 - 1) & v20;
                }
                v33 = (_QWORD *)*((_QWORD *)*v6 + v32);
                if (v33)
                {
                  v34 = (_QWORD *)*v33;
                  if (v34)
                  {
                    if (v31.u32[0] >= 2uLL)
                    {
                      while (1)
                      {
                        v36 = v34[1];
                        if (v36 == v20)
                        {
                          if (v34[2] == v20)
                          {
LABEL_98:
                            v46 = (void *)*((_QWORD *)v19 + 3);
                            *((_QWORD *)v19 + 3) = 0;
                            if (v46)
                              std::default_delete<WebCore::TrackBuffer>::operator()[abi:sn180100]((uint64_t)v19 + 24, (uint64_t)v46);
                            WTF::fastFree(v19, v46);
                            goto LABEL_120;
                          }
                        }
                        else
                        {
                          if (v36 >= v30)
                            v36 %= v30;
                          if (v36 != v32)
                            goto LABEL_80;
                        }
                        v34 = (_QWORD *)*v34;
                        if (!v34)
                          goto LABEL_80;
                      }
                    }
                    do
                    {
                      v35 = v34[1];
                      if (v35 == v20)
                      {
                        if (v34[2] == v20)
                          goto LABEL_98;
                      }
                      else if ((v35 & (v30 - 1)) != v32)
                      {
                        break;
                      }
                      v34 = (_QWORD *)*v34;
                    }
                    while (v34);
                  }
                }
              }
LABEL_80:
              v37 = (float)(unint64_t)(*(_QWORD *)(a1 + 120) + 1);
              v38 = *(float *)(a1 + 128);
              if (!v30 || (float)(v38 * (float)v30) < v37)
              {
                v39 = (v30 & (v30 - 1)) != 0;
                if (v30 < 3)
                  v39 = 1;
                v40 = v39 | (2 * v30);
                v41 = vcvtps_u32_f32(v37 / v38);
                if (v40 <= v41)
                  prime = v41;
                else
                  prime = v40;
                if (prime == 1)
                {
                  prime = 2;
                }
                else if ((prime & (prime - 1)) != 0)
                {
                  prime = std::__next_prime(prime);
                  v30 = *(_QWORD *)(a1 + 104);
                }
                if (prime > v30)
                  goto LABEL_105;
                if (prime < v30)
                {
                  v43 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 120) / *(float *)(a1 + 128));
                  if (v30 < 3
                    || (v44 = (uint8x8_t)vcnt_s8((int8x8_t)v30), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
                  {
                    v43 = std::__next_prime(v43);
                  }
                  else
                  {
                    v45 = 1 << -(char)__clz(v43 - 1);
                    if (v43 >= 2)
                      v43 = v45;
                  }
                  if (prime <= v43)
                    prime = v43;
                  if (prime < v30)
LABEL_105:
                    std::__hash_table<std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>>>::__do_rehash<true>((uint64_t)v6, prime);
                }
              }
              v47 = *(int8x8_t *)(a1 + 104);
              v48 = *((_QWORD *)v19 + 1);
              v49 = (uint8x8_t)vcnt_s8(v47);
              v49.i16[0] = vaddlv_u8(v49);
              if (v49.u32[0] > 1uLL)
              {
                if (v48 >= *(_QWORD *)&v47)
                  v48 %= *(_QWORD *)&v47;
              }
              else
              {
                v48 &= *(_QWORD *)&v47 - 1;
              }
              v50 = (WTF **)*((_QWORD *)*v6 + v48);
              if (v50)
              {
                *(_QWORD *)v19 = *v50;
                goto LABEL_118;
              }
              *(_QWORD *)v19 = *v8;
              *v8 = v19;
              *((_QWORD *)*v6 + v48) = v8;
              if (*(_QWORD *)v19)
              {
                v51 = *(_QWORD *)(*(_QWORD *)v19 + 8);
                if (v49.u32[0] > 1uLL)
                {
                  if (v51 >= *(_QWORD *)&v47)
                    v51 %= *(_QWORD *)&v47;
                }
                else
                {
                  v51 &= *(_QWORD *)&v47 - 1;
                }
                v50 = (WTF **)((char *)*v6 + 8 * v51);
LABEL_118:
                *v50 = v19;
              }
              ++*(_QWORD *)(a1 + 120);
              break;
            }
          }
          else
          {
            if (v23 >= *(_QWORD *)&v5)
              v23 %= *(_QWORD *)&v5;
            if (v23 != v17)
              break;
          }
          v19 = *(WTF **)v19;
        }
        while (v19);
      }
    }
LABEL_120:
    while (1)
    {
      v13 += 2;
      if (v13 == (unint64_t *)v14)
        break;
      v5 = v57;
      if (v57)
        goto LABEL_12;
    }
  }
  v52 = v58;
  if (v58)
  {
    do
    {
      v53 = *(WTF **)v52;
      v54 = (void *)*((_QWORD *)v52 + 3);
      *((_QWORD *)v52 + 3) = 0;
      if (v54)
        std::default_delete<WebCore::TrackBuffer>::operator()[abi:sn180100]((uint64_t)v52 + 24, (uint64_t)v54);
      WTF::fastFree(v52, v54);
      v52 = v53;
    }
    while (v53);
  }
  result = (uint64_t)v56;
  if (v56)
    return WTF::fastFree(v56, a2);
  return result;
}

uint64_t WebCore::SourceBufferPrivate::setAllTrackBuffersNeedRandomAccess(WebCore::SourceBufferPrivate *this)
{
  uint64_t v2;
  uint64_t (**v3)();
  _QWORD *v4;

  v2 = WTF::fastMalloc((WTF *)0x10);
  v3 = off_1E340FE38;
  *(_QWORD *)v2 = off_1E340FE38;
  v4 = (_QWORD *)*((_QWORD *)this + 14);
  if (v4)
  {
    do
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, v4[3]);
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    v3 = *(uint64_t (***)())v2;
  }
  return ((uint64_t (*)(uint64_t))v3[1])(v2);
}

void WebCore::SourceBufferPrivate::didReceiveInitializationSegment(WTF::Lock *a1, __int128 *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  WTF::Lock *v70;
  int v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  unsigned int *v88;
  unsigned int v89;
  void *v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unsigned int *v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  void *v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int *v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  void *v123;
  unsigned int *v124;
  unsigned int *v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v139;
  uint64_t v140;
  int v141;
  void *v142;
  int v143;
  int v144;
  int v145;
  WTF::Lock *v146[2];
  __int128 v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _BYTE v161[20];
  int v162;
  __int128 v163;
  unsigned int *v164;
  unsigned int *v165;
  __int128 v166;
  const char *v167;
  uint64_t v168;
  unsigned int *v169;
  unsigned int *v170;
  __int128 v171;
  const char *v172;
  uint64_t v173;
  __int128 v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  _BYTE v181[24];
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  _QWORD v189[3];

  WebCore::SourceBufferPrivate::processPendingMediaSamples((uint64_t)a1);
  v174 = *a2;
  v4 = *((unsigned int *)a2 + 7);
  v175 = 0;
  LODWORD(v176) = 0;
  HIDWORD(v176) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 28)
      goto LABEL_174;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v4));
    LODWORD(v176) = v4;
    v175 = v5;
    v6 = *((unsigned int *)a2 + 7);
    if ((_DWORD)v6)
    {
      v7 = (uint64_t *)*((_QWORD *)a2 + 2);
      v8 = &v7[2 * v6];
      do
      {
        v9 = *v7;
        if (*v7)
        {
          v10 = (unsigned int *)(v9 + 8);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
        *v5 = v9;
        v12 = v7[1];
        if (v12)
        {
          v13 = (unsigned int *)(v12 + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 + 1, v13));
        }
        v5[1] = v12;
        v5 += 2;
        v7 += 2;
      }
      while (v7 != v8);
    }
  }
  v15 = *((unsigned int *)a2 + 11);
  v177 = 0;
  LODWORD(v178) = 0;
  HIDWORD(v178) = v15;
  if ((_DWORD)v15)
  {
    if (v15 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1961BFBF0);
    }
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v15));
    LODWORD(v178) = v15;
    v177 = v16;
    v17 = *((unsigned int *)a2 + 11);
    if ((_DWORD)v17)
    {
      v18 = (uint64_t *)*((_QWORD *)a2 + 4);
      v19 = &v18[2 * v17];
      do
      {
        v20 = *v18;
        if (*v18)
        {
          v21 = (unsigned int *)(v20 + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
        }
        *v16 = v20;
        v23 = v18[1];
        if (v23)
        {
          v24 = (unsigned int *)(v23 + 8);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 + 1, v24));
        }
        v16[1] = v23;
        v16 += 2;
        v18 += 2;
      }
      while (v18 != v19);
    }
  }
  v26 = *((unsigned int *)a2 + 15);
  v179 = 0;
  LODWORD(v180) = 0;
  HIDWORD(v180) = v26;
  if (!(_DWORD)v26)
    goto LABEL_35;
  if (v26 >> 28)
  {
LABEL_174:
    __break(0xC471u);
    JUMPOUT(0x1961BFBE8);
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v26));
  LODWORD(v180) = v26;
  v179 = v27;
  v28 = *((unsigned int *)a2 + 15);
  if (!(_DWORD)v28)
  {
LABEL_35:
    v37 = 0;
    goto LABEL_36;
  }
  v29 = (uint64_t *)*((_QWORD *)a2 + 6);
  v30 = &v29[2 * v28];
  do
  {
    v31 = *v29;
    if (*v29)
    {
      v32 = (unsigned int *)(v31 + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
    }
    *v27 = v31;
    v34 = v29[1];
    if (v34)
    {
      v35 = (unsigned int *)(v34 + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 + 1, v35));
    }
    v27[1] = v34;
    v27 += 2;
    v29 += 2;
  }
  while (v29 != v30);
  v37 = *((_DWORD *)a2 + 15);
LABEL_36:
  v38 = *((_QWORD *)a1 + 23);
  v39 = (uint64_t *)*((_QWORD *)a1 + 4);
  v155 = *a2;
  v40 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  v156 = v40;
  v41 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  v157 = v41;
  v42 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  v158 = v42;
  v43 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  v159 = v43;
  v44 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  v160 = v44;
  LODWORD(v44) = *((_DWORD *)a2 + 14);
  *((_QWORD *)a2 + 7) = 0;
  *(_DWORD *)v161 = v44;
  *(_DWORD *)&v161[4] = v37;
  v45 = *((_QWORD *)a1 + 1);
  if (!v45)
  {
    v47 = 0;
    goto LABEL_48;
  }
  if (__ldaxr((unsigned __int8 *)v45))
  {
    __clrex();
LABEL_40:
    MEMORY[0x19AEA534C](v45);
    goto LABEL_41;
  }
  if (__stxr(1u, (unsigned __int8 *)v45))
    goto LABEL_40;
LABEL_41:
  if (*(_QWORD *)(v45 + 24))
  {
    ++*(_QWORD *)(v45 + 16);
    v47 = v45;
  }
  else
  {
    v47 = 0;
  }
  v48 = __ldxr((unsigned __int8 *)v45);
  if (v48 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v45))
      goto LABEL_48;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v45);
LABEL_48:
  v49 = *((_QWORD *)a1 + 20);
  *(_QWORD *)&v163 = a1;
  *((_QWORD *)&v163 + 1) = v49;
  v154 = 0uLL;
  v50 = v156;
  v51 = v158;
  v156 = 0;
  v158 = 0;
  v52 = v160;
  v160 = 0;
  v53 = *(_QWORD *)v161;
  memset(v161, 0, sizeof(v161));
  v162 = 0;
  *(_OWORD *)v181 = v155;
  v188 = v163;
  v54 = WTF::fastMalloc((WTF *)0x50);
  v55 = *v39;
  v56 = v159;
  v159 = 0;
  (*(void (**)(uint64_t *))(v55 + 32))(v39);
  v57 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v57 = off_1E340F808;
  v59 = v157;
  v157 = 0;
  *(_OWORD *)(v57 + 8) = *(_OWORD *)v181;
  *(_QWORD *)&v181[16] = 0;
  *(_QWORD *)(v57 + 24) = v50;
  *(_QWORD *)&v182 = 0;
  *(_QWORD *)(v57 + 32) = v59;
  *((_QWORD *)&v182 + 1) = 0;
  *(_QWORD *)(v57 + 40) = v51;
  v183 = 0;
  *(_QWORD *)(v57 + 48) = v56;
  v184 = 0;
  *(_QWORD *)(v57 + 56) = v52;
  v185 = 0;
  *(_QWORD *)(v57 + 64) = v53;
  *(_QWORD *)(v57 + 72) = v47;
  *(_QWORD *)(v57 + 80) = a1;
  v186 = 0;
  v187 = 0;
  *(_OWORD *)(v57 + 88) = v188;
  *(_DWORD *)(v54 + 8) = 1;
  *(_QWORD *)(v54 + 16) = v39;
  *(_QWORD *)(v54 + 24) = 0;
  *(_QWORD *)(v54 + 32) = 0;
  *(_QWORD *)(v54 + 40) = "didReceiveInitializationSegment";
  *(_QWORD *)(v54 + 48) = 0;
  *(_WORD *)(v54 + 56) = 0;
  *(_QWORD *)v54 = &off_1E320D650;
  v60 = (unsigned int *)(v38 + 8);
  *(_QWORD *)(v54 + 64) = 0;
  *(_QWORD *)(v54 + 72) = v57;
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 + 1, v60));
  v164 = (unsigned int *)v38;
  v165 = (unsigned int *)v54;
  v166 = v154;
  v167 = "didReceiveInitializationSegment";
  v168 = 0;
  v62 = v186;
  v186 = 0;
  if (v62)
  {
    if (__ldaxr((unsigned __int8 *)v62))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v62))
    {
      goto LABEL_55;
    }
    MEMORY[0x19AEA534C](v62);
LABEL_55:
    v64 = *(_QWORD *)(v62 + 16) - 1;
    *(_QWORD *)(v62 + 16) = v64;
    if (!v64)
    {
      v65 = *(_QWORD *)(v62 + 8);
      v66 = __ldxr((unsigned __int8 *)v62);
      if (v66 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v62))
        {
          if (v65)
            goto LABEL_63;
LABEL_62:
          WTF::fastFree((WTF *)v62, v58);
          goto LABEL_63;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v62);
      if (v65)
        goto LABEL_63;
      goto LABEL_62;
    }
    v143 = __ldxr((unsigned __int8 *)v62);
    if (v143 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v62))
        goto LABEL_63;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v62);
  }
LABEL_63:
  WebCore::SourceBufferPrivateClient::InitializationSegment::~InitializationSegment((WebCore::SourceBufferPrivateClient::InitializationSegment *)v181, v58);
  v67 = *((_QWORD *)a1 + 4);
  v146[0] = a1;
  v68 = *((_QWORD *)a1 + 1);
  if (!v68)
  {
    v70 = 0;
    goto LABEL_75;
  }
  if (__ldaxr((unsigned __int8 *)v68))
  {
    __clrex();
LABEL_67:
    MEMORY[0x19AEA534C](v68);
    goto LABEL_68;
  }
  if (__stxr(1u, (unsigned __int8 *)v68))
    goto LABEL_67;
LABEL_68:
  if (*(_QWORD *)(v68 + 24))
  {
    ++*(_QWORD *)(v68 + 16);
    v70 = (WTF::Lock *)v68;
  }
  else
  {
    v70 = 0;
  }
  v71 = __ldxr((unsigned __int8 *)v68);
  if (v71 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v68))
      goto LABEL_75;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v68);
LABEL_75:
  v146[1] = v70;
  v147 = v174;
  v72 = v175;
  v175 = 0;
  v148 = v72;
  v73 = v176;
  v176 = 0;
  v149 = v73;
  v74 = v177;
  v177 = 0;
  v150 = v74;
  v75 = v178;
  v178 = 0;
  v151 = v75;
  v76 = v179;
  v179 = 0;
  v152 = v76;
  v77 = v180;
  v180 = 0;
  v153 = v77;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>>::completionPromise((uint64_t *)&v164, v189);
  v78 = v189[0];
  v182 = v147;
  v79 = v148;
  v148 = 0;
  v80 = v150;
  v150 = 0;
  v81 = v152;
  v152 = 0;
  v82 = v149;
  v149 = 0;
  v83 = v151;
  v151 = 0;
  v84 = v153;
  v153 = 0;
  *(_QWORD *)v181 = a1;
  v85 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v67 + 32))(v67);
  v86 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v86 = off_1E340F848;
  *(_OWORD *)(v86 + 8) = *(_OWORD *)v146;
  *(_OWORD *)&v181[8] = 0u;
  *(_QWORD *)(v86 + 24) = a1;
  *(_OWORD *)(v86 + 32) = v182;
  v183 = 0;
  *(_QWORD *)(v86 + 48) = v79;
  v184 = 0;
  *(_QWORD *)(v86 + 56) = v82;
  v185 = 0;
  *(_QWORD *)(v86 + 64) = v80;
  v186 = 0;
  *(_QWORD *)(v86 + 72) = v83;
  v187 = 0;
  *(_QWORD *)(v86 + 80) = v81;
  *(_QWORD *)&v188 = 0;
  *(_QWORD *)(v86 + 88) = v84;
  *(_DWORD *)(v85 + 8) = 1;
  *(_QWORD *)(v85 + 16) = v67;
  *(_OWORD *)(v85 + 24) = 0u;
  *(_QWORD *)(v85 + 40) = "didReceiveInitializationSegment";
  *(_QWORD *)(v85 + 48) = 0;
  *(_WORD *)(v85 + 56) = 0;
  *(_QWORD *)v85 = &off_1E320D650;
  v88 = (unsigned int *)(v78 + 8);
  *(_QWORD *)(v85 + 64) = 0;
  *(_QWORD *)(v85 + 72) = v86;
  do
    v89 = __ldaxr(v88);
  while (__stlxr(v89 + 1, v88));
  v169 = (unsigned int *)v78;
  v170 = (unsigned int *)v85;
  v171 = 0u;
  v172 = "didReceiveInitializationSegment";
  v173 = 0;
  WebCore::SourceBufferPrivateClient::InitializationSegment::~InitializationSegment((WebCore::SourceBufferPrivateClient::InitializationSegment *)&v182, v87);
  v91 = *(_QWORD *)&v181[8];
  *(_QWORD *)&v181[8] = 0;
  if (!v91)
    goto LABEL_90;
  if (__ldaxr((unsigned __int8 *)v91))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v91))
  {
    goto LABEL_82;
  }
  MEMORY[0x19AEA534C](v91);
LABEL_82:
  v93 = *(_QWORD *)(v91 + 16) - 1;
  *(_QWORD *)(v91 + 16) = v93;
  if (v93)
  {
    v144 = __ldxr((unsigned __int8 *)v91);
    if (v144 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v91))
        goto LABEL_90;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v91);
    goto LABEL_90;
  }
  v94 = *(_QWORD *)(v91 + 8);
  v95 = __ldxr((unsigned __int8 *)v91);
  if (v95 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v91))
    {
      if (!v94)
        goto LABEL_89;
      goto LABEL_90;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v91);
  if (!v94)
LABEL_89:
    WTF::fastFree((WTF *)v91, v90);
LABEL_90:
  v96 = (unsigned int *)v189[0];
  v189[0] = 0;
  if (v96)
  {
    v97 = v96 + 2;
    do
    {
      v98 = __ldaxr(v97);
      v99 = v98 - 1;
    }
    while (__stlxr(v99, v97));
    if (!v99)
    {
      atomic_store(1u, v96 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v96 + 16))(v96);
    }
  }
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>>::completionPromise((uint64_t *)&v169, v189);
  v101 = v189[0];
  v189[0] = 0;
  v102 = (unsigned int *)*((_QWORD *)a1 + 23);
  *((_QWORD *)a1 + 23) = v101;
  if (v102)
  {
    v103 = v102 + 2;
    do
    {
      v104 = __ldaxr(v103);
      v105 = v104 - 1;
    }
    while (__stlxr(v105, v103));
    if (!v105)
    {
      atomic_store(1u, v102 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v102 + 16))(v102);
    }
    v106 = (unsigned int *)v189[0];
    v189[0] = 0;
    if (v106)
    {
      v107 = v106 + 2;
      do
      {
        v108 = __ldaxr(v107);
        v109 = v108 - 1;
      }
      while (__stlxr(v109, v107));
      if (!v109)
      {
        atomic_store(1u, v106 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v106 + 16))(v106);
      }
    }
  }
  v110 = v170;
  if (v170)
  {
    v170 = 0;
    *(_QWORD *)v181 = v110;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle((uint64_t)v169, (WTF::NativePromiseBase **)v181, (WTF::Logger::LogSiteIdentifier *)&v171);
    v111 = *(unsigned int **)v181;
    *(_QWORD *)v181 = 0;
    if (v111)
    {
      v112 = v111 + 2;
      do
      {
        v113 = __ldaxr(v112);
        v114 = v113 - 1;
      }
      while (__stlxr(v114, v112));
      if (!v114)
      {
        atomic_store(1u, v111 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v111 + 8))(v111);
      }
    }
    v115 = v170;
    v170 = 0;
    if (v115)
    {
      v116 = v115 + 2;
      do
      {
        v117 = __ldaxr(v116);
        v118 = v117 - 1;
      }
      while (__stlxr(v118, v116));
      if (!v118)
      {
        atomic_store(1u, v115 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v115 + 8))(v115);
      }
    }
  }
  else
  {
    v170 = 0;
  }
  v119 = v169;
  v169 = 0;
  if (v119)
  {
    v120 = v119 + 2;
    do
    {
      v121 = __ldaxr(v120);
      v122 = v121 - 1;
    }
    while (__stlxr(v122, v120));
    if (!v122)
    {
      atomic_store(1u, v119 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v119 + 16))(v119);
    }
  }
  WebCore::SourceBufferPrivateClient::InitializationSegment::~InitializationSegment((WebCore::SourceBufferPrivateClient::InitializationSegment *)&v147, v100);
  v124 = v165;
  if (v165)
  {
    v165 = 0;
    *(_QWORD *)v181 = v124;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle((uint64_t)v164, (WTF::NativePromiseBase **)v181, (WTF::Logger::LogSiteIdentifier *)&v166);
    v125 = *(unsigned int **)v181;
    *(_QWORD *)v181 = 0;
    if (v125)
    {
      v126 = v125 + 2;
      do
      {
        v127 = __ldaxr(v126);
        v128 = v127 - 1;
      }
      while (__stlxr(v128, v126));
      if (!v128)
      {
        atomic_store(1u, v125 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v125 + 8))(v125);
      }
    }
    v129 = v165;
    v165 = 0;
    if (v129)
    {
      v130 = v129 + 2;
      do
      {
        v131 = __ldaxr(v130);
        v132 = v131 - 1;
      }
      while (__stlxr(v132, v130));
      if (!v132)
      {
        atomic_store(1u, v129 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v129 + 8))(v129);
      }
    }
  }
  else
  {
    v165 = 0;
  }
  v133 = v164;
  v164 = 0;
  if (v133)
  {
    v134 = v133 + 2;
    do
    {
      v135 = __ldaxr(v134);
      v136 = v135 - 1;
    }
    while (__stlxr(v136, v134));
    if (!v136)
    {
      atomic_store(1u, v133 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v133 + 16))(v133);
    }
  }
  v137 = *(_QWORD *)&v161[8];
  *(_QWORD *)&v161[8] = 0;
  if (!v137)
    goto LABEL_152;
  if (__ldaxr((unsigned __int8 *)v137))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v137))
  {
    goto LABEL_144;
  }
  MEMORY[0x19AEA534C](v137);
LABEL_144:
  v139 = *(_QWORD *)(v137 + 16) - 1;
  *(_QWORD *)(v137 + 16) = v139;
  if (v139)
  {
    v145 = __ldxr((unsigned __int8 *)v137);
    if (v145 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v137))
        goto LABEL_152;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v137);
    goto LABEL_152;
  }
  v140 = *(_QWORD *)(v137 + 8);
  v141 = __ldxr((unsigned __int8 *)v137);
  if (v141 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v137))
    {
      if (!v140)
        goto LABEL_151;
      goto LABEL_152;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v137);
  if (!v140)
LABEL_151:
    WTF::fastFree((WTF *)v137, v123);
LABEL_152:
  WebCore::SourceBufferPrivateClient::InitializationSegment::~InitializationSegment((WebCore::SourceBufferPrivateClient::InitializationSegment *)&v155, v123);
  WebCore::SourceBufferPrivateClient::InitializationSegment::~InitializationSegment((WebCore::SourceBufferPrivateClient::InitializationSegment *)&v174, v142);
}

uint64_t WebCore::SourceBufferPrivate::processPendingMediaSamples(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF::NativePromiseBase *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  WTF::NativePromiseBase *v38;
  __int128 v39;
  const char *v40;
  uint64_t v41;
  unsigned int *v42;
  WTF::NativePromiseBase *v43;

  v1 = *(_DWORD *)(this + 180);
  if (!v1)
    return this;
  v2 = this;
  v3 = *(_QWORD *)(this + 168);
  v4 = *(_DWORD *)(this + 176);
  *(_QWORD *)(this + 168) = 0;
  *(_QWORD *)(this + 176) = 0;
  v5 = *(_QWORD *)(this + 184);
  v6 = *(_QWORD *)(this + 32);
  v7 = *(_QWORD *)(this + 8);
  if (!v7)
  {
    v9 = 0;
    goto LABEL_14;
  }
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_7:
  if (*(_QWORD *)(v7 + 24))
  {
    ++*(_QWORD *)(v7 + 16);
    v9 = v7;
  }
  else
  {
    v9 = 0;
  }
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_14:
  v11 = *(_QWORD *)(v2 + 160);
  v12 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v13 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v13 = off_1E340F9C0;
  *(_QWORD *)(v13 + 8) = v9;
  *(_QWORD *)(v13 + 16) = v2;
  *(_QWORD *)(v13 + 24) = v2;
  *(_QWORD *)(v13 + 32) = v3;
  *(_DWORD *)(v13 + 40) = v4;
  *(_DWORD *)(v13 + 44) = v1;
  *(_QWORD *)(v13 + 48) = v11;
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = v6;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = "processPendingMediaSamples";
  *(_QWORD *)(v12 + 48) = 0;
  *(_WORD *)(v12 + 56) = 0;
  *(_QWORD *)v12 = &off_1E320D650;
  v14 = (unsigned int *)(v5 + 8);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = v13;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  v37 = v5;
  v38 = (WTF::NativePromiseBase *)v12;
  v39 = 0uLL;
  v40 = "processPendingMediaSamples";
  v41 = 0;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>>::completionPromise(&v37, &v42);
  v16 = v42;
  v42 = 0;
  v17 = *(unsigned int **)(v2 + 184);
  *(_QWORD *)(v2 + 184) = v16;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 16))(v17);
    }
    v21 = v42;
    v42 = 0;
    if (v21)
    {
      v22 = v21 + 2;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v21 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
      }
    }
  }
  v25 = v38;
  if (v38)
  {
    v38 = 0;
    v43 = v25;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(v37, &v43, (WTF::Logger::LogSiteIdentifier *)&v39);
    v26 = (unsigned int *)v43;
    v43 = 0;
    if (v26)
    {
      v27 = v26 + 2;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v26 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
      }
    }
    v30 = (unsigned int *)v38;
    v38 = 0;
    if (v30)
    {
      v31 = v30 + 2;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v30 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
      }
    }
  }
  else
  {
    v38 = 0;
  }
  this = v37;
  v37 = 0;
  if (this)
  {
    v34 = (unsigned int *)(this + 8);
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, (unsigned int *)(this + 8));
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
    }
  }
  return this;
}

unsigned int *WebCore::SourceBufferPrivate::didUpdateFormatDescriptionForTrackId(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  WTF::NativePromiseBase *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *result;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  WTF::NativePromiseBase *v40;
  __int128 v41;
  const char *v42;
  uint64_t v43;
  unsigned int *v44;
  WTF::NativePromiseBase *v45;

  v6 = a1[23];
  v7 = a1[4];
  v8 = a1[1];
  if (!v8)
  {
    v10 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v8);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v8))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v8 + 24))
  {
    ++*(_QWORD *)(v8 + 16);
    v10 = v8;
  }
  else
  {
    v10 = 0;
  }
  v11 = __ldxr((unsigned __int8 *)v8);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v8))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_13:
  v12 = *a2;
  *a2 = 0;
  v13 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v14 = &off_1E340F870;
  v14[1] = v10;
  v14[2] = a1;
  v14[3] = a1;
  v14[4] = v12;
  v14[5] = a3;
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 16) = v7;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = "didUpdateFormatDescriptionForTrackId";
  *(_QWORD *)(v13 + 48) = 0;
  *(_WORD *)(v13 + 56) = 0;
  *(_QWORD *)v13 = &off_1E320D650;
  v15 = (unsigned int *)(v6 + 8);
  *(_QWORD *)(v13 + 64) = 0;
  *(_QWORD *)(v13 + 72) = v14;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v39 = (unsigned int *)v6;
  v40 = (WTF::NativePromiseBase *)v13;
  v41 = 0uLL;
  v42 = "didUpdateFormatDescriptionForTrackId";
  v43 = 0;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>>::completionPromise((uint64_t *)&v39, &v44);
  v17 = v44;
  v44 = 0;
  v18 = (unsigned int *)a1[23];
  a1[23] = v17;
  if (v18)
  {
    v19 = v18 + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v18 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
    }
    v22 = v44;
    v44 = 0;
    if (v22)
    {
      v23 = v22 + 2;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v22 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
      }
    }
  }
  v26 = v40;
  if (v40)
  {
    v40 = 0;
    v45 = v26;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle((uint64_t)v39, &v45, (WTF::Logger::LogSiteIdentifier *)&v41);
    v27 = (unsigned int *)v45;
    v45 = 0;
    if (v27)
    {
      v28 = v27 + 2;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v27 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
      }
    }
    v31 = (unsigned int *)v40;
    v40 = 0;
    if (v31)
    {
      v32 = v31 + 2;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v31 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
      }
    }
  }
  else
  {
    v40 = 0;
  }
  result = v39;
  v39 = 0;
  if (result)
  {
    v36 = result + 2;
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

char *WebCore::SourceBufferPrivate::didReceiveSample(uint64_t a1, WebCore::MediaSample **a2)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;
  uint64_t v12;
  WebCore::MediaSample **v13;
  WebCore::MediaSample *v14;
  _QWORD v15[4];

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v5 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v8 = v7;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v15[0] = v6;
  v15[1] = v8;
  v15[2] = "didReceiveSample";
  v15[3] = v9;
  if (*(_BYTE *)(v4 + 12))
  {
    if (*v5 && v5[16] >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MediaSample>((uint64_t)v5, 4u, (WTF::Logger::LogSiteIdentifier *)v15, *a2);
  }
  result = (char *)(a1 + 168);
  v12 = *(unsigned int *)(a1 + 180);
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 176))
  {
    result = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v12 + 1, (unint64_t)a2);
    a2 = (WebCore::MediaSample **)result;
    v12 = *(unsigned int *)(a1 + 180);
    v13 = (WebCore::MediaSample **)(*(_QWORD *)(a1 + 168) + 8 * v12);
  }
  else
  {
    v13 = (WebCore::MediaSample **)(*(_QWORD *)result + 8 * v12);
  }
  v14 = *a2;
  *a2 = 0;
  *v13 = v14;
  *(_DWORD *)(a1 + 180) = v12 + 1;
  return result;
}

unsigned int *WebCore::SourceBufferPrivate::append@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned __int8 *v34;
  uint64_t *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  int v57;
  uint64_t v58;
  WTF::NativePromiseBase *v59;
  uint64_t v60;
  _QWORD *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  void *v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  WTF::NativePromiseBase *v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  void *v117;
  WTF::Lock *v118;
  uint64_t v120;
  uint64_t v121;
  int v122;
  unsigned __int8 *v123;
  uint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int *result;
  unsigned int *v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  int v132;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  WTF::Lock *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140[2];
  __int128 v141;
  __int128 v142;
  const char *v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int *v146;
  __int128 v147;
  const char *v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  const char *v152;
  uint64_t v153;
  unsigned int *v154;
  WTF::NativePromiseBase *v155[2];

  v5 = a1[18];
  v6 = a1[4];
  v7 = a1[1];
  if (!v7)
  {
    v9 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v7);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v7 + 24))
  {
    ++*(_QWORD *)(v7 + 16);
    v9 = v7;
  }
  else
  {
    v9 = 0;
  }
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_13:
  v11 = *a2;
  *a2 = 0;
  v12 = a1[20];
  v140[0] = 0;
  v140[1] = v12;
  v136 = 0uLL;
  v137 = 0;
  v138 = 0;
  v139 = a1;
  *(_QWORD *)&v151 = a1;
  v152 = (const char *)v12;
  v13 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v14 = off_1E340F898;
  v14[1] = v9;
  v150 = 0uLL;
  v14[2] = a1;
  v14[3] = a1;
  *((_QWORD *)&v151 + 1) = 0;
  v14[4] = v11;
  v14[5] = v12;
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 16) = v6;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = "append";
  *(_QWORD *)(v13 + 48) = 0;
  *(_WORD *)(v13 + 56) = 0;
  *(_QWORD *)v13 = &off_1E340F8C0;
  v16 = (unsigned int *)(v5 + 8);
  *(_QWORD *)(v13 + 64) = 0;
  *(_QWORD *)(v13 + 72) = v14;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *(_QWORD *)&v141 = v5;
  *((_QWORD *)&v141 + 1) = v13;
  v142 = v136;
  v143 = "append";
  v144 = 0;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v151 + 1, v15);
  v19 = v150;
  *(_QWORD *)&v150 = 0;
  if (v19)
  {
    if (__ldaxr((unsigned __int8 *)v19))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v19))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v19);
LABEL_20:
    v21 = *(_QWORD *)(v19 + 16) - 1;
    *(_QWORD *)(v19 + 16) = v21;
    if (!v21)
    {
      v22 = *(_QWORD *)(v19 + 8);
      v23 = __ldxr((unsigned __int8 *)v19);
      if (v23 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v19))
        {
          if (v22)
            goto LABEL_28;
LABEL_27:
          WTF::fastFree((WTF *)v19, v18);
          goto LABEL_28;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v19);
      if (v22)
        goto LABEL_28;
      goto LABEL_27;
    }
    v131 = __ldxr((unsigned __int8 *)v19);
    if (v131 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v19))
        goto LABEL_28;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
  }
LABEL_28:
  v24 = a1[4];
  v25 = a1[1];
  if (!v25)
  {
    v27 = 0;
    goto LABEL_40;
  }
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_33;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_33:
  if (*(_QWORD *)(v25 + 24))
  {
    ++*(_QWORD *)(v25 + 16);
    v27 = v25;
  }
  else
  {
    v27 = 0;
  }
  v28 = __ldxr((unsigned __int8 *)v25);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_39;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_39:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_40:
  v135 = 0uLL;
  v150 = 0uLL;
  *(_QWORD *)&v151 = "<completion promise>";
  *((_QWORD *)&v151 + 1) = 0;
  v29 = WTF::fastMalloc((WTF *)0x28);
  v31 = *(unsigned int **)WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>(v29, 0, &v150);
  if (v31)
  {
    v32 = v31 + 2;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
  }
  v34 = (unsigned __int8 *)(*((_QWORD *)&v141 + 1) + 57);
  if (__ldaxr((unsigned __int8 *)(*((_QWORD *)&v141 + 1) + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v34))
  {
    goto LABEL_47;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_47:
  v36 = *(uint64_t **)(*((_QWORD *)&v141 + 1) + 64);
  *(_QWORD *)(*((_QWORD *)&v141 + 1) + 64) = v29;
  if (v36)
  {
    if (*v36)
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(*v36);
      v37 = (unsigned int *)*v36;
      *v36 = 0;
      if (v37)
      {
        v38 = v37 + 2;
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v37 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 16))(v37);
        }
      }
    }
    else
    {
      *v36 = 0;
    }
    WTF::fastFree((WTF *)v36, v30);
  }
  v41 = __ldxr(v34);
  if (v41 == 1)
  {
    if (!__stlxr(0, v34))
      goto LABEL_61;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_61:
  v42 = *((_QWORD *)&v141 + 1);
  *((_QWORD *)&v141 + 1) = 0;
  *(_QWORD *)&v150 = v42;
  WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::maybeSettle(v141, (WTF::NativePromiseBase **)&v150, (WTF::Logger::LogSiteIdentifier *)&v142);
  v43 = (unsigned int *)v150;
  *(_QWORD *)&v150 = 0;
  if (v43)
  {
    v44 = v43 + 2;
    do
    {
      v45 = __ldaxr(v44);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v44));
    if (!v46)
    {
      atomic_store(1u, v43 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 8))(v43);
    }
  }
  v47 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
  v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v48 = &off_1E340F8F0;
  v48[1] = v27;
  v48[2] = a1;
  v48[3] = a1;
  *(_DWORD *)(v47 + 8) = 1;
  *(_QWORD *)(v47 + 16) = v24;
  *(_QWORD *)(v47 + 24) = 0;
  *(_QWORD *)(v47 + 32) = 0;
  *(_QWORD *)(v47 + 40) = "append";
  *(_QWORD *)(v47 + 48) = 0;
  *(_WORD *)(v47 + 56) = 0;
  *(_QWORD *)v47 = &off_1E340F940;
  v49 = v31 + 2;
  *(_QWORD *)(v47 + 64) = 0;
  *(_QWORD *)(v47 + 72) = v48;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 + 1, v49));
  v145 = v31;
  v146 = (unsigned int *)v47;
  v147 = v135;
  v148 = "append";
  v149 = 0;
  if (v31)
  {
    do
    {
      v51 = __ldaxr(v49);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v49));
    if (!v52)
    {
      atomic_store(1u, v31 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 16))(v31);
    }
  }
  v53 = a1[4];
  v54 = a1[1];
  if (!v54)
  {
    v56 = 0;
    goto LABEL_84;
  }
  if (__ldaxr((unsigned __int8 *)v54))
  {
    __clrex();
LABEL_76:
    MEMORY[0x19AEA534C](v54);
    goto LABEL_77;
  }
  if (__stxr(1u, (unsigned __int8 *)v54))
    goto LABEL_76;
LABEL_77:
  if (*(_QWORD *)(v54 + 24))
  {
    ++*(_QWORD *)(v54 + 16);
    v56 = v54;
  }
  else
  {
    v56 = 0;
  }
  v57 = __ldxr((unsigned __int8 *)v54);
  if (v57 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v54))
      goto LABEL_84;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v54);
LABEL_84:
  v58 = a1[20];
  v134 = 0uLL;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>>::completionPromise((uint64_t *)v155, (uint64_t *)&v145);
  v59 = v155[0];
  v60 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v53 + 32))(v53);
  v61 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v61 = &off_1E340F970;
  v61[1] = v56;
  v61[2] = a1;
  v61[3] = a1;
  v61[4] = v58;
  *(_DWORD *)(v60 + 8) = 1;
  *(_QWORD *)(v60 + 16) = v53;
  *(_QWORD *)(v60 + 24) = 0;
  *(_QWORD *)(v60 + 32) = 0;
  *(_QWORD *)(v60 + 40) = "append";
  *(_QWORD *)(v60 + 48) = 0;
  *(_WORD *)(v60 + 56) = 0;
  *(_QWORD *)v60 = &off_1E340F6E0;
  v62 = (unsigned int *)((char *)v59 + 8);
  *(_QWORD *)(v60 + 64) = 0;
  *(_QWORD *)(v60 + 72) = v61;
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v63 + 1, v62));
  *(_QWORD *)&v150 = v59;
  *((_QWORD *)&v150 + 1) = v60;
  v151 = v134;
  v152 = "append";
  v153 = 0;
  v64 = (unsigned int *)v155[0];
  v155[0] = 0;
  if (v64)
  {
    v65 = v64 + 2;
    do
    {
      v66 = __ldaxr(v65);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v65));
    if (!v67)
    {
      atomic_store(1u, v64 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 16))(v64);
    }
  }
  WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>>::completionPromise((uint64_t *)&v154, (uint64_t *)&v150);
  v69 = (uint64_t)v154;
  v154 = 0;
  v70 = (unsigned int *)a1[18];
  a1[18] = v69;
  if (v70)
  {
    v71 = v70 + 2;
    do
    {
      v72 = __ldaxr(v71);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, v71));
    if (!v73)
    {
      atomic_store(1u, v70 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 16))(v70);
    }
    v74 = v154;
    v154 = 0;
    if (v74)
    {
      v75 = v74 + 2;
      do
      {
        v76 = __ldaxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      if (!v77)
      {
        atomic_store(1u, v74 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v74 + 16))(v74);
      }
    }
  }
  v78 = (WTF::NativePromiseBase *)*((_QWORD *)&v150 + 1);
  if (*((_QWORD *)&v150 + 1))
  {
    *((_QWORD *)&v150 + 1) = 0;
    v155[0] = v78;
    WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::maybeSettle(v150, v155, (WTF::Logger::LogSiteIdentifier *)&v151);
    v79 = (unsigned int *)v155[0];
    v155[0] = 0;
    if (v79)
    {
      v80 = v79 + 2;
      do
      {
        v81 = __ldaxr(v80);
        v82 = v81 - 1;
      }
      while (__stlxr(v82, v80));
      if (!v82)
      {
        atomic_store(1u, v79 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v79 + 8))(v79);
      }
    }
    v83 = (unsigned int *)*((_QWORD *)&v150 + 1);
    *((_QWORD *)&v150 + 1) = 0;
    if (v83)
    {
      v84 = v83 + 2;
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        atomic_store(1u, v83 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v83 + 8))(v83);
      }
    }
  }
  else
  {
    *((_QWORD *)&v150 + 1) = 0;
  }
  v87 = (unsigned int *)v150;
  *(_QWORD *)&v150 = 0;
  if (v87)
  {
    v88 = v87 + 2;
    do
    {
      v89 = __ldaxr(v88);
      v90 = v89 - 1;
    }
    while (__stlxr(v90, v88));
    if (!v90)
    {
      atomic_store(1u, v87 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v87 + 16))(v87);
    }
  }
  v91 = v146;
  if (v146)
  {
    v146 = 0;
    *(_QWORD *)&v134 = v91;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle((uint64_t)v145, (WTF::NativePromiseBase **)&v134, (WTF::Logger::LogSiteIdentifier *)&v147);
    v92 = (unsigned int *)v134;
    *(_QWORD *)&v134 = 0;
    if (v92)
    {
      v93 = v92 + 2;
      do
      {
        v94 = __ldaxr(v93);
        v95 = v94 - 1;
      }
      while (__stlxr(v95, v93));
      if (!v95)
      {
        atomic_store(1u, v92 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v92 + 8))(v92);
      }
    }
    v96 = v146;
    v146 = 0;
    if (v96)
    {
      v97 = v96 + 2;
      do
      {
        v98 = __ldaxr(v97);
        v99 = v98 - 1;
      }
      while (__stlxr(v99, v97));
      if (!v99)
      {
        atomic_store(1u, v96 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v96 + 8))(v96);
      }
    }
  }
  else
  {
    v146 = 0;
  }
  v100 = v145;
  v145 = 0;
  if (v100)
  {
    v101 = v100 + 2;
    do
    {
      v102 = __ldaxr(v101);
      v103 = v102 - 1;
    }
    while (__stlxr(v103, v101));
    if (!v103)
    {
      atomic_store(1u, v100 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v100 + 16))(v100);
    }
  }
  v104 = *((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    *((_QWORD *)&v141 + 1) = 0;
    *(_QWORD *)&v135 = v104;
    WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::maybeSettle(v141, (WTF::NativePromiseBase **)&v135, (WTF::Logger::LogSiteIdentifier *)&v142);
    v105 = (unsigned int *)v135;
    *(_QWORD *)&v135 = 0;
    if (v105)
    {
      v106 = v105 + 2;
      do
      {
        v107 = __ldaxr(v106);
        v108 = v107 - 1;
      }
      while (__stlxr(v108, v106));
      if (!v108)
      {
        atomic_store(1u, v105 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v105 + 8))(v105);
      }
    }
    v109 = (unsigned int *)*((_QWORD *)&v141 + 1);
    *((_QWORD *)&v141 + 1) = 0;
    if (v109)
    {
      v110 = v109 + 2;
      do
      {
        v111 = __ldaxr(v110);
        v112 = v111 - 1;
      }
      while (__stlxr(v112, v110));
      if (!v112)
      {
        atomic_store(1u, v109 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v109 + 8))(v109);
      }
    }
  }
  else
  {
    *((_QWORD *)&v141 + 1) = 0;
  }
  v113 = (unsigned int *)v141;
  *(_QWORD *)&v141 = 0;
  if (v113)
  {
    v114 = v113 + 2;
    do
    {
      v115 = __ldaxr(v114);
      v116 = v115 - 1;
    }
    while (__stlxr(v116, v114));
    if (!v116)
    {
      atomic_store(1u, v113 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v113 + 16))(v113);
    }
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v140, v68);
  v118 = v137;
  v137 = 0;
  if (v118)
  {
    if (__ldaxr((unsigned __int8 *)v118))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v118))
    {
      goto LABEL_157;
    }
    MEMORY[0x19AEA534C](v118);
LABEL_157:
    v120 = *((_QWORD *)v118 + 2) - 1;
    *((_QWORD *)v118 + 2) = v120;
    if (!v120)
    {
      v121 = *((_QWORD *)v118 + 1);
      v122 = __ldxr((unsigned __int8 *)v118);
      if (v122 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v118))
        {
          if (v121)
            goto LABEL_165;
LABEL_164:
          WTF::fastFree(v118, v117);
          goto LABEL_165;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(v118);
      if (v121)
        goto LABEL_165;
      goto LABEL_164;
    }
    v132 = __ldxr((unsigned __int8 *)v118);
    if (v132 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v118))
        goto LABEL_165;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v118);
  }
LABEL_165:
  v123 = (unsigned __int8 *)a1[18];
  v141 = 0uLL;
  *(_QWORD *)&v142 = "operator Ref";
  *((_QWORD *)&v142 + 1) = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v150, 0, &v141);
  v124 = v150;
  if ((_QWORD)v150)
  {
    v125 = (unsigned int *)(v150 + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 + 1, v125));
  }
  *a3 = v124;
  v145 = 0;
  v146 = 0;
  *(_QWORD *)&v147 = "convert";
  *((_QWORD *)&v147 + 1) = 0;
  WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::chainTo<void,WebCore::PlatformMediaError,0u>(v123, (uint64_t)&v150, (WTF::Logger::LogSiteIdentifier *)&v145);
  result = (unsigned int *)v150;
  if ((_QWORD)v150)
  {
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(v150);
    result = (unsigned int *)v150;
    *(_QWORD *)&v150 = 0;
    if (result)
    {
      v128 = result + 2;
      do
      {
        v129 = __ldaxr(v128);
        v130 = v129 - 1;
      }
      while (__stlxr(v130, v128));
      if (!v130)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
      }
    }
  }
  return result;
}

uint64_t *WebCore::SourceBufferPrivate::processPendingMediaSamples(void)::$_0::~$_0(uint64_t *a1, void *a2)
{
  uint64_t v3;
  unsigned int **v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v17;

  v3 = *((unsigned int *)a1 + 9);
  if ((_DWORD)v3)
  {
    v4 = (unsigned int **)a1[3];
    v5 = &v4[v3];
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        v7 = v6 + 2;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v6 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
  v10 = (WTF *)a1[3];
  if (v10)
  {
    a1[3] = 0;
    *((_DWORD *)a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = *a1;
  *a1 = 0;
  if (!v11)
    return a1;
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_16:
  v13 = *(_QWORD *)(v11 + 16) - 1;
  *(_QWORD *)(v11 + 16) = v13;
  if (v13)
  {
    v17 = __ldxr((unsigned __int8 *)v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    return a1;
  }
  v14 = *(_QWORD *)(v11 + 8);
  v15 = __ldxr((unsigned __int8 *)v11);
  if (v15 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v11))
    {
      if (!v14)
        goto LABEL_23;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v11);
  if (!v14)
LABEL_23:
    WTF::fastFree((WTF *)v11, a2);
  return a1;
}

_QWORD *std::map<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,WTF::FastAllocator<std::pair<std::pair<WTF::MediaTime,WTF::MediaTime> const,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::insert[abi:sn180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__tree_node<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,void *> *,long>>>(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[9];

  if (a2 != a3)
  {
    v22[7] = v3;
    v22[8] = v4;
    v6 = a2;
    v7 = (_QWORD **)result;
    v8 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::__find_equal<std::pair<WTF::MediaTime,WTF::MediaTime>>(v7, v8, v22, &v21, (WTF::MediaTime *)(v6 + 4));
      if (!*result)
      {
        v9 = result;
        v10 = WTF::fastMalloc((WTF *)0x48);
        v11 = v10;
        v12 = *((_OWORD *)v6 + 3);
        *(_OWORD *)(v10 + 32) = *((_OWORD *)v6 + 2);
        *(_OWORD *)(v10 + 48) = v12;
        v13 = v6[8];
        v14 = (unsigned int *)(v13 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        *(_QWORD *)(v10 + 64) = v13;
        v16 = v22[0];
        *(_QWORD *)v10 = 0;
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 16) = v16;
        *v9 = v10;
        v17 = (_QWORD *)**v7;
        if (v17)
        {
          *v7 = v17;
          v11 = *v9;
        }
        result = (_QWORD *)std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v7[1], v11);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
      }
      v18 = (_QWORD *)v6[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v6[2];
          v20 = *v19 == (_QWORD)v6;
          v6 = v19;
        }
        while (!v20);
      }
      v6 = v19;
    }
    while (v19 != a3);
  }
  return result;
}

uint64_t WebCore::SourceBufferPrivate::abort(uint64_t this)
{
  ++*(_QWORD *)(this + 160);
  return this;
}

unsigned int *WebCore::SourceBufferPrivate::resetParserState(WebCore::SourceBufferPrivate *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF::NativePromiseBase *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *result;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  WTF::NativePromiseBase *v35;
  __int128 v36;
  const char *v37;
  uint64_t v38;
  unsigned int *v39;
  WTF::NativePromiseBase *v40;

  v2 = *((_QWORD *)this + 18);
  v3 = *((_QWORD *)this + 4);
  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = &off_1E340F9E8;
  v9[1] = v6;
  v9[2] = this;
  v9[3] = this;
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = v3;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = "resetParserState";
  *(_QWORD *)(v8 + 48) = 0;
  *(_WORD *)(v8 + 56) = 0;
  *(_QWORD *)v8 = &off_1E340F6E0;
  v10 = (unsigned int *)(v2 + 8);
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = v9;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v34 = (unsigned int *)v2;
  v35 = (WTF::NativePromiseBase *)v8;
  v36 = 0uLL;
  v37 = "resetParserState";
  v38 = 0;
  WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>>::completionPromise((uint64_t *)&v39, (uint64_t *)&v34);
  v12 = (uint64_t)v39;
  v39 = 0;
  v13 = (unsigned int *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v12;
  if (v13)
  {
    v14 = v13 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
    }
    v17 = v39;
    v39 = 0;
    if (v17)
    {
      v18 = v17 + 2;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v17 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 16))(v17);
      }
    }
  }
  v21 = v35;
  if (v35)
  {
    v35 = 0;
    v40 = v21;
    WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::maybeSettle((uint64_t)v34, &v40, (WTF::Logger::LogSiteIdentifier *)&v36);
    v22 = (unsigned int *)v40;
    v40 = 0;
    if (v22)
    {
      v23 = v22 + 2;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v22 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
      }
    }
    v26 = (unsigned int *)v35;
    v35 = 0;
    if (v26)
    {
      v27 = v26 + 2;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v26 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
      }
    }
  }
  else
  {
    v35 = 0;
  }
  result = v34;
  v34 = 0;
  if (result)
  {
    v31 = result + 2;
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

unsigned int *WebCore::SourceBufferPrivate::memoryPressure(WebCore::SourceBufferPrivate *this, WTF::NativePromiseBase **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::NativePromiseBase *v7;
  WTF::NativePromiseBase *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF::NativePromiseBase *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *result;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  WTF::NativePromiseBase *v43;
  __int128 v44;
  const char *v45;
  uint64_t v46;
  unsigned int *v47;
  WTF::NativePromiseBase *v48[3];

  v48[2] = *(WTF::NativePromiseBase **)MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 16))(this);
  v5 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 32))(this);
  v6 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 24))(this);
  v8 = v7;
  v9 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 40))(this);
  v42 = (unsigned int *)v6;
  v43 = v8;
  *(_QWORD *)&v44 = "memoryPressure";
  *((_QWORD *)&v44 + 1) = v9;
  (*(void (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 440))(this);
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],BOOL>(v5, 0, (WTF::Logger::LogSiteIdentifier *)&v42, "isActive = ");
  v10 = *((_QWORD *)this + 18);
  v11 = *((_QWORD *)this + 4);
  v12 = *((_QWORD *)this + 1);
  if (!v12)
  {
    v14 = 0;
    goto LABEL_15;
  }
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
LABEL_7:
    MEMORY[0x19AEA534C](v12);
    goto LABEL_8;
  }
  if (__stxr(1u, (unsigned __int8 *)v12))
    goto LABEL_7;
LABEL_8:
  if (*(_QWORD *)(v12 + 24))
  {
    ++*(_QWORD *)(v12 + 16);
    v14 = v12;
  }
  else
  {
    v14 = 0;
  }
  v15 = __ldxr((unsigned __int8 *)v12);
  if (v15 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v12))
      goto LABEL_15;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_15:
  v48[0] = *a2;
  *(WTF::NativePromiseBase **)((char *)v48 + 5) = *(WTF::NativePromiseBase **)((char *)a2 + 5);
  v16 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  v17 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v17 = &off_1E340FA10;
  *(_QWORD *)(v17 + 8) = v14;
  *(_QWORD *)(v17 + 16) = this;
  *(_QWORD *)(v17 + 24) = this;
  *(WTF::NativePromiseBase **)(v17 + 32) = v48[0];
  *(WTF::NativePromiseBase **)(v17 + 37) = *(WTF::NativePromiseBase **)((char *)v48 + 5);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = v11;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = "memoryPressure";
  *(_QWORD *)(v16 + 48) = 0;
  *(_WORD *)(v16 + 56) = 0;
  *(_QWORD *)v16 = &off_1E340F6E0;
  v18 = (unsigned int *)(v10 + 8);
  *(_QWORD *)(v16 + 64) = 0;
  *(_QWORD *)(v16 + 72) = v17;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  v42 = (unsigned int *)v10;
  v43 = (WTF::NativePromiseBase *)v16;
  v44 = 0uLL;
  v45 = "memoryPressure";
  v46 = 0;
  WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>>::completionPromise((uint64_t *)&v47, (uint64_t *)&v42);
  v20 = (uint64_t)v47;
  v47 = 0;
  v21 = (unsigned int *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v20;
  if (v21)
  {
    v22 = v21 + 2;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v21 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
    }
    v25 = v47;
    v47 = 0;
    if (v25)
    {
      v26 = v25 + 2;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v25 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 16))(v25);
      }
    }
  }
  v29 = v43;
  if (v43)
  {
    v43 = 0;
    v48[0] = v29;
    WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::maybeSettle((uint64_t)v42, v48, (WTF::Logger::LogSiteIdentifier *)&v44);
    v30 = (unsigned int *)v48[0];
    v48[0] = 0;
    if (v30)
    {
      v31 = v30 + 2;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v30 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
      }
    }
    v34 = (unsigned int *)v43;
    v43 = 0;
    if (v34)
    {
      v35 = v34 + 2;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        atomic_store(1u, v34 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
      }
    }
  }
  else
  {
    v43 = 0;
  }
  result = v42;
  v42 = 0;
  if (result)
  {
    v39 = result + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

char **WebCore::SourceBufferPrivate::setActive(WebCore::SourceBufferPrivate *this, char a2)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char **result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  _QWORD v28[4];
  char v29;

  v2 = a2;
  v29 = a2;
  v4 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 16))(this);
  v5 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 32))(this);
  v6 = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 24))(this);
  v8 = v7;
  result = (char **)(*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 40))(this);
  v28[0] = v6;
  v28[1] = v8;
  v28[2] = "setActive";
  v28[3] = result;
  if (*(_BYTE *)(v4 + 12))
  {
    result = (char **)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>(v5, 0, (WTF::Logger::LogSiteIdentifier *)v28);
    v2 = v29;
  }
  *((_BYTE *)this + 74) = v2;
  v11 = *((_QWORD *)this + 2);
  if (v11)
  {
    v12 = *((_QWORD *)this + 3);
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_8;
    }
    result = (char **)MEMORY[0x19AEA534C](v11);
LABEL_8:
    if (*(_QWORD *)(v11 + 24))
      ++*(_QWORD *)(v11 + 8);
    else
      v12 = 0;
    v14 = __ldxr((unsigned __int8 *)v11);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
        if (!v12)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      __clrex();
    }
    result = (char **)WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (!v12)
      return result;
LABEL_17:
    result = (char **)(v12 + 32);
    v15 = *(unsigned int *)(v12 + 44);
    if ((_DWORD)v15)
    {
      v16 = *result;
      v17 = 8 * v15 - 8;
      while (*(WebCore::SourceBufferPrivate **)v16 != this)
      {
        v16 += 8;
        v17 -= 8;
        if (v17 == -8)
          goto LABEL_21;
      }
      if (v29)
      {
LABEL_29:
        v20 = *(_QWORD *)(v12 + 8);
        if (__ldaxr((unsigned __int8 *)v20))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v20))
        {
          goto LABEL_33;
        }
        result = (char **)MEMORY[0x19AEA534C](v20);
LABEL_33:
        v22 = *(_QWORD *)(v20 + 8);
        v23 = v22 - 1;
        *(_QWORD *)(v20 + 8) = v22 - 1;
        if (v22 == 1)
        {
          v27 = *(_QWORD *)(v20 + 16);
          v24 = *(_QWORD *)(v20 + 24);
          *(_QWORD *)(v20 + 24) = 0;
          v25 = v27 != 0;
        }
        else
        {
          v24 = 0;
          v25 = 1;
        }
        v26 = __ldxr((unsigned __int8 *)v20);
        if (v26 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v20))
          {
            if (v23)
              return result;
LABEL_41:
            if (v24)
              result = (char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
            if (!v25)
              return (char **)WTF::fastFree((WTF *)v20, v10);
            return result;
          }
        }
        else
        {
          __clrex();
        }
        result = (char **)WTF::Lock::unlockSlow((WTF::Lock *)v20);
        if (v23)
          return result;
        goto LABEL_41;
      }
      memmove(v16, v16 + 8, v17);
      v19 = *(_DWORD *)(v12 + 44) - 1;
    }
    else
    {
LABEL_21:
      if (!v29)
        goto LABEL_29;
      v28[0] = this;
      if ((_DWORD)v15 == *(_DWORD *)(v12 + 40))
      {
        v18 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v15 + 1, (unint64_t)v28);
        v15 = *(unsigned int *)(v12 + 44);
        *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * v15) = *(_QWORD *)v18;
      }
      else
      {
        *(_QWORD *)&(*result)[8 * v15] = this;
      }
      v19 = v15 + 1;
    }
    *(_DWORD *)(v12 + 44) = v19;
    result = (char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
    goto LABEL_29;
  }
  return result;
}

uint64_t WebCore::SourceImage::SourceImage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal_0[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 8) = v3;
  }
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  return a1;
}

{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal_0[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 8) = v3;
  }
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  return a1;
}

uint64_t WebCore::SourceImage::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WebCore::SourceImage *v7;
  char v8;
  char *v9;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1
    || (v9 = &v8,
        v4 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11SourceImage15imageIdentifierEvE3__0JZNKS9_15imageIdentifierEvE3__1ZNKS9_15imageIdentifierEvE3__2EEEEEJRKNS0_6__implIJNS6_3RefINS8_11NativeImageENS6_12RawPtrTraitsISH_EENS6_21DefaultRefDerefTraitsISH_EEEENSG_INS8_11ImageBufferENSI_ISN_EENSK_ISN_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v9, a1), v5 = *(unsigned int *)(a2 + 8), (_DWORD)v5 == -1))
  {
    v7 = (WebCore::SourceImage *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::SourceImage::imageIdentifier(v7);
  }
  else
  {
    v9 = &v8;
    return v4 == ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11SourceImage15imageIdentifierEvE3__0JZNKS9_15imageIdentifierEvE3__1ZNKS9_15imageIdentifierEvE3__2EEEEEJRKNS0_6__implIJNS6_3RefINS8_11NativeImageENS6_12RawPtrTraitsISH_EENS6_21DefaultRefDerefTraitsISH_EEEENSG_INS8_11ImageBufferENSI_ISN_EENSK_ISN_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v9, a2);
  }
}

uint64_t WebCore::SourceImage::imageIdentifier(WebCore::SourceImage *this)
{
  uint64_t v1;
  WebCore::SourceImage *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 2);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::SourceImage *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::SourceImage::nativeImageIfExists(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebCore::SourceImage *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11SourceImage15imageIdentifierEvE3__0JZNKS9_15imageIdentifierEvE3__1ZNKS9_15imageIdentifierEvE3__2EEEEEJRKNS0_6__implIJNS6_3RefINS8_11NativeImageENS6_12RawPtrTraitsISH_EENS6_21DefaultRefDerefTraitsISH_EEEENSG_INS8_11ImageBufferENSI_ISN_EENSK_ISN_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, this);
  }
}

uint64_t WebCore::SourceImage::nativeImageIfExists(WebCore::SourceImage *this)
{
  if (*((_DWORD *)this + 2))
    return 0;
  else
    return *(_QWORD *)this;
}

uint64_t WebCore::SourceImage::nativeImage(WebCore::SourceImage *this)
{
  int v2;
  WebCore::SourceImage *v3;
  _QWORD *v4;
  uint64_t v5;
  int v7;
  void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL i;
  int v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  char v25;

  v2 = *((_DWORD *)this + 2);
  if (v2 == 1)
  {
    v3 = (WebCore::SourceImage *)((char *)this + 16);
    if (!*((_BYTE *)this + 32))
    {
      v4 = *(_QWORD **)this;
      v5 = *(_QWORD *)(*(_QWORD *)this + 8);
      if (__ldaxr((unsigned __int8 *)v5))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v5))
      {
        goto LABEL_8;
      }
      MEMORY[0x19AEA534C](v5);
LABEL_8:
      ++*(_QWORD *)(v5 + 8);
      v7 = __ldxr((unsigned __int8 *)v5);
      if (v7 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v5))
        {
LABEL_13:
          (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v4 + 56))(&v24, v4);
          v9 = v24;
          if (!v24)
            goto LABEL_22;
          v24 = 0;
          v21 = v9;
          v22 = 0;
          v23 = 1;
          v10 = *((unsigned __int8 *)this + 32);
          if (*((_BYTE *)this + 32))
          {
            std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__assign_alt[abi:sn180100]<0ul,WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>>((uint64_t)this + 16, (uint64_t *)this + 2, &v21);
            if (!v23 || (v10 = v22, v22 == -1))
            {
LABEL_20:
              v11 = v24;
              v24 = 0;
              if (v11)
                WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v11 + 8), v8);
LABEL_22:
              v12 = v4[1];
              if (__ldaxr((unsigned __int8 *)v12))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v12))
              {
LABEL_26:
                v14 = *(_QWORD *)(v12 + 8);
                v15 = v14 - 1;
                *(_QWORD *)(v12 + 8) = v14 - 1;
                if (v14 == 1)
                  goto LABEL_46;
                v16 = 0;
                for (i = 1; ; i = v20 != 0)
                {
                  v18 = __ldxr((unsigned __int8 *)v12);
                  if (v18 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)v12))
                    {
                      if (v15)
                        goto LABEL_37;
                      goto LABEL_34;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v12);
                  if (v15)
                    goto LABEL_37;
LABEL_34:
                  if (v16)
                    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
                  if (i)
                  {
LABEL_37:
                    if (!v9)
                      return 0;
                    goto LABEL_38;
                  }
                  WTF::fastFree((WTF *)v12, v8);
                  if (!v9)
                    return 0;
LABEL_38:
                  if (*((_BYTE *)this + 32))
                    goto LABEL_39;
                  __break(1u);
LABEL_46:
                  v20 = *(_QWORD *)(v12 + 16);
                  v16 = *(_QWORD *)(v12 + 24);
                  *(_QWORD *)(v12 + 24) = 0;
                }
              }
              MEMORY[0x19AEA534C](v12);
              goto LABEL_26;
            }
          }
          else
          {
            v21 = 0;
            *((_QWORD *)this + 2) = v9;
            *((_DWORD *)this + 6) = 0;
            *((_BYTE *)this + 32) = 1;
          }
          ((void (*)(char *, uint64_t *))off_1E340FA28[v10])(&v25, &v21);
          goto LABEL_20;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      goto LABEL_13;
    }
LABEL_39:
    v2 = *((_DWORD *)this + 6);
  }
  else
  {
    v3 = this;
  }
  if (v2)
    return 0;
  else
    return *(_QWORD *)v3;
}

uint64_t WebCore::SourceImage::imageBufferIfExists(WebCore::SourceImage *this)
{
  if (*((_DWORD *)this + 2) == 1)
    return *(_QWORD *)this;
  else
    return 0;
}

uint64_t WebCore::SourceImage::imageBuffer(WebCore::SourceImage *this)
{
  int v2;
  WebCore::SourceImage *v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  WebCore::GraphicsContext *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL i;
  int v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  float v37[2];
  float32x2_t v38;
  float v39;
  float v40;
  char v41;
  char **v42;

  v2 = *((_DWORD *)this + 2);
  if (v2)
  {
    v3 = this;
    goto LABEL_58;
  }
  v3 = (WebCore::SourceImage *)((char *)this + 16);
  if (!*((_BYTE *)this + 32))
  {
    v4 = *(_QWORD *)this;
    v5 = *(_QWORD *)(*(_QWORD *)this + 8);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_8:
    ++*(_QWORD *)(v5 + 8);
    v7 = __ldxr((unsigned __int8 *)v5);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
      {
LABEL_13:
        v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 48) + 24))(*(_QWORD *)(v4 + 48));
        v38 = 0;
        v39 = (float)(int)v8;
        v40 = (float)SHIDWORD(v8);
        v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 48) + 24))(*(_QWORD *)(v4 + 48));
        v37[0] = (float)(int)v9;
        v37[1] = (float)SHIDWORD(v9);
        v10 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
        if (v10 != -1)
        {
          v34 = &v41;
          v42 = &v34;
          std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v42, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
        }
        v34 = 0;
        v35 = 0;
        WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>(v37, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, (uint64_t *)&v42, 1.0);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v35 + 4));
        v12 = (uint64_t)v42;
        if (!v42)
        {
LABEL_39:
          v24 = *(_QWORD *)(v4 + 8);
          if (__ldaxr((unsigned __int8 *)v24))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v24))
          {
LABEL_43:
            v26 = *(_QWORD *)(v24 + 8);
            v27 = v26 - 1;
            *(_QWORD *)(v24 + 8) = v26 - 1;
            if (v26 == 1)
              goto LABEL_63;
            v28 = 0;
            for (i = 1; ; i = v32 != 0)
            {
              v30 = __ldxr((unsigned __int8 *)v24);
              if (v30 != 1)
                break;
              if (__stlxr(0, (unsigned __int8 *)v24))
                goto LABEL_49;
LABEL_50:
              if (!v27)
              {
                if (v28)
                  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
                if (!i)
                  WTF::fastFree((WTF *)v24, v11);
              }
              if (!v12)
                return 0;
              if (*((_BYTE *)this + 32))
                goto LABEL_57;
              __break(1u);
LABEL_63:
              v32 = *(_QWORD *)(v24 + 16);
              v28 = *(_QWORD *)(v24 + 24);
              *(_QWORD *)(v24 + 24) = 0;
            }
            __clrex();
LABEL_49:
            WTF::Lock::unlockSlow((WTF::Lock *)v24);
            goto LABEL_50;
          }
          MEMORY[0x19AEA534C](v24);
          goto LABEL_43;
        }
        v13 = (WebCore::GraphicsContext *)(*((uint64_t (**)(char **))*v42 + 2))(v42);
        WebCore::GraphicsContext::drawNativeImage(v13, v4, (uint64_t)&v38, &v38, 4641);
        v14 = (uint64_t)v42;
        v42 = 0;
        v34 = (char *)v14;
        LODWORD(v35) = 1;
        v36 = 1;
        if (*((_BYTE *)this + 32))
        {
          std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__assign_alt[abi:sn180100]<1ul,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>((uint64_t)this + 16, (uint64_t *)this + 2, (uint64_t *)&v34);
          if (!v36 || (v15 = v35, (_DWORD)v35 == -1))
          {
LABEL_22:
            v16 = (uint64_t)v42;
            v42 = 0;
            if (!v16)
              goto LABEL_39;
            v17 = *(_QWORD *)(v16 + 8);
            if (__ldaxr((unsigned __int8 *)v17))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v17))
            {
              goto LABEL_27;
            }
            MEMORY[0x19AEA534C](v17);
LABEL_27:
            v19 = *(_QWORD *)(v17 + 8);
            v20 = v19 - 1;
            *(_QWORD *)(v17 + 8) = v19 - 1;
            if (v19 == 1)
            {
              v33 = *(_QWORD *)(v17 + 16);
              v21 = *(_QWORD *)(v17 + 24);
              *(_QWORD *)(v17 + 24) = 0;
              v22 = v33 != 0;
            }
            else
            {
              v21 = 0;
              v22 = 1;
            }
            v23 = __ldxr((unsigned __int8 *)v17);
            if (v23 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v17))
              {
LABEL_34:
                if (!v20)
                {
                  if (v21)
                    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
                  if (!v22)
                    WTF::fastFree((WTF *)v17, v11);
                }
                goto LABEL_39;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v17);
            goto LABEL_34;
          }
        }
        else
        {
          v34 = 0;
          *((_QWORD *)this + 2) = v14;
          v15 = 1;
          *((_DWORD *)this + 6) = 1;
          *((_BYTE *)this + 32) = 1;
        }
        ((void (*)(float *, char **))off_1E340FA28[v15])(v37, &v34);
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    goto LABEL_13;
  }
LABEL_57:
  v2 = *((_DWORD *)this + 6);
LABEL_58:
  if (v2 == 1)
    return *(_QWORD *)v3;
  else
    return 0;
}

uint64_t WebCore::SourceImage::size(WebCore::SourceImage *this)
{
  uint64_t v1;
  WebCore::StringTruncator *v3;
  const WTF::String *v4;
  const WebCore::FontCascade *v5;
  float v6;
  char v7;
  char *v8;

  v1 = *((unsigned int *)this + 2);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::StringTruncator *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::StringTruncator::centerTruncate(v3, v4, v6, v5);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(char **, WebCore::SourceImage *))off_1E340FF30[v1])(&v8, this);
  }
}

void WebCore::StringTruncator::centerTruncate(WebCore::StringTruncator *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::truncateString(a2, (uint64_t)this);
}

{
  WebCore::truncateString(a2, (uint64_t)this);
}

void WebCore::truncateString(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t *, uint64_t);
  float *v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  float v18;
  uint64_t *v19;
  float v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  float v26;
  float v27;
  float v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  float v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  float v40;
  int v41;
  unsigned int (*v42)(uint64_t *, uint64_t);
  uint64_t v43;
  int v44;
  char v45;
  char __dst[4104];

  v8 = (uint64_t *)MEMORY[0x1E0C80A78](a1, a2);
  v11 = *v2;
  if (!*v2)
    goto LABEL_27;
  v12 = *(unsigned int *)(v11 + 4);
  if (!(_DWORD)v12)
  {
LABEL_26:
    *(_DWORD *)v11 += 2;
LABEL_27:
    *v8 = v11;
    return;
  }
  v13 = v7;
  v14 = v10;
  v15 = v6;
  v16 = v5;
  v17 = v3;
  v18 = v9;
  v19 = v2;
  if (v5)
    *v5 = 0.0;
  v42 = v4;
  if ((v6 & 1) != 0)
  {
    v20 = WebCore::stringWidth(v3, (WTF::StringImpl *)&WTF::Unicode::horizontalEllipsis, 1);
    v11 = *v19;
    if (!*v19)
    {
      v12 = 0;
      v43 = 0;
      LOBYTE(v25) = 1;
      goto LABEL_16;
    }
    v12 = *(unsigned int *)(v11 + 4);
  }
  else
  {
    v20 = v10;
  }
  if (v12 <= 0x800)
  {
    v24 = *(unsigned __int8 *)(v11 + 16);
    v43 = *(_QWORD *)(v11 + 8);
    v25 = (v24 >> 2) & 1;
LABEL_16:
    v44 = v12;
    v45 = v25;
    WTF::StringView::getCharacters<char16_t>(&v43, __dst);
    v23 = v12;
    LODWORD(v21) = v12;
    goto LABEL_17;
  }
  if ((_DWORD)v15)
    LODWORD(v21) = 2047;
  else
    LODWORD(v21) = 0;
  v22 = WebCore::centerTruncateToBuffer(v19, v12, v21, __dst, 0x800uLL, v15);
  if (v22 >= 0x801)
    goto LABEL_66;
  v23 = v22;
LABEL_17:
  v26 = WebCore::stringWidth(v17, (WTF::StringImpl *)__dst, v23);
  v27 = -0.0;
  if (v13)
    v28 = v14;
  else
    v28 = -0.0;
  if (!(_DWORD)v15)
    v27 = v28;
  v29 = v27 + v26;
  if ((float)((float)(v27 + v26) - v18) < 0.0001)
  {
    if (v16)
      *v16 = v29;
    v11 = *v19;
    if (!*v19)
      goto LABEL_27;
    goto LABEL_26;
  }
  v30 = v20 >= v18;
  if (v20 < v18)
    v31 = v21;
  else
    v31 = 2;
  if (v20 < v18)
    v32 = 1;
  else
    v32 = 2;
  if (v32 >= v31)
  {
LABEL_59:
    if (v30 <= 1)
      v41 = 1;
    else
      v41 = v30;
    if ((_DWORD)v21 == v41 || v42(v19, v12) < 0x801)
    {
      WTF::String::String();
      return;
    }
  }
  else
  {
    if ((_DWORD)v15)
      v14 = -0.0;
    if (v16)
    {
      while (1)
      {
        v33 = (float)((float)((float)(v31 - v30) / (float)(v29 - v20)) * v18);
        v34 = v31 - 1;
        if (v31 > v33)
          v34 = (float)((float)((float)(v31 - v30) / (float)(v29 - v20)) * v18);
        v21 = v30 >= v33 ? v32 : v34;
        v35 = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t, char *, uint64_t, uint64_t))v42)(v19, v12, v21, __dst, 2048, v15);
        if (v35 >= 0x801)
          break;
        v36 = v14 + WebCore::stringWidth(v17, (WTF::StringImpl *)__dst, v35);
        if (v36 <= v18)
        {
          *v16 = v36;
          v30 = v21;
          v20 = v36;
        }
        else
        {
          v31 = v21;
          v29 = v36;
        }
        v32 = v30 + 1;
        if (v30 + 1 >= v31)
          goto LABEL_59;
      }
    }
    else
    {
      while (1)
      {
        v37 = (float)((float)((float)(v31 - v30) / (float)(v29 - v20)) * v18);
        v38 = v31 - 1;
        if (v31 > v37)
          v38 = (float)((float)((float)(v31 - v30) / (float)(v29 - v20)) * v18);
        v21 = v30 >= v37 ? v32 : v38;
        v39 = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t, char *, uint64_t, uint64_t))v42)(v19, v12, v21, __dst, 2048, v15);
        if (v39 > 0x800)
          break;
        v40 = v14 + WebCore::stringWidth(v17, (WTF::StringImpl *)__dst, v39);
        if (v40 <= v18)
        {
          v30 = v21;
          v20 = v40;
        }
        else
        {
          v31 = v21;
          v29 = v40;
        }
        v32 = v30 + 1;
        if (v30 + 1 >= v31)
          goto LABEL_59;
      }
    }
  }
LABEL_66:
  __break(1u);
}

uint64_t WebCore::centerTruncateToBuffer(uint64_t *a1, unsigned int a2, int a3, char *a4, unint64_t a5, int a6)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  const char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  const char *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  const char *v46;
  unint64_t v47;
  uint64_t v48;

  v11 = (a3 + 1) >> 1;
  WTF::NonSharedCharacterBreakIterator::NonSharedCharacterBreakIterator();
  v12 = ubrk_following();
  if (v12 == -1)
    v13 = a2;
  else
    v13 = v12;
  if (!ubrk_isBoundary() && (v11 = ubrk_preceding(), (_DWORD)v11 == -1))
  {
    v11 = 0;
    v14 = *a1;
    if (*a1)
      goto LABEL_20;
  }
  else
  {
    v14 = *a1;
    if (v11 >= 2 && v14)
    {
      v15 = (v11 - 1);
      v16 = *(_DWORD *)(v14 + 4);
      if (v16 <= v15)
      {
        v18 = 0;
      }
      else
      {
        v17 = *(_QWORD *)(v14 + 8);
        v18 = (*(_BYTE *)(v14 + 16) & 4) != 0 ? *(unsigned __int8 *)(v17 + v15) : *(unsigned __int16 *)(v17 + 2 * v15);
      }
      v19 = (v11 - 2);
      if ((_DWORD)v11 != 2 && v18 != 32 && v16 > v19)
      {
        v20 = *(_QWORD *)(v14 + 8);
        if ((*(_BYTE *)(v14 + 16) & 4) != 0)
          v21 = *(unsigned __int8 *)(v20 + v19);
        else
          v21 = *(unsigned __int16 *)(v20 + 2 * v19);
        if (v21 == 32)
          v11 = v15;
        else
          v11 = v11;
      }
    }
    if (v14)
    {
LABEL_20:
      v22 = v11;
      v11 = (_DWORD)v11 != 0;
      while (v22 >= 2)
      {
        if (*(_DWORD *)(v14 + 4) <= (v22 - 1))
        {
          v11 = v22;
          break;
        }
        --v22;
        v23 = *(_QWORD *)(v14 + 8);
        if ((*(_BYTE *)(v14 + 16) & 4) != 0)
          v24 = *(unsigned __int8 *)(v23 + v22);
        else
          v24 = *(unsigned __int16 *)(v23 + 2 * v22);
        if (v24 != 32)
        {
          v11 = (v22 + 1);
          break;
        }
      }
    }
  }
  v25 = a2 - v13;
  if (a2 - v13 < 2)
    goto LABEL_61;
  if (!v14)
    goto LABEL_84;
  LODWORD(v26) = *(_DWORD *)(v14 + 4);
  if (v26 <= v13)
    goto LABEL_88;
  v27 = *(_QWORD *)(v14 + 8);
  if ((*(_BYTE *)(v14 + 16) & 4) != 0)
    v28 = *(unsigned __int8 *)(v27 + v13);
  else
    v28 = *(unsigned __int16 *)(v27 + 2 * v13);
  while (1)
  {
    if (v25 >= 3 && v28 != 32)
    {
      v29 = (v13 + 1);
      if (v26 > v29)
      {
        v30 = *(const char **)(v14 + 8);
        if ((*(_BYTE *)(v14 + 16) & 4) != 0)
          v31 = v30[v29];
        else
          v31 = *(unsigned __int16 *)&v30[2 * v29];
        if (v31 == 32)
          LODWORD(v13) = v13 + 1;
        v25 = a2 - v13;
        if (a2 - v13 <= 1)
          goto LABEL_65;
      }
    }
    v32 = v13;
    v33 = a2 - 1;
    v34 = v13 <= v26 ? v26 : v13;
    v35 = a2 - v13;
    LODWORD(v13) = v34;
    while (v34 != v32)
    {
      v30 = *(const char **)(v14 + 8);
      if ((*(_BYTE *)(v14 + 16) & 4) != 0)
        v36 = v30[v32];
      else
        v36 = *(unsigned __int16 *)&v30[2 * v32];
      if (v36 != 32)
      {
        LODWORD(v13) = v32;
        goto LABEL_64;
      }
      ++v32;
      v25 = --v35;
      if (v35 <= 1)
      {
        v25 = 1;
        goto LABEL_63;
      }
    }
    v25 = a2 - v34;
    if (!v14)
      goto LABEL_84;
LABEL_61:
    v33 = v13;
LABEL_63:
    v30 = *(const char **)(v14 + 8);
    LODWORD(v26) = *(_DWORD *)(v14 + 4);
    LODWORD(v13) = v33;
LABEL_64:
    if ((_DWORD)v26)
    {
LABEL_65:
      v37 = (*(_DWORD *)(v14 + 16) >> 2) & 1;
      v38 = v26 | ((unint64_t)(v37 & 1) << 32);
      v39 = (v37 << 32) | v11;
      if (v11 >= v26)
        v39 = v38;
    }
    else
    {
LABEL_84:
      v39 = 0x100000000;
      v30 = "";
    }
    v46 = v30;
    v47 = v39;
    WTF::StringView::getCharacters<char16_t>(&v46, a4);
    v14 = v11;
    if (a6)
    {
      if (a5 <= v11)
        goto LABEL_87;
      v14 = (v11 + 1);
      *(_WORD *)&a4[2 * v11] = 8230;
    }
    v40 = *a1;
    if (*a1)
    {
      v26 = *(const char **)(v40 + 8);
      v41 = *(unsigned int *)(v40 + 4) | ((unint64_t)((*(_DWORD *)(v40 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v26 = 0;
      v41 = 0x100000000;
    }
    if (v41 <= v13)
      break;
    v42 = v25;
    if ((int)v41 - (int)v13 <= v25)
    {
      if (!(_DWORD)v13)
      {
        v43 = v41;
        goto LABEL_81;
      }
      v42 = v41 - v13;
    }
    v43 = v42;
    v44 = v41 - (unint64_t)v13;
    if ((v41 & 0x100000000) != 0)
    {
      if (v44 >= v43)
      {
        v26 += v13;
        v43 |= 0x100000000uLL;
        goto LABEL_81;
      }
    }
    else if (v44 >= v43)
    {
      v26 += 2 * v13;
      goto LABEL_81;
    }
LABEL_87:
    __break(1u);
LABEL_88:
    v28 = 0;
  }
  v43 = 0x100000000;
  v26 = "";
LABEL_81:
  v46 = v26;
  v47 = v43;
  if (a5 <= v14)
    goto LABEL_87;
  WTF::StringView::getCharacters<char16_t>(&v46, &a4[2 * v14]);
  WTF::NonSharedCharacterBreakIterator::~NonSharedCharacterBreakIterator((WTF::NonSharedCharacterBreakIterator *)&v48);
  return (_DWORD)v11 + a6 + v25;
}

void WebCore::StringTruncator::rightTruncate(WebCore::StringTruncator *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::truncateString(a2, (uint64_t)this);
}

{
  WebCore::truncateString(a2, (uint64_t)this);
}

uint64_t WebCore::rightTruncateToBuffer(uint64_t *a1, uint64_t a2, unsigned int a3, char *a4, unint64_t a5, int a6)
{
  unsigned int i;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD v30[2];
  uint64_t v31;

  i = a3;
  v11 = *a1;
  if (a3 < 2)
  {
    if (!v11)
      goto LABEL_23;
  }
  else
  {
    if (!v11)
      goto LABEL_23;
    v12 = a3 - 1;
    v13 = *(_DWORD *)(v11 + 4);
    if (v13 <= v12)
    {
      v15 = 0;
    }
    else
    {
      v14 = *(_QWORD *)(v11 + 8);
      if ((*(_BYTE *)(v11 + 16) & 4) != 0)
        v15 = *(unsigned __int8 *)(v14 + v12);
      else
        v15 = *(unsigned __int16 *)(v14 + 2 * v12);
    }
    v16 = a3 - 2;
    if (a3 != 2 && v15 != 32 && v13 > v16)
    {
      v17 = *(_QWORD *)(v11 + 8);
      if ((*(_BYTE *)(v11 + 16) & 4) != 0)
        v18 = *(unsigned __int8 *)(v17 + v16);
      else
        v18 = *(unsigned __int16 *)(v17 + 2 * v16);
      if (v18 == 32)
        i = a3 - 1;
      else
        i = a3;
    }
  }
  v19 = i;
  v20 = i + 1;
  i = i != 0;
  do
  {
    if (v19 < 2)
      goto LABEL_23;
    if (*(_DWORD *)(v11 + 4) <= v20 - 2)
      goto LABEL_40;
    --v19;
    v21 = *(_QWORD *)(v11 + 8);
    if ((*(_BYTE *)(v11 + 16) & 4) != 0)
      v22 = *(unsigned __int8 *)(v21 + v19);
    else
      v22 = *(unsigned __int16 *)(v21 + 2 * v19);
    --v20;
  }
  while (v22 == 32);
  for (i = v20; ; i = v19)
  {
LABEL_23:
    WTF::NonSharedCharacterBreakIterator::NonSharedCharacterBreakIterator();
    if (!ubrk_isBoundary())
    {
      v23 = ubrk_preceding();
      if (v23 == -1)
        i = 0;
      else
        i = v23;
    }
    v24 = *a1;
    if (*a1 && (v25 = *(unsigned int *)(v24 + 4), (_DWORD)v25))
    {
      v26 = *(const char **)(v24 + 8);
      v27 = (*(_DWORD *)(v24 + 16) >> 2) & 1;
      v28 = i >= v25 ? v25 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v27 & 1) << 32) : (v27 << 32) | i;
    }
    else
    {
      v28 = 0x100000000;
      v26 = "";
    }
    v30[0] = v26;
    v30[1] = v28;
    WTF::StringView::getCharacters<char16_t>(v30, a4);
    if (!a6)
      break;
    if (a5 > i)
    {
      *(_WORD *)&a4[2 * i] = 8230;
      break;
    }
    __break(1u);
LABEL_40:
    ;
  }
  WTF::NonSharedCharacterBreakIterator::~NonSharedCharacterBreakIterator((WTF::NonSharedCharacterBreakIterator *)&v31);
  return i + a6;
}

float WebCore::StringTruncator::width(WebCore::StringTruncator *this, const WTF::String *a2, const WebCore::FontCascade *a3)
{
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  __int16 v11;
  void *v12;
  float result;
  WTF *v14;
  unint64_t v16;
  __int128 v17;
  WTF *v18;
  int8x16_t v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  float v25;
  WTF *v26;
  uint64_t v27;
  _BYTE v28[64];
  WTF *v29;
  uint64_t v30;
  int8x16x2_t v31;
  int8x16x2_t v32;
  int8x16x2_t v33;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v5 = *(WTF **)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  v26 = (WTF *)v28;
  v27 = 32;
  v29 = 0;
  v30 = 0;
  v7 = v6;
  if ((v6 & 0x100000000) != 0)
  {
    if (v6 > 0x20uLL)
    {
      if (v6 <= 0x29uLL)
        v16 = 41;
      else
        v16 = v6;
      WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v26, v16);
      HIDWORD(v27) = v6;
      v8 = v26;
      if (v6 < 0x40uLL)
      {
        v9 = v26;
      }
      else
      {
        v9 = (WTF *)((char *)v26 + 2 * (v6 & 0xFFFFFFC0));
        v17 = 0uLL;
        v18 = v26;
        do
        {
          v31.val[0] = *(int8x16_t *)v5;
          v19 = *((int8x16_t *)v5 + 1);
          v32.val[0] = (int8x16_t)*((_OWORD *)v5 + 2);
          v20 = *((_OWORD *)v5 + 3);
          v5 = (WTF *)((char *)v5 + 64);
          v21 = v20;
          v32.val[1] = 0uLL;
          v33.val[0] = v19;
          v31.val[1] = 0uLL;
          v22 = (char *)v18;
          vst2q_s8(v22, v31);
          v22 += 32;
          v33.val[1] = 0uLL;
          vst2q_s8(v22, v33);
          v23 = (char *)v18 + 64;
          vst2q_s8(v23, v32);
          v24 = (char *)v18 + 96;
          vst2q_s8(v24, *(int8x16x2_t *)(&v17 - 1));
          v18 = (WTF *)((char *)v18 + 128);
        }
        while (v18 != v9);
      }
    }
    else
    {
      HIDWORD(v27) = v6;
      v8 = (WTF *)v28;
      v9 = (WTF *)v28;
    }
    v10 = (WTF *)((char *)v8 + 2 * v6);
    while (v9 != v10)
    {
      v11 = *(unsigned __int8 *)v5;
      v5 = (WTF *)((char *)v5 + 1);
      *(_WORD *)v9 = v11;
      v9 = (WTF *)((char *)v9 + 2);
    }
    v5 = v26;
    v7 = HIDWORD(v27);
  }
  v29 = v5;
  v30 = v7;
  result = WebCore::stringWidth((uint64_t)a2, v5, v7);
  v14 = v26;
  if (v28 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    v25 = result;
    WTF::fastFree(v14, v12);
    return v25;
  }
  return result;
}

float WebCore::stringWidth(uint64_t a1, WTF::StringImpl *a2, int a3)
{
  WTF::StringImpl *v4;
  int v5;
  char v6;
  WTF::StringImpl *v7;
  float v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  __int16 v17;

  if (!a3)
  {
    v4 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    v5 = *MEMORY[0x1E0CBEF70] + 2;
    *MEMORY[0x1E0CBEF70] = v5;
    LODWORD(v11) = 0;
    goto LABEL_4;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = v11;
  LODWORD(v11) = 0;
  if (v4)
  {
    v5 = *(_DWORD *)v4;
LABEL_4:
    v6 = 0;
    *(_DWORD *)v4 = v5 + 2;
    goto LABEL_5;
  }
  v6 = 1;
LABEL_5:
  v12 = v4;
  v13 = 0;
  v14 = 1;
  v15 = 0x3F80000000000000;
  v16 = 0;
  v17 = 2052;
  if ((v6 & 1) == 0)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v8 = WebCore::FontCascade::width(a1, (uint64_t)&v11);
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  return v8;
}

void WebCore::StringTruncator::leftTruncate(WebCore::StringTruncator *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::truncateString(a2, (uint64_t)this);
}

uint64_t WebCore::leftTruncateToBuffer(uint64_t *a1, uint64_t a2, int a3, char *a4, unint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  const char *v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  const char *v38;
  unint64_t v39;
  uint64_t v40;

  v9 = a2;
  v11 = (a2 - a3);
  WTF::NonSharedCharacterBreakIterator::NonSharedCharacterBreakIterator();
  ubrk_following();
  if (v11 < v9)
  {
    v12 = *a1;
    if (*a1)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if (v13 <= v11)
      {
        v15 = 0;
      }
      else
      {
        v14 = *(_QWORD *)(v12 + 8);
        v15 = (*(_BYTE *)(v12 + 16) & 4) != 0 ? *(unsigned __int8 *)(v14 + v11) : *(unsigned __int16 *)(v14 + 2 * v11);
      }
      if (v11 < (int)v9 - 1 && v15 != 32)
      {
        v16 = v11 + 1;
        if (v13 > (int)v11 + 1)
        {
          v17 = *(_QWORD *)(v12 + 8);
          v18 = (*(_BYTE *)(v12 + 16) & 4) != 0 ? *(unsigned __int8 *)(v17 + v16) : *(unsigned __int16 *)(v17 + 2 * v16);
          if (v18 == 32)
            LODWORD(v11) = v11 + 1;
        }
      }
    }
  }
  if (v11 < v9)
  {
    v19 = *a1;
    if (*a1)
    {
      LODWORD(v20) = *(_DWORD *)(v19 + 4);
      v21 = v11;
      if (v11 <= v20)
        v20 = v20;
      else
        v20 = v11;
      LODWORD(v11) = v20;
      while (v20 != v21)
      {
        v22 = *(_QWORD *)(v19 + 8);
        if ((*(_BYTE *)(v19 + 16) & 4) != 0)
          v23 = *(unsigned __int8 *)(v22 + v21);
        else
          v23 = *(unsigned __int16 *)(v22 + 2 * v21);
        if (v23 != 32)
        {
          LODWORD(v11) = v21;
          break;
        }
        if (v9 == ++v21)
        {
          LODWORD(v11) = v9;
          if (a6)
            goto LABEL_28;
          goto LABEL_37;
        }
      }
    }
  }
  if (a6)
  {
LABEL_28:
    if (!a5)
      goto LABEL_63;
    *(_WORD *)a4 = 8230;
    v24 = *a1;
    if (*a1)
    {
      v25 = *(const char **)(v24 + 8);
      v26 = *(unsigned int *)(v24 + 4) | ((unint64_t)((*(_DWORD *)(v24 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v25 = 0;
      v26 = 0x100000000;
    }
    v9 = (v9 - v11 + 1);
    if (v26 <= v11)
    {
      v28 = 0x100000000;
      v25 = "";
    }
    else
    {
      v27 = v9;
      if ((int)v26 - (int)v11 > v9)
        goto LABEL_33;
      if ((_DWORD)v11)
      {
        v27 = v26 - v11;
LABEL_33:
        v28 = v27;
        v29 = v26 - (unint64_t)v11;
        if ((v26 & 0x100000000) != 0)
        {
          if (v29 < v28)
            goto LABEL_63;
          v25 += v11;
          v28 |= 0x100000000uLL;
        }
        else
        {
          if (v29 < v28)
            goto LABEL_63;
          v25 += 2 * v11;
        }
        goto LABEL_54;
      }
      v28 = v26;
    }
LABEL_54:
    v38 = v25;
    v39 = v28;
    if (a5 <= 1)
      goto LABEL_63;
    v36 = a4 + 2;
    goto LABEL_56;
  }
LABEL_37:
  v30 = *a1;
  if (*a1)
  {
    v31 = *(const char **)(v30 + 8);
    v32 = *(unsigned int *)(v30 + 4) | ((unint64_t)((*(_DWORD *)(v30 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v31 = 0;
    v32 = 0x100000000;
  }
  v9 = (v9 - v11);
  if (v32 <= v11)
    goto LABEL_64;
  v33 = v9 + 1;
  if ((int)v32 - (int)v11 > (v9 + 1))
    goto LABEL_41;
  if ((_DWORD)v11)
  {
    v33 = v32 - v11;
LABEL_41:
    v34 = v33;
    v35 = v32 - (unint64_t)v11;
    if ((v32 & 0x100000000) != 0)
    {
      if (v35 < v34)
        goto LABEL_63;
      v31 += v11;
      v34 |= 0x100000000uLL;
    }
    else
    {
      if (v35 < v34)
        goto LABEL_63;
      v31 += 2 * v11;
    }
    goto LABEL_50;
  }
  v34 = v32;
LABEL_50:
  while (1)
  {
    v38 = v31;
    v39 = v34;
    if (a5)
      break;
LABEL_63:
    __break(1u);
LABEL_64:
    v34 = 0x100000000;
    v31 = "";
  }
  v36 = a4;
LABEL_56:
  WTF::StringView::getCharacters<char16_t>(&v38, v36);
  WTF::NonSharedCharacterBreakIterator::~NonSharedCharacterBreakIterator((WTF::NonSharedCharacterBreakIterator *)&v40);
  return v9;
}

void WebCore::StringTruncator::rightClipToCharacter(WebCore::StringTruncator *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::truncateString(a2, (uint64_t)this);
}

uint64_t WebCore::rightClipToCharacterBuffer(uint64_t *a1, uint64_t a2, uint64_t a3, char *a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;

  WTF::NonSharedCharacterBreakIterator::NonSharedCharacterBreakIterator();
  if (!ubrk_isBoundary())
  {
    v7 = ubrk_preceding();
    if (v7 == -1)
      a3 = 0;
    else
      a3 = v7;
  }
  v8 = *a1;
  if (*a1 && (v9 = *(unsigned int *)(v8 + 4), (_DWORD)v9))
  {
    v10 = *(const char **)(v8 + 8);
    v11 = (*(_DWORD *)(v8 + 16) >> 2) & 1;
    v12 = v9 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v11 & 1) << 32);
    v13 = a3 >= v9;
    v14 = (v11 << 32) | a3;
    if (v13)
      v14 = v12;
  }
  else
  {
    v14 = 0x100000000;
    v10 = "";
  }
  v16[0] = v10;
  v16[1] = v14;
  WTF::StringView::getCharacters<char16_t>(v16, a4);
  WTF::NonSharedCharacterBreakIterator::~NonSharedCharacterBreakIterator((WTF::NonSharedCharacterBreakIterator *)&v17);
  return a3;
}

void WebCore::StringTruncator::rightClipToWord(WebCore::StringTruncator *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::truncateString(a2, (uint64_t)this);
}

uint64_t WebCore::rightClipToWordBuffer(uint64_t *a1, uint64_t a2, uint64_t a3, char *a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t i;
  uint64_t v18;
  int v19;
  _QWORD v21[2];

  WTF::wordBreakIterator();
  if (!ubrk_isBoundary())
  {
    v7 = ubrk_preceding();
    if (v7 == -1)
      a3 = 0;
    else
      a3 = v7;
  }
  v8 = *a1;
  if (*a1 && (v9 = *(unsigned int *)(v8 + 4), (_DWORD)v9))
  {
    v10 = *(const char **)(v8 + 8);
    v11 = (*(_DWORD *)(v8 + 16) >> 2) & 1;
    v12 = v9 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v11 & 1) << 32);
    v13 = a3 >= v9;
    v14 = (v11 << 32) | a3;
    if (v13)
      v14 = v12;
  }
  else
  {
    v14 = 0x100000000;
    v10 = "";
  }
  v21[0] = v10;
  v21[1] = v14;
  WTF::StringView::getCharacters<char16_t>(v21, a4);
  v15 = *a1;
  if (*a1)
  {
    v16 = a3;
    LODWORD(a3) = a3 + 1;
    for (i = v16 - 1; ; --i)
    {
      if (i == -1)
        return 0;
      if (i >= *(unsigned int *)(v15 + 4))
        break;
      v18 = *(_QWORD *)(v15 + 8);
      if ((*(_BYTE *)(v15 + 16) & 4) != 0)
        v19 = *(unsigned __int8 *)(v18 + i);
      else
        v19 = *(unsigned __int16 *)(v18 + 2 * i);
      a3 = (a3 - 1);
      if (v19 != 32)
        return a3;
    }
    return (i + 1);
  }
  return a3;
}

uint64_t WebCore::SourceBufferPrivate::canSwitchToType(WebCore::SourceBufferPrivate *this, const WebCore::ContentType *a2)
{
  return 0;
}

uint64_t WebCore::SourceBufferPrivate::waitingForKey(WebCore::SourceBufferPrivate *this)
{
  return 0;
}

uint64_t WebCore::SourceBufferPrivate::timeFudgeFactor(WebCore::SourceBufferPrivate *this)
{
  return 2002;
}

uint64_t WebCore::SourceBufferPrivate::isSeeking(WebCore::SourceBufferPrivate *this)
{
  return 0;
}

uint64_t WebCore::SourceBufferPrivate::isReadyForMoreSamples(WebCore::SourceBufferPrivate *this)
{
  return 0;
}

uint64_t WebCore::SourceBufferPrivate::canSetMinimumUpcomingPresentationTime(WebCore::SourceBufferPrivate *this)
{
  return 0;
}

uint64_t WebCore::SourceBufferPrivate::precheckInitializationSegment()
{
  return 1;
}

uint64_t WebCore::SourceBufferPrivate::isMediaSampleAllowed(WebCore::SourceBufferPrivate *this, const WebCore::MediaSample *a2)
{
  return 1;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj1EE11whenSettledIZNS3_19SourceBufferPrivate17removeCodedFramesERKNS_9MediaTimeESA_SA_E3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlRKNSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSQ_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E340F610;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj1EE11whenSettledIZNS3_19SourceBufferPrivate17removeCodedFramesERKNS_9MediaTimeESA_SA_E3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlRKNSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSQ_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E340F610;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj1EE11whenSettledIZNS3_19SourceBufferPrivate17removeCodedFramesERKNS_9MediaTimeESA_SA_E3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlRKNSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSQ_EE4callESQ_@<X0>(uint64_t (**a1)()@<X0>, unsigned __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t (*v6)();
  WebCore::SourceBufferPrivate *v8;
  uint64_t (*v9)();
  int v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  WTF::NativePromiseBase *v15;
  _BYTE *v16;
  unsigned __int8 *result;
  uint64_t (**v18)();
  uint64_t (**v19)();
  uint64_t (**v20)();
  uint64_t (***v21)();
  uint64_t (**v22)();
  _QWORD *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  __int128 v29;
  __int128 v30;

  v4 = *a2;
  v5 = v4 >> 8;
  v6 = a1[1];
  if (!v6)
    goto LABEL_16;
  v9 = a1[2];
  v8 = (WebCore::SourceBufferPrivate *)a1[3];
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_6:
  if (*((_QWORD *)v6 + 3))
    ++*((_QWORD *)v6 + 1);
  else
    v9 = 0;
  v11 = __ldxr((unsigned __int8 *)v6);
  if (v11 != 1)
  {
    __clrex();
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      goto LABEL_12;
LABEL_16:
    v9 = 0;
    v12 = 1;
    if (!v5)
      LOBYTE(v4) = 2;
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
    goto LABEL_15;
  if (!v9)
    goto LABEL_16;
LABEL_12:
  if (!v5)
  {
    v18 = a1 + 4;
    v19 = a1 + 6;
    if ((WTF::MediaTime::compare((WTF::MediaTime *)(a1 + 4), (const WTF::MediaTime *)(a1 + 6)) & 0x80000000) != 0)
    {
      v20 = a1 + 8;
      v21 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x28);
      v22 = off_1E340FDC0;
      *v21 = off_1E340FDC0;
      v21[1] = (uint64_t (**)())v8;
      v21[2] = v18;
      v21[3] = v19;
      v21[4] = v20;
      v23 = (_QWORD *)*((_QWORD *)v8 + 14);
      if (v23)
      {
        do
        {
          ((void (*)(uint64_t (***)(), _QWORD))(*v21)[2])(v21, v23[3]);
          v23 = (_QWORD *)*v23;
        }
        while (v23);
        v22 = *v21;
      }
      ((void (*)(uint64_t (***)()))v22[1])(v21);
      (*(void (**)(WebCore::SourceBufferPrivate *, uint64_t (**)()))(*(_QWORD *)v8 + 120))(v8, v20);
      WebCore::SourceBufferPrivate::updateHighestPresentationTimestamp(v8);
    }
    WebCore::SourceBufferPrivate::computeEvictionData(v8, 0);
    WebCore::SourceBufferPrivate::updateBuffered((WebCore::SourceBufferPrivate *)&v28, v8);
    v29 = 0uLL;
    *(_QWORD *)&v30 = "operator Ref";
    *((_QWORD *)&v30 + 1) = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::convert<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>(a3, (uint64_t)v28, &v29);
    v24 = v28;
    v28 = 0;
    if (v24)
    {
      v25 = v24 + 2;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v24 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
      }
    }
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*((unsigned __int8 **)v9 + 1));
  }
  v12 = 0;
LABEL_18:
  LOBYTE(v28) = v4;
  v29 = 0uLL;
  *(_QWORD *)&v30 = "operator()";
  *((_QWORD *)&v30 + 1) = 0;
  v13 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)v13 = off_1E340F638;
  v14 = v30;
  *(_OWORD *)(v13 + 16) = v29;
  *(_OWORD *)(v13 + 32) = v14;
  *(_BYTE *)(v13 + 48) = 0;
  v15 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v15 = 1;
  *((_DWORD *)v15 + 4) = 0;
  *(_QWORD *)(v13 + 56) = v15;
  *(_QWORD *)(v13 + 64) = v13 + 80;
  *(_QWORD *)(v13 + 72) = 3;
  *(_WORD *)(v13 + 120) = 0;
  *(_QWORD *)(v13 + 104) = 0;
  *(_QWORD *)(v13 + 112) = 0;
  v16 = (_BYTE *)WTF::NativePromiseBase::logChannel(v15);
  if (*v16)
  {
    if (v16[16] >= 4u)
      WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v16, v13);
  }
  *a3 = v13;
  result = (unsigned __int8 *)WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v13, (char *)&v28, (WTF::Logger::LogSiteIdentifier *)&v29);
  if ((v12 & 1) == 0)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*((unsigned __int8 **)v9 + 1));
  return result;
}

WTF::Lock *WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(uint64_t a1, char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  WTF::Lock *result;
  int v14;
  WTF::Lock *v15;
  char v16;
  char v17;

  v6 = (WTF::Lock *)(a1 + 48);
  v15 = v6;
  v16 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v8, a3, " rejecting ", a1);
  v10 = *a2;
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(unsigned int *)(v11 + 16);
  if ((_DWORD)v12 != -1)
    ((void (*)(char *, uint64_t))off_1E340F650[v12])(&v17, v11 + 8);
  *(_BYTE *)(v11 + 8) = v10;
  *(_BYTE *)(v11 + 9) = 1;
  *(_DWORD *)(v11 + 16) = 1;
  result = (WTF::Lock *)WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::dispatchAll(a1, (unsigned __int8 **)&v15);
  if (v16)
  {
    result = v15;
    v14 = __ldxr((unsigned __int8 *)v15);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 116);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 104);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::Logger *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::Logger *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  void *v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v46;
  unsigned int **v47;
  unsigned int **v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  WTF *v53;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  WTF::Logger *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint8_t buf[4];
  _BYTE v65[12];
  int v66;
  WTF::StringImpl *v67[3];

  v67[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v62, "destroying ");
    result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v61, a1);
    if (v62)
    {
      v6 = *((_DWORD *)v62 + 1);
      if (v61)
      {
LABEL_8:
        v7 = *((_DWORD *)v61 + 1);
LABEL_9:
        if ((v7 | v6) < 0 || (result = (v6 + v7), __OFADD__(v6, v7)))
        {
          v63 = 0;
          goto LABEL_112;
        }
        if (v62)
        {
          v8 = *((_DWORD *)v62 + 4);
          v9 = (v8 >> 2) & 1;
          if (v61 && (v8 & 4) != 0)
            goto LABEL_14;
        }
        else
        {
          if (v61)
          {
LABEL_14:
            v9 = (*((unsigned __int8 *)v61 + 16) >> 2) & 1;
            goto LABEL_15;
          }
          v9 = 1;
        }
LABEL_15:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v62, (uint64_t)v61, &v63);
        if (v63)
        {
          v11 = v61;
          v61 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = v62;
          v62 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v10);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = *((_QWORD *)v4 + 4);
          v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v14)
          {
            WTF::String::utf8();
            v16 = v59 ? (char *)v59 + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)v65 = v16;
            _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v14 = (uint64_t)v59;
            v59 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 1)
                v14 = WTF::fastFree((WTF *)v14, v15);
              else
                --*(_DWORD *)v14;
            }
          }
          if (*v4 && v4[16] >= 4u)
          {
            v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v18 = *v17;
              if ((v18 & 1) != 0)
                break;
              v19 = __ldaxr(v17);
              if (v19 == v18)
              {
                if (!__stxr(v18 | 1, v17))
                {
                  v20 = WTF::Logger::observers((WTF::Logger *)v14);
                  v21 = *(unsigned int *)(v20 + 12);
                  if ((_DWORD)v21)
                  {
                    v22 = *(uint64_t **)v20;
                    v23 = *(_QWORD *)v20 + 8 * v21;
                    do
                    {
                      v24 = *v22;
                      *(_DWORD *)buf = 0;
                      WTF::String::String((WTF::String *)&v65[4], "destroying ");
                      v66 = 0;
                      WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(v67, a1);
                      v59 = 0;
                      v60 = 0;
                      v25 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v60) = 2;
                      v59 = v25;
                      v26 = HIDWORD(v60);
                      *((_DWORD *)v25 + 4 * HIDWORD(v60)) = *(_DWORD *)buf;
                      v27 = *(_QWORD *)&v65[4];
                      if (*(_QWORD *)&v65[4])
                        **(_DWORD **)&v65[4] += 2;
                      *((_QWORD *)v25 + 2 * v26 + 1) = v27;
                      *((_DWORD *)v25 + 4 * (v26 + 1)) = v66;
                      v28 = v67[0];
                      if (v67[0])
                        *(_DWORD *)v67[0] += 2;
                      *((_QWORD *)v25 + 2 * (v26 + 1) + 1) = v28;
                      HIDWORD(v60) = v26 + 2;
                      (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v24 + 16))(v24, v4, 4, &v59);
                      v29 = v59;
                      if (HIDWORD(v60))
                      {
                        v30 = 16 * HIDWORD(v60);
                        v31 = (WTF::StringImpl **)((char *)v59 + 8);
                        do
                        {
                          v32 = *v31;
                          *v31 = 0;
                          if (v32)
                          {
                            if (*(_DWORD *)v32 == 2)
                              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v15);
                            else
                              *(_DWORD *)v32 -= 2;
                          }
                          v31 += 2;
                          v30 -= 16;
                        }
                        while (v30);
                        v29 = v59;
                      }
                      if (v29)
                      {
                        v59 = 0;
                        LODWORD(v60) = 0;
                        WTF::fastFree(v29, v15);
                      }
                      v33 = v67[0];
                      v67[0] = 0;
                      if (v33)
                      {
                        if (*(_DWORD *)v33 == 2)
                          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v33 -= 2;
                      }
                      v34 = *(WTF::StringImpl **)&v65[4];
                      *(_QWORD *)&v65[4] = 0;
                      if (v34)
                      {
                        if (*(_DWORD *)v34 == 2)
                          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v34 -= 2;
                      }
                      ++v22;
                    }
                    while (v22 != (uint64_t *)v23);
                  }
                  v35 = __ldxr(v17);
                  if (v35 == 1)
                  {
                    if (!__stlxr(0, v17))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v36 = v63;
          v63 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)v36 -= 2;
          }
          goto LABEL_71;
        }
LABEL_112:
        __break(0xC471u);
        return result;
      }
    }
    else
    {
      v6 = 0;
      if (v61)
        goto LABEL_8;
    }
    v7 = 0;
    goto LABEL_9;
  }
LABEL_71:
  WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::assertIsDead(a1);
  v38 = *(_DWORD *)(a1 + 116);
  if (v38)
  {
    v39 = *(uint64_t **)(a1 + 104);
    v40 = &v39[5 * v38];
    do
    {
      if (*v39)
      {
        WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::assertIsDead(*v39);
        v41 = (unsigned int *)*v39;
        *v39 = 0;
        if (v41)
        {
          v42 = v41 + 2;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            atomic_store(1u, v41 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 16))(v41);
          }
        }
      }
      else
      {
        *v39 = 0;
      }
      v39 += 5;
    }
    while (v39 != v40);
  }
  v45 = *(WTF **)(a1 + 104);
  if (v45)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v45, v37);
  }
  v46 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v46)
  {
    v47 = *(unsigned int ***)(a1 + 64);
    v48 = &v47[v46];
    do
    {
      v49 = *v47;
      *v47 = 0;
      if (v49)
      {
        v50 = v49 + 2;
        do
        {
          v51 = __ldaxr(v50);
          v52 = v51 - 1;
        }
        while (__stlxr(v52, v50));
        if (!v52)
        {
          atomic_store(1u, v49 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
        }
      }
      ++v47;
    }
    while (v47 != v48);
  }
  v53 = *(WTF **)(a1 + 64);
  if ((WTF *)(a1 + 80) != v53 && v53 != 0)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v53, v37);
  }
  v55 = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v55)
  {
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v55);
      v58 = v55[4];
      if ((_DWORD)v58 != -1)
        ((void (*)(uint8_t *, unsigned int *))off_1E340F650[v58])(buf, v55 + 2);
      v55[4] = -1;
      WTF::fastFree((WTF *)v55, v37);
    }
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore18PlatformMediaErrorELj1EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSE_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::dispatchAll(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v3;
  WTF::NativePromiseBase **v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::NativePromiseBase *v9;
  unsigned int **v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  WTF *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  const char **v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  _BYTE v36[24];

  v3 = result;
  v30 = &v32;
  v31 = 3;
  v34 = (WTF *)v36;
  v35 = 3;
  v4 = *(WTF::NativePromiseBase ***)(result + 64);
  if (v4 == (WTF::NativePromiseBase **)(result + 80))
  {
    v5 = *(unsigned int *)(result + 76);
    result = (uint64_t)memcpy(v36, v4, 8 * v5);
    v4 = (WTF::NativePromiseBase **)v36;
  }
  else
  {
    *(_QWORD *)(result + 64) = result + 80;
    v34 = (WTF *)v4;
    v5 = *(unsigned int *)(result + 76);
    LODWORD(v35) = *(_DWORD *)(result + 72);
  }
  HIDWORD(v35) = v5;
  *(_QWORD *)(v3 + 72) = 3;
  v6 = *(WTF **)(v3 + 104);
  v7 = *(_DWORD *)(v3 + 116);
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    do
    {
      v9 = *v4++;
      result = (uint64_t)WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallbackBase::dispatch(v9, v3, a2);
      v8 -= 8;
    }
    while (v8);
  }
  if (v7)
  {
    v10 = (unsigned int **)((char *)v6 + 40 * v7);
    v11 = (unsigned int **)(v3 + 56);
    v12 = (unsigned int **)v6;
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        v14 = v13 + 2;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        v30 = 0;
        v31 = 0;
        v32 = "<chained promise>";
        v33 = 0;
        WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::Storage const&>((uint64_t)v13, v11, (WTF::Logger::LogSiteIdentifier *)&v30);
        do
        {
          v16 = __ldaxr(v14);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v14));
        if (!v17)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
        WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::assertIsDead((uint64_t)v13);
        do
        {
          v18 = __ldaxr(v14);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v14));
        if (!v19)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
      }
      else
      {
        v30 = 0;
        v31 = 0;
        v32 = "<chained promise>";
        v33 = 0;
        WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::Storage const&>(0, v11, (WTF::Logger::LogSiteIdentifier *)&v30);
      }
      v12 += 5;
    }
    while (v12 != v10);
    v20 = (uint64_t *)v6;
    do
    {
      result = *v20;
      if (*v20)
      {
        WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::assertIsDead(result);
        result = *v20;
        *v20 = 0;
        if (result)
        {
          v21 = (unsigned int *)(result + 8);
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, (unsigned int *)(result + 8));
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          }
        }
      }
      else
      {
        *v20 = 0;
      }
      v20 += 5;
    }
    while (v20 != (uint64_t *)v10);
  }
  if (v6)
    result = WTF::fastFree(v6, a2);
  v24 = v34;
  if (HIDWORD(v35))
  {
    v25 = (WTF *)((char *)v34 + 8 * HIDWORD(v35));
    do
    {
      result = *(_QWORD *)v24;
      *(_QWORD *)v24 = 0;
      if (result)
      {
        v26 = (unsigned int *)(result + 8);
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, (unsigned int *)(result + 8));
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
      v24 = (WTF *)((char *)v24 + 8);
    }
    while (v24 != v25);
    v24 = v34;
  }
  if (v36 != (_BYTE *)v24 && v24 != 0)
  {
    v34 = 0;
    LODWORD(v35) = 0;
    return WTF::fastFree(v24, a2);
  }
  return result;
}

unsigned __int8 *WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  _QWORD *v29;
  unsigned __int8 *v30;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 121));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = &off_1E340F678;
      *((_QWORD *)v12 + 1) = v5;
      *((_QWORD *)v12 + 2) = v5;
      *((_QWORD *)v12 + 3) = a2;
      v30 = v12;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v7 + 16))(v7, &v30);
      result = v30;
      v30 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v30 = (unsigned __int8 *)v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, a2, (uint64_t)&v30, (WTF::NativePromiseBase *)((char *)v5 + 24));
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v15))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v17 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v19 = *(_DWORD *)(*(_QWORD *)(a2 + 56) + 16);
  v20 = __ldxr(v17);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v17))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v19 != 2)
  {
    if (__ldaxr(v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_48;
    }
    MEMORY[0x19AEA534C](a2 + 48);
LABEL_48:
    v26 = *(_QWORD *)(a2 + 56);
    if (*(_DWORD *)(v26 + 16) != 1)
      goto LABEL_60;
    v27 = __ldxr(v17);
    if (v27 == 1)
    {
      if (!__stlxr(0, v17))
        goto LABEL_54;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_54:
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, a2, v26 + 8);
    goto LABEL_55;
  }
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  v23 = *(_QWORD *)(a2 + 56);
  if (*(_DWORD *)(v23 + 16) != 2)
  {
LABEL_60:
    v29 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,1u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(v29);
  }
  v24 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v23 + 8) = 0;
  v25 = __ldxr(v17);
  if (v25 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(_QWORD *)v24 + 16))(&v30, v24);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v30);
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
LABEL_55:
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEA534C]();
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,1u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E340F678;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,1u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E340F678;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,1u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int **v21;
  WTF::Logger::LogSiteIdentifier *v22;
  _BYTE v23[2];
  uint64_t v24;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (!v1[56])
  {
    v6 = (unsigned __int8 *)(v2 + 48);
    if (__ldaxr((unsigned __int8 *)(v2 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
    v8 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + 16);
    v9 = __ldxr(v6);
    if (v9 == 1)
    {
      if (!__stlxr(0, v6))
      {
LABEL_17:
        v10 = *((_QWORD *)a1 + 3);
        if (v8 == 2)
        {
          v11 = (unsigned __int8 *)(v10 + 48);
          if (__ldaxr((unsigned __int8 *)(v10 + 48)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v11))
          {
            goto LABEL_24;
          }
          MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
          v15 = *(_QWORD *)(v10 + 56);
          if (*(_DWORD *)(v15 + 16) == 2)
          {
            v16 = *(_QWORD *)(v15 + 8);
            *(_QWORD *)(v15 + 8) = 0;
            v17 = __ldxr(v11);
            if (v17 == 1)
            {
              if (!__stlxr(0, v11))
                goto LABEL_30;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
            (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v16 + 16))(v23, v16);
            (*(void (**)(_BYTE *, uint64_t, _BYTE *))(*(_QWORD *)v1 + 24))(v1, v10, v23);
            return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
LABEL_41:
          v20 = std::__throw_bad_variant_access[abi:sn180100]();
          return (WTF::StringImpl *)WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::Storage const&>(v20, v21, v22);
        }
        v13 = (unsigned __int8 *)(v10 + 48);
        if (__ldaxr((unsigned __int8 *)(v10 + 48)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v13))
        {
          goto LABEL_34;
        }
        MEMORY[0x19AEA534C](v10 + 48);
LABEL_34:
        v18 = *(_QWORD *)(v10 + 56);
        if (*(_DWORD *)(v18 + 16) != 1)
          goto LABEL_41;
        v19 = __ldxr(v13);
        if (v19 == 1)
        {
          if (!__stlxr(0, v13))
            return (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v1 + 24))(v1, v10, v18 + 8);
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
        return (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v1 + 24))(v1, v10, v18 + 8);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    goto LABEL_17;
  }
  v24 = *((_QWORD *)a1 + 1);
  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v4 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v4 = 0;
  if (v4)
    return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)&v24, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::Storage const&>(uint64_t a1, unsigned int **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5;
  WTF::Lock *v6;
  _BYTE *v8;
  void *v9;
  BOOL v10;
  _BYTE *v11;
  uint64_t result;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  int v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  NSObject *v25;
  uint64_t v26;
  char *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  WTF::Logger *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::Logger::LogSiteIdentifier *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  WTF::StringImpl *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  unsigned int **v58;
  uint64_t v59;
  WTF::Lock *v60;
  char v61;
  WTF::Logger *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint8_t buf[4];
  _BYTE v69[12];
  int v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73[3];

  v5 = a1;
  v73[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = (WTF::Lock *)(a1 + 48);
  v60 = v6;
  v61 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v10 = v8[16] >= 4u;
  else
    v10 = 0;
  if (!v10)
    goto LABEL_93;
  v11 = v8;
  WTF::Logger::LogSiteIdentifier::toString(a3);
  WTF::String::String((WTF::String *)&v65, " settling chained promise ");
  result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v64, v5);
  if (v66)
  {
    v13 = *((_DWORD *)v66 + 1);
    if (v65)
      goto LABEL_12;
LABEL_111:
    v14 = 0;
    if (v64)
      goto LABEL_13;
LABEL_112:
    v15 = 0;
    goto LABEL_14;
  }
  v13 = 0;
  if (!v65)
    goto LABEL_111;
LABEL_12:
  v14 = *((_DWORD *)v65 + 1);
  if (!v64)
    goto LABEL_112;
LABEL_13:
  v15 = *((_DWORD *)v64 + 1);
LABEL_14:
  if ((v15 | v14) < 0
    || ((v16 = __OFADD__(v14, v15), v17 = v14 + v15, !v16) ? (v18 = 0) : (v18 = 1),
        v13 < 0 || (v18 & 1) != 0 || (result = (v13 + v17), __OFADD__(v13, v17))))
  {
    v67 = 0;
    goto LABEL_119;
  }
  if (v66 && (*((_BYTE *)v66 + 16) & 4) == 0)
  {
    v19 = 0;
    goto LABEL_28;
  }
  if (v65)
  {
    v20 = *((_DWORD *)v65 + 4);
    v19 = (v20 >> 2) & 1;
    if (v64 && (v20 & 4) != 0)
      goto LABEL_27;
  }
  else
  {
    if (v64)
    {
LABEL_27:
      v19 = (*((unsigned __int8 *)v64 + 16) >> 2) & 1;
      goto LABEL_28;
    }
    v19 = 1;
  }
LABEL_28:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v19, v66, (uint64_t)v65, (uint64_t)v64, &v67);
  if (!v67)
  {
LABEL_119:
    __break(0xC471u);
    return result;
  }
  v22 = v64;
  v64 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v65;
  v65 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v66;
  v66 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v21);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *((_QWORD *)v11 + 4);
  v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v26)
  {
    WTF::String::utf8();
    v27 = v62 ? (char *)v62 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v69 = v27;
    _os_log_impl(&dword_1940B8000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v26 = (uint64_t)v62;
    v62 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1)
        v26 = WTF::fastFree((WTF *)v26, v9);
      else
        --*(_DWORD *)v26;
    }
  }
  if (*v11 && v11[16] >= 4u)
  {
    v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v29 = *v28;
      if ((v29 & 1) != 0)
        break;
      v30 = __ldaxr(v28);
      if (v30 == v29)
      {
        if (!__stxr(v29 | 1, v28))
        {
          v58 = a2;
          v31 = WTF::Logger::observers((WTF::Logger *)v26);
          v32 = *(unsigned int *)(v31 + 12);
          if ((_DWORD)v32)
          {
            v33 = *(uint64_t **)v31;
            v59 = *(_QWORD *)v31 + 8 * v32;
            do
            {
              v34 = *v33;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(a3);
              v70 = 0;
              WTF::String::String((WTF::String *)&v71, " settling chained promise ");
              v72 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(v73, v5);
              v62 = 0;
              v63 = 0;
              v35 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v63) = 3;
              v62 = v35;
              v36 = HIDWORD(v63);
              *((_DWORD *)v35 + 4 * HIDWORD(v63)) = *(_DWORD *)buf;
              v37 = *(_QWORD *)&v69[4];
              if (*(_QWORD *)&v69[4])
                **(_DWORD **)&v69[4] += 2;
              *((_QWORD *)v35 + 2 * v36 + 1) = v37;
              *((_DWORD *)v35 + 4 * (v36 + 1)) = v70;
              v38 = v71;
              if (v71)
                *(_DWORD *)v71 += 2;
              *((_QWORD *)v35 + 2 * (v36 + 1) + 1) = v38;
              *((_DWORD *)v35 + 4 * (v36 + 2)) = v72;
              v39 = v73[0];
              if (v73[0])
                *(_DWORD *)v73[0] += 2;
              *((_QWORD *)v35 + 2 * (v36 + 2) + 1) = v39;
              HIDWORD(v63) = v36 + 3;
              (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v34 + 16))(v34, v11, 4, &v62);
              v40 = v62;
              if (HIDWORD(v63))
              {
                v41 = v5;
                v42 = a3;
                v43 = 16 * HIDWORD(v63);
                v44 = (WTF::StringImpl **)((char *)v62 + 8);
                do
                {
                  v45 = *v44;
                  *v44 = 0;
                  if (v45)
                  {
                    if (*(_DWORD *)v45 == 2)
                      WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v9);
                    else
                      *(_DWORD *)v45 -= 2;
                  }
                  v44 += 2;
                  v43 -= 16;
                }
                while (v43);
                v40 = v62;
                a3 = v42;
                v5 = v41;
              }
              if (v40)
              {
                v62 = 0;
                LODWORD(v63) = 0;
                WTF::fastFree(v40, v9);
              }
              v46 = v73[0];
              v73[0] = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v9);
                else
                  *(_DWORD *)v46 -= 2;
              }
              v47 = v71;
              v71 = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v9);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = *(WTF::StringImpl **)&v69[4];
              *(_QWORD *)&v69[4] = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v9);
                else
                  *(_DWORD *)v48 -= 2;
              }
              ++v33;
            }
            while (v33 != (uint64_t *)v59);
          }
          v49 = __ldxr(v28);
          if (v49 == 1)
          {
            a2 = v58;
            if (!__stlxr(0, v28))
              break;
          }
          else
          {
            __clrex();
            a2 = v58;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v50 = v67;
  v67 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v50 -= 2;
  }
LABEL_93:
  v51 = *a2;
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 + 1, v51));
  v53 = *(unsigned int **)(v5 + 56);
  *(_QWORD *)(v5 + 56) = v51;
  if (v53)
  {
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v53);
      v57 = v53[4];
      if ((_DWORD)v57 != -1)
        ((void (*)(uint8_t *, unsigned int *))off_1E340F650[v57])(buf, v53 + 2);
      v53[4] = -1;
      WTF::fastFree((WTF *)v53, v9);
    }
  }
  result = WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::dispatchAll(v5, &v60);
  if (v61)
  {
    result = (uint64_t)v60;
    v56 = __ldxr((unsigned __int8 *)v60);
    if (v56 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v60))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

unsigned int *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::convert<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v5;
  unsigned int *v6;
  __int128 v7;
  WTF::NativePromiseBase *v8;
  unsigned __int8 *v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 *v14;
  int v16;
  _BYTE *v17;
  _BYTE *v18;
  WTF::StringImpl *v19;
  unsigned int *result;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  NSObject *v29;
  WTF *v30;
  void *v31;
  char *v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  WTF::Logger *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::Logger *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  WTF::StringImpl **v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  int v62;
  WTF::StringImpl *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  _BYTE *v84;
  _QWORD v85[4];
  __int128 v86;
  __int128 v87;
  WTF::Logger *v88[2];
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::NativePromiseBase *v102;
  __int128 buf;
  __int128 v104;
  const char *v105;
  WTF::StringImpl *v106;
  int v107;
  WTF::StringImpl *v108;
  int v109;
  WTF::StringImpl *v110;
  int v111;
  WTF::StringImpl *v112;
  int v113;
  WTF::Logger *v114;
  int v115;
  _QWORD v116[3];

  v116[1] = *MEMORY[0x1E0C80C00];
  v5 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v5 + 8) = 1;
  v6 = (unsigned int *)(v5 + 8);
  *(_QWORD *)v5 = off_1E340F638;
  v7 = a3[1];
  *(_OWORD *)(v5 + 16) = *a3;
  *(_OWORD *)(v5 + 32) = v7;
  *(_BYTE *)(v5 + 48) = 0;
  v8 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v8 = 1;
  *((_DWORD *)v8 + 4) = 0;
  *(_QWORD *)(v5 + 56) = v8;
  *(_QWORD *)(v5 + 64) = v5 + 80;
  *(_QWORD *)(v5 + 72) = 3;
  *(_WORD *)(v5 + 120) = 0;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 112) = 0;
  v9 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v8);
  if (*v9 && v9[16] >= 4u)
    v9 = (unsigned __int8 *)WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v9, v5);
  v10 = a3[1];
  v86 = *a3;
  v87 = v10;
  do
    v11 = __ldaxr(v6);
  while (__stlxr(v11 + 1, v6));
  *a1 = v5;
  v85[0] = 0;
  v85[1] = 0;
  v85[2] = "convert";
  v85[3] = 0;
  v12 = a2;
  do
    v13 = __ldaxr(v6);
  while (__stlxr(v13 + 1, v6));
  v14 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_12;
  }
  v9 = (unsigned __int8 *)MEMORY[0x19AEA534C](a2 + 48);
LABEL_12:
  v16 = __ldxr(v14);
  if (v16 == 1)
  {
    if (!__stlxr(0, v14))
      goto LABEL_17;
  }
  else
  {
    __clrex();
  }
  v9 = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_17:
  v17 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
  if (*v17)
  {
    v18 = v17;
    if (v17[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v85);
      WTF::String::String((WTF::String *)&v94, " invoking chainTo() [");
      WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a2, &v93);
      WTF::String::String((WTF::String *)&v92, " chainedPromise:");
      WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v91, v5);
      WTF::String::String((WTF::String *)&v90, " isSettled:");
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v19 = (WTF::StringImpl *)buf;
      WTF::String::String((WTF::String *)&v89, "]");
      v88[0] = v94;
      v102 = v93;
      *(_QWORD *)&buf = v95;
      v101 = v92;
      v99 = v90;
      v100 = v91;
      v97 = v89;
      v98 = v19;
      result = (unsigned int *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)v88, (uint64_t *)&v102, (uint64_t *)&v101, (uint64_t *)&v100, (uint64_t *)&v99, (uint64_t *)&v98, (uint64_t *)&v97, &v96);
      if (!v96)
      {
        __break(0xC471u);
        return result;
      }
      v22 = v89;
      v89 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::destroy(v22, v21);
          if (v19)
          {
LABEL_24:
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v21);
            else
              *(_DWORD *)v19 -= 2;
          }
LABEL_26:
          v23 = v90;
          v90 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v21);
            else
              *(_DWORD *)v23 -= 2;
          }
          v24 = v91;
          v91 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v21);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = v92;
          v92 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v21);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = v93;
          v93 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v21);
            else
              *(_DWORD *)v26 -= 2;
          }
          v27 = v94;
          v94 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v21);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = v95;
          v95 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v21);
            else
              *(_DWORD *)v28 -= 2;
          }
          v29 = *((_QWORD *)v18 + 4);
          v30 = (WTF *)os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v30)
          {
            WTF::String::utf8();
            v32 = v88[0] ? (char *)v88[0] + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v32;
            _os_log_impl(&dword_1940B8000, v29, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v30 = v88[0];
            v88[0] = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 1)
                v30 = (WTF *)WTF::fastFree(v30, v31);
              else
                --*(_DWORD *)v30;
            }
          }
          if (*v18 && v18[16] >= 4u)
          {
            v33 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v34 = *v33;
              if ((v34 & 1) != 0)
                break;
              v35 = __ldaxr(v33);
              if (v35 == v34)
              {
                if (!__stxr(v34 | 1, v33))
                {
                  v84 = v18;
                  v36 = WTF::Logger::observers(v30);
                  v37 = *(unsigned int *)(v36 + 12);
                  if ((_DWORD)v37)
                  {
                    v38 = *(uint64_t **)v36;
                    v82 = *(_QWORD *)v36 + 8 * v37;
                    do
                    {
                      v39 = *v38;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v85);
                      LODWORD(v104) = 0;
                      WTF::String::String((WTF::String *)((char *)&v104 + 8), " invoking chainTo() [");
                      LODWORD(v105) = 0;
                      WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v12, &v106);
                      v107 = 0;
                      WTF::String::String((WTF::String *)&v108, " chainedPromise:");
                      v109 = 0;
                      WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v110, v5);
                      v111 = 0;
                      WTF::String::String((WTF::String *)&v112, " isSettled:");
                      v113 = 0;
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v114 = v88[0];
                      v115 = 0;
                      WTF::String::String((WTF::String *)v116, "]");
                      v88[0] = 0;
                      v88[1] = 0;
                      v40 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                      LODWORD(v88[1]) = 8;
                      v88[0] = v40;
                      v41 = HIDWORD(v88[1]);
                      *((_DWORD *)v40 + 4 * HIDWORD(v88[1])) = buf;
                      v42 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v40 + 2 * v41 + 1) = v42;
                      *((_DWORD *)v40 + 4 * (v41 + 1)) = v104;
                      v43 = *((_QWORD *)&v104 + 1);
                      if (*((_QWORD *)&v104 + 1))
                        **((_DWORD **)&v104 + 1) += 2;
                      *((_QWORD *)v40 + 2 * (v41 + 1) + 1) = v43;
                      *((_DWORD *)v40 + 4 * (v41 + 2)) = (_DWORD)v105;
                      v44 = v106;
                      if (v106)
                        *(_DWORD *)v106 += 2;
                      *((_QWORD *)v40 + 2 * (v41 + 2) + 1) = v44;
                      *((_DWORD *)v40 + 4 * (v41 + 3)) = v107;
                      v45 = v108;
                      if (v108)
                        *(_DWORD *)v108 += 2;
                      *((_QWORD *)v40 + 2 * (v41 + 3) + 1) = v45;
                      *((_DWORD *)v40 + 4 * (v41 + 4)) = v109;
                      v46 = v110;
                      if (v110)
                        *(_DWORD *)v110 += 2;
                      *((_QWORD *)v40 + 2 * (v41 + 4) + 1) = v46;
                      *((_DWORD *)v40 + 4 * (v41 + 5)) = v111;
                      v47 = v112;
                      if (v112)
                        *(_DWORD *)v112 += 2;
                      *((_QWORD *)v40 + 2 * (v41 + 5) + 1) = v47;
                      *((_DWORD *)v40 + 4 * (v41 + 6)) = v113;
                      v48 = v114;
                      if (v114)
                        *(_DWORD *)v114 += 2;
                      *((_QWORD *)v40 + 2 * (v41 + 6) + 1) = v48;
                      *((_DWORD *)v40 + 4 * (v41 + 7)) = v115;
                      v49 = v116[0];
                      if (v116[0])
                        *(_DWORD *)v116[0] += 2;
                      *((_QWORD *)v40 + 2 * (v41 + 7) + 1) = v49;
                      HIDWORD(v88[1]) = v41 + 8;
                      (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v39 + 16))(v39, v84, 4, v88);
                      v50 = v88[0];
                      if (HIDWORD(v88[1]))
                      {
                        v51 = 16 * HIDWORD(v88[1]);
                        v52 = (WTF::StringImpl **)((char *)v88[0] + 8);
                        do
                        {
                          v53 = *v52;
                          *v52 = 0;
                          if (v53)
                          {
                            if (*(_DWORD *)v53 == 2)
                              WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v31);
                            else
                              *(_DWORD *)v53 -= 2;
                          }
                          v52 += 2;
                          v51 -= 16;
                        }
                        while (v51);
                        v50 = v88[0];
                        v12 = a2;
                      }
                      if (v50)
                      {
                        v88[0] = 0;
                        LODWORD(v88[1]) = 0;
                        WTF::fastFree(v50, v31);
                      }
                      v54 = (WTF::StringImpl *)v116[0];
                      v116[0] = 0;
                      if (v54)
                      {
                        if (*(_DWORD *)v54 == 2)
                          WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v31);
                        else
                          *(_DWORD *)v54 -= 2;
                      }
                      v55 = v114;
                      v114 = 0;
                      if (v55)
                      {
                        if (*(_DWORD *)v55 == 2)
                          WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v31);
                        else
                          *(_DWORD *)v55 -= 2;
                      }
                      v56 = v112;
                      v112 = 0;
                      if (v56)
                      {
                        if (*(_DWORD *)v56 == 2)
                          WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v31);
                        else
                          *(_DWORD *)v56 -= 2;
                      }
                      v57 = v110;
                      v110 = 0;
                      if (v57)
                      {
                        if (*(_DWORD *)v57 == 2)
                          WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v31);
                        else
                          *(_DWORD *)v57 -= 2;
                      }
                      v58 = v108;
                      v108 = 0;
                      if (v58)
                      {
                        if (*(_DWORD *)v58 == 2)
                          WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v31);
                        else
                          *(_DWORD *)v58 -= 2;
                      }
                      v59 = v106;
                      v106 = 0;
                      if (v59)
                      {
                        if (*(_DWORD *)v59 == 2)
                          WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v31);
                        else
                          *(_DWORD *)v59 -= 2;
                      }
                      v60 = (WTF::StringImpl *)*((_QWORD *)&v104 + 1);
                      *((_QWORD *)&v104 + 1) = 0;
                      if (v60)
                      {
                        if (*(_DWORD *)v60 == 2)
                          WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v31);
                        else
                          *(_DWORD *)v60 -= 2;
                      }
                      v61 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v61)
                      {
                        if (*(_DWORD *)v61 == 2)
                          WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v31);
                        else
                          *(_DWORD *)v61 -= 2;
                      }
                      ++v38;
                    }
                    while (v38 != (uint64_t *)v82);
                  }
                  v62 = __ldxr(v33);
                  if (v62 == 1)
                  {
                    if (!__stlxr(0, v33))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v63 = v96;
          v96 = 0;
          if (v63)
          {
            if (*(_DWORD *)v63 == 2)
              WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v31);
            else
              *(_DWORD *)v63 -= 2;
          }
          goto LABEL_129;
        }
        *(_DWORD *)v22 -= 2;
      }
      if (v19)
        goto LABEL_24;
      goto LABEL_26;
    }
  }
  do
  {
LABEL_129:
    v64 = __ldaxr(v6);
    v65 = v64 - 1;
  }
  while (__stlxr(v65, v6));
  if (!v65)
  {
    atomic_store(1u, (unsigned int *)(v5 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  v88[0] = 0;
  v88[1] = 0;
  v66 = WTF::fastMalloc((WTF *)0x50);
  v67 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v67 = off_1E340F6A0;
  *(_QWORD *)(v67 + 8) = v5;
  v68 = v87;
  *(_OWORD *)(v67 + 16) = v86;
  *(_OWORD *)(v67 + 32) = v68;
  *(_DWORD *)(v66 + 8) = 1;
  *(_QWORD *)(v66 + 16) = 0;
  *(_QWORD *)(v66 + 24) = 0;
  *(_QWORD *)(v66 + 32) = 0;
  *(_QWORD *)(v66 + 40) = "chainTo";
  *(_QWORD *)(v66 + 48) = 0;
  *(_WORD *)(v66 + 56) = 0;
  *(_QWORD *)v66 = &off_1E32059B0;
  v69 = (unsigned int *)(v12 + 8);
  *(_QWORD *)(v66 + 64) = 0;
  *(_QWORD *)(v66 + 72) = v67;
  do
    v70 = __ldaxr(v69);
  while (__stlxr(v70 + 1, v69));
  v104 = *(_OWORD *)v88;
  v105 = "chainTo";
  v106 = 0;
  buf = (unint64_t)v12;
  v102 = (WTF::NativePromiseBase *)v66;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(v12, &v102, (WTF::Logger::LogSiteIdentifier *)&v104);
  v71 = (unsigned int *)v102;
  v102 = 0;
  if (v71)
  {
    v72 = v71 + 2;
    do
    {
      v73 = __ldaxr(v72);
      v74 = v73 - 1;
    }
    while (__stlxr(v74, v72));
    if (!v74)
    {
      atomic_store(1u, v71 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v71 + 8))(v71);
    }
  }
  v75 = (unsigned int *)*((_QWORD *)&buf + 1);
  *((_QWORD *)&buf + 1) = 0;
  if (v75)
  {
    v76 = v75 + 2;
    do
    {
      v77 = __ldaxr(v76);
      v78 = v77 - 1;
    }
    while (__stlxr(v78, v76));
    if (!v78)
    {
      atomic_store(1u, v75 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v75 + 8))(v75);
    }
  }
  result = (unsigned int *)buf;
  *(_QWORD *)&buf = 0;
  if (result)
  {
    v79 = result + 2;
    do
    {
      v80 = __ldaxr(v79);
      v81 = v80 - 1;
    }
    while (__stlxr(v81, v79));
    if (!v81)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo<void,WebCore::PlatformMediaError,1u>(WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,1u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1},void,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = off_1E340F6A0;
  v2 = a1[1];
  if (v2)
  {
    WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::assertIsDead(v2);
    v3 = (unsigned int *)a1[1];
    a1[1] = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    a1[1] = 0;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo<void,WebCore::PlatformMediaError,1u>(WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,1u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1},void,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> &&>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)a1 = off_1E340F6A0;
  v3 = *((_QWORD *)a1 + 1);
  if (v3)
  {
    WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::assertIsDead(v3);
    v4 = (unsigned int *)*((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      }
    }
  }
  else
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  return WTF::fastFree(a1, a2);
}

WTF::Lock *WTF::Detail::CallableWrapper<void WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo<void,WebCore::PlatformMediaError,1u>(WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,1u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1},void,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> &&>::call(WTF::NativePromiseBase *a1, char *a2)
{
  WTF::NativePromiseBase *v2;
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v10;
  int v11;
  int v12;
  WTF::Lock *result;
  int v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;

  v2 = a1;
  if (a2[1])
  {
    v17 = 0;
    v18 = 0;
    v19 = "operator()";
    v20 = 0;
    v3 = *((_QWORD *)a1 + 1);
    if (v3)
    {
      v5 = (unsigned __int8 *)(v3 + 48);
      if (__ldaxr((unsigned __int8 *)(v3 + 48)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v5))
      {
        goto LABEL_11;
      }
      a1 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v3 + 48);
LABEL_11:
      v11 = *(_DWORD *)(*(_QWORD *)(v3 + 56) + 16);
      v12 = __ldxr(v5);
      if (v12 == 1)
      {
        if (!__stlxr(0, v5))
        {
LABEL_16:
          v10 = *((_QWORD *)v2 + 1);
          if (!v11)
            return WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v10, a2, (WTF::Logger::LogSiteIdentifier *)&v17);
          goto LABEL_26;
        }
      }
      else
      {
        __clrex();
      }
      a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
      goto LABEL_16;
    }
    goto LABEL_8;
  }
  v17 = 0;
  v18 = 0;
  v19 = "operator()";
  v20 = 0;
  v7 = *((_QWORD *)a1 + 1);
  if (!v7)
  {
LABEL_8:
    v10 = 0;
    goto LABEL_26;
  }
  v8 = (unsigned __int8 *)(v7 + 48);
  if (__ldaxr((unsigned __int8 *)(v7 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_20;
  }
  a1 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v7 + 48);
LABEL_20:
  v14 = *(_DWORD *)(*(_QWORD *)(v7 + 56) + 16);
  v15 = __ldxr(v8);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, v8))
LABEL_24:
    a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v10 = *((_QWORD *)v2 + 1);
  if (!v14)
    return WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::resolve<std::enable_if<true,void>>(v10, (WTF::Logger::LogSiteIdentifier *)&v17);
LABEL_26:
  result = (WTF::Lock *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v16 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v16 = 0;
  if (v16)
    return (WTF::Lock *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)result, (WTF::Logger::LogSiteIdentifier *)&v17, v10);
  return result;
}

WTF::Lock *WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::resolve<std::enable_if<true,void>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *a2)
{
  WTF::Lock *v4;
  _BYTE *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  WTF::Lock *result;
  int v11;
  WTF::Lock *v12;
  char v13;
  char v14;

  v4 = (WTF::Lock *)(a1 + 48);
  v12 = v4;
  v13 = 1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  v4 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v6 = (_BYTE *)WTF::NativePromiseBase::logChannel(v4);
  if (*v6)
    v7 = v6[16] >= 4u;
  else
    v7 = 0;
  if (v7)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v6, a2, " resolving ", a1);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(unsigned int *)(v8 + 16);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_1E340F650[v9])(&v14, v8 + 8);
  *(_WORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = 1;
  result = (WTF::Lock *)WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::dispatchAll(a1, (unsigned __int8 **)&v12);
  if (v13)
  {
    result = v12;
    v11 = __ldxr((unsigned __int8 *)v12);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

_QWORD *WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E340F6E0;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E340F710;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E340F6E0;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E340F710;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  const char *v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  int v13;
  void *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t result;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD v24[4];
  unsigned __int8 *v25;

  v6 = *(unsigned __int8 *)(a3 + 1);
  v24[0] = a1;
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    if (v6)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,1u>,char [11],void const*,char [2]>((uint64_t)v7, v9, (WTF::Logger::LogSiteIdentifier *)(a1 + 24), a2);
  }
  v10 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_14:
  v12 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  (*(void (**)(unsigned __int8 **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(&v25, *(_QWORD *)(a1 + 72), a3);
  if (v12)
  {
    v24[0] = 0;
    v24[1] = 0;
    v24[2] = "<chained completion promise>";
    v24[3] = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::chainTo(v25, (unint64_t)v12, (WTF::Logger::LogSiteIdentifier *)v24);
  }
  v15 = (unsigned int *)v25;
  v25 = 0;
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
    }
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v12)
  {
    if (*v12)
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::assertIsDead(*v12);
      v20 = (unsigned int *)*v12;
      *v12 = 0;
      if (v20)
      {
        v21 = v20 + 2;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v20 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
        }
      }
    }
    else
    {
      *v12 = 0;
    }
    return WTF::fastFree((WTF *)v12, v14);
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::chainTo(unsigned __int8 *a1, unint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int **v10;
  uint64_t result;
  BOOL v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  WTF::Logger *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::Logger *v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  unsigned int *v72;
  __int128 v73;
  int v74;
  unsigned __int8 *v75;
  uint64_t v76;
  WTF::Logger *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  __int128 buf;
  const char *v95;
  WTF::StringImpl *v96;
  int v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl *v100;
  int v101;
  WTF::StringImpl *v102;
  int v103;
  WTF::StringImpl *v104;
  int v105;
  WTF::StringImpl *v106;
  int v107;
  WTF::StringImpl *v108[3];

  v4 = (uint64_t)a1;
  v108[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v5 = a1 + 48;
  if (__ldaxr(a1 + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEA534C](a1 + 48);
LABEL_5:
  *(_BYTE *)(v4 + 120) = 1;
  v7 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    v8 = v7 + 2;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = (unsigned int **)(v4 + 56);
  result = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(_BYTE *)result)
    v12 = *(unsigned __int8 *)(result + 16) >= 4u;
  else
    v12 = 0;
  if (!v12)
    goto LABEL_123;
  v13 = result;
  WTF::Logger::LogSiteIdentifier::toString(a3);
  WTF::String::String((WTF::String *)&v85, " invoking chainTo() [");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v84, v4);
  WTF::String::String((WTF::String *)&v83, " chainedPromise:");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v82, (uint64_t)v7);
  WTF::String::String((WTF::String *)&v81, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v80, "]");
  v78 = v85;
  v93 = v84;
  *(_QWORD *)&buf = v86;
  v91 = v82;
  v92 = v83;
  v89 = v14;
  v90 = v81;
  v88 = v80;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v78, (uint64_t *)&v93, (uint64_t *)&v92, (uint64_t *)&v91, (uint64_t *)&v90, (uint64_t *)&v89, (uint64_t *)&v88, &v87);
  if (!v87)
  {
    __break(0xC471u);
    return result;
  }
  v16 = v80;
  v80 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v15);
      if (!v14)
        goto LABEL_20;
      goto LABEL_18;
    }
    *(_DWORD *)v16 -= 2;
  }
  if (!v14)
    goto LABEL_20;
LABEL_18:
  if (*(_DWORD *)v14 == 2)
    WTF::StringImpl::destroy(v14, v15);
  else
    *(_DWORD *)v14 -= 2;
LABEL_20:
  v17 = v81;
  v81 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v82;
  v82 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v83;
  v83 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v84;
  v84 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v15);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v85;
  v85 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v15);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v86;
  v86 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v15);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = *(NSObject **)(v13 + 32);
  v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v24)
  {
    WTF::String::utf8();
    v26 = v78 ? (char *)v78 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v26;
    _os_log_impl(&dword_1940B8000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v24 = (uint64_t)v78;
    v78 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        v24 = WTF::fastFree((WTF *)v24, v25);
      else
        --*(_DWORD *)v24;
    }
  }
  if (*(_BYTE *)v13 && *(unsigned __int8 *)(v13 + 16) >= 4u)
  {
    v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v28 = *v27;
      if ((v28 & 1) != 0)
        break;
      v29 = __ldaxr(v27);
      if (v29 == v28)
      {
        if (!__stxr(v28 | 1, v27))
        {
          v75 = v5;
          v30 = WTF::Logger::observers((WTF::Logger *)v24);
          v31 = *(unsigned int *)(v30 + 12);
          if ((_DWORD)v31)
          {
            v32 = *(uint64_t **)v30;
            v76 = *(_QWORD *)v30 + 8 * v31;
            do
            {
              v33 = *v32;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(a3);
              LODWORD(v95) = 0;
              WTF::String::String((WTF::String *)&v96, " invoking chainTo() [");
              v97 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v98, v4);
              v99 = 0;
              WTF::String::String((WTF::String *)&v100, " chainedPromise:");
              v101 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v102, (uint64_t)v7);
              v103 = 0;
              WTF::String::String((WTF::String *)&v104, " isNothing:");
              v105 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v106 = v78;
              v107 = 0;
              WTF::String::String((WTF::String *)v108, "]");
              v78 = 0;
              v79 = 0;
              v34 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v79) = 8;
              v78 = v34;
              v35 = HIDWORD(v79);
              *((_DWORD *)v34 + 4 * HIDWORD(v79)) = buf;
              v36 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v34 + 2 * v35 + 1) = v36;
              *((_DWORD *)v34 + 4 * (v35 + 1)) = (_DWORD)v95;
              v37 = v96;
              if (v96)
                *(_DWORD *)v96 += 2;
              *((_QWORD *)v34 + 2 * (v35 + 1) + 1) = v37;
              *((_DWORD *)v34 + 4 * (v35 + 2)) = v97;
              v38 = v98;
              if (v98)
                *(_DWORD *)v98 += 2;
              *((_QWORD *)v34 + 2 * (v35 + 2) + 1) = v38;
              *((_DWORD *)v34 + 4 * (v35 + 3)) = v99;
              v39 = v100;
              if (v100)
                *(_DWORD *)v100 += 2;
              *((_QWORD *)v34 + 2 * (v35 + 3) + 1) = v39;
              *((_DWORD *)v34 + 4 * (v35 + 4)) = v101;
              v40 = v102;
              if (v102)
                *(_DWORD *)v102 += 2;
              *((_QWORD *)v34 + 2 * (v35 + 4) + 1) = v40;
              *((_DWORD *)v34 + 4 * (v35 + 5)) = v103;
              v41 = v104;
              if (v104)
                *(_DWORD *)v104 += 2;
              *((_QWORD *)v34 + 2 * (v35 + 5) + 1) = v41;
              *((_DWORD *)v34 + 4 * (v35 + 6)) = v105;
              v42 = v106;
              if (v106)
                *(_DWORD *)v106 += 2;
              *((_QWORD *)v34 + 2 * (v35 + 6) + 1) = v42;
              *((_DWORD *)v34 + 4 * (v35 + 7)) = v107;
              v43 = v108[0];
              if (v108[0])
                *(_DWORD *)v108[0] += 2;
              *((_QWORD *)v34 + 2 * (v35 + 7) + 1) = v43;
              HIDWORD(v79) = v35 + 8;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v33 + 16))(v33, v13, 4, &v78);
              v44 = v78;
              if (HIDWORD(v79))
              {
                v45 = 16 * HIDWORD(v79);
                v46 = (WTF::StringImpl **)((char *)v78 + 8);
                do
                {
                  v47 = *v46;
                  *v46 = 0;
                  if (v47)
                  {
                    if (*(_DWORD *)v47 == 2)
                      WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v25);
                    else
                      *(_DWORD *)v47 -= 2;
                  }
                  v46 += 2;
                  v45 -= 16;
                }
                while (v45);
                v44 = v78;
              }
              if (v44)
              {
                v78 = 0;
                LODWORD(v79) = 0;
                WTF::fastFree(v44, v25);
              }
              v48 = v108[0];
              v108[0] = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v25);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = v106;
              v106 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v25);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = v104;
              v104 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v25);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = v102;
              v102 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v25);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = v100;
              v100 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v25);
                else
                  *(_DWORD *)v52 -= 2;
              }
              v53 = v98;
              v98 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v25);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = v96;
              v96 = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v25);
                else
                  *(_DWORD *)v54 -= 2;
              }
              v55 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v55)
              {
                if (*(_DWORD *)v55 == 2)
                  WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v25);
                else
                  *(_DWORD *)v55 -= 2;
              }
              ++v32;
            }
            while (v32 != (uint64_t *)v76);
          }
          v56 = __ldxr(v27);
          if (v56 == 1)
          {
            v5 = v75;
            v10 = (unsigned int **)(v4 + 56);
            if (!__stlxr(0, v27))
              break;
          }
          else
          {
            __clrex();
            v5 = v75;
            v10 = (unsigned int **)(v4 + 56);
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v87;
  v87 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v25);
      if (!v7)
        goto LABEL_128;
      goto LABEL_124;
    }
    *(_DWORD *)result -= 2;
  }
LABEL_123:
  if (!v7)
    goto LABEL_128;
LABEL_124:
  v57 = v7 + 2;
  do
  {
    v58 = __ldaxr(v57);
    v59 = v58 - 1;
  }
  while (__stlxr(v59, v57));
  if (!v59)
  {
    atomic_store(1u, v7 + 2);
    result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
LABEL_128:
  if ((*v10)[4])
  {
    v60 = *(unsigned int **)a2;
    *(_QWORD *)a2 = 0;
    if (v60)
    {
      v61 = v60 + 2;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 + 1, v61));
      buf = 0uLL;
      v95 = "<chained promise>";
      v96 = 0;
      WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::Storage const&>((uint64_t)v60, v10, (WTF::Logger::LogSiteIdentifier *)&buf);
      do
      {
        v63 = __ldaxr(v61);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v61));
      if (!v64)
      {
        atomic_store(1u, v60 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 16))(v60);
      }
      result = WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::assertIsDead((uint64_t)v60);
      do
      {
        v65 = __ldaxr(v61);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v61));
      if (!v66)
      {
        atomic_store(1u, v60 + 2);
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v60 + 16))(v60);
      }
    }
    else
    {
      buf = 0uLL;
      v95 = "<chained promise>";
      v96 = 0;
      result = WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::Storage const&>(0, v10, (WTF::Logger::LogSiteIdentifier *)&buf);
    }
  }
  else
  {
    v67 = *(unsigned int *)(v4 + 116);
    if ((_DWORD)v67 == *(_DWORD *)(v4 + 112))
    {
      result = WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,1u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(v4 + 104), v67 + 1, a2);
      v68 = *(_QWORD *)(v4 + 104) + 40 * *(unsigned int *)(v4 + 116);
      v69 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)v68 = v69;
      v70 = *(_OWORD *)(result + 24);
      *(_OWORD *)(v68 + 8) = *(_OWORD *)(result + 8);
      *(_OWORD *)(v68 + 24) = v70;
    }
    else
    {
      v71 = *(_QWORD *)(v4 + 104) + 40 * v67;
      v72 = *(unsigned int **)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)v71 = v72;
      v73 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v71 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v71 + 8) = v73;
    }
    ++*(_DWORD *)(v4 + 116);
  }
  v74 = __ldxr(v5);
  if (v74 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

WTF::StringImpl *WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,1u>,char [11],void const*,char [2]>(uint64_t a1, const char *a2, WTF::Logger::LogSiteIdentifier *a3, uint64_t a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  WTF::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::Logger *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  int v50;
  uint64_t v51;
  WTF::Logger *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  __int128 buf;
  int v71;
  WTF::StringImpl *v72;
  int v73;
  WTF::StringImpl *v74;
  int v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84[3];

  v84[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v62, a2);
  WTF::String::String((WTF::String *)&v61, " then() call made from ");
  WTF::Logger::LogSiteIdentifier::toString(a3);
  WTF::String::String((WTF::String *)&v59, "[");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v58, a4);
  WTF::String::String((WTF::String *)&v57, " callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v55, "]");
  v53 = v61;
  v69 = v60;
  *(_QWORD *)&buf = v62;
  v67 = v58;
  v68 = v59;
  v65 = v56;
  v66 = v57;
  v64 = v55;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v53, (uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, (uint64_t *)&v66, (uint64_t *)&v65, (uint64_t *)&v64, &v63);
  if (v63)
  {
    v9 = v55;
    v55 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v56;
    v56 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v57;
    v57 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v58;
    v58 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v8);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v59;
    v59 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v8);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v60;
    v60 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v8);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v61;
    v61 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v62;
    v62 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v8);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = *(NSObject **)(a1 + 32);
    v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v18)
    {
      WTF::String::utf8();
      v20 = v53 ? (char *)v53 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v20;
      _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v18 = (uint64_t)v53;
      v53 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 1)
          v18 = WTF::fastFree((WTF *)v18, v19);
        else
          --*(_DWORD *)v18;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
    {
      v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v22 = *v21;
        if ((v22 & 1) != 0)
          break;
        v23 = __ldaxr(v21);
        if (v23 == v22)
        {
          if (!__stxr(v22 | 1, v21))
          {
            v24 = WTF::Logger::observers((WTF::Logger *)v18);
            v25 = *(unsigned int *)(v24 + 12);
            if ((_DWORD)v25)
            {
              v26 = *(uint64_t **)v24;
              v51 = *(_QWORD *)v24 + 8 * v25;
              do
              {
                v27 = *v26;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), a2);
                v71 = 0;
                WTF::String::String((WTF::String *)&v72, " then() call made from ");
                v73 = 0;
                WTF::Logger::LogSiteIdentifier::toString(a3);
                v75 = 0;
                WTF::String::String((WTF::String *)&v76, "[");
                v77 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v78, a4);
                v79 = 0;
                WTF::String::String((WTF::String *)&v80, " callback:");
                v81 = 0;
                WTF::LogArgument<void const*>::toString();
                v83 = 0;
                WTF::String::String((WTF::String *)v84, "]");
                v53 = 0;
                v54 = 0;
                v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                LODWORD(v54) = 8;
                v53 = v28;
                v29 = HIDWORD(v54);
                *((_DWORD *)v28 + 4 * HIDWORD(v54)) = buf;
                v30 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v28 + 2 * v29 + 1) = v30;
                *((_DWORD *)v28 + 4 * (v29 + 1)) = v71;
                v31 = v72;
                if (v72)
                  *(_DWORD *)v72 += 2;
                *((_QWORD *)v28 + 2 * (v29 + 1) + 1) = v31;
                *((_DWORD *)v28 + 4 * (v29 + 2)) = v73;
                v32 = v74;
                if (v74)
                  *(_DWORD *)v74 += 2;
                *((_QWORD *)v28 + 2 * (v29 + 2) + 1) = v32;
                *((_DWORD *)v28 + 4 * (v29 + 3)) = v75;
                v33 = v76;
                if (v76)
                  *(_DWORD *)v76 += 2;
                *((_QWORD *)v28 + 2 * (v29 + 3) + 1) = v33;
                *((_DWORD *)v28 + 4 * (v29 + 4)) = v77;
                v34 = v78;
                if (v78)
                  *(_DWORD *)v78 += 2;
                *((_QWORD *)v28 + 2 * (v29 + 4) + 1) = v34;
                *((_DWORD *)v28 + 4 * (v29 + 5)) = v79;
                v35 = v80;
                if (v80)
                  *(_DWORD *)v80 += 2;
                *((_QWORD *)v28 + 2 * (v29 + 5) + 1) = v35;
                *((_DWORD *)v28 + 4 * (v29 + 6)) = v81;
                v36 = v82;
                if (v82)
                  *(_DWORD *)v82 += 2;
                *((_QWORD *)v28 + 2 * (v29 + 6) + 1) = v36;
                *((_DWORD *)v28 + 4 * (v29 + 7)) = v83;
                v37 = v84[0];
                if (v84[0])
                  *(_DWORD *)v84[0] += 2;
                *((_QWORD *)v28 + 2 * (v29 + 7) + 1) = v37;
                HIDWORD(v54) = v29 + 8;
                (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v27 + 16))(v27, a1, 4, &v53);
                v38 = v53;
                if (HIDWORD(v54))
                {
                  v39 = 16 * HIDWORD(v54);
                  v40 = (WTF::StringImpl **)((char *)v53 + 8);
                  do
                  {
                    v41 = *v40;
                    *v40 = 0;
                    if (v41)
                    {
                      if (*(_DWORD *)v41 == 2)
                        WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v19);
                      else
                        *(_DWORD *)v41 -= 2;
                    }
                    v40 += 2;
                    v39 -= 16;
                  }
                  while (v39);
                  v38 = v53;
                }
                if (v38)
                {
                  v53 = 0;
                  LODWORD(v54) = 0;
                  WTF::fastFree(v38, v19);
                }
                v42 = v84[0];
                v84[0] = 0;
                if (v42)
                {
                  if (*(_DWORD *)v42 == 2)
                    WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v19);
                  else
                    *(_DWORD *)v42 -= 2;
                }
                v43 = v82;
                v82 = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v19);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                v44 = v80;
                v80 = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v19);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = v78;
                v78 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v19);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = v76;
                v76 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v19);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v74;
                v74 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v19);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v72;
                v72 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v19);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v19);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                ++v26;
              }
              while (v26 != (uint64_t *)v51);
            }
            v50 = __ldxr(v21);
            if (v50 == 1)
            {
              if (!__stlxr(0, v21))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v63;
    v63 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,1u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,1u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,1u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,1u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  unsigned int *v7;
  WTF *v8;
  unsigned int *v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 40 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = v3;
        do
        {
          v9 = *(unsigned int **)v8;
          *(_QWORD *)v8 = 0;
          *(_QWORD *)v7 = v9;
          v10 = *(_OWORD *)((char *)v8 + 8);
          *(_OWORD *)(v7 + 6) = *(_OWORD *)((char *)v8 + 24);
          *(_OWORD *)(v7 + 2) = v10;
          result = *(unsigned int **)v8;
          if (*(_QWORD *)v8)
          {
            WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::assertIsDead((uint64_t)result);
            result = *(unsigned int **)v8;
            *(_QWORD *)v8 = 0;
            if (result)
            {
              v11 = result + 2;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
              {
                atomic_store(1u, result + 2);
                result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
              }
            }
          }
          else
          {
            *(_QWORD *)v8 = 0;
          }
          v7 += 10;
          v8 = (WTF *)((char *)v8 + 40);
        }
        while (v8 != (WTF *)((char *)v3 + 40 * v4));
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore19SourceBufferPrivate19computeEvictionDataENS3_23ComputeEvictionDataRuleEENK3__0clEvEUlRT_E_vJRNS2_11TrackBufferEEE4callESA_(uint64_t result, uint64_t a2)
{
  **(_QWORD **)(result + 8) += *(_QWORD *)(a2 + 24);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore19SourceBufferPrivate19computeEvictionDataENS3_23ComputeEvictionDataRuleEENK3__1clEvEUlRT_E_vJRNS2_11TrackBufferEEE4callESA_(uint64_t a1, WebCore::TrackBuffer *this)
{
  uint64_t result;

  result = WebCore::TrackBuffer::codedFramesIntervalSize(this, *(const WTF::MediaTime **)(a1 + 16), *(const WTF::MediaTime **)(a1 + 24));
  **(_QWORD **)(a1 + 8) += result;
  return result;
}

WTF *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivate::computeEvictionData(WebCore::SourceBufferPrivate::ComputeEvictionDataRule)::$_1::operator() const(void)::{lambda(WebCore::TrackBuffer const&)#1},void,WebCore::TrackBuffer&>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::PlatformTimeRanges::intersectWith(*(WTF **)(a1 + 8), (__int128 **)(a2 + 96));
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore19SourceBufferPrivate19computeEvictionDataENS3_23ComputeEvictionDataRuleEENK3__1clEvEUlRT_E0_vJRNS2_11TrackBufferEEE4callESA_(uint64_t a1, WebCore::TrackBuffer *this)
{
  uint64_t result;

  result = WebCore::TrackBuffer::codedFramesIntervalSize(this, *(const WTF::MediaTime **)(a1 + 16), *(const WTF::MediaTime **)(a1 + 24));
  **(_QWORD **)(a1 + 8) += result;
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj1EE11whenSettledIZNS3_19SourceBufferPrivate21asyncEvictCodedFramesEyRKNS_9MediaTimeEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlRKNSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSQ_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E340F7E0;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj1EE11whenSettledIZNS3_19SourceBufferPrivate21asyncEvictCodedFramesEyRKNS_9MediaTimeEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlRKNSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSQ_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E340F7E0;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj1EE11whenSettledIZNS3_19SourceBufferPrivate21asyncEvictCodedFramesEyRKNS_9MediaTimeEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlRKNSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSQ_EE4callESQ_@<X0>(_QWORD *a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  WTF::NativePromiseBase *v15;
  _BYTE *v16;
  unsigned __int8 *result;
  uint64_t v18;
  __int128 v19;
  WTF::NativePromiseBase *v20;
  _BYTE *v21;
  __int128 v22;
  __int128 v23;
  char v24;

  v4 = *a2;
  v5 = v4 >> 8;
  v6 = a1[1];
  if (!v6)
    goto LABEL_16;
  v9 = a1[2];
  v8 = a1[3];
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_6:
  if (*(_QWORD *)(v6 + 24))
    ++*(_QWORD *)(v6 + 8);
  else
    v9 = 0;
  v11 = __ldxr((unsigned __int8 *)v6);
  if (v11 != 1)
  {
    __clrex();
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      goto LABEL_12;
LABEL_16:
    v9 = 0;
    v12 = 1;
    if (!v5)
      LOBYTE(v4) = 2;
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
    goto LABEL_15;
  if (!v9)
    goto LABEL_16;
LABEL_12:
  if (!v5)
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v8 + 192))(v8, a1[4], a1 + 5);
    v22 = 0uLL;
    *(_QWORD *)&v23 = "operator()";
    *((_QWORD *)&v23 + 1) = 0;
    v18 = WTF::fastMalloc((WTF *)0x80);
    *(_DWORD *)(v18 + 8) = 1;
    *(_QWORD *)v18 = off_1E340F638;
    v19 = v23;
    *(_OWORD *)(v18 + 16) = v22;
    *(_OWORD *)(v18 + 32) = v19;
    *(_BYTE *)(v18 + 48) = 0;
    v20 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v20 = 1;
    *((_DWORD *)v20 + 4) = 0;
    *(_QWORD *)(v18 + 56) = v20;
    *(_QWORD *)(v18 + 64) = v18 + 80;
    *(_QWORD *)(v18 + 72) = 3;
    *(_WORD *)(v18 + 120) = 0;
    *(_QWORD *)(v18 + 104) = 0;
    *(_QWORD *)(v18 + 112) = 0;
    v21 = (_BYTE *)WTF::NativePromiseBase::logChannel(v20);
    if (*v21 && v21[16] >= 4u)
      WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v21, v18);
    *a3 = v18;
    WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::resolve<std::enable_if<true,void>>(v18, (WTF::Logger::LogSiteIdentifier *)&v22);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 8));
  }
  v12 = 0;
LABEL_18:
  v24 = v4;
  v22 = 0uLL;
  *(_QWORD *)&v23 = "operator()";
  *((_QWORD *)&v23 + 1) = 0;
  v13 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)v13 = off_1E340F638;
  v14 = v23;
  *(_OWORD *)(v13 + 16) = v22;
  *(_OWORD *)(v13 + 32) = v14;
  *(_BYTE *)(v13 + 48) = 0;
  v15 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v15 = 1;
  *((_DWORD *)v15 + 4) = 0;
  *(_QWORD *)(v13 + 56) = v15;
  *(_QWORD *)(v13 + 64) = v13 + 80;
  *(_QWORD *)(v13 + 72) = 3;
  *(_WORD *)(v13 + 120) = 0;
  *(_QWORD *)(v13 + 104) = 0;
  *(_QWORD *)(v13 + 112) = 0;
  v16 = (_BYTE *)WTF::NativePromiseBase::logChannel(v15);
  if (*v16)
  {
    if (v16[16] >= 4u)
      WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v16, v13);
  }
  *a3 = v13;
  result = (unsigned __int8 *)WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v13, &v24, (WTF::Logger::LogSiteIdentifier *)&v22);
  if ((v12 & 1) == 0)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 8));
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_19SourceBufferPrivate31didReceiveInitializationSegmentEONS3_25SourceBufferPrivateClient21InitializationSegmentEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSP_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = off_1E340F808;
  v3 = a1[9];
  a1[9] = 0;
  if (!v3)
    goto LABEL_14;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    goto LABEL_14;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
LABEL_14:
  WebCore::SourceBufferPrivateClient::InitializationSegment::~InitializationSegment((WebCore::SourceBufferPrivateClient::InitializationSegment *)(a1 + 1), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_19SourceBufferPrivate31didReceiveInitializationSegmentEONS3_25SourceBufferPrivateClient21InitializationSegmentEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSP_EED0Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  int v10;

  *a1 = off_1E340F808;
  v3 = a1[9];
  a1[9] = 0;
  if (!v3)
    goto LABEL_14;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v10 = __ldxr((unsigned __int8 *)v3);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    goto LABEL_14;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
LABEL_14:
  WebCore::SourceBufferPrivateClient::InitializationSegment::~InitializationSegment((WebCore::SourceBufferPrivateClient::InitializationSegment *)(a1 + 1), a2);
  return WTF::fastFree((WTF *)a1, v8);
}

unsigned __int8 *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_19SourceBufferPrivate31didReceiveInitializationSegmentEONS3_25SourceBufferPrivateClient21InitializationSegmentEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSP_EE4callESP_@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  __int128 v15;
  _BYTE *v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int8x8_t v23;
  uint8x8_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int8x8_t v35;
  uint8x8_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int8x8_t v47;
  uint8x8_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  __int128 v58;
  _BYTE *v59;
  void *v60;
  uint64_t v61;
  __int128 v62;
  _BYTE *v63;
  void *v64;
  char v65;
  uint64_t v66;
  __int128 v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  int v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  char v79;
  char v80;

  v4 = *(_QWORD *)(a1 + 72);
  if (!v4)
    goto LABEL_17;
  v6 = *a2;
  v8 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD **)(a1 + 88);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
    ++*(_QWORD *)(v4 + 8);
  else
    v8 = 0;
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v8)
        goto LABEL_12;
      goto LABEL_17;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v8)
  {
LABEL_12:
    v11 = v7[10];
    if (!v11)
      goto LABEL_115;
    v12 = (_QWORD *)v7[11];
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_23;
    }
    MEMORY[0x19AEA534C](v11);
LABEL_23:
    if (*(_QWORD *)(v11 + 24))
      ++*(_QWORD *)(v11 + 8);
    else
      v12 = 0;
    v18 = __ldxr((unsigned __int8 *)v11);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
        if (v12)
          goto LABEL_29;
        goto LABEL_115;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v12)
    {
LABEL_29:
      if (*(_QWORD *)(a1 + 96) == v7[20])
      {
        if (v6 > 0xFF)
          goto LABEL_125;
        if (!*((_BYTE *)v7 + 153))
          goto LABEL_111;
        v19 = *(unsigned int *)(a1 + 36);
        if (v19 >= 2)
        {
          v20 = *(_QWORD *)(a1 + 24);
          v21 = v20 + 16 * v19;
          do
          {
            v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v20 + 8) + 48))(*(_QWORD *)(v20 + 8));
            v23 = (int8x8_t)v7[13];
            if (!*(_QWORD *)&v23)
              goto LABEL_125;
            v24 = (uint8x8_t)vcnt_s8(v23);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              v25 = v22;
              if (v22 >= *(_QWORD *)&v23)
                v25 = v22 % *(_QWORD *)&v23;
            }
            else
            {
              v25 = (*(_QWORD *)&v23 - 1) & v22;
            }
            v26 = *(_QWORD **)(v7[12] + 8 * v25);
            if (!v26)
              goto LABEL_125;
            v27 = (_QWORD *)*v26;
            if (!v27)
              goto LABEL_125;
            if (v24.u32[0] < 2uLL)
            {
              v28 = *(_QWORD *)&v23 - 1;
              do
              {
                v29 = v27[1];
                if (v29 == v22)
                {
                  if (v27[2] == v22)
                    goto LABEL_57;
                }
                else if ((v29 & v28) != v25)
                {
                  goto LABEL_125;
                }
                v27 = (_QWORD *)*v27;
              }
              while (v27);
              goto LABEL_125;
            }
            while (1)
            {
              v30 = v27[1];
              if (v30 == v22)
                break;
              if (v30 >= *(_QWORD *)&v23)
                v30 %= *(_QWORD *)&v23;
              if (v30 != v25)
                goto LABEL_125;
LABEL_55:
              v27 = (_QWORD *)*v27;
              if (!v27)
                goto LABEL_125;
            }
            if (v27[2] != v22)
              goto LABEL_55;
LABEL_57:
            v20 += 16;
          }
          while (v20 != v21);
        }
        v31 = *(unsigned int *)(a1 + 52);
        if (v31 >= 2)
        {
          v32 = *(_QWORD *)(a1 + 40);
          v33 = v32 + 16 * v31;
          do
          {
            v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v32 + 8) + 48))(*(_QWORD *)(v32 + 8));
            v35 = (int8x8_t)v7[13];
            if (!*(_QWORD *)&v35)
              goto LABEL_125;
            v36 = (uint8x8_t)vcnt_s8(v35);
            v36.i16[0] = vaddlv_u8(v36);
            if (v36.u32[0] > 1uLL)
            {
              v37 = v34;
              if (v34 >= *(_QWORD *)&v35)
                v37 = v34 % *(_QWORD *)&v35;
            }
            else
            {
              v37 = (*(_QWORD *)&v35 - 1) & v34;
            }
            v38 = *(_QWORD **)(v7[12] + 8 * v37);
            if (!v38)
              goto LABEL_125;
            v39 = (_QWORD *)*v38;
            if (!v39)
              goto LABEL_125;
            if (v36.u32[0] < 2uLL)
            {
              v40 = *(_QWORD *)&v35 - 1;
              do
              {
                v41 = v39[1];
                if (v41 == v34)
                {
                  if (v39[2] == v34)
                    goto LABEL_83;
                }
                else if ((v41 & v40) != v37)
                {
                  goto LABEL_125;
                }
                v39 = (_QWORD *)*v39;
              }
              while (v39);
              goto LABEL_125;
            }
            while (1)
            {
              v42 = v39[1];
              if (v42 == v34)
                break;
              if (v42 >= *(_QWORD *)&v35)
                v42 %= *(_QWORD *)&v35;
              if (v42 != v37)
                goto LABEL_125;
LABEL_81:
              v39 = (_QWORD *)*v39;
              if (!v39)
                goto LABEL_125;
            }
            if (v39[2] != v34)
              goto LABEL_81;
LABEL_83:
            v32 += 16;
          }
          while (v32 != v33);
        }
        if (*(_DWORD *)(a1 + 68) >= 2u)
        {
          v43 = *(unsigned int *)(a1 + 52);
          if ((_DWORD)v43)
          {
            v44 = *(_QWORD *)(a1 + 40);
            v45 = v44 + 16 * v43;
            do
            {
              v46 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v44 + 8) + 48))(*(_QWORD *)(v44 + 8));
              v47 = (int8x8_t)v7[13];
              if (!*(_QWORD *)&v47)
                goto LABEL_125;
              v48 = (uint8x8_t)vcnt_s8(v47);
              v48.i16[0] = vaddlv_u8(v48);
              if (v48.u32[0] > 1uLL)
              {
                v49 = v46;
                if (v46 >= *(_QWORD *)&v47)
                  v49 = v46 % *(_QWORD *)&v47;
              }
              else
              {
                v49 = (*(_QWORD *)&v47 - 1) & v46;
              }
              v50 = *(_QWORD **)(v7[12] + 8 * v49);
              if (!v50)
                goto LABEL_125;
              v51 = (_QWORD *)*v50;
              if (!v51)
                goto LABEL_125;
              if (v48.u32[0] < 2uLL)
              {
                v52 = *(_QWORD *)&v47 - 1;
                do
                {
                  v53 = v51[1];
                  if (v53 == v46)
                  {
                    if (v51[2] == v46)
                      goto LABEL_110;
                  }
                  else if ((v53 & v52) != v49)
                  {
                    goto LABEL_125;
                  }
                  v51 = (_QWORD *)*v51;
                }
                while (v51);
                goto LABEL_125;
              }
              while (1)
              {
                v54 = v51[1];
                if (v54 == v46)
                  break;
                if (v54 >= *(_QWORD *)&v47)
                  v54 %= *(_QWORD *)&v47;
                if (v54 != v49)
                  goto LABEL_125;
LABEL_108:
                v51 = (_QWORD *)*v51;
                if (!v51)
                  goto LABEL_125;
              }
              if (v51[2] != v46)
                goto LABEL_108;
LABEL_110:
              v44 += 16;
            }
            while (v44 != v45);
          }
        }
LABEL_111:
        v55 = a1 + 8;
        if (((*(uint64_t (**)(_QWORD *, uint64_t))(*v7 + 520))(v7, v55) & 1) != 0)
        {
          (*(void (**)(_QWORD *, uint64_t))(*v12 + 16))(v12, v55);
        }
        else
        {
LABEL_125:
          LOBYTE(v77) = 0;
          v79 = 0;
          (*(void (**)(_QWORD *, __int128 *))(*v7 + 528))(v7, &v77);
          if (v79)
            WebCore::SourceBufferPrivateClient::InitializationSegment::~InitializationSegment((WebCore::SourceBufferPrivateClient::InitializationSegment *)&v77, v64);
          if (v6 >= 0x100)
            v65 = v6;
          else
            v65 = 5;
          v80 = v65;
          v77 = 0uLL;
          *(_QWORD *)&v78 = "operator()";
          *((_QWORD *)&v78 + 1) = 0;
          v66 = WTF::fastMalloc((WTF *)0x78);
          *(_DWORD *)(v66 + 8) = 1;
          *(_QWORD *)v66 = off_1E3207198;
          v67 = v78;
          *(_OWORD *)(v66 + 16) = v77;
          *(_OWORD *)(v66 + 32) = v67;
          *(_BYTE *)(v66 + 48) = 0;
          *(_DWORD *)(v66 + 64) = 0;
          *(_QWORD *)(v66 + 72) = v66 + 88;
          *(_QWORD *)(v66 + 80) = 1;
          *(_QWORD *)(v66 + 96) = 0;
          *(_QWORD *)(v66 + 104) = 0;
          *(_WORD *)(v66 + 112) = 0;
          v68 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v66);
          if (*v68 && v68[16] >= 4u)
            WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v68, 4u, "creating ", v66);
          *a3 = v66;
          WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v66, &v80, (WTF::Logger::LogSiteIdentifier *)&v77);
        }
      }
      else
      {
        LOBYTE(v77) = 0;
        v79 = 0;
        (*(void (**)(_QWORD *, __int128 *))(*v7 + 528))(v7, &v77);
        if (v79)
          WebCore::SourceBufferPrivateClient::InitializationSegment::~InitializationSegment((WebCore::SourceBufferPrivateClient::InitializationSegment *)&v77, v60);
        v77 = 0uLL;
        *(_QWORD *)&v78 = "operator()";
        *((_QWORD *)&v78 + 1) = 0;
        v61 = WTF::fastMalloc((WTF *)0x78);
        *(_DWORD *)(v61 + 8) = 1;
        *(_QWORD *)v61 = off_1E3207198;
        v62 = v78;
        *(_OWORD *)(v61 + 16) = v77;
        *(_OWORD *)(v61 + 32) = v62;
        *(_BYTE *)(v61 + 48) = 0;
        *(_DWORD *)(v61 + 64) = 0;
        *(_QWORD *)(v61 + 72) = v61 + 88;
        *(_QWORD *)(v61 + 80) = 1;
        *(_QWORD *)(v61 + 96) = 0;
        *(_QWORD *)(v61 + 104) = 0;
        *(_WORD *)(v61 + 112) = 0;
        v63 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v61);
        if (*v63 && v63[16] >= 4u)
          WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v63, 4u, "creating ", v61);
        *a3 = v61;
        WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::resolve<std::enable_if<true,void>>(v61, (WTF::Logger::LogSiteIdentifier *)&v77);
      }
      v69 = v12[1];
      if (__ldaxr((unsigned __int8 *)v69))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v69))
      {
        goto LABEL_138;
      }
      MEMORY[0x19AEA534C](v69);
LABEL_138:
      v71 = *(_QWORD *)(v69 + 8);
      v72 = v71 - 1;
      *(_QWORD *)(v69 + 8) = v71 - 1;
      if (v71 == 1)
      {
        v76 = *(_QWORD *)(v69 + 16);
        v73 = *(_QWORD *)(v69 + 24);
        *(_QWORD *)(v69 + 24) = 0;
        v74 = v76 != 0;
      }
      else
      {
        v73 = 0;
        v74 = 1;
      }
      v75 = __ldxr((unsigned __int8 *)v69);
      if (v75 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v69))
        {
LABEL_145:
          if (!v72)
          {
            if (v73)
              (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
            if (!v74)
              WTF::fastFree((WTF *)v69, v56);
          }
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 8));
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v69);
      goto LABEL_145;
    }
LABEL_115:
    v80 = 2;
    v77 = 0uLL;
    *(_QWORD *)&v78 = "operator()";
    *((_QWORD *)&v78 + 1) = 0;
    v57 = WTF::fastMalloc((WTF *)0x78);
    *(_DWORD *)(v57 + 8) = 1;
    *(_QWORD *)v57 = off_1E3207198;
    v58 = v78;
    *(_OWORD *)(v57 + 16) = v77;
    *(_OWORD *)(v57 + 32) = v58;
    *(_BYTE *)(v57 + 48) = 0;
    *(_DWORD *)(v57 + 64) = 0;
    *(_QWORD *)(v57 + 72) = v57 + 88;
    *(_QWORD *)(v57 + 80) = 1;
    *(_QWORD *)(v57 + 96) = 0;
    *(_QWORD *)(v57 + 104) = 0;
    *(_WORD *)(v57 + 112) = 0;
    v59 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v57);
    if (*v59 && v59[16] >= 4u)
      WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v59, 4u, "creating ", v57);
    *a3 = v57;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v57, &v80, (WTF::Logger::LogSiteIdentifier *)&v77);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 8));
  }
LABEL_17:
  v80 = 2;
  v77 = 0uLL;
  *(_QWORD *)&v78 = "operator()";
  *((_QWORD *)&v78 + 1) = 0;
  v14 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)v14 = off_1E3207198;
  v15 = v78;
  *(_OWORD *)(v14 + 16) = v77;
  *(_OWORD *)(v14 + 32) = v15;
  *(_BYTE *)(v14 + 48) = 0;
  *(_DWORD *)(v14 + 64) = 0;
  *(_QWORD *)(v14 + 72) = v14 + 88;
  *(_QWORD *)(v14 + 80) = 1;
  *(_QWORD *)(v14 + 96) = 0;
  *(_QWORD *)(v14 + 104) = 0;
  *(_WORD *)(v14 + 112) = 0;
  v16 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v14);
  if (*v16 && v16[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v16, 4u, "creating ", v14);
  *a3 = v14;
  return (unsigned __int8 *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v14, &v80, (WTF::Logger::LogSiteIdentifier *)&v77);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_19SourceBufferPrivate31didReceiveInitializationSegmentEONS3_25SourceBufferPrivateClient21InitializationSegmentEE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSP_EED1Ev(_QWORD *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *a1 = off_1E340F848;
  WebCore::SourceBufferPrivateClient::InitializationSegment::~InitializationSegment((WebCore::SourceBufferPrivateClient::InitializationSegment *)(a1 + 4), a2);
  v4 = a1[2];
  a1[2] = 0;
  if (!v4)
    return a1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return a1;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_13:
    WTF::fastFree((WTF *)v4, v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_19SourceBufferPrivate31didReceiveInitializationSegmentEONS3_25SourceBufferPrivateClient21InitializationSegmentEE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSP_EED0Ev(_QWORD *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *a1 = off_1E340F848;
  WebCore::SourceBufferPrivateClient::InitializationSegment::~InitializationSegment((WebCore::SourceBufferPrivateClient::InitializationSegment *)(a1 + 4), a2);
  v4 = a1[2];
  a1[2] = 0;
  if (!v4)
    return WTF::fastFree((WTF *)a1, v3);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return WTF::fastFree((WTF *)a1, v3);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return WTF::fastFree((WTF *)a1, v3);
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_13;
      return WTF::fastFree((WTF *)a1, v3);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_13:
    WTF::fastFree((WTF *)v4, v3);
  return WTF::fastFree((WTF *)a1, v3);
}

unsigned __int8 *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_19SourceBufferPrivate31didReceiveInitializationSegmentEONS3_25SourceBufferPrivateClient21InitializationSegmentEE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSP_EE4callESP_@<X0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  _BYTE *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  __int128 v23;
  _BYTE *v24;
  __int16 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;

  v25 = *a2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    goto LABEL_16;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 24);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
    ++*(_QWORD *)(v4 + 8);
  else
    v7 = 0;
  v9 = __ldxr((unsigned __int8 *)v4);
  if (v9 != 1)
  {
    __clrex();
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_12;
    goto LABEL_16;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_15;
  if (v7)
  {
LABEL_12:
    *(_WORD *)(v6 + 153) = 1;
    if (HIBYTE(v25))
    {
      v10 = 0;
      LOBYTE(v26) = 0;
    }
    else
    {
      v26 = *(_OWORD *)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)&v27 = v15;
      v16 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;
      *((_QWORD *)&v27 + 1) = v16;
      v17 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = 0;
      v28 = v17;
      v18 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      v29 = v18;
      v19 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = 0;
      v30 = v19;
      v20 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = 0;
      v10 = 1;
      v31 = v20;
    }
    v32 = v10;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v6 + 528))(v6, &v26);
    if (v32)
      WebCore::SourceBufferPrivateClient::InitializationSegment::~InitializationSegment((WebCore::SourceBufferPrivateClient::InitializationSegment *)&v26, v21);
    v26 = 0uLL;
    *(_QWORD *)&v27 = "operator()";
    *((_QWORD *)&v27 + 1) = 0;
    v22 = WTF::fastMalloc((WTF *)0x78);
    *(_DWORD *)(v22 + 8) = 1;
    *(_QWORD *)v22 = off_1E3207198;
    v23 = v27;
    *(_OWORD *)(v22 + 16) = v26;
    *(_OWORD *)(v22 + 32) = v23;
    *(_BYTE *)(v22 + 48) = 0;
    *(_DWORD *)(v22 + 64) = 0;
    *(_QWORD *)(v22 + 72) = v22 + 88;
    *(_QWORD *)(v22 + 80) = 1;
    *(_QWORD *)(v22 + 96) = 0;
    *(_QWORD *)(v22 + 104) = 0;
    *(_WORD *)(v22 + 112) = 0;
    v24 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v22);
    if (*v24)
    {
      if (v24[16] >= 4u)
        WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v24, 4u, "creating ", v22);
    }
    *a3 = v22;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settle<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>(v22, &v25, (WTF::Logger::LogSiteIdentifier *)&v26);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 8));
  }
LABEL_16:
  v33 = 2;
  v26 = 0uLL;
  *(_QWORD *)&v27 = "operator()";
  *((_QWORD *)&v27 + 1) = 0;
  v11 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)v11 = off_1E3207198;
  v12 = v27;
  *(_OWORD *)(v11 + 16) = v26;
  *(_OWORD *)(v11 + 32) = v12;
  *(_BYTE *)(v11 + 48) = 0;
  *(_DWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = v11 + 88;
  *(_QWORD *)(v11 + 80) = 1;
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 104) = 0;
  *(_WORD *)(v11 + 112) = 0;
  v13 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v11);
  if (*v13 && v13[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v13, 4u, "creating ", v11);
  *a3 = v11;
  return (unsigned __int8 *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v11, &v33, (WTF::Logger::LogSiteIdentifier *)&v26);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_19SourceBufferPrivate36didUpdateFormatDescriptionForTrackIdEONS_3RefINS3_9TrackInfoENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEyE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS8_IS5_NSA_IS5_EENSC_IS5_EEEEJSU_EED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v13;

  *a1 = &off_1E340F870;
  v3 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = a1[1];
  a1[1] = 0;
  if (!v7)
    return a1;
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_11:
  v9 = *(_QWORD *)(v7 + 16) - 1;
  *(_QWORD *)(v7 + 16) = v9;
  if (v9)
  {
    v13 = __ldxr((unsigned __int8 *)v7);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    return a1;
  }
  v10 = *(_QWORD *)(v7 + 8);
  v11 = __ldxr((unsigned __int8 *)v7);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
    {
      if (!v10)
        goto LABEL_18;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (!v10)
LABEL_18:
    WTF::fastFree((WTF *)v7, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_19SourceBufferPrivate36didUpdateFormatDescriptionForTrackIdEONS_3RefINS3_9TrackInfoENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEyE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS8_IS5_NSA_IS5_EENSC_IS5_EEEEJSU_EED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v13;

  *(_QWORD *)this = &off_1E340F870;
  v3 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v7)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_11:
  v9 = *(_QWORD *)(v7 + 16) - 1;
  *(_QWORD *)(v7 + 16) = v9;
  if (v9)
  {
    v13 = __ldxr((unsigned __int8 *)v7);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    return WTF::fastFree(this, a2);
  }
  v10 = *(_QWORD *)(v7 + 8);
  v11 = __ldxr((unsigned __int8 *)v7);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
    {
      if (!v10)
        goto LABEL_18;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (!v10)
LABEL_18:
    WTF::fastFree((WTF *)v7, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_19SourceBufferPrivate36didUpdateFormatDescriptionForTrackIdEONS_3RefINS3_9TrackInfoENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEyE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS8_IS5_NSA_IS5_EENSC_IS5_EEEEJSU_EE4callESU_@<X0>(_QWORD *a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  _BYTE *v15;
  unsigned __int8 *result;
  uint64_t v17;
  __int128 v18;
  _BYTE *v19;
  __int128 v20;
  __int128 v21;
  char v22;

  v4 = *a2;
  v5 = v4 >> 8;
  v6 = a1[1];
  if (!v6)
    goto LABEL_16;
  v9 = a1[2];
  v8 = a1[3];
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_6:
  if (*(_QWORD *)(v6 + 24))
    ++*(_QWORD *)(v6 + 8);
  else
    v9 = 0;
  v11 = __ldxr((unsigned __int8 *)v6);
  if (v11 != 1)
  {
    __clrex();
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      goto LABEL_12;
LABEL_16:
    v9 = 0;
    v12 = 1;
    if (!v5)
      LOBYTE(v4) = 2;
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
    goto LABEL_15;
  if (!v9)
    goto LABEL_16;
LABEL_12:
  if (!v5)
  {
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v8 + 536))(v8, a1 + 4, a1[5]);
    v20 = 0uLL;
    *(_QWORD *)&v21 = "operator()";
    *((_QWORD *)&v21 + 1) = 0;
    v17 = WTF::fastMalloc((WTF *)0x78);
    *(_DWORD *)(v17 + 8) = 1;
    *(_QWORD *)v17 = off_1E3207198;
    v18 = v21;
    *(_OWORD *)(v17 + 16) = v20;
    *(_OWORD *)(v17 + 32) = v18;
    *(_BYTE *)(v17 + 48) = 0;
    *(_DWORD *)(v17 + 64) = 0;
    *(_QWORD *)(v17 + 72) = v17 + 88;
    *(_QWORD *)(v17 + 80) = 1;
    *(_QWORD *)(v17 + 96) = 0;
    *(_QWORD *)(v17 + 104) = 0;
    *(_WORD *)(v17 + 112) = 0;
    v19 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v17);
    if (*v19 && v19[16] >= 4u)
      WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v19, 4u, "creating ", v17);
    *a3 = v17;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::resolve<std::enable_if<true,void>>(v17, (WTF::Logger::LogSiteIdentifier *)&v20);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 8));
  }
  v12 = 0;
LABEL_18:
  v22 = v4;
  v20 = 0uLL;
  *(_QWORD *)&v21 = "operator()";
  *((_QWORD *)&v21 + 1) = 0;
  v13 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)v13 = off_1E3207198;
  v14 = v21;
  *(_OWORD *)(v13 + 16) = v20;
  *(_OWORD *)(v13 + 32) = v14;
  *(_BYTE *)(v13 + 48) = 0;
  *(_DWORD *)(v13 + 64) = 0;
  *(_QWORD *)(v13 + 72) = v13 + 88;
  *(_QWORD *)(v13 + 80) = 1;
  *(_QWORD *)(v13 + 96) = 0;
  *(_QWORD *)(v13 + 104) = 0;
  *(_WORD *)(v13 + 112) = 0;
  v15 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v13);
  if (*v15)
  {
    if (v15[16] >= 4u)
      WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v15, 4u, "creating ", v13);
  }
  *a3 = v13;
  result = (unsigned __int8 *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v13, &v22, (WTF::Logger::LogSiteIdentifier *)&v20);
  if ((v12 & 1) == 0)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 8));
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj1EE11whenSettledIZNS3_19SourceBufferPrivate6appendEONS_3RefINS3_12SharedBufferENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlRKNSt12experimental15fundamentals_v38expectedIvS4_EEE_NS8_INS2_IvS4_Lj0EEENSA_ISX_EENSC_ISX_EEEEJSV_EED1Ev(_QWORD *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *a1 = off_1E340F898;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a1 + 4, a2);
  v4 = a1[1];
  a1[1] = 0;
  if (!v4)
    return a1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return a1;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_13:
    WTF::fastFree((WTF *)v4, v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj1EE11whenSettledIZNS3_19SourceBufferPrivate6appendEONS_3RefINS3_12SharedBufferENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlRKNSt12experimental15fundamentals_v38expectedIvS4_EEE_NS8_INS2_IvS4_Lj0EEENSA_ISX_EENSC_ISX_EEEEJSV_EED0Ev(uint64_t *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *a1 = (uint64_t)off_1E340F898;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a1 + 4, a2);
  v4 = a1[1];
  a1[1] = 0;
  if (!v4)
    return WTF::fastFree((WTF *)a1, v3);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return WTF::fastFree((WTF *)a1, v3);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return WTF::fastFree((WTF *)a1, v3);
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_13;
      return WTF::fastFree((WTF *)a1, v3);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_13:
    WTF::fastFree((WTF *)v4, v3);
  return WTF::fastFree((WTF *)a1, v3);
}

unsigned __int8 *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj1EE11whenSettledIZNS3_19SourceBufferPrivate6appendEONS_3RefINS3_12SharedBufferENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlRKNSt12experimental15fundamentals_v38expectedIvS4_EEE_NS8_INS2_IvS4_Lj0EEENSA_ISX_EENSC_ISX_EEEEJSV_EE4callESV_@<X0>(_QWORD *a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  int v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  _BYTE *v15;
  unsigned __int8 *result;
  uint64_t v17;
  __int128 v18;
  _BYTE *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  _BYTE *v26;
  __int128 v27;
  __int128 v28;
  char v29;

  v4 = *a2;
  v5 = v4 >> 8;
  v6 = a1[1];
  if (!v6)
    goto LABEL_16;
  v9 = a1[2];
  v8 = (_QWORD *)a1[3];
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_6:
  if (*(_QWORD *)(v6 + 24))
    ++*(_QWORD *)(v6 + 8);
  else
    v9 = 0;
  v11 = __ldxr((unsigned __int8 *)v6);
  if (v11 != 1)
  {
    __clrex();
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      goto LABEL_12;
LABEL_16:
    v9 = 0;
    v12 = 1;
    if (!v5)
      LOBYTE(v4) = 2;
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
    goto LABEL_15;
  if (!v9)
    goto LABEL_16;
LABEL_12:
  if (!v5)
  {
    v27 = 0uLL;
    *(_QWORD *)&v28 = "operator()";
    *((_QWORD *)&v28 + 1) = 0;
    v17 = WTF::fastMalloc((WTF *)0x78);
    *(_DWORD *)(v17 + 8) = 1;
    *(_QWORD *)v17 = off_1E3207198;
    v18 = v28;
    *(_OWORD *)(v17 + 16) = v27;
    *(_OWORD *)(v17 + 32) = v18;
    *(_BYTE *)(v17 + 48) = 0;
    *(_DWORD *)(v17 + 64) = 0;
    *(_QWORD *)(v17 + 72) = v17 + 88;
    *(_QWORD *)(v17 + 80) = 1;
    *(_QWORD *)(v17 + 96) = 0;
    *(_QWORD *)(v17 + 104) = 0;
    *(_WORD *)(v17 + 112) = 0;
    v19 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v17);
    if (*v19 && v19[16] >= 4u)
      WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v19, 4u, "creating ", v17);
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::resolve<std::enable_if<true,void>>(v17, (WTF::Logger::LogSiteIdentifier *)&v27);
    v20 = (unsigned int *)v8[23];
    v8[23] = v17;
    if (v20)
    {
      v21 = v20 + 2;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v20 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
      }
    }
    if (*(_QWORD *)(a1[4] + 48) && a1[5] == v8[20])
    {
      (*(void (**)(_QWORD *, _QWORD *))(*v8 + 416))(v8, a1 + 4);
    }
    else
    {
      v27 = 0uLL;
      v28 = (unint64_t)"operator()";
      v24 = WTF::fastMalloc((WTF *)0x78);
      *(_DWORD *)(v24 + 8) = 1;
      *(_QWORD *)v24 = off_1E3207198;
      v25 = v28;
      *(_OWORD *)(v24 + 16) = v27;
      *(_OWORD *)(v24 + 32) = v25;
      *(_BYTE *)(v24 + 48) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      *(_QWORD *)(v24 + 72) = v24 + 88;
      *(_QWORD *)(v24 + 80) = 1;
      *(_QWORD *)(v24 + 96) = 0;
      *(_QWORD *)(v24 + 104) = 0;
      *(_WORD *)(v24 + 112) = 0;
      v26 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v24);
      if (*v26 && v26[16] >= 4u)
        WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v26, 4u, "creating ", v24);
      *a3 = v24;
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::resolve<std::enable_if<true,void>>(v24, (WTF::Logger::LogSiteIdentifier *)&v27);
    }
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 8));
  }
  v12 = 0;
LABEL_18:
  v29 = v4;
  v27 = 0uLL;
  *(_QWORD *)&v28 = "operator()";
  *((_QWORD *)&v28 + 1) = 0;
  v13 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)v13 = off_1E3207198;
  v14 = v28;
  *(_OWORD *)(v13 + 16) = v27;
  *(_OWORD *)(v13 + 32) = v14;
  *(_BYTE *)(v13 + 48) = 0;
  *(_DWORD *)(v13 + 64) = 0;
  *(_QWORD *)(v13 + 72) = v13 + 88;
  *(_QWORD *)(v13 + 80) = 1;
  *(_QWORD *)(v13 + 96) = 0;
  *(_QWORD *)(v13 + 104) = 0;
  *(_WORD *)(v13 + 112) = 0;
  v15 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v13);
  if (*v15)
  {
    if (v15[16] >= 4u)
      WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v15, 4u, "creating ", v13);
  }
  *a3 = v13;
  result = (unsigned __int8 *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v13, &v29, (WTF::Logger::LogSiteIdentifier *)&v27);
  if ((v12 & 1) == 0)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 8));
  return result;
}

_QWORD *WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E340F8C0;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E340F710;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E340F8C0;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E340F710;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  const char *v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  int v13;
  void *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t result;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD v24[4];
  unsigned __int8 *v25;

  v6 = *(unsigned __int8 *)(a3 + 1);
  v24[0] = a1;
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    if (v6)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,1u>,char [11],void const*,char [2]>((uint64_t)v7, v9, (WTF::Logger::LogSiteIdentifier *)(a1 + 24), a2);
  }
  v10 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_14:
  v12 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  (*(void (**)(unsigned __int8 **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(&v25, *(_QWORD *)(a1 + 72), a3);
  if (v12)
  {
    v24[0] = 0;
    v24[1] = 0;
    v24[2] = "<chained completion promise>";
    v24[3] = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo(v25, (unint64_t)v12, (WTF::Logger::LogSiteIdentifier *)v24);
  }
  v15 = (unsigned int *)v25;
  v25 = 0;
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
    }
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v12)
  {
    if (*v12)
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(*v12);
      v20 = (unsigned int *)*v12;
      *v12 = 0;
      if (v20)
      {
        v21 = v20 + 2;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v20 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
        }
      }
    }
    else
    {
      *v12 = 0;
    }
    return WTF::fastFree((WTF *)v12, v14);
  }
  return result;
}

unsigned __int8 *WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  WTF::NativePromiseBase *v8;
  unsigned __int8 *result;
  unsigned __int8 *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::Logger *v41;
  WTF::NativePromiseBase *v42;
  WTF::Logger::LogSiteIdentifier *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  WTF::NativePromiseBase *v59;
  int v60;
  uint64_t v61;
  WTF::Lock *v62;
  char v63;
  WTF::Logger *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  __int128 buf;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  WTF::StringImpl *v94[3];

  v94[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = (WTF::Lock *)(a1 + 48);
  v62 = v6;
  v63 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_4:
    v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(a1 + 120) = 1;
  v8 = *a2;
  result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v6);
  if (!*result)
    goto LABEL_117;
  v10 = result;
  if (result[16] < 4u)
    goto LABEL_117;
  WTF::Logger::LogSiteIdentifier::toString(a3);
  WTF::String::String((WTF::String *)&v71, " invoking maybeSettle() [");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v70, a1);
  WTF::String::String((WTF::String *)&v69, " callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v67, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v66, "]");
  v64 = v71;
  v79 = v70;
  *(_QWORD *)&buf = v72;
  v77 = v68;
  v78 = v69;
  v75 = v11;
  v76 = v67;
  v74 = v66;
  result = (unsigned __int8 *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v64, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, &v73);
  if (!v73)
  {
    __break(0xC471u);
    return result;
  }
  v13 = v66;
  v66 = 0;
  if (!v13)
  {
LABEL_11:
    if (v11)
      goto LABEL_12;
    goto LABEL_14;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::destroy(v13, v12);
  if (v11)
  {
LABEL_12:
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
LABEL_14:
  v14 = v67;
  v67 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v68;
  v68 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v69;
  v69 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v70;
  v70 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v12);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v71;
  v71 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v12);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v72;
  v72 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v12);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *((_QWORD *)v10 + 4);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v64 ? (char *)v64 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v64;
    v64 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*v10 && v10[16] >= 4u)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v61 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(a3);
              v81 = 0;
              WTF::String::String((WTF::String *)&v82, " invoking maybeSettle() [");
              v83 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v84, a1);
              v85 = 0;
              WTF::String::String((WTF::String *)&v86, " callback:");
              v87 = 0;
              WTF::LogArgument<void const*>::toString();
              v89 = 0;
              WTF::String::String((WTF::String *)&v90, " isNothing:");
              v91 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v92 = v64;
              v93 = 0;
              WTF::String::String((WTF::String *)v94, "]");
              v64 = 0;
              v65 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v65) = 8;
              v64 = v31;
              v32 = HIDWORD(v65);
              *((_DWORD *)v31 + 4 * HIDWORD(v65)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v81;
              v34 = v82;
              if (v82)
                *(_DWORD *)v82 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v83;
              v35 = v84;
              if (v84)
                *(_DWORD *)v84 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              *((_DWORD *)v31 + 4 * (v32 + 3)) = v85;
              v36 = v86;
              if (v86)
                *(_DWORD *)v86 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 3) + 1) = v36;
              *((_DWORD *)v31 + 4 * (v32 + 4)) = v87;
              v37 = v88;
              if (v88)
                *(_DWORD *)v88 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 4) + 1) = v37;
              *((_DWORD *)v31 + 4 * (v32 + 5)) = v89;
              v38 = v90;
              if (v90)
                *(_DWORD *)v90 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 5) + 1) = v38;
              *((_DWORD *)v31 + 4 * (v32 + 6)) = v91;
              v39 = v92;
              if (v92)
                *(_DWORD *)v92 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 6) + 1) = v39;
              *((_DWORD *)v31 + 4 * (v32 + 7)) = v93;
              v40 = v94[0];
              if (v94[0])
                *(_DWORD *)v94[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 7) + 1) = v40;
              HIDWORD(v65) = v32 + 8;
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, v10, 4, &v64);
              v41 = v64;
              if (HIDWORD(v65))
              {
                v42 = v8;
                v43 = a3;
                v44 = 16 * HIDWORD(v65);
                v45 = (WTF::StringImpl **)((char *)v64 + 8);
                do
                {
                  v46 = *v45;
                  *v45 = 0;
                  if (v46)
                  {
                    if (*(_DWORD *)v46 == 2)
                      WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v46 -= 2;
                  }
                  v45 += 2;
                  v44 -= 16;
                }
                while (v44);
                v41 = v64;
                a3 = v43;
                v8 = v42;
              }
              if (v41)
              {
                v64 = 0;
                LODWORD(v65) = 0;
                WTF::fastFree(v41, v22);
              }
              v47 = v94[0];
              v94[0] = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = v92;
              v92 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = v90;
              v90 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = v88;
              v88 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = v86;
              v86 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = v84;
              v84 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v52 -= 2;
              }
              v53 = v82;
              v82 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v54 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v61);
          }
          v55 = __ldxr(v24);
          if (v55 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (unsigned __int8 *)v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_117:
  if (*(_DWORD *)(*(_QWORD *)(a1 + 56) + 16))
  {
    result = WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallbackBase::dispatch(*a2, a1, (unsigned __int8 **)&v62);
  }
  else
  {
    v56 = *(unsigned int *)(a1 + 76);
    if ((_DWORD)v56 == *(_DWORD *)(a1 + 72))
    {
      result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallbackBase>>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 64), v56 + 1, (unint64_t)a2);
      v56 = *(unsigned int *)(a1 + 76);
      v57 = v56 + 1;
      v58 = *(_QWORD *)(a1 + 64);
      v59 = *(WTF::NativePromiseBase **)result;
      *(_QWORD *)result = 0;
    }
    else
    {
      v57 = v56 + 1;
      v58 = *(_QWORD *)(a1 + 64);
      v59 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v58 + 8 * v56) = v59;
    *(_DWORD *)(a1 + 76) = v57;
  }
  if (v63)
  {
    result = (unsigned __int8 *)v62;
    v60 = __ldxr((unsigned __int8 *)v62);
    if (v60 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v62))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

char *WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallbackBase>>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 4)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 3;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v20);
          v19 = *a1;
        }
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x1961C9DE4);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 4)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 3;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_19SourceBufferPrivate6appendEONS_3RefINS3_12SharedBufferENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS8_INS2_IvS4_Lj1EEENSA_ISW_EENSC_ISW_EEEEJSU_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E340F8F0;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_19SourceBufferPrivate6appendEONS_3RefINS3_12SharedBufferENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS8_INS2_IvS4_Lj1EEENSA_ISW_EENSC_ISW_EEEEJSU_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E340F8F0;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_19SourceBufferPrivate6appendEONS_3RefINS3_12SharedBufferENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS8_INS2_IvS4_Lj1EEENSA_ISW_EENSC_ISW_EEEEJSU_EE4callESU_@<X0>(_QWORD *a1@<X0>, __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  WTF::NativePromiseBase *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  __int128 v26;
  WTF::NativePromiseBase *v27;
  _BYTE *v28;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  const char *v37;
  uint64_t v38;
  WTF::NativePromiseBase *v39;

  v4 = a1[1];
  if (!v4)
    goto LABEL_27;
  v5 = *a2;
  v7 = a1[2];
  v6 = a1[3];
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
    ++*(_QWORD *)(v4 + 8);
  else
    v7 = 0;
  v9 = __ldxr((unsigned __int8 *)v4);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        goto LABEL_12;
      goto LABEL_27;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
  {
LABEL_12:
    WebCore::SourceBufferPrivate::processPendingMediaSamples(v6);
    v10 = *(_QWORD *)(v6 + 184);
    v11 = *(_QWORD *)(v6 + 32);
    v34 = 0uLL;
    v12 = WTF::fastMalloc((WTF *)0x50);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    v13 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v13 = off_1E340F918;
    *(_WORD *)(v13 + 8) = v5;
    *(_DWORD *)(v12 + 8) = 1;
    *(_QWORD *)(v12 + 16) = v11;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 40) = "operator()";
    *(_QWORD *)(v12 + 48) = 0;
    *(_WORD *)(v12 + 56) = 0;
    *(_QWORD *)v12 = &off_1E340F940;
    v14 = (unsigned int *)(v10 + 8);
    *(_QWORD *)(v12 + 64) = 0;
    *(_QWORD *)(v12 + 72) = v13;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    *(_QWORD *)&v35 = v10;
    *((_QWORD *)&v35 + 1) = v12;
    v36 = v34;
    v37 = "operator()";
    v38 = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>>::completionPromise(a3, (uint64_t *)&v35);
    v16 = (WTF::NativePromiseBase *)*((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1))
    {
      *((_QWORD *)&v35 + 1) = 0;
      v39 = v16;
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(v35, &v39, (WTF::Logger::LogSiteIdentifier *)&v36);
      v17 = (unsigned int *)v39;
      v39 = 0;
      if (v17)
      {
        v18 = v17 + 2;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v17 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
        }
      }
      v21 = (unsigned int *)*((_QWORD *)&v35 + 1);
      *((_QWORD *)&v35 + 1) = 0;
      if (v21)
      {
        v22 = v21 + 2;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v21 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
        }
      }
    }
    else
    {
      *((_QWORD *)&v35 + 1) = 0;
    }
    v30 = (unsigned int *)v35;
    *(_QWORD *)&v35 = 0;
    if (v30)
    {
      v31 = v30 + 2;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v30 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 16))(v30);
      }
    }
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 8));
  }
LABEL_27:
  LOBYTE(v34) = 2;
  v35 = 0uLL;
  *(_QWORD *)&v36 = "operator()";
  *((_QWORD *)&v36 + 1) = 0;
  v25 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v25 + 8) = 1;
  *(_QWORD *)v25 = off_1E340F638;
  v26 = v36;
  *(_OWORD *)(v25 + 16) = v35;
  *(_OWORD *)(v25 + 32) = v26;
  *(_BYTE *)(v25 + 48) = 0;
  v27 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v27 = 1;
  *((_DWORD *)v27 + 4) = 0;
  *(_QWORD *)(v25 + 56) = v27;
  *(_QWORD *)(v25 + 64) = v25 + 80;
  *(_QWORD *)(v25 + 72) = 3;
  *(_WORD *)(v25 + 120) = 0;
  *(_QWORD *)(v25 + 104) = 0;
  *(_QWORD *)(v25 + 112) = 0;
  v28 = (_BYTE *)WTF::NativePromiseBase::logChannel(v27);
  if (*v28 && v28[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v28, v25);
  *a3 = v25;
  return (unsigned __int8 *)WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v25, (char *)&v34, (WTF::Logger::LogSiteIdentifier *)&v35);
}

WTF::Lock *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZZNS3_19SourceBufferPrivate6appendEONS_3RefINS3_12SharedBufferENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__1clINSt12experimental15fundamentals_v38expectedIvS4_EEEENS8_INS2_IvS4_Lj1EEENSA_ISM_EENSC_ISM_EEEET_EUlSQ_E_EEDaRNS_34RefCountedSerialFunctionDispatcherEOSQ_RKNS_6Logger17LogSiteIdentifierEEUlOSL_E_SP_JS10_EE4callES10_@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v4;
  char *v5;
  uint64_t v6;
  __int128 v7;
  WTF::NativePromiseBase *v8;
  _BYTE *v9;
  WTF::Lock *result;
  uint64_t v11;
  __int128 v12;
  unsigned __int8 *v13;
  WTF::NativePromiseBase *v14;
  unsigned __int8 *v15;
  _BYTE *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE v22[2];
  __int128 v23;
  __int128 v24;
  WTF::Lock *v25;
  char v26;
  char v27;

  v4 = *a2;
  v22[0] = *(_BYTE *)a2;
  if (*(_BYTE *)(a1 + 9))
  {
    if (v4 >= 0x100)
      v5 = v22;
    else
      v5 = (char *)(a1 + 8);
  }
  else
  {
    if (v4 <= 0xFF)
    {
      v23 = 0uLL;
      *(_QWORD *)&v24 = "operator()";
      *((_QWORD *)&v24 + 1) = 0;
      v6 = WTF::fastMalloc((WTF *)0x80);
      *(_DWORD *)(v6 + 8) = 1;
      *(_QWORD *)v6 = off_1E340F638;
      v7 = v24;
      *(_OWORD *)(v6 + 16) = v23;
      *(_OWORD *)(v6 + 32) = v7;
      *(_BYTE *)(v6 + 48) = 0;
      v8 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v8 = 1;
      *((_DWORD *)v8 + 4) = 0;
      *(_QWORD *)(v6 + 56) = v8;
      *(_QWORD *)(v6 + 64) = v6 + 80;
      *(_QWORD *)(v6 + 72) = 3;
      *(_WORD *)(v6 + 120) = 0;
      *(_QWORD *)(v6 + 104) = 0;
      *(_QWORD *)(v6 + 112) = 0;
      v9 = (_BYTE *)WTF::NativePromiseBase::logChannel(v8);
      if (*v9 && v9[16] >= 4u)
        WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v9, v6);
      *a3 = v6;
      return WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::resolve<std::enable_if<true,void>>(v6, (WTF::Logger::LogSiteIdentifier *)&v23);
    }
    v5 = v22;
  }
  v23 = 0uLL;
  *(_QWORD *)&v24 = "operator()";
  *((_QWORD *)&v24 + 1) = 0;
  v11 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)v11 = off_1E340F638;
  v12 = v24;
  *(_OWORD *)(v11 + 16) = v23;
  *(_OWORD *)(v11 + 32) = v12;
  *(_BYTE *)(v11 + 48) = 0;
  v13 = (unsigned __int8 *)(v11 + 48);
  v14 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v14 = 1;
  *((_DWORD *)v14 + 4) = 0;
  *(_QWORD *)(v11 + 56) = v14;
  *(_QWORD *)(v11 + 64) = v11 + 80;
  *(_QWORD *)(v11 + 72) = 3;
  *(_WORD *)(v11 + 120) = 0;
  *(_QWORD *)(v11 + 104) = 0;
  *(_QWORD *)(v11 + 112) = 0;
  v15 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v14);
  if (*v15 && v15[16] >= 4u)
    v15 = (unsigned __int8 *)WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v15, v11);
  *a3 = v11;
  v25 = (WTF::Lock *)(v11 + 48);
  v26 = 1;
  if (__ldaxr(v13))
  {
    __clrex();
LABEL_17:
    v15 = (unsigned __int8 *)MEMORY[0x19AEA534C](v13);
    goto LABEL_18;
  }
  if (__stxr(1u, v13))
    goto LABEL_17;
LABEL_18:
  v17 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v15);
  if (*v17 && v17[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v17, (WTF::Logger::LogSiteIdentifier *)&v23, " rejecting ", v11);
  v18 = *v5;
  v19 = *(_QWORD *)(v11 + 56);
  v20 = *(unsigned int *)(v19 + 16);
  if ((_DWORD)v20 != -1)
    ((void (*)(char *, uint64_t))off_1E340F650[v20])(&v27, v19 + 8);
  *(_BYTE *)(v19 + 8) = v18;
  *(_BYTE *)(v19 + 9) = 1;
  *(_DWORD *)(v19 + 16) = 1;
  result = (WTF::Lock *)WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::dispatchAll(v11, (unsigned __int8 **)&v25);
  if (v26)
  {
    result = v25;
    v21 = __ldxr((unsigned __int8 *)v25);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v25))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

unsigned int *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>>::completionPromise(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  WTF::NativePromiseBase *v7;
  _BYTE *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  WTF::NativePromiseBase *v21;
  unsigned int *result;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  WTF::NativePromiseBase *v26;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  v5 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v5 + 8) = 1;
  v6 = (unsigned int *)(v5 + 8);
  *(_QWORD *)v5 = off_1E340F638;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = "<completion promise>";
  *(_QWORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 48) = 0;
  v7 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v7 = 1;
  *((_DWORD *)v7 + 4) = 0;
  *(_QWORD *)(v5 + 56) = v7;
  *(_QWORD *)(v5 + 64) = v5 + 80;
  *(_QWORD *)(v5 + 72) = 3;
  *(_WORD *)(v5 + 120) = 0;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 112) = 0;
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8 && v8[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v8, v5);
  *v4 = v5;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = "<completion promise>";
  v4[4] = 0;
  do
    v10 = __ldaxr(v6);
  while (__stlxr(v10 + 1, v6));
  *a1 = v5;
  v11 = a2[1];
  v12 = (unsigned __int8 *)(v11 + 57);
  if (__ldaxr((unsigned __int8 *)(v11 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEA534C](v11 + 57);
LABEL_10:
  v14 = *(uint64_t **)(v11 + 64);
  *(_QWORD *)(v11 + 64) = v4;
  if (v14)
  {
    if (*v14)
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::assertIsDead(*v14);
      v15 = (unsigned int *)*v14;
      *v14 = 0;
      if (v15)
      {
        v16 = v15 + 2;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v15 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
        }
      }
    }
    else
    {
      *v14 = 0;
    }
    WTF::fastFree((WTF *)v14, v9);
  }
  v19 = __ldxr(v12);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, v12))
LABEL_23:
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 57));
  v20 = *a2;
  v21 = (WTF::NativePromiseBase *)a2[1];
  a2[1] = 0;
  v26 = v21;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(v20, &v26, (WTF::Logger::LogSiteIdentifier *)(a2 + 2));
  result = (unsigned int *)v26;
  v26 = 0;
  if (result)
  {
    v23 = result + 2;
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

_QWORD *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E340F940;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E3205AE8;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E340F940;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E3205AE8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  int v13;
  void *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t result;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD v24[4];
  unsigned __int8 *v25;

  v6 = *(unsigned __int8 *)(a3 + 1);
  v24[0] = a1;
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    if (v6)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [2]>((uint64_t)v7, 4u, v9, " then() call made from ", (WTF::Logger::LogSiteIdentifier *)(a1 + 24), "[", a2, " callback:", (uint64_t)v24, "]");
  }
  v10 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_14:
  v12 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  (*(void (**)(unsigned __int8 **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(&v25, *(_QWORD *)(a1 + 72), a3);
  if (v12)
  {
    v24[0] = 0;
    v24[1] = 0;
    v24[2] = "<chained completion promise>";
    v24[3] = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::chainTo(v25, (unint64_t)v12, (WTF::Logger::LogSiteIdentifier *)v24);
  }
  v15 = (unsigned int *)v25;
  v25 = 0;
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
    }
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v12)
  {
    if (*v12)
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::assertIsDead(*v12);
      v20 = (unsigned int *)*v12;
      *v12 = 0;
      if (v20)
      {
        v21 = v20 + 2;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v20 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
        }
      }
    }
    else
    {
      *v12 = 0;
    }
    return WTF::fastFree((WTF *)v12, v14);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj1EE11whenSettledIZNS3_19SourceBufferPrivate6appendEONS_3RefINS3_12SharedBufferENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEE3__2EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlRKNSt12experimental15fundamentals_v38expectedIvS4_EEE_NS8_IS5_NSA_IS5_EENSC_IS5_EEEEJSV_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E340F970;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj1EE11whenSettledIZNS3_19SourceBufferPrivate6appendEONS_3RefINS3_12SharedBufferENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEE3__2EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlRKNSt12experimental15fundamentals_v38expectedIvS4_EEE_NS8_IS5_NSA_IS5_EENSC_IS5_EEEEJSV_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E340F970;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj1EE11whenSettledIZNS3_19SourceBufferPrivate6appendEONS_3RefINS3_12SharedBufferENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEE3__2EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlRKNSt12experimental15fundamentals_v38expectedIvS4_EEE_NS8_IS5_NSA_IS5_EENSC_IS5_EEEEJSV_EE4callESV_@<X0>(_QWORD *a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  WTF::NativePromiseBase *v15;
  _BYTE *v16;
  unsigned __int8 *result;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  __int128 v22;
  WTF::NativePromiseBase *v23;
  _BYTE *v24;
  int v25;
  char *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  char *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  WTF::NativePromiseBase *v40;
  _BYTE *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  void *v51;
  uint64_t v53;
  __int128 v54;
  _BYTE *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  _QWORD *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  void *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  WTF *v85;
  WTF *v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  int v97;
  uint64_t v98;
  uint64_t *v99;
  unsigned int *v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  _QWORD *v105;
  WTF *v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  const char *v111;
  uint64_t v112;
  WTF::NativePromiseBase *v113;

  v4 = *a2;
  v5 = v4 >> 8;
  v6 = a1[1];
  if (!v6)
    goto LABEL_16;
  v9 = a1[2];
  v8 = a1[3];
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_6:
  if (*(_QWORD *)(v6 + 24))
    ++*(_QWORD *)(v6 + 8);
  else
    v9 = 0;
  v11 = __ldxr((unsigned __int8 *)v6);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
    {
      if (v9)
        goto LABEL_12;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  if (v9)
  {
LABEL_12:
    if (v5)
    {
      v12 = 0;
      goto LABEL_18;
    }
    WebCore::SourceBufferPrivate::computeEvictionData((_QWORD *)v8, 0);
    if (a1[4] != *(_QWORD *)(v8 + 160))
    {
      v109 = 0uLL;
      *(_QWORD *)&v110 = "operator()";
      *((_QWORD *)&v110 + 1) = 0;
      v21 = WTF::fastMalloc((WTF *)0x80);
      *(_DWORD *)(v21 + 8) = 1;
      *(_QWORD *)v21 = off_1E340F638;
      v22 = v110;
      *(_OWORD *)(v21 + 16) = v109;
      *(_OWORD *)(v21 + 32) = v22;
      *(_BYTE *)(v21 + 48) = 0;
      v23 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v23 = 1;
      *((_DWORD *)v23 + 4) = 0;
      *(_QWORD *)(v21 + 56) = v23;
      *(_QWORD *)(v21 + 64) = v21 + 80;
      *(_QWORD *)(v21 + 72) = 3;
      *(_WORD *)(v21 + 120) = 0;
      *(_QWORD *)(v21 + 104) = 0;
      *(_QWORD *)(v21 + 112) = 0;
      v24 = (_BYTE *)WTF::NativePromiseBase::logChannel(v23);
      if (*v24 && v24[16] >= 4u)
        WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v24, v21);
      *a3 = v21;
      WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::resolve<std::enable_if<true,void>>(v21, (WTF::Logger::LogSiteIdentifier *)&v109);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 8));
    }
    v18 = *(_QWORD *)(v8 + 80);
    if (!v18)
      goto LABEL_51;
    v19 = *(_QWORD **)(v8 + 88);
    if (__ldaxr((unsigned __int8 *)v18))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v18))
    {
      goto LABEL_34;
    }
    MEMORY[0x19AEA534C](v18);
LABEL_34:
    if (*(_QWORD *)(v18 + 24))
      ++*(_QWORD *)(v18 + 8);
    else
      v19 = 0;
    v25 = __ldxr((unsigned __int8 *)v18);
    if (v25 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v18))
      {
LABEL_42:
        if (v19)
        {
          v106 = 0;
          v107 = 0;
          WebCore::SourceBufferPrivate::updateBuffered((WebCore::SourceBufferPrivate *)&v109, (_QWORD *)v8);
          v26 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v106, 1uLL, (unint64_t)&v109);
          v27 = HIDWORD(v107);
          v28 = v106;
          v29 = *(_QWORD *)v26;
          *(_QWORD *)v26 = 0;
          *((_QWORD *)v28 + v27) = v29;
          v30 = (unsigned int *)v109;
          HIDWORD(v107) = v27 + 1;
          *(_QWORD *)&v109 = 0;
          if (v30)
          {
            v31 = v30 + 2;
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              atomic_store(1u, v30 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 16))(v30);
            }
          }
          v109 = *(_OWORD *)(v8 + 256);
          if (WTF::MediaTime::compare((WTF::MediaTime *)(v8 + 288), (const WTF::MediaTime *)&v109) == 1)
          {
            (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(*v19 + 32))(&v109, v19, v8 + 288);
            LODWORD(v34) = HIDWORD(v107);
            if (HIDWORD(v107) == (_DWORD)v107)
            {
              v35 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v106, HIDWORD(v107) + 1, (unint64_t)&v109);
              v34 = HIDWORD(v107);
              v36 = v106;
              v37 = *(_QWORD *)v35;
              *(_QWORD *)v35 = 0;
              *((_QWORD *)v36 + v34) = v37;
            }
            else
            {
              v42 = v109;
              *(_QWORD *)&v109 = 0;
              *((_QWORD *)v106 + HIDWORD(v107)) = v42;
            }
            HIDWORD(v107) = v34 + 1;
            v43 = (unsigned int *)v109;
            *(_QWORD *)&v109 = 0;
            if (v43)
            {
              v44 = v43 + 2;
              do
              {
                v45 = __ldaxr(v44);
                v46 = v45 - 1;
              }
              while (__stlxr(v46, v44));
              if (!v46)
              {
                atomic_store(1u, v43 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 16))(v43);
              }
            }
          }
          v47 = HIDWORD(v107);
          if (!HIDWORD(v107))
          {
            v109 = 0uLL;
            *(_QWORD *)&v110 = "all";
            *((_QWORD *)&v110 + 1) = 0;
            v53 = WTF::fastMalloc((WTF *)0x78);
            *(_DWORD *)(v53 + 8) = 1;
            *(_QWORD *)v53 = off_1E3207198;
            v54 = v110;
            *(_OWORD *)(v53 + 16) = v109;
            *(_OWORD *)(v53 + 32) = v54;
            *(_BYTE *)(v53 + 48) = 0;
            *(_DWORD *)(v53 + 64) = 0;
            *(_QWORD *)(v53 + 72) = v53 + 88;
            *(_QWORD *)(v53 + 80) = 1;
            *(_QWORD *)(v53 + 96) = 0;
            *(_QWORD *)(v53 + 104) = 0;
            *(_WORD *)(v53 + 112) = 0;
            v55 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v53);
            if (*v55 && v55[16] >= 4u)
              WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v55, 4u, "creating ", v53);
            WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::resolve<std::enable_if<true,void>>(v53, (WTF::Logger::LogSiteIdentifier *)&v109);
LABEL_102:
            v109 = 0uLL;
            *(_QWORD *)&v110 = "operator Ref";
            *((_QWORD *)&v110 + 1) = 0;
            WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::convert<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>(a3, v53, &v109);
            if (v53)
            {
              v82 = (unsigned int *)(v53 + 8);
              do
              {
                v83 = __ldaxr(v82);
                v84 = v83 - 1;
              }
              while (__stlxr(v84, v82));
              if (!v84)
              {
                atomic_store(1u, (unsigned int *)(v53 + 8));
                (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
              }
            }
            v85 = v106;
            if (HIDWORD(v107))
            {
              v86 = (WTF *)((char *)v106 + 8 * HIDWORD(v107));
              do
              {
                v87 = *(unsigned int **)v85;
                *(_QWORD *)v85 = 0;
                if (v87)
                {
                  v88 = v87 + 2;
                  do
                  {
                    v89 = __ldaxr(v88);
                    v90 = v89 - 1;
                  }
                  while (__stlxr(v90, v88));
                  if (!v90)
                  {
                    atomic_store(1u, v87 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v87 + 16))(v87);
                  }
                }
                v85 = (WTF *)((char *)v85 + 8);
              }
              while (v85 != v86);
              v85 = v106;
            }
            if (v85)
              WTF::fastFree(v85, v81);
            v91 = v19[1];
            if (__ldaxr((unsigned __int8 *)v91))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v91))
            {
              goto LABEL_122;
            }
            MEMORY[0x19AEA534C](v91);
LABEL_122:
            v93 = *(_QWORD *)(v91 + 8);
            v94 = v93 - 1;
            *(_QWORD *)(v91 + 8) = v93 - 1;
            if (v93 == 1)
            {
              v98 = *(_QWORD *)(v91 + 16);
              v95 = *(_QWORD *)(v91 + 24);
              *(_QWORD *)(v91 + 24) = 0;
              v96 = v98 != 0;
            }
            else
            {
              v95 = 0;
              v96 = 1;
            }
            v97 = __ldxr((unsigned __int8 *)v91);
            if (v97 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v91))
              {
LABEL_129:
                if (!v94)
                {
                  if (v95)
                    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
                  if (!v96)
                    WTF::fastFree((WTF *)v91, v81);
                }
                return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 8));
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v91);
            goto LABEL_129;
          }
          v105 = v19;
          v48 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v48 = 1;
          *(_BYTE *)(v48 + 4) = 0;
          v49 = (unsigned __int8 *)(v48 + 4);
          v50 = WTF::fastMalloc((WTF *)0x28);
          v109 = 0uLL;
          *(_QWORD *)&v110 = "make_unique";
          *((_QWORD *)&v110 + 1) = 0;
          *(_QWORD *)(v48 + 8) = WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>(v50, 0, &v109);
          *(_QWORD *)(v48 + 16) = v47;
          if (__ldaxr((unsigned __int8 *)(v48 + 4)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v49))
          {
            goto LABEL_70;
          }
          MEMORY[0x19AEA534C](v49);
LABEL_70:
          v56 = **(_QWORD **)(v48 + 8);
          if (v56)
          {
            v57 = (unsigned int *)(v56 + 8);
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 + 1, v57));
          }
          v59 = __ldxr(v49);
          v104 = v56;
          if (v59 == 1)
          {
            if (!__stlxr(0, v49))
              goto LABEL_78;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v49);
LABEL_78:
          if (HIDWORD(v107))
          {
            v60 = 0;
            do
            {
              v61 = *((_QWORD *)v106 + v60);
              do
                v62 = __ldaxr((unsigned int *)v48);
              while (__stlxr(v62 + 1, (unsigned int *)v48));
              v108 = 0uLL;
              v63 = WTF::fastMalloc((WTF *)0x50);
              v64 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v64 = &off_1E340F998;
              v64[1] = v48;
              v64[2] = v60;
              *(_DWORD *)(v63 + 8) = 1;
              *(_QWORD *)(v63 + 16) = 0;
              *(_QWORD *)(v63 + 24) = 0;
              *(_QWORD *)(v63 + 32) = 0;
              *(_QWORD *)(v63 + 40) = "all";
              *(_QWORD *)(v63 + 48) = 0;
              *(_WORD *)(v63 + 56) = 0;
              *(_QWORD *)(v63 + 64) = 0;
              *(_QWORD *)(v63 + 72) = v64;
              v65 = (unsigned int *)(v61 + 8);
              *(_QWORD *)v63 = &off_1E32059B0;
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 + 1, v65));
              v110 = v108;
              v111 = "all";
              v112 = 0;
              v109 = (unint64_t)v61;
              v113 = (WTF::NativePromiseBase *)v63;
              WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(v61, &v113, (WTF::Logger::LogSiteIdentifier *)&v110);
              v67 = (unsigned int *)v113;
              v113 = 0;
              if (v67)
              {
                v68 = v67 + 2;
                do
                {
                  v69 = __ldaxr(v68);
                  v70 = v69 - 1;
                }
                while (__stlxr(v70, v68));
                if (!v70)
                {
                  atomic_store(1u, v67 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v67 + 8))(v67);
                }
              }
              v71 = (unsigned int *)*((_QWORD *)&v109 + 1);
              *((_QWORD *)&v109 + 1) = 0;
              if (v71)
              {
                v72 = v71 + 2;
                do
                {
                  v73 = __ldaxr(v72);
                  v74 = v73 - 1;
                }
                while (__stlxr(v74, v72));
                if (!v74)
                {
                  atomic_store(1u, v71 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v71 + 8))(v71);
                }
              }
              v75 = (unsigned int *)v109;
              *(_QWORD *)&v109 = 0;
              if (v75)
              {
                v76 = v75 + 2;
                do
                {
                  v77 = __ldaxr(v76);
                  v78 = v77 - 1;
                }
                while (__stlxr(v78, v76));
                if (!v78)
                {
                  atomic_store(1u, v75 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v75 + 16))(v75);
                }
              }
              ++v60;
            }
            while (v60 < HIDWORD(v107));
          }
          do
          {
            v79 = __ldaxr((unsigned int *)v48);
            v80 = v79 - 1;
          }
          while (__stlxr(v80, (unsigned int *)v48));
          v53 = v104;
          v19 = v105;
          if (!v80)
          {
            atomic_store(1u, (unsigned int *)v48);
            v99 = *(uint64_t **)(v48 + 8);
            *(_QWORD *)(v48 + 8) = 0;
            if (v99)
            {
              if (*v99)
              {
                WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(*v99);
                v100 = (unsigned int *)*v99;
                *v99 = 0;
                if (v100)
                {
                  v101 = v100 + 2;
                  do
                  {
                    v102 = __ldaxr(v101);
                    v103 = v102 - 1;
                  }
                  while (__stlxr(v103, v101));
                  if (!v103)
                  {
                    atomic_store(1u, v100 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v100 + 16))(v100);
                  }
                }
              }
              else
              {
                *v99 = 0;
              }
              WTF::fastFree((WTF *)v99, v51);
            }
            WTF::fastFree((WTF *)v48, v51);
            v19 = v105;
          }
          goto LABEL_102;
        }
LABEL_51:
        LOBYTE(v108) = 2;
        v109 = 0uLL;
        *(_QWORD *)&v110 = "operator()";
        *((_QWORD *)&v110 + 1) = 0;
        v38 = WTF::fastMalloc((WTF *)0x80);
        *(_DWORD *)(v38 + 8) = 1;
        *(_QWORD *)v38 = off_1E340F638;
        v39 = v110;
        *(_OWORD *)(v38 + 16) = v109;
        *(_OWORD *)(v38 + 32) = v39;
        *(_BYTE *)(v38 + 48) = 0;
        v40 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)v40 = 1;
        *((_DWORD *)v40 + 4) = 0;
        *(_QWORD *)(v38 + 56) = v40;
        *(_QWORD *)(v38 + 64) = v38 + 80;
        *(_QWORD *)(v38 + 72) = 3;
        *(_WORD *)(v38 + 120) = 0;
        *(_QWORD *)(v38 + 104) = 0;
        *(_QWORD *)(v38 + 112) = 0;
        v41 = (_BYTE *)WTF::NativePromiseBase::logChannel(v40);
        if (*v41 && v41[16] >= 4u)
          WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v41, v38);
        *a3 = v38;
        WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v38, (char *)&v108, (WTF::Logger::LogSiteIdentifier *)&v109);
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 8));
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
    goto LABEL_42;
  }
LABEL_16:
  v9 = 0;
  v12 = 1;
  if (!v5)
    LOBYTE(v4) = 2;
LABEL_18:
  LOBYTE(v108) = v4;
  v109 = 0uLL;
  *(_QWORD *)&v110 = "operator()";
  *((_QWORD *)&v110 + 1) = 0;
  v13 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)v13 = off_1E340F638;
  v14 = v110;
  *(_OWORD *)(v13 + 16) = v109;
  *(_OWORD *)(v13 + 32) = v14;
  *(_BYTE *)(v13 + 48) = 0;
  v15 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v15 = 1;
  *((_DWORD *)v15 + 4) = 0;
  *(_QWORD *)(v13 + 56) = v15;
  *(_QWORD *)(v13 + 64) = v13 + 80;
  *(_QWORD *)(v13 + 72) = 3;
  *(_WORD *)(v13 + 120) = 0;
  *(_QWORD *)(v13 + 104) = 0;
  *(_QWORD *)(v13 + 112) = 0;
  v16 = (_BYTE *)WTF::NativePromiseBase::logChannel(v15);
  if (*v16)
  {
    if (v16[16] >= 4u)
      WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v16, v13);
  }
  *a3 = v13;
  result = (unsigned __int8 *)WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v13, (char *)&v108, (WTF::Logger::LogSiteIdentifier *)&v109);
  if ((v12 & 1) == 0)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 8));
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::all(WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> &&)#1},void,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v3 = a1[1];
  *a1 = &off_1E340F998;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(uint64_t **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        if (*v7)
        {
          WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(*v7);
          v8 = (unsigned int *)*v7;
          *v7 = 0;
          if (v8)
          {
            v9 = v8 + 2;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v8 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
            }
          }
        }
        else
        {
          *v7 = 0;
        }
        WTF::fastFree((WTF *)v7, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::all(WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> &&)#1},void,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E340F998;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(uint64_t **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        if (*v7)
        {
          WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(*v7);
          v8 = (unsigned int *)*v7;
          *v7 = 0;
          if (v8)
          {
            v9 = v8 + 2;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v8 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
            }
          }
        }
        else
        {
          *v7 = 0;
        }
        WTF::fastFree((WTF *)v7, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::all(WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> &&)#1},void,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> &>::call(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v17;
  int v18;
  int v19;
  void *v20;
  uint64_t *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;

  v3 = *(unsigned __int8 *)(a2 + 1);
  v4 = *(_QWORD *)(result + 8);
  v5 = (unsigned __int8 *)(v4 + 4);
  if (__ldaxr((unsigned __int8 *)(v4 + 4)))
  {
    __clrex();
  }
  else
  {
    v7 = 1;
    if (!__stxr(1u, v5))
      goto LABEL_5;
  }
  v7 = 0;
LABEL_5:
  if (!v3)
  {
    if ((v7 & 1) == 0)
      result = MEMORY[0x19AEA534C](v4 + 4);
    v12 = *(uint64_t **)(v4 + 8);
    if (!v12)
      goto LABEL_61;
    v13 = *(_QWORD *)(v4 + 16) - 1;
    *(_QWORD *)(v4 + 16) = v13;
    if (v13)
      goto LABEL_61;
    v32 = 0;
    v33 = 0;
    v34 = "resolve";
    v35 = 0;
    v14 = *v12;
    if (!*v12)
    {
      v26 = 0;
      goto LABEL_49;
    }
    v15 = (unsigned __int8 *)(v14 + 48);
    if (__ldaxr((unsigned __int8 *)(v14 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v15))
    {
      goto LABEL_43;
    }
    result = MEMORY[0x19AEA534C](v14 + 48);
LABEL_43:
    v27 = *(_DWORD *)(v14 + 64);
    v28 = __ldxr(v15);
    if (v28 == 1)
    {
      if (!__stlxr(0, v15))
      {
LABEL_48:
        v26 = *v12;
        if (!v27)
        {
          result = (uint64_t)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::resolve<std::enable_if<true,void>>(*v12, (WTF::Logger::LogSiteIdentifier *)&v32);
          goto LABEL_53;
        }
LABEL_49:
        result = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)result);
        if (*(_BYTE *)result && *(unsigned __int8 *)(result + 16) >= 4u)
          result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(result, 4u, (WTF::Logger::LogSiteIdentifier *)&v32, " ignored already resolved or rejected ", v26);
LABEL_53:
        v21 = *(uint64_t **)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (!v21)
          goto LABEL_61;
        if (*v21)
        {
          WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(*v21);
          v22 = (unsigned int *)*v21;
          *v21 = 0;
          if (v22)
          {
            v29 = v22 + 2;
            do
            {
              v30 = __ldaxr(v29);
              v25 = --v30 == 0;
            }
            while (__stlxr(v30, v29));
            goto LABEL_37;
          }
LABEL_60:
          result = WTF::fastFree((WTF *)v21, v20);
          goto LABEL_61;
        }
LABEL_59:
        *v21 = 0;
        goto LABEL_60;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v15);
    goto LABEL_48;
  }
  if ((v7 & 1) == 0)
    result = MEMORY[0x19AEA534C](v4 + 4);
  v8 = *(uint64_t **)(v4 + 8);
  if (v8)
  {
    v32 = 0;
    v33 = 0;
    v34 = "reject";
    v35 = 0;
    v9 = *v8;
    if (!*v8)
    {
      v17 = 0;
      goto LABEL_28;
    }
    v10 = (unsigned __int8 *)(v9 + 48);
    if (__ldaxr((unsigned __int8 *)(v9 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v10))
    {
      goto LABEL_22;
    }
    result = MEMORY[0x19AEA534C](v9 + 48);
LABEL_22:
    v18 = *(_DWORD *)(v9 + 64);
    v19 = __ldxr(v10);
    if (v19 == 1)
    {
      if (!__stlxr(0, v10))
      {
LABEL_27:
        v17 = *v8;
        if (!v18)
        {
          result = (uint64_t)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(*v8, (char *)a2, (WTF::Logger::LogSiteIdentifier *)&v32);
          goto LABEL_32;
        }
LABEL_28:
        result = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)result);
        if (*(_BYTE *)result && *(unsigned __int8 *)(result + 16) >= 4u)
          result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(result, 4u, (WTF::Logger::LogSiteIdentifier *)&v32, " ignored already resolved or rejected ", v17);
LABEL_32:
        v21 = *(uint64_t **)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (!v21)
          goto LABEL_61;
        if (*v21)
        {
          WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(*v21);
          v22 = (unsigned int *)*v21;
          *v21 = 0;
          if (v22)
          {
            v23 = v22 + 2;
            do
            {
              v24 = __ldaxr(v23);
              v25 = --v24 == 0;
            }
            while (__stlxr(v24, v23));
LABEL_37:
            if (v25)
            {
              atomic_store(1u, v22 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
            }
            goto LABEL_60;
          }
          goto LABEL_60;
        }
        goto LABEL_59;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
    goto LABEL_27;
  }
LABEL_61:
  v31 = __ldxr(v5);
  if (v31 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 4));
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 4));
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_19SourceBufferPrivate26processPendingMediaSamplesEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSM_EED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E340F9C0;
  WebCore::SourceBufferPrivate::processPendingMediaSamples(void)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_19SourceBufferPrivate26processPendingMediaSamplesEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSM_EED0Ev(uint64_t *a1, void *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E340F9C0;
  WebCore::SourceBufferPrivate::processPendingMediaSamples(void)::$_0::~$_0(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

unsigned __int8 *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_19SourceBufferPrivate26processPendingMediaSamplesEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSM_EE4callESM_@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  _BYTE *v15;
  unsigned __int8 *result;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  __int128 v21;
  _BYTE *v22;
  int v23;
  uint64_t v24;
  WebCore::MediaSample **v25;
  WebCore::MediaSample **v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  int v32;
  char v33;
  int v34;
  char v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t (**v39)();
  _QWORD *v40;
  uint64_t v41;
  uint64_t (**v42)();
  _QWORD *v43;
  WTF::MediaTime *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  int8x8_t v48;
  uint8x8_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  WTF *v59;
  WTF *v60;
  uint64_t v62;
  int v63;
  char v64;
  int v65;
  char v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  WTF **v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  WTF *v84;
  unsigned int *v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  WebCore::MediaSample *v97;
  _BOOL4 v98;
  WebCore::MediaSample *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  char *SampleContainingPresentationTime;
  char *v106;
  unsigned int *v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  int v112;
  uint64_t v113;
  WTF *v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int v121;
  WebCore::MediaSample *v122;
  WTF *v123;
  unsigned int *v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  int v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  int v141;
  _QWORD *v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  _QWORD *v150;
  _QWORD *v151;
  WTF *v152;
  WTF *v153;
  WTF *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  WTF::MediaTime *v158;
  uint64_t v159;
  WTF *v160;
  WTF::MediaTime *v161;
  WTF::MediaTime *v162;
  WTF::MediaTime *v163;
  WTF::MediaTime *v164;
  WTF::MediaTime *v165;
  uint64_t v166;
  unsigned int *v167;
  WTF *v168;
  WTF *v169;
  uint64_t v170;
  WTF::MediaTime *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void (*v175)(uint64_t, uint64_t);
  uint64_t v176;
  WTF::StringImpl *v177;
  unsigned __int8 *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  NSObject *v185;
  uint64_t v186;
  char *v187;
  int v188;
  int v189;
  WTF::MediaTime *v190;
  WTF::MediaTime *v191;
  uint64_t v192;
  WTF *v193;
  WTF::MediaTime *v194;
  WTF::MediaTime *v195;
  uint64_t v196;
  uint64_t v197;
  WTF::MediaTime *v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  WTF::Logger *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  WTF::Logger *v208;
  uint64_t v209;
  WTF::StringImpl **v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  int v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  uint64_t v220;
  unsigned int *v221;
  unsigned int v222;
  unsigned int *v223;
  unsigned int *v224;
  unsigned int v225;
  unsigned int v226;
  WTF::MediaTime *v227;
  WTF::MediaTime *v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  WTF *v232;
  uint64_t v233;
  WebCore::PresentationOrderSampleMap *SamplesBetweenPresentationTimesFromEnd;
  _QWORD *v235;
  WebCore::PresentationOrderSampleMap *v236;
  int v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  int v241;
  _QWORD *v242;
  _QWORD *v243;
  uint64_t v244;
  unsigned int *v245;
  unsigned int v246;
  unsigned int *v247;
  unsigned int *v248;
  unsigned int v249;
  unsigned int v250;
  WebCore::PresentationOrderSampleMap *v251;
  WebCore::PresentationOrderSampleMap **v252;
  uint64_t v253;
  _QWORD *v254;
  WTF *v255;
  WTF **v256;
  WTF *v257;
  _QWORD *v258;
  _QWORD *v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *SamplesBetweenDecodeKeys;
  _QWORD *v270;
  uint64_t v271;
  void *v272;
  WTF *v273;
  void *v274;
  WTF *v275;
  WebCore::MediaSample *v276;
  unsigned int *v277;
  unsigned int v278;
  unsigned int *v279;
  unsigned int *v280;
  unsigned int v281;
  unsigned int v282;
  WTF *v283;
  WTF *v284;
  WTF *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD **v289;
  WebCore::MediaSample *v290;
  unsigned int *v291;
  unsigned int v292;
  uint64_t *v293;
  uint64_t *v294;
  uint64_t v295;
  __int128 v296;
  uint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  unsigned int *v301;
  unsigned int *v302;
  unsigned int v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  __int128 *v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  int v312;
  BOOL v313;
  uint64_t v314;
  uint8_t *v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  __int128 v325;
  _BYTE *v326;
  uint64_t v327;
  __int128 v328;
  _BYTE *v329;
  void *v330;
  uint64_t v331;
  __int128 v332;
  _BYTE *v333;
  uint64_t v334;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  BOOL v339;
  int v340;
  uint64_t v341;
  WTF::MediaTime *v342;
  WebCore::MediaSample *v343;
  uint64_t v344;
  WTF::MediaTime *v345;
  WTF::MediaTime *v346;
  WTF::MediaTime *v347;
  WTF::MediaTime *v348;
  WTF::MediaTime *v349;
  _QWORD *v350;
  WTF::MediaTime *v351;
  uint64_t v352;
  WebCore::MediaSample **v353;
  _QWORD *v354;
  WTF *v355;
  uint64_t v356;
  __int128 v357;
  WTF::StringImpl *v358;
  WTF **v359;
  WTF *v360;
  const char *v361;
  uint64_t v362;
  WTF *v363[2];
  __int128 v364;
  WTF **v365;
  WTF *v366[2];
  WTF **v367;
  WTF *v368;
  uint64_t v369;
  uint64_t v370;
  __int128 v371;
  uint64_t v372;
  int v373;
  char v374;
  __int128 v375;
  uint64_t v376;
  uint64_t v377;
  __int128 v378;
  WTF::Logger *v379;
  uint64_t v380;
  WTF::StringImpl *v381;
  WTF::StringImpl *v382;
  WTF::StringImpl *v383;
  WTF::StringImpl *v384;
  WTF::StringImpl *v385;
  WTF::StringImpl *v386;
  uint8_t buf[16];
  __int128 v388;
  __int128 v389;
  int v390;
  WTF::StringImpl *v391;
  int v392;
  WTF::StringImpl *v393;
  uint64_t v394;

  v394 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = v4 >> 8;
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    goto LABEL_16;
  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_6:
  if (*(_QWORD *)(v6 + 24))
    ++*(_QWORD *)(v6 + 8);
  else
    v9 = 0;
  v11 = __ldxr((unsigned __int8 *)v6);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
    {
      if (v9)
        goto LABEL_12;
LABEL_16:
      v9 = 0;
      v12 = 1;
      if (!v5)
        LOBYTE(v4) = 2;
LABEL_18:
      LOBYTE(v365) = v4;
      memset(buf, 0, sizeof(buf));
      *(_QWORD *)&v388 = "operator()";
      *((_QWORD *)&v388 + 1) = 0;
      v13 = WTF::fastMalloc((WTF *)0x78);
      *(_DWORD *)(v13 + 8) = 1;
      *(_QWORD *)v13 = off_1E3207198;
      v14 = v388;
      *(_OWORD *)(v13 + 16) = *(_OWORD *)buf;
      *(_OWORD *)(v13 + 32) = v14;
      *(_BYTE *)(v13 + 48) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      *(_QWORD *)(v13 + 72) = v13 + 88;
      *(_QWORD *)(v13 + 80) = 1;
      *(_QWORD *)(v13 + 96) = 0;
      *(_QWORD *)(v13 + 104) = 0;
      *(_WORD *)(v13 + 112) = 0;
      v15 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v13);
      if (*v15)
      {
        if (v15[16] >= 4u)
          WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v15, 4u, "creating ", v13);
      }
      *a3 = v13;
      result = (unsigned __int8 *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v13, (char *)&v365, (WTF::Logger::LogSiteIdentifier *)buf);
      if ((v12 & 1) != 0)
        return result;
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 8));
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  if (!v9)
    goto LABEL_16;
LABEL_12:
  if (v5)
  {
    v12 = 0;
    goto LABEL_18;
  }
  if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(v8 + 160))
  {
    memset(buf, 0, sizeof(buf));
    *(_QWORD *)&v388 = "operator()";
    *((_QWORD *)&v388 + 1) = 0;
    v20 = WTF::fastMalloc((WTF *)0x78);
    *(_DWORD *)(v20 + 8) = 1;
    *(_QWORD *)v20 = off_1E3207198;
    v21 = v388;
    *(_OWORD *)(v20 + 16) = *(_OWORD *)buf;
    *(_OWORD *)(v20 + 32) = v21;
    *(_BYTE *)(v20 + 48) = 0;
    *(_DWORD *)(v20 + 64) = 0;
    *(_QWORD *)(v20 + 72) = v20 + 88;
    *(_QWORD *)(v20 + 80) = 1;
    *(_QWORD *)(v20 + 96) = 0;
    *(_QWORD *)(v20 + 104) = 0;
    *(_WORD *)(v20 + 112) = 0;
    v22 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v20);
    if (*v22 && v22[16] >= 4u)
      WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v22, 4u, "creating ", v20);
    *a3 = v20;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::resolve<std::enable_if<true,void>>(v20, (WTF::Logger::LogSiteIdentifier *)buf);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 8));
  }
  v17 = *(_QWORD *)(v8 + 80);
  if (!v17)
  {
LABEL_517:
    LOBYTE(v365) = 2;
    memset(buf, 0, sizeof(buf));
    *(_QWORD *)&v388 = "operator()";
    *((_QWORD *)&v388 + 1) = 0;
    v324 = WTF::fastMalloc((WTF *)0x78);
    *(_DWORD *)(v324 + 8) = 1;
    *(_QWORD *)v324 = off_1E3207198;
    v325 = v388;
    *(_OWORD *)(v324 + 16) = *(_OWORD *)buf;
    *(_OWORD *)(v324 + 32) = v325;
    *(_BYTE *)(v324 + 48) = 0;
    *(_DWORD *)(v324 + 64) = 0;
    *(_QWORD *)(v324 + 72) = v324 + 88;
    *(_QWORD *)(v324 + 80) = 1;
    *(_QWORD *)(v324 + 96) = 0;
    *(_QWORD *)(v324 + 104) = 0;
    *(_WORD *)(v324 + 112) = 0;
    v326 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v324);
    if (*v326 && v326[16] >= 4u)
      WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v326, 4u, "creating ", v324);
    *a3 = v324;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v324, (char *)&v365, (WTF::Logger::LogSiteIdentifier *)buf);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 8));
  }
  v18 = *(_QWORD **)(v8 + 88);
  if (__ldaxr((unsigned __int8 *)v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v17))
  {
    goto LABEL_34;
  }
  MEMORY[0x19AEA534C](v17);
LABEL_34:
  if (*(_QWORD *)(v17 + 24))
    ++*(_QWORD *)(v17 + 8);
  else
    v18 = 0;
  v23 = __ldxr((unsigned __int8 *)v17);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_41;
  }
  if (__stlxr(0, (unsigned __int8 *)v17))
LABEL_41:
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
  if (!v18)
    goto LABEL_517;
  v24 = *(unsigned int *)(a1 + 44);
  if (!(_DWORD)v24)
    goto LABEL_521;
  v25 = *(WebCore::MediaSample ***)(a1 + 32);
  v26 = &v25[v24];
  v354 = (_QWORD *)(v8 + 272);
  v351 = (WTF::MediaTime *)(v8 + 288);
  v348 = (WTF::MediaTime *)(v8 + 224);
  v349 = (WTF::MediaTime *)(v8 + 208);
  v27 = *MEMORY[0x1E0CC0058];
  v350 = v18;
  v353 = v26;
  while (1)
  {
    if (!*(_BYTE *)(v8 + 153) || *(_BYTE *)(v8 + 154))
    {
      LOBYTE(v365) = 5;
      memset(buf, 0, sizeof(buf));
      *(_QWORD *)&v388 = "operator()";
      *((_QWORD *)&v388 + 1) = 0;
      v331 = WTF::fastMalloc((WTF *)0x78);
      *(_DWORD *)(v331 + 8) = 1;
      *(_QWORD *)v331 = off_1E3207198;
      v332 = v388;
      *(_OWORD *)(v331 + 16) = *(_OWORD *)buf;
      *(_OWORD *)(v331 + 32) = v332;
      *(_BYTE *)(v331 + 48) = 0;
      *(_DWORD *)(v331 + 64) = 0;
      *(_QWORD *)(v331 + 72) = v331 + 88;
      *(_QWORD *)(v331 + 80) = 1;
      *(_QWORD *)(v331 + 96) = 0;
      *(_QWORD *)(v331 + 104) = 0;
      *(_WORD *)(v331 + 112) = 0;
      v333 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v331);
      if (*v333 && v333[16] >= 4u)
        WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v333, 4u, "creating ", v331);
      *a3 = v331;
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v331, (char *)&v365, (WTF::Logger::LogSiteIdentifier *)buf);
LABEL_529:
      v334 = v18[1];
      if (__ldaxr((unsigned __int8 *)v334))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v334))
      {
        goto LABEL_533;
      }
      MEMORY[0x19AEA534C](v334);
LABEL_533:
      v336 = *(_QWORD *)(v334 + 8);
      v337 = v336 - 1;
      *(_QWORD *)(v334 + 8) = v336 - 1;
      if (v336 == 1)
      {
        v341 = *(_QWORD *)(v334 + 16);
        v338 = *(_QWORD *)(v334 + 24);
        *(_QWORD *)(v334 + 24) = 0;
        v339 = v341 != 0;
      }
      else
      {
        v338 = 0;
        v339 = 1;
      }
      v340 = __ldxr((unsigned __int8 *)v334);
      if (v340 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v334))
        {
LABEL_540:
          if (!v337)
          {
            if (v338)
              (*(void (**)(uint64_t))(*(_QWORD *)v338 + 8))(v338);
            if (!v339)
              WTF::fastFree((WTF *)v334, v330);
          }
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 8));
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v334);
      goto LABEL_540;
    }
    if (!(*(unsigned int (**)(uint64_t, WebCore::MediaSample *))(*(_QWORD *)v8 + 544))(v8, *v25))
      goto LABEL_513;
LABEL_48:
    *(_QWORD *)&v378 = 0;
    DWORD2(v378) = 10000000;
    BYTE12(v378) = 1;
    v376 = 0;
    LODWORD(v377) = 10000000;
    BYTE4(v377) = 1;
    *(_QWORD *)&v375 = (*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)*v25 + 32))(*v25);
    *((_QWORD *)&v375 + 1) = v28;
    if (*(_BYTE *)(v8 + 152))
    {
      v29 = 0;
      if (v28 <= 1)
        v30 = 1;
      else
        v30 = v28;
      *(_QWORD *)&v378 = 0;
      DWORD2(v378) = v30;
      if ((_DWORD)v28)
        v31 = 1;
      else
        v31 = 5;
      BYTE12(v378) = v31;
      LODWORD(v377) = v30;
      BYTE4(v377) = v31;
    }
    else
    {
      *(_QWORD *)&v378 = (*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)*v25 + 16))(*v25);
      DWORD2(v378) = v32;
      BYTE12(v378) = v33;
      v29 = (*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)*v25 + 24))(*v25);
      LODWORD(v377) = v34;
      BYTE4(v377) = v35;
    }
    v376 = v29;
    if (*(_BYTE *)(v8 + 136) == 1 && (*(_BYTE *)(v8 + 284) & 1) != 0)
    {
      *(_QWORD *)(v8 + 192) = WTF::MediaTime::operator-();
      *(_DWORD *)(v8 + 200) = v36;
      *(_BYTE *)(v8 + 204) = v37;
      v38 = WTF::fastMalloc((WTF *)0x10);
      v39 = off_1E340FE60;
      *(_QWORD *)v38 = off_1E340FE60;
      v40 = *(_QWORD **)(v8 + 112);
      if (v40)
      {
        do
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 16))(v38, v40[3]);
          v40 = (_QWORD *)*v40;
        }
        while (v40);
        v39 = *(uint64_t (***)())v38;
      }
      ((void (*)(uint64_t))v39[1])(v38);
      *(_QWORD *)v351 = *v354;
      *(_QWORD *)(v8 + 293) = *(_QWORD *)(v8 + 277);
      v41 = WTF::fastMalloc((WTF *)0x10);
      v42 = off_1E340FE88;
      *(_QWORD *)v41 = off_1E340FE88;
      v43 = *(_QWORD **)(v8 + 112);
      if (v43)
      {
        do
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 16))(v41, v43[3]);
          v43 = (_QWORD *)*v43;
        }
        while (v43);
        v42 = *(uint64_t (***)())v41;
      }
      v44 = (WTF::MediaTime *)((uint64_t (*)(uint64_t))v42[1])(v41);
      v45 = (_QWORD *)WTF::MediaTime::invalidTime(v44);
      v46 = *(_QWORD *)((char *)v45 + 5);
      v26 = v353;
      *v354 = *v45;
      *(_QWORD *)(v8 + 277) = v46;
    }
    v47 = (*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)*v25 + 40))(*v25);
    v48 = *(int8x8_t *)(v8 + 104);
    if (!*(_QWORD *)&v48)
      goto LABEL_512;
    v49 = (uint8x8_t)vcnt_s8(v48);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      v50 = v47;
      if (v47 >= *(_QWORD *)&v48)
        v50 = v47 % *(_QWORD *)&v48;
    }
    else
    {
      v50 = (*(_QWORD *)&v48 - 1) & v47;
    }
    v51 = *(_QWORD **)(*(_QWORD *)(v8 + 96) + 8 * v50);
    if (!v51)
      goto LABEL_512;
    v52 = (_QWORD *)*v51;
    if (!v52)
      goto LABEL_512;
    if (v49.u32[0] < 2uLL)
    {
      v53 = *(_QWORD *)&v48 - 1;
      do
      {
        v54 = v52[1];
        if (v54 == v47)
        {
          if (v52[2] == v47)
            goto LABEL_89;
        }
        else if ((v54 & v53) != v50)
        {
          break;
        }
        v52 = (_QWORD *)*v52;
      }
      while (v52);
LABEL_512:
      (*(void (**)(_QWORD *))(*v18 + 48))(v18);
      goto LABEL_513;
    }
    while (1)
    {
      v55 = v52[1];
      if (v55 == v47)
        break;
      if (v55 >= *(_QWORD *)&v48)
        v55 %= *(_QWORD *)&v48;
      if (v55 != v50)
        goto LABEL_512;
LABEL_87:
      v52 = (_QWORD *)*v52;
      if (!v52)
        goto LABEL_512;
    }
    if (v52[2] != v47)
      goto LABEL_87;
LABEL_89:
    v56 = v52[3];
    v372 = 1;
    v373 = 1000000;
    v374 = 1;
    if (WTF::MediaTime::operator BOOL())
    {
      v57 = DWORD2(v378);
      if ((*(_BYTE *)(v56 + 284) & 1) == 0 || DWORD2(v378) != *(_DWORD *)(v56 + 304))
      {
        *(_DWORD *)(v56 + 304) = DWORD2(v378);
        while (1)
        {
          *(_QWORD *)buf = WTF::MediaTime::toTimeScale();
          *(_QWORD *)&buf[8] = v58;
          v363[0] = (WTF *)WTF::MediaTime::operator-();
          v363[1] = v59;
          v365 = (WTF **)WTF::abs();
          v366[0] = v60;
          if (WTF::MediaTime::compare((WTF::MediaTime *)&v365, (const WTF::MediaTime *)&v372) == -1
            || v57 >= v27)
          {
            break;
          }
          if (2 * v57 > v27 || v57 < 0)
            v57 = v27;
          else
            v57 *= 2;
        }
        v62 = *(_QWORD *)&buf[8];
        *(_QWORD *)(v56 + 272) = *(_QWORD *)buf;
        *(_DWORD *)(v56 + 280) = v62;
        *(_BYTE *)(v56 + 284) = BYTE4(v62);
      }
      *(_QWORD *)&v378 = WTF::MediaTime::operator+();
      DWORD2(v378) = v63;
      BYTE12(v378) = v64;
      v376 = WTF::MediaTime::operator+();
      LODWORD(v377) = v65;
      BYTE4(v377) = v66;
      v26 = v353;
    }
    if ((*(_BYTE *)(v56 + 124) & 1) == 0)
      break;
    if (WTF::MediaTime::compare((WTF::MediaTime *)&v376, (const WTF::MediaTime *)(v56 + 112)) != -1)
    {
      if ((*(_BYTE *)(v56 + 140) & 1) == 0)
        break;
      *(_QWORD *)buf = WTF::MediaTime::operator-();
      *(_QWORD *)&buf[8] = v67;
      v26 = v353;
      v365 = (WTF **)WTF::MediaTime::operator*();
      v366[0] = v68;
      if (WTF::MediaTime::compare((WTF::MediaTime *)buf, (const WTF::MediaTime *)&v365) != 1)
        break;
    }
    if (*(_BYTE *)(v8 + 136))
    {
      v69 = v8 + 272;
      *v354 = *(_QWORD *)v351;
      v70 = *(_QWORD *)(v8 + 293);
    }
    else
    {
      v69 = v8 + 288;
      *(_QWORD *)v351 = v378;
      v70 = *(_QWORD *)((char *)&v378 + 5);
    }
    *(_QWORD *)(v69 + 5) = v70;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 136))(v8);
    v103 = 3;
LABEL_499:
    if (v103 == 3)
      goto LABEL_48;
    if (v103 != 1)
      WebCore::SourceBufferPrivate::updateHighestPresentationTimestamp((WebCore::SourceBufferPrivate *)v8);
LABEL_513:
    if (++v25 == v26)
    {
LABEL_521:
      memset(buf, 0, sizeof(buf));
      *(_QWORD *)&v388 = "operator()";
      *((_QWORD *)&v388 + 1) = 0;
      v327 = WTF::fastMalloc((WTF *)0x78);
      *(_DWORD *)(v327 + 8) = 1;
      *(_QWORD *)v327 = off_1E3207198;
      v328 = v388;
      *(_OWORD *)(v327 + 16) = *(_OWORD *)buf;
      *(_OWORD *)(v327 + 32) = v328;
      *(_BYTE *)(v327 + 48) = 0;
      *(_DWORD *)(v327 + 64) = 0;
      *(_QWORD *)(v327 + 72) = v327 + 88;
      *(_QWORD *)(v327 + 80) = 1;
      *(_QWORD *)(v327 + 96) = 0;
      *(_QWORD *)(v327 + 104) = 0;
      *(_WORD *)(v327 + 112) = 0;
      v329 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v327);
      if (*v329 && v329[16] >= 4u)
        WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v329, 4u, "creating ", v327);
      *a3 = v327;
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::resolve<std::enable_if<true,void>>(v327, (WTF::Logger::LogSiteIdentifier *)buf);
      goto LABEL_529;
    }
  }
  v352 = v56;
  if (*(_BYTE *)(v8 + 136) == 1)
  {
    (*(void (**)(WebCore::MediaSample *, __int128 *, uint64_t *))(*(_QWORD *)*v25 + 72))(*v25, &v378, &v376);
  }
  else if (WTF::MediaTime::operator BOOL())
  {
    (*(void (**)(WebCore::MediaSample *, uint64_t))(*(_QWORD *)*v25 + 64))(*v25, v56 + 272);
  }
  v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v72 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  v75 = v74;
  v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  *(_QWORD *)buf = v73;
  *(_QWORD *)&buf[8] = v75;
  *(_QWORD *)&v388 = "processMediaSample";
  *((_QWORD *)&v388 + 1) = v76;
  if (*(_BYTE *)(v71 + 12))
  {
    if (*v72 && v72[16] >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MediaSample>((uint64_t)v72, 4u, (WTF::Logger::LogSiteIdentifier *)buf, *v25);
  }
  *(_QWORD *)&v371 = WTF::MediaTime::operator+();
  *((_QWORD *)&v371 + 1) = v78;
  if (WTF::MediaTime::compare((WTF::MediaTime *)&v378, v349) == -1
    || WTF::MediaTime::compare((WTF::MediaTime *)&v371, v348) == 1)
  {
    v26 = v353;
    if (!(*(unsigned int (**)(WebCore::MediaSample *))(*(_QWORD *)*v25 + 80))(*v25))
      goto LABEL_188;
    (*(void (**)(uint8_t *__return_ptr, WebCore::MediaSample *, WTF::MediaTime *, _QWORD))(*(_QWORD *)*v25 + 88))(buf, *v25, v349, 0);
    if (*(_QWORD *)&buf[8])
    {
      (*(void (**)(WTF ***__return_ptr, _QWORD, WTF::MediaTime *, uint64_t))(**(_QWORD **)&buf[8] + 88))(&v365, *(_QWORD *)&buf[8], v348, 1);
      v79 = v365;
      v365 = 0;
      v80 = *(unsigned int **)buf;
      *(_QWORD *)buf = v79;
      if (v80)
      {
        v81 = v80 + 2;
        do
        {
          v82 = __ldaxr(v81);
          v83 = v82 - 1;
        }
        while (__stlxr(v83, v81));
        if (!v83)
        {
          atomic_store(1u, v80 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v80 + 8))(v80);
        }
      }
      v84 = v366[0];
      v366[0] = 0;
      v85 = *(unsigned int **)&buf[8];
      *(_QWORD *)&buf[8] = v84;
      if (v85)
      {
        v86 = v85 + 2;
        do
        {
          v87 = __ldaxr(v86);
          v88 = v87 - 1;
        }
        while (__stlxr(v88, v86));
        if (!v88)
        {
          atomic_store(1u, v85 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v85 + 8))(v85);
        }
        v89 = (unsigned int *)v366[0];
        v366[0] = 0;
        if (v89)
        {
          v90 = v89 + 2;
          do
          {
            v91 = __ldaxr(v90);
            v92 = v91 - 1;
          }
          while (__stlxr(v92, v90));
          if (!v92)
          {
            atomic_store(1u, v89 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v89 + 8))(v89);
          }
        }
      }
      v93 = (unsigned int *)v365;
      v365 = 0;
      if (v93)
      {
        v94 = v93 + 2;
        do
        {
          v95 = __ldaxr(v94);
          v96 = v95 - 1;
        }
        while (__stlxr(v96, v94));
        if (!v96)
        {
          atomic_store(1u, v93 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v93 + 8))(v93);
        }
      }
      v97 = *(WebCore::MediaSample **)buf;
      v98 = *(_QWORD *)buf == 0;
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)buf = 0;
        v99 = *v25;
        *v25 = v97;
        if (v99)
        {
          v100 = (unsigned int *)((char *)v99 + 8);
          do
          {
            v101 = __ldaxr(v100);
            v102 = v101 - 1;
          }
          while (__stlxr(v102, v100));
          if (!v102)
          {
            atomic_store(1u, (unsigned int *)v99 + 2);
            (*(void (**)(WebCore::MediaSample *))(*(_QWORD *)v99 + 8))(v99);
          }
        }
        if (*(_BYTE *)(v8 + 136) == 1)
        {
          v103 = 3;
        }
        else
        {
          if (WTF::MediaTime::operator BOOL())
          {
            v122 = *v25;
            v365 = (WTF **)WTF::MediaTime::operator-();
            v366[0] = v123;
            (*(void (**)(WebCore::MediaSample *, WTF ***))(*(_QWORD *)v122 + 64))(v122, &v365);
          }
          v103 = 3;
          v26 = v353;
        }
      }
      else
      {
        v103 = 0;
      }
      v124 = *(unsigned int **)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      if (v124)
      {
        v125 = v124 + 2;
        do
        {
          v126 = __ldaxr(v125);
          v127 = v126 - 1;
        }
        while (__stlxr(v127, v125));
        if (!v127)
        {
          atomic_store(1u, v124 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v124 + 8))(v124);
        }
      }
    }
    else
    {
      v103 = 0;
      *(_QWORD *)&buf[8] = 0;
      v98 = 1;
    }
    v128 = *(unsigned int **)buf;
    *(_QWORD *)buf = 0;
    if (!v128)
      goto LABEL_187;
    v129 = v128 + 2;
    do
    {
      v130 = __ldaxr(v129);
      v131 = v130 - 1;
    }
    while (__stlxr(v131, v129));
    if (!v131)
    {
      atomic_store(1u, v128 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v128 + 8))(v128);
      if (v98)
      {
LABEL_188:
        v103 = 1;
        *(_BYTE *)(v352 + 308) = 1;
        (*(void (**)(_QWORD *))(*v350 + 48))(v350);
      }
    }
    else
    {
LABEL_187:
      if (v98)
        goto LABEL_188;
    }
LABEL_498:
    v18 = v350;
    goto LABEL_499;
  }
  v26 = v353;
  if (*(_BYTE *)(v352 + 308))
  {
    if (((*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)*v25 + 104))(*v25) & 1) == 0)
    {
      (*(void (**)(_QWORD *))(*v350 + 48))(v350);
      v103 = 1;
      goto LABEL_498;
    }
    *(_BYTE *)(v352 + 308) = 0;
  }
  v366[0] = 0;
  v366[1] = 0;
  v368 = 0;
  v369 = 0;
  v365 = v366;
  v367 = &v368;
  v370 = 0;
  v104 = v352;
  if ((*(_BYTE *)(v352 + 124) & 1) == 0)
  {
    SampleContainingPresentationTime = WebCore::PresentationOrderSampleMap::findSampleContainingPresentationTime((WebCore::PresentationOrderSampleMap *)(v352 + 32), (const WTF::MediaTime *)&v378);
    if ((char *)(v352 + 40) != SampleContainingPresentationTime)
    {
      v106 = SampleContainingPresentationTime;
      v107 = (unsigned int *)*((_QWORD *)SampleContainingPresentationTime + 6);
      v108 = v107 + 2;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 + 1, v108));
      v110 = *(_QWORD *)(v352 + 88);
      if (v110
        && (v111 = v107, v112 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 16))(v110), v107 = v111, v112))
      {
        *(_QWORD *)buf = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v111 + 16))(v111);
        *(_QWORD *)&buf[8] = v113;
        v363[0] = (WTF *)WTF::MediaTime::operator+();
        v363[1] = v114;
        if (WTF::MediaTime::compare((WTF::MediaTime *)&v378, (const WTF::MediaTime *)v363) == -1)
        {
          v115 = (unsigned int *)*((_QWORD *)v106 + 6);
          v116 = v115 + 2;
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 + 1, v116));
          v359 = (WTF **)v115;
          WebCore::SampleMap::addSample((uint64_t)&v365, (unsigned int **)&v359);
          v118 = (unsigned int *)v359;
          v359 = 0;
          if (v118)
          {
            v119 = v118 + 2;
            do
            {
              v120 = __ldaxr(v119);
              v121 = v120 - 1;
            }
            while (__stlxr(v121, v119));
            if (!v121)
            {
              atomic_store(1u, v118 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v118 + 8))(v118);
            }
          }
        }
        v107 = v111;
        do
        {
LABEL_190:
          v132 = __ldaxr(v108);
          v133 = v132 - 1;
        }
        while (__stlxr(v133, v108));
        v104 = v352;
        if (!v133)
        {
          atomic_store(1u, v107 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v107 + 8))(v107);
        }
      }
      else
      {
        v104 = v352;
        if (v107)
          goto LABEL_190;
      }
    }
  }
  if ((*(_BYTE *)(v104 + 172) & 1) == 0)
  {
    v135 = (_QWORD *)(v352 + 40);
    v134 = *(_QWORD **)(v352 + 40);
    if (v134)
    {
      v136 = (_QWORD *)(v352 + 40);
      do
      {
        v137 = WTF::MediaTime::compare((WTF::MediaTime *)(v134 + 4), (const WTF::MediaTime *)&v378);
        v138 = v134 + 1;
        if (v137 != -1)
        {
          v138 = v134;
          v136 = v134;
        }
        v134 = (_QWORD *)*v138;
      }
      while (*v138);
      v139 = (_QWORD *)*v135;
      if (*v135)
      {
        v140 = (_QWORD *)(v352 + 40);
        do
        {
          v141 = WTF::MediaTime::compare((WTF::MediaTime *)(v139 + 4), (const WTF::MediaTime *)&v371);
          v142 = v139 + 1;
          if (v141 != -1)
          {
            v142 = v139;
            v140 = v139;
          }
          v139 = (_QWORD *)*v142;
        }
        while (*v142);
      }
      else
      {
        v140 = (_QWORD *)(v352 + 40);
      }
      if (v135 != v136 && v136 != v140)
      {
        do
        {
          v143 = v136[6];
          v144 = (unsigned int *)(v143 + 8);
          do
            v145 = __ldaxr(v144);
          while (__stlxr(v145 + 1, v144));
          *(_QWORD *)buf = v143;
          WebCore::SampleMap::addSample((uint64_t)&v365, (unsigned int **)buf);
          v146 = *(unsigned int **)buf;
          *(_QWORD *)buf = 0;
          if (v146)
          {
            v147 = v146 + 2;
            do
            {
              v148 = __ldaxr(v147);
              v149 = v148 - 1;
            }
            while (__stlxr(v149, v147));
            if (!v149)
            {
              atomic_store(1u, v146 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v146 + 8))(v146);
            }
          }
          v150 = (_QWORD *)v136[1];
          if (v150)
          {
            do
            {
              v151 = v150;
              v150 = (_QWORD *)*v150;
            }
            while (v150);
          }
          else
          {
            do
            {
              v151 = (_QWORD *)v136[2];
              v313 = *v151 == (_QWORD)v136;
              v136 = v151;
            }
            while (!v313);
          }
          v136 = v151;
        }
        while (v151 != v140);
      }
    }
  }
  if (((*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)*v25 + 104))(*v25) & 1) == 0)
    goto LABEL_375;
  v152 = (WTF *)(*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)*v25 + 24))(*v25);
  v154 = v153;
  v155 = (*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)*v25 + 16))(*v25);
  v363[0] = v152;
  v363[1] = v154;
  *(_QWORD *)&v364 = v155;
  *((_QWORD *)&v364 + 1) = v156;
  v158 = (WTF::MediaTime *)(v352 + 16);
  v157 = *(_QWORD **)(v352 + 16);
  if (!v157)
  {
LABEL_375:
    v229 = v352;
    v379 = (WTF::Logger *)1;
    LODWORD(v380) = 1000;
    BYTE4(v380) = 1;
    v347 = (WTF::MediaTime *)(v352 + 160);
    if ((*(_BYTE *)(v352 + 172) & 1) != 0)
    {
      *(_QWORD *)buf = WTF::MediaTime::operator-();
      *(_QWORD *)&buf[8] = v230;
      if ((int)WTF::MediaTime::compare((WTF::MediaTime *)buf, (const WTF::MediaTime *)&v378) <= 0)
      {
        v231 = *(_DWORD *)(v352 + 108);
        if (v231)
        {
          *(_OWORD *)buf = *(_OWORD *)(*(_QWORD *)(v352 + 96) + 32 * (v231 - 1) + 16);
          *(_OWORD *)v363 = *(_OWORD *)v347;
          v359 = (WTF **)WTF::MediaTime::operator-();
          v360 = v232;
          if ((int)WTF::MediaTime::compare((WTF::MediaTime *)&v359, (const WTF::MediaTime *)v363) >= 1)
          {
            *(_QWORD *)&v357 = WTF::MediaTime::operator-();
            *((_QWORD *)&v357 + 1) = v233;
            if (WTF::MediaTime::compare((WTF::MediaTime *)&v357, (const WTF::MediaTime *)(v352 + 144)) == -1)
            {
              SamplesBetweenPresentationTimesFromEnd = WebCore::PresentationOrderSampleMap::findSamplesBetweenPresentationTimesFromEnd((WebCore::PresentationOrderSampleMap *)(v352 + 32), (const WTF::MediaTime *)v363, (const WTF::MediaTime *)&v359);
              v240 = v243;
            }
            else
            {
              SamplesBetweenPresentationTimesFromEnd = (WebCore::PresentationOrderSampleMap *)(v352 + 40);
              v235 = *(_QWORD **)(v352 + 40);
              if (!v235)
                goto LABEL_392;
              v236 = (WebCore::PresentationOrderSampleMap *)(v352 + 40);
              do
              {
                v237 = WTF::MediaTime::compare((WTF::MediaTime *)(v235 + 4), (const WTF::MediaTime *)v363);
                v238 = v235 + 1;
                if (v237 != -1)
                {
                  v238 = v235;
                  v236 = (WebCore::PresentationOrderSampleMap *)v235;
                }
                v235 = (_QWORD *)*v238;
              }
              while (*v238);
              v239 = *(_QWORD **)SamplesBetweenPresentationTimesFromEnd;
              v240 = (_QWORD *)(v352 + 40);
              if (*(_QWORD *)SamplesBetweenPresentationTimesFromEnd)
              {
                v240 = (_QWORD *)(v352 + 40);
                do
                {
                  v241 = WTF::MediaTime::compare((WTF::MediaTime *)(v239 + 4), (const WTF::MediaTime *)&v359);
                  v242 = v239 + 1;
                  if (v241 != -1)
                  {
                    v242 = v239;
                    v240 = v239;
                  }
                  v239 = (_QWORD *)*v242;
                }
                while (*v242);
              }
              if (v236 == (WebCore::PresentationOrderSampleMap *)v240)
LABEL_392:
                v240 = (_QWORD *)(v352 + 40);
              else
                SamplesBetweenPresentationTimesFromEnd = v236;
              v229 = v352;
            }
            if ((WebCore::PresentationOrderSampleMap *)(v229 + 40) != SamplesBetweenPresentationTimesFromEnd
              && SamplesBetweenPresentationTimesFromEnd != (WebCore::PresentationOrderSampleMap *)v240)
            {
              do
              {
                v244 = *((_QWORD *)SamplesBetweenPresentationTimesFromEnd + 6);
                v245 = (unsigned int *)(v244 + 8);
                do
                  v246 = __ldaxr(v245);
                while (__stlxr(v246 + 1, v245));
                *(_QWORD *)&v357 = v244;
                WebCore::SampleMap::addSample((uint64_t)&v365, (unsigned int **)&v357);
                v247 = (unsigned int *)v357;
                *(_QWORD *)&v357 = 0;
                if (v247)
                {
                  v248 = v247 + 2;
                  do
                  {
                    v249 = __ldaxr(v248);
                    v250 = v249 - 1;
                  }
                  while (__stlxr(v250, v248));
                  if (!v250)
                  {
                    atomic_store(1u, v247 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v247 + 8))(v247);
                  }
                }
                v251 = (WebCore::PresentationOrderSampleMap *)*((_QWORD *)SamplesBetweenPresentationTimesFromEnd + 1);
                if (v251)
                {
                  do
                  {
                    v252 = (WebCore::PresentationOrderSampleMap **)v251;
                    v251 = *(WebCore::PresentationOrderSampleMap **)v251;
                  }
                  while (v251);
                }
                else
                {
                  do
                  {
                    v252 = (WebCore::PresentationOrderSampleMap **)*((_QWORD *)SamplesBetweenPresentationTimesFromEnd + 2);
                    v313 = *v252 == SamplesBetweenPresentationTimesFromEnd;
                    SamplesBetweenPresentationTimesFromEnd = (WebCore::PresentationOrderSampleMap *)v252;
                  }
                  while (!v313);
                }
                SamplesBetweenPresentationTimesFromEnd = (WebCore::PresentationOrderSampleMap *)v252;
              }
              while (v252 != v240);
            }
          }
        }
      }
    }
    v360 = 0;
    v361 = 0;
    v359 = &v360;
    if (v369)
    {
      v253 = v229 + 8;
      v254 = std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::find<std::pair<WTF::MediaTime,WTF::MediaTime>>(v229 + 8, (WTF::MediaTime *)(v365 + 4));
      v255 = v366[0];
      v256 = v366;
      if (v366[0])
      {
        do
        {
          v257 = v255;
          v255 = (WTF *)*((_QWORD *)v255 + 1);
        }
        while (v255);
      }
      else
      {
        do
        {
          v257 = v256[2];
          v313 = *(_QWORD *)v257 == (_QWORD)v256;
          v256 = (WTF **)v257;
        }
        while (v313);
      }
      v258 = std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::find<std::pair<WTF::MediaTime,WTF::MediaTime>>(v229 + 8, (WTF *)((char *)v257 + 32));
      v259 = (_QWORD *)(v229 + 16);
      if ((_QWORD *)(v229 + 16) != v258)
      {
        v260 = (_QWORD *)v258[1];
        if (v260)
        {
          do
          {
            v261 = v260;
            v260 = (_QWORD *)*v260;
          }
          while (v260);
        }
        else
        {
          do
          {
            v261 = (_QWORD *)v258[2];
            v313 = *v261 == (_QWORD)v258;
            v258 = v261;
          }
          while (!v313);
        }
        if (v261 != v259)
        {
          while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v261[8] + 104))(v261[8]) & 1) == 0)
          {
            v262 = (_QWORD *)v261[1];
            if (v262)
            {
              do
              {
                v263 = v262;
                v262 = (_QWORD *)*v262;
              }
              while (v262);
            }
            else
            {
              do
              {
                v263 = (_QWORD *)v261[2];
                v313 = *v263 == (_QWORD)v261;
                v261 = v263;
              }
              while (!v313);
            }
            v261 = v263;
            if (v263 == v259)
              goto LABEL_431;
          }
          v259 = v261;
        }
      }
LABEL_431:
      std::map<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,WTF::FastAllocator<std::pair<std::pair<WTF::MediaTime,WTF::MediaTime> const,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::insert[abi:sn180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__tree_node<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,void *> *,long>>>(&v359, v254, v259);
      v264 = (*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)*v25 + 24))(*v25);
      v266 = v265;
      v267 = (*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)*v25 + 16))(*v25);
      *(_QWORD *)buf = v264;
      *(_QWORD *)&buf[8] = v266;
      *(_QWORD *)&v388 = v267;
      *((_QWORD *)&v388 + 1) = v268;
      SamplesBetweenDecodeKeys = WebCore::DecodeOrderSampleMap::findSamplesBetweenDecodeKeys(v253, (WTF::MediaTime *)buf, (WTF::MediaTime *)(v365 + 4));
      if (SamplesBetweenDecodeKeys != v270)
        std::map<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,WTF::FastAllocator<std::pair<std::pair<WTF::MediaTime,WTF::MediaTime> const,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::insert[abi:sn180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__tree_node<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,void *> *,long>>>(&v359, SamplesBetweenDecodeKeys, v270);
      v229 = v352;
      WebCore::TrackBuffer::removeSamples((_QWORD *)v352, &v359, (uint64_t)"didReceiveSample", (unsigned int *)v363);
      *(_QWORD *)&v357 = WebCore::SourceBufferPrivate::currentTime((WebCore::SourceBufferPrivate *)v8);
      *((_QWORD *)&v357 + 1) = v271;
      if ((*(_BYTE *)(v352 + 188) & 1) != 0
        && WTF::MediaTime::compare((WTF::MediaTime *)&v357, (const WTF::MediaTime *)(v352 + 176)) == -1)
      {
        v355 = 0;
        v356 = 0;
        WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v355, &v357, (__int128 *)(v352 + 176), 0);
        WebCore::PlatformTimeRanges::intersectWith((WTF *)&v355, (__int128 **)v363);
        if (HIDWORD(v356))
          *(_BYTE *)(v352 + 310) = 1;
        v273 = v355;
        if (v355)
        {
          v355 = 0;
          LODWORD(v356) = 0;
          WTF::fastFree(v273, v272);
        }
      }
      WebCore::PlatformTimeRanges::invert((WebCore::PlatformTimeRanges *)v363);
      WebCore::PlatformTimeRanges::intersectWith((WTF *)(v352 + 96), (__int128 **)v363);
      v275 = v363[0];
      if (v363[0])
      {
        v363[0] = 0;
        LODWORD(v363[1]) = 0;
        WTF::fastFree(v275, v274);
      }
    }
    v276 = *v25;
    v277 = (unsigned int *)((char *)*v25 + 8);
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 + 1, v277));
    *(_QWORD *)buf = v276;
    WebCore::SampleMap::addSample(v229 + 8, (unsigned int **)buf);
    v279 = *(unsigned int **)buf;
    *(_QWORD *)buf = 0;
    if (v279)
    {
      v280 = v279 + 2;
      do
      {
        v281 = __ldaxr(v280);
        v282 = v281 - 1;
      }
      while (__stlxr(v282, v280));
      if (!v282)
      {
        atomic_store(1u, v279 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v279 + 8))(v279);
      }
    }
    v283 = (WTF *)(*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)*v25 + 24))(*v25);
    v285 = v284;
    v286 = (*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)*v25 + 16))(*v25);
    v363[0] = v283;
    v363[1] = v285;
    *(_QWORD *)&v364 = v286;
    *((_QWORD *)&v364 + 1) = v287;
    v288 = v352;
    if ((*(_BYTE *)(v352 + 220) & 1) == 0
      || WTF::MediaTime::compare((WTF::MediaTime *)v363, (const WTF::MediaTime *)(v352 + 208)) != -1
      && (WTF::MediaTime::compare((WTF::MediaTime *)(v352 + 208), (const WTF::MediaTime *)v363) == -1
       || WTF::MediaTime::compare((WTF::MediaTime *)&v364, (const WTF::MediaTime *)(v352 + 224)) != -1
       && WTF::MediaTime::compare((WTF::MediaTime *)(v352 + 224), (const WTF::MediaTime *)&v364) == -1))
    {
      v289 = (_QWORD **)(v352 + 64);
      *(_OWORD *)buf = *(_OWORD *)v363;
      v388 = v364;
      v290 = *v25;
      v291 = (unsigned int *)((char *)*v25 + 8);
      do
        v292 = __ldaxr(v291);
      while (__stlxr(v292 + 1, v291));
      *(_QWORD *)&v389 = v290;
      v293 = std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::__find_equal<std::pair<WTF::MediaTime,WTF::MediaTime>>(v352 + 64, &v357, (WTF::MediaTime *)buf);
      if (!*v293)
      {
        v294 = v293;
        v295 = WTF::fastMalloc((WTF *)0x48);
        v296 = v388;
        *(_OWORD *)(v295 + 32) = *(_OWORD *)buf;
        *(_OWORD *)(v295 + 48) = v296;
        v297 = v389;
        *(_QWORD *)&v389 = 0;
        *(_QWORD *)(v295 + 64) = v297;
        v298 = v357;
        *(_QWORD *)v295 = 0;
        *(_QWORD *)(v295 + 8) = 0;
        *(_QWORD *)(v295 + 16) = v298;
        *v294 = v295;
        v299 = (_QWORD *)**v289;
        if (v299)
        {
          *v289 = v299;
          v300 = *v294;
        }
        else
        {
          v300 = v295;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(_QWORD *)(v352 + 72), v300);
        ++*(_QWORD *)(v352 + 80);
      }
      v301 = (unsigned int *)v389;
      *(_QWORD *)&v389 = 0;
      if (v301)
      {
        v302 = v301 + 2;
        do
        {
          v303 = __ldaxr(v302);
          v304 = v303 - 1;
        }
        while (__stlxr(v304, v302));
        if (!v304)
        {
          atomic_store(1u, v301 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v301 + 8))(v301);
        }
      }
      if ((*(_BYTE *)(v352 + 204) & 1) != 0)
      {
        *(_QWORD *)buf = (*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)*v25 + 16))(*v25);
        *(_QWORD *)&buf[8] = v305;
        v288 = v352;
        if (WTF::MediaTime::compare((WTF::MediaTime *)buf, (const WTF::MediaTime *)(v352 + 192)) == -1)
          *(_BYTE *)(v352 + 311) = 1;
      }
    }
    v26 = v353;
    if ((*(_BYTE *)(v288 + 124) & 1) != 0)
    {
      *(_QWORD *)&v357 = WTF::MediaTime::operator-();
      *((_QWORD *)&v357 + 1) = v306;
      if ((*(_BYTE *)(v288 + 140) & 1) != 0)
      {
        *(_QWORD *)buf = *(_QWORD *)(v288 + 128);
        *(_QWORD *)&buf[5] = *(_QWORD *)(v288 + 133);
        *(_QWORD *)&v388 = v375;
        *(_QWORD *)((char *)&v388 + 5) = *(_QWORD *)((char *)&v375 + 5);
        *(_QWORD *)&v389 = v357;
        *(_QWORD *)((char *)&v389 + 5) = *(_QWORD *)((char *)&v357 + 5);
        v312 = WTF::MediaTime::compare((WTF::MediaTime *)buf, (const WTF::MediaTime *)&v388);
        v313 = v312 == -1;
        v314 = 16 * (v312 == -1);
        if (v312 == -1)
          v315 = (uint8_t *)&v388;
        else
          v315 = buf;
        if (v313)
          v316 = 24;
        else
          v316 = 8;
        v317 = WTF::MediaTime::compare((WTF::MediaTime *)v315, (const WTF::MediaTime *)&v389);
        v318 = 32;
        if (v317 != -1)
          v318 = v314;
        v309 = *(_QWORD *)&buf[v318];
        v319 = 40;
        if (v317 != -1)
          v319 = v316;
        v288 = v352;
        v26 = v353;
        v311 = *(_QWORD *)&buf[v319];
      }
      else
      {
        v307 = WTF::MediaTime::compare((WTF::MediaTime *)&v357, (const WTF::MediaTime *)&v375);
        if (v307 == -1)
          v308 = &v375;
        else
          v308 = &v357;
        v309 = *(_QWORD *)v308;
        v310 = (char *)&v375 + 8;
        if (v307 != -1)
          v310 = (char *)&v357 + 8;
        v311 = *(_QWORD *)v310;
      }
      *(_QWORD *)(v288 + 128) = v309;
      *(_DWORD *)(v288 + 136) = v311;
      *(_BYTE *)(v288 + 140) = BYTE4(v311);
    }
    v320 = v377;
    *(_QWORD *)(v288 + 112) = v376;
    *(_DWORD *)(v288 + 120) = v320;
    *(_BYTE *)(v288 + 124) = BYTE4(v320);
    v321 = *((_QWORD *)&v375 + 1);
    *(_QWORD *)(v288 + 144) = v375;
    *(_DWORD *)(v288 + 152) = v321;
    *(_BYTE *)(v288 + 156) = BYTE4(v321);
    if ((*(_BYTE *)(v288 + 172) & 1) == 0 || WTF::MediaTime::compare((WTF::MediaTime *)&v371, v347) == 1)
    {
      v322 = *((_QWORD *)&v371 + 1);
      *(_QWORD *)(v288 + 160) = v371;
      *(_DWORD *)(v288 + 168) = v322;
      *(_BYTE *)(v288 + 172) = BYTE4(v322);
    }
    if ((*(_BYTE *)(v8 + 300) & 1) == 0 || WTF::MediaTime::compare((WTF::MediaTime *)&v371, v351) == 1)
    {
      *(_QWORD *)v351 = v371;
      *(_QWORD *)(v8 + 293) = *(_QWORD *)((char *)&v371 + 5);
    }
    if (*(_BYTE *)(v8 + 152))
    {
      *(_QWORD *)(v8 + 192) = v371;
      *(_QWORD *)(v8 + 197) = *(_QWORD *)((char *)&v371 + 5);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 224))(v8);
    }
    *(_QWORD *)buf = WTF::MediaTime::operator+();
    *(_QWORD *)&buf[8] = v323;
    WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)(v288 + 96), &v378, (__int128 *)buf, 1);
    std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy((uint64_t)&v359, v360);
    std::__tree<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy((uint64_t)&v367, v368);
    std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy((uint64_t)&v365, v366[0]);
    v103 = 2;
    goto LABEL_498;
  }
  v345 = (WTF::MediaTime *)(v352 + 16);
  v342 = (WTF::MediaTime *)(v352 + 16);
  while (2)
  {
    if (WTF::MediaTime::compare((WTF::MediaTime *)v363, (const WTF::MediaTime *)(v157 + 4)) == -1)
      goto LABEL_229;
    if (WTF::MediaTime::compare((WTF::MediaTime *)(v157 + 4), (const WTF::MediaTime *)v363) == -1)
      goto LABEL_228;
    if (WTF::MediaTime::compare((WTF::MediaTime *)&v364, (const WTF::MediaTime *)(v157 + 6)) == -1)
    {
LABEL_229:
      v158 = (WTF::MediaTime *)v157;
    }
    else
    {
      WTF::MediaTime::compare((WTF::MediaTime *)(v157 + 6), (const WTF::MediaTime *)&v364);
LABEL_228:
      ++v157;
    }
    v157 = (_QWORD *)*v157;
    if (v157)
      continue;
    break;
  }
  if (v345 == v158)
    goto LABEL_375;
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)v158 + 8) + 104))(*((_QWORD *)v158 + 8)) & 1) != 0)
  {
    *(_QWORD *)buf = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v158 + 8) + 16))(*((_QWORD *)v158 + 8));
    *(_QWORD *)&buf[8] = v159;
    v359 = (WTF **)(*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)*v25 + 16))(*v25);
    v360 = v160;
    if (WTF::MediaTime::compare((WTF::MediaTime *)buf, (const WTF::MediaTime *)&v359) == 1)
      goto LABEL_375;
  }
  v161 = (WTF::MediaTime *)*((_QWORD *)v158 + 1);
  v162 = v158;
  if (v161)
  {
    do
    {
      v163 = v161;
      v161 = *(WTF::MediaTime **)v161;
    }
    while (v161);
  }
  else
  {
    do
    {
      v163 = (WTF::MediaTime *)*((_QWORD *)v162 + 2);
      v313 = *(_QWORD *)v163 == (_QWORD)v162;
      v162 = v163;
    }
    while (!v313);
  }
  if (v163 != v345)
  {
    while (((*(uint64_t (**)(_QWORD))(**((_QWORD **)v163 + 8) + 104))(*((_QWORD *)v163 + 8)) & 1) == 0)
    {
      v164 = (WTF::MediaTime *)*((_QWORD *)v163 + 1);
      if (v164)
      {
        do
        {
          v165 = v164;
          v164 = *(WTF::MediaTime **)v164;
        }
        while (v164);
      }
      else
      {
        do
        {
          v165 = (WTF::MediaTime *)*((_QWORD *)v163 + 2);
          v313 = *(_QWORD *)v165 == (_QWORD)v163;
          v163 = v165;
        }
        while (!v313);
      }
      v163 = v165;
      if (v165 == v345)
        goto LABEL_247;
    }
    while (v345 != v163)
    {
      *(_QWORD *)buf = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v163 + 8) + 16))(*((_QWORD *)v163 + 8));
      *(_QWORD *)&buf[8] = v192;
      v359 = (WTF **)(*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)*v25 + 16))(*v25);
      v360 = v193;
      if ((int)WTF::MediaTime::compare((WTF::MediaTime *)buf, (const WTF::MediaTime *)&v359) > 0)
      {
        v342 = v163;
        break;
      }
      if (v345 == v163)
        break;
      v194 = (WTF::MediaTime *)*((_QWORD *)v163 + 1);
      if (v194)
      {
        do
        {
          v195 = v194;
          v194 = *(WTF::MediaTime **)v194;
        }
        while (v194);
      }
      else
      {
        do
        {
          v195 = (WTF::MediaTime *)*((_QWORD *)v163 + 2);
          v313 = *(_QWORD *)v195 == (_QWORD)v163;
          v163 = v195;
        }
        while (!v313);
      }
      if (v195 == v345)
        break;
      v163 = v195;
      while (((*(uint64_t (**)(_QWORD))(**((_QWORD **)v163 + 8) + 104))(*((_QWORD *)v163 + 8)) & 1) == 0)
      {
        v190 = (WTF::MediaTime *)*((_QWORD *)v163 + 1);
        if (v190)
        {
          do
          {
            v191 = v190;
            v190 = *(WTF::MediaTime **)v190;
          }
          while (v190);
        }
        else
        {
          do
          {
            v191 = (WTF::MediaTime *)*((_QWORD *)v163 + 2);
            v313 = *(_QWORD *)v191 == (_QWORD)v163;
            v163 = v191;
          }
          while (!v313);
        }
        v163 = v191;
        if (v191 == v345)
          goto LABEL_247;
      }
    }
  }
LABEL_247:
  v166 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v344 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  v167 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  v169 = v168;
  v170 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  v359 = (WTF **)v167;
  v360 = v169;
  v361 = "processMediaSample";
  v362 = v170;
  v343 = (WebCore::MediaSample *)*((_QWORD *)v158 + 8);
  v171 = v342;
  if (v345 == v342)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v358 = *(WTF::StringImpl **)buf;
  }
  else
  {
    v172 = v166;
    v173 = *((_QWORD *)v342 + 8);
    WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)buf);
    v174 = (*(uint64_t (**)(uint8_t *))(*(_QWORD *)buf + 32))(buf);
    v175 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v173 + 136);
    v176 = v173;
    v166 = v172;
    v175(v176, v174);
    (*(void (**)(uint8_t *))(*(_QWORD *)buf + 40))(buf);
    WTF::StringPrintStream::toString((WTF::StringPrintStream *)buf);
    WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)buf);
  }
  v178 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  if (!*(_BYTE *)(v166 + 12) || !*(_BYTE *)v344 || *(unsigned __int8 *)(v344 + 16) < 3u)
  {
LABEL_358:
    v219 = v358;
    v358 = 0;
    if (v219)
    {
      if (*(_DWORD *)v219 == 2)
        WTF::StringImpl::destroy(v219, v177);
      else
        *(_DWORD *)v219 -= 2;
    }
    if (v171 != v158)
    {
      do
      {
        v220 = *((_QWORD *)v158 + 8);
        v221 = (unsigned int *)(v220 + 8);
        do
          v222 = __ldaxr(v221);
        while (__stlxr(v222 + 1, v221));
        *(_QWORD *)buf = v220;
        WebCore::SampleMap::addSample((uint64_t)&v365, (unsigned int **)buf);
        v223 = *(unsigned int **)buf;
        *(_QWORD *)buf = 0;
        if (v223)
        {
          v224 = v223 + 2;
          do
          {
            v225 = __ldaxr(v224);
            v226 = v225 - 1;
          }
          while (__stlxr(v226, v224));
          if (!v226)
          {
            atomic_store(1u, v223 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v223 + 8))(v223);
          }
        }
        v227 = (WTF::MediaTime *)*((_QWORD *)v158 + 1);
        if (v227)
        {
          do
          {
            v228 = v227;
            v227 = *(WTF::MediaTime **)v227;
          }
          while (v227);
        }
        else
        {
          do
          {
            v228 = (WTF::MediaTime *)*((_QWORD *)v158 + 2);
            v313 = *(_QWORD *)v228 == (_QWORD)v158;
            v158 = v228;
          }
          while (!v313);
        }
        v158 = v228;
      }
      while (v228 != v171);
    }
    goto LABEL_375;
  }
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v359);
  WTF::String::String((WTF::String *)&v383, "Discovered out-of-order frames, from: ");
  WebCore::MediaSample::toJSONString(v343);
  WTF::String::String((WTF::String *)&v381, " to: ");
  v179 = v358;
  if (v358)
    *(_DWORD *)v358 += 2;
  v386 = v179;
  *(_QWORD *)buf = v384;
  v379 = v383;
  *(_QWORD *)&v357 = v382;
  v355 = v381;
  result = (unsigned __int8 *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v379, (uint64_t *)&v357, (uint64_t *)&v355, (uint64_t *)&v386, &v385);
  if (v385)
  {
    if (v179)
    {
      if (*(_DWORD *)v179 == 2)
        WTF::StringImpl::destroy(v179, v180);
      else
        *(_DWORD *)v179 -= 2;
    }
    v181 = v381;
    v381 = 0;
    if (v181)
    {
      if (*(_DWORD *)v181 == 2)
        WTF::StringImpl::destroy(v181, v180);
      else
        *(_DWORD *)v181 -= 2;
    }
    v182 = v382;
    v382 = 0;
    if (v182)
    {
      if (*(_DWORD *)v182 == 2)
        WTF::StringImpl::destroy(v182, v180);
      else
        *(_DWORD *)v182 -= 2;
    }
    v183 = v383;
    v383 = 0;
    if (v183)
    {
      if (*(_DWORD *)v183 == 2)
        WTF::StringImpl::destroy(v183, v180);
      else
        *(_DWORD *)v183 -= 2;
    }
    v184 = v384;
    v384 = 0;
    if (v184)
    {
      if (*(_DWORD *)v184 == 2)
        WTF::StringImpl::destroy(v184, v180);
      else
        *(_DWORD *)v184 -= 2;
    }
    v185 = *(NSObject **)(v344 + 32);
    v186 = os_log_type_enabled(v185, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v186)
    {
      WTF::String::utf8();
      v187 = v379 ? (char *)v379 + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v187;
      _os_log_impl(&dword_1940B8000, v185, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v186 = (uint64_t)v379;
      v379 = 0;
      if (v186)
      {
        if (*(_DWORD *)v186 == 1)
          v186 = WTF::fastFree((WTF *)v186, v177);
        else
          --*(_DWORD *)v186;
      }
    }
    v171 = v342;
    if (*(_BYTE *)v344 && *(unsigned __int8 *)(v344 + 16) >= 3u)
    {
      while (1)
      {
        v188 = *v178;
        if ((v188 & 1) != 0)
          break;
        v189 = __ldaxr(v178);
        if (v189 == v188)
        {
          if (!__stxr(v188 | 1, v178))
          {
            v196 = WTF::Logger::observers((WTF::Logger *)v186);
            v197 = *(unsigned int *)(v196 + 12);
            if ((_DWORD)v197)
            {
              v198 = *(WTF::MediaTime **)v196;
              v346 = (WTF::MediaTime *)(*(_QWORD *)v196 + 8 * v197);
              do
              {
                v199 = *(_QWORD *)v198;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v359);
                LODWORD(v388) = 0;
                WTF::String::String((WTF::String *)((char *)&v388 + 8), "Discovered out-of-order frames, from: ");
                LODWORD(v389) = 1;
                WebCore::MediaSample::toJSONString(v343);
                v390 = 0;
                WTF::String::String((WTF::String *)&v391, " to: ");
                v392 = 0;
                v200 = v358;
                if (v358)
                  *(_DWORD *)v358 += 2;
                v393 = v200;
                v379 = 0;
                v380 = 0;
                v201 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                LODWORD(v380) = 5;
                v379 = v201;
                v202 = HIDWORD(v380);
                *((_DWORD *)v201 + 4 * HIDWORD(v380)) = *(_DWORD *)buf;
                v203 = *(_QWORD *)&buf[8];
                if (*(_QWORD *)&buf[8])
                  **(_DWORD **)&buf[8] += 2;
                *((_QWORD *)v201 + 2 * v202 + 1) = v203;
                *((_DWORD *)v201 + 4 * (v202 + 1)) = v388;
                v204 = *((_QWORD *)&v388 + 1);
                if (*((_QWORD *)&v388 + 1))
                  **((_DWORD **)&v388 + 1) += 2;
                *((_QWORD *)v201 + 2 * (v202 + 1) + 1) = v204;
                *((_DWORD *)v201 + 4 * (v202 + 2)) = v389;
                v205 = *((_QWORD *)&v389 + 1);
                if (*((_QWORD *)&v389 + 1))
                  **((_DWORD **)&v389 + 1) += 2;
                *((_QWORD *)v201 + 2 * (v202 + 2) + 1) = v205;
                *((_DWORD *)v201 + 4 * (v202 + 3)) = v390;
                v206 = v391;
                if (v391)
                  *(_DWORD *)v391 += 2;
                *((_QWORD *)v201 + 2 * (v202 + 3) + 1) = v206;
                *((_DWORD *)v201 + 4 * (v202 + 4)) = v392;
                v207 = v393;
                if (v393)
                  *(_DWORD *)v393 += 2;
                *((_QWORD *)v201 + 2 * (v202 + 4) + 1) = v207;
                HIDWORD(v380) = v202 + 5;
                (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v199 + 16))(v199, v344, 3, &v379);
                v208 = v379;
                if (HIDWORD(v380))
                {
                  v209 = 16 * HIDWORD(v380);
                  v210 = (WTF::StringImpl **)((char *)v379 + 8);
                  do
                  {
                    v211 = *v210;
                    *v210 = 0;
                    if (v211)
                    {
                      if (*(_DWORD *)v211 == 2)
                        WTF::StringImpl::destroy(v211, v177);
                      else
                        *(_DWORD *)v211 -= 2;
                    }
                    v210 += 2;
                    v209 -= 16;
                  }
                  while (v209);
                  v208 = v379;
                  v178 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                }
                if (v208)
                {
                  v379 = 0;
                  LODWORD(v380) = 0;
                  WTF::fastFree(v208, v177);
                }
                v212 = v393;
                v393 = 0;
                if (v212)
                {
                  if (*(_DWORD *)v212 == 2)
                    WTF::StringImpl::destroy(v212, v177);
                  else
                    *(_DWORD *)v212 -= 2;
                }
                v213 = v391;
                v391 = 0;
                if (v213)
                {
                  if (*(_DWORD *)v213 == 2)
                    WTF::StringImpl::destroy(v213, v177);
                  else
                    *(_DWORD *)v213 -= 2;
                }
                v214 = (WTF::StringImpl *)*((_QWORD *)&v389 + 1);
                *((_QWORD *)&v389 + 1) = 0;
                if (v214)
                {
                  if (*(_DWORD *)v214 == 2)
                    WTF::StringImpl::destroy(v214, v177);
                  else
                    *(_DWORD *)v214 -= 2;
                }
                v215 = (WTF::StringImpl *)*((_QWORD *)&v388 + 1);
                *((_QWORD *)&v388 + 1) = 0;
                if (v215)
                {
                  if (*(_DWORD *)v215 == 2)
                    WTF::StringImpl::destroy(v215, v177);
                  else
                    *(_DWORD *)v215 -= 2;
                }
                v216 = *(WTF::StringImpl **)&buf[8];
                *(_QWORD *)&buf[8] = 0;
                if (v216)
                {
                  if (*(_DWORD *)v216 == 2)
                    WTF::StringImpl::destroy(v216, v177);
                  else
                    *(_DWORD *)v216 -= 2;
                }
                v198 = (WTF::MediaTime *)((char *)v198 + 8);
              }
              while (v198 != v346);
            }
            v217 = __ldxr(v178);
            if (v217 == 1)
            {
              v171 = v342;
              if (!__stlxr(0, v178))
                break;
            }
            else
            {
              __clrex();
              v171 = v342;
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v178);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v218 = v385;
    v385 = 0;
    if (v218)
    {
      if (*(_DWORD *)v218 == 2)
        WTF::StringImpl::destroy(v218, v177);
      else
        *(_DWORD *)v218 -= 2;
    }
    goto LABEL_358;
  }
  __break(0xC471u);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj1EE11whenSettledIZNS3_19SourceBufferPrivate16resetParserStateEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlRKNSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSN_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E340F9E8;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj1EE11whenSettledIZNS3_19SourceBufferPrivate16resetParserStateEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlRKNSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSN_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E340F9E8;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj1EE11whenSettledIZNS3_19SourceBufferPrivate16resetParserStateEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlRKNSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSN_EE4callESN_@<X0>(_QWORD *a1@<X0>, __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  __int128 v10;
  WTF::NativePromiseBase *v11;
  _BYTE *v12;
  uint64_t v14;
  __int128 v15;
  WTF::NativePromiseBase *v16;
  _BYTE *v17;
  __int16 v18;
  __int128 v19;
  __int128 v20;
  char v21;

  v18 = *a2;
  v4 = a1[1];
  if (!v4)
    goto LABEL_18;
  v6 = a1[2];
  v5 = a1[3];
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
    ++*(_QWORD *)(v4 + 8);
  else
    v6 = 0;
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 != 1)
  {
    __clrex();
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v6)
      goto LABEL_12;
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_17;
  if (v6)
  {
LABEL_12:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 424))(v5);
    v19 = 0uLL;
    *(_QWORD *)&v20 = "operator()";
    *((_QWORD *)&v20 + 1) = 0;
    v9 = WTF::fastMalloc((WTF *)0x80);
    *(_DWORD *)(v9 + 8) = 1;
    *(_QWORD *)v9 = off_1E340F638;
    v10 = v20;
    *(_OWORD *)(v9 + 16) = v19;
    *(_OWORD *)(v9 + 32) = v10;
    *(_BYTE *)(v9 + 48) = 0;
    v11 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v11 = 1;
    *((_DWORD *)v11 + 4) = 0;
    *(_QWORD *)(v9 + 56) = v11;
    *(_QWORD *)(v9 + 64) = v9 + 80;
    *(_QWORD *)(v9 + 72) = 3;
    *(_WORD *)(v9 + 120) = 0;
    *(_QWORD *)(v9 + 104) = 0;
    *(_QWORD *)(v9 + 112) = 0;
    v12 = (_BYTE *)WTF::NativePromiseBase::logChannel(v11);
    if (*v12)
    {
      if (v12[16] >= 4u)
        WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v12, v9);
    }
    *a3 = v9;
    WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::settle<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>(v9, &v18, (WTF::Logger::LogSiteIdentifier *)&v19);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v6 + 8));
  }
LABEL_18:
  v21 = 2;
  v19 = 0uLL;
  *(_QWORD *)&v20 = "operator()";
  *((_QWORD *)&v20 + 1) = 0;
  v14 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)v14 = off_1E340F638;
  v15 = v20;
  *(_OWORD *)(v14 + 16) = v19;
  *(_OWORD *)(v14 + 32) = v15;
  *(_BYTE *)(v14 + 48) = 0;
  v16 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v16 = 1;
  *((_DWORD *)v16 + 4) = 0;
  *(_QWORD *)(v14 + 56) = v16;
  *(_QWORD *)(v14 + 64) = v14 + 80;
  *(_QWORD *)(v14 + 72) = 3;
  *(_WORD *)(v14 + 120) = 0;
  *(_QWORD *)(v14 + 104) = 0;
  *(_QWORD *)(v14 + 112) = 0;
  v17 = (_BYTE *)WTF::NativePromiseBase::logChannel(v16);
  if (*v17 && v17[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v17, v14);
  *a3 = v14;
  return (unsigned __int8 *)WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v14, &v21, (WTF::Logger::LogSiteIdentifier *)&v19);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::settle<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>(uint64_t a1, _WORD *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v5;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  uint64_t result;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  char v16;
  int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::Logger *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _WORD *v52;
  WTF::Lock *v54;
  char v55;
  WTF::Logger *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint8_t buf[4];
  _BYTE v63[12];
  int v64;
  WTF::StringImpl *v65;
  int v66;
  WTF::StringImpl *v67[3];

  v67[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v5 = (WTF::Lock *)(a1 + 48);
  v54 = v5;
  v55 = 1;
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  v5 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel(v5);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (!v8)
    goto LABEL_93;
  v9 = v7;
  WTF::Logger::LogSiteIdentifier::toString(a3);
  WTF::String::String((WTF::String *)&v59, " settling ");
  result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v58, a1);
  if (v60)
  {
    v11 = *((_DWORD *)v60 + 1);
    if (v59)
      goto LABEL_12;
LABEL_108:
    v12 = 0;
    if (v58)
      goto LABEL_13;
LABEL_109:
    v13 = 0;
    goto LABEL_14;
  }
  v11 = 0;
  if (!v59)
    goto LABEL_108;
LABEL_12:
  v12 = *((_DWORD *)v59 + 1);
  if (!v58)
    goto LABEL_109;
LABEL_13:
  v13 = *((_DWORD *)v58 + 1);
LABEL_14:
  if ((v13 | v12) < 0
    || ((v14 = __OFADD__(v12, v13), v15 = v12 + v13, !v14) ? (v16 = 0) : (v16 = 1),
        v11 < 0 || (v16 & 1) != 0 || (result = (v11 + v15), __OFADD__(v11, v15))))
  {
    v61 = 0;
    goto LABEL_113;
  }
  if (v60 && (*((_BYTE *)v60 + 16) & 4) == 0)
  {
    v17 = 0;
    goto LABEL_28;
  }
  if (v59)
  {
    v18 = *((_DWORD *)v59 + 4);
    v17 = (v18 >> 2) & 1;
    if (v58 && (v18 & 4) != 0)
      goto LABEL_27;
  }
  else
  {
    if (v58)
    {
LABEL_27:
      v17 = (*((unsigned __int8 *)v58 + 16) >> 2) & 1;
      goto LABEL_28;
    }
    v17 = 1;
  }
LABEL_28:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v17, v60, (uint64_t)v59, (uint64_t)v58, &v61);
  if (!v61)
  {
LABEL_113:
    __break(0xC471u);
    return result;
  }
  v20 = v58;
  v58 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v59;
  v59 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v60;
  v60 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v19);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = *((_QWORD *)v9 + 4);
  v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v24)
  {
    WTF::String::utf8();
    v26 = v56 ? (char *)v56 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v63 = v26;
    _os_log_impl(&dword_1940B8000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v24 = (uint64_t)v56;
    v56 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        v24 = WTF::fastFree((WTF *)v24, v25);
      else
        --*(_DWORD *)v24;
    }
  }
  if (*v9 && v9[16] >= 4u)
  {
    v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v28 = *v27;
      if ((v28 & 1) != 0)
        break;
      v29 = __ldaxr(v27);
      if (v29 == v28)
      {
        if (!__stxr(v28 | 1, v27))
        {
          v52 = a2;
          v30 = WTF::Logger::observers((WTF::Logger *)v24);
          v31 = *(unsigned int *)(v30 + 12);
          if ((_DWORD)v31)
          {
            v32 = *(uint64_t **)v30;
            v33 = *(_QWORD *)v30 + 8 * v31;
            do
            {
              v34 = *v32;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(a3);
              v64 = 0;
              WTF::String::String((WTF::String *)&v65, " settling ");
              v66 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(v67, a1);
              v56 = 0;
              v57 = 0;
              v35 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v57) = 3;
              v56 = v35;
              v36 = HIDWORD(v57);
              *((_DWORD *)v35 + 4 * HIDWORD(v57)) = *(_DWORD *)buf;
              v37 = *(_QWORD *)&v63[4];
              if (*(_QWORD *)&v63[4])
                **(_DWORD **)&v63[4] += 2;
              *((_QWORD *)v35 + 2 * v36 + 1) = v37;
              *((_DWORD *)v35 + 4 * (v36 + 1)) = v64;
              v38 = v65;
              if (v65)
                *(_DWORD *)v65 += 2;
              *((_QWORD *)v35 + 2 * (v36 + 1) + 1) = v38;
              *((_DWORD *)v35 + 4 * (v36 + 2)) = v66;
              v39 = v67[0];
              if (v67[0])
                *(_DWORD *)v67[0] += 2;
              *((_QWORD *)v35 + 2 * (v36 + 2) + 1) = v39;
              HIDWORD(v57) = v36 + 3;
              (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v34 + 16))(v34, v9, 4, &v56);
              v40 = v56;
              if (HIDWORD(v57))
              {
                v41 = 16 * HIDWORD(v57);
                v42 = (WTF::StringImpl **)((char *)v56 + 8);
                do
                {
                  v43 = *v42;
                  *v42 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                      WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v25);
                    else
                      *(_DWORD *)v43 -= 2;
                  }
                  v42 += 2;
                  v41 -= 16;
                }
                while (v41);
                v40 = v56;
              }
              if (v40)
              {
                v56 = 0;
                LODWORD(v57) = 0;
                WTF::fastFree(v40, v25);
              }
              v44 = v67[0];
              v67[0] = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v25);
                else
                  *(_DWORD *)v44 -= 2;
              }
              v45 = v65;
              v65 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v25);
                else
                  *(_DWORD *)v45 -= 2;
              }
              v46 = *(WTF::StringImpl **)&v63[4];
              *(_QWORD *)&v63[4] = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v25);
                else
                  *(_DWORD *)v46 -= 2;
              }
              ++v32;
            }
            while (v32 != (uint64_t *)v33);
          }
          v47 = __ldxr(v27);
          if (v47 == 1)
          {
            a2 = v52;
            if (!__stlxr(0, v27))
              break;
          }
          else
          {
            __clrex();
            a2 = v52;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v48 = v61;
  v61 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v25);
    else
      *(_DWORD *)v48 -= 2;
  }
LABEL_93:
  v49 = *(_QWORD *)(a1 + 56);
  v50 = *(unsigned int *)(v49 + 16);
  if ((_DWORD)v50 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E340F650[v50])(buf, v49 + 8);
  *(_DWORD *)(v49 + 16) = -1;
  *(_WORD *)(v49 + 8) = *a2;
  *(_DWORD *)(v49 + 16) = 1;
  result = WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::dispatchAll(a1, (unsigned __int8 **)&v54);
  if (v55)
  {
    result = (uint64_t)v54;
    v51 = __ldxr((unsigned __int8 *)v54);
    if (v51 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v54))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj1EE11whenSettledIZNS3_19SourceBufferPrivate14memoryPressureERKNS_9MediaTimeEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlRKNSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSQ_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E340FA10;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj1EE11whenSettledIZNS3_19SourceBufferPrivate14memoryPressureERKNS_9MediaTimeEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlRKNSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSQ_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E340FA10;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj1EE11whenSettledIZNS3_19SourceBufferPrivate14memoryPressureERKNS_9MediaTimeEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlRKNSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSQ_EE4callESQ_@<X0>(_QWORD *a1@<X0>, __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  __int128 v11;
  WTF::NativePromiseBase *v12;
  _BYTE *v13;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  WTF::NativePromiseBase *v21;
  _BYTE *v22;
  __int16 v23;
  unsigned int *v24;
  __int128 v25;
  __int128 v26;

  v23 = *a2;
  v4 = a1[1];
  if (!v4)
    goto LABEL_16;
  v7 = a1[2];
  v6 = (uint64_t *)a1[3];
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
    ++*(_QWORD *)(v4 + 8);
  else
    v7 = 0;
  v9 = __ldxr((unsigned __int8 *)v4);
  if (v9 != 1)
  {
    __clrex();
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_12;
    goto LABEL_16;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_15;
  if (v7)
  {
LABEL_12:
    if ((*(unsigned int (**)(uint64_t *))(*v6 + 440))(v6))
    {
      WebCore::SourceBufferPrivate::evictFrames((WebCore::SourceBufferPrivate *)v6, v6[7], (const WTF::MediaTime *)(a1 + 4));
    }
    else
    {
      (*(void (**)(uint64_t *))(*v6 + 136))(v6);
      (*(void (**)(uint64_t *, uint64_t))(*v6 + 144))(v6, 1);
    }
    WebCore::SourceBufferPrivate::updateBuffered((WebCore::SourceBufferPrivate *)&v24, v6);
    v15 = v24;
    v24 = 0;
    if (v15)
    {
      v16 = v15 + 2;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v15 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
      }
    }
    WebCore::SourceBufferPrivate::computeEvictionData(v6, 0);
    v25 = 0uLL;
    *(_QWORD *)&v26 = "operator()";
    *((_QWORD *)&v26 + 1) = 0;
    v19 = WTF::fastMalloc((WTF *)0x80);
    *(_DWORD *)(v19 + 8) = 1;
    *(_QWORD *)v19 = off_1E340F638;
    v20 = v26;
    *(_OWORD *)(v19 + 16) = v25;
    *(_OWORD *)(v19 + 32) = v20;
    *(_BYTE *)(v19 + 48) = 0;
    v21 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v21 = 1;
    *((_DWORD *)v21 + 4) = 0;
    *(_QWORD *)(v19 + 56) = v21;
    *(_QWORD *)(v19 + 64) = v19 + 80;
    *(_QWORD *)(v19 + 72) = 3;
    *(_WORD *)(v19 + 120) = 0;
    *(_QWORD *)(v19 + 104) = 0;
    *(_QWORD *)(v19 + 112) = 0;
    v22 = (_BYTE *)WTF::NativePromiseBase::logChannel(v21);
    if (*v22)
    {
      if (v22[16] >= 4u)
        WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v22, v19);
    }
    *a3 = v19;
    WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::settle<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>(v19, &v23, (WTF::Logger::LogSiteIdentifier *)&v25);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 8));
  }
LABEL_16:
  LOBYTE(v24) = 2;
  v25 = 0uLL;
  *(_QWORD *)&v26 = "operator()";
  *((_QWORD *)&v26 + 1) = 0;
  v10 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)v10 = off_1E340F638;
  v11 = v26;
  *(_OWORD *)(v10 + 16) = v25;
  *(_OWORD *)(v10 + 32) = v11;
  *(_BYTE *)(v10 + 48) = 0;
  v12 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v12 = 1;
  *((_DWORD *)v12 + 4) = 0;
  *(_QWORD *)(v10 + 56) = v12;
  *(_QWORD *)(v10 + 64) = v10 + 80;
  *(_QWORD *)(v10 + 72) = 3;
  *(_WORD *)(v10 + 120) = 0;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)(v10 + 112) = 0;
  v13 = (_BYTE *)WTF::NativePromiseBase::logChannel(v12);
  if (*v13 && v13[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v13, v10);
  *a3 = v10;
  return (unsigned __int8 *)WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v10, (char *)&v24, (WTF::Logger::LogSiteIdentifier *)&v25);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__assign_alt[abi:sn180100]<0ul,WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  char v17;

  v4 = result;
  v5 = *(unsigned int *)(result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E340FA28[v5])(&v17, result);
LABEL_7:
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v10;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (!v7)
    return result;
  v8 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_11;
  }
  result = MEMORY[0x19AEA534C](v8);
LABEL_11:
  v11 = *(_QWORD *)(v8 + 8);
  v12 = v11 - 1;
  *(_QWORD *)(v8 + 8) = v11 - 1;
  if (v11 == 1)
  {
    v16 = *(_QWORD *)(v8 + 16);
    v13 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    v14 = v16 != 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = __ldxr((unsigned __int8 *)v8);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_17:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (!v12)
  {
    if (v13)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (!v14)
      return WTF::fastFree((WTF *)v8, a2);
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__assign_alt[abi:sn180100]<1ul,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  char v17;

  v4 = result;
  v5 = *(unsigned int *)(result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E340FA28[v5])(&v17, result);
LABEL_7:
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v10;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (!v7)
    return result;
  v8 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_11;
  }
  result = MEMORY[0x19AEA534C](v8);
LABEL_11:
  v11 = *(_QWORD *)(v8 + 8);
  v12 = v11 - 1;
  *(_QWORD *)(v8 + 8) = v11 - 1;
  if (v11 == 1)
  {
    v16 = *(_QWORD *)(v8 + 16);
    v13 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    v14 = v16 != 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = __ldxr((unsigned __int8 *)v8);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_17:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (!v12)
  {
    if (v13)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (!v14)
      return WTF::fastFree((WTF *)v8, a2);
  }
  return result;
}

_QWORD *WebCore::ScratchBuffer::purgeTimerFired(_QWORD *this, void *a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  int v12;
  uint64_t v13;

  v2 = this;
  while ((_MergedGlobals_228 & 1) == 0)
  {
    v3 = __ldaxr((unsigned __int8 *)&_MergedGlobals_228);
    if (v3 == _MergedGlobals_228)
    {
      if (!__stxr(_MergedGlobals_228 | 1, (unsigned __int8 *)&_MergedGlobals_228))
      {
        v4 = *this;
        *this = 0;
        if (!v4)
          goto LABEL_24;
        v5 = *(_QWORD *)(v4 + 8);
        if (__ldaxr((unsigned __int8 *)v5))
        {
          __clrex();
          goto LABEL_11;
        }
        if (__stxr(1u, (unsigned __int8 *)v5))
LABEL_11:
          this = (_QWORD *)MEMORY[0x19AEA534C](v5);
        v7 = *(_QWORD *)(v5 + 8);
        v8 = v7 - 1;
        *(_QWORD *)(v5 + 8) = v7 - 1;
        if (v7 == 1)
        {
          v13 = *(_QWORD *)(v5 + 16);
          v9 = *(_QWORD *)(v5 + 24);
          *(_QWORD *)(v5 + 24) = 0;
          v10 = v13 != 0;
        }
        else
        {
          v9 = 0;
          v10 = 1;
        }
        v11 = __ldxr((unsigned __int8 *)v5);
        if (v11 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v5))
          {
            if (!v8)
            {
LABEL_20:
              if (v9)
                this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
              if (!v10)
                this = (_QWORD *)WTF::fastFree((WTF *)v5, a2);
            }
LABEL_24:
            v2[14] = 0;
            *(_QWORD *)((char *)v2 + 124) = 0;
            v12 = __ldxr((unsigned __int8 *)&_MergedGlobals_228);
            if (v12 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_228))
                return this;
            }
            else
            {
              __clrex();
            }
            return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_228);
          }
        }
        else
        {
          __clrex();
        }
        this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
        if (!v8)
          goto LABEL_20;
        goto LABEL_24;
      }
    }
    else
    {
      __clrex();
    }
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::ScratchBuffer::*&)(void),WebCore::ScratchBuffer*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ShadowBlur::drawRectShadow(WebCore::GraphicsContext &,WebCore::FloatRoundedRect const&)::$_0,void,WebCore::ImageBuffer &,WebCore::FloatPoint const&,WebCore::FloatSize const&>::call(uint64_t a1, WebCore::ImageBuffer *a2, WebCore::FloatPoint *a3, WebCore::FloatSize *a4)
{
  return WebCore::ShadowBlur::drawShadowBuffer(*(WebCore::ShadowBlur **)(a1 + 8), *(WebCore::GraphicsContext **)(a1 + 16), a2, a3, a4);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ShadowBlur::drawRectShadow(WebCore::GraphicsContext &,WebCore::FloatRoundedRect const&)::$_1,void,WebCore::ImageBuffer &,WebCore::FloatRect const&,WebCore::FloatRect const&>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _BYTE v15[16];
  uint64_t v16;
  char v17;

  v8 = *(_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 96))(v8, 1);
  v9 = *(_QWORD *)(a1 + 8);
  v15[0] = 0;
  v17 = 0;
  WebCore::GraphicsContextState::setDropShadow(v9 + 8, (uint64_t)v15);
  if (v17)
  {
    if ((v16 & 0x8000000000000) != 0)
    {
      v12 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v10);
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 88))(v9, v9 + 8);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 384))(*(_QWORD *)(a1 + 8), a2, a3, a4, 4641);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 104))(v8, 1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ShadowBlur::drawRectShadow(WebCore::GraphicsContext &,WebCore::FloatRoundedRect const&)::$_2,void,WebCore::FloatRect const&,WebCore::Color const&>::call(uint64_t a1, uint64_t a2, const WebCore::Color *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _BYTE v13[16];
  uint64_t v14;
  char v15;

  v6 = *(_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, 1);
  WebCore::GraphicsContext::setFillColor(*(WebCore::GraphicsContext **)(a1 + 8), a3);
  v7 = *(_QWORD *)(a1 + 8);
  v13[0] = 0;
  v15 = 0;
  WebCore::GraphicsContextState::setDropShadow(v7 + 8, (uint64_t)v13);
  if (v15)
  {
    if ((v14 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v8);
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 88))(v7, v7 + 8);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 216))(*(_QWORD *)(a1 + 8), a2, 1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 104))(v6, 1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ShadowBlur::drawInsetShadow(WebCore::GraphicsContext &,WebCore::FloatRect const&,WebCore::FloatRoundedRect const&)::$_0,void,WebCore::ImageBuffer &,WebCore::FloatPoint const&,WebCore::FloatSize const&>::call(uint64_t a1, WebCore::ImageBuffer *a2, WebCore::FloatPoint *a3, WebCore::FloatSize *a4)
{
  return WebCore::ShadowBlur::drawShadowBuffer(*(WebCore::ShadowBlur **)(a1 + 8), *(WebCore::GraphicsContext **)(a1 + 16), a2, a3, a4);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ShadowBlur::drawInsetShadow(WebCore::GraphicsContext &,WebCore::FloatRect const&,WebCore::FloatRoundedRect const&)::$_1,void,WebCore::ImageBuffer &,WebCore::FloatRect const&,WebCore::FloatRect const&>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _BYTE v15[16];
  uint64_t v16;
  char v17;

  v8 = *(_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 96))(v8, 1);
  v9 = *(_QWORD *)(a1 + 8);
  v15[0] = 0;
  v17 = 0;
  WebCore::GraphicsContextState::setDropShadow(v9 + 8, (uint64_t)v15);
  if (v17)
  {
    if ((v16 & 0x8000000000000) != 0)
    {
      v12 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v10);
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 88))(v9, v9 + 8);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 384))(*(_QWORD *)(a1 + 8), a2, a3, a4, 4641);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 104))(v8, 1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ShadowBlur::drawInsetShadow(WebCore::GraphicsContext &,WebCore::FloatRect const&,WebCore::FloatRoundedRect const&)::$_2,void,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::Color const&>::call(uint64_t a1, const WebCore::FloatRect *a2, const WebCore::FloatRect *a3, const WebCore::Color *a4)
{
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE v16[16];
  uint64_t v17;
  char v18;
  _BYTE v19[8];
  uint64_t v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  WebCore::Path::addRect((WebCore::Path *)v19, a2);
  v7 = WebCore::Path::addRect((WebCore::Path *)v19, a3);
  v8 = *(_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v8 + 96))(v8, 1, v7);
  v9 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v9 + 192))
  {
    *(_BYTE *)(v9 + 192) = 1;
    *(_DWORD *)(v9 + 184) |= 2u;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 88))(v9, v9 + 8);
  WebCore::GraphicsContext::setFillColor(*(WebCore::GraphicsContext **)(a1 + 8), a4);
  v10 = *(_QWORD *)(a1 + 8);
  v16[0] = 0;
  v18 = 0;
  WebCore::GraphicsContextState::setDropShadow(v10 + 8, (uint64_t)v16);
  if (v18)
  {
    if ((v17 & 0x8000000000000) != 0)
    {
      v13 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v11);
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 88))(v10, v10 + 8);
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8), v19);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 104))(v8, 1);
  if (v21 != -1)
    return ((uint64_t (*)(_BYTE *, uint64_t *))off_1E340F5D0[v21])(v16, &v20);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SourceBrush::gradientIdentifier(void)::$_0,WebCore::SourceBrush::gradientIdentifier(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)a2 + 40))
    return *(_QWORD *)(*(_QWORD *)a2 + 32);
  else
    return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SourceBrush::gradientIdentifier(void)::$_0,WebCore::SourceBrush::gradientIdentifier(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivate::removedFromMediaSource(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E340FB90;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivate::removedFromMediaSource(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E340FB90;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivate::removedFromMediaSource(void)::$_0,void>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t v20;

  v2 = *(_QWORD *)(result + 16);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD **)(v2 + 24);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  if (!v4)
    return result;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
    ++*(_QWORD *)(v4 + 8);
  else
    v3 = 0;
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_18;
  }
  result = MEMORY[0x19AEA534C](v4);
LABEL_18:
  v8 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v8;
  if (!v8)
  {
    v9 = *(_QWORD *)(v4 + 8);
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
        if (v9)
          goto LABEL_26;
LABEL_25:
        result = WTF::fastFree((WTF *)v4, a2);
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v9)
      goto LABEL_26;
    goto LABEL_25;
  }
  v19 = __ldxr((unsigned __int8 *)v4);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_48;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_48:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_26:
  if (!v3)
    return result;
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v3 + 40))(v3, v2);
  v12 = v3[1];
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_31;
  }
  result = MEMORY[0x19AEA534C](v12);
LABEL_31:
  v14 = *(_QWORD *)(v12 + 8);
  v15 = v14 - 1;
  *(_QWORD *)(v12 + 8) = v14 - 1;
  if (v14 == 1)
  {
    v20 = *(_QWORD *)(v12 + 16);
    v16 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v12 + 24) = 0;
    v17 = v20 != 0;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  v18 = __ldxr((unsigned __int8 *)v12);
  if (v18 != 1)
  {
    __clrex();
LABEL_38:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v15)
      return result;
    goto LABEL_39;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
    goto LABEL_38;
  if (v15)
    return result;
LABEL_39:
  if (v16)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (!v17)
    return WTF::fastFree((WTF *)v12, v11);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivate::resetTimestampOffsetInTrackBuffers(void)::$_0,void,WebCore::TrackBuffer &>::call(WTF::MediaTime *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  *(_DWORD *)(a2 + 304) = 0;
  result = (_QWORD *)WTF::MediaTime::invalidTime(a1);
  v4 = *(_QWORD *)((char *)result + 5);
  *(_QWORD *)(a2 + 272) = *result;
  *(_QWORD *)(a2 + 277) = v4;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivate::resetTrackBuffers(void)::$_0,void,WebCore::TrackBuffer &>::call(WTF::MediaTime *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;

  v3 = WTF::MediaTime::invalidTime(a1);
  v4 = *(_QWORD *)(v3 + 5);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)v3;
  *(_QWORD *)(a2 + 117) = v4;
  v5 = WTF::MediaTime::invalidTime((WTF::MediaTime *)v3);
  v6 = *(_QWORD *)(v5 + 5);
  *(_QWORD *)(a2 + 128) = *(_QWORD *)v5;
  *(_QWORD *)(a2 + 133) = v6;
  v7 = WTF::MediaTime::invalidTime((WTF::MediaTime *)v5);
  v8 = *(_QWORD *)(v7 + 5);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)v7;
  *(_QWORD *)(a2 + 149) = v8;
  result = (_QWORD *)WTF::MediaTime::invalidTime((WTF::MediaTime *)v7);
  v10 = *(_QWORD *)((char *)result + 5);
  *(_QWORD *)(a2 + 160) = *result;
  *(_QWORD *)(a2 + 165) = v10;
  *(_BYTE *)(a2 + 308) = 1;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivate::updateHighestPresentationTimestamp(void)::$_0,void,WebCore::TrackBuffer &>::call(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = (_QWORD *)(a2 + 40);
  if (a2 + 40 != *(_QWORD *)(a2 + 32))
  {
    v3 = result;
    v4 = *(_QWORD **)(result + 8);
    v5 = (_QWORD *)*v2;
    if (*v2)
    {
      do
      {
        v6 = v5;
        v5 = (_QWORD *)v5[1];
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v2[2];
        v7 = *v6 == (_QWORD)v2;
        v2 = v6;
      }
      while (v7);
    }
    v8 = v6 + 4;
    result = WTF::MediaTime::compare(*(WTF::MediaTime **)(result + 8), (const WTF::MediaTime *)(v6 + 4));
    if ((_DWORD)result == -1)
      v9 = v8;
    else
      v9 = v4;
    v10 = *(_QWORD **)(v3 + 8);
    v11 = *(_QWORD *)((char *)v9 + 5);
    *v10 = *v9;
    *(_QWORD *)((char *)v10 + 5) = v11;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivate::computeSeekTime(WebCore::SeekTarget const&)::$_0,void,WebCore::TrackBuffer &>::call(uint64_t a1, WebCore::TrackBuffer *this)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v10[4];
  _QWORD v11[2];
  __int128 v12;

  result = WebCore::TrackBuffer::findSeekTimeForTargetTime(this, *(const WTF::MediaTime **)(a1 + 8), (const WTF::MediaTime *)(*(_QWORD *)(a1 + 8) + 16), (const WTF::MediaTime *)(*(_QWORD *)(a1 + 8) + 32));
  *(_QWORD *)&v12 = result;
  *((_QWORD *)&v12 + 1) = v4;
  if ((v4 & 0x100000000) != 0)
  {
    v10[2] = WTF::MediaTime::operator-();
    v10[3] = v5;
    v11[0] = WTF::abs();
    v11[1] = v6;
    WTF::MediaTime::operator-();
    v10[0] = WTF::abs();
    v10[1] = v7;
    result = WTF::MediaTime::compare((WTF::MediaTime *)v11, (const WTF::MediaTime *)v10);
    if ((_DWORD)result == 1)
    {
      v8 = *(_QWORD **)(a1 + 16);
      v9 = v12;
      *(_QWORD *)((char *)v8 + 5) = *(_QWORD *)((char *)&v12 + 5);
      *v8 = v9;
    }
  }
  return result;
}

WTF *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivate::clearTrackBuffers(BOOL)::$_0,void,WebCore::TrackBuffer &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  WTF *result;

  v3 = a2 + 8;
  v4 = (_QWORD *)(a2 + 40);
  std::__tree<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy(a2 + 32, *(WTF **)(a2 + 40));
  *(_QWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 48) = 0;
  *v4 = 0;
  std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy(v3, *(WTF **)(a2 + 16));
  *(_QWORD *)(a2 + 8) = a2 + 16;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy(a2 + 64, *(WTF **)(a2 + 72));
  *(_QWORD *)(a2 + 64) = a2 + 72;
  *(_QWORD *)(a2 + 72) = 0;
  result = *(WTF **)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  if (result)
  {
    *(_QWORD *)(a2 + 96) = 0;
    *(_DWORD *)(a2 + 104) = 0;
    result = (WTF *)WTF::fastFree(result, v5);
  }
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  return result;
}

void WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::resolve<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::enable_if<true,void>>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  WTF::Lock *v15;
  int v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::Lock *v23;
  char v24;
  WTF::StringImpl *v25;

  v6 = (WTF::Lock *)(a1 + 48);
  v23 = v6;
  v24 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_4:
    v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_4;
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, 4u, a3, " resolving ", a1);
  v10 = *(WTF::StringImpl ***)a2;
  v11 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v11)
  {
    v12 = 0;
    goto LABEL_13;
  }
  v17 = &v10[v11];
  do
  {
    WTF::String::isolatedCopy();
    v19 = v25;
    v25 = 0;
    v20 = *v10;
    *v10 = v19;
    if (!v20)
      goto LABEL_26;
    v21 = *(_DWORD *)v20 - 2;
    if (*(_DWORD *)v20 != 2)
    {
LABEL_25:
      *(_DWORD *)v20 = v21;
      goto LABEL_26;
    }
    WTF::StringImpl::destroy(v20, v18);
    v20 = v25;
    v25 = 0;
    if (v20)
    {
      v21 = *(_DWORD *)v20 - 2;
      if (*(_DWORD *)v20 != 2)
        goto LABEL_25;
      WTF::StringImpl::destroy(v20, v22);
    }
LABEL_26:
    ++v10;
  }
  while (v10 < v17);
  v10 = *(WTF::StringImpl ***)a2;
  v12 = *(_DWORD *)(a2 + 12);
LABEL_13:
  v13 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v14 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t))off_1E340FC98[v14])(&v25, a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  *(_DWORD *)(a1 + 64) = v13;
  *(_DWORD *)(a1 + 68) = v12;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 1;
  WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::dispatchAll(a1, (unsigned __int8 **)&v23);
  if (v24)
  {
    v15 = v23;
    v16 = __ldxr((unsigned __int8 *)v23);
    if (v16 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v23))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v15);
  }
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 124);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 112);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  void *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v22;
  char v24;

  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v2, 4u, "destroying ", a1);
  WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead(a1);
  v5 = *(_DWORD *)(a1 + 124);
  if (v5)
  {
    v6 = *(uint64_t **)(a1 + 112);
    v7 = &v6[5 * v5];
    do
    {
      if (*v6)
      {
        WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead(*v6);
        v8 = (unsigned int *)*v6;
        *v6 = 0;
        if (v8)
        {
          v9 = v8 + 2;
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            atomic_store(1u, v8 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
          }
        }
      }
      else
      {
        *v6 = 0;
      }
      v6 += 5;
    }
    while (v6 != v7);
  }
  v12 = *(WTF **)(a1 + 112);
  if (v12)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v12, v4);
  }
  v13 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v13)
  {
    v14 = *(unsigned int ***)(a1 + 88);
    v15 = &v14[v13];
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        v17 = v16 + 2;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v16 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      ++v14;
    }
    while (v14 != v15);
  }
  v20 = *(WTF **)(a1 + 88);
  if ((WTF *)(a1 + 104) != v20 && v20 != 0)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v20, v4);
  }
  v22 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v22 != -1)
    ((void (*)(char *, uint64_t))off_1E340FC98[v22])(&v24, a1 + 56);
  *(_DWORD *)(a1 + 80) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E340FCB0[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *result;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v5 = *(WTF::StringImpl ***)a2;
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  WTF::NativePromiseBase **v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::NativePromiseBase *v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v31;
  unsigned int v32;
  uint64_t v33;
  const char **v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;

  v34 = &v36;
  v35 = 1;
  v31 = (WTF *)&v33;
  v4 = *(WTF::NativePromiseBase ***)(a1 + 88);
  if (v4 == (WTF::NativePromiseBase **)(a1 + 104))
  {
    v5 = *(unsigned int *)(a1 + 100);
    memcpy(&v33, v4, 8 * v5);
    v4 = (WTF::NativePromiseBase **)&v33;
  }
  else
  {
    *(_QWORD *)(a1 + 88) = a1 + 104;
    v31 = (WTF *)v4;
    v5 = *(unsigned int *)(a1 + 100);
  }
  v32 = v5;
  *(_QWORD *)(a1 + 96) = 1;
  v6 = *(WTF **)(a1 + 112);
  v7 = *(_DWORD *)(a1 + 124);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    do
    {
      v9 = *v4++;
      WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(v9, a1, a2);
      v8 -= 8;
    }
    while (v8);
  }
  if (v7)
  {
    v10 = (unsigned int **)((char *)v6 + 40 * v7);
    v11 = a1 + 56;
    v12 = (unsigned int **)v6;
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        v14 = v13 + 2;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        v34 = 0;
        v35 = 0;
        v36 = "<chained promise>";
        v37 = 0;
        WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Storage>((uint64_t)v13, v11, (WTF::Logger::LogSiteIdentifier *)&v34);
        do
        {
          v16 = __ldaxr(v14);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v14));
        if (!v17)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
        WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead((uint64_t)v13);
        do
        {
          v18 = __ldaxr(v14);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v14));
        if (!v19)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
      }
      else
      {
        v34 = 0;
        v35 = 0;
        v36 = "<chained promise>";
        v37 = 0;
        WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Storage>(0, v11, (WTF::Logger::LogSiteIdentifier *)&v34);
      }
      v12 += 5;
    }
    while (v12 != v10);
    v20 = (uint64_t *)v6;
    do
    {
      if (*v20)
      {
        WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead(*v20);
        v21 = (unsigned int *)*v20;
        *v20 = 0;
        if (v21)
        {
          v22 = v21 + 2;
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            atomic_store(1u, v21 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
          }
        }
      }
      else
      {
        *v20 = 0;
      }
      v20 += 5;
    }
    while (v20 != (uint64_t *)v10);
  }
  if (v6)
    WTF::fastFree(v6, a2);
  v25 = v31;
  if (v32)
  {
    do
    {
      v26 = *(unsigned int **)v25;
      *(_QWORD *)v25 = 0;
      if (v26)
      {
        v27 = v26 + 2;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v26 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
        }
      }
      v25 = (WTF *)((char *)v25 + 8);
    }
    while (v25 != (WTF *)((char *)v31 + 8 * v32));
    v25 = v31;
  }
  if (&v33 != (uint64_t *)v25 && v25 != 0)
    WTF::fastFree(v25, a2);
}

void WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  BOOL v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  int v20;
  int v21;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD v32[2];
  int v33;
  char v34;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 129));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v12 = &off_1E340FCE0;
      v12[1] = v5;
      v12[2] = v5;
      v12[3] = a2;
      v32[0] = v12;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v32);
      v13 = v32[0];
      v32[0] = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      return;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v32[0] = v5;
    v14 = (_BYTE *)WTF::NativePromiseBase::logChannel(a1);
    if (*v14)
      v15 = v14[16] >= 4u;
    else
      v15 = 0;
    if (v15)
      WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v14, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)v32, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return;
  }
  v16 = *a3;
  v17 = __ldxr(*a3);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v16))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
  v18 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v20 = *(_DWORD *)(a2 + 80);
  v21 = __ldxr(v18);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v18))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v20 != 2)
  {
    if (__ldaxr(v18))
    {
      __clrex();
    }
    else if (!__stxr(1u, v18))
    {
      goto LABEL_50;
    }
    MEMORY[0x19AEA534C](a2 + 48);
LABEL_50:
    if (*(_DWORD *)(a2 + 80) != 1)
      goto LABEL_65;
    LOBYTE(v32[0]) = 0;
    v33 = -1;
    v25 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v25 != -1)
    {
      ((void (*)(char *, _QWORD *, uint64_t))off_1E340FCC0[v25])(&v34, v32, a2 + 56);
      v33 = v25;
    }
    v26 = __ldxr(v18);
    if (v26 == 1)
    {
      if (!__stlxr(0, v18))
      {
LABEL_58:
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v32);
        if (v33 != -1)
          ((void (*)(char *, _QWORD *))off_1E340FCB0[v33])(&v34, v32);
        goto LABEL_60;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
    goto LABEL_58;
  }
  if (__ldaxr(v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 80) != 2)
  {
LABEL_65:
    v28 = std::__throw_bad_variant_access[abi:sn180100]();
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSD_SF_EEEOSV_EEEDcSN_DpT0_(v28, v29, v30);
    return;
  }
  v31 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v24 = __ldxr(v18);
  if (v24 == 1)
  {
    if (!__stlxr(0, v18))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v31 + 16))(v32, v31);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v32);
  if (v33 != -1)
    ((void (*)(char *, _QWORD *))off_1E340FCB0[v33])(&v34, v32);
  v33 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
LABEL_60:
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, *a3))
  {
    return;
  }
  MEMORY[0x19AEA534C]();
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E340FCE0;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E340FCE0;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((WTF::NativePromiseBase *)(a1 + 8));
}

WTF::StringImpl *WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(WTF::NativePromiseBase *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::Logger::LogSiteIdentifier *v21;
  _QWORD v22[2];
  int v23;
  char v24;

  v1 = *(_QWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  if (*(_BYTE *)(*(_QWORD *)a1 + 56))
  {
    v22[0] = *(_QWORD *)a1;
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)v22, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
    return result;
  }
  v6 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
  v8 = *(_DWORD *)(v2 + 80);
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v6))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
  v10 = *((_QWORD *)a1 + 2);
  if (v8 == 2)
  {
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_24;
    }
    MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
    if (*(_DWORD *)(v10 + 80) == 2)
    {
      v15 = *(_QWORD *)(v10 + 56);
      *(_QWORD *)(v10 + 56) = 0;
      v16 = __ldxr(v11);
      if (v16 == 1)
      {
        if (!__stlxr(0, v11))
          goto LABEL_30;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(v22, v15);
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v22);
      if (v23 != -1)
        ((void (*)(char *, _QWORD *))off_1E340FCB0[v23])(&v24, v22);
      v23 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
LABEL_46:
    v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Storage>(v19, v20, v21);
  }
  v13 = (unsigned __int8 *)(v10 + 48);
  if (__ldaxr((unsigned __int8 *)(v10 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_35;
  }
  MEMORY[0x19AEA534C](v10 + 48);
LABEL_35:
  if (*(_DWORD *)(v10 + 80) != 1)
    goto LABEL_46;
  LOBYTE(v22[0]) = 0;
  v23 = -1;
  v17 = *(unsigned int *)(v10 + 72);
  if ((_DWORD)v17 != -1)
  {
    ((void (*)(char *, _QWORD *, uint64_t))off_1E340FCC0[v17])(&v24, v22, v10 + 56);
    v23 = v17;
  }
  v18 = __ldxr(v13);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, v13))
LABEL_42:
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v22);
  if (v23 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))off_1E340FCB0[v23])(&v24, v22);
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 80);
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E340FC98[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 80) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E340FCF8[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E340FC98[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[16];
  int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v9[0] = 0;
      v10 = -1;
      v7 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v7 != -1)
      {
        ((void (*)(char *, _BYTE *, uint64_t))off_1E340FCC0[v7])(&v11, v9, a3);
        v10 = v7;
      }
      result = std::__variant_detail::__impl<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>::__swap[abi:sn180100]((uint64_t)v9, a2);
      if (v10 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E340FCB0[v10])(&v11, v9);
      return result;
    }
    result = ((uint64_t (*)(_BYTE *, uint64_t))off_1E340FC98[v5])(v9, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 16) = -1;
  v8 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v8 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E340FCC0[v8])(v9, v4, a3);
    *(_DWORD *)(v4 + 16) = v8;
  }
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E340FC98[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__impl<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>::__swap[abi:sn180100](uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE v16[16];
  int v17;
  char v18;

  v2 = *(_DWORD *)(result + 16);
  v3 = *(unsigned int *)(a2 + 16);
  if (v2 != -1 || (_DWORD)v3 != -1)
  {
    v5 = a2;
    v6 = result;
    v7 = v2 == -1;
    if (v2 == -1)
      v8 = -1;
    else
      v8 = *(unsigned int *)(result + 16);
    if ((_DWORD)v3 != -1)
      v7 = v8 == v3;
    if (v7)
    {
      return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E340FD10[v8])(v16, result, a2);
    }
    else
    {
      if (v2 == 1 || v2 == -1)
      {
        if ((_DWORD)v3 == 1)
        {
          v2 = 1;
          v9 = result;
        }
        else
        {
          v9 = a2;
        }
        v10 = (_DWORD)v3 == 1 ? a2 : result;
        v11 = (_DWORD)v3 == -1;
        LODWORD(v3) = (_DWORD)v3 == -1 ? -1 : v2;
        if (!v11)
        {
          v6 = v9;
          v5 = v10;
        }
      }
      v16[0] = 0;
      v17 = -1;
      if ((_DWORD)v3 != -1)
      {
        result = ((uint64_t (*)(char *, _BYTE *, uint64_t))off_1E340FCC0[v3])(&v18, v16, v5);
        v17 = v3;
        v12 = *(unsigned int *)(v5 + 16);
        if ((_DWORD)v12 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E340FCB0[v12])(&v18, v5);
      }
      *(_DWORD *)(v5 + 16) = -1;
      v13 = *(unsigned int *)(v6 + 16);
      if ((_DWORD)v13 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E340FD20[v13])(&v18, v5, v6);
        *(_DWORD *)(v5 + 16) = v13;
        v14 = *(unsigned int *)(v6 + 16);
        if ((_DWORD)v14 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E340FCB0[v14])(&v18, v6);
      }
      *(_DWORD *)(v6 + 16) = -1;
      v15 = v17;
      if (v17 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, _BYTE *))off_1E340FD20[v17])(&v18, v6, v16);
        *(_DWORD *)(v6 + 16) = v15;
        if (v17 != -1)
          return ((uint64_t (*)(char *, _BYTE *))off_1E340FCB0[v17])(&v18, v16);
      }
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorINS7_6StringELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEN7WebCore18PlatformMediaErrorEEE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SE_EEESQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorINS7_6StringELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEN7WebCore18PlatformMediaErrorEEE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SE_EEESQ_EEEDcSH_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSD_SF_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSD_SF_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [23],unsigned long long,char [12]>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, WTF::String **a3)
{
  uint64_t result;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  char v12;
  int v13;
  char v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::String *v33;
  WTF::Logger *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  unsigned int v49;
  WTF::String **v51;
  WTF::Logger *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint8_t buf[4];
  _BYTE v60[12];
  int v61;
  WTF::StringImpl *v62;
  int v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66[3];

  v66[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v56, "All samples in track \"");
  v51 = a3;
  WTF::String::number(*a3);
  result = WTF::String::String((WTF::String *)&v54, "\" enqueued.");
  if (v57)
    v6 = *((_DWORD *)v57 + 1);
  else
    v6 = 0;
  if (v56)
  {
    v7 = *((_DWORD *)v56 + 1);
    if (v55)
      goto LABEL_5;
LABEL_111:
    v8 = 0;
    if (v54)
      goto LABEL_6;
LABEL_112:
    v9 = 0;
    goto LABEL_7;
  }
  v7 = 0;
  if (!v55)
    goto LABEL_111;
LABEL_5:
  v8 = *((_DWORD *)v55 + 1);
  if (!v54)
    goto LABEL_112;
LABEL_6:
  v9 = *((_DWORD *)v54 + 1);
LABEL_7:
  if ((v9 | v8) < 0
    || ((v10 = __OFADD__(v8, v9), v11 = v8 + v9, !v10) ? (v12 = 0) : (v12 = 1),
        v7 < 0
     || (v12 & 1) != 0
     || ((v10 = __OFADD__(v7, v11), v13 = v7 + v11, !v10) ? (v14 = 0) : (v14 = 1),
         v6 < 0 || (v14 & 1) != 0 || (result = (v6 + v13), __OFADD__(v6, v13)))))
  {
    v58 = 0;
    goto LABEL_116;
  }
  if (v57 && (*((_BYTE *)v57 + 16) & 4) == 0 || v56 && (*((_BYTE *)v56 + 16) & 4) == 0)
  {
    v15 = 0;
    goto LABEL_24;
  }
  if (v55)
  {
    v49 = *((_DWORD *)v55 + 4);
    v15 = (v49 >> 2) & 1;
    if (v54 && (v49 & 4) != 0)
      goto LABEL_96;
  }
  else
  {
    if (v54)
    {
LABEL_96:
      v15 = (*((unsigned __int8 *)v54 + 16) >> 2) & 1;
      goto LABEL_24;
    }
    v15 = 1;
  }
LABEL_24:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v15, (uint64_t)v57, v56, (uint64_t)v55, (uint64_t)v54, &v58);
  if (!v58)
  {
LABEL_116:
    __break(0xC471u);
    return result;
  }
  v17 = v54;
  v54 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v55;
  v55 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v56;
  v56 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v57;
  v57 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v16);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *(NSObject **)(a1 + 32);
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v22)
  {
    WTF::String::utf8();
    v24 = v52 ? (char *)v52 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v60 = v24;
    _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v22 = (uint64_t)v52;
    v52 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        v22 = WTF::fastFree((WTF *)v22, v23);
      else
        --*(_DWORD *)v22;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v26 = *v25;
      if ((v26 & 1) != 0)
        break;
      v27 = __ldaxr(v25);
      if (v27 == v26)
      {
        if (!__stxr(v26 | 1, v25))
        {
          v28 = WTF::Logger::observers((WTF::Logger *)v22);
          v29 = *(unsigned int *)(v28 + 12);
          if ((_DWORD)v29)
          {
            v30 = *(uint64_t **)v28;
            v31 = *(_QWORD *)v28 + 8 * v29;
            do
            {
              v32 = *v30;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v61 = 0;
              WTF::String::String((WTF::String *)&v62, "All samples in track \"");
              v33 = *v51;
              v63 = 0;
              WTF::String::number(v33);
              v65 = 0;
              WTF::String::String((WTF::String *)v66, "\" enqueued.");
              v52 = 0;
              v53 = 0;
              v34 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
              LODWORD(v53) = 4;
              v52 = v34;
              v35 = HIDWORD(v53);
              *((_DWORD *)v34 + 4 * HIDWORD(v53)) = *(_DWORD *)buf;
              v36 = *(_QWORD *)&v60[4];
              if (*(_QWORD *)&v60[4])
                **(_DWORD **)&v60[4] += 2;
              *((_QWORD *)v34 + 2 * v35 + 1) = v36;
              *((_DWORD *)v34 + 4 * (v35 + 1)) = v61;
              v37 = v62;
              if (v62)
                *(_DWORD *)v62 += 2;
              *((_QWORD *)v34 + 2 * (v35 + 1) + 1) = v37;
              *((_DWORD *)v34 + 4 * (v35 + 2)) = v63;
              v38 = v64;
              if (v64)
                *(_DWORD *)v64 += 2;
              *((_QWORD *)v34 + 2 * (v35 + 2) + 1) = v38;
              *((_DWORD *)v34 + 4 * (v35 + 3)) = v65;
              v39 = v66[0];
              if (v66[0])
                *(_DWORD *)v66[0] += 2;
              *((_QWORD *)v34 + 2 * (v35 + 3) + 1) = v39;
              HIDWORD(v53) = v35 + 4;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v32 + 16))(v32, a1, 4, &v52);
              v40 = v52;
              if (HIDWORD(v53))
              {
                v41 = 16 * HIDWORD(v53);
                v42 = (WTF::StringImpl **)((char *)v52 + 8);
                do
                {
                  v43 = *v42;
                  *v42 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                      WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v43 -= 2;
                  }
                  v42 += 2;
                  v41 -= 16;
                }
                while (v41);
                v40 = v52;
              }
              if (v40)
              {
                v52 = 0;
                LODWORD(v53) = 0;
                WTF::fastFree(v40, v23);
              }
              v44 = v66[0];
              v66[0] = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v44 -= 2;
              }
              v45 = v64;
              v64 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v45 -= 2;
              }
              v46 = v62;
              v62 = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v46 -= 2;
              }
              v47 = *(WTF::StringImpl **)&v60[4];
              *(_QWORD *)&v60[4] = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v47 -= 2;
              }
              ++v30;
            }
            while (v30 != (uint64_t *)v31);
          }
          v48 = __ldxr(v25);
          if (v48 == 1)
          {
            if (!__stlxr(0, v25))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v58;
  v58 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivate::findPreviousSyncSamplePresentationTime(WTF::MediaTime const&)::$_0,void,WebCore::TrackBuffer &>::call(uint64_t a1, uint64_t a2)
{
  WebCore::DecodeOrderSampleMap *v4;
  const WTF::MediaTime *v5;
  const WTF::MediaTime *v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;

  v4 = (WebCore::DecodeOrderSampleMap *)(a2 + 8);
  v5 = *(const WTF::MediaTime **)(a1 + 8);
  v6 = (const WTF::MediaTime *)WTF::MediaTime::positiveInfiniteTime((WTF::MediaTime *)a1);
  result = (uint64_t)WebCore::DecodeOrderSampleMap::findSyncSamplePriorToPresentationTime(v4, v5, v6);
  if (*(_QWORD **)(a2 + 8) != v8)
  {
    v9 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (_QWORD *)v8[2];
        v11 = *v10 == (_QWORD)v8;
        v8 = v10;
      }
      while (v11);
    }
    v12 = v10 + 6;
    result = WTF::MediaTime::compare((WTF::MediaTime *)(v10 + 6), *(const WTF::MediaTime **)(a1 + 8));
    if ((_DWORD)result == -1)
    {
      v13 = *(_QWORD **)(a1 + 16);
      v14 = *v12;
      *(_QWORD *)((char *)v13 + 5) = *(uint64_t *)((char *)v12 + 5);
      *v13 = v14;
    }
  }
  return result;
}

unsigned int *WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,1u>>>::completionPromise(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  WTF::NativePromiseBase *v7;
  _BYTE *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  WTF::NativePromiseBase *v21;
  unsigned int *result;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  WTF::NativePromiseBase *v26;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  v5 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v5 + 8) = 1;
  v6 = (unsigned int *)(v5 + 8);
  *(_QWORD *)v5 = off_1E340F638;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = "<completion promise>";
  *(_QWORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 48) = 0;
  v7 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v7 = 1;
  *((_DWORD *)v7 + 4) = 0;
  *(_QWORD *)(v5 + 56) = v7;
  *(_QWORD *)(v5 + 64) = v5 + 80;
  *(_QWORD *)(v5 + 72) = 3;
  *(_WORD *)(v5 + 120) = 0;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 112) = 0;
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8 && v8[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v8, v5);
  *v4 = v5;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = "<completion promise>";
  v4[4] = 0;
  do
    v10 = __ldaxr(v6);
  while (__stlxr(v10 + 1, v6));
  *a1 = v5;
  v11 = a2[1];
  v12 = (unsigned __int8 *)(v11 + 57);
  if (__ldaxr((unsigned __int8 *)(v11 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEA534C](v11 + 57);
LABEL_10:
  v14 = *(uint64_t **)(v11 + 64);
  *(_QWORD *)(v11 + 64) = v4;
  if (v14)
  {
    if (*v14)
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::assertIsDead(*v14);
      v15 = (unsigned int *)*v14;
      *v14 = 0;
      if (v15)
      {
        v16 = v15 + 2;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v15 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
        }
      }
    }
    else
    {
      *v14 = 0;
    }
    WTF::fastFree((WTF *)v14, v9);
  }
  v19 = __ldxr(v12);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, v12))
LABEL_23:
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 57));
  v20 = *a2;
  v21 = (WTF::NativePromiseBase *)a2[1];
  a2[1] = 0;
  v26 = v21;
  WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::maybeSettle(v20, &v26, (WTF::Logger::LogSiteIdentifier *)(a2 + 2));
  result = (unsigned int *)v26;
  v26 = 0;
  if (result)
  {
    v23 = result + 2;
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::chainTo<void,WebCore::PlatformMediaError,0u>(unsigned __int8 *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned __int8 *v9;
  int v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  NSObject *v26;
  WTF *v27;
  void *v28;
  char *v29;
  _BYTE *v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::Logger *v39;
  WTF::Logger *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF *v50;
  WTF::Logger::LogSiteIdentifier *v51;
  unsigned int *v52;
  uint64_t v53;
  WTF::StringImpl **v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::Logger *v64;
  int v65;
  WTF::StringImpl *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  _BYTE *v84;
  uint64_t v85;
  __int128 v86;
  const char *v87;
  uint64_t v88;
  WTF::Logger *v89[2];
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::NativePromiseBase *v103;
  uint8_t buf[16];
  __int128 v105;
  int v106;
  WTF::StringImpl *v107;
  int v108;
  WTF::StringImpl *v109;
  int v110;
  WTF::StringImpl *v111;
  int v112;
  WTF::StringImpl *v113;
  int v114;
  WTF::StringImpl *v115;
  int v116;
  _QWORD v117[3];

  v5 = (uint64_t)a1;
  v117[1] = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    v7 = v6 + 2;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = a1 + 48;
  if (__ldaxr(a1 + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_8;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEA534C](a1 + 48);
LABEL_8:
  v11 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 16);
  v12 = __ldxr(v9);
  if (v12 == 1)
  {
    if (!__stlxr(0, v9))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  a1 = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)(v5 + 48));
LABEL_13:
  v13 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (!*v13)
    goto LABEL_131;
  v14 = v13;
  if (v13[16] < 4u)
    goto LABEL_131;
  WTF::Logger::LogSiteIdentifier::toString(a3);
  WTF::String::String((WTF::String *)&v95, " invoking chainTo() [");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v94, v5);
  WTF::String::String((WTF::String *)&v93, " chainedPromise:");
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)v6, &v92);
  WTF::String::String((WTF::String *)&v91, " isSettled:");
  if (v11)
    v15 = 5;
  else
    v15 = 6;
  v84 = v14;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = *(WTF::StringImpl **)buf;
  WTF::String::String((WTF::String *)&v90, "]");
  v89[0] = v95;
  v103 = v94;
  *(_QWORD *)buf = v96;
  v101 = v92;
  v102 = v93;
  v99 = v16;
  v100 = v91;
  v98 = v90;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, (uint64_t *)v89, (uint64_t *)&v103, (uint64_t *)&v102, (uint64_t *)&v101, (uint64_t *)&v100, (uint64_t *)&v99, (uint64_t *)&v98, &v97);
  if (!v97)
  {
    __break(0xC471u);
    return result;
  }
  v19 = v90;
  v90 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, v18);
      if (!v16)
        goto LABEL_25;
      goto LABEL_23;
    }
    *(_DWORD *)v19 -= 2;
  }
  if (!v16)
    goto LABEL_25;
LABEL_23:
  if (*(_DWORD *)v16 == 2)
    WTF::StringImpl::destroy(v16, v18);
  else
    *(_DWORD *)v16 -= 2;
LABEL_25:
  v20 = v91;
  v91 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v92;
  v92 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v93;
  v93 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v18);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v94;
  v94 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v18);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v95;
  v95 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v18);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v96;
  v96 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v18);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = *((_QWORD *)v84 + 4);
  v27 = (WTF *)os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v27)
  {
    WTF::String::utf8();
    v29 = v89[0] ? (char *)v89[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v29;
    _os_log_impl(&dword_1940B8000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v27 = v89[0];
    v89[0] = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 1)
        v27 = (WTF *)WTF::fastFree(v27, v28);
      else
        --*(_DWORD *)v27;
    }
  }
  v30 = v84;
  if (*v84 && v84[16] >= 4u)
  {
    v31 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v32 = *v31;
      if ((v32 & 1) != 0)
        break;
      v33 = __ldaxr(v31);
      if (v33 == v32)
      {
        if (!__stxr(v32 | 1, v31))
        {
          v34 = WTF::Logger::observers(v27);
          v35 = *(unsigned int *)(v34 + 12);
          if ((_DWORD)v35)
          {
            v36 = *(uint64_t **)v34;
            v85 = *(_QWORD *)v34 + 8 * v35;
            v37 = v15 - 1;
            do
            {
              v38 = *v36;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(a3);
              LODWORD(v105) = 0;
              WTF::String::String((WTF::String *)((char *)&v105 + 8), " invoking chainTo() [");
              v106 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v107, v5);
              v108 = 0;
              WTF::String::String((WTF::String *)&v109, " chainedPromise:");
              v110 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)v6, &v111);
              v112 = 0;
              WTF::String::String((WTF::String *)&v113, " isSettled:");
              v114 = 0;
              if (v37)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v39 = v89[0];
              }
              else
              {
                v64 = (WTF::Logger *)MEMORY[0x1E0CBEF70];
                *MEMORY[0x1E0CBEF70] += 2;
                v39 = v64;
              }
              v115 = v39;
              v116 = 0;
              WTF::String::String((WTF::String *)v117, "]");
              v89[0] = 0;
              v89[1] = 0;
              v40 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v89[1]) = 8;
              v89[0] = v40;
              v41 = HIDWORD(v89[1]);
              *((_DWORD *)v40 + 4 * HIDWORD(v89[1])) = *(_DWORD *)buf;
              v42 = *(_QWORD *)&buf[8];
              if (*(_QWORD *)&buf[8])
                **(_DWORD **)&buf[8] += 2;
              *((_QWORD *)v40 + 2 * v41 + 1) = v42;
              *((_DWORD *)v40 + 4 * (v41 + 1)) = v105;
              v43 = *((_QWORD *)&v105 + 1);
              if (*((_QWORD *)&v105 + 1))
                **((_DWORD **)&v105 + 1) += 2;
              *((_QWORD *)v40 + 2 * (v41 + 1) + 1) = v43;
              *((_DWORD *)v40 + 4 * (v41 + 2)) = v106;
              v44 = v107;
              if (v107)
                *(_DWORD *)v107 += 2;
              *((_QWORD *)v40 + 2 * (v41 + 2) + 1) = v44;
              *((_DWORD *)v40 + 4 * (v41 + 3)) = v108;
              v45 = v109;
              if (v109)
                *(_DWORD *)v109 += 2;
              *((_QWORD *)v40 + 2 * (v41 + 3) + 1) = v45;
              *((_DWORD *)v40 + 4 * (v41 + 4)) = v110;
              v46 = v111;
              if (v111)
                *(_DWORD *)v111 += 2;
              *((_QWORD *)v40 + 2 * (v41 + 4) + 1) = v46;
              *((_DWORD *)v40 + 4 * (v41 + 5)) = v112;
              v47 = v113;
              if (v113)
                *(_DWORD *)v113 += 2;
              *((_QWORD *)v40 + 2 * (v41 + 5) + 1) = v47;
              *((_DWORD *)v40 + 4 * (v41 + 6)) = v114;
              v48 = v115;
              if (v115)
                *(_DWORD *)v115 += 2;
              *((_QWORD *)v40 + 2 * (v41 + 6) + 1) = v48;
              *((_DWORD *)v40 + 4 * (v41 + 7)) = v116;
              v49 = v117[0];
              if (v117[0])
                *(_DWORD *)v117[0] += 2;
              *((_QWORD *)v40 + 2 * (v41 + 7) + 1) = v49;
              HIDWORD(v89[1]) = v41 + 8;
              (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v38 + 16))(v38, v30, 4, v89);
              v50 = v89[0];
              if (HIDWORD(v89[1]))
              {
                v51 = a3;
                v52 = v6;
                v53 = 16 * HIDWORD(v89[1]);
                v54 = (WTF::StringImpl **)((char *)v89[0] + 8);
                do
                {
                  v55 = *v54;
                  *v54 = 0;
                  if (v55)
                  {
                    if (*(_DWORD *)v55 == 2)
                      WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v28);
                    else
                      *(_DWORD *)v55 -= 2;
                  }
                  v54 += 2;
                  v53 -= 16;
                }
                while (v53);
                v50 = v89[0];
                v6 = v52;
                a3 = v51;
                v30 = v84;
              }
              if (v50)
              {
                v89[0] = 0;
                LODWORD(v89[1]) = 0;
                WTF::fastFree(v50, v28);
              }
              v56 = (WTF::StringImpl *)v117[0];
              v117[0] = 0;
              if (v56)
              {
                if (*(_DWORD *)v56 == 2)
                  WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v56 -= 2;
              }
              v57 = v115;
              v115 = 0;
              if (v57)
              {
                if (*(_DWORD *)v57 == 2)
                  WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v57 -= 2;
              }
              v58 = v113;
              v113 = 0;
              if (v58)
              {
                if (*(_DWORD *)v58 == 2)
                  WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v58 -= 2;
              }
              v59 = v111;
              v111 = 0;
              if (v59)
              {
                if (*(_DWORD *)v59 == 2)
                  WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v59 -= 2;
              }
              v60 = v109;
              v109 = 0;
              if (v60)
              {
                if (*(_DWORD *)v60 == 2)
                  WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v60 -= 2;
              }
              v61 = v107;
              v107 = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 2)
                  WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v61 -= 2;
              }
              v62 = (WTF::StringImpl *)*((_QWORD *)&v105 + 1);
              *((_QWORD *)&v105 + 1) = 0;
              if (v62)
              {
                if (*(_DWORD *)v62 == 2)
                  WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v62 -= 2;
              }
              v63 = *(WTF::StringImpl **)&buf[8];
              *(_QWORD *)&buf[8] = 0;
              if (v63)
              {
                if (*(_DWORD *)v63 == 2)
                  WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v63 -= 2;
              }
              ++v36;
            }
            while (v36 != (uint64_t *)v85);
          }
          v65 = __ldxr(v31);
          if (v65 == 1)
          {
            if (!__stlxr(0, v31))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v66 = v97;
  v97 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v28);
      if (v6)
        goto LABEL_132;
      goto LABEL_136;
    }
    *(_DWORD *)v66 -= 2;
  }
LABEL_131:
  if (v6)
  {
LABEL_132:
    v67 = v6 + 2;
    do
    {
      v68 = __ldaxr(v67);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v67));
    if (!v69)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    }
  }
LABEL_136:
  v70 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  v71 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)buf = *(_OWORD *)(a2 + 8);
  v105 = v71;
  v89[0] = 0;
  v89[1] = 0;
  v72 = WTF::fastMalloc((WTF *)0x50);
  v73 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v73 = off_1E340FD68;
  *(_QWORD *)(v73 + 8) = v70;
  v74 = v105;
  *(_OWORD *)(v73 + 16) = *(_OWORD *)buf;
  *(_OWORD *)(v73 + 32) = v74;
  *(_DWORD *)(v72 + 8) = 1;
  *(_QWORD *)(v72 + 16) = 0;
  *(_QWORD *)(v72 + 24) = 0;
  *(_QWORD *)(v72 + 32) = 0;
  *(_QWORD *)(v72 + 40) = "chainTo";
  *(_QWORD *)(v72 + 48) = 0;
  *(_WORD *)(v72 + 56) = 0;
  *(_QWORD *)v72 = &off_1E340FD90;
  *(_QWORD *)(v72 + 64) = 0;
  *(_QWORD *)(v72 + 72) = v73;
  v75 = (unsigned int *)(v5 + 8);
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 + 1, v75));
  v86 = *(_OWORD *)v89;
  v87 = "chainTo";
  v88 = 0;
  v103 = (WTF::NativePromiseBase *)v72;
  WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::maybeSettle(v5, &v103, (WTF::Logger::LogSiteIdentifier *)&v86);
  v77 = (unsigned int *)v103;
  v103 = 0;
  if (v77)
  {
    v78 = v77 + 2;
    do
    {
      v79 = __ldaxr(v78);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, v78));
    if (!v80)
    {
      atomic_store(1u, v77 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v77 + 8))(v77);
    }
  }
  result = v5;
  if (v5)
  {
    v81 = (unsigned int *)(v5 + 8);
    do
    {
      v82 = __ldaxr(v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, v81));
    if (!v83)
    {
      atomic_store(1u, (unsigned int *)(v5 + 8));
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::chainTo<void,WebCore::PlatformMediaError,0u>(WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1},void,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = off_1E340FD68;
  v2 = a1[1];
  if (v2)
  {
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(v2);
    v3 = (unsigned int *)a1[1];
    a1[1] = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    a1[1] = 0;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::chainTo<void,WebCore::PlatformMediaError,0u>(WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1},void,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> const&>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)a1 = off_1E340FD68;
  v3 = *((_QWORD *)a1 + 1);
  if (v3)
  {
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(v3);
    v4 = (unsigned int *)*((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      }
    }
  }
  else
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  return WTF::fastFree(a1, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<void WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::chainTo<void,WebCore::PlatformMediaError,0u>(WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1},void,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> const&>::call(WTF::NativePromiseBase *a1, char *a2)
{
  WTF::NativePromiseBase *v2;
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *result;
  BOOL v14;
  uint64_t v15;
  WTF::NativePromiseBase *v16;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  _BYTE *v22;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  WTF::Lock *v30;
  char v31;
  char v32;

  v2 = a1;
  if (a2[1])
  {
    v26 = 0;
    v27 = 0;
    v28 = "operator()";
    v29 = 0;
    v3 = *((_QWORD *)a1 + 1);
    if (!v3)
    {
      v10 = 0;
LABEL_17:
      result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
      if (*result)
        v14 = result[16] >= 4u;
      else
        v14 = 0;
      if (!v14)
        return result;
      v15 = v10;
      return (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)result, 4u, (WTF::Logger::LogSiteIdentifier *)&v26, " ignored already resolved or rejected ", v15);
    }
    v5 = (unsigned __int8 *)(v3 + 48);
    if (__ldaxr((unsigned __int8 *)(v3 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_11;
    }
    a1 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v3 + 48);
LABEL_11:
    v11 = *(_DWORD *)(v3 + 64);
    v12 = __ldxr(v5);
    if (v12 == 1)
    {
      if (!__stlxr(0, v5))
      {
LABEL_16:
        v10 = *((_QWORD *)v2 + 1);
        if (v11)
          goto LABEL_17;
        v16 = (WTF::NativePromiseBase *)(v10 + 48);
        v30 = (WTF::Lock *)(v10 + 48);
        v31 = 1;
        if (__ldaxr((unsigned __int8 *)(v10 + 48)))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v16))
        {
LABEL_44:
          v22 = (_BYTE *)WTF::NativePromiseBase::logChannel(v16);
          if (*v22 && v22[16] >= 4u)
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v22, 4u, (WTF::Logger::LogSiteIdentifier *)&v26, " rejecting ", v10);
          v23 = *a2;
          v24 = *(unsigned int *)(v10 + 64);
          if ((_DWORD)v24 != -1)
            ((void (*)(char *, uint64_t))off_1E340F820[v24])(&v32, v10 + 56);
          *(_BYTE *)(v10 + 56) = v23;
          *(_BYTE *)(v10 + 57) = 1;
          *(_DWORD *)(v10 + 64) = 1;
          result = (unsigned __int8 *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::dispatchAll(v10, (unsigned __int8 **)&v30);
          if (v31)
          {
            result = (unsigned __int8 *)v30;
            v25 = __ldxr((unsigned __int8 *)v30);
            if (v25 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v30))
                return result;
            }
            else
            {
              __clrex();
            }
            return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
          }
          return result;
        }
        v16 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C]();
        goto LABEL_44;
      }
    }
    else
    {
      __clrex();
    }
    a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
    goto LABEL_16;
  }
  v26 = 0;
  v27 = 0;
  v28 = "operator()";
  v29 = 0;
  v7 = *((_QWORD *)a1 + 1);
  if (!v7)
  {
    v18 = 0;
    goto LABEL_34;
  }
  v8 = (unsigned __int8 *)(v7 + 48);
  if (__ldaxr((unsigned __int8 *)(v7 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_28;
  }
  a1 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v7 + 48);
LABEL_28:
  v19 = *(_DWORD *)(v7 + 64);
  v20 = __ldxr(v8);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_32;
  }
  if (__stlxr(0, v8))
LABEL_32:
    a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v18 = *((_QWORD *)v2 + 1);
  if (!v19)
    return (unsigned __int8 *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::resolve<std::enable_if<true,void>>(*((_QWORD *)v2 + 1), (WTF::Logger::LogSiteIdentifier *)&v26);
LABEL_34:
  result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
  if (*result)
    v21 = result[16] >= 4u;
  else
    v21 = 0;
  if (v21)
  {
    v15 = v18;
    return (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)result, 4u, (WTF::Logger::LogSiteIdentifier *)&v26, " ignored already resolved or rejected ", v15);
  }
  return result;
}

_QWORD *WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallback<false,void>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E340FD90;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E340F710;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallback<false,void>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E340FD90;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E340F710;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  const char *v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  int v13;
  WTF::NativePromiseBase *v14;
  void *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v19;
  int v20;
  int v21;
  _BYTE *v22;
  uint64_t result;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD v28[4];

  v6 = *(unsigned __int8 *)(a3 + 1);
  v28[0] = a1;
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    if (v6)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,1u>,char [11],void const*,char [2]>((uint64_t)v7, v9, (WTF::Logger::LogSiteIdentifier *)(a1 + 24), a2);
  }
  v10 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_14:
  v12 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  v14 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (!v12)
    goto LABEL_36;
  v28[0] = 0;
  v28[1] = 0;
  v28[2] = "<chained completion promise>";
  v28[3] = 0;
  v16 = *v12;
  if (!*v12)
  {
    v19 = 0;
    goto LABEL_32;
  }
  v17 = (unsigned __int8 *)(v16 + 48);
  if (__ldaxr((unsigned __int8 *)(v16 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_26;
  }
  v14 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v16 + 48);
LABEL_26:
  v20 = *(_DWORD *)(v16 + 64);
  v21 = __ldxr(v17);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, v17))
LABEL_30:
    v14 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v17);
  v19 = *v12;
  if (!v20)
  {
    WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(*v12, (WTF::Logger::LogSiteIdentifier *)v28);
    goto LABEL_36;
  }
LABEL_32:
  v22 = (_BYTE *)WTF::NativePromiseBase::logChannel(v14);
  if (*v22 && v22[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)v22, 4u, (WTF::Logger::LogSiteIdentifier *)v28, " ignored already resolved or rejected ", v19);
LABEL_36:
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v12)
  {
    if (*v12)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v12);
      v24 = (unsigned int *)*v12;
      *v12 = 0;
      if (v24)
      {
        v25 = v24 + 2;
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v24 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
        }
      }
    }
    else
    {
      *v12 = 0;
    }
    return WTF::fastFree((WTF *)v12, v15);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivate::removeCodedFramesInternal(WTF::MediaTime const&,WTF::MediaTime const&,WTF::MediaTime const&)::$_0,void,WebCore::TrackBuffer &>::call(uint64_t a1, WebCore::TrackBuffer *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  result = WebCore::TrackBuffer::removeCodedFrames(this, *(const WTF::MediaTime **)(a1 + 16), *(const WTF::MediaTime **)(a1 + 24), *(const WTF::MediaTime **)(a1 + 32));
  *(_QWORD *)(v2 + 40) -= result;
  return result;
}

uint64_t WTF::NativePromise<void,void,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<void,void,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::Logger *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::Logger *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  void *v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v46;
  unsigned int **v47;
  unsigned int **v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  WTF *v53;
  uint64_t v55;
  WTF::Logger *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint8_t buf[4];
  _BYTE v62[12];
  int v63;
  WTF::StringImpl *v64[3];

  v64[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v59, "destroying ");
    result = WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a1, &v58);
    if (v59)
    {
      v6 = *((_DWORD *)v59 + 1);
      if (v58)
      {
LABEL_8:
        v7 = *((_DWORD *)v58 + 1);
LABEL_9:
        if ((v7 | v6) < 0 || (result = (v6 + v7), __OFADD__(v6, v7)))
        {
          v60 = 0;
          goto LABEL_108;
        }
        if (v59)
        {
          v8 = *((_DWORD *)v59 + 4);
          v9 = (v8 >> 2) & 1;
          if (v58 && (v8 & 4) != 0)
            goto LABEL_14;
        }
        else
        {
          if (v58)
          {
LABEL_14:
            v9 = (*((unsigned __int8 *)v58 + 16) >> 2) & 1;
            goto LABEL_15;
          }
          v9 = 1;
        }
LABEL_15:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v59, (uint64_t)v58, &v60);
        if (v60)
        {
          v11 = v58;
          v58 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = v59;
          v59 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v10);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = *((_QWORD *)v4 + 4);
          v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v14)
          {
            WTF::String::utf8();
            v16 = v56 ? (char *)v56 + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)v62 = v16;
            _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v14 = (uint64_t)v56;
            v56 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 1)
                v14 = WTF::fastFree((WTF *)v14, v15);
              else
                --*(_DWORD *)v14;
            }
          }
          if (*v4 && v4[16] >= 4u)
          {
            v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v18 = *v17;
              if ((v18 & 1) != 0)
                break;
              v19 = __ldaxr(v17);
              if (v19 == v18)
              {
                if (!__stxr(v18 | 1, v17))
                {
                  v20 = WTF::Logger::observers((WTF::Logger *)v14);
                  v21 = *(unsigned int *)(v20 + 12);
                  if ((_DWORD)v21)
                  {
                    v22 = *(uint64_t **)v20;
                    v23 = *(_QWORD *)v20 + 8 * v21;
                    do
                    {
                      v24 = *v22;
                      *(_DWORD *)buf = 0;
                      WTF::String::String((WTF::String *)&v62[4], "destroying ");
                      v63 = 0;
                      WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a1, v64);
                      v56 = 0;
                      v57 = 0;
                      v25 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v57) = 2;
                      v56 = v25;
                      v26 = HIDWORD(v57);
                      *((_DWORD *)v25 + 4 * HIDWORD(v57)) = *(_DWORD *)buf;
                      v27 = *(_QWORD *)&v62[4];
                      if (*(_QWORD *)&v62[4])
                        **(_DWORD **)&v62[4] += 2;
                      *((_QWORD *)v25 + 2 * v26 + 1) = v27;
                      *((_DWORD *)v25 + 4 * (v26 + 1)) = v63;
                      v28 = v64[0];
                      if (v64[0])
                        *(_DWORD *)v64[0] += 2;
                      *((_QWORD *)v25 + 2 * (v26 + 1) + 1) = v28;
                      HIDWORD(v57) = v26 + 2;
                      (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v24 + 16))(v24, v4, 4, &v56);
                      v29 = v56;
                      if (HIDWORD(v57))
                      {
                        v30 = 16 * HIDWORD(v57);
                        v31 = (WTF::StringImpl **)((char *)v56 + 8);
                        do
                        {
                          v32 = *v31;
                          *v31 = 0;
                          if (v32)
                          {
                            if (*(_DWORD *)v32 == 2)
                              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v15);
                            else
                              *(_DWORD *)v32 -= 2;
                          }
                          v31 += 2;
                          v30 -= 16;
                        }
                        while (v30);
                        v29 = v56;
                      }
                      if (v29)
                      {
                        v56 = 0;
                        LODWORD(v57) = 0;
                        WTF::fastFree(v29, v15);
                      }
                      v33 = v64[0];
                      v64[0] = 0;
                      if (v33)
                      {
                        if (*(_DWORD *)v33 == 2)
                          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v33 -= 2;
                      }
                      v34 = *(WTF::StringImpl **)&v62[4];
                      *(_QWORD *)&v62[4] = 0;
                      if (v34)
                      {
                        if (*(_DWORD *)v34 == 2)
                          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v34 -= 2;
                      }
                      ++v22;
                    }
                    while (v22 != (uint64_t *)v23);
                  }
                  v35 = __ldxr(v17);
                  if (v35 == 1)
                  {
                    if (!__stlxr(0, v17))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v36 = v60;
          v60 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)v36 -= 2;
          }
          goto LABEL_71;
        }
LABEL_108:
        __break(0xC471u);
        return result;
      }
    }
    else
    {
      v6 = 0;
      if (v58)
        goto LABEL_8;
    }
    v7 = 0;
    goto LABEL_9;
  }
LABEL_71:
  WTF::NativePromise<void,void,0u>::assertIsDead(a1);
  v38 = *(_DWORD *)(a1 + 108);
  if (v38)
  {
    v39 = *(uint64_t **)(a1 + 96);
    v40 = &v39[5 * v38];
    do
    {
      if (*v39)
      {
        WTF::NativePromise<void,void,0u>::assertIsDead(*v39);
        v41 = (unsigned int *)*v39;
        *v39 = 0;
        if (v41)
        {
          v42 = v41 + 2;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            atomic_store(1u, v41 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 16))(v41);
          }
        }
      }
      else
      {
        *v39 = 0;
      }
      v39 += 5;
    }
    while (v39 != v40);
  }
  v45 = *(WTF **)(a1 + 96);
  if (v45)
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree(v45, v37);
  }
  v46 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v46)
  {
    v47 = *(unsigned int ***)(a1 + 72);
    v48 = &v47[v46];
    do
    {
      v49 = *v47;
      *v47 = 0;
      if (v49)
      {
        v50 = v49 + 2;
        do
        {
          v51 = __ldaxr(v50);
          v52 = v51 - 1;
        }
        while (__stlxr(v52, v50));
        if (!v52)
        {
          atomic_store(1u, v49 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
        }
      }
      ++v47;
    }
    while (v47 != v48);
  }
  v53 = *(WTF **)(a1 + 72);
  if ((WTF *)(a1 + 88) != v53 && v53 != 0)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v53, v37);
  }
  v55 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v55 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E340F6B8[v55])(buf, a1 + 56);
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivate::totalTrackBufferSizeInBytes(void)::$_0,void,WebCore::TrackBuffer const&>::call(uint64_t result, uint64_t a2)
{
  **(_QWORD **)(result + 8) += *(_QWORD *)(a2 + 56);
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivate::setAllTrackBuffersNeedRandomAccess(void)::$_0,void,WebCore::TrackBuffer &>::call(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 308) = 1;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MediaSample>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, WebCore::MediaSample *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint8_t buf[4];
  _BYTE v45[12];
  int v46;
  WTF::StringImpl *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = (uint64_t)WebCore::MediaSample::toJSONString(a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0 || (result = (v8 + v9), __OFADD__(v8, v9)))
  {
    v43 = 0;
    goto LABEL_76;
  }
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &v43);
  if (!v43)
  {
LABEL_76:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v45 = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v46 = 1;
              WebCore::MediaSample::toJSONString(a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = *(_DWORD *)buf;
              v29 = *(_QWORD *)&v45[4];
              if (*(_QWORD *)&v45[4])
                **(_DWORD **)&v45[4] += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v46;
              v30 = v47;
              if (v47)
                *(_DWORD *)v47 += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v47;
              v47 = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = *(WTF::StringImpl **)&v45[4];
              *(_QWORD *)&v45[4] = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivate::processMediaSample(WebCore::SourceBufferPrivateClient &,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>> &&)::$_0,void,WebCore::TrackBuffer &>::call(WTF::MediaTime *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  *(_DWORD *)(a2 + 304) = 0;
  result = (_QWORD *)WTF::MediaTime::invalidTime(a1);
  v4 = *(_QWORD *)((char *)result + 5);
  *(_QWORD *)(a2 + 272) = *result;
  *(_QWORD *)(a2 + 277) = v4;
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivate::processMediaSample(WebCore::SourceBufferPrivateClient &,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>> &&)::$_1,void,WebCore::TrackBuffer &>::call(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 308) = 1;
}

_QWORD *std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::__find_equal<std::pair<WTF::MediaTime,WTF::MediaTime>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, WTF::MediaTime *a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  WTF::MediaTime *v15;
  const WTF::MediaTime *v16;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || WTF::MediaTime::compare(a5, (const WTF::MediaTime *)(a2 + 4)) == -1)
    goto LABEL_11;
  if (WTF::MediaTime::compare((WTF::MediaTime *)(a2 + 4), a5) == -1)
    goto LABEL_6;
  if (WTF::MediaTime::compare((WTF::MediaTime *)((char *)a5 + 16), (const WTF::MediaTime *)(a2 + 6)) == -1)
  {
LABEL_11:
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
    }
    else
    {
      v11 = (_QWORD *)*a2;
      if (*a2)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)v11[1];
        }
        while (v11);
      }
      else
      {
        v13 = a2;
        do
        {
          v12 = (_QWORD *)v13[2];
          v14 = *v12 == (_QWORD)v13;
          v13 = v12;
        }
        while (v14);
      }
      if (WTF::MediaTime::compare((WTF::MediaTime *)(v12 + 4), a5) != -1)
      {
        if (WTF::MediaTime::compare(a5, (const WTF::MediaTime *)(v12 + 4)) == -1)
          return std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::__find_equal<std::pair<WTF::MediaTime,WTF::MediaTime>>((uint64_t)a1, a3, a5);
        if (WTF::MediaTime::compare((WTF::MediaTime *)(v12 + 6), (WTF::MediaTime *)((char *)a5 + 16)) != -1)
        {
          v15 = (WTF::MediaTime *)((char *)a5 + 16);
          v16 = (const WTF::MediaTime *)(v12 + 6);
LABEL_22:
          WTF::MediaTime::compare(v15, v16);
          return std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::__find_equal<std::pair<WTF::MediaTime,WTF::MediaTime>>((uint64_t)a1, a3, a5);
        }
      }
    }
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  WTF::MediaTime::compare((WTF::MediaTime *)(a2 + 6), (WTF::MediaTime *)((char *)a5 + 16));
LABEL_6:
  if (WTF::MediaTime::compare((WTF::MediaTime *)(a2 + 4), a5) == -1)
    goto LABEL_27;
  if (WTF::MediaTime::compare(a5, (const WTF::MediaTime *)(a2 + 4)) != -1)
  {
    if (WTF::MediaTime::compare((WTF::MediaTime *)(a2 + 6), (WTF::MediaTime *)((char *)a5 + 16)) != -1)
    {
      WTF::MediaTime::compare((WTF::MediaTime *)((char *)a5 + 16), (const WTF::MediaTime *)(a2 + 6));
      goto LABEL_10;
    }
LABEL_27:
    a4 = a2 + 1;
    v18 = (_QWORD *)a2[1];
    if (v18)
    {
      do
      {
        v19 = v18;
        v18 = (_QWORD *)*v18;
      }
      while (v18);
    }
    else
    {
      v20 = a2;
      do
      {
        v19 = (_QWORD *)v20[2];
        v14 = *v19 == (_QWORD)v20;
        v20 = v19;
      }
      while (!v14);
    }
    if (v19 == v9 || WTF::MediaTime::compare(a5, (const WTF::MediaTime *)(v19 + 4)) == -1)
      goto LABEL_44;
    if (WTF::MediaTime::compare((WTF::MediaTime *)(v19 + 4), a5) == -1)
      return std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::__find_equal<std::pair<WTF::MediaTime,WTF::MediaTime>>((uint64_t)a1, a3, a5);
    if (WTF::MediaTime::compare((WTF::MediaTime *)((char *)a5 + 16), (const WTF::MediaTime *)(v19 + 6)) == -1)
    {
LABEL_44:
      if (*a4)
      {
        *a3 = v19;
        return v19;
      }
      else
      {
        *a3 = a2;
      }
      return a4;
    }
    v15 = (WTF::MediaTime *)(v19 + 6);
    v16 = (WTF::MediaTime *)((char *)a5 + 16);
    goto LABEL_22;
  }
LABEL_10:
  *a3 = a2;
  *a4 = a2;
  return a4;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivate::minimumBufferedTime(void)::$_0,void,WebCore::TrackBuffer const&>::call(WTF::MediaTime *a1, uint64_t a2)
{
  const WTF::MediaTime *v3;
  __int128 *v4;
  uint64_t result;
  const WTF::MediaTime *v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;

  v3 = (const WTF::MediaTime *)*((_QWORD *)a1 + 1);
  if (*(_DWORD *)(a2 + 108))
    v4 = *(__int128 **)(a2 + 96);
  else
    v4 = (__int128 *)WTF::MediaTime::invalidTime(a1);
  v9 = *v4;
  result = WTF::MediaTime::compare((WTF::MediaTime *)&v9, v3);
  if ((_DWORD)result == -1)
    v6 = (const WTF::MediaTime *)&v9;
  else
    v6 = v3;
  v7 = (_QWORD *)*((_QWORD *)a1 + 1);
  v8 = *(_QWORD *)((char *)v6 + 5);
  *v7 = *(_QWORD *)v6;
  *(_QWORD *)((char *)v7 + 5) = v8;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivate::maximumBufferedTime(void)::$_0,void,WebCore::TrackBuffer const&>::call(WTF::MediaTime *a1, uint64_t a2)
{
  WTF::MediaTime *v3;
  int v4;
  __int128 *v5;
  uint64_t result;
  WTF::MediaTime *v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;

  v3 = (WTF::MediaTime *)*((_QWORD *)a1 + 1);
  v4 = *(_DWORD *)(a2 + 108);
  if (v4)
    v5 = (__int128 *)(*(_QWORD *)(a2 + 96) + 32 * (v4 - 1) + 16);
  else
    v5 = (__int128 *)WTF::MediaTime::invalidTime(a1);
  v10 = *v5;
  result = WTF::MediaTime::compare(v3, (const WTF::MediaTime *)&v10);
  if ((_DWORD)result == -1)
    v7 = (WTF::MediaTime *)&v10;
  else
    v7 = v3;
  v8 = (_QWORD *)*((_QWORD *)a1 + 1);
  v9 = *(_QWORD *)((char *)v7 + 5);
  *v8 = *(_QWORD *)v7;
  *(_QWORD *)((char *)v8 + 5) = v9;
  return result;
}

WTF *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivate::evictFrames(unsigned long long,WTF::MediaTime const&)::$_0,void,WebCore::TrackBuffer &>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::PlatformTimeRanges::intersectWith(*(WTF **)(a1 + 8), (__int128 **)(a2 + 96));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SourceImage::imageIdentifier(void)::$_0,WebCore::SourceImage::imageIdentifier(void)::$_1,WebCore::SourceImage::imageIdentifier(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::ImageBuffer,WebCore::NativeImage<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(*(_QWORD *)a2 + 40))
    return *(_QWORD *)(*(_QWORD *)a2 + 32);
  __break(1u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SourceImage::imageIdentifier(void)::$_0,WebCore::SourceImage::imageIdentifier(void)::$_1,WebCore::SourceImage::imageIdentifier(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::ImageBuffer,WebCore::NativeImage<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 120);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SourceImage::imageIdentifier(void)::$_0,WebCore::SourceImage::imageIdentifier(void)::$_1,WebCore::SourceImage::imageIdentifier(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::ImageBuffer,WebCore::NativeImage<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SourceImage::size(void)::$_0,WebCore::SourceImage::size(void)::$_1,WebCore::SourceImage::size(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::ImageBuffer,WebCore::NativeImage<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 48) + 24))(*(_QWORD *)(*(_QWORD *)a2 + 48));
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SourceImage::size(void)::$_0,WebCore::SourceImage::size(void)::$_1,WebCore::SourceImage::size(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::ImageBuffer,WebCore::NativeImage<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(uint64_t a1, uint64_t a2)
{
  return WebCore::ImageBuffer::calculateBackendSize(*(float *)(*(_QWORD *)a2 + 16), *(float *)(*(_QWORD *)a2 + 20), *(float *)(*(_QWORD *)a2 + 24));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SourceImage::size(void)::$_0,WebCore::SourceImage::size(void)::$_1,WebCore::SourceImage::size(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::ImageBuffer,WebCore::NativeImage<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>()
{
  return 0;
}

uint64_t WebCore::SystemFallbackFontCache::forCurrentThread(WebCore::SystemFallbackFontCache *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v1 || (v2 = *(_QWORD *)(v1 + 96)) == 0)
    v2 = WebCore::threadGlobalDataSlow(this);
  v3 = *(_QWORD *)(v2 + 80);
  if (!v3)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v2);
    v3 = *(_QWORD *)(v2 + 80);
  }
  return v3 + 88;
}

WTF::StringImpl *WebCore::SystemFallbackFontCache::systemFallbackFontForCharacterCluster@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, char a7@<W6>, _QWORD *a8@<X8>)
{
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  __int16 *v34;
  uint64_t v35;
  const WTF::StringImpl *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  const WTF::StringImpl *v44;
  _OWORD *v45;
  int v46;
  WTF *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  unsigned int v60;
  int8x16_t *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  _DWORD *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *result;
  WTF::StringImpl *v75;
  WTF *v76;
  void *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unsigned __int8 *v85;
  int v86;
  uint64_t *v87;
  uint64_t v88;
  WTF::StringImpl **v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  unsigned int v92;
  uint64_t v93;
  unsigned __int8 *v94;
  int v95;
  uint64_t *v96;
  _QWORD *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  __int16 v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  unsigned int v104;
  char v105;

  v102 = 0;
  v16 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::Font const*,WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashMap<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashTraits<WebCore::Font const*>,WTF::HashTraits<WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Font const*>>::expand(a1, 0), (v16 = *a1) != 0))
  {
    v17 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    v17 = 0;
  }
  v18 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = v17 & ((v20 >> 31) ^ v20);
  v22 = (uint64_t *)(v16 + 16 * v21);
  v23 = *v22;
  v97 = a8;
  if (!*v22)
  {
LABEL_95:
    *v22 = a2;
    WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::operator=(v22 + 1, (WTF::StringImpl *)&v102);
    v78 = *a1;
    if (*a1)
      v79 = *(_DWORD *)(v78 - 12) + 1;
    else
      v79 = 1;
    *(_DWORD *)(v78 - 12) = v79;
    v80 = *a1;
    if (*a1)
      v81 = *(_DWORD *)(v80 - 12);
    else
      v81 = 0;
    v82 = (*(_DWORD *)(v80 - 16) + v81);
    v83 = *(unsigned int *)(v80 - 4);
    if (v83 > 0x400)
    {
      if (v83 > 2 * v82)
        goto LABEL_6;
    }
    else if (3 * v83 > 4 * v82)
    {
      goto LABEL_6;
    }
    v22 = WTF::HashTable<WebCore::Font const*,WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashMap<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashTraits<WebCore::Font const*>,WTF::HashTraits<WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Font const*>>::expand(a1, (WTF::StringImpl *)v22);
    goto LABEL_6;
  }
  v24 = 0;
  v25 = 1;
  while (v23 != a2)
  {
    if (v23 == -1)
      v24 = v22;
    v21 = (v21 + v25) & v17;
    v22 = (uint64_t *)(v16 + 16 * v21);
    v23 = *v22;
    ++v25;
    if (!*v22)
    {
      if (v24)
      {
        *v24 = 0;
        v24[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v22 = v24;
      }
      goto LABEL_95;
    }
  }
LABEL_6:
  v26 = v102;
  if (v102)
  {
    v85 = a3;
    v86 = a6;
    v87 = v22;
    v88 = *((unsigned int *)v102 - 1);
    if ((_DWORD)v88)
    {
      v89 = (WTF::StringImpl **)((char *)v102 + 8);
      do
      {
        v90 = *v89;
        if (*v89 != (WTF::StringImpl *)-1)
        {
          *v89 = 0;
          if (v90)
          {
            if (*(_DWORD *)v90 == 2)
              WTF::StringImpl::destroy(v90, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v90 -= 2;
          }
          v91 = *(v89 - 1);
          *(v89 - 1) = 0;
          if (v91)
          {
            if (*(_DWORD *)v91 == 2)
              WTF::StringImpl::destroy(v91, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v91 -= 2;
          }
        }
        v89 += 4;
        --v88;
      }
      while (v88);
    }
    WTF::fastFree((WTF::StringImpl *)((char *)v26 - 16), (void *)a2);
    v22 = v87;
    a6 = v86;
    a3 = v85;
  }
  v27 = *(WTF::StringImpl **)(a5 + 128);
  if (v27)
    *(_DWORD *)v27 += 2;
  v98 = v27;
  v28 = a4;
  v93 = a4 & 0xFF00000000;
  v94 = a3;
  if ((a4 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  v29 = a7;
  LOBYTE(v100) = a7;
  v95 = a6;
  HIBYTE(v100) = a6;
  v32 = v22[1];
  v30 = v22 + 1;
  v31 = v32;
  v96 = v30;
  if (v32
    || (WTF::HashTable<WebCore::CharacterFallbackMapKey,WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>>,WebCore::CharacterFallbackMapKeyHash,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits>::expand(v30, 0), (v31 = *v30) != 0))
  {
    v33 = *(_DWORD *)(v31 - 8);
  }
  else
  {
    v33 = 0;
  }
  v34 = (__int16 *)a5;
  LODWORD(v102) = -1640531527;
  WORD2(v102) = 0;
  BYTE6(v102) = 0;
  WTF::add<WTF::AtomString,WTF::String,BOOL,WebCore::ResolvedEmojiPolicy>((unsigned int *)&v102, &v98, (uint64_t *)&v99, (unsigned __int8 *)&v100, (unsigned __int8 *)&v100 + 1);
  v37 = v102;
  if (BYTE6(v102))
  {
    v92 = ((_DWORD)v102 + WORD2(v102)) ^ (((_DWORD)v102 + WORD2(v102)) << 11);
    v37 = v92 + (v92 >> 17);
  }
  v38 = (v37 ^ (8 * v37)) + ((v37 ^ (8 * v37)) >> 5);
  v39 = (v38 ^ (4 * v38)) + ((v38 ^ (4 * v38)) >> 15);
  v40 = v39 ^ (v39 << 10);
  if (!v40)
    v40 = 0x800000;
  v41 = v40 & v33;
  v42 = v31 + 32 * v41;
  if (!WTF::HashTable<WebCore::CharacterFallbackMapKey,WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>>,WebCore::CharacterFallbackMapKeyHash,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits>::isEmptyBucket(v42, v35, v36))
  {
    v45 = 0;
    v46 = 1;
    do
    {
      v47 = *(WTF **)(v42 + 8);
      if (v47 == (WTF *)-1)
      {
        v45 = (_OWORD *)v42;
      }
      else if (*(WTF::StringImpl **)v42 == v98
             && WTF::equal(v47, v99, v44)
             && __PAIR64__(*(unsigned __int8 *)(v42 + 17), *(unsigned __int8 *)(v42 + 16)) == __PAIR64__(HIBYTE(v100), v100))
      {
        goto LABEL_69;
      }
      v41 = ((_DWORD)v41 + v46) & v33;
      v42 = v31 + 32 * v41;
      ++v46;
    }
    while (!WTF::HashTable<WebCore::CharacterFallbackMapKey,WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>>,WebCore::CharacterFallbackMapKeyHash,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits>::isEmptyBucket(v42, (uint64_t)v43, v44));
    if (v45)
    {
      *v45 = 0u;
      v45[1] = 0u;
      --*(_DWORD *)(*v96 - 16);
      v42 = (uint64_t)v45;
    }
  }
  v48 = v98;
  v98 = 0;
  v49 = *(WTF::StringImpl **)v42;
  *(_QWORD *)v42 = v48;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v43);
    else
      *(_DWORD *)v49 -= 2;
  }
  v50 = v99;
  v99 = 0;
  v51 = *(WTF::StringImpl **)(v42 + 8);
  *(_QWORD *)(v42 + 8) = v50;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v43);
    else
      *(_DWORD *)v51 -= 2;
  }
  *(_WORD *)(v42 + 16) = v100;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 1;
  if (v93)
    WebCore::normalizeSpacesInternal<unsigned char>(&v101, v94, v28);
  else
    WebCore::normalizeSpacesInternal<char16_t>(&v101, (unsigned __int16 *)v94, v28);
  v53 = v101;
  if (v101)
  {
    v54 = *(_DWORD *)v101;
    *(_DWORD *)v101 += 2;
    v102 = v53;
    v104 = *((_DWORD *)v53 + 1);
    if (v54)
      *(_DWORD *)v53 = v54;
    else
      v53 = (WTF::StringImpl *)WTF::StringImpl::destroy(v53, v52);
  }
  else
  {
    v102 = 0;
    v104 = 0;
  }
  if (v95 == 2)
  {
    v84 = 65039;
LABEL_114:
    v53 = (WTF::StringImpl *)WTF::StringBuilder::append((uint64_t)&v102, v84);
    goto LABEL_39;
  }
  if (v95 == 1)
  {
    v84 = 65038;
    goto LABEL_114;
  }
LABEL_39:
  v55 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v55 || (v56 = *(_QWORD *)(v55 + 96)) == 0)
    v56 = WebCore::threadGlobalDataSlow(v53);
  v57 = *(uint64_t **)(v56 + 80);
  if (!v57)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v56);
    v57 = *(uint64_t **)(v56 + 80);
  }
  v58 = v103;
  if (v103)
  {
    v60 = v104;
    v59 = v103;
  }
  else
  {
    v59 = v102;
    v60 = v104;
    if (!v102)
    {
LABEL_47:
      if (v60)
      {
        if (v102)
          v58 = v102;
        if ((v60 & 0x80000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1961D3E30);
        }
        v61 = (int8x16_t *)*((_QWORD *)v58 + 1);
      }
      else
      {
        v61 = 0;
      }
      v62 = 0x100000000;
      goto LABEL_53;
    }
  }
  if ((*((_BYTE *)v59 + 16) & 4) != 0)
    goto LABEL_47;
  if (v60)
  {
    v75 = v102;
    if (!v102)
      v75 = v103;
    if ((v60 & 0x80000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1961D3E58);
    }
    v62 = 0;
    v61 = (int8x16_t *)*((_QWORD *)v75 + 1);
  }
  else
  {
    v62 = 0;
    v61 = 0;
  }
LABEL_53:
  WebCore::FontCache::systemFallbackForCharacterCluster(v57, v34, a2, v29, v61, v62 | v60, &v101);
  v63 = v101;
  v101 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 1)
    {
      WebCore::Font::~Font(v63);
      WTF::fastFree(v76, v77);
    }
    else
    {
      --*(_DWORD *)v63;
    }
    *((_BYTE *)v63 + 344) |= 0x10u;
  }
  v64 = v103;
  v103 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, v43);
    else
      *(_DWORD *)v64 -= 2;
  }
  v65 = v102;
  v102 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v43);
    else
      *(_DWORD *)v65 -= 2;
  }
  *(_QWORD *)(v42 + 24) = v63;
  v66 = *v96;
  if (*v96)
    v67 = *(_DWORD *)(v66 - 12) + 1;
  else
    v67 = 1;
  *(_DWORD *)(v66 - 12) = v67;
  v68 = *v96;
  if (*v96)
    v69 = *(_DWORD *)(v68 - 12);
  else
    v69 = 0;
  v70 = (*(_DWORD *)(v68 - 16) + v69);
  v71 = *(unsigned int *)(v68 - 4);
  if (v71 > 0x400)
  {
    if (v71 > 2 * v70)
      goto LABEL_69;
  }
  else if (3 * v71 > 4 * v70)
  {
    goto LABEL_69;
  }
  v42 = WTF::HashTable<WebCore::CharacterFallbackMapKey,WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>>,WebCore::CharacterFallbackMapKeyHash,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits>::expand(v96, v42);
LABEL_69:
  v72 = *(_DWORD **)(v42 + 24);
  if (v72)
    ++*v72;
  *v97 = v72;
  v73 = v99;
  v99 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, v43);
    else
      *(_DWORD *)v73 -= 2;
  }
  result = v98;
  v98 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v43);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::HashMap<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashTraits<WebCore::Font const*>,WTF::HashTraits<WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::HashTableTraits>::values@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = (_QWORD *)*result;
  if (!*result)
  {
    v5 = 0;
    v3 = 0;
    goto LABEL_10;
  }
  v3 = *((unsigned int *)v2 - 1);
  v4 = &v2[2 * v3];
  if (!*((_DWORD *)v2 - 3))
  {
    v5 = &v2[2 * v3];
LABEL_10:
    v4 = &v2[2 * v3];
    goto LABEL_11;
  }
  v5 = (_QWORD *)*result;
  if ((_DWORD)v3)
  {
    v6 = 16 * v3;
    v5 = (_QWORD *)*result;
    while ((unint64_t)(*v5 + 1) <= 1)
    {
      v5 += 2;
      v6 -= 16;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_11:
  if (v2)
  {
    v8 = *((unsigned int *)v2 - 1);
    v7 = &v2[2 * v8];
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  *a2 = result;
  a2[1] = v5;
  a2[2] = v4;
  a2[3] = v7;
  a2[4] = &v2[2 * v8];
  return result;
}

uint64_t WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::begin(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  if (!*a1)
    return 0;
  v4 = *(unsigned int *)(v3 - 4);
  v5 = v3 + 32 * v4;
  if (!*(_DWORD *)(v3 - 12))
    return v3 + 32 * v4;
  if ((_DWORD)v4)
  {
    v6 = 32 * v4;
    while (WTF::HashTable<WebCore::CharacterFallbackMapKey,WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>>,WebCore::CharacterFallbackMapKeyHash,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits>::isEmptyBucket(v3, a2, a3)|| *(_QWORD *)(v3 + 8) == -1)
    {
      v3 += 32;
      v6 -= 32;
      if (!v6)
        return v5;
    }
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::CharacterFallbackMapKey,512ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *v8;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  v8 = *(WTF **)a1;
  if (a1 + 4 != *(unsigned int **)a1 && v8 != 0)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v8, a2);
  }
  return a1;
}

uint64_t WebCore::SystemFontDatabase::systemFontShorthandInfo@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, WTF::StringImpl *a3@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  __int16 v9;

  if (a2 >= 0x1A)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v3 = a1 + 24 * a2;
  if (!*(_BYTE *)(v3 + 16))
  {
    WebCore::SystemFontDatabase::platformSystemFontShorthandInfo(a2);
    a3 = v7;
    if (!*(_BYTE *)(v3 + 16))
    {
LABEL_11:
      *(_QWORD *)v3 = a3;
      *(_DWORD *)(v3 + 8) = v8;
      *(_WORD *)(v3 + 12) = v9;
      *(_BYTE *)(v3 + 16) = 1;
      return v3;
    }
    v6 = *(WTF::StringImpl **)v3;
    *(_QWORD *)v3 = v7;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v5);
        *(_DWORD *)(v3 + 8) = v8;
        *(_WORD *)(v3 + 12) = v9;
LABEL_9:
        a3 = (WTF::StringImpl *)*(unsigned __int8 *)(v3 + 16);
        if (*(_BYTE *)(v3 + 16))
          return v3;
        goto LABEL_10;
      }
      *(_DWORD *)v6 -= 2;
    }
    *(_DWORD *)(v3 + 8) = v8;
    *(_WORD *)(v3 + 12) = v9;
    goto LABEL_9;
  }
  return v3;
}

double WebCore::TrackBuffer::create@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  WTF::MediaTime *v8;
  WTF::MediaTime *v9;
  WTF::MediaTime *v10;
  WTF::MediaTime *v11;
  WTF::MediaTime *v12;
  WTF::MediaTime *v13;
  WTF::MediaTime *v14;
  WTF::MediaTime *v15;
  double result;

  v6 = WTF::fastMalloc((WTF *)0x138);
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = off_1E340FF58;
  *(_QWORD *)(v6 + 8) = v6 + 16;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = v6 + 40;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 64) = v6 + 72;
  v7 = *a1;
  *a1 = 0;
  *(_QWORD *)(v6 + 88) = v7;
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  v8 = (WTF::MediaTime *)WTF::MediaTime::invalidTime((WTF::MediaTime *)v6);
  *(_OWORD *)(v6 + 112) = *(_OWORD *)v8;
  v9 = (WTF::MediaTime *)WTF::MediaTime::invalidTime(v8);
  *(_OWORD *)(v6 + 128) = *(_OWORD *)v9;
  v10 = (WTF::MediaTime *)WTF::MediaTime::invalidTime(v9);
  *(_OWORD *)(v6 + 144) = *(_OWORD *)v10;
  v11 = (WTF::MediaTime *)WTF::MediaTime::invalidTime(v10);
  *(_OWORD *)(v6 + 160) = *(_OWORD *)v11;
  v12 = (WTF::MediaTime *)WTF::MediaTime::invalidTime(v11);
  *(_OWORD *)(v6 + 176) = *(_OWORD *)v12;
  v13 = (WTF::MediaTime *)WTF::MediaTime::invalidTime(v12);
  *(_OWORD *)(v6 + 192) = *(_OWORD *)v13;
  v14 = (WTF::MediaTime *)WTF::MediaTime::invalidTime(v13);
  v15 = (WTF::MediaTime *)WTF::MediaTime::invalidTime(v14);
  *(_OWORD *)(v6 + 208) = *(_OWORD *)v14;
  *(_OWORD *)(v6 + 224) = *(_OWORD *)v15;
  *(_OWORD *)(v6 + 240) = *a2;
  *(_OWORD *)(v6 + 256) = *a2;
  *(_OWORD *)(v6 + 272) = *(_OWORD *)WTF::MediaTime::invalidTime(v15);
  *(_QWORD *)(v6 + 288) = 0;
  *(_DWORD *)(v6 + 304) = 0;
  *(_QWORD *)&result = 0x100000001;
  *(_DWORD *)(v6 + 308) = 1;
  *a3 = v6;
  return result;
}

uint64_t WebCore::TrackBuffer::updateMinimumUpcomingPresentationTime(WebCore::TrackBuffer *this)
{
  WebCore::TrackBuffer *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];

  v1 = this;
  if (!*((_QWORD *)this + 10))
    goto LABEL_15;
  v2 = (char *)*((_QWORD *)this + 8);
  v3 = (char *)this + 72;
  if (v2 != (char *)this + 72)
  {
    v4 = (char *)*((_QWORD *)this + 8);
    while (1)
    {
      v5 = (char *)*((_QWORD *)v4 + 1);
      v6 = v4;
      if (v5)
      {
        do
        {
          v4 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v4 = (char *)*((_QWORD *)v6 + 2);
          v7 = *(_QWORD *)v4 == (_QWORD)v6;
          v6 = v4;
        }
        while (!v7);
      }
      if (v4 == v3)
        break;
      v16[0] = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v4 + 8) + 16))(*((_QWORD *)v4 + 8));
      v16[1] = v8;
      v15[0] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v2 + 8) + 16))(*((_QWORD **)v2 + 8));
      v15[1] = v9;
      this = (WebCore::TrackBuffer *)WTF::MediaTime::compare((WTF::MediaTime *)v16, (const WTF::MediaTime *)v15);
      if ((_DWORD)this == -1)
        v2 = v4;
    }
  }
  if (v2 == v3)
  {
LABEL_15:
    v13 = (_QWORD *)WTF::MediaTime::invalidTime(this);
    result = 0;
    v14 = *(_QWORD *)((char *)v13 + 5);
    *((_QWORD *)v1 + 24) = *v13;
    *(_QWORD *)((char *)v1 + 197) = v14;
  }
  else
  {
    *((_QWORD *)v1 + 24) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v2 + 8) + 16))(*((_QWORD **)v2 + 8));
    *((_DWORD *)v1 + 50) = v10;
    *((_BYTE *)v1 + 204) = v11;
    return 1;
  }
  return result;
}

uint64_t WebCore::TrackBuffer::reenqueueMediaForTime(WTF **this, const WTF::MediaTime *a2, const WTF::MediaTime *a3)
{
  char *v6;
  _QWORD **v7;
  WTF::MediaTime *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  int v14;
  char v15;
  char *SampleContainingPresentationTime;
  char *v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::TrackBuffer *v28;
  WebCore::TrackBuffer *v29;
  WebCore::TrackBuffer *v30;
  WebCore::TrackBuffer **v31;
  WebCore::TrackBuffer *v32;
  BOOL v33;
  WebCore::TrackBuffer **v34;
  WebCore::TrackBuffer **v35;
  WebCore::TrackBuffer *v36;
  WebCore::TrackBuffer **v37;
  WebCore::TrackBuffer *v38;
  WebCore::TrackBuffer *v39;
  WebCore::TrackBuffer ***v40;
  WebCore::TrackBuffer *v41;
  WebCore::TrackBuffer **v42;
  WebCore::TrackBuffer *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  __int128 v53;
  unsigned int *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  _QWORD *v76;
  WebCore::TrackBuffer *v77;
  WebCore::TrackBuffer *v78;
  __int128 v79;
  __int128 v80;
  unsigned int *v81;
  unsigned int *v82;
  _QWORD v83[4];
  uint64_t v84;

  v6 = (char *)(this + 9);
  v7 = (_QWORD **)(this + 8);
  v8 = (WTF::MediaTime *)std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy((uint64_t)(this + 8), this[9]);
  *((_QWORD *)v6 - 1) = v6;
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v9 = WTF::MediaTime::invalidTime(v8);
  v10 = *(_QWORD *)(v9 + 5);
  *((_QWORD *)v6 + 13) = *(_QWORD *)v9;
  *(_QWORD *)(v6 + 109) = v10;
  v11 = WTF::MediaTime::invalidTime((WTF::MediaTime *)v9);
  v80 = *(_OWORD *)WTF::MediaTime::invalidTime((WTF::MediaTime *)v11);
  v12 = *(_BYTE *)(v11 + 12);
  v13 = *(_DWORD *)(v11 + 8);
  *((_QWORD *)v6 + 17) = *(_QWORD *)v11;
  *((_DWORD *)v6 + 36) = v13;
  v6[148] = v12;
  *(_QWORD *)(v6 + 157) = *(_QWORD *)((char *)&v80 + 5);
  *((_QWORD *)v6 + 19) = v80;
  *((_QWORD *)v6 + 21) = WTF::MediaTime::operator+();
  *((_DWORD *)v6 + 44) = v14;
  v6[180] = v15;
  SampleContainingPresentationTime = WebCore::PresentationOrderSampleMap::findSampleContainingPresentationTime((WebCore::PresentationOrderSampleMap *)(v6 - 40), a2);
  v17 = SampleContainingPresentationTime;
  if (v6 - 32 == SampleContainingPresentationTime)
  {
    v18 = *(_QWORD **)SampleContainingPresentationTime;
    if (*(_QWORD *)SampleContainingPresentationTime)
    {
      do
      {
        v19 = WTF::MediaTime::compare((WTF::MediaTime *)(v18 + 4), a2);
        v20 = v18 + 1;
        if (v19 != -1)
        {
          v20 = v18;
          v17 = (char *)v18;
        }
        v18 = (_QWORD *)*v20;
      }
      while (*v20);
    }
  }
  if (v17 == v6 - 32)
    return 0;
  *(_QWORD *)&v79 = WTF::MediaTime::operator-();
  *((_QWORD *)&v79 + 1) = v21;
  if (WTF::MediaTime::compare((WTF::MediaTime *)&v79, a3) == 1)
    return 0;
  v22 = v6 - 64;
  v23 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v17 + 6) + 24))(*((_QWORD *)v17 + 6));
  v25 = v24;
  v26 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v17 + 6) + 16))(*((_QWORD *)v17 + 6));
  v83[0] = v23;
  v83[1] = v25;
  v83[2] = v26;
  v83[3] = v27;
  v28 = (WebCore::TrackBuffer *)std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::find<std::pair<WTF::MediaTime,WTF::MediaTime>>((uint64_t)v22, (WTF::MediaTime *)v83);
  v29 = v28;
  v30 = (WebCore::TrackBuffer *)*((_QWORD *)v28 + 1);
  if (v30)
  {
    do
    {
      v31 = (WebCore::TrackBuffer **)v30;
      v30 = *(WebCore::TrackBuffer **)v30;
    }
    while (v30);
  }
  else
  {
    v32 = v28;
    do
    {
      v31 = (WebCore::TrackBuffer **)*((_QWORD *)v32 + 2);
      v33 = *v31 == v32;
      v32 = (WebCore::TrackBuffer *)v31;
    }
    while (!v33);
  }
  v34 = *(WebCore::TrackBuffer ***)v22;
  if (*(WebCore::TrackBuffer ***)v22 == v31)
    return 0;
  v35 = v31;
  while (1)
  {
    v36 = *v35;
    v37 = v35;
    if (*v35)
    {
      do
      {
        v38 = v36;
        v36 = (WebCore::TrackBuffer *)*((_QWORD *)v36 + 1);
      }
      while (v36);
    }
    else
    {
      do
      {
        v38 = v37[2];
        v33 = *(_QWORD *)v38 == (_QWORD)v37;
        v37 = (WebCore::TrackBuffer **)v38;
      }
      while (v33);
    }
    if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)v38 + 8) + 104))(*((_QWORD *)v38 + 8)) & 1) != 0)
      break;
    v39 = *v35;
    if (*v35)
    {
      do
      {
        v40 = (WebCore::TrackBuffer ***)v39;
        v39 = (WebCore::TrackBuffer *)*((_QWORD *)v39 + 1);
      }
      while (v39);
    }
    else
    {
      do
      {
        v40 = (WebCore::TrackBuffer ***)v35[2];
        v33 = *v40 == v35;
        v35 = (WebCore::TrackBuffer **)v40;
      }
      while (v33);
    }
    v35 = (WebCore::TrackBuffer **)v40;
    if (v40 == (WebCore::TrackBuffer ***)v34)
    {
      v35 = v34;
      break;
    }
  }
  if (*(WebCore::TrackBuffer ***)v22 == v35)
    return 0;
  if (v31 != v35)
  {
    v41 = *v35;
    do
    {
      v42 = v35;
      if (v41)
      {
        do
        {
          v43 = v41;
          v41 = (WebCore::TrackBuffer *)*((_QWORD *)v41 + 1);
        }
        while (v41);
      }
      else
      {
        do
        {
          v43 = v42[2];
          v33 = *(_QWORD *)v43 == (_QWORD)v42;
          v42 = (WebCore::TrackBuffer **)v43;
        }
        while (v33);
      }
      (*(void (**)(unsigned int **__return_ptr))(**((_QWORD **)v43 + 8) + 96))(&v82);
      v44 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v82 + 24))(v82);
      v46 = v45;
      v47 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v82 + 16))(v82);
      *(_QWORD *)&v79 = v44;
      *((_QWORD *)&v79 + 1) = v46;
      *(_QWORD *)&v80 = v47;
      *((_QWORD *)&v80 + 1) = v48;
      v49 = v82;
      v82 = 0;
      v81 = v49;
      v50 = std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::__find_equal<std::pair<WTF::MediaTime,WTF::MediaTime>>((uint64_t)v7, &v84, (WTF::MediaTime *)&v79);
      if (!*v50)
      {
        v51 = v50;
        v52 = WTF::fastMalloc((WTF *)0x48);
        v53 = v80;
        *(_OWORD *)(v52 + 32) = v79;
        *(_OWORD *)(v52 + 48) = v53;
        v54 = v81;
        v81 = 0;
        *(_QWORD *)(v52 + 64) = v54;
        v55 = v84;
        *(_QWORD *)v52 = 0;
        *(_QWORD *)(v52 + 8) = 0;
        *(_QWORD *)(v52 + 16) = v55;
        *v51 = v52;
        v56 = (_QWORD *)**v7;
        if (v56)
        {
          *v7 = v56;
          v57 = *v51;
        }
        else
        {
          v57 = v52;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)this[9], v57);
        this[10] = (WTF *)((char *)this[10] + 1);
      }
      v58 = v81;
      v81 = 0;
      if (v58)
      {
        v59 = v58 + 2;
        do
        {
          v60 = __ldaxr(v59);
          v61 = v60 - 1;
        }
        while (__stlxr(v61, v59));
        if (!v61)
        {
          atomic_store(1u, v58 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
        }
      }
      v62 = v82;
      v82 = 0;
      if (v62)
      {
        v63 = v62 + 2;
        do
        {
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
        {
          atomic_store(1u, v62 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v62 + 8))(v62);
        }
      }
      v41 = v35[1];
      if (v41)
      {
        do
        {
          v35 = (WebCore::TrackBuffer **)v41;
          v41 = *(WebCore::TrackBuffer **)v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v41 = (WebCore::TrackBuffer *)v35;
          v35 = (WebCore::TrackBuffer **)v35[2];
        }
        while (*v35 != v41);
      }
    }
    while (v35 != v31);
  }
  if (this + 2 != (WTF **)v29)
  {
    do
    {
      v67 = std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::__find_equal<std::pair<WTF::MediaTime,WTF::MediaTime>>((uint64_t)v7, &v79, (WebCore::TrackBuffer *)((char *)v29 + 32));
      if (!*v67)
      {
        v68 = v67;
        v69 = WTF::fastMalloc((WTF *)0x48);
        v70 = v69;
        v71 = *((_OWORD *)v29 + 3);
        *(_OWORD *)(v69 + 32) = *((_OWORD *)v29 + 2);
        *(_OWORD *)(v69 + 48) = v71;
        v72 = *((_QWORD *)v29 + 8);
        v73 = (unsigned int *)(v72 + 8);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 + 1, v73));
        *(_QWORD *)(v69 + 64) = v72;
        v75 = v79;
        *(_QWORD *)v69 = 0;
        *(_QWORD *)(v69 + 8) = 0;
        *(_QWORD *)(v69 + 16) = v75;
        *v68 = v69;
        v76 = (_QWORD *)**v7;
        if (v76)
        {
          *v7 = v76;
          v70 = *v68;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)this[9], v70);
        this[10] = (WTF *)((char *)this[10] + 1);
      }
      v77 = (WebCore::TrackBuffer *)*((_QWORD *)v29 + 1);
      if (v77)
      {
        do
        {
          v78 = v77;
          v77 = *(WebCore::TrackBuffer **)v77;
        }
        while (v77);
      }
      else
      {
        do
        {
          v78 = (WebCore::TrackBuffer *)*((_QWORD *)v29 + 2);
          v33 = *(_QWORD *)v78 == (_QWORD)v29;
          v29 = v78;
        }
        while (!v33);
      }
      v29 = v78;
    }
    while (v78 != (WebCore::TrackBuffer *)(this + 2));
  }
  *((_BYTE *)this + 310) = 0;
  return 1;
}

uint64_t WebCore::TrackBuffer::findSeekTimeForTargetTime(WebCore::TrackBuffer *this, const WTF::MediaTime *a2, const WTF::MediaTime *a3, const WTF::MediaTime *a4)
{
  WebCore::DecodeOrderSampleMap *v7;
  char *SyncSampleAfterPresentationTime;
  WTF::MediaTime *SyncSamplePriorToPresentationTime;
  uint64_t *v10;
  char *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t *v14;
  WTF::MediaTime *v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  _QWORD v27[4];
  _QWORD v28[2];
  __int128 v29;
  __int128 v30;

  v7 = (WebCore::TrackBuffer *)((char *)this + 8);
  SyncSampleAfterPresentationTime = WebCore::DecodeOrderSampleMap::findSyncSampleAfterPresentationTime((WebCore::TrackBuffer *)((char *)this + 8), a2, a4);
  SyncSamplePriorToPresentationTime = (WTF::MediaTime *)WebCore::DecodeOrderSampleMap::findSyncSamplePriorToPresentationTime(v7, a2, a3);
  v11 = (char *)this + 16;
  v12 = (uint64_t *)*((_QWORD *)this + 1);
  v13 = v11 == SyncSampleAfterPresentationTime && v12 == v10;
  if (v13)
    return *(_QWORD *)WTF::MediaTime::invalidTime(SyncSamplePriorToPresentationTime);
  v14 = v10;
  v15 = (WTF::MediaTime *)WTF::MediaTime::positiveInfiniteTime(SyncSamplePriorToPresentationTime);
  v30 = *(_OWORD *)v15;
  if (v11 != SyncSampleAfterPresentationTime)
  {
    v15 = (WTF::MediaTime *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)SyncSampleAfterPresentationTime + 8) + 16))(*((_QWORD *)SyncSampleAfterPresentationTime + 8));
    *(_QWORD *)&v30 = v15;
    DWORD2(v30) = v16;
    BYTE12(v30) = v17;
  }
  v29 = *(_OWORD *)WTF::MediaTime::negativeInfiniteTime(v15);
  if (v12 != v14)
  {
    v18 = *v14;
    if (*v14)
    {
      do
      {
        v19 = v18;
        v18 = *(_QWORD *)(v18 + 8);
      }
      while (v18);
    }
    else
    {
      do
      {
        v19 = v14[2];
        v13 = *(_QWORD *)v19 == (_QWORD)v14;
        v14 = (uint64_t *)v19;
      }
      while (v13);
    }
    *(_QWORD *)&v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v19 + 64) + 16))(*(_QWORD *)(v19 + 64));
    DWORD2(v29) = v20;
    BYTE12(v29) = v21;
  }
  v27[2] = WTF::MediaTime::operator-();
  v27[3] = v22;
  v28[0] = WTF::abs();
  v28[1] = v23;
  WTF::MediaTime::operator-();
  v27[0] = WTF::abs();
  v27[1] = v24;
  if (WTF::MediaTime::compare((WTF::MediaTime *)v28, (const WTF::MediaTime *)v27) == -1)
    v25 = &v30;
  else
    v25 = &v29;
  return *(_QWORD *)v25;
}

WTF::StringImpl *WebCore::TrackBuffer::removeSamples@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X8>)
{
  _QWORD *v5;
  uint64_t v7;
  WTF::MediaTime *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  WebCore::SampleMap *v13;
  char *v14;
  unsigned __int8 *v15;
  WTF::MediaTime *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  WebCore::MediaSample *v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  char v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  int v40;
  int v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF *v53;
  uint64_t v54;
  WTF::StringImpl **v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  int v60;
  WTF::StringImpl *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  BOOL v67;
  uint64_t *v68;
  void *v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::MediaTime *v77;
  void *v78;
  unsigned int v79;
  unsigned int v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  WTF::MediaTime *v87;
  uint64_t v88;
  WTF::MediaTime *v89;
  uint64_t *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::MediaTime *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 *v117;
  uint64_t v118;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  NSObject *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  WTF::StringImpl *result;
  uint64_t v134;
  uint64_t v135;
  WTF::String *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF *v147;
  uint64_t v148;
  WTF::StringImpl **v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  int v158;
  WTF::StringImpl *v159;
  uint64_t v160;
  WebCore::SampleMap *v161;
  _QWORD *v162;
  uint64_t *v163;
  unsigned int *v164;
  _QWORD *v165;
  WTF::String *v166;
  WTF::String *v167;
  WTF::String *v168;
  WTF::StringImpl *v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  uint64_t v174;
  WTF::StringImpl *v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  _QWORD v179[4];
  __int128 v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  uint8_t buf[16];
  int v192;
  WTF::StringImpl *v193;
  int v194;
  WTF::StringImpl *v195;
  int v196;
  WTF::StringImpl *v197;
  int v198;
  WTF::StringImpl *v199;
  int v200;
  WTF::StringImpl *v201;
  int v202;
  WTF::StringImpl *v203;
  uint64_t v204;

  v5 = a1;
  v204 = *MEMORY[0x1E0C80C00];
  v7 = a1[37];
  v179[0] = "TrackBuffer";
  v179[1] = 12;
  v179[2] = a3;
  v179[3] = v7;
  v8 = (WTF::MediaTime *)WTF::MediaTime::positiveInfiniteTime((WTF::MediaTime *)a1);
  v178 = *(_OWORD *)v8;
  v177 = *(_OWORD *)WTF::MediaTime::zeroTime(v8);
  v9 = v5[7];
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v164 = a4;
  v12 = (_QWORD *)*a2;
  v10 = a2 + 1;
  v11 = v12;
  if (v12 == v10)
  {
    result = 0;
    v176 = 0;
    return result;
  }
  v160 = v9;
  v13 = (WebCore::SampleMap *)(v5 + 1);
  v163 = v5 + 9;
  v166 = (WTF::String *)(v5 + 8);
  v14 = &WebCore::LogMedia;
  v15 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  v165 = v5;
  v161 = (WebCore::SampleMap *)(v5 + 1);
  v162 = v10;
  do
  {
    v16 = (WTF::MediaTime *)(v11 + 4);
    v17 = (unsigned int *)v11[8];
    v18 = v17 + 2;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    v20 = v5[36];
    if (!v20 || !*(_BYTE *)(v20 + 12))
      goto LABEL_95;
    if (!*v14 || v14[16] < 4u)
      goto LABEL_95;
    v22 = (WebCore::MediaSample *)v11[8];
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v179);
    WTF::String::String((WTF::String *)&v171, "removing sample ");
    WebCore::MediaSample::toJSONString(v22);
    if (v173)
      v23 = *((_DWORD *)v173 + 1);
    else
      v23 = 0;
    if (v171)
    {
      v24 = *((_DWORD *)v171 + 1);
      if (!v169)
        goto LABEL_131;
    }
    else
    {
      v24 = 0;
      if (!v169)
      {
LABEL_131:
        v25 = 0;
        goto LABEL_17;
      }
    }
    v25 = *((_DWORD *)v169 + 1);
LABEL_17:
    if ((v25 | v24) < 0
      || ((v26 = __OFADD__(v24, v25), v27 = v24 + v25, !v26) ? (v28 = 0) : (v28 = 1),
          v23 < 0 || (v28 & 1) != 0 || (v29 = (v23 + v27), __OFADD__(v23, v27))))
    {
      v175 = 0;
LABEL_303:
      __break(0xC471u);
LABEL_305:
      JUMPOUT(0x1961D5AD4);
    }
    if (!v173 || (*((_BYTE *)v173 + 16) & 4) != 0)
    {
      if (v171)
      {
        v31 = *((_DWORD *)v171 + 4);
        v30 = (v31 >> 2) & 1;
        if (!v169 || (v31 & 4) == 0)
          goto LABEL_31;
      }
      else if (!v169)
      {
        v30 = 1;
        goto LABEL_31;
      }
      v30 = (*((unsigned __int8 *)v169 + 16) >> 2) & 1;
    }
    else
    {
      v30 = 0;
    }
LABEL_31:
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v29, v30, v173, (uint64_t)v171, (uint64_t)v169, &v175);
    if (!v175)
      goto LABEL_303;
    v33 = v169;
    v169 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v32);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = v171;
    v171 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v32);
      else
        *(_DWORD *)v34 -= 2;
    }
    v35 = v173;
    v173 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v32);
      else
        *(_DWORD *)v35 -= 2;
    }
    v36 = *((_QWORD *)v14 + 4);
    v37 = os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v37)
    {
      WTF::String::utf8();
      v39 = (_QWORD)v180 ? v180 + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v39;
      _os_log_impl(&dword_1940B8000, v36, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v37 = v180;
      *(_QWORD *)&v180 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 1)
          v37 = WTF::fastFree((WTF *)v37, v38);
        else
          --*(_DWORD *)v37;
      }
    }
    if (*v14 && v14[16] >= 4u)
    {
      while (1)
      {
        v40 = *v15;
        if ((v40 & 1) != 0)
          break;
        v41 = __ldaxr(v15);
        if (v41 == v40)
        {
          if (!__stxr(v40 | 1, v15))
          {
            v42 = v14;
            v43 = WTF::Logger::observers((WTF::Logger *)v37);
            v44 = *(unsigned int *)(v43 + 12);
            if ((_DWORD)v44)
            {
              v45 = *(uint64_t **)v43;
              v46 = *(_QWORD *)v43 + 8 * v44;
              do
              {
                v47 = *v45;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v179);
                v192 = 0;
                WTF::String::String((WTF::String *)&v193, "removing sample ");
                v194 = 1;
                WebCore::MediaSample::toJSONString(v22);
                v180 = 0uLL;
                v48 = WTF::fastMalloc((WTF *)0x30);
                DWORD2(v180) = 3;
                *(_QWORD *)&v180 = v48;
                v49 = HIDWORD(v180);
                *(_DWORD *)(v48 + 16 * HIDWORD(v180)) = *(_DWORD *)buf;
                v50 = *(_QWORD *)&buf[8];
                if (*(_QWORD *)&buf[8])
                  **(_DWORD **)&buf[8] += 2;
                *(_QWORD *)(v48 + 16 * v49 + 8) = v50;
                *(_DWORD *)(v48 + 16 * (v49 + 1)) = v192;
                v51 = v193;
                if (v193)
                  *(_DWORD *)v193 += 2;
                *(_QWORD *)(v48 + 16 * (v49 + 1) + 8) = v51;
                *(_DWORD *)(v48 + 16 * (v49 + 2)) = v194;
                v52 = v195;
                if (v195)
                  *(_DWORD *)v195 += 2;
                *(_QWORD *)(v48 + 16 * (v49 + 2) + 8) = v52;
                HIDWORD(v180) = v49 + 3;
                (*(void (**)(uint64_t, char *, uint64_t, __int128 *))(*(_QWORD *)v47 + 16))(v47, v42, 4, &v180);
                v53 = (WTF *)v180;
                if (HIDWORD(v180))
                {
                  v54 = 16 * HIDWORD(v180);
                  v55 = (WTF::StringImpl **)(v180 + 8);
                  do
                  {
                    v56 = *v55;
                    *v55 = 0;
                    if (v56)
                    {
                      if (*(_DWORD *)v56 == 2)
                        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v38);
                      else
                        *(_DWORD *)v56 -= 2;
                    }
                    v55 += 2;
                    v54 -= 16;
                  }
                  while (v54);
                  v53 = (WTF *)v180;
                }
                if (v53)
                {
                  *(_QWORD *)&v180 = 0;
                  DWORD2(v180) = 0;
                  WTF::fastFree(v53, v38);
                }
                v57 = v195;
                v195 = 0;
                if (v57)
                {
                  if (*(_DWORD *)v57 == 2)
                    WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v38);
                  else
                    *(_DWORD *)v57 -= 2;
                }
                v58 = v193;
                v193 = 0;
                if (v58)
                {
                  if (*(_DWORD *)v58 == 2)
                    WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v38);
                  else
                    *(_DWORD *)v58 -= 2;
                }
                v59 = *(WTF::StringImpl **)&buf[8];
                *(_QWORD *)&buf[8] = 0;
                if (v59)
                {
                  if (*(_DWORD *)v59 == 2)
                    WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v38);
                  else
                    *(_DWORD *)v59 -= 2;
                }
                ++v45;
              }
              while (v45 != (uint64_t *)v46);
            }
            v60 = __ldxr(v15);
            if (v60 == 1)
            {
              v14 = v42;
              v16 = (WTF::MediaTime *)(v11 + 4);
              if (!__stlxr(0, v15))
                break;
            }
            else
            {
              __clrex();
              v14 = v42;
              v16 = (WTF::MediaTime *)(v11 + 4);
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v15);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v61 = v175;
    v175 = 0;
    v5 = v165;
    v13 = v161;
    v10 = v162;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v38);
      else
        *(_DWORD *)v61 -= 2;
    }
LABEL_95:
    WebCore::SampleMap::removeSample(v13, (const WebCore::MediaSample *)v17);
    v62 = std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::find<std::pair<WTF::MediaTime,WTF::MediaTime>>((uint64_t)v166, v16);
    if (v163 != v62)
    {
      v63 = v62;
      v64 = (uint64_t *)v62[1];
      if (v64)
      {
        do
        {
          v65 = v64;
          v64 = (uint64_t *)*v64;
        }
        while (v64);
      }
      else
      {
        v66 = v62;
        do
        {
          v65 = (uint64_t *)v66[2];
          v67 = *v65 == (_QWORD)v66;
          v66 = v65;
        }
        while (!v67);
      }
      if (*(uint64_t **)v166 == v62)
        *(_QWORD *)v166 = v65;
      v68 = (uint64_t *)v5[9];
      --v5[10];
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v68, v63);
      v70 = (unsigned int *)v63[8];
      v63[8] = 0;
      if (v70)
      {
        v71 = v70 + 2;
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          atomic_store(1u, v70 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 8))(v70);
        }
      }
      WTF::fastFree((WTF *)v63, v69);
    }
    *(_QWORD *)buf = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v17 + 16))(v17);
    *(_QWORD *)&buf[8] = v74;
    v175 = (WTF::StringImpl *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    v176 = v75;
    *(_QWORD *)&v180 = WTF::MediaTime::operator+();
    *((_QWORD *)&v180 + 1) = v76;
    WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)v164, (__int128 *)buf, &v180, 1);
    if (WTF::MediaTime::compare((WTF::MediaTime *)buf, (const WTF::MediaTime *)&v178) == -1)
    {
      *(_QWORD *)&v178 = *(_QWORD *)buf;
      *(_QWORD *)((char *)&v178 + 5) = *(_QWORD *)&buf[5];
    }
    v77 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)&v180, (const WTF::MediaTime *)&v177);
    if ((_DWORD)v77 == 1)
    {
      *(_QWORD *)&v177 = v180;
      *(_QWORD *)((char *)&v177 + 5) = *(_QWORD *)((char *)&v180 + 5);
    }
    do
    {
      v79 = __ldaxr(v18);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, v18));
    if (!v80)
    {
      atomic_store(1u, v17 + 2);
      v77 = (WTF::MediaTime *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
    }
    v81 = (_QWORD *)v11[1];
    if (v81)
    {
      do
      {
        v82 = v81;
        v81 = (_QWORD *)*v81;
      }
      while (v81);
    }
    else
    {
      do
      {
        v82 = (_QWORD *)v11[2];
        v67 = *v82 == (_QWORD)v11;
        v11 = v82;
      }
      while (!v67);
    }
    v11 = v82;
  }
  while (v82 != v10);
  v83 = v5[7];
  v84 = v164[3];
  v175 = 0;
  v176 = 0;
  if (!(_DWORD)v84)
    goto LABEL_181;
  v85 = 0;
  v86 = v5 + 5;
  while (2)
  {
    if (v85 >= v84)
    {
      v87 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v77);
      v84 = v164[3];
    }
    else
    {
      v87 = (WTF::MediaTime *)(*(_QWORD *)v164 + 32 * v85);
    }
    *(_OWORD *)buf = *(_OWORD *)v87;
    if (v84 <= v85)
    {
      v89 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v87);
      v90 = (uint64_t *)((char *)v89 + 8);
    }
    else
    {
      v88 = *(_QWORD *)v164 + 32 * v85;
      v89 = (WTF::MediaTime *)(v88 + 16);
      v90 = (uint64_t *)(v88 + 24);
    }
    v91 = *v90;
    *(_QWORD *)&v180 = *(_QWORD *)v89;
    *((_QWORD *)&v180 + 1) = v91;
    if (!v165[6])
      goto LABEL_166;
    v92 = (_QWORD *)*v86;
    v93 = v86;
    if (!*v86)
    {
      v95 = (_QWORD *)v165[4];
LABEL_158:
      v93 = v86;
      goto LABEL_159;
    }
    do
    {
      v89 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)buf, (const WTF::MediaTime *)(v92 + 4));
      v94 = v92 + 1;
      if ((_DWORD)v89 == -1)
      {
        v94 = v92;
        v93 = v92;
      }
      v92 = (_QWORD *)*v94;
    }
    while (*v94);
    v95 = (_QWORD *)v165[4];
    if (v93 == v86)
      goto LABEL_158;
    if (v93 != v95)
    {
      v96 = (_QWORD *)*v93;
      if (*v93)
      {
        do
        {
          v93 = v96;
          v96 = (_QWORD *)v96[1];
        }
        while (v96);
        goto LABEL_151;
      }
      do
      {
        v98 = v93;
        v93 = (_QWORD *)v93[2];
      }
      while ((_QWORD *)*v93 == v98);
      v99 = (_QWORD *)v93[1];
      if (v99)
      {
        do
        {
          v93 = v99;
          v99 = (_QWORD *)*v99;
        }
        while (v99);
      }
      else
      {
        do
        {
LABEL_151:
          v97 = v93;
          v93 = (_QWORD *)v93[2];
        }
        while ((_QWORD *)*v93 != v97);
      }
LABEL_159:
      if (v95 != v93)
      {
        v100 = (_QWORD *)*v93;
        if (*v93)
        {
          do
          {
            v101 = v100;
            v100 = (_QWORD *)v100[1];
          }
          while (v100);
        }
        else
        {
          do
          {
            v101 = (_QWORD *)v93[2];
            v67 = *v101 == (_QWORD)v93;
            v93 = v101;
          }
          while (v67);
        }
        v102 = v101[6];
        v171 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 16))(v102);
        v172 = v103;
        v169 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 32))(v102);
        v170 = v104;
        v173 = (WTF::StringImpl *)WTF::MediaTime::operator+();
        v174 = v105;
        v106 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)&v173, (const WTF::MediaTime *)buf);
        if ((_DWORD)v106 == -1)
        {
          v171 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 16))(v102);
          v172 = v107;
          v169 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 32))(v102);
          v170 = v108;
          v173 = (WTF::StringImpl *)WTF::MediaTime::operator+();
          v174 = v109;
          v110 = (__int128 *)&v173;
          goto LABEL_167;
        }
        goto LABEL_168;
      }
    }
LABEL_166:
    v110 = (__int128 *)WTF::MediaTime::zeroTime(v89);
LABEL_167:
    WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v175, v110, (__int128 *)buf, 0);
LABEL_168:
    v111 = (_QWORD *)*v86;
    if (!*v86)
      goto LABEL_176;
    v112 = v86;
    do
    {
      v106 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)buf, (const WTF::MediaTime *)(v111 + 4));
      v113 = v111 + 1;
      if ((_DWORD)v106 == -1)
      {
        v113 = v111;
        v112 = v111;
      }
      v111 = (_QWORD *)*v113;
    }
    while (*v113);
    if (v86 == v112)
    {
LABEL_176:
      v117 = (__int128 *)WTF::MediaTime::positiveInfiniteTime(v106);
LABEL_177:
      WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v175, &v180, v117, 0);
    }
    else
    {
      v114 = v112[6];
      v173 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v114 + 16))(v114);
      v174 = v115;
      v77 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)&v173, (const WTF::MediaTime *)&v180);
      if ((_DWORD)v77 == 1)
      {
        v173 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v114 + 16))(v114);
        v174 = v116;
        v117 = (__int128 *)&v173;
        goto LABEL_177;
      }
    }
    ++v85;
    v84 = v164[3];
    if (v85 < v84)
      continue;
    break;
  }
  v5 = v165;
  if (HIDWORD(v176))
    WebCore::PlatformTimeRanges::unionWith((uint64_t)v164, (const WebCore::PlatformTimeRanges *)&v175);
LABEL_181:
  if (v160 != v83)
  {
    v118 = v5[36];
    if (v118)
    {
      if (*(_BYTE *)(v118 + 12))
      {
        if (*v14 && v14[16] >= 4u)
        {
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v179);
          WTF::String::String((WTF::String *)&v186, "removed ");
          v168 = (WTF::String *)(v160 - v83);
          WTF::String::number((WTF::String *)(v160 - v83));
          WTF::String::String((WTF::String *)&v184, ", start = ");
          WTF::MediaTime::toJSONString((WTF::MediaTime *)&v178);
          WTF::String::String((WTF::String *)&v182, ", end = ");
          WTF::MediaTime::toJSONString((WTF::MediaTime *)&v177);
          *(_QWORD *)&v180 = v186;
          v173 = v185;
          v171 = v184;
          v169 = v183;
          v190 = v182;
          *(_QWORD *)buf = v187;
          v189 = v181;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v180, (uint64_t *)&v173, (uint64_t *)&v171, (uint64_t *)&v169, (uint64_t *)&v190, (uint64_t *)&v189, &v188);
          if (v188)
          {
            v121 = v181;
            v181 = 0;
            if (v121)
            {
              if (*(_DWORD *)v121 == 2)
                WTF::StringImpl::destroy(v121, v120);
              else
                *(_DWORD *)v121 -= 2;
            }
            v122 = v182;
            v182 = 0;
            if (v122)
            {
              if (*(_DWORD *)v122 == 2)
                WTF::StringImpl::destroy(v122, v120);
              else
                *(_DWORD *)v122 -= 2;
            }
            v123 = v183;
            v183 = 0;
            if (v123)
            {
              if (*(_DWORD *)v123 == 2)
                WTF::StringImpl::destroy(v123, v120);
              else
                *(_DWORD *)v123 -= 2;
            }
            v124 = v184;
            v184 = 0;
            if (v124)
            {
              if (*(_DWORD *)v124 == 2)
                WTF::StringImpl::destroy(v124, v120);
              else
                *(_DWORD *)v124 -= 2;
            }
            v125 = v185;
            v185 = 0;
            if (v125)
            {
              if (*(_DWORD *)v125 == 2)
                WTF::StringImpl::destroy(v125, v120);
              else
                *(_DWORD *)v125 -= 2;
            }
            v126 = v186;
            v186 = 0;
            if (v126)
            {
              if (*(_DWORD *)v126 == 2)
                WTF::StringImpl::destroy(v126, v120);
              else
                *(_DWORD *)v126 -= 2;
            }
            v127 = v187;
            v187 = 0;
            if (v127)
            {
              if (*(_DWORD *)v127 == 2)
                WTF::StringImpl::destroy(v127, v120);
              else
                *(_DWORD *)v127 -= 2;
            }
            v128 = *((_QWORD *)v14 + 4);
            v129 = os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v129)
            {
              WTF::String::utf8();
              v130 = (_QWORD)v180 ? v180 + 16 : 0;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = v130;
              _os_log_impl(&dword_1940B8000, v128, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              v129 = v180;
              *(_QWORD *)&v180 = 0;
              if (v129)
              {
                if (*(_DWORD *)v129 == 1)
                  v129 = WTF::fastFree((WTF *)v129, v78);
                else
                  --*(_DWORD *)v129;
              }
            }
            if (*v14 && v14[16] >= 4u)
            {
              while (1)
              {
                v131 = *v15;
                if ((v131 & 1) != 0)
                  break;
                v132 = __ldaxr(v15);
                if (v132 == v131)
                {
                  if (!__stxr(v131 | 1, v15))
                  {
                    v134 = WTF::Logger::observers((WTF::Logger *)v129);
                    v135 = *(unsigned int *)(v134 + 12);
                    if ((_DWORD)v135)
                    {
                      v136 = *(WTF::String **)v134;
                      v167 = (WTF::String *)(*(_QWORD *)v134 + 8 * v135);
                      do
                      {
                        v137 = *(_QWORD *)v136;
                        *(_DWORD *)buf = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v179);
                        v192 = 0;
                        WTF::String::String((WTF::String *)&v193, "removed ");
                        v194 = 0;
                        WTF::String::number(v168);
                        v196 = 0;
                        WTF::String::String((WTF::String *)&v197, ", start = ");
                        v198 = 1;
                        WTF::MediaTime::toJSONString((WTF::MediaTime *)&v178);
                        v200 = 0;
                        WTF::String::String((WTF::String *)&v201, ", end = ");
                        v202 = 1;
                        WTF::MediaTime::toJSONString((WTF::MediaTime *)&v177);
                        v180 = 0uLL;
                        v138 = WTF::fastMalloc((WTF *)0x70);
                        DWORD2(v180) = 7;
                        *(_QWORD *)&v180 = v138;
                        v139 = HIDWORD(v180);
                        *(_DWORD *)(v138 + 16 * HIDWORD(v180)) = *(_DWORD *)buf;
                        v140 = *(_QWORD *)&buf[8];
                        if (*(_QWORD *)&buf[8])
                          **(_DWORD **)&buf[8] += 2;
                        *(_QWORD *)(v138 + 16 * v139 + 8) = v140;
                        *(_DWORD *)(v138 + 16 * (v139 + 1)) = v192;
                        v141 = v193;
                        if (v193)
                          *(_DWORD *)v193 += 2;
                        *(_QWORD *)(v138 + 16 * (v139 + 1) + 8) = v141;
                        *(_DWORD *)(v138 + 16 * (v139 + 2)) = v194;
                        v142 = v195;
                        if (v195)
                          *(_DWORD *)v195 += 2;
                        *(_QWORD *)(v138 + 16 * (v139 + 2) + 8) = v142;
                        *(_DWORD *)(v138 + 16 * (v139 + 3)) = v196;
                        v143 = v197;
                        if (v197)
                          *(_DWORD *)v197 += 2;
                        *(_QWORD *)(v138 + 16 * (v139 + 3) + 8) = v143;
                        *(_DWORD *)(v138 + 16 * (v139 + 4)) = v198;
                        v144 = v199;
                        if (v199)
                          *(_DWORD *)v199 += 2;
                        *(_QWORD *)(v138 + 16 * (v139 + 4) + 8) = v144;
                        *(_DWORD *)(v138 + 16 * (v139 + 5)) = v200;
                        v145 = v201;
                        if (v201)
                          *(_DWORD *)v201 += 2;
                        *(_QWORD *)(v138 + 16 * (v139 + 5) + 8) = v145;
                        *(_DWORD *)(v138 + 16 * (v139 + 6)) = v202;
                        v146 = v203;
                        if (v203)
                          *(_DWORD *)v203 += 2;
                        *(_QWORD *)(v138 + 16 * (v139 + 6) + 8) = v146;
                        HIDWORD(v180) = v139 + 7;
                        (*(void (**)(uint64_t, char *, uint64_t, __int128 *))(*(_QWORD *)v137 + 16))(v137, &WebCore::LogMedia, 4, &v180);
                        v147 = (WTF *)v180;
                        if (HIDWORD(v180))
                        {
                          v148 = 16 * HIDWORD(v180);
                          v149 = (WTF::StringImpl **)(v180 + 8);
                          do
                          {
                            v150 = *v149;
                            *v149 = 0;
                            if (v150)
                            {
                              if (*(_DWORD *)v150 == 2)
                                WTF::StringImpl::destroy(v150, (WTF::StringImpl *)v78);
                              else
                                *(_DWORD *)v150 -= 2;
                            }
                            v149 += 2;
                            v148 -= 16;
                          }
                          while (v148);
                          v147 = (WTF *)v180;
                        }
                        if (v147)
                        {
                          *(_QWORD *)&v180 = 0;
                          DWORD2(v180) = 0;
                          WTF::fastFree(v147, v78);
                        }
                        v151 = v203;
                        v203 = 0;
                        if (v151)
                        {
                          if (*(_DWORD *)v151 == 2)
                            WTF::StringImpl::destroy(v151, (WTF::StringImpl *)v78);
                          else
                            *(_DWORD *)v151 -= 2;
                        }
                        v152 = v201;
                        v201 = 0;
                        if (v152)
                        {
                          if (*(_DWORD *)v152 == 2)
                            WTF::StringImpl::destroy(v152, (WTF::StringImpl *)v78);
                          else
                            *(_DWORD *)v152 -= 2;
                        }
                        v153 = v199;
                        v199 = 0;
                        if (v153)
                        {
                          if (*(_DWORD *)v153 == 2)
                            WTF::StringImpl::destroy(v153, (WTF::StringImpl *)v78);
                          else
                            *(_DWORD *)v153 -= 2;
                        }
                        v154 = v197;
                        v197 = 0;
                        if (v154)
                        {
                          if (*(_DWORD *)v154 == 2)
                            WTF::StringImpl::destroy(v154, (WTF::StringImpl *)v78);
                          else
                            *(_DWORD *)v154 -= 2;
                        }
                        v155 = v195;
                        v195 = 0;
                        if (v155)
                        {
                          if (*(_DWORD *)v155 == 2)
                            WTF::StringImpl::destroy(v155, (WTF::StringImpl *)v78);
                          else
                            *(_DWORD *)v155 -= 2;
                        }
                        v156 = v193;
                        v193 = 0;
                        if (v156)
                        {
                          if (*(_DWORD *)v156 == 2)
                            WTF::StringImpl::destroy(v156, (WTF::StringImpl *)v78);
                          else
                            *(_DWORD *)v156 -= 2;
                        }
                        v157 = *(WTF::StringImpl **)&buf[8];
                        *(_QWORD *)&buf[8] = 0;
                        if (v157)
                        {
                          if (*(_DWORD *)v157 == 2)
                            WTF::StringImpl::destroy(v157, (WTF::StringImpl *)v78);
                          else
                            *(_DWORD *)v157 -= 2;
                        }
                        v136 = (WTF::String *)((char *)v136 + 8);
                      }
                      while (v136 != v167);
                    }
                    v158 = __ldxr(v15);
                    if (v158 == 1)
                    {
                      if (!__stlxr(0, v15))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v159 = v188;
            v188 = 0;
            if (v159)
            {
              if (*(_DWORD *)v159 == 2)
                WTF::StringImpl::destroy(v159, (WTF::StringImpl *)v78);
              else
                *(_DWORD *)v159 -= 2;
            }
            goto LABEL_290;
          }
          __break(0xC471u);
          goto LABEL_305;
        }
      }
    }
  }
LABEL_290:
  result = v175;
  if (v175)
  {
    v175 = 0;
    LODWORD(v176) = 0;
    return (WTF::StringImpl *)WTF::fastFree(result, v78);
  }
  return result;
}

const char *WebCore::TrackBuffer::logClassName(WebCore::TrackBuffer *this)
{
  return "TrackBuffer";
}

uint64_t WebCore::TrackBuffer::logIdentifier(WebCore::TrackBuffer *this)
{
  return *((_QWORD *)this + 37);
}

uint64_t WebCore::TrackBuffer::logger(WebCore::TrackBuffer *this)
{
  return *((_QWORD *)this + 36);
}

char *WebCore::TrackBuffer::logChannel(WebCore::TrackBuffer *this)
{
  return &WebCore::LogMedia;
}

uint64_t WebCore::TrackBuffer::removeCodedFrames(WebCore::TrackBuffer *this, const WTF::MediaTime *a2, const WTF::MediaTime *a3, const WTF::MediaTime *a4)
{
  uint64_t v8;
  _QWORD *SampleContainingOrAfterPresentationTime;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  int v40;
  int v41;
  int v42;
  BOOL v43;
  int v44;
  char v45;
  int v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  NSObject *v52;
  uint64_t v53;
  char *v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  WTF::Logger *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::Logger *v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  int v74;
  WTF::StringImpl *v75;
  WTF *v76;
  void *v77;
  WTF *v78;
  uint64_t v79;
  _QWORD v80[4];
  WTF *v81;
  uint64_t v82;
  WTF *v83;
  int v84;
  WTF **v85;
  WTF *v86[2];
  WTF::Logger *v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  __int128 buf;
  uint64_t v94;
  WTF::StringImpl *v95;
  int v96;
  WTF::StringImpl *v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)this + 7);
  WebCore::TrackBuffer::removeCodedFrames(WTF::MediaTime const&,WTF::MediaTime const&,WTF::MediaTime const&)::$_0::operator()(this, a2);
  WebCore::TrackBuffer::removeCodedFrames(WTF::MediaTime const&,WTF::MediaTime const&,WTF::MediaTime const&)::$_0::operator()(this, a3);
  SampleContainingOrAfterPresentationTime = WebCore::PresentationOrderSampleMap::findSampleContainingOrAfterPresentationTime((WebCore::TrackBuffer *)((char *)this + 32), a2);
  v11 = (_QWORD *)((char *)this + 40);
  v10 = (_QWORD *)*((_QWORD *)this + 5);
  if (v10)
  {
    do
    {
      v12 = WTF::MediaTime::compare((WTF::MediaTime *)(v10 + 4), a3);
      v13 = v10 + 1;
      if (v12 != -1)
      {
        v13 = v10;
        v11 = v10;
      }
      v10 = (_QWORD *)*v13;
    }
    while (*v13);
  }
  if (v11 == SampleContainingOrAfterPresentationTime)
  {
    v35 = *((_QWORD *)this + 7);
    return v8 - v35;
  }
  *(_QWORD *)&buf = WebCore::decodeTimeComparator;
  v14 = std::__minmax_element_impl[abi:sn180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__tree_node<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,void *> *,long>>,std::__map_iterator<std::__tree_iterator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__tree_node<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,void *> *,long>>,std::__identity,BOOL (*)(std::pair<WTF::MediaTime const,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>> const&,std::pair<WTF::MediaTime const,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>> const&)>(SampleContainingOrAfterPresentationTime, v11, (uint64_t (**)(_QWORD *, uint64_t))&buf)[6];
  v16 = *(_QWORD *)(v15 + 48);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  v19 = v18;
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  *(_QWORD *)&buf = v17;
  *((_QWORD *)&buf + 1) = v19;
  v94 = v20;
  v95 = v21;
  v22 = std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::find<std::pair<WTF::MediaTime,WTF::MediaTime>>((uint64_t)this + 8, (WTF::MediaTime *)&buf);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  v25 = v24;
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  *(_QWORD *)&buf = v23;
  *((_QWORD *)&buf + 1) = v25;
  v94 = v26;
  v95 = v27;
  v28 = std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::find<std::pair<WTF::MediaTime,WTF::MediaTime>>((uint64_t)this + 8, (WTF::MediaTime *)&buf);
  v29 = (_QWORD *)((char *)this + 16);
  if ((_QWORD *)((char *)this + 16) == v28)
  {
    v29 = v28;
  }
  else
  {
    v30 = (_QWORD *)v28[1];
    if (v30)
    {
      do
      {
        v31 = v30;
        v30 = (_QWORD *)*v30;
      }
      while (v30);
    }
    else
    {
      do
      {
        v31 = (_QWORD *)v28[2];
        v32 = *v31 == (_QWORD)v28;
        v28 = v31;
      }
      while (!v32);
    }
    if (v31 != v29)
    {
      while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v31[8] + 104))(v31[8]) & 1) == 0)
      {
        v33 = (_QWORD *)v31[1];
        if (v33)
        {
          do
          {
            v34 = v33;
            v33 = (_QWORD *)*v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            v34 = (_QWORD *)v31[2];
            v32 = *v34 == (_QWORD)v31;
            v31 = v34;
          }
          while (!v32);
        }
        v31 = v34;
        if (v34 == v29)
          goto LABEL_24;
      }
      v29 = v31;
    }
  }
LABEL_24:
  v86[0] = 0;
  v86[1] = 0;
  v85 = v86;
  std::map<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,WTF::FastAllocator<std::pair<std::pair<WTF::MediaTime,WTF::MediaTime> const,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::insert[abi:sn180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__tree_node<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,void *> *,long>>>(&v85, v22, v29);
  WebCore::TrackBuffer::removeSamples(this, &v85, (uint64_t)"removeCodedFrames", (unsigned int *)&v83);
  if ((*((_BYTE *)this + 188) & 1) == 0
    || WTF::MediaTime::compare(a4, (WebCore::TrackBuffer *)((char *)this + 176)) != -1)
  {
LABEL_116:
    WebCore::PlatformTimeRanges::invert((WebCore::PlatformTimeRanges *)&v83);
    WebCore::PlatformTimeRanges::intersectWith((WebCore::TrackBuffer *)((char *)this + 96), (__int128 **)&v83);
    v35 = *((_QWORD *)this + 7);
    v78 = v83;
    if (v83)
    {
      v83 = 0;
      v84 = 0;
      WTF::fastFree(v78, v77);
    }
    std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy((uint64_t)&v85, v86[0]);
    return v8 - v35;
  }
  v81 = 0;
  v82 = 0;
  WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v81, (__int128 *)a4, (__int128 *)this + 11, 0);
  WebCore::PlatformTimeRanges::intersectWith((WTF *)&v81, (__int128 **)&v83);
  if (!HIDWORD(v82)
    || (*((_BYTE *)this + 310) = 1, (v37 = *((_QWORD *)this + 36)) == 0)
    || (v38 = *((_QWORD *)this + 37),
        v80[0] = "TrackBuffer",
        v80[1] = 12,
        v80[2] = "removeCodedFrames",
        v80[3] = v38,
        !*(_BYTE *)(v37 + 12))
    || !WebCore::LogMedia
    || byte_1ECE7C490 < 4u)
  {
LABEL_114:
    v76 = v81;
    if (v81)
    {
      v81 = 0;
      LODWORD(v82) = 0;
      WTF::fastFree(v76, v36);
    }
    goto LABEL_116;
  }
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v80);
  WTF::String::String((WTF::String *)&v90, "the range in removeCodedFrames() includes already enqueued samples, reenqueueing from ");
  result = WTF::MediaTime::toJSONString(a4);
  if (v91)
  {
    v40 = *((_DWORD *)v91 + 1);
    if (v90)
      goto LABEL_33;
LABEL_126:
    v41 = 0;
    if (v89)
      goto LABEL_34;
LABEL_127:
    v42 = 0;
    goto LABEL_35;
  }
  v40 = 0;
  if (!v90)
    goto LABEL_126;
LABEL_33:
  v41 = *((_DWORD *)v90 + 1);
  if (!v89)
    goto LABEL_127;
LABEL_34:
  v42 = *((_DWORD *)v89 + 1);
LABEL_35:
  if ((v42 | v41) < 0
    || ((v43 = __OFADD__(v41, v42), v44 = v41 + v42, !v43) ? (v45 = 0) : (v45 = 1),
        v40 < 0 || (v45 & 1) != 0 || (result = (v40 + v44), __OFADD__(v40, v44))))
  {
    v92 = 0;
    goto LABEL_131;
  }
  if (v91 && (*((_BYTE *)v91 + 16) & 4) == 0)
  {
    v46 = 0;
    goto LABEL_49;
  }
  if (v90)
  {
    v47 = *((_DWORD *)v90 + 4);
    v46 = (v47 >> 2) & 1;
    if (v89 && (v47 & 4) != 0)
      goto LABEL_48;
  }
  else
  {
    if (v89)
    {
LABEL_48:
      v46 = (*((unsigned __int8 *)v89 + 16) >> 2) & 1;
      goto LABEL_49;
    }
    v46 = 1;
  }
LABEL_49:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v46, v91, (uint64_t)v90, (uint64_t)v89, &v92);
  if (v92)
  {
    v49 = v89;
    v89 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v48);
      else
        *(_DWORD *)v49 -= 2;
    }
    v50 = v90;
    v90 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v48);
      else
        *(_DWORD *)v50 -= 2;
    }
    v51 = v91;
    v91 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v48);
      else
        *(_DWORD *)v51 -= 2;
    }
    v52 = qword_1ECE7C4A0;
    v53 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v53)
    {
      WTF::String::utf8();
      v54 = v87 ? (char *)v87 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v54;
      _os_log_impl(&dword_1940B8000, v52, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v53 = (uint64_t)v87;
      v87 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 1)
          v53 = WTF::fastFree((WTF *)v53, v36);
        else
          --*(_DWORD *)v53;
      }
    }
    if (WebCore::LogMedia && byte_1ECE7C490 >= 4u)
    {
      v55 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v56 = *v55;
        if ((v56 & 1) != 0)
          break;
        v57 = __ldaxr(v55);
        if (v57 == v56)
        {
          if (!__stxr(v56 | 1, v55))
          {
            v58 = WTF::Logger::observers((WTF::Logger *)v53);
            v59 = *(unsigned int *)(v58 + 12);
            if ((_DWORD)v59)
            {
              v60 = *(uint64_t **)v58;
              v79 = *(_QWORD *)v58 + 8 * v59;
              do
              {
                v61 = *v60;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v80);
                LODWORD(v94) = 0;
                WTF::String::String((WTF::String *)&v95, "the range in removeCodedFrames() includes already enqueued samples, reenqueueing from ");
                v96 = 1;
                WTF::MediaTime::toJSONString(a4);
                v87 = 0;
                v88 = 0;
                v62 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                LODWORD(v88) = 3;
                v87 = v62;
                v63 = HIDWORD(v88);
                *((_DWORD *)v62 + 4 * HIDWORD(v88)) = buf;
                v64 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v62 + 2 * v63 + 1) = v64;
                *((_DWORD *)v62 + 4 * (v63 + 1)) = v94;
                v65 = v95;
                if (v95)
                  *(_DWORD *)v95 += 2;
                *((_QWORD *)v62 + 2 * (v63 + 1) + 1) = v65;
                *((_DWORD *)v62 + 4 * (v63 + 2)) = v96;
                v66 = v97;
                if (v97)
                  *(_DWORD *)v97 += 2;
                *((_QWORD *)v62 + 2 * (v63 + 2) + 1) = v66;
                HIDWORD(v88) = v63 + 3;
                (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v61 + 16))(v61, &WebCore::LogMedia, 4, &v87);
                v67 = v87;
                if (HIDWORD(v88))
                {
                  v68 = 16 * HIDWORD(v88);
                  v69 = (WTF::StringImpl **)((char *)v87 + 8);
                  do
                  {
                    v70 = *v69;
                    *v69 = 0;
                    if (v70)
                    {
                      if (*(_DWORD *)v70 == 2)
                        WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v36);
                      else
                        *(_DWORD *)v70 -= 2;
                    }
                    v69 += 2;
                    v68 -= 16;
                  }
                  while (v68);
                  v67 = v87;
                }
                if (v67)
                {
                  v87 = 0;
                  LODWORD(v88) = 0;
                  WTF::fastFree(v67, v36);
                }
                v71 = v97;
                v97 = 0;
                if (v71)
                {
                  if (*(_DWORD *)v71 == 2)
                    WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v36);
                  else
                    *(_DWORD *)v71 -= 2;
                }
                v72 = v95;
                v95 = 0;
                if (v72)
                {
                  if (*(_DWORD *)v72 == 2)
                    WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v36);
                  else
                    *(_DWORD *)v72 -= 2;
                }
                v73 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v73)
                {
                  if (*(_DWORD *)v73 == 2)
                    WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v36);
                  else
                    *(_DWORD *)v73 -= 2;
                }
                ++v60;
              }
              while (v60 != (uint64_t *)v79);
            }
            v74 = __ldxr(v55);
            if (v74 == 1)
            {
              if (!__stlxr(0, v55))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v75 = v92;
    v92 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v36);
      else
        *(_DWORD *)v75 -= 2;
    }
    goto LABEL_114;
  }
LABEL_131:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::TrackBuffer::removeCodedFrames(WTF::MediaTime const&,WTF::MediaTime const&,WTF::MediaTime const&)::$_0::operator()(_QWORD *a1, const WTF::MediaTime *a2)
{
  uint64_t result;
  WebCore::SampleMap *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::MediaSample *v15;
  WebCore::MediaSample *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  NSObject *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  WTF::Logger *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::Logger *v47;
  uint64_t v48;
  WTF::StringImpl **v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  WebCore::MediaSample *v82;
  WebCore::MediaSample *v83;
  __int128 v84;
  uint64_t v85;
  int v86;
  char v87;
  WTF::Logger *v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  uint8_t buf[16];
  int v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107;
  int v108;
  WTF::StringImpl *v109;
  int v110;
  WTF::StringImpl *v111;
  int v112;
  WTF::StringImpl *v113;
  int v114;
  WTF::StringImpl *v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)WebCore::PresentationOrderSampleMap::findSampleContainingPresentationTime((WebCore::PresentationOrderSampleMap *)(a1 + 4), a2);
  if (a1 + 5 != (_QWORD *)result)
  {
    v4 = (WebCore::SampleMap *)(a1 + 1);
    v5 = *(unsigned int **)(result + 48);
    v6 = v5 + 2;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 80))(v5);
    if ((_DWORD)result)
    {
      v85 = 1;
      v86 = 1000000;
      v87 = 1;
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
      v9 = v8;
      v10 = *MEMORY[0x1E0CC0058];
      while (1)
      {
        *(_QWORD *)buf = WTF::MediaTime::toTimeScale();
        *(_QWORD *)&buf[8] = v11;
        v88 = (WTF::Logger *)WTF::MediaTime::operator-();
        v89 = v12;
        v78 = (const char *)WTF::abs();
        v79 = v13;
        if (WTF::MediaTime::compare((WTF::MediaTime *)&v78, (const WTF::MediaTime *)&v85) == -1
          || v9 >= v10)
        {
          break;
        }
        if (2 * v9 > v10 || v9 < 0)
          v9 = v10;
        else
          v9 *= 2;
      }
      v84 = *(_OWORD *)buf;
      (*(void (**)(WebCore::MediaSample **__return_ptr, unsigned int *, __int128 *, _QWORD))(*(_QWORD *)v5 + 88))(&v82, v5, &v84, 0);
      v15 = v82;
      if (v82)
      {
        v16 = v83;
        if (v83)
        {
          v17 = a1[36];
          if (v17)
          {
            v18 = a1[37];
            v78 = "TrackBuffer";
            v79 = 12;
            v80 = "operator()";
            v81 = v18;
            if (*(_BYTE *)(v17 + 12))
            {
              if (WebCore::LogMedia && byte_1ECE7C490 >= 4u)
              {
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v78);
                WTF::String::String((WTF::String *)&v95, "splitting sample ");
                WebCore::MediaSample::toJSONString((WebCore::MediaSample *)v5);
                WTF::String::String((WTF::String *)&v93, " into ");
                WebCore::MediaSample::toJSONString(v15);
                WTF::String::String((WTF::String *)&v91, " and ");
                WebCore::MediaSample::toJSONString(v16);
                v88 = v95;
                v102 = v94;
                *(_QWORD *)buf = v96;
                v100 = v92;
                v101 = v93;
                v98 = v90;
                v99 = v91;
                result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v88, (uint64_t *)&v102, (uint64_t *)&v101, (uint64_t *)&v100, (uint64_t *)&v99, (uint64_t *)&v98, &v97);
                if (!v97)
                {
                  __break(0xC471u);
                  return result;
                }
                v20 = v90;
                v90 = 0;
                if (v20)
                {
                  if (*(_DWORD *)v20 == 2)
                    WTF::StringImpl::destroy(v20, v19);
                  else
                    *(_DWORD *)v20 -= 2;
                }
                v21 = v91;
                v91 = 0;
                if (v21)
                {
                  if (*(_DWORD *)v21 == 2)
                    WTF::StringImpl::destroy(v21, v19);
                  else
                    *(_DWORD *)v21 -= 2;
                }
                v22 = v92;
                v92 = 0;
                if (v22)
                {
                  if (*(_DWORD *)v22 == 2)
                    WTF::StringImpl::destroy(v22, v19);
                  else
                    *(_DWORD *)v22 -= 2;
                }
                v23 = v93;
                v93 = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2)
                    WTF::StringImpl::destroy(v23, v19);
                  else
                    *(_DWORD *)v23 -= 2;
                }
                v24 = v94;
                v94 = 0;
                if (v24)
                {
                  if (*(_DWORD *)v24 == 2)
                    WTF::StringImpl::destroy(v24, v19);
                  else
                    *(_DWORD *)v24 -= 2;
                }
                v25 = v95;
                v95 = 0;
                if (v25)
                {
                  if (*(_DWORD *)v25 == 2)
                    WTF::StringImpl::destroy(v25, v19);
                  else
                    *(_DWORD *)v25 -= 2;
                }
                v26 = v96;
                v96 = 0;
                if (v26)
                {
                  if (*(_DWORD *)v26 == 2)
                    WTF::StringImpl::destroy(v26, v19);
                  else
                    *(_DWORD *)v26 -= 2;
                }
                v27 = qword_1ECE7C4A0;
                v28 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v28)
                {
                  WTF::String::utf8();
                  v30 = v88 ? (char *)v88 + 16 : 0;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = v30;
                  _os_log_impl(&dword_1940B8000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                  v28 = (uint64_t)v88;
                  v88 = 0;
                  if (v28)
                  {
                    if (*(_DWORD *)v28 == 1)
                      v28 = WTF::fastFree((WTF *)v28, v29);
                    else
                      --*(_DWORD *)v28;
                  }
                }
                if (WebCore::LogMedia && byte_1ECE7C490 >= 4u)
                {
                  v31 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                  while (1)
                  {
                    v32 = *v31;
                    if ((v32 & 1) != 0)
                      break;
                    v33 = __ldaxr(v31);
                    if (v33 == v32)
                    {
                      if (!__stxr(v32 | 1, v31))
                      {
                        v34 = WTF::Logger::observers((WTF::Logger *)v28);
                        v35 = *(unsigned int *)(v34 + 12);
                        if ((_DWORD)v35)
                        {
                          v36 = *(uint64_t **)v34;
                          v77 = *(_QWORD *)v34 + 8 * v35;
                          do
                          {
                            v37 = *v36;
                            *(_DWORD *)buf = 0;
                            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v78);
                            v104 = 0;
                            WTF::String::String((WTF::String *)&v105, "splitting sample ");
                            v106 = 1;
                            WebCore::MediaSample::toJSONString((WebCore::MediaSample *)v5);
                            v108 = 0;
                            WTF::String::String((WTF::String *)&v109, " into ");
                            v110 = 1;
                            WebCore::MediaSample::toJSONString(v15);
                            v112 = 0;
                            WTF::String::String((WTF::String *)&v113, " and ");
                            v114 = 1;
                            WebCore::MediaSample::toJSONString(v16);
                            v88 = 0;
                            v89 = 0;
                            v38 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                            LODWORD(v89) = 7;
                            v88 = v38;
                            v39 = HIDWORD(v89);
                            *((_DWORD *)v38 + 4 * HIDWORD(v89)) = *(_DWORD *)buf;
                            v40 = *(_QWORD *)&buf[8];
                            if (*(_QWORD *)&buf[8])
                              **(_DWORD **)&buf[8] += 2;
                            *((_QWORD *)v38 + 2 * v39 + 1) = v40;
                            *((_DWORD *)v38 + 4 * (v39 + 1)) = v104;
                            v41 = v105;
                            if (v105)
                              *(_DWORD *)v105 += 2;
                            *((_QWORD *)v38 + 2 * (v39 + 1) + 1) = v41;
                            *((_DWORD *)v38 + 4 * (v39 + 2)) = v106;
                            v42 = v107;
                            if (v107)
                              *(_DWORD *)v107 += 2;
                            *((_QWORD *)v38 + 2 * (v39 + 2) + 1) = v42;
                            *((_DWORD *)v38 + 4 * (v39 + 3)) = v108;
                            v43 = v109;
                            if (v109)
                              *(_DWORD *)v109 += 2;
                            *((_QWORD *)v38 + 2 * (v39 + 3) + 1) = v43;
                            *((_DWORD *)v38 + 4 * (v39 + 4)) = v110;
                            v44 = v111;
                            if (v111)
                              *(_DWORD *)v111 += 2;
                            *((_QWORD *)v38 + 2 * (v39 + 4) + 1) = v44;
                            *((_DWORD *)v38 + 4 * (v39 + 5)) = v112;
                            v45 = v113;
                            if (v113)
                              *(_DWORD *)v113 += 2;
                            *((_QWORD *)v38 + 2 * (v39 + 5) + 1) = v45;
                            *((_DWORD *)v38 + 4 * (v39 + 6)) = v114;
                            v46 = v115;
                            if (v115)
                              *(_DWORD *)v115 += 2;
                            *((_QWORD *)v38 + 2 * (v39 + 6) + 1) = v46;
                            HIDWORD(v89) = v39 + 7;
                            (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v37 + 16))(v37, &WebCore::LogMedia, 4, &v88);
                            v47 = v88;
                            if (HIDWORD(v89))
                            {
                              v48 = 16 * HIDWORD(v89);
                              v49 = (WTF::StringImpl **)((char *)v88 + 8);
                              do
                              {
                                v50 = *v49;
                                *v49 = 0;
                                if (v50)
                                {
                                  if (*(_DWORD *)v50 == 2)
                                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v29);
                                  else
                                    *(_DWORD *)v50 -= 2;
                                }
                                v49 += 2;
                                v48 -= 16;
                              }
                              while (v48);
                              v47 = v88;
                            }
                            if (v47)
                            {
                              v88 = 0;
                              LODWORD(v89) = 0;
                              WTF::fastFree(v47, v29);
                            }
                            v51 = v115;
                            v115 = 0;
                            if (v51)
                            {
                              if (*(_DWORD *)v51 == 2)
                                WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v29);
                              else
                                *(_DWORD *)v51 -= 2;
                            }
                            v52 = v113;
                            v113 = 0;
                            if (v52)
                            {
                              if (*(_DWORD *)v52 == 2)
                                WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v29);
                              else
                                *(_DWORD *)v52 -= 2;
                            }
                            v53 = v111;
                            v111 = 0;
                            if (v53)
                            {
                              if (*(_DWORD *)v53 == 2)
                                WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v29);
                              else
                                *(_DWORD *)v53 -= 2;
                            }
                            v54 = v109;
                            v109 = 0;
                            if (v54)
                            {
                              if (*(_DWORD *)v54 == 2)
                                WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v29);
                              else
                                *(_DWORD *)v54 -= 2;
                            }
                            v55 = v107;
                            v107 = 0;
                            if (v55)
                            {
                              if (*(_DWORD *)v55 == 2)
                                WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v29);
                              else
                                *(_DWORD *)v55 -= 2;
                            }
                            v56 = v105;
                            v105 = 0;
                            if (v56)
                            {
                              if (*(_DWORD *)v56 == 2)
                                WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v29);
                              else
                                *(_DWORD *)v56 -= 2;
                            }
                            v57 = *(WTF::StringImpl **)&buf[8];
                            *(_QWORD *)&buf[8] = 0;
                            if (v57)
                            {
                              if (*(_DWORD *)v57 == 2)
                                WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v29);
                              else
                                *(_DWORD *)v57 -= 2;
                            }
                            ++v36;
                          }
                          while (v36 != (uint64_t *)v77);
                        }
                        v58 = __ldxr(v31);
                        if (v58 == 1)
                        {
                          if (!__stlxr(0, v31))
                            break;
                        }
                        else
                        {
                          __clrex();
                        }
                        WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                        break;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                  }
                }
                v59 = v97;
                v97 = 0;
                if (v59)
                {
                  if (*(_DWORD *)v59 == 2)
                    WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v59 -= 2;
                }
              }
            }
          }
          WebCore::SampleMap::removeSample(v4, (const WebCore::MediaSample *)v5);
          *(_QWORD *)buf = v82;
          v82 = 0;
          WebCore::SampleMap::addSample((uint64_t)v4, (unsigned int **)buf);
          v60 = *(unsigned int **)buf;
          *(_QWORD *)buf = 0;
          if (v60)
          {
            v61 = v60 + 2;
            do
            {
              v62 = __ldaxr(v61);
              v63 = v62 - 1;
            }
            while (__stlxr(v63, v61));
            if (!v63)
            {
              atomic_store(1u, v60 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 8))(v60);
            }
          }
          *(_QWORD *)buf = v83;
          v83 = 0;
          WebCore::SampleMap::addSample((uint64_t)v4, (unsigned int **)buf);
          v64 = *(unsigned int **)buf;
          *(_QWORD *)buf = 0;
          if (v64)
          {
            v65 = v64 + 2;
            do
            {
              v66 = __ldaxr(v65);
              v67 = v66 - 1;
            }
            while (__stlxr(v67, v65));
            if (!v67)
            {
              atomic_store(1u, v64 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 8))(v64);
            }
          }
        }
      }
      v68 = (unsigned int *)v83;
      v83 = 0;
      if (v68)
      {
        v69 = v68 + 2;
        do
        {
          v70 = __ldaxr(v69);
          v71 = v70 - 1;
        }
        while (__stlxr(v71, v69));
        if (!v71)
        {
          atomic_store(1u, v68 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v68 + 8))(v68);
        }
      }
      result = (uint64_t)v82;
      v82 = 0;
      if (result)
      {
        v72 = (unsigned int *)(result + 8);
        do
        {
          v73 = __ldaxr(v72);
          v74 = v73 - 1;
        }
        while (__stlxr(v74, v72));
        if (!v74)
        {
          atomic_store(1u, (unsigned int *)(result + 8));
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
    }
    do
    {
      v75 = __ldaxr(v6);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, v6));
    if (!v76)
    {
      atomic_store(1u, v5 + 2);
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return result;
}

BOOL WebCore::decodeTimeComparator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v7[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  v7[1] = v3;
  v6[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 24))(*(_QWORD *)(a2 + 16));
  v6[1] = v4;
  return WTF::MediaTime::compare((WTF::MediaTime *)v7, (const WTF::MediaTime *)v6) == -1;
}

uint64_t WebCore::TrackBuffer::codedFramesIntervalSize(WebCore::TrackBuffer *this, const WTF::MediaTime *a2, const WTF::MediaTime *a3)
{
  _QWORD *SampleContainingOrAfterPresentationTime;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL (*v16)(uint64_t, uint64_t);
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  BOOL (*v22)(uint64_t, uint64_t);
  WTF *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  _QWORD *v32;
  _QWORD *v33;
  WTF **v34;
  uint64_t v35;
  WTF *v36;
  WTF **v37;
  BOOL (*v39)(uint64_t, uint64_t);
  WTF *v40;
  uint64_t v41;
  uint64_t v42;

  SampleContainingOrAfterPresentationTime = WebCore::PresentationOrderSampleMap::findSampleContainingOrAfterPresentationTime((WebCore::TrackBuffer *)((char *)this + 32), a2);
  v8 = (_QWORD *)((char *)this + 40);
  v7 = (_QWORD *)*((_QWORD *)this + 5);
  if (v7)
  {
    do
    {
      v9 = WTF::MediaTime::compare((WTF::MediaTime *)(v7 + 4), a3);
      v10 = v7 + 1;
      if (v9 != -1)
      {
        v10 = v7;
        v8 = v7;
      }
      v7 = (_QWORD *)*v10;
    }
    while (*v10);
  }
  if (v8 == SampleContainingOrAfterPresentationTime)
    return 0;
  v11 = WebCore::TrackBuffer::codedFramesIntervalSize(WTF::MediaTime const&,WTF::MediaTime const&)::$_0::operator()((uint64_t)this, a2, 1);
  v12 = -WebCore::TrackBuffer::codedFramesIntervalSize(WTF::MediaTime const&,WTF::MediaTime const&)::$_0::operator()((uint64_t)this, a3, 0)- v11;
  v39 = WebCore::decodeTimeComparator;
  v13 = std::__minmax_element_impl[abi:sn180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__tree_node<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,void *> *,long>>,std::__map_iterator<std::__tree_iterator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__tree_node<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,void *> *,long>>,std::__identity,BOOL (*)(std::pair<WTF::MediaTime const,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>> const&,std::pair<WTF::MediaTime const,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>> const&)>(SampleContainingOrAfterPresentationTime, v8, (uint64_t (**)(_QWORD *, uint64_t))&v39)[6];
  v15 = *(_QWORD *)(v14 + 48);
  v16 = (BOOL (*)(uint64_t, uint64_t))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  v18 = v17;
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  v39 = v16;
  v40 = v18;
  v41 = v19;
  v42 = v20;
  v21 = std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::find<std::pair<WTF::MediaTime,WTF::MediaTime>>((uint64_t)this + 8, (WTF::MediaTime *)&v39);
  v22 = (BOOL (*)(uint64_t, uint64_t))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  v24 = v23;
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
  v39 = v22;
  v40 = v24;
  v41 = v25;
  v42 = v26;
  v27 = std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::find<std::pair<WTF::MediaTime,WTF::MediaTime>>((uint64_t)this + 8, (WTF::MediaTime *)&v39);
  v28 = (_QWORD *)((char *)this + 16);
  if (v28 == v27)
  {
    v28 = v27;
  }
  else
  {
    v29 = (_QWORD *)v27[1];
    if (v29)
    {
      do
      {
        v30 = v29;
        v29 = (_QWORD *)*v29;
      }
      while (v29);
    }
    else
    {
      do
      {
        v30 = (_QWORD *)v27[2];
        v31 = *v30 == (_QWORD)v27;
        v27 = v30;
      }
      while (!v31);
    }
    if (v30 != v28)
    {
      while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v30[8] + 104))(v30[8]) & 1) == 0)
      {
        v32 = (_QWORD *)v30[1];
        if (v32)
        {
          do
          {
            v33 = v32;
            v32 = (_QWORD *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            v33 = (_QWORD *)v30[2];
            v31 = *v33 == (_QWORD)v30;
            v30 = v33;
          }
          while (!v31);
        }
        v30 = v33;
        if (v33 == v28)
          goto LABEL_24;
      }
      v28 = v30;
    }
  }
LABEL_24:
  v40 = 0;
  v41 = 0;
  v39 = (BOOL (*)(uint64_t, uint64_t))&v40;
  std::map<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,WTF::FastAllocator<std::pair<std::pair<WTF::MediaTime,WTF::MediaTime> const,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::insert[abi:sn180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__tree_node<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,void *> *,long>>>(&v39, v21, v28);
  v34 = (WTF **)v39;
  if ((char *)v39 != (char *)&v40)
  {
    do
    {
      v35 = (*(uint64_t (**)(WTF *))(*(_QWORD *)v34[8] + 48))(v34[8]);
      v36 = v34[1];
      if (v36)
      {
        do
        {
          v37 = (WTF **)v36;
          v36 = *(WTF **)v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (WTF **)v34[2];
          v31 = *v37 == (WTF *)v34;
          v34 = v37;
        }
        while (!v31);
      }
      v12 += v35;
      v34 = v37;
    }
    while (v37 != &v40);
  }
  std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy((uint64_t)&v39, v40);
  return v12;
}

uint64_t WebCore::TrackBuffer::codedFramesIntervalSize(WTF::MediaTime const&,WTF::MediaTime const&)::$_0::operator()(uint64_t a1, const WTF::MediaTime *a2, int a3)
{
  char *SampleContainingPresentationTime;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  _QWORD v36[2];

  SampleContainingPresentationTime = WebCore::PresentationOrderSampleMap::findSampleContainingPresentationTime((WebCore::PresentationOrderSampleMap *)(a1 + 32), a2);
  if ((char *)(a1 + 40) == SampleContainingPresentationTime)
    return 0;
  v6 = (unsigned int *)*((_QWORD *)SampleContainingPresentationTime + 6);
  v7 = v6 + 2;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v6 + 80))(v6))
  {
    v29 = 1;
    v30 = 1000000;
    v31 = 1;
    (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    v10 = v9;
    v11 = *MEMORY[0x1E0CC0058];
    while (1)
    {
      v36[0] = WTF::MediaTime::toTimeScale();
      v36[1] = v12;
      v32 = WTF::MediaTime::operator-();
      v33 = v13;
      v34 = WTF::abs();
      v35 = v14;
      if (WTF::MediaTime::compare((WTF::MediaTime *)&v34, (const WTF::MediaTime *)&v29) == -1
        || v10 >= v11)
      {
        break;
      }
      if (2 * v10 > v11 || v10 < 0)
        v10 = v11;
      else
        v10 *= 2;
    }
    (*(void (**)(uint64_t *__return_ptr, unsigned int *, _QWORD *, _QWORD))(*(_QWORD *)v6 + 88))(&v34, v6, v36, 0);
    if (v34 && v35)
    {
      if (a3)
        v17 = v34;
      else
        v17 = (uint64_t)v35;
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17);
    }
    else
    {
      v16 = 0;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      v19 = v18 + 2;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v18 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
      }
    }
    v22 = (unsigned int *)v34;
    v34 = 0;
    if (v22)
    {
      v23 = v22 + 2;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v22 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
      }
    }
  }
  else
  {
    v16 = 0;
  }
  do
  {
    v26 = __ldaxr(v7);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v7));
  if (!v27)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  return v16;
}

void WebCore::TrackPrivateBase::trackUID(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

uint64_t WebCore::TrackPrivateBase::defaultEnabled(WebCore::TrackPrivateBase *this)
{
  return 0;
}

BOOL WebCore::TrackPrivateBase::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _BOOL8 v7;
  int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned __int16 v14;
  unsigned __int8 v15;
  unsigned int v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _QWORD v22[2];
  _QWORD v23[2];
  WTF::StringImpl *v24;
  unsigned __int8 v25;
  WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  if (v4 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2))
    return 0;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a1 + 56))(&v31, a1);
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a2 + 56))(&v30, a2);
  v6 = v30;
  if (v31 == v30)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a1 + 64))(&v29, a1);
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a2 + 64))(&v28, a2);
    if (v29 != v28
      || (v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1),
          v8 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2)))
    {
      v7 = 0;
LABEL_12:
      v10 = v28;
      v28 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v5);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = v29;
      v29 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v5);
        else
          *(_DWORD *)v11 -= 2;
      }
      v6 = v30;
      goto LABEL_19;
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&v26, a1);
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a2 + 80))(&v24, a2);
    v9 = v25;
    if (v27 && v25)
    {
      if (v26 != v24)
      {
LABEL_33:
        v7 = 0;
LABEL_38:
        v9 = v25;
LABEL_39:
        if (v9)
        {
          v20 = v24;
          v24 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v5);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
        if (v27)
        {
          v21 = v26;
          v26 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v5);
            else
              *(_DWORD *)v21 -= 2;
          }
        }
        goto LABEL_12;
      }
    }
    else if ((v27 != 0) != (v25 != 0))
    {
      v7 = 0;
      goto LABEL_39;
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    v15 = v14;
    v16 = v14;
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
    if (v16 < 0x100 || v17 < 0x100u)
    {
      if (v16 > 0xFF != v17 > 0xFFu)
        goto LABEL_33;
    }
    else if (v15 != v17)
    {
      goto LABEL_33;
    }
    v23[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    v23[1] = v18;
    v22[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
    v22[1] = v19;
    v7 = WTF::MediaTime::compare((WTF::MediaTime *)v23, (const WTF::MediaTime *)v22) == 0;
    goto LABEL_38;
  }
  v7 = 0;
LABEL_19:
  v30 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v12 = v31;
  v31 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v5);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v7;
}

unsigned int *WebCore::TrackPrivateBase::notifyClients(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int *result;
  void *v9;
  int v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  WTF *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  WTF *v27;
  uint64_t v28;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v4 + 8) = 1;
  v5 = (unsigned int *)(v4 + 8);
  *(_QWORD *)v4 = &off_1E34100D0;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)(v4 + 16) = v6;
  v27 = 0;
  v28 = 0;
  v7 = (unsigned __int8 *)(a1 + 12);
  LODWORD(v6) = __ldaxr((unsigned __int8 *)(a1 + 12));
  if ((_DWORD)v6)
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 12);
LABEL_5:
  result = (unsigned int *)WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)&v27, (_DWORD *)(a1 + 16));
  v10 = __ldxr(v7);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v7))
LABEL_9:
    result = (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 12));
  v11 = v27;
  if (HIDWORD(v28))
  {
    v12 = (WTF *)((char *)v27 + 24 * HIDWORD(v28));
    do
    {
      v13 = *(_QWORD *)v11;
      if (*(_QWORD *)v11)
      {
        v14 = *((_QWORD *)v11 + 1);
        *((_QWORD *)v11 + 1) = 0;
        do
          v15 = __ldaxr(v5);
        while (__stlxr(v15 + 1, v5));
        v16 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v16 = &off_1E34100F8;
        *((_QWORD *)v16 + 1) = v14;
        *((_QWORD *)v16 + 2) = v4;
        v26 = v16;
        (*(void (**)(_QWORD, unsigned int **))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), &v26);
        result = v26;
        v26 = 0;
        if (result)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
      v11 = (WTF *)((char *)v11 + 24);
    }
    while (v11 != v12);
    v11 = v27;
    if (HIDWORD(v28))
    {
      v17 = (WTF *)((char *)v27 + 24 * HIDWORD(v28));
      do
      {
        result = (unsigned int *)*((_QWORD *)v11 + 1);
        *((_QWORD *)v11 + 1) = 0;
        if (result)
        {
          do
          {
            v18 = __ldaxr(result);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, result));
          if (!v19)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
          }
        }
        v20 = *(_QWORD *)v11;
        *(_QWORD *)v11 = 0;
        if (v20)
        {
          do
          {
            v21 = __ldaxr((unsigned int *)v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, (unsigned int *)v20));
          if (!v22)
          {
            atomic_store(1u, (unsigned int *)v20);
            v23 = *(_QWORD *)(v20 + 8);
            *(_QWORD *)(v20 + 8) = 0;
            if (v23)
              (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            result = (unsigned int *)WTF::fastFree((WTF *)v20, v9);
          }
        }
        v11 = (WTF *)((char *)v11 + 24);
      }
      while (v11 != v17);
      v11 = v27;
    }
  }
  if (v11)
  {
    v27 = 0;
    LODWORD(v28) = 0;
    result = (unsigned int *)WTF::fastFree(v11, v9);
  }
  do
  {
    v24 = __ldaxr(v5);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v5));
  if (!v25)
  {
    atomic_store(1u, (unsigned int *)(v4 + 8));
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

uint64_t WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  WTF *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;

  if (a2 != (_DWORD *)a1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = a2[3];
    if (v4 <= v5)
    {
      v15 = *(_DWORD *)(a1 + 8);
      if (v5 <= v15)
      {
        v5 = *(_DWORD *)(a1 + 12);
      }
      else
      {
        if (v15)
        {
          if (v4)
          {
            v16 = *(WTF **)a1;
            v17 = *(_QWORD *)a1 + 24 * v4;
            do
            {
              v18 = (unsigned int *)*((_QWORD *)v16 + 1);
              *((_QWORD *)v16 + 1) = 0;
              if (v18)
              {
                do
                {
                  v19 = __ldaxr(v18);
                  v20 = v19 - 1;
                }
                while (__stlxr(v20, v18));
                if (!v20)
                {
                  atomic_store(1u, v18);
                  WTF::fastFree((WTF *)v18, a2);
                }
              }
              v21 = *(_QWORD *)v16;
              *(_QWORD *)v16 = 0;
              if (v21)
              {
                do
                {
                  v22 = __ldaxr((unsigned int *)v21);
                  v23 = v22 - 1;
                }
                while (__stlxr(v23, (unsigned int *)v21));
                if (!v23)
                {
                  atomic_store(1u, (unsigned int *)v21);
                  v24 = *(_QWORD *)(v21 + 8);
                  *(_QWORD *)(v21 + 8) = 0;
                  if (v24)
                    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
                  WTF::fastFree((WTF *)v21, a2);
                }
              }
              v16 = (WTF *)((char *)v16 + 24);
            }
            while (v16 != (WTF *)v17);
            *(_DWORD *)(a1 + 12) = 0;
          }
          v25 = *(WTF **)a1;
          if (*(_QWORD *)a1)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree(v25, a2);
          }
        }
        WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2[3]);
        v5 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      v6 = *(_QWORD *)a1 + 24 * v4;
      v7 = (uint64_t *)(*(_QWORD *)a1 + 24 * v5);
      do
      {
        v8 = (unsigned int *)v7[1];
        v7[1] = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            atomic_store(1u, v8);
            WTF::fastFree((WTF *)v8, a2);
          }
        }
        v11 = *v7;
        *v7 = 0;
        if (v11)
        {
          do
          {
            v12 = __ldaxr((unsigned int *)v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, (unsigned int *)v11));
          if (!v13)
          {
            atomic_store(1u, (unsigned int *)v11);
            v14 = *(_QWORD *)(v11 + 8);
            *(_QWORD *)(v11 + 8) = 0;
            if (v14)
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
            WTF::fastFree((WTF *)v11, a2);
          }
        }
        v7 += 3;
      }
      while (v7 != (uint64_t *)v6);
      *(_DWORD *)(a1 + 12) = v5;
    }
    v26 = *(_QWORD *)a2;
    if (v5)
    {
      v27 = v26 + 24 * v5;
      v28 = *(WTF **)a1;
      do
      {
        v29 = *(unsigned int **)v26;
        if (*(_QWORD *)v26)
        {
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 + 1, v29));
        }
        v31 = *(_QWORD *)v28;
        *(_QWORD *)v28 = v29;
        if (v31)
        {
          do
          {
            v32 = __ldaxr((unsigned int *)v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, (unsigned int *)v31));
          if (!v33)
          {
            atomic_store(1u, (unsigned int *)v31);
            v39 = *(_QWORD *)(v31 + 8);
            *(_QWORD *)(v31 + 8) = 0;
            if (v39)
              (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
            WTF::fastFree((WTF *)v31, a2);
          }
        }
        v34 = *(unsigned int **)(v26 + 8);
        if (v34)
        {
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 + 1, v34));
        }
        v36 = (unsigned int *)*((_QWORD *)v28 + 1);
        *((_QWORD *)v28 + 1) = v34;
        if (v36)
        {
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            atomic_store(1u, v36);
            WTF::fastFree((WTF *)v36, a2);
          }
        }
        *((_BYTE *)v28 + 16) = *(_BYTE *)(v26 + 16);
        v26 += 24;
        v28 = (WTF *)((char *)v28 + 24);
      }
      while (v26 != v27);
      v26 = *(_QWORD *)a2;
      v40 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      v40 = 0;
    }
    v41 = a2[3];
    if (v40 != v41)
    {
      v42 = v26 + 24 * v41;
      v43 = *(_QWORD *)a1 + 24 * v40;
      v44 = v26 + 24 * v40;
      do
      {
        v45 = *(unsigned int **)v44;
        if (*(_QWORD *)v44)
        {
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 + 1, v45));
        }
        *(_QWORD *)v43 = v45;
        v47 = *(unsigned int **)(v44 + 8);
        if (v47)
        {
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 + 1, v47));
        }
        *(_QWORD *)(v43 + 8) = v47;
        *(_BYTE *)(v43 + 16) = *(_BYTE *)(v44 + 16);
        v43 += 24;
        v44 += 24;
      }
      while (v44 != v42);
      v40 = a2[3];
    }
    *(_DWORD *)(a1 + 12) = v40;
  }
  return a1;
}

unsigned int *WebCore::TrackPrivateBase::notifyMainThreadClient(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  unsigned int *result;
  void *v7;
  int v8;
  WTF *v9;
  unsigned int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  WTF *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  WTF *v26;
  uint64_t v27;

  v26 = 0;
  v27 = 0;
  v4 = (unsigned __int8 *)(a1 + 12);
  if (__ldaxr((unsigned __int8 *)(a1 + 12)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 12);
LABEL_5:
  result = (unsigned int *)WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)&v26, (_DWORD *)(a1 + 16));
  v8 = __ldxr(v4);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v4))
LABEL_9:
    result = (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v9 = v26;
  v10 = HIDWORD(v27);
  if (HIDWORD(v27))
  {
    v11 = (char *)v26 + 8;
    while (1)
    {
      v12 = v11 - 8;
      v13 = *((_QWORD *)v11 - 1);
      if (v13 && v11[8] != 0)
        break;
      v11 += 24;
      if (v12 + 24 == (char *)v26 + 24 * HIDWORD(v27))
        goto LABEL_22;
    }
    v15 = *(_QWORD *)v11;
    *(_QWORD *)v11 = 0;
    v16 = *a2;
    *a2 = 0;
    v17 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v17 = &off_1E3410120;
    *((_QWORD *)v17 + 1) = v15;
    *((_QWORD *)v17 + 2) = v16;
    v25 = v17;
    (*(void (**)(_QWORD, unsigned int **))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), &v25);
    result = v25;
    v25 = 0;
    if (result)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    v10 = HIDWORD(v27);
    v9 = v26;
    if (HIDWORD(v27))
    {
LABEL_22:
      v18 = (WTF *)((char *)v9 + 24 * v10);
      do
      {
        result = (unsigned int *)*((_QWORD *)v9 + 1);
        *((_QWORD *)v9 + 1) = 0;
        if (result)
        {
          do
          {
            v19 = __ldaxr(result);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, result));
          if (!v20)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, v7);
          }
        }
        v21 = *(_QWORD *)v9;
        *(_QWORD *)v9 = 0;
        if (v21)
        {
          do
          {
            v22 = __ldaxr((unsigned int *)v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, (unsigned int *)v21));
          if (!v23)
          {
            atomic_store(1u, (unsigned int *)v21);
            v24 = *(_QWORD *)(v21 + 8);
            *(_QWORD *)(v21 + 8) = 0;
            if (v24)
              (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
            result = (unsigned int *)WTF::fastFree((WTF *)v21, v7);
          }
        }
        v9 = (WTF *)((char *)v9 + 24);
      }
      while (v9 != v18);
      v9 = v26;
    }
  }
  if (v9)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    return (unsigned int *)WTF::fastFree(v9, v7);
  }
  return result;
}

uint64_t WebCore::TrackPrivateBase::addClient(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char isMainThread;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;

  v6 = (unsigned __int8 *)(a1 + 12);
  if (__ldaxr((unsigned __int8 *)(a1 + 12)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 12);
LABEL_5:
  v8 = *(unsigned int *)(a1 + 28);
  v9 = WTF::fastMalloc((WTF *)0x10);
  v10 = v9;
  *(_DWORD *)v9 = 1;
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(v9 + 8) = v11;
  v12 = *(_QWORD *)(a3 + 8);
  if (v12)
    goto LABEL_29;
  v12 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = a3;
  v9 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v12;
  if (!v9)
    goto LABEL_29;
  do
  {
    v14 = __ldaxr((unsigned int *)v9);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, (unsigned int *)v9));
  if (!v15)
  {
    atomic_store(1u, (unsigned int *)v9);
    v9 = WTF::fastFree((WTF *)v9, v13);
  }
  v12 = *(_QWORD *)(a3 + 8);
  if (v12)
  {
LABEL_29:
    do
      v16 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v16 + 1, (unsigned int *)v12));
  }
  isMainThread = WTF::isMainThread((WTF *)v9);
  v18 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v18 == *(_DWORD *)(a1 + 24))
  {
    v19 = v18 + (v18 >> 2);
    if (v19 >= 0x10)
      v20 = v19 + 1;
    else
      v20 = 16;
    if (v20 <= v18 + 1)
      v21 = v18 + 1;
    else
      v21 = v20;
    WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 16, v21);
    LODWORD(v18) = *(_DWORD *)(a1 + 28);
    v22 = *(_QWORD *)(a1 + 16) + 24 * v18;
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16) + 24 * v18;
  }
  *(_QWORD *)v22 = v10;
  *(_QWORD *)(v22 + 8) = v12;
  *(_BYTE *)(v22 + 16) = isMainThread;
  *(_DWORD *)(a1 + 28) = v18 + 1;
  v23 = __ldxr(v6);
  if (v23 == 1)
  {
    if (!__stlxr(0, v6))
      return v8;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v8;
}

uint64_t WebCore::TrackPrivateBase::removeClient(uint64_t this, unsigned int a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v6;

  v3 = this;
  v4 = (unsigned __int8 *)(this + 12);
  if (__ldaxr((unsigned __int8 *)(this + 12)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](this + 12);
LABEL_5:
  if (*(_DWORD *)(v3 + 28) <= a2)
  {
    __break(0xC471u);
    return this;
  }
  v6 = __ldxr(v4);
  if (v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return this;
}

BOOL WebCore::TrackPrivateBase::hasClients(WebCore::TrackPrivateBase *this)
{
  unsigned __int8 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  v4 = *((_DWORD *)this + 7);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 != 0;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 != 0;
}

BOOL WebCore::TrackPrivateBase::hasOneClient(WebCore::TrackPrivateBase *this)
{
  unsigned __int8 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  v4 = *((_DWORD *)this + 7);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 == 1;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 == 1;
}

unsigned int *WebCore::TrackPrivateBase::setLogger(WebCore::TrackPrivateBase *this, const WTF::Logger *a2, unint64_t a3)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v5 = (unsigned int *)((char *)a2 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  result = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = a2;
  if (result)
  {
    v8 = result + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  *((_QWORD *)this + 5) = a3 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)++WebCore::s_uniqueId;
  return result;
}

char *WebCore::TrackPrivateBase::logChannel(WebCore::TrackPrivateBase *this)
{
  return &WebCore::LogMedia;
}

uint64_t WebCore::TransparencyLayerContextSwitcher::TransparencyLayerContextSwitcher(uint64_t a1, uint64_t a2, const WebCore::FloatRect *a3, WebCore::Filter **a4)
{
  WebCore::Filter *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v12[2];
  char v13;

  v5 = *a4;
  *a4 = 0;
  *(_QWORD *)a1 = off_1E340FF98;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
  {
    WebCore::Filter::createFilterStyles(v5, a3, v12);
    v7 = *(unsigned int *)(a1 + 28);
    v8 = *(_QWORD *)(a1 + 16);
    if ((_DWORD)v7)
    {
      v9 = v7 << 7;
      do
      {
        if (*(_BYTE *)(v8 + 88))
        {
          v10 = *(unsigned int *)(v8 + 80);
          if ((_DWORD)v10 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v10])(&v13, v8);
          *(_DWORD *)(v8 + 80) = -1;
        }
        v8 += 128;
        v9 -= 128;
      }
      while (v9);
      v8 = *(_QWORD *)(a1 + 16);
    }
    if (v8)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree((WTF *)v8, v6);
    }
    *(WTF **)(a1 + 16) = v12[0];
    *(WTF **)(a1 + 24) = v12[1];
  }
  return a1;
}

uint64_t WebCore::TransparencyLayerContextSwitcher::beginClipAndDrawSourceImage(WebCore::TransparencyLayerContextSwitcher *this, WebCore::GraphicsContext *a2, const WebCore::FloatRect *a3, float32x2_t *a4)
{
  uint64_t result;
  uint64_t v8;
  float32x2_t *v9;
  uint64_t v10;
  int8x8_t v11;
  int8x8_t v12;
  int8x8_t v13;
  int8x8_t v14;
  int8x8_t v15;
  int8x8_t v16;
  unsigned int v17;
  int8x8_t v18;
  float32x2_t v19[2];

  (*(void (**)(WebCore::GraphicsContext *, uint64_t, const WebCore::FloatRect *))(*(_QWORD *)a2 + 96))(a2, 1, a3);
  result = (*(uint64_t (**)(WebCore::GraphicsContext *, float))(*(_QWORD *)a2 + 592))(a2, 1.0);
  v8 = *((unsigned int *)this + 7);
  if ((_DWORD)v8)
  {
    v9 = (float32x2_t *)*((_QWORD *)this + 2);
    v10 = v8 << 7;
    do
    {
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
      v11 = (int8x8_t)v9[14];
      v12 = vbsl_s8((int8x8_t)vcgt_f32(*a4, (float32x2_t)v11), (int8x8_t)*a4, v11);
      v13 = (int8x8_t)vadd_f32((float32x2_t)v11, v9[15]);
      v14 = (int8x8_t)vadd_f32(*a4, a4[1]);
      v15 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v13, (float32x2_t)v14), v14, v13);
      v16 = vmvn_s8((int8x8_t)vcge_f32((float32x2_t)v12, (float32x2_t)v15));
      if ((v16.i8[0] & v16.i8[4] & 1) != 0)
        v17 = -1;
      else
        v17 = 0;
      v18 = (int8x8_t)vdup_n_s32(v17);
      v19[0] = (float32x2_t)vand_s8(v12, v18);
      v19[1] = vsub_f32((float32x2_t)vand_s8(v15, v18), v19[0]);
      (*(void (**)(WebCore::GraphicsContext *, float32x2_t *))(*(_QWORD *)a2 + 456))(a2, v19);
      WebCore::GraphicsContextState::setProperty<std::optional<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>>((uint64_t)a2 + 8, (uint64_t)v9);
      (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
      result = (*(uint64_t (**)(WebCore::GraphicsContext *, float))(*(_QWORD *)a2 + 592))(a2, 1.0);
      v9 += 16;
      v10 -= 128;
    }
    while (v10);
  }
  return result;
}

uint64_t WebCore::TransparencyLayerContextSwitcher::beginDrawSourceImage(WebCore::TransparencyLayerContextSwitcher *this, WebCore::GraphicsContext *a2, float a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  result = (*(uint64_t (**)(WebCore::GraphicsContext *, float))(*(_QWORD *)a2 + 592))(a2, a3);
  v7 = *((unsigned int *)this + 7);
  if ((_DWORD)v7)
  {
    v8 = *((_QWORD *)this + 2);
    v9 = v7 << 7;
    do
    {
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 456))(a2, v8 + 112);
      WebCore::GraphicsContextState::setProperty<std::optional<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>>((uint64_t)a2 + 8, v8);
      (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
      result = (*(uint64_t (**)(WebCore::GraphicsContext *, float))(*(_QWORD *)a2 + 592))(a2, 1.0);
      v8 += 128;
      v9 -= 128;
    }
    while (v9);
  }
  return result;
}

uint64_t WebCore::TransparencyLayerContextSwitcher::endDrawSourceImage(WebCore::TransparencyLayerContextSwitcher *this, WebCore::GraphicsContext *a2, const WebCore::DestinationColorSpace *a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((unsigned int *)this + 7);
  if ((_DWORD)v4)
  {
    v5 = -128 * v4;
    do
    {
      (*(void (**)(WebCore::GraphicsContext *, WebCore::GraphicsContext *, const WebCore::DestinationColorSpace *))(*(_QWORD *)a2 + 608))(a2, a2, a3);
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
      v5 += 128;
    }
    while (v5);
  }
  (*(void (**)(WebCore::GraphicsContext *, WebCore::GraphicsContext *, const WebCore::DestinationColorSpace *))(*(_QWORD *)a2 + 608))(a2, a2, a3);
  return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
}

void WebCore::TrackBuffer::~TrackBuffer(WebCore::TrackBuffer *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v3 = (unsigned int *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WTF *)*((_QWORD *)this + 12);
  if (v7)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy((uint64_t)this + 64, *((WTF **)this + 9));
  std::__tree<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy((uint64_t)this + 32, *((WTF **)this + 5));
  std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy((uint64_t)this + 8, *((WTF **)this + 2));
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;

  v3 = (unsigned int *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WTF *)*((_QWORD *)this + 12);
  if (v7)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy((uint64_t)this + 64, *((WTF **)this + 9));
  std::__tree<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy((uint64_t)this + 32, *((WTF **)this + 5));
  std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy((uint64_t)this + 8, *((WTF **)this + 2));
  WTF::fastFree(this, v12);
}

void WebCore::TransparencyLayerContextSwitcher::~TransparencyLayerContextSwitcher(WebCore::TransparencyLayerContextSwitcher *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::TransparencyLayerContextSwitcher::~TransparencyLayerContextSwitcher(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  char v16;

  *(_QWORD *)this = off_1E340FF98;
  v3 = *((unsigned int *)this + 7);
  v4 = *((_QWORD *)this + 2);
  if ((_DWORD)v3)
  {
    v5 = v3 << 7;
    do
    {
      if (*(_BYTE *)(v4 + 88))
      {
        v6 = *(unsigned int *)(v4 + 80);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v6])(&v16, v4);
        *(_DWORD *)(v4 + 80) = -1;
      }
      v4 += 128;
      v5 -= 128;
    }
    while (v5);
    v4 = *((_QWORD *)this + 2);
  }
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  v7 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E340C8F0;
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_16;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_16:
    v10 = *(_QWORD *)(v8 + 8);
    v11 = v10 - 1;
    *(_QWORD *)(v8 + 8) = v10 - 1;
    if (v10 == 1)
    {
      v15 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v13 = v15 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v11)
          return;
LABEL_24:
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        if (!v13)
          WTF::fastFree((WTF *)v8, a2);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return;
    goto LABEL_24;
  }
}

uint64_t WebCore::TransparencyLayerContextSwitcher::endClipAndDrawSourceImage(WebCore::TransparencyLayerContextSwitcher *this, WebCore::GraphicsContext *a2, const WebCore::DestinationColorSpace *a3)
{
  return (*(uint64_t (**)(WebCore::TransparencyLayerContextSwitcher *, WebCore::GraphicsContext *, const WebCore::DestinationColorSpace *))(*(_QWORD *)this + 56))(this, a2, a3);
}

_QWORD *std::__minmax_element_impl[abi:sn180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__tree_node<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,void *> *,long>>,std::__map_iterator<std::__tree_iterator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__tree_node<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,void *> *,long>>,std::__identity,BOOL (*)(std::pair<WTF::MediaTime const,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>> const&,std::pair<WTF::MediaTime const,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>> const&)>(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(_QWORD *, uint64_t))
{
  _QWORD *v3;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t (*v15)(_QWORD *, _QWORD *);
  _QWORD *v16;
  int v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = (_QWORD *)a1[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      v8 = a1;
      do
      {
        v7 = (_QWORD *)v8[2];
        v18 = *v7 == (_QWORD)v8;
        v8 = v7;
      }
      while (!v18);
    }
    if (v7 != a2)
    {
      v9 = (*a3)(v7 + 4, (uint64_t)(a1 + 4));
      if (v9)
        v10 = v3;
      else
        v10 = v7;
      if (v9)
        v3 = v7;
      while (1)
      {
        v11 = (_QWORD *)v7[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (_QWORD *)v7[2];
            v18 = *v12 == (_QWORD)v7;
            v7 = v12;
          }
          while (!v18);
        }
        if (v12 == a2)
          break;
        v13 = (_QWORD *)v12[1];
        v14 = v12;
        if (v13)
        {
          do
          {
            v7 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v14[2];
            v18 = *v7 == (_QWORD)v14;
            v14 = v7;
          }
          while (!v18);
        }
        v15 = (uint64_t (*)(_QWORD *, _QWORD *))*a3;
        if (v7 == a2)
        {
          if ((v15(v12 + 4, v3 + 4) & 1) != 0)
            return v12;
          (*a3)(v12 + 4, (uint64_t)(v10 + 4));
          return v3;
        }
        v16 = v7 + 4;
        v17 = v15(v7 + 4, v12 + 4);
        v18 = v17 == 0;
        if (v17)
          v19 = v7 + 4;
        else
          v19 = v12 + 4;
        if (v18)
          v20 = v12;
        else
          v20 = v7;
        if (v18)
        {
          v21 = v7;
        }
        else
        {
          v16 = v12 + 4;
          v21 = v12;
        }
        if ((*a3)(v19, (uint64_t)(v3 + 4)))
          v3 = v20;
        if (!(*a3)(v16, (uint64_t)(v10 + 4)))
          v10 = v21;
      }
    }
  }
  return v3;
}

uint64_t WebCore::GraphicsContextState::setProperty<std::optional<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  _BOOL4 v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char *v18;

  v3 = result;
  v4 = (char *)(result + 232);
  v5 = *(unsigned __int8 *)(result + 320);
  v6 = *(unsigned __int8 *)(a2 + 88);
  if (*(_BYTE *)(result + 320))
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    v12 = (*(_BYTE *)(result + 320) != 0) == (*(_BYTE *)(a2 + 88) != 0);
  }
  else
  {
    v8 = *(unsigned int *)(result + 312);
    v9 = *(_DWORD *)(a2 + 80);
    v10 = v9 == v8;
    v11 = v9 == -1;
    v12 = v9 == -1;
    if (v11)
      v10 = 0;
    if ((_DWORD)v8 != -1)
    {
      v12 = v10;
      if (v10)
      {
        v18 = &v17;
        result = ((uint64_t (*)(char **, char *, uint64_t))off_1E3410060[v8])(&v18, v4, a2);
        if ((result & 1) != 0)
          return result;
        v5 = *(unsigned __int8 *)(v3 + 320);
        v6 = *(unsigned __int8 *)(a2 + 88);
        goto LABEL_14;
      }
    }
  }
  if (v12)
    return result;
LABEL_14:
  if (v5 != v6)
  {
    if (v5)
    {
      v15 = *(unsigned int *)(v3 + 312);
      if ((_DWORD)v15 != -1)
        result = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v15])(&v18, v4);
      *(_DWORD *)(v3 + 312) = -1;
      *(_BYTE *)(v3 + 320) = 0;
    }
    else
    {
      *(_BYTE *)(v3 + 232) = 0;
      *(_DWORD *)(v3 + 312) = -1;
      v16 = *(unsigned int *)(a2 + 80);
      if ((_DWORD)v16 != -1)
      {
        result = ((uint64_t (*)(char **, char *, uint64_t))off_1E34100A8[v16])(&v18, v4, a2);
        *(_DWORD *)(v3 + 312) = v16;
      }
      *(_BYTE *)(v3 + 320) = 1;
    }
    goto LABEL_28;
  }
  if (v5)
  {
    v13 = *(unsigned int *)(v3 + 312);
    v14 = *(unsigned int *)(a2 + 80);
    if ((_DWORD)v13 == -1)
    {
      if ((_DWORD)v14 == -1)
        goto LABEL_28;
    }
    else if ((_DWORD)v14 == -1)
    {
      result = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v13])(&v18, v4);
      *(_DWORD *)(v3 + 312) = -1;
      goto LABEL_28;
    }
    v18 = v4;
    result = ((uint64_t (*)(char **, char *, uint64_t))*(&off_1E3410090 + v14))(&v18, v4, a2);
  }
LABEL_28:
  *(_DWORD *)(v3 + 176) |= 0x80u;
  return result;
}

_QWORD *WTF::HashTable<WebCore::Font const*,WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashMap<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashTraits<WebCore::Font const*>,WTF::HashTraits<WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Font const*>>::expand(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WebCore::Font const*,WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashMap<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashTraits<WebCore::Font const*>,WTF::HashTraits<WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Font const*>>::rehash(a1, v4, a2);
}

_QWORD *WTF::HashTable<WebCore::Font const*,WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashMap<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashTraits<WebCore::Font const*>,WTF::HashTraits<WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Font const*>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  WTF::StringImpl *v18;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v15 = v7;
    v16 = (WTF::StringImpl *)v6;
    do
    {
      if (*(_QWORD *)v16 != -1)
      {
        if (*(_QWORD *)v16)
        {
          v17 = WTF::HashTable<WebCore::Font const*,WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashMap<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashTraits<WebCore::Font const*>,WTF::HashTraits<WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Font const*>>::reinsert(*a1, v16);
          WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>::~KeyValuePair((uint64_t)v16, v18);
          if (v16 == a3)
            v13 = v17;
        }
        else
        {
          WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>::~KeyValuePair((uint64_t)v16, v10);
        }
      }
      v16 = (WTF::StringImpl *)((char *)v16 + 16);
      --v15;
    }
    while (v15);
    goto LABEL_16;
  }
  result = 0;
  if (v6)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

uint64_t WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v5 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v5)
    {
      v6 = (WTF::StringImpl **)(v3 + 8);
      do
      {
        v7 = *v6;
        if (*v6 != (WTF::StringImpl *)-1)
        {
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
          v8 = *(v6 - 1);
          *(v6 - 1) = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, a2);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
        v6 += 4;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

_QWORD *WTF::HashTable<WebCore::Font const*,WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashMap<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashTraits<WebCore::Font const*>,WTF::HashTraits<WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Font const*>>::reinsert(uint64_t a1, WTF::StringImpl *a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = *(_QWORD *)a2;
  v5 = ~(*(_QWORD *)a2 << 32) + *(_QWORD *)a2;
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v3 & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
  v9 = 1;
  do
  {
    v10 = v8;
    v11 = *(_QWORD *)(a1 + 16 * v8);
    v8 = (v8 + v9++) & v3;
  }
  while (v11);
  v12 = (_QWORD *)(a1 + 16 * v10);
  v13 = v12 + 1;
  v14 = v12[1];
  if (v14)
  {
    v17 = *(unsigned int *)(v14 - 4);
    if ((_DWORD)v17)
    {
      v18 = (WTF::StringImpl **)(v14 + 8);
      do
      {
        v19 = *v18;
        if (*v18 != (WTF::StringImpl *)-1)
        {
          *v18 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, a2);
            else
              *(_DWORD *)v19 -= 2;
          }
          v20 = *(v18 - 1);
          *(v18 - 1) = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, a2);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
        v18 += 4;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v14 - 16), a2);
    v4 = *(_QWORD *)a2;
  }
  *v12 = v4;
  *v13 = 0;
  v15 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *v13 = v15;
  return v12;
}

uint64_t *WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::operator=(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v6 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v6)
    {
      v7 = (WTF::StringImpl **)(v4 + 8);
      do
      {
        v8 = *v7;
        if (*v7 != (WTF::StringImpl *)-1)
        {
          *v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, a2);
            else
              *(_DWORD *)v8 -= 2;
          }
          v9 = *(v7 - 1);
          *(v7 - 1) = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, a2);
            else
              *(_DWORD *)v9 -= 2;
          }
        }
        v7 += 4;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::CharacterFallbackMapKey,WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>>,WebCore::CharacterFallbackMapKeyHash,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::CharacterFallbackMapKey,WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>>,WebCore::CharacterFallbackMapKeyHash,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits>::rehash(a1, v5, a2);
}

BOOL WTF::HashTable<WebCore::CharacterFallbackMapKey,WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>>,WebCore::CharacterFallbackMapKeyHash,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits>::isEmptyBucket(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  BOOL v4;

  if (!*(_QWORD *)a1
    && (WTF::equal(*(WTF **)(a1 + 8), 0, a3) ? (v4 = *(_BYTE *)(a1 + 16) == 0) : (v4 = 0), v4))
  {
    return *(_BYTE *)(a1 + 17) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t WTF::HashTable<WebCore::CharacterFallbackMapKey,WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>>,WebCore::CharacterFallbackMapKeyHash,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t result;
  unsigned int v34;
  unsigned int v37;
  unsigned __int16 v38;
  char v39;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)((32 * a2) | 0x10));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    v12 = v5;
    do
    {
      v13 = v4 + 32 * v10;
      v14 = (uint64_t *)(v13 + 8);
      if (*(_QWORD *)(v13 + 8) != -1)
      {
        if (WTF::HashTable<WebCore::CharacterFallbackMapKey,WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>>,WebCore::CharacterFallbackMapKeyHash,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits>::isEmptyBucket(v4 + 32 * v10, (uint64_t)v8, v9))
        {
          v31 = (WTF::StringImpl *)*v14;
          *v14 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v8);
            else
              *(_DWORD *)v31 -= 2;
          }
          v32 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v8);
            else
              *(_DWORD *)v32 -= 2;
          }
        }
        else
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v37 = -1640531527;
          v38 = 0;
          v39 = 0;
          WTF::add<WTF::AtomString,WTF::String,BOOL,WebCore::ResolvedEmojiPolicy>(&v37, (_QWORD *)(v4 + 32 * v10), v14, (unsigned __int8 *)(v13 + 16), (unsigned __int8 *)(v13 + 17));
          v17 = v37;
          if (v39)
          {
            v34 = (v37 + v38) ^ ((v37 + v38) << 11);
            v17 = v34 + (v34 >> 17);
          }
          v18 = 0;
          v19 = (v17 ^ (8 * v17)) + ((v17 ^ (8 * v17)) >> 5);
          v20 = (v19 ^ (4 * v19)) + ((v19 ^ (4 * v19)) >> 15);
          v21 = v20 ^ (v20 << 10);
          if (!v21)
            v21 = 0x800000;
          while (1)
          {
            v22 = v21 & v16;
            v23 = v15 + 32 * v22;
            if (!*(_QWORD *)v23)
            {
              v24 = WTF::equal(*(WTF **)(v23 + 8), 0, v9) && *(_BYTE *)(v23 + 16) == 0;
              if (v24 && !*(_BYTE *)(v23 + 17))
                break;
            }
            v21 = ++v18 + v22;
          }
          v25 = *(WTF::StringImpl **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v8);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = *(WTF::StringImpl **)v23;
          *(_QWORD *)v23 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v8);
            else
              *(_DWORD *)v26 -= 2;
          }
          v27 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)v23 = v27;
          v28 = *(_QWORD *)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          *(_QWORD *)(v23 + 8) = v28;
          *(_WORD *)(v23 + 16) = *(_WORD *)(v13 + 16);
          *(_QWORD *)(v15 + 32 * v22 + 24) = *(_QWORD *)(v4 + 32 * v10 + 24);
          v29 = *(WTF::StringImpl **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v8);
            else
              *(_DWORD *)v29 -= 2;
          }
          v30 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v8);
            else
              *(_DWORD *)v30 -= 2;
          }
          if (v13 == a3)
            v11 = v15 + 32 * v22;
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v11;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::CharacterFallbackMapKeyHash>::hash<WebCore::CharacterFallbackMapKey>(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v6;
  unsigned int v7;
  unsigned __int16 v8;
  char v9;

  v7 = -1640531527;
  v8 = 0;
  v9 = 0;
  WTF::add<WTF::AtomString,WTF::String,BOOL,WebCore::ResolvedEmojiPolicy>(&v7, (_QWORD *)a1, (uint64_t *)(a1 + 8), (unsigned __int8 *)(a1 + 16), (unsigned __int8 *)(a1 + 17));
  v1 = v7;
  if (v9)
  {
    v6 = (v7 + v8) ^ ((v7 + v8) << 11);
    v1 = v6 + (v6 >> 17);
  }
  v2 = (v1 ^ (8 * v1)) + ((v1 ^ (8 * v1)) >> 5);
  v3 = (v2 ^ (4 * v2)) + ((v2 ^ (4 * v2)) >> 15);
  v4 = v3 ^ (v3 << 10);
  if (v4)
    return v4;
  else
    return 0x800000;
}

unsigned int *WTF::add<WTF::AtomString,WTF::String,BOOL,WebCore::ResolvedEmojiPolicy>(unsigned int *result, _QWORD *a2, uint64_t *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;

  v5 = *result + (unsigned __int16)*a2;
  v6 = (*a2 >> 5) & 0x7FFF800 ^ (v5 << 16) ^ v5;
  v7 = v6 + (unsigned __int16)WORD2(*a2);
  v8 = (*a2 >> 37) & 0x7FFF800 ^ ((v7 + (v6 >> 11)) << 16) ^ (v7 + (v6 >> 11));
  v9 = v8 + (v8 >> 11);
  *result = v9;
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_DWORD *)(v10 + 4);
    v12 = v11 & 0xFFFFFFFE;
    if ((v11 & 0xFFFFFFFE) != 0)
    {
      v13 = 0;
      do
      {
        v14 = *(unsigned int *)(v10 + 4);
        if (v13 >= v14)
        {
          v16 = 0;
        }
        else
        {
          v15 = *(_QWORD *)(v10 + 8);
          if ((*(_BYTE *)(v10 + 16) & 4) != 0)
            v16 = *(unsigned __int8 *)(v15 + v13);
          else
            v16 = *(unsigned __int16 *)(v15 + 2 * v13);
        }
        v17 = v13 + 1;
        if (v13 + 1 >= v14)
        {
          v19 = 0;
        }
        else
        {
          v18 = *(_QWORD *)(v10 + 8);
          if ((*(_BYTE *)(v10 + 16) & 4) != 0)
            v19 = *(unsigned __int8 *)(v18 + v13 + 1);
          else
            v19 = *(unsigned __int16 *)(v18 + 2 * v13 + 2);
        }
        v20 = (v16 << 11) ^ ((v9 + v19) << 16) ^ (v9 + v19);
        v9 = v20 + (v20 >> 11);
        *result = v9;
        v13 = v17 + 1;
      }
      while (v17 + 1 < v12);
    }
    if ((v11 & 1) != 0)
    {
      if (*(_DWORD *)(v10 + 4) <= v12)
      {
        v22 = 0;
      }
      else
      {
        v21 = *(_QWORD *)(v10 + 8);
        if ((*(_BYTE *)(v10 + 16) & 4) != 0)
          v22 = *(unsigned __int8 *)(v21 + v12);
        else
          v22 = *(unsigned __int16 *)(v21 + 2 * v12);
      }
      v9 = ((v9 + v22) ^ ((v9 + v22) << 16)) + (((v9 + v22) ^ ((v9 + v22) << 16)) >> 11);
    }
  }
  v23 = (v9 + *a4) ^ ((v9 + *a4) << 16);
  v24 = (v23 + *a5 + (v23 >> 11)) ^ ((v23 + *a5 + (v23 >> 11)) << 16);
  *result = v24 + (v24 >> 11);
  return result;
}

uint64_t WebCore::CharacterFallbackMapKeyHash::equal(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  result = WTF::equal(*(WTF **)(a1 + 8), *(const WTF::StringImpl **)(a2 + 8), a3);
  if (!(_DWORD)result)
    return result;
  if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
    return 0;
  return *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17);
}

uint64_t *WTF::HashTable<WebCore::Font const*,WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashMap<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashTraits<WebCore::Font const*>,WTF::HashTraits<WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Font const*>>::remove(uint64_t *result, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v2 = result;
  *(_QWORD *)a2 = -1;
  v3 = *((_QWORD *)a2 + 1);
  if (v3)
  {
    v10 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v10)
    {
      v11 = (WTF::StringImpl **)(v3 + 8);
      do
      {
        v12 = *v11;
        if (*v11 != (WTF::StringImpl *)-1)
        {
          *v11 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, a2);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = *(v11 - 1);
          *(v11 - 1) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, a2);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
        v11 += 4;
        --v10;
      }
      while (v10);
    }
    result = (uint64_t *)WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  ++*(_DWORD *)(*v2 - 16);
  v4 = *v2;
  if (*v2)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *v2;
  if (*v2)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WebCore::Font const*,WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashMap<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashTraits<WebCore::Font const*>,WTF::HashTraits<WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Font const*>>::rehash(v2, v8 >> 1, 0);
  }
  return result;
}

unint64_t WTF::Vector<WebCore::CharacterFallbackMapKey,512ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::CharacterFallbackMapKey,512ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::CharacterFallbackMapKey,512ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::CharacterFallbackMapKey,512ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  unsigned int *v6;
  WTF *v7;
  WTF *v8;
  unsigned int *v9;
  uint64_t v10;
  WTF::StringImpl *v11;

  if (result[2] >= a2)
    return result;
  v2 = result;
  v3 = *(WTF **)result;
  v4 = result[3];
  if (a2 >= 0x201)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      return result;
    }
    v5 = 24 * a2;
    result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
    v6 = result;
    v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v2 = result;
    if (!v4)
      goto LABEL_18;
    goto LABEL_7;
  }
  v6 = result + 4;
  *(_QWORD *)result = result + 4;
  result[2] = 512;
  if (v4)
  {
LABEL_7:
    v7 = (WTF *)((char *)v3 + 24 * v4);
    v8 = v3;
    do
    {
      v9 = *(unsigned int **)v8;
      *(_QWORD *)v8 = 0;
      *(_QWORD *)v6 = v9;
      v10 = *((_QWORD *)v8 + 1);
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v6 + 1) = v10;
      *((_WORD *)v6 + 8) = *((_WORD *)v8 + 8);
      v11 = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
      *((_QWORD *)v8 + 1) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      result = *(unsigned int **)v8;
      *(_QWORD *)v8 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        else
          *result -= 2;
      }
      v8 = (WTF *)((char *)v8 + 24);
      v6 += 6;
    }
    while (v8 != v7);
  }
LABEL_18:
  if (v2 + 4 != (unsigned int *)v3 && v3)
  {
    if (*(WTF **)v2 == v3)
    {
      *(_QWORD *)v2 = 0;
      v2[2] = 0;
    }
    return (unsigned int *)WTF::fastFree(v3, (void *)a2);
  }
  return result;
}

WTF::StringImpl *WTF::HashTable<WebCore::CharacterFallbackMapKey,WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>>,WebCore::CharacterFallbackMapKeyHash,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits>::remove(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v4 = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = -1;
  *(_WORD *)(a2 + 16) = 0;
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return (WTF::StringImpl *)WTF::HashTable<WebCore::CharacterFallbackMapKey,WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>>,WebCore::CharacterFallbackMapKeyHash,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits>::rehash(a1, v10 >> 1, 0);
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(WebCore::TrackPrivateBaseClient &),WTF::Function<void ()(WebCore::TrackPrivateBaseClient &)>>::~SharedTaskFunctor(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(WebCore::TrackPrivateBaseClient &),WTF::Function<void ()(WebCore::TrackPrivateBaseClient &)>>::~SharedTaskFunctor(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::SharedTaskFunctor<void ()(WebCore::TrackPrivateBaseClient &),WTF::Function<void ()(WebCore::TrackPrivateBaseClient &)>>::run(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0xAAAAAAB)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(_DWORD *)(result + 12);
    v5 = 24 * a2;
    v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v2 = v6;
    if (v4)
    {
      v8 = v6;
      v9 = (WTF *)((char *)v3 + 24 * v4);
      v10 = v3;
      do
      {
        v11 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        *(_QWORD *)v8 = v11;
        v12 = *((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        *(_QWORD *)(v8 + 8) = v12;
        *(_BYTE *)(v8 + 16) = *((_BYTE *)v10 + 16);
        v13 = (unsigned int *)*((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        if (v13)
        {
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            atomic_store(1u, v13);
            WTF::fastFree((WTF *)v13, v7);
          }
        }
        v16 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        if (v16)
        {
          do
          {
            v17 = __ldaxr((unsigned int *)v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, (unsigned int *)v16));
          if (!v18)
          {
            atomic_store(1u, (unsigned int *)v16);
            v19 = *(_QWORD *)(v16 + 8);
            *(_QWORD *)(v16 + 8) = 0;
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
            WTF::fastFree((WTF *)v16, v7);
          }
        }
        v8 += 24;
        v10 = (WTF *)((char *)v10 + 24);
      }
      while (v10 != v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::TrackPrivateBase::notifyClients(WTF::Function<void ()(WebCore::TrackPrivateBaseClient &)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34100F8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TrackPrivateBase::notifyClients(WTF::Function<void ()(WebCore::TrackPrivateBaseClient &)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = &off_1E34100F8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TrackPrivateBase::notifyClients(WTF::Function<void ()(WebCore::TrackPrivateBaseClient &)> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 16) + 16))(*(_QWORD *)(result + 16));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::TrackPrivateBase::notifyMainThreadClient(WTF::Function<void ()(WebCore::TrackPrivateBaseClient &)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3410120;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TrackPrivateBase::notifyMainThreadClient(WTF::Function<void ()(WebCore::TrackPrivateBaseClient &)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3410120;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TrackPrivateBase::notifyMainThreadClient(WTF::Function<void ()(WebCore::TrackPrivateBaseClient &)> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 16) + 16))(*(_QWORD *)(result + 16));
  }
  return result;
}

uint64_t WebCore::parseVPCodecParameters@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t result;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  __int128 *v29;
  unint64_t v30;
  unsigned __int8 *v31;
  __int128 *v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  __int128 *v48;
  unint64_t v49;
  unsigned __int8 *v50;
  __int128 *v51;
  unsigned int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  __int128 *v58;
  unint64_t v59;
  unsigned __int8 *v60;
  __int128 *v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  __int128 *v68;
  unint64_t v69;
  unsigned __int8 *v70;
  __int128 *v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  unsigned __int8 v77;
  uint64_t *v78;
  unsigned int v79;
  unsigned int v80;
  BOOL v81;
  uint64_t v82;
  unint64_t v83;
  __int16 v84;
  char v85;
  __int128 v86;
  char v87;
  _BYTE v88[15];

  v6 = a2;
  *(_QWORD *)&v88[7] = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v82 = a1;
  v83 = a2;
  v84 = 46;
  v85 = 0;
  v78 = &v82;
  v79 = 0;
  v81 = a2 == 0;
  result = WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v78);
  v10 = (uint64_t *)v79;
  if (v79 == (_DWORD)v83 && v81)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  v11 = (unint64_t)v78;
  v12 = *((unsigned int *)v78 + 2);
  if (v12 <= v79)
    goto LABEL_14;
  LODWORD(v13) = v80;
  if (v12 - v79 <= v80)
  {
    if (!v79)
    {
      v13 = v78[1];
      goto LABEL_13;
    }
    LODWORD(v13) = v12 - v79;
  }
  v14 = *((unsigned __int8 *)v78 + 12);
  v13 = v13;
  v15 = v12 - v79;
  if (*((_BYTE *)v78 + 12))
  {
    if (v15 < v13)
      goto LABEL_203;
    v13 = v13 | 0x100000000;
  }
  else if (v15 < v13)
  {
    goto LABEL_203;
  }
LABEL_13:
  if ((v13 & 0xFF00000000) == 0)
  {
    WTF::String::String();
    goto LABEL_15;
  }
LABEL_14:
  WTF::String::String();
LABEL_15:
  v3 = (WTF::StringImpl *)v86;
  WTF::StringView::SplitResult::Iterator::operator++();
  result = MEMORY[0x19AEA53F4](v3, "vp8", 3);
  if ((result & 1) == 0)
  {
    result = MEMORY[0x19AEA53F4](v3, "vp9", 3);
    if (!(_DWORD)result)
      goto LABEL_35;
  }
  if (v79 == (_DWORD)v83 && v81)
  {
    v18 = 0x101010001080A00;
    goto LABEL_31;
  }
  if ((v6 & 0xFF00000000) != 0)
  {
    if (v8)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_24:
      v16 = (WTF::StringImpl *)v86;
      goto LABEL_25;
    }
  }
  else if (v8)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_24;
  }
  v16 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_25:
  result = MEMORY[0x19AEA53F4](v16, "vp8.0", 5);
  if ((result & 1) != 0 || (result = MEMORY[0x19AEA53F4](v16, "vp9.0", 5), (_DWORD)result))
  {
    *(_QWORD *)a3 = v3;
    *(_QWORD *)(a3 + 8) = 0x101010001080A00;
    *(_BYTE *)(a3 + 16) = 1;
    if (v16)
    {
      if (*(_DWORD *)v16 != 2)
      {
        *(_DWORD *)v16 -= 2;
        return result;
      }
      v27 = v16;
      return WTF::StringImpl::destroy(v27, v17);
    }
    return result;
  }
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
LABEL_35:
  result = MEMORY[0x19AEA53F4](v3, "vp08", 4);
  if ((result & 1) == 0)
  {
    result = MEMORY[0x19AEA53F4](v3, "vp09", 4);
    if (!(_DWORD)result)
      goto LABEL_213;
  }
  v10 = (uint64_t *)v79;
  if (v79 == (_DWORD)v83 && v81)
    goto LABEL_213;
  v11 = (unint64_t)v78;
  v19 = *((unsigned int *)v78 + 2);
  if (v19 <= v79)
  {
    v22 = 0;
    v21 = "";
    goto LABEL_50;
  }
  LODWORD(v20) = v80;
  if (v19 - v79 <= v80)
  {
    if (!v79)
    {
      v21 = (const char *)*v78;
      v20 = v78[1];
      goto LABEL_49;
    }
    LODWORD(v20) = v19 - v79;
  }
  v14 = *((unsigned __int8 *)v78 + 12);
  v20 = v20;
  v15 = v19 - v79;
  if (*((_BYTE *)v78 + 12))
  {
    if (v15 < v20)
      goto LABEL_203;
    v21 = (const char *)(*v78 + v79);
    v20 = v20 | 0x100000000;
  }
  else
  {
    if (v15 < v20)
      goto LABEL_203;
    v21 = (const char *)(*v78 + 2 * v79);
  }
LABEL_49:
  v22 = v20;
  if ((v20 & 0xFF00000000) == 0)
  {
    result = WTF::parseInteger<unsigned char,char16_t>((uint64_t)v21, v20, 10, 0);
    goto LABEL_52;
  }
LABEL_50:
  result = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v21, v22, 10, 0);
LABEL_52:
  v23 = result;
  if (result > 3u)
    goto LABEL_213;
  if (!BYTE1(result))
    goto LABEL_213;
  result = WTF::StringView::SplitResult::Iterator::operator++();
  if (*(_DWORD *)(result + 8) == (_DWORD)v83)
  {
    if (*(_BYTE *)(result + 16))
      goto LABEL_213;
  }
  v10 = v78;
  v11 = v79;
  v24 = *((unsigned int *)v78 + 2);
  if (v24 <= v79)
  {
    v28 = 0;
    v26 = "";
    goto LABEL_67;
  }
  LODWORD(v25) = v80;
  if (v24 - v79 <= v80)
  {
    if (!v79)
    {
      v26 = (const char *)*v78;
      v25 = v78[1];
      goto LABEL_66;
    }
    LODWORD(v25) = v24 - v79;
  }
  v14 = *((unsigned __int8 *)v78 + 12);
  v25 = v25;
  v15 = v24 - v79;
  if (*((_BYTE *)v78 + 12))
  {
    if (v15 < v25)
      goto LABEL_203;
    v26 = (const char *)(*v78 + v79);
    v25 = v25 | 0x100000000;
  }
  else
  {
    if (v15 < v25)
      goto LABEL_203;
    v26 = (const char *)(*v78 + 2 * v79);
  }
LABEL_66:
  v28 = v25;
  if ((v25 & 0xFF00000000) == 0)
  {
    result = WTF::parseInteger<unsigned char,char16_t>((uint64_t)v26, v25, 10, 0);
    goto LABEL_69;
  }
LABEL_67:
  result = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v26, v28, 10, 0);
LABEL_69:
  if (!BYTE1(result))
    goto LABEL_213;
  v8 = result;
  *(_QWORD *)&v86 = 0x29281F1E15140B0ALL;
  *(_QWORD *)((char *)&v86 + 6) = 0x3E3D3C3433322928;
  v29 = &v86;
  v30 = 14;
  do
  {
    v31 = (unsigned __int8 *)v29 + (v30 >> 1);
    v33 = *v31;
    v32 = (__int128 *)(v31 + 1);
    v34 = v30 >> 1;
    v30 += ~(v30 >> 1);
    if (v33 < result)
      v29 = v32;
    else
      v30 = v34;
  }
  while (v30);
  if (v29 == (__int128 *)((char *)&v86 + 14))
    goto LABEL_213;
  if (*(unsigned __int8 *)v29 > result)
    goto LABEL_213;
  result = WTF::StringView::SplitResult::Iterator::operator++();
  if (*(_DWORD *)(result + 8) == (_DWORD)v83)
  {
    if (*(_BYTE *)(result + 16))
      goto LABEL_213;
  }
  v10 = v78;
  v11 = v79;
  v35 = *((unsigned int *)v78 + 2);
  if (v35 <= v79)
  {
    v38 = 0;
    v37 = "";
    goto LABEL_92;
  }
  LODWORD(v36) = v80;
  if (v35 - v79 <= v80)
  {
    if (!v79)
    {
      v37 = (const char *)*v78;
      v36 = v78[1];
      goto LABEL_91;
    }
    LODWORD(v36) = v35 - v79;
  }
  v14 = *((unsigned __int8 *)v78 + 12);
  v36 = v36;
  v15 = v35 - v79;
  if (*((_BYTE *)v78 + 12))
  {
    if (v15 < v36)
      goto LABEL_203;
    v37 = (const char *)(*v78 + v79);
    v36 = v36 | 0x100000000;
  }
  else
  {
    if (v15 < v36)
      goto LABEL_203;
    v37 = (const char *)(*v78 + 2 * v79);
  }
LABEL_91:
  v38 = v36;
  if ((v36 & 0xFF00000000) == 0)
  {
    result = WTF::parseInteger<unsigned char,char16_t>((uint64_t)v37, v36, 10, 0);
    goto LABEL_94;
  }
LABEL_92:
  result = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v37, v38, 10, 0);
LABEL_94:
  if (!BYTE1(result) || result > 0xCu || ((1 << result) & 0x1500) == 0)
    goto LABEL_213;
  v8 = (v23 | (v8 << 8)) & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)result << 16);
  result = WTF::StringView::SplitResult::Iterator::operator++();
  if (*(_DWORD *)(result + 8) == (_DWORD)v83 && *(_BYTE *)(result + 16))
  {
    v18 = v8 | 0x101010001000000;
    goto LABEL_31;
  }
  v10 = v78;
  v11 = v79;
  v39 = *((unsigned int *)v78 + 2);
  if (v39 <= v79)
  {
    v42 = 0;
    v41 = "";
    goto LABEL_112;
  }
  LODWORD(v40) = v80;
  if (v39 - v79 <= v80)
  {
    if (!v79)
    {
      v41 = (const char *)*v78;
      v40 = v78[1];
      goto LABEL_111;
    }
    LODWORD(v40) = v39 - v79;
  }
  v14 = *((unsigned __int8 *)v78 + 12);
  v40 = v40;
  v15 = v39 - v79;
  if (*((_BYTE *)v78 + 12))
  {
    if (v15 < v40)
      goto LABEL_203;
    v41 = (const char *)(*v78 + v79);
    v40 = v40 | 0x100000000;
  }
  else
  {
    if (v15 < v40)
      goto LABEL_203;
    v41 = (const char *)(*v78 + 2 * v79);
  }
LABEL_111:
  v42 = v40;
  if ((v40 & 0xFF00000000) == 0)
  {
    result = WTF::parseInteger<unsigned char,char16_t>((uint64_t)v41, v40, 10, 0);
    goto LABEL_114;
  }
LABEL_112:
  result = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v41, v42, 10, 0);
LABEL_114:
  v43 = result;
  if (result > 3u)
    goto LABEL_213;
  if (!BYTE1(result))
    goto LABEL_213;
  result = WTF::StringView::SplitResult::Iterator::operator++();
  if (*(_DWORD *)(result + 8) == (_DWORD)v83)
  {
    if (*(_BYTE *)(result + 16))
      goto LABEL_213;
  }
  v10 = v78;
  v11 = v79;
  v44 = *((unsigned int *)v78 + 2);
  if (v44 <= v79)
  {
    v47 = 0;
    v46 = "";
    goto LABEL_129;
  }
  LODWORD(v45) = v80;
  if (v44 - v79 <= v80)
  {
    if (!v79)
    {
      v46 = (const char *)*v78;
      v45 = v78[1];
      goto LABEL_128;
    }
    LODWORD(v45) = v44 - v79;
  }
  v14 = *((unsigned __int8 *)v78 + 12);
  v45 = v45;
  v15 = v44 - v79;
  if (*((_BYTE *)v78 + 12))
  {
    if (v15 < v45)
      goto LABEL_203;
    v46 = (const char *)(*v78 + v79);
    v45 = v45 | 0x100000000;
  }
  else
  {
    if (v15 < v45)
      goto LABEL_203;
    v46 = (const char *)(*v78 + 2 * v79);
  }
LABEL_128:
  v47 = v45;
  if ((v45 & 0xFF00000000) == 0)
  {
    result = WTF::parseInteger<unsigned char,char16_t>((uint64_t)v46, v45, 10, 0);
    goto LABEL_131;
  }
LABEL_129:
  result = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v46, v47, 10, 0);
LABEL_131:
  if (!BYTE1(result))
    goto LABEL_213;
  v6 = (unint64_t)v43 << 24;
  v4 = result;
  DWORD2(v86) = 369888010;
  *(_QWORD *)&v86 = 0x908070605040201;
  v48 = &v86;
  v49 = 12;
  do
  {
    v50 = (unsigned __int8 *)v48 + (v49 >> 1);
    v52 = *v50;
    v51 = (__int128 *)(v50 + 1);
    v53 = v49 >> 1;
    v49 += ~(v49 >> 1);
    if (v52 < result)
      v48 = v51;
    else
      v49 = v53;
  }
  while (v49);
  if (v48 == (__int128 *)((char *)&v86 + 12))
    goto LABEL_213;
  if (*(unsigned __int8 *)v48 > result)
    goto LABEL_213;
  result = WTF::StringView::SplitResult::Iterator::operator++();
  if (*(_DWORD *)(result + 8) == (_DWORD)v83)
  {
    if (*(_BYTE *)(result + 16))
      goto LABEL_213;
  }
  v10 = v78;
  v11 = v79;
  v54 = *((unsigned int *)v78 + 2);
  if (v54 <= v79)
  {
    v57 = 0;
    v56 = "";
    goto LABEL_154;
  }
  LODWORD(v55) = v80;
  if (v54 - v79 <= v80)
  {
    if (!v79)
    {
      v56 = (const char *)*v78;
      v55 = v78[1];
      goto LABEL_153;
    }
    LODWORD(v55) = v54 - v79;
  }
  v14 = *((unsigned __int8 *)v78 + 12);
  v55 = v55;
  v15 = v54 - v79;
  if (*((_BYTE *)v78 + 12))
  {
    if (v15 < v55)
      goto LABEL_203;
    v56 = (const char *)(*v78 + v79);
    v55 = v55 | 0x100000000;
  }
  else
  {
    if (v15 < v55)
      goto LABEL_203;
    v56 = (const char *)(*v78 + 2 * v79);
  }
LABEL_153:
  v57 = v55;
  if ((v55 & 0xFF00000000) == 0)
  {
    result = WTF::parseInteger<unsigned char,char16_t>((uint64_t)v56, v55, 10, 0);
    goto LABEL_156;
  }
LABEL_154:
  result = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v56, v57, 10, 0);
LABEL_156:
  if (!BYTE1(result))
    goto LABEL_213;
  v6 |= v4 << 40;
  v4 = result;
  v87 = 18;
  v86 = xmmword_1969F7E5A;
  v58 = &v86;
  v59 = 17;
  do
  {
    v60 = (unsigned __int8 *)v58 + (v59 >> 1);
    v62 = *v60;
    v61 = (__int128 *)(v60 + 1);
    v63 = v59 >> 1;
    v59 += ~(v59 >> 1);
    if (v62 < result)
      v58 = v61;
    else
      v59 = v63;
  }
  while (v59);
  if (v58 == (__int128 *)v88)
    goto LABEL_213;
  if (*(unsigned __int8 *)v58 > result)
    goto LABEL_213;
  result = WTF::StringView::SplitResult::Iterator::operator++();
  if (*(_DWORD *)(result + 8) == (_DWORD)v83)
  {
    if (*(_BYTE *)(result + 16))
      goto LABEL_213;
  }
  v10 = v78;
  v11 = v79;
  v64 = *((unsigned int *)v78 + 2);
  if (v64 <= v79)
  {
    v67 = 0;
    v66 = "";
    goto LABEL_178;
  }
  LODWORD(v65) = v80;
  if (v64 - v79 <= v80)
  {
    if (!v79)
    {
      v66 = (const char *)*v78;
      v65 = v78[1];
      goto LABEL_177;
    }
    LODWORD(v65) = v64 - v79;
  }
  v14 = *((unsigned __int8 *)v78 + 12);
  v65 = v65;
  v15 = v64 - v79;
  if (*((_BYTE *)v78 + 12))
  {
    if (v15 < v65)
      goto LABEL_203;
    v66 = (const char *)(*v78 + v79);
    v65 = v65 | 0x100000000;
  }
  else
  {
    if (v15 < v65)
      goto LABEL_203;
    v66 = (const char *)(*v78 + 2 * v79);
  }
LABEL_177:
  v67 = v65;
  if ((v65 & 0xFF00000000) == 0)
  {
    result = WTF::parseInteger<unsigned char,char16_t>((uint64_t)v66, v65, 10, 0);
    goto LABEL_180;
  }
LABEL_178:
  result = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v66, v67, 10, 0);
LABEL_180:
  if (BYTE1(result))
  {
    v5 = v4 << 48;
    v4 = result;
    *(_QWORD *)&v86 = 0x807060504020100;
    *(_QWORD *)((char *)&v86 + 6) = 0xE0D0C0B0A090807;
    v68 = &v86;
    v69 = 14;
    do
    {
      v70 = (unsigned __int8 *)v68 + (v69 >> 1);
      v72 = *v70;
      v71 = (__int128 *)(v70 + 1);
      v73 = v69 >> 1;
      v69 += ~(v69 >> 1);
      if (v72 < result)
        v68 = v71;
      else
        v69 = v73;
    }
    while (v69);
    if (v68 != (__int128 *)((char *)&v86 + 14)
      && *(unsigned __int8 *)v68 <= result
      && (v43 == 3 || (_BYTE)result))
    {
      result = WTF::StringView::SplitResult::Iterator::operator++();
      if (*(_DWORD *)(result + 8) != (_DWORD)v83 || !*(_BYTE *)(result + 16))
      {
        v10 = v78;
        v11 = v79;
        v15 = *((unsigned int *)v78 + 2);
        if (v15 <= v79)
        {
          v76 = 0;
          v75 = "";
        }
        else
        {
          LODWORD(v74) = v80;
          v14 = v15 - v79;
          if (v15 - v79 <= v80)
            goto LABEL_204;
          while (1)
          {
            v14 = *((unsigned __int8 *)v10 + 12);
            v74 = v74;
            v15 -= v11;
            if (*((_BYTE *)v10 + 12))
            {
              if (v15 >= v74)
              {
                v75 = (const char *)(*v10 + v11);
                v74 = v74 | 0x100000000;
                goto LABEL_206;
              }
            }
            else if (v15 >= v74)
            {
              v75 = (const char *)(*v10 + 2 * v11);
              goto LABEL_206;
            }
LABEL_203:
            __break(1u);
LABEL_204:
            if (!(_DWORD)v11)
              break;
            LODWORD(v74) = v14;
          }
          v75 = (const char *)*v10;
          v74 = v10[1];
LABEL_206:
          v76 = v74;
          if ((v74 & 0xFF00000000) == 0)
          {
            result = WTF::parseInteger<unsigned char,char16_t>((uint64_t)v75, v74, 10, 0);
LABEL_209:
            v77 = result;
            if (result > 1u)
              goto LABEL_213;
            if (!BYTE1(result))
              goto LABEL_213;
            result = WTF::StringView::SplitResult::Iterator::operator++();
            if (*(_DWORD *)(result + 8) != (_DWORD)v83 || !*(_BYTE *)(result + 16))
              goto LABEL_213;
            v18 = v5 | (v4 << 56) | v6 | ((unint64_t)v77 << 32) | v8;
LABEL_31:
            *(_QWORD *)a3 = v3;
            *(_QWORD *)(a3 + 8) = v18;
            *(_BYTE *)(a3 + 16) = 1;
            return result;
          }
        }
        result = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v75, v76, 10, 0);
        goto LABEL_209;
      }
    }
  }
LABEL_213:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      v27 = v3;
      return WTF::StringImpl::destroy(v27, v17);
    }
    *(_DWORD *)v3 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::createVPCodecParametersString@<X0>(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl **v9;
  unint64_t v10;
  unsigned __int8 *v11;
  WTF::StringImpl **v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  unint64_t v18;
  unsigned __int8 *v19;
  WTF::StringImpl **v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  WTF::StringImpl **v24;
  unint64_t v25;
  unsigned __int8 *v26;
  WTF::StringImpl **v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  WTF::StringImpl **v31;
  unint64_t v32;
  unsigned __int8 *v33;
  WTF::StringImpl **v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  char *v43;
  _BYTE *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  unsigned __int8 v50;
  unsigned int v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned __int8 v84;
  unsigned int v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  char *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *result;
  int v94;
  uint64_t v95;
  _WORD *v96;
  size_t v97;
  uint64_t v98;
  _BYTE *v99;
  size_t v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  size_t v104;
  uint64_t v105;
  _BYTE *v106;
  size_t v107;
  unsigned __int128 *v108;
  unsigned __int128 *v109;
  unsigned __int128 v110;
  unsigned __int128 *v111;
  unsigned __int128 *v112;
  unsigned __int128 v113;
  unsigned __int128 *v114;
  unsigned __int128 *v115;
  unsigned __int128 v116;
  _BYTE *v117;
  _BYTE *v118;
  unsigned __int128 v119;
  char v120;
  char v121;
  char v122;
  char v123;
  _BYTE *__dst;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  unsigned int v128;
  char v129;
  char v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132[2];
  char v133;
  _BYTE v134[15];

  *(_QWORD *)&v134[7] = *MEMORY[0x1E0C80C00];
  v127 = 0;
  v129 = 1;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1)
  {
    v6 = *((_DWORD *)v5 + 1);
    *(_DWORD *)v5 += 2;
  }
  else
  {
    v6 = 0;
  }
  v126 = v5;
  v128 = v6;
  v7 = *(unsigned __int8 *)(a1 + 8);
  if (v7 <= 3)
  {
    v8 = *(unsigned __int8 *)(a1 + 9);
    v132[0] = (WTF::StringImpl *)0x29281F1E15140B0ALL;
    *(WTF::StringImpl **)((char *)v132 + 6) = (WTF::StringImpl *)0x3E3D3C3433322928;
    v9 = v132;
    v10 = 14;
    do
    {
      v11 = (unsigned __int8 *)v9 + (v10 >> 1);
      v13 = *v11;
      v12 = (WTF::StringImpl **)(v11 + 1);
      v14 = v10 >> 1;
      v10 += ~(v10 >> 1);
      if (v13 < v8)
        v9 = v12;
      else
        v10 = v14;
    }
    while (v10);
    if (v9 != (WTF::StringImpl **)((char *)&v132[1] + 6) && *(unsigned __int8 *)v9 <= v8)
    {
      v15 = *(unsigned __int8 *)(a1 + 10);
      if (v15 <= 0xC && ((1 << v15) & 0x1500) != 0 && *(unsigned __int8 *)(a1 + 11) <= 3u)
      {
        v16 = *(unsigned __int8 *)(a1 + 13);
        v132[0] = (WTF::StringImpl *)0x908070605040201;
        LODWORD(v132[1]) = 369888010;
        v17 = v132;
        v18 = 12;
        do
        {
          v19 = (unsigned __int8 *)v17 + (v18 >> 1);
          v21 = *v19;
          v20 = (WTF::StringImpl **)(v19 + 1);
          v22 = v18 >> 1;
          v18 += ~(v18 >> 1);
          if (v21 < v16)
            v17 = v20;
          else
            v18 = v22;
        }
        while (v18);
        if (v17 != (WTF::StringImpl **)((char *)&v132[1] + 4) && *(unsigned __int8 *)v17 <= v16)
        {
          v23 = *(unsigned __int8 *)(a1 + 14);
          *(_OWORD *)v132 = xmmword_1969F7E5A;
          v133 = 18;
          v24 = v132;
          v25 = 17;
          do
          {
            v26 = (unsigned __int8 *)v24 + (v25 >> 1);
            v28 = *v26;
            v27 = (WTF::StringImpl **)(v26 + 1);
            v29 = v25 >> 1;
            v25 += ~(v25 >> 1);
            if (v28 < v23)
              v24 = v27;
            else
              v25 = v29;
          }
          while (v25);
          if (v24 != (WTF::StringImpl **)v134 && *(unsigned __int8 *)v24 <= v23)
          {
            v30 = *(unsigned __int8 *)(a1 + 15);
            v132[0] = (WTF::StringImpl *)0x807060504020100;
            *(WTF::StringImpl **)((char *)v132 + 6) = (WTF::StringImpl *)0xE0D0C0B0A090807;
            v31 = v132;
            v32 = 14;
            do
            {
              v33 = (unsigned __int8 *)v31 + (v32 >> 1);
              v35 = *v33;
              v34 = (WTF::StringImpl **)(v33 + 1);
              v36 = v32 >> 1;
              v32 += ~(v32 >> 1);
              if (v35 < v30)
                v31 = v34;
              else
                v32 = v36;
            }
            while (v32);
            if (v31 != (WTF::StringImpl **)((char *)&v132[1] + 6)
              && *(unsigned __int8 *)v31 <= v30
              && *(unsigned __int8 *)(a1 + 12) < 2u)
            {
              BYTE3(v131) = (v7 - 10 * ((429496730 * (unint64_t)v7) >> 32)) | 0x30;
              WTF::String::String();
              v37 = 0;
              v38 = *(_BYTE *)(a1 + 9);
              do
              {
                v39 = v38;
                *((_BYTE *)&v125 + v37-- + 3) = (v38 % 0xAu) | 0x30;
                v38 /= 0xAu;
              }
              while (v39 > 9);
              if (v37 > 0)
                goto LABEL_208;
              if (((WTF::String::String(), v40 = v131, v41 = v132[0], (v42 = v127) != 0) || (v42 = v126) != 0)
                && (*((_BYTE *)v42 + 16) & 4) == 0
                || v132[0] && (*((_BYTE *)v132[0] + 16) & 4) == 0
                || v131 && (*((_BYTE *)v131 + 16) & 4) == 0)
              {
                v43 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v126);
                if (v43)
                  WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v43, (int8x16_t *)".0", 2, (uint64_t)v41, 46, (uint64_t)v40, 46);
              }
              else
              {
                v96 = (_WORD *)MEMORY[0x19AEA4824](&v126);
                if (v96)
                {
                  *v96 = 12334;
                  __dst = v96 + 1;
                  if (v41)
                  {
                    v44 = (_BYTE *)*((_QWORD *)v41 + 1);
                    v97 = *((unsigned int *)v41 + 1);
                    if ((*((_BYTE *)v41 + 16) & 4) != 0)
                    {
                      if ((_DWORD)v97)
                      {
                        if ((_DWORD)v97 == 1)
                          *__dst = *v44;
                        else
                          memcpy(__dst, v44, v97);
                      }
                    }
                    else
                    {
                      if (v97 < 0x10)
                      {
                        v109 = (unsigned __int128 *)(v96 + 1);
                      }
                      else
                      {
                        v108 = (unsigned __int128 *)(v96 + 1);
                        v109 = (unsigned __int128 *)&__dst[v97 & 0xFFFFFFF0];
                        do
                        {
                          v110 = (unsigned __int128)vld2q_s8(v44);
                          v44 += 32;
                          *v108++ = v110;
                        }
                        while (v108 != v109);
                      }
                      while (v109 != (unsigned __int128 *)&__dst[v97])
                      {
                        v121 = *v44;
                        v44 += 2;
                        *(_BYTE *)v109 = v121;
                        v109 = (unsigned __int128 *)((char *)v109 + 1);
                      }
                    }
                    v98 = *((unsigned int *)v41 + 1);
                  }
                  else
                  {
                    v98 = 0;
                  }
                  __dst[v98] = 46;
                  v99 = &__dst[v98 + 1];
                  if (v40)
                  {
                    v44 = (_BYTE *)*((_QWORD *)v40 + 1);
                    v100 = *((unsigned int *)v40 + 1);
                    if ((*((_BYTE *)v40 + 16) & 4) != 0)
                    {
                      if ((_DWORD)v100)
                      {
                        if ((_DWORD)v100 == 1)
                          *v99 = *v44;
                        else
                          memcpy(v99, v44, v100);
                      }
                    }
                    else
                    {
                      if (v100 < 0x10)
                      {
                        v111 = (unsigned __int128 *)&__dst[v98 + 1];
                      }
                      else
                      {
                        v111 = (unsigned __int128 *)&v99[v100 & 0xFFFFFFF0];
                        v112 = (unsigned __int128 *)&__dst[v98 + 1];
                        do
                        {
                          v113 = (unsigned __int128)vld2q_s8(v44);
                          v44 += 32;
                          *v112++ = v113;
                        }
                        while (v112 != v111);
                      }
                      while (v111 != (unsigned __int128 *)&v99[v100])
                      {
                        v122 = *v44;
                        v44 += 2;
                        *(_BYTE *)v111 = v122;
                        v111 = (unsigned __int128 *)((char *)v111 + 1);
                      }
                    }
                    v101 = *((unsigned int *)v40 + 1);
                  }
                  else
                  {
                    v101 = 0;
                  }
                  v99[v101] = 46;
                }
              }
              v45 = v131;
              v131 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v44);
                else
                  *(_DWORD *)v45 -= 2;
              }
              v46 = v132[0];
              v132[0] = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v44);
                else
                  *(_DWORD *)v46 -= 2;
              }
              if (*(unsigned __int8 *)(a1 + 14) <= 9u)
              {
                LOBYTE(v132[0]) = 48;
                if (v127 && ((v47 = v128, v128 < *((_DWORD *)v127 + 1)) ? (v48 = v126 == 0) : (v48 = 0), v48))
                {
                  v94 = *((_DWORD *)v127 + 4);
                  v95 = *((_QWORD *)v127 + 1);
                  ++v128;
                  if ((v94 & 4) != 0)
                    *(_BYTE *)(v95 + v47) = 48;
                  else
                    *(_WORD *)(v95 + 2 * v47) = 48;
                }
                else
                {
                  WTF::StringBuilder::append();
                }
              }
              v49 = 0;
              v50 = *(_BYTE *)(a1 + 10);
              do
              {
                v51 = v50;
                *((_BYTE *)&v132[-1] + v49-- + 3) = (v50 % 0xAu) | 0x30;
                v50 /= 0xAu;
              }
              while (v51 > 9);
              if (v49 > 0)
                goto LABEL_208;
              WTF::String::String();
              v52 = v132[0];
              if (v128 || v127)
              {
                if (v132[0] && (*((_BYTE *)v132[0] + 16) & 4) == 0)
                  WTF::StringBuilder::append();
                else
                  WTF::StringBuilder::append();
                goto LABEL_74;
              }
              if (v132[0])
                *(_DWORD *)v132[0] += 2;
              v53 = v126;
              v126 = v52;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                {
                  WTF::StringImpl::destroy(v53, a2);
                  v52 = v132[0];
                  if (!v132[0])
                    goto LABEL_73;
                  goto LABEL_72;
                }
                *(_DWORD *)v53 -= 2;
              }
              if (!v52)
              {
LABEL_73:
                v128 = v52;
LABEL_74:
                v54 = v132[0];
                v132[0] = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, a2);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                if (_MergedGlobals_229 == 1)
                {
                  v55 = byte_1ECE83E6B;
                }
                else
                {
                  qword_1ECE83E60 = 0;
                  unk_1ECE83E68 = 0x101010001080A00;
                  v55 = 1;
                  _MergedGlobals_229 = 1;
                }
                v56 = *(unsigned __int8 *)(a1 + 11);
                if (v56 == v55
                  && *(unsigned __int8 *)(a1 + 12) == byte_1ECE83E6C
                  && *(unsigned __int8 *)(a1 + 13) == byte_1ECE83E6D
                  && *(unsigned __int8 *)(a1 + 14) == byte_1ECE83E6E
                  && *(unsigned __int8 *)(a1 + 15) == byte_1ECE83E6F)
                {
                  goto LABEL_148;
                }
                v57 = 0;
                do
                {
                  v58 = v56;
                  *((_BYTE *)v132 + v57-- + 3) = (v56 % 0xAu) | 0x30;
                  LOBYTE(v56) = v56 / 0xAu;
                }
                while (v58 > 9);
                if (v57 <= 0)
                {
                  WTF::String::String();
                  LODWORD(v132[1]) = 2;
                  v131 = v125;
                  v132[0] = (WTF::StringImpl *)".0";
                  v130 = 46;
                  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v126, (int8x16_t **)v132, (uint64_t *)&v131, &v130);
                  v60 = v125;
                  v125 = 0;
                  if (v60)
                  {
                    if (*(_DWORD *)v60 == 2)
                      WTF::StringImpl::destroy(v60, v59);
                    else
                      *(_DWORD *)v60 -= 2;
                  }
                  v61 = *(unsigned __int8 *)(a1 + 13);
                  if (v61 <= 9)
                  {
                    LOBYTE(v132[0]) = 48;
                    if (!v127 || (v62 = v128, v128 >= *((_DWORD *)v127 + 1)) || v126)
                    {
                      WTF::StringBuilder::append();
                    }
                    else
                    {
                      v63 = *((_DWORD *)v127 + 4);
                      v64 = *((_QWORD *)v127 + 1);
                      ++v128;
                      if ((v63 & 4) != 0)
                        *(_BYTE *)(v64 + v62) = 48;
                      else
                        *(_WORD *)(v64 + 2 * v62) = 48;
                    }
                    LOBYTE(v61) = *(_BYTE *)(a1 + 13);
                  }
                  v65 = 0;
                  do
                  {
                    v66 = v61;
                    *((_BYTE *)v132 + v65-- + 3) = (v61 % 0xAu) | 0x30;
                    LOBYTE(v61) = v61 / 0xAu;
                  }
                  while (v66 > 9);
                  if (v65 <= 0)
                  {
                    WTF::String::String();
                    v132[0] = v131;
                    LOBYTE(v125) = 46;
                    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v126, (uint64_t *)v132, (char *)&v125);
                    v68 = v131;
                    v131 = 0;
                    if (v68)
                    {
                      if (*(_DWORD *)v68 == 2)
                        WTF::StringImpl::destroy(v68, v67);
                      else
                        *(_DWORD *)v68 -= 2;
                    }
                    v69 = *(unsigned __int8 *)(a1 + 14);
                    if (v69 <= 9)
                    {
                      LOBYTE(v132[0]) = 48;
                      if (!v127 || (v70 = v128, v128 >= *((_DWORD *)v127 + 1)) || v126)
                      {
                        WTF::StringBuilder::append();
                      }
                      else
                      {
                        v71 = *((_DWORD *)v127 + 4);
                        v72 = *((_QWORD *)v127 + 1);
                        ++v128;
                        if ((v71 & 4) != 0)
                          *(_BYTE *)(v72 + v70) = 48;
                        else
                          *(_WORD *)(v72 + 2 * v70) = 48;
                      }
                      LOBYTE(v69) = *(_BYTE *)(a1 + 14);
                    }
                    v73 = 0;
                    do
                    {
                      v74 = v69;
                      *((_BYTE *)v132 + v73-- + 3) = (v69 % 0xAu) | 0x30;
                      LOBYTE(v69) = v69 / 0xAu;
                    }
                    while (v74 > 9);
                    if (v73 <= 0)
                    {
                      WTF::String::String();
                      v132[0] = v131;
                      LOBYTE(v125) = 46;
                      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v126, (uint64_t *)v132, (char *)&v125);
                      v76 = v131;
                      v131 = 0;
                      if (v76)
                      {
                        if (*(_DWORD *)v76 == 2)
                          WTF::StringImpl::destroy(v76, v75);
                        else
                          *(_DWORD *)v76 -= 2;
                      }
                      v77 = *(unsigned __int8 *)(a1 + 15);
                      if (v77 <= 9)
                      {
                        LOBYTE(v132[0]) = 48;
                        if (!v127 || (v78 = v128, v128 >= *((_DWORD *)v127 + 1)) || v126)
                        {
                          WTF::StringBuilder::append();
                        }
                        else
                        {
                          v79 = *((_DWORD *)v127 + 4);
                          v80 = *((_QWORD *)v127 + 1);
                          ++v128;
                          if ((v79 & 4) != 0)
                            *(_BYTE *)(v80 + v78) = 48;
                          else
                            *(_WORD *)(v80 + 2 * v78) = 48;
                        }
                        LOBYTE(v77) = *(_BYTE *)(a1 + 15);
                      }
                      v81 = 0;
                      do
                      {
                        v82 = v77;
                        *((_BYTE *)&v132[-1] + v81-- + 3) = (v77 % 0xAu) | 0x30;
                        LOBYTE(v77) = v77 / 0xAu;
                      }
                      while (v82 > 9);
                      if (v81 <= 0)
                      {
                        WTF::String::String();
                        v83 = 0;
                        v84 = *(_BYTE *)(a1 + 12);
                        do
                        {
                          v85 = v84;
                          *((_BYTE *)&v125 + v83-- + 3) = (v84 % 0xAu) | 0x30;
                          v84 /= 0xAu;
                        }
                        while (v85 > 9);
                        if (v83 <= 0)
                        {
                          WTF::String::String();
                          v86 = v131;
                          v87 = v132[0];
                          v88 = v127;
                          if ((v127 || (v88 = v126) != 0) && (*((_BYTE *)v88 + 16) & 4) == 0
                            || v132[0] && (*((_BYTE *)v132[0] + 16) & 4) == 0
                            || v131 && (*((_BYTE *)v131 + 16) & 4) == 0)
                          {
                            v89 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v126);
                            if (v89)
                              WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v89, (uint64_t)v87, (int8x16_t *)".0", 2, (uint64_t)v86);
                          }
                          else
                          {
                            v102 = (_BYTE *)MEMORY[0x19AEA4824](&v126);
                            if (v102)
                            {
                              v103 = v102;
                              if (v87)
                              {
                                a2 = (WTF::StringImpl *)*((_QWORD *)v87 + 1);
                                v104 = *((unsigned int *)v87 + 1);
                                if ((*((_BYTE *)v87 + 16) & 4) != 0)
                                {
                                  if ((_DWORD)v104)
                                  {
                                    if ((_DWORD)v104 == 1)
                                      *v102 = *(_BYTE *)a2;
                                    else
                                      memcpy(v102, a2, v104);
                                  }
                                }
                                else
                                {
                                  if (v104 < 0x10)
                                  {
                                    v114 = (unsigned __int128 *)v102;
                                  }
                                  else
                                  {
                                    v114 = (unsigned __int128 *)&v102[v104 & 0xFFFFFFF0];
                                    v115 = (unsigned __int128 *)v102;
                                    do
                                    {
                                      v116 = (unsigned __int128)vld2q_s8((const char *)a2);
                                      a2 = (WTF::StringImpl *)((char *)a2 + 32);
                                      *v115++ = v116;
                                    }
                                    while (v115 != v114);
                                  }
                                  while (v114 != (unsigned __int128 *)&v102[v104])
                                  {
                                    v123 = *(_BYTE *)a2;
                                    a2 = (WTF::StringImpl *)((char *)a2 + 2);
                                    *(_BYTE *)v114 = v123;
                                    v114 = (unsigned __int128 *)((char *)v114 + 1);
                                  }
                                }
                                v105 = *((unsigned int *)v87 + 1);
                              }
                              else
                              {
                                v105 = 0;
                              }
                              *(_WORD *)&v103[v105] = 12334;
                              v106 = &v103[v105 + 2];
                              if (v86)
                              {
                                a2 = (WTF::StringImpl *)*((_QWORD *)v86 + 1);
                                v107 = *((unsigned int *)v86 + 1);
                                if ((*((_BYTE *)v86 + 16) & 4) != 0)
                                {
                                  if ((_DWORD)v107)
                                  {
                                    if ((_DWORD)v107 == 1)
                                      *v106 = *(_BYTE *)a2;
                                    else
                                      memcpy(v106, a2, v107);
                                  }
                                }
                                else
                                {
                                  v117 = &v106[v107];
                                  if (v107 >= 0x10)
                                  {
                                    v118 = &v106[v107 & 0xFFFFFFF0];
                                    do
                                    {
                                      v119 = (unsigned __int128)vld2q_s8((const char *)a2);
                                      a2 = (WTF::StringImpl *)((char *)a2 + 32);
                                      *(_OWORD *)v106 = v119;
                                      v106 += 16;
                                    }
                                    while (v106 != v118);
                                    v106 = v118;
                                  }
                                  while (v106 != v117)
                                  {
                                    v120 = *(_BYTE *)a2;
                                    a2 = (WTF::StringImpl *)((char *)a2 + 2);
                                    *v106++ = v120;
                                  }
                                }
                              }
                            }
                          }
                          v90 = v131;
                          v131 = 0;
                          if (v90)
                          {
                            if (*(_DWORD *)v90 == 2)
                              WTF::StringImpl::destroy(v90, a2);
                            else
                              *(_DWORD *)v90 -= 2;
                          }
                          v91 = v132[0];
                          v132[0] = 0;
                          if (v91)
                          {
                            if (*(_DWORD *)v91 == 2)
                              WTF::StringImpl::destroy(v91, a2);
                            else
                              *(_DWORD *)v91 -= 2;
                          }
LABEL_148:
                          v5 = v126;
                          goto LABEL_149;
                        }
                      }
                    }
                  }
                }
LABEL_208:
                __break(1u);
              }
LABEL_72:
              LODWORD(v52) = *((_DWORD *)v52 + 1);
              goto LABEL_73;
            }
          }
        }
      }
    }
  }
LABEL_149:
  if (v5
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v126),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v126),
        (v5 = v126) != 0))
  {
    *(_DWORD *)v5 += 2;
  }
  *a3 = v5;
  v92 = v127;
  v127 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
      WTF::StringImpl::destroy(v92, a2);
    else
      *(_DWORD *)v92 -= 2;
  }
  result = v126;
  v126 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

double *WebCore::HistoricalVelocityData::velocityForNewData@<X0>(double *result@<X0>, uint64_t a2@<X8>, unsigned int a3@<S0>, unsigned int a4@<S1>, double a5@<D2>, double a6@<D3>)
{
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  double v10;
  int *v11;
  double v12;
  float v13;
  unsigned int v14;
  int *v15;
  int v16;
  int *v17;

  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v6 = *(_DWORD *)result;
  if (*(_DWORD *)result)
  {
    v7 = *((_DWORD *)result + 1);
    v8 = v6 - 1 <= v7 ? 0 : *(_DWORD *)result;
    v9 = v7 - v6 + v8 + 1;
    v10 = a6 - result[3 * v9 + 2];
    if (v10 > 0.0166666667)
    {
      v11 = (int *)&result[3 * v9];
      v12 = (a5 - *((double *)v11 + 4)) / v10;
      *(float32x2_t *)a2 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(vsub_f32((float32x2_t)__PAIR64__(a4, a3), *(float32x2_t *)(v11 + 6))), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10, 0)));
      v13 = v12;
      *(float *)(a2 + 8) = v13;
      *(double *)(a2 + 16) = a6;
    }
  }
  if (a6 - result[1] <= 0.0166666667)
  {
    v17 = (int *)&result[3 * *((unsigned int *)result + 1)];
    *((double *)v17 + 2) = a6;
    *((_QWORD *)v17 + 3) = a3 | ((unint64_t)a4 << 32);
    *((double *)v17 + 4) = a5;
  }
  else
  {
    v14 = (*((_DWORD *)result + 1) + 1) % 3u;
    v15 = (int *)&result[3 * v14];
    *((double *)v15 + 2) = a6;
    v15[6] = a3;
    v15[7] = a4;
    *((double *)v15 + 4) = a5;
    if ((v6 + 1) < 3)
      v16 = v6 + 1;
    else
      v16 = 3;
    *(_DWORD *)result = v16;
    *((_DWORD *)result + 1) = v14;
    result[1] = a6;
  }
  return result;
}

unsigned int *WebCore::WebMResourceClient::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned int *result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  result = (unsigned int *)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v35, a2, a3, 2);
  if (!v35)
  {
    *a4 = 0;
    return result;
  }
  v8 = WTF::fastMalloc((WTF *)0x28);
  v9 = v35;
  v10 = *(_QWORD *)(v35 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v10);
LABEL_7:
  ++*(_QWORD *)(v10 + 8);
  v12 = __ldxr((unsigned __int8 *)v10);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  *(_DWORD *)(v8 + 8) = 1;
  v13 = (unsigned int *)(v8 + 8);
  *(_QWORD *)v8 = off_1E3410148;
  v14 = *(_QWORD *)(a1 + 8);
  if (!v14)
  {
    v16 = 0;
    goto LABEL_24;
  }
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
LABEL_16:
    MEMORY[0x19AEA534C](v14);
    goto LABEL_17;
  }
  if (__stxr(1u, (unsigned __int8 *)v14))
    goto LABEL_16;
LABEL_17:
  if (*(_QWORD *)(v14 + 24))
  {
    ++*(_QWORD *)(v14 + 16);
    v16 = v14;
  }
  else
  {
    v16 = 0;
  }
  v17 = __ldxr((unsigned __int8 *)v14);
  if (v17 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v14))
      goto LABEL_24;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v14);
LABEL_24:
  *(_QWORD *)(v8 + 16) = v16;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(v8 + 32) = v9;
  do
    v18 = __ldaxr(v13);
  while (__stlxr(v18 + 1, v13));
  v19 = v35;
  v20 = (unsigned __int8 *)(v35 + 24);
  if (__ldaxr((unsigned __int8 *)(v35 + 24)))
  {
    __clrex();
LABEL_29:
    MEMORY[0x19AEA534C](v20);
    goto LABEL_30;
  }
  if (__stxr(1u, v20))
    goto LABEL_29;
LABEL_30:
  result = *(unsigned int **)(v19 + 16);
  *(_QWORD *)(v19 + 16) = v8;
  if (result)
  {
    v22 = result + 2;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v25 = __ldxr(v20);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_39;
  }
  if (__stlxr(0, v20))
LABEL_39:
    result = (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v20);
  *a4 = v8;
  v26 = v35;
  v35 = 0;
  if (!v26)
    return result;
  v27 = *(_QWORD *)(v26 + 8);
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v27))
  {
    goto LABEL_45;
  }
  result = (unsigned int *)MEMORY[0x19AEA534C](v27);
LABEL_45:
  v29 = *(_QWORD *)(v27 + 8);
  v30 = v29 - 1;
  *(_QWORD *)(v27 + 8) = v29 - 1;
  if (v29 == 1)
  {
    v34 = *(_QWORD *)(v27 + 16);
    v31 = *(_QWORD *)(v27 + 24);
    *(_QWORD *)(v27 + 24) = 0;
    v32 = v34 != 0;
  }
  else
  {
    v31 = 0;
    v32 = 1;
  }
  v33 = __ldxr((unsigned __int8 *)v27);
  if (v33 != 1)
  {
    __clrex();
LABEL_52:
    result = (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v27);
    if (v30)
      return result;
    goto LABEL_53;
  }
  if (__stlxr(0, (unsigned __int8 *)v27))
    goto LABEL_52;
  if (v30)
    return result;
LABEL_53:
  if (v31)
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
  if (!v32)
    return (unsigned int *)WTF::fastFree((WTF *)v27, v7);
  return result;
}

unsigned __int8 *WebCore::WebMResourceClient::dataReceived(unsigned __int8 *this, WebCore::PlatformMediaResource *a2, const WebCore::SharedBuffer *a3)
{
  uint64_t v3;
  unsigned __int8 **v5;
  int v7;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
    return this;
  v5 = (unsigned __int8 **)*((_QWORD *)this + 3);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
LABEL_5:
    this = (unsigned __int8 *)MEMORY[0x19AEA534C](v3, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v3))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v5 = 0;
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v5)
        return this;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v5)
  {
LABEL_12:
    (*((void (**)(unsigned __int8 **, const WebCore::SharedBuffer *))*v5 + 2))(v5, a3);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(v5[1]);
  }
  return this;
}

unsigned __int8 *WebCore::WebMResourceClient::loadFailed(unsigned __int8 *this, WebCore::PlatformMediaResource *a2, const WebCore::ResourceError *a3)
{
  uint64_t v3;
  unsigned __int8 **v5;
  int v7;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
    return this;
  v5 = (unsigned __int8 **)*((_QWORD *)this + 3);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
LABEL_5:
    this = (unsigned __int8 *)MEMORY[0x19AEA534C](v3, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v3))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v5 = 0;
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v5)
        return this;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v5)
  {
LABEL_12:
    (*((void (**)(unsigned __int8 **, const WebCore::ResourceError *))*v5 + 3))(v5, a3);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(v5[1]);
  }
  return this;
}

unsigned __int8 *WebCore::WebMResourceClient::loadFinished(unsigned __int8 *this, WebCore::PlatformMediaResource *a2, const WebCore::NetworkLoadMetrics *a3)
{
  uint64_t v3;
  unsigned __int8 **v4;
  int v6;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
    return this;
  v4 = (unsigned __int8 **)*((_QWORD *)this + 3);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
LABEL_5:
    this = (unsigned __int8 *)MEMORY[0x19AEA534C](v3, a2, a3);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v3))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v4)
        return this;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v4)
  {
LABEL_12:
    (*((void (**)(unsigned __int8 **, WebCore::PlatformMediaResource *, const WebCore::NetworkLoadMetrics *))*v4
     + 4))(v4, a2, a3);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(v4[1]);
  }
  return this;
}

WTF **WebCore::SmallCapsState::clear(WebCore::SmallCapsState *this)
{
  WTF **v2;
  WTF **result;
  WTF *v4;
  void *v5;
  WTF *v6;
  void *v7;

  v2 = (WTF **)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::Font::~Font(v2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  result = (WTF **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::Font::~Font(result);
      result = (WTF **)WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  *((_BYTE *)this + 24) = 0;
  return result;
}

WTF **WebCore::SmallCapsState::setSmallCapsData(WTF ***this, WTF **a2, const WebCore::FontDescription *a3)
{
  WTF **v5;
  WebCore::Font *v6;
  WTF **v7;
  uint64_t v8;
  WebCore::Font::DerivedFonts *v9;
  WTF *v10;
  void *v11;
  WebCore::Font *v12;
  WTF ***v13;
  WebCore::Font *v14;
  WTF **result;
  WTF *v16;
  void *v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  void *v21;
  WebCore::Font *v22;

  if (a2)
    ++*(_DWORD *)a2;
  v5 = *this;
  *this = a2;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::Font::~Font(v5);
      WTF::fastFree(v16, v17);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  v6 = (WebCore::Font *)WebCore::Font::noSynthesizableFeaturesFont((WebCore::Font *)a2);
  ++*(_DWORD *)v6;
  v7 = this[1];
  this[1] = (WTF **)v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::Font::~Font(v7);
      WTF::fastFree(v18, v19);
      v6 = (WebCore::Font *)this[1];
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  v8 = *((_QWORD *)v6 + 33);
  if (!v8)
  {
    v8 = WTF::fastMalloc((WTF *)0x38);
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_QWORD *)(v8 + 48) = 0;
    v9 = (WebCore::Font::DerivedFonts *)*((_QWORD *)v6 + 33);
    *((_QWORD *)v6 + 33) = v8;
    if (v9)
    {
      WebCore::Font::DerivedFonts::~DerivedFonts(v9);
      WTF::fastFree(v10, v11);
      v8 = *((_QWORD *)v6 + 33);
    }
  }
  v12 = *(WebCore::Font **)v8;
  if (*(_QWORD *)v8)
  {
    v13 = this + 2;
LABEL_17:
    ++*(_DWORD *)v12;
    goto LABEL_18;
  }
  WebCore::Font::platformCreateScaledFont(v6, 0.7, &v22);
  v12 = v22;
  v14 = *(WebCore::Font **)v8;
  *(_QWORD *)v8 = v22;
  if (v14)
  {
    WTF::RefCounted<WebCore::Font>::deref(v14);
    v12 = *(WebCore::Font **)v8;
  }
  v13 = this + 2;
  if (v12)
    goto LABEL_17;
LABEL_18:
  result = *v13;
  *v13 = (WTF **)v12;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::Font::~Font(result);
      result = (WTF **)WTF::fastFree(v20, v21);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  *((_BYTE *)this + 25) = *((_BYTE *)this + 24);
  *((_BYTE *)this + 24) = 1;
  return result;
}

uint64_t WebCore::TextRun::operator[](uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1 && *(_DWORD *)(a1 + 4) > a2)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(a1 + 16) & 4) != 0)
      return *(unsigned __int8 *)(v2 + a2);
    else
      return *(unsigned __int16 *)(v2 + 2 * a2);
  }
  else
  {
    result = 119;
    __break(0xC471u);
  }
  return result;
}

_QWORD *WebCore::WidthIterator::applyCSSVisibilityRules(WebCore::GlyphBuffer &,unsigned int)::$_4::operator()<unsigned int,float>(_QWORD *result, unsigned int a2, float a3)
{
  uint64_t v3;
  double *v4;
  double v5;
  float v6;
  float *v7;
  double v8;
  uint64_t v9;

  v3 = *result;
  if (*(_DWORD *)(*result + 10284) <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v4 = (double *)(*(_QWORD *)(v3 + 10272) + 16 * a2);
    v5 = *v4;
    v6 = v4[1];
    *v4 = a3;
    v4[1] = v6;
    *(float *)&v5 = v5;
    v7 = (float *)result[2];
    *(float *)(result[1] + 56) = (float)(a3 - *(float *)&v5) + *(float *)(result[1] + 56);
    v8 = (float)-*v7;
    v9 = *(_QWORD *)(v3 + 26672) + 16 * a2;
    *(_QWORD *)v9 = 0;
    *(double *)(v9 + 8) = v8;
  }
  return result;
}

PAL *WebCore::colorSpaceFromFormatDescription(PAL *this, const opaqueCMFormatDescription *a2, const __CFString *a3)
{
  PAL *v3;
  const void *Extension;
  const __CFString *v5;
  uint64_t v6;
  const void *v7;
  const __CFString *v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  const __CFString *v12;
  unsigned __int8 v13;
  uint64_t v14;
  float PresentationDimensions;
  double v16;
  float v17;
  const opaqueCMFormatDescription *v18;
  PAL *v19;
  const __CFString **v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  const __CFBoolean *v24;
  int Value;
  uint64_t v26;
  const __CFString *v27;
  const __CFString *v28;
  uint64_t v29;

  if (!this)
    return this;
  v3 = this;
  if (PAL::get_CoreMedia_kCMFormatDescriptionExtension_ColorPrimaries(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionExtension_ColorPrimaries(void)::once, &__block_literal_global_21);
  Extension = (const void *)PAL::softLinkCoreMediaCMFormatDescriptionGetExtension(v3, (const opaqueCMFormatDescription *)PAL::get_CoreMedia_kCMFormatDescriptionExtension_ColorPrimaries(void)::constantCoreMediakCMFormatDescriptionExtension_ColorPrimaries, a3);
  v6 = (uint64_t)WTF::dynamic_cf_cast<__CFString const*>(Extension);
  if (PAL::get_CoreMedia_kCMFormatDescriptionExtension_TransferFunction(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionExtension_TransferFunction(void)::once, &__block_literal_global_63);
  v7 = (const void *)PAL::softLinkCoreMediaCMFormatDescriptionGetExtension(v3, (const opaqueCMFormatDescription *)PAL::get_CoreMedia_kCMFormatDescriptionExtension_TransferFunction(void)::constantCoreMediakCMFormatDescriptionExtension_TransferFunction, v5);
  v9 = (uint64_t)WTF::dynamic_cf_cast<__CFString const*>(v7);
  if (PAL::get_CoreMedia_kCMFormatDescriptionExtension_YCbCrMatrix(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionExtension_YCbCrMatrix(void)::once, &__block_literal_global_69);
  v10 = (const void *)PAL::softLinkCoreMediaCMFormatDescriptionGetExtension(v3, (const opaqueCMFormatDescription *)PAL::get_CoreMedia_kCMFormatDescriptionExtension_YCbCrMatrix(void)::constantCoreMediakCMFormatDescriptionExtension_YCbCrMatrix, v8);
  v11 = WTF::dynamic_cf_cast<__CFString const*>(v10);
  v14 = (uint64_t)v11;
  if (v6 && v9 && v11)
    goto LABEL_27;
  PresentationDimensions = PAL::softLinkCoreMediaCMVideoFormatDescriptionGetPresentationDimensions(v3, (const opaqueCMFormatDescription *)1, 1u, v13);
  v17 = v16;
  v19 = (PAL *)PAL::softLinkCoreMediaCMFormatDescriptionGetMediaSubType[0](v3, v18);
  v28 = 0;
  v29 = 0;
  v27 = 0;
  PAL::softLinkVideoToolboxVTGetDefaultColorAttributesWithHints(v19, 0, (const __CFString *)PresentationDimensions, (unint64_t)v17, (unint64_t)&v29, &v28, &v27, v20);
  if (v29)
    v21 = v6 == 0;
  else
    v21 = 0;
  if (v21)
    v6 = v29;
  if (v28)
    v22 = v9 == 0;
  else
    v22 = 0;
  if (v22)
    v9 = (uint64_t)v28;
  if (v27)
    v23 = v14 == 0;
  else
    v23 = 0;
  if (v23)
    v14 = (uint64_t)v27;
  if (v6)
  {
LABEL_27:
    if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_709_2(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_709_2(void)::once, &__block_literal_global_54_1);
    if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_709_2(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_ITU_R_709_2
      && CFEqual((CFTypeRef)v6, (CFTypeRef)PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_709_2(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_ITU_R_709_2))
    {
      v6 = 256;
      if (!v9)
        goto LABEL_58;
LABEL_47:
      if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_709_2(void)::once != -1)
        dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_709_2(void)::once, &__block_literal_global_66_0);
      if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_709_2(void)::constantCoreMediakCMFormatDescriptionTransferFunction_ITU_R_709_2
        && CFEqual((CFTypeRef)v9, (CFTypeRef)PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_709_2(void)::constantCoreMediakCMFormatDescriptionTransferFunction_ITU_R_709_2))
      {
        v9 = 0x1000000;
      }
      else if (PAL::constantCoreMediakCMFormatDescriptionTransferFunction_sRGB)
      {
        if (CFEqual((CFTypeRef)v9, (CFTypeRef)PAL::constantCoreMediakCMFormatDescriptionTransferFunction_sRGB))
          v9 = 16908288;
        else
          v9 = 0;
      }
      else
      {
        v9 = 0;
      }
      goto LABEL_58;
    }
    if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_EBU_3213(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_EBU_3213(void)::once, &__block_literal_global_57);
    if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_EBU_3213(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_EBU_3213
      && CFEqual((CFTypeRef)v6, (CFTypeRef)PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_EBU_3213(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_EBU_3213))
    {
      v6 = 257;
      if (!v9)
        goto LABEL_58;
      goto LABEL_47;
    }
    if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_SMPTE_C(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_SMPTE_C(void)::once, &__block_literal_global_60_0);
    if (!PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_SMPTE_C(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_SMPTE_C)
    {
      v6 = 0;
      if (v9)
        goto LABEL_47;
      goto LABEL_58;
    }
    if (CFEqual((CFTypeRef)v6, (CFTypeRef)PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_SMPTE_C(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_SMPTE_C))
    {
      v6 = 258;
    }
    else
    {
      v6 = 0;
    }
  }
  if (v9)
    goto LABEL_47;
LABEL_58:
  if (v14)
  {
    if (PAL::get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::once, &__block_literal_global_72_0);
    if (PAL::get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::constantCoreMediakCVImageBufferYCbCrMatrix_ITU_R_709_2
      && CFEqual((CFTypeRef)v14, (CFTypeRef)PAL::get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::constantCoreMediakCVImageBufferYCbCrMatrix_ITU_R_709_2))
    {
      v14 = 0x10100000000;
    }
    else
    {
      if (PAL::get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_601_4(void)::once != -1)
        dispatch_once(&PAL::get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_601_4(void)::once, &__block_literal_global_75);
      if (PAL::get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_601_4(void)::constantCoreMediakCVImageBufferYCbCrMatrix_ITU_R_601_4
        && CFEqual((CFTypeRef)v14, (CFTypeRef)PAL::get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_601_4(void)::constantCoreMediakCVImageBufferYCbCrMatrix_ITU_R_601_4))
      {
        v14 = 0x10200000000;
      }
      else
      {
        if (PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995(void)::once != -1)
          dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995(void)::once, &__block_literal_global_78_0);
        if (PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995(void)::constantCoreMediakCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995)
        {
          if (CFEqual((CFTypeRef)v14, (CFTypeRef)PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995(void)::constantCoreMediakCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995))
          {
            v14 = 0x10300000000;
          }
          else
          {
            v14 = 0;
          }
        }
        else
        {
          v14 = 0;
        }
      }
    }
  }
  if (PAL::get_CoreMedia_kCMFormatDescriptionExtension_FullRangeVideo(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionExtension_FullRangeVideo(void)::once, &__block_literal_global_33);
  v24 = (const __CFBoolean *)PAL::softLinkCoreMediaCMFormatDescriptionGetExtension(v3, (const opaqueCMFormatDescription *)PAL::get_CoreMedia_kCMFormatDescriptionExtension_FullRangeVideo(void)::constantCoreMediakCMFormatDescriptionExtension_FullRangeVideo, v12);
  if (v24)
  {
    Value = CFBooleanGetValue(v24);
    v26 = 0x101000000000000;
    if (!Value)
      v26 = 0x100000000000000;
  }
  else
  {
    v26 = 0;
  }
  return (PAL *)(v9 | v6 | v14 | v26);
}

uint64_t *WebCore::codecFromFormatDescription@<X0>(uint64_t *this@<X0>, const opaqueCMFormatDescription *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  PAL *v4;
  const __CFString *v5;
  const __CFDictionary *v6;
  const void *v7;
  const void *v8;
  CFIndex v9;
  WebCore::FragmentedSharedBuffer *v10;
  void *v11;
  WTF::StringImpl *v12;
  BOOL v13;
  WTF::StringImpl *v14;
  const __CFDictionary *v15;
  const void *v16;
  const void *v17;
  CFIndex v18;
  WebCore *v19;
  void *v20;
  const WebCore::SharedBuffer *v21;
  const __CFDictionary *v22;
  const void *v23;
  const void *v24;
  CFIndex v25;
  WebCore *v26;
  void *v27;
  const WebCore::SharedBuffer *v28;
  int v29;
  const __CFDictionary *Extension;
  const void *Value;
  const void *v32;
  CFIndex v33;
  WebCore::FragmentedSharedBuffer *v34;
  void *v35;
  WTF *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  WTF *v40;
  int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  if (this)
  {
    v4 = (PAL *)this;
    this = (uint64_t *)PAL::softLinkCoreMediaCMFormatDescriptionGetMediaSubType[0]((PAL *)this, a2);
    if ((int)this <= 1667790434)
    {
      if ((int)this > 1633889586)
      {
        if ((int)this > 1667331682)
        {
          if ((_DWORD)this != 1667331683)
          {
            if ((_DWORD)this != 1667524657)
            {
              if ((_DWORD)this != 1667575091)
                goto LABEL_47;
              return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
            }
            goto LABEL_56;
          }
        }
        else
        {
          if ((_DWORD)this == 1633889587)
            return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
          if ((_DWORD)this == 1635135537)
          {
            if (PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::once != -1)
              dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::once, &__block_literal_global_18_1);
            Extension = (const __CFDictionary *)PAL::softLinkCoreMediaCMFormatDescriptionGetExtension(v4, (const opaqueCMFormatDescription *)PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::constantCoreMediakCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms, v5);
            if (Extension)
            {
              Value = CFDictionaryGetValue(Extension, CFSTR("av1C"));
              if (Value)
              {
                v32 = Value;
                v33 = WTF::fastMalloc((WTF *)0x38);
                *(_DWORD *)v33 = 1;
                *(_QWORD *)(v33 + 8) = v33 + 24;
                *(_QWORD *)(v33 + 16) = 1;
                *(_BYTE *)(v33 + 40) = 0;
                *(_QWORD *)(v33 + 48) = 0;
                WebCore::FragmentedSharedBuffer::append(v33, v32);
                v38 = (WTF::StringImpl *)v33;
                v34 = (WebCore::FragmentedSharedBuffer *)WTF::fastMalloc((WTF *)0x38);
                v44 = WebCore::SharedBuffer::SharedBuffer((uint64_t)v34, (uint64_t *)&v38);
                WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v38, v35);
                WebCore::parseAV1DecoderConfigurationRecord(v34, (uint64_t)&v38);
                if ((_BYTE)v41)
                  WebCore::createAV1CodecParametersString((uint64_t)&v38, a3);
                else
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                if ((_BYTE)v41)
                {
                  v37 = v38;
                  v38 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, v12);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                }
                return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v44, v12);
              }
            }
            return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
          }
          if ((_DWORD)this != 1635148593)
            goto LABEL_47;
        }
        if (PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::once != -1)
          dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::once, &__block_literal_global_18_1);
        v15 = (const __CFDictionary *)PAL::softLinkCoreMediaCMFormatDescriptionGetExtension(v4, (const opaqueCMFormatDescription *)PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::constantCoreMediakCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms, v5);
        if (v15)
        {
          v16 = CFDictionaryGetValue(v15, CFSTR("avcC"));
          if (v16)
          {
            v17 = v16;
            v18 = WTF::fastMalloc((WTF *)0x38);
            *(_DWORD *)v18 = 1;
            *(_QWORD *)(v18 + 8) = v18 + 24;
            *(_QWORD *)(v18 + 16) = 1;
            *(_BYTE *)(v18 + 40) = 0;
            *(_QWORD *)(v18 + 48) = 0;
            WebCore::FragmentedSharedBuffer::append(v18, v17);
            v38 = (WTF::StringImpl *)v18;
            v19 = (WebCore *)WTF::fastMalloc((WTF *)0x38);
            v44 = WebCore::SharedBuffer::SharedBuffer((uint64_t)v19, (uint64_t *)&v38);
            WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v38, v20);
            LODWORD(v38) = WebCore::parseAVCDecoderConfigurationRecord(v19, v21);
            if (v38 >> 24)
            {
              WebCore::createAVCCodecParametersString(a3);
              return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v44, v12);
            }
LABEL_80:
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v44, v12);
          }
        }
        return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      }
      if ((int)this <= 1633772391)
      {
        if ((_DWORD)this == 1633772320 || (_DWORD)this == 1633772389)
          return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      }
      else if ((_DWORD)this == 1633772392 || (_DWORD)this == 1633772396 || (_DWORD)this == 1633772400)
      {
        return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      }
    }
    else
    {
      if ((int)this <= 1752589104)
      {
        if ((int)this > 1700997938)
        {
          v13 = (_DWORD)this == 1700997939 || (_DWORD)this == 1700998451;
          if (!v13 && (_DWORD)this != 1718378851)
            goto LABEL_47;
          return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        }
        if ((_DWORD)this != 1667790435)
        {
          if ((_DWORD)this == 1685353248)
            return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
          if ((_DWORD)this != 1685481521)
            goto LABEL_47;
LABEL_56:
          if (PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::once != -1)
            dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::once, &__block_literal_global_18_1);
          v22 = (const __CFDictionary *)PAL::softLinkCoreMediaCMFormatDescriptionGetExtension(v4, (const opaqueCMFormatDescription *)PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::constantCoreMediakCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms, v5);
          if (v22)
          {
            v23 = CFDictionaryGetValue(v22, CFSTR("dvcC"));
            if (v23)
            {
              v24 = v23;
              v25 = WTF::fastMalloc((WTF *)0x38);
              *(_DWORD *)v25 = 1;
              *(_QWORD *)(v25 + 8) = v25 + 24;
              *(_QWORD *)(v25 + 16) = 1;
              *(_BYTE *)(v25 + 40) = 0;
              *(_QWORD *)(v25 + 48) = 0;
              WebCore::FragmentedSharedBuffer::append(v25, v24);
              v38 = (WTF::StringImpl *)v25;
              v26 = (WebCore *)WTF::fastMalloc((WTF *)0x38);
              v44 = WebCore::SharedBuffer::SharedBuffer((uint64_t)v26, (uint64_t *)&v38);
              WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v38, v27);
              v38 = (WTF::StringImpl *)WebCore::parseDoViDecoderConfigurationRecord(v26, v28);
              v39 = v29;
              if ((_BYTE)v29)
              {
                WebCore::createDoViCodecParametersString((uint64_t)&v38, a3);
                return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v44, v12);
              }
              goto LABEL_80;
            }
          }
          return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        }
LABEL_19:
        if (PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::once != -1)
          dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::once, &__block_literal_global_18_1);
        v6 = (const __CFDictionary *)PAL::softLinkCoreMediaCMFormatDescriptionGetExtension(v4, (const opaqueCMFormatDescription *)PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::constantCoreMediakCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms, v5);
        if (v6)
        {
          v7 = CFDictionaryGetValue(v6, CFSTR("hvcC"));
          if (v7)
          {
            v8 = v7;
            v9 = WTF::fastMalloc((WTF *)0x38);
            *(_DWORD *)v9 = 1;
            *(_QWORD *)(v9 + 8) = v9 + 24;
            *(_QWORD *)(v9 + 16) = 1;
            *(_BYTE *)(v9 + 40) = 0;
            *(_QWORD *)(v9 + 48) = 0;
            WebCore::FragmentedSharedBuffer::append(v9, v8);
            v38 = (WTF::StringImpl *)v9;
            v10 = (WebCore::FragmentedSharedBuffer *)WTF::fastMalloc((WTF *)0x38);
            v44 = WebCore::SharedBuffer::SharedBuffer((uint64_t)v10, (uint64_t *)&v38);
            WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v38, v11);
            WebCore::parseHEVCDecoderConfigurationRecord(v10, (WTF *)0x68766331, (uint64_t)&v38);
            if (v43)
              WebCore::createHEVCCodecParametersString((uint64_t)&v38, a3);
            else
              WTF::StringImpl::createWithoutCopyingNonEmpty();
            if (v43)
            {
              v36 = v40;
              if (&v42 != (uint64_t *)v40)
              {
                if (v40)
                {
                  v40 = 0;
                  v41 = 0;
                  WTF::fastFree(v36, v12);
                }
              }
            }
            return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v44, v12);
          }
        }
        return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      }
      if ((int)this > 1869641074)
      {
        if ((_DWORD)this == 1869641075 || (_DWORD)this == 1902469939 || (_DWORD)this == 1987063865)
          return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      }
      else
      {
        switch((_DWORD)this)
        {
          case 0x68766331:
            goto LABEL_19;
          case 0x6D703476:
            return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
          case 0x6D757861:
            goto LABEL_19;
        }
      }
    }
  }
LABEL_47:
  v14 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v14 += 2;
  *a3 = v14;
  return this;
}

uint64_t WebCore::ISOFairPlayStreamingInfoBox::parse(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  unsigned int v7;
  int v8;
  int v9;
  char v10;
  char v11;

  result = WebCore::ISOBox::parse(a1, a2, a3);
  if ((_DWORD)result)
  {
    v11 = 0;
    v7 = *a3;
    v8 = JSC::DataView::get<unsigned int>(a2, *a3, 0, &v11);
    if (v11)
    {
      if (v7 >= 0xFFFFFFFC)
      {
        __break(0xC471u);
        goto LABEL_12;
      }
      *a3 = v7 + 4;
      *(_BYTE *)(a1 + 40) = HIBYTE(v8);
      *(_DWORD *)(a1 + 44) = v8 & 0xFFFFFF;
      v10 = 0;
      v7 = *a3;
      v9 = JSC::DataView::get<unsigned int>(a2, *a3, 0, &v10);
      result = v10 != 0;
      if (v10)
      {
        if (v7 < 0xFFFFFFFC)
        {
          *a3 = v7 + 4;
          *(_DWORD *)(a1 + 48) = v9;
          return result;
        }
        __break(0xC471u);
LABEL_12:
        JUMPOUT(0x1961DCB98);
      }
    }
    else
    {
      result = 0;
    }
    *a3 = v7;
  }
  return result;
}

BOOL WebCore::ISOFairPlayStreamingKeyRequestInfoBox::parse(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  size_t v17;
  _QWORD *v18;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  void *v24;
  WTF *v25;
  WTF *v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;

  v34 = *a3;
  if (!WebCore::ISOBox::parse(a1, a2, &v34))
    return 0;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = v34 - *a3;
  v8 = v6 >= v7;
  v9 = v6 - v7;
  if (!v8)
    return 0;
  v10 = *(unsigned int *)(a1 + 56);
  if (v9 < v10)
    return 0;
  v11 = *(_QWORD **)(a2 + 32);
  if (!v11)
    return 0;
  v12 = v11[2];
  if (!v12)
    return 0;
  v13 = MEMORY[0x1E0CC10F8];
  v14 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v14)
  {
    if ((*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v12 & 0x3FFFFFFFFLL) + v14))
      return 0;
  }
  *(_DWORD *)v11 += 2;
  JSC::ArrayBuffer::slice((JSC::ArrayBuffer *)v11, (double)v34, (double)(v34 + v10));
  v17 = *(unsigned int *)(a1 + 56);
  v34 += v17;
  *(_DWORD *)(a1 + 60) = v17;
  v18 = (_QWORD *)v33;
  if (*(_BYTE *)(v33 + 64) && (v32 = *(_QWORD *)(v33 + 32)) != 0)
    v19 = *(_QWORD *)(v32 + 32);
  else
    v19 = *(_QWORD *)(v33 + 48);
  v15 = v19 >= v17;
  if (v19 < v17)
    goto LABEL_21;
  v20 = *(_QWORD *)(v33 + 16);
  if (v20)
  {
    v21 = *(_QWORD *)(v13 + 56);
    if (v21)
    {
      if (*(_BYTE *)(v13 + 34) || !*MEMORY[0x1E0CC10F0])
        v20 = (v20 & 0x3FFFFFFFFLL) + v21;
    }
  }
  memcpy(*(void **)(a1 + 48), (const void *)v20, v17);
  *a3 = v34;
  v18 = (_QWORD *)v33;
  if (v33)
  {
LABEL_21:
    v22 = *(_DWORD *)v18 == 2;
    *(_DWORD *)v18 -= 2;
    if (v22)
    {
      v27 = v18;
      v28 = v18[10];
      if (v28)
      {
        *(_QWORD *)(v28 + 8) = 3;
        v27[10] = 0;
      }
      if ((v27[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v27 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v27 + 2));
      v30 = (WTF *)v27[1];
      if ((v30 & 1) == 0 && v30)
      {
        v31 = *(WTF **)v30;
        if (*(_QWORD *)v30)
        {
          *(_QWORD *)v30 = 0;
          *((_DWORD *)v30 + 2) = 0;
          WTF::fastFree(v31, v29);
        }
        WTF::fastFree(v30, v29);
      }
      WTF::fastFree((WTF *)v27, v29);
    }
  }
  v22 = *(_DWORD *)v11 == 2;
  *(_DWORD *)v11 -= 2;
  if (v22)
  {
    v23 = v11[10];
    if (v23)
    {
      *(_QWORD *)(v23 + 8) = 3;
      v11[10] = 0;
    }
    if ((v11[9] & 1) == 0)
      JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v11 + 9));
    JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v11 + 2));
    v25 = (WTF *)v11[1];
    if ((v25 & 1) == 0 && v25)
    {
      v26 = *(WTF **)v25;
      if (*(_QWORD *)v25)
      {
        *(_QWORD *)v25 = 0;
        *((_DWORD *)v25 + 2) = 0;
        WTF::fastFree(v26, v24);
      }
      WTF::fastFree(v25, v24);
    }
    WTF::fastFree((WTF *)v11, v24);
  }
  return v15;
}

uint64_t WebCore::ISOFairPlayStreamingKeyAssetIdBox::parse(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  void *v6;
  unsigned int v7;
  unint64_t v8;
  _BOOL8 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  int v15;
  unint64_t v16;
  size_t v17;
  uint64_t result;
  size_t v19;
  size_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD *v27;
  size_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  void *v33;
  WTF *v34;
  WTF *v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  WTF *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;

  v43 = *a3;
  if (!WebCore::ISOBox::parse(a1, a2, &v43))
    return 0;
  v7 = v43;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 == v43 - *a3)
  {
    if (*(_DWORD *)(a1 + 48))
    {
      if (*(_DWORD *)(a1 + 52))
        *(_DWORD *)(a1 + 52) = 0;
      v14 = *(WTF **)(a1 + 40);
      if (v14)
      {
        *(_QWORD *)(a1 + 40) = 0;
        *(_DWORD *)(a1 + 48) = 0;
        WTF::fastFree(v14, v6);
        v7 = v43;
      }
    }
    *a3 = v7;
    return 1;
  }
  v10 = *(_QWORD **)(a2 + 32);
  if (!v10)
    return 0;
  v11 = v10[2];
  if (!v11)
    return 0;
  v12 = MEMORY[0x1E0CC10F8];
  v13 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v13)
  {
    if ((*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v11 & 0x3FFFFFFFFLL) + v13))
      return 0;
  }
  v15 = *(_DWORD *)v10;
  *(_DWORD *)v10 += 2;
  v16 = v43 - *a3;
  v17 = v8 - v16;
  if (v8 < v16)
  {
    v9 = 0;
LABEL_41:
    *(_DWORD *)v10 = v15;
    if (!v15)
    {
      v32 = v10[10];
      if (v32)
      {
        *(_QWORD *)(v32 + 8) = 3;
        v10[10] = 0;
      }
      if ((v10[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v10 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v10 + 2));
      v34 = (WTF *)v10[1];
      if ((v34 & 1) == 0 && v34)
      {
        v35 = *(WTF **)v34;
        if (*(_QWORD *)v34)
        {
          *(_QWORD *)v34 = 0;
          *((_DWORD *)v34 + 2) = 0;
          WTF::fastFree(v35, v33);
        }
        WTF::fastFree(v34, v33);
      }
      WTF::fastFree((WTF *)v10, v33);
    }
    return v9;
  }
  result = JSC::ArrayBuffer::slice((JSC::ArrayBuffer *)v10, (double)v43, (double)(v17 + v43));
  v43 += v17;
  v19 = *(unsigned int *)(a1 + 52);
  if (v17 <= v19 || (v20 = *(unsigned int *)(a1 + 48), v17 <= v20))
  {
LABEL_31:
    *(_DWORD *)(a1 + 52) = v17;
    v27 = (_QWORD *)v42;
    if (*(_BYTE *)(v42 + 64) && (v41 = *(_QWORD *)(v42 + 32)) != 0)
      v28 = *(_QWORD *)(v41 + 32);
    else
      v28 = *(_QWORD *)(v42 + 48);
    v9 = v28 >= v17;
    if (v28 < v17)
      goto LABEL_39;
    v29 = *(_QWORD *)(v42 + 16);
    if (v29)
    {
      v30 = *(_QWORD *)(v12 + 56);
      if (v30)
      {
        if (*(_BYTE *)(v12 + 34) || !*MEMORY[0x1E0CC10F0])
          v29 = (v29 & 0x3FFFFFFFFLL) + v30;
      }
    }
    memcpy(*(void **)(a1 + 40), (const void *)v29, v17);
    *a3 = v43;
    v27 = (_QWORD *)v42;
    if (v42)
    {
LABEL_39:
      v31 = *(_DWORD *)v27 == 2;
      *(_DWORD *)v27 -= 2;
      if (v31)
      {
        v36 = v27;
        v37 = v27[10];
        if (v37)
        {
          *(_QWORD *)(v37 + 8) = 3;
          v36[10] = 0;
        }
        if ((v36[9] & 1) == 0)
          JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v36 + 9));
        JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v36 + 2));
        v39 = (WTF *)v36[1];
        if ((v39 & 1) == 0 && v39)
        {
          v40 = *(WTF **)v39;
          if (*(_QWORD *)v39)
          {
            *(_QWORD *)v39 = 0;
            *((_DWORD *)v39 + 2) = 0;
            WTF::fastFree(v40, v38);
          }
          WTF::fastFree(v39, v38);
        }
        WTF::fastFree((WTF *)v36, v38);
      }
    }
    v15 = *(_DWORD *)v10 - 2;
    goto LABEL_41;
  }
  v21 = v20 + (v20 >> 2);
  if (v21 >= 0x10)
    v22 = v21 + 1;
  else
    v22 = 16;
  if (v22 <= v17)
    v23 = v17;
  else
    v23 = v22;
  if (!HIDWORD(v23))
  {
    v24 = *(void **)(a1 + 40);
    v25 = (void *)WTF::fastMalloc((WTF *)v23);
    *(_DWORD *)(a1 + 48) = v23;
    *(_QWORD *)(a1 + 40) = v25;
    memcpy(v25, v24, v19);
    if (v24)
    {
      if (*(void **)(a1 + 40) == v24)
      {
        *(_QWORD *)(a1 + 40) = 0;
        *(_DWORD *)(a1 + 48) = 0;
      }
      WTF::fastFree((WTF *)v24, v26);
    }
    goto LABEL_31;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ISOFairPlayStreamingKeyContextBox::parse(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  void *v6;
  unsigned int v7;
  unint64_t v8;
  _BOOL8 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  int v15;
  unint64_t v16;
  size_t v17;
  uint64_t result;
  size_t v19;
  size_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD *v27;
  size_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  void *v33;
  WTF *v34;
  WTF *v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  WTF *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;

  v43 = *a3;
  if (!WebCore::ISOBox::parse(a1, a2, &v43))
    return 0;
  v7 = v43;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 == v43 - *a3)
  {
    if (*(_DWORD *)(a1 + 48))
    {
      if (*(_DWORD *)(a1 + 52))
        *(_DWORD *)(a1 + 52) = 0;
      v14 = *(WTF **)(a1 + 40);
      if (v14)
      {
        *(_QWORD *)(a1 + 40) = 0;
        *(_DWORD *)(a1 + 48) = 0;
        WTF::fastFree(v14, v6);
        v7 = v43;
      }
    }
    *a3 = v7;
    return 1;
  }
  v10 = *(_QWORD **)(a2 + 32);
  if (!v10)
    return 0;
  v11 = v10[2];
  if (!v11)
    return 0;
  v12 = MEMORY[0x1E0CC10F8];
  v13 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v13)
  {
    if ((*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v11 & 0x3FFFFFFFFLL) + v13))
      return 0;
  }
  v15 = *(_DWORD *)v10;
  *(_DWORD *)v10 += 2;
  v16 = v43 - *a3;
  v17 = v8 - v16;
  if (v8 < v16)
  {
    v9 = 0;
LABEL_41:
    *(_DWORD *)v10 = v15;
    if (!v15)
    {
      v32 = v10[10];
      if (v32)
      {
        *(_QWORD *)(v32 + 8) = 3;
        v10[10] = 0;
      }
      if ((v10[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v10 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v10 + 2));
      v34 = (WTF *)v10[1];
      if ((v34 & 1) == 0 && v34)
      {
        v35 = *(WTF **)v34;
        if (*(_QWORD *)v34)
        {
          *(_QWORD *)v34 = 0;
          *((_DWORD *)v34 + 2) = 0;
          WTF::fastFree(v35, v33);
        }
        WTF::fastFree(v34, v33);
      }
      WTF::fastFree((WTF *)v10, v33);
    }
    return v9;
  }
  result = JSC::ArrayBuffer::slice((JSC::ArrayBuffer *)v10, (double)v43, (double)(v17 + v43));
  v43 += v17;
  v19 = *(unsigned int *)(a1 + 52);
  if (v17 <= v19 || (v20 = *(unsigned int *)(a1 + 48), v17 <= v20))
  {
LABEL_31:
    *(_DWORD *)(a1 + 52) = v17;
    v27 = (_QWORD *)v42;
    if (*(_BYTE *)(v42 + 64) && (v41 = *(_QWORD *)(v42 + 32)) != 0)
      v28 = *(_QWORD *)(v41 + 32);
    else
      v28 = *(_QWORD *)(v42 + 48);
    v9 = v28 >= v17;
    if (v28 < v17)
      goto LABEL_39;
    v29 = *(_QWORD *)(v42 + 16);
    if (v29)
    {
      v30 = *(_QWORD *)(v12 + 56);
      if (v30)
      {
        if (*(_BYTE *)(v12 + 34) || !*MEMORY[0x1E0CC10F0])
          v29 = (v29 & 0x3FFFFFFFFLL) + v30;
      }
    }
    memcpy(*(void **)(a1 + 40), (const void *)v29, v17);
    *a3 = v43;
    v27 = (_QWORD *)v42;
    if (v42)
    {
LABEL_39:
      v31 = *(_DWORD *)v27 == 2;
      *(_DWORD *)v27 -= 2;
      if (v31)
      {
        v36 = v27;
        v37 = v27[10];
        if (v37)
        {
          *(_QWORD *)(v37 + 8) = 3;
          v36[10] = 0;
        }
        if ((v36[9] & 1) == 0)
          JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v36 + 9));
        JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v36 + 2));
        v39 = (WTF *)v36[1];
        if ((v39 & 1) == 0 && v39)
        {
          v40 = *(WTF **)v39;
          if (*(_QWORD *)v39)
          {
            *(_QWORD *)v39 = 0;
            *((_DWORD *)v39 + 2) = 0;
            WTF::fastFree(v40, v38);
          }
          WTF::fastFree(v39, v38);
        }
        WTF::fastFree((WTF *)v36, v38);
      }
    }
    v15 = *(_DWORD *)v10 - 2;
    goto LABEL_41;
  }
  v21 = v20 + (v20 >> 2);
  if (v21 >= 0x10)
    v22 = v21 + 1;
  else
    v22 = 16;
  if (v22 <= v17)
    v23 = v17;
  else
    v23 = v22;
  if (!HIDWORD(v23))
  {
    v24 = *(void **)(a1 + 40);
    v25 = (void *)WTF::fastMalloc((WTF *)v23);
    *(_DWORD *)(a1 + 48) = v23;
    *(_QWORD *)(a1 + 40) = v25;
    memcpy(v25, v24, v19);
    if (v24)
    {
      if (*(void **)(a1 + 40) == v24)
      {
        *(_QWORD *)(a1 + 40) = 0;
        *(_DWORD *)(a1 + 48) = 0;
      }
      WTF::fastFree((WTF *)v24, v26);
    }
    goto LABEL_31;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ISOFairPlayStreamingKeyVersionListBox::parse(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  char v12;
  char v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  _BYTE *v21;
  unsigned int v22;
  char v23;

  v22 = *a3;
  result = WebCore::ISOBox::parse(a1, a2, &v22);
  if ((_DWORD)result)
  {
    v7 = v22;
    v8 = v22 - *a3;
    v9 = *(_QWORD *)(a1 + 8);
    if (v9 == v8)
    {
LABEL_23:
      *a3 = v7;
      return 1;
    }
    else
    {
      while (1)
      {
        result = 0;
        v10 = v9 >= v8;
        v11 = v9 - v8;
        if (!v10 || v11 < 4)
          break;
        v23 = 0;
        v12 = JSC::DataView::get<unsigned int>(a2, v7, 0, &v23);
        if (!v23)
          return 0;
        if (v7 >= 0xFFFFFFFC)
          goto LABEL_26;
        v13 = v12;
        v22 = v7 + 4;
        v14 = *(unsigned int *)(a1 + 52);
        if ((_DWORD)v14 == *(_DWORD *)(a1 + 48))
        {
          v15 = v14 + (v14 >> 2);
          if (v15 >= 0x10)
            v16 = v15 + 1;
          else
            v16 = 16;
          if (v16 <= v14 + 1)
            v17 = v14 + 1;
          else
            v17 = v16;
          if (HIDWORD(v17))
          {
LABEL_26:
            __break(0xC471u);
            JUMPOUT(0x1961DD664);
          }
          v18 = *(void **)(a1 + 40);
          v19 = (void *)WTF::fastMalloc((WTF *)v17);
          *(_DWORD *)(a1 + 48) = v17;
          *(_QWORD *)(a1 + 40) = v19;
          memcpy(v19, v18, v14);
          if (v18)
          {
            if (*(void **)(a1 + 40) == v18)
            {
              *(_QWORD *)(a1 + 40) = 0;
              *(_DWORD *)(a1 + 48) = 0;
            }
            WTF::fastFree((WTF *)v18, v20);
          }
          v21 = (_BYTE *)(*(_QWORD *)(a1 + 40) + *(unsigned int *)(a1 + 52));
        }
        else
        {
          v21 = (_BYTE *)(*(_QWORD *)(a1 + 40) + v14);
        }
        *v21 = v13;
        ++*(_DWORD *)(a1 + 52);
        v7 = v22;
        v8 = v22 - *a3;
        v9 = *(_QWORD *)(a1 + 8);
        if (v9 == v8)
          goto LABEL_23;
      }
    }
  }
  return result;
}

uint64_t WebCore::ISOFairPlayStreamingKeyRequestBox::parse(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  void *v7;
  int v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  int v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  int v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  int v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  void (**v35)(WebCore::ISOFairPlayStreamingKeyAssetIdBox *__hidden);
  uint64_t v36;
  int v37;
  WTF *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  _DWORD v42[4];
  char v43;
  unsigned int v44;
  unsigned int v45;

  v44 = *a3;
  result = WebCore::ISOBox::parse(a1, a2, &v44);
  if ((_DWORD)result)
  {
    LODWORD(v35) = v44;
    if (((*(uint64_t (**)(uint64_t, uint64_t, void (***)(WebCore::ISOFairPlayStreamingKeyAssetIdBox *__hidden)))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40, a2, &v35) & 1) != 0)
    {
      v44 += *(_DWORD *)(a1 + 48);
      do
      {
        if (*(_QWORD *)(a1 + 8) <= (unint64_t)(v44 - *a3))
        {
          *a3 = v44;
          return 1;
        }
        WebCore::ISOBox::peekBox(a2, v44, (uint64_t)v42);
        if (!v43)
          return 0;
        if (v42[0] == 1718318700)
        {
          if (*(_BYTE *)(a1 + 304))
            return 0;
          v37 = 0;
          v38 = 0;
          v39 = 0;
          v35 = off_1E3410248;
          v36 = 0;
          v40 = 0;
          v41 = 0;
          v45 = v44;
          if (!WebCore::ISOFairPlayStreamingKeyVersionListBox::parse((uint64_t)&v35, a2, &v45))
            goto LABEL_34;
          v44 += v36;
          v13 = *(unsigned __int8 *)(a1 + 304);
          *(_QWORD *)(a1 + 256) = v36;
          *(_DWORD *)(a1 + 264) = v37;
          if (!v13)
          {
            v29 = v38;
            v38 = 0;
            *(_QWORD *)(a1 + 272) = v29;
            v30 = v39;
            HIDWORD(v39) = 0;
            *(_QWORD *)(a1 + 280) = v30;
            *(_QWORD *)(a1 + 248) = off_1E3410248;
            *(_QWORD *)(a1 + 288) = v40;
            v31 = v41;
            v40 = 0;
            v41 = 0;
            *(_QWORD *)(a1 + 296) = v31;
            v23 = 2;
            *(_BYTE *)(a1 + 304) = 1;
            goto LABEL_37;
          }
          v14 = *(WTF **)(a1 + 272);
          if (v14)
          {
            *(_QWORD *)(a1 + 272) = 0;
            *(_DWORD *)(a1 + 280) = 0;
            WTF::fastFree(v14, v7);
          }
          *(_QWORD *)(a1 + 272) = v38;
          v15 = v39;
          v38 = 0;
          v39 = 0;
          *(_QWORD *)(a1 + 280) = v15;
          v16 = *(WTF **)(a1 + 288);
          if (v16)
          {
            *(_QWORD *)(a1 + 288) = 0;
            *(_DWORD *)(a1 + 296) = 0;
            WTF::fastFree(v16, v7);
          }
          *(_QWORD *)(a1 + 288) = v40;
          v17 = v41;
          v40 = 0;
          v41 = 0;
          *(_QWORD *)(a1 + 296) = v17;
        }
        else if (v42[0] == 1718313848)
        {
          if (*(_BYTE *)(a1 + 240))
            return 0;
          v37 = 0;
          v38 = 0;
          v39 = 0;
          v35 = off_1E3410220;
          v36 = 0;
          v40 = 0;
          v41 = 0;
          v45 = v44;
          if (!WebCore::ISOFairPlayStreamingKeyContextBox::parse((uint64_t)&v35, a2, &v45))
            goto LABEL_34;
          v44 += v36;
          v18 = *(unsigned __int8 *)(a1 + 240);
          *(_QWORD *)(a1 + 192) = v36;
          *(_DWORD *)(a1 + 200) = v37;
          if (!v18)
          {
            v32 = v38;
            v38 = 0;
            *(_QWORD *)(a1 + 208) = v32;
            v33 = v39;
            HIDWORD(v39) = 0;
            *(_QWORD *)(a1 + 216) = v33;
            *(_QWORD *)(a1 + 184) = off_1E3410220;
            *(_QWORD *)(a1 + 224) = v40;
            v34 = v41;
            v40 = 0;
            v41 = 0;
            *(_QWORD *)(a1 + 232) = v34;
            v23 = 2;
            *(_BYTE *)(a1 + 240) = 1;
            goto LABEL_37;
          }
          v19 = *(WTF **)(a1 + 208);
          if (v19)
          {
            *(_QWORD *)(a1 + 208) = 0;
            *(_DWORD *)(a1 + 216) = 0;
            WTF::fastFree(v19, v7);
          }
          *(_QWORD *)(a1 + 208) = v38;
          v20 = v39;
          v38 = 0;
          v39 = 0;
          *(_QWORD *)(a1 + 216) = v20;
          v21 = *(WTF **)(a1 + 224);
          if (v21)
          {
            *(_QWORD *)(a1 + 224) = 0;
            *(_DWORD *)(a1 + 232) = 0;
            WTF::fastFree(v21, v7);
          }
          *(_QWORD *)(a1 + 224) = v40;
          v22 = v41;
          v40 = 0;
          v41 = 0;
          *(_QWORD *)(a1 + 232) = v22;
        }
        else
        {
          if (v42[0] != 1718313321 || *(_BYTE *)(a1 + 176))
            return 0;
          v37 = 0;
          v38 = 0;
          v39 = 0;
          v35 = off_1E34101F8;
          v36 = 0;
          v40 = 0;
          v41 = 0;
          v45 = v44;
          if (!WebCore::ISOFairPlayStreamingKeyAssetIdBox::parse((uint64_t)&v35, a2, &v45))
          {
LABEL_34:
            v24 = v40;
            if (v40)
            {
              v40 = 0;
              LODWORD(v41) = 0;
              WTF::fastFree(v24, v7);
            }
            v23 = 1;
            goto LABEL_37;
          }
          v44 += v36;
          v8 = *(unsigned __int8 *)(a1 + 176);
          *(_QWORD *)(a1 + 128) = v36;
          *(_DWORD *)(a1 + 136) = v37;
          if (!v8)
          {
            v26 = v38;
            v38 = 0;
            *(_QWORD *)(a1 + 144) = v26;
            v27 = v39;
            HIDWORD(v39) = 0;
            *(_QWORD *)(a1 + 152) = v27;
            *(_QWORD *)(a1 + 120) = off_1E34101F8;
            *(_QWORD *)(a1 + 160) = v40;
            v28 = v41;
            v40 = 0;
            v41 = 0;
            *(_QWORD *)(a1 + 168) = v28;
            v23 = 2;
            *(_BYTE *)(a1 + 176) = 1;
            goto LABEL_37;
          }
          v9 = *(WTF **)(a1 + 144);
          if (v9)
          {
            *(_QWORD *)(a1 + 144) = 0;
            *(_DWORD *)(a1 + 152) = 0;
            WTF::fastFree(v9, v7);
          }
          *(_QWORD *)(a1 + 144) = v38;
          v10 = v39;
          v38 = 0;
          v39 = 0;
          *(_QWORD *)(a1 + 152) = v10;
          v11 = *(WTF **)(a1 + 160);
          if (v11)
          {
            *(_QWORD *)(a1 + 160) = 0;
            *(_DWORD *)(a1 + 168) = 0;
            WTF::fastFree(v11, v7);
          }
          *(_QWORD *)(a1 + 160) = v40;
          v12 = v41;
          v40 = 0;
          v41 = 0;
          *(_QWORD *)(a1 + 168) = v12;
        }
        v23 = 2;
LABEL_37:
        v35 = off_1E3416B60;
        v25 = v38;
        if (v38)
        {
          v38 = 0;
          LODWORD(v39) = 0;
          WTF::fastFree(v25, v7);
        }
      }
      while (v23 == 2);
    }
    return 0;
  }
  return result;
}

uint64_t WebCore::ISOFairPlayStreamingKeyAssetIdBox::ISOFairPlayStreamingKeyAssetIdBox(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)this = off_1E34101F8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  return this;
}

{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)this = off_1E34101F8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  return this;
}

void WebCore::ISOFairPlayStreamingKeyAssetIdBox::~ISOFairPlayStreamingKeyAssetIdBox(WebCore::ISOFairPlayStreamingKeyAssetIdBox *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ISOFairPlayStreamingKeyContextBox::ISOFairPlayStreamingKeyContextBox(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)this = off_1E3410220;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  return this;
}

{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)this = off_1E3410220;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  return this;
}

void WebCore::ISOFairPlayStreamingKeyContextBox::~ISOFairPlayStreamingKeyContextBox(WebCore::ISOFairPlayStreamingKeyContextBox *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ISOFairPlayStreamingKeyVersionListBox::ISOFairPlayStreamingKeyVersionListBox(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)this = off_1E3410248;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  return this;
}

{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)this = off_1E3410248;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  return this;
}

void WebCore::ISOFairPlayStreamingKeyVersionListBox::~ISOFairPlayStreamingKeyVersionListBox(WebCore::ISOFairPlayStreamingKeyVersionListBox *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ISOFairPlayStreamingInitDataBox::parse(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  void (***v10)(WebCore::ISOFairPlayStreamingKeyRequestBox *__hidden);
  uint64_t v11;
  void *v12;
  void (**v13)(WebCore::ISOFairPlayStreamingKeyRequestBox *__hidden);
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void (**v18)(WebCore::ISOFairPlayStreamingKeyRequestInfoBox *__hidden);
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE v27[208];
  unsigned int v28;
  unsigned int v29[3];

  v28 = *a3;
  result = WebCore::ISOBox::parse(a1, a2, &v28);
  if ((_DWORD)result)
  {
    LODWORD(v13) = v28;
    if (((*(uint64_t (**)(uint64_t, uint64_t, void (***)(WebCore::ISOFairPlayStreamingKeyRequestBox *__hidden)))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40, a2, &v13) & 1) != 0)
    {
      v7 = v28 + *(_DWORD *)(a1 + 48);
      v28 = v7;
      if (*(_QWORD *)(a1 + 8) <= (unint64_t)(v7 - *a3))
      {
LABEL_9:
        *a3 = v7;
        return 1;
      }
      while (1)
      {
        v15 = 0;
        v16 = 0;
        v17 = 0;
        v13 = off_1E3410270;
        v14 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v18 = off_1E34101D0;
        v19 = 0;
        v25 = v27;
        v26 = 16;
        v27[16] = 0;
        v27[72] = 0;
        v27[80] = 0;
        v27[136] = 0;
        v27[144] = 0;
        v27[200] = 0;
        v29[0] = v7;
        if (!WebCore::ISOFairPlayStreamingKeyRequestBox::parse((uint64_t)&v13, a2, v29))
          break;
        v28 += v14;
        v9 = *(unsigned int *)(a1 + 108);
        if ((_DWORD)v9 == *(_DWORD *)(a1 + 104))
        {
          v10 = (void (***)(WebCore::ISOFairPlayStreamingKeyRequestBox *__hidden))WTF::Vector<WebCore::ISOFairPlayStreamingKeyRequestBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 96, v9 + 1, (unint64_t)&v13);
          v11 = *(_QWORD *)(a1 + 96) + 312 * *(unsigned int *)(a1 + 108);
        }
        else
        {
          v11 = *(_QWORD *)(a1 + 96) + 312 * v9;
          v10 = &v13;
        }
        WebCore::ISOFairPlayStreamingKeyRequestBox::ISOFairPlayStreamingKeyRequestBox(v11, (uint64_t)v10);
        ++*(_DWORD *)(a1 + 108);
        WebCore::ISOFairPlayStreamingKeyRequestBox::~ISOFairPlayStreamingKeyRequestBox((WebCore::ISOFairPlayStreamingKeyRequestBox *)&v13, v12);
        v7 = v28;
        if (*(_QWORD *)(a1 + 8) <= (unint64_t)(v28 - *a3))
          goto LABEL_9;
      }
      WebCore::ISOFairPlayStreamingKeyRequestBox::~ISOFairPlayStreamingKeyRequestBox((WebCore::ISOFairPlayStreamingKeyRequestBox *)&v13, v8);
    }
    return 0;
  }
  return result;
}

double WebCore::ISOFairPlayStreamingKeyRequestBox::ISOFairPlayStreamingKeyRequestBox(WebCore::ISOFairPlayStreamingKeyRequestBox *this)
{
  double result;

  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = off_1E3410270;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_DWORD *)this + 21) = 0;
  *((_QWORD *)this + 5) = off_1E34101D0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 11) = (char *)this + 104;
  *(_QWORD *)&result = 16;
  *((_QWORD *)this + 12) = 16;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_BYTE *)this + 184) = 0;
  *((_BYTE *)this + 240) = 0;
  *((_BYTE *)this + 248) = 0;
  *((_BYTE *)this + 304) = 0;
  return result;
}

{
  double result;

  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = off_1E3410270;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_DWORD *)this + 21) = 0;
  *((_QWORD *)this + 5) = off_1E34101D0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 11) = (char *)this + 104;
  *(_QWORD *)&result = 16;
  *((_QWORD *)this + 12) = 16;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_BYTE *)this + 184) = 0;
  *((_BYTE *)this + 240) = 0;
  *((_BYTE *)this + 248) = 0;
  *((_BYTE *)this + 304) = 0;
  return result;
}

uint64_t WebCore::ISOFairPlayStreamingPsshBox::parse(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  int v7;
  int v8;

  result = WebCore::ISOProtectionSystemSpecificHeaderBox::parse(a1, a2, a3);
  if ((_DWORD)result)
  {
    v7 = *a3 - *(_DWORD *)(a1 + 92);
    *a3 = v7;
    v8 = v7;
    result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)(a1 + 96) + 16))(a1 + 96, a2, &v8);
    if ((_DWORD)result)
      *a3 += *(_DWORD *)(a1 + 104);
  }
  return result;
}

uint64_t WebCore::ISOFairPlayStreamingInfoBox::ISOFairPlayStreamingInfoBox(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_BYTE *)(this + 40) = 0;
  *(_QWORD *)this = off_1E34101A8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 44) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_BYTE *)(this + 40) = 0;
  *(_QWORD *)this = off_1E34101A8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 44) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

WebCore::ISOFairPlayStreamingInfoBox *WebCore::ISOFairPlayStreamingInfoBox::ISOFairPlayStreamingInfoBox(WebCore::ISOFairPlayStreamingInfoBox *this, const WebCore::ISOFairPlayStreamingInfoBox *a2)
{
  uint64_t v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E3416B60;
  v4 = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_QWORD *)this + 1) = v4;
  v5 = (WTF *)*((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = (_DWORD)v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)WTF::fastMalloc(v5);
    *((_DWORD *)this + 8) = (_DWORD)v5;
    *((_QWORD *)this + 3) = v6;
    memcpy(v6, *((const void **)a2 + 3), *((unsigned int *)a2 + 9));
  }
  *(_QWORD *)this = off_1E3416B88;
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *(_QWORD *)this = off_1E34101A8;
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  return this;
}

{
  uint64_t v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E3416B60;
  v4 = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_QWORD *)this + 1) = v4;
  v5 = (WTF *)*((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = (_DWORD)v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)WTF::fastMalloc(v5);
    *((_DWORD *)this + 8) = (_DWORD)v5;
    *((_QWORD *)this + 3) = v6;
    memcpy(v6, *((const void **)a2 + 3), *((unsigned int *)a2 + 9));
  }
  *(_QWORD *)this = off_1E3416B88;
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *(_QWORD *)this = off_1E34101A8;
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  return this;
}

void WebCore::ISOFairPlayStreamingInfoBox::~ISOFairPlayStreamingInfoBox(WebCore::ISOFairPlayStreamingInfoBox *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E3416B60;
  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E3416B60;
  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E3416B60;
  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

double WebCore::ISOFairPlayStreamingKeyRequestInfoBox::ISOFairPlayStreamingKeyRequestInfoBox(WebCore::ISOFairPlayStreamingKeyRequestInfoBox *this)
{
  double result;

  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)this = off_1E34101D0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 6) = (char *)this + 64;
  *(_QWORD *)&result = 16;
  *((_QWORD *)this + 7) = 16;
  return result;
}

{
  double result;

  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)this = off_1E34101D0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 6) = (char *)this + 64;
  *(_QWORD *)&result = 16;
  *((_QWORD *)this + 7) = 16;
  return result;
}

void WebCore::ISOFairPlayStreamingKeyRequestInfoBox::~ISOFairPlayStreamingKeyRequestInfoBox(WebCore::ISOFairPlayStreamingKeyRequestInfoBox *this, void *a2)
{
  WTF *v3;
  WTF *v5;

  v3 = (WTF *)*((_QWORD *)this + 6);
  if ((WebCore::ISOFairPlayStreamingKeyRequestInfoBox *)((char *)this + 64) != v3 && v3 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v5 = (WTF *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v5, a2);
  }
}

{
  WTF *v3;
  WTF *v5;

  v3 = (WTF *)*((_QWORD *)this + 6);
  if ((WebCore::ISOFairPlayStreamingKeyRequestInfoBox *)((char *)this + 64) != v3 && v3 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v5 = (WTF *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v5, a2);
  }
}

{
  WTF *v3;
  WTF *v5;

  v3 = (WTF *)*((_QWORD *)this + 6);
  if ((WebCore::ISOFairPlayStreamingKeyRequestInfoBox *)((char *)this + 64) != v3 && v3 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v5 = (WTF *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v5, a2);
  }
  WTF::fastFree(this, a2);
}

WebCore::ISOFairPlayStreamingKeyAssetIdBox *WebCore::ISOFairPlayStreamingKeyAssetIdBox::ISOFairPlayStreamingKeyAssetIdBox(WebCore::ISOFairPlayStreamingKeyAssetIdBox *this, const WebCore::ISOFairPlayStreamingKeyAssetIdBox *a2)
{
  uint64_t v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = off_1E3416B60;
  v4 = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_QWORD *)this + 1) = v4;
  v5 = (WTF *)*((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = (_DWORD)v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)WTF::fastMalloc(v5);
    *((_DWORD *)this + 8) = (_DWORD)v5;
    *((_QWORD *)this + 3) = v6;
    memcpy(v6, *((const void **)a2 + 3), *((unsigned int *)a2 + 9));
  }
  *(_QWORD *)this = off_1E34101F8;
  v7 = (WTF *)*((unsigned int *)a2 + 13);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 13) = (_DWORD)v7;
  if ((_DWORD)v7)
  {
    v8 = (void *)WTF::fastMalloc(v7);
    *((_DWORD *)this + 12) = (_DWORD)v7;
    *((_QWORD *)this + 5) = v8;
    memcpy(v8, *((const void **)a2 + 5), *((unsigned int *)a2 + 13));
  }
  return this;
}

{
  uint64_t v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = off_1E3416B60;
  v4 = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_QWORD *)this + 1) = v4;
  v5 = (WTF *)*((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = (_DWORD)v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)WTF::fastMalloc(v5);
    *((_DWORD *)this + 8) = (_DWORD)v5;
    *((_QWORD *)this + 3) = v6;
    memcpy(v6, *((const void **)a2 + 3), *((unsigned int *)a2 + 9));
  }
  *(_QWORD *)this = off_1E34101F8;
  v7 = (WTF *)*((unsigned int *)a2 + 13);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 13) = (_DWORD)v7;
  if ((_DWORD)v7)
  {
    v8 = (void *)WTF::fastMalloc(v7);
    *((_DWORD *)this + 12) = (_DWORD)v7;
    *((_QWORD *)this + 5) = v8;
    memcpy(v8, *((const void **)a2 + 5), *((unsigned int *)a2 + 13));
  }
  return this;
}

WebCore::ISOFairPlayStreamingKeyContextBox *WebCore::ISOFairPlayStreamingKeyContextBox::ISOFairPlayStreamingKeyContextBox(WebCore::ISOFairPlayStreamingKeyContextBox *this, const WebCore::ISOFairPlayStreamingKeyContextBox *a2)
{
  uint64_t v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = off_1E3416B60;
  v4 = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_QWORD *)this + 1) = v4;
  v5 = (WTF *)*((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = (_DWORD)v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)WTF::fastMalloc(v5);
    *((_DWORD *)this + 8) = (_DWORD)v5;
    *((_QWORD *)this + 3) = v6;
    memcpy(v6, *((const void **)a2 + 3), *((unsigned int *)a2 + 9));
  }
  *(_QWORD *)this = off_1E3410220;
  v7 = (WTF *)*((unsigned int *)a2 + 13);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 13) = (_DWORD)v7;
  if ((_DWORD)v7)
  {
    v8 = (void *)WTF::fastMalloc(v7);
    *((_DWORD *)this + 12) = (_DWORD)v7;
    *((_QWORD *)this + 5) = v8;
    memcpy(v8, *((const void **)a2 + 5), *((unsigned int *)a2 + 13));
  }
  return this;
}

{
  uint64_t v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = off_1E3416B60;
  v4 = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_QWORD *)this + 1) = v4;
  v5 = (WTF *)*((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = (_DWORD)v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)WTF::fastMalloc(v5);
    *((_DWORD *)this + 8) = (_DWORD)v5;
    *((_QWORD *)this + 3) = v6;
    memcpy(v6, *((const void **)a2 + 3), *((unsigned int *)a2 + 9));
  }
  *(_QWORD *)this = off_1E3410220;
  v7 = (WTF *)*((unsigned int *)a2 + 13);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 13) = (_DWORD)v7;
  if ((_DWORD)v7)
  {
    v8 = (void *)WTF::fastMalloc(v7);
    *((_DWORD *)this + 12) = (_DWORD)v7;
    *((_QWORD *)this + 5) = v8;
    memcpy(v8, *((const void **)a2 + 5), *((unsigned int *)a2 + 13));
  }
  return this;
}

WebCore::ISOFairPlayStreamingKeyVersionListBox *WebCore::ISOFairPlayStreamingKeyVersionListBox::ISOFairPlayStreamingKeyVersionListBox(WebCore::ISOFairPlayStreamingKeyVersionListBox *this, const WebCore::ISOFairPlayStreamingKeyVersionListBox *a2)
{
  uint64_t v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = off_1E3416B60;
  v4 = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_QWORD *)this + 1) = v4;
  v5 = (WTF *)*((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = (_DWORD)v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)WTF::fastMalloc(v5);
    *((_DWORD *)this + 8) = (_DWORD)v5;
    *((_QWORD *)this + 3) = v6;
    memcpy(v6, *((const void **)a2 + 3), *((unsigned int *)a2 + 9));
  }
  *(_QWORD *)this = off_1E3410248;
  v7 = (WTF *)*((unsigned int *)a2 + 13);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 13) = (_DWORD)v7;
  if ((_DWORD)v7)
  {
    v8 = (void *)WTF::fastMalloc(v7);
    *((_DWORD *)this + 12) = (_DWORD)v7;
    *((_QWORD *)this + 5) = v8;
    memcpy(v8, *((const void **)a2 + 5), *((unsigned int *)a2 + 13));
  }
  return this;
}

{
  uint64_t v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = off_1E3416B60;
  v4 = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_QWORD *)this + 1) = v4;
  v5 = (WTF *)*((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = (_DWORD)v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)WTF::fastMalloc(v5);
    *((_DWORD *)this + 8) = (_DWORD)v5;
    *((_QWORD *)this + 3) = v6;
    memcpy(v6, *((const void **)a2 + 3), *((unsigned int *)a2 + 9));
  }
  *(_QWORD *)this = off_1E3410248;
  v7 = (WTF *)*((unsigned int *)a2 + 13);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 13) = (_DWORD)v7;
  if ((_DWORD)v7)
  {
    v8 = (void *)WTF::fastMalloc(v7);
    *((_DWORD *)this + 12) = (_DWORD)v7;
    *((_QWORD *)this + 5) = v8;
    memcpy(v8, *((const void **)a2 + 5), *((unsigned int *)a2 + 13));
  }
  return this;
}

WebCore::ISOFairPlayStreamingKeyRequestBox *WebCore::ISOFairPlayStreamingKeyRequestBox::ISOFairPlayStreamingKeyRequestBox(WebCore::ISOFairPlayStreamingKeyRequestBox *this, const WebCore::ISOFairPlayStreamingKeyRequestBox *a2)
{
  uint64_t v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  char *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  void *v27;

  *(_QWORD *)this = off_1E3416B60;
  v4 = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_QWORD *)this + 1) = v4;
  v5 = (WTF *)*((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = (_DWORD)v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)WTF::fastMalloc(v5);
    *((_DWORD *)this + 8) = (_DWORD)v5;
    *((_QWORD *)this + 3) = v6;
    memcpy(v6, *((const void **)a2 + 3), *((unsigned int *)a2 + 9));
  }
  *(_QWORD *)this = off_1E3410270;
  *((_QWORD *)this + 5) = off_1E3416B60;
  v7 = *((_QWORD *)a2 + 6);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_QWORD *)this + 6) = v7;
  v8 = (WTF *)*((unsigned int *)a2 + 19);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 19) = (_DWORD)v8;
  if ((_DWORD)v8)
  {
    v9 = (void *)WTF::fastMalloc(v8);
    *((_DWORD *)this + 18) = (_DWORD)v8;
    *((_QWORD *)this + 8) = v9;
    memcpy(v9, *((const void **)a2 + 8), *((unsigned int *)a2 + 19));
  }
  *((_QWORD *)this + 5) = off_1E3416B88;
  v10 = *((_QWORD *)a2 + 10);
  *((_QWORD *)this + 5) = off_1E34101D0;
  v11 = (char *)this + 104;
  *((_QWORD *)this + 10) = v10;
  v12 = (WTF *)*((unsigned int *)a2 + 25);
  *((_QWORD *)this + 11) = (char *)this + 104;
  *((_DWORD *)this + 24) = 16;
  *((_DWORD *)this + 25) = (_DWORD)v12;
  if (v12 >= 0x11)
  {
    v11 = (char *)WTF::fastMalloc(v12);
    *((_DWORD *)this + 24) = (_DWORD)v12;
    *((_QWORD *)this + 11) = v11;
  }
  memcpy(v11, *((const void **)a2 + 11), *((unsigned int *)a2 + 25));
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 176) = 0;
  if (*((_BYTE *)a2 + 176))
  {
    *((_QWORD *)this + 15) = off_1E3416B60;
    v13 = *((_QWORD *)a2 + 16);
    *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
    *((_QWORD *)this + 16) = v13;
    v14 = (WTF *)*((unsigned int *)a2 + 39);
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 19) = 0;
    *((_DWORD *)this + 39) = (_DWORD)v14;
    if ((_DWORD)v14)
    {
      v15 = (void *)WTF::fastMalloc(v14);
      *((_DWORD *)this + 38) = (_DWORD)v14;
      *((_QWORD *)this + 18) = v15;
      memcpy(v15, *((const void **)a2 + 18), *((unsigned int *)a2 + 39));
    }
    *((_QWORD *)this + 15) = off_1E34101F8;
    v16 = (WTF *)*((unsigned int *)a2 + 43);
    *((_QWORD *)this + 20) = 0;
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 43) = (_DWORD)v16;
    if ((_DWORD)v16)
    {
      v17 = (void *)WTF::fastMalloc(v16);
      *((_DWORD *)this + 42) = (_DWORD)v16;
      *((_QWORD *)this + 20) = v17;
      memcpy(v17, *((const void **)a2 + 20), *((unsigned int *)a2 + 43));
    }
    *((_BYTE *)this + 176) = 1;
  }
  *((_BYTE *)this + 184) = 0;
  *((_BYTE *)this + 240) = 0;
  if (*((_BYTE *)a2 + 240))
  {
    *((_QWORD *)this + 23) = off_1E3416B60;
    v18 = *((_QWORD *)a2 + 24);
    *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
    *((_QWORD *)this + 24) = v18;
    v19 = (WTF *)*((unsigned int *)a2 + 55);
    *((_QWORD *)this + 26) = 0;
    *((_QWORD *)this + 27) = 0;
    *((_DWORD *)this + 55) = (_DWORD)v19;
    if ((_DWORD)v19)
    {
      v20 = (void *)WTF::fastMalloc(v19);
      *((_DWORD *)this + 54) = (_DWORD)v19;
      *((_QWORD *)this + 26) = v20;
      memcpy(v20, *((const void **)a2 + 26), *((unsigned int *)a2 + 55));
    }
    *((_QWORD *)this + 23) = off_1E3410220;
    v21 = (WTF *)*((unsigned int *)a2 + 59);
    *((_QWORD *)this + 28) = 0;
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 59) = (_DWORD)v21;
    if ((_DWORD)v21)
    {
      v22 = (void *)WTF::fastMalloc(v21);
      *((_DWORD *)this + 58) = (_DWORD)v21;
      *((_QWORD *)this + 28) = v22;
      memcpy(v22, *((const void **)a2 + 28), *((unsigned int *)a2 + 59));
    }
    *((_BYTE *)this + 240) = 1;
  }
  *((_BYTE *)this + 248) = 0;
  *((_BYTE *)this + 304) = 0;
  if (*((_BYTE *)a2 + 304))
  {
    *((_QWORD *)this + 31) = off_1E3416B60;
    v23 = *((_QWORD *)a2 + 32);
    *((_DWORD *)this + 66) = *((_DWORD *)a2 + 66);
    *((_QWORD *)this + 32) = v23;
    v24 = (WTF *)*((unsigned int *)a2 + 71);
    *((_QWORD *)this + 34) = 0;
    *((_QWORD *)this + 35) = 0;
    *((_DWORD *)this + 71) = (_DWORD)v24;
    if ((_DWORD)v24)
    {
      v25 = (void *)WTF::fastMalloc(v24);
      *((_DWORD *)this + 70) = (_DWORD)v24;
      *((_QWORD *)this + 34) = v25;
      memcpy(v25, *((const void **)a2 + 34), *((unsigned int *)a2 + 71));
    }
    *((_QWORD *)this + 31) = off_1E3410248;
    v26 = (WTF *)*((unsigned int *)a2 + 75);
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 37) = 0;
    *((_DWORD *)this + 75) = (_DWORD)v26;
    if ((_DWORD)v26)
    {
      v27 = (void *)WTF::fastMalloc(v26);
      *((_DWORD *)this + 74) = (_DWORD)v26;
      *((_QWORD *)this + 36) = v27;
      memcpy(v27, *((const void **)a2 + 36), *((unsigned int *)a2 + 75));
    }
    *((_BYTE *)this + 304) = 1;
  }
  return this;
}

void WebCore::ISOFairPlayStreamingKeyRequestBox::~ISOFairPlayStreamingKeyRequestBox(WebCore::ISOFairPlayStreamingKeyRequestBox *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v11;
  WTF *v12;

  if (*((_BYTE *)this + 304))
  {
    v3 = (WTF *)*((_QWORD *)this + 36);
    if (v3)
    {
      *((_QWORD *)this + 36) = 0;
      *((_DWORD *)this + 74) = 0;
      WTF::fastFree(v3, a2);
    }
    *((_QWORD *)this + 31) = off_1E3416B60;
    v4 = (WTF *)*((_QWORD *)this + 34);
    if (v4)
    {
      *((_QWORD *)this + 34) = 0;
      *((_DWORD *)this + 70) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  if (*((_BYTE *)this + 240))
  {
    v5 = (WTF *)*((_QWORD *)this + 28);
    if (v5)
    {
      *((_QWORD *)this + 28) = 0;
      *((_DWORD *)this + 58) = 0;
      WTF::fastFree(v5, a2);
    }
    *((_QWORD *)this + 23) = off_1E3416B60;
    v6 = (WTF *)*((_QWORD *)this + 26);
    if (v6)
    {
      *((_QWORD *)this + 26) = 0;
      *((_DWORD *)this + 54) = 0;
      WTF::fastFree(v6, a2);
    }
  }
  if (*((_BYTE *)this + 176))
  {
    v7 = (WTF *)*((_QWORD *)this + 20);
    if (v7)
    {
      *((_QWORD *)this + 20) = 0;
      *((_DWORD *)this + 42) = 0;
      WTF::fastFree(v7, a2);
    }
    *((_QWORD *)this + 15) = off_1E3416B60;
    v8 = (WTF *)*((_QWORD *)this + 18);
    if (v8)
    {
      *((_QWORD *)this + 18) = 0;
      *((_DWORD *)this + 38) = 0;
      WTF::fastFree(v8, a2);
    }
  }
  v9 = (WTF *)*((_QWORD *)this + 11);
  if ((WebCore::ISOFairPlayStreamingKeyRequestBox *)((char *)this + 104) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v9, a2);
  }
  *((_QWORD *)this + 5) = off_1E3416B60;
  v11 = (WTF *)*((_QWORD *)this + 8);
  if (v11)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v11, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v12 = (WTF *)*((_QWORD *)this + 3);
  if (v12)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v12, a2);
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::ISOFairPlayStreamingKeyRequestBox::~ISOFairPlayStreamingKeyRequestBox(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::ISOFairPlayStreamingInitDataBox::ISOFairPlayStreamingInitDataBox(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)this = off_1E3410298;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_BYTE *)(this + 80) = 0;
  *(_QWORD *)(this + 40) = off_1E34101A8;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 84) = 0;
  *(_DWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 96) = 0;
  *(_QWORD *)(this + 104) = 0;
  return this;
}

{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)this = off_1E3410298;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_BYTE *)(this + 80) = 0;
  *(_QWORD *)(this + 40) = off_1E34101A8;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 84) = 0;
  *(_DWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 96) = 0;
  *(_QWORD *)(this + 104) = 0;
  return this;
}

void WebCore::ISOFairPlayStreamingInitDataBox::~ISOFairPlayStreamingInitDataBox(WebCore::ISOFairPlayStreamingInitDataBox *this, void *a2)
{
  unsigned int v3;
  WebCore::ISOFairPlayStreamingKeyRequestBox *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;

  v3 = *((_DWORD *)this + 27);
  if (v3)
  {
    v4 = (WebCore::ISOFairPlayStreamingKeyRequestBox *)*((_QWORD *)this + 12);
    v5 = 312 * v3;
    do
    {
      WebCore::ISOFairPlayStreamingKeyRequestBox::~ISOFairPlayStreamingKeyRequestBox(v4, a2);
      v4 = (WebCore::ISOFairPlayStreamingKeyRequestBox *)(v6 + 312);
      v5 -= 312;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 12);
  if (v7)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v7, a2);
  }
  *((_QWORD *)this + 5) = off_1E3416B60;
  v8 = (WTF *)*((_QWORD *)this + 8);
  if (v8)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v8, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v9 = (WTF *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v9, a2);
  }
}

{
  unsigned int v3;
  WebCore::ISOFairPlayStreamingKeyRequestBox *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;

  v3 = *((_DWORD *)this + 27);
  if (v3)
  {
    v4 = (WebCore::ISOFairPlayStreamingKeyRequestBox *)*((_QWORD *)this + 12);
    v5 = 312 * v3;
    do
    {
      WebCore::ISOFairPlayStreamingKeyRequestBox::~ISOFairPlayStreamingKeyRequestBox(v4, a2);
      v4 = (WebCore::ISOFairPlayStreamingKeyRequestBox *)(v6 + 312);
      v5 -= 312;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 12);
  if (v7)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v7, a2);
  }
  *((_QWORD *)this + 5) = off_1E3416B60;
  v8 = (WTF *)*((_QWORD *)this + 8);
  if (v8)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v8, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v9 = (WTF *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v9, a2);
  }
}

{
  unsigned int v3;
  WebCore::ISOFairPlayStreamingKeyRequestBox *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;

  v3 = *((_DWORD *)this + 27);
  if (v3)
  {
    v4 = (WebCore::ISOFairPlayStreamingKeyRequestBox *)*((_QWORD *)this + 12);
    v5 = 312 * v3;
    do
    {
      WebCore::ISOFairPlayStreamingKeyRequestBox::~ISOFairPlayStreamingKeyRequestBox(v4, a2);
      v4 = (WebCore::ISOFairPlayStreamingKeyRequestBox *)(v6 + 312);
      v5 -= 312;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 12);
  if (v7)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v7, a2);
  }
  *((_QWORD *)this + 5) = off_1E3416B60;
  v8 = (WTF *)*((_QWORD *)this + 8);
  if (v8)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v8, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v9 = (WTF *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  WTF::fastFree(this, a2);
}

double WebCore::ISOFairPlayStreamingPsshBox::ISOFairPlayStreamingPsshBox(WebCore::ISOFairPlayStreamingPsshBox *this)
{
  double result;

  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *((_DWORD *)this + 23) = 0;
  *(_QWORD *)this = off_1E34102C0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 12) = off_1E3410298;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_QWORD *)this + 17) = off_1E34101A8;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 45) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  return result;
}

{
  double result;

  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *((_DWORD *)this + 23) = 0;
  *(_QWORD *)this = off_1E34102C0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 12) = off_1E3410298;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_QWORD *)this + 17) = off_1E34101A8;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 45) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  return result;
}

void WebCore::ISOFairPlayStreamingPsshBox::~ISOFairPlayStreamingPsshBox(WebCore::ISOFairPlayStreamingPsshBox *this, void *a2)
{
  unsigned int v3;
  WebCore::ISOFairPlayStreamingKeyRequestBox *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;

  v3 = *((_DWORD *)this + 51);
  if (v3)
  {
    v4 = (WebCore::ISOFairPlayStreamingKeyRequestBox *)*((_QWORD *)this + 24);
    v5 = 312 * v3;
    do
    {
      WebCore::ISOFairPlayStreamingKeyRequestBox::~ISOFairPlayStreamingKeyRequestBox(v4, a2);
      v4 = (WebCore::ISOFairPlayStreamingKeyRequestBox *)(v6 + 312);
      v5 -= 312;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 24);
  if (v7)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v7, a2);
  }
  *((_QWORD *)this + 17) = off_1E3416B60;
  v8 = (WTF *)*((_QWORD *)this + 20);
  if (v8)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v8, a2);
  }
  *((_QWORD *)this + 12) = off_1E3416B60;
  v9 = (WTF *)*((_QWORD *)this + 15);
  if (v9)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v9, a2);
  }
  WebCore::ISOProtectionSystemSpecificHeaderBox::~ISOProtectionSystemSpecificHeaderBox(this, a2);
}

{
  unsigned int v3;
  WebCore::ISOFairPlayStreamingKeyRequestBox *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;

  v3 = *((_DWORD *)this + 51);
  if (v3)
  {
    v4 = (WebCore::ISOFairPlayStreamingKeyRequestBox *)*((_QWORD *)this + 24);
    v5 = 312 * v3;
    do
    {
      WebCore::ISOFairPlayStreamingKeyRequestBox::~ISOFairPlayStreamingKeyRequestBox(v4, a2);
      v4 = (WebCore::ISOFairPlayStreamingKeyRequestBox *)(v6 + 312);
      v5 -= 312;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 24);
  if (v7)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v7, a2);
  }
  *((_QWORD *)this + 17) = off_1E3416B60;
  v8 = (WTF *)*((_QWORD *)this + 20);
  if (v8)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v8, a2);
  }
  *((_QWORD *)this + 12) = off_1E3416B60;
  v9 = (WTF *)*((_QWORD *)this + 15);
  if (v9)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v9, a2);
  }
  WebCore::ISOProtectionSystemSpecificHeaderBox::~ISOProtectionSystemSpecificHeaderBox(this, a2);
}

{
  unsigned int v3;
  WebCore::ISOFairPlayStreamingKeyRequestBox *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  void *v11;

  v3 = *((_DWORD *)this + 51);
  if (v3)
  {
    v4 = (WebCore::ISOFairPlayStreamingKeyRequestBox *)*((_QWORD *)this + 24);
    v5 = 312 * v3;
    do
    {
      WebCore::ISOFairPlayStreamingKeyRequestBox::~ISOFairPlayStreamingKeyRequestBox(v4, a2);
      v4 = (WebCore::ISOFairPlayStreamingKeyRequestBox *)(v6 + 312);
      v5 -= 312;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 24);
  if (v7)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v7, a2);
  }
  *((_QWORD *)this + 17) = off_1E3416B60;
  v8 = (WTF *)*((_QWORD *)this + 20);
  if (v8)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v8, a2);
  }
  *((_QWORD *)this + 12) = off_1E3416B60;
  v9 = (WTF *)*((_QWORD *)this + 15);
  if (v9)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v9, a2);
  }
  WebCore::ISOProtectionSystemSpecificHeaderBox::~ISOProtectionSystemSpecificHeaderBox(this, a2);
  WTF::fastFree(v10, v11);
}

void WebCore::WebMResourceClient::~WebMResourceClient(WebCore::WebMResourceClient *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::WebMResourceClient::~WebMResourceClient(this, a2);
  WTF::fastFree(v2, v3);
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v3 = (_QWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (!v3)
    goto LABEL_35;
  (*(void (**)(_QWORD *))(*v3 + 24))(v3);
  v4 = v3[1];
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v25 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v25 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (!v11)
    goto LABEL_35;
  v12 = *(_QWORD *)(v11 + 8);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEA534C](v12);
LABEL_23:
  v14 = *(_QWORD *)(v12 + 8);
  v15 = v14 - 1;
  *(_QWORD *)(v12 + 8) = v14 - 1;
  if (v14 == 1)
  {
    v26 = *(_QWORD *)(v12 + 16);
    v16 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v12 + 24) = 0;
    v17 = v26 != 0;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  v18 = __ldxr((unsigned __int8 *)v12);
  if (v18 != 1)
  {
    __clrex();
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v15)
      goto LABEL_35;
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
    goto LABEL_30;
  if (v15)
    goto LABEL_35;
LABEL_31:
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  if (!v17)
    WTF::fastFree((WTF *)v12, a2);
LABEL_35:
  v19 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v19)
    return;
  if (__ldaxr((unsigned __int8 *)v19))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v19))
  {
    goto LABEL_40;
  }
  MEMORY[0x19AEA534C](v19);
LABEL_40:
  v21 = *(_QWORD *)(v19 + 16) - 1;
  *(_QWORD *)(v19 + 16) = v21;
  if (!v21)
  {
    v22 = *(_QWORD *)(v19 + 8);
    v23 = __ldxr((unsigned __int8 *)v19);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v19))
      {
        if (v22)
          return;
LABEL_47:
        WTF::fastFree((WTF *)v19, a2);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
    if (v22)
      return;
    goto LABEL_47;
  }
  v24 = __ldxr((unsigned __int8 *)v19);
  if (v24 != 1)
  {
    __clrex();
    goto LABEL_53;
  }
  if (__stlxr(0, (unsigned __int8 *)v19))
LABEL_53:
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
}

WTF **WebCore::AdvanceInternalState::updateFont(WebCore::AdvanceInternalState *this, const WebCore::Font *a2)
{
  uint64_t v3;
  WTF **result;
  WTF *v5;
  void *v6;

  v3 = *(_QWORD *)this;
  if (a2)
    ++*(_DWORD *)a2;
  result = (WTF **)*((_QWORD *)this + 1);
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::Font::~Font(result);
      return (WTF **)WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::OriginalAdvancesForCharacterTreatedAsSpace,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,unsigned int &,BOOL,float>(uint64_t result, unsigned int *a2, char *a3, int *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;

  v7 = result;
  v8 = *(unsigned int *)(result + 8);
  v9 = *(unsigned int *)(result + 12);
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v9 + 1)
    v12 = v9 + 1;
  else
    v12 = v11;
  if (v12 <= v8)
  {
LABEL_16:
    v17 = *(unsigned int *)(v7 + 12);
    v18 = v17 + 1;
    v19 = *(_QWORD *)v7 + 16 * v17;
    v20 = *a3;
    v21 = *a4;
    *(_QWORD *)v19 = *a2;
    *(_BYTE *)(v19 + 8) = v20;
    *(_DWORD *)(v19 + 12) = v21;
    *(_DWORD *)(v7 + 12) = v18;
    return result;
  }
  v13 = *(WTF **)result;
  if (v12 < 0x41)
  {
    result += 16;
    *(_QWORD *)v7 = v7 + 16;
    *(_DWORD *)(v7 + 8) = 64;
    if (!(_DWORD)v9)
      goto LABEL_15;
    goto LABEL_13;
  }
  if (!(v12 >> 28))
  {
    result = WTF::fastMalloc((WTF *)(16 * v12));
    *(_DWORD *)(v7 + 8) = v12;
    *(_QWORD *)v7 = result;
    if (!(_DWORD)v9)
      goto LABEL_15;
LABEL_13:
    v14 = 16 * v9;
    v15 = v13;
    do
    {
      v16 = *(_OWORD *)v15;
      v15 = (WTF *)((char *)v15 + 16);
      *(_OWORD *)result = v16;
      result += 16;
      v14 -= 16;
    }
    while (v14);
LABEL_15:
    if ((WTF *)(v7 + 16) != v13 && v13)
    {
      if (*(WTF **)v7 == v13)
      {
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
      }
      result = WTF::fastFree(v13, a2);
    }
    goto LABEL_16;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ISOFairPlayStreamingKeyRequestBox::ISOFairPlayStreamingKeyRequestBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = off_1E3416B60;
  v4 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 32) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 36) = v5;
  *(_QWORD *)a1 = off_1E3410270;
  *(_QWORD *)(a1 + 40) = off_1E3416B60;
  v6 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = (WTF *)*(unsigned int *)(a2 + 76);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = (_DWORD)v7;
  if ((_DWORD)v7)
  {
    v8 = (void *)WTF::fastMalloc(v7);
    *(_DWORD *)(a1 + 72) = (_DWORD)v7;
    *(_QWORD *)(a1 + 64) = v8;
    memcpy(v8, *(const void **)(a2 + 64), *(unsigned int *)(a2 + 76));
  }
  *(_QWORD *)(a1 + 40) = off_1E3416B88;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 40) = off_1E34101D0;
  v10 = (void *)(a1 + 104);
  *(_QWORD *)(a1 + 80) = v9;
  v11 = (WTF *)*(unsigned int *)(a2 + 100);
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_DWORD *)(a1 + 96) = 16;
  *(_DWORD *)(a1 + 100) = (_DWORD)v11;
  if (v11 >= 0x11)
  {
    v10 = (void *)WTF::fastMalloc(v11);
    *(_DWORD *)(a1 + 96) = (_DWORD)v11;
    *(_QWORD *)(a1 + 88) = v10;
  }
  memcpy(v10, *(const void **)(a2 + 88), *(unsigned int *)(a2 + 100));
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  if (*(_BYTE *)(a2 + 176))
  {
    *(_QWORD *)(a1 + 120) = off_1E3416B60;
    v12 = *(_QWORD *)(a2 + 128);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 128) = v12;
    v13 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a1 + 144) = v13;
    LODWORD(v13) = *(_DWORD *)(a2 + 152);
    *(_DWORD *)(a2 + 152) = 0;
    *(_DWORD *)(a1 + 152) = v13;
    LODWORD(v13) = *(_DWORD *)(a2 + 156);
    *(_DWORD *)(a2 + 156) = 0;
    *(_DWORD *)(a1 + 156) = v13;
    *(_QWORD *)(a1 + 120) = off_1E34101F8;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    v14 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a1 + 160) = v14;
    LODWORD(v14) = *(_DWORD *)(a2 + 168);
    *(_DWORD *)(a2 + 168) = 0;
    *(_DWORD *)(a1 + 168) = v14;
    LODWORD(v14) = *(_DWORD *)(a2 + 172);
    *(_DWORD *)(a2 + 172) = 0;
    *(_DWORD *)(a1 + 172) = v14;
    *(_BYTE *)(a1 + 176) = 1;
  }
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  if (*(_BYTE *)(a2 + 240))
  {
    *(_QWORD *)(a1 + 184) = off_1E3416B60;
    v15 = *(_QWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 192) = v15;
    v16 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a2 + 208) = 0;
    *(_QWORD *)(a1 + 208) = v16;
    LODWORD(v16) = *(_DWORD *)(a2 + 216);
    *(_DWORD *)(a2 + 216) = 0;
    *(_DWORD *)(a1 + 216) = v16;
    LODWORD(v16) = *(_DWORD *)(a2 + 220);
    *(_DWORD *)(a2 + 220) = 0;
    *(_DWORD *)(a1 + 220) = v16;
    *(_QWORD *)(a1 + 184) = off_1E3410220;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    v17 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a2 + 224) = 0;
    *(_QWORD *)(a1 + 224) = v17;
    LODWORD(v17) = *(_DWORD *)(a2 + 232);
    *(_DWORD *)(a2 + 232) = 0;
    *(_DWORD *)(a1 + 232) = v17;
    LODWORD(v17) = *(_DWORD *)(a2 + 236);
    *(_DWORD *)(a2 + 236) = 0;
    *(_DWORD *)(a1 + 236) = v17;
    *(_BYTE *)(a1 + 240) = 1;
  }
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  if (*(_BYTE *)(a2 + 304))
  {
    *(_QWORD *)(a1 + 248) = off_1E3416B60;
    v18 = *(_QWORD *)(a2 + 256);
    *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 256) = v18;
    v19 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a2 + 272) = 0;
    *(_QWORD *)(a1 + 272) = v19;
    LODWORD(v19) = *(_DWORD *)(a2 + 280);
    *(_DWORD *)(a2 + 280) = 0;
    *(_DWORD *)(a1 + 280) = v19;
    LODWORD(v19) = *(_DWORD *)(a2 + 284);
    *(_DWORD *)(a2 + 284) = 0;
    *(_DWORD *)(a1 + 284) = v19;
    *(_QWORD *)(a1 + 248) = off_1E3410248;
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
    v20 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a2 + 288) = 0;
    *(_QWORD *)(a1 + 288) = v20;
    LODWORD(v20) = *(_DWORD *)(a2 + 296);
    *(_DWORD *)(a2 + 296) = 0;
    *(_DWORD *)(a1 + 296) = v20;
    LODWORD(v20) = *(_DWORD *)(a2 + 300);
    *(_DWORD *)(a2 + 300) = 0;
    *(_DWORD *)(a1 + 300) = v20;
    *(_BYTE *)(a1 + 304) = 1;
  }
  return a1;
}

unint64_t WTF::Vector<WebCore::ISOFairPlayStreamingKeyRequestBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 312 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebCore::ISOFairPlayStreamingKeyRequestBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::ISOFairPlayStreamingKeyRequestBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebCore::ISOFairPlayStreamingKeyRequestBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  WTF *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::ISOFairPlayStreamingKeyRequestBox *v13;
  void *v14;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xD20D21)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(WTF **)a1;
      v7 = *(_DWORD *)(a1 + 12);
      v8 = 312 * v4;
      v9 = WTF::fastMalloc((WTF *)(312 * v4));
      *(_DWORD *)(a1 + 8) = v8 / 0x138;
      *(_QWORD *)a1 = v9;
      if (v7)
      {
        v11 = v9;
        v12 = 312 * v7;
        v13 = v6;
        do
        {
          WebCore::ISOFairPlayStreamingKeyRequestBox::ISOFairPlayStreamingKeyRequestBox(v11, (uint64_t)v13);
          WebCore::ISOFairPlayStreamingKeyRequestBox::~ISOFairPlayStreamingKeyRequestBox(v13, v14);
          v11 += 312;
          v13 = (WebCore::ISOFairPlayStreamingKeyRequestBox *)((char *)v13 + 312);
          v12 -= 312;
        }
        while (v12);
      }
      if (v6)
      {
        if (*(WTF **)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10);
      }
    }
  }
}

void WebCore::InbandMetadataTextTrackPrivateAVF::~InbandMetadataTextTrackPrivateAVF(WebCore::InbandMetadataTextTrackPrivateAVF *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E34102E8;
  v3 = *((unsigned int *)this + 25);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 11);
    v5 = 24 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 11);
  if (v7)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  *(_QWORD *)this = &unk_1E340FFE8;
  v9 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::InbandMetadataTextTrackPrivateAVF::~InbandMetadataTextTrackPrivateAVF(this, a2);
  WTF::fastFree(v2, v3);
}

_QWORD *WebCore::InbandMetadataTextTrackPrivateAVF::updatePendingCueEndTimes(WebCore::InbandMetadataTextTrackPrivateAVF *this, const WTF::MediaTime *a2)
{
  WTF::MediaTime *v2;
  WebCore::InbandMetadataTextTrackPrivateAVF *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  NSObject *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::Logger *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::Logger *v56;
  WTF::MediaTime *v57;
  uint64_t v58;
  WTF::StringImpl **v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  int v66;
  WTF::StringImpl *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::String *v71;
  uint64_t v72;
  WTF::Logger *v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::Logger *v80;
  uint64_t v81;
  WTF::StringImpl **v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  int v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  _QWORD *result;
  uint64_t v94;
  uint64_t v95;
  WebCore::InbandMetadataTextTrackPrivateAVF *v96;
  WTF::MediaTime *v97;
  WTF::String *v98;
  const char *v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  WTF::Logger *v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  __int128 buf;
  int v115;
  WTF::StringImpl *v116;
  int v117;
  WTF::StringImpl *v118;
  int v119;
  WTF::StringImpl *v120;
  int v121;
  WTF::StringImpl *v122;
  uint64_t v123;

  v2 = a2;
  v3 = this;
  v123 = *MEMORY[0x1E0C80C00];
  v97 = (WebCore::InbandMetadataTextTrackPrivateAVF *)((char *)this + 72);
  v4 = WTF::MediaTime::compare(a2, (WebCore::InbandMetadataTextTrackPrivateAVF *)((char *)this + 72));
  v96 = v3;
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (unsigned __int8 *)v3 + 12;
    if (__ldaxr((unsigned __int8 *)v3 + 12))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_43;
    }
    v4 = MEMORY[0x19AEA534C]((char *)v3 + 12);
LABEL_43:
    v23 = *((_DWORD *)v3 + 7);
    v24 = __ldxr(v5);
    if (v24 == 1)
    {
      if (!__stlxr(0, v5))
      {
        if (!v23)
          goto LABEL_202;
        goto LABEL_49;
      }
    }
    else
    {
      __clrex();
    }
    v4 = WTF::Lock::unlockSlow((WebCore::InbandMetadataTextTrackPrivateAVF *)((char *)v3 + 12));
    if (!v23)
      goto LABEL_202;
LABEL_49:
    v25 = *((_DWORD *)v3 + 25);
    if (v25)
    {
      v26 = *((_QWORD *)v3 + 11);
      v27 = v26 + 24 * v25;
      v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      v95 = v27;
      do
      {
        v29 = *((_QWORD *)v3 + 4);
        v30 = *((_QWORD *)v3 + 5);
        v99 = "InbandMetadataTextTrackPrivateAVF";
        v100 = 34;
        v101 = "updatePendingCueEndTimes";
        v102 = v30;
        if (*(_BYTE *)(v29 + 12))
        {
          if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
          {
            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v99);
            WTF::String::String((WTF::String *)&v108, "updating cue: start = ");
            WTF::MediaTime::toJSONString((WTF::MediaTime *)(v26 + 8));
            WTF::String::String((WTF::String *)&v106, ", end = ");
            WTF::MediaTime::toJSONString(v2);
            v103 = v108;
            v113 = v107;
            *(_QWORD *)&buf = v109;
            v111 = v105;
            v112 = v106;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v103, (uint64_t *)&v113, (uint64_t *)&v112, (uint64_t *)&v111, &v110);
            if (!v110)
              goto LABEL_218;
            v33 = v105;
            v105 = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 2)
                WTF::StringImpl::destroy(v33, v32);
              else
                *(_DWORD *)v33 -= 2;
            }
            v34 = v106;
            v106 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, v32);
              else
                *(_DWORD *)v34 -= 2;
            }
            v35 = v107;
            v107 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v32);
              else
                *(_DWORD *)v35 -= 2;
            }
            v36 = v108;
            v108 = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, v32);
              else
                *(_DWORD *)v36 -= 2;
            }
            v37 = v109;
            v109 = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2)
                WTF::StringImpl::destroy(v37, v32);
              else
                *(_DWORD *)v37 -= 2;
            }
            v38 = qword_1ECE7C4A0;
            v39 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v39)
            {
              WTF::String::utf8();
              v41 = v103 ? (char *)v103 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v41;
              _os_log_impl(&dword_1940B8000, v38, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v39 = (uint64_t)v103;
              v103 = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 1)
                  v39 = WTF::fastFree((WTF *)v39, v40);
                else
                  --*(_DWORD *)v39;
              }
            }
            if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
            {
              while (1)
              {
                v42 = *v28;
                if ((v42 & 1) != 0)
                  break;
                v43 = __ldaxr(v28);
                if (v43 == v42)
                {
                  if (!__stxr(v42 | 1, v28))
                  {
                    v44 = WTF::Logger::observers((WTF::Logger *)v39);
                    v45 = *(unsigned int *)(v44 + 12);
                    if ((_DWORD)v45)
                    {
                      v46 = *(uint64_t **)v44;
                      v47 = *(_QWORD *)v44 + 8 * v45;
                      do
                      {
                        v48 = *v46;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v99);
                        v115 = 0;
                        WTF::String::String((WTF::String *)&v116, "updating cue: start = ");
                        v117 = 1;
                        WTF::MediaTime::toJSONString((WTF::MediaTime *)(v26 + 8));
                        v119 = 0;
                        WTF::String::String((WTF::String *)&v120, ", end = ");
                        v121 = 1;
                        WTF::MediaTime::toJSONString(v2);
                        v103 = 0;
                        v104 = 0;
                        v49 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                        LODWORD(v104) = 5;
                        v103 = v49;
                        v50 = HIDWORD(v104);
                        *((_DWORD *)v49 + 4 * HIDWORD(v104)) = buf;
                        v51 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v49 + 2 * v50 + 1) = v51;
                        *((_DWORD *)v49 + 4 * (v50 + 1)) = v115;
                        v52 = v116;
                        if (v116)
                          *(_DWORD *)v116 += 2;
                        *((_QWORD *)v49 + 2 * (v50 + 1) + 1) = v52;
                        *((_DWORD *)v49 + 4 * (v50 + 2)) = v117;
                        v53 = v118;
                        if (v118)
                          *(_DWORD *)v118 += 2;
                        *((_QWORD *)v49 + 2 * (v50 + 2) + 1) = v53;
                        *((_DWORD *)v49 + 4 * (v50 + 3)) = v119;
                        v54 = v120;
                        if (v120)
                          *(_DWORD *)v120 += 2;
                        *((_QWORD *)v49 + 2 * (v50 + 3) + 1) = v54;
                        *((_DWORD *)v49 + 4 * (v50 + 4)) = v121;
                        v55 = v122;
                        if (v122)
                          *(_DWORD *)v122 += 2;
                        *((_QWORD *)v49 + 2 * (v50 + 4) + 1) = v55;
                        HIDWORD(v104) = v50 + 5;
                        (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v48 + 16))(v48, &WebCore::LogMedia, 3, &v103);
                        v56 = v103;
                        if (HIDWORD(v104))
                        {
                          v57 = v2;
                          v58 = 16 * HIDWORD(v104);
                          v59 = (WTF::StringImpl **)((char *)v103 + 8);
                          do
                          {
                            v60 = *v59;
                            *v59 = 0;
                            if (v60)
                            {
                              if (*(_DWORD *)v60 == 2)
                                WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v40);
                              else
                                *(_DWORD *)v60 -= 2;
                            }
                            v59 += 2;
                            v58 -= 16;
                          }
                          while (v58);
                          v56 = v103;
                          v2 = v57;
                        }
                        if (v56)
                        {
                          v103 = 0;
                          LODWORD(v104) = 0;
                          WTF::fastFree(v56, v40);
                        }
                        v61 = v122;
                        v122 = 0;
                        if (v61)
                        {
                          if (*(_DWORD *)v61 == 2)
                            WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v40);
                          else
                            *(_DWORD *)v61 -= 2;
                        }
                        v62 = v120;
                        v120 = 0;
                        if (v62)
                        {
                          if (*(_DWORD *)v62 == 2)
                            WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v40);
                          else
                            *(_DWORD *)v62 -= 2;
                        }
                        v63 = v118;
                        v118 = 0;
                        if (v63)
                        {
                          if (*(_DWORD *)v63 == 2)
                            WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v40);
                          else
                            *(_DWORD *)v63 -= 2;
                        }
                        v64 = v116;
                        v116 = 0;
                        if (v64)
                        {
                          if (*(_DWORD *)v64 == 2)
                            WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v40);
                          else
                            *(_DWORD *)v64 -= 2;
                        }
                        v65 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v65)
                        {
                          if (*(_DWORD *)v65 == 2)
                            WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v40);
                          else
                            *(_DWORD *)v65 -= 2;
                        }
                        ++v46;
                      }
                      while (v46 != (uint64_t *)v47);
                    }
                    v66 = __ldxr(v28);
                    if (v66 == 1)
                    {
                      v3 = v96;
                      v27 = v95;
                      if (!__stlxr(0, v28))
                        break;
                    }
                    else
                    {
                      __clrex();
                      v3 = v96;
                      v27 = v95;
                    }
                    WTF::Lock::unlockSlow((WTF::Lock *)v28);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v67 = v110;
            v110 = 0;
            if (v67)
            {
              if (*(_DWORD *)v67 == 2)
                WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v40);
              else
                *(_DWORD *)v67 -= 2;
            }
          }
        }
        v68 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v68 = off_1E3411358;
        v68[1] = v26;
        v68[2] = v2;
        *(_QWORD *)&buf = v68;
        WebCore::TrackPrivateBase::notifyMainThreadClient((uint64_t)v3, (uint64_t *)&buf);
        v4 = buf;
        *(_QWORD *)&buf = 0;
        if (v4)
          v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v26 += 24;
      }
      while (v26 != v27);
    }
    goto LABEL_202;
  }
  v7 = *((_QWORD *)v3 + 4);
  v8 = *((_QWORD *)v3 + 5);
  v99 = "InbandMetadataTextTrackPrivateAVF";
  v100 = 34;
  v101 = "updatePendingCueEndTimes";
  v102 = v8;
  if (*(_BYTE *)(v7 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 2u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v99);
      WTF::String::String((WTF::String *)&v108, "negative length cue(s) ignored: start = ");
      WTF::MediaTime::toJSONString(v97);
      WTF::String::String((WTF::String *)&v106, ", end = ");
      WTF::MediaTime::toJSONString(v2);
      v103 = v108;
      v113 = v107;
      *(_QWORD *)&buf = v109;
      v111 = v105;
      v112 = v106;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v103, (uint64_t *)&v113, (uint64_t *)&v112, (uint64_t *)&v111, &v110);
      if (!v110)
      {
LABEL_218:
        __break(0xC471u);
        JUMPOUT(0x1961E07A8);
      }
      v11 = v105;
      v105 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v106;
      v106 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v10);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = v107;
      v107 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v10);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v108;
      v108 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v10);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v109;
      v109 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v10);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = qword_1ECE7C4A0;
      v17 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v17)
      {
        WTF::String::utf8();
        v19 = v103 ? (char *)v103 + 16 : 0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v19;
        _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v17 = (uint64_t)v103;
        v103 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
            v17 = WTF::fastFree((WTF *)v17, v18);
          else
            --*(_DWORD *)v17;
        }
      }
      if (WebCore::LogMedia && byte_1ECE7C490 >= 2u)
      {
        v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v21 = *v20;
          if ((v21 & 1) != 0)
            break;
          v22 = __ldaxr(v20);
          if (v22 == v21)
          {
            if (!__stxr(v21 | 1, v20))
            {
              v69 = WTF::Logger::observers((WTF::Logger *)v17);
              v70 = *(unsigned int *)(v69 + 12);
              if ((_DWORD)v70)
              {
                v71 = *(WTF::String **)v69;
                v98 = (WTF::String *)(*(_QWORD *)v69 + 8 * v70);
                do
                {
                  v72 = *(_QWORD *)v71;
                  LODWORD(buf) = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v99);
                  v115 = 0;
                  WTF::String::String((WTF::String *)&v116, "negative length cue(s) ignored: start = ");
                  v117 = 1;
                  WTF::MediaTime::toJSONString(v97);
                  v119 = 0;
                  WTF::String::String((WTF::String *)&v120, ", end = ");
                  v121 = 1;
                  WTF::MediaTime::toJSONString(v2);
                  v103 = 0;
                  v104 = 0;
                  v73 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                  LODWORD(v104) = 5;
                  v103 = v73;
                  v74 = HIDWORD(v104);
                  *((_DWORD *)v73 + 4 * HIDWORD(v104)) = buf;
                  v75 = *((_QWORD *)&buf + 1);
                  if (*((_QWORD *)&buf + 1))
                    **((_DWORD **)&buf + 1) += 2;
                  *((_QWORD *)v73 + 2 * v74 + 1) = v75;
                  *((_DWORD *)v73 + 4 * (v74 + 1)) = v115;
                  v76 = v116;
                  if (v116)
                    *(_DWORD *)v116 += 2;
                  *((_QWORD *)v73 + 2 * (v74 + 1) + 1) = v76;
                  *((_DWORD *)v73 + 4 * (v74 + 2)) = v117;
                  v77 = v118;
                  if (v118)
                    *(_DWORD *)v118 += 2;
                  *((_QWORD *)v73 + 2 * (v74 + 2) + 1) = v77;
                  *((_DWORD *)v73 + 4 * (v74 + 3)) = v119;
                  v78 = v120;
                  if (v120)
                    *(_DWORD *)v120 += 2;
                  *((_QWORD *)v73 + 2 * (v74 + 3) + 1) = v78;
                  *((_DWORD *)v73 + 4 * (v74 + 4)) = v121;
                  v79 = v122;
                  if (v122)
                    *(_DWORD *)v122 += 2;
                  *((_QWORD *)v73 + 2 * (v74 + 4) + 1) = v79;
                  HIDWORD(v104) = v74 + 5;
                  (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v72 + 16))(v72, &WebCore::LogMedia, 2, &v103);
                  v80 = v103;
                  if (HIDWORD(v104))
                  {
                    v81 = 16 * HIDWORD(v104);
                    v82 = (WTF::StringImpl **)((char *)v103 + 8);
                    do
                    {
                      v83 = *v82;
                      *v82 = 0;
                      if (v83)
                      {
                        if (*(_DWORD *)v83 == 2)
                          WTF::StringImpl::destroy(v83, (WTF::StringImpl *)v18);
                        else
                          *(_DWORD *)v83 -= 2;
                      }
                      v82 += 2;
                      v81 -= 16;
                    }
                    while (v81);
                    v80 = v103;
                  }
                  if (v80)
                  {
                    v103 = 0;
                    LODWORD(v104) = 0;
                    WTF::fastFree(v80, v18);
                  }
                  v84 = v122;
                  v122 = 0;
                  if (v84)
                  {
                    if (*(_DWORD *)v84 == 2)
                      WTF::StringImpl::destroy(v84, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v84 -= 2;
                  }
                  v85 = v120;
                  v120 = 0;
                  if (v85)
                  {
                    if (*(_DWORD *)v85 == 2)
                      WTF::StringImpl::destroy(v85, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v85 -= 2;
                  }
                  v86 = v118;
                  v118 = 0;
                  if (v86)
                  {
                    if (*(_DWORD *)v86 == 2)
                      WTF::StringImpl::destroy(v86, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v86 -= 2;
                  }
                  v87 = v116;
                  v116 = 0;
                  if (v87)
                  {
                    if (*(_DWORD *)v87 == 2)
                      WTF::StringImpl::destroy(v87, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v87 -= 2;
                  }
                  v88 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                  *((_QWORD *)&buf + 1) = 0;
                  if (v88)
                  {
                    if (*(_DWORD *)v88 == 2)
                      WTF::StringImpl::destroy(v88, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v88 -= 2;
                  }
                  v71 = (WTF::String *)((char *)v71 + 8);
                }
                while (v71 != v98);
              }
              v89 = __ldxr(v20);
              if (v89 == 1)
              {
                if (!__stlxr(0, v20))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v4 = (uint64_t)v110;
      v110 = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          v4 = WTF::StringImpl::destroy((WTF::StringImpl *)v4, (WTF::StringImpl *)v18);
        else
          *(_DWORD *)v4 -= 2;
      }
    }
  }
LABEL_202:
  v90 = *((unsigned int *)v3 + 25);
  if ((_DWORD)v90)
  {
    v91 = (uint64_t *)*((_QWORD *)v3 + 11);
    v92 = 24 * v90;
    do
    {
      v4 = *v91;
      *v91 = 0;
      if (v4)
      {
        if (*(_DWORD *)(v4 + 8) == 1)
          v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        else
          --*(_DWORD *)(v4 + 8);
      }
      v91 += 3;
      v92 -= 24;
    }
    while (v92);
  }
  *((_DWORD *)v3 + 25) = 0;
  result = (_QWORD *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v4);
  v94 = *(_QWORD *)((char *)result + 5);
  *(_QWORD *)v97 = *result;
  *(_QWORD *)((char *)v97 + 5) = v94;
  return result;
}

const char *WebCore::InbandMetadataTextTrackPrivateAVF::logClassName(WebCore::InbandMetadataTextTrackPrivateAVF *this)
{
  return "InbandMetadataTextTrackPrivateAVF";
}

uint64_t WebCore::InbandMetadataTextTrackPrivateAVF::flushPartialCues(WebCore::InbandMetadataTextTrackPrivateAVF *this)
{
  char *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  char v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::Logger *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  unsigned __int8 *v45;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  WTF::StringImpl **v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[4];
  WTF::Logger *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  __int128 buf;
  int v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 72;
  v3 = (WTF::StringImpl *)WTF::MediaTime::operator BOOL();
  if (!(_DWORD)v3)
    goto LABEL_92;
  if (!*((_DWORD *)this + 25))
    goto LABEL_92;
  v4 = *((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 5);
  v57[0] = "InbandMetadataTextTrackPrivateAVF";
  v57[1] = 34;
  v57[2] = "flushPartialCues";
  v57[3] = v5;
  if (!*(_BYTE *)(v4 + 12))
    goto LABEL_92;
  if (!WebCore::LogMedia || byte_1ECE7C490 < 3u)
    goto LABEL_92;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v57);
  WTF::String::String((WTF::String *)&v61, "flushing incomplete data for cues: start = ");
  result = WTF::MediaTime::toJSONString((WTF::MediaTime *)v2);
  if (v62)
  {
    v8 = *((_DWORD *)v62 + 1);
    if (v61)
      goto LABEL_11;
LABEL_122:
    v9 = 0;
    if (v60)
      goto LABEL_12;
LABEL_123:
    v10 = 0;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v61)
    goto LABEL_122;
LABEL_11:
  v9 = *((_DWORD *)v61 + 1);
  if (!v60)
    goto LABEL_123;
LABEL_12:
  v10 = *((_DWORD *)v60 + 1);
LABEL_13:
  if ((v10 | v9) < 0
    || ((v11 = __OFADD__(v9, v10), v12 = v9 + v10, !v11) ? (v13 = 0) : (v13 = 1),
        v8 < 0 || (v13 & 1) != 0 || (result = (v8 + v12), __OFADD__(v8, v12))))
  {
    v63 = 0;
    goto LABEL_127;
  }
  if (v62 && (*((_BYTE *)v62 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_27;
  }
  if (v61)
  {
    v15 = *((_DWORD *)v61 + 4);
    v14 = (v15 >> 2) & 1;
    if (v60 && (v15 & 4) != 0)
      goto LABEL_26;
  }
  else
  {
    if (v60)
    {
LABEL_26:
      v14 = (*((unsigned __int8 *)v60 + 16) >> 2) & 1;
      goto LABEL_27;
    }
    v14 = 1;
  }
LABEL_27:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v62, (uint64_t)v61, (uint64_t)v60, &v63);
  if (!v63)
  {
LABEL_127:
    __break(0xC471u);
    return result;
  }
  v17 = v60;
  v60 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v61;
  v61 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v62;
  v62 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = qword_1ECE7C4A0;
  v21 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v58 ? (char *)v58 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v58;
    v58 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v30 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v31 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v57);
              v65 = 0;
              WTF::String::String((WTF::String *)&v66, "flushing incomplete data for cues: start = ");
              v67 = 1;
              WTF::MediaTime::toJSONString((WTF::MediaTime *)v2);
              v58 = 0;
              v59 = 0;
              v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v59) = 3;
              v58 = v32;
              v33 = HIDWORD(v59);
              *((_DWORD *)v32 + 4 * HIDWORD(v59)) = buf;
              v34 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v32 + 2 * v33 + 1) = v34;
              *((_DWORD *)v32 + 4 * (v33 + 1)) = v65;
              v35 = v66;
              if (v66)
                *(_DWORD *)v66 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
              *((_DWORD *)v32 + 4 * (v33 + 2)) = v67;
              v36 = v68;
              if (v68)
                *(_DWORD *)v68 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
              HIDWORD(v59) = v33 + 3;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, &WebCore::LogMedia, 3, &v58);
              v37 = v58;
              if (HIDWORD(v59))
              {
                v38 = 16 * HIDWORD(v59);
                v39 = (WTF::StringImpl **)((char *)v58 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v37 = v58;
              }
              if (v37)
              {
                v58 = 0;
                LODWORD(v59) = 0;
                WTF::fastFree(v37, v22);
              }
              v41 = v68;
              v68 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v66;
              v66 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v30);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v3 = v63;
  v63 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      v3 = (WTF::StringImpl *)WTF::StringImpl::destroy(v3, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)v3 -= 2;
  }
LABEL_92:
  v45 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v45))
  {
    goto LABEL_96;
  }
  v3 = (WTF::StringImpl *)MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_96:
  v47 = *((_DWORD *)this + 7);
  v48 = __ldxr(v45);
  if (v48 == 1)
  {
    if (!__stlxr(0, v45))
    {
      if (!v47)
        goto LABEL_107;
LABEL_102:
      v49 = *((unsigned int *)this + 25);
      if ((_DWORD)v49)
      {
        v50 = *((_QWORD *)this + 11);
        v51 = 24 * v49;
        do
        {
          v52 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v52 = off_1E3411380;
          v52[1] = v50;
          *(_QWORD *)&buf = v52;
          WebCore::TrackPrivateBase::notifyMainThreadClient((uint64_t)this, (uint64_t *)&buf);
          v3 = (WTF::StringImpl *)buf;
          *(_QWORD *)&buf = 0;
          if (v3)
            v3 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v3 + 8))(v3);
          v50 += 24;
          v51 -= 24;
        }
        while (v51);
      }
      goto LABEL_107;
    }
  }
  else
  {
    __clrex();
  }
  v3 = (WTF::StringImpl *)WTF::Lock::unlockSlow((WebCore::InbandMetadataTextTrackPrivateAVF *)((char *)this + 12));
  if (v47)
    goto LABEL_102;
LABEL_107:
  v53 = *((unsigned int *)this + 25);
  if ((_DWORD)v53)
  {
    v54 = (WTF::StringImpl **)*((_QWORD *)this + 11);
    v55 = 24 * v53;
    do
    {
      v3 = *v54;
      *v54 = 0;
      if (v3)
      {
        if (*((_DWORD *)v3 + 2) == 1)
          v3 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v3 + 8))(v3);
        else
          --*((_DWORD *)v3 + 2);
      }
      v54 += 3;
      v55 -= 24;
    }
    while (v55);
  }
  *((_DWORD *)this + 25) = 0;
  result = WTF::MediaTime::zeroTime(v3);
  v56 = *(_QWORD *)(result + 5);
  *(_QWORD *)v2 = *(_QWORD *)result;
  *(_QWORD *)(v2 + 5) = v56;
  return result;
}

void WebCore::InbandTextTrackPrivateAVF::~InbandTextTrackPrivateAVF(WebCore::InbandTextTrackPrivateAVF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  WTF *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *(_QWORD *)this = off_1E34103C0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 33) = 0;
  v3 = *((unsigned int *)this + 29);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 13);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          WebCore::GenericCueData::~GenericCueData((WebCore::GenericCueData *)(v6 + 8), a2);
          WTF::fastFree((WTF *)v6, v7);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v8 = (WTF *)*((_QWORD *)this + 13);
  if (v8)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = (WTF *)*((_QWORD *)this + 7);
  if (v9)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v9, a2);
  }
  *(_QWORD *)this = &unk_1E340FFE8;
  v10 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

unint64_t WebCore::makeSimpleColorFromARGBCFArray(WebCore *this, const __CFArray *a2)
{
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v4;
  CFTypeID v5;
  float v6;
  const __CFNumber *v7;
  const __CFNumber *v8;
  CFTypeID v9;
  float v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  CFTypeID v13;
  float v14;
  const __CFNumber *v15;
  const __CFNumber *v16;
  CFTypeID v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  float valuePtr;

  if (CFArrayGetCount(this) < 4)
    goto LABEL_19;
  ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(this, 0);
  if (!ValueAtIndex)
    goto LABEL_19;
  v4 = ValueAtIndex;
  v5 = CFGetTypeID(ValueAtIndex);
  if (v5 != CFNumberGetTypeID())
    goto LABEL_19;
  valuePtr = 0.0;
  CFNumberGetValue(v4, kCFNumberFloatType, &valuePtr);
  v6 = valuePtr;
  v7 = (const __CFNumber *)CFArrayGetValueAtIndex(this, 1);
  if (!v7)
    goto LABEL_19;
  v8 = v7;
  v9 = CFGetTypeID(v7);
  if (v9 != CFNumberGetTypeID())
    goto LABEL_19;
  valuePtr = 0.0;
  CFNumberGetValue(v8, kCFNumberFloatType, &valuePtr);
  v10 = valuePtr;
  v11 = (const __CFNumber *)CFArrayGetValueAtIndex(this, 2);
  if (!v11)
    goto LABEL_19;
  v12 = v11;
  v13 = CFGetTypeID(v11);
  if (v13 != CFNumberGetTypeID())
    goto LABEL_19;
  valuePtr = 0.0;
  CFNumberGetValue(v12, kCFNumberFloatType, &valuePtr);
  v14 = valuePtr;
  v15 = (const __CFNumber *)CFArrayGetValueAtIndex(this, 3);
  if (v15 && (v16 = v15, v17 = CFGetTypeID(v15), v17 == CFNumberGetTypeID()))
  {
    valuePtr = 0.0;
    CFNumberGetValue(v16, kCFNumberFloatType, &valuePtr);
    v18 = llroundf(v10 * 255.0);
    v19 = 255;
    if (v18 >= 255)
      v18 = 255;
    v20 = v18 & ~(v18 >> 63);
    v21 = llroundf(v14 * 255.0);
    if (v21 >= 255)
      v21 = 255;
    v22 = v21 & ~(v21 >> 63);
    v23 = llroundf(valuePtr * 255.0);
    if (v23 >= 255)
      v23 = 255;
    v24 = v23 & ~(v23 >> 63);
    v25 = llroundf(v6 * 255.0);
    if (v25 < 255)
      v19 = v25;
    v26 = (v24 << 16) | ((v19 & ~(v19 >> 63)) << 24) | (v22 << 8);
    v27 = 1;
  }
  else
  {
LABEL_19:
    v27 = 0;
    v20 = 0;
    v26 = 0;
  }
  return v26 | v20 | (unint64_t)(v27 << 32);
}

unsigned __int8 *WebCore::InbandTextTrackPrivateAVF::processCue(unsigned __int8 *this, CFArrayRef theArray, const __CFArray *a3, const WTF::MediaTime *a4)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  char v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  NSObject *v29;
  uint64_t v30;
  void *v31;
  char *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::Logger *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::Logger *v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  unsigned int v59;
  WTF::String *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  NSObject *v76;
  uint64_t v77;
  void *v78;
  char *v79;
  int v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  NSObject *v90;
  uint64_t v91;
  char *v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  WTF::StringImpl **v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  int v118;
  WTF::StringImpl *v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  uint64_t v134;
  WTF::StringImpl **v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  int v142;
  WTF::StringImpl *v143;
  unsigned int v144;
  BOOL v145;
  uint64_t Extensions;
  const __CFDictionary *v147;
  const __CFDictionary *Value;
  const __CFData *v149;
  const __CFData *v150;
  unsigned int Length;
  size_t v152;
  unsigned int v153;
  const UInt8 *BytePtr;
  uint64_t v155;
  uint64_t v156;
  UInt8 *v157;
  size_t v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  _QWORD *v161;
  WTF::StringImpl *v162;
  uint64_t v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  unint64_t v168;
  unint64_t v169;
  BOOL v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  WTF *v175;
  WTF *v176;
  _QWORD *v177;
  uint64_t v178;
  void *v179;
  WTF *v180;
  WTF *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  void *v185;
  WTF *v186;
  WTF *v187;
  unsigned int v188;
  const UInt8 *__src;
  unsigned int __n;
  size_t __na;
  uint64_t v193;
  uint64_t v194;
  WTF::Logger *v196;
  WTF::String *v197;
  char v198;
  uint64_t v199;
  PAL *v200;
  WTF::StringImpl *v201[2];
  _QWORD *v202;
  WTF::StringImpl *v203;
  uint64_t v204;
  const char *v205;
  uint64_t v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  uint64_t v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  __int128 buf;
  const char *v221;
  WTF::StringImpl *v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;

  v5 = (uint64_t)this;
  v229 = *MEMORY[0x1E0C80C00];
  v6 = this + 12;
  if (__ldaxr(this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this + 12);
LABEL_5:
  v8 = *(_DWORD *)(v5 + 28);
  v9 = __ldxr(v6);
  if (v9 == 1)
  {
    if (!__stlxr(0, v6))
    {
      if (!v8)
        return this;
      goto LABEL_11;
    }
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  if (!v8)
    return this;
LABEL_11:
  this = (unsigned __int8 *)WebCore::InbandTextTrackPrivateAVF::processAttributedStrings(v5, theArray, a4);
  if (!a3)
    return this;
  this = (unsigned __int8 *)CFArrayGetCount(a3);
  v193 = (uint64_t)this;
  if (!this)
    return this;
  v10 = *(_QWORD *)(v5 + 32);
  v11 = *(_QWORD *)(v5 + 40);
  v203 = (WTF::StringImpl *)"InbandTextTrackPrivateAVF";
  v204 = 26;
  v205 = "processNativeSamples";
  v206 = v11;
  v12 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  if (*(_BYTE *)(v10 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v203);
    WTF::String::number((WTF::String *)v193);
    WTF::String::String((WTF::String *)&v218, " sample buffers at time ");
    WTF::MediaTime::toJSONString(a4);
    if (v201[0])
      v13 = *((_DWORD *)v201[0] + 1);
    else
      v13 = 0;
    if (v219)
    {
      v14 = *((_DWORD *)v219 + 1);
      if (v218)
        goto LABEL_18;
    }
    else
    {
      v14 = 0;
      if (v218)
      {
LABEL_18:
        v15 = *((_DWORD *)v218 + 1);
        if (v217)
        {
LABEL_19:
          v16 = *((_DWORD *)v217 + 1);
LABEL_20:
          if ((v16 | v15) < 0
            || ((v17 = __OFADD__(v15, v16), v18 = v15 + v16, !v17) ? (v19 = 0) : (v19 = 1),
                v14 < 0
             || (v19 & 1) != 0
             || ((v17 = __OFADD__(v14, v18), v20 = v14 + v18, !v17) ? (v21 = 0) : (v21 = 1),
                 v13 < 0 || (v21 & 1) != 0 || (v22 = (v13 + v20), __OFADD__(v13, v20)))))
          {
            v209 = 0;
            goto LABEL_432;
          }
          if (v201[0] && (*((_BYTE *)v201[0] + 16) & 4) == 0 || v219 && (*((_BYTE *)v219 + 16) & 4) == 0)
          {
            v23 = 0;
            goto LABEL_37;
          }
          if (v218)
          {
            v188 = *((_DWORD *)v218 + 4);
            v23 = (v188 >> 2) & 1;
            if (v217 && (v188 & 4) != 0)
              goto LABEL_414;
          }
          else
          {
            if (v217)
            {
LABEL_414:
              v23 = (*((unsigned __int8 *)v217 + 16) >> 2) & 1;
              goto LABEL_37;
            }
            v23 = 1;
          }
LABEL_37:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v22, v23, (uint64_t)v201[0], v219, (uint64_t)v218, (uint64_t)v217, &v209);
          if (v209)
          {
            v25 = v217;
            v217 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v24);
              else
                *(_DWORD *)v25 -= 2;
            }
            v26 = v218;
            v218 = 0;
            if (v26)
            {
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v24);
              else
                *(_DWORD *)v26 -= 2;
            }
            v27 = v219;
            v219 = 0;
            if (v27)
            {
              if (*(_DWORD *)v27 == 2)
                WTF::StringImpl::destroy(v27, v24);
              else
                *(_DWORD *)v27 -= 2;
            }
            v28 = v201[0];
            v201[0] = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, v24);
              else
                *(_DWORD *)v28 -= 2;
            }
            v29 = qword_1ECE7C4A0;
            v30 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v30)
            {
              WTF::String::utf8();
              v32 = v196 ? (char *)v196 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v32;
              _os_log_impl(&dword_1940B8000, v29, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v30 = (uint64_t)v196;
              v196 = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 1)
                  v30 = WTF::fastFree((WTF *)v30, v31);
                else
                  --*(_DWORD *)v30;
              }
            }
            if (WebCore::LogMedia)
            {
              while (1)
              {
                v33 = *v12;
                if ((v33 & 1) != 0)
                  break;
                v34 = __ldaxr(v12);
                if (v34 == v33)
                {
                  if (!__stxr(v33 | 1, v12))
                  {
                    v35 = WTF::Logger::observers((WTF::Logger *)v30);
                    v36 = *(unsigned int *)(v35 + 12);
                    if ((_DWORD)v36)
                    {
                      v37 = *(uint64_t **)v35;
                      v38 = *(_QWORD *)v35 + 8 * v36;
                      do
                      {
                        v39 = *v37;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v203);
                        LODWORD(v221) = 0;
                        WTF::String::number((WTF::String *)v193);
                        LODWORD(v223) = 0;
                        WTF::String::String((WTF::String *)&v224, " sample buffers at time ");
                        DWORD2(v224) = 1;
                        WTF::MediaTime::toJSONString(a4);
                        v196 = 0;
                        v197 = 0;
                        v40 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                        LODWORD(v197) = 4;
                        v196 = v40;
                        v41 = HIDWORD(v197);
                        *((_DWORD *)v40 + 4 * HIDWORD(v197)) = buf;
                        v42 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v40 + 2 * v41 + 1) = v42;
                        *((_DWORD *)v40 + 4 * (v41 + 1)) = (_DWORD)v221;
                        v43 = v222;
                        if (v222)
                          *(_DWORD *)v222 += 2;
                        *((_QWORD *)v40 + 2 * (v41 + 1) + 1) = v43;
                        *((_DWORD *)v40 + 4 * (v41 + 2)) = v223;
                        v44 = v224;
                        if ((_QWORD)v224)
                          *(_DWORD *)v224 += 2;
                        *((_QWORD *)v40 + 2 * (v41 + 2) + 1) = v44;
                        *((_DWORD *)v40 + 4 * (v41 + 3)) = DWORD2(v224);
                        v45 = v225;
                        if ((_QWORD)v225)
                          *(_DWORD *)v225 += 2;
                        *((_QWORD *)v40 + 2 * (v41 + 3) + 1) = v45;
                        HIDWORD(v197) = v41 + 4;
                        (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v39 + 16))(v39, &WebCore::LogMedia, 0, &v196);
                        v46 = v196;
                        if (HIDWORD(v197))
                        {
                          v47 = 16 * HIDWORD(v197);
                          v48 = (WTF::StringImpl **)((char *)v196 + 8);
                          do
                          {
                            v49 = *v48;
                            *v48 = 0;
                            if (v49)
                            {
                              if (*(_DWORD *)v49 == 2)
                                WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v31);
                              else
                                *(_DWORD *)v49 -= 2;
                            }
                            v48 += 2;
                            v47 -= 16;
                          }
                          while (v47);
                          v46 = v196;
                        }
                        if (v46)
                        {
                          v196 = 0;
                          LODWORD(v197) = 0;
                          WTF::fastFree(v46, v31);
                        }
                        v50 = (WTF::StringImpl *)v225;
                        *(_QWORD *)&v225 = 0;
                        if (v50)
                        {
                          if (*(_DWORD *)v50 == 2)
                            WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v31);
                          else
                            *(_DWORD *)v50 -= 2;
                        }
                        v51 = (WTF::StringImpl *)v224;
                        *(_QWORD *)&v224 = 0;
                        if (v51)
                        {
                          if (*(_DWORD *)v51 == 2)
                            WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v31);
                          else
                            *(_DWORD *)v51 -= 2;
                        }
                        v52 = v222;
                        v222 = 0;
                        if (v52)
                        {
                          if (*(_DWORD *)v52 == 2)
                            WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v31);
                          else
                            *(_DWORD *)v52 -= 2;
                        }
                        v53 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v53)
                        {
                          if (*(_DWORD *)v53 == 2)
                            WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v31);
                          else
                            *(_DWORD *)v53 -= 2;
                        }
                        ++v37;
                      }
                      while (v37 != (uint64_t *)v38);
                    }
                    v54 = __ldxr(v12);
                    if (v54 == 1)
                    {
                      if (!__stlxr(0, v12))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            this = (unsigned __int8 *)v209;
            v209 = 0;
            if (this)
            {
              if (*(_DWORD *)this == 2)
                this = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v31);
              else
                *(_DWORD *)this -= 2;
            }
            goto LABEL_109;
          }
LABEL_432:
          __break(0xC471u);
LABEL_433:
          JUMPOUT(0x1961E2954);
        }
LABEL_424:
        v16 = 0;
        goto LABEL_20;
      }
    }
    v15 = 0;
    if (v217)
      goto LABEL_19;
    goto LABEL_424;
  }
LABEL_109:
  if (v193 >= 1)
  {
    v55 = 0;
    while (1)
    {
      v202 = 0;
      v200 = 0;
      v201[0] = 0;
      LODWORD(v201[1]) = 10000000;
      BYTE4(v201[1]) = 1;
      v194 = v55;
      this = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, const __CFArray *))(*(_QWORD *)v5 + 232))(v5, a3);
      if ((_DWORD)this)
        break;
LABEL_396:
      v183 = v202;
      v202 = 0;
      if (v183)
      {
        v145 = *(_DWORD *)v183 == 2;
        *(_DWORD *)v183 -= 2;
        if (v145)
        {
          v184 = v183[10];
          if (v184)
          {
            *(_QWORD *)(v184 + 8) = 3;
            v183[10] = 0;
          }
          if ((v183[9] & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v183 + 9));
          JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v183 + 2));
          v186 = (WTF *)v183[1];
          if ((v186 & 1) == 0 && v186)
          {
            v187 = *(WTF **)v186;
            if (*(_QWORD *)v186)
            {
              *(_QWORD *)v186 = 0;
              *((_DWORD *)v186 + 2) = 0;
              WTF::fastFree(v187, v185);
            }
            WTF::fastFree(v186, v185);
          }
          this = (unsigned __int8 *)WTF::fastFree((WTF *)v183, v185);
        }
      }
      v55 = v194 + 1;
      if (v194 + 1 == v193)
        return this;
    }
    while (1)
    {
      JSC::ArrayBuffer::create();
      v56 = (_QWORD *)buf;
      *(_QWORD *)&buf = 0;
      v57 = v202;
      v202 = v56;
      if (v57)
      {
        v145 = *(_DWORD *)v57 == 2;
        *(_DWORD *)v57 -= 2;
        if (v145)
        {
          v173 = v57[10];
          if (v173)
          {
            *(_QWORD *)(v173 + 8) = 3;
            v57[10] = 0;
          }
          if ((v57[9] & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v57 + 9));
          JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v57 + 2));
          v175 = (WTF *)v57[1];
          if ((v175 & 1) == 0 && v175)
          {
            v176 = *(WTF **)v175;
            if (*(_QWORD *)v175)
            {
              *(_QWORD *)v175 = 0;
              *((_DWORD *)v175 + 2) = 0;
              WTF::fastFree(v176, v174);
            }
            WTF::fastFree(v175, v174);
          }
          WTF::fastFree((WTF *)v57, v174);
          v177 = (_QWORD *)buf;
          *(_QWORD *)&buf = 0;
          if (v177)
          {
            v145 = *(_DWORD *)v177 == 2;
            *(_DWORD *)v177 -= 2;
            if (v145)
            {
              v178 = v177[10];
              if (v178)
              {
                *(_QWORD *)(v178 + 8) = 3;
                v177[10] = 0;
              }
              if ((v177[9] & 1) == 0)
                JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v177 + 9));
              JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v177 + 2));
              v180 = (WTF *)v177[1];
              if ((v180 & 1) == 0 && v180)
              {
                v181 = *(WTF **)v180;
                if (*(_QWORD *)v180)
                {
                  *(_QWORD *)v180 = 0;
                  *((_DWORD *)v180 + 2) = 0;
                  WTF::fastFree(v181, v179);
                }
                WTF::fastFree(v180, v179);
              }
              WTF::fastFree((WTF *)v177, v179);
            }
          }
        }
      }
      JSC::DataView::create();
      WebCore::ISOBox::peekBox(v199, 0, (uint64_t)&v196);
      if (!v198)
        goto LABEL_248;
      v59 = v196;
      v60 = v197;
      v61 = *(_QWORD *)(v199 + 32);
      if (!v61)
        goto LABEL_366;
      v62 = *(_QWORD *)(v61 + 16);
      if (!v62)
        goto LABEL_366;
      v63 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v63 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v62 & 0x3FFFFFFFFLL) + v63))
        goto LABEL_366;
      v64 = *(_BYTE *)(v199 + 6);
      if ((v64 & 3) != 0)
        break;
      v65 = *(_QWORD *)(v199 + 16);
LABEL_122:
      v66 = *(_QWORD *)(v5 + 32);
      if ((unint64_t)v197 <= v65)
      {
        v82 = *(_QWORD *)(v5 + 40);
        v203 = (WTF::StringImpl *)"InbandTextTrackPrivateAVF";
        v204 = 26;
        v205 = "processNativeSamples";
        v206 = v82;
        if (*(_BYTE *)(v66 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        {
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v203);
          WTF::String::String((WTF::String *)&v214, "chunk  type = '");
          v83 = bswap32(v59);
          BYTE4(buf) = 0;
          LODWORD(buf) = v83;
          WTF::String::String((WTF::String *)&v213, (const char *)&buf);
          WTF::String::String((WTF::String *)&v212, "', size = ");
          WTF::String::number(v60);
          v209 = v214;
          v219 = v213;
          *(_QWORD *)&buf = v215;
          v217 = v211;
          v218 = v212;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v209, (uint64_t *)&v219, (uint64_t *)&v218, (uint64_t *)&v217, &v216);
          if (!v216)
          {
            __break(0xC471u);
            JUMPOUT(0x1961E2968);
          }
          v85 = v211;
          v211 = 0;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2)
              WTF::StringImpl::destroy(v85, v84);
            else
              *(_DWORD *)v85 -= 2;
          }
          v86 = v212;
          v212 = 0;
          if (v86)
          {
            if (*(_DWORD *)v86 == 2)
              WTF::StringImpl::destroy(v86, v84);
            else
              *(_DWORD *)v86 -= 2;
          }
          v87 = v213;
          v213 = 0;
          if (v87)
          {
            if (*(_DWORD *)v87 == 2)
              WTF::StringImpl::destroy(v87, v84);
            else
              *(_DWORD *)v87 -= 2;
          }
          v88 = v214;
          v214 = 0;
          if (v88)
          {
            if (*(_DWORD *)v88 == 2)
              WTF::StringImpl::destroy(v88, v84);
            else
              *(_DWORD *)v88 -= 2;
          }
          v89 = v215;
          v215 = 0;
          if (v89)
          {
            if (*(_DWORD *)v89 == 2)
              WTF::StringImpl::destroy(v89, v84);
            else
              *(_DWORD *)v89 -= 2;
          }
          v90 = qword_1ECE7C4A0;
          v91 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v91)
          {
            WTF::String::utf8();
            v92 = v209 ? (char *)v209 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v92;
            _os_log_impl(&dword_1940B8000, v90, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v91 = (uint64_t)v209;
            v209 = 0;
            if (v91)
            {
              if (*(_DWORD *)v91 == 1)
                v91 = WTF::fastFree((WTF *)v91, v58);
              else
                --*(_DWORD *)v91;
            }
          }
          if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
          {
            while (1)
            {
              v93 = *v12;
              if ((v93 & 1) != 0)
                break;
              v94 = __ldaxr(v12);
              if (v94 == v93)
              {
                if (!__stxr(v93 | 1, v12))
                {
                  __n = v59;
                  v121 = WTF::Logger::observers((WTF::Logger *)v91);
                  v122 = *(unsigned int *)(v121 + 12);
                  if ((_DWORD)v122)
                  {
                    v123 = *(uint64_t **)v121;
                    v124 = *(_QWORD *)v121 + 8 * v122;
                    do
                    {
                      v125 = *v123;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v203);
                      LODWORD(v221) = 0;
                      WTF::String::String((WTF::String *)&v222, "chunk  type = '");
                      LODWORD(v223) = 0;
                      BYTE4(v209) = 0;
                      LODWORD(v209) = v83;
                      WTF::String::String((WTF::String *)&v224, (const char *)&v209);
                      DWORD2(v224) = 0;
                      WTF::String::String((WTF::String *)&v225, "', size = ");
                      DWORD2(v225) = 0;
                      WTF::String::number(v60);
                      v209 = 0;
                      v210 = 0;
                      v126 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x50);
                      LODWORD(v210) = 5;
                      v209 = v126;
                      v127 = HIDWORD(v210);
                      *((_DWORD *)v126 + 4 * HIDWORD(v210)) = buf;
                      v128 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v126 + 2 * v127 + 1) = v128;
                      *((_DWORD *)v126 + 4 * (v127 + 1)) = (_DWORD)v221;
                      v129 = v222;
                      if (v222)
                        *(_DWORD *)v222 += 2;
                      *((_QWORD *)v126 + 2 * (v127 + 1) + 1) = v129;
                      *((_DWORD *)v126 + 4 * (v127 + 2)) = v223;
                      v130 = v224;
                      if ((_QWORD)v224)
                        *(_DWORD *)v224 += 2;
                      *((_QWORD *)v126 + 2 * (v127 + 2) + 1) = v130;
                      *((_DWORD *)v126 + 4 * (v127 + 3)) = DWORD2(v224);
                      v131 = v225;
                      if ((_QWORD)v225)
                        *(_DWORD *)v225 += 2;
                      *((_QWORD *)v126 + 2 * (v127 + 3) + 1) = v131;
                      *((_DWORD *)v126 + 4 * (v127 + 4)) = DWORD2(v225);
                      v132 = v226;
                      if ((_QWORD)v226)
                        *(_DWORD *)v226 += 2;
                      *((_QWORD *)v126 + 2 * (v127 + 4) + 1) = v132;
                      HIDWORD(v210) = v127 + 5;
                      (*(void (**)(uint64_t, char *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v125 + 16))(v125, &WebCore::LogMedia, 3, &v209);
                      v133 = v209;
                      if (HIDWORD(v210))
                      {
                        v134 = 16 * HIDWORD(v210);
                        v135 = (WTF::StringImpl **)((char *)v209 + 8);
                        do
                        {
                          v136 = *v135;
                          *v135 = 0;
                          if (v136)
                          {
                            if (*(_DWORD *)v136 == 2)
                              WTF::StringImpl::destroy(v136, (WTF::StringImpl *)v58);
                            else
                              *(_DWORD *)v136 -= 2;
                          }
                          v135 += 2;
                          v134 -= 16;
                        }
                        while (v134);
                        v133 = v209;
                      }
                      if (v133)
                      {
                        v209 = 0;
                        LODWORD(v210) = 0;
                        WTF::fastFree(v133, v58);
                      }
                      v137 = (WTF::StringImpl *)v226;
                      *(_QWORD *)&v226 = 0;
                      if (v137)
                      {
                        if (*(_DWORD *)v137 == 2)
                          WTF::StringImpl::destroy(v137, (WTF::StringImpl *)v58);
                        else
                          *(_DWORD *)v137 -= 2;
                      }
                      v138 = (WTF::StringImpl *)v225;
                      *(_QWORD *)&v225 = 0;
                      if (v138)
                      {
                        if (*(_DWORD *)v138 == 2)
                          WTF::StringImpl::destroy(v138, (WTF::StringImpl *)v58);
                        else
                          *(_DWORD *)v138 -= 2;
                      }
                      v139 = (WTF::StringImpl *)v224;
                      *(_QWORD *)&v224 = 0;
                      if (v139)
                      {
                        if (*(_DWORD *)v139 == 2)
                          WTF::StringImpl::destroy(v139, (WTF::StringImpl *)v58);
                        else
                          *(_DWORD *)v139 -= 2;
                      }
                      v140 = v222;
                      v222 = 0;
                      if (v140)
                      {
                        if (*(_DWORD *)v140 == 2)
                          WTF::StringImpl::destroy(v140, (WTF::StringImpl *)v58);
                        else
                          *(_DWORD *)v140 -= 2;
                      }
                      v141 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v141)
                      {
                        if (*(_DWORD *)v141 == 2)
                          WTF::StringImpl::destroy(v141, (WTF::StringImpl *)v58);
                        else
                          *(_DWORD *)v141 -= 2;
                      }
                      ++v123;
                    }
                    while (v123 != (uint64_t *)v124);
                  }
                  v142 = __ldxr(v12);
                  if (v142 == 1)
                  {
                    v59 = __n;
                    if (!__stlxr(0, v12))
                      break;
                  }
                  else
                  {
                    __clrex();
                    v59 = __n;
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v12);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v143 = v216;
          v216 = 0;
          if (v143)
          {
            if (*(_DWORD *)v143 == 2)
              WTF::StringImpl::destroy(v143, (WTF::StringImpl *)v58);
            else
              *(_DWORD *)v143 -= 2;
          }
        }
        v144 = v59;
        if (*(_BYTE *)(v5 + 138))
          v145 = 1;
        else
          v145 = v200 == 0;
        if (!v145)
        {
          Extensions = PAL::softLinkCoreMediaCMFormatDescriptionGetExtensions(v200, (const opaqueCMFormatDescription *)v58);
          if (Extensions)
          {
            v147 = (const __CFDictionary *)Extensions;
            if (PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::once != -1)
              dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::once, &__block_literal_global_18_1);
            Value = (const __CFDictionary *)CFDictionaryGetValue(v147, (const void *)PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::constantCoreMediakCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms);
            if (Value)
            {
              v149 = (const __CFData *)CFDictionaryGetValue(Value, CFSTR("vttC"));
              if (v149)
              {
                v150 = v149;
                Length = CFDataGetLength(v149);
                v152 = Length;
                if (Length)
                {
                  v153 = Length;
                  BytePtr = CFDataGetBytePtr(v150);
                  __na = v152;
                  if (v152 >> 31)
                  {
                    __break(0xC471u);
                    goto LABEL_433;
                  }
                  __src = BytePtr;
                  v155 = v153 + 2;
                  if (__OFADD__(v153, 2)
                    || (v155 & 0x80000000) != 0
                    || (WTF::tryFastCompactMalloc((WTF *)(v155 + 20)), (v156 = buf) == 0))
                  {
                    v203 = 0;
                    __break(0xC471u);
                    JUMPOUT(0x1961E2974);
                  }
                  v157 = (UInt8 *)(buf + 20);
                  *(_DWORD *)buf = 2;
                  *(_DWORD *)(v156 + 4) = v155;
                  *(_QWORD *)(v156 + 8) = v156 + 20;
                  *(_DWORD *)(v156 + 16) = 4;
                  if (v153 == 1)
                  {
                    *v157 = *__src;
                    v158 = __na;
                  }
                  else
                  {
                    v158 = __na;
                    memcpy((void *)(v156 + 20), __src, __na);
                  }
                  *(_WORD *)&v157[v158] = 2570;
                  v203 = (WTF::StringImpl *)v156;
                  v159 = *(_QWORD *)(v5 + 32);
                  v160 = *(WTF::StringImpl **)(v5 + 40);
                  *(_QWORD *)&buf = "InbandTextTrackPrivateAVF";
                  *((_QWORD *)&buf + 1) = 26;
                  v221 = "processNativeSamples";
                  v222 = v160;
                  if (*(_BYTE *)(v159 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
                    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::String>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&buf, "VTT header ", (uint64_t *)&v203);
                  v161 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                  *v161 = off_1E3411420;
                  v161[1] = &v203;
                  *(_QWORD *)&buf = v161;
                  WebCore::TrackPrivateBase::notifyMainThreadClient(v5, (uint64_t *)&buf);
                  v163 = buf;
                  *(_QWORD *)&buf = 0;
                  if (v163)
                    (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
                  *(_BYTE *)(v5 + 138) = 1;
                  v164 = v203;
                  v203 = 0;
                  if (v164)
                  {
                    if (*(_DWORD *)v164 == 2)
                      WTF::StringImpl::destroy(v164, v162);
                    else
                      *(_DWORD *)v164 -= 2;
                  }
                }
              }
            }
          }
        }
        if (v144 == 1987343459)
        {
          LODWORD(v221) = 0;
          v222 = 0;
          v223 = 0;
          *(_QWORD *)&buf = off_1E3416CC8;
          *((_QWORD *)&buf + 1) = 0;
          v224 = *(_OWORD *)a4;
          v225 = *(_OWORD *)v201;
          v226 = 0u;
          v227 = 0u;
          v228 = 0;
          LODWORD(v203) = 0;
          WebCore::ISOWebVTTCue::parse(&buf, v199, (unsigned int *)&v203);
          v165 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v165 = off_1E3411448;
          *((_QWORD *)v165 + 1) = &buf;
          v203 = v165;
          WebCore::TrackPrivateBase::notifyMainThreadClient(v5, (uint64_t *)&v203);
          v167 = v203;
          v203 = 0;
          if (v167)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v167 + 8))(v167);
          WebCore::ISOWebVTTCue::~ISOWebVTTCue((WebCore::ISOWebVTTCue *)&buf, v166);
        }
        memmove(*(void **)(v5 + 56), (char *)v60 + *(_QWORD *)(v5 + 56), *(unsigned int *)(v5 + 68) - (_QWORD)v60);
        *(_DWORD *)(v5 + 68) -= (_DWORD)v60;
        v120 = 1;
        goto LABEL_331;
      }
      v67 = *(_QWORD *)(v5 + 40);
      v203 = (WTF::StringImpl *)"InbandTextTrackPrivateAVF";
      v204 = 26;
      v205 = "processNativeSamples";
      v206 = v67;
      if (*(_BYTE *)(v66 + 12))
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v203);
        WTF::String::String((WTF::String *)&v213, "chunk  type = '");
        v68 = bswap32(v59);
        BYTE4(buf) = 0;
        LODWORD(buf) = v68;
        WTF::String::String((WTF::String *)&v212, (const char *)&buf);
        WTF::String::String((WTF::String *)&v211, "', size = ");
        WTF::String::number(v60);
        WTF::String::String((WTF::String *)&v207, " larger than buffer length!");
        v209 = v213;
        v219 = v212;
        *(_QWORD *)&buf = v214;
        v217 = v208;
        v218 = v211;
        v216 = v207;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v209, (uint64_t *)&v219, (uint64_t *)&v218, (uint64_t *)&v217, (uint64_t *)&v216, &v215);
        if (!v215)
        {
          __break(0xC471u);
          JUMPOUT(0x1961E2960);
        }
        v70 = v207;
        v207 = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2)
            WTF::StringImpl::destroy(v70, v69);
          else
            *(_DWORD *)v70 -= 2;
        }
        v71 = v208;
        v208 = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2)
            WTF::StringImpl::destroy(v71, v69);
          else
            *(_DWORD *)v71 -= 2;
        }
        v72 = v211;
        v211 = 0;
        if (v72)
        {
          if (*(_DWORD *)v72 == 2)
            WTF::StringImpl::destroy(v72, v69);
          else
            *(_DWORD *)v72 -= 2;
        }
        v73 = v212;
        v212 = 0;
        if (v73)
        {
          if (*(_DWORD *)v73 == 2)
            WTF::StringImpl::destroy(v73, v69);
          else
            *(_DWORD *)v73 -= 2;
        }
        v74 = v213;
        v213 = 0;
        if (v74)
        {
          if (*(_DWORD *)v74 == 2)
            WTF::StringImpl::destroy(v74, v69);
          else
            *(_DWORD *)v74 -= 2;
        }
        v75 = v214;
        v214 = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2)
            WTF::StringImpl::destroy(v75, v69);
          else
            *(_DWORD *)v75 -= 2;
        }
        v76 = qword_1ECE7C4A0;
        v77 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v77)
        {
          WTF::String::utf8();
          v79 = v209 ? (char *)v209 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v79;
          _os_log_impl(&dword_1940B8000, v76, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v77 = (uint64_t)v209;
          v209 = 0;
          if (v77)
          {
            if (*(_DWORD *)v77 == 1)
              v77 = WTF::fastFree((WTF *)v77, v78);
            else
              --*(_DWORD *)v77;
          }
        }
        if (WebCore::LogMedia && byte_1ECE7C490)
        {
          while (1)
          {
            v80 = *v12;
            if ((v80 & 1) != 0)
              break;
            v81 = __ldaxr(v12);
            if (v81 == v80)
            {
              if (!__stxr(v80 | 1, v12))
              {
                v95 = WTF::Logger::observers((WTF::Logger *)v77);
                v96 = *(unsigned int *)(v95 + 12);
                if ((_DWORD)v96)
                {
                  v97 = *(uint64_t **)v95;
                  v98 = *(_QWORD *)v95 + 8 * v96;
                  do
                  {
                    v99 = *v97;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v203);
                    LODWORD(v221) = 0;
                    WTF::String::String((WTF::String *)&v222, "chunk  type = '");
                    LODWORD(v223) = 0;
                    BYTE4(v209) = 0;
                    LODWORD(v209) = v68;
                    WTF::String::String((WTF::String *)&v224, (const char *)&v209);
                    DWORD2(v224) = 0;
                    WTF::String::String((WTF::String *)&v225, "', size = ");
                    DWORD2(v225) = 0;
                    WTF::String::number(v60);
                    DWORD2(v226) = 0;
                    WTF::String::String((WTF::String *)&v227, " larger than buffer length!");
                    v209 = 0;
                    v210 = 0;
                    v100 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x60);
                    LODWORD(v210) = 6;
                    v209 = v100;
                    v101 = HIDWORD(v210);
                    *((_DWORD *)v100 + 4 * HIDWORD(v210)) = buf;
                    v102 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v100 + 2 * v101 + 1) = v102;
                    *((_DWORD *)v100 + 4 * (v101 + 1)) = (_DWORD)v221;
                    v103 = v222;
                    if (v222)
                      *(_DWORD *)v222 += 2;
                    *((_QWORD *)v100 + 2 * (v101 + 1) + 1) = v103;
                    *((_DWORD *)v100 + 4 * (v101 + 2)) = v223;
                    v104 = v224;
                    if ((_QWORD)v224)
                      *(_DWORD *)v224 += 2;
                    *((_QWORD *)v100 + 2 * (v101 + 2) + 1) = v104;
                    *((_DWORD *)v100 + 4 * (v101 + 3)) = DWORD2(v224);
                    v105 = v225;
                    if ((_QWORD)v225)
                      *(_DWORD *)v225 += 2;
                    *((_QWORD *)v100 + 2 * (v101 + 3) + 1) = v105;
                    *((_DWORD *)v100 + 4 * (v101 + 4)) = DWORD2(v225);
                    v106 = v226;
                    if ((_QWORD)v226)
                      *(_DWORD *)v226 += 2;
                    *((_QWORD *)v100 + 2 * (v101 + 4) + 1) = v106;
                    *((_DWORD *)v100 + 4 * (v101 + 5)) = DWORD2(v226);
                    v107 = v227;
                    if ((_QWORD)v227)
                      *(_DWORD *)v227 += 2;
                    *((_QWORD *)v100 + 2 * (v101 + 5) + 1) = v107;
                    HIDWORD(v210) = v101 + 6;
                    (*(void (**)(uint64_t, char *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v99 + 16))(v99, &WebCore::LogMedia, 1, &v209);
                    v108 = v209;
                    if (HIDWORD(v210))
                    {
                      v109 = 16 * HIDWORD(v210);
                      v110 = (WTF::StringImpl **)((char *)v209 + 8);
                      do
                      {
                        v111 = *v110;
                        *v110 = 0;
                        if (v111)
                        {
                          if (*(_DWORD *)v111 == 2)
                            WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v78);
                          else
                            *(_DWORD *)v111 -= 2;
                        }
                        v110 += 2;
                        v109 -= 16;
                      }
                      while (v109);
                      v108 = v209;
                    }
                    if (v108)
                    {
                      v209 = 0;
                      LODWORD(v210) = 0;
                      WTF::fastFree(v108, v78);
                    }
                    v112 = (WTF::StringImpl *)v227;
                    *(_QWORD *)&v227 = 0;
                    if (v112)
                    {
                      if (*(_DWORD *)v112 == 2)
                        WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v78);
                      else
                        *(_DWORD *)v112 -= 2;
                    }
                    v113 = (WTF::StringImpl *)v226;
                    *(_QWORD *)&v226 = 0;
                    if (v113)
                    {
                      if (*(_DWORD *)v113 == 2)
                        WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v78);
                      else
                        *(_DWORD *)v113 -= 2;
                    }
                    v114 = (WTF::StringImpl *)v225;
                    *(_QWORD *)&v225 = 0;
                    if (v114)
                    {
                      if (*(_DWORD *)v114 == 2)
                        WTF::StringImpl::destroy(v114, (WTF::StringImpl *)v78);
                      else
                        *(_DWORD *)v114 -= 2;
                    }
                    v115 = (WTF::StringImpl *)v224;
                    *(_QWORD *)&v224 = 0;
                    if (v115)
                    {
                      if (*(_DWORD *)v115 == 2)
                        WTF::StringImpl::destroy(v115, (WTF::StringImpl *)v78);
                      else
                        *(_DWORD *)v115 -= 2;
                    }
                    v116 = v222;
                    v222 = 0;
                    if (v116)
                    {
                      if (*(_DWORD *)v116 == 2)
                        WTF::StringImpl::destroy(v116, (WTF::StringImpl *)v78);
                      else
                        *(_DWORD *)v116 -= 2;
                    }
                    v117 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v117)
                    {
                      if (*(_DWORD *)v117 == 2)
                        WTF::StringImpl::destroy(v117, (WTF::StringImpl *)v78);
                      else
                        *(_DWORD *)v117 -= 2;
                    }
                    ++v97;
                  }
                  while (v97 != (uint64_t *)v98);
                }
                v118 = __ldxr(v12);
                if (v118 == 1)
                {
                  if (!__stlxr(0, v12))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v12);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v119 = v215;
        v215 = 0;
        if (v119)
        {
          if (*(_DWORD *)v119 == 2)
            WTF::StringImpl::destroy(v119, (WTF::StringImpl *)v78);
          else
            *(_DWORD *)v119 -= 2;
        }
      }
LABEL_248:
      v120 = 0;
LABEL_331:
      this = (unsigned __int8 *)v199;
      v199 = 0;
      if (this)
      {
        if (*(_DWORD *)this != 1)
        {
          --*(_DWORD *)this;
          goto LABEL_334;
        }
        this = (unsigned __int8 *)JSC::ArrayBufferView::operator delete();
        if ((v120 & 1) == 0)
          goto LABEL_396;
      }
      else
      {
LABEL_334:
        if ((v120 & 1) == 0)
          goto LABEL_396;
      }
    }
    if (*(_BYTE *)(v61 + 64) && (v182 = *(_QWORD *)(v61 + 32)) != 0)
    {
      v168 = atomic_load((unint64_t *)(v182 + 32));
      v64 = *(_BYTE *)(v199 + 6);
    }
    else
    {
      v168 = *(_QWORD *)(v61 + 48);
    }
    v169 = *(_QWORD *)(v199 + 8);
    if ((v64 & 4) == 0)
    {
      v65 = *(_QWORD *)(v199 + 16);
      v170 = v65 + v169 <= v168 && v168 >= v169;
      if (v170)
        v65 = 0;
      goto LABEL_122;
    }
    v170 = v168 >= v169;
    v171 = v168 - v169;
    if (!v170)
    {
      if ((*(_BYTE *)(v199 + 4) - 4) > 7u)
        LOBYTE(v172) = 0;
      else
        v172 = qword_1969F7FC0[(char)(*(_BYTE *)(v199 + 4) - 4)];
      v65 = (-1 << v172) & v171;
      goto LABEL_122;
    }
LABEL_366:
    v65 = 0;
    goto LABEL_122;
  }
  return this;
}

uint64_t WebCore::InbandTextTrackPrivateAVF::processAttributedStrings(uint64_t this, CFArrayRef theArray, const WTF::MediaTime *a3)
{
  uint64_t v3;
  const __CFArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  CFIndex location;
  CFIndex v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const WTF::StringImpl *v26;
  uint64_t v27;
  WebCore::InbandGenericCue **v28;
  unsigned __int8 *v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::InbandGenericCue *v35;
  int v36;
  int v37;
  int v38;
  int v40;
  char v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unsigned int v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  NSObject *v53;
  CFIndex v54;
  CFIndex v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  CFIndex v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF *v68;
  uint64_t v69;
  WTF::StringImpl **v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  int v75;
  unsigned int v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  unsigned int v82;
  WebCore::InbandGenericCue *v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  WebCore::InbandGenericCue *v90;
  int v91;
  int v92;
  int v93;
  int v94;
  char v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  NSObject *v103;
  CFIndex v104;
  CFIndex v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  CFIndex v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF *v118;
  uint64_t v119;
  WTF::StringImpl **v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  int v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  int v137;
  char v138;
  uint64_t v139;
  int v140;
  unsigned int v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  NSObject *v146;
  uint64_t v147;
  char *v148;
  unsigned __int8 *v149;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  uint64_t v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  uint64_t v163;
  WTF::StringImpl **v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  CFIndex v174;
  uint64_t length_high;
  uint64_t v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF *v182;
  uint64_t v183;
  WTF::StringImpl **v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  int v192;
  unsigned __int8 *v193;
  int v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  WTF::StringImpl *v204;
  _QWORD *v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  WTF *v213;
  uint64_t v214;
  unsigned __int8 *v215;
  WebCore::InbandGenericCue *v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  void *v222;
  void *v223;
  void *v224;
  WebCore::InbandGenericCue **v225;
  uint64_t v226;
  uint64_t v227;
  WebCore::InbandGenericCue *v228;
  int v229;
  int v230;
  int v231;
  int v232;
  char v233;
  uint64_t v234;
  int v235;
  unsigned int v236;
  WTF::StringImpl *v237;
  WTF::StringImpl *v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240;
  NSObject *v241;
  CFIndex v242;
  void *v243;
  CFIndex v244;
  int v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  CFIndex v252;
  uint64_t v253;
  uint64_t v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v256;
  WTF *v257;
  uint64_t v258;
  WTF::StringImpl **v259;
  WTF::StringImpl *v260;
  WTF::StringImpl *v261;
  WTF::StringImpl *v262;
  WTF::StringImpl *v263;
  int v264;
  WTF::StringImpl *v265;
  _QWORD *v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  const __CFAttributedString *v276;
  uint64_t v277;
  CFStringRef String;
  WTF::StringImpl *v279;
  WTF::StringImpl *v280;
  int v281;
  const __CFDictionary *Attributes;
  const __CFDictionary *v283;
  unint64_t Count;
  unint64_t v285;
  const void **v286;
  const void **v287;
  uint64_t v288;
  uint64_t v289;
  const __CFString *v290;
  CFTypeID v291;
  const __CFString *v292;
  WebCore *v293;
  const __CFArray *v294;
  unint64_t SimpleColorFromARGBCFArray;
  void *v296;
  WTF::StringImpl *v297;
  uint64_t v298;
  uint64_t v299;
  CFTypeID v300;
  WTF::StringImpl *v301;
  char v302;
  int v303;
  uint64_t v304;
  int v305;
  WTF::StringImpl *v306;
  WTF::StringImpl *v307;
  int v308;
  uint64_t v309;
  int v310;
  int v311;
  uint64_t v312;
  int v313;
  CFTypeID v314;
  CFTypeID v315;
  CFTypeID v316;
  const __CFString *v317;
  const __CFString *v318;
  uint64_t v319;
  uint64_t v320;
  __int16 v321;
  WTF::StringImpl *v322;
  CFTypeID v323;
  CFTypeID v324;
  const __CFString *v325;
  const __CFString *v326;
  WTF::StringImpl *v327;
  WTF::StringImpl *v328;
  WTF::StringImpl *v329;
  WTF::StringImpl *v330;
  WebCore *v331;
  const __CFArray *v332;
  unint64_t v333;
  void *v334;
  WTF::StringImpl *v335;
  uint64_t v336;
  uint64_t v337;
  WebCore *v338;
  const __CFArray *v339;
  unint64_t v340;
  void *v341;
  WTF::StringImpl *v342;
  uint64_t v343;
  uint64_t v344;
  unsigned int *v345;
  unsigned int v346;
  unsigned int v347;
  unsigned int *v348;
  unsigned int v349;
  unsigned int v350;
  unsigned int *v351;
  unsigned int v352;
  unsigned int v353;
  uint64_t v354;
  unsigned int length;
  unint64_t v356;
  unint64_t v357;
  WTF::StringImpl *v358;
  WTF::StringImpl *v359;
  int v360;
  WTF::StringImpl *v361;
  WTF::StringImpl *v362;
  WTF::StringImpl *v363;
  double v364;
  double v365;
  unsigned int v366;
  double v367;
  WTF::StringImpl *v368;
  char v369;
  WTF::StringImpl *v370;
  WTF::StringImpl *v371;
  WTF::StringImpl *v372;
  uint64_t v373;
  uint64_t v374;
  WTF::StringImpl *v375;
  uint64_t v376;
  WTF *v377;
  uint64_t v378;
  void *v379;
  const __CFArray *v380;
  __int128 v381;
  uint64_t *v382;
  WebCore::InbandGenericCue **v384;
  CFArrayRef v385;
  const __CFAttributedString *v386;
  WebCore::InbandGenericCue **v387;
  uint64_t v388;
  CFIndex v389;
  uint64_t v390;
  char *v391;
  char *v392;
  char *v393;
  CFRange effectiveRange;
  _QWORD v395[2];
  WTF *v396;
  unint64_t v397;
  WTF::StringImpl *v398;
  WTF::StringImpl *v399;
  const char *v400;
  uint64_t v401;
  WTF::StringImpl *v402;
  WTF::StringImpl *v403;
  WTF::StringImpl *v404;
  WTF::StringImpl *v405;
  WTF::StringImpl *v406;
  WTF::StringImpl *v407;
  uint64_t v408;
  WTF::StringImpl *v409;
  WTF::StringImpl *v410;
  WTF::StringImpl *v411;
  WTF::StringImpl *valuePtr;
  __int128 buf;
  const char *v414;
  WTF::StringImpl *v415;
  int v416;
  WTF::StringImpl *v417;
  int v418;
  WTF::StringImpl *v419;
  int v420;
  WTF::StringImpl *v421;
  int v422;
  WTF::StringImpl *v423;
  uint64_t v424;

  v3 = this;
  v424 = *MEMORY[0x1E0C80C00];
  v390 = this;
  if (theArray && (v4 = theArray, (this = CFArrayGetCount(theArray)) != 0))
  {
    v5 = this;
    v6 = *(_QWORD *)(v3 + 32);
    v7 = *(_QWORD *)(v3 + 40);
    v398 = (WTF::StringImpl *)"InbandTextTrackPrivateAVF";
    v399 = (WTF::StringImpl *)26;
    v400 = "processAttributedStrings";
    v401 = v7;
    v8 = " cues";
    if (this <= 1)
      v8 = " cue";
    v391 = (char *)v8;
    v382 = (uint64_t *)this;
    if (*(_BYTE *)(v6 + 12))
    {
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v398);
        WTF::String::String((WTF::String *)&v406, "added ");
        WTF::String::number((WTF::String *)v5);
        WTF::String::String((WTF::String *)&v404, v391);
        WTF::String::String((WTF::String *)&v403, " at time ");
        WTF::MediaTime::toJSONString(a3);
        effectiveRange.location = (CFIndex)v406;
        v407 = v405;
        v396 = v404;
        valuePtr = v403;
        *(_QWORD *)&buf = v409;
        v411 = v402;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, &effectiveRange.location, (uint64_t *)&v407, (uint64_t *)&v396, (uint64_t *)&valuePtr, (uint64_t *)&v411, &v410);
        if (!v410)
          goto LABEL_915;
        v11 = v402;
        v402 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v10);
          else
            *(_DWORD *)v11 -= 2;
        }
        v12 = v403;
        v403 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v10);
          else
            *(_DWORD *)v12 -= 2;
        }
        v13 = v404;
        v404 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v10);
          else
            *(_DWORD *)v13 -= 2;
        }
        v14 = v405;
        v405 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v10);
          else
            *(_DWORD *)v14 -= 2;
        }
        v15 = v406;
        v406 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v10);
          else
            *(_DWORD *)v15 -= 2;
        }
        v16 = v409;
        v409 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v10);
          else
            *(_DWORD *)v16 -= 2;
        }
        v17 = qword_1ECE7C4A0;
        location = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)location)
        {
          WTF::String::utf8();
          v19 = effectiveRange.location ? effectiveRange.location + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v19;
          _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          location = effectiveRange.location;
          effectiveRange.location = 0;
          if (location)
          {
            if (*(_DWORD *)location == 1)
              location = WTF::fastFree((WTF *)location, theArray);
            else
              --*(_DWORD *)location;
          }
        }
        if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        {
          v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v21 = *v20;
            if ((v21 & 1) != 0)
              break;
            v22 = __ldaxr(v20);
            if (v22 == v21)
            {
              if (!__stxr(v21 | 1, v20))
              {
                v170 = WTF::Logger::observers((WTF::Logger *)location);
                v171 = *(unsigned int *)(v170 + 12);
                if ((_DWORD)v171)
                {
                  v172 = *(uint64_t **)v170;
                  v388 = *(_QWORD *)v170 + 8 * v171;
                  do
                  {
                    v173 = *v172;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v398);
                    LODWORD(v414) = 0;
                    WTF::String::String((WTF::String *)&v415, "added ");
                    v416 = 0;
                    WTF::String::number((WTF::String *)v5);
                    v418 = 0;
                    WTF::String::String((WTF::String *)&v419, v391);
                    v420 = 0;
                    WTF::String::String((WTF::String *)&v421, " at time ");
                    v422 = 1;
                    WTF::MediaTime::toJSONString(a3);
                    effectiveRange.location = 0;
                    effectiveRange.length = 0;
                    v174 = WTF::fastMalloc((WTF *)0x60);
                    LODWORD(effectiveRange.length) = 6;
                    effectiveRange.location = v174;
                    length_high = HIDWORD(effectiveRange.length);
                    *(_DWORD *)(v174 + 16 * HIDWORD(effectiveRange.length)) = buf;
                    v176 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *(_QWORD *)(v174 + 16 * length_high + 8) = v176;
                    *(_DWORD *)(v174 + 16 * (length_high + 1)) = (_DWORD)v414;
                    v177 = v415;
                    if (v415)
                      *(_DWORD *)v415 += 2;
                    *(_QWORD *)(v174 + 16 * (length_high + 1) + 8) = v177;
                    *(_DWORD *)(v174 + 16 * (length_high + 2)) = v416;
                    v178 = v417;
                    if (v417)
                      *(_DWORD *)v417 += 2;
                    *(_QWORD *)(v174 + 16 * (length_high + 2) + 8) = v178;
                    *(_DWORD *)(v174 + 16 * (length_high + 3)) = v418;
                    v179 = v419;
                    if (v419)
                      *(_DWORD *)v419 += 2;
                    *(_QWORD *)(v174 + 16 * (length_high + 3) + 8) = v179;
                    *(_DWORD *)(v174 + 16 * (length_high + 4)) = v420;
                    v180 = v421;
                    if (v421)
                      *(_DWORD *)v421 += 2;
                    *(_QWORD *)(v174 + 16 * (length_high + 4) + 8) = v180;
                    *(_DWORD *)(v174 + 16 * (length_high + 5)) = v422;
                    v181 = v423;
                    if (v423)
                      *(_DWORD *)v423 += 2;
                    *(_QWORD *)(v174 + 16 * (length_high + 5) + 8) = v181;
                    HIDWORD(effectiveRange.length) = length_high + 6;
                    (*(void (**)(uint64_t, char *, uint64_t, CFRange *))(*(_QWORD *)v173 + 16))(v173, &WebCore::LogMedia, 3, &effectiveRange);
                    v182 = (WTF *)effectiveRange.location;
                    if (HIDWORD(effectiveRange.length))
                    {
                      v183 = 16 * HIDWORD(effectiveRange.length);
                      v184 = (WTF::StringImpl **)(effectiveRange.location + 8);
                      do
                      {
                        v185 = *v184;
                        *v184 = 0;
                        if (v185)
                        {
                          if (*(_DWORD *)v185 == 2)
                            WTF::StringImpl::destroy(v185, theArray);
                          else
                            *(_DWORD *)v185 -= 2;
                        }
                        v184 += 2;
                        v183 -= 16;
                      }
                      while (v183);
                      v182 = (WTF *)effectiveRange.location;
                      v5 = (uint64_t)v382;
                    }
                    if (v182)
                    {
                      effectiveRange.location = 0;
                      LODWORD(effectiveRange.length) = 0;
                      WTF::fastFree(v182, theArray);
                    }
                    v186 = v423;
                    v423 = 0;
                    if (v186)
                    {
                      if (*(_DWORD *)v186 == 2)
                        WTF::StringImpl::destroy(v186, theArray);
                      else
                        *(_DWORD *)v186 -= 2;
                    }
                    v187 = v421;
                    v421 = 0;
                    if (v187)
                    {
                      if (*(_DWORD *)v187 == 2)
                        WTF::StringImpl::destroy(v187, theArray);
                      else
                        *(_DWORD *)v187 -= 2;
                    }
                    v188 = v419;
                    v419 = 0;
                    if (v188)
                    {
                      if (*(_DWORD *)v188 == 2)
                        WTF::StringImpl::destroy(v188, theArray);
                      else
                        *(_DWORD *)v188 -= 2;
                    }
                    v189 = v417;
                    v417 = 0;
                    if (v189)
                    {
                      if (*(_DWORD *)v189 == 2)
                        WTF::StringImpl::destroy(v189, theArray);
                      else
                        *(_DWORD *)v189 -= 2;
                    }
                    v190 = v415;
                    v415 = 0;
                    if (v190)
                    {
                      if (*(_DWORD *)v190 == 2)
                        WTF::StringImpl::destroy(v190, theArray);
                      else
                        *(_DWORD *)v190 -= 2;
                    }
                    v191 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v191)
                    {
                      if (*(_DWORD *)v191 == 2)
                        WTF::StringImpl::destroy(v191, theArray);
                      else
                        *(_DWORD *)v191 -= 2;
                    }
                    ++v172;
                  }
                  while (v172 != (uint64_t *)v388);
                }
                v192 = __ldxr(v20);
                if (v192 == 1)
                {
                  v3 = v390;
                  if (!__stlxr(0, v20))
                    break;
                }
                else
                {
                  __clrex();
                  v3 = v390;
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        this = (uint64_t)v410;
        v410 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, theArray);
          else
            *(_DWORD *)this -= 2;
        }
      }
    }
    v396 = 0;
    v397 = 0;
    if (v5 >= 1)
    {
      theArray = 0;
      v393 = (char *)*MEMORY[0x1E0C9AE50];
      __asm { FMOV            V0.2D, #-1.0 }
      v381 = _Q0;
      v380 = v4;
      do
      {
        v385 = theArray;
        this = (uint64_t)CFArrayGetValueAtIndex(v4, (CFIndex)theArray);
        if (!this)
          goto LABEL_868;
        v276 = (const __CFAttributedString *)this;
        this = CFAttributedStringGetLength((CFAttributedStringRef)this);
        if (!this)
          goto LABEL_868;
        v277 = WTF::fastMalloc((WTF *)0x90);
        *(_DWORD *)v277 = 1;
        *(_QWORD *)(v277 + 8) = 0;
        *(_QWORD *)(v277 + 16) = 0;
        *(_DWORD *)(v277 + 24) = 10000000;
        *(_BYTE *)(v277 + 28) = 1;
        *(_QWORD *)(v277 + 32) = 0;
        *(_DWORD *)(v277 + 40) = 10000000;
        *(_BYTE *)(v277 + 44) = 1;
        *(_QWORD *)(v277 + 56) = 0;
        *(_QWORD *)(v277 + 64) = 0;
        *(_QWORD *)(v277 + 48) = 0;
        *(_OWORD *)(v277 + 72) = v381;
        *(_QWORD *)(v277 + 88) = 0xBFF0000000000000;
        *(_OWORD *)(v277 + 96) = 0u;
        *(_OWORD *)(v277 + 112) = 0u;
        *(_OWORD *)(v277 + 123) = 0u;
        *(_QWORD *)(v277 + 8) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
        v411 = (WTF::StringImpl *)v277;
        buf = 0uLL;
        LODWORD(v414) = 0;
        BYTE4(v414) = 1;
        String = CFAttributedStringGetString(v276);
        MEMORY[0x19AEA5508](&v407, String);
        v280 = v407;
        if (!v407)
          goto LABEL_852;
        v389 = *((unsigned int *)v407 + 1);
        if ((_DWORD)v389)
        {
          v279 = 0;
          v281 = 0;
          effectiveRange.location = 0;
          effectiveRange.length = 0;
          v386 = v276;
          while (1)
          {
            Attributes = CFAttributedStringGetAttributes(v276, (CFIndex)v279, &effectiveRange);
            if (!Attributes)
              goto LABEL_815;
            v283 = Attributes;
            v398 = 0;
            v399 = 0;
            LODWORD(v400) = 0;
            BYTE4(v400) = 1;
            Count = CFDictionaryGetCount(Attributes);
            if (!Count)
            {
              CFDictionaryGetKeysAndValues(v283, 0, 0);
              v287 = 0;
              v286 = 0;
              v289 = 0;
              goto LABEL_780;
            }
            v285 = Count;
            if (Count >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1961E5AA4);
            }
            v286 = (const void **)WTF::fastMalloc((WTF *)(8 * Count));
            v287 = (const void **)WTF::fastMalloc((WTF *)(8 * v285));
            CFDictionaryGetKeysAndValues(v283, v286, v287);
            v288 = 0;
            v289 = 0;
            do
            {
              v290 = (const __CFString *)v286[v288];
              if (!v290)
                goto LABEL_753;
              v291 = CFGetTypeID(v286[v288]);
              if (v291 != CFStringGetTypeID())
                goto LABEL_753;
              v292 = (const __CFString *)v287[v288];
              if (!CFStringGetLength(v290))
                goto LABEL_753;
              if (PAL::get_CoreMedia_kCMTextMarkupAttribute_Alignment(void)::once != -1)
                dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_Alignment(void)::once, &__block_literal_global_90_0);
              if (CFStringCompare(v290, (CFStringRef)PAL::get_CoreMedia_kCMTextMarkupAttribute_Alignment(void)::constantCoreMediakCMTextMarkupAttribute_Alignment, 0))
              {
                if (PAL::get_CoreMedia_kCMTextMarkupAttribute_BoldStyle(void)::once != -1)
                  dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_BoldStyle(void)::once, &__block_literal_global_99);
                if (CFStringCompare(v290, (CFStringRef)PAL::get_CoreMedia_kCMTextMarkupAttribute_BoldStyle(void)::constantCoreMediakCMTextMarkupAttribute_BoldStyle, 0) == kCFCompareEqualTo)
                {
                  if (v292 != (const __CFString *)v393)
                    goto LABEL_753;
                  WTF::StringBuilder::append();
                  if (v289)
                  {
                    v303 = *(_DWORD *)(v289 + 4);
                    *(_DWORD *)v289 += 2;
                    if (v303 < 0 || (v304 = (v303 + 4), __OFADD__(v303, 4)))
                    {
                      valuePtr = 0;
LABEL_901:
                      __break(0xC471u);
                      JUMPOUT(0x1961E5A78);
                    }
                    v305 = (*(unsigned __int8 *)(v289 + 16) >> 2) & 1;
                  }
                  else
                  {
                    v305 = 1;
                    v304 = 4;
                  }
                  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v304, v305, (int8x16_t *)"</b>", 4u, v289, &valuePtr);
                  v307 = valuePtr;
                  if (!valuePtr)
                    goto LABEL_901;
LABEL_684:
                  valuePtr = 0;
                  if (v289)
                  {
                    if (*(_DWORD *)v289 == 2)
                    {
                      WTF::StringImpl::destroy((WTF::StringImpl *)v289, v306);
                      v322 = valuePtr;
                      valuePtr = 0;
                      if (v322)
                      {
                        if (*(_DWORD *)v322 == 2)
                          WTF::StringImpl::destroy(v322, v306);
                        else
                          *(_DWORD *)v322 -= 2;
                      }
                    }
                    else
                    {
                      *(_DWORD *)v289 -= 2;
                      valuePtr = 0;
                    }
                    if (*(_DWORD *)v289 == 2)
                      WTF::StringImpl::destroy((WTF::StringImpl *)v289, v306);
                    else
                      *(_DWORD *)v289 -= 2;
                  }
                  v289 = (uint64_t)v307;
                  goto LABEL_753;
                }
                if (PAL::get_CoreMedia_kCMTextMarkupAttribute_ItalicStyle(void)::once != -1)
                  dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_ItalicStyle(void)::once, &__block_literal_global_111);
                if (CFStringCompare(v290, (CFStringRef)PAL::get_CoreMedia_kCMTextMarkupAttribute_ItalicStyle(void)::constantCoreMediakCMTextMarkupAttribute_ItalicStyle, 0) == kCFCompareEqualTo)
                {
                  if (v292 != (const __CFString *)v393)
                    goto LABEL_753;
                  WTF::StringBuilder::append();
                  if (v289)
                  {
                    v308 = *(_DWORD *)(v289 + 4);
                    *(_DWORD *)v289 += 2;
                    if (v308 < 0 || (v309 = (v308 + 4), __OFADD__(v308, 4)))
                    {
                      valuePtr = 0;
LABEL_903:
                      __break(0xC471u);
                      JUMPOUT(0x1961E5A84);
                    }
                    v310 = (*(unsigned __int8 *)(v289 + 16) >> 2) & 1;
                  }
                  else
                  {
                    v310 = 1;
                    v309 = 4;
                  }
                  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v309, v310, (int8x16_t *)"</i>", 4u, v289, &valuePtr);
                  v307 = valuePtr;
                  if (!valuePtr)
                    goto LABEL_903;
                  goto LABEL_684;
                }
                if (PAL::get_CoreMedia_kCMTextMarkupAttribute_UnderlineStyle(void)::once != -1)
                  dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_UnderlineStyle(void)::once, &__block_literal_global_123_0);
                if (CFStringCompare(v290, (CFStringRef)PAL::get_CoreMedia_kCMTextMarkupAttribute_UnderlineStyle(void)::constantCoreMediakCMTextMarkupAttribute_UnderlineStyle, 0) == kCFCompareEqualTo)
                {
                  if (v292 != (const __CFString *)v393)
                    goto LABEL_753;
                  WTF::StringBuilder::append();
                  if (v289)
                  {
                    v311 = *(_DWORD *)(v289 + 4);
                    *(_DWORD *)v289 += 2;
                    if (v311 < 0 || (v312 = (v311 + 4), __OFADD__(v311, 4)))
                    {
                      valuePtr = 0;
LABEL_905:
                      __break(0xC471u);
                      JUMPOUT(0x1961E5A90);
                    }
                    v313 = (*(unsigned __int8 *)(v289 + 16) >> 2) & 1;
                  }
                  else
                  {
                    v313 = 1;
                    v312 = 4;
                  }
                  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v312, v313, (int8x16_t *)"</u>", 4u, v289, &valuePtr);
                  v307 = valuePtr;
                  if (!valuePtr)
                    goto LABEL_905;
                  goto LABEL_684;
                }
                if (PAL::get_CoreMedia_kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection(void)::once != -1)
                  dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection(void)::once, &__block_literal_global_114_0);
                if (CFStringCompare(v290, (CFStringRef)PAL::get_CoreMedia_kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection(void)::constantCoreMediakCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection, 0))
                {
                  if (PAL::get_CoreMedia_kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection(void)::once != -1)
                    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection(void)::once, &__block_literal_global_120);
                  if (CFStringCompare(v290, (CFStringRef)PAL::get_CoreMedia_kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection(void)::constantCoreMediakCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection, 0))
                  {
                    if (PAL::get_CoreMedia_kCMTextMarkupAttribute_WritingDirectionSizePercentage(void)::once != -1)
                      dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_WritingDirectionSizePercentage(void)::once, &__block_literal_global_129);
                    if (CFStringCompare(v290, (CFStringRef)PAL::get_CoreMedia_kCMTextMarkupAttribute_WritingDirectionSizePercentage(void)::constantCoreMediakCMTextMarkupAttribute_WritingDirectionSizePercentage, 0))
                    {
                      if (PAL::get_CoreMedia_kCMTextMarkupAttribute_VerticalLayout(void)::once != -1)
                        dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_VerticalLayout(void)::once, &__block_literal_global_126);
                      if (CFStringCompare(v290, (CFStringRef)PAL::get_CoreMedia_kCMTextMarkupAttribute_VerticalLayout(void)::constantCoreMediakCMTextMarkupAttribute_VerticalLayout, 0))
                      {
                        if (PAL::get_CoreMedia_kCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight(void)::once != -1)
                          dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight(void)::once, &__block_literal_global_96_0);
                        if (CFStringCompare(v290, (CFStringRef)PAL::get_CoreMedia_kCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight(void)::constantCoreMediakCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight, 0))
                        {
                          if (PAL::get_CoreMedia_kCMTextMarkupAttribute_RelativeFontSize(void)::once != -1)
                            dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_RelativeFontSize(void)::once, &__block_literal_global_117);
                          if (CFStringCompare(v290, (CFStringRef)PAL::get_CoreMedia_kCMTextMarkupAttribute_RelativeFontSize(void)::constantCoreMediakCMTextMarkupAttribute_RelativeFontSize, 0))
                          {
                            if (PAL::get_CoreMedia_kCMTextMarkupAttribute_FontFamilyName(void)::once != -1)
                              dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_FontFamilyName(void)::once, &__block_literal_global_105);
                            if (CFStringCompare(v290, (CFStringRef)PAL::get_CoreMedia_kCMTextMarkupAttribute_FontFamilyName(void)::constantCoreMediakCMTextMarkupAttribute_FontFamilyName, 0))
                            {
                              if (PAL::get_CoreMedia_kCMTextMarkupAttribute_ForegroundColorARGB(void)::once != -1)
                                dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_ForegroundColorARGB(void)::once, &__block_literal_global_108_0);
                              if (CFStringCompare(v290, (CFStringRef)PAL::get_CoreMedia_kCMTextMarkupAttribute_ForegroundColorARGB(void)::constantCoreMediakCMTextMarkupAttribute_ForegroundColorARGB, 0))
                              {
                                if (PAL::get_CoreMedia_kCMTextMarkupAttribute_BackgroundColorARGB(void)::once != -1)
                                  dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_BackgroundColorARGB(void)::once, &__block_literal_global_93);
                                if (CFStringCompare(v290, (CFStringRef)PAL::get_CoreMedia_kCMTextMarkupAttribute_BackgroundColorARGB(void)::constantCoreMediakCMTextMarkupAttribute_BackgroundColorARGB, 0))
                                {
                                  if (PAL::get_CoreMedia_kCMTextMarkupAttribute_CharacterBackgroundColorARGB(void)::once != -1)
                                    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_CharacterBackgroundColorARGB(void)::once, &__block_literal_global_102_0);
                                  if (CFStringCompare(v290, (CFStringRef)PAL::get_CoreMedia_kCMTextMarkupAttribute_CharacterBackgroundColorARGB(void)::constantCoreMediakCMTextMarkupAttribute_CharacterBackgroundColorARGB, 0) == kCFCompareEqualTo)
                                  {
                                    v293 = (WebCore *)WTF::dynamic_cf_cast<__CFArray const*>(v292);
                                    if (v293)
                                    {
                                      SimpleColorFromARGBCFArray = WebCore::makeSimpleColorFromARGBCFArray(v293, v294);
                                      if (BYTE4(SimpleColorFromARGBCFArray))
                                      {
                                        v297 = v411;
                                        v298 = bswap32(SimpleColorFromARGBCFArray) | 0x1104000000000000;
                                        v299 = *((_QWORD *)v411 + 16);
                                        if (v299 != v298 || (v299 & 0x8000000000000) != 0)
                                        {
                                          if ((v299 & 0x8000000000000) != 0)
                                          {
                                            v351 = (unsigned int *)(v299 & 0xFFFFFFFFFFFFLL);
                                            do
                                            {
                                              v352 = __ldaxr(v351);
                                              v353 = v352 - 1;
                                            }
                                            while (__stlxr(v353, v351));
                                            if (!v353)
                                            {
                                              atomic_store(1u, v351);
                                              WTF::fastFree((WTF *)v351, v296);
                                            }
                                          }
                                          *((_QWORD *)v297 + 16) = v298;
                                        }
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  v338 = (WebCore *)WTF::dynamic_cf_cast<__CFArray const*>(v292);
                                  if (v338)
                                  {
                                    v340 = WebCore::makeSimpleColorFromARGBCFArray(v338, v339);
                                    if (BYTE4(v340))
                                    {
                                      v342 = v411;
                                      v343 = bswap32(v340) | 0x1104000000000000;
                                      v344 = *((_QWORD *)v411 + 15);
                                      if (v344 != v343 || (v344 & 0x8000000000000) != 0)
                                      {
                                        if ((v344 & 0x8000000000000) != 0)
                                        {
                                          v348 = (unsigned int *)(v344 & 0xFFFFFFFFFFFFLL);
                                          do
                                          {
                                            v349 = __ldaxr(v348);
                                            v350 = v349 - 1;
                                          }
                                          while (__stlxr(v350, v348));
                                          if (!v350)
                                          {
                                            atomic_store(1u, v348);
                                            WTF::fastFree((WTF *)v348, v341);
                                          }
                                        }
                                        *((_QWORD *)v342 + 15) = v343;
                                      }
                                    }
                                  }
                                }
                              }
                              else
                              {
                                v331 = (WebCore *)WTF::dynamic_cf_cast<__CFArray const*>(v292);
                                if (v331)
                                {
                                  v333 = WebCore::makeSimpleColorFromARGBCFArray(v331, v332);
                                  if (BYTE4(v333))
                                  {
                                    v335 = v411;
                                    v336 = bswap32(v333) | 0x1104000000000000;
                                    v337 = *((_QWORD *)v411 + 14);
                                    if (v337 != v336 || (v337 & 0x8000000000000) != 0)
                                    {
                                      if ((v337 & 0x8000000000000) != 0)
                                      {
                                        v345 = (unsigned int *)(v337 & 0xFFFFFFFFFFFFLL);
                                        do
                                        {
                                          v346 = __ldaxr(v345);
                                          v347 = v346 - 1;
                                        }
                                        while (__stlxr(v347, v345));
                                        if (!v347)
                                        {
                                          atomic_store(1u, v345);
                                          WTF::fastFree((WTF *)v345, v334);
                                        }
                                      }
                                      *((_QWORD *)v335 + 14) = v336;
                                    }
                                  }
                                }
                              }
                            }
                            else
                            {
                              v325 = (const __CFString *)WTF::dynamic_cf_cast<__CFString const*>(v292);
                              if (v325)
                              {
                                v326 = v325;
                                if (CFStringGetLength(v325))
                                {
                                  if ((v281 & 0x20) == 0)
                                  {
                                    v327 = v411;
                                    MEMORY[0x19AEA5508](&valuePtr, v326);
                                    v329 = valuePtr;
                                    if (valuePtr)
                                      *(_DWORD *)valuePtr += 2;
                                    v330 = (WTF::StringImpl *)*((_QWORD *)v327 + 8);
                                    *((_QWORD *)v327 + 8) = v329;
                                    if (v330)
                                    {
                                      if (*(_DWORD *)v330 == 2)
                                      {
                                        WTF::StringImpl::destroy(v330, v328);
                                        v329 = valuePtr;
                                      }
                                      else
                                      {
                                        *(_DWORD *)v330 -= 2;
                                      }
                                    }
                                    valuePtr = 0;
                                    if (v329)
                                    {
                                      if (*(_DWORD *)v329 == 2)
                                        WTF::StringImpl::destroy(v329, v328);
                                      else
                                        *(_DWORD *)v329 -= 2;
                                    }
                                    v281 |= 0x20u;
                                  }
                                }
                              }
                            }
                          }
                          else if (v292)
                          {
                            v324 = CFGetTypeID(v292);
                            if (v324 == CFNumberGetTypeID())
                            {
                              valuePtr = 0;
                              CFNumberGetValue((CFNumberRef)v292, kCFNumberFloat64Type, &valuePtr);
                              *((_QWORD *)v411 + 13) = valuePtr;
                            }
                          }
                        }
                        else if (v292)
                        {
                          v323 = CFGetTypeID(v292);
                          if (v323 == CFNumberGetTypeID())
                          {
                            valuePtr = 0;
                            CFNumberGetValue((CFNumberRef)v292, kCFNumberFloat64Type, &valuePtr);
                            *((_QWORD *)v411 + 12) = valuePtr;
                          }
                        }
                      }
                      else
                      {
                        v317 = (const __CFString *)WTF::dynamic_cf_cast<__CFString const*>(v292);
                        if (v317)
                        {
                          v318 = v317;
                          if (CFStringGetLength(v317))
                          {
                            if (PAL::get_CoreMedia_kCMTextVerticalLayout_LeftToRight(void)::once != -1)
                              dispatch_once(&PAL::get_CoreMedia_kCMTextVerticalLayout_LeftToRight(void)::once, &__block_literal_global_132_0);
                            if (CFStringCompare(v318, (CFStringRef)PAL::get_CoreMedia_kCMTextVerticalLayout_LeftToRight(void)::constantCoreMediakCMTextVerticalLayout_LeftToRight, 0) == kCFCompareEqualTo)
                            {
                              LOWORD(valuePtr) = 8206;
                              if (v399)
                              {
                                v319 = v400;
                                if (v400 < *((_DWORD *)v399 + 1)
                                  && !v398
                                  && (*((_BYTE *)v399 + 16) & 4) == 0)
                                {
                                  v320 = *((_QWORD *)v399 + 1);
                                  LODWORD(v400) = (_DWORD)v400 + 1;
                                  v321 = 8206;
                                  goto LABEL_751;
                                }
                              }
                              goto LABEL_752;
                            }
                            if (PAL::get_CoreMedia_kCMTextVerticalLayout_RightToLeft(void)::once != -1)
                              dispatch_once(&PAL::get_CoreMedia_kCMTextVerticalLayout_RightToLeft(void)::once, &__block_literal_global_135);
                            if (CFStringCompare(v318, (CFStringRef)PAL::get_CoreMedia_kCMTextVerticalLayout_RightToLeft(void)::constantCoreMediakCMTextVerticalLayout_RightToLeft, 0) == kCFCompareEqualTo)
                            {
                              LOWORD(valuePtr) = 8207;
                              if (v399)
                              {
                                v319 = v400;
                                if (v400 < *((_DWORD *)v399 + 1)
                                  && !v398
                                  && (*((_BYTE *)v399 + 16) & 4) == 0)
                                {
                                  v320 = *((_QWORD *)v399 + 1);
                                  LODWORD(v400) = (_DWORD)v400 + 1;
                                  v321 = 8207;
LABEL_751:
                                  *(_WORD *)(v320 + 2 * v319) = v321;
                                  goto LABEL_753;
                                }
                              }
LABEL_752:
                              WTF::StringBuilder::append();
                            }
                          }
                        }
                      }
                    }
                    else if (v292)
                    {
                      v316 = CFGetTypeID(v292);
                      if (v316 == CFNumberGetTypeID() && (v281 & 4) == 0)
                      {
                        v281 |= 4u;
                        valuePtr = 0;
                        CFNumberGetValue((CFNumberRef)v292, kCFNumberFloat64Type, &valuePtr);
                        *((_QWORD *)v411 + 11) = valuePtr;
                      }
                    }
                  }
                  else if (v292)
                  {
                    v315 = CFGetTypeID(v292);
                    if (v315 == CFNumberGetTypeID() && (v281 & 2) == 0)
                    {
                      v281 |= 2u;
                      valuePtr = 0;
                      CFNumberGetValue((CFNumberRef)v292, kCFNumberFloat64Type, &valuePtr);
                      *((_QWORD *)v411 + 10) = valuePtr;
                    }
                  }
                }
                else if (v292)
                {
                  v314 = CFGetTypeID(v292);
                  if (v314 == CFNumberGetTypeID() && (v281 & 1) == 0)
                  {
                    v281 |= 1u;
                    valuePtr = 0;
                    CFNumberGetValue((CFNumberRef)v292, kCFNumberFloat64Type, &valuePtr);
                    *((_QWORD *)v411 + 9) = valuePtr;
                  }
                }
              }
              else if (v292)
              {
                v300 = CFGetTypeID(v292);
                if (v300 == CFStringGetTypeID() && CFStringGetLength(v292) && (v281 & 0x10) == 0)
                {
                  if (PAL::get_CoreMedia_kCMTextMarkupAlignmentType_Start(void)::once != -1)
                    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAlignmentType_Start(void)::once, &__block_literal_global_87);
                  v281 |= 0x10u;
                  if (CFStringCompare(v292, (CFStringRef)PAL::get_CoreMedia_kCMTextMarkupAlignmentType_Start(void)::constantCoreMediakCMTextMarkupAlignmentType_Start, 0) == kCFCompareEqualTo)
                  {
                    v301 = v411;
                    v302 = 1;
                    goto LABEL_691;
                  }
                  if (PAL::get_CoreMedia_kCMTextMarkupAlignmentType_Middle(void)::once != -1)
                    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAlignmentType_Middle(void)::once, &__block_literal_global_84_0);
                  if (CFStringCompare(v292, (CFStringRef)PAL::get_CoreMedia_kCMTextMarkupAlignmentType_Middle(void)::constantCoreMediakCMTextMarkupAlignmentType_Middle, 0))
                  {
                    if (PAL::get_CoreMedia_kCMTextMarkupAlignmentType_End(void)::once != -1)
                      dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAlignmentType_End(void)::once, &__block_literal_global_81);
                    if (CFStringCompare(v292, (CFStringRef)PAL::get_CoreMedia_kCMTextMarkupAlignmentType_End(void)::constantCoreMediakCMTextMarkupAlignmentType_End, 0) == kCFCompareEqualTo)
                    {
                      v301 = v411;
                      v302 = 3;
LABEL_691:
                      *((_BYTE *)v301 + 137) = v302;
                    }
                  }
                  else
                  {
                    *((_BYTE *)v411 + 137) = 2;
                  }
                }
              }
LABEL_753:
              ++v288;
            }
            while (v288 != v285);
            v3 = v390;
LABEL_780:
            v143 = WTF::StringBuilder::append((WTF::StringImpl **)&buf, &v398);
            v276 = v386;
            if (!v407)
              goto LABEL_791;
            v354 = *((unsigned int *)v407 + 1);
            if (v354 <= LODWORD(effectiveRange.location))
              goto LABEL_791;
            v142 = (WTF::StringImpl *)*((_QWORD *)v407 + 1);
            length = effectiveRange.length;
            if ((v354 - LODWORD(effectiveRange.location)) > LODWORD(effectiveRange.length))
              goto LABEL_783;
            if (!LODWORD(effectiveRange.location))
            {
              v356 = v354 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*((unsigned int *)v407 + 4) >> 2) & 1) << 32);
              goto LABEL_790;
            }
            length = v354 - LODWORD(effectiveRange.location);
LABEL_783:
            v356 = length;
            v357 = v354 - LODWORD(effectiveRange.location);
            if (((*((_DWORD *)v407 + 4) >> 2) & 1) != 0)
            {
              if (v357 >= length)
              {
                v356 = length | 0x100000000;
                goto LABEL_790;
              }
LABEL_878:
              __break(1u);
LABEL_879:
              WTF::StringImpl::destroy(v143, v142);
              goto LABEL_308;
            }
            if (v357 < length)
              goto LABEL_878;
LABEL_790:
            if ((v356 & 0x100000000) == 0)
              WTF::StringBuilder::append();
            else
LABEL_791:
              WTF::StringBuilder::append();
            if ((_DWORD)v414 || *((_QWORD *)&buf + 1))
            {
              if (v289 && (*(_BYTE *)(v289 + 16) & 4) == 0)
                WTF::StringBuilder::append();
              else
                WTF::StringBuilder::append();
              goto LABEL_802;
            }
            if (v289)
              *(_DWORD *)v289 += 2;
            v359 = (WTF::StringImpl *)buf;
            *(_QWORD *)&buf = v289;
            if (!v359)
            {
LABEL_799:
              if (!v289)
                goto LABEL_825;
LABEL_800:
              v360 = *(_DWORD *)(v289 + 4);
              goto LABEL_801;
            }
            if (*(_DWORD *)v359 != 2)
            {
              *(_DWORD *)v359 -= 2;
              goto LABEL_799;
            }
            WTF::StringImpl::destroy(v359, v358);
            if (v289)
              goto LABEL_800;
LABEL_825:
            v360 = 0;
LABEL_801:
            LODWORD(v414) = v360;
LABEL_802:
            if (v287)
              WTF::fastFree((WTF *)v287, v358);
            if (v286)
              WTF::fastFree((WTF *)v286, v358);
            if (v289)
            {
              if (*(_DWORD *)v289 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v289, v358);
              else
                *(_DWORD *)v289 -= 2;
            }
            v361 = v399;
            v399 = 0;
            if (v361)
            {
              if (*(_DWORD *)v361 == 2)
                WTF::StringImpl::destroy(v361, v358);
              else
                *(_DWORD *)v361 -= 2;
            }
            v362 = v398;
            v398 = 0;
            if (v362)
            {
              if (*(_DWORD *)v362 == 2)
                WTF::StringImpl::destroy(v362, v358);
              else
                *(_DWORD *)v362 -= 2;
            }
LABEL_815:
            v279 = (WTF::StringImpl *)(effectiveRange.length + effectiveRange.location);
            if (effectiveRange.length + effectiveRange.location >= v389)
            {
              v363 = v411;
              v364 = *((double *)v411 + 10);
              if (v364 >= 0.0)
              {
                v365 = *((double *)v411 + 11);
                if (v365 >= 0.0)
                {
                  v366 = *((unsigned __int8 *)v411 + 137);
                  if (v366 < 3)
                  {
                    *((_BYTE *)v411 + 136) = 1;
                    v367 = v365 * -0.5;
                    goto LABEL_837;
                  }
                  if (v366 == 3)
                  {
                    *((_BYTE *)v411 + 136) = 3;
                    v367 = v365 * 0.5;
LABEL_837:
                    *((double *)v363 + 10) = v364 + v367;
                  }
                }
              }
              if ((v414 & 0x80000000) == 0)
              {
                if (!(_DWORD)v414)
                  goto LABEL_849;
                v368 = (WTF::StringImpl *)buf;
                if ((_QWORD)buf
                  || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&buf),
                      WTF::StringBuilder::reifyString((WTF::StringBuilder *)&buf),
                      (v368 = (WTF::StringImpl *)buf) != 0))
                {
                  v369 = 0;
                  *(_DWORD *)v368 += 4;
                }
                else
                {
                  v369 = 1;
                }
                v370 = (WTF::StringImpl *)*((_QWORD *)v363 + 7);
                *((_QWORD *)v363 + 7) = v368;
                if (v370)
                {
                  if (*(_DWORD *)v370 != 2)
                  {
                    *(_DWORD *)v370 -= 2;
                    goto LABEL_846;
                  }
                  WTF::StringImpl::destroy(v370, v279);
                  if ((v369 & 1) != 0)
                  {
LABEL_849:
                    v280 = v407;
                    v407 = 0;
                    v4 = v380;
                    if (v280)
                      goto LABEL_850;
                    goto LABEL_852;
                  }
                }
                else
                {
LABEL_846:
                  if ((v369 & 1) != 0)
                    goto LABEL_849;
                }
                if (*(_DWORD *)v368 == 2)
                  WTF::StringImpl::destroy(v368, v279);
                else
                  *(_DWORD *)v368 -= 2;
                goto LABEL_849;
              }
LABEL_915:
              __break(0xC471u);
              JUMPOUT(0x1961E5A5CLL);
            }
          }
        }
        v407 = 0;
LABEL_850:
        if (*(_DWORD *)v280 == 2)
          WTF::StringImpl::destroy(v280, v279);
        else
          *(_DWORD *)v280 -= 2;
LABEL_852:
        v371 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
        *((_QWORD *)&buf + 1) = 0;
        if (v371)
        {
          if (*(_DWORD *)v371 == 2)
            WTF::StringImpl::destroy(v371, v279);
          else
            *(_DWORD *)v371 -= 2;
        }
        this = buf;
        *(_QWORD *)&buf = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v279);
          else
            *(_DWORD *)this -= 2;
        }
        v372 = v411;
        v373 = *((_QWORD *)v411 + 7);
        if (v373 && *(_DWORD *)(v373 + 4))
        {
          v374 = *(_QWORD *)a3;
          *(_QWORD *)((char *)v411 + 21) = *(_QWORD *)((char *)a3 + 5);
          *((_QWORD *)v372 + 2) = v374;
          this = WTF::MediaTime::positiveInfiniteTime((WTF::MediaTime *)this);
          v376 = *(_QWORD *)(this + 5);
          *((_QWORD *)v372 + 4) = *(_QWORD *)this;
          *(_QWORD *)((char *)v372 + 37) = v376;
          v375 = v411;
          *((_BYTE *)v411 + 138) = 1;
          LODWORD(v376) = HIDWORD(v397);
          if (HIDWORD(v397) == (_DWORD)v397)
          {
            this = (uint64_t)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v396, HIDWORD(v397) + 1, (unint64_t)&v411);
            v376 = HIDWORD(v397);
            v377 = v396;
            v378 = *(_QWORD *)this;
            *(_QWORD *)this = 0;
            *((_QWORD *)v377 + v376) = v378;
          }
          else
          {
            v411 = 0;
            *((_QWORD *)v396 + HIDWORD(v397)) = v375;
          }
          HIDWORD(v397) = v376 + 1;
          v372 = v411;
          v411 = 0;
          if (!v372)
            goto LABEL_867;
        }
        else
        {
          v411 = 0;
        }
        if (*(_DWORD *)v372 == 1)
        {
          WebCore::GenericCueData::~GenericCueData((WTF::StringImpl *)((char *)v372 + 8), v279);
          this = WTF::fastFree(v372, v379);
        }
        else
        {
          --*(_DWORD *)v372;
        }
LABEL_867:
        v5 = (uint64_t)v382;
LABEL_868:
        theArray = (CFArrayRef)((char *)v385 + 1);
      }
      while ((CFArrayRef)((char *)v385 + 1) != (CFArrayRef)v5);
    }
  }
  else
  {
    v396 = 0;
    v397 = 0;
  }
  if (!*(_DWORD *)(v3 + 128))
    goto LABEL_453;
  v23 = *(_QWORD *)((char *)a3 + 5);
  *(_QWORD *)(v3 + 88) = *(_QWORD *)a3;
  *(_QWORD *)(v3 + 93) = v23;
  v24 = WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 88), (const WTF::MediaTime *)(v3 + 72));
  v382 = (uint64_t *)(v3 + 88);
  *(_QWORD *)&v381 = v3 + 72;
  if ((v24 & 0x80000000) != 0)
  {
    v131 = *(_QWORD *)(v3 + 32);
    v132 = *(_QWORD *)(v3 + 40);
    v398 = (WTF::StringImpl *)"InbandTextTrackPrivateAVF";
    v399 = (WTF::StringImpl *)26;
    v400 = "processAttributedStrings";
    v401 = v132;
    *(CFIndex *)((char *)&effectiveRange.location + 5) = *(_QWORD *)(v3 + 77);
    v133 = *(_QWORD *)(v3 + 88);
    effectiveRange.location = *(_QWORD *)(v3 + 72);
    v395[0] = v133;
    *(_QWORD *)((char *)v395 + 5) = *(_QWORD *)(v3 + 93);
    if (!*(_BYTE *)(v131 + 12))
      goto LABEL_422;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v398);
    WTF::String::String((WTF::String *)&v410, "negative length cue(s): ");
    WTF::MediaTimeRange::toJSONString((WTF::MediaTimeRange *)&effectiveRange);
    if (v411)
    {
      v134 = *((_DWORD *)v411 + 1);
      if (v410)
        goto LABEL_288;
    }
    else
    {
      v134 = 0;
      if (v410)
      {
LABEL_288:
        v135 = *((_DWORD *)v410 + 1);
        if (v409)
        {
LABEL_289:
          v136 = *((_DWORD *)v409 + 1);
LABEL_290:
          if ((v136 | v135) < 0
            || ((_VF = __OFADD__(v135, v136), v137 = v135 + v136, !_VF) ? (v138 = 0) : (v138 = 1),
                v134 < 0 || (v138 & 1) != 0 || (v139 = (v134 + v137), __OFADD__(v134, v137))))
          {
            valuePtr = 0;
            goto LABEL_914;
          }
          if (v411 && (*((_BYTE *)v411 + 16) & 4) == 0)
          {
            v140 = 0;
            goto LABEL_304;
          }
          if (v410)
          {
            v141 = *((_DWORD *)v410 + 4);
            v140 = (v141 >> 2) & 1;
            if (v409 && (v141 & 4) != 0)
              goto LABEL_303;
          }
          else
          {
            if (v409)
            {
LABEL_303:
              v140 = (*((unsigned __int8 *)v409 + 16) >> 2) & 1;
              goto LABEL_304;
            }
            v140 = 1;
          }
LABEL_304:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v139, v140, v411, (uint64_t)v410, (uint64_t)v409, &valuePtr);
          if (valuePtr)
          {
            v143 = v409;
            v409 = 0;
            if (v143)
            {
              if (*(_DWORD *)v143 == 2)
                goto LABEL_879;
              *(_DWORD *)v143 -= 2;
            }
LABEL_308:
            v144 = v410;
            v410 = 0;
            if (v144)
            {
              if (*(_DWORD *)v144 == 2)
                WTF::StringImpl::destroy(v144, v142);
              else
                *(_DWORD *)v144 -= 2;
            }
            v145 = v411;
            v411 = 0;
            if (v145)
            {
              if (*(_DWORD *)v145 == 2)
                WTF::StringImpl::destroy(v145, v142);
              else
                *(_DWORD *)v145 -= 2;
            }
            v146 = qword_1ECE7C4A0;
            v147 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v147)
            {
              WTF::String::utf8();
              v148 = v407 ? (char *)v407 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v148;
              _os_log_impl(&dword_1940B8000, v146, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v147 = (uint64_t)v407;
              v407 = 0;
              if (v147)
              {
                if (*(_DWORD *)v147 == 1)
                  v147 = WTF::fastFree((WTF *)v147, v25);
                else
                  --*(_DWORD *)v147;
              }
            }
            if (WebCore::LogMedia && byte_1ECE7C490)
            {
              v149 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              do
              {
                while (1)
                {
                  v150 = *v149;
                  if ((v150 & 1) != 0)
                    goto LABEL_419;
                  v151 = __ldaxr(v149);
                  if (v151 == v150)
                    break;
                  __clrex();
                }
              }
              while (__stxr(v150 | 1, v149));
              v152 = WTF::Logger::observers((WTF::Logger *)v147);
              v153 = *(unsigned int *)(v152 + 12);
              if ((_DWORD)v153)
              {
                v154 = *(uint64_t **)v152;
                v155 = *(_QWORD *)v152 + 8 * v153;
                do
                {
                  v156 = *v154;
                  LODWORD(buf) = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v398);
                  LODWORD(v414) = 0;
                  WTF::String::String((WTF::String *)&v415, "negative length cue(s): ");
                  v416 = 1;
                  WTF::MediaTimeRange::toJSONString((WTF::MediaTimeRange *)&effectiveRange);
                  v407 = 0;
                  v408 = 0;
                  v157 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
                  LODWORD(v408) = 3;
                  v407 = v157;
                  v158 = HIDWORD(v408);
                  *((_DWORD *)v157 + 4 * HIDWORD(v408)) = buf;
                  v159 = *((_QWORD *)&buf + 1);
                  if (*((_QWORD *)&buf + 1))
                    **((_DWORD **)&buf + 1) += 2;
                  *((_QWORD *)v157 + 2 * v158 + 1) = v159;
                  *((_DWORD *)v157 + 4 * (v158 + 1)) = (_DWORD)v414;
                  v160 = v415;
                  if (v415)
                    *(_DWORD *)v415 += 2;
                  *((_QWORD *)v157 + 2 * (v158 + 1) + 1) = v160;
                  *((_DWORD *)v157 + 4 * (v158 + 2)) = v416;
                  v161 = v417;
                  if (v417)
                    *(_DWORD *)v417 += 2;
                  *((_QWORD *)v157 + 2 * (v158 + 2) + 1) = v161;
                  HIDWORD(v408) = v158 + 3;
                  (*(void (**)(uint64_t, char *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v156 + 16))(v156, &WebCore::LogMedia, 1, &v407);
                  v162 = v407;
                  if (HIDWORD(v408))
                  {
                    v163 = 16 * HIDWORD(v408);
                    v164 = (WTF::StringImpl **)((char *)v407 + 8);
                    do
                    {
                      v165 = *v164;
                      *v164 = 0;
                      if (v165)
                      {
                        if (*(_DWORD *)v165 == 2)
                          WTF::StringImpl::destroy(v165, (WTF::StringImpl *)v25);
                        else
                          *(_DWORD *)v165 -= 2;
                      }
                      v164 += 2;
                      v163 -= 16;
                    }
                    while (v163);
                    v162 = v407;
                  }
                  if (v162)
                  {
                    v407 = 0;
                    LODWORD(v408) = 0;
                    WTF::fastFree(v162, v25);
                  }
                  v166 = v417;
                  v417 = 0;
                  if (v166)
                  {
                    if (*(_DWORD *)v166 == 2)
                      WTF::StringImpl::destroy(v166, (WTF::StringImpl *)v25);
                    else
                      *(_DWORD *)v166 -= 2;
                  }
                  v167 = v415;
                  v415 = 0;
                  if (v167)
                  {
                    if (*(_DWORD *)v167 == 2)
                      WTF::StringImpl::destroy(v167, (WTF::StringImpl *)v25);
                    else
                      *(_DWORD *)v167 -= 2;
                  }
                  v168 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                  *((_QWORD *)&buf + 1) = 0;
                  if (v168)
                  {
                    if (*(_DWORD *)v168 == 2)
                      WTF::StringImpl::destroy(v168, (WTF::StringImpl *)v25);
                    else
                      *(_DWORD *)v168 -= 2;
                  }
                  ++v154;
                }
                while (v154 != (uint64_t *)v155);
              }
              v169 = __ldxr(v149);
              if (v169 == 1)
              {
                v3 = v390;
                if (!__stlxr(0, v149))
                  goto LABEL_419;
              }
              else
              {
                __clrex();
                v3 = v390;
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            }
LABEL_419:
            v24 = (uint64_t)valuePtr;
            valuePtr = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                v24 = WTF::StringImpl::destroy((WTF::StringImpl *)v24, (WTF::StringImpl *)v25);
              else
                *(_DWORD *)v24 -= 2;
            }
            goto LABEL_422;
          }
LABEL_914:
          __break(0xC471u);
          JUMPOUT(0x1961E5ACCLL);
        }
LABEL_893:
        v136 = 0;
        goto LABEL_290;
      }
    }
    v135 = 0;
    if (v409)
      goto LABEL_289;
    goto LABEL_893;
  }
  v27 = *(unsigned int *)(v3 + 116);
  if (!(_DWORD)v27)
    goto LABEL_422;
  v28 = *(WebCore::InbandGenericCue ***)(v3 + 104);
  v384 = &v28[v27];
  v29 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    v407 = 0;
    v408 = 0;
    v30 = v396;
    v31 = (WTF *)((char *)v396 + 8 * HIDWORD(v397));
    v387 = v28;
    if (!HIDWORD(v397))
    {
      v76 = 0;
      v77 = 1;
      if (v396)
        goto LABEL_166;
      goto LABEL_167;
    }
    do
    {
      v24 = WebCore::GenericCueData::equalNotConsideringTimesOrId(*(_QWORD *)v30 + 8, (uint64_t)*v28 + 8, v26);
      if ((v24 & 1) == 0)
      {
        v44 = HIDWORD(v408);
        if (HIDWORD(v408) == (_DWORD)v408)
        {
          v24 = (uint64_t)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v407, HIDWORD(v408) + 1, (unint64_t)v30);
          v44 = HIDWORD(v408);
          v45 = HIDWORD(v408) + 1;
          v46 = v407;
          v47 = *(_QWORD *)v24;
          *(_QWORD *)v24 = 0;
        }
        else
        {
          v45 = HIDWORD(v408) + 1;
          v46 = v407;
          v47 = *(_QWORD *)v30;
          *(_QWORD *)v30 = 0;
        }
        *((_QWORD *)v46 + v44) = v47;
        HIDWORD(v408) = v45;
        goto LABEL_145;
      }
      v32 = *(_QWORD *)(v3 + 32);
      v33 = *(_QWORD *)(v3 + 40);
      v398 = (WTF::StringImpl *)"InbandTextTrackPrivateAVF";
      v399 = (WTF::StringImpl *)26;
      v400 = "processAttributedStrings";
      v401 = v33;
      if (!*(_BYTE *)(v32 + 12))
        goto LABEL_145;
      if (!WebCore::LogMedia || byte_1ECE7C490 < 3u)
        goto LABEL_145;
      v35 = *v28;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v398);
      WTF::String::String((WTF::String *)&v410, "found an extension cue ");
      WebCore::InbandGenericCue::toJSONString(v35);
      if (v411)
        v36 = *((_DWORD *)v411 + 1);
      else
        v36 = 0;
      if (v410)
      {
        v37 = *((_DWORD *)v410 + 1);
        if (!v409)
          goto LABEL_154;
      }
      else
      {
        v37 = 0;
        if (!v409)
        {
LABEL_154:
          v38 = 0;
          goto LABEL_63;
        }
      }
      v38 = *((_DWORD *)v409 + 1);
LABEL_63:
      if ((v38 | v37) < 0
        || ((_VF = __OFADD__(v37, v38), v40 = v37 + v38, !_VF) ? (v41 = 0) : (v41 = 1),
            v36 < 0 || (v41 & 1) != 0 || (v42 = (v36 + v40), __OFADD__(v36, v40))))
      {
        valuePtr = 0;
LABEL_899:
        __break(0xC471u);
        JUMPOUT(0x1961E5A6CLL);
      }
      if (!v411 || (*((_BYTE *)v411 + 16) & 4) != 0)
      {
        if (v410)
        {
          v48 = *((_DWORD *)v410 + 4);
          v43 = (v48 >> 2) & 1;
          if (!v409 || (v48 & 4) == 0)
            goto LABEL_81;
        }
        else if (!v409)
        {
          v43 = 1;
          goto LABEL_81;
        }
        v43 = (*((unsigned __int8 *)v409 + 16) >> 2) & 1;
      }
      else
      {
        v43 = 0;
      }
LABEL_81:
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v42, v43, v411, (uint64_t)v410, (uint64_t)v409, &valuePtr);
      if (!valuePtr)
        goto LABEL_899;
      v50 = v409;
      v409 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v49);
        else
          *(_DWORD *)v50 -= 2;
      }
      v51 = v410;
      v410 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, v49);
        else
          *(_DWORD *)v51 -= 2;
      }
      v52 = v411;
      v411 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v49);
        else
          *(_DWORD *)v52 -= 2;
      }
      v53 = qword_1ECE7C4A0;
      v54 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v54)
      {
        WTF::String::utf8();
        v55 = effectiveRange.location ? effectiveRange.location + 16 : 0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v55;
        _os_log_impl(&dword_1940B8000, v53, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v54 = effectiveRange.location;
        effectiveRange.location = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 1)
            v54 = WTF::fastFree((WTF *)v54, v25);
          else
            --*(_DWORD *)v54;
        }
      }
      v3 = v390;
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      {
        while (1)
        {
          v56 = *v29;
          if ((v56 & 1) != 0)
            break;
          v57 = __ldaxr(v29);
          if (v57 == v56)
          {
            if (!__stxr(v56 | 1, v29))
            {
              v58 = WTF::Logger::observers((WTF::Logger *)v54);
              v59 = *(unsigned int *)(v58 + 12);
              if ((_DWORD)v59)
              {
                v60 = *(uint64_t **)v58;
                v61 = *(_QWORD *)v58 + 8 * v59;
                do
                {
                  v62 = *v60;
                  LODWORD(buf) = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v398);
                  LODWORD(v414) = 0;
                  WTF::String::String((WTF::String *)&v415, "found an extension cue ");
                  v416 = 1;
                  WebCore::InbandGenericCue::toJSONString(v35);
                  effectiveRange.location = 0;
                  effectiveRange.length = 0;
                  v63 = WTF::fastMalloc((WTF *)0x30);
                  LODWORD(effectiveRange.length) = 3;
                  effectiveRange.location = v63;
                  v64 = HIDWORD(effectiveRange.length);
                  *(_DWORD *)(v63 + 16 * HIDWORD(effectiveRange.length)) = buf;
                  v65 = *((_QWORD *)&buf + 1);
                  if (*((_QWORD *)&buf + 1))
                    **((_DWORD **)&buf + 1) += 2;
                  *(_QWORD *)(v63 + 16 * v64 + 8) = v65;
                  *(_DWORD *)(v63 + 16 * (v64 + 1)) = (_DWORD)v414;
                  v66 = v415;
                  if (v415)
                    *(_DWORD *)v415 += 2;
                  *(_QWORD *)(v63 + 16 * (v64 + 1) + 8) = v66;
                  *(_DWORD *)(v63 + 16 * (v64 + 2)) = v416;
                  v67 = v417;
                  if (v417)
                    *(_DWORD *)v417 += 2;
                  *(_QWORD *)(v63 + 16 * (v64 + 2) + 8) = v67;
                  HIDWORD(effectiveRange.length) = v64 + 3;
                  (*(void (**)(uint64_t, char *, uint64_t, CFRange *))(*(_QWORD *)v62 + 16))(v62, &WebCore::LogMedia, 3, &effectiveRange);
                  v68 = (WTF *)effectiveRange.location;
                  if (HIDWORD(effectiveRange.length))
                  {
                    v69 = 16 * HIDWORD(effectiveRange.length);
                    v70 = (WTF::StringImpl **)(effectiveRange.location + 8);
                    do
                    {
                      v71 = *v70;
                      *v70 = 0;
                      if (v71)
                      {
                        if (*(_DWORD *)v71 == 2)
                          WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v25);
                        else
                          *(_DWORD *)v71 -= 2;
                      }
                      v70 += 2;
                      v69 -= 16;
                    }
                    while (v69);
                    v68 = (WTF *)effectiveRange.location;
                  }
                  if (v68)
                  {
                    effectiveRange.location = 0;
                    LODWORD(effectiveRange.length) = 0;
                    WTF::fastFree(v68, v25);
                  }
                  v72 = v417;
                  v417 = 0;
                  if (v72)
                  {
                    if (*(_DWORD *)v72 == 2)
                      WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v25);
                    else
                      *(_DWORD *)v72 -= 2;
                  }
                  v73 = v415;
                  v415 = 0;
                  if (v73)
                  {
                    if (*(_DWORD *)v73 == 2)
                      WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v25);
                    else
                      *(_DWORD *)v73 -= 2;
                  }
                  v74 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                  *((_QWORD *)&buf + 1) = 0;
                  if (v74)
                  {
                    if (*(_DWORD *)v74 == 2)
                      WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v25);
                    else
                      *(_DWORD *)v74 -= 2;
                  }
                  ++v60;
                }
                while (v60 != (uint64_t *)v61);
              }
              v75 = __ldxr(v29);
              if (v75 == 1)
              {
                v3 = v390;
                v28 = v387;
                if (!__stlxr(0, v29))
                  break;
              }
              else
              {
                __clrex();
                v3 = v390;
                v28 = v387;
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v29);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v24 = (uint64_t)valuePtr;
      valuePtr = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          v24 = WTF::StringImpl::destroy((WTF::StringImpl *)v24, (WTF::StringImpl *)v25);
        else
          *(_DWORD *)v24 -= 2;
      }
LABEL_145:
      v30 = (WTF *)((char *)v30 + 8);
    }
    while (v30 != v31);
    v76 = HIDWORD(v408);
    v30 = v396;
    v77 = HIDWORD(v397) == HIDWORD(v408);
    if (HIDWORD(v397))
    {
      v78 = 0;
      v79 = 8 * HIDWORD(v397);
      do
      {
        v80 = *(_QWORD *)((char *)v30 + v78);
        *(_QWORD *)((char *)v30 + v78) = 0;
        if (v80)
        {
          if (*(_DWORD *)v80 == 1)
          {
            WebCore::GenericCueData::~GenericCueData((WebCore::GenericCueData *)(v80 + 8), v25);
            v24 = WTF::fastFree((WTF *)v80, v81);
          }
          else
          {
            --*(_DWORD *)v80;
          }
        }
        v78 += 8;
      }
      while (v79 != v78);
      v3 = v390;
    }
    if (v30)
LABEL_166:
      v24 = WTF::fastFree(v30, v25);
LABEL_167:
    v396 = v407;
    v82 = v408;
    v407 = 0;
    v408 = 0;
    v397 = __PAIR64__(v76, v82);
    if (v77)
    {
      if (*(_DWORD *)(v3 + 128) == 2)
      {
        v83 = *v387;
        v84 = *v382;
        *(_QWORD *)((char *)v83 + 37) = *(uint64_t *)((char *)v382 + 5);
        *((_QWORD *)v83 + 4) = v84;
        *((_BYTE *)*v387 + 138) = 2;
        v85 = *(_QWORD *)(v3 + 32);
        v86 = *(WTF::StringImpl **)(v3 + 40);
        *(_QWORD *)&buf = "InbandTextTrackPrivateAVF";
        *((_QWORD *)&buf + 1) = 26;
        v414 = "processAttributedStrings";
        v415 = v86;
        if (*(_BYTE *)(v85 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WebCore::InbandGenericCue>((uint64_t)&WebCore::LogMedia, (WTF::Logger::LogSiteIdentifier *)&buf, "updating cue ", *v387);
        v87 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v87 = off_1E34113A8;
        v87[1] = v387;
        *(_QWORD *)&buf = v87;
        WebCore::TrackPrivateBase::notifyMainThreadClient(v3, (uint64_t *)&buf);
        v24 = buf;
        *(_QWORD *)&buf = 0;
        if (v24)
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        goto LABEL_273;
      }
      v88 = *(_QWORD *)(v3 + 32);
      v89 = *(_QWORD *)(v3 + 40);
      v398 = (WTF::StringImpl *)"InbandTextTrackPrivateAVF";
      v399 = (WTF::StringImpl *)26;
      v400 = "processAttributedStrings";
      v401 = v89;
      if (!*(_BYTE *)(v88 + 12) || !WebCore::LogMedia || byte_1ECE7C490 < 3u)
        goto LABEL_273;
      v90 = *v387;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v398);
      WTF::String::String((WTF::String *)&v410, "ignoring cue delivered during seek ");
      WebCore::InbandGenericCue::toJSONString(v90);
      if (v411)
        v91 = *((_DWORD *)v411 + 1);
      else
        v91 = 0;
      if (v410)
      {
        v92 = *((_DWORD *)v410 + 1);
        if (v409)
          goto LABEL_184;
LABEL_282:
        v93 = 0;
      }
      else
      {
        v92 = 0;
        if (!v409)
          goto LABEL_282;
LABEL_184:
        v93 = *((_DWORD *)v409 + 1);
      }
      if ((v93 | v92) < 0
        || ((_VF = __OFADD__(v92, v93), v94 = v92 + v93, !_VF) ? (v95 = 0) : (v95 = 1),
            v91 < 0 || (v95 & 1) != 0 || (v96 = (v91 + v94), __OFADD__(v91, v94))))
      {
        valuePtr = 0;
      }
      else
      {
        if (v411 && (*((_BYTE *)v411 + 16) & 4) == 0)
        {
          v97 = 0;
          goto LABEL_199;
        }
        if (v410)
        {
          v98 = *((_DWORD *)v410 + 4);
          v97 = (v98 >> 2) & 1;
          if (v409 && (v98 & 4) != 0)
LABEL_198:
            v97 = (*((unsigned __int8 *)v409 + 16) >> 2) & 1;
        }
        else
        {
          if (v409)
            goto LABEL_198;
          v97 = 1;
        }
LABEL_199:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v96, v97, v411, (uint64_t)v410, (uint64_t)v409, &valuePtr);
        if (valuePtr)
        {
          v100 = v409;
          v409 = 0;
          if (v100)
          {
            if (*(_DWORD *)v100 == 2)
              WTF::StringImpl::destroy(v100, v99);
            else
              *(_DWORD *)v100 -= 2;
          }
          v101 = v410;
          v410 = 0;
          if (v101)
          {
            if (*(_DWORD *)v101 == 2)
              WTF::StringImpl::destroy(v101, v99);
            else
              *(_DWORD *)v101 -= 2;
          }
          v102 = v411;
          v411 = 0;
          if (v102)
          {
            if (*(_DWORD *)v102 == 2)
              WTF::StringImpl::destroy(v102, v99);
            else
              *(_DWORD *)v102 -= 2;
          }
          v103 = qword_1ECE7C4A0;
          v104 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v104)
          {
            WTF::String::utf8();
            v105 = effectiveRange.location ? effectiveRange.location + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v105;
            _os_log_impl(&dword_1940B8000, v103, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v104 = effectiveRange.location;
            effectiveRange.location = 0;
            if (v104)
            {
              if (*(_DWORD *)v104 == 1)
                v104 = WTF::fastFree((WTF *)v104, v25);
              else
                --*(_DWORD *)v104;
            }
          }
          if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
          {
            while (1)
            {
              v106 = *v29;
              if ((v106 & 1) != 0)
                break;
              v107 = __ldaxr(v29);
              if (v107 == v106)
              {
                if (!__stxr(v106 | 1, v29))
                {
                  v108 = WTF::Logger::observers((WTF::Logger *)v104);
                  v109 = *(unsigned int *)(v108 + 12);
                  if ((_DWORD)v109)
                  {
                    v110 = *(uint64_t **)v108;
                    v111 = *(_QWORD *)v108 + 8 * v109;
                    do
                    {
                      v112 = *v110;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v398);
                      LODWORD(v414) = 0;
                      WTF::String::String((WTF::String *)&v415, "ignoring cue delivered during seek ");
                      v416 = 1;
                      WebCore::InbandGenericCue::toJSONString(v90);
                      effectiveRange.location = 0;
                      effectiveRange.length = 0;
                      v113 = WTF::fastMalloc((WTF *)0x30);
                      LODWORD(effectiveRange.length) = 3;
                      effectiveRange.location = v113;
                      v114 = HIDWORD(effectiveRange.length);
                      *(_DWORD *)(v113 + 16 * HIDWORD(effectiveRange.length)) = buf;
                      v115 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *(_QWORD *)(v113 + 16 * v114 + 8) = v115;
                      *(_DWORD *)(v113 + 16 * (v114 + 1)) = (_DWORD)v414;
                      v116 = v415;
                      if (v415)
                        *(_DWORD *)v415 += 2;
                      *(_QWORD *)(v113 + 16 * (v114 + 1) + 8) = v116;
                      *(_DWORD *)(v113 + 16 * (v114 + 2)) = v416;
                      v117 = v417;
                      if (v417)
                        *(_DWORD *)v417 += 2;
                      *(_QWORD *)(v113 + 16 * (v114 + 2) + 8) = v117;
                      HIDWORD(effectiveRange.length) = v114 + 3;
                      (*(void (**)(uint64_t, char *, uint64_t, CFRange *))(*(_QWORD *)v112 + 16))(v112, &WebCore::LogMedia, 3, &effectiveRange);
                      v118 = (WTF *)effectiveRange.location;
                      if (HIDWORD(effectiveRange.length))
                      {
                        v119 = 16 * HIDWORD(effectiveRange.length);
                        v120 = (WTF::StringImpl **)(effectiveRange.location + 8);
                        do
                        {
                          v121 = *v120;
                          *v120 = 0;
                          if (v121)
                          {
                            if (*(_DWORD *)v121 == 2)
                              WTF::StringImpl::destroy(v121, (WTF::StringImpl *)v25);
                            else
                              *(_DWORD *)v121 -= 2;
                          }
                          v120 += 2;
                          v119 -= 16;
                        }
                        while (v119);
                        v118 = (WTF *)effectiveRange.location;
                      }
                      if (v118)
                      {
                        effectiveRange.location = 0;
                        LODWORD(effectiveRange.length) = 0;
                        WTF::fastFree(v118, v25);
                      }
                      v122 = v417;
                      v417 = 0;
                      if (v122)
                      {
                        if (*(_DWORD *)v122 == 2)
                          WTF::StringImpl::destroy(v122, (WTF::StringImpl *)v25);
                        else
                          *(_DWORD *)v122 -= 2;
                      }
                      v123 = v415;
                      v415 = 0;
                      if (v123)
                      {
                        if (*(_DWORD *)v123 == 2)
                          WTF::StringImpl::destroy(v123, (WTF::StringImpl *)v25);
                        else
                          *(_DWORD *)v123 -= 2;
                      }
                      v124 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v124)
                      {
                        if (*(_DWORD *)v124 == 2)
                          WTF::StringImpl::destroy(v124, (WTF::StringImpl *)v25);
                        else
                          *(_DWORD *)v124 -= 2;
                      }
                      ++v110;
                    }
                    while (v110 != (uint64_t *)v111);
                  }
                  v125 = __ldxr(v29);
                  if (v125 == 1)
                  {
                    if (!__stlxr(0, v29))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v29);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v24 = (uint64_t)valuePtr;
          valuePtr = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              v24 = WTF::StringImpl::destroy((WTF::StringImpl *)v24, (WTF::StringImpl *)v25);
            else
              *(_DWORD *)v24 -= 2;
          }
          v126 = v407;
          if (HIDWORD(v408))
          {
            v127 = 8 * HIDWORD(v408);
            v128 = v407;
            do
            {
              v129 = *(_QWORD *)v128;
              *(_QWORD *)v128 = 0;
              if (v129)
              {
                if (*(_DWORD *)v129 == 1)
                {
                  WebCore::GenericCueData::~GenericCueData((WebCore::GenericCueData *)(v129 + 8), v25);
                  v24 = WTF::fastFree((WTF *)v129, v130);
                }
                else
                {
                  --*(_DWORD *)v129;
                }
              }
              v128 = (WTF::StringImpl *)((char *)v128 + 8);
              v127 -= 8;
            }
            while (v127);
          }
          v3 = v390;
          if (v126)
          {
            v407 = 0;
            v24 = WTF::fastFree(v126, v25);
          }
          goto LABEL_273;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x1961E5AC0);
    }
LABEL_273:
    v28 = v387 + 1;
  }
  while (v387 + 1 != v384);
LABEL_422:
  v193 = (unsigned __int8 *)(v3 + 12);
  if (__ldaxr((unsigned __int8 *)(v3 + 12)))
  {
    __clrex();
    goto LABEL_425;
  }
  if (__stxr(1u, v193))
LABEL_425:
    v24 = MEMORY[0x19AEA534C](v3 + 12);
  v195 = *(_DWORD *)(v3 + 28);
  v196 = __ldxr(v193);
  if (v196 == 1)
  {
    if (!__stlxr(0, v193))
    {
      if (v195)
        goto LABEL_429;
LABEL_449:
      LODWORD(v197) = *(_DWORD *)(v3 + 116);
LABEL_450:
      v3 = v390;
      if (!(_DWORD)v197)
        goto LABEL_451;
      goto LABEL_452;
    }
  }
  else
  {
    __clrex();
  }
  v24 = WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 12));
  if (!v195)
    goto LABEL_449;
LABEL_429:
  v197 = *(unsigned int *)(v3 + 116);
  if ((_DWORD)v197)
  {
    v198 = -8 * v197;
    v199 = *(unsigned int *)(v3 + 116);
    do
    {
      v200 = v199 - 1;
      if (v199 - 1 >= (unint64_t)v197)
      {
        __break(0xC471u);
        JUMPOUT(0x1961E5AB4);
      }
      v201 = *(_QWORD *)(v390 + 104);
      v202 = v201 + 8 * v199;
      if (*(_BYTE *)(*(_QWORD *)(v202 - 8) + 138) == 2)
      {
        v203 = *(_QWORD *)(v390 + 32);
        v204 = *(WTF::StringImpl **)(v390 + 40);
        *(_QWORD *)&buf = "InbandTextTrackPrivateAVF";
        *((_QWORD *)&buf + 1) = 26;
        v414 = "removeCompletedCues";
        v415 = v204;
        if (*(_BYTE *)(v203 + 12))
        {
          if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
          {
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WebCore::InbandGenericCue>((uint64_t)&WebCore::LogMedia, (WTF::Logger::LogSiteIdentifier *)&buf, "removing cue ", *(WebCore::InbandGenericCue **)(v202 - 8));
            v201 = *(_QWORD *)(v390 + 104);
          }
        }
        v206 = (_QWORD *)(v201 + 8 * v199);
        v207 = *(v206 - 1);
        *(v206 - 1) = 0;
        if (v207)
        {
          if (*(_DWORD *)v207 == 1)
          {
            WebCore::GenericCueData::~GenericCueData((WebCore::GenericCueData *)(v207 + 8), v25);
            WTF::fastFree((WTF *)v207, v208);
          }
          else
          {
            --*(_DWORD *)v207;
          }
        }
        v24 = (uint64_t)memmove(v206 - 1, v206, v198 + *(_QWORD *)(v390 + 104) + 8 * *(unsigned int *)(v390 + 116) - v201);
        LODWORD(v197) = *(_DWORD *)(v390 + 116) - 1;
        *(_DWORD *)(v390 + 116) = v197;
      }
      v198 += 8;
      v199 = v200;
    }
    while ((unint64_t)(v200 + 1) > 1);
    goto LABEL_450;
  }
LABEL_451:
  *(_DWORD *)(v3 + 128) = 0;
LABEL_452:
  v209 = WTF::MediaTime::zeroTime((WTF::MediaTime *)v24);
  v210 = *(_QWORD *)(v209 + 5);
  *(_QWORD *)v381 = *(_QWORD *)v209;
  *(_QWORD *)(v381 + 5) = v210;
  this = WTF::MediaTime::zeroTime((WTF::MediaTime *)v209);
  v211 = *(_QWORD *)(this + 5);
  *v382 = *(_QWORD *)this;
  *(uint64_t *)((char *)v382 + 5) = v211;
LABEL_453:
  v212 = HIDWORD(v397);
  v213 = v396;
  if (!HIDWORD(v397))
    goto LABEL_580;
  v214 = *(_QWORD *)a3;
  *(_QWORD *)(v3 + 77) = *(_QWORD *)((char *)a3 + 5);
  *(_QWORD *)(v3 + 72) = v214;
  v392 = (char *)v213 + 8 * v212;
  v215 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  while (2)
  {
    v216 = *(WebCore::InbandGenericCue **)v213;
    v217 = *(unsigned int *)(v3 + 116);
    if ((_DWORD)v217 == *(_DWORD *)(v3 + 112))
    {
      v218 = v217 + (v217 >> 2);
      if (v218 >= 0x10)
        v219 = v218 + 1;
      else
        v219 = 16;
      if (v219 <= v217 + 1)
        v220 = v217 + 1;
      else
        v220 = v219;
      if (v220 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1961E5AACLL);
      }
      v221 = v3;
      v222 = *(void **)(v3 + 104);
      v223 = (void *)WTF::fastMalloc((WTF *)(8 * v220));
      *(_DWORD *)(v221 + 112) = v220;
      *(_QWORD *)(v221 + 104) = v223;
      memcpy(v223, v222, 8 * v217);
      if (v222)
      {
        if (*(void **)(v221 + 104) == v222)
        {
          *(_QWORD *)(v390 + 104) = 0;
          *(_DWORD *)(v390 + 112) = 0;
        }
        WTF::fastFree((WTF *)v222, v224);
        v221 = v390;
      }
      v217 = *(unsigned int *)(v221 + 116);
      v225 = (WebCore::InbandGenericCue **)(*(_QWORD *)(v221 + 104) + 8 * v217);
      v3 = v221;
    }
    else
    {
      v225 = (WebCore::InbandGenericCue **)(*(_QWORD *)(v3 + 104) + 8 * v217);
    }
    ++*(_DWORD *)v216;
    *v225 = v216;
    *(_DWORD *)(v3 + 116) = v217 + 1;
    v226 = *(_QWORD *)(v3 + 32);
    v227 = *(_QWORD *)(v3 + 40);
    v398 = (WTF::StringImpl *)"InbandTextTrackPrivateAVF";
    v399 = (WTF::StringImpl *)26;
    v400 = "processAttributedStrings";
    v401 = v227;
    if (*(_BYTE *)(v226 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    {
      v228 = *(WebCore::InbandGenericCue **)v213;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v398);
      WTF::String::String((WTF::String *)&v411, "adding cue ");
      WebCore::InbandGenericCue::toJSONString(v228);
      if (valuePtr)
        v229 = *((_DWORD *)valuePtr + 1);
      else
        v229 = 0;
      if (v411)
      {
        v230 = *((_DWORD *)v411 + 1);
        if (v410)
          goto LABEL_476;
LABEL_566:
        v231 = 0;
      }
      else
      {
        v230 = 0;
        if (!v410)
          goto LABEL_566;
LABEL_476:
        v231 = *((_DWORD *)v410 + 1);
      }
      if ((v231 | v230) < 0
        || ((_VF = __OFADD__(v230, v231), v232 = v230 + v231, !_VF) ? (v233 = 0) : (v233 = 1),
            v229 < 0 || (v233 & 1) != 0 || (v234 = (v229 + v232), __OFADD__(v229, v232))))
      {
        v407 = 0;
LABEL_907:
        __break(0xC471u);
        JUMPOUT(0x1961E5A9CLL);
      }
      if (valuePtr && (*((_BYTE *)valuePtr + 16) & 4) == 0)
      {
        v235 = 0;
        goto LABEL_491;
      }
      if (v411)
      {
        v236 = *((_DWORD *)v411 + 4);
        v235 = (v236 >> 2) & 1;
        if (v410 && (v236 & 4) != 0)
LABEL_490:
          v235 = (*((unsigned __int8 *)v410 + 16) >> 2) & 1;
      }
      else
      {
        if (v410)
          goto LABEL_490;
        v235 = 1;
      }
LABEL_491:
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v234, v235, valuePtr, (uint64_t)v411, (uint64_t)v410, &v407);
      if (!v407)
        goto LABEL_907;
      v238 = v410;
      v410 = 0;
      if (v238)
      {
        if (*(_DWORD *)v238 == 2)
          WTF::StringImpl::destroy(v238, v237);
        else
          *(_DWORD *)v238 -= 2;
      }
      v239 = v411;
      v411 = 0;
      if (v239)
      {
        if (*(_DWORD *)v239 == 2)
          WTF::StringImpl::destroy(v239, v237);
        else
          *(_DWORD *)v239 -= 2;
      }
      v240 = valuePtr;
      valuePtr = 0;
      if (v240)
      {
        if (*(_DWORD *)v240 == 2)
          WTF::StringImpl::destroy(v240, v237);
        else
          *(_DWORD *)v240 -= 2;
      }
      v241 = qword_1ECE7C4A0;
      v242 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v242)
      {
        WTF::String::utf8();
        v244 = effectiveRange.location ? effectiveRange.location + 16 : 0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v244;
        _os_log_impl(&dword_1940B8000, v241, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v242 = effectiveRange.location;
        effectiveRange.location = 0;
        if (v242)
        {
          if (*(_DWORD *)v242 == 1)
            v242 = WTF::fastFree((WTF *)v242, v243);
          else
            --*(_DWORD *)v242;
        }
      }
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      {
        while (1)
        {
          v245 = *v215;
          if ((v245 & 1) != 0)
            break;
          v246 = __ldaxr(v215);
          if (v246 == v245)
          {
            if (!__stxr(v245 | 1, v215))
            {
              v247 = WTF::Logger::observers((WTF::Logger *)v242);
              v248 = *(unsigned int *)(v247 + 12);
              if ((_DWORD)v248)
              {
                v249 = *(uint64_t **)v247;
                v250 = *(_QWORD *)v247 + 8 * v248;
                do
                {
                  v251 = *v249;
                  LODWORD(buf) = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v398);
                  LODWORD(v414) = 0;
                  WTF::String::String((WTF::String *)&v415, "adding cue ");
                  v416 = 1;
                  WebCore::InbandGenericCue::toJSONString(v228);
                  effectiveRange.location = 0;
                  effectiveRange.length = 0;
                  v252 = WTF::fastMalloc((WTF *)0x30);
                  LODWORD(effectiveRange.length) = 3;
                  effectiveRange.location = v252;
                  v253 = HIDWORD(effectiveRange.length);
                  *(_DWORD *)(v252 + 16 * HIDWORD(effectiveRange.length)) = buf;
                  v254 = *((_QWORD *)&buf + 1);
                  if (*((_QWORD *)&buf + 1))
                    **((_DWORD **)&buf + 1) += 2;
                  *(_QWORD *)(v252 + 16 * v253 + 8) = v254;
                  *(_DWORD *)(v252 + 16 * (v253 + 1)) = (_DWORD)v414;
                  v255 = v415;
                  if (v415)
                    *(_DWORD *)v415 += 2;
                  *(_QWORD *)(v252 + 16 * (v253 + 1) + 8) = v255;
                  *(_DWORD *)(v252 + 16 * (v253 + 2)) = v416;
                  v256 = v417;
                  if (v417)
                    *(_DWORD *)v417 += 2;
                  *(_QWORD *)(v252 + 16 * (v253 + 2) + 8) = v256;
                  HIDWORD(effectiveRange.length) = v253 + 3;
                  (*(void (**)(uint64_t, char *, uint64_t, CFRange *))(*(_QWORD *)v251 + 16))(v251, &WebCore::LogMedia, 3, &effectiveRange);
                  v257 = (WTF *)effectiveRange.location;
                  if (HIDWORD(effectiveRange.length))
                  {
                    v258 = 16 * HIDWORD(effectiveRange.length);
                    v259 = (WTF::StringImpl **)(effectiveRange.location + 8);
                    do
                    {
                      v260 = *v259;
                      *v259 = 0;
                      if (v260)
                      {
                        if (*(_DWORD *)v260 == 2)
                          WTF::StringImpl::destroy(v260, (WTF::StringImpl *)v243);
                        else
                          *(_DWORD *)v260 -= 2;
                      }
                      v259 += 2;
                      v258 -= 16;
                    }
                    while (v258);
                    v257 = (WTF *)effectiveRange.location;
                  }
                  if (v257)
                  {
                    effectiveRange.location = 0;
                    LODWORD(effectiveRange.length) = 0;
                    WTF::fastFree(v257, v243);
                  }
                  v261 = v417;
                  v417 = 0;
                  if (v261)
                  {
                    if (*(_DWORD *)v261 == 2)
                      WTF::StringImpl::destroy(v261, (WTF::StringImpl *)v243);
                    else
                      *(_DWORD *)v261 -= 2;
                  }
                  v262 = v415;
                  v415 = 0;
                  if (v262)
                  {
                    if (*(_DWORD *)v262 == 2)
                      WTF::StringImpl::destroy(v262, (WTF::StringImpl *)v243);
                    else
                      *(_DWORD *)v262 -= 2;
                  }
                  v263 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                  *((_QWORD *)&buf + 1) = 0;
                  if (v263)
                  {
                    if (*(_DWORD *)v263 == 2)
                      WTF::StringImpl::destroy(v263, (WTF::StringImpl *)v243);
                    else
                      *(_DWORD *)v263 -= 2;
                  }
                  ++v249;
                }
                while (v249 != (uint64_t *)v250);
              }
              v264 = __ldxr(v215);
              if (v264 == 1)
              {
                if (!__stlxr(0, v215))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v215);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v265 = v407;
      v407 = 0;
      v3 = v390;
      if (v265)
      {
        if (*(_DWORD *)v265 == 2)
          WTF::StringImpl::destroy(v265, (WTF::StringImpl *)v243);
        else
          *(_DWORD *)v265 -= 2;
      }
    }
    v266 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v266 = off_1E34113D0;
    v266[1] = v213;
    *(_QWORD *)&buf = v266;
    WebCore::TrackPrivateBase::notifyMainThreadClient(v3, (uint64_t *)&buf);
    this = buf;
    *(_QWORD *)&buf = 0;
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    v213 = (WTF *)((char *)v213 + 8);
    if (v213 != (WTF *)v392)
      continue;
    break;
  }
  v267 = HIDWORD(v397);
  v213 = v396;
  if (*(_BYTE *)(v3 + 137))
    v268 = 1;
  else
    v268 = 2;
  *(_DWORD *)(v3 + 128) = v268;
  if ((_DWORD)v267)
  {
    v269 = 0;
    v270 = 8 * v267;
    do
    {
      v271 = *(_QWORD *)((char *)v213 + v269);
      *(_QWORD *)((char *)v213 + v269) = 0;
      if (v271)
      {
        if (*(_DWORD *)v271 == 1)
        {
          WebCore::GenericCueData::~GenericCueData((WebCore::GenericCueData *)(v271 + 8), theArray);
          this = WTF::fastFree((WTF *)v271, v272);
        }
        else
        {
          --*(_DWORD *)v271;
        }
      }
      v269 += 8;
    }
    while (v270 != v269);
  }
LABEL_580:
  if (v213)
    return WTF::fastFree(v213, theArray);
  return this;
}

uint64_t WebCore::InbandTextTrackPrivateAVF::disconnect(uint64_t this)
{
  *(_QWORD *)(this + 120) = 0;
  *(_DWORD *)(this + 132) = 0;
  return this;
}

uint64_t WebCore::InbandTextTrackPrivateAVF::resetCueValues(WebCore::InbandTextTrackPrivateAVF *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  char v12;
  int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  WTF::StringImpl *v44;
  _QWORD *v45;
  void *v46;
  WTF::MediaTime *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[4];
  WTF::Logger *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  __int128 buf;
  int v64;
  WTF::StringImpl *v65;
  int v66;
  WTF::StringImpl *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)((char *)this + 88);
  if (WTF::MediaTime::operator BOOL())
  {
    if (*((_DWORD *)this + 29))
    {
      v3 = *((_QWORD *)this + 4);
      v4 = *((_QWORD *)this + 5);
      v56[0] = "InbandTextTrackPrivateAVF";
      v56[1] = 26;
      v56[2] = "resetCueValues";
      v56[3] = v4;
      if (*(_BYTE *)(v3 + 12))
      {
        if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        {
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v56);
          WTF::String::String((WTF::String *)&v60, "flushing data for cues: start = ");
          result = WTF::MediaTime::toJSONString((WebCore::InbandTextTrackPrivateAVF *)((char *)this + 72));
          if (v61)
          {
            v7 = *((_DWORD *)v61 + 1);
            if (v60)
              goto LABEL_11;
          }
          else
          {
            v7 = 0;
            if (v60)
            {
LABEL_11:
              v8 = *((_DWORD *)v60 + 1);
              if (v59)
              {
LABEL_12:
                v9 = *((_DWORD *)v59 + 1);
LABEL_13:
                if ((v9 | v8) < 0
                  || ((v10 = __OFADD__(v8, v9), v11 = v8 + v9, !v10) ? (v12 = 0) : (v12 = 1),
                      v7 < 0 || (v12 & 1) != 0 || (result = (v7 + v11), __OFADD__(v7, v11))))
                {
                  v62 = 0;
                  goto LABEL_114;
                }
                if (v61 && (*((_BYTE *)v61 + 16) & 4) == 0)
                {
                  v13 = 0;
                  goto LABEL_27;
                }
                if (v60)
                {
                  v14 = *((_DWORD *)v60 + 4);
                  v13 = (v14 >> 2) & 1;
                  if (v59 && (v14 & 4) != 0)
                    goto LABEL_26;
                }
                else
                {
                  if (v59)
                  {
LABEL_26:
                    v13 = (*((unsigned __int8 *)v59 + 16) >> 2) & 1;
                    goto LABEL_27;
                  }
                  v13 = 1;
                }
LABEL_27:
                result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, v61, (uint64_t)v60, (uint64_t)v59, &v62);
                if (v62)
                {
                  v16 = v59;
                  v59 = 0;
                  if (v16)
                  {
                    if (*(_DWORD *)v16 == 2)
                      WTF::StringImpl::destroy(v16, v15);
                    else
                      *(_DWORD *)v16 -= 2;
                  }
                  v17 = v60;
                  v60 = 0;
                  if (v17)
                  {
                    if (*(_DWORD *)v17 == 2)
                      WTF::StringImpl::destroy(v17, v15);
                    else
                      *(_DWORD *)v17 -= 2;
                  }
                  v18 = v61;
                  v61 = 0;
                  if (v18)
                  {
                    if (*(_DWORD *)v18 == 2)
                      WTF::StringImpl::destroy(v18, v15);
                    else
                      *(_DWORD *)v18 -= 2;
                  }
                  v19 = qword_1ECE7C4A0;
                  v20 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                  if ((_DWORD)v20)
                  {
                    WTF::String::utf8();
                    v22 = v57 ? (char *)v57 + 16 : 0;
                    LODWORD(buf) = 136446210;
                    *(_QWORD *)((char *)&buf + 4) = v22;
                    _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                    v20 = (uint64_t)v57;
                    v57 = 0;
                    if (v20)
                    {
                      if (*(_DWORD *)v20 == 1)
                        v20 = WTF::fastFree((WTF *)v20, v21);
                      else
                        --*(_DWORD *)v20;
                    }
                  }
                  if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
                  {
                    v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                    while (1)
                    {
                      v24 = *v23;
                      if ((v24 & 1) != 0)
                        break;
                      v25 = __ldaxr(v23);
                      if (v25 == v24)
                      {
                        if (!__stxr(v24 | 1, v23))
                        {
                          v26 = WTF::Logger::observers((WTF::Logger *)v20);
                          v27 = *(unsigned int *)(v26 + 12);
                          if ((_DWORD)v27)
                          {
                            v28 = *(uint64_t **)v26;
                            v29 = *(_QWORD *)v26 + 8 * v27;
                            do
                            {
                              v30 = *v28;
                              LODWORD(buf) = 0;
                              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v56);
                              v64 = 0;
                              WTF::String::String((WTF::String *)&v65, "flushing data for cues: start = ");
                              v66 = 1;
                              WTF::MediaTime::toJSONString((WebCore::InbandTextTrackPrivateAVF *)((char *)this + 72));
                              v57 = 0;
                              v58 = 0;
                              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                              LODWORD(v58) = 3;
                              v57 = v31;
                              v32 = HIDWORD(v58);
                              *((_DWORD *)v31 + 4 * HIDWORD(v58)) = buf;
                              v33 = *((_QWORD *)&buf + 1);
                              if (*((_QWORD *)&buf + 1))
                                **((_DWORD **)&buf + 1) += 2;
                              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
                              *((_DWORD *)v31 + 4 * (v32 + 1)) = v64;
                              v34 = v65;
                              if (v65)
                                *(_DWORD *)v65 += 2;
                              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
                              *((_DWORD *)v31 + 4 * (v32 + 2)) = v66;
                              v35 = v67;
                              if (v67)
                                *(_DWORD *)v67 += 2;
                              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
                              HIDWORD(v58) = v32 + 3;
                              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, &WebCore::LogMedia, 3, &v57);
                              v36 = v57;
                              if (HIDWORD(v58))
                              {
                                v37 = 16 * HIDWORD(v58);
                                v38 = (WTF::StringImpl **)((char *)v57 + 8);
                                do
                                {
                                  v39 = *v38;
                                  *v38 = 0;
                                  if (v39)
                                  {
                                    if (*(_DWORD *)v39 == 2)
                                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v21);
                                    else
                                      *(_DWORD *)v39 -= 2;
                                  }
                                  v38 += 2;
                                  v37 -= 16;
                                }
                                while (v37);
                                v36 = v57;
                              }
                              if (v36)
                              {
                                v57 = 0;
                                LODWORD(v58) = 0;
                                WTF::fastFree(v36, v21);
                              }
                              v40 = v67;
                              v67 = 0;
                              if (v40)
                              {
                                if (*(_DWORD *)v40 == 2)
                                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v21);
                                else
                                  *(_DWORD *)v40 -= 2;
                              }
                              v41 = v65;
                              v65 = 0;
                              if (v41)
                              {
                                if (*(_DWORD *)v41 == 2)
                                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v21);
                                else
                                  *(_DWORD *)v41 -= 2;
                              }
                              v42 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                              *((_QWORD *)&buf + 1) = 0;
                              if (v42)
                              {
                                if (*(_DWORD *)v42 == 2)
                                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v21);
                                else
                                  *(_DWORD *)v42 -= 2;
                              }
                              ++v28;
                            }
                            while (v28 != (uint64_t *)v29);
                          }
                          v43 = __ldxr(v23);
                          if (v43 == 1)
                          {
                            if (!__stlxr(0, v23))
                              break;
                          }
                          else
                          {
                            __clrex();
                          }
                          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                          break;
                        }
                      }
                      else
                      {
                        __clrex();
                      }
                    }
                  }
                  v44 = v62;
                  v62 = 0;
                  if (v44)
                  {
                    if (*(_DWORD *)v44 == 2)
                      WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v21);
                    else
                      *(_DWORD *)v44 -= 2;
                  }
                  goto LABEL_92;
                }
LABEL_114:
                __break(0xC471u);
                return result;
              }
LABEL_110:
              v9 = 0;
              goto LABEL_13;
            }
          }
          v8 = 0;
          if (v59)
            goto LABEL_12;
          goto LABEL_110;
        }
      }
    }
  }
LABEL_92:
  v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v45 = off_1E34113F8;
  v45[1] = this;
  *(_QWORD *)&buf = v45;
  WebCore::TrackPrivateBase::notifyMainThreadClient((uint64_t)this, (uint64_t *)&buf);
  v47 = (WTF::MediaTime *)buf;
  *(_QWORD *)&buf = 0;
  if (v47)
    v47 = (WTF::MediaTime *)(*(uint64_t (**)(WTF::MediaTime *))(*(_QWORD *)v47 + 8))(v47);
  v48 = *((unsigned int *)this + 29);
  if ((_DWORD)v48)
  {
    v49 = (uint64_t *)*((_QWORD *)this + 13);
    v50 = 8 * v48;
    do
    {
      v51 = *v49;
      *v49 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 1)
        {
          WebCore::GenericCueData::~GenericCueData((WebCore::GenericCueData *)(v51 + 8), v46);
          v47 = (WTF::MediaTime *)WTF::fastFree((WTF *)v51, v52);
        }
        else
        {
          --*(_DWORD *)v51;
        }
      }
      ++v49;
      v50 -= 8;
    }
    while (v50);
  }
  *((_DWORD *)this + 29) = 0;
  *((_DWORD *)this + 32) = 0;
  v53 = WTF::MediaTime::zeroTime(v47);
  v54 = *(_QWORD *)(v53 + 5);
  *((_QWORD *)this + 9) = *(_QWORD *)v53;
  *(_QWORD *)((char *)this + 77) = v54;
  result = WTF::MediaTime::zeroTime((WTF::MediaTime *)v53);
  v55 = *(_QWORD *)(result + 5);
  *v2 = *(_QWORD *)result;
  *(_QWORD *)((char *)v2 + 5) = v55;
  return result;
}

_QWORD *WebCore::InbandTextTrackPrivateAVF::setMode(_QWORD *result, int a2)
{
  _QWORD *v3;

  if (result[15])
  {
    v3 = result;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 128))(result);
    *((_BYTE *)v3 + 49) = a2;
    if ((_DWORD)result != a2)
      return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[15] + 16))(v3[15]);
  }
  return result;
}

uint64_t WebCore::InbandTextTrackPrivateAVF::readNativeSampleBuffer(uint64_t a1, CFArrayRef theArray, opaqueCMSampleBuffer *idx, _QWORD **a4, uint64_t a5, _QWORD *a6)
{
  uint64_t result;
  CMSampleTimingInfo *v12;
  PAL *v13;
  opaqueCMSampleBuffer *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  int v30;
  char v31;
  char v32;
  BOOL v33;
  int v34;
  char v35;
  BOOL v36;
  uint64_t v37;
  PAL *v38;
  OpaqueCMBlockBuffer *v39;
  unint64_t DataLength;
  void *v41;
  WTF::String *v42;
  unint64_t v43;
  size_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  _QWORD *v52;
  _QWORD *v53;
  opaqueCMSampleBuffer *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  WTF::Logger *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::Logger *v66;
  uint64_t v67;
  WTF::StringImpl **v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  BOOL v81;
  int v82;
  char v83;
  uint64_t v84;
  int v85;
  WTF::StringImpl *v86;
  unsigned int v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  NSObject *v92;
  uint64_t v93;
  char *v94;
  unsigned __int8 *v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  WTF::Logger *v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::Logger *v108;
  uint64_t v109;
  WTF::StringImpl **v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  int v115;
  uint64_t v116;
  void *v117;
  WTF *v118;
  WTF *v119;
  uint64_t v120;
  _DWORD v121[3];
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::Logger *v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  __int128 buf;
  int v140;
  WTF::StringImpl *v141;
  int v142;
  WTF::StringImpl *v143;
  int v144;
  WTF::StringImpl *v145;
  int v146;
  WTF::StringImpl *v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)CFArrayGetValueAtIndex(theArray, (CFIndex)idx);
  if (!result)
    return result;
  v13 = (PAL *)result;
  v121[0] = PAL::softLinkCoreMediaCMSampleBufferGetSampleTimingInfo((PAL *)result, idx, (uint64_t)&v125, v12);
  if (v121[0])
  {
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)&v121[1] = "InbandTextTrackPrivateAVF";
    v122 = 26;
    v123 = "readNativeSampleBuffer";
    v124 = v16;
    if (!*(_BYTE *)(v15 + 12))
      return 0;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v121[1]);
    WTF::String::String((WTF::String *)&v131, "CMSampleBufferGetSampleTimingInfo returned error ");
    WTF::String::number((WTF::String *)v121[0]);
    WTF::String::String((WTF::String *)&v129, "' for sample ");
    WTF::String::number(idx);
    *(_QWORD *)&buf = v132;
    v133 = v131;
    v137 = v129;
    v138 = v130;
    v136 = v128;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v133, (uint64_t *)&v138, (uint64_t *)&v137, (uint64_t *)&v136, &v135);
    if (!v135)
    {
      __break(0xC471u);
      JUMPOUT(0x1961E6DCCLL);
    }
    v18 = v128;
    v128 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v129;
    v129 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v17);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v130;
    v130 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v17);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v131;
    v131 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v17);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v132;
    v132 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v17);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = qword_1ECE7C4A0;
    v24 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v24)
    {
      WTF::String::utf8();
      v26 = v133 ? (char *)v133 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v26;
      _os_log_impl(&dword_1940B8000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v24 = (uint64_t)v133;
      v133 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 1)
          v24 = WTF::fastFree((WTF *)v24, v25);
        else
          --*(_DWORD *)v24;
      }
    }
    if (WebCore::LogMedia && byte_1ECE7C490)
    {
      v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v28 = *v27;
        if ((v28 & 1) != 0)
          break;
        v29 = __ldaxr(v27);
        if (v29 == v28)
        {
          if (!__stxr(v28 | 1, v27))
          {
            v55 = WTF::Logger::observers((WTF::Logger *)v24);
            v56 = *(unsigned int *)(v55 + 12);
            if ((_DWORD)v56)
            {
              v57 = *(uint64_t **)v55;
              v120 = *(_QWORD *)v55 + 8 * v56;
              do
              {
                v58 = *v57;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v121[1]);
                v140 = 0;
                WTF::String::String((WTF::String *)&v141, "CMSampleBufferGetSampleTimingInfo returned error ");
                v142 = 0;
                WTF::String::number((WTF::String *)v121[0]);
                v144 = 0;
                WTF::String::String((WTF::String *)&v145, "' for sample ");
                v146 = 0;
                WTF::String::number(idx);
                v133 = 0;
                v134 = 0;
                v59 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                LODWORD(v134) = 5;
                v133 = v59;
                v60 = HIDWORD(v134);
                *((_DWORD *)v59 + 4 * HIDWORD(v134)) = buf;
                v61 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v59 + 2 * v60 + 1) = v61;
                *((_DWORD *)v59 + 4 * (v60 + 1)) = v140;
                v62 = v141;
                if (v141)
                  *(_DWORD *)v141 += 2;
                *((_QWORD *)v59 + 2 * (v60 + 1) + 1) = v62;
                *((_DWORD *)v59 + 4 * (v60 + 2)) = v142;
                v63 = v143;
                if (v143)
                  *(_DWORD *)v143 += 2;
                *((_QWORD *)v59 + 2 * (v60 + 2) + 1) = v63;
                *((_DWORD *)v59 + 4 * (v60 + 3)) = v144;
                v64 = v145;
                if (v145)
                  *(_DWORD *)v145 += 2;
                *((_QWORD *)v59 + 2 * (v60 + 3) + 1) = v64;
                *((_DWORD *)v59 + 4 * (v60 + 4)) = v146;
                v65 = v147;
                if (v147)
                  *(_DWORD *)v147 += 2;
                *((_QWORD *)v59 + 2 * (v60 + 4) + 1) = v65;
                HIDWORD(v134) = v60 + 5;
                (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v58 + 16))(v58, &WebCore::LogMedia, 1, &v133);
                v66 = v133;
                if (HIDWORD(v134))
                {
                  v67 = 16 * HIDWORD(v134);
                  v68 = (WTF::StringImpl **)((char *)v133 + 8);
                  do
                  {
                    v69 = *v68;
                    *v68 = 0;
                    if (v69)
                    {
                      if (*(_DWORD *)v69 == 2)
                        WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v25);
                      else
                        *(_DWORD *)v69 -= 2;
                    }
                    v68 += 2;
                    v67 -= 16;
                  }
                  while (v67);
                  v66 = v133;
                }
                if (v66)
                {
                  v133 = 0;
                  LODWORD(v134) = 0;
                  WTF::fastFree(v66, v25);
                }
                v70 = v147;
                v147 = 0;
                if (v70)
                {
                  if (*(_DWORD *)v70 == 2)
                    WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v25);
                  else
                    *(_DWORD *)v70 -= 2;
                }
                v71 = v145;
                v145 = 0;
                if (v71)
                {
                  if (*(_DWORD *)v71 == 2)
                    WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v25);
                  else
                    *(_DWORD *)v71 -= 2;
                }
                v72 = v143;
                v143 = 0;
                if (v72)
                {
                  if (*(_DWORD *)v72 == 2)
                    WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v25);
                  else
                    *(_DWORD *)v72 -= 2;
                }
                v73 = v141;
                v141 = 0;
                if (v73)
                {
                  if (*(_DWORD *)v73 == 2)
                    WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v25);
                  else
                    *(_DWORD *)v73 -= 2;
                }
                v74 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v74)
                {
                  if (*(_DWORD *)v74 == 2)
                    WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v25);
                  else
                    *(_DWORD *)v74 -= 2;
                }
                ++v57;
              }
              while (v57 != (uint64_t *)v120);
            }
            v75 = __ldxr(v27);
            if (v75 == 1)
            {
              if (!__stlxr(0, v27))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v86 = v135;
    v135 = 0;
    if (!v86)
      return 0;
    goto LABEL_213;
  }
  v30 = v126;
  v31 = v127 & 1;
  if ((~v127 & 3) == 0)
    v31 = v127 & 1 | 2;
  if ((~v127 & 5) == 0)
    v31 |= 4u;
  if ((~v127 & 9) == 0)
    v31 |= 8u;
  if ((~v127 & 0x11) != 0)
    v32 = v31;
  else
    v32 = v31 | 0x10;
  v33 = (v32 & 1) != 0 && v126 == 0;
  v34 = !v33;
  if (v125 >= 0)
    v35 = 5;
  else
    v35 = 9;
  v36 = v34 == 0;
  if (v34)
  {
    v37 = v125;
  }
  else
  {
    v32 = v35;
    v37 = v125 >> 63;
  }
  if (v36)
    v30 = 1;
  *(_QWORD *)a5 = v37;
  *(_DWORD *)(a5 + 8) = v30;
  *(_BYTE *)(a5 + 12) = v32;
  v38 = (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetDataBuffer[0](v13, v14);
  DataLength = PAL::softLinkCoreMediaCMBlockBufferGetDataLength(v38, v39);
  v42 = (WTF::String *)DataLength;
  if (DataLength <= 7)
  {
    v76 = *(_QWORD *)(a1 + 32);
    v77 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)&v121[1] = "InbandTextTrackPrivateAVF";
    v122 = 26;
    v123 = "readNativeSampleBuffer";
    v124 = v77;
    if (!*(_BYTE *)(v76 + 12))
      return 0;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v121[1]);
    WTF::String::String((WTF::String *)&v136, "CMSampleBuffer size length unexpectedly small ");
    WTF::String::number(v42);
    if (v137)
    {
      v78 = *((_DWORD *)v137 + 1);
      if (v136)
        goto LABEL_125;
    }
    else
    {
      v78 = 0;
      if (v136)
      {
LABEL_125:
        v79 = *((_DWORD *)v136 + 1);
        if (v135)
        {
LABEL_126:
          v80 = *((_DWORD *)v135 + 1);
LABEL_127:
          if ((v80 | v79) < 0
            || ((v81 = __OFADD__(v79, v80), v82 = v79 + v80, !v81) ? (v83 = 0) : (v83 = 1),
                v78 < 0 || (v83 & 1) != 0 || (v84 = (v78 + v82), __OFADD__(v78, v82))))
          {
            v138 = 0;
LABEL_239:
            __break(0xC471u);
            goto LABEL_242;
          }
          if (v137 && (*((_BYTE *)v137 + 16) & 4) == 0)
          {
            v85 = 0;
            goto LABEL_145;
          }
          if (v136)
          {
            v87 = *((_DWORD *)v136 + 4);
            v85 = (v87 >> 2) & 1;
            if (v135 && (v87 & 4) != 0)
              goto LABEL_144;
          }
          else
          {
            if (v135)
            {
LABEL_144:
              v85 = (*((unsigned __int8 *)v135 + 16) >> 2) & 1;
              goto LABEL_145;
            }
            v85 = 1;
          }
LABEL_145:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v84, v85, v137, (uint64_t)v136, (uint64_t)v135, &v138);
          if (v138)
          {
            v89 = v135;
            v135 = 0;
            if (v89)
            {
              if (*(_DWORD *)v89 == 2)
                WTF::StringImpl::destroy(v89, v88);
              else
                *(_DWORD *)v89 -= 2;
            }
            v90 = v136;
            v136 = 0;
            if (v90)
            {
              if (*(_DWORD *)v90 == 2)
                WTF::StringImpl::destroy(v90, v88);
              else
                *(_DWORD *)v90 -= 2;
            }
            v91 = v137;
            v137 = 0;
            if (v91)
            {
              if (*(_DWORD *)v91 == 2)
                WTF::StringImpl::destroy(v91, v88);
              else
                *(_DWORD *)v91 -= 2;
            }
            v92 = qword_1ECE7C4A0;
            v93 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v93)
            {
              WTF::String::utf8();
              v94 = v133 ? (char *)v133 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v94;
              _os_log_impl(&dword_1940B8000, v92, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v93 = (uint64_t)v133;
              v133 = 0;
              if (v93)
              {
                if (*(_DWORD *)v93 == 1)
                  v93 = WTF::fastFree((WTF *)v93, v25);
                else
                  --*(_DWORD *)v93;
              }
            }
            if (WebCore::LogMedia && byte_1ECE7C490)
            {
              v95 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v96 = *v95;
                if ((v96 & 1) != 0)
                  break;
                v97 = __ldaxr(v95);
                if (v97 == v96)
                {
                  if (!__stxr(v96 | 1, v95))
                  {
                    v98 = WTF::Logger::observers((WTF::Logger *)v93);
                    v99 = *(unsigned int *)(v98 + 12);
                    if ((_DWORD)v99)
                    {
                      v100 = *(uint64_t **)v98;
                      v101 = *(_QWORD *)v98 + 8 * v99;
                      do
                      {
                        v102 = *v100;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v121[1]);
                        v140 = 0;
                        WTF::String::String((WTF::String *)&v141, "CMSampleBuffer size length unexpectedly small ");
                        v142 = 0;
                        WTF::String::number(v42);
                        v133 = 0;
                        v134 = 0;
                        v103 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v134) = 3;
                        v133 = v103;
                        v104 = HIDWORD(v134);
                        *((_DWORD *)v103 + 4 * HIDWORD(v134)) = buf;
                        v105 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v103 + 2 * v104 + 1) = v105;
                        *((_DWORD *)v103 + 4 * (v104 + 1)) = v140;
                        v106 = v141;
                        if (v141)
                          *(_DWORD *)v141 += 2;
                        *((_QWORD *)v103 + 2 * (v104 + 1) + 1) = v106;
                        *((_DWORD *)v103 + 4 * (v104 + 2)) = v142;
                        v107 = v143;
                        if (v143)
                          *(_DWORD *)v143 += 2;
                        *((_QWORD *)v103 + 2 * (v104 + 2) + 1) = v107;
                        HIDWORD(v134) = v104 + 3;
                        (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v102 + 16))(v102, &WebCore::LogMedia, 1, &v133);
                        v108 = v133;
                        if (HIDWORD(v134))
                        {
                          v109 = 16 * HIDWORD(v134);
                          v110 = (WTF::StringImpl **)((char *)v133 + 8);
                          do
                          {
                            v111 = *v110;
                            *v110 = 0;
                            if (v111)
                            {
                              if (*(_DWORD *)v111 == 2)
                                WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v25);
                              else
                                *(_DWORD *)v111 -= 2;
                            }
                            v110 += 2;
                            v109 -= 16;
                          }
                          while (v109);
                          v108 = v133;
                        }
                        if (v108)
                        {
                          v133 = 0;
                          LODWORD(v134) = 0;
                          WTF::fastFree(v108, v25);
                        }
                        v112 = v143;
                        v143 = 0;
                        if (v112)
                        {
                          if (*(_DWORD *)v112 == 2)
                            WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v25);
                          else
                            *(_DWORD *)v112 -= 2;
                        }
                        v113 = v141;
                        v141 = 0;
                        if (v113)
                        {
                          if (*(_DWORD *)v113 == 2)
                            WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v25);
                          else
                            *(_DWORD *)v113 -= 2;
                        }
                        v114 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v114)
                        {
                          if (*(_DWORD *)v114 == 2)
                            WTF::StringImpl::destroy(v114, (WTF::StringImpl *)v25);
                          else
                            *(_DWORD *)v114 -= 2;
                        }
                        ++v100;
                      }
                      while (v100 != (uint64_t *)v101);
                    }
                    v115 = __ldxr(v95);
                    if (v115 == 1)
                    {
                      if (!__stlxr(0, v95))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v86 = v138;
            v138 = 0;
            if (!v86)
              return 0;
LABEL_213:
            if (*(_DWORD *)v86 == 2)
              WTF::StringImpl::destroy(v86, (WTF::StringImpl *)v25);
            else
              *(_DWORD *)v86 -= 2;
            return 0;
          }
          goto LABEL_239;
        }
LABEL_225:
        v80 = 0;
        goto LABEL_127;
      }
    }
    v79 = 0;
    if (v135)
      goto LABEL_126;
    goto LABEL_225;
  }
  v43 = *(unsigned int *)(a1 + 64);
  v44 = *(unsigned int *)(a1 + 68);
  v45 = DataLength + v44;
  if (DataLength + v44 > v43)
  {
    v46 = v43 + (v43 >> 2);
    if (v46 >= 0x10)
      v47 = v46 + 1;
    else
      v47 = 16;
    if (v47 <= v45)
      v48 = DataLength + v44;
    else
      v48 = v47;
    if (!HIDWORD(v48))
    {
      v49 = *(void **)(a1 + 56);
      v50 = (void *)WTF::fastMalloc((WTF *)v48);
      *(_DWORD *)(a1 + 64) = v48;
      *(_QWORD *)(a1 + 56) = v50;
      memcpy(v50, v49, v44);
      if (v49)
      {
        if (*(void **)(a1 + 56) == v49)
        {
          *(_QWORD *)(a1 + 56) = 0;
          *(_DWORD *)(a1 + 64) = 0;
        }
        WTF::fastFree((WTF *)v49, v51);
      }
      goto LABEL_72;
    }
    __break(0xC471u);
LABEL_242:
    JUMPOUT(0x1961E6DC4);
  }
LABEL_72:
  *(_DWORD *)(a1 + 68) = v45;
  PAL::softLinkCoreMediaCMBlockBufferCopyDataBytes(v38, 0, (unint64_t)v42, *(_QWORD *)(a1 + 56) + v45 - (_QWORD)v42, v41);
  JSC::ArrayBuffer::create();
  v52 = (_QWORD *)buf;
  *(_QWORD *)&buf = 0;
  v53 = *a4;
  *a4 = v52;
  if (v53)
  {
    v33 = *(_DWORD *)v53 == 2;
    *(_DWORD *)v53 -= 2;
    if (v33)
    {
      v116 = v53[10];
      if (v116)
      {
        *(_QWORD *)(v116 + 8) = 3;
        v53[10] = 0;
      }
      if ((v53[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v53 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v53 + 2));
      v118 = (WTF *)v53[1];
      if ((v118 & 1) == 0 && v118)
      {
        v119 = *(WTF **)v118;
        if (*(_QWORD *)v118)
        {
          *(_QWORD *)v118 = 0;
          *((_DWORD *)v118 + 2) = 0;
          WTF::fastFree(v119, v117);
        }
        WTF::fastFree(v118, v117);
      }
      WTF::fastFree((WTF *)v53, v117);
    }
  }
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&buf);
  *a6 = PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(v13, v54);
  return 1;
}

WebCore::MediaPlayerPrivateAVFoundation *WebCore::MediaPlayerPrivateAVFoundation::MediaPlayerPrivateAVFoundation(WebCore::MediaPlayerPrivateAVFoundation *this, WebCore::MediaPlayer *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  WTF::MediaTime *v12;
  WTF::MediaTime *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[4];

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_19689B170;
  *(_QWORD *)(v4 + 24) = this;
  *((_QWORD *)this + 6) = v4;
  *((_BYTE *)this + 24) = 0;
  *(_QWORD *)this = off_1E340D798;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_OWORD *)this + 2) = *(_OWORD *)WTF::MediaTime::invalidTime((WTF::MediaTime *)v4);
  *(_QWORD *)this = off_1E34104C0;
  *((_QWORD *)this + 7) = &unk_1E3410B58;
  *((_QWORD *)this + 8) = &unk_1E3410B80;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  if (!a2 || (v5 = *(_QWORD *)a2) == 0)
  {
    v7 = 0;
    goto LABEL_15;
  }
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
LABEL_7:
    MEMORY[0x19AEA534C](v5);
    goto LABEL_8;
  }
  if (__stxr(1u, (unsigned __int8 *)v5))
    goto LABEL_7;
LABEL_8:
  if (*(_QWORD *)(v5 + 24))
  {
    ++*(_QWORD *)(v5 + 16);
    v7 = v5;
  }
  else
  {
    v7 = 0;
  }
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
      goto LABEL_15;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_15:
  *((_QWORD *)this + 11) = v7;
  *((_QWORD *)this + 12) = a2;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 30) = 10000000;
  *((_BYTE *)this + 124) = 1;
  *((_BYTE *)this + 128) = 0;
  *((_QWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_WORD *)this + 84) = 0;
  WTF::URL::invalidate((WebCore::MediaPlayerPrivateAVFoundation *)((char *)this + 176));
  *((_QWORD *)this + 27) = 0;
  WTF::URL::invalidate((WebCore::MediaPlayerPrivateAVFoundation *)((char *)this + 216));
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_BYTE *)this + 272) = 2;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 1) + 8) + 672))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8));
  v10 = (unsigned int *)(v9 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *((_QWORD *)this + 35) = v9;
  v12 = (WTF::MediaTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 1) + 8) + 664))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8));
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 36) = v12;
  *((_DWORD *)this + 78) = 10000000;
  *((_BYTE *)this + 316) = 1;
  *((_QWORD *)this + 40) = 0;
  *((_DWORD *)this + 82) = 10000000;
  *((_BYTE *)this + 332) = 1;
  *((_QWORD *)this + 42) = 0;
  *((_DWORD *)this + 86) = 10000000;
  *((_BYTE *)this + 348) = 1;
  v13 = (WTF::MediaTime *)WTF::MediaTime::invalidTime(v12);
  *((_OWORD *)this + 22) = *(_OWORD *)v13;
  *((_OWORD *)this + 23) = *(_OWORD *)WTF::MediaTime::invalidTime(v13);
  *(_QWORD *)((char *)this + 391) = 0;
  *((_QWORD *)this + 48) = 0;
  *(_WORD *)((char *)this + 399) = 1;
  *((_BYTE *)this + 401) = 0;
  v14 = *((_QWORD *)this + 35);
  v15 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1392))(this);
  v16 = *((_QWORD *)this + 36);
  v19[0] = v15;
  v19[1] = v17;
  v19[2] = "MediaPlayerPrivateAVFoundation";
  v19[3] = v16;
  if (*(_BYTE *)(v14 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v19);
  return this;
}

char *WebCore::MediaPlayerPrivateAVFoundation::logChannel(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  return &WebCore::LogMedia;
}

void WebCore::MediaPlayerPrivateAVFoundation::~MediaPlayerPrivateAVFoundation(WebCore::MediaPlayerPrivateAVFoundation *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  unint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int **v39;
  unsigned int **v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  WTF *v46;
  int v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  _QWORD v54[4];

  *(_QWORD *)this = off_1E34104C0;
  *((_QWORD *)this + 7) = &unk_1E3410B58;
  *((_QWORD *)this + 8) = &unk_1E3410B80;
  v3 = *((_QWORD *)this + 35);
  v4 = *((_QWORD *)this + 36);
  v54[0] = "MediaPlayerPrivateAVFoundation";
  v54[1] = 31;
  v54[2] = "~MediaPlayerPrivateAVFoundation";
  v54[3] = v4;
  if (*(_BYTE *)(v3 + 12) && (WebCore::LogMedia ? (v5 = byte_1ECE7C490 > 2u) : (v5 = 0), v5))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v54);
    v3 = *((_QWORD *)this + 35);
    *((_BYTE *)this + 396) = 1;
    *((_QWORD *)this + 35) = 0;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *((_BYTE *)this + 396) = 1;
    *((_QWORD *)this + 35) = 0;
  }
  v6 = (unsigned int *)(v3 + 8);
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, (unsigned int *)(v3 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
LABEL_12:
  v9 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v48 = *(WTF::StringImpl **)(v9 + 48);
      *(_QWORD *)(v9 + 48) = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, a2);
        else
          *(_DWORD *)v48 -= 2;
      }
      v49 = *(WTF::StringImpl **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, a2);
        else
          *(_DWORD *)v49 -= 2;
      }
      v50 = *(unsigned int *)(v9 + 32);
      if ((_DWORD)v50 != -1)
        ((void (*)(_QWORD *, uint64_t))off_1E3411460[v50])(v54, v9 + 8);
      *(_DWORD *)(v9 + 32) = -1;
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v12 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v51 = *(WTF::StringImpl **)(v12 + 48);
      *(_QWORD *)(v12 + 48) = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, a2);
        else
          *(_DWORD *)v51 -= 2;
      }
      v52 = *(WTF::StringImpl **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, a2);
        else
          *(_DWORD *)v52 -= 2;
      }
      v53 = *(unsigned int *)(v12 + 32);
      if ((_DWORD)v53 != -1)
        ((void (*)(_QWORD *, uint64_t))off_1E3411460[v53])(v54, v12 + 8);
      *(_DWORD *)(v12 + 32) = -1;
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *((_QWORD *)this + 17);
  v18 = *((_QWORD *)this + 18);
  v19 = (WTF *)*((_QWORD *)this + 19);
  if (v17 <= v18)
  {
    if (v17 == v18)
      goto LABEL_43;
    v28 = 5 * v17;
    v29 = 40 * v18 - 8 * v28;
    v30 = (uint64_t *)((char *)v19 + 8 * v28 + 32);
    do
    {
      v31 = *v30;
      *v30 = 0;
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      v30 += 5;
      v29 -= 40;
    }
    while (v29);
  }
  else
  {
    if (v18)
    {
      v20 = 40 * v18;
      v21 = (uint64_t *)((char *)v19 + 32);
      do
      {
        v22 = *v21;
        *v21 = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        v21 += 5;
        v20 -= 40;
      }
      while (v20);
      v19 = (WTF *)*((_QWORD *)this + 19);
      v17 = *((_QWORD *)this + 17);
    }
    v23 = *((unsigned int *)this + 40);
    if (v17 != v23)
    {
      v24 = 5 * v17;
      v25 = 40 * v23 - 8 * v24;
      v26 = (uint64_t *)((char *)v19 + 8 * v24 + 32);
      do
      {
        v27 = *v26;
        *v26 = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        v26 += 5;
        v25 -= 40;
      }
      while (v25);
    }
  }
  v19 = (WTF *)*((_QWORD *)this + 19);
LABEL_43:
  if (v19)
  {
    *((_QWORD *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree(v19, a2);
  }
  v32 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v33)
  {
    if (__ldaxr((unsigned __int8 *)v33))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v33))
    {
      goto LABEL_52;
    }
    MEMORY[0x19AEA534C](v33);
LABEL_52:
    v35 = *(_QWORD *)(v33 + 16) - 1;
    *(_QWORD *)(v33 + 16) = v35;
    if (!v35)
    {
      v36 = *(_QWORD *)(v33 + 8);
      v37 = __ldxr((unsigned __int8 *)v33);
      if (v37 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v33))
        {
          if (v36)
            goto LABEL_60;
LABEL_59:
          WTF::fastFree((WTF *)v33, a2);
          goto LABEL_60;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v33);
      if (v36)
        goto LABEL_60;
      goto LABEL_59;
    }
    v47 = __ldxr((unsigned __int8 *)v33);
    if (v47 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v33))
        goto LABEL_60;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
  }
LABEL_60:
  v38 = *((unsigned int *)this + 21);
  if ((_DWORD)v38)
  {
    v39 = (unsigned int **)*((_QWORD *)this + 9);
    v40 = &v39[v38];
    do
    {
      v41 = *v39;
      *v39 = 0;
      if (v41)
      {
        v42 = v41 + 2;
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
        {
          atomic_store(1u, v41 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
        }
      }
      ++v39;
    }
    while (v39 != v40);
  }
  v45 = (WTF *)*((_QWORD *)this + 9);
  if (v45)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v45, a2);
  }
  *(_QWORD *)this = off_1E340D798;
  v46 = (WTF *)*((_QWORD *)this + 1);
  if (v46)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v46, a2);
  }
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::preferredRenderingMode(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;

  if ((*(unsigned int (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1448))(this) != 1)
  {
    if (*((_BYTE *)this + 169)
      && !(*(unsigned int (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1648))(this))
    {
      return 2;
    }
    v3 = *((_QWORD *)this + 11);
    if (!v3)
    {
      v4 = 0;
      goto LABEL_20;
    }
    v4 = *((_QWORD *)this + 12);
    if (__ldaxr((unsigned __int8 *)v3))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v3))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v3);
LABEL_12:
    if (*(_QWORD *)(v3 + 24))
      ++*(_QWORD *)(v3 + 8);
    else
      v4 = 0;
    v6 = __ldxr((unsigned __int8 *)v3);
    if (v6 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
      {
LABEL_20:
        v7 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 784))(this);
        v2 = 1;
        if (v7)
        {
          if (!v4)
            return v2;
          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 8) + 136))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8)))
            v2 = 2;
          else
            v2 = 1;
        }
        else if (!v4)
        {
          return v2;
        }
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
        return v2;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    goto LABEL_20;
  }
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::setUpVideoRendering(uint64_t this)
{
  WebCore::MediaPlayerPrivateAVFoundation *v1;
  int v2;
  WTF::String *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::Logger *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::Logger *v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[4];
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint8_t buf[4];
  _BYTE v46[12];
  int v47;
  WTF::StringImpl *v48;
  uint64_t v49;

  v1 = (WebCore::MediaPlayerPrivateAVFoundation *)this;
  v49 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(this + 392) || *(_BYTE *)(this + 394)) && *(_BYTE *)(this + 169) && *(_BYTE *)(this + 390))
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 88))(this)
       ? 2
       : (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)v1 + 1592))(v1);
    this = WebCore::MediaPlayerPrivateAVFoundation::preferredRenderingMode(v1);
    v3 = (WTF::String *)this;
    if (!v2 || v2 != (_DWORD)this)
    {
      v4 = *((_QWORD *)v1 + 35);
      this = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)v1 + 1392))(v1);
      v5 = *((_QWORD *)v1 + 36);
      v39[0] = this;
      v39[1] = v6;
      v39[2] = "setUpVideoRendering";
      v39[3] = v5;
      if (!*(_BYTE *)(v4 + 12))
        goto LABEL_75;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v39);
      this = WTF::String::number(v3);
      if (v43)
      {
        v7 = *((_DWORD *)v43 + 1);
        if (v42)
        {
LABEL_13:
          v8 = *((_DWORD *)v42 + 1);
LABEL_14:
          if ((v8 | v7) < 0 || (this = (v7 + v8), __OFADD__(v7, v8)))
          {
            v44 = 0;
            goto LABEL_96;
          }
          if (v43)
          {
            v9 = *((_DWORD *)v43 + 4);
            v10 = (v9 >> 2) & 1;
            if (v42 && (v9 & 4) != 0)
              goto LABEL_19;
          }
          else
          {
            if (v42)
            {
LABEL_19:
              v10 = (*((unsigned __int8 *)v42 + 16) >> 2) & 1;
              goto LABEL_20;
            }
            v10 = 1;
          }
LABEL_20:
          this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, v10, (uint64_t)v43, (uint64_t)v42, &v44);
          if (v44)
          {
            v12 = v42;
            v42 = 0;
            if (v12)
            {
              if (*(_DWORD *)v12 == 2)
                WTF::StringImpl::destroy(v12, v11);
              else
                *(_DWORD *)v12 -= 2;
            }
            v13 = v43;
            v43 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2)
                WTF::StringImpl::destroy(v13, v11);
              else
                *(_DWORD *)v13 -= 2;
            }
            v14 = qword_1ECE7C4A0;
            v15 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v15)
            {
              WTF::String::utf8();
              v17 = v40 ? (char *)v40 + 16 : 0;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)v46 = v17;
              _os_log_impl(&dword_1940B8000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              v15 = (uint64_t)v40;
              v40 = 0;
              if (v15)
              {
                if (*(_DWORD *)v15 == 1)
                  v15 = WTF::fastFree((WTF *)v15, v16);
                else
                  --*(_DWORD *)v15;
              }
            }
            if (WebCore::LogMedia)
            {
              v18 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v19 = *v18;
                if ((v19 & 1) != 0)
                  break;
                v20 = __ldaxr(v18);
                if (v20 == v19)
                {
                  if (!__stxr(v19 | 1, v18))
                  {
                    v21 = WTF::Logger::observers((WTF::Logger *)v15);
                    v22 = *(unsigned int *)(v21 + 12);
                    if ((_DWORD)v22)
                    {
                      v23 = *(uint64_t **)v21;
                      v24 = *(_QWORD *)v21 + 8 * v22;
                      do
                      {
                        v25 = *v23;
                        *(_DWORD *)buf = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v39);
                        v47 = 0;
                        WTF::String::number(v3);
                        v40 = 0;
                        v41 = 0;
                        v26 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                        LODWORD(v41) = 2;
                        v40 = v26;
                        v27 = HIDWORD(v41);
                        *((_DWORD *)v26 + 4 * HIDWORD(v41)) = *(_DWORD *)buf;
                        v28 = *(_QWORD *)&v46[4];
                        if (*(_QWORD *)&v46[4])
                          **(_DWORD **)&v46[4] += 2;
                        *((_QWORD *)v26 + 2 * v27 + 1) = v28;
                        *((_DWORD *)v26 + 4 * (v27 + 1)) = v47;
                        v29 = v48;
                        if (v48)
                          *(_DWORD *)v48 += 2;
                        *((_QWORD *)v26 + 2 * (v27 + 1) + 1) = v29;
                        HIDWORD(v41) = v27 + 2;
                        (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v25 + 16))(v25, &WebCore::LogMedia, 0, &v40);
                        v30 = v40;
                        if (HIDWORD(v41))
                        {
                          v31 = 16 * HIDWORD(v41);
                          v32 = (WTF::StringImpl **)((char *)v40 + 8);
                          do
                          {
                            v33 = *v32;
                            *v32 = 0;
                            if (v33)
                            {
                              if (*(_DWORD *)v33 == 2)
                                WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v16);
                              else
                                *(_DWORD *)v33 -= 2;
                            }
                            v32 += 2;
                            v31 -= 16;
                          }
                          while (v31);
                          v30 = v40;
                        }
                        if (v30)
                        {
                          v40 = 0;
                          LODWORD(v41) = 0;
                          WTF::fastFree(v30, v16);
                        }
                        v34 = v48;
                        v48 = 0;
                        if (v34)
                        {
                          if (*(_DWORD *)v34 == 2)
                            WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v16);
                          else
                            *(_DWORD *)v34 -= 2;
                        }
                        v35 = *(WTF::StringImpl **)&v46[4];
                        *(_QWORD *)&v46[4] = 0;
                        if (v35)
                        {
                          if (*(_DWORD *)v35 == 2)
                            WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v16);
                          else
                            *(_DWORD *)v35 -= 2;
                        }
                        ++v23;
                      }
                      while (v23 != (uint64_t *)v24);
                    }
                    v36 = __ldxr(v18);
                    if (v36 == 1)
                    {
                      if (!__stlxr(0, v18))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            this = (uint64_t)v44;
            v44 = 0;
            if (this)
            {
              if (*(_DWORD *)this == 2)
              {
                this = WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v16);
                if ((_DWORD)v3)
                  goto LABEL_76;
                goto LABEL_84;
              }
              *(_DWORD *)this -= 2;
            }
LABEL_75:
            if ((_DWORD)v3)
            {
LABEL_76:
              if ((_DWORD)v3 == 1)
              {
                v37 = 195;
                v38 = 198;
              }
              else
              {
                if ((_DWORD)v3 != 2)
                {
LABEL_86:
                  if (v2 == 2 || (_DWORD)v3 == 2)
                    return WebCore::MediaPlayerPrivateAVFoundation::setNeedsRenderingModeChanged((uint64_t)v1);
                  return this;
                }
                v37 = 197;
                v38 = 196;
              }
              (*(void (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)v1 + 8 * v38))(v1);
LABEL_85:
              this = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)v1 + 8 * v37))(v1);
              goto LABEL_86;
            }
LABEL_84:
            v37 = 205;
            goto LABEL_85;
          }
LABEL_96:
          __break(0xC471u);
          return this;
        }
      }
      else
      {
        v7 = 0;
        if (v42)
          goto LABEL_13;
      }
      v8 = 0;
      goto LABEL_14;
    }
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::setNeedsRenderingModeChanged(uint64_t this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  uint64_t v14;
  uint64_t v15;
  int v17;
  _QWORD v18[4];

  if (*(_BYTE *)(this + 401))
    return this;
  v1 = (_QWORD *)this;
  *(_BYTE *)(this + 401) = 1;
  v2 = *(_QWORD *)(this + 280);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 1392))(this);
  v4 = v1[36];
  v18[0] = v3;
  v18[1] = v5;
  v18[2] = "setNeedsRenderingModeChanged";
  v18[3] = v4;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v18);
  v6 = v1[6];
  if (!v6)
  {
    v8 = 0;
    goto LABEL_16;
  }
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_9:
  if (*(_QWORD *)(v6 + 24))
  {
    ++*(_QWORD *)(v6 + 16);
    v8 = v6;
  }
  else
  {
    v8 = 0;
  }
  v9 = __ldxr((unsigned __int8 *)v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_16:
  this = WTF::fastMalloc((WTF *)0x18);
  v13 = &off_1E3411480;
  *(_QWORD *)this = &off_1E3411480;
  *(_QWORD *)(this + 8) = v8;
  *(_QWORD *)(this + 16) = v1;
  v18[0] = this;
  v14 = v1[11];
  if (!v14)
  {
    v18[0] = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13[1])(this, v10, v11, v12);
  }
  v15 = v1[12];
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_22:
  if (*(_QWORD *)(v14 + 24))
    ++*(_QWORD *)(v14 + 8);
  else
    v15 = 0;
  v17 = __ldxr((unsigned __int8 *)v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
  if (v15)
  {
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(*(_QWORD *)(v15 + 8) + 8) + 592))(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 8), v18);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v15);
  }
  this = v18[0];
  v18[0] = 0;
  if (this)
  {
    v13 = *(uint64_t (***)())this;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13[1])(this, v10, v11, v12);
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::tearDownVideoRendering(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v8[4];

  v2 = *((_QWORD *)this + 35);
  v3 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1392))(this);
  v4 = *((_QWORD *)this + 36);
  v8[0] = v3;
  v8[1] = v5;
  v8[2] = "tearDownVideoRendering";
  v8[3] = v4;
  if (*(_BYTE *)(v2 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v8);
  }
  (*(void (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1568))(this);
  result = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 88))(this);
  if (result)
    return (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1584))(this);
  return result;
}

void WebCore::MediaPlayerPrivateAVFoundation::load(WebCore::MediaPlayerPrivateAVFoundation *this, const WTF::String *a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  WebCore::MediaPlayer *v10;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  unsigned int v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33[5];
  WTF *v34;
  __int128 v35;
  __int128 v36;

  v4 = *((_QWORD *)this + 35);
  v5 = (WTF *)(*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1392))(this);
  v6 = *((_QWORD *)this + 36);
  v34 = v5;
  *(_QWORD *)&v35 = v7;
  *((_QWORD *)&v35 + 1) = "load";
  *(_QWORD *)&v36 = v6;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v34);
  if (*((_BYTE *)this + 272))
    v8 = 2;
  else
    v8 = 1;
  if (*((unsigned __int8 *)this + 168) == v8)
    goto LABEL_19;
  *((_BYTE *)this + 168) = v8;
  v9 = *((_QWORD *)this + 11);
  if (!v9)
    goto LABEL_19;
  v10 = (WebCore::MediaPlayer *)*((_QWORD *)this + 12);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
LABEL_11:
    MEMORY[0x19AEA534C](v9);
    goto LABEL_12;
  }
  if (__stxr(1u, (unsigned __int8 *)v9))
    goto LABEL_11;
LABEL_12:
  if (*(_QWORD *)(v9 + 24))
    ++*(_QWORD *)(v9 + 8);
  else
    v10 = 0;
  v12 = __ldxr((unsigned __int8 *)v9);
  if (v12 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v9))
    {
      if (!v10)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
  if (v10)
  {
LABEL_18:
    WebCore::MediaPlayer::networkStateChanged(v10);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v10);
  }
LABEL_19:
  WebCore::MediaPlayerPrivateAVFoundation::setReadyState((unsigned __int8 *)this, 0);
  v33[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v33);
  MEMORY[0x19AEA52F8](&v34, v33, a2, 0);
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  v15 = v34;
  v34 = 0;
  *((_QWORD *)this + 22) = v15;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v13);
      v16 = v34;
    }
    else
    {
      v16 = 0;
      *(_DWORD *)v14 -= 2;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = v35;
  *(_OWORD *)((char *)this + 184) = v35;
  LODWORD(v35) = v17 & 0xFFFFFFFE;
  *(_OWORD *)((char *)this + 200) = v36;
  v34 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  v18 = v33[0];
  v33[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v13);
    else
      *(_DWORD *)v18 -= 2;
  }
  WebCore::SecurityOrigin::create((WebCore::MediaPlayerPrivateAVFoundation *)((char *)this + 176), (uint64_t *)&v34);
  v20 = v34;
  v34 = 0;
  v21 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = v20;
  if (v21)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v21));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v21);
      v27 = *(WTF::StringImpl **)(v21 + 48);
      *(_QWORD *)(v21 + 48) = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v19);
        else
          *(_DWORD *)v27 -= 2;
      }
      v28 = *(WTF::StringImpl **)(v21 + 40);
      *(_QWORD *)(v21 + 40) = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v19);
        else
          *(_DWORD *)v28 -= 2;
      }
      v29 = *(unsigned int *)(v21 + 32);
      if ((_DWORD)v29 != -1)
        ((void (*)(WTF::StringImpl **, uint64_t))off_1E3411460[v29])(v33, v21 + 8);
      *(_DWORD *)(v21 + 32) = -1;
      WTF::fastFree((WTF *)v21, v19);
    }
    v24 = v34;
    v34 = 0;
    if (v24)
    {
      do
      {
        v25 = __ldaxr((unsigned int *)v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, (unsigned int *)v24));
      if (!v26)
      {
        atomic_store(1u, (unsigned int *)v24);
        v30 = (WTF::StringImpl *)*((_QWORD *)v24 + 6);
        *((_QWORD *)v24 + 6) = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v19);
          else
            *(_DWORD *)v30 -= 2;
        }
        v31 = (WTF::StringImpl *)*((_QWORD *)v24 + 5);
        *((_QWORD *)v24 + 5) = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v19);
          else
            *(_DWORD *)v31 -= 2;
        }
        v32 = *((unsigned int *)v24 + 8);
        if ((_DWORD)v32 != -1)
          ((void (*)(WTF::StringImpl **, char *))off_1E3411460[v32])(v33, (char *)v24 + 8);
        *((_DWORD *)v24 + 8) = -1;
        WTF::fastFree(v24, v19);
      }
    }
  }
  if (*(_QWORD *)a2)
  {
    if (*(_DWORD *)(*(_QWORD *)a2 + 4))
      (*(void (**)(WebCore::MediaPlayerPrivateAVFoundation *, _QWORD))(*(_QWORD *)this + 704))(this, *((unsigned __int8 *)this + 272));
  }
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundation::setReadyState(unsigned __int8 *result, int a2)
{
  int v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  char v8;
  WTF::MediaTime *v9;
  WTF::MediaTime *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[3];

  v2 = result[169];
  if (v2 != a2)
  {
    v3 = result;
    result[169] = a2;
    v4 = *((_QWORD *)result + 11);
    if (!v4)
    {
      v5 = 0;
      goto LABEL_21;
    }
    v5 = *((_QWORD *)result + 12);
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_9;
    }
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v4);
LABEL_9:
    if (*(_QWORD *)(v4 + 24))
      ++*(_QWORD *)(v4 + 8);
    else
      v5 = 0;
    v7 = __ldxr((unsigned __int8 *)v4);
    if (v7 != 1)
      goto LABEL_19;
    if (__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_20;
    if (v5)
    {
      while (1)
      {
        result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 8) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8));
        v8 = *(_BYTE *)(v5 + 192);
        if (!v8)
          break;
        result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 72) + 560))(*(_QWORD *)(v5 + 72));
        if ((_DWORD)result != 1)
          goto LABEL_29;
        if (*(_BYTE *)(v5 + 192))
        {
          *(_BYTE *)(v5 + 192) = 0;
          v13[0] = *(_OWORD *)(v5 + 176);
          v9 = (WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)result);
          v13[1] = *(_OWORD *)v9;
          v10 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v9);
          v13[2] = *(_OWORD *)v10;
          v11 = *(_QWORD *)(v5 + 72);
          v12 = WTF::MediaTime::invalidTime(v10);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 384))(v11, v12);
          result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _OWORD *))(**(_QWORD **)(v5 + 72) + 400))(*(_QWORD *)(v5 + 72), v13);
LABEL_29:
          v8 = 0;
          if (!v2)
            goto LABEL_23;
          goto LABEL_30;
        }
        __break(1u);
LABEL_19:
        __clrex();
LABEL_20:
        result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
        if (!v5)
          goto LABEL_21;
      }
LABEL_22:
      if (!v2)
      {
LABEL_23:
        if (*((float *)v3 + 74) > 0.0)
        {
          if (*((float *)v3 + 75) <= 0.0)
            v8 = 1;
          if ((v8 & 1) == 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 8) + 8) + 104))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8));
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v5);
          }
        }
      }
LABEL_30:
      if (!v5)
        return result;
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v5);
    }
LABEL_21:
    v8 = 1;
    goto LABEL_22;
  }
  return result;
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundation::load(unsigned __int8 *this, const WTF::URL *a2, const WebCore::ContentType *a3, WebCore::MediaSourcePrivateClient *a4)
{
  uint64_t v4;
  WebCore::MediaPlayer *v5;
  int v7;

  if (this[168] == 4)
    return this;
  this[168] = 4;
  v4 = *((_QWORD *)this + 11);
  if (!v4)
    return this;
  v5 = (WebCore::MediaPlayer *)*((_QWORD *)this + 12);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_6:
    this = (unsigned __int8 *)MEMORY[0x19AEA534C](v4, a2, a3, a4);
    goto LABEL_7;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_6;
LABEL_7:
  if (*(_QWORD *)(v4 + 24))
    ++*(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v5)
        return this;
      goto LABEL_13;
    }
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v5)
  {
LABEL_13:
    WebCore::MediaPlayer::networkStateChanged(v5);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v5);
  }
  return this;
}

WTF::StringImpl *WebCore::MediaPlayerPrivateAVFoundation::playabilityKnown(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *result;
  _QWORD v8[4];

  v2 = *((_QWORD *)this + 35);
  v3 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1392))(this);
  v4 = *((_QWORD *)this + 36);
  v8[0] = v3;
  v8[1] = v5;
  v8[2] = "playabilityKnown";
  v8[3] = v4;
  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1448))(this);
  if (*(_BYTE *)(v2 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20],BOOL>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v8, "metadata loaded = ");
  }
  if (!*((_BYTE *)this + 389))
  {
    result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1448))(this);
    if ((int)result <= 2)
    {
      *((_BYTE *)this + 391) = 1;
      return (WTF::StringImpl *)(*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1544))(this);
    }
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::prepareToPlay(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v2 = *((_QWORD *)this + 35);
  v3 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1392))(this);
  v4 = *((_QWORD *)this + 36);
  v7[0] = v3;
  v7[1] = v5;
  v7[2] = "prepareToPlay";
  v7[3] = v4;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v7);
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *, uint64_t))(*(_QWORD *)this + 704))(this, 2);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::play(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v2 = *((_QWORD *)this + 35);
  v3 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1392))(this);
  v4 = *((_QWORD *)this + 36);
  v7[0] = v3;
  v7[1] = v5;
  v7[2] = "play";
  v7[3] = v4;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v7);
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1472))(this);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::pause(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v2 = *((_QWORD *)this + 35);
  v3 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1392))(this);
  v4 = *((_QWORD *)this + 36);
  v7[0] = v3;
  v7[1] = v5;
  v7[2] = "pause";
  v7[3] = v4;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v7);
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1480))(this);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::duration(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  __int128 v6;

  if ((*((_BYTE *)this + 364) & 1) != 0)
    return *((_QWORD *)this + 44);
  *(_QWORD *)&v6 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1536))(this);
  *((_QWORD *)&v6 + 1) = v2;
  v3 = WTF::MediaTime::operator!();
  if ((v3 & 1) == 0 && (BYTE12(v6) & 1) != 0)
  {
    v4 = (char *)this + 352;
    *((_QWORD *)this + 44) = v6;
    *(_QWORD *)((char *)this + 357) = *(_QWORD *)((char *)&v6 + 5);
  }
  else
  {
    v4 = (char *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v3);
  }
  return *(_QWORD *)v4;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::seekToTarget(uint64_t this, const WebCore::SeekTarget *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  char v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  char v24;
  int v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  NSObject *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::Logger *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::Logger *v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  _QWORD v57[4];
  _OWORD v58[3];
  WTF::Logger *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint8_t buf[16];
  WTF::StringImpl *v66[2];
  WTF::StringImpl *v67[2];
  uint64_t v68;

  v3 = (_QWORD *)this;
  v68 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(this + 400))
  {
    *(_BYTE *)(this + 400) = 1;
    if (!*(_BYTE *)(this + 169))
      return this;
    v10 = *((_OWORD *)a2 + 1);
    v58[0] = *(_OWORD *)a2;
    v58[1] = v10;
    v58[2] = *((_OWORD *)a2 + 2);
    *(_QWORD *)buf = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 336))(this);
    *(_QWORD *)&buf[8] = v11;
    if (WTF::MediaTime::compare(a2, (const WTF::MediaTime *)buf) == 1)
    {
      *(_QWORD *)&v58[0] = (*(uint64_t (**)(_QWORD *))(*v3 + 336))(v3);
      DWORD2(v58[0]) = v12;
      BYTE12(v58[0]) = v13;
    }
    if ((*(uint64_t (**)(_QWORD *))(*v3 + 1376))(v3))
    {
      v14 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v3 + 1376))(v3);
      (*(void (**)(_BYTE *))(*(_QWORD *)v14 + 216))(v14);
      v14[137] = 1;
    }
    v15 = v3[35];
    v16 = (*(uint64_t (**)(_QWORD *))(*v3 + 1392))(v3);
    v17 = v3[36];
    v57[0] = v16;
    v57[1] = v18;
    v57[2] = "seekToTarget";
    v57[3] = v17;
    if (!*(_BYTE *)(v15 + 12))
      goto LABEL_94;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v57);
    WTF::String::String((WTF::String *)&v62, "seeking to ");
    this = WTF::MediaTime::toJSONString((WTF::MediaTime *)v58);
    if (v63)
    {
      v19 = *((_DWORD *)v63 + 1);
      if (v62)
        goto LABEL_14;
    }
    else
    {
      v19 = 0;
      if (v62)
      {
LABEL_14:
        v20 = *((_DWORD *)v62 + 1);
        if (v61)
        {
LABEL_15:
          v21 = *((_DWORD *)v61 + 1);
LABEL_16:
          if ((v21 | v20) < 0
            || ((v22 = __OFADD__(v20, v21), v23 = v20 + v21, !v22) ? (v24 = 0) : (v24 = 1),
                v19 < 0 || (v24 & 1) != 0 || (this = (v19 + v23), __OFADD__(v19, v23))))
          {
            v64 = 0;
            goto LABEL_107;
          }
          if (v63 && (*((_BYTE *)v63 + 16) & 4) == 0)
          {
            v25 = 0;
            goto LABEL_30;
          }
          if (v62)
          {
            v26 = *((_DWORD *)v62 + 4);
            v25 = (v26 >> 2) & 1;
            if (v61 && (v26 & 4) != 0)
              goto LABEL_29;
          }
          else
          {
            if (v61)
            {
LABEL_29:
              v25 = (*((unsigned __int8 *)v61 + 16) >> 2) & 1;
              goto LABEL_30;
            }
            v25 = 1;
          }
LABEL_30:
          this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, v25, v63, (uint64_t)v62, (uint64_t)v61, &v64);
          if (v64)
          {
            v28 = v61;
            v61 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, v27);
              else
                *(_DWORD *)v28 -= 2;
            }
            v29 = v62;
            v62 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, v27);
              else
                *(_DWORD *)v29 -= 2;
            }
            v30 = v63;
            v63 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v27);
              else
                *(_DWORD *)v30 -= 2;
            }
            v31 = qword_1ECE7C4A0;
            v32 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v32)
            {
              WTF::String::utf8();
              v34 = v59 ? (char *)v59 + 16 : 0;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = v34;
              _os_log_impl(&dword_1940B8000, v31, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              v32 = (uint64_t)v59;
              v59 = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 1)
                  v32 = WTF::fastFree((WTF *)v32, v33);
                else
                  --*(_DWORD *)v32;
              }
            }
            if (WebCore::LogMedia)
            {
              v35 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v36 = *v35;
                if ((v36 & 1) != 0)
                  break;
                v37 = __ldaxr(v35);
                if (v37 == v36)
                {
                  if (!__stxr(v36 | 1, v35))
                  {
                    v38 = WTF::Logger::observers((WTF::Logger *)v32);
                    v39 = *(unsigned int *)(v38 + 12);
                    if ((_DWORD)v39)
                    {
                      v40 = *(uint64_t **)v38;
                      v41 = *(_QWORD *)v38 + 8 * v39;
                      do
                      {
                        v42 = *v40;
                        *(_DWORD *)buf = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v57);
                        LODWORD(v66[0]) = 0;
                        WTF::String::String((WTF::String *)&v66[1], "seeking to ");
                        LODWORD(v67[0]) = 1;
                        WTF::MediaTime::toJSONString((WTF::MediaTime *)v58);
                        v59 = 0;
                        v60 = 0;
                        v43 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v60) = 3;
                        v59 = v43;
                        v44 = HIDWORD(v60);
                        *((_DWORD *)v43 + 4 * HIDWORD(v60)) = *(_DWORD *)buf;
                        v45 = *(_QWORD *)&buf[8];
                        if (*(_QWORD *)&buf[8])
                          **(_DWORD **)&buf[8] += 2;
                        *((_QWORD *)v43 + 2 * v44 + 1) = v45;
                        *((_DWORD *)v43 + 4 * (v44 + 1)) = v66[0];
                        v46 = v66[1];
                        if (v66[1])
                          *(_DWORD *)v66[1] += 2;
                        *((_QWORD *)v43 + 2 * (v44 + 1) + 1) = v46;
                        *((_DWORD *)v43 + 4 * (v44 + 2)) = v67[0];
                        v47 = v67[1];
                        if (v67[1])
                          *(_DWORD *)v67[1] += 2;
                        *((_QWORD *)v43 + 2 * (v44 + 2) + 1) = v47;
                        HIDWORD(v60) = v44 + 3;
                        (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v42 + 16))(v42, &WebCore::LogMedia, 0, &v59);
                        v48 = v59;
                        if (HIDWORD(v60))
                        {
                          v49 = 16 * HIDWORD(v60);
                          v50 = (WTF::StringImpl **)((char *)v59 + 8);
                          do
                          {
                            v51 = *v50;
                            *v50 = 0;
                            if (v51)
                            {
                              if (*(_DWORD *)v51 == 2)
                                WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v33);
                              else
                                *(_DWORD *)v51 -= 2;
                            }
                            v50 += 2;
                            v49 -= 16;
                          }
                          while (v49);
                          v48 = v59;
                        }
                        if (v48)
                        {
                          v59 = 0;
                          LODWORD(v60) = 0;
                          WTF::fastFree(v48, v33);
                        }
                        v52 = v67[1];
                        v67[1] = 0;
                        if (v52)
                        {
                          if (*(_DWORD *)v52 == 2)
                            WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v33);
                          else
                            *(_DWORD *)v52 -= 2;
                        }
                        v53 = v66[1];
                        v66[1] = 0;
                        if (v53)
                        {
                          if (*(_DWORD *)v53 == 2)
                            WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v33);
                          else
                            *(_DWORD *)v53 -= 2;
                        }
                        v54 = *(WTF::StringImpl **)&buf[8];
                        *(_QWORD *)&buf[8] = 0;
                        if (v54)
                        {
                          if (*(_DWORD *)v54 == 2)
                            WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v33);
                          else
                            *(_DWORD *)v54 -= 2;
                        }
                        ++v40;
                      }
                      while (v40 != (uint64_t *)v41);
                    }
                    v55 = __ldxr(v35);
                    if (v55 == 1)
                    {
                      if (!__stlxr(0, v35))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v56 = v64;
            v64 = 0;
            if (v56)
            {
              if (*(_DWORD *)v56 == 2)
                WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v33);
              else
                *(_DWORD *)v56 -= 2;
            }
LABEL_94:
            v3[14] = *(_QWORD *)&v58[0];
            *(_QWORD *)((char *)v3 + 117) = *(_QWORD *)((char *)v58 + 5);
            return (*(uint64_t (**)(_QWORD *, _OWORD *))(*v3 + 1496))(v3, v58);
          }
LABEL_107:
          __break(0xC471u);
          return this;
        }
LABEL_103:
        v21 = 0;
        goto LABEL_16;
      }
    }
    v20 = 0;
    if (v61)
      goto LABEL_15;
    goto LABEL_103;
  }
  v4 = *(_QWORD *)(this + 280);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 1392))(this);
  v6 = (WTF::StringImpl *)v3[36];
  *(_QWORD *)buf = v5;
  *(_QWORD *)&buf[8] = v7;
  v66[0] = (WTF::StringImpl *)"seekToTarget";
  v66[1] = v6;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)buf, "saving pending seek");
  v8 = *((_OWORD *)a2 + 1);
  *(_OWORD *)buf = *(_OWORD *)a2;
  *(_OWORD *)v66 = v8;
  *(_OWORD *)v67 = *((_OWORD *)a2 + 2);
  v9 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v9 = off_1E34114A8;
  *(_QWORD *)(v9 + 8) = v3;
  *(_OWORD *)(v9 + 16) = *(_OWORD *)buf;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)v66;
  *(_OWORD *)(v9 + 48) = *(_OWORD *)v67;
  this = v3[13];
  v3[13] = v9;
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::paused(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  if (*((_BYTE *)this + 169))
    return (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1488))(this);
  else
    return 1;
}

BOOL WebCore::MediaPlayerPrivateAVFoundation::seeking(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  return *((_BYTE *)this + 169) && *((_BYTE *)this + 400) != 0;
}

float WebCore::MediaPlayerPrivateAVFoundation::naturalSize(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  if (*((_BYTE *)this + 169))
    return *((float *)this + 74);
  else
    return 0.0;
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundation::setNaturalSize(unsigned __int8 *result, float a2, float a3)
{
  float v3;
  float v4;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  float v16;
  float v17;
  float v18;
  float v19;
  _QWORD v20[4];

  v3 = *((float *)result + 74);
  v4 = *((float *)result + 75);
  *((float *)result + 74) = a2;
  *((float *)result + 75) = a3;
  if (v3 != a2 || v4 != a3)
  {
    v8 = result;
    v9 = *((_QWORD *)result + 35);
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 1392))(result);
    v10 = *((_QWORD *)v8 + 36);
    v20[0] = result;
    v20[1] = v11;
    v20[2] = "setNaturalSize";
    v20[3] = v10;
    v18 = v4;
    v19 = v3;
    v16 = a3;
    v17 = a2;
    if (*(_BYTE *)(v9 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [5],float,char [4],float,char [6],float,char [4],float>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v20, "was ", &v19, " x ", &v18, ", is ", &v17, " x ", &v16);
    v12 = *((_QWORD *)v8 + 11);
    if (v12)
    {
      v13 = *((_QWORD *)v8 + 12);
      if (__ldaxr((unsigned __int8 *)v12))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v12))
      {
        goto LABEL_14;
      }
      result = (unsigned __int8 *)MEMORY[0x19AEA534C](v12);
LABEL_14:
      if (*(_QWORD *)(v12 + 24))
        ++*(_QWORD *)(v12 + 8);
      else
        v13 = 0;
      v15 = __ldxr((unsigned __int8 *)v12);
      if (v15 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v12))
        {
LABEL_22:
          if (v13)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v13 + 8) + 8) + 104))(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 8));
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v13);
          }
          return result;
        }
      }
      else
      {
        __clrex();
      }
      result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
      goto LABEL_22;
    }
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::buffered(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1504))(this);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::maxTimeSeekable(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  char *v2;
  int v3;
  char v4;

  if (*((_BYTE *)this + 169))
  {
    v2 = (char *)this + 320;
    if (WTF::MediaTime::operator!())
    {
      *((_QWORD *)this + 40) = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1512))(this);
      *((_DWORD *)this + 82) = v3;
      *((_BYTE *)this + 332) = v4;
    }
  }
  else
  {
    v2 = (char *)WTF::MediaTime::zeroTime(this);
  }
  return *(_QWORD *)v2;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::minTimeSeekable(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  char *v2;
  int v3;
  char v4;

  if (*((_BYTE *)this + 169))
  {
    v2 = (char *)this + 336;
    if (WTF::MediaTime::operator!())
    {
      *((_QWORD *)this + 42) = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1520))(this);
      *((_DWORD *)this + 86) = v3;
      *((_BYTE *)this + 348) = v4;
    }
  }
  else
  {
    v2 = (char *)WTF::MediaTime::zeroTime(this);
  }
  return *(_QWORD *)v2;
}

BOOL WebCore::MediaPlayerPrivateAVFoundation::didLoadingProgress(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  __int128 *v5;
  int v6;
  char v7;
  __int128 v8;

  *(_QWORD *)&v8 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 336))(this);
  *((_QWORD *)&v8 + 1) = v2;
  v3 = WTF::MediaTime::operator!();
  if ((v3 & 1) != 0)
    return 0;
  if (*((_BYTE *)this + 169))
  {
    v5 = (__int128 *)((char *)this + 304);
    if (WTF::MediaTime::operator!())
    {
      *((_QWORD *)this + 38) = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1528))(this);
      *((_DWORD *)this + 78) = v6;
      *((_BYTE *)this + 316) = v7;
    }
  }
  else
  {
    v5 = (__int128 *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v3);
  }
  v8 = *v5;
  result = WTF::MediaTime::compare((WTF::MediaTime *)&v8, (WebCore::MediaPlayerPrivateAVFoundation *)((char *)this + 368)) != 0;
  *((_QWORD *)this + 46) = v8;
  *(_QWORD *)((char *)this + 373) = *(_QWORD *)((char *)&v8 + 5);
  return result;
}

WebCore::MediaPlayerPrivateAVFoundation *WebCore::MediaPlayerPrivateAVFoundation::prepareForRendering(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  WebCore::MediaPlayerPrivateAVFoundation *v1;

  if (!*((_BYTE *)this + 392))
  {
    v1 = this;
    *((_BYTE *)this + 392) = 1;
    (*(void (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1632))(this);
    if ((*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)v1 + 88))(v1))
      return (WebCore::MediaPlayerPrivateAVFoundation *)WebCore::MediaPlayerPrivateAVFoundation::setNeedsRenderingModeChanged((uint64_t)v1);
    (*(void (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)v1 + 1592))(v1);
    this = (WebCore::MediaPlayerPrivateAVFoundation *)WebCore::MediaPlayerPrivateAVFoundation::preferredRenderingMode(v1);
    if ((_DWORD)this == 2)
      return (WebCore::MediaPlayerPrivateAVFoundation *)WebCore::MediaPlayerPrivateAVFoundation::setNeedsRenderingModeChanged((uint64_t)v1);
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::supportsFullscreen(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  return 1;
}

void WebCore::MediaPlayerPrivateAVFoundation::setResolvedURL(WebCore::SecurityOrigin *this, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WebCore::SecurityOrigin *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF *v25;
  char v26;
  char v27;

  v4 = *a2;
  *a2 = 0;
  v6 = (WebCore::SecurityOrigin *)((char *)this + 216);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *(_QWORD *)v6 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *((_DWORD *)this + 56) = *((_DWORD *)this + 56) & 0xFFFFFFFE | a2[1] & 1;
  v7 = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v7 & 0xFFFFFFFE;
  v8 = *((_DWORD *)this + 56) & 0xFFFFFFFD | (2 * ((v7 >> 1) & 1));
  *((_DWORD *)this + 56) = v8;
  v9 = v8 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *((_DWORD *)this + 56) = v9;
  v10 = v9 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *((_DWORD *)this + 56) = v10;
  *((_DWORD *)this + 56) = a2[1] & 0xFFFFFFC0 | v10 & 0x3F;
  *(_OWORD *)((char *)this + 228) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)((char *)this + 244) = *(uint64_t *)((char *)a2 + 28);
  *((_DWORD *)this + 63) = *((_DWORD *)a2 + 9);
  WebCore::SecurityOrigin::create(v6, (uint64_t *)&v25);
  v12 = v25;
  v25 = 0;
  v13 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = v12;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v19 = *(WTF::StringImpl **)(v13 + 48);
      *(_QWORD *)(v13 + 48) = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v11);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = *(WTF::StringImpl **)(v13 + 40);
      *(_QWORD *)(v13 + 40) = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v11);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = *(unsigned int *)(v13 + 32);
      if ((_DWORD)v21 != -1)
        ((void (*)(char *, uint64_t))off_1E3411460[v21])(&v26, v13 + 8);
      *(_DWORD *)(v13 + 32) = -1;
      WTF::fastFree((WTF *)v13, v11);
    }
    v16 = v25;
    v25 = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr((unsigned int *)v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unsigned int *)v16));
      if (!v18)
      {
        atomic_store(1u, (unsigned int *)v16);
        v22 = (WTF::StringImpl *)*((_QWORD *)v16 + 6);
        *((_QWORD *)v16 + 6) = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v11);
          else
            *(_DWORD *)v22 -= 2;
        }
        v23 = (WTF::StringImpl *)*((_QWORD *)v16 + 5);
        *((_QWORD *)v16 + 5) = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v11);
          else
            *(_DWORD *)v23 -= 2;
        }
        v24 = *((unsigned int *)v16 + 8);
        if ((_DWORD)v24 != -1)
          ((void (*)(char *, char *))off_1E3411460[v24])(&v27, (char *)v16 + 8);
        *((_DWORD *)v16 + 8) = -1;
        WTF::fastFree(v16, v11);
      }
    }
  }
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundation::updateStates(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  int v2;
  unsigned __int8 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF::MediaTime *v9;
  int v10;
  int v11;
  int v13;
  _OWORD *v14;
  int v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD *v18;
  int v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  NSObject *v39;
  uint64_t v40;
  void *v41;
  char *v42;
  unsigned __int8 *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::Logger *v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::Logger *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  WTF::StringImpl **v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  NSObject *v85;
  uint64_t v86;
  void *v87;
  char *v88;
  unsigned __int8 *v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::Logger *v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::Logger *v107;
  uint64_t *v108;
  uint64_t v109;
  WTF::StringImpl **v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  int v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  WebCore::MediaPlayer *v120;
  int v122;
  int v123;
  unsigned __int8 v124;
  unsigned __int8 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  WTF::Logger *v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  uint8_t buf[16];
  int v142;
  WTF::StringImpl *v143;
  int v144;
  WTF::StringImpl *v145;
  int v146;
  WTF::StringImpl *v147;
  int v148;
  WTF::StringImpl *v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  if (this[396])
    return this;
  v1 = this;
  ++WebCore::ScriptDisallowedScope::s_count;
  v2 = this[169];
  if (this[391])
  {
    v3 = 2;
    goto LABEL_70;
  }
  v4 = this[169];
  v3 = this[168];
  v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this + 1448))(this);
  v6 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v1 + 1440))(v1);
  v7 = v6;
  v1[389] = v5 == 7;
  if (!v1[169] && v5 >= 3)
  {
    if (v5 == 7)
    {
      if (v6 > 1)
      {
LABEL_11:
        v4 = 1;
        goto LABEL_16;
      }
      if (v1[272] <= 1u)
      {
        (*(void (**)(unsigned __int8 *))(*(_QWORD *)v1 + 336))(v1);
        if ((v8 & 0x400000000) == 0)
        {
          v3 = 1;
          goto LABEL_11;
        }
      }
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v1 + 80))(v1);
      v4 = 1;
      v3 = 2;
    }
    else if (v5 == 5)
    {
      v3 = 5;
    }
    else
    {
      v3 = 4;
    }
  }
LABEL_16:
  v9 = (WTF::MediaTime *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v1 + 712))(v1);
  v10 = (int)v9;
  if (!(_DWORD)v9)
  {
    v11 = 0;
LABEL_20:
    v1[397] = v11;
    goto LABEL_21;
  }
  if (v1[397])
  {
    v10 = 0;
    v11 = 1;
    goto LABEL_21;
  }
  v11 = v1[394];
  if (v1[394])
  {
    v11 = 1;
    goto LABEL_20;
  }
  v10 = 0;
LABEL_21:
  if (v5 < 6 || v7 < 2)
  {
    v2 = v4;
  }
  else
  {
    v13 = v7 - 2;
    v3 = 6;
    v2 = v4;
    switch(v13)
    {
      case 0:
        break;
      case 1:
        if (v1[169] != 4 && (v11 || !v1[394]))
        {
          if (v1[169])
          {
            v14 = v1 + 304;
            if (WTF::MediaTime::operator!())
            {
              *((_QWORD *)v1 + 38) = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v1 + 1528))(v1);
              *((_DWORD *)v1 + 78) = v15;
              v1[316] = v16;
            }
          }
          else
          {
            v14 = (_OWORD *)WTF::MediaTime::zeroTime(v9);
          }
          *(_OWORD *)buf = *v14;
          v128 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v1 + 352))(v1);
          v129 = v17;
          v9 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)buf, (const WTF::MediaTime *)&v128);
          if ((_DWORD)v9 == 1)
            v2 = 3;
          else
            v2 = v4;
        }
        goto LABEL_45;
      case 2:
        v2 = 2;
        goto LABEL_45;
      case 3:
        v2 = 4;
        v3 = 1;
        break;
      case 4:
        v2 = 4;
        goto LABEL_45;
      default:
        v2 = v4;
LABEL_45:
        if (v1[169])
        {
          v18 = v1 + 304;
          if (WTF::MediaTime::operator!())
          {
            *((_QWORD *)v1 + 38) = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v1 + 1528))(v1);
            *((_DWORD *)v1 + 78) = v19;
            v1[316] = v20;
          }
        }
        else
        {
          v18 = (_OWORD *)WTF::MediaTime::zeroTime(v9);
        }
        *(_OWORD *)buf = *v18;
        v128 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v1 + 336))(v1);
        v129 = v21;
        if ((int)WTF::MediaTime::compare((WTF::MediaTime *)buf, (const WTF::MediaTime *)&v128) < 0)
          v3 = 2;
        else
          v3 = 3;
        break;
    }
  }
  if (v10)
  {
    if (v1[169] < 2u)
      v2 = 2;
    v22 = *((_QWORD *)v1 + 11);
    if (v22)
    {
      v23 = *((_QWORD *)v1 + 12);
      if (__ldaxr((unsigned __int8 *)v22))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v22))
      {
        goto LABEL_60;
      }
      MEMORY[0x19AEA534C](v22);
LABEL_60:
      if (*(_QWORD *)(v22 + 24))
        ++*(_QWORD *)(v22 + 8);
      else
        v23 = 0;
      v25 = __ldxr((unsigned __int8 *)v22);
      if (v25 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v22))
        {
LABEL_68:
          if (v23)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v23 + 8) + 8) + 120))(*(_QWORD *)(*(_QWORD *)(v23 + 8) + 8));
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v23);
          }
          goto LABEL_70;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v22);
      goto LABEL_68;
    }
  }
LABEL_70:
  if (v1[168] == v3)
    goto LABEL_170;
  v26 = *((_QWORD *)v1 + 35);
  v27 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v1 + 1392))(v1);
  v28 = *((_QWORD *)v1 + 36);
  v128 = v27;
  v129 = v29;
  v130 = "updateStates";
  v131 = v28;
  if (!*(_BYTE *)(v26 + 12))
    goto LABEL_170;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v128);
  WTF::String::String((WTF::String *)&v135, "entered with networkState ");
  v30 = v1[168];
  v31 = &qword_1EE2F8000;
  v32 = WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::values;
  {
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F8BE8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl;
    qword_1EE2F8BF0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl;
    unk_1EE2F8BF8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl;
    qword_1EE2F8C00 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl;
    unk_1EE2F8C08 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl += 2;
    qword_1EE2F8C10 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl;
  }
  v33 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::values[v30];
  if (v33)
    *(_DWORD *)v33 += 2;
  WTF::String::String((WTF::String *)&v134, ", exiting with ");
  {
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F8BE8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl;
    qword_1EE2F8BF0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl;
    unk_1EE2F8BF8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl;
    qword_1EE2F8C00 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl;
    unk_1EE2F8C08 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl += 2;
    qword_1EE2F8C10 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl;
  }
  v127 = v3;
  v34 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::values[v3];
  if (v34)
    *(_DWORD *)v34 += 2;
  v140 = v33;
  *(_QWORD *)buf = v136;
  v132 = v135;
  v138 = v34;
  v139 = v134;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v132, (uint64_t *)&v140, (uint64_t *)&v139, (uint64_t *)&v138, &v137);
  if (!v137)
  {
    __break(0xC471u);
    JUMPOUT(0x1961EA8F8);
  }
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v35);
    else
      *(_DWORD *)v34 -= 2;
  }
  v36 = v134;
  v134 = 0;
  if (!v36)
  {
LABEL_87:
    if (v33)
      goto LABEL_88;
    goto LABEL_90;
  }
  if (*(_DWORD *)v36 != 2)
  {
    *(_DWORD *)v36 -= 2;
    goto LABEL_87;
  }
  WTF::StringImpl::destroy(v36, v35);
  if (v33)
  {
LABEL_88:
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v35);
    else
      *(_DWORD *)v33 -= 2;
  }
LABEL_90:
  v37 = v135;
  v135 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v35);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = v136;
  v136 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v35);
    else
      *(_DWORD *)v38 -= 2;
  }
  v124 = v3;
  v39 = qword_1ECE7C4A0;
  v40 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v40)
  {
    WTF::String::utf8();
    v42 = v132 ? (char *)v132 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v42;
    _os_log_impl(&dword_1940B8000, v39, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v40 = (uint64_t)v132;
    v132 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        v40 = WTF::fastFree((WTF *)v40, v41);
      else
        --*(_DWORD *)v40;
    }
  }
  if (WebCore::LogMedia)
  {
    v43 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v44 = *v43;
      if ((v44 & 1) != 0)
        break;
      v45 = __ldaxr(v43);
      if (v45 == v44)
      {
        if (!__stxr(v44 | 1, v43))
        {
          v46 = WTF::Logger::observers((WTF::Logger *)v40);
          v47 = *(unsigned int *)(v46 + 12);
          if ((_DWORD)v47)
          {
            v48 = *(uint64_t **)v46;
            v126 = *(_QWORD *)v46 + 8 * v47;
            do
            {
              v49 = *v48;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v128);
              v142 = 0;
              WTF::String::String((WTF::String *)&v143, "entered with networkState ");
              v50 = v1[168];
              v144 = 0;
              if ((v31[387] & 1) == 0)
              {
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl += 2;
                *v32 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl;
                v32[1] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl += 2;
                v32[2] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl;
                v32[3] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl += 2;
                v32[4] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl;
                v32[5] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl += 2;
                v32[6] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl;
                *((_BYTE *)v31 + 3096) = 1;
              }
              v51 = (WTF::StringImpl *)v32[v50];
              if (v51)
                *(_DWORD *)v51 += 2;
              v145 = v51;
              v146 = 0;
              WTF::String::String((WTF::String *)&v147, ", exiting with ");
              v148 = 0;
              if ((v31[387] & 1) == 0)
              {
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl += 2;
                *v32 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl;
                v32[1] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl += 2;
                v32[2] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl;
                v32[3] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl += 2;
                v32[4] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl;
                v32[5] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl += 2;
                v32[6] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl;
                *((_BYTE *)v31 + 3096) = 1;
              }
              v52 = (WTF::StringImpl *)v32[v127];
              if (v52)
                *(_DWORD *)v52 += 2;
              v149 = v52;
              v132 = 0;
              v133 = 0;
              v53 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
              LODWORD(v133) = 5;
              v132 = v53;
              v54 = HIDWORD(v133);
              *((_DWORD *)v53 + 4 * HIDWORD(v133)) = *(_DWORD *)buf;
              v55 = *(_QWORD *)&buf[8];
              if (*(_QWORD *)&buf[8])
                **(_DWORD **)&buf[8] += 2;
              *((_QWORD *)v53 + 2 * v54 + 1) = v55;
              *((_DWORD *)v53 + 4 * (v54 + 1)) = v142;
              v56 = v143;
              if (v143)
                *(_DWORD *)v143 += 2;
              *((_QWORD *)v53 + 2 * (v54 + 1) + 1) = v56;
              *((_DWORD *)v53 + 4 * (v54 + 2)) = v144;
              v57 = v145;
              if (v145)
                *(_DWORD *)v145 += 2;
              *((_QWORD *)v53 + 2 * (v54 + 2) + 1) = v57;
              *((_DWORD *)v53 + 4 * (v54 + 3)) = v146;
              v58 = v147;
              if (v147)
                *(_DWORD *)v147 += 2;
              *((_QWORD *)v53 + 2 * (v54 + 3) + 1) = v58;
              *((_DWORD *)v53 + 4 * (v54 + 4)) = v148;
              v59 = v149;
              if (v149)
                *(_DWORD *)v149 += 2;
              *((_QWORD *)v53 + 2 * (v54 + 4) + 1) = v59;
              HIDWORD(v133) = v54 + 5;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v49 + 16))(v49, &WebCore::LogMedia, 0, &v132);
              v60 = v132;
              if (HIDWORD(v133))
              {
                v61 = v32;
                v62 = v31;
                v63 = 16 * HIDWORD(v133);
                v64 = (WTF::StringImpl **)((char *)v132 + 8);
                do
                {
                  v65 = *v64;
                  *v64 = 0;
                  if (v65)
                  {
                    if (*(_DWORD *)v65 == 2)
                      WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v41);
                    else
                      *(_DWORD *)v65 -= 2;
                  }
                  v64 += 2;
                  v63 -= 16;
                }
                while (v63);
                v60 = v132;
                v31 = v62;
                v32 = v61;
              }
              if (v60)
              {
                v132 = 0;
                LODWORD(v133) = 0;
                WTF::fastFree(v60, v41);
              }
              v66 = v149;
              v149 = 0;
              if (v66)
              {
                if (*(_DWORD *)v66 == 2)
                  WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v41);
                else
                  *(_DWORD *)v66 -= 2;
              }
              v67 = v147;
              v147 = 0;
              if (v67)
              {
                if (*(_DWORD *)v67 == 2)
                  WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v41);
                else
                  *(_DWORD *)v67 -= 2;
              }
              v68 = v145;
              v145 = 0;
              if (v68)
              {
                if (*(_DWORD *)v68 == 2)
                  WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v41);
                else
                  *(_DWORD *)v68 -= 2;
              }
              v69 = v143;
              v143 = 0;
              if (v69)
              {
                if (*(_DWORD *)v69 == 2)
                  WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v41);
                else
                  *(_DWORD *)v69 -= 2;
              }
              v70 = *(WTF::StringImpl **)&buf[8];
              *(_QWORD *)&buf[8] = 0;
              if (v70)
              {
                if (*(_DWORD *)v70 == 2)
                  WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v41);
                else
                  *(_DWORD *)v70 -= 2;
              }
              ++v48;
            }
            while (v48 != (uint64_t *)v126);
          }
          v71 = __ldxr(v43);
          if (v71 == 1)
          {
            if (!__stlxr(0, v43))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v72 = v137;
  v137 = 0;
  v3 = v124;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
      WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v41);
    else
      *(_DWORD *)v72 -= 2;
  }
LABEL_170:
  if (v1[169] == v2)
    goto LABEL_270;
  v73 = *((_QWORD *)v1 + 35);
  v74 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v1 + 1392))(v1);
  v75 = *((_QWORD *)v1 + 36);
  v128 = v74;
  v129 = v76;
  v130 = "updateStates";
  v131 = v75;
  if (!*(_BYTE *)(v73 + 12))
    goto LABEL_270;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v128);
  WTF::String::String((WTF::String *)&v135, "entered with readyState ");
  v77 = v1[169];
  v78 = &qword_1EE2F8000;
  {
    WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F8BB8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_1::operator() const(void)::impl;
    qword_1EE2F8BC0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_2::operator() const(void)::impl;
    unk_1EE2F8BC8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_3::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_4::operator() const(void)::impl += 2;
    qword_1EE2F8BD0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_4::operator() const(void)::impl;
  }
  v79 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::values[v77];
  if (v79)
    *(_DWORD *)v79 += 2;
  WTF::String::String((WTF::String *)&v134, ", exiting with ");
  {
    WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F8BB8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_1::operator() const(void)::impl;
    qword_1EE2F8BC0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_2::operator() const(void)::impl;
    unk_1EE2F8BC8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_3::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_4::operator() const(void)::impl += 2;
    qword_1EE2F8BD0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_4::operator() const(void)::impl;
  }
  v80 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::values[v2];
  if (v80)
    *(_DWORD *)v80 += 2;
  v140 = v79;
  *(_QWORD *)buf = v136;
  v132 = v135;
  v138 = v80;
  v139 = v134;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v132, (uint64_t *)&v140, (uint64_t *)&v139, (uint64_t *)&v138, &v137);
  if (!v137)
  {
    __break(0xC471u);
    JUMPOUT(0x1961EA900);
  }
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy(v80, v81);
    else
      *(_DWORD *)v80 -= 2;
  }
  v82 = v134;
  v134 = 0;
  if (!v82)
  {
LABEL_187:
    if (v79)
      goto LABEL_188;
    goto LABEL_190;
  }
  if (*(_DWORD *)v82 != 2)
  {
    *(_DWORD *)v82 -= 2;
    goto LABEL_187;
  }
  WTF::StringImpl::destroy(v82, v81);
  if (v79)
  {
LABEL_188:
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, v81);
    else
      *(_DWORD *)v79 -= 2;
  }
LABEL_190:
  v83 = v135;
  v135 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
      WTF::StringImpl::destroy(v83, v81);
    else
      *(_DWORD *)v83 -= 2;
  }
  v84 = v136;
  v136 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
      WTF::StringImpl::destroy(v84, v81);
    else
      *(_DWORD *)v84 -= 2;
  }
  v125 = v3;
  v85 = qword_1ECE7C4A0;
  v86 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v86)
  {
    WTF::String::utf8();
    v88 = v132 ? (char *)v132 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v88;
    _os_log_impl(&dword_1940B8000, v85, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v86 = (uint64_t)v132;
    v132 = 0;
    if (v86)
    {
      if (*(_DWORD *)v86 == 1)
        v86 = WTF::fastFree((WTF *)v86, v87);
      else
        --*(_DWORD *)v86;
    }
  }
  if (WebCore::LogMedia)
  {
    v89 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v90 = *v89;
      if ((v90 & 1) != 0)
        break;
      v91 = __ldaxr(v89);
      if (v91 == v90)
      {
        if (!__stxr(v90 | 1, v89))
        {
          v92 = WTF::Logger::observers((WTF::Logger *)v86);
          v93 = *(unsigned int *)(v92 + 12);
          if ((_DWORD)v93)
          {
            v94 = *(uint64_t **)v92;
            v95 = *(_QWORD *)v92 + 8 * v93;
            do
            {
              v96 = *v94;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v128);
              v142 = 0;
              WTF::String::String((WTF::String *)&v143, "entered with readyState ");
              v97 = v1[169];
              v144 = 0;
              if ((v78[379] & 1) == 0)
              {
                WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_0::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_1::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_0::operator() const(void)::impl;
                *(_QWORD *)algn_1EE2F8BB8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_1::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_2::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_3::operator() const(void)::impl += 2;
                qword_1EE2F8BC0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_2::operator() const(void)::impl;
                unk_1EE2F8BC8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_3::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_4::operator() const(void)::impl += 2;
                qword_1EE2F8BD0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_4::operator() const(void)::impl;
                *((_BYTE *)v78 + 3032) = 1;
              }
              v98 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::values[v97];
              if (v98)
                *(_DWORD *)v98 += 2;
              v145 = v98;
              v146 = 0;
              WTF::String::String((WTF::String *)&v147, ", exiting with ");
              v148 = 0;
              if ((v78[379] & 1) == 0)
              {
                WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_0::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_1::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_0::operator() const(void)::impl;
                *(_QWORD *)algn_1EE2F8BB8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_1::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_2::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_3::operator() const(void)::impl += 2;
                qword_1EE2F8BC0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_2::operator() const(void)::impl;
                unk_1EE2F8BC8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_3::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_4::operator() const(void)::impl += 2;
                qword_1EE2F8BD0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_4::operator() const(void)::impl;
                *((_BYTE *)v78 + 3032) = 1;
              }
              v99 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::values[v2];
              if (v99)
                *(_DWORD *)v99 += 2;
              v149 = v99;
              v132 = 0;
              v133 = 0;
              v100 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
              LODWORD(v133) = 5;
              v132 = v100;
              v101 = HIDWORD(v133);
              *((_DWORD *)v100 + 4 * HIDWORD(v133)) = *(_DWORD *)buf;
              v102 = *(_QWORD *)&buf[8];
              if (*(_QWORD *)&buf[8])
                **(_DWORD **)&buf[8] += 2;
              *((_QWORD *)v100 + 2 * v101 + 1) = v102;
              *((_DWORD *)v100 + 4 * (v101 + 1)) = v142;
              v103 = v143;
              if (v143)
                *(_DWORD *)v143 += 2;
              *((_QWORD *)v100 + 2 * (v101 + 1) + 1) = v103;
              *((_DWORD *)v100 + 4 * (v101 + 2)) = v144;
              v104 = v145;
              if (v145)
                *(_DWORD *)v145 += 2;
              *((_QWORD *)v100 + 2 * (v101 + 2) + 1) = v104;
              *((_DWORD *)v100 + 4 * (v101 + 3)) = v146;
              v105 = v147;
              if (v147)
                *(_DWORD *)v147 += 2;
              *((_QWORD *)v100 + 2 * (v101 + 3) + 1) = v105;
              *((_DWORD *)v100 + 4 * (v101 + 4)) = v148;
              v106 = v149;
              if (v149)
                *(_DWORD *)v149 += 2;
              *((_QWORD *)v100 + 2 * (v101 + 4) + 1) = v106;
              HIDWORD(v133) = v101 + 5;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v96 + 16))(v96, &WebCore::LogMedia, 0, &v132);
              v107 = v132;
              if (HIDWORD(v133))
              {
                v108 = v78;
                v109 = 16 * HIDWORD(v133);
                v110 = (WTF::StringImpl **)((char *)v132 + 8);
                do
                {
                  v111 = *v110;
                  *v110 = 0;
                  if (v111)
                  {
                    if (*(_DWORD *)v111 == 2)
                      WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v87);
                    else
                      *(_DWORD *)v111 -= 2;
                  }
                  v110 += 2;
                  v109 -= 16;
                }
                while (v109);
                v107 = v132;
                v78 = v108;
              }
              if (v107)
              {
                v132 = 0;
                LODWORD(v133) = 0;
                WTF::fastFree(v107, v87);
              }
              v112 = v149;
              v149 = 0;
              if (v112)
              {
                if (*(_DWORD *)v112 == 2)
                  WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v87);
                else
                  *(_DWORD *)v112 -= 2;
              }
              v113 = v147;
              v147 = 0;
              if (v113)
              {
                if (*(_DWORD *)v113 == 2)
                  WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v87);
                else
                  *(_DWORD *)v113 -= 2;
              }
              v114 = v145;
              v145 = 0;
              if (v114)
              {
                if (*(_DWORD *)v114 == 2)
                  WTF::StringImpl::destroy(v114, (WTF::StringImpl *)v87);
                else
                  *(_DWORD *)v114 -= 2;
              }
              v115 = v143;
              v143 = 0;
              if (v115)
              {
                if (*(_DWORD *)v115 == 2)
                  WTF::StringImpl::destroy(v115, (WTF::StringImpl *)v87);
                else
                  *(_DWORD *)v115 -= 2;
              }
              v116 = *(WTF::StringImpl **)&buf[8];
              *(_QWORD *)&buf[8] = 0;
              if (v116)
              {
                if (*(_DWORD *)v116 == 2)
                  WTF::StringImpl::destroy(v116, (WTF::StringImpl *)v87);
                else
                  *(_DWORD *)v116 -= 2;
              }
              ++v94;
            }
            while (v94 != (uint64_t *)v95);
          }
          v117 = __ldxr(v89);
          if (v117 == 1)
          {
            if (!__stlxr(0, v89))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v118 = v137;
  v137 = 0;
  v3 = v125;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2)
      WTF::StringImpl::destroy(v118, (WTF::StringImpl *)v87);
    else
      *(_DWORD *)v118 -= 2;
  }
LABEL_270:
  if (v1[168] != v3)
  {
    v1[168] = v3;
    v119 = *((_QWORD *)v1 + 11);
    if (v119)
    {
      v120 = (WebCore::MediaPlayer *)*((_QWORD *)v1 + 12);
      if (__ldaxr((unsigned __int8 *)v119))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v119))
      {
        goto LABEL_276;
      }
      MEMORY[0x19AEA534C](v119);
LABEL_276:
      if (*(_QWORD *)(v119 + 24))
        ++*(_QWORD *)(v119 + 8);
      else
        v120 = 0;
      v122 = __ldxr((unsigned __int8 *)v119);
      if (v122 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v119))
        {
LABEL_284:
          if (v120)
          {
            WebCore::MediaPlayer::networkStateChanged(v120);
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v120);
          }
          goto LABEL_286;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v119);
      goto LABEL_284;
    }
  }
LABEL_286:
  this = WebCore::MediaPlayerPrivateAVFoundation::setReadyState(v1, v2);
  if ((v1[392] || v1[394]) && v1[169] && v1[390])
  {
    if ((*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v1 + 88))(v1))
      v123 = 2;
    else
      v123 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v1 + 1592))(v1);
    this = (unsigned __int8 *)WebCore::MediaPlayerPrivateAVFoundation::preferredRenderingMode((WebCore::MediaPlayerPrivateAVFoundation *)v1);
    if (v123 != (_DWORD)this)
      this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v1 + 1632))(v1);
  }
  --WebCore::ScriptDisallowedScope::s_count;
  return this;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::setPageIsVisible(uint64_t this, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  _QWORD v9[4];
  unsigned __int8 v10;

  v10 = a2;
  if (*(unsigned __int8 *)(this + 390) != a2)
  {
    v2 = a2;
    v3 = this;
    v4 = *(_QWORD *)(this + 280);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 1392))(this);
    v6 = *(_QWORD *)(v3 + 288);
    v9[0] = v5;
    v9[1] = v7;
    v9[2] = "setPageIsVisible";
    v9[3] = v6;
    if (*(_BYTE *)(v4 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v9);
      v2 = v10;
    }
    *(_BYTE *)(v3 + 390) = v2;
    if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1632))(v3);
      v8 = v10 != 0;
    }
    else
    {
      v8 = 0;
    }
    return (*(uint64_t (**)(uint64_t, _BOOL8))(*(_QWORD *)v3 + 1464))(v3, v8);
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::acceleratedRenderingStateChanged(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1632))(this);
}

_BYTE *WebCore::MediaPlayerPrivateAVFoundation::setShouldMaintainAspectRatio(_BYTE *this, int a2)
{
  if (this[399] != a2)
  {
    this[399] = a2;
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 1608))(this);
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::metadataLoaded(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  *((_BYTE *)this + 391) = 0;
  (*(void (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1616))(this);
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1000))(this);
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundation::rateChanged(unsigned __int8 *this)
{
  uint64_t v1;
  uint64_t v2;
  int v4;

  v1 = *((_QWORD *)this + 11);
  if (!v1)
    return this;
  v2 = *((_QWORD *)this + 12);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_5:
    this = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v2)
        return this;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (v2)
  {
LABEL_12:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 8) + 8) + 72))(*(_QWORD *)(*(_QWORD *)(v2 + 8)
                                                                                                 + 8));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
  }
  return this;
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundation::loadedTimeRangesChanged(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;

  v2 = WTF::MediaTime::zeroTime(this);
  v3 = *(_QWORD *)(v2 + 5);
  *((_QWORD *)this + 38) = *(_QWORD *)v2;
  *(_QWORD *)((char *)this + 309) = v3;
  result = (unsigned __int8 *)WTF::MediaTime::invalidTime((WTF::MediaTime *)v2);
  v5 = *(_QWORD *)(result + 5);
  *((_QWORD *)this + 44) = *(_QWORD *)result;
  *(_QWORD *)((char *)this + 357) = v5;
  v6 = *((_QWORD *)this + 11);
  if (!v6)
    return result;
  v7 = *((_QWORD *)this + 12);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v6);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v6 + 24))
    ++*(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v9 = __ldxr((unsigned __int8 *)v6);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
    {
      if (!v7)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  if (v7)
  {
LABEL_12:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 8) + 8) + 552))(*(_QWORD *)(*(_QWORD *)(v7 + 8)
                                                                                                  + 8));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v7);
  }
  return result;
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundation::seekableTimeRangesChanged(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;

  v2 = WTF::MediaTime::zeroTime(this);
  v3 = *(_QWORD *)(v2 + 5);
  *((_QWORD *)this + 40) = *(_QWORD *)v2;
  *(_QWORD *)((char *)this + 325) = v3;
  result = (unsigned __int8 *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v2);
  v5 = *(_QWORD *)(result + 5);
  *((_QWORD *)this + 42) = *(_QWORD *)result;
  *(_QWORD *)((char *)this + 341) = v5;
  v6 = *((_QWORD *)this + 11);
  if (!v6)
    return result;
  v7 = *((_QWORD *)this + 12);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v6);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v6 + 24))
    ++*(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v9 = __ldxr((unsigned __int8 *)v6);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
    {
      if (!v7)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  if (v7)
  {
LABEL_12:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 8) + 8) + 560))(*(_QWORD *)(*(_QWORD *)(v7 + 8)
                                                                                                  + 8));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v7);
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::timeChanged(WebCore::MediaPlayerPrivateAVFoundation *this, const WTF::MediaTime *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  char v14;
  int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::Logger *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::Logger *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  _QWORD v46[4];
  WTF::Logger *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint8_t buf[4];
  _BYTE v54[12];
  int v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 35);
  result = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1392))(this);
  v6 = *((_QWORD *)this + 36);
  v46[0] = result;
  v46[1] = v7;
  v46[2] = "timeChanged";
  v46[3] = v6;
  if (!*(_BYTE *)(v4 + 12))
    return result;
  if (!WebCore::LogMedia || byte_1ECE7C490 < 3u)
    return result;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v46);
  WTF::String::String((WTF::String *)&v50, "- ");
  result = WTF::MediaTime::toJSONString(a2);
  if (v51)
  {
    v9 = *((_DWORD *)v51 + 1);
    if (v50)
      goto LABEL_9;
LABEL_97:
    v10 = 0;
    if (v49)
      goto LABEL_10;
LABEL_98:
    v11 = 0;
    goto LABEL_11;
  }
  v9 = 0;
  if (!v50)
    goto LABEL_97;
LABEL_9:
  v10 = *((_DWORD *)v50 + 1);
  if (!v49)
    goto LABEL_98;
LABEL_10:
  v11 = *((_DWORD *)v49 + 1);
LABEL_11:
  if ((v11 | v10) < 0
    || ((v12 = __OFADD__(v10, v11), v13 = v10 + v11, !v12) ? (v14 = 0) : (v14 = 1),
        v9 < 0 || (v14 & 1) != 0 || (result = (v9 + v13), __OFADD__(v9, v13))))
  {
    v52 = 0;
    goto LABEL_102;
  }
  if (v51 && (*((_BYTE *)v51 + 16) & 4) == 0)
  {
    v15 = 0;
    goto LABEL_25;
  }
  if (v50)
  {
    v16 = *((_DWORD *)v50 + 4);
    v15 = (v16 >> 2) & 1;
    if (v49 && (v16 & 4) != 0)
      goto LABEL_24;
  }
  else
  {
    if (v49)
    {
LABEL_24:
      v15 = (*((unsigned __int8 *)v49 + 16) >> 2) & 1;
      goto LABEL_25;
    }
    v15 = 1;
  }
LABEL_25:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v15, v51, (uint64_t)v50, (uint64_t)v49, &v52);
  if (!v52)
  {
LABEL_102:
    __break(0xC471u);
    return result;
  }
  v18 = v49;
  v49 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v50;
  v50 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v51;
  v51 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = qword_1ECE7C4A0;
  v22 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v22)
  {
    WTF::String::utf8();
    v24 = v47 ? (char *)v47 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v54 = v24;
    _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v22 = (uint64_t)v47;
    v47 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        v22 = WTF::fastFree((WTF *)v22, v23);
      else
        --*(_DWORD *)v22;
    }
  }
  if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
  {
    v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v26 = *v25;
      if ((v26 & 1) != 0)
        break;
      v27 = __ldaxr(v25);
      if (v27 == v26)
      {
        if (!__stxr(v26 | 1, v25))
        {
          v28 = WTF::Logger::observers((WTF::Logger *)v22);
          v29 = *(unsigned int *)(v28 + 12);
          if ((_DWORD)v29)
          {
            v30 = *(uint64_t **)v28;
            v31 = *(_QWORD *)v28 + 8 * v29;
            do
            {
              v32 = *v30;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v46);
              v55 = 0;
              WTF::String::String((WTF::String *)&v56, "- ");
              v57 = 1;
              WTF::MediaTime::toJSONString(a2);
              v47 = 0;
              v48 = 0;
              v33 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v48) = 3;
              v47 = v33;
              v34 = HIDWORD(v48);
              *((_DWORD *)v33 + 4 * HIDWORD(v48)) = *(_DWORD *)buf;
              v35 = *(_QWORD *)&v54[4];
              if (*(_QWORD *)&v54[4])
                **(_DWORD **)&v54[4] += 2;
              *((_QWORD *)v33 + 2 * v34 + 1) = v35;
              *((_DWORD *)v33 + 4 * (v34 + 1)) = v55;
              v36 = v56;
              if (v56)
                *(_DWORD *)v56 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 1) + 1) = v36;
              *((_DWORD *)v33 + 4 * (v34 + 2)) = v57;
              v37 = v58;
              if (v58)
                *(_DWORD *)v58 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 2) + 1) = v37;
              HIDWORD(v48) = v34 + 3;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v32 + 16))(v32, &WebCore::LogMedia, 3, &v47);
              v38 = v47;
              if (HIDWORD(v48))
              {
                v39 = 16 * HIDWORD(v48);
                v40 = (WTF::StringImpl **)((char *)v47 + 8);
                do
                {
                  v41 = *v40;
                  *v40 = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  v40 += 2;
                  v39 -= 16;
                }
                while (v39);
                v38 = v47;
              }
              if (v38)
              {
                v47 = 0;
                LODWORD(v48) = 0;
                WTF::fastFree(v38, v23);
              }
              v42 = v58;
              v58 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = v56;
              v56 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = *(WTF::StringImpl **)&v54[4];
              *(_QWORD *)&v54[4] = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v44 -= 2;
              }
              ++v30;
            }
            while (v30 != (uint64_t *)v31);
          }
          v45 = __ldxr(v25);
          if (v45 == 1)
          {
            if (!__stlxr(0, v25))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v52;
  v52 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundation::seekCompleted(WebCore::MediaPlayerPrivateAVFoundation *this, char a2)
{
  uint64_t v3;
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  char v20;

  v20 = a2;
  v3 = *((_QWORD *)this + 35);
  result = (unsigned __int8 *)(*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1392))(this);
  v5 = *((_QWORD *)this + 36);
  v16 = result;
  v17 = v6;
  v18 = "seekCompleted";
  v19 = v5;
  if (*(_BYTE *)(v3 + 12))
    result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v16, "finished = ");
  *((_BYTE *)this + 400) = 0;
  v7 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v7)
  {
    v8 = *((_QWORD *)this + 35);
    v9 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1392))(this);
    v10 = *((_QWORD *)this + 36);
    v16 = (unsigned __int8 *)v9;
    v17 = v11;
    v18 = "seekCompleted";
    v19 = v10;
    if (*(_BYTE *)(v8 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v16, "issuing pending seek");
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (v20)
  {
    if ((*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1376))(this))
      *(_BYTE *)((*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1376))(this)
               + 137) = 0;
    result = WebCore::MediaPlayerPrivateAVFoundation::updateStates((unsigned __int8 *)this);
    v12 = *((_QWORD *)this + 11);
    if (v12)
    {
      v13 = *((_QWORD *)this + 12);
      if (__ldaxr((unsigned __int8 *)v12))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v12))
      {
        goto LABEL_16;
      }
      result = (unsigned __int8 *)MEMORY[0x19AEA534C](v12);
LABEL_16:
      if (*(_QWORD *)(v12 + 24))
        ++*(_QWORD *)(v12 + 8);
      else
        v13 = 0;
      v15 = __ldxr((unsigned __int8 *)v12);
      if (v15 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v12))
        {
LABEL_24:
          if (v13)
          {
            (*(void (**)(_QWORD, char *))(**(_QWORD **)(*(_QWORD *)(v13 + 8) + 8) + 48))(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 8), (char *)this + 112);
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v13 + 8) + 8) + 56))(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 8));
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v13);
          }
          return result;
        }
      }
      else
      {
        __clrex();
      }
      result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
      goto LABEL_24;
    }
  }
  return result;
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundation::didEnd(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  const WTF::MediaTime *v7;
  unsigned __int8 *result;
  uint64_t v9;
  uint64_t v10;
  int v12;
  _QWORD v13[4];
  __int128 v14;

  *(_QWORD *)&v14 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 352))(this);
  *((_QWORD *)&v14 + 1) = v2;
  v3 = *((_QWORD *)this + 35);
  v4 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1392))(this);
  v5 = *((_QWORD *)this + 36);
  v13[0] = v4;
  v13[1] = v6;
  v13[2] = "didEnd";
  v13[3] = v5;
  if (*(_BYTE *)(v3 + 12))
    v4 = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WTF::MediaTime,char [12],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v13, "currentTime: ", (WTF::MediaTime *)&v14, ", seeking: ");
  v7 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v4);
  if (WTF::MediaTime::compare((WTF::MediaTime *)&v14, v7) == 1 && !*((_BYTE *)this + 400))
  {
    *((_QWORD *)this + 44) = v14;
    *(_QWORD *)((char *)this + 357) = *(_QWORD *)((char *)&v14 + 5);
  }
  result = WebCore::MediaPlayerPrivateAVFoundation::updateStates((unsigned __int8 *)this);
  v9 = *((_QWORD *)this + 11);
  if (v9)
  {
    v10 = *((_QWORD *)this + 12);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_11;
    }
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v9);
LABEL_11:
    if (*(_QWORD *)(v9 + 24))
      ++*(_QWORD *)(v9 + 8);
    else
      v10 = 0;
    v12 = __ldxr((unsigned __int8 *)v9);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
        if (!v10)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      __clrex();
    }
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (!v10)
      return result;
LABEL_17:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v10 + 8) + 8) + 56))(*(_QWORD *)(*(_QWORD *)(v10 + 8)
                                                                                                  + 8));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v10);
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::movieLoadType(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  uint64_t v3;

  if (!*((_BYTE *)this + 169)
    || (*(unsigned int (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1448))(this) == 1)
  {
    return 0;
  }
  if (((*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1624))(this) & 1) != 0)
    return 4;
  (*(void (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 336))(this);
  if ((v3 & 0x400000000) != 0)
    return 3;
  else
    return 1;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::setPreload(uint64_t a1, WTF::String *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  char v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::Logger *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  _QWORD v46[4];
  WTF::Logger *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint8_t buf[4];
  _BYTE v54[12];
  int v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 280);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1392))(a1);
  v6 = *(_QWORD *)(a1 + 288);
  v46[0] = result;
  v46[1] = v7;
  v46[2] = "setPreload";
  v46[3] = v6;
  if (*(_BYTE *)(v4 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v46);
    WTF::String::String((WTF::String *)&v50, " - ");
    result = WTF::String::number(a2);
    if (v51)
    {
      v8 = *((_DWORD *)v51 + 1);
      if (v50)
        goto LABEL_4;
    }
    else
    {
      v8 = 0;
      if (v50)
      {
LABEL_4:
        v9 = *((_DWORD *)v50 + 1);
        if (v49)
        {
LABEL_5:
          v10 = *((_DWORD *)v49 + 1);
LABEL_6:
          if ((v10 | v9) < 0
            || ((v11 = __OFADD__(v9, v10), v12 = v9 + v10, !v11) ? (v13 = 0) : (v13 = 1),
                v8 < 0 || (v13 & 1) != 0 || (result = (v8 + v12), __OFADD__(v8, v12))))
          {
            v52 = 0;
            goto LABEL_104;
          }
          if (v51 && (*((_BYTE *)v51 + 16) & 4) == 0)
          {
            v14 = 0;
            goto LABEL_20;
          }
          if (v50)
          {
            v15 = *((_DWORD *)v50 + 4);
            v14 = (v15 >> 2) & 1;
            if (v49 && (v15 & 4) != 0)
              goto LABEL_19;
          }
          else
          {
            if (v49)
            {
LABEL_19:
              v14 = (*((unsigned __int8 *)v49 + 16) >> 2) & 1;
              goto LABEL_20;
            }
            v14 = 1;
          }
LABEL_20:
          result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v51, (uint64_t)v50, (uint64_t)v49, &v52);
          if (v52)
          {
            v17 = v49;
            v49 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v16);
              else
                *(_DWORD *)v17 -= 2;
            }
            v18 = v50;
            v50 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, v16);
              else
                *(_DWORD *)v18 -= 2;
            }
            v19 = v51;
            v51 = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 2)
                WTF::StringImpl::destroy(v19, v16);
              else
                *(_DWORD *)v19 -= 2;
            }
            v20 = qword_1ECE7C4A0;
            v21 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v21)
            {
              WTF::String::utf8();
              v23 = v47 ? (char *)v47 + 16 : 0;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)v54 = v23;
              _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              v21 = (uint64_t)v47;
              v47 = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 1)
                  v21 = WTF::fastFree((WTF *)v21, v22);
                else
                  --*(_DWORD *)v21;
              }
            }
            if (WebCore::LogMedia)
            {
              v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v25 = *v24;
                if ((v25 & 1) != 0)
                  break;
                v26 = __ldaxr(v24);
                if (v26 == v25)
                {
                  if (!__stxr(v25 | 1, v24))
                  {
                    v27 = WTF::Logger::observers((WTF::Logger *)v21);
                    v28 = *(unsigned int *)(v27 + 12);
                    if ((_DWORD)v28)
                    {
                      v29 = *(uint64_t **)v27;
                      v30 = *(_QWORD *)v27 + 8 * v28;
                      do
                      {
                        v31 = *v29;
                        *(_DWORD *)buf = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v46);
                        v55 = 0;
                        WTF::String::String((WTF::String *)&v56, " - ");
                        v57 = 0;
                        WTF::String::number(a2);
                        v47 = 0;
                        v48 = 0;
                        v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v48) = 3;
                        v47 = v32;
                        v33 = HIDWORD(v48);
                        *((_DWORD *)v32 + 4 * HIDWORD(v48)) = *(_DWORD *)buf;
                        v34 = *(_QWORD *)&v54[4];
                        if (*(_QWORD *)&v54[4])
                          **(_DWORD **)&v54[4] += 2;
                        *((_QWORD *)v32 + 2 * v33 + 1) = v34;
                        *((_DWORD *)v32 + 4 * (v33 + 1)) = v55;
                        v35 = v56;
                        if (v56)
                          *(_DWORD *)v56 += 2;
                        *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
                        *((_DWORD *)v32 + 4 * (v33 + 2)) = v57;
                        v36 = v58;
                        if (v58)
                          *(_DWORD *)v58 += 2;
                        *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
                        HIDWORD(v48) = v33 + 3;
                        (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, &WebCore::LogMedia, 0, &v47);
                        v37 = v47;
                        if (HIDWORD(v48))
                        {
                          v38 = 16 * HIDWORD(v48);
                          v39 = (WTF::StringImpl **)((char *)v47 + 8);
                          do
                          {
                            v40 = *v39;
                            *v39 = 0;
                            if (v40)
                            {
                              if (*(_DWORD *)v40 == 2)
                                WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                              else
                                *(_DWORD *)v40 -= 2;
                            }
                            v39 += 2;
                            v38 -= 16;
                          }
                          while (v38);
                          v37 = v47;
                        }
                        if (v37)
                        {
                          v47 = 0;
                          LODWORD(v48) = 0;
                          WTF::fastFree(v37, v22);
                        }
                        v41 = v58;
                        v58 = 0;
                        if (v41)
                        {
                          if (*(_DWORD *)v41 == 2)
                            WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                          else
                            *(_DWORD *)v41 -= 2;
                        }
                        v42 = v56;
                        v56 = 0;
                        if (v42)
                        {
                          if (*(_DWORD *)v42 == 2)
                            WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                          else
                            *(_DWORD *)v42 -= 2;
                        }
                        v43 = *(WTF::StringImpl **)&v54[4];
                        *(_QWORD *)&v54[4] = 0;
                        if (v43)
                        {
                          if (*(_DWORD *)v43 == 2)
                            WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                          else
                            *(_DWORD *)v43 -= 2;
                        }
                        ++v29;
                      }
                      while (v29 != (uint64_t *)v30);
                    }
                    v44 = __ldxr(v24);
                    if (v44 == 1)
                    {
                      if (!__stlxr(0, v24))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            result = (uint64_t)v52;
            v52 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
              else
                *(_DWORD *)result -= 2;
            }
            goto LABEL_84;
          }
LABEL_104:
          __break(0xC471u);
          return result;
        }
LABEL_100:
        v10 = 0;
        goto LABEL_6;
      }
    }
    v9 = 0;
    if (v49)
      goto LABEL_5;
    goto LABEL_100;
  }
LABEL_84:
  v45 = *(_QWORD *)(a1 + 176);
  *(_BYTE *)(a1 + 272) = (_BYTE)a2;
  if (v45 && *(_DWORD *)(v45 + 4))
  {
    if ((_DWORD)a2)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1448))(a1);
      if (!(_DWORD)result)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1416))(a1, a1 + 176);
    }
    if (*(_BYTE *)(a1 + 272) == 2)
    {
      if (*(_BYTE *)(a1 + 389))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1432))(a1);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1424))(a1);
      }
    }
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::configureInbandTracks(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  BOOL v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t result;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  (*(void (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1664))(this);
  if (*((_DWORD *)this + 21))
  {
    v2 = 0;
    v3 = 0;
    while (1)
    {
      v4 = *(unsigned int **)(*((_QWORD *)this + 9) + 8 * v2);
      if (v4)
      {
        v5 = v4 + 2;
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
      }
      v7 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 128))(v4);
      if (v7 == 2)
      {
        v8 = v4 + 2;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v10 = v4;
        if (v3)
        {
          v11 = v3 + 2;
          do
          {
            v12 = __ldaxr(v11);
            v13 = --v12 == 0;
          }
          while (__stlxr(v12, v11));
          goto LABEL_19;
        }
      }
      else if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v4 + 128))(v4) == 1)
      {
        v14 = v4 + 2;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        v10 = v4;
        if (v3)
        {
          v16 = v3 + 2;
          do
          {
            v17 = __ldaxr(v16);
            v13 = --v17 == 0;
          }
          while (__stlxr(v17, v16));
LABEL_19:
          v10 = v4;
          if (v13)
          {
            atomic_store(1u, v3 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
            v10 = v4;
          }
        }
      }
      else
      {
        v10 = v3;
      }
      v18 = v4 + 2;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
      if (v7 != 2)
      {
        ++v2;
        v3 = v10;
        if (v2 < *((unsigned int *)this + 21))
          continue;
      }
      goto LABEL_31;
    }
  }
  v10 = 0;
LABEL_31:
  result = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *, unsigned int *))(*(_QWORD *)this
                                                                                                + 1368))(this, v10);
  if (v10)
  {
    v22 = v10 + 2;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v10 + 2);
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::trackModeChanged(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1360))(this);
}

uint64_t `non-virtual thunk to'WebCore::MediaPlayerPrivateAVFoundation::trackModeChanged(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 7) + 1360))((char *)this - 56);
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundation::clearTextTracks(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  WTF **v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  v2 = this;
  v3 = *((_QWORD *)this + 11);
  if (!v3)
  {
    v7 = (WTF **)(this + 72);
    v6 = (uint64_t *)*((_QWORD *)this + 9);
    v9 = this + 84;
    v8 = *((unsigned int *)this + 21);
    if (!(_DWORD)v8)
    {
LABEL_23:
      v4 = 0;
      goto LABEL_24;
    }
LABEL_21:
    v13 = &v6[v8];
    do
    {
      v14 = *v6++;
      this = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 200))(v14);
    }
    while (v6 != v13);
    goto LABEL_23;
  }
  v4 = *((_QWORD *)this + 12);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_8;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](v3);
LABEL_8:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v10 = __ldxr((unsigned __int8 *)v3);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_15:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  v7 = (WTF **)(v2 + 72);
  v6 = (uint64_t *)*((_QWORD *)v2 + 9);
  v9 = v2 + 84;
  v8 = *((unsigned int *)v2 + 21);
  if (!(_DWORD)v8)
    goto LABEL_24;
  if (!v4)
    goto LABEL_21;
  v11 = 8 * v8;
  do
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 8) + 376))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8), *v6);
    v12 = *v6++;
    this = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 200))(v12);
    v11 -= 8;
  }
  while (v11);
LABEL_24:
  if (*((_DWORD *)v2 + 20))
  {
    v15 = *v9;
    v16 = *v7;
    if ((_DWORD)v15)
    {
      v17 = (WTF *)((char *)v16 + 8 * v15);
      do
      {
        this = *(unsigned __int8 **)v16;
        *(_QWORD *)v16 = 0;
        if (this)
        {
          v18 = (unsigned int *)(this + 8);
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
          {
            atomic_store(1u, (unsigned int *)this + 2);
            this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this + 8))(this);
          }
        }
        v16 = (WTF *)((char *)v16 + 8);
      }
      while (v16 != v17);
      *v9 = 0;
      v16 = *v7;
    }
    if (v16)
    {
      *((_QWORD *)v2 + 9) = 0;
      *((_DWORD *)v2 + 20) = 0;
      this = (unsigned __int8 *)WTF::fastFree(v16, a2);
    }
  }
  if (v4)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
  return this;
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundation::processNewAndRemovedTextTracks(unsigned __int8 *result, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  unsigned int **v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 **v23;
  unsigned __int8 **v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::String *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  BOOL v48;
  int v49;
  char v50;
  int v51;
  char v52;
  uint64_t v53;
  int v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  NSObject *v60;
  uint64_t v61;
  void *v62;
  char *v63;
  unsigned __int8 *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  WTF::Logger *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::Logger *v78;
  uint64_t v79;
  WTF::StringImpl **v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  int v86;
  unsigned int v87;
  WTF::String *v88;
  _QWORD v89[4];
  WTF::Logger *v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  uint8_t buf[4];
  _BYTE v98[12];
  int v99;
  WTF::StringImpl *v100;
  int v101;
  WTF::StringImpl *v102;
  int v103;
  WTF::StringImpl *v104[3];

  v3 = result;
  v104[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)result + 11);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_15;
  }
  v5 = *((_QWORD *)result + 12);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_7;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v4);
LABEL_7:
  if (*(_QWORD *)(v4 + 24))
    ++*(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_14:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_15:
  if (*(_DWORD *)(a2 + 12))
  {
    v8 = v3 + 84;
    LODWORD(v9) = *((_DWORD *)v3 + 21);
    if (!(_DWORD)v9)
      goto LABEL_72;
    v10 = 0;
    if (v5)
    {
      LODWORD(v11) = *((_DWORD *)v3 + 21);
      do
      {
        while (1)
        {
          v12 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v12)
            break;
LABEL_23:
          ++v10;
          LODWORD(v9) = v11;
          if (v10 >= v11)
            goto LABEL_45;
        }
        v13 = *(unsigned __int8 ***)a2;
        while (*v13 != *(unsigned __int8 **)(*((_QWORD *)v3 + 9) + 8 * v10))
        {
          ++v13;
          if (!--v12)
            goto LABEL_23;
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 8) + 8) + 376))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8));
        v14 = (unsigned int **)(*((_QWORD *)v3 + 9) + 8 * v10);
        v15 = *v14;
        *v14 = 0;
        if (v15)
        {
          v16 = v15 + 2;
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
          {
            atomic_store(1u, v15 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
          }
        }
        result = (unsigned __int8 *)memmove(v14, v14 + 1, *((_QWORD *)v3 + 9) + 8 * *((unsigned int *)v3 + 21) - (_QWORD)(v14 + 1));
        v11 = (*((_DWORD *)v3 + 21) - 1);
        *((_DWORD *)v3 + 21) = v11;
        LODWORD(v9) = v11;
      }
      while (v10 < v11);
    }
    else
    {
      do
      {
        while (1)
        {
          v22 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v22)
            break;
LABEL_42:
          if (++v10 >= v9)
            goto LABEL_45;
        }
        v23 = (unsigned __int8 **)(*((_QWORD *)v3 + 9) + 8 * v10);
        v24 = *(unsigned __int8 ***)a2;
        result = *v23;
        while (*v24 != result)
        {
          ++v24;
          if (!--v22)
            goto LABEL_42;
        }
        *v23 = 0;
        if (result)
        {
          v19 = (unsigned int *)(result + 8);
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            atomic_store(1u, (unsigned int *)result + 2);
            (*(void (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
          }
        }
        result = (unsigned __int8 *)memmove(v23, v23 + 1, *((_QWORD *)v3 + 9) + 8 * *((unsigned int *)v3 + 21) - (_QWORD)(v23 + 1));
        v9 = (*((_DWORD *)v3 + 21) - 1);
        *((_DWORD *)v3 + 21) = v9;
      }
      while (v10 < v9);
    }
  }
  else
  {
    LODWORD(v9) = *((_DWORD *)v3 + 21);
  }
LABEL_45:
  v8 = v3 + 84;
  if ((_DWORD)v9)
  {
    v25 = 0;
    v26 = 0;
    if (v5)
    {
      while (v25 < *v8)
      {
        v27 = *(_QWORD *)(*((_QWORD *)v3 + 9) + 8 * v25);
        if (v27)
        {
          v28 = (unsigned int *)(v27 + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 + 1, v28));
        }
        result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 224))(v27);
        if ((_DWORD)result != 1)
        {
          *(_DWORD *)(v27 + 132) = v26++;
          if (!*(_BYTE *)(v27 + 136))
          {
            *(_BYTE *)(v27 + 136) = 1;
            result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v5 + 8)
                                                                                                 + 8)
                                                                                   + 352))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8), v27);
          }
        }
        v30 = (unsigned int *)(v27 + 8);
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          atomic_store(1u, (unsigned int *)(v27 + 8));
          result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        }
        if (++v25 == v9)
          goto LABEL_72;
      }
    }
    else
    {
      while (v25 < *v8)
      {
        v33 = *(_QWORD *)(*((_QWORD *)v3 + 9) + 8 * v25);
        if (v33)
        {
          v34 = (unsigned int *)(v33 + 8);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 + 1, v34));
        }
        result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 224))(v33);
        if ((_DWORD)result != 1)
        {
          *(_DWORD *)(v33 + 132) = v26++;
          if (!*(_BYTE *)(v33 + 136))
            *(_BYTE *)(v33 + 136) = 1;
        }
        v36 = (unsigned int *)(v33 + 8);
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          atomic_store(1u, (unsigned int *)(v33 + 8));
          result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        }
        if (++v25 == v9)
          goto LABEL_72;
      }
    }
    __break(0xC471u);
LABEL_199:
    JUMPOUT(0x1961EC874);
  }
LABEL_72:
  if ((_DWORD)v9 == *v8)
    goto LABEL_180;
  v39 = *((_QWORD *)v3 + 35);
  result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v3 + 1392))(v3);
  v40 = *((_QWORD *)v3 + 36);
  v89[0] = result;
  v89[1] = v41;
  v89[2] = "processNewAndRemovedTextTracks";
  v89[3] = v40;
  if (!*(_BYTE *)(v39 + 12))
    goto LABEL_180;
  if (!WebCore::LogMedia || byte_1ECE7C490 < 3u)
    goto LABEL_180;
  v43 = (WTF::String *)*((unsigned int *)v3 + 21);
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v89);
  WTF::String::String((WTF::String *)&v94, "found ");
  v88 = v43;
  WTF::String::number(v43);
  WTF::String::String((WTF::String *)&v92, " text tracks");
  if (v95)
    v44 = *((_DWORD *)v95 + 1);
  else
    v44 = 0;
  if (v94)
  {
    v45 = *((_DWORD *)v94 + 1);
    if (v93)
      goto LABEL_83;
LABEL_192:
    v46 = 0;
    if (v92)
      goto LABEL_84;
LABEL_193:
    v47 = 0;
    goto LABEL_85;
  }
  v45 = 0;
  if (!v93)
    goto LABEL_192;
LABEL_83:
  v46 = *((_DWORD *)v93 + 1);
  if (!v92)
    goto LABEL_193;
LABEL_84:
  v47 = *((_DWORD *)v92 + 1);
LABEL_85:
  if ((v47 | v46) < 0
    || ((v48 = __OFADD__(v46, v47), v49 = v46 + v47, !v48) ? (v50 = 0) : (v50 = 1),
        v45 < 0
     || (v50 & 1) != 0
     || ((v48 = __OFADD__(v45, v49), v51 = v45 + v49, !v48) ? (v52 = 0) : (v52 = 1),
         v44 < 0 || (v52 & 1) != 0 || (v53 = (v44 + v51), __OFADD__(v44, v51)))))
  {
    v96 = 0;
    goto LABEL_198;
  }
  if (v95 && (*((_BYTE *)v95 + 16) & 4) == 0 || v94 && (*((_BYTE *)v94 + 16) & 4) == 0)
  {
    v54 = 0;
    goto LABEL_102;
  }
  if (v93)
  {
    v87 = *((_DWORD *)v93 + 4);
    v54 = (v87 >> 2) & 1;
    if (v92 && (v87 & 4) != 0)
      goto LABEL_174;
  }
  else
  {
    if (v92)
    {
LABEL_174:
      v54 = (*((unsigned __int8 *)v92 + 16) >> 2) & 1;
      goto LABEL_102;
    }
    v54 = 1;
  }
LABEL_102:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v53, v54, (uint64_t)v95, v94, (uint64_t)v93, (uint64_t)v92, &v96);
  if (!v96)
  {
LABEL_198:
    __break(0xC471u);
    goto LABEL_199;
  }
  v56 = v92;
  v92 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v55);
    else
      *(_DWORD *)v56 -= 2;
  }
  v57 = v93;
  v93 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v55);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = v94;
  v94 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v55);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = v95;
  v95 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, v55);
    else
      *(_DWORD *)v59 -= 2;
  }
  v60 = qword_1ECE7C4A0;
  v61 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v61)
  {
    WTF::String::utf8();
    v63 = v90 ? (char *)v90 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v98 = v63;
    _os_log_impl(&dword_1940B8000, v60, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v61 = (uint64_t)v90;
    v90 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 1)
        v61 = WTF::fastFree((WTF *)v61, v62);
      else
        --*(_DWORD *)v61;
    }
  }
  if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
  {
    v64 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v65 = *v64;
      if ((v65 & 1) != 0)
        break;
      v66 = __ldaxr(v64);
      if (v66 == v65)
      {
        if (!__stxr(v65 | 1, v64))
        {
          v67 = WTF::Logger::observers((WTF::Logger *)v61);
          v68 = *(unsigned int *)(v67 + 12);
          if ((_DWORD)v68)
          {
            v69 = *(uint64_t **)v67;
            v70 = *(_QWORD *)v67 + 8 * v68;
            do
            {
              v71 = *v69;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v89);
              v99 = 0;
              WTF::String::String((WTF::String *)&v100, "found ");
              v101 = 0;
              WTF::String::number(v88);
              v103 = 0;
              WTF::String::String((WTF::String *)v104, " text tracks");
              v90 = 0;
              v91 = 0;
              v72 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
              LODWORD(v91) = 4;
              v90 = v72;
              v73 = HIDWORD(v91);
              *((_DWORD *)v72 + 4 * HIDWORD(v91)) = *(_DWORD *)buf;
              v74 = *(_QWORD *)&v98[4];
              if (*(_QWORD *)&v98[4])
                **(_DWORD **)&v98[4] += 2;
              *((_QWORD *)v72 + 2 * v73 + 1) = v74;
              *((_DWORD *)v72 + 4 * (v73 + 1)) = v99;
              v75 = v100;
              if (v100)
                *(_DWORD *)v100 += 2;
              *((_QWORD *)v72 + 2 * (v73 + 1) + 1) = v75;
              *((_DWORD *)v72 + 4 * (v73 + 2)) = v101;
              v76 = v102;
              if (v102)
                *(_DWORD *)v102 += 2;
              *((_QWORD *)v72 + 2 * (v73 + 2) + 1) = v76;
              *((_DWORD *)v72 + 4 * (v73 + 3)) = v103;
              v77 = v104[0];
              if (v104[0])
                *(_DWORD *)v104[0] += 2;
              *((_QWORD *)v72 + 2 * (v73 + 3) + 1) = v77;
              HIDWORD(v91) = v73 + 4;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v71 + 16))(v71, &WebCore::LogMedia, 3, &v90);
              v78 = v90;
              if (HIDWORD(v91))
              {
                v79 = 16 * HIDWORD(v91);
                v80 = (WTF::StringImpl **)((char *)v90 + 8);
                do
                {
                  v81 = *v80;
                  *v80 = 0;
                  if (v81)
                  {
                    if (*(_DWORD *)v81 == 2)
                      WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v62);
                    else
                      *(_DWORD *)v81 -= 2;
                  }
                  v80 += 2;
                  v79 -= 16;
                }
                while (v79);
                v78 = v90;
              }
              if (v78)
              {
                v90 = 0;
                LODWORD(v91) = 0;
                WTF::fastFree(v78, v62);
              }
              v82 = v104[0];
              v104[0] = 0;
              if (v82)
              {
                if (*(_DWORD *)v82 == 2)
                  WTF::StringImpl::destroy(v82, (WTF::StringImpl *)v62);
                else
                  *(_DWORD *)v82 -= 2;
              }
              v83 = v102;
              v102 = 0;
              if (v83)
              {
                if (*(_DWORD *)v83 == 2)
                  WTF::StringImpl::destroy(v83, (WTF::StringImpl *)v62);
                else
                  *(_DWORD *)v83 -= 2;
              }
              v84 = v100;
              v100 = 0;
              if (v84)
              {
                if (*(_DWORD *)v84 == 2)
                  WTF::StringImpl::destroy(v84, (WTF::StringImpl *)v62);
                else
                  *(_DWORD *)v84 -= 2;
              }
              v85 = *(WTF::StringImpl **)&v98[4];
              *(_QWORD *)&v98[4] = 0;
              if (v85)
              {
                if (*(_DWORD *)v85 == 2)
                  WTF::StringImpl::destroy(v85, (WTF::StringImpl *)v62);
                else
                  *(_DWORD *)v85 -= 2;
              }
              ++v69;
            }
            while (v69 != (uint64_t *)v70);
          }
          v86 = __ldxr(v64);
          if (v86 == 1)
          {
            if (!__stlxr(0, v64))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (unsigned __int8 *)v96;
  v96 = 0;
  if (!result)
  {
LABEL_180:
    if (!v5)
      return result;
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v5);
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_180;
  }
  result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v62);
  if (v5)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v5);
  return result;
}

BOOL WebCore::MediaPlayerPrivateAVFoundation::extractKeyURIKeyIDAndCertificateFromInitData(uint64_t a1, JSC::ArrayBufferView *a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  _BOOL8 v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t (*v17)();
  unint64_t v18;
  _QWORD *v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  WTF::StringImpl *v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  int v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _DWORD *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  BOOL v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  WTF *v75;
  WTF *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v80;
  void *v81;
  WTF *v82;
  _DWORD *v83;
  WTF::StringImpl *v84;
  uint64_t v86;
  void *v87;
  WTF *v88;
  WTF *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v95;
  void *v96;
  WTF *v97;
  WTF *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF **v108;
  char v109;
  WTF::StringImpl *v110;
  _DWORD *v111;
  WTF::StringImpl *v112;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  v10 = MEMORY[0x1E0CC10F8];
  v11 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v11)
  {
    if ((*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v5 & 0x3FFFFFFFFLL) + v11))
      return 0;
  }
  v12 = *(_BYTE *)(a1 + 6);
  if ((v12 & 3) != 0)
  {
    if (*(_BYTE *)(v4 + 64) && (v104 = *(_QWORD *)(v4 + 32)) != 0)
    {
      v63 = atomic_load((unint64_t *)(v104 + 32));
      v12 = *(_BYTE *)(a1 + 6);
    }
    else
    {
      v63 = *(_QWORD *)(v4 + 48);
    }
    v64 = *(_QWORD *)(a1 + 8);
    if ((v12 & 4) != 0)
    {
      v70 = v63 >= v64;
      v66 = v63 - v64;
      if (v70)
        return 0;
      if ((*(_BYTE *)(a1 + 4) - 4) > 7u)
        LOBYTE(v67) = 0;
      else
        v67 = qword_1969F7FC0[(char)(*(_BYTE *)(a1 + 4) - 4)];
      v13 = (-1 << v67) & v66;
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 16);
      if (v63 >= v64 && v13 + v64 <= v63)
        return 0;
    }
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 16);
  }
  if (v13 < 4)
    return 0;
  v15 = *(WTF::StringImpl **)(a1 + 32);
  v16 = *(_DWORD *)v15;
  *(_DWORD *)v15 += 2;
  v112 = v15;
  v17 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  if (!*((_QWORD *)v15 + 4))
    v17 = 0;
  if (v17)
  {
    __break(0xC471u);
    JUMPOUT(0x1961ECDE4);
  }
  *(_DWORD *)v15 = v16 + 4;
  v110 = v15;
  LOBYTE(v18) = 1;
  JSC::DataView::create();
  v19 = v110;
  v110 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 == 2;
    *(_DWORD *)v19 -= 2;
    if (v20)
      goto LABEL_124;
  }
  while (1)
  {
    v109 = v18;
    v21 = JSC::DataView::get<unsigned int>((uint64_t)v111, 0, 1, &v109);
    if (!v109)
    {
LABEL_156:
      v14 = 0;
      goto LABEL_157;
    }
    v22 = v21;
    v18 = v21 + 4;
    v23 = *(_QWORD *)(a1 + 32);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 16);
      if (!v24
        || (v25 = *(_QWORD *)(v10 + 56)) != 0
        && (*(_BYTE *)(v10 + 34) || !*MEMORY[0x1E0CC10F0])
        && !((v24 & 0x3FFFFFFFFLL) + v25))
      {
LABEL_122:
        v23 = 0;
        goto LABEL_23;
      }
      v26 = *(_BYTE *)(a1 + 6);
      if ((v26 & 3) != 0)
      {
        if (*(_BYTE *)(v23 + 64) && (v105 = *(_QWORD *)(v23 + 32)) != 0)
        {
          v68 = atomic_load((unint64_t *)(v105 + 32));
          v26 = *(_BYTE *)(a1 + 6);
        }
        else
        {
          v68 = *(_QWORD *)(v23 + 48);
        }
        v69 = *(_QWORD *)(a1 + 8);
        if ((v26 & 4) != 0)
        {
          v70 = v68 >= v69;
          v71 = v68 - v69;
          if (v70)
            goto LABEL_122;
          if ((*(_BYTE *)(a1 + 4) - 4) > 7u)
            LOBYTE(v72) = 0;
          else
            v72 = qword_1969F7FC0[(char)(*(_BYTE *)(a1 + 4) - 4)];
          v23 = (-1 << v72) & v71;
        }
        else
        {
          v70 = *(_QWORD *)(a1 + 16) + v69 <= v68 && v68 >= v69;
          if (v70)
            v23 = 0;
          else
            v23 = *(_QWORD *)(a1 + 16);
        }
      }
      else
      {
        v23 = *(_QWORD *)(a1 + 16);
      }
    }
LABEL_23:
    if (v23 < v18)
      goto LABEL_156;
    v27 = v112;
    if (!v112)
      goto LABEL_156;
    *(_DWORD *)v112 += 2;
    v110 = v27;
    v28 = v21;
    if (*((_BYTE *)v27 + 64) && (v101 = *((_QWORD *)v27 + 4)) != 0)
      v29 = *(_QWORD *)(v101 + 32);
    else
      v29 = *((_QWORD *)v27 + 6);
    v70 = v29 >= 4;
    v30 = v29 - 4;
    if (v70 && v21 <= v30 >> 1)
    {
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      JSC::ArrayBufferView::ArrayBufferView();
      v27 = v110;
      v110 = 0;
      if (!v27)
        goto LABEL_34;
    }
    else
    {
      v19 = 0;
      v110 = 0;
    }
    v20 = *(_DWORD *)v27 == 2;
    *(_DWORD *)v27 -= 2;
    if (v20)
    {
      v80 = *((_QWORD *)v27 + 10);
      if (v80)
      {
        *(_QWORD *)(v80 + 8) = 3;
        *((_QWORD *)v27 + 10) = 0;
      }
      if ((*((_BYTE *)v27 + 72) & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((WTF::StringImpl *)((char *)v27 + 72));
      JSC::ArrayBufferContents::~ArrayBufferContents((WTF::StringImpl *)((char *)v27 + 16));
      v108 = (WTF **)*((_QWORD *)v27 + 1);
      if ((v108 & 1) == 0 && v108)
      {
        v82 = *v108;
        if (*v108)
        {
          *v108 = 0;
          *((_DWORD *)v108 + 2) = 0;
          WTF::fastFree(v82, v81);
        }
        WTF::fastFree((WTF *)v108, v81);
      }
      WTF::fastFree(v27, v81);
      if (!v19)
        goto LABEL_156;
    }
    else if (!v19)
    {
      goto LABEL_156;
    }
LABEL_34:
    JSC::ArrayBufferView::span((JSC::ArrayBufferView *)v19);
    if (v31 >= v22)
      break;
LABEL_123:
    __break(1u);
LABEL_124:
    v73 = v19[10];
    if (v73)
    {
      *(_QWORD *)(v73 + 8) = 3;
      v19[10] = 0;
    }
    if ((v19[9] & 1) == 0)
      JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v19 + 9));
    JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v19 + 2));
    v75 = (WTF *)v19[1];
    if ((v75 & 1) == 0 && v75)
    {
      v76 = *(WTF **)v75;
      if (*(_QWORD *)v75)
      {
        *(_QWORD *)v75 = 0;
        *((_DWORD *)v75 + 2) = 0;
        WTF::fastFree(v76, v74);
      }
      WTF::fastFree(v75, v74);
    }
    WTF::fastFree((WTF *)v19, v74);
  }
  if ((v28 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1961ECED4);
  }
  WTF::String::String();
  v33 = v110;
  v110 = 0;
  v34 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v33;
  if (v34)
  {
    v35 = *(_DWORD *)v34 - 2;
    if (*(_DWORD *)v34 != 2)
      goto LABEL_38;
    WTF::StringImpl::destroy(v34, v32);
    v34 = v110;
    v110 = 0;
    if (v34)
    {
      v35 = *(_DWORD *)v34 - 2;
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v57);
      else
LABEL_38:
        *(_DWORD *)v34 = v35;
    }
  }
  v36 = JSC::DataView::get<unsigned int>((uint64_t)v111, v18, 1, &v109);
  if (!v109)
    goto LABEL_200;
  v18 = v22 + 8;
  v37 = v36 + v18;
  v38 = *(_QWORD *)(a1 + 32);
  if (v38)
  {
    v39 = *(_QWORD *)(v38 + 16);
    if (!v39)
      goto LABEL_177;
    v40 = *(_QWORD *)(v10 + 56);
    if (v40 && (*(_BYTE *)(v10 + 34) || !*MEMORY[0x1E0CC10F0]) && !((v39 & 0x3FFFFFFFFLL) + v40))
      goto LABEL_177;
    v41 = *(_BYTE *)(a1 + 6);
    if ((v41 & 3) == 0)
    {
      v38 = *(_QWORD *)(a1 + 16);
      goto LABEL_47;
    }
    if (*(_BYTE *)(v38 + 64) && (v106 = *(_QWORD *)(v38 + 32)) != 0)
    {
      v77 = atomic_load((unint64_t *)(v106 + 32));
      v41 = *(_BYTE *)(a1 + 6);
    }
    else
    {
      v77 = *(_QWORD *)(v38 + 48);
    }
    v78 = *(_QWORD *)(a1 + 8);
    if ((v41 & 4) == 0)
    {
      if (*(_QWORD *)(a1 + 16) + v78 <= v77 && v77 >= v78)
        v38 = 0;
      else
        v38 = *(_QWORD *)(a1 + 16);
      goto LABEL_47;
    }
    v70 = v77 >= v78;
    v90 = v77 - v78;
    if (v70)
    {
LABEL_177:
      v38 = 0;
      goto LABEL_47;
    }
    if ((*(_BYTE *)(a1 + 4) - 4) > 7u)
      LOBYTE(v91) = 0;
    else
      v91 = qword_1969F7FC0[(char)(*(_BYTE *)(a1 + 4) - 4)];
    v38 = (-1 << v91) & v90;
  }
LABEL_47:
  if (v38 < v37)
    goto LABEL_200;
  v42 = v112;
  if (!v112)
    goto LABEL_200;
  *(_DWORD *)v112 += 2;
  v110 = v42;
  v43 = v36;
  if (*((_BYTE *)v42 + 64) && (v102 = *((_QWORD *)v42 + 4)) != 0)
    v44 = *(_QWORD *)(v102 + 32);
  else
    v44 = *((_QWORD *)v42 + 6);
  v70 = v44 >= v18;
  v45 = v44 - v18;
  if (v70 && v45 >= v36)
  {
    a2 = (JSC::ArrayBufferView *)WTF::fastMalloc((WTF *)0x28);
    JSC::ArrayBufferView::ArrayBufferView();
    v42 = v110;
    v110 = 0;
    if (!v42)
      goto LABEL_59;
  }
  else
  {
    a2 = 0;
    v110 = 0;
  }
  v20 = *(_DWORD *)v42 == 2;
  *(_DWORD *)v42 -= 2;
  if (v20)
  {
    v18 = (unint64_t)v42;
    v95 = *((_QWORD *)v42 + 10);
    if (v95)
    {
      *(_QWORD *)(v95 + 8) = 3;
      *(_QWORD *)(v18 + 80) = 0;
    }
    if ((*(_BYTE *)(v18 + 72) & 1) == 0)
      JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v18 + 72));
    JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v18 + 16));
    v97 = *(WTF **)(v18 + 8);
    if ((v97 & 1) == 0 && v97)
    {
      v98 = *(WTF **)v97;
      if (*(_QWORD *)v97)
      {
        *(_QWORD *)v97 = 0;
        *((_DWORD *)v97 + 2) = 0;
        WTF::fastFree(v98, v96);
      }
      WTF::fastFree(v97, v96);
    }
    WTF::fastFree((WTF *)v18, v96);
    if (!a2)
    {
LABEL_200:
      v14 = 0;
      goto LABEL_201;
    }
  }
  else if (!a2)
  {
    goto LABEL_200;
  }
LABEL_59:
  JSC::ArrayBufferView::span(a2);
  if (v46 < v43)
    goto LABEL_123;
  if ((v43 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1961ED08CLL);
  }
  WTF::String::String();
  v48 = v110;
  v110 = 0;
  v49 = *a3;
  *a3 = v48;
  if (v49)
  {
    v50 = *(_DWORD *)v49 - 2;
    if (*(_DWORD *)v49 != 2)
      goto LABEL_63;
    WTF::StringImpl::destroy(v49, v47);
    v49 = v110;
    v110 = 0;
    if (v49)
    {
      v50 = *(_DWORD *)v49 - 2;
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v62);
      else
LABEL_63:
        *(_DWORD *)v49 = v50;
    }
  }
  v51 = JSC::DataView::get<unsigned int>((uint64_t)v111, v37, 1, &v109);
  if (!v109)
    goto LABEL_73;
  v52 = (v37 + 4);
  v53 = *(_QWORD *)(a1 + 32);
  if (!v53)
    goto LABEL_72;
  v54 = *(_QWORD *)(v53 + 16);
  if (!v54)
    goto LABEL_207;
  v55 = *(_QWORD *)(v10 + 56);
  if (v55 && (*(_BYTE *)(v10 + 34) || !*MEMORY[0x1E0CC10F0]) && !((v54 & 0x3FFFFFFFFLL) + v55))
    goto LABEL_207;
  v56 = *(_BYTE *)(a1 + 6);
  if ((v56 & 3) == 0)
  {
    v53 = *(_QWORD *)(a1 + 16);
    goto LABEL_72;
  }
  if (*(_BYTE *)(v53 + 64) && (v107 = *(_QWORD *)(v53 + 32)) != 0)
  {
    v92 = atomic_load((unint64_t *)(v107 + 32));
    v56 = *(_BYTE *)(a1 + 6);
  }
  else
  {
    v92 = *(_QWORD *)(v53 + 48);
  }
  v93 = *(_QWORD *)(a1 + 8);
  if ((v56 & 4) == 0)
  {
    if (*(_QWORD *)(a1 + 16) + v93 <= v92 && v92 >= v93)
      v53 = 0;
    else
      v53 = *(_QWORD *)(a1 + 16);
    goto LABEL_72;
  }
  v70 = v92 >= v93;
  v99 = v92 - v93;
  if (v70)
  {
LABEL_207:
    v53 = 0;
    goto LABEL_72;
  }
  if ((*(_BYTE *)(a1 + 4) - 4) > 7u)
    LOBYTE(v100) = 0;
  else
    v100 = qword_1969F7FC0[(char)(*(_BYTE *)(a1 + 4) - 4)];
  v53 = (-1 << v100) & v99;
LABEL_72:
  if (v53 >= v51 + v52)
  {
    if (v112)
    {
      if (*((_BYTE *)v112 + 64) && (v103 = *((_QWORD *)v112 + 4)) != 0)
        v58 = *(_QWORD *)(v103 + 32);
      else
        v58 = *((_QWORD *)v112 + 6);
      v59 = 0;
      v70 = v58 >= v52;
      v60 = v58 - v52;
      if (v70 && v60 >= v51)
      {
        v59 = WTF::fastMalloc((WTF *)0x28);
        JSC::ArrayBufferView::ArrayBufferView();
      }
    }
    else
    {
      v59 = 0;
    }
    v61 = (_DWORD *)*a4;
    *a4 = v59;
    if (v61)
    {
      if (*v61 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*v61;
    }
    v14 = *a4 != 0;
  }
  else
  {
LABEL_73:
    v14 = 0;
  }
  if (*(_DWORD *)a2 == 1)
    JSC::ArrayBufferView::operator delete();
  else
    --*(_DWORD *)a2;
LABEL_201:
  if (*(_DWORD *)v19 == 1)
    JSC::ArrayBufferView::operator delete();
  else
    --*(_DWORD *)v19;
LABEL_157:
  v83 = v111;
  v111 = 0;
  if (v83)
  {
    if (*v83 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v83;
  }
  v84 = v112;
  v112 = 0;
  if (v84)
  {
    v20 = *(_DWORD *)v84 == 2;
    *(_DWORD *)v84 -= 2;
    if (v20)
    {
      v86 = *((_QWORD *)v84 + 10);
      if (v86)
      {
        *(_QWORD *)(v86 + 8) = 3;
        *((_QWORD *)v84 + 10) = 0;
      }
      if ((*((_BYTE *)v84 + 72) & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((WTF::StringImpl *)((char *)v84 + 72));
      JSC::ArrayBufferContents::~ArrayBufferContents((WTF::StringImpl *)((char *)v84 + 16));
      v88 = (WTF *)*((_QWORD *)v84 + 1);
      if ((v88 & 1) == 0 && v88)
      {
        v89 = *(WTF **)v88;
        if (*(_QWORD *)v88)
        {
          *(_QWORD *)v88 = 0;
          *((_DWORD *)v88 + 2) = 0;
          WTF::fastFree(v89, v87);
        }
        WTF::fastFree(v88, v87);
      }
      WTF::fastFree(v84, v87);
    }
  }
  return v14;
}

BOOL WebCore::MediaPlayerPrivateAVFoundation::canSaveMediaData(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  _BOOL8 v4;
  WTF::StringImpl *v6;
  __int128 v7;

  v2 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  if (v2)
    *(_DWORD *)v2 += 2;
  v6 = v2;
  v7 = *((_OWORD *)this + 14);
  if ((WTF::URL::protocolIs() & 1) != 0)
  {
    v4 = 1;
  }
  else if ((v7 & 2) != 0)
  {
    (*(void (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 336))(this);
    v4 = ((unint64_t)v3 & 0x400000000) == 0;
  }
  else
  {
    v4 = 0;
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v4;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::shouldEnableInheritURIQueryComponent(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  WebCore::MediaPlayerPrivateAVFoundation *v6;
  uint64_t v7;

  {
    v6 = this;
    WTF::AtomStringImpl::add();
    this = v6;
    WebCore::MediaPlayerPrivateAVFoundation::shouldEnableInheritURIQueryComponent(void)const::iTunesInheritsURIQueryComponent = v7;
  }
  v1 = *((_QWORD *)this + 11);
  if (v1)
  {
    v2 = *((_QWORD *)this + 12);
    if (__ldaxr((unsigned __int8 *)v1))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v1))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v1);
LABEL_8:
    if (*(_QWORD *)(v1 + 24))
      ++*(_QWORD *)(v1 + 8);
    else
      v2 = 0;
    v4 = __ldxr((unsigned __int8 *)v1);
    if (v4 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v1))
      {
        if (v2)
        {
LABEL_14:
          v1 = (*(uint64_t (**)(_QWORD, uint64_t *, _QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 8) + 8) + 320))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8), &WebCore::MediaPlayerPrivateAVFoundation::shouldEnableInheritURIQueryComponent(void)const::iTunesInheritsURIQueryComponent, 0);
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
          return v1;
        }
        return 0;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v2)
      goto LABEL_14;
    return 0;
  }
  return v1;
}

char *`non-virtual thunk to'WebCore::MediaPlayerPrivateAVFoundation::logChannel(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  return &WebCore::LogMedia;
}

void *WebCore::SampleBufferDisplayLayer::setCreator(void *result)
{
  WebCore::SampleBufferDisplayLayer::m_layerCreator = result;
  return result;
}

void WebCore::SampleBufferDisplayLayer::create(PAL *a1@<X0>, uint64_t *a2@<X8>, __int16 a3, const void *a4)
{
  if (WebCore::SampleBufferDisplayLayer::m_layerCreator)
    WebCore::SampleBufferDisplayLayer::m_layerCreator(a2, a1);
  else
    WebCore::LocalSampleBufferDisplayLayer::create(a1, a2, a3, a4);
}

WTF::StringImpl *WebCore::AudioTrackPrivateMediaSourceAVFObjC::resetPropertiesFromTrack(WebCore::AudioTrackPrivateMediaSourceAVFObjC *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  *((_BYTE *)this + 88) = WebCore::AVTrackPrivateAVFObjCImpl::audioKind(*((WebCore::AVTrackPrivateAVFObjCImpl **)this
                                                                        + 16));
  v2 = *((_QWORD *)this + 16);
  v3 = *(void **)(v2 + 32);
  if (v3)
  {
    v4 = (int)objc_msgSend(v3, "trackID");
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 24);
    if (v5)
      v4 = objc_msgSend((id)objc_msgSend(*(id *)(v5 + 16), "optionID"), "unsignedLongLongValue");
    else
      v4 = 0;
  }
  *((_QWORD *)this + 12) = v4;
  WebCore::AVTrackPrivateAVFObjCImpl::label(*((WebCore::AVTrackPrivateAVFObjCImpl **)this + 16), &v12);
  v7 = v12;
  if (v12)
    *(_DWORD *)v12 += 2;
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v6);
      v7 = v12;
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
  v12 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::AVTrackPrivateAVFObjCImpl::language(*((WTF::StringImpl **)this + 16), &v12);
  result = v12;
  if (v12)
    *(_DWORD *)v12 += 2;
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = result;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v9);
      result = v12;
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::AudioTrackPrivateMediaSourceAVFObjC::setEnabled(_BYTE *this, int a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((this[48] != 0) != a2 && this[48] != a2)
  {
    v3 = a2;
    v4 = (uint64_t)this;
    this[48] = a2;
    v5 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v5 = off_1E32066C8;
    *(_BYTE *)(v5 + 8) = v3;
    v7 = v5;
    WebCore::TrackPrivateBase::notifyClients(v4, &v7);
    v6 = v7;
    v7 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    this = *(_BYTE **)(v4 + 80);
    if (this)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)this + 16))(this, v4, *(unsigned __int8 *)(v4 + 48));
  }
  return this;
}

uint64_t WebCore::VideoTrackPrivateAVFObjC::VideoTrackPrivateAVFObjC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  *(_DWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_BYTE *)(a1 + 104) = 6;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)a1 = off_1E3410C68;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 144) = v3;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v4[1] = a1;
  *(_QWORD *)(a1 + 152) = 0;
  v5 = (uint64_t *)(a1 + 152);
  *v4 = off_1E34114D0;
  *(_QWORD *)(a1 + 160) = v4;
  v6 = *(_QWORD *)(a1 + 144);
  v7 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = a1 + 152;
  v9 = *(unsigned int **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v7;
  if (!v9)
    goto LABEL_14;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  v7 = *v5;
  if (*v5)
  {
LABEL_14:
    do
      v12 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v12 + 1, (unsigned int *)v7));
  }
  v13 = *(unsigned int **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v7;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v8);
    }
  }
  WebCore::VideoTrackPrivateAVFObjC::resetPropertiesFromTrack((WebCore::VideoTrackPrivateAVFObjC *)a1);
  return a1;
}

WTF::StringImpl *WebCore::VideoTrackPrivateAVFObjC::resetPropertiesFromTrack(WebCore::VideoTrackPrivateAVFObjC *this)
{
  uint64_t v2;
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  const WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *result;
  WTF::StringImpl *v27[5];

  v2 = *((_QWORD *)this + 18);
  v3 = *(void **)(v2 + 8);
  if (v3)
  {
    v4 = objc_msgSend(v3, "isEnabled");
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 24);
    v4 = v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0 && *(_QWORD *)(v6 + 32) == v5;
  }
  if (*((unsigned __int8 *)this + 48) != v4)
  {
    *((_BYTE *)this + 48) = v4;
    v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v7 = off_1E32066A0;
    *((_BYTE *)v7 + 8) = v4;
    v27[0] = v7;
    WebCore::TrackPrivateBase::notifyClients((uint64_t)this, (uint64_t *)v27);
    v8 = v27[0];
    v27[0] = 0;
    if (v8)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 12);
    if (v9)
      (*(void (**)(uint64_t, WebCore::VideoTrackPrivateAVFObjC *, _QWORD))(*(_QWORD *)v9 + 16))(v9, this, *((unsigned __int8 *)this + 48));
  }
  v10 = *((_QWORD *)this + 18);
  v11 = *(void **)(v10 + 32);
  if (v11)
  {
    v12 = objc_msgSend(v11, "trackID");
  }
  else
  {
    v13 = *(_QWORD *)(v10 + 24);
    if (v13)
      v12 = objc_msgSend((id)objc_msgSend(*(id *)(v13 + 16), "optionID"), "unsignedLongLongValue");
    else
      v12 = 0;
  }
  *((_DWORD *)this + 34) = v12;
  *((_BYTE *)this + 104) = WebCore::AVTrackPrivateAVFObjCImpl::videoKind(*((WebCore::AVTrackPrivateAVFObjCImpl **)this
                                                                         + 18));
  v14 = *((_QWORD *)this + 18);
  v15 = *(void **)(v14 + 32);
  if (v15)
  {
    v16 = (int)objc_msgSend(v15, "trackID");
  }
  else
  {
    v17 = *(_QWORD *)(v14 + 24);
    if (v17)
      v16 = objc_msgSend((id)objc_msgSend(*(id *)(v17 + 16), "optionID"), "unsignedLongLongValue");
    else
      v16 = 0;
  }
  *((_QWORD *)this + 14) = v16;
  WebCore::AVTrackPrivateAVFObjCImpl::label(*((WebCore::AVTrackPrivateAVFObjCImpl **)this + 18), v27);
  v19 = v27[0];
  if (v27[0])
    *(_DWORD *)v27[0] += 2;
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = v19;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::destroy(v20, v18);
      v19 = v27[0];
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  v27[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  WebCore::AVTrackPrivateAVFObjCImpl::language(*((WTF::StringImpl **)this + 18), v27);
  v22 = v27[0];
  if (v27[0])
    *(_DWORD *)v27[0] += 2;
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::destroy(v23, v21);
      v22 = v27[0];
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v27[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  WebCore::AVTrackPrivateAVFObjCImpl::videoTrackConfiguration(*((WebCore::AVTrackPrivateAVFObjCImpl **)this + 18), (uint64_t)v27);
  WebCore::VideoTrackPrivate::setConfiguration((uint64_t)this, (uint64_t)v27, v24);
  result = v27[0];
  v27[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void *WebCore::VideoTrackPrivateAVFObjC::setSelected(WebCore::VideoTrackPrivateAVFObjC *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;

  if (*((unsigned __int8 *)this + 48) != (_DWORD)a2)
  {
    *((_BYTE *)this + 48) = a2;
    v4 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E32066A0;
    *(_BYTE *)(v4 + 8) = a2;
    v13 = v4;
    WebCore::TrackPrivateBase::notifyClients((uint64_t)this, &v13);
    v5 = v13;
    v13 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 12);
    if (v6)
      (*(void (**)(uint64_t, WebCore::VideoTrackPrivateAVFObjC *, _QWORD))(*(_QWORD *)v6 + 16))(v6, this, *((unsigned __int8 *)this + 48));
  }
  v7 = *((_QWORD *)this + 18);
  result = *(void **)(v7 + 8);
  if (result)
    return (void *)objc_msgSend(result, "setEnabled:", a2);
  v9 = *(_QWORD *)(v7 + 24);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 32);
      if ((v11 == v9) != (_DWORD)a2)
      {
        if (!(_DWORD)a2)
          v9 = 0;
        if (v11 != v9)
        {
          *(_BYTE *)(v10 + 96) = 0;
          *(_QWORD *)(v10 + 32) = v9;
          if ((*(_QWORD *)(v10 + 72) & 0xFFFFFFFFFFFFLL) != 0
            && *(double *)((*(_QWORD *)(v10 + 72) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
          {
            result = (void *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v10 + 40));
          }
          *(_QWORD *)(v10 + 64) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
          return (void *)WebCore::TimerBase::setNextFireTime(v10 + 40, v12 + 0.0);
        }
      }
    }
  }
  return result;
}

BOOL WebCore::GraphicsLayer::supportsLayerType(unsigned int a1)
{
  return a1 < 7;
}

BOOL WebCore::GraphicsLayerCA::filtersCanBeComposited(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v5;
  uint64_t v6;

  v2 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v2)
  {
    v5 = 0;
    v3 = 0;
    v6 = *a2;
    do
    {
      if (!*(_BYTE *)(*(_QWORD *)(v6 + 8 * v5) + 12))
        break;
      if (*(_BYTE *)(*(_QWORD *)(v6 + 8 * v5) + 12) == 11 && v2 - 1 > v5)
        break;
      v3 = ++v5 >= v2;
    }
    while (v2 != v5);
  }
  else
  {
    return 0;
  }
  return v3;
}

uint64_t WebCore::GraphicsLayerCA::createPlatformCALayer@<X0>(int a1@<W1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  WebCore::Widget *v8;
  int v9;
  uint64_t v10;

  v6 = WTF::fastMalloc((WTF *)0xD8);
  result = WebCore::PlatformCALayerCocoa::PlatformCALayerCocoa(v6, a1, a2);
  v9 = *(unsigned __int8 *)(v6 + 12);
  if (v9 == 1 || (v9 - 4) <= 2)
  {
    v10 = WebCore::screenSupportsExtendedColor(0, v8);
    result = WebCore::PlatformCALayerCocoa::setWantsDeepColorBackingStore(v6, v10);
  }
  *a3 = v6;
  return result;
}

void sub_1961EDD68(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::GraphicsLayerCA::createPlatformCALayer(CALayer *a1@<X1>, WebCore::PlatformCALayerClient *a2@<X2>, WebCore::PlatformCALayerCocoa **a3@<X8>)
{
  WebCore::PlatformCALayerCocoa *v7;

  v7 = (WebCore::PlatformCALayerCocoa *)WTF::fastMalloc((WTF *)0xD8);
  WebCore::PlatformCALayerCocoa::PlatformCALayerCocoa(v7, a1, a2);
  *a3 = v7;
}

void sub_1961EDDC4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::GraphicsLayerCA::createPlatformCALayer@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  WebCore::Widget *v6;
  int v7;
  uint64_t v8;

  v4 = WTF::fastMalloc((WTF *)0xD8);
  result = WebCore::PlatformCALayerCocoa::PlatformCALayerCocoa(v4, 0, a1);
  v7 = *(unsigned __int8 *)(v4 + 12);
  if (v7 == 1 || (v7 - 4) <= 2)
  {
    v8 = WebCore::screenSupportsExtendedColor(0, v6);
    result = WebCore::PlatformCALayerCocoa::setWantsDeepColorBackingStore(v4, v8);
  }
  *a2 = v4;
  return result;
}

{
  uint64_t v4;
  uint64_t result;
  WebCore::Widget *v6;
  int v7;
  uint64_t v8;

  v4 = WTF::fastMalloc((WTF *)0xD8);
  result = WebCore::PlatformCALayerCocoa::PlatformCALayerCocoa(v4, 0, a1);
  v7 = *(unsigned __int8 *)(v4 + 12);
  if (v7 == 1 || (v7 - 4) <= 2)
  {
    v8 = WebCore::screenSupportsExtendedColor(0, v6);
    result = WebCore::PlatformCALayerCocoa::setWantsDeepColorBackingStore(v4, v8);
  }
  *a2 = v4;
  return result;
}

void sub_1961EDE4C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1961EDED4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::GraphicsLayerCA::createPlatformCALayerHost@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  WebCore::Widget *v6;
  int v7;
  uint64_t v8;

  v4 = WTF::fastMalloc((WTF *)0xD8);
  result = WebCore::PlatformCALayerCocoa::PlatformCALayerCocoa(v4, 0, a1);
  v7 = *(unsigned __int8 *)(v4 + 12);
  if (v7 == 1 || (v7 - 4) <= 2)
  {
    v8 = WebCore::screenSupportsExtendedColor(0, v6);
    result = WebCore::PlatformCALayerCocoa::setWantsDeepColorBackingStore(v4, v8);
  }
  *a2 = v4;
  return result;
}

void sub_1961EDF5C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::GraphicsLayerCA::createPlatformVideoLayer@<X0>(WebCore::PlatformCALayerClient *a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v6;
  uint64_t result;
  WebCore::Widget *v8;
  int v9;
  uint64_t v10;

  v6 = WTF::fastMalloc((WTF *)0xD8);
  result = WebCore::PlatformCALayerCocoa::PlatformCALayerCocoa(v6, 0, (uint64_t)a1);
  v9 = *(unsigned __int8 *)(v6 + 12);
  if (v9 == 1 || (v9 - 4) <= 2)
  {
    v10 = WebCore::screenSupportsExtendedColor(0, v8);
    result = WebCore::PlatformCALayerCocoa::setWantsDeepColorBackingStore(v6, v10);
  }
  *a2 = v6;
  return result;
}

void sub_1961EDFE4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::GraphicsLayerCA::createPlatformCAAnimation@<X0>(int a1@<W1>, _QWORD *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x18);
  result = WebCore::PlatformCAAnimationCocoa::PlatformCAAnimationCocoa(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_1961EE040(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t *WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>::operator=<WebCore::PlatformCALayer>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E334ED68;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return a1;
}

void WTF::HashMap<WebCore::GraphicsLayerCA const*,std::pair<WebCore::FloatRect,std::unique_ptr<WebCore::DisplayList::DisplayList>>,WTF::DefaultHash<WebCore::GraphicsLayerCA const*>,WTF::HashTraits<WebCore::GraphicsLayerCA const*>,WTF::HashTraits<std::pair<WebCore::FloatRect,std::unique_ptr<WebCore::DisplayList::DisplayList>>>,WTF::HashTableTraits>::remove(uint64_t a1)
{
  unsigned int v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  if (qword_1ECE83E78)
  {
    v1 = *(_DWORD *)(qword_1ECE83E78 - 8);
    v2 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
    v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
    v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
    v5 = v1 & ((v4 >> 31) ^ v4);
    v6 = *(_QWORD *)(qword_1ECE83E78 + 32 * v5);
    if (v6 != a1)
    {
      v7 = 1;
      while (v6)
      {
        v5 = ((_DWORD)v5 + v7) & v1;
        v6 = *(_QWORD *)(qword_1ECE83E78 + 32 * v5);
        ++v7;
        if (v6 == a1)
          goto LABEL_8;
      }
      v5 = *(unsigned int *)(qword_1ECE83E78 - 4);
    }
LABEL_8:
    if (v5 != *(_DWORD *)(qword_1ECE83E78 - 4))
    {
      v8 = (_QWORD *)(qword_1ECE83E78 + 32 * v5);
      *v8 = -1;
      v11 = (WTF *)v8[3];
      v9 = v8 + 3;
      v10 = v11;
      *v9 = 0;
      if (v11)
        std::default_delete<WebCore::DisplayList::DisplayList>::operator()[abi:sn180100]((int)v9, v10);
      v12 = qword_1ECE83E78;
      ++*(_DWORD *)(qword_1ECE83E78 - 16);
      if (v12)
        v13 = *(_DWORD *)(v12 - 12) - 1;
      else
        v13 = -1;
      *(_DWORD *)(v12 - 12) = v13;
      if (qword_1ECE83E78)
      {
        v14 = *(_DWORD *)(qword_1ECE83E78 - 4);
        if (6 * *(_DWORD *)(qword_1ECE83E78 - 12) < v14 && v14 >= 9)
          WTF::HashTable<WebCore::GraphicsLayerCA const*,WTF::KeyValuePair<WebCore::GraphicsLayerCA const*,std::pair<WebCore::FloatRect,std::unique_ptr<WebCore::DisplayList::DisplayList>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::GraphicsLayerCA const*,std::pair<WebCore::FloatRect,std::unique_ptr<WebCore::DisplayList::DisplayList>>>>,WTF::DefaultHash<WebCore::GraphicsLayerCA const*>,WTF::HashMap<WebCore::GraphicsLayerCA const*,std::pair<WebCore::FloatRect,std::unique_ptr<WebCore::DisplayList::DisplayList>>,WTF::DefaultHash<WebCore::GraphicsLayerCA const*>,WTF::HashTraits<WebCore::GraphicsLayerCA const*>,WTF::HashTraits<std::pair<WebCore::FloatRect,std::unique_ptr<WebCore::DisplayList::DisplayList>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::GraphicsLayerCA const*>>::rehash(v14 >> 1, 0);
      }
    }
  }
}

void `non-virtual thunk to'WebCore::GraphicsLayerCA::~GraphicsLayerCA(WebCore::GraphicsLayerCA *this)
{
  WebCore::GraphicsLayerCA::~GraphicsLayerCA((WebCore::GraphicsLayerCA *)((char *)this - 608));
}

{
  WTF *v1;
  void *v2;

  WebCore::GraphicsLayerCA::~GraphicsLayerCA((WebCore::GraphicsLayerCA *)((char *)this - 608));
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::GraphicsLayerCA::platformLayer(WebCore::GraphicsLayerCA *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 79);
  if (!v2)
    v2 = *((_QWORD *)this + 78);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
}

uint64_t WebCore::GraphicsLayerCA::setChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = WebCore::GraphicsLayer::setChildren(a1, a2);
  if ((_DWORD)v3)
    WebCore::GraphicsLayerCA::noteSublayersChanged(a1, 0);
  return v3;
}

uint64_t WebCore::GraphicsLayerCA::addChild(uint64_t a1, unint64_t a2)
{
  WebCore::GraphicsLayer::addChild(a1, a2);
  return WebCore::GraphicsLayerCA::noteSublayersChanged(a1, 0);
}

uint64_t WebCore::GraphicsLayerCA::addChildAtIndex(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 200);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 912))(v7);
    v8 = *(_QWORD *)(v6 + 200);
    if (v8)
    {
      *(_QWORD *)(v6 + 200) = 0;
      v9 = *(unsigned int *)(v8 + 196);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD **)(v8 + 184);
        v11 = v10 + 1;
        v12 = *(unsigned int *)(v8 + 196);
        while (*v10 != v6)
        {
          ++v10;
          ++v11;
          if (!--v12)
            goto LABEL_12;
        }
        *v10 = 0;
        if (v6)
        {
          if (*(_DWORD *)(v6 + 8) == 1)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
            v9 = *(unsigned int *)(v8 + 196);
          }
          else
          {
            --*(_DWORD *)(v6 + 8);
          }
        }
        memmove(v10, v10 + 1, *(_QWORD *)(v8 + 184) + 8 * v9 - (_QWORD)v11);
        --*(_DWORD *)(v8 + 196);
      }
    }
  }
LABEL_12:
  *(_QWORD *)(*(_QWORD *)a2 + 200) = a1;
  WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>(a1 + 184, a3, a2);
  return WebCore::GraphicsLayerCA::noteSublayersChanged(a1, 0);
}

uint64_t WebCore::GraphicsLayerCA::addChildBelow(uint64_t a1, WebCore::GraphicsLayer **a2, uint64_t a3)
{
  WebCore::GraphicsLayer::addChildBelow(a1, a2, a3);
  return WebCore::GraphicsLayerCA::noteSublayersChanged(a1, 0);
}

uint64_t WebCore::GraphicsLayerCA::addChildAbove(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore::GraphicsLayer::addChildAbove(a1, a2, a3);
  return WebCore::GraphicsLayerCA::noteSublayersChanged(a1, 0);
}

BOOL WebCore::GraphicsLayerCA::replaceChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _BOOL8 v4;

  v4 = WebCore::GraphicsLayer::replaceChild(a1, a2, a3);
  if (v4)
    WebCore::GraphicsLayerCA::noteSublayersChanged(a1, 0);
  return v4;
}

uint64_t WebCore::GraphicsLayerCA::propagateLayerChangeToReplicas(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result)
  {
    v1 = (_QWORD *)result;
    do
    {
      result = (*(uint64_t (**)(_QWORD *))(*v1 + 848))(v1);
      if ((result & 1) == 0)
      {
LABEL_12:
        __break(0xC471u);
        JUMPOUT(0x1961EE4B4);
      }
      if (!v1[86])
        return result;
      v2 = v1[27];
      if (v2)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 848))(v1[27]) & 1) == 0)
          goto LABEL_12;
        result = WebCore::GraphicsLayerCA::noteLayerPropertyChanged(v2, 0x200000, 0);
      }
      v1 = (_QWORD *)v1[25];
    }
    while (v1);
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::setReplicatedLayer(uint64_t this, WebCore::GraphicsLayer *a2)
{
  uint64_t v2;
  uint64_t i;

  if (*(WebCore::GraphicsLayer **)(this + 224) != a2)
  {
    *(_QWORD *)(this + 224) = a2;
    if ((*(_WORD *)(this + 177) & 1) == 0)
    {
      v2 = *(_QWORD *)(this + 616);
      *(_QWORD *)(this + 616) = v2 | 0x200004;
      if (!*(_BYTE *)(this + 889))
      {
        for (i = *(_QWORD *)(this + 200); i; i = *(_QWORD *)(i + 200))
        {
          if ((*(_BYTE *)(i + 890) & 0x40) != 0)
            break;
          *(_BYTE *)(i + 890) |= 0x40u;
        }
      }
      if (!v2)
        return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(this + 24) + 40))(*(_QWORD *)(this + 24), this);
    }
  }
  return this;
}

uint64_t WebCore::GraphicsLayerCA::syncPosition(uint64_t this, const WebCore::FloatPoint *a2)
{
  if (*(float *)a2 != *(float *)(this + 56) || *((float *)a2 + 1) != *(float *)(this + 60))
  {
    *(_QWORD *)(this + 56) = *(_QWORD *)a2;
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(this, 0x2000000000, 1);
  }
  return this;
}

uint64_t WebCore::GraphicsLayerCA::setApproximatePosition(uint64_t this, const WebCore::FloatPoint *a2)
{
  uint64_t v3;

  if (!*(_BYTE *)(this + 72))
  {
    v3 = *(_QWORD *)a2;
    *(_BYTE *)(this + 72) = 1;
    goto LABEL_8;
  }
  if (*(float *)a2 != *(float *)(this + 64) || *((float *)a2 + 1) != *(float *)(this + 68))
  {
    v3 = *(_QWORD *)a2;
LABEL_8:
    *(_QWORD *)(this + 64) = v3;
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(this, 0x2000000000, 1);
  }
  return this;
}

uint64_t WebCore::GraphicsLayerCA::setBoundsOrigin(uint64_t this, const WebCore::FloatPoint *a2)
{
  if (*(float *)a2 != *(float *)(this + 96) || *((float *)a2 + 1) != *(float *)(this + 100))
  {
    *(_QWORD *)(this + 96) = *(_QWORD *)a2;
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(this, 8, 0);
  }
  return this;
}

_DWORD *WebCore::GraphicsLayerCA::moveOrCopyLayerAnimation(int a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  _DWORD *result;
  _DWORD *v13;

  (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(_QWORD *)a5 + 200))(&v13, a5);
  result = v13;
  if (!v13)
    return result;
  if (a4 && (*(double (**)(void))(*(_QWORD *)v13 + 56))() != *(double *)&a3)
    (*(void (**)(_DWORD *, double))(*(_QWORD *)v13 + 64))(v13, *(double *)&a3);
  if (a1 != 1)
  {
    if (a1)
      goto LABEL_9;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 192))(a5, a2);
  }
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a6 + 184))(a6, a2, v13);
LABEL_9:
  result = v13;
  v13 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *WebCore::GraphicsLayerCA::moveOrCopyAnimations(WTF::StringImpl *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v8;
  uint64_t v9;
  double v10;
  char v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13[7];

  if (a2)
  {
    v13[5] = v4;
    v13[6] = v5;
    v8 = (uint64_t)result;
    v9 = 56 * a2;
    do
    {
      if (*(unsigned __int8 *)(v8 + 16) - 1 <= 6)
      {
        WebCore::GraphicsLayerCA::LayerPropertyAnimation::animationIdentifier((WebCore::GraphicsLayerCA::LayerPropertyAnimation *)v13, v8);
        if (*(_BYTE *)(v8 + 40))
        {
          v10 = *(double *)(v8 + 32) - *(double *)(v8 + 24);
          v11 = 1;
        }
        else
        {
          v11 = 0;
          v10 = 0.0;
        }
        WebCore::GraphicsLayerCA::moveOrCopyLayerAnimation(1, (uint64_t)v13, *(uint64_t *)&v10, v11, a3, a4);
        result = v13[0];
        v13[0] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
          else
            *(_DWORD *)result -= 2;
        }
      }
      v8 += 56;
      v9 -= 56;
    }
    while (v9);
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::setUsesDisplayListDrawing(uint64_t this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  __int16 v7;
  unsigned int v8;

  if (((((*(_WORD *)(this + 177) & 0x200) == 0) ^ a2) & 1) == 0)
  {
    v3 = this;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 320))(this);
    v5 = *(unsigned __int16 *)(v3 + 177);
    v4 = v3 + 177;
    v6 = v5 | (*(unsigned __int8 *)(v4 + 2) << 16);
    if (a2)
      v7 = 512;
    else
      v7 = 0;
    v8 = v6 & 0xFFFFFDFF;
    *(_WORD *)v4 = v8 | v7;
    *(_BYTE *)(v4 + 2) = BYTE2(v8);
  }
  return this;
}

uint64_t WebCore::GraphicsLayer::clearFilters(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  unsigned int **v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int **v12;
  uint64_t v13;

  v2 = this + 136;
  v3 = *(unsigned int *)(this + 148);
  if ((_DWORD)v3)
  {
    v5 = *(unsigned int ***)v2;
    v6 = *(_QWORD *)v2 + 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        v8 = v7 + 2;
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v7 + 2);
          v12 = v5;
          v13 = this;
          v11 = v6;
          (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
          v6 = v11;
          v5 = v12;
          this = v13;
        }
      }
      ++v5;
    }
    while (v5 != (unsigned int **)v6);
  }
  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(this + 136) = 0;
    *(_DWORD *)(this + 144) = 0;
    this = WTF::fastFree(v4, a2);
  }
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  return this;
}

uint64_t WebCore::GraphicsLayer::clearBackdropFilters(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  unsigned int **v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int **v12;
  uint64_t v13;

  v2 = this + 152;
  v3 = *(unsigned int *)(this + 164);
  if ((_DWORD)v3)
  {
    v5 = *(unsigned int ***)v2;
    v6 = *(_QWORD *)v2 + 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        v8 = v7 + 2;
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v7 + 2);
          v12 = v5;
          v13 = this;
          v11 = v6;
          (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
          v6 = v11;
          v5 = v12;
          this = v13;
        }
      }
      ++v5;
    }
    while (v5 != (unsigned int **)v6);
  }
  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(this + 152) = 0;
    *(_DWORD *)(this + 160) = 0;
    this = WTF::fastFree(v4, a2);
  }
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  return this;
}

uint64_t WebCore::GraphicsLayerCA::setIsBackdropRoot(WebCore::GraphicsLayerCA *this, int a2)
{
  unsigned int v2;

  v2 = (*(unsigned __int16 *)((char *)this + 177) | (*((unsigned __int8 *)this + 179) << 16)) & 0xFFFEFFFF;
  *(_WORD *)((char *)this + 177) = *(_WORD *)((char *)this + 177);
  *((_BYTE *)this + 179) = BYTE2(v2) | (a2 != 0);
  return WebCore::GraphicsLayerCA::noteLayerPropertyChanged((uint64_t)this, 0x200000000000, 0);
}

uint64_t WebCore::GraphicsLayerCA::setBackdropFiltersRect(WebCore::GraphicsLayerCA *this, const WebCore::FloatRoundedRect *a2)
{
  _OWORD *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;

  v4 = (_OWORD *)((char *)this + 328);
  result = WebCore::operator==((float *)a2, (float *)this + 82);
  if ((result & 1) == 0)
  {
    v6 = *(_OWORD *)a2;
    v7 = *((_OWORD *)a2 + 2);
    v4[1] = *((_OWORD *)a2 + 1);
    v4[2] = v7;
    *v4 = v6;
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged((uint64_t)this, 0x20000000, 0);
  }
  return result;
}

BOOL WebCore::operator==(float *a1, float *a2)
{
  uint64_t v6;

  if (*a1 != *a2 || a1[1] != a2[1])
    return 0;
  if (a1[2] != a2[2] || a1[3] != a2[3])
    return 0;
  if (a1[4] != a2[4] || a1[5] != a2[5])
    return 0;
  if (a1[6] != a2[6] || a1[7] != a2[7])
    return 0;
  v6 = 0;
  if (a1[8] == a2[8] && a1[9] == a2[9])
    return a1[11] == a2[11] && a1[10] == a2[10];
  return v6;
}

uint64_t WebCore::GraphicsLayerCA::backingStoreAttached(WebCore::GraphicsLayerCA *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 78) + 544))(*((_QWORD *)this + 78));
}

uint64_t WebCore::GraphicsLayerCA::backingStoreAttachedForTesting(WebCore::GraphicsLayerCA *this)
{
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 78) + 544))(*((_QWORD *)this + 78)) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 78) + 480))(*((_QWORD *)this + 78));
}

uint64_t WebCore::GraphicsLayerCA::setContentsNeedsDisplay(WebCore::GraphicsLayerCA *this)
{
  return WebCore::GraphicsLayerCA::noteLayerPropertyChanged((uint64_t)this, 0x400000, 0);
}

uint64_t WebCore::GraphicsLayerCA::setVideoGravity(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t i;

  if (*(unsigned __int8 *)(result + 520) != a2)
  {
    *(_BYTE *)(result + 520) = a2;
    if ((*(_WORD *)(result + 177) & 1) == 0)
    {
      v2 = *(_QWORD *)(result + 616);
      *(_QWORD *)(result + 616) = v2 | 0x100000000000;
      if (!*(_BYTE *)(result + 889))
      {
        for (i = *(_QWORD *)(result + 200); i; i = *(_QWORD *)(i + 200))
        {
          if ((*(_BYTE *)(i + 890) & 0x40) != 0)
            break;
          *(_BYTE *)(i + 890) |= 0x40u;
        }
      }
      if (!v2)
        return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), result);
    }
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::setShapeLayerPath(uint64_t this, const WebCore::Path *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  char v8;

  v2 = this;
  v3 = *(unsigned int *)(this + 592);
  v4 = *((unsigned int *)a2 + 16);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      goto LABEL_6;
  }
  else if ((_DWORD)v4 == -1)
  {
    this = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_6[v3])(&v8, this + 536);
    *(_DWORD *)(v2 + 592) = -1;
    goto LABEL_6;
  }
  v7 = this + 536;
  this = ((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_0[v4])(&v7);
LABEL_6:
  if ((*(_WORD *)(v2 + 177) & 1) == 0)
  {
    v5 = *(_QWORD *)(v2 + 616);
    *(_QWORD *)(v2 + 616) = v5 | 0x400000000;
    if (!*(_BYTE *)(v2 + 889))
    {
      for (i = *(_QWORD *)(v2 + 200); i; i = *(_QWORD *)(i + 200))
      {
        if ((*(_BYTE *)(i + 890) & 0x40) != 0)
          break;
        *(_BYTE *)(i + 890) |= 0x40u;
      }
    }
    if (!v5)
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 24) + 40))(*(_QWORD *)(v2 + 24), v2);
  }
  return this;
}

uint64_t WebCore::GraphicsLayerCA::setShapeLayerWindRule(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t i;

  if ((((*(_BYTE *)(result + 521) == 0) ^ a2) & 1) == 0)
  {
    *(_BYTE *)(result + 521) = a2;
    if ((*(_WORD *)(result + 177) & 1) == 0)
    {
      v2 = *(_QWORD *)(result + 616);
      *(_QWORD *)(result + 616) = v2 | 0x800000000;
      if (!*(_BYTE *)(result + 889))
      {
        for (i = *(_QWORD *)(result + 200); i; i = *(_QWORD *)(i + 200))
        {
          if ((*(_BYTE *)(i + 890) & 0x40) != 0)
            break;
          *(_BYTE *)(i + 890) |= 0x40u;
        }
      }
      if (!v2)
        return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), result);
    }
  }
  return result;
}

BOOL WebCore::keyframeValueListHasSingleIntervalWithLinearOrEquivalentTimingFunction(uint64_t a1, int a2)
{
  double *v2;
  double v3;

  if (a2 != 2)
    return 0;
  v2 = *(double **)(*(_QWORD *)a1 + 16);
  if (!v2 || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(*(_QWORD *)a1 + 16)))
    return 1;
  if ((*(unsigned int (**)(double *))(*(_QWORD *)v2 + 24))(v2) != 1)
    return 0;
  v3 = v2[2];
  if ((v3 != 0.0 || v2[3] != 0.0 || v2[4] != 0.0 || v2[5] != 0.0)
    && (v3 != 1.0 || v2[3] != 1.0 || v2[4] != 1.0 || v2[5] != 1.0))
  {
    if (v3 == 0.0 && v2[3] == 0.0 && v2[4] == 1.0)
      return v2[5] == 1.0;
    return 0;
  }
  return 1;
}

uint64_t WebCore::GraphicsLayerCA::createFilterAnimationsFromKeyframes(unsigned int *a1, uint64_t *a2, uint64_t a3, WTF::StringImpl **a4, int a5, double a6)
{
  unint64_t v6;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  __n128 v31;
  WebCore::LinearTimingFunction *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  double v39;
  int v40;
  float v41;
  double v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  void *v55;
  uint64_t v56;
  char *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  char *v63;
  unsigned int *v64;
  unsigned int v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int *v79;
  unsigned int *v80;
  uint64_t v81;
  void *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  void *v86;
  WTF *v87;
  WTF *v88;
  char v89;
  uint64_t v90;
  unsigned int **v91;
  char *v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  unsigned __int8 v103;
  WTF::StringImpl *v104;
  unsigned int v105;
  __n128 v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  __int128 v109;
  WTF *v110;
  WTF::StringImpl *v111;
  unsigned int *v112;
  WTF::StringImpl **v113;
  unsigned int *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  char v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  WTF *v123;
  WTF::StringImpl *v124;
  __n128 v125;
  _BYTE v126[21];
  WTF::StringImpl *v127;
  double v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;

  v6 = *((unsigned int *)a2 + 3);
  if (v6 < 2)
    return 0;
  v12 = a1;
  v13 = 0;
  v14 = *a2;
  while (1)
  {
    v15 = *(_QWORD *)(v14 + 8 * v13);
    v16 = *(unsigned int *)(v15 + 36);
    if ((_DWORD)v16)
      break;
    if (v6 == ++v13)
      return 0;
  }
  v18 = v13 + 1;
  if (v13 + 1 < v6)
  {
    while (1)
    {
      v19 = *(_QWORD *)(v14 + 8 * v18);
      v20 = *(_DWORD *)(v19 + 36);
      if (v20)
        break;
LABEL_13:
      if (++v18 == v6)
        goto LABEL_14;
    }
    if ((_DWORD)v16 == v20)
    {
      v21 = *(_QWORD *)(v19 + 24);
      v22 = *(_QWORD *)(v15 + 24);
      v23 = 8 * v16;
      while (*(unsigned __int8 *)(*(_QWORD *)v21 + 12) == *(unsigned __int8 *)(*(_QWORD *)v22 + 12))
      {
        v22 += 8;
        v21 += 8;
        v23 -= 8;
        if (!v23)
          goto LABEL_13;
      }
    }
    return 0;
  }
LABEL_14:
  if ((v13 & 0x80000000) != 0)
    return 0;
  if (v6 <= v13)
  {
    __break(0xC471u);
LABEL_154:
    JUMPOUT(0x1961EF808);
  }
  v24 = *(_QWORD *)(v14 + 8 * v13);
  v117 = (_QWORD *)(v24 + 24);
  result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 952))(a1);
  if ((_DWORD)result)
  {
    v25 = *(unsigned int *)(v24 + 36);
    if ((_DWORD)v25)
    {
      v26 = *(_QWORD *)(v24 + 24);
      v27 = 8 * v25;
      while (*(_BYTE *)(*(_QWORD *)v26 + 12) != 11)
      {
        v26 += 8;
        v27 -= 8;
        if (!v27)
          goto LABEL_21;
      }
      return 0;
    }
LABEL_21:
    (*(void (**)(unsigned int *, WTF::StringImpl **, uint64_t))(*(_QWORD *)v12 + 440))(v12, a4, *((unsigned __int8 *)a2 + 16) | 0x100);
    v116 = *(unsigned int *)(v24 + 36);
    if ((int)v116 < 1)
      return 1;
    v28 = 0;
    v114 = v12 + 202;
    v120 = a5;
    v122 = a3;
    v115 = v24;
    v112 = v12;
    v113 = a4;
    while (1)
    {
      if (v28 >= *(unsigned int *)(v24 + 36))
      {
        __break(0xC471u);
        JUMPOUT(0x1961EF820);
      }
      v29 = *(unsigned __int8 *)(*(_QWORD *)(*v117 + 8 * v28) + 12);
      if (v29 > 0xA || ((1 << v29) & 0x7BE) == 0)
        goto LABEL_138;
      WebCore::PlatformCAAnimation::makeKeyPath((WTF::StringImpl *)7, *(unsigned __int8 *)(*(_QWORD *)(*v117 + 8 * v28) + 12), v28, &v127);
      if (*((_DWORD *)a2 + 3) >= 2u)
      {
        v118 = v28;
        (*(void (**)(WTF **__return_ptr, unsigned int *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 1256))(&v123, v12, 2, &v127);
        v32 = (WebCore::LinearTimingFunction *)WebCore::GraphicsLayerCA::setupAnimation((uint64_t)v123, a3, a5, v31);
        v121 = (uint64_t)v123;
        v123 = 0;
        v124 = 0;
        v131 = 0;
        v132 = 0;
        v129 = 0;
        v130 = 0;
        v33 = *(unsigned int *)(a3 + 112) | ((unint64_t)*(unsigned __int8 *)(a3 + 116) << 32);
        v34 = *((unsigned int *)a2 + 3);
        if ((_DWORD)v34)
        {
          v119 = v29;
          v35 = 0;
          v36 = 0;
          while (1)
          {
            if ((v33 & 2) != 0)
            {
              v37 = v34 + ~(_DWORD)v35;
              if (v37 >= v34)
              {
                __break(0xC471u);
                goto LABEL_154;
              }
              v38 = *(_QWORD *)(*a2 + 8 * v37);
              v39 = 1.0 - *(double *)(v38 + 8);
            }
            else
            {
              v38 = *(_QWORD *)(*a2 + 8 * v35);
              v39 = *(double *)(v38 + 8);
              v37 = v35;
            }
            v128 = v39;
            v40 = HIDWORD(v124);
            if (HIDWORD(v124) == (_DWORD)v124)
            {
              WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,double>((uint64_t)&v123, &v128);
            }
            else
            {
              v41 = v39;
              *((float *)v123 + HIDWORD(v124)) = v41;
              HIDWORD(v124) = v40 + 1;
            }
            if ((int)v118 >= (unint64_t)*(unsigned int *)(v38 + 36))
            {
              if (!v36)
              {
                v32 = (WebCore::LinearTimingFunction *)WTF::fastMalloc((WTF *)0x10);
                v36 = (unsigned int *)v32;
                *((_DWORD *)v32 + 2) = 1;
                *((_BYTE *)v32 + 12) = 13;
                *(_QWORD *)v32 = off_1E3416158;
                *((_BYTE *)v32 + 13) = v119;
              }
              v49 = HIDWORD(v132);
              if (HIDWORD(v132) == (_DWORD)v132)
              {
                v50 = HIDWORD(v132) + ((unint64_t)HIDWORD(v132) >> 2);
                if (v50 >= 0x10)
                  v51 = v50 + 1;
                else
                  v51 = 16;
                if (v51 <= (unint64_t)HIDWORD(v132) + 1)
                  v52 = HIDWORD(v132) + 1;
                else
                  v52 = v51;
                if (v52 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1961EF810);
                }
                v53 = v131;
                v54 = (char *)WTF::fastMalloc((WTF *)(8 * v52));
                LODWORD(v132) = v52;
                v131 = v54;
                v32 = (WebCore::LinearTimingFunction *)memcpy(v54, v53, 8 * v49);
                a5 = v120;
                if (v53)
                {
                  if (v131 == v53)
                  {
                    v131 = 0;
                    LODWORD(v132) = 0;
                  }
                  v32 = (WebCore::LinearTimingFunction *)WTF::fastFree((WTF *)v53, v55);
                }
                v56 = HIDWORD(v132);
                v57 = v131;
                v58 = v36 + 2;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 + 1, v58));
                *(_QWORD *)&v57[8 * v56] = v36;
                ++HIDWORD(v132);
                a3 = v122;
              }
              else
              {
                v63 = v131;
                v64 = v36 + 2;
                do
                  v65 = __ldaxr(v64);
                while (__stlxr(v65 + 1, v64));
                *(_QWORD *)&v63[8 * v49] = v36;
                ++HIDWORD(v132);
              }
            }
            else
            {
              v42 = *(double *)(*(_QWORD *)(v38 + 24) + 8 * (int)v118);
              v43 = (unsigned int *)(*(_QWORD *)&v42 + 8);
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 + 1, v43));
              v128 = v42;
              LODWORD(v45) = HIDWORD(v132);
              if (HIDWORD(v132) == (_DWORD)v132)
              {
                v46 = WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v131, HIDWORD(v132) + 1, (unint64_t)&v128);
                v45 = HIDWORD(v132);
                v47 = v131;
                v48 = *(_QWORD *)v46;
                *(_QWORD *)v46 = 0;
                *(_QWORD *)&v47[8 * v45] = v48;
              }
              else
              {
                v128 = 0.0;
                *(double *)&v131[8 * HIDWORD(v132)] = v42;
              }
              HIDWORD(v132) = v45 + 1;
              v32 = *(WebCore::LinearTimingFunction **)&v128;
              v128 = 0.0;
              if (v32)
              {
                v60 = (unsigned int *)((char *)v32 + 8);
                do
                {
                  v61 = __ldaxr(v60);
                  v62 = v61 - 1;
                }
                while (__stlxr(v62, v60));
                if (!v62)
                {
                  atomic_store(1u, (unsigned int *)v32 + 2);
                  v32 = (WebCore::LinearTimingFunction *)(*(uint64_t (**)(WebCore::LinearTimingFunction *))(*(_QWORD *)v32 + 8))(v32);
                }
              }
            }
            v66 = *((unsigned int *)a2 + 3);
            if (v66 - 1 > v35)
            {
              if ((v33 & 2) != 0)
              {
                v67 = v37 - 1;
                if (v67 >= v66)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1961EF818);
                }
                v38 = *(_QWORD *)(*a2 + 8 * v67);
              }
              if (!a5 || (v68 = *(_QWORD *)(a3 + 96)) == 0)
              {
                v68 = *(_QWORD *)(v38 + 16);
                if (!v68)
                {
                  v68 = *(_QWORD *)(a3 + 104);
                  if (!v68)
                  {
                    v32 = (WebCore::LinearTimingFunction *)WebCore::LinearTimingFunction::identity(v32);
                    v68 = (uint64_t)v32;
                  }
                }
              }
              v69 = HIDWORD(v130);
              if (HIDWORD(v130) == (_DWORD)v130)
              {
                v32 = (WebCore::LinearTimingFunction *)WTF::Vector<WTF::Ref<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TimingFunction const&>((uint64_t)&v129, v68);
              }
              else
              {
                v70 = v129;
                ++*(_DWORD *)(v68 + 8);
                *(_QWORD *)(v70 + 8 * v69) = v68;
                HIDWORD(v130) = v69 + 1;
              }
            }
            ++v35;
            v34 = *((unsigned int *)a2 + 3);
            if (v35 >= v34)
              goto LABEL_91;
          }
        }
        v36 = 0;
LABEL_91:
        v81 = v121;
        (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v121 + 376))(v121, &v123);
        (*(void (**)(uint64_t, char **))(*(_QWORD *)v81 + 360))(v81, &v131);
        (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v81 + 392))(v81, &v129, (v33 >> 1) & 1);
        v12 = v112;
        a4 = v113;
        v28 = v118;
        if (v36)
        {
          v83 = v36 + 2;
          do
          {
            v84 = __ldaxr(v83);
            v85 = v84 - 1;
          }
          while (__stlxr(v85, v83));
          if (!v85)
          {
            atomic_store(1u, v36 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 8))(v36);
          }
        }
        WTF::Vector<WTF::Ref<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v129, v82);
        if (HIDWORD(v132))
        {
          v91 = (unsigned int **)v131;
          v92 = &v131[8 * HIDWORD(v132)];
          do
          {
            v93 = *v91;
            *v91 = 0;
            if (v93)
            {
              v94 = v93 + 2;
              do
              {
                v95 = __ldaxr(v94);
                v96 = v95 - 1;
              }
              while (__stlxr(v96, v94));
              if (!v96)
              {
                atomic_store(1u, v93 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v93 + 8))(v93);
              }
            }
            ++v91;
          }
          while (v91 != (unsigned int **)v92);
        }
        v87 = (WTF *)v131;
        if (v131)
        {
          v131 = 0;
          LODWORD(v132) = 0;
          WTF::fastFree(v87, v86);
        }
        a3 = v122;
        v88 = v123;
        v24 = v115;
        if (v123)
        {
          v123 = 0;
          LODWORD(v124) = 0;
          WTF::fastFree(v88, v86);
        }
        goto LABEL_125;
      }
      (*(void (**)(WTF **__return_ptr, unsigned int *, _QWORD, WTF::StringImpl **))(*(_QWORD *)v12 + 1256))(&v123, v12, 0, &v127);
      WebCore::GraphicsLayerCA::setupAnimation((uint64_t)v123, a3, a5, v71);
      v72 = *((unsigned int *)a2 + 3);
      if (v72 <= (*(_DWORD *)(a3 + 112) & 2uLL) >> 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1961EF828);
      }
      v73 = (*(_DWORD *)(a3 + 112) & 2) == 0;
      if (v72 <= v73)
      {
        __break(0xC471u);
        JUMPOUT(0x1961EF830);
      }
      v74 = *(_QWORD *)(*a2
                      + 8
                      * (((*(unsigned int *)(a3 + 112) | ((unint64_t)*(unsigned __int8 *)(a3 + 116) << 32)) >> 1) & 1));
      v121 = (uint64_t)v123;
      v75 = *(_QWORD *)(*a2 + 8 * v73);
      if ((int)v28 >= (unint64_t)*(unsigned int *)(v74 + 36))
        break;
      v76 = *(_QWORD *)(*(_QWORD *)(v74 + 24) + 8 * (int)v28);
      if ((int)v28 >= (unint64_t)*(unsigned int *)(v75 + 36))
      {
        if (v76)
        {
LABEL_114:
          v78 = v28;
          v89 = *(_BYTE *)(v76 + 12);
          v90 = WTF::fastMalloc((WTF *)0x10);
          v79 = 0;
          v80 = (unsigned int *)v90;
          v77 = v90;
          goto LABEL_115;
        }
LABEL_143:
        v78 = v28;
        v77 = 0;
        goto LABEL_102;
      }
      v77 = *(_QWORD *)(*(_QWORD *)(v75 + 24) + 8 * (int)v28);
      if (!v76)
      {
        v78 = v28;
        goto LABEL_102;
      }
      if (!v77)
        goto LABEL_114;
      v78 = v28;
      v79 = 0;
      v80 = 0;
LABEL_116:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v121 + 264))(v121, v76);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v121 + 312))(v121, v77);
      a5 = v120;
      a3 = v122;
      if (!v80)
        goto LABEL_120;
      v97 = v80 + 2;
      do
      {
        v98 = __ldaxr(v97);
        v99 = v98 - 1;
      }
      while (__stlxr(v99, v97));
      if (!v99)
      {
        atomic_store(1u, v80 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v80 + 8))(v80);
        if (v79)
        {
LABEL_121:
          v100 = v79 + 2;
          v28 = v78;
          do
          {
            v101 = __ldaxr(v100);
            v102 = v101 - 1;
          }
          while (__stlxr(v102, v100));
          if (!v102)
          {
            atomic_store(1u, v79 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v79 + 8))(v79);
          }
          goto LABEL_125;
        }
      }
      else
      {
LABEL_120:
        if (v79)
          goto LABEL_121;
      }
      v28 = v78;
LABEL_125:
      v103 = *((_BYTE *)a2 + 16);
      v123 = (WTF *)v121;
      v104 = *a4;
      if (*a4)
        *(_DWORD *)v104 += 2;
      v124 = v104;
      v125.n128_u8[0] = v103;
      v125.n128_u32[1] = v28;
      v125.n128_f64[1] = a6;
      v126[0] = 0;
      v126[8] = 0;
      *(_DWORD *)&v126[16] = 1;
      v126[20] = 0;
      v105 = v12[205];
      if (v105 == v12[204])
      {
        v106 = WTF::Vector<WebCore::GraphicsLayerCA::LayerPropertyAnimation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GraphicsLayerCA::LayerPropertyAnimation>(v114, (unint64_t)&v123);
        v107 = v124;
        v124 = 0;
        if (v107)
        {
          if (*(_DWORD *)v107 == 2)
            WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v86);
          else
            *(_DWORD *)v107 -= 2;
        }
      }
      else
      {
        v108 = *((_QWORD *)v12 + 101) + 56 * v105;
        v123 = 0;
        *(_QWORD *)v108 = v121;
        *(_QWORD *)(v108 + 8) = v104;
        v106 = v125;
        v109 = *(_OWORD *)v126;
        *(_QWORD *)(v108 + 45) = *(_QWORD *)&v126[13];
        *(__n128 *)(v108 + 16) = v106;
        *(_OWORD *)(v108 + 32) = v109;
        ++v12[205];
        v124 = 0;
      }
      v110 = v123;
      v123 = 0;
      if (v110)
      {
        if (*((_DWORD *)v110 + 2) == 1)
          (*(void (**)(WTF *, __n128))(*(_QWORD *)v110 + 8))(v110, v106);
        else
          --*((_DWORD *)v110 + 2);
      }
      v111 = v127;
      v127 = 0;
      if (v111)
      {
        if (*(_DWORD *)v111 == 2)
          WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v86);
        else
          *(_DWORD *)v111 -= 2;
      }
LABEL_138:
      ++v28;
      result = 1;
      if (v28 == v116)
        return result;
    }
    if ((int)v28 >= (unint64_t)*(unsigned int *)(v75 + 36))
      goto LABEL_143;
    v78 = v28;
    v77 = *(_QWORD *)(*(_QWORD *)(v75 + 24) + 8 * (int)v28);
LABEL_102:
    v89 = *(_BYTE *)(v77 + 12);
    v90 = WTF::fastMalloc((WTF *)0x10);
    v80 = 0;
    v76 = v90;
    v79 = (unsigned int *)v90;
LABEL_115:
    *(_DWORD *)(v90 + 8) = 1;
    *(_BYTE *)(v90 + 12) = 13;
    *(_QWORD *)v90 = off_1E3416158;
    *(_BYTE *)(v90 + 13) = v89;
    v24 = v115;
    goto LABEL_116;
  }
  return result;
}

