WebCore::AccessibilityObject *WebCore::AccessibilityRenderObject::elementAccessibilityHitTest(WebCore::AccessibilityRenderObject *this, const WebCore::IntPoint *a2)
{
  WebCore::AccessibilityObject *result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _DWORD v14[2];

  if (!WebCore::AccessibilityRenderObject::remoteSVGRootElement(this, 0))
    return WebCore::AccessibilityObject::elementAccessibilityHitTest(this, a2);
  result = (WebCore::AccessibilityObject *)WebCore::AccessibilityRenderObject::remoteSVGRootElement(this, 0);
  if (result)
  {
    v5 = (uint64_t)result;
    v6 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 3040))(this);
    v7 = v6 + 63;
    if ((int)v6 >= 0)
      v7 = v6;
    v8 = v6 & 0x3F;
    if ((int)v6 <= 0)
      v8 = -(-(int)v6 & 0x3F);
    v9 = v8 + 32;
    v10 = HIDWORD(v6) + 63;
    if (v6 >= 0)
      v10 = HIDWORD(v6);
    if (SHIDWORD(v6) <= 0)
      v11 = -(-HIDWORD(v6) & 0x3F);
    else
      v11 = BYTE4(v6) & 0x3F;
    v12 = *(_DWORD *)a2 - (v7 >> 6) - (v9 >> 6);
    v13 = *((_DWORD *)a2 + 1) - (v10 >> 6);
    v14[0] = v12;
    v14[1] = v13 - ((v11 + 32) >> 6);
    return (WebCore::AccessibilityObject *)(*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)v5 + 1208))(v5, v14);
  }
  return result;
}

_QWORD *WebCore::AccessibilityRenderObject::accessibilityHitTest(WebCore::AccessibilityRenderObject *this, int32x2_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int8x8_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::HTMLOptionElement *v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  WebCore::HTMLOptionElement *v19;
  WebCore::RenderObject *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  int v29;
  signed int v30;
  signed int v31;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  BOOL v41;
  WebCore::AXObjectCache *v42;
  WebCore::Document *v43;
  WebCore::AXObjectCache **v44;
  WebCore::AXObjectCache *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  int v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  int v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  int v81;
  uint64_t i;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int32x2_t v89[4];
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  __int16 v98;
  WebCore::HTMLOptionElement *v99;
  uint64_t v100;
  int32x2_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  WebCore::AXObjectCache *v107;
  uint64_t v108;

  v2 = *((_QWORD *)this + 31);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if ((*(_BYTE *)(v3 + 21) & 0x80) != 0)
      {
        WebCore::Document::updateLayout(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40) + 8), 0, 0);
        v6 = *((_QWORD *)this + 31);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7)
          {
            if ((*(_BYTE *)(v7 + 21) & 0x80) != 0)
            {
              v89[2] = (int32x2_t)0x4000000040;
              v10 = (int8x8_t)vcgt_s32(*a2, (int32x2_t)0xFE000000FE000000);
              v89[0] = (int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&v10 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *a2), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*a2, 6uLL)), v10));
              v89[1] = (int32x2_t)(v89[0].i32[0] & 0xFFFFFFC0 | ((unint64_t)((v89[0].i32[1] & 0xFFFFFFC0) >> 6) << 38));
              v89[3] = (int32x2_t)vmul_f32(vcvt_f32_s32(v89[0]), (float32x2_t)vdup_n_s32(0x3C800000u));
              v90 = (float)(int)(v89[0].i32[0] & 0xFFFFFFC0) * 0.015625;
              v91 = (float)(int)(v89[0].i32[1] & 0xFFFFFFC0) * 0.015625;
              v92 = v90 + 1.0;
              v93 = v91;
              v94 = v90 + 1.0;
              v95 = v91 + 1.0;
              v96 = v90;
              v97 = v91 + 1.0;
              v98 = 256;
              v99 = 0;
              v100 = 0;
              v106 = 0;
              v101 = v89[0];
              v102 = 0;
              v105 = 0;
              v103 = 0;
              v104 = 0;
              v11 = *(_QWORD *)(v6 + 8);
              if ((*(_BYTE *)(v11 + 45) & 0x10) == 0)
                v11 = 0;
              v12 = *(_QWORD *)(v11 + 144);
              LODWORD(v108) = 16387;
              BYTE4(v108) = 1;
              WebCore::RenderLayer::hitTest(v12, &v108, (WebCore::HitTestingTransformState *)v89, (uint64_t)v89);
              v14 = v99;
              if (!v99)
              {
                v8 = 0;
LABEL_62:
                WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v89, (void *)v13);
                return v8;
              }
              v15 = *((_DWORD *)v99 + 6) + 2;
              *((_DWORD *)v99 + 6) = v15;
              if ((*((_WORD *)v14 + 14) & 0x10) == 0)
                goto LABEL_26;
              v16 = *(_QWORD *)(*((_QWORD *)v14 + 12) + 24);
              if (v16 == *(_QWORD *)(WebCore::HTMLNames::areaTag + 24))
              {
                v13 = *((_QWORD *)v14 + 4);
                if (!v13)
                  goto LABEL_59;
                v17 = *(_WORD *)(v13 + 28);
                if ((v17 & 8) == 0)
                  goto LABEL_59;
                while ((v17 & 0x10) == 0
                     || *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::mapTag + 24))
                {
                  v13 = *(_QWORD *)(v13 + 32);
                  if (v13)
                  {
                    v17 = *(_WORD *)(v13 + 28);
                    if ((v17 & 8) != 0)
                      continue;
                  }
                  goto LABEL_59;
                }
                v22 = WebCore::AccessibilityRenderObject::associatedAXImage((uint64_t)this, v13);
                if (!v22)
                  goto LABEL_59;
                v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 1896))(v22, 1);
                v24 = *(unsigned int *)(v23 + 12);
                if (!(_DWORD)v24)
                  goto LABEL_59;
                v25 = 8 * v24;
                v26 = *(_QWORD **)v23;
                while (1)
                {
                  v27 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v26 + 1512))(*v26);
                  v28 = a2->i32[1];
                  v29 = a2->i32[0] << 6;
                  if (a2->i32[0] < -33554432)
                    v29 = 0x80000000;
                  if (a2->i32[0] > 0x1FFFFFF)
                    v29 = 0x7FFFFFFF;
                  v30 = v28 << 6;
                  if (v28 < -33554432)
                    v30 = 0x80000000;
                  if (v28 > 0x1FFFFFF)
                    v30 = 0x7FFFFFFF;
                  if (v29 >= (int)v27)
                  {
                    v31 = v27 + v13;
                    if (__OFADD__((_DWORD)v27, (_DWORD)v13))
                      v31 = (v27 >> 31) + 0x7FFFFFFF;
                    if (v31 > v29 && v30 >= SHIDWORD(v27))
                    {
                      v33 = (HIDWORD(v27) >> 31) + 0x7FFFFFFF;
                      if (!__OFADD__(HIDWORD(v27), HIDWORD(v13)))
                        v33 = HIDWORD(v27) + HIDWORD(v13);
                      if (v33 > v30)
                        break;
                    }
                  }
                  ++v26;
                  v25 -= 8;
                  if (!v25)
                    goto LABEL_59;
                }
                v34 = (_QWORD *)*v26;
                if (v34)
                {
                  if ((*(unsigned int (**)(_QWORD *))(*v34 + 48))(v34))
                    v8 = v34;
                  else
                    v8 = 0;
                }
                else
                {
LABEL_59:
                  v8 = 0;
                }
                goto LABEL_60;
              }
              if (v16 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
              {
                v18 = WebCore::HTMLOptionElement::ownerSelectElement(v14);
                v19 = (WebCore::HTMLOptionElement *)v18;
                if (v18)
                {
                  *(_DWORD *)(v18 + 24) += 2;
                  v15 = *((_DWORD *)v14 + 6);
                }
                if (v15 == 2)
                {
                  if ((*((_WORD *)v14 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v14, (void *)v13);
                }
                else
                {
                  *((_DWORD *)v14 + 6) = v15 - 2;
                }
              }
              else
              {
LABEL_26:
                v19 = v14;
              }
              v20 = (WebCore::RenderObject *)(*((_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFLL);
              if (!v20)
                goto LABEL_29;
              v21 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
              if ((v21 & 1) == 0)
                goto LABEL_29;
              v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFLL) + 0x18)
                                                      + 8)
                                          + 40)
                              + 8);
              if (*(_BYTE *)(v35 + 3362) || *(_BYTE *)(v35 + 3405))
              {
                for (i = *(_QWORD *)(v35 + 528); i; i = *(_QWORD *)(v35 + 528))
                {
                  v83 = *(_QWORD *)(i + 8);
                  if (!v83)
                    break;
                  v84 = *(_QWORD *)(v83 + 120);
                  if (!v84)
                    break;
                  v85 = *(_QWORD *)(v84 + 8);
                  if (!v85)
                    break;
                  v35 = *(_QWORD *)(*(_QWORD *)(v85 + 40) + 8);
                }
              }
              else
              {
                v36 = *(_QWORD *)(v35 + 528);
                if (v36)
                {
                  v37 = *(_QWORD *)(v36 + 8);
                  if (v37)
                  {
                    v38 = *(_QWORD *)(*(_QWORD *)(v37 + 128) + 8);
                    if (v38 && *(_BYTE *)(v38 + 144) == 0)
                    {
                      v40 = *(_QWORD *)(v38 + 296);
                      if (v40)
                        v35 = v40;
                    }
                  }
                }
              }
              *(_DWORD *)(v35 + 24) += 2;
              v108 = v35;
              if (*(_QWORD *)(v35 + 1944))
                v41 = *(_BYTE *)(v35 + 3405) == 0;
              else
                v41 = 0;
              if (!v41)
              {
                WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v108);
LABEL_29:
                v8 = 0;
LABEL_30:
                v14 = v19;
LABEL_60:
                if (*((_DWORD *)v14 + 6) == 2)
                {
                  if ((*((_WORD *)v14 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v14, (void *)v13);
                }
                else
                {
                  *((_DWORD *)v14 + 6) -= 2;
                }
                goto LABEL_62;
              }
              v42 = *(WebCore::AXObjectCache **)(v35 + 1488);
              if (v42)
              {
                WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v108);
              }
              else
              {
                v43 = (WebCore::Document *)v35;
                v44 = (WebCore::AXObjectCache **)(v35 + 1488);
                v45 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
                v107 = WebCore::AXObjectCache::AXObjectCache(v45, v43);
                std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v44, &v107);
                std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v107);
                WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
                v42 = (WebCore::AXObjectCache *)*((_QWORD *)v43 + 186);
                WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v108);
                if (!v42)
                  goto LABEL_29;
              }
              v46 = WebCore::AXObjectCache::getOrCreate(v42, v20);
              if (!v46)
                goto LABEL_29;
              v47 = (_QWORD *)v46;
              v48 = *(_QWORD *)(v46 + 8);
              if (__ldaxr((unsigned __int8 *)v48))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v48))
              {
                goto LABEL_92;
              }
              MEMORY[0x19AEA534C](v48);
LABEL_92:
              ++*(_QWORD *)(v48 + 8);
              v50 = __ldxr((unsigned __int8 *)v48);
              if (v50 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v48))
                {
LABEL_97:
                  (*(void (**)(_QWORD *))(*v47 + 1904))(v47);
                  v51 = (*(uint64_t (**)(_QWORD *, int32x2_t *))(*v47 + 2904))(v47, a2);
                  v52 = (_QWORD *)v51;
                  if (!v51)
                    goto LABEL_107;
                  v53 = *(_QWORD *)(v51 + 8);
                  if (__ldaxr((unsigned __int8 *)v53))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, (unsigned __int8 *)v53))
                  {
                    goto LABEL_102;
                  }
                  MEMORY[0x19AEA534C](v53);
LABEL_102:
                  ++*(_QWORD *)(v53 + 8);
                  v55 = __ldxr((unsigned __int8 *)v53);
                  if (v55 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)v53))
                    {
LABEL_107:
                      v56 = v47[1];
                      if (__ldaxr((unsigned __int8 *)v56))
                      {
                        __clrex();
                      }
                      else if (!__stxr(1u, (unsigned __int8 *)v56))
                      {
                        goto LABEL_111;
                      }
                      MEMORY[0x19AEA534C](v56);
LABEL_111:
                      v58 = *(_QWORD *)(v56 + 8);
                      v59 = v58 - 1;
                      *(_QWORD *)(v56 + 8) = v58 - 1;
                      if (v58 == 1)
                      {
                        v86 = *(_QWORD *)(v56 + 16);
                        v60 = *(_QWORD *)(v56 + 24);
                        *(_QWORD *)(v56 + 24) = 0;
                        v61 = v86 != 0;
                      }
                      else
                      {
                        v60 = 0;
                        v61 = 1;
                      }
                      v62 = __ldxr((unsigned __int8 *)v56);
                      if (v62 == 1)
                      {
                        if (!__stlxr(0, (unsigned __int8 *)v56))
                        {
LABEL_118:
                          if (!v59)
                          {
                            if (v60)
                              (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
                            if (!v61)
                              WTF::fastFree((WTF *)v56, (void *)v13);
                          }
                          if (!v52)
                            goto LABEL_29;
                          if (!(*(unsigned int (**)(_QWORD *))(*v52 + 856))(v52))
                          {
                            v8 = v52;
                            goto LABEL_155;
                          }
                          v63 = (*(uint64_t (**)(_QWORD *))(*v52 + 2968))(v52);
                          if (v63)
                          {
                            v8 = (_QWORD *)v63;
                            if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 1320))(v63))
                            {
LABEL_155:
                              v75 = v52[1];
                              if (__ldaxr((unsigned __int8 *)v75))
                              {
                                __clrex();
                              }
                              else if (!__stxr(1u, (unsigned __int8 *)v75))
                              {
                                goto LABEL_159;
                              }
                              MEMORY[0x19AEA534C](v75);
LABEL_159:
                              v77 = *(_QWORD *)(v75 + 8);
                              v78 = v77 - 1;
                              *(_QWORD *)(v75 + 8) = v77 - 1;
                              if (v77 == 1)
                              {
                                v87 = *(_QWORD *)(v75 + 16);
                                v79 = *(_QWORD *)(v75 + 24);
                                *(_QWORD *)(v75 + 24) = 0;
                                v80 = v87 != 0;
                              }
                              else
                              {
                                v79 = 0;
                                v80 = 1;
                              }
                              v81 = __ldxr((unsigned __int8 *)v75);
                              if (v81 == 1)
                              {
                                if (!__stlxr(0, (unsigned __int8 *)v75))
                                {
LABEL_166:
                                  if (!v78)
                                  {
                                    if (v79)
                                      (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
                                    if (!v80)
                                      WTF::fastFree((WTF *)v75, (void *)v13);
                                  }
                                  goto LABEL_30;
                                }
                              }
                              else
                              {
                                __clrex();
                              }
                              WTF::Lock::unlockSlow((WTF::Lock *)v75);
                              goto LABEL_166;
                            }
                          }
                          v64 = (*(uint64_t (**)(_QWORD *))(*v52 + 1240))(v52);
                          v8 = (_QWORD *)v64;
                          if (!v64)
                          {
LABEL_138:
                            v68 = v52[1];
                            if (__ldaxr((unsigned __int8 *)v68))
                            {
                              __clrex();
                            }
                            else if (!__stxr(1u, (unsigned __int8 *)v68))
                            {
                              goto LABEL_142;
                            }
                            MEMORY[0x19AEA534C](v68);
LABEL_142:
                            v70 = *(_QWORD *)(v68 + 8);
                            v71 = v70 - 1;
                            *(_QWORD *)(v68 + 8) = v70 - 1;
                            if (v70 == 1)
                            {
                              v88 = *(_QWORD *)(v68 + 16);
                              v72 = *(_QWORD *)(v68 + 24);
                              *(_QWORD *)(v68 + 24) = 0;
                              v73 = v88 != 0;
                            }
                            else
                            {
                              v72 = 0;
                              v73 = 1;
                            }
                            v74 = __ldxr((unsigned __int8 *)v68);
                            if (v74 == 1)
                            {
                              if (!__stlxr(0, (unsigned __int8 *)v68))
                              {
LABEL_149:
                                if (!v71)
                                {
                                  if (v72)
                                    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
                                  if (!v73)
                                    WTF::fastFree((WTF *)v68, (void *)v13);
                                }
                                v52 = v8;
                                if (!v8)
                                  goto LABEL_30;
                                goto LABEL_155;
                              }
                            }
                            else
                            {
                              __clrex();
                            }
                            WTF::Lock::unlockSlow((WTF::Lock *)v68);
                            goto LABEL_149;
                          }
                          v65 = *(_QWORD *)(v64 + 8);
                          if (__ldaxr((unsigned __int8 *)v65))
                          {
                            __clrex();
                          }
                          else if (!__stxr(1u, (unsigned __int8 *)v65))
                          {
                            goto LABEL_133;
                          }
                          MEMORY[0x19AEA534C](v65);
LABEL_133:
                          ++*(_QWORD *)(v65 + 8);
                          v67 = __ldxr((unsigned __int8 *)v65);
                          if (v67 == 1)
                          {
                            if (!__stlxr(0, (unsigned __int8 *)v65))
                              goto LABEL_138;
                          }
                          else
                          {
                            __clrex();
                          }
                          WTF::Lock::unlockSlow((WTF::Lock *)v65);
                          goto LABEL_138;
                        }
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow((WTF::Lock *)v56);
                      goto LABEL_118;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v53);
                  goto LABEL_107;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v48);
              goto LABEL_97;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::AccessibilityRenderObject::observableObject(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  BOOL v5;
  WebCore::Element *v6;
  WebCore::AXObjectCache *v7;
  uint64_t v8;

  v1 = *((_QWORD *)this + 31);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      while ((*(_BYTE *)(v2 + 45) & 1) == 0)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8);
        if (!v4)
          break;
        v5 = (*(_BYTE *)(v2 + 52) & 7) != 1 || (*(_BYTE *)(v2 + 53) & 4) == 0;
        if (!v5
          || (*(_BYTE *)(v2 + 45) & 8) != 0 && *(_BYTE *)(v2 + 46) == 18
          || (WebCore::nodeHasRole(v4, (int16x8_t *)"listbox", 0x100000007) & 1) != 0
          || (*(_WORD *)(v4 + 28) & 8) != 0 && WebCore::AccessibilityObject::contentEditableAttributeIsEnabled(v4, v6)
          || WebCore::nodeHasRole(v4, (int16x8_t *)"textbox", 0x100000007))
        {
          v7 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
          if (v7)
            return WebCore::AXObjectCache::getOrCreate(v7, (WebCore::RenderObject *)v2);
        }
        v8 = *(_QWORD *)(v2 + 32);
        if (v8)
        {
          v2 = *(_QWORD *)(v8 + 8);
          if (v2)
            continue;
        }
        return 0;
      }
    }
  }
  return 0;
}

WebCore::AccessibilityObject *WebCore::AccessibilityRenderObject::expandedTextValue@<X0>(WebCore::AccessibilityRenderObject *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::AccessibilityObject *result;
  WebCore::AccessibilityObject *v4;
  void *v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1232))(this);
  if (!result)
    goto LABEL_9;
  v4 = result;
  result = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)result + 840))(result);
  if (result && (*((_WORD *)result + 14) & 8) != 0)
  {
    v6 = *((_DWORD *)result + 6);
    *((_DWORD *)result + 6) = v6 + 2;
    v7 = *((_QWORD *)result + 12);
    if (v7 == WebCore::HTMLNames::abbrTag)
      goto LABEL_16;
    if (*(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::abbrTag + 24))
    {
      v10 = *(_QWORD *)(v7 + 32);
      v11 = *(_QWORD *)(WebCore::HTMLNames::abbrTag + 32);
      if (v6)
      {
        *((_DWORD *)result + 6) = v6;
      }
      else if ((*((_WORD *)result + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(result, v5);
      }
      if (v10 == v11)
        goto LABEL_18;
    }
    else if (v6)
    {
      *((_DWORD *)result + 6) = v6;
    }
    else if ((*((_WORD *)result + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(result, v5);
    }
  }
  result = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v4 + 840))(v4);
  if (!result || (*((_WORD *)result + 14) & 8) == 0)
    goto LABEL_9;
  v6 = *((_DWORD *)result + 6);
  *((_DWORD *)result + 6) = v6 + 2;
  v9 = *((_QWORD *)result + 12);
  if (v9 == WebCore::HTMLNames::acronymTag)
  {
LABEL_16:
    if (v6)
    {
      *((_DWORD *)result + 6) = v6;
    }
    else if ((*((_WORD *)result + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(result, v5);
    }
    goto LABEL_18;
  }
  if (*(_QWORD *)(v9 + 24) != *(_QWORD *)(WebCore::HTMLNames::acronymTag + 24))
  {
    if (v6)
    {
      v8 = 0;
      *((_DWORD *)result + 6) = v6;
      goto LABEL_15;
    }
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      result = (WebCore::AccessibilityObject *)WebCore::Node::removedLastRef(result, v5);
    goto LABEL_9;
  }
  v12 = *(_QWORD *)(v9 + 32);
  v13 = *(_QWORD *)(WebCore::HTMLNames::acronymTag + 32);
  if (v6)
  {
    *((_DWORD *)result + 6) = v6;
  }
  else if ((*((_WORD *)result + 15) & 0x400) == 0)
  {
    result = (WebCore::AccessibilityObject *)WebCore::Node::removedLastRef(result, v5);
  }
  if (v12 != v13)
  {
LABEL_9:
    v8 = 0;
    goto LABEL_15;
  }
LABEL_18:
  result = (WebCore::AccessibilityObject *)WebCore::AccessibilityObject::getAttribute(v4, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::titleAttr);
  v8 = *(_DWORD **)result;
  if (*(_QWORD *)result)
    *v8 += 2;
LABEL_15:
  *a2 = v8;
  return result;
}

uint64_t WebCore::AccessibilityRenderObject::supportsExpandedTextValue(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this) != 107)
    return 0;
  v2 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1232))(this);
  v3 = v2;
  if (!v2)
    return v3;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 840))(v2);
  if (!v4 || (*(_WORD *)(v4 + 28) & 8) == 0)
    goto LABEL_9;
  v6 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v6 + 2;
  v7 = *(_QWORD *)(v4 + 96);
  if (v7 == WebCore::HTMLNames::abbrTag)
  {
    if (v6)
    {
      *(_DWORD *)(v4 + 24) = v6;
    }
    else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
    }
    return 1;
  }
  if (*(_QWORD *)(v7 + 24) != *(_QWORD *)(WebCore::HTMLNames::abbrTag + 24))
  {
    if (v6)
    {
      *(_DWORD *)(v4 + 24) = v6;
    }
    else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
    }
    goto LABEL_9;
  }
  v13 = *(_QWORD *)(v7 + 32);
  v14 = *(_QWORD *)(WebCore::HTMLNames::abbrTag + 32);
  if (v6)
  {
    *(_DWORD *)(v4 + 24) = v6;
  }
  else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
  }
  if (v13 == v14)
    return 1;
LABEL_9:
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 840))(v3);
  if (!v8 || (*(_WORD *)(v8 + 28) & 8) == 0)
    return 0;
  v11 = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v8 + 24) = v11 + 2;
  v12 = *(_QWORD *)(v8 + 96);
  if (v12 == WebCore::HTMLNames::acronymTag)
    v3 = 1;
  else
    v3 = *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::acronymTag + 24)
      && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::acronymTag + 32);
  if (v11)
  {
    *(_DWORD *)(v8 + 24) = v11;
  }
  else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
  }
  return v3;
}

BOOL WebCore::AccessibilityRenderObject::shouldIgnoreAttributeRole(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v1;
  WebCore::Element *v2;

  if (*((_BYTE *)this + 234) != 28)
    return 0;
  v1 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 832))(this);
  return WebCore::AccessibilityObject::contentEditableAttributeIsEnabled(v1, v2);
}

uint64_t WebCore::AccessibilityRenderObject::determineAccessibilityRole(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  __int16 v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  void *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  _QWORD *Attribute;

  v2 = *((_QWORD *)this + 31);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if ((*(_BYTE *)(v3 + 45) & 2) != 0)
        v3 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 32) + 148) & 0x1FC000) == 0x40000)
      {
        LOBYTE(result) = 10;
        return result;
      }
      v5 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 3296))(this);
      *((_BYTE *)this + 234) = v5;
      if (v5 != 134
        && ((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 3272))(this) & 1) == 0)
      {
        LOBYTE(result) = *((_BYTE *)this + 234);
        return result;
      }
      v7 = *((_QWORD *)this + 31);
      if (v7)
        v8 = *(_QWORD *)(v7 + 8);
      else
        v8 = 0;
      if ((*(_BYTE *)(v8 + 45) & 1) != 0)
      {
        v9 = 0;
        if (v7)
        {
LABEL_16:
          v10 = *(_BYTE **)(v7 + 8);
          v11 = v10[46];
          if (v11 == 19)
          {
            LOBYTE(result) = 69;
            return result;
          }
          if (v11 == 20)
          {
            LOBYTE(result) = 70;
            return result;
          }
          if ((v10[45] & 2) != 0)
          {
            LOBYTE(result) = 107;
            return result;
          }
          if (v9)
          {
            if ((*(_WORD *)(v9 + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
            {
              v12 = *(_DWORD *)(v9 + 24);
              *(_DWORD *)(v9 + 24) = v12 + 2;
              v13 = *(_QWORD *)(v9 + 104);
              if (v13)
              {
                v14 = *(_DWORD *)(v13 + 4);
                if ((v14 & 1) != 0)
                {
                  v15 = *(uint64_t **)(v13 + 40);
                  LODWORD(v16) = *(_DWORD *)(v13 + 52);
                }
                else
                {
                  v15 = (uint64_t *)(v13 + 32);
                  LODWORD(v16) = v14 >> 5;
                }
                if ((_DWORD)v16)
                {
                  v16 = v16;
                  while (1)
                  {
                    v17 = *v15;
                    if (*v15 == WebCore::HTMLNames::usemapAttr
                      || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::usemapAttr + 24)
                      && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::usemapAttr + 32))
                    {
                      break;
                    }
                    v15 += 2;
                    if (!--v16)
                      goto LABEL_40;
                  }
                  if (v12)
                  {
                    *(_DWORD *)(v9 + 24) = v12;
                  }
                  else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v9, v6);
                  }
                  LOBYTE(result) = 50;
                  return result;
                }
              }
LABEL_40:
              if (v12)
              {
                *(_DWORD *)(v9 + 24) = v12;
              }
              else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v9, v6);
                v10 = *(_BYTE **)(*((_QWORD *)this + 31) + 8);
              }
            }
            if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v10 + 152))(v10) & 1) != 0)
            {
              if ((*(_WORD *)(v9 + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
              {
                if (WebCore::AXCoreObject::hasPopup(this))
                  LOBYTE(result) = 84;
                else
                  LOBYTE(result) = 10;
                return result;
              }
LABEL_45:
              v18 = WebCore::AccessibilityRenderObject::remoteSVGRootElement(this, 0);
              if (!v18)
                goto LABEL_48;
              v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 840))(v18);
              if (!v19)
                goto LABEL_48;
              v20 = v19;
              v21 = *(_WORD *)(v19 + 28);
              if ((v21 & 8) == 0)
                goto LABEL_48;
              if ((v21 & 0x20) == 0
                || !WebCore::AccessibilitySVGRoot::hasAccessibleContent(void)const::$_0::operator()((_QWORD *)v19))
              {
                v22 = *(_QWORD *)(v20 + 80);
                if (!v22)
                {
LABEL_48:
                  LOBYTE(result) = 49;
                  return result;
                }
                v23 = *(_WORD *)(v22 + 28);
                if ((v23 & 0x20) != 0)
                {
                  v24 = *(_QWORD *)(v20 + 80);
                }
                else
                {
                  do
                  {
                    if ((v23 & 4) == 0 || (v24 = *(_QWORD *)(v22 + 80)) == 0)
                    {
                      if (v22 == v20)
                        goto LABEL_48;
                      while (1)
                      {
                        v24 = *(_QWORD *)(v22 + 56);
                        if (v24)
                          break;
                        v22 = *(_QWORD *)(v22 + 32);
                        if (v22)
                          v25 = v22 == v20;
                        else
                          v25 = 1;
                        if (v25)
                          goto LABEL_48;
                      }
                    }
                    v23 = *(_WORD *)(v24 + 28);
                    v22 = v24;
                  }
                  while ((v23 & 0x20) == 0);
                }
                if (!WebCore::AccessibilitySVGRoot::hasAccessibleContent(void)const::$_0::operator()((_QWORD *)v24))
                {
                  do
                  {
                    v26 = *(_QWORD *)(v24 + 80);
                    if (!v26)
                    {
                      if (v24 == v20)
                        goto LABEL_48;
                      while (1)
                      {
                        v26 = *(_QWORD *)(v24 + 56);
                        if (v26)
                          break;
                        v24 = *(_QWORD *)(v24 + 32);
                        if (v24)
                          v30 = v24 == v20;
                        else
                          v30 = 1;
                        if (v30)
                          goto LABEL_48;
                      }
                    }
                    v27 = *(_WORD *)(v26 + 28);
                    if ((v27 & 0x20) != 0)
                    {
                      v24 = v26;
                    }
                    else
                    {
                      do
                      {
                        if ((v27 & 4) == 0 || (v24 = *(_QWORD *)(v26 + 80)) == 0)
                        {
                          if (v26 == v20)
                            goto LABEL_48;
                          while (1)
                          {
                            v24 = *(_QWORD *)(v26 + 56);
                            if (v24)
                              break;
                            v26 = *(_QWORD *)(v26 + 32);
                            if (v26)
                              v28 = v26 == v20;
                            else
                              v28 = 1;
                            if (v28)
                              goto LABEL_48;
                          }
                        }
                        v27 = *(_WORD *)(v24 + 28);
                        v26 = v24;
                      }
                      while ((v27 & 0x20) == 0);
                    }
                    v29 = WebCore::AccessibilitySVGRoot::hasAccessibleContent(void)const::$_0::operator()((_QWORD *)v24);
                    LOBYTE(result) = 114;
                  }
                  while (!v29);
                  return result;
                }
              }
LABEL_125:
              LOBYTE(result) = 114;
              return result;
            }
          }
          else if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v10 + 152))(v10) & 1) != 0)
          {
            goto LABEL_45;
          }
          v31 = *((_QWORD *)this + 31);
          if (v31)
          {
            v32 = *(unsigned __int8 **)(v31 + 8);
            v33 = v32[46];
            if (v33 != 49)
            {
LABEL_109:
              if ((v32[52] & 7) == 1 && v9)
              {
                v34 = v32[53] & 4;
                v35 = v33 == 44 || v34 == 0;
                if (!v35
                  && (*(_WORD *)(v9 + 28) & 0x10) != 0
                  && *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
                {
                  *(_DWORD *)(v9 + 24) += 2;
                  LOBYTE(result) = WebCore::AccessibilityNodeObject::roleFromInputElement(this, (const WebCore::HTMLInputElement *)v9);
                  if (*(_DWORD *)(v9 + 24) == 2)
                  {
                    v43 = result;
                    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v9, v38);
                    LOBYTE(result) = v43;
                  }
                  else
                  {
                    *(_DWORD *)(v9 + 24) -= 2;
                  }
                  return result;
                }
              }
              if (v31)
              {
                v36 = *(_QWORD *)(v31 + 8);
                v37 = *(unsigned __int8 *)(v36 + 46);
              }
              else
              {
                v36 = 0;
                v37 = MEMORY[0x2E];
              }
              if (v37 > 82)
              {
                if (v37 == 83 || v37 == 103)
                  goto LABEL_125;
              }
              else
              {
                if (v37 == 22)
                {
                  LOBYTE(result) = 84;
                  return result;
                }
                if (v37 == 44)
                {
                  LOBYTE(result) = 125;
                  return result;
                }
              }
              if ((*(_BYTE *)(v36 + 45) & 2) != 0)
                v36 = *(_QWORD *)(*(_QWORD *)(v36 + 32) + 8);
              v39 = (*(_BYTE *)(v36 + 96) & 0x1F) - 22;
              if (v39 < 4)
              {
                LODWORD(result) = 0x625E5F60u >> (8 * v39);
                return result;
              }
              if (v31)
              {
                v40 = *(_QWORD *)(v31 + 8);
                v41 = *(unsigned __int8 *)(v40 + 45);
                v42 = *(unsigned __int8 *)(v40 + 46);
                if ((v41 & 1) != 0)
                {
                  if (v42 > 0x3F || ((1 << v42) & 0x800001A800000000) == 0)
                    goto LABEL_139;
                }
                else
                {
                  if (v42 == 37)
                  {
                    LOBYTE(result) = 127;
                    return result;
                  }
                  if (v42 != 40)
                  {
LABEL_139:
                    LODWORD(result) = WebCore::AccessibilityNodeObject::determineAccessibilityRoleFromNode(this, (v41 >> 5) & 1);
                    if ((_DWORD)result == 134)
                    {
                      if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 45) & 0x20) != 0
                        && ((WebCore::AccessibilityNodeObject::hasAttributesRequiredForInclusion(this) & 1) != 0
                         || v9
                         && (v44 = *(_QWORD *)(v9 + 16), (v44 & 0x1000000000000) != 0)
                         && *(_DWORD *)((v44 & 0xFFFFFFFFFFFFLL) + 0x1C)
                         || (*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this
                                                                                                 + 784))(this)
                         && (Attribute = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::datetimeAttr), *Attribute)&& *(_DWORD *)(*Attribute + 4)))
                      {
                        LOBYTE(result) = 48;
                      }
                      else
                      {
                        LOBYTE(result) = -122;
                      }
                    }
                    return result;
                  }
                }
              }
              LOBYTE(result) = 47;
              return result;
            }
          }
          else
          {
            v33 = MEMORY[0x2E];
            if (MEMORY[0x2E] != 49)
            {
              v32 = 0;
              goto LABEL_109;
            }
          }
          LOBYTE(result) = -118;
          return result;
        }
      }
      else
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8);
        if (v7)
          goto LABEL_16;
      }
      if (MEMORY[0x2E] == 19)
        LOBYTE(result) = 69;
      else
        LOBYTE(result) = 70;
      return result;
    }
  }
  LODWORD(result) = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 3296))(this);
  *((_BYTE *)this + 234) = result;
  if ((_DWORD)result == 134)
    return WebCore::AccessibilityNodeObject::determineAccessibilityRoleFromNode(this, 0);
  return result;
}

BOOL WebCore::AccessibilityRenderObject::inheritsPresentationalRole(WebCore::AccessibilityRenderObject *this)
{
  BOOL v1;
  int v3;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  int v18;

  if (((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 800))(this) & 1) != 0)
    return 0;
  v3 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this);
  if ((v3 - 69) < 2)
  {
    v5 = WebCore::AccessibilityRenderObject::inheritsPresentationalRole(void)const::listItemParents;
    v6 = 4;
  }
  else
  {
    if (v3 != 43 && v3 != 13)
      return 0;
    v5 = &WebCore::AccessibilityRenderObject::inheritsPresentationalRole(void)const::tableCellParents;
    v6 = 1;
  }
  v7 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1232))(this);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = 8 * v6;
  while (1)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8))
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 840))(v8);
      if (v10)
      {
        v12 = v10;
        if ((*(_WORD *)(v10 + 28) & 8) != 0)
        {
          v13 = *(_DWORD *)(v10 + 24) + 2;
          *(_DWORD *)(v10 + 24) = v13;
          v14 = *(_QWORD *)(v10 + 96);
          v15 = v9;
          v16 = v5;
          while (1)
          {
            v17 = **v16;
            if (v17 == v14)
              break;
            ++v16;
            v15 -= 8;
            if (!v15)
              goto LABEL_20;
          }
          v1 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 1456))(v8) == 86;
          v13 = *(_DWORD *)(v12 + 24);
LABEL_20:
          v18 = v13 - 2;
          if (v18)
          {
            *(_DWORD *)(v12 + 24) = v18;
          }
          else if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v12, v11);
          }
          if (v17 == v14)
            return v1;
        }
      }
    }
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1232))(v8);
    if (!v8)
      return 0;
  }
}

double WebCore::AccessibilityRenderObject::updateRoleAfterChildrenCreation(WebCore::AccessibilityRenderObject *this)
{
  int v2;
  double result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  WebCore::AXObjectCache *v10;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this);
  v4 = v2;
  if (v2 == 114)
  {
    if (*(_DWORD *)((*(uint64_t (**)(WebCore::AccessibilityRenderObject *, uint64_t))(*(_QWORD *)this + 1896))(this, 1)+ 12))goto LABEL_11;
    v9 = 49;
    goto LABEL_10;
  }
  if (v2 != 73)
    goto LABEL_11;
  v5 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *, uint64_t))(*(_QWORD *)this + 1896))(this, 1);
  v6 = *(unsigned int *)(v5 + 12);
  if (!(_DWORD)v6)
  {
LABEL_7:
    v9 = 38;
LABEL_10:
    *((_BYTE *)this + 57) = v9;
    goto LABEL_11;
  }
  v7 = *(_QWORD **)v5;
  v8 = 8 * v6;
  while ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v7 + 1456))(*v7) - 76 >= 3)
  {
    ++v7;
    v8 -= 8;
    if (!v8)
      goto LABEL_7;
  }
LABEL_11:
  if (v4 != *((unsigned __int8 *)this + 57))
  {
    v10 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
    if (v10)
      return WebCore::AXObjectCache::handleRoleChanged(v10, this);
  }
  return result;
}

uint64_t WebCore::AccessibilityRenderObject::addChildren(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v6;
  const WebCore::AccessibilityObject *v7;
  void *v8;
  WebCore::AccessibilityObject *v9;
  void *v10;
  uint64_t v11;
  WebCore::Node *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  WebCore::Node *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  void *v30;
  unsigned int **v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  WebCore::AXObjectCache *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  WebCore::Widget *v55;
  WebCore::AXObjectCache *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  const WTF::AtomString *v62;
  uint64_t v63;
  uint64_t v64;
  const WebCore::TreeScope *v65;
  unsigned int *v66;
  void *v68;
  WebCore::Node *v69;
  WebCore::Node *v70;
  WebCore::Node *v71;
  __int16 v72;
  BOOL v73;
  uint64_t *v74;
  uint64_t *v75;
  void *v76;
  unsigned int *v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t *v90;
  WebCore::Node *v91;
  __int16 v92;
  BOOL v93;
  BOOL v94;
  uint64_t v95;
  WTF *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  int v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  void *v141;
  uint64_t v142;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  BOOL v147;
  int v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF *v155;
  uint64_t v156;
  WTF *v157;
  WTF *v158;
  _QWORD v159[2];
  WebCore::AccessibilityObject *v160[2];
  WebCore::Node *v161;
  unsigned int v162;

  v2 = *((_QWORD *)this + 31);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return WebCore::AccessibilityNodeObject::addChildren(this);
  *((_BYTE *)this + 56) = 1;
  result = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 3080))(this);
  if ((_DWORD)result)
  {
    v4 = *((_QWORD *)this + 1);
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_9;
    }
    MEMORY[0x19AEA534C](v4);
LABEL_9:
    ++*(_QWORD *)(v4 + 8);
    v6 = __ldxr((unsigned __int8 *)v4);
    if (v6 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_14:
        v7 = (const WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 2912))(this);
        WebCore::AccessibilityObject::iterator::iterator((WebCore::AccessibilityObject::iterator *)v160, v7, this);
        v159[0] = 0;
        v159[1] = 0;
        v9 = v160[0];
        if (v160[0])
        {
          do
          {
            (*(void (**)(WebCore::Node **__return_ptr, WebCore::AccessibilityObject *, uint64_t))(*(_QWORD *)v9 + 984))(&v161, v9, 17);
            v11 = v162;
            if (v162)
            {
              v12 = v161;
              while (*(WebCore::AccessibilityRenderObject **)v12 != this)
              {
                v12 = (WebCore::Node *)((char *)v12 + 8);
                if (!--v11)
                  goto LABEL_21;
              }
            }
            (*(void (**)(WebCore::AccessibilityRenderObject *, WebCore::AccessibilityObject *, _QWORD, uint64_t))(*(_QWORD *)this + 3072))(this, v9, *((unsigned int *)this + 13), 1);
LABEL_21:
            WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v10);
            WebCore::AccessibilityObject::iterator::operator++(v160);
            v9 = v160[0];
          }
          while ((WebCore::AccessibilityObject *)v159[0] != v160[0]);
        }
        WebCore::AccessibilityObject::iterator::~iterator((WebCore::AccessibilityObject::iterator *)v159, v8);
        WebCore::AccessibilityObject::iterator::~iterator((WebCore::AccessibilityObject::iterator *)v160, v13);
        v15 = *((_QWORD *)this + 1);
        if (__ldaxr((unsigned __int8 *)v15))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v15))
        {
          goto LABEL_26;
        }
        MEMORY[0x19AEA534C](v15);
LABEL_26:
        v17 = *(_QWORD *)(v15 + 8);
        v18 = v17 - 1;
        *(_QWORD *)(v15 + 8) = v17 - 1;
        if (v17 == 1)
        {
          v152 = *(_QWORD *)(v15 + 16);
          v19 = *(_QWORD *)(v15 + 24);
          *(_QWORD *)(v15 + 24) = 0;
          v20 = v152 != 0;
        }
        else
        {
          v19 = 0;
          v20 = 1;
        }
        v21 = __ldxr((unsigned __int8 *)v15);
        if (v21 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v15))
          {
            if (v18)
              goto LABEL_38;
            goto LABEL_34;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v15);
        if (v18)
          goto LABEL_38;
LABEL_34:
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        if (!v20)
          WTF::fastFree((WTF *)v15, v14);
LABEL_38:
        v22 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
        if (!v22)
          goto LABEL_97;
        v24 = v22;
        if ((*(_WORD *)(v22 + 28) & 4) == 0)
          goto LABEL_97;
        v25 = *(_QWORD *)(v22 + 80);
        if (!v25)
          goto LABEL_97;
        while ((*(_QWORD *)(v25 + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
LABEL_48:
          v25 = *(_QWORD *)(v25 + 56);
          if (!v25)
            goto LABEL_97;
        }
        if ((*(_WORD *)(v25 + 28) & 8) == 0)
        {
LABEL_47:
          if ((WebCore::isNodeAriaVisible((WebCore *)v25, v23) & 1) == 0)
            goto LABEL_48;
LABEL_54:
          v29 = (uint64_t *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
          if (v29)
          {
            v31 = (unsigned int **)v29;
            v32 = *v29;
            if (*v29)
              goto LABEL_282;
            v32 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v32 = 1;
            *(_QWORD *)(v32 + 8) = v31;
            v33 = *v31;
            *v31 = (unsigned int *)v32;
            if (!v33)
              goto LABEL_282;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              atomic_store(1u, v33);
              WTF::fastFree((WTF *)v33, v30);
            }
            v32 = (uint64_t)*v31;
            if (*v31)
            {
LABEL_282:
              do
                v36 = __ldaxr((unsigned int *)v32);
              while (__stlxr(v36 + 1, (unsigned int *)v32));
              if (*(_QWORD *)(v32 + 8))
              {
                if ((*(_WORD *)(v24 + 28) & 4) != 0)
                {
                  v37 = *(_QWORD *)(v24 + 80);
                  if (v37)
                  {
                    v38 = 0;
                    while (1)
                    {
                      if ((*(_QWORD *)(v37 + 64) & 0xFFFFFFFFFFFFLL) != 0)
                      {
                        v39 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
                        v30 = (void *)(*(_QWORD *)(v37 + 64) & 0xFFFFFFFFFFFFLL);
                        if (v30)
                        {
                          v40 = WebCore::AXObjectCache::get(v39, (WebCore::RenderObject *)v30);
                          if (v40)
                          {
                            v41 = v40;
                            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v40 + 856))(v40)
                              || (v42 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 1896))(v41, 1), v43 = *(unsigned int *)(v42 + 12), (_DWORD)v43)&& (v41 = *(_QWORD *)(*(_QWORD *)v42 + 8 * v43 - 8)) != 0)
                            {
                              v44 = *((unsigned int *)this + 13);
                              if ((_DWORD)v44)
                              {
                                v45 = 0;
                                while (*(_QWORD *)(*((_QWORD *)this + 5) + 8 * v45) != v41)
                                {
                                  if (v44 == ++v45)
                                    goto LABEL_76;
                                }
                              }
                              else
                              {
LABEL_76:
                                LODWORD(v45) = -1;
                              }
                              v38 = v45 + 1;
                            }
                          }
                        }
                        goto LABEL_88;
                      }
                      if ((*(_WORD *)(v37 + 28) & 8) == 0)
                        goto LABEL_83;
                      v46 = *(_DWORD *)(v37 + 24);
                      *(_DWORD *)(v37 + 24) = v46 + 2;
                      if ((*(_QWORD *)(v37 + 72) & 0xFFFFFFFFFFFFLL) != 0
                        && (v51 = *(_QWORD *)((*(_QWORD *)(v37 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) != 0)
                      {
                        v47 = (*(_QWORD *)(v51 + 16) & 0x1FLL) == 18;
                        if (v46)
                        {
LABEL_81:
                          *(_DWORD *)(v37 + 24) = v46;
                          goto LABEL_82;
                        }
                      }
                      else
                      {
                        v47 = 0;
                        if (v46)
                          goto LABEL_81;
                      }
                      if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v37, v30);
LABEL_82:
                      if (v47)
                        goto LABEL_84;
LABEL_83:
                      if (WebCore::isNodeAriaVisible((WebCore *)v37, (WebCore::Node *)v30))
                      {
LABEL_84:
                        v48 = *((_DWORD *)this + 13);
                        if (v38 >= v48)
                          v49 = v48;
                        else
                          v49 = v38;
                        v50 = WebCore::AXObjectCache::getOrCreate(*(_QWORD *)(v32 + 8), v37, 0);
                        (*(void (**)(WebCore::AccessibilityRenderObject *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 3072))(this, v50, v49, 1);
                        v38 = v49 - v48 + *((_DWORD *)this + 13);
                      }
LABEL_88:
                      v37 = *(_QWORD *)(v37 + 56);
                      if (!v37)
                        goto LABEL_94;
                    }
                  }
                }
              }
              do
              {
LABEL_94:
                v52 = __ldaxr((unsigned int *)v32);
                v53 = v52 - 1;
              }
              while (__stlxr(v53, (unsigned int *)v32));
              if (!v53)
              {
                atomic_store(1u, (unsigned int *)v32);
                WTF::fastFree((WTF *)v32, v30);
              }
            }
          }
LABEL_97:
          if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 128))(this))
          {
            v54 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1688))(this);
            if (v54)
            {
              v55 = (WebCore::Widget *)v54;
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 72))(v54) & 1) != 0
                || (*(unsigned int (**)(WebCore::Widget *))(*(_QWORD *)v55 + 80))(v55))
              {
                v56 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
                v57 = WebCore::AXObjectCache::getOrCreate(v56, v55);
                (*(void (**)(WebCore::AccessibilityRenderObject *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 3072))(this, v57, *((unsigned int *)this + 13), 1);
              }
            }
          }
          v58 = *((_QWORD *)this + 31);
          if (v58)
          {
            v59 = *(_QWORD *)(v58 + 8);
            if (v59)
            {
              if ((((*(_BYTE *)(v59 + 52) & 7) == 3) & *(_BYTE *)(v59 + 53)) == 1 && (*(_BYTE *)(v59 + 45) & 1) == 0)
              {
                v60 = *(_QWORD *)(*(_QWORD *)(v59 + 24) + 8);
                if (v60)
                {
                  v61 = *(_WORD *)(v60 + 28);
                  if ((v61 & 8) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19562D1D4);
                  }
                  if ((v61 & 0x10) != 0
                    && *(_QWORD *)(*(_QWORD *)(v60 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
                  {
                    v64 = *(_QWORD *)(v60 + 248);
                    v62 = (const WTF::AtomString *)(v60 + 248);
                    v63 = v64;
                    v65 = (const WebCore::TreeScope *)*((_QWORD *)v62 - 26);
                    v66 = (unsigned int *)*((_QWORD *)v65 + 5);
                    if (v66 && v63 != 0)
                    {
                      WebCore::TreeScopeOrderedMap::getElementByMapName(v66, v62, v65, (uint64_t *)&v161);
                      v69 = v161;
                      if (v161)
                      {
                        v70 = (WebCore::Node *)*((_QWORD *)v161 + 10);
                        if (v70)
                        {
                          while (1)
                          {
                            v71 = v70;
                            v72 = *((_WORD *)v70 + 14);
                            if ((v72 & 0x10) != 0
                              && *(_QWORD *)(*((_QWORD *)v71 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::areaTag
                                                                                        + 24))
                            {
                              break;
                            }
                            if ((v72 & 4) != 0)
                            {
                              v70 = (WebCore::Node *)*((_QWORD *)v71 + 10);
                              if (v70)
                                continue;
                            }
                            if (v71 == v161)
                              goto LABEL_175;
                            while (1)
                            {
                              v70 = (WebCore::Node *)*((_QWORD *)v71 + 7);
                              if (v70)
                                break;
                              v71 = (WebCore::Node *)*((_QWORD *)v71 + 4);
                              if (v71)
                                v73 = v71 == v161;
                              else
                                v73 = 1;
                              if (v73)
                                goto LABEL_175;
                            }
                          }
                          while (1)
                          {
                            if ((*((_WORD *)v71 + 15) & 1) != 0)
                            {
                              v74 = (uint64_t *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
                              v75 = (uint64_t *)WebCore::AXObjectCache::create(v74, 51);
                              WebCore::AccessibilityImageMapLink::setHTMLAreaElement((WebCore::AccessibilityImageMapLink *)v75, v71);
                              v77 = (unsigned int *)v161;
                              if (v161)
                              {
                                v77 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)v161);
                                if (v77)
                                {
                                  do
                                    v78 = __ldaxr(v77);
                                  while (__stlxr(v78 + 1, v77));
                                }
                              }
                              v79 = v75[32];
                              v75[32] = (uint64_t)v77;
                              if (v79)
                              {
                                do
                                {
                                  v80 = __ldaxr((unsigned int *)v79);
                                  v81 = v80 - 1;
                                }
                                while (__stlxr(v81, (unsigned int *)v79));
                                if (!v81)
                                {
                                  atomic_store(1u, (unsigned int *)v79);
                                  v95 = *(unsigned int *)(v79 + 28);
                                  if ((_DWORD)v95)
                                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v79 + 16), (WTF::StringImpl *)(*(_QWORD *)(v79 + 16) + 32 * v95));
                                  v96 = *(WTF **)(v79 + 16);
                                  if (v96)
                                  {
                                    *(_QWORD *)(v79 + 16) = 0;
                                    *(_DWORD *)(v79 + 24) = 0;
                                    WTF::fastFree(v96, v76);
                                  }
                                  WTF::fastFree((WTF *)v79, v76);
                                }
                              }
                              v82 = *((_QWORD *)this + 4);
                              if (v82)
                                goto LABEL_283;
                              v82 = WTF::fastCompactMalloc((WTF *)0x10);
                              *(_DWORD *)v82 = 1;
                              *(_QWORD *)(v82 + 8) = this;
                              v83 = (unsigned int *)*((_QWORD *)this + 4);
                              *((_QWORD *)this + 4) = v82;
                              if (!v83)
                                goto LABEL_283;
                              do
                              {
                                v84 = __ldaxr(v83);
                                v85 = v84 - 1;
                              }
                              while (__stlxr(v85, v83));
                              if (!v85)
                              {
                                atomic_store(1u, v83);
                                WTF::fastFree((WTF *)v83, v76);
                              }
                              v82 = *((_QWORD *)this + 4);
                              if (v82)
                              {
LABEL_283:
                                do
                                  v86 = __ldaxr((unsigned int *)v82);
                                while (__stlxr(v86 + 1, (unsigned int *)v82));
                              }
                              v87 = (unsigned int *)v75[30];
                              v75[30] = v82;
                              if (v87)
                              {
                                do
                                {
                                  v88 = __ldaxr(v87);
                                  v89 = v88 - 1;
                                }
                                while (__stlxr(v89, v87));
                                if (!v89)
                                {
                                  atomic_store(1u, v87);
                                  WTF::fastFree((WTF *)v87, v76);
                                }
                              }
                              if ((WebCore::AccessibilityObject::accessibilityIsIgnored((WebCore::AccessibilityObject *)v75) & 1) != 0)
                              {
                                v90 = (uint64_t *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
                                WebCore::AXObjectCache::remove(v90, v75[2]);
                              }
                              else
                              {
                                (*(void (**)(WebCore::AccessibilityRenderObject *, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)this + 3072))(this, v75, *((unsigned int *)this + 13), 1);
                              }
                            }
                            v91 = (WebCore::Node *)*((_QWORD *)v71 + 10);
                            if (!v91)
                              break;
LABEL_150:
                            while (1)
                            {
                              v71 = v91;
                              v92 = *((_WORD *)v91 + 14);
                              if ((v92 & 0x10) != 0
                                && *(_QWORD *)(*((_QWORD *)v71 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::areaTag
                                                                                          + 24))
                              {
                                break;
                              }
                              if ((v92 & 4) != 0)
                              {
                                v91 = (WebCore::Node *)*((_QWORD *)v71 + 10);
                                if (v91)
                                  continue;
                              }
                              if (v71 == v69)
                                goto LABEL_175;
                              while (1)
                              {
                                v91 = (WebCore::Node *)*((_QWORD *)v71 + 7);
                                if (v91)
                                  break;
                                v71 = (WebCore::Node *)*((_QWORD *)v71 + 4);
                                if (v71)
                                  v93 = v71 == v69;
                                else
                                  v93 = 1;
                                if (v93)
                                  goto LABEL_175;
                              }
                            }
                          }
                          if (v71 != v69)
                          {
                            do
                            {
                              v91 = (WebCore::Node *)*((_QWORD *)v71 + 7);
                              if (v91)
                                goto LABEL_150;
                              v71 = (WebCore::Node *)*((_QWORD *)v71 + 4);
                              if (v71)
                                v94 = v71 == v69;
                              else
                                v94 = 1;
                            }
                            while (!v94);
                          }
                        }
LABEL_175:
                        if (v161)
                        {
                          if (*((_DWORD *)v161 + 6) == 2)
                          {
                            if ((*((_WORD *)v161 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v161, v68);
                          }
                          else
                          {
                            *((_DWORD *)v161 + 6) -= 2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v97 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
          if (v97)
          {
            v98 = v97;
            if ((*(_WORD *)(v97 + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(v97 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
            {
              *(_DWORD *)(v97 + 24) += 2;
              v99 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v97 + 240) + 552))(*(_QWORD *)(v97 + 240));
              if (v99)
              {
                v101 = v99;
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v99 + 864))(v99))
                {
                  v102 = (uint64_t *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
                  v104 = WebCore::AXObjectCache::create(v102, 104);
                  if ((*(_QWORD *)(v101 + 16) & 0xFFFFFFFFFFFFLL) == 0)
                  {
                    v105 = WTF::fastCompactMalloc((WTF *)0x28);
                    *(_DWORD *)v105 = 1;
                    *(_QWORD *)(v105 + 16) = 0;
                    *(_QWORD *)(v105 + 24) = 0;
                    *(_QWORD *)(v105 + 8) = v101;
                    *(_BYTE *)(v105 + 32) = 0;
                    v106 = *(_QWORD *)(v101 + 16);
                    *(_QWORD *)(v101 + 16) = v106 & 0xFFFF000000000000 | v105;
                    v107 = (unsigned int *)(v106 & 0xFFFFFFFFFFFFLL);
                    if (v107)
                    {
                      do
                      {
                        v108 = __ldaxr(v107);
                        v109 = v108 - 1;
                      }
                      while (__stlxr(v109, v107));
                      if (!v109)
                      {
                        atomic_store(1u, v107);
                        v158 = (WTF *)v107;
                        v156 = v107[7];
                        if ((_DWORD)v156)
                          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v158 + 2), (WTF::StringImpl *)(*((_QWORD *)v158 + 2) + 32 * v156));
                        v157 = (WTF *)*((_QWORD *)v158 + 2);
                        if (v157)
                        {
                          *((_QWORD *)v158 + 2) = 0;
                          *((_DWORD *)v158 + 6) = 0;
                          WTF::fastFree(v157, v103);
                        }
                        WTF::fastFree(v158, v103);
                      }
                    }
                  }
                  v110 = (unsigned int *)(*(_QWORD *)(v101 + 16) & 0xFFFFFFFFFFFFLL);
                  if (v110)
                  {
                    do
                      v111 = __ldaxr(v110);
                    while (__stlxr(v111 + 1, v110));
                  }
                  v112 = *(_QWORD *)(v104 + 248);
                  *(_QWORD *)(v104 + 248) = v110;
                  if (v112)
                  {
                    do
                    {
                      v113 = __ldaxr((unsigned int *)v112);
                      v114 = v113 - 1;
                    }
                    while (__stlxr(v114, (unsigned int *)v112));
                    if (!v114)
                    {
                      atomic_store(1u, (unsigned int *)v112);
                      v154 = *(unsigned int *)(v112 + 28);
                      if ((_DWORD)v154)
                        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v112 + 16), (WTF::StringImpl *)(*(_QWORD *)(v112 + 16) + 32 * v154));
                      v155 = *(WTF **)(v112 + 16);
                      if (v155)
                      {
                        *(_QWORD *)(v112 + 16) = 0;
                        *(_DWORD *)(v112 + 24) = 0;
                        WTF::fastFree(v155, v103);
                      }
                      WTF::fastFree((WTF *)v112, v103);
                    }
                  }
                  v115 = *((_QWORD *)this + 4);
                  if (v115)
                    goto LABEL_284;
                  v115 = WTF::fastCompactMalloc((WTF *)0x10);
                  *(_DWORD *)v115 = 1;
                  *(_QWORD *)(v115 + 8) = this;
                  v116 = (unsigned int *)*((_QWORD *)this + 4);
                  *((_QWORD *)this + 4) = v115;
                  if (!v116)
                    goto LABEL_284;
                  do
                  {
                    v117 = __ldaxr(v116);
                    v118 = v117 - 1;
                  }
                  while (__stlxr(v118, v116));
                  if (!v118)
                  {
                    atomic_store(1u, v116);
                    WTF::fastFree((WTF *)v116, v103);
                  }
                  v115 = *((_QWORD *)this + 4);
                  if (v115)
                  {
LABEL_284:
                    do
                      v119 = __ldaxr((unsigned int *)v115);
                    while (__stlxr(v119 + 1, (unsigned int *)v115));
                  }
                  v120 = *(unsigned int **)(v104 + 240);
                  *(_QWORD *)(v104 + 240) = v115;
                  if (v120)
                  {
                    do
                    {
                      v121 = __ldaxr(v120);
                      v122 = v121 - 1;
                    }
                    while (__stlxr(v122, v120));
                    if (!v122)
                    {
                      atomic_store(1u, v120);
                      WTF::fastFree((WTF *)v120, v103);
                    }
                  }
                  (*(void (**)(WebCore::AccessibilityRenderObject *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 3072))(this, v104, *((unsigned int *)this + 13), 1);
                }
              }
              if (*(_DWORD *)(v98 + 24) == 2)
              {
                if ((*(_WORD *)(v98 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v98, v100);
              }
              else
              {
                *(_DWORD *)(v98 + 24) -= 2;
              }
            }
          }
          if ((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this))
          {
            v123 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
            if (v123
              && (*(_WORD *)(v123 + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(v123 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
            {
              v125 = *((_QWORD *)this + 31);
              if (!v125 || (v126 = *(_QWORD *)(v125 + 8)) == 0 || *(_BYTE *)(v126 + 46) == 13)
              {
                *((_BYTE *)this + 56) = 0;
                WebCore::AccessibilityNodeObject::addChildren(this);
              }
            }
          }
          v127 = WebCore::AccessibilityRenderObject::remoteSVGRootElement(this, 0);
          if (!v127)
            goto LABEL_253;
          v129 = v127;
          v130 = *(_QWORD *)(v127 + 8);
          if (__ldaxr((unsigned __int8 *)v130))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v130))
          {
            goto LABEL_221;
          }
          MEMORY[0x19AEA534C](v130);
LABEL_221:
          ++*(_QWORD *)(v130 + 8);
          v132 = __ldxr((unsigned __int8 *)v130);
          if (v132 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v130))
            {
LABEL_226:
              v133 = *((_QWORD *)this + 4);
              if (v133)
                goto LABEL_285;
              v133 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v133 = 1;
              *(_QWORD *)(v133 + 8) = this;
              v134 = (unsigned int *)*((_QWORD *)this + 4);
              *((_QWORD *)this + 4) = v133;
              if (!v134)
                goto LABEL_285;
              do
              {
                v135 = __ldaxr(v134);
                v136 = v135 - 1;
              }
              while (__stlxr(v136, v134));
              if (!v136)
              {
                atomic_store(1u, v134);
                WTF::fastFree((WTF *)v134, v128);
              }
              v133 = *((_QWORD *)this + 4);
              if (v133)
              {
LABEL_285:
                do
                  v137 = __ldaxr((unsigned int *)v133);
                while (__stlxr(v137 + 1, (unsigned int *)v133));
              }
              v138 = *(unsigned int **)(v129 + 264);
              *(_QWORD *)(v129 + 264) = v133;
              if (v138)
              {
                do
                {
                  v139 = __ldaxr(v138);
                  v140 = v139 - 1;
                }
                while (__stlxr(v140, v138));
                if (!v140)
                {
                  atomic_store(1u, v138);
                  WTF::fastFree((WTF *)v138, v128);
                }
              }
              (*(void (**)(WebCore::AccessibilityRenderObject *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 3072))(this, v129, *((unsigned int *)this + 13), 1);
              v142 = *(_QWORD *)(v129 + 8);
              if (__ldaxr((unsigned __int8 *)v142))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v142))
              {
                goto LABEL_241;
              }
              MEMORY[0x19AEA534C](v142);
LABEL_241:
              v144 = *(_QWORD *)(v142 + 8);
              v145 = v144 - 1;
              *(_QWORD *)(v142 + 8) = v144 - 1;
              if (v144 == 1)
              {
                v153 = *(_QWORD *)(v142 + 16);
                v146 = *(_QWORD *)(v142 + 24);
                *(_QWORD *)(v142 + 24) = 0;
                v147 = v153 != 0;
              }
              else
              {
                v146 = 0;
                v147 = 1;
              }
              v148 = __ldxr((unsigned __int8 *)v142);
              if (v148 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v142))
                {
                  if (!v145)
                    goto LABEL_249;
                  goto LABEL_253;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v142);
              if (!v145)
              {
LABEL_249:
                if (v146)
                  (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
                if (!v147)
                  WTF::fastFree((WTF *)v142, v141);
              }
LABEL_253:
              if (((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 856))(this) & 1) == 0)
              {
                v149 = *((unsigned int *)this + 13);
                if ((_DWORD)v149)
                {
                  v150 = (_QWORD *)*((_QWORD *)this + 5);
                  v151 = 8 * v149;
                  do
                  {
                    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v150 + 128))(*v150))
                    {
                      if (*v150)
                        (*(void (**)(_QWORD))(*(_QWORD *)*v150 + 48))(*v150);
                    }
                    ++v150;
                    v151 -= 8;
                  }
                  while (v151);
                }
              }
              WebCore::AccessibilityNodeObject::updateOwnedChildren(this);
              *((_BYTE *)this + 233) = 0;
              result = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 3320))(this);
              goto LABEL_261;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v130);
          goto LABEL_226;
        }
        v26 = *(_DWORD *)(v25 + 24);
        *(_DWORD *)(v25 + 24) = v26 + 2;
        if ((*(_QWORD *)(v25 + 72) & 0xFFFFFFFFFFFFLL) != 0
          && (v28 = *(_QWORD *)((*(_QWORD *)(v25 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) != 0)
        {
          v27 = (*(_QWORD *)(v28 + 16) & 0x1FLL) == 18;
          if (!v26)
          {
LABEL_52:
            if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v25, v23);
LABEL_46:
            if (v27)
              goto LABEL_54;
            goto LABEL_47;
          }
        }
        else
        {
          v27 = 0;
          if (!v26)
            goto LABEL_52;
        }
        *(_DWORD *)(v25 + 24) = v26;
        goto LABEL_46;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_14;
  }
LABEL_261:
  *((_BYTE *)this + 233) = 0;
  return result;
}

unsigned int *WebCore::AccessibilityRenderObject::setAccessibleName(unsigned int *this, WTF::StringImpl **a2)
{
  uint64_t v2;
  unsigned int *v4;
  __n128 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  char v12;

  v2 = *((_QWORD *)this + 31);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return this;
  v4 = this;
  this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 1456))(this);
  v6 = *((_QWORD *)v4 + 31);
  if ((_DWORD)this == 138)
  {
    v7 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 24) + 8) + 40) + 8)
                   + 1272);
LABEL_9:
    v8 = *v7;
    if (*v7 && (*(_WORD *)(v8 + 28) & 8) != 0)
    {
      *(_DWORD *)(v8 + 24) += 2;
      this = (unsigned int *)WebCore::Element::setAttribute((WebCore::Element *)v8, (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_labelAttr, a2, 0, &v10, v5);
      if (v12)
      {
        this = (unsigned int *)v11;
        v11 = 0;
        if (this)
        {
          if (*this == 2)
            this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v9);
          else
            *this -= 2;
        }
      }
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
    return this;
  }
  if (v6)
    v6 = *(_QWORD *)(v6 + 8);
  if ((*(_BYTE *)(v6 + 45) & 1) == 0)
  {
    v7 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 8);
    goto LABEL_9;
  }
  return this;
}

BOOL WebCore::AccessibilityRenderObject::hasBoldFont(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 31);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if ((*(_BYTE *)(v2 + 45) & 2) != 0)
    v2 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8);
  return *(__int16 *)(*(_QWORD *)(v2 + 112) + 192) > 2399;
}

BOOL WebCore::AccessibilityRenderObject::hasItalicFont(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *((_QWORD *)this + 31);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if ((*(_BYTE *)(v2 + 45) & 2) != 0)
    v2 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8);
  v3 = *(_DWORD *)(*(_QWORD *)(v2 + 112) + 196);
  return (v3 & 0xFF0000) != 0 && (__int16)v3 > 55;
}

BOOL WebCore::AccessibilityRenderObject::hasPlainText(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v8;
  int v9;

  v1 = *((_QWORD *)this + 31);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return 0;
  v3 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 2976))(this);
  v4 = *((_QWORD *)this + 31);
  if (v3 != 107)
  {
    v4 = *(_QWORD *)(v4 + 8);
    if ((*(_BYTE *)(v4 + 45) & 2) != 0)
      goto LABEL_16;
    v5 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this);
    if (((v5 - 101) > 0x19 || ((1 << (v5 - 101)) & 0x3000001) == 0) && v5 != 19)
      return 0;
    v4 = *((_QWORD *)this + 31);
  }
  if (v4)
    v4 = *(_QWORD *)(v4 + 8);
LABEL_16:
  if ((*(_BYTE *)(v4 + 45) & 2) != 0)
    v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8);
  v8 = *(_QWORD *)(v4 + 112);
  if ((float)((float)*(__int16 *)(v8 + 192) * 0.25) == 400.0)
  {
    v9 = *(_DWORD *)(v8 + 196);
    if ((v9 & 0xFF0000) == 0 || (__int16)v9 <= 55)
      return (*(_DWORD *)(v4 + 120) & 0x78000) == 0;
  }
  return 0;
}

BOOL WebCore::AccessibilityRenderObject::hasSameFont(WebCore::AccessibilityRenderObject *this, const WebCore::AXCoreObject *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = (*(uint64_t (**)(const WebCore::AXCoreObject *))(*(_QWORD *)a2 + 848))(a2);
  v4 = *((_QWORD *)this + 31);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5 || v3 == 0)
    return 0;
  if ((*(_BYTE *)(v5 + 45) & 2) != 0)
    v5 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 112) + 216);
  if ((*(_BYTE *)(v3 + 45) & 2) != 0)
    v3 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8);
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 112) + 216);
  v10 = *(unsigned int *)(v8 + 4);
  if ((_DWORD)v10 != *(_DWORD *)(v9 + 4))
    return 0;
  if (!(_DWORD)v10)
    return 1;
  if (*(_QWORD *)(v8 + 8) != *(_QWORD *)(v9 + 8))
    return 0;
  v11 = 0;
  v12 = v8 + 16;
  v13 = v9 + 16;
  while (v10 - 1 != v11)
  {
    v14 = *(_QWORD *)(v12 + 8 * v11);
    v15 = *(_QWORD *)(v13 + 8 * v11++);
    if (v14 != v15)
      return v11 >= v10;
  }
  v11 = v10;
  return v11 >= v10;
}

BOOL WebCore::AccessibilityRenderObject::hasSameFontColor(WebCore::AccessibilityRenderObject *this, const WebCore::AXCoreObject *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  void *v9;
  uint64_t v11;
  _BOOL8 v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL8 v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;

  v3 = (*(uint64_t (**)(const WebCore::AXCoreObject *))(*(_QWORD *)a2 + 848))(a2);
  v4 = *((_QWORD *)this + 31);
  if (!v4)
    return 0;
  v5 = v3;
  v6 = *(_QWORD *)(v4 + 8);
  if (!v6 || v3 == 0)
    return 0;
  if ((*(_BYTE *)(v6 + 45) & 2) != 0)
  {
    v6 = *(_QWORD *)(v6 + 32);
    if (v6)
      v6 = *(_QWORD *)(v6 + 8);
  }
  WebCore::RenderStyle::visitedDependentColor(v6 + 80, 5, 0, (uint64_t *)&v21);
  if ((*(_BYTE *)(v5 + 45) & 2) != 0)
  {
    v11 = *(_QWORD *)(v5 + 32);
    if (v11)
      v5 = *(_QWORD *)(v11 + 8);
    else
      v5 = 0;
  }
  WebCore::RenderStyle::visitedDependentColor(v5 + 80, 5, 0, (uint64_t *)&v20);
  if ((v21 & 0x8000000000000) == 0)
  {
    result = (v20 & 0x8000000000000) == 0 && v21 == v20;
    if ((v20 & 0x8000000000000) == 0)
      goto LABEL_18;
    v16 = 0;
    v17 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    do
    {
LABEL_30:
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v9);
    }
    result = v16;
    goto LABEL_18;
  }
  if ((v20 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    if (*(float *)((v21 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0xC))
    {
      if (*(float *)((v21 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0x10))
        v16 = HIBYTE(v21) == HIBYTE(v20) && BYTE6(v21) == BYTE6(v20);
      else
        v16 = 0;
    }
    else
    {
      v16 = 0;
    }
    goto LABEL_30;
  }
  result = 0;
LABEL_18:
  if ((v21 & 0x8000000000000) != 0)
  {
    v12 = result;
    v13 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v9);
      return v12;
    }
  }
  return result;
}

float WebCore::AccessibilityRenderObject::hasSameStyle(WebCore::AccessibilityRenderObject *this, const WebCore::AXCoreObject *a2)
{
  uint64_t v3;
  const WTF::StringImpl *v4;
  float result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v3 = (*(uint64_t (**)(const WebCore::AXCoreObject *))(*(_QWORD *)a2 + 848))(a2);
  v6 = *((_QWORD *)this + 31);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7 && v3 != 0)
    {
      if ((*(_BYTE *)(v7 + 45) & 2) != 0)
      {
        v7 = *(_QWORD *)(v7 + 32);
        if (v7)
          v7 = *(_QWORD *)(v7 + 8);
      }
      v9 = v7 + 80;
      if ((*(_BYTE *)(v3 + 45) & 2) != 0)
      {
        v10 = *(_QWORD *)(v3 + 32);
        if (v10)
          v3 = *(_QWORD *)(v10 + 8);
        else
          v3 = 0;
      }
      return WebCore::RenderStyle::operator==(v9, v3 + 80, v4);
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityRenderObject::hasUnderline(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 31);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if ((*(_BYTE *)(v2 + 45) & 2) != 0)
    v2 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8);
  return *(unsigned __int8 *)(v2 + 121) >> 7;
}

WTF::StringImpl *WebCore::AccessibilityRenderObject::secureFieldValue@<X0>(WebCore::AccessibilityRenderObject *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v4;

  result = (WTF::StringImpl *)(*(_QWORD *)((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this)
                                         + 64) & 0xFFFFFFFFFFFFLL);
  if (result)
  {
    while ((*((_BYTE *)result + 45) & 2) == 0)
    {
      v4 = *((unsigned int *)result + 16);
      if (v4 | ((unint64_t)*((unsigned __int8 *)result + 68) << 32))
      {
        result = *(WTF::StringImpl **)((v4 | ((unint64_t)*((unsigned __int8 *)result + 68) << 32)) + 8);
        if (result)
          continue;
      }
      goto LABEL_5;
    }
    return WebCore::RenderText::textWithoutConvertingBackslashToYenSymbol(result, a2);
  }
  else
  {
LABEL_5:
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::AccessibilityRenderObject::getScrollableAreaIfScrollable(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1232))(this);
  if ((!v2 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 1456))(v2) != 99)
    && (v3 = *((_QWORD *)this + 31)) != 0
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (*(_BYTE *)(v4 + 45) & 4) != 0
    && WebCore::RenderBox::canBeScrolledAndHasScrollableArea((WebCore::RenderBox *)v4)
    && (v5 = *(_QWORD *)(v4 + 144)) != 0)
  {
    return *(_QWORD *)(v5 + 264);
  }
  else
  {
    return 0;
  }
}

unint64_t WebCore::AccessibilityRenderObject::scrollTo(unint64_t this, const WebCore::IntPoint *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::ScrollableArea *v5;
  __int128 v6;

  v2 = *(_QWORD *)(this + 248);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if ((*(_BYTE *)(v3 + 45) & 4) != 0)
      {
        this = WebCore::RenderBox::canBeScrolledAndHasScrollableArea((WebCore::RenderBox *)v3);
        if ((_DWORD)this)
        {
          v5 = *(WebCore::ScrollableArea **)(*(_QWORD *)(v3 + 144) + 264);
          v6 = xmmword_1968DF820;
          return WebCore::RenderLayerScrollableArea::scrollToOffset(v5, a2, &v6);
        }
      }
    }
  }
  return this;
}

_QWORD *WebCore::AccessibilityRenderObject::frameRect(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  float32x4_t v3;

  v1 = this[31];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if ((*(_BYTE *)(v2 + 45) & 4) != 0)
      {
        v3 = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)(v2 + 152)), (float32x4_t)vdupq_n_s32(0x3C800000u));
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, float32x4_t *, uint64_t))(*this + 1536))(this, &v3, 1);
      }
    }
  }
  return this;
}

uint64_t WebCore::AccessibilityRenderObject::isIgnoredElementWithinMathTree(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 31);
  if (v1
    && (v2 = *(_QWORD *)(v1 + 8)) != 0
    && (*(_BYTE *)(v2 + 45) & 1) != 0
    && (v3 = *(_QWORD *)(v2 + 32)) != 0
    && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  }
  else
  {
    return 0;
  }
}

WebCore::AccessibilitySVGElement *WebCore::AccessibilitySVGElement::AccessibilitySVGElement(WebCore::AccessibilitySVGElement *this, WebCore::RenderObject *a2, WebCore::AXObjectCache *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  void *v18;
  WTF *v19;

  if ((*((_BYTE *)a2 + 45) & 1) != 0)
    v6 = 0;
  else
    v6 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  *(_OWORD *)((char *)this + 218) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v7 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v7 = 0;
  *(_OWORD *)(v7 + 8) = xmmword_19689B170;
  *(_QWORD *)(v7 + 24) = this;
  *(_OWORD *)((char *)this + 41) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_WORD *)((char *)this + 57) = 134;
  *((_BYTE *)this + 59) = 2;
  *((_BYTE *)this + 64) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_WORD *)this + 116) = 0;
  *(_OWORD *)((char *)this + 211) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_QWORD *)this = off_1E337CD98;
  *((_QWORD *)this + 1) = v7;
  *((_BYTE *)this + 234) = -122;
  if (v6)
  {
    v8 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v6);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  else
  {
    v8 = 0;
  }
  *((_QWORD *)this + 30) = v8;
  *(_QWORD *)this = off_1E337F4E0;
  v10 = *((_QWORD *)a2 + 1);
  if (v10)
    goto LABEL_9;
  v10 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v10 = 1;
  *(_QWORD *)(v10 + 8) = a2;
  v19 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  if (!v19)
    goto LABEL_9;
  if (*(_DWORD *)v19 != 1)
  {
    --*(_DWORD *)v19;
LABEL_9:
    ++*(_DWORD *)v10;
    goto LABEL_10;
  }
  WTF::fastFree(v19, v18);
  v10 = *((_QWORD *)a2 + 1);
  if (v10)
    goto LABEL_9;
LABEL_10:
  *((_QWORD *)this + 31) = v10;
  *(_QWORD *)this = off_1E3380218;
  if (a3)
  {
    v11 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
      goto LABEL_29;
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = a3;
    v13 = *(unsigned int **)a3;
    *(_QWORD *)a3 = v11;
    if (!v13)
      goto LABEL_29;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v12);
    }
    v11 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
LABEL_29:
      do
        v16 = __ldaxr((unsigned int *)v11);
      while (__stlxr(v16 + 1, (unsigned int *)v11));
    }
  }
  else
  {
    v11 = 0;
  }
  *((_QWORD *)this + 32) = v11;
  return this;
}

void WebCore::AccessibilitySVGElement::~AccessibilitySVGElement(WebCore::AccessibilitySVGElement *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = off_1E3380218;
  v3 = (unsigned int *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = off_1E337F4E0;
  v6 = (WTF *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  *(_QWORD *)this = off_1E337CD98;
  v7 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v10 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v10)
      {
        v13 = v7;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v10));
        v7 = v13;
      }
      v11 = *(WTF **)(v7 + 16);
      if (v11)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v12 = v7;
        WTF::fastFree(v11, a2);
        v7 = v12;
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)this = off_1E3380218;
  v3 = (unsigned int *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = off_1E337F4E0;
  v6 = (WTF *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  *(_QWORD *)this = off_1E337CD98;
  v7 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v12 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v12)
      {
        v15 = v7;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v12));
        v7 = v15;
      }
      v13 = *(WTF **)(v7 + 16);
      if (v13)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v14 = v7;
        WTF::fastFree(v13, a2);
        v7 = v14;
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
  WTF::fastFree(v10, v11);
}

uint64_t WebCore::AccessibilitySVGElement::targetForUseElement(WebCore::AccessibilitySVGElement *this)
{
  uint64_t v2;
  double v3;
  double v4;
  float v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  const WebCore::TreeScope *v15;
  uint64_t v16;
  BOOL v17;
  void *v18;
  WebCore::Node *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WebCore::Node *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;

  v2 = (*(uint64_t (**)(WebCore::AccessibilitySVGElement *))(*(_QWORD *)this + 832))(this);
  if (!v2)
    return 0;
  v8 = v2;
  if ((*(_WORD *)(v2 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::useTag + 24))
  {
    return 0;
  }
  v9 = *(_QWORD *)(v2 + 224);
  v10 = *(_QWORD *)(v9 + 24);
  if (!v10 || !*(_DWORD *)(v10 - 12))
    goto LABEL_7;
  v24 = *(unsigned int *)(v10 - 4);
  if ((_DWORD)v24)
  {
    v25 = 8 * v24;
    v26 = *(uint64_t **)(v9 + 24);
    while ((unint64_t)(*v26 + 1) <= 1)
    {
      ++v26;
      v25 -= 8;
      if (!v25)
        goto LABEL_7;
    }
  }
  else
  {
    v26 = *(uint64_t **)(v9 + 24);
  }
  v29 = (uint64_t *)(v10 + 8 * v24);
  if (v26 == v29)
    goto LABEL_7;
  v30 = *v26;
LABEL_57:
  if (!*(_QWORD *)(v30 + 8))
  {
    while (++v26 != v29)
    {
      v30 = *v26;
      if ((unint64_t)(*v26 + 1) > 1)
      {
        if (v26 != v29)
          goto LABEL_57;
        break;
      }
    }
LABEL_7:
    v11 = v9 + 40;
    goto LABEL_8;
  }
  v11 = v9 + 48;
LABEL_8:
  v12 = *(WTF::StringImpl **)(*(_QWORD *)v11 + 32);
  if (!v12 || (*(_DWORD *)v12 += 2, v34 = v12, !*((_DWORD *)v12 + 1)))
  {
    v14 = (WTF::StringImpl *)*WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::hrefAttr);
    if (v14)
      *(_DWORD *)v14 += 2;
    v34 = v14;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  v15 = *(const WebCore::TreeScope **)(v8 + 40);
  v16 = *(_QWORD *)v15;
  if (*(_QWORD *)v15)
    v17 = (*(_WORD *)(*(_QWORD *)v15 + 28) & 0x80) == 0;
  else
    v17 = 1;
  if (!v17 && !*(_BYTE *)(v16 + 193))
  {
    v27 = *(_QWORD *)(v16 + 200);
    if (v27)
    {
      v28 = *(_QWORD *)(v27 + 8);
      if (v28)
      {
        if (*(_WORD *)(*(_QWORD *)(v28 + 96) + 10) == 242)
          v15 = (const WebCore::TreeScope *)*((_QWORD *)v15 + 2);
      }
    }
  }
  v31 = 0;
  WebCore::SVGURIReference::targetElementFromIRIString((WTF::StringImpl *)&v34, v15, &v31, (uint64_t *)&v32, v3, v4, v5);
  v19 = v31;
  v31 = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v19, v18);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
  }
  if (v32
    && (v20 = (*(uint64_t (**)(WebCore::AccessibilitySVGElement *))(*(_QWORD *)this + 1488))(this)) != 0)
  {
    v6 = WebCore::AXObjectCache::getOrCreate(v20, (uint64_t)v32, 0);
  }
  else
  {
    v6 = 0;
  }
  v21 = v33;
  v33 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v32;
  v32 = 0;
  if (v22)
  {
    if (*((_DWORD *)v22 + 6) == 2)
    {
      if ((*((_WORD *)v22 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v22, v18);
    }
    else
    {
      *((_DWORD *)v22 + 6) -= 2;
    }
  }
  v23 = v34;
  v34 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)v23 -= 2;
  }
  return v6;
}

WTF::StringImpl *WebCore::AccessibilitySVGElement::accessibilityText(WebCore::AccessibilitySVGElement *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *result;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;

  WebCore::AccessibilitySVGElement::description(a1, &v26);
  v4 = v26;
  if (v26 && *((_DWORD *)v26 + 1))
  {
    *(_DWORD *)v26 += 2;
    v24 = v4;
    v25 = 0;
    v13 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v13 == *(_DWORD *)(a2 + 8))
    {
      v14 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v13 + 1, (unint64_t)&v24);
      v16 = *(unsigned int *)(a2 + 12);
      v17 = *(_QWORD *)a2 + 16 * v16;
      v18 = *(_QWORD *)v14;
      *(_QWORD *)v14 = 0;
      *(_QWORD *)v17 = v18;
      *(_DWORD *)(v17 + 8) = *(_DWORD *)(v14 + 8);
      v19 = v24;
      *(_DWORD *)(a2 + 12) = v16 + 1;
      v24 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v15);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    else
    {
      v22 = *(_QWORD *)a2 + 16 * v13;
      *(_QWORD *)v22 = v4;
      *(_DWORD *)(v22 + 8) = 0;
      *(_DWORD *)(a2 + 12) = v13 + 1;
    }
  }
  WebCore::AccessibilitySVGElement::helpText(a1, &v23);
  v6 = v23;
  if (v23)
  {
    if (!*((_DWORD *)v23 + 1))
    {
      v23 = 0;
LABEL_16:
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
      goto LABEL_18;
    }
    *(_DWORD *)v23 += 2;
    v24 = v6;
    v25 = 3;
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v7 == *(_DWORD *)(a2 + 8))
    {
      v8 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v7 + 1, (unint64_t)&v24);
      v9 = *(unsigned int *)(a2 + 12);
      v10 = *(_QWORD *)a2 + 16 * v9;
      v11 = *(_QWORD *)v8;
      *(_QWORD *)v8 = 0;
      *(_QWORD *)v10 = v11;
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v8 + 8);
      v12 = v24;
      *(_DWORD *)(a2 + 12) = v9 + 1;
      v24 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v5);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    else
    {
      v20 = *(_QWORD *)a2 + 16 * v7;
      *(_QWORD *)v20 = v6;
      *(_DWORD *)(v20 + 8) = 3;
      *(_DWORD *)(a2 + 12) = v7 + 1;
    }
    v6 = v23;
    v23 = 0;
    if (v6)
      goto LABEL_16;
  }
LABEL_18:
  result = v26;
  v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::AccessibilitySVGElement::description@<X0>(WebCore::AccessibilitySVGElement *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;
  void *v8;
  uint64_t v9;
  WTF::StringBuilder *v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 3000))(&v24);
  v5 = v24;
  if (v24 && *((_DWORD *)v24 + 1))
    goto LABEL_24;
  WebCore::AccessibilityObject::getAttributeTrimmed(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelAttr, &v23);
  v5 = v23;
  if (v23 && !*((_DWORD *)v23 + 1))
  {
    v23 = 0;
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v6);
    else
      *(_DWORD *)v5 -= 2;
    v5 = 0;
  }
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      if (!v5)
        goto LABEL_7;
LABEL_24:
      if (*((_DWORD *)v5 + 1))
      {
        *a2 = v5;
        return result;
      }
      v7 = 0;
      goto LABEL_8;
    }
    *(_DWORD *)result -= 2;
  }
  if (v5)
    goto LABEL_24;
LABEL_7:
  v7 = 1;
LABEL_8:
  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::AccessibilitySVGElement *))(*(_QWORD *)this + 832))(this);
  v9 = (uint64_t)result;
  if (!result)
    goto LABEL_37;
  *((_DWORD *)result + 6) += 2;
  v24 = result;
  result = (WTF::StringImpl *)WebCore::AccessibilitySVGElement::childElementWithMatchingLanguage<WebCore::ElementChildRange<WebCore::SVGTitleElement>>((uint64_t)this, (uint64_t)&v24);
  if (result)
  {
    result = WebCore::Node::textContent(result, 0, v10, a2, v11);
    goto LABEL_48;
  }
  if ((*(_WORD *)(v9 + 28) & 0x20) == 0)
    goto LABEL_37;
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24);
  if (v12 == *(_QWORD *)(WebCore::SVGNames::aTag + 24))
  {
    v13 = *(_QWORD *)(v9 + 104);
    if (v13)
    {
      v14 = *(_DWORD *)(v13 + 4);
      if ((v14 & 1) != 0)
      {
        v15 = *(_QWORD *)(v13 + 40);
        LODWORD(v16) = *(_DWORD *)(v13 + 52);
        if ((_DWORD)v16)
        {
LABEL_16:
          v16 = v16;
          v17 = (WTF::StringImpl **)(v15 + 8);
          while (1)
          {
            v18 = (uint64_t)*(v17 - 1);
            if (v18 == WebCore::XLinkNames::titleAttr
              || *(_QWORD *)(v18 + 24) == *(_QWORD *)(WebCore::XLinkNames::titleAttr + 24)
              && *(_QWORD *)(v18 + 32) == *(_QWORD *)(WebCore::XLinkNames::titleAttr + 32))
            {
              break;
            }
            v17 += 2;
            if (!--v16)
            {
              v17 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
LABEL_35:
          v19 = *v17;
          if (v19 && *((_DWORD *)v19 + 1))
          {
LABEL_58:
            *(_DWORD *)v19 += 2;
            goto LABEL_44;
          }
          goto LABEL_36;
        }
      }
      else
      {
        v15 = v13 + 32;
        LODWORD(v16) = v14 >> 5;
        if ((_DWORD)v16)
          goto LABEL_16;
      }
    }
    v17 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_35;
  }
LABEL_36:
  if (v12 == *(_QWORD *)(WebCore::SVGNames::useTag + 24))
  {
    result = (WTF::StringImpl *)WebCore::AccessibilitySVGElement::targetForUseElement(this);
    if (result)
    {
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 1368))(result);
LABEL_48:
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
      goto LABEL_50;
    }
  }
LABEL_37:
  v20 = *((_QWORD *)this + 31);
  if (!v20 || (v21 = *(_QWORD *)(v20 + 8)) == 0 || (v22 = *(unsigned __int8 *)(v21 + 46), v22 != 92) && v22 != 70)
  {
    v19 = 0;
    goto LABEL_44;
  }
  result = (WTF::StringImpl *)WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::altAttr);
  v19 = *(WTF::StringImpl **)result;
  if (*(_QWORD *)result)
    goto LABEL_58;
LABEL_44:
  *a2 = v19;
  if (v9)
    goto LABEL_48;
LABEL_50:
  if ((v7 & 1) == 0)
  {
    if (*(_DWORD *)v5 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::AccessibilitySVGElement::helpText@<X0>(WebCore::AccessibilitySVGElement *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WebCore::AccessibilitySVGElement *v2;
  WTF::StringImpl *result;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  void *v13;
  WebCore::Node *v14;
  unint64_t v15;
  void *v16;
  WTF::StringBuilder *v17;
  __n128 v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::AccessibilitySVGElement *v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  void *v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  _DWORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  WTF::StringImpl **v45;
  void *v46;
  void *v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  WebCore::Node *v51;
  WTF::StringBuilder *v52;
  __n128 v53;
  WTF::StringImpl *v54;
  const WTF::StringImpl *v55;
  char v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl **v63;
  void *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  WTF::StringImpl *v72;

  v2 = this;
  result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 3008))(&v69);
  if (v69 && *((_DWORD *)v69 + 1))
  {
    *a2 = v69;
    return result;
  }
  v5 = (*(uint64_t (**)(WebCore::AccessibilitySVGElement *))(*(_QWORD *)v2 + 832))(v2);
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilitySVGElement *))(*(_QWORD *)v2 + 1736))(&v72, v2);
  if (!v72 || !*((_DWORD *)v72 + 1))
  {
    WTF::defaultLanguage();
    v7 = v70;
    v70 = 0;
    v8 = v72;
    v72 = v7;
    if (v8)
    {
      v9 = *(_DWORD *)v8 - 2;
      if (*(_DWORD *)v8 != 2)
      {
LABEL_5:
        *(_DWORD *)v8 = v9;
        goto LABEL_6;
      }
      WTF::StringImpl::destroy(v8, v6);
      v8 = v70;
      v70 = 0;
      if (v8)
      {
        v9 = *(_DWORD *)v8 - 2;
        if (*(_DWORD *)v8 != 2)
          goto LABEL_5;
        WTF::StringImpl::destroy(v8, v59);
      }
    }
  }
LABEL_6:
  v70 = 0;
  v71 = 0;
  v10 = *(_QWORD *)(v5 + 80);
  if (v10)
  {
    v11 = &WebCore::SVGNames::descTag;
    while ((*(_WORD *)(v10 + 28) & 0x20) == 0
         || *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::descTag + 24))
    {
      v10 = *(_QWORD *)(v10 + 56);
      if (!v10)
        goto LABEL_11;
    }
    v14 = 0;
    v13 = 0;
    v23 = 0;
    LODWORD(v12) = 0;
    while (1)
    {
      v24 = *(_QWORD *)(v10 + 104);
      if (!v24)
        break;
      v25 = *(unsigned int *)(v24 + 4);
      if ((v25 & 1) != 0)
      {
        v26 = *(_QWORD *)(v24 + 40);
        v27 = *(unsigned int *)(v24 + 52);
        if (!v27)
          break;
      }
      else
      {
        v26 = v24 + 32;
        v27 = v25 >> 5;
        if (!(v25 >> 5))
          break;
      }
      v28 = v26 + 8;
      while (1)
      {
        v29 = *(_QWORD *)(v28 - 8);
        if (v29 == WebCore::SVGNames::langAttr
          || *(_QWORD *)(v29 + 24) == *(_QWORD *)(WebCore::SVGNames::langAttr + 24)
          && *(_QWORD *)(v29 + 32) == *(_QWORD *)(WebCore::SVGNames::langAttr + 32))
        {
          break;
        }
        v28 += 16;
        if (!--v27)
          goto LABEL_40;
      }
LABEL_41:
      v30 = HIDWORD(v71);
      if (HIDWORD(v71) == (_DWORD)v71)
      {
        v64 = v13;
        v65 = v23;
        v31 = v2;
        v32 = v11;
        v63 = a2;
        v33 = HIDWORD(v71) + ((unint64_t)HIDWORD(v71) >> 2);
        if (v33 >= 0x10)
          v34 = v33 + 1;
        else
          v34 = 16;
        if (v34 <= (unint64_t)HIDWORD(v71) + 1)
          v35 = HIDWORD(v71) + 1;
        else
          v35 = v34;
        if (v35 >> 29)
          goto LABEL_123;
        v36 = v70;
        v37 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v35));
        LODWORD(v71) = v35;
        v70 = v37;
        memcpy(v37, v36, 8 * v30);
        if (v36)
        {
          v11 = v32;
          if (v37 == v36)
          {
            v37 = 0;
            v70 = 0;
            LODWORD(v71) = 0;
          }
          WTF::fastFree(v36, v38);
        }
        else
        {
          v11 = v32;
        }
        v2 = v31;
        v39 = *(_DWORD **)v28;
        v23 = v65;
        if (*(_QWORD *)v28)
          *v39 += 2;
        *((_QWORD *)v37 + v30) = v39;
        v13 = v64;
        a2 = v63;
      }
      else
      {
        v40 = v70;
        v41 = *(_DWORD **)v28;
        if (*(_QWORD *)v28)
          *v41 += 2;
        *((_QWORD *)v40 + v30) = v41;
      }
      HIDWORD(v71) = v30 + 1;
      if ((_DWORD)v12 == (_DWORD)v23)
      {
        v42 = ((unint64_t)v23 >> 2) + v23;
        if (v42 >= 0x10)
          v43 = v42 + 1;
        else
          v43 = 16;
        if (v43 <= (unint64_t)v12 + 1)
          v44 = v12 + 1;
        else
          v44 = v43;
        if (v44 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19562EC44);
        }
        v45 = a2;
        v66 = v44;
        v46 = (void *)WTF::fastMalloc((WTF *)(8 * v44));
        memcpy(v46, v13, 8 * v12);
        if (v13)
        {
          if (v46 == v13)
            v49 = 0;
          else
            v49 = v66;
          v67 = v49;
          if (v46 == v13)
            v46 = 0;
          WTF::fastFree((WTF *)v13, v47);
          v23 = v67;
          v13 = v46;
          a2 = v45;
        }
        else
        {
          v13 = v46;
          a2 = v45;
          v23 = v66;
        }
      }
      *((_QWORD *)v13 + v12) = v10;
      if (*(_QWORD *)v28)
        v48 = *(_DWORD *)(*(_QWORD *)v28 + 4) == 0;
      else
        v48 = 1;
      v12 = (v12 + 1);
      if (v48 && v14 == 0)
        v14 = (WebCore::Node *)v10;
      v10 = *(_QWORD *)(v10 + 56);
      if (!v10)
        goto LABEL_12;
      while ((*(_WORD *)(v10 + 28) & 0x20) == 0 || *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(*v11 + 24))
      {
        v10 = *(_QWORD *)(v10 + 56);
        if (!v10)
          goto LABEL_12;
      }
    }
LABEL_40:
    v28 = MEMORY[0x1E0CBF2F8];
    goto LABEL_41;
  }
LABEL_11:
  v12 = 0;
  v13 = 0;
  v14 = 0;
LABEL_12:
  LOBYTE(v68) = 0;
  v15 = WTF::indexOfBestMatchingLanguageInList();
  v19 = HIDWORD(v71);
  if (v15 < HIDWORD(v71))
  {
    if (v15 >= v12)
    {
LABEL_123:
      __break(0xC471u);
      JUMPOUT(0x19562EC3CLL);
    }
    v14 = (WebCore::Node *)*((_QWORD *)v13 + v15);
    goto LABEL_15;
  }
  if (v13)
  {
LABEL_15:
    WTF::fastFree((WTF *)v13, v16);
    v19 = HIDWORD(v71);
  }
  if (v19)
  {
    v60 = v70;
    v61 = 8 * v19;
    do
    {
      v62 = *(WTF::StringImpl **)v60;
      *(_QWORD *)v60 = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
          WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v16);
        else
          *(_DWORD *)v62 -= 2;
      }
      v60 = (WTF::StringImpl *)((char *)v60 + 8);
      v61 -= 8;
    }
    while (v61);
  }
  v20 = v70;
  if (v70)
  {
    v70 = 0;
    LODWORD(v71) = 0;
    WTF::fastFree(v20, v16);
  }
  v21 = v72;
  v72 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v16);
      if (v14)
        goto LABEL_24;
      goto LABEL_89;
    }
    *(_DWORD *)v21 -= 2;
  }
  if (v14)
  {
LABEL_24:
    WebCore::Node::textContent(v14, 0, v17, a2, v18);
    goto LABEL_99;
  }
LABEL_89:
  v50 = (*(uint64_t (**)(WebCore::AccessibilitySVGElement *))(*(_QWORD *)v2 + 832))(v2);
  if (!v50
    || (*(_WORD *)(v50 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v50 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::useTag + 24)
    || (v58 = WebCore::AccessibilitySVGElement::targetForUseElement(v2)) == 0)
  {
    v70 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::AccessibilitySVGElement *))(*(_QWORD *)v2 + 832))(v2);
    v51 = (WebCore::Node *)WebCore::AccessibilitySVGElement::childElementWithMatchingLanguage<WebCore::ElementChildRange<WebCore::SVGTitleElement>>((uint64_t)v2, (uint64_t)&v70);
    if (!v51)
    {
LABEL_98:
      *a2 = 0;
      goto LABEL_99;
    }
    v14 = v51;
    WebCore::Node::textContent(v51, 0, v52, &v72, v53);
    WebCore::AccessibilitySVGElement::description(v2, &v68);
    v54 = v72;
    v56 = WTF::equal(v72, v68, v55);
    v57 = v68;
    v68 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
      {
        WTF::StringImpl::destroy(v57, v22);
        if (!v54)
          goto LABEL_97;
        goto LABEL_95;
      }
      *(_DWORD *)v57 -= 2;
    }
    if (!v54)
      goto LABEL_97;
LABEL_95:
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v22);
    else
      *(_DWORD *)v54 -= 2;
LABEL_97:
    if ((v56 & 1) == 0)
      goto LABEL_24;
    goto LABEL_98;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v58 + 2992))(v58);
LABEL_99:
  result = v69;
  v69 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::AccessibilitySVGElement::childElementWithMatchingLanguage<WebCore::ElementChildRange<WebCore::SVGTitleElement>>(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  void *v31;
  _DWORD *v32;
  _DWORD *v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  BOOL v38;
  WTF::StringImpl **v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)a1 + 1736))(&v46);
  if (!v46 || !*((_DWORD *)v46 + 1))
  {
    WTF::defaultLanguage();
    v4 = v46;
    v46 = v43;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  v44 = 0;
  v45 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  if (v5)
  {
    v6 = &WebCore::SVGNames::titleTag;
    while ((*(_WORD *)(v5 + 28) & 0x20) == 0
         || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::titleTag + 24))
    {
      v5 = *(_QWORD *)(v5 + 56);
      if (!v5)
        goto LABEL_10;
    }
    v9 = 0;
    v8 = 0;
    LODWORD(v15) = 0;
    LODWORD(v7) = 0;
    v16 = MEMORY[0x1E0CBF2F8];
    while (1)
    {
      v17 = *(_QWORD *)(v5 + 104);
      if (!v17)
        break;
      v18 = *(unsigned int *)(v17 + 4);
      if ((v18 & 1) != 0)
      {
        v19 = *(_QWORD *)(v17 + 40);
        v20 = *(unsigned int *)(v17 + 52);
        if (!v20)
          break;
      }
      else
      {
        v19 = v17 + 32;
        v20 = v18 >> 5;
        if (!(v18 >> 5))
          break;
      }
      v21 = v19 + 8;
      while (1)
      {
        v22 = *(_QWORD *)(v21 - 8);
        if (v22 == WebCore::SVGNames::langAttr
          || *(_QWORD *)(v22 + 24) == *(_QWORD *)(WebCore::SVGNames::langAttr + 24)
          && *(_QWORD *)(v22 + 32) == *(_QWORD *)(WebCore::SVGNames::langAttr + 32))
        {
          break;
        }
        v21 += 16;
        if (!--v20)
          goto LABEL_36;
      }
LABEL_37:
      if (HIDWORD(v45) == (_DWORD)v45)
      {
        v42 = v9;
        v23 = v8;
        v24 = v16;
        v25 = v6;
        v26 = HIDWORD(v45) + ((unint64_t)HIDWORD(v45) >> 2);
        if (v26 >= 0x10)
          v27 = v26 + 1;
        else
          v27 = 16;
        if (v27 <= (unint64_t)HIDWORD(v45) + 1)
          v28 = HIDWORD(v45) + 1;
        else
          v28 = v27;
        if (v28 >> 29)
          goto LABEL_92;
        v29 = v44;
        v30 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v28));
        LODWORD(v45) = v28;
        v44 = v30;
        memcpy(v30, v29, 8 * HIDWORD(v45));
        if (v29)
        {
          v6 = v25;
          if (v30 == v29)
          {
            v30 = 0;
            v44 = 0;
            LODWORD(v45) = 0;
          }
          WTF::fastFree(v29, v31);
        }
        else
        {
          v6 = v25;
        }
        v16 = v24;
        v32 = *(_DWORD **)v21;
        v8 = v23;
        if (*(_QWORD *)v21)
          *v32 += 2;
        *((_QWORD *)v30 + HIDWORD(v45)) = v32;
        v9 = v42;
      }
      else
      {
        v33 = *(_DWORD **)v21;
        if (*(_QWORD *)v21)
          *v33 += 2;
        *((_QWORD *)v44 + HIDWORD(v45)) = v33;
      }
      ++HIDWORD(v45);
      if ((_DWORD)v7 == (_DWORD)v15)
      {
        v34 = ((unint64_t)v15 >> 2) + v15;
        if (v34 >= 0x10)
          v35 = v34 + 1;
        else
          v35 = 16;
        if (v35 <= (unint64_t)v7 + 1)
          v15 = v7 + 1;
        else
          v15 = v35;
        if (v15 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19562F078);
        }
        v36 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
        memcpy(v36, v8, 8 * v7);
        if (v8)
        {
          if (v36 == v8)
          {
            LODWORD(v15) = 0;
            v36 = 0;
          }
          WTF::fastFree((WTF *)v8, v37);
        }
        v8 = v36;
      }
      *((_QWORD *)v8 + v7) = v5;
      if (*(_QWORD *)v21)
        v38 = *(_DWORD *)(*(_QWORD *)v21 + 4) == 0;
      else
        v38 = 1;
      v7 = (v7 + 1);
      if (v38 && v9 == 0)
        v9 = v5;
      v5 = *(_QWORD *)(v5 + 56);
      if (!v5)
        goto LABEL_11;
      while ((*(_WORD *)(v5 + 28) & 0x20) == 0 || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(*v6 + 24))
      {
        v5 = *(_QWORD *)(v5 + 56);
        if (!v5)
          goto LABEL_11;
      }
    }
LABEL_36:
    v21 = v16;
    goto LABEL_37;
  }
LABEL_10:
  v7 = 0;
  v8 = 0;
  v9 = 0;
LABEL_11:
  v10 = WTF::indexOfBestMatchingLanguageInList();
  v12 = HIDWORD(v45);
  if (v10 < HIDWORD(v45))
  {
    if (v10 >= v7)
    {
LABEL_92:
      __break(0xC471u);
      JUMPOUT(0x19562F070);
    }
    v9 = *((_QWORD *)v8 + v10);
    goto LABEL_14;
  }
  if (v8)
  {
LABEL_14:
    WTF::fastFree((WTF *)v8, v11);
    v12 = HIDWORD(v45);
  }
  if (v12)
  {
    v39 = (WTF::StringImpl **)v44;
    v40 = 8 * v12;
    do
    {
      v41 = *v39;
      *v39 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v41 -= 2;
      }
      ++v39;
      v40 -= 8;
    }
    while (v40);
  }
  if (v44)
    WTF::fastFree(v44, v11);
  v13 = v46;
  v46 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v9;
}

uint64_t WebCore::AccessibilitySVGElement::computeAccessibilityIsIgnored(WebCore::AccessibilitySVGElement *this)
{
  WebCore::AccessibilityRenderObject *v1;
  uint64_t result;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  char v10;
  unsigned __int8 v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v1 = this;
  result = WebCore::AccessibilityObject::defaultObjectInclusion(this);
  if ((_DWORD)result == 1)
    return result;
  v3 = *((_QWORD *)v1 + 31);
  if (!v3)
    return 1;
  v4 = *(unsigned __int8 **)(v3 + 8);
  if (!v4)
    return 1;
  v5 = v4[46];
  if (v5 == 91)
    return 1;
  if ((v4[52] & 7) == 4)
  {
    v11 = v4[53];
    v12 = v5 == 69 || (v11 & 9) == 9;
    if (v12 || (v11 & 1) == 0 && (v11 & 8) != 0)
      return 1;
  }
  else
  {
    v5 |= 8u;
  }
  if (v5 == 77)
    return 1;
  v6 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)v1 + 832))(v1);
  if (!v6)
    goto LABEL_27;
  v8 = *(_DWORD *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v8 + 2;
  v9 = *(_QWORD *)(v6 + 80);
  if (v9)
  {
    v10 = 0;
    while ((*(_WORD *)(v9 + 28) & 0x20) == 0)
    {
      v9 = *(_QWORD *)(v9 + 56);
      if (!v9)
        goto LABEL_21;
    }
    v17 = *(_QWORD *)(WebCore::SVGNames::titleTag + 24);
    v18 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24);
    if (v18 == v17)
      goto LABEL_61;
    v10 = 1;
LABEL_44:
    if (v18 == *(_QWORD *)(WebCore::SVGNames::descTag + 24))
    {
LABEL_61:
      v10 = 1;
      goto LABEL_21;
    }
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 56);
      if (!v9)
        break;
      if ((*(_WORD *)(v9 + 28) & 0x20) != 0)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24);
        if (v18 != v17)
          goto LABEL_44;
        goto LABEL_21;
      }
    }
  }
  v10 = 0;
LABEL_21:
  if (v8)
  {
    *(_DWORD *)(v6 + 24) = v8;
  }
  else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
    if ((v10 & 1) != 0)
      return 0;
    goto LABEL_27;
  }
  if ((v10 & 1) != 0)
    return 0;
LABEL_27:
  if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)v1 + 1456))(v1) == 86
    || ((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)v1 + 1336))(v1) & 1) != 0)
  {
    return 1;
  }
  if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)v1 + 2976))(v1) != 134)
    return 0;
  v13 = *((_QWORD *)v1 + 31);
  if (!v13)
  {
    v14 = 0;
    goto LABEL_36;
  }
  v14 = *(_QWORD *)(v13 + 8);
  if (*(unsigned __int8 *)(v14 + 46) - 85 <= 1)
  {
LABEL_36:
    if ((*(_BYTE *)(v14 + 45) & 2) != 0)
    {
      result = 96;
      __break(0xC471u);
      return result;
    }
    for (i = *(unsigned int *)(v14 + 64) | ((unint64_t)*(unsigned __int8 *)(v14 + 68) << 32);
          i;
          i = *(unsigned int *)(v16 + 47) | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32))
    {
      v16 = *(_QWORD *)(i + 8);
      if (!v16)
        break;
      if ((*(_BYTE *)(v16 + 45) & 2) != 0)
      {
        result = WebCore::RenderText::containsOnlyCollapsibleWhitespace((WebCore::RenderText *)v16);
        if (!(_DWORD)result)
          return result;
        while (1)
        {
          v19 = *(unsigned int *)(v16 + 47);
          if (!(v19 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32)))
            break;
          v16 = *(_QWORD *)((v19 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32)) + 8);
          if (!v16)
            break;
          if ((*(_BYTE *)(v16 + 45) & 2) != 0)
          {
            v20 = WebCore::RenderText::containsOnlyCollapsibleWhitespace((WebCore::RenderText *)v16);
            result = 0;
            if (!v20)
              return result;
          }
        }
        v13 = *((_QWORD *)v1 + 31);
        break;
      }
    }
    if (v13)
      v14 = *(_QWORD *)(v13 + 8);
    else
      v14 = 0;
  }
  if ((*(_BYTE *)(v14 + 52) & 7) != 4 || (*(_BYTE *)(v14 + 53) & 0x10) == 0)
    return WebCore::AccessibilityRenderObject::computeAccessibilityIsIgnored(v1);
  if (((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)v1 + 800))(v1) & 1) != 0)
    return 0;
  v21 = *(_QWORD *)((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)v1 + 832))(v1) + 16);
  if ((v21 & 0x1000000000000) != 0)
  {
    if (*(_DWORD *)((v21 & 0xFFFFFFFFFFFFLL) + 0x1C))
      return 0;
  }
  while (((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)v1 + 2984))(v1) & 1) == 0
       && ((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)v1 + 2696))(v1) & 1) == 0)
  {
    v1 = (WebCore::AccessibilityRenderObject *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)v1 + 1232))(v1);
    result = 1;
    if (!v1)
      return result;
  }
  return (*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)v1 + 2984))(v1) ^ 1;
}

uint64_t WebCore::AccessibilitySVGElement::inheritsPresentationalRole(WebCore::AccessibilitySVGElement *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (((*(uint64_t (**)(WebCore::AccessibilitySVGElement *))(*(_QWORD *)this + 800))(this) & 1) != 0
    || (*(unsigned int (**)(WebCore::AccessibilitySVGElement *))(*(_QWORD *)this + 1456))(this) - 118 < 0xFFFFFFFE)
  {
    return 0;
  }
  result = (*(uint64_t (**)(WebCore::AccessibilitySVGElement *))(*(_QWORD *)this + 1232))(this);
  if (result)
  {
    v3 = result;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3))
      {
        v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 840))(v3);
        if (v4)
        {
          if ((*(_WORD *)(v4 + 28) & 8) != 0)
          {
            v6 = *(_DWORD *)(v4 + 24);
            *(_DWORD *)(v4 + 24) = v6 + 2;
            v7 = *(_QWORD *)(v4 + 96);
            if (v7 == WebCore::SVGNames::textTag)
            {
              if (v6)
              {
                *(_DWORD *)(v4 + 24) = v6;
              }
              else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
              }
              return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 1456))(v3) == 86;
            }
            if (*(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::SVGNames::textTag + 24))
            {
              v8 = *(_QWORD *)(v7 + 32);
              v9 = *(_QWORD *)(WebCore::SVGNames::textTag + 32);
              if (v6)
              {
                *(_DWORD *)(v4 + 24) = v6;
              }
              else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
              }
              if (v8 == v9)
                return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 1456))(v3) == 86;
            }
            else if (v6)
            {
              *(_DWORD *)(v4 + 24) = v6;
            }
            else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
            }
          }
        }
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1232))(v3);
      v3 = result;
    }
    while (result);
  }
  return result;
}

uint64_t WebCore::AccessibilitySVGElement::determineAriaRoleAttribute(WebCore::AccessibilitySVGElement *this)
{
  uint64_t result;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  result = WebCore::AccessibilityNodeObject::determineAriaRoleAttribute(this);
  if ((_DWORD)result == 86)
  {
    v3 = (*(uint64_t (**)(WebCore::AccessibilitySVGElement *))(*(_QWORD *)this + 832))(this);
    if (!v3)
      return 86;
    v5 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 24) = v5 + 2;
    v6 = *(_QWORD *)(v3 + 80);
    if (v6)
    {
      v7 = 0;
      while ((*(_WORD *)(v6 + 28) & 0x20) == 0)
      {
        v6 = *(_QWORD *)(v6 + 56);
        if (!v6)
          goto LABEL_8;
      }
      v8 = *(_QWORD *)(WebCore::SVGNames::titleTag + 24);
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24);
      if (v9 == v8)
        goto LABEL_22;
      v7 = 1;
LABEL_17:
      if (v9 == *(_QWORD *)(WebCore::SVGNames::descTag + 24))
      {
LABEL_22:
        v7 = 1;
LABEL_8:
        if (v5)
        {
          *(_DWORD *)(v3 + 24) = v5;
          if ((v7 & 1) != 0)
            return 134;
        }
        else if ((*(_WORD *)(v3 + 30) & 0x400) != 0)
        {
          if (v7)
            return 134;
        }
        else
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
          if ((v7 & 1) != 0)
            return 134;
        }
        return 86;
      }
      while (1)
      {
        v6 = *(_QWORD *)(v6 + 56);
        if (!v6)
          break;
        if ((*(_WORD *)(v6 + 28) & 0x20) != 0)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24);
          if (v9 != v8)
            goto LABEL_17;
          goto LABEL_8;
        }
      }
    }
    v7 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t WebCore::AccessibilitySVGElement::determineAccessibilityRole(WebCore::AccessibilitySVGElement *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Element *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v2 = WebCore::AccessibilitySVGElement::determineAriaRoleAttribute(this);
  LOBYTE(v3) = v2;
  *((_BYTE *)this + 234) = v2;
  if (v2 != 134)
    return v3;
  v4 = *((_QWORD *)this + 31);
  if (!v4 || !*(_QWORD *)(v4 + 8))
  {
    LOBYTE(v3) = -122;
    return v3;
  }
  v5 = (*(uint64_t (**)(WebCore::AccessibilitySVGElement *))(*(_QWORD *)this + 832))(this);
  v7 = v5;
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v8 = *((_QWORD *)this + 31);
  if (!v8
    || (v9 = *(unsigned __int8 **)(v8 + 8), (v9[52] & 7) == 4) && (v9[53] & 0x10) != 0
    || ((v10 = v9[46], (v10 - 70) <= 0x17) ? (v11 = ((1 << (v10 - 70)) & 0xC00009) == 0) : (v11 = 1), !v11))
  {
    LOBYTE(v3) = 49;
    goto LABEL_13;
  }
  if (v5
    && (*(_WORD *)(v5 + 28) & 0x20) != 0
    && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::useTag + 24))
  {
    LOBYTE(v3) = 49;
    goto LABEL_14;
  }
  LOBYTE(v3) = 38;
  if (v10 == 67 || v10 == 90)
  {
LABEL_13:
    if (!v7)
      return v3;
    goto LABEL_14;
  }
  if (v5
    && (*(_WORD *)(v5 + 28) & 0x20) != 0
    && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::gTag + 24))
  {
    if (WebCore::hasAccNameAttribute((WebCore *)v5, v6))
    {
      LOBYTE(v3) = 44;
      goto LABEL_14;
    }
    v14 = (*(uint64_t (**)(WebCore::AccessibilitySVGElement *))(*(_QWORD *)this + 832))(this);
    if (!v14)
      goto LABEL_52;
    v15 = *(_DWORD *)(v14 + 24);
    *(_DWORD *)(v14 + 24) = v15 + 2;
    v16 = *(_QWORD *)(v14 + 80);
    if (v16)
    {
      v17 = 0;
      while ((*(_WORD *)(v16 + 28) & 0x20) == 0)
      {
        v16 = *(_QWORD *)(v16 + 56);
        if (!v16)
          goto LABEL_46;
      }
      v18 = *(_QWORD *)(WebCore::SVGNames::titleTag + 24);
      v19 = *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24);
      if (v19 == v18)
        goto LABEL_62;
      v17 = 1;
LABEL_57:
      if (v19 == *(_QWORD *)(WebCore::SVGNames::descTag + 24))
      {
LABEL_62:
        v17 = 1;
        goto LABEL_46;
      }
      while (1)
      {
        v16 = *(_QWORD *)(v16 + 56);
        if (!v16)
          break;
        if ((*(_WORD *)(v16 + 28) & 0x20) != 0)
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24);
          if (v19 != v18)
            goto LABEL_57;
          goto LABEL_46;
        }
      }
    }
    v17 = 0;
LABEL_46:
    if (v15)
    {
      *(_DWORD *)(v14 + 24) = v15;
      goto LABEL_48;
    }
    if ((*(_WORD *)(v14 + 30) & 0x400) != 0)
    {
LABEL_48:
      if ((v17 & 1) != 0)
      {
LABEL_49:
        LOBYTE(v3) = 44;
        goto LABEL_13;
      }
      goto LABEL_52;
    }
    WebCore::Node::removedLastRef((WebCore::Node *)v14, v6);
    if ((v17 & 1) != 0)
      goto LABEL_49;
LABEL_52:
    if ((*(unsigned int (**)(WebCore::AccessibilitySVGElement *))(*(_QWORD *)this + 800))(this))
      LOBYTE(v3) = 44;
    else
      LOBYTE(v3) = 38;
    goto LABEL_13;
  }
  v13 = v10 - 84;
  if (v13 < 3)
  {
    v3 = 0x757374u >> (8 * v13);
    goto LABEL_13;
  }
  if (!v5
    || (*(_WORD *)(v5 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::aTag + 24))
  {
    LOBYTE(v3) = WebCore::AccessibilityRenderObject::determineAccessibilityRole(this);
    goto LABEL_13;
  }
  LOBYTE(v3) = -117;
LABEL_14:
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v6);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return v3;
}

void WebCore::AccessibilitySVGRoot::~AccessibilitySVGRoot(WebCore::AccessibilitySVGRoot *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = (unsigned int *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = off_1E3380218;
  v6 = (unsigned int *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  *(_QWORD *)this = off_1E337F4E0;
  v9 = (WTF *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::fastFree(v9, a2);
    else
      --*(_DWORD *)v9;
  }
  *(_QWORD *)this = off_1E337CD98;
  v10 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v13)
      {
        v16 = v10;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v13));
        v10 = v16;
      }
      v14 = *(WTF **)(v10 + 16);
      if (v14)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        v15 = v10;
        WTF::fastFree(v14, a2);
        v10 = v15;
      }
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = (unsigned int *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = off_1E3380218;
  v6 = (unsigned int *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  *(_QWORD *)this = off_1E337F4E0;
  v9 = (WTF *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::fastFree(v9, a2);
    else
      --*(_DWORD *)v9;
  }
  *(_QWORD *)this = off_1E337CD98;
  v10 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v15 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v15)
      {
        v18 = v10;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v15));
        v10 = v18;
      }
      v16 = *(WTF **)(v10 + 16);
      if (v16)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        v17 = v10;
        WTF::fastFree(v16, a2);
        v10 = v17;
      }
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
  WTF::fastFree(v13, v14);
}

uint64_t WebCore::AccessibilitySVGRoot::parentObject(WebCore::AccessibilitySVGRoot *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 33);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return v2;
  else
    return WebCore::AccessibilityRenderObject::parentObject((WTF **)this);
}

uint64_t WebCore::AccessibilitySVGRoot::determineAccessibilityRole(WebCore::AccessibilitySVGRoot *this)
{
  uint64_t result;

  LODWORD(result) = WebCore::AccessibilitySVGElement::determineAriaRoleAttribute(this);
  *((_BYTE *)this + 234) = result;
  if ((_DWORD)result == 134)
    return 38;
  else
    return result;
}

BOOL WebCore::AccessibilitySVGRoot::hasAccessibleContent(void)const::$_0::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(a1[12] + 24);
  if (v1 == *(_QWORD *)(WebCore::SVGNames::titleTag + 24)
    || v1 == *(_QWORD *)(WebCore::SVGNames::descTag + 24)
    || ((*(uint64_t (**)(_QWORD *))(*a1 + 1216))(a1) & 1) != 0)
  {
    return 1;
  }
  v4 = a1[13];
  if (!v4)
    goto LABEL_16;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if (v5 >> 5)
      goto LABEL_8;
LABEL_16:
    v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_17;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_16;
LABEL_8:
  v7 = v7;
  v8 = (uint64_t *)(v6 + 8);
  while (1)
  {
    v9 = *(v8 - 1);
    if (v9 == WebCore::HTMLNames::roleAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v7)
    {
      v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_17:
  v10 = *v8;
  if (v10 && *(_DWORD *)(v10 + 4))
    return 1;
  if (!v4)
    goto LABEL_31;
  v11 = *(_DWORD *)(v4 + 4);
  if ((v11 & 1) == 0)
  {
    v12 = v4 + 32;
    v13 = v11 >> 5;
    if (v11 >> 5)
      goto LABEL_21;
LABEL_31:
    v15 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_32;
  }
  v12 = *(_QWORD *)(v4 + 40);
  v13 = *(_DWORD *)(v4 + 52);
  if (!v13)
    goto LABEL_31;
LABEL_21:
  v14 = v13;
  v15 = (uint64_t *)(v12 + 8);
  while (1)
  {
    v16 = *(v15 - 1);
    if (v16 == WebCore::HTMLNames::aria_labelAttr
      || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 24)
      && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 32))
    {
      break;
    }
    v15 += 2;
    if (!--v14)
    {
      v15 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_32:
  v17 = *v15;
  return v17 && *(_DWORD *)(v17 + 4);
}

WebCore::AccessibilityScrollView *WebCore::AccessibilityScrollView::AccessibilityScrollView(WebCore::AccessibilityScrollView *this, WebCore::ScrollView *a2)
{
  uint64_t v4;
  uint64_t v6;
  void *v7;
  WTF *v8;
  unsigned int **v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  unsigned int v18;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_19689B170;
  *(_QWORD *)(v4 + 24) = this;
  *(_OWORD *)((char *)this + 41) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_WORD *)((char *)this + 57) = 134;
  *((_BYTE *)this + 59) = 2;
  *((_BYTE *)this + 64) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_WORD *)this + 116) = 0;
  *(_OWORD *)((char *)this + 211) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_QWORD *)this = off_1E3381C38;
  *((_QWORD *)this + 1) = v4;
  if (!a2)
  {
    *((_QWORD *)this + 35) = 0;
    *((_OWORD *)this + 15) = 0uLL;
    *((_OWORD *)this + 16) = 0uLL;
    *((_BYTE *)this + 272) = 0;
    return this;
  }
  v6 = *((_QWORD *)a2 + 2);
  if (v6)
    goto LABEL_8;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = a2;
  v8 = (WTF *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  if (!v8)
    goto LABEL_8;
  if (*(_DWORD *)v8 != 1)
  {
    --*(_DWORD *)v8;
LABEL_8:
    ++*(_DWORD *)v6;
    goto LABEL_9;
  }
  WTF::fastFree(v8, v7);
  v6 = *((_QWORD *)a2 + 2);
  if (v6)
    goto LABEL_8;
LABEL_9:
  *((_QWORD *)this + 31) = 0;
  v9 = (unsigned int **)((char *)this + 248);
  *((_QWORD *)this + 30) = v6;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_BYTE *)this + 272) = 0;
  if ((*(unsigned int (**)(WebCore::ScrollView *))(*(_QWORD *)a2 + 72))(a2))
  {
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 41) + 120);
    if (v11)
    {
      v12 = *(unsigned int **)(v11 + 8);
      if (v12)
      {
        v12 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v12);
        if (v12)
        {
          do
            v18 = __ldaxr(v12);
          while (__stlxr(v18 + 1, v12));
        }
      }
    }
    else
    {
      v12 = 0;
    }
    v13 = *v9;
    *v9 = v12;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        v16 = v13[7];
        if ((_DWORD)v16)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v13 + 2), (WTF::StringImpl *)(*((_QWORD *)v13 + 2) + 32 * v16));
        v17 = (WTF *)*((_QWORD *)v13 + 2);
        if (v17)
        {
          *((_QWORD *)v13 + 2) = 0;
          v13[6] = 0;
          WTF::fastFree(v17, v10);
        }
        WTF::fastFree((WTF *)v13, v10);
      }
    }
  }
  return this;
}

void WebCore::AccessibilityScrollView::~AccessibilityScrollView(WebCore::AccessibilityScrollView *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;

  v3 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v31 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v31 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (!v11)
    goto LABEL_35;
  v12 = *(_QWORD *)(v11 + 8);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEA534C](v12);
LABEL_23:
  v14 = *(_QWORD *)(v12 + 8);
  v15 = v14 - 1;
  *(_QWORD *)(v12 + 8) = v14 - 1;
  if (v14 == 1)
  {
    v32 = *(_QWORD *)(v12 + 16);
    v16 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v12 + 24) = 0;
    v17 = v32 != 0;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  v18 = __ldxr((unsigned __int8 *)v12);
  if (v18 != 1)
  {
    __clrex();
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v15)
      goto LABEL_35;
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
    goto LABEL_30;
  if (v15)
    goto LABEL_35;
LABEL_31:
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (!v17)
    WTF::fastFree((WTF *)v12, a2);
LABEL_35:
  v19 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (!v19)
    goto LABEL_52;
  v20 = *(_QWORD *)(v19 + 8);
  if (__ldaxr((unsigned __int8 *)v20))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v20))
  {
    goto LABEL_40;
  }
  MEMORY[0x19AEA534C](v20);
LABEL_40:
  v22 = *(_QWORD *)(v20 + 8);
  v23 = v22 - 1;
  *(_QWORD *)(v20 + 8) = v22 - 1;
  if (v22 == 1)
  {
    v33 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 24);
    *(_QWORD *)(v20 + 24) = 0;
    v25 = v33 != 0;
  }
  else
  {
    v24 = 0;
    v25 = 1;
  }
  v26 = __ldxr((unsigned __int8 *)v20);
  if (v26 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v20))
    {
      if (v23)
        goto LABEL_52;
      goto LABEL_48;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v20);
  if (v23)
    goto LABEL_52;
LABEL_48:
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (!v25)
    WTF::fastFree((WTF *)v20, a2);
LABEL_52:
  v27 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v27)
  {
    do
    {
      v28 = __ldaxr((unsigned int *)v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, (unsigned int *)v27));
    if (!v29)
    {
      atomic_store(1u, (unsigned int *)v27);
      v34 = *(unsigned int *)(v27 + 28);
      if ((_DWORD)v34)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v27 + 16), (WTF::StringImpl *)(*(_QWORD *)(v27 + 16) + 32 * v34));
      v35 = *(WTF **)(v27 + 16);
      if (v35)
      {
        *(_QWORD *)(v27 + 16) = 0;
        *(_DWORD *)(v27 + 24) = 0;
        WTF::fastFree(v35, a2);
      }
      WTF::fastFree((WTF *)v27, a2);
    }
  }
  v30 = (WTF *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
      WTF::fastFree(v30, a2);
    else
      --*(_DWORD *)v30;
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::AccessibilityScrollView::~AccessibilityScrollView(this, a2);
  WTF::fastFree(v2, v3);
}

WTF *WebCore::AccessibilityScrollView::detachRemoteParts(_QWORD *a1, unsigned int a2, __n128 a3)
{
  uint64_t v5;
  WTF *result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;

  if (a2 == 1 && (*(unsigned int (**)(_QWORD *))(*a1 + 1456))(a1) == 73)
  {
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 1488))(a1);
    if (v5)
      a3.n128_f64[0] = WebCore::AXObjectCache::postNotification((WTF **)v5, 0, *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8), 67, 0);
  }
  result = (WTF *)(*(uint64_t (**)(_QWORD *, __n128))(*a1 + 3104))(a1, a3);
  v8 = a1[30];
  if (!v8)
  {
    a1[30] = 0;
    goto LABEL_30;
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (v9)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9))
    {
      if (a2 <= 1)
      {
        v10 = a1[35];
        if (v10)
        {
          a1[35] = 0;
          v11 = *(_QWORD *)(v10 + 8);
          if (__ldaxr((unsigned __int8 *)v11))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v11))
          {
            goto LABEL_15;
          }
          MEMORY[0x19AEA534C](v11);
LABEL_15:
          v13 = *(_QWORD *)(v11 + 8);
          v14 = v13 - 1;
          *(_QWORD *)(v11 + 8) = v13 - 1;
          if (v13 == 1)
          {
            v23 = *(_QWORD *)(v11 + 16);
            v15 = *(_QWORD *)(v11 + 24);
            *(_QWORD *)(v11 + 24) = 0;
            v16 = v23 != 0;
          }
          else
          {
            v15 = 0;
            v16 = 1;
          }
          v17 = __ldxr((unsigned __int8 *)v11);
          if (v17 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v11))
            {
LABEL_22:
              if (!v14)
              {
                if (v15)
                  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
                if (!v16)
                  WTF::fastFree((WTF *)v11, v7);
              }
              goto LABEL_27;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v11);
          goto LABEL_22;
        }
      }
    }
  }
LABEL_27:
  result = (WTF *)a1[30];
  a1[30] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v7);
    else
      --*(_DWORD *)result;
  }
LABEL_30:
  v18 = a1[31];
  a1[31] = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr((unsigned int *)v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v18));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v18);
      v21 = *(unsigned int *)(v18 + 28);
      if ((_DWORD)v21)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v18 + 16), (WTF::StringImpl *)(*(_QWORD *)(v18 + 16) + 32 * v21));
      v22 = *(WTF **)(v18 + 16);
      if (v22)
      {
        *(_QWORD *)(v18 + 16) = 0;
        *(_DWORD *)(v18 + 24) = 0;
        WTF::fastFree(v22, v7);
      }
      return (WTF *)WTF::fastFree((WTF *)v18, v7);
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityScrollView::documentFrameView(WebCore::AccessibilityScrollView *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 30);
  if (!v2
    || (v3 = *(_QWORD *)(v2 + 8)) == 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3) & 1) == 0)
  {
    v4 = *((_QWORD *)this + 31);
    if (v4
      && (v5 = *(_QWORD *)(v4 + 8)) != 0
      && (v6 = *(_QWORD *)(v5 + 112)) != 0
      && (v7 = *(_QWORD *)(v6 + 8)) != 0
      && !*(_BYTE *)(v7 + 144)
      && (v9 = *(_QWORD *)(v7 + 296)) != 0
      && (v10 = *(_QWORD *)(v9 + 528)) != 0
      && (v11 = *(_QWORD *)(v10 + 8)) != 0)
    {
      return *(_QWORD *)(v11 + 288);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t WebCore::AccessibilityScrollView::scrollBar(uint64_t a1, int a2)
{
  uint64_t v4;

  WebCore::AccessibilityScrollView::updateScrollbars(a1);
  switch(a2)
  {
    case 2:
      goto LABEL_4;
    case 1:
      v4 = a1 + 256;
      return *(_QWORD *)v4;
    case 0:
LABEL_4:
      v4 = a1 + 264;
      return *(_QWORD *)v4;
  }
  return 0;
}

uint64_t WebCore::AccessibilityScrollView::updateScrollbars(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::Scrollbar *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  WebCore::Scrollbar *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v42;

  v1 = this;
  v2 = *(_QWORD *)(this + 240);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 8)) == 0)
  {
    v10 = *(_QWORD *)(this + 248);
    if (!v10)
      return this;
    v11 = *(_QWORD *)(v10 + 8);
    if (!v11)
      return this;
    v12 = *(_QWORD *)(v11 + 112);
    if (!v12)
      return this;
    v13 = *(_QWORD *)(v12 + 8);
    if (!v13)
      return this;
    if (*(_BYTE *)(v13 + 144))
      return this;
    v14 = *(_QWORD *)(v13 + 296);
    if (!v14)
      return this;
    v15 = *(_QWORD *)(v14 + 528);
    if (!v15)
      return this;
    v16 = *(_QWORD *)(v15 + 8);
    if (!v16)
      return this;
    v3 = *(_QWORD *)(v16 + 288);
    if (!v3)
      return this;
  }
  v4 = *(WebCore::Scrollbar **)(v3 + 152);
  v5 = *(_QWORD *)(this + 256);
  if (v4)
  {
    if (v5)
      goto LABEL_45;
    this = WebCore::AccessibilityScrollView::addChildScrollbar((WebCore::AccessibilityScrollView *)this, v4);
    v7 = this;
    if (!this)
    {
LABEL_28:
      v17 = *(_QWORD *)(v1 + 256);
      *(_QWORD *)(v1 + 256) = v7;
      if (!v17)
        goto LABEL_45;
      goto LABEL_29;
    }
    v8 = *(_QWORD *)(this + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_23;
    }
    this = MEMORY[0x19AEA534C](v8);
LABEL_23:
    ++*(_QWORD *)(v8 + 8);
    v18 = __ldxr((unsigned __int8 *)v8);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
        goto LABEL_28;
    }
    else
    {
      __clrex();
    }
    this = WTF::Lock::unlockSlow((WTF::Lock *)v8);
    goto LABEL_28;
  }
  if (!v5)
    goto LABEL_45;
  this = (uint64_t)WebCore::AccessibilityScrollView::removeChildScrollbar((unsigned int *)this, *(WebCore::AccessibilityObject **)(this + 256));
  v17 = *(_QWORD *)(v1 + 256);
  *(_QWORD *)(v1 + 256) = 0;
  if (!v17)
    goto LABEL_45;
LABEL_29:
  v19 = *(_QWORD *)(v17 + 8);
  if (__ldaxr((unsigned __int8 *)v19))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v19))
  {
    goto LABEL_33;
  }
  this = MEMORY[0x19AEA534C](v19);
LABEL_33:
  v21 = *(_QWORD *)(v19 + 8);
  v22 = v21 - 1;
  *(_QWORD *)(v19 + 8) = v21 - 1;
  if (v21 == 1)
  {
    v42 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v19 + 24) = 0;
    v24 = v42 != 0;
  }
  else
  {
    v23 = 0;
    v24 = 1;
  }
  v25 = __ldxr((unsigned __int8 *)v19);
  if (v25 != 1)
  {
    __clrex();
LABEL_40:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v19);
    if (v22)
      goto LABEL_45;
    goto LABEL_41;
  }
  if (__stlxr(0, (unsigned __int8 *)v19))
    goto LABEL_40;
  if (v22)
    goto LABEL_45;
LABEL_41:
  if (v23)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (!v24)
    this = WTF::fastFree((WTF *)v19, v6);
LABEL_45:
  v26 = *(WebCore::Scrollbar **)(v3 + 160);
  v27 = *(_QWORD *)(v1 + 264);
  if (v26)
  {
    if (v27)
      return this;
    this = WebCore::AccessibilityScrollView::addChildScrollbar((WebCore::AccessibilityScrollView *)v1, v26);
    v29 = this;
    if (!this)
    {
LABEL_60:
      v32 = *(_QWORD *)(v1 + 264);
      *(_QWORD *)(v1 + 264) = v29;
      if (!v32)
        return this;
      goto LABEL_61;
    }
    v30 = *(_QWORD *)(this + 8);
    if (__ldaxr((unsigned __int8 *)v30))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v30))
    {
      goto LABEL_55;
    }
    this = MEMORY[0x19AEA534C](v30);
LABEL_55:
    ++*(_QWORD *)(v30 + 8);
    v33 = __ldxr((unsigned __int8 *)v30);
    if (v33 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v30))
        goto LABEL_60;
    }
    else
    {
      __clrex();
    }
    this = WTF::Lock::unlockSlow((WTF::Lock *)v30);
    goto LABEL_60;
  }
  if (!v27)
    return this;
  this = (uint64_t)WebCore::AccessibilityScrollView::removeChildScrollbar((unsigned int *)v1, *(WebCore::AccessibilityObject **)(v1 + 264));
  v32 = *(_QWORD *)(v1 + 264);
  *(_QWORD *)(v1 + 264) = 0;
  if (!v32)
    return this;
LABEL_61:
  v34 = *(_QWORD *)(v32 + 8);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_65;
  }
  this = MEMORY[0x19AEA534C](v34);
LABEL_65:
  v36 = *(_QWORD *)(v34 + 8);
  v37 = v36 - 1;
  *(_QWORD *)(v34 + 8) = v36 - 1;
  if (v36 == 1)
  {
    v41 = *(_QWORD *)(v34 + 16);
    v38 = *(_QWORD *)(v34 + 24);
    *(_QWORD *)(v34 + 24) = 0;
    v39 = v41 != 0;
  }
  else
  {
    v38 = 0;
    v39 = 1;
  }
  v40 = __ldxr((unsigned __int8 *)v34);
  if (v40 != 1)
  {
    __clrex();
LABEL_72:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v34);
    if (v37)
      return this;
    goto LABEL_73;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
    goto LABEL_72;
  if (v37)
    return this;
LABEL_73:
  if (v38)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  if (!v39)
    return WTF::fastFree((WTF *)v34, v28);
  return this;
}

BOOL WebCore::AccessibilityScrollView::isAttachment(WebCore::AccessibilityScrollView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 30);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return *(_QWORD *)(v2 + 40) != 0;
  }
  v4 = *((_QWORD *)this + 31);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  return v5
      && (v6 = *(_QWORD *)(v5 + 112)) != 0
      && (v7 = *(_QWORD *)(v6 + 8)) != 0
      && !*(_BYTE *)(v7 + 144)
      && (v8 = *(_QWORD *)(v7 + 296)) != 0
      && (v9 = *(_QWORD *)(v8 + 528)) != 0
      && (v10 = *(_QWORD *)(v9 + 8)) != 0
      && (v2 = *(_QWORD *)(v10 + 288)) != 0
      && *(_QWORD *)(v2 + 40) != 0;
}

uint64_t WebCore::AccessibilityScrollView::platformWidget(WebCore::AccessibilityScrollView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 30);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return *(_QWORD *)(v2 + 40);
  }
  v4 = *((_QWORD *)this + 31);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (v5
    && (v6 = *(_QWORD *)(v5 + 112)) != 0
    && (v7 = *(_QWORD *)(v6 + 8)) != 0
    && !*(_BYTE *)(v7 + 144)
    && (v8 = *(_QWORD *)(v7 + 296)) != 0
    && (v9 = *(_QWORD *)(v8 + 528)) != 0
    && (v10 = *(_QWORD *)(v9 + 8)) != 0
    && (v2 = *(_QWORD *)(v10 + 288)) != 0)
  {
    return *(_QWORD *)(v2 + 40);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::AccessibilityScrollView::canSetFocusAttribute(WebCore::AccessibilityScrollView *this)
{
  uint64_t result;

  result = WebCore::AccessibilityScrollView::webAreaObject(this);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 800))(result);
  return result;
}

uint64_t WebCore::AccessibilityScrollView::webAreaObject(WebCore::AccessibilityScrollView *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  WebCore::Document *v23;
  WebCore::AXObjectCache **v24;
  WebCore::AXObjectCache *v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::AXObjectCache *v30;
  uint64_t v31;

  v2 = *((_QWORD *)this + 30);
  if (!v2)
    goto LABEL_11;
  v3 = *(_QWORD **)(v2 + 8);
  if (!v3)
    goto LABEL_11;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 72))(v3))
  {
    v4 = v3[41];
LABEL_13:
    v9 = (uint64_t *)(v4 + 296);
    goto LABEL_14;
  }
  v5 = *((_QWORD *)this + 30);
  if (!v5
    || (v6 = *(_QWORD **)(v5 + 8)) == 0
    || !(*(unsigned int (**)(_QWORD *))(*v6 + 80))(v6)
    || (v7 = *(_QWORD *)(v6[41] + 120)) == 0
    || (v8 = *(_QWORD *)(v7 + 8)) == 0)
  {
LABEL_11:
    v10 = (*(uint64_t (**)(WebCore::AccessibilityScrollView *))(*(_QWORD *)this + 1720))(this);
    if (!v10)
      return 0;
    v4 = *(_QWORD *)(v10 + 328);
    goto LABEL_13;
  }
  v9 = (uint64_t *)(*(_QWORD *)(v8 + 40) + 8);
LABEL_14:
  v11 = *v9;
  if (!*v9)
    return 0;
  if (!*(_QWORD *)(v11 + 1944))
    return 0;
  if (*(_BYTE *)(v11 + 3405))
    return 0;
  if (*((_QWORD *)this + 35))
    return 0;
  v12 = (*(uint64_t (**)(WebCore::AccessibilityScrollView *))(*(_QWORD *)this + 1712))(this);
  if (!v12)
    return 0;
  v13 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v13 & 1) == 0)
    return 0;
  v15 = v12;
  if (*(_BYTE *)(v12 + 3362) || *(_BYTE *)(v12 + 3405))
  {
    for (i = *(_QWORD *)(v12 + 528); i; i = *(_QWORD *)(v15 + 528))
    {
      v27 = *(_QWORD *)(i + 8);
      if (!v27)
        break;
      v28 = *(_QWORD *)(v27 + 120);
      if (!v28)
        break;
      v29 = *(_QWORD *)(v28 + 8);
      if (!v29)
        break;
      v15 = *(_QWORD *)(*(_QWORD *)(v29 + 40) + 8);
    }
  }
  else
  {
    v16 = *(_QWORD *)(v12 + 528);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v17 + 128) + 8);
        if (v18 && *(_BYTE *)(v18 + 144) == 0)
        {
          v20 = *(_QWORD *)(v18 + 296);
          if (v20)
            v15 = v20;
        }
      }
    }
  }
  *(_DWORD *)(v15 + 24) += 2;
  v31 = v15;
  if (*(_QWORD *)(v15 + 1944))
    v21 = *(_BYTE *)(v15 + 3405) == 0;
  else
    v21 = 0;
  if (!v21)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v31);
    return 0;
  }
  v22 = *(_QWORD *)(v15 + 1488);
  if (v22)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v31);
  }
  else
  {
    v23 = (WebCore::Document *)v15;
    v24 = (WebCore::AXObjectCache **)(v15 + 1488);
    v25 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
    v30 = WebCore::AXObjectCache::AXObjectCache(v25, v23);
    std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v24, &v30);
    std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v30);
    WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
    v22 = *((_QWORD *)v23 + 186);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v31);
    if (!v22)
      return 0;
  }
  return WebCore::AXObjectCache::getOrCreate(v22, v11, 0);
}

uint64_t WebCore::AccessibilityScrollView::isFocused(WebCore::AccessibilityScrollView *this)
{
  uint64_t result;

  result = WebCore::AccessibilityScrollView::webAreaObject(this);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 552))(result);
  return result;
}

uint64_t WebCore::AccessibilityScrollView::setFocused(WebCore::AccessibilityScrollView *this, uint64_t a2)
{
  uint64_t result;

  WebCore::AccessibilityObject::setFocused(this, a2);
  result = WebCore::AccessibilityScrollView::webAreaObject(this);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 1760))(result, a2);
  return result;
}

uint64_t WebCore::AccessibilityScrollView::updateChildrenIfNecessary(WebCore::AccessibilityScrollView *this)
{
  uint64_t v2;

  WebCore::AccessibilityScrollView::clearChildren(this);
  *((_BYTE *)this + 56) = 1;
  WebCore::AccessibilityScrollView::addRemoteFrameChild((uint64_t *)this);
  v2 = WebCore::AccessibilityScrollView::webAreaObject(this);
  (*(void (**)(WebCore::AccessibilityScrollView *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 3072))(this, v2, *((unsigned int *)this + 13), 1);
  return WebCore::AccessibilityScrollView::updateScrollbars((uint64_t)this);
}

uint64_t WebCore::AccessibilityScrollView::clearChildren(WebCore::AccessibilityScrollView *this)
{
  WTF *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v2 = (WebCore::AccessibilityScrollView *)((char *)this + 40);
  v3 = (uint64_t *)*((_QWORD *)this + 5);
  v4 = *((unsigned int *)this + 13);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *v3++;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1912))(v6);
      v5 -= 8;
    }
    while (v5);
  }
  result = (uint64_t)WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v2, 0);
  *((_BYTE *)this + 56) = 0;
  v9 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
      goto LABEL_9;
    }
    result = MEMORY[0x19AEA534C](v10);
LABEL_9:
    v12 = *(_QWORD *)(v10 + 8);
    v13 = v12 - 1;
    *(_QWORD *)(v10 + 8) = v12 - 1;
    if (v12 == 1)
    {
      v25 = *(_QWORD *)(v10 + 16);
      v14 = *(_QWORD *)(v10 + 24);
      *(_QWORD *)(v10 + 24) = 0;
      v15 = v25 != 0;
    }
    else
    {
      v14 = 0;
      v15 = 1;
    }
    v16 = __ldxr((unsigned __int8 *)v10);
    if (v16 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
      {
        if (v13)
          goto LABEL_21;
LABEL_17:
        if (v14)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        if (!v15)
          result = WTF::fastFree((WTF *)v10, v8);
        goto LABEL_21;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      goto LABEL_21;
    goto LABEL_17;
  }
LABEL_21:
  v17 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (!v17)
    goto LABEL_38;
  v18 = *(_QWORD *)(v17 + 8);
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v18))
  {
    goto LABEL_26;
  }
  result = MEMORY[0x19AEA534C](v18);
LABEL_26:
  v20 = *(_QWORD *)(v18 + 8);
  v21 = v20 - 1;
  *(_QWORD *)(v18 + 8) = v20 - 1;
  if (v20 == 1)
  {
    v26 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 24) = 0;
    v23 = v26 != 0;
  }
  else
  {
    v22 = 0;
    v23 = 1;
  }
  v24 = __ldxr((unsigned __int8 *)v18);
  if (v24 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v18))
    {
      if (v21)
        goto LABEL_38;
      goto LABEL_34;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v18);
  if (v21)
    goto LABEL_38;
LABEL_34:
  if (v22)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (!v23)
    result = WTF::fastFree((WTF *)v18, v8);
LABEL_38:
  *((_BYTE *)this + 272) = 0;
  return result;
}

uint64_t WebCore::AccessibilityScrollView::addChildren(WebCore::AccessibilityScrollView *this)
{
  uint64_t v2;

  *((_BYTE *)this + 56) = 1;
  WebCore::AccessibilityScrollView::addRemoteFrameChild((uint64_t *)this);
  v2 = WebCore::AccessibilityScrollView::webAreaObject(this);
  (*(void (**)(WebCore::AccessibilityScrollView *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 3072))(this, v2, *((unsigned int *)this + 13), 1);
  return WebCore::AccessibilityScrollView::updateScrollbars((uint64_t)this);
}

uint64_t WebCore::AccessibilityScrollView::addChildScrollbar(WebCore::AccessibilityScrollView *this, WebCore::Scrollbar *a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  void *v16;
  WebCore::AXObjectCache *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  WebCore::AXObjectCache *v23;
  void *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::AXObjectCache *v39;
  uint64_t v40;

  v4 = (*(uint64_t (**)(WebCore::AccessibilityScrollView *))(*(_QWORD *)this + 1712))(this);
  if (!v4)
    return 0;
  v5 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v5 & 1) == 0)
    return 0;
  v8 = v4;
  if (*(_BYTE *)(v4 + 3362) || *(_BYTE *)(v4 + 3405))
  {
    while (1)
    {
      v35 = *(_QWORD *)(v8 + 528);
      if (!v35)
        break;
      v36 = *(_QWORD *)(v35 + 8);
      if (!v36)
        break;
      v37 = *(_QWORD *)(v36 + 120);
      if (!v37)
        break;
      v38 = *(_QWORD *)(v37 + 8);
      if (!v38)
        break;
      v8 = *(_QWORD *)(*(_QWORD *)(v38 + 40) + 8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(v4 + 528);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v10 + 128) + 8);
        if (v11 && *(_BYTE *)(v11 + 144) == 0)
        {
          v13 = *(_QWORD *)(v11 + 296);
          if (v13)
            v8 = v13;
        }
      }
    }
  }
  *(_DWORD *)(v8 + 24) += 2;
  v40 = v8;
  if (*(_QWORD *)(v8 + 1944))
    v14 = *(_BYTE *)(v8 + 3405) == 0;
  else
    v14 = 0;
  if (!v14)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v40);
    return 0;
  }
  v15 = *(uint64_t **)(v8 + 1488);
  if (v15)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v40);
  }
  else
  {
    v17 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
    v39 = WebCore::AXObjectCache::AXObjectCache(v17, (WebCore::Document *)v8);
    std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100]((WebCore::AXObjectCache **)(v8 + 1488), &v39);
    std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v39);
    WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
    v15 = *(uint64_t **)(v8 + 1488);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v40);
    if (!v15)
      return 0;
  }
  v18 = *v15;
  if (!*v15)
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v18 = 1;
    *(_QWORD *)(v18 + 8) = v15;
    v19 = (unsigned int *)*v15;
    *v15 = v18;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v16);
      }
      v18 = *v15;
      if (!*v15)
        return 0;
    }
  }
  do
    v22 = __ldaxr((unsigned int *)v18);
  while (__stlxr(v22 + 1, (unsigned int *)v18));
  v23 = *(WebCore::AXObjectCache **)(v18 + 8);
  if (v23)
  {
    v6 = WebCore::AXObjectCache::getOrCreate(v23, a2);
    v25 = *((_QWORD *)this + 4);
    if (v25)
      goto LABEL_56;
    v25 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v25 = 1;
    *(_QWORD *)(v25 + 8) = this;
    v26 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v25;
    if (!v26)
      goto LABEL_56;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, v24);
    }
    v25 = *((_QWORD *)this + 4);
    if (v25)
    {
LABEL_56:
      do
        v29 = __ldaxr((unsigned int *)v25);
      while (__stlxr(v29 + 1, (unsigned int *)v25));
    }
    v30 = *(unsigned int **)(v6 + 240);
    *(_QWORD *)(v6 + 240) = v25;
    if (v30)
    {
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        atomic_store(1u, v30);
        WTF::fastFree((WTF *)v30, v24);
      }
    }
    (*(void (**)(WebCore::AccessibilityScrollView *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 3072))(this, v6, *((unsigned int *)this + 13), 1);
  }
  else
  {
    v6 = 0;
  }
  do
  {
    v33 = __ldaxr((unsigned int *)v18);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, (unsigned int *)v18));
  if (!v34)
  {
    atomic_store(1u, (unsigned int *)v18);
    WTF::fastFree((WTF *)v18, v16);
  }
  return v6;
}

unsigned int *WebCore::AccessibilityScrollView::removeChildScrollbar(unsigned int *this, WebCore::AccessibilityObject *a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;

  v2 = this[13];
  if ((_DWORD)v2)
  {
    v3 = this;
    v4 = 0;
    for (i = 8; *(WebCore::AccessibilityObject **)(*((_QWORD *)this + 5) + i - 8) != a2; i += 8)
    {
      if (-(uint64_t)v2 == --v4)
        return this;
    }
    if (-v4 >= v2)
    {
      __break(0xC471u);
      return this;
    }
    (*(void (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 1912))(a2);
    v7 = v3[5];
    v8 = *(_QWORD *)(v7 + i - 8);
    *(_QWORD *)(v7 + i - 8) = 0;
    if (!v8)
      goto LABEL_24;
    v9 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_12:
    v11 = *(_QWORD *)(v9 + 8);
    v12 = v11 - 1;
    *(_QWORD *)(v9 + 8) = v11 - 1;
    if (v11 == 1)
    {
      v16 = *(_QWORD *)(v9 + 16);
      v13 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 24) = 0;
      v14 = v16 != 0;
    }
    else
    {
      v13 = 0;
      v14 = 1;
    }
    v15 = __ldxr((unsigned __int8 *)v9);
    if (v15 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
        if (!v12)
          goto LABEL_20;
        goto LABEL_24;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (!v12)
    {
LABEL_20:
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      if (!v14)
        WTF::fastFree((WTF *)v9, v6);
    }
LABEL_24:
    this = (unsigned int *)memmove((void *)(v7 + i - 8), (const void *)(v7 + i), v3[5] + 8 * *((unsigned int *)v3 + 13) - v7 - i);
    --*((_DWORD *)v3 + 13);
  }
  return this;
}

uint64_t WebCore::AccessibilityScrollView::computeAccessibilityIsIgnored(WebCore::AccessibilityScrollView *this)
{
  uint64_t v1;

  v1 = WebCore::AccessibilityScrollView::webAreaObject(this);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 856))(v1);
  else
    return 1;
}

uint64_t *WebCore::AccessibilityScrollView::addRemoteFrameChild(uint64_t *this)
{
  uint64_t v1;
  uint64_t *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  BOOL v10;
  uint64_t **v11;
  void *v12;
  WebCore::AXObjectCache *v13;
  uint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WebCore::AXObjectCache *v54;
  uint64_t *v55;

  v1 = this[30];
  if (v1)
  {
    v2 = this;
    this = *(uint64_t **)(v1 + 8);
    if (this)
    {
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 80))(this);
      if ((_DWORD)this)
      {
        this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v2 + 1712))(v2);
        if (this)
        {
          v3 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
          if ((v3 & 1) != 0)
          {
            v4 = this;
            if (*((_BYTE *)this + 3362) || *((_BYTE *)this + 3405))
            {
              while (1)
              {
                v49 = v4[66];
                if (!v49)
                  break;
                v50 = *(_QWORD *)(v49 + 8);
                if (!v50)
                  break;
                v51 = *(_QWORD *)(v50 + 120);
                if (!v51)
                  break;
                v52 = *(_QWORD *)(v51 + 8);
                if (!v52)
                  break;
                v4 = *(uint64_t **)(*(_QWORD *)(v52 + 40) + 8);
              }
            }
            else
            {
              v5 = this[66];
              if (v5)
              {
                v6 = *(_QWORD *)(v5 + 8);
                if (v6)
                {
                  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8);
                  if (v7 && *(_BYTE *)(v7 + 144) == 0)
                  {
                    v9 = *(uint64_t **)(v7 + 296);
                    if (v9)
                      v4 = v9;
                  }
                }
              }
            }
            *((_DWORD *)v4 + 6) += 2;
            v55 = v4;
            if (v4[243])
              v10 = *((_BYTE *)v4 + 3405) == 0;
            else
              v10 = 0;
            if (!v10)
              return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v55);
            v11 = (uint64_t **)v4[186];
            if (v11)
            {
              WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v55);
            }
            else
            {
              v13 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
              v54 = WebCore::AXObjectCache::AXObjectCache(v13, (WebCore::Document *)v4);
              std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100]((WebCore::AXObjectCache **)v4 + 186, &v54);
              std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v54);
              WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
              v11 = (uint64_t **)v4[186];
              this = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v55);
              if (!v11)
                return this;
            }
            v14 = *v11;
            if (*v11)
              goto LABEL_99;
            v14 = (uint64_t *)WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v14 = 1;
            v14[1] = (uint64_t)v11;
            this = *v11;
            *v11 = v14;
            if (!this)
              goto LABEL_99;
            do
            {
              v15 = __ldaxr((unsigned int *)this);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, (unsigned int *)this));
            if (!v16)
            {
              atomic_store(1u, (unsigned int *)this);
              this = (uint64_t *)WTF::fastFree((WTF *)this, v12);
            }
            v14 = *v11;
            if (*v11)
            {
LABEL_99:
              do
                v17 = __ldaxr((unsigned int *)v14);
              while (__stlxr(v17 + 1, (unsigned int *)v14));
              this = (uint64_t *)v14[1];
              if (!this)
                goto LABEL_85;
              v18 = v2[35];
              if (v18)
              {
                v19 = v2[4];
                if (v19)
                  goto LABEL_100;
                v19 = WTF::fastCompactMalloc((WTF *)0x10);
                *(_DWORD *)v19 = 1;
                *(_QWORD *)(v19 + 8) = v2;
                v20 = (unsigned int *)v2[4];
                v2[4] = v19;
                if (!v20)
                  goto LABEL_100;
                do
                {
                  v21 = __ldaxr(v20);
                  v22 = v21 - 1;
                }
                while (__stlxr(v22, v20));
                if (!v22)
                {
                  atomic_store(1u, v20);
                  WTF::fastFree((WTF *)v20, v12);
                }
                v19 = v2[4];
                if (v19)
                {
LABEL_100:
                  do
                    v23 = __ldaxr((unsigned int *)v19);
                  while (__stlxr(v23 + 1, (unsigned int *)v19));
                }
                v24 = *(unsigned int **)(v18 + 240);
                *(_QWORD *)(v18 + 240) = v19;
                if (!v24)
                  goto LABEL_84;
                do
                {
                  v25 = __ldaxr(v24);
                  v26 = --v25 == 0;
                }
                while (__stlxr(v25, v24));
LABEL_82:
                if (v26)
                {
                  atomic_store(1u, v24);
                  WTF::fastFree((WTF *)v24, v12);
                }
LABEL_84:
                this = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, uint64_t))(*v2 + 3072))(v2, v2[35], *((unsigned int *)v2 + 13), 1);
                do
                {
LABEL_85:
                  v47 = __ldaxr((unsigned int *)v14);
                  v48 = v47 - 1;
                }
                while (__stlxr(v48, (unsigned int *)v14));
                if (!v48)
                {
                  atomic_store(1u, (unsigned int *)v14);
                  return (uint64_t *)WTF::fastFree((WTF *)v14, v12);
                }
                return this;
              }
              v27 = WebCore::AXObjectCache::create(this, 90);
              v28 = v27;
              if (!v27)
              {
LABEL_56:
                v32 = v2[35];
                v2[35] = v28;
                if (!v32)
                {
LABEL_73:
                  v40 = v2[35];
                  v41 = v2[4];
                  if (v41)
                    goto LABEL_101;
                  v41 = WTF::fastCompactMalloc((WTF *)0x10);
                  *(_DWORD *)v41 = 1;
                  *(_QWORD *)(v41 + 8) = v2;
                  v42 = (unsigned int *)v2[4];
                  v2[4] = v41;
                  if (!v42)
                    goto LABEL_101;
                  do
                  {
                    v43 = __ldaxr(v42);
                    v44 = v43 - 1;
                  }
                  while (__stlxr(v44, v42));
                  if (!v44)
                  {
                    atomic_store(1u, v42);
                    WTF::fastFree((WTF *)v42, v12);
                  }
                  v41 = v2[4];
                  if (v41)
                  {
LABEL_101:
                    do
                      v45 = __ldaxr((unsigned int *)v41);
                    while (__stlxr(v45 + 1, (unsigned int *)v41));
                  }
                  v24 = *(unsigned int **)(v40 + 240);
                  *(_QWORD *)(v40 + 240) = v41;
                  if (!v24)
                    goto LABEL_84;
                  do
                  {
                    v46 = __ldaxr(v24);
                    v26 = --v46 == 0;
                  }
                  while (__stlxr(v46, v24));
                  goto LABEL_82;
                }
                v33 = *(_QWORD *)(v32 + 8);
                if (__ldaxr((unsigned __int8 *)v33))
                {
                  __clrex();
                }
                else if (!__stxr(1u, (unsigned __int8 *)v33))
                {
                  goto LABEL_61;
                }
                MEMORY[0x19AEA534C](v33);
LABEL_61:
                v35 = *(_QWORD *)(v33 + 8);
                v36 = v35 - 1;
                *(_QWORD *)(v33 + 8) = v35 - 1;
                if (v35 == 1)
                {
                  v53 = *(_QWORD *)(v33 + 16);
                  v37 = *(_QWORD *)(v33 + 24);
                  *(_QWORD *)(v33 + 24) = 0;
                  v38 = v53 != 0;
                }
                else
                {
                  v37 = 0;
                  v38 = 1;
                }
                v39 = __ldxr((unsigned __int8 *)v33);
                if (v39 == 1)
                {
                  if (!__stlxr(0, (unsigned __int8 *)v33))
                  {
LABEL_68:
                    if (!v36)
                    {
                      if (v37)
                        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
                      if (!v38)
                        WTF::fastFree((WTF *)v33, v12);
                    }
                    goto LABEL_73;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v33);
                goto LABEL_68;
              }
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 96))(v27) & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x195631744);
              }
              v29 = *(_QWORD *)(v28 + 8);
              if (__ldaxr((unsigned __int8 *)v29))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v29))
              {
                goto LABEL_51;
              }
              MEMORY[0x19AEA534C](v29);
LABEL_51:
              ++*(_QWORD *)(v29 + 8);
              v31 = __ldxr((unsigned __int8 *)v29);
              if (v31 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v29))
                  goto LABEL_56;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v29);
              goto LABEL_56;
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::AccessibilityScrollView::document(WebCore::AccessibilityScrollView *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = *((_QWORD *)this + 30);
  if (!v2)
    goto LABEL_11;
  v3 = *(_QWORD **)(v2 + 8);
  if (!v3)
    goto LABEL_11;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 72))(v3))
  {
    v4 = v3[41];
LABEL_13:
    v9 = v4 + 296;
    return *(_QWORD *)v9;
  }
  v5 = *((_QWORD *)this + 30);
  if (!v5
    || (v6 = *(_QWORD **)(v5 + 8)) == 0
    || !(*(unsigned int (**)(_QWORD *))(*v6 + 80))(v6)
    || (v7 = *(_QWORD *)(v6[41] + 120)) == 0
    || (v8 = *(_QWORD *)(v7 + 8)) == 0)
  {
LABEL_11:
    result = (*(uint64_t (**)(WebCore::AccessibilityScrollView *))(*(_QWORD *)this + 1720))(this);
    if (!result)
      return result;
    v4 = *(_QWORD *)(result + 328);
    goto LABEL_13;
  }
  v9 = *(_QWORD *)(v8 + 40) + 8;
  return *(_QWORD *)v9;
}

uint64_t WebCore::AccessibilityScrollView::accessibilityHitTest(WebCore::AccessibilityScrollView *this, const WebCore::IntPoint *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  signed int v12;
  signed int v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  signed int v22;
  signed int v23;
  int v25;

  result = WebCore::AccessibilityScrollView::webAreaObject(this);
  if (result)
  {
    v5 = result;
    v6 = *((_QWORD *)this + 32);
    if (!v6)
      goto LABEL_22;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1512))(v6);
    v10 = *((_DWORD *)a2 + 1);
    v11 = *(_DWORD *)a2 << 6;
    if (*(int *)a2 < -33554432)
      v11 = 0x80000000;
    if (*(int *)a2 > 0x1FFFFFF)
      v11 = 0x7FFFFFFF;
    v12 = v10 << 6;
    if (v10 < -33554432)
      v12 = 0x80000000;
    if (v10 > 0x1FFFFFF)
      v12 = 0x7FFFFFFF;
    if (v11 < (int)v7)
      goto LABEL_22;
    v13 = (v7 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__((_DWORD)v7, v8))
      v13 = v7 + v8;
    if (v13 <= v11 || v12 < SHIDWORD(v7))
      goto LABEL_22;
    v15 = (HIDWORD(v7) >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(HIDWORD(v7), v9))
      v15 = HIDWORD(v7) + v9;
    if (v15 <= v12)
    {
LABEL_22:
      v16 = *((_QWORD *)this + 33);
      if (!v16)
        return (*(uint64_t (**)(uint64_t, const WebCore::IntPoint *))(*(_QWORD *)v5 + 1208))(v5, a2);
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 1512))(v16);
      v20 = *((_DWORD *)a2 + 1);
      v21 = *(_DWORD *)a2 << 6;
      if (*(int *)a2 < -33554432)
        v21 = 0x80000000;
      if (*(int *)a2 > 0x1FFFFFF)
        v21 = 0x7FFFFFFF;
      v22 = v20 << 6;
      if (v20 < -33554432)
        v22 = 0x80000000;
      if (v20 > 0x1FFFFFF)
        v22 = 0x7FFFFFFF;
      if (v21 < (int)v17)
        return (*(uint64_t (**)(uint64_t, const WebCore::IntPoint *))(*(_QWORD *)v5 + 1208))(v5, a2);
      v23 = (v17 >> 31) + 0x7FFFFFFF;
      if (!__OFADD__((_DWORD)v17, v18))
        v23 = v17 + v18;
      if (v23 <= v21 || v22 < SHIDWORD(v17))
        return (*(uint64_t (**)(uint64_t, const WebCore::IntPoint *))(*(_QWORD *)v5 + 1208))(v5, a2);
      v25 = (HIDWORD(v17) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(HIDWORD(v17), v19))
        v25 = HIDWORD(v17) + v19;
      if (v25 <= v22)
        return (*(uint64_t (**)(uint64_t, const WebCore::IntPoint *))(*(_QWORD *)v5 + 1208))(v5, a2);
      else
        return *((_QWORD *)this + 33);
    }
    else
    {
      return *((_QWORD *)this + 32);
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityScrollView::elementRect(WebCore::AccessibilityScrollView *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *((_QWORD *)this + 30);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      goto LABEL_3;
  }
  v2 = *((_QWORD *)this + 31);
  if (!v2 || (v2 = *(_QWORD *)(v2 + 8)) == 0 || (v2 = *(_QWORD *)(v2 + 112)) == 0 || (v2 = *(_QWORD *)(v2 + 8)) == 0)
  {
LABEL_16:
    v4 = 0;
    return v4 | v2;
  }
  if (*(_BYTE *)(v2 + 144))
  {
    v2 = 0;
    goto LABEL_16;
  }
  v2 = *(_QWORD *)(v2 + 296);
  if (!v2)
    goto LABEL_16;
  v2 = *(_QWORD *)(v2 + 528);
  if (!v2)
    goto LABEL_16;
  v2 = *(_QWORD *)(v2 + 8);
  if (!v2)
    goto LABEL_16;
  v2 = *(_QWORD *)(v2 + 288);
  if (!v2)
    goto LABEL_16;
LABEL_3:
  v3 = WebCore::ScrollView::frameRectShrunkByInset((WebCore::ScrollView *)v2);
  v4 = ((_DWORD)v3 << 6);
  if ((int)v3 < -33554432)
    v4 = 0x80000000;
  v5 = HIDWORD(v3) << 38;
  if (SHIDWORD(v3) < -33554432)
    v5 = 0x8000000000000000;
  if (SHIDWORD(v3) <= 0x1FFFFFF)
    v2 = v5;
  else
    v2 = 0x7FFFFFFF00000000;
  if ((int)v3 > 0x1FFFFFF)
    v4 = 0x7FFFFFFFLL;
  return v4 | v2;
}

uint64_t WebCore::AccessibilityScrollView::parentObject(WebCore::AccessibilityScrollView *this)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t *v13;
  _QWORD *v14;
  WebCore::AXObjectCache *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  WTF *v53;
  WebCore::AccessibilityScrollView *v54;
  WebCore::AXObjectCache *v55;
  uint64_t v56;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityScrollView *))(*(_QWORD *)this + 1712))(this);
  if (!v2)
    return 0;
  v3 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v3 & 1) == 0)
    return 0;
  v6 = v2;
  v54 = this;
  if (*(_BYTE *)(v2 + 3362) || *(_BYTE *)(v2 + 3405))
  {
    while (1)
    {
      v42 = *(_QWORD *)(v6 + 528);
      if (!v42)
        break;
      v43 = *(_QWORD *)(v42 + 8);
      if (!v43)
        break;
      v44 = *(_QWORD *)(v43 + 120);
      if (!v44)
        break;
      v45 = *(_QWORD *)(v44 + 8);
      if (!v45)
        break;
      v6 = *(_QWORD *)(*(_QWORD *)(v45 + 40) + 8);
    }
  }
  else
  {
    v7 = *(_QWORD *)(v2 + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
        if (v9 && *(_BYTE *)(v9 + 144) == 0)
        {
          v11 = *(_QWORD *)(v9 + 296);
          if (v11)
            v6 = v11;
        }
      }
    }
  }
  *(_DWORD *)(v6 + 24) += 2;
  v56 = v6;
  if (*(_QWORD *)(v6 + 1944))
    v12 = *(_BYTE *)(v6 + 3405) == 0;
  else
    v12 = 0;
  if (!v12)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v56);
    return 0;
  }
  v13 = *(uint64_t **)(v6 + 1488);
  if (v13)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v56);
  }
  else
  {
    v15 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
    v55 = WebCore::AXObjectCache::AXObjectCache(v15, (WebCore::Document *)v6);
    std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100]((WebCore::AXObjectCache **)(v6 + 1488), &v55);
    std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v55);
    WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
    v13 = *(uint64_t **)(v6 + 1488);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v56);
    if (!v13)
      return 0;
  }
  v16 = *v13;
  if (!*v13)
  {
    v16 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = v13;
    v17 = (unsigned int *)*v13;
    *v13 = v16;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v14);
      }
      v16 = *v13;
      if (!*v13)
        return 0;
    }
  }
  do
    v20 = __ldaxr((unsigned int *)v16);
  while (__stlxr(v20 + 1, (unsigned int *)v16));
  if (!*(_QWORD *)(v16 + 8))
    goto LABEL_55;
  v21 = *((_QWORD *)v54 + 31);
  if (v21 && (v22 = *(_QWORD *)(v21 + 8)) != 0)
  {
    v40 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v22);
    v23 = v40;
    if (v40)
    {
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 + 1, v40));
    }
  }
  else
  {
    v23 = 0;
  }
  v24 = *((_QWORD *)v54 + 30);
  if (v24)
  {
    v25 = *(_QWORD **)(v24 + 8);
    if (v25)
    {
      if ((*(unsigned int (**)(_QWORD *))(*v25 + 72))(v25))
      {
        v26 = *(_QWORD *)(v25[41] + 120);
        if (v26 && (v27 = *(_QWORD *)(v26 + 8)) != 0)
        {
          v46 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v27);
          v28 = v46;
          if (v46)
          {
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 + 1, v46));
          }
        }
        else
        {
          v28 = 0;
        }
        if (!v23)
          goto LABEL_53;
        do
        {
          v29 = __ldaxr(v23);
          v30 = --v29 == 0;
        }
        while (__stlxr(v29, v23));
LABEL_52:
        if (v30)
        {
          atomic_store(1u, v23);
          v52 = v23[7];
          if ((_DWORD)v52)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v23 + 2), (WTF::StringImpl *)(*((_QWORD *)v23 + 2) + 32 * v52));
          v53 = (WTF *)*((_QWORD *)v23 + 2);
          if (v53)
          {
            *((_QWORD *)v23 + 2) = 0;
            v23[6] = 0;
            WTF::fastFree(v53, v14);
          }
          WTF::fastFree((WTF *)v23, v14);
        }
LABEL_53:
        v23 = v28;
        goto LABEL_54;
      }
      v31 = *((_QWORD *)v54 + 30);
      if (v31)
      {
        v32 = *(_QWORD **)(v31 + 8);
        if (v32)
        {
          if ((*(unsigned int (**)(_QWORD *))(*v32 + 80))(v32))
          {
            v33 = *(_QWORD *)(v32[41] + 120);
            if (v33 && (v34 = *(_QWORD *)(v33 + 8)) != 0)
            {
              v48 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v34);
              v28 = v48;
              if (v48)
              {
                do
                  v49 = __ldaxr(v48);
                while (__stlxr(v49 + 1, v48));
              }
            }
            else
            {
              v28 = 0;
            }
            if (!v23)
              goto LABEL_53;
            do
            {
              v35 = __ldaxr(v23);
              v30 = --v35 == 0;
            }
            while (__stlxr(v35, v23));
            goto LABEL_52;
          }
        }
      }
    }
  }
LABEL_54:
  if (v23)
  {
    v14 = (_QWORD *)*((_QWORD *)v23 + 1);
    if (v14 && (v14[8] & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((v14[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195631E3CLL);
      }
      v4 = WebCore::AXObjectCache::getOrCreate(*(_QWORD *)(v16 + 8), (uint64_t)v14, 0);
    }
    else
    {
      v4 = 0;
    }
    do
    {
      v36 = __ldaxr(v23);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v23));
    if (!v37)
    {
      atomic_store(1u, v23);
      v50 = v23[7];
      if ((_DWORD)v50)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v23 + 2), (WTF::StringImpl *)(*((_QWORD *)v23 + 2) + 32 * v50));
      v51 = (WTF *)*((_QWORD *)v23 + 2);
      if (v51)
      {
        *((_QWORD *)v23 + 2) = 0;
        v23[6] = 0;
        WTF::fastFree(v51, v14);
      }
      WTF::fastFree((WTF *)v23, v14);
    }
    goto LABEL_63;
  }
LABEL_55:
  v4 = 0;
  do
  {
LABEL_63:
    v38 = __ldaxr((unsigned int *)v16);
    v39 = v38 - 1;
  }
  while (__stlxr(v39, (unsigned int *)v16));
  if (!v39)
  {
    atomic_store(1u, (unsigned int *)v16);
    WTF::fastFree((WTF *)v16, v14);
  }
  return v4;
}

_QWORD *WebCore::AccessibilityScrollView::scrollTo(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v2 = result;
  v3 = result[30];
  if (v3)
  {
    result = *(_QWORD **)(v3 + 8);
    if (result)
      goto LABEL_3;
  }
  v4 = v2[31];
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 112);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          if (!*(_BYTE *)(v7 + 144))
          {
            v8 = *(_QWORD *)(v7 + 296);
            if (v8)
            {
              v9 = *(_QWORD *)(v8 + 528);
              if (v9)
              {
                v10 = *(_QWORD *)(v9 + 8);
                if (v10)
                {
                  result = *(_QWORD **)(v10 + 288);
                  if (result)
                  {
LABEL_3:
                    v11 = xmmword_1968DF820;
                    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, __int128 *))(*result + 472))(result, a2, &v11);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

double WebCore::AccessibilityScrollbar::elementRect(WebCore::AccessibilityScrollbar *this)
{
  int64x2_t *v1;
  void *v2;
  int64x2_t v3;
  int32x2_t v4;
  int64x2_t v5;
  int8x16_t v6;
  int32x2_t v7;
  int32x2_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int32x2_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int32x2_t v14;
  double result;
  const CGRect *v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  uint64_t v21;
  void *v22;
  CGRect v23;

  v1 = (int64x2_t *)*((_QWORD *)this + 31);
  if (!v1)
    return 0.0;
  v2 = (void *)v1[2].i64[1];
  if (v2)
  {
    v22 = (void *)v1[2].i64[1];
    if (objc_msgSend(v2, "conformsToProtocol:", &unk_1EE342188))
      objc_msgSend((id)objc_msgSend(v22, "superview"), "frame");
    else
      objc_msgSend(v22, "frame");
    v23.origin.x = v17;
    v23.origin.y = v18;
    v23.size.width = v19;
    v23.size.height = v20;
    v3.i64[0] = WebCore::enclosingIntRect(&v23, v16);
    v3.i64[1] = v21;
  }
  else
  {
    v3 = v1[3];
  }
  v4 = vmovn_s64(v3);
  v5 = (int64x2_t)vshrq_n_u64((uint64x2_t)v3, 0x20uLL);
  v6 = (int8x16_t)vshlq_n_s64(v3, 6uLL);
  v7 = vshrn_n_s64(v3, 0x20uLL);
  v8 = vcgt_s32(v4, (int32x2_t)0xFE000000FE000000);
  v9.i64[0] = v8.i32[0];
  v9.i64[1] = v8.i32[1];
  v10 = v9;
  v11 = vcgt_s32((int32x2_t)0xFE000000FE000000, v4);
  v9.i64[0] = v11.i32[0];
  v9.i64[1] = v11.i32[1];
  v12 = vorrq_s8(vandq_s8(v9, (int8x16_t)vdupq_n_s64(0x80000000uLL)), vandq_s8(vbicq_s8(v6, v9), (int8x16_t)vdupq_n_s64(0xFFFFFFC0uLL)));
  *(int32x2_t *)v6.i8 = vcgt_s32(v7, (int32x2_t)0xFE000000FE000000);
  v9.i64[0] = v6.i32[0];
  v9.i64[1] = v6.i32[1];
  v13 = v9;
  v14 = vcgt_s32((int32x2_t)0xFE000000FE000000, v7);
  v9.i64[0] = v14.i32[0];
  v9.i64[1] = v14.i32[1];
  *(_QWORD *)&result = vorrq_s8(vbslq_s8(v13, (int8x16_t)vdupq_n_s64(0x7FFFFFFF00000000uLL), vbslq_s8(v9, (int8x16_t)vdupq_n_s64(0x8000000000000000), (int8x16_t)vshlq_n_s64(v5, 0x26uLL))), vbslq_s8(v10, (int8x16_t)vdupq_n_s64(0x7FFFFFFFuLL), v12)).u64[0];
  return result;
}

uint64_t WebCore::AccessibilityScrollbar::document(WebCore::AccessibilityScrollbar *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 30);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1712))(v2);
  else
    return 0;
}

BOOL WebCore::AccessibilityScrollbar::orientation(WebCore::AccessibilityScrollbar *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 31);
  return v1 && *(_BYTE *)(v1 + 72) == 0;
}

BOOL WebCore::AccessibilityScrollbar::isEnabled(WebCore::AccessibilityScrollbar *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 31);
  return v1 && *(_BYTE *)(v1 + 136) != 0;
}

float WebCore::AccessibilityScrollbar::valueForRange(WebCore::AccessibilityScrollbar *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 31);
  if (v1)
    return *(float *)(v1 + 96) / (float)(*(_DWORD *)(v1 + 92) - *(_DWORD *)(v1 + 88));
  else
    return 0.0;
}

BOOL WebCore::AccessibilityScrollbar::setValue(WebCore::AccessibilityScrollbar *this, float a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 31);
  if (v2)
    WebCore::ScrollableArea::scrollToOffsetWithoutAnimation(*(WebCore::ScrollAnimator **)(v2 + 64), *(unsigned __int8 *)(v2 + 72), (float)(*(_DWORD *)(v2 + 92) - *(_DWORD *)(v2 + 88)) * a2);
  return v2 != 0;
}

uint64_t WebCore::AccessibilitySlider::create@<X0>(WebCore::AccessibilitySlider *this@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t result;
  void *v12;
  WTF *v13;

  v5 = (_OWORD *)WTF::fastMalloc((WTF *)0x100);
  v6 = v5;
  if ((*((_BYTE *)this + 45) & 1) != 0)
    v7 = 0;
  else
    v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  *(_OWORD *)((char *)v5 + 218) = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  *v5 = 0u;
  v5[1] = 0u;
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_19689B170;
  *(_QWORD *)(v8 + 24) = v6;
  *(_OWORD *)((char *)v6 + 41) = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  *(_WORD *)((char *)v6 + 57) = 134;
  *((_BYTE *)v6 + 59) = 2;
  *((_BYTE *)v6 + 64) = 0;
  *((_BYTE *)v6 + 96) = 0;
  *((_BYTE *)v6 + 104) = 0;
  *((_BYTE *)v6 + 176) = 0;
  *((_WORD *)v6 + 116) = 0;
  *(_OWORD *)((char *)v6 + 211) = 0u;
  *(_OWORD *)((char *)v6 + 200) = 0u;
  *(_OWORD *)((char *)v6 + 184) = 0u;
  *(_QWORD *)v6 = off_1E337CD98;
  *((_QWORD *)v6 + 1) = v8;
  *((_BYTE *)v6 + 234) = -122;
  if (v7)
  {
    v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v7);
    if (v9)
    {
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  else
  {
    v9 = 0;
  }
  *((_QWORD *)v6 + 30) = v9;
  *(_QWORD *)v6 = off_1E337F4E0;
  result = *((_QWORD *)this + 1);
  if (!result)
  {
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = this;
    v13 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = result;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
      {
        WTF::fastFree(v13, v12);
        result = *((_QWORD *)this + 1);
        if (!result)
          goto LABEL_10;
      }
      else
      {
        --*(_DWORD *)v13;
      }
    }
  }
  ++*(_DWORD *)result;
LABEL_10:
  *((_QWORD *)v6 + 31) = result;
  *(_QWORD *)v6 = off_1E3383610;
  *a2 = v6;
  return result;
}

uint64_t WebCore::AccessibilitySlider::orientation(WebCore::AccessibilitySlider *this)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE v21[8];
  WTF::StringImpl *v22;
  char v23;

  v3 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_orientationAttr);
  if (v3)
  {
    v4 = *(_DWORD *)v3;
    v5 = *(_DWORD *)(v3 + 4);
    *(_DWORD *)v3 += 2;
    switch(v5)
    {
      case 10:
        v14 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v3 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v14 & 0xDF) != 0x48
            || (*(_BYTE *)(v14 + 1) & 0xDF) != 0x4F
            || (*(_BYTE *)(v14 + 2) & 0xDF) != 0x52
            || (*(_BYTE *)(v14 + 3) & 0xDF) != 0x49
            || (*(_BYTE *)(v14 + 4) & 0xDF) != 0x5A
            || (*(_BYTE *)(v14 + 5) & 0xDF) != 0x4F
            || (*(_BYTE *)(v14 + 6) & 0xDF) != 0x4E
            || (*(_BYTE *)(v14 + 7) & 0xDF) != 0x54
            || (*(_BYTE *)(v14 + 8) & 0xDF) != 0x41)
          {
            break;
          }
          v15 = *(unsigned __int8 *)(v14 + 9);
        }
        else
        {
          if ((*(_WORD *)v14 & 0xFFDF) != 0x48
            || (*(_WORD *)(v14 + 2) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v14 + 4) & 0xFFDF) != 0x52
            || (*(_WORD *)(v14 + 6) & 0xFFDF) != 0x49
            || (*(_WORD *)(v14 + 8) & 0xFFDF) != 0x5A
            || (*(_WORD *)(v14 + 10) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v14 + 12) & 0xFFDF) != 0x4E
            || (*(_WORD *)(v14 + 14) & 0xFFDF) != 0x54
            || (*(_WORD *)(v14 + 16) & 0xFFDF) != 0x41)
          {
            break;
          }
          v15 = *(unsigned __int16 *)(v14 + 18);
        }
        if ((v15 & 0xFFFFFFDF) == 0x4C)
        {
          v10 = 1;
          goto LABEL_24;
        }
        break;
      case 8:
        v16 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v3 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v16 & 0xDF) != 0x56
            || (*(_BYTE *)(v16 + 1) & 0xDF) != 0x45
            || (*(_BYTE *)(v16 + 2) & 0xDF) != 0x52
            || (*(_BYTE *)(v16 + 3) & 0xDF) != 0x54
            || (*(_BYTE *)(v16 + 4) & 0xDF) != 0x49
            || (*(_BYTE *)(v16 + 5) & 0xDF) != 0x43
            || (*(_BYTE *)(v16 + 6) & 0xDF) != 0x41)
          {
            break;
          }
          v17 = *(unsigned __int8 *)(v16 + 7);
        }
        else
        {
          if ((*(_WORD *)v16 & 0xFFDF) != 0x56
            || (*(_WORD *)(v16 + 2) & 0xFFDF) != 0x45
            || (*(_WORD *)(v16 + 4) & 0xFFDF) != 0x52
            || (*(_WORD *)(v16 + 6) & 0xFFDF) != 0x54
            || (*(_WORD *)(v16 + 8) & 0xFFDF) != 0x49
            || (*(_WORD *)(v16 + 10) & 0xFFDF) != 0x43
            || (*(_WORD *)(v16 + 12) & 0xFFDF) != 0x41)
          {
            break;
          }
          v17 = *(unsigned __int16 *)(v16 + 14);
        }
        if ((v17 & 0xFFFFFFDF) == 0x4C)
        {
          v10 = 0;
          goto LABEL_24;
        }
        break;
      case 9:
        v18 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v3 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v18 & 0xDF) != 0x55
            || (*(_BYTE *)(v18 + 1) & 0xDF) != 0x4E
            || (*(_BYTE *)(v18 + 2) & 0xDF) != 0x44
            || (*(_BYTE *)(v18 + 3) & 0xDF) != 0x45
            || (*(_BYTE *)(v18 + 4) & 0xDF) != 0x46
            || (*(_BYTE *)(v18 + 5) & 0xDF) != 0x49
            || (*(_BYTE *)(v18 + 6) & 0xDF) != 0x4E
            || (*(_BYTE *)(v18 + 7) & 0xDF) != 0x45)
          {
            break;
          }
          v19 = *(unsigned __int8 *)(v18 + 8);
        }
        else
        {
          if ((*(_WORD *)v18 & 0xFFDF) != 0x55
            || (*(_WORD *)(v18 + 2) & 0xFFDF) != 0x4E
            || (*(_WORD *)(v18 + 4) & 0xFFDF) != 0x44
            || (*(_WORD *)(v18 + 6) & 0xFFDF) != 0x45
            || (*(_WORD *)(v18 + 8) & 0xFFDF) != 0x46
            || (*(_WORD *)(v18 + 10) & 0xFFDF) != 0x49
            || (*(_WORD *)(v18 + 12) & 0xFFDF) != 0x4E
            || (*(_WORD *)(v18 + 14) & 0xFFDF) != 0x45)
          {
            break;
          }
          v19 = *(unsigned __int16 *)(v18 + 16);
        }
        if ((v19 & 0xFFFFFFDF) == 0x44)
        {
          v10 = 2;
LABEL_24:
          if (v4)
            *(_DWORD *)v3 = v4;
          else
            WTF::StringImpl::destroy((WTF::StringImpl *)v3, v2);
          return v10;
        }
        break;
      default:
        break;
    }
  }
  v6 = (*(uint64_t (**)(WebCore::AccessibilitySlider *))(*(_QWORD *)this + 848))(this);
  if (!v6)
  {
    v11 = (*(uint64_t (**)(WebCore::AccessibilitySlider *))(*(_QWORD *)this + 832))(this);
    if (!v11)
      goto LABEL_22;
    v21[0] = 0;
    v23 = 0;
    v7 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v11 + 264))(v11, v21);
    if (v23)
    {
      v12 = v22;
      v22 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v2);
          if (v7)
            goto LABEL_8;
LABEL_22:
          v10 = 1;
          if (!v3)
            return v10;
          goto LABEL_23;
        }
        *(_DWORD *)v12 -= 2;
      }
    }
    if (v7)
      goto LABEL_8;
    goto LABEL_22;
  }
  if ((*(_BYTE *)(v6 + 45) & 2) != 0)
  {
    v20 = *(_QWORD *)(v6 + 32);
    if (v20)
      v6 = *(_QWORD *)(v20 + 8);
    else
      v6 = 0;
  }
  v7 = v6 + 80;
LABEL_8:
  v8 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 32) + 148) >> 14) & 0x7F;
  v10 = v8 != 14 && v8 != 29;
  if (v3)
  {
LABEL_23:
    v4 = *(_DWORD *)v3 - 2;
    goto LABEL_24;
  }
  return v10;
}

uint64_t *WebCore::AccessibilitySlider::addChildren(WebCore::AccessibilitySlider *this)
{
  uint64_t *result;
  uint64_t *v3;
  WebCore::AccessibilityObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;

  *((_BYTE *)this + 56) = 1;
  result = (uint64_t *)(*(uint64_t (**)(WebCore::AccessibilitySlider *))(*(_QWORD *)this + 1488))(this);
  if (!result)
    goto LABEL_42;
  v3 = result;
  v4 = (WebCore::AccessibilityObject *)WebCore::AXObjectCache::create(result, 103);
  if (((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v4 + 2752))(v4) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1956329B0);
  }
  v6 = *((_QWORD *)v4 + 1);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_7:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v9 = *((_QWORD *)this + 4);
  if (v9)
    goto LABEL_48;
  v9 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = this;
  v10 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v9;
  if (!v10)
    goto LABEL_48;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, v5);
  }
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
LABEL_48:
    do
      v13 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v13 + 1, (unsigned int *)v9));
  }
  v14 = (unsigned int *)*((_QWORD *)v4 + 30);
  *((_QWORD *)v4 + 30) = v9;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v5);
    }
  }
  if (WebCore::AccessibilityObject::accessibilityIsIgnored(v4))
    result = WebCore::AXObjectCache::remove(v3, *((_QWORD *)v4 + 2));
  else
    result = (uint64_t *)(*(uint64_t (**)(WebCore::AccessibilitySlider *, WebCore::AccessibilityObject *, _QWORD, uint64_t))(*(_QWORD *)this + 3072))(this, v4, *((unsigned int *)this + 13), 1);
  v18 = *((_QWORD *)v4 + 1);
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v18))
  {
    goto LABEL_30;
  }
  result = (uint64_t *)MEMORY[0x19AEA534C](v18);
LABEL_30:
  v20 = *(_QWORD *)(v18 + 8);
  v21 = v20 - 1;
  *(_QWORD *)(v18 + 8) = v20 - 1;
  if (v20 == 1)
  {
    v25 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 24) = 0;
    v23 = v25 != 0;
  }
  else
  {
    v22 = 0;
    v23 = 1;
  }
  v24 = __ldxr((unsigned __int8 *)v18);
  if (v24 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v18))
    {
      if (v21)
        goto LABEL_42;
      goto LABEL_38;
    }
  }
  else
  {
    __clrex();
  }
  result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v18);
  if (v21)
    goto LABEL_42;
LABEL_38:
  if (v22)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (!v23)
    result = (uint64_t *)WTF::fastFree((WTF *)v18, v17);
LABEL_42:
  *((_BYTE *)this + 233) = 0;
  return result;
}

uint64_t WebCore::AccessibilitySlider::elementAccessibilityHitTest(WebCore::AccessibilitySlider *this, const WebCore::IntPoint *a2)
{
  uint64_t result;
  int v5;
  int v6;
  signed int v7;
  signed int v8;
  int v10;
  uint64_t v11;
  WebCore::AXObjectCache *v12;
  uint64_t v13;
  WebCore::RenderObject *v14;

  if (!*((_DWORD *)this + 13))
    goto LABEL_25;
  result = (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 5) + 1512))(**((_QWORD **)this + 5));
  v5 = *((_DWORD *)a2 + 1);
  v6 = *(_DWORD *)a2 << 6;
  if (*(int *)a2 < -33554432)
    v6 = 0x80000000;
  if (*(int *)a2 > 0x1FFFFFF)
    v6 = 0x7FFFFFFF;
  v7 = v5 << 6;
  if (v5 < -33554432)
    v7 = 0x80000000;
  if (v5 > 0x1FFFFFF)
    v7 = 0x7FFFFFFF;
  if (v6 < (int)result)
    goto LABEL_25;
  v8 = (result >> 31) + 0x7FFFFFFF;
  if (!__OFADD__((_DWORD)result, (_DWORD)a2))
    v8 = result + (_DWORD)a2;
  if (v8 <= v6 || v7 < SHIDWORD(result))
    goto LABEL_25;
  v10 = (HIDWORD(result) >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(HIDWORD(result), HIDWORD(a2)))
    v10 = HIDWORD(result) + HIDWORD(a2);
  if (v10 <= v7)
  {
LABEL_25:
    v12 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilitySlider *, const WebCore::IntPoint *))(*(_QWORD *)this + 1488))(this, a2);
    v13 = *((_QWORD *)this + 31);
    if (v13)
    {
      v14 = *(WebCore::RenderObject **)(v13 + 8);
      if (v14)
        return WebCore::AXObjectCache::getOrCreate(v12, v14);
    }
    return 0;
  }
  if (!*((_DWORD *)this + 13))
  {
    __break(0xC471u);
    return result;
  }
  v11 = **((_QWORD **)this + 5);
  if (!v11)
    return 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11))
    return v11;
  else
    return 0;
}

float WebCore::AccessibilitySlider::valueForRange(WebCore::AccessibilitySlider *this)
{
  uint64_t v1;
  float v2;
  _QWORD *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  float v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  v1 = (*(uint64_t (**)(WebCore::AccessibilitySlider *))(*(_QWORD *)this + 840))(this);
  v2 = 0.0;
  if (!v1)
    return v2;
  v3 = (_QWORD *)v1;
  if ((*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    return v2;
  }
  v4 = *(_DWORD **)(v1 + 240);
  if (v4[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v4, &v16);
    goto LABEL_23;
  }
  v5 = (WTF::StringImpl *)v3[27];
  if (v5)
  {
    *(_DWORD *)v5 += 2;
    v16 = v5;
    goto LABEL_23;
  }
  v6 = v3[13];
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if ((_DWORD)v9)
      {
LABEL_9:
        v9 = v9;
        v10 = (_QWORD *)(v8 + 8);
        while (1)
        {
          v11 = *(v10 - 1);
          if (v11 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_18;
          }
          v10 += 2;
          if (!--v9)
          {
            v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_18;
          }
        }
      }
    }
    else
    {
      v8 = v6 + 32;
      LODWORD(v9) = v7 >> 5;
      if ((_DWORD)v9)
        goto LABEL_9;
    }
  }
  v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_18:
  if (!*v10)
  {
LABEL_19:
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v4 + 64))(&v16);
    goto LABEL_23;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v4 + 296))(&v16);
  if (!v16)
  {
    v16 = 0;
    v4 = (_DWORD *)v3[30];
    goto LABEL_19;
  }
LABEL_23:
  WTF::String::toFloat((WTF::String *)&v16, 0);
  v2 = v13;
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  return v2;
}

float WebCore::AccessibilitySlider::maxValueForRange(WebCore::AccessibilitySlider *this)
{
  uint64_t v1;
  float result;
  double v3;

  v1 = (*(uint64_t (**)(WebCore::AccessibilitySlider *))(*(_QWORD *)this + 840))(this);
  result = 0.0;
  if (v1
    && (*(_WORD *)(v1 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    WebCore::HTMLInputElement::maximum((WebCore::HTMLInputElement *)v1);
    return v3;
  }
  return result;
}

float WebCore::AccessibilitySlider::minValueForRange(WebCore::AccessibilitySlider *this)
{
  uint64_t v1;
  float result;
  double v3;

  v1 = (*(uint64_t (**)(WebCore::AccessibilitySlider *))(*(_QWORD *)this + 840))(this);
  result = 0.0;
  if (v1
    && (*(_WORD *)(v1 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    WebCore::HTMLInputElement::minimum((WebCore::HTMLInputElement *)v1);
    return v3;
  }
  return result;
}

uint64_t WebCore::AccessibilitySlider::setValue(WebCore::AccessibilitySlider *this, const WTF::StringImpl **a2)
{
  uint64_t result;
  const WTF::StringImpl *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;

  result = (*(uint64_t (**)(WebCore::AccessibilitySlider *))(*(_QWORD *)this + 840))(this);
  if (!result)
    return result;
  v5 = result;
  if ((*(_WORD *)(result + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    return 0;
  }
  *(_DWORD *)(result + 24) += 2;
  v6 = *(_DWORD **)(result + 240);
  if (v6[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v6, &v21);
    goto LABEL_24;
  }
  v7 = *(WTF::StringImpl **)(v5 + 216);
  if (v7)
  {
    *(_DWORD *)v7 += 2;
    v21 = v7;
    goto LABEL_24;
  }
  v8 = *(_QWORD *)(v5 + 104);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 4);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(v8 + 40);
      LODWORD(v11) = *(_DWORD *)(v8 + 52);
      if ((_DWORD)v11)
      {
LABEL_9:
        v11 = v11;
        v12 = (_QWORD *)(v10 + 8);
        while (1)
        {
          v13 = *(v12 - 1);
          if (v13 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_19;
          }
          v12 += 2;
          if (!--v11)
          {
            v12 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_19;
          }
        }
      }
    }
    else
    {
      v10 = v8 + 32;
      LODWORD(v11) = v9 >> 5;
      if ((_DWORD)v11)
        goto LABEL_9;
    }
  }
  v12 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_19:
  if (!*v12)
  {
LABEL_20:
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v6 + 64))(&v21);
    goto LABEL_24;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v6 + 296))(&v21);
  if (!v21)
  {
    v21 = 0;
    v6 = *(_DWORD **)(v5 + 240);
    goto LABEL_20;
  }
LABEL_24:
  v15 = WTF::equal(v21, *a2, v4);
  v16 = v21;
  v21 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v14);
      if ((v15 & 1) == 0)
        goto LABEL_28;
      goto LABEL_32;
    }
    *(_DWORD *)v16 -= 2;
  }
  if ((v15 & 1) == 0)
  {
LABEL_28:
    WebCore::HTMLInputElement::setValue(v5, (uint64_t)a2, (const WTF::StringImpl *)2, 0, (uint64_t)&v18);
    if (v20)
    {
      v17 = v19;
      v19 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v14);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
  }
LABEL_32:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v14);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return 1;
}

uint64_t WebCore::AccessibilitySliderThumb::elementRect(WebCore::AccessibilitySliderThumb *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::RenderObject *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = *((_QWORD *)this + 30);
  if (!v1)
    goto LABEL_20;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    goto LABEL_19;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 848))(v2);
  if (!v3 || *(_BYTE *)(v3 + 46) != 33)
    goto LABEL_19;
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
  if ((*(_WORD *)(v4 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x1956330D4);
  }
  v5 = (WebCore::RenderObject *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 240) + 584))(*(_QWORD *)(v4 + 240))
                                           + 64) & 0xFFFFFFFFFFFFLL);
  if (!v5)
  {
LABEL_19:
    v1 = 0;
LABEL_20:
    v7 = 0;
    return v7 | v1;
  }
  if ((*((_BYTE *)v5 + 45) & 2) != 0)
    goto LABEL_22;
  v6 = WebCore::RenderObject::absoluteBoundingBoxRect(v5, 1, 0);
  v7 = ((_DWORD)v6 << 6);
  if ((int)v6 < -33554432)
    v7 = 0x80000000;
  v8 = HIDWORD(v6) << 38;
  if (SHIDWORD(v6) < -33554432)
    v8 = 0x8000000000000000;
  if (SHIDWORD(v6) <= 0x1FFFFFF)
    v1 = v8;
  else
    v1 = 0x7FFFFFFF00000000;
  if ((int)v6 > 0x1FFFFFF)
    v7 = 0x7FFFFFFFLL;
  return v7 | v1;
}

BOOL WebCore::AccessibilitySliderThumb::computeAccessibilityIsIgnored(WebCore::AccessibilitySliderThumb *this)
{
  return WebCore::AccessibilityObject::defaultObjectInclusion(this) == 1;
}

uint64_t WebCore::AccessibilityObject::isEnabled(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::parentObject(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::computeAccessibilityIsIgnored(WebCore::AccessibilityObject *this)
{
  return 1;
}

void WebCore::AccessibilityProgressIndicator::~AccessibilityProgressIndicator(WebCore::AccessibilityProgressIndicator *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E337F4E0;
  v3 = (WTF *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E337CD98;
  v4 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v7 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v7)
      {
        v10 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v7));
        v4 = v10;
      }
      v8 = *(WTF **)(v4 + 16);
      if (v8)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v9 = v4;
        WTF::fastFree(v8, a2);
        v4 = v9;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
}

{
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E337F4E0;
  v3 = (WTF *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E337CD98;
  v4 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v9 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v9)
      {
        v12 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v9));
        v4 = v12;
      }
      v10 = *(WTF **)(v4 + 16);
      if (v10)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v11 = v4;
        WTF::fastFree(v10, a2);
        v4 = v11;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
  WTF::fastFree(v7, v8);
}

uint64_t WebCore::AccessibilitySVGElement::axObjectCache(WebCore::AccessibilitySVGElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 32);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WebCore::AccessibilitySVGRoot::isAccessibilitySVGRoot(WebCore::AccessibilitySVGRoot *this)
{
  return 1;
}

BOOL WebCore::AccessibilityScrollView::hasRemoteFrameChild(WebCore::AccessibilityScrollView *this)
{
  uint64_t (*v1)();

  v1 = WTF::RefPtr<WebCore::AXRemoteFrame,WTF::RawPtrTraits<WebCore::AXRemoteFrame>,WTF::DefaultRefDerefTraits<WebCore::AXRemoteFrame>>::unspecifiedBoolTypeInstance;
  if (!*((_QWORD *)this + 35))
    v1 = 0;
  return v1 != 0;
}

uint64_t WebCore::AccessibilityScrollView::isEnabled(WebCore::AccessibilityScrollView *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityScrollView::widgetForAttachmentView(WebCore::AccessibilityScrollView *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 30);
  if (!v2 || (result = *(_QWORD *)(v2 + 8)) == 0)
  {
    v4 = *((_QWORD *)this + 31);
    if (v4
      && (v5 = *(_QWORD *)(v4 + 8)) != 0
      && (v6 = *(_QWORD *)(v5 + 112)) != 0
      && (v7 = *(_QWORD *)(v6 + 8)) != 0
      && !*(_BYTE *)(v7 + 144)
      && (v8 = *(_QWORD *)(v7 + 296)) != 0
      && (v9 = *(_QWORD *)(v8 + 528)) != 0
      && (v10 = *(_QWORD *)(v9 + 8)) != 0)
    {
      return *(_QWORD *)(v10 + 288);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityScrollView::isAccessibilityScrollViewInstance(WebCore::AccessibilityScrollView *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityScrollView::determineAccessibilityRole(WebCore::AccessibilityScrollView *this)
{
  return 99;
}

uint64_t WebCore::AccessibilityScrollView::setNeedsToUpdateChildren(uint64_t this)
{
  *(_BYTE *)(this + 272) = 1;
  return this;
}

uint64_t WebCore::AccessibilityScrollView::getScrollableAreaIfScrollable(WebCore::AccessibilityScrollView *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 30);
  if (!v1 || (v2 = *(_QWORD *)(v1 + 8)) == 0)
  {
    v2 = *((_QWORD *)this + 31);
    if (v2)
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (v2)
      {
        v2 = *(_QWORD *)(v2 + 112);
        if (v2)
        {
          v2 = *(_QWORD *)(v2 + 8);
          if (v2)
          {
            if (*(_BYTE *)(v2 + 144))
            {
              v2 = 0;
            }
            else
            {
              v2 = *(_QWORD *)(v2 + 296);
              if (v2)
              {
                v2 = *(_QWORD *)(v2 + 528);
                if (v2)
                {
                  v2 = *(_QWORD *)(v2 + 8);
                  if (v2)
                    v2 = *(_QWORD *)(v2 + 288);
                }
              }
            }
          }
        }
      }
    }
  }
  if (v2)
    return v2 + 64;
  else
    return 0;
}

void WebCore::AccessibilityScrollbar::~AccessibilityScrollbar(WebCore::AccessibilityScrollbar *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (_DWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = off_1E337C0A8;
  v4 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
}

{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  void *v8;

  v3 = (_DWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = off_1E337C0A8;
  v4 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
  WTF::fastFree(v7, v8);
}

uint64_t WebCore::AccessibilityScrollbar::canSetValueAttribute(WebCore::AccessibilityScrollbar *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityScrollbar::isAccessibilityScrollbar(WebCore::AccessibilityScrollbar *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityScrollbar::determineAccessibilityRole(WebCore::AccessibilityScrollbar *this)
{
  return 100;
}

void WebCore::AccessibilitySlider::~AccessibilitySlider(WebCore::AccessibilitySlider *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E337F4E0;
  v3 = (WTF *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E337CD98;
  v4 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v7 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v7)
      {
        v10 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v7));
        v4 = v10;
      }
      v8 = *(WTF **)(v4 + 16);
      if (v8)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v9 = v4;
        WTF::fastFree(v8, a2);
        v4 = v9;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
}

{
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E337F4E0;
  v3 = (WTF *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E337CD98;
  v4 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v9 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v9)
      {
        v12 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v9));
        v4 = v12;
      }
      v10 = *(WTF **)(v4 + 16);
      if (v10)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v11 = v4;
        WTF::fastFree(v10, a2);
        v4 = v11;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
  WTF::fastFree(v7, v8);
}

uint64_t WebCore::AccessibilitySlider::isControl(WebCore::AccessibilitySlider *this)
{
  return 1;
}

uint64_t WebCore::AccessibilitySlider::canSetValueAttribute(WebCore::AccessibilitySlider *this)
{
  return 1;
}

uint64_t WebCore::AccessibilitySlider::determineAccessibilityRole(WebCore::AccessibilitySlider *this)
{
  return 102;
}

void WebCore::AccessibilitySliderThumb::~AccessibilitySliderThumb(WebCore::AccessibilitySliderThumb *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E337C0A8;
  v3 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = off_1E337C0A8;
  v3 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
  WTF::fastFree(v6, v7);
}

uint64_t WebCore::AccessibilitySliderThumb::isSliderThumb(WebCore::AccessibilitySliderThumb *this)
{
  return 1;
}

uint64_t WebCore::AccessibilitySliderThumb::determineAccessibilityRole(WebCore::AccessibilitySliderThumb *this)
{
  return 103;
}

unsigned int *std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::SimpleRange,false> const&>(unsigned int *result, uint64_t *a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  if (*((unsigned __int8 *)result + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*((_BYTE *)result + 32))
    {
      v4 = *a2;
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(*a2 + 24) + 2;
      v5 = *(_QWORD *)result;
      *(_QWORD *)v3 = v4;
      if (v5)
      {
        if (*(_DWORD *)(v5 + 24) == 2)
        {
          if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
        }
        else
        {
          *(_DWORD *)(v5 + 24) -= 2;
        }
      }
      v3[2] = *((_DWORD *)a2 + 2);
      v6 = a2[2];
      *(_DWORD *)(v6 + 24) += 2;
      result = (unsigned int *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = v6;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          result[6] -= 2;
        }
      }
      v3[6] = *((_DWORD *)a2 + 6);
    }
  }
  else if (*((_BYTE *)result + 32))
  {
    v7 = *((_QWORD *)result + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v7)
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    result = *(unsigned int **)v3;
    *(_QWORD *)v3 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
    *((_BYTE *)v3 + 32) = 0;
  }
  else
  {
    v8 = *a2;
    *(_DWORD *)(v8 + 24) = *(_DWORD *)(*a2 + 24) + 2;
    *(_QWORD *)result = v8;
    result[2] = *((_DWORD *)a2 + 2);
    v9 = a2[2];
    *(_DWORD *)(v9 + 24) += 2;
    *((_QWORD *)result + 2) = v9;
    result[6] = *((_DWORD *)a2 + 6);
    *((_BYTE *)result + 32) = 1;
  }
  return result;
}

void WebCore::initializeRoleMap(WebCore *this)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  WTF::ASCIICaseInsensitiveHash *v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  _DWORD *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  _DWORD *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint64_t i;
  WTF::StringImpl *v69;
  _QWORD v70[3];
  const char *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  char v211;
  uint64_t v212;
  char v213;
  uint64_t v214;
  char v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  char v223;
  uint64_t v224;
  char v225;
  uint64_t v226;
  char v227;
  uint64_t v228;
  char v229;
  uint64_t v230;
  char v231;
  uint64_t v232;
  char v233;
  uint64_t v234;
  char v235;
  uint64_t v236;
  char v237;
  uint64_t v238;
  char v239;
  uint64_t v240;
  char v241;
  uint64_t v242;
  char v243;
  uint64_t v244;
  char v245;
  uint64_t v246;
  char v247;
  uint64_t v248;
  char v249;
  uint64_t v250;
  char v251;
  uint64_t v252;
  char v253;
  uint64_t v254;
  char v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  char v259;
  uint64_t v260;
  char v261;
  uint64_t v262;
  char v263;
  uint64_t v264;
  char v265;
  uint64_t v266;
  char v267;
  uint64_t v268;
  char v269;
  uint64_t v270;
  char v271;
  uint64_t v272;
  char v273;
  uint64_t v274;
  char v275;
  uint64_t v276;
  char v277;
  uint64_t v278;
  char v279;
  uint64_t v280;
  char v281;
  uint64_t v282;
  char v283;
  uint64_t v284;
  char v285;
  uint64_t v286;
  char v287;
  uint64_t v288;
  char v289;
  uint64_t v290;
  char v291;
  uint64_t v292;
  char v293;
  uint64_t v294;
  char v295;
  uint64_t v296;
  char v297;
  uint64_t v298;
  char v299;
  uint64_t v300;
  char v301;
  uint64_t v302;
  char v303;
  uint64_t v304;
  char v305;
  uint64_t v306;
  char v307;
  uint64_t v308;
  char v309;
  uint64_t v310;
  char v311;
  uint64_t v312;
  char v313;
  uint64_t v314;
  char v315;
  uint64_t v316;
  char v317;
  uint64_t v318;
  char v319;
  uint64_t v320;
  char v321;
  uint64_t v322;
  char v323;
  uint64_t v324;
  char v325;
  uint64_t v326;
  char v327;
  uint64_t v328;
  char v329;
  uint64_t v330;

  v330 = *MEMORY[0x1E0C80C00];
  if (qword_1ECE82180)
    return;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v74 = v70[0];
  v75 = 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v76 = v70[0];
  v77 = 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v70[0];
  v79 = -119;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v80 = v70[0];
  v81 = 29;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v82 = v70[0];
  v83 = 55;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v84 = v70[0];
  v85 = 9;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v86 = v70[0];
  v87 = 10;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v88 = v70[0];
  v89 = 12;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v90 = v70[0];
  v91 = 15;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v92 = v70[0];
  v93 = 14;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v94 = v70[0];
  v95 = 56;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v96 = v70[0];
  v97 = 57;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v98 = v70[0];
  v99 = 22;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v100 = v70[0];
  v101 = 3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v102 = v70[0];
  v103 = 27;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v104 = v70[0];
  v105 = 127;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v106 = v70[0];
  v107 = 58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v108 = v70[0];
  v109 = 58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v110 = v70[0];
  v111 = 58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v112 = v70[0];
  v113 = -117;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v114 = v70[0];
  v115 = 69;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v116 = v70[0];
  v117 = 58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v118 = v70[0];
  v119 = -117;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v120 = v70[0];
  v121 = 58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v122 = v70[0];
  v123 = 127;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v124 = v70[0];
  v125 = 58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v126 = v70[0];
  v127 = 49;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v128 = v70[0];
  v129 = 127;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v130 = v70[0];
  v131 = 58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v132 = v70[0];
  v133 = 127;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v134 = v70[0];
  v135 = 69;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v136 = v70[0];
  v137 = 58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v138 = v70[0];
  v139 = 127;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v140 = v70[0];
  v141 = 58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v142 = v70[0];
  v143 = 58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v144 = v70[0];
  v145 = 127;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v146 = v70[0];
  v147 = 36;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v148 = v70[0];
  v149 = 58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v150 = v70[0];
  v151 = 58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v152 = v70[0];
  v153 = -117;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v154 = v70[0];
  v155 = 60;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v156 = v70[0];
  v157 = 58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v158 = v70[0];
  v159 = -117;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v160 = v70[0];
  v161 = 31;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v162 = v70[0];
  v163 = 106;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v164 = v70[0];
  v165 = 60;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v166 = v70[0];
  v167 = 58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v168 = v70[0];
  v169 = 58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v170 = v70[0];
  v171 = 58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v172 = v70[0];
  v173 = 127;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v174 = v70[0];
  v175 = 127;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v176 = v70[0];
  v177 = 45;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v178 = v70[0];
  v179 = 31;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v180 = v70[0];
  v181 = 60;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v182 = v70[0];
  v183 = 32;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v184 = v70[0];
  v185 = 34;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v186 = v70[0];
  v187 = 38;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v188 = v70[0];
  v189 = 39;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v190 = v70[0];
  v191 = 40;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v192 = v70[0];
  v193 = 41;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v194 = v70[0];
  v195 = 42;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v196 = v70[0];
  v197 = 43;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v198 = v70[0];
  v199 = 122;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v200 = v70[0];
  v201 = 13;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v202 = v70[0];
  v203 = 18;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v204 = v70[0];
  v205 = 19;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v206 = v70[0];
  v207 = 21;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v208 = v70[0];
  v209 = 28;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v210 = v70[0];
  v211 = 33;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v212 = v70[0];
  v213 = 37;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v214 = v70[0];
  v215 = 91;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v216 = v70[0];
  v217 = 44;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v218 = v70[0];
  v219 = 45;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v220 = v70[0];
  v221 = 49;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v222 = v70[0];
  v223 = 49;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v224 = v70[0];
  v225 = 53;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v226 = v70[0];
  v227 = -117;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v228 = v70[0];
  v229 = 66;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v230 = v70[0];
  v231 = 69;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v232 = v70[0];
  v233 = 67;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v234 = v70[0];
  v235 = 4;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v236 = v70[0];
  v237 = 59;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v238 = v70[0];
  v239 = 5;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v240 = v70[0];
  v241 = 30;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v242 = v70[0];
  v243 = 71;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v244 = v70[0];
  v245 = 73;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v246 = v70[0];
  v247 = 74;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v248 = v70[0];
  v249 = 76;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v250 = v70[0];
  v251 = 77;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v252 = v70[0];
  v253 = 78;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v254 = v70[0];
  v255 = 81;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v256 = v70[0];
  v257 = 86;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v258 = v70[0];
  v259 = 31;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v260 = v70[0];
  v261 = 60;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v262 = v70[0];
  v263 = 68;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v264 = v70[0];
  v265 = 83;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v266 = v70[0];
  v267 = 86;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v268 = v70[0];
  v269 = 87;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v270 = v70[0];
  v271 = 88;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v272 = v70[0];
  v273 = 89;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v274 = v70[0];
  v275 = 61;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v276 = v70[0];
  v277 = 92;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v278 = v70[0];
  v279 = 93;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v280 = v70[0];
  v281 = 100;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v282 = v70[0];
  v283 = 62;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v284 = v70[0];
  v285 = 101;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v286 = v70[0];
  v287 = 106;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v288 = v70[0];
  v289 = 102;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v290 = v70[0];
  v291 = 104;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v292 = v70[0];
  v293 = 6;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v294 = v70[0];
  v295 = 109;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v296 = v70[0];
  v297 = 110;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v298 = v70[0];
  v299 = 112;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v300 = v70[0];
  v301 = 108;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v302 = v70[0];
  v303 = 113;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v304 = v70[0];
  v305 = 121;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v306 = v70[0];
  v307 = 119;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v308 = v70[0];
  v309 = 120;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v310 = v70[0];
  v311 = 107;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v312 = v70[0];
  v313 = 126;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v314 = v70[0];
  v315 = 124;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v316 = v70[0];
  v317 = 0x80;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v318 = v70[0];
  v319 = 7;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v320 = v70[0];
  v321 = -123;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v322 = v70[0];
  v323 = -121;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v324 = v70[0];
  v325 = -127;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v326 = v70[0];
  v327 = -126;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v328 = v70[0];
  v329 = -125;
  v1 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1 = 0;
  qword_1ECE82180 = (uint64_t)v1;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  v4 = 0;
  *v2 = 0;
  qword_1ECE82188 = (uint64_t)v2;
  do
  {
    v5 = (uint64_t *)qword_1ECE82180;
    v6 = *(_QWORD *)qword_1ECE82180;
    if (*(_QWORD *)qword_1ECE82180
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AccessibilityRole>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AccessibilityRole>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WebCore::AccessibilityRole,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AccessibilityRole>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)qword_1ECE82180, 8u), (v6 = *v5) != 0))
    {
      v7 = *(_DWORD *)(v6 - 8);
    }
    else
    {
      v7 = 0;
    }
    v8 = (WTF::ASCIICaseInsensitiveHash *)(&v74 + 2 * v4);
    v9 = (char *)v8 + 8;
    v10 = WTF::ASCIICaseInsensitiveHash::hash(v8, (const WTF::String *)v3);
    v11 = 0;
    v12 = 0;
    v13 = *(_DWORD **)v8;
    while (1)
    {
      v14 = v10 & v7;
      v15 = v6 + 16 * v14;
      v16 = *(_QWORD *)v15;
      if (*(_QWORD *)v15 == -1)
      {
        v11 = v6 + 16 * v14;
        goto LABEL_19;
      }
      if (!v16)
        break;
      v17 = *(unsigned int *)(v16 + 4);
      if ((_DWORD)v17 == v13[1])
      {
        v18 = v13[4];
        v19 = *(unsigned __int8 **)(v16 + 8);
        v20 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
        if ((*(_BYTE *)(v16 + 16) & 4) != 0)
        {
          if ((v18 & 4) != 0)
          {
            if (!(_DWORD)v17)
              goto LABEL_39;
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v19) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v20))
            {
              v21 = 0;
              v34 = v20 + 1;
              v35 = v19 + 1;
              while (v17 - 1 != v21)
              {
                v3 = MEMORY[0x1E0CBF868];
                v36 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v35[v21]);
                v37 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v34[v21++]);
                if (v36 != v37)
                {
LABEL_38:
                  if (v21 < v17)
                    goto LABEL_19;
                  goto LABEL_39;
                }
              }
              goto LABEL_39;
            }
          }
          else
          {
            if (!(_DWORD)v17)
              goto LABEL_39;
            if ((*(unsigned __int16 *)v20 | (32 * (*(unsigned __int16 *)v20 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v19))
            {
              v21 = 0;
              v26 = v20 + 2;
              v27 = v19 + 1;
              while (v17 - 1 != v21)
              {
                v28 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v27[v21]);
                v29 = *(unsigned __int16 *)&v26[2 * v21];
                v3 = (v29 - 65) < 0x1A;
                ++v21;
                if ((v29 | (32 * (_DWORD)v3)) != v28)
                  goto LABEL_38;
              }
              goto LABEL_39;
            }
          }
        }
        else if ((v18 & 4) != 0)
        {
          if (!(_DWORD)v17)
            goto LABEL_39;
          if ((*(unsigned __int16 *)v19 | (32 * (*(unsigned __int16 *)v19 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v20))
          {
            v21 = 0;
            v30 = v20 + 1;
            v31 = v19 + 2;
            while (v17 - 1 != v21)
            {
              v32 = *(unsigned __int16 *)&v31[2 * v21] | (32
                                                        * (*(unsigned __int16 *)&v31[2 * v21] - 65 < 0x1A));
              v3 = MEMORY[0x1E0CBF868];
              v33 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[v21++]);
              if (v32 != v33)
                goto LABEL_38;
            }
            goto LABEL_39;
          }
        }
        else
        {
          if (!(_DWORD)v17)
            goto LABEL_39;
          if ((*(unsigned __int16 *)v19 | (32 * (*(unsigned __int16 *)v19 - 65 < 0x1A))) == (*(unsigned __int16 *)v20 | (32 * (*(unsigned __int16 *)v20 - 65 < 0x1A))))
          {
            v21 = 0;
            v22 = v20 + 2;
            v23 = v19 + 2;
            while (v17 - 1 != v21)
            {
              v24 = *(unsigned __int16 *)&v23[2 * v21] | (32
                                                        * (*(unsigned __int16 *)&v23[2 * v21] - 65 < 0x1A));
              v25 = *(unsigned __int16 *)&v22[2 * v21];
              v3 = (v25 - 65) < 0x1A;
              ++v21;
              if (v24 != (v25 | (32 * (_DWORD)v3)))
                goto LABEL_38;
            }
LABEL_39:
            *(_BYTE *)(v6 + 16 * v14 + 8) = *v9;
            goto LABEL_56;
          }
        }
      }
LABEL_19:
      ++v12;
      v10 = v14 + v12;
    }
    if (v11)
    {
      *(_QWORD *)v11 = 0;
      *(_BYTE *)(v11 + 8) = 0;
      --*(_DWORD *)(*v5 - 16);
      v13 = *(_DWORD **)v8;
      v15 = v11;
    }
    if (v13)
      *v13 += 2;
    *(_QWORD *)v15 = v13;
    *(_BYTE *)(v15 + 8) = *v9;
    v38 = *v5;
    if (*v5)
      v39 = *(_DWORD *)(v38 - 12) + 1;
    else
      v39 = 1;
    *(_DWORD *)(v38 - 12) = v39;
    v40 = *v5;
    if (*v5)
      v41 = *(_DWORD *)(v40 - 12);
    else
      v41 = 0;
    v42 = (*(_DWORD *)(v40 - 16) + v41);
    v43 = *(unsigned int *)(v40 - 4);
    if (v43 > 0x400)
    {
      if (v43 <= 2 * v42)
      {
LABEL_53:
        v44 = (_DWORD)v43 << (6 * *(_DWORD *)(v40 - 12) >= (2 * v43));
        goto LABEL_55;
      }
    }
    else if (3 * v43 <= 4 * v42)
    {
      if ((_DWORD)v43)
        goto LABEL_53;
      v44 = 8;
LABEL_55:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AccessibilityRole>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AccessibilityRole>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WebCore::AccessibilityRole,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AccessibilityRole>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v5, v44);
    }
LABEL_56:
    v45 = (uint64_t *)qword_1ECE82188;
    v46 = *v9;
    v47 = *(_QWORD *)qword_1ECE82188;
    if (*(_QWORD *)qword_1ECE82188
      || (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<WebCore::AccessibilityRole,WTF::String,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash((uint64_t *)qword_1ECE82188, 8u, 0), (v47 = *v45) != 0))
    {
      v48 = *(_DWORD *)(v47 - 8);
    }
    else
    {
      v48 = 0;
    }
    v49 = 9 * ((~(v46 << 15) + v46) ^ ((~(v46 << 15) + v46) >> 10));
    v50 = (v49 ^ (v49 >> 6)) + ~((v49 ^ (v49 >> 6)) << 11);
    v51 = v48 & (v50 ^ HIWORD(v50));
    v52 = v47 + 16 * v51;
    v53 = *(_DWORD *)v52;
    if (*(_DWORD *)v52 == 0x7FFFFFFF)
    {
LABEL_67:
      *(_DWORD *)v52 = v46;
      v56 = *(_DWORD **)v8;
      if (*(_QWORD *)v8)
        *v56 += 2;
      v57 = *(WTF::StringImpl **)(v52 + 8);
      *(_QWORD *)(v52 + 8) = v56;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v3);
        else
          *(_DWORD *)v57 -= 2;
      }
      v58 = *v45;
      if (*v45)
        v59 = *(_DWORD *)(v58 - 12) + 1;
      else
        v59 = 1;
      *(_DWORD *)(v58 - 12) = v59;
      v60 = *v45;
      if (*v45)
        v61 = *(_DWORD *)(v60 - 12);
      else
        v61 = 0;
      v62 = (*(_DWORD *)(v60 - 16) + v61);
      v63 = *(unsigned int *)(v60 - 4);
      if (v63 > 0x400)
      {
        if (v63 > 2 * v62)
          goto LABEL_91;
      }
      else
      {
        if (3 * v63 > 4 * v62)
          goto LABEL_91;
        if (!(_DWORD)v63)
        {
          v64 = 8;
          goto LABEL_90;
        }
      }
      v64 = (_DWORD)v63 << (6 * *(_DWORD *)(v60 - 12) >= (2 * v63));
LABEL_90:
      WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<WebCore::AccessibilityRole,WTF::String,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(v45, v64, (int *)v52);
      goto LABEL_91;
    }
    v54 = 0;
    v55 = 1;
    while (v53 != v46)
    {
      if (v53 == 2147483646)
        v54 = v52;
      v51 = (v51 + v55) & v48;
      v52 = v47 + 16 * v51;
      v53 = *(_DWORD *)v52;
      ++v55;
      if (*(_DWORD *)v52 == 0x7FFFFFFF)
      {
        if (v54)
        {
          *(_DWORD *)v54 = 0x7FFFFFFF;
          *(_QWORD *)(v54 + 8) = 0;
          --*(_DWORD *)(*v45 - 16);
          v52 = v54;
        }
        goto LABEL_67;
      }
    }
    v65 = *(_DWORD **)v8;
    if (*(_QWORD *)v8)
      *v65 += 2;
    v66 = *(WTF::StringImpl **)(v52 + 8);
    *(_QWORD *)(v52 + 8) = v65;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)v66 -= 2;
    }
LABEL_91:
    ++v4;
  }
  while (v4 != 128);
  v73 = 20;
  v71 = "textbox";
  v72 = 8;
  WTF::HashMap<WebCore::AccessibilityRole,WTF::String,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<int,WTF::ASCIILiteral>((uint64_t)v70, (uint64_t *)qword_1ECE82188, &v73, (uint64_t)&v71);
  v73 = 125;
  v71 = "textbox";
  v72 = 8;
  WTF::HashMap<WebCore::AccessibilityRole,WTF::String,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<int,WTF::ASCIILiteral>((uint64_t)v70, (uint64_t *)qword_1ECE82188, &v73, (uint64_t)&v71);
  v73 = 24;
  v71 = "definition";
  v72 = 11;
  WTF::HashMap<WebCore::AccessibilityRole,WTF::String,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<int,WTF::ASCIILiteral>((uint64_t)v70, (uint64_t *)qword_1ECE82188, &v73, (uint64_t)&v71);
  v73 = 25;
  v71 = "term";
  v72 = 5;
  WTF::HashMap<WebCore::AccessibilityRole,WTF::String,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<int,WTF::ASCIILiteral>((uint64_t)v70, (uint64_t *)qword_1ECE82188, &v73, (uint64_t)&v71);
  v73 = 26;
  v71 = "group";
  v72 = 6;
  WTF::HashMap<WebCore::AccessibilityRole,WTF::String,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<int,WTF::ASCIILiteral>((uint64_t)v70, (uint64_t *)qword_1ECE82188, &v73, (uint64_t)&v71);
  v73 = 49;
  v71 = "image";
  v72 = 6;
  WTF::HashMap<WebCore::AccessibilityRole,WTF::String,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<int,WTF::ASCIILiteral>((uint64_t)v70, (uint64_t *)qword_1ECE82188, &v73, (uint64_t)&v71);
  v73 = 68;
  v71 = "option";
  v72 = 7;
  WTF::HashMap<WebCore::AccessibilityRole,WTF::String,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<int,WTF::ASCIILiteral>((uint64_t)v70, (uint64_t *)qword_1ECE82188, &v73, (uint64_t)&v71);
  v73 = 80;
  v71 = "option";
  v72 = 7;
  WTF::HashMap<WebCore::AccessibilityRole,WTF::String,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<int,WTF::ASCIILiteral>((uint64_t)v70, (uint64_t *)qword_1ECE82188, &v73, (uint64_t)&v71);
  v73 = 86;
  v71 = "none";
  v72 = 5;
  WTF::HashMap<WebCore::AccessibilityRole,WTF::String,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<int,WTF::ASCIILiteral>((uint64_t)v70, (uint64_t *)qword_1ECE82188, &v73, (uint64_t)&v71);
  for (i = 2032; i != -16; i -= 16)
  {
    v69 = *(WTF::StringImpl **)((char *)&v74 + i);
    *(uint64_t *)((char *)&v74 + i) = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
        WTF::StringImpl::destroy(v69, v67);
      else
        *(_DWORD *)v69 -= 2;
    }
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AccessibilityRole>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AccessibilityRole>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WebCore::AccessibilityRole,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AccessibilityRole>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  const WTF::String *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t i;
  WTF::StringImpl **v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_BYTE *)(result + 24);
    do
    {
      *((_QWORD *)v10 - 1) = 0;
      *v10 = 0;
      v10 += 16;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (WTF::StringImpl **)(v4 + 16 * i);
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (*v12)
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)(v4 + 16 * i), v8);
          v16 = 0;
          do
          {
            v17 = v15 & v14;
            v15 = ++v16 + v17;
          }
          while (*(_QWORD *)(v13 + 16 * v17));
          v18 = v13 + 16 * v17;
          *(_QWORD *)v18 = 0;
          v19 = *v12;
          *v12 = 0;
          *(_QWORD *)v18 = v19;
          *(_BYTE *)(v18 + 8) = *(_BYTE *)(v4 + 16 * i + 8);
          v20 = *v12;
          *v12 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v8);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
        else
        {
          *v12 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<WebCore::AccessibilityRole,WTF::String,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int *v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v10 = a2;
    v11 = (_QWORD *)(v8 + 24);
    do
    {
      *((_DWORD *)v11 - 2) = 0x7FFFFFFF;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    v14 = a3;
    do
    {
      v15 = (int *)(v5 + 16 * v12);
      v16 = *v15;
      if (*v15 != 2147483646)
      {
        if (v16 == 0x7FFFFFFF)
        {
          v17 = v5 + 16 * v12;
          v18 = *(WTF::StringImpl **)(v17 + 8);
          *(_QWORD *)(v17 + 8) = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
            {
              WTF::StringImpl::destroy(v18, v9);
              v14 = a3;
            }
            else
            {
              *(_DWORD *)v18 -= 2;
            }
          }
        }
        else
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = 0;
          v22 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
          v23 = ((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) ^ (((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) >> 16);
          do
          {
            v24 = v23 & v20;
            v23 = ++v21 + v24;
          }
          while (*(_DWORD *)(v19 + 16 * v24) != 0x7FFFFFFF);
          v25 = v19 + 16 * v24;
          v26 = *(WTF::StringImpl **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
            {
              WTF::StringImpl::destroy(v26, v9);
              v14 = a3;
            }
            else
            {
              *(_DWORD *)v26 -= 2;
            }
          }
          *(_DWORD *)v25 = *v15;
          v27 = v5 + 16 * v12;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v25 + 8) = v28;
          v29 = *(WTF::StringImpl **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
            {
              WTF::StringImpl::destroy(v29, v9);
              v14 = a3;
            }
            else
            {
              *(_DWORD *)v29 -= 2;
            }
          }
          if (v15 == v14)
            v13 = v25;
        }
      }
      ++v12;
    }
    while (v12 != v6);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

WTF::StringImpl *WTF::HashMap<WebCore::AccessibilityRole,WTF::String,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<int,WTF::ASCIILiteral>(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl *result;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a2;
  v8 = *a2;
  if (*a2
    || (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<WebCore::AccessibilityRole,WTF::String,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(a2, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (WTF::StringImpl *)(v8 + 16 * v14);
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 == 0x7FFFFFFF)
  {
LABEL_12:
    *(_DWORD *)v15 = v11;
    v19 = *(_QWORD *)(a4 + 8);
    if (v19)
    {
      a2 = (uint64_t *)(v19 - 1);
      if (v19 == 1)
      {
        v19 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v19 = v30;
      }
    }
    result = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v19;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    v21 = *v6;
    if (*v6)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v23 = *v6;
    if (*v6)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
        goto LABEL_27;
    }
    else if (3 * v26 <= 4 * v25)
    {
      if (!(_DWORD)v26)
      {
        v27 = 8;
LABEL_39:
        result = (WTF::StringImpl *)WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<WebCore::AccessibilityRole,WTF::String,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(v6, v27, (int *)v15);
        v15 = result;
        v23 = *v6;
        if (*v6)
          v26 = *(unsigned int *)(v23 - 4);
        else
          v26 = 0;
        goto LABEL_43;
      }
LABEL_27:
      v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
      goto LABEL_39;
    }
LABEL_43:
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v23 + 16 * v26;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  v17 = 0;
  v18 = 1;
  while (v16 != v11)
  {
    if (v16 == 2147483646)
      v17 = v15;
    v14 = (v14 + v18) & v10;
    v15 = (WTF::StringImpl *)(v8 + 16 * v14);
    v16 = *(_DWORD *)v15;
    ++v18;
    if (*(_DWORD *)v15 == 0x7FFFFFFF)
    {
      if (v17)
      {
        *(_DWORD *)v17 = 0x7FFFFFFF;
        *((_QWORD *)v17 + 1) = 0;
        --*(_DWORD *)(*v6 - 16);
        v11 = *a3;
        v15 = v17;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v28 = 0;
  else
    v28 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v8 + 16 * v28;
  *(_BYTE *)(a1 + 16) = 0;
  v29 = *(_QWORD *)(a4 + 8);
  if (v29)
  {
    a2 = (uint64_t *)(v29 - 1);
    if (v29 == 1)
    {
      v29 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v29 = v30;
    }
  }
  result = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = v29;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_biEEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(WTF **)a1;
    v5 = *(_QWORD *)a1 + 40 * v3;
    do
    {
      v6 = (WTF::StringImpl *)*((_QWORD *)v4 + 4);
      *((_QWORD *)v4 + 4) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *((unsigned int *)v4 + 7);
      if ((_DWORD)v7)
      {
        v9 = (WTF::StringImpl **)*((_QWORD *)v4 + 2);
        v10 = 8 * v7;
        do
        {
          v11 = *v9;
          *v9 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, a2);
            else
              *(_DWORD *)v11 -= 2;
          }
          ++v9;
          v10 -= 8;
        }
        while (v10);
      }
      v8 = (WTF *)*((_QWORD *)v4 + 2);
      if (v8)
      {
        *((_QWORD *)v4 + 2) = 0;
        *((_DWORD *)v4 + 6) = 0;
        WTF::fastFree(v8, a2);
      }
      v4 = (WTF *)((char *)v4 + 40);
    }
    while (v4 != (WTF *)v5);
  }
  v12 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AccessibilityObject::firstAccessibleObjectFromNode(WebCore::Node const*)::$_0,BOOL,WebCore::AccessibilityObject const&>::call(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 856))(a2) ^ 1;
}

unint64_t WTF::Vector<WebCore::BoundaryPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::BoundaryPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::BoundaryPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::BoundaryPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (WTF *)((char *)v4 + 16 * v5);
        v9 = v4;
        do
        {
          v10 = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          *(_DWORD *)(v7 + 8) = *((_DWORD *)v9 + 2);
          result = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 2)
            {
              if ((*(_WORD *)(result + 30) & 0x400) == 0)
                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
            }
            else
            {
              *(_DWORD *)(result + 24) -= 2;
            }
          }
          v9 = (WTF *)((char *)v9 + 16);
          v7 += 16;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  WTF::StringImpl **v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl **result;
  uint64_t v42;
  char v45;
  char v46;
  char v47;
  char v48;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = v7 + 16;
    do
    {
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      *(_DWORD *)(v10 + 16) = 0;
      v10 += 24;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v42 = v5;
    do
    {
      v14 = (WTF::StringImpl **)(v4 + 24 * v11);
      v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = *((_DWORD *)v15 + 4);
          if (v22 < 0x100)
            v23 = WTF::StringImpl::hashSlowCase(v15);
          else
            v23 = v22 >> 8;
          v24 = 0;
          do
          {
            v25 = v23 & v21;
            v26 = (WTF::StringImpl **)(v20 + 24 * (v23 & v21));
            v23 = ++v24 + (v23 & v21);
          }
          while (*v26);
          v27 = v20 + 24 * v25;
          v30 = *(_DWORD *)(v27 + 16);
          v29 = (_DWORD *)(v27 + 16);
          v28 = v30;
          if (v30 == -1)
          {
            *v26 = 0;
          }
          else
          {
            ((void (*)(char *, uint64_t))off_1E3385010[v28])(&v46, v20 + 24 * v25 + 8);
            v32 = *v26;
            *v29 = -1;
            *v26 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
                WTF::StringImpl::destroy(v32, v31);
              else
                *(_DWORD *)v32 -= 2;
            }
          }
          v33 = *v14;
          *v14 = 0;
          v34 = v20 + 24 * v25;
          *(_BYTE *)(v34 + 8) = 0;
          v8 = (WTF::StringImpl *)(v34 + 8);
          *v26 = v33;
          *v29 = -1;
          v35 = v4 + 24 * v11;
          v38 = *(_DWORD *)(v35 + 16);
          v37 = (_DWORD *)(v35 + 16);
          v36 = v38;
          if (v38 != -1)
          {
            ((void (*)(char *, WTF::StringImpl *, uint64_t))off_1E3385050[v36])(&v47, v8, v4 + 24 * v11 + 8);
            *v29 = v36;
            v39 = *v37;
            if ((_DWORD)v39 != -1)
              ((void (*)(char *, uint64_t))off_1E3385010[v39])(&v48, v4 + 24 * v11 + 8);
          }
          *v37 = -1;
          v40 = *v14;
          *v14 = 0;
          v13 = v42;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v8);
            else
              *(_DWORD *)v40 -= 2;
          }
          if (v14 == a3)
            v12 = v26;
        }
        else
        {
          v16 = v4 + 24 * v11;
          v19 = *(_DWORD *)(v16 + 16);
          v18 = (_DWORD *)(v16 + 16);
          v17 = v19;
          if (v19 != -1)
          {
            ((void (*)(char *, uint64_t))off_1E3385010[v17])(&v45, v4 + 24 * v11 + 8);
            v15 = *v14;
          }
          *v18 = -1;
          *v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v8);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEbiEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_biEEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEbiEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_biEEEOSP_EEEDcSH_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEbiEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_biEEEOSP_EEEDcSH_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

char *WTF::Vector<WebCore::AccessibilityObject const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2)
{
  unint64_t v2;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  void *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;

  v2 = a2;
  v4 = *a1;
  if ((unint64_t)*a1 <= a2)
  {
    v5 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v4[8 * v5] > a2)
    {
      v6 = *((unsigned int *)a1 + 2);
      v7 = v6 + (v6 >> 2);
      if (v7 >= 0x10)
        v8 = v7 + 1;
      else
        v8 = 16;
      if (v8 <= v6)
      {
        v11 = *a1;
        return &v11[8 * ((uint64_t)(v2 - (_QWORD)v4) >> 3)];
      }
      if (!(v8 >> 29))
      {
        v9 = (char *)WTF::fastMalloc((WTF *)(8 * v8));
        *((_DWORD *)a1 + 2) = v8;
        *a1 = v9;
        memcpy(v9, v4, 8 * v5);
        v11 = *a1;
        if (v4)
        {
          if (v11 == v4)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v4, v10);
          v11 = *a1;
        }
        return &v11[8 * ((uint64_t)(v2 - (_QWORD)v4) >> 3)];
      }
LABEL_24:
      __break(0xC471u);
      JUMPOUT(0x195635FD4);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 > v12)
  {
    if (v14 >> 29)
      goto LABEL_24;
    v15 = *((unsigned int *)a1 + 3);
    v16 = (char *)WTF::fastMalloc((WTF *)(8 * v14));
    *((_DWORD *)a1 + 2) = v14;
    *a1 = v16;
    memcpy(v16, v4, 8 * v15);
    if (v4)
    {
      if (*a1 == v4)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v4, v17);
    }
  }
  return (char *)v2;
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int *v5;

  if (result[2] > a2)
  {
    v5 = result;
    if (result[3] > a2)
      result = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)result, a2);
    v3 = *(WTF **)v5;
    if (a2)
    {
      if (v5[2])
      {
        v5[2] = a2;
        result = (unsigned int *)WTF::fastRealloc(v3, (void *)(8 * a2));
        *(_QWORD *)v5 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v4 = v5[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v5[2] = a2;
      *(_QWORD *)v5 = result;
      if (result != (unsigned int *)v3)
        result = (unsigned int *)memcpy(result, v3, 8 * v4);
    }
    if (v3)
    {
      if (*(WTF **)v5 == v3)
      {
        *(_QWORD *)v5 = 0;
        v5[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v3, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 12);
  if (v4 != a2)
  {
    v5 = (uint64_t *)(*(_QWORD *)result + 8 * a2);
    v6 = 8 * v4 - 8 * a2;
    do
    {
      result = *v5;
      *v5 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  *(_DWORD *)(v3 + 12) = v2;
  return result;
}

uint64_t WebCore::Accessibility::enumerateDescendants<WebCore::AXCoreObject,WebCore::AccessibilityRenderObject::stringValue(void)::$_0>(uint64_t a1, WTF::StringImpl ***a2)
{
  WTF::StringImpl *v4;
  uint64_t result;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1456))(a1) == 107)
  {
    v4 = **a2;
    if (v4)
      *(_DWORD *)v4 += 2;
    result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1384))(&v19, a1);
    if (v4)
    {
      v6 = *((_DWORD *)v4 + 1);
      if (v19)
      {
LABEL_6:
        v7 = *((_DWORD *)v19 + 1);
LABEL_7:
        if ((v7 | v6) < 0 || (result = (v6 + v7), __OFADD__(v6, v7)))
        {
          v20 = 0;
          goto LABEL_42;
        }
        if (v4)
        {
          v8 = *((_DWORD *)v4 + 4);
          v9 = (v8 >> 2) & 1;
          if (v19 && (v8 & 4) != 0)
            goto LABEL_12;
        }
        else
        {
          if (v19)
          {
LABEL_12:
            v9 = (*((unsigned __int8 *)v19 + 16) >> 2) & 1;
            goto LABEL_13;
          }
          v9 = 1;
        }
LABEL_13:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v4, (uint64_t)v19, &v20);
        v11 = v20;
        if (v20)
        {
          v12 = *a2;
          v20 = 0;
          v13 = *v12;
          *v12 = v11;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v10);
            else
              *(_DWORD *)v13 -= 2;
          }
          v14 = v20;
          v20 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v10);
            else
              *(_DWORD *)v14 -= 2;
          }
          v15 = v19;
          v19 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
            {
              WTF::StringImpl::destroy(v15, v10);
              if (!v4)
                goto LABEL_26;
              goto LABEL_24;
            }
            *(_DWORD *)v15 -= 2;
          }
          if (!v4)
            goto LABEL_26;
LABEL_24:
          if (*(_DWORD *)v4 == 2)
            WTF::StringImpl::destroy(v4, v10);
          else
            *(_DWORD *)v4 -= 2;
          goto LABEL_26;
        }
LABEL_42:
        __break(0xC471u);
        return result;
      }
    }
    else
    {
      v6 = 0;
      if (v19)
        goto LABEL_6;
    }
    v7 = 0;
    goto LABEL_7;
  }
LABEL_26:
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1896))(a1, 1);
  v16 = *(unsigned int *)(result + 12);
  if ((_DWORD)v16)
  {
    v17 = *(uint64_t **)result;
    v18 = 8 * v16;
    do
    {
      result = *v17;
      if (*v17)
        result = WebCore::Accessibility::enumerateDescendants<WebCore::AXCoreObject,WebCore::AccessibilityRenderObject::stringValue(void)::$_0>(result, a2);
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  return result;
}

void WebCore::AccessibilitySpinButton::~AccessibilitySpinButton(WebCore::AccessibilitySpinButton *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v9 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v9)
      {
        v12 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v9));
        v3 = v12;
      }
      v10 = *(WTF **)(v3 + 16);
      if (v10)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v11 = v3;
        WTF::fastFree(v10, a2);
        v3 = v11;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = off_1E337C0A8;
  v6 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v11 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v11)
      {
        v14 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v11));
        v3 = v14;
      }
      v12 = *(WTF **)(v3 + 16);
      if (v12)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v13 = v3;
        WTF::fastFree(v12, a2);
        v3 = v13;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = off_1E337C0A8;
  v6 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
  WTF::fastFree(v9, v10);
}

uint64_t *WebCore::AccessibilitySpinButton::incrementButton(uint64_t *this)
{
  uint64_t *v1;

  v1 = this;
  if (!*((_BYTE *)this + 56))
  {
    this = WebCore::AccessibilitySpinButton::addChildren((WebCore::AccessibilitySpinButton *)this);
    if (!*((_BYTE *)v1 + 56))
      return 0;
  }
  if (*((_DWORD *)v1 + 13))
    return *(uint64_t **)v1[5];
  __break(0xC471u);
  return this;
}

uint64_t *WebCore::AccessibilitySpinButton::addChildren(WebCore::AccessibilitySpinButton *this)
{
  uint64_t *result;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  result = (uint64_t *)WebCore::AccessibilityObject::axObjectCache(this);
  if (result)
  {
    v3 = result;
    *((_BYTE *)this + 56) = 1;
    v4 = WebCore::AXObjectCache::create(result, 105);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 2832))(v4) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1956366FCLL);
    }
    *(_BYTE *)(v4 + 248) = 1;
    v6 = *((_QWORD *)this + 4);
    if (v6)
      goto LABEL_34;
    v6 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = this;
    v7 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v6;
    if (!v7)
      goto LABEL_34;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v5);
    }
    v6 = *((_QWORD *)this + 4);
    if (v6)
    {
LABEL_34:
      do
        v10 = __ldaxr((unsigned int *)v6);
      while (__stlxr(v10 + 1, (unsigned int *)v6));
    }
    v11 = *(unsigned int **)(v4 + 240);
    *(_QWORD *)(v4 + 240) = v6;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v5);
      }
    }
    (*(void (**)(WebCore::AccessibilitySpinButton *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 3072))(this, v4, *((unsigned int *)this + 13), 1);
    v14 = WebCore::AXObjectCache::create(v3, 105);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 2832))(v14) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195636730);
    }
    *(_BYTE *)(v14 + 248) = 0;
    v16 = *((_QWORD *)this + 4);
    if (v16)
      goto LABEL_35;
    v16 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = this;
    v17 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v16;
    if (!v17)
      goto LABEL_35;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v15);
    }
    v16 = *((_QWORD *)this + 4);
    if (v16)
    {
LABEL_35:
      do
        v20 = __ldaxr((unsigned int *)v16);
      while (__stlxr(v20 + 1, (unsigned int *)v16));
    }
    v21 = *(unsigned int **)(v14 + 240);
    *(_QWORD *)(v14 + 240) = v16;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, v15);
      }
    }
    return (uint64_t *)(*(uint64_t (**)(WebCore::AccessibilitySpinButton *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 3072))(this, v14, *((unsigned int *)this + 13), 1);
  }
  return result;
}

uint64_t *WebCore::AccessibilitySpinButton::decrementButton(uint64_t *this)
{
  uint64_t *v1;

  v1 = this;
  if (!*((_BYTE *)this + 56))
  {
    this = WebCore::AccessibilitySpinButton::addChildren((WebCore::AccessibilitySpinButton *)this);
    if (!*((_BYTE *)v1 + 56))
      return 0;
  }
  if (*((_DWORD *)v1 + 13) > 1u)
    return *(uint64_t **)(v1[5] + 8);
  __break(0xC471u);
  return this;
}

uint64_t WebCore::AccessibilitySpinButton::elementRect(WebCore::AccessibilitySpinButton *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF *v14;
  uint64_t v15;

  v1 = *((_QWORD *)this + 31);
  if (!v1)
    goto LABEL_21;
  v1 = *(_QWORD *)(v1 + 8);
  if (!v1)
    goto LABEL_21;
  v3 = *(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v3)
  {
    v1 = 0;
LABEL_21:
    v12 = 0;
    return v12 | v1;
  }
  if ((*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    goto LABEL_26;
  }
  v14 = 0;
  v15 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v3 + 400))(v3, &v14);
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 64);
  if ((v4 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v4 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
LABEL_26:
    JUMPOUT(0x19563692CLL);
  }
  v5 = WebCore::AccessibilityObject::boundingBoxForQuads(v4 & 0xFFFFFFFFFFFFLL, (uint64_t)&v14);
  v7 = v5;
  v8 = HIDWORD(v5);
  if ((int)v5 >= -33554432)
    v9 = ((_DWORD)v5 << 6);
  else
    v9 = 0x80000000;
  if (SHIDWORD(v5) >= -33554432)
    v10 = v8 << 38;
  else
    v10 = 0x8000000000000000;
  v11 = v14;
  if (v14)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    WTF::fastFree(v11, v6);
  }
  if ((int)v8 <= 0x1FFFFFF)
    v1 = v10;
  else
    v1 = 0x7FFFFFFF00000000;
  v12 = 0x7FFFFFFFLL;
  if (v7 <= 0x1FFFFFF)
    v12 = v9;
  return v12 | v1;
}

unint64_t WebCore::AccessibilitySpinButtonPart::elementRect(WebCore::AccessibilitySpinButtonPart *this)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int64_t v5;
  char v6;
  uint64_t v7;
  int v8;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 30) + 8) + 1512))(*(_QWORD *)(*((_QWORD *)this + 30) + 8));
  v3 = HIDWORD(v2);
  v5 = (v4 >> 26) & 0xFFFFFFFFFFFFFFC0;
  if (v4 >> 26 < 0 != v6)
    v5 += 127;
  v7 = v5 >> 7;
  if (v7 <= (uint64_t)0xFFFFFFFF80000000)
    v7 = 0xFFFFFFFF80000000;
  if (v7 >= 0x7FFFFFFF)
    LODWORD(v7) = 0x7FFFFFFF;
  v8 = (HIDWORD(v2) >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(HIDWORD(v2), (_DWORD)v7))
    v8 = HIDWORD(v2) + v7;
  if (!*((_BYTE *)this + 248))
    LODWORD(v3) = v8;
  return v2 | ((unint64_t)v3 << 32);
}

uint64_t WebCore::AccessibilitySpinButtonPart::press(WebCore::AccessibilitySpinButtonPart *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *((_QWORD *)this + 30);
  if (!v1)
    return 0;
  v2 = *(_QWORD **)(v1 + 8);
  if (!v2)
    return 0;
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 2824))(v2);
  if (!(_DWORD)result)
    return result;
  v5 = v2[31];
  if (*((_BYTE *)this + 248))
  {
    if (!v5)
      return 1;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return 1;
    v7 = *(_QWORD *)(v6 + 128);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8))
          return 1;
      }
    }
    if (*(_DWORD *)(v6 + 140) != *(_DWORD *)(v6 + 144))
      return 1;
    v9 = *(_QWORD *)(v6 + 128);
    if (!v9)
      return 1;
    v10 = *(_QWORD **)(v9 + 8);
    if (!v10)
      return 1;
    v11 = 6;
  }
  else
  {
    if (!v5)
      return 1;
    v12 = *(_QWORD *)(v5 + 8);
    if (!v12)
      return 1;
    v13 = *(_QWORD *)(v12 + 128);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          return 1;
      }
    }
    if (*(_DWORD *)(v12 + 140) != *(_DWORD *)(v12 + 144))
      return 1;
    v15 = *(_QWORD *)(v12 + 128);
    if (!v15)
      return 1;
    v10 = *(_QWORD **)(v15 + 8);
    if (!v10)
      return 1;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
  return 1;
}

void WebCore::AccessibilityTable::~AccessibilityTable(WebCore::AccessibilityTable *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3386A58;
  v3 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v17 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v17 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = *((unsigned int *)this + 75);
  v12 = (WTF *)*((_QWORD *)this + 36);
  if ((_DWORD)v11)
  {
    v13 = 16 * v11;
    do
    {
      v14 = *(WTF **)v12;
      if (*(_QWORD *)v12)
      {
        *(_QWORD *)v12 = 0;
        *((_DWORD *)v12 + 2) = 0;
        WTF::fastFree(v14, a2);
      }
      v12 = (WTF *)((char *)v12 + 16);
      v13 -= 16;
    }
    while (v13);
    v12 = (WTF *)*((_QWORD *)this + 36);
  }
  if (v12)
  {
    *((_QWORD *)this + 36) = 0;
    *((_DWORD *)this + 74) = 0;
    WTF::fastFree(v12, a2);
  }
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 272, a2);
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 256, v15);
  WebCore::AccessibilityRenderObject::~AccessibilityRenderObject(this, v16);
}

{
  WTF *v2;
  void *v3;

  WebCore::AccessibilityTable::~AccessibilityTable(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::AccessibilityTable::init(WebCore::AccessibilityTable *this)
{
  uint64_t result;

  *((_BYTE *)this + 57) = (*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)this + 3016))(this);
  result = (*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)this + 3336))(this);
  *((_BYTE *)this + 312) = result;
  return result;
}

uint64_t WebCore::AccessibilityTable::computeIsTableExposableThroughAccessibility(WebCore::AccessibilityTable *this)
{
  WTF::StringImpl **v1;
  WebCore::AccessibilityTable *v2;
  int v3;
  BOOL v4;
  uint64_t *v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  __int16 v29;
  unint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::Node *v36;
  char v37;
  uint64_t v38;
  WebCore::Node *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  WebCore::Node *v43;
  unsigned int v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t i;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  unsigned int v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _BYTE *v86;
  unsigned int *v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  char v91;
  uint64_t v92;
  unsigned int v93;
  const WTF::StringImpl *v94;
  WTF::String *v95;
  __n128 v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  WTF::StringImpl *v100;
  char v101;
  unsigned int v102;
  unsigned int v103;
  __int16 v104;
  unsigned int v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  int v111;
  BOOL v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  WebCore::AccessibilityTable *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  BOOL v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unint64_t v136;
  uint64_t v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unsigned int v142;
  unint64_t v143;
  __n128 *v144;
  int v145;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  unint64_t v150;
  unsigned __int32 v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  WTF::String *v166;
  __n128 v167;
  uint64_t v168;
  uint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  WTF::StringImpl **v179;
  uint64_t v180;
  int v181;
  int v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  int **v186;
  uint64_t v187;
  int *v188;
  int v189;
  int v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  int **v195;
  uint64_t v196;
  int *v197;
  int v198;
  int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  WTF::String *v206;
  __n128 v207;
  uint64_t v208;
  uint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  WTF::String *v212;
  __n128 v213;
  uint64_t v214;
  uint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  WTF::String *v218;
  __n128 v219;
  uint64_t v220;
  uint64_t *v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  _BOOL4 v226;
  int v227;
  int v228;
  _BOOL4 v229;
  int v230;
  int v231;
  unint64_t v232;
  uint64_t v233;
  BOOL v234;
  int v235;
  _BOOL4 v237;
  unsigned int *v238;
  unsigned int v239;
  char *v240;
  char *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  WTF *v247;
  uint64_t v248;
  WTF *v249;
  uint64_t v250;
  WTF *v251;
  uint64_t v252;
  WTF *v253;
  unsigned int *v254;
  unsigned int v255;
  unsigned int v256;
  float v257;
  unsigned int *v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int v263;
  unsigned int v264;
  uint64_t v265;
  WTF *v266;
  unsigned int v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  int v272;
  BOOL v273;
  unsigned int *v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  int v279;
  BOOL v280;
  void **v281;
  void **v282;
  _QWORD *v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  unsigned int v287;
  unsigned int v288;
  uint64_t *v289;
  uint64_t v290;
  WTF *v291;
  unint64_t v292;
  void *v293;
  void *v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unint64_t v304;
  unsigned int *v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  WTF *v311;
  unsigned int v312;
  unsigned int v313;
  uint64_t v314;
  WTF *v315;
  uint64_t v316;
  WTF *v317;
  uint64_t v318;
  WTF *v319;
  unsigned int v320;
  unsigned int *v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int *v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int *v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int *v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int *v333;
  unsigned int v334;
  unsigned int v335;
  int v336;
  char HasRole;
  int v338;
  int v339;
  WTF::StringImpl *v340;
  WTF::StringImpl *v341;
  WTF::StringImpl *v342;
  int v343;
  char v344;
  int v345;
  unsigned int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  int v350;
  int v351;
  uint64_t v352;
  unint64_t v353;
  void *__p[2];
  __int128 v355;
  __int128 v356;
  uint64_t v357;
  unint64_t v358;
  WebCore::Node *v359;
  WebCore::Node *v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  uint64_t v365;
  uint64_t v366;

  v2 = this;
  v366 = *MEMORY[0x1E0C80C00];
  v3 = (*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)this + 2976))(this);
  v4 = (v3 - 122) > 0xC || ((1 << (v3 - 122)) & 0x1101) == 0;
  if (v4 && v3 != 42)
    goto LABEL_34;
  v5 = (uint64_t *)(*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)v2 + 1488))(v2);
  if (!v5)
    goto LABEL_34;
  v7 = (uint64_t)v5;
  v8 = *v5;
  if (!*v5)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = v7;
    v9 = *(unsigned int **)v7;
    *(_QWORD *)v7 = v8;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v6);
      }
      v8 = *(_QWORD *)v7;
      if (!*(_QWORD *)v7)
      {
LABEL_34:
        LOBYTE(v16) = 0;
        return v16 & 1;
      }
    }
  }
  do
    v12 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v12 + 1, (unsigned int *)v8));
  if (!*(_QWORD *)(v8 + 8)
    || ((v13 = (*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)v2 + 2976))(v2),
         (v13 - 122) <= 0xC)
      ? (v14 = ((1 << (v13 - 122)) & 0x1101) == 0)
      : (v14 = 1),
        v14 && v13 != 42))
  {
LABEL_132:
    LOBYTE(v16) = 0;
    goto LABEL_133;
  }
  if ((*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)v2 + 840))(v2))
  {
    v15 = (*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)v2 + 840))(v2);
    LOBYTE(v16) = 1;
    if (WebCore::Node::computeEditability(v15, 0, 1))
      goto LABEL_133;
  }
  v17 = (*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)v2 + 840))(v2);
  if (!v17
    || (*(_WORD *)(v17 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
  {
    v25 = *((_QWORD *)v2 + 31);
    if (!v25)
      goto LABEL_131;
    v26 = *(_QWORD *)(v25 + 8);
    if (!v26)
      goto LABEL_131;
    v27 = *(unsigned __int8 *)(v26 + 46);
    if (v27 != 63 && v27 != 35)
      goto LABEL_131;
    if ((*(_BYTE *)(v26 + 45) & 1) != 0)
      goto LABEL_47;
    v17 = *(_QWORD *)(*(_QWORD *)(v26 + 24) + 8);
    if (!v17)
      goto LABEL_47;
    v29 = *(_WORD *)(v17 + 28);
    if ((v29 & 8) == 0)
    {
      v6 = (__n128 *)"/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/Conte"
                     "nts/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/includ"
                     "e/wtf/TypeCasts.h";
      __break(0xC471u);
      goto LABEL_726;
    }
    if ((v29 & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
    {
LABEL_47:
      v30 = *(unsigned int *)(v26 + 64) | ((unint64_t)*(unsigned __int8 *)(v26 + 68) << 32);
      if (!v30)
        goto LABEL_131;
      v31 = *(_QWORD *)(v30 + 8);
      if (!v31)
        goto LABEL_131;
      if ((*(_BYTE *)(v31 + 45) & 1) != 0)
        goto LABEL_131;
      v17 = *(_QWORD *)(*(_QWORD *)(v31 + 24) + 8);
      if (!v17)
        goto LABEL_131;
      if ((*(_WORD *)(v17 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
      {
        v17 = *(_QWORD *)(v17 + 32);
        if (!v17)
          goto LABEL_131;
        v32 = *(_WORD *)(v17 + 28);
        if ((v32 & 8) == 0)
          goto LABEL_131;
        while ((v32 & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
        {
          v17 = *(_QWORD *)(v17 + 32);
          if (v17)
          {
            v32 = *(_WORD *)(v17 + 28);
            if ((v32 & 8) != 0)
              continue;
          }
          goto LABEL_131;
        }
      }
    }
  }
  v18 = WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v17);
  if (!v18)
    goto LABEL_131;
  v7 = v18;
  do
    v19 = __ldaxr((unsigned int *)v18);
  while (__stlxr(v19 + 1, (unsigned int *)v18));
  v20 = *(_QWORD *)(v18 + 8);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 104);
    if (v21
      && ((v22 = *(_DWORD *)(v21 + 4), (v22 & 1) != 0)
        ? (v23 = *(_QWORD *)(v21 + 40), LODWORD(v24) = *(_DWORD *)(v21 + 52))
        : (v23 = v21 + 32, LODWORD(v24) = v22 >> 5),
          (_DWORD)v24))
    {
      v24 = v24;
      v33 = (uint64_t *)(v23 + 8);
      while (1)
      {
        v34 = *(v33 - 1);
        if (v34 == WebCore::HTMLNames::summaryAttr
          || *(_QWORD *)(v34 + 24) == *(_QWORD *)(WebCore::HTMLNames::summaryAttr + 24)
          && *(_QWORD *)(v34 + 32) == *(_QWORD *)(WebCore::HTMLNames::summaryAttr + 32))
        {
          break;
        }
        v33 += 2;
        if (!--v24)
        {
          v33 = (uint64_t *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v33 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    }
    v35 = *v33;
    if (v35 && *(_DWORD *)(v35 + 4))
      goto LABEL_104;
    WebCore::HTMLTableElement::tHead((unsigned int *)v20, v6, __p);
    v1 = (WTF::StringImpl **)__p[0];
    if (__p[0])
    {
      WebCore::HTMLTableElement::tHead(*(unsigned int **)(v7 + 8), v6, &v360);
      v36 = v360;
      if ((*((_QWORD *)v360 + 8) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*((_QWORD *)v360 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195638DACLL);
        }
        v360 = 0;
        v37 = 1;
LABEL_98:
        if (*((_DWORD *)v36 + 6) == 2)
        {
          if ((*((_WORD *)v36 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v36, v6);
        }
        else
        {
          *((_DWORD *)v36 + 6) -= 2;
        }
LABEL_100:
        v43 = (WebCore::Node *)__p[0];
        __p[0] = 0;
        if (v43)
        {
          if (*((_DWORD *)v43 + 6) == 2)
          {
            if ((*((_WORD *)v43 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v43, v6);
          }
          else
          {
            *((_DWORD *)v43 + 6) -= 2;
          }
        }
        if ((v37 & 1) == 0)
        {
          v48 = *(_QWORD *)(v7 + 8);
          v49 = *(_QWORD *)(v48 + 104);
          if (v49
            && ((v50 = *(_DWORD *)(v49 + 4), (v50 & 1) != 0)
              ? (v51 = *(_QWORD *)(v49 + 40), LODWORD(v52) = *(_DWORD *)(v49 + 52))
              : (v51 = v49 + 32, LODWORD(v52) = v50 >> 5),
                (_DWORD)v52))
          {
            v52 = v52;
            v53 = (uint64_t *)(v51 + 8);
            while (1)
            {
              v54 = *(v53 - 1);
              if (v54 == WebCore::HTMLNames::rulesAttr
                || *(_QWORD *)(v54 + 24) == *(_QWORD *)(WebCore::HTMLNames::rulesAttr + 24)
                && *(_QWORD *)(v54 + 32) == *(_QWORD *)(WebCore::HTMLNames::rulesAttr + 32))
              {
                break;
              }
              v53 += 2;
              if (!--v52)
              {
                v53 = (uint64_t *)MEMORY[0x1E0CBF2F8];
                break;
              }
            }
          }
          else
          {
            v53 = (uint64_t *)MEMORY[0x1E0CBF2F8];
          }
          v55 = *v53;
          if (!v55 || !*(_DWORD *)(v55 + 4))
          {
            v56 = *(_QWORD *)(v48 + 80);
            if (v56)
            {
              while ((*(_WORD *)(v56 + 28) & 0x10) == 0)
              {
                v56 = *(_QWORD *)(v56 + 56);
                if (!v56)
                  goto LABEL_129;
              }
              v65 = *(_QWORD *)(WebCore::HTMLNames::colTag + 24);
              for (i = *(_QWORD *)(*(_QWORD *)(v56 + 96) + 24); i != v65; i = *(_QWORD *)(*(_QWORD *)(v56 + 96) + 24))
              {
                if (i == *(_QWORD *)(WebCore::HTMLNames::colgroupTag + 24))
                  break;
                do
                {
                  v56 = *(_QWORD *)(v56 + 56);
                  if (!v56)
                    goto LABEL_129;
                }
                while ((*(_WORD *)(v56 + 28) & 0x10) == 0);
              }
              goto LABEL_104;
            }
            goto LABEL_129;
          }
        }
        do
LABEL_104:
          v44 = __ldaxr((unsigned int *)v7);
        while (__stlxr(v44 - 1, (unsigned int *)v7));
        LOBYTE(v16) = 1;
        if (v44 == 1)
        {
          atomic_store(1u, (unsigned int *)v7);
          v45 = *(unsigned int *)(v7 + 28);
          if ((_DWORD)v45)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v45));
          v46 = *(WTF **)(v7 + 16);
          if (v46)
          {
            *(_QWORD *)(v7 + 16) = 0;
            *(_DWORD *)(v7 + 24) = 0;
            WTF::fastFree(v46, v6);
          }
          v47 = (WTF *)v7;
LABEL_111:
          WTF::fastFree(v47, v6);
        }
        goto LABEL_133;
      }
    }
    WebCore::HTMLTableElement::tFoot(*(unsigned int **)(v7 + 8), v6, &v363);
    v38 = v363;
    if ((_QWORD)v363
      && (WebCore::HTMLTableElement::tFoot(*(unsigned int **)(v7 + 8), v6, &v359),
          v39 = v359,
          (*((_QWORD *)v359 + 8) & 0xFFFFFFFFFFFFLL) != 0))
    {
      if ((*(_BYTE *)((*((_QWORD *)v359 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195638DCCLL);
      }
      v359 = 0;
      v37 = 1;
    }
    else
    {
      v40 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 80);
      if (v40)
      {
        while ((*(_WORD *)(v40 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v40 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::captionTag + 24))
        {
          v40 = *(_QWORD *)(v40 + 56);
          if (!v40)
            goto LABEL_85;
        }
        v41 = *(_DWORD *)(v40 + 24);
        *(_DWORD *)(v40 + 24) = v41 + 2;
        if (v41)
        {
          *(_DWORD *)(v40 + 24) = v41;
        }
        else if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v40, v6);
        }
        v37 = 1;
      }
      else
      {
LABEL_85:
        v37 = 0;
      }
      if (!v38 || (v39 = v359, v359 = 0, !v39))
      {
LABEL_93:
        v42 = v363;
        *(_QWORD *)&v363 = 0;
        if (v42)
        {
          if (*(_DWORD *)(v42 + 24) == 2)
          {
            if ((*(_WORD *)(v42 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v42, v6);
          }
          else
          {
            *(_DWORD *)(v42 + 24) -= 2;
          }
        }
        if (!v1)
          goto LABEL_100;
        v36 = v360;
        v360 = 0;
        if (!v36)
          goto LABEL_100;
        goto LABEL_98;
      }
    }
    if (*((_DWORD *)v39 + 6) == 2)
    {
      if ((*((_WORD *)v39 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v39, v6);
    }
    else
    {
      *((_DWORD *)v39 + 6) -= 2;
    }
    goto LABEL_93;
  }
  do
  {
LABEL_129:
    v57 = __ldaxr((unsigned int *)v7);
    v58 = v57 - 1;
  }
  while (__stlxr(v58, (unsigned int *)v7));
  if (!v58)
  {
    atomic_store(1u, (unsigned int *)v7);
    v310 = *(unsigned int *)(v7 + 28);
    if ((_DWORD)v310)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v310));
    v311 = *(WTF **)(v7 + 16);
    if (v311)
    {
      *(_QWORD *)(v7 + 16) = 0;
      *(_DWORD *)(v7 + 24) = 0;
      WTF::fastFree(v311, v6);
    }
    WTF::fastFree((WTF *)v7, v6);
  }
LABEL_131:
  v59 = (*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)v2 + 840))(v2);
  if (!v59 || (*(_WORD *)(v59 + 28) & 8) == 0)
    goto LABEL_132;
  v63 = *(_DWORD *)(v59 + 24);
  *(_DWORD *)(v59 + 24) = v63 + 2;
  v64 = *(_QWORD *)(v59 + 96);
  if (v64 == WebCore::HTMLNames::tableTag)
  {
    if (v63)
    {
      *(_DWORD *)(v59 + 24) = v63;
    }
    else if ((*(_WORD *)(v59 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v59, v6);
    }
  }
  else
  {
    if (*(_QWORD *)(v64 + 24) != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
    {
      if (v63)
      {
        LOBYTE(v16) = 0;
        *(_DWORD *)(v59 + 24) = v63;
        goto LABEL_133;
      }
      if ((*(_WORD *)(v59 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v59, v6);
      goto LABEL_132;
    }
    v7 = *(_QWORD *)(v64 + 32);
    v1 = *(WTF::StringImpl ***)(WebCore::HTMLNames::tableTag + 32);
    if (v63)
    {
      *(_DWORD *)(v59 + 24) = v63;
    }
    else if ((*(_WORD *)(v59 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v59, v6);
    }
    if ((WTF::StringImpl **)v7 != v1)
      goto LABEL_132;
  }
  v67 = *WebCore::AccessibilityObject::getAttribute(v2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_colcountAttr);
  if (v67)
  {
    v68 = *(uint64_t **)(v67 + 8);
    v69 = *(unsigned int *)(v67 + 4) | ((unint64_t)((*(_DWORD *)(v67 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v68 = 0;
    v69 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v68, v69, (uint64_t *)__p);
  if (HIDWORD(__p[0]))
    v70 = 0;
  else
    v70 = (int)__p[0];
  LOBYTE(v16) = 1;
  if (v70 == -1 || v70 > 0)
    goto LABEL_133;
  v71 = *WebCore::AccessibilityObject::getAttribute(v2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_rowcountAttr);
  if (v71)
  {
    v72 = *(uint64_t **)(v71 + 8);
    v73 = *(unsigned int *)(v71 + 4) | ((unint64_t)((*(_DWORD *)(v71 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v72 = 0;
    v73 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v72, v73, (uint64_t *)__p);
  v74 = HIDWORD(__p[0]) ? 0 : LODWORD(__p[0]);
  if (v74 == -1 || v74 > 0)
    goto LABEL_133;
  v75 = (*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)v2 + 848))(v2);
  if (v75)
  {
    if ((*(_BYTE *)(v75 + 45) & 2) != 0)
    {
      v309 = *(_QWORD *)(v75 + 32);
      if (v309)
        v75 = *(_QWORD *)(v309 + 8);
      else
        v75 = 0;
    }
    v7 = v75 + 80;
    goto LABEL_167;
  }
  v79 = (*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)v2 + 832))(v2);
  if (v79)
  {
    LOBYTE(__p[0]) = 0;
    LOBYTE(v355) = 0;
    v7 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v79 + 264))(v79, __p);
    if ((_BYTE)v355)
    {
      v81 = (WTF::StringImpl *)__p[1];
      __p[1] = 0;
      if (v81)
      {
        if (*(_DWORD *)v81 == 2)
        {
          WTF::StringImpl::destroy(v81, v80);
          if (!v7)
            goto LABEL_186;
          goto LABEL_167;
        }
        *(_DWORD *)v81 -= 2;
      }
    }
    if (!v7)
      goto LABEL_186;
LABEL_167:
    WebCore::RenderStyle::visitedDependentColor(v7, 61, 0, (uint64_t *)&v358);
    v76 = *(_QWORD *)(v7 + 32);
    v77 = *(float *)(v76 + 8);
    v78 = *(float *)(v76 + 4);
    goto LABEL_187;
  }
LABEL_186:
  v78 = 0;
  v358 = 0x11040000FFFFFFFFLL;
  v77 = 0.0;
LABEL_187:
  v357 = 0;
  v365 = 0;
  v363 = 0u;
  v364 = 0u;
  v355 = 0u;
  v356 = 0u;
  *(_OWORD *)__p = 0u;
  v82 = (*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)v2 + 840))(v2);
  if (v82 && (*(_WORD *)(v82 + 28) & 8) != 0)
  {
    v274 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v82);
    v87 = v274;
    if (v274)
    {
      do
        v275 = __ldaxr(v274);
      while (__stlxr(v275 + 1, v274));
      v85 = (char *)__p[1];
      v86 = (_BYTE *)v355;
      v83 = *((_QWORD *)&v356 + 1);
      v84 = v356;
    }
    else
    {
      v83 = 0;
      v84 = 0;
      v85 = 0;
      v86 = 0;
    }
  }
  else
  {
    v83 = 0;
    v84 = 0;
    v85 = 0;
    v86 = 0;
    v87 = 0;
  }
  v88 = ((v86 - v85) << 6) - 1;
  if (v86 == v85)
    v88 = 0;
  if (v88 == v84 + v83)
  {
    std::deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::__add_back_capacity((uint64_t)__p);
    v83 = *((_QWORD *)&v356 + 1);
    v85 = (char *)__p[1];
    v86 = (_BYTE *)v355;
  }
  if (v86 == v85)
    goto LABEL_726;
  v89 = *(_QWORD *)&v85[((unint64_t)(v356 + v83) >> 6) & 0x3FFFFFFFFFFFFF8];
  if (!v89)
    goto LABEL_726;
  v352 = 0;
  v346 = 0;
  v7 = 0;
  v2 = 0;
  v1 = 0;
  v348 = 0;
  v349 = 0;
  v347 = 0;
  v345 = 0;
  *(_QWORD *)(v89 + 8 * (((_WORD)v356 + (_WORD)v83) & 0x1FF)) = v87;
  *((_QWORD *)&v356 + 1) = v83 + 1;
  if (v78)
    v90 = v77 == 0;
  else
    v90 = 1;
  v91 = !v90;
  v344 = v91;
  v350 = 1;
  v351 = 0;
  v16 = 1;
  while (*((_QWORD *)&v356 + 1))
  {
    v92 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v356 >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * (v356 & 0x1FF));
    if (!v92)
    {
      std::deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::pop_front((uint64_t)__p, v6);
LABEL_208:
      v99 = 1;
      goto LABEL_209;
    }
    do
      v93 = __ldaxr((unsigned int *)v92);
    while (__stlxr(v93 + 1, (unsigned int *)v92));
    std::deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::pop_front((uint64_t)__p, v6);
    v97 = *(_QWORD *)(v92 + 8);
    if (!v97)
      goto LABEL_208;
    v98 = *(_QWORD *)(v97 + 80);
    if (!v98)
      goto LABEL_208;
    while (1)
    {
      v104 = *(_WORD *)(v98 + 28);
      if ((v104 & 8) != 0)
        break;
      v98 = *(_QWORD *)(v98 + 56);
      v99 = 1;
      if (!v98)
        goto LABEL_209;
    }
    v99 = 1;
    v339 = v16;
LABEL_236:
    if ((v104 & 0x10) == 0)
      goto LABEL_488;
    v113 = *(WTF::StringImpl **)(*(_QWORD *)(v98 + 96) + 24);
    if (v113 == *(WTF::StringImpl **)(WebCore::HTMLNames::theadTag + 24))
    {
      if (v351
        || (v125 = WebCore::AXObjectCache::getOrCreate(*(_QWORD *)(v8 + 8), v98, 0)) == 0
        || ((v126 = v125,
             v127 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 1456))(v125),
             v128 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v126 + 1456))(v126),
             v128 != 127)
          ? (v129 = v128 == 44)
          : (v129 = 1),
            v129))
      {
        v351 = 1;
        goto LABEL_488;
      }
      v351 = 1;
      if (v127 == 47 || v127 == 134)
        goto LABEL_488;
      v101 = 0;
      v16 = 0;
      goto LABEL_213;
    }
    v114 = *(WTF::StringImpl **)(WebCore::HTMLNames::tbodyTag + 24);
    if (v113 == *(WTF::StringImpl **)(WebCore::HTMLNames::tfootTag + 24) || v113 == v114)
    {
      if (v113 != v114)
      {
        if (v7 && *(_QWORD *)(v7 + 8))
        {
          do
            v116 = __ldaxr((unsigned int *)v7);
          while (__stlxr(v116 + 1, (unsigned int *)v7));
          v117 = v7;
          goto LABEL_258;
        }
        v119 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v98);
        v117 = (uint64_t)v119;
        if (v119)
        {
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 + 1, v119));
        }
        if (v7)
        {
          do
          {
LABEL_258:
            v121 = __ldaxr((unsigned int *)v7);
            v122 = v121 - 1;
          }
          while (__stlxr(v122, (unsigned int *)v7));
          if (!v122)
          {
            atomic_store(1u, (unsigned int *)v7);
            v246 = *(unsigned int *)(v7 + 28);
            if ((_DWORD)v246)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v246));
            v247 = *(WTF **)(v7 + 16);
            if (v247)
            {
              *(_QWORD *)(v7 + 16) = 0;
              *(_DWORD *)(v7 + 24) = 0;
              WTF::fastFree(v247, v6);
            }
            WTF::fastFree((WTF *)v7, v6);
          }
        }
        v7 = v117;
LABEL_488:
        v340 = (WTF::StringImpl *)v1;
LABEL_489:
        v238 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v98);
        v1 = (WTF::StringImpl **)v238;
        if (v238)
        {
          do
            v239 = __ldaxr(v238);
          while (__stlxr(v239 + 1, v238));
        }
        v240 = (char *)__p[1];
        v241 = (char *)v355;
        if ((void *)v355 == __p[1])
          v242 = 0;
        else
          v242 = (((_QWORD)v355 - (unint64_t)__p[1]) << 6) - 1;
        v243 = *((_QWORD *)&v356 + 1);
        if (v242 == *((_QWORD *)&v356 + 1) + (_QWORD)v356)
        {
          std::deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::__add_back_capacity((uint64_t)__p);
          v243 = *((_QWORD *)&v356 + 1);
          v240 = (char *)__p[1];
          v241 = (char *)v355;
        }
        if (v241 != v240)
        {
          v244 = *(_QWORD *)&v240[((unint64_t)(v356 + v243) >> 6) & 0x3FFFFFFFFFFFFF8];
          if (v244)
          {
            *(_QWORD *)(v244 + 8 * (((_WORD)v356 + (_WORD)v243) & 0x1FF)) = v1;
            *((_QWORD *)&v356 + 1) = v243 + 1;
            v1 = (WTF::StringImpl **)v340;
            goto LABEL_499;
          }
        }
LABEL_726:
        __break(1u);
LABEL_727:
        v267 = v352;
        v268 = 1;
        goto LABEL_606;
      }
      if (v2 && *((_QWORD *)v2 + 1))
      {
        do
          v123 = __ldaxr((unsigned int *)v2);
        while (__stlxr(v123 + 1, (unsigned int *)v2));
        v124 = v2;
        goto LABEL_276;
      }
      v130 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v98);
      v124 = (WebCore::AccessibilityTable *)v130;
      if (v130)
      {
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 + 1, v130));
      }
      if (v2)
      {
        do
        {
LABEL_276:
          v132 = __ldaxr((unsigned int *)v2);
          v133 = v132 - 1;
        }
        while (__stlxr(v133, (unsigned int *)v2));
        if (!v133)
        {
          atomic_store(1u, (unsigned int *)v2);
          v248 = *((unsigned int *)v2 + 7);
          if ((_DWORD)v248)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v2 + 2), (WTF::StringImpl *)(*((_QWORD *)v2 + 2) + 32 * v248));
          v249 = (WTF *)*((_QWORD *)v2 + 2);
          if (v249)
          {
            *((_QWORD *)v2 + 2) = 0;
            *((_DWORD *)v2 + 6) = 0;
            WTF::fastFree(v249, v6);
          }
          WTF::fastFree(v2, v6);
        }
      }
      v2 = v124;
      goto LABEL_488;
    }
    if (v113 == *(WTF::StringImpl **)(WebCore::HTMLNames::trTag + 24))
    {
      if (v1 && v1[1])
      {
        do
          v118 = __ldaxr((unsigned int *)v1);
        while (__stlxr(v118 + 1, (unsigned int *)v1));
        v340 = (WTF::StringImpl *)v1;
        goto LABEL_322;
      }
      if ((*(_QWORD *)(v98 + 16) & 0xFFFFFFFFFFFFLL) == 0)
      {
        v153 = WTF::fastCompactMalloc((WTF *)0x28);
        *(_DWORD *)v153 = 1;
        *(_QWORD *)(v153 + 16) = 0;
        *(_QWORD *)(v153 + 24) = 0;
        *(_QWORD *)(v153 + 8) = v98;
        *(_BYTE *)(v153 + 32) = 0;
        v154 = *(_QWORD *)(v98 + 16);
        *(_QWORD *)(v98 + 16) = v154 & 0xFFFF000000000000 | v153;
        v155 = v154 & 0xFFFFFFFFFFFFLL;
        if ((v154 & 0xFFFFFFFFFFFFLL) != 0)
        {
          do
          {
            v156 = __ldaxr((unsigned int *)v155);
            v157 = v156 - 1;
          }
          while (__stlxr(v157, (unsigned int *)v155));
          if (!v157)
          {
            atomic_store(1u, (unsigned int *)v155);
            v252 = *(unsigned int *)(v155 + 28);
            if ((_DWORD)v252)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v155 + 16), (WTF::StringImpl *)(*(_QWORD *)(v155 + 16) + 32 * v252));
            v253 = *(WTF **)(v155 + 16);
            if (v253)
            {
              *(_QWORD *)(v155 + 16) = 0;
              *(_DWORD *)(v155 + 24) = 0;
              WTF::fastFree(v253, v6);
            }
            WTF::fastFree((WTF *)v155, v6);
          }
        }
      }
      v158 = (unsigned int *)(*(_QWORD *)(v98 + 16) & 0xFFFFFFFFFFFFLL);
      if (v158)
      {
        do
          v159 = __ldaxr(v158);
        while (__stlxr(v159 + 1, v158));
      }
      v340 = (WTF::StringImpl *)v158;
      if (v1)
      {
        do
        {
LABEL_322:
          v160 = __ldaxr((unsigned int *)v1);
          v161 = v160 - 1;
        }
        while (__stlxr(v161, (unsigned int *)v1));
        if (!v161)
        {
          atomic_store(1u, (unsigned int *)v1);
          v250 = *((unsigned int *)v1 + 7);
          if ((_DWORD)v250)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(v1[2], (WTF::StringImpl *)((char *)v1[2] + 32 * v250));
          v251 = v1[2];
          if (v251)
          {
            v1[2] = 0;
            *((_DWORD *)v1 + 6) = 0;
            WTF::fastFree(v251, v6);
          }
          WTF::fastFree((WTF *)v1, v6);
        }
      }
      if (++HIDWORD(v352) < 0x14u)
      {
        if (HIDWORD(v352) >= 2 && v346 > 0x13)
          goto LABEL_579;
      }
      else if (v346 > 1)
      {
LABEL_579:
        v101 = 0;
        v16 = 1;
        v1 = (WTF::StringImpl **)v340;
        goto LABEL_213;
      }
      v162 = *(_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v98, (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_rowindexAttr, (uint64_t)v94, v95, v96);
      if (v162)
      {
        v163 = *(uint64_t **)(v162 + 8);
        v164 = *(unsigned int *)(v162 + 4) | ((unint64_t)((*(_DWORD *)(v162 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v163 = 0;
        v164 = 0x100000000;
      }
      WebCore::parseHTMLInteger(v163, v164, (uint64_t *)&v362);
      if (DWORD1(v362) || (int)v362 <= 0)
      {
        v168 = *(_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v98, (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_colindexAttr, v165, v166, v167);
        if (v168)
        {
          v169 = *(uint64_t **)(v168 + 8);
          v170 = *(unsigned int *)(v168 + 4) | ((unint64_t)((*(_DWORD *)(v168 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v169 = 0;
          v170 = 0x100000000;
        }
        WebCore::parseHTMLInteger(v169, v170, (uint64_t *)&v362);
        if ((DWORD1(v362) || !(_DWORD)v362) && (WebCore::nodeHasRole(v98, (int16x8_t *)"row", 0x100000003) & 1) == 0)
        {
          if (v345 > 4)
            goto LABEL_489;
          v171 = *(_QWORD *)(v98 + 64) & 0xFFFFFFFFFFFFLL;
          if (v171)
          {
            if ((*(_BYTE *)((*(_QWORD *)(v98 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              v171 = *(_QWORD *)((*(_QWORD *)(v98 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
              if (v171)
                v171 = *(_QWORD *)(v171 + 8);
            }
            v172 = v171 + 80;
          }
          else
          {
            if ((*(_QWORD *)(v98 + 72) & 0xFFFFFFFFFFFFLL) == 0)
              goto LABEL_489;
            v172 = *(_QWORD *)((*(_QWORD *)(v98 + 72) & 0xFFFFFFFFFFFFLL) + 0x30);
            if (!v172)
            {
              v172 = *(_QWORD *)((*(_QWORD *)(v98 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
              if (!v172)
                goto LABEL_489;
              v194 = *(_QWORD *)(v172 + 16) & 0x1FLL;
              if (v194 != 26 && v194 != 18)
                goto LABEL_489;
            }
          }
          WebCore::RenderStyle::visitedDependentColor(v172, 61, 0, (uint64_t *)&v353);
          v174 = *((_QWORD *)&v363 + v345);
          if ((v174 & 0x8000000000000) != 0)
          {
            if ((v353 & 0x8000000000000) != 0)
            {
              v259 = (unsigned int *)(v174 & 0xFFFFFFFFFFFFLL);
              v362 = *(_OWORD *)((v174 & 0xFFFFFFFFFFFFLL) + 4);
              v361 = *(_OWORD *)((v353 & 0xFFFFFFFFFFFFLL) + 4);
              if (WebCore::operator==<float,4ul>((float *)&v362, (float *)&v361)
                && HIBYTE(v174) == HIBYTE(v353)
                && BYTE6(v174) == BYTE6(v353))
              {
                if ((v353 & 0x8000000000000) != 0)
                {
                  v262 = (unsigned int *)(v353 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v263 = __ldaxr(v262);
                    v264 = v263 - 1;
                  }
                  while (__stlxr(v264, v262));
                  if (!v264)
                  {
                    atomic_store(1u, v262);
                    WTF::fastFree((WTF *)v262, v173);
                  }
                }
                goto LABEL_346;
              }
            }
            else
            {
              v259 = (unsigned int *)(v174 & 0xFFFFFFFFFFFFLL);
            }
            do
            {
              v260 = __ldaxr(v259);
              v261 = v260 - 1;
            }
            while (__stlxr(v261, v259));
            if (!v261)
            {
              atomic_store(1u, v259);
              WTF::fastFree((WTF *)v259, v173);
            }
LABEL_345:
            *((_QWORD *)&v363 + v345) = v353;
          }
          else if (v174 != v353 || (v353 & 0x8000000000000) != 0)
          {
            goto LABEL_345;
          }
LABEL_346:
          ++v345;
          goto LABEL_489;
        }
      }
      goto LABEL_579;
    }
    v341 = *(WTF::StringImpl **)(WebCore::HTMLNames::thTag + 24);
    if (v113 != *(WTF::StringImpl **)(WebCore::HTMLNames::tdTag + 24)
      && v113 != *(WTF::StringImpl **)(WebCore::HTMLNames::thTag + 24))
    {
      v340 = (WTF::StringImpl *)v1;
      if (v113 != *(WTF::StringImpl **)(WebCore::HTMLNames::tableTag + 24))
        goto LABEL_489;
LABEL_499:
      while (1)
      {
        v98 = *(_QWORD *)(v98 + 56);
        if (!v98)
          break;
        v104 = *(_WORD *)(v98 + 28);
        if ((v104 & 8) != 0)
          goto LABEL_236;
      }
      v16 = v339;
LABEL_209:
      if (!v1)
        goto LABEL_212;
      if (!v92)
        goto LABEL_212;
      v100 = v1[1];
      if (!v100 || *(WTF::StringImpl **)(v92 + 8) != v100 || (v99 & 1) == 0 || !v357)
        goto LABEL_212;
      v105 = *(_DWORD *)(v357 - 8);
      v106 = ((unint64_t)v100 + ~((_QWORD)v100 << 32)) ^ (((unint64_t)v100 + ~((_QWORD)v100 << 32)) >> 22);
      v107 = 9 * ((v106 + ~(v106 << 13)) ^ ((v106 + ~(v106 << 13)) >> 8));
      v108 = (v107 ^ (v107 >> 15)) + ~((v107 ^ (v107 >> 15)) << 27);
      v109 = v105 & ((v108 >> 31) ^ v108);
      v110 = *(WTF::StringImpl **)(v357 + 16 * v109);
      if (v110 != v100)
      {
        v111 = 1;
        while (v110)
        {
          v109 = ((_DWORD)v109 + v111) & v105;
          v110 = *(WTF::StringImpl **)(v357 + 16 * v109);
          ++v111;
          if (v110 == v100)
            goto LABEL_228;
        }
LABEL_212:
        v101 = 1;
        goto LABEL_213;
      }
LABEL_228:
      if (*(_DWORD *)(v357 + 16 * v109 + 8))
        v112 = HIDWORD(v352) > 1;
      else
        v112 = 0;
      if (!v112)
        goto LABEL_212;
      goto LABEL_233;
    }
    LODWORD(v352) = v352 + 1;
    if ((v99 & 1) != 0 && v113 != v341)
      v99 = 0;
    v136 = *(_QWORD *)(v98 + 32);
    if (v136)
    {
      v137 = v357;
      if (v357
        || (WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::expand(&v357, 0), (v137 = v357) != 0))
      {
        v138 = *(_DWORD *)(v137 - 8);
      }
      else
      {
        v138 = 0;
      }
      v139 = (~(v136 << 32) + v136) ^ ((~(v136 << 32) + v136) >> 22);
      v140 = 9 * ((v139 + ~(v139 << 13)) ^ ((v139 + ~(v139 << 13)) >> 8));
      v141 = (v140 ^ (v140 >> 15)) + ~((v140 ^ (v140 >> 15)) << 27);
      v142 = v138 & ((v141 >> 31) ^ v141);
      v6 = (__n128 *)(v137 + 16 * v142);
      v143 = v6->n128_u64[0];
      if (v6->n128_u64[0])
      {
        v144 = 0;
        v145 = 1;
        while (v143 != v136)
        {
          if (v143 == -1)
            v144 = v6;
          v142 = (v142 + v145) & v138;
          v6 = (__n128 *)(v137 + 16 * v142);
          v143 = v6->n128_u64[0];
          ++v145;
          if (!v6->n128_u64[0])
          {
            if (v144)
            {
              v144->n128_u64[0] = 0;
              v144->n128_u64[1] = 0;
              --*(_DWORD *)(v137 - 16);
              v6 = v144;
            }
            goto LABEL_301;
          }
        }
LABEL_310:
        v151 = v6->n128_u32[2];
        v6->n128_u32[2] = v151 + 1;
        v152 = v346;
        if (v151 + 1 > v346)
          v152 = v151 + 1;
        v346 = v152;
        if (HIDWORD(v352) < 0x14)
        {
          if (HIDWORD(v352) >= 2 && v152 > 0x13)
            goto LABEL_233;
        }
        else if (v152 > 1)
        {
          goto LABEL_233;
        }
        goto LABEL_349;
      }
LABEL_301:
      v6->n128_u64[0] = v136;
      v146 = v350;
      if (v113 != v341)
        v146 = 0;
      v350 = v146;
      v6->n128_u32[2] = 0;
      if (v357)
        v147 = *(_DWORD *)(v357 - 12) + 1;
      else
        v147 = 1;
      *(_DWORD *)(v357 - 12) = v147;
      if (v357)
        v148 = *(_DWORD *)(v357 - 12);
      else
        v148 = 0;
      v149 = (*(_DWORD *)(v357 - 16) + v148);
      v150 = *(unsigned int *)(v357 - 4);
      if (v150 > 0x400)
      {
        if (v150 > 2 * v149)
          goto LABEL_310;
      }
      else if (3 * v150 > 4 * v149)
      {
        goto LABEL_310;
      }
      v6 = (__n128 *)WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::expand(&v357, v6);
      goto LABEL_310;
    }
LABEL_349:
    v175 = *(_QWORD *)(v98 + 104);
    if (v175
      && ((v176 = *(unsigned int *)(v175 + 4), (v176 & 1) != 0)
        ? (v177 = *(_QWORD *)(v175 + 40), v178 = *(unsigned int *)(v175 + 52))
        : (v177 = v175 + 32, v178 = v176 >> 5),
          v178))
    {
      v179 = (WTF::StringImpl **)(v177 + 8);
      while (1)
      {
        v180 = (uint64_t)*(v179 - 1);
        if (v180 == WebCore::HTMLNames::headersAttr
          || *(_QWORD *)(v180 + 24) == *(_QWORD *)(WebCore::HTMLNames::headersAttr + 24)
          && *(_QWORD *)(v180 + 32) == *(_QWORD *)(WebCore::HTMLNames::headersAttr + 32))
        {
          break;
        }
        v179 += 2;
        if (!--v178)
          goto LABEL_361;
      }
    }
    else
    {
LABEL_361:
      v179 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    }
    v342 = *v179;
    if (*v179)
    {
      v181 = *(_DWORD *)v342;
      v182 = *((_DWORD *)v342 + 1);
      *(_DWORD *)v342 += 2;
      if (v182)
      {
        if (v181)
        {
          v101 = 0;
          *(_DWORD *)v342 = v181;
          goto LABEL_234;
        }
        WTF::StringImpl::destroy(v342, (WTF::StringImpl *)v6);
LABEL_233:
        v101 = 0;
LABEL_234:
        v16 = 1;
        goto LABEL_213;
      }
    }
    if (v175
      && ((v183 = *(unsigned int *)(v175 + 4), (v183 & 1) != 0)
        ? (v184 = *(_QWORD *)(v175 + 40), v185 = *(unsigned int *)(v175 + 52))
        : (v184 = v175 + 32, v185 = v183 >> 5),
          v185))
    {
      v186 = (int **)(v184 + 8);
      while (1)
      {
        v187 = (uint64_t)*(v186 - 1);
        if (v187 == WebCore::HTMLNames::abbrAttr
          || *(_QWORD *)(v187 + 24) == *(_QWORD *)(WebCore::HTMLNames::abbrAttr + 24)
          && *(_QWORD *)(v187 + 32) == *(_QWORD *)(WebCore::HTMLNames::abbrAttr + 32))
        {
          break;
        }
        v186 += 2;
        if (!--v185)
          goto LABEL_376;
      }
    }
    else
    {
LABEL_376:
      v186 = (int **)MEMORY[0x1E0CBF2F8];
    }
    v188 = *v186;
    if (*v186)
    {
      v189 = v188[1];
      v190 = *v188 + 2;
      *v188 = v190;
      if (v189)
      {
        HasRole = 1;
        goto LABEL_421;
      }
    }
    if (v175
      && ((v191 = *(unsigned int *)(v175 + 4), (v191 & 1) != 0)
        ? (v192 = *(_QWORD *)(v175 + 40), v193 = *(unsigned int *)(v175 + 52))
        : (v192 = v175 + 32, v193 = v191 >> 5),
          v193))
    {
      v195 = (int **)(v192 + 8);
      while (1)
      {
        v196 = (uint64_t)*(v195 - 1);
        if (v196 == WebCore::HTMLNames::axisAttr
          || *(_QWORD *)(v196 + 24) == *(_QWORD *)(WebCore::HTMLNames::axisAttr + 24)
          && *(_QWORD *)(v196 + 32) == *(_QWORD *)(WebCore::HTMLNames::axisAttr + 32))
        {
          break;
        }
        v195 += 2;
        if (!--v193)
          goto LABEL_398;
      }
    }
    else
    {
LABEL_398:
      v195 = (int **)MEMORY[0x1E0CBF2F8];
    }
    v197 = *v195;
    if (*v195 && (v198 = v197[1], v199 = *v197 + 2, *v197 = v199, v198))
    {
      HasRole = 1;
    }
    else
    {
      v200 = *WebCore::HTMLTableCellElement::scope((WebCore::HTMLTableCellElement *)v98, (uint64_t)v6, v94);
      if (v200 && *(_DWORD *)(v200 + 4)
        || (WebCore::nodeHasRole(v98, (int16x8_t *)"gridcell", 0x100000008) & 1) != 0
        || (WebCore::nodeHasRole(v98, (int16x8_t *)"cell", 0x100000004) & 1) != 0
        || (WebCore::nodeHasRole(v98, (int16x8_t *)"columnheader", 0x10000000CLL) & 1) != 0)
      {
        HasRole = 1;
      }
      else
      {
        HasRole = WebCore::nodeHasRole(v98, (int16x8_t *)"rowheader", 0x100000009);
      }
      if (!v197)
        goto LABEL_419;
      v199 = *v197;
    }
    v201 = v199 - 2;
    if (!v201)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)v197, (WTF::StringImpl *)v6);
      if (!v188)
        goto LABEL_423;
      goto LABEL_420;
    }
    *v197 = v201;
LABEL_419:
    if (!v188)
      goto LABEL_423;
LABEL_420:
    v190 = *v188;
LABEL_421:
    if (v190 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v188, (WTF::StringImpl *)v6);
    else
      *v188 = v190 - 2;
LABEL_423:
    if (v342)
    {
      if (*(_DWORD *)v342 == 2)
        WTF::StringImpl::destroy(v342, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v342 -= 2;
    }
    if ((HasRole & 1) != 0)
      goto LABEL_233;
    v202 = *(_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v98, (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_colindexAttr, (uint64_t)v94, v95, v96);
    if (v202)
    {
      v203 = *(uint64_t **)(v202 + 8);
      v204 = *(unsigned int *)(v202 + 4) | ((unint64_t)((*(_DWORD *)(v202 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v203 = 0;
      v204 = 0x100000000;
    }
    WebCore::parseHTMLInteger(v203, v204, (uint64_t *)&v362);
    if (!DWORD1(v362) && (int)v362 > 0)
      goto LABEL_233;
    v208 = *(_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v98, (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_rowindexAttr, v205, v206, v207);
    if (v208)
    {
      v209 = *(uint64_t **)(v208 + 8);
      v210 = *(unsigned int *)(v208 + 4) | ((unint64_t)((*(_DWORD *)(v208 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v209 = 0;
      v210 = 0x100000000;
    }
    WebCore::parseHTMLInteger(v209, v210, (uint64_t *)&v362);
    if (!DWORD1(v362) && (int)v362 > 0)
      goto LABEL_233;
    v214 = *(_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v98, (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_colspanAttr, v211, v212, v213);
    if (v214)
    {
      v215 = *(uint64_t **)(v214 + 8);
      v216 = *(unsigned int *)(v214 + 4) | ((unint64_t)((*(_DWORD *)(v214 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v215 = 0;
      v216 = 0x100000000;
    }
    WebCore::parseHTMLInteger(v215, v216, (uint64_t *)&v362);
    if (!DWORD1(v362) && (int)v362 > 0)
      goto LABEL_233;
    v220 = *(_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v98, (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_rowspanAttr, v217, v218, v219);
    if (v220)
    {
      v221 = *(uint64_t **)(v220 + 8);
      v222 = *(unsigned int *)(v220 + 4) | ((unint64_t)((*(_DWORD *)(v220 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v221 = 0;
      v222 = 0x100000000;
    }
    WebCore::parseHTMLInteger(v221, v222, (uint64_t *)&v362);
    if (!DWORD1(v362) && (int)v362 > 0)
      goto LABEL_233;
    v223 = *(_QWORD *)(v98 + 64) & 0xFFFFFFFFFFFFLL;
    if (v223)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v98 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v98 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8) + 120) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195638FE0);
        }
        goto LABEL_233;
      }
      if ((*(_BYTE *)((*(_QWORD *)(v98 + 64) & 0xFFFFFFFFFFFFLL) + 0x78) & 1) != 0)
        goto LABEL_233;
      v224 = v223 + 80;
      if ((*(_BYTE *)((*(_QWORD *)(v98 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x40) != 0)
      {
        v343 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v223 + 1000))(*(_QWORD *)(v98 + 64) & 0xFFFFFFFFFFFFLL);
        v338 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v223 + 1008))(v223);
        v336 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v223 + 1016))(v223);
        v225 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v223 + 1024))(v223);
        v226 = v343 > 0;
        if (v343 <= 0)
          v227 = v349;
        else
          v227 = v349 + 1;
        if (v338 <= 0)
          v226 = 0;
        v228 = HIDWORD(v348);
        if (v338 > 0)
          v228 = HIDWORD(v348) + 1;
        HIDWORD(v348) = v228;
        LODWORD(v349) = v227;
        v229 = v336 > 0;
        v230 = v348;
        if (v336 > 0)
          v230 = v348 + 1;
        if (v225 <= 0)
          v229 = 0;
        HIDWORD(v349) += v226 || v229;
        v231 = HIDWORD(v347);
        if (v225 > 0)
          v231 = HIDWORD(v347) + 1;
        HIDWORD(v347) = v231;
        LODWORD(v348) = v230;
      }
      goto LABEL_465;
    }
    if ((*(_QWORD *)(v98 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v224 = *(_QWORD *)((*(_QWORD *)(v98 + 72) & 0xFFFFFFFFFFFFLL) + 0x30);
      if (v224
        || (v224 = *(_QWORD *)((*(_QWORD *)(v98 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) != 0
        && ((v245 = *(_QWORD *)(v224 + 16) & 0x1FLL, v245 == 26) || v245 == 18))
      {
        if ((*(_BYTE *)(v224 + 40) & 1) != 0)
          goto LABEL_233;
LABEL_465:
        WebCore::RenderStyle::visitedDependentColor(v224, 61, 0, (uint64_t *)&v362);
        v232 = v362;
        goto LABEL_466;
      }
    }
    v232 = 0x11040000FFFFFFFFLL;
    *(_QWORD *)&v362 = 0x11040000FFFFFFFFLL;
LABEL_466:
    if ((v344 & 1) == 0)
    {
      v233 = v232 & 0x8000000000000;
      goto LABEL_480;
    }
    v233 = v232 & 0x8000000000000;
    if ((v358 & 0x8000000000000) != 0)
    {
      if (!v233)
      {
LABEL_475:
        v234 = ~(_BYTE)v232 == 0;
        goto LABEL_476;
      }
      v254 = (unsigned int *)(v232 & 0xFFFFFFFFFFFFLL);
      v257 = *(float *)((v232 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (*(float *)((v358 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v232 & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v358 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v232 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v358 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v232 & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v358 & 0xFFFFFFFFFFFFLL) + 0x10) != v257
        || HIBYTE(v358) != HIBYTE(v232)
        || BYTE6(v358) != BYTE6(v232))
      {
        goto LABEL_566;
      }
      v237 = HIDWORD(v349) > 9 || v347 > 9;
      v339 |= v237;
      do
      {
LABEL_539:
        v255 = __ldaxr(v254);
        v256 = v255 - 1;
      }
      while (__stlxr(v256, v254));
      if (!v256)
      {
        atomic_store(1u, v254);
        WTF::fastFree((WTF *)v254, v6);
      }
LABEL_487:
      if (!v237)
        goto LABEL_488;
      v101 = 0;
      v16 = v339;
      goto LABEL_213;
    }
    if (v233 || v358 != v232)
    {
      if (!v233)
        goto LABEL_475;
      v257 = *(float *)((v232 & 0xFFFFFFFFFFFFLL) + 0x10);
LABEL_566:
      v234 = v257 == 1.0;
LABEL_476:
      v235 = v234;
      LODWORD(v347) = v347 + (v235 ^ 1);
LABEL_480:
      v237 = HIDWORD(v349) > 9 || v347 > 9;
      v339 |= v237;
      if (v233)
      {
        v254 = (unsigned int *)(v232 & 0xFFFFFFFFFFFFLL);
        goto LABEL_539;
      }
      goto LABEL_487;
    }
    v101 = 0;
    v16 = 1;
    if (HIDWORD(v349) <= 9)
    {
      v340 = (WTF::StringImpl *)v1;
      if (v347 <= 9)
        goto LABEL_489;
    }
LABEL_213:
    if (v92)
    {
      do
      {
        v102 = __ldaxr((unsigned int *)v92);
        v103 = v102 - 1;
      }
      while (__stlxr(v103, (unsigned int *)v92));
      if (!v103)
      {
        atomic_store(1u, (unsigned int *)v92);
        v265 = *(unsigned int *)(v92 + 28);
        if ((_DWORD)v265)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v92 + 16), (WTF::StringImpl *)(*(_QWORD *)(v92 + 16) + 32 * v265));
        v266 = *(WTF **)(v92 + 16);
        if (v266)
        {
          *(_QWORD *)(v92 + 16) = 0;
          *(_DWORD *)(v92 + 24) = 0;
          WTF::fastFree(v266, v6);
        }
        WTF::fastFree((WTF *)v92, v6);
      }
    }
    if ((v101 & 1) == 0)
      goto LABEL_619;
  }
  v267 = v352;
  if (v352 < 2)
    goto LABEL_587;
  if (!v2)
  {
    v268 = v351;
    goto LABEL_606;
  }
  v268 = v351;
  if (v351)
    goto LABEL_606;
  v6 = (__n128 *)*((_QWORD *)v2 + 1);
  if (!v6)
    goto LABEL_606;
  v269 = WebCore::AXObjectCache::getOrCreate(*(_QWORD *)(v8 + 8), (uint64_t)v6, 0);
  if (!v269
    || ((v270 = v269,
         v271 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v269 + 1456))(v269),
         v272 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v270 + 1456))(v270),
         v272 != 127)
      ? (v273 = v272 == 44)
      : (v273 = 1),
        v273))
  {
    v268 = 1;
    v267 = v352;
    goto LABEL_606;
  }
  if (v271 == 134)
    goto LABEL_727;
  v267 = v352;
  v268 = 1;
  if (v271 != 47)
  {
LABEL_587:
    LOBYTE(v16) = 0;
    goto LABEL_619;
  }
LABEL_606:
  if (v7)
  {
    if (!v268)
    {
      v6 = *(__n128 **)(v7 + 8);
      if (v6)
      {
        v276 = WebCore::AXObjectCache::getOrCreate(*(_QWORD *)(v8 + 8), (uint64_t)v6, 0);
        if (v276)
        {
          v277 = v276;
          v278 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 1456))(v276);
          v279 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v277 + 1456))(v277);
          v280 = v279 == 127 || v279 == 44;
          if (!v280 && v278 != 134 && v278 != 47)
            goto LABEL_587;
        }
      }
    }
  }
  if (v350 && HIDWORD(v352) > 1)
  {
    LOBYTE(v16) = 1;
    goto LABEL_619;
  }
  LOBYTE(v16) = 1;
  if (HIDWORD(v349) < v267 >> 1)
  {
    v303 = v267 >> 1;
    if (v349 < v267 >> 1
      && HIDWORD(v348) < v303
      && v348 < v303
      && HIDWORD(v347) < v303
      && v347 < v303)
    {
      if (HIDWORD(v352) < 0x14)
      {
        if (HIDWORD(v352) >= 2 && v346 > 0x13)
          goto LABEL_619;
      }
      else if (v346 > 1)
      {
        goto LABEL_619;
      }
      if (v345 >= 3)
      {
        v304 = v363;
        v305 = (unsigned int *)(v363 & 0xFFFFFFFFFFFFLL);
        if ((v363 & 0x8000000000000) != 0)
        {
          do
            v320 = __ldaxr(v305);
          while (__stlxr(v320 + 1, v305));
        }
        LOBYTE(v16) = 0;
        v306 = HIBYTE(v304);
        v307 = 1;
        while (1)
        {
          v308 = *((_QWORD *)&v363 + v307);
          if ((v307 & 1) != 0)
          {
            if ((v308 & 0x8000000000000) != 0)
            {
              if ((v304 & 0x8000000000000) != 0
                && *(float *)((v308 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v304 & 0xFFFFFFFFFFFFLL) + 4)
                && *(float *)((v308 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v304 & 0xFFFFFFFFFFFFLL) + 8)
                && *(float *)((v308 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v304 & 0xFFFFFFFFFFFFLL) + 0xC)
                && *(float *)((v308 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v304 & 0xFFFFFFFFFFFFLL) + 0x10)
                && HIBYTE(v308) == (_DWORD)v306
                && BYTE6(v304) == BYTE6(v308))
              {
                goto LABEL_720;
              }
            }
            else if ((v304 & 0x8000000000000) == 0 && v308 == v304)
            {
              goto LABEL_619;
            }
          }
          else if ((v308 & 0x8000000000000) != 0)
          {
            if ((v304 & 0x8000000000000) == 0)
              goto LABEL_619;
            if (*(float *)((v308 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v304 & 0xFFFFFFFFFFFFLL) + 4)
              || *(float *)((v308 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v304 & 0xFFFFFFFFFFFFLL) + 8)
              || *(float *)((v308 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v304 & 0xFFFFFFFFFFFFLL) + 0xC)
              || *(float *)((v308 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v304 & 0xFFFFFFFFFFFFLL) + 0x10)
              || HIBYTE(v308) != (_DWORD)v306
              || BYTE6(v304) != BYTE6(v308))
            {
              goto LABEL_720;
            }
          }
          else if ((v304 & 0x8000000000000) != 0 || v308 != v304)
          {
LABEL_719:
            if ((v304 & 0x8000000000000) == 0)
              goto LABEL_619;
            do
            {
LABEL_720:
              v312 = __ldaxr(v305);
              v313 = v312 - 1;
            }
            while (__stlxr(v313, v305));
            if (!v313)
            {
              atomic_store(1u, v305);
              WTF::fastFree((WTF *)v305, v6);
            }
            goto LABEL_619;
          }
          LOBYTE(v16) = ++v307 >= (unint64_t)v345;
          if (v345 == v307)
            goto LABEL_719;
        }
      }
      goto LABEL_587;
    }
  }
LABEL_619:
  v281 = (void **)__p[1];
  v282 = (void **)v355;
  if ((void *)v355 == __p[1])
  {
    v282 = (void **)__p[1];
  }
  else
  {
    v283 = (char *)__p[1] + 8 * ((unint64_t)v356 >> 9);
    v284 = (uint64_t *)(*v283 + 8 * (v356 & 0x1FF));
    v285 = *(_QWORD *)((char *)__p[1] + (((*((_QWORD *)&v356 + 1) + (_QWORD)v356) >> 6) & 0x3FFFFFFFFFFFFF8))
         + 8 * ((*((_QWORD *)&v356 + 1) + v356) & 0x1FF);
    if (v284 != (uint64_t *)v285)
    {
      do
      {
        if (!v284)
          goto LABEL_726;
        v286 = *v284;
        *v284 = 0;
        if (v286)
        {
          do
          {
            v287 = __ldaxr((unsigned int *)v286);
            v288 = v287 - 1;
          }
          while (__stlxr(v288, (unsigned int *)v286));
          if (!v288)
          {
            atomic_store(1u, (unsigned int *)v286);
            v290 = *(unsigned int *)(v286 + 28);
            if ((_DWORD)v290)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v286 + 16), (WTF::StringImpl *)(*(_QWORD *)(v286 + 16) + 32 * v290));
            v291 = *(WTF **)(v286 + 16);
            if (v291)
            {
              *(_QWORD *)(v286 + 16) = 0;
              *(_DWORD *)(v286 + 24) = 0;
              WTF::fastFree(v291, v6);
            }
            WTF::fastFree((WTF *)v286, v6);
          }
        }
        if ((uint64_t *)((char *)++v284 - *v283) == (uint64_t *)4096)
        {
          v289 = (uint64_t *)v283[1];
          ++v283;
          v284 = v289;
        }
      }
      while (v284 != (uint64_t *)v285);
      v281 = (void **)__p[1];
      v282 = (void **)v355;
    }
  }
  v292 = (char *)v282 - (char *)v281;
  if ((unint64_t)((char *)v282 - (char *)v281) >= 0x11)
  {
    do
    {
      v293 = *v281++;
      operator delete(v293);
      v292 -= 8;
    }
    while (v292 > 0x10);
    __p[1] = v281;
  }
  while (v281 != v282)
  {
    v294 = *v281++;
    operator delete(v294);
  }
  if (__p[0])
    operator delete(__p[0]);
  if (!v7)
    goto LABEL_645;
  do
  {
    v295 = __ldaxr((unsigned int *)v7);
    v296 = v295 - 1;
  }
  while (__stlxr(v296, (unsigned int *)v7));
  if (!v296)
  {
    atomic_store(1u, (unsigned int *)v7);
    v314 = *(unsigned int *)(v7 + 28);
    if ((_DWORD)v314)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v314));
    v315 = *(WTF **)(v7 + 16);
    if (v315)
    {
      *(_QWORD *)(v7 + 16) = 0;
      *(_DWORD *)(v7 + 24) = 0;
      WTF::fastFree(v315, v6);
    }
    WTF::fastFree((WTF *)v7, v6);
    if (v2)
    {
      do
      {
LABEL_646:
        v297 = __ldaxr((unsigned int *)v2);
        v298 = v297 - 1;
      }
      while (__stlxr(v298, (unsigned int *)v2));
      if (!v298)
      {
        atomic_store(1u, (unsigned int *)v2);
        v316 = *((unsigned int *)v2 + 7);
        if ((_DWORD)v316)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v2 + 2), (WTF::StringImpl *)(*((_QWORD *)v2 + 2) + 32 * v316));
        v317 = (WTF *)*((_QWORD *)v2 + 2);
        if (v317)
        {
          *((_QWORD *)v2 + 2) = 0;
          *((_DWORD *)v2 + 6) = 0;
          WTF::fastFree(v317, v6);
        }
        WTF::fastFree(v2, v6);
      }
    }
  }
  else
  {
LABEL_645:
    if (v2)
      goto LABEL_646;
  }
  if (v1)
  {
    do
    {
      v299 = __ldaxr((unsigned int *)v1);
      v300 = v299 - 1;
    }
    while (__stlxr(v300, (unsigned int *)v1));
    if (!v300)
    {
      atomic_store(1u, (unsigned int *)v1);
      v318 = *((unsigned int *)v1 + 7);
      if ((_DWORD)v318)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(v1[2], (WTF::StringImpl *)((char *)v1[2] + 32 * v318));
      v319 = v1[2];
      if (v319)
      {
        v1[2] = 0;
        *((_DWORD *)v1 + 6) = 0;
        WTF::fastFree(v319, v6);
      }
      WTF::fastFree((WTF *)v1, v6);
    }
  }
  if ((v365 & 0x8000000000000) != 0)
  {
    v321 = (unsigned int *)(v365 & 0xFFFFFFFFFFFFLL);
    do
    {
      v322 = __ldaxr(v321);
      v323 = v322 - 1;
    }
    while (__stlxr(v323, v321));
    if (!v323)
    {
      atomic_store(1u, v321);
      WTF::fastFree((WTF *)v321, v6);
    }
  }
  if ((*((_QWORD *)&v364 + 1) & 0x8000000000000) != 0)
  {
    v324 = (unsigned int *)(*((_QWORD *)&v364 + 1) & 0xFFFFFFFFFFFFLL);
    do
    {
      v325 = __ldaxr(v324);
      v326 = v325 - 1;
    }
    while (__stlxr(v326, v324));
    if (!v326)
    {
      atomic_store(1u, v324);
      WTF::fastFree((WTF *)v324, v6);
    }
  }
  if ((v364 & 0x8000000000000) != 0)
  {
    v327 = (unsigned int *)(v364 & 0xFFFFFFFFFFFFLL);
    do
    {
      v328 = __ldaxr(v327);
      v329 = v328 - 1;
    }
    while (__stlxr(v329, v327));
    if (!v329)
    {
      atomic_store(1u, v327);
      WTF::fastFree((WTF *)v327, v6);
    }
  }
  if ((*((_QWORD *)&v363 + 1) & 0x8000000000000) != 0)
  {
    v330 = (unsigned int *)(*((_QWORD *)&v363 + 1) & 0xFFFFFFFFFFFFLL);
    do
    {
      v331 = __ldaxr(v330);
      v332 = v331 - 1;
    }
    while (__stlxr(v332, v330));
    if (!v332)
    {
      atomic_store(1u, v330);
      WTF::fastFree((WTF *)v330, v6);
    }
  }
  if ((v363 & 0x8000000000000) != 0)
  {
    v333 = (unsigned int *)(v363 & 0xFFFFFFFFFFFFLL);
    do
    {
      v334 = __ldaxr(v333);
      v335 = v334 - 1;
    }
    while (__stlxr(v335, v333));
    if (!v335)
    {
      atomic_store(1u, v333);
      WTF::fastFree((WTF *)v333, v6);
    }
  }
  if (v357)
    WTF::fastFree((WTF *)(v357 - 16), v6);
  if ((v358 & 0x8000000000000) != 0)
  {
    v47 = (WTF *)(v358 & 0xFFFFFFFFFFFFLL);
    do
    {
      v301 = __ldaxr((unsigned int *)v47);
      v302 = v301 - 1;
    }
    while (__stlxr(v302, (unsigned int *)v47));
    if (!v302)
    {
      atomic_store(1u, (unsigned int *)v47);
      goto LABEL_111;
    }
  }
  do
  {
LABEL_133:
    v60 = __ldaxr((unsigned int *)v8);
    v61 = v60 - 1;
  }
  while (__stlxr(v61, (unsigned int *)v8));
  if (!v61)
  {
    atomic_store(1u, (unsigned int *)v8);
    WTF::fastFree((WTF *)v8, v6);
  }
  return v16 & 1;
}

void WebCore::AccessibilityTable::recomputeIsExposable(WebCore::AccessibilityTable *this)
{
  int v2;
  int v3;
  WebCore::AXObjectCache *v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  (*(void (**)(WebCore::AccessibilityTable *))(*(_QWORD *)this + 1904))(this);
  v2 = *((unsigned __int8 *)this + 312);
  v3 = (*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)this + 3336))(this);
  *((_BYTE *)this + 312) = v3;
  if (v2 != v3)
  {
    v4 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)this + 1488))(this);
    if (v4)
      v5.n128_f64[0] = WebCore::AXObjectCache::handleRoleChanged(v4, this);
    v6 = *((unsigned int *)this + 67);
    if ((_DWORD)v6)
    {
      v7 = (_QWORD *)*((_QWORD *)this + 32);
      v8 = &v7[v6];
      while (1)
      {
        v9 = *v7;
        if (((*(uint64_t (**)(_QWORD, __n128))(*(_QWORD *)*v7 + 48))(*v7, v5) & 1) == 0)
          goto LABEL_14;
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 3056))(v9);
        v10 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 1896))(*v7, 1);
        v11 = *(unsigned int *)(v10 + 12);
        if ((_DWORD)v11)
          break;
LABEL_11:
        if (++v7 == v8)
          goto LABEL_12;
      }
      v12 = *(_QWORD **)v10;
      v13 = 8 * v11;
      while (1)
      {
        v14 = *v12;
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v12 + 48))(*v12) & 1) == 0)
          break;
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 3056))(v14);
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_11;
      }
LABEL_14:
      __break(0xC471u);
      JUMPOUT(0x19563915CLL);
    }
LABEL_12:
    *((_BYTE *)this + 232) = 1;
  }
}

_QWORD *WebCore::AccessibilityTable::cellSlots@<X0>(WebCore::AccessibilityTable *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  result = (_QWORD *)(*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)this + 1904))(this);
  v5 = *((unsigned int *)this + 75);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >> 28)
    {
LABEL_12:
      __break(0xC471u);
      JUMPOUT(0x19563924CLL);
    }
    result = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(a2 + 8) = v5;
    *(_QWORD *)a2 = result;
    v6 = *((unsigned int *)this + 75);
    if ((_DWORD)v6)
    {
      v7 = result;
      v8 = *((_QWORD *)this + 36);
      v9 = v8 + 16 * v6;
      do
      {
        v10 = *(unsigned int *)(v8 + 12);
        *v7 = 0;
        v7[1] = 0;
        *((_DWORD *)v7 + 3) = v10;
        if ((_DWORD)v10)
        {
          if (v10 >> 29)
            goto LABEL_12;
          result = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v10));
          *((_DWORD *)v7 + 2) = v10;
          *v7 = result;
          v11 = *(unsigned int *)(v8 + 12);
          if ((_DWORD)v11)
          {
            v12 = *(uint64_t **)v8;
            v13 = 8 * v11;
            do
            {
              v14 = *v12++;
              *result++ = v14;
              v13 -= 8;
            }
            while (v13);
          }
        }
        v7 += 2;
        v8 += 16;
      }
      while (v8 != v9);
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityTable::clearChildren(WebCore::AccessibilityTable *this)
{
  WTF *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;

  v2 = (WebCore::AccessibilityTable *)((char *)this + 40);
  v3 = (uint64_t *)*((_QWORD *)this + 5);
  v4 = *((unsigned int *)this + 13);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *v3++;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1912))(v6);
      v5 -= 8;
    }
    while (v5);
  }
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v2, 0);
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 232) = 0;
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WebCore::AccessibilityTable *)((char *)this + 256), 0);
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WebCore::AccessibilityTable *)((char *)this + 272), 0);
  if (*((_DWORD *)this + 74))
  {
    v8 = *((unsigned int *)this + 75);
    v9 = (WTF *)*((_QWORD *)this + 36);
    if ((_DWORD)v8)
    {
      v10 = 16 * v8;
      do
      {
        v11 = *(WTF **)v9;
        if (*(_QWORD *)v9)
        {
          *(_QWORD *)v9 = 0;
          *((_DWORD *)v9 + 2) = 0;
          WTF::fastFree(v11, v7);
        }
        v9 = (WTF *)((char *)v9 + 16);
        v10 -= 16;
      }
      while (v10);
      *((_DWORD *)this + 75) = 0;
      v9 = (WTF *)*((_QWORD *)this + 36);
    }
    if (v9)
    {
      *((_QWORD *)this + 36) = 0;
      *((_DWORD *)this + 74) = 0;
      WTF::fastFree(v9, v7);
    }
  }
  result = *((_QWORD *)this + 38);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 1912))(result);
    v14 = *((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = 0;
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (__ldaxr((unsigned __int8 *)v15))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v15))
      {
        goto LABEL_19;
      }
      result = MEMORY[0x19AEA534C](v15);
LABEL_19:
      v17 = *(_QWORD *)(v15 + 8);
      v18 = v17 - 1;
      *(_QWORD *)(v15 + 8) = v17 - 1;
      if (v17 == 1)
      {
        v22 = *(_QWORD *)(v15 + 16);
        v19 = *(_QWORD *)(v15 + 24);
        *(_QWORD *)(v15 + 24) = 0;
        v20 = v22 != 0;
      }
      else
      {
        v19 = 0;
        v20 = 1;
      }
      v21 = __ldxr((unsigned __int8 *)v15);
      if (v21 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v15))
        {
          if (v18)
            return result;
LABEL_27:
          if (v19)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          if (!v20)
            return WTF::fastFree((WTF *)v15, v13);
          return result;
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v15);
      if (v18)
        return result;
      goto LABEL_27;
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityTable::addChildren(WebCore::AccessibilityTable *this)
{
  uint64_t result;
  void *v3;
  unsigned int **v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  WebCore::Node **v16;
  uint64_t v17;
  WebCore::Node *v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  WTF *v71;
  unsigned int v72;
  unsigned int v73;
  WebCore::Node **v74;
  uint64_t v75;
  WebCore::Node *v76;
  char v77;
  uint64_t *v78[4];
  _QWORD v79[4];
  uint64_t *v80;
  _QWORD v81[7];
  uint64_t v82;
  _QWORD v83[3];
  WTF *v84;
  uint64_t v85;
  char v86;
  int v87;
  WebCore::Node **v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE v93[24];
  _BYTE *v94;
  _BYTE v95[24];
  _BYTE *v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 312))
    return WebCore::AccessibilityRenderObject::addChildren(this);
  *((_BYTE *)this + 56) = 1;
  result = (*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)this + 1488))(this);
  if (result)
  {
    v4 = (unsigned int **)result;
    result = *(_QWORD *)result;
    if (result)
      goto LABEL_148;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = v4;
    v5 = *v4;
    *v4 = (unsigned int *)result;
    if (!v5)
      goto LABEL_148;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v3);
    }
    result = (uint64_t)*v4;
    if (*v4)
    {
LABEL_148:
      do
        v8 = __ldaxr((unsigned int *)result);
      while (__stlxr(v8 + 1, (unsigned int *)result));
      v91 = result;
      if (!*(_QWORD *)(result + 8))
      {
        v91 = 0;
        do
        {
LABEL_124:
          v72 = __ldaxr((unsigned int *)result);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, (unsigned int *)result));
        if (!v73)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, v3);
        }
        goto LABEL_127;
      }
      v89 = 0;
      v90 = 0;
      v88 = 0;
      v87 = 0;
      v86 = 0;
      v84 = 0;
      v85 = 0;
      v83[1] = this;
      v83[2] = &v87;
      v82 = 0;
      v83[0] = &v84;
      v81[0] = &v82;
      v81[1] = &v90;
      v81[2] = &v87;
      v81[3] = v83;
      v81[4] = this;
      v81[5] = (char *)&v90 + 4;
      v81[6] = &v84;
      v80 = &v82;
      v9 = operator new(0x20uLL);
      *v9 = &off_1E338C5A8;
      v9[1] = &v80;
      v9[2] = v95;
      v9[3] = v81;
      v96 = v9;
      v79[0] = &v87;
      v79[1] = &v90;
      v79[2] = v83;
      v79[3] = &v84;
      v78[0] = &v91;
      v78[1] = v81;
      v78[2] = (uint64_t *)v95;
      v78[3] = v79;
      v10 = (*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)this + 840))(this);
      v11 = v10;
      if (v10
        && (*(_DWORD *)(v10 + 24) += 2, (*(_WORD *)(v10 + 28) & 0x10) != 0)
        && *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24)
        || (*(unsigned int (**)(WebCore::AccessibilityTable *))(*(_QWORD *)this + 3328))(this))
      {
        v77 = 0;
        v12 = operator new(0x60uLL);
        *v12 = &unk_1E338C5F0;
        v12[1] = &v86;
        v12[2] = &v91;
        v12[3] = this;
        v12[4] = &v77;
        v12[5] = &v84;
        v12[6] = &v80;
        v12[7] = v93;
        v12[8] = v81;
        v12[9] = v79;
        v12[10] = &v88;
        v12[11] = v78;
        v94 = v12;
        if (v11)
        {
          if ((*(_WORD *)(v11 + 28) & 4) != 0)
          {
            v13 = *(_QWORD *)(v11 + 80);
            if (v13)
            {
              *(_DWORD *)(v13 + 24) += 2;
              do
              {
                v92 = v13;
                if (!v94)
                  std::__throw_bad_function_call[abi:sn180100]();
                v14 = v13;
                (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v94 + 48))(v94, &v92);
                v13 = *(_QWORD *)(v13 + 56);
                if (v13)
                  *(_DWORD *)(v13 + 24) += 2;
                if (*(_DWORD *)(v14 + 24) == 2)
                {
                  if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v14, v15);
                }
                else
                {
                  *(_DWORD *)(v14 + 24) -= 2;
                }
              }
              while (v13);
            }
          }
        }
        if (HIDWORD(v89))
        {
          v16 = v88;
          v17 = 8 * HIDWORD(v89);
          do
          {
            v18 = *v16++;
            WebCore::AccessibilityTable::addChildren(void)::$_6::operator()(v78, v18);
            v17 -= 8;
          }
          while (v17);
        }
        if (HIDWORD(v90))
        {
          v19 = 0;
          while (1)
          {
            if (v91)
              v20 = *(uint64_t **)(v91 + 8);
            else
              v20 = 0;
            v21 = WebCore::AXObjectCache::create(v20, 17);
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 2704))(v21) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195639BF4);
            }
            if (*(_DWORD *)(v21 + 248) != v19)
              *(_DWORD *)(v21 + 248) = v19;
            v23 = *((_QWORD *)this + 4);
            if (v23)
              goto LABEL_149;
            v23 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v23 = 1;
            *(_QWORD *)(v23 + 8) = this;
            v24 = (unsigned int *)*((_QWORD *)this + 4);
            *((_QWORD *)this + 4) = v23;
            if (!v24)
              goto LABEL_149;
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, v24);
              WTF::fastFree((WTF *)v24, v22);
            }
            v23 = *((_QWORD *)this + 4);
            if (v23)
            {
LABEL_149:
              do
                v27 = __ldaxr((unsigned int *)v23);
              while (__stlxr(v27 + 1, (unsigned int *)v23));
            }
            v28 = *(unsigned int **)(v21 + 240);
            *(_QWORD *)(v21 + 240) = v23;
            if (v28)
            {
              do
              {
                v29 = __ldaxr(v28);
                v30 = v29 - 1;
              }
              while (__stlxr(v30, v28));
              if (!v30)
              {
                atomic_store(1u, v28);
                WTF::fastFree((WTF *)v28, v22);
              }
            }
            v31 = *(uint64_t **)(v21 + 40);
            v32 = *(unsigned int *)(v21 + 52);
            if ((_DWORD)v32)
            {
              v33 = 8 * v32;
              do
              {
                v34 = *v31++;
                (*(void (**)(uint64_t))(*(_QWORD *)v34 + 1912))(v34);
                v33 -= 8;
              }
              while (v33);
            }
            WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)(v21 + 40), 0);
            *(_BYTE *)(v21 + 56) = 0;
            v35 = *((unsigned int *)this + 71);
            if ((_DWORD)v35 == *((_DWORD *)this + 70))
            {
              v36 = v35 + (v35 >> 2);
              if (v36 >= 0x10)
                v37 = v36 + 1;
              else
                v37 = 16;
              if (v37 <= v35 + 1)
                v38 = v35 + 1;
              else
                v38 = v37;
              if (v38 >> 29)
                goto LABEL_142;
              v39 = (void *)*((_QWORD *)this + 34);
              v40 = (void *)WTF::fastMalloc((WTF *)(8 * v38));
              *((_DWORD *)this + 70) = v38;
              *((_QWORD *)this + 34) = v40;
              memcpy(v40, v39, 8 * v35);
              if (v39)
              {
                if (*((void **)this + 34) == v39)
                {
                  *((_QWORD *)this + 34) = 0;
                  *((_DWORD *)this + 70) = 0;
                }
                WTF::fastFree((WTF *)v39, v41);
              }
              v42 = *((unsigned int *)this + 71);
              v43 = *((_QWORD *)this + 34);
              v44 = *(_QWORD *)(v21 + 8);
              if (__ldaxr((unsigned __int8 *)v44))
              {
                __clrex();
                goto LABEL_78;
              }
              if (__stxr(1u, (unsigned __int8 *)v44))
LABEL_78:
                MEMORY[0x19AEA534C](v44);
              ++*(_QWORD *)(v44 + 8);
              v51 = __ldxr((unsigned __int8 *)v44);
              if (v51 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v44))
                  goto LABEL_84;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_84:
              v49 = (uint64_t *)(v43 + 8 * v42);
              goto LABEL_85;
            }
            v46 = *((_QWORD *)this + 34);
            v47 = *(_QWORD *)(v21 + 8);
            if (__ldaxr((unsigned __int8 *)v47))
              break;
            if (__stxr(1u, (unsigned __int8 *)v47))
              goto LABEL_71;
LABEL_72:
            v49 = (uint64_t *)(v46 + 8 * v35);
            ++*(_QWORD *)(v47 + 8);
            v50 = __ldxr((unsigned __int8 *)v47);
            if (v50 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v47))
                goto LABEL_85;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v47);
LABEL_85:
            *v49 = v21;
            ++*((_DWORD *)this + 71);
            (*(void (**)(WebCore::AccessibilityTable *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 3072))(this, v21, *((unsigned int *)this + 13), 0);
            if (++v19 >= HIDWORD(v90))
              goto LABEL_86;
          }
          __clrex();
LABEL_71:
          MEMORY[0x19AEA534C](v47);
          goto LABEL_72;
        }
LABEL_86:
        v52 = (*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)this + 272))(this);
        (*(void (**)(WebCore::AccessibilityTable *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 3072))(this, v52, *((unsigned int *)this + 13), 0);
        *((_BYTE *)this + 233) = 0;
        v53 = *((unsigned int *)this + 67);
        if ((_DWORD)v53)
        {
          v54 = (_QWORD *)*((_QWORD *)this + 32);
          v55 = &v54[v53];
          while (1)
          {
            v56 = *v54;
            if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v54 + 48))(*v54) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195639C14);
            }
            (*(void (**)(uint64_t))(*(_QWORD *)v56 + 3056))(v56);
            v57 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v54 + 1896))(*v54, 1);
            v58 = *(unsigned int *)(v57 + 12);
            if ((_DWORD)v58)
              break;
LABEL_93:
            if (++v54 == v55)
              goto LABEL_94;
          }
          v59 = *(_QWORD **)v57;
          v60 = 8 * v58;
          while (1)
          {
            v61 = *v59;
            if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v59 + 48))(*v59) & 1) == 0)
              break;
            (*(void (**)(uint64_t))(*(_QWORD *)v61 + 3056))(v61);
            ++v59;
            v60 -= 8;
            if (!v60)
              goto LABEL_93;
          }
LABEL_142:
          __break(0xC471u);
          JUMPOUT(0x195639BB0);
        }
LABEL_94:
        v62 = v94;
        if (v94 == v93)
        {
          v63 = 4;
          v62 = v93;
        }
        else
        {
          if (!v94)
            goto LABEL_100;
          v63 = 5;
        }
        (*(void (**)(void))(*v62 + 8 * v63))();
      }
LABEL_100:
      if (v11)
      {
        if (*(_DWORD *)(v11 + 24) == 2)
        {
          if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v11, v3);
        }
        else
        {
          *(_DWORD *)(v11 + 24) -= 2;
        }
      }
      v64 = v96;
      if (v96 == v95)
      {
        v65 = 4;
        v64 = v95;
      }
      else
      {
        if (!v96)
          goto LABEL_108;
        v65 = 5;
      }
      (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_108:
      if (v82)
        WTF::fastFree((WTF *)(v82 - 16), v3);
      v66 = v84;
      if (HIDWORD(v85))
      {
        v67 = (WTF *)((char *)v84 + 24 * HIDWORD(v85));
        do
        {
          v68 = *(unsigned int **)v66;
          *(_QWORD *)v66 = 0;
          if (v68)
          {
            do
            {
              v69 = __ldaxr(v68);
              v70 = v69 - 1;
            }
            while (__stlxr(v70, v68));
            if (!v70)
            {
              atomic_store(1u, v68);
              WTF::fastFree((WTF *)v68, v3);
            }
          }
          v66 = (WTF *)((char *)v66 + 24);
        }
        while (v66 != v67);
        v66 = v84;
      }
      if (v66)
      {
        v84 = 0;
        LODWORD(v85) = 0;
        WTF::fastFree(v66, v3);
      }
      if (HIDWORD(v89))
      {
        v74 = v88;
        v75 = 8 * HIDWORD(v89);
        do
        {
          v76 = *v74;
          *v74 = 0;
          if (v76)
          {
            if (*((_DWORD *)v76 + 6) == 2)
            {
              if ((*((_WORD *)v76 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v76, v3);
            }
            else
            {
              *((_DWORD *)v76 + 6) -= 2;
            }
          }
          ++v74;
          v75 -= 8;
        }
        while (v75);
      }
      v71 = (WTF *)v88;
      if (v88)
      {
        v88 = 0;
        LODWORD(v89) = 0;
        WTF::fastFree(v71, v3);
      }
      result = v91;
      v91 = 0;
      if (!result)
        goto LABEL_127;
      goto LABEL_124;
    }
  }
LABEL_127:
  *((_BYTE *)this + 233) = 0;
  return result;
}

void WebCore::AccessibilityTable::addChildren(void)::$_6::operator()(uint64_t **a1, WebCore::Node *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t *v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int **v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  WebCore::AccessibilityTableColumn *v54;
  WebCore::AccessibilityObject *v55;
  uint64_t v56;

  if ((*((_WORD *)this + 14) & 0x10) == 0
    || (v6 = *(_QWORD *)(*((_QWORD *)this + 12) + 24), v6 != *(_QWORD *)(WebCore::HTMLNames::theadTag + 24))
    && v6 != *(_QWORD *)(WebCore::HTMLNames::tfootTag + 24)
    && v6 != *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24))
  {
    v4 = **a1;
    if (v4)
      v5 = *(_QWORD *)(v4 + 8);
    else
      v5 = 0;
    v9 = WebCore::AXObjectCache::getOrCreate(v5, (uint64_t)this, 0);
    if (!v9)
      goto LABEL_44;
    v10 = (_QWORD *)v9;
    v11 = *(_QWORD *)(v9 + 8);
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_19;
    }
    MEMORY[0x19AEA534C](v11);
LABEL_19:
    ++*(_QWORD *)(v11 + 8);
    v13 = __ldxr((unsigned __int8 *)v11);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
LABEL_24:
        v14 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v10 + 1896))(v10, 1);
        v15 = *(unsigned int *)(v14 + 12);
        if ((_DWORD)v15)
        {
          v16 = *(uint64_t **)v14;
          v17 = 8 * v15;
          do
          {
            v18 = a1[2];
            v56 = *v16;
            v19 = v18[3];
            if (!v19)
            {
              v54 = (WebCore::AccessibilityTableColumn *)std::__throw_bad_function_call[abi:sn180100]();
              WebCore::AccessibilityTableColumn::setParent(v54, v55);
              return;
            }
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v19 + 48))(v19, &v56);
            ++v16;
            v17 -= 8;
          }
          while (v17);
        }
        v20 = v10[1];
        if (__ldaxr((unsigned __int8 *)v20))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v20))
        {
          goto LABEL_32;
        }
        MEMORY[0x19AEA534C](v20);
LABEL_32:
        v22 = *(_QWORD *)(v20 + 8);
        v23 = v22 - 1;
        *(_QWORD *)(v20 + 8) = v22 - 1;
        if (v22 == 1)
        {
          v53 = *(_QWORD *)(v20 + 16);
          v24 = *(_QWORD *)(v20 + 24);
          *(_QWORD *)(v20 + 24) = 0;
          v25 = v53 != 0;
        }
        else
        {
          v24 = 0;
          v25 = 1;
        }
        v26 = __ldxr((unsigned __int8 *)v20);
        if (v26 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v20))
          {
LABEL_39:
            if (!v23)
            {
              if (v24)
                (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
              if (!v25)
                WTF::fastFree((WTF *)v20, this);
            }
            goto LABEL_44;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v20);
        goto LABEL_39;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    goto LABEL_24;
  }
  v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v7 + 2;
  v8 = *((_QWORD *)this + 10);
  if (!v8)
  {
LABEL_11:
    if (v7)
      goto LABEL_12;
LABEL_95:
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(this, this);
    goto LABEL_44;
  }
  while ((*(_WORD *)(v8 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
  {
    v8 = *(_QWORD *)(v8 + 56);
    if (!v8)
      goto LABEL_11;
  }
  while (1)
  {
    v38 = **a1;
    if (v38)
      v39 = *(_QWORD *)(v38 + 8);
    else
      v39 = 0;
    v40 = WebCore::AXObjectCache::getOrCreate(v39, v8, 0);
    if (!v40)
      goto LABEL_88;
    v41 = (_QWORD *)v40;
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v40 + 400))(v40))
      goto LABEL_88;
    v42 = v41[1];
    if (__ldaxr((unsigned __int8 *)v42))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v42))
    {
      goto LABEL_67;
    }
    MEMORY[0x19AEA534C](v42);
LABEL_67:
    ++*(_QWORD *)(v42 + 8);
    v44 = __ldxr((unsigned __int8 *)v42);
    if (v44 != 1)
    {
      __clrex();
LABEL_71:
      WTF::Lock::unlockSlow((WTF::Lock *)v42);
      goto LABEL_72;
    }
    if (__stlxr(0, (unsigned __int8 *)v42))
      goto LABEL_71;
LABEL_72:
    WebCore::AccessibilityTable::addChildren(void)::$_2::operator()((uint64_t)a1[1], v41);
    v45 = v41[1];
    if (__ldaxr((unsigned __int8 *)v45))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v45))
    {
      goto LABEL_76;
    }
    MEMORY[0x19AEA534C](v45);
LABEL_76:
    v47 = *(_QWORD *)(v45 + 8);
    v48 = v47 - 1;
    *(_QWORD *)(v45 + 8) = v47 - 1;
    if (v47 == 1)
    {
      v52 = *(_QWORD *)(v45 + 16);
      v49 = *(_QWORD *)(v45 + 24);
      *(_QWORD *)(v45 + 24) = 0;
      v50 = v52 != 0;
    }
    else
    {
      v49 = 0;
      v50 = 1;
    }
    v51 = __ldxr((unsigned __int8 *)v45);
    if (v51 != 1)
    {
      __clrex();
LABEL_82:
      WTF::Lock::unlockSlow((WTF::Lock *)v45);
      goto LABEL_83;
    }
    if (__stlxr(0, (unsigned __int8 *)v45))
      goto LABEL_82;
LABEL_83:
    if (!v48)
    {
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
      if (!v50)
        WTF::fastFree((WTF *)v45, this);
    }
LABEL_88:
    v8 = *(_QWORD *)(v8 + 56);
    if (!v8)
      break;
    while ((*(_WORD *)(v8 + 28) & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
    {
      v8 = *(_QWORD *)(v8 + 56);
      if (!v8)
        goto LABEL_94;
    }
  }
LABEL_94:
  v7 = *((_DWORD *)this + 6) - 2;
  if (*((_DWORD *)this + 6) == 2)
    goto LABEL_95;
LABEL_12:
  *((_DWORD *)this + 6) = v7;
LABEL_44:
  v27 = a1[3];
  if (*(_DWORD *)*v27 < *(_DWORD *)v27[1])
  {
    do
    {
      WebCore::AccessibilityTable::addChildren(void)::$_1::operator()(v27[2]);
      v28 = (unsigned int *)v27[1];
      v29 = *(_DWORD *)*v27 + 1;
      *(_DWORD *)*v27 = v29;
    }
    while (v29 < *v28);
  }
  v30 = v27[3];
  if (*(_DWORD *)(v30 + 8))
  {
    v31 = *(_DWORD *)(v30 + 12);
    if (v31)
    {
      v32 = *(unsigned int ***)v30;
      v33 = *(_QWORD *)v30 + 24 * v31;
      do
      {
        v34 = *v32;
        *v32 = 0;
        if (v34)
        {
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            atomic_store(1u, v34);
            WTF::fastFree((WTF *)v34, this);
          }
        }
        v32 += 3;
      }
      while (v32 != (unsigned int **)v33);
      *(_DWORD *)(v30 + 12) = 0;
    }
    v37 = *(WTF **)v30;
    if (*(_QWORD *)v30)
    {
      *(_QWORD *)v30 = 0;
      *(_DWORD *)(v30 + 8) = 0;
      WTF::fastFree(v37, this);
    }
  }
}

WTF *WebCore::AccessibilityTableColumn::setParent(WebCore::AccessibilityTableColumn *this, WebCore::AccessibilityObject *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *result;

  if (a2)
  {
    v4 = *((_QWORD *)a2 + 4);
    if (v4)
      goto LABEL_21;
    v4 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = a2;
    v5 = (unsigned int *)*((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = v4;
    if (!v5)
      goto LABEL_21;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
    v4 = *((_QWORD *)a2 + 4);
    if (v4)
    {
LABEL_21:
      do
        v8 = __ldaxr((unsigned int *)v4);
      while (__stlxr(v8 + 1, (unsigned int *)v4));
    }
  }
  else
  {
    v4 = 0;
  }
  v9 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = v4;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v12 = (uint64_t *)*((_QWORD *)this + 5);
  v13 = *((unsigned int *)this + 13);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    do
    {
      v15 = *v12++;
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 1912))(v15);
      v14 -= 8;
    }
    while (v14);
  }
  result = WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WebCore::AccessibilityTableColumn *)((char *)this + 40), 0);
  *((_BYTE *)this + 56) = 0;
  return result;
}

uint64_t WebCore::AccessibilityTable::headerContainer(WebCore::AccessibilityTable *this)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;

  result = *((_QWORD *)this + 38);
  if (!result)
  {
    result = (*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)this + 1488))(this);
    if (result)
    {
      v3 = WebCore::AXObjectCache::create((uint64_t *)result, 123);
      v4 = (_QWORD *)v3;
      if (v3 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 472))(v3) & 1) == 0)
      {
        result = 105;
        __break(0xC471u);
        return result;
      }
      (*(void (**)(_QWORD *, WebCore::AccessibilityTable *))(*v4 + 3288))(v4, this);
      v6 = v4[1];
      if (__ldaxr((unsigned __int8 *)v6))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v6))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEA534C](v6);
LABEL_9:
      ++*(_QWORD *)(v6 + 8);
      v8 = __ldxr((unsigned __int8 *)v6);
      if (v8 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v6))
        {
LABEL_14:
          v9 = *((_QWORD *)this + 38);
          *((_QWORD *)this + 38) = v4;
          if (!v9)
            return *((_QWORD *)this + 38);
          v10 = *(_QWORD *)(v9 + 8);
          if (__ldaxr((unsigned __int8 *)v10))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v10))
          {
            goto LABEL_19;
          }
          MEMORY[0x19AEA534C](v10);
LABEL_19:
          v12 = *(_QWORD *)(v10 + 8);
          v13 = v12 - 1;
          *(_QWORD *)(v10 + 8) = v12 - 1;
          if (v12 == 1)
          {
            v17 = *(_QWORD *)(v10 + 16);
            v14 = *(_QWORD *)(v10 + 24);
            *(_QWORD *)(v10 + 24) = 0;
            v15 = v17 != 0;
          }
          else
          {
            v14 = 0;
            v15 = 1;
          }
          v16 = __ldxr((unsigned __int8 *)v10);
          if (v16 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v10))
            {
              if (!v13)
                goto LABEL_27;
              return *((_QWORD *)this + 38);
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v10);
          if (!v13)
          {
LABEL_27:
            if (v14)
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
            if (!v15)
              WTF::fastFree((WTF *)v10, v5);
          }
          return *((_QWORD *)this + 38);
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
      goto LABEL_14;
    }
  }
  return result;
}

_QWORD *WebCore::AccessibilityTable::columns@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;

  result = (_QWORD *)((uint64_t (*)(uint64_t **))(*this)[238])(this);
  v5 = *((unsigned int *)this + 71);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      result = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a2 + 8) = v5;
      *(_QWORD *)a2 = result;
      v6 = *((unsigned int *)this + 71);
      if ((_DWORD)v6)
      {
        v7 = result;
        v8 = this[34];
        v9 = 8 * v6;
        while (1)
        {
          v10 = *v8;
          if (!*v8)
            goto LABEL_15;
          v11 = *(_QWORD *)(v10 + 8);
          if (__ldaxr((unsigned __int8 *)v11))
            break;
          if (__stxr(1u, (unsigned __int8 *)v11))
            goto LABEL_9;
LABEL_10:
          ++*(_QWORD *)(v11 + 8);
          v13 = __ldxr((unsigned __int8 *)v11);
          if (v13 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v11))
              goto LABEL_15;
          }
          else
          {
            __clrex();
          }
          result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_15:
          *v7++ = v10;
          ++v8;
          v9 -= 8;
          if (!v9)
            return result;
        }
        __clrex();
LABEL_9:
        result = (_QWORD *)MEMORY[0x19AEA534C](v11);
        goto LABEL_10;
      }
    }
  }
  return result;
}

_QWORD *WebCore::AccessibilityTable::rows@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;

  result = (_QWORD *)((uint64_t (*)(uint64_t **))(*this)[238])(this);
  v5 = *((unsigned int *)this + 67);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      result = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a2 + 8) = v5;
      *(_QWORD *)a2 = result;
      v6 = *((unsigned int *)this + 67);
      if ((_DWORD)v6)
      {
        v7 = result;
        v8 = this[32];
        v9 = 8 * v6;
        while (1)
        {
          v10 = *v8;
          if (!*v8)
            goto LABEL_15;
          v11 = *(_QWORD *)(v10 + 8);
          if (__ldaxr((unsigned __int8 *)v11))
            break;
          if (__stxr(1u, (unsigned __int8 *)v11))
            goto LABEL_9;
LABEL_10:
          ++*(_QWORD *)(v11 + 8);
          v13 = __ldxr((unsigned __int8 *)v11);
          if (v13 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v11))
              goto LABEL_15;
          }
          else
          {
            __clrex();
          }
          result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_15:
          *v7++ = v10;
          ++v8;
          v9 -= 8;
          if (!v9)
            return result;
        }
        __clrex();
LABEL_9:
        result = (_QWORD *)MEMORY[0x19AEA534C](v11);
        goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityTable::columnHeaders@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  int v27;

  result = ((uint64_t (*)(uint64_t **))(*this)[238])(this);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v6 = *((unsigned int *)this + 71);
  v25 = 0;
  v26 = 0;
  v27 = v6;
  if (!(_DWORD)v6)
    return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v5);
  if (v6 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  v7 = WTF::fastMalloc((WTF *)(8 * v6));
  v8 = (_QWORD *)v7;
  v26 = v6;
  v25 = (_QWORD *)v7;
  v9 = *((unsigned int *)this + 71);
  if (!(_DWORD)v9)
  {
    v16 = (_QWORD *)(v7 + 8 * v6);
    while (1)
    {
LABEL_19:
      v24 = 0;
      v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 392))(*v8);
      v24 = v17;
      if (v17)
      {
        v18 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v18 != *(_DWORD *)(a2 + 8))
        {
          v19 = v17;
          v20 = *(_QWORD *)a2;
          v21 = *(_QWORD *)(v17 + 8);
          if (__ldaxr((unsigned __int8 *)v21))
          {
            __clrex();
            goto LABEL_25;
          }
          if (__stxr(1u, (unsigned __int8 *)v21))
LABEL_25:
            MEMORY[0x19AEA534C](v21);
          ++*(_QWORD *)(v21 + 8);
          v23 = __ldxr((unsigned __int8 *)v21);
          if (v23 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v21))
              goto LABEL_31;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v21);
LABEL_31:
          *(_QWORD *)(v20 + 8 * v18) = v19;
          ++*(_DWORD *)(a2 + 12);
          goto LABEL_32;
        }
        WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AXCoreObject*>(a2, &v24);
      }
LABEL_32:
      if (++v8 == v16)
        return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v5);
    }
  }
  v10 = this[34];
  v11 = 8 * v9;
  do
  {
    v12 = *v10;
    if (!*v10)
      goto LABEL_15;
    v13 = *(_QWORD *)(v12 + 8);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_10:
    ++*(_QWORD *)(v13 + 8);
    v15 = __ldxr((unsigned __int8 *)v13);
    if (v15 != 1)
    {
      __clrex();
LABEL_14:
      WTF::Lock::unlockSlow((WTF::Lock *)v13);
      goto LABEL_15;
    }
    if (__stlxr(0, (unsigned __int8 *)v13))
      goto LABEL_14;
LABEL_15:
    *v8++ = v12;
    ++v10;
    v11 -= 8;
  }
  while (v11);
  if (v27)
  {
    v8 = v25;
    v16 = &v25[v27];
    goto LABEL_19;
  }
  return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v5);
}

uint64_t WebCore::AccessibilityTable::rowHeaders@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  int v28;

  ((void (*)(uint64_t **))(*this)[238])(this);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *((unsigned int *)this + 67);
  v26 = 0;
  v27 = 0;
  v28 = v5;
  if (!(_DWORD)v5)
    return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v4);
  if (v5 >> 29)
  {
    __break(0xC471u);
LABEL_37:
    JUMPOUT(0x19563A9ACLL);
  }
  v6 = WTF::fastMalloc((WTF *)(8 * v5));
  v7 = (_QWORD *)v6;
  v27 = v5;
  v26 = (_QWORD *)v6;
  v8 = *((unsigned int *)this + 67);
  if (!(_DWORD)v8)
  {
    v15 = (_QWORD *)(v6 + 8 * v5);
    while (1)
    {
LABEL_19:
      v25 = 0;
      v16 = *v7;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v7 + 400))(*v7) & 1) == 0)
      {
        __break(0xC471u);
        goto LABEL_37;
      }
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 416))(v16);
      v25 = v17;
      if (v17)
      {
        v18 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v18 != *(_DWORD *)(a2 + 8))
        {
          v19 = v17;
          v20 = *(_QWORD *)a2;
          v21 = *(_QWORD *)(v17 + 8);
          if (__ldaxr((unsigned __int8 *)v21))
          {
            __clrex();
            goto LABEL_26;
          }
          if (__stxr(1u, (unsigned __int8 *)v21))
LABEL_26:
            MEMORY[0x19AEA534C](v21);
          ++*(_QWORD *)(v21 + 8);
          v23 = __ldxr((unsigned __int8 *)v21);
          if (v23 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v21))
              goto LABEL_32;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v21);
LABEL_32:
          *(_QWORD *)(v20 + 8 * v18) = v19;
          ++*(_DWORD *)(a2 + 12);
          goto LABEL_33;
        }
        WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AXCoreObject*>(a2, &v25);
      }
LABEL_33:
      if (++v7 == v15)
        return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v4);
    }
  }
  v9 = this[32];
  v10 = 8 * v8;
  do
  {
    v11 = *v9;
    if (!*v9)
      goto LABEL_15;
    v12 = *(_QWORD *)(v11 + 8);
    if (__ldaxr((unsigned __int8 *)v12))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v12))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v12);
LABEL_10:
    ++*(_QWORD *)(v12 + 8);
    v14 = __ldxr((unsigned __int8 *)v12);
    if (v14 != 1)
    {
      __clrex();
LABEL_14:
      WTF::Lock::unlockSlow((WTF::Lock *)v12);
      goto LABEL_15;
    }
    if (__stlxr(0, (unsigned __int8 *)v12))
      goto LABEL_14;
LABEL_15:
    *v7++ = v11;
    ++v9;
    v10 -= 8;
  }
  while (v10);
  if (v28)
  {
    v7 = v26;
    v15 = &v26[v28];
    goto LABEL_19;
  }
  return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v4);
}

uint64_t WebCore::AccessibilityTable::visibleRows@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v13;

  result = ((uint64_t (*)(uint64_t **))(*this)[238])(this);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *((unsigned int *)this + 67);
  if ((_DWORD)v5)
  {
    v6 = this[32];
    v7 = 8 * v5;
    while (1)
    {
      result = *v6;
      if (!*v6)
        goto LABEL_19;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 592))(result);
      if ((result & 1) != 0)
        goto LABEL_19;
      v8 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v8 == *(_DWORD *)(a2 + 8))
      {
        result = (uint64_t)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v8 + 1, (unint64_t)v6);
        v8 = *(unsigned int *)(a2 + 12);
        v9 = *(char **)a2;
        v10 = *(_QWORD *)result;
        if (!*(_QWORD *)result)
          goto LABEL_18;
      }
      else
      {
        v9 = *(char **)a2;
        v10 = *v6;
        if (!*v6)
          goto LABEL_18;
      }
      v11 = *(_QWORD *)(v10 + 8);
      if (__ldaxr((unsigned __int8 *)v11))
        break;
      if (__stxr(1u, (unsigned __int8 *)v11))
        goto LABEL_12;
LABEL_13:
      ++*(_QWORD *)(v11 + 8);
      v13 = __ldxr((unsigned __int8 *)v11);
      if (v13 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v11))
          goto LABEL_18;
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_18:
      *(_QWORD *)&v9[8 * v8] = v10;
      ++*(_DWORD *)(a2 + 12);
LABEL_19:
      ++v6;
      v7 -= 8;
      if (!v7)
        return result;
    }
    __clrex();
LABEL_12:
    result = MEMORY[0x19AEA534C](v11);
    goto LABEL_13;
  }
  return result;
}

uint64_t WebCore::AccessibilityTable::cells@<X0>(WebCore::AccessibilityTable *this@<X0>, char **a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int v26;

  result = (*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)this + 1904))(this);
  *a2 = 0;
  a2[1] = 0;
  v5 = *((unsigned int *)this + 67);
  if (!(_DWORD)v5)
    return result;
  v6 = 0;
  v7 = (_QWORD *)*((_QWORD *)this + 32);
  v8 = &v7[v5];
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 1896))(*v7, 1);
    v9 = *(unsigned int *)(result + 12);
    if (!(_DWORD)v9)
      goto LABEL_31;
    v10 = *(uint64_t **)result;
    v11 = v6 + v9;
    v12 = *((unsigned int *)a2 + 2);
    v13 = *a2;
    if (v6 + v9 > v12)
    {
      v14 = v6;
      v15 = v8;
      v16 = v12 + (v12 >> 2);
      if (v16 >= 0x10)
        v17 = v16 + 1;
      else
        v17 = 16;
      if (v17 <= v11)
        v18 = v11;
      else
        v18 = v17;
      if (v18 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v19 = (char *)WTF::fastMalloc((WTF *)(8 * v18));
      *((_DWORD *)a2 + 2) = v18;
      *a2 = v19;
      result = (uint64_t)memcpy(v19, v13, 8 * v14);
      if (v13)
      {
        v8 = v15;
        if (v19 == v13)
        {
          v19 = 0;
          *a2 = 0;
          *((_DWORD *)a2 + 2) = 0;
        }
        result = WTF::fastFree((WTF *)v13, v20);
        v13 = v19;
      }
      else
      {
        v13 = v19;
        v8 = v15;
      }
      v6 = v14;
    }
    v21 = 8 * v9;
    v22 = &v13[8 * v6];
    do
    {
      v23 = *v10;
      if (!*v10)
        goto LABEL_29;
      v24 = *(_QWORD *)(v23 + 8);
      if (__ldaxr((unsigned __int8 *)v24))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v24))
      {
        goto LABEL_24;
      }
      result = MEMORY[0x19AEA534C](v24);
LABEL_24:
      ++*(_QWORD *)(v24 + 8);
      v26 = __ldxr((unsigned __int8 *)v24);
      if (v26 != 1)
      {
        __clrex();
LABEL_28:
        result = WTF::Lock::unlockSlow((WTF::Lock *)v24);
        goto LABEL_29;
      }
      if (__stlxr(0, (unsigned __int8 *)v24))
        goto LABEL_28;
LABEL_29:
      *(_QWORD *)v22 = v23;
      v22 += 8;
      ++v10;
      v21 -= 8;
    }
    while (v21);
    v6 = v11;
    *((_DWORD *)a2 + 3) = v11;
LABEL_31:
    ++v7;
  }
  while (v7 != v8);
  return result;
}

uint64_t WebCore::AccessibilityTable::columnCount(WebCore::AccessibilityTable *this)
{
  (*(void (**)(WebCore::AccessibilityTable *))(*(_QWORD *)this + 1904))(this);
  return *((unsigned int *)this + 71);
}

uint64_t WebCore::AccessibilityTable::rowCount(WebCore::AccessibilityTable *this)
{
  (*(void (**)(WebCore::AccessibilityTable *))(*(_QWORD *)this + 1904))(this);
  return *((unsigned int *)this + 67);
}

uint64_t WebCore::AccessibilityTable::cellForColumnAndRow(WebCore::AccessibilityTable *this, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  (*(void (**)(WebCore::AccessibilityTable *))(*(_QWORD *)this + 1904))(this);
  if (*((_DWORD *)this + 75) > a3)
  {
    v6 = *((_QWORD *)this + 36) + 16 * a3;
    if (*(_DWORD *)(v6 + 12) > a2)
    {
      v7 = *(_QWORD *)(*(_QWORD *)v6 + 8 * a2);
      if (v7)
      {
        v8 = *(_QWORD *)((*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)this + 1488))(this) + 56);
        if (v8)
        {
          v9 = *(_DWORD *)(v8 - 8);
          v10 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
          v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
          v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
          v13 = v9 & ((v12 >> 31) ^ v12);
          v14 = *(_QWORD *)(v8 + 16 * v13);
          if (v14 == v7)
            return *(_QWORD *)(v8 + 16 * v13 + 8);
          v15 = 1;
          while (v14)
          {
            v13 = ((_DWORD)v13 + v15) & v9;
            v14 = *(_QWORD *)(v8 + 16 * v13);
            ++v15;
            if (v14 == v7)
              return *(_QWORD *)(v8 + 16 * v13 + 8);
          }
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::AccessibilityTable::roleValue(WebCore::AccessibilityTable *this)
{
  int v1;
  unsigned __int8 v2;

  if (*((_BYTE *)this + 312))
  {
    v1 = (*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)this + 2976))(this);
    if (v1 == 42)
      v2 = 42;
    else
      v2 = 122;
    if (v1 == 130)
      return -126;
  }
  else
  {
    return *((unsigned __int8 *)this + 57);
  }
  return v2;
}

uint64_t WebCore::AccessibilityTable::computeAccessibilityIsIgnored(WebCore::AccessibilityTable *this)
{
  uint64_t result;

  result = WebCore::AccessibilityObject::defaultObjectInclusion(this);
  if (result >= 2)
  {
    if (*((_BYTE *)this + 312))
      return 0;
    else
      return WebCore::AccessibilityRenderObject::computeAccessibilityIsIgnored(this);
  }
  return result;
}

WTF::StringImpl *WebCore::AccessibilityTable::labelText(WebCore::AccessibilityTable *a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;

  WebCore::AccessibilityTable::title(a1, &v14);
  result = v14;
  if (v14)
  {
    if (!*((_DWORD *)v14 + 1))
    {
      v14 = 0;
LABEL_10:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      *(_DWORD *)result -= 2;
      return result;
    }
    *(_DWORD *)v14 += 2;
    v12 = result;
    v13 = 7;
    v5 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v5 == *(_DWORD *)(a2 + 8))
    {
      v6 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v5 + 1, (unint64_t)&v12);
      v7 = *(unsigned int *)(a2 + 12);
      v8 = *(_QWORD *)a2 + 16 * v7;
      v9 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      *(_QWORD *)v8 = v9;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v6 + 8);
      v10 = v12;
      *(_DWORD *)(a2 + 12) = v7 + 1;
      v12 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v3);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    else
    {
      v11 = *(_QWORD *)a2 + 16 * v5;
      *(_QWORD *)v11 = result;
      *(_DWORD *)(v11 + 8) = 7;
      *(_DWORD *)(a2 + 12) = v5 + 1;
    }
    result = v14;
    v14 = 0;
    if (result)
      goto LABEL_10;
  }
  return result;
}

WTF::StringImpl *WebCore::AccessibilityTable::title@<X0>(WebCore::AccessibilityTable *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  char v7;
  WTF::StringImpl *result;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  if (!*((_BYTE *)this + 312))
    return (WTF::StringImpl *)WebCore::AccessibilityNodeObject::title(this, a2);
  v4 = (*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)this + 840))(this);
  if (!v4
    || (*(_WORD *)(v4 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24)
    || (v5 = *(_QWORD *)(v4 + 80)) == 0)
  {
LABEL_9:
    v6 = 0;
LABEL_10:
    v7 = 1;
    goto LABEL_16;
  }
  while ((*(_WORD *)(v5 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::captionTag + 24))
  {
    v5 = *(_QWORD *)(v5 + 56);
    if (!v5)
      goto LABEL_9;
  }
  *(_DWORD *)(v5 + 24) += 2;
  result = (WTF::StringImpl *)WebCore::Element::innerText((WebCore::Element *)v5, &v13);
  v6 = v13;
  *a2 = v13;
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  if (!v6)
    goto LABEL_10;
  if (*((_DWORD *)v6 + 1))
    return result;
  v7 = 0;
LABEL_16:
  result = (WTF::StringImpl *)WebCore::AccessibilityNodeObject::title(this, &v13);
  v11 = v13;
  v13 = 0;
  *a2 = v11;
  if ((v7 & 1) == 0)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v10);
      result = v13;
      v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      *(_DWORD *)v6 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityTable::axColumnCount(WebCore::AccessibilityTable *this)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v7;

  v2 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_colcountAttr);
  if (v2)
  {
    v3 = *(uint64_t **)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 4) | ((unint64_t)((*(_DWORD *)(v2 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v3 = 0;
    v4 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v3, v4, &v7);
  if (HIDWORD(v7))
    v5 = 0;
  else
    v5 = v7;
  if (v5 == -1)
    return 0xFFFFFFFFLL;
  if ((signed int)v5 >= *((_DWORD *)this + 71))
    return v5;
  return 0;
}

uint64_t WebCore::AccessibilityTable::axRowCount(WebCore::AccessibilityTable *this)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v7;

  v2 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_rowcountAttr);
  if (v2)
  {
    v3 = *(uint64_t **)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 4) | ((unint64_t)((*(_DWORD *)(v2 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v3 = 0;
    v4 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v3, v4, &v7);
  if (HIDWORD(v7))
    v5 = 0;
  else
    v5 = v7;
  if (v5 == -1)
    return 0xFFFFFFFFLL;
  if ((signed int)v5 >= *((_DWORD *)this + 67))
    return v5;
  return 0;
}

void WebCore::AccessibilityTableCell::~AccessibilityTableCell(WebCore::AccessibilityTableCell *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::AccessibilityRenderObject::~AccessibilityRenderObject(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::AccessibilityTableCell::computeAccessibilityIsIgnored(WebCore::AccessibilityTableCell *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;

  result = WebCore::AccessibilityObject::defaultObjectInclusion(this);
  if (result < 2)
    return result;
  v3 = *((_QWORD *)this + 31);
  if (!v3)
    goto LABEL_5;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_5;
  if (*(_BYTE *)(v4 + 46) != 37)
    goto LABEL_5;
  v8 = *(_QWORD *)(v4 + 32);
  if (!v8)
    goto LABEL_5;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_5;
  if (*(_BYTE *)(v9 + 46) != 39)
    goto LABEL_38;
  v10 = *(_QWORD *)(v9 + 32);
  if (!v10)
    goto LABEL_5;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    goto LABEL_5;
  if (*(_BYTE *)(v11 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x19563B3F4);
  }
  v12 = *(_QWORD *)(v11 + 32);
  if (!v12)
    goto LABEL_5;
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
    goto LABEL_5;
  v14 = *(unsigned __int8 *)(v13 + 46);
  if (v14 != 35 && v14 != 63)
  {
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x19563B3D4);
  }
  if ((*(_BYTE *)(v13 + 45) & 1) == 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8);
    if (v5)
    {
      v15 = *(_WORD *)(v5 + 28);
      if ((v15 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19563B414);
      }
      if ((v15 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24)
        || (WebCore::nodeHasRole(v5, (int16x8_t *)"grid", 0x100000004) & 1) != 0
        || (WebCore::nodeHasRole(v5, (int16x8_t *)"table", 0x100000005) & 1) != 0)
      {
        LODWORD(v5) = 1;
      }
      else
      {
        LODWORD(v5) = WebCore::nodeHasRole(v5, (int16x8_t *)"treegrid", 0x100000008);
      }
    }
    goto LABEL_6;
  }
LABEL_5:
  LODWORD(v5) = 0;
LABEL_6:
  if ((*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 832))(this))
    v6 = 0;
  else
    v6 = (_DWORD)v5 == 0;
  if (v6)
    return 1;
  v7 = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 3328))(this);
  if (v7 && *(_BYTE *)(v7 + 312))
    return 0;
  else
    return WebCore::AccessibilityRenderObject::computeAccessibilityIsIgnored(this);
}

uint64_t WebCore::AccessibilityTableCell::isExposedTableCell(WebCore::AccessibilityTableCell *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 3328))(this);
  if (result)
    return *(_BYTE *)(result + 312) != 0;
  return result;
}

WebCore::AccessibilityTableCell *WebCore::AccessibilityTableCell::parentTable(WebCore::AccessibilityTableCell *this)
{
  WebCore::AccessibilityTableCell *v1;
  WebCore::AXObjectCache *v2;
  WebCore::AXObjectCache *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  WebCore::AccessibilityTableCell *v19;
  uint64_t v20;
  int v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;

  v1 = this;
  v2 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 1488))(this);
  if (!v2)
    return 0;
  v3 = v2;
  ++*((_DWORD *)v2 + 2);
  v4 = *((_QWORD *)v1 + 31);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if (*(_BYTE *)(v5 + 46) == 37)
      {
        v11 = *(_QWORD *)(v5 + 32);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            if (*(_BYTE *)(v12 + 46) != 39)
            {
              __break(0xC471u);
              JUMPOUT(0x19563B76CLL);
            }
            v13 = *(_QWORD *)(v12 + 32);
            if (v13)
            {
              v14 = *(_QWORD *)(v13 + 8);
              if (v14)
              {
                if (*(_BYTE *)(v14 + 46) != 40)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19563B78CLL);
                }
                v15 = *(_QWORD *)(v14 + 32);
                if (v15)
                {
                  v16 = *(unsigned __int8 **)(v15 + 8);
                  if (v16)
                  {
                    v17 = v16[46];
                    if (v17 != 35 && v17 != 63)
                      goto LABEL_65;
                    v18 = WebCore::AXObjectCache::get(v2, (WebCore::RenderObject *)v16);
                    if (v18)
                    {
                      v19 = (WebCore::AccessibilityTableCell *)v18;
                      v20 = *(_QWORD *)(v18 + 8);
                      if (__ldaxr((unsigned __int8 *)v20))
                      {
                        __clrex();
                      }
                      else if (!__stxr(1u, (unsigned __int8 *)v20))
                      {
                        goto LABEL_30;
                      }
                      MEMORY[0x19AEA534C](v20);
LABEL_30:
                      ++*(_QWORD *)(v20 + 8);
                      v22 = __ldxr((unsigned __int8 *)v20);
                      if (v22 == 1)
                      {
                        if (!__stlxr(0, (unsigned __int8 *)v20))
                        {
LABEL_35:
                          if ((*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)v19 + 840))(v19))
                          {
                            if ((*(unsigned int (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)v19 + 64))(v19))
                              v1 = v19;
                            else
                              v1 = 0;
                          }
                          else
                          {
                            while (1)
                            {
                              v24 = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)v1 + 1232))(v1);
                              v1 = (WebCore::AccessibilityTableCell *)v24;
                              if (!v24)
                                break;
                              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 64))(v24))
                              {
                                if (*((_BYTE *)v1 + 312))
                                  break;
                                if ((*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)v1 + 840))(v1))
                                {
                                  v1 = 0;
                                  break;
                                }
                              }
                            }
                          }
                          v25 = *((_QWORD *)v19 + 1);
                          if (__ldaxr((unsigned __int8 *)v25))
                          {
                            __clrex();
                          }
                          else if (!__stxr(1u, (unsigned __int8 *)v25))
                          {
                            goto LABEL_47;
                          }
                          MEMORY[0x19AEA534C](v25);
LABEL_47:
                          v27 = *(_QWORD *)(v25 + 8);
                          v28 = v27 - 1;
                          *(_QWORD *)(v25 + 8) = v27 - 1;
                          if (v27 == 1)
                          {
                            v32 = *(_QWORD *)(v25 + 16);
                            v29 = *(_QWORD *)(v25 + 24);
                            *(_QWORD *)(v25 + 24) = 0;
                            v30 = v32 != 0;
                          }
                          else
                          {
                            v29 = 0;
                            v30 = 1;
                          }
                          v31 = __ldxr((unsigned __int8 *)v25);
                          if (v31 == 1)
                          {
                            if (!__stlxr(0, (unsigned __int8 *)v25))
                            {
LABEL_54:
                              if (!v28)
                              {
                                if (v29)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
                                if (!v30)
                                  WTF::fastFree((WTF *)v25, v23);
                              }
                              goto LABEL_12;
                            }
                          }
                          else
                          {
                            __clrex();
                          }
                          WTF::Lock::unlockSlow((WTF::Lock *)v25);
                          goto LABEL_54;
                        }
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow((WTF::Lock *)v20);
                      goto LABEL_35;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if ((*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)v1 + 840))(v1))
  {
    v6 = *(_QWORD *)v1;
    do
    {
      v7 = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(v6 + 1232))(v1);
      v1 = (WebCore::AccessibilityTableCell *)v7;
      if (!v7)
        goto LABEL_12;
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
      v6 = *(_QWORD *)v1;
    }
    while ((v8 & 1) == 0);
    if (((*(uint64_t (**)(WebCore::AccessibilityTableCell *))(v6 + 64))(v1) & 1) != 0)
      goto LABEL_12;
LABEL_65:
    __break(0xC471u);
    JUMPOUT(0x19563B528);
  }
  v1 = 0;
LABEL_12:
  v9 = *((_DWORD *)v3 + 2);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x19563B744);
  }
  *((_DWORD *)v3 + 2) = v9 - 1;
  return v1;
}

uint64_t WebCore::AccessibilityTableCell::determineAccessibilityRole(WebCore::AccessibilityTableCell *this)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  int v5;
  int v7;
  char v8;

  v2 = WebCore::AccessibilityRenderObject::determineAccessibilityRole(this);
  v3 = v2;
  if ((v2 > 0x2B || ((1 << v2) & 0x80000042000) == 0) && (_DWORD)v2 != 91)
  {
    v4 = (_BYTE *)(*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 3328))(this);
    if (v4)
    {
      if (v4[312])
      {
        v5 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 2976))(v4);
        if (v5 == 130 || v5 == 42)
          LODWORD(v3) = 43;
        else
          LODWORD(v3) = 13;
        v7 = *((unsigned __int8 *)this + 57);
        if (v7 == 134)
          v8 = v3;
        else
          v8 = *((_BYTE *)this + 57);
        *((_BYTE *)this + 57) = v8;
        if (((*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 312))(this) & 1) != 0)
        {
          v3 = 18;
        }
        else if ((*(unsigned int (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 320))(this))
        {
          v3 = 91;
        }
        else
        {
          v3 = v3;
        }
        *((_BYTE *)this + 57) = v7;
      }
    }
  }
  return v3;
}

BOOL WebCore::AccessibilityTableCell::isColumnHeader(WebCore::AccessibilityTableCell *this)
{
  _QWORD *Attribute;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  Attribute = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::scopeAttr);
  if ((MEMORY[0x19AEA53F4](*Attribute, "col", 3) & 1) != 0
    || (MEMORY[0x19AEA53F4](*Attribute, "colgroup", 8) & 1) != 0)
  {
    return 1;
  }
  if ((MEMORY[0x19AEA53F4](*Attribute, "row", 3) & 1) != 0)
    return 0;
  if ((MEMORY[0x19AEA53F4](*Attribute, "rowgroup", 8) & 1) != 0)
    return 0;
  v4 = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 840))(this);
  if (!v4 || (*(_WORD *)(v4 + 28) & 0x10) == 0)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24);
  if (v5 != *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
  {
    if (v5 != *(_QWORD *)(WebCore::HTMLNames::tdTag + 24))
      return 0;
    v7 = *(_QWORD *)(v4 + 32);
    if (!v7)
      return 0;
    if ((*(_WORD *)(v7 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::theadTag + 24))
    {
      v8 = *(_QWORD *)(v7 + 32);
      if (!v8
        || (*(_WORD *)(v8 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::theadTag + 24))
      {
        return 0;
      }
    }
  }
  v10 = *(_QWORD *)((*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 840))(this) + 32);
  if (!v10)
    return 0;
  *(_DWORD *)(v10 + 24) += 2;
  while (1)
  {
    v11 = v10;
    if ((*(_WORD *)(v10 + 28) & 0x10) != 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24);
      v13 = *(_QWORD *)(WebCore::HTMLNames::theadTag + 24);
      v3 = v12 == v13;
      if (v12 == v13 || v12 == *(_QWORD *)(WebCore::HTMLNames::tfootTag + 24))
        goto LABEL_36;
      if (v12 == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24)
        || v12 == *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24))
      {
        break;
      }
    }
    v10 = *(_QWORD *)(v10 + 32);
    if (v10)
      *(_DWORD *)(v10 + 24) += 2;
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v9);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
    v3 = 0;
    if (!v10)
      return v3;
  }
  v14 = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 3328))(this);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 1904))(v14);
  v3 = *((_DWORD *)this + 64) == 0;
LABEL_36:
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, v9);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  return v3;
}

unint64_t WebCore::AccessibilityTableCell::rowIndexRange(WebCore::AccessibilityTableCell *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 3328))(this);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1904))(v2);
  return *((unsigned int *)this + 64) | ((unint64_t)*((unsigned int *)this + 67) << 32);
}

BOOL WebCore::AccessibilityTableCell::isRowHeader(WebCore::AccessibilityTableCell *this)
{
  _QWORD *Attribute;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  Attribute = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::scopeAttr);
  if ((MEMORY[0x19AEA53F4](*Attribute, "row", 3) & 1) != 0
    || (MEMORY[0x19AEA53F4](*Attribute, "rowgroup", 8) & 1) != 0)
  {
    return 1;
  }
  if ((MEMORY[0x19AEA53F4](*Attribute, "col", 3) & 1) != 0)
    return 0;
  if ((MEMORY[0x19AEA53F4](*Attribute, "colgroup", 8) & 1) != 0)
    return 0;
  v4 = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 840))(this);
  if (!v4 || (*(_WORD *)(v4 + 28) & 0x10) == 0)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24);
  if (v5 != *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
  {
    if (v5 != *(_QWORD *)(WebCore::HTMLNames::tdTag + 24))
      return 0;
    v7 = *(_QWORD *)(v4 + 32);
    if (!v7)
      return 0;
    if ((*(_WORD *)(v7 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::theadTag + 24))
    {
      v8 = *(_QWORD *)(v7 + 32);
      if (!v8
        || (*(_WORD *)(v8 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::theadTag + 24))
      {
        return 0;
      }
    }
  }
  v10 = *(_QWORD *)((*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 840))(this) + 32);
  if (!v10)
    return 0;
  *(_DWORD *)(v10 + 24) += 2;
  while (1)
  {
    v11 = v10;
    if ((*(_WORD *)(v10 + 28) & 0x10) == 0)
      goto LABEL_25;
    v12 = *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24);
    if (v12 == *(_QWORD *)(WebCore::HTMLNames::tfootTag + 24)
      || v12 == *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24)
      || v12 == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
    {
      break;
    }
    if (v12 == *(_QWORD *)(WebCore::HTMLNames::theadTag + 24))
    {
      v3 = 0;
      goto LABEL_37;
    }
LABEL_25:
    v10 = *(_QWORD *)(v10 + 32);
    if (v10)
      *(_DWORD *)(v10 + 24) += 2;
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v9);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
    v3 = 0;
    if (!v10)
      return v3;
  }
  v13 = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 3328))(this);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 1904))(v13);
  WebCore::AccessibilityTableCell::colSpan(this);
  v3 = *((_DWORD *)this + 65) == 0;
LABEL_37:
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, v9);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  return v3;
}

unint64_t WebCore::AccessibilityTableCell::columnIndexRange(WebCore::AccessibilityTableCell *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 3328))(this);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1904))(v2);
  return *((unsigned int *)this + 65) | (unint64_t)(WebCore::AccessibilityTableCell::colSpan(this) << 32);
}

_QWORD *WebCore::AccessibilityTableCell::rowGroupAncestorID(WebCore::AccessibilityTableCell *this)
{
  _QWORD *result;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = (_QWORD *)(*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 1232))(this);
  if (!result)
    return result;
  v2 = result;
  while (1)
  {
    v3 = (*(uint64_t (**)(_QWORD *))(*v2 + 840))(v2);
    if (!v3 || (*(_WORD *)(v3 + 28) & 8) == 0)
      goto LABEL_9;
    v5 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 24) = v5 + 2;
    v6 = *(_QWORD *)(v3 + 96);
    if (v6 == WebCore::HTMLNames::theadTag)
    {
      if (v5)
        goto LABEL_56;
      v11 = 1;
    }
    else
    {
      if (*(_QWORD *)(v6 + 24) != *(_QWORD *)(WebCore::HTMLNames::theadTag + 24))
      {
        if (v5)
        {
          *(_DWORD *)(v3 + 24) = v5;
        }
        else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
        }
        goto LABEL_9;
      }
      v14 = *(_QWORD *)(v6 + 32);
      v15 = *(_QWORD *)(WebCore::HTMLNames::theadTag + 32);
      v11 = v14 == v15;
      if (v5)
      {
        *(_DWORD *)(v3 + 24) = v5;
        if (v14 == v15)
          return (_QWORD *)v2[2];
        goto LABEL_9;
      }
    }
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
    if (v11)
      return (_QWORD *)v2[2];
LABEL_9:
    v3 = (*(uint64_t (**)(_QWORD *))(*v2 + 840))(v2);
    if (!v3 || (*(_WORD *)(v3 + 28) & 8) == 0)
      goto LABEL_15;
    v5 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 24) = v5 + 2;
    v8 = *(_QWORD *)(v3 + 96);
    if (v8 == WebCore::HTMLNames::tbodyTag)
    {
      if (v5)
        goto LABEL_56;
      v12 = 1;
    }
    else
    {
      if (*(_QWORD *)(v8 + 24) != *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24))
      {
        if (v5)
        {
          *(_DWORD *)(v3 + 24) = v5;
        }
        else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v3, v7);
        }
        goto LABEL_15;
      }
      v16 = *(_QWORD *)(v8 + 32);
      v17 = *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 32);
      v12 = v16 == v17;
      if (v5)
      {
        *(_DWORD *)(v3 + 24) = v5;
        if (v16 == v17)
          return (_QWORD *)v2[2];
        goto LABEL_15;
      }
    }
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v7);
    if (v12)
      return (_QWORD *)v2[2];
LABEL_15:
    v3 = (*(uint64_t (**)(_QWORD *))(*v2 + 840))(v2);
    if (!v3 || (*(_WORD *)(v3 + 28) & 8) == 0)
      goto LABEL_21;
    v5 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 24) = v5 + 2;
    v10 = *(_QWORD *)(v3 + 96);
    if (v10 == WebCore::HTMLNames::tfootTag)
      break;
    if (*(_QWORD *)(v10 + 24) != *(_QWORD *)(WebCore::HTMLNames::tfootTag + 24))
    {
      if (v5)
      {
        *(_DWORD *)(v3 + 24) = v5;
      }
      else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v3, v9);
      }
      goto LABEL_21;
    }
    v18 = *(_QWORD *)(v10 + 32);
    v19 = *(_QWORD *)(WebCore::HTMLNames::tfootTag + 32);
    v13 = v18 == v19;
    if (v5)
    {
      *(_DWORD *)(v3 + 24) = v5;
      if (v18 == v19)
        return (_QWORD *)v2[2];
      goto LABEL_21;
    }
LABEL_37:
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v9);
    if (v13)
      return (_QWORD *)v2[2];
LABEL_21:
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v2 + 1232))(v2);
    v2 = result;
    if (!result)
      return result;
  }
  if (!v5)
  {
    v13 = 1;
    goto LABEL_37;
  }
LABEL_56:
  *(_DWORD *)(v3 + 24) = v5;
  return (_QWORD *)v2[2];
}

_QWORD *WebCore::AccessibilityTableCell::expandedTextValue@<X0>(WebCore::AccessibilityTableCell *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v4;

  result = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::abbrAttr);
  v4 = (_DWORD *)*result;
  if (*result)
    *v4 += 2;
  *a2 = v4;
  return result;
}

BOOL WebCore::AccessibilityTableCell::supportsExpandedTextValue(WebCore::AccessibilityTableCell *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 840))(this);
  if (v2
    && (*(_WORD *)(v2 + 28) & 0x10) != 0
    && ((v3 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24), v3 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
     || v3 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24)
     && (v5 = *(_QWORD *)(v2 + 32)) != 0
     && ((*(_WORD *)(v5 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::theadTag + 24)
      || (v6 = *(_QWORD *)(v5 + 32)) != 0
      && (*(_WORD *)(v6 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::theadTag + 24))))
  {
    return WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::abbrAttr);
  }
  else
  {
    return 0;
  }
}

WebCore::AccessibilityObject *WebCore::AccessibilityTableCell::columnHeaders@<X0>(WebCore::AccessibilityTableCell *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::AccessibilityObject *result;
  WebCore::AccessibilityObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  WebCore::AccessibilityObject **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebCore::AccessibilityObject *v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  uint64_t v20;
  WebCore::AccessibilityObject **v21;
  WebCore::AccessibilityObject *v22;
  uint64_t v23;
  uint64_t v25;
  WebCore::AccessibilityObject **v26;
  WebCore::AccessibilityObject *v27;
  uint64_t v28;
  int v30;
  int v31;
  WebCore::AccessibilityObject *v32;
  unsigned int v33;
  WebCore::AccessibilityObject *v34;

  result = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 3328))(this);
  if (result)
  {
    v5 = result;
    result = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityTableCell *, uint64_t))(*(_QWORD *)this + 984))(this, 13);
    if (!*(_DWORD *)(a2 + 12))
    {
      v6 = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 3328))(this);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1904))(v6);
      v7 = *((_DWORD *)this + 64);
      v8 = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 3328))(this);
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 1904))(v8);
      result = (WebCore::AccessibilityObject *)WebCore::AccessibilityTableCell::colSpan(this);
      if (v7)
      {
        v9 = 0;
        v10 = *((unsigned int *)this + 65);
        do
        {
          v34 = 0;
          result = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *, uint64_t, uint64_t))(*(_QWORD *)v5 + 240))(v5, v10, v9);
          v34 = result;
          if (result)
            v11 = result == this;
          else
            v11 = 1;
          if (v11)
            goto LABEL_53;
          v12 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v12)
          {
            v13 = *(WebCore::AccessibilityObject ***)a2;
            while (*v13 != result)
            {
              ++v13;
              if (!--v12)
                goto LABEL_17;
            }
            goto LABEL_53;
          }
LABEL_17:
          v14 = (WTF::StringImpl *)*WebCore::AccessibilityObject::getAttribute(result, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::scopeAttr);
          if (v14)
          {
            *(_DWORD *)v14 += 2;
            if (MEMORY[0x19AEA53F4](v14, "colgroup", 8) && (v16 = v34) != 0)
            {
              v17 = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 352))(this);
              result = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v16 + 352))(v16);
              v19 = HIDWORD(result) + (_DWORD)result;
              if (*(_DWORD *)v14 == 2)
                result = (WebCore::AccessibilityObject *)WTF::StringImpl::destroy(v14, v18);
              else
                *(_DWORD *)v14 -= 2;
              if (v19 >= v17)
              {
LABEL_23:
                v20 = *(unsigned int *)(a2 + 12);
                if ((_DWORD)v20 != *(_DWORD *)(a2 + 8))
                {
                  v21 = *(WebCore::AccessibilityObject ***)a2;
                  v22 = v34;
                  if (v34)
                  {
                    v23 = *((_QWORD *)v34 + 1);
                    if (__ldaxr((unsigned __int8 *)v23))
                    {
                      __clrex();
                      goto LABEL_45;
                    }
                    if (__stxr(1u, (unsigned __int8 *)v23))
LABEL_45:
                      result = (WebCore::AccessibilityObject *)MEMORY[0x19AEA534C](v23);
                    ++*(_QWORD *)(v23 + 8);
                    v31 = __ldxr((unsigned __int8 *)v23);
                    if (v31 == 1)
                    {
                      if (!__stlxr(0, (unsigned __int8 *)v23))
                        goto LABEL_51;
                    }
                    else
                    {
                      __clrex();
                    }
                    result = (WebCore::AccessibilityObject *)WTF::Lock::unlockSlow((WTF::Lock *)v23);
                  }
LABEL_51:
                  v21[v20] = v22;
                  goto LABEL_52;
                }
                goto LABEL_31;
              }
            }
            else if (*(_DWORD *)v14 == 2)
            {
              WTF::StringImpl::destroy(v14, v15);
            }
            else
            {
              *(_DWORD *)v14 -= 2;
            }
          }
          else if ((MEMORY[0x19AEA53F4](0, "colgroup", 8) & 1) != 0)
          {
            v32 = v34;
            if (v34)
            {
              v33 = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 352))(this);
              result = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v32 + 352))(v32);
              if (HIDWORD(result) + (int)result >= v33)
                goto LABEL_23;
            }
          }
          result = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v34 + 312))(v34);
          if ((_DWORD)result)
          {
            v25 = *(unsigned int *)(a2 + 12);
            if ((_DWORD)v25 != *(_DWORD *)(a2 + 8))
            {
              v26 = *(WebCore::AccessibilityObject ***)a2;
              v27 = v34;
              if (!v34)
                goto LABEL_42;
              v28 = *((_QWORD *)v34 + 1);
              if (__ldaxr((unsigned __int8 *)v28))
              {
                __clrex();
                goto LABEL_36;
              }
              if (__stxr(1u, (unsigned __int8 *)v28))
LABEL_36:
                result = (WebCore::AccessibilityObject *)MEMORY[0x19AEA534C](v28);
              ++*(_QWORD *)(v28 + 8);
              v30 = __ldxr((unsigned __int8 *)v28);
              if (v30 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v28))
                {
LABEL_42:
                  v26[v25] = v27;
LABEL_52:
                  ++*(_DWORD *)(a2 + 12);
                  goto LABEL_53;
                }
              }
              else
              {
                __clrex();
              }
              result = (WebCore::AccessibilityObject *)WTF::Lock::unlockSlow((WTF::Lock *)v28);
              goto LABEL_42;
            }
LABEL_31:
            result = (WebCore::AccessibilityObject *)WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AXCoreObject*>(a2, (uint64_t *)&v34);
          }
LABEL_53:
          v9 = (v9 + 1);
        }
        while ((_DWORD)v9 != v7);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

WebCore::AccessibilityObject *WebCore::AccessibilityTableCell::rowHeaders@<X0>(WebCore::AccessibilityTableCell *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::AccessibilityObject *result;
  WebCore::AccessibilityObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  WebCore::AccessibilityObject **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebCore::AccessibilityObject *v16;
  WebCore::AccessibilityObject *v17;
  BOOL v18;
  uint64_t v19;
  WebCore::AccessibilityObject **v20;
  WebCore::AccessibilityObject *v21;
  uint64_t v22;
  int v24;
  uint64_t v25;
  WebCore::AccessibilityObject **v26;
  WebCore::AccessibilityObject *v27;
  uint64_t v28;
  int v30;
  WebCore::AccessibilityObject *v31;
  uint64_t v32;
  WebCore::AccessibilityObject *v33;
  WebCore::AccessibilityObject *v34;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 3328))(this);
  if (result)
  {
    v5 = result;
    v6 = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 3328))(this);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1904))(v6);
    v7 = *((unsigned int *)this + 64);
    v8 = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 3328))(this);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 1904))(v8);
    result = (WebCore::AccessibilityObject *)WebCore::AccessibilityTableCell::colSpan(this);
    v9 = *((_DWORD *)this + 65);
    if (v9)
    {
      v10 = 0;
      do
      {
        v34 = 0;
        result = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *, uint64_t, uint64_t))(*(_QWORD *)v5 + 240))(v5, v10, v7);
        v34 = result;
        if (result)
          v11 = result == this;
        else
          v11 = 1;
        if (v11)
          goto LABEL_55;
        v12 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v12)
        {
          v13 = *(WebCore::AccessibilityObject ***)a2;
          while (*v13 != result)
          {
            ++v13;
            if (!--v12)
              goto LABEL_16;
          }
          goto LABEL_55;
        }
LABEL_16:
        v14 = (WTF::StringImpl *)*WebCore::AccessibilityObject::getAttribute(result, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::scopeAttr);
        if (v14)
        {
          *(_DWORD *)v14 += 2;
          result = (WebCore::AccessibilityObject *)MEMORY[0x19AEA53F4](v14, "rowgroup", 8);
          if ((_DWORD)result)
          {
            v16 = v34;
            if (v34
              && (result = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 328))(this),
                  (unint64_t)result - 1 <= 0xFFFFFFFFFFFFFFFDLL))
            {
              v17 = result;
              result = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v16 + 328))(v16);
              v18 = v17 == result;
            }
            else
            {
              v18 = 0;
            }
            if (*(_DWORD *)v14 == 2)
            {
              result = (WebCore::AccessibilityObject *)WTF::StringImpl::destroy(v14, v15);
              if (v18)
                goto LABEL_26;
            }
            else
            {
              *(_DWORD *)v14 -= 2;
              if (v18)
                goto LABEL_26;
            }
          }
          else if (*(_DWORD *)v14 == 2)
          {
            WTF::StringImpl::destroy(v14, v15);
          }
          else
          {
            *(_DWORD *)v14 -= 2;
          }
        }
        else if ((MEMORY[0x19AEA53F4](0, "rowgroup", 8) & 1) != 0)
        {
          v31 = v34;
          if (v34)
          {
            v32 = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 328))(this);
            if ((unint64_t)(v32 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v33 = (WebCore::AccessibilityObject *)v32;
              result = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v31 + 328))(v31);
              if (v33 == result)
              {
LABEL_26:
                v19 = *(unsigned int *)(a2 + 12);
                if ((_DWORD)v19 != *(_DWORD *)(a2 + 8))
                {
                  v20 = *(WebCore::AccessibilityObject ***)a2;
                  v21 = v34;
                  if (v34)
                  {
                    v22 = *((_QWORD *)v34 + 1);
                    if (__ldaxr((unsigned __int8 *)v22))
                    {
                      __clrex();
                      goto LABEL_31;
                    }
                    if (__stxr(1u, (unsigned __int8 *)v22))
LABEL_31:
                      result = (WebCore::AccessibilityObject *)MEMORY[0x19AEA534C](v22);
                    ++*(_QWORD *)(v22 + 8);
                    v24 = __ldxr((unsigned __int8 *)v22);
                    if (v24 == 1)
                    {
                      if (!__stlxr(0, (unsigned __int8 *)v22))
                        goto LABEL_37;
                    }
                    else
                    {
                      __clrex();
                    }
                    result = (WebCore::AccessibilityObject *)WTF::Lock::unlockSlow((WTF::Lock *)v22);
                  }
LABEL_37:
                  v20[v19] = v21;
LABEL_54:
                  ++*(_DWORD *)(a2 + 12);
                  goto LABEL_55;
                }
                goto LABEL_42;
              }
            }
          }
        }
        result = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v34 + 320))(v34);
        if ((_DWORD)result)
        {
          v25 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v25 != *(_DWORD *)(a2 + 8))
          {
            v26 = *(WebCore::AccessibilityObject ***)a2;
            v27 = v34;
            if (!v34)
              goto LABEL_53;
            v28 = *((_QWORD *)v34 + 1);
            if (__ldaxr((unsigned __int8 *)v28))
            {
              __clrex();
              goto LABEL_47;
            }
            if (__stxr(1u, (unsigned __int8 *)v28))
LABEL_47:
              result = (WebCore::AccessibilityObject *)MEMORY[0x19AEA534C](v28);
            ++*(_QWORD *)(v28 + 8);
            v30 = __ldxr((unsigned __int8 *)v28);
            if (v30 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v28))
              {
LABEL_53:
                v26[v25] = v27;
                goto LABEL_54;
              }
            }
            else
            {
              __clrex();
            }
            result = (WebCore::AccessibilityObject *)WTF::Lock::unlockSlow((WTF::Lock *)v28);
            goto LABEL_53;
          }
LABEL_42:
          result = (WebCore::AccessibilityObject *)WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AXCoreObject*>(a2, (uint64_t *)&v34);
        }
LABEL_55:
        v10 = (v10 + 1);
      }
      while ((_DWORD)v10 != v9);
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityTableCell::parentObjectUnignored(WebCore::AccessibilityTableCell *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t i;
  uint64_t *v7;
  int v8;

  (*(void (**)(uint64_t **__return_ptr, WebCore::AccessibilityTableCell *, uint64_t))(*(_QWORD *)this + 984))(&v7, this, 17);
  if (v8 == 1 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 400))(*v7))
  {
    if (!v8)
      goto LABEL_12;
    v3 = *v7;
    if (*v7)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 400))(*v7) & 1) != 0)
      {
        WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v4);
        return v3;
      }
LABEL_12:
      __break(0xC471u);
      JUMPOUT(0x19563C974);
    }
  }
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v2);
  for (i = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 1232))(this);
        ;
        i = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1232))(v3))
  {
    v3 = i;
    if (!i || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)i + 856))(i))
      break;
  }
  return v3;
}

uint64_t WebCore::AccessibilityTableCell::parentRow(WebCore::AccessibilityTableCell *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  int v9;

  (*(void (**)(_QWORD **__return_ptr, WebCore::AccessibilityTableCell *, uint64_t))(*(_QWORD *)this + 984))(&v8, this, 17);
  if (v9 == 1 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v8 + 400))(*v8))
  {
    if (!v9)
      goto LABEL_13;
    v3 = *v8;
    if (*v8)
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 400))(*v8) & 1) != 0)
      {
        WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v4);
        return v3;
      }
LABEL_13:
      __break(0xC471u);
      JUMPOUT(0x19563CA6CLL);
    }
  }
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v2);
  v5 = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 1240))(this);
  if (!v5)
    return 0;
  v6 = v5;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 400))(v5))
    return v6;
  else
    return 0;
}

uint64_t WebCore::AccessibilityTableCell::colSpan(WebCore::AccessibilityTableCell *this)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unsigned int v9;
  uint64_t v10;

  v2 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::colspanAttr);
  if (v2)
  {
    v3 = *(uint64_t **)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 4) | ((unint64_t)((*(_DWORD *)(v2 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v3 = 0;
    v4 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v3, v4, &v10);
  if (HIDWORD(v10) || (v9 = v10, (int)v10 < 1))
  {
    v5 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_colspanAttr);
    if (v5)
    {
      v6 = *(uint64_t **)(v5 + 8);
      v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v6 = 0;
      v7 = 0x100000000;
    }
    WebCore::parseHTMLInteger(v6, v7, &v10);
    if (HIDWORD(v10))
      return 1;
    v9 = v10;
    if ((int)v10 < 1)
      return 1;
  }
  if (v9 >= 0x3E8)
    return 1000;
  return v9;
}

uint64_t WebCore::AccessibilityTableCell::titleUIElement(WebCore::AccessibilityTableCell *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int16 v16;
  WebCore::AXObjectCache *v18;
  unsigned int v19;
  uint64_t v20;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 3328))(this);
  if (v2 && *(_BYTE *)(v2 + 312))
    return 0;
  v3 = *((_QWORD *)this + 31);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  if (*(_BYTE *)(v4 + 46) != 37)
    return 0;
  if ((*(_BYTE *)(v4 + 45) & 1) == 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
    if (v5)
    {
      if ((*(_WORD *)(v5 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
      {
        return 0;
      }
    }
  }
  if ((*(_DWORD *)(v4 + 248) & 0x1FFFFFF) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8);
  if (*(_BYTE *)(v6 + 46) != 39)
    goto LABEL_35;
  v7 = *(_QWORD *)(v6 + 32);
  if (!v7)
    return 0;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    return 0;
  if (*(_BYTE *)(v8 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x19563CD20);
  }
  v9 = *(_DWORD *)(v6 + 200) & 0x7FFFFFFF;
  if (*(_BYTE *)(v8 + 282))
  {
    v19 = v9;
    v20 = v4;
    WebCore::RenderTableSection::recalcCells((WebCore::RenderTableSection *)v8);
    v9 = v19;
    v4 = v20;
  }
  if (*(_DWORD *)(v8 + 212) <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x19563CD5CLL);
  }
  v10 = *(_QWORD *)(v8 + 200) + 40 * v9;
  if (!*(_DWORD *)(v10 + 12))
  {
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x19563CD00);
  }
  v11 = *(_QWORD *)v10;
  v12 = *(unsigned int *)(v11 + 12);
  if (!(_DWORD)v12)
    return 0;
  v13 = *(_QWORD *)(*(_QWORD *)v11 + 8 * v12 - 8);
  if (!v13 || v13 == v4)
    return 0;
  if ((*(_BYTE *)(v13 + 45) & 1) != 0)
    return 0;
  v15 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8);
  if (!v15)
    return 0;
  v16 = *(_WORD *)(v15 + 28);
  if ((v16 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19563CD40);
  }
  if ((v16 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
    return 0;
  v18 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityTableCell *))(*(_QWORD *)this + 1488))(this);
  return WebCore::AXObjectCache::getOrCreate(v18, (WebCore::RenderObject *)v13);
}

uint64_t WebCore::AccessibilityTableCell::axColumnIndex(WebCore::AccessibilityTableCell *this)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;
  BOOL v6;
  uint64_t v7;

  v2 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_colindexAttr);
  if (v2)
  {
    v3 = *(uint64_t **)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 4) | ((unint64_t)((*(_DWORD *)(v2 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v3 = 0;
    v4 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v3, v4, &v7);
  result = v7;
  if (HIDWORD(v7))
    v6 = 1;
  else
    v6 = (int)v7 <= 0;
  if (v6)
  {
    if (*((_DWORD *)this + 66) == -1 || !WebCore::AccessibilityTableCell::parentRow(this))
      return 0xFFFFFFFFLL;
    else
      return *((unsigned int *)this + 66);
  }
  return result;
}

uint64_t WebCore::AccessibilityTableCell::axRowIndex(WebCore::AccessibilityTableCell *this)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_rowindexAttr);
  if (v2)
  {
    v3 = *(uint64_t **)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 4) | ((unint64_t)((*(_DWORD *)(v2 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v3 = 0;
    v4 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v3, v4, &v8);
  result = v8;
  if (HIDWORD(v8))
    v6 = 1;
  else
    v6 = (int)v8 <= 0;
  if (v6)
  {
    v7 = WebCore::AccessibilityTableCell::parentRow(this);
    if (v7)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 368))(v7);
    else
      return 0xFFFFFFFFLL;
  }
  return result;
}

void WebCore::AccessibilityTableColumn::~AccessibilityTableColumn(WebCore::AccessibilityTableColumn *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E337C0A8;
  v3 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = off_1E337C0A8;
  v3 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
  WTF::fastFree(v6, v7);
}

unint64_t WebCore::AccessibilityTableColumn::elementRect(unint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  _QWORD *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v19;
  unint64_t v20;
  int v21;
  signed int v22;
  signed int v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  int v31;

  v2 = *(unsigned int *)(this + 52);
  v29 = 0;
  v30 = 0;
  v31 = v2;
  if (!(_DWORD)v2)
    goto LABEL_18;
  if (v2 >> 29)
  {
    __break(0xC471u);
    return this;
  }
  v3 = this;
  v4 = WTF::fastMalloc((WTF *)(8 * v2));
  v5 = (_QWORD *)v4;
  v30 = v2;
  v29 = (_QWORD *)v4;
  v6 = *(unsigned int *)(v3 + 52);
  if (!(_DWORD)v6)
  {
    v13 = (_QWORD *)(v4 + 8 * v2);
    goto LABEL_21;
  }
  v7 = *(uint64_t **)(v3 + 40);
  v8 = 8 * v6;
  do
  {
    v9 = *v7;
    if (!*v7)
      goto LABEL_15;
    v10 = *(_QWORD *)(v9 + 8);
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v10);
LABEL_10:
    ++*(_QWORD *)(v10 + 8);
    v12 = __ldxr((unsigned __int8 *)v10);
    if (v12 != 1)
    {
      __clrex();
LABEL_14:
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      goto LABEL_15;
    }
    if (__stlxr(0, (unsigned __int8 *)v10))
      goto LABEL_14;
LABEL_15:
    *v5++ = v9;
    ++v7;
    v8 -= 8;
  }
  while (v8);
  if (!v31)
  {
LABEL_18:
    v14 = 0;
    v15 = 0;
    goto LABEL_19;
  }
  v5 = v29;
  v13 = &v29[v31];
LABEL_21:
  v16 = 0;
  v14 = 0;
  v15 = 0;
  do
  {
    v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 1512))(*v5);
    if ((int)a2 >= 1 && SHIDWORD(a2) >= 1)
    {
      if ((int)v16 < 1 || SHIDWORD(v16) < 1)
      {
        v16 = (uint64_t)a2;
        v14 = HIDWORD(v17);
        v15 = v17;
      }
      else
      {
        if ((int)v17 >= (int)v15)
          v19 = v15;
        else
          v19 = v17;
        if (SHIDWORD(v17) >= (int)v14)
          v20 = v14;
        else
          v20 = HIDWORD(v17);
        v21 = v15 + v16;
        if (__OFADD__(v15, (_DWORD)v16))
          v21 = (v15 >> 31) + 0x7FFFFFFF;
        v22 = v17 + (_DWORD)a2;
        if (__OFADD__((_DWORD)v17, (_DWORD)a2))
          v22 = (v17 >> 31) + 0x7FFFFFFF;
        if (v21 <= v22)
          v21 = v22;
        v23 = v14 + HIDWORD(v16);
        if (__OFADD__((_DWORD)v14, HIDWORD(v16)))
          v23 = (v14 >> 31) + 0x7FFFFFFF;
        v24 = HIDWORD(v17) + HIDWORD(a2);
        if (__OFADD__(HIDWORD(v17), HIDWORD(a2)))
          v24 = (HIDWORD(v17) >> 31) + 0x7FFFFFFF;
        if (v23 > v24)
          v24 = v23;
        LODWORD(v25) = v21 - v19;
        if (__OFSUB__(v21, v19))
          v25 = (v21 >> 31) + 0x7FFFFFFF;
        else
          v25 = v25;
        v26 = __OFSUB__(v24, (_DWORD)v20);
        v27 = v24 - v20;
        LODWORD(v28) = (v24 >> 31) + 0x7FFFFFFF;
        if (v26)
          v28 = v28;
        else
          v28 = v27;
        v16 = v25 | (v28 << 32);
        v14 = v20;
        v15 = v19;
      }
    }
    ++v5;
  }
  while (v5 != v13);
LABEL_19:
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, a2);
  return v15 | (v14 << 32);
}

uint64_t WebCore::AccessibilityTableColumn::columnHeader(WebCore::AccessibilityTableColumn *this)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = *((_QWORD *)this + 30);
  if (!v1)
    return 0;
  v2 = *(_BYTE **)(v1 + 8);
  if (!v2)
    return 0;
  if (!(*(unsigned int (**)(_BYTE *))(*(_QWORD *)v2 + 64))(v2))
    return 0;
  if (!v2[312])
    return 0;
  (*(void (**)(WebCore::AccessibilityTableColumn *))(*(_QWORD *)this + 1904))(this);
  v4 = *((unsigned int *)this + 13);
  if (!(_DWORD)v4)
    return 0;
  v5 = (_QWORD *)*((_QWORD *)this + 5);
  v6 = 8 * v4;
  while ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 1456))(*v5) != 18)
  {
    ++v5;
    v6 -= 8;
    if (!v6)
      return 0;
  }
  return *v5;
}

uint64_t WebCore::AccessibilityTableColumn::computeAccessibilityIsIgnored(WebCore::AccessibilityTableColumn *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityTableColumn::addChildren(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;

  *(_BYTE *)(this + 56) = 1;
  v1 = *(_QWORD *)(this + 240);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = this;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
      if ((_DWORD)this)
      {
        if (*(_BYTE *)(v2 + 312))
        {
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1904))(v2);
          v4 = *(_DWORD *)(v2 + 268);
          if (v4 >= 1)
          {
            v5 = 0;
            do
            {
              this = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v2 + 240))(v2, *(unsigned int *)(v3 + 248), v5);
              if (!this)
                goto LABEL_36;
              v7 = this;
              v8 = *(_QWORD *)(this + 8);
              if (__ldaxr((unsigned __int8 *)v8))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v8))
              {
                goto LABEL_12;
              }
              this = MEMORY[0x19AEA534C](v8);
LABEL_12:
              ++*(_QWORD *)(v8 + 8);
              v10 = __ldxr((unsigned __int8 *)v8);
              if (v10 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v8))
                  goto LABEL_17;
              }
              else
              {
                __clrex();
              }
              this = WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_17:
              v11 = *(unsigned int *)(v3 + 52);
              if (!(_DWORD)v11 || *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8 * v11 - 8) != v7)
                this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 3072))(v3, v7);
              v12 = *(_QWORD *)(v7 + 8);
              if (__ldaxr((unsigned __int8 *)v12))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v12))
              {
                goto LABEL_24;
              }
              this = MEMORY[0x19AEA534C](v12);
LABEL_24:
              v14 = *(_QWORD *)(v12 + 8);
              v15 = v14 - 1;
              *(_QWORD *)(v12 + 8) = v14 - 1;
              if (v14 == 1)
              {
                v19 = *(_QWORD *)(v12 + 16);
                v16 = *(_QWORD *)(v12 + 24);
                *(_QWORD *)(v12 + 24) = 0;
                v17 = v19 != 0;
              }
              else
              {
                v16 = 0;
                v17 = 1;
              }
              v18 = __ldxr((unsigned __int8 *)v12);
              if (v18 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v12))
                {
                  if (!v15)
                    goto LABEL_32;
                  goto LABEL_36;
                }
              }
              else
              {
                __clrex();
              }
              this = WTF::Lock::unlockSlow((WTF::Lock *)v12);
              if (!v15)
              {
LABEL_32:
                if (v16)
                  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
                if (!v17)
                  this = WTF::fastFree((WTF *)v12, v6);
              }
LABEL_36:
              v5 = (v5 + 1);
            }
            while (v4 != (_DWORD)v5);
          }
        }
      }
    }
  }
  return this;
}

void WebCore::AccessibilityTableHeaderContainer::~AccessibilityTableHeaderContainer(WebCore::AccessibilityTableHeaderContainer *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E337C0A8;
  v3 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = off_1E337C0A8;
  v3 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
  WTF::fastFree(v6, v7);
}

uint64_t WebCore::AccessibilityTableHeaderContainer::elementRect(WebCore::AccessibilityTableHeaderContainer *this)
{
  return *((_QWORD *)this + 31);
}

uint64_t WebCore::AccessibilityTableHeaderContainer::computeAccessibilityIsIgnored(WebCore::AccessibilityTableHeaderContainer *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityTableHeaderContainer::addChildren(uint64_t this)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  signed int v20;
  int v21;
  signed int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t *v29;
  unsigned int v30;

  *(_BYTE *)(this + 56) = 1;
  v1 = *(_QWORD *)(this + 240);
  if (v1)
  {
    v2 = *(_BYTE **)(v1 + 8);
    if (v2)
    {
      v3 = this;
      this = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 64))(v2);
      if ((_DWORD)this)
      {
        if (v2[312])
        {
          (*(void (**)(uint64_t **__return_ptr, _BYTE *))(*(_QWORD *)v2 + 248))(&v29, v2);
          if (v30)
          {
            v5 = v29;
            v6 = 8 * v30;
            do
            {
              v7 = *v5++;
              (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 3072))(v3, v7, *(unsigned int *)(v3 + 52), 1);
              v6 -= 8;
            }
            while (v6);
          }
          this = WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v4);
          v8 = *(unsigned int *)(v3 + 52);
          if ((_DWORD)v8)
          {
            v9 = *(_QWORD **)(v3 + 40);
            v10 = 8 * v8;
            do
            {
              this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 1512))(*v9);
              if ((int)v11 >= 1 && SHIDWORD(v11) >= 1)
              {
                v13 = *(_DWORD *)(v3 + 256);
                if (v13 < 1 || (v14 = *(_DWORD *)(v3 + 260), v14 <= 0))
                {
                  *(_QWORD *)(v3 + 248) = this;
                  *(_QWORD *)(v3 + 256) = v11;
                }
                else
                {
                  v15 = *(_DWORD *)(v3 + 248);
                  v16 = *(_DWORD *)(v3 + 252);
                  if ((int)this >= (int)v15)
                    v17 = v15;
                  else
                    v17 = this;
                  if (SHIDWORD(this) >= (int)v16)
                    v18 = v16;
                  else
                    v18 = HIDWORD(this);
                  v19 = __OFADD__(v15, v13);
                  v20 = v15 + v13;
                  v21 = (v15 >> 31) + 0x7FFFFFFF;
                  if (v19)
                    v20 = v21;
                  v22 = this + v11;
                  if (__OFADD__((_DWORD)this, (_DWORD)v11))
                    v22 = (this >> 31) + 0x7FFFFFFF;
                  if (v20 <= v22)
                    v20 = v22;
                  v19 = __OFADD__(v16, v14);
                  v23 = v16 + v14;
                  if (v19)
                    v23 = (v16 >> 31) + 0x7FFFFFFF;
                  v24 = HIDWORD(this) + HIDWORD(v11);
                  if (__OFADD__(HIDWORD(this), HIDWORD(v11)))
                    v24 = (HIDWORD(this) >> 31) + 0x7FFFFFFF;
                  if (v23 > v24)
                    v24 = v23;
                  *(_QWORD *)(v3 + 248) = v17 | (v18 << 32);
                  v19 = __OFSUB__(v20, (_DWORD)v17);
                  v25 = v20 - v17;
                  v26 = (v20 >> 31) + 0x7FFFFFFF;
                  if (v19)
                    v25 = v26;
                  *(_DWORD *)(v3 + 256) = v25;
                  v19 = __OFSUB__(v24, (_DWORD)v18);
                  v27 = v24 - v18;
                  v28 = (v24 >> 31) + 0x7FFFFFFF;
                  if (!v19)
                    v28 = v27;
                  *(_DWORD *)(v3 + 260) = v28;
                }
              }
              ++v9;
              v10 -= 8;
            }
            while (v10);
          }
        }
      }
    }
  }
  return this;
}

void WebCore::AccessibilityTableRow::~AccessibilityTableRow(WebCore::AccessibilityTableRow *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::AccessibilityRenderObject::~AccessibilityRenderObject(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::AccessibilityTableRow::determineAccessibilityRole(WebCore::AccessibilityTableRow *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityTableRow *))(*(_QWORD *)this + 3328))(this);
  if (!v2 || !*(_BYTE *)(v2 + 312))
    return WebCore::AccessibilityRenderObject::determineAccessibilityRole(this);
  LODWORD(result) = (*(uint64_t (**)(WebCore::AccessibilityTableRow *))(*(_QWORD *)this + 3296))(this);
  *((_BYTE *)this + 234) = result;
  if ((_DWORD)result == 134)
    return 92;
  else
    return result;
}

uint64_t WebCore::AccessibilityTableRow::isTableRow(WebCore::AccessibilityTableRow *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::AccessibilityTableRow *))(*(_QWORD *)this + 3328))(this);
  if (result)
    return *(_BYTE *)(result + 312) != 0;
  return result;
}

uint64_t WebCore::AccessibilityTableRow::observableObject(WebCore::AccessibilityTableRow *this)
{
  return (*(uint64_t (**)(WebCore::AccessibilityTableRow *))(*(_QWORD *)this + 3328))(this);
}

uint64_t WebCore::AccessibilityTableRow::computeAccessibilityIsIgnored(WebCore::AccessibilityTableRow *this)
{
  uint64_t result;
  uint64_t v3;

  result = WebCore::AccessibilityObject::defaultObjectInclusion(this);
  if (result > 1)
  {
    v3 = (*(uint64_t (**)(WebCore::AccessibilityTableRow *))(*(_QWORD *)this + 3328))(this);
    if (v3 && *(_BYTE *)(v3 + 312))
    {
      if ((*(unsigned int (**)(WebCore::AccessibilityTableRow *))(*(_QWORD *)this + 1456))(this) == 86)
        return 1;
      else
        return (*(uint64_t (**)(WebCore::AccessibilityTableRow *))(*(_QWORD *)this + 1336))(this);
    }
    else
    {
      return WebCore::AccessibilityRenderObject::computeAccessibilityIsIgnored(this);
    }
  }
  return result;
}

_BYTE *WebCore::AccessibilityTableRow::parentTable(WebCore::AccessibilityTableRow *this)
{
  uint64_t (*i)(void);
  uint64_t v2;
  _BYTE *v3;

  for (i = *(uint64_t (**)(void))(*(_QWORD *)this + 1232); ; i = *(uint64_t (**)(void))(*(_QWORD *)v3 + 1232))
  {
    v2 = i();
    v3 = (_BYTE *)v2;
    if (!v2)
      break;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2))
    {
      if (v3[312])
        return v3;
      if ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 840))(v3))
        return 0;
    }
  }
  return v3;
}

_QWORD *WebCore::AccessibilityTableRow::rowHeader(WebCore::AccessibilityTableRow *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  int v7;
  void *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v1 = (*(uint64_t (**)(WebCore::AccessibilityTableRow *, uint64_t))(*(_QWORD *)this + 1896))(this, 1);
  if (!*(_DWORD *)(v1 + 12))
    return 0;
  v2 = v1;
  v3 = **(_QWORD ***)v1;
  if (!v3)
    return 0;
  v4 = v3[1];
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  ++*(_QWORD *)(v4 + 8);
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  if ((*(uint64_t (**)(_QWORD *))(*v3 + 840))(v3)
    && ((v9 = (*(uint64_t (**)(_QWORD *))(*v3 + 840))(v3)) != 0
      ? (v10 = (*(_WORD *)(v9 + 28) & 0x10) == 0)
      : (v10 = 1),
        !v10
     && *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::thTag + 24)
     && (v19 = *(unsigned int *)(v2 + 12), (_DWORD)v19)))
  {
    v20 = *(_QWORD **)v2;
    v21 = 8 * v19;
    while (1)
    {
      if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v20 + 840))(*v20))
      {
        v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v20 + 840))(*v20);
        v23 = !v22 || (*(_WORD *)(v22 + 28) & 0x10) == 0;
        if (v23 || *(_QWORD *)(*(_QWORD *)(v22 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
          break;
      }
      ++v20;
      v21 -= 8;
      if (!v21)
        goto LABEL_19;
    }
    v6 = v3;
  }
  else
  {
LABEL_19:
    v6 = 0;
  }
  v11 = v3[1];
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_24;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_24:
  v13 = *(_QWORD *)(v11 + 8);
  v14 = v13 - 1;
  *(_QWORD *)(v11 + 8) = v13 - 1;
  if (v13 == 1)
  {
    v24 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = 0;
    v16 = v24 != 0;
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  v17 = __ldxr((unsigned __int8 *)v11);
  if (v17 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v11))
    {
      if (v14)
        return v6;
      goto LABEL_32;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v11);
  if (v14)
    return v6;
LABEL_32:
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (!v16)
    WTF::fastFree((WTF *)v11, v8);
  return v6;
}

uint64_t WebCore::AccessibilityTableRow::addChildren(WebCore::AccessibilityTableRow *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t *v14;
  unsigned int v15;

  (*(void (**)(uint64_t **__return_ptr, WebCore::AccessibilityTableRow *, uint64_t))(*(_QWORD *)this + 984))(&v14, this, 18);
  if (v15)
  {
    v2 = v14;
    v3 = 8 * v15;
    do
    {
      v4 = *v2++;
      (*(void (**)(WebCore::AccessibilityTableRow *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 3072))(this, v4, *((unsigned int *)this + 13), 0);
      v3 -= 8;
    }
    while (v3);
    *((_BYTE *)this + 56) = 1;
    *((_BYTE *)this + 233) = 0;
  }
  else
  {
    WebCore::AccessibilityRenderObject::addChildren(this);
  }
  v5 = (*(uint64_t (**)(WebCore::AccessibilityTableRow *))(*(_QWORD *)this + 360))(this);
  if (v5 != -1)
  {
    v7 = v5;
    v8 = (*(uint64_t (**)(WebCore::AccessibilityTableRow *, uint64_t))(*(_QWORD *)this + 1896))(this, 1);
    v9 = *(unsigned int *)(v8 + 12);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD **)v8;
      v11 = 8 * v9;
      do
      {
        v12 = (_DWORD *)*v10;
        if (*v10 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v12 + 296))(*v10))
          v12[66] = v7;
        ++v10;
        ++v7;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v6);
}

uint64_t WebCore::AccessibilityTableRow::axColumnIndex(WebCore::AccessibilityTableRow *this)
{
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  int v4;
  uint64_t v6;

  v1 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_colindexAttr);
  if (v1)
  {
    v2 = *(uint64_t **)(v1 + 8);
    v3 = *(unsigned int *)(v1 + 4) | ((unint64_t)((*(_DWORD *)(v1 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v2 = 0;
    v3 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v2, v3, &v6);
  if (HIDWORD(v6))
    v4 = 0;
  else
    v4 = v6;
  if (v4 <= 0)
    return 0xFFFFFFFFLL;
  else
    return v4;
}

uint64_t WebCore::AccessibilityTableRow::axRowIndex(WebCore::AccessibilityTableRow *this)
{
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  int v4;
  uint64_t v6;

  v1 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_rowindexAttr);
  if (v1)
  {
    v2 = *(uint64_t **)(v1 + 8);
    v3 = *(unsigned int *)(v1 + 4) | ((unint64_t)((*(_DWORD *)(v1 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v2 = 0;
    v3 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v2, v3, &v6);
  if (HIDWORD(v6))
    v4 = 0;
  else
    v4 = v6;
  if (v4 <= 0)
    return 0xFFFFFFFFLL;
  else
    return v4;
}

void WebCore::AccessibilityTree::~AccessibilityTree(WebCore::AccessibilityTree *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::AccessibilityRenderObject::~AccessibilityRenderObject(this, a2);
  WTF::fastFree(v2, v3);
}

BOOL WebCore::AccessibilityTree::computeAccessibilityIsIgnored(WebCore::AccessibilityTree *this)
{
  return WebCore::AccessibilityObject::defaultObjectInclusion(this) == 1;
}

uint64_t WebCore::AccessibilityTree::determineAccessibilityRole(WebCore::AccessibilityTree *this)
{
  int v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  unint64_t v11;
  WTF *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  WTF *v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::Node *v38;

  v2 = WebCore::AccessibilityNodeObject::determineAriaRoleAttribute(this);
  *((_BYTE *)this + 234) = v2;
  if (v2 != 129)
    return WebCore::AccessibilityRenderObject::determineAccessibilityRole(this);
  v4 = *((_QWORD *)this + 31);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    if (*(_BYTE *)(v5 + 46) == 49)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40);
    }
    else
    {
      if ((*(_BYTE *)(v5 + 45) & 1) != 0)
        return 38;
      v6 = *(_QWORD *)(v5 + 24);
    }
  }
  else
  {
    v6 = *((_QWORD *)this + 30);
    if (!v6)
      return 38;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if (!v8)
    return 38;
  if ((*(_WORD *)(v8 + 28) & 4) != 0)
  {
    v9 = *(_QWORD *)(v8 + 80);
    if (v9)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        *(_DWORD *)(v9 + 24) += 2;
        if (v14)
        {
          if (v13 + 1 == v14)
            goto LABEL_18;
        }
        else
        {
          if (v13)
          {
            if (v13 == v11 - 1)
              goto LABEL_18;
          }
          else if (!v11)
          {
LABEL_18:
            v15 = v11 + (v11 >> 2);
            if (v15 <= 0xF)
              v15 = 15;
            if (v15 >= 0x1FFFFFFF)
            {
              __break(0xC471u);
              JUMPOUT(0x19563E1BCLL);
            }
            v16 = v15 + 1;
            v17 = (WTF *)WTF::fastMalloc((WTF *)(8 * (v15 + 1)));
            v10 = v17;
            if (v14 <= v13)
            {
              memcpy((char *)v17 + 8 * v14, (char *)v12 + 8 * v14, 8 * v13 - 8 * v14);
            }
            else
            {
              memcpy(v17, v12, 8 * v13);
              memcpy((char *)v10 + 8 * v16 + 8 * (v14 - v11), (char *)v12 + 8 * v14, 8 * v11 - 8 * v14);
              v14 = v16 + v14 - v11;
            }
            v11 = v16;
            if (v12)
            {
              if (v10 == v12)
              {
                v10 = 0;
                v11 = 0;
              }
              WTF::fastFree(v12, v3);
            }
            v12 = v10;
            goto LABEL_31;
          }
          v14 = 0;
        }
LABEL_31:
        *((_QWORD *)v12 + v13) = v9;
        if (v13 == v11 - 1)
          v18 = 0;
        else
          v18 = v13 + 1;
        if (v14 == v18)
        {
LABEL_133:
          __break(0xC471u);
          JUMPOUT(0x19563E054);
        }
        v19 = v13 + 1;
        if (!v18)
          v19 = v11;
        v9 = *(_QWORD *)(*((_QWORD *)v12 + v19 - 1) + 56);
        v13 = v18;
        if (!v9)
        {
          while (1)
          {
            v20 = *((_QWORD *)v12 + v14);
            *((_QWORD *)v12 + v14) = 0;
            v21 = *((_QWORD *)v10 + v14);
            *((_QWORD *)v10 + v14) = 0;
            if (v21)
            {
              if (*(_DWORD *)(v21 + 24) == 2)
              {
                if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v21, v3);
              }
              else
              {
                *(_DWORD *)(v21 + 24) -= 2;
              }
            }
            if (v14 == v11 - 1)
              v14 = 0;
            else
              ++v14;
            v38 = (WebCore::Node *)v20;
            if ((*(_WORD *)(v20 + 28) & 8) == 0
              || (WebCore::nodeHasRole(v20, (int16x8_t *)"treeitem", 0x100000008) & 1) != 0)
            {
              LODWORD(v22) = 5;
LABEL_47:
              v12 = v10;
              goto LABEL_48;
            }
            if ((WebCore::nodeHasRole(v20, (int16x8_t *)"group", 0x100000005) & 1) == 0
              && !WebCore::nodeHasRole(v20, (int16x8_t *)"presentation", 0x10000000CLL))
            {
              LODWORD(v22) = 1;
              goto LABEL_47;
            }
            if ((*(_WORD *)(v20 + 28) & 4) == 0)
            {
              LODWORD(v22) = 0;
              goto LABEL_47;
            }
            v22 = *(_QWORD *)(v20 + 80);
            if (!v22)
              goto LABEL_47;
            v12 = v10;
            do
            {
              *(_DWORD *)(v22 + 24) += 2;
              if (v14)
              {
                v24 = v11;
                if (v18 + 1 != v14)
                  goto LABEL_78;
              }
              else if (v18)
              {
                if (v18 != v11 - 1)
                {
                  v14 = 0;
                  goto LABEL_78;
                }
                v24 = v11;
              }
              else
              {
                v24 = 0;
                if (v11)
                {
                  v14 = 0;
                  goto LABEL_78;
                }
              }
              v25 = v24 + (v24 >> 2);
              if (v25 <= 0xF)
                v25 = 15;
              if (v25 >= 0x1FFFFFFF)
                goto LABEL_133;
              v11 = v25 + 1;
              v26 = (WTF *)WTF::fastMalloc((WTF *)(8 * (v25 + 1)));
              v10 = v26;
              if (v14 <= v18)
              {
                memcpy((char *)v26 + 8 * v14, (char *)v12 + 8 * v14, 8 * v18 - 8 * v14);
              }
              else
              {
                memcpy(v26, v12, 8 * v18);
                memcpy((char *)v10 + 8 * v11 + 8 * (v14 - v24), (char *)v12 + 8 * v14, 8 * v24 - 8 * v14);
                v14 = v11 + v14 - v24;
              }
              if (v10 == v12)
              {
                v10 = 0;
                v11 = 0;
              }
              else
              {
                v11 = v11;
              }
              WTF::fastFree(v12, v27);
              v12 = v10;
LABEL_78:
              *((_QWORD *)v12 + v18) = v22;
              if (v18 == v11 - 1)
                v23 = 0;
              else
                v23 = v18 + 1;
              if (v14 == v23)
              {
                __break(0xC471u);
                JUMPOUT(0x19563E074);
              }
              v28 = v18 + 1;
              if (!v23)
                v28 = v11;
              v22 = *(_QWORD *)(*((_QWORD *)v12 + v28 - 1) + 56);
              v18 = v23;
            }
            while (v22);
            if (v38)
            {
              LODWORD(v22) = 0;
              v18 = v23;
LABEL_48:
              if (*((_DWORD *)v38 + 6) == 2)
              {
                if ((*((_WORD *)v38 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v38, v3);
              }
              else
              {
                *((_DWORD *)v38 + 6) -= 2;
              }
              if ((_DWORD)v22 == 5 || !(_DWORD)v22)
              {
                v23 = v18;
                goto LABEL_53;
              }
              if (v14 <= v18)
              {
                if (v14 != v18)
                {
                  v32 = (uint64_t *)((char *)v10 + 8 * v14);
                  v33 = 8 * v18 - 8 * v14;
                  do
                  {
                    v34 = *v32;
                    *v32 = 0;
                    if (v34)
                    {
                      if (*(_DWORD *)(v34 + 24) == 2)
                      {
                        if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v34, v3);
                      }
                      else
                      {
                        *(_DWORD *)(v34 + 24) -= 2;
                      }
                    }
                    ++v32;
                    v33 -= 8;
                  }
                  while (v33);
                }
              }
              else
              {
                if (v18)
                {
                  v29 = 8 * v18;
                  v30 = v10;
                  do
                  {
                    v31 = *(_QWORD *)v30;
                    *(_QWORD *)v30 = 0;
                    if (v31)
                    {
                      if (*(_DWORD *)(v31 + 24) == 2)
                      {
                        if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v31, v3);
                      }
                      else
                      {
                        *(_DWORD *)(v31 + 24) -= 2;
                      }
                    }
                    v30 = (WTF *)((char *)v30 + 8);
                    v29 -= 8;
                  }
                  while (v29);
                }
                if (v14 != v11)
                {
                  v35 = (uint64_t *)((char *)v10 + 8 * v14);
                  v36 = 8 * v11 - 8 * v14;
                  do
                  {
                    v37 = *v35;
                    *v35 = 0;
                    if (v37)
                    {
                      if (*(_DWORD *)(v37 + 24) == 2)
                      {
                        if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v37, v3);
                      }
                      else
                      {
                        *(_DWORD *)(v37 + 24) -= 2;
                      }
                    }
                    ++v35;
                    v36 -= 8;
                  }
                  while (v36);
                }
              }
              if (v10)
                WTF::fastFree(v10, v3);
              return 38;
            }
LABEL_53:
            v18 = v23;
            if (v14 == v23)
            {
              if (v10)
                WTF::fastFree(v10, v3);
              return 129;
            }
          }
        }
      }
    }
  }
  return 129;
}

void WebCore::AccessibilityTreeItem::~AccessibilityTreeItem(WebCore::AccessibilityTreeItem *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::AccessibilityRenderObject::~AccessibilityRenderObject(this, a2);
  WTF::fastFree(v2, v3);
}

BOOL WebCore::AccessibilityTreeItem::supportsCheckedState(WebCore::AccessibilityTreeItem *this)
{
  return WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_checkedAttr);
}

uint64_t WebCore::AccessibilityTreeItem::determineAccessibilityRole(WTF **this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  v2 = WebCore::AccessibilityRenderObject::parentObject(this);
  if (v2)
  {
    v3 = v2;
    do
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1456))(v3);
      v5 = v4 == 129;
      if (v4 == 129)
        break;
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1232))(v3);
    }
    while (v3);
  }
  else
  {
    v5 = 0;
  }
  *((_BYTE *)this + 256) = v5;
  return WebCore::AccessibilityRenderObject::determineAccessibilityRole((WebCore::AccessibilityRenderObject *)this);
}

uint64_t WebCore::AccessibilitySpinButton::isNativeSpinButton(WebCore::AccessibilitySpinButton *this)
{
  return 1;
}

uint64_t WebCore::AccessibilitySpinButton::determineAccessibilityRole(WebCore::AccessibilitySpinButton *this)
{
  return 104;
}

void WebCore::AccessibilitySpinButtonPart::~AccessibilitySpinButtonPart(WebCore::AccessibilitySpinButtonPart *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E337C0A8;
  v3 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = off_1E337C0A8;
  v3 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
  WTF::fastFree(v6, v7);
}

uint64_t WebCore::AccessibilitySpinButtonPart::isSpinButtonPart(WebCore::AccessibilitySpinButtonPart *this)
{
  return 1;
}

uint64_t WebCore::AccessibilitySpinButtonPart::isIncrementor(WebCore::AccessibilitySpinButtonPart *this)
{
  return *((unsigned __int8 *)this + 248);
}

uint64_t WebCore::AccessibilitySpinButtonPart::determineAccessibilityRole(WebCore::AccessibilitySpinButtonPart *this)
{
  return 105;
}

uint64_t WebCore::AccessibilityTable::isAriaTable(WebCore::AccessibilityTable *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityTableColumn::isTableColumn(WebCore::AccessibilityTableColumn *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityTableColumn::columnIndex(WebCore::AccessibilityTableColumn *this)
{
  return *((unsigned int *)this + 62);
}

uint64_t WebCore::AccessibilityTableColumn::isAccessibilityTableColumnInstance(WebCore::AccessibilityTableColumn *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityTableColumn::determineAccessibilityRole(WebCore::AccessibilityTableColumn *this)
{
  return 17;
}

uint64_t WebCore::AccessibilityTableHeaderContainer::determineAccessibilityRole(WebCore::AccessibilityTableHeaderContainer *this)
{
  return 123;
}

BOOL WebCore::AccessibilityTreeItem::shouldIgnoreAttributeRole(WebCore::AccessibilityTreeItem *this)
{
  return *((_BYTE *)this + 256) == 0;
}

uint64_t WebCore::AccessibilityTable::addChildren(void)::$_2::operator()(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int ***v33;
  unsigned int *v34;
  unsigned int **v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  WTF *v52;
  void *v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  WTF *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  WTF *v76;
  void *v77;
  uint64_t v78;
  WTF *v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  unsigned int v91;
  _DWORD *v92;
  _DWORD *v93;
  int *v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  WTF *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int **v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  WTF *v116;
  uint64_t v117;
  WTF *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int *v123;
  uint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  void *v143;
  void *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v151;
  uint64_t v152;
  int v154;
  int v155;
  int v156;
  _QWORD *v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int ***v160;
  uint64_t v161;
  unsigned int v162;
  unsigned int *v163;
  WTF *v164;
  unint64_t v165;
  unsigned int v166;

  if (!a2)
    return result;
  v2 = result;
  v3 = *(_QWORD *)(result + 32);
  v4 = *(uint64_t **)result;
  v5 = **(_QWORD **)result;
  v157 = a2;
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD **)(v5 + 8 * v10);
    if (v11 == a2)
      return result;
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD **)(v5 + 8 * v10);
      ++v12;
      if (v11 == a2)
        return result;
    }
  }
  else
  {
    WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v4, 8u);
    v5 = *v4;
    if (*v4)
      v6 = *(_DWORD *)(v5 - 8);
    else
      v6 = 0;
    a2 = v157;
  }
  v13 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v6 & ((v15 >> 31) ^ v15);
  v17 = (_QWORD *)(v5 + 8 * v16);
  v18 = (_QWORD *)*v17;
  if (*v17)
  {
    v19 = 0;
    v20 = 1;
    while (v18 != a2)
    {
      if (v18 == (_QWORD *)-1)
        v19 = v17;
      v16 = (v16 + v20) & v6;
      v17 = (_QWORD *)(v5 + 8 * v16);
      v18 = (_QWORD *)*v17;
      ++v20;
      if (!*v17)
      {
        if (v19)
        {
          *v19 = 0;
          --*(_DWORD *)(*v4 - 16);
          v17 = v19;
        }
        goto LABEL_20;
      }
    }
    goto LABEL_32;
  }
LABEL_20:
  *v17 = a2;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v4;
  if (*v4)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 <= 0x400)
  {
    if (3 * v26 > 4 * v25)
      goto LABEL_32;
    if (!(_DWORD)v26)
    {
      v27 = 8;
      goto LABEL_31;
    }
LABEL_29:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
LABEL_31:
    WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v4, v27);
    a2 = v157;
    goto LABEL_32;
  }
  if (v26 <= 2 * v25)
    goto LABEL_29;
LABEL_32:
  if ((*(unsigned int (**)(_QWORD *))(*a2 + 1456))(a2) != 134)
  {
    result = (*(uint64_t (**)(_QWORD *))(*v157 + 856))(v157);
    if ((result & 1) != 0)
      return result;
  }
  v28 = *(unsigned int **)(v2 + 8);
  v29 = **(_DWORD **)(v2 + 16);
  if (*v28 <= v29)
    *v28 = v29 + 1;
  WebCore::AccessibilityTable::addChildren(void)::$_1::operator()(*(_QWORD *)(v2 + 24));
  v30 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v157 + 1896))(v157, 1);
  v31 = *(unsigned int *)(v30 + 12);
  if (!(_DWORD)v31)
    goto LABEL_203;
  LODWORD(v32) = 0;
  v33 = *(unsigned int ****)v30;
  v161 = *(_QWORD *)v30 + 8 * v31;
  v34 = (unsigned int *)(v3 + 288);
  v163 = (unsigned int *)(v3 + 288);
  do
  {
    v35 = *v33;
    if (!*v33 || !(*((unsigned int (**)(unsigned int **))*v35 + 37))(*v33))
      goto LABEL_197;
    v160 = v33;
    *((_DWORD *)v35 + 67) = 1;
    v36 = **(unsigned int **)(v2 + 16);
    v37 = *(_DWORD *)(v3 + 300);
    v38 = (v36 + 1);
    if (v37 < v38)
    {
      v39 = *(unsigned int *)(v3 + 296);
      if (v39 < v38)
      {
        v40 = v39 + (v39 >> 2);
        if (v40 >= 0x10)
          v41 = v40 + 1;
        else
          v41 = 16;
        if (v41 <= v38)
          v42 = (v36 + 1);
        else
          v42 = v41;
        WTF::Vector<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v34, v42);
      }
      if (*(_QWORD *)v34)
      {
        v43 = *(unsigned int *)(v3 + 300);
        if ((_DWORD)v43 != (_DWORD)v38)
          bzero((void *)(*(_QWORD *)v34 + 16 * v43), (16 * v38 - 16 * v43) & 0xFFFFFFFFFFFFFFF0);
      }
      *(_DWORD *)(v3 + 300) = v38;
      v37 = v36 + 1;
    }
    if (v37 <= v36)
    {
      __break(0xC471u);
      JUMPOUT(0x19563EF78);
    }
    v44 = *(_QWORD *)v34 + 16 * v36;
    v45 = *(unsigned int *)(v44 + 12);
    v46 = (v32 + 1);
    if (v45 >= v46)
      goto LABEL_75;
    v47 = *(unsigned int *)(v44 + 8);
    v48 = *(WTF **)v44;
    if (v47 >= v46)
      goto LABEL_71;
    v49 = v47 + (v47 >> 2);
    if (v49 >= 0x10)
      v50 = v49 + 1;
    else
      v50 = 16;
    if (v50 <= v46)
      v51 = (v32 + 1);
    else
      v51 = v50;
    if (v51 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19563EF80);
    }
    v52 = (WTF *)WTF::fastMalloc((WTF *)(8 * v51));
    *(_DWORD *)(v44 + 8) = v51;
    *(_QWORD *)v44 = v52;
    if ((_DWORD)v45)
    {
      v54 = 8 * v45;
      v55 = v48;
      do
      {
        v56 = *(_QWORD *)v55;
        v55 = (WTF *)((char *)v55 + 8);
        *(_QWORD *)v52 = v56;
        v52 = (WTF *)((char *)v52 + 8);
        v54 -= 8;
      }
      while (v54);
      v52 = *(WTF **)v44;
    }
    if (v48)
    {
      if (v52 == v48)
      {
        *(_QWORD *)v44 = 0;
        *(_DWORD *)(v44 + 8) = 0;
      }
      WTF::fastFree(v48, v53);
      v48 = *(WTF **)v44;
LABEL_71:
      if (v48)
        goto LABEL_72;
      goto LABEL_74;
    }
    v48 = v52;
    if (v52)
    {
LABEL_72:
      v57 = *(unsigned int *)(v44 + 12);
      if ((_DWORD)v57 != (_DWORD)v46)
        bzero((char *)v48 + 8 * v57, (8 * v46 - 8 * v57) & 0xFFFFFFFFFFFFFFF8);
    }
LABEL_74:
    *(_DWORD *)(v44 + 12) = v46;
    v37 = *(_DWORD *)(v3 + 300);
LABEL_75:
    v58 = **(_DWORD **)(v2 + 16);
    if (v37 <= v58)
    {
LABEL_241:
      __break(0xC471u);
      JUMPOUT(0x19563EF48);
    }
    v59 = v32;
    while (1)
    {
      v60 = *(_QWORD *)v34;
      v61 = *(_QWORD *)v34 + 16 * v58;
      v62 = *(unsigned int *)(v61 + 12);
      if (v59 >= v62)
        goto LABEL_249;
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v61 + 8 * v59) - 1) > 0xFFFFFFFFFFFFFFFDLL)
        break;
      v63 = v58;
      if (v37 > v58)
        goto LABEL_92;
      v64 = v58 + 1;
      v65 = *(unsigned int *)(v3 + 296);
      if (v65 > v63)
        goto LABEL_89;
      v66 = v65 + (v65 >> 2);
      if (v66 >= 0x10)
        v67 = v66 + 1;
      else
        v67 = 16;
      if (v67 <= v64)
        v68 = (v63 + 1);
      else
        v68 = v67;
      WTF::Vector<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v34, v68);
      v60 = *(_QWORD *)v34;
      if (*(_QWORD *)v34)
      {
        v37 = *(_DWORD *)(v3 + 300);
LABEL_89:
        if (v37 != (_DWORD)v64)
        {
          bzero((void *)(v60 + 16 * v37), (16 * v64 - 16 * v37) & 0xFFFFFFFFFFFFFFF0);
          v60 = *(_QWORD *)v34;
        }
      }
      *(_DWORD *)(v3 + 300) = v64;
      v62 = *(unsigned int *)(v60 + 16 * v63 + 12);
      v37 = v63 + 1;
LABEL_92:
      v69 = (v59 + 2);
      if (v62 < v69)
      {
        v70 = v60 + 16 * v63;
        v71 = *(unsigned int *)(v70 + 8);
        v72 = *(WTF **)v70;
        if (v71 >= v69)
          goto LABEL_109;
        v73 = v71 + (v71 >> 2);
        if (v73 >= 0x10)
          v74 = v73 + 1;
        else
          v74 = 16;
        if (v74 <= v69)
          v75 = (v59 + 2);
        else
          v75 = v74;
        if (v75 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19563EF68);
        }
        v76 = (WTF *)WTF::fastMalloc((WTF *)(8 * v75));
        *(_DWORD *)(v70 + 8) = v75;
        *(_QWORD *)v70 = v76;
        if ((_DWORD)v62)
        {
          v78 = 8 * v62;
          v79 = v72;
          do
          {
            v80 = *(_QWORD *)v79;
            v79 = (WTF *)((char *)v79 + 8);
            *(_QWORD *)v76 = v80;
            v76 = (WTF *)((char *)v76 + 8);
            v78 -= 8;
          }
          while (v78);
          v76 = *(WTF **)v70;
        }
        if (v72)
        {
          if (v76 == v72)
          {
            *(_QWORD *)v70 = 0;
            *(_DWORD *)(v70 + 8) = 0;
          }
          WTF::fastFree(v72, v77);
          v72 = *(WTF **)v70;
LABEL_109:
          if (v72)
          {
LABEL_110:
            v81 = *(unsigned int *)(v70 + 12);
            if ((_DWORD)v81 != (_DWORD)v69)
              bzero((char *)v72 + 8 * v81, (8 * v69 - 8 * v81) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        else
        {
          v72 = v76;
          if (v76)
            goto LABEL_110;
        }
        *(_DWORD *)(v70 + 12) = v69;
        v37 = *(_DWORD *)(v3 + 300);
      }
      ++v59;
      v58 = **(_DWORD **)(v2 + 16);
      if (v37 <= v58)
        goto LABEL_241;
    }
    v82 = *(_DWORD **)(v2 + 40);
    v162 = v59;
    if (*v82 <= v59)
      *v82 = v59 + 1;
    v83 = WebCore::AccessibilityTableCell::colSpan((WebCore::AccessibilityTableCell *)v35);
    v84 = *WebCore::AccessibilityObject::getAttribute((WebCore::AccessibilityObject *)v35, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::rowspanAttr);
    if (v84)
    {
      v85 = *(uint64_t **)(v84 + 8);
      v86 = *(unsigned int *)(v84 + 4) | ((unint64_t)((*(_DWORD *)(v84 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v85 = 0;
      v86 = 0x100000000;
    }
    WebCore::parseHTMLInteger(v85, v86, (uint64_t *)&v164);
    if ((HIDWORD(v164) || (v91 = v164, (int)v164 < 1))
      && ((v88 = *WebCore::AccessibilityObject::getAttribute((WebCore::AccessibilityObject *)v35, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_rowspanAttr)) == 0? (v89 = 0, v90 = 0x100000000): (v89 = *(uint64_t **)(v88 + 8), v90 = *(unsigned int *)(v88 + 4) | ((unint64_t)((*(_DWORD *)(v88 + 16) >> 2) & 1) << 32)), (WebCore::parseHTMLInteger(v89, v90, (uint64_t *)&v164), HIDWORD(v164))|| (v91 = v164, (int)v164 < 1)))
    {
      v91 = 1;
    }
    else if (v91 >= 0xFFFE)
    {
      v91 = 65534;
    }
    v158 = v83;
    v159 = v91;
    v92 = *(_DWORD **)(v2 + 40);
    v32 = v83 + v59;
    if (*v92 < v32)
      *v92 = v32;
    v93 = *(_DWORD **)(v2 + 8);
    v94 = *(int **)(v2 + 16);
    v95 = *v94;
    if (*v93 < *v94)
    {
      *v93 = v95;
      v95 = *v94;
    }
    if (*((_DWORD *)v35 + 64) != v95)
      *((_DWORD *)v35 + 64) = v95;
    if (*((_DWORD *)v35 + 65) != (_DWORD)v59)
      *((_DWORD *)v35 + 65) = v59;
    if (v32 > v59)
    {
      do
      {
        v96 = **(unsigned int **)(v2 + 16);
        v97 = *(_DWORD *)(v3 + 300);
        v98 = (v96 + 1);
        if (v97 < v98)
        {
          v99 = *(unsigned int *)(v3 + 296);
          if (v99 < v98)
          {
            v100 = v99 + (v99 >> 2);
            if (v100 >= 0x10)
              v101 = v100 + 1;
            else
              v101 = 16;
            if (v101 <= v98)
              v102 = (v96 + 1);
            else
              v102 = v101;
            WTF::Vector<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v34, v102);
          }
          if (*(_QWORD *)v34)
          {
            v103 = *(unsigned int *)(v3 + 300);
            if ((_DWORD)v103 != (_DWORD)v98)
              bzero((void *)(*(_QWORD *)v34 + 16 * v103), (16 * v98 - 16 * v103) & 0xFFFFFFFFFFFFFFF0);
          }
          *(_DWORD *)(v3 + 300) = v98;
          v97 = v96 + 1;
        }
        if (v97 <= v96)
        {
          __break(0xC471u);
          JUMPOUT(0x19563EF50);
        }
        v104 = *(_QWORD *)v34 + 16 * v96;
        v105 = *(unsigned int *)(v104 + 12);
        v106 = v59 + 1;
        if (v59 >= v105)
        {
          v107 = *(unsigned int *)(v104 + 8);
          v108 = *(WTF **)v104;
          if (v59 >= v107)
          {
            v109 = v3;
            v110 = v2;
            v111 = v35;
            v112 = v32;
            v113 = v107 + (v107 >> 2);
            if (v113 >= 0x10)
              v114 = v113 + 1;
            else
              v114 = 16;
            if (v114 <= v106)
              v115 = v59 + 1;
            else
              v115 = v114;
            if (v115 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x19563EF70);
            }
            v116 = (WTF *)WTF::fastMalloc((WTF *)(8 * v115));
            *(_DWORD *)(v104 + 8) = v115;
            *(_QWORD *)v104 = v116;
            if ((_DWORD)v105)
            {
              v117 = 8 * v105;
              v118 = v108;
              v32 = v112;
              do
              {
                v119 = *(_QWORD *)v118;
                v118 = (WTF *)((char *)v118 + 8);
                *(_QWORD *)v116 = v119;
                v116 = (WTF *)((char *)v116 + 8);
                v117 -= 8;
              }
              while (v117);
              v116 = *(WTF **)v104;
            }
            else
            {
              v32 = v112;
            }
            v35 = v111;
            v2 = v110;
            if (v108)
            {
              v3 = v109;
              if (v116 == v108)
              {
                *(_QWORD *)v104 = 0;
                *(_DWORD *)(v104 + 8) = 0;
              }
              WTF::fastFree(v108, v87);
              v108 = *(WTF **)v104;
            }
            else
            {
              v108 = v116;
              v3 = v109;
            }
            v34 = v163;
          }
          if (v108)
          {
            v120 = *(unsigned int *)(v104 + 12);
            if (v106 != v120)
              bzero((char *)v108 + 8 * v120, (8 * v106 - 8 * v120) & 0xFFFFFFFFFFFFFFF8);
          }
          *(_DWORD *)(v104 + 12) = v106;
          v97 = *(_DWORD *)(v3 + 300);
        }
        v121 = **(unsigned int **)(v2 + 16);
        if (v97 <= v121)
        {
          __break(0xC471u);
          JUMPOUT(0x19563EF58);
        }
        v122 = *(_QWORD *)v34 + 16 * v121;
        if (v59 >= *(unsigned int *)(v122 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x19563EF60);
        }
        *(_QWORD *)(*(_QWORD *)v122 + 8 * v59++) = v35[2];
      }
      while ((_DWORD)v32 != (_DWORD)v106);
    }
    if (v159 <= 1)
    {
      v33 = v160;
    }
    else
    {
      v123 = *(unsigned int **)(v2 + 48);
      if (!v35[4])
      {
        v124 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v124 = 1;
        *(_QWORD *)(v124 + 8) = v35;
        v125 = v35[4];
        v35[4] = (unsigned int *)v124;
        if (v125)
        {
          do
          {
            v126 = __ldaxr(v125);
            v127 = v126 - 1;
          }
          while (__stlxr(v127, v125));
          if (!v127)
          {
            atomic_store(1u, v125);
            WTF::fastFree((WTF *)v125, v87);
          }
        }
      }
      v128 = v35[4];
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 + 1, v128));
      v164 = (WTF *)v128;
      v165 = __PAIR64__(v158, v162);
      v166 = v159 - 1;
      v130 = v123[3];
      if ((_DWORD)v130 == v123[2])
      {
        v131 = WTF::Vector<WebCore::AccessibilityTable::addChildren(void)::DownwardGrowingCell,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v123, v130 + 1, (unint64_t)&v164);
        v132 = *(_QWORD *)v123 + 24 * v123[3];
        v133 = *(_QWORD *)v131;
        *(_QWORD *)v131 = 0;
        *(_QWORD *)v132 = v133;
        LODWORD(v133) = *(_DWORD *)(v131 + 16);
        *(_QWORD *)(v132 + 8) = *(_QWORD *)(v131 + 8);
        *(_DWORD *)(v132 + 16) = v133;
      }
      else
      {
        v134 = *(_QWORD *)v123 + 24 * v130;
        v164 = 0;
        *(_QWORD *)v134 = v128;
        v135 = v165;
        *(_DWORD *)(v134 + 16) = v166;
        *(_QWORD *)(v134 + 8) = v135;
      }
      v33 = v160;
      ++v123[3];
      v136 = (unsigned int *)v164;
      v164 = 0;
      if (v136)
      {
        do
        {
          v137 = __ldaxr(v136);
          v138 = v137 - 1;
        }
        while (__stlxr(v138, v136));
        if (!v138)
        {
          atomic_store(1u, v136);
          WTF::fastFree((WTF *)v136, v87);
        }
      }
    }
LABEL_197:
    ++v33;
  }
  while (v33 != (unsigned int ***)v161);
LABEL_203:
  v139 = *(unsigned int *)(v3 + 268);
  if ((_DWORD)v139 == *(_DWORD *)(v3 + 264))
  {
    v140 = v139 + (v139 >> 2);
    if (v140 >= 0x10)
      v141 = v140 + 1;
    else
      v141 = 16;
    if (v141 <= v139 + 1)
      v142 = v139 + 1;
    else
      v142 = v141;
    if (v142 >> 29)
    {
LABEL_249:
      __break(0xC471u);
      JUMPOUT(0x19563EF40);
    }
    v143 = *(void **)(v3 + 256);
    v144 = (void *)WTF::fastMalloc((WTF *)(8 * v142));
    *(_DWORD *)(v3 + 264) = v142;
    *(_QWORD *)(v3 + 256) = v144;
    memcpy(v144, v143, 8 * v139);
    if (v143)
    {
      if (*(void **)(v3 + 256) == v143)
      {
        *(_QWORD *)(v3 + 256) = 0;
        *(_DWORD *)(v3 + 264) = 0;
      }
      WTF::fastFree((WTF *)v143, v145);
    }
    v146 = *(unsigned int *)(v3 + 268);
    v147 = *(_QWORD *)(v3 + 256);
    v148 = v157;
    v149 = v157[1];
    if (__ldaxr((unsigned __int8 *)v149))
    {
      __clrex();
      goto LABEL_227;
    }
    if (__stxr(1u, (unsigned __int8 *)v149))
    {
LABEL_227:
      MEMORY[0x19AEA534C](v149);
      v148 = v157;
    }
    ++*(_QWORD *)(v149 + 8);
    v155 = __ldxr((unsigned __int8 *)v149);
    if (v155 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v149))
      {
LABEL_233:
        v151 = (_QWORD *)(v147 + 8 * v146);
        goto LABEL_234;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v149);
    v148 = v157;
    goto LABEL_233;
  }
  v151 = (_QWORD *)(*(_QWORD *)(v3 + 256) + 8 * v139);
  v148 = v157;
  v152 = v157[1];
  if (__ldaxr((unsigned __int8 *)v152))
  {
    __clrex();
    goto LABEL_220;
  }
  if (__stxr(1u, (unsigned __int8 *)v152))
  {
LABEL_220:
    MEMORY[0x19AEA534C](v152);
    v148 = v157;
  }
  ++*(_QWORD *)(v152 + 8);
  v154 = __ldxr((unsigned __int8 *)v152);
  if (v154 != 1)
  {
    __clrex();
    goto LABEL_225;
  }
  if (__stlxr(0, (unsigned __int8 *)v152))
  {
LABEL_225:
    WTF::Lock::unlockSlow((WTF::Lock *)v152);
    v148 = v157;
  }
LABEL_234:
  *v151 = v148;
  ++*(_DWORD *)(v3 + 268);
  v156 = **(_DWORD **)(v2 + 16);
  if (*((_DWORD *)v148 + 64) != v156)
    *((_DWORD *)v148 + 64) = v156;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 3072))(v3);
  ++**(_DWORD **)(v2 + 16);
  return result;
}

void WebCore::AccessibilityTable::addChildren(void)::$_1::operator()(uint64_t a1)
{
  int v1;
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  WTF *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  WTF *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;

  v1 = *(_DWORD *)(*(_QWORD *)a1 + 12);
  if (v1)
  {
    v3 = **(unsigned int ***)a1;
    v38 = &v3[6 * v1];
    v4 = *(_QWORD *)(a1 + 8);
    while (1)
    {
      v5 = v3[4];
      if (v5)
      {
        v3[4] = v5 - 1;
        ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 268);
        v6 = v3[2];
        if (v6 < v3[3] + v6)
          break;
      }
LABEL_58:
      v3 += 6;
      if (v3 == v38)
        return;
    }
    while (1)
    {
      v7 = **(unsigned int **)(a1 + 16);
      v8 = *(unsigned int *)(v4 + 300);
      v9 = (v7 + 1);
      if (v8 >= v9)
        goto LABEL_28;
      v10 = *(unsigned int *)(v4 + 296);
      v11 = *(WTF **)(v4 + 288);
      if (v10 >= v9)
        goto LABEL_24;
      v12 = v10 + (v10 >> 2);
      if (v12 >= 0x10)
        v13 = v12 + 1;
      else
        v13 = 16;
      if (v13 <= v9)
        v14 = (v7 + 1);
      else
        v14 = v13;
      if (v14 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x19563F288);
      }
      v16 = WTF::fastMalloc((WTF *)(16 * v14));
      *(_DWORD *)(v4 + 296) = v14;
      *(_QWORD *)(v4 + 288) = v16;
      if ((_DWORD)v8)
      {
        v17 = 16 * v8;
        v18 = (_DWORD *)((char *)v11 + 8);
        do
        {
          *(_QWORD *)v16 = 0;
          *(_QWORD *)(v16 + 8) = 0;
          v19 = *((_QWORD *)v18 - 1);
          *((_QWORD *)v18 - 1) = 0;
          *(_QWORD *)v16 = v19;
          LODWORD(v19) = *v18;
          *v18 = 0;
          *(_DWORD *)(v16 + 8) = v19;
          LODWORD(v19) = v18[1];
          v18[1] = 0;
          *(_DWORD *)(v16 + 12) = v19;
          v20 = (WTF *)*((_QWORD *)v18 - 1);
          if (v20)
          {
            *((_QWORD *)v18 - 1) = 0;
            *v18 = 0;
            WTF::fastFree(v20, v15);
          }
          v18 += 4;
          v16 += 16;
          v17 -= 16;
        }
        while (v17);
        v16 = *(_QWORD *)(v4 + 288);
      }
      if (v11)
        break;
      v11 = (WTF *)v16;
      if (v16)
      {
LABEL_25:
        v21 = *(unsigned int *)(v4 + 300);
        if ((_DWORD)v21 != (_DWORD)v9)
          bzero((char *)v11 + 16 * v21, (16 * v9 - 16 * v21) & 0xFFFFFFFFFFFFFFF0);
      }
LABEL_27:
      *(_DWORD *)(v4 + 300) = v9;
      LODWORD(v8) = v7 + 1;
LABEL_28:
      if (v8 <= v7)
        goto LABEL_64;
      v22 = *(_QWORD *)(v4 + 288) + 16 * v7;
      v23 = *(unsigned int *)(v22 + 12);
      v24 = v6 + 1;
      if (v6 < v23)
        goto LABEL_50;
      v25 = *(unsigned int *)(v22 + 8);
      v26 = *(WTF **)v22;
      if (v6 < v25)
        goto LABEL_46;
      v27 = v25 + (v25 >> 2);
      if (v27 >= 0x10)
        v28 = v27 + 1;
      else
        v28 = 16;
      if (v28 <= v24)
        v29 = v6 + 1;
      else
        v29 = v28;
      if (v29 >> 29)
      {
LABEL_64:
        __break(0xC471u);
        JUMPOUT(0x19563F270);
      }
      v30 = (WTF *)WTF::fastMalloc((WTF *)(8 * v29));
      *(_DWORD *)(v22 + 8) = v29;
      *(_QWORD *)v22 = v30;
      if ((_DWORD)v23)
      {
        v32 = 8 * v23;
        v33 = v26;
        do
        {
          v34 = *(_QWORD *)v33;
          v33 = (WTF *)((char *)v33 + 8);
          *(_QWORD *)v30 = v34;
          v30 = (WTF *)((char *)v30 + 8);
          v32 -= 8;
        }
        while (v32);
        v30 = *(WTF **)v22;
      }
      if (v26)
      {
        if (v30 == v26)
        {
          *(_QWORD *)v22 = 0;
          *(_DWORD *)(v22 + 8) = 0;
        }
        WTF::fastFree(v26, v31);
        v26 = *(WTF **)v22;
LABEL_46:
        if (v26)
          goto LABEL_47;
        goto LABEL_49;
      }
      v26 = v30;
      if (v30)
      {
LABEL_47:
        v35 = *(unsigned int *)(v22 + 12);
        if (v24 != v35)
          bzero((char *)v26 + 8 * v35, (8 * v24 - 8 * v35) & 0xFFFFFFFFFFFFFFF8);
      }
LABEL_49:
      *(_DWORD *)(v22 + 12) = v24;
      LODWORD(v8) = *(_DWORD *)(v4 + 300);
LABEL_50:
      v36 = **(unsigned int **)(a1 + 16);
      if (v8 <= v36)
      {
        __break(0xC471u);
        JUMPOUT(0x19563F278);
      }
      v37 = *(_QWORD *)(v4 + 288) + 16 * v36;
      if (v6 >= *(unsigned int *)(v37 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x19563F280);
      }
      *(_QWORD *)(*(_QWORD *)v37 + 8 * v6++) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 16);
      if (v24 >= v3[3] + v3[2])
        goto LABEL_58;
    }
    if ((WTF *)v16 == v11)
    {
      *(_QWORD *)(v4 + 288) = 0;
      *(_DWORD *)(v4 + 296) = 0;
    }
    WTF::fastFree(v11, v15);
    v11 = *(WTF **)(v4 + 288);
LABEL_24:
    if (v11)
      goto LABEL_25;
    goto LABEL_27;
  }
}

unint64_t WTF::Vector<WebCore::AccessibilityTable::addChildren(void)::DownwardGrowingCell,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    WTF::Vector<WebCore::AccessibilityTable::addChildren(void)::DownwardGrowingCell,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::AccessibilityTable::addChildren(void)::DownwardGrowingCell,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::AccessibilityTable::addChildren(void)::DownwardGrowingCell,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  WTF *v6;
  unsigned int v7;
  int v8;
  void *v9;
  unsigned int *v10;
  WTF *v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *(WTF **)result;
      v7 = result[3];
      v8 = 24 * v4;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v4));
      v5[2] = (v8 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v5 = result;
      if (v7)
      {
        v10 = result;
        v11 = v6;
        do
        {
          v12 = *(unsigned int **)v11;
          *(_QWORD *)v11 = 0;
          *(_QWORD *)v10 = v12;
          v13 = *((_QWORD *)v11 + 1);
          v10[4] = *((_DWORD *)v11 + 4);
          *((_QWORD *)v10 + 1) = v13;
          result = *(unsigned int **)v11;
          *(_QWORD *)v11 = 0;
          if (result)
          {
            do
            {
              v14 = __ldaxr(result);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, result));
            if (!v15)
            {
              atomic_store(1u, result);
              result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
            }
          }
          v10 += 6;
          v11 = (WTF *)((char *)v11 + 24);
        }
        while (v11 != (WTF *)((char *)v6 + 24 * v7));
      }
      if (v6)
      {
        if (*(WTF **)v5 == v6)
        {
          *(_QWORD *)v5 = 0;
          v5[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v6, v9);
      }
    }
  }
  return result;
}

void std::deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  void *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v5 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
      goto LABEL_4;
    v26 = *(char **)a1;
    v27 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v26)
        v35 = 1;
      else
        v35 = (v6 - v26) >> 2;
      if (!(v35 >> 61))
      {
        v36 = (char *)operator new(8 * v35);
        v37 = &v36[8 * (v35 >> 2)];
        v38 = &v36[8 * v35];
        v40 = v6 - v7;
        v39 = v6 == v7;
        v6 = v37;
        if (!v39)
        {
          v6 = &v37[v40 & 0xFFFFFFFFFFFFFFF8];
          v41 = 8 * (v40 >> 3);
          v42 = &v36[8 * (v35 >> 2)];
          do
          {
            v43 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v42 = v43;
            v42 += 8;
            v41 -= 8;
          }
          while (v41);
        }
        goto LABEL_37;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:sn180100]();
    }
LABEL_22:
    v28 = v27 >> 3;
    if (v28 >= -1)
      v29 = v28 + 1;
    else
      v29 = v28 + 2;
    v30 = -(v29 >> 1);
    v31 = v29 >> 1;
    v32 = &v7[-8 * v31];
    v33 = v6 - v7;
    if (v33)
    {
      memmove(&v7[-8 * v31], v7, v33);
      v7 = *(char **)(a1 + 8);
    }
    v6 = &v32[v33];
    *(_QWORD *)(a1 + 8) = &v7[8 * v30];
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_5;
  }
  v11 = *(char **)(a1 + 16);
  v10 = *(char **)(a1 + 24);
  v13 = *(char **)a1;
  v12 = *(char **)(a1 + 8);
  v14 = v11 - v12;
  v15 = (v11 - v12) >> 3;
  v16 = (uint64_t)&v10[-*(_QWORD *)a1];
  if (v15 < (unint64_t)(v16 >> 3))
  {
    v17 = operator new(0x1000uLL);
    v18 = v17;
    if (v10 != v11)
    {
      if (v11)
      {
        *(_QWORD *)v11 = v17;
        goto LABEL_10;
      }
      goto LABEL_86;
    }
    if (v12 == v13)
    {
      if (v11 == v12)
        v60 = 1;
      else
        v60 = (v10 - v12) >> 2;
      if (v60 >> 61)
        goto LABEL_87;
      v61 = (char *)operator new(8 * v60);
      v34 = &v61[(2 * v60 + 6) & 0xFFFFFFFFFFFFFFF8];
      v62 = v34;
      if (v11 != v12)
      {
        v63 = 8 * v15;
        v64 = &v61[(2 * v60 + 6) & 0xFFFFFFFFFFFFFFF8];
        v65 = v12;
        v62 = &v34[8 * v15];
        do
        {
          v66 = *(_QWORD *)v65;
          v65 += 8;
          *(_QWORD *)v64 = v66;
          v64 += 8;
          v63 -= 8;
        }
        while (v63);
      }
      *(_QWORD *)a1 = v61;
      *(_QWORD *)(a1 + 8) = v34;
      *(_QWORD *)(a1 + 16) = v62;
      *(_QWORD *)(a1 + 24) = &v61[8 * v60];
      if (v12)
      {
        operator delete(v12);
        v34 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v34 = v12;
    }
    *((_QWORD *)v34 - 1) = v18;
    v7 = *(char **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
      goto LABEL_4;
    v26 = *(char **)a1;
    v27 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v26)
        v67 = 1;
      else
        v67 = (v6 - v26) >> 2;
      if (!(v67 >> 61))
      {
        v36 = (char *)operator new(8 * v67);
        v37 = &v36[8 * (v67 >> 2)];
        v38 = &v36[8 * v67];
        v68 = v6 - v7;
        v39 = v6 == v7;
        v6 = v37;
        if (!v39)
        {
          v6 = &v37[v68 & 0xFFFFFFFFFFFFFFF8];
          v69 = 8 * (v68 >> 3);
          v70 = &v36[8 * (v67 >> 2)];
          do
          {
            v71 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v70 = v71;
            v70 += 8;
            v69 -= 8;
          }
          while (v69);
        }
LABEL_37:
        *(_QWORD *)a1 = v36;
        *(_QWORD *)(a1 + 8) = v37;
        *(_QWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 24) = v38;
        if (v26)
        {
          operator delete(v26);
          v6 = *(char **)(a1 + 16);
        }
LABEL_4:
        if (!v6)
        {
LABEL_86:
          __break(1u);
          goto LABEL_87;
        }
LABEL_5:
        *(_QWORD *)v6 = v8;
LABEL_10:
        *(_QWORD *)(a1 + 16) += 8;
        return;
      }
      goto LABEL_87;
    }
    goto LABEL_22;
  }
  v19 = v16 >> 2;
  if (v10 == v13)
    v20 = 1;
  else
    v20 = v19;
  if (v20 >> 61)
    goto LABEL_87;
  v21 = (char *)operator new(8 * v20);
  v22 = &v21[8 * v15];
  v23 = &v21[8 * v20];
  v24 = operator new(0x1000uLL);
  if (v15 == v20)
  {
    if (v14 < 1)
    {
      if (v11 == v12)
        v44 = 1;
      else
        v44 = v14 >> 2;
      if (v44 >> 61)
        goto LABEL_87;
      v22 = (char *)operator new(8 * v44);
      operator delete(v21);
      v23 = &v22[8 * v44];
      v12 = *(char **)(a1 + 8);
      v11 = *(char **)(a1 + 16);
      v21 = v22;
    }
    else
    {
      v25 = v15 + 2;
      if (v15 >= -1)
        v25 = v15 + 1;
      v22 -= 8 * (v25 >> 1);
    }
  }
  *(_QWORD *)v22 = v24;
  v45 = v22 + 8;
  if (v11 != v12)
  {
    while (1)
    {
      if (v22 == v21)
      {
        if (v45 >= v23)
        {
          if (v23 == v22)
            v50 = 1;
          else
            v50 = (v23 - v22) >> 2;
          if (v50 >> 61)
            goto LABEL_87;
          v51 = (char *)operator new(8 * v50);
          v21 = v51;
          v46 = &v51[(2 * v50 + 6) & 0xFFFFFFFFFFFFFFF8];
          v47 = v46;
          v52 = v45 - v22;
          if (v45 != v22)
          {
            v47 = &v46[v52 & 0xFFFFFFFFFFFFFFF8];
            v53 = 8 * (v52 >> 3);
            v54 = &v51[(2 * v50 + 6) & 0xFFFFFFFFFFFFFFF8];
            v55 = v22;
            do
            {
              v56 = *(_QWORD *)v55;
              v55 += 8;
              *(_QWORD *)v54 = v56;
              v54 += 8;
              v53 -= 8;
            }
            while (v53);
          }
          v23 = &v51[8 * v50];
          operator delete(v22);
        }
        else
        {
          v48 = (v23 - v45) >> 3;
          if (v48 >= -1)
            v49 = v48 + 1;
          else
            v49 = v48 + 2;
          v47 = &v45[8 * (v49 >> 1)];
          v46 = &v22[8 * (v49 >> 1)];
          if (v45 == v22)
          {
            v21 = v45;
          }
          else
          {
            memmove(&v22[8 * (v49 >> 1)], v22, v45 - v22);
            v21 = v22;
          }
        }
      }
      else
      {
        v46 = v22;
        v47 = v45;
      }
      v57 = *((_QWORD *)v11 - 1);
      v11 -= 8;
      *((_QWORD *)v46 - 1) = v57;
      v58 = v46 - 8;
      v45 = v47;
      v22 = v58;
      if (v11 == *(char **)(a1 + 8))
        goto LABEL_65;
    }
  }
  v58 = v22;
  v47 = v22 + 8;
LABEL_65:
  v59 = *(char **)a1;
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v58;
  *(_QWORD *)(a1 + 16) = v47;
  *(_QWORD *)(a1 + 24) = v23;
  if (v59)
    operator delete(v59);
}

void std::deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::pop_front(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int64x2_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + ((*(_QWORD *)(a1 + 32) >> 6) & 0x3FFFFFFFFFFFFF8));
  if (v3)
  {
    v2 = a1;
    v4 = *(_QWORD *)(a1 + 32) & 0x1FFLL;
    a1 = *(_QWORD *)(v3 + 8 * v4);
    *(_QWORD *)(v3 + 8 * v4) = 0;
    if (!a1)
      goto LABEL_5;
    do
    {
      v5 = __ldaxr((unsigned int *)a1);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)a1));
    if (v6)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  atomic_store(1u, (unsigned int *)a1);
  v8 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v8)
  {
    v11 = a1;
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(a1 + 16), (WTF::StringImpl *)(*(_QWORD *)(a1 + 16) + 32 * v8));
    a1 = v11;
  }
  v9 = *(WTF **)(a1 + 16);
  if (v9)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    v10 = a1;
    WTF::fastFree(v9, a2);
    a1 = v10;
  }
  WTF::fastFree((WTF *)a1, a2);
LABEL_5:
  v7 = vaddq_s64(*(int64x2_t *)(v2 + 32), (int64x2_t)xmmword_1968DF830);
  *(int64x2_t *)(v2 + 32) = v7;
  if (v7.i64[0] >= 0x400uLL)
  {
    operator delete(**(void ***)(v2 + 8));
    *(_QWORD *)(v2 + 8) += 8;
    *(_QWORD *)(v2 + 32) -= 512;
  }
}

uint64_t WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::expand(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  __n128 *v13;
  uint64_t v14;

  v4 = *a1;
  if (!*a1)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_3;
  }
  v5 = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!v5)
  {
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v7 = v5 << (6 * v6 >= 2 * v5);
LABEL_4:
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  v10 = 0;
  if (v5)
  {
    v12 = v5;
    v13 = (__n128 *)v4;
    do
    {
      if (v13->n128_u64[0] + 1 >= 2)
      {
        WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::reinsert(a1, v13);
        if (v13 == a2)
          v10 = v14;
      }
      ++v13;
      --v12;
    }
    while (v12);
    goto LABEL_12;
  }
  result = 0;
  if (v4)
  {
LABEL_12:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v10;
  }
  return result;
}

__n128 WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::reinsert(uint64_t *a1, __n128 *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  __n128 result;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = ~(a2->n128_u64[0] << 32) + a2->n128_u64[0];
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 16 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  result = *a2;
  *(__n128 *)(v2 + 16 * v9) = *a2;
  return result;
}

void std::__function::__func<WebCore::AccessibilityTable::addChildren(void)::$_4,std::allocator<WebCore::AccessibilityTable::addChildren(void)::$_4>,void ()(WebCore::AXCoreObject *)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::AccessibilityTable::addChildren(void)::$_4,std::allocator<WebCore::AccessibilityTable::addChildren(void)::$_4>,void ()(WebCore::AXCoreObject *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E338C5A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<WebCore::AccessibilityTable::addChildren(void)::$_4,std::allocator<WebCore::AccessibilityTable::addChildren(void)::$_4>,void ()(WebCore::AXCoreObject *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E338C5A8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<WebCore::AccessibilityTable::addChildren(void)::$_4,std::allocator<WebCore::AccessibilityTable::addChildren(void)::$_4>,void ()(WebCore::AXCoreObject *)>::operator()(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = (_QWORD *)*a2;
  if (!*a2)
    return result;
  v3 = result;
  v4 = *(uint64_t ***)(result + 8);
  if ((*(unsigned int (**)(_QWORD))(*v2 + 400))(*a2)
    && (*(uint64_t (**)(_QWORD *))(*v2 + 840))(v2))
  {
    goto LABEL_12;
  }
  v5 = *v4;
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 48))(v2))
    v6 = v2;
  else
    v6 = 0;
  v7 = *v5;
  if (*v5)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(_QWORD **)(v7 + 8 * v12);
    if (v13 != v6)
    {
      v14 = 1;
      while (v13)
      {
        v12 = (v12 + v14) & v8;
        v13 = *(_QWORD **)(v7 + 8 * v12);
        ++v14;
        if (v13 == v6)
          goto LABEL_12;
      }
      goto LABEL_16;
    }
LABEL_12:
    v15 = *(_QWORD *)(v3 + 24);
    if ((*(unsigned int (**)(_QWORD *))(*v2 + 400))(v2))
      v16 = v2;
    else
      v16 = 0;
    return WebCore::AccessibilityTable::addChildren(void)::$_2::operator()(v15, v16);
  }
LABEL_16:
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v2 + 1896))(v2, 1);
  v17 = *(unsigned int *)(result + 12);
  if ((_DWORD)v17)
  {
    v18 = *(uint64_t **)result;
    v19 = 8 * v17;
    do
    {
      v20 = *(_QWORD *)(v3 + 16);
      v22 = *v18;
      v21 = *(_QWORD *)(v20 + 24);
      if (!v21)
      {
        std::__throw_bad_function_call[abi:sn180100]();
        JUMPOUT(0x19563FD0CLL);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v21 + 48))(v21, &v22);
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  return result;
}

void std::__function::__func<WebCore::AccessibilityTable::addChildren(void)::$_7,std::allocator<WebCore::AccessibilityTable::addChildren(void)::$_7>,void ()(WebCore::Node *)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::AccessibilityTable::addChildren(void)::$_7,std::allocator<WebCore::AccessibilityTable::addChildren(void)::$_7>,void ()(WebCore::Node *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = &unk_1E338C5F0;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<WebCore::AccessibilityTable::addChildren(void)::$_7,std::allocator<WebCore::AccessibilityTable::addChildren(void)::$_7>,void ()(WebCore::Node *)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &unk_1E338C5F0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void std::__function::__func<WebCore::AccessibilityTable::addChildren(void)::$_7,std::allocator<WebCore::AccessibilityTable::addChildren(void)::$_7>,void ()(WebCore::Node *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  void *v13;
  int v14;
  _BYTE **v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  unsigned int **v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  char v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int **v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;

  v3 = *a2;
  v4 = *(unsigned int **)(a1 + 24);
  if (!*a2)
    goto LABEL_11;
  v5 = *(_WORD *)(v3 + 28);
  if ((v5 & 0x10) == 0)
  {
    if ((v5 & 8) != 0)
      goto LABEL_34;
LABEL_11:
    v9 = 0;
    v10 = 0;
    v11 = 1;
    goto LABEL_12;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24);
  if (v6 == *(_QWORD *)(WebCore::HTMLNames::captionTag + 24))
  {
    if (!**(_BYTE **)(a1 + 8))
    {
      v7 = **(_QWORD **)(a1 + 16);
      if (v7)
        v8 = *(_QWORD *)(v7 + 8);
      else
        v8 = 0;
      v62 = WebCore::AXObjectCache::getOrCreate(v8, *a2, 0);
      if (v62)
      {
        (*(void (**)(unsigned int *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 3072))(v4, v62, v4[13], 0);
        **(_BYTE **)(a1 + 8) = 1;
      }
    }
    return;
  }
  if ((v5 & 8) == 0)
    goto LABEL_11;
  if (v6 == *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
    goto LABEL_35;
LABEL_34:
  if ((WebCore::nodeHasRole(v3, (int16x8_t *)"row", 0x100000003) & 1) != 0)
  {
LABEL_35:
    v11 = 0;
    v10 = 1;
LABEL_36:
    v9 = v3;
LABEL_12:
    v12 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 3328))(v4);
    v14 = 0;
    v15 = (_BYTE **)(a1 + 32);
    **(_BYTE **)(a1 + 32) = v12;
    if ((v12 & 1) != 0)
      goto LABEL_24;
    goto LABEL_13;
  }
  if ((*(_WORD *)(v3 + 28) & 0x10) == 0
    || (v60 = *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24), v60 != *(_QWORD *)(WebCore::HTMLNames::theadTag + 24))
    && v60 != *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24)
    && v60 != *(_QWORD *)(WebCore::HTMLNames::tfootTag + 24))
  {
    if (!WebCore::nodeHasRole(v3, (int16x8_t *)"rowgroup", 0x100000008))
    {
      v11 = 0;
      v10 = 0;
      goto LABEL_36;
    }
  }
  v10 = 0;
  v11 = 0;
  v15 = (_BYTE **)(a1 + 32);
  **(_BYTE **)(a1 + 32) = 0;
  v14 = 1;
  v9 = v3;
LABEL_13:
  v16 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)(v16 + 8))
  {
    v17 = *(_DWORD *)(v16 + 12);
    if (v17)
    {
      v78 = v9;
      v18 = v11;
      v19 = *(unsigned int ***)v16;
      v20 = *(_QWORD *)v16 + 24 * v17;
      do
      {
        v21 = *v19;
        *v19 = 0;
        if (v21)
        {
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, v21);
            WTF::fastFree((WTF *)v21, v13);
          }
        }
        v19 += 3;
      }
      while (v19 != (unsigned int **)v20);
      *(_DWORD *)(v16 + 12) = 0;
      v11 = v18;
      v9 = v78;
    }
    v24 = *(WTF **)v16;
    if (*(_QWORD *)v16)
    {
      *(_QWORD *)v16 = 0;
      *(_DWORD *)(v16 + 8) = 0;
      WTF::fastFree(v24, v13);
    }
  }
LABEL_24:
  if ((v10 & 1) != 0 || (v14 & 1) != 0)
  {
    if (!v10)
      goto LABEL_44;
    v27 = *(_QWORD *)(a1 + 64);
    v28 = **(_QWORD **)(a1 + 16);
    if (v28)
    {
      v29 = *(_QWORD *)(v28 + 8);
      if ((v11 & 1) != 0)
        goto LABEL_42;
    }
    else
    {
      v29 = 0;
      if ((v11 & 1) != 0)
        goto LABEL_42;
    }
    v30 = WebCore::AXObjectCache::getOrCreate(v29, v9, 0);
    if (v30)
    {
      v31 = (_QWORD *)v30;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 400))(v30))
        v32 = v31;
      else
        v32 = 0;
      goto LABEL_43;
    }
LABEL_42:
    v32 = 0;
LABEL_43:
    WebCore::AccessibilityTable::addChildren(void)::$_2::operator()(v27, v32);
LABEL_44:
    if (!**v15)
    {
      v34 = *(_QWORD *)(a1 + 72);
      if (**(_DWORD **)v34 < **(_DWORD **)(v34 + 8))
      {
        do
        {
          WebCore::AccessibilityTable::addChildren(void)::$_1::operator()(*(_QWORD *)(v34 + 16));
          v35 = *(unsigned int **)(v34 + 8);
          v36 = **(_DWORD **)v34 + 1;
          **(_DWORD **)v34 = v36;
        }
        while (v36 < *v35);
      }
      v37 = *(_QWORD *)(v34 + 24);
      if (*(_DWORD *)(v37 + 8))
      {
        v38 = *(_DWORD *)(v37 + 12);
        if (v38)
        {
          v39 = *(unsigned int ***)v37;
          v40 = *(_QWORD *)v37 + 24 * v38;
          do
          {
            v41 = *v39;
            *v39 = 0;
            if (v41)
            {
              do
              {
                v42 = __ldaxr(v41);
                v43 = v42 - 1;
              }
              while (__stlxr(v43, v41));
              if (!v43)
              {
                atomic_store(1u, v41);
                WTF::fastFree((WTF *)v41, v13);
              }
            }
            v39 += 3;
          }
          while (v39 != (unsigned int **)v40);
          *(_DWORD *)(v37 + 12) = 0;
        }
        v61 = *(WTF **)v37;
        if (*(_QWORD *)v37)
        {
          *(_QWORD *)v37 = 0;
          *(_DWORD *)(v37 + 8) = 0;
          WTF::fastFree(v61, v13);
        }
      }
    }
    if ((*(_WORD *)(v9 + 28) & 0x10) != 0)
      v33 = v11;
    else
      v33 = 1;
    if ((v33 & 1) == 0 && *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::tfootTag + 24))
    {
      v44 = *(_QWORD *)(a1 + 80);
      v45 = *(unsigned int *)(v44 + 12);
      if ((_DWORD)v45 != *(_DWORD *)(v44 + 8))
      {
        v46 = *(_QWORD **)v44;
        *(_DWORD *)(v9 + 24) += 2;
        v46[v45] = v9;
        *(_DWORD *)(v44 + 12) = v45 + 1;
        return;
      }
      v70 = v45 + (v45 >> 2);
      if (v70 >= 0x10)
        v71 = v70 + 1;
      else
        v71 = 16;
      if (v71 <= v45 + 1)
        v72 = v45 + 1;
      else
        v72 = v71;
      if (v72 >> 29)
        goto LABEL_111;
      v73 = *(_QWORD **)v44;
      v74 = (void *)WTF::fastMalloc((WTF *)(8 * v72));
      *(_DWORD *)(v44 + 8) = v72;
      *(_QWORD *)v44 = v74;
      memcpy(v74, v73, 8 * v45);
      if (v73)
      {
        if (*(_QWORD **)v44 == v73)
        {
          *(_QWORD *)v44 = 0;
          *(_DWORD *)(v44 + 8) = 0;
        }
        WTF::fastFree((WTF *)v73, v75);
      }
      v76 = *(unsigned int *)(v44 + 12);
      v77 = *(_QWORD **)v44;
      *(_DWORD *)(v9 + 24) += 2;
      v77[v76] = v9;
      *(_DWORD *)(v44 + 12) = v76 + 1;
    }
    else if (v14)
    {
      WebCore::AccessibilityTable::addChildren(void)::$_6::operator()(*(uint64_t ***)(a1 + 88), (WebCore::Node *)v9);
    }
    return;
  }
  if (!(*(unsigned int (**)(unsigned int *))(*(_QWORD *)v4 + 3328))(v4))
    return;
  v25 = **(_QWORD **)(a1 + 16);
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 8);
    if (!v3)
      return;
  }
  else
  {
    v26 = 0;
    if (!v3)
      return;
  }
  v47 = WebCore::AXObjectCache::getOrCreate(v26, v3, 0);
  if (v47)
  {
    v48 = v47;
    v49 = *(uint64_t ***)(a1 + 48);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 400))(v47)
      || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 840))(v48))
    {
      v50 = *v49;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v48 + 48))(v48))
        v51 = v48;
      else
        v51 = 0;
      v52 = *v50;
      if (*v50)
      {
        v53 = *(_DWORD *)(v52 - 8);
        v54 = (~(v51 << 32) + v51) ^ ((unint64_t)(~(v51 << 32) + v51) >> 22);
        v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
        v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
        v57 = v53 & ((v56 >> 31) ^ v56);
        v58 = *(_QWORD *)(v52 + 8 * v57);
        if (v58 == v51)
          return;
        v59 = 1;
        while (v58)
        {
          v57 = (v57 + v59) & v53;
          v58 = *(_QWORD *)(v52 + 8 * v57);
          ++v59;
          if (v58 == v51)
            return;
        }
      }
      v63 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 1896))(v48, 1);
      v64 = *(unsigned int *)(v63 + 12);
      if ((_DWORD)v64)
      {
        v65 = *(uint64_t **)v63;
        v66 = 8 * v64;
        while (1)
        {
          v67 = *(_QWORD *)(a1 + 56);
          v68 = *v65;
          if (*v65)
            v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 840))(v68);
          v79 = v68;
          v69 = *(_QWORD *)(v67 + 24);
          if (!v69)
            break;
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v69 + 48))(v69, &v79);
          ++v65;
          v66 -= 8;
          if (!v66)
            return;
        }
        std::__throw_bad_function_call[abi:sn180100]();
LABEL_111:
        __break(0xC471u);
      }
    }
  }
}

unsigned int *WTF::Vector<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = 16 * v5;
        v9 = (_DWORD *)((char *)v4 + 8);
        do
        {
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v7 + 1) = 0;
          v10 = *((_QWORD *)v9 - 1);
          *((_QWORD *)v9 - 1) = 0;
          *(_QWORD *)v7 = v10;
          LODWORD(v10) = *v9;
          *v9 = 0;
          v7[2] = v10;
          LODWORD(v10) = v9[1];
          v9[1] = 0;
          v7[3] = v10;
          result = (unsigned int *)*((_QWORD *)v9 - 1);
          if (result)
          {
            *((_QWORD *)v9 - 1) = 0;
            *v9 = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v9 += 4;
          v7 += 4;
          v8 -= 16;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::AcceleratedTimeline::updateEffectStacks(WTF::StringImpl *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  _BOOL4 v9;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  uint64_t *v20;
  BOOL v21;
  _BOOL4 v22;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  char v31;

  v3 = *(uint64_t **)this;
  *(_QWORD *)this = 0;
  if (v3)
  {
    v4 = *((unsigned int *)v3 - 1);
    v5 = &v3[4 * v4];
    if (*((_DWORD *)v3 - 3))
    {
      v6 = v3;
      if ((_DWORD)v4)
      {
        v2 = (WTF::StringImpl *)MEMORY[0x1E0CBF2F8];
        this = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
        v7 = 32 * v4;
        v6 = v3;
        while (1)
        {
          if (this)
            *(_DWORD *)this += 2;
          if (*v6)
            v8 = 1;
          else
            v8 = *((_BYTE *)v6 + 24) == 0;
          v9 = !v8 && *((_DWORD *)v6 + 2) == 24 && v6[2] == (_QWORD)this;
          if (this)
          {
            if (*(_DWORD *)this == 2)
            {
              WTF::StringImpl::destroy(this, a2);
              this = *(WTF::StringImpl **)v2;
            }
            else
            {
              *(_DWORD *)this -= 2;
            }
          }
          v11 = *v6 == -1 || v9;
          if (v11 != 1)
            break;
          v6 += 4;
          v7 -= 32;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_33;
          }
        }
      }
      goto LABEL_32;
    }
    v6 = &v3[4 * v4];
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = &v3[4 * v4];
LABEL_32:
  if (v3)
LABEL_33:
    v12 = &v3[4 * *((unsigned int *)v3 - 1)];
  else
    v12 = 0;
  if (v12 == v6)
    goto LABEL_93;
  v13 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  do
  {
    v14 = *v6;
    v15 = *((unsigned __int8 *)v6 + 24);
    if (*((_BYTE *)v6 + 24))
    {
      v16 = *((_DWORD *)v6 + 2);
      v2 = (WTF::StringImpl *)v6[2];
      if (v2)
      {
        v17 = *(_DWORD *)v2;
        v18 = *(_DWORD *)v2 + 2;
        *(_DWORD *)v2 = v18;
        if (!v14)
          goto LABEL_56;
        v28 = v14;
        v29 = v16;
        *(_DWORD *)v2 = v17 + 4;
      }
      else
      {
        if (!v14)
          goto LABEL_58;
        v28 = *v6;
        v29 = v16;
      }
      v30 = v2;
      v19 = 1;
    }
    else
    {
      if (!v14)
        goto LABEL_59;
      v19 = 0;
      v28 = *v6;
      LOBYTE(v29) = 0;
    }
    v31 = v19;
    this = (WTF::StringImpl *)WebCore::Styleable::renderer((WebCore::Styleable *)&v28);
    if (this)
    {
      if ((*((_BYTE *)this + 45) & 0x10) != 0 && (*((_BYTE *)this + 21) & 0x80) != 0)
      {
        this = *(WTF::StringImpl **)(*((_QWORD *)this + 18) + 256);
        if (this)
          this = (WTF::StringImpl *)WebCore::RenderLayerBacking::updateAcceleratedEffectsAndBaseValues(this, a2);
      }
    }
    if (!v31)
      goto LABEL_53;
    this = v30;
    v30 = 0;
    if (!this)
      goto LABEL_53;
    if (*(_DWORD *)this != 2)
    {
      *(_DWORD *)this -= 2;
LABEL_53:
      if (!v15)
        goto LABEL_59;
      goto LABEL_54;
    }
    this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
    if (!v15)
      goto LABEL_59;
LABEL_54:
    if (v2)
    {
      v18 = *(_DWORD *)v2;
LABEL_56:
      if (v18 == 2)
        this = (WTF::StringImpl *)WTF::StringImpl::destroy(v2, a2);
      else
        *(_DWORD *)v2 = v18 - 2;
LABEL_58:
      v2 = 0;
    }
LABEL_59:
    v20 = v6 + 4;
    v6 = v5;
    if (v20 == v5)
      continue;
    v6 = v20;
    do
    {
      this = (WTF::StringImpl *)*v13;
      if (*v13)
        *(_DWORD *)this += 2;
      if (*v6)
        v21 = 1;
      else
        v21 = *((_BYTE *)v6 + 24) == 0;
      if (v21)
      {
        v22 = 0;
        if (this)
          goto LABEL_77;
      }
      else
      {
        v22 = *((_DWORD *)v6 + 2) == 24 && v6[2] == (_QWORD)this;
        if (this)
        {
LABEL_77:
          if (*(_DWORD *)this == 2)
            this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
          else
            *(_DWORD *)this -= 2;
        }
      }
      v24 = *v6 == -1 || v22;
      if (v24 != 1)
        goto LABEL_86;
      v6 += 4;
    }
    while (v6 != v5);
    v6 = v5;
LABEL_86:
    ;
  }
  while (v6 != v12);
LABEL_93:
  if (v3)
  {
    v25 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v25)
    {
      v26 = v3 + 2;
      do
      {
        if (*(v26 - 2) != -1)
        {
          if (*((_BYTE *)v26 + 8))
          {
            v27 = (WTF::StringImpl *)*v26;
            *v26 = 0;
            if (v27)
            {
              if (*(_DWORD *)v27 == 2)
                WTF::StringImpl::destroy(v27, a2);
              else
                *(_DWORD *)v27 -= 2;
            }
          }
        }
        v26 += 4;
        --v25;
      }
      while (v25);
    }
    return (WTF::StringImpl *)WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return this;
}

void WebCore::AnimationEffect::~AnimationEffect(WebCore::AnimationEffect *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E338C638;
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v11 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v11)
      {
        v14 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v11));
        v3 = v14;
      }
      v12 = *(WTF **)(v3 + 16);
      if (v12)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v13 = v3;
        WTF::fastFree(v12, a2);
        v3 = v13;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::AnimationEffect::~AnimationEffect(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WTF::StringImpl *WebCore::AnimationEffect::getBindingsTiming@<X0>(WebCore::AnimationEffect *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  float64x2_t v8;
  float64x2_t v9;
  __int128 v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  v4 = *((_QWORD *)this + 12);
  if (v4)
  {
    v5 = *(_QWORD **)(v4 + 8);
    if (v5)
    {
      if ((*(unsigned int (**)(_QWORD *))(*v5 + 104))(v5))
      {
        v20 = (_QWORD *)v5[7];
        if (v20)
        {
          if ((*(unsigned int (**)(_QWORD *))(*v20 + 24))(v20))
          {
            v21 = v20[33];
            if (v21)
              WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(*(_QWORD *)(v21 + 40) + 8));
          }
        }
      }
    }
  }
  v6 = (WTF::StringImpl *)WebCore::autoAtomData;
  if (WebCore::autoAtomData)
    *(_DWORD *)WebCore::autoAtomData += 2;
  *(_QWORD *)a2 = v6;
  *(_DWORD *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)(a2 + 57) = 0;
  v8 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
  v9 = vdivq_f64(vrndaq_f64(vmulq_f64(vmulq_f64(*(float64x2_t *)((char *)this + 56), v8), v8)), v8);
  *(_BYTE *)(a2 + 56) = *((_BYTE *)this + 32);
  v10 = *(_OWORD *)((char *)this + 40);
  *(int8x16_t *)(a2 + 16) = vbicq_s8((int8x16_t)v9, (int8x16_t)vceqzq_f64(v9));
  *(_OWORD *)(a2 + 32) = v10;
  v11 = *((double *)this + 9);
  if (v11 == 0.0)
  {
    v12 = WebCore::autoAtomData;
    if (WebCore::autoAtomData)
      *(_DWORD *)WebCore::autoAtomData += 2;
    *(_QWORD *)a2 = v12;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v7);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  else
  {
    v13 = round(v11 * 1000.0 * 1000.0) / 1000.0;
    if (v13 == 0.0)
      v14 = 0.0;
    else
      v14 = v13;
    v15 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v7);
      else
        *(_DWORD *)v15 -= 2;
    }
    *(double *)a2 = v14;
    *(_DWORD *)(a2 + 8) = 0;
  }
  *(_BYTE *)(a2 + 57) = *((_BYTE *)this + 33);
  WebCore::TimingFunction::cssText(*((WebCore::TimingFunction **)this + 3), &v23);
  v17 = v23;
  v23 = 0;
  result = *(WTF::StringImpl **)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v17;
  if (result)
  {
    v19 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result != 2)
    {
LABEL_20:
      *(_DWORD *)result = v19;
      return result;
    }
    WTF::StringImpl::destroy(result, v16);
    result = v23;
    v23 = 0;
    if (result)
    {
      v19 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t WebCore::AnimationEffect::getBasicTiming@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  char v14;
  uint64_t v15;
  double v16;

  v3 = *(double *)(result + 96);
  if (v3 == 0.0)
    goto LABEL_32;
  v4 = *(_QWORD *)(*(_QWORD *)&v3 + 8);
  if (!v4)
  {
    v3 = 0.0;
LABEL_32:
    v15 = 0;
    LODWORD(v5) = 0;
    goto LABEL_6;
  }
  v15 = 1;
  *(_QWORD *)&v3 = *(_QWORD *)(v4 + 104) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(v4 + 104);
  v5 = *(_QWORD *)(result + 96);
  if (v5)
  {
    v5 = *(_QWORD *)(v5 + 8);
    if (v5)
      LODWORD(v5) = *(double *)(v5 + 120) + 0.0 < 0.0;
  }
LABEL_6:
  v6 = *(double *)(result + 56);
  v8 = *(double *)(result + 80);
  v7 = *(double *)(result + 88);
  if (v7 >= v6)
    v9 = *(double *)(result + 56);
  else
    v9 = *(double *)(result + 88);
  v10 = 0.0;
  if (v9 >= 0.0)
    v11 = v9;
  else
    v11 = 0.0;
  v12 = v6 + v8;
  if (v7 < v6 + v8)
    v12 = *(double *)(result + 88);
  if (v12 >= 0.0)
    v10 = v12;
  if (!v15)
  {
    v14 = 3;
    v3 = NAN;
LABEL_23:
    v13 = NAN;
    goto LABEL_24;
  }
  if (v3 + 0.000001 >= v11)
  {
    if (!(_DWORD)v5)
    {
      if (v3 + -0.000001 <= v10 && vabdd_f64(v3 * 1000.0 * 1000.0, v10 * 1000.0 * 1000.0) >= 1.0)
        goto LABEL_21;
LABEL_34:
      if ((*(unsigned __int8 *)(result + 32) | 2) == 3)
      {
        v16 = v3 - v6;
        if (v8 < v16)
          v16 = *(double *)(result + 80);
        if (v16 >= 0.0)
          v13 = v16;
        else
          v13 = 0.0;
      }
      else
      {
        v13 = NAN;
      }
      v14 = 2;
      goto LABEL_24;
    }
    if (vabdd_f64(v3 * 1000.0 * 1000.0, v11 * 1000.0 * 1000.0) >= 1.0)
    {
      if (v3 + -0.000001 <= v10)
      {
LABEL_21:
        v13 = v3 - v6;
        v14 = 1;
        goto LABEL_24;
      }
      goto LABEL_34;
    }
  }
  if ((*(_BYTE *)(result + 32) & 0xFE) != 2)
  {
    v14 = 0;
    goto LABEL_23;
  }
  v14 = 0;
  v13 = v3 - v6;
  if (v3 - v6 < 0.0)
    v13 = 0.0;
LABEL_24:
  *(double *)a2 = v3;
  *(double *)(a2 + 8) = v13;
  *(double *)(a2 + 16) = v7;
  *(double *)(a2 + 24) = v8;
  *(_BYTE *)(a2 + 32) = v14;
  return result;
}

void WebCore::AnimationEffectTiming::resolve(_QWORD *a1@<X0>, double a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  char v14;
  int v15;
  double v16;
  int v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  int64x2_t v21;
  double v22;
  double v23;
  long double v24;
  double v25;
  BOOL v26;
  double v27;
  char v28;
  unsigned int v29;
  double v30;
  double v31;
  double v35;
  double v36;
  double v37;

  v7 = *((double *)a1 + 4);
  v9 = *((double *)a1 + 7);
  v8 = *((double *)a1 + 8);
  if (v8 >= v7)
    v10 = *((double *)a1 + 4);
  else
    v10 = *((double *)a1 + 8);
  v11 = 0.0;
  if (v10 >= 0.0)
    v12 = v10;
  else
    v12 = 0.0;
  if (v8 >= v7 + v9)
    v8 = v7 + v9;
  if (v8 >= 0.0)
    v13 = v8;
  else
    v13 = 0.0;
  if (!a3)
  {
    LOBYTE(v17) = 3;
    goto LABEL_33;
  }
  if (a2 + 0.000001 < v12)
    goto LABEL_69;
  if (a5 >= 0.0)
  {
    if (a2 + -0.000001 <= v13 && vabdd_f64(a2 * 1000.0 * 1000.0, v13 * 1000.0 * 1000.0) >= 1.0)
      goto LABEL_17;
    goto LABEL_76;
  }
  if (vabdd_f64(a2 * 1000.0 * 1000.0, v12 * 1000.0 * 1000.0) < 1.0)
  {
LABEL_69:
    if ((a1[1] & 0xFE) == 2)
    {
      v15 = 0;
      v17 = 0;
      if (a2 - v7 >= 0.0)
        v16 = a2 - v7;
      else
        v16 = 0.0;
      v14 = 1;
      goto LABEL_18;
    }
    LOBYTE(v17) = 0;
LABEL_33:
    v28 = 1;
    v27 = 0.0;
    goto LABEL_34;
  }
  if (a2 + -0.000001 > v13)
  {
LABEL_76:
    if ((*((unsigned __int8 *)a1 + 8) | 2) == 3)
    {
      v14 = 0;
      v36 = a2 - v7;
      if (v9 < a2 - v7)
        v36 = *((double *)a1 + 7);
      v16 = v36;
      if (v36 < 0.0)
        v16 = 0.0;
      v17 = 2;
      v15 = 1;
      goto LABEL_18;
    }
    LOBYTE(v17) = 2;
    goto LABEL_33;
  }
LABEL_17:
  v14 = 0;
  v15 = 0;
  v16 = a2 - v7;
  v17 = 1;
LABEL_18:
  v18.f64[0] = v16;
  v37 = v16;
  if (*((double *)a1 + 6) == 0.0)
  {
    v22 = 0.0;
    if ((v14 & 1) == 0)
      v22 = *((double *)a1 + 3);
  }
  else
  {
    v18.f64[1] = (float64_t)a1[6];
    v19 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
    v20 = vdivq_f64(vrndaq_f64(vmulq_f64(vmulq_f64(v18, v19), v19)), v19);
    v21 = (int64x2_t)vbicq_s8((int8x16_t)v20, (int8x16_t)vceqzq_f64(v20));
    *(_QWORD *)&v22 = *(_OWORD *)&vdivq_f64((float64x2_t)v21, (float64x2_t)vdupq_laneq_s64(v21, 1));
  }
  v23 = fabs(v22 + *((double *)a1 + 2));
  if (v23 == INFINITY)
    v24 = *((double *)a1 + 2);
  else
    v24 = v23;
  v11 = 1.0;
  v25 = fmod(v24, 1.0);
  v26 = v25 != 0.0 || (v17 - 1) > 1;
  if (v26 || vabdd_f64(v37 * 1000.0 * 1000.0, v9 * 1000.0 * 1000.0) >= 1.0 || *((double *)a1 + 3) == 0.0)
    v11 = v25;
  if (v15 && (v27 = INFINITY, fabs(*((double *)a1 + 3)) == INFINITY))
  {
    v28 = 0;
    LOBYTE(v17) = 2;
  }
  else
  {
    v27 = floor(v23);
    v28 = 0;
    if (v11 == 1.0)
    {
      v27 = v27 + -1.0;
      v11 = 1.0;
    }
  }
LABEL_34:
  v29 = *((unsigned __int8 *)a1 + 9);
  if (v29 >= 2)
  {
    if ((v28 & 1) == 0)
    {
      v31 = v27 + 1.0;
      if (v29 != 3)
        v31 = v27;
      v29 = v31 == 0.0
         || (*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL
         || (*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000
         || ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
      if (fmod(v31, 2.0) == 0.0)
        v29 = 0;
      goto LABEL_59;
    }
LABEL_38:
    v27 = NAN;
    v30 = NAN;
    v11 = NAN;
    goto LABEL_39;
  }
  if ((v28 & 1) != 0)
    goto LABEL_38;
LABEL_59:
  if (v29)
    v30 = 1.0 - v11;
  else
    v30 = v11;
  if (*((double *)a1 + 6) != 0.0)
  {
    if (*a1)
      (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
    WebCore::TimingFunction::transformProgress((WebCore::TimingFunction *)*a1, v30, *((double *)a1 + 6));
    v30 = v35;
  }
LABEL_39:
  *(double *)a4 = v27;
  *(_BYTE *)(a4 + 8) = v17;
  *(double *)(a4 + 16) = v30;
  *(double *)(a4 + 24) = v11;
}

WTF::StringImpl *WebCore::AnimationEffect::bindingsUpdateTiming@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  uint64_t v12;
  _WORD *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  int v17;
  __n128 v18;
  unsigned int v19;
  _BYTE v20[8];
  int v21;
  char v22;
  __int128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  _BYTE v28[8];
  int v29;
  char v30;
  __int128 v31;
  __n128 v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  __int16 v35;
  char v36;
  char v37;

  v28[0] = 0;
  v36 = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v30 = 0;
    if (*(_BYTE *)(a2 + 16))
    {
      v29 = -1;
      v8 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(char *, _BYTE *, uint64_t))off_1E338CAE0[v8])(&v37, v28, a2);
        v29 = v8;
      }
      v30 = 1;
    }
    v31 = *(_OWORD *)(a2 + 24);
    a5 = *(__n128 *)(a2 + 40);
    v32 = a5;
    v9 = *(WTF::StringImpl **)(a2 + 64);
    v33 = *(_QWORD *)(a2 + 56);
    if (v9)
      *(_DWORD *)v9 += 2;
    v34 = v9;
    v35 = *(_WORD *)(a2 + 72);
    v36 = 1;
  }
  result = (WTF::StringImpl *)WebCore::AnimationEffect::updateTiming(a1, (uint64_t)v28, a3, a4, a5);
  if (v36)
  {
    result = v34;
    v34 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
    if (v30)
    {
      if (v29 != -1)
        result = (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v29])(&v37, v28);
      v29 = -1;
    }
  }
  if (!*(_BYTE *)(a4 + 16))
  {
    if (*(_BYTE *)(a2 + 80))
    {
      v12 = *(_QWORD *)(a1 + 96);
      if (v12)
      {
        v13 = *(_WORD **)(v12 + 8);
        if (v13)
        {
          result = (WTF::StringImpl *)(*(uint64_t (**)(_WORD *))(*(_QWORD *)v13 + 112))(v13);
          if ((_DWORD)result)
          {
            if (!*(_BYTE *)(a2 + 80))
            {
              __break(1u);
              return result;
            }
            v20[0] = 0;
            v22 = 0;
            v15 = *(unsigned __int8 *)(a2 + 16);
            if (*(_BYTE *)(a2 + 16))
            {
              v21 = -1;
              v16 = *(unsigned int *)(a2 + 8);
              if ((_DWORD)v16 != -1)
              {
                ((void (*)(char *, _BYTE *, uint64_t))off_1E338CAE0[v16])(&v37, v20, a2);
                v21 = v16;
              }
              v17 = 1;
              v22 = 1;
            }
            else
            {
              v17 = 0;
            }
            v23 = *(_OWORD *)(a2 + 24);
            v18 = *(__n128 *)(a2 + 40);
            v24 = v18;
            result = *(WTF::StringImpl **)(a2 + 64);
            v25 = *(_QWORD *)(a2 + 56);
            if (result)
              *(_DWORD *)result += 2;
            v19 = *(unsigned __int16 *)(a2 + 72);
            v27 = *(_WORD *)(a2 + 72);
            if (v15)
              v13[120] |= 2u;
            if (BYTE8(v23))
              v13[120] |= 8u;
            v18.n128_u64[0] = v24.n128_u64[0];
            v13[120] |= 0x40u;
            if (result)
              v13[120] |= 4u;
            if ((_BYTE)v19 != 0xFF)
              v13[120] |= 0x80u;
            if (v19 >> 8 <= 0xFE)
              v13[120] |= 0x10u;
            v26 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
              {
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
                if (!v22)
                  return result;
                goto LABEL_46;
              }
              *(_DWORD *)result -= 2;
            }
            if (!v17)
              return result;
LABEL_46:
            if (v21 != -1)
              return (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v21])(&v37, v20, v18);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::AnimationEffect::updateTiming@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  double v16;
  int v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  WebCore::AnimationEffect *v22;
  double v23;
  _QWORD v24[2];
  int v25;
  char v26;

  if (!*(_BYTE *)(a2 + 80))
    goto LABEL_43;
  if (*(double *)(a2 + 56) < 0.0)
    goto LABEL_16;
  v7 = result;
  if (*(_BYTE *)(a2 + 32))
  {
    if (*(double *)(a2 + 24) < 0.0)
      goto LABEL_16;
  }
  if (!*(_BYTE *)(a2 + 16))
  {
LABEL_12:
    result = a2 + 64;
    if (*(_QWORD *)(a2 + 64))
    {
      result = WebCore::TimingFunction::createFromCSSText((WebCore::TimingFunction *)result, (uint64_t)v24);
      if (v25)
      {
        if (v25 == 1)
        {
          v9 = v24[1];
          *(_BYTE *)a4 = v24[0];
          *(_QWORD *)(a4 + 8) = v9;
LABEL_17:
          *(_BYTE *)(a4 + 16) = 1;
          return result;
        }
        goto LABEL_48;
      }
      v10 = v24[0];
      if (v24[0])
        ++*(_DWORD *)(v24[0] + 8);
      v11 = *(_DWORD **)(v7 + 24);
      *(_QWORD *)(v7 + 24) = v10;
      if (!v11)
        goto LABEL_47;
      v12 = v11[2];
      v13 = v12 - 1;
      if (v12 == 1)
      {
        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
        v14 = v25;
        if (v25 == -1)
          goto LABEL_24;
      }
      else
      {
        v14 = 0;
        v11[2] = v13;
      }
      while (1)
      {
        result = ((uint64_t (*)(char *, _QWORD *))off_1E338CAF0[v14])(&v26, v24);
LABEL_24:
        if (*(_BYTE *)(a2 + 80))
          break;
LABEL_46:
        __break(1u);
LABEL_47:
        v14 = 0;
      }
    }
    *(double *)(v7 + 56) = *(double *)(a2 + 40) / 1000.0;
    *(double *)(v7 + 64) = *(double *)(a2 + 48) / 1000.0;
    v15 = *(unsigned __int8 *)(a2 + 72);
    if (v15 != 255)
      *(_BYTE *)(v7 + 32) = v15;
    *(_QWORD *)(v7 + 40) = *(_QWORD *)(a2 + 56);
    if (*(_BYTE *)(a2 + 32))
      *(_QWORD *)(v7 + 48) = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(a2 + 16))
    {
      v16 = 0.0;
      if (!*(_DWORD *)(a2 + 8))
        v16 = *(double *)a2 / 1000.0;
      *(double *)(v7 + 72) = v16;
    }
    v17 = *(unsigned __int8 *)(a2 + 73);
    if (v17 != 255)
      *(_BYTE *)(v7 + 33) = v17;
    v18 = *(double *)(v7 + 72);
    v19 = 0.0;
    if (v18 != 0.0)
    {
      v20 = *(double *)(v7 + 48);
      if (v20 != 0.0)
        v19 = v18 * v20;
    }
    *(double *)(v7 + 80) = v19;
    a5.n128_f64[0] = *(double *)(v7 + 64) + v19 + *(double *)(v7 + 56);
    if (a5.n128_f64[0] < 0.0)
      a5.n128_u64[0] = 0;
    *(_QWORD *)(v7 + 88) = a5.n128_u64[0];
    v21 = *(_QWORD *)(v7 + 96);
    if (v21)
    {
      result = *(_QWORD *)(v21 + 8);
      if (result)
        result = WebCore::WebAnimation::effectTimingDidChange((WebCore::WebAnimation *)result, a5);
    }
LABEL_43:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    return result;
  }
  v8 = *(_DWORD *)(a2 + 8);
  if (v8 == 1)
  {
    result = WTF::equal(*(WTF **)a2, (const WTF::StringImpl *)WebCore::autoAtomData, a3);
    if ((result & 1) == 0)
    {
LABEL_16:
      *(_BYTE *)a4 = 33;
      *(_QWORD *)(a4 + 8) = 0;
      goto LABEL_17;
    }
    if (!*(_BYTE *)(a2 + 80))
      goto LABEL_46;
    goto LABEL_12;
  }
  if (!v8)
  {
    if (*(double *)a2 < 0.0)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_48:
  v22 = (WebCore::AnimationEffect *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::AnimationEffect::progressUntilNextStep(v22, v23);
}

uint64_t WebCore::AnimationEffect::progressUntilNextStep(WebCore::AnimationEffect *this, double a2)
{
  _DWORD *v2;
  double v3;
  int v6;

  v2 = (_DWORD *)*((_QWORD *)this + 3);
  v3 = 0.0;
  if (v2)
  {
    ++v2[2];
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v2 + 24))(v2) == 2)
    {
      v6 = v2[2];
      v3 = ceil((double)(int)v2[3] * a2) / (double)(int)v2[3] - a2;
      if (v6 == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
      else
        v2[2] = v6 - 1;
    }
    else if (v2[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    }
    else
    {
      --v2[2];
    }
  }
  return *(_QWORD *)&v3;
}

double WebCore::AnimationEffect::timeToNextTick(double *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  int8x16_t ComputedTiming;
  double v6;
  WTF::StringImpl *v7;
  double v8;
  double v9;
  char v10;
  double v12;
  _BYTE v13[8];
  int v14;
  WTF::StringImpl *v15;
  double v16;
  char v17;

  if (*(_BYTE *)(a2 + 32) != 1)
  {
    if (*(_BYTE *)(a2 + 32))
      return INFINITY;
    v12 = a1[7];
    return v12 - *(double *)a2;
  }
  if (((*(uint64_t (**)(double *))(*(_QWORD *)a1 + 104))(a1) & 1) == 0)
  {
    v12 = a1[11];
    return v12 - *(double *)a2;
  }
  ComputedTiming = WebCore::AnimationEffect::getComputedTiming((uint64_t)a1, (uint64_t)v13);
  v6 = v16;
  v7 = v15;
  v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (v14 != -1)
    ((void (*)(char *, _BYTE *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v14])(&v17, v13, (__n128)ComputedTiming);
  v8 = 0.0;
  v9 = COERCE_DOUBLE((*(uint64_t (**)(double *, double))(*(_QWORD *)a1 + 112))(a1, v6));
  if (v10)
    return a1[9] * v9;
  return v8;
}

void WebCore::AnimationEventBase::~AnimationEventBase(WebCore::AnimationEventBase *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E338C6C0;
  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 72))(v3);
    else
      --v3[6];
  }
  WebCore::Event::~Event(this, a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E338C6C0;
  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 72))(v3);
    else
      --v3[6];
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::AnimationPlaybackEvent::~AnimationPlaybackEvent(WebCore::AnimationPlaybackEvent *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E338C6C0;
  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 72))(v3);
    else
      --v3[6];
  }
  WebCore::Event::~Event(this, a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E338C6C0;
  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 72))(v3);
    else
      --v3[6];
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::AnimationTimeline::~AnimationTimeline(WebCore::AnimationTimeline *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  _DWORD *v10;
  WTF *v11;

  *(_QWORD *)this = off_1E338C880;
  v3 = (WTF *)*((_QWORD *)this + 4);
  while (v3)
  {
    v9 = v3;
    v3 = (WTF *)*((_QWORD *)v3 + 2);
    v10 = *(_DWORD **)v9;
    *(_QWORD *)v9 = 0;
    if (v10)
    {
      if (v10[6] == 1)
      {
        v11 = v9;
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 72))(v10);
        v9 = v11;
      }
      else
      {
        --v10[6];
      }
    }
    WTF::fastFree(v9, a2);
  }
  v4 = *((_QWORD *)this + 3);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::AnimationTimeline::~AnimationTimeline(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t *WTF::ListHashSet<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::DefaultHash<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int i;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  unsigned int v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>> *>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = ~(*a2 << 32) + *a2;
  v10 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = (v11 >> 31) ^ v11;
  for (i = 1; ; ++i)
  {
    v14 = v12 & v7;
    v15 = (_QWORD *)(v6 + 8 * (v12 & v7));
    v16 = (_QWORD *)*v15;
    if (!*v15)
      break;
    if (v16 != (_QWORD *)-1)
    {
      v15 = v8;
      if (*v16 == *a2)
      {
        v17 = 0;
        goto LABEL_9;
      }
    }
    v12 = i + v14;
    v8 = v15;
  }
  if (v8)
  {
    *v8 = 0;
    --*(_DWORD *)(*v4 - 16);
    v15 = v8;
  }
  result = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  v18 = *a2;
  *a2 = 0;
  result[1] = 0;
  result[2] = 0;
  *result = v18;
  *v15 = result;
  v19 = *v4;
  if (*v4)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_18;
    goto LABEL_25;
  }
  if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v27 = 8;
      goto LABEL_30;
    }
LABEL_25:
    v27 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_30:
    v15 = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>> *>>::rehash(v4, v27, (_QWORD **)v15);
    result = (uint64_t *)*v15;
  }
LABEL_18:
  v25 = v4[2];
  result[1] = v25;
  result[2] = 0;
  if (v25)
    v26 = (uint64_t **)(v25 + 16);
  else
    v26 = (uint64_t **)(v4 + 1);
  *v26 = result;
  v4[2] = (uint64_t)result;
  v16 = (_QWORD *)*v15;
  v17 = 1;
LABEL_9:
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v16;
  *(_BYTE *)(a3 + 16) = v17;
  return result;
}

void WebCore::AnimationTimeline::removeAnimation(WebCore::AnimationTimeline *this, WebCore::WebAnimation *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  WTF *v12;
  WebCore::KeyframeEffect *v13;
  WebCore::Node *v14;
  int v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WebCore::KeyframeEffectStack *v22;
  WTF *v23;
  void *v24;
  WebCore::Node *v25;
  int v26;
  WTF::StringImpl *v27;
  char v28;
  char v29;

  v5 = *((_QWORD *)this + 3);
  v3 = (uint64_t *)((char *)this + 24);
  v4 = v5;
  if (!v5)
    goto LABEL_29;
  v6 = *(_DWORD *)(v4 - 8);
  v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  for (i = 1; ; ++i)
  {
    v12 = *(WTF **)(v4 + 8 * v10);
    if (v12 != (WTF *)-1)
    {
      if (!v12)
        goto LABEL_8;
      if (*(WebCore::WebAnimation **)v12 == a2)
        break;
    }
    v10 = (v10 + i) & v6;
  }
  if (v10 == *(_DWORD *)(v4 - 4))
    v12 = 0;
LABEL_8:
  while (1)
  {
    WTF::ListHashSet<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::DefaultHash<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::remove(v3, v3, v12);
    v13 = (WebCore::KeyframeEffect *)*((_QWORD *)a2 + 7);
    if (!v13)
      break;
    if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v13 + 24))(*((_QWORD *)a2 + 7)))
      break;
    v14 = (WebCore::Node *)*((_QWORD *)v13 + 33);
    if (!v14)
      break;
    if (*((_BYTE *)v13 + 288))
    {
      v15 = *((_DWORD *)v13 + 68);
      v16 = (WTF::StringImpl *)*((_QWORD *)v13 + 35);
      if (v16)
        *(_DWORD *)v16 += 2;
      v25 = v14;
      v26 = v15;
      v27 = v16;
      v28 = 1;
    }
    else
    {
      v25 = (WebCore::Node *)*((_QWORD *)v13 + 33);
      LOBYTE(v26) = 0;
      v28 = 0;
    }
    v29 = 1;
    v3 = (uint64_t *)WebCore::Styleable::animationWasRemoved((WebCore::Styleable *)&v25, a2);
    if (v29)
    {
      v17 = (uint64_t *)WebCore::Element::ensureAnimationRareData(v25, (uint64_t)&v26);
      v18 = *v17;
      if (!*v17)
      {
        v18 = WTF::fastMalloc((WTF *)0x50);
        *(_OWORD *)v18 = 0u;
        *(_OWORD *)(v18 + 16) = 0u;
        *(_OWORD *)(v18 + 32) = 0u;
        *(_OWORD *)(v18 + 48) = 0u;
        *(_QWORD *)(v18 + 64) = 0;
        *(_BYTE *)(v18 + 72) = 1;
        v22 = (WebCore::KeyframeEffectStack *)*v17;
        *v17 = v18;
        if (v22)
        {
          WebCore::KeyframeEffectStack::~KeyframeEffectStack(v22, v21);
          WTF::fastFree(v23, v24);
          v18 = *v17;
        }
      }
      WebCore::KeyframeEffectStack::removeEffect((WebCore::KeyframeEffectStack *)v18, v13);
      if (v29)
      {
        if (v28)
        {
          v20 = v27;
          v27 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v19);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
      }
      return;
    }
    __break(1u);
LABEL_29:
    v12 = 0;
  }
}

double WTF::Vector<WebCore::BlendingKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = a3;
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 8))
  {
    v3 = WTF::Vector<WebCore::BlendingKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v6 + 1, a3);
    LODWORD(v6) = *(_DWORD *)(a1 + 12);
  }
  v7 = *(_QWORD *)a1;
  v8 = (_QWORD *)(*(_QWORD *)a1 + 48 * (_QWORD)a2);
  if ((void *)v6 != a2)
  {
    v9 = 0;
    v10 = 3 * v6;
    v11 = v7 + 16 * v10;
    v12 = 48 * (_QWORD)a2 - 16 * v10;
    do
    {
      v13 = v11 + v9;
      v14 = v7 + 48 * ((v11 - (uint64_t)v8) / 48) + 48 * (_QWORD)a2 + v9;
      *(_QWORD *)v14 = off_1E338CBD0;
      *(_QWORD *)(v14 + 8) = *(_QWORD *)(v11 + v9 - 40);
      *(_QWORD *)(v14 + 16) = 0;
      v15 = *(_QWORD *)(v11 + v9 - 32);
      *(_QWORD *)(v13 - 32) = 0;
      *(_QWORD *)(v14 + 16) = v15;
      v16 = *(_QWORD *)(v11 + v9 - 24);
      *(_QWORD *)(v13 - 24) = 0;
      *(_QWORD *)(v14 + 24) = v16;
      v17 = *(_QWORD *)(v11 + v9 - 16);
      *(_QWORD *)(v13 - 16) = 0;
      *(_QWORD *)(v14 + 32) = v17;
      LOWORD(v17) = *(_WORD *)(v11 + v9 - 8);
      *(_BYTE *)(v14 + 42) = *(_BYTE *)(v11 + v9 - 6);
      *(_WORD *)(v14 + 40) = v17;
      WebCore::BlendingKeyframe::~BlendingKeyframe((WebCore::BlendingKeyframe *)(v11 + v9 - 48), a2);
      v9 -= 48;
    }
    while (v12 != v9);
  }
  *v8 = off_1E338CBD0;
  v18 = v7 + 48 * (_QWORD)a2;
  result = *(double *)(v3 + 8);
  *(double *)(v18 + 8) = result;
  *(_QWORD *)(v18 + 16) = 0;
  v20 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v18 + 16) = v20;
  v21 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v18 + 24) = v21;
  v22 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v18 + 32) = v22;
  LOWORD(v22) = *(_WORD *)(v3 + 40);
  *(_BYTE *)(v18 + 42) = *(_BYTE *)(v3 + 42);
  *(_WORD *)(v18 + 40) = v22;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void WebCore::BlendingKeyframes::copyKeyframes(WebCore::BlendingKeyframes *this, const WebCore::BlendingKeyframes *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v23;
  _DWORD *v24;
  void *v25;
  WebCore::BlendingKeyframe *v26;
  uint64_t v27;
  _BYTE v29[8];
  int v30;
  _QWORD v31[2];
  uint64_t v32[4];
  char v33[24];

  v2 = *((_DWORD *)a2 + 5);
  if (v2)
  {
    v3 = *((_QWORD *)a2 + 1);
    v27 = v3 + 48 * v2;
    do
    {
      v4 = *(_QWORD *)(v3 + 8);
      v5 = *(_QWORD **)(v3 + 24);
      v6 = WTF::fastMalloc((WTF *)0x40);
      *(_DWORD *)v6 = 0;
      v7 = (_DWORD *)v5[1];
      ++*v7;
      *(_QWORD *)(v6 + 8) = v7;
      *(_QWORD *)(v6 + 16) = v5[2];
      v8 = (_DWORD *)v5[3];
      ++*v8;
      *(_QWORD *)(v6 + 24) = v8;
      v9 = (_DWORD *)v5[4];
      ++*v9;
      *(_QWORD *)(v6 + 32) = v9;
      *(_QWORD *)(v6 + 40) = v5[5];
      *(_QWORD *)(v6 + 48) = 0;
      v10 = (_DWORD *)v5[7];
      ++*v10;
      *(_QWORD *)(v6 + 56) = v10;
      v31[0] = off_1E338CBD0;
      v31[1] = v4;
      v32[0] = 0;
      v32[1] = v6;
      memset(&v32[2], 0, 11);
      v11 = *(_QWORD *)(v3 + 16);
      if (v11)
      {
        v12 = *(unsigned int *)(v11 - 4);
        v13 = v11 + 16 * v12;
        if (*(_DWORD *)(v11 - 12))
        {
          if ((_DWORD)v12)
          {
            v14 = 16 * v12;
            while (1)
            {
              v15 = *(unsigned int *)(v11 + 8);
              if ((_DWORD)v15 || *(_WORD *)v11 != 0)
              {
                if ((_DWORD)v15 == -1)
                {
LABEL_57:
                  v26 = (WebCore::BlendingKeyframe *)std::__throw_bad_variant_access[abi:sn180100]();
                  WebCore::BlendingKeyframe::~BlendingKeyframe(v26);
                  return;
                }
                *(_QWORD *)v33 = v29;
                if (!((unsigned int (*)(char *, uint64_t))off_1E338CB00[v15])(v33, v11))
                  break;
              }
              v11 += 16;
              v14 -= 16;
              if (!v14)
              {
                v11 = v13;
                break;
              }
            }
            v17 = v11;
            v11 = *(_QWORD *)(v3 + 16);
            if (!v11)
              goto LABEL_23;
          }
          else
          {
            v17 = *(_QWORD *)(v3 + 16);
          }
LABEL_21:
          v18 = v11 + 16 * *(unsigned int *)(v11 - 4);
          goto LABEL_24;
        }
        v17 = v11 + 16 * v12;
      }
      else
      {
        v17 = 0;
        v12 = 0;
      }
      v13 = v11 + 16 * v12;
      if (v11)
        goto LABEL_21;
LABEL_23:
      v18 = 0;
LABEL_24:
      while (v17 != v18)
      {
        v29[0] = 0;
        v30 = -1;
        v19 = *(unsigned int *)(v17 + 8);
        if ((_DWORD)v19 != -1)
        {
          ((void (*)(char *, _BYTE *, uint64_t))off_1E338CB20[v19])(v33, v29, v17);
          v30 = v19;
        }
        WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add(v32, (uint64_t)v29, (uint64_t)v33);
        if (v30 != -1)
          __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v30](v33, (uint64_t)v29);
        v20 = v17 + 16;
        v17 = v13;
        if (v20 != v13)
        {
          v17 = v13;
          while (1)
          {
            v21 = *(unsigned int *)(v20 + 8);
            if ((_DWORD)v21 || *(_WORD *)v20 != 0)
            {
              if ((_DWORD)v21 == -1)
                goto LABEL_57;
              *(_QWORD *)v33 = v29;
              v17 = v13;
              if (!((unsigned int (*)(char *, uint64_t))off_1E338CB00[v21])(v33, v20))
                break;
            }
            v20 += 16;
            if (v20 == v17)
              goto LABEL_41;
          }
          v17 = v20;
        }
LABEL_41:
        ;
      }
      v23 = *(_DWORD **)(v3 + 32);
      if (v23)
        v23[2] += 2;
      v24 = (_DWORD *)v32[2];
      v32[2] = (uint64_t)v23;
      if (!v24)
        goto LABEL_47;
      if (v24[2] != 1)
      {
        --v24[2];
LABEL_47:
        if (v23)
          goto LABEL_48;
        goto LABEL_50;
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 16))(v24);
      if (v23)
      {
LABEL_48:
        if (v23[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
        else
          --v23[2];
      }
LABEL_50:
      LOWORD(v32[3]) = *(_WORD *)(v3 + 40);
      WebCore::BlendingKeyframes::insert((uint64_t)this, (unint64_t)v31);
      WebCore::BlendingKeyframe::~BlendingKeyframe((WebCore::BlendingKeyframe *)v31, v25);
      v3 += 48;
    }
    while (v3 != v27);
  }
}

void WebCore::BlendingKeyframes::fillImplicitKeyframes(WebCore::BlendingKeyframes *this, const WebCore::KeyframeEffect *a2, const WebCore::RenderStyle *a3)
{
  const WebCore::RenderStyle *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const WebCore::RenderStyle *v19;
  uint64_t v20;
  uint64_t v21;
  const WebCore::RenderStyle *v23;
  unsigned int v24;
  int v25;
  int i;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  BOOL v30;
  _BOOL4 v31;
  BOOL v33;
  char v34;
  BOOL v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  const WebCore::RenderStyle *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t v65;
  _BOOL4 v67;
  BOOL v69;
  char v70;
  BOOL v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const WebCore::RenderStyle *v95;
  const WebCore::RenderStyle *v96;
  const WebCore::RenderStyle *v97;
  uint64_t *v98;
  const WebCore::RenderStyle *v99;
  char *v100;
  unsigned int v101;
  char **v102;
  const WebCore::RenderStyle *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  const WebCore::RenderStyle *v108;
  char v109;
  char v110[16];

  if (!*((_DWORD *)this + 5))
    return;
  v4 = a2;
  v5 = (uint64_t *)this;
  v6 = *((_QWORD *)a2 + 33);
  v7 = *(_QWORD **)(v6 + 40);
  v8 = *v7;
  if (*v7)
    v9 = (*(_WORD *)(*v7 + 28) & 0x80) == 0;
  else
    v9 = 1;
  if (v9)
    v10 = v7[1] + 1328;
  else
LABEL_240:
    v10 = v8 + 216;
  v11 = *(_QWORD *)v10;
  if (!*(_QWORD *)(*(_QWORD *)v10 + 32))
  {
    if (*(_QWORD *)(v11 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v11);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v11);
    v91 = *(_QWORD *)(v11 + 32);
    if (*(_DWORD *)(v91 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v91 + 32));
    if (*(_BYTE *)(v91 + 242)
      || *(_BYTE *)(v91 + 243)
      || *(_BYTE *)(v91 + 244)
      || *(_BYTE *)(v91 + 245)
      || *(_BYTE *)(v91 + 246)
      || *(_BYTE *)(v91 + 247)
      || *(_BYTE *)(v91 + 248))
    {
      *(_BYTE *)(v11 + 236) = 1;
    }
  }
  v12 = *(_QWORD *)(v11 + 32);
  WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::HashTable((uint64_t **)&v108, v5 + 3);
  WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::HashTable(&v107, v5 + 3);
  v14 = *((_DWORD *)v5 + 5);
  if (!v14)
  {
    v15 = 0;
    goto LABEL_109;
  }
  v15 = 0;
  v16 = v5[1];
  v17 = v16 + 48 * v14;
  v94 = v6;
  v95 = a3;
  v92 = v17;
  v93 = v12;
  v96 = v4;
  do
  {
    if (*(double *)(v16 + 8) != 0.0)
      goto LABEL_12;
    v6 = *(_QWORD *)(v16 + 16);
    v98 = v15;
    if (v6)
    {
      v18 = *(unsigned int *)(v6 - 4);
      v19 = (const WebCore::RenderStyle *)(v6 + 16 * v18);
      if (*(_DWORD *)(v6 - 12))
      {
        if ((_DWORD)v18)
        {
          v20 = 16 * v18;
          while (1)
          {
            v21 = *(unsigned int *)(v6 + 8);
            if ((_DWORD)v21 || *(_WORD *)v6 != 0)
            {
              if ((_DWORD)v21 == -1)
              {
LABEL_239:
                std::__throw_bad_variant_access[abi:sn180100]();
                goto LABEL_240;
              }
              v102 = &v100;
              if (!((unsigned int (*)(char ***, uint64_t))off_1E338CB00[v21])(&v102, v6))
                break;
            }
            v6 += 16;
            v20 -= 16;
            if (!v20)
            {
              v6 = (uint64_t)v19;
              break;
            }
          }
          a3 = (const WebCore::RenderStyle *)v6;
          v6 = *(_QWORD *)(v16 + 16);
          if (!v6)
            goto LABEL_34;
        }
        else
        {
          a3 = *(const WebCore::RenderStyle **)(v16 + 16);
        }
LABEL_32:
        v23 = (const WebCore::RenderStyle *)(v6 + 16 * *(unsigned int *)(v6 - 4));
        goto LABEL_35;
      }
      a3 = (const WebCore::RenderStyle *)(v6 + 16 * v18);
    }
    else
    {
      a3 = 0;
      v18 = 0;
    }
    v19 = (const WebCore::RenderStyle *)(v6 + 16 * v18);
    if (v6)
      goto LABEL_32;
LABEL_34:
    v23 = 0;
LABEL_35:
    if (v23 == a3)
      goto LABEL_97;
    do
    {
      LOBYTE(v102) = 0;
      LODWORD(v103) = -1;
      v6 = *((unsigned int *)a3 + 2);
      if ((_DWORD)v6 == -1)
      {
        if (!v108)
          goto LABEL_78;
        goto LABEL_239;
      }
      ((void (*)(char **, char ***, const WebCore::RenderStyle *))off_1E338CB20[v6])(&v100, &v102, a3);
      LODWORD(v103) = v6;
      v4 = v108;
      if (!v108)
        goto LABEL_79;
      v24 = *((_DWORD *)v108 - 2);
      v100 = v110;
      v25 = ((uint64_t (*)(char **, char ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNS6_11DefaultHashINS_7variantIJN7WebCore13CSSPropertyIDENS6_10AtomStringEEEEE4hashERKSD_EUlSB_E_JZNSE_4hashESG_EUlRKSC_E_EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v100, &v102);
      for (i = 0; ; v25 = i + v27)
      {
        v27 = v25 & v24;
        v28 = (uint64_t *)((char *)v4 + 16 * (v25 & v24));
        v29 = *((unsigned int *)v28 + 2);
        v30 = (_DWORD)v103 != (_DWORD)v29 || (_DWORD)v103 == -1;
        v31 = !v30;
        if ((_DWORD)v29 == -1 || !v31)
          break;
        v100 = v110;
        v34 = ((uint64_t (*)(char **, char *, char ***))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v29])(&v100, (char *)v4 + 16 * v27, &v102);
        if ((v34 & 1) != 0)
          goto LABEL_94;
        LODWORD(v29) = *((_DWORD *)v28 + 2);
LABEL_56:
        if ((_DWORD)v29)
          v35 = 0;
        else
          v35 = *(unsigned __int16 *)v28 == 0;
        if (v35)
        {
          v36 = (uint64_t *)v108;
          if (!v108)
            goto LABEL_78;
          v37 = *((unsigned int *)v108 - 1);
          v28 = (uint64_t *)((char *)v108 + 16 * v37);
          goto LABEL_63;
        }
        ++i;
      }
      v33 = (_DWORD)v103 == -1;
      if ((_DWORD)v29 != -1)
        v33 = v31;
      if (!v33)
        goto LABEL_56;
LABEL_94:
      v36 = (uint64_t *)v108;
      if (!v108)
        goto LABEL_64;
      v37 = *((unsigned int *)v108 - 1);
LABEL_63:
      v36 += 2 * v37;
      if (v36 == v28)
        goto LABEL_78;
LABEL_64:
      if (v36 != v28)
      {
        v38 = *((unsigned int *)v28 + 2);
        if ((_DWORD)v38 != -1)
          __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v38]((char *)&v100, (uint64_t)v28);
        *(_WORD *)v28 = -1;
        *((_DWORD *)v28 + 2) = 0;
        ++*((_DWORD *)v108 - 4);
        if (v108)
          v39 = *((_DWORD *)v108 - 3) - 1;
        else
          v39 = -1;
        *((_DWORD *)v108 - 3) = v39;
        if (v108)
        {
          v40 = *((_DWORD *)v108 - 1);
          if (6 * *((_DWORD *)v108 - 3) < v40 && v40 >= 9)
            WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::rehash((uint64_t *)&v108, v40 >> 1, 0);
        }
      }
LABEL_78:
      v6 = v103;
      if ((_DWORD)v103 != -1)
LABEL_79:
        __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v6]((char *)&v100, (uint64_t)&v102);
      v6 = (uint64_t)a3 + 16;
      a3 = v19;
      if ((const WebCore::RenderStyle *)v6 != v19)
      {
        a3 = v19;
        while (1)
        {
          v42 = *(unsigned int *)(v6 + 8);
          if ((_DWORD)v42 || *(_WORD *)v6 != 0)
          {
            if ((_DWORD)v42 == -1)
              goto LABEL_239;
            v102 = &v100;
            a3 = v19;
            if (!((unsigned int (*)(char ***, uint64_t))off_1E338CB00[v42])(&v102, v6))
              break;
          }
          v6 += 16;
          if ((const WebCore::RenderStyle *)v6 == a3)
            goto LABEL_92;
        }
        a3 = (const WebCore::RenderStyle *)v6;
      }
LABEL_92:
      ;
    }
    while (a3 != v23);
LABEL_97:
    a3 = v95;
    v4 = v96;
    v12 = v93;
    v6 = v94;
    v15 = v98;
    v17 = v92;
    if (!v98)
    {
      v44 = *(_QWORD *)(v16 + 32);
      if (!v44)
        goto LABEL_106;
      v45 = *((_QWORD *)v96 + 12);
      if (!v45)
        goto LABEL_102;
      v46 = *(_QWORD **)(v45 + 8);
      if (!v46 || !(*(unsigned int (**)(_QWORD *))(*v46 + 112))(v46))
        goto LABEL_102;
      v47 = *(_QWORD *)(v46[27] + 104);
      if (!v47)
        WebCore::CubicBezierTimingFunction::defaultTimingFunction(0);
      v6 = v94;
      a3 = v95;
      v17 = v92;
      v12 = v93;
      if (v47 == v44)
LABEL_106:
        v15 = (uint64_t *)v16;
      else
LABEL_102:
        v15 = 0;
    }
LABEL_12:
    v16 += 48;
  }
  while (v16 != v17);
LABEL_109:
  v102 = (char **)v4;
  v103 = a3;
  v104 = v12;
  v105 = v6;
  v106 = v5;
  if (v108 && *((_DWORD *)v108 - 3))
  {
    v48 = atomic_load(&qword_1ECE82198);
    if (v48 != -1)
    {
      v100 = &v109;
      *(_QWORD *)v110 = &v100;
      std::__call_once(&qword_1ECE82198, v110, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::zeroPercentKeyframe(void)::$_0 &&>>);
    }
    WebCore::BlendingKeyframes::fillImplicitKeyframes(WebCore::KeyframeEffect const&,WebCore::RenderStyle const&)::$_1::operator()((uint64_t (**)())&v102, (uint64_t (***)())&v108, 0.0, _MergedGlobals_153, v15);
  }
  v49 = *((_DWORD *)v5 + 5);
  if (!v49)
  {
    v4 = 0;
    goto LABEL_214;
  }
  v97 = v4;
  v4 = 0;
  a3 = (const WebCore::RenderStyle *)v5[1];
  v50 = (const WebCore::RenderStyle *)((char *)a3 + 48 * v49);
  v6 = 0xFFFFFFFFLL;
  v99 = v50;
  while (2)
  {
    if (*((double *)a3 + 1) != 1.0)
      goto LABEL_210;
    v51 = (uint64_t *)*((_QWORD *)a3 + 2);
    if (!v51)
    {
      v5 = 0;
      v52 = 0;
      goto LABEL_132;
    }
    v52 = *((unsigned int *)v51 - 1);
    v53 = &v51[2 * v52];
    if (!*((_DWORD *)v51 - 3))
    {
      v5 = &v51[2 * v52];
LABEL_132:
      v53 = &v51[2 * v52];
      if (v51)
        goto LABEL_135;
LABEL_137:
      v57 = 0;
      goto LABEL_138;
    }
    if (!(_DWORD)v52)
    {
      v5 = (uint64_t *)*((_QWORD *)a3 + 2);
      goto LABEL_135;
    }
    v54 = 16 * v52;
    while (1)
    {
      v55 = *((unsigned int *)v51 + 2);
      if ((_DWORD)v55 || *(_WORD *)v51 != 0)
      {
        if ((_DWORD)v55 == -1)
          goto LABEL_239;
        v100 = v110;
        if (!((unsigned int (*)(char **, uint64_t *))off_1E338CB00[v55])(&v100, v51))
          break;
      }
      v51 += 2;
      v54 -= 16;
      if (!v54)
      {
        v51 = v53;
        break;
      }
    }
    v5 = v51;
    v51 = (uint64_t *)*((_QWORD *)a3 + 2);
    if (!v51)
      goto LABEL_137;
LABEL_135:
    v57 = &v51[2 * *((unsigned int *)v51 - 1)];
LABEL_138:
    if (v57 == v5)
      goto LABEL_200;
    while (2)
    {
      LOBYTE(v100) = 0;
      v101 = -1;
      v58 = *((unsigned int *)v5 + 2);
      if ((_DWORD)v58 == -1)
      {
        if (!v107)
          goto LABEL_181;
        goto LABEL_239;
      }
      ((void (*)(char *, char **, uint64_t *))off_1E338CB20[v58])(v110, &v100, v5);
      v101 = v58;
      v59 = v107;
      if (!v107)
      {
        v6 = 0xFFFFFFFFLL;
        goto LABEL_182;
      }
      v60 = *((_DWORD *)v107 - 2);
      *(_QWORD *)v110 = &v109;
      v61 = ((uint64_t (*)(char *, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNS6_11DefaultHashINS_7variantIJN7WebCore13CSSPropertyIDENS6_10AtomStringEEEEE4hashERKSD_EUlSB_E_JZNSE_4hashESG_EUlRKSC_E_EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v58])(v110, &v100);
      v62 = 0;
      while (2)
      {
        v63 = v61 & v60;
        v64 = &v59[2 * (v61 & v60)];
        v65 = *((unsigned int *)v64 + 2);
        v67 = v101 == (_DWORD)v65 && v101 != -1;
        if ((_DWORD)v65 != -1 && v67)
        {
          *(_QWORD *)v110 = &v109;
          v70 = ((uint64_t (*)(char *, uint64_t *, char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v65])(v110, &v59[2 * v63], &v100);
          if ((v70 & 1) != 0)
            break;
          LODWORD(v65) = *((_DWORD *)v64 + 2);
          goto LABEL_159;
        }
        v69 = v101 == -1;
        if ((_DWORD)v65 != -1)
          v69 = v67;
        if (!v69)
        {
LABEL_159:
          if ((_DWORD)v65)
            v71 = 0;
          else
            v71 = *(unsigned __int16 *)v64 == 0;
          if (v71)
          {
            v72 = v107;
            v6 = 0xFFFFFFFFLL;
            if (!v107)
              goto LABEL_181;
            v73 = *((unsigned int *)v107 - 1);
            v64 = &v107[2 * v73];
            goto LABEL_166;
          }
          v61 = ++v62 + v63;
          continue;
        }
        break;
      }
      v72 = v107;
      v6 = 0xFFFFFFFFLL;
      if (!v107)
        goto LABEL_167;
      v73 = *((unsigned int *)v107 - 1);
LABEL_166:
      v72 += 2 * v73;
      if (v72 == v64)
        goto LABEL_181;
LABEL_167:
      if (v72 != v64)
      {
        v74 = *((unsigned int *)v64 + 2);
        if ((_DWORD)v74 != -1)
          __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v74](v110, (uint64_t)v64);
        *(_WORD *)v64 = -1;
        *((_DWORD *)v64 + 2) = 0;
        ++*((_DWORD *)v107 - 4);
        if (v107)
          v75 = *((_DWORD *)v107 - 3) - 1;
        else
          v75 = -1;
        *((_DWORD *)v107 - 3) = v75;
        if (v107)
        {
          v76 = *((_DWORD *)v107 - 1);
          if (6 * *((_DWORD *)v107 - 3) < v76 && v76 >= 9)
            WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::rehash((uint64_t *)&v107, v76 >> 1, 0);
        }
      }
LABEL_181:
      v58 = v101;
      if (v101 != -1)
LABEL_182:
        __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v58](v110, (uint64_t)&v100);
      v78 = v5 + 2;
      v5 = v53;
      if (v78 != v53)
      {
        v5 = v53;
        while (1)
        {
          v79 = *((unsigned int *)v78 + 2);
          if ((_DWORD)v79 || *(_WORD *)v78 != 0)
          {
            if ((_DWORD)v79 == -1)
              goto LABEL_239;
            v100 = v110;
            v5 = v53;
            if (!((unsigned int (*)(char **, uint64_t *))off_1E338CB00[v79])(&v100, v78))
              break;
          }
          v78 += 2;
          if (v78 == v5)
            goto LABEL_195;
        }
        v5 = v78;
      }
LABEL_195:
      if (v5 != v57)
        continue;
      break;
    }
LABEL_200:
    v50 = v99;
    if (!v4)
    {
      v81 = *((_QWORD *)a3 + 4);
      if (!v81)
        goto LABEL_209;
      v82 = *((_QWORD *)v97 + 12);
      if (!v82)
        goto LABEL_205;
      v5 = *(uint64_t **)(v82 + 8);
      if (!v5 || !(*(unsigned int (**)(uint64_t *))(*v5 + 112))(v5))
        goto LABEL_205;
      v83 = *(_QWORD *)(v5[27] + 104);
      if (!v83)
        WebCore::CubicBezierTimingFunction::defaultTimingFunction(0);
      v50 = v99;
      v6 = 0xFFFFFFFFLL;
      if (v83 == v81)
LABEL_209:
        v4 = a3;
      else
LABEL_205:
        v4 = 0;
    }
LABEL_210:
    a3 = (const WebCore::RenderStyle *)((char *)a3 + 48);
    if (a3 != v50)
      continue;
    break;
  }
LABEL_214:
  v5 = v107;
  if (v107)
  {
    if (!*((_DWORD *)v107 - 3))
      goto LABEL_219;
    v84 = atomic_load(&qword_1ECE821A8);
    if (v84 != -1)
    {
      v100 = &v109;
      *(_QWORD *)v110 = &v100;
      std::__call_once(&qword_1ECE821A8, v110, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::hundredPercentKeyframe(void)::$_0 &&>>);
    }
    WebCore::BlendingKeyframes::fillImplicitKeyframes(WebCore::KeyframeEffect const&,WebCore::RenderStyle const&)::$_1::operator()((uint64_t (**)())&v102, (uint64_t (***)())&v107, 1.0, qword_1ECE821A0, (uint64_t *)v4);
    v5 = v107;
    if (v107)
    {
LABEL_219:
      v4 = (const WebCore::RenderStyle *)*((unsigned int *)v5 - 1);
      if ((_DWORD)v4)
      {
        a3 = (const WebCore::RenderStyle *)off_1E338CB00;
        v6 = 0xFFFFFFFFLL;
        v85 = (uint64_t)v5;
        do
        {
          v86 = *(unsigned int *)(v85 + 8);
          if ((_DWORD)v86 == -1)
            goto LABEL_239;
          v102 = &v100;
          if ((((uint64_t (*)(char ***, uint64_t))off_1E338CB00[v86])(&v102, v85) & 1) == 0)
          {
            v87 = *(unsigned int *)(v85 + 8);
            if ((_DWORD)v87 != -1)
              __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v87]((char *)&v102, v85);
            *(_DWORD *)(v85 + 8) = -1;
          }
          v85 += 16;
          v4 = (const WebCore::RenderStyle *)((char *)v4 - 1);
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v5 - 2), v13);
    }
  }
  v5 = (uint64_t *)v108;
  if (v108)
  {
    v4 = (const WebCore::RenderStyle *)*((unsigned int *)v108 - 1);
    if ((_DWORD)v4)
    {
      a3 = (const WebCore::RenderStyle *)off_1E338CB00;
      v6 = 0xFFFFFFFFLL;
      v88 = (uint64_t *)v108;
      do
      {
        v89 = *((unsigned int *)v88 + 2);
        if ((_DWORD)v89 == -1)
          goto LABEL_239;
        v102 = &v100;
        if ((((uint64_t (*)(char ***, uint64_t *))off_1E338CB00[v89])(&v102, v88) & 1) == 0)
        {
          v90 = *((unsigned int *)v88 + 2);
          if ((_DWORD)v90 != -1)
            __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v90]((char *)&v102, (uint64_t)v88);
          *((_DWORD *)v88 + 2) = -1;
        }
        v88 += 2;
        v4 = (const WebCore::RenderStyle *)((char *)v4 - 1);
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v5 - 2), v13);
  }
}

double WebCore::BlendingKeyframes::fillImplicitKeyframes(WebCore::KeyframeEffect const&,WebCore::RenderStyle const&)::$_1::operator()(uint64_t (**a1)(), uint64_t (***a2)(), double a3, uint64_t a4, uint64_t *a5)
{
  uint64_t (**v6)();
  _QWORD *v8;
  void *v9;
  uint64_t (**v10)();
  double result;
  uint64_t (*v12)();
  uint64_t (*v13)();
  uint64_t (*v14)();
  uint64_t (*v15)();
  uint64_t (****v16)(WebCore::BlendingKeyframe *__hidden);
  uint64_t v17;
  uint64_t (****v18)(WebCore::BlendingKeyframe *__hidden);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WebCore::RenderStyle *v25;
  uint64_t (**v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (****v31)(WebCore::BlendingKeyframe *__hidden);
  uint64_t (****i)(WebCore::BlendingKeyframe *__hidden);
  uint64_t (**v33)();
  uint64_t v34;
  uint64_t (**v35)();
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  WebCore::RenderStyle *v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::RenderStyle *v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t (***v50)(WebCore::BlendingKeyframe *__hidden);
  int v51;
  _OWORD v52[3];
  WebCore::RenderStyle *v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint64_t (**v57)(WebCore::BlendingKeyframe *__hidden);
  double v58;
  WebCore::RenderStyle *v59;
  WebCore::RenderStyle *v60;
  __int128 v61;
  __int16 *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t (**v65)();
  WebCore::RenderStyle *v66;
  WebCore::RenderStyle *v67;
  uint64_t *v68;
  char *v69;
  __int16 *v70;
  uint64_t *v71;

  v6 = a1;
  if (a5)
  {
    v8 = (_QWORD *)a5[3];
    v10 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v10 = 0;
    v12 = (uint64_t (*)())v8[1];
    ++*(_DWORD *)v12;
    v10[1] = v12;
    v10[2] = (uint64_t (*)())v8[2];
    v13 = (uint64_t (*)())v8[3];
    ++*(_DWORD *)v13;
    v10[3] = v13;
    v14 = (uint64_t (*)())v8[4];
    ++*(_DWORD *)v14;
    v10[4] = v14;
    v10[5] = (uint64_t (*)())v8[5];
    v10[6] = 0;
    v15 = (uint64_t (*)())v8[7];
    ++*(_DWORD *)v15;
    v10[7] = v15;
    v16 = (uint64_t (****)(WebCore::BlendingKeyframe *__hidden))*a2;
    v49 = a5;
    if (!*a2)
    {
      v31 = 0;
      v17 = 0;
      goto LABEL_31;
    }
    v17 = *((unsigned int *)v16 - 1);
    v18 = &v16[2 * v17];
    if (!*((_DWORD *)v16 - 3))
      goto LABEL_93;
    if ((_DWORD)v17)
    {
      v19 = 16 * v17;
      while (1)
      {
        v20 = *((unsigned int *)v16 + 2);
        if ((_DWORD)v20 || *(_WORD *)v16 != 0)
        {
          if ((_DWORD)v20 == -1)
            goto LABEL_92;
          v57 = (uint64_t (**)(WebCore::BlendingKeyframe *__hidden))v52;
          if (!((unsigned int (*)(uint64_t (***)(WebCore::BlendingKeyframe *__hidden), uint64_t (****)(WebCore::BlendingKeyframe *__hidden)))off_1E338CB00[v20])(&v57, v16))break;
        }
        v16 += 2;
        v19 -= 16;
        if (!v19)
        {
          v16 = v18;
          break;
        }
      }
      v31 = v16;
      v16 = (uint64_t (****)(WebCore::BlendingKeyframe *__hidden))*a2;
      if (!*a2)
        goto LABEL_66;
    }
    else
    {
      v31 = (uint64_t (****)(WebCore::BlendingKeyframe *__hidden))*a2;
      if (!v16)
        goto LABEL_66;
    }
LABEL_34:
    for (i = &v16[2 * *((unsigned int *)v16 - 1)]; i != v31; i = 0)
    {
      while (1)
      {
        LOBYTE(v52[0]) = 0;
        DWORD2(v52[0]) = -1;
        v16 = (uint64_t (****)(WebCore::BlendingKeyframe *__hidden))*((unsigned int *)v31 + 2);
        if ((_DWORD)v16 != -1)
        {
          ((void (*)(uint64_t (***)(WebCore::BlendingKeyframe *__hidden), _OWORD *, uint64_t (****)(WebCore::BlendingKeyframe *__hidden)))off_1E338CB20[(_QWORD)v16])(&v57, v52, v31);
          DWORD2(v52[0]) = (_DWORD)v16;
        }
        v41 = (WebCore::RenderStyle *)v6[1];
        v42 = (uint64_t)*v6 + 104;
        v56 = 0x3FF0000000000000;
        v57 = (uint64_t (**)(WebCore::BlendingKeyframe *__hidden))v42;
        v55 = 0;
        v54 = 0;
        v58 = *(double *)&v10;
        v59 = v41;
        v60 = v41;
        *(_QWORD *)&v61 = &v56;
        *((_QWORD *)&v61 + 1) = (char *)&v55 + 1;
        v62 = &v55;
        v63 = &v54;
        v64 = v42;
        v65 = v10;
        v66 = v41;
        v67 = v41;
        v68 = &v56;
        v69 = (char *)&v55 + 1;
        v70 = &v55;
        v71 = &v54;
        if ((_DWORD)v16 == -1)
          break;
        v50 = &v57;
        ((void (*)(uint64_t (****)(WebCore::BlendingKeyframe *__hidden), _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation13blendPropertyERKNS8_25CSSPropertyBlendingClientERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEERNS8_11RenderStyleERKSJ_SM_dNS8_18CompositeOperationENS8_27IterationCompositeOperationEdE3__0JZNS9_13blendPropertyESC_SI_SK_SM_SM_dSN_SO_dE3__1EEEEEJRKNS0_6__implIJSE_SF_EEEEEEDcOT_DpOT0____fmatrix[(_QWORD)v16])(&v50, v52);
        WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add(v49 + 2, (uint64_t)v52, (uint64_t)&v57);
        if (DWORD2(v52[0]) != -1)
          __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[DWORD2(v52[0])]((char *)&v57, (uint64_t)v52);
        v16 = v31 + 2;
        v31 = v18;
        if (v16 != v18)
        {
          v31 = v18;
          while (1)
          {
            v43 = *((unsigned int *)v16 + 2);
            if ((_DWORD)v43 || *(_WORD *)v16 != 0)
            {
              if ((_DWORD)v43 == -1)
                goto LABEL_92;
              v57 = (uint64_t (**)(WebCore::BlendingKeyframe *__hidden))v52;
              v31 = v18;
              if (!((unsigned int (*)(uint64_t (***)(WebCore::BlendingKeyframe *__hidden), uint64_t (****)(WebCore::BlendingKeyframe *__hidden)))off_1E338CB00[v43])(&v57, v16))break;
            }
            v16 += 2;
            if (v16 == v31)
              goto LABEL_85;
          }
          v31 = v16;
        }
LABEL_85:
        if (v31 == i)
          goto LABEL_86;
      }
LABEL_92:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_93:
      v31 = v18;
LABEL_31:
      v18 = &v16[2 * v17];
      if (v16)
        goto LABEL_34;
LABEL_66:
      ;
    }
LABEL_86:
    v45 = (WebCore::RenderStyle *)v49[3];
    v49[3] = (uint64_t)v10;
    if (v45)
    {
      WebCore::RenderStyle::~RenderStyle(v45, v9);
      if (*(_DWORD *)v46)
      {
        result = 0.0;
        *((_OWORD *)v46 + 2) = 0u;
        *((_OWORD *)v46 + 3) = 0u;
        *(_OWORD *)v46 = 0u;
        *((_OWORD *)v46 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v46, v47);
      }
    }
    return result;
  }
  v57 = off_1E338CBD0;
  v58 = a3;
  v60 = 0;
  *(_QWORD *)&v61 = 0;
  v59 = 0;
  *(_DWORD *)((char *)&v61 + 7) = 0;
  v22 = (uint64_t)a1[3];
  v18 = (uint64_t (****)(WebCore::BlendingKeyframe *__hidden))a1[4];
  v23 = (uint64_t)a1[2];
  memset(v52, 0, 41);
  v24.n128_f64[0] = WebCore::Style::Resolver::styleForKeyframe(v23, v22);
  v25 = v53;
  v53 = 0;
  v60 = v25;
  v26 = *a2;
  if (*a2)
  {
    v27 = *((unsigned int *)v26 - 1);
    v16 = (uint64_t (****)(WebCore::BlendingKeyframe *__hidden))&v26[2 * v27];
    if (*((_DWORD *)v26 - 3))
    {
      if ((_DWORD)v27)
      {
        v28 = 16 * v27;
        v10 = off_1E338CB00;
        while (1)
        {
          v29 = *((unsigned int *)v26 + 2);
          if ((_DWORD)v29 || *(_WORD *)v26 != 0)
          {
            if ((_DWORD)v29 == -1)
              goto LABEL_92;
            *(_QWORD *)&v52[0] = &v50;
            if (!((unsigned int (*)(_OWORD *, uint64_t (**)(), __n128))off_1E338CB00[v29])(v52, v26, v24))break;
          }
          v26 += 2;
          v28 -= 16;
          if (!v28)
          {
            v26 = (uint64_t (**)())v16;
            break;
          }
        }
        v10 = v26;
        v26 = *a2;
      }
      else
      {
        v10 = *a2;
      }
      goto LABEL_38;
    }
    v10 = &v26[2 * v27];
  }
  else
  {
    v10 = 0;
    v27 = 0;
  }
  v16 = (uint64_t (****)(WebCore::BlendingKeyframe *__hidden))&v26[2 * v27];
LABEL_38:
  v48 = (uint64_t)v18;
  v49 = (uint64_t *)v6;
  if (v26)
    v33 = &v26[2 * *((unsigned int *)v26 - 1)];
  else
    v33 = 0;
  if (v33 != v10)
  {
    v18 = &v50;
    v6 = off_1E338CB00;
    do
    {
      LOBYTE(v50) = 0;
      v51 = -1;
      v34 = *((unsigned int *)v10 + 2);
      if ((_DWORD)v34 != -1)
      {
        ((void (*)(_OWORD *, uint64_t (****)(WebCore::BlendingKeyframe *__hidden), uint64_t (**)(), __n128))off_1E338CB20[v34])(v52, &v50, v10, v24);
        v51 = v34;
      }
      WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add((uint64_t *)&v59, (uint64_t)&v50, (uint64_t)v52);
      if (v51 != -1)
        __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v51]((char *)v52, (uint64_t)&v50);
      v35 = v10 + 2;
      v10 = (uint64_t (**)())v16;
      if (v35 != (uint64_t (**)())v16)
      {
        v10 = (uint64_t (**)())v16;
        while (1)
        {
          v36 = *((unsigned int *)v35 + 2);
          if ((_DWORD)v36 || *(_WORD *)v35 != 0)
          {
            if ((_DWORD)v36 == -1)
              goto LABEL_92;
            *(_QWORD *)&v52[0] = &v50;
            v10 = (uint64_t (**)())v16;
            if (!((unsigned int (*)(_OWORD *, uint64_t (**)()))off_1E338CB00[v36])(v52, v35))
              break;
          }
          v35 += 2;
          if (v35 == v10)
            goto LABEL_59;
        }
        v10 = v35;
      }
LABEL_59:
      ;
    }
    while (v10 != v33);
  }
  v38 = *(_QWORD *)(*v49 + 96);
  if (v38)
  {
    v39 = *(_QWORD *)(v38 + 8);
    if (v39)
    {
      if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v39 + 112))(v39, v24) & 1) != 0)
        WORD4(v61) = 256;
    }
  }
  WebCore::BlendingKeyframes::insert(v48, (unint64_t)&v57);
  WebCore::BlendingKeyframe::~BlendingKeyframe((WebCore::BlendingKeyframe *)&v57, v40);
  return result;
}

uint64_t WebCore::BlendingKeyframes::containsAnimatableCSSProperty(WebCore::BlendingKeyframes *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  char **v14;
  int v15;
  char v16;
  char *v17;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
  {
    v8 = 0;
    v2 = 0;
    goto LABEL_16;
  }
  v2 = *(unsigned int *)(v1 - 4);
  v3 = v1 + 16 * v2;
  if (!*(_DWORD *)(v1 - 12))
    goto LABEL_45;
  if ((_DWORD)v2)
  {
    v5 = 16 * v2;
    while (1)
    {
      v6 = *(unsigned int *)(v1 + 8);
      if ((_DWORD)v6 || *(_WORD *)v1 != 0)
      {
        if ((_DWORD)v6 == -1)
          goto LABEL_44;
        v14 = &v17;
        if (!((unsigned int (*)(char ***, uint64_t))off_1E338CB00[v6])(&v14, v1))
          break;
      }
      v1 += 16;
      v5 -= 16;
      if (!v5)
      {
        v1 = v3;
        break;
      }
    }
    v8 = v1;
    v1 = *((_QWORD *)this + 3);
    if (!v1)
      goto LABEL_21;
  }
  else
  {
    v8 = *((_QWORD *)this + 3);
  }
LABEL_19:
  for (i = v1 + 16 * *(unsigned int *)(v1 - 4); i != v8; i = 0)
  {
    while (1)
    {
      LOBYTE(v14) = 0;
      v15 = -1;
      v1 = *(unsigned int *)(v8 + 8);
      if ((_DWORD)v1 == -1)
        break;
      ((void (*)(char **, char ***, uint64_t))off_1E338CB20[v1])(&v17, &v14, v8);
      v15 = v1;
      v17 = &v16;
      v1 = ((uint64_t (*)(char **, char ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation20isPropertyAnimatableERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEEE3__0JZNS9_20isPropertyAnimatableESF_E3__1EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v1])(&v17, &v14);
      if (v15 != -1)
        __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v15]((char *)&v17, (uint64_t)&v14);
      if ((v1 & 1) != 0)
        return 1;
      v10 = v8 + 16;
      v8 = v3;
      if (v10 != v3)
      {
        v8 = v3;
        while (1)
        {
          v11 = *(unsigned int *)(v10 + 8);
          if ((_DWORD)v11 || *(_WORD *)v10 != 0)
          {
            if ((_DWORD)v11 == -1)
              goto LABEL_44;
            v14 = &v17;
            v8 = v3;
            if (!((unsigned int (*)(char ***, uint64_t))off_1E338CB00[v11])(&v14, v10))
              break;
          }
          v10 += 16;
          if (v10 == v8)
            goto LABEL_39;
        }
        v8 = v10;
      }
LABEL_39:
      if (v8 == i)
        return v1;
    }
LABEL_44:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_45:
    v8 = v3;
LABEL_16:
    v3 = v1 + 16 * v2;
    if (v1)
      goto LABEL_19;
LABEL_21:
    ;
  }
  return 0;
}

uint64_t WebCore::CSSAnimation::bindingsPlay@<X0>(WebCore::CSSAnimation *this@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;

  v5 = (_QWORD *)*((_QWORD *)this + 7);
  if (v5)
  {
    if ((*(unsigned int (**)(_QWORD))(*v5 + 24))(*((_QWORD *)this + 7)))
    {
      v6 = v5[33];
      if (v6)
        WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(*(_QWORD *)(v6 + 40) + 8));
    }
  }
  result = WebCore::WebAnimation::play((uint64_t)this, 1, a2, a3);
  if (!*(_BYTE *)(a2 + 16))
    *((_WORD *)this + 120) |= 0x20u;
  return result;
}

WebCore::WebAnimation *WebCore::CSSAnimation::bindingsPause@<X0>(WebCore::CSSAnimation *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  WebCore::WebAnimation *result;

  v4 = (_QWORD *)*((_QWORD *)this + 7);
  if (v4)
  {
    if ((*(unsigned int (**)(_QWORD))(*v4 + 24))(*((_QWORD *)this + 7)))
    {
      v5 = v4[33];
      if (v5)
        WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(*(_QWORD *)(v5 + 40) + 8));
    }
  }
  result = WebCore::WebAnimation::pause(this, a2);
  if (!*(_BYTE *)(a2 + 16))
    *((_WORD *)this + 120) |= 0x20u;
  return result;
}

uint64_t WebCore::CSSAnimation::setBindingsEffect(uint64_t a1, WebCore::ScriptExecutionContext *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 56);
  result = WebCore::WebAnimation::setEffect(a1, a2);
  if (*(_QWORD *)(a1 + 56) != v3)
    *(_WORD *)(a1 + 240) |= 0x3DEu;
  return result;
}

uint64_t WebCore::CSSAnimation::setBindingsStartTime@<X0>(WebCore::WebAnimation *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  __n128 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  WebCore::CSSAnimation *v12;
  char v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = WebCore::WebAnimation::playState(a1);
  v7.n128_f64[0] = WebCore::WebAnimation::validateCSSNumberishValue(a2, (uint64_t)v14);
  v8 = v17;
  if (v17)
  {
    if (v17 == 1)
    {
      v9 = v15;
      v10 = v16;
      v16 = 0;
      result = ((uint64_t (*)(char *, uint64_t *, double))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF7SecondsEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v17])(&v13, &v15, v7.n128_f64[0]);
      *(_BYTE *)a3 = v9;
      *(_QWORD *)(a3 + 8) = v10;
      *(_BYTE *)(a3 + 16) = 1;
    }
    else
    {
      v12 = (WebCore::CSSAnimation *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::CSSAnimation::bindingsReverse(v12);
    }
  }
  else
  {
    WebCore::WebAnimation::setStartTime((uint64_t)a1, v15, v16, v7);
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF7SecondsEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v8])(&v13, &v15);
    result = WebCore::WebAnimation::playState(a1);
    if ((_DWORD)result != v6 && ((_DWORD)result == 2 || v6 == 2))
      *((_WORD *)a1 + 120) |= 0x20u;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t WebCore::CSSAnimation::bindingsReverse@<X0>(WebCore::CSSAnimation *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t result;
  __n128 v6;
  char v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[8];
  uint64_t v12;
  char v13;

  v4 = WebCore::WebAnimation::playState(this);
  result = *((_QWORD *)this + 8);
  if (result && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result), v7))
  {
    v8 = *((double *)this + 14);
    v6.n128_f64[0] = -v8;
    *((double *)this + 14) = -v8;
    result = WebCore::WebAnimation::play((uint64_t)this, 1, (uint64_t)v11, v6);
    if (v13)
    {
      *((double *)this + 14) = v8;
      v9 = v12;
      *(_BYTE *)a2 = v11[0];
      *(_QWORD *)(a2 + 8) = v9;
      *(_BYTE *)(a2 + 16) = 1;
    }
    else
    {
      v10 = *((_QWORD *)this + 7);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      result = WebCore::WebAnimation::playState(this);
      if ((_DWORD)result != v4 && ((_DWORD)result == 2 || v4 == 2))
        *((_WORD *)this + 120) |= 0x20u;
    }
  }
  else
  {
    *(_BYTE *)a2 = 8;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSAnimation::keyframesRuleDidChange(WTF::StringImpl *this)
{
  WTF::StringImpl *v1;
  WebCore::KeyframeEffect *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  char v11;
  char v12;

  if ((*((_WORD *)this + 120) & 0x100) == 0)
  {
    v1 = this;
    v2 = (WebCore::KeyframeEffect *)*((_QWORD *)this + 7);
    if (v2)
    {
      this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*((_QWORD *)this + 7));
      if ((_DWORD)this)
      {
        v3 = *((_QWORD *)v1 + 23);
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 8);
          if (v4)
          {
            if (*((_BYTE *)v1 + 208))
            {
              v5 = *((_DWORD *)v1 + 48);
              v6 = (WTF::StringImpl *)*((_QWORD *)v1 + 25);
              if (v6)
                *(_DWORD *)v6 += 2;
              v8 = v4;
              v9 = v5;
              v10 = v6;
              v11 = 1;
            }
            else
            {
              v8 = *(_QWORD *)(v3 + 8);
              LOBYTE(v9) = 0;
              v11 = 0;
            }
            v12 = 1;
            WebCore::KeyframeEffect::keyframesRuleDidChange(v2);
            this = (WTF::StringImpl *)WebCore::Element::ensureAnimationRareData(v4, &v9);
            *((_BYTE *)this + 104) = 1;
            if (v12)
            {
              if (v11)
              {
                this = v10;
                v10 = 0;
                if (this)
                {
                  if (*(_DWORD *)this == 2)
                    return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
                  else
                    *(_DWORD *)this -= 2;
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

void WebCore::CSSAnimation::updateKeyframesIfNeeded(uint64_t a1, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3, int a4)
{
  WebCore::KeyframeEffect *v4;

  if ((*(_WORD *)(a1 + 240) & 0x100) == 0)
  {
    v4 = *(WebCore::KeyframeEffect **)(a1 + 56);
    if (v4)
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v4 + 24))(*(_QWORD *)(a1 + 56)))
      {
        if (!*((_DWORD *)v4 + 39))
          WebCore::KeyframeEffect::computeStyleOriginatedAnimationBlendingKeyframes(v4, a2, a3, a4);
      }
    }
  }
}

uint64_t WebCore::CSSAnimation::createEvent@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, double a7@<D0>)
{
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  unsigned int v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;

  v14 = bmalloc::api::isoAllocate();
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)v14);
  *(_QWORD *)(v14 + 8) = 0;
  v17 = *(_DWORD *)(v14 + 20) & 0xFFC00000 | (*a2 != 0) | 0x198202;
  *(_DWORD *)(v14 + 16) = 1;
  *(_DWORD *)(v14 + 20) = v17;
  v18 = (_DWORD *)*a2;
  if (*a2)
    *v18 += 2;
  *(_QWORD *)(v14 + 24) = v18;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 56) = v16;
  *(_QWORD *)(v14 + 64) = 0;
  if (a1)
    ++*(_DWORD *)(a1 + 24);
  *(_QWORD *)(v14 + 72) = a1;
  if (!a4)
    a3 = 0x7FF8000000000000;
  *(_QWORD *)(v14 + 80) = a3;
  *(double *)(v14 + 88) = a7;
  *(_QWORD *)(v14 + 96) = 0;
  *(_BYTE *)(v14 + 104) = 0;
  *(_BYTE *)(v14 + 120) = 0;
  if (*(_BYTE *)(a5 + 16))
  {
    *(_DWORD *)(v14 + 104) = *(_DWORD *)a5;
    v19 = *(_DWORD **)(a5 + 8);
    if (v19)
      *v19 += 2;
    *(_QWORD *)(v14 + 112) = v19;
    *(_BYTE *)(v14 + 120) = 1;
  }
  *(_QWORD *)v14 = off_1E338CC18;
  v20 = *(_DWORD **)(a1 + 232);
  if (v20)
    *v20 += 2;
  *(_QWORD *)(v14 + 128) = v20;
  *a6 = v14;
  return result;
}

uint64_t WebCore::AnimationEffect::isCustomEffect(WebCore::AnimationEffect *this)
{
  return 0;
}

uint64_t WebCore::AnimationEffect::isKeyframeEffect(WebCore::AnimationEffect *this)
{
  return 0;
}

uint64_t WebCore::AnimationEffect::preventsAnimationReadiness(WebCore::AnimationEffect *this)
{
  return 0;
}

uint64_t WebCore::AnimationEffect::ticksContinuouslyWhileActive(WebCore::AnimationEffect *this)
{
  return 0;
}

uint64_t WebCore::AnimationEventBase::isCSSAnimationEvent(WebCore::AnimationEventBase *this)
{
  return 0;
}

uint64_t WebCore::AnimationPlaybackEvent::isAnimationPlaybackEvent(WebCore::AnimationPlaybackEvent *this)
{
  return 1;
}

uint64_t WebCore::KeyframeInterpolation::Keyframe::isAcceleratedEffectKeyframe(WebCore::KeyframeInterpolation::Keyframe *this)
{
  return 0;
}

uint64_t WebCore::AnimationTimeline::isDocumentTimeline(WebCore::AnimationTimeline *this)
{
  return 0;
}

uint64_t WebCore::AnimationTimeline::isScrollTimeline(WebCore::AnimationTimeline *this)
{
  return 0;
}

uint64_t WebCore::AnimationTimeline::isViewTimeline(WebCore::AnimationTimeline *this)
{
  return 0;
}

double WebCore::AnimationTimeline::currentTime(WebCore::AnimationTimeline *this)
{
  return *((double *)this + 6);
}

uint64_t WebCore::WebAnimation::eventTargetInterface(WebCore::WebAnimation *this)
{
  return 81;
}

uint64_t WebCore::WebAnimation::scriptExecutionContext(WebCore::WebAnimation *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

void WebCore::CSSAnimation::~CSSAnimation(WebCore::CSSAnimation *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CSSAnimation::~CSSAnimation(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::StyleOriginatedAnimation::~StyleOriginatedAnimation(this, a2);
}

uint64_t WebCore::WebAnimation::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::WebAnimation::derefEventTarget(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 72))(this);
  --this[6];
  return this;
}

uint64_t WebCore::StyleOriginatedAnimation::isStyleOriginatedAnimation(WebCore::StyleOriginatedAnimation *this)
{
  return 1;
}

uint64_t WebCore::WebAnimation::bindingsFrameRate(WebCore::WebAnimation *this)
{
  return *((_QWORD *)this + 16);
}

uint64_t WebCore::WebAnimation::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::WebAnimation::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 72))(this);
  --this[6];
  return this;
}

void `non-virtual thunk to'WebCore::CSSAnimation::~CSSAnimation(WebCore::CSSAnimation *this, WTF::StringImpl *a2)
{
  WebCore::CSSAnimation::~CSSAnimation((WebCore::CSSAnimation *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::CSSAnimation::~CSSAnimation((WebCore::CSSAnimation *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t `non-virtual thunk to'WebCore::WebAnimation::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WebAnimation::deref(uint64_t this)
{
  if (*(_DWORD *)(this - 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 32) + 72))(this - 32);
  --*(_DWORD *)(this - 8);
  return this;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEERKSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEERKSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14TimingFunctionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14TimingFunctionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  char *v10;
  char v11;

  v3 = *(unsigned int *)(a1 - 4);
  if (!(_DWORD)v3)
    return WTF::fastFree((WTF *)(a1 - 16), a2);
  for (i = a1; ; i += 16)
  {
    v5 = *(unsigned int *)(i + 8);
    if ((_DWORD)v5 == -1)
      break;
    v10 = &v9;
    if ((((uint64_t (*)(char **, uint64_t))off_1E338CB00[v5])(&v10, i) & 1) == 0)
    {
      v6 = *(unsigned int *)(i + 8);
      if ((_DWORD)v6 != -1)
        __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v6](&v11, i);
      *(_DWORD *)(i + 8) = -1;
    }
    if (!--v3)
      return WTF::fastFree((WTF *)(a1 - 16), a2);
  }
  v8 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::isDeletedBucket(v8);
}

uint64_t WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::isDeletedBucket(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __int16 *v4;
  char v5;
  char *v6;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>::isDeletedValue(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::{lambda(WebCore::CSSPropertyID)#1},WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>::isDeletedValue(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::{lambda(WTF::AtomString const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(v3, v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **, uint64_t))off_1E338CB00[v1])(&v6, a1);
  }
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>::isDeletedValue(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::{lambda(WebCore::CSSPropertyID)#1},WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>::isDeletedValue(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::{lambda(WTF::AtomString const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(uint64_t a1, __int16 *a2)
{
  return *a2 == -1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>::isDeletedValue(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::{lambda(WebCore::CSSPropertyID)#1},WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>::isDeletedValue(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::{lambda(WTF::AtomString const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>()
{
  return 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const>(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return *a2 == *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::hash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned __int16 *v4;
  char v5;
  char *v6;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>::hash(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::{lambda(WebCore::CSSPropertyID)#1},WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>::hash(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::{lambda(WTF::AtomString const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(v3, v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNS6_11DefaultHashINS_7variantIJN7WebCore13CSSPropertyIDENS6_10AtomStringEEEEE4hashERKSD_EUlSB_E_JZNSE_4hashESG_EUlRKSC_E_EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v1])(&v6, a1);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>::hash(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::{lambda(WebCore::CSSPropertyID)#1},WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>::hash(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::{lambda(WTF::AtomString const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = 9 * ((~(*a2 << 15) + *a2) ^ ((~(*a2 << 15) + *a2) >> 10));
  v3 = (v2 ^ (v2 >> 6)) + ~((v2 ^ (v2 >> 6)) << 11);
  return v3 ^ HIWORD(v3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>::hash(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::{lambda(WebCore::CSSPropertyID)#1},WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>::hash(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::{lambda(WTF::AtomString const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
}

double WebCore::CubicBezierTimingFunction::defaultTimingFunction(WebCore::CubicBezierTimingFunction *this)
{
  uint64_t v1;
  double result;

  {
    v1 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v1 + 8) = 1;
    *(_QWORD *)v1 = &off_1E3347E18;
    result = 0.25;
    *(_OWORD *)(v1 + 16) = xmmword_1968C1FC0;
    *(_OWORD *)(v1 + 32) = xmmword_1968C1FD0;
    *(_BYTE *)(v1 + 48) = 0;
    WebCore::CubicBezierTimingFunction::defaultTimingFunction(void)::function = v1;
  }
  return result;
}

double std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::zeroPercentKeyframe(void)::$_0 &&>>()
{
  _QWORD *v0;
  uint64_t v1;
  double *v2;
  uint64_t v3;
  double result;
  uint64_t v5;

  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
  *v0 = 0x900000001;
  v0[1] = 0;
  v0[2] = v0 + 4;
  v0[3] = 4;
  v1 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v1 = 1;
  *(_BYTE *)(v1 + 4) = *(_BYTE *)(v1 + 4) & 0xC0 | 8;
  *(_QWORD *)(v1 + 8) = v0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  _MergedGlobals_153 = v1;
  v5 = 0;
  v2 = (double *)WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1 + 16, 1uLL, (unint64_t)&v5);
  v3 = *(unsigned int *)(v1 + 28);
  result = *v2;
  *(double *)(*(_QWORD *)(v1 + 16) + 8 * v3) = *v2;
  *(_DWORD *)(v1 + 28) = v3 + 1;
  return result;
}

double std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::hundredPercentKeyframe(void)::$_0 &&>>()
{
  _QWORD *v0;
  uint64_t v1;
  double *v2;
  uint64_t v3;
  double result;
  uint64_t v5;

  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
  *v0 = 0x900000001;
  v0[1] = 0;
  v0[2] = v0 + 4;
  v0[3] = 4;
  v1 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v1 = 1;
  *(_BYTE *)(v1 + 4) = *(_BYTE *)(v1 + 4) & 0xC0 | 8;
  *(_QWORD *)(v1 + 8) = v0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  qword_1ECE821A0 = v1;
  v5 = 0x3FF0000000000000;
  v2 = (double *)WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1 + 16, 1uLL, (unint64_t)&v5);
  v3 = *(unsigned int *)(v1 + 28);
  result = *v2;
  *(double *)(*(_QWORD *)(v1 + 16) + 8 * v3) = *v2;
  *(_DWORD *)(v1 + 28) = v3 + 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEENS9_25AcceleratedEffectPropertyEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v3](&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

WTF::StringImpl *WTF::HashTable<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>,std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>>,WTF::HashTraits<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>>,WTF::HashTraits<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>>>::add@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  int v11;
  WTF::StringImpl *result;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  int v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  v5 = *a1;
  if (*a1
    || (WTF::HashTable<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>,std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>>,WTF::HashTraits<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>>,WTF::HashTraits<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>>>::rehash(a1, 8u, 0), (v5 = *a1) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v8 = WTF::PairHash<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>::hash(a2);
  v9 = 0;
  v10 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  v11 = 1;
  result = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
  {
LABEL_5:
    *(_DWORD *)result += 2;
    goto LABEL_6;
  }
  while (1)
  {
LABEL_6:
    v13 = v8 & v6;
    v14 = v5 + 32 * v13;
    v15 = (_BYTE *)(v14 + 24);
    if (*(_QWORD *)v14)
      v16 = 1;
    else
      v16 = *(_BYTE *)(v14 + 24) == 0;
    if (v16)
    {
      v17 = 0;
    }
    else
    {
      v18 = v5 + 32 * v13;
      v19 = *(_DWORD *)(v18 + 8);
      v20 = *(WTF::StringImpl **)(v18 + 16);
      v17 = v19 == 24 && v20 == result;
    }
    if (result)
    {
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        goto LABEL_21;
      }
      WTF::StringImpl::destroy(result, v7);
      v10 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
      result = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
      if (!v17)
        goto LABEL_22;
LABEL_39:
      if (v9)
      {
        if (v10)
          *v10 += 2;
        *(_QWORD *)v9 = 0;
        *((_DWORD *)v9 + 2) = 24;
        *((_QWORD *)v9 + 2) = v10;
        v28 = 1;
        *((_BYTE *)v9 + 24) = 1;
        --*(_DWORD *)(*a1 - 16);
      }
      else
      {
        v28 = *v15;
        v9 = (WTF::StringImpl *)(v5 + 32 * v13);
      }
      *(_QWORD *)v9 = *(_QWORD *)a2;
      if (v28 == *(unsigned __int8 *)(a2 + 24))
      {
        if (v28)
        {
          *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
          v29 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a2 + 16) = 0;
          result = (WTF::StringImpl *)*((_QWORD *)v9 + 2);
          *((_QWORD *)v9 + 2) = v29;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
      else if (v28)
      {
        result = (WTF::StringImpl *)*((_QWORD *)v9 + 2);
        *((_QWORD *)v9 + 2) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
          else
            *(_DWORD *)result -= 2;
        }
        *((_BYTE *)v9 + 24) = 0;
      }
      else
      {
        *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
        v32 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = 0;
        *((_QWORD *)v9 + 2) = v32;
        *((_BYTE *)v9 + 24) = 1;
      }
      v33 = *a1;
      if (*a1)
        v34 = *(_DWORD *)(v33 - 12) + 1;
      else
        v34 = 1;
      *(_DWORD *)(v33 - 12) = v34;
      v35 = *a1;
      if (*a1)
        v36 = *(_DWORD *)(v35 - 12);
      else
        v36 = 0;
      v37 = (*(_DWORD *)(v35 - 16) + v36);
      v38 = *(unsigned int *)(v35 - 4);
      if (v38 > 0x400)
      {
        if (v38 <= 2 * v37)
          goto LABEL_66;
      }
      else if (3 * v38 <= 4 * v37)
      {
        if (!(_DWORD)v38)
        {
          v39 = 8;
LABEL_69:
          result = (WTF::StringImpl *)WTF::HashTable<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>,std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>>,WTF::HashTraits<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>>,WTF::HashTraits<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>>>::rehash(a1, v39, (uint64_t *)v9);
          v9 = result;
          v35 = *a1;
          if (*a1)
            v38 = *(unsigned int *)(v35 - 4);
          else
            v38 = 0;
          goto LABEL_73;
        }
LABEL_66:
        v39 = (_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38));
        goto LABEL_69;
      }
LABEL_73:
      v40 = a3;
      v41 = v35 + 32 * v38;
      v42 = 1;
      v14 = (uint64_t)v9;
      goto LABEL_74;
    }
LABEL_21:
    if (v17)
      goto LABEL_39;
LABEL_22:
    if (*(_QWORD *)v14 == -1)
    {
      v9 = (WTF::StringImpl *)(v5 + 32 * v13);
      goto LABEL_36;
    }
    if (*(_QWORD *)v14 == *(_QWORD *)a2)
    {
      v22 = *(unsigned __int8 *)(a2 + 24);
      if (*v15)
        v23 = v22 == 0;
      else
        v23 = 1;
      if (v23)
      {
        if ((*v15 != 0) == (v22 != 0))
          break;
        goto LABEL_36;
      }
      v24 = v5 + 32 * v13;
      v25 = *(_DWORD *)(v24 + 8);
      v26 = *(_QWORD *)(v24 + 16);
      if (v25 == *(_DWORD *)(a2 + 8) && v26 == *(_QWORD *)(a2 + 16))
        break;
    }
LABEL_36:
    v8 = v11 + v13;
    ++v11;
    if (result)
      goto LABEL_5;
  }
  v30 = *a1;
  if (*a1)
    v31 = *(unsigned int *)(v30 - 4);
  else
    v31 = 0;
  v40 = a3;
  v42 = 0;
  v41 = v30 + 32 * v31;
LABEL_74:
  *(_QWORD *)v40 = v14;
  *(_QWORD *)(v40 + 8) = v41;
  *(_BYTE *)(v40 + 16) = v42;
  return result;
}

uint64_t WTF::HashTable<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>,std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>>,WTF::HashTraits<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>>,WTF::HashTraits<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int *v10;
  int v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  _BYTE *v20;
  BOOL v21;
  _BOOL4 v22;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  _BYTE *v32;
  BOOL v33;
  _BOOL4 v34;
  uint64_t v35;
  int v36;
  WTF::StringImpl *v37;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t result;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v52;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = a2;
  v8 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v10 = (int *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
    {
      v11 = *v10;
      v12 = (_BYTE *)(v8 + 40);
      do
      {
        *((_QWORD *)v12 - 3) = 0;
        *((_DWORD *)v12 - 4) = 24;
        *((_QWORD *)v12 - 1) = v10;
        *v12 = 1;
        v12 += 32;
        --v7;
      }
      while (v7);
      *v10 = v11 + 2 * a2;
    }
    else
    {
      v47 = (_BYTE *)(v8 + 40);
      do
      {
        *((_QWORD *)v47 - 3) = 0;
        *((_DWORD *)v47 - 4) = 24;
        *((_QWORD *)v47 - 1) = 0;
        *v47 = 1;
        v47 += 32;
        --v7;
      }
      while (v7);
    }
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v48 = v5;
    v49 = v4;
    while (1)
    {
      v16 = (uint64_t *)(v4 + 32 * v13);
      v17 = *v16;
      if (*v16 == -1)
        goto LABEL_71;
      v18 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
        *(_DWORD *)v18 += 2;
      v19 = v4 + 32 * v13;
      v20 = (_BYTE *)(v19 + 24);
      if (v17)
        v21 = 1;
      else
        v21 = *(_BYTE *)(v19 + 24) == 0;
      v22 = !v21 && *(_DWORD *)(v19 + 8) == 24 && *(_QWORD *)(v19 + 16) == (_QWORD)v18;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::destroy(v18, v9);
          if (v22)
          {
LABEL_30:
            if (*v20)
            {
              v24 = v4 + 32 * v13;
              v25 = *(WTF::StringImpl **)(v24 + 16);
              *(_QWORD *)(v24 + 16) = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 2)
                  WTF::StringImpl::destroy(v25, v9);
                else
                  *(_DWORD *)v25 -= 2;
              }
            }
            goto LABEL_71;
          }
          goto LABEL_35;
        }
        *(_DWORD *)v18 -= 2;
      }
      if (v22)
        goto LABEL_30;
LABEL_35:
      v26 = *a1;
      v52 = v14;
      if (*a1)
        v27 = *(_DWORD *)(v26 - 8);
      else
        v27 = 0;
      v28 = WTF::PairHash<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>::hash(v4 + 32 * v13);
      v29 = 0;
      v30 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
      do
      {
        if (v30)
          *(_DWORD *)v30 += 2;
        v31 = v28 & v27;
        v14 = v26 + 32 * v31;
        v32 = (_BYTE *)(v14 + 24);
        if (*(_QWORD *)v14)
          v33 = 1;
        else
          v33 = *(_BYTE *)(v14 + 24) == 0;
        if (v33)
        {
          v34 = 0;
          if (!v30)
            goto LABEL_57;
LABEL_55:
          if (*(_DWORD *)v30 == 2)
          {
            WTF::StringImpl::destroy(v30, v9);
            v30 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
          }
          else
          {
            *(_DWORD *)v30 -= 2;
          }
          goto LABEL_57;
        }
        v35 = v26 + 32 * v31;
        v36 = *(_DWORD *)(v35 + 8);
        v37 = *(WTF::StringImpl **)(v35 + 16);
        v34 = v36 == 24 && v37 == v30;
        if (v30)
          goto LABEL_55;
LABEL_57:
        v28 = ++v29 + v31;
      }
      while (!v34);
      v4 = v49;
      if (*v32)
      {
        v39 = v26 + 32 * v31;
        v40 = *(WTF::StringImpl **)(v39 + 16);
        *(_QWORD *)(v39 + 16) = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v9);
          else
            *(_DWORD *)v40 -= 2;
        }
      }
      *(_QWORD *)v14 = *v16;
      v41 = v26 + 32 * v31;
      *(_BYTE *)(v41 + 8) = 0;
      *v32 = 0;
      v15 = v48;
      if (*v20)
      {
        v42 = v49 + 32 * v13;
        v44 = *(_QWORD *)(v42 + 16);
        v43 = (_QWORD *)(v42 + 16);
        *(_DWORD *)(v41 + 8) = *((_DWORD *)v43 - 2);
        *v43 = 0;
        *(_QWORD *)(v41 + 16) = v44;
        *v32 = 1;
        if (*v20)
        {
          v45 = (WTF::StringImpl *)*v43;
          *v43 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, v9);
            else
              *(_DWORD *)v45 -= 2;
          }
        }
      }
      if (v16 != a3)
        v14 = v52;
LABEL_71:
      if (++v13 == v15)
      {
LABEL_77:
        WTF::fastFree((WTF *)(v4 - 16), v9);
        return v14;
      }
    }
  }
  v14 = 0;
  result = 0;
  if (v4)
    goto LABEL_77;
  return result;
}

unint64_t WTF::PairHash<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>::hash(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;

  v1 = ((*(unsigned __int8 *)(a1 + 24) - 1640531527) ^ ((*(unsigned __int8 *)(a1 + 24) - 1640531527) << 16))
     + (((*(unsigned __int8 *)(a1 + 24) - 1640531527) ^ ((*(unsigned __int8 *)(a1 + 24) - 1640531527) << 16)) >> 11);
  if (*(_BYTE *)(a1 + 24))
  {
    v2 = (*(_DWORD *)(a1 + 8) >> 5) & 0x7FFF800 ^ ((v1 + (unsigned __int16)*(_DWORD *)(a1 + 8)) << 16) ^ (v1 + (unsigned __int16)*(_DWORD *)(a1 + 8));
    v3 = *(_QWORD *)(a1 + 16);
    v4 = (v3 >> 5) & 0x7FFF800 ^ ((v2 + (unsigned __int16)v3 + (v2 >> 11)) << 16) ^ (v2
                                                                                                 + (unsigned __int16)v3
                                                                                                 + (v2 >> 11));
    v5 = v4 + WORD2(v3) + (v4 >> 11);
    LODWORD(v3) = (v3 >> 37) & 0x7FFF800 ^ (v5 << 16);
    v1 = (v3 ^ v5) + ((v3 ^ v5) >> 11);
  }
  v6 = (~(*(_QWORD *)a1 << 32) + *(_QWORD *)a1) ^ ((~(*(_QWORD *)a1 << 32) + *(_QWORD *)a1) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((unint64_t)(v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = (v8 >> 31) ^ v8;
  v10 = (v1 ^ (8 * v1)) + ((v1 ^ (8 * v1)) >> 5);
  v11 = (v10 ^ (4 * v10)) + ((v10 ^ (4 * v10)) >> 15);
  v12 = v11 ^ (v11 << 10);
  if (v12)
    v13 = 95187966 * v12;
  else
    v13 = -16777216;
  return (0xD7862706ELL * (unint64_t)(v13 + 277951225 * v9)) >> 4;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>> *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD **)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        v15 = *a1;
        v16 = *a1 ? *(_DWORD *)(v15 - 8) : 0;
        v17 = ~(*v14 << 32) + *v14;
        v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
        v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
        v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v24 = v14;
        if (v13 == a3)
          v12 = v24;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

BOOL WTF::ListHashSet<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::DefaultHash<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::remove(uint64_t *a1, void *a2, WTF *this)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _DWORD *v23;

  if (this)
  {
    v5 = *a1;
    if (*a1)
    {
      v6 = *(_DWORD *)(v5 - 8);
      v7 = ~(*(_QWORD *)this << 32) + *(_QWORD *)this;
      v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
      v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
      v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
      for (i = 1; ; ++i)
      {
        v12 = v10;
        v13 = *(_QWORD **)(v5 + 8 * v10);
        if (v13 != (_QWORD *)-1)
        {
          if (!v13)
            goto LABEL_16;
          if (*v13 == *(_QWORD *)this)
            break;
        }
        v10 = (v12 + i) & v6;
      }
      if (*(_DWORD *)(v5 - 4) != (_DWORD)v12)
      {
        *(_QWORD *)(v5 + 8 * v12) = -1;
        ++*(_DWORD *)(*a1 - 16);
        v14 = *a1;
        v15 = *a1 ? *(_DWORD *)(v14 - 12) - 1 : -1;
        *(_DWORD *)(v14 - 12) = v15;
        v16 = *a1;
        if (*a1)
        {
          v17 = 6 * *(_DWORD *)(v16 - 12);
          v18 = *(_DWORD *)(v16 - 4);
          if (v17 < v18 && v18 >= 9)
            WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>> *>>::rehash(a1, v18 >> 1, 0);
        }
      }
    }
LABEL_16:
    v20 = *((_QWORD *)this + 1);
    v21 = *((_QWORD *)this + 2);
    if (v20)
    {
      *(_QWORD *)(v20 + 16) = v21;
      v21 = *((_QWORD *)this + 2);
    }
    else
    {
      a1[1] = v21;
    }
    if (v21)
      v22 = (_QWORD *)(v21 + 8);
    else
      v22 = a1 + 2;
    *v22 = v20;
    v23 = *(_DWORD **)this;
    *(_QWORD *)this = 0;
    if (v23)
    {
      if (v23[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 72))(v23);
      else
        --v23[6];
    }
    WTF::fastFree(this, a2);
  }
  return this != 0;
}

uint64_t WTF::VectorTypeOperations<WebCore::BlendingKeyframe>::move(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  for (; (void *)result != a2; a3 += 48)
  {
    *(_QWORD *)a3 = off_1E338CBD0;
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(result + 8);
    *(_QWORD *)(a3 + 16) = 0;
    v5 = *(_QWORD *)(result + 16);
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(a3 + 16) = v5;
    v6 = *(_QWORD *)(result + 24);
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(a3 + 24) = v6;
    v7 = *(_QWORD *)(result + 32);
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(a3 + 32) = v7;
    LOWORD(v7) = *(_WORD *)(result + 40);
    *(_BYTE *)(a3 + 42) = *(_BYTE *)(result + 42);
    *(_WORD *)(a3 + 40) = v7;
    WebCore::BlendingKeyframe::~BlendingKeyframe((WebCore::BlendingKeyframe *)result, a2);
    result = v8 + 48;
  }
  return result;
}

unsigned __int16 *WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::expand(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::rehash(a1, v5, a2);
}

unsigned __int16 *WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::reinsert(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int i;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 *v7;
  BOOL v8;
  uint64_t v9;
  int v11;
  BOOL v12;
  char v13;
  char *v14;
  char v15;

  v3 = *a1;
  if (!*a1)
    goto LABEL_18;
  for (i = *(_DWORD *)(v3 - 8); ; i = 0)
  {
    v5 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v5 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
    ;
  }
  v14 = &v13;
  v6 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNS6_11DefaultHashINS_7variantIJN7WebCore13CSSPropertyIDENS6_10AtomStringEEEEE4hashERKSD_EUlSB_E_JZNSE_4hashESG_EUlRKSC_E_EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v5])(&v14, a2) & i;
  v7 = (unsigned __int16 *)(v3 + 16 * v6);
  if (*((_DWORD *)v7 + 2))
    v8 = 0;
  else
    v8 = *v7 == 0;
  if (!v8)
  {
    v11 = 1;
    do
    {
      v6 = (v6 + v11) & i;
      v7 = (unsigned __int16 *)(v3 + 16 * v6);
      ++v11;
      if (*((_DWORD *)v7 + 2))
        v12 = 0;
      else
        v12 = *v7 == 0;
    }
    while (!v12);
  }
  *(_BYTE *)v7 = 0;
  *((_DWORD *)v7 + 2) = -1;
  v9 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(char *, unsigned __int16 *, uint64_t))off_1E338CB80[v9])(&v15, v7, a2);
    *((_DWORD *)v7 + 2) = v9;
  }
  return v7;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (**a3)()@<X8>)
{
  unint64_t v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  char *v9;
  unsigned int *v10;
  BOOL v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t (*v26)();
  char v27;
  uint64_t *v28;
  uint64_t (**v29)();
  char v30;
  char *v31;

  v4 = (unint64_t)a1;
  v6 = *a1;
  if (*a1
    || (WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::expand(a1, 0), (v6 = *(_QWORD *)v4) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
LABEL_48:
    v7 = 0;
  }
  v8 = WTF::IdentityHashTranslator<WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::hash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>(a2) & v7;
  v9 = (char *)(v6 + 16 * v8);
  v10 = (unsigned int *)(v9 + 8);
  if (*((_DWORD *)v9 + 2))
    v11 = 0;
  else
    v11 = *(unsigned __int16 *)v9 == 0;
  if (v11)
  {
LABEL_22:
    v17 = *(_DWORD *)(a2 + 8);
    if (v17 == -1)
    {
      v16 = 0;
      v12 = v9;
LABEL_28:
      result = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v16]((char *)&v31, (uint64_t)v9);
      *((_DWORD *)v9 + 2) = -1;
      goto LABEL_29;
    }
    v12 = v9;
LABEL_24:
    v31 = v12;
    result = ((uint64_t (*)(char **, char *, uint64_t))off_1E338CB90[v17])(&v31, v12, a2);
  }
  else
  {
    v28 = (uint64_t *)v4;
    v29 = a3;
    v12 = 0;
    v4 = 1;
    a3 = off_1E338CB00;
    do
    {
      result = WTF::IdentityHashTranslator<WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::equal<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>>((uint64_t)v9, a2);
      if ((_DWORD)result)
      {
        v18 = *v28;
        if (*v28)
          v19 = *(unsigned int *)(v18 - 4);
        else
          v19 = 0;
        a3 = v29;
        v27 = 0;
        v26 = (uint64_t (*)())(v18 + 16 * v19);
        goto LABEL_44;
      }
      v14 = *v10;
      if ((_DWORD)v14 == -1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_48;
      }
      v31 = &v30;
      result = ((uint64_t (*)(char **, char *))off_1E338CB00[v14])(&v31, v9);
      if ((_DWORD)result)
        v12 = v9;
      v8 = (v8 + v4) & v7;
      v9 = (char *)(v6 + 16 * v8);
      v10 = (unsigned int *)(v9 + 8);
      v4 = (v4 + 1);
      if (*((_DWORD *)v9 + 2))
        v15 = 0;
      else
        v15 = *(unsigned __int16 *)v9 == 0;
    }
    while (!v15);
    v4 = (unint64_t)v28;
    a3 = v29;
    if (!v12)
      goto LABEL_22;
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    --*(_DWORD *)(*v28 - 16);
    v16 = *((_DWORD *)v12 + 2);
    v17 = *(_DWORD *)(a2 + 8);
    if (v16 != -1)
    {
      if (v17 != -1)
        goto LABEL_24;
      v9 = v12;
      goto LABEL_28;
    }
    if (v17 != -1)
      goto LABEL_24;
  }
LABEL_29:
  v20 = *(_QWORD *)v4;
  if (*(_QWORD *)v4)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *(_QWORD *)v4;
  if (*(_QWORD *)v4)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_37:
      result = (uint64_t)WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::expand((uint64_t *)v4, (unsigned __int16 *)v12);
      v12 = (char *)result;
      v22 = *(_QWORD *)v4;
      if (*(_QWORD *)v4)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_37;
  }
  v26 = (uint64_t (*)())(v22 + 16 * v25);
  v27 = 1;
  v9 = v12;
LABEL_44:
  *a3 = (uint64_t (*)())v9;
  a3[1] = v26;
  *((_BYTE *)a3 + 16) = v27;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSQ_EEEDcSI_DpT0_(uint64_t result, _WORD *a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v5](&v6, v4);
  }
  *(_WORD *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 0;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSQ_EEEDcSI_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (WTF::StringImpl *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v5](&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::BlendingKeyframe::animatesProperty(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_0,WebCore::BlendingKeyframe::animatesProperty(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty> &>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int i;
  unsigned int v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  _BOOL4 v13;
  BOOL v15;
  BOOL v16;
  char v18;
  char *v19;

  v2 = *(_QWORD *)(**(_QWORD **)a1 + 16);
  if (!v2)
    return 0;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 != -1)
  {
    v5 = *(_DWORD *)(v2 - 8);
    v19 = &v18;
    v6 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNS6_11DefaultHashINS_7variantIJN7WebCore13CSSPropertyIDENS6_10AtomStringEEEEE4hashERKSD_EUlSB_E_JZNSE_4hashESG_EUlRKSC_E_EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v19, a2);
    for (i = 0; ; v6 = i + v8)
    {
      v8 = v6 & v5;
      v9 = (unsigned __int16 *)(v2 + 16 * (v6 & v5));
      v10 = *((unsigned int *)v9 + 2);
      v11 = *(_DWORD *)(a2 + 8);
      v13 = v11 == (_DWORD)v10 && v11 != -1;
      if ((_DWORD)v10 == -1 || !v13)
      {
        v15 = v11 == -1;
        if ((_DWORD)v10 != -1)
          v15 = v13;
        if (v15)
          return 1;
      }
      else
      {
        v19 = &v18;
        if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v10])(&v19, v2 + 16 * v8, a2) & 1) != 0)return 1;
        LODWORD(v10) = *((_DWORD *)v9 + 2);
      }
      if ((_DWORD)v10)
        v16 = 0;
      else
        v16 = *v9 == 0;
      if (v16)
        return 0;
      ++i;
    }
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::BlendingKeyframe::animatesProperty(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_0,WebCore::BlendingKeyframe::animatesProperty(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty> &>();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::BlendingKeyframe::animatesProperty(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_0,WebCore::BlendingKeyframe::animatesProperty(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty> &>()
{
  return 0;
}

uint64_t WebCore::RenderStyle::left(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 32;
}

uint64_t WebCore::RenderStyle::right(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 16;
}

uint64_t WebCore::RenderStyle::top(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8;
}

uint64_t WebCore::RenderStyle::bottom(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 24;
}

uint64_t WebCore::RenderStyle::width(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 8) + 4;
}

uint64_t WebCore::RenderStyle::minWidth(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 8) + 20;
}

uint64_t WebCore::RenderStyle::maxWidth(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 8) + 28;
}

uint64_t WebCore::RenderStyle::height(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 8) + 12;
}

uint64_t WebCore::RenderStyle::minHeight(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 8) + 36;
}

uint64_t WebCore::RenderStyle::maxHeight(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 8) + 44;
}

float WebCore::RenderStyle::borderLeftWidth(WebCore::RenderStyle *this)
{
  uint64_t v1;
  float result;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  result = 0.0;
  if ((*(_BYTE *)(v1 + 124) & 0xE) != 0)
  {
    v3 = *(_QWORD *)(v1 + 200);
    if (*(_BYTE *)(v3 + 5) && *(_BYTE *)(v3 + 76) == 4)
    {
      if (*(_BYTE *)(v3 + 78))
        return *(float *)(v3 + 72);
      else
        return (float)*(int *)(v3 + 72);
    }
    else
    {
      return *(float *)(v1 + 120);
    }
  }
  return result;
}

WTF **WebCore::RenderStyle::setBorderLeftWidth(WebCore::RenderStyle *this, float a2)
{
  WTF **result;
  uint64_t v4;
  WTF *v5;

  v4 = *((_QWORD *)this + 1);
  result = (WTF **)((char *)this + 8);
  if (*(float *)(*(_QWORD *)(v4 + 24) + 120) != a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    result = (WTF **)WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
    *((float *)result + 30) = a2;
  }
  return result;
}

float WebCore::RenderStyle::borderRightWidth(WebCore::RenderStyle *this)
{
  uint64_t v1;
  float result;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  result = 0.0;
  if ((*(_BYTE *)(v1 + 148) & 0xE) != 0)
  {
    v3 = *(_QWORD *)(v1 + 200);
    if (*(_BYTE *)(v3 + 5) && *(_BYTE *)(v3 + 60) == 4)
    {
      if (*(_BYTE *)(v3 + 62))
        return *(float *)(v3 + 56);
      else
        return (float)*(int *)(v3 + 56);
    }
    else
    {
      return *(float *)(v1 + 144);
    }
  }
  return result;
}

WTF **WebCore::RenderStyle::setBorderRightWidth(WebCore::RenderStyle *this, float a2)
{
  WTF **result;
  uint64_t v4;
  WTF *v5;

  v4 = *((_QWORD *)this + 1);
  result = (WTF **)((char *)this + 8);
  if (*(float *)(*(_QWORD *)(v4 + 24) + 144) != a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    result = (WTF **)WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
    *((float *)result + 36) = a2;
  }
  return result;
}

float WebCore::RenderStyle::borderTopWidth(WebCore::RenderStyle *this)
{
  uint64_t v1;
  float result;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  result = 0.0;
  if ((*(_BYTE *)(v1 + 172) & 0xE) != 0)
  {
    v3 = *(_QWORD *)(v1 + 200);
    if (*(_BYTE *)(v3 + 5) && *(_BYTE *)(v3 + 52) == 4)
    {
      if (*(_BYTE *)(v3 + 54))
        return *(float *)(v3 + 48);
      else
        return (float)*(int *)(v3 + 48);
    }
    else
    {
      return *(float *)(v1 + 168);
    }
  }
  return result;
}

WTF **WebCore::RenderStyle::setBorderTopWidth(WebCore::RenderStyle *this, float a2)
{
  WTF **result;
  uint64_t v4;
  WTF *v5;

  v4 = *((_QWORD *)this + 1);
  result = (WTF **)((char *)this + 8);
  if (*(float *)(*(_QWORD *)(v4 + 24) + 168) != a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    result = (WTF **)WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
    *((float *)result + 42) = a2;
  }
  return result;
}

float WebCore::RenderStyle::borderBottomWidth(WebCore::RenderStyle *this)
{
  uint64_t v1;
  float result;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  result = 0.0;
  if ((*(_BYTE *)(v1 + 196) & 0xE) != 0)
  {
    v3 = *(_QWORD *)(v1 + 200);
    if (*(_BYTE *)(v3 + 5) && *(_BYTE *)(v3 + 68) == 4)
    {
      if (*(_BYTE *)(v3 + 70))
        return *(float *)(v3 + 64);
      else
        return (float)*(int *)(v3 + 64);
    }
    else
    {
      return *(float *)(v1 + 192);
    }
  }
  return result;
}

WTF **WebCore::RenderStyle::setBorderBottomWidth(WebCore::RenderStyle *this, float a2)
{
  WTF **result;
  uint64_t v4;
  WTF *v5;

  v4 = *((_QWORD *)this + 1);
  result = (WTF **)((char *)this + 8);
  if (*(float *)(*(_QWORD *)(v4 + 24) + 192) != a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    result = (WTF **)WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
    *((float *)result + 48) = a2;
  }
  return result;
}

uint64_t WebCore::RenderStyle::marginLeft(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 64;
}

uint64_t WebCore::RenderStyle::marginRight(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 48;
}

uint64_t WebCore::RenderStyle::marginTop(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 40;
}

uint64_t WebCore::RenderStyle::marginBottom(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 56;
}

uint64_t WebCore::RenderStyle::marginTrim(WebCore::RenderStyle *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 461);
}

uint64_t WebCore::RenderStyle::setMarginTrim(uint64_t a1, unsigned __int8 a2)
{
  uint64_t result;
  uint64_t v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  WTF *v11;
  void *v12;

  v4 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (*(unsigned __int8 *)(*(_QWORD *)(v4 + 40) + 461) != a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v11, v12);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    *(_BYTE *)(result + 461) = a2;
  }
  return result;
}

uint64_t WebCore::RenderStyle::paddingLeft(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 96;
}

uint64_t WebCore::RenderStyle::paddingRight(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 80;
}

uint64_t WebCore::RenderStyle::paddingTop(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 72;
}

uint64_t WebCore::RenderStyle::paddingBottom(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 88;
}

uint64_t WebCore::RenderStyle::backgroundColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 16) + 16;
}

uint64_t WebCore::RenderStyle::visitedLinkBackgroundColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 56) + 8;
}

uint64_t WebCore::RenderStyle::backgroundLayers(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 8);
}

uint64_t WebCore::RenderStyle::maskLayers(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 48);
}

uint64_t WebCore::RenderStyle::borderImageSource(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 200) + 8);
}

uint64_t WebCore::RenderStyle::borderImageSlices(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 200) + 16;
}

uint64_t WebCore::RenderStyle::borderImageWidth(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 200) + 48;
}

uint64_t WebCore::RenderStyle::borderImageOutset(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 200) + 80;
}

uint64_t WebCore::RenderStyle::maskBorderSource(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 216) + 8);
}

WebCore::NinePieceImage::Data *WebCore::RenderStyle::setMaskBorderSource(uint64_t a1, uint64_t *a2)
{
  WTF *v3;
  _DWORD *v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::StyleRareNonInheritedData *v8;
  WebCore::NinePieceImage::Data *result;
  WebCore::NinePieceImage::Data *v10;
  uint64_t v11;
  _DWORD *v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  void *v16;
  WebCore::NinePieceImage::Data *v17;

  v3 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)(a1 + 8));
  v4 = (_DWORD *)*((_QWORD *)v3 + 5);
  if (*v4 == 1)
  {
    v6 = *((_QWORD *)v3 + 5);
  }
  else
  {
    v5 = v3;
    v6 = WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v6, (uint64_t)v4);
    v8 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v5 + 5);
    *((_QWORD *)v5 + 5) = v6;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v8, v7);
        WTF::fastFree(v13, v14);
        v6 = *((_QWORD *)v5 + 5);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
  }
  result = *(WebCore::NinePieceImage::Data **)(v6 + 216);
  if (*(_DWORD *)result != 1)
  {
    WebCore::NinePieceImage::Data::copy(result, (uint64_t *)&v17);
    result = v17;
    v10 = *(WebCore::NinePieceImage::Data **)(v6 + 216);
    *(_QWORD *)(v6 + 216) = v17;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WebCore::NinePieceImage::Data::~Data(v10);
        WTF::fastFree(v15, v16);
        result = *(WebCore::NinePieceImage::Data **)(v6 + 216);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
  }
  v11 = *a2;
  *a2 = 0;
  v12 = (_DWORD *)*((_QWORD *)result + 1);
  *((_QWORD *)result + 1) = v11;
  if (v12)
  {
    if (v12[2] == 1)
      return (WebCore::NinePieceImage::Data *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  return result;
}

uint64_t WebCore::RenderStyle::maskBorder(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 40) + 216;
}

uint64_t WebCore::RenderStyle::setMaskBorder(uint64_t this, const WebCore::NinePieceImage *a2)
{
  WTF **v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  _DWORD *v9;
  WTF *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WebCore::StyleRareNonInheritedData *v13;
  _DWORD *v14;
  WebCore::NinePieceImage::Data *v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  void *v19;
  BOOL v20;

  v2 = (WTF **)(this + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 40) + 216);
  v4 = *(_DWORD **)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if ((v6 = *(_QWORD *)(v3 + 8), v7 = *((_QWORD *)v4 + 1), v6 != v7)
      && (v6 ? (v20 = v7 == 0) : (v20 = 1), v20 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6))
      || !WebCore::operator==((unsigned __int8 *)(v3 + 16), (unsigned __int8 *)v4 + 16)
      || *(unsigned __int8 *)(v3 + 4) != *((unsigned __int8 *)v4 + 4)
      || !WebCore::operator==((unsigned __int8 *)(v3 + 48), (unsigned __int8 *)v4 + 48)
      || *(unsigned __int8 *)(v3 + 5) != *((unsigned __int8 *)v4 + 5)
      || (this = WebCore::operator==((unsigned __int8 *)(v3 + 80), (unsigned __int8 *)v4 + 80), !(_DWORD)this)
      || *(unsigned __int8 *)(v3 + 6) != *((unsigned __int8 *)v4 + 6)
      || *(unsigned __int8 *)(v3 + 7) != *((unsigned __int8 *)v4 + 7))
    {
      v8 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v2);
      v9 = (_DWORD *)*((_QWORD *)v8 + 5);
      if (*v9 == 1)
      {
        this = *((_QWORD *)v8 + 5);
      }
      else
      {
        v10 = v8;
        v11 = WTF::fastMalloc((WTF *)0x288);
        this = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v11, (uint64_t)v9);
        v13 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v10 + 5);
        *((_QWORD *)v10 + 5) = this;
        if (v13)
        {
          if (*(_DWORD *)v13 == 1)
          {
            WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v13, v12);
            WTF::fastFree(v18, v19);
            this = *((_QWORD *)v10 + 5);
          }
          else
          {
            --*(_DWORD *)v13;
          }
        }
      }
      v14 = *(_DWORD **)a2;
      *v14 = **(_DWORD **)a2 + 1;
      v15 = *(WebCore::NinePieceImage::Data **)(this + 216);
      *(_QWORD *)(this + 216) = v14;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WebCore::NinePieceImage::Data::~Data(v15);
          return WTF::fastFree(v16, v17);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderStyle::maskRepeat(WebCore::RenderStyle *this)
{
  return *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 48) + 56);
}

WebCore::FillLayer *WebCore::RenderStyle::setMaskRepeat(uint64_t a1, __int16 a2)
{
  WebCore::FillLayer *result;
  uint64_t v4;
  unsigned __int8 *v5;
  WTF *v6;
  const WebCore::FillLayer **v7;
  WTF::StringImpl *v8;
  WebCore::StyleMiscNonInheritedData *v9;
  WTF *v10;
  void *v11;
  const WebCore::FillLayer **v12;

  v4 = *(_QWORD *)(a1 + 8);
  result = (WebCore::FillLayer *)(a1 + 8);
  v5 = *(unsigned __int8 **)(*(_QWORD *)(v4 + 32) + 48);
  if (__PAIR64__(v5[57], v5[56]) != __PAIR64__(HIBYTE(a2), a2) || (v5[61] & 8) == 0)
  {
    v6 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v7 = (const WebCore::FillLayer **)*((_QWORD *)v6 + 4);
    if (*(_DWORD *)v7 != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)v7, (uint64_t *)&v12);
      v7 = v12;
      v9 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v6 + 4);
      *((_QWORD *)v6 + 4) = v12;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v9, v8);
          WTF::fastFree(v10, v11);
          v7 = (const WebCore::FillLayer **)*((_QWORD *)v6 + 4);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
    }
    result = WTF::DataRef<WebCore::FillLayer>::access(v7 + 6);
    *((_WORD *)result + 28) = a2;
    *((_DWORD *)result + 15) |= 0x800u;
  }
  return result;
}

uint64_t WebCore::RenderStyle::objectPosition(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 32) + 128;
}

uint64_t WebCore::RenderStyle::columnRuleWidth(WebCore::RenderStyle *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24);
  if ((*(_BYTE *)(v1 + 36) & 0xE) != 0)
    return (int)*(float *)(v1 + 32);
  else
    return 0;
}

uint64_t WebCore::RenderStyle::columnGap(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 40) + 376;
}

uint64_t WebCore::RenderStyle::rowGap(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 40) + 388;
}

uint64_t WebCore::RenderStyle::columnCount(WebCore::RenderStyle *this)
{
  return *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 8);
}

uint64_t WebCore::RenderStyle::hasAutoColumnCount(WebCore::RenderStyle *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 56) >> 1) & 1;
}

float WebCore::RenderStyle::columnWidth(WebCore::RenderStyle *this)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 4);
}

uint64_t WebCore::RenderStyle::hasAutoColumnWidth(WebCore::RenderStyle *this)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 56) & 1;
}

uint64_t WebCore::RenderStyle::specifiedZIndex(WebCore::RenderStyle *this)
{
  return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 60);
}

WTF **WebCore::RenderStyle::setSpecifiedZIndex(WebCore::RenderStyle *this, int a2)
{
  WTF **result;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;

  v4 = *((_QWORD *)this + 1);
  result = (WTF **)((char *)this + 8);
  v5 = *(_QWORD *)(v4 + 8);
  if ((*(_BYTE *)(v5 + 68) & 1) != 0 || *(_DWORD *)(v5 + 60) != a2)
  {
    v6 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    result = (WTF **)WTF::DataRef<WebCore::StyleBoxData>::access((uint64_t *)v6 + 1);
    *((_BYTE *)result + 68) &= ~1u;
    *((_DWORD *)result + 15) = a2;
  }
  return result;
}

uint64_t WebCore::RenderStyle::hasAutoSpecifiedZIndex(WebCore::RenderStyle *this)
{
  return *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 68) & 1;
}

uint64_t WebCore::RenderStyle::orphans(WebCore::RenderStyle *this)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 3) + 226);
}

uint64_t WebCore::RenderStyle::widows(WebCore::RenderStyle *this)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 3) + 224);
}

void WebCore::RenderStyle::setOutlineOffset(WebCore::RenderStyle *this, float a2)
{
  WTF **v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;

  v4 = *((_QWORD *)this + 1);
  v3 = (WTF **)((char *)this + 8);
  if (*(float *)(*(_QWORD *)(v4 + 16) + 56) != a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    WTF::DataRef<WebCore::StyleBackgroundData>::access((uint64_t *)v5 + 2);
    *(float *)(v6 + 56) = a2;
  }
}

void WebCore::RenderStyle::setOutlineWidth(WebCore::RenderStyle *this, float a2)
{
  WTF **v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;

  v4 = *((_QWORD *)this + 1);
  v3 = (WTF **)((char *)this + 8);
  if (*(float *)(*(_QWORD *)(v4 + 16) + 48) != a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    WTF::DataRef<WebCore::StyleBackgroundData>::access((uint64_t *)v5 + 2);
    *(float *)(v6 + 48) = a2;
  }
}

uint64_t WebCore::RenderStyle::perspectiveOriginX(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 40) + 28;
}

uint64_t WebCore::RenderStyle::perspectiveOriginY(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 40) + 36;
}

uint64_t WebCore::RenderStyle::transformOriginX(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 40) + 24;
}

uint64_t WebCore::RenderStyle::transformOriginY(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 40) + 32;
}

float WebCore::RenderStyle::transformOriginZ(WebCore::RenderStyle *this)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 40) + 40);
}

uint64_t WebCore::RenderStyle::borderTopLeftRadius(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 208;
}

uint64_t WebCore::RenderStyle::borderTopRightRadius(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 224;
}

uint64_t WebCore::RenderStyle::borderBottomLeftRadius(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 240;
}

uint64_t WebCore::RenderStyle::borderBottomRightRadius(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 256;
}

uint64_t WebCore::RenderStyle::display(WebCore::RenderStyle *this)
{
  return *((_DWORD *)this + 4) & 0x1F;
}

uint64_t WebCore::RenderStyle::setDisplay(uint64_t result, char a2)
{
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFFFFFFFFFFFFFC00 | (32 * (a2 & 0x1F)) | a2 & 0x1F;
  return result;
}

uint64_t WebCore::RenderStyle::scale(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 312);
}

uint64_t WebCore::RenderStyle::rotate(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 304);
}

uint64_t WebCore::RenderStyle::translate(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 320);
}

uint64_t WebCore::RenderStyle::filter(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 32) + 8;
}

uint64_t WebCore::RenderStyle::backdropFilter(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 72) + 8;
}

WTF **WebCore::RenderStyle::setBackdropFilter(WTF **result, uint64_t a2)
{
  WTF **v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  WTF *v13;
  _DWORD *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WebCore::StyleRareNonInheritedData *v19;
  _DWORD *v20;
  void *v21;
  _DWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  WTF *v25;
  void *v26;
  unsigned int **v27;
  unsigned int **v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;

  v3 = result + 1;
  v4 = *(_QWORD *)(*((_QWORD *)result[1] + 5) + 72);
  v5 = *(unsigned int *)(v4 + 20);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 12))
  {
LABEL_12:
    v13 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v14 = (_DWORD *)*((_QWORD *)v13 + 5);
    if (*v14 == 1)
    {
      v17 = *((_QWORD *)v13 + 5);
    }
    else
    {
      v15 = v13;
      v16 = WTF::fastMalloc((WTF *)0x288);
      v17 = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v16, (uint64_t)v14);
      v19 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v15 + 5);
      *((_QWORD *)v15 + 5) = v17;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v19, v18);
          WTF::fastFree(v25, v26);
          v17 = *((_QWORD *)v15 + 5);
        }
        else
        {
          --*(_DWORD *)v19;
        }
      }
    }
    v20 = WTF::DataRef<WebCore::StyleFilterData>::access((uint64_t *)(v17 + 72));
    v22 = v20;
    v23 = v20[5];
    if ((_DWORD)v23)
    {
      v27 = (unsigned int **)*((_QWORD *)v20 + 1);
      v28 = &v27[v23];
      do
      {
        v29 = *v27;
        *v27 = 0;
        if (v29)
        {
          v30 = v29 + 2;
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            atomic_store(1u, v29 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 8))(v29);
          }
        }
        ++v27;
      }
      while (v27 != v28);
    }
    result = (WTF **)*((_QWORD *)v22 + 1);
    if (result)
    {
      *((_QWORD *)v22 + 1) = 0;
      v22[4] = 0;
      result = (WTF **)WTF::fastFree((WTF *)result, v21);
    }
    v24 = *(_QWORD **)a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)v22 + 1) = v24;
    LODWORD(v24) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 0;
    v22[4] = (_DWORD)v24;
    LODWORD(v24) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v22[5] = (_DWORD)v24;
    return result;
  }
  v6 = *(_QWORD **)a2;
  v7 = *(_QWORD **)(v4 + 8);
  if ((_DWORD)v5)
  {
    v8 = 8 * v5 - 8;
    v9 = v7;
    v10 = *(_QWORD **)a2;
    while (1)
    {
      v11 = v8;
      result = (WTF **)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v9 + 24))(*v9, *v10);
      if (!(_DWORD)result)
        goto LABEL_12;
      ++v9;
      ++v10;
      v8 = v11 - 8;
      if (!v11)
        goto LABEL_8;
    }
  }
  v10 = *(_QWORD **)a2;
  v9 = *(_QWORD **)(v4 + 8);
LABEL_8:
  if (v9 != &v7[v5] || v10 != &v6[v5])
    goto LABEL_12;
  return result;
}

uint64_t WebCore::RenderStyle::appleColorFilter(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 320) + 8;
}

uint64_t WebCore::RenderStyle::clipPath(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 264);
}

uint64_t WebCore::RenderStyle::setClipPath(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  uint64_t v11;
  _DWORD *v12;
  WTF *v13;
  void *v14;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (*(_QWORD *)(*(_QWORD *)(v3 + 40) + 264) != *a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v13, v14);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v11 = *a2;
    *a2 = 0;
    v12 = *(_DWORD **)(result + 264);
    *(_QWORD *)(result + 264) = v11;
    if (v12)
    {
      if (v12[2] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      else
        --v12[2];
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::shapeOutside(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 240);
}

uint64_t WebCore::RenderStyle::setShapeOutside(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF *v8;
  uint64_t v9;
  WebCore::StyleRareNonInheritedData *v10;
  uint64_t v11;
  WTF *v12;
  _DWORD *v13;
  _DWORD *v14;
  WTF *v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (*(_QWORD *)(*(_QWORD *)(v3 + 40) + 240) != *a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v7 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v7 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v8 = v5;
      v9 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v9, (uint64_t)v7);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v8 + 5);
      *((_QWORD *)v8 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v6);
          WTF::fastFree(v15, v16);
          result = *((_QWORD *)v8 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v11 = *a2;
    *a2 = 0;
    v12 = *(WTF **)(result + 240);
    *(_QWORD *)(result + 240) = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        v13 = (_DWORD *)*((_QWORD *)v12 + 2);
        *((_QWORD *)v12 + 2) = 0;
        if (v13)
        {
          if (v13[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
          else
            --v13[2];
        }
        v14 = (_DWORD *)*((_QWORD *)v12 + 1);
        *((_QWORD *)v12 + 1) = 0;
        if (v14)
        {
          if (v14[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
          else
            --v14[2];
        }
        return WTF::fastFree(v12, v6);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::shapeMargin(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 40) + 248;
}

float WebCore::RenderStyle::shapeImageThreshold(WebCore::RenderStyle *this)
{
  return *(float *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 256);
}

uint64_t WebCore::RenderStyle::setShapeImageThreshold(WebCore::RenderStyle *this, float a2)
{
  float v2;
  float v3;
  uint64_t result;
  uint64_t v5;
  WTF *v6;
  _DWORD *v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WebCore::StyleRareNonInheritedData *v11;
  WTF *v12;
  void *v13;

  v2 = 0.0;
  if (a2 > 0.0)
    v2 = a2;
  if (a2 >= 1.0)
    v3 = 1.0;
  else
    v3 = v2;
  v5 = *((_QWORD *)this + 1);
  result = (uint64_t)this + 8;
  if (*(float *)(*(_QWORD *)(v5 + 40) + 256) != v3)
  {
    v6 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v7 = (_DWORD *)*((_QWORD *)v6 + 5);
    if (*v7 == 1)
    {
      result = *((_QWORD *)v6 + 5);
    }
    else
    {
      v8 = v6;
      v9 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v9, (uint64_t)v7);
      v11 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v8 + 5);
      *((_QWORD *)v8 + 5) = result;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v11, v10);
          WTF::fastFree(v12, v13);
          result = *((_QWORD *)v8 + 5);
        }
        else
        {
          --*(_DWORD *)v11;
        }
      }
    }
    *(float *)(result + 256) = v3;
  }
  return result;
}

uint64_t WebCore::RenderStyle::columnRuleColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 16;
}

uint64_t WebCore::RenderStyle::visitedLinkColumnRuleColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 40;
}

uint64_t WebCore::RenderStyle::textStrokeColor(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 3) + 16;
}

uint64_t WebCore::RenderStyle::visitedLinkTextStrokeColor(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 3) + 64;
}

uint64_t WebCore::RenderStyle::textFillColor(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 3) + 32;
}

uint64_t WebCore::RenderStyle::visitedLinkTextFillColor(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 3) + 80;
}

uint64_t WebCore::RenderStyle::borderLeftColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 104;
}

uint64_t WebCore::RenderStyle::visitedLinkBorderLeftColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 56) + 24;
}

uint64_t WebCore::RenderStyle::borderRightColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 128;
}

uint64_t WebCore::RenderStyle::visitedLinkBorderRightColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 56) + 40;
}

uint64_t WebCore::RenderStyle::borderTopColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 152;
}

uint64_t WebCore::RenderStyle::visitedLinkBorderTopColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 56) + 56;
}

uint64_t WebCore::RenderStyle::borderBottomColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 176;
}

uint64_t WebCore::RenderStyle::visitedLinkBorderBottomColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 56) + 72;
}

uint64_t WebCore::RenderStyle::outlineColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 16) + 32;
}

uint64_t WebCore::RenderStyle::visitedLinkOutlineColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 56) + 104;
}

uint64_t WebCore::RenderStyle::boxShadow(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 88);
}

uint64_t WebCore::RenderStyle::textShadow(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 160);
}

uint64_t WebCore::RenderStyle::fillPaintType(WebCore::RenderStyle *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 7) + 16) + 56);
}

uint64_t WebCore::RenderStyle::fillPaintColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 16) + 8;
}

WebCore::StyleFillData **WebCore::RenderStyle::setFillPaintColor(WebCore::RenderStyle *this, const WebCore::StyleColor *a2)
{
  WebCore::SVGRenderStyle *v4;
  void *v6;
  WebCore::SVGRenderStyle *v7;
  WTF *v8;
  void *v9;
  WebCore::SVGRenderStyle *v10;

  v4 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
  if (*(_DWORD *)v4 != 1)
  {
    WebCore::SVGRenderStyle::copy(v4, &v10);
    v4 = v10;
    v7 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v10;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v7, v6);
        WTF::fastFree(v8, v9);
        v4 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  return WebCore::SVGRenderStyle::setFillPaint((WebCore::StyleFillData **)v4, 0, a2, MEMORY[0x1E0CBF738], 1, 0);
}

uint64_t WebCore::RenderStyle::visitedFillPaintType(WebCore::RenderStyle *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 7) + 16) + 57);
}

uint64_t WebCore::RenderStyle::visitedFillPaintColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 16) + 24;
}

WebCore::StyleFillData **WebCore::RenderStyle::setVisitedFillPaintColor(WebCore::RenderStyle *this, const WebCore::StyleColor *a2)
{
  WebCore::SVGRenderStyle *v4;
  void *v6;
  WebCore::SVGRenderStyle *v7;
  WTF *v8;
  void *v9;
  WebCore::SVGRenderStyle *v10;

  v4 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
  if (*(_DWORD *)v4 != 1)
  {
    WebCore::SVGRenderStyle::copy(v4, &v10);
    v4 = v10;
    v7 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v10;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v7, v6);
        WTF::fastFree(v8, v9);
        v4 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  return WebCore::SVGRenderStyle::setFillPaint((WebCore::StyleFillData **)v4, 0, a2, MEMORY[0x1E0CBF738], 0, 1);
}

float WebCore::RenderStyle::fillOpacity(WebCore::RenderStyle *this)
{
  return *(float *)(*(_QWORD *)(*((_QWORD *)this + 7) + 16) + 4);
}

WebCore::StyleFillData *WebCore::RenderStyle::setFillOpacity(WebCore::RenderStyle *this, float a2)
{
  _QWORD *v4;
  float v5;
  float v6;
  WebCore::StyleFillData *result;
  uint64_t v8;
  void *v9;
  WebCore::SVGRenderStyle *v10;
  WTF *v11;
  void *v12;
  _QWORD *v13;

  v4 = (_QWORD *)*((_QWORD *)this + 7);
  if (*(_DWORD *)v4 != 1)
  {
    WebCore::SVGRenderStyle::copy((WebCore::SVGRenderStyle *)v4, &v13);
    v4 = v13;
    v10 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v13;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v10, v9);
        WTF::fastFree(v11, v12);
        v4 = (_QWORD *)*((_QWORD *)this + 7);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
  }
  v5 = 0.0;
  if (a2 > 0.0)
    v5 = a2;
  if (a2 >= 1.0)
    v6 = 1.0;
  else
    v6 = v5;
  v8 = v4[2];
  result = (WebCore::StyleFillData *)(v4 + 2);
  if (*(float *)(v8 + 4) != v6)
  {
    result = WTF::DataRef<WebCore::StyleFillData>::access((WebCore::StyleFillData **)result);
    *((float *)result + 1) = v6;
  }
  return result;
}

uint64_t WebCore::RenderStyle::strokePaintType(WebCore::RenderStyle *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 7) + 24) + 80);
}

uint64_t WebCore::RenderStyle::strokePaintColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 24) + 8;
}

void WebCore::RenderStyle::setStrokePaintColor(WebCore::RenderStyle *this, const WebCore::StyleColor *a2)
{
  WebCore::SVGRenderStyle *v4;
  void *v5;
  WebCore::SVGRenderStyle *v6;
  WTF *v7;
  void *v8;
  WebCore::SVGRenderStyle *v9;

  v4 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
  if (*(_DWORD *)v4 != 1)
  {
    WebCore::SVGRenderStyle::copy(v4, &v9);
    v4 = v9;
    v6 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v9;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v6, v5);
        WTF::fastFree(v7, v8);
        v4 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
      }
      else
      {
        --*(_DWORD *)v6;
      }
    }
  }
  WebCore::SVGRenderStyle::setStrokePaint((uint64_t)v4, 0, a2, MEMORY[0x1E0CBF738], 1, 0);
}

uint64_t WebCore::RenderStyle::visitedStrokePaintType(WebCore::RenderStyle *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 7) + 24) + 81);
}

uint64_t WebCore::RenderStyle::visitedStrokePaintColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 24) + 24;
}

void WebCore::RenderStyle::setVisitedStrokePaintColor(WebCore::RenderStyle *this, const WebCore::StyleColor *a2)
{
  WebCore::SVGRenderStyle *v4;
  void *v5;
  WebCore::SVGRenderStyle *v6;
  WTF *v7;
  void *v8;
  WebCore::SVGRenderStyle *v9;

  v4 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
  if (*(_DWORD *)v4 != 1)
  {
    WebCore::SVGRenderStyle::copy(v4, &v9);
    v4 = v9;
    v6 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v9;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v6, v5);
        WTF::fastFree(v7, v8);
        v4 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
      }
      else
      {
        --*(_DWORD *)v6;
      }
    }
  }
  WebCore::SVGRenderStyle::setStrokePaint((uint64_t)v4, 0, a2, MEMORY[0x1E0CBF738], 0, 1);
}

float WebCore::RenderStyle::strokeOpacity(WebCore::RenderStyle *this)
{
  return *(float *)(*(_QWORD *)(*((_QWORD *)this + 7) + 24) + 4);
}

WebCore::SVGRenderStyle **WebCore::RenderStyle::setStrokeOpacity(WebCore::SVGRenderStyle **this, float a2)
{
  uint64_t v3;
  float v4;
  float v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  WebCore::SVGRenderStyle **v11;
  void *v12;
  WTF *v13;
  void *v14;
  int *v15;

  v3 = (uint64_t)this[7];
  if (*(_DWORD *)v3 != 1)
  {
    v11 = this;
    WebCore::SVGRenderStyle::copy(this[7], &v15);
    v3 = (uint64_t)v15;
    this = (WebCore::SVGRenderStyle **)v11[7];
    v11[7] = (WebCore::SVGRenderStyle *)v15;
    if (this)
    {
      if (*(_DWORD *)this == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle((WebCore::SVGRenderStyle *)this, v12);
        this = (WebCore::SVGRenderStyle **)WTF::fastFree(v13, v14);
        v3 = (uint64_t)v11[7];
      }
      else
      {
        --*(_DWORD *)this;
      }
    }
  }
  v4 = 0.0;
  if (a2 > 0.0)
    v4 = a2;
  if (a2 >= 1.0)
    v5 = 1.0;
  else
    v5 = v4;
  v8 = *(_QWORD *)(v3 + 24);
  v6 = (uint64_t *)(v3 + 24);
  v7 = v8;
  if (*(float *)(v8 + 4) != v5)
  {
    if (*(_DWORD *)v7 != 1)
    {
      v9 = WTF::fastMalloc((WTF *)0x58);
      v15 = WebCore::StyleStrokeData::StyleStrokeData(v9, v7);
      WTF::Ref<WebCore::StyleStrokeData,WTF::RawPtrTraits<WebCore::StyleStrokeData>,WTF::DefaultRefDerefTraits<WebCore::StyleStrokeData>>::operator=(v6, (uint64_t *)&v15);
      this = (WebCore::SVGRenderStyle **)WTF::Ref<WebCore::StyleStrokeData,WTF::RawPtrTraits<WebCore::StyleStrokeData>,WTF::DefaultRefDerefTraits<WebCore::StyleStrokeData>>::~Ref((uint64_t *)&v15, v10);
      v7 = *v6;
    }
    *(float *)(v7 + 4) = v5;
  }
  return this;
}

float WebCore::RenderStyle::strokeMiterLimit(WebCore::RenderStyle *this)
{
  return *(float *)(*((_QWORD *)this + 3) + 208);
}

void WebCore::RenderStyle::setStrokeMiterLimit(WebCore::RenderStyle *this, float a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::StyleRareInheritedData *v8;
  WTF *v9;
  void *v10;

  v3 = *((_QWORD *)this + 3);
  if (*(float *)(v3 + 208) != a2)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = *((_QWORD *)this + 3);
    }
    else
    {
      v6 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, v3);
      v8 = (WebCore::StyleRareInheritedData *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v4;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v8, v7);
          WTF::fastFree(v9, v10);
          v4 = *((_QWORD *)this + 3);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
    }
    *(float *)(v4 + 208) = a2;
  }
}

uint64_t WebCore::RenderStyle::cx(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 64) + 4;
}

uint64_t WebCore::RenderStyle::setCx(uint64_t a1, WebCore::Length *a2)
{
  WebCore::SVGRenderStyle *v4;
  void *v6;
  WebCore::SVGRenderStyle *v7;
  WTF *v8;
  void *v9;
  WebCore::SVGRenderStyle *v10;

  v4 = *(WebCore::SVGRenderStyle **)(a1 + 56);
  if (*(_DWORD *)v4 != 1)
  {
    WebCore::SVGRenderStyle::copy(v4, &v10);
    v4 = v10;
    v7 = *(WebCore::SVGRenderStyle **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v10;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v7, v6);
        WTF::fastFree(v8, v9);
        v4 = *(WebCore::SVGRenderStyle **)(a1 + 56);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  return WebCore::SVGRenderStyle::setCx((uint64_t)v4, a2);
}

uint64_t WebCore::RenderStyle::cy(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 64) + 12;
}

uint64_t WebCore::RenderStyle::setCy(uint64_t a1, WebCore::Length *a2)
{
  WebCore::SVGRenderStyle *v4;
  void *v6;
  WebCore::SVGRenderStyle *v7;
  WTF *v8;
  void *v9;
  WebCore::SVGRenderStyle *v10;

  v4 = *(WebCore::SVGRenderStyle **)(a1 + 56);
  if (*(_DWORD *)v4 != 1)
  {
    WebCore::SVGRenderStyle::copy(v4, &v10);
    v4 = v10;
    v7 = *(WebCore::SVGRenderStyle **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v10;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v7, v6);
        WTF::fastFree(v8, v9);
        v4 = *(WebCore::SVGRenderStyle **)(a1 + 56);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  return WebCore::SVGRenderStyle::setCy((uint64_t)v4, a2);
}

uint64_t WebCore::RenderStyle::r(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 64) + 20;
}

uint64_t WebCore::RenderStyle::setR(uint64_t a1, WebCore::Length *a2)
{
  WebCore::SVGRenderStyle *v4;
  void *v6;
  WebCore::SVGRenderStyle *v7;
  WTF *v8;
  void *v9;
  WebCore::SVGRenderStyle *v10;

  v4 = *(WebCore::SVGRenderStyle **)(a1 + 56);
  if (*(_DWORD *)v4 != 1)
  {
    WebCore::SVGRenderStyle::copy(v4, &v10);
    v4 = v10;
    v7 = *(WebCore::SVGRenderStyle **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v10;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v7, v6);
        WTF::fastFree(v8, v9);
        v4 = *(WebCore::SVGRenderStyle **)(a1 + 56);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  return WebCore::SVGRenderStyle::setR((uint64_t)v4, a2);
}

uint64_t WebCore::RenderStyle::rx(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 64) + 28;
}

uint64_t WebCore::RenderStyle::setRx(uint64_t a1, WebCore::Length *a2)
{
  WebCore::SVGRenderStyle *v4;
  void *v6;
  WebCore::SVGRenderStyle *v7;
  WTF *v8;
  void *v9;
  WebCore::SVGRenderStyle *v10;

  v4 = *(WebCore::SVGRenderStyle **)(a1 + 56);
  if (*(_DWORD *)v4 != 1)
  {
    WebCore::SVGRenderStyle::copy(v4, &v10);
    v4 = v10;
    v7 = *(WebCore::SVGRenderStyle **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v10;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v7, v6);
        WTF::fastFree(v8, v9);
        v4 = *(WebCore::SVGRenderStyle **)(a1 + 56);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  return WebCore::SVGRenderStyle::setRx((uint64_t)v4, a2);
}

uint64_t WebCore::RenderStyle::ry(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 64) + 36;
}

uint64_t WebCore::RenderStyle::setRy(WebCore::RenderStyle *a1, const WebCore::Length *a2)
{
  WebCore::SVGRenderStyle *v3;

  v3 = WebCore::RenderStyle::accessSVGStyle(a1);
  return WebCore::SVGRenderStyle::setRy(v3, a2);
}

uint64_t WebCore::RenderStyle::strokeDashOffset(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 24) + 56;
}

uint64_t WebCore::RenderStyle::strokeWidth(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 3) + 244;
}

uint64_t WebCore::RenderStyle::x(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 64) + 44;
}

uint64_t WebCore::RenderStyle::setX(uint64_t a1, WebCore::Length *a2)
{
  WebCore::SVGRenderStyle *v4;
  void *v6;
  WebCore::SVGRenderStyle *v7;
  WTF *v8;
  void *v9;
  WebCore::SVGRenderStyle *v10;

  v4 = *(WebCore::SVGRenderStyle **)(a1 + 56);
  if (*(_DWORD *)v4 != 1)
  {
    WebCore::SVGRenderStyle::copy(v4, &v10);
    v4 = v10;
    v7 = *(WebCore::SVGRenderStyle **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v10;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v7, v6);
        WTF::fastFree(v8, v9);
        v4 = *(WebCore::SVGRenderStyle **)(a1 + 56);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  return WebCore::SVGRenderStyle::setX((uint64_t)v4, a2);
}

uint64_t WebCore::RenderStyle::y(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 64) + 52;
}

uint64_t WebCore::RenderStyle::setY(uint64_t a1, WebCore::Length *a2)
{
  WebCore::SVGRenderStyle *v4;
  void *v6;
  WebCore::SVGRenderStyle *v7;
  WTF *v8;
  void *v9;
  WebCore::SVGRenderStyle *v10;

  v4 = *(WebCore::SVGRenderStyle **)(a1 + 56);
  if (*(_DWORD *)v4 != 1)
  {
    WebCore::SVGRenderStyle::copy(v4, &v10);
    v4 = v10;
    v7 = *(WebCore::SVGRenderStyle **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v10;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v7, v6);
        WTF::fastFree(v8, v9);
        v4 = *(WebCore::SVGRenderStyle **)(a1 + 56);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  return WebCore::SVGRenderStyle::setY((uint64_t)v4, a2);
}

float WebCore::RenderStyle::floodOpacity(WebCore::RenderStyle *this)
{
  return *(float *)(*(_QWORD *)(*((_QWORD *)this + 7) + 56) + 4);
}

float *WebCore::RenderStyle::setFloodOpacity(WebCore::RenderStyle *this, float a2)
{
  float *v3;
  float v4;
  float v5;
  float *result;
  void *v7;
  unsigned int *v8;
  void *v10;
  WebCore::SVGRenderStyle *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  char v17;

  v3 = (float *)*((_QWORD *)this + 7);
  if (*(_DWORD *)v3 != 1)
  {
    WebCore::SVGRenderStyle::copy(*((WebCore::SVGRenderStyle **)this + 7), &v16);
    v3 = v16;
    v11 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v16;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v11, v10);
        WTF::fastFree(v12, v13);
        v3 = (float *)*((_QWORD *)this + 7);
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
  }
  v4 = 0.0;
  if (a2 > 0.0)
    v4 = a2;
  if (a2 >= 1.0)
    v5 = 1.0;
  else
    v5 = v4;
  result = (float *)*((_QWORD *)v3 + 7);
  if (result[1] != v5)
  {
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMiscData::copy((WebCore::StyleMiscData *)result, &v16);
      result = v16;
      v8 = (unsigned int *)*((_QWORD *)v3 + 7);
      *((_QWORD *)v3 + 7) = v16;
      if (v8)
      {
        if (*v8 == 1)
        {
          v14 = v8[8];
          if ((_DWORD)v14 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(&v17, v8 + 6);
          v8[8] = -1;
          v15 = v8[4];
          if ((_DWORD)v15 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v15])(&v17, v8 + 2);
          v8[4] = -1;
          WTF::fastFree((WTF *)v8, v7);
          result = (float *)*((_QWORD *)v3 + 7);
        }
        else
        {
          --*v8;
        }
      }
    }
    result[1] = v5;
  }
  return result;
}

uint64_t WebCore::RenderStyle::floodColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 56) + 8;
}

float WebCore::RenderStyle::setFloodColor(WebCore::RenderStyle *this, const WebCore::StyleColor *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  char v11;
  char v12;
  float result;
  void *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  WebCore::SVGRenderStyle *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  WebCore::RenderStyle *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  _QWORD v29[4];
  _QWORD *v30;

  v3 = *((_QWORD *)this + 7);
  if (*(_DWORD *)v3 != 1)
  {
    WebCore::SVGRenderStyle::copy(*((WebCore::SVGRenderStyle **)this + 7), v29);
    v3 = v29[0];
    v20 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v29[0];
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v20, v19);
        WTF::fastFree(v23, v24);
        v3 = *((_QWORD *)this + 7);
      }
      else
      {
        --*(_DWORD *)v20;
      }
    }
  }
  v4 = *(unsigned int **)(v3 + 56);
  v5 = v4[4];
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if ((v11 & 1) == 0)
    {
LABEL_20:
      if (*v4 != 1)
      {
        WebCore::StyleMiscData::copy((WebCore::StyleMiscData *)v4, v29);
        v4 = (unsigned int *)v29[0];
        v15 = *(unsigned int **)(v3 + 56);
        *(_QWORD *)(v3 + 56) = v29[0];
        if (v15)
        {
          if (*v15 == 1)
          {
            v21 = v15[8];
            if ((_DWORD)v21 != -1)
              ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v21])(&v26, v15 + 6);
            v15[8] = -1;
            v22 = v15[4];
            if ((_DWORD)v22 != -1)
              ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v22])(&v26, v15 + 2);
            v15[4] = -1;
            WTF::fastFree((WTF *)v15, v14);
            v4 = *(unsigned int **)(v3 + 56);
          }
          else
          {
            --*v15;
          }
        }
      }
      v29[0] = &v28;
      v29[1] = &v28;
      v29[2] = &v28;
      v29[3] = &v28;
      v16 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v16 == -1)
      {
        v25 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::RenderStyle::stopOpacity(v25);
      }
      v30 = v29;
      ((void (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v16])(&v26, &v30, a2);
      v17 = v4[4];
      if ((_DWORD)v17 == -1)
      {
        if (v27 == -1)
          return result;
      }
      else if (v27 == -1)
      {
        ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v17])(v29, v4 + 2);
        v4[4] = -1;
        goto LABEL_33;
      }
      v29[0] = v4 + 2;
      ((void (*)(_QWORD *, unsigned int *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                 + v27))(v29, v4 + 2, &v26);
LABEL_33:
      if (v27 != -1)
        ((void (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v27])(v29, &v26);
    }
  }
  else
  {
    v29[0] = &v26;
    v12 = ((uint64_t (*)(_QWORD *, unsigned int *, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v29, v4 + 2, a2);
    if ((v12 & 1) == 0)
    {
      v4 = *(unsigned int **)(v3 + 56);
      goto LABEL_20;
    }
  }
  return result;
}

float WebCore::RenderStyle::stopOpacity(WebCore::RenderStyle *this)
{
  return *(float *)(*(_QWORD *)(*((_QWORD *)this + 7) + 48) + 4);
}

unsigned int *WebCore::RenderStyle::setStopOpacity(WebCore::RenderStyle *this, float a2)
{
  unsigned int *v4;
  float v5;
  float v6;
  unsigned int *result;
  uint64_t v8;
  void *v9;
  WebCore::SVGRenderStyle *v10;
  WTF *v11;
  void *v12;
  unsigned int *v13;

  v4 = (unsigned int *)*((_QWORD *)this + 7);
  if (*v4 != 1)
  {
    WebCore::SVGRenderStyle::copy((WebCore::SVGRenderStyle *)v4, &v13);
    v4 = v13;
    v10 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v13;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v10, v9);
        WTF::fastFree(v11, v12);
        v4 = (unsigned int *)*((_QWORD *)this + 7);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
  }
  v5 = 0.0;
  if (a2 > 0.0)
    v5 = a2;
  if (a2 >= 1.0)
    v6 = 1.0;
  else
    v6 = v5;
  v8 = *((_QWORD *)v4 + 6);
  result = v4 + 12;
  if (*(float *)(v8 + 4) != v6)
  {
    result = WTF::DataRef<WebCore::StyleStopData>::access((unsigned int **)result);
    *((float *)result + 1) = v6;
  }
  return result;
}

uint64_t WebCore::RenderStyle::stopColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 48) + 8;
}

uint64_t WebCore::RenderStyle::setStopColor(uint64_t this, const WebCore::StyleColor *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int **v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BOOL4 v10;
  BOOL v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  WebCore::RenderStyle *v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  _QWORD v26[4];
  _QWORD *v27;

  v3 = *(_QWORD *)(this + 56);
  if (*(_DWORD *)v3 != 1)
  {
    v18 = this;
    WebCore::SVGRenderStyle::copy(*(WebCore::SVGRenderStyle **)(this + 56), v26);
    v3 = v26[0];
    this = *(_QWORD *)(v18 + 56);
    *(_QWORD *)(v18 + 56) = v26[0];
    if (this)
    {
      if (*(_DWORD *)this == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle((WebCore::SVGRenderStyle *)this, v19);
        this = WTF::fastFree(v20, v21);
        v3 = *(_QWORD *)(v18 + 56);
      }
      else
      {
        --*(_DWORD *)this;
      }
    }
  }
  v6 = *(_QWORD *)(v3 + 48);
  v5 = (unsigned int **)(v3 + 48);
  v4 = v6;
  v7 = *(unsigned int *)(v6 + 16);
  v8 = *((_DWORD *)a2 + 2);
  v10 = v8 == (_DWORD)v7 && v8 != -1;
  if ((_DWORD)v7 == -1 || !v10)
  {
    if ((_DWORD)v7 == -1)
      v12 = v8 == -1;
    else
      v12 = v10;
    if (!v12)
    {
LABEL_19:
      v13 = WTF::DataRef<WebCore::StyleStopData>::access(v5);
      v26[0] = &v25;
      v26[1] = &v25;
      v26[2] = &v25;
      v26[3] = &v25;
      v14 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v14 == -1)
      {
        v22 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::RenderStyle::lightingColor(v22);
      }
      v15 = v13;
      v16 = v13 + 2;
      v27 = v26;
      this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v14])(&v23, &v27, a2);
      v17 = v15[4];
      if ((_DWORD)v17 == -1)
      {
        if (v24 == -1)
          return this;
      }
      else if (v24 == -1)
      {
        this = ((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v17])(v26, v16);
        v15[4] = -1;
        goto LABEL_25;
      }
      v26[0] = v16;
      this = ((uint64_t (*)(_QWORD *, unsigned int *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                           + v24))(v26, v16, &v23);
LABEL_25:
      if (v24 != -1)
        return ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v24])(v26, &v23);
    }
  }
  else
  {
    v26[0] = &v23;
    this = ((uint64_t (*)(_QWORD *, uint64_t, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v7])(v26, v4 + 8, a2);
    if ((this & 1) == 0)
      goto LABEL_19;
  }
  return this;
}

uint64_t WebCore::RenderStyle::lightingColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 56) + 24;
}

uint64_t WebCore::RenderStyle::setLightingColor(uint64_t this, const WebCore::StyleColor *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  char v11;
  void *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  WebCore::RenderStyle *v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  _QWORD v26[4];
  _QWORD *v27;

  v3 = *(_QWORD *)(this + 56);
  if (*(_DWORD *)v3 != 1)
  {
    v16 = this;
    WebCore::SVGRenderStyle::copy(*(WebCore::SVGRenderStyle **)(this + 56), v26);
    v3 = v26[0];
    this = *(_QWORD *)(v16 + 56);
    *(_QWORD *)(v16 + 56) = v26[0];
    if (this)
    {
      if (*(_DWORD *)this == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle((WebCore::SVGRenderStyle *)this, v17);
        this = WTF::fastFree(v20, v21);
        v3 = *(_QWORD *)(v16 + 56);
      }
      else
      {
        --*(_DWORD *)this;
      }
    }
  }
  v4 = *(unsigned int **)(v3 + 56);
  v5 = v4[8];
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if ((v11 & 1) == 0)
    {
LABEL_20:
      if (*v4 != 1)
      {
        WebCore::StyleMiscData::copy((WebCore::StyleMiscData *)v4, v26);
        v4 = (unsigned int *)v26[0];
        v13 = *(unsigned int **)(v3 + 56);
        *(_QWORD *)(v3 + 56) = v26[0];
        if (v13)
        {
          if (*v13 == 1)
          {
            v18 = v13[8];
            if ((_DWORD)v18 != -1)
              ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v18])(&v23, v13 + 6);
            v13[8] = -1;
            v19 = v13[4];
            if ((_DWORD)v19 != -1)
              ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v19])(&v23, v13 + 2);
            v13[4] = -1;
            WTF::fastFree((WTF *)v13, v12);
            v4 = *(unsigned int **)(v3 + 56);
          }
          else
          {
            --*v13;
          }
        }
      }
      v26[0] = &v25;
      v26[1] = &v25;
      v26[2] = &v25;
      v26[3] = &v25;
      v14 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v14 == -1)
      {
        v22 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::RenderStyle::kerning(v22);
      }
      v27 = v26;
      this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v14])(&v23, &v27, a2);
      v15 = v4[8];
      if ((_DWORD)v15 == -1)
      {
        if (v24 == -1)
          return this;
      }
      else if (v24 == -1)
      {
        this = ((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v15])(v26, v4 + 6);
        v4[8] = -1;
        goto LABEL_33;
      }
      v26[0] = v4 + 6;
      this = ((uint64_t (*)(_QWORD *, unsigned int *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                           + v24))(v26, v4 + 6, &v23);
LABEL_33:
      if (v24 != -1)
        return ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v24])(v26, &v23);
    }
  }
  else
  {
    v26[0] = &v23;
    this = ((uint64_t (*)(_QWORD *, unsigned int *, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v26, v4 + 6, a2);
    if ((this & 1) == 0)
    {
      v4 = *(unsigned int **)(v3 + 56);
      goto LABEL_20;
    }
  }
  return this;
}

uint64_t WebCore::RenderStyle::kerning(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 32) + 4);
}

uint64_t WebCore::RenderStyle::setKerning(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  WTF *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;

  v3 = *(_QWORD *)(result + 56);
  if (*(_DWORD *)v3 != 1)
  {
    v5 = result;
    WebCore::SVGRenderStyle::copy(*(WebCore::SVGRenderStyle **)(result + 56), &v11);
    v3 = v11;
    result = *(_QWORD *)(v5 + 56);
    *(_QWORD *)(v5 + 56) = v11;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle((WebCore::SVGRenderStyle *)result, v6);
        result = WTF::fastFree(v9, v10);
        v3 = *(_QWORD *)(v5 + 56);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v4 = *(_QWORD *)(v3 + 32);
  if (*(float *)(v4 + 4) != *(float *)&a2 || (unsigned __int16)*(_DWORD *)(v4 + 8) != WORD2(a2))
  {
    if (*(_DWORD *)v4 == 1)
    {
      result = *(_QWORD *)(v3 + 32);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)0xC);
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 4) = *(_QWORD *)(v4 + 4);
      v8 = *(WTF **)(v3 + 32);
      *(_QWORD *)(v3 + 32) = result;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WTF::fastFree(v8, v7);
          result = *(_QWORD *)(v3 + 32);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
    }
    *(_DWORD *)(result + 4) = a2;
    *(_WORD *)(result + 8) = WORD2(a2);
  }
  return result;
}

uint64_t WebCore::RenderStyle::fontStretch(WebCore::RenderStyle *this)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 4) + 194);
}

uint64_t WebCore::RenderStyle::textUnderlineOffset(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 188);
}

uint64_t WebCore::RenderStyle::textDecorationColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 40) + 272;
}

uint64_t WebCore::RenderStyle::visitedLinkTextDecorationColor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 56) + 88;
}

uint64_t WebCore::RenderStyle::flexBasis(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 16) + 12;
}

float WebCore::RenderStyle::flexGrow(WebCore::RenderStyle *this)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 16) + 4);
}

float WebCore::RenderStyle::flexShrink(WebCore::RenderStyle *this)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 16) + 8);
}

uint64_t WebCore::RenderStyle::order(WebCore::RenderStyle *this)
{
  return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 144);
}

int *WebCore::RenderStyle::containIntrinsicWidth@<X0>(int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  if (*(_BYTE *)(v3 + 12))
  {
    *(_DWORD *)a2 = 0;
    *(_BYTE *)(a2 + 6) = 0;
    v4 = *(unsigned __int8 *)(v3 + 8);
    *(_BYTE *)(a2 + 4) = v4;
    *(_BYTE *)(a2 + 5) = *(_BYTE *)(v3 + 9);
    if ((v4 - 2) >= 9)
    {
      if (v4 == 11)
      {
        *(_DWORD *)a2 = *(_DWORD *)(v3 + 4);
        this = WebCore::Length::ref((int *)a2);
      }
    }
    else
    {
      *(_BYTE *)(a2 + 6) = *(_BYTE *)(v3 + 10);
      *(_DWORD *)a2 = *(_DWORD *)(v3 + 4);
    }
    *(_BYTE *)(a2 + 8) = 1;
  }
  return this;
}

int *WebCore::RenderStyle::setContainIntrinsicWidth(uint64_t a1, WebCore::Length *a2)
{
  int *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  int v8;
  float v9;
  float v10;
  int *v11;
  char isCalculatedEqual;
  WTF *v13;
  _DWORD *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WebCore::StyleRareNonInheritedData *v19;
  WTF *v20;
  void *v21;

  v4 = *(_QWORD *)(a1 + 8);
  result = (int *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 40);
  v6 = *((unsigned __int8 *)a2 + 8);
  if (v5[12])
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if ((v5[12] != 0) == (v6 != 0))
      return result;
    goto LABEL_19;
  }
  v8 = v5[8];
  if (v8 != *((unsigned __int8 *)a2 + 4) || (v5[9] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_19;
  if (v8 == 13)
    return result;
  if (v8 == 11)
  {
    v11 = result;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 4), a2);
    result = v11;
    if ((isCalculatedEqual & 1) != 0)
      return result;
    goto LABEL_19;
  }
  v9 = *((float *)v5 + 1);
  if (!v5[10])
    v9 = (float)SLODWORD(v9);
  v10 = *(float *)a2;
  if (!*((_BYTE *)a2 + 6))
    v10 = (float)*(int *)a2;
  if (v9 != v10)
  {
LABEL_19:
    v13 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v14 = (_DWORD *)*((_QWORD *)v13 + 5);
    if (*v14 == 1)
    {
      v17 = *((_QWORD *)v13 + 5);
    }
    else
    {
      v15 = v13;
      v16 = WTF::fastMalloc((WTF *)0x288);
      v17 = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v16, (uint64_t)v14);
      v19 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v15 + 5);
      *((_QWORD *)v15 + 5) = v17;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v19, v18);
          WTF::fastFree(v20, v21);
          v17 = *((_QWORD *)v15 + 5);
        }
        else
        {
          --*(_DWORD *)v19;
        }
      }
    }
    return std::__optional_storage_base<WebCore::Length,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Length,false> const&>((int *)(v17 + 4), (uint64_t)a2);
  }
  return result;
}

uint64_t WebCore::RenderStyle::containIntrinsicWidthType(WebCore::RenderStyle *this)
{
  return (*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 640) >> 12) & 3;
}

uint64_t WebCore::RenderStyle::setContainIntrinsicWidthType(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  int v11;
  unint64_t v12;
  WTF *v13;
  void *v14;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((*(unsigned __int16 *)(*(_QWORD *)(v3 + 40) + 640) >> 12) & 3) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v13, v14);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v11 = *(unsigned __int8 *)(result + 642);
    v12 = (*(unsigned int *)(result + 636) | ((unint64_t)(*(unsigned __int16 *)(result + 640) | (v11 << 16)) << 32)) & 0xFFFFCFFFFFFFFFFFLL;
    *(_BYTE *)(result + 642) = v11;
    *(_DWORD *)(result + 636) = v12;
    *(_WORD *)(result + 640) = (v12 | ((unint64_t)(v4 & 3) << 44)) >> 32;
  }
  return result;
}

int *WebCore::RenderStyle::containIntrinsicHeight@<X0>(int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  if (*(_BYTE *)(v3 + 24))
  {
    *(_DWORD *)a2 = 0;
    *(_BYTE *)(a2 + 6) = 0;
    v4 = *(unsigned __int8 *)(v3 + 20);
    *(_BYTE *)(a2 + 4) = v4;
    *(_BYTE *)(a2 + 5) = *(_BYTE *)(v3 + 21);
    if ((v4 - 2) >= 9)
    {
      if (v4 == 11)
      {
        *(_DWORD *)a2 = *(_DWORD *)(v3 + 16);
        this = WebCore::Length::ref((int *)a2);
      }
    }
    else
    {
      *(_BYTE *)(a2 + 6) = *(_BYTE *)(v3 + 22);
      *(_DWORD *)a2 = *(_DWORD *)(v3 + 16);
    }
    *(_BYTE *)(a2 + 8) = 1;
  }
  return this;
}

int *WebCore::RenderStyle::setContainIntrinsicHeight(uint64_t a1, WebCore::Length *a2)
{
  int *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  int v8;
  float v9;
  float v10;
  int *v11;
  char isCalculatedEqual;
  WTF *v13;
  _DWORD *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WebCore::StyleRareNonInheritedData *v19;
  WTF *v20;
  void *v21;

  v4 = *(_QWORD *)(a1 + 8);
  result = (int *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 40);
  v6 = *((unsigned __int8 *)a2 + 8);
  if (v5[24])
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if ((v5[24] != 0) == (v6 != 0))
      return result;
    goto LABEL_19;
  }
  v8 = v5[20];
  if (v8 != *((unsigned __int8 *)a2 + 4) || (v5[21] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_19;
  if (v8 == 13)
    return result;
  if (v8 == 11)
  {
    v11 = result;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 16), a2);
    result = v11;
    if ((isCalculatedEqual & 1) != 0)
      return result;
    goto LABEL_19;
  }
  v9 = *((float *)v5 + 4);
  if (!v5[22])
    v9 = (float)SLODWORD(v9);
  v10 = *(float *)a2;
  if (!*((_BYTE *)a2 + 6))
    v10 = (float)*(int *)a2;
  if (v9 != v10)
  {
LABEL_19:
    v13 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v14 = (_DWORD *)*((_QWORD *)v13 + 5);
    if (*v14 == 1)
    {
      v17 = *((_QWORD *)v13 + 5);
    }
    else
    {
      v15 = v13;
      v16 = WTF::fastMalloc((WTF *)0x288);
      v17 = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v16, (uint64_t)v14);
      v19 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v15 + 5);
      *((_QWORD *)v15 + 5) = v17;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v19, v18);
          WTF::fastFree(v20, v21);
          v17 = *((_QWORD *)v15 + 5);
        }
        else
        {
          --*(_DWORD *)v19;
        }
      }
    }
    return std::__optional_storage_base<WebCore::Length,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Length,false> const&>((int *)(v17 + 16), (uint64_t)a2);
  }
  return result;
}

uint64_t WebCore::RenderStyle::containIntrinsicHeightType(WebCore::RenderStyle *this)
{
  return *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 640) >> 14;
}

uint64_t WebCore::RenderStyle::setContainIntrinsicHeightType(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  int v11;
  unint64_t v12;
  WTF *v13;
  void *v14;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (*(unsigned __int16 *)(*(_QWORD *)(v3 + 40) + 640) >> 14 != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v13, v14);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v11 = *(unsigned __int8 *)(result + 642);
    v12 = (*(unsigned int *)(result + 636) | ((unint64_t)(*(unsigned __int16 *)(result + 640) | (v11 << 16)) << 32)) & 0xFFFF3FFFFFFFFFFFLL;
    *(_BYTE *)(result + 642) = v11;
    *(_DWORD *)(result + 636) = v12;
    *(_WORD *)(result + 640) = (v12 | ((unint64_t)(v4 & 3) << 46)) >> 32;
  }
  return result;
}

uint64_t WebCore::RenderStyle::alignContent(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 32) + 120;
}

uint64_t WebCore::RenderStyle::alignItems(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 32) + 124;
}

uint64_t WebCore::RenderStyle::alignSelf(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 32) + 125;
}

uint64_t WebCore::RenderStyle::backfaceVisibility(WebCore::RenderStyle *this)
{
  return (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 636) >> 10) & 1;
}

uint64_t WebCore::RenderStyle::setBackfaceVisibility(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  __int16 v11;
  unsigned int v12;
  WTF *v13;
  void *v14;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((*(_DWORD *)(*(_QWORD *)(v3 + 40) + 636) >> 10) & 1) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v13, v14);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v11 = *(_WORD *)(result + 640);
    v12 = *(_DWORD *)(result + 636) & 0xFFFFFBFF;
    *(_BYTE *)(result + 642) = *(_BYTE *)(result + 642);
    *(_WORD *)(result + 640) = v11;
    *(_DWORD *)(result + 636) = v12 | ((v4 & 1) << 10);
  }
  return result;
}

uint64_t WebCore::RenderStyle::backgroundAttachment(WebCore::RenderStyle *this)
{
  return *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 8) + 58) & 3;
}

WebCore::FillLayer *WebCore::RenderStyle::setBackgroundAttachment(uint64_t a1, int a2)
{
  char v2;
  WebCore::FillLayer *result;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 8);
  result = (WebCore::FillLayer *)(a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
  if ((*(_WORD *)(v5 + 58) & 3) != a2 || (*(_BYTE *)(v5 + 61) & 1) == 0)
  {
    v6 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    WTF::DataRef<WebCore::StyleBackgroundData>::access((uint64_t *)v6 + 2);
    result = WTF::DataRef<WebCore::FillLayer>::access((const WebCore::FillLayer **)(v7 + 8));
    *((_WORD *)result + 29) = *((_WORD *)result + 29) & 0xFFFC | v2 & 3;
    *((_DWORD *)result + 15) |= 0x100u;
  }
  return result;
}

uint64_t WebCore::RenderStyle::backgroundClip(WebCore::RenderStyle *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 8) + 58) >> 2) & 7;
}

WebCore::FillLayer *WebCore::RenderStyle::setBackgroundClip(uint64_t a1, int a2)
{
  char v2;
  WebCore::FillLayer *result;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 8);
  result = (WebCore::FillLayer *)(a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
  if (((*(unsigned __int16 *)(v5 + 58) >> 2) & 7) != a2 || (*(_BYTE *)(v5 + 61) & 2) == 0)
  {
    v6 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    WTF::DataRef<WebCore::StyleBackgroundData>::access((uint64_t *)v6 + 2);
    result = WTF::DataRef<WebCore::FillLayer>::access((const WebCore::FillLayer **)(v7 + 8));
    *((_WORD *)result + 29) = *((_WORD *)result + 29) & 0xFFE3 | (4 * (v2 & 7));
    *((_DWORD *)result + 15) |= 0x200u;
  }
  return result;
}

uint64_t WebCore::RenderStyle::backgroundOrigin(WebCore::RenderStyle *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 8) + 58) >> 5) & 3;
}

WebCore::FillLayer *WebCore::RenderStyle::setBackgroundOrigin(uint64_t a1, int a2)
{
  char v2;
  WebCore::FillLayer *result;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 8);
  result = (WebCore::FillLayer *)(a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
  if (((*(unsigned __int16 *)(v5 + 58) >> 5) & 3) != a2 || (*(_BYTE *)(v5 + 61) & 4) == 0)
  {
    v6 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    WTF::DataRef<WebCore::StyleBackgroundData>::access((uint64_t *)v6 + 2);
    result = WTF::DataRef<WebCore::FillLayer>::access((const WebCore::FillLayer **)(v7 + 8));
    *((_WORD *)result + 29) = *((_WORD *)result + 29) & 0xFF9F | (32 * (v2 & 3));
    *((_DWORD *)result + 15) |= 0x400u;
  }
  return result;
}

uint64_t WebCore::RenderStyle::backgroundRepeat(WebCore::RenderStyle *this)
{
  return *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 8) + 56);
}

WebCore::FillLayer *WebCore::RenderStyle::setBackgroundRepeat(uint64_t a1, __int16 a2)
{
  WebCore::FillLayer *result;
  uint64_t v4;
  unsigned __int8 *v5;
  WTF *v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  result = (WebCore::FillLayer *)(a1 + 8);
  v5 = *(unsigned __int8 **)(*(_QWORD *)(v4 + 16) + 8);
  if (__PAIR64__(v5[57], v5[56]) != __PAIR64__(HIBYTE(a2), a2) || (v5[61] & 8) == 0)
  {
    v6 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    WTF::DataRef<WebCore::StyleBackgroundData>::access((uint64_t *)v6 + 2);
    result = WTF::DataRef<WebCore::FillLayer>::access((const WebCore::FillLayer **)(v7 + 8));
    *((_WORD *)result + 28) = a2;
    *((_DWORD *)result + 15) |= 0x800u;
  }
  return result;
}

uint64_t WebCore::RenderStyle::borderBottomStyle(WebCore::RenderStyle *this)
{
  return *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 196) & 0xF;
}

WTF **WebCore::RenderStyle::setBorderBottomStyle(uint64_t a1, int a2)
{
  WTF **result;
  uint64_t v3;
  char v4;
  WTF *v5;

  v3 = *(_QWORD *)(a1 + 8);
  result = (WTF **)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v3 + 24) + 196) & 0xF) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    result = (WTF **)WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
    *((_BYTE *)result + 196) = *((_BYTE *)result + 196) & 0xF0 | v4 & 0xF;
  }
  return result;
}

uint64_t WebCore::RenderStyle::borderCollapse(WebCore::RenderStyle *this)
{
  return (*((unsigned __int8 *)this + 44) >> 2) & 1;
}

uint64_t WebCore::RenderStyle::setBorderCollapse(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 4;
  else
    v2 = 0;
  *(_DWORD *)(result + 44) = *(_DWORD *)(result + 44) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t WebCore::RenderStyle::borderLeftStyle(WebCore::RenderStyle *this)
{
  return *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 124) & 0xF;
}

WTF **WebCore::RenderStyle::setBorderLeftStyle(uint64_t a1, int a2)
{
  WTF **result;
  uint64_t v3;
  char v4;
  WTF *v5;

  v3 = *(_QWORD *)(a1 + 8);
  result = (WTF **)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v3 + 24) + 124) & 0xF) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    result = (WTF **)WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
    *((_BYTE *)result + 124) = *((_BYTE *)result + 124) & 0xF0 | v4 & 0xF;
  }
  return result;
}

uint64_t WebCore::RenderStyle::borderRightStyle(WebCore::RenderStyle *this)
{
  return *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 148) & 0xF;
}

WTF **WebCore::RenderStyle::setBorderRightStyle(uint64_t a1, int a2)
{
  WTF **result;
  uint64_t v3;
  char v4;
  WTF *v5;

  v3 = *(_QWORD *)(a1 + 8);
  result = (WTF **)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v3 + 24) + 148) & 0xF) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    result = (WTF **)WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
    *((_BYTE *)result + 148) = *((_BYTE *)result + 148) & 0xF0 | v4 & 0xF;
  }
  return result;
}

uint64_t WebCore::RenderStyle::borderTopStyle(WebCore::RenderStyle *this)
{
  return *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 172) & 0xF;
}

WTF **WebCore::RenderStyle::setBorderTopStyle(uint64_t a1, int a2)
{
  WTF **result;
  uint64_t v3;
  char v4;
  WTF *v5;

  v3 = *(_QWORD *)(a1 + 8);
  result = (WTF **)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v3 + 24) + 172) & 0xF) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    result = (WTF **)WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
    *((_BYTE *)result + 172) = *((_BYTE *)result + 172) & 0xF0 | v4 & 0xF;
  }
  return result;
}

uint64_t WebCore::RenderStyle::boxSizing(WebCore::RenderStyle *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 68) >> 2) & 1;
}

uint64_t WebCore::RenderStyle::captionSide(WebCore::RenderStyle *this)
{
  return (*((unsigned __int8 *)this + 40) >> 1) & 3;
}

uint64_t WebCore::RenderStyle::setCaptionSide(uint64_t result, char a2)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(result + 40) & 0xFFFFFFF9 | (2 * (a2 & 3));
  return result;
}

uint64_t WebCore::RenderStyle::clear(WebCore::RenderStyle *this)
{
  return *((_WORD *)this + 9) & 7;
}

uint64_t WebCore::RenderStyle::setClear(uint64_t result, char a2)
{
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFFFFFFFFFFF8FFFFLL | ((unint64_t)(a2 & 7) << 16);
  return result;
}

uint64_t WebCore::RenderStyle::textBoxTrim(WebCore::RenderStyle *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 642) >> 2) & 3;
}

uint64_t WebCore::RenderStyle::setTextBoxTrim(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  unint64_t v11;
  WTF *v12;
  void *v13;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((*(unsigned __int8 *)(*(_QWORD *)(v3 + 40) + 642) >> 2) & 3) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v12, v13);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v11 = (*(unsigned int *)(result + 636) | ((unint64_t)(*(unsigned __int16 *)(result + 640) | (*(unsigned __int8 *)(result + 642) << 16)) << 32)) & 0xFFF3FFFFFFFFFFFFLL;
    *(_WORD *)(result + 640) = *(_WORD *)(result + 640);
    *(_DWORD *)(result + 636) = v11;
    *(_BYTE *)(result + 642) = (v11 | ((unint64_t)(v4 & 3) << 50)) >> 48;
  }
  return result;
}

uint64_t WebCore::RenderStyle::printColorAdjust(WebCore::RenderStyle *this)
{
  return (*((unsigned __int8 *)this + 44) >> 5) & 1;
}

uint64_t WebCore::RenderStyle::setPrintColorAdjust(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 32;
  else
    v2 = 0;
  *(_DWORD *)(result + 44) = *(_DWORD *)(result + 44) & 0xFFFFFFDF | v2;
  return result;
}

uint64_t WebCore::RenderStyle::columnFill(WebCore::RenderStyle *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 56) >> 2) & 1;
}

uint64_t WebCore::RenderStyle::columnRuleStyle(WebCore::RenderStyle *this)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 36) & 0xF;
}

uint64_t WebCore::RenderStyle::contentVisibility(WebCore::RenderStyle *this)
{
  return (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 636) >> 18) & 3;
}

uint64_t WebCore::RenderStyle::setContentVisibility(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  __int16 v11;
  unsigned int v12;
  WTF *v13;
  void *v14;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((*(_DWORD *)(*(_QWORD *)(v3 + 40) + 636) >> 18) & 3) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v13, v14);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v11 = *(_WORD *)(result + 640);
    v12 = *(_DWORD *)(result + 636) & 0xFFF3FFFF;
    *(_BYTE *)(result + 642) = *(_BYTE *)(result + 642);
    *(_WORD *)(result + 640) = v11;
    *(_DWORD *)(result + 636) = v12 | ((v4 & 3) << 18);
  }
  return result;
}

uint64_t WebCore::RenderStyle::cursor(WebCore::RenderStyle *this)
{
  return (*((_DWORD *)this + 10) >> 19) & 0x3F;
}

uint64_t WebCore::RenderStyle::setCursor(uint64_t result, char a2)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(result + 40) & 0xFE07FFFF | ((a2 & 0x3F) << 19);
  return result;
}

uint64_t WebCore::RenderStyle::emptyCells(WebCore::RenderStyle *this)
{
  return *((_DWORD *)this + 10) & 1;
}

uint64_t WebCore::RenderStyle::setEmptyCells(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(result + 40) & 0xFFFFFFFE | a2;
  return result;
}

uint64_t WebCore::RenderStyle::flexDirection(WebCore::RenderStyle *this)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 16) + 20) & 3;
}

uint64_t WebCore::RenderStyle::flexWrap(WebCore::RenderStyle *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 16) + 20) >> 2) & 3;
}

uint64_t WebCore::RenderStyle::floating(WebCore::RenderStyle *this)
{
  return (*((_DWORD *)this + 4) >> 25) & 7;
}

uint64_t WebCore::RenderStyle::setFloating(uint64_t result, char a2)
{
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFFFFFFFFF1FFFFFFLL | ((unint64_t)(a2 & 7) << 25);
  return result;
}

uint64_t WebCore::RenderStyle::gridAutoColumns(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 80) + 56;
}

uint64_t WebCore::RenderStyle::setGridAutoColumns(uint64_t result, uint64_t a2)
{
  WTF **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF *v12;
  _DWORD *v13;
  WTF *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebCore::StyleRareNonInheritedData *v17;
  const WebCore::StyleGridData *v18;
  WebCore::StyleGridData *v19;
  WebCore::StyleGridData *v20;
  void *v21;
  WebCore::StyleGridData *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  void *v26;

  v3 = (WTF **)(result + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 40) + 80);
  v5 = *(unsigned int *)(v4 + 68);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 12))
    goto LABEL_8;
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(v4 + 56);
    v7 = *(_QWORD *)a2;
    result = WebCore::GridTrackSize::operator==(v6, *(_QWORD *)a2);
    if (!(_DWORD)result)
      goto LABEL_8;
    v8 = v6 + 88;
    v9 = v7 + 88;
    v10 = 1;
    do
    {
      v11 = v10;
      if (v5 == v10)
        break;
      result = WebCore::GridTrackSize::operator==(v8, v9);
      v10 = v11 + 1;
      v8 += 88;
      v9 += 88;
    }
    while ((result & 1) != 0);
    if (v11 < v5)
    {
LABEL_8:
      v12 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
      v13 = (_DWORD *)*((_QWORD *)v12 + 5);
      if (*v13 == 1)
      {
        v15 = *((_QWORD *)v12 + 5);
      }
      else
      {
        v14 = v12;
        v15 = WTF::fastMalloc((WTF *)0x288);
        WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v15, (uint64_t)v13);
        v17 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v14 + 5);
        *((_QWORD *)v14 + 5) = v15;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
          {
            WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v17, v16);
            WTF::fastFree(v23, v24);
            v15 = *((_QWORD *)v14 + 5);
          }
          else
          {
            --*(_DWORD *)v17;
          }
        }
      }
      v18 = *(const WebCore::StyleGridData **)(v15 + 80);
      if (*(_DWORD *)v18 == 1)
      {
        v20 = *(WebCore::StyleGridData **)(v15 + 80);
      }
      else
      {
        v19 = (WebCore::StyleGridData *)WTF::fastMalloc((WTF *)0x108);
        v20 = WebCore::StyleGridData::StyleGridData(v19, v18);
        v22 = *(WebCore::StyleGridData **)(v15 + 80);
        *(_QWORD *)(v15 + 80) = v20;
        if (v22)
        {
          if (*(_DWORD *)v22 == 1)
          {
            WebCore::StyleGridData::~StyleGridData(v22, v21);
            WTF::fastFree(v25, v26);
            v20 = *(WebCore::StyleGridData **)(v15 + 80);
          }
          else
          {
            --*(_DWORD *)v22;
          }
        }
      }
      return WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v20 + 56, (_DWORD *)a2);
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::gridAutoFlow(WebCore::RenderStyle *this)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 80) + 24) & 0xF;
}

WebCore::StyleGridData *WebCore::RenderStyle::setGridAutoFlow(uint64_t a1, int a2)
{
  WebCore::StyleGridData *result;
  uint64_t v3;
  char v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  const WebCore::StyleGridData *v11;
  WebCore::StyleGridData *v12;
  void *v13;
  WebCore::StyleGridData *v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  void *v18;

  v3 = *(_QWORD *)(a1 + 8);
  result = (WebCore::StyleGridData *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 80) + 24) & 0xF) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      v8 = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = v8;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v15, v16);
          v8 = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v11 = *(const WebCore::StyleGridData **)(v8 + 80);
    if (*(_DWORD *)v11 == 1)
    {
      result = *(WebCore::StyleGridData **)(v8 + 80);
    }
    else
    {
      v12 = (WebCore::StyleGridData *)WTF::fastMalloc((WTF *)0x108);
      result = WebCore::StyleGridData::StyleGridData(v12, v11);
      v14 = *(WebCore::StyleGridData **)(v8 + 80);
      *(_QWORD *)(v8 + 80) = result;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
        {
          WebCore::StyleGridData::~StyleGridData(v14, v13);
          WTF::fastFree(v17, v18);
          result = *(WebCore::StyleGridData **)(v8 + 80);
        }
        else
        {
          --*(_DWORD *)v14;
        }
      }
    }
    *((_BYTE *)result + 24) = *((_BYTE *)result + 24) & 0xF0 | v4 & 0xF;
  }
  return result;
}

uint64_t WebCore::RenderStyle::gridAutoRows(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 80) + 40;
}

uint64_t WebCore::RenderStyle::setGridAutoRows(uint64_t result, uint64_t a2)
{
  WTF **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF *v12;
  _DWORD *v13;
  WTF *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebCore::StyleRareNonInheritedData *v17;
  const WebCore::StyleGridData *v18;
  WebCore::StyleGridData *v19;
  WebCore::StyleGridData *v20;
  void *v21;
  WebCore::StyleGridData *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  void *v26;

  v3 = (WTF **)(result + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 40) + 80);
  v5 = *(unsigned int *)(v4 + 52);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 12))
    goto LABEL_8;
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(v4 + 40);
    v7 = *(_QWORD *)a2;
    result = WebCore::GridTrackSize::operator==(v6, *(_QWORD *)a2);
    if (!(_DWORD)result)
      goto LABEL_8;
    v8 = v6 + 88;
    v9 = v7 + 88;
    v10 = 1;
    do
    {
      v11 = v10;
      if (v5 == v10)
        break;
      result = WebCore::GridTrackSize::operator==(v8, v9);
      v10 = v11 + 1;
      v8 += 88;
      v9 += 88;
    }
    while ((result & 1) != 0);
    if (v11 < v5)
    {
LABEL_8:
      v12 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
      v13 = (_DWORD *)*((_QWORD *)v12 + 5);
      if (*v13 == 1)
      {
        v15 = *((_QWORD *)v12 + 5);
      }
      else
      {
        v14 = v12;
        v15 = WTF::fastMalloc((WTF *)0x288);
        WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v15, (uint64_t)v13);
        v17 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v14 + 5);
        *((_QWORD *)v14 + 5) = v15;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
          {
            WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v17, v16);
            WTF::fastFree(v23, v24);
            v15 = *((_QWORD *)v14 + 5);
          }
          else
          {
            --*(_DWORD *)v17;
          }
        }
      }
      v18 = *(const WebCore::StyleGridData **)(v15 + 80);
      if (*(_DWORD *)v18 == 1)
      {
        v20 = *(WebCore::StyleGridData **)(v15 + 80);
      }
      else
      {
        v19 = (WebCore::StyleGridData *)WTF::fastMalloc((WTF *)0x108);
        v20 = WebCore::StyleGridData::StyleGridData(v19, v18);
        v22 = *(WebCore::StyleGridData **)(v15 + 80);
        *(_QWORD *)(v15 + 80) = v20;
        if (v22)
        {
          if (*(_DWORD *)v22 == 1)
          {
            WebCore::StyleGridData::~StyleGridData(v22, v21);
            WTF::fastFree(v25, v26);
            v20 = *(WebCore::StyleGridData **)(v15 + 80);
          }
          else
          {
            --*(_DWORD *)v22;
          }
        }
      }
      return WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v20 + 40, (_DWORD *)a2);
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::gridRowList(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 80) + 104;
}

uint64_t WebCore::RenderStyle::setGridRowList(uint64_t result, uint64_t a2)
{
  WTF **v3;
  uint64_t v4;
  unint64_t v5;
  WTF *v6;
  _DWORD *v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WebCore::StyleRareNonInheritedData *v11;
  const WebCore::StyleGridData *v12;
  uint64_t v13;
  void *v14;
  WebCore::StyleGridData *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BOOL4 v24;
  _BOOL4 v26;
  _BOOL4 v27;
  WTF *v28;
  void *v29;
  WTF *v30;
  void *v31;
  char v32;
  char *v33;

  v3 = (WTF **)(result + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 40) + 80);
  v5 = *(unsigned int *)(v4 + 116);
  if ((_DWORD)v5 == *(_DWORD *)(a2 + 12))
  {
    if (!(_DWORD)v5)
      return result;
    v17 = 0;
    v18 = 0;
    v19 = *(_QWORD *)(v4 + 104);
    v20 = *(_QWORD *)a2;
    while (1)
    {
      v21 = *(unsigned int *)(v19 + 88);
      v22 = *(_DWORD *)(v20 + 88);
      v24 = v22 == (_DWORD)v21 && v22 != -1;
      if ((_DWORD)v21 == -1 || !v24)
      {
        v26 = v22 == -1;
        if ((_DWORD)v21 == -1)
          v27 = v26;
        else
          v27 = v24;
        if (!v27)
        {
LABEL_34:
          if (v17)
            return result;
          break;
        }
      }
      else
      {
        v33 = &v32;
        result = ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E338E1B8[v21])(&v33, v19, v20);
        if ((result & 1) == 0)
          goto LABEL_34;
      }
      v17 = ++v18 >= v5;
      v20 += 96;
      v19 += 96;
      if (v5 == v18)
        goto LABEL_34;
    }
  }
  v6 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v7 = (_DWORD *)*((_QWORD *)v6 + 5);
  if (*v7 == 1)
  {
    v9 = *((_QWORD *)v6 + 5);
  }
  else
  {
    v8 = v6;
    v9 = WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v9, (uint64_t)v7);
    v11 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v8 + 5);
    *((_QWORD *)v8 + 5) = v9;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v11, v10);
        WTF::fastFree(v28, v29);
        v9 = *((_QWORD *)v8 + 5);
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
  }
  v12 = *(const WebCore::StyleGridData **)(v9 + 80);
  if (*(_DWORD *)v12 == 1)
  {
    v13 = *(_QWORD *)(v9 + 80);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x108);
    WebCore::StyleGridData::StyleGridData((WebCore::StyleGridData *)v13, v12);
    v15 = *(WebCore::StyleGridData **)(v9 + 80);
    *(_QWORD *)(v9 + 80) = v13;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
      {
        WebCore::StyleGridData::~StyleGridData(v15, v14);
        WTF::fastFree(v30, v31);
        v13 = *(_QWORD *)(v9 + 80);
      }
      else
      {
        --*(_DWORD *)v15;
      }
    }
  }
  v16 = WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v13 + 104, (uint64_t *)a2);
  return WebCore::StyleGridData::computeCachedTrackData(v16, (unsigned int *)(v13 + 104), (int *)(v13 + 136), (uint64_t *)(v13 + 160), (uint64_t *)(v13 + 176), (int *)(v13 + 232), (uint64_t *)(v13 + 192), (uint64_t *)(v13 + 208), (_DWORD *)(v13 + 252), (_BYTE *)(v13 + 257), (_BYTE *)(v13 + 258), v13 + 260);
}

uint64_t WebCore::RenderStyle::gridColumnList(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 80) + 88;
}

uint64_t WebCore::RenderStyle::setGridColumnList(uint64_t result, uint64_t a2)
{
  WTF **v3;
  uint64_t v4;
  unint64_t v5;
  WTF *v6;
  _DWORD *v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WebCore::StyleRareNonInheritedData *v11;
  const WebCore::StyleGridData *v12;
  uint64_t v13;
  void *v14;
  WebCore::StyleGridData *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BOOL4 v24;
  _BOOL4 v26;
  _BOOL4 v27;
  WTF *v28;
  void *v29;
  WTF *v30;
  void *v31;
  char v32;
  char *v33;

  v3 = (WTF **)(result + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 40) + 80);
  v5 = *(unsigned int *)(v4 + 100);
  if ((_DWORD)v5 == *(_DWORD *)(a2 + 12))
  {
    if (!(_DWORD)v5)
      return result;
    v17 = 0;
    v18 = 0;
    v19 = *(_QWORD *)(v4 + 88);
    v20 = *(_QWORD *)a2;
    while (1)
    {
      v21 = *(unsigned int *)(v19 + 88);
      v22 = *(_DWORD *)(v20 + 88);
      v24 = v22 == (_DWORD)v21 && v22 != -1;
      if ((_DWORD)v21 == -1 || !v24)
      {
        v26 = v22 == -1;
        if ((_DWORD)v21 == -1)
          v27 = v26;
        else
          v27 = v24;
        if (!v27)
        {
LABEL_34:
          if (v17)
            return result;
          break;
        }
      }
      else
      {
        v33 = &v32;
        result = ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E338E1B8[v21])(&v33, v19, v20);
        if ((result & 1) == 0)
          goto LABEL_34;
      }
      v17 = ++v18 >= v5;
      v20 += 96;
      v19 += 96;
      if (v5 == v18)
        goto LABEL_34;
    }
  }
  v6 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v7 = (_DWORD *)*((_QWORD *)v6 + 5);
  if (*v7 == 1)
  {
    v9 = *((_QWORD *)v6 + 5);
  }
  else
  {
    v8 = v6;
    v9 = WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v9, (uint64_t)v7);
    v11 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v8 + 5);
    *((_QWORD *)v8 + 5) = v9;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v11, v10);
        WTF::fastFree(v28, v29);
        v9 = *((_QWORD *)v8 + 5);
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
  }
  v12 = *(const WebCore::StyleGridData **)(v9 + 80);
  if (*(_DWORD *)v12 == 1)
  {
    v13 = *(_QWORD *)(v9 + 80);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x108);
    WebCore::StyleGridData::StyleGridData((WebCore::StyleGridData *)v13, v12);
    v15 = *(WebCore::StyleGridData **)(v9 + 80);
    *(_QWORD *)(v9 + 80) = v13;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
      {
        WebCore::StyleGridData::~StyleGridData(v15, v14);
        WTF::fastFree(v30, v31);
        v13 = *(_QWORD *)(v9 + 80);
      }
      else
      {
        --*(_DWORD *)v15;
      }
    }
  }
  v16 = WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v13 + 88, (uint64_t *)a2);
  return WebCore::StyleGridData::computeCachedTrackData(v16, (unsigned int *)(v13 + 88), (int *)(v13 + 120), (uint64_t *)(v13 + 152), (uint64_t *)(v13 + 168), (int *)(v13 + 216), (uint64_t *)(v13 + 184), (uint64_t *)(v13 + 200), (_DWORD *)(v13 + 248), (_BYTE *)(v13 + 256), (_BYTE *)(v13 + 259), v13 + 261);
}

uint64_t WebCore::RenderStyle::gridItemColumnEnd(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 88) + 24;
}

uint64_t WebCore::RenderStyle::gridItemColumnStart(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 88) + 8;
}

uint64_t WebCore::RenderStyle::gridItemRowEnd(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 88) + 56;
}

uint64_t WebCore::RenderStyle::gridItemRowStart(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 88) + 40;
}

uint64_t WebCore::RenderStyle::hyphens(WebCore::RenderStyle *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 3) + 228) >> 22) & 3;
}

uint64_t WebCore::RenderStyle::imageOrientation(WebCore::RenderStyle *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 3) + 232) >> 15) & 1;
}

uint64_t WebCore::RenderStyle::initialLetter(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 40) + 52;
}

uint64_t WebCore::RenderStyle::setInitialLetter(WebCore::RenderStyle *this, const WebCore::IntSize *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  WTF *v9;
  _DWORD *v10;
  WTF *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WebCore::StyleRareNonInheritedData *v14;
  WTF *v15;
  void *v16;

  v3 = *((_QWORD *)this + 1);
  result = (uint64_t)this + 8;
  v4 = *(_QWORD *)(v3 + 40);
  v6 = *(_DWORD *)(v4 + 52);
  v5 = *(_DWORD *)(v4 + 56);
  if (v6 != *(_DWORD *)a2 || v5 != *((_DWORD *)a2 + 1))
  {
    v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v10 = (_DWORD *)*((_QWORD *)v9 + 5);
    if (*v10 == 1)
    {
      result = *((_QWORD *)v9 + 5);
    }
    else
    {
      v11 = v9;
      v12 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v12, (uint64_t)v10);
      v14 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v11 + 5);
      *((_QWORD *)v11 + 5) = result;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v14, v13);
          WTF::fastFree(v15, v16);
          result = *((_QWORD *)v11 + 5);
        }
        else
        {
          --*(_DWORD *)v14;
        }
      }
    }
    *(_QWORD *)(result + 52) = *(_QWORD *)a2;
  }
  return result;
}

uint64_t WebCore::RenderStyle::justifyContent(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 32) + 122;
}

uint64_t WebCore::RenderStyle::justifyItems(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 32) + 126;
}

uint64_t WebCore::RenderStyle::justifySelf(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 32) + 127;
}

uint64_t WebCore::RenderStyle::lineBreak(WebCore::RenderStyle *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 3) + 228) >> 12) & 7;
}

uint64_t WebCore::RenderStyle::listStylePosition(WebCore::RenderStyle *this)
{
  return (*((unsigned __int8 *)this + 40) >> 3) & 1;
}

uint64_t WebCore::RenderStyle::setListStylePosition(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 8;
  else
    v2 = 0;
  *(_DWORD *)(result + 40) = *(_DWORD *)(result + 40) & 0xFFFFFFF7 | v2;
  return result;
}

uint64_t WebCore::RenderStyle::listStyleType@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = *(_QWORD *)(this + 24);
  *(_BYTE *)a2 = *(_BYTE *)(v2 + 368);
  v3 = *(_DWORD **)(v2 + 376);
  if (v3)
    *v3 += 2;
  *(_QWORD *)(a2 + 8) = v3;
  return this;
}

uint64_t WebCore::RenderStyle::objectFit(WebCore::RenderStyle *this)
{
  return *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 151) & 7;
}

uint64_t WebCore::RenderStyle::outlineStyle(WebCore::RenderStyle *this)
{
  return *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 52) & 0xF;
}

void WebCore::RenderStyle::setOutlineStyle(uint64_t a1, int a2)
{
  WTF **v2;
  uint64_t v3;
  char v4;
  WTF *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = (WTF **)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v3 + 16) + 52) & 0xF) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v2);
    WTF::DataRef<WebCore::StyleBackgroundData>::access((uint64_t *)v5 + 2);
    *(_BYTE *)(v6 + 52) = *(_BYTE *)(v6 + 52) & 0xF0 | v4 & 0xF;
  }
}

uint64_t WebCore::RenderStyle::overflowWrap(WebCore::RenderStyle *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 3) + 228) >> 9) & 3;
}

uint64_t WebCore::RenderStyle::overflowX(WebCore::RenderStyle *this)
{
  return (*((_DWORD *)this + 4) >> 10) & 7;
}

uint64_t WebCore::RenderStyle::setOverflowX(uint64_t result, char a2)
{
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFFFFFFFFFFFFE3FFLL | ((unint64_t)(a2 & 7) << 10);
  return result;
}

uint64_t WebCore::RenderStyle::overflowY(WebCore::RenderStyle *this)
{
  return (unsigned __int16)*((_DWORD *)this + 4) >> 13;
}

uint64_t WebCore::RenderStyle::setOverflowY(uint64_t result, char a2)
{
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFFFFFFFFFFFF1FFFLL | ((unint64_t)(a2 & 7) << 13);
  return result;
}

uint64_t WebCore::RenderStyle::breakAfter(WebCore::RenderStyle *this)
{
  return *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 640) >> 4;
}

uint64_t WebCore::RenderStyle::setBreakAfter(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  int v11;
  unint64_t v12;
  WTF *v13;
  void *v14;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (*(_WORD *)(*(_QWORD *)(v3 + 40) + 640) >> 4 != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v13, v14);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v11 = *(unsigned __int8 *)(result + 642);
    v12 = (*(unsigned int *)(result + 636) | ((unint64_t)(*(unsigned __int16 *)(result + 640) | (v11 << 16)) << 32)) & 0xFFFFFF0FFFFFFFFFLL;
    *(_BYTE *)(result + 642) = v11;
    *(_DWORD *)(result + 636) = v12;
    *(_WORD *)(result + 640) = (v12 | ((unint64_t)(v4 & 0xF) << 36)) >> 32;
  }
  return result;
}

uint64_t WebCore::RenderStyle::breakBefore(WebCore::RenderStyle *this)
{
  return *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 640) & 0xF;
}

uint64_t WebCore::RenderStyle::setBreakBefore(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  int v11;
  unint64_t v12;
  WTF *v13;
  void *v14;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if ((*(_WORD *)(*(_QWORD *)(v3 + 40) + 640) & 0xF) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v13, v14);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v11 = *(unsigned __int8 *)(result + 642);
    v12 = (*(unsigned int *)(result + 636) | ((unint64_t)(*(unsigned __int16 *)(result + 640) | (v11 << 16)) << 32)) & 0xFFFFFFF0FFFFFFFFLL;
    *(_BYTE *)(result + 642) = v11;
    *(_DWORD *)(result + 636) = v12;
    *(_WORD *)(result + 640) = (v12 | ((unint64_t)(v4 & 0xF) << 32)) >> 32;
  }
  return result;
}

uint64_t WebCore::RenderStyle::breakInside(WebCore::RenderStyle *this)
{
  return *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 641) & 7;
}

uint64_t WebCore::RenderStyle::setBreakInside(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  int v11;
  unint64_t v12;
  WTF *v13;
  void *v14;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if ((*(_WORD *)(*(_QWORD *)(v3 + 40) + 641) & 7) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v13, v14);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v11 = *(unsigned __int8 *)(result + 642);
    v12 = (*(unsigned int *)(result + 636) | ((unint64_t)(*(unsigned __int16 *)(result + 640) | (v11 << 16)) << 32)) & 0xFFFFF8FFFFFFFFFFLL;
    *(_BYTE *)(result + 642) = v11;
    *(_DWORD *)(result + 636) = v12;
    *(_WORD *)(result + 640) = (v12 | ((unint64_t)(v4 & 7) << 40)) >> 32;
  }
  return result;
}

uint64_t WebCore::RenderStyle::paintOrder(WebCore::RenderStyle *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 3) + 236) >> 11) & 7;
}

uint64_t WebCore::RenderStyle::pointerEvents(WebCore::RenderStyle *this)
{
  return (*((_DWORD *)this + 11) >> 6) & 0xF;
}

uint64_t WebCore::RenderStyle::setPointerEvents(uint64_t result, char a2)
{
  *(_DWORD *)(result + 44) = *(_DWORD *)(result + 44) & 0xFFFFFC3F | ((a2 & 0xF) << 6);
  return result;
}

uint64_t WebCore::RenderStyle::position(WebCore::RenderStyle *this)
{
  return (*((_DWORD *)this + 4) >> 19) & 7;
}

uint64_t WebCore::RenderStyle::setPosition(uint64_t result, char a2)
{
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFFFFFFFFFFC7FFFFLL | ((unint64_t)(a2 & 7) << 19);
  return result;
}

uint64_t WebCore::RenderStyle::resize(WebCore::RenderStyle *this)
{
  return (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 148) >> 27) & 7;
}

uint64_t WebCore::RenderStyle::rubyPosition(WebCore::RenderStyle *this)
{
  return (*(unsigned __int8 *)(*((_QWORD *)this + 3) + 236) >> 3) & 3;
}

uint64_t WebCore::RenderStyle::tableLayout(WebCore::RenderStyle *this)
{
  return (*((unsigned __int8 *)this + 19) >> 4) & 1;
}

uint64_t WebCore::RenderStyle::setTableLayout(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = 0x10000000;
  if (!a2)
    v2 = 0;
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFFFFFFFFEFFFFFFFLL | v2;
  return result;
}

uint64_t WebCore::RenderStyle::textAlign(WebCore::RenderStyle *this)
{
  return (*((_DWORD *)this + 10) >> 6) & 0xF;
}

uint64_t WebCore::RenderStyle::setTextAlign(uint64_t result, char a2)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(result + 40) & 0xFFFFFC3F | ((a2 & 0xF) << 6);
  return result;
}

uint64_t WebCore::RenderStyle::textAlignLast(WebCore::RenderStyle *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 3) + 232) >> 23) & 7;
}

uint64_t WebCore::RenderStyle::textDecorationLine(WebCore::RenderStyle *this)
{
  return *((_BYTE *)this + 20) & 0xF;
}

uint64_t WebCore::RenderStyle::setTextDecorationLine(uint64_t result, char a2)
{
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFFFFFFF0FFFFFFFFLL | ((unint64_t)(a2 & 0xF) << 32);
  return result;
}

uint64_t WebCore::RenderStyle::textDecorationStyle(WebCore::RenderStyle *this)
{
  return (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 636) >> 12) & 7;
}

uint64_t WebCore::RenderStyle::textEmphasisColor(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 3) + 48;
}

uint64_t WebCore::RenderStyle::visitedLinkTextEmphasisColor(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 3) + 96;
}

uint64_t WebCore::RenderStyle::textEmphasisPosition(WebCore::RenderStyle *this)
{
  return *(_BYTE *)(*((_QWORD *)this + 3) + 232) & 0xF;
}

void WebCore::RenderStyle::setTextEmphasisPosition(uint64_t a1, char a2)
{
  _DWORD *v3;
  int v4;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WebCore::StyleRareInheritedData *v9;
  WTF *v10;
  void *v11;

  v3 = *(_DWORD **)(a1 + 24);
  v4 = v3[58];
  if ((v4 & 0xF) != a2)
  {
    if (*v3 != 1)
    {
      v6 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, (uint64_t)v3);
      v9 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v7;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v9, v8);
          WTF::fastFree(v10, v11);
          v7 = *(_DWORD **)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      v4 = v7[58];
      v3 = v7;
    }
    v3[58] = v4 & 0xFFFFFFF0 | a2 & 0xF;
  }
}

uint64_t WebCore::RenderStyle::textGroupAlign(WebCore::RenderStyle *this)
{
  return (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 636) >> 15) & 7;
}

uint64_t WebCore::RenderStyle::setTextGroupAlign(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  __int16 v11;
  unsigned int v12;
  WTF *v13;
  void *v14;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((*(_DWORD *)(*(_QWORD *)(v3 + 40) + 636) >> 15) & 7) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v13, v14);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v11 = *(_WORD *)(result + 640);
    v12 = *(_DWORD *)(result + 636) & 0xFFFC7FFF;
    *(_BYTE *)(result + 642) = *(_BYTE *)(result + 642);
    *(_WORD *)(result + 640) = v11;
    *(_DWORD *)(result + 636) = v12 | ((v4 & 7) << 15);
  }
  return result;
}

uint64_t WebCore::RenderStyle::textJustify(WebCore::RenderStyle *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 3) + 232) >> 26) & 3;
}

uint64_t WebCore::RenderStyle::textOverflow(WebCore::RenderStyle *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 150) >> 5) & 1;
}

uint64_t WebCore::RenderStyle::touchActions(WebCore::RenderStyle *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 460);
}

uint64_t WebCore::RenderStyle::setTouchActions(uint64_t a1, unsigned __int8 a2)
{
  uint64_t result;
  uint64_t v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  WTF *v11;
  void *v12;

  v4 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (*(unsigned __int8 *)(*(_QWORD *)(v4 + 40) + 460) != a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v11, v12);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    *(_BYTE *)(result + 460) = a2;
  }
  return result;
}

uint64_t WebCore::RenderStyle::textTransform(WebCore::RenderStyle *this)
{
  return (*((_DWORD *)this + 10) >> 10) & 0x1F;
}

uint64_t WebCore::RenderStyle::setTextTransform(uint64_t result, char a2)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(result + 40) & 0xFFFF83FF | ((a2 & 0x1F) << 10);
  return result;
}

uint64_t WebCore::RenderStyle::whiteSpaceCollapse(WebCore::RenderStyle *this)
{
  return (*((_DWORD *)this + 10) >> 27) & 7;
}

uint64_t WebCore::RenderStyle::setWhiteSpaceCollapse(uint64_t result, char a2)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(result + 40) & 0xC7FFFFFF | ((a2 & 7) << 27);
  return result;
}

uint64_t WebCore::RenderStyle::textWrapMode(WebCore::RenderStyle *this)
{
  return (*((unsigned __int8 *)this + 43) >> 6) & 1;
}

uint64_t WebCore::RenderStyle::setTextWrapMode(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x40000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 40) = *(_DWORD *)(result + 40) & 0xBFFFFFFF | v2;
  return result;
}

uint64_t WebCore::RenderStyle::textWrapStyle(WebCore::RenderStyle *this)
{
  return *((_DWORD *)this + 11) & 3;
}

uint64_t WebCore::RenderStyle::setTextWrapStyle(uint64_t result, char a2)
{
  *(_DWORD *)(result + 44) = *(_DWORD *)(result + 44) & 0xFFFFFFFC | a2 & 3;
  return result;
}

uint64_t WebCore::RenderStyle::transformBox(WebCore::RenderStyle *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 40) + 44);
}

WebCore::StyleTransformData *WebCore::RenderStyle::setTransformBox(uint64_t a1, int a2)
{
  WebCore::StyleTransformData *result;
  uint64_t v3;
  char v4;
  WTF *v5;
  WebCore::StyleMiscNonInheritedData *v6;

  v3 = *(_QWORD *)(a1 + 8);
  result = (WebCore::StyleTransformData *)(a1 + 8);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 40) + 44) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = WTF::DataRef<WebCore::StyleMiscNonInheritedData>::access((WebCore::StyleMiscNonInheritedData **)v5 + 4);
    result = WTF::DataRef<WebCore::StyleTransformData>::access((WebCore::StyleTransformData **)v6 + 5);
    *((_BYTE *)result + 44) = v4;
  }
  return result;
}

uint64_t WebCore::RenderStyle::transformStyle3D(WebCore::RenderStyle *this)
{
  return (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 636) >> 7) & 3;
}

uint64_t WebCore::RenderStyle::setTransformStyle3D(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  __int16 v11;
  unsigned int v12;
  WTF *v13;
  void *v14;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((*(_DWORD *)(*(_QWORD *)(v3 + 40) + 636) >> 7) & 3) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v13, v14);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v11 = *(_WORD *)(result + 640);
    v12 = *(_DWORD *)(result + 636) & 0xFFFFFE7F;
    *(_BYTE *)(result + 642) = *(_BYTE *)(result + 642);
    *(_WORD *)(result + 640) = v11;
    *(_DWORD *)(result + 636) = v12 | ((v4 & 3) << 7);
  }
  return result;
}

uint64_t WebCore::RenderStyle::wordBreak(WebCore::RenderStyle *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 3) + 228) >> 6) & 7;
}

uint64_t WebCore::RenderStyle::overflowAnchor(WebCore::RenderStyle *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 642) >> 4) & 1;
}

uint64_t WebCore::RenderStyle::setOverflowAnchor(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  char v11;
  unint64_t v12;
  WTF *v13;
  void *v14;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if ((((((*(unsigned int *)(*(_QWORD *)(v3 + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(v3 + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(v3 + 40) + 642) << 16)) << 32)) & 0x10000000000000) == 0) ^ a2) & 1) == 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v13, v14);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v11 = 16;
    if (!a2)
      v11 = 0;
    v12 = (*(unsigned int *)(result + 636) | ((unint64_t)(*(unsigned __int16 *)(result + 640) | (*(unsigned __int8 *)(result + 642) << 16)) << 32)) & 0xFFEFFFFFFFFFFFFFLL;
    *(_WORD *)(result + 640) = *(_WORD *)(result + 640);
    *(_DWORD *)(result + 636) = v12;
    *(_BYTE *)(result + 642) = BYTE6(v12) | v11;
  }
  return result;
}

uint64_t WebCore::RenderStyle::boxDecorationBreak(WebCore::RenderStyle *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 68) >> 3) & 1;
}

WTF **WebCore::RenderStyle::setBoxDecorationBreak(uint64_t a1, int a2)
{
  WTF **result;
  uint64_t v3;
  WTF *v5;
  char v6;

  v3 = *(_QWORD *)(a1 + 8);
  result = (WTF **)(a1 + 8);
  if (((((*(_BYTE *)(*(_QWORD *)(v3 + 8) + 68) & 8) == 0) ^ a2) & 1) == 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    result = (WTF **)WTF::DataRef<WebCore::StyleBoxData>::access((uint64_t *)v5 + 1);
    if (a2)
      v6 = 8;
    else
      v6 = 0;
    *((_BYTE *)result + 68) = *((_BYTE *)result + 68) & 0xF7 | v6;
  }
  return result;
}

unint64_t WebCore::RenderStyle::isolation(WebCore::RenderStyle *this)
{
  return ((unint64_t)*(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 636) >> 25) & 1;
}

uint64_t WebCore::RenderStyle::setIsolation(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  __int16 v11;
  int v12;
  unsigned int v13;
  WTF *v14;
  void *v15;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((((*(_DWORD *)(*(_QWORD *)(v3 + 40) + 636) & 0x2000000) == 0) ^ a2) & 1) == 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v14, v15);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v11 = *(_WORD *)(result + 640);
    v12 = 0x2000000;
    if (!a2)
      v12 = 0;
    v13 = *(_DWORD *)(result + 636) & 0xFDFFFFFF;
    *(_BYTE *)(result + 642) = *(_BYTE *)(result + 642);
    *(_WORD *)(result + 640) = v11;
    *(_DWORD *)(result + 636) = v13 | v12;
  }
  return result;
}

uint64_t WebCore::RenderStyle::blendMode(WebCore::RenderStyle *this)
{
  return (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 636) >> 20) & 0x1F;
}

uint64_t WebCore::RenderStyle::backgroundBlendMode(WebCore::RenderStyle *this)
{
  return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 8) + 60) & 0x1F;
}

WebCore::FillLayer *WebCore::RenderStyle::setBackgroundBlendMode(uint64_t a1, int a2)
{
  WebCore::FillLayer *result;
  uint64_t v3;
  int v4;
  char v6;
  WTF *v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  result = (WebCore::FillLayer *)(a1 + 8);
  v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8) + 60) & 0x200000;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8) + 60) & 0x1F) != a2 || v4 == 0)
  {
    v6 = a2;
    v7 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    WTF::DataRef<WebCore::StyleBackgroundData>::access((uint64_t *)v7 + 2);
    result = WTF::DataRef<WebCore::FillLayer>::access((const WebCore::FillLayer **)(v8 + 8));
    *((_DWORD *)result + 15) = v6 & 0x1F | *((_DWORD *)result + 15) & 0xFFFFFFE0 | 0x200000;
  }
  return result;
}

uint64_t WebCore::RenderStyle::colorScheme(WebCore::RenderStyle *this)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 3) + 302);
}

uint64_t WebCore::RenderStyle::fontPalette(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 4) + 152;
}

uint64_t WebCore::RenderStyle::offsetPosition(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 40) + 408;
}

uint64_t WebCore::RenderStyle::offsetAnchor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 40) + 424;
}

uint64_t WebCore::RenderStyle::textDecorationSkipInk(WebCore::RenderStyle *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 3) + 232) >> 28) & 3;
}

uint64_t WebCore::SVGRenderStyle::colorInterpolation(WebCore::SVGRenderStyle *this)
{
  return *((unsigned __int8 *)this + 4) >> 6;
}

uint64_t WebCore::SVGRenderStyle::setColorInterpolation(uint64_t result, char a2)
{
  *(_WORD *)(result + 4) = *(_WORD *)(result + 4) & 0xFF3F | ((a2 & 3) << 6);
  return result;
}

uint64_t WebCore::FontCascadeDescription::kerning(WebCore::FontCascadeDescription *this)
{
  return (*((unsigned __int8 *)this + 180) >> 1) & 3;
}

uint64_t WebCore::FontCascadeDescription::setKerning(uint64_t result, char a2)
{
  *(_WORD *)(result + 180) = *(_WORD *)(result + 180) & 0xFFF9 | (2 * (a2 & 3));
  return result;
}

uint64_t WebCore::SVGRenderStyle::clipRule(WebCore::SVGRenderStyle *this)
{
  return (*((unsigned __int16 *)this + 2) >> 2) & 1;
}

uint64_t WebCore::SVGRenderStyle::setClipRule(uint64_t result, int a2)
{
  __int16 v2;

  if (a2)
    v2 = 4;
  else
    v2 = 0;
  *(_WORD *)(result + 4) = *(_WORD *)(result + 4) & 0xFFFB | v2;
  return result;
}

uint64_t WebCore::SVGRenderStyle::colorInterpolationFilters(WebCore::SVGRenderStyle *this)
{
  return *((_BYTE *)this + 5) & 3;
}

uint64_t WebCore::SVGRenderStyle::setColorInterpolationFilters(uint64_t result, char a2)
{
  *(_WORD *)(result + 4) = *(_WORD *)(result + 4) & 0xFCFF | ((a2 & 3) << 8);
  return result;
}

uint64_t WebCore::SVGRenderStyle::dominantBaseline(WebCore::SVGRenderStyle *this)
{
  return *((unsigned __int8 *)this + 8) >> 4;
}

uint64_t WebCore::SVGRenderStyle::setDominantBaseline(uint64_t result, char a2)
{
  *(_WORD *)(result + 8) = *(_WORD *)(result + 8) & 0xFF0F | (16 * (a2 & 0xF));
  return result;
}

uint64_t WebCore::SVGRenderStyle::fillRule(WebCore::SVGRenderStyle *this)
{
  return (*((unsigned __int16 *)this + 2) >> 3) & 1;
}

uint64_t WebCore::SVGRenderStyle::setFillRule(uint64_t result, int a2)
{
  __int16 v2;

  if (a2)
    v2 = 8;
  else
    v2 = 0;
  *(_WORD *)(result + 4) = *(_WORD *)(result + 4) & 0xFFF7 | v2;
  return result;
}

uint64_t WebCore::FontDescription::fontSynthesisWeight(WebCore::FontDescription *this)
{
  return (*((unsigned __int8 *)this + 161) >> 5) & 1;
}

uint64_t WebCore::FontDescription::setFontSynthesisWeight(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x2000;
  else
    v2 = 0;
  *(_DWORD *)(result + 160) = *(_DWORD *)(result + 160) & 0xFFFFDFFF | v2;
  return result;
}

uint64_t WebCore::FontDescription::fontSynthesisStyle(WebCore::FontDescription *this)
{
  return (*((unsigned __int8 *)this + 161) >> 6) & 1;
}

uint64_t WebCore::FontDescription::setFontSynthesisStyle(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x4000;
  else
    v2 = 0;
  *(_DWORD *)(result + 160) = *(_DWORD *)(result + 160) & 0xFFFFBFFF | v2;
  return result;
}

uint64_t WebCore::FontDescription::fontSynthesisSmallCaps(WebCore::FontDescription *this)
{
  return *((unsigned __int8 *)this + 161) >> 7;
}

uint64_t WebCore::FontDescription::setFontSynthesisSmallCaps(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x8000;
  else
    v2 = 0;
  *(_DWORD *)(result + 160) = *(_DWORD *)(result + 160) & 0xFFFF7FFF | v2;
  return result;
}

uint64_t WebCore::FontDescription::setVariantAlternates(uint64_t a1, uint64_t a2)
{
  return WebCore::FontVariantAlternatesValues::operator=(a1 + 32, a2);
}

uint64_t WebCore::FontDescription::variantPosition(WebCore::FontDescription *this)
{
  return *((_BYTE *)this + 163) & 3;
}

uint64_t WebCore::FontDescription::setVariantPosition(uint64_t result, char a2)
{
  *(_DWORD *)(result + 160) = *(_DWORD *)(result + 160) & 0xFCFFFFFF | ((a2 & 3) << 24);
  return result;
}

uint64_t WebCore::FontDescription::variantCaps(WebCore::FontDescription *this)
{
  return (*((_DWORD *)this + 40) >> 26) & 7;
}

uint64_t WebCore::FontDescription::setVariantCaps(uint64_t result, char a2)
{
  *(_DWORD *)(result + 160) = *(_DWORD *)(result + 160) & 0xE3FFFFFF | ((a2 & 7) << 26);
  return result;
}

uint64_t WebCore::FontDescription::variantEmoji(WebCore::FontDescription *this)
{
  return (*((unsigned __int16 *)this + 82) >> 12) & 3;
}

uint64_t WebCore::FontDescription::setVariantEmoji(uint64_t a1, char a2)
{
  uint64_t result;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a1 + 164);
  result = a1 + 164;
  v4 = v3 & 0xFFFFCFFF | (*(unsigned __int8 *)(result + 2) << 16);
  *(_WORD *)result = v3 & 0xCFFF | ((a2 & 3) << 12);
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

unint64_t WebCore::RenderStyle::useSmoothScrolling(WebCore::RenderStyle *this)
{
  return ((unint64_t)*(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 636) >> 11) & 1;
}

uint64_t WebCore::RenderStyle::setUseSmoothScrolling(WebCore::RenderStyle *this, int a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  __int16 v11;
  int v12;
  unsigned int v13;
  WTF *v14;
  void *v15;

  v3 = *((_QWORD *)this + 1);
  result = (uint64_t)this + 8;
  if (((((*(_DWORD *)(*(_QWORD *)(v3 + 40) + 636) & 0x800) == 0) ^ a2) & 1) == 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v14, v15);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v11 = *(_WORD *)(result + 640);
    v12 = 2048;
    if (!a2)
      v12 = 0;
    v13 = *(_DWORD *)(result + 636) & 0xFFFFF7FF;
    *(_BYTE *)(result + 642) = *(_BYTE *)(result + 642);
    *(_WORD *)(result + 640) = v11;
    *(_DWORD *)(result + 636) = v13 | v12;
  }
  return result;
}

uint64_t WebCore::FontDescription::textRenderingMode(WebCore::FontDescription *this)
{
  return (*((unsigned __int8 *)this + 160) >> 4) & 3;
}

uint64_t WebCore::FontDescription::setTextRenderingMode(uint64_t result, char a2)
{
  *(_DWORD *)(result + 160) = *(_DWORD *)(result + 160) & 0xFFFFFFCF | (16 * (a2 & 3));
  return result;
}

uint64_t WebCore::SVGRenderStyle::maskType(WebCore::SVGRenderStyle *this)
{
  return (*((unsigned __int16 *)this + 4) >> 13) & 1;
}

uint64_t WebCore::SVGRenderStyle::setMaskType(uint64_t result, char a2)
{
  *(_WORD *)(result + 8) = *(_WORD *)(result + 8) & 0xDFFF | ((a2 & 1) << 13);
  return result;
}

uint64_t WebCore::RenderStyle::capStyle(WebCore::RenderStyle *this)
{
  return (unsigned __int16)*(_DWORD *)(*((_QWORD *)this + 3) + 236) >> 14;
}

uint64_t WebCore::RenderStyle::joinStyle(WebCore::RenderStyle *this)
{
  return *(_WORD *)(*((_QWORD *)this + 3) + 238) & 3;
}

uint64_t WebCore::SVGRenderStyle::textAnchor(WebCore::SVGRenderStyle *this)
{
  return (*((unsigned __int8 *)this + 4) >> 4) & 3;
}

uint64_t WebCore::SVGRenderStyle::setTextAnchor(uint64_t result, char a2)
{
  *(_WORD *)(result + 4) = *(_WORD *)(result + 4) & 0xFFCF | (16 * (a2 & 3));
  return result;
}

uint64_t WebCore::SVGRenderStyle::vectorEffect(WebCore::SVGRenderStyle *this)
{
  return (*((unsigned __int16 *)this + 4) >> 10) & 1;
}

uint64_t WebCore::SVGRenderStyle::setVectorEffect(uint64_t result, char a2)
{
  *(_WORD *)(result + 8) = *(_WORD *)(result + 8) & 0xFBFF | ((a2 & 1) << 10);
  return result;
}

uint64_t WebCore::SVGRenderStyle::shapeRendering(WebCore::SVGRenderStyle *this)
{
  return *((_WORD *)this + 2) & 3;
}

uint64_t WebCore::SVGRenderStyle::setShapeRendering(uint64_t result, char a2)
{
  *(_WORD *)(result + 4) = *(_WORD *)(result + 4) & 0xFFFC | a2 & 3;
  return result;
}

uint64_t WebCore::SVGRenderStyle::markerEndResource(WebCore::SVGRenderStyle *this)
{
  return *((_QWORD *)this + 5) + 24;
}

uint64_t WebCore::SVGRenderStyle::setMarkerEndResource(WebCore::SVGRenderStyle *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF **v4;
  uint64_t result;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  const WTF::StringImpl *v9;

  v4 = (WTF **)((char *)this + 40);
  result = WTF::equal(*(WTF **)(*((_QWORD *)this + 5) + 24), *a2, a3);
  if ((result & 1) == 0)
  {
    v6 = WTF::DataRef<WebCore::StyleInheritedResourceData>::access(v4);
    v8 = v6;
    v9 = *a2;
    if (*a2)
      *(_DWORD *)v9 += 2;
    result = *((_QWORD *)v6 + 3);
    *((_QWORD *)v8 + 3) = v9;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::SVGRenderStyle::markerMidResource(WebCore::SVGRenderStyle *this)
{
  return *((_QWORD *)this + 5) + 16;
}

uint64_t WebCore::SVGRenderStyle::setMarkerMidResource(WebCore::SVGRenderStyle *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF **v4;
  uint64_t result;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  const WTF::StringImpl *v9;

  v4 = (WTF **)((char *)this + 40);
  result = WTF::equal(*(WTF **)(*((_QWORD *)this + 5) + 16), *a2, a3);
  if ((result & 1) == 0)
  {
    v6 = WTF::DataRef<WebCore::StyleInheritedResourceData>::access(v4);
    v8 = v6;
    v9 = *a2;
    if (*a2)
      *(_DWORD *)v9 += 2;
    result = *((_QWORD *)v6 + 2);
    *((_QWORD *)v8 + 2) = v9;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::SVGRenderStyle::markerStartResource(WebCore::SVGRenderStyle *this)
{
  return *((_QWORD *)this + 5) + 8;
}

uint64_t WebCore::SVGRenderStyle::setMarkerStartResource(WebCore::SVGRenderStyle *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF **v4;
  uint64_t result;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  const WTF::StringImpl *v9;

  v4 = (WTF **)((char *)this + 40);
  result = WTF::equal(*(WTF **)(*((_QWORD *)this + 5) + 8), *a2, a3);
  if ((result & 1) == 0)
  {
    v6 = WTF::DataRef<WebCore::StyleInheritedResourceData>::access(v4);
    v8 = v6;
    v9 = *a2;
    if (*a2)
      *(_DWORD *)v9 += 2;
    result = *((_QWORD *)v6 + 1);
    *((_QWORD *)v8 + 1) = v9;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::viewTransitionName@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 8) + 40);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (*(_BYTE *)(v2 + 368))
  {
    v3 = *(_DWORD **)(v2 + 352);
    if (v3)
      *v3 += 2;
    *(_QWORD *)a2 = v3;
    *(_WORD *)(a2 + 8) = *(_WORD *)(v2 + 360);
    *(_BYTE *)(a2 + 16) = 1;
  }
  return this;
}

uint64_t WebCore::RenderStyle::setViewTransitionName(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  WTF *v14;
  void *v15;

  v4 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  v5 = *(_QWORD *)(v4 + 40);
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(v5 + 368))
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if ((*(_BYTE *)(v5 + 368) != 0) == (v6 != 0))
      return result;
  }
  else if (*(_QWORD *)(v5 + 352) == *(_QWORD *)a2
         && *(unsigned __int8 *)(v5 + 360) == *(unsigned __int8 *)(a2 + 8)
         && *(unsigned __int8 *)(v5 + 361) == *(unsigned __int8 *)(a2 + 9))
  {
    return result;
  }
  result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
  v9 = *(_DWORD **)(result + 40);
  if (*v9 == 1)
  {
    v11 = *(_QWORD *)(result + 40);
  }
  else
  {
    v10 = result;
    v11 = WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v11, (uint64_t)v9);
    result = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v11;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData((WebCore::StyleRareNonInheritedData *)result, v8);
        result = WTF::fastFree(v14, v15);
        v11 = *(_QWORD *)(v10 + 40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  if (*(unsigned __int8 *)(v11 + 368) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*(_BYTE *)(v11 + 368))
    {
      v12 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v12 += 2;
      result = *(_QWORD *)(v11 + 352);
      *(_QWORD *)(v11 + 352) = v12;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
        else
          *(_DWORD *)result -= 2;
      }
      *(_WORD *)(v11 + 360) = *(_WORD *)(a2 + 8);
    }
  }
  else if (*(_BYTE *)(v11 + 368))
  {
    result = *(_QWORD *)(v11 + 352);
    *(_QWORD *)(v11 + 352) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v11 + 368) = 0;
  }
  else
  {
    v13 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v13 += 2;
    *(_QWORD *)(v11 + 352) = v13;
    *(_WORD *)(v11 + 360) = *(_WORD *)(a2 + 8);
    *(_BYTE *)(v11 + 368) = 1;
  }
  return result;
}

uint64_t WebCore::RenderStyle::anchorNames(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 40) + 600;
}

unsigned int *WebCore::RenderStyle::setAnchorNames(uint64_t a1, unsigned int *a2)
{
  WTF **v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  WTF *v7;
  _DWORD *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WebCore::StyleRareNonInheritedData *v13;
  WTF *v14;
  void *v15;

  v3 = (WTF **)(a1 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
  v5 = *(unsigned int *)(v4 + 612);
  if ((_DWORD)v5 != a2[3]
    || (result = (unsigned int *)memcmp(*(const void **)(v4 + 600), *(const void **)a2, 8 * v5), (_DWORD)result))
  {
    v7 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v8 = (_DWORD *)*((_QWORD *)v7 + 5);
    if (*v8 == 1)
    {
      v11 = *((_QWORD *)v7 + 5);
    }
    else
    {
      v9 = v7;
      v10 = WTF::fastMalloc((WTF *)0x288);
      v11 = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v10, (uint64_t)v8);
      v13 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v9 + 5);
      *((_QWORD *)v9 + 5) = v11;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v13, v12);
          WTF::fastFree(v14, v15);
          v11 = *((_QWORD *)v9 + 5);
        }
        else
        {
          --*(_DWORD *)v13;
        }
      }
    }
    return WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v11 + 600), a2);
  }
  return result;
}

uint64_t WebCore::RenderStyle::positionAnchor(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 40) + 616;
}

WTF **WebCore::RenderStyle::setPositionAnchor(WebCore::RenderStyle *this, WTF **a2)
{
  WTF **result;
  uint64_t v3;
  WTF *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF *v8;
  uint64_t v9;
  WebCore::StyleRareNonInheritedData *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  void *v14;

  v3 = *((_QWORD *)this + 1);
  result = (WTF **)((char *)this + 8);
  if (*(WTF **)(*(_QWORD *)(v3 + 40) + 616) != *a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    v7 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v7 == 1)
    {
      result = (WTF **)*((_QWORD *)v5 + 5);
    }
    else
    {
      v8 = v5;
      v9 = WTF::fastMalloc((WTF *)0x288);
      result = (WTF **)WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v9, (uint64_t)v7);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v8 + 5);
      *((_QWORD *)v8 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v6);
          WTF::fastFree(v13, v14);
          result = (WTF **)*((_QWORD *)v8 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v11 = *a2;
    if (*a2)
      *(_DWORD *)v11 += 2;
    v12 = result[77];
    result[77] = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        return (WTF **)WTF::StringImpl::destroy(v12, v6);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  return result;
}

unint64_t WTF::Vector<std::unique_ptr<WebCore::AnimationPropertyWrapperBase>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendContainerWithMapping<WebCore::AnimationPropertyWrapperBase*(&)[279],WebCore::CSSPropertyAnimationWrapperMap::CSSPropertyAnimationWrapperMap(void)::$_0>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  result = WTF::Vector<std::unique_ptr<WebCore::AnimationPropertyWrapperBase>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(dword_1ECE822CC + 279);
  v5 = 0;
  v6 = *a2;
  v7 = (_DWORD *)a2[1];
  v8 = qword_1ECE822C0;
  do
  {
    v9 = *(_QWORD *)(a1 + v5);
    v10 = (*v7)++;
    *(_WORD *)(v6 + 2 * *(unsigned __int16 *)(v9 + 8) + 12) = v10;
    v11 = dword_1ECE822CC;
    *(_QWORD *)(v8 + 8 * dword_1ECE822CC) = v9;
    dword_1ECE822CC = v11 + 1;
    v5 += 8;
  }
  while (v5 != 2232);
  return result;
}

uint64_t WebCore::CSSPropertyAnimation::getAcceleratedPropertyAtIndex(WebCore::CSSPropertyAnimation *this, uint64_t a2, const WebCore::Settings *a3)
{
  int v4;
  int v5;
  int v6;
  _WORD *v7;
  int v9;

  if ((byte_1ECE821B8 & 1) == 0)
  {
    v9 = (int)this;
    WebCore::CSSPropertyAnimationWrapperMap::CSSPropertyAnimationWrapperMap(this);
    LODWORD(this) = v9;
    byte_1ECE821B8 = 1;
  }
  v4 = 0;
  if ((this & 0x80000000) != 0)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    if (dword_1ECE822CC > this)
    {
      v7 = *(_WORD **)(qword_1ECE822C0 + 8 * this);
      if (((*(uint64_t (**)(_WORD *, uint64_t, const WebCore::Settings *))(*(_QWORD *)v7 + 16))(v7, a2, a3) & 1) != 0
        || !(*(unsigned int (**)(_WORD *, uint64_t))(*(_QWORD *)v7 + 72))(v7, a2))
      {
        v4 = 0;
        v5 = 0;
        v6 = 0;
      }
      else
      {
        v6 = v7[4] & 0xFF00;
        v4 = v7[4];
        v5 = 0x10000;
      }
    }
  }
  return v5 | v4 | v6;
}

uint64_t WebCore::CSSPropertyAnimation::getNumProperties(WebCore::CSSPropertyAnimation *this)
{
  if ((byte_1ECE821B8 & 1) == 0)
  {
    WebCore::CSSPropertyAnimationWrapperMap::CSSPropertyAnimationWrapperMap(this);
    byte_1ECE821B8 = 1;
  }
  return dword_1ECE822CC;
}

void WebCore::CSSTransition::create(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, const WebCore::RenderStyle *a4@<X3>, const WebCore::RenderStyle *a5@<X4>, _QWORD *a6@<X5>, uint64_t *a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>, double a11@<D3>)
{
  WebCore::WebAnimation *v22;
  uint64_t v23;
  __n128 v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::InspectorAnimationAgent *v30;
  _OWORD v31[3];

  v22 = (WebCore::WebAnimation *)bmalloc::api::isoAllocate();
  v23 = WebCore::CSSTransition::CSSTransition((uint64_t)v22, a1, a2, a3, a4, a5, a6, a8, a11);
  *a7 = v23;
  memset(v31, 0, 41);
  WebCore::StyleOriginatedAnimation::initialize(v23, a4, a5, (int)v31);
  v24.n128_f64[0] = a9;
  WebCore::CSSTransition::setTimingProperties(v22, v24, a10);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v27 = *((_QWORD *)v22 + 5);
    if (v27)
    {
      v28 = *(_QWORD *)(v27 + 8);
      if (v28)
      {
        v29 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v28 - 96), v25);
        if (v29)
        {
          v30 = *(WebCore::InspectorAnimationAgent **)(v29 + 80);
          if (v30)
            WebCore::InspectorAnimationAgent::didCreateWebAnimation(v30, v22);
        }
      }
    }
  }
}

uint64_t WebCore::CSSTransition::setTimingProperties(WebCore::WebAnimation *this, __n128 a2, double a3)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  double v7;
  double v8;
  double v9;
  uint64_t result;

  ++*((_DWORD *)this + 38);
  v4 = *((_QWORD *)this + 7);
  if (*(_BYTE *)(v4 + 32) != 2)
    *(_BYTE *)(v4 + 32) = 2;
  if (*(double *)(v4 + 56) != a2.n128_f64[0])
    *(_QWORD *)(v4 + 56) = a2.n128_u64[0];
  if (*(double *)(v4 + 72) != a3)
    *(double *)(v4 + 72) = a3;
  v5 = *(_DWORD **)(*((_QWORD *)this + 27) + 96);
  if (v5)
    v5[2] += 2;
  v6 = *(_DWORD **)(v4 + 24);
  *(_QWORD *)(v4 + 24) = v5;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[2];
  }
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[2];
  }
  v7 = *(double *)(v4 + 72);
  v8 = 0.0;
  if (v7 != 0.0)
  {
    v9 = *(double *)(v4 + 48);
    if (v9 != 0.0)
      v8 = v7 * v9;
  }
  *(double *)(v4 + 80) = v8;
  a2.n128_f64[0] = *(double *)(v4 + 64) + v8 + *(double *)(v4 + 56);
  if (a2.n128_f64[0] < 0.0)
    a2.n128_u64[0] = 0;
  *(_QWORD *)(v4 + 88) = a2.n128_u64[0];
  result = WebCore::WebAnimation::effectTimingDidChange(this, a2);
  --*((_DWORD *)this + 38);
  return result;
}

uint64_t WebCore::CSSTransition::CSSTransition(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, double a8, double a9)
{
  WebCore::WebAnimation *v18;
  unsigned int *v19;
  unsigned int v20;
  _DWORD *v21;
  uint64_t v22;
  WebCore::Document *v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::Document *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v45;
  char v46;

  v18 = WebCore::WebAnimation::WebAnimation((WebCore::WebAnimation *)a1, *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 8));
  *(_QWORD *)v18 = off_1E33916F0;
  *((_QWORD *)v18 + 4) = &unk_1E3391870;
  *((_WORD *)v18 + 88) = 768;
  v19 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(*(_QWORD *)a2);
  if (v19)
  {
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
  }
  *(_QWORD *)(a1 + 184) = v19;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 8);
    v21 = *(_DWORD **)(a2 + 16);
    if (v21)
      *v21 += 2;
    *(_QWORD *)(a1 + 200) = v21;
    *(_BYTE *)(a1 + 208) = 1;
  }
  ++*a4;
  *(_QWORD *)(a1 + 216) = a4;
  *(_QWORD *)a1 = off_1E338CCF8;
  *(_QWORD *)(a1 + 32) = &unk_1E338CE78;
  *(_BYTE *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = -1;
  v22 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v22 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E338E958[v22])(&v46, a1 + 232, a3);
    *(_DWORD *)(a1 + 240) = v22;
  }
  *(double *)(a1 + 248) = a8;
  v23 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 8);
  v24 = *((_QWORD *)v23 + 366);
  if (!v24)
  {
    v24 = WTF::fastMalloc((WTF *)0xA0);
    WebCore::DocumentTimeline::DocumentTimeline(v24, v23, 0.0);
    v45 = (_DWORD *)*((_QWORD *)v23 + 366);
    *((_QWORD *)v23 + 366) = v24;
    if (v45)
    {
      if (v45[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 8))(v45);
        v24 = *((_QWORD *)v23 + 366);
      }
      else
      {
        --v45[2];
      }
    }
  }
  v25 = *(_QWORD *)(v24 + 136);
  if (v25 && (v26 = *(WebCore::Document **)(v25 + 8)) != 0)
  {
    v27 = WebCore::Document::ensureTimelinesController(v26);
    if (*(_QWORD *)(*(_QWORD *)(v27 + 48) + 696))
      v28 = *(double *)(v27 + 72) - *(double *)(v24 + 144);
    else
      v28 = NAN;
  }
  else
  {
    v28 = *(double *)(v24 + 48);
  }
  *(double *)(a1 + 256) = v28;
  v29 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v29 = 0;
  v30 = (_DWORD *)a6[1];
  ++*v30;
  *(_QWORD *)(v29 + 8) = v30;
  *(_QWORD *)(v29 + 16) = a6[2];
  v31 = (_DWORD *)a6[3];
  v32 = (_DWORD *)a6[4];
  ++*v31;
  ++*v32;
  *(_QWORD *)(v29 + 24) = v31;
  *(_QWORD *)(v29 + 32) = v32;
  *(_QWORD *)(v29 + 40) = a6[5];
  *(_QWORD *)(v29 + 48) = 0;
  v33 = (_DWORD *)a6[7];
  ++*v33;
  *(_QWORD *)(v29 + 56) = v33;
  *(_QWORD *)(a1 + 264) = v29;
  v34 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v34 = 0;
  v35 = (_DWORD *)a5[1];
  ++*v35;
  *(_QWORD *)(v34 + 8) = v35;
  *(_QWORD *)(v34 + 16) = a5[2];
  v36 = (_DWORD *)a5[3];
  v37 = (_DWORD *)a5[4];
  ++*v36;
  ++*v37;
  *(_QWORD *)(v34 + 24) = v36;
  *(_QWORD *)(v34 + 32) = v37;
  *(_QWORD *)(v34 + 40) = a5[5];
  *(_QWORD *)(v34 + 48) = 0;
  v38 = (_DWORD *)a5[7];
  ++*v38;
  *(_QWORD *)(v34 + 56) = v38;
  *(_QWORD *)(a1 + 272) = v34;
  v39 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v39 = 0;
  v40 = (_DWORD *)a7[1];
  ++*v40;
  *(_QWORD *)(v39 + 8) = v40;
  *(_QWORD *)(v39 + 16) = a7[2];
  v41 = (_DWORD *)a7[3];
  v42 = (_DWORD *)a7[4];
  ++*v41;
  ++*v42;
  *(_QWORD *)(v39 + 24) = v41;
  *(_QWORD *)(v39 + 32) = v42;
  *(_QWORD *)(v39 + 40) = a7[5];
  *(_QWORD *)(v39 + 48) = 0;
  v43 = (_DWORD *)a7[7];
  ++*v43;
  *(_QWORD *)(v39 + 56) = v43;
  *(_QWORD *)(a1 + 280) = v39;
  *(double *)(a1 + 288) = a9;
  return a1;
}

uint64_t WebCore::CSSTransition::resolve(uint64_t a1, WebCore::RenderStyle *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  WebCore::RenderStyle *v19;
  WTF *v20;
  void *v21;

  if (!*(_BYTE *)(a1 + 159))
    WebCore::WebAnimation::updateFinishedState(a1, 0, 0, a6);
  *(_BYTE *)(a1 + 159) = 0;
  v11 = *(_QWORD *)(a1 + 56);
  if (v11 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v11 + 24))(*(_QWORD *)(a1 + 56)))
    v12 = WebCore::KeyframeEffect::apply(v11, a2, a3, a4, a5);
  else
    v12 = 0;
  v14 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v14 = 0;
  v15 = (_DWORD *)*((_QWORD *)a2 + 1);
  ++*v15;
  *(_QWORD *)(v14 + 8) = v15;
  *(_QWORD *)(v14 + 16) = *((_QWORD *)a2 + 2);
  v16 = (_DWORD *)*((_QWORD *)a2 + 3);
  v17 = (_DWORD *)*((_QWORD *)a2 + 4);
  ++*v16;
  ++*v17;
  *(_QWORD *)(v14 + 24) = v16;
  *(_QWORD *)(v14 + 32) = v17;
  *(_QWORD *)(v14 + 40) = *((_QWORD *)a2 + 5);
  *(_QWORD *)(v14 + 48) = 0;
  v18 = (_DWORD *)*((_QWORD *)a2 + 7);
  ++*v18;
  *(_QWORD *)(v14 + 56) = v18;
  v19 = *(WebCore::RenderStyle **)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v14;
  if (v19)
  {
    WebCore::RenderStyle::~RenderStyle(v19, v13);
    if (*(_DWORD *)v20)
    {
      *((_OWORD *)v20 + 2) = 0u;
      *((_OWORD *)v20 + 3) = 0u;
      *(_OWORD *)v20 = 0u;
      *((_OWORD *)v20 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v20, v21);
    }
  }
  return v12;
}

WTF::StringImpl *WebCore::CSSTransition::animationDidFinish(WebCore::CSSTransition *this)
{
  WTF::StringImpl *result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  char v11;
  char v12;

  result = (WTF::StringImpl *)*((_QWORD *)this + 7);
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 72))(result);
  v3 = *((_QWORD *)this + 23);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (*((_BYTE *)this + 208))
      {
        v5 = *((_DWORD *)this + 48);
        v6 = (WTF::StringImpl *)*((_QWORD *)this + 25);
        if (v6)
          *(_DWORD *)v6 += 2;
        v8 = v4;
        v9 = v5;
        v10 = v6;
        v11 = 1;
      }
      else
      {
        v8 = v4;
        LOBYTE(v9) = 0;
        v11 = 0;
      }
      v12 = 1;
      result = (WTF::StringImpl *)WebCore::Styleable::removeStyleOriginatedAnimationFromListsForOwningElement((WebCore::Styleable *)&v8, this);
      if (v12)
      {
        if (v11)
        {
          result = v10;
          v10 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::optional<WebCore::Styleable const>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v3 = *(WTF::StringImpl **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
    }
  }
  return a1;
}

void WebCore::CSSTransition::createEvent(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, double a7@<D0>)
{
  uint64_t v8;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  _QWORD *v25;
  WebCore::CSSTransitionEvent *v26;
  WTF::StringImpl *v27;
  char v28;
  char *v29;

  v8 = *(unsigned int *)(a1 + 240);
  if ((_DWORD)v8 == -1)
  {
    v26 = (WebCore::CSSTransitionEvent *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::CSSTransitionEvent::~CSSTransitionEvent(v26);
  }
  else
  {
    v29 = &v28;
    ((void (*)(WTF::StringImpl **__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore13CSSTransition18transitionPropertyEvE3__0JZNKS9_18transitionPropertyEvE3__1EEEEEJRKNS0_6__implIJNS8_13CSSPropertyIDENS6_10AtomStringEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v27, &v29, a1 + 232);
    v15 = v27;
    if (v27)
    {
      *(_DWORD *)v27 += 2;
      v16 = bmalloc::api::isoAllocate();
      *(_DWORD *)v15 += 2;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v16);
      *(_QWORD *)(v16 + 8) = 0;
      *(_DWORD *)(v16 + 16) = 1;
      *(_DWORD *)(v16 + 20) = *(_DWORD *)(v16 + 20) & 0xFFC00000 | (*a2 != 0) | 0x1A0202;
      v19 = (_DWORD *)*a2;
      if (*a2)
        *v19 += 2;
      *(_QWORD *)(v16 + 24) = v19;
      *(_QWORD *)(v16 + 32) = 0;
      *(_QWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = v18;
      *(_QWORD *)(v16 + 64) = 0;
      ++*(_DWORD *)(a1 + 24);
      *(_QWORD *)(v16 + 72) = a1;
      if (!a4)
        a3 = 0x7FF8000000000000;
      *(_QWORD *)(v16 + 80) = a3;
      *(double *)(v16 + 88) = a7;
      *(_QWORD *)(v16 + 96) = 0;
      *(_BYTE *)(v16 + 104) = 0;
      *(_BYTE *)(v16 + 120) = 0;
      if (*(_BYTE *)(a5 + 16))
      {
        *(_DWORD *)(v16 + 104) = *(_DWORD *)a5;
        v20 = *(_DWORD **)(a5 + 8);
        if (v20)
          *v20 += 2;
        *(_QWORD *)(v16 + 112) = v20;
        *(_BYTE *)(v16 + 120) = 1;
      }
      *(_QWORD *)v16 = off_1E338CED0;
      v21 = *(_DWORD *)v15;
      *(_DWORD *)v15 += 2;
      *(_QWORD *)(v16 + 128) = v15;
      if (v21)
      {
        *(_DWORD *)v15 = v21;
      }
      else
      {
        WTF::StringImpl::destroy(v15, v17);
        v21 = *(_DWORD *)v15;
      }
      *a6 = v16;
      v22 = v21 - 2;
      if (v22)
        *(_DWORD *)v15 = v22;
      else
        WTF::StringImpl::destroy(v15, v17);
    }
    else
    {
      v24 = bmalloc::api::isoAllocate();
      v25 = (_QWORD *)WebCore::StyleOriginatedAnimationEvent::StyleOriginatedAnimationEvent(v24, 52, a2, a1, a3, a4, a5, a7);
      *v25 = off_1E338CED0;
      v25[16] = 0;
      *a6 = (uint64_t)v25;
    }
    v23 = v27;
    v27 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v17);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
}

uint64_t WebCore::toCompositeOperation(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v5;

  v1 = *(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16);
  if ((v1 & 0x3F800) != 0 || (v1 & 0x3F87F) != 0x50)
    goto LABEL_3;
  v5 = *(unsigned __int16 *)(a1 + 8);
  switch(v5)
  {
    case 606:
      v2 = 1;
LABEL_11:
      v3 = 1;
      return v2 | (v3 << 8);
    case 642:
      v2 = 0;
      goto LABEL_11;
    case 641:
      v3 = 1;
      v2 = 2;
      return v2 | (v3 << 8);
  }
LABEL_3:
  v2 = 0;
  v3 = 0;
  return v2 | (v3 << 8);
}

uint64_t WebCore::CustomEffect::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  int v17;
  __n128 v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  char v23[8];
  int v24;
  char v25;
  __n128 v26;
  int64x2_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  __int16 v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  __int16 v40;
  char v41[8];
  int v42;
  __int128 v43;
  __int128 v44;
  WTF::StringImpl *v45;
  __int16 v46;
  uint64_t v47;
  int v48;
  unsigned __int8 v49;
  __n128 v50;
  int64x2_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  __int16 v54;
  char v55;
  char v56[8];
  uint64_t v57;
  unsigned int v58;
  __int128 v59;
  __int128 v60;
  WTF::StringImpl *v61;
  __int16 v62;
  int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v6 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = off_1E338C638;
  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E338CAA8;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(v6 + 24) = result;
  *(_WORD *)(v6 + 32) = 4;
  *(_OWORD *)(v6 + 40) = xmmword_1968A14C0;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_QWORD *)v6 = off_1E338CFB0;
  v8 = *a1;
  *a1 = 0;
  *(_QWORD *)(v6 + 104) = v8;
  if (!*(_BYTE *)(a2 + 80))
  {
LABEL_65:
    *(_QWORD *)a3 = v6;
    *(_DWORD *)(a3 + 16) = 0;
    return result;
  }
  LOBYTE(v47) = 0;
  v49 = 0;
  v50.n128_u8[0] = 0;
  v50.n128_u8[8] = 0;
  v51 = vdupq_n_s64(0x7FF8000000000000uLL);
  v52 = 0x7FF8000000000000;
  v53 = 0;
  v54 = -1;
  LOBYTE(v57) = 0;
  v63 = -1;
  v9 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v9 == -1)
    goto LABEL_73;
  ((void (*)(uint64_t *, uint64_t *, uint64_t))off_1E338E978[v9])(&v32, &v57, a2 + 8);
  v63 = v9;
  if ((_DWORD)v9)
  {
    if ((_DWORD)v9 == 1)
    {
      v41[0] = 0;
      v42 = -1;
      v10 = v58;
      if (v58 != -1)
      {
        ((void (*)(uint64_t *, char *, uint64_t *))off_1E338E9A8[v58])(&v32, v41, &v57);
        v42 = v10;
      }
      v43 = v59;
      v44 = v60;
      v11 = v61;
      if (v61)
        *(_DWORD *)v61 += 2;
      v45 = v11;
      v46 = v62;
      LOBYTE(v32) = 0;
      LODWORD(v33) = -1;
      if ((_DWORD)v10 != -1)
      {
        ((void (*)(char *, uint64_t *, char *))off_1E338E9A8[v10])(&v55, &v32, v41);
        LODWORD(v33) = v10;
        v11 = v45;
      }
      v34 = 1;
      v35 = *((_QWORD *)&v44 + 1);
      v36 = 1;
      v37 = v43;
      v38 = v44;
      if (v11)
        *(_DWORD *)v11 += 2;
      v39 = v11;
      v40 = v46;
      WebCore::OptionalEffectTiming::operator=((uint64_t)&v47, (uint64_t)&v32);
      v14 = v39;
      v39 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v12);
        else
          *(_DWORD *)v14 -= 2;
      }
      if (v34 && (_DWORD)v33 != -1)
        ((void (*)(char *, uint64_t *))off_1E338E988[v33])(&v55, &v32);
      v15 = v45;
      v45 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
      if (v42 != -1)
        ((void (*)(uint64_t *, char *))off_1E338E988[v42])(&v32, v41);
      goto LABEL_32;
    }
LABEL_73:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v32 = v57;
  LODWORD(v33) = 0;
  v16 = v49;
  if (v49)
  {
    v16 = v48;
    if (v48)
    {
      if (v48 == -1)
      {
        v16 = 0;
        v47 = v57;
        v48 = 0;
      }
      else
      {
        ((void (*)(char *, uint64_t *))off_1E338E988[v48])(v41, &v47);
        v16 = v33;
        v47 = v32;
        v48 = 0;
        if ((_DWORD)v33 == -1)
          goto LABEL_32;
      }
    }
    else
    {
      v47 = v57;
    }
  }
  else
  {
    v47 = v57;
    v48 = 0;
    v49 = 1;
  }
  ((void (*)(char *, uint64_t *))off_1E338E988[v16])(v41, &v32);
LABEL_32:
  v23[0] = 0;
  v25 = 0;
  if (v49)
  {
    v24 = -1;
    v17 = v48;
    if (v48 != -1)
    {
      ((void (*)(char *, char *, uint64_t *))off_1E338E9A8[v48])(v41, v23, &v47);
      v24 = v17;
    }
    v25 = 1;
  }
  v18 = v50;
  v26 = v50;
  v27 = v51;
  v28 = v52;
  v19 = v53;
  if (v53)
    *(_DWORD *)v53 += 2;
  v29 = v19;
  v30 = v54;
  v31 = 1;
  WebCore::AnimationEffect::updateTiming(v6, (uint64_t)v23, v13, (uint64_t)&v32, v18);
  if (v31)
  {
    v21 = v29;
    v29 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (v25)
    {
      if (v24 != -1)
        ((void (*)(char *, char *))off_1E338E988[v24])(v41, v23);
      v24 = -1;
    }
  }
  if (!v34)
  {
    if (v63 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E338E968[v63])(&v32, &v57);
    result = (uint64_t)v53;
    v53 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
      else
        *(_DWORD *)result -= 2;
    }
    if (v49 && v48 != -1)
      result = ((uint64_t (*)(char *, uint64_t *))off_1E338E988[v48])(v56, &v47);
    goto LABEL_65;
  }
  v22 = v33;
  *(_BYTE *)a3 = v32;
  *(_QWORD *)(a3 + 8) = v22;
  *(_DWORD *)(a3 + 16) = 1;
  if (v63 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E338E968[v63])(&v32, &v57);
  result = (uint64_t)v53;
  v53 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
    else
      *(_DWORD *)result -= 2;
  }
  if (v49 && v48 != -1)
    result = ((uint64_t (*)(char *, uint64_t *))off_1E338E988[v48])(v56, &v47);
  if (*(_DWORD *)(v6 + 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  --*(_DWORD *)(v6 + 8);
  return result;
}

uint64_t WebCore::OptionalEffectTiming::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v13;
  char v14;
  char v15;
  char v16;

  if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (!*(_BYTE *)(a1 + 16))
      goto LABEL_15;
    v4 = *(unsigned int *)(a1 + 8);
    v5 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v4 == -1)
    {
      if ((_DWORD)v5 == -1)
        goto LABEL_15;
    }
    else if ((_DWORD)v5 == -1)
    {
      ((void (*)(char *, uint64_t))off_1E338E988[v4])(&v14, a1);
      *(_DWORD *)(a1 + 8) = -1;
      goto LABEL_15;
    }
    v13 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E338E9B8[v5])(&v13, a1, a2);
  }
  else if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, uint64_t))off_1E338E988[v6])(&v15, a1);
    *(_DWORD *)(a1 + 8) = -1;
    *(_BYTE *)(a1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 8) = -1;
    v7 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E338E9C8[v7])(&v16, a1, a2);
      *(_DWORD *)(a1 + 8) = v7;
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
LABEL_15:
  v8 = *(_OWORD *)(a2 + 24);
  v9 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v11 = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  return a1;
}

WTF::StringImpl *WebCore::CustomEffect::animationDidTick(WebCore::CustomEffect *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  _BYTE v4[8];
  int v5;
  WTF::StringImpl *v6;
  double v7;
  char v8;

  WebCore::AnimationEffect::getComputedTiming((uint64_t)this, (uint64_t)v4);
  (*(void (**)(_QWORD, double))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), v7);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  if (v5 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *))off_1E338E988[v5])(&v8, v4);
  return result;
}

_DWORD *WebCore::DocumentTimeline::detachFromDocument(_DWORD *this, WTF *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;

  v2 = (uint64_t)this;
  ++this[2];
  v3 = *((_QWORD *)this + 17);
  if (!v3)
    goto LABEL_11;
  this = *(_DWORD **)(v3 + 8);
  if (!this)
    goto LABEL_11;
  v5 = WebCore::Document::ensureTimelinesController((WebCore::Document *)this);
  this = (_DWORD *)(v5 + 16);
  v6 = *(_DWORD *)(v5 + 28);
  v7 = *(_DWORD *)(v5 + 24) + 1;
  *(_DWORD *)(v5 + 24) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
    {
LABEL_5:
      v9 = 0;
      *(_DWORD *)(v5 + 24) = 0;
LABEL_6:
      v10 = v9;
LABEL_7:
      *(_DWORD *)(v5 + 28) = 2 * v10;
      goto LABEL_8;
    }
    v17 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v17)
      goto LABEL_50;
    v18 = 0;
    v19 = v17 - 1;
    do
    {
      v20 = v8 + 8 * v19;
      if ((unint64_t)(*(_QWORD *)v20 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v20 + 8))
      {
        v31 = (uint64_t)this;
        v33 = v5;
        v30 = v18;
        v29 = v19;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket((unsigned int **)(v8 + 8 * v19), v4);
        v19 = v29;
        this = (_DWORD *)v31;
        v5 = v33;
        v18 = v30 + 1;
      }
    }
    while ((unint64_t)v19--);
    v8 = *(_QWORD *)this;
    if (v18)
    {
      *(_DWORD *)(v8 - 16) += v18;
      v26 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v27 = *(_DWORD *)(v26 - 12);
      else
        v27 = 0;
      *(_DWORD *)(v26 - 12) = v27 - v18;
      v8 = *(_QWORD *)this;
    }
    if (!v8)
      goto LABEL_5;
    v22 = *(_DWORD *)(v8 - 4);
    if (v22 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v22)
    {
LABEL_50:
      *(_DWORD *)(v5 + 24) = 0;
    }
    else
    {
      v28 = (uint64_t)this;
      v32 = v5;
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)this);
      v5 = v32;
      this = (_DWORD *)v28;
      v8 = *(_QWORD *)(v32 + 16);
      *(_DWORD *)(v32 + 24) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_6;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_8:
  a2 = *(WTF **)(v2 + 16);
  if (a2 && *((_QWORD *)a2 + 1))
    this = (_DWORD *)WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)this, a2);
LABEL_11:
  if (*(_DWORD *)(v2 + 128))
  {
    v16 = *(unsigned int *)(v2 + 132);
    if ((_DWORD)v16)
    {
      WTF::VectorTypeOperations<WTF::Ref<WebCore::AnimationEventBase,WTF::RawPtrTraits<WebCore::AnimationEventBase>,WTF::DefaultRefDerefTraits<WebCore::AnimationEventBase>>>::destruct(*(_DWORD **)(v2 + 120), (_DWORD **)(*(_QWORD *)(v2 + 120) + 8 * v16));
      *(_DWORD *)(v2 + 132) = 0;
    }
    this = *(_DWORD **)(v2 + 120);
    if (this)
    {
      *(_QWORD *)(v2 + 120) = 0;
      *(_DWORD *)(v2 + 128) = 0;
      this = (_DWORD *)WTF::fastFree((WTF *)this, a2);
    }
  }
  while (1)
  {
    v11 = *(_QWORD *)(v2 + 24);
    if (!v11 || !*(_DWORD *)(v11 - 12))
      break;
    v12 = **(WTF::StringImpl ***)(v2 + 32);
    ++*((_DWORD *)v12 + 6);
    v34 = 0;
    WebCore::WebAnimation::setEffectInternal(v12, (WebCore::ScriptExecutionContext *)&v34, 0);
    if (v34)
    {
      if (v34[2] == 1)
        (*(void (**)(void))(*(_QWORD *)v34 + 8))();
      else
        --v34[2];
    }
    v34 = 0;
    (*(void (**)(WTF::StringImpl *, _DWORD **))(*(_QWORD *)v12 + 136))(v12, &v34);
    this = v34;
    v34 = 0;
    if (this)
    {
      if (this[2] == 1)
        this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 8))(this);
      else
        --this[2];
    }
    if (*((_DWORD *)v12 + 6) == 1)
      this = (_DWORD *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v12 + 72))(v12);
    else
      --*((_DWORD *)v12 + 6);
  }
  if ((*(_QWORD *)(v2 + 88) & 0xFFFFFFFFFFFFLL) != 0)
    this = (_DWORD *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 56));
  v13 = *(_QWORD *)(v2 + 136);
  *(_QWORD *)(v2 + 136) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v24 = *(unsigned int *)(v13 + 28);
      if ((_DWORD)v24)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v13 + 16), (WTF::StringImpl *)(*(_QWORD *)(v13 + 16) + 32 * v24));
      v25 = *(WTF **)(v13 + 16);
      if (v25)
      {
        *(_QWORD *)(v13 + 16) = 0;
        *(_DWORD *)(v13 + 24) = 0;
        WTF::fastFree(v25, a2);
      }
      this = (_DWORD *)WTF::fastFree((WTF *)v13, a2);
    }
  }
  if (*(_DWORD *)(v2 + 8) == 1)
    return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  --*(_DWORD *)(v2 + 8);
  return this;
}

double WebCore::DocumentTimeline::animationInterval(WebCore::DocumentTimeline *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((_QWORD *)this + 17);
  if (v1
    && (v2 = *(_QWORD *)(v1 + 8)) != 0
    && (v3 = *(_QWORD *)(v2 + 528)) != 0
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = *(_QWORD *)(v4 + 24)) != 0
    && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    return WebCore::preferredFrameInterval(*(_BYTE *)(v6 + 1168), *(_QWORD *)(v6 + 316), (*(_QWORD *)(*(_QWORD *)(v6 + 112) + 688) >> 31) & 1);
  }
  else
  {
    return INFINITY;
  }
}

void WebCore::DocumentTimeline::suspendAnimations(WebCore::DocumentTimeline *this, void *a2)
{
  uint64_t *i;

  for (i = (uint64_t *)*((_QWORD *)this + 4); i; i = (uint64_t *)i[2])
    WebCore::WebAnimation::setSuspended(*i, 1u);
  WebCore::DocumentTimeline::applyPendingAcceleratedAnimations(this, a2);
  if ((*((_QWORD *)this + 11) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::DocumentTimeline *)((char *)this + 56));
}

uint64_t WebCore::DocumentTimeline::resumeAnimations(WebCore::DocumentTimeline *this)
{
  uint64_t *i;

  for (i = (uint64_t *)*((_QWORD *)this + 4); i; i = (uint64_t *)i[2])
    WebCore::WebAnimation::setSuspended(*i, 0);
  return WebCore::DocumentTimeline::scheduleAnimationResolution((uint64_t)this);
}

uint64_t WebCore::DocumentTimeline::numberOfActiveAnimationsForTesting(WebCore::DocumentTimeline *this)
{
  _QWORD *v1;
  uint64_t result;

  v1 = (_QWORD *)*((_QWORD *)this + 4);
  if (!v1)
    return 0;
  LODWORD(result) = 0;
  do
  {
    if (*(_BYTE *)(*v1 + 156))
      result = result;
    else
      result = (result + 1);
    v1 = (_QWORD *)v1[2];
  }
  while (v1);
  return result;
}

void WebCore::DocumentTimeline::removeAnimation(WebCore::DocumentTimeline *this, WebCore::WebAnimation *a2)
{
  uint64_t v3;

  WebCore::AnimationTimeline::removeAnimation(this, a2);
  v3 = *((_QWORD *)this + 3);
  if ((!v3 || !*(_DWORD *)(v3 - 12)) && (*((_QWORD *)this + 11) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::DocumentTimeline *)((char *)this + 56));
}

int8x8_t *WebCore::DocumentTimeline::animationCanBeRemoved(WebCore::WebAnimation &)::$_1::operator()(unsigned __int8 *a1)
{
  _BYTE *v1;
  uint64_t v2;
  int8x8_t *result;
  _BYTE *v4;

  v1 = (_BYTE *)a1[32];
  if (a1[32])
  {
    v2 = WebCore::Styleable::renderer((WebCore::Styleable *)a1);
    if (v2)
      return (int8x8_t *)(v2 + 80);
    v1 = &unk_1ECE91000;
      return &WebCore::RenderStyle::defaultStyle(void)::style;
  }
  else
  {
    __break(1u);
  }
  v4 = v1;
  result = WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
  v4[1016] = 1;
  return result;
}

unsigned __int16 *WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::begin(unsigned __int16 **a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v9;
  char *v10;

  v1 = *a1;
  if (!*a1)
    return 0;
  v2 = *((unsigned int *)v1 - 1);
  v3 = &v1[8 * v2];
  if (!*((_DWORD *)v1 - 3))
    return v3;
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    while (1)
    {
      v5 = *((unsigned int *)v1 + 2);
      if ((_DWORD)v5)
        v6 = 0;
      else
        v6 = *v1 == 0;
      if (!v6)
      {
        if ((_DWORD)v5 == -1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
          return v3;
        }
        v10 = &v9;
        if (!((unsigned int (*)(char **, unsigned __int16 *))off_1E338E9E8[v5])(&v10, v1))
          return v1;
      }
      v1 += 8;
      v4 -= 16;
      if (!v4)
        return v3;
    }
  }
  return v1;
}

uint64_t WebCore::DocumentTimeline::animationCanBeRemoved(WebCore::WebAnimation &)::$_2::operator()(uint64_t result, unsigned int a2, unsigned __int16 a3, unsigned __int16 *a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = result;
  v5 = *((unsigned int *)a4 + 2);
  if ((_DWORD)v5)
  {
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 8) = -1;
    if ((_DWORD)v5 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, unsigned __int16 *))off_1E338E9D8[v5])(&v6, result, a4);
      *(_DWORD *)(v4 + 8) = v5;
    }
  }
  else
  {
    result = WebCore::CSSProperty::resolveDirectionAwareProperty(*a4, (a2 >> 26) & 1, a3 >> 13);
    *(_WORD *)v4 = result;
    *(_DWORD *)(v4 + 8) = 0;
  }
  return result;
}

unsigned __int16 **WTF::HashTableConstIteratorAdapter<WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>>::operator++(unsigned __int16 **a1)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  uint64_t v4;
  BOOL v5;
  char v7;
  char *v8;

  v2 = a1[1];
  v3 = *a1 + 8;
  for (*a1 = v3; v3 != v2; *a1 = v3)
  {
    v4 = *((unsigned int *)v3 + 2);
    if ((_DWORD)v4)
      v5 = 0;
    else
      v5 = *v3 == 0;
    if (!v5)
    {
      if ((_DWORD)v4 == -1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
      }
      else
      {
        v8 = &v7;
        if (!((unsigned int (*)(char **))off_1E338E9E8[v4])(&v8))
          return a1;
      }
      v3 = *a1;
      v2 = a1[1];
    }
    v3 += 8;
  }
  return a1;
}

void WebCore::DocumentTimeline::animationCanBeRemoved(WebCore::WebAnimation &)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  WTF *v21;
  unsigned int v22;

  if (!*(_BYTE *)(a2 + 32))
  {
    __break(1u);
    goto LABEL_36;
  }
  if ((*(_QWORD *)(*(_QWORD *)a2 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_4;
  v3 = *(unsigned int *)((*(_QWORD *)(*(_QWORD *)a2 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
  if (!(_DWORD)v3)
    goto LABEL_4;
  v4 = *(uint64_t **)((*(_QWORD *)(*(_QWORD *)a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
  if (*(_BYTE *)(a2 + 24))
  {
    v5 = 8 * v3;
    while (1)
    {
      v6 = *v4;
      if (*(_BYTE *)(*v4 + 96))
      {
        if (*(_DWORD *)(v6 + 80) == *(_DWORD *)(a2 + 8) && *(_QWORD *)(v6 + 88) == *(_QWORD *)(a2 + 16))
          break;
      }
      ++v4;
      v5 -= 8;
      if (!v5)
        goto LABEL_4;
    }
  }
  else
  {
    v8 = 8 * v3;
    while (1)
    {
      v6 = *v4;
      if (!*(_BYTE *)(*v4 + 96))
        break;
      ++v4;
      v8 -= 8;
      if (!v8)
        goto LABEL_4;
    }
  }
  if (!*(_QWORD *)v6)
  {
LABEL_4:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  WebCore::KeyframeEffectStack::sortedEffects((unsigned int ***)&v21, *(unsigned int ***)v6);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v10 = v22;
  if (v22)
  {
    if (!(v22 >> 29))
    {
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v22));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      v12 = v21;
      v13 = v21;
      v14 = v10;
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 8) + 96);
        if (v15)
        {
          v15 = *(_QWORD *)(v15 + 8);
          if (v15)
            ++*(_DWORD *)(v15 + 24);
        }
        *v11++ = v15;
        v13 = (WTF *)((char *)v13 + 8);
        --v14;
      }
      while (v14);
      *(_DWORD *)(a1 + 12) = v10;
      v16 = (WTF *)((char *)v12 + 8 * v10);
      do
      {
        v17 = *(unsigned int **)v12;
        *(_QWORD *)v12 = 0;
        if (v17)
        {
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            atomic_store(1u, v17);
            v20 = v12;
            WTF::fastFree((WTF *)v17, v9);
            v12 = v20;
          }
        }
        v12 = (WTF *)((char *)v12 + 8);
      }
      while (v12 != v16);
      goto LABEL_33;
    }
LABEL_36:
    __break(0xC471u);
    return;
  }
LABEL_33:
  if (v21)
    WTF::fastFree(v21, v9);
}

uint64_t WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char v14;

  v3 = WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>>(a1, a2);
  v4 = v3;
  if (!*a1)
  {
    if (v3)
    {
      v5 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  v5 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
  if (v5 == v3)
    return 0;
LABEL_3:
  if (v5 != v3)
  {
    v6 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, uint64_t))off_1E338E948[v6])(&v14, v3);
    *(_WORD *)v4 = -1;
    *(_DWORD *)(v4 + 8) = 0;
    ++*(_DWORD *)(*a1 - 16);
    v7 = *a1;
    if (*a1)
      v8 = *(_DWORD *)(v7 - 12) - 1;
    else
      v8 = -1;
    *(_DWORD *)(v7 - 12) = v8;
    v9 = *a1;
    if (*a1)
    {
      v10 = 6 * *(_DWORD *)(v9 - 12);
      v11 = *(_DWORD *)(v9 - 4);
      if (v10 < v11 && v11 >= 9)
        WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::rehash(a1, v11 >> 1, 0);
    }
  }
  return 1;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (v6[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
        else
          --v6[6];
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::~HashSet(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char *v11;
  char v12;

  v3 = *a1;
  if (!*a1)
    return (uint64_t)a1;
  v4 = *(unsigned int *)(v3 - 4);
  if (!(_DWORD)v4)
  {
LABEL_10:
    WTF::fastFree((WTF *)(v3 - 16), a2);
    return (uint64_t)a1;
  }
  v5 = *a1;
  while (1)
  {
    v6 = *(unsigned int *)(v5 + 8);
    if ((_DWORD)v6 == -1)
      break;
    v11 = &v10;
    if ((((uint64_t (*)(char **, uint64_t))off_1E338E9E8[v6])(&v11, v5) & 1) == 0)
    {
      v7 = *(unsigned int *)(v5 + 8);
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, uint64_t))off_1E338E948[v7])(&v12, v5);
      *(_DWORD *)(v5 + 8) = -1;
    }
    v5 += 16;
    if (!--v4)
      goto LABEL_10;
  }
  v9 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::DocumentTimeline::removeReplacedAnimations(void)::$_0::operator()(v9);
}

unint64_t WebCore::DocumentTimeline::removeReplacedAnimations(void)::$_0::operator()(uint64_t a1)
{
  uint64_t v2;
  WebCore::Document *v3;
  uint64_t v4;
  unint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;

  if (!a1)
  {
    v5 = 0;
    v9 = 0;
    return v9 | v5;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v5 = 0;
    goto LABEL_10;
  }
  v2 = *(_QWORD *)(a1 + 136);
  if (!v2 || (v3 = *(WebCore::Document **)(v2 + 8)) == 0)
  {
    v7 = *(double *)(a1 + 48);
    v6 = *(double *)(a1 + 144);
    goto LABEL_8;
  }
  v4 = WebCore::Document::ensureTimelinesController(v3);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 696);
  if (!v5)
  {
LABEL_10:
    v9 = 0;
    return v9 | v5;
  }
  v6 = *(double *)(a1 + 144);
  v7 = *(double *)(v4 + 72) - v6;
LABEL_8:
  v8 = v6 + v7;
  v5 = *(_QWORD *)&v8 & 0xFFFFFFFFFFFFFF00;
  v9 = LOBYTE(v8);
  return v9 | v5;
}

unint64_t WebCore::DocumentTimeline::scheduleNextTick(void)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  WebCore::Document *v9;
  int v10;
  uint64_t v11;
  double v12;
  double *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if ((a2 & 0xFF00000000) != 0)
  {
    v21 = v7;
    v22 = v6;
    v23 = v5;
    v24 = v4;
    v25 = v2;
    v26 = v3;
    v8 = *(double *)(a1 + 136);
    if (v8 != 0.0)
    {
      v9 = *(WebCore::Document **)(*(_QWORD *)&v8 + 8);
      if (v9)
      {
        v10 = a2;
        v11 = WebCore::Document::ensureTimelinesController(v9);
        v12 = *(double *)(v11 + 72);
        v13 = (double *)(v11 + 56);
        v8 = *(double *)(v11 + 56);
        v20 = v10;
        if (v8 != 0.0)
        {
          v14 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::FrameRateAligner::FrameRateData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::FrameRateAligner::FrameRateData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::FrameRateAligner::FrameRateData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::FrameRateAligner::FrameRateData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WebCore::FrameRateAligner::FrameRateData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::FrameRateAligner::FrameRateData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>((uint64_t *)(v11 + 56), &v20);
          v8 = *v13;
          if (v14)
          {
            if (v8 == 0.0)
            {
LABEL_12:
              v18 = *(double *)(v14 + 16);
              LODWORD(v15) = v20;
              v8 = v18 + 1.0 / (double)v15 - fmod(v18 - *(double *)(v14 + 8), 1.0 / (double)v15) - v12;
              goto LABEL_14;
            }
            v16 = *(unsigned int *)(*(_QWORD *)&v8 - 4);
LABEL_11:
            if (v14 == *(_QWORD *)&v8 + 32 * v16)
            {
              v8 = 0.0;
              goto LABEL_14;
            }
            goto LABEL_12;
          }
          if (v8 != 0.0)
          {
            v16 = *(unsigned int *)(*(_QWORD *)&v8 - 4);
            v14 = *(_QWORD *)&v8 + 32 * v16;
            goto LABEL_11;
          }
        }
LABEL_14:
        v17 = *(_QWORD *)&v8 & 0xFFFFFFFFFFFFFF00;
        *(_QWORD *)&v8 = LOBYTE(v8);
        return v17 | *(_QWORD *)&v8;
      }
      v8 = 0.0;
    }
    v17 = 0;
    return v17 | *(_QWORD *)&v8;
  }
  v8 = 0.0;
  v17 = 0;
  return v17 | *(_QWORD *)&v8;
}

uint64_t WebCore::DocumentTimeline::acceleratedAnimationsForElement@<X0>(uint64_t this@<X0>, WebCore::Element *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      goto LABEL_12;
    if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) == 0)
      goto LABEL_9;
    if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19564C720);
    }
    v3 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x90) + 256);
    if (!v3)
      goto LABEL_9;
    if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 8) == 0)
    {
LABEL_12:
      __break(0xC471u);
      JUMPOUT(0x19564C700);
    }
    v4 = *(_QWORD *)(v3 + 72);
    if (v4)
      return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 472))(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 136) + 8) + 680));
  }
LABEL_9:
  *a3 = 0;
  a3[1] = 0;
  return this;
}

uint64_t WebCore::DocumentTimeline::numberOfAnimationTimelineInvalidationsForTesting(WebCore::DocumentTimeline *this)
{
  return *((unsigned int *)this + 38);
}

void WebCore::DocumentTimeline::animate(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  __n128 v26;
  WebCore::WebAnimation *v27;
  WTF::StringImpl *v28;
  __n128 v30;
  WebCore::WebAnimation *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::DocumentTimelinesController *v39;
  void *v40;
  _BYTE *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  WTF::StringImpl *v45;
  __int16 v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  WebCore::Document *v51;
  uint64_t v52;
  unsigned int v53;
  __int128 v54;
  __int128 v55;
  WTF::StringImpl *v56;
  __int16 v57;
  int v58;
  _BYTE v59[8];
  _BYTE v60[64];
  int v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 136);
  if (!v5 || !*(_QWORD *)(v5 + 8))
  {
    *(_BYTE *)a4 = 8;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
    return;
  }
  v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v9 += 2;
  LOBYTE(v49) = 0;
  HIDWORD(v49) = 1;
  v59[0] = 0;
  v62 = 0;
  if (*(_BYTE *)(a3 + 96))
  {
    v52 = 0;
    v58 = 0;
    v10 = *(_DWORD *)(a3 + 88);
    if (!v10)
    {
      v16 = 0;
      v52 = *(_QWORD *)(a3 + 8);
      v60[0] = 0;
      v61 = -1;
      v14 = v9;
      goto LABEL_47;
    }
    if (v10 != 1)
      goto LABEL_87;
    LOBYTE(v41) = 0;
    LODWORD(v42) = -1;
    v11 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(WTF::StringImpl ***, _BYTE **, uint64_t))off_1E338E9A8[v11])(&v50, &v41, a3 + 8);
      LODWORD(v42) = v11;
    }
    v12 = *(_OWORD *)(a3 + 40);
    v43 = *(_OWORD *)(a3 + 24);
    v44 = v12;
    v13 = *(WTF::StringImpl **)(a3 + 56);
    if (v13)
      *(_DWORD *)v13 += 2;
    v45 = v13;
    v46 = *(_WORD *)(a3 + 64);
    v14 = *(WTF::StringImpl **)(a3 + 72);
    if (v14)
    {
      *(_DWORD *)v14 += 2;
      v15 = *(_QWORD *)(a3 + 80);
      v47 = v14;
      v48 = v15;
      *(_DWORD *)v14 += 2;
    }
    else
    {
      v38 = *(_QWORD *)(a3 + 80);
      v47 = 0;
      v48 = v38;
    }
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, a2);
      else
        *(_DWORD *)v9 -= 2;
    }
    v49 = v48;
    if (v58 != -1)
    {
      if (v58 == 1)
      {
        if (v53 == -1)
        {
          if ((_DWORD)v42 == -1)
            goto LABEL_30;
        }
        else if ((_DWORD)v42 == -1)
        {
          ((void (*)(WTF::StringImpl ***, uint64_t *))off_1E338E988[v53])(&v50, &v52);
          v53 = -1;
LABEL_30:
          v54 = v43;
          v55 = v44;
          v19 = v45;
          v45 = 0;
          v20 = v56;
          v56 = v19;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, a2);
            else
              *(_DWORD *)v20 -= 2;
          }
          v57 = v46;
          goto LABEL_34;
        }
        v50 = (WTF::StringImpl **)&v52;
        ((void (*)(WTF::StringImpl ***, uint64_t *, _BYTE **))off_1E338E9B8[v42])(&v50, &v52, &v41);
        goto LABEL_30;
      }
      ((void (*)(WTF::StringImpl ***, uint64_t *))off_1E338E968[v58])(&v50, &v52);
    }
    LOBYTE(v52) = 0;
    v58 = -1;
    v53 = -1;
    v17 = v42;
    if ((_DWORD)v42 != -1)
    {
      ((void (*)(WTF::StringImpl ***, uint64_t *, _BYTE **))off_1E338E9C8[v42])(&v50, &v52, &v41);
      v53 = v17;
    }
    v54 = v43;
    v55 = v44;
    v18 = v45;
    v45 = 0;
    v56 = v18;
    v57 = v46;
    v58 = 1;
LABEL_34:
    v21 = v47;
    v47 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, a2);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v45;
    v45 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, a2);
      else
        *(_DWORD *)v22 -= 2;
    }
    if ((_DWORD)v42 != -1)
      ((void (*)(WTF::StringImpl ***, _BYTE **))off_1E338E988[v42])(&v50, &v41);
    v16 = v58;
    if (v62)
    {
      if (v61 == -1)
      {
        if (v58 == -1)
        {
LABEL_53:
          v9 = v14;
          goto LABEL_54;
        }
      }
      else if (v58 == -1)
      {
        ((void (*)(_BYTE **, _BYTE *))off_1E338E968[v61])(&v41, v60);
        v61 = -1;
        goto LABEL_51;
      }
      v41 = v60;
      ((void (*)(_BYTE **))off_1E338E9F8[v58])(&v41);
LABEL_51:
      if (v58 != -1)
        ((void (*)(_BYTE **, uint64_t *))off_1E338E968[v58])(&v41, &v52);
      goto LABEL_53;
    }
    v60[0] = 0;
    v61 = -1;
    if (v58 == -1)
    {
LABEL_48:
      v62 = 1;
      goto LABEL_51;
    }
LABEL_47:
    ((void (*)(_BYTE **, _BYTE *, uint64_t *))off_1E338E978[v16])(&v41, v60, &v52);
    v61 = v16;
    goto LABEL_48;
  }
LABEL_54:
  WebCore::CustomEffect::create((uint64_t *)a2, (uint64_t)v59, (uint64_t)&v51);
  v23 = v53;
  if (!v53)
  {
    v26.n128_f64[0] = WebCore::WebAnimation::create(*(WebCore::WebAnimation **)(*(_QWORD *)(a1 + 136) + 8), v51, (WebCore::WebAnimation **)&v50);
    v27 = (WebCore::WebAnimation *)v50;
    v28 = v50[18];
    v50[18] = v9;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v25);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v34 = *((_QWORD *)v27 + 5);
      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 8);
        if (v35)
        {
          v36 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v35 - 96), v25);
          if (v36)
          {
            v37 = *(_QWORD *)(v36 + 80);
            if (v37)
              WebCore::InspectorAnimationAgent::didChangeWebAnimationName(v37, v27);
          }
        }
      }
    }
    v30.n128_f64[0] = (*(double (**)(WebCore::WebAnimation *, uint64_t *, __n128))(*(_QWORD *)v27 + 256))(v27, &v49, v26);
    v31 = (WebCore::WebAnimation *)v50;
    WebCore::WebAnimation::play((uint64_t)v50, 1, (uint64_t)&v41, v30);
    if ((_BYTE)v43)
    {
      v32 = v42;
      *(_BYTE *)a4 = (_BYTE)v41;
      *(_QWORD *)(a4 + 8) = v32;
      *(_DWORD *)(a4 + 16) = 1;
      if (v31)
      {
        if (*((_DWORD *)v31 + 6) == 1)
          (*(void (**)(WebCore::WebAnimation *))(*(_QWORD *)v31 + 72))(v31);
        else
          --*((_DWORD *)v31 + 6);
      }
    }
    else
    {
      *(_QWORD *)a4 = v31;
      *(_DWORD *)(a4 + 16) = 0;
    }
    v9 = 0;
    goto LABEL_67;
  }
  if (v53 != 1)
  {
LABEL_87:
    v39 = (WebCore::DocumentTimelinesController *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::DocumentTimelinesController::suspendAnimations(v39, v40);
    return;
  }
  v24 = v52;
  v52 = 0;
  *(_BYTE *)a4 = (_BYTE)v51;
  *(_QWORD *)(a4 + 8) = v24;
  *(_DWORD *)(a4 + 16) = 1;
LABEL_67:
  ((void (*)(_BYTE **, WebCore::Document **))off_1E338EA08[v23])(&v41, &v51);
  if (v62 && v61 != -1)
    ((void (*)(WebCore::Document **, _BYTE *))off_1E338E968[v61])(&v51, v60);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v33);
    else
      *(_DWORD *)v9 -= 2;
  }
}

void WebCore::DocumentTimelinesController::suspendAnimations(WebCore::DocumentTimelinesController *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*((_BYTE *)this + 80))
    return;
  v3 = *((_QWORD *)this + 2);
  if (!v3)
  {
    v4 = 0;
    v5 = 0;
LABEL_4:
    v6 = v4;
    v4 = v3 + 8 * v5;
    goto LABEL_5;
  }
  v5 = *(unsigned int *)(v3 - 4);
  v4 = v3 + 8 * v5;
  if (!*(_DWORD *)(v3 - 12))
    goto LABEL_4;
  if (!(_DWORD)v5)
  {
    v9 = 0;
    v6 = *((_QWORD *)this + 2);
    goto LABEL_17;
  }
  v8 = 8 * v5;
  v6 = *((_QWORD *)this + 2);
  while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
  {
    v6 += 8;
    v8 -= 8;
    if (!v8)
    {
      v6 = v4;
      break;
    }
  }
LABEL_5:
  if (v3)
  {
    v9 = *(unsigned int *)(v3 - 4);
LABEL_17:
    v7 = v3 + 8 * v9;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  if (v7 != v6)
  {
    while (!*(_QWORD *)(*(_QWORD *)v6 + 8))
    {
      v10 = v6 + 8;
      v6 = v4;
      if (v10 != v4)
      {
        v6 = v10;
        while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
        {
          v6 += 8;
          if (v6 == v4)
          {
            v6 = v4;
            break;
          }
        }
      }
      if (v6 == v7)
      {
        v6 = v7;
        if (!v3)
          goto LABEL_26;
        goto LABEL_58;
      }
    }
  }
  if (v3)
LABEL_58:
    v11 = v3 + 8 * *(unsigned int *)(v3 - 4);
  else
LABEL_26:
    v11 = 0;
  for (; v6 != v11; ++*((_DWORD *)this + 6))
  {
    v12 = *(_QWORD **)(*(_QWORD *)v6 + 8);
    for (i = (_QWORD *)v12[4]; i; i = (_QWORD *)i[2])
    {
      v14 = *i;
      if (!*(_BYTE *)(*i + 156))
      {
        *(_BYTE *)(v14 + 156) = 1;
        if (*(_QWORD *)(v14 + 56))
        {
          if (WebCore::WebAnimation::playState((WebCore::WebAnimation *)v14) == 1)
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v14 + 56) + 56))(*(_QWORD *)(v14 + 56), 1);
        }
      }
    }
    WebCore::DocumentTimeline::applyPendingAcceleratedAnimations((WebCore::DocumentTimeline *)v12, a2);
    if ((v12[11] & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v12 + 7));
    v15 = v4;
    if (v6 + 8 != v4)
    {
      v15 = v6 + 8;
      while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
      {
        v15 += 8;
        if (v15 == v4)
        {
          v15 = v4;
          break;
        }
      }
    }
    v6 = v7;
    if (v15 != v7)
    {
      v6 = v15;
      if (!*(_QWORD *)(*(_QWORD *)v15 + 8))
      {
        while (1)
        {
          v16 = v6 + 8;
          v6 = v4;
          if (v16 != v4)
          {
            v6 = v16;
            while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
            {
              v6 += 8;
              if (v6 == v4)
              {
                v6 = v4;
                break;
              }
            }
          }
          if (v6 == v7)
            break;
          if (*(_QWORD *)(*(_QWORD *)v6 + 8))
            goto LABEL_44;
        }
        v6 = v7;
      }
    }
LABEL_44:
    ;
  }
  *((_BYTE *)this + 80) = 1;
}

void WebCore::DocumentTimelinesController::~DocumentTimelinesController(WebCore::DocumentTimelinesController *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v3 = *((_QWORD *)this + 7);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_QWORD *)v4)
    {
      *(_QWORD *)(*(_QWORD *)v4 + 8) = 0;
      v16 = *(unsigned int **)v4;
      *(_QWORD *)v4 = 0;
      if (v16)
      {
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v16);
          v22 = v4;
          WTF::fastFree((WTF *)v16, a2);
          v4 = v22;
        }
      }
    }
    else
    {
      *(_QWORD *)v4 = 0;
    }
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v13 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    v8 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v8)
    {
      for (i = 0; i != v8; ++i)
      {
        v10 = *(unsigned int **)(v6 + 8 * i);
        if (v10 != (unsigned int *)-1)
        {
          *(_QWORD *)(v6 + 8 * i) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              atomic_store(1u, v10);
              v20 = i;
              v21 = v6;
              v19 = v8;
              WTF::fastFree((WTF *)v10, a2);
              v8 = v19;
              i = v20;
              v6 = v21;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v7 = *((_QWORD *)this + 1);
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), a2);
}

unsigned int *WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::DocumentTimeline>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  unsigned int *result;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int **v27;
  unsigned int v29;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  WTF *v36;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v10;
      goto LABEL_6;
    }
    v24 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v24)
      goto LABEL_36;
    v25 = 0;
    v26 = v24 - 1;
    do
    {
      v27 = (unsigned int **)(v8 + 8 * v26);
      if ((unint64_t)*v27 + 1 >= 2 && !*((_QWORD *)*v27 + 1))
      {
        v35 = v25;
        v34 = v26;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v27, a2);
        v26 = v34;
        v25 = v35 + 1;
      }
    }
    while ((unint64_t)v26--);
    v8 = *(_QWORD *)a1;
    if (v25)
    {
      v31 = v25;
      *(_DWORD *)(v8 - 16) += v25;
      v32 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v33 = *(_DWORD *)(v32 - 12);
      else
        v33 = 0;
      *(_DWORD *)(v32 - 12) = v33 - v31;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v29 = *(_DWORD *)(v8 - 4);
    if (v29 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v29)
    {
LABEL_36:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = a2[2];
  if (!v11)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = a2;
    v13 = (unsigned int *)a2[2];
    a2[2] = v11;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
      v11 = a2[2];
    }
  }
  do
    v16 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v16 + 1, (unsigned int *)v11));
  do
    v17 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v17 + 1, (unsigned int *)v11));
  v36 = (WTF *)v11;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v36, a3);
  result = (unsigned int *)v36;
  v36 = 0;
  if (result)
  {
    do
    {
      v22 = __ldaxr(result);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, result));
    if (!v23)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v18);
    }
  }
  if (v11)
  {
    do
    {
      v20 = __ldaxr((unsigned int *)v11);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)v11));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)v11);
      return (unsigned int *)WTF::fastFree((WTF *)v11, v18);
    }
  }
  return result;
}

uint64_t *WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin@<X0>(uint64_t *result@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v2 = *result;
  if (!*result)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v5 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
  {
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_3;
  }
  v3 = (uint64_t *)*result;
  if ((_DWORD)v4)
  {
    v8 = 8 * v4;
    v3 = (uint64_t *)*result;
    while ((unint64_t)(*v3 + 1) <= 1)
    {
      ++v3;
      v8 -= 8;
      if (!v8)
      {
        v3 = v5;
        break;
      }
    }
  }
LABEL_4:
  *a2 = result;
  a2[1] = v3;
  a2[2] = v5;
  if (v2)
  {
    v7 = *(unsigned int *)(v2 - 4);
    v6 = (uint64_t *)(v2 + 8 * v7);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  a2[3] = v6;
  a2[4] = (uint64_t *)(v2 + 8 * v7);
LABEL_7:
  while (v3 != v6 && !*(_QWORD *)(*v3 + 8))
  {
    v9 = v3 + 1;
    a2[1] = v3 + 1;
    v3 = v5;
    if (v9 != v5)
    {
      v3 = v9;
      while ((unint64_t)(*v3 + 1) <= 1)
      {
        a2[1] = ++v3;
        if (v3 == v5)
        {
          v3 = v5;
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end@<X0>(uint64_t *result@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *result;
  if (*result)
  {
    v4 = *(unsigned int *)(v2 - 4);
    v3 = (uint64_t *)(v2 + 8 * v4);
    *a2 = result;
    a2[1] = v3;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    *a2 = result;
    a2[1] = 0;
  }
  a2[2] = v3;
  a2[3] = v3;
  a2[4] = (uint64_t *)(v2 + 8 * v4);
  return result;
}

_QWORD *WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result[2];
  v2 = result[1] + 8;
  result[1] = v2;
  if (v2 != v1)
  {
    while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
    {
      v2 += 8;
      result[1] = v2;
      if (v2 == v1)
      {
        v2 = v1;
        break;
      }
    }
  }
  v3 = result[3];
LABEL_6:
  while (v2 != v3 && !*(_QWORD *)(*(_QWORD *)v2 + 8))
  {
    v4 = v2 + 8;
    result[1] = v2 + 8;
    v2 = v1;
    if (v4 != v1)
    {
      v2 = v4;
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 8;
        result[1] = v2;
        if (v2 == v1)
        {
          v2 = v1;
          goto LABEL_6;
        }
      }
    }
  }
  ++*(_DWORD *)(*result + 8);
  return result;
}

uint64_t *WebCore::DocumentTimelinesController::resumeAnimations(uint64_t *this)
{
  uint64_t *v1;
  uint64_t *v2[5];
  uint64_t *v3;
  uint64_t *v4;

  if (*((_BYTE *)this + 80))
  {
    this[9] = 0x7FF8000000000000;
    *((_BYTE *)this + 80) = 0;
    v1 = this + 2;
    WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(this + 2, &v3);
    this = WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v1, v2);
    while (v4 != v2[1])
    {
      WebCore::DocumentTimeline::resumeAnimations(*(WebCore::DocumentTimeline **)(*v4 + 8));
      this = WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v3);
    }
  }
  return this;
}

uint64_t WebCore::CSSAnimationEvent::isCSSAnimationEvent(WebCore::CSSAnimationEvent *this)
{
  return 1;
}

void WebCore::CSSTransition::~CSSTransition(WebCore::CSSTransition *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CSSTransition::~CSSTransition(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::RenderStyle *v3;
  WTF *v4;
  WebCore::RenderStyle *v5;
  WTF *v6;
  WebCore::RenderStyle *v7;
  WTF *v8;
  uint64_t v9;
  char v10;

  v3 = (WebCore::RenderStyle *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v3)
  {
    WebCore::RenderStyle::~RenderStyle(v3, a2);
    if (*(_DWORD *)v4)
    {
      *((_OWORD *)v4 + 2) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *(_OWORD *)v4 = 0u;
      *((_OWORD *)v4 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v4, a2);
    }
  }
  v5 = (WebCore::RenderStyle *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v5)
  {
    WebCore::RenderStyle::~RenderStyle(v5, a2);
    if (*(_DWORD *)v6)
    {
      *((_OWORD *)v6 + 2) = 0u;
      *((_OWORD *)v6 + 3) = 0u;
      *(_OWORD *)v6 = 0u;
      *((_OWORD *)v6 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v6, a2);
    }
  }
  v7 = (WebCore::RenderStyle *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v7)
  {
    WebCore::RenderStyle::~RenderStyle(v7, a2);
    if (*(_DWORD *)v8)
    {
      *((_OWORD *)v8 + 2) = 0u;
      *((_OWORD *)v8 + 3) = 0u;
      *(_OWORD *)v8 = 0u;
      *((_OWORD *)v8 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v8, a2);
    }
  }
  v9 = *((unsigned int *)this + 60);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, char *))off_1E338E948[v9])(&v10, (char *)this + 232);
  *((_DWORD *)this + 60) = -1;
  WebCore::StyleOriginatedAnimation::~StyleOriginatedAnimation(this, (WTF::StringImpl *)a2);
}

void `non-virtual thunk to'WebCore::CSSTransition::~CSSTransition(WebCore::CSSTransition *this, void *a2)
{
  WebCore::CSSTransition::~CSSTransition((WebCore::CSSTransition *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::CSSTransition::~CSSTransition((WebCore::CSSTransition *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::CustomEffect::~CustomEffect(WebCore::CustomEffect *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  WebCore::AnimationEffect::~AnimationEffect(this, a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  WebCore::AnimationEffect::~AnimationEffect(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::CustomEffect::isCustomEffect(WebCore::CustomEffect *this)
{
  return 1;
}

uint64_t WebCore::CustomEffect::ticksContinuouslyWhileActive(WebCore::CustomEffect *this)
{
  return 1;
}

void WebCore::DocumentTimeline::~DocumentTimeline(WebCore::DocumentTimeline *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::DocumentTimeline::~DocumentTimeline(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  _DWORD **v8;
  uint64_t v9;
  void *v10;
  _DWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v14 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v14)
      {
        v17 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v14));
        v3 = v17;
      }
      v15 = *(WTF **)(v3 + 16);
      if (v15)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v16 = v3;
        WTF::fastFree(v15, a2);
        v3 = v16;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((unsigned int *)this + 33);
  if ((_DWORD)v6)
  {
    v11 = (_DWORD **)*((_QWORD *)this + 15);
    v12 = 8 * v6;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        if (v13[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        else
          --v13[4];
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  v7 = (WTF *)*((_QWORD *)this + 15);
  if (v7)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD **)*((_QWORD *)this + 14);
  if (v8)
    WTF::HashTable<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::deallocateTable(v8, a2);
  *((_QWORD *)this + 7) = off_1E31F7378;
  v9 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WebCore::TimerBase::~TimerBase((WebCore::DocumentTimeline *)((char *)this + 56));
  WebCore::AnimationTimeline::~AnimationTimeline(this, v10);
}

uint64_t WebCore::AnimationPropertyWrapperBase::isShorthandWrapper(WebCore::AnimationPropertyWrapperBase *this)
{
  return 0;
}

BOOL WebCore::LengthPropertyWrapper::requiresBlendingForAccumulativeIteration(WebCore::LengthPropertyWrapper *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;

  v5 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3);
  v7 = (_QWORD *)((char *)a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v10 = *((_QWORD *)this + 3);
  v11 = (_QWORD *)((char *)a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  v13 = *(unsigned __int8 *)(v8 + 4);
  v14 = *(unsigned __int8 *)(v12 + 4);
  return v13 == 11 || v14 == 11 || v13 != v14;
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::Length const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  int v13;
  float v14;
  float v15;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (unsigned __int8 *)v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = (unsigned __int8 *)v9(v11);
  v13 = v8[4];
  if (v13 != v12[4] || (v8[5] != 0) != (v12[5] != 0))
    return 0;
  if (v13 == 13)
    return 1;
  if (v13 == 11)
    return WebCore::Length::isCalculatedEqual((WebCore::Length *)v8, (const WebCore::Length *)v12);
  v14 = *(float *)v8;
  if (!v8[6])
    v14 = (float)*(int *)v8;
  v15 = *(float *)v12;
  if (!v12[6])
    v15 = (float)*(int *)v12;
  return v14 == v15;
}

BOOL WebCore::LengthPropertyWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v16;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  v13 = *(unsigned __int8 *)(v8 + 4);
  v14 = *(unsigned __int8 *)(v12 + 4);
  if (v13 == v14)
    return 1;
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    if (v13 <= 0xB && ((1 << v13) & 0x81C) != 0 && v14 <= 0xB && ((1 << v14) & 0x81C) != 0)
      return (v13 != 2) ^ (v14 == 2);
  }
  else
  {
    if (v13 == 11)
    {
      if (v14 != 4)
      {
        v16 = v14 & 0xFFFFFFF7;
        return v16 == 3;
      }
      return 1;
    }
    if (v14 == 11)
    {
      if (v13 != 4)
      {
        v16 = v13 & 0xFFFFFFF7;
        return v16 == 3;
      }
      return 1;
    }
  }
  return 0;
}

uint64_t WebCore::AnimationPropertyWrapperBase::normalizesProgressForDiscreteInterpolation(WebCore::AnimationPropertyWrapperBase *this)
{
  return 1;
}

int *WebCore::LengthPropertyWrapper::blend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, unsigned int *);
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t (*v16)(_QWORD *);
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  __n128 v20;
  int *result;
  int v22;
  BOOL v23;
  unsigned int v24;
  _BYTE v25[3];
  float v26;
  __int16 v27;
  char v28;

  v9 = *(uint64_t (**)(_QWORD *, unsigned int *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *, unsigned int *))(*v10 + v9);
  v11 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = *(_DWORD *)(a1 + 48);
  v15 = (unsigned __int8 *)v11(v13);
  v16 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v18 = (_QWORD *)(a4 + (v17 >> 1));
  if ((v17 & 1) != 0)
    v16 = *(uint64_t (**)(_QWORD *))(*v18 + v16);
  v19 = (unsigned __int8 *)v16(v18);
  WebCore::blend(v15, v19, a5, (uint64_t)&v26, v20);
  if ((v14 & 2) != 0 && v27 != 11 && v27 != 13)
  {
    if (v28)
    {
      if (v26 < 0.0)
        goto LABEL_19;
    }
    else if ((LODWORD(v26) & 0x80000000) != 0)
    {
LABEL_19:
      v22 = v15[4];
      if (v15[4])
        v23 = v22 == 11;
      else
        v23 = 1;
      if (v23)
        goto LABEL_26;
      if (v15[6])
      {
        if (*(float *)v15 != 0.0)
        {
LABEL_26:
          v24 = 0;
          if (v22 == 11)
          {
            *(_WORD *)v25 = 4;
            v25[2] = 0;
          }
          else
          {
            v25[0] = v22;
            *(_WORD *)&v25[1] = 0;
          }
          goto LABEL_11;
        }
      }
      else if (*(_DWORD *)v15)
      {
        goto LABEL_26;
      }
      v22 = v19[4];
      goto LABEL_26;
    }
  }
  v24 = 0;
  v25[2] = 0;
  *(_WORD *)v25 = v27;
  if (v27 - 2 >= 9)
  {
    if (v27 != 11)
      goto LABEL_11;
  }
  else
  {
    v25[2] = v28;
    if (v28)
    {
      v24 = LODWORD(v26);
      goto LABEL_11;
    }
  }
  v24 = LODWORD(v26);
LABEL_11:
  result = (int *)v9(v10, &v24);
  if (v25[0] == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v24);
  }
  return result;
}

uint64_t WebCore::AnimationPropertyWrapperBase::animationIsAccelerated(WebCore::AnimationPropertyWrapperBase *this, const WebCore::Settings *a2)
{
  return 0;
}

uint64_t WebCore::AnimationPropertyWrapperBase::requiresBlendingForAccumulativeIteration(WebCore::AnimationPropertyWrapperBase *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  return 0;
}

uint64_t WebCore::canInterpolateLengths(WebCore *this, const WebCore::Length *a2, const WebCore::Length *a3)
{
  _BOOL4 v4;
  _BOOL4 v5;
  int v6;
  int v7;
  unsigned int v8;

  if (this == a2)
    return 1;
  v4 = this == 4 || (this & 0xF7) == 3;
  if (a2 != 11)
    v4 = 0;
  v5 = (a2 & 0xF7) == 3;
  if (a2 == 4)
    v5 = 1;
  if (this == 11)
    v4 = v5;
  if (((1 << (char)a2) & 0x81C) != 0)
    v6 = (this != 2) ^ (a2 == 2);
  else
    v6 = 0;
  if (a2 <= 0xBu)
    v7 = v6;
  else
    v7 = 0;
  if (((1 << (char)this) & 0x81C) == 0)
    v7 = 0;
  if (this <= 0xBu)
    v8 = v7;
  else
    v8 = 0;
  if ((_DWORD)a3)
    return v8;
  else
    return v4;
}

uint64_t WebCore::PropertyWrapperFlex::equals(WebCore::PropertyWrapperFlex *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  WebCore::Length *v6;
  float v7;
  uint64_t result;
  float v9;

  if (a2 == a3)
    return 1;
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 32) + 16);
  v5 = *(unsigned __int8 *)(v3 + 16);
  if (v5 != *(unsigned __int8 *)(v4 + 16) || (*(_BYTE *)(v3 + 17) != 0) != (*(_BYTE *)(v4 + 17) != 0))
    return 0;
  if (v5 == 13)
    goto LABEL_13;
  v6 = (WebCore::Length *)(v3 + 12);
  if (v5 != 11)
  {
    if (*(_BYTE *)(v3 + 18))
      v7 = *(float *)v6;
    else
      v7 = (float)*(int *)v6;
    v9 = *(float *)(v4 + 12);
    if (!*(_BYTE *)(v4 + 18))
      v9 = (float)SLODWORD(v9);
    if (v7 == v9)
    {
LABEL_13:
      if (*(float *)(v3 + 4) == *(float *)(v4 + 4))
        return *(float *)(v3 + 8) == *(float *)(v4 + 8);
    }
    return 0;
  }
  result = WebCore::Length::isCalculatedEqual(v6, (const WebCore::Length *)(v4 + 12));
  if ((_DWORD)result)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 16);
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 32) + 16);
    goto LABEL_13;
  }
  return result;
}

BOOL WebCore::PropertyWrapperFlex::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v8;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 32) + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32) + 16);
  if (*(float *)(v3 + 4) != *(float *)(v4 + 4) && *(float *)(v3 + 8) != *(float *)(v4 + 8))
  {
    v5 = *(unsigned __int8 *)(v3 + 16);
    v6 = *(unsigned __int8 *)(v4 + 16);
    if (v5 == v6)
      return 1;
    if (v5 == 11)
    {
      if (v6 == 4)
        return 1;
      v8 = v6 & 0xFFFFFFF7;
      return v8 == 3;
    }
    if (v6 == 11)
    {
      if (v5 == 4)
        return 1;
      v8 = v5 & 0xFFFFFFF7;
      return v8 == 3;
    }
  }
  return 0;
}

float *WebCore::PropertyWrapperFlex::blend(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float *result;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  int v15;
  float v16;
  float v17;
  float v18;
  WTF **v19;
  uint64_t v20;
  WTF *v21;
  uint64_t *v22;
  WTF::StringImpl *v23;
  WebCore::StyleMiscNonInheritedData *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  WTF *v30;
  uint64_t *v31;
  WTF::StringImpl *v32;
  WebCore::StyleMiscNonInheritedData *v33;
  WTF *v34;
  void *v35;
  WTF *v36;
  void *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  unsigned int v44[2];

  WebCore::blend((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 32) + 16) + 12), (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 32) + 16) + 12), a6, 0, (uint64_t)v44, a1);
  result = (float *)WebCore::RenderStyle::setFlexBasis(a3, (WebCore::Length *)v44);
  if (LOBYTE(v44[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (float *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v44[0]);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 32) + 16);
  v12 = *(float *)(v11 + 4);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 32) + 16);
  v14 = *(float *)(v13 + 4);
  v15 = *(unsigned __int8 *)(a6 + 10);
  if (v15 == 1)
  {
    v38 = *(double *)(a6 + 16);
    if (v38 != 0.0)
    {
      v39 = v14;
      v40 = v38 * v39;
      v12 = v40 + v12;
      v14 = v40 + v39;
    }
  }
  v16 = v12 + v12;
  if (!*(_BYTE *)(a6 + 9))
    v16 = v12;
  v17 = v16 + (float)(v14 - v12) * *(double *)a6;
  if (v17 >= 0.0)
    v18 = v17;
  else
    v18 = 0.0;
  v20 = *(_QWORD *)(a3 + 8);
  v19 = (WTF **)(a3 + 8);
  if (*(float *)(*(_QWORD *)(*(_QWORD *)(v20 + 32) + 16) + 4) != v18)
  {
    v21 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v19);
    v22 = (uint64_t *)*((_QWORD *)v21 + 4);
    if (*(_DWORD *)v22 != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)v22, (uint64_t *)v44);
      v22 = *(uint64_t **)v44;
      v24 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v21 + 4);
      *((_QWORD *)v21 + 4) = *(_QWORD *)v44;
      if (v24)
      {
        if (*(_DWORD *)v24 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v24, v23);
          WTF::fastFree(v36, v37);
          v22 = (uint64_t *)*((_QWORD *)v21 + 4);
        }
        else
        {
          --*(_DWORD *)v24;
        }
      }
    }
    result = (float *)WTF::DataRef<WebCore::StyleFlexibleBoxData>::access(v22 + 2);
    result[1] = v18;
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 32) + 16);
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 32) + 16);
    v15 = *(unsigned __int8 *)(a6 + 10);
  }
  v25 = *(float *)(v11 + 8);
  v26 = *(float *)(v13 + 8);
  if (v15 == 1)
  {
    v41 = *(double *)(a6 + 16);
    if (v41 != 0.0)
    {
      v42 = v26;
      v43 = v41 * v42;
      v25 = v43 + v25;
      v26 = v43 + v42;
    }
  }
  v27 = v25 + v25;
  if (!*(_BYTE *)(a6 + 9))
    v27 = v25;
  v28 = v27 + (float)(v26 - v25) * *(double *)a6;
  if (v28 >= 0.0)
    v29 = v28;
  else
    v29 = 0.0;
  if (*(float *)(*(_QWORD *)(*((_QWORD *)*v19 + 4) + 16) + 8) != v29)
  {
    v30 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v19);
    v31 = (uint64_t *)*((_QWORD *)v30 + 4);
    if (*(_DWORD *)v31 != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)v31, (uint64_t *)v44);
      v31 = *(uint64_t **)v44;
      v33 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v30 + 4);
      *((_QWORD *)v30 + 4) = *(_QWORD *)v44;
      if (v33)
      {
        if (*(_DWORD *)v33 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v33, v32);
          WTF::fastFree(v34, v35);
          v31 = (uint64_t *)*((_QWORD *)v30 + 4);
        }
        else
        {
          --*(_DWORD *)v33;
        }
      }
    }
    result = (float *)WTF::DataRef<WebCore::StyleFlexibleBoxData>::access(v31 + 2);
    result[2] = v29;
  }
  return result;
}

float WebCore::blendFunc(uint64_t a1, float a2, float a3)
{
  float v3;
  double v5;
  double v6;
  double v7;

  if (*(_BYTE *)(a1 + 10) == 1)
  {
    v5 = *(double *)(a1 + 16);
    if (v5 != 0.0)
    {
      v6 = a3;
      v7 = v5 * v6;
      a2 = v7 + a2;
      a3 = v7 + v6;
    }
  }
  v3 = a2 + a2;
  if (!*(_BYTE *)(a1 + 9))
    v3 = a2;
  return v3 + (float)(a3 - a2) * *(double *)a1;
}

BOOL WebCore::PropertyWrapperGetter<float>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  float v8;
  float (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(float (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(float (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(float (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(float (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::FloatPropertyWrapper::blend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  float v12;
  float (*v13)(_QWORD *);
  uint64_t v14;
  _QWORD *v15;
  float v16;
  __n128 v17;
  int v18;
  uint64_t (*v19)(_QWORD *, __n128);
  uint64_t v20;
  _QWORD *v21;
  BOOL v22;
  float v23;
  BOOL v24;

  v9 = *(float (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(float (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  v13 = *(float (**)(_QWORD *))(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = (_QWORD *)(a4 + (v14 >> 1));
  if ((v14 & 1) != 0)
    v13 = *(float (**)(_QWORD *))(*v15 + v13);
  v16 = v13(v15);
  v17.n128_f32[0] = WebCore::blendFunc(a5, v12, v16);
  v18 = *(unsigned __int8 *)(a1 + 48);
  v19 = *(uint64_t (**)(_QWORD *, __n128))(a1 + 32);
  v20 = *(_QWORD *)(a1 + 40);
  v21 = (_QWORD *)(a2 + (v20 >> 1));
  if ((v20 & 1) != 0)
    v19 = *(uint64_t (**)(_QWORD *, __n128))(*v21 + v19);
  v22 = v17.n128_f32[0] < 0.0 && v18 == 2;
  v23 = 0.00000011921;
  if (!v22)
    v23 = v17.n128_f32[0];
  v24 = v17.n128_f32[0] <= 0.0 && v18 == 1;
  v17.n128_u32[0] = 0;
  if (!v24)
    v17.n128_f32[0] = v23;
  return v19(v21, v17);
}

uint64_t WebCore::RenderStyle::accentColor(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 3) + 144;
}

BOOL WebCore::AccentColorPropertyWrapper::equals(WebCore::AccentColorPropertyWrapper *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  return ((*(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 238) ^ *(unsigned __int8 *)(*((_QWORD *)a3 + 3) + 238)) & 0x80) == 0
      && WebCore::PropertyWrapperStyleColor::equals(this, a2, a3);
}

BOOL WebCore::AccentColorPropertyWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 238) & 0x80) == 0
      && (*(_BYTE *)(*(_QWORD *)(a3 + 24) + 238) & 0x80) == 0;
}

unsigned int *WebCore::AccentColorPropertyWrapper::blend(_QWORD *a1, WebCore::RenderStyle *this, uint64_t a3, uint64_t a4, double *a5)
{
  uint64_t v6;
  uint64_t v7;

  if ((*(_BYTE *)(*(_QWORD *)(a3 + 24) + 238) & 0x80) == 0 && (*(_BYTE *)(*(_QWORD *)(a4 + 24) + 238) & 0x80) == 0)
    return WebCore::PropertyWrapperStyleColor::blend(a1, (uint64_t)this, a3, a4, (uint64_t)a5);
  if (*a5 == 0.0)
    v6 = a3;
  else
    v6 = a4;
  v7 = *(_QWORD *)(v6 + 24);
  if ((*(_BYTE *)(v7 + 238) & 0x80) != 0)
    return (unsigned int *)WebCore::RenderStyle::setHasAutoAccentColor(this);
  else
    return (unsigned int *)WebCore::RenderStyle::setAccentColor((uint64_t)this, (const WebCore::StyleColor *)(v7 + 144));
}

BOOL WebCore::PropertyWrapperStyleColor::equals(WebCore::PropertyWrapperStyleColor *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  const WebCore::StyleColor *v9;
  uint64_t (*v10)(_QWORD *);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v18;
  const WebCore::StyleColor *v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;
  __int128 v30;

  if (a2 == a3)
    return 1;
  v6 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = (_QWORD *)((char *)a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
  v9 = (const WebCore::StyleColor *)v6(v8);
  v10 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v11 = *((_QWORD *)this + 3);
  v12 = (_QWORD *)((char *)a3 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *))(*v12 + v10);
  v13 = v10(v12);
  v14 = *((_DWORD *)v9 + 2);
  if (v14)
  {
    if (v14 != 1 || *(_DWORD *)(v13 + 8) != 1)
      goto LABEL_19;
    return 1;
  }
  if (*(_DWORD *)(v13 + 8))
  {
LABEL_19:
    v20 = (const WebCore::StyleColor *)v13;
    WebCore::RenderStyle::colorResolvingCurrentColor(a2, v9, 0);
    WebCore::RenderStyle::colorResolvingCurrentColor(a3, v20, 0);
    v18 = WebCore::operator==((uint64_t *)&v30, (uint64_t *)&v29);
    if ((v29 & 0x8000000000000) != 0)
    {
      v26 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFLL);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v26);
        WTF::fastFree((WTF *)v26, v21);
      }
    }
    if ((v30 & 0x8000000000000) != 0)
    {
      v22 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v21);
      }
    }
    return v18;
  }
  v15 = *(_QWORD *)v9;
  v16 = *(_QWORD *)v13;
  if ((*(_QWORD *)v9 & 0x8000000000000) != 0)
  {
    if ((v16 & 0x8000000000000) == 0)
      return 0;
    v25 = (_QWORD *)v13;
    v30 = *(_OWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 4);
    v29 = *(_OWORD *)((v16 & 0xFFFFFFFFFFFFLL) + 4);
    if (!WebCore::operator==<float,4ul>((float *)&v30, (float *)&v29) || HIBYTE(*(_QWORD *)v9) != HIBYTE(*v25))
      return 0;
    return BYTE6(*(_QWORD *)v9) == BYTE6(*v25);
  }
  else
  {
    return (v16 & 0x8000000000000) == 0 && v15 == v16;
  }
}

unsigned int *WebCore::PropertyWrapperStyleColor::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v10)(_QWORD *);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD *);
  uint64_t v15;
  _QWORD *v16;
  unsigned int *result;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t (*v25)(_QWORD *, uint64_t **);
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;

  v10 = (uint64_t (*)(_QWORD *))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a3 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *))(*v12 + v10);
  v13 = v10(v12);
  v14 = (uint64_t (*)(_QWORD *))a1[2];
  v15 = a1[3];
  v16 = (_QWORD *)(a4 + (v15 >> 1));
  if ((v15 & 1) != 0)
    v14 = *(uint64_t (**)(_QWORD *))(*v16 + v14);
  result = (unsigned int *)v14(v16);
  v18 = result;
  v19 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v19 != 1 || result[2] != 1)
  {
    v39 = *(_QWORD *)(a3 + 32) + 328;
    v40 = &v39;
    v41 = &v39;
    v42 = &v39;
    v43 = &v39;
    if ((_DWORD)v19 == -1)
      goto LABEL_20;
    v44 = (uint64_t)&v40;
    ((void (*)(unint64_t *__return_ptr, uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v19])(&v38, &v44, v13);
    v39 = *(_QWORD *)(a4 + 32) + 328;
    v40 = &v39;
    v41 = &v39;
    v42 = &v39;
    v43 = &v39;
    v20 = v18[2];
    if ((_DWORD)v20 == -1)
    {
LABEL_20:
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      v44 = (uint64_t)&v40;
      ((void (*)(uint64_t *__return_ptr, uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v20])(&v37, &v44, v18);
      WebCore::blend(&v38, (uint64_t)&v37, a5, &v44, v21, v22, v23, v24);
      v25 = (uint64_t (*)(_QWORD *, uint64_t **))a1[4];
      v26 = a1[5];
      v27 = (_QWORD *)(a2 + (v26 >> 1));
      if ((v26 & 1) != 0)
        v25 = *(uint64_t (**)(_QWORD *, uint64_t **))(*v27 + v25);
      v28 = v44;
      if (v44)
        v44 = 0;
      v40 = (uint64_t *)v28;
      LODWORD(v41) = 0;
      result = (unsigned int *)v25(v27, &v40);
      if ((_DWORD)v41 != -1)
        result = (unsigned int *)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v41])(&v39, &v40);
      v30 = v44;
      if ((v44 & 0x8000000000000) == 0)
        goto LABEL_15;
    }
    result = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
    do
    {
      v31 = __ldaxr(result);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, result));
    if (!v32)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v29);
    }
LABEL_15:
    if ((v37 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v37 & 0xFFFFFFFFFFFFLL);
      do
      {
        v33 = __ldaxr(result);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, result));
      if (!v34)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v29);
      }
    }
    if ((v38 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v38 & 0xFFFFFFFFFFFFLL);
      do
      {
        v35 = __ldaxr(result);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, result));
      if (!v36)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v29);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::caretColor(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 3) + 112;
}

uint64_t WebCore::RenderStyle::visitedLinkCaretColor(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 3) + 128;
}

void WebCore::CaretColorPropertyWrapper::~CaretColorPropertyWrapper(WebCore::CaretColorPropertyWrapper *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E338D328;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::CaretColorPropertyWrapper::~CaretColorPropertyWrapper(WebCore::CaretColorPropertyWrapper *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E338D328;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::PropertyWrapperVisitedAffectedStyleColor::requiresBlendingForAccumulativeIteration(WebCore::PropertyWrapperVisitedAffectedStyleColor *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  return 1;
}

uint64_t WebCore::CaretColorPropertyWrapper::equals(WebCore::CaretColorPropertyWrapper *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  int v3;

  v3 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 236) ^ *(_DWORD *)(*((_QWORD *)a3 + 3) + 236);
  if ((v3 & 0x200000) != 0
    || (v3 & 0x400000) != 0
    || !(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD, const WebCore::RenderStyle *, const WebCore::RenderStyle *))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), a2, a3);
  }
}

BOOL WebCore::CaretColorPropertyWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(a3 + 24);
  v4 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 236);
  if ((v4 & 0x200000) == 0 && (*(_BYTE *)(v3 + 238) & 0x20) == 0)
    return 1;
  if ((v4 & 0x400000) != 0)
    return 0;
  return (*(_BYTE *)(v3 + 238) & 0x40) == 0;
}

uint64_t WebCore::CaretColorPropertyWrapper::blend(uint64_t a1, WebCore::RenderStyle *this, uint64_t a3, uint64_t a4, double *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if ((*(_BYTE *)(*(_QWORD *)(a3 + 24) + 238) & 0x20) != 0 || (*(_BYTE *)(*(_QWORD *)(a4 + 24) + 238) & 0x20) != 0)
  {
    if (*a5 >= 0.5)
      v10 = a4;
    else
      v10 = a3;
    v11 = *(_QWORD *)(v10 + 24);
    if ((*(_BYTE *)(v11 + 238) & 0x20) != 0)
      WebCore::RenderStyle::setHasAutoCaretColor(this);
    else
      WebCore::RenderStyle::setCaretColor((uint64_t)this, (const WebCore::StyleColor *)(v11 + 112));
  }
  else
  {
    (*(void (**)(_QWORD, WebCore::RenderStyle *, uint64_t, uint64_t, double *))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16), this, a3, a4, a5);
  }
  if ((*(_BYTE *)(*(_QWORD *)(a3 + 24) + 238) & 0x40) == 0 && (*(_BYTE *)(*(_QWORD *)(a4 + 24) + 238) & 0x40) == 0)
    return (*(uint64_t (**)(_QWORD, WebCore::RenderStyle *, uint64_t, uint64_t, double *))(**(_QWORD **)(a1 + 24)
                                                                                                 + 64))(*(_QWORD *)(a1 + 24), this, a3, a4, a5);
  if (*a5 >= 0.5)
    v13 = a4;
  else
    v13 = a3;
  v14 = *(_QWORD *)(v13 + 24);
  if ((*(_BYTE *)(v14 + 238) & 0x40) != 0)
    return WebCore::RenderStyle::setHasVisitedLinkAutoCaretColor(this);
  else
    return WebCore::RenderStyle::setVisitedLinkCaretColor((uint64_t)this, (const WebCore::StyleColor *)(v14 + 128));
}

void WebCore::PropertyWrapperVisitedAffectedStyleColor::~PropertyWrapperVisitedAffectedStyleColor(WebCore::PropertyWrapperVisitedAffectedStyleColor *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E338D328;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::PropertyWrapperVisitedAffectedStyleColor::~PropertyWrapperVisitedAffectedStyleColor(WebCore::PropertyWrapperVisitedAffectedStyleColor *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E338D328;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::PropertyWrapperVisitedAffectedStyleColor::equals(WebCore::PropertyWrapperVisitedAffectedStyleColor *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, const WebCore::RenderStyle *, const WebCore::RenderStyle *))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), a2, a3);
  return result;
}

uint64_t WebCore::PropertyWrapperVisitedAffectedStyleColor::blend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24), a2, a3, a4, a5);
}

uint64_t WebCore::RenderStyle::scrollbarThumbColor(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 3) + 384;
}

_QWORD *WebCore::RenderStyle::setScrollbarThumbColor(WebCore::RenderStyle *this, const WebCore::StyleColor *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  WTF::StringImpl *v9;
  WebCore::StyleRareInheritedData *v10;
  WTF *v11;
  void *v12;
  WebCore::RenderStyle *v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  _QWORD v17[4];
  _QWORD *v18;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  if (*v3 == 1)
  {
    v4 = *((_QWORD *)this + 3);
  }
  else
  {
    v4 = WTF::fastMalloc((WTF *)0x1A0);
    WebCore::StyleRareInheritedData::StyleRareInheritedData(v4, (uint64_t)v3);
    v10 = (WebCore::StyleRareInheritedData *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v4;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WebCore::StyleRareInheritedData::~StyleRareInheritedData(v10, v9);
        WTF::fastFree(v11, v12);
        v4 = *((_QWORD *)this + 3);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
  }
  v17[0] = &v16;
  v17[1] = &v16;
  v17[2] = &v16;
  v17[3] = &v16;
  v5 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v5 == -1)
  {
    v13 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
    return (_QWORD *)WebCore::RenderStyle::scrollbarTrackColor(v13);
  }
  v18 = v17;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v14, &v18, a2);
  v7 = *(unsigned int *)(v4 + 392);
  if ((_DWORD)v7 == -1)
  {
    if (v15 == -1)
      return result;
  }
  else if (v15 == -1)
  {
    result = (_QWORD *)((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v7])(v17, v4 + 384);
    *(_DWORD *)(v4 + 392) = -1;
    goto LABEL_9;
  }
  v17[0] = v4 + 384;
  result = (_QWORD *)((uint64_t (*)(_QWORD *, uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                            + v15))(v17, v4 + 384, &v14);
LABEL_9:
  if (v15 != -1)
    return (_QWORD *)((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v15])(v17, &v14);
  return result;
}

uint64_t WebCore::RenderStyle::scrollbarTrackColor(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 3) + 400;
}

void WebCore::RenderStyle::setScrollbarTrackColor(WebCore::RenderStyle *this, const WebCore::StyleColor *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v8;
  WebCore::StyleRareInheritedData *v9;
  WTF *v10;
  void *v11;
  WebCore::ScrollbarColorPropertyWrapper *v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  _QWORD v16[4];
  _QWORD *v17;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  if (*v3 == 1)
  {
    v4 = *((_QWORD *)this + 3);
  }
  else
  {
    v4 = WTF::fastMalloc((WTF *)0x1A0);
    WebCore::StyleRareInheritedData::StyleRareInheritedData(v4, (uint64_t)v3);
    v9 = (WebCore::StyleRareInheritedData *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v4;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        WebCore::StyleRareInheritedData::~StyleRareInheritedData(v9, v8);
        WTF::fastFree(v10, v11);
        v4 = *((_QWORD *)this + 3);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
  }
  v16[0] = &v15;
  v16[1] = &v15;
  v16[2] = &v15;
  v16[3] = &v15;
  v5 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v5 == -1)
  {
    v12 = (WebCore::ScrollbarColorPropertyWrapper *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::ScrollbarColorPropertyWrapper::~ScrollbarColorPropertyWrapper(v12);
    return;
  }
  v17 = v16;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v13, &v17, a2);
  v6 = *(unsigned int *)(v4 + 408);
  if ((_DWORD)v6 == -1)
  {
    if (v14 == -1)
      return;
  }
  else if (v14 == -1)
  {
    ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v6])(v16, v4 + 400);
    *(_DWORD *)(v4 + 408) = -1;
    goto LABEL_9;
  }
  v16[0] = v4 + 400;
  ((void (*)(_QWORD *, uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                      + v14))(v16, v4 + 400, &v13);
LABEL_9:
  if (v14 != -1)
    ((void (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(v16, &v13);
}

void WebCore::ScrollbarColorPropertyWrapper::~ScrollbarColorPropertyWrapper(WebCore::ScrollbarColorPropertyWrapper *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::ScrollbarColorPropertyWrapper::~ScrollbarColorPropertyWrapper(WebCore::ScrollbarColorPropertyWrapper *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ScrollbarColorPropertyWrapper::equals(WebCore::ScrollbarColorPropertyWrapper *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  const WebCore::RenderStyle *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::ScrollbarColorPropertyWrapper *v17;
  WebCore::ScrollbarColorPropertyWrapper *v18;
  const WebCore::RenderStyle *v19;
  const WebCore::RenderStyle *v20;
  const WebCore::RenderStyle *v21;
  const WebCore::RenderStyle *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char **v33;

  v3 = a2;
  v4 = *((_QWORD *)a2 + 3);
  v5 = *(unsigned int *)(v4 + 392);
  if ((_DWORD)v5)
  {
    v15 = *((_QWORD *)a2 + 3);
    v17 = this;
    v19 = a2;
    v21 = a3;
    v29 = &v28;
    v30 = &v28;
    v31 = &v28;
    v32 = &v28;
    if ((_DWORD)v5 == -1)
      goto LABEL_30;
  }
  else
  {
    if ((*(_BYTE *)(v4 + 390) & 4) == 0)
    {
      v6 = 0;
      goto LABEL_4;
    }
    v15 = *((_QWORD *)a2 + 3);
    v17 = this;
    v19 = a2;
    v21 = a3;
    v29 = &v28;
    v30 = &v28;
    v31 = &v28;
    v32 = &v28;
  }
  v33 = &v29;
  ((void (*)(uint64_t *__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v23, &v33, v4 + 384);
  v29 = &v28;
  v30 = &v28;
  v31 = &v28;
  v32 = &v28;
  v11 = *(unsigned int *)(v15 + 408);
  if ((_DWORD)v11 == -1)
    goto LABEL_30;
  v33 = &v29;
  ((void (*)(uint64_t *__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v11])(&v25, &v33, v15 + 400);
  v27 = 1;
  if (v26 != -1)
    ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v26])(&v29, &v25);
  v26 = -1;
  if (v24 != -1)
    ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v24])(&v29, &v23);
  v6 = 1;
  v3 = v19;
  a3 = v21;
  this = v17;
LABEL_4:
  v7 = *((_QWORD *)a3 + 3);
  v8 = *(unsigned int *)(v7 + 392);
  if ((_DWORD)v8)
  {
    v16 = *((_QWORD *)a3 + 3);
    v18 = this;
    v14 = v6;
    v20 = v3;
    v22 = a3;
    v29 = &v28;
    v30 = &v28;
    v31 = &v28;
    v32 = &v28;
    if ((_DWORD)v8 == -1)
      goto LABEL_30;
  }
  else
  {
    if ((*(_BYTE *)(v7 + 390) & 4) == 0)
    {
      v9 = 1;
      return v6 ^ v9;
    }
    v16 = *((_QWORD *)a3 + 3);
    v18 = this;
    v14 = v6;
    v20 = v3;
    v22 = a3;
    v29 = &v28;
    v30 = &v28;
    v31 = &v28;
    v32 = &v28;
  }
  v33 = &v29;
  ((void (*)(uint64_t *__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v8])(&v23, &v33, v7 + 384);
  v29 = &v28;
  v30 = &v28;
  v31 = &v28;
  v32 = &v28;
  v12 = *(unsigned int *)(v16 + 408);
  if ((_DWORD)v12 == -1)
  {
LABEL_30:
    v13 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ScrollbarColorPropertyWrapper::canInterpolate(v13);
  }
  v33 = &v29;
  ((void (*)(uint64_t *__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v12])(&v25, &v33, v16 + 400);
  v27 = 1;
  if (v26 != -1)
    ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v26])(&v29, &v25);
  v26 = -1;
  if (v24 != -1)
    ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v24])(&v29, &v23);
  if ((v14 & 1) == 0)
  {
    v9 = 0;
    v6 = v14;
    return v6 ^ v9;
  }
  result = (*(uint64_t (**)(_QWORD, const WebCore::RenderStyle *, const WebCore::RenderStyle *))(**((_QWORD **)v18 + 2) + 40))(*((_QWORD *)v18 + 2), v20, v22);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, const WebCore::RenderStyle *, const WebCore::RenderStyle *))(**((_QWORD **)v18 + 3) + 40))(*((_QWORD *)v18 + 3), v20, v22);
  return result;
}

uint64_t WebCore::ScrollbarColorPropertyWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char ***v13;
  char ***v14;
  char ***v15;
  char ***v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  char v22;
  char v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char **v28;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(unsigned int *)(v3 + 392);
  if ((_DWORD)v4)
  {
    v6 = a3;
    v13 = &v28;
    v14 = &v28;
    v15 = &v28;
    v16 = &v28;
    if ((_DWORD)v4 == -1)
      goto LABEL_26;
  }
  else
  {
    if ((*(_BYTE *)(v3 + 390) & 4) == 0)
      return 0;
    v6 = a3;
    v13 = &v28;
    v14 = &v28;
    v15 = &v28;
    v16 = &v28;
  }
  v24 = (char *)&v13;
  ((void (*)(uint64_t *__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v4])(&v18, &v24, v3 + 384);
  v13 = &v28;
  v14 = &v28;
  v15 = &v28;
  v16 = &v28;
  v7 = *(unsigned int *)(v3 + 408);
  if ((_DWORD)v7 == -1)
    goto LABEL_26;
  v24 = (char *)&v13;
  ((void (*)(uint64_t *__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v7])(&v20, &v24, v3 + 400);
  v22 = 1;
  v8 = *(_QWORD *)(v6 + 24);
  v9 = *(unsigned int *)(v8 + 392);
  if ((_DWORD)v9)
  {
    v24 = &v23;
    v25 = &v23;
    v26 = &v23;
    v27 = &v23;
    if ((_DWORD)v9 == -1)
      goto LABEL_26;
  }
  else
  {
    if ((*(_BYTE *)(v8 + 390) & 4) == 0)
    {
      result = 0;
LABEL_11:
      v10 = result;
      if (v21 != -1)
        ((void (*)(char ****, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v21])(&v13, &v20);
      v21 = -1;
      if (v19 != -1)
        ((void (*)(char ****, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v19])(&v13, &v18);
      return v10;
    }
    v24 = &v23;
    v25 = &v23;
    v26 = &v23;
    v27 = &v23;
  }
  v28 = &v24;
  ((void (*)(char ****__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v9])(&v13, &v28, v8 + 384);
  v24 = &v23;
  v25 = &v23;
  v26 = &v23;
  v27 = &v23;
  v11 = *(unsigned int *)(v8 + 408);
  if ((_DWORD)v11 == -1)
  {
LABEL_26:
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ScrollbarColorPropertyWrapper::blend(v12);
  }
  v28 = &v24;
  ((void (*)(char ****__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v11])(&v15, &v28, v8 + 400);
  v17 = 1;
  if ((_DWORD)v16 != -1)
    ((void (*)(char **, char ****))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(&v24, &v15);
  LODWORD(v16) = -1;
  if ((_DWORD)v14 != -1)
    ((void (*)(char **, char ****))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(&v24, &v13);
  result = 1;
  if (v22)
    goto LABEL_11;
  return result;
}

void WebCore::ScrollbarColorPropertyWrapper::blend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  WebCore::PropertyWrapperVisitedAffectedColor *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char v31;
  char v32;
  char **v33;

  if (!WebCore::ScrollbarColorPropertyWrapper::canInterpolate(a1, a3, a4))
  {
LABEL_5:
    v10.n128_u64[0] = *a5;
    if (*(double *)a5 == 0.0)
      v13 = a3;
    else
      v13 = a4;
    v14 = *(_QWORD *)(v13 + 24);
    v15 = *(unsigned int *)(v14 + 392);
    if ((_DWORD)v15)
    {
      v22 = &v32;
      v23 = &v32;
      v24 = &v32;
      v25 = &v32;
      if ((_DWORD)v15 == -1)
        goto LABEL_42;
    }
    else
    {
      if ((*(_BYTE *)(v14 + 390) & 4) == 0)
      {
        v16 = 0;
        LOBYTE(v27) = 0;
        goto LABEL_11;
      }
      v22 = &v32;
      v23 = &v32;
      v24 = &v32;
      v25 = &v32;
    }
    v33 = &v22;
    ((void (*)(char **__return_ptr, char ***, uint64_t, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v15])(&v27, &v33, v14 + 384, v10);
    v22 = &v32;
    v23 = &v32;
    v24 = &v32;
    v25 = &v32;
    v20 = *(unsigned int *)(v14 + 408);
    if ((_DWORD)v20 != -1)
    {
      v33 = &v22;
      ((void (*)(char **__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v20])(&v29, &v33, v14 + 400);
      v16 = 1;
LABEL_11:
      v31 = v16;
      WebCore::RenderStyle::setScrollbarColor(a2, (uint64_t)&v27);
      if (v31)
      {
        if ((_DWORD)v30 != -1)
          ((void (*)(char **, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v30])(&v22, &v29);
        LODWORD(v30) = -1;
        if ((_DWORD)v28 != -1)
          ((void (*)(char **, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v28])(&v22, &v27);
      }
      return;
    }
LABEL_42:
    v21 = (WebCore::PropertyWrapperVisitedAffectedColor *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::PropertyWrapperVisitedAffectedColor::~PropertyWrapperVisitedAffectedColor(v21);
    return;
  }
  v11 = *(_QWORD *)(a3 + 24);
  v12 = *(unsigned int *)(v11 + 392);
  if ((_DWORD)v12)
  {
    v27 = &v32;
    v28 = &v32;
    v29 = &v32;
    v30 = &v32;
    if ((_DWORD)v12 == -1)
      goto LABEL_42;
  }
  else
  {
    if ((*(_BYTE *)(v11 + 390) & 4) == 0)
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      goto LABEL_5;
    }
    v27 = &v32;
    v28 = &v32;
    v29 = &v32;
    v30 = &v32;
  }
  v33 = &v27;
  ((void (*)(char **__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v12])(&v22, &v33, v11 + 384);
  v27 = &v32;
  v28 = &v32;
  v29 = &v32;
  v30 = &v32;
  v17 = *(unsigned int *)(v11 + 408);
  if ((_DWORD)v17 == -1)
    goto LABEL_42;
  v33 = &v27;
  ((void (*)(char **__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v17])(&v24, &v33, v11 + 400);
  v26 = 1;
  LOBYTE(v27) = 0;
  LODWORD(v28) = -1;
  v18 = (int)v23;
  if ((_DWORD)v23 != -1)
  {
    ((void (*)(char ***, char **, char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS26_LNS0_6_TraitE1EEEEEvRS27_OT_EUlRS2D_OT0_E_JS2C_S2B_EEEDcmS2E_DpOT0____fdiagonal[v23])(&v33, &v27, &v22);
    LODWORD(v28) = v18;
  }
  LOBYTE(v29) = 0;
  LODWORD(v30) = -1;
  v19 = (int)v25;
  if ((_DWORD)v25 != -1)
  {
    ((void (*)(char ***, char **, char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS26_LNS0_6_TraitE1EEEEEvRS27_OT_EUlRS2D_OT0_E_JS2C_S2B_EEEDcmS2E_DpOT0____fdiagonal[v25])(&v33, &v29, &v24);
    LODWORD(v30) = v19;
  }
  v31 = 1;
  WebCore::RenderStyle::setScrollbarColor(a2, (uint64_t)&v27);
  if (v31)
  {
    if ((_DWORD)v30 != -1)
      ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v30])(&v33, &v29);
    LODWORD(v30) = -1;
    if ((_DWORD)v28 != -1)
      ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v28])(&v33, &v27);
    LODWORD(v28) = -1;
  }
  if (v26)
  {
    if ((_DWORD)v25 != -1)
      ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v25])(&v33, &v24);
    LODWORD(v25) = -1;
    if ((_DWORD)v23 != -1)
      ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v23])(&v33, &v22);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t *))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16), a2, a3, a4, a5);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t *))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24), a2, a3, a4, a5);
}

void WebCore::PropertyWrapperVisitedAffectedColor::~PropertyWrapperVisitedAffectedColor(WebCore::PropertyWrapperVisitedAffectedColor *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E338D3E8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::PropertyWrapperVisitedAffectedColor::~PropertyWrapperVisitedAffectedColor(WebCore::PropertyWrapperVisitedAffectedColor *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E338D3E8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::PropertyWrapperVisitedAffectedColor::requiresBlendingForAccumulativeIteration(WebCore::PropertyWrapperVisitedAffectedColor *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  return 1;
}

uint64_t WebCore::PropertyWrapperVisitedAffectedColor::equals(WebCore::PropertyWrapperVisitedAffectedColor *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, const WebCore::RenderStyle *, const WebCore::RenderStyle *))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), a2, a3);
  return result;
}

uint64_t WebCore::PropertyWrapperVisitedAffectedColor::blend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24), a2, a3, a4, a5);
}

BOOL WebCore::PropertyWrapperColor::equals(WebCore::PropertyWrapperColor *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v7)(_QWORD *);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 result;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  if (a2 == a3)
    return 1;
  v22 = v3;
  v23 = v4;
  v7 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v8 = *((_QWORD *)this + 3);
  v9 = (_QWORD *)((char *)a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v7 = *(uint64_t (**)(_QWORD *))(*v9 + v7);
  v10 = (uint64_t *)v7(v9);
  v11 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v12 = *((_QWORD *)this + 3);
  v13 = (_QWORD *)((char *)a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = (_QWORD *)v11(v13);
  v15 = *v10;
  v16 = *v14;
  if ((*v10 & 0x8000000000000) != 0)
  {
    if ((v16 & 0x8000000000000) == 0)
      return 0;
    v19 = v14;
    v21 = *(_OWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 4);
    v20 = *(_OWORD *)((v16 & 0xFFFFFFFFFFFFLL) + 4);
    result = WebCore::operator==<float,4ul>((float *)&v21, (float *)&v20);
    if (!(_DWORD)result)
      return result;
    if (HIBYTE(*v10) != HIBYTE(*v19))
      return 0;
    return BYTE6(*v10) == BYTE6(*v19);
  }
  else
  {
    return (v16 & 0x8000000000000) == 0 && v15 == v16;
  }
}

unsigned int *WebCore::PropertyWrapperColor::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t (*v13)(_QWORD *);
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t (*v21)(_QWORD *, uint64_t *);
  uint64_t v22;
  _QWORD *v23;
  unsigned int *result;
  void *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;

  v9 = (uint64_t (*)(_QWORD *))a1[2];
  v10 = a1[3];
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = (unint64_t *)v9(v11);
  v13 = (uint64_t (*)(_QWORD *))a1[2];
  v14 = a1[3];
  v15 = (_QWORD *)(a4 + (v14 >> 1));
  if ((v14 & 1) != 0)
    v13 = *(uint64_t (**)(_QWORD *))(*v15 + v13);
  v16 = v13(v15);
  WebCore::blend(v12, v16, a5, &v28, v17, v18, v19, v20);
  v21 = (uint64_t (*)(_QWORD *, uint64_t *))a1[4];
  v22 = a1[5];
  v23 = (_QWORD *)(a2 + (v22 >> 1));
  if ((v22 & 1) != 0)
    v21 = *(uint64_t (**)(_QWORD *, uint64_t *))(*v23 + v21);
  result = (unsigned int *)v21(v23, &v28);
  if ((v28 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
    do
    {
      v26 = __ldaxr(result);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, result));
    if (!v27)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v25);
    }
  }
  return result;
}

uint64_t WebCore::FillLayer::xPosition(WebCore::FillLayer *this)
{
  return (uint64_t)this + 24;
}

uint64_t WebCore::FillLayer::backgroundXOrigin(WebCore::FillLayer *this)
{
  return *((_WORD *)this + 31) & 3;
}

uint64_t WebCore::FillLayer::setBackgroundXOrigin(uint64_t result, char a2)
{
  *(_DWORD *)(result + 60) = *(_DWORD *)(result + 60) & 0xFFFCFFFF | ((a2 & 3) << 16) | 0x4000;
  return result;
}

uint64_t WebCore::FillLayer::yPosition(WebCore::FillLayer *this)
{
  return (uint64_t)this + 32;
}

uint64_t WebCore::FillLayer::backgroundYOrigin(WebCore::FillLayer *this)
{
  return (*((_DWORD *)this + 15) >> 18) & 3;
}

uint64_t WebCore::FillLayer::setBackgroundYOrigin(uint64_t result, char a2)
{
  *(_DWORD *)(result + 60) = *(_DWORD *)(result + 60) & 0xFFF3FFFF | ((a2 & 3) << 18) | 0x8000;
  return result;
}

uint64_t WebCore::FillLayer::sizeLength(WebCore::FillLayer *this)
{
  return (uint64_t)this + 40;
}

int *WebCore::FillLayer::setSizeLength(_BYTE *a1, uint64_t a2)
{
  int *result;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  int *v9;

  result = (int *)(a1 + 40);
  if (result != (int *)a2)
  {
    if (a1[44] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v9 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*result);
      result = v9;
    }
    v5 = *(unsigned __int8 *)(a2 + 4);
    a1[44] = v5;
    a1[45] = *(_BYTE *)(a2 + 5);
    if (v5 <= 0xD)
    {
      v6 = 1 << v5;
      if ((v6 & 0x7FC) != 0)
      {
        a1[46] = *(_BYTE *)(a2 + 6);
        *result = *(_DWORD *)a2;
      }
      else if ((v6 & 0x3003) != 0)
      {
        *result = 0;
      }
      else
      {
        *result = *(_DWORD *)a2;
        WebCore::Length::ref(result);
      }
    }
    result = (int *)(a1 + 48);
    if (a1[52] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*result);
      result = (int *)(a1 + 48);
    }
    v7 = *(unsigned __int8 *)(a2 + 12);
    a1[52] = v7;
    a1[53] = *(_BYTE *)(a2 + 13);
    if (v7 <= 0xD)
    {
      v8 = 1 << v7;
      if ((v8 & 0x7FC) != 0)
      {
        a1[54] = *(_BYTE *)(a2 + 14);
        *result = *(_DWORD *)(a2 + 8);
      }
      else if ((v8 & 0x3003) != 0)
      {
        *result = 0;
      }
      else
      {
        *result = *(_DWORD *)(a2 + 8);
        return WebCore::Length::ref(result);
      }
    }
  }
  return result;
}

uint64_t WebCore::FillLayer::image(WebCore::FillLayer *this)
{
  return *((_QWORD *)this + 2);
}

_DWORD *WebCore::FillLayer::setImage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *result;

  v3 = *a2;
  *a2 = 0;
  result = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  if (result)
  {
    if (result[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  *(_DWORD *)(a1 + 60) |= 0x80u;
  return result;
}

uint64_t WebCore::FillLayer::clip(WebCore::FillLayer *this)
{
  return (*((unsigned __int8 *)this + 58) >> 2) & 7;
}

uint64_t WebCore::FillLayer::setClip(uint64_t result, char a2)
{
  *(_WORD *)(result + 58) = *(_WORD *)(result + 58) & 0xFFE3 | (4 * (a2 & 7));
  *(_DWORD *)(result + 60) |= 0x200u;
  return result;
}

uint64_t WebCore::FillLayer::origin(WebCore::FillLayer *this)
{
  return (*((unsigned __int8 *)this + 58) >> 5) & 3;
}

uint64_t WebCore::FillLayer::setOrigin(uint64_t result, char a2)
{
  *(_WORD *)(result + 58) = *(_WORD *)(result + 58) & 0xFF9F | (32 * (a2 & 3));
  *(_DWORD *)(result + 60) |= 0x400u;
  return result;
}

uint64_t WebCore::FillLayer::composite(WebCore::FillLayer *this)
{
  return (*((unsigned __int16 *)this + 29) >> 7) & 0xF;
}

uint64_t WebCore::FillLayer::setComposite(uint64_t result, char a2)
{
  *(_WORD *)(result + 58) = *(_WORD *)(result + 58) & 0xF87F | ((a2 & 0xF) << 7);
  *(_DWORD *)(result + 60) |= 0x100000u;
  return result;
}

uint64_t WebCore::FillLayer::maskMode(WebCore::FillLayer *this)
{
  return (*((unsigned __int8 *)this + 60) >> 5) & 3;
}

uint64_t WebCore::FillLayer::setMaskMode(uint64_t result, char a2)
{
  *(_DWORD *)(result + 60) = *(_DWORD *)(result + 60) & 0xFFFFFF9F | (32 * (a2 & 3)) | 0x400000;
  return result;
}

void WebCore::FillLayersPropertyWrapper::~FillLayersPropertyWrapper(WebCore::FillLayersPropertyWrapper *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebCore::FillLayersPropertyWrapper::~FillLayersPropertyWrapper(WebCore::FillLayersPropertyWrapper *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::FillLayersPropertyWrapper::equals(WebCore::FillLayersPropertyWrapper *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;

  if (a2 == a3)
    return 1;
  v5 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 4);
  v7 = (_QWORD *)((char *)a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 3);
  v10 = *((_QWORD *)this + 4);
  v11 = (_QWORD *)((char *)a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), v8, v12);
    if (!(_DWORD)result)
      break;
    v8 = *(_QWORD *)(v8 + 8);
    v12 = *(_QWORD *)(v12 + 8);
  }
  while (v8 && v12 != 0);
  return result;
}

uint64_t WebCore::FillLayersPropertyWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  while (((*(_WORD *)(v12 + 58) ^ *(_WORD *)(v8 + 58)) & 0x1800) == 0)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v8, v12);
    if ((_DWORD)result)
    {
      v8 = *(_QWORD *)(v8 + 8);
      result = 1;
      if (v8)
      {
        v12 = *(_QWORD *)(v12 + 8);
        if (v12)
          continue;
      }
    }
    return result;
  }
  return 0;
}

uint64_t WebCore::FillLayersPropertyWrapper::blend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD *);
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *);
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  __n128 v21;
  WTF *v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  const WebCore::FillLayer *v29;
  WebCore::FillLayer *v30;
  WebCore::FillLayer *v31;
  WebCore::FillLayer *v32;
  uint64_t v33;
  void *v34;
  WTF *v35;
  void *v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;

  v9 = *(uint64_t (**)(_QWORD *))(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  v13 = *(uint64_t (**)(_QWORD *))(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = (_QWORD *)(a4 + (v14 >> 1));
  if ((v14 & 1) != 0)
    v13 = *(uint64_t (**)(_QWORD *))(*v15 + v13);
  v16 = v13(v15);
  v17 = *(uint64_t (**)(_QWORD *))(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = (_QWORD *)(a2 + (v18 >> 1));
  if ((v18 & 1) != 0)
    v17 = *(uint64_t (**)(_QWORD *))(*v19 + v17);
  result = v17(v19);
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  if (*(double *)a5 == 0.0)
    v26 = v12;
  else
    v26 = v16;
  if (*(_BYTE *)(a5 + 8))
  {
    v16 = v26;
    v12 = v26;
  }
  v38 = 0;
  v39 = result;
  v37 = 0;
  do
  {
    v27 = v23;
    if (result)
    {
      if (v23 == (_DWORD)v38)
      {
        v28 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v37, v23 + 1, (unint64_t)&v39);
        v23 = HIDWORD(v38) + 1;
        v22 = v37;
        *((_QWORD *)v37 + HIDWORD(v38)) = *(_QWORD *)v28;
      }
      else
      {
        ++v23;
        *((_QWORD *)v22 + v27) = result;
      }
      HIDWORD(v38) = v23;
    }
    else
    {
      v29 = (const WebCore::FillLayer *)*((_QWORD *)v22 + v25 % v23);
      v30 = (WebCore::FillLayer *)WTF::fastMalloc((WTF *)0x40);
      v31 = WebCore::FillLayer::FillLayer(v30, v29);
      v32 = *(WebCore::FillLayer **)(v24 + 8);
      *(_QWORD *)(v24 + 8) = v31;
      if (v32)
      {
        if (*(_DWORD *)v32 == 1)
        {
          WebCore::FillLayer::~FillLayer(v32);
          WTF::fastFree(v35, v36);
          v31 = *(WebCore::FillLayer **)(v24 + 8);
        }
        else
        {
          --*(_DWORD *)v32;
        }
      }
      v39 = (uint64_t)v31;
    }
    v21.n128_u64[0] = *(_QWORD *)a5;
    if (*(double *)a5 == 0.0)
      v33 = v12;
    else
      v33 = v16;
    *(_WORD *)(v39 + 58) = *(_WORD *)(v39 + 58) & 0xE7FF | *(_WORD *)(v33 + 58) & 0x1800;
    (*(void (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), v21);
    v12 = *(_QWORD *)(v12 + 8);
    v16 = *(_QWORD *)(v16 + 8);
    v24 = v39;
    result = *(_QWORD *)(v39 + 8);
    v39 = result;
    if (!v12)
      break;
    ++v25;
  }
  while (v16);
  if (v22)
  {
    v37 = 0;
    LODWORD(v38) = 0;
    return WTF::fastFree(v22, v34);
  }
  return result;
}

uint64_t WebCore::FillLayerPositionPropertyWrapper::equals(WebCore::FillLayerPositionPropertyWrapper *this, const WebCore::FillLayer *a2, const WebCore::FillLayer *a3)
{
  uint64_t v4;
  uint64_t (*v7)(_QWORD *);
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  unsigned int *v18;
  int v19;
  int v20;
  void *v21;
  float v22;
  int v23;
  uint64_t (*v24)(_QWORD *);
  uint64_t v25;
  _QWORD *v26;
  int v27;
  uint64_t (*v28)(_QWORD *);
  uint64_t v29;
  _QWORD *v30;
  int v31;
  int v32;
  float v33;
  float v34;
  _BOOL4 v35;
  float v37;
  unsigned int isCalculatedEqual;
  unsigned int v39;
  float v40;
  unsigned __int8 v41;
  char v42;
  char v43;
  float v44;
  unsigned __int8 v45;
  char v46;
  char v47;

  if (a2 == a3)
    return 1;
  v4 = 0;
  if (a2 && a3)
  {
    v7 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
    v8 = *((_QWORD *)this + 3);
    v9 = (_QWORD *)((char *)a2 + (v8 >> 1));
    if ((v8 & 1) != 0)
      v7 = *(uint64_t (**)(_QWORD *))(*v9 + v7);
    v10 = v7(v9);
    v44 = 0.0;
    v47 = 0;
    v45 = *(_BYTE *)(v10 + 4);
    v11 = v45;
    v12 = *(unsigned __int8 *)(v10 + 5);
    v46 = *(_BYTE *)(v10 + 5);
    if (v45 - 2 >= 9)
    {
      if (v45 == 11)
      {
        v44 = *(float *)v10;
        v37 = v44;
        WebCore::Length::ref((int *)&v44);
        v39 = LODWORD(v37);
        *(float *)&v13 = v37;
        goto LABEL_9;
      }
      v39 = 0;
      v14 = 1;
      *(float *)&v13 = 0.0;
    }
    else
    {
      v47 = *(_BYTE *)(v10 + 6);
      if (!v47)
      {
        v44 = *(float *)v10;
        v39 = LODWORD(v44);
        *(float *)&v13 = v44;
LABEL_9:
        v14 = 1;
        goto LABEL_14;
      }
      v14 = 0;
      v13 = *(int *)v10;
      v44 = *(float *)&v13;
      v39 = v13;
    }
LABEL_14:
    v15 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
    v16 = *((_QWORD *)this + 3);
    v17 = (_QWORD *)((char *)a3 + (v16 >> 1));
    if ((v16 & 1) != 0)
      v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
    v18 = (unsigned int *)v15(v17);
    v40 = 0.0;
    v43 = 0;
    v41 = *((_BYTE *)v18 + 4);
    v19 = v41;
    v20 = *((unsigned __int8 *)v18 + 5);
    v42 = *((_BYTE *)v18 + 5);
    if (v41 - 2 >= 9)
    {
      if (v41 == 11)
      {
        v21 = (void *)*v18;
        v40 = *(float *)v18;
        WebCore::Length::ref((int *)&v40);
        goto LABEL_19;
      }
      v21 = 0;
      v23 = 1;
      v22 = 0.0;
    }
    else
    {
      v43 = *((_BYTE *)v18 + 6);
      if (!v43)
      {
        v21 = (void *)*v18;
        v40 = *(float *)v18;
LABEL_19:
        v22 = *(float *)&v21;
        v23 = 1;
        goto LABEL_23;
      }
      v23 = 0;
      v22 = *(float *)v18;
      v40 = v22;
      v21 = (void *)LODWORD(v22);
    }
LABEL_23:
    v24 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 6);
    v25 = *((_QWORD *)this + 7);
    v26 = (_QWORD *)((char *)a2 + (v25 >> 1));
    if ((v25 & 1) != 0)
      v24 = *(uint64_t (**)(_QWORD *))(*v26 + v24);
    v27 = v24(v26);
    v28 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 6);
    v29 = *((_QWORD *)this + 7);
    v30 = (_QWORD *)((char *)a3 + (v29 >> 1));
    if ((v29 & 1) != 0)
      v28 = *(uint64_t (**)(_QWORD *))(*v30 + v28);
    v31 = v28(v30);
    if (v11 == v19)
    {
      if ((v12 != 0) == (v20 != 0))
      {
        v32 = v31;
        if (v11 == 13)
        {
          v35 = 1;
          return v27 == v31 && v35;
        }
        if (v11 != 11)
        {
          v33 = (float)v13;
          if (!v14)
            v33 = *(float *)&v13;
          v34 = (float)SLODWORD(v22);
          if (!v23)
            v34 = v22;
          v35 = v33 == v34;
          return v27 == v31 && v35;
        }
        isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)&v44, (const WebCore::Length *)&v40);
        if (v27 == v32)
          v4 = isCalculatedEqual;
        else
          v4 = 0;
        goto LABEL_52;
      }
      v19 = v11;
    }
    v4 = 0;
    if (v19 != 11)
    {
LABEL_45:
      if (v11 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v39);
      }
      return v4;
    }
LABEL_52:
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v21);
    goto LABEL_45;
  }
  return v4;
}

int *WebCore::FillLayerPositionPropertyWrapper::blend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v10)(_QWORD *);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD *);
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD *);
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD *);
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  float v28;
  float v29;
  void (*v30)(_QWORD *, uint64_t);
  uint64_t v31;
  _QWORD *v32;
  __n128 v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD *, unsigned int *);
  _QWORD *v36;
  int *result;
  unsigned int v38;
  __int16 v39;
  char v40;
  float v41;
  __int16 v42;
  char v43;
  unsigned int v44;
  _BYTE v45[3];
  unsigned int v46;
  _BYTE v47[3];
  unsigned int v48;
  __int16 v49;
  char v50;

  v10 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = (_QWORD *)(a3 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *))(*v12 + v10);
  v13 = v10(v12);
  v46 = 0;
  *(_WORD *)&v47[1] = 0;
  v47[0] = *(_BYTE *)(v13 + 4);
  v47[1] = *(_BYTE *)(v13 + 5);
  if (v47[0] - 2 >= 9)
  {
    if (v47[0] == 11)
    {
      v46 = *(_DWORD *)v13;
      WebCore::Length::ref((int *)&v46);
    }
  }
  else
  {
    v47[2] = *(_BYTE *)(v13 + 6);
    v46 = *(_DWORD *)v13;
  }
  v14 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = (_QWORD *)(a4 + (v15 >> 1));
  if ((v15 & 1) != 0)
    v14 = *(uint64_t (**)(_QWORD *))(*v16 + v14);
  v17 = v14(v16);
  v44 = 0;
  *(_WORD *)&v45[1] = 0;
  v45[0] = *(_BYTE *)(v17 + 4);
  v45[1] = *(_BYTE *)(v17 + 5);
  if (v45[0] - 2 >= 9)
  {
    if (v45[0] == 11)
    {
      v44 = *(_DWORD *)v17;
      WebCore::Length::ref((int *)&v44);
    }
  }
  else
  {
    v45[2] = *(_BYTE *)(v17 + 6);
    v44 = *(_DWORD *)v17;
  }
  v18 = *(uint64_t (**)(_QWORD *))(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = (_QWORD *)(a3 + (v19 >> 1));
  if ((v19 & 1) != 0)
    v18 = *(uint64_t (**)(_QWORD *))(*v20 + v18);
  v21 = v18(v20);
  v22 = *(uint64_t (**)(_QWORD *))(a1 + 48);
  v23 = *(_QWORD *)(a1 + 56);
  v24 = (_QWORD *)(a4 + (v23 >> 1));
  if ((v23 & 1) != 0)
    v22 = *(uint64_t (**)(_QWORD *))(*v24 + v22);
  v25 = v22(v24);
  if ((_DWORD)v21 == (_DWORD)v25)
    goto LABEL_18;
  v26 = v25;
  v27 = *(unsigned __int8 *)(a1 + 80);
  if ((_DWORD)v21 != v27)
  {
    if ((_DWORD)v25 != v27)
      goto LABEL_34;
    if (v45[0] == 3)
    {
      v29 = *(float *)&v44;
      if (!v45[2])
        v29 = (float)(int)v44;
      v41 = 100.0 - v29;
      v42 = 3;
      v43 = 1;
    }
    else
    {
      v48 = 100;
      v49 = 3;
      v50 = 0;
      WebCore::makeCalculated((uint64_t)&v41, 45, (unsigned __int8 *)&v48, (unsigned __int8 *)&v44);
      if (v49 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v48);
      }
      if (v45[0] == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v44);
      }
    }
    *(_WORD *)v45 = v42;
    if (v42 - 2 >= 9)
    {
      if (v42 > 0xDu)
        goto LABEL_18;
      if (((1 << v42) & 0x3003) != 0)
      {
        v44 = 0;
        goto LABEL_18;
      }
      if (v42 != 11)
        goto LABEL_18;
    }
    else
    {
      v45[2] = v43;
      if (v43)
      {
        v44 = LODWORD(v41);
LABEL_18:
        v26 = v21;
        goto LABEL_34;
      }
    }
    v44 = LODWORD(v41);
    goto LABEL_18;
  }
  if (v47[0] == 3)
  {
    v28 = *(float *)&v46;
    if (!v47[2])
      v28 = (float)(int)v46;
    v41 = 100.0 - v28;
    v42 = 3;
    v43 = 1;
  }
  else
  {
    v48 = 100;
    v49 = 3;
    v50 = 0;
    WebCore::makeCalculated((uint64_t)&v41, 45, (unsigned __int8 *)&v48, (unsigned __int8 *)&v46);
    if (v49 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v48);
    }
    if (v47[0] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v46);
    }
  }
  *(_WORD *)v47 = v42;
  if (v42 - 2 < 9)
  {
    v47[2] = v43;
    if (v43)
    {
      v46 = LODWORD(v41);
      goto LABEL_34;
    }
LABEL_68:
    v46 = LODWORD(v41);
    goto LABEL_34;
  }
  if (v42 > 0xDu)
    goto LABEL_34;
  if (((1 << v42) & 0x3003) != 0)
  {
    v46 = 0;
    goto LABEL_34;
  }
  if (v42 == 11)
    goto LABEL_68;
LABEL_34:
  v30 = *(void (**)(_QWORD *, uint64_t))(a1 + 64);
  v31 = *(_QWORD *)(a1 + 72);
  v32 = (_QWORD *)(a2 + (v31 >> 1));
  if ((v31 & 1) != 0)
    v30 = *(void (**)(_QWORD *, uint64_t))(*v32 + v30);
  v30(v32, v26);
  v35 = *(uint64_t (**)(_QWORD *, unsigned int *))(a1 + 32);
  v34 = *(_QWORD *)(a1 + 40);
  v36 = (_QWORD *)(a2 + (v34 >> 1));
  if ((v34 & 1) != 0)
    v35 = *(uint64_t (**)(_QWORD *, unsigned int *))(*v36 + v35);
  WebCore::blend((unsigned __int8 *)&v46, (unsigned __int8 *)&v44, a5, (uint64_t)&v48, v33);
  v38 = 0;
  v40 = 0;
  v39 = v49;
  if (v49 - 2 >= 9)
  {
    if (v49 != 11)
      goto LABEL_41;
  }
  else
  {
    v40 = v50;
    if (v50)
    {
      v38 = v48;
      goto LABEL_41;
    }
  }
  v38 = v48;
LABEL_41:
  result = (int *)v35(v36, &v38);
  if (v39 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v38);
  }
  if (v45[0] == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v44);
  }
  if (v47[0] == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v46);
  }
  return result;
}

uint64_t WebCore::FillLayerAnimationPropertyWrapperBase::canInterpolate(WebCore::FillLayerAnimationPropertyWrapperBase *this, const WebCore::FillLayer *a2, const WebCore::FillLayer *a3)
{
  return 1;
}

uint64_t WebCore::FillLayerPropertyWrapperGetter<WebCore::LengthSize const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  uint64_t (*v10)(_QWORD *);
  uint64_t v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  int v14;
  unsigned __int8 *v15;
  float v16;
  float v17;
  int v18;
  float v19;
  float v20;

  if (a2 == a3)
    return 1;
  result = 0;
  if (!a2 || !a3)
    return result;
  v6 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
  v9 = (unsigned __int8 *)v6(v8);
  v10 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = (_QWORD *)(a3 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *))(*v12 + v10);
  v13 = (unsigned __int8 *)v10(v12);
  v14 = v9[4];
  if (v14 != v13[4])
    return 0;
  v15 = v13;
  if ((v9[5] != 0) != (v13[5] != 0))
    return 0;
  if (v14 == 13)
    goto LABEL_17;
  if (v14 == 11)
  {
    if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)v9, (const WebCore::Length *)v13) & 1) != 0)
      goto LABEL_17;
    return 0;
  }
  v16 = *(float *)v9;
  if (!v9[6])
    v16 = (float)*(int *)v9;
  v17 = *(float *)v13;
  if (!v13[6])
    v17 = (float)*(int *)v13;
  if (v16 != v17)
    return 0;
LABEL_17:
  v18 = v9[12];
  if (v18 != v15[12] || (v9[13] != 0) != (v15[13] != 0))
    return 0;
  if (v18 == 13)
    return 1;
  if (v18 == 11)
    return WebCore::Length::isCalculatedEqual((WebCore::Length *)(v9 + 8), (const WebCore::Length *)(v15 + 8));
  v19 = *((float *)v9 + 2);
  if (!v9[14])
    v19 = (float)*((int *)v9 + 2);
  v20 = *((float *)v15 + 2);
  if (!v15[14])
    v20 = (float)SLODWORD(v20);
  return v19 == v20;
}

int *WebCore::FillLayerPropertyWrapper<WebCore::LengthSize>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, unsigned int *);
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  __n128 v19;
  __n128 v20;
  int v21;
  BOOL v22;
  float *v23;
  int v24;
  BOOL v25;
  int *result;
  unsigned int v27;
  _BYTE v28[3];
  unsigned int v29;
  _BYTE v30[3];
  float v31;
  __int16 v32;
  char v33;

  v9 = (uint64_t (*)(_QWORD *, unsigned int *))a1[4];
  v8 = a1[5];
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *, unsigned int *))(*v10 + v9);
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = (unsigned __int8 *)v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = (unsigned __int8 *)v15(v17);
  WebCore::blend(v14, v18, a5, (uint64_t)&v31, v19);
  if (v32 == 11 || v32 == 13)
    goto LABEL_24;
  if (v33)
  {
    v20.n128_f32[0] = v31;
    if (v31 < 0.0)
      goto LABEL_11;
LABEL_24:
    v27 = 0;
    v28[2] = 0;
    *(_WORD *)v28 = v32;
    if (v32 - 2 >= 9)
    {
      if (v32 != 11)
        goto LABEL_27;
    }
    else
    {
      v28[2] = v33;
      if (v33)
      {
        v20.n128_f32[0] = v31;
        v27 = LODWORD(v31);
        goto LABEL_27;
      }
    }
    v27 = LODWORD(v31);
    goto LABEL_27;
  }
  if ((LODWORD(v31) & 0x80000000) == 0)
    goto LABEL_24;
LABEL_11:
  v21 = v14[4];
  if (v14[4])
    v22 = v21 == 11;
  else
    v22 = 1;
  if (v22)
    goto LABEL_18;
  if (!v14[6])
  {
    if (*(_DWORD *)v14)
      goto LABEL_18;
    goto LABEL_17;
  }
  v20.n128_u32[0] = *(_DWORD *)v14;
  if (*(float *)v14 == 0.0)
LABEL_17:
    v21 = v18[4];
LABEL_18:
  v27 = 0;
  if (v21 == 11)
  {
    *(_WORD *)v28 = 4;
    v28[2] = 0;
  }
  else
  {
    v28[0] = v21;
    *(_WORD *)&v28[1] = 0;
  }
LABEL_27:
  v23 = (float *)(v14 + 8);
  WebCore::blend(v14 + 8, v18 + 8, a5, (uint64_t)&v31, v20);
  if (v32 != 11 && v32 != 13)
  {
    if (v33)
    {
      if (v31 < 0.0)
        goto LABEL_31;
    }
    else if ((LODWORD(v31) & 0x80000000) != 0)
    {
LABEL_31:
      v24 = v14[12];
      if (v14[12])
        v25 = v24 == 11;
      else
        v25 = 1;
      if (v25)
        goto LABEL_38;
      if (v14[14])
      {
        if (*v23 != 0.0)
        {
LABEL_38:
          v29 = 0;
          if (v24 == 11)
          {
            *(_WORD *)v30 = 4;
            v30[2] = 0;
          }
          else
          {
            v30[0] = v24;
            *(_WORD *)&v30[1] = 0;
          }
          goto LABEL_49;
        }
      }
      else if (*(_DWORD *)v23)
      {
        goto LABEL_38;
      }
      v24 = v18[12];
      goto LABEL_38;
    }
  }
  v29 = 0;
  v30[2] = 0;
  *(_WORD *)v30 = v32;
  if (v32 - 2 >= 9)
  {
    if (v32 != 11)
      goto LABEL_49;
  }
  else
  {
    v30[2] = v33;
    if (v33)
    {
      v29 = LODWORD(v31);
      goto LABEL_49;
    }
  }
  v29 = LODWORD(v31);
LABEL_49:
  result = (int *)v9(v10, &v27);
  if (v30[0] == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v29);
  }
  if (v28[0] == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v27);
  }
  return result;
}

uint64_t WebCore::FillLayerPropertyWrapper<WebCore::LengthSize>::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t result;
  BOOL v19;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  v13 = *(unsigned __int8 *)(v8 + 4);
  v14 = *(unsigned __int8 *)(v8 + 12);
  v15 = *(unsigned __int8 *)(v12 + 4);
  v16 = *(unsigned __int8 *)(v12 + 12);
  if (v13 != v15)
  {
    if (v13 > 0xB || ((1 << v13) & 0x81C) == 0)
      return 0;
    v19 = v15 > 0xB || ((1 << v15) & 0x81C) == 0;
    if (v19 || (v13 != 2) == (v15 == 2))
      return 0;
  }
  result = 1;
  if (v14 != v16)
  {
    if (v14 <= 0xB && ((1 << v14) & 0x81C) != 0 && v16 <= 0xB && ((1 << v16) & 0x81C) != 0)
      return (v14 != 2) ^ (v16 == 2);
    return 0;
  }
  return result;
}

uint64_t WebCore::FillLayerStyleImagePropertyWrapper::equals(WebCore::FillLayerStyleImagePropertyWrapper *this, const WebCore::FillLayer *a2, const WebCore::FillLayer *a3)
{
  uint64_t result;
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD *);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;

  if (a2 == a3)
    return 1;
  result = 0;
  if (a2 && a3)
  {
    v6 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
    v7 = *((_QWORD *)this + 3);
    v8 = (_QWORD *)((char *)a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
    v9 = v6(v8);
    v10 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
    v11 = *((_QWORD *)this + 3);
    v12 = (_QWORD *)((char *)a3 + (v11 >> 1));
    if ((v11 & 1) != 0)
      v10 = *(uint64_t (**)(_QWORD *))(*v12 + v10);
    v13 = v10(v12);
    if (v9 == v13)
      return 1;
    if (v9)
      v14 = v13 == 0;
    else
      v14 = 1;
    if (v14)
      return 0;
    else
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v13);
  }
  return result;
}

_DWORD *WebCore::FillLayerRefCountedPropertyWrapper<WebCore::StyleImage>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5)
{
  uint64_t v8;
  void (*v9)(_QWORD *, _DWORD **);
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _DWORD *result;
  _DWORD *v20;

  v9 = (void (*)(_QWORD *, _DWORD **))a1[4];
  v8 = a1[5];
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(void (**)(_QWORD *, _DWORD **))(*v10 + v9);
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = (_DWORD *)v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = v15(v17);
  WebCore::blendFunc((uint64_t)&v20, v14, v18, a5);
  v9(v10, &v20);
  result = v20;
  v20 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::FillLayerStyleImagePropertyWrapper::canInterpolate(WebCore::FillLayerStyleImagePropertyWrapper *this, const WebCore::FillLayer *a2, const WebCore::FillLayer *a3)
{
  uint64_t result;
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (*((_WORD *)this + 4) == 167)
    return 0;
  v6 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = (_QWORD *)((char *)a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
  result = v6(v8);
  if (result)
  {
    v9 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
    v10 = *((_QWORD *)this + 3);
    v11 = (_QWORD *)((char *)a3 + (v10 >> 1));
    if ((v10 & 1) != 0)
      v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
    return v9(v11) != 0;
  }
  return result;
}

uint64_t WebCore::blendFunc(uint64_t result, _DWORD *a2, uint64_t a3, double *a4)
{
  _QWORD *v4;
  uint64_t v7;
  const WTF::StringImpl *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  const WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  int v31;
  int v32;
  int v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  WTF *v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  WTF *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  unsigned int **v64;
  unsigned int **v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  uint64_t v71;
  uint64_t v72;
  WTF *v73;
  BOOL v74;
  BOOL v75;
  uint64_t v76;
  int v77;
  BOOL v78;
  uint64_t v79;
  int v80;
  WTF *v81;
  WTF *v82;
  unsigned int *v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  WTF *v87;
  WTF *v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int **v93;
  unsigned int **v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int **v99;
  uint64_t v100;
  WTF *v101;
  uint64_t v102;

  v4 = (_QWORD *)result;
  if (*a4 == 0.0)
  {
    if (a2)
      ++a2[2];
    *(_QWORD *)result = a2;
    return result;
  }
  if (*a4 == 1.0
    || ((v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 184))(a2),
         result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 184))(a3),
         a3 = result,
         v7)
      ? (v9 = result == 0)
      : (v9 = 1),
        v9))
  {
    if (!a3)
    {
LABEL_10:
      *v4 = a3;
      return result;
    }
LABEL_9:
    ++*(_DWORD *)(a3 + 8);
    goto LABEL_10;
  }
  v10 = *(unsigned __int8 *)(v7 + 24);
  if (v10 == 3)
    v11 = v7;
  else
    v11 = 0;
  v12 = *(unsigned __int8 *)(result + 24);
  if (v12 == 3)
    v13 = result;
  else
    v13 = 0;
  if (v11)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (!v14)
  {
    v29 = *(_DWORD **)(v11 + 80);
    v30 = *(_DWORD **)(v13 + 80);
    if (v29 == v30)
    {
      if (v29)
        goto LABEL_64;
    }
    else
    {
      if (v29)
        v74 = v30 == 0;
      else
        v74 = 1;
      if (!v74)
      {
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v29 + 16))(*(_QWORD *)(v11 + 80));
        if ((_DWORD)result)
        {
          v29 = *(_DWORD **)(v11 + 80);
          if (v29)
          {
LABEL_64:
            v31 = v29[2];
            v32 = v31 + 1;
            v29[2] = v31 + 1;
            v33 = *((unsigned __int8 *)v29 + 24);
            if (v31)
            {
              v29[2] = v31;
              if (!v33)
                goto LABEL_66;
            }
            else
            {
              result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
              if (!v33)
              {
                v29 = *(_DWORD **)(v11 + 80);
                if (!v29)
                {
LABEL_67:
                  WebCore::FilterOperations::blend((unsigned int *)(v11 + 88), (unsigned int *)(v13 + 88), (uint64_t)a4, (uint64_t)&v101);
                  v34 = v101;
                  v35 = v102;
                  v101 = 0;
                  v102 = 0;
                  v36 = WTF::fastMalloc((WTF *)0x78);
                  *(_DWORD *)(v36 + 8) = 1;
                  *(_QWORD *)(v36 + 16) = 0;
                  *(_BYTE *)(v36 + 24) = 3;
                  *(_DWORD *)(v36 + 28) = 0;
                  *(_DWORD *)(v36 + 32) = 0;
                  *(_BYTE *)(v36 + 36) = 1;
                  *(_QWORD *)(v36 + 40) = 0;
                  *(_QWORD *)(v36 + 48) = 0;
                  *(_QWORD *)v36 = off_1E3441FE0;
                  *(_QWORD *)(v36 + 56) = 0;
                  *(_QWORD *)(v36 + 64) = &unk_1E34420F8;
                  *(_QWORD *)(v36 + 72) = 0;
                  *(_QWORD *)(v36 + 80) = v29;
                  *(_QWORD *)(v36 + 88) = v34;
                  *(_QWORD *)(v36 + 96) = v35;
                  *(_QWORD *)(v36 + 104) = 0;
                  *(_BYTE *)(v36 + 112) = 0;
                  *v4 = v36;
                  if (HIDWORD(v102))
                  {
                    v54 = v101;
                    v55 = (WTF *)((char *)v101 + 8 * HIDWORD(v102));
                    do
                    {
                      v56 = *(unsigned int **)v54;
                      *(_QWORD *)v54 = 0;
                      if (v56)
                      {
                        v57 = v56 + 2;
                        do
                        {
                          v58 = __ldaxr(v57);
                          v59 = v58 - 1;
                        }
                        while (__stlxr(v59, v57));
                        if (!v59)
                        {
                          atomic_store(1u, v56 + 2);
                          (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 8))(v56);
                        }
                      }
                      v54 = (WTF *)((char *)v54 + 8);
                    }
                    while (v54 != v55);
                  }
                  result = (uint64_t)v101;
                  if (v101)
                  {
                    v101 = 0;
                    LODWORD(v102) = 0;
                    return WTF::fastFree((WTF *)result, v37);
                  }
                  return result;
                }
                v32 = v29[2] + 1;
LABEL_66:
                v29[2] = v32;
                goto LABEL_67;
              }
            }
          }
        }
      }
    }
LABEL_87:
    v48 = *(unsigned __int8 *)(v7 + 24);
    if (*(_BYTE *)(v7 + 24))
      v49 = 0;
    else
      v49 = v7;
    if (*(_BYTE *)(a3 + 24))
      v50 = 0;
    else
      v50 = a3;
    if (!(v48 | *(unsigned __int8 *)(a3 + 24)))
    {
      v51 = *a4;
      if (*a4 == 0.0)
      {
        ++*(_DWORD *)(v49 + 8);
        *v4 = v49;
      }
      else if (v51 != 1.0
             && (v52 = *(_QWORD *)(v49 + 48)) != 0
             && *(_QWORD *)(v52 + 8)
             && (v53 = *(_QWORD *)(v50 + 48)) != 0
             && *(_QWORD *)(v53 + 8))
      {
        ++*(_DWORD *)(v49 + 8);
        ++*(_DWORD *)(v50 + 8);
        result = WTF::fastMalloc((WTF *)0x88);
        *(_DWORD *)(result + 8) = 1;
        *(_QWORD *)(result + 16) = 0;
        *(_BYTE *)(result + 24) = 5;
        *(_DWORD *)(result + 28) = 0;
        *(_DWORD *)(result + 32) = 0;
        *(_BYTE *)(result + 36) = 1;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)result = off_1E3441D50;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 64) = &unk_1E3441E68;
        *(_QWORD *)(result + 72) = 0;
        *(_QWORD *)(result + 80) = v49;
        *(_QWORD *)(result + 88) = v50;
        *(double *)(result + 96) = v51;
        *(_BYTE *)(result + 104) = 0;
        *(_QWORD *)(result + 112) = 0;
        *(_QWORD *)(result + 120) = 0;
        *(_BYTE *)(result + 128) = 0;
        *v4 = result;
      }
      else
      {
        ++*(_DWORD *)(v50 + 8);
        *v4 = v50;
      }
      return result;
    }
    goto LABEL_9;
  }
  if (v10 == 5)
    v15 = v7;
  else
    v15 = 0;
  if (v12 != 5)
    result = 0;
  if (v15)
    v16 = result == 0;
  else
    v16 = 1;
  if (!v16)
  {
    v38 = *(_QWORD *)(v15 + 80);
    v39 = *(_QWORD *)(result + 80);
    if (v38 == v39
      || (v38 ? (v75 = v39 == 0) : (v75 = 1),
          !v75
       && (v76 = result,
           v77 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v38 + 16))(*(_QWORD *)(v15 + 80)),
           result = v76,
           v77)))
    {
      v40 = *(_QWORD *)(v15 + 88);
      v41 = *(_QWORD *)(result + 88);
      if (v40 == v41
        || (v40 ? (v78 = v41 == 0) : (v78 = 1),
            !v78
         && (v79 = result,
             v80 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v40 + 16))(*(_QWORD *)(v15 + 88)),
             result = v79,
             v80)))
      {
        result = WebCore::StyleCrossfadeImage::blend(result, v15, (uint64_t)a4, (uint64_t *)&v101);
        if (v101)
        {
          *v4 = v101;
          return result;
        }
      }
    }
    goto LABEL_87;
  }
  if (v12)
    v17 = 0;
  else
    v17 = a3;
  if (v11)
    v18 = v17 == 0;
  else
    v18 = 1;
  if (!v18)
  {
    v21 = *(_QWORD *)(v11 + 80);
    if (!v21)
      goto LABEL_87;
    v22 = *(_DWORD *)(v21 + 8);
    *(_DWORD *)(v21 + 8) = v22 + 1;
    if (!*(_BYTE *)(v21 + 24))
    {
      if (v21 != v17)
      {
        if (*(float *)(v17 + 44) != *(float *)(v21 + 44))
          goto LABEL_85;
        v42 = *(_QWORD *)(v17 + 32);
        v43 = *(_QWORD *)(v21 + 32);
        if (v42 != v43)
        {
          result = WTF::equal(*(WTF **)(v42 + 8), *(const WTF::StringImpl **)(v43 + 8), v8);
          if (!(_DWORD)result
            || (result = WTF::equal(*(WTF **)(v42 + 16), *(const WTF::StringImpl **)(v43 + 16), v44), (result & 1) == 0))
          {
            v45 = *(_QWORD *)(v17 + 48);
            if (!v45)
              goto LABEL_85;
            v46 = *(_QWORD *)(v45 + 8);
            if (!v46)
              goto LABEL_85;
            v47 = *(_QWORD *)(v21 + 48);
            if (!v47 || v46 != *(_QWORD *)(v47 + 8))
              goto LABEL_85;
          }
        }
      }
      v99 = 0;
      v100 = 0;
      WebCore::FilterOperations::blend((unsigned int *)(v11 + 88), (unsigned int *)&v99, (uint64_t)a4, (uint64_t)&v101);
      v60 = v101;
      v61 = v102;
      v101 = 0;
      v102 = 0;
      v62 = WTF::fastMalloc((WTF *)0x78);
      *(_DWORD *)(v62 + 8) = 1;
      *(_QWORD *)(v62 + 16) = 0;
      *(_BYTE *)(v62 + 24) = 3;
      *(_DWORD *)(v62 + 28) = 0;
      *(_DWORD *)(v62 + 32) = 0;
      *(_BYTE *)(v62 + 36) = 1;
      *(_QWORD *)(v62 + 40) = 0;
      *(_QWORD *)(v62 + 48) = 0;
      *(_QWORD *)v62 = off_1E3441FE0;
      *(_QWORD *)(v62 + 56) = 0;
      *(_QWORD *)(v62 + 64) = &unk_1E34420F8;
      *(_QWORD *)(v62 + 72) = 0;
      *(_QWORD *)(v62 + 80) = v21;
      *(_QWORD *)(v62 + 88) = v60;
      *(_QWORD *)(v62 + 96) = v61;
      *(_QWORD *)(v62 + 104) = 0;
      *(_BYTE *)(v62 + 112) = 0;
      *v4 = v62;
      if (HIDWORD(v102))
      {
        v81 = v101;
        v82 = (WTF *)((char *)v101 + 8 * HIDWORD(v102));
        do
        {
          v83 = *(unsigned int **)v81;
          *(_QWORD *)v81 = 0;
          if (v83)
          {
            v84 = v83 + 2;
            do
            {
              v85 = __ldaxr(v84);
              v86 = v85 - 1;
            }
            while (__stlxr(v86, v84));
            if (!v86)
            {
              atomic_store(1u, v83 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v83 + 8))(v83);
            }
          }
          v81 = (WTF *)((char *)v81 + 8);
        }
        while (v81 != v82);
      }
      v63 = v101;
      if (v101)
      {
        v101 = 0;
        LODWORD(v102) = 0;
        WTF::fastFree(v63, v37);
      }
      if (HIDWORD(v100))
      {
        v64 = v99;
        v65 = &v99[HIDWORD(v100)];
        do
        {
          v66 = *v64;
          *v64 = 0;
          if (v66)
          {
            v67 = v66 + 2;
            do
            {
              v68 = __ldaxr(v67);
              v69 = v68 - 1;
            }
            while (__stlxr(v69, v67));
            if (!v69)
            {
              atomic_store(1u, v66 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v66 + 8))(v66);
            }
          }
          ++v64;
        }
        while (v64 != v65);
      }
      goto LABEL_132;
    }
LABEL_177:
    if (v22)
      goto LABEL_86;
    goto LABEL_178;
  }
  if (*(_BYTE *)(v7 + 24))
    v19 = 0;
  else
    v19 = v7;
  if (v19)
    v20 = v13 == 0;
  else
    v20 = 1;
  if (v20)
    goto LABEL_87;
  v21 = *(_QWORD *)(v13 + 80);
  if (!v21)
    goto LABEL_87;
  v22 = *(_DWORD *)(v21 + 8);
  *(_DWORD *)(v21 + 8) = v22 + 1;
  if (*(_BYTE *)(v21 + 24))
    goto LABEL_177;
  if (v21 != v19)
  {
    if (*(float *)(v19 + 44) != *(float *)(v21 + 44)
      || (v23 = *(_QWORD *)(v19 + 32), v24 = *(_QWORD *)(v21 + 32), v23 != v24)
      && ((result = WTF::equal(*(WTF **)(v23 + 8), *(const WTF::StringImpl **)(v24 + 8), v8), !(_DWORD)result)
       || (result = WTF::equal(*(WTF **)(v23 + 16), *(const WTF::StringImpl **)(v24 + 16), v25), (result & 1) == 0))
      && ((v26 = *(_QWORD *)(v19 + 48)) == 0
       || (v27 = *(_QWORD *)(v26 + 8)) == 0
       || (v28 = *(_QWORD *)(v21 + 48)) == 0
       || v27 != *(_QWORD *)(v28 + 8)))
    {
LABEL_85:
      v22 = *(_DWORD *)(v21 + 8) - 1;
      if (*(_DWORD *)(v21 + 8) != 1)
      {
LABEL_86:
        *(_DWORD *)(v21 + 8) = v22;
        goto LABEL_87;
      }
LABEL_178:
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      goto LABEL_87;
    }
  }
  v99 = 0;
  v100 = 0;
  WebCore::FilterOperations::blend((unsigned int *)&v99, (unsigned int *)(v13 + 88), (uint64_t)a4, (uint64_t)&v101);
  v70 = v101;
  v71 = v102;
  v101 = 0;
  v102 = 0;
  v72 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v72 + 8) = 1;
  *(_QWORD *)(v72 + 16) = 0;
  *(_BYTE *)(v72 + 24) = 3;
  *(_DWORD *)(v72 + 28) = 0;
  *(_DWORD *)(v72 + 32) = 0;
  *(_BYTE *)(v72 + 36) = 1;
  *(_QWORD *)(v72 + 40) = 0;
  *(_QWORD *)(v72 + 48) = 0;
  *(_QWORD *)v72 = off_1E3441FE0;
  *(_QWORD *)(v72 + 56) = 0;
  *(_QWORD *)(v72 + 64) = &unk_1E34420F8;
  *(_QWORD *)(v72 + 72) = 0;
  *(_QWORD *)(v72 + 80) = v21;
  *(_QWORD *)(v72 + 88) = v70;
  *(_QWORD *)(v72 + 96) = v71;
  *(_QWORD *)(v72 + 104) = 0;
  *(_BYTE *)(v72 + 112) = 0;
  *v4 = v72;
  if (HIDWORD(v102))
  {
    v87 = v101;
    v88 = (WTF *)((char *)v101 + 8 * HIDWORD(v102));
    do
    {
      v89 = *(unsigned int **)v87;
      *(_QWORD *)v87 = 0;
      if (v89)
      {
        v90 = v89 + 2;
        do
        {
          v91 = __ldaxr(v90);
          v92 = v91 - 1;
        }
        while (__stlxr(v92, v90));
        if (!v92)
        {
          atomic_store(1u, v89 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v89 + 8))(v89);
        }
      }
      v87 = (WTF *)((char *)v87 + 8);
    }
    while (v87 != v88);
  }
  v73 = v101;
  if (v101)
  {
    v101 = 0;
    LODWORD(v102) = 0;
    WTF::fastFree(v73, v37);
  }
  if (HIDWORD(v100))
  {
    v93 = v99;
    v94 = &v99[HIDWORD(v100)];
    do
    {
      v95 = *v93;
      *v93 = 0;
      if (v95)
      {
        v96 = v95 + 2;
        do
        {
          v97 = __ldaxr(v96);
          v98 = v97 - 1;
        }
        while (__stlxr(v98, v96));
        if (!v98)
        {
          atomic_store(1u, v95 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v95 + 8))(v95);
        }
      }
      ++v93;
    }
    while (v93 != v94);
  }
LABEL_132:
  result = (uint64_t)v99;
  if (v99)
  {
    v99 = 0;
    LODWORD(v100) = 0;
    return WTF::fastFree((WTF *)result, v37);
  }
  return result;
}

BOOL WebCore::DiscreteFillLayerPropertyWrapper<WebCore::FillBox>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscreteFillLayerPropertyWrapper<WebCore::FillBox>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::DiscreteFillLayerPropertyWrapper<WebCore::FillBox>::canInterpolate()
{
  return 0;
}

BOOL WebCore::DiscreteFillLayerPropertyWrapper<WebCore::CompositeOperator>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscreteFillLayerPropertyWrapper<WebCore::CompositeOperator>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::DiscreteFillLayerPropertyWrapper<WebCore::CompositeOperator>::canInterpolate()
{
  return 0;
}

BOOL WebCore::DiscreteFillLayerPropertyWrapper<WebCore::MaskMode>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscreteFillLayerPropertyWrapper<WebCore::MaskMode>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::DiscreteFillLayerPropertyWrapper<WebCore::MaskMode>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::StyleImagePropertyWrapper::equals(WebCore::StyleImagePropertyWrapper *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v14;

  if (a2 == a3)
    return 1;
  v5 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3);
  v7 = (_QWORD *)((char *)a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v10 = *((_QWORD *)this + 3);
  v11 = (_QWORD *)((char *)a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  if (v8 == v12)
    return 1;
  if (v8)
    v14 = v12 == 0;
  else
    v14 = 1;
  if (v14)
    return 0;
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v12);
}

uint64_t WebCore::StyleImagePropertyWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  result = v5(v7);
  if (result)
  {
    v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
    v10 = *(_QWORD *)(a1 + 24);
    v11 = (_QWORD *)(a3 + (v10 >> 1));
    if ((v10 & 1) != 0)
      v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
    return v9(v11) != 0;
  }
  return result;
}

_DWORD *WebCore::RefCountedPropertyWrapper<WebCore::StyleImage>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5)
{
  uint64_t v8;
  void (*v9)(_QWORD *, _DWORD **);
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _DWORD *result;
  _DWORD *v20;

  v9 = (void (*)(_QWORD *, _DWORD **))a1[4];
  v8 = a1[5];
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(void (**)(_QWORD *, _DWORD **))(*v10 + v9);
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = (_DWORD *)v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = v15(v17);
  WebCore::blendFunc((uint64_t)&v20, v14, v18, a5);
  v9(v10, &v20);
  result = v20;
  v20 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

BOOL WebCore::LengthBoxPropertyWrapper::requiresBlendingForAccumulativeIteration(WebCore::LengthBoxPropertyWrapper *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v17;
  int v18;
  BOOL v19;
  int v21;
  int v22;
  BOOL v23;
  int v25;
  int v26;

  v5 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3);
  v7 = (_QWORD *)((char *)a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (unsigned __int8 *)v5(v7);
  v9 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v10 = *((_QWORD *)this + 3);
  v11 = (_QWORD *)((char *)a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = (unsigned __int8 *)v9(v11);
  v13 = v8[4];
  v14 = v12[4];
  if (v13 != 11 && v14 != 11 && v13 == v14)
    return 0;
  v17 = v8[12];
  v18 = v12[12];
  v19 = v17 == 11 || v18 == 11;
  if (!v19 && v17 == v18)
    return 0;
  v21 = v8[20];
  v22 = v12[20];
  v23 = v21 == 11 || v22 == 11;
  if (!v23 && v21 == v22)
    return 0;
  v25 = v8[28];
  v26 = v12[28];
  return v25 == 11 || v26 == 11 || v25 != v26;
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::LengthBox const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (unsigned __int8 *)v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = (unsigned __int8 *)v9(v11);
  return WebCore::operator==(v8, v12);
}

uint64_t WebCore::LengthBoxPropertyWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  const WebCore::Length *v6;
  uint64_t (*v7)(_QWORD *);
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;

  v5 = *(_DWORD *)(a1 + 48);
  if ((v5 & 2) != 0
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 200) + 4) != 0) != (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 24) + 200) + 4) != 0))
  {
    return 0;
  }
  if ((v5 & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 200) + 5) != 0) != (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 24) + 200) + 5) != 0))
      return 0;
    v6 = (const WebCore::Length *)(v5 & (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24)
                                                                               + 200)
                                                                   + 5) == 0));
  }
  else
  {
    v6 = (const WebCore::Length *)(v5 & 1);
  }
  v7 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v7 = *(uint64_t (**)(_QWORD *))(*v9 + v7);
  v10 = (unsigned __int8 *)v7(v9);
  v11 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = (unsigned __int8 *)v11(v13);
  if (WebCore::canInterpolateLengths((WebCore *)v10[4], (const WebCore::Length *)v14[4], v6)
    && WebCore::canInterpolateLengths((WebCore *)v10[12], (const WebCore::Length *)v14[12], v6)
    && WebCore::canInterpolateLengths((WebCore *)v10[20], (const WebCore::Length *)v14[20], v6))
  {
    return WebCore::canInterpolateLengths((WebCore *)v10[28], (const WebCore::Length *)v14[28], v6);
  }
  return 0;
}

int *WebCore::LengthBoxPropertyWrapper::blend(uint64_t a1, WebCore::RenderStyle *a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  int v11;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, unsigned int *);
  _QWORD *v18;
  uint64_t (*v19)(_QWORD *, __n128);
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  const WebCore::LengthBox *v23;
  int *result;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD *, unsigned int *);
  _QWORD *v28;
  uint64_t (*v29)(_QWORD *);
  uint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  uint64_t (*v33)(_QWORD *);
  uint64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  unsigned int v41;
  unsigned __int8 v42;
  char v43;
  char v44;
  unsigned int v45;
  unsigned __int8 v46;
  char v47;
  char v48;
  unsigned int v49;
  unsigned __int8 v50;
  char v51;
  char v52;
  unsigned int v53;
  unsigned __int8 v54;
  char v55;
  char v56;
  unsigned int v57;
  unsigned __int8 v58;
  char v59;
  char v60;
  unsigned int v61;
  unsigned __int8 v62;
  char v63;
  char v64;
  unsigned int v65;
  unsigned __int8 v66;
  char v67;
  char v68;
  unsigned int v69;
  unsigned __int8 v70;
  char v71;
  char v72;

  v11 = *(_DWORD *)(a1 + 48);
  if ((v11 & 2) != 0)
  {
    if (*(_BYTE *)(a5 + 8))
      v12 = *(double *)a5 == 0.0;
    else
      v12 = 1;
    if (v12)
      v13 = a3;
    else
      v13 = a4;
    WebCore::RenderStyle::setBorderImageSliceFill(a2, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 24) + 200) + 4));
    v11 = *(_DWORD *)(a1 + 48);
  }
  if ((v11 & 8) != 0)
  {
    if (*(_BYTE *)(a5 + 8))
      v14 = *(double *)a5 == 0.0;
    else
      v14 = 1;
    if (v14)
      v15 = a3;
    else
      v15 = a4;
    WebCore::RenderStyle::setBorderImageWidthOverridesBorderWidths(a2, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 24) + 200) + 5));
  }
  if (*(_BYTE *)(a5 + 8))
  {
    v17 = *(uint64_t (**)(_QWORD *, unsigned int *))(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    v18 = (_QWORD *)((char *)a2 + (v16 >> 1));
    if ((v16 & 1) != 0)
      v17 = *(uint64_t (**)(_QWORD *, unsigned int *))(*v18 + v17);
    v19 = *(uint64_t (**)(_QWORD *, __n128))(a1 + 16);
    v20 = *(_QWORD *)(a1 + 24);
    v21 = v20 >> 1;
    if (*(double *)a5 == 0.0)
    {
      v22 = (_QWORD *)(a3 + v21);
      if ((v20 & 1) == 0)
        goto LABEL_23;
    }
    else
    {
      v22 = (_QWORD *)(a4 + v21);
      if ((v20 & 1) == 0)
      {
LABEL_23:
        a6.n128_u64[0] = *(_QWORD *)a5;
        v23 = (const WebCore::LengthBox *)v19(v22, a6);
        WebCore::LengthBox::LengthBox((WebCore::LengthBox *)&v41, v23);
        result = (int *)v17(v18, &v41);
        goto LABEL_43;
      }
    }
    v19 = *(uint64_t (**)(_QWORD *, __n128))(*v22 + v19);
    goto LABEL_23;
  }
  v25 = (*(_BYTE *)(a1 + 48) & 4) == 0;
  v27 = *(uint64_t (**)(_QWORD *, unsigned int *))(a1 + 32);
  v26 = *(_QWORD *)(a1 + 40);
  v28 = (_QWORD *)((char *)a2 + (v26 >> 1));
  if ((v26 & 1) != 0)
    v27 = *(uint64_t (**)(_QWORD *, unsigned int *))(*v28 + v27);
  v29 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v30 = *(_QWORD *)(a1 + 24);
  v31 = (_QWORD *)(a3 + (v30 >> 1));
  if ((v30 & 1) != 0)
    v29 = *(uint64_t (**)(_QWORD *))(*v31 + v29);
  v32 = (unsigned __int8 *)v29(v31);
  v33 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v34 = *(_QWORD *)(a1 + 24);
  v35 = (_QWORD *)(a4 + (v34 >> 1));
  if ((v34 & 1) != 0)
    v33 = *(uint64_t (**)(_QWORD *))(*v35 + v33);
  v36 = (unsigned __int8 *)v33(v35);
  WebCore::blend(v32, v36, a5, v25, (uint64_t)&v69, v37);
  WebCore::blend(v32 + 8, v36 + 8, a5, v25, (uint64_t)&v65, v38);
  WebCore::blend(v32 + 16, v36 + 16, a5, v25, (uint64_t)&v61, v39);
  WebCore::blend(v32 + 24, v36 + 24, a5, v25, (uint64_t)&v57, v40);
  v41 = 0;
  v44 = 0;
  v42 = v70;
  v43 = v71;
  if (v70 - 2 >= 9)
  {
    if (v70 != 11)
      goto LABEL_33;
  }
  else
  {
    v44 = v72;
    if (v72)
    {
      v41 = v69;
      goto LABEL_33;
    }
  }
  v41 = v69;
LABEL_33:
  v45 = 0;
  v48 = 0;
  v46 = v66;
  v47 = v67;
  if (v66 - 2 >= 9)
  {
    if (v66 != 11)
      goto LABEL_36;
  }
  else
  {
    v48 = v68;
    if (v68)
    {
      v45 = v65;
      goto LABEL_36;
    }
  }
  v45 = v65;
LABEL_36:
  v49 = 0;
  v52 = 0;
  v50 = v62;
  v51 = v63;
  if (v62 - 2 >= 9)
  {
    if (v62 != 11)
      goto LABEL_39;
  }
  else
  {
    v52 = v64;
    if (v64)
    {
      v49 = v61;
      goto LABEL_39;
    }
  }
  v49 = v61;
LABEL_39:
  v53 = 0;
  v56 = 0;
  v54 = v58;
  v55 = v59;
  if (v58 - 2 >= 9)
  {
    if (v58 != 11)
      goto LABEL_42;
LABEL_57:
    v53 = v57;
    goto LABEL_42;
  }
  v56 = v60;
  if (!v60)
    goto LABEL_57;
  v53 = v57;
LABEL_42:
  result = (int *)v27(v28, &v41);
LABEL_43:
  if (v54 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v53);
  }
  if (v50 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v49);
  }
  if (v46 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v45);
  }
  if (v42 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v41);
  }
  return result;
}

uint64_t WebCore::LengthPointPropertyWrapper::requiresBlendingForAccumulativeIteration(WebCore::LengthPointPropertyWrapper *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t (*v14)(_QWORD *);
  uint64_t v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int *v18;
  int v19;
  void *v20;
  int v21;
  void *v22;
  _BOOL4 v25;
  uint64_t v28;
  unsigned int v30;
  unsigned __int8 v31;
  char v32;
  char v33;
  unsigned int v34;
  unsigned __int8 v35;
  char v36;
  char v37;
  unsigned int v38;
  unsigned __int8 v39;
  char v40;
  char v41;
  unsigned int v42;
  unsigned __int8 v43;
  char v44;
  char v45;

  v5 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3);
  v7 = (_QWORD *)((char *)a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (unsigned int *)v5(v7);
  v9 = v8;
  v38 = 0;
  v41 = 0;
  v39 = *((_BYTE *)v8 + 4);
  v10 = v39;
  v40 = *((_BYTE *)v8 + 5);
  if (v39 - 2 >= 9)
  {
    v11 = 0;
    if (v39 == 11)
    {
      v11 = (void *)*v8;
      v38 = *v8;
      WebCore::Length::ref((int *)&v38);
    }
  }
  else
  {
    v41 = *((_BYTE *)v8 + 6);
    if (v41)
    {
      v38 = *v8;
      v11 = (void *)v38;
    }
    else
    {
      v11 = (void *)*v8;
      v38 = *v8;
    }
  }
  v45 = 0;
  v43 = *((_BYTE *)v9 + 12);
  v12 = v43;
  v44 = *((_BYTE *)v9 + 13);
  if (v43 - 2 >= 9)
  {
    v13 = 0;
    if (v43 == 11)
    {
      v13 = (void *)v9[2];
      v42 = v9[2];
      WebCore::Length::ref((int *)&v42);
    }
  }
  else
  {
    v13 = (void *)v9[2];
  }
  v14 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v15 = *((_QWORD *)this + 3);
  v16 = (_QWORD *)((char *)a3 + (v15 >> 1));
  if ((v15 & 1) != 0)
    v14 = *(uint64_t (**)(_QWORD *))(*v16 + v14);
  v17 = (unsigned int *)v14(v16);
  v18 = v17;
  v30 = 0;
  v33 = 0;
  v31 = *((_BYTE *)v17 + 4);
  v19 = v31;
  v32 = *((_BYTE *)v17 + 5);
  if (v31 - 2 >= 9)
  {
    v20 = 0;
    if (v31 == 11)
    {
      v20 = (void *)*v17;
      v30 = *v17;
      WebCore::Length::ref((int *)&v30);
    }
  }
  else
  {
    v33 = *((_BYTE *)v17 + 6);
    if (v33)
    {
      v30 = *v17;
      v20 = (void *)v30;
    }
    else
    {
      v20 = (void *)*v17;
      v30 = *v17;
    }
  }
  v37 = 0;
  v35 = *((_BYTE *)v18 + 12);
  v21 = v35;
  v36 = *((_BYTE *)v18 + 13);
  if (v35 - 2 >= 9)
  {
    v22 = 0;
    if (v35 == 11)
    {
      v22 = (void *)v18[2];
      v34 = v18[2];
      WebCore::Length::ref((int *)&v34);
    }
  }
  else
  {
    v22 = (void *)v18[2];
  }
  v25 = v12 == 11 || v21 == 11 || v12 != v21;
  v28 = v19 == 11 || v10 == 11 || v10 != v19 || v25;
  if (v21 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v22);
  }
  if (v19 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v20);
  }
  if (v12 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v13);
  }
  if (v10 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v11);
  }
  return v28;
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::LengthPoint const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  float v15;
  float v16;
  int v17;
  float v18;
  float v19;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (unsigned __int8 *)v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = (unsigned __int8 *)v9(v11);
  v13 = v8[4];
  if (v13 != v12[4])
    return 0;
  v14 = v12;
  if ((v8[5] != 0) != (v12[5] != 0))
    return 0;
  if (v13 == 13)
    goto LABEL_15;
  if (v13 == 11)
  {
    if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)v8, (const WebCore::Length *)v12) & 1) != 0)
      goto LABEL_15;
    return 0;
  }
  v15 = *(float *)v8;
  if (!v8[6])
    v15 = (float)*(int *)v8;
  v16 = *(float *)v12;
  if (!v12[6])
    v16 = (float)*(int *)v12;
  if (v15 != v16)
    return 0;
LABEL_15:
  v17 = v8[12];
  if (v17 != v14[12] || (v8[13] != 0) != (v14[13] != 0))
    return 0;
  if (v17 == 13)
    return 1;
  if (v17 == 11)
    return WebCore::Length::isCalculatedEqual((WebCore::Length *)(v8 + 8), (const WebCore::Length *)(v14 + 8));
  v18 = *((float *)v8 + 2);
  if (!v8[14])
    v18 = (float)*((int *)v8 + 2);
  v19 = *((float *)v14 + 2);
  if (!v14[14])
    v19 = (float)SLODWORD(v19);
  return v18 == v19;
}

int *WebCore::LengthPointPropertyWrapper::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, unsigned int *);
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  __n128 v19;
  __n128 v20;
  int *result;
  unsigned int v22;
  unsigned __int8 v23;
  char v24;
  char v25;
  unsigned int v26;
  unsigned __int8 v27;
  char v28;
  char v29;
  unsigned int v30;
  unsigned __int8 v31;
  char v32;
  char v33;
  unsigned int v34;
  unsigned __int8 v35;
  char v36;
  char v37;

  v9 = (uint64_t (*)(_QWORD *, unsigned int *))a1[4];
  v8 = a1[5];
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *, unsigned int *))(*v10 + v9);
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = (unsigned __int8 *)v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = (unsigned __int8 *)v15(v17);
  WebCore::blend(v14, v18, a5, (uint64_t)&v34, v19);
  WebCore::blend(v14 + 8, v18 + 8, a5, (uint64_t)&v30, v20);
  v22 = 0;
  v25 = 0;
  v23 = v35;
  v24 = v36;
  if (v35 - 2 >= 9)
  {
    if (v35 != 11)
      goto LABEL_10;
  }
  else
  {
    v25 = v37;
    if (v37)
    {
      v22 = v34;
      goto LABEL_10;
    }
  }
  v22 = v34;
LABEL_10:
  v26 = 0;
  v29 = 0;
  v27 = v31;
  v28 = v32;
  if (v31 - 2 >= 9)
  {
    if (v31 != 11)
      goto LABEL_13;
  }
  else
  {
    v29 = v33;
    if (v33)
    {
      v26 = v30;
      goto LABEL_13;
    }
  }
  v26 = v30;
LABEL_13:
  result = (int *)v9(v10, &v22);
  if (v27 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v26);
  }
  if (v23 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v22);
  }
  return result;
}

BOOL WebCore::LineHeightWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  float v11;
  uint64_t (*v12)(_QWORD *);
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v17;
  uint64_t (*v19)(_QWORD *);
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD *);
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;

  v6 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
  v9 = v6(v8);
  if (*(_BYTE *)(v9 + 4) == 3 && *(_BYTE *)(v9 + 5) == 0)
  {
    v11 = *(float *)v9;
    if (!*(_BYTE *)(v9 + 6))
      v11 = (float)*(int *)v9;
    if (v11 == -100.0)
      return 0;
  }
  v12 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = (_QWORD *)(a3 + (v13 >> 1));
  if ((v13 & 1) != 0)
    v12 = *(uint64_t (**)(_QWORD *))(*v14 + v12);
  v15 = v12(v14);
  if (*(_BYTE *)(v15 + 4) == 3 && *(_BYTE *)(v15 + 5) == 0)
  {
    v17 = *(float *)v15;
    if (!*(_BYTE *)(v15 + 6))
      v17 = (float)*(int *)v15;
    if (v17 == -100.0)
      return 0;
  }
  v19 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v20 = *(_QWORD *)(a1 + 24);
  v21 = (_QWORD *)(a2 + (v20 >> 1));
  if ((v20 & 1) != 0)
    v19 = *(uint64_t (**)(_QWORD *))(*v21 + v19);
  v22 = v19(v21);
  v23 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v24 = *(_QWORD *)(a1 + 24);
  v25 = (_QWORD *)(a3 + (v24 >> 1));
  if ((v24 & 1) != 0)
    v23 = *(uint64_t (**)(_QWORD *))(*v25 + v23);
  v26 = v23(v25);
  v27 = *(unsigned __int8 *)(v22 + 4);
  v28 = *(unsigned __int8 *)(v26 + 4);
  if (v27 == v28)
    return 1;
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    if (v27 <= 0xB && ((1 << v27) & 0x81C) != 0 && v28 <= 0xB && ((1 << v28) & 0x81C) != 0)
      return (v27 != 2) ^ (v28 == 2);
    return 0;
  }
  if (v27 != 11)
  {
    if (v28 == 11)
    {
      if (v27 != 4)
      {
        v29 = v27 & 0xFFFFFFF7;
        return v29 == 3;
      }
      return 1;
    }
    return 0;
  }
  if (v28 == 4)
    return 1;
  v29 = v28 & 0xFFFFFFF7;
  return v29 == 3;
}

uint64_t WebCore::RenderStyle::textIndent(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 3) + 176;
}

uint64_t WebCore::RenderStyle::setTextIndent(uint64_t result, WebCore::Length *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  float v6;
  float v7;
  _BYTE *v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  int v13;
  WTF *v14;
  void *v15;

  v3 = result;
  v4 = *(_QWORD *)(result + 24);
  v5 = *(unsigned __int8 *)(v4 + 180);
  if (v5 != *((unsigned __int8 *)a2 + 4) || (*(_BYTE *)(v4 + 181) != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_13;
  if (v5 == 13)
    return result;
  if (v5 == 11)
  {
    result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 176), a2);
    if ((result & 1) != 0)
      return result;
    v4 = *(_QWORD *)(v3 + 24);
LABEL_13:
    if (*(_DWORD *)v4 == 1)
    {
      v8 = (_BYTE *)v4;
    }
    else
    {
      v8 = (_BYTE *)WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData((uint64_t)v8, v4);
      result = *(_QWORD *)(v3 + 24);
      *(_QWORD *)(v3 + 24) = v8;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData((WebCore::StyleRareInheritedData *)result, v12);
          result = WTF::fastFree(v14, v15);
          v8 = *(_BYTE **)(v3 + 24);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
    }
    v9 = v8 + 176;
    if (v8 + 176 == (_BYTE *)a2)
      return result;
    if (v8[180] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v9);
    }
    v10 = *((unsigned __int8 *)a2 + 4);
    v8[180] = v10;
    v8[181] = *((_BYTE *)a2 + 5);
    if (v10 - 2 >= 9)
    {
      if (v10 > 0xD)
        goto LABEL_20;
      if (((1 << v10) & 0x3003) != 0)
      {
        *v9 = 0;
        goto LABEL_20;
      }
      if (v10 != 11)
        goto LABEL_20;
      v13 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v11 = *((unsigned __int8 *)a2 + 6);
      v8[182] = v11;
      if (v11)
      {
        *v9 = *(_DWORD *)a2;
LABEL_20:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v13 = *(_DWORD *)a2;
    }
    *v9 = v13;
    goto LABEL_20;
  }
  v6 = *(float *)(v4 + 176);
  if (!*(_BYTE *)(v4 + 182))
    v6 = (float)SLODWORD(v6);
  v7 = *(float *)a2;
  if (!*((_BYTE *)a2 + 6))
    v7 = (float)*(int *)a2;
  if (v6 != v7)
    goto LABEL_13;
  return result;
}

uint64_t WebCore::TextIndentWrapper::equals(WebCore::TextIndentWrapper *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  int v3;
  uint64_t (*v7)(_QWORD *);
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  int v15;
  float v16;
  float v17;

  v3 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 232) ^ *(_DWORD *)(*((_QWORD *)a3 + 3) + 232);
  if ((v3 & 0x40) != 0 || (v3 & 0x80) != 0)
    return 0;
  if (a2 == a3)
    return 1;
  v7 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v8 = *((_QWORD *)this + 3);
  v9 = (_QWORD *)((char *)a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v7 = *(uint64_t (**)(_QWORD *))(*v9 + v7);
  v10 = (unsigned __int8 *)v7(v9);
  v11 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v12 = *((_QWORD *)this + 3);
  v13 = (_QWORD *)((char *)a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = (unsigned __int8 *)v11(v13);
  v15 = v10[4];
  if (v15 != v14[4] || (v10[5] != 0) != (v14[5] != 0))
    return 0;
  if (v15 == 13)
    return 1;
  if (v15 == 11)
    return WebCore::Length::isCalculatedEqual((WebCore::Length *)v10, (const WebCore::Length *)v14);
  v16 = *(float *)v10;
  if (!v10[6])
    v16 = (float)*(int *)v10;
  v17 = *(float *)v14;
  if (!v14[6])
    v17 = (float)*(int *)v14;
  return v16 == v17;
}

BOOL WebCore::TextIndentWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t (*v7)(_QWORD *);
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  v3 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 232) ^ *(_DWORD *)(*(_QWORD *)(a3 + 24) + 232);
  if ((v3 & 0x40) != 0 || (v3 & 0x80) != 0)
    return 0;
  v7 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v7 = *(uint64_t (**)(_QWORD *))(*v9 + v7);
  v10 = v7(v9);
  v11 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = v11(v13);
  v15 = *(unsigned __int8 *)(v10 + 4);
  v16 = *(unsigned __int8 *)(v14 + 4);
  if (v15 == v16)
    return 1;
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    if (v15 > 0xB || ((1 << v15) & 0x81C) == 0)
      return 0;
    if (v16 > 0xB || ((1 << v16) & 0x81C) == 0)
      return 0;
    return (v15 != 2) ^ (v16 == 2);
  }
  else
  {
    if (v15 == 11)
    {
      if (v16 == 4)
        return 1;
      v17 = v16 & 0xFFFFFFF7;
    }
    else
    {
      if (v16 != 11)
        return 0;
      if (v15 == 4)
        return 1;
      v17 = v15 & 0xFFFFFFF7;
    }
    return v17 == 3;
  }
}

int *WebCore::TextIndentWrapper::blend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v10;
  int v11;
  unsigned int v12;
  _DWORD *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, unsigned int *);
  _QWORD *v18;
  int v19;
  uint64_t (*v20)(_QWORD *, __n128);
  uint64_t v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  uint64_t (*v24)(_QWORD *);
  uint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  __n128 v28;
  int *result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  WebCore::StyleRareInheritedData *v36;
  uint64_t v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  WebCore::StyleRareInheritedData *v40;
  WTF *v41;
  void *v42;
  WTF *v43;
  void *v44;
  uint64_t v45;
  unsigned int v46;
  char v47;

  a6.n128_u64[0] = *(_QWORD *)a5;
  if (*(double *)a5 == 0.0 || *(_BYTE *)(a5 + 8) == 0)
    v10 = a3;
  else
    v10 = a4;
  v11 = *(_DWORD *)(*(_QWORD *)(v10 + 24) + 232);
  v12 = v11 & 0x40;
  v13 = *(_DWORD **)(a2 + 24);
  v14 = v13[58];
  if (((((v14 & 0x40) == 0) ^ (v12 >> 6)) & 1) == 0)
  {
    v30 = a2;
    v45 = a3;
    if (*v13 != 1)
    {
      v33 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v33, (uint64_t)v13);
      v36 = *(WebCore::StyleRareInheritedData **)(v30 + 24);
      *(_QWORD *)(v30 + 24) = v34;
      if (v36)
      {
        if (*(_DWORD *)v36 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v36, v35);
          WTF::fastFree(v41, v42);
          v34 = *(_DWORD **)(v30 + 24);
        }
        else
        {
          --*(_DWORD *)v36;
        }
      }
      v14 = v34[58];
      v13 = v34;
    }
    v13[58] = v14 & 0xFFFFFFBF | v12;
    v11 = *(_DWORD *)(*(_QWORD *)(v10 + 24) + 232);
    a2 = v30;
    v13 = *(_DWORD **)(v30 + 24);
    v14 = v13[58];
    a3 = v45;
  }
  v15 = v11 & 0x80;
  if (((((v14 & 0x80) == 0) ^ (v15 >> 7)) & 1) == 0)
  {
    v31 = a2;
    v32 = a3;
    if (*v13 != 1)
    {
      v37 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v37, (uint64_t)v13);
      v40 = *(WebCore::StyleRareInheritedData **)(v31 + 24);
      *(_QWORD *)(v31 + 24) = v38;
      if (v40)
      {
        if (*(_DWORD *)v40 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v40, v39);
          WTF::fastFree(v43, v44);
          v38 = *(_DWORD **)(v31 + 24);
        }
        else
        {
          --*(_DWORD *)v40;
        }
      }
      v14 = v38[58];
      v13 = v38;
    }
    v13[58] = v14 & 0xFFFFFF7F | v15;
    a3 = v32;
    a2 = v31;
  }
  v17 = *(uint64_t (**)(_QWORD *, unsigned int *))(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v18 = (_QWORD *)(a2 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v17 = *(uint64_t (**)(_QWORD *, unsigned int *))(*v18 + v17);
  v19 = (*(_DWORD *)(a1 + 48) >> 1) & 1;
  v20 = *(uint64_t (**)(_QWORD *, __n128))(a1 + 16);
  v21 = *(_QWORD *)(a1 + 24);
  v22 = (_QWORD *)(a3 + (v21 >> 1));
  if ((v21 & 1) != 0)
    v20 = *(uint64_t (**)(_QWORD *, __n128))(*v22 + v20);
  v23 = (unsigned __int8 *)v20(v22, a6);
  v24 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v25 = *(_QWORD *)(a1 + 24);
  v26 = (_QWORD *)(a4 + (v25 >> 1));
  if ((v25 & 1) != 0)
    v24 = *(uint64_t (**)(_QWORD *))(*v26 + v24);
  v27 = (unsigned __int8 *)v24(v26);
  WebCore::blend(v23, v27, a5, v19, (uint64_t)&v46, v28);
  result = (int *)v17(v18, &v46);
  if (v47 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v46);
  }
  return result;
}

uint64_t WebCore::RenderStyle::verticalAlignLength(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 8) + 52;
}

BOOL WebCore::VerticalAlignWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v16;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 68) & 0xF0) == 0x90
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) + 68) & 0xF0) == 0x90)
  {
    v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
    v6 = *(_QWORD *)(a1 + 24);
    v7 = (_QWORD *)(a2 + (v6 >> 1));
    if ((v6 & 1) != 0)
      v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
    v8 = v5(v7);
    v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
    v10 = *(_QWORD *)(a1 + 24);
    v11 = (_QWORD *)(a3 + (v10 >> 1));
    if ((v10 & 1) != 0)
      v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
    v12 = v9(v11);
    v13 = *(unsigned __int8 *)(v8 + 4);
    v14 = *(unsigned __int8 *)(v12 + 4);
    if (v13 == v14)
      return 1;
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    {
      if (v13 <= 0xB && ((1 << v13) & 0x81C) != 0 && v14 <= 0xB && ((1 << v14) & 0x81C) != 0)
        return (v13 != 2) ^ (v14 == 2);
    }
    else
    {
      if (v13 == 11)
      {
        if (v14 != 4)
        {
          v16 = v14 & 0xFFFFFFF7;
          return v16 == 3;
        }
        return 1;
      }
      if (v14 == 11)
      {
        if (v13 != 4)
        {
          v16 = v13 & 0xFFFFFFF7;
          return v16 == 3;
        }
        return 1;
      }
    }
  }
  return 0;
}

int *WebCore::VerticalAlignWrapper::blend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, unsigned int *);
  _QWORD *v12;
  int v13;
  uint64_t (*v14)(_QWORD *);
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  uint64_t (*v18)(_QWORD *);
  uint64_t v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  __n128 v22;
  int *result;
  uint64_t v25;
  WTF **v26;
  uint64_t v27;
  char v28;
  WTF *v29;
  unsigned int v30;
  char v31;

  v11 = *(uint64_t (**)(_QWORD *, unsigned int *))(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v12 = (_QWORD *)(a2 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *, unsigned int *))(*v12 + v11);
  v13 = (*(_DWORD *)(a1 + 48) >> 1) & 1;
  v14 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = (_QWORD *)(a3 + (v15 >> 1));
  if ((v15 & 1) != 0)
    v14 = *(uint64_t (**)(_QWORD *))(*v16 + v14);
  v17 = (unsigned __int8 *)v14(v16);
  v18 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v19 = *(_QWORD *)(a1 + 24);
  v20 = (_QWORD *)(a4 + (v19 >> 1));
  if ((v19 & 1) != 0)
    v18 = *(uint64_t (**)(_QWORD *))(*v20 + v18);
  v21 = (unsigned __int8 *)v18(v20);
  WebCore::blend(v17, v21, a5, v13, (uint64_t)&v30, v22);
  result = (int *)v11(v12, &v30);
  if (v31 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v30);
  }
  if (*(double *)a5 == 0.0 || *(_BYTE *)(a5 + 8) == 0)
    v25 = a3;
  else
    v25 = a4;
  v27 = *(_QWORD *)(a2 + 8);
  v26 = (WTF **)(a2 + 8);
  v28 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v25 + 8) + 8) + 68);
  if ((*(_BYTE *)(*(_QWORD *)(v27 + 8) + 68) ^ v28) >= 0x10u)
  {
    v29 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v26);
    result = WTF::DataRef<WebCore::StyleBoxData>::access((uint64_t *)v29 + 1);
    *((_BYTE *)result + 68) = v28 & 0xF0 | result[17] & 0xF;
  }
  return result;
}

float WebCore::RenderStyle::perspective(WebCore::RenderStyle *this)
{
  return *(float *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 260);
}

uint64_t WebCore::RenderStyle::setPerspective(WebCore::RenderStyle *this, float a2)
{
  uint64_t result;
  uint64_t v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  WTF *v11;
  void *v12;

  v4 = *((_QWORD *)this + 1);
  result = (uint64_t)this + 8;
  if (*(float *)(*(_QWORD *)(v4 + 40) + 260) != a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v11, v12);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    *(float *)(result + 260) = a2;
  }
  return result;
}

BOOL WebCore::PerspectiveWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) + 260) != -1.0
      && *(float *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) + 260) != -1.0;
}

uint64_t WebCore::PerspectiveWrapper::blend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(_QWORD *, __n128);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __n128 v17;
  _QWORD *v18;
  uint64_t (*v19)(_QWORD *, __n128);
  float (*v20)(_QWORD *);
  uint64_t v21;
  _QWORD *v22;
  float v23;
  float (*v24)(_QWORD *);
  uint64_t v25;
  _QWORD *v26;
  float v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  float v31;
  BOOL v32;
  uint64_t (*v34)(_QWORD *, __n128);

  if (*(_BYTE *)(a5 + 8))
  {
    v10 = *(uint64_t (**)(_QWORD *, __n128))(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    v12 = (_QWORD *)(a2 + (v11 >> 1));
    if ((v11 & 1) != 0)
      v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
    v34 = v10;
    v13 = *(void (**)(_QWORD *, __n128))(a1 + 16);
    v14 = *(_QWORD *)(a1 + 24);
    v15 = v14 >> 1;
    if (*(double *)a5 == 0.0)
    {
      v16 = (_QWORD *)(a3 + v15);
      if ((v14 & 1) == 0)
        goto LABEL_7;
    }
    else
    {
      v16 = (_QWORD *)(a4 + v15);
      if ((v14 & 1) == 0)
      {
LABEL_7:
        a6.n128_u64[0] = *(_QWORD *)a5;
        v13(v16, a6);
        v18 = v12;
        v19 = v34;
        return v19(v18, v17);
      }
    }
    v13 = *(void (**)(_QWORD *, __n128))(*v16 + v13);
    goto LABEL_7;
  }
  v20 = *(float (**)(_QWORD *))(a1 + 16);
  v21 = *(_QWORD *)(a1 + 24);
  v22 = (_QWORD *)(a3 + (v21 >> 1));
  if ((v21 & 1) != 0)
    v20 = *(float (**)(_QWORD *))(*v22 + v20);
  v23 = v20(v22);
  v24 = *(float (**)(_QWORD *))(a1 + 16);
  v25 = *(_QWORD *)(a1 + 24);
  v26 = (_QWORD *)(a4 + (v25 >> 1));
  if ((v25 & 1) != 0)
    v24 = *(float (**)(_QWORD *))(*v26 + v24);
  v27 = v24(v26);
  v17.n128_f32[0] = WebCore::blendFunc(a5, v23, v27);
  v28 = *(unsigned __int8 *)(a1 + 48);
  v19 = *(uint64_t (**)(_QWORD *, __n128))(a1 + 32);
  v29 = *(_QWORD *)(a1 + 40);
  v18 = (_QWORD *)(a2 + (v29 >> 1));
  if ((v29 & 1) != 0)
    v19 = *(uint64_t (**)(_QWORD *, __n128))(*v18 + v19);
  v30 = v17.n128_f32[0] < 0.0 && v28 == 2;
  v31 = 0.00000011921;
  if (!v30)
    v31 = v17.n128_f32[0];
  v32 = v17.n128_f32[0] <= 0.0 && v28 == 1;
  v17.n128_u32[0] = 0;
  if (!v32)
    v17.n128_f32[0] = v31;
  return v19(v18, v17);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  _DWORD *v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *(_DWORD **)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        if (v8[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        else
          --v8[2];
      }
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebCore::RenderStyle::visibility(WebCore::RenderStyle *this)
{
  return (*((unsigned __int8 *)this + 40) >> 4) & 3;
}

uint64_t WebCore::RenderStyle::setVisibility(uint64_t result, char a2)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(result + 40) & 0xFFFFFFCF | (16 * (a2 & 3));
  return result;
}

BOOL WebCore::PropertyWrapperGetter<WebCore::Visibility>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

BOOL WebCore::VisibilityWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned int (*v8)(_QWORD *);
  uint64_t v9;
  _QWORD *v10;

  v5 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(unsigned int (**)(_QWORD *))(*v7 + v5);
  if (!v5(v7))
    return 1;
  v8 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (_QWORD *)(a3 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v8 = *(unsigned int (**)(_QWORD *))(*v10 + v8);
  return v8(v10) == 0;
}

uint64_t WebCore::PropertyWrapper<WebCore::Visibility>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t, __n128);
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  unsigned int v25;
  double v27;
  _BYTE v28[8];
  int v29;
  char v30;

  v9 = (uint64_t (*)(_QWORD *, uint64_t, __n128))a1[4];
  v8 = a1[5];
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *, uint64_t, __n128))(*v10 + v9);
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = v15(v17);
  v20 = v18;
  if (*(_BYTE *)(a5 + 8))
  {
    v19.n128_u64[0] = *(_QWORD *)a5;
    if (*(double *)a5 == 0.0)
      v20 = v14;
    else
      v20 = v18;
  }
  else
  {
    v19.n128_u64[0] = 0;
    if (v14)
      v21 = 0.0;
    else
      v21 = 1.0;
    if ((_DWORD)v18)
      v22 = 0.0;
    else
      v22 = 1.0;
    if (v21 != v22)
    {
      v27 = *(double *)a5;
      v28[0] = 0;
      v29 = -1;
      v23 = *(unsigned int *)(a5 + 40);
      if ((_DWORD)v23 != -1)
      {
        ((void (*)(char *, _BYTE *, uint64_t))off_1E338E958[v23])(&v30, v28, a5 + 32);
        v29 = v23;
      }
      v19.n128_f64[0] = v21;
      v24 = v21 + (v22 - v21) * v27;
      if ((_DWORD)v23 != -1)
        ((void (*)(char *, _BYTE *))off_1E338E948[v23])(&v30, v28);
      if ((_DWORD)v20)
        v25 = v20;
      else
        v25 = v14;
      if (v24 <= 0.0)
        v20 = v25;
      else
        v20 = 0;
    }
  }
  return v9(v10, v20, v19);
}

uint64_t WebCore::RenderStyle::clip(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 40) + 96;
}

uint64_t WebCore::RenderStyle::setClip(uint64_t a1, unsigned __int8 *a2)
{
  WTF **v3;
  uint64_t result;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WebCore::StyleRareNonInheritedData *v11;
  WTF *v12;
  void *v13;

  v3 = (WTF **)(a1 + 8);
  result = WebCore::operator==((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 96), a2);
  if ((result & 1) == 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      v9 = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      v9 = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v11 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = v9;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v11, v10);
          WTF::fastFree(v12, v13);
          v9 = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v11;
        }
      }
    }
    return (uint64_t)std::array<WebCore::Length,4ul>::operator=((WebCore::Length *)(v9 + 96), (uint64_t)a2);
  }
  return result;
}

uint64_t WebCore::ClipWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) + 642) << 16)) << 32)) & 0x20000000000000) != 0
    && ((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) + 642) << 16)) << 32)) & 0x20000000000000) != 0)
  {
    return WebCore::LengthBoxPropertyWrapper::canInterpolate(a1, a2, a3);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::ClipWrapper::blend(uint64_t a1, WTF **a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t result;
  WTF **v8;
  WTF *v9;
  WTF *v10;
  _DWORD *v11;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebCore::StyleRareNonInheritedData *v15;
  unint64_t v16;
  WTF *v17;
  void *v18;

  result = (uint64_t)WebCore::LengthBoxPropertyWrapper::blend(a1, (WebCore::RenderStyle *)a2, a3, a4, a5, a6);
  v9 = a2[1];
  v8 = a2 + 1;
  if (((*(unsigned int *)(*((_QWORD *)v9 + 5) + 636) | ((unint64_t)(*(unsigned __int16 *)(*((_QWORD *)v9 + 5)
                                                                                                  + 640) | (*(unsigned __int8 *)(*((_QWORD *)v9 + 5) + 642) << 16)) << 32)) & 0x20000000000000) == 0)
  {
    v10 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v8);
    v11 = (_DWORD *)*((_QWORD *)v10 + 5);
    if (*v11 == 1)
    {
      result = *((_QWORD *)v10 + 5);
    }
    else
    {
      v12 = v10;
      v13 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v13, (uint64_t)v11);
      v15 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v12 + 5);
      *((_QWORD *)v12 + 5) = result;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v15, v14);
          WTF::fastFree(v17, v18);
          result = *((_QWORD *)v12 + 5);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
    v16 = *(unsigned int *)(result + 636) | ((unint64_t)(*(unsigned __int16 *)(result + 640) | (*(unsigned __int8 *)(result + 642) << 16)) << 32) | 0x20000000000000;
    *(_WORD *)(result + 640) = *(_WORD *)(result + 640);
    *(_BYTE *)(result + 642) = BYTE6(v16);
  }
  return result;
}

uint64_t WebCore::AcceleratedTransformOperationsPropertyWrapper::requiresBlendingForAccumulativeIteration(WebCore::AcceleratedTransformOperationsPropertyWrapper *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  return 1;
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::TransformOperations const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  v13 = *(unsigned int *)(v8 + 12);
  if ((_DWORD)v13 != *(_DWORD *)(v12 + 12))
    return 0;
  v14 = *(_QWORD **)v12;
  v15 = *(_QWORD **)v8;
  if ((_DWORD)v13)
  {
    v16 = 8 * v13 - 8;
    v17 = v15;
    v18 = *(_QWORD **)v12;
    while (1)
    {
      v19 = v16;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v17 + 32))(*v17, *v18);
      if (!(_DWORD)result)
        break;
      ++v17;
      ++v18;
      v16 = v19 - 8;
      if (!v19)
        return v17 == &v15[v13] && v18 == &v14[v13];
    }
  }
  else
  {
    v18 = *(_QWORD **)v12;
    v17 = v15;
    return v17 == &v15[v13] && v18 == &v14[v13];
  }
  return result;
}

BOOL WebCore::AcceleratedTransformOperationsPropertyWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  unsigned int *v9;
  uint64_t (*v10)(_QWORD *);
  uint64_t v11;
  _QWORD *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  _BOOL8 result;
  int32x2_t v25;

  if (a4)
    return 1;
  v6 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = (_QWORD *)(a3 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
  v9 = (unsigned int *)v6(v8);
  v10 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = (_QWORD *)(a2 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *))(*v12 + v10);
  v13 = (unsigned int *)v10(v12);
  v25 = 0;
  v14 = v13[3];
  if (!(_DWORD)v14)
    goto LABEL_12;
  v15 = *(_QWORD *)v13;
  v16 = 8 * v14;
  v17 = v16;
  v18 = *(_QWORD *)v13;
  while (*(_BYTE *)(*(_QWORD *)v18 + 12) != 12)
  {
    v18 += 8;
    v17 -= 8;
    if (!v17)
    {
      while (*(_BYTE *)(*(_QWORD *)v15 + 12) != 19)
      {
        v15 += 8;
        v16 -= 8;
        if (!v16)
          goto LABEL_12;
      }
      break;
    }
  }
  result = WebCore::TransformOperations::isInvertible((WebCore::TransformOperations *)v13, &v25);
  if (result)
  {
LABEL_12:
    v19 = v9[3];
    if ((_DWORD)v19)
    {
      v20 = *(_QWORD *)v9;
      v21 = 8 * v19;
      v22 = v21;
      for (i = *(_QWORD *)v9; *(_BYTE *)(*(_QWORD *)i + 12) != 12; i += 8)
      {
        v22 -= 8;
        if (!v22)
        {
          while (*(_BYTE *)(*(_QWORD *)v20 + 12) != 19)
          {
            v20 += 8;
            v21 -= 8;
            if (!v21)
              return 1;
          }
          return WebCore::TransformOperations::isInvertible((WebCore::TransformOperations *)v9, &v25);
        }
      }
      return WebCore::TransformOperations::isInvertible((WebCore::TransformOperations *)v9, &v25);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

WTF *WebCore::AcceleratedTransformOperationsPropertyWrapper::blend(uint64_t a1, WTF **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD *);
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  WTF *result;
  WTF *v19;
  uint64_t v20;
  _DWORD *v21;
  WTF *v22;
  int v23;
  unsigned int v24;

  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  v13 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = (_QWORD *)(a4 + (v14 >> 1));
  if ((v14 & 1) != 0)
    v13 = *(uint64_t (**)(_QWORD *))(*v15 + v13);
  v16 = v13(v15);
  WebCore::blendFunc((uint64_t)&v22, v12, v16, a5);
  WebCore::RenderStyle::setTransform(a2, (uint64_t)&v22);
  if (v24)
  {
    v19 = v22;
    v20 = 8 * v24;
    do
    {
      v21 = *(_DWORD **)v19;
      *(_QWORD *)v19 = 0;
      if (v21)
      {
        if (v21[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
        else
          --v21[2];
      }
      v19 = (WTF *)((char *)v19 + 8);
      v20 -= 8;
    }
    while (v20);
  }
  result = v22;
  if (v22)
  {
    v22 = 0;
    v23 = 0;
    return (WTF *)WTF::fastFree(result, v17);
  }
  return result;
}

uint64_t WebCore::AcceleratedTransformOperationsPropertyWrapper::animationIsAccelerated(WebCore::AcceleratedTransformOperationsPropertyWrapper *this, const WebCore::Settings *a2)
{
  return 1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendRange<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>> const*>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v4 = a2;
  v5 = result;
  v6 = *(unsigned int *)(result + 12);
  v7 = v6 + a3 - a2;
  if (v7 > *(unsigned int *)(result + 8))
  {
    if (v7 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v8 = *(void **)result;
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
    *(_DWORD *)(v5 + 8) = v7;
    *(_QWORD *)v5 = v9;
    result = (uint64_t)memcpy(v9, v8, 8 * v6);
    if (v8)
    {
      if (*(void **)v5 == v8)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v8, v10);
    }
  }
  if (v4 != a3)
  {
    v11 = *(_QWORD *)v5;
    v12 = *(_DWORD *)(v5 + 12);
    do
    {
      v13 = *v4++;
      *(_QWORD *)(v11 + 8 * v12++) = v13;
      ++*(_DWORD *)(v13 + 8);
    }
    while (v4 != a3);
    *(_DWORD *)(v5 + 12) = v12;
  }
  return result;
}

uint64_t WebCore::PropertyWrapperFilter::requiresBlendingForAccumulativeIteration(WebCore::PropertyWrapperFilter *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  return 1;
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::FilterOperations const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  v13 = *(unsigned int *)(v8 + 12);
  if ((_DWORD)v13 != *(_DWORD *)(v12 + 12))
    return 0;
  v14 = *(_QWORD **)v12;
  v15 = *(_QWORD **)v8;
  if ((_DWORD)v13)
  {
    v16 = 8 * v13 - 8;
    v17 = v15;
    v18 = *(_QWORD **)v12;
    while (1)
    {
      v19 = v16;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v17 + 24))(*v17, *v18);
      if (!(_DWORD)result)
        break;
      ++v17;
      ++v18;
      v16 = v19 - 8;
      if (!v19)
        return v17 == &v15[v13] && v18 == &v14[v13];
    }
  }
  else
  {
    v18 = *(_QWORD **)v12;
    v17 = v15;
    return v17 == &v15[v13] && v18 == &v14[v13];
  }
  return result;
}

uint64_t WebCore::PropertyWrapperFilter::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t (*v7)(_QWORD *);
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;

  v7 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v7 = *(uint64_t (**)(_QWORD *))(*v9 + v7);
  v10 = v7(v9);
  v11 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = v11(v13);
  v15 = *(uint64_t **)v10;
  v16 = *(unsigned int *)(v10 + 12);
  if ((_DWORD)v16)
  {
    v17 = 8 * v16;
    v18 = *(uint64_t **)v10;
    while (*(_BYTE *)(*v18 + 12))
    {
      ++v18;
      v17 -= 8;
      if (!v17)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v19 = *(uint64_t **)v14;
    v20 = *(unsigned int *)(v14 + 12);
    if ((_DWORD)v20)
    {
      v21 = 8 * v20;
      v22 = *(uint64_t **)v14;
      while (*(_BYTE *)(*v22 + 12))
      {
        ++v22;
        v21 -= 8;
        if (!v21)
          goto LABEL_13;
      }
    }
    else
    {
LABEL_13:
      if (a4)
        return 1;
      if (v20 < v16)
        v16 = *(unsigned int *)(v14 + 12);
      if (!v16)
        return 1;
      while (1)
      {
        v24 = *v15;
        v25 = *v19;
        if ((*v15 != 0) != (*v19 != 0))
          break;
        v26 = !v24 || v25 == 0;
        if (!v26 && *(unsigned __int8 *)(v24 + 12) != *(unsigned __int8 *)(v25 + 12))
          break;
        ++v19;
        ++v15;
        if (!--v16)
          return 1;
      }
    }
  }
  return 0;
}

WTF *WebCore::PropertyWrapperFilter::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  void (*v9)(_QWORD *, WTF **);
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  unsigned int *v18;
  void *v19;
  WTF *result;
  WTF *v21;
  WTF *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  WTF *v27;
  int v28;
  unsigned int v29;

  v9 = (void (*)(_QWORD *, WTF **))a1[4];
  v8 = a1[5];
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(void (**)(_QWORD *, WTF **))(*v10 + v9);
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = (unsigned int *)v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = (unsigned int *)v15(v17);
  WebCore::FilterOperations::blend(v14, v18, a5, (uint64_t)&v27);
  v9(v10, &v27);
  if (v29)
  {
    v21 = v27;
    v22 = (WTF *)((char *)v27 + 8 * v29);
    do
    {
      v23 = *(unsigned int **)v21;
      *(_QWORD *)v21 = 0;
      if (v23)
      {
        v24 = v23 + 2;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v23 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
        }
      }
      v21 = (WTF *)((char *)v21 + 8);
    }
    while (v21 != v22);
  }
  result = v27;
  if (v27)
  {
    v27 = 0;
    v28 = 0;
    return (WTF *)WTF::fastFree(result, v19);
  }
  return result;
}

uint64_t WebCore::PathOperationPropertyWrapper::equals(WebCore::PathOperationPropertyWrapper *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;

  if (a2 == a3)
    return 1;
  v5 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3);
  v7 = (_QWORD *)((char *)a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v10 = *((_QWORD *)this + 3);
  v11 = (_QWORD *)((char *)a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  if (v8 == v12)
    return 1;
  if (v8)
    v13 = v12 == 0;
  else
    v13 = 1;
  if (v13)
    return 0;
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, v12);
}

uint64_t WebCore::PathOperationPropertyWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  if (v8)
    v13 = v12 == 0;
  else
    v13 = 1;
  if (v13)
    return 0;
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v12);
}

_DWORD *WebCore::RefCountedPropertyWrapper<WebCore::PathOperation>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  void (*v9)(_QWORD *, _DWORD **, __n128);
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  _DWORD *result;
  _DWORD *v22;

  v9 = (void (*)(_QWORD *, _DWORD **, __n128))a1[4];
  v8 = a1[5];
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(void (**)(_QWORD *, _DWORD **, __n128))(*v10 + v9);
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = v15(v17);
  if (*(_BYTE *)(a5 + 8))
  {
    v19.n128_u64[0] = *(_QWORD *)a5;
    if (*(double *)a5 == 0.0)
      v20 = v14;
    else
      v20 = v18;
    if (v20)
      ++*(_DWORD *)(v20 + 8);
    v22 = (_DWORD *)v20;
  }
  else
  {
    (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 40))(&v22, v14, v18, a5);
  }
  v9(v10, &v22, v19);
  result = v22;
  v22 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::PropertyWrapperShape::equals(WebCore::PropertyWrapperShape *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;

  if (a2 == a3)
    return 1;
  v5 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3);
  v7 = (_QWORD *)((char *)a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v10 = *((_QWORD *)this + 3);
  v11 = (_QWORD *)((char *)a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  if (v8 == v12)
    return 1;
  v13 = v12;
  if (v8)
    v14 = v12 == 0;
  else
    v14 = 1;
  if (v14
    || *(_DWORD *)(v8 + 4) != *(_DWORD *)(v12 + 4)
    || *(unsigned __int8 *)(v8 + 24) != *(unsigned __int8 *)(v12 + 24))
  {
    return 0;
  }
  v15 = *(_QWORD *)(v8 + 8);
  v16 = *(_QWORD *)(v13 + 8);
  if (v15 == v16)
    goto LABEL_21;
  if (v15)
    v17 = v16 == 0;
  else
    v17 = 1;
  if (v17)
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15);
  if ((_DWORD)result)
  {
LABEL_21:
    v19 = *(_QWORD *)(v8 + 16);
    v20 = *(_QWORD *)(v13 + 16);
    if (v19 == v20)
      return 1;
    if (v19)
      v21 = v20 == 0;
    else
      v21 = 1;
    if (!v21)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
    return 0;
  }
  return result;
}

uint64_t WebCore::PropertyWrapperShape::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  if (v8)
    v13 = v12 == 0;
  else
    v13 = 1;
  if (v13)
    return 0;
  if (*(_DWORD *)(v8 + 4) | *(_DWORD *)(v12 + 4))
    return 0;
  if (*(unsigned __int8 *)(v8 + 24) != *(unsigned __int8 *)(v12 + 24))
    return 0;
  v14 = *(_DWORD **)(v12 + 8);
  if (!v14)
    return 0;
  v15 = v14[2];
  v14[2] = v15 + 1;
  v16 = *(_QWORD *)(v8 + 8);
  if (!v16)
  {
    v17 = 0;
    if (v15)
      goto LABEL_14;
LABEL_18:
    (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    return v17;
  }
  v17 = (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)v16 + 48))(v16, v14);
  v15 = v14[2] - 1;
  if (v14[2] == 1)
    goto LABEL_18;
LABEL_14:
  v14[2] = v15;
  return v17;
}

uint64_t WebCore::RefCountedPropertyWrapper<WebCore::ShapeValue>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, WTF **, __n128);
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __n128 v19;
  WTF *v20;
  char v21;
  uint64_t v22;
  uint64_t result;
  void *v24;
  WTF *v25;
  _DWORD *v26;
  _DWORD *v27;
  WTF *v28;
  uint64_t v29;

  v9 = (uint64_t (*)(_QWORD *, WTF **, __n128))a1[4];
  v8 = a1[5];
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *, WTF **, __n128))(*v10 + v9);
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = v15(v17);
  if (*(_BYTE *)(a5 + 8))
  {
    v19.n128_u64[0] = *(_QWORD *)a5;
    if (*(double *)a5 == 0.0)
      v20 = (WTF *)v14;
    else
      v20 = (WTF *)v18;
    if (v20)
      ++*(_DWORD *)v20;
    v28 = v20;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v18 + 8) + 56))(&v29, *(_QWORD *)(v18 + 8), *(_QWORD *)(v14 + 8), a5);
    v21 = *(_BYTE *)(v14 + 24);
    v22 = WTF::fastMalloc((WTF *)0x20);
    v19.n128_u64[0] = 1;
    *(_QWORD *)v22 = 1;
    *(_QWORD *)(v22 + 8) = v29;
    *(_QWORD *)(v22 + 16) = 0;
    *(_BYTE *)(v22 + 24) = v21;
    v28 = (WTF *)v22;
  }
  result = v9(v10, &v28, v19);
  v25 = v28;
  v28 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
    {
      v26 = (_DWORD *)*((_QWORD *)v25 + 2);
      *((_QWORD *)v25 + 2) = 0;
      if (v26)
      {
        if (v26[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
        else
          --v26[2];
      }
      v27 = (_DWORD *)*((_QWORD *)v25 + 1);
      *((_QWORD *)v25 + 1) = 0;
      if (v27)
      {
        if (v27[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
        else
          --v27[2];
      }
      return WTF::fastFree(v25, v24);
    }
    else
    {
      --*(_DWORD *)v25;
    }
  }
  return result;
}

uint64_t WebCore::PropertyWrapperShadow::requiresBlendingForAccumulativeIteration(WebCore::PropertyWrapperShadow *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  return 1;
}

BOOL WebCore::PropertyWrapperShadow::equals(WebCore::PropertyWrapperShadow *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  WebCore::Length *v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BOOL4 v13;
  _BOOL4 v14;
  BOOL v15;
  WebCore::Length *v16;
  BOOL v17;

  if (a2 == a3)
    return 1;
  v5 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3);
  v7 = (_QWORD *)((char *)a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (WebCore::Length *)v5(v7);
  v9 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v10 = *((_QWORD *)this + 3);
  v11 = (_QWORD *)((char *)a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  v13 = v8 != 0;
  v14 = v12 != 0;
  if (v8)
    v15 = v12 == 0;
  else
    v15 = 1;
  if (!v15)
  {
    v16 = (WebCore::Length *)v12;
    while (WebCore::ShadowData::operator==(v8, v16))
    {
      v8 = (WebCore::Length *)*((_QWORD *)v8 + 7);
      v16 = (WebCore::Length *)*((_QWORD *)v16 + 7);
      v13 = v8 != 0;
      v14 = v16 != 0;
      if (v8)
        v17 = v16 == 0;
      else
        v17 = 1;
      if (v17)
        return !v13 && !v14;
    }
    v14 = 1;
    v13 = 1;
  }
  return !v13 && !v14;
}

uint64_t WebCore::PropertyWrapperShadow::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v4;
  uint64_t (*v7)(_QWORD *);
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;

  if (a4)
    return 1;
  v7 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v7 = *(uint64_t (**)(_QWORD *))(*v9 + v7);
  v10 = v7(v9);
  v11 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = v11(v13);
  if (v10)
    v15 = v14 == 0;
  else
    v15 = 1;
  if (v15)
    return 1;
  do
  {
    v4 = *(unsigned __int8 *)(v10 + 48) == *(unsigned __int8 *)(v14 + 48);
    if (*(unsigned __int8 *)(v10 + 48) != *(unsigned __int8 *)(v14 + 48))
      break;
    v10 = *(_QWORD *)(v10 + 56);
    v14 = *(_QWORD *)(v14 + 56);
  }
  while (v10 && v14 != 0);
  return v4;
}

WebCore::ShadowData *WebCore::PropertyWrapperShadow::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v10)(_QWORD *);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD *);
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  void *v18;
  const WebCore::ShadowData *v19;
  unint64_t v20;
  const WebCore::ShadowData *v21;
  uint64_t v22;
  void (*v23)(_QWORD *, WebCore::ShadowData **, _QWORD);
  _QWORD *v24;
  WebCore::ShadowData *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD, _QWORD, _QWORD);
  _QWORD *v32;
  BOOL v33;
  BOOL v34;
  WebCore::ShadowData *result;
  WTF *v36;
  void *v37;
  WebCore::ShadowData *v38;
  WTF *v39;
  void *v40;
  const WebCore::ShadowData *v41;
  void *v42;
  __n128 v43;
  WTF *v44;
  WebCore::ShadowData *v45;
  WTF *v46;
  WTF *v47;
  void *v48;
  uint64_t v49;
  void (*v50)(_QWORD, _QWORD, _QWORD);
  void (*v51)(_QWORD, _QWORD, _QWORD);
  unsigned int v52;
  unint64_t v53;
  int64_t v54;
  unsigned int v55;
  unint64_t v56;
  int *v57;
  unint64_t v58;
  void *v59;
  const WebCore::ShadowData *v60;
  void *v61;
  const WebCore::ShadowData *v62;
  void *v63;
  __n128 v64;
  int *v65;
  WebCore::ShadowData *v66;
  WTF *v67;
  void *v68;
  WTF *v69;
  WTF *v71;
  _QWORD *v73;
  void (*v74)(_QWORD, _QWORD, _QWORD);
  void (*v75)(_QWORD, _QWORD, _QWORD);
  uint64_t v76;
  WTF *v77;
  int64_t v78;
  int *v79;
  WebCore::ShadowData *v80;
  WebCore::ShadowData *v81;
  int *v82;
  WTF *v83;
  int v84;
  unsigned int v85;
  _BYTE v86[32];
  WTF *v87;
  int v88;
  unsigned int v89;
  _BYTE v90[40];

  v10 = (uint64_t (*)(_QWORD *))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a3 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *))(*v12 + v10);
  v13 = v10(v12);
  v14 = (uint64_t (*)(_QWORD *))a1[2];
  v15 = a1[3];
  v16 = (_QWORD *)(a4 + (v15 >> 1));
  if ((v15 & 1) != 0)
    v14 = *(uint64_t (**)(_QWORD *))(*v16 + v14);
  v17 = v14(v16);
  v20 = v17;
  if (!*(_BYTE *)(a5 + 8))
  {
    v26 = 0;
    if (v13)
    {
      v27 = v13;
      do
      {
        ++v26;
        v27 = *(_QWORD *)(v27 + 56);
      }
      while (v27);
    }
    LODWORD(v28) = 0;
    if (v17)
    {
      v29 = v17;
      do
      {
        LODWORD(v28) = v28 + 1;
        v29 = *(_QWORD *)(v29 + 56);
      }
      while (v29);
    }
    if (v26 == (_DWORD)v28 || v26 <= 1 && (int)v28 <= 1)
    {
      v31 = (void (*)(_QWORD, _QWORD, _QWORD))a1[4];
      v30 = a1[5];
      v32 = (_QWORD *)(a2 + (v30 >> 1));
      if ((v30 & 1) != 0)
        v31 = *(void (**)(_QWORD, _QWORD, _QWORD))(*v32 + v31);
      v33 = v13 != 0;
      v34 = v17 != 0;
      if (v13 && v17 && *(_BYTE *)(a5 + 9) == 1)
      {
        WebCore::PropertyWrapperShadow::addShadowLists((WebCore::PropertyWrapperShadow *)&v80, (const WebCore::ShadowData *)v13, (const WebCore::ShadowData *)v17);
        goto LABEL_52;
      }
      v80 = 0;
      if (v13 | v17)
      {
        v73 = v32;
        v75 = v31;
        v77 = 0;
        v38 = 0;
        v39 = 0;
        while (1)
        {
          v40 = WebCore::shadowForBlending((void *)v13, (const WebCore::ShadowData *)v20, v19);
          v42 = WebCore::shadowForBlending((void *)v20, (const WebCore::ShadowData *)v13, v41);
          WebCore::blendFunc((int **)&v87, (uint64_t)v40, (uint64_t)v42, a3, a4, a5, v43);
          v44 = v87;
          if (v39)
            break;
          v77 = v87;
          v45 = v38;
          v46 = v87;
          if (v38)
            goto LABEL_36;
LABEL_37:
          if (v33)
          {
            v13 = *(_QWORD *)(v13 + 56);
            if (v34)
              goto LABEL_41;
          }
          else
          {
            v13 = 0;
            if (v34)
            {
LABEL_41:
              v20 = *(_QWORD *)(v20 + 56);
              goto LABEL_42;
            }
          }
          v20 = 0;
LABEL_42:
          v33 = v13 != 0;
          v34 = v20 != 0;
          v38 = v46;
          v39 = v44;
          if (!(v13 | v20))
          {
            v31 = v75;
            v80 = v77;
            v32 = v73;
            goto LABEL_52;
          }
        }
        v45 = (WebCore::ShadowData *)*((_QWORD *)v39 + 7);
        *((_QWORD *)v39 + 7) = v87;
        v46 = v38;
        if (!v45)
          goto LABEL_37;
LABEL_36:
        WebCore::ShadowData::~ShadowData(v45);
        WTF::fastFree(v47, v48);
        goto LABEL_37;
      }
LABEL_52:
      v31(v32, &v80, 0);
      result = v80;
      v80 = 0;
      if (!result)
        return result;
LABEL_30:
      WebCore::ShadowData::~ShadowData(result);
      return (WebCore::ShadowData *)WTF::fastFree(v36, v37);
    }
    v50 = (void (*)(_QWORD, _QWORD, _QWORD))a1[4];
    v49 = a1[5];
    v76 = a2 + (v49 >> 1);
    if ((v49 & 1) != 0)
      v50 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a2 + (v49 >> 1)) + v50);
    v51 = v50;
    if (v13 && v17 && *(_BYTE *)(a5 + 9))
    {
      WebCore::PropertyWrapperShadow::addShadowLists((WebCore::PropertyWrapperShadow *)&v79, (const WebCore::ShadowData *)v13, (const WebCore::ShadowData *)v17);
      goto LABEL_95;
    }
    v78 = v26;
    v87 = (WTF *)v90;
    v88 = 4;
    v89 = v26;
    if (v26 < 5)
    {
      v52 = v26;
      if (!v26)
        goto LABEL_61;
    }
    else
    {
      if (v26 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x195655208);
      }
      v88 = v26;
      v87 = (WTF *)WTF::fastMalloc((WTF *)(8 * v26));
      v52 = v89;
    }
    if (v26 - 1 >= v52)
    {
      __break(0xC471u);
      JUMPOUT(0x1956551F8);
    }
    v53 = v26 + 1;
    do
    {
      *((_QWORD *)v87 + (v53 - 2)) = v13;
      v13 = *(_QWORD *)(v13 + 56);
      --v53;
    }
    while (v53 > 1);
LABEL_61:
    v74 = v51;
    v54 = (int)v28;
    v83 = (WTF *)v86;
    v84 = 4;
    v85 = v28;
    if (v28 < 5)
    {
      v55 = v28;
      if (!(_DWORD)v28)
      {
LABEL_68:
        v79 = 0;
        if (v26 <= (int)v28)
          v28 = v28;
        else
          v28 = v26;
        if ((int)v28 >= 1)
        {
          v57 = 0;
          v58 = 0;
          while (1)
          {
            if ((uint64_t)v58 >= v78)
            {
              v59 = 0;
            }
            else
            {
              if (v58 >= v89)
              {
                __break(0xC471u);
                goto LABEL_103;
              }
              v59 = (void *)*((_QWORD *)v87 + v58);
            }
            if ((uint64_t)v58 >= v54)
            {
              v60 = 0;
            }
            else
            {
              if (v58 >= v85)
              {
                __break(0xC471u);
                JUMPOUT(0x1956551F0);
              }
              v60 = (const WebCore::ShadowData *)*((_QWORD *)v83 + v58);
            }
            v61 = WebCore::shadowForBlending(v59, v60, v19);
            v63 = WebCore::shadowForBlending(v60, (const WebCore::ShadowData *)v59, v62);
            WebCore::blendFunc(&v82, (uint64_t)v61, (uint64_t)v63, a3, a4, a5, v64);
            v65 = v82;
            v66 = (WebCore::ShadowData *)*((_QWORD *)v82 + 7);
            *((_QWORD *)v82 + 7) = v57;
            if (v66)
            {
              WebCore::ShadowData::~ShadowData(v66);
              WTF::fastFree(v67, v68);
            }
            ++v58;
            v57 = v65;
            if (v28 == v58)
            {
              v79 = v65;
              break;
            }
          }
        }
        v69 = v83;
        if (v86 != (_BYTE *)v83 && v83 != 0)
        {
          v83 = 0;
          v84 = 0;
          WTF::fastFree(v69, v18);
        }
        v71 = v87;
        v51 = v74;
        if (v90 != (_BYTE *)v87 && v87 != 0)
        {
          v87 = 0;
          v88 = 0;
          WTF::fastFree(v71, v18);
        }
LABEL_95:
        v51(v76, &v79, 0);
        result = (WebCore::ShadowData *)v79;
        v79 = 0;
        if (!result)
          return result;
        goto LABEL_30;
      }
    }
    else
    {
      if (v28 >> 29)
      {
        __break(0xC471u);
LABEL_103:
        JUMPOUT(0x1956551E8);
      }
      v84 = v28;
      v83 = (WTF *)WTF::fastMalloc((WTF *)(8 * (int)v28));
      v55 = v85;
    }
    if ((int)v28 - 1 >= v55)
    {
      __break(0xC471u);
      JUMPOUT(0x195655200);
    }
    v56 = v28 + 1;
    do
    {
      *((_QWORD *)v83 + (v56 - 2)) = v20;
      v20 = *(_QWORD *)(v20 + 56);
      --v56;
    }
    while (v56 > 1);
    goto LABEL_68;
  }
  if (*(double *)a5 == 0.0)
    v21 = (const WebCore::ShadowData *)v13;
  else
    v21 = (const WebCore::ShadowData *)v17;
  v23 = (void (*)(_QWORD *, WebCore::ShadowData **, _QWORD))a1[4];
  v22 = a1[5];
  v24 = (_QWORD *)(a2 + (v22 >> 1));
  if ((v22 & 1) != 0)
    v23 = *(void (**)(_QWORD *, WebCore::ShadowData **, _QWORD))(*v24 + v23);
  if (v21)
  {
    v25 = (WebCore::ShadowData *)WTF::fastMalloc((WTF *)0x40);
    v81 = WebCore::ShadowData::ShadowData(v25, v21);
  }
  else
  {
    v81 = 0;
  }
  v23(v24, &v81, 0);
  result = v81;
  v81 = 0;
  if (result)
    goto LABEL_30;
  return result;
}

WebCore::ShadowData *WebCore::PropertyWrapperShadow::addShadowLists(WebCore::PropertyWrapperShadow *this, const WebCore::ShadowData *a2, const WebCore::ShadowData *a3)
{
  WebCore::ShadowData *v6;
  WebCore::ShadowData *v7;
  WebCore::ShadowData *v8;
  WebCore::ShadowData *v9;
  WebCore::ShadowData *v10;
  WTF *v11;
  void *v12;
  WebCore::ShadowData *v13;
  WebCore::ShadowData *result;
  WTF *v15;
  void *v16;

  v6 = 0;
  v7 = 0;
  *(_QWORD *)this = 0;
  do
  {
    v8 = v7;
    v7 = (WebCore::ShadowData *)WTF::fastMalloc((WTF *)0x40);
    WebCore::ShadowData::ShadowData(v7, a3);
    if (v8)
    {
      v9 = (WebCore::ShadowData *)*((_QWORD *)v8 + 7);
      *((_QWORD *)v8 + 7) = v7;
      v10 = v6;
      if (!v9)
        goto LABEL_5;
LABEL_4:
      WebCore::ShadowData::~ShadowData(v9);
      WTF::fastFree(v11, v12);
      goto LABEL_5;
    }
    *(_QWORD *)this = v7;
    v10 = v7;
    v9 = v6;
    if (v6)
      goto LABEL_4;
LABEL_5:
    a3 = (const WebCore::ShadowData *)*((_QWORD *)a3 + 7);
    v6 = v10;
  }
  while (a3);
  do
  {
    v13 = (WebCore::ShadowData *)WTF::fastMalloc((WTF *)0x40);
    WebCore::ShadowData::ShadowData(v13, a2);
    result = (WebCore::ShadowData *)*((_QWORD *)v7 + 7);
    *((_QWORD *)v7 + 7) = v13;
    if (result)
    {
      WebCore::ShadowData::~ShadowData(result);
      result = (WebCore::ShadowData *)WTF::fastFree(v15, v16);
    }
    a2 = (const WebCore::ShadowData *)*((_QWORD *)a2 + 7);
    v7 = v13;
  }
  while (a2);
  return result;
}

void *WebCore::shadowForBlending(void *this, const WebCore::ShadowData *a2, const WebCore::ShadowData *a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const WebCore::ShadowData *v9;
  const WebCore::ShadowData *v10;
  const WebCore::ShadowData *v11;
  const WebCore::ShadowData *v12;
  unsigned int v13;
  __int16 v14;
  char v15;
  unsigned int v16;
  __int16 v17;
  char v18;
  unsigned int v19;
  __int16 v20;
  char v21;
  unsigned int v22;
  __int16 v23;
  char v24;

  if ((_MergedGlobals_154[0] & 1) == 0)
  {
    v5 = (uint64_t)this;
    v9 = a2;
    v20 = 4;
    v21 = 0;
    v19 = 0;
    v23 = 4;
    v24 = 0;
    v22 = 0;
    v16 = 0;
    v17 = 4;
    v18 = 0;
    v13 = 0;
    v14 = 4;
    v15 = 0;
    WTF::NeverDestroyed<WebCore::ShadowData,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WebCore::LengthPoint,WebCore::Length,WebCore::Length,WebCore::ShadowStyle,BOOL,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&>((uint64_t)&unk_1ECE821C0, (uint64_t)&v19, (int *)&v16, (uint64_t)&v13, 0, 0);
    if (v14 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v13);
    }
    if (v17 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v16);
    }
    if (v23 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v22);
    }
    if (v20 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v19);
    }
    _MergedGlobals_154[0] = 1;
    this = (void *)v5;
    a2 = v9;
  }
  if ((byte_1ECE821B1 & 1) == 0)
  {
    v6 = (uint64_t)this;
    v10 = a2;
    v20 = 4;
    v21 = 0;
    v19 = 0;
    v23 = 4;
    v24 = 0;
    v22 = 0;
    v16 = 0;
    v17 = 4;
    v18 = 0;
    v13 = 0;
    v14 = 4;
    v15 = 0;
    WTF::NeverDestroyed<WebCore::ShadowData,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WebCore::LengthPoint,WebCore::Length,WebCore::Length,WebCore::ShadowStyle,BOOL,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&>((uint64_t)&unk_1ECE82200, (uint64_t)&v19, (int *)&v16, (uint64_t)&v13, 1, 0);
    if (v14 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v13);
    }
    if (v17 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v16);
    }
    if (v23 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v22);
    }
    if (v20 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v19);
    }
    byte_1ECE821B1 = 1;
    this = (void *)v6;
    a2 = v10;
  }
  if ((byte_1ECE821B2 & 1) == 0)
  {
    v7 = (uint64_t)this;
    v11 = a2;
    v20 = 4;
    v21 = 0;
    v19 = 0;
    v23 = 4;
    v24 = 0;
    v22 = 0;
    v16 = 0;
    v17 = 4;
    v18 = 0;
    v13 = 0;
    v14 = 4;
    v15 = 0;
    WTF::NeverDestroyed<WebCore::ShadowData,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WebCore::LengthPoint,WebCore::Length,WebCore::Length,WebCore::ShadowStyle,BOOL,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&>((uint64_t)&unk_1ECE82240, (uint64_t)&v19, (int *)&v16, (uint64_t)&v13, 0, 1);
    if (v14 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v13);
    }
    if (v17 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v16);
    }
    if (v23 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v22);
    }
    if (v20 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v19);
    }
    byte_1ECE821B2 = 1;
    this = (void *)v7;
    a2 = v11;
  }
  if ((byte_1ECE821B3 & 1) != 0)
  {
    if (this)
      return this;
    goto LABEL_6;
  }
  v8 = (uint64_t)this;
  v12 = a2;
  v20 = 4;
  v21 = 0;
  v19 = 0;
  v23 = 4;
  v24 = 0;
  v22 = 0;
  v16 = 0;
  v17 = 4;
  v18 = 0;
  v13 = 0;
  v14 = 4;
  v15 = 0;
  WTF::NeverDestroyed<WebCore::ShadowData,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WebCore::LengthPoint,WebCore::Length,WebCore::Length,WebCore::ShadowStyle,BOOL,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&>((uint64_t)&unk_1ECE82280, (uint64_t)&v19, (int *)&v16, (uint64_t)&v13, 1, 1);
  if (v14 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v13);
  }
  if (v17 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v16);
  }
  if (v23 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v22);
  }
  if (v20 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v19);
  }
  byte_1ECE821B3 = 1;
  this = (void *)v8;
  a2 = v12;
  if (!v8)
  {
LABEL_6:
    if (*((_BYTE *)a2 + 49))
      v3 = &unk_1ECE82240;
    else
      v3 = &unk_1ECE821C0;
    v4 = &unk_1ECE82200;
    if (*((_BYTE *)a2 + 49))
      v4 = &unk_1ECE82280;
    if (*((_BYTE *)a2 + 48) == 1)
      return v4;
    else
      return v3;
  }
  return this;
}

int *WebCore::blendFunc(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 a7)
{
  __n128 v13;
  __n128 v14;
  __n128 v15;
  int v16;
  double v17;
  double v18;
  double v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  int *result;
  void *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  double v36;
  double v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  char v50;
  unsigned int v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  char v54;
  unsigned int v55;
  __int16 v56;
  char v57;
  unsigned int v58;
  __int16 v59;
  char v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65[2];
  unsigned int v66[2];
  char v67;

  WebCore::blend((unsigned __int8 *)a2, (unsigned __int8 *)a3, a6, (uint64_t)&v61, a7);
  WebCore::blend((unsigned __int8 *)(a2 + 8), (unsigned __int8 *)(a3 + 8), a6, (uint64_t)v66, v13);
  v55 = 0;
  v57 = 0;
  v56 = WORD2(v61);
  if (BYTE4(v61) - 2 >= 9)
  {
    if (BYTE4(v61) != 11)
      goto LABEL_4;
  }
  else
  {
    v57 = BYTE6(v61);
    if (BYTE6(v61))
    {
      v14.n128_u32[0] = v61;
      v55 = v61;
      goto LABEL_4;
    }
  }
  v55 = v61;
LABEL_4:
  v58 = 0;
  v60 = 0;
  v59 = v66[1];
  if (LOBYTE(v66[1]) - 2 >= 9)
  {
    if (LOBYTE(v66[1]) != 11)
      goto LABEL_7;
  }
  else
  {
    v60 = BYTE2(v66[1]);
    if (BYTE2(v66[1]))
    {
      v14.n128_u32[0] = v66[0];
      v58 = v66[0];
      goto LABEL_7;
    }
  }
  v58 = v66[0];
LABEL_7:
  WebCore::blend((unsigned __int8 *)(a2 + 24), (unsigned __int8 *)(a3 + 24), a6, 1, (uint64_t)&v51, v14);
  WebCore::blend((unsigned __int8 *)(a2 + 16), (unsigned __int8 *)(a3 + 16), a6, (uint64_t)&v47, v15);
  v16 = *(unsigned __int8 *)(a2 + 48);
  if (v16 != *(unsigned __int8 *)(a3 + 48))
  {
    v17 = 0.0;
    if (*(_BYTE *)(a2 + 48))
      v18 = 0.0;
    else
      v18 = 1.0;
    if (!*(_BYTE *)(a3 + 48))
      v17 = 1.0;
    if (*(_BYTE *)(a6 + 10) == 1)
    {
      v36 = *(double *)(a6 + 16);
      if (v36 != 0.0)
      {
        v37 = v36 * v17;
        v18 = v37 + v18;
        v17 = v37 + v17;
      }
    }
    v19 = v18 + v18;
    if (!*(_BYTE *)(a6 + 9))
      v19 = v18;
    LOBYTE(v16) = v19 + (v17 - v18) * *(double *)a6 <= 0.0;
  }
  v20 = *(unsigned __int8 *)(a2 + 49);
  v21 = *(_QWORD *)(a4 + 32) + 328;
  v61 = v65;
  v62 = v65;
  v63 = v65;
  v64 = v65;
  *(_QWORD *)v65 = v21;
  v22 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v22 == -1)
    goto LABEL_71;
  *(_QWORD *)v66 = &v61;
  ((void (*)(unint64_t *__return_ptr, unsigned int *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v22])(&v45, v66, a2 + 32);
  v23 = *(_QWORD *)(a5 + 32) + 328;
  v64 = v65;
  *(_QWORD *)v65 = v23;
  v61 = v65;
  v62 = v65;
  v63 = v65;
  v24 = *(unsigned int *)(a3 + 40);
  if ((_DWORD)v24 == -1)
  {
LABEL_71:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_72:
    result = (int *)(v33 & 0xFFFFFFFFFFFFLL);
    do
    {
      v38 = __ldaxr((unsigned int *)result);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, (unsigned int *)result));
    if (!v39)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (int *)WTF::fastFree((WTF *)result, v32);
    }
    goto LABEL_32;
  }
  *(_QWORD *)v66 = &v61;
  ((void (*)(uint64_t *__return_ptr, unsigned int *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v24])(&v44, v66, a3 + 32);
  WebCore::blend(&v45, (uint64_t)&v44, a6, &v46, v25, v26, v27, v28);
  v29 = WTF::fastMalloc((WTF *)0x40);
  v66[0] = 0;
  LOBYTE(v66[1]) = v52;
  *(_WORD *)((char *)&v66[1] + 1) = v53;
  if (v52 - 2 < 9)
  {
    BYTE2(v66[1]) = v54;
    if (v54)
    {
      v66[0] = v51;
      goto LABEL_22;
    }
    v34 = v51;
    goto LABEL_40;
  }
  if (v52 == 11)
  {
    v34 = v51;
    v51 = 0;
LABEL_40:
    v66[0] = v34;
  }
LABEL_22:
  v52 = 0;
  v65[0] = 0;
  LOBYTE(v65[1]) = v48;
  *(_WORD *)((char *)&v65[1] + 1) = v49;
  if (v48 - 2 < 9)
  {
    BYTE2(v65[1]) = v50;
    if (v50)
    {
      v65[0] = v47;
      goto LABEL_25;
    }
    v35 = v47;
    goto LABEL_42;
  }
  if (v48 == 11)
  {
    v35 = v47;
    v47 = 0;
LABEL_42:
    v65[0] = v35;
  }
LABEL_25:
  v48 = 0;
  v30 = v46;
  if (v46)
    v46 = 0;
  v61 = (unsigned int *)v30;
  LODWORD(v62) = 0;
  result = (int *)WebCore::ShadowData::ShadowData(v29, (uint64_t)&v55, (uint64_t)v66, (uint64_t)v65, v16, v20 != 0, (uint64_t)&v61);
  *a1 = result;
  if ((_DWORD)v62 != -1)
    result = (int *)((uint64_t (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v62])(&v67, &v61);
  if (LOBYTE(v65[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v65[0]);
  }
  if (LOBYTE(v66[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v66[0]);
  }
  v33 = v46;
  if ((v46 & 0x8000000000000) != 0)
    goto LABEL_72;
LABEL_32:
  if ((v44 & 0x8000000000000) != 0)
  {
    result = (int *)(v44 & 0xFFFFFFFFFFFFLL);
    do
    {
      v40 = __ldaxr((unsigned int *)result);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, (unsigned int *)result));
    if (!v41)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (int *)WTF::fastFree((WTF *)result, v32);
    }
  }
  if ((v45 & 0x8000000000000) != 0)
  {
    result = (int *)(v45 & 0xFFFFFFFFFFFFLL);
    do
    {
      v42 = __ldaxr((unsigned int *)result);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, (unsigned int *)result));
    if (!v43)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (int *)WTF::fastFree((WTF *)result, v32);
    }
  }
  if (v48 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v47);
  }
  if (v52 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v51);
  }
  if (v59 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v58);
  }
  if (v56 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v55);
  }
  return result;
}

uint64_t WTF::NeverDestroyed<WebCore::ShadowData,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WebCore::LengthPoint,WebCore::Length,WebCore::Length,WebCore::ShadowStyle,BOOL,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, char a5, char a6)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned __int8 v13;
  char v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  char v18;
  char v19;
  char v20;

  v16 = 0;
  v19 = 0;
  v17 = *((_BYTE *)a3 + 4);
  v18 = *((_BYTE *)a3 + 5);
  if (v17 - 2 < 9)
  {
    v19 = *((_BYTE *)a3 + 6);
    if (v19)
    {
      v16 = *a3;
      goto LABEL_4;
    }
    v8 = *a3;
    goto LABEL_13;
  }
  if (v17 == 11)
  {
    v8 = *a3;
    *a3 = 0;
LABEL_13:
    v16 = v8;
  }
LABEL_4:
  *((_BYTE *)a3 + 4) = 0;
  v12 = 0;
  v15 = 0;
  v13 = *(_BYTE *)(a4 + 4);
  v14 = *(_BYTE *)(a4 + 5);
  if (v13 - 2 < 9)
  {
    v15 = *(_BYTE *)(a4 + 6);
    if (v15)
    {
      v12 = *(_DWORD *)a4;
      goto LABEL_7;
    }
    v9 = *(_DWORD *)a4;
    goto LABEL_15;
  }
  if (v13 == 11)
  {
    v9 = *(_DWORD *)a4;
    *(_DWORD *)a4 = 0;
LABEL_15:
    v12 = v9;
  }
LABEL_7:
  *(_BYTE *)(a4 + 4) = 0;
  v10 = 0x1104000000000000;
  v11 = 0;
  WebCore::ShadowData::ShadowData(a1, a2, (uint64_t)&v16, (uint64_t)&v12, a5, a6 != 0, (uint64_t)&v10);
  if (v11 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v11])(&v20, &v10);
  if (v13 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v12);
  }
  if (v17 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v16);
  }
  return a1;
}

uint64_t WebCore::PropertyWrapperVisitedAffectedSVGPaint::PropertyWrapperVisitedAffectedSVGPaint(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13)
{
  uint64_t v20;
  uint64_t v21;

  *(_WORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = off_1E338DB98;
  v20 = WTF::fastMalloc((WTF *)0x40);
  *(_WORD *)(v20 + 8) = a2;
  *(_QWORD *)v20 = off_1E338DBF8;
  *(_QWORD *)(v20 + 16) = a3;
  *(_QWORD *)(v20 + 24) = a4;
  *(_QWORD *)(v20 + 32) = a5;
  *(_QWORD *)(v20 + 40) = a6;
  *(_QWORD *)(v20 + 48) = a7;
  *(_QWORD *)(v20 + 56) = a8;
  *(_QWORD *)(a1 + 16) = v20;
  v21 = WTF::fastMalloc((WTF *)0x40);
  *(_WORD *)(v21 + 8) = a2;
  *(_QWORD *)v21 = off_1E338DBF8;
  *(_QWORD *)(v21 + 16) = a9;
  *(_QWORD *)(v21 + 24) = a10;
  *(_OWORD *)(v21 + 32) = a11;
  *(_QWORD *)(v21 + 48) = a12;
  *(_QWORD *)(v21 + 56) = a13;
  *(_QWORD *)(a1 + 24) = v21;
  return a1;
}

void WebCore::PropertyWrapperVisitedAffectedSVGPaint::~PropertyWrapperVisitedAffectedSVGPaint(WebCore::PropertyWrapperVisitedAffectedSVGPaint *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E338DB98;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
}

{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E338DB98;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::PropertyWrapperVisitedAffectedSVGPaint::equals(WebCore::PropertyWrapperSVGPaint **this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t result;

  result = WebCore::PropertyWrapperSVGPaint::equals(this[2], a2, a3);
  if ((_DWORD)result)
    return WebCore::PropertyWrapperSVGPaint::equals(this[3], a2, a3);
  return result;
}

uint64_t WebCore::PropertyWrapperVisitedAffectedSVGPaint::blend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  WebCore::PropertyWrapperSVGPaint::blend(*(_QWORD **)(a1 + 16), a2, a3, a4, a5);
  return WebCore::PropertyWrapperSVGPaint::blend(*(_QWORD **)(a1 + 24), a2, a3, a4, a5);
}

uint64_t WebCore::PropertyWrapperSVGPaint::equals(WebCore::PropertyWrapperSVGPaint *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v3;
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  int v9;
  unsigned int (*v10)(_QWORD *);
  uint64_t v11;
  _QWORD *v12;
  unsigned int (*v13)(_QWORD *);
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)(_QWORD *);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD *);
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  BOOL v27;
  unint64_t v28;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  float v42[6];
  uint64_t v43;
  __int128 v44;
  uint64_t *v45;
  uint64_t *v46;

  if (a2 == a3)
    return 1;
  v3 = (uint64_t)a3;
  v6 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = (_QWORD *)((char *)a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
  v9 = v6(v8);
  v10 = (unsigned int (*)(_QWORD *))*((_QWORD *)this + 2);
  v11 = *((_QWORD *)this + 3);
  v12 = (_QWORD *)(v3 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(unsigned int (**)(_QWORD *))(*v12 + v10);
  if (v9 != v10(v12))
    return 0;
  v13 = (unsigned int (*)(_QWORD *))*((_QWORD *)this + 2);
  v14 = *((_QWORD *)this + 3);
  v15 = (_QWORD *)((char *)a2 + (v14 >> 1));
  if ((v14 & 1) != 0)
    v13 = *(unsigned int (**)(_QWORD *))(*v15 + v13);
  if (v13(v15))
    return 1;
  v16 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 4);
  v17 = *((_QWORD *)this + 5);
  v18 = (_QWORD *)((char *)a2 + (v17 >> 1));
  if ((v17 & 1) != 0)
    v16 = *(uint64_t (**)(_QWORD *))(*v18 + v16);
  v19 = v16(v18);
  *(_QWORD *)&v44 = &v38;
  *((_QWORD *)&v44 + 1) = &v38;
  v45 = &v38;
  v46 = &v38;
  v20 = *(unsigned int *)(v19 + 8);
  if ((_DWORD)v20 == -1)
    goto LABEL_37;
  *(_QWORD *)v42 = &v44;
  ((void (*)(uint64_t *__return_ptr, float *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v20])(&v40, v42, v19);
  v21 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 4);
  v22 = *((_QWORD *)this + 5);
  v23 = (_QWORD *)(v3 + (v22 >> 1));
  if ((v22 & 1) != 0)
    v21 = *(uint64_t (**)(_QWORD *))(*v23 + v21);
  v24 = v21(v23);
  *(_QWORD *)&v44 = &v43;
  *((_QWORD *)&v44 + 1) = &v43;
  v45 = &v43;
  v46 = &v43;
  v25 = *(unsigned int *)(v24 + 8);
  if ((_DWORD)v25 == -1)
    goto LABEL_37;
  *(_QWORD *)v42 = &v44;
  ((void (*)(uint64_t *__return_ptr, float *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v25])(&v38, v42, v24);
  v43 = *((_QWORD *)a2 + 4) + 328;
  *(_QWORD *)&v44 = &v43;
  *((_QWORD *)&v44 + 1) = &v43;
  v45 = &v43;
  v46 = &v43;
  if (v41 == -1
    || (*(_QWORD *)v42 = &v44,
        ((void (*)(unint64_t *__return_ptr, float *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v41])(&v37, v42, &v40), v43 = *(_QWORD *)(v3 + 32) + 328, *(_QWORD *)&v44 = &v43, *((_QWORD *)&v44 + 1) = &v43, v45 = &v43, v46 = &v43, v39 == -1))
  {
LABEL_37:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_38;
  }
  *(_QWORD *)v42 = &v44;
  ((void (*)(unint64_t *__return_ptr, float *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v39])(&v36, v42, &v38);
  if (v41 == 1 && v39 == 1)
  {
    v3 = 1;
    goto LABEL_26;
  }
  if ((v37 & 0x8000000000000) != 0)
  {
    if ((v36 & 0x8000000000000) == 0
      || (v44 = *(_OWORD *)((v37 & 0xFFFFFFFFFFFFLL) + 4),
          *(_OWORD *)v42 = *(_OWORD *)((v36 & 0xFFFFFFFFFFFFLL) + 4),
          !WebCore::operator==<float,4ul>((float *)&v44, v42))
      || HIBYTE(v37) != HIBYTE(v36))
    {
      v3 = 0;
      goto LABEL_26;
    }
    v27 = BYTE6(v37) == BYTE6(v36);
  }
  else
  {
    v27 = (v36 & 0x8000000000000) == 0 && v37 == v36;
  }
  v3 = v27;
LABEL_26:
  v28 = v36;
  if ((v36 & 0x8000000000000) != 0)
  {
LABEL_38:
    v30 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, v26);
    }
  }
  if ((v37 & 0x8000000000000) != 0)
  {
    v33 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFLL);
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v33);
      WTF::fastFree((WTF *)v33, v26);
    }
  }
  if (v39 != -1)
    ((void (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v39])(&v44, &v38);
  if (v41 != -1)
    ((void (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v41])(&v44, &v40);
  return v3;
}

uint64_t WebCore::PropertyWrapperSVGPaint::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (**v5)();
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v18)(_QWORD *);
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD *);
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t (*v34)(_QWORD *, uint64_t **);
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t **v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t **v57;

  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  result = v11(v13);
  if ((result & 0xFFFFFFFD) == 0)
  {
    v15 = (uint64_t (*)(_QWORD *))a1[2];
    v16 = a1[3];
    v17 = (_QWORD *)(a4 + (v16 >> 1));
    if ((v16 & 1) != 0)
      v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
    result = v15(v17);
    if ((result & 0xFFFFFFFD) == 0)
    {
      v18 = (uint64_t (*)(_QWORD *))a1[4];
      v19 = a1[5];
      v20 = (_QWORD *)(a3 + (v19 >> 1));
      if ((v19 & 1) != 0)
        v18 = *(uint64_t (**)(_QWORD *))(*v20 + v18);
      v21 = v18(v20);
      v53 = (uint64_t *)&v57;
      v54 = (uint64_t *)&v57;
      v55 = (uint64_t *)&v57;
      v56 = (uint64_t *)&v57;
      v22 = *(unsigned int *)(v21 + 8);
      if ((_DWORD)v22 == -1)
        goto LABEL_32;
      v48 = &v53;
      v5 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix;
      ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v22])(&v50, &v48, v21);
      v23 = (uint64_t (*)(_QWORD *))a1[4];
      v24 = a1[5];
      v25 = (_QWORD *)(a4 + (v24 >> 1));
      if ((v24 & 1) != 0)
        v23 = *(uint64_t (**)(_QWORD *))(*v25 + v23);
      v26 = v23(v25);
      v53 = &v52;
      v54 = &v52;
      v55 = &v52;
      v56 = &v52;
      v27 = *(unsigned int *)(v26 + 8);
      if ((_DWORD)v27 == -1)
        goto LABEL_32;
      v57 = &v53;
      ((void (*)(uint64_t ***__return_ptr, uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v27])(&v48, &v57, v26);
      v5 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix;
      if (v51 == 1 && v49 == 1)
      {
        v28 = 1;
LABEL_28:
        result = ((uint64_t (*)(uint64_t **, uint64_t ***))v5[v28])(&v53, &v48);
LABEL_29:
        if (v51 != -1)
          return ((uint64_t (*)(uint64_t **, uint64_t *))v5[v51])(&v53, &v50);
        return result;
      }
      v52 = *(_QWORD *)(a3 + 32) + 328;
      v53 = &v52;
      v54 = &v52;
      v55 = &v52;
      v56 = &v52;
      if (v51 == -1
        || (v57 = &v53,
            ((void (*)(unint64_t *__return_ptr, uint64_t ***, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v51])(&v47, &v57, &v50), v52 = *(_QWORD *)(a4 + 32) + 328, v53 = &v52, v54 = &v52, v55 = &v52, v56 = &v52, v49 == -1))
      {
LABEL_32:
        std::__throw_bad_variant_access[abi:sn180100]();
      }
      else
      {
        v57 = &v53;
        ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v49])(&v46, &v57, &v48);
        v34 = (uint64_t (*)(_QWORD *, uint64_t **))a1[6];
        v33 = a1[7];
        v35 = (_QWORD *)(a2 + (v33 >> 1));
        if ((v33 & 1) != 0)
          v34 = *(uint64_t (**)(_QWORD *, uint64_t **))(*v35 + v34);
        WebCore::blend(&v47, (uint64_t)&v46, a5, &v45, v29, v30, v31, v32);
        v36 = v45;
        if (v45)
          v45 = 0;
        v53 = (uint64_t *)v36;
        LODWORD(v54) = 0;
        result = v34(v35, &v53);
        if ((_DWORD)v54 != -1)
          result = ((uint64_t (*)(uint64_t ***, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v54])(&v57, &v53);
        LODWORD(v54) = -1;
        v38 = v45;
        if ((v45 & 0x8000000000000) == 0)
        {
LABEL_25:
          if ((v46 & 0x8000000000000) != 0)
          {
            result = v46 & 0xFFFFFFFFFFFFLL;
            do
            {
              v41 = __ldaxr((unsigned int *)result);
              v42 = v41 - 1;
            }
            while (__stlxr(v42, (unsigned int *)result));
            if (!v42)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v37);
            }
          }
          if ((v47 & 0x8000000000000) != 0)
          {
            result = v47 & 0xFFFFFFFFFFFFLL;
            do
            {
              v43 = __ldaxr((unsigned int *)result);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, (unsigned int *)result));
            if (!v44)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v37);
            }
          }
          v28 = v49;
          if (v49 == -1)
            goto LABEL_29;
          goto LABEL_28;
        }
      }
      result = v38 & 0xFFFFFFFFFFFFLL;
      do
      {
        v39 = __ldaxr((unsigned int *)result);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, (unsigned int *)result));
      if (!v40)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v37);
      }
      goto LABEL_25;
    }
  }
  return result;
}

_QWORD *WebCore::RenderStyle::strokeDashArray@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(this[7] + 24);
  v4 = *(unsigned int *)(v3 + 76);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      this = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v4));
      *(_DWORD *)(a2 + 8) = v4;
      *(_QWORD *)a2 = this;
      v5 = *(unsigned int *)(v3 + 76);
      if ((_DWORD)v5)
      {
        v6 = *(uint64_t **)(v3 + 64);
        v7 = 8 * v5;
        do
        {
          v8 = *v6++;
          *this++ = v8;
          v7 -= 8;
        }
        while (v7);
      }
    }
  }
  return this;
}

WebCore::SVGRenderStyle **WebCore::RenderStyle::setStrokeDashArray(WebCore::SVGRenderStyle **result, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  WebCore::SVGRenderStyle **v8;
  void *v9;
  uint64_t v10;
  float *v11;
  unint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  void *v18;
  WTF *v19;
  void *v20;
  int *v21;

  v3 = (uint64_t)result[7];
  if (*(_DWORD *)v3 != 1)
  {
    v8 = result;
    WebCore::SVGRenderStyle::copy(result[7], &v21);
    v3 = (uint64_t)v21;
    result = (WebCore::SVGRenderStyle **)v8[7];
    v8[7] = (WebCore::SVGRenderStyle *)v21;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle((WebCore::SVGRenderStyle *)result, v9);
        result = (WebCore::SVGRenderStyle **)WTF::fastFree(v19, v20);
        v3 = (uint64_t)v8[7];
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v6 = *(_QWORD *)(v3 + 24);
  v4 = (uint64_t *)(v3 + 24);
  v5 = v6;
  v7 = *(unsigned int *)(v6 + 76);
  if ((_DWORD)v7 != *(_DWORD *)(a2 + 12))
    goto LABEL_15;
  if (!(_DWORD)v7)
    return result;
  v10 = *(_QWORD *)(v5 + 64);
  v11 = *(float **)a2;
  if (*(float *)v10 == **(float **)a2
    && (unsigned __int16)*(_DWORD *)(v10 + 4) == (unsigned __int16)*((_DWORD *)v11 + 1))
  {
    v12 = 0;
    v13 = v10 + 8;
    v14 = v11 + 2;
    while (v7 - 1 != v12)
    {
      v15 = v13 + 8 * v12;
      v16 = &v14[2 * v12++];
      if (*(float *)v15 != *v16 || (unsigned __int16)*(_DWORD *)(v15 + 4) != (unsigned __int16)*((_DWORD *)v16 + 1))
      {
        if (v12 >= v7)
          return result;
        goto LABEL_15;
      }
    }
  }
  else
  {
LABEL_15:
    if (*(_DWORD *)v5 != 1)
    {
      v17 = WTF::fastMalloc((WTF *)0x58);
      v21 = WebCore::StyleStrokeData::StyleStrokeData(v17, v5);
      WTF::Ref<WebCore::StyleStrokeData,WTF::RawPtrTraits<WebCore::StyleStrokeData>,WTF::DefaultRefDerefTraits<WebCore::StyleStrokeData>>::operator=(v4, (uint64_t *)&v21);
      WTF::Ref<WebCore::StyleStrokeData,WTF::RawPtrTraits<WebCore::StyleStrokeData>,WTF::DefaultRefDerefTraits<WebCore::StyleStrokeData>>::~Ref((uint64_t *)&v21, v18);
      v5 = *v4;
    }
    return (WebCore::SVGRenderStyle **)WTF::Vector<WebCore::SVGLengthValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v5 + 64, a2);
  }
  return result;
}

uint64_t WebCore::StrokeDasharrayPropertyWrapper::isAdditiveOrCumulative(WebCore::StrokeDasharrayPropertyWrapper *this)
{
  return 0;
}

uint64_t WebCore::PropertyWrapperGetter<WTF::Vector<WebCore::SVGLengthValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(WTF **__return_ptr, _QWORD *);
  _QWORD *v7;
  uint64_t v8;
  void (*v9)(WTF **__return_ptr, _QWORD *);
  _QWORD *v10;
  void *v11;
  WTF *v12;
  _BOOL8 v13;
  WTF *v14;
  unint64_t v16;
  char *v17;
  char *v18;
  WTF *v19;
  int v20;
  int v21;
  WTF *v22;
  int v23;
  unsigned int v24;

  if (a2 == a3)
    return 1;
  v6 = *(void (**)(WTF **__return_ptr, _QWORD *))(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v6 = *(void (**)(WTF **__return_ptr, _QWORD *))(*v7 + v6);
  v6(&v22, v7);
  v9 = *(void (**)(WTF **__return_ptr, _QWORD *))(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v10 = (_QWORD *)(a3 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(void (**)(WTF **__return_ptr, _QWORD *))(*v10 + v9);
  v9(&v19, v10);
  v12 = v19;
  if (v24 != v21)
  {
    v13 = 0;
    goto LABEL_9;
  }
  if (!v24)
  {
    v13 = 1;
    goto LABEL_9;
  }
  v13 = 0;
  if (*(float *)v22 == *(float *)v19
    && (unsigned __int16)*((_DWORD *)v22 + 1) == (unsigned __int16)*((_DWORD *)v19 + 1))
  {
    v16 = 0;
    while (v24 - 1 != v16)
    {
      v17 = (char *)v22 + 8 * v16 + 8;
      v18 = (char *)v19 + 8 * v16++ + 8;
      if (*(float *)v17 != *(float *)v18
        || (unsigned __int16)*((_DWORD *)v17 + 1) != (unsigned __int16)*((_DWORD *)v18 + 1))
      {
        goto LABEL_22;
      }
    }
    v16 = v24;
LABEL_22:
    v13 = v16 >= v24;
LABEL_9:
    if (!v19)
      goto LABEL_10;
  }
  v19 = 0;
  v20 = 0;
  WTF::fastFree(v12, v11);
LABEL_10:
  v14 = v22;
  if (v22)
  {
    v22 = 0;
    v23 = 0;
    WTF::fastFree(v14, v11);
  }
  return v13;
}

WTF *WebCore::PropertyWrapper<WTF::Vector<WebCore::SVGLengthValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5)
{
  uint64_t v8;
  void (*v9)(_QWORD *, WTF **);
  _QWORD *v10;
  uint64_t v11;
  void (*v12)(WTF **__return_ptr, _QWORD *);
  _QWORD *v13;
  uint64_t v14;
  void (*v15)(WTF **__return_ptr, _QWORD *);
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  WTF *v22;
  const WebCore::SVGLengthValue *v23;
  WTF *v24;
  unint64_t v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  void *v31;
  WTF *v32;
  WTF *v33;
  WTF *result;
  WTF *v35;
  WTF **v36;
  unsigned int *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  int v43;
  unsigned int v44;
  WTF *v45;
  int v46;
  unsigned int v47;
  WTF *v48;
  int v49;
  int v50;
  uint64_t v51;

  v9 = (void (*)(_QWORD *, WTF **))a1[4];
  v8 = a1[5];
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(void (**)(_QWORD *, WTF **))(*v10 + v9);
  v12 = (void (*)(WTF **__return_ptr, _QWORD *))a1[2];
  v11 = a1[3];
  v13 = (_QWORD *)(a3 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v12 = *(void (**)(WTF **__return_ptr, _QWORD *))(*v13 + v12);
  v12(&v45, v13);
  v15 = (void (*)(WTF **__return_ptr, _QWORD *))a1[2];
  v14 = a1[3];
  v16 = (_QWORD *)(a4 + (v14 >> 1));
  if ((v14 & 1) != 0)
    v15 = *(void (**)(WTF **__return_ptr, _QWORD *))(*v16 + v15);
  v15(&v42, v16);
  v17 = v47;
  v18 = v44;
  if (v47 && v44)
  {
    v19 = v47;
    if (v47 != v44)
    {
      v19 = v47 <= (unint64_t)v44 ? v44 : v47;
      v20 = v44 >= (unint64_t)v47 ? v47 : v44;
      if (remainder((double)v19, (double)v20) != 0.0)
        v19 = v18 * (unint64_t)v17;
    }
    v50 = v19;
    if (v19 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195656EFCLL);
    }
    v21 = 8 * v19;
    v22 = (WTF *)WTF::fastMalloc((WTF *)(8 * v19));
    v24 = v22;
    v49 = v19;
    v48 = v22;
    if ((_DWORD)v19)
    {
      do
      {
        v51 = 0;
        v22 = (WTF *)(WebCore::SVGLengthValue::SVGLengthValue((uint64_t)v22, 2, &v51) + 8);
        v21 -= 8;
      }
      while (v21);
    }
    v25 = 0;
    if (v19 <= 1)
      v26 = 1;
    else
      v26 = v19;
    while (v25 % v17 < v47)
    {
      if (v25 % v18 >= v44)
      {
        __break(0xC471u);
        JUMPOUT(0x195656EECLL);
      }
      v27 = *a5;
      v28 = WebCore::SVGLengthValue::blend((WTF *)((char *)v45 + 8 * (v25 % v17)), (WTF *)((char *)v42 + 8 * (v25 % v18)), v23, v27);
      if (v19 == v25)
      {
        __break(0xC471u);
        JUMPOUT(0x195656EF4);
      }
      *(_DWORD *)v24 = v28;
      *((_WORD *)v24 + 2) = WORD2(v28);
      ++v25;
      v24 = (WTF *)((char *)v24 + 8);
      if (v26 == v25)
        goto LABEL_33;
    }
LABEL_53:
    __break(0xC471u);
    JUMPOUT(0x195656EE4);
  }
  v29 = *a5;
  if (*a5 >= 0.5)
    v30 = v44;
  else
    v30 = v47;
  v48 = 0;
  v49 = 0;
  v50 = v30;
  if ((_DWORD)v30)
  {
    if (v30 >> 29)
      goto LABEL_53;
    v35 = (WTF *)WTF::fastMalloc((WTF *)(8 * v30));
    v49 = v30;
    v48 = v35;
    v36 = &v45;
    v37 = &v47;
    if (v29 >= 0.5)
      v37 = &v44;
    v38 = *v37;
    if (v29 >= 0.5)
      v36 = &v42;
    if ((_DWORD)v38)
    {
      v39 = *v36;
      v40 = 8 * v38;
      do
      {
        v41 = *(_QWORD *)v39;
        v39 = (WTF *)((char *)v39 + 8);
        *(_QWORD *)v35 = v41;
        v35 = (WTF *)((char *)v35 + 8);
        v40 -= 8;
      }
      while (v40);
    }
  }
LABEL_33:
  v9(v10, &v48);
  v32 = v48;
  if (v48)
  {
    v48 = 0;
    v49 = 0;
    WTF::fastFree(v32, v31);
  }
  v33 = v42;
  if (v42)
  {
    v42 = 0;
    v43 = 0;
    WTF::fastFree(v33, v31);
  }
  result = v45;
  if (v45)
  {
    v45 = 0;
    v46 = 0;
    return (WTF *)WTF::fastFree(result, v31);
  }
  return result;
}

uint64_t WebCore::RenderStyle::d(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 64) + 64);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::BasicShapePath *>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  const WebCore::SVGPathByteStream *v15;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  if (v8)
    v13 = v12 == 0;
  else
    v13 = 1;
  if (v13)
    return 0;
  v14 = v12;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12) != 1
    || (*(_BYTE *)(v8 + 28) != 0) != (*(_BYTE *)(v14 + 28) != 0))
  {
    return 0;
  }
  else
  {
    return WebCore::canBlendSVGPathByteStreams(*(WebCore **)(v8 + 16), *(const WebCore::SVGPathByteStream **)(v14 + 16), v15);
  }
}

uint64_t WebCore::RefCountedPropertyWrapper<WebCore::BasicShapePath>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t *, __n128);
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  WebCore **v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;

  v9 = (void (*)(_QWORD *, uint64_t *, __n128))a1[4];
  v8 = a1[5];
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(void (**)(_QWORD *, uint64_t *, __n128))(*v10 + v9);
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = (WebCore **)v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = v15(v17);
  if (*(_BYTE *)(a5 + 8))
  {
    v19.n128_u64[0] = *(_QWORD *)a5;
    if (*(double *)a5 >= 0.5)
      v20 = v18;
    else
      v20 = (uint64_t)v14;
    if (v20)
      ++*(_DWORD *)(v20 + 8);
    v24 = v20;
  }
  else
  {
    v21 = WebCore::BasicShapePath::blend(v18, v14, (double *)a5, &v25);
    v22 = v25;
    if ((*(unsigned int (**)(uint64_t, float))(*(_QWORD *)v25 + 24))(v25, v21) != 1)
    {
      result = 96;
      __break(0xC471u);
      return result;
    }
    ++*(_DWORD *)(v22 + 8);
    v24 = v22;
  }
  v9(v10, &v24, v19);
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    else
      --*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t WebCore::RenderStyle::baselineShiftValue(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 56) + 40);
}

uint64_t WebCore::RenderStyle::setBaselineShiftValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  unsigned int *v6;
  void *v8;
  WebCore::SVGRenderStyle *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  char v15;

  v3 = *(_QWORD *)(a1 + 56);
  if (*(_DWORD *)v3 != 1)
  {
    WebCore::SVGRenderStyle::copy(*(WebCore::SVGRenderStyle **)(a1 + 56), &v14);
    v3 = v14;
    v9 = *(WebCore::SVGRenderStyle **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v14;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v9, v8);
        WTF::fastFree(v12, v13);
        v3 = *(_QWORD *)(a1 + 56);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
  }
  result = *(_QWORD *)(v3 + 56);
  if (*(float *)(result + 40) != *(float *)&a2 || (unsigned __int16)*(_DWORD *)(result + 44) != WORD2(a2))
  {
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMiscData::copy((WebCore::StyleMiscData *)result, &v14);
      result = v14;
      v6 = *(unsigned int **)(v3 + 56);
      *(_QWORD *)(v3 + 56) = v14;
      if (v6)
      {
        if (*v6 == 1)
        {
          v10 = v6[8];
          if ((_DWORD)v10 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v10])(&v15, v6 + 6);
          v6[8] = -1;
          v11 = v6[4];
          if ((_DWORD)v11 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v11])(&v15, v6 + 2);
          v6[4] = -1;
          WTF::fastFree((WTF *)v6, v5);
          result = *(_QWORD *)(v3 + 56);
        }
        else
        {
          --*v6;
        }
      }
    }
    *(_DWORD *)(result + 40) = a2;
    *(_WORD *)(result + 44) = WORD2(a2);
  }
  return result;
}

BOOL WebCore::PropertyWrapperBaselineShift::equals(WebCore::PropertyWrapperBaselineShift *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD *);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if (((*(_WORD *)(*((_QWORD *)a3 + 7) + 8) ^ *(_WORD *)(*((_QWORD *)a2 + 7) + 8)) & 0x300) != 0)
    return 0;
  if (a2 == a3)
    return 1;
  v6 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = (_QWORD *)((char *)a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
  v9 = v6(v8);
  v10 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 2);
  v11 = *((_QWORD *)this + 3);
  v12 = (_QWORD *)((char *)a3 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *))(*v12 + v10);
  v13 = v10(v12);
  return *(float *)&v9 == *(float *)&v13 && WORD2(v9) == WORD2(v13);
}

BOOL WebCore::PropertyWrapperBaselineShift::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((*(unsigned __int16 *)(*(_QWORD *)(a3 + 56) + 8) ^ *(unsigned __int16 *)(*(_QWORD *)(a2 + 56) + 8)) & 0x300) == 0;
}

uint64_t WebCore::PropertyWrapperBaselineShift::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5)
{
  uint64_t *v10;
  uint64_t v11;
  WebCore::SVGRenderStyle *v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD *, uint64_t);
  _QWORD *v15;
  uint64_t (*v16)(_QWORD *);
  uint64_t v17;
  _QWORD *v18;
  uint64_t (*v19)(_QWORD *);
  uint64_t v20;
  _QWORD *v21;
  float v22;
  const WebCore::SVGLengthValue *v23;
  uint64_t v24;
  void *v26;
  WebCore::SVGRenderStyle *v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v10 = (uint64_t *)(a3 + 56);
  if (*a5 != 0.0)
    v10 = (uint64_t *)(a4 + 56);
  v11 = *v10;
  v12 = *(WebCore::SVGRenderStyle **)(a2 + 56);
  if (*(_DWORD *)v12 != 1)
  {
    WebCore::SVGRenderStyle::copy(v12, &v31);
    v12 = (WebCore::SVGRenderStyle *)v31;
    v27 = *(WebCore::SVGRenderStyle **)(a2 + 56);
    *(_QWORD *)(a2 + 56) = v31;
    if (v27)
    {
      if (*(_DWORD *)v27 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v27, v26);
        WTF::fastFree(v28, v29);
        v12 = *(WebCore::SVGRenderStyle **)(a2 + 56);
      }
      else
      {
        --*(_DWORD *)v27;
      }
    }
  }
  *((_WORD *)v12 + 4) = *((_WORD *)v12 + 4) & 0xFCFF | *(_WORD *)(v11 + 8) & 0x300;
  v14 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v13 = a1[5];
  v15 = (_QWORD *)(a2 + (v13 >> 1));
  if ((v13 & 1) != 0)
    v14 = *(uint64_t (**)(_QWORD *, uint64_t))(*v15 + v14);
  v16 = (uint64_t (*)(_QWORD *))a1[2];
  v17 = a1[3];
  v18 = (_QWORD *)(a3 + (v17 >> 1));
  if ((v17 & 1) != 0)
    v16 = *(uint64_t (**)(_QWORD *))(*v18 + v16);
  v31 = v16(v18);
  v19 = (uint64_t (*)(_QWORD *))a1[2];
  v20 = a1[3];
  v21 = (_QWORD *)(a4 + (v20 >> 1));
  if ((v20 & 1) != 0)
    v19 = *(uint64_t (**)(_QWORD *))(*v21 + v19);
  v30 = v19(v21);
  v22 = *a5;
  v24 = WebCore::SVGLengthValue::blend((WebCore::SVGLengthValue *)&v31, (const WebCore::SVGLengthValue *)&v30, v23, v22);
  return v14(v15, v24);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::SVGLengthValue>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  return *(float *)&v8 == *(float *)&v12 && WORD2(v8) == WORD2(v12);
}

uint64_t WebCore::PropertyWrapper<WebCore::SVGLengthValue>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5)
{
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t);
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)(_QWORD *);
  uint64_t v15;
  _QWORD *v16;
  float v17;
  const WebCore::SVGLengthValue *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v9 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v8 = a1[5];
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *, uint64_t))(*v10 + v9);
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v22 = v11(v13);
  v14 = (uint64_t (*)(_QWORD *))a1[2];
  v15 = a1[3];
  v16 = (_QWORD *)(a4 + (v15 >> 1));
  if ((v15 & 1) != 0)
    v14 = *(uint64_t (**)(_QWORD *))(*v16 + v14);
  v21 = v14(v16);
  v17 = *a5;
  v19 = WebCore::SVGLengthValue::blend((WebCore::SVGLengthValue *)&v22, (const WebCore::SVGLengthValue *)&v21, v18, v17);
  return v9(v10, v19);
}

_QWORD *WebCore::RenderStyle::fontVariationSettings@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v7;

  v2 = this[4];
  v3 = *(unsigned int *)(v2 + 76);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if ((_DWORD)v3)
  {
    v7 = v2;
    if (v3 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = v3;
      v5 = (void *)WTF::fastMalloc((WTF *)(8 * v3));
      *(_DWORD *)(a2 + 8) = v4;
      *(_QWORD *)a2 = v5;
      return memcpy(v5, *(const void **)(v7 + 64), 8 * *(unsigned int *)(v7 + 76));
    }
  }
  return this;
}

BOOL WebCore::PropertyWrapperFontVariationSettings::equals(WebCore::PropertyWrapperFontVariationSettings *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  void (*v8)(void **__return_ptr, _QWORD *);
  _QWORD *v9;
  uint64_t v10;
  void (*v11)(void **__return_ptr, _QWORD *);
  _QWORD *v12;
  void *v13;
  WTF *v14;
  _BOOL8 result;
  WTF *v16;
  _BOOL8 v17;
  _BOOL8 v18;
  void *__s2;
  int v20;
  int v21;
  void *__s1;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  if (a2 == a3)
    return 1;
  v25 = v3;
  v26 = v4;
  v8 = (void (*)(void **__return_ptr, _QWORD *))*((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v9 = (_QWORD *)((char *)a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v8 = *(void (**)(void **__return_ptr, _QWORD *))(*v9 + v8);
  v8(&__s1, v9);
  v11 = (void (*)(void **__return_ptr, _QWORD *))*((_QWORD *)this + 2);
  v10 = *((_QWORD *)this + 3);
  v12 = (_QWORD *)((char *)a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v11 = *(void (**)(void **__return_ptr, _QWORD *))(*v12 + v11);
  v11(&__s2, v12);
  if (v24 == v21)
  {
    v14 = (WTF *)__s2;
    result = memcmp(__s1, __s2, 8 * v24) == 0;
    if (!v14)
      goto LABEL_8;
  }
  else
  {
    result = 0;
    v14 = (WTF *)__s2;
    if (!__s2)
      goto LABEL_8;
  }
  __s2 = 0;
  v20 = 0;
  v18 = result;
  WTF::fastFree(v14, v13);
  result = v18;
LABEL_8:
  v16 = (WTF *)__s1;
  if (__s1)
  {
    __s1 = 0;
    v23 = 0;
    v17 = result;
    WTF::fastFree(v16, v13);
    return v17;
  }
  return result;
}

BOOL WebCore::PropertyWrapperFontVariationSettings::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(WTF **__return_ptr, _QWORD *);
  _QWORD *v7;
  uint64_t v8;
  void (*v9)(WTF **__return_ptr, _QWORD *);
  _QWORD *v10;
  void *v11;
  _BOOL8 v12;
  uint64_t v13;
  int v14;
  int v15;
  BOOL v16;
  WTF *v17;
  WTF *v18;
  WTF *v20;
  int v21;
  int v22;
  WTF *v23;
  int v24;
  unsigned int v25;

  v6 = *(void (**)(WTF **__return_ptr, _QWORD *))(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v6 = *(void (**)(WTF **__return_ptr, _QWORD *))(*v7 + v6);
  v6(&v23, v7);
  v9 = *(void (**)(WTF **__return_ptr, _QWORD *))(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v10 = (_QWORD *)(a3 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(void (**)(WTF **__return_ptr, _QWORD *))(*v10 + v9);
  v9(&v20, v10);
  v12 = v25 == v22;
  if (v25 == v22)
  {
    v17 = v20;
    if (v25)
    {
      v13 = 0;
      do
      {
        v14 = *(_DWORD *)((char *)v23 + v13);
        v15 = *(_DWORD *)((char *)v20 + v13);
        v12 = v14 == v15;
        v16 = v14 != v15 || 8 * v25 - 8 == v13;
        v13 += 8;
      }
      while (!v16);
      goto LABEL_14;
    }
  }
  else
  {
    v17 = v20;
  }
  if (v17)
  {
LABEL_14:
    v20 = 0;
    v21 = 0;
    WTF::fastFree(v17, v11);
  }
  v18 = v23;
  if (v23)
  {
    v23 = 0;
    v24 = 0;
    WTF::fastFree(v18, v11);
  }
  return v12;
}

WTF *WebCore::PropertyWrapper<WebCore::FontTaggedSettings<float>>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  void (*v9)(_QWORD *, void **, __n128);
  _QWORD *v10;
  uint64_t v11;
  void (*v12)(WTF **__return_ptr, _QWORD *);
  _QWORD *v13;
  uint64_t v14;
  void (*v15)(WTF **__return_ptr, _QWORD *);
  _QWORD *v16;
  __n128 v17;
  WTF **v18;
  uint64_t v19;
  void *v20;
  WTF **v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  float *v25;
  float v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  size_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  char *v35;
  _QWORD *v36;
  void *v37;
  WTF *v38;
  WTF *v39;
  WTF *result;
  double v41;
  WTF *v42;
  int v43;
  unsigned int v44;
  WTF *v45;
  int v46;
  unsigned int v47;
  void *__dst;
  uint64_t v49;
  _DWORD v50[2];

  v9 = (void (*)(_QWORD *, void **, __n128))a1[4];
  v8 = a1[5];
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(void (**)(_QWORD *, void **, __n128))(*v10 + v9);
  v12 = (void (*)(WTF **__return_ptr, _QWORD *))a1[2];
  v11 = a1[3];
  v13 = (_QWORD *)(a3 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v12 = *(void (**)(WTF **__return_ptr, _QWORD *))(*v13 + v12);
  v12(&v45, v13);
  v15 = (void (*)(WTF **__return_ptr, _QWORD *))a1[2];
  v14 = a1[3];
  v16 = (_QWORD *)(a4 + (v14 >> 1));
  if ((v14 & 1) != 0)
    v15 = *(void (**)(WTF **__return_ptr, _QWORD *))(*v16 + v15);
  v15(&v42, v16);
  if (!*(_BYTE *)(a5 + 8))
  {
    __dst = 0;
    v49 = 0;
    v22 = v47;
    if (!v47)
      goto LABEL_36;
    v23 = 0;
    v24 = 0;
    while (v24 < v47)
    {
      if (v24 >= v44)
      {
        __break(0xC471u);
        JUMPOUT(0x195657B64);
      }
      v25 = (float *)((char *)v45 + 8 * v24);
      v26 = WebCore::blendFunc(a5, v25[1], *((float *)v42 + 2 * v24 + 1));
      v27 = *(_DWORD *)v25;
      *(float *)v50 = *v25;
      *(float *)&v50[1] = v26;
      if (v23)
      {
        v28 = 0;
        v29 = v23;
        v30 = (unsigned int *)__dst;
        v31 = 8 * v23 - 8;
        while (1)
        {
          v32 = *v30;
          v33 = *v30;
          LOBYTE(v34) = v27;
          if (v33 == v27)
          {
            LOBYTE(v33) = BYTE1(*v30);
            LOBYTE(v34) = BYTE1(v27);
            if (BYTE1(v32) == BYTE1(v27))
            {
              LOBYTE(v33) = BYTE2(*v30);
              LOBYTE(v34) = BYTE2(v27);
              if (BYTE2(v32) == BYTE2(v27))
              {
                v33 = HIBYTE(v32);
                v34 = HIBYTE(v27);
                if (HIBYTE(v32) == HIBYTE(v27))
                  break;
              }
            }
          }
          if ((char)v33 >= (char)v34)
            break;
          --v28;
          v30 += 2;
          v31 -= 8;
          if (v31 == -8)
            goto LABEL_32;
        }
        v29 = -v28;
        if (v32 == v27)
        {
          memmove(v30, v30 + 2, v31);
          v23 = --HIDWORD(v49);
        }
      }
      else
      {
        v29 = 0;
      }
LABEL_32:
      if (v23 == (_DWORD)v49)
      {
        v35 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&__dst, v23 + 1, (unint64_t)v50);
        v23 = HIDWORD(v49);
      }
      else
      {
        v35 = (char *)v50;
      }
      v36 = (char *)__dst + 8 * v29;
      memmove(v36 + 1, v36, (_BYTE *)__dst + 8 * v23 - (_BYTE *)v36);
      *v36 = *(_QWORD *)v35;
      v23 = ++HIDWORD(v49);
      if (++v24 == v22)
        goto LABEL_36;
    }
    goto LABEL_45;
  }
  v17.n128_u64[0] = *(_QWORD *)a5;
  if (*(double *)a5 == 0.0)
    v18 = &v45;
  else
    v18 = &v42;
  v19 = *((unsigned int *)v18 + 3);
  __dst = 0;
  LODWORD(v49) = 0;
  HIDWORD(v49) = v19;
  if (!(_DWORD)v19)
    goto LABEL_36;
  v41 = v17.n128_f64[0];
  if (v19 >> 29)
  {
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x195657B5CLL);
  }
  v20 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
  LODWORD(v49) = v19;
  __dst = v20;
  v21 = &v45;
  if (v41 != 0.0)
    v21 = &v42;
  memcpy(v20, *v21, 8 * *((unsigned int *)v18 + 3));
LABEL_36:
  v9(v10, &__dst, v17);
  v38 = (WTF *)__dst;
  if (__dst)
  {
    __dst = 0;
    LODWORD(v49) = 0;
    WTF::fastFree(v38, v37);
  }
  v39 = v42;
  if (v42)
  {
    v42 = 0;
    v43 = 0;
    WTF::fastFree(v39, v37);
  }
  result = v45;
  if (v45)
  {
    v45 = 0;
    v46 = 0;
    return (WTF *)WTF::fastFree(result, v37);
  }
  return result;
}

uint64_t WebCore::RenderStyle::fontSizeAdjust(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 4) + 168);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::FontSizeAdjust>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  return v8 == v12
      && ((v8 & 0xFF00) == 0) != ((v12 & 0xFF00) != 0)
      && *((float *)&v8 + 1) == *((float *)&v12 + 1);
}

BOOL WebCore::PropertyWrapperFontSizeAdjust::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a2 + 32) + 168) == *(unsigned __int8 *)(*(_QWORD *)(a3 + 32) + 168);
}

void WebCore::PropertyWrapperFontSizeAdjust::blend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  float v9;
  unsigned int v10;
  uint64_t v11;

  if (*(_BYTE *)(a5 + 8))
  {
    if (*(double *)a5 == 0.0)
      v6 = a3;
    else
      v6 = a4;
    v7 = *(_QWORD *)(v6 + 32);
    v8 = *(_DWORD *)(v7 + 168);
    v9 = *(float *)(v7 + 172);
    v10 = v8 & 0xFFFFFF00;
  }
  else
  {
    v11 = *(_QWORD *)(a4 + 32);
    v9 = WebCore::blendFunc(a5, *(float *)(*(_QWORD *)(a3 + 32) + 172), *(float *)(v11 + 172));
    v10 = 0;
    v8 = *(_DWORD *)(v11 + 168);
    if (v9 < 0.0)
      v9 = 0.0;
  }
  WebCore::RenderStyle::setFontSizeAdjust(a2, (void *)(v10 | v8 | ((unint64_t)LODWORD(v9) << 32)));
}

uint64_t WebCore::RenderStyle::fontWeight(WebCore::RenderStyle *this)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 4) + 192);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::FontSelectionValue>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  float v8;
  __int16 (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(__int16 (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(__int16 (**)(_QWORD *))(*v7 + v5);
  v8 = (float)v5(v7) * 0.25;
  v9 = *(__int16 (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(__int16 (**)(_QWORD *))(*v11 + v9);
  return v8 == (float)((float)v9(v11) * 0.25);
}

uint64_t WebCore::PropertyWrapperFontWeight::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v8)(_QWORD *, _QWORD);
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  __int16 v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  float v18;
  __int16 v19;
  float v20;
  float v21;
  float v22;
  uint64_t (*v24)(_QWORD *, _QWORD);

  v8 = (uint64_t (*)(_QWORD *, _QWORD))a1[4];
  v9 = a1[5];
  v10 = (_QWORD *)(a2 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v8 = *(uint64_t (**)(_QWORD *, _QWORD))(*v10 + v8);
  v24 = v8;
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = (float)v14 * 0.25;
  v19 = v15(v17);
  v20 = WebCore::blendFunc(a5, v18, (float)v19 * 0.25);
  v21 = v20 * 4.0;
  if (v20 > 1000.0)
    v21 = 4000.0;
  if (v20 >= 1.0)
    v22 = v21;
  else
    v22 = 4.0;
  return v24(v10, (unsigned __int16)(int)v22);
}

uint64_t WebCore::PropertyWrapper<WebCore::FontSelectionValue>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v8)(_QWORD *, _QWORD);
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  __int16 v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  __int16 v18;
  float v19;
  float v20;
  BOOL v21;
  float v22;
  uint64_t (*v24)(_QWORD *, _QWORD);

  v8 = (uint64_t (*)(_QWORD *, _QWORD))a1[4];
  v9 = a1[5];
  v10 = (_QWORD *)(a2 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v8 = *(uint64_t (**)(_QWORD *, _QWORD))(*v10 + v8);
  v24 = v8;
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = v15(v17);
  v19 = WebCore::blendFunc(a5, (float)v14 * 0.25, (float)v18 * 0.25);
  v20 = v19 * 4.0;
  v21 = v19 <= 0.0;
  v22 = 0.0;
  if (!v21)
    v22 = v20;
  return v24(v10, (unsigned __int16)(int)v22);
}

uint64_t WebCore::RenderStyle::fontItalic(WebCore::RenderStyle *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 4) + 196);
}

uint64_t WebCore::PropertyWrapperGetter<std::optional<WebCore::FontSelectionValue>>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  if ((v8 & 0xFF0000) == 0 || (v12 & 0xFF0000) == 0)
    return ((v8 & 0xFF0000) != 0) == ((v12 & 0xFF0000) != 0);
  else
    return (float)((float)(__int16)v8 * 0.25) == (float)((float)(__int16)v12 * 0.25);
}

BOOL WebCore::PropertyWrapperFontStyle::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(_WORD *)(*(_QWORD *)(a2 + 32) + 212) & 0x8000) == 0
      && (*(_WORD *)(*(_QWORD *)(a3 + 32) + 212) & 0x8000) == 0;
}

void WebCore::PropertyWrapperFontStyle::blend(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  BOOL v16;
  float v17;
  uint64_t v18;
  WebCore::FontCascadeFonts *v19;
  int v20;
  WebCore *v21;
  WTF *v22;
  WebCore *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WebCore *v30;
  unsigned int *v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WebCore *v38;
  _BYTE v39[148];
  __int16 v40;
  char v41;
  __int16 v42;
  unsigned __int8 v43;
  WTF *v44;
  int v45;
  __int16 v46;

  if (*(_BYTE *)(a5 + 8))
  {
    if (*(double *)a5 >= 0.5)
      v6 = a4;
    else
      v6 = a3;
    v7 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 32) + 212) >> 15;
    v8 = (int *)(*(_QWORD *)(a3 + 32) + 196);
    if (*(double *)a5 >= 0.5)
      v8 = (int *)(*(_QWORD *)(a4 + 32) + 196);
    v9 = *v8;
  }
  else
  {
    v10 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 196);
    v11 = *(_DWORD *)(*(_QWORD *)(a4 + 32) + 196);
    if (v10 & 0xFF0000 | v11 & 0xFF0000)
    {
      v12 = (float)(__int16)v10 * 0.25;
      if ((v10 & 0xFF0000) == 0)
        v12 = 0.0;
      v13 = (float)(__int16)v11 * 0.25;
      if ((v11 & 0xFF0000) == 0)
        v13 = 0.0;
      v14 = WebCore::blendFunc(a5, v12, v13);
      LOWORD(v7) = 0;
      v15 = v14 * 4.0;
      if (v14 > 90.0)
        v15 = 360.0;
      v16 = v14 < -90.0;
      v17 = -360.0;
      if (!v16)
        v17 = v15;
      v9 = (unsigned __int16)(int)v17 | 0x10000;
    }
    else
    {
      LOWORD(v7) = 0;
      v9 = 0;
    }
  }
  v18 = a2[4];
  v19 = *(WebCore::FontCascadeFonts **)(v18 + 248);
  if (v19)
  {
    v20 = (*(_DWORD *)v19)++;
    v21 = (WebCore *)*((_QWORD *)v19 + 14);
    if (v20)
    {
      *(_DWORD *)v19 = v20;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v19, a2);
      WTF::fastFree(v32, v33);
      v18 = a2[4];
    }
  }
  else
  {
    v21 = 0;
  }
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v39, (const WebCore::FontDescription *)(v18 + 48));
  v22 = *(WTF **)(v18 + 216);
  ++*(_DWORD *)v22;
  v44 = v22;
  v45 = *(_DWORD *)(v18 + 224);
  v46 = *(_WORD *)(v18 + 228);
  v41 = BYTE2(v9);
  v40 = v9;
  LODWORD(v22) = v42 & 0x7FFF | (v43 << 16);
  v42 = v42 & 0x7FFF | ((_WORD)v7 << 15);
  v43 = BYTE2(v22);
  v23 = (WebCore *)WebCore::RenderStyle::setFontDescription((uint64_t)a2, (uint64_t)v39);
  v24 = a2[4];
  if (v21)
    ++*((_DWORD *)v21 + 2);
  v25 = v24 + 32;
  v38 = v21;
  v26 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v26 || (v27 = *(_QWORD *)(v26 + 96)) == 0)
    v27 = WebCore::threadGlobalDataSlow(v23);
  v28 = *(_QWORD *)(v27 + 80);
  if (!v28)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v27);
    v28 = *(_QWORD *)(v27 + 80);
  }
  WebCore::FontCache::updateFontCascade(v28, v25, &v38);
  v30 = v38;
  v38 = 0;
  if (v30)
  {
    if (*((_DWORD *)v30 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v30 + 8))(v30);
    else
      --*((_DWORD *)v30 + 2);
  }
  v31 = (unsigned int *)v44;
  v44 = 0;
  if (v31)
  {
    if (*v31 == 1)
    {
      v34 = v31[1];
      if ((_DWORD)v34)
      {
        v35 = (WTF::StringImpl **)(v31 + 2);
        v36 = 8 * v34;
        do
        {
          v37 = *v35;
          *v35 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, v29);
            else
              *(_DWORD *)v37 -= 2;
          }
          ++v35;
          v36 -= 8;
        }
        while (v36);
      }
      WTF::fastFree((WTF *)v31, v29);
    }
    else
    {
      --*v31;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v39, v29);
}

int *WebCore::RenderStyle::textDecorationThickness@<X0>(WebCore::RenderStyle *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int *result;
  int v4;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
  *(_BYTE *)a2 = *(_BYTE *)(v2 + 448);
  *(_DWORD *)(a2 + 4) = 0;
  result = (int *)(a2 + 4);
  *(_BYTE *)(a2 + 10) = 0;
  v4 = *(unsigned __int8 *)(v2 + 456);
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = *(_BYTE *)(v2 + 457);
  if ((v4 - 2) >= 9)
  {
    if (v4 == 11)
    {
      *result = *(_DWORD *)(v2 + 452);
      return WebCore::Length::ref(result);
    }
  }
  else
  {
    *(_BYTE *)(a2 + 10) = *(_BYTE *)(v2 + 458);
    *result = *(_DWORD *)(v2 + 452);
  }
  return result;
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::TextDecorationThickness>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t *__return_ptr, _QWORD *);
  _QWORD *v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, _QWORD *);
  _QWORD *v10;
  BOOL v11;
  uint64_t isCalculatedEqual;
  float v14;
  float v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;

  if (a2 == a3)
    return 1;
  v6 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v6 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v7 + v6);
  v6(&v20, v7);
  v9 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v10 = (_QWORD *)(a3 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v10 + v9);
  v9(&v16, v10);
  if (v20 < 2u)
  {
    v11 = v20 == v16;
LABEL_8:
    isCalculatedEqual = v11;
    goto LABEL_11;
  }
  if (v20 != 2)
    goto LABEL_32;
  if (v16 != 2 || v21 != v17 || (v22 != 0) != (v18 != 0))
  {
    isCalculatedEqual = 0;
    goto LABEL_11;
  }
  if (v21 == 13)
  {
LABEL_32:
    isCalculatedEqual = 1;
  }
  else
  {
    if (v21 != 11)
    {
      v14 = *((float *)&v20 + 1);
      if (!v23)
        v14 = (float)SHIDWORD(v20);
      v15 = *((float *)&v16 + 1);
      if (!v19)
        v15 = (float)SHIDWORD(v16);
      v11 = v14 == v15;
      goto LABEL_8;
    }
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)((char *)&v20 + 4), (const WebCore::Length *)((char *)&v16 + 4));
  }
LABEL_11:
  if (v17 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)HIDWORD(v16));
  }
  if (v21 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)HIDWORD(v20));
  }
  return isCalculatedEqual;
}

BOOL WebCore::PropertyWrapperTextDecorationThickness::canInterpolate(int a1, WebCore::RenderStyle *this, WebCore::RenderStyle *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  void *v13;
  float v14;
  int v15;
  BOOL v16;
  _BOOL8 v17;
  float v18;
  WTF *v19;
  void *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  WTF *v25;
  float v26;
  float v27;
  int v29;
  unsigned int v30;
  float v31;
  unsigned __int8 v32;
  char v33;
  char v34;
  char v35;
  int v36;
  unsigned __int8 v37;
  char v38;
  char v39;

  v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
  v6 = *(unsigned __int8 *)(v5 + 448);
  v35 = *(_BYTE *)(v5 + 448);
  *(float *)&v36 = 0.0;
  v39 = 0;
  v37 = *(_BYTE *)(v5 + 456);
  v7 = v37;
  v38 = *(_BYTE *)(v5 + 457);
  if (v37 - 2 >= 9)
  {
    if (v37 == 11)
    {
      v36 = *(int *)(v5 + 452);
      v29 = v36;
      WebCore::Length::ref(&v36);
      v30 = v29;
      v8 = v29;
      goto LABEL_4;
    }
    v30 = 0;
    v9 = 1;
    *(float *)&v8 = 0.0;
  }
  else
  {
    v39 = *(_BYTE *)(v5 + 458);
    if (!v39)
    {
      v36 = *(int *)(v5 + 452);
      v30 = v36;
      v8 = v36;
LABEL_4:
      v9 = 1;
      goto LABEL_8;
    }
    v9 = 0;
    v8 = *(int *)(v5 + 452);
    v36 = v8;
    v30 = v8;
  }
LABEL_8:
  v10 = *(_QWORD *)(*((_QWORD *)a3 + 1) + 40);
  v11 = *(unsigned __int8 *)(v10 + 448);
  v31 = 0.0;
  v34 = 0;
  v32 = *(_BYTE *)(v10 + 456);
  v12 = v32;
  v33 = *(_BYTE *)(v10 + 457);
  if (v32 - 2 >= 9)
  {
    if (v32 == 11)
    {
      v13 = (void *)*(unsigned int *)(v10 + 452);
      v31 = *(float *)(v10 + 452);
      WebCore::Length::ref((int *)&v31);
      goto LABEL_11;
    }
    v13 = 0;
    v15 = 1;
    v14 = 0.0;
  }
  else
  {
    v34 = *(_BYTE *)(v10 + 458);
    if (!v34)
    {
      v13 = (void *)*(unsigned int *)(v10 + 452);
      v31 = *(float *)(v10 + 452);
LABEL_11:
      v14 = *(float *)&v13;
      v15 = 1;
      goto LABEL_15;
    }
    v15 = 0;
    v14 = *(float *)(v10 + 452);
    v31 = v14;
    v13 = (void *)LODWORD(v14);
  }
LABEL_15:
  if (v6)
    v16 = v11 == 0;
  else
    v16 = 1;
  if (v16)
  {
    v17 = 0;
  }
  else
  {
    v18 = *(float *)(*((_QWORD *)this + 4) + 204);
    v19 = WebCore::RenderStyle::metricsOfPrimaryFont(this, this);
    if (v6 == 1)
    {
      v21 = *((float *)v19 + 8);
    }
    else if (v7 == 11)
    {
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v36, v18);
      v21 = v23;
    }
    else if (v7 == 3)
    {
      v22 = (float)v8;
      if (!v9)
        v22 = *(float *)&v8;
      v21 = v18 * (float)(v22 / 100.0);
    }
    else if (v9)
    {
      v21 = (float)(int)v30;
    }
    else
    {
      v21 = *(float *)&v8;
    }
    v24 = *(float *)(*((_QWORD *)a3 + 4) + 204);
    v25 = WebCore::RenderStyle::metricsOfPrimaryFont(a3, v20);
    if (v11 == 1)
    {
      v26 = *((float *)v25 + 8);
    }
    else if (v12 == 11)
    {
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v31, v24);
    }
    else if (v12 == 3)
    {
      v27 = (float)SLODWORD(v14);
      if (!v15)
        v27 = v14;
      v26 = v24 * (float)(v27 / 100.0);
    }
    else
    {
      v26 = (float)(int)v13;
      if (!v15)
        v26 = v14;
    }
    v17 = v21 != v26;
  }
  if (v12 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v13);
  }
  if (v7 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v30);
  }
  return v17;
}

int *WebCore::PropertyWrapperTextDecorationThickness::blend(int a1, void *a2, WebCore::RenderStyle *this, WebCore::RenderStyle *a4, uint64_t a5)
{
  WebCore::RenderStyle *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  void *v18;
  float v19;
  int v20;
  float v21;
  WTF *v22;
  void *v23;
  float v24;
  float v25;
  WTF *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  int *result;
  int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  int v37;
  unsigned int v38;
  float v39;
  unsigned int v40;
  __int16 v41;
  char v42;
  char v43;
  float v44;
  unsigned __int8 v45;
  char v46;
  char v47;
  char v48;
  int v49;
  unsigned __int8 v50;
  char v51;
  char v52;

  if (*(_BYTE *)(a5 + 8))
  {
    if (*(double *)a5 == 0.0)
      v9 = this;
    else
      v9 = a4;
    v10 = *(_QWORD *)(*((_QWORD *)v9 + 1) + 40);
    LOBYTE(v39) = *(_BYTE *)(v10 + 448);
    v40 = 0;
    v42 = 0;
    v41 = *(_WORD *)(v10 + 456);
    if (v41 - 2 >= 9)
    {
      if (v41 == 11)
      {
        v40 = *(_DWORD *)(v10 + 452);
        WebCore::Length::ref((int *)&v40);
      }
    }
    else
    {
      v42 = *(_BYTE *)(v10 + 458);
      v40 = *(_DWORD *)(v10 + 452);
    }
    goto LABEL_34;
  }
  v11 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
  v12 = *(unsigned __int8 *)(v11 + 448);
  v48 = *(_BYTE *)(v11 + 448);
  *(float *)&v49 = 0.0;
  v52 = 0;
  v50 = *(_BYTE *)(v11 + 456);
  v13 = v50;
  v51 = *(_BYTE *)(v11 + 457);
  if (v50 - 2 >= 9)
  {
    if (v50 == 11)
    {
      v49 = *(int *)(v11 + 452);
      v32 = v49;
      WebCore::Length::ref(&v49);
      v38 = v32;
      v14 = v32;
      goto LABEL_10;
    }
    v37 = 1;
    v38 = 0;
    *(float *)&v14 = 0.0;
  }
  else
  {
    v52 = *(_BYTE *)(v11 + 458);
    if (!v52)
    {
      v49 = *(int *)(v11 + 452);
      v38 = v49;
      v14 = v49;
LABEL_10:
      v37 = 1;
      goto LABEL_16;
    }
    v37 = 0;
    v14 = *(int *)(v11 + 452);
    v49 = v14;
    v38 = v14;
  }
LABEL_16:
  v15 = *(_QWORD *)(*((_QWORD *)a4 + 1) + 40);
  v16 = *(unsigned __int8 *)(v15 + 448);
  v43 = *(_BYTE *)(v15 + 448);
  v44 = 0.0;
  v47 = 0;
  v45 = *(_BYTE *)(v15 + 456);
  v17 = v45;
  v46 = *(_BYTE *)(v15 + 457);
  if (v45 - 2 >= 9)
  {
    if (v45 != 11)
    {
      v18 = 0;
      v20 = 1;
      v19 = 0.0;
      goto LABEL_23;
    }
    v18 = (void *)*(unsigned int *)(v15 + 452);
    v44 = *(float *)(v15 + 452);
    WebCore::Length::ref((int *)&v44);
  }
  else
  {
    v47 = *(_BYTE *)(v15 + 458);
    if (v47)
    {
      v20 = 0;
      v19 = *(float *)(v15 + 452);
      v44 = v19;
      v18 = (void *)LODWORD(v19);
      goto LABEL_23;
    }
    v18 = (void *)*(unsigned int *)(v15 + 452);
    v44 = *(float *)(v15 + 452);
  }
  v19 = *(float *)&v18;
  v20 = 1;
LABEL_23:
  v21 = *(float *)(*((_QWORD *)this + 4) + 204);
  v22 = WebCore::RenderStyle::metricsOfPrimaryFont(this, a2);
  if (v12)
  {
    if (v12 == 1)
    {
      v24 = *((float *)v22 + 8);
    }
    else if (v13 == 11)
    {
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v49, v21);
      v24 = v35;
    }
    else if (v13 == 3)
    {
      v33 = (float)v14;
      if (!v37)
        v33 = *(float *)&v14;
      v24 = (float)(v33 / 100.0) * v21;
    }
    else if (v37)
    {
      v24 = (float)(int)v38;
    }
    else
    {
      v24 = *(float *)&v14;
    }
  }
  else
  {
    v24 = v21 * 0.0625;
  }
  v25 = *(float *)(*((_QWORD *)a4 + 4) + 204);
  v26 = WebCore::RenderStyle::metricsOfPrimaryFont(a4, v23);
  if (v16)
  {
    if (v16 == 1)
    {
      v27 = *((float *)v26 + 8);
    }
    else if (v17 == 11)
    {
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v44, v25);
      v27 = v36;
    }
    else if (v17 == 3)
    {
      v34 = (float)SLODWORD(v19);
      if (!v20)
        v34 = v19;
      v27 = (float)(v34 / 100.0) * v25;
    }
    else if (v20)
    {
      v27 = (float)(int)v18;
    }
    else
    {
      v27 = v19;
    }
  }
  else
  {
    v27 = v25 * 0.0625;
  }
  v28 = WebCore::blendFunc(a5, v24, v27);
  v29 = -33554000.0;
  if (v28 > -33554000.0)
    v29 = v28;
  if (v28 >= 33554000.0)
    v30 = 33554000.0;
  else
    v30 = v29;
  LOBYTE(v39) = 2;
  v41 = 4;
  v42 = 1;
  v40 = LODWORD(v30);
  if (v17 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v18);
  }
  if (v13 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v38);
  }
LABEL_34:
  result = WebCore::RenderStyle::setTextDecorationThickness((uint64_t)a2, &v39);
  if (v41 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v40);
  }
  return result;
}

uint64_t WebCore::RenderStyle::tabSize(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 3) + 336;
}

void WebCore::RenderStyle::setTabSize(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  float v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareInheritedData *v10;
  WTF *v11;
  void *v12;

  v2 = *(_QWORD *)(a1 + 24);
  if (*(float *)(v2 + 336) != *(float *)a2 || *(unsigned __int8 *)(v2 + 340) != *(unsigned __int8 *)(a2 + 4))
  {
    if (*(_DWORD *)v2 == 1)
    {
      v5 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      v8 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v8, v2);
      v10 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v5;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v10, v9);
          WTF::fastFree(v11, v12);
          v5 = *(_QWORD *)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v6 = *(float *)a2;
    *(_BYTE *)(v5 + 340) = *(_BYTE *)(a2 + 4);
    *(float *)(v5 + 336) = v6;
  }
}

BOOL WebCore::PropertyWrapperGetter<WebCore::TabSize const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  return *(float *)v8 == *(float *)v12 && *(unsigned __int8 *)(v8 + 4) == *(unsigned __int8 *)(v12 + 4);
}

uint64_t WebCore::TabSizePropertyWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = *(unsigned __int8 *)(v5(v7) + 4);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  return (v8 == 0) ^ (*(_BYTE *)(v9(v11) + 4) != 0);
}

uint64_t WebCore::TabSizePropertyWrapper::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t (*v9)(_QWORD *, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)(_QWORD *, __n128);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t (*v18)(_QWORD *);
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD *);
  uint64_t v23;
  _QWORD *v24;
  float *v25;
  float v26;
  float v27;
  uint64_t (*v28)(_QWORD *, unint64_t *);
  float v29;
  float v30;
  double v31;
  float v32;
  uint64_t (*v33)(_QWORD *, uint64_t);
  uint64_t (*v34)(_QWORD *, unint64_t *);
  unint64_t v35;

  v9 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v10 = a1[5];
  v11 = (_QWORD *)(a2 + (v10 >> 1));
  if (*(_BYTE *)(a5 + 8))
  {
    if ((v10 & 1) != 0)
      v9 = *(uint64_t (**)(_QWORD *, uint64_t))(*v11 + v9);
    v12 = (uint64_t (*)(_QWORD *, __n128))a1[2];
    v13 = a1[3];
    v14 = v13 >> 1;
    v33 = v9;
    if (*(double *)a5 == 0.0)
    {
      v15 = (_QWORD *)(a3 + v14);
      if ((v13 & 1) == 0)
        goto LABEL_7;
    }
    else
    {
      v15 = (_QWORD *)(a4 + v14);
      if ((v13 & 1) == 0)
      {
LABEL_7:
        a6.n128_u64[0] = *(_QWORD *)a5;
        v16 = v12(v15, a6);
        return v33(v11, v16);
      }
    }
    v12 = *(uint64_t (**)(_QWORD *, __n128))(*v15 + v12);
    goto LABEL_7;
  }
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *, uint64_t))(*v11 + v9);
  v18 = (uint64_t (*)(_QWORD *))a1[2];
  v19 = a1[3];
  v20 = (_QWORD *)(a3 + (v19 >> 1));
  v34 = (uint64_t (*)(_QWORD *, unint64_t *))v9;
  if ((v19 & 1) != 0)
    v18 = *(uint64_t (**)(_QWORD *))(*v20 + v18);
  v21 = v18(v20);
  v22 = (uint64_t (*)(_QWORD *))a1[2];
  v23 = a1[3];
  v24 = (_QWORD *)(a4 + (v23 >> 1));
  if ((v23 & 1) != 0)
    v22 = *(uint64_t (**)(_QWORD *))(*v24 + v22);
  v25 = (float *)v22(v24);
  v26 = *(float *)v21;
  v27 = *v25;
  if (*(_BYTE *)(a5 + 10) == 1)
  {
    v31 = *(double *)(a5 + 16);
    v28 = v34;
    if (v31 != 0.0)
    {
      v32 = v31 * v27;
      v26 = v26 + v32;
      v27 = v27 + v32;
    }
  }
  else
  {
    v28 = v34;
  }
  v29 = v26 + v26;
  if (!*(_BYTE *)(a5 + 9))
    v29 = v26;
  v30 = v29 + (float)(v27 - v26) * *(double *)a5;
  if (v30 < 0.0)
    v30 = 0.0;
  v35 = LODWORD(v30) | ((unint64_t)(*(_BYTE *)(v21 + 4) != 0) << 32);
  return v28(v11, &v35);
}

uint64_t WebCore::PropertyWrapperGetter<std::optional<WebCore::Length>>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t *__return_ptr, _QWORD *);
  _QWORD *v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, _QWORD *);
  _QWORD *v10;
  int v11;
  uint64_t isCalculatedEqual;
  float v13;
  float v14;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  char v19;

  if (a2 == a3)
    return 1;
  v6 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v6 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v7 + v6);
  v6(&v18, v7);
  v9 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v10 = (_QWORD *)(a3 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v10 + v9);
  v9(&v16, v10);
  v11 = v17;
  isCalculatedEqual = (v19 != 0) == (v17 != 0);
  if (v19 && v17)
  {
    if (BYTE4(v18) != BYTE4(v16) || (BYTE5(v18) != 0) != (BYTE5(v16) != 0))
    {
      isCalculatedEqual = 0;
LABEL_17:
      v11 = 1;
      goto LABEL_18;
    }
    if (BYTE4(v18) == 13)
    {
      v11 = 1;
      isCalculatedEqual = 1;
    }
    else
    {
      if (BYTE4(v18) != 11)
      {
        v13 = *(float *)&v18;
        if (!BYTE6(v18))
          v13 = (float)(int)v18;
        v14 = *(float *)&v16;
        if (!BYTE6(v16))
          v14 = (float)(int)v16;
        isCalculatedEqual = v13 == v14;
        goto LABEL_17;
      }
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)&v18, (const WebCore::Length *)&v16);
      v11 = v17;
    }
  }
LABEL_18:
  if (v11 && BYTE4(v16) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v16);
  }
  if (v19 && BYTE4(v18) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v18);
  }
  return isCalculatedEqual;
}

uint64_t WebCore::ContainIntrinsiclLengthPropertyWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t canInterpolateLengths)
{
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  int v9;
  unsigned int (*v10)(_QWORD *);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void (*v14)(unsigned int *__return_ptr, _QWORD *);
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(unsigned int *__return_ptr, _QWORD *);
  _QWORD *v18;
  int v19;
  uint64_t v20;
  void (*v21)(unsigned int *__return_ptr, _QWORD *);
  _QWORD *v22;
  int v23;
  uint64_t v24;
  void (*v25)(unsigned int *__return_ptr, _QWORD *);
  _QWORD *v26;
  const WebCore::Length *v27;
  int v28;
  int v29;
  unsigned int v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned int v34;
  unsigned __int8 v35;
  char v36;

  v6 = *(uint64_t (**)(_QWORD *))(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
  v9 = v6(v8);
  v10 = *(unsigned int (**)(_QWORD *))(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = (_QWORD *)(canInterpolateLengths + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(unsigned int (**)(_QWORD *))(*v12 + v10);
  if (v9 != v10(v12))
    return 0;
  v14 = *(void (**)(unsigned int *__return_ptr, _QWORD *))(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v15 = (_QWORD *)(a2 + (v13 >> 1));
  if ((v13 & 1) != 0)
    v14 = *(void (**)(unsigned int *__return_ptr, _QWORD *))(*v15 + v14);
  v14(&v34, v15);
  if (!v36)
    return 0;
  v17 = *(void (**)(unsigned int *__return_ptr, _QWORD *))(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v18 = (_QWORD *)(canInterpolateLengths + (v16 >> 1));
  if ((v16 & 1) != 0)
    v17 = *(void (**)(unsigned int *__return_ptr, _QWORD *))(*v18 + v17);
  v17(&v31, v18);
  v19 = v33;
  if (v33 && v32 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v31);
  }
  if (!v36 || v35 != 11)
  {
    if (v19)
      goto LABEL_16;
    return 0;
  }
  {
    WebCore::calculationValues(void)::map = 1;
    qword_1ECE90C98 = 0;
  }
  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v34);
  if (!v19)
    return 0;
LABEL_16:
  v21 = *(void (**)(unsigned int *__return_ptr, _QWORD *))(a1 + 16);
  v20 = *(_QWORD *)(a1 + 24);
  v22 = (_QWORD *)(a2 + (v20 >> 1));
  if ((v20 & 1) != 0)
    v21 = *(void (**)(unsigned int *__return_ptr, _QWORD *))(*v22 + v21);
  v23 = *(_DWORD *)(a1 + 48);
  v21(&v34, v22);
  if (!v36)
    goto LABEL_28;
  v25 = *(void (**)(unsigned int *__return_ptr, _QWORD *))(a1 + 16);
  v24 = *(_QWORD *)(a1 + 24);
  v26 = (_QWORD *)(canInterpolateLengths + (v24 >> 1));
  if ((v24 & 1) != 0)
    v25 = *(void (**)(unsigned int *__return_ptr, _QWORD *))(*v26 + v25);
  v25(&v31, v26);
  if (!v33)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v27 = (const WebCore::Length *)(v23 & 1);
  v28 = v35;
  v29 = v32;
  canInterpolateLengths = WebCore::canInterpolateLengths((WebCore *)v35, (const WebCore::Length *)v32, v27);
  if (v29 == 11)
  {
LABEL_29:
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v31);
    v28 = v35;
  }
  if (v36 && v28 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v34);
  }
  return canInterpolateLengths;
}

int *WebCore::ContainIntrinsiclLengthPropertyWrapper::blend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t (*v11)(_QWORD *, __n128);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void (*v16)(_QWORD *, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD *, uint64_t *);
  _QWORD *v22;
  uint64_t v23;
  void (*v24)(uint64_t *__return_ptr, _QWORD *, __n128);
  uint64_t v25;
  _QWORD *v26;
  int *result;
  unint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(_QWORD *, uint64_t *);
  _QWORD *v31;
  uint64_t v32;
  void (*v33)(uint64_t *__return_ptr, _QWORD *);
  _QWORD *v34;
  unsigned int v35;
  uint64_t v36;
  void (*v37)(uint64_t *__return_ptr, _QWORD *);
  _QWORD *v38;
  __n128 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  int v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  char v47;
  uint64_t v48;
  char v49;

  v11 = *(uint64_t (**)(_QWORD *, __n128))(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = v12 >> 1;
  if (*(double *)a5 >= 0.5)
  {
    v14 = (_QWORD *)(a4 + v13);
    if ((v12 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = (_QWORD *)(a3 + v13);
  if ((v12 & 1) != 0)
LABEL_5:
    v11 = *(uint64_t (**)(_QWORD *, __n128))(*v14 + v11);
LABEL_6:
  a6.n128_u64[0] = *(_QWORD *)a5;
  v15 = v11(v14, a6);
  v16 = *(void (**)(_QWORD *, uint64_t))(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  v18 = (_QWORD *)(a2 + (v17 >> 1));
  if ((v17 & 1) != 0)
    v16 = *(void (**)(_QWORD *, uint64_t))(*v18 + v16);
  v16(v18, v15);
  if (*(_BYTE *)(a5 + 8))
  {
    v21 = *(uint64_t (**)(_QWORD *, uint64_t *))(a1 + 32);
    v20 = *(_QWORD *)(a1 + 40);
    v22 = (_QWORD *)(a2 + (v20 >> 1));
    if ((v20 & 1) != 0)
      v21 = *(uint64_t (**)(_QWORD *, uint64_t *))(*v22 + v21);
    v24 = *(void (**)(uint64_t *__return_ptr, _QWORD *, __n128))(a1 + 16);
    v23 = *(_QWORD *)(a1 + 24);
    v25 = v23 >> 1;
    if (*(double *)a5 == 0.0)
    {
      v26 = (_QWORD *)(a3 + v25);
      if ((v23 & 1) == 0)
      {
LABEL_14:
        v19.n128_u64[0] = *(_QWORD *)a5;
        v24(&v48, v26, v19);
        result = (int *)v21(v22, &v48);
        if (v49 && BYTE4(v48) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          v28 = v48;
          return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v28);
        }
        return result;
      }
    }
    else
    {
      v26 = (_QWORD *)(a4 + v25);
      if ((v23 & 1) == 0)
        goto LABEL_14;
    }
    v24 = *(void (**)(uint64_t *__return_ptr, _QWORD *, __n128))(*v26 + v24);
    goto LABEL_14;
  }
  v30 = *(uint64_t (**)(_QWORD *, uint64_t *))(a1 + 32);
  v29 = *(_QWORD *)(a1 + 40);
  v31 = (_QWORD *)(a2 + (v29 >> 1));
  if ((v29 & 1) != 0)
    v30 = *(uint64_t (**)(_QWORD *, uint64_t *))(*v31 + v30);
  v33 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(a1 + 16);
  v32 = *(_QWORD *)(a1 + 24);
  v34 = (_QWORD *)(a3 + (v32 >> 1));
  if ((v32 & 1) != 0)
    v33 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v34 + v33);
  v35 = *(unsigned __int8 *)(a1 + 48);
  v33(&v42, v34);
  if (v43)
  {
    v37 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(a1 + 16);
    v36 = *(_QWORD *)(a1 + 24);
    v38 = (_QWORD *)(a4 + (v36 >> 1));
    if ((v36 & 1) != 0)
      v37 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v38 + v37);
    v37(&v40, v38);
    if (v41)
    {
      WebCore::blend((unsigned __int8 *)&v42, (unsigned __int8 *)&v40, a5, (v35 >> 1) & 1, (uint64_t)&v44, v39);
      LODWORD(v48) = 0;
      BYTE4(v48) = v45;
      *(_WORD *)((char *)&v48 + 5) = v46;
      if (v45 - 2 >= 9)
      {
        if (v45 != 11)
          goto LABEL_30;
      }
      else
      {
        BYTE6(v48) = v47;
        if (v47)
        {
          LODWORD(v48) = v44;
LABEL_30:
          v49 = 1;
          result = (int *)v30(v31, &v48);
          if (!v49 || BYTE4(v48) != 11)
            goto LABEL_32;
          goto LABEL_42;
        }
      }
      LODWORD(v48) = v44;
      goto LABEL_30;
    }
  }
  __break(1u);
LABEL_42:
  {
    WebCore::calculationValues(void)::map = 1;
    qword_1ECE90C98 = 0;
  }
  result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v48);
LABEL_32:
  if (v41 && BYTE4(v40) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v40);
  }
  if (v43 && BYTE4(v42) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    v28 = v42;
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v28);
  }
  return result;
}

uint64_t WebCore::RenderStyle::borderImageHorizontalRule(WebCore::RenderStyle *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 200) + 6);
}

uint64_t WebCore::RenderStyle::borderImageVerticalRule(WebCore::RenderStyle *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 200) + 7);
}

BOOL WebCore::BorderImageRepeatWrapper::equals(WebCore::BorderImageRepeatWrapper *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  int v9;
  unsigned int (*v10)(_QWORD *);
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(_QWORD *);
  uint64_t v14;
  _QWORD *v15;
  int v16;
  unsigned int (*v17)(_QWORD *);
  uint64_t v18;
  _QWORD *v19;

  if (a2 == a3)
    return 1;
  v6 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 4);
  v7 = *((_QWORD *)this + 5);
  v8 = (_QWORD *)((char *)a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
  v9 = v6(v8);
  v10 = (unsigned int (*)(_QWORD *))*((_QWORD *)this + 4);
  v11 = *((_QWORD *)this + 5);
  v12 = (_QWORD *)((char *)a3 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(unsigned int (**)(_QWORD *))(*v12 + v10);
  if (v9 != v10(v12))
    return 0;
  v13 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 10);
  v14 = *((_QWORD *)this + 11);
  v15 = (_QWORD *)((char *)a2 + (v14 >> 1));
  if ((v14 & 1) != 0)
    v13 = *(uint64_t (**)(_QWORD *))(*v15 + v13);
  v16 = v13(v15);
  v17 = (unsigned int (*)(_QWORD *))*((_QWORD *)this + 10);
  v18 = *((_QWORD *)this + 11);
  v19 = (_QWORD *)((char *)a3 + (v18 >> 1));
  if ((v18 & 1) != 0)
    v17 = *(unsigned int (**)(_QWORD *))(*v19 + v17);
  return v16 == v17(v19);
}

uint64_t WebCore::BorderImageRepeatWrapper::canInterpolate()
{
  return 0;
}

uint64_t WebCore::BorderImageRepeatWrapper::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t v11;
  void (*v12)(_QWORD *, uint64_t);
  _QWORD *v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *, __n128);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t (*v20)(_QWORD *, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *, __n128);
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t (*v29)(_QWORD *, uint64_t);

  v12 = (void (*)(_QWORD *, uint64_t))a1[6];
  v11 = a1[7];
  v13 = (_QWORD *)(a2 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v12 = *(void (**)(_QWORD *, uint64_t))(*v13 + v12);
  if (*a5 == 0.0)
    v14 = a3;
  else
    v14 = a4;
  v15 = (uint64_t (*)(_QWORD *, __n128))a1[4];
  v16 = a1[5];
  v17 = (_QWORD *)(v14 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *, __n128))(*v17 + v15);
  a6.n128_f64[0] = *a5;
  v18 = v15(v17, a6);
  v12(v13, v18);
  v20 = (uint64_t (*)(_QWORD *, uint64_t))a1[12];
  v21 = a1[13];
  v22 = (_QWORD *)(a2 + (v21 >> 1));
  if ((v21 & 1) != 0)
    v20 = *(uint64_t (**)(_QWORD *, uint64_t))(*v22 + v20);
  v29 = v20;
  if (*a5 == 0.0)
    v23 = a3;
  else
    v23 = a4;
  v24 = (uint64_t (*)(_QWORD *, __n128))a1[10];
  v25 = a1[11];
  v26 = (_QWORD *)(v23 + (v25 >> 1));
  if ((v25 & 1) != 0)
    v24 = *(uint64_t (**)(_QWORD *, __n128))(*v26 + v24);
  v19.n128_f64[0] = *a5;
  v27 = v24(v26, v19);
  return v29(v22, v27);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::NinePieceImageRule>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::NinePieceImageRule>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::NinePieceImageRule>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::GridTrackList const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  int v19;
  _BOOL4 v21;
  _BOOL4 v23;
  _BOOL4 v24;
  char v26;
  char *v27;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  v13 = *(unsigned int *)(v8 + 12);
  if ((_DWORD)v13 == *(_DWORD *)(v12 + 12))
  {
    if ((_DWORD)v13)
    {
      v14 = 0;
      v15 = 0;
      v16 = *(_QWORD *)v8;
      for (i = *(_QWORD *)v12; ; i += 96)
      {
        v18 = *(unsigned int *)(v16 + 88);
        v19 = *(_DWORD *)(i + 88);
        v21 = v19 == (_DWORD)v18 && v19 != -1;
        if ((_DWORD)v18 == -1 || !v21)
        {
          v23 = v19 == -1;
          if ((_DWORD)v18 == -1)
            v24 = v23;
          else
            v24 = v21;
          if (!v24)
            return v14;
        }
        else
        {
          v27 = &v26;
          if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E338E1B8[v18])(&v27, v16, i) & 1) == 0)
            return v14;
        }
        v14 = ++v15 >= v13;
        v16 += 96;
        if (v13 == v15)
          return v14;
      }
    }
    return 1;
  }
  return 0;
}

uint64_t WebCore::GridTemplatePropertyWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD v18[6];
  unint64_t v19;
  _QWORD *v20;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  v13 = *(_DWORD *)(v8 + 12);
  if (v13 != *(_DWORD *)(v12 + 12))
    return 0;
  v18[0] = v12;
  v18[1] = &v19;
  v18[2] = v12;
  v18[3] = &v19;
  v18[4] = v12;
  v18[5] = &v19;
  v19 = 0;
  if (!v13)
    return 1;
  v14 = 0;
  while (1)
  {
    v15 = *(unsigned int *)(*(_QWORD *)v8 + 96 * v14 + 88);
    if ((_DWORD)v15 == -1)
      break;
    v20 = v18;
    result = ((uint64_t (*)(_QWORD **))off_1E338E248[v15])(&v20);
    if ((_DWORD)result)
    {
      v14 = v19 + 1;
      v19 = v14;
      if (v14 < *(unsigned int *)(v8 + 12))
        continue;
    }
    return result;
  }
  v17 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::GridTemplatePropertyWrapper::blend(v17);
}

uint64_t WebCore::GridTemplatePropertyWrapper::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF ****a5)
{
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, WTF **, __n128);
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  __n128 v19;
  uint64_t v20;
  int v21;
  WTF ***v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  WTF ***v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  WTF **v42;
  WTF ****v43;
  _QWORD *v44;
  WTF ****v45;
  WTF ****v46;
  WTF **v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  unint64_t *v51;
  WTF ****v52;
  WTF **v53;
  uint64_t v54;
  unint64_t *v55;
  WTF ****v56;
  WTF **v57;
  unint64_t v58;
  WTF ***v59;

  v9 = (uint64_t (*)(_QWORD *, WTF **, __n128))a1[4];
  v8 = a1[5];
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *, WTF **, __n128))(*v10 + v9);
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  result = v15(v17);
  v20 = result;
  v21 = *(_DWORD *)(v14 + 12);
  if (v21 == *(_DWORD *)(result + 12))
  {
    v42 = (WTF **)result;
    v43 = &v59;
    v44 = (_QWORD *)result;
    v45 = &v59;
    v46 = (WTF ****)result;
    v47 = (WTF **)&v59;
    v59 = 0;
    if (v21)
    {
      v22 = 0;
      while (1)
      {
        v23 = *(unsigned int *)(*(_QWORD *)v14 + 96 * (_QWORD)v22 + 88);
        if ((_DWORD)v23 == -1)
          goto LABEL_38;
        v40 = (WTF *)&v42;
        result = ((uint64_t (*)(WTF **))off_1E338E248[v23])(&v40);
        if (!(_DWORD)result)
          goto LABEL_14;
        v22 = (WTF ***)((char *)v59 + 1);
        v59 = v22;
        v24 = *(unsigned int *)(v14 + 12);
        if ((unint64_t)v22 >= v24)
        {
          v25 = (_DWORD)v24 == 0;
          goto LABEL_25;
        }
      }
    }
    v25 = 1;
LABEL_25:
    v40 = 0;
    v41 = 0;
    v42 = &v40;
    v43 = (WTF ****)v20;
    v44 = &v58;
    v45 = a5;
    v46 = a5;
    v47 = &v40;
    v48 = v20;
    v49 = &v58;
    v50 = v20;
    v51 = &v58;
    v52 = a5;
    v53 = &v40;
    v54 = v20;
    v55 = &v58;
    v56 = a5;
    v57 = &v40;
    v58 = 0;
    if (!v25)
    {
      v34 = 0;
      while (1)
      {
        v35 = *(unsigned int *)(*(_QWORD *)v14 + 96 * v34 + 88);
        if ((_DWORD)v35 == -1)
          break;
        v59 = &v42;
        ((void (*)(WTF ****))off_1E338E2B8[v35])(&v59);
        v34 = v58 + 1;
        v58 = v34;
        if (v34 >= *(unsigned int *)(v14 + 12))
          goto LABEL_29;
      }
LABEL_38:
      result = std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_39;
    }
  }
  else
  {
LABEL_14:
    v19.n128_u64[0] = (unint64_t)*a5;
    if (*(double *)a5 < 0.5)
      v20 = v14;
    v26 = *(unsigned int *)(v20 + 12);
    v40 = 0;
    LODWORD(v41) = 0;
    HIDWORD(v41) = v26;
    if ((_DWORD)v26)
    {
      if (v26 >= 0x2AAAAAB)
      {
LABEL_39:
        __break(0xC471u);
        return result;
      }
      v27 = 96 * v26;
      v28 = (WTF *)WTF::fastMalloc((WTF *)(96 * v26));
      LODWORD(v41) = (v27 & 0xFFFFFFE0) / 0x60;
      v40 = v28;
      v29 = *(unsigned int *)(v20 + 12);
      if ((_DWORD)v29)
      {
        v30 = v28;
        v31 = *(WTF ****)v20;
        v32 = 96 * v29;
        do
        {
          *(_BYTE *)v30 = 0;
          *((_DWORD *)v30 + 22) = -1;
          v33 = *((unsigned int *)v31 + 22);
          if ((_DWORD)v33 != -1)
          {
            ((void (*)(WTF ***, WTF *, WTF ***))off_1E338E278[v33])(&v42, v30, v31);
            *((_DWORD *)v30 + 22) = v33;
          }
          v30 = (WTF *)((char *)v30 + 96);
          v31 += 12;
          v32 -= 96;
        }
        while (v32);
      }
    }
  }
LABEL_29:
  result = v9(v10, &v40, v19);
  v37 = (unsigned int *)v40;
  if (HIDWORD(v41))
  {
    v38 = 96 * HIDWORD(v41);
    do
    {
      v39 = v37[22];
      if ((_DWORD)v39 != -1)
        result = ((uint64_t (*)(WTF ***, unsigned int *))off_1E338E188[v39])(&v42, v37);
      v37[22] = -1;
      v37 += 24;
      v38 -= 96;
    }
    while (v38);
    v37 = (unsigned int *)v40;
  }
  if (v37)
  {
    v40 = 0;
    LODWORD(v41) = 0;
    return WTF::fastFree((WTF *)v37, v36);
  }
  return result;
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackSize const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntryRepeat const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntryAutoRepeat const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntrySubgrid const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntryMasonry const&)#1}> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(uint64_t **result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = **result;
  v2 = *(_QWORD *)(*result)[1];
  if (v2 < *(unsigned int *)(v1 + 12))
    return (uint64_t **)(*(_DWORD *)(*(_QWORD *)v1 + 96 * v2 + 88) == 0);
  __break(0xC471u);
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackSize const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntryRepeat const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntryAutoRepeat const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntrySubgrid const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntryMasonry const&)#1}> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(_BOOL8 result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)result + 16);
  v2 = **(_QWORD **)(*(_QWORD *)result + 24);
  if (v2 < *(unsigned int *)(v1 + 12))
    return *(_DWORD *)(*(_QWORD *)v1 + 96 * v2 + 88) == 1;
  __break(0xC471u);
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackSize const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntryRepeat const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntryAutoRepeat const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntrySubgrid const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntryMasonry const&)#1}> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(_BOOL8 result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  _DWORD *v4;

  v2 = *(_QWORD *)(*(_QWORD *)result + 32);
  v3 = **(_QWORD **)(*(_QWORD *)result + 40);
  if (v3 >= *(unsigned int *)(v2 + 12))
  {
    __break(0xC471u);
  }
  else
  {
    v4 = (_DWORD *)(*(_QWORD *)v2 + 96 * v3);
    return v4[22] == 2 && *v4 == *a2 && v4[5] == a2[5];
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackSize const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntryRepeat const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntryAutoRepeat const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntrySubgrid const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntryMasonry const&)#1}> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackSize const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntryRepeat const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntryAutoRepeat const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntrySubgrid const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntryMasonry const&)#1}> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackSize const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntryRepeat const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntryAutoRepeat const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntrySubgrid const&)#1},WebCore::canInterpolate(WebCore::GridTrackList const&,WebCore::GridTrackList const&)::{lambda(WebCore::GridTrackEntryMasonry const&)#1}> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEENS8_20GridTrackEntryRepeatENS8_24GridTrackEntryAutoRepeatENS8_21GridTrackEntrySubgridENS8_21GridTrackEntryMasonryEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJS9_SF_SG_SH_SI_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::GridTrackSize::GridTrackSize(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEENS8_20GridTrackEntryRepeatENS8_24GridTrackEntryAutoRepeatENS8_21GridTrackEntrySubgridENS8_21GridTrackEntryMasonryEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJS9_SF_SG_SH_SI_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;

  v3 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
      *(_DWORD *)(a2 + 8) = v3;
      *(_QWORD *)a2 = v6;
      v7 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v7)
      {
        v8 = *(_DWORD ***)a3;
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          if (*v8)
            *v10 += 2;
          *v6++ = v10;
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEENS8_20GridTrackEntryRepeatENS8_24GridTrackEntryAutoRepeatENS8_21GridTrackEntrySubgridENS8_21GridTrackEntryMasonryEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJS9_SF_SG_SH_SI_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v3 = *(unsigned int *)(a3 + 20);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >= 0x2AAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = 96 * v3;
      v7 = WTF::fastMalloc((WTF *)(96 * v3));
      *(_DWORD *)(a2 + 16) = (v6 & 0xFFFFFFE0) / 0x60;
      *(_QWORD *)(a2 + 8) = v7;
      v8 = *(unsigned int *)(a3 + 20);
      if ((_DWORD)v8)
      {
        v9 = v7;
        v10 = *(_QWORD *)(a3 + 8);
        v11 = 96 * v8;
        do
        {
          *(_BYTE *)v9 = 0;
          *(_DWORD *)(v9 + 88) = -1;
          v12 = *(unsigned int *)(v10 + 88);
          if ((_DWORD)v12 != -1)
          {
            ((void (*)(char *, uint64_t, uint64_t))off_1E338E2A8[v12])(&v13, v9, v10);
            *(_DWORD *)(v9 + 88) = v12;
          }
          v9 += 96;
          v10 += 96;
          v11 -= 96;
        }
        while (v11);
      }
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEENS8_20GridTrackEntryRepeatENS8_24GridTrackEntryAutoRepeatENS8_21GridTrackEntrySubgridENS8_21GridTrackEntryMasonryEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJS9_SF_SG_SH_SI_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(unsigned int *)(a3 + 20);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >= 0x2AAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = 96 * v3;
      v7 = WTF::fastMalloc((WTF *)(96 * v3));
      *(_DWORD *)(a2 + 16) = (v6 & 0xFFFFFFE0) / 0x60;
      *(_QWORD *)(a2 + 8) = v7;
      v8 = *(unsigned int *)(a3 + 20);
      if ((_DWORD)v8)
      {
        v9 = v7;
        v10 = *(_QWORD *)(a3 + 8);
        v11 = 96 * v8;
        do
        {
          *(_BYTE *)v9 = 0;
          *(_DWORD *)(v9 + 88) = -1;
          v12 = *(unsigned int *)(v10 + 88);
          if ((_DWORD)v12 != -1)
          {
            ((void (*)(char *, uint64_t, uint64_t))off_1E338E2A8[v12])(&v13, v9, v10);
            *(_DWORD *)(v9 + 88) = v12;
          }
          v9 += 96;
          v10 += 96;
          v11 -= 96;
        }
        while (v11);
      }
    }
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::GridTrackSize::GridTrackSize(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;

  v3 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
      *(_DWORD *)(a2 + 8) = v3;
      *(_QWORD *)a2 = v6;
      v7 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v7)
      {
        v8 = *(_DWORD ***)a3;
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          if (*v8)
            *v10 += 2;
          *v6++ = v10;
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
    }
  }
}

int *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackSize const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackEntryRepeat const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackEntryAutoRepeat const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackEntrySubgrid const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackEntryMasonry const&)#1}> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(int *result, _DWORD *a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unsigned __int8 v28;
  char v29;
  unsigned __int8 v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned __int8 v34;
  char v35;
  unsigned __int8 v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned __int8 v40;
  char v41;
  unsigned __int8 v42;
  uint64_t v43;
  int v44;
  __int16 v45;

  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(*(_QWORD *)result + 8);
  v5 = **(_QWORD **)(*(_QWORD *)result + 16);
  if (v5 >= *(unsigned int *)(v4 + 12))
  {
    __break(0xC471u);
    return result;
  }
  v6 = (_DWORD *)(*(_QWORD *)v4 + 96 * v5);
  if (v6[22])
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_50:
    WebCore::calculationValues(void)::map = 1;
    qword_1ECE90C98 = 0;
    *((_BYTE *)v22 + 3232) = 1;
    goto LABEL_32;
  }
  v7 = *(_QWORD *)v3;
  result = WebCore::blendFunc((WebCore::GridTrackSize *)&v26, a2, v6, *(double **)(v3 + 24), a3);
  v8 = *(unsigned int *)(v7 + 12);
  if ((_DWORD)v8 == *(_DWORD *)(v7 + 8))
  {
    v23 = v8 + (v8 >> 2);
    if (v23 >= 0x10)
      v24 = v23 + 1;
    else
      v24 = 16;
    if (v24 <= v8 + 1)
      v25 = v8 + 1;
    else
      v25 = v24;
    result = (int *)WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v7, v25);
    LODWORD(v8) = *(_DWORD *)(v7 + 12);
  }
  v9 = *(_QWORD *)v7 + 96 * v8;
  *(_DWORD *)v9 = v26;
  *(_DWORD *)(v9 + 8) = 0;
  *(_WORD *)(v9 + 13) = 0;
  v10 = v28;
  *(_BYTE *)(v9 + 12) = v28;
  *(_BYTE *)(v9 + 13) = v29;
  if (v10 - 2 < 9)
  {
    v11 = v30;
    *(_BYTE *)(v9 + 14) = v30;
    if (v11)
    {
      *(_DWORD *)(v9 + 8) = v27;
      goto LABEL_7;
    }
    v19 = v27;
    goto LABEL_17;
  }
  if (v10 <= 0xD)
  {
    if (((1 << v10) & 0x3003) != 0)
    {
      *(_DWORD *)(v9 + 8) = 0;
    }
    else if (v10 == 11)
    {
      v19 = v27;
      v27 = 0;
LABEL_17:
      *(_DWORD *)(v9 + 8) = v19;
    }
  }
LABEL_7:
  v28 = 0;
  v12 = v31;
  *(_DWORD *)(v9 + 24) = v32;
  *(_QWORD *)(v9 + 16) = v12;
  *(_DWORD *)(v9 + 32) = 0;
  *(_WORD *)(v9 + 37) = 0;
  v13 = v34;
  *(_BYTE *)(v9 + 36) = v34;
  *(_BYTE *)(v9 + 37) = v35;
  if (v13 - 2 < 9)
  {
    v14 = v36;
    *(_BYTE *)(v9 + 38) = v36;
    if (v14)
    {
      *(_DWORD *)(v9 + 32) = v33;
      goto LABEL_10;
    }
    v20 = v33;
    goto LABEL_19;
  }
  if (v13 <= 0xD)
  {
    if (((1 << v13) & 0x3003) != 0)
    {
      *(_DWORD *)(v9 + 32) = 0;
    }
    else if (v13 == 11)
    {
      v20 = v33;
      v33 = 0;
LABEL_19:
      *(_DWORD *)(v9 + 32) = v20;
    }
  }
LABEL_10:
  v34 = 0;
  v15 = v37;
  *(_DWORD *)(v9 + 48) = v38;
  *(_QWORD *)(v9 + 40) = v15;
  *(_DWORD *)(v9 + 56) = 0;
  *(_WORD *)(v9 + 61) = 0;
  v16 = v40;
  *(_BYTE *)(v9 + 60) = v40;
  *(_BYTE *)(v9 + 61) = v41;
  if (v16 - 2 < 9)
  {
    v17 = v42;
    *(_BYTE *)(v9 + 62) = v42;
    if (v17)
    {
      *(_DWORD *)(v9 + 56) = v39;
      goto LABEL_13;
    }
    v21 = v39;
    goto LABEL_21;
  }
  if (v16 <= 0xD)
  {
    if (((1 << v16) & 0x3003) != 0)
    {
      *(_DWORD *)(v9 + 56) = 0;
    }
    else if (v16 == 11)
    {
      v21 = v39;
      v39 = 0;
LABEL_21:
      *(_DWORD *)(v9 + 56) = v21;
    }
  }
LABEL_13:
  v40 = 0;
  v18 = v44;
  *(_QWORD *)(v9 + 64) = v43;
  *(_DWORD *)(v9 + 72) = v18;
  *(_WORD *)(v9 + 80) = v45;
  *(_DWORD *)(v9 + 88) = 0;
  ++*(_DWORD *)(v7 + 12);
  if (v34 != 11)
    goto LABEL_14;
  v22 = &dword_1ECE90000;
    goto LABEL_50;
LABEL_32:
  result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v33);
LABEL_14:
  if (v28 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v27);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackSize const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackEntryRepeat const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackEntryAutoRepeat const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackEntrySubgrid const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackEntryMasonry const&)#1}> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD **v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD **v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD **v37;
  uint64_t v38;
  _DWORD *v39;

  v2 = *(_QWORD *)result;
  if (**(double **)(*(_QWORD *)result + 32) < 0.5)
  {
    v4 = *(_QWORD *)(v2 + 40);
    v6 = (_DWORD *)(v4 + 12);
    v5 = *(unsigned int *)(v4 + 12);
    if (*(_DWORD *)(v4 + 12) == *(_DWORD *)(v4 + 8))
    {
      v7 = v5 + (v5 >> 2);
      if (v7 >= 0x10)
        v8 = v7 + 1;
      else
        v8 = 16;
      if (v8 <= v5 + 1)
        v9 = v5 + 1;
      else
        v9 = v8;
      result = WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v4, v9);
      v10 = *(_QWORD *)v4 + 96 * *(unsigned int *)(v4 + 12);
      v11 = *(unsigned int *)(a2 + 12);
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      *(_DWORD *)(v10 + 12) = v11;
      if ((_DWORD)v11)
      {
        if (v11 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19565A988);
        }
        result = WTF::fastMalloc((WTF *)(8 * v11));
        *(_DWORD *)(v10 + 8) = v11;
        *(_QWORD *)v10 = result;
        v12 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v12)
        {
          v13 = *(_DWORD ***)a2;
          v14 = 8 * v12;
          do
          {
            v15 = *v13;
            if (*v13)
              *v15 += 2;
            *(_QWORD *)result = v15;
            result += 8;
            ++v13;
            v14 -= 8;
          }
          while (v14);
        }
      }
    }
    else
    {
      v29 = *(unsigned int *)(a2 + 12);
      v10 = *(_QWORD *)v4 + 96 * v5;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      *(_DWORD *)(v10 + 12) = v29;
      if ((_DWORD)v29)
      {
        if (v29 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19565A990);
        }
        result = WTF::fastMalloc((WTF *)(8 * v29));
        *(_DWORD *)(v10 + 8) = v29;
        *(_QWORD *)v10 = result;
        v30 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v30)
        {
          v31 = *(_DWORD ***)a2;
          v32 = 8 * v30;
          do
          {
            v33 = *v31;
            if (*v31)
              *v33 += 2;
            *(_QWORD *)result = v33;
            result += 8;
            ++v31;
            v32 -= 8;
          }
          while (v32);
        }
      }
    }
    goto LABEL_43;
  }
  v16 = *(_QWORD *)(v2 + 48);
  v17 = **(_QWORD **)(v2 + 56);
  if (v17 >= *(unsigned int *)(v16 + 12))
    goto LABEL_56;
  v18 = *(_QWORD *)v16 + 96 * v17;
  if (*(_DWORD *)(v18 + 88) != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_56;
  }
  v19 = *(_QWORD *)(v2 + 40);
  v6 = (_DWORD *)(v19 + 12);
  v20 = *(unsigned int *)(v19 + 12);
  if (*(_DWORD *)(v19 + 12) == *(_DWORD *)(v19 + 8))
  {
    v21 = v20 + (v20 >> 2);
    if (v21 >= 0x10)
      v22 = v21 + 1;
    else
      v22 = 16;
    if (v22 <= v20 + 1)
      v23 = v20 + 1;
    else
      v23 = v22;
    result = WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v19, v23);
    v10 = *(_QWORD *)v19 + 96 * *(unsigned int *)(v19 + 12);
    v24 = *(unsigned int *)(v18 + 12);
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_DWORD *)(v10 + 12) = v24;
    if ((_DWORD)v24)
    {
      if (v24 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19565A998);
      }
      result = WTF::fastMalloc((WTF *)(8 * v24));
      *(_DWORD *)(v10 + 8) = v24;
      *(_QWORD *)v10 = result;
      v25 = *(unsigned int *)(v18 + 12);
      if ((_DWORD)v25)
      {
        v26 = *(_DWORD ***)v18;
        v27 = 8 * v25;
        do
        {
          v28 = *v26;
          if (*v26)
            *v28 += 2;
          *(_QWORD *)result = v28;
          result += 8;
          ++v26;
          v27 -= 8;
        }
        while (v27);
      }
    }
    goto LABEL_43;
  }
  v34 = *(_QWORD *)v19;
  v35 = *(unsigned int *)(v18 + 12);
  v10 = v34 + 96 * v20;
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_DWORD *)(v10 + 12) = v35;
  if (!(_DWORD)v35)
    goto LABEL_43;
  if (v35 >> 29)
  {
LABEL_56:
    __break(0xC471u);
    JUMPOUT(0x19565A980);
  }
  result = WTF::fastMalloc((WTF *)(8 * v35));
  *(_DWORD *)(v10 + 8) = v35;
  *(_QWORD *)v10 = result;
  v36 = *(unsigned int *)(v18 + 12);
  if ((_DWORD)v36)
  {
    v37 = *(_DWORD ***)v18;
    v38 = 8 * v36;
    do
    {
      v39 = *v37;
      if (*v37)
        *v39 += 2;
      *(_QWORD *)result = v39;
      result += 8;
      ++v37;
      v38 -= 8;
    }
    while (v38);
  }
LABEL_43:
  *(_DWORD *)(v10 + 88) = 1;
  ++*v6;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackSize const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackEntryRepeat const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackEntryAutoRepeat const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackEntrySubgrid const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackEntryMasonry const&)#1}> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[8];
  unint64_t v23;
  _QWORD *v24;

  v2 = *(_QWORD *)result;
  v3 = *(_QWORD *)(*(_QWORD *)result + 64);
  v4 = **(_QWORD **)(*(_QWORD *)result + 72);
  if (v4 >= *(unsigned int *)(v3 + 12))
    goto LABEL_20;
  v5 = *(_QWORD *)v3 + 96 * v4;
  if (*(_DWORD *)(v5 + 88) != 2)
  {
LABEL_19:
    result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_20:
    __break(0xC471u);
    return result;
  }
  v7 = *a2;
  v8 = *(_QWORD *)(v2 + 80);
  v20 = 0;
  v21 = 0;
  v22[0] = &v20;
  v22[1] = v5 + 8;
  v22[2] = &v23;
  v22[3] = v8;
  v22[4] = v8;
  v22[5] = &v20;
  v22[6] = v5 + 8;
  v22[7] = &v23;
  v23 = 0;
  if (a2[5])
  {
    v9 = 0;
    while (1)
    {
      v10 = *(unsigned int *)(*((_QWORD *)a2 + 1) + 96 * v9 + 88);
      if ((_DWORD)v10 == -1)
        goto LABEL_19;
      v24 = v22;
      result = ((uint64_t (*)(_QWORD **))off_1E338E2E8[v10])(&v24);
      v9 = v23 + 1;
      v23 = v9;
      if (v9 >= a2[5])
      {
        v11 = v20;
        v12 = v21;
        goto LABEL_9;
      }
    }
  }
  v11 = 0;
  v12 = 0;
LABEL_9:
  v13 = *(_QWORD *)(v2 + 88);
  v14 = *(unsigned int *)(v13 + 12);
  if ((_DWORD)v14 == *(_DWORD *)(v13 + 8))
  {
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= v14 + 1)
      v17 = v14 + 1;
    else
      v17 = v16;
    v19 = v12;
    result = WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v2 + 88), v17);
    v12 = v19;
    LODWORD(v14) = *(_DWORD *)(v13 + 12);
    v18 = *(_QWORD *)v13 + 96 * v14;
  }
  else
  {
    v18 = *(_QWORD *)v13 + 96 * v14;
  }
  *(_DWORD *)v18 = v7;
  *(_QWORD *)(v18 + 8) = v11;
  *(_QWORD *)(v18 + 16) = v12;
  *(_DWORD *)(v18 + 88) = 2;
  *(_DWORD *)(v13 + 12) = v14 + 1;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackSize const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackEntryRepeat const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackEntryAutoRepeat const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackEntrySubgrid const&)#1},WebCore::blendFunc(WebCore::GridTrackList const&,WebCore::GridTrackList const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackEntryMasonry const&)#1}> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(uint64_t result, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[8];
  unint64_t v23;
  _QWORD *v24;

  v2 = *(_QWORD *)result;
  v3 = *(_QWORD *)(*(_QWORD *)result + 96);
  v4 = **(_QWORD **)(*(_QWORD *)result + 104);
  if (v4 >= *(unsigned int *)(v3 + 12))
    goto LABEL_20;
  v5 = *(_QWORD *)v3 + 96 * v4;
  if (*(_DWORD *)(v5 + 88) != 3)
  {
LABEL_19:
    result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_20:
    __break(0xC471u);
    return result;
  }
  v7 = *a2;
  v8 = *(_QWORD *)(v2 + 112);
  v20 = 0;
  v21 = 0;
  v22[0] = &v20;
  v22[1] = v5 + 8;
  v22[2] = &v23;
  v22[3] = v8;
  v22[4] = v8;
  v22[5] = &v20;
  v22[6] = v5 + 8;
  v22[7] = &v23;
  v23 = 0;
  if (*((_DWORD *)a2 + 5))
  {
    v9 = 0;
    while (1)
    {
      v10 = *(unsigned int *)(*((_QWORD *)a2 + 1) + 96 * v9 + 88);
      if ((_DWORD)v10 == -1)
        goto LABEL_19;
      v24 = v22;
      result = ((uint64_t (*)(_QWORD **))off_1E338E2E8[v10])(&v24);
      v9 = v23 + 1;
      v23 = v9;
      if (v9 >= *((unsigned int *)a2 + 5))
      {
        v11 = v20;
        v12 = v21;
        goto LABEL_9;
      }
    }
  }
  v11 = 0;
  v12 = 0;
LABEL_9:
  v13 = *(_QWORD *)(v2 + 120);
  v14 = *(unsigned int *)(v13 + 12);
  if ((_DWORD)v14 == *(_DWORD *)(v13 + 8))
  {
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= v14 + 1)
      v17 = v14 + 1;
    else
      v17 = v16;
    v19 = v12;
    result = WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v2 + 120), v17);
    v12 = v19;
    LODWORD(v14) = *(_DWORD *)(v13 + 12);
    v18 = *(_QWORD *)v13 + 96 * v14;
  }
  else
  {
    v18 = *(_QWORD *)v13 + 96 * v14;
  }
  *(_BYTE *)v18 = v7;
  *(_QWORD *)(v18 + 8) = v11;
  *(_QWORD *)(v18 + 16) = v12;
  *(_DWORD *)(v18 + 88) = 3;
  *(_DWORD *)(v13 + 12) = v14 + 1;
  return result;
}

int *WebCore::blendFunc(WebCore::GridTrackSize *a1, _DWORD *a2, _DWORD *a3, double *a4, __n128 a5)
{
  _DWORD *v7;
  int v9;
  uint64_t v10;
  int v11;
  int *result;
  __n128 v13;
  unsigned int v14;
  char v15;
  unsigned int v16;
  char v17;

  v7 = a2;
  v9 = *a2;
  if (*a2 == *a3)
  {
    if (v9 == 1)
    {
      WebCore::blendFunc((WebCore::Length *)&v16, (uint64_t)(a2 + 2), (uint64_t)(a3 + 2), (uint64_t)a4, a5);
      WebCore::blendFunc((WebCore::Length *)&v14, (uint64_t)(v7 + 8), (uint64_t)(a3 + 8), (uint64_t)a4, v13);
      result = (int *)WebCore::GridTrackSize::GridTrackSize(a1, (const WebCore::GridLength *)&v16, (const WebCore::GridLength *)&v14);
      if (v15 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v14);
      }
    }
    else
    {
      if (v9)
      {
        WebCore::blendFunc((WebCore::Length *)&v16, (uint64_t)(a2 + 14), (uint64_t)(a3 + 14), (uint64_t)a4, a5);
        v10 = (uint64_t)a1;
        v11 = 2;
      }
      else
      {
        WebCore::blendFunc((WebCore::Length *)&v16, (uint64_t)(a2 + 2), (uint64_t)(a3 + 2), (uint64_t)a4, a5);
        v10 = (uint64_t)a1;
        v11 = 0;
      }
      result = (int *)WebCore::GridTrackSize::GridTrackSize(v10, (uint64_t)&v16, v11);
    }
    if (v17 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v16);
    }
  }
  else
  {
    if (*a4 >= 0.5)
      a2 = a3;
    return (int *)WebCore::GridTrackSize::GridTrackSize((uint64_t)a1, (uint64_t)a2);
  }
  return result;
}

void WebCore::blendFunc(WebCore::Length *this, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  int v6;
  uint64_t v7;
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  int v14;
  unint64_t v15;
  double v16;
  double v17;
  unsigned int v18;
  unsigned __int8 v19;
  char v20;
  char v21;

  v6 = *(_DWORD *)(a2 + 16);
  if ((v6 == 1) != (*(_DWORD *)(a3 + 16) == 1))
  {
    if (*(double *)a4 >= 0.5)
      v7 = a3;
    else
      v7 = a2;
    *(_DWORD *)this = 0;
    *((_BYTE *)this + 6) = 0;
    v8 = *(unsigned __int8 *)(v7 + 4);
    *((_BYTE *)this + 4) = v8;
    *((_BYTE *)this + 5) = *(_BYTE *)(v7 + 5);
    if ((v8 - 2) >= 9)
    {
      if (v8 == 11)
      {
        *(_DWORD *)this = *(_DWORD *)v7;
        WebCore::Length::ref((int *)this);
      }
    }
    else
    {
      *((_BYTE *)this + 6) = *(_BYTE *)(v7 + 6);
      *(_DWORD *)this = *(_DWORD *)v7;
    }
    *((_QWORD *)this + 1) = *(_QWORD *)(v7 + 8);
    v13 = *(_DWORD *)(v7 + 16);
LABEL_17:
    *((_DWORD *)this + 4) = v13;
    return;
  }
  if (v6 == 1)
  {
    v9 = *(double *)(a2 + 8);
    v10 = *(double *)(a3 + 8);
    if (*(_BYTE *)(a4 + 10) == 1)
    {
      v16 = *(double *)(a4 + 16);
      if (v16 != 0.0)
      {
        v17 = v10 * v16;
        v9 = v9 + v17;
        v10 = v10 + v17;
      }
    }
    v11 = v9 + v9;
    if (!*(_BYTE *)(a4 + 9))
      v11 = v9;
    v12 = v11 + (v10 - v9) * *(double *)a4;
    *(_DWORD *)this = 0;
    *(_DWORD *)((char *)this + 3) = 0;
    *((double *)this + 1) = v12;
    v13 = 1;
    goto LABEL_17;
  }
  WebCore::blend((unsigned __int8 *)a2, (unsigned __int8 *)a3, a4, 0, (uint64_t)&v18, a5);
  *(_DWORD *)this = 0;
  *((_BYTE *)this + 6) = 0;
  v14 = v19;
  *((_BYTE *)this + 4) = v19;
  *((_BYTE *)this + 5) = v20;
  if ((v14 - 2) < 9)
  {
    *((_BYTE *)this + 6) = v21;
    *(_DWORD *)this = v18;
LABEL_19:
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    return;
  }
  if (v14 != 11)
    goto LABEL_19;
  v15 = v18;
  *(_DWORD *)this = v18;
  WebCore::Length::ref((int *)this);
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  {
    WebCore::calculationValues(void)::map = 1;
    qword_1ECE90C98 = 0;
  }
  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v15);
}

int *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::blendFunc(WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackSize const&)#1},WebCore::blendFunc(WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(int *result, _DWORD *a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int *v25;
  int v26;
  unsigned int v27;
  unsigned __int8 v28;
  char v29;
  unsigned __int8 v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned __int8 v34;
  char v35;
  unsigned __int8 v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned __int8 v40;
  char v41;
  unsigned __int8 v42;
  uint64_t v43;
  int v44;
  __int16 v45;

  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(*(_QWORD *)result + 8);
  v5 = **(_QWORD **)(*(_QWORD *)result + 16);
  if (v5 >= *(unsigned int *)(v4 + 12))
  {
    __break(0xC471u);
    return result;
  }
  v6 = (_DWORD *)(*(_QWORD *)v4 + 96 * v5);
  if (v6[22])
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_50:
    WebCore::calculationValues(void)::map = 1;
    qword_1ECE90C98 = 0;
    *((_BYTE *)v25 + 3232) = 1;
    goto LABEL_39;
  }
  v7 = *(_QWORD *)v3;
  result = WebCore::blendFunc((WebCore::GridTrackSize *)&v26, a2, v6, *(double **)(v3 + 24), a3);
  v8 = *(unsigned int *)(v7 + 12);
  if ((_DWORD)v8 == *(_DWORD *)(v7 + 8))
  {
    v9 = v8 + (v8 >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 <= v8 + 1)
      v11 = v8 + 1;
    else
      v11 = v10;
    result = (int *)WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v7, v11);
    LODWORD(v8) = *(_DWORD *)(v7 + 12);
  }
  v12 = *(_QWORD *)v7 + 96 * v8;
  *(_DWORD *)v12 = v26;
  *(_DWORD *)(v12 + 8) = 0;
  *(_WORD *)(v12 + 13) = 0;
  v13 = v28;
  *(_BYTE *)(v12 + 12) = v28;
  *(_BYTE *)(v12 + 13) = v29;
  if (v13 - 2 < 9)
  {
    v14 = v30;
    *(_BYTE *)(v12 + 14) = v30;
    if (v14)
    {
      *(_DWORD *)(v12 + 8) = v27;
      goto LABEL_14;
    }
    v22 = v27;
    goto LABEL_24;
  }
  if (v13 <= 0xD)
  {
    if (((1 << v13) & 0x3003) != 0)
    {
      *(_DWORD *)(v12 + 8) = 0;
    }
    else if (v13 == 11)
    {
      v22 = v27;
      v27 = 0;
LABEL_24:
      *(_DWORD *)(v12 + 8) = v22;
    }
  }
LABEL_14:
  v28 = 0;
  v15 = v31;
  *(_DWORD *)(v12 + 24) = v32;
  *(_QWORD *)(v12 + 16) = v15;
  *(_DWORD *)(v12 + 32) = 0;
  *(_WORD *)(v12 + 37) = 0;
  v16 = v34;
  *(_BYTE *)(v12 + 36) = v34;
  *(_BYTE *)(v12 + 37) = v35;
  if (v16 - 2 < 9)
  {
    v17 = v36;
    *(_BYTE *)(v12 + 38) = v36;
    if (v17)
    {
      *(_DWORD *)(v12 + 32) = v33;
      goto LABEL_17;
    }
    v23 = v33;
    goto LABEL_26;
  }
  if (v16 <= 0xD)
  {
    if (((1 << v16) & 0x3003) != 0)
    {
      *(_DWORD *)(v12 + 32) = 0;
    }
    else if (v16 == 11)
    {
      v23 = v33;
      v33 = 0;
LABEL_26:
      *(_DWORD *)(v12 + 32) = v23;
    }
  }
LABEL_17:
  v34 = 0;
  v18 = v37;
  *(_DWORD *)(v12 + 48) = v38;
  *(_QWORD *)(v12 + 40) = v18;
  *(_DWORD *)(v12 + 56) = 0;
  *(_WORD *)(v12 + 61) = 0;
  v19 = v40;
  *(_BYTE *)(v12 + 60) = v40;
  *(_BYTE *)(v12 + 61) = v41;
  if (v19 - 2 < 9)
  {
    v20 = v42;
    *(_BYTE *)(v12 + 62) = v42;
    if (v20)
    {
      *(_DWORD *)(v12 + 56) = v39;
      goto LABEL_20;
    }
    v24 = v39;
    goto LABEL_28;
  }
  if (v19 <= 0xD)
  {
    if (((1 << v19) & 0x3003) != 0)
    {
      *(_DWORD *)(v12 + 56) = 0;
    }
    else if (v19 == 11)
    {
      v24 = v39;
      v39 = 0;
LABEL_28:
      *(_DWORD *)(v12 + 56) = v24;
    }
  }
LABEL_20:
  v40 = 0;
  v21 = v44;
  *(_QWORD *)(v12 + 64) = v43;
  *(_DWORD *)(v12 + 72) = v21;
  *(_WORD *)(v12 + 80) = v45;
  *(_DWORD *)(v12 + 88) = 0;
  ++*(_DWORD *)(v7 + 12);
  if (v34 != 11)
    goto LABEL_21;
  v25 = &dword_1ECE90000;
    goto LABEL_50;
LABEL_39:
  result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v33);
LABEL_21:
  if (v28 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v27);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::blendFunc(WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WebCore::GridTrackSize const&)#1},WebCore::blendFunc(WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::CSSPropertyBlendingContext const&)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD **v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD **v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD **v37;
  uint64_t v38;
  _DWORD *v39;

  v2 = *(_QWORD *)result;
  if (**(double **)(*(_QWORD *)result + 32) < 0.5)
  {
    v4 = *(_QWORD *)(v2 + 40);
    v6 = (_DWORD *)(v4 + 12);
    v5 = *(unsigned int *)(v4 + 12);
    if (*(_DWORD *)(v4 + 12) == *(_DWORD *)(v4 + 8))
    {
      v7 = v5 + (v5 >> 2);
      if (v7 >= 0x10)
        v8 = v7 + 1;
      else
        v8 = 16;
      if (v8 <= v5 + 1)
        v9 = v5 + 1;
      else
        v9 = v8;
      result = WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v4, v9);
      v10 = *(_QWORD *)v4 + 96 * *(unsigned int *)(v4 + 12);
      v11 = *(unsigned int *)(a2 + 12);
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      *(_DWORD *)(v10 + 12) = v11;
      if ((_DWORD)v11)
      {
        if (v11 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19565B5E0);
        }
        result = WTF::fastMalloc((WTF *)(8 * v11));
        *(_DWORD *)(v10 + 8) = v11;
        *(_QWORD *)v10 = result;
        v12 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v12)
        {
          v13 = *(_DWORD ***)a2;
          v14 = 8 * v12;
          do
          {
            v15 = *v13;
            if (*v13)
              *v15 += 2;
            *(_QWORD *)result = v15;
            result += 8;
            ++v13;
            v14 -= 8;
          }
          while (v14);
        }
      }
    }
    else
    {
      v29 = *(unsigned int *)(a2 + 12);
      v10 = *(_QWORD *)v4 + 96 * v5;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      *(_DWORD *)(v10 + 12) = v29;
      if ((_DWORD)v29)
      {
        if (v29 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19565B5E8);
        }
        result = WTF::fastMalloc((WTF *)(8 * v29));
        *(_DWORD *)(v10 + 8) = v29;
        *(_QWORD *)v10 = result;
        v30 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v30)
        {
          v31 = *(_DWORD ***)a2;
          v32 = 8 * v30;
          do
          {
            v33 = *v31;
            if (*v31)
              *v33 += 2;
            *(_QWORD *)result = v33;
            result += 8;
            ++v31;
            v32 -= 8;
          }
          while (v32);
        }
      }
    }
    goto LABEL_43;
  }
  v16 = *(_QWORD *)(v2 + 48);
  v17 = **(_QWORD **)(v2 + 56);
  if (v17 >= *(unsigned int *)(v16 + 12))
    goto LABEL_56;
  v18 = *(_QWORD *)v16 + 96 * v17;
  if (*(_DWORD *)(v18 + 88) != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_56;
  }
  v19 = *(_QWORD *)(v2 + 40);
  v6 = (_DWORD *)(v19 + 12);
  v20 = *(unsigned int *)(v19 + 12);
  if (*(_DWORD *)(v19 + 12) == *(_DWORD *)(v19 + 8))
  {
    v21 = v20 + (v20 >> 2);
    if (v21 >= 0x10)
      v22 = v21 + 1;
    else
      v22 = 16;
    if (v22 <= v20 + 1)
      v23 = v20 + 1;
    else
      v23 = v22;
    result = WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v19, v23);
    v10 = *(_QWORD *)v19 + 96 * *(unsigned int *)(v19 + 12);
    v24 = *(unsigned int *)(v18 + 12);
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_DWORD *)(v10 + 12) = v24;
    if ((_DWORD)v24)
    {
      if (v24 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19565B5F0);
      }
      result = WTF::fastMalloc((WTF *)(8 * v24));
      *(_DWORD *)(v10 + 8) = v24;
      *(_QWORD *)v10 = result;
      v25 = *(unsigned int *)(v18 + 12);
      if ((_DWORD)v25)
      {
        v26 = *(_DWORD ***)v18;
        v27 = 8 * v25;
        do
        {
          v28 = *v26;
          if (*v26)
            *v28 += 2;
          *(_QWORD *)result = v28;
          result += 8;
          ++v26;
          v27 -= 8;
        }
        while (v27);
      }
    }
    goto LABEL_43;
  }
  v34 = *(_QWORD *)v19;
  v35 = *(unsigned int *)(v18 + 12);
  v10 = v34 + 96 * v20;
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_DWORD *)(v10 + 12) = v35;
  if (!(_DWORD)v35)
    goto LABEL_43;
  if (v35 >> 29)
  {
LABEL_56:
    __break(0xC471u);
    JUMPOUT(0x19565B5D8);
  }
  result = WTF::fastMalloc((WTF *)(8 * v35));
  *(_DWORD *)(v10 + 8) = v35;
  *(_QWORD *)v10 = result;
  v36 = *(unsigned int *)(v18 + 12);
  if ((_DWORD)v36)
  {
    v37 = *(_DWORD ***)v18;
    v38 = 8 * v36;
    do
    {
      v39 = *v37;
      if (*v37)
        *v39 += 2;
      *(_QWORD *)result = v39;
      result += 8;
      ++v37;
      v38 -= 8;
    }
    while (v38);
  }
LABEL_43:
  *(_DWORD *)(v10 + 88) = 1;
  ++*v6;
  return result;
}

BOOL WebCore::PropertyWrapperGetter<WebCore::TextEmphasisMark>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextEmphasisMark>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::TextEmphasisStyleWrapper::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t v11;
  unsigned int v12;
  _DWORD *v13;
  int v14;
  uint64_t (*v15)(_QWORD *, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD *, __n128);
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  WebCore::StyleRareInheritedData *v27;
  WTF *v28;
  void *v29;
  uint64_t (*v30)(_QWORD *, uint64_t);

  if (*a5 <= 0.5)
    v11 = a3;
  else
    v11 = a4;
  v12 = *(_DWORD *)(*(_QWORD *)(v11 + 24) + 228) & 0x2000000;
  v13 = *(_DWORD **)(a2 + 24);
  v14 = v13[57];
  if (((((v14 & 0x2000000) == 0) ^ (v12 >> 25)) & 1) == 0)
  {
    if (*v13 != 1)
    {
      v24 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v24, (uint64_t)v13);
      v27 = *(WebCore::StyleRareInheritedData **)(a2 + 24);
      *(_QWORD *)(a2 + 24) = v25;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v27, v26);
          WTF::fastFree(v28, v29);
          v25 = *(_DWORD **)(a2 + 24);
        }
        else
        {
          --*(_DWORD *)v27;
        }
      }
      v14 = v25[57];
      v13 = v25;
    }
    v13[57] = v14 & 0xFDFFFFFF | v12;
  }
  v15 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v16 = a1[5];
  v17 = (_QWORD *)(a2 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *, uint64_t))(*v17 + v15);
  v30 = v15;
  if (*a5 == 0.0)
    v18 = a3;
  else
    v18 = a4;
  v19 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v20 = a1[3];
  v21 = (_QWORD *)(v18 + (v20 >> 1));
  if ((v20 & 1) != 0)
    v19 = *(uint64_t (**)(_QWORD *, __n128))(*v21 + v19);
  a6.n128_f64[0] = *a5;
  v22 = v19(v21, a6);
  return v30(v17, v22);
}

BOOL WebCore::PropertyWrapperAspectRatio::equals(WebCore::PropertyWrapperAspectRatio *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 == a3)
    return 1;
  v3 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 32);
  v4 = *(_QWORD *)(*((_QWORD *)a3 + 1) + 32);
  return ((*(_DWORD *)(v4 + 148) ^ *(_DWORD *)(v3 + 148)) & 0x60) == 0
      && *(double *)(v3 + 104) == *(double *)(v4 + 104)
      && *(double *)(v3 + 112) == *(double *)(v4 + 112);
}

BOOL WebCore::PropertyWrapperAspectRatio::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;

  v3 = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 32) + 148) >> 5) & 3;
  if (v3 == 1)
  {
    v4 = 32;
    return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32) + 148) & 0x60) == v4;
  }
  if (v3 == 2)
  {
    v4 = 64;
    return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32) + 148) & 0x60) == v4;
  }
  return 0;
}

void WebCore::PropertyWrapperAspectRatio::blend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  WTF **v10;
  WTF *v11;
  WebCore::StyleMiscNonInheritedData *v12;
  WTF::StringImpl *v13;
  WebCore::StyleMiscNonInheritedData *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  WTF *v20;
  double *v21;
  int v22;
  uint64_t v23;
  double *v24;
  double *v25;
  double *v26;
  double v27;
  uint64_t v28;
  double *v29;
  double *v30;
  double *v31;
  double v32;
  double v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WebCore::StyleMiscNonInheritedData *v36;
  WTF *v37;
  void *v38;
  WTF *v39;
  void *v40;
  double v41;
  double v42;
  WebCore::StyleMiscNonInheritedData *v43;

  if (*(double *)a5 >= 0.5)
    v8 = a4;
  else
    v8 = a3;
  v9 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 32) + 148) >> 5) & 3;
  v10 = (WTF **)(a2 + 8);
  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 32) + 148) >> 5) & 3) != v9)
  {
    v11 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v10);
    v12 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v11 + 4);
    if (*(_DWORD *)v12 != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy(v12, (uint64_t *)&v43);
      v12 = v43;
      v14 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v11 + 4);
      *((_QWORD *)v11 + 4) = v43;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v14, v13);
          WTF::fastFree(v37, v38);
          v12 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v11 + 4);
        }
        else
        {
          --*(_DWORD *)v14;
        }
      }
    }
    *((_DWORD *)v12 + 37) = *((_DWORD *)v12 + 37) & 0xFFFFFF9F | (32 * (v9 & 3));
  }
  if (*(_BYTE *)(a5 + 8))
  {
    if (*(double *)a5 == 0.0)
      v15 = a3;
    else
      v15 = a4;
    v16 = *(_QWORD *)(*(_QWORD *)(v15 + 8) + 32);
    v17 = *(double *)(v16 + 104);
    v18 = *(double *)(v16 + 112);
    v19 = *((_QWORD *)*v10 + 4);
    if (*(double *)(v19 + 104) == v17 && *(double *)(v19 + 112) == v18)
      return;
    v20 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v10);
    v21 = (double *)*((_QWORD *)v20 + 4);
    v22 = *(_DWORD *)v21;
    goto LABEL_31;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 32);
  v24 = (double *)(v23 + 112);
  v25 = (double *)(v23 + 104);
  if (((*(_DWORD *)(a3 + 44) >> 13) & 6u) - 2 >= 4)
    v26 = v24;
  else
    v26 = v25;
  if (((*(_DWORD *)(a3 + 44) >> 13) & 6u) - 2 >= 4)
    v24 = v25;
  v27 = log(*v24 / *v26);
  v28 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 32);
  v29 = (double *)(v28 + 112);
  v30 = (double *)(v28 + 104);
  if (((*(_DWORD *)(a4 + 44) >> 13) & 6u) - 2 >= 4)
    v31 = v29;
  else
    v31 = v30;
  if (((*(_DWORD *)(a4 + 44) >> 13) & 6u) - 2 >= 4)
    v29 = v30;
  v32 = log(*v29 / *v31);
  if (*(_BYTE *)(a5 + 10) == 1)
  {
    v41 = *(double *)(a5 + 16);
    if (v41 != 0.0)
    {
      v42 = v32 * v41;
      v27 = v27 + v42;
      v32 = v32 + v42;
    }
  }
  v33 = v27 + v27;
  if (!*(_BYTE *)(a5 + 9))
    v33 = v27;
  v17 = exp(v33 + (v32 - v27) * *(double *)a5);
  v34 = *((_QWORD *)*v10 + 4);
  if (*(double *)(v34 + 104) != v17 || *(double *)(v34 + 112) != 1.0)
  {
    v20 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v10);
    v21 = (double *)*((_QWORD *)v20 + 4);
    v22 = *(_DWORD *)v21;
    v18 = 1.0;
LABEL_31:
    if (v22 != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)v21, (uint64_t *)&v43);
      v21 = (double *)v43;
      v36 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v20 + 4);
      *((_QWORD *)v20 + 4) = v43;
      if (v36)
      {
        if (*(_DWORD *)v36 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v36, v35);
          WTF::fastFree(v39, v40);
          v21 = (double *)*((_QWORD *)v20 + 4);
        }
        else
        {
          --*(_DWORD *)v36;
        }
      }
    }
    v21[13] = v17;
    v21[14] = v18;
  }
}

uint64_t WebCore::RenderStyle::offsetPath(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 328);
}

uint64_t WebCore::RenderStyle::setOffsetPath(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  uint64_t v11;
  _DWORD *v12;
  WTF *v13;
  void *v14;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (*(_QWORD *)(*(_QWORD *)(v3 + 40) + 328) != *a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v13, v14);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v11 = *a2;
    *a2 = 0;
    v12 = *(_DWORD **)(result + 328);
    *(_QWORD *)(result + 328) = v11;
    if (v12)
    {
      if (v12[2] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      else
        --v12[2];
    }
  }
  return result;
}

uint64_t WebCore::OffsetPathWrapper::animationIsAccelerated(WebCore::OffsetPathWrapper *this, const WebCore::Settings *a2)
{
  return (*((_QWORD *)a2 + 89) >> 47) & 1;
}

uint64_t WebCore::RenderStyle::offsetDistance(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 40) + 400;
}

uint64_t WebCore::OffsetDistanceWrapper::animationIsAccelerated(WebCore::OffsetDistanceWrapper *this, const WebCore::Settings *a2)
{
  return (*((_QWORD *)a2 + 89) >> 47) & 1;
}

BOOL WebCore::LengthPointOrAutoPropertyWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t (*v14)(_QWORD *);
  uint64_t v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  void *v20;
  int v21;
  void *v22;
  _BOOL4 v24;
  _BOOL8 v25;
  unsigned int v27;
  unsigned __int8 v28;
  char v29;
  char v30;
  unsigned int v31;
  unsigned __int8 v32;
  char v33;
  char v34;
  unsigned int v35;
  unsigned __int8 v36;
  char v37;
  char v38;
  unsigned int v39;
  unsigned __int8 v40;
  char v41;
  char v42;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (unsigned int *)v5(v7);
  v9 = v8;
  v35 = 0;
  v38 = 0;
  v36 = *((_BYTE *)v8 + 4);
  v10 = v36;
  v37 = *((_BYTE *)v8 + 5);
  if (v36 - 2 >= 9)
  {
    v11 = 0;
    if (v36 == 11)
    {
      v11 = (void *)*v8;
      v35 = *v8;
      WebCore::Length::ref((int *)&v35);
    }
  }
  else
  {
    v38 = *((_BYTE *)v8 + 6);
    if (v38)
    {
      v35 = *v8;
      v11 = (void *)v35;
    }
    else
    {
      v11 = (void *)*v8;
      v35 = *v8;
    }
  }
  v42 = 0;
  v40 = *((_BYTE *)v9 + 12);
  v12 = v40;
  v41 = *((_BYTE *)v9 + 13);
  if (v40 - 2 >= 9)
  {
    v13 = 0;
    if (v40 == 11)
    {
      v13 = (void *)v9[2];
      v39 = v9[2];
      WebCore::Length::ref((int *)&v39);
    }
  }
  else
  {
    v13 = (void *)v9[2];
  }
  v14 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = (_QWORD *)(a3 + (v15 >> 1));
  if ((v15 & 1) != 0)
    v14 = *(uint64_t (**)(_QWORD *))(*v16 + v14);
  v17 = (unsigned int *)v14(v16);
  v18 = v17;
  v27 = 0;
  v30 = 0;
  v28 = *((_BYTE *)v17 + 4);
  v19 = v28;
  v29 = *((_BYTE *)v17 + 5);
  if (v28 - 2 >= 9)
  {
    v20 = 0;
    if (v28 == 11)
    {
      v20 = (void *)*v17;
      v27 = *v17;
      WebCore::Length::ref((int *)&v27);
    }
  }
  else
  {
    v30 = *((_BYTE *)v17 + 6);
    if (v30)
    {
      v27 = *v17;
      v20 = (void *)v27;
    }
    else
    {
      v20 = (void *)*v17;
      v27 = *v17;
    }
  }
  v34 = 0;
  v32 = *((_BYTE *)v18 + 12);
  v21 = v32;
  v33 = *((_BYTE *)v18 + 13);
  if (v32 - 2 >= 9)
  {
    v22 = 0;
    if (v32 == 11)
    {
      v22 = (void *)v18[2];
      v31 = v18[2];
      WebCore::Length::ref((int *)&v31);
    }
  }
  else
  {
    v22 = (void *)v18[2];
  }
  v24 = v10 != 1 && v19 > 1;
  if (v10)
    v25 = v24;
  else
    v25 = 0;
  if (v21 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v22);
  }
  if (v19 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v20);
  }
  if (v12 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v13);
  }
  if (v10 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v11);
  }
  return v25;
}

uint64_t WebCore::OffsetLengthPointWrapper::animationIsAccelerated(WebCore::OffsetLengthPointWrapper *this, const WebCore::Settings *a2)
{
  return (*((_QWORD *)a2 + 89) >> 47) & 1;
}

uint64_t WebCore::RenderStyle::offsetRotate(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 440);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::OffsetRotation>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  float v9;
  uint64_t (*v10)(_QWORD *);
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(float *)&v8;
  v10 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = (_QWORD *)(a3 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *))(*v12 + v10);
  v13 = BYTE4(v8);
  v14 = v10(v12);
  return v9 == *(float *)&v14 && v13 == BYTE4(v14);
}

BOOL WebCore::OffsetRotateWrapper::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  return BYTE4(v8) == ((unint64_t)v9(v11) >> 32);
}

unint64_t WebCore::OffsetRotateWrapper::blend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t (*v13)(_QWORD *);
  uint64_t v14;
  _QWORD *v15;
  float v16;
  unint64_t v17;
  unint64_t result;
  float v19;
  float v20;
  float v21;
  float v22;
  WTF **v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  _DWORD *v27;
  WTF *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WebCore::StyleRareNonInheritedData *v31;
  WTF *v32;
  void *v33;
  double v34;
  float v35;

  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  v13 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = (_QWORD *)(a4 + (v14 >> 1));
  if ((v14 & 1) != 0)
    v13 = *(uint64_t (**)(_QWORD *))(*v15 + v13);
  v16 = *(float *)&v12;
  v17 = HIDWORD(v12);
  result = v13(v15);
  v19 = *(float *)&result;
  if (*(_BYTE *)(a5 + 8))
  {
    if (*(double *)a5 != 0.0)
    {
      v16 = *(float *)&result;
      v17 = HIDWORD(result);
    }
  }
  else
  {
    if (*(_BYTE *)(a5 + 10) == 1)
    {
      v34 = *(double *)(a5 + 16);
      if (v34 != 0.0)
      {
        v35 = v34 * *(float *)&result;
        v16 = v16 + v35;
        v19 = *(float *)&result + v35;
      }
    }
    v20 = v16 + v16;
    if (!*(_BYTE *)(a5 + 9))
      v20 = v16;
    v21 = v20 + (float)(v19 - v16) * *(double *)a5;
    v22 = -3.4028e38;
    if (v21 > -3.4028e38)
      v22 = v21;
    if (v21 >= 3.4028e38)
      v16 = 3.4028e38;
    else
      v16 = v22;
  }
  v24 = *(_QWORD *)(a2 + 8);
  v23 = (WTF **)(a2 + 8);
  v25 = *(_QWORD *)(v24 + 40);
  if (*(float *)(v25 + 440) != v16 || *(unsigned __int8 *)(v25 + 444) != v17)
  {
    v26 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v23);
    v27 = (_DWORD *)*((_QWORD *)v26 + 5);
    if (*v27 == 1)
    {
      result = *((_QWORD *)v26 + 5);
    }
    else
    {
      v28 = v26;
      v29 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v29, (uint64_t)v27);
      v31 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v28 + 5);
      *((_QWORD *)v28 + 5) = result;
      if (v31)
      {
        if (*(_DWORD *)v31 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v31, v30);
          WTF::fastFree(v32, v33);
          result = *((_QWORD *)v28 + 5);
        }
        else
        {
          --*(_DWORD *)v31;
        }
      }
    }
    *(float *)(result + 440) = v16;
    *(_BYTE *)(result + 444) = v17;
  }
  return result;
}

uint64_t WebCore::OffsetRotateWrapper::animationIsAccelerated(WebCore::OffsetRotateWrapper *this, const WebCore::Settings *a2)
{
  return (*((_QWORD *)a2 + 89) >> 47) & 1;
}

uint64_t WebCore::PropertyWrapperContent::equals(WebCore::PropertyWrapperContent *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;
  int v7;

  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 80);
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 32) + 80);
  v5 = (v3 | v4) == 0;
  if (v3)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (v6)
    return v5;
  v7 = *(_DWORD *)(v3 + 24);
  if (v7 != *(_DWORD *)(v4 + 24))
    return 0;
  switch(v7)
  {
    case 3:
      return WTF::equal(*(WTF **)(v3 + 32), *(const WTF::StringImpl **)(v4 + 32), a3);
    case 2:
      return *(unsigned __int8 *)(v3 + 28) == *(unsigned __int8 *)(v4 + 28);
    case 1:
      return *(_QWORD *)(v3 + 32) == *(_QWORD *)(v4 + 32);
    case 0:
      return WebCore::operator==(v3, v4);
  }
  return 0;
}

uint64_t WebCore::PropertyWrapperContent::canInterpolate()
{
  return 0;
}

void WebCore::PropertyWrapperContent::blend(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WebCore::StyleMiscNonInheritedData *v18;
  WTF::StringImpl *v19;
  WebCore::StyleMiscNonInheritedData *v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  WebCore::StyleMiscNonInheritedData *v25;

  if (*a6 == 0.0)
    a5 = a4;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 32) + 80);
  if (v8)
  {
    a1.n128_f64[0] = *a6;
    (*(void (**)(uint64_t *__return_ptr, _QWORD *, __n128))(*v8 + 24))(&v24, v8, a1);
    v9 = (_QWORD *)v8[1];
    if (v9)
    {
      v10 = &v24;
      do
      {
        v11 = *v10;
        (*(void (**)(WebCore::StyleMiscNonInheritedData **__return_ptr, _QWORD *))(*v9 + 24))(&v25, v9);
        v13 = *(_QWORD *)(v11 + 8);
        v10 = (uint64_t *)(v11 + 8);
        v12 = v13;
        v14 = (uint64_t)v25;
        v25 = 0;
        *v10 = v14;
        if (v13)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
          v15 = (uint64_t)v25;
          v25 = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        }
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    WebCore::RenderStyle::setContent(a3, &v24, 0);
    v16 = v24;
    v24 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  else if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32) + 80))
  {
    v17 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)(a3 + 8));
    v18 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v17 + 4);
    if (*(_DWORD *)v18 != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy(v18, (uint64_t *)&v25);
      v18 = v25;
      v20 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v17 + 4);
      *((_QWORD *)v17 + 4) = v25;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v20, v19);
          WTF::fastFree(v22, v23);
          v18 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v17 + 4);
        }
        else
        {
          --*(_DWORD *)v20;
        }
      }
    }
    v21 = *((_QWORD *)v18 + 10);
    *((_QWORD *)v18 + 10) = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
}

uint64_t WebCore::DiscreteFontDescriptionWrapper::equals(WebCore::DiscreteFontDescriptionWrapper *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  return (*(uint64_t (**)(WebCore::DiscreteFontDescriptionWrapper *, uint64_t, uint64_t))(*(_QWORD *)this + 80))(this, *((_QWORD *)a2 + 4) + 48, *((_QWORD *)a3 + 4) + 48);
}

uint64_t WebCore::DiscreteFontDescriptionWrapper::canInterpolate()
{
  return 0;
}

void WebCore::DiscreteFontDescriptionWrapper::blend(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, double *a5)
{
  uint64_t v10;
  WebCore::FontCascadeFonts *v11;
  int v12;
  WebCore *v13;
  __n128 v14;
  WTF *v15;
  uint64_t v16;
  WebCore *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WebCore *v24;
  unsigned int *v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WebCore *v32;
  _BYTE v33[168];
  WTF *v34;
  int v35;
  __int16 v36;

  v10 = a2[4];
  v11 = *(WebCore::FontCascadeFonts **)(v10 + 248);
  if (v11)
  {
    v12 = (*(_DWORD *)v11)++;
    v13 = (WebCore *)*((_QWORD *)v11 + 14);
    if (v12)
    {
      *(_DWORD *)v11 = v12;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v11, a2);
      WTF::fastFree(v26, v27);
      v10 = a2[4];
    }
  }
  else
  {
    v13 = 0;
  }
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v33, (const WebCore::FontDescription *)(v10 + 48));
  v15 = *(WTF **)(v10 + 216);
  ++*(_DWORD *)v15;
  v34 = v15;
  v35 = *(_DWORD *)(v10 + 224);
  v36 = *(_WORD *)(v10 + 228);
  if (*a5 == 0.0)
    v16 = a3;
  else
    v16 = a4;
  v14.n128_f64[0] = *a5;
  (*(void (**)(uint64_t, uint64_t, _BYTE *, __n128))(*(_QWORD *)a1 + 88))(a1, *(_QWORD *)(v16 + 32) + 48, v33, v14);
  v17 = (WebCore *)WebCore::RenderStyle::setFontDescription((uint64_t)a2, (uint64_t)v33);
  v18 = a2[4];
  if (v13)
    ++*((_DWORD *)v13 + 2);
  v19 = v18 + 32;
  v32 = v13;
  v20 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v20 || (v21 = *(_QWORD *)(v20 + 96)) == 0)
    v21 = WebCore::threadGlobalDataSlow(v17);
  v22 = *(_QWORD *)(v21 + 80);
  if (!v22)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v21);
    v22 = *(_QWORD *)(v21 + 80);
  }
  WebCore::FontCache::updateFontCascade(v22, v19, &v32);
  v24 = v32;
  v32 = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v24 + 8))(v24);
    else
      --*((_DWORD *)v24 + 2);
  }
  v25 = (unsigned int *)v34;
  v34 = 0;
  if (v25)
  {
    if (*v25 == 1)
    {
      v28 = v25[1];
      if ((_DWORD)v28)
      {
        v29 = (WTF::StringImpl **)(v25 + 2);
        v30 = 8 * v28;
        do
        {
          v31 = *v29;
          *v29 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v23);
            else
              *(_DWORD *)v31 -= 2;
          }
          ++v29;
          v30 -= 8;
        }
        while (v30);
      }
      WTF::fastFree((WTF *)v25, v23);
    }
    else
    {
      --*v25;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v33, v23);
}

BOOL WebCore::FontFeatureSettingsWrapper::propertiesInFontDescriptionAreEqual(WebCore::FontFeatureSettingsWrapper *this, const void **a2, const WebCore::FontCascadeDescription *a3)
{
  uint64_t v3;

  v3 = *((unsigned int *)a2 + 3);
  return (_DWORD)v3 == *((_DWORD *)a3 + 3) && memcmp(*a2, *(const void **)a3, 8 * v3) == 0;
}

void WebCore::FontFeatureSettingsWrapper::setPropertiesInFontDescription(WebCore::FontFeatureSettingsWrapper *this, const void **a2, WTF **a3)
{
  uint64_t v4;
  void *v5;
  WTF *v6;

  v4 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v4)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v5 = (void *)WTF::fastMalloc((WTF *)(8 * v4));
    memcpy(v5, *a2, 8 * *((unsigned int *)a2 + 3));
  }
  else
  {
    v5 = 0;
  }
  v6 = *a3;
  if (*a3)
  {
    *a3 = 0;
    *((_DWORD *)a3 + 2) = 0;
    WTF::fastFree(v6, a2);
  }
  *a3 = (WTF *)v5;
  *((_DWORD *)a3 + 2) = v4;
  *((_DWORD *)a3 + 3) = v4;
}

BOOL WebCore::FontFamilyWrapper::propertiesInFontDescriptionAreEqual(WebCore::FontFamilyWrapper *this, const WebCore::FontCascadeDescription *a2, const WebCore::FontCascadeDescription *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 21);
  v4 = *((_QWORD *)a3 + 21);
  v5 = *(unsigned int *)(v3 + 4);
  if ((_DWORD)v5 != *(_DWORD *)(v4 + 4))
    return 0;
  if (!(_DWORD)v5)
    return 1;
  if (*(_QWORD *)(v3 + 8) != *(_QWORD *)(v4 + 8))
    return 0;
  v6 = 0;
  v7 = v3 + 16;
  v8 = v4 + 16;
  while (v5 - 1 != v6)
  {
    v9 = *(_QWORD *)(v7 + 8 * v6);
    v10 = *(_QWORD *)(v8 + 8 * v6++);
    if (v9 != v10)
      return v6 >= v5;
  }
  v6 = v5;
  return v6 >= v5;
}

void WebCore::FontFamilyWrapper::setPropertiesInFontDescription(WebCore::FontFamilyWrapper *this, const WebCore::FontCascadeDescription *a2, WebCore::FontCascadeDescription *a3)
{
  _DWORD *v3;
  unsigned int *v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v3 = (_DWORD *)*((_QWORD *)a2 + 21);
  ++*v3;
  v4 = (unsigned int *)*((_QWORD *)a3 + 21);
  *((_QWORD *)a3 + 21) = v3;
  if (v4)
  {
    if (*v4 == 1)
    {
      v5 = v4[1];
      if ((_DWORD)v5)
      {
        v6 = (WTF::StringImpl **)(v4 + 2);
        v7 = 8 * v5;
        do
        {
          v8 = *v6;
          *v6 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, a2);
            else
              *(_DWORD *)v8 -= 2;
          }
          ++v6;
          v7 -= 8;
        }
        while (v7);
      }
      WTF::fastFree((WTF *)v4, a2);
    }
    else
    {
      --*v4;
    }
  }
}

uint64_t WebCore::CounterWrapper::equals(WebCore::CounterWrapper *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int *v21;
  int v22;
  BOOL v23;
  _BOOL4 v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 192);
  if (v3)
    v4 = *(_DWORD *)(v3 - 12);
  else
    v4 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 192);
  if (v5)
    v6 = *(_DWORD *)(v5 - 12);
  else
    v6 = 0;
  if (v4 != v6)
    return 0;
  if (v3)
  {
    v8 = *(unsigned int *)(v3 - 4);
    v9 = v3 + 32 * v8;
    if (*(_DWORD *)(v3 - 12))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 192);
      if ((_DWORD)v8)
      {
        v30 = 32 * v8;
        v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 192);
        while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
        {
          v7 += 32;
          v30 -= 32;
          if (!v30)
          {
            v7 = v9;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    v7 = v3 + 32 * v8;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = v3 + 32 * v8;
LABEL_9:
  if (v3)
    v10 = v3 + 32 * *(unsigned int *)(v3 - 4);
  else
    v10 = 0;
  if (v10 == v7)
    return 1;
  if (v5)
  {
    while (1)
    {
      v11 = 0;
      for (i = *(_DWORD *)(*(_QWORD *)v7 + 16) >> 8; ; i = v11 + v13)
      {
        v13 = i & *(_DWORD *)(v5 - 8);
        v14 = *(_QWORD *)(v5 + 32 * v13);
        if (v14 != -1)
        {
          if (!v14)
            return 0;
          if (v14 == *(_QWORD *)v7)
            break;
        }
        ++v11;
      }
      if ((_DWORD)v13 == *(_DWORD *)(v5 - 4))
        return 0;
      v15 = v5 + 32 * v13;
      v16 = *((unsigned __int16 *)this + 4);
      if (v16 == 105)
      {
        v19 = *(unsigned __int8 *)(v7 + 28);
        v22 = *(unsigned __int8 *)(v15 + 28);
        if (!*(_BYTE *)(v7 + 28) || !v22)
        {
          v23 = v22 == 0;
LABEL_35:
          v24 = !v23;
          v25 = v19 == 0;
LABEL_40:
          v26 = !v25;
          if (((v26 ^ v24) & 1) != 0)
            return 0;
          goto LABEL_44;
        }
        v17 = *(_DWORD *)(v7 + 24);
        v18 = *(_DWORD *)(v5 + 32 * v13 + 24);
        goto LABEL_31;
      }
      if (v16 == 104)
        break;
      if (v16 == 103)
      {
        if (!*(_BYTE *)(v7 + 20) || !*(_BYTE *)(v5 + 32 * v13 + 20))
        {
          v24 = *(unsigned __int8 *)(v5 + 32 * v13 + 20) != 0;
          v25 = *(_BYTE *)(v7 + 20) == 0;
          goto LABEL_40;
        }
        v17 = *(_DWORD *)(v7 + 16);
        v18 = *(_DWORD *)(v5 + 32 * v13 + 16);
        goto LABEL_31;
      }
LABEL_44:
      v27 = v7 + 32;
      v7 = v9;
      if (v27 != v9)
      {
        v7 = v27;
        while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
        {
          v7 += 32;
          if (v7 == v9)
          {
            v7 = v9;
            break;
          }
        }
      }
      v28 = 1;
      if (v7 == v10)
        return v28;
    }
    v19 = *(unsigned __int8 *)(v7 + 12);
    v20 = *(unsigned __int8 *)(v5 + 32 * v13 + 12);
    if (!*(_BYTE *)(v7 + 12) || !v20)
    {
      v23 = v20 == 0;
      goto LABEL_35;
    }
    v21 = (int *)(v15 + 8);
    v17 = *(_DWORD *)(v7 + 8);
    v18 = *v21;
LABEL_31:
    if (v17 != v18)
      return 0;
    goto LABEL_44;
  }
  return 0;
}

uint64_t WebCore::CounterWrapper::canInterpolate()
{
  return 0;
}

uint64_t WebCore::CounterWrapper::blend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5)
{
  WTF **v9;
  WTF *v10;
  _DWORD *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore::StyleRareNonInheritedData *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  _DWORD *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t result;
  WTF::StringImpl *v30;
  WebCore::StyleRareNonInheritedData *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  unsigned int i;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  WTF *v56;
  void *v57;
  WTF *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  char v63;
  char v64;
  _BYTE *v65;

  v9 = (WTF **)(a2 + 8);
  v10 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)(a2 + 8));
  v11 = (_DWORD *)*((_QWORD *)v10 + 5);
  if (*v11 == 1)
  {
    v14 = *((_QWORD *)v10 + 5);
  }
  else
  {
    v12 = v10;
    v13 = WTF::fastMalloc((WTF *)0x288);
    v14 = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v13, (uint64_t)v11);
    v16 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v12 + 5);
    *((_QWORD *)v12 + 5) = v14;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v16, v15);
        WTF::fastFree(v56, v57);
        v14 = *((_QWORD *)v12 + 5);
      }
      else
      {
        --*(_DWORD *)v16;
      }
    }
  }
  v17 = *(_QWORD *)(v14 + 192);
  if (!v17)
  {
    v18 = 0;
    v19 = 0;
LABEL_8:
    v20 = v17 + 32 * v19;
    goto LABEL_9;
  }
  v19 = *(unsigned int *)(v17 - 4);
  v20 = v17 + 32 * v19;
  if (!*(_DWORD *)(v17 - 12))
  {
    v18 = v17 + 32 * v19;
    goto LABEL_8;
  }
  v18 = *(_QWORD *)(v14 + 192);
  if ((_DWORD)v19)
  {
    v60 = 32 * v19;
    v18 = *(_QWORD *)(v14 + 192);
    while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
    {
      v18 += 32;
      v60 -= 32;
      if (!v60)
      {
        v18 = v20;
        break;
      }
    }
  }
LABEL_9:
  if (v17)
    v17 += 32 * *(unsigned int *)(v17 - 4);
  if (v17 != v18)
  {
    v21 = *(unsigned __int16 *)(a1 + 8);
    if (v21 == 103)
    {
      do
      {
        if (*(_BYTE *)(v18 + 20))
          *(_BYTE *)(v18 + 20) = 0;
        v23 = v18 + 32;
        v18 = v20;
        if (v23 != v20)
        {
          v18 = v23;
          while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
          {
            v18 += 32;
            if (v18 == v20)
            {
              v18 = v20;
              break;
            }
          }
        }
      }
      while (v18 != v17);
    }
    else if (v21 == 104)
    {
      do
      {
        if (*(_BYTE *)(v18 + 12))
          *(_BYTE *)(v18 + 12) = 0;
        v22 = v18 + 32;
        v18 = v20;
        if (v22 != v20)
        {
          v18 = v22;
          while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
          {
            v18 += 32;
            if (v18 == v20)
            {
              v18 = v20;
              break;
            }
          }
        }
      }
      while (v18 != v17);
    }
    else
    {
      do
      {
        if (*(_BYTE *)(v18 + 28))
          *(_BYTE *)(v18 + 28) = 0;
        v24 = v18 + 32;
        v18 = v20;
        if (v24 != v20)
        {
          v18 = v24;
          while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
          {
            v18 += 32;
            if (v18 == v20)
            {
              v18 = v20;
              break;
            }
          }
        }
      }
      while (v18 != v17);
    }
  }
  if (*a5 != 0.0)
    a3 = a4;
  v25 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v9);
  v26 = (_DWORD *)*((_QWORD *)v25 + 5);
  if (*v26 == 1)
  {
    result = *((_QWORD *)v25 + 5);
  }
  else
  {
    v27 = v25;
    v28 = WTF::fastMalloc((WTF *)0x288);
    result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v28, (uint64_t)v26);
    v31 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v27 + 5);
    *((_QWORD *)v27 + 5) = result;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v31, v30);
        WTF::fastFree(v58, v59);
        result = *((_QWORD *)v27 + 5);
      }
      else
      {
        --*(_DWORD *)v31;
      }
    }
  }
  v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) + 192);
  if (!v32)
  {
    v33 = 0;
    v34 = 0;
LABEL_49:
    v35 = v32 + 32 * v34;
    goto LABEL_50;
  }
  v34 = *(unsigned int *)(v32 - 4);
  v35 = v32 + 32 * v34;
  if (!*(_DWORD *)(v32 - 12))
  {
    v33 = v32 + 32 * v34;
    goto LABEL_49;
  }
  v33 = v32;
  if ((_DWORD)v34)
  {
    v61 = 32 * v34;
    v33 = v32;
    while ((unint64_t)(*(_QWORD *)v33 + 1) <= 1)
    {
      v33 += 32;
      v61 -= 32;
      if (!v61)
      {
        v33 = v35;
        break;
      }
    }
  }
LABEL_50:
  if (v32)
    v36 = v32 + 32 * *(unsigned int *)(v32 - 4);
  else
    v36 = 0;
  if (v36 != v33)
  {
    v37 = (uint64_t *)(result + 192);
    do
    {
      v38 = *v37;
      if (!*v37)
        goto LABEL_61;
      v39 = 0;
      for (i = *(_DWORD *)(*(_QWORD *)v33 + 16) >> 8; ; i = ++v39 + v41)
      {
        v41 = i & *(_DWORD *)(v38 - 8);
        v42 = *(_QWORD *)(v38 + 32 * v41);
        if (v42 != -1)
        {
          if (!v42)
            goto LABEL_61;
          if (v42 == *(_QWORD *)v33)
            break;
        }
      }
      if ((_DWORD)v41 != *(_DWORD *)(v38 - 4))
      {
        v49 = *(unsigned __int16 *)(a1 + 8);
        if (v49 == 104)
        {
          v52 = *(_DWORD *)(v33 + 8);
          v53 = v38 + 32 * v41;
          *(_BYTE *)(v53 + 12) = *(_BYTE *)(v33 + 12);
          *(_DWORD *)(v53 + 8) = v52;
        }
        else if (v49 == 103)
        {
          v50 = *(_DWORD *)(v33 + 16);
          v51 = v38 + 32 * v41;
          *(_BYTE *)(v51 + 20) = *(_BYTE *)(v33 + 20);
          *(_DWORD *)(v51 + 16) = v50;
        }
        else
        {
          v54 = *(_DWORD *)(v33 + 24);
          v55 = v38 + 32 * v41;
          *(_BYTE *)(v55 + 28) = *(_BYTE *)(v33 + 28);
          *(_DWORD *)(v55 + 24) = v54;
        }
      }
      else
      {
LABEL_61:
        LOBYTE(v62) = 0;
        BYTE4(v62) = 0;
        BYTE8(v62) = 0;
        BYTE12(v62) = 0;
        v63 = 0;
        v64 = 0;
        result = (uint64_t)WTF::HashMap<WTF::AtomString,WebCore::CounterDirectives,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CounterDirectives>,WTF::HashTableTraits>::add<WebCore::CounterDirectives>(v37, (WTF::StringImpl **)v33, &v62, (uint64_t)&v65);
        v43 = v65;
        v44 = *(unsigned __int16 *)(a1 + 8);
        if (v44 == 104)
        {
          v46 = *(_DWORD *)(v33 + 8);
          v65[12] = *(_BYTE *)(v33 + 12);
          v43[2] = v46;
        }
        else if (v44 == 103)
        {
          v45 = *(_DWORD *)(v33 + 16);
          v65[20] = *(_BYTE *)(v33 + 20);
          v43[4] = v45;
        }
        else
        {
          v47 = *(_DWORD *)(v33 + 24);
          v65[28] = *(_BYTE *)(v33 + 28);
          v43[6] = v47;
        }
      }
      v48 = v33 + 32;
      v33 = v35;
      if (v48 != v35)
      {
        v33 = v48;
        while ((unint64_t)(*(_QWORD *)v33 + 1) <= 1)
        {
          v33 += 32;
          if (v33 == v35)
          {
            v33 = v35;
            break;
          }
        }
      }
    }
    while (v33 != v36);
  }
  return result;
}

BOOL WebCore::FontVariantEastAsianWrapper::propertiesInFontDescriptionAreEqual(WebCore::FontVariantEastAsianWrapper *this, const WebCore::FontCascadeDescription *a2, const WebCore::FontCascadeDescription *a3)
{
  return (((*((unsigned __int16 *)a3 + 82) | (*((unsigned __int8 *)a3 + 166) << 16)) ^ (*((unsigned __int16 *)a2 + 82) | (*((unsigned __int8 *)a2 + 166) << 16))) & 0xFC0) == 0;
}

void WebCore::FontVariantEastAsianWrapper::setPropertiesInFontDescription(WebCore::FontVariantEastAsianWrapper *this, const WebCore::FontCascadeDescription *a2, WebCore::FontCascadeDescription *a3)
{
  _WORD *v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  int v7;
  int v8;
  unsigned int v9;

  v5 = *((unsigned __int16 *)a2 + 82);
  v3 = (_WORD *)((char *)a2 + 164);
  v4 = v5;
  v7 = *((unsigned __int16 *)a3 + 82);
  v6 = (char *)a3 + 164;
  v8 = v6[2];
  *(_WORD *)v6 = v7 & 0xFE3F | (((v4 >> 6) & 7) << 6);
  v9 = v7 & 0xFFFFF83F | (v8 << 16) | (((v4 >> 6) & 7) << 6) & 0xFFFFF9FF | ((((unsigned __int16)*v3 >> 9) & 3) << 9);
  *(_WORD *)v6 = v7 & 0xF83F | (((v4 >> 6) & 7) << 6) & 0xF9FF | (((*v3 >> 9) & 3) << 9);
  *(_WORD *)v6 = v9 & 0xF7FF | *v3 & 0x800;
}

BOOL WebCore::FontVariantLigaturesWrapper::propertiesInFontDescriptionAreEqual(WebCore::FontVariantLigaturesWrapper *this, const WebCore::FontCascadeDescription *a2, const WebCore::FontCascadeDescription *a3)
{
  return ((*((_DWORD *)a3 + 40) ^ *((_DWORD *)a2 + 40)) & 0xFF0000) == 0;
}

void WebCore::FontVariantLigaturesWrapper::setPropertiesInFontDescription(WebCore::FontVariantLigaturesWrapper *this, const WebCore::FontCascadeDescription *a2, WebCore::FontCascadeDescription *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *((_DWORD *)a3 + 40) & 0xFFFCFFFF | ((HIWORD(*((_DWORD *)a2 + 40)) & 3) << 16);
  *((_DWORD *)a3 + 40) = v3;
  v4 = v3 & 0xFFF3FFFF | (((*((_DWORD *)a2 + 40) >> 18) & 3) << 18);
  *((_DWORD *)a3 + 40) = v4;
  v5 = v4 & 0xFFCFFFFF | (((*((_DWORD *)a2 + 40) >> 20) & 3) << 20);
  *((_DWORD *)a3 + 40) = v5;
  *((_DWORD *)a3 + 40) = v5 & 0xFF3FFFFF | (((*((_DWORD *)a2 + 40) >> 22) & 3) << 22);
}

uint64_t WebCore::FontVariantNumericWrapper::propertiesInFontDescriptionAreEqual(WebCore::FontVariantNumericWrapper *this, const WebCore::FontCascadeDescription *a2, const WebCore::FontCascadeDescription *a3)
{
  char v4;
  char v5;
  char v6;
  char v7;
  unsigned int v8;

  if (((*((_DWORD *)a3 + 40) ^ *((_DWORD *)a2 + 40)) & 0x60000000) != 0)
    return 0;
  v4 = *((_WORD *)a2 + 82);
  v5 = *((_WORD *)a3 + 82);
  v6 = v5 ^ v4;
  v7 = v4 ^ v5;
  v8 = ((v4 & 0x20) == 0) ^ ((v5 & 0x20) >> 5);
  if ((v7 & 0x10) != 0)
    v8 = 0;
  if ((v6 & 0xF) != 0)
    return 0;
  else
    return v8;
}

void WebCore::FontVariantNumericWrapper::setPropertiesInFontDescription(WebCore::FontVariantNumericWrapper *this, const WebCore::FontCascadeDescription *a2, WebCore::FontCascadeDescription *a3)
{
  char *v3;
  int v4;
  int v5;
  _WORD *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v5 = *((unsigned __int16 *)a3 + 82);
  v3 = (char *)a3 + 164;
  v4 = v5;
  *((_DWORD *)v3 - 1) = *((_DWORD *)v3 - 1) & 0x9FFFFFFF | (((*((_DWORD *)a2 + 40) >> 29) & 3) << 29);
  LOWORD(v5) = *((_WORD *)a2 + 82);
  v6 = (_WORD *)((char *)a2 + 164);
  v7 = v4 & 0xFFFFFFFC | (v3[2] << 16) | v5 & 3;
  *(_WORD *)v3 = v7;
  v8 = v7 & 0xFFFFFFF3 | (4 * (((unsigned __int16)*v6 >> 2) & 3));
  *(_WORD *)v3 = v8;
  v9 = v8 & 0xFFFFFFEF | (16 * (((unsigned __int16)*v6 >> 4) & 1));
  *(_WORD *)v3 = v9;
  *(_WORD *)v3 = v9 & 0xFFDF | *v6 & 0x20;
}

BOOL WebCore::GridTemplateAreasWrapper::equals(WebCore::GridTemplateAreasWrapper *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  _BOOL8 result;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;

  result = WTF::operator==<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>((WTF::StringImpl ***)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 80) + 8), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 80) + 8), a3);
  if (result)
  {
    result = WTF::operator==<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>((WTF::StringImpl ***)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 80) + 16), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 80) + 16), v6);
    if (result)
    {
      result = WTF::operator==<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 80) + 72), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 80) + 72), v7);
      if (result)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 80);
        v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 80);
        return *(_DWORD *)(v8 + 80) == *(_DWORD *)(v9 + 80) && *(_DWORD *)(v8 + 84) == *(_DWORD *)(v9 + 84);
      }
    }
  }
  return result;
}

uint64_t WebCore::GridTemplateAreasWrapper::canInterpolate()
{
  return 0;
}

uint64_t WebCore::GridTemplateAreasWrapper::blend(uint64_t a1, WTF **a2, const WTF::StringImpl *a3, const WTF::StringImpl *a4, double *a5)
{
  uint64_t *v7;
  WTF **v8;
  const WTF::StringImpl *v9;
  WTF *v10;
  _DWORD *v11;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebCore::StyleRareNonInheritedData *v15;
  const WebCore::StyleGridData *v16;
  WebCore::StyleGridData *v17;
  WebCore::StyleGridData *v18;
  void *v19;
  WebCore::StyleGridData *v20;
  uint64_t *v21;
  const WTF::StringImpl *v22;
  WTF *v23;
  _DWORD *v24;
  WTF *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WebCore::StyleRareNonInheritedData *v28;
  const WebCore::StyleGridData *v29;
  WebCore::StyleGridData *v30;
  WebCore::StyleGridData *v31;
  void *v32;
  WebCore::StyleGridData *v33;
  uint64_t result;
  uint64_t v35;
  int v36;
  uint64_t v37;
  WTF *v38;
  _DWORD *v39;
  WTF *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WebCore::StyleRareNonInheritedData *v43;
  const WebCore::StyleGridData *v44;
  WebCore::StyleGridData *v45;
  void *v46;
  WebCore::StyleGridData *v47;
  int v48;
  WTF *v49;
  _DWORD *v50;
  WTF *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WebCore::StyleRareNonInheritedData *v54;
  const WebCore::StyleGridData *v55;
  WebCore::StyleGridData *v56;
  void *v57;
  WebCore::StyleGridData *v58;
  WTF *v59;
  void *v60;
  WTF *v61;
  void *v62;
  WTF *v63;
  void *v64;
  WTF *v65;
  void *v66;
  WTF *v67;
  void *v68;
  WTF *v69;
  void *v70;
  WTF *v71;
  void *v72;
  WTF *v73;
  void *v74;

  if (*a5 == 0.0)
    a4 = a3;
  v7 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 40) + 80) + 8);
  v8 = a2 + 1;
  if (!WTF::operator==<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>((WTF::StringImpl ***)(*(_QWORD *)(*((_QWORD *)a2[1] + 5) + 80) + 8), v7, a3))
  {
    v10 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v8);
    v11 = (_DWORD *)*((_QWORD *)v10 + 5);
    if (*v11 == 1)
    {
      v13 = *((_QWORD *)v10 + 5);
    }
    else
    {
      v12 = v10;
      v13 = WTF::fastMalloc((WTF *)0x288);
      WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v13, (uint64_t)v11);
      v15 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v12 + 5);
      *((_QWORD *)v12 + 5) = v13;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v15, v14);
          WTF::fastFree(v59, v60);
          v13 = *((_QWORD *)v12 + 5);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
    v16 = *(const WebCore::StyleGridData **)(v13 + 80);
    if (*(_DWORD *)v16 == 1)
    {
      v18 = *(WebCore::StyleGridData **)(v13 + 80);
    }
    else
    {
      v17 = (WebCore::StyleGridData *)WTF::fastMalloc((WTF *)0x108);
      v18 = WebCore::StyleGridData::StyleGridData(v17, v16);
      v20 = *(WebCore::StyleGridData **)(v13 + 80);
      *(_QWORD *)(v13 + 80) = v18;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
        {
          WebCore::StyleGridData::~StyleGridData(v20, v19);
          WTF::fastFree(v67, v68);
          v18 = *(WebCore::StyleGridData **)(v13 + 80);
        }
        else
        {
          --*(_DWORD *)v20;
        }
      }
    }
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=((uint64_t *)v18 + 1, v7);
  }
  v21 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 40) + 80) + 16);
  if (!WTF::operator==<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>((WTF::StringImpl ***)(*(_QWORD *)(*((_QWORD *)*v8 + 5) + 80) + 16), v21, v9))
  {
    v23 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v8);
    v24 = (_DWORD *)*((_QWORD *)v23 + 5);
    if (*v24 == 1)
    {
      v26 = *((_QWORD *)v23 + 5);
    }
    else
    {
      v25 = v23;
      v26 = WTF::fastMalloc((WTF *)0x288);
      WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v26, (uint64_t)v24);
      v28 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v25 + 5);
      *((_QWORD *)v25 + 5) = v26;
      if (v28)
      {
        if (*(_DWORD *)v28 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v28, v27);
          WTF::fastFree(v61, v62);
          v26 = *((_QWORD *)v25 + 5);
        }
        else
        {
          --*(_DWORD *)v28;
        }
      }
    }
    v29 = *(const WebCore::StyleGridData **)(v26 + 80);
    if (*(_DWORD *)v29 == 1)
    {
      v31 = *(WebCore::StyleGridData **)(v26 + 80);
    }
    else
    {
      v30 = (WebCore::StyleGridData *)WTF::fastMalloc((WTF *)0x108);
      v31 = WebCore::StyleGridData::StyleGridData(v30, v29);
      v33 = *(WebCore::StyleGridData **)(v26 + 80);
      *(_QWORD *)(v26 + 80) = v31;
      if (v33)
      {
        if (*(_DWORD *)v33 == 1)
        {
          WebCore::StyleGridData::~StyleGridData(v33, v32);
          WTF::fastFree(v69, v70);
          v31 = *(WebCore::StyleGridData **)(v26 + 80);
        }
        else
        {
          --*(_DWORD *)v33;
        }
      }
    }
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=((uint64_t *)v31 + 2, v21);
  }
  result = WebCore::RenderStyle::setNamedGridArea((WebCore::RenderStyle *)a2, (const WebCore::NamedGridAreaMap *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 40) + 80) + 72), v22);
  v35 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 40) + 80);
  v36 = *(_DWORD *)(v35 + 80);
  v37 = *(_QWORD *)(*((_QWORD *)a2[1] + 5) + 80);
  if (*(_DWORD *)(v37 + 80) != v36)
  {
    v38 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v8);
    v39 = (_DWORD *)*((_QWORD *)v38 + 5);
    if (*v39 == 1)
    {
      v41 = *((_QWORD *)v38 + 5);
    }
    else
    {
      v40 = v38;
      v41 = WTF::fastMalloc((WTF *)0x288);
      WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v41, (uint64_t)v39);
      v43 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v40 + 5);
      *((_QWORD *)v40 + 5) = v41;
      if (v43)
      {
        if (*(_DWORD *)v43 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v43, v42);
          WTF::fastFree(v63, v64);
          v41 = *((_QWORD *)v40 + 5);
        }
        else
        {
          --*(_DWORD *)v43;
        }
      }
    }
    v44 = *(const WebCore::StyleGridData **)(v41 + 80);
    if (*(_DWORD *)v44 == 1)
    {
      result = *(_QWORD *)(v41 + 80);
    }
    else
    {
      v45 = (WebCore::StyleGridData *)WTF::fastMalloc((WTF *)0x108);
      result = (uint64_t)WebCore::StyleGridData::StyleGridData(v45, v44);
      v47 = *(WebCore::StyleGridData **)(v41 + 80);
      *(_QWORD *)(v41 + 80) = result;
      if (v47)
      {
        if (*(_DWORD *)v47 == 1)
        {
          WebCore::StyleGridData::~StyleGridData(v47, v46);
          WTF::fastFree(v71, v72);
          result = *(_QWORD *)(v41 + 80);
        }
        else
        {
          --*(_DWORD *)v47;
        }
      }
    }
    *(_DWORD *)(result + 80) = v36;
    v35 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 40) + 80);
    v37 = *(_QWORD *)(*((_QWORD *)*v8 + 5) + 80);
  }
  v48 = *(_DWORD *)(v35 + 84);
  if (*(_DWORD *)(v37 + 84) != v48)
  {
    v49 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v8);
    v50 = (_DWORD *)*((_QWORD *)v49 + 5);
    if (*v50 == 1)
    {
      v52 = *((_QWORD *)v49 + 5);
    }
    else
    {
      v51 = v49;
      v52 = WTF::fastMalloc((WTF *)0x288);
      WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v52, (uint64_t)v50);
      v54 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v51 + 5);
      *((_QWORD *)v51 + 5) = v52;
      if (v54)
      {
        if (*(_DWORD *)v54 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v54, v53);
          WTF::fastFree(v65, v66);
          v52 = *((_QWORD *)v51 + 5);
        }
        else
        {
          --*(_DWORD *)v54;
        }
      }
    }
    v55 = *(const WebCore::StyleGridData **)(v52 + 80);
    if (*(_DWORD *)v55 == 1)
    {
      result = *(_QWORD *)(v52 + 80);
    }
    else
    {
      v56 = (WebCore::StyleGridData *)WTF::fastMalloc((WTF *)0x108);
      result = (uint64_t)WebCore::StyleGridData::StyleGridData(v56, v55);
      v58 = *(WebCore::StyleGridData **)(v52 + 80);
      *(_QWORD *)(v52 + 80) = result;
      if (v58)
      {
        if (*(_DWORD *)v58 == 1)
        {
          WebCore::StyleGridData::~StyleGridData(v58, v57);
          WTF::fastFree(v73, v74);
          result = *(_QWORD *)(v52 + 80);
        }
        else
        {
          --*(_DWORD *)v58;
        }
      }
    }
    *(_DWORD *)(result + 84) = v48;
  }
  return result;
}

BOOL WebCore::QuotesWrapper::equals(WebCore::QuotesWrapper *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  return *(_QWORD *)(*((_QWORD *)a2 + 3) + 312) == *(_QWORD *)(*((_QWORD *)a3 + 3) + 312);
}

uint64_t WebCore::QuotesWrapper::canInterpolate()
{
  return 0;
}

void WebCore::QuotesWrapper::blend(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, const WTF::StringImpl *a4, double *a5)
{
  WTF *v6;
  WTF::StringImpl *v7;
  unsigned int *v8;
  unint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *v13;

  if (*a5 == 0.0)
    a4 = a3;
  v6 = *(WTF **)(*((_QWORD *)a4 + 3) + 312);
  if (v6)
    ++*(_DWORD *)v6;
  v13 = v6;
  WebCore::RenderStyle::setQuotes(a2, (WTF::StringImpl *)&v13, a3);
  v8 = (unsigned int *)v13;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
    {
      if (*((_DWORD *)v13 + 1))
      {
        v9 = 0;
        v10 = (WTF::StringImpl **)((char *)v13 + 16);
        do
        {
          v11 = *v10;
          *v10 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v7);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = *(v10 - 1);
          *(v10 - 1) = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v7);
            else
              *(_DWORD *)v12 -= 2;
          }
          ++v9;
          v10 += 2;
        }
        while (v9 < v8[1]);
      }
      WTF::fastFree((WTF *)v8, v7);
    }
    else
    {
      --*(_DWORD *)v13;
    }
  }
}

void WebCore::ShorthandPropertyWrapper::~ShorthandPropertyWrapper(WebCore::ShorthandPropertyWrapper *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ShorthandPropertyWrapper::isShorthandWrapper(WebCore::ShorthandPropertyWrapper *this)
{
  return 1;
}

uint64_t WebCore::ShorthandPropertyWrapper::equals(WebCore::ShorthandPropertyWrapper *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  BOOL v10;

  if (a2 == a3)
    return 1;
  v3 = *((unsigned int *)this + 7);
  if (!(_DWORD)v3)
    return 1;
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  v7 = 8 * v3 - 8;
  do
  {
    v8 = *v6++;
    result = (*(uint64_t (**)(uint64_t, const WebCore::RenderStyle *, const WebCore::RenderStyle *))(*(_QWORD *)v8 + 40))(v8, a2, a3);
    if ((_DWORD)result)
      v10 = v7 == 0;
    else
      v10 = 1;
    v7 -= 8;
  }
  while (!v10);
  return result;
}

uint64_t WebCore::ShorthandPropertyWrapper::blend(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(unsigned int *)(result + 28);
  if ((_DWORD)v5)
  {
    v10 = *(uint64_t **)(result + 16);
    v11 = 8 * v5;
    do
    {
      v12 = *v10++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 64))(v12, a2, a3, a4, a5);
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN7WebCore12EffectTimingEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEERKSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN7WebCore12EffectTimingEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEERKSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  _DWORD *v8;
  char v9;

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 8) = -1;
  v5 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E338E9A8[v5])(&v9, a2, a3);
    *(_DWORD *)(a2 + 8) = v5;
  }
  v7 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v7;
  v8 = *(_DWORD **)(a3 + 48);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(a2 + 48) = v8;
  *(_WORD *)(a2 + 56) = *(_WORD *)(a3 + 56);
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEERKSQ_EEEDcSI_DpT0_(uint64_t *a1, _QWORD *a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 8);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      *a2 = *(_QWORD *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E338E988[v5])(&v7, v4);
  }
  result = *a3;
  *(double *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 0;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEERKSQ_EEEDcSI_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, _DWORD **a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      if (*a3)
        *v6 += 2;
      result = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v6;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E338E988[v5])(&v8, v4);
  }
  v7 = *a3;
  if (*a3)
    *v7 += 2;
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

_DWORD *WTF::VectorTypeOperations<WTF::Ref<WebCore::AnimationEventBase,WTF::RawPtrTraits<WebCore::AnimationEventBase>,WTF::DefaultRefDerefTraits<WebCore::AnimationEventBase>>>::destruct(_DWORD *result, _DWORD **a2)
{
  _DWORD **v3;

  if (result != (_DWORD *)a2)
  {
    v3 = (_DWORD **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (result[4] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[4];
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN7WebCore12EffectTimingEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEERKSQ_EEEDcSI_DpT0_(uint64_t *a1, _QWORD *a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 64);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      *a2 = *(_QWORD *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E338E968[v5])(&v7, v4);
  }
  result = *a3;
  *(double *)v4 = *a3;
  *(_DWORD *)(v4 + 64) = 0;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN7WebCore12EffectTimingEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEERKSQ_EEEDcSI_DpT0_(WTF::StringImpl *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _DWORD *v11;
  __int128 v12;
  _DWORD *v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 64);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v7 = *(unsigned int *)(a2 + 8);
      v8 = *(unsigned int *)(a3 + 8);
      if ((_DWORD)v7 == -1)
      {
        if ((_DWORD)v8 == -1)
          goto LABEL_14;
      }
      else if ((_DWORD)v8 == -1)
      {
        ((void (*)(char *, uint64_t))off_1E338E988[v7])(&v15, a2);
        *(_DWORD *)(a2 + 8) = -1;
LABEL_14:
        v12 = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
        *(_OWORD *)(a2 + 32) = v12;
        v13 = *(_DWORD **)(a3 + 48);
        if (v13)
          *v13 += 2;
        result = *(WTF::StringImpl **)(a2 + 48);
        *(_QWORD *)(a2 + 48) = v13;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)result -= 2;
        }
        *(_WORD *)(a2 + 56) = *(_WORD *)(a3 + 56);
        return result;
      }
      v14 = a2;
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E338E998[v8])(&v14, a2, a3);
      goto LABEL_14;
    }
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E338E968[v5])(&v16, v4);
  }
  *(_DWORD *)(v4 + 64) = -1;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 8) = -1;
  v9 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v9 != -1)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t, uint64_t))off_1E338E9A8[v9])(&v17, v4, a3);
    *(_DWORD *)(v4 + 8) = v9;
  }
  v10 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v4 + 32) = v10;
  v11 = *(_DWORD **)(a3 + 48);
  if (v11)
    *v11 += 2;
  *(_QWORD *)(v4 + 48) = v11;
  *(_WORD *)(v4 + 56) = *(_WORD *)(a3 + 56);
  *(_DWORD *)(v4 + 64) = 1;
  return result;
}

BOOL WebCore::PropertyWrapperGetter<WTF::OptionSet<WebCore::MarginTrimType>>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 v8;
  unsigned __int8 (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned __int8 (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned __int8 (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WTF::OptionSet<WebCore::MarginTrimType>>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WTF::OptionSet<WebCore::MarginTrimType>>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (unsigned __int8 (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(unsigned __int8 (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::NinePieceImage const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (uint64_t *)v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = (uint64_t *)v9(v11);
  v13 = *v8;
  v14 = *v12;
  if (*v8 == *v12)
    return 1;
  v16 = *(_QWORD *)(v13 + 8);
  v17 = *(_QWORD *)(v14 + 8);
  if (v16 == v17)
    goto LABEL_10;
  if (v16)
    v18 = v17 == 0;
  else
    v18 = 1;
  if (v18)
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  if ((_DWORD)result)
  {
LABEL_10:
    result = WebCore::operator==((unsigned __int8 *)(v13 + 16), (unsigned __int8 *)(v14 + 16));
    if (!(_DWORD)result)
      return result;
    if (*(unsigned __int8 *)(v13 + 4) == *(unsigned __int8 *)(v14 + 4))
    {
      result = WebCore::operator==((unsigned __int8 *)(v13 + 48), (unsigned __int8 *)(v14 + 48));
      if (!(_DWORD)result)
        return result;
      if (*(unsigned __int8 *)(v13 + 5) == *(unsigned __int8 *)(v14 + 5))
      {
        result = WebCore::operator==((unsigned __int8 *)(v13 + 80), (unsigned __int8 *)(v14 + 80));
        if (!(_DWORD)result)
          return result;
        if (*(unsigned __int8 *)(v13 + 6) == *(unsigned __int8 *)(v14 + 6))
          return *(unsigned __int8 *)(v13 + 7) == *(unsigned __int8 *)(v14 + 7);
      }
    }
    return 0;
  }
  return result;
}

WebCore::NinePieceImage::Data *WebCore::PropertyWrapper<WebCore::NinePieceImage const&>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  void (*v9)(_QWORD *, WebCore::NinePieceImage::Data **);
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  unsigned __int8 **v18;
  uint64_t (*v19)();
  uint64_t (*v20)();
  unsigned __int8 *v21;
  unsigned __int8 **v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  WebCore::NinePieceImage::Data *result;
  WTF *v36;
  void *v37;
  char v38;
  char v39;
  _DWORD *v40;
  WebCore::NinePieceImage::Data *v41;
  unsigned int v42;
  char v43;
  unsigned int v44;
  char v45;
  unsigned int v46;
  char v47;
  unsigned int v48;
  char v49;
  unsigned int v50;
  char v51;
  unsigned int v52;
  char v53;
  unsigned int v54;
  char v55;
  unsigned int v56;
  char v57;
  unsigned int v58;
  char v59;
  unsigned int v60;
  char v61;
  unsigned int v62;
  char v63;
  unsigned int v64;
  char v65;
  _DWORD *v66;

  v9 = (void (*)(_QWORD *, WebCore::NinePieceImage::Data **))a1[4];
  v8 = a1[5];
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(void (**)(_QWORD *, WebCore::NinePieceImage::Data **))(*v10 + v9);
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = (unsigned __int8 **)v15(v17);
  v19 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  if (*(_QWORD *)(*(_QWORD *)v14 + 8))
    v20 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  else
    v20 = 0;
  v21 = *v18;
  if (!v20)
    goto LABEL_28;
  if (!*((_QWORD *)v21 + 1))
    v19 = 0;
  if (v19)
  {
    v22 = v18;
    v23 = WebCore::operator==((unsigned __int8 *)(*(_QWORD *)v14 + 16), v21 + 16);
    v24 = *v22;
    if (!v23)
      goto LABEL_27;
    v25 = WebCore::operator==((unsigned __int8 *)(*(_QWORD *)v14 + 48), v24 + 48);
    v24 = *v22;
    if (!v25)
      goto LABEL_27;
    v26 = WebCore::operator==((unsigned __int8 *)(*(_QWORD *)v14 + 80), v24 + 80);
    v24 = *v22;
    if (!v26)
      goto LABEL_27;
    v27 = *(_BYTE **)v14;
    if ((*(_BYTE *)(*(_QWORD *)v14 + 4) != 0) != (v24[4] != 0)
      || (v27[5] != 0) != (v24[5] != 0)
      || v27[6] != v24[6]
      || v27[7] != v24[7])
    {
      goto LABEL_27;
    }
    v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a5 + 24) + 8))(*(_QWORD *)(a5 + 24));
    if (v28)
    {
      v29 = v28;
      v30 = (*(float (**)(_QWORD, uint64_t, float))(**(_QWORD **)(*(_QWORD *)v14 + 8) + 120))(*(_QWORD *)(*(_QWORD *)v14 + 8), v28, 1.0);
      v32 = v31;
      if (v30 != (*(float (**)(_QWORD, uint64_t, float))(**((_QWORD **)*v22 + 1) + 120))(*((_QWORD *)*v22 + 1), v29, 1.0)|| v32 != v33)
      {
        v24 = *v22;
LABEL_27:
        ++*(_DWORD *)v24;
        v41 = (WebCore::NinePieceImage::Data *)v24;
        goto LABEL_29;
      }
    }
    WebCore::blendFunc((uint64_t)&v66, *(_DWORD **)(*(_QWORD *)v14 + 8), *((_QWORD *)*v22 + 1), (double *)a5);
    WebCore::LengthBox::LengthBox((WebCore::LengthBox *)&v58, (const WebCore::LengthBox *)(*(_QWORD *)v14 + 16));
    v38 = *(_BYTE *)(*(_QWORD *)v14 + 4);
    WebCore::LengthBox::LengthBox((WebCore::LengthBox *)&v50, (const WebCore::LengthBox *)(*(_QWORD *)v14 + 48));
    v39 = *(_BYTE *)(*(_QWORD *)v14 + 5);
    WebCore::LengthBox::LengthBox((WebCore::LengthBox *)&v42, (const WebCore::LengthBox *)(*(_QWORD *)v14 + 80));
    WebCore::NinePieceImage::NinePieceImage((uint64_t *)&v41, (uint64_t *)&v66, (WebCore::LengthBox *)&v58, v38, (const WebCore::LengthBox *)&v50, v39, (const WebCore::LengthBox *)&v42, *(_BYTE *)(*(_QWORD *)v14 + 6), *(_BYTE *)(*(_QWORD *)v14 + 7));
    if (v49 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v48);
    }
    if (v47 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v46);
    }
    if (v45 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v44);
    }
    if (v43 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v42);
    }
    if (v57 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v56);
    }
    if (v55 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v54);
    }
    if (v53 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v52);
    }
    if (v51 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v50);
    }
    if (v65 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v64);
    }
    if (v63 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v62);
    }
    if (v61 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v60);
    }
    if (v59 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v58);
    }
    v40 = v66;
    v66 = 0;
    if (v40)
    {
      if (v40[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
      else
        --v40[2];
    }
  }
  else
  {
LABEL_28:
    ++*(_DWORD *)v21;
    v41 = (WebCore::NinePieceImage::Data *)v21;
  }
LABEL_29:
  v9(v10, &v41);
  result = v41;
  v41 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::NinePieceImage::Data::~Data(result);
      return (WebCore::NinePieceImage::Data *)WTF::fastFree(v36, v37);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

BOOL WebCore::PropertyWrapperGetter<WebCore::FillRepeatXY>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int16 v8;
  unsigned __int16 (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned __int16 (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned __int16 (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::FillRepeatXY>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::FillRepeatXY>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  unsigned __int16 (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (unsigned __int16 (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(unsigned __int16 (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<unsigned short>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::PropertyWrapper<unsigned short>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v8)(_QWORD *, _QWORD);
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  int v18;
  double v19;
  uint64_t (*v20)(_QWORD *, _QWORD);
  int v21;
  double v22;
  double v23;
  uint64_t (*v25)(_QWORD *, _QWORD);

  v8 = (uint64_t (*)(_QWORD *, _QWORD))a1[4];
  v9 = a1[5];
  v10 = (_QWORD *)(a2 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v8 = *(uint64_t (**)(_QWORD *, _QWORD))(*v10 + v8);
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  v25 = v8;
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = v15(v17);
  if (*(_BYTE *)(a5 + 10) == 1)
  {
    v19 = *(double *)(a5 + 16);
    v20 = v25;
    if (v19 != 0.0)
    {
      v21 = (int)(v19 * (double)v18);
      v14 += v21;
      v18 += v21;
    }
  }
  else
  {
    v20 = v25;
  }
  v22 = (double)v14;
  if (*(_BYTE *)(a5 + 9))
  {
    v22 = v22 + v22;
    v23 = (double)(v18 - v14);
  }
  else
  {
    v23 = (double)v18 - v22;
  }
  return v20(v10, (unsigned __int16)vcvtmd_s64_f64(v22 + v23 * *(double *)a5 + 0.5));
}

BOOL WebCore::LengthVariantPropertyWrapper<WebCore::GapLength>::requiresBlendingForAccumulativeIteration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  int v14;
  int v15;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (unsigned __int8 *)v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = (unsigned __int8 *)v9(v11);
  if (*v8 | *v12)
    return 1;
  v14 = v12[8];
  v15 = v8[8];
  return v15 == 11 || v14 == 11 || v15 != v14;
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::GapLength const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  int v13;
  float v14;
  float v15;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (unsigned __int8 *)v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = (unsigned __int8 *)v9(v11);
  if (*v8 != *v12)
    return 0;
  v13 = v8[8];
  if (v13 != v12[8] || (v8[9] != 0) != (v12[9] != 0))
    return 0;
  if (v13 == 13)
    return 1;
  if (v13 == 11)
    return WebCore::Length::isCalculatedEqual((WebCore::Length *)(v8 + 4), (const WebCore::Length *)(v12 + 4));
  v14 = *((float *)v8 + 1);
  if (!v8[10])
    v14 = (float)*((int *)v8 + 1);
  v15 = *((float *)v12 + 1);
  if (!v12[10])
    v15 = (float)SLODWORD(v15);
  return v14 == v15;
}

uint64_t WebCore::LengthVariantPropertyWrapper<WebCore::GapLength>::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  uint64_t result;
  unsigned int v14;
  unsigned int v15;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (unsigned __int8 *)v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = (unsigned __int8 *)v9(v11);
  if (*v8 | *v12)
    return 0;
  v14 = v8[8];
  v15 = v12[8];
  result = 1;
  if (v14 != v15)
  {
    if (v14 > 0xB || ((1 << v14) & 0x81C) == 0)
      return 0;
    if (v15 > 0xB || ((1 << v15) & 0x81C) == 0)
      return 0;
    return (v14 != 2) ^ (v15 == 2);
  }
  return result;
}

int *WebCore::LengthVariantPropertyWrapper<WebCore::GapLength>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, char *, __n128);
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  __n128 v19;
  int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  void *v23;
  int *result;
  char v25[4];
  unsigned int v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned int v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;

  v9 = (uint64_t (*)(_QWORD *, char *, __n128))a1[4];
  v8 = a1[5];
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *, char *, __n128))(*v10 + v9);
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = (unsigned __int8 *)v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = (unsigned __int8 *)v15(v17);
  v20 = *v18;
  if (*v14 | v20)
  {
    v19.n128_u64[0] = *a5;
    if (*(double *)a5 >= 0.5)
    {
      v21 = v18;
    }
    else
    {
      LOBYTE(v20) = *v14;
      v21 = v14;
    }
    v25[0] = v20;
    v26 = 0;
    v29 = 0;
    v27 = v21[8];
    v28 = v21[9];
    if (v27 - 2 < 9)
    {
      v29 = v21[10];
      if (!v29)
      {
        v22 = *((_DWORD *)v21 + 1);
LABEL_17:
        v26 = v22;
        goto LABEL_27;
      }
      v19.n128_u32[0] = *((_DWORD *)v21 + 1);
LABEL_26:
      v26 = v19.n128_u32[0];
      goto LABEL_27;
    }
    if (v27 == 11)
    {
      v26 = *((_DWORD *)v21 + 1);
      WebCore::Length::ref((int *)&v26);
    }
  }
  else
  {
    WebCore::blend(v14 + 4, v18 + 4, (uint64_t)a5, 1, (uint64_t)&v30, v19);
    v25[0] = 0;
    v26 = 0;
    v29 = 0;
    v27 = v31;
    v28 = v32;
    if (v31 - 2 < 9)
    {
      v29 = v33;
      if (!v33)
      {
        v22 = v30;
        goto LABEL_17;
      }
      v19.n128_u32[0] = v30;
      goto LABEL_26;
    }
    if (v31 == 11)
    {
      v23 = (void *)v30;
      v26 = v30;
      WebCore::Length::ref((int *)&v26);
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v23);
    }
  }
LABEL_27:
  result = (int *)v9(v10, v25, v19);
  if (v27 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v26);
  }
  return result;
}

uint64_t WebCore::AutoPropertyWrapper<unsigned short>::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  if ((v5(v7) & 1) != 0)
    return 0;
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v9(v11) ^ 1;
}

uint64_t WebCore::AutoPropertyWrapper<unsigned short>::blend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v10)(_QWORD *);
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t (*v14)(_QWORD *);
  uint64_t v15;
  _QWORD *v16;
  int v17;
  double v18;
  int v19;
  double v20;
  double v21;
  int v22;
  uint64_t (*v23)(_QWORD *, _QWORD);
  uint64_t v24;
  _QWORD *v25;
  uint64_t result;
  __n128 v27;
  uint64_t (*v28)(_QWORD *, __n128);
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t (*v32)(_QWORD *);
  uint64_t v33;
  _QWORD *v34;

  v10 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = (_QWORD *)(a3 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *))(*v12 + v10);
  v13 = v10(v12);
  v14 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = (_QWORD *)(a4 + (v15 >> 1));
  if ((v15 & 1) != 0)
    v14 = *(uint64_t (**)(_QWORD *))(*v16 + v14);
  v17 = v14(v16);
  if (*(_BYTE *)(a5 + 10) == 1)
  {
    v18 = *(double *)(a5 + 16);
    if (v18 != 0.0)
    {
      v19 = (int)(v18 * (double)v17);
      v13 += v19;
      v17 += v19;
    }
  }
  v20 = (double)v13;
  if (*(_BYTE *)(a5 + 9))
  {
    v20 = v20 + v20;
    v21 = (double)(v17 - v13);
  }
  else
  {
    v21 = (double)v17 - v20;
  }
  v22 = vcvtmd_s64_f64(v20 + v21 * *(double *)a5 + 0.5);
  if (*(_BYTE *)(a1 + 82) && v22 <= *(unsigned __int16 *)(a1 + 80))
    LOWORD(v22) = *(_WORD *)(a1 + 80);
  v23 = *(uint64_t (**)(_QWORD *, _QWORD))(a1 + 32);
  v24 = *(_QWORD *)(a1 + 40);
  v25 = (_QWORD *)(a2 + (v24 >> 1));
  if ((v24 & 1) != 0)
    v23 = *(uint64_t (**)(_QWORD *, _QWORD))(*v25 + v23);
  result = v23(v25, (unsigned __int16)v22);
  if (*(_BYTE *)(a5 + 8))
  {
    v28 = *(uint64_t (**)(_QWORD *, __n128))(a1 + 48);
    v29 = *(_QWORD *)(a1 + 56);
    v30 = v29 >> 1;
    if (*(double *)a5 == 0.0)
    {
      v31 = (_QWORD *)(a3 + v30);
      if ((v29 & 1) == 0)
      {
LABEL_20:
        v27.n128_u64[0] = *(_QWORD *)a5;
        result = v28(v31, v27);
        if ((_DWORD)result)
        {
          v32 = *(uint64_t (**)(_QWORD *))(a1 + 64);
          v33 = *(_QWORD *)(a1 + 72);
          v34 = (_QWORD *)(a2 + (v33 >> 1));
          if ((v33 & 1) != 0)
            v32 = *(uint64_t (**)(_QWORD *))(*v34 + v32);
          return v32(v34);
        }
        return result;
      }
    }
    else
    {
      v31 = (_QWORD *)(a4 + v30);
      if ((v29 & 1) == 0)
        goto LABEL_20;
    }
    v28 = *(uint64_t (**)(_QWORD *, __n128))(*v31 + v28);
    goto LABEL_20;
  }
  return result;
}

uint64_t WebCore::AutoPropertyWrapper<float>::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  if ((v5(v7) & 1) != 0)
    return 0;
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v9(v11) ^ 1;
}

uint64_t WebCore::AutoPropertyWrapper<float>::blend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float (*v10)(_QWORD *);
  uint64_t v11;
  _QWORD *v12;
  float v13;
  float (*v14)(_QWORD *);
  uint64_t v15;
  _QWORD *v16;
  float v17;
  __n128 v18;
  uint64_t (*v19)(_QWORD *, __n128);
  uint64_t v20;
  _QWORD *v21;
  uint64_t result;
  __n128 v23;
  uint64_t (*v24)(_QWORD *, __n128);
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t (*v28)(_QWORD *);
  uint64_t v29;
  _QWORD *v30;

  v10 = *(float (**)(_QWORD *))(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = (_QWORD *)(a3 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(float (**)(_QWORD *))(*v12 + v10);
  v13 = v10(v12);
  v14 = *(float (**)(_QWORD *))(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = (_QWORD *)(a4 + (v15 >> 1));
  if ((v15 & 1) != 0)
    v14 = *(float (**)(_QWORD *))(*v16 + v14);
  v17 = v14(v16);
  v18.n128_f32[0] = WebCore::blendFunc(a5, v13, v17);
  if (*(_BYTE *)(a1 + 84) && v18.n128_f32[0] <= *(float *)(a1 + 80))
    v18.n128_u32[0] = *(_DWORD *)(a1 + 80);
  v19 = *(uint64_t (**)(_QWORD *, __n128))(a1 + 32);
  v20 = *(_QWORD *)(a1 + 40);
  v21 = (_QWORD *)(a2 + (v20 >> 1));
  if ((v20 & 1) != 0)
    v19 = *(uint64_t (**)(_QWORD *, __n128))(*v21 + v19);
  result = v19(v21, v18);
  if (*(_BYTE *)(a5 + 8))
  {
    v24 = *(uint64_t (**)(_QWORD *, __n128))(a1 + 48);
    v25 = *(_QWORD *)(a1 + 56);
    v26 = v25 >> 1;
    if (*(double *)a5 == 0.0)
    {
      v27 = (_QWORD *)(a3 + v26);
      if ((v25 & 1) == 0)
      {
LABEL_14:
        v23.n128_u64[0] = *(_QWORD *)a5;
        result = v24(v27, v23);
        if ((_DWORD)result)
        {
          v28 = *(uint64_t (**)(_QWORD *))(a1 + 64);
          v29 = *(_QWORD *)(a1 + 72);
          v30 = (_QWORD *)(a2 + (v29 >> 1));
          if ((v29 & 1) != 0)
            v28 = *(uint64_t (**)(_QWORD *))(*v30 + v28);
          return v28(v30);
        }
        return result;
      }
    }
    else
    {
      v27 = (_QWORD *)(a4 + v26);
      if ((v25 & 1) == 0)
        goto LABEL_14;
    }
    v24 = *(uint64_t (**)(_QWORD *, __n128))(*v27 + v24);
    goto LABEL_14;
  }
  return result;
}

BOOL WebCore::PropertyWrapperGetter<int>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::AutoPropertyWrapper<int>::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  if ((v5(v7) & 1) != 0)
    return 0;
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v9(v11) ^ 1;
}

uint64_t WebCore::AutoPropertyWrapper<int>::blend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v10)(_QWORD *);
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t (*v14)(_QWORD *);
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  double v19;
  int v20;
  double v21;
  double v22;
  int v23;
  uint64_t (*v24)(_QWORD *, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  uint64_t result;
  __n128 v28;
  uint64_t (*v29)(_QWORD *, __n128);
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t (*v33)(_QWORD *);
  uint64_t v34;
  _QWORD *v35;

  v10 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = (_QWORD *)(a3 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *))(*v12 + v10);
  v13 = v10(v12);
  v14 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = (_QWORD *)(a4 + (v15 >> 1));
  if ((v15 & 1) != 0)
    v14 = *(uint64_t (**)(_QWORD *))(*v16 + v14);
  v17 = v14(v16);
  if (*(_BYTE *)(a5 + 10) == 1)
  {
    v19 = *(double *)(a5 + 16);
    if (v19 != 0.0)
    {
      v20 = (int)(v19 * (double)v17);
      v13 += v20;
      v17 += v20;
    }
  }
  v21 = (double)v13;
  if (*(_BYTE *)(a5 + 9))
  {
    v21 = v21 + v21;
    v22 = (double)(v17 - v13);
  }
  else
  {
    v22 = (double)v17 - v21;
  }
  LODWORD(v18) = vcvtmd_s64_f64(v21 + v22 * *(double *)a5 + 0.5);
  if (*(_BYTE *)(a1 + 84))
  {
    v23 = *(_DWORD *)(a1 + 80);
    if (v23 <= (int)v18)
      v18 = v18;
    else
      v18 = v23;
  }
  v24 = *(uint64_t (**)(_QWORD *, uint64_t))(a1 + 32);
  v25 = *(_QWORD *)(a1 + 40);
  v26 = (_QWORD *)(a2 + (v25 >> 1));
  if ((v25 & 1) != 0)
    v24 = *(uint64_t (**)(_QWORD *, uint64_t))(*v26 + v24);
  result = v24(v26, v18);
  if (*(_BYTE *)(a5 + 8))
  {
    v29 = *(uint64_t (**)(_QWORD *, __n128))(a1 + 48);
    v30 = *(_QWORD *)(a1 + 56);
    v31 = v30 >> 1;
    if (*(double *)a5 == 0.0)
    {
      v32 = (_QWORD *)(a3 + v31);
      if ((v30 & 1) == 0)
      {
LABEL_21:
        v28.n128_u64[0] = *(_QWORD *)a5;
        result = v29(v32, v28);
        if ((_DWORD)result)
        {
          v33 = *(uint64_t (**)(_QWORD *))(a1 + 64);
          v34 = *(_QWORD *)(a1 + 72);
          v35 = (_QWORD *)(a2 + (v34 >> 1));
          if ((v34 & 1) != 0)
            v33 = *(uint64_t (**)(_QWORD *))(*v35 + v33);
          return v33(v35);
        }
        return result;
      }
    }
    else
    {
      v32 = (_QWORD *)(a4 + v31);
      if ((v30 & 1) == 0)
        goto LABEL_21;
    }
    v29 = *(uint64_t (**)(_QWORD *, __n128))(*v32 + v29);
    goto LABEL_21;
  }
  return result;
}

uint64_t WebCore::PropertyWrapper<int>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v8)(_QWORD *, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  double v20;
  uint64_t (*v21)(_QWORD *, uint64_t);
  int v22;
  double v23;
  double v24;
  uint64_t (*v26)(_QWORD *, uint64_t);

  v8 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v9 = a1[5];
  v10 = (_QWORD *)(a2 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v8 = *(uint64_t (**)(_QWORD *, uint64_t))(*v10 + v8);
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  v26 = v8;
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = v15(v17);
  if (*(_BYTE *)(a5 + 10) == 1)
  {
    v20 = *(double *)(a5 + 16);
    v21 = v26;
    if (v20 != 0.0)
    {
      v22 = (int)(v20 * (double)v18);
      v14 += v22;
      v18 += v22;
    }
  }
  else
  {
    v21 = v26;
  }
  v23 = (double)v14;
  if (*(_BYTE *)(a5 + 9))
  {
    v23 = v23 + v23;
    v24 = (double)(v18 - v14);
  }
  else
  {
    v24 = (double)v18 - v23;
  }
  LODWORD(v19) = vcvtmd_s64_f64(v23 + v24 * *(double *)a5 + 0.5);
  return v21(v10, v19);
}

uint64_t WebCore::PositivePropertyWrapper<unsigned short>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t (*v13)(_QWORD *);
  uint64_t v14;
  _QWORD *v15;
  int v16;
  double v17;
  int v18;
  double v19;
  double v20;
  double v21;
  uint64_t (*v22)(_QWORD *, _QWORD);
  uint64_t v23;
  _QWORD *v24;
  int v25;

  v9 = (uint64_t (*)(_QWORD *))a1[2];
  v10 = a1[3];
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  v13 = (uint64_t (*)(_QWORD *))a1[2];
  v14 = a1[3];
  v15 = (_QWORD *)(a4 + (v14 >> 1));
  if ((v14 & 1) != 0)
    v13 = *(uint64_t (**)(_QWORD *))(*v15 + v13);
  v16 = v13(v15);
  if (*(_BYTE *)(a5 + 10) == 1)
  {
    v17 = *(double *)(a5 + 16);
    if (v17 != 0.0)
    {
      v18 = (int)(v17 * (double)v16);
      v12 += v18;
      v16 += v18;
    }
  }
  v19 = (double)v12;
  if (*(_BYTE *)(a5 + 9))
  {
    v19 = v19 + v19;
    v20 = (double)(v16 - v12);
  }
  else
  {
    v20 = (double)v16 - v19;
  }
  v21 = v19 + v20 * *(double *)a5;
  v22 = (uint64_t (*)(_QWORD *, _QWORD))a1[4];
  v23 = a1[5];
  v24 = (_QWORD *)(a2 + (v23 >> 1));
  if ((v23 & 1) != 0)
    v22 = *(uint64_t (**)(_QWORD *, _QWORD))(*v24 + v22);
  v25 = vcvtmd_s64_f64(v21 + 0.5);
  if (v25 <= 1)
    LOWORD(v25) = 1;
  return v22(v24, (unsigned __int16)v25);
}

BOOL WebCore::LengthVariantPropertyWrapper<WebCore::LengthSize>::requiresBlendingForAccumulativeIteration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v18;
  int v19;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  v13 = *(unsigned __int8 *)(v8 + 4);
  v14 = *(unsigned __int8 *)(v12 + 4);
  if (v13 == 11 || v14 == 11 || v13 != v14)
    return 1;
  v18 = *(unsigned __int8 *)(v12 + 12);
  v19 = *(unsigned __int8 *)(v8 + 12);
  return v19 == 11 || v18 == 11 || v19 != v18;
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::LengthSize const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  float v15;
  float v16;
  int v17;
  float v18;
  float v19;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (unsigned __int8 *)v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = (unsigned __int8 *)v9(v11);
  v13 = v8[4];
  if (v13 != v12[4])
    return 0;
  v14 = v12;
  if ((v8[5] != 0) != (v12[5] != 0))
    return 0;
  if (v13 == 13)
    goto LABEL_15;
  if (v13 == 11)
  {
    if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)v8, (const WebCore::Length *)v12) & 1) != 0)
      goto LABEL_15;
    return 0;
  }
  v15 = *(float *)v8;
  if (!v8[6])
    v15 = (float)*(int *)v8;
  v16 = *(float *)v12;
  if (!v12[6])
    v16 = (float)*(int *)v12;
  if (v15 != v16)
    return 0;
LABEL_15:
  v17 = v8[12];
  if (v17 != v14[12] || (v8[13] != 0) != (v14[13] != 0))
    return 0;
  if (v17 == 13)
    return 1;
  if (v17 == 11)
    return WebCore::Length::isCalculatedEqual((WebCore::Length *)(v8 + 8), (const WebCore::Length *)(v14 + 8));
  v18 = *((float *)v8 + 2);
  if (!v8[14])
    v18 = (float)*((int *)v8 + 2);
  v19 = *((float *)v14 + 2);
  if (!v14[14])
    v19 = (float)SLODWORD(v19);
  return v18 == v19;
}

uint64_t WebCore::LengthVariantPropertyWrapper<WebCore::LengthSize>::canInterpolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t result;
  BOOL v19;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  v13 = *(unsigned __int8 *)(v8 + 4);
  v14 = *(unsigned __int8 *)(v8 + 12);
  v15 = *(unsigned __int8 *)(v12 + 4);
  v16 = *(unsigned __int8 *)(v12 + 12);
  if (v13 != v15)
  {
    if (v13 > 0xB || ((1 << v13) & 0x81C) == 0)
      return 0;
    v19 = v15 > 0xB || ((1 << v15) & 0x81C) == 0;
    if (v19 || (v13 != 2) == (v15 == 2))
      return 0;
  }
  result = 1;
  if (v14 != v16)
  {
    if (v14 <= 0xB && ((1 << v14) & 0x81C) != 0 && v16 <= 0xB && ((1 << v16) & 0x81C) != 0)
      return (v14 != 2) ^ (v16 == 2);
    return 0;
  }
  return result;
}

int *WebCore::LengthVariantPropertyWrapper<WebCore::LengthSize>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, unsigned int *);
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  __n128 v19;
  __n128 v20;
  int *result;
  unsigned int v22;
  char v23;
  unsigned int v24;
  char v25;

  v9 = (uint64_t (*)(_QWORD *, unsigned int *))a1[4];
  v8 = a1[5];
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *, unsigned int *))(*v10 + v9);
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = (unsigned __int8 *)v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = (unsigned __int8 *)v15(v17);
  WebCore::blend(v14, v18, a5, 1, (uint64_t)&v22, v19);
  WebCore::blend(v14 + 8, v18 + 8, a5, 1, (uint64_t)&v24, v20);
  result = (int *)v9(v10, &v22);
  if (v25 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v24);
  }
  if (v23 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v22);
  }
  return result;
}

BOOL WebCore::PropertyWrapperGetter<WebCore::DisplayType>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::NonNormalizedDiscretePropertyWrapper<WebCore::DisplayType>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::NonNormalizedDiscretePropertyWrapper<WebCore::DisplayType>::normalizesProgressForDiscreteInterpolation()
{
  return 0;
}

uint64_t WebCore::PropertyWrapper<WebCore::DisplayType>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5)
{
  uint64_t (*v8)(_QWORD *, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  double v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  uint64_t (*v25)(_QWORD *, uint64_t);

  v8 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v9 = a1[5];
  v10 = (_QWORD *)(a2 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v8 = *(uint64_t (**)(_QWORD *, uint64_t))(*v10 + v8);
  v25 = v8;
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = v15(v17);
  v19 = *a5;
  if (v14 == 26)
    v20 = v18;
  else
    v20 = v14;
  if (v19 >= 1.0)
    v20 = v18;
  if (v19 <= 0.0)
    v20 = v14;
  if (v19 >= 0.5)
    v21 = v18;
  else
    v21 = v14;
  if (v14 == 26 || v18 == 26)
    v23 = v20;
  else
    v23 = v21;
  return v25(v10, v23);
}

BOOL WebCore::AcceleratedPropertyWrapper<float>::requiresBlendingForAccumulativeIteration(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 8) == 273;
}

uint64_t WebCore::AcceleratedIndividualTransformPropertyWrapper<WebCore::ScaleTransformOperation>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v14;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  if (v8 == v12)
    return 1;
  if (v8)
    v14 = v12 == 0;
  else
    v14 = 1;
  if (v14)
    return 0;
  else
    return WebCore::ScaleTransformOperation::operator==(v8, v12);
}

_DWORD *WebCore::RefCountedPropertyWrapper<WebCore::ScaleTransformOperation>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  void (*v9)(_QWORD *, _DWORD **);
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _DWORD *result;
  _DWORD *v20;

  v9 = (void (*)(_QWORD *, _DWORD **))a1[4];
  v8 = a1[5];
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(void (**)(_QWORD *, _DWORD **))(*v10 + v9);
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = v15(v17);
  WebCore::blendFunc((uint64_t)&v20, v14, v18, a5);
  v9(v10, &v20);
  result = v20;
  v20 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::AcceleratedIndividualTransformPropertyWrapper<WebCore::RotateTransformOperation>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  BOOL v14;
  unsigned int v15;
  BOOL v16;
  int v17;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  if (v8 == v12)
    return 1;
  if (v8)
    v14 = v12 == 0;
  else
    v14 = 1;
  if (v14)
    return 0;
  v15 = *(unsigned __int8 *)(v8 + 12);
  if (v15 != *(unsigned __int8 *)(v12 + 12))
    return 0;
  v16 = v15 > 0x12;
  v17 = (1 << v15) & 0x601C0;
  if (!v16 && v17 != 0)
  {
    if (*(double *)(v8 + 40) == *(double *)(v12 + 40)
      && *(double *)(v8 + 16) == *(double *)(v12 + 16)
      && *(double *)(v8 + 24) == *(double *)(v12 + 24))
    {
      return *(double *)(v8 + 32) == *(double *)(v12 + 32);
    }
    return 0;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

_DWORD *WebCore::RefCountedPropertyWrapper<WebCore::RotateTransformOperation>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  void (*v9)(_QWORD *, _DWORD **);
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _DWORD *result;
  _DWORD *v20;

  v9 = (void (*)(_QWORD *, _DWORD **))a1[4];
  v8 = a1[5];
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(void (**)(_QWORD *, _DWORD **))(*v10 + v9);
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = v15(v17);
  WebCore::blendFunc((uint64_t *)&v20, v14, v18, a5);
  v9(v10, &v20);
  result = v20;
  v20 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t *WebCore::blendFunc(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v4 = result;
  if (!(a2 | a3))
  {
    *result = 0;
    return result;
  }
  v6 = a3;
  v7 = a2;
  if (!a2)
  {
    v9 = *(unsigned __int8 *)(a3 + 12);
    v10 = WTF::fastMalloc((WTF *)0x30);
    v8 = (_DWORD *)v10;
    *(_DWORD *)(v10 + 8) = 1;
    *(_BYTE *)(v10 + 12) = v9;
    *(_QWORD *)v10 = off_1E3416EA0;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_OWORD *)(v10 + 32) = xmmword_1968A14B0;
    v11 = v9 > 0x12 || ((1 << v9) & 0x601C0) == 0;
    v7 = v10;
    if (!v11)
      goto LABEL_16;
LABEL_54:
    __break(0xC471u);
    JUMPOUT(0x195660390);
  }
  if (a3)
  {
    v8 = 0;
    goto LABEL_16;
  }
  v12 = *(unsigned __int8 *)(a2 + 12);
  v13 = WTF::fastMalloc((WTF *)0x30);
  v8 = (_DWORD *)v13;
  *(_DWORD *)(v13 + 8) = 1;
  *(_BYTE *)(v13 + 12) = v12;
  *(_QWORD *)v13 = off_1E3416EA0;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_OWORD *)(v13 + 32) = xmmword_1968A14B0;
  v14 = v12 > 0x12 || ((1 << v12) & 0x601C0) == 0;
  v6 = v13;
  if (v14)
    goto LABEL_54;
LABEL_16:
  v15 = *(unsigned __int8 *)(v7 + 12);
  v16 = *(unsigned __int8 *)(v6 + 12);
  if (v15 == v16)
  {
    WebCore::RotateTransformOperation::blend(v6, (double *)v7, a4, 0, &v37);
    result = (uint64_t *)v37;
    v17 = *(unsigned __int8 *)(v37 + 12);
    if (v17 > 0x12 || ((1 << v17) & 0x601C0) == 0)
    {
      *v4 = 0;
      v37 = 0;
    }
    else
    {
      v34 = *(_OWORD *)(v37 + 16);
      v19 = *(_QWORD *)(v37 + 32);
      v20 = *(_QWORD *)(v37 + 40);
      v21 = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(v21 + 8) = 1;
      *(_BYTE *)(v21 + 12) = v17;
      *(_QWORD *)v21 = off_1E3416EA0;
      *(_OWORD *)(v21 + 16) = v34;
      *(_QWORD *)(v21 + 32) = v19;
      *(_QWORD *)(v21 + 40) = v20;
      if (v17 > 0x12 || ((1 << v17) & 0x601C0) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195660698);
      }
      *v4 = v21;
      result = (uint64_t *)v37;
      v37 = 0;
      if (!result)
      {
LABEL_40:
        if (!v8)
          return result;
        goto LABEL_41;
      }
    }
    if (*((_DWORD *)result + 2) != 1)
    {
      --*((_DWORD *)result + 2);
      goto LABEL_40;
    }
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
LABEL_51:
    if (!v8)
      return result;
    goto LABEL_41;
  }
  v23 = v15 > 0x14;
  v24 = (1 << v15) & 0x1DE0C0;
  v25 = v23 || v24 == 0;
  if (!v25 || v16 <= 0x14 && ((1 << v16) & 0x1DE0C0) != 0)
  {
    v35 = *(_OWORD *)(v7 + 16);
    v26 = *(_QWORD *)(v7 + 32);
    v27 = *(_QWORD *)(v7 + 40);
    v28 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v28 + 8) = 1;
    *(_BYTE *)(v28 + 12) = 18;
    *(_QWORD *)v28 = off_1E3416EA0;
    *(_OWORD *)(v28 + 16) = v35;
    *(_QWORD *)(v28 + 32) = v26;
    *(_QWORD *)(v28 + 40) = v27;
    v36 = *(_OWORD *)(v6 + 16);
    v29 = *(_QWORD *)(v6 + 32);
    v30 = *(_QWORD *)(v6 + 40);
    v31 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v31 + 8) = 1;
    *(_BYTE *)(v31 + 12) = 18;
    *(_QWORD *)v31 = off_1E3416EA0;
    *(_OWORD *)(v31 + 16) = v36;
    *(_QWORD *)(v31 + 32) = v29;
    *(_QWORD *)(v31 + 40) = v30;
  }
  else
  {
    v32 = *(_QWORD *)(v7 + 40);
    v28 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v28 + 8) = 1;
    *(_BYTE *)(v28 + 12) = 8;
    *(_QWORD *)v28 = off_1E3416EA0;
    *(_QWORD *)(v28 + 16) = 0;
    *(_QWORD *)(v28 + 24) = 0;
    *(_QWORD *)(v28 + 32) = 0x3FF0000000000000;
    *(_QWORD *)(v28 + 40) = v32;
    v33 = *(_QWORD *)(v6 + 40);
    v31 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v31 + 8) = 1;
    *(_BYTE *)(v31 + 12) = 8;
    *(_QWORD *)v31 = off_1E3416EA0;
    *(_QWORD *)(v31 + 16) = 0;
    *(_QWORD *)(v31 + 24) = 0;
    *(_QWORD *)(v31 + 32) = 0x3FF0000000000000;
    *(_QWORD *)(v31 + 40) = v33;
  }
  result = (uint64_t *)WebCore::blendFunc(v4, v28, v31, a4);
  if (*(_DWORD *)(v31 + 8) == 1)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  else
    --*(_DWORD *)(v31 + 8);
  if (*(_DWORD *)(v28 + 8) == 1)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    goto LABEL_51;
  }
  --*(_DWORD *)(v28 + 8);
  if (!v8)
    return result;
LABEL_41:
  if (v8[2] == 1)
    return (uint64_t *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  --v8[2];
  return result;
}

uint64_t WebCore::AcceleratedIndividualTransformPropertyWrapper<WebCore::TranslateTransformOperation>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  BOOL v14;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (unsigned __int8 *)v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = (unsigned __int8 *)v9(v11);
  if (v8 == v12)
    return 1;
  if (v8)
    v14 = v12 == 0;
  else
    v14 = 1;
  if (v14)
    return 0;
  else
    return WebCore::TranslateTransformOperation::operator==(v8, v12);
}

_DWORD *WebCore::RefCountedPropertyWrapper<WebCore::TranslateTransformOperation>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  void (*v9)(_QWORD *, _DWORD **);
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __n128 v19;
  _DWORD *result;
  _DWORD *v21;

  v9 = (void (*)(_QWORD *, _DWORD **))a1[4];
  v8 = a1[5];
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(void (**)(_QWORD *, _DWORD **))(*v10 + v9);
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = v15(v17);
  WebCore::blendFunc((int *)&v21, v14, v18, a5, v19);
  v9(v10, &v21);
  result = v21;
  v21 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

int *WebCore::blendFunc(int *result, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  int *v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  int v17;
  BOOL v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  void *v22;
  int v23;
  void *v24;
  int v25;
  void *v26;
  int v27;
  void *v28;
  unsigned int v29;
  unsigned __int8 v30;
  char v31;
  char v32;
  unsigned int v33;
  __int16 v34;
  char v35;
  unsigned int v36;
  __int16 v37;
  char v38;
  unsigned int v39[2];
  uint64_t v40;

  v5 = result;
  if (!(a2 | a3))
  {
    *(_QWORD *)result = 0;
    return result;
  }
  v7 = a3;
  v8 = a2;
  if (a2)
  {
    if (a3)
    {
      v9 = 0;
    }
    else
    {
      v39[0] = 0;
      LOWORD(v39[1]) = 4;
      BYTE2(v39[1]) = 0;
      v36 = 0;
      v37 = 4;
      v38 = 0;
      v33 = 0;
      v34 = 4;
      v35 = 0;
      WebCore::TranslateTransformOperation::create((uint64_t)v39, (uint64_t)&v36, (uint64_t)&v33, *(unsigned __int8 *)(a2 + 12), &v40);
      v9 = (_DWORD *)v40;
      v40 = 0;
      if (v34 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v33);
      }
      if (v37 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v36);
      }
      if (LOBYTE(v39[1]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v39[0]);
      }
      v7 = (uint64_t)v9;
    }
  }
  else
  {
    v39[0] = 0;
    LOWORD(v39[1]) = 4;
    BYTE2(v39[1]) = 0;
    v36 = 0;
    v37 = 4;
    v38 = 0;
    v33 = 0;
    v34 = 4;
    v35 = 0;
    WebCore::TranslateTransformOperation::create((uint64_t)v39, (uint64_t)&v36, (uint64_t)&v33, *(unsigned __int8 *)(a3 + 12), &v40);
    v9 = (_DWORD *)v40;
    v40 = 0;
    if (v34 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v33);
    }
    if (v37 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v36);
    }
    if (LOBYTE(v39[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v39[0]);
    }
    v8 = (uint64_t)v9;
  }
  v10 = *(unsigned __int8 *)(v8 + 12);
  v11 = *(unsigned __int8 *)(v7 + 12);
  if (v10 != v11)
  {
    v14 = v10 > 0x14;
    v17 = (1 << v10) & 0x1DE0C0;
    v18 = v14 || v17 == 0;
    if (!v18 || v11 <= 0x14 && ((1 << v11) & 0x1DE0C0) != 0)
    {
      v39[0] = 0;
      BYTE2(v39[1]) = 0;
      LOWORD(v39[1]) = *(_WORD *)(v8 + 20);
      if (LOBYTE(v39[1]) - 2 >= 9)
      {
        if (LOBYTE(v39[1]) == 11)
        {
          v39[0] = *(_DWORD *)(v8 + 16);
          WebCore::Length::ref((int *)v39);
        }
      }
      else
      {
        BYTE2(v39[1]) = *(_BYTE *)(v8 + 22);
        v39[0] = *(_DWORD *)(v8 + 16);
      }
      v36 = 0;
      v38 = 0;
      v37 = *(_WORD *)(v8 + 28);
      if (v37 - 2 >= 9)
      {
        if (v37 == 11)
        {
          v36 = *(_DWORD *)(v8 + 24);
          WebCore::Length::ref((int *)&v36);
        }
      }
      else
      {
        v38 = *(_BYTE *)(v8 + 30);
        v36 = *(_DWORD *)(v8 + 24);
      }
      v33 = 0;
      v35 = 0;
      v34 = *(_WORD *)(v8 + 36);
      if (v34 - 2 >= 9)
      {
        if (v34 == 11)
        {
          v33 = *(_DWORD *)(v8 + 32);
          WebCore::Length::ref((int *)&v33);
        }
      }
      else
      {
        v35 = *(_BYTE *)(v8 + 38);
        v33 = *(_DWORD *)(v8 + 32);
      }
      WebCore::TranslateTransformOperation::create((uint64_t)v39, (uint64_t)&v36, (uint64_t)&v33, 0x10u, &v40);
      v19 = (_DWORD *)v40;
      v40 = 0;
      if (v34 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v33);
      }
      if (v37 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v36);
      }
      if (LOBYTE(v39[1]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v39[0]);
      }
      v39[0] = 0;
      BYTE2(v39[1]) = 0;
      LOWORD(v39[1]) = *(_WORD *)(v7 + 20);
      if (LOBYTE(v39[1]) - 2 >= 9)
      {
        if (LOBYTE(v39[1]) == 11)
        {
          v39[0] = *(_DWORD *)(v7 + 16);
          WebCore::Length::ref((int *)v39);
        }
      }
      else
      {
        BYTE2(v39[1]) = *(_BYTE *)(v7 + 22);
        v39[0] = *(_DWORD *)(v7 + 16);
      }
      v36 = 0;
      v38 = 0;
      v37 = *(_WORD *)(v7 + 28);
      if (v37 - 2 >= 9)
      {
        if (v37 == 11)
        {
          v36 = *(_DWORD *)(v7 + 24);
          WebCore::Length::ref((int *)&v36);
        }
      }
      else
      {
        v38 = *(_BYTE *)(v7 + 30);
        v36 = *(_DWORD *)(v7 + 24);
      }
      v33 = 0;
      v35 = 0;
      v34 = *(_WORD *)(v7 + 36);
      if (v34 - 2 >= 9)
      {
        if (v34 == 11)
        {
          v33 = *(_DWORD *)(v7 + 32);
          WebCore::Length::ref((int *)&v33);
        }
      }
      else
      {
        v35 = *(_BYTE *)(v7 + 38);
        v33 = *(_DWORD *)(v7 + 32);
      }
      WebCore::TranslateTransformOperation::create((uint64_t)v39, (uint64_t)&v36, (uint64_t)&v33, 0x10u, &v40);
      v20 = (_DWORD *)v40;
      v40 = 0;
      if (v34 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v33);
      }
      if (v37 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v36);
      }
      if (LOBYTE(v39[1]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v39[0]);
      }
      result = (int *)WebCore::blendFunc(v5, v19, v20, a4);
      if (!v20)
        goto LABEL_58;
    }
    else
    {
      v39[0] = 0;
      BYTE2(v39[1]) = 0;
      LOBYTE(v39[1]) = *(_BYTE *)(v8 + 20);
      v21 = LOBYTE(v39[1]);
      BYTE1(v39[1]) = *(_BYTE *)(v8 + 21);
      if (LOBYTE(v39[1]) - 2 >= 9)
      {
        v22 = 0;
        if (LOBYTE(v39[1]) == 11)
        {
          v22 = (void *)*(unsigned int *)(v8 + 16);
          v39[0] = *(_DWORD *)(v8 + 16);
          WebCore::Length::ref((int *)v39);
        }
      }
      else
      {
        BYTE2(v39[1]) = *(_BYTE *)(v8 + 22);
        if (BYTE2(v39[1]))
        {
          v39[0] = *(_DWORD *)(v8 + 16);
          v22 = (void *)v39[0];
        }
        else
        {
          v22 = (void *)*(unsigned int *)(v8 + 16);
          v39[0] = *(_DWORD *)(v8 + 16);
        }
      }
      v36 = 0;
      v38 = 0;
      v37 = *(_WORD *)(v8 + 28);
      v23 = v37;
      if (v37 - 2 >= 9)
      {
        v24 = 0;
        if (v37 == 11)
        {
          v24 = (void *)*(unsigned int *)(v8 + 24);
          v36 = *(_DWORD *)(v8 + 24);
          WebCore::Length::ref((int *)&v36);
        }
      }
      else
      {
        v38 = *(_BYTE *)(v8 + 30);
        if (v38)
        {
          v36 = *(_DWORD *)(v8 + 24);
          v24 = (void *)v36;
        }
        else
        {
          v24 = (void *)*(unsigned int *)(v8 + 24);
          v36 = *(_DWORD *)(v8 + 24);
        }
      }
      v19 = (_DWORD *)WTF::fastMalloc((WTF *)0x28);
      LODWORD(v40) = 0;
      WORD2(v40) = 4;
      BYTE6(v40) = 0;
      WebCore::TranslateTransformOperation::TranslateTransformOperation((uint64_t)v19, (uint64_t)v39, (uint64_t)&v36, (uint64_t)&v40, 5u);
      if (v23 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v24);
      }
      if (v21 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v22);
      }
      v39[0] = 0;
      BYTE2(v39[1]) = 0;
      LOBYTE(v39[1]) = *(_BYTE *)(v7 + 20);
      v25 = LOBYTE(v39[1]);
      BYTE1(v39[1]) = *(_BYTE *)(v7 + 21);
      if (LOBYTE(v39[1]) - 2 >= 9)
      {
        v26 = 0;
        if (LOBYTE(v39[1]) == 11)
        {
          v26 = (void *)*(unsigned int *)(v7 + 16);
          v39[0] = *(_DWORD *)(v7 + 16);
          WebCore::Length::ref((int *)v39);
        }
      }
      else
      {
        BYTE2(v39[1]) = *(_BYTE *)(v7 + 22);
        if (BYTE2(v39[1]))
        {
          v39[0] = *(_DWORD *)(v7 + 16);
          v26 = (void *)v39[0];
        }
        else
        {
          v26 = (void *)*(unsigned int *)(v7 + 16);
          v39[0] = *(_DWORD *)(v7 + 16);
        }
      }
      v36 = 0;
      v38 = 0;
      v37 = *(_WORD *)(v7 + 28);
      v27 = v37;
      if (v37 - 2 >= 9)
      {
        v28 = 0;
        if (v37 == 11)
        {
          v28 = (void *)*(unsigned int *)(v7 + 24);
          v36 = *(_DWORD *)(v7 + 24);
          WebCore::Length::ref((int *)&v36);
        }
      }
      else
      {
        v38 = *(_BYTE *)(v7 + 30);
        if (v38)
        {
          v36 = *(_DWORD *)(v7 + 24);
          v28 = (void *)v36;
        }
        else
        {
          v28 = (void *)*(unsigned int *)(v7 + 24);
          v36 = *(_DWORD *)(v7 + 24);
        }
      }
      v20 = (_DWORD *)WTF::fastMalloc((WTF *)0x28);
      LODWORD(v40) = 0;
      WORD2(v40) = 4;
      BYTE6(v40) = 0;
      WebCore::TranslateTransformOperation::TranslateTransformOperation((uint64_t)v20, (uint64_t)v39, (uint64_t)&v36, (uint64_t)&v40, 5u);
      if (v27 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v28);
      }
      if (v25 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v26);
      }
      result = (int *)WebCore::blendFunc(v5, v19, v20, a4);
    }
    if (v20[2] == 1)
    {
      result = (int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
      if (!v19)
        goto LABEL_88;
      goto LABEL_59;
    }
    --v20[2];
LABEL_58:
    if (!v19)
      goto LABEL_88;
LABEL_59:
    if (v19[2] == 1)
      result = (int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
    goto LABEL_88;
  }
  result = WebCore::TranslateTransformOperation::blend(v7, v8, a4, 0, &v40, a5);
  v12 = v40;
  v13 = *(unsigned __int8 *)(v40 + 12);
  v14 = v13 > 0x10;
  v15 = (1 << v13) & 0x18038;
  if (v14 || v15 == 0)
  {
    *(_QWORD *)v5 = 0;
    v40 = 0;
  }
  else
  {
    v36 = 0;
    v38 = 0;
    v37 = *(_WORD *)(v40 + 20);
    if (v37 - 2 >= 9)
    {
      if (v37 == 11)
      {
        v36 = *(_DWORD *)(v40 + 16);
        WebCore::Length::ref((int *)&v36);
      }
    }
    else
    {
      v38 = *(_BYTE *)(v40 + 22);
      v36 = *(_DWORD *)(v40 + 16);
    }
    v33 = 0;
    v35 = 0;
    v34 = *(_WORD *)(v12 + 28);
    if (v34 - 2 >= 9)
    {
      if (v34 == 11)
      {
        v33 = *(_DWORD *)(v12 + 24);
        WebCore::Length::ref((int *)&v33);
      }
    }
    else
    {
      v35 = *(_BYTE *)(v12 + 30);
      v33 = *(_DWORD *)(v12 + 24);
    }
    v29 = 0;
    v32 = 0;
    v30 = *(_BYTE *)(v12 + 36);
    v31 = *(_BYTE *)(v12 + 37);
    if (v30 - 2 >= 9)
    {
      if (v30 == 11)
      {
        v29 = *(_DWORD *)(v12 + 32);
        WebCore::Length::ref((int *)&v29);
      }
    }
    else
    {
      v32 = *(_BYTE *)(v12 + 38);
      v29 = *(_DWORD *)(v12 + 32);
    }
    result = WebCore::TranslateTransformOperation::create((uint64_t)&v36, (uint64_t)&v33, (uint64_t)&v29, *(unsigned __int8 *)(v12 + 12), (uint64_t *)v39);
    *(_QWORD *)v5 = *(_QWORD *)v39;
    *(_QWORD *)v39 = 0;
    if (v30 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v29);
    }
    if (v34 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v33);
    }
    if (v37 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v36);
    }
    v12 = v40;
    v40 = 0;
    if (!v12)
      goto LABEL_88;
  }
  if (*(_DWORD *)(v12 + 8) == 1)
    result = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  else
    --*(_DWORD *)(v12 + 8);
LABEL_88:
  if (v9)
  {
    if (v9[2] == 1)
      return (int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return result;
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::TextUnderlineOffset>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  if ((v8 & 0xFF00000000) == 0 || (v12 & 0xFF00000000) == 0)
    return ((v8 & 0xFF00000000) != 0) == ((v12 & 0xFF00000000) != 0);
  else
    return *(float *)&v8 == *(float *)&v12;
}

uint64_t WebCore::PropertyWrapper<WebCore::TextUnderlineOffset>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v8)(_QWORD *, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t (*v22)(_QWORD *, uint64_t);

  v8 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v9 = a1[5];
  v10 = (_QWORD *)(a2 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v8 = *(uint64_t (**)(_QWORD *, uint64_t))(*v10 + v8);
  v22 = v8;
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = v15(v17);
  if ((v14 & 0xFF00000000) == 0 || (v18 & 0xFF00000000) == 0)
    v20 = 0;
  else
    v20 = COERCE_UNSIGNED_INT(WebCore::blendFunc(a5, *(float *)&v14, *(float *)&v18)) | 0x100000000;
  return v22(v10, v20);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::StyleContentAlignmentData const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int16 *v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (unsigned __int16 *)v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  return ((*(unsigned __int16 *)v9(v11) ^ *v8) & 0x1FF) == 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::StyleContentAlignmentData const&>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::StyleContentAlignmentData const&>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::StyleSelfAlignmentData const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (unsigned __int8 *)v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  return ((*(unsigned __int8 *)v9(v11) ^ *v8) & 0x7F) == 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::StyleSelfAlignmentData const&>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::StyleSelfAlignmentData const&>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::BackfaceVisibility>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::BackfaceVisibility>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::BackfaceVisibility>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::FillAttachment>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::FillAttachment>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::FillAttachment>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::FillBox>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::FillBox>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::FillBox>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::BorderStyle>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::BorderStyle>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::BorderStyle>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::BorderCollapse>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 ^ v9(v11) ^ 1;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::BorderCollapse>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::BorderCollapse>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::BoxSizing>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 ^ v9(v11) ^ 1;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::BoxSizing>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::BoxSizing>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::CaptionSide>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::CaptionSide>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::CaptionSide>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::Clear>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::Clear>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::Clear>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::TextBoxTrim>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextBoxTrim>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextBoxTrim>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::PrintColorAdjust>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 ^ v9(v11) ^ 1;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::PrintColorAdjust>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::PrintColorAdjust>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::ColumnFill>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 ^ v9(v11) ^ 1;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::ColumnFill>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::ColumnFill>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::ContentVisibility>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::NonNormalizedDiscretePropertyWrapper<WebCore::ContentVisibility>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::NonNormalizedDiscretePropertyWrapper<WebCore::ContentVisibility>::normalizesProgressForDiscreteInterpolation()
{
  return 0;
}

uint64_t WebCore::PropertyWrapper<WebCore::ContentVisibility>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5)
{
  uint64_t (*v8)(_QWORD *, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  double v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  uint64_t (*v25)(_QWORD *, uint64_t);

  v8 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v9 = a1[5];
  v10 = (_QWORD *)(a2 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v8 = *(uint64_t (**)(_QWORD *, uint64_t))(*v10 + v8);
  v25 = v8;
  v11 = (uint64_t (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  v14 = v11(v13);
  v15 = (uint64_t (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v17 + v15);
  v18 = v15(v17);
  v19 = *a5;
  if (v14 == 2)
    v20 = v18;
  else
    v20 = v14;
  if (v19 >= 1.0)
    v20 = v18;
  if (v19 <= 0.0)
    v20 = v14;
  if (v19 >= 0.5)
    v21 = v18;
  else
    v21 = v14;
  if (v14 == 2 || v18 == 2)
    v23 = v20;
  else
    v23 = v21;
  return v25(v10, v23);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::CursorType>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::CursorType>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::CursorType>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::EmptyCell>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 ^ v9(v11) ^ 1;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::EmptyCell>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::EmptyCell>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::FlexDirection>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::FlexDirection>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::FlexDirection>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::FlexWrap>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::FlexWrap>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::FlexWrap>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::Float>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::Float>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::Float>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _BOOL8 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  v13 = *(unsigned int *)(v8 + 12);
  if ((_DWORD)v13 != *(_DWORD *)(v12 + 12))
    return 0;
  if (!(_DWORD)v13)
    return 1;
  v15 = *(_QWORD *)v8;
  v16 = *(_QWORD *)v12;
  result = WebCore::GridTrackSize::operator==(v15, *(_QWORD *)v12);
  if (result)
  {
    v17 = v15 + 88;
    v18 = v16 + 88;
    v19 = 1;
    do
    {
      v20 = v19;
      if (v13 == v19)
        break;
      v21 = WebCore::GridTrackSize::operator==(v17, v18);
      v19 = v20 + 1;
      v17 += 88;
      v18 += 88;
    }
    while (v21);
    return v20 >= v13;
  }
  return result;
}

uint64_t WebCore::DiscretePropertyWrapper<WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::GridAutoFlow>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::GridAutoFlow>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::GridAutoFlow>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::GridPosition const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  WTF **v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  const WTF::StringImpl **v12;
  const WTF::StringImpl *v13;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (WTF **)v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = (const WTF::StringImpl **)v9(v11);
  if (*(unsigned __int8 *)v8 == *(unsigned __int8 *)v12 && *((_DWORD *)v8 + 1) == *((_DWORD *)v12 + 1))
    return WTF::equal(v8[1], v12[1], v13);
  else
    return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::GridPosition const&>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::GridPosition const&>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::Hyphens>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::Hyphens>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::Hyphens>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::ImageOrientation>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 v8;
  unsigned __int8 (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned __int8 (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned __int8 (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::ImageOrientation>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::ImageOrientation>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (unsigned __int8 (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(unsigned __int8 (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::IntSize const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (_DWORD *)v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = (_DWORD *)v9(v11);
  return *v8 == *v12 && v8[1] == v12[1];
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::IntSize const&>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::IntSize const&>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::LineBreak>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::LineBreak>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::LineBreak>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::ListStylePosition>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 ^ v9(v11) ^ 1;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::ListStylePosition>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::ListStylePosition>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::ListStyleType>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t *__return_ptr, _QWORD *);
  _QWORD *v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, _QWORD *);
  _QWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _BOOL8 v15;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  if (a2 == a3)
    return 1;
  v6 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v6 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v7 + v6);
  v6(&v19, v7);
  v9 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v10 = (_QWORD *)(a3 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v10 + v9);
  v9(&v17, v10);
  v12 = v20;
  v13 = v18;
  v15 = v19 == v17 && v20 == v18;
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, v11);
      v12 = v20;
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  v20 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v15;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::ListStyleType>::canInterpolate()
{
  return 0;
}

WTF::StringImpl *WebCore::DiscretePropertyWrapper<WebCore::ListStyleType>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t v6;
  void (*v7)(_QWORD *, uint64_t *);
  _QWORD *v8;
  void (*v10)(uint64_t *__return_ptr, _QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  uint64_t v15;
  WTF::StringImpl *v16;

  v7 = (void (*)(_QWORD *, uint64_t *))a1[4];
  v6 = a1[5];
  v8 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v7 = *(void (**)(_QWORD *, uint64_t *))(*v8 + v7);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (void (*)(uint64_t *__return_ptr, _QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(void (**)(uint64_t *__return_ptr, _QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v10(&v15, v12, a6);
  v7(v8, &v15);
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::PropertyWrapperGetter<WebCore::ObjectFit>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::ObjectFit>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::ObjectFit>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::OverflowWrap>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::OverflowWrap>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::OverflowWrap>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::Overflow>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::Overflow>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::Overflow>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::BreakBetween>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::BreakBetween>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::BreakBetween>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::BreakInside>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::BreakInside>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::BreakInside>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::PaintOrder>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::PaintOrder>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::PaintOrder>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::PointerEvents>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::PointerEvents>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::PointerEvents>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::PositionType>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::PositionType>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::PositionType>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::Resize>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::Resize>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::Resize>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::RubyPosition>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::RubyPosition>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::RubyPosition>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::TableLayoutType>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 ^ v9(v11) ^ 1;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TableLayoutType>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TableLayoutType>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::TextAlignMode>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextAlignMode>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextAlignMode>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::TextAlignLast>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextAlignLast>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextAlignLast>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WTF::OptionSet<WebCore::TextDecorationLine>>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 v8;
  unsigned __int8 (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned __int8 (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned __int8 (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WTF::OptionSet<WebCore::TextDecorationLine>>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WTF::OptionSet<WebCore::TextDecorationLine>>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (unsigned __int8 (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(unsigned __int8 (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::TextDecorationStyle>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextDecorationStyle>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextDecorationStyle>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WTF::OptionSet<WebCore::TextEmphasisPosition>>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 v8;
  unsigned __int8 (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned __int8 (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned __int8 (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WTF::OptionSet<WebCore::TextEmphasisPosition>>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WTF::OptionSet<WebCore::TextEmphasisPosition>>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (unsigned __int8 (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(unsigned __int8 (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::TextGroupAlign>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextGroupAlign>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextGroupAlign>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::TextJustify>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextJustify>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextJustify>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::TextOverflow>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 ^ v9(v11) ^ 1;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextOverflow>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextOverflow>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WTF::OptionSet<WebCore::TouchAction>>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 v8;
  unsigned __int8 (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned __int8 (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned __int8 (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WTF::OptionSet<WebCore::TouchAction>>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WTF::OptionSet<WebCore::TouchAction>>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (unsigned __int8 (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(unsigned __int8 (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WTF::OptionSet<WebCore::TextTransform>>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 v8;
  unsigned __int8 (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned __int8 (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned __int8 (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WTF::OptionSet<WebCore::TextTransform>>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WTF::OptionSet<WebCore::TextTransform>>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (unsigned __int8 (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(unsigned __int8 (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::WhiteSpaceCollapse>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::WhiteSpaceCollapse>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::WhiteSpaceCollapse>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::TextWrapMode>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 ^ v9(v11) ^ 1;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextWrapMode>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextWrapMode>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::TextWrapStyle>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextWrapStyle>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextWrapStyle>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::TransformBox>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TransformBox>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TransformBox>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::TransformStyle3D>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TransformStyle3D>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TransformStyle3D>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::WordBreak>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::WordBreak>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::WordBreak>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::OverflowAnchor>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 ^ v9(v11) ^ 1;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::OverflowAnchor>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::OverflowAnchor>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::TextSpacingTrim>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  char v8;
  unsigned __int8 (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned __int8 (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned __int8 (**)(_QWORD *))(*v11 + v9);
  return (v8 == 0) ^ (v9(v11) != 0);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextSpacingTrim>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextSpacingTrim>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (unsigned __int8 (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(unsigned __int8 (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::TextAutospace>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  char v8;
  unsigned __int8 (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned __int8 (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned __int8 (**)(_QWORD *))(*v11 + v9);
  return (v8 == 0) ^ (v9(v11) != 0);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextAutospace>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextAutospace>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (unsigned __int8 (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(unsigned __int8 (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::BoxDecorationBreak>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 ^ v9(v11) ^ 1;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::BoxDecorationBreak>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::BoxDecorationBreak>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::Isolation>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 ^ v9(v11) ^ 1;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::Isolation>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::Isolation>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::BlendMode>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::BlendMode>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::BlendMode>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::StyleColorScheme>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int16 v8;
  unsigned __int16 (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned __int16 (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned __int16 (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::StyleColorScheme>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::StyleColorScheme>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  unsigned __int16 (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (unsigned __int16 (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(unsigned __int16 (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::FontPalette const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  int v13;
  int v14;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (unsigned __int8 *)v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = (unsigned __int8 *)v9(v11);
  v13 = *v8;
  v14 = *v12;
  if (v13 == 3)
  {
    if (v14 != 3)
      return 0;
    return *((_QWORD *)v8 + 1) == *((_QWORD *)v12 + 1);
  }
  else
  {
    return v13 == v14;
  }
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::FontPalette const&>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::FontPalette const&>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::TextDecorationSkipInk>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextDecorationSkipInk>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::TextDecorationSkipInk>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::DiscreteSVGPropertyWrapper<WebCore::ColorInterpolation>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(*(_QWORD *)(a2 + 56) + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(*(_QWORD *)(a3 + 56) + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscreteSVGPropertyWrapper<WebCore::ColorInterpolation>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscreteSVGPropertyWrapper<WebCore::ColorInterpolation>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  WebCore::SVGRenderStyle *v10;
  uint64_t (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, __n128);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v22;
  WebCore::SVGRenderStyle *v23;
  WTF *v24;
  void *v25;
  uint64_t (*v26)(_QWORD *, uint64_t);
  WebCore::SVGRenderStyle *v27;

  v10 = *(WebCore::SVGRenderStyle **)(a2 + 56);
  if (*(_DWORD *)v10 != 1)
  {
    WebCore::SVGRenderStyle::copy(v10, &v27);
    v10 = v27;
    v23 = *(WebCore::SVGRenderStyle **)(a2 + 56);
    *(_QWORD *)(a2 + 56) = v27;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v23, v22);
        WTF::fastFree(v24, v25);
        v10 = *(WebCore::SVGRenderStyle **)(a2 + 56);
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
  }
  v11 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v12 = a1[5];
  v13 = (_QWORD *)((char *)v10 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *, uint64_t))(*v13 + v11);
  if (*a5 == 0.0)
    v14 = a3;
  else
    v14 = a4;
  v15 = *(_QWORD *)(v14 + 56);
  v16 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v17 = a1[3];
  v18 = (_QWORD *)(v15 + (v17 >> 1));
  v26 = v11;
  if ((v17 & 1) != 0)
    v16 = *(uint64_t (**)(_QWORD *, __n128))(*v18 + v16);
  a6.n128_f64[0] = *a5;
  v19 = v16(v18, a6);
  return v26(v13, v19);
}

BOOL WebCore::DiscreteFontDescriptionTypedWrapper<WebCore::Kerning>::propertiesInFontDescriptionAreEqual(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscreteFontDescriptionTypedWrapper<WebCore::Kerning>::setPropertiesInFontDescription(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD *, uint64_t);
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v11)(_QWORD *, uint64_t);

  v3 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v4 = a1[5];
  v5 = (_QWORD *)(a3 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, uint64_t))(*v5 + v3);
  v6 = (uint64_t (*)(_QWORD *))a1[2];
  v7 = a1[3];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  v11 = v3;
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
  v9 = v6(v8);
  return v11(v5, v9);
}

uint64_t WebCore::DiscreteSVGPropertyWrapper<WebCore::WindRule>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(*(_QWORD *)(a2 + 56) + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(*(_QWORD *)(a3 + 56) + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 ^ v9(v11) ^ 1;
}

uint64_t WebCore::DiscreteSVGPropertyWrapper<WebCore::WindRule>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscreteSVGPropertyWrapper<WebCore::WindRule>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  WebCore::SVGRenderStyle *v10;
  uint64_t (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, __n128);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v22;
  WebCore::SVGRenderStyle *v23;
  WTF *v24;
  void *v25;
  uint64_t (*v26)(_QWORD *, uint64_t);
  WebCore::SVGRenderStyle *v27;

  v10 = *(WebCore::SVGRenderStyle **)(a2 + 56);
  if (*(_DWORD *)v10 != 1)
  {
    WebCore::SVGRenderStyle::copy(v10, &v27);
    v10 = v27;
    v23 = *(WebCore::SVGRenderStyle **)(a2 + 56);
    *(_QWORD *)(a2 + 56) = v27;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v23, v22);
        WTF::fastFree(v24, v25);
        v10 = *(WebCore::SVGRenderStyle **)(a2 + 56);
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
  }
  v11 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v12 = a1[5];
  v13 = (_QWORD *)((char *)v10 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *, uint64_t))(*v13 + v11);
  if (*a5 == 0.0)
    v14 = a3;
  else
    v14 = a4;
  v15 = *(_QWORD *)(v14 + 56);
  v16 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v17 = a1[3];
  v18 = (_QWORD *)(v15 + (v17 >> 1));
  v26 = v11;
  if ((v17 & 1) != 0)
    v16 = *(uint64_t (**)(_QWORD *, __n128))(*v18 + v16);
  a6.n128_f64[0] = *a5;
  v19 = v16(v18, a6);
  return v26(v13, v19);
}

BOOL WebCore::DiscreteSVGPropertyWrapper<WebCore::DominantBaseline>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(*(_QWORD *)(a2 + 56) + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(*(_QWORD *)(a3 + 56) + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscreteSVGPropertyWrapper<WebCore::DominantBaseline>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscreteSVGPropertyWrapper<WebCore::DominantBaseline>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  WebCore::SVGRenderStyle *v10;
  uint64_t (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, __n128);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v22;
  WebCore::SVGRenderStyle *v23;
  WTF *v24;
  void *v25;
  uint64_t (*v26)(_QWORD *, uint64_t);
  WebCore::SVGRenderStyle *v27;

  v10 = *(WebCore::SVGRenderStyle **)(a2 + 56);
  if (*(_DWORD *)v10 != 1)
  {
    WebCore::SVGRenderStyle::copy(v10, &v27);
    v10 = v27;
    v23 = *(WebCore::SVGRenderStyle **)(a2 + 56);
    *(_QWORD *)(a2 + 56) = v27;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v23, v22);
        WTF::fastFree(v24, v25);
        v10 = *(WebCore::SVGRenderStyle **)(a2 + 56);
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
  }
  v11 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v12 = a1[5];
  v13 = (_QWORD *)((char *)v10 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *, uint64_t))(*v13 + v11);
  if (*a5 == 0.0)
    v14 = a3;
  else
    v14 = a4;
  v15 = *(_QWORD *)(v14 + 56);
  v16 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v17 = a1[3];
  v18 = (_QWORD *)(v15 + (v17 >> 1));
  v26 = v11;
  if ((v17 & 1) != 0)
    v16 = *(uint64_t (**)(_QWORD *, __n128))(*v18 + v16);
  a6.n128_f64[0] = *a5;
  v19 = v16(v18, a6);
  return v26(v13, v19);
}

uint64_t WebCore::DiscreteFontDescriptionTypedWrapper<WebCore::FontSynthesisLonghandValue>::propertiesInFontDescriptionAreEqual(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 ^ v9(v11) ^ 1;
}

uint64_t WebCore::DiscreteFontDescriptionTypedWrapper<WebCore::FontSynthesisLonghandValue>::setPropertiesInFontDescription(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD *, uint64_t);
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v11)(_QWORD *, uint64_t);

  v3 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v4 = a1[5];
  v5 = (_QWORD *)(a3 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, uint64_t))(*v5 + v3);
  v6 = (uint64_t (*)(_QWORD *))a1[2];
  v7 = a1[3];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  v11 = v3;
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
  v9 = v6(v8);
  return v11(v5, v9);
}

uint64_t WebCore::DiscreteFontDescriptionTypedWrapper<WebCore::FontVariantAlternates const&>::propertiesInFontDescriptionAreEqual(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  const WTF::StringImpl *v13;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  if (*(unsigned __int8 *)(v12 + 65) | *(unsigned __int8 *)(v8 + 65))
    return (*(_BYTE *)(v8 + 65) != 0) ^ (*(_BYTE *)(v12 + 65) == 0);
  else
    return WebCore::operator==(v8, v12, v13);
}

uint64_t WebCore::DiscreteFontDescriptionTypedWrapper<WebCore::FontVariantAlternates const&>::setPropertiesInFontDescription(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD *, uint64_t);
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v11)(_QWORD *, uint64_t);

  v3 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v4 = a1[5];
  v5 = (_QWORD *)(a3 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, uint64_t))(*v5 + v3);
  v6 = (uint64_t (*)(_QWORD *))a1[2];
  v7 = a1[3];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  v11 = v3;
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
  v9 = v6(v8);
  return v11(v5, v9);
}

BOOL WebCore::DiscreteFontDescriptionTypedWrapper<WebCore::FontVariantPosition>::propertiesInFontDescriptionAreEqual(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscreteFontDescriptionTypedWrapper<WebCore::FontVariantPosition>::setPropertiesInFontDescription(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD *, uint64_t);
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v11)(_QWORD *, uint64_t);

  v3 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v4 = a1[5];
  v5 = (_QWORD *)(a3 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, uint64_t))(*v5 + v3);
  v6 = (uint64_t (*)(_QWORD *))a1[2];
  v7 = a1[3];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  v11 = v3;
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
  v9 = v6(v8);
  return v11(v5, v9);
}

BOOL WebCore::DiscreteFontDescriptionTypedWrapper<WebCore::FontVariantCaps>::propertiesInFontDescriptionAreEqual(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscreteFontDescriptionTypedWrapper<WebCore::FontVariantCaps>::setPropertiesInFontDescription(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD *, uint64_t);
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v11)(_QWORD *, uint64_t);

  v3 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v4 = a1[5];
  v5 = (_QWORD *)(a3 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, uint64_t))(*v5 + v3);
  v6 = (uint64_t (*)(_QWORD *))a1[2];
  v7 = a1[3];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  v11 = v3;
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
  v9 = v6(v8);
  return v11(v5, v9);
}

BOOL WebCore::DiscreteFontDescriptionTypedWrapper<WebCore::FontVariantEmoji>::propertiesInFontDescriptionAreEqual(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscreteFontDescriptionTypedWrapper<WebCore::FontVariantEmoji>::setPropertiesInFontDescription(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD *, uint64_t);
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v11)(_QWORD *, uint64_t);

  v3 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v4 = a1[5];
  v5 = (_QWORD *)(a3 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, uint64_t))(*v5 + v3);
  v6 = (uint64_t (*)(_QWORD *))a1[2];
  v7 = a1[3];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  v11 = v3;
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
  v9 = v6(v8);
  return v11(v5, v9);
}

uint64_t WebCore::PropertyWrapperGetter<BOOL>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 ^ v9(v11) ^ 1;
}

uint64_t WebCore::DiscretePropertyWrapper<BOOL>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<BOOL>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::DiscreteFontDescriptionTypedWrapper<WebCore::TextRenderingMode>::propertiesInFontDescriptionAreEqual(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscreteFontDescriptionTypedWrapper<WebCore::TextRenderingMode>::setPropertiesInFontDescription(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD *, uint64_t);
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v11)(_QWORD *, uint64_t);

  v3 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v4 = a1[5];
  v5 = (_QWORD *)(a3 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, uint64_t))(*v5 + v3);
  v6 = (uint64_t (*)(_QWORD *))a1[2];
  v7 = a1[3];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  v11 = v3;
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
  v9 = v6(v8);
  return v11(v5, v9);
}

BOOL WebCore::DiscreteSVGPropertyWrapper<WebCore::MaskType>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(*(_QWORD *)(a2 + 56) + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(*(_QWORD *)(a3 + 56) + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscreteSVGPropertyWrapper<WebCore::MaskType>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscreteSVGPropertyWrapper<WebCore::MaskType>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  WebCore::SVGRenderStyle *v10;
  uint64_t (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, __n128);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v22;
  WebCore::SVGRenderStyle *v23;
  WTF *v24;
  void *v25;
  uint64_t (*v26)(_QWORD *, uint64_t);
  WebCore::SVGRenderStyle *v27;

  v10 = *(WebCore::SVGRenderStyle **)(a2 + 56);
  if (*(_DWORD *)v10 != 1)
  {
    WebCore::SVGRenderStyle::copy(v10, &v27);
    v10 = v27;
    v23 = *(WebCore::SVGRenderStyle **)(a2 + 56);
    *(_QWORD *)(a2 + 56) = v27;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v23, v22);
        WTF::fastFree(v24, v25);
        v10 = *(WebCore::SVGRenderStyle **)(a2 + 56);
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
  }
  v11 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v12 = a1[5];
  v13 = (_QWORD *)((char *)v10 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *, uint64_t))(*v13 + v11);
  if (*a5 == 0.0)
    v14 = a3;
  else
    v14 = a4;
  v15 = *(_QWORD *)(v14 + 56);
  v16 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v17 = a1[3];
  v18 = (_QWORD *)(v15 + (v17 >> 1));
  v26 = v11;
  if ((v17 & 1) != 0)
    v16 = *(uint64_t (**)(_QWORD *, __n128))(*v18 + v16);
  a6.n128_f64[0] = *a5;
  v19 = v16(v18, a6);
  return v26(v13, v19);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::LineCap>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::LineCap>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::LineCap>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::LineJoin>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::LineJoin>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::LineJoin>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::DiscreteSVGPropertyWrapper<WebCore::TextAnchor>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(*(_QWORD *)(a2 + 56) + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(*(_QWORD *)(a3 + 56) + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscreteSVGPropertyWrapper<WebCore::TextAnchor>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscreteSVGPropertyWrapper<WebCore::TextAnchor>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  WebCore::SVGRenderStyle *v10;
  uint64_t (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, __n128);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v22;
  WebCore::SVGRenderStyle *v23;
  WTF *v24;
  void *v25;
  uint64_t (*v26)(_QWORD *, uint64_t);
  WebCore::SVGRenderStyle *v27;

  v10 = *(WebCore::SVGRenderStyle **)(a2 + 56);
  if (*(_DWORD *)v10 != 1)
  {
    WebCore::SVGRenderStyle::copy(v10, &v27);
    v10 = v27;
    v23 = *(WebCore::SVGRenderStyle **)(a2 + 56);
    *(_QWORD *)(a2 + 56) = v27;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v23, v22);
        WTF::fastFree(v24, v25);
        v10 = *(WebCore::SVGRenderStyle **)(a2 + 56);
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
  }
  v11 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v12 = a1[5];
  v13 = (_QWORD *)((char *)v10 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *, uint64_t))(*v13 + v11);
  if (*a5 == 0.0)
    v14 = a3;
  else
    v14 = a4;
  v15 = *(_QWORD *)(v14 + 56);
  v16 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v17 = a1[3];
  v18 = (_QWORD *)(v15 + (v17 >> 1));
  v26 = v11;
  if ((v17 & 1) != 0)
    v16 = *(uint64_t (**)(_QWORD *, __n128))(*v18 + v16);
  a6.n128_f64[0] = *a5;
  v19 = v16(v18, a6);
  return v26(v13, v19);
}

BOOL WebCore::DiscreteSVGPropertyWrapper<WebCore::VectorEffect>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(*(_QWORD *)(a2 + 56) + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(*(_QWORD *)(a3 + 56) + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscreteSVGPropertyWrapper<WebCore::VectorEffect>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscreteSVGPropertyWrapper<WebCore::VectorEffect>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  WebCore::SVGRenderStyle *v10;
  uint64_t (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, __n128);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v22;
  WebCore::SVGRenderStyle *v23;
  WTF *v24;
  void *v25;
  uint64_t (*v26)(_QWORD *, uint64_t);
  WebCore::SVGRenderStyle *v27;

  v10 = *(WebCore::SVGRenderStyle **)(a2 + 56);
  if (*(_DWORD *)v10 != 1)
  {
    WebCore::SVGRenderStyle::copy(v10, &v27);
    v10 = v27;
    v23 = *(WebCore::SVGRenderStyle **)(a2 + 56);
    *(_QWORD *)(a2 + 56) = v27;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v23, v22);
        WTF::fastFree(v24, v25);
        v10 = *(WebCore::SVGRenderStyle **)(a2 + 56);
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
  }
  v11 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v12 = a1[5];
  v13 = (_QWORD *)((char *)v10 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *, uint64_t))(*v13 + v11);
  if (*a5 == 0.0)
    v14 = a3;
  else
    v14 = a4;
  v15 = *(_QWORD *)(v14 + 56);
  v16 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v17 = a1[3];
  v18 = (_QWORD *)(v15 + (v17 >> 1));
  v26 = v11;
  if ((v17 & 1) != 0)
    v16 = *(uint64_t (**)(_QWORD *, __n128))(*v18 + v16);
  a6.n128_f64[0] = *a5;
  v19 = v16(v18, a6);
  return v26(v13, v19);
}

BOOL WebCore::DiscreteSVGPropertyWrapper<WebCore::ShapeRendering>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(*(_QWORD *)(a2 + 56) + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(*(_QWORD *)(a3 + 56) + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscreteSVGPropertyWrapper<WebCore::ShapeRendering>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscreteSVGPropertyWrapper<WebCore::ShapeRendering>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  WebCore::SVGRenderStyle *v10;
  uint64_t (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, __n128);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v22;
  WebCore::SVGRenderStyle *v23;
  WTF *v24;
  void *v25;
  uint64_t (*v26)(_QWORD *, uint64_t);
  WebCore::SVGRenderStyle *v27;

  v10 = *(WebCore::SVGRenderStyle **)(a2 + 56);
  if (*(_DWORD *)v10 != 1)
  {
    WebCore::SVGRenderStyle::copy(v10, &v27);
    v10 = v27;
    v23 = *(WebCore::SVGRenderStyle **)(a2 + 56);
    *(_QWORD *)(a2 + 56) = v27;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v23, v22);
        WTF::fastFree(v24, v25);
        v10 = *(WebCore::SVGRenderStyle **)(a2 + 56);
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
  }
  v11 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v12 = a1[5];
  v13 = (_QWORD *)((char *)v10 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *, uint64_t))(*v13 + v11);
  if (*a5 == 0.0)
    v14 = a3;
  else
    v14 = a4;
  v15 = *(_QWORD *)(v14 + 56);
  v16 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v17 = a1[3];
  v18 = (_QWORD *)(v15 + (v17 >> 1));
  v26 = v11;
  if ((v17 & 1) != 0)
    v16 = *(uint64_t (**)(_QWORD *, __n128))(*v18 + v16);
  a6.n128_f64[0] = *a5;
  v19 = v16(v18, a6);
  return v26(v13, v19);
}

uint64_t WebCore::DiscreteSVGPropertyWrapper<WTF::String const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  WTF **v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  const WTF::StringImpl *v12;
  const WTF::StringImpl *v13;

  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(*(_QWORD *)(a2 + 56) + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (WTF **)v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(*(_QWORD *)(a3 + 56) + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = *(const WTF::StringImpl **)v9(v11);
  return WTF::equal(*v8, v12, v13);
}

uint64_t WebCore::DiscreteSVGPropertyWrapper<WTF::String const&>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscreteSVGPropertyWrapper<WTF::String const&>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  WebCore::SVGRenderStyle *v10;
  uint64_t (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, __n128);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v22;
  WebCore::SVGRenderStyle *v23;
  WTF *v24;
  void *v25;
  uint64_t (*v26)(_QWORD *, uint64_t);
  WebCore::SVGRenderStyle *v27;

  v10 = *(WebCore::SVGRenderStyle **)(a2 + 56);
  if (*(_DWORD *)v10 != 1)
  {
    WebCore::SVGRenderStyle::copy(v10, &v27);
    v10 = v27;
    v23 = *(WebCore::SVGRenderStyle **)(a2 + 56);
    *(_QWORD *)(a2 + 56) = v27;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v23, v22);
        WTF::fastFree(v24, v25);
        v10 = *(WebCore::SVGRenderStyle **)(a2 + 56);
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
  }
  v11 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v12 = a1[5];
  v13 = (_QWORD *)((char *)v10 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *, uint64_t))(*v13 + v11);
  if (*a5 == 0.0)
    v14 = a3;
  else
    v14 = a4;
  v15 = *(_QWORD *)(v14 + 56);
  v16 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v17 = a1[3];
  v18 = (_QWORD *)(v15 + (v17 >> 1));
  v26 = v11;
  if ((v17 & 1) != 0)
    v16 = *(uint64_t (**)(_QWORD *, __n128))(*v18 + v16);
  a6.n128_f64[0] = *a5;
  v19 = v16(v18, a6);
  return v26(v13, v19);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::ScrollbarGutter const>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unsigned __int16 v8;
  unsigned __int16 (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned __int16 (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned __int16 (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::ScrollbarGutter const>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::ScrollbarGutter const>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  unsigned __int16 (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (unsigned __int16 (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(unsigned __int16 (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WebCore::ScrollbarWidth>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 == v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::ScrollbarWidth>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::ScrollbarWidth>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

uint64_t WebCore::PropertyWrapperGetter<std::optional<WebCore::Style::ScopedName>>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(WTF::StringImpl **__return_ptr, _QWORD *);
  _QWORD *v7;
  uint64_t v8;
  void (*v9)(WTF::StringImpl **__return_ptr, _QWORD *);
  _QWORD *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  _BOOL8 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;
  char v18;
  char v19;
  char v20;
  WTF::StringImpl *v21;
  char v22;
  char v23;
  unsigned __int8 v24;

  if (a2 == a3)
    return 1;
  v6 = *(void (**)(WTF::StringImpl **__return_ptr, _QWORD *))(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v6 = *(void (**)(WTF::StringImpl **__return_ptr, _QWORD *))(*v7 + v6);
  v6(&v21, v7);
  v9 = *(void (**)(WTF::StringImpl **__return_ptr, _QWORD *))(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v10 = (_QWORD *)(a3 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(void (**)(WTF::StringImpl **__return_ptr, _QWORD *))(*v10 + v9);
  v9(&v17, v10);
  v12 = v24;
  if (v24 && v20)
  {
    v13 = v21;
    if (v21 == v17)
    {
      v14 = v22 == v18 && v23 == v19;
    }
    else
    {
      v14 = 0;
      v13 = v17;
    }
  }
  else
  {
    v14 = (v24 != 0) == (v20 != 0);
    if (!v20)
      goto LABEL_17;
    v13 = v17;
  }
  v17 = 0;
  if (!v13)
  {
LABEL_17:
    if (!v12)
      return v14;
    goto LABEL_18;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_17;
  }
  WTF::StringImpl::destroy(v13, v11);
  if (!v24)
    return v14;
LABEL_18:
  v15 = v21;
  v21 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v11);
    else
      *(_DWORD *)v15 -= 2;
  }
  return v14;
}

uint64_t WebCore::DiscretePropertyWrapper<std::optional<WebCore::Style::ScopedName>>::canInterpolate()
{
  return 0;
}

WTF::StringImpl *WebCore::DiscretePropertyWrapper<std::optional<WebCore::Style::ScopedName>>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, WTF::StringImpl **);
  _QWORD *v8;
  void (*v10)(WTF::StringImpl **__return_ptr, _QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[2];
  char v16;

  v7 = (uint64_t (*)(_QWORD *, WTF::StringImpl **))a1[4];
  v6 = a1[5];
  v8 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v7 = *(uint64_t (**)(_QWORD *, WTF::StringImpl **))(*v8 + v7);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (void (*)(WTF::StringImpl **__return_ptr, _QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(void (**)(WTF::StringImpl **__return_ptr, _QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v10(v15, v12, a6);
  result = (WTF::StringImpl *)v7(v8, v15);
  if (v16)
  {
    result = v15[0];
    v15[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::PropertyWrapperGetter<WebCore::FieldSizing>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(unsigned int (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(unsigned int (**)(_QWORD *))(*v11 + v9);
  return v8 ^ v9(v11) ^ 1;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::FieldSizing>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WebCore::FieldSizing>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  v12 = v9(v11);
  v13 = *(unsigned int *)(v8 + 12);
  return (_DWORD)v13 == *(_DWORD *)(v12 + 12) && memcmp(*(const void **)v8, *(const void **)v12, 8 * v13) == 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

BOOL WebCore::PropertyWrapperGetter<WTF::AtomString const&>::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;

  if (a2 == a3)
    return 1;
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  v8 = (_QWORD *)v5(v7);
  v9 = *(uint64_t (**)(_QWORD *))(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a3 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
  return *v8 == *(_QWORD *)v9(v11);
}

uint64_t WebCore::DiscretePropertyWrapper<WTF::AtomString const&>::canInterpolate()
{
  return 0;
}

uint64_t WebCore::DiscretePropertyWrapper<WTF::AtomString const&>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, __n128 a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *, __n128);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *, uint64_t);

  v6 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v6);
  if (*a5 == 0.0)
    a4 = a3;
  v10 = (uint64_t (*)(_QWORD *, __n128))a1[2];
  v11 = a1[3];
  v12 = (_QWORD *)(a4 + (v11 >> 1));
  v15 = v6;
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, __n128))(*v12 + v10);
  a6.n128_f64[0] = *a5;
  v13 = v10(v12, a6);
  return v15(v8, v13);
}

unint64_t WTF::Vector<std::unique_ptr<WebCore::AnimationPropertyWrapperBase>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::ShorthandPropertyWrapper>>(uint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v2 = dword_1ECE822C8 + ((unint64_t)dword_1ECE822C8 >> 2);
  if (v2 >= 0x10)
    v3 = v2 + 1;
  else
    v3 = 16;
  if (v3 <= (unint64_t)dword_1ECE822CC + 1)
    v4 = dword_1ECE822CC + 1;
  else
    v4 = v3;
  result = WTF::Vector<std::unique_ptr<WebCore::AnimationPropertyWrapperBase>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v4);
  v6 = dword_1ECE822CC;
  v7 = dword_1ECE822CC + 1;
  v8 = qword_1ECE822C0;
  v9 = *a1;
  *a1 = 0;
  *(_QWORD *)(v8 + 8 * v6) = v9;
  dword_1ECE822CC = v7;
  return result;
}

unsigned __int16 *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyAnimation::blendProperty(WebCore::CSSPropertyBlendingClient const&,std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle &,WebCore::RenderStyle const&,WebCore::RenderStyle const&,double,WebCore::CompositeOperation,WebCore::IterationCompositeOperation,double)::$_0,WebCore::CSSPropertyAnimation::blendProperty(WebCore::CSSPropertyBlendingClient const&,std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle &,WebCore::RenderStyle const&,WebCore::RenderStyle const&,double,WebCore::CompositeOperation,WebCore::IterationCompositeOperation,double)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(unsigned __int16 *result, unsigned __int16 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  double v16;
  double v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  char v25;

  v2 = *a2;
  v4 = **(_QWORD **)result;
  v3 = *(_QWORD *)(*(_QWORD *)result + 8);
  v5 = *(_QWORD *)(*(_QWORD *)result + 16);
  v6 = *(_QWORD *)(*(_QWORD *)result + 24);
  v7 = **(double **)(*(_QWORD *)result + 32);
  v8 = **(unsigned __int8 **)(*(_QWORD *)result + 40);
  v9 = **(_BYTE **)(*(_QWORD *)result + 48);
  v10 = **(_QWORD **)(*(_QWORD *)result + 56);
  if ((byte_1ECE821B8 & 1) == 0)
  {
    result = WebCore::CSSPropertyAnimationWrapperMap::CSSPropertyAnimationWrapperMap((WebCore::CSSPropertyAnimationWrapperMap *)result);
    byte_1ECE821B8 = 1;
  }
  if ((v2 - 554) >= 0xFFFFFDD8)
  {
    v11 = *(unsigned __int16 *)&_MergedGlobals_154[2 * v2 + 284];
    if (v11 != 0xFFFF)
    {
      if (dword_1ECE822CC <= v11)
      {
        __break(0xC471u);
      }
      else
      {
        v12 = *(_QWORD *)(qword_1ECE822C0 + 8 * *(unsigned __int16 *)&_MergedGlobals_154[2 * v2 + 284]);
        if (v12)
        {
          v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, v5, v6, v8);
          v14 = v13 ^ 1;
          v17 = v7;
          v18 = v13 ^ 1;
          v19 = v8;
          v20 = v9;
          v21 = v10;
          v22 = v4;
          v23 = v2;
          v24 = 0;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 56))(v12))
            v15 = v14 == 0;
          else
            v15 = 1;
          if (!v15)
          {
            v16 = 0.0;
            if (v7 >= 0.5)
              v16 = 1.0;
            v17 = v16;
            v19 = 0;
          }
          result = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double *))(*(_QWORD *)v12 + 64))(v12, v3, v5, v6, &v17);
          if (v24 != -1)
            return (unsigned __int16 *)((uint64_t (*)(char *, __int16 *))off_1E338E948[v24])(&v25, &v23);
        }
      }
    }
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyAnimation::blendProperty(WebCore::CSSPropertyBlendingClient const&,std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle &,WebCore::RenderStyle const&,WebCore::RenderStyle const&,double,WebCore::CompositeOperation,WebCore::IterationCompositeOperation,double)::$_0,WebCore::CSSPropertyAnimation::blendProperty(WebCore::CSSPropertyBlendingClient const&,std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle &,WebCore::RenderStyle const&,WebCore::RenderStyle const&,double,WebCore::CompositeOperation,WebCore::IterationCompositeOperation,double)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t (***v5)(_QWORD);
  uint64_t v6;
  _QWORD *v7;
  double v8;
  char v9;
  char v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  unsigned int i;
  uint64_t v19;
  WTF::StringImpl *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  int v26;
  unsigned int j;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  int v34;
  unsigned int k;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  int v43;
  unsigned int m;
  uint64_t v45;
  WTF::StringImpl *v46;
  int v48;
  _DWORD *result;
  void *v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v55;
  int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _BOOL4 v63;
  _BOOL4 v64;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unsigned int *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int n;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unsigned int ii;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v97;
  uint64_t v98;
  _DWORD *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  void *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  WTF *v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _DWORD *v115;
  WTF *v116;
  WTF *v117;
  uint64_t v118;
  char v119;
  _DWORD *v120;
  WTF *v121;
  WTF::StringImpl *v122;
  WTF *v123;
  uint64_t v124;
  _DWORD *v125;
  WTF *v126;
  uint64_t v127;
  _DWORD *v128;
  _BOOL4 v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  double v133;
  char v134;
  char v135;
  char v136;
  uint64_t v137;
  uint64_t (***v138)(_QWORD);
  WTF::StringImpl *v139;
  int v140;
  WTF *v141;
  int v142;
  unsigned int v143;
  unsigned int v144;
  char v145;
  WTF *v146;
  int v147;
  unsigned int v148;
  WTF *v149;
  unint64_t v150;
  _BYTE v151[40];
  int v152;
  char v153;

  v5 = *(uint64_t (****)(_QWORD))(*(_QWORD *)a1 + 64);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v7 = *(_QWORD **)(*(_QWORD *)a1 + 80);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v8 = **(double **)(*(_QWORD *)a1 + 96);
  v9 = **(_BYTE **)(*(_QWORD *)a1 + 104);
  v10 = **(_BYTE **)(*(_QWORD *)a1 + 112);
  v11 = **(_QWORD **)(*(_QWORD *)a1 + 120);
  v12 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
  {
    v13 = *(_DWORD *)v12;
    v133 = v8;
    v134 = 0;
    v135 = v9;
    v136 = v10;
    v137 = v11;
    v138 = v5;
    *(_DWORD *)v12 = v13 + 4;
    v139 = v12;
    v140 = 1;
    if (v13 == -2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 = v13 + 2;
  }
  else
  {
    v133 = v8;
    v134 = 0;
    v135 = v9;
    v136 = v10;
    v137 = v11;
    v138 = v5;
    v139 = 0;
    v140 = 1;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v7[1] + 40) + 288);
  if (v14)
  {
    v15 = *(WTF::StringImpl **)a2;
    do
    {
      v16 = *(_QWORD *)(v14 + 16);
      if (v16)
      {
        v17 = 0;
        for (i = *((_DWORD *)v15 + 4) >> 8; ; i = v17 + v19)
        {
          v19 = i & *(_DWORD *)(v16 - 8);
          v20 = *(WTF::StringImpl **)(v16 + 16 * v19);
          if (!v20)
            break;
          v21 = v20 != (WTF::StringImpl *)-1 && v20 == v15;
          if (v21)
          {
            v22 = *(_QWORD *)(v16 + 16 * v19 + 8);
            if (v22)
              goto LABEL_29;
            break;
          }
          ++v17;
        }
      }
      v14 = *(_QWORD *)(v14 + 8);
    }
    while (v14);
  }
  v23 = *(_QWORD *)(v7[3] + 216);
  if (v23)
  {
    v24 = *(WTF::StringImpl **)a2;
    do
    {
      v25 = *(_QWORD *)(v23 + 16);
      if (v25)
      {
        v26 = 0;
        for (j = *((_DWORD *)v24 + 4) >> 8; ; j = v26 + v28)
        {
          v28 = j & *(_DWORD *)(v25 - 8);
          v29 = *(WTF::StringImpl **)(v25 + 16 * v28);
          if (!v29)
            break;
          if (v29 != (WTF::StringImpl *)-1 && v29 == v24)
          {
            v22 = *(_QWORD *)(v25 + 16 * v28 + 8);
            if (v22)
              goto LABEL_29;
            break;
          }
          ++v26;
        }
      }
      v23 = *(_QWORD *)(v23 + 8);
    }
    while (v23);
  }
  v22 = 0;
LABEL_29:
  v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 40) + 288);
  if (v31)
  {
    v32 = *(WTF::StringImpl **)a2;
    while (1)
    {
      v33 = *(_QWORD *)(v31 + 16);
      if (v33)
      {
        v34 = 0;
        for (k = *((_DWORD *)v32 + 4) >> 8; ; k = v34 + v36)
        {
          v36 = k & *(_DWORD *)(v33 - 8);
          v37 = *(WTF::StringImpl **)(v33 + 16 * v36);
          if (!v37)
            goto LABEL_40;
          if (v37 != (WTF::StringImpl *)-1 && v37 == v32)
            break;
          ++v34;
        }
        v39 = *(_QWORD *)(v33 + 16 * v36 + 8);
        if (v39)
          break;
      }
LABEL_40:
      v31 = *(_QWORD *)(v31 + 8);
      if (!v31)
        goto LABEL_41;
    }
  }
  else
  {
LABEL_41:
    v40 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 216);
    if (!v40)
    {
LABEL_53:
      v48 = 1;
      return (_DWORD *)((uint64_t (*)(_BYTE *, WTF::StringImpl **))off_1E338E948[v48])(v151, &v139);
    }
    v41 = *(WTF::StringImpl **)a2;
    while (1)
    {
      v42 = *(_QWORD *)(v40 + 16);
      if (v42)
      {
        v43 = 0;
        for (m = *((_DWORD *)v41 + 4) >> 8; ; m = v43 + v45)
        {
          v45 = m & *(_DWORD *)(v42 - 8);
          v46 = *(WTF::StringImpl **)(v42 + 16 * v45);
          if (!v46)
            goto LABEL_52;
          if (v46 != (WTF::StringImpl *)-1 && v46 == v41)
            break;
          ++v43;
        }
        v39 = *(_QWORD *)(v42 + 16 * v45 + 8);
        if (v39)
          break;
      }
LABEL_52:
      v40 = *(_QWORD *)(v40 + 8);
      if (!v40)
        goto LABEL_53;
    }
  }
  if (!v22)
    goto LABEL_53;
  v51 = *(_QWORD *)(*(_QWORD *)((**v5)(v5) + 1328) + 296);
  v53 = *(_QWORD *)(v51 + 8);
  if (!v53)
    goto LABEL_58;
  v88 = 0;
  for (n = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; n = ++v88 + v90)
  {
    v90 = n & *(_DWORD *)(v53 - 8);
    v91 = *(_QWORD *)(v53 + 16 * v90);
    if (v91 != -1)
    {
      if (!v91)
        goto LABEL_58;
      if (v91 == *(_QWORD *)a2)
        break;
    }
  }
  v96 = *(_QWORD *)(v53 + 16 * v90 + 8);
  if (!v96)
  {
LABEL_58:
    v54 = *(_QWORD *)(v51 + 16);
    if (!v54)
      goto LABEL_59;
    v92 = 0;
    for (ii = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; ii = ++v92 + v94)
    {
      v94 = ii & *(_DWORD *)(v54 - 8);
      v95 = *(_QWORD *)(v54 + 16 * v94);
      if (v95 != -1)
      {
        if (!v95)
          goto LABEL_59;
        if (v95 == *(_QWORD *)a2)
          break;
      }
    }
    v96 = *(_QWORD *)(v54 + 16 * v94 + 8);
    if (!v96)
    {
LABEL_59:
      v55 = 1;
      goto LABEL_60;
    }
  }
  v55 = *(_BYTE *)(v96 + 24) != 0;
LABEL_60:
  v56 = *(_DWORD *)(v22 + 72);
  if (v56 == 3)
  {
    if (*(_DWORD *)(v39 + 72) != 3)
      goto LABEL_188;
    WebCore::blendSyntaxValues((uint64_t)v151, v7[4], v6, (unsigned __int8 *)(v22 + 24), (_QWORD *)(v39 + 24), (uint64_t)&v133, v52);
    if (v153)
    {
      WebCore::CSSCustomPropertyValue::createForSyntaxValue((_DWORD **)(v22 + 8), (uint64_t)v151, (uint64_t *)&v141);
      if (v153 && v152 != -1)
        ((void (*)(WTF **, _BYTE *))off_1E3391208[v152])(&v149, v151);
      goto LABEL_192;
    }
    v56 = *(_DWORD *)(v22 + 72);
  }
  if (v56 != 4 || *(_DWORD *)(v39 + 72) != 4)
    goto LABEL_188;
  v57 = *(_DWORD *)(v22 + 36);
  v58 = *(_DWORD *)(v39 + 36);
  v59 = *(_QWORD *)(v22 + 24);
  v60 = *(_QWORD *)(v39 + 24);
  if (v57 && v58)
  {
    LODWORD(v61) = *(_DWORD *)(v59 + 40);
    v62 = *(_DWORD *)(v60 + 40);
    v63 = v62 == v61;
    v21 = v62 == -1;
    v64 = v62 == -1;
    if (v21)
      v63 = 0;
    if ((_DWORD)v61 != -1)
      v64 = v63;
    if (!v64)
      goto LABEL_188;
LABEL_79:
    v151[0] = 0;
    v152 = -1;
    if ((_DWORD)v61 != -1)
    {
      (*(&off_1E33912A0 + v61))((int)&v141, (WebCore::Length *)v151);
      goto LABEL_81;
    }
LABEL_94:
    v153 = 1;
    goto LABEL_95;
  }
  if (v57)
  {
    LODWORD(v61) = *(_DWORD *)(v59 + 40);
    goto LABEL_79;
  }
  v151[0] = 0;
  if (!v58)
  {
LABEL_188:
    if (v133 >= 0.5)
      v121 = (WTF *)v39;
    else
      v121 = (WTF *)v22;
    *(_DWORD *)v121 += 2;
    v141 = v121;
    goto LABEL_192;
  }
  v152 = -1;
  v61 = *(unsigned int *)(v60 + 40);
  if ((_DWORD)v61 == -1)
    goto LABEL_94;
  ((void (*)(WTF **, _BYTE *, uint64_t))*(&off_1E33912A0 + v61))(&v141, v151, v60);
LABEL_81:
  v152 = v61;
  v153 = 1;
  if ((_DWORD)v61 != 6)
  {
    v57 = *(_DWORD *)(v22 + 36);
    v58 = *(_DWORD *)(v39 + 36);
LABEL_95:
    if (v57 != v58)
    {
      v78 = 0;
      v84 = 0;
      goto LABEL_180;
    }
    v129 = v55;
    v149 = 0;
    v150 = 0;
    if (!v58)
    {
LABEL_119:
      HIDWORD(v132) = 0;
      v78 = 0;
LABEL_120:
      LOBYTE(v132) = *(_BYTE *)(v22 + 40);
      v84 = 1;
LABEL_122:
      v131 = v58;
      v85 = (unsigned int *)v149;
      if (HIDWORD(v150))
      {
        v86 = 48 * HIDWORD(v150);
        do
        {
          v87 = v85[10];
          if ((_DWORD)v87 != -1)
            ((void (*)(WTF **, unsigned int *))off_1E3391208[v87])(&v141, v85);
          v85[10] = -1;
          v85 += 12;
          v86 -= 48;
        }
        while (v86);
        v85 = (unsigned int *)v149;
      }
      v55 = v129;
      if (v85)
      {
        v149 = 0;
        LODWORD(v150) = 0;
        WTF::fastFree((WTF *)v85, v50);
      }
      v2 = v131;
      goto LABEL_179;
    }
    v72 = 0;
    v73 = 0;
    while (1)
    {
      if (v73 >= *(unsigned int *)(v39 + 36))
        goto LABEL_216;
      WebCore::blendSyntaxValues((uint64_t)&v141, v7[4], v6, (unsigned __int8 *)(*(_QWORD *)(v22 + 24) + v72), (_QWORD *)(*(_QWORD *)(v39 + 24) + v72), (uint64_t)&v133, v52);
      if (!v145)
      {
        v78 = 0;
        v84 = 0;
        HIDWORD(v132) = 0;
        goto LABEL_122;
      }
      if (HIDWORD(v150) == (_DWORD)v150)
      {
        v74 = WTF::Vector<std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v149, HIDWORD(v150) + 1, (unint64_t)&v141);
        v75 = (char *)v149 + 48 * HIDWORD(v150);
        *v75 = 0;
        *((_DWORD *)v75 + 10) = -1;
        v76 = *(unsigned int *)(v74 + 40);
        if ((_DWORD)v76 == -1)
          goto LABEL_106;
        ((void (*)(WTF **, char *, unint64_t))*(&off_1E33912A0 + v76))(&v146, v75, v74);
      }
      else
      {
        v75 = (char *)v149 + 48 * HIDWORD(v150);
        *v75 = 0;
        *((_DWORD *)v75 + 10) = -1;
        LODWORD(v76) = v144;
        if (v144 == -1)
          goto LABEL_106;
        ((void (*)(WTF **, char *, WTF **))*(&off_1E33912A0 + v144))(&v146, v75, &v141);
      }
      *((_DWORD *)v75 + 10) = v76;
LABEL_106:
      ++HIDWORD(v150);
      if (v145 && v144 != -1)
        ((void (*)(WTF **, WTF **))off_1E3391208[v144])(&v146, &v141);
      ++v73;
      v72 += 48;
      if (v73 >= *(unsigned int *)(v22 + 36))
      {
        v58 = HIDWORD(v150);
        if (!HIDWORD(v150))
          goto LABEL_119;
        if (HIDWORD(v150) >= 0x5555556)
        {
LABEL_216:
          __break(0xC471u);
          JUMPOUT(0x195667D2CLL);
        }
        HIDWORD(v132) = HIDWORD(v150);
        v77 = 48 * HIDWORD(v150);
        v78 = WTF::fastMalloc((WTF *)(48 * HIDWORD(v150)));
        v58 = (v77 & 0xFFFFFFF0) / 0x30;
        if (HIDWORD(v150))
        {
          v130 = (v77 & 0xFFFFFFF0) / 0x30;
          v79 = 0;
          v80 = v149;
          v81 = 48 * HIDWORD(v150);
          do
          {
            v82 = v78 + v79;
            *(_BYTE *)v82 = 0;
            *(_DWORD *)(v82 + 40) = -1;
            v83 = *(unsigned int *)((char *)v80 + v79 + 40);
            if ((_DWORD)v83 != -1)
            {
              (*(&off_1E33912A0 + v83))((int)&v141, (WebCore::Length *)(v78 + v79));
              *(_DWORD *)(v82 + 40) = v83;
            }
            v79 += 48;
          }
          while (v81 != v79);
          v58 = v130;
        }
        goto LABEL_120;
      }
    }
  }
  v65 = *(unsigned int *)(v22 + 36);
  if ((_DWORD)v65)
  {
    if (v65 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195667D34);
    }
    v66 = (WTF *)WTF::fastMalloc((WTF *)(8 * v65));
    v67 = *(unsigned int *)(v22 + 36);
    if ((_DWORD)v67)
    {
      v68 = *(_DWORD **)(v22 + 24);
      if (v68[10] != 6)
        goto LABEL_154;
      v69 = 0;
      while (1)
      {
        v70 = *(_QWORD *)v68;
        *(_DWORD *)(v70 + 8) = *(_DWORD *)(*(_QWORD *)v68 + 8) + 1;
        *(_QWORD *)((char *)v66 + v69) = v70;
        if (8 * v67 - 8 == v69)
          break;
        v71 = v68[22];
        v68 += 12;
        v69 += 8;
        if (v71 != 6)
          goto LABEL_154;
      }
    }
  }
  else
  {
    v66 = 0;
    LODWORD(v67) = 0;
  }
  v141 = v66;
  v142 = v65;
  v143 = v67;
  v65 = *(unsigned int *)(v39 + 36);
  if (!(_DWORD)v65)
  {
LABEL_155:
    v97 = 0;
    LODWORD(v98) = 0;
    goto LABEL_156;
  }
  if (v65 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x195667D3CLL);
  }
  v97 = (WTF *)WTF::fastMalloc((WTF *)(8 * v65));
  v98 = *(unsigned int *)(v39 + 36);
  if (!(_DWORD)v98)
    goto LABEL_156;
  v99 = *(_DWORD **)(v39 + 24);
  if (v99[10] != 6)
  {
LABEL_154:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_155;
  }
  v100 = 0;
  while (1)
  {
    v101 = *(_QWORD *)v99;
    *(_DWORD *)(v101 + 8) = *(_DWORD *)(*(_QWORD *)v99 + 8) + 1;
    *(_QWORD *)((char *)v97 + v100) = v101;
    if (8 * v98 - 8 == v100)
      break;
    v102 = v99[22];
    v99 += 12;
    v100 += 8;
    if (v102 != 6)
      goto LABEL_154;
  }
LABEL_156:
  v149 = v97;
  v150 = __PAIR64__(v98, v65);
  WebCore::blendFunc((uint64_t)&v146, (uint64_t)&v141, (uint64_t)&v149, (uint64_t)&v133);
  if (v148)
  {
    if (v148 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x195667D44);
    }
    v104 = 48 * v148;
    v105 = WTF::fastMalloc((WTF *)(48 * v148));
    v78 = v105;
    v2 = (v104 & 0xFFFFFFF0) / 0x30;
    v106 = v148;
    v107 = v146;
    if (v148)
    {
      v108 = v2;
      v109 = 0;
      v110 = 0;
      v111 = 48 * v148;
      do
      {
        v112 = *((_QWORD *)v107 + v110);
        ++*(_DWORD *)(v112 + 8);
        v113 = v105 + v109;
        *(_QWORD *)v113 = v112;
        *(_DWORD *)(v113 + 40) = 6;
        ++v110;
        v109 += 48;
      }
      while (v111 != v109);
      LOBYTE(v132) = *(_BYTE *)(v22 + 40);
      v114 = 8 * v106;
      do
      {
        v115 = *(_DWORD **)v107;
        *(_QWORD *)v107 = 0;
        if (v115)
        {
          if (v115[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v115 + 8))(v115);
          else
            --v115[2];
        }
        v107 = (WTF *)((char *)v107 + 8);
        v114 -= 8;
      }
      while (v114);
      v107 = v146;
      HIDWORD(v132) = v110;
      v2 = v108;
      goto LABEL_170;
    }
  }
  else
  {
    v2 = 0;
    v78 = 0;
    v107 = v146;
  }
  v132 = *(unsigned __int8 *)(v22 + 40);
LABEL_170:
  if (v107)
  {
    v146 = 0;
    v147 = 0;
    WTF::fastFree(v107, v103);
  }
  if (HIDWORD(v150))
  {
    v123 = v149;
    v124 = 8 * HIDWORD(v150);
    do
    {
      v125 = *(_DWORD **)v123;
      *(_QWORD *)v123 = 0;
      if (v125)
      {
        if (v125[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v125 + 8))(v125);
        else
          --v125[2];
      }
      v123 = (WTF *)((char *)v123 + 8);
      v124 -= 8;
    }
    while (v124);
  }
  v116 = v149;
  if (v149)
  {
    v149 = 0;
    LODWORD(v150) = 0;
    WTF::fastFree(v116, v103);
  }
  if (v143)
  {
    v126 = v141;
    v127 = 8 * v143;
    do
    {
      v128 = *(_DWORD **)v126;
      *(_QWORD *)v126 = 0;
      if (v128)
      {
        if (v128[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v128 + 8))(v128);
        else
          --v128[2];
      }
      v126 = (WTF *)((char *)v126 + 8);
      v127 -= 8;
    }
    while (v127);
  }
  v117 = v141;
  if (v141)
  {
    v141 = 0;
    v142 = 0;
    WTF::fastFree(v117, v103);
  }
  v84 = 1;
LABEL_179:
  LODWORD(v61) = HIDWORD(v132);
  LOBYTE(v5) = v132;
LABEL_180:
  if (v153)
  {
    if (v152 != -1)
      ((void (*)(WTF **, _BYTE *))off_1E3391208[v152])(&v141, v151);
    v152 = -1;
  }
  if (!v84)
    goto LABEL_188;
  v118 = WTF::fastCompactMalloc((WTF *)0x60);
  *(_DWORD *)v118 = 2;
  v119 = *(_BYTE *)(v118 + 6);
  *(_WORD *)(v118 + 4) = -6144;
  *(_BYTE *)(v118 + 6) = v119 & 0xFC;
  v120 = *(_DWORD **)(v22 + 8);
  if (v120)
    *v120 += 2;
  *(_QWORD *)(v118 + 8) = v120;
  *(_QWORD *)(v118 + 24) = v78;
  *(_DWORD *)(v118 + 32) = v2;
  *(_DWORD *)(v118 + 36) = v61;
  *(_BYTE *)(v118 + 40) = (_BYTE)v5;
  *(_DWORD *)(v118 + 72) = 4;
  *(_QWORD *)(v118 + 80) = 0;
  *(_QWORD *)(v118 + 88) = 0;
  v141 = (WTF *)v118;
LABEL_192:
  WebCore::RenderStyle::setCustomPropertyValue(v4, (WTF::StringImpl *)&v141, v55);
  result = v141;
  v141 = 0;
  if (result)
  {
    if (*result == 2)
      result = (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v122);
    else
      *result -= 2;
  }
  v48 = v140;
  if (v140 != -1)
    return (_DWORD *)((uint64_t (*)(_BYTE *, WTF::StringImpl **))off_1E338E948[v48])(v151, &v139);
  return result;
}

void WebCore::blendSyntaxValues(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, _QWORD *a5, uint64_t a6, __n128 a7)
{
  int v10;
  char v11;
  unsigned int v12;
  char v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  double v32;
  double v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t **v45;

  switch(*((_DWORD *)a4 + 10))
  {
    case 0:
      if (*((_DWORD *)a5 + 10))
        goto LABEL_22;
      WebCore::blend(a4, (unsigned __int8 *)a5, a6, (uint64_t)&v41, a7);
      v10 = BYTE4(v41);
      v11 = BYTE5(v41);
      v12 = BYTE4(v41) - 2;
      if (v12 >= 9)
      {
        if (BYTE4(v41) == 11)
        {
          v14 = (int)v41;
          *(_BYTE *)(a1 + 6) = 0;
          *(_BYTE *)(a1 + 4) = 11;
          *(_BYTE *)(a1 + 5) = v11;
          goto LABEL_7;
        }
        v13 = 0;
        v14 = 0;
      }
      else
      {
        v13 = BYTE6(v41);
        v14 = (int)v41;
      }
      *(_DWORD *)a1 = 0;
      *(_BYTE *)(a1 + 6) = 0;
      *(_BYTE *)(a1 + 4) = v10;
      *(_BYTE *)(a1 + 5) = v11;
      if (v12 >= 9)
      {
        if (v10 != 11)
          goto LABEL_8;
      }
      else
      {
        *(_BYTE *)(a1 + 6) = v13;
      }
LABEL_7:
      *(_DWORD *)a1 = v14;
LABEL_8:
      *(_DWORD *)(a1 + 40) = 0;
      goto LABEL_21;
    case 1:
      if (*((_DWORD *)a5 + 10) != 1)
        goto LABEL_22;
      v17 = a4[8];
      if ((_DWORD)v17 != *((unsigned __int8 *)a5 + 8))
        goto LABEL_22;
      v18 = *(double *)a4;
      v19 = *(double *)a5;
      if (*(_BYTE *)(a6 + 10) == 1)
      {
        v32 = *(double *)(a6 + 16);
        if (v32 != 0.0)
        {
          v33 = v19 * v32;
          v18 = v18 + v33;
          v19 = v19 + v33;
        }
      }
      v20 = v18 + v18;
      if (!*(_BYTE *)(a6 + 9))
        v20 = v18;
      *(double *)a1 = v20 + (v19 - v18) * *(double *)a6;
      *(_QWORD *)(a1 + 8) = v17;
      *(_DWORD *)(a1 + 40) = 1;
      goto LABEL_21;
    case 2:
      if (*((_DWORD *)a5 + 10) != 2)
        goto LABEL_22;
      v16 = *((unsigned int *)a4 + 2);
      if ((_DWORD)v16 == 1)
      {
        if (*((_DWORD *)a5 + 2) == 1)
        {
LABEL_22:
          *(_BYTE *)a1 = 0;
          *(_BYTE *)(a1 + 48) = 0;
          return;
        }
        v40 = a2 + 328;
        v41 = &v40;
        v42 = &v40;
        v43 = &v40;
        v44 = &v40;
      }
      else
      {
        v40 = a2 + 328;
        v41 = &v40;
        v42 = &v40;
        v43 = &v40;
        v44 = &v40;
        if ((_DWORD)v16 == -1)
        {
LABEL_41:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_42:
          v34 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            atomic_store(1u, v34);
            WTF::fastFree((WTF *)v34, v26);
          }
          goto LABEL_29;
        }
      }
      v45 = &v41;
      ((void (*)(unint64_t *__return_ptr, uint64_t ***, unsigned __int8 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v16])(&v38, &v45, a4);
      v40 = *(_QWORD *)(a3 + 32) + 328;
      v41 = &v40;
      v42 = &v40;
      v43 = &v40;
      v44 = &v40;
      v21 = *((unsigned int *)a5 + 2);
      if ((_DWORD)v21 == -1)
        goto LABEL_41;
      v45 = &v41;
      ((void (*)(uint64_t *__return_ptr, uint64_t ***, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v21])(&v37, &v45, a5);
      WebCore::blend(&v38, (uint64_t)&v37, a6, &v39, v22, v23, v24, v25);
      v27 = v39;
      if (v39)
        v39 = 0;
      *(_QWORD *)a1 = v27;
      *(_DWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 40) = 2;
      *(_BYTE *)(a1 + 48) = 1;
      v28 = v37;
      if ((v37 & 0x8000000000000) != 0)
        goto LABEL_42;
LABEL_29:
      if ((v38 & 0x8000000000000) != 0)
      {
        v29 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFLL);
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          atomic_store(1u, v29);
          WTF::fastFree((WTF *)v29, v26);
        }
      }
      return;
    case 6:
      if (*((_DWORD *)a5 + 10) != 6)
        goto LABEL_22;
      (*(void (**)(uint64_t **__return_ptr, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)*a5 + 64))(&v41, *a5, *(_QWORD *)a4, a6, 0);
      *(_QWORD *)a1 = v41;
      *(_DWORD *)(a1 + 40) = 6;
LABEL_21:
      *(_BYTE *)(a1 + 48) = 1;
      return;
    default:
      goto LABEL_22;
  }
}

uint64_t WebCore::CSSCustomPropertyValue::createForSyntaxValue@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  uint64_t result;
  int v11;
  char v12;
  _BYTE v13[40];
  int v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = WTF::fastCompactMalloc((WTF *)0x60);
  v13[0] = 0;
  v14 = -1;
  v7 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_1E3391240[v7])(&v12, v13, a2);
    v14 = v7;
  }
  v15 = 3;
  *(_DWORD *)v6 = 2;
  v8 = (*(unsigned __int8 *)(v6 + 6) << 16) & 0xFC0000;
  *(_WORD *)(v6 + 4) = -6144;
  *(_BYTE *)(v6 + 6) = BYTE2(v8);
  v9 = *a1;
  if (*a1)
    *v9 += 2;
  *(_BYTE *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 8) = v9;
  *(_DWORD *)(v6 + 72) = -1;
  *(_DWORD *)(v6 + 64) = -1;
  if ((_DWORD)v7 == -1)
  {
    v11 = 3;
    *(_DWORD *)(v6 + 72) = 3;
    *(_QWORD *)(v6 + 80) = 0;
    *(_QWORD *)(v6 + 88) = 0;
    *a3 = v6;
    return ((uint64_t (*)(char *, _BYTE *))off_1E3391278[v11])(&v12, v13);
  }
  result = ((uint64_t (*)(char *))off_1E3391240[v7])(&v12);
  *(_DWORD *)(v6 + 64) = v7;
  v11 = v15;
  *(_DWORD *)(v6 + 72) = 3;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *a3 = v6;
  if (v11 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E3391278[v11])(&v12, v13);
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJS9_SB_SC_SK_SL_SM_SN_EEEEEEDcSR_DpT0_(uint64_t a1, unsigned int *a2)
{
  int *result;

  if (*((_BYTE *)a2 + 4) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJS9_SB_SC_SK_SL_SM_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJS9_SB_SC_SK_SL_SM_SN_EEEEEEDcSR_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJS9_SB_SC_SK_SL_SM_SN_EEEEEEDcSR_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJS9_SB_SC_SK_SL_SM_SN_EEEEEEDcSR_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJS9_SB_SC_SK_SL_SM_SN_EEEEEEDcSR_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JRNS0_6__baseILSS_1EJS9_SB_SC_SK_SL_SM_SN_EEEOS13_EEEDcSV_DpT0_(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v3;
  int v4;
  int v5;

  *(_DWORD *)a2 = 0;
  *(_WORD *)(a2 + 5) = 0;
  v3 = *((unsigned __int8 *)a3 + 4);
  *(_BYTE *)(a2 + 4) = v3;
  *(_BYTE *)(a2 + 5) = *((_BYTE *)a3 + 5);
  if (v3 - 2 >= 9)
  {
    if (v3 > 0xD)
      goto LABEL_4;
    if (((1 << v3) & 0x3003) != 0)
    {
      *(_DWORD *)a2 = 0;
      goto LABEL_4;
    }
    if (v3 != 11)
      goto LABEL_4;
    v5 = *a3;
    *a3 = 0;
    goto LABEL_6;
  }
  v4 = *((unsigned __int8 *)a3 + 6);
  *(_BYTE *)(a2 + 6) = v4;
  if (!v4)
  {
    v5 = *a3;
LABEL_6:
    *(_DWORD *)a2 = v5;
    goto LABEL_4;
  }
  *(_DWORD *)a2 = *a3;
LABEL_4:
  *((_BYTE *)a3 + 4) = 0;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JRNS0_6__baseILSS_1EJS9_SB_SC_SK_SL_SM_SN_EEEOS13_EEEDcSV_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JRNS0_6__baseILSS_1EJS9_SB_SC_SK_SL_SM_SN_EEEOS13_EEEDcSV_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  char v6;

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 8) = -1;
  v3 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v3 != -1)
  {
    result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS26_LNS0_6_TraitE1EEEEEvRS27_OT_EUlRS2D_OT0_E_JS2C_S2B_EEEDcmS2E_DpOT0____fdiagonal[v3])(&v6);
    *(_DWORD *)(a2 + 8) = v3;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JRNS0_6__baseILSS_1EJS9_SB_SC_SK_SL_SM_SN_EEEOS13_EEEDcSV_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JRNS0_6__baseILSS_1EJS9_SB_SC_SK_SL_SM_SN_EEEOS13_EEEDcSV_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  double result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  v4 = *(_DWORD *)(a2 + 8) & 0xFFFFFFFE | a3[1] & 1;
  *(_DWORD *)(a2 + 8) = v4;
  v5 = v4 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a3 + 2) >> 1) & 1));
  *(_DWORD *)(a2 + 8) = v5;
  v6 = v5 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a3 + 2) >> 2) & 1));
  *(_DWORD *)(a2 + 8) = v6;
  v7 = v6 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a3 + 2) >> 3) & 7));
  *(_DWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 8) = a3[1] & 0xFFFFFFC0 | v7 & 0x3F;
  *(_OWORD *)(a2 + 12) = *(_OWORD *)((char *)a3 + 12);
  result = *(double *)((char *)a3 + 28);
  *(double *)(a2 + 28) = result;
  *(_DWORD *)(a2 + 36) = *((_DWORD *)a3 + 9);
  *((_DWORD *)a3 + 2) &= ~1u;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JRNS0_6__baseILSS_1EJS9_SB_SC_SK_SL_SM_SN_EEEOS13_EEEDcSV_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JRNS0_6__baseILSS_1EJS9_SB_SC_SK_SL_SM_SN_EEEOS13_EEEDcSV_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore25CSSVariableReferenceValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_10CSSValueIDENS9_INSA_15CSSVariableDataENSC_ISI_EENSE_ISI_EEEENS_7variantIJNSA_6LengthENSA_22CSSCustomPropertyValue18NumericSyntaxValueENSA_10StyleColorENS8_6RefPtrINSA_10StyleImageENSC_ISS_EENSE_ISS_EEEENS8_3URLENS8_6StringENSO_20TransformSyntaxValueEEEENSO_15SyntaxValueListEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS12_1EJSG_SH_SL_SZ_S10_EEEEEEDcS14_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore25CSSVariableReferenceValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_10CSSValueIDENS9_INSA_15CSSVariableDataENSC_ISI_EENSE_ISI_EEEENS_7variantIJNSA_6LengthENSA_22CSSCustomPropertyValue18NumericSyntaxValueENSA_10StyleColorENS8_6RefPtrINSA_10StyleImageENSC_ISS_EENSE_ISS_EEEENS8_3URLENS8_6StringENSO_20TransformSyntaxValueEEEENSO_15SyntaxValueListEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS12_1EJSG_SH_SL_SZ_S10_EEEEEEDcS14_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(a2, (WTF::StringImpl *)a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore25CSSVariableReferenceValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_10CSSValueIDENS9_INSA_15CSSVariableDataENSC_ISI_EENSE_ISI_EEEENS_7variantIJNSA_6LengthENSA_22CSSCustomPropertyValue18NumericSyntaxValueENSA_10StyleColorENS8_6RefPtrINSA_10StyleImageENSC_ISS_EENSE_ISS_EEEENS8_3URLENS8_6StringENSO_20TransformSyntaxValueEEEENSO_15SyntaxValueListEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS12_1EJSG_SH_SL_SZ_S10_EEEEEEDcS14_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3391208[v3])(&v5, a2);
  *(_DWORD *)(a2 + 40) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore25CSSVariableReferenceValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_10CSSValueIDENS9_INSA_15CSSVariableDataENSC_ISI_EENSE_ISI_EEEENS_7variantIJNSA_6LengthENSA_22CSSCustomPropertyValue18NumericSyntaxValueENSA_10StyleColorENS8_6RefPtrINSA_10StyleImageENSC_ISS_EENSE_ISS_EEEENS8_3URLENS8_6StringENSO_20TransformSyntaxValueEEEENSO_15SyntaxValueListEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS12_1EJSG_SH_SL_SZ_S10_EEEEEEDcS14_DpT0_(uint64_t a1, unsigned int **a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  v3 = *((unsigned int *)a2 + 3);
  v4 = *a2;
  if ((_DWORD)v3)
  {
    v5 = 48 * v3;
    do
    {
      v6 = v4[10];
      if ((_DWORD)v6 != -1)
        result = ((uint64_t (*)(char *, unsigned int *))off_1E3391208[v6])(&v8, v4);
      v4[10] = -1;
      v4 += 12;
      v5 -= 48;
    }
    while (v5);
    v4 = *a2;
  }
  if (v4)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return WTF::fastFree((WTF *)v4, a2);
  }
  return result;
}

uint64_t *WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *(WTF::StringImpl **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = *(WTF::StringImpl **)(v3 + 32);
      *(_QWORD *)(v3 + 32) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        WTF::fastFree(v7, a2);
      }
      v8 = *(WTF::StringImpl **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSX_OT0_E_JRNS0_6__baseILSS_1EJS9_SB_SC_SK_SL_SM_SN_EEERKS15_EEEDcSX_DpT0_(int a1, WebCore::Length *this, uint64_t a3)
{
  unsigned int v3;
  int v4;
  int v5;
  int *result;

  *(_DWORD *)this = 0;
  *(_WORD *)((char *)this + 5) = 0;
  v3 = *(unsigned __int8 *)(a3 + 4);
  *((_BYTE *)this + 4) = v3;
  *((_BYTE *)this + 5) = *(_BYTE *)(a3 + 5);
  if (v3 <= 0xD)
  {
    v4 = 1 << v3;
    if ((v4 & 0x7FC) != 0)
    {
      v5 = *(unsigned __int8 *)(a3 + 6);
      *((_BYTE *)this + 6) = v5;
      if (v5)
        *(_DWORD *)this = *(_DWORD *)a3;
      else
        *(_DWORD *)this = *(_DWORD *)a3;
    }
    else if ((v4 & 0x3003) != 0)
    {
      *(_DWORD *)this = 0;
    }
    else
    {
      *(_DWORD *)this = *(_DWORD *)a3;
      return WebCore::Length::ref((int *)this);
    }
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSX_OT0_E_JRNS0_6__baseILSS_1EJS9_SB_SC_SK_SL_SM_SN_EEERKS15_EEEDcSX_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSX_OT0_E_JRNS0_6__baseILSS_1EJS9_SB_SC_SK_SL_SM_SN_EEERKS15_EEEDcSX_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  char v7;
  _QWORD v8[4];
  _QWORD *v9;

  v8[0] = &v7;
  v8[1] = &v7;
  v8[2] = &v7;
  v8[3] = &v7;
  v3 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v3 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSX_OT0_E_JRNS0_6__baseILSS_1EJS9_SB_SC_SK_SL_SM_SN_EEERKS15_EEEDcSX_DpT0_(v4, v5, v6);
  }
  else
  {
    v9 = v8;
    ((void (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v3])(&v9, a3);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSX_OT0_E_JRNS0_6__baseILSS_1EJS9_SB_SC_SK_SL_SM_SN_EEERKS15_EEEDcSX_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSX_OT0_E_JRNS0_6__baseILSS_1EJS9_SB_SC_SK_SL_SM_SN_EEERKS15_EEEDcSX_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  __n128 result;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSX_OT0_E_JRNS0_6__baseILSS_1EJS9_SB_SC_SK_SL_SM_SN_EEERKS15_EEEDcSX_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorEN3WTF6RefPtrINS8_10StyleImageENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSD_3URLENSD_6StringENSA_20TransformSyntaxValueEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSX_OT0_E_JRNS0_6__baseILSS_1EJS9_SB_SC_SK_SL_SM_SN_EEERKS15_EEEDcSX_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(*a3 + 8) + 1;
  *a2 = v3;
}

unint64_t WTF::Vector<std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x5555556)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(unsigned int *)(result + 12);
    v5 = 48 * a2;
    v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v2 = v6;
    if ((_DWORD)v4)
    {
      v8 = v6;
      v9 = 48 * v4;
      v10 = v3;
      do
      {
        *(_BYTE *)v8 = 0;
        *(_DWORD *)(v8 + 40) = -1;
        v11 = *((unsigned int *)v10 + 10);
        if ((_DWORD)v11 != -1)
        {
          ((void (*)(char *, uint64_t, WTF *))off_1E3391240[v11])(&v13, v8, v10);
          *(_DWORD *)(v8 + 40) = v11;
          v12 = *((unsigned int *)v10 + 10);
          if ((_DWORD)v12 != -1)
            ((void (*)(char *, WTF *))off_1E3391208[v12])(&v14, v10);
        }
        *((_DWORD *)v10 + 10) = -1;
        v8 += 48;
        v10 = (WTF *)((char *)v10 + 48);
        v9 -= 48;
      }
      while (v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unsigned __int16 *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyAnimation::isPropertyAnimatable(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::$_0,WebCore::CSSPropertyAnimation::isPropertyAnimatable(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(unsigned __int16 *result, unsigned __int16 *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  v2 = *a2;
  if ((_DWORD)v2 == 1)
    return (unsigned __int16 *)1;
  if ((byte_1ECE821B8 & 1) == 0)
  {
    v4 = *a2;
    result = WebCore::CSSPropertyAnimationWrapperMap::CSSPropertyAnimationWrapperMap((WebCore::CSSPropertyAnimationWrapperMap *)result);
    v2 = v4;
    byte_1ECE821B8 = 1;
  }
  if ((v2 - 554) < 0xFFFFFDD8)
    return 0;
  v3 = *(unsigned __int16 *)&_MergedGlobals_154[2 * v2 + 284];
  if (v3 == 0xFFFF)
    return 0;
  if (dword_1ECE822CC > v3)
    return (unsigned __int16 *)(*(_QWORD *)(qword_1ECE822C0 + 8 * v3) != 0);
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyAnimation::isPropertyAnimatable(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::$_0,WebCore::CSSPropertyAnimation::isPropertyAnimatable(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>()
{
  return 1;
}

unsigned __int16 *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyAnimation::isPropertyAdditiveOrCumulative(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::$_0,WebCore::CSSPropertyAnimation::isPropertyAdditiveOrCumulative(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(unsigned __int16 *result, unsigned __int16 *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a2;
  if ((byte_1ECE821B8 & 1) == 0)
  {
    v5 = *a2;
    result = WebCore::CSSPropertyAnimationWrapperMap::CSSPropertyAnimationWrapperMap((WebCore::CSSPropertyAnimationWrapperMap *)result);
    v2 = v5;
    byte_1ECE821B8 = 1;
  }
  if ((v2 - 554) < 0xFFFFFDD8)
    return 0;
  v3 = *(unsigned __int16 *)&_MergedGlobals_154[2 * v2 + 284];
  if (v3 == 0xFFFF)
    return 0;
  if (dword_1ECE822CC > v3)
  {
    v4 = *(_QWORD *)(qword_1ECE822C0 + 8 * v3);
    if (v4)
      return (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    return 0;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyAnimation::isPropertyAdditiveOrCumulative(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::$_0,WebCore::CSSPropertyAnimation::isPropertyAdditiveOrCumulative(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>()
{
  return 1;
}

WebCore::CSSPropertyAnimationWrapperMap *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyAnimation::propertyRequiresBlendingForAccumulativeIteration(WebCore::CSSPropertyBlendingClient const&,std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle const&,WebCore::RenderStyle const&)::$_0,WebCore::CSSPropertyAnimation::propertyRequiresBlendingForAccumulativeIteration(WebCore::CSSPropertyBlendingClient const&,std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle const&,WebCore::RenderStyle const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(WebCore::CSSPropertyAnimationWrapperMap *result, unsigned __int16 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD **)result;
  v3 = *a2;
  if ((byte_1ECE821B8 & 1) == 0)
  {
    v6 = *a2;
    v7 = *(_QWORD **)result;
    result = (WebCore::CSSPropertyAnimationWrapperMap *)WebCore::CSSPropertyAnimationWrapperMap::CSSPropertyAnimationWrapperMap(result);
    v3 = v6;
    v2 = v7;
    byte_1ECE821B8 = 1;
  }
  if ((v3 - 554) < 0xFFFFFDD8)
    return 0;
  v4 = *(unsigned __int16 *)&_MergedGlobals_154[2 * v3 + 284];
  if (v4 == 0xFFFF)
    return 0;
  if (dword_1ECE822CC > v4)
  {
    v5 = *(_QWORD *)(qword_1ECE822C0 + 8 * v4);
    if (v5)
      return (WebCore::CSSPropertyAnimationWrapperMap *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, *v2, v2[1]);
    return 0;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyAnimation::propertyRequiresBlendingForAccumulativeIteration(WebCore::CSSPropertyBlendingClient const&,std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle const&,WebCore::RenderStyle const&)::$_0,WebCore::CSSPropertyAnimation::propertyRequiresBlendingForAccumulativeIteration(WebCore::CSSPropertyBlendingClient const&,std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle const&,WebCore::RenderStyle const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int j;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int k;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int m;
  uint64_t v35;
  uint64_t v36;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;

  v3 = *(_QWORD *)(*(_QWORD *)result + 16);
  v2 = *(_QWORD *)(*(_QWORD *)result + 24);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 40) + 288);
  if (v4)
  {
    v5 = *a2;
    do
    {
      v6 = *(_QWORD *)(v4 + 16);
      if (v6)
      {
        v7 = 0;
        for (i = *(_DWORD *)(v5 + 16) >> 8; ; i = v7 + v9)
        {
          v9 = i & *(_DWORD *)(v6 - 8);
          v10 = *(_QWORD *)(v6 + 16 * v9);
          if (!v10)
            break;
          if (v10 != -1 && v10 == v5)
          {
            v12 = *(_QWORD *)(v6 + 16 * v9 + 8);
            if (v12)
              goto LABEL_26;
            break;
          }
          ++v7;
        }
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 216);
  if (v13)
  {
    v14 = *a2;
    do
    {
      v15 = *(_QWORD *)(v13 + 16);
      if (v15)
      {
        v16 = 0;
        for (j = *(_DWORD *)(v14 + 16) >> 8; ; j = v16 + v18)
        {
          v18 = j & *(_DWORD *)(v15 - 8);
          v19 = *(_QWORD *)(v15 + 16 * v18);
          if (!v19)
            break;
          if (v19 != -1 && v19 == v14)
          {
            v12 = *(_QWORD *)(v15 + 16 * v18 + 8);
            if (v12)
              goto LABEL_26;
            break;
          }
          ++v16;
        }
      }
      v13 = *(_QWORD *)(v13 + 8);
    }
    while (v13);
  }
  v12 = 0;
LABEL_26:
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 40) + 288);
  if (v21)
  {
    v22 = *a2;
    do
    {
      v23 = *(_QWORD *)(v21 + 16);
      if (v23)
      {
        v24 = 0;
        for (k = *(_DWORD *)(v22 + 16) >> 8; ; k = v24 + v26)
        {
          v26 = k & *(_DWORD *)(v23 - 8);
          v27 = *(_QWORD *)(v23 + 16 * v26);
          if (!v27)
            break;
          if (v27 != -1 && v27 == v22)
          {
            v29 = *(_QWORD *)(v23 + 16 * v26 + 8);
            if (!v29)
              break;
LABEL_52:
            if (!v12)
              return 0;
            v38 = *(_DWORD *)(v12 + 72);
            if (v38 == 3)
            {
              if (*(_DWORD *)(v29 + 72) != 3)
                return 0;
              return WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(v12 + 24, v29 + 24, 0);
            }
            else
            {
              if (v38 != 4)
                return 0;
              if (*(_DWORD *)(v29 + 72) != 4)
                return 0;
              v39 = *(_DWORD *)(v12 + 36);
              if (v39 != *(_DWORD *)(v29 + 36))
                return 0;
              if (v39)
              {
                v40 = 0;
                v41 = 0;
                while (v41 < *(unsigned int *)(v29 + 36))
                {
                  result = WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(*(_QWORD *)(v12 + 24) + v40, *(_QWORD *)(v29 + 24) + v40, 1);
                  if ((result & 1) != 0)
                  {
                    ++v41;
                    v40 += 48;
                    if (v41 < *(unsigned int *)(v12 + 36))
                      continue;
                  }
                  return result;
                }
                __break(0xC471u);
              }
              else
              {
                return 1;
              }
            }
            return result;
          }
          ++v24;
        }
      }
      v21 = *(_QWORD *)(v21 + 8);
    }
    while (v21);
  }
  v30 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 216);
  if (v30)
  {
    v31 = *a2;
    do
    {
      v32 = *(_QWORD *)(v30 + 16);
      if (v32)
      {
        v33 = 0;
        for (m = *(_DWORD *)(v31 + 16) >> 8; ; m = v33 + v35)
        {
          v35 = m & *(_DWORD *)(v32 - 8);
          v36 = *(_QWORD *)(v32 + 16 * v35);
          if (!v36)
            break;
          if (v36 != -1 && v36 == v31)
          {
            v29 = *(_QWORD *)(v32 + 16 * v35 + 8);
            if (v29)
              goto LABEL_52;
            break;
          }
          ++v33;
        }
      }
      v30 = *(_QWORD *)(v30 + 8);
    }
    while (v30);
  }
  return 0;
}

uint64_t WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  void (*v6)(char *, _QWORD *, _BYTE *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[5];
  int v12;
  char v13;
  _QWORD v14[5];
  int v15;
  char v16;
  _QWORD v17[5];
  int v18;
  char v19;
  _QWORD v20[5];
  int v21;
  char v22;
  char v23[40];
  int v24;
  char v25;
  char v26;

  LOBYTE(v11[0]) = 0;
  v12 = -1;
  v5 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v5 == -1)
  {
    v13 = a3;
    LOBYTE(v14[0]) = 0;
    v15 = -1;
    v16 = a3;
    LOBYTE(v20[0]) = 0;
    v21 = -1;
    v22 = a3;
    LOBYTE(v17[0]) = 0;
    v18 = -1;
    v19 = a3;
  }
  else
  {
    v6 = (void (*)(char *, _QWORD *, _BYTE *))*(&off_1E33912A0 + v5);
    v6(v23, v11, (_BYTE *)a2);
    v12 = v5;
    v13 = a3;
    LOBYTE(v14[0]) = 0;
    v15 = -1;
    v6(v23, v14, v11);
    v15 = v5;
    v16 = v13;
    LOBYTE(v20[0]) = 0;
    v21 = -1;
    v6(v23, v20, v14);
    v21 = v5;
    v22 = v16;
    v23[0] = 0;
    v24 = -1;
    v6(&v26, v23, v20);
    v24 = v5;
    v25 = v22;
    LOBYTE(v17[0]) = 0;
    v18 = -1;
    v6(&v26, v17, v23);
    v18 = v5;
    v19 = v25;
    if (v24 != -1)
      ((void (*)(char *, char *))off_1E3391208[v24])(&v26, v23);
  }
  if (v21 != -1)
    ((void (*)(char *, _QWORD *))off_1E3391208[v21])(v23, v20);
  v7 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v7 == -1)
  {
    v10 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_0,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_1,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_2,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>(v10);
  }
  else
  {
    *(_QWORD *)v23 = v17;
    v8 = ((uint64_t (*)(char *, uint64_t))off_1E3391308[v7])(v23, a1);
    if (v18 != -1)
      ((void (*)(char *, _QWORD *))off_1E3391208[v18])(v23, v17);
    v18 = -1;
    if (v15 != -1)
      ((void (*)(char *, _QWORD *))off_1E3391208[v15])(v23, v14);
    if (v12 != -1)
      ((void (*)(char *, _QWORD *))off_1E3391208[v12])(v23, v11);
    return v8;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_0,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_1,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_2,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v5;

  v2 = *a1;
  if (*(_BYTE *)(*a1 + 48))
    return 0;
  if (*(_DWORD *)(v2 + 40))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_0,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_1,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_2,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>();
  }
  else
  {
    v4 = *(unsigned __int8 *)(a2 + 4);
    v5 = *(unsigned __int8 *)(v2 + 4);
    return v4 == 11 || v5 == 11 || v5 != v4;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_0,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_1,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_2,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_0,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_1,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_2,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_0,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_1,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_2,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_0,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_1,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_2,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_0,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_1,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_2,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_0,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_1,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_2,WebCore::syntaxValuesRequireBlendingForAccumulativeIteration(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&,BOOL)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>()
{
  return 0;
}

WebCore::CSSPropertyAnimationWrapperMap *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyAnimation::animationOfPropertyIsAccelerated(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::Settings const&)::$_0,WebCore::CSSPropertyAnimation::animationOfPropertyIsAccelerated(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::Settings const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(WebCore::CSSPropertyAnimationWrapperMap *result, unsigned __int16 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD **)result;
  v3 = *a2;
  if ((byte_1ECE821B8 & 1) == 0)
  {
    v6 = *a2;
    v7 = *(_QWORD **)result;
    result = (WebCore::CSSPropertyAnimationWrapperMap *)WebCore::CSSPropertyAnimationWrapperMap::CSSPropertyAnimationWrapperMap(result);
    v3 = v6;
    v2 = v7;
    byte_1ECE821B8 = 1;
  }
  if ((v3 - 554) < 0xFFFFFDD8)
    return 0;
  v4 = *(unsigned __int16 *)&_MergedGlobals_154[2 * v3 + 284];
  if (v4 == 0xFFFF)
    return 0;
  if (dword_1ECE822CC > v4)
  {
    v5 = *(_QWORD *)(qword_1ECE822C0 + 8 * v4);
    if (v5)
      return (WebCore::CSSPropertyAnimationWrapperMap *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 72))(v5, *v2);
    return 0;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyAnimation::animationOfPropertyIsAccelerated(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::Settings const&)::$_0,WebCore::CSSPropertyAnimation::animationOfPropertyIsAccelerated(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::Settings const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyAnimation::propertiesEqual(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle const&,WebCore::RenderStyle const&,WebCore::Document const&)::$_0,WebCore::CSSPropertyAnimation::propertiesEqual(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle const&,WebCore::RenderStyle const&,WebCore::Document const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(uint64_t result, unsigned __int16 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD **)result;
  v3 = *a2;
  if ((byte_1ECE821B8 & 1) == 0)
  {
    v6 = *a2;
    v7 = *(_QWORD **)result;
    result = (uint64_t)WebCore::CSSPropertyAnimationWrapperMap::CSSPropertyAnimationWrapperMap((WebCore::CSSPropertyAnimationWrapperMap *)result);
    v3 = v6;
    v2 = v7;
    byte_1ECE821B8 = 1;
  }
  if ((v3 - 554) < 0xFFFFFDD8)
    return 1;
  v4 = *(unsigned __int16 *)&_MergedGlobals_154[2 * v3 + 284];
  if (v4 == 0xFFFF)
    return 1;
  if (dword_1ECE822CC > v4)
  {
    v5 = *(_QWORD *)(qword_1ECE822C0 + 8 * v4);
    if (v5)
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 40))(v5, *v2, v2[1]);
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyAnimation::propertiesEqual(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle const&,WebCore::RenderStyle const&,WebCore::Document const&)::$_0,WebCore::CSSPropertyAnimation::propertiesEqual(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle const&,WebCore::RenderStyle const&,WebCore::Document const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int j;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int k;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int m;
  uint64_t v35;
  uint64_t v36;
  uint64_t v39;
  _QWORD v40[5];
  _QWORD *v41;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 40) + 288);
  if (v4)
  {
    v5 = *a2;
    do
    {
      v6 = *(_QWORD *)(v4 + 16);
      if (v6)
      {
        v7 = 0;
        for (i = *(_DWORD *)(v5 + 16) >> 8; ; i = v7 + v9)
        {
          v9 = i & *(_DWORD *)(v6 - 8);
          v10 = *(_QWORD *)(v6 + 16 * v9);
          if (!v10)
            break;
          if (v10 != -1 && v10 == v5)
          {
            v12 = *(_QWORD *)(v6 + 16 * v9 + 8);
            if (v12)
              goto LABEL_26;
            break;
          }
          ++v7;
        }
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 216);
  if (v13)
  {
    v14 = *a2;
    do
    {
      v15 = *(_QWORD *)(v13 + 16);
      if (v15)
      {
        v16 = 0;
        for (j = *(_DWORD *)(v14 + 16) >> 8; ; j = v16 + v18)
        {
          v18 = j & *(_DWORD *)(v15 - 8);
          v19 = *(_QWORD *)(v15 + 16 * v18);
          if (!v19)
            break;
          if (v19 != -1 && v19 == v14)
          {
            v12 = *(_QWORD *)(v15 + 16 * v18 + 8);
            if (v12)
              goto LABEL_26;
            break;
          }
          ++v16;
        }
      }
      v13 = *(_QWORD *)(v13 + 8);
    }
    while (v13);
  }
  v12 = 0;
LABEL_26:
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 40) + 288);
  if (v21)
  {
    v22 = *a2;
    while (1)
    {
      v23 = *(_QWORD *)(v21 + 16);
      if (v23)
        break;
LABEL_37:
      v21 = *(_QWORD *)(v21 + 8);
      if (!v21)
        goto LABEL_38;
    }
    v24 = 0;
    for (k = *(_DWORD *)(v22 + 16) >> 8; ; k = v24 + v26)
    {
      v26 = k & *(_DWORD *)(v23 - 8);
      v27 = *(_QWORD *)(v23 + 16 * v26);
      if (!v27)
        goto LABEL_37;
      if (v27 != -1 && v27 == v22)
        break;
      ++v24;
    }
    v29 = *(_QWORD *)(v23 + 16 * v26 + 8);
    if (!v29)
      goto LABEL_37;
LABEL_52:
    if (v12)
    {
      v39 = *(unsigned int *)(v12 + 72);
      if ((_DWORD)v39 != 3)
      {
        if ((_DWORD)v39 != 4 || *(_DWORD *)(v29 + 72) != 4)
          return 0;
LABEL_58:
        if (*(_QWORD *)(v12 + 8) == *(_QWORD *)(v29 + 8))
        {
          v40[0] = v29;
          v40[1] = v29;
          v40[2] = v29;
          v40[3] = v29;
          v40[4] = v29;
          v41 = v40;
          return ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSCustomPropertyValue6equalsERKS9_E3__0JZNKS9_6equalsESB_E3__1ZNKS9_6equalsESB_E3__2ZNKS9_6equalsESB_E3__3ZNKS9_6equalsESB_E3__4EEEEEJRKNS0_6__implIJNS6_3RefINS8_25CSSVariableReferenceValueENS6_12RawPtrTraitsISL_EENS6_21DefaultRefDerefTraitsISL_EEEENS8_10CSSValueIDENSK_INS8_15CSSVariableDataENSM_ISS_EENSO_ISS_EEEENS_7variantIJNS8_6LengthENS9_18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENSM_IS11_EENSO_IS11_EEEENS6_3URLENS6_6StringENS9_20TransformSyntaxValueEEEENS9_15SyntaxValueListEEEEEEEDcOT_DpOT0____fmatrix[v39])(&v41, v12 + 24);
        }
        return 0;
      }
      if (*(_DWORD *)(v29 + 72) == 3)
        goto LABEL_58;
    }
    return 0;
  }
LABEL_38:
  v30 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 216);
  if (v30)
  {
    v31 = *a2;
    do
    {
      v32 = *(_QWORD *)(v30 + 16);
      if (v32)
      {
        v33 = 0;
        for (m = *(_DWORD *)(v31 + 16) >> 8; ; m = v33 + v35)
        {
          v35 = m & *(_DWORD *)(v32 - 8);
          v36 = *(_QWORD *)(v32 + 16 * v35);
          if (!v36)
            break;
          if (v36 != -1 && v36 == v31)
          {
            v29 = *(_QWORD *)(v32 + 16 * v35 + 8);
            if (v29)
              goto LABEL_52;
            break;
          }
          ++v33;
        }
      }
      v30 = *(_QWORD *)(v30 + 8);
    }
    while (v30);
  }
  return v12 == 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyAnimation::canPropertyBeInterpolated(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle const&,WebCore::RenderStyle const&,WebCore::Document const&)::$_1,WebCore::CSSPropertyAnimation::canPropertyBeInterpolated(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle const&,WebCore::RenderStyle const&,WebCore::Document const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(uint64_t result, unsigned __int16 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD **)result;
  v3 = *a2;
  if ((byte_1ECE821B8 & 1) == 0)
  {
    v6 = *a2;
    v7 = *(_QWORD **)result;
    result = (uint64_t)WebCore::CSSPropertyAnimationWrapperMap::CSSPropertyAnimationWrapperMap((WebCore::CSSPropertyAnimationWrapperMap *)result);
    v3 = v6;
    v2 = v7;
    byte_1ECE821B8 = 1;
  }
  if ((v3 - 554) < 0xFFFFFDD8)
    return 1;
  v4 = *(unsigned __int16 *)&_MergedGlobals_154[2 * v3 + 284];
  if (v4 == 0xFFFF)
    return 1;
  if (dword_1ECE822CC > v4)
  {
    v5 = *(_QWORD *)(qword_1ECE822C0 + 8 * v4);
    if (v5)
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v5 + 48))(v5, *v2, v2[1], 0);
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyAnimation::canPropertyBeInterpolated(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle const&,WebCore::RenderStyle const&,WebCore::Document const&)::$_1,WebCore::CSSPropertyAnimation::canPropertyBeInterpolated(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle const&,WebCore::RenderStyle const&,WebCore::Document const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int j;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int k;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int m;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  int v39;
  uint64_t v40;
  _BOOL4 v41;
  int v42;
  uint64_t (*v43)();
  uint64_t v44;
  uint64_t (*v45)();
  int v47;
  uint64_t (*v48)();
  uint64_t v49;
  char v50;
  _BYTE v51[48];
  int v52;
  _BYTE v53[48];
  int v54;
  _BYTE v55[48];
  int v56;
  _BYTE v57[48];
  int v58;
  _BYTE v59[8];
  _BYTE v60[48];
  int v61;
  _BYTE v62[48];
  int v63;
  _BYTE v64[48];
  int v65;
  _BYTE v66[48];
  int v67;
  _BYTE v68[48];
  int v69;
  _BYTE v70[48];
  int v71;
  _BYTE *v72;
  _BYTE v73[48];
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 40) + 288);
  if (v4)
  {
    v5 = *a2;
    do
    {
      v6 = *(_QWORD *)(v4 + 16);
      if (v6)
      {
        v7 = 0;
        for (i = *(_DWORD *)(v5 + 16) >> 8; ; i = v7 + v9)
        {
          v9 = i & *(_DWORD *)(v6 - 8);
          v10 = *(_QWORD *)(v6 + 16 * v9);
          if (!v10)
            break;
          if (v10 != -1 && v10 == v5)
          {
            v12 = *(_QWORD *)(v6 + 16 * v9 + 8);
            if (v12)
              goto LABEL_26;
            break;
          }
          ++v7;
        }
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 216);
  if (v13)
  {
    v14 = *a2;
    do
    {
      v15 = *(_QWORD *)(v13 + 16);
      if (v15)
      {
        v16 = 0;
        for (j = *(_DWORD *)(v14 + 16) >> 8; ; j = v16 + v18)
        {
          v18 = j & *(_DWORD *)(v15 - 8);
          v19 = *(_QWORD *)(v15 + 16 * v18);
          if (!v19)
            break;
          if (v19 != -1 && v19 == v14)
          {
            v12 = *(_QWORD *)(v15 + 16 * v18 + 8);
            if (v12)
              goto LABEL_26;
            break;
          }
          ++v16;
        }
      }
      v13 = *(_QWORD *)(v13 + 8);
    }
    while (v13);
  }
  v12 = 0;
LABEL_26:
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 40) + 288);
  if (v21)
  {
    v22 = *a2;
    do
    {
      v23 = *(_QWORD *)(v21 + 16);
      if (v23)
      {
        v24 = 0;
        for (k = *(_DWORD *)(v22 + 16) >> 8; ; k = v24 + v26)
        {
          v26 = k & *(_DWORD *)(v23 - 8);
          v27 = *(_QWORD *)(v23 + 16 * v26);
          if (!v27)
            break;
          if (v27 != -1 && v27 == v22)
          {
            v29 = *(_QWORD *)(v23 + 16 * v26 + 8);
            if (v29)
              goto LABEL_51;
            break;
          }
          ++v24;
        }
      }
      v21 = *(_QWORD *)(v21 + 8);
    }
    while (v21);
  }
  v30 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 216);
  if (v30)
  {
    v31 = *a2;
    do
    {
      v32 = *(_QWORD *)(v30 + 16);
      if (v32)
      {
        v33 = 0;
        for (m = *(_DWORD *)(v31 + 16) >> 8; ; m = v33 + v35)
        {
          v35 = m & *(_DWORD *)(v32 - 8);
          v36 = *(_QWORD *)(v32 + 16 * v35);
          if (!v36)
            break;
          if (v36 != -1 && v36 == v31)
          {
            v29 = *(_QWORD *)(v32 + 16 * v35 + 8);
            if (v29)
              goto LABEL_51;
            break;
          }
          ++v33;
        }
      }
      v30 = *(_QWORD *)(v30 + 8);
    }
    while (v30);
  }
  v29 = 0;
LABEL_51:
  if (!v12)
    return 0;
  v38 = 0;
  if (!v29 || v12 == v29)
    return v38;
  v39 = *(_DWORD *)(v12 + 72);
  v40 = *(unsigned int *)(v29 + 72);
  v41 = v40 == v39;
  if ((_DWORD)v40 == -1)
    v41 = 0;
  v42 = v39 == -1 ? (_DWORD)v40 == -1 : v41;
  if (v42 != 1)
    return 0;
  v53[0] = 0;
  v54 = -1;
  if ((_DWORD)v40 == -1)
  {
    v51[0] = 0;
    v52 = -1;
    v57[0] = 0;
    v58 = -1;
    v55[0] = 0;
    v56 = -1;
    v66[0] = 0;
    v67 = -1;
    v64[0] = 0;
    v65 = -1;
    v70[0] = 0;
    v71 = -1;
LABEL_82:
    v60[0] = 0;
    v61 = -1;
    goto LABEL_83;
  }
  v43 = off_1E3391440[v40];
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v43)(v59, v53, v29 + 24);
  v54 = v40;
  v44 = *(unsigned int *)(v29 + 72);
  v51[0] = 0;
  v52 = -1;
  if ((_DWORD)v44 == -1)
  {
    v57[0] = 0;
    v58 = -1;
    ((void (*)(_BYTE **, _BYTE *, _BYTE *))v43)(&v72, v57, v53);
  }
  else
  {
    v45 = off_1E3391440[v44];
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v45)(v59, v51, v29 + 24);
    v52 = v44;
    LODWORD(v40) = v54;
    v57[0] = 0;
    v58 = -1;
    if (v54 == -1)
    {
      v55[0] = 0;
      v56 = -1;
      ((void (*)(_BYTE **, _BYTE *, _BYTE *))v45)(&v72, v55, v51);
      goto LABEL_72;
    }
    v43 = off_1E3391440[v54];
    ((void (*)(_BYTE **, _BYTE *, _BYTE *))v43)(&v72, v57, v53);
  }
  v58 = v40;
  LODWORD(v44) = v52;
  v55[0] = 0;
  v56 = -1;
  if (v52 == -1)
  {
    v66[0] = 0;
    v67 = -1;
    goto LABEL_74;
  }
  v45 = off_1E3391440[v52];
  ((void (*)(_BYTE **, _BYTE *, _BYTE *))v45)(&v72, v55, v51);
LABEL_72:
  v56 = v44;
  LODWORD(v40) = v58;
  v66[0] = 0;
  v67 = -1;
  if (v58 == -1)
  {
    v64[0] = 0;
    v65 = -1;
    ((void (*)(_BYTE **, _BYTE *, _BYTE *))v45)(&v72, v64, v55);
    goto LABEL_78;
  }
  v43 = off_1E3391440[v58];
LABEL_74:
  ((void (*)(_BYTE **, _BYTE *, _BYTE *))v43)(&v72, v66, v57);
  v67 = v40;
  LODWORD(v44) = v56;
  v64[0] = 0;
  v65 = -1;
  if (v56 == -1)
  {
    v70[0] = 0;
    v71 = -1;
    goto LABEL_80;
  }
  ((void (*)(_BYTE **, _BYTE *, _BYTE *))off_1E3391440[v56])(&v72, v64, v55);
LABEL_78:
  v65 = v44;
  LODWORD(v40) = v67;
  v70[0] = 0;
  v71 = -1;
  if (v67 == -1)
    goto LABEL_82;
  v43 = off_1E3391440[v67];
LABEL_80:
  ((void (*)(_BYTE **, _BYTE *, _BYTE *))v43)(&v72, v70, v66);
  v71 = v40;
  v60[0] = 0;
  v61 = -1;
  ((void (*)(_BYTE **, _BYTE *, _BYTE *))v43)(&v72, v60, v70);
  v61 = v40;
  if (v71 != -1)
    ((void (*)(_BYTE **, _BYTE *))off_1E3391278[v71])(&v72, v70);
LABEL_83:
  v71 = -1;
  v68[0] = 0;
  v69 = -1;
  v47 = v65;
  if (v65 == -1)
  {
    v62[0] = 0;
    v63 = -1;
  }
  else
  {
    v48 = off_1E3391440[v65];
    ((void (*)(_BYTE **, _BYTE *, _BYTE *))v48)(&v72, v68, v64);
    v69 = v47;
    v73[0] = 0;
    v74 = -1;
    ((void (*)(char *, _BYTE *, _BYTE *))v48)(&v50, v73, v68);
    v74 = v47;
    v62[0] = 0;
    v63 = -1;
    ((void (*)(char *, _BYTE *, _BYTE *))v48)(&v50, v62, v73);
    v63 = v47;
    if (v74 != -1)
      ((void (*)(char *, _BYTE *))off_1E3391278[v74])(&v50, v73);
  }
  if (v69 != -1)
    ((void (*)(_BYTE **, _BYTE *))off_1E3391278[v69])(&v72, v68);
  if (v65 != -1)
    ((void (*)(_BYTE **, _BYTE *))off_1E3391278[v65])(&v72, v64);
  v65 = -1;
  if (v67 != -1)
    ((void (*)(_BYTE **, _BYTE *))off_1E3391278[v67])(&v72, v66);
  v49 = *(unsigned int *)(v12 + 72);
  if ((_DWORD)v49 != -1)
  {
    v72 = v59;
    v38 = ((uint64_t (*)(_BYTE **, uint64_t))off_1E3391370[v49])(&v72, v12 + 24);
    if (v63 != -1)
      ((void (*)(_BYTE **, _BYTE *))off_1E3391278[v63])(&v72, v62);
    v63 = -1;
    if (v61 != -1)
      ((void (*)(_BYTE **, _BYTE *))off_1E3391278[v61])(&v72, v60);
    v61 = -1;
    if (v56 != -1)
      ((void (*)(_BYTE **, _BYTE *))off_1E3391278[v56])(&v72, v55);
    v56 = -1;
    if (v58 != -1)
      ((void (*)(_BYTE **, _BYTE *))off_1E3391278[v58])(&v72, v57);
    if (v52 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_1E3391278[v52])(v59, v51);
    if (v54 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_1E3391278[v54])(v59, v53);
    return v38;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore20CSSPropertyAnimation25canPropertyBeInterpolatedERKNS_7variantIJNSA_13CSSPropertyIDENS8_10AtomStringEEEERKNSA_11RenderStyleESK_RKNSA_8DocumentEENK3__0clERKSE_EUlRKNSA_22CSSCustomPropertyValue15SyntaxValueListEE_JZZNSB_25canPropertyBeInterpolatedESH_SK_SK_SN_ENKSO_clESQ_EUlRKNSC_IJNSA_6LengthENSR_18NumericSyntaxValueENSA_10StyleColorENS8_6RefPtrINSA_10StyleImageENS8_12RawPtrTraitsIS10_EENS8_21DefaultRefDerefTraitsIS10_EEEENS8_3URLENS8_6StringENSR_20TransformSyntaxValueEEEEE_ZZNSB_25canPropertyBeInterpolatedESH_SK_SK_SN_ENKSO_clESQ_EUlRT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_3RefINSA_25CSSVariableReferenceValueENS11_IS1M_EENS13_IS1M_EEEENSA_10CSSValueIDENS1L_INSA_15CSSVariableDataENS11_IS1R_EENS13_IS1R_EEEES19_SS_EEEEEEDcS1D_DpT0_();
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore20CSSPropertyAnimation25canPropertyBeInterpolatedERKNS_7variantIJNSA_13CSSPropertyIDENS8_10AtomStringEEEERKNSA_11RenderStyleESK_RKNSA_8DocumentEENK3__0clERKSE_EUlRKNSA_22CSSCustomPropertyValue15SyntaxValueListEE_JZZNSB_25canPropertyBeInterpolatedESH_SK_SK_SN_ENKSO_clESQ_EUlRKNSC_IJNSA_6LengthENSR_18NumericSyntaxValueENSA_10StyleColorENS8_6RefPtrINSA_10StyleImageENS8_12RawPtrTraitsIS10_EENS8_21DefaultRefDerefTraitsIS10_EEEENS8_3URLENS8_6StringENSR_20TransformSyntaxValueEEEEE_ZZNSB_25canPropertyBeInterpolatedESH_SK_SK_SN_ENKSO_clESQ_EUlRT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_3RefINSA_25CSSVariableReferenceValueENS11_IS1M_EENS13_IS1M_EEEENSA_10CSSValueIDENS1L_INSA_15CSSVariableDataENS11_IS1R_EENS13_IS1R_EEEES19_SS_EEEEEEDcS1D_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore20CSSPropertyAnimation25canPropertyBeInterpolatedERKNS_7variantIJNSA_13CSSPropertyIDENS8_10AtomStringEEEERKNSA_11RenderStyleESK_RKNSA_8DocumentEENK3__0clERKSE_EUlRKNSA_22CSSCustomPropertyValue15SyntaxValueListEE_JZZNSB_25canPropertyBeInterpolatedESH_SK_SK_SN_ENKSO_clESQ_EUlRKNSC_IJNSA_6LengthENSR_18NumericSyntaxValueENSA_10StyleColorENS8_6RefPtrINSA_10StyleImageENS8_12RawPtrTraitsIS10_EENS8_21DefaultRefDerefTraitsIS10_EEEENS8_3URLENS8_6StringENSR_20TransformSyntaxValueEEEEE_ZZNSB_25canPropertyBeInterpolatedESH_SK_SK_SN_ENKSO_clESQ_EUlRT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_3RefINSA_25CSSVariableReferenceValueENS11_IS1M_EENS13_IS1M_EEEENSA_10CSSValueIDENS1L_INSA_15CSSVariableDataENS11_IS1R_EENS13_IS1R_EEEES19_SS_EEEEEEDcS1D_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore20CSSPropertyAnimation25canPropertyBeInterpolatedERKNS_7variantIJNSA_13CSSPropertyIDENS8_10AtomStringEEEERKNSA_11RenderStyleESK_RKNSA_8DocumentEENK3__0clERKSE_EUlRKNSA_22CSSCustomPropertyValue15SyntaxValueListEE_JZZNSB_25canPropertyBeInterpolatedESH_SK_SK_SN_ENKSO_clESQ_EUlRKNSC_IJNSA_6LengthENSR_18NumericSyntaxValueENSA_10StyleColorENS8_6RefPtrINSA_10StyleImageENS8_12RawPtrTraitsIS10_EENS8_21DefaultRefDerefTraitsIS10_EEEENS8_3URLENS8_6StringENSR_20TransformSyntaxValueEEEEE_ZZNSB_25canPropertyBeInterpolatedESH_SK_SK_SN_ENKSO_clESQ_EUlRT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_3RefINSA_25CSSVariableReferenceValueENS11_IS1M_EENS13_IS1M_EEEENSA_10CSSValueIDENS1L_INSA_15CSSVariableDataENS11_IS1R_EENS13_IS1R_EEEES19_SS_EEEEEEDcS1D_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore20CSSPropertyAnimation25canPropertyBeInterpolatedERKNS_7variantIJNSA_13CSSPropertyIDENS8_10AtomStringEEEERKNSA_11RenderStyleESK_RKNSA_8DocumentEENK3__0clERKSE_EUlRKNSA_22CSSCustomPropertyValue15SyntaxValueListEE_JZZNSB_25canPropertyBeInterpolatedESH_SK_SK_SN_ENKSO_clESQ_EUlRKNSC_IJNSA_6LengthENSR_18NumericSyntaxValueENSA_10StyleColorENS8_6RefPtrINSA_10StyleImageENS8_12RawPtrTraitsIS10_EENS8_21DefaultRefDerefTraitsIS10_EEEENS8_3URLENS8_6StringENSR_20TransformSyntaxValueEEEEE_ZZNSB_25canPropertyBeInterpolatedESH_SK_SK_SN_ENKSO_clESQ_EUlRT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_3RefINSA_25CSSVariableReferenceValueENS11_IS1M_EENS13_IS1M_EEEENSA_10CSSValueIDENS1L_INSA_15CSSVariableDataENS11_IS1R_EENS13_IS1R_EEEES19_SS_EEEEEEDcS1D_DpT0_(uint64_t *a1, WebCore::Length *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  BOOL v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v10;
  _BYTE v11[40];
  int v12;
  char v13;
  char *v14;

  v2 = *a1;
  if (*(_DWORD *)(*a1 + 120) != 3)
    goto LABEL_17;
  v11[0] = 0;
  v12 = -1;
  v4 = *(unsigned int *)(v2 + 112);
  if ((_DWORD)v4 == -1)
  {
    v6 = 0;
    v5 = *((_DWORD *)a2 + 10);
    v7 = v5 != -1;
  }
  else
  {
    ((void (*)(char **, _BYTE *, uint64_t))*(&off_1E33912A0 + v4))(&v14, v11, v2 + 72);
    v12 = v4;
    v5 = *((_DWORD *)a2 + 10);
    v6 = (_DWORD)v4 == v5;
    v7 = v5 != -1;
    if (v5 != -1 && (_DWORD)v4 == v5)
    {
      v14 = &v13;
      if ((*(&off_1E3391398 + v4))((int)&v14, a2, (WebCore::Length *)v11))
      {
        v5 = *((_DWORD *)a2 + 10);
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  if (!v7)
    v6 = (_DWORD)v4 == -1;
  if (!v6)
  {
LABEL_12:
    if (v5 != -1)
    {
      v14 = &v13;
      v8 = ((uint64_t (*)(char **, WebCore::Length *))off_1E33913D0[v5])(&v14, a2);
      goto LABEL_14;
    }
LABEL_17:
    v10 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore20CSSPropertyAnimation25canPropertyBeInterpolatedERKNS_7variantIJNSA_13CSSPropertyIDENS8_10AtomStringEEEERKNSA_11RenderStyleESK_RKNSA_8DocumentEENK3__0clERKSE_EUlRKNSA_22CSSCustomPropertyValue15SyntaxValueListEE_JZZNSB_25canPropertyBeInterpolatedESH_SK_SK_SN_ENKSO_clESQ_EUlRKNSC_IJNSA_6LengthENSR_18NumericSyntaxValueENSA_10StyleColorENS8_6RefPtrINSA_10StyleImageENS8_12RawPtrTraitsIS10_EENS8_21DefaultRefDerefTraitsIS10_EEEENS8_3URLENS8_6StringENSR_20TransformSyntaxValueEEEEE_ZZNSB_25canPropertyBeInterpolatedESH_SK_SK_SN_ENKSO_clESQ_EUlRT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_3RefINSA_25CSSVariableReferenceValueENS11_IS1M_EENS13_IS1M_EEEENSA_10CSSValueIDENS1L_INSA_15CSSVariableDataENS11_IS1R_EENS13_IS1R_EEEES19_SS_EEEEEEDcS1D_DpT0_(v10);
  }
LABEL_11:
  v8 = 0;
LABEL_14:
  if (v12 != -1)
    ((void (*)(char **, _BYTE *))off_1E3391208[v12])(&v14, v11);
  return v8;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore20CSSPropertyAnimation25canPropertyBeInterpolatedERKNS_7variantIJNSA_13CSSPropertyIDENS8_10AtomStringEEEERKNSA_11RenderStyleESK_RKNSA_8DocumentEENK3__0clERKSE_EUlRKNSA_22CSSCustomPropertyValue15SyntaxValueListEE_JZZNSB_25canPropertyBeInterpolatedESH_SK_SK_SN_ENKSO_clESQ_EUlRKNSC_IJNSA_6LengthENSR_18NumericSyntaxValueENSA_10StyleColorENS8_6RefPtrINSA_10StyleImageENS8_12RawPtrTraitsIS10_EENS8_21DefaultRefDerefTraitsIS10_EEEENS8_3URLENS8_6StringENSR_20TransformSyntaxValueEEEEE_ZZNSB_25canPropertyBeInterpolatedESH_SK_SK_SN_ENKSO_clESQ_EUlRT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_3RefINSA_25CSSVariableReferenceValueENS11_IS1M_EENS13_IS1M_EEEENSA_10CSSValueIDENS1L_INSA_15CSSVariableDataENS11_IS1R_EENS13_IS1R_EEEES19_SS_EEEEEEDcS1D_DpT0_(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  _DWORD *v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  _BOOL4 v22;
  _BOOL4 v24;
  _BOOL4 v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  _QWORD v35[5];
  int v36;
  char v37;
  char v38;
  char *v39;

  v2 = *(_QWORD *)result;
  if (*(_DWORD *)(*(_QWORD *)result + 56) != 4)
  {
LABEL_65:
    result = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_66;
  }
  v3 = a2;
  v4 = *(unsigned int *)(v2 + 20);
  if (!(_DWORD)v4)
  {
    v13 = a2 + 3;
    if (a2[3])
    {
      v5 = 0;
      v14 = *(_QWORD *)a2;
      goto LABEL_42;
    }
    v5 = 0;
    v27 = *(unsigned __int8 *)(v2 + 24);
    goto LABEL_37;
  }
  if (v4 >= 0x5555556)
  {
LABEL_66:
    __break(0xC471u);
    return result;
  }
  v5 = (unsigned int *)WTF::fastMalloc((WTF *)(48 * v4));
  v6 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v6)
  {
    v33 = v3;
    v7 = 0;
    v8 = *(_QWORD *)(v2 + 8);
    v9 = 48 * v6;
    do
    {
      v10 = &v5[v7 / 4];
      *(_BYTE *)v10 = 0;
      v10[10] = -1;
      v11 = *(unsigned int *)(v8 + v7 + 40);
      if ((_DWORD)v11 != -1)
      {
        (*(&off_1E33912A0 + v11))((int)v35, (WebCore::Length *)&v5[v7 / 4]);
        v10[10] = v11;
      }
      v7 += 48;
    }
    while (v9 != v7);
    v3 = v33;
    v13 = v33 + 3;
    v12 = v33[3];
    v14 = *(_QWORD *)v33;
    if (v12 != (_DWORD)v4)
    {
      if (v12)
        goto LABEL_42;
LABEL_39:
      LOBYTE(v35[0]) = 0;
      if (!(_DWORD)v4)
        goto LABEL_40;
      goto LABEL_52;
    }
  }
  else
  {
    v13 = v3 + 3;
    v15 = v3[3];
    v14 = *(_QWORD *)v3;
    if (v15 != (_DWORD)v4)
    {
      if (v15)
        goto LABEL_42;
      LOBYTE(v35[0]) = 0;
LABEL_52:
      v36 = -1;
      v29 = v5[10];
      if ((_DWORD)v29 != -1)
      {
        ((void (*)(char **, _QWORD *, unsigned int *))*(&off_1E33912A0 + v29))(&v39, v35, v5);
        v36 = v29;
        goto LABEL_44;
      }
LABEL_54:
      v37 = 1;
      if (*v13 != (_DWORD)v4)
      {
        v28 = 0;
        goto LABEL_56;
      }
      goto LABEL_65;
    }
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v34 = *(unsigned __int8 *)(v2 + 24);
  while (1)
  {
    a2 = (_DWORD *)(v14 + v16 * 4);
    v19 = *(unsigned int *)(v14 + v16 * 4 + 40);
    v20 = v5[v16 + 10];
    v21 = v20 != (_DWORD)v19 || v20 == -1;
    v22 = !v21;
    if ((_DWORD)v19 == -1 || !v22)
      break;
    v35[0] = &v39;
    v26 = ((uint64_t (*)(_QWORD *))*(&off_1E3391408 + v19))(v35);
    if ((v26 & 1) == 0)
      goto LABEL_34;
LABEL_33:
    v17 = ++v18 >= v4;
    v16 += 12;
    if (v4 == v18)
      goto LABEL_34;
  }
  v24 = v20 == -1;
  if ((_DWORD)v19 == -1)
    v25 = v24;
  else
    v25 = v22;
  if (v25)
    goto LABEL_33;
LABEL_34:
  v27 = v34;
  if (v17)
  {
LABEL_37:
    if (*((unsigned __int8 *)v3 + 16) != v27)
      goto LABEL_38;
LABEL_40:
    v28 = 0;
    goto LABEL_57;
  }
LABEL_38:
  v14 = *(_QWORD *)v3;
  if (!v3[3])
    goto LABEL_39;
LABEL_42:
  LOBYTE(v35[0]) = 0;
  v36 = -1;
  v29 = *(unsigned int *)(v14 + 40);
  if ((_DWORD)v29 == -1)
    goto LABEL_54;
  ((void (*)(char **, _QWORD *, uint64_t))*(&off_1E33912A0 + v29))(&v39, v35, v14);
  v36 = v29;
LABEL_44:
  v37 = 1;
  if ((_DWORD)v29 != 6 && *v13 != (_DWORD)v4)
  {
    v28 = 0;
    goto LABEL_50;
  }
  v39 = &v38;
  v28 = ((uint64_t (*)(char **, _QWORD *))off_1E33913D0[v29])(&v39, v35);
  if (!v37)
    goto LABEL_57;
  LODWORD(v29) = v36;
  if (v36 != -1)
LABEL_50:
    ((void (*)(char **, _QWORD *))off_1E3391208[v29])(&v39, v35);
LABEL_56:
  v36 = -1;
LABEL_57:
  if ((_DWORD)v4)
  {
    v30 = 48 * v4;
    v31 = v5;
    do
    {
      v32 = v31[10];
      if ((_DWORD)v32 != -1)
        ((void (*)(_QWORD *, unsigned int *))off_1E3391208[v32])(v35, v31);
      v31[10] = -1;
      v31 += 12;
      v30 -= 48;
    }
    while (v30);
  }
  if (v5)
    WTF::fastFree((WTF *)v5, a2);
  return v28;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const>(int a1, WebCore::Length *this, WebCore::Length *a3)
{
  int v3;
  float v4;
  float v5;
  int isCalculatedEqual;

  v3 = *((unsigned __int8 *)this + 4);
  if (v3 != *((unsigned __int8 *)a3 + 4) || (*((_BYTE *)this + 5) != 0) != (*((_BYTE *)a3 + 5) != 0))
  {
    isCalculatedEqual = 0;
  }
  else if (v3 == 13)
  {
    isCalculatedEqual = 1;
  }
  else if (v3 == 11)
  {
    isCalculatedEqual = WebCore::Length::isCalculatedEqual(this, a3);
  }
  else
  {
    v4 = *(float *)this;
    if (!*((_BYTE *)this + 6))
      v4 = (float)*(int *)this;
    v5 = *(float *)a3;
    if (!*((_BYTE *)a3 + 6))
      v5 = (float)*(int *)a3;
    isCalculatedEqual = v4 == v5;
  }
  return isCalculatedEqual ^ 1u;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)a2 != *(double *)a3 || *(unsigned __int8 *)(a2 + 8) != *(unsigned __int8 *)(a3 + 8);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;
  int v7;
  BOOL v8;
  char v10;
  char *v11;

  v3 = *(unsigned int *)(a2 + 8);
  v4 = *(_DWORD *)(a3 + 8);
  v5 = v4 == v3;
  v8 = v4 == -1;
  v6 = v4 == -1;
  if (v8)
    v5 = 0;
  if ((_DWORD)v3 == -1)
    v7 = v6;
  else
    v7 = v5;
  v8 = (_DWORD)v3 == -1 || !v5;
  if (!v8)
  {
    v11 = &v10;
    v7 = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v3])(&v11);
  }
  return v7 ^ 1u;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 != *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul,4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const>(uint64_t a1, WTF **a2, const WTF::StringImpl **a3)
{
  return WTF::equal(*a2, *a3, (const WTF::StringImpl *)a3) ^ 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul,5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const>(uint64_t a1, WTF **a2, const WTF::StringImpl **a3)
{
  return WTF::equal(*a2, *a3, (const WTF::StringImpl *)a3) ^ 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul,6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, *a3) ^ 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  int v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = v2[2];
    v2[2] = v3 + 1;
    if (v3)
      v2[2] = v3;
    else
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::typeOfSyntaxValueCanBeInterpolated(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const>(int a1, WebCore::Length *this, WebCore::Length *a3)
{
  int v3;
  float v4;
  float v5;

  v3 = *((unsigned __int8 *)this + 4);
  if (v3 != *((unsigned __int8 *)a3 + 4) || (*((_BYTE *)this + 5) != 0) != (*((_BYTE *)a3 + 5) != 0))
    return 0;
  if (v3 == 13)
    return 1;
  if (v3 == 11)
    return WebCore::Length::isCalculatedEqual(this, a3);
  v4 = *(float *)this;
  if (!*((_BYTE *)this + 6))
    v4 = (float)*(int *)this;
  v5 = *(float *)a3;
  if (!*((_BYTE *)a3 + 6))
    v5 = (float)*(int *)a3;
  return v4 == v5;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)a2 == *(double *)a3 && *(unsigned __int8 *)(a2 + 8) == *(unsigned __int8 *)(a3 + 8);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;
  uint64_t result;
  BOOL v8;
  char v9;
  char *v10;

  v3 = *(unsigned int *)(a2 + 8);
  v4 = *(_DWORD *)(a3 + 8);
  v5 = v4 == v3;
  v8 = v4 == -1;
  v6 = v4 == -1;
  if (v8)
    v5 = 0;
  if ((_DWORD)v3 == -1)
    result = v6;
  else
    result = v5;
  v8 = (_DWORD)v3 == -1 || !v5;
  if (!v8)
  {
    v10 = &v9;
    return ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v3])(&v10);
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul,4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const>(uint64_t a1, WTF **a2, const WTF::StringImpl **a3)
{
  return WTF::equal(*a2, *a3, (const WTF::StringImpl *)a3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul,5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const>(uint64_t a1, WTF **a2, const WTF::StringImpl **a3)
{
  return WTF::equal(*a2, *a3, (const WTF::StringImpl *)a3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul,6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,std::__variant_detail::_Trait::CSSCustomPropertyValue::NumericSyntaxValue,std::__variant_detail::_Trait::StyleColor,WTF::RefPtr<std::__variant_detail::_Trait::StyleImage,std::__variant_detail::_Trait::StyleColor::RawPtrTraits<WTF::RefPtr>,std::__variant_detail::_Trait::StyleColor::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait::StyleColor::URL,std::__variant_detail::_Trait::StyleColor::String,WebCore::Length::TransformSyntaxValue> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, *a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore25CSSVariableReferenceValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_10CSSValueIDENS9_INSA_15CSSVariableDataENSC_ISI_EENSE_ISI_EEEENS_7variantIJNSA_6LengthENSA_22CSSCustomPropertyValue18NumericSyntaxValueENSA_10StyleColorENS8_6RefPtrINSA_10StyleImageENSC_ISS_EENSE_ISS_EEEENS8_3URLENS8_6StringENSO_20TransformSyntaxValueEEEENSO_15SyntaxValueListEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS1A_OT0_E_JRNS0_6__baseILS15_1EJSG_SH_SL_SZ_S10_EEERKS1I_EEEDcS1A_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  *v3 = **a3 + 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore25CSSVariableReferenceValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_10CSSValueIDENS9_INSA_15CSSVariableDataENSC_ISI_EENSE_ISI_EEEENS_7variantIJNSA_6LengthENSA_22CSSCustomPropertyValue18NumericSyntaxValueENSA_10StyleColorENS8_6RefPtrINSA_10StyleImageENSC_ISS_EENSE_ISS_EEEENS8_3URLENS8_6StringENSO_20TransformSyntaxValueEEEENSO_15SyntaxValueListEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS1A_OT0_E_JRNS0_6__baseILS15_1EJSG_SH_SL_SZ_S10_EEERKS1I_EEEDcS1A_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore25CSSVariableReferenceValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_10CSSValueIDENS9_INSA_15CSSVariableDataENSC_ISI_EENSE_ISI_EEEENS_7variantIJNSA_6LengthENSA_22CSSCustomPropertyValue18NumericSyntaxValueENSA_10StyleColorENS8_6RefPtrINSA_10StyleImageENSC_ISS_EENSE_ISS_EEEENS8_3URLENS8_6StringENSO_20TransformSyntaxValueEEEENSO_15SyntaxValueListEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS1A_OT0_E_JRNS0_6__baseILS15_1EJSG_SH_SL_SZ_S10_EEERKS1I_EEEDcS1A_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  *v3 = **a3 + 1;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore25CSSVariableReferenceValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_10CSSValueIDENS9_INSA_15CSSVariableDataENSC_ISI_EENSE_ISI_EEEENS_7variantIJNSA_6LengthENSA_22CSSCustomPropertyValue18NumericSyntaxValueENSA_10StyleColorENS8_6RefPtrINSA_10StyleImageENSC_ISS_EENSE_ISS_EEEENS8_3URLENS8_6StringENSO_20TransformSyntaxValueEEEENSO_15SyntaxValueListEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS1A_OT0_E_JRNS0_6__baseILS15_1EJSG_SH_SL_SZ_S10_EEERKS1I_EEEDcS1A_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  char v6;

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 40) = -1;
  v3 = *(unsigned int *)(a3 + 40);
  if ((_DWORD)v3 != -1)
  {
    result = ((uint64_t (*)(char *))*(&off_1E33912A0 + v3))(&v6);
    *(_DWORD *)(a2 + 40) = v3;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore25CSSVariableReferenceValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_10CSSValueIDENS9_INSA_15CSSVariableDataENSC_ISI_EENSE_ISI_EEEENS_7variantIJNSA_6LengthENSA_22CSSCustomPropertyValue18NumericSyntaxValueENSA_10StyleColorENS8_6RefPtrINSA_10StyleImageENSC_ISS_EENSE_ISS_EEEENS8_3URLENS8_6StringENSO_20TransformSyntaxValueEEEENSO_15SyntaxValueListEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS1A_OT0_E_JRNS0_6__baseILS15_1EJSG_SH_SL_SZ_S10_EEERKS1I_EEEDcS1A_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v5 = *((unsigned int *)a3 + 3);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v5;
  if (!(_DWORD)v5)
  {
LABEL_8:
    *(_BYTE *)(a2 + 16) = *((_BYTE *)a3 + 16);
    return;
  }
  if (v5 < 0x5555556)
  {
    v6 = 48 * v5;
    v7 = WTF::fastMalloc((WTF *)(48 * v5));
    *(_DWORD *)(a2 + 8) = (v6 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)a2 = v7;
    v8 = *((unsigned int *)a3 + 3);
    if ((_DWORD)v8)
    {
      v9 = v7;
      v10 = *a3;
      v11 = 48 * v8;
      do
      {
        *(_BYTE *)v9 = 0;
        *(_DWORD *)(v9 + 40) = -1;
        v12 = *(unsigned int *)(v10 + 40);
        if ((_DWORD)v12 != -1)
        {
          ((void (*)(char *, uint64_t, uint64_t))*(&off_1E33912A0 + v12))(&v13, v9, v10);
          *(_DWORD *)(v9 + 40) = v12;
        }
        v9 += 48;
        v10 += 48;
        v11 -= 48;
      }
      while (v11);
    }
    goto LABEL_8;
  }
  __break(0xC471u);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSTransition::transitionProperty(void)::$_0,WebCore::CSSTransition::transitionProperty(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>@<X0>(unsigned __int16 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v4;

  result = WebCore::nameString(*a1);
  v4 = (_DWORD *)*result;
  if (*result)
    *v4 += 2;
  *a2 = v4;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSTransition::transitionProperty(void)::$_0,WebCore::CSSTransition::transitionProperty(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(_DWORD **a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  if (*a1)
    *v2 += 2;
  *a2 = v2;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::DocumentTimeline::*&)(void),WebCore::DocumentTimeline*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WebAnimation&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_13:
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD **)v3;
    ++*(_DWORD *)(a2 + 24);
    v13[v12] = a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  if (!(v8 >> 29))
  {
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

void **WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *result;
      v8 = *((unsigned int *)result + 3);
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *((_DWORD *)v6 + 2) = v5;
      *v6 = v9;
      result = (void **)memcpy(v9, v7, 8 * v8);
      if (v7)
      {
        if (*v6 == v7)
        {
          *v6 = 0;
          *((_DWORD *)v6 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v7, v10);
      }
    }
  }
  return result;
}

unsigned __int16 *WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::inlineSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int *v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  unsigned __int16 *result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unsigned __int16 *v26;
  int v27;
  uint64_t v28;
  _BOOL4 v30;
  _BOOL4 v31;
  BOOL v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v10 != -1)
  {
    v38 = &v37;
    v11 = ((uint64_t (*)(char **, uint64_t))off_1E33914E0[v10])(&v38, a2) & v9;
    v12 = (unsigned __int16 *)(v8 + 24 * v11);
    v14 = (unsigned int *)(v12 + 4);
    v13 = *((unsigned int *)v12 + 2);
    if (*((_DWORD *)v12 + 2))
      v15 = 0;
    else
      v15 = *v12 == 0;
    if (v15)
    {
LABEL_10:
      v16 = *(_DWORD *)(a2 + 8);
      if (v16 == -1)
      {
        v25 = 0;
        v26 = v12;
LABEL_23:
        ((void (*)(char **, unsigned __int16 *))off_1E338E948[v25])(&v38, v12);
        *((_DWORD *)v12 + 2) = -1;
      }
      else
      {
        v26 = v12;
LABEL_12:
        v38 = (char *)v26;
        ((void (*)(char **, unsigned __int16 *, uint64_t))off_1E33914F0[v16])(&v38, v26, a2);
      }
    }
    else
    {
      v36 = a4;
      v26 = 0;
      v27 = 1;
      do
      {
        v28 = *(unsigned int *)(a2 + 8);
        v30 = v28 == v13 && v28 != 0xFFFFFFFFLL;
        if (v13 == 0xFFFFFFFFLL || !v30)
        {
          v31 = v28 == 0xFFFFFFFFLL;
          if (v13 != 0xFFFFFFFFLL)
            v31 = v30;
          if (v31)
          {
LABEL_59:
            v33 = *a1;
            if (*a1)
              v34 = *(_DWORD *)(v33 - 4);
            else
              v34 = 0;
            *(_QWORD *)v36 = v12;
            *(_QWORD *)(v36 + 8) = v33 + 24 * v34;
            *(_BYTE *)(v36 + 16) = 0;
            v35 = *a3;
            *a3 = 0;
            result = (unsigned __int16 *)*((_QWORD *)v12 + 2);
            *((_QWORD *)v12 + 2) = v35;
            if (result)
            {
              if (*((_DWORD *)result + 6) == 1)
                return (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)result + 72))(result);
              --*((_DWORD *)result + 6);
            }
            return result;
          }
        }
        else
        {
          v38 = &v37;
          if ((((uint64_t (*)(char **, unsigned __int16 *, uint64_t))off_1E33914D0[v13])(&v38, v12, a2) & 1) != 0)
            goto LABEL_59;
          v13 = *v14;
        }
        if (v13 == 0xFFFFFFFFLL)
          goto LABEL_66;
        v38 = &v37;
        if (((unsigned int (*)(char **, unsigned __int16 *))off_1E338E9E8[v13])(&v38, v12))
          v26 = v12;
        v11 = (v11 + v27) & v9;
        v12 = (unsigned __int16 *)(v8 + 24 * v11);
        v14 = (unsigned int *)(v12 + 4);
        v13 = *((unsigned int *)v12 + 2);
        ++v27;
        if (*((_DWORD *)v12 + 2))
          v32 = 0;
        else
          v32 = *v12 == 0;
      }
      while (!v32);
      a4 = v36;
      if (!v26)
        goto LABEL_10;
      *(_QWORD *)v26 = 0;
      *((_QWORD *)v26 + 1) = 0;
      *((_QWORD *)v26 + 2) = 0;
      --*(_DWORD *)(*a1 - 16);
      v25 = *((_DWORD *)v26 + 2);
      v16 = *(_DWORD *)(a2 + 8);
      if (v25 != -1)
      {
        if (v16 != -1)
          goto LABEL_12;
        v12 = v26;
        goto LABEL_23;
      }
      if (v16 != -1)
        goto LABEL_12;
    }
    v17 = *a3;
    *a3 = 0;
    result = (unsigned __int16 *)*((_QWORD *)v26 + 2);
    *((_QWORD *)v26 + 2) = v17;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 1)
        result = (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)result + 72))(result);
      else
        --*((_DWORD *)result + 6);
    }
    v19 = *a1;
    if (*a1)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v21 = *a1;
    if (*a1)
      v22 = *(_DWORD *)(v21 - 12);
    else
      v22 = 0;
    v23 = (*(_DWORD *)(v21 - 16) + v22);
    v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 > 2 * v23)
        goto LABEL_20;
    }
    else if (3 * v24 > 4 * v23)
    {
LABEL_20:
      *(_QWORD *)a4 = v26;
      *(_QWORD *)(a4 + 8) = v21 + 24 * v24;
      *(_BYTE *)(a4 + 16) = 1;
      return result;
    }
    result = WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::expand(a1, v26);
    v26 = result;
    v21 = *a1;
    if (*a1)
      LODWORD(v24) = *(_DWORD *)(v21 - 4);
    else
      LODWORD(v24) = 0;
    goto LABEL_20;
  }
LABEL_66:
  result = (unsigned __int16 *)std::__throw_bad_variant_access[abi:sn180100]();
  return (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)result + 72))(result);
}

unsigned __int16 *WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::expand(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::isDeletedBucket(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char *v5;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::rehash(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, uint64_t))off_1E338E9E8[v1])(&v5, a1);
  }
}

unsigned __int16 *WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  unsigned __int16 *result;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  BOOL v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  result = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v12 = (unsigned __int16 *)v6;
    do
    {
      v13 = result;
      if ((WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::isDeletedBucket((uint64_t)v12) & 1) == 0)
      {
        if (*((_DWORD *)v12 + 2))
          v14 = 0;
        else
          v14 = *v12 == 0;
        if (v14)
        {
          WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>::~KeyValuePair((uint64_t)v12);
        }
        else
        {
          v15 = WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::reinsert(a1, (uint64_t)v12);
          WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>::~KeyValuePair((uint64_t)v12);
          if (v12 == a3)
            v13 = v15;
        }
      }
      v12 += 12;
      --v7;
      result = v13;
    }
    while (v7);
  }
  if (v6)
  {
    v16 = result;
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v16;
  }
  return result;
}

uint64_t WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>::~KeyValuePair(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  char v5;

  v2 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    if (v2[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 72))(v2);
    else
      --v2[6];
  }
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E338E948[v3])(&v5, a1);
  *(_DWORD *)(a1 + 8) = -1;
  return a1;
}

unsigned __int16 *WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::reinsert(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned __int16 *v9;
  BOOL v10;
  uint64_t v11;
  _DWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v24;
  char v25;
  char v26;

  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 8);
  else
    v4 = 0;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 == -1)
  {
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int16 *)WTF::HashTable<WebCore::KeyframeEffectStack *,WebCore::KeyframeEffectStack *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>>::reinsert(v21, v22);
  }
  v24 = &v23;
  v6 = ((uint64_t (*)(char **, uint64_t))off_1E33914E0[v5])(&v24, a2);
  v7 = 0;
  do
  {
    v8 = v6 & v4;
    v9 = (unsigned __int16 *)(v3 + 24 * (v6 & v4));
    v6 = ++v7 + (v6 & v4);
    if (*((_DWORD *)v9 + 2))
      v10 = 0;
    else
      v10 = *v9 == 0;
  }
  while (!v10);
  v11 = v3 + 24 * v8;
  v14 = *(_DWORD **)(v11 + 16);
  v13 = (_QWORD *)(v11 + 16);
  v12 = v14;
  *v13 = 0;
  if (v14)
  {
    v19 = v12[6];
    v20 = v19 - 1;
    if (v19 == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 72))(v12);
      v15 = *((_DWORD *)v9 + 2);
      if (v15 == -1)
        goto LABEL_13;
    }
    else
    {
      v15 = 0;
      v12[6] = v20;
    }
  }
  else
  {
    v15 = 0;
  }
  ((void (*)(char *, unsigned __int16 *))off_1E338E948[v15])(&v25, v9);
LABEL_13:
  *(_BYTE *)v9 = 0;
  *((_DWORD *)v9 + 2) = -1;
  v16 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v16 != -1)
  {
    ((void (*)(char *, unsigned __int16 *, uint64_t))off_1E338E9D8[v16])(&v26, v9, a2);
    *((_DWORD *)v9 + 2) = v16;
  }
  v17 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *v13 = v17;
  return v9;
}

_QWORD *WTF::HashTable<WebCore::KeyframeEffectStack *,WebCore::KeyframeEffectStack *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>>::reinsert(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *result;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 8 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (v9);
  result = (_QWORD *)(a1 + 8 * v8);
  *result = a2;
  return result;
}

void **WTF::Vector<WTF::Ref<WebCore::DocumentTimeline,WTF::RawPtrTraits<WebCore::DocumentTimeline>,WTF::DefaultRefDerefTraits<WebCore::DocumentTimeline>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *result;
      v8 = *((unsigned int *)result + 3);
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *((_DWORD *)v6 + 2) = v5;
      *v6 = v9;
      result = (void **)memcpy(v9, v7, 8 * v8);
      if (v7)
      {
        if (*v6 == v7)
        {
          *v6 = 0;
          *((_DWORD *)v6 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v7, v10);
      }
    }
  }
  return result;
}

const WebCore::AnimationEventBase *std::__stable_sort<std::_ClassicAlgPolicy,WebCore::DocumentTimelinesController::updateAnimationsAndSendEvents(WTF::Seconds)::$_0 &,WTF::Ref<WebCore::AnimationEventBase,WTF::RawPtrTraits<WebCore::AnimationEventBase>,WTF::DefaultRefDerefTraits<WebCore::AnimationEventBase>> *>(const WebCore::AnimationEventBase *result, WebCore **a2, unint64_t a3, const WebCore::AnimationEventBase **a4, uint64_t a5)
{
  const WebCore::AnimationEventBase **v6;
  WebCore *v7;
  const WebCore::AnimationEventBase *v8;
  const WebCore::AnimationEventBase *v9;
  const WebCore::AnimationEventBase **v12;
  unint64_t v13;
  WebCore **v14;
  const WebCore::AnimationEventBase *v15;
  const WebCore::AnimationEventBase **v16;
  uint64_t v17;
  const WebCore::AnimationEventBase **v18;
  WebCore *v19;
  const WebCore::AnimationEventBase *v20;
  _DWORD *v21;
  WebCore *v22;
  uint64_t i;
  _QWORD *v24;
  uint64_t v25;
  const WebCore::AnimationEventBase **v26;
  const WebCore::AnimationEventBase **v27;
  const WebCore::AnimationEventBase *v28;
  WebCore **v29;
  WebCore **v30;
  const WebCore::AnimationEventBase **v31;
  WebCore *v32;
  const WebCore::AnimationEventBase *v33;
  uint64_t v34;
  const WebCore::AnimationEventBase *v35;
  uint64_t v36;
  WebCore *v37;
  unint64_t v38;

  if (a3 < 2)
    return result;
  v6 = (const WebCore::AnimationEventBase **)result;
  if (a3 == 2)
  {
    result = (const WebCore::AnimationEventBase *)WebCore::compareAnimationEventsByCompositeOrder(*(a2 - 1), *(const WebCore::AnimationEventBase **)result, (const WebCore::AnimationEventBase *)2);
    if ((_DWORD)result)
    {
      v7 = *v6;
      *v6 = 0;
      v8 = *(a2 - 1);
      *(a2 - 1) = 0;
      v9 = *v6;
      *v6 = v8;
      if (v9)
      {
        if (*((_DWORD *)v9 + 4) == 1)
          (*(void (**)(const WebCore::AnimationEventBase *))(*(_QWORD *)v9 + 8))(v9);
        else
          --*((_DWORD *)v9 + 4);
      }
      result = *(a2 - 1);
      *(a2 - 1) = v7;
      if (result)
      {
        if (*((_DWORD *)result + 4) == 1)
          return (const WebCore::AnimationEventBase *)(*(uint64_t (**)(const WebCore::AnimationEventBase *))(*(_QWORD *)result + 8))(result);
        else
          --*((_DWORD *)result + 4);
      }
    }
    return result;
  }
  if ((uint64_t)a3 > 0)
  {
    v12 = a4;
    v13 = a3 >> 1;
    v14 = (WebCore **)((char *)result + 8 * (a3 >> 1));
    v15 = (const WebCore::AnimationEventBase *)(a3 >> 1);
    if ((uint64_t)a3 <= a5)
    {
      std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::DocumentTimelinesController::updateAnimationsAndSendEvents(WTF::Seconds)::$_0 &,WTF::Ref<WebCore::AnimationEventBase,WTF::RawPtrTraits<WebCore::AnimationEventBase>,WTF::DefaultRefDerefTraits<WebCore::AnimationEventBase>> *>((uint64_t)result, v14, v15, a4);
      v27 = &v12[v13];
      result = (const WebCore::AnimationEventBase *)std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::DocumentTimelinesController::updateAnimationsAndSendEvents(WTF::Seconds)::$_0 &,WTF::Ref<WebCore::AnimationEventBase,WTF::RawPtrTraits<WebCore::AnimationEventBase>,WTF::DefaultRefDerefTraits<WebCore::AnimationEventBase>> *>((uint64_t)&v6[a3 >> 1], a2, (const WebCore::AnimationEventBase *)(a3 - (a3 >> 1)), v27);
      v29 = &v12[a3];
      v30 = v27;
      v31 = v12;
      while (v30 != v29)
      {
        if (WebCore::compareAnimationEventsByCompositeOrder(*v30, *v31, v28))
        {
          v32 = *v30;
          *v30 = 0;
          result = *v6;
          *v6 = v32;
          if (result)
          {
            if (*((_DWORD *)result + 4) == 1)
              result = (const WebCore::AnimationEventBase *)(*(uint64_t (**)(const WebCore::AnimationEventBase *))(*(_QWORD *)result + 8))(result);
            else
              --*((_DWORD *)result + 4);
          }
          ++v30;
        }
        else
        {
          v33 = *v31;
          *v31 = 0;
          result = *v6;
          *v6 = v33;
          if (result)
          {
            if (*((_DWORD *)result + 4) == 1)
              result = (const WebCore::AnimationEventBase *)(*(uint64_t (**)(const WebCore::AnimationEventBase *))(*(_QWORD *)result + 8))(result);
            else
              --*((_DWORD *)result + 4);
          }
          ++v31;
        }
        ++v6;
        if (v31 == v27)
        {
          if (v30 != v29)
          {
            v36 = 0;
            do
            {
              v37 = v30[v36];
              v30[v36] = 0;
              result = v6[v36];
              v6[v36] = v37;
              if (result)
              {
                if (*((_DWORD *)result + 4) == 1)
                  result = (const WebCore::AnimationEventBase *)(*(uint64_t (**)(const WebCore::AnimationEventBase *))(*(_QWORD *)result + 8))(result);
                else
                  --*((_DWORD *)result + 4);
              }
              ++v36;
            }
            while (&v30[v36] != v29);
          }
          goto LABEL_63;
        }
      }
      if (v31 != v27)
      {
        v34 = 0;
        do
        {
          v35 = v31[v34];
          v31[v34] = 0;
          result = v6[v34];
          v6[v34] = v35;
          if (result)
          {
            if (*((_DWORD *)result + 4) == 1)
              result = (const WebCore::AnimationEventBase *)(*(uint64_t (**)(const WebCore::AnimationEventBase *))(*(_QWORD *)result + 8))(result);
            else
              --*((_DWORD *)result + 4);
          }
          ++v34;
        }
        while (&v31[v34] != v27);
      }
LABEL_63:
      if (v12)
      {
        v38 = a3;
        do
        {
          result = *v12;
          *v12 = 0;
          if (result)
          {
            if (*((_DWORD *)result + 4) == 1)
              result = (const WebCore::AnimationEventBase *)(*(uint64_t (**)(const WebCore::AnimationEventBase *))(*(_QWORD *)result + 8))(result);
            else
              --*((_DWORD *)result + 4);
          }
          ++v12;
          --v38;
        }
        while (v38);
      }
    }
    else
    {
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::DocumentTimelinesController::updateAnimationsAndSendEvents(WTF::Seconds)::$_0 &,WTF::Ref<WebCore::AnimationEventBase,WTF::RawPtrTraits<WebCore::AnimationEventBase>,WTF::DefaultRefDerefTraits<WebCore::AnimationEventBase>> *>(result, v14, v15, a4, a5);
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::DocumentTimelinesController::updateAnimationsAndSendEvents(WTF::Seconds)::$_0 &,WTF::Ref<WebCore::AnimationEventBase,WTF::RawPtrTraits<WebCore::AnimationEventBase>,WTF::DefaultRefDerefTraits<WebCore::AnimationEventBase>> *>(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v12, a5);
      return (const WebCore::AnimationEventBase *)std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::DocumentTimelinesController::updateAnimationsAndSendEvents(WTF::Seconds)::$_0 &,WTF::Ref<WebCore::AnimationEventBase,WTF::RawPtrTraits<WebCore::AnimationEventBase>,WTF::DefaultRefDerefTraits<WebCore::AnimationEventBase>> *>((uint64_t)v6, &v6[a3 >> 1], (const WebCore::AnimationEventBase *)a2, a3 >> 1, a3 - (a3 >> 1), v12, a5);
    }
    return result;
  }
  if (result == (const WebCore::AnimationEventBase *)a2)
    return result;
  v16 = (const WebCore::AnimationEventBase **)((char *)result + 8);
  if ((WebCore **)((char *)result + 8) == a2)
    return result;
  v17 = 0;
  v18 = (const WebCore::AnimationEventBase **)result;
  do
  {
    v20 = *v18;
    v19 = v18[1];
    v18 = v16;
    result = (const WebCore::AnimationEventBase *)WebCore::compareAnimationEventsByCompositeOrder(v19, v20, (const WebCore::AnimationEventBase *)a3);
    if (!(_DWORD)result)
      goto LABEL_29;
    v21 = 0;
    v22 = *v18;
    *v18 = 0;
    for (i = v17; ; i -= 8)
    {
      v24 = (const WebCore::AnimationEventBase **)((char *)v6 + i);
      v25 = *(uint64_t *)((char *)v6 + i);
      *v24 = 0;
      v24[1] = v25;
      if (!v21)
        goto LABEL_21;
      if (v21[4] == 1)
        break;
      --v21[4];
LABEL_21:
      if (!i)
        goto LABEL_25;
LABEL_22:
      v26 = (const WebCore::AnimationEventBase **)((char *)v6 + i);
      if ((WebCore::compareAnimationEventsByCompositeOrder(v22, *(const WebCore::AnimationEventBase **)((char *)v6 + i - 8), (const WebCore::AnimationEventBase *)a3) & 1) == 0)goto LABEL_26;
      v21 = (_DWORD *)*v24;
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    if (i)
      goto LABEL_22;
LABEL_25:
    v26 = v6;
LABEL_26:
    result = *v26;
    *v26 = v22;
    if (result)
    {
      if (*((_DWORD *)result + 4) == 1)
        result = (const WebCore::AnimationEventBase *)(*(uint64_t (**)(const WebCore::AnimationEventBase *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 4);
    }
LABEL_29:
    v16 = v18 + 1;
    v17 += 8;
  }
  while (v18 + 1 != a2);
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::DocumentTimelinesController::updateAnimationsAndSendEvents(WTF::Seconds)::$_0 &,WTF::Ref<WebCore::AnimationEventBase,WTF::RawPtrTraits<WebCore::AnimationEventBase>,WTF::DefaultRefDerefTraits<WebCore::AnimationEventBase>> *>(uint64_t result, WebCore **a2, const WebCore::AnimationEventBase *a3, const WebCore::AnimationEventBase **a4)
{
  const WebCore::AnimationEventBase **v4;
  const WebCore::AnimationEventBase **v6;
  const WebCore::AnimationEventBase **v8;
  const WebCore::AnimationEventBase **v9;
  const WebCore::AnimationEventBase *v10;
  const WebCore::AnimationEventBase *v11;
  const WebCore::AnimationEventBase *v12;
  WebCore **v13;
  uint64_t v14;
  const WebCore::AnimationEventBase **v15;
  const WebCore::AnimationEventBase **v16;
  const WebCore::AnimationEventBase *v17;
  const WebCore::AnimationEventBase *v18;
  uint64_t *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  WebCore *v23;
  WebCore *v24;
  const WebCore::AnimationEventBase **v25;
  const WebCore::AnimationEventBase *v26;
  WebCore **v27;
  WebCore *v28;
  uint64_t v29;
  WebCore *v30;
  uint64_t v31;
  const WebCore::AnimationEventBase *v32;

  if (a3)
  {
    v4 = a4;
    v6 = (const WebCore::AnimationEventBase **)result;
    if (a3 == (const WebCore::AnimationEventBase *)1)
    {
LABEL_9:
      v11 = *v6;
      *v6 = 0;
      *v4 = v11;
      return result;
    }
    if (a3 == (const WebCore::AnimationEventBase *)2)
    {
      v8 = a2 - 1;
      result = WebCore::compareAnimationEventsByCompositeOrder(*(a2 - 1), *(const WebCore::AnimationEventBase **)result, (const WebCore::AnimationEventBase *)2);
      if ((_DWORD)result)
        v9 = v8;
      else
        v9 = v6;
      v10 = *v9;
      *v9 = 0;
      *v4++ = v10;
      if (!(_DWORD)result)
        v6 = v8;
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      v25 = (const WebCore::AnimationEventBase **)(result + 8 * ((unint64_t)a3 >> 1));
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::DocumentTimelinesController::updateAnimationsAndSendEvents(WTF::Seconds)::$_0 &,WTF::Ref<WebCore::AnimationEventBase,WTF::RawPtrTraits<WebCore::AnimationEventBase>,WTF::DefaultRefDerefTraits<WebCore::AnimationEventBase>> *>(result, v25, (unint64_t)a3 >> 1, a4, (unint64_t)a3 >> 1);
      result = std::__stable_sort<std::_ClassicAlgPolicy,WebCore::DocumentTimelinesController::updateAnimationsAndSendEvents(WTF::Seconds)::$_0 &,WTF::Ref<WebCore::AnimationEventBase,WTF::RawPtrTraits<WebCore::AnimationEventBase>,WTF::DefaultRefDerefTraits<WebCore::AnimationEventBase>> *>(&v6[(unint64_t)a3 >> 1], a2, (char *)a3 - ((unint64_t)a3 >> 1), &v4[(unint64_t)a3 >> 1], (char *)a3 - ((unint64_t)a3 >> 1));
      v27 = &v6[(unint64_t)a3 >> 1];
      while (v27 != a2)
      {
        result = WebCore::compareAnimationEventsByCompositeOrder(*v27, *v6, v26);
        if ((_DWORD)result)
        {
          v28 = *v27;
          *v27++ = 0;
        }
        else
        {
          v28 = *v6;
          *v6++ = 0;
        }
        *v4++ = v28;
        if (v6 == v25)
        {
          if (v27 != a2)
          {
            v29 = 0;
            do
            {
              v30 = v27[v29];
              v27[v29] = 0;
              v4[v29++] = v30;
            }
            while (&v27[v29] != a2);
          }
          return result;
        }
      }
      if (v6 != v25)
      {
        v31 = 0;
        do
        {
          v32 = v6[v31];
          v6[v31] = 0;
          v4[v31++] = v32;
        }
        while (&v6[v31] != v25);
      }
    }
    else if ((WebCore **)result != a2)
    {
      v12 = *(const WebCore::AnimationEventBase **)result;
      *(_QWORD *)result = 0;
      v13 = (WebCore **)(result + 8);
      *a4 = v12;
      if ((WebCore **)(result + 8) != a2)
      {
        v14 = 0;
        v15 = a4;
        do
        {
          v16 = v15;
          v17 = *v15++;
          result = WebCore::compareAnimationEventsByCompositeOrder(*v13, v17, a3);
          if ((_DWORD)result)
          {
            v18 = *v16;
            *v16 = 0;
            v16[1] = v18;
            v19 = (uint64_t *)v4;
            if (v16 != v4)
            {
              v20 = v14;
              while (1)
              {
                v19 = (uint64_t *)((char *)v4 + v20);
                if (!WebCore::compareAnimationEventsByCompositeOrder(*v13, *(const WebCore::AnimationEventBase **)((char *)v4 + v20 - 8), a3))break;
                v22 = (_DWORD *)*(v19 - 1);
                v21 = (_DWORD *)*v19;
                *(v19 - 1) = 0;
                *v19 = (uint64_t)v22;
                if (v21)
                {
                  if (v21[4] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
                  else
                    --v21[4];
                }
                v20 -= 8;
                if (!v20)
                {
                  v19 = (uint64_t *)v4;
                  break;
                }
              }
            }
            v24 = *v13;
            *v13 = 0;
            result = *v19;
            *v19 = (uint64_t)v24;
            if (result)
            {
              if (*(_DWORD *)(result + 16) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              else
                --*(_DWORD *)(result + 16);
            }
          }
          else
          {
            v23 = *v13;
            *v13 = 0;
            *v15 = v23;
          }
          ++v13;
          v14 += 8;
        }
        while (v13 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::DocumentTimelinesController::updateAnimationsAndSendEvents(WTF::Seconds)::$_0 &,WTF::Ref<WebCore::AnimationEventBase,WTF::RawPtrTraits<WebCore::AnimationEventBase>,WTF::DefaultRefDerefTraits<WebCore::AnimationEventBase>> *>(uint64_t result, WebCore **a2, const WebCore::AnimationEventBase *a3, uint64_t a4, uint64_t a5, const WebCore::AnimationEventBase **a6, uint64_t a7)
{
  uint64_t v9;
  WebCore **v11;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  WebCore **v16;
  uint64_t v17;
  uint64_t v18;
  WebCore **v19;
  unint64_t v20;
  const WebCore::AnimationEventBase **v21;
  const WebCore::AnimationEventBase **v22;
  const WebCore::AnimationEventBase *v23;
  WebCore **v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  WebCore **v28;
  WebCore **v29;
  WebCore *v30;
  int v31;
  WebCore **v32;
  WebCore **v33;
  WebCore **v34;
  WebCore *v35;
  WebCore *v36;
  _DWORD *v37;
  _DWORD *v38;
  WebCore **v39;
  WebCore **v40;
  WebCore *v41;
  WebCore *v42;
  WebCore *v43;
  WebCore *v44;
  uint64_t v45;
  uint64_t v46;
  WebCore **v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  WebCore *v53;
  const WebCore::AnimationEventBase **v54;
  uint64_t *v55;
  WebCore **v56;
  uint64_t *v57;
  WebCore *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const WebCore::AnimationEventBase **v62;
  uint64_t v63;
  const WebCore::AnimationEventBase **v64;
  WebCore *v65;
  const WebCore::AnimationEventBase *v66;
  WebCore *v67;
  WebCore *v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const WebCore::AnimationEventBase *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const WebCore::AnimationEventBase **v78;
  uint64_t v79;
  uint64_t *v80;
  WebCore **v81;

  if (a5)
  {
    v9 = a5;
    v11 = (WebCore **)a3;
    v13 = (uint64_t *)result;
    while (a4 > a7 && v9 > a7)
    {
      if (!a4)
        return result;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        result = WebCore::compareAnimationEventsByCompositeOrder(*a2, (const WebCore::AnimationEventBase *)v13[v15], a3);
        if ((result & 1) != 0)
          break;
        ++v15;
        v14 -= 8;
        if (a4 == v15)
          return result;
      }
      v16 = (WebCore **)&v13[v14 / 0xFFFFFFFFFFFFFFF8];
      v80 = &v13[v14 / 0xFFFFFFFFFFFFFFF8];
      v81 = v11;
      v78 = a6;
      v79 = a7;
      if (a4 - v15 >= v9)
      {
        if (a4 - 1 == v15)
        {
          v67 = (WebCore *)v13[v15];
          v13[v15] = 0;
          v68 = *a2;
          *a2 = 0;
          v69 = (_DWORD *)v13[v15];
          v13[v15] = (uint64_t)v68;
          if (v69)
          {
            if (v69[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v69 + 8))(v69);
            else
              --v69[4];
          }
          result = (uint64_t)*a2;
          *a2 = v67;
          if (result)
          {
            if (*(_DWORD *)(result + 16) == 1)
              return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            else
              --*(_DWORD *)(result + 16);
          }
          return result;
        }
        v25 = (a4 - v15) / 2;
        v26 = &v13[v25];
        if (v11 == a2)
        {
          v32 = v11;
        }
        else
        {
          v27 = v11 - a2;
          v11 = a2;
          do
          {
            v28 = &v11[v27 >> 1];
            v30 = *v28;
            v29 = v28 + 1;
            v31 = WebCore::compareAnimationEventsByCompositeOrder(v30, (const WebCore::AnimationEventBase *)v26[v15], a3);
            if (v31)
              v27 += ~(v27 >> 1);
            else
              v27 >>= 1;
            if (v31)
              v11 = v29;
          }
          while (v27);
          v32 = a2;
          v25 = (a4 - v15) / 2;
          v16 = (WebCore **)v80;
        }
        v19 = (WebCore **)&v26[v14 / 0xFFFFFFFFFFFFFFF8];
        v18 = v11 - v32;
        a7 = v79;
      }
      else
      {
        if (v9 >= 0)
          v17 = v9;
        else
          v17 = v9 + 1;
        v18 = v17 >> 1;
        v11 = &a2[v17 >> 1];
        if (v16 == a2)
        {
          v19 = a2;
          v24 = a2;
        }
        else
        {
          v76 = v17 >> 1;
          v19 = (WebCore **)&v13[v14 / 0xFFFFFFFFFFFFFFF8];
          v20 = (uint64_t)((char *)a2 - (char *)v13 + v14) >> 3;
          do
          {
            v21 = &v19[v20 >> 1];
            v23 = *v21;
            v22 = v21 + 1;
            if (WebCore::compareAnimationEventsByCompositeOrder(*v11, v23, a3))
            {
              v20 >>= 1;
            }
            else
            {
              v19 = v22;
              v20 += ~(v20 >> 1);
            }
          }
          while (v20);
          v16 = (WebCore **)v80;
          v24 = (WebCore **)v80;
          v18 = v76;
        }
        v25 = v19 - v24;
      }
      v33 = v11;
      if (v19 != a2)
      {
        v33 = v19;
        if (a2 != v11)
        {
          v33 = v19 + 1;
          v34 = a2 + 1;
          v75 = v25;
          v77 = v18;
          while (1)
          {
            v35 = *(v33 - 1);
            *(v33 - 1) = 0;
            v36 = *(v34 - 1);
            *(v34 - 1) = 0;
            v37 = *(v33 - 1);
            *(v33 - 1) = v36;
            if (v37)
            {
              if (v37[4] == 1)
              {
                (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
                v25 = v75;
                v18 = v77;
              }
              else
              {
                --v37[4];
              }
            }
            v38 = *(v34 - 1);
            *(v34 - 1) = v35;
            if (v38)
            {
              if (v38[4] == 1)
              {
                (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
                v25 = v75;
                v18 = v77;
              }
              else
              {
                --v38[4];
              }
            }
            if (v34 == v11)
              break;
            if (v33 == a2)
              a2 = v34;
            ++v33;
            ++v34;
          }
          if (v33 == a2)
          {
            v33 = a2;
            a7 = v79;
          }
          else
          {
            v39 = v33;
            v40 = a2;
            do
            {
              while (1)
              {
                v41 = *v39;
                *v39 = 0;
                v42 = *a2;
                *a2 = 0;
                v43 = *v39;
                *v39 = v42;
                if (v43)
                {
                  if (*((_DWORD *)v43 + 4) == 1)
                  {
                    (*(void (**)(WebCore *))(*(_QWORD *)v43 + 8))(v43);
                    v25 = v75;
                    v18 = v77;
                  }
                  else
                  {
                    --*((_DWORD *)v43 + 4);
                  }
                }
                v44 = *a2;
                *a2 = v41;
                if (v44)
                {
                  if (*((_DWORD *)v44 + 4) == 1)
                  {
                    (*(void (**)(WebCore *))(*(_QWORD *)v44 + 8))(v44);
                    v25 = v75;
                    v18 = v77;
                  }
                  else
                  {
                    --*((_DWORD *)v44 + 4);
                  }
                }
                ++v39;
                if (++a2 == v11)
                  break;
                if (v39 == v40)
                  v40 = a2;
              }
              a2 = v40;
            }
            while (v39 != v40);
            a7 = v79;
            v16 = (WebCore **)v80;
          }
        }
      }
      v45 = a4 - v25 - v15;
      v46 = v9 - v18;
      if (v25 + v18 >= v9 + a4 - (v25 + v18) - v15)
      {
        v49 = v25;
        v50 = v18;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::DocumentTimelinesController::updateAnimationsAndSendEvents(WTF::Seconds)::$_0 &,WTF::Ref<WebCore::AnimationEventBase,WTF::RawPtrTraits<WebCore::AnimationEventBase>,WTF::DefaultRefDerefTraits<WebCore::AnimationEventBase>> *>(v33, v11, v81, a4 - v25 - v15, v46, v78, a7);
        v11 = v19;
        a6 = v78;
        v48 = v80;
        v46 = v50;
        v45 = v49;
        v81 = v33;
      }
      else
      {
        v47 = v19;
        a6 = v78;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::DocumentTimelinesController::updateAnimationsAndSendEvents(WTF::Seconds)::$_0 &,WTF::Ref<WebCore::AnimationEventBase,WTF::RawPtrTraits<WebCore::AnimationEventBase>,WTF::DefaultRefDerefTraits<WebCore::AnimationEventBase>> *>(v16, v47, v33, v25, v18, v78, a7);
        v48 = (uint64_t *)v33;
      }
      a4 = v45;
      v9 = v46;
      v13 = v48;
      a2 = v11;
      v11 = v81;
      if (!v46)
        return result;
    }
    if (a4 <= v9)
    {
      if (v13 == (uint64_t *)a2)
        return result;
      v60 = 0;
      v52 = 0;
      do
      {
        v61 = v13[v60];
        v13[v60] = 0;
        a6[v60] = (const WebCore::AnimationEventBase *)v61;
        ++v52;
        ++v60;
      }
      while (&v13[v60] != (uint64_t *)a2);
      if (v60 * 8)
      {
        v62 = &a6[v60];
        v63 = (uint64_t)&a6[v60 - 1];
        v64 = a6;
        while (a2 != v11)
        {
          if (WebCore::compareAnimationEventsByCompositeOrder(*a2, *v64, a3))
          {
            v65 = *a2;
            *a2 = 0;
            result = *v13;
            *v13 = (uint64_t)v65;
            if (result)
            {
              if (*(_DWORD *)(result + 16) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              else
                --*(_DWORD *)(result + 16);
            }
            ++a2;
          }
          else
          {
            v66 = *v64;
            *v64 = 0;
            result = *v13;
            *v13 = (uint64_t)v66;
            if (result)
            {
              if (*(_DWORD *)(result + 16) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              else
                --*(_DWORD *)(result + 16);
            }
            ++v64;
          }
          ++v13;
          if (v62 == v64)
            goto LABEL_130;
        }
        v72 = 0;
        do
        {
          v73 = v64[v72];
          v64[v72] = 0;
          result = v13[v72];
          v13[v72] = (uint64_t)v73;
          if (result)
          {
            if (*(_DWORD *)(result + 16) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            else
              --*(_DWORD *)(result + 16);
          }
          ++v72;
        }
        while ((const WebCore::AnimationEventBase **)v63 != &v64[v72 - 1]);
      }
    }
    else
    {
      if (a2 == v11)
        return result;
      v51 = 0;
      v52 = 0;
      do
      {
        v53 = a2[v51];
        a2[v51] = 0;
        a6[v51] = v53;
        ++v52;
        ++v51;
      }
      while (&a2[v51] != v11);
      if (v51 * 8)
      {
        v54 = &a6[v51];
        v55 = (uint64_t *)(v11 - 1);
        while (a2 != (WebCore **)v13)
        {
          v56 = a2 - 1;
          v57 = (uint64_t *)(v54 - 1);
          if (WebCore::compareAnimationEventsByCompositeOrder(*(v54 - 1), *(a2 - 1), a3))
          {
            v58 = *v56;
            *v56 = 0;
            result = *v55;
            *v55 = (uint64_t)v58;
            if (result)
            {
              if (*(_DWORD *)(result + 16) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              else
                --*(_DWORD *)(result + 16);
            }
          }
          else
          {
            v59 = *v57;
            *v57 = 0;
            result = *v55;
            *v55 = v59;
            if (result)
            {
              if (*(_DWORD *)(result + 16) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              else
                --*(_DWORD *)(result + 16);
            }
            v56 = a2;
            --v54;
          }
          --v55;
          a2 = v56;
          if (v54 == a6)
            goto LABEL_130;
        }
        v70 = 0;
        do
        {
          v71 = (uint64_t)v54[v70 - 1];
          v54[v70 - 1] = 0;
          result = v55[v70];
          v55[v70] = v71;
          if (result)
          {
            if (*(_DWORD *)(result + 16) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            else
              --*(_DWORD *)(result + 16);
          }
          --v70;
        }
        while (&v54[v70] != a6);
      }
    }
LABEL_130:
    if (a6)
    {
      v74 = 0;
      do
      {
        result = (uint64_t)a6[v74];
        a6[v74] = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 16) == 1)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          else
            --*(_DWORD *)(result + 16);
        }
        ++v74;
      }
      while (v74 < v52);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CancellableTask,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3391560;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DocumentTimelinesController::cacheCurrentTime(WTF::Seconds)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E3391538;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentTimelinesController::cacheCurrentTime(WTF::Seconds)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E3391538;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentTimelinesController::cacheCurrentTime(WTF::Seconds)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(result + 8);
  *(_BYTE *)(v1 + 81) = 0;
  if (!*(_BYTE *)(v1 + 80))
  {
    v2 = **(unsigned int ***)(v1 + 40);
    if (!v2 || (v3 = atomic_load(v2), v3 == 1))
      *(_QWORD *)(v1 + 72) = 0x7FF8000000000000;
  }
  return result;
}

void WebCore::ElementAnimationRareData::~ElementAnimationRareData(WebCore::ElementAnimationRareData *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  void *v4;
  void *v5;
  __n128 v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WebCore::RenderStyle *v11;
  WTF *v12;
  WebCore::KeyframeEffectStack *v13;
  WTF *v14;
  void *v15;
  WTF *v16;
  _DWORD *v17;
  WTF *v18;
  _DWORD *v19;

  if (*((_BYTE *)this + 96))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::~HashTable((uint64_t *)this + 9, a2);
  v6.n128_f64[0] = WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::~HashTable((uint64_t *)this + 8, v4);
  v7 = (WTF *)*((_QWORD *)this + 6);
  if (v7)
  {
    do
    {
      v18 = (WTF *)*((_QWORD *)v7 + 2);
      v19 = *(_DWORD **)v7;
      *(_QWORD *)v7 = 0;
      if (v19)
      {
        if (v19[6] == 1)
          (*(void (**)(_DWORD *, __n128))(*(_QWORD *)v19 + 72))(v19, v6);
        else
          --v19[6];
      }
      WTF::fastFree(v7, v5);
      v7 = v18;
    }
    while (v18);
  }
  v8 = *((_QWORD *)this + 5);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), v5);
  v9 = (WTF *)*((_QWORD *)this + 3);
  while (v9)
  {
    v16 = v9;
    v9 = (WTF *)*((_QWORD *)v9 + 2);
    v17 = *(_DWORD **)v16;
    *(_QWORD *)v16 = 0;
    if (v17)
    {
      if (v17[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 72))(v17);
      else
        --v17[6];
    }
    WTF::fastFree(v16, v5);
  }
  v10 = *((_QWORD *)this + 2);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), v5);
  v11 = (WebCore::RenderStyle *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
  {
    WebCore::RenderStyle::~RenderStyle(v11, v5);
    if (*(_DWORD *)v12)
    {
      *((_OWORD *)v12 + 2) = 0u;
      *((_OWORD *)v12 + 3) = 0u;
      *(_OWORD *)v12 = 0u;
      *((_OWORD *)v12 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v12, v5);
    }
  }
  v13 = *(WebCore::KeyframeEffectStack **)this;
  *(_QWORD *)this = 0;
  if (v13)
  {
    WebCore::KeyframeEffectStack::~KeyframeEffectStack(v13, (WTF::StringImpl *)v5);
    WTF::fastFree(v14, v15);
  }
}

void WebCore::FrameRateAligner::beginUpdate(double *a1, uint64_t a2, double a3, long double a4)
{
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  long double v14;
  long double v15;
  double v16;
  double v17;
  long double v18;
  long double v19;
  uint64_t v20;

  a1[1] = a3;
  v5 = *a1;
  if (!*(_QWORD *)a1)
  {
    v8 = 0.0;
    v6 = 0;
LABEL_33:
    *(_QWORD *)&v7 = *(_QWORD *)&v5 + 32 * v6;
    goto LABEL_8;
  }
  v6 = *(unsigned int *)(*(_QWORD *)&v5 - 4);
  *(_QWORD *)&v7 = *(_QWORD *)&v5 + 32 * v6;
  if (!*(_DWORD *)(*(_QWORD *)&v5 - 12))
  {
    *(_QWORD *)&v8 = *(_QWORD *)&v5 + 32 * v6;
    goto LABEL_33;
  }
  v8 = *a1;
  if ((_DWORD)v6)
  {
    v9 = 32 * v6;
    v8 = *a1;
    while ((**(_DWORD **)&v8 + 1) <= 1)
    {
      *(_QWORD *)&v8 += 32;
      v9 -= 32;
      if (!v9)
      {
        v8 = v7;
        break;
      }
    }
  }
LABEL_8:
  if (v5 == 0.0)
    v10 = 0;
  else
    v10 = *(_QWORD *)&v5 + 32 * *(unsigned int *)(*(_QWORD *)&v5 - 4);
  if (v10 == *(_QWORD *)&v8)
    return;
  if ((a2 & 0xFF00000000) != 0)
  {
    while (1)
    {
      *(_BYTE *)(*(_QWORD *)&v8 + 24) = 0;
      if (**(_DWORD **)&v8 == (_DWORD)a2)
      {
        v11 = (double *)(*(_QWORD *)&v8 + 16);
      }
      else
      {
        v11 = (double *)(*(_QWORD *)&v8 + 16);
        v17 = *(double *)(*(_QWORD *)&v8 + 16);
        v18 = 1.0 / (double)**(_DWORD **)&v8;
        v20 = a2;
        v19 = fmod(v17 - *(double *)(*(_QWORD *)&v8 + 8), v18);
        a2 = v20;
        if (v18 + v17 - v19 + -0.001 > a3)
          goto LABEL_16;
      }
      *v11 = a3;
LABEL_16:
      *(_QWORD *)&v12 = *(_QWORD *)&v8 + 32;
      v8 = v7;
      if (*(_QWORD *)&v12 != *(_QWORD *)&v7)
      {
        v8 = v12;
        while ((**(_DWORD **)&v8 + 1) <= 1)
        {
          *(_QWORD *)&v8 += 32;
          if (*(_QWORD *)&v8 == *(_QWORD *)&v7)
          {
            v8 = v7;
            break;
          }
        }
      }
      if (*(_QWORD *)&v8 == v10)
        return;
    }
  }
  do
  {
    *(_BYTE *)(*(_QWORD *)&v8 + 24) = 0;
    v13 = *(double *)(*(_QWORD *)&v8 + 16);
    LODWORD(a4) = **(_DWORD **)&v8;
    v14 = 1.0 / (double)*(unint64_t *)&a4;
    v15 = fmod(v13 - *(double *)(*(_QWORD *)&v8 + 8), v14);
    a4 = v14 + v13;
    if (v14 + v13 - v15 + -0.001 <= a3)
      *(double *)(*(_QWORD *)&v8 + 16) = a3;
    *(_QWORD *)&v16 = *(_QWORD *)&v8 + 32;
    v8 = v7;
    if (*(_QWORD *)&v16 != *(_QWORD *)&v7)
    {
      v8 = v16;
      while ((**(_DWORD **)&v8 + 1) <= 1)
      {
        *(_QWORD *)&v8 += 32;
        if (*(_QWORD *)&v8 == *(_QWORD *)&v7)
        {
          v8 = v7;
          break;
        }
      }
    }
  }
  while (*(_QWORD *)&v8 != v10);
}

uint64_t *WebCore::FrameRateAligner::finishUpdate(uint64_t *this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24[3];

  v2 = *this;
  if (!*this)
  {
    v5 = 0;
    v3 = 0;
LABEL_40:
    v4 = v2 + 32 * v3;
    goto LABEL_8;
  }
  v3 = *(unsigned int *)(v2 - 4);
  v4 = v2 + 32 * v3;
  if (!*(_DWORD *)(v2 - 12))
  {
    v5 = v2 + 32 * v3;
    goto LABEL_40;
  }
  v5 = *this;
  if ((_DWORD)v3)
  {
    v6 = 32 * v3;
    v5 = *this;
    while ((*(_DWORD *)v5 + 1) <= 1)
    {
      v5 += 32;
      v6 -= 32;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_8:
  if (v2)
    v2 += 32 * *(unsigned int *)(v2 - 4);
  if (v2 != v5)
  {
    while (!*(_BYTE *)(v5 + 24))
    {
LABEL_12:
      v7 = v5 + 32;
      v5 = v4;
      if (v7 != v4)
      {
        v5 = v7;
        while ((*(_DWORD *)v5 + 1) <= 1)
        {
          v5 += 32;
          if (v5 == v4)
          {
            v5 = v4;
            break;
          }
        }
      }
      if (v5 == v2)
        return this;
    }
    v8 = *this;
    if (*this)
    {
      v9 = *(unsigned int *)(v8 - 4);
      v10 = v8 + 32 * v9;
      if (*(_DWORD *)(v8 - 12))
      {
        v11 = *this;
        if ((_DWORD)v9)
        {
          v12 = 32 * v9;
          v11 = *this;
          while ((*(_DWORD *)v11 + 1) <= 1)
          {
            v11 += 32;
            v12 -= 32;
            if (!v12)
            {
              v11 = v10;
              goto LABEL_26;
            }
          }
        }
        goto LABEL_26;
      }
      v11 = v8 + 32 * v9;
    }
    else
    {
      v11 = 0;
      v9 = 0;
    }
    v10 = v8 + 32 * v9;
LABEL_26:
    if (v8)
      v13 = v8 + 32 * *(unsigned int *)(v8 - 4);
    else
      v13 = 0;
    v1 &= 0xFFFFFF00;
    if (v13 != v11)
    {
      v14 = 0;
      do
      {
        if (!*(_BYTE *)(v11 + 24))
        {
          v16 = v5;
          v17 = *(_DWORD *)v5;
          v18 = *(_DWORD *)v11;
          if (v17 > *(_DWORD *)v11 && !(v17 % v18) || v18 > v17 && !(v18 % v17))
          {
            if (v1 > v18 || v14 == 0)
              v1 = *(_DWORD *)v11;
            v14 = 1;
          }
          v5 = v16;
        }
        v15 = v11 + 32;
        v11 = v10;
        if (v15 != v10)
        {
          v11 = v15;
          while ((*(_DWORD *)v11 + 1) <= 1)
          {
            v11 += 32;
            if (v11 == v10)
            {
              v11 = v10;
              break;
            }
          }
        }
      }
      while (v11 != v13);
      if (v14)
      {
        v22 = v2;
        v23 = this;
        v20 = v5;
        v21 = v4;
        WTF::HashMap<unsigned int,WebCore::FrameRateAligner::FrameRateData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::FrameRateAligner::FrameRateData>,WTF::HashTableTraits>::get((uint64_t)v24, v8, v1);
        v4 = v21;
        v2 = v22;
        v5 = v20;
        this = v23;
        *(_QWORD *)(v20 + 8) = v24[0];
      }
    }
    goto LABEL_12;
  }
  return this;
}

uint64_t WTF::HashMap<unsigned int,WebCore::FrameRateAligner::FrameRateData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::FrameRateAligner::FrameRateData>,WTF::HashTableTraits>::get(uint64_t result, uint64_t a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  if (a2)
  {
    v3 = *(_DWORD *)(a2 - 8);
    v4 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
    v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
    v6 = v3 & (v5 ^ HIWORD(v5));
    v7 = *(_DWORD *)(a2 + 32 * v6);
    if (v7 == a3)
    {
LABEL_6:
      v9 = a2 + 32 * v6;
      *(_OWORD *)result = *(_OWORD *)(v9 + 8);
      *(_QWORD *)(result + 16) = *(_QWORD *)(v9 + 24);
      return result;
    }
    v8 = 1;
    while (v7)
    {
      v6 = ((_DWORD)v6 + v8) & v3;
      v7 = *(_DWORD *)(a2 + 32 * v6);
      ++v8;
      if (v7 == a3)
        goto LABEL_6;
    }
  }
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 17) = 0;
  *(_DWORD *)(result + 20) = 0;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

void WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe(WebCore::KeyframeEffect::ComputedKeyframe *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF::StringImpl **)*((_QWORD *)this + 5);
      do
      {
        v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          v7 = v5[1];
          v5[1] = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
            {
              WTF::StringImpl::destroy(v7, a2);
              v6 = *v5;
            }
            else
            {
              *(_DWORD *)v7 -= 2;
            }
          }
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = (WTF::StringImpl **)(v8 + 8);
      do
      {
        if (*((__int16 *)v10 - 4) != -1)
        {
          v11 = *v10;
          *v10 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, a2);
            else
              *(_DWORD *)v11 -= 2;
          }
        }
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
}

void WebCore::KeyframeEffect::create(JSC::JSGlobalObject *a1@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X2>, JSC::JSCell ***a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  unsigned int *v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int16x8_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  const WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  int v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  int v39;
  __n128 v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  char v48[8];
  int v49;
  char v50;
  __n128 v51;
  int64x2_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  __int16 v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  int16x8_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  __int16 v65;
  char v66[8];
  WTF::StringImpl *v67;
  unsigned __int8 v68;
  char v69[8];
  int v70;
  int16x8_t v71;
  __int128 v72;
  WTF::StringImpl *v73;
  int v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  int v77;
  unsigned __int8 v78;
  __n128 v79;
  int64x2_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  __int16 v83;
  char v84;
  char v85[8];
  uint64_t v86;
  int v87;
  int16x8_t v88;
  __int128 v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v12 = bmalloc::api::isoAllocate();
  v85[0] = 0;
  LOBYTE(v87) = 0;
  WebCore::KeyframeEffect::KeyframeEffect(v12, a3, (uint64_t)v85);
  v13 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  if (v13)
  {
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 + 1, v13));
  }
  v16 = *(_QWORD *)(v12 + 120);
  *(_QWORD *)(v12 + 120) = v13;
  if (v16)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v16));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v16);
      v46 = *(unsigned int *)(v16 + 28);
      if ((_DWORD)v46)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v16 + 16), (WTF::StringImpl *)(*(_QWORD *)(v16 + 16) + 32 * v46));
      v47 = *(WTF **)(v16 + 16);
      if (v47)
      {
        *(_QWORD *)(v16 + 16) = 0;
        *(_DWORD *)(v16 + 24) = 0;
        WTF::fastFree(v47, v14);
      }
      WTF::fastFree((WTF *)v16, v14);
    }
  }
  if (*(_BYTE *)(a5 + 88))
  {
    LOBYTE(v76) = 0;
    v78 = 0;
    v79.n128_u8[0] = 0;
    v79.n128_u8[8] = 0;
    v80 = vdupq_n_s64(0x7FF8000000000000uLL);
    v81 = 0x7FF8000000000000;
    v82 = 0;
    v83 = -1;
    LOBYTE(v86) = 0;
    v93 = -1;
    v19 = *(unsigned int *)(a5 + 80);
    if ((_DWORD)v19 != -1)
    {
      ((void (*)(uint64_t *, uint64_t *, uint64_t))off_1E33919B8[v19])(&v57, &v86, a5 + 8);
      v93 = v19;
      if (!(_DWORD)v19)
      {
        v57 = v86;
        LODWORD(v58) = 0;
        v28 = v78;
        if (v78)
        {
          v28 = v77;
          if (v77)
          {
            if (v77 == -1)
            {
              v28 = 0;
              v76 = v86;
              v77 = 0;
            }
            else
            {
              ((void (*)(char *, uint64_t *))off_1E33919C8[v77])(v69, &v76);
              v28 = v58;
              v76 = v57;
              v77 = 0;
              if ((_DWORD)v58 == -1)
                goto LABEL_57;
            }
          }
          else
          {
            v76 = v86;
          }
        }
        else
        {
          v76 = v86;
          v77 = 0;
          v78 = 1;
        }
        ((void (*)(char *, uint64_t *))off_1E33919C8[v28])(v69, &v57);
        goto LABEL_57;
      }
      if ((_DWORD)v19 == 1)
      {
        v69[0] = 0;
        v70 = -1;
        v20 = v87;
        if (v87 != -1)
        {
          ((void (*)(uint64_t *, char *, uint64_t *))off_1E33919D8[v87])(&v57, v69, &v86);
          v70 = v20;
        }
        v21 = v88;
        v71 = v88;
        v72 = v89;
        v22 = v90;
        if (v90)
          *(_DWORD *)v90 += 2;
        v73 = v22;
        v74 = v91;
        v23 = v92;
        if (v92)
          *(_DWORD *)v92 += 2;
        v75 = v23;
        WebCore::KeyframeEffect::setPseudoElement((WebCore::KeyframeEffect *)v12, (unsigned int **)&v75, (uint64_t)v66, v21);
        v26 = v68;
        if (v68)
        {
          v27 = v67;
          v67 = 0;
          *(_BYTE *)a6 = v66[0];
          *(_QWORD *)(a6 + 8) = v27;
          *(_DWORD *)(a6 + 16) = 1;
        }
        else
        {
          LOBYTE(v57) = 0;
          LODWORD(v58) = -1;
          v29 = v70;
          if (v70 != -1)
          {
            ((void (*)(char *, uint64_t *, char *))off_1E33919D8[v70])(&v84, &v57, v69);
            LODWORD(v58) = v29;
          }
          v59 = 1;
          v60 = *((_QWORD *)&v72 + 1);
          v61 = 1;
          v62 = v71;
          v63 = v72;
          v30 = v73;
          if (v73)
            *(_DWORD *)v73 += 2;
          v64 = v30;
          v65 = v74;
          WebCore::OptionalEffectTiming::operator=((uint64_t)&v76, (uint64_t)&v57);
          v32 = v64;
          v64 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v31);
            else
              *(_DWORD *)v32 -= 2;
          }
          if (v59 && (_DWORD)v58 != -1)
            ((void (*)(char *, uint64_t *))off_1E33919C8[v58])(&v84, &v57);
          WebCore::KeyframeEffect::setComposite((WebCore::KeyframeEffect *)v12, (WTF::StringImpl *)HIBYTE(v74));
          if (*(unsigned __int8 *)(v12 + 306) != BYTE2(v74))
          {
            *(_BYTE *)(v12 + 306) = BYTE2(v74);
            v33 = *(_QWORD *)(v12 + 264);
            if (v33)
            {
              if (*(_BYTE *)(v12 + 288) && (v34 = *(WTF::StringImpl **)(v12 + 280)) != 0)
              {
                *(_DWORD *)v34 += 2;
                WebCore::Node::invalidateStyle(v33, 1u, 0);
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, v24);
                else
                  *(_DWORD *)v34 -= 2;
              }
              else
              {
                WebCore::Node::invalidateStyle(v33, 1u, 0);
              }
            }
          }
        }
        if (v68)
        {
          v35 = v67;
          v67 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, v24);
            else
              *(_DWORD *)v35 -= 2;
          }
        }
        v36 = v75;
        v75 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v24);
          else
            *(_DWORD *)v36 -= 2;
        }
        v37 = v73;
        v73 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v24);
          else
            *(_DWORD *)v37 -= 2;
        }
        if (v70 != -1)
          ((void (*)(uint64_t *, char *))off_1E33919C8[v70])(&v57, v69);
        if (v26)
        {
          v38 = 1;
          goto LABEL_74;
        }
LABEL_57:
        v48[0] = 0;
        v50 = 0;
        if (v78)
        {
          v49 = -1;
          v39 = v77;
          if (v77 != -1)
          {
            ((void (*)(uint64_t *, char *, uint64_t *))off_1E33919D8[v77])(&v57, v48, &v76);
            v49 = v39;
          }
          v50 = 1;
        }
        v40 = v79;
        v51 = v79;
        v52 = v80;
        v53 = v81;
        v41 = v82;
        if (v82)
          *(_DWORD *)v82 += 2;
        v54 = v41;
        v55 = v83;
        v56 = 1;
        WebCore::AnimationEffect::updateTiming(v12, (uint64_t)v48, v25, (uint64_t)&v57, v40);
        if (v56)
        {
          v42 = v54;
          v54 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, v24);
            else
              *(_DWORD *)v42 -= 2;
          }
          if (v50)
          {
            if (v49 != -1)
              ((void (*)(char *, char *))off_1E33919C8[v49])(v69, v48);
            v49 = -1;
          }
        }
        if (v59)
        {
          v43 = v58;
          *(_BYTE *)a6 = v57;
          *(_QWORD *)(a6 + 8) = v43;
          v38 = 1;
          *(_DWORD *)(a6 + 16) = 1;
        }
        else
        {
          v38 = 0;
        }
LABEL_74:
        if (v93 != -1)
          ((void (*)(uint64_t *, uint64_t *))off_1E33919A8[v93])(&v57, &v86);
        v44 = v82;
        v82 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
            WTF::StringImpl::destroy(v44, v24);
          else
            *(_DWORD *)v44 -= 2;
        }
        if (v78 && v77 != -1)
          ((void (*)(char *, uint64_t *))off_1E33919C8[v77])(v85, &v76);
        if (v38)
          goto LABEL_85;
        goto LABEL_83;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
  }
LABEL_83:
  WebCore::KeyframeEffect::processKeyframes(a2, v12, a1, a4, (uint64_t)v85);
  if (!(_BYTE)v87)
  {
    *(_QWORD *)a6 = v12;
    *(_DWORD *)(a6 + 16) = 0;
    return;
  }
  v45 = v86;
  *(_BYTE *)a6 = v85[0];
  *(_QWORD *)(a6 + 8) = v45;
  *(_DWORD *)(a6 + 16) = 1;
LABEL_85:
  if (*(_DWORD *)(v12 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  else
    --*(_DWORD *)(v12 + 8);
}

void WebCore::KeyframeEffect::setPseudoElement(WebCore::KeyframeEffect *this@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>, int16x8_t a4@<Q0>)
{
  uint64_t v7;
  const WTF::String *v8;
  WTF::StringImpl *v9;
  int v10;
  int v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  char v26;
  char v27;
  _BYTE v28[8];
  int v29;
  WTF::StringImpl *v30;
  unsigned __int8 v31;

  v7 = *((_QWORD *)this + 15);
  if (!v7 || (v8 = *(const WTF::String **)(v7 + 8)) == 0)
  {
    v18 = *((_QWORD *)this + 33);
    if (v18)
      v8 = *(const WTF::String **)(*(_QWORD *)(v18 + 40) + 8);
    else
      v8 = 0;
  }
  WebCore::pseudoElementIdentifierFromString(a2, v8, v28, a4);
  if (!v28[0])
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 9;
    *(_BYTE *)(a3 + 16) = 1;
    goto LABEL_42;
  }
  v10 = *((unsigned __int8 *)this + 288);
  v11 = v31;
  if (!*((_BYTE *)this + 288) || !v31)
  {
    if ((v10 != 0) != (v31 != 0))
    {
      v14 = *((_QWORD *)this + 33);
      if (v14)
      {
        if (!*((_BYTE *)this + 288))
        {
          v23 = *((_QWORD *)this + 33);
          LOBYTE(v24) = 0;
          v15 = 1;
          v26 = 0;
          goto LABEL_12;
        }
        v12 = *((_DWORD *)this + 68);
        v13 = (WTF::StringImpl *)*((_QWORD *)this + 35);
        if (v13)
          goto LABEL_10;
        goto LABEL_11;
      }
LABEL_52:
      v15 = 0;
      LOBYTE(v23) = 0;
      goto LABEL_12;
    }
LABEL_25:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    goto LABEL_42;
  }
  v12 = *((_DWORD *)this + 68);
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  if (v12 == v29 && v13 == v30)
    goto LABEL_25;
  v14 = *((_QWORD *)this + 33);
  if (!v14)
    goto LABEL_52;
  if (v13)
LABEL_10:
    *(_DWORD *)v13 += 2;
LABEL_11:
  v23 = v14;
  v24 = v12;
  v25 = v13;
  v15 = 1;
  v26 = 1;
LABEL_12:
  v27 = v15;
  if (v10 == v11)
  {
    if (v10)
    {
      *((_DWORD *)this + 68) = v29;
      v16 = v30;
      if (v30)
        *(_DWORD *)v30 += 2;
      v17 = (WTF::StringImpl *)*((_QWORD *)this + 35);
      *((_QWORD *)this + 35) = v16;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v9);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
  }
  else if (v10)
  {
    v19 = (WTF::StringImpl *)*((_QWORD *)this + 35);
    *((_QWORD *)this + 35) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v9);
      else
        *(_DWORD *)v19 -= 2;
    }
    *((_BYTE *)this + 288) = 0;
  }
  else
  {
    *((_DWORD *)this + 68) = v29;
    v20 = v30;
    if (v30)
      *(_DWORD *)v30 += 2;
    *((_QWORD *)this + 35) = v20;
    *((_BYTE *)this + 288) = 1;
  }
  WebCore::KeyframeEffect::didChangeTargetStyleable((uint64_t)this, (WebCore::Styleable *)&v23);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (v27)
  {
    if (v26)
    {
      v21 = v25;
      v25 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v9);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
  }
LABEL_42:
  if (v31)
  {
    v22 = v30;
    v30 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v9);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
}

void WebCore::KeyframeEffect::processKeyframes(WebCore::Node *this@<X2>, uint64_t a2@<X0>, JSC::JSGlobalObject *a3@<X1>, JSC::JSCell ***a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  JSC::Structure **v8;
  JSC::Structure *v10;
  uint64_t v13;
  JSC::JSObject *v14;
  __n128 v15;
  char v16;
  uint64_t v17;
  JSC::JSCell *v18;
  uint64_t v19;
  JSValue v20;
  int i;
  unsigned int v22;
  uint64_t IndexQuickly;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  int v31;
  int v32;
  double v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  const WTF::AtomString *v42;
  WTF *v43;
  const WebCore::CSSParserContext *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  __n128 v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  _BOOL4 v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  _DWORD *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  char *v67;
  _DWORD *v68;
  char *v69;
  WTF::StringImpl *v70;
  _DWORD *v71;
  char *v72;
  WTF *v73;
  WTF *v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  unsigned __int16 *v81;
  uint64_t v82;
  WTF::StringImpl **v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD **v88;
  _DWORD *v89;
  WTF *v90;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t j;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  int64x2_t v105;
  _QWORD *v106;
  int64x2_t v107;
  int32x2_t v108;
  float64x2_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  WTF *v114;
  char *v115;
  void *v116;
  uint64_t *v117;
  char *v118;
  char *v119;
  _DWORD *v120;
  uint64_t v121;
  _DWORD *v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  _DWORD **v126;
  uint64_t v127;
  _QWORD *v128;
  _DWORD *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  uint64_t v132;
  _DWORD *v133;
  uint64_t v134;
  uint64_t v135;
  _DWORD **v136;
  _DWORD *v137;
  WTF *v138;
  uint64_t v140;
  unint64_t v141;
  _DWORD **v142;
  WTF::StringImpl *v143;
  const WTF::StringImpl *v144;
  unsigned int v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  double *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  WTF::StringImpl **v160;
  uint64_t v161;
  WTF::StringImpl **v162;
  WTF::StringImpl **v163;
  uint64_t v164;
  WTF::StringImpl **v165;
  WTF::StringImpl **v166;
  WTF *v167;
  char *v168;
  uint64_t v169;
  _DWORD *v170;
  WebCore::KeyframeEffect::ComputedKeyframe *v171;
  uint64_t v172;
  uint64_t v173;
  _DWORD **v174;
  _DWORD *v175;
  WTF *v176;
  uint64_t v178;
  unsigned int v179;
  WTF *v180;
  char *v181;
  WTF *v182;
  _BYTE *v183;
  WTF *v184;
  _BYTE *v185;
  unint64_t v186;
  uint64_t v187;
  _DWORD **v189;
  WTF::StringImpl *v190;
  uint64_t v191;
  WTF *v192;
  _DWORD *v193;
  uint64_t v194;
  WTF *v195;
  int v196;
  WTF *v197;
  void *v198;
  WTF *v199;
  uint64_t v200;
  unsigned int v201;
  unint64_t v202;
  unint64_t v203;
  WTF *v204;
  _QWORD *v205;
  _DWORD **v206;
  WTF *v207;
  _DWORD *v208;
  _DWORD *v209;
  uint64_t v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  uint64_t v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  uint64_t *v216;
  WTF *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  WTF *v221;
  _DWORD *v222;
  WTF::StringImpl *v223;
  char *v224;
  unint64_t v225;
  unsigned int v226;
  WTF::StringImpl *v227;
  char *v228;
  uint64_t v229;
  unint64_t v230;
  unsigned int v231;
  unint64_t v232;
  WTF::StringImpl *v233;
  char *v234;
  char *v235;
  unint64_t v236;
  _BYTE *v237;
  int v238;
  WTF *v239;
  WTF *v240;
  WTF::StringImpl *v241;
  WTF::StringImpl *v242;
  uint64_t v243;
  unint64_t v244;
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  unint64_t v247;
  uint64_t v248;
  WTF *v249;
  WTF *v250;
  unint64_t v251;
  double v252;
  double v253;
  BOOL v254;
  WTF *v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t k;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  int64x2_t v265;
  _QWORD *v266;
  int64x2_t v267;
  int32x2_t v268;
  float64x2_t v269;
  WTF::StringImpl **v270;
  int v271;
  WTF::StringImpl *v272;
  WTF::StringImpl *v273;
  int v274;
  int v275;
  uint64_t v276;
  WTF *v277;
  uint64_t v278;
  WTF::StringImpl *v279;
  uint64_t v280;
  WebCore::KeyframeEffect::ComputedKeyframe *v281;
  WebCore::KeyframeEffect::ComputedKeyframe *v282;
  uint64_t v283;
  _DWORD *v284;
  uint64_t v285;
  uint64_t v286;
  _DWORD **v287;
  _DWORD *v288;
  WTF *v289;
  uint64_t v291;
  WTF *v292;
  uint64_t v293;
  uint64_t v294;
  WTF::StringImpl *v295;
  WTF *v296;
  WTF *v297;
  WTF *v298;
  uint64_t v299;
  WTF::StringImpl *v300;
  uint64_t v301;
  WTF::StringImpl *v302;
  WTF *v303;
  uint64_t v304;
  _DWORD *v305;
  uint64_t v306;
  uint64_t v307;
  _DWORD **v308;
  _DWORD *v309;
  WTF *v310;
  uint64_t v312;
  WTF *v313;
  uint64_t v314;
  const WTF::AtomString *v315;
  uint64_t v316;
  uint64_t v317;
  WTF *v318;
  uint64_t v319;
  WTF *v320;
  uint64_t v321;
  WTF::StringImpl *v322;
  __n128 v323;
  __int128 v324;
  WTF::StringImpl *v325;
  uint64_t v326;
  __int16 v327;
  WTF *v328;
  uint64_t v329;
  WTF::StringImpl *v330;
  __n128 v331;
  __int128 v332;
  WTF::StringImpl *v333;
  uint64_t v334;
  __int16 v335;
  WTF::StringImpl *v336;
  WTF *v337;
  WTF::StringImpl *v338;
  char v339;
  uint64_t v340;
  unsigned __int16 *v341;
  uint64_t v342;
  _DWORD *v343;
  WTF *v344;
  WTF::StringImpl *v345;
  size_t __len;
  unsigned __int16 v347;
  WTF::StringImpl *v348;
  __n128 v349;
  __int128 v350;
  WTF::StringImpl *v351;
  uint64_t v352;
  __int16 v353;
  uint64_t v354;
  WTF::StringImpl *v355;
  int v356;
  unsigned int v357[4];
  int v358;
  void *__src;
  unsigned int v360;
  int v361;
  unsigned __int16 *v362;
  int v363;
  WTF::StringImpl *v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  uint64_t v368;
  WTF::StringImpl *v369;
  int v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  int v374;
  uint64_t v375;

  v375 = *MEMORY[0x1E0C80C00];
  v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v7 + 2;
  v8 = *a4;
  if (*a4)
  {
    v10 = *v8;
    if (*v8)
    {
      v13 = *((_QWORD *)a3 + 7);
      v320 = 0;
      v321 = 0;
      v14 = (JSC::JSObject *)JSC::JSObject::get(v10, a3, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 2712));
      if (*(_DWORD *)(v13 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13))
      {
        *(_BYTE *)a5 = 33;
        *(_QWORD *)(a5 + 8) = 0;
        *(_BYTE *)(a5 + 16) = 1;
        goto LABEL_528;
      }
      v318 = 0;
      v319 = 0;
      if (v14 != (JSC::JSObject *)10)
      {
        WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v364, this);
        if (*a4)
          v18 = **a4;
        else
          v18 = 0;
        v348 = (WTF::StringImpl *)&v320;
        v349.n128_u64[0] = (unint64_t)this;
        v349.n128_u64[1] = (unint64_t)&v364;
        v19 = *((_QWORD *)a3 + 7);
        if (JSC::getIterationMode() == 2)
        {
          for (i = 1; ; ++i)
          {
            v22 = (*((_BYTE *)v18 + 4) & 0xE) != 0 ? *(_DWORD *)(*((_QWORD *)v18 + 1) - 8) : 0;
            if (i - 1 >= v22)
              break;
            IndexQuickly = JSC::JSObject::tryGetIndexQuickly(v18, i - 1, 0);
            if (!IndexQuickly)
              IndexQuickly = JSC::JSObject::get(v18, a3, (i - 1));
            if (*(_DWORD *)(v19 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v19) & 1) != 0)
              break;
            WebCore::processIterableKeyframes(JSC::JSGlobalObject &,WebCore::Document &,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> &&,JSC::JSValue,WTF::Vector<WebCore::KeyframeEffect::ParsedKeyframe,0ul,JSC::JSValue::CrashOnOverflow,16ul,JSC::JSValue::FastMalloc> &)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> &&)#1}::operator()(&v354, (JSC::JSGlobalObject *)&v348, v19, a3, IndexQuickly);
            if ((_BYTE)v356)
            {
              v24 = v355;
              v355 = 0;
              if (v24)
              {
                if (*(_DWORD *)v24 == 2)
                  WTF::StringImpl::destroy(v24, a3);
                else
                  *(_DWORD *)v24 -= 2;
              }
            }
            if (*(_QWORD *)(v19 + 16))
            {
              v243 = JSC::JSArrayIterator::create();
              v244 = i | 0xFFFE000000000000;
              if (i < 0)
                v244 = COERCE__INT64((double)i) + 0x2000000000000;
              *(_QWORD *)(v243 + 16) = v244;
              goto LABEL_432;
            }
          }
        }
        else
        {
          JSC::iteratorForIterable(a3, v18, v14, v20);
          if (!*(_DWORD *)(v19 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v19) & 1) == 0)
          {
            while (1)
            {
              v25 = JSC::iteratorStep();
              if (*(_QWORD *)(v19 + 16) || v25 == 6)
                break;
              v27 = JSC::iteratorValue();
              if (*(_DWORD *)(v19 + 80))
              {
                if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v19) & 1) != 0)
                  break;
              }
              WebCore::processIterableKeyframes(JSC::JSGlobalObject &,WebCore::Document &,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> &&,JSC::JSValue,WTF::Vector<WebCore::KeyframeEffect::ParsedKeyframe,0ul,JSC::JSValue::CrashOnOverflow,16ul,JSC::JSValue::FastMalloc> &)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> &&)#1}::operator()(&v354, (JSC::JSGlobalObject *)&v348, v19, a3, v27);
              if ((_BYTE)v356)
              {
                v29 = v355;
                v355 = 0;
                if (v29)
                {
                  if (*(_DWORD *)v29 == 2)
                    WTF::StringImpl::destroy(v29, v28);
                  else
                    *(_DWORD *)v29 -= 2;
                }
              }
              if (*(_QWORD *)(v19 + 16))
              {
LABEL_432:
                JSC::iteratorClose();
                break;
              }
            }
          }
        }
        v245 = v369;
        v369 = 0;
        if (v245)
        {
          if (*(_DWORD *)v245 == 2)
            WTF::StringImpl::destroy(v245, a3);
          else
            *(_DWORD *)v245 -= 2;
        }
        v246 = v364;
        v364 = 0;
        if (v246)
        {
          if (*(_DWORD *)v246 == 2)
            WTF::StringImpl::destroy(v246, a3);
          else
            *(_DWORD *)v246 -= 2;
        }
        goto LABEL_439;
      }
      WebCore::processKeyframeLikeObject((uint64_t)&v364, a3, (uint64_t)this, a4, 1);
      if (v374)
      {
        if (v374 == 1)
        {
          v16 = v365;
          v17 = v366;
LABEL_519:
          *(_BYTE *)a5 = v16;
          *(_QWORD *)(a5 + 8) = v17;
          goto LABEL_520;
        }
        goto LABEL_585;
      }
      LOBYTE(v354) = 0;
      v356 = -1;
      v30 = v367;
      if (v367 != -1)
      {
        ((void (*)(WTF::StringImpl **, uint64_t *, uint64_t *))off_1E3391B58[v367])(&v348, &v354, &v365);
        v356 = v30;
      }
      LOBYTE(v357[0]) = 0;
      v358 = -1;
      v31 = v370;
      if (v370 != -1)
      {
        ((void (*)(WTF::StringImpl **, unsigned int *, uint64_t *))off_1E3391B70[v370])(&v348, v357, &v368);
        v358 = v31;
      }
      v316 = a2;
      v317 = a5;
      LOBYTE(__src) = 0;
      v361 = -1;
      v32 = v372;
      if (v372 != -1)
      {
        ((void (*)(WTF::StringImpl **, void **, uint64_t *))off_1E3391B80[v372])(&v348, &__src, &v371);
        v361 = v32;
      }
      WTF::Vector<WebCore::KeyframeEffect::PropertyAndValues,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v362, &v373);
      WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v348, this);
      if (!v363)
        goto LABEL_238;
      v34 = v362;
      v35 = &v362[16 * v363];
      v33 = 0.0;
      while (1)
      {
        v36 = *v34;
        v347 = *v34;
        v37 = *((unsigned int *)v34 + 7);
        if (!(_DWORD)v37)
          goto LABEL_55;
        if (v37 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19566EFFCLL);
        }
        v38 = WTF::fastMalloc((WTF *)(8 * v37));
        v39 = *((unsigned int *)v34 + 7);
        v314 = 8 * v37;
        if ((_DWORD)v39)
        {
          v126 = (_DWORD **)*((_QWORD *)v34 + 2);
          v127 = 8 * v39;
          v128 = (_QWORD *)v38;
          do
          {
            v129 = *v126;
            if (*v126)
              *v129 += 2;
            *v128++ = v129;
            ++v126;
            v127 -= 8;
          }
          while (v127);
        }
        v40 = 0;
        LODWORD(v41) = 0;
        v345 = 0;
        __len = 0;
        v42 = (const WTF::AtomString *)v38;
        v313 = (WTF *)v38;
        v315 = (const WTF::AtomString *)(v38 + 8 * v37);
        do
        {
          v337 = (WTF *)0x7FF8000000000000;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v338 = v328;
          v339 = 3;
          v342 = 0;
          v343 = 0;
          v341 = 0;
          v43 = (WTF *)WTF::fastMalloc((WTF *)0x60);
          *(_QWORD *)v43 = 0x900000001;
          *((_QWORD *)v43 + 1) = 0;
          *((_QWORD *)v43 + 2) = (char *)v43 + 32;
          *((_QWORD *)v43 + 3) = 4;
          v344 = v43;
          if ((_DWORD)v36 == 1)
          {
            v45 = (WTF::StringImpl *)*((_QWORD *)v34 + 1);
            if (v45)
              *(_DWORD *)v45 += 2;
            v336 = v45;
            v46 = v348;
            if (v348)
              *(_DWORD *)v348 += 2;
            v330 = v46;
            v47 = v349;
            v331 = v349;
            v332 = v350;
            v48 = v351;
            if (v351)
              *(_DWORD *)v351 += 2;
            v333 = v48;
            v334 = v352;
            v335 = v353;
            v50 = WebCore::MutableStyleProperties::setCustomProperty(v43, (const WTF::String *)&v336, v42, 0, (uint64_t)&v330, v44, v47);
            v51 = v333;
            v333 = 0;
            if (v51)
            {
              if (*(_DWORD *)v51 == 2)
                WTF::StringImpl::destroy(v51, v49);
              else
                *(_DWORD *)v51 -= 2;
            }
            v52 = v330;
            v330 = 0;
            if (v52)
            {
              if (*(_DWORD *)v52 != 2)
              {
                *(_DWORD *)v52 -= 2;
                goto LABEL_73;
              }
              WTF::StringImpl::destroy(v52, v49);
              if (!v50)
              {
LABEL_75:
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, v49);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                goto LABEL_90;
              }
            }
            else
            {
LABEL_73:
              if (!v50)
                goto LABEL_75;
            }
            WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::String&>((uint64_t)&v328, &v342, &v336, (WTF::StringImpl **)v42);
            goto LABEL_75;
          }
          v53 = v348;
          if (v348)
            *(_DWORD *)v348 += 2;
          v322 = v53;
          v323 = v349;
          v324 = v350;
          v54 = v351;
          if (v351)
            *(_DWORD *)v351 += 2;
          v325 = v54;
          v326 = v352;
          v327 = v353;
          v56 = WebCore::MutableStyleProperties::setProperty((uint64_t)v43, v36, (uint64_t)v42, 0, (uint64_t)&v322, 0);
          v57 = v325;
          v325 = 0;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
              WTF::StringImpl::destroy(v57, v55);
            else
              *(_DWORD *)v57 -= 2;
          }
          v58 = v322;
          v322 = 0;
          if (!v58)
            goto LABEL_88;
          if (*(_DWORD *)v58 != 2)
          {
            *(_DWORD *)v58 -= 2;
LABEL_88:
            if (!v56)
              goto LABEL_90;
LABEL_89:
            WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WebCore::CSSPropertyID const&,WTF::String&>((uint64_t)&v328, (uint64_t *)&v341, &v347, (_DWORD **)v42);
            goto LABEL_90;
          }
          WTF::StringImpl::destroy(v58, v55);
          if (v56)
            goto LABEL_89;
LABEL_90:
          v59 = v41;
          if ((_DWORD)v41 == (_DWORD)__len)
          {
            v60 = WTF::Vector<WebCore::KeyframeEffect::ParsedKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v345, v41 + 1, (unint64_t)&v337);
            v61 = v60;
            v62 = HIDWORD(__len);
            v40 = v345;
            v63 = (char *)v345 + 64 * (unint64_t)HIDWORD(__len);
            *(_QWORD *)v63 = *(_QWORD *)v60;
            v64 = (_DWORD *)*((_QWORD *)v60 + 1);
            if (v64)
              *v64 += 2;
            *((_QWORD *)v63 + 1) = v64;
            v63[16] = v60[16];
            *((_QWORD *)v63 + 3) = *((_QWORD *)v60 + 3);
            WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable((uint64_t *)v63 + 4, (unsigned __int16 **)v60 + 4);
            WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable((uint64_t *)v63 + 5, (_QWORD *)v61 + 5);
            v66 = *((_QWORD *)v61 + 6);
            if (v66)
              ++*(_DWORD *)(v66 + 8);
            v67 = (char *)v40 + 64 * v62;
            *((_QWORD *)v67 + 6) = v66;
            v68 = (_DWORD *)*((_QWORD *)v61 + 7);
            ++*v68;
            *((_QWORD *)v67 + 7) = v68;
          }
          else
          {
            v69 = (char *)v40 + 64 * (unint64_t)v41;
            *(_QWORD *)v69 = v337;
            v70 = v338;
            if (v338)
              *(_DWORD *)v338 += 2;
            *((_QWORD *)v69 + 1) = v70;
            v69[16] = v339;
            *((_QWORD *)v69 + 3) = v340;
            WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable((uint64_t *)v69 + 4, &v341);
            WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable((uint64_t *)v69 + 5, &v342);
            v71 = v343;
            if (v343)
              ++v343[2];
            v72 = (char *)v40 + 64 * v59;
            *((_QWORD *)v72 + 6) = v71;
            v73 = v344;
            ++*(_DWORD *)v344;
            *((_QWORD *)v72 + 7) = v73;
            LODWORD(v62) = HIDWORD(__len);
          }
          v41 = (v62 + 1);
          HIDWORD(__len) = v41;
          v74 = v344;
          v344 = 0;
          if (v74)
          {
            if (*(_DWORD *)v74 == 1)
            {
              v86 = *((unsigned int *)v74 + 7);
              if ((_DWORD)v86)
              {
                v87 = 16 * v86;
                v88 = (_DWORD **)(*((_QWORD *)v74 + 2) + 8);
                do
                {
                  v89 = *v88;
                  *v88 = 0;
                  if (v89)
                  {
                    if (*v89 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v89, v65);
                    else
                      *v89 -= 2;
                  }
                  v88 += 2;
                  v87 -= 16;
                }
                while (v87);
              }
              v90 = (WTF *)*((_QWORD *)v74 + 2);
              if ((WTF *)((char *)v74 + 32) != v90 && v90 != 0)
              {
                *((_QWORD *)v74 + 2) = 0;
                *((_DWORD *)v74 + 6) = 0;
                WTF::fastFree(v90, v65);
              }
              v92 = *((_QWORD *)v74 + 1);
              *((_QWORD *)v74 + 1) = 0;
              if (v92)
                (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
              WTF::fastFree(v74, v65);
            }
            else
            {
              --*(_DWORD *)v74;
            }
          }
          v75 = v343;
          v343 = 0;
          if (v75)
          {
            if (v75[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v75 + 16))(v75);
            else
              --v75[2];
          }
          v76 = v342;
          if (v342)
          {
            v77 = *(unsigned int *)(v342 - 4);
            if ((_DWORD)v77)
            {
              v78 = v342;
              do
              {
                v79 = *(WTF::StringImpl **)v78;
                if (*(_QWORD *)v78 != -1)
                {
                  v80 = *(WTF::StringImpl **)(v78 + 8);
                  *(_QWORD *)(v78 + 8) = 0;
                  if (v80)
                  {
                    if (*(_DWORD *)v80 == 2)
                    {
                      WTF::StringImpl::destroy(v80, v65);
                      v79 = *(WTF::StringImpl **)v78;
                    }
                    else
                    {
                      *(_DWORD *)v80 -= 2;
                    }
                  }
                  *(_QWORD *)v78 = 0;
                  if (v79)
                  {
                    if (*(_DWORD *)v79 == 2)
                      WTF::StringImpl::destroy(v79, v65);
                    else
                      *(_DWORD *)v79 -= 2;
                  }
                }
                v78 += 16;
                --v77;
              }
              while (v77);
            }
            WTF::fastFree((WTF *)(v76 - 16), v65);
          }
          v81 = v341;
          if (v341)
          {
            v82 = *((unsigned int *)v341 - 1);
            if ((_DWORD)v82)
            {
              v83 = (WTF::StringImpl **)(v341 + 4);
              do
              {
                if (*((__int16 *)v83 - 4) != -1)
                {
                  v84 = *v83;
                  *v83 = 0;
                  if (v84)
                  {
                    if (*(_DWORD *)v84 == 2)
                      WTF::StringImpl::destroy(v84, v65);
                    else
                      *(_DWORD *)v84 -= 2;
                  }
                }
                v83 += 2;
                --v82;
              }
              while (v82);
            }
            WTF::fastFree((WTF *)(v81 - 8), v65);
          }
          v85 = v338;
          v338 = 0;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2)
              WTF::StringImpl::destroy(v85, v65);
            else
              *(_DWORD *)v85 -= 2;
          }
          v42 = (const WTF::AtomString *)((char *)v42 + 8);
        }
        while (v42 != v315);
        v93 = v345;
        if (!(_DWORD)v41)
          goto LABEL_195;
        v94 = (WTF::StringImpl *)((char *)v345 + 64 * v41);
        v95 = v345;
        do
        {
          *((_QWORD *)v95 + 3) = *(_QWORD *)v95;
          v95 = (WTF::StringImpl *)((char *)v95 + 64);
        }
        while (v95 != v94);
        if (v41 >= 2)
        {
          v96 = 0;
          v97 = 0;
          for (j = 1; j != v41; ++j)
          {
            v99 = j;
            if (v97 != j - 1)
            {
              if (v97 >= v41)
              {
                __break(0xC471u);
                JUMPOUT(0x19566F004);
              }
              v99 = j;
              if (v97 + 1 < j)
              {
                v100 = 0;
                v101 = *((uint64_t *)v93 + 8 * v97 + 3);
                v102 = (uint64x2_t)vdupq_n_s64(~v97 + v96);
                v103 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((*((double *)v93 + 8 * j + 3) - *(double *)&v101) / (double)(j - v97)), 0);
                v104 = (float64x2_t)vdupq_lane_s64(v101, 0);
                v105 = vdupq_n_s64(v97);
                v106 = (_QWORD *)((char *)v93 + 64 * v97 + 152);
                do
                {
                  v107.i64[0] = v97 + v100 + 1;
                  v107.i64[1] = v97 + v100 + 2;
                  v108 = vmovn_s64((int64x2_t)vcgeq_u64(v102, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v100), (int8x16_t)xmmword_19688B1A0)));
                  v109 = vmlaq_f64(v104, v103, vcvtq_f64_u64((uint64x2_t)vsubq_s64(v107, v105)));
                  if ((v108.i8[0] & 1) != 0)
                    *(v106 - 8) = *(_QWORD *)&v109.f64[0];
                  if ((v108.i8[4] & 1) != 0)
                    *v106 = *(_QWORD *)&v109.f64[1];
                  v100 += 2;
                  v106 += 16;
                }
                while (((j - v97) & 0xFFFFFFFFFFFFFFFELL) != v100);
                v99 = j;
              }
            }
            ++v96;
            v97 = v99;
          }
        }
        v110 = HIDWORD(v321) + v41;
        if (v110 > v321)
        {
          v111 = v321 + ((unint64_t)v321 >> 2);
          if (v111 >= 0x10)
            v112 = v111 + 1;
          else
            v112 = 16;
          if (v112 <= v110)
            v113 = v110;
          else
            v113 = v112;
          if (v113 >> 26)
          {
            __break(0xC471u);
            JUMPOUT(0x19566F00CLL);
          }
          v114 = v320;
          v115 = (char *)v320 + 64 * (unint64_t)HIDWORD(v321);
          LODWORD(v321) = v113;
          v320 = (WTF *)WTF::fastMalloc((WTF *)(v113 << 6));
          WTF::VectorMover<false,WebCore::KeyframeEffect::ParsedKeyframe>::move((uint64_t)v114, (uint64_t)v115, (uint64_t)v320);
          if (v114)
          {
            if (v320 == v114)
            {
              v320 = 0;
              LODWORD(v321) = 0;
            }
            WTF::fastFree(v114, v116);
          }
        }
        if (v110 < HIDWORD(v321))
        {
          __break(0xC471u);
          goto LABEL_596;
        }
        v117 = (uint64_t *)((char *)v320 + 64 * (unint64_t)HIDWORD(v321) + 32);
        v118 = (char *)v93 + 32;
        do
        {
          v119 = v118 - 32;
          *(v117 - 4) = *((_QWORD *)v118 - 4);
          v120 = (_DWORD *)*((_QWORD *)v118 - 3);
          if (v120)
            *v120 += 2;
          *(v117 - 3) = (uint64_t)v120;
          *((_BYTE *)v117 - 16) = *(v118 - 16);
          *(v117 - 1) = *((_QWORD *)v118 - 1);
          WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable(v117, (unsigned __int16 **)v118);
          WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(v117 + 1, (_QWORD *)v118 + 1);
          v121 = *((_QWORD *)v118 + 2);
          if (v121)
            ++*(_DWORD *)(v121 + 8);
          v117[2] = v121;
          v122 = (_DWORD *)*((_QWORD *)v118 + 3);
          ++*v122;
          v117[3] = (uint64_t)v122;
          v117 += 8;
          v118 += 64;
        }
        while (v119 + 64 != (char *)v94);
        HIDWORD(v321) = v110;
        v93 = v345;
        if (HIDWORD(__len))
        {
          v130 = (WTF::StringImpl *)((char *)v345 + 64 * (unint64_t)HIDWORD(__len));
          v131 = v345;
          v123 = v314;
          do
          {
            v132 = *((_QWORD *)v131 + 7);
            *((_QWORD *)v131 + 7) = 0;
            if (v132)
            {
              if (*(_DWORD *)v132 == 1)
              {
                v134 = *(unsigned int *)(v132 + 28);
                if ((_DWORD)v134)
                {
                  v135 = 16 * v134;
                  v136 = (_DWORD **)(*(_QWORD *)(v132 + 16) + 8);
                  do
                  {
                    v137 = *v136;
                    *v136 = 0;
                    if (v137)
                    {
                      if (*v137 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v137, v65);
                      else
                        *v137 -= 2;
                    }
                    v136 += 2;
                    v135 -= 16;
                  }
                  while (v135);
                }
                v138 = *(WTF **)(v132 + 16);
                if ((WTF *)(v132 + 32) != v138 && v138 != 0)
                {
                  *(_QWORD *)(v132 + 16) = 0;
                  *(_DWORD *)(v132 + 24) = 0;
                  WTF::fastFree(v138, v65);
                }
                v140 = *(_QWORD *)(v132 + 8);
                *(_QWORD *)(v132 + 8) = 0;
                if (v140)
                  (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
                WTF::fastFree((WTF *)v132, v65);
              }
              else
              {
                --*(_DWORD *)v132;
              }
            }
            v133 = (_DWORD *)*((_QWORD *)v131 + 6);
            *((_QWORD *)v131 + 6) = 0;
            if (v133)
            {
              if (v133[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v133 + 16))(v133);
              else
                --v133[2];
            }
            WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe(v131, v65);
            v131 = (WTF::StringImpl *)((char *)v131 + 64);
          }
          while (v131 != v130);
        }
        else
        {
LABEL_195:
          v123 = v314;
        }
        if (v93)
        {
          v345 = 0;
          LODWORD(__len) = 0;
          WTF::fastFree(v93, v65);
        }
        v124 = 0;
        do
        {
          v125 = *(WTF::StringImpl **)((char *)v313 + v124);
          *(_QWORD *)((char *)v313 + v124) = 0;
          if (v125)
          {
            if (*(_DWORD *)v125 == 2)
              WTF::StringImpl::destroy(v125, v65);
            else
              *(_DWORD *)v125 -= 2;
          }
          v124 += 8;
        }
        while (v123 != v124);
        WTF::fastFree(v313, v65);
LABEL_55:
        v34 += 16;
        if (v34 == v35)
        {
LABEL_238:
          v141 = 126 - 2 * __clz(HIDWORD(v321));
          if (HIDWORD(v321))
            v142 = (_DWORD **)v141;
          else
            v142 = 0;
          _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN7WebCoreL31processPropertyIndexedKeyframesERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEERN3WTF6VectorINS2_14KeyframeEffect14ParsedKeyframeELm0ENSD_15CrashOnOverflowELm16ENSD_10FastMallocEEERNSE_INSD_6StringELm0ESH_Lm16ESI_EEEUlRT_RT0_E_PSG_Lb0EEEvT1_SV_SQ_NS_15iterator_traitsISV_E15difference_typeEb((uint64_t)v320, (double *)v320 + 8 * (unint64_t)HIDWORD(v321), v142, 1, v33);
          v145 = HIDWORD(v321);
          if (HIDWORD(v321) >= 2)
          {
            v146 = 1;
            v147 = HIDWORD(v321);
            while (1)
            {
              v148 = v146 - 1;
              if (v146 - 1 >= v147)
              {
                __break(0xC471u);
                JUMPOUT(0x19566EFDCLL);
              }
              v149 = (double *)((char *)v320 + 64 * v146);
              v150 = (char *)v320 + 64 * v148;
              if (v149[3] == *((double *)v150 + 3))
                break;
              ++v146;
LABEL_296:
              v147 = v145;
              if (v146 >= v145)
                goto LABEL_314;
            }
            v151 = *((_QWORD *)v149 + 4);
            if (!v151 || !*(_DWORD *)(v151 - 12))
              goto LABEL_268;
            WebCore::MutableStyleProperties::mergeAndOverrideOnConflict(*((WebCore::MutableStyleProperties **)v320 + 8 * v148 + 7), *((const WebCore::StyleProperties **)v320 + 8 * v146 + 7), v144);
            v152 = *((_QWORD *)v149 + 4);
            if (v152)
            {
              v153 = *(unsigned int *)(v152 - 4);
              v154 = v152 + 16 * v153;
              if (*(_DWORD *)(v152 - 12))
              {
                v155 = *((_QWORD *)v149 + 4);
                if ((_DWORD)v153)
                {
                  v156 = 16 * v153;
                  v155 = *((_QWORD *)v149 + 4);
                  while ((unsigned __int16)(*(_WORD *)v155 + 1) <= 1u)
                  {
                    v155 += 16;
                    v156 -= 16;
                    if (!v156)
                    {
                      v155 = v154;
                      break;
                    }
                  }
                }
LABEL_258:
                if (v152)
                  v157 = v152 + 16 * *(unsigned int *)(v152 - 4);
                else
                  v157 = 0;
                while (v155 != v157)
                {
                  WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WebCore::CSSPropertyID const&,WTF::String&>((uint64_t)&v337, (uint64_t *)v150 + 4, (_WORD *)v155, (_DWORD **)(v155 + 8));
                  v158 = v155 + 16;
                  v155 = v154;
                  if (v158 != v154)
                  {
                    v155 = v158;
                    while ((unsigned __int16)(*(_WORD *)v155 + 1) <= 1u)
                    {
                      v155 += 16;
                      if (v155 == v154)
                      {
                        v155 = v154;
                        break;
                      }
                    }
                  }
                }
LABEL_268:
                v159 = *((_QWORD *)v149 + 5);
                if (v159 && *(_DWORD *)(v159 - 12))
                {
                  WebCore::MutableStyleProperties::mergeAndOverrideOnConflict(*((WebCore::MutableStyleProperties **)v320 + 8 * v148 + 7), *((const WebCore::StyleProperties **)v320 + 8 * v146 + 7), v144);
                  v160 = (WTF::StringImpl **)*((_QWORD *)v149 + 5);
                  if (v160)
                  {
                    v161 = *((unsigned int *)v160 - 1);
                    v162 = &v160[2 * v161];
                    if (*((_DWORD *)v160 - 3))
                    {
                      v163 = v160;
                      if ((_DWORD)v161)
                      {
                        v164 = 16 * v161;
                        v163 = v160;
                        while ((unint64_t)*v163 + 1 <= 1)
                        {
                          v163 += 2;
                          v164 -= 16;
                          if (!v164)
                          {
                            v163 = v162;
                            break;
                          }
                        }
                      }
LABEL_277:
                      v165 = &v160[2 * *((unsigned int *)v160 - 1)];
                      goto LABEL_282;
                    }
                    v163 = &v160[2 * v161];
                  }
                  else
                  {
                    v163 = 0;
                    v161 = 0;
                  }
                  v162 = &v160[2 * v161];
                  if (v160)
                    goto LABEL_277;
                  v165 = 0;
LABEL_282:
                  while (v163 != v165)
                  {
                    WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::String&>((uint64_t)&v337, (uint64_t *)v150 + 5, v163, v163 + 1);
                    v166 = v163 + 2;
                    v163 = v162;
                    if (v166 != v162)
                    {
                      v163 = v166;
                      while ((unint64_t)*v163 + 1 <= 1)
                      {
                        v163 += 2;
                        if (v163 == v162)
                        {
                          v163 = v162;
                          break;
                        }
                      }
                    }
                  }
                }
                v167 = v320;
                v168 = (char *)v320 + 64 * v146;
                v169 = *((_QWORD *)v168 + 7);
                *((_QWORD *)v168 + 7) = 0;
                if (v169)
                {
                  if (*(_DWORD *)v169 == 1)
                  {
                    v172 = *(unsigned int *)(v169 + 28);
                    if ((_DWORD)v172)
                    {
                      v173 = 16 * v172;
                      v174 = (_DWORD **)(*(_QWORD *)(v169 + 16) + 8);
                      do
                      {
                        v175 = *v174;
                        *v174 = 0;
                        if (v175)
                        {
                          if (*v175 == 2)
                            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v175, v143);
                          else
                            *v175 -= 2;
                        }
                        v174 += 2;
                        v173 -= 16;
                      }
                      while (v173);
                    }
                    v176 = *(WTF **)(v169 + 16);
                    if ((WTF *)(v169 + 32) != v176 && v176 != 0)
                    {
                      *(_QWORD *)(v169 + 16) = 0;
                      *(_DWORD *)(v169 + 24) = 0;
                      WTF::fastFree(v176, v143);
                    }
                    v178 = *(_QWORD *)(v169 + 8);
                    *(_QWORD *)(v169 + 8) = 0;
                    if (v178)
                      (*(void (**)(uint64_t))(*(_QWORD *)v178 + 8))(v178);
                    WTF::fastFree((WTF *)v169, v143);
                  }
                  else
                  {
                    --*(_DWORD *)v169;
                  }
                }
                v170 = (_DWORD *)*((_QWORD *)v168 + 6);
                *((_QWORD *)v168 + 6) = 0;
                if (v170)
                {
                  if (v170[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v170 + 16))(v170);
                  else
                    --v170[2];
                }
                v171 = (WTF *)((char *)v167 + 64 * v146);
                WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe(v171, v143);
                WTF::VectorMover<false,WebCore::KeyframeEffect::ParsedKeyframe>::move((uint64_t)v171 + 64, (uint64_t)v320 + 64 * (unint64_t)HIDWORD(v321), (uint64_t)v171);
                v145 = --HIDWORD(v321);
                goto LABEL_296;
              }
              v155 = v152 + 16 * v153;
            }
            else
            {
              v155 = 0;
              v153 = 0;
            }
            v154 = v152 + 16 * v153;
            goto LABEL_258;
          }
LABEL_314:
          v337 = 0;
          v338 = 0;
          if (v356)
          {
            a2 = v316;
            a5 = v317;
            if (v356 != 2)
            {
              if (v356 == 1)
              {
                WTF::Vector<std::optional<double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)&v337, (WTF *)&v354);
                v179 = HIDWORD(v338);
                goto LABEL_320;
              }
LABEL_330:
              v328 = 0;
              v329 = 0;
              if (v358)
              {
                if (v358 != 1)
                {
                  v195 = 0;
                  goto LABEL_340;
                }
                v189 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v328, 1uLL, (unint64_t)v357);
                v191 = HIDWORD(v329);
                v192 = v328;
                v193 = *v189;
                if (*v189)
                  *v193 += 2;
                LODWORD(v194) = v191 + 1;
                *((_QWORD *)v192 + v191) = v193;
                HIDWORD(v329) = v191 + 1;
                if ((_DWORD)v191 == -1)
                {
LABEL_337:
                  v195 = v328;
                  if ((_DWORD)v329)
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    *(_QWORD *)v195 = v345;
                    v196 = HIDWORD(v329);
                    goto LABEL_342;
                  }
LABEL_340:
                  v197 = (WTF *)WTF::fastMalloc((WTF *)0x80);
                  v199 = v197;
                  LODWORD(v329) = 16;
                  v328 = v197;
                  if (v195)
                  {
                    if (v197 == v195)
                    {
                      v328 = 0;
                      LODWORD(v329) = 0;
                    }
                    WTF::fastFree(v195, v198);
                    v199 = v328;
                  }
                  v200 = HIDWORD(v329);
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v196 = HIDWORD(v329);
                  *((_QWORD *)v199 + v200) = v345;
LABEL_342:
                  LODWORD(v194) = v196 + 1;
                  HIDWORD(v329) = v194;
                }
              }
              else
              {
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v328, v357);
                LODWORD(v194) = HIDWORD(v329);
                if (!HIDWORD(v329))
                  goto LABEL_337;
              }
              v201 = HIDWORD(v321);
              if (v194 < HIDWORD(v321))
              {
                v202 = v194;
                v203 = v194;
                do
                {
                  if (v203 % v202 >= v194)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19566EFE4);
                  }
                  v204 = v328;
                  v205 = (_QWORD *)((char *)v328 + 8 * (v203 % v202));
                  if ((_DWORD)v194 == (_DWORD)v329)
                  {
                    v206 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v328, v194 + 1, (unint64_t)v205);
                    v194 = HIDWORD(v329);
                    v207 = v328;
                    v208 = *v206;
                    if (*v206)
                      *v208 += 2;
                    *((_QWORD *)v207 + v194) = v208;
                  }
                  else
                  {
                    v209 = (_DWORD *)*v205;
                    if (*v205)
                      *v209 += 2;
                    *((_QWORD *)v204 + v194) = v209;
                  }
                  LODWORD(v194) = v194 + 1;
                  HIDWORD(v329) = v194;
                  ++v203;
                  v201 = HIDWORD(v321);
                }
                while (v203 < HIDWORD(v321));
              }
              while (v194 > v201)
              {
                v210 = v194 - 1;
                v211 = (WTF::StringImpl *)*((_QWORD *)v328 + v210);
                *((_QWORD *)v328 + v210) = 0;
                v345 = v211;
                v212 = (WTF::StringImpl *)*((_QWORD *)v328 + v210);
                *((_QWORD *)v328 + v210) = 0;
                if (v212)
                {
                  if (*(_DWORD *)v212 == 2)
                    WTF::StringImpl::destroy(v212, v190);
                  else
                    *(_DWORD *)v212 -= 2;
                }
                HIDWORD(v329) = v210;
                LODWORD(v213) = HIDWORD(v319);
                if (HIDWORD(v319) == (_DWORD)v319)
                {
                  v216 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v318, HIDWORD(v319) + 1, (unint64_t)&v345);
                  v213 = HIDWORD(v319);
                  v217 = v318;
                  v218 = *v216;
                  *v216 = 0;
                  *((_QWORD *)v217 + v213) = v218;
                }
                else
                {
                  v214 = v345;
                  v345 = 0;
                  *((_QWORD *)v318 + HIDWORD(v319)) = v214;
                }
                HIDWORD(v319) = v213 + 1;
                v215 = v345;
                v345 = 0;
                if (v215)
                {
                  if (*(_DWORD *)v215 == 2)
                    WTF::StringImpl::destroy(v215, v190);
                  else
                    *(_DWORD *)v215 -= 2;
                }
                LODWORD(v194) = HIDWORD(v329);
                v201 = HIDWORD(v321);
              }
              if (v201)
              {
                v219 = 0;
                v220 = 8;
                while (v219 < HIDWORD(v329))
                {
                  v221 = v320;
                  v222 = (_DWORD *)*((_QWORD *)v328 + v219);
                  if (v222)
                    *v222 += 2;
                  v223 = *(WTF::StringImpl **)((char *)v221 + v220);
                  *(_QWORD *)((char *)v221 + v220) = v222;
                  if (v223)
                  {
                    if (*(_DWORD *)v223 == 2)
                      WTF::StringImpl::destroy(v223, v190);
                    else
                      *(_DWORD *)v223 -= 2;
                  }
                  ++v219;
                  v220 += 64;
                  if (v219 >= HIDWORD(v321))
                    goto LABEL_378;
                }
                __break(0xC471u);
LABEL_596:
                JUMPOUT(0x19566EFD4);
              }
LABEL_378:
              v345 = 0;
              __len = 0;
              if (v361)
              {
                if (v361 == 1)
                {
                  v224 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v345, (WTF *)1, (unint64_t)&__src);
                  LODWORD(v225) = HIDWORD(__len) + 1;
                  *((_BYTE *)v345 + HIDWORD(__len)) = *v224;
                  goto LABEL_388;
                }
LABEL_409:
                v239 = v328;
                if (HIDWORD(v329))
                {
                  v301 = 8 * HIDWORD(v329);
                  do
                  {
                    v302 = *(WTF::StringImpl **)v239;
                    *(_QWORD *)v239 = 0;
                    if (v302)
                    {
                      if (*(_DWORD *)v302 == 2)
                        WTF::StringImpl::destroy(v302, v190);
                      else
                        *(_DWORD *)v302 -= 2;
                    }
                    v239 = (WTF *)((char *)v239 + 8);
                    v301 -= 8;
                  }
                  while (v301);
                  v239 = v328;
                  if (v328)
                    goto LABEL_549;
                }
                else
                {
                  if (!v328)
                    goto LABEL_411;
LABEL_549:
                  v328 = 0;
                  LODWORD(v329) = 0;
                  WTF::fastFree(v239, v190);
                }
LABEL_411:
                v240 = v337;
                if (v337)
                {
                  v337 = 0;
                  LODWORD(v338) = 0;
                  WTF::fastFree(v240, v190);
                }
                v241 = v351;
                v351 = 0;
                if (v241)
                {
                  if (*(_DWORD *)v241 == 2)
                    WTF::StringImpl::destroy(v241, v190);
                  else
                    *(_DWORD *)v241 -= 2;
                }
                v242 = v348;
                v348 = 0;
                if (v242)
                {
                  if (*(_DWORD *)v242 == 2)
                    WTF::StringImpl::destroy(v242, v190);
                  else
                    *(_DWORD *)v242 -= 2;
                }
                WTF::Vector<WebCore::KeyframeEffect::PropertyAndValues,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v362, v190);
                if (v361 != -1)
                  ((void (*)(WTF::StringImpl **, void **))off_1E3391A58[v361])(&v348, &__src);
                v361 = -1;
                if (v358 != -1)
                  ((void (*)(WTF::StringImpl **, unsigned int *))off_1E3391A38[v358])(&v348, v357);
                v358 = -1;
                if (v356 != -1)
                  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3391A08[v356])(&v348, &v354);
                if (v374 != -1)
                  ((void (*)(uint64_t *, uint64_t *))off_1E3391B90[v374])(&v354, &v365);
LABEL_439:
                v247 = HIDWORD(v321);
                if (!HIDWORD(v321))
                {
LABEL_476:
                  if (!HIDWORD(v319))
                  {
LABEL_485:
                    v280 = *(unsigned int *)(a2 + 244);
                    if ((_DWORD)v280)
                    {
                      v281 = *(WebCore::KeyframeEffect::ComputedKeyframe **)(a2 + 232);
                      v282 = (WebCore::KeyframeEffect::ComputedKeyframe *)((char *)v281 + 64 * v280);
                      do
                      {
                        v283 = *((_QWORD *)v281 + 7);
                        *((_QWORD *)v281 + 7) = 0;
                        if (v283)
                        {
                          if (*(_DWORD *)v283 == 1)
                          {
                            v285 = *(unsigned int *)(v283 + 28);
                            if ((_DWORD)v285)
                            {
                              v286 = 16 * v285;
                              v287 = (_DWORD **)(*(_QWORD *)(v283 + 16) + 8);
                              do
                              {
                                v288 = *v287;
                                *v287 = 0;
                                if (v288)
                                {
                                  if (*v288 == 2)
                                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v288, a3);
                                  else
                                    *v288 -= 2;
                                }
                                v287 += 2;
                                v286 -= 16;
                              }
                              while (v286);
                            }
                            v289 = *(WTF **)(v283 + 16);
                            if ((WTF *)(v283 + 32) != v289 && v289 != 0)
                            {
                              *(_QWORD *)(v283 + 16) = 0;
                              *(_DWORD *)(v283 + 24) = 0;
                              WTF::fastFree(v289, a3);
                            }
                            v291 = *(_QWORD *)(v283 + 8);
                            *(_QWORD *)(v283 + 8) = 0;
                            if (v291)
                              (*(void (**)(uint64_t))(*(_QWORD *)v291 + 8))(v291);
                            WTF::fastFree((WTF *)v283, a3);
                          }
                          else
                          {
                            --*(_DWORD *)v283;
                          }
                        }
                        v284 = (_DWORD *)*((_QWORD *)v281 + 6);
                        *((_QWORD *)v281 + 6) = 0;
                        if (v284)
                        {
                          if (v284[2] == 1)
                            (*(void (**)(_DWORD *))(*(_QWORD *)v284 + 16))(v284);
                          else
                            --v284[2];
                        }
                        WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe(v281, a3);
                        v281 = (WebCore::KeyframeEffect::ComputedKeyframe *)((char *)v281 + 64);
                      }
                      while (v281 != v282);
                    }
                    v292 = *(WTF **)(a2 + 232);
                    if (!v292)
                      goto LABEL_512;
                    goto LABEL_586;
                  }
                  v277 = v318;
                  v278 = 8 * HIDWORD(v319);
                  while (1)
                  {
                    WebCore::TimingFunction::createFromCSSText(v277, (uint64_t)&v364);
                    v271 = v366;
                    if ((_DWORD)v366)
                      break;
                    v279 = v364;
                    v364 = 0;
                    if (v279)
                    {
                      if (*((_DWORD *)v279 + 2) == 1)
                        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v279 + 16))(v279);
                      else
                        --*((_DWORD *)v279 + 2);
                    }
                    v277 = (WTF *)((char *)v277 + 8);
                    v278 -= 8;
                    if (!v278)
                      goto LABEL_485;
                  }
LABEL_517:
                  if (v271 == 1)
                  {
                    v16 = (char)v364;
                    v17 = v365;
                    goto LABEL_519;
                  }
LABEL_585:
                  v292 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_586:
                  *(_QWORD *)(a2 + 232) = 0;
                  *(_DWORD *)(a2 + 240) = 0;
                  WTF::fastFree(v292, a3);
LABEL_512:
                  *(_QWORD *)(a2 + 232) = v320;
                  v293 = v321;
                  v320 = 0;
                  v321 = 0;
                  *(_QWORD *)(a2 + 240) = v293;
                  *(_BYTE *)(a2 + 305) = 2;
                  WebCore::BlendingKeyframes::clear((WebCore::BlendingKeyframes *)(a2 + 136));
                  v294 = *(_QWORD *)(a2 + 264);
                  if (v294)
                  {
                    if (*(_BYTE *)(a2 + 288) && (v295 = *(WTF::StringImpl **)(a2 + 280)) != 0)
                    {
                      *(_DWORD *)v295 += 2;
                      WebCore::Node::invalidateStyle(v294, 1u, 0);
                      if (*(_DWORD *)v295 == 2)
                        WTF::StringImpl::destroy(v295, a3);
                      else
                        *(_DWORD *)v295 -= 2;
                    }
                    else
                    {
                      WebCore::Node::invalidateStyle(v294, 1u, 0);
                    }
                  }
                  *(_QWORD *)a5 = 0;
                  *(_QWORD *)(a5 + 8) = 0;
                  *(_QWORD *)(a5 + 16) = 0;
LABEL_523:
                  if (HIDWORD(v319))
                  {
                    v298 = v318;
                    v299 = 8 * HIDWORD(v319);
                    do
                    {
                      v300 = *(WTF::StringImpl **)v298;
                      *(_QWORD *)v298 = 0;
                      if (v300)
                      {
                        if (*(_DWORD *)v300 == 2)
                          WTF::StringImpl::destroy(v300, a3);
                        else
                          *(_DWORD *)v300 -= 2;
                      }
                      v298 = (WTF *)((char *)v298 + 8);
                      v299 -= 8;
                    }
                    while (v299);
                  }
                  v296 = v318;
                  if (v318)
                  {
                    v318 = 0;
                    LODWORD(v319) = 0;
                    WTF::fastFree(v296, a3);
                  }
                  v297 = v320;
                  if (HIDWORD(v321))
                  {
                    v303 = (WTF *)((char *)v320 + 64 * (unint64_t)HIDWORD(v321));
                    do
                    {
                      v304 = *((_QWORD *)v297 + 7);
                      *((_QWORD *)v297 + 7) = 0;
                      if (v304)
                      {
                        if (*(_DWORD *)v304 == 1)
                        {
                          v306 = *(unsigned int *)(v304 + 28);
                          if ((_DWORD)v306)
                          {
                            v307 = 16 * v306;
                            v308 = (_DWORD **)(*(_QWORD *)(v304 + 16) + 8);
                            do
                            {
                              v309 = *v308;
                              *v308 = 0;
                              if (v309)
                              {
                                if (*v309 == 2)
                                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v309, a3);
                                else
                                  *v309 -= 2;
                              }
                              v308 += 2;
                              v307 -= 16;
                            }
                            while (v307);
                          }
                          v310 = *(WTF **)(v304 + 16);
                          if ((WTF *)(v304 + 32) != v310 && v310 != 0)
                          {
                            *(_QWORD *)(v304 + 16) = 0;
                            *(_DWORD *)(v304 + 24) = 0;
                            WTF::fastFree(v310, a3);
                          }
                          v312 = *(_QWORD *)(v304 + 8);
                          *(_QWORD *)(v304 + 8) = 0;
                          if (v312)
                            (*(void (**)(uint64_t))(*(_QWORD *)v312 + 8))(v312);
                          WTF::fastFree((WTF *)v304, a3);
                        }
                        else
                        {
                          --*(_DWORD *)v304;
                        }
                      }
                      v305 = (_DWORD *)*((_QWORD *)v297 + 6);
                      *((_QWORD *)v297 + 6) = 0;
                      if (v305)
                      {
                        if (v305[2] == 1)
                          (*(void (**)(_DWORD *, __n128))(*(_QWORD *)v305 + 16))(v305, v15);
                        else
                          --v305[2];
                      }
                      WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe(v297, a3);
                      v297 = (WTF *)((char *)v297 + 64);
                    }
                    while (v297 != v303);
                    v297 = v320;
                    if (!v320)
                    {
LABEL_528:
                      v7 = *((_DWORD *)this + 6) - 2;
                      if (*((_DWORD *)this + 6) != 2)
                        goto LABEL_529;
                      goto LABEL_9;
                    }
                  }
                  else if (!v320)
                  {
                    goto LABEL_528;
                  }
                  v320 = 0;
                  LODWORD(v321) = 0;
                  WTF::fastFree(v297, a3);
                  goto LABEL_528;
                }
                v248 = 0;
                v249 = v320;
                v250 = (WTF *)((char *)v320 + 64 * (unint64_t)HIDWORD(v321));
                v251 = (unint64_t)HIDWORD(v321) << 6;
                v252 = -1.0;
                v15.n128_u64[0] = 1.0;
                do
                {
                  v253 = *(double *)((char *)v320 + v248);
                  v254 = v253 > 1.0 || v253 < v252;
                  if (v254 || v253 < 0.0)
                  {
                    *(_BYTE *)a5 = 33;
                    *(_QWORD *)(a5 + 8) = 0;
LABEL_520:
                    *(_BYTE *)(a5 + 16) = 1;
                    goto LABEL_523;
                  }
                  v248 += 64;
                  v252 = v253;
                }
                while (v251 != v248);
                v255 = v320;
                do
                {
                  *((_QWORD *)v255 + 3) = *(_QWORD *)v255;
                  v255 = (WTF *)((char *)v255 + 64);
                }
                while (v255 != v250);
                if (v247 >= 2)
                {
                  v256 = 0;
                  v257 = 0;
                  for (k = 1; k != v247; ++k)
                  {
                    v259 = k;
                    if (v257 != k - 1)
                    {
                      if (v257 >= v247)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19566EFF4);
                      }
                      v259 = k;
                      if (v257 + 1 < k)
                      {
                        v260 = 0;
                        v261 = *((uint64_t *)v249 + 8 * v257 + 3);
                        v262 = (uint64x2_t)vdupq_n_s64(~v257 + v256);
                        v263 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((*((double *)v249 + 8 * k + 3) - *(double *)&v261) / (double)(k - v257)), 0);
                        v264 = (float64x2_t)vdupq_lane_s64(v261, 0);
                        v265 = vdupq_n_s64(v257);
                        v266 = (_QWORD *)((char *)v249 + 64 * v257 + 152);
                        do
                        {
                          v267.i64[0] = v257 + v260 + 1;
                          v267.i64[1] = v257 + v260 + 2;
                          v268 = vmovn_s64((int64x2_t)vcgeq_u64(v262, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v260), (int8x16_t)xmmword_19688B1A0)));
                          v269 = vmlaq_f64(v264, v263, vcvtq_f64_u64((uint64x2_t)vsubq_s64(v267, v265)));
                          if ((v268.i8[0] & 1) != 0)
                            *(v266 - 8) = *(_QWORD *)&v269.f64[0];
                          if ((v268.i8[4] & 1) != 0)
                            *v266 = *(_QWORD *)&v269.f64[1];
                          v260 += 2;
                          v266 += 16;
                        }
                        while (((k - v257) & 0xFFFFFFFFFFFFFFFELL) != v260);
                        v259 = k;
                      }
                    }
                    ++v256;
                    v257 = v259;
                  }
                }
                v270 = (WTF::StringImpl **)((char *)v249 + 48);
                while (2)
                {
                  WebCore::TimingFunction::createFromCSSText((WebCore::TimingFunction *)(v270 - 5), (uint64_t)&v364);
                  v271 = v366;
                  if ((_DWORD)v366)
                    goto LABEL_517;
                  v272 = v364;
                  if (v364)
                    ++*((_DWORD *)v364 + 2);
                  v273 = *v270;
                  *v270 = v272;
                  if (v273)
                  {
                    v274 = *((_DWORD *)v273 + 2);
                    v275 = v274 - 1;
                    if (v274 != 1)
                    {
                      v276 = 0;
                      *((_DWORD *)v273 + 2) = v275;
                      break;
                    }
                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v273 + 16))(v273);
                    v276 = v366;
                    if ((_DWORD)v366 == -1)
                    {
LABEL_471:
                      v270 += 8;
                      v251 -= 64;
                      if (!v251)
                        goto LABEL_476;
                      continue;
                    }
                  }
                  else
                  {
                    v276 = 0;
                  }
                  break;
                }
                ((void (*)(uint64_t *, WTF::StringImpl **))off_1E3391BA0[v276])(&v354, &v364);
                goto LABEL_471;
              }
              v226 = v360;
              if (v360)
              {
                v227 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)v360);
                LODWORD(__len) = v226;
                v345 = v227;
                v228 = (char *)__src;
                if (HIDWORD(__len))
                {
                  memmove(v227, __src, HIDWORD(__len));
                  v229 = HIDWORD(__len);
                  v227 = v345;
                  goto LABEL_385;
                }
                v229 = 0;
              }
              else
              {
                v227 = 0;
                v229 = 0;
LABEL_385:
                v228 = (char *)__src;
              }
              memcpy((char *)v227 + v229, &v228[v229], v360 - v229);
              LODWORD(v225) = v360;
LABEL_388:
              HIDWORD(__len) = v225;
              if ((_DWORD)v225)
              {
                v230 = v225;
                v231 = HIDWORD(v321);
                if (v225 >= HIDWORD(v321))
                {
                  LODWORD(v225) = 1;
                  v233 = v345;
                }
                else
                {
                  v232 = v225;
                  do
                  {
                    if (v232 % v230 >= v225)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19566EFECLL);
                    }
                    v233 = v345;
                    v234 = (char *)v345 + v232 % v230;
                    if ((_DWORD)v225 == (_DWORD)__len)
                    {
                      v234 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v345, (WTF *)(v225 + 1), (unint64_t)v234);
                      LODWORD(v225) = HIDWORD(__len);
                      v233 = v345;
                      v235 = (char *)v345 + HIDWORD(__len);
                    }
                    else
                    {
                      v235 = (char *)v345 + v225;
                    }
                    *v235 = *v234;
                    v225 = (v225 + 1);
                    HIDWORD(__len) = v225;
                    ++v232;
                    v231 = HIDWORD(v321);
                  }
                  while (v232 < HIDWORD(v321));
                  v230 = v225;
                }
                if (v231 && (_DWORD)v225)
                {
                  v236 = 0;
                  v237 = (char *)v320 + 16;
                  do
                  {
                    v238 = *((unsigned __int8 *)v233 + v236);
                    if (v238 != 3)
                    {
                      *v237 = v238;
                      v231 = HIDWORD(v321);
                    }
                    if (++v236 >= v230)
                      break;
                    v237 += 64;
                  }
                  while (v236 < v231);
LABEL_408:
                  v345 = 0;
                  LODWORD(__len) = 0;
                  WTF::fastFree(v233, v190);
                  goto LABEL_409;
                }
              }
              else
              {
                v233 = v345;
              }
              if (!v233)
                goto LABEL_409;
              goto LABEL_408;
            }
            v180 = (WTF *)WTF::fastMalloc((WTF *)0x100);
            LODWORD(v338) = 16;
            v337 = v180;
            v181 = (char *)v180 + 16 * HIDWORD(v338);
            *(_QWORD *)v181 = v354;
            v181[8] = 1;
            v179 = ++HIDWORD(v338);
          }
          else
          {
            v182 = (WTF *)WTF::fastMalloc((WTF *)0x100);
            LODWORD(v338) = 16;
            v337 = v182;
            v183 = (char *)v182 + 16 * HIDWORD(v338);
            *v183 = 0;
            v183[8] = 0;
            v179 = ++HIDWORD(v338);
            a2 = v316;
            a5 = v317;
          }
LABEL_320:
          if (v179 && HIDWORD(v321))
          {
            v184 = v320;
            v185 = (char *)v337 + 8;
            v186 = 1;
            do
            {
              if (*v185)
                v187 = *((_QWORD *)v185 - 1);
              else
                v187 = 0x7FF8000000000000;
              *(_QWORD *)v184 = v187;
              v184 = (WTF *)((char *)v184 + 64);
              if (v186 >= v179)
                break;
              v185 += 16;
            }
            while (v186++ < HIDWORD(v321));
          }
          goto LABEL_330;
        }
      }
    }
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  if (v7)
  {
LABEL_529:
    *((_DWORD *)this + 6) = v7;
    return;
  }
LABEL_9:
  if ((*((_WORD *)this + 15) & 0x400) == 0)
    WebCore::Node::removedLastRef(this, a3);
}

void WebCore::KeyframeEffect::copyPropertiesFromSource(uint64_t a1, uint64_t *a2)
{
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  _DWORD *v24;
  const WebCore::StyleProperties *v25;
  WebCore::MutableStyleProperties *v26;
  WebCore::MutableStyleProperties *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD **v42;
  _DWORD *v43;
  WTF *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD **v49;
  _DWORD *v50;
  WTF *v51;
  uint64_t v53;
  uint64_t v54;
  WebCore::KeyframeEffect::ComputedKeyframe *v55;
  WebCore::KeyframeEffect::ComputedKeyframe *v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD **v61;
  _DWORD *v62;
  WTF *v63;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  int v68;
  double v69;
  double v70;
  int v71;
  double v72;
  _DWORD *v73;
  _DWORD *v74;
  uint64_t v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  _DWORD *v82;
  void *v83;
  uint64_t v84;
  WTF *v85;
  uint64_t *v86;
  uint64_t v87;
  WTF::StringImpl *v88[2];
  __int128 v89;
  uint64_t v90[4];
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;

  WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)(a1 + 264), *(_QWORD *)(*a2 + 264));
  std::__optional_storage_base<WebCore::Style::PseudoElementIdentifier,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Style::PseudoElementIdentifier,false> const&>(a1 + 272, *a2 + 272);
  v5 = *(unsigned int **)(*a2 + 120);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v5;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v84 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v84)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v84));
      v85 = *(WTF **)(v7 + 16);
      if (v85)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        WTF::fastFree(v85, v4);
      }
      WTF::fastFree((WTF *)v7, v4);
    }
  }
  v86 = a2;
  v10 = *a2;
  *(_WORD *)(a1 + 306) = *(_WORD *)(*a2 + 306);
  v91 = 0;
  v92 = 0;
  v11 = *(unsigned int *)(v10 + 244);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(v10 + 232);
    v13 = v12 + (v11 << 6);
    do
    {
      v87 = 0x7FF8000000000000;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v88[0] = v93;
      LOBYTE(v88[1]) = 3;
      v90[0] = 0;
      v90[1] = 0;
      *((_QWORD *)&v89 + 1) = 0;
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
      *v14 = 0x900000001;
      v14[1] = 0;
      v14[2] = v14 + 4;
      v14[3] = 4;
      v90[2] = (uint64_t)v14;
      v16 = *(WTF::StringImpl **)(v12 + 8);
      if (v16)
        *(_DWORD *)v16 += 2;
      v17 = v88[0];
      v88[0] = v16;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v15);
        else
          *(_DWORD *)v17 -= 2;
      }
      v87 = *(_QWORD *)v12;
      LOBYTE(v88[1]) = *(_BYTE *)(v12 + 16);
      WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable((uint64_t *)&v93, (unsigned __int16 **)(v12 + 32));
      v19 = (WTF::StringImpl *)*((_QWORD *)&v89 + 1);
      *((_QWORD *)&v89 + 1) = v93;
      v93 = v19;
      if (v19)
      {
        v20 = *((unsigned int *)v19 - 1);
        if ((_DWORD)v20)
        {
          v21 = (WTF::StringImpl **)((char *)v19 + 8);
          do
          {
            if (*((__int16 *)v21 - 4) != -1)
            {
              v22 = *v21;
              *v21 = 0;
              if (v22)
              {
                if (*(_DWORD *)v22 == 2)
                  WTF::StringImpl::destroy(v22, v18);
                else
                  *(_DWORD *)v22 -= 2;
              }
            }
            v21 += 2;
            --v20;
          }
          while (v20);
        }
        WTF::fastFree((WTF::StringImpl *)((char *)v19 - 16), v18);
      }
      WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::operator=(v90, (_QWORD *)(v12 + 40));
      *(_QWORD *)&v89 = *(_QWORD *)(v12 + 24);
      v23 = *(_QWORD *)(v12 + 48);
      if (v23)
        ++*(_DWORD *)(v23 + 8);
      v24 = (_DWORD *)v90[1];
      v90[1] = v23;
      if (v24)
      {
        if (v24[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 16))(v24);
        else
          --v24[2];
      }
      v25 = *(const WebCore::StyleProperties **)(v12 + 56);
      v26 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
      v27 = WebCore::MutableStyleProperties::MutableStyleProperties(v26, v25);
      v29 = v90[2];
      v90[2] = (uint64_t)v27;
      if (v29)
      {
        if (*(_DWORD *)v29 == 1)
        {
          v40 = *(unsigned int *)(v29 + 28);
          if ((_DWORD)v40)
          {
            v41 = 16 * v40;
            v42 = (_DWORD **)(*(_QWORD *)(v29 + 16) + 8);
            do
            {
              v43 = *v42;
              *v42 = 0;
              if (v43)
              {
                if (*v43 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v43, v28);
                else
                  *v43 -= 2;
              }
              v42 += 2;
              v41 -= 16;
            }
            while (v41);
          }
          v44 = *(WTF **)(v29 + 16);
          if ((WTF *)(v29 + 32) != v44 && v44 != 0)
          {
            *(_QWORD *)(v29 + 16) = 0;
            *(_DWORD *)(v29 + 24) = 0;
            WTF::fastFree(v44, v28);
          }
          v46 = *(_QWORD *)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v46)
            (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
          WTF::fastFree((WTF *)v29, v28);
        }
        else
        {
          --*(_DWORD *)v29;
        }
      }
      v30 = HIDWORD(v92);
      if (HIDWORD(v92) == (_DWORD)v92)
      {
        WTF::Vector<WebCore::KeyframeEffect::ParsedKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::KeyframeEffect::ParsedKeyframe>((uint64_t)&v91, (unint64_t)&v87);
      }
      else
      {
        v32 = v91;
        v33 = v91 + ((unint64_t)HIDWORD(v92) << 6);
        *(_QWORD *)v33 = v87;
        v34 = v88[0];
        if (v88[0])
          *(_DWORD *)v88[0] += 2;
        *(_QWORD *)(v33 + 8) = v34;
        *(_BYTE *)(v33 + 16) = v88[1];
        *(_QWORD *)(v33 + 24) = v89;
        WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable((uint64_t *)(v33 + 32), (unsigned __int16 **)&v89 + 1);
        WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable((uint64_t *)(v33 + 40), v90);
        v35 = v90[1];
        if (v90[1])
          ++*(_DWORD *)(v90[1] + 8);
        v36 = v32 + (v30 << 6);
        *(_QWORD *)(v36 + 48) = v35;
        v37 = v90[2];
        ++*(_DWORD *)v90[2];
        *(_QWORD *)(v36 + 56) = v37;
        HIDWORD(v92) = v30 + 1;
      }
      v38 = v90[2];
      v90[2] = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 1)
        {
          v47 = *(unsigned int *)(v38 + 28);
          if ((_DWORD)v47)
          {
            v48 = 16 * v47;
            v49 = (_DWORD **)(*(_QWORD *)(v38 + 16) + 8);
            do
            {
              v50 = *v49;
              *v49 = 0;
              if (v50)
              {
                if (*v50 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v50, v31);
                else
                  *v50 -= 2;
              }
              v49 += 2;
              v48 -= 16;
            }
            while (v48);
          }
          v51 = *(WTF **)(v38 + 16);
          if ((WTF *)(v38 + 32) != v51 && v51 != 0)
          {
            *(_QWORD *)(v38 + 16) = 0;
            *(_DWORD *)(v38 + 24) = 0;
            WTF::fastFree(v51, v31);
          }
          v53 = *(_QWORD *)(v38 + 8);
          *(_QWORD *)(v38 + 8) = 0;
          if (v53)
            (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
          WTF::fastFree((WTF *)v38, v31);
        }
        else
        {
          --*(_DWORD *)v38;
        }
      }
      v39 = (_DWORD *)v90[1];
      v90[1] = 0;
      if (v39)
      {
        if (v39[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 16))(v39);
        else
          --v39[2];
      }
      WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe((WebCore::KeyframeEffect::ComputedKeyframe *)&v87, v31);
      v12 += 64;
    }
    while (v12 != v13);
  }
  v54 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v54)
  {
    v55 = *(WebCore::KeyframeEffect::ComputedKeyframe **)(a1 + 232);
    v56 = (WebCore::KeyframeEffect::ComputedKeyframe *)((char *)v55 + 64 * v54);
    do
    {
      v57 = *((_QWORD *)v55 + 7);
      *((_QWORD *)v55 + 7) = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 1)
        {
          v59 = *(unsigned int *)(v57 + 28);
          if ((_DWORD)v59)
          {
            v60 = 16 * v59;
            v61 = (_DWORD **)(*(_QWORD *)(v57 + 16) + 8);
            do
            {
              v62 = *v61;
              *v61 = 0;
              if (v62)
              {
                if (*v62 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v62, (WTF::StringImpl *)v4);
                else
                  *v62 -= 2;
              }
              v61 += 2;
              v60 -= 16;
            }
            while (v60);
          }
          v63 = *(WTF **)(v57 + 16);
          if ((WTF *)(v57 + 32) != v63 && v63 != 0)
          {
            *(_QWORD *)(v57 + 16) = 0;
            *(_DWORD *)(v57 + 24) = 0;
            WTF::fastFree(v63, v4);
          }
          v65 = *(_QWORD *)(v57 + 8);
          *(_QWORD *)(v57 + 8) = 0;
          if (v65)
            (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
          WTF::fastFree((WTF *)v57, v4);
        }
        else
        {
          --*(_DWORD *)v57;
        }
      }
      v58 = (_DWORD *)*((_QWORD *)v55 + 6);
      *((_QWORD *)v55 + 6) = 0;
      if (v58)
      {
        if (v58[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v58 + 16))(v58);
        else
          --v58[2];
      }
      WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe(v55, (WTF::StringImpl *)v4);
      v55 = (WebCore::KeyframeEffect::ComputedKeyframe *)((char *)v55 + 64);
    }
    while (v55 != v56);
  }
  v66 = *(WTF **)(a1 + 232);
  if (v66)
  {
    *(_QWORD *)(a1 + 232) = 0;
    *(_DWORD *)(a1 + 240) = 0;
    WTF::fastFree(v66, v4);
  }
  *(_QWORD *)(a1 + 232) = v91;
  *(_QWORD *)(a1 + 240) = v92;
  v67 = *v86;
  v68 = *(unsigned __int8 *)(*v86 + 32);
  if (*(unsigned __int8 *)(a1 + 32) != v68)
    *(_BYTE *)(a1 + 32) = v68;
  v69 = *(double *)(v67 + 56);
  if (*(double *)(a1 + 56) != v69)
    *(double *)(a1 + 56) = v69;
  v70 = *(double *)(v67 + 64);
  if (*(double *)(a1 + 64) != v70)
    *(double *)(a1 + 64) = v70;
  v71 = *(unsigned __int8 *)(v67 + 33);
  if (*(unsigned __int8 *)(a1 + 33) != v71)
    *(_BYTE *)(a1 + 33) = v71;
  v72 = *(double *)(v67 + 48);
  if (v72 >= 0.0 && *(double *)(a1 + 48) != v72)
    *(double *)(a1 + 48) = v72;
  v73 = *(_DWORD **)(v67 + 24);
  if (v73)
    v73[2] += 2;
  v74 = *(_DWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v73;
  if (!v74)
  {
LABEL_124:
    if (!v73)
      goto LABEL_127;
    goto LABEL_125;
  }
  if (v74[2] != 1)
  {
    --v74[2];
    goto LABEL_124;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v74 + 16))(v74);
  if (!v73)
    goto LABEL_127;
LABEL_125:
  if (v73[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v73 + 16))(v73);
  else
    --v73[2];
LABEL_127:
  v75 = *v86;
  v76 = *(double *)(*v86 + 40);
  if (v76 >= 0.0 && *(double *)(a1 + 40) != v76)
    *(double *)(a1 + 40) = v76;
  v77 = *(double *)(v75 + 72);
  v78 = *(double *)(a1 + 72);
  if (v78 != v77)
  {
    *(double *)(a1 + 72) = v77;
    v78 = v77;
  }
  v79 = 0.0;
  if (v78 != 0.0)
  {
    v80 = *(double *)(a1 + 48);
    if (v80 != 0.0)
      v79 = v78 * v80;
  }
  *(double *)(a1 + 80) = v79;
  v81 = *(double *)(a1 + 64) + v79 + *(double *)(a1 + 56);
  if (v81 < 0.0)
    v81 = 0.0;
  *(double *)(a1 + 88) = v81;
  v82 = *(_DWORD **)(a1 + 128);
  if (v82)
    *v82 += 2;
  v87 = (uint64_t)v82;
  *(_OWORD *)v88 = 0u;
  v89 = 0u;
  memset(v90, 0, 30);
  WebCore::BlendingKeyframes::copyKeyframes((WebCore::BlendingKeyframes *)&v87, (const WebCore::BlendingKeyframes *)(v75 + 136));
  WebCore::KeyframeEffect::setBlendingKeyframes((WebCore::KeyframeEffect *)a1, (WTF::StringImpl *)&v87);
  WebCore::BlendingKeyframes::~BlendingKeyframes((WebCore::BlendingKeyframes *)&v87, v83);
}

uint64_t WebCore::KeyframeEffect::KeyframeEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  unsigned int *v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v21;
  WTF *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t WeakRandomUUIDVersion4;
  uint64_t v26;
  _QWORD v27[2];
  _BYTE **v28;
  _QWORD *v29;
  WTF::StringImpl *v30[2];
  _QWORD v31[8];

  v31[7] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E338C638;
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = &off_1E338CAA8;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  *(_WORD *)(a1 + 32) = 4;
  *(_OWORD *)(a1 + 40) = xmmword_1968A14C0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)a1 = off_1E3391588;
  *(_QWORD *)(a1 + 104) = &unk_1E3391660;
  *(_QWORD *)(a1 + 112) = &unk_1E33916A0;
  v7 = (_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = 0;
  WeakRandomUUIDVersion4 = WTF::UUID::generateWeakRandomUUIDVersion4((WTF::UUID *)v6);
  v26 = v8;
  v9 = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_();
  if (v9 < 0 || (v10 = __OFADD__(v9, 16), v11 = (v9 + 16), v10))
  {
    *v7 = 0;
    goto LABEL_31;
  }
  if (v11 > 0x3F)
  {
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>(v11, 1, (int8x16_t *)"keyframe-effect-", 0x10u, WeakRandomUUIDVersion4, v26, v30);
    WTF::AtomString::AtomString((WTF::AtomString *)(a1 + 128), v30[0]);
    v24 = v30[0];
    v30[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  else
  {
    *(_OWORD *)v30 = *(_OWORD *)"keyframe-effect-";
    v27[0] = WeakRandomUUIDVersion4;
    v27[1] = v26;
    v28 = (_BYTE **)&v29;
    v29 = v31;
    _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIhEEvPT_EUlDpOT_E_EEDcOS5_((uint64_t)v27, &v28);
    WTF::AtomStringImpl::add();
  }
  if (!*v7)
  {
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x19566FA90);
  }
  v12 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *v12 += 2;
  *(_QWORD *)(a1 + 136) = v12;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 190) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  if (a2)
    *(_DWORD *)(a2 + 24) += 2;
  *(_QWORD *)(a1 + 264) = a2;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  if (*(_BYTE *)(a3 + 16))
  {
    *(_DWORD *)(a1 + 272) = *(_DWORD *)a3;
    v13 = *(_DWORD **)(a3 + 8);
    if (v13)
      *v13 += 2;
    *(_QWORD *)(a1 + 280) = v13;
    *(_BYTE *)(a1 + 288) = 1;
  }
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0x30000000204;
  *(_BYTE *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  if (a2)
  {
    v14 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8));
    if (v14)
    {
      do
        v16 = __ldaxr(v14);
      while (__stlxr(v16 + 1, v14));
    }
    v17 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v14;
    if (v17)
    {
      do
      {
        v18 = __ldaxr((unsigned int *)v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, (unsigned int *)v17));
      if (!v19)
      {
        atomic_store(1u, (unsigned int *)v17);
        v21 = *(unsigned int *)(v17 + 28);
        if ((_DWORD)v21)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v17 + 16), (WTF::StringImpl *)(*(_QWORD *)(v17 + 16) + 32 * v21));
        v22 = *(WTF **)(v17 + 16);
        if (v22)
        {
          *(_QWORD *)(v17 + 16) = 0;
          *(_DWORD *)(v17 + 24) = 0;
          WTF::fastFree(v22, v15);
        }
        WTF::fastFree((WTF *)v17, v15);
      }
    }
  }
  return a1;
}

uint64_t *WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  if (a2)
    *(_DWORD *)(a2 + 24) += 2;
  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return a1;
}

void WebCore::KeyframeEffect::getKeyframes(WebCore::KeyframeEffect *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringBuilder *v11;
  WTF::String *v12;
  __n128 v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unsigned int *v26;
  unint64_t v27;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  unsigned __int16 *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  WTF *v36;
  int v37;
  unint64_t v39;
  uint64_t v40;
  WebCore::TimingFunction *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD **v56;
  WTF::StringImpl *v57;
  int v58;
  int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  int8x8_t *v63;
  WTF::StringImpl *v64;
  _DWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  WTF *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  const WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  double *v86;
  uint64_t v87;
  WebCore::KeyframeEffect *v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WebCore::TimingFunction *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  uint64_t v116;
  WTF *v117;
  void *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WebCore::Node *v121;
  uint64_t v122;
  uint64_t v123;
  _DWORD **v124;
  _DWORD *v125;
  WTF *v126;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  uint64_t v139;
  uint64_t v140;
  _DWORD *v141;
  uint64_t v142;
  uint64_t v143;
  char v144[8];
  int v145;
  _QWORD v146[4];
  WTF::StringImpl *v147;
  WTF **v148;
  WebCore::Node **v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  WTF *v153;
  uint64_t *v154;
  uint64_t v155;
  WebCore::Node *v156;
  int v157;
  WTF::StringImpl *v158;
  char v159;
  char v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  char v163;
  uint64_t v164;
  unsigned __int16 *v165;
  uint64_t v166;
  WTF::StringImpl **v167;
  WebCore::KeyframeEffect *v168;
  _QWORD *v169;
  WTF::StringImpl ***v170;
  _QWORD v171[11];

  v4 = *((_QWORD *)this + 12);
  if (v4)
  {
    v5 = *(_QWORD **)(v4 + 8);
    if (v5)
    {
      if ((*(unsigned int (**)(_QWORD *))(*v5 + 104))(v5))
      {
        v60 = (_QWORD *)v5[7];
        if (v60)
        {
          if ((*(unsigned int (**)(_QWORD *))(*v60 + 24))(v60))
          {
            v61 = v60[33];
            if (v61)
              WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(*(_QWORD *)(v61 + 40) + 8));
          }
        }
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  v143 = (uint64_t)a2;
  if (*((_DWORD *)this + 61))
    goto LABEL_4;
  if (*((_BYTE *)this + 305) == 2)
    return;
  v56 = (_DWORD **)((char *)this + 136);
  v57 = (WTF::StringImpl *)WebCore::BlendingKeyframes::containsAnimatableCSSProperty((WebCore::KeyframeEffect *)((char *)this + 136));
  if ((v57 & 1) == 0)
  {
    if (*((_DWORD *)this + 61))
    {
LABEL_4:
      v6 = 0;
      v7 = 0;
      while (1)
      {
        v8 = *((_QWORD *)this + 29);
        v9 = v8 + (v7 << 6);
        v161 = *(_QWORD *)v9;
        v10 = *(WTF::StringImpl **)(v9 + 8);
        if (v10)
          *(_DWORD *)v10 += 2;
        v162 = v10;
        v163 = *(_BYTE *)(v9 + 16);
        v164 = *(_QWORD *)(v9 + 24);
        WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable((uint64_t *)&v165, (unsigned __int16 **)(v9 + 32));
        WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(&v166, (_QWORD *)(v9 + 40));
        if (v165)
        {
          v14 = *((unsigned int *)v165 - 1);
          v15 = &v165[8 * v14];
          if (*((_DWORD *)v165 - 3))
          {
            v16 = v165;
            if ((_DWORD)v14)
            {
              v17 = 16 * v14;
              v16 = v165;
              while ((unsigned __int16)(*v16 + 1) <= 1u)
              {
                v16 += 8;
                v17 -= 16;
                if (!v17)
                {
                  v16 = v15;
                  break;
                }
              }
            }
LABEL_14:
            v18 = &v165[8 * *((unsigned int *)v165 - 1)];
            goto LABEL_19;
          }
          v16 = &v165[8 * v14];
        }
        else
        {
          v16 = 0;
          v14 = 0;
        }
        v15 = &v165[8 * v14];
        if (v165)
          goto LABEL_14;
        v18 = 0;
LABEL_19:
        if (v18 != v16)
        {
          v19 = (WTF::StringImpl *)(v8 + (v7 << 6) + 56);
          while (2)
          {
            v20 = *v16;
            if (v20 == 1)
              goto LABEL_43;
            v21 = *(_QWORD *)v19;
            v22 = *(unsigned int *)(*(_QWORD *)v19 + 4);
            if ((v22 & 8) != 0)
            {
              LODWORD(v23) = *(_DWORD *)(v21 + 28);
              do
              {
                LODWORD(v23) = v23 - 1;
                if ((int)v23 < 0)
                  goto LABEL_43;
              }
              while ((*(_WORD *)(*(_QWORD *)(v21 + 16) + 16 * v23) & 0x3FF) != v20);
              if ((v22 & 8) == 0)
                goto LABEL_27;
LABEL_33:
              if (*(_DWORD *)(v21 + 28) <= v23)
              {
                __break(0xC471u);
                JUMPOUT(0x1956709E4);
              }
              v25 = (unsigned __int16 *)(*(_QWORD *)(v21 + 16) + 16 * v23);
              v27 = *((_QWORD *)v25 + 1);
            }
            else
            {
              v23 = v22 >> 4;
              do
              {
                if (v23-- < 1)
                  goto LABEL_43;
              }
              while ((*(_WORD *)(v21 + 8 + 2 * v23) & 0x3FF) != v20);
              if ((_DWORD)v23 == -1)
                goto LABEL_43;
              if ((v22 & 8) != 0)
                goto LABEL_33;
LABEL_27:
              v24 = v21 + 8;
              v25 = (unsigned __int16 *)(v24 + 2 * v23);
              v26 = (unsigned int *)(v24 + ((v22 >> 3) & 0x1FFFFFFE) + 5 * v23);
              v27 = *v26 | ((unint64_t)*((unsigned __int8 *)v26 + 4) << 32);
            }
            if ((*v25 & 0x400) != 0)
            {
              WebCore::matchingShorthandsForLonghand(*v25 & 0x3FF, (uint64_t)v171);
              v35 = ((unint64_t)*v25 >> 11) & 3;
              if (HIDWORD(v171[1]) <= v35)
              {
                __break(0xC471u);
LABEL_287:
                __break(1u);
LABEL_288:
                v140 = 8 * v35;
                do
                {
                  v141 = *(_DWORD **)v19;
                  *(_QWORD *)v19 = 0;
                  if (v141)
                  {
                    if (*v141 == 1)
                      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v141, v34);
                    else
                      --*v141;
                  }
                  v19 = (WTF::StringImpl *)((char *)v19 + 8);
                  v140 -= 8;
                }
                while (v140);
                v19 = v147;
                if (v147)
                  goto LABEL_296;
                goto LABEL_138;
              }
              v36 = (WTF *)v171[0];
              v37 = *(unsigned __int16 *)(v171[0] + 16 * v35 + 12);
              if (&v171[2] != (_QWORD *)v171[0])
              {
                v171[0] = 0;
                LODWORD(v171[1]) = 0;
                WTF::fastFree(v36, v34);
              }
              if (v37 == 492)
              {
                if (!v27)
                  goto LABEL_43;
                if (((*(unsigned __int16 *)(v27 + 4) | (*(unsigned __int8 *)(v27 + 6) << 16)) & 0x3F800) == 0
                  && (*(_WORD *)(v27 + 4) & 0x7F) == 0x50
                  && *(unsigned __int16 *)(v27 + 8) - 16 < 0x1A)
                {
                  goto LABEL_43;
                }
LABEL_37:
                *(_DWORD *)v27 += 2;
                _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)v171, v27, v11, v12, v13);
                v30 = v171[0];
                v171[0] = 0;
                v31 = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
                *((_QWORD *)v16 + 1) = v30;
                if (v31)
                {
                  v32 = *(_DWORD *)v31 - 2;
                  if (*(_DWORD *)v31 != 2)
                    goto LABEL_39;
                  WTF::StringImpl::destroy(v31, v29);
                  v31 = (WTF::StringImpl *)v171[0];
                  v171[0] = 0;
                  if (v31)
                  {
                    v32 = *(_DWORD *)v31 - 2;
                    if (*(_DWORD *)v31 == 2)
                      WTF::StringImpl::destroy(v31, v29);
                    else
LABEL_39:
                      *(_DWORD *)v31 = v32;
                  }
                }
                if (*(_DWORD *)v27 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v27, v29);
                else
                  *(_DWORD *)v27 -= 2;
                goto LABEL_43;
              }
            }
            if (v27)
              goto LABEL_37;
LABEL_43:
            v33 = v16 + 8;
            v16 = v15;
            if (v33 != v15)
            {
              v16 = v33;
              while ((unsigned __int16)(*v16 + 1) <= 1u)
              {
                v16 += 8;
                if (v16 == v15)
                {
                  v16 = v15;
                  break;
                }
              }
            }
            if (v16 == v18)
              break;
            continue;
          }
        }
        v39 = *((unsigned int *)this + 61);
        if ((_DWORD)v39)
        {
          v40 = v143;
          if (v7 < v39)
          {
            v41 = *(WebCore::TimingFunction **)(*((_QWORD *)this + 29) + (v7 << 6) + 48);
            goto LABEL_70;
          }
        }
        else
        {
          v40 = v143;
          if (v7 < *((unsigned int *)this + 39))
          {
            v41 = (WebCore::TimingFunction *)WebCore::KeyframeEffect::timingFunctionForBlendingKeyframe(*((WebCore::KeyframeEffect **)this + 12), (const WebCore::BlendingKeyframe *)(*((_QWORD *)this + 18) + 48 * v7));
            goto LABEL_70;
          }
        }
        v41 = 0;
LABEL_70:
        WebCore::TimingFunction::cssText(v41, v171);
        v43 = (WTF::StringImpl *)v171[0];
        v171[0] = 0;
        v44 = v162;
        v162 = v43;
        if (v44)
        {
          v45 = *(_DWORD *)v44 - 2;
          if (*(_DWORD *)v44 == 2)
          {
            WTF::StringImpl::destroy(v44, v42);
            v44 = (WTF::StringImpl *)v171[0];
            v171[0] = 0;
            if (!v44)
              goto LABEL_73;
            v45 = *(_DWORD *)v44 - 2;
            if (*(_DWORD *)v44 == 2)
            {
              WTF::StringImpl::destroy(v44, v42);
              goto LABEL_73;
            }
          }
          *(_DWORD *)v44 = v45;
        }
LABEL_73:
        if (v6 == *(_DWORD *)(v40 + 8))
        {
          v46 = WTF::Vector<WebCore::KeyframeEffect::ComputedKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v40, v6 + 1, (unint64_t)&v161);
          v6 = *(_DWORD *)(v40 + 12);
          v47 = *(_QWORD *)v40 + 48 * v6;
          *(_QWORD *)v47 = *(_QWORD *)v46;
          v48 = *(_QWORD *)(v46 + 8);
          *(_QWORD *)(v46 + 8) = 0;
          *(_QWORD *)(v47 + 8) = v48;
          *(_BYTE *)(v47 + 16) = *(_BYTE *)(v46 + 16);
          *(_QWORD *)(v47 + 24) = *(_QWORD *)(v46 + 24);
          *(_QWORD *)(v47 + 32) = 0;
          v49 = *(_QWORD *)(v46 + 32);
          *(_QWORD *)(v46 + 32) = 0;
          *(_QWORD *)(v47 + 32) = v49;
          v50 = (uint64_t *)(v47 + 40);
          v51 = (uint64_t *)(v46 + 40);
        }
        else
        {
          v52 = *(_QWORD *)v40 + 48 * v6;
          *(_QWORD *)v52 = v161;
          v53 = v162;
          v162 = 0;
          *(_QWORD *)(v52 + 8) = v53;
          *(_BYTE *)(v52 + 16) = v163;
          *(_QWORD *)(v52 + 24) = v164;
          *(_QWORD *)(v52 + 32) = 0;
          v54 = (uint64_t)v165;
          v165 = 0;
          *(_QWORD *)(v52 + 32) = v54;
          v50 = (uint64_t *)(v52 + 40);
          v51 = &v166;
        }
        *v50 = 0;
        v55 = *v51;
        *v51 = 0;
        *v50 = v55;
        *(_DWORD *)(v40 + 12) = ++v6;
        WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe((WebCore::KeyframeEffect::ComputedKeyframe *)&v161, v42);
        if (++v7 >= *((unsigned int *)this + 61))
          return;
      }
    }
    return;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  if (!v19)
    goto LABEL_287;
  v58 = *((unsigned __int8 *)this + 288);
  if (*((_BYTE *)this + 288))
  {
    v59 = *((_DWORD *)this + 68);
    v57 = (WTF::StringImpl *)*((_QWORD *)this + 35);
    if (v57)
      *(_DWORD *)v57 += 2;
  }
  else
  {
    v59 = 0;
  }
  if ((*((_QWORD *)v19 + 9) & 0xFFFFFFFFFFFFLL) != 0
    && (v62 = *(unsigned int *)((*((_QWORD *)v19 + 9) & 0xFFFFFFFFFFFFLL) + 0xA4), (_DWORD)v62))
  {
    v129 = *(uint64_t **)((*((_QWORD *)v19 + 9) & 0xFFFFFFFFFFFFLL) + 0x98);
    v130 = 8 * v62;
    if (v58)
    {
      while (1)
      {
        v131 = *v129;
        if (*(_BYTE *)(*v129 + 96))
        {
          if (*(_DWORD *)(v131 + 80) == v59 && *(_QWORD *)(v131 + 88) == (_QWORD)v57)
            break;
        }
        v63 = 0;
        ++v129;
        v130 -= 8;
        if (!v130)
          goto LABEL_98;
      }
    }
    else
    {
      v63 = 0;
      while (1)
      {
        v131 = *v129;
        if (!*(_BYTE *)(*v129 + 96))
          break;
        ++v129;
        v130 -= 8;
        if (!v130)
          goto LABEL_98;
      }
    }
    v63 = *(int8x8_t **)(v131 + 8);
  }
  else
  {
    v63 = 0;
  }
LABEL_98:
  if (!v58 || !v57)
  {
LABEL_102:
    if (v63)
      goto LABEL_104;
    goto LABEL_103;
  }
  if (*(_DWORD *)v57 != 2)
  {
    *(_DWORD *)v57 -= 2;
    goto LABEL_102;
  }
  WTF::StringImpl::destroy(v57, v34);
  if (!v63)
LABEL_103:
    v63 = WebCore::KeyframeEffect::currentStyle(this);
LABEL_104:
  *((_DWORD *)v19 + 6) += 2;
  v156 = v19;
  LOBYTE(v157) = 0;
  v159 = 0;
  if (*((_BYTE *)this + 288))
  {
    v157 = *((_DWORD *)this + 68);
    v64 = (WTF::StringImpl *)*((_QWORD *)this + 35);
    if (v64)
      *(_DWORD *)v64 += 2;
    v158 = v64;
    v159 = 1;
  }
  v160 = 0;
  v65 = *v56;
  if (*v56)
    *v65 += 2;
  v171[0] = v65;
  memset(&v171[1], 0, 62);
  WebCore::BlendingKeyframes::copyKeyframes((WebCore::BlendingKeyframes *)v171, (WebCore::KeyframeEffect *)((char *)this + 136));
  WebCore::BlendingKeyframes::fillImplicitKeyframes((WebCore::BlendingKeyframes *)v171, this, (const WebCore::RenderStyle *)v63);
  v66 = *((_QWORD *)this + 12);
  if (v66
    && (v67 = *(_QWORD **)(v66 + 8)) != 0
    && ((*(uint64_t (**)(_QWORD *))(*v67 + 112))(v67) & 1) != 0
    && (v135 = *((_QWORD *)this + 33)) != 0
    && (*(_BYTE *)(v135 + 22) & 8) != 0
    && (v136 = WebCore::Style::Scope::forOrdinal(v135, *(char *)(v67[27] + 40))) != 0)
  {
    v137 = v136;
    if (!*(_QWORD *)(v136 + 32))
    {
      if (*(_QWORD *)(v136 + 24))
        WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v136);
      else
        WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v136);
      v139 = *(_QWORD *)(v137 + 32);
      if (*(_DWORD *)(v139 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
        WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v139 + 32), v138);
      if (*(_BYTE *)(v139 + 242)
        || *(_BYTE *)(v139 + 243)
        || *(_BYTE *)(v139 + 244)
        || *(_BYTE *)(v139 + 245)
        || *(_BYTE *)(v139 + 246)
        || *(_BYTE *)(v139 + 247)
        || *(_BYTE *)(v139 + 248))
      {
        *(_BYTE *)(v137 + 236) = 1;
      }
    }
    WebCore::Style::Resolver::keyframeRulesForName(*(_DWORD ***)(v137 + 32), (const WTF::AtomString *)v171, (uint64_t)&v154);
  }
  else
  {
    v154 = 0;
    v155 = 0;
  }
  v68 = (WTF *)WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v68 = 0x900000001;
  *((_QWORD *)v68 + 1) = 0;
  *((_QWORD *)v68 + 2) = (char *)v68 + 32;
  *((_QWORD *)v68 + 3) = 4;
  v153 = v68;
  if (!*((_BYTE *)this + 305))
  {
    v69 = *(uint64_t **)(*((_QWORD *)this + 33) + 40);
    v70 = *v69;
    if (*v69 && (*(_WORD *)(v70 + 28) & 0x80) != 0)
      v71 = v70 + 216;
    else
      v71 = v69[1] + 1328;
    v72 = *(_QWORD *)v71;
    if (!*(_QWORD *)(*(_QWORD *)v71 + 32))
    {
      if (!*(_QWORD *)(v72 + 24))
        goto LABEL_272;
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v72);
LABEL_255:
      v134 = *(_QWORD *)(v72 + 32);
      if (*(_DWORD *)(v134 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
        WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v134 + 32), v133);
      if (*(_BYTE *)(v134 + 242)
        || *(_BYTE *)(v134 + 243)
        || *(_BYTE *)(v134 + 244)
        || *(_BYTE *)(v134 + 245)
        || *(_BYTE *)(v134 + 246)
        || *(_BYTE *)(v134 + 247)
        || *(_BYTE *)(v134 + 248))
      {
        *(_BYTE *)(v72 + 236) = 1;
      }
    }
    v73 = *(_QWORD *)(v72 + 32);
    LOBYTE(v161) = 0;
    LOBYTE(v166) = 0;
    if (*((_BYTE *)this + 288))
    {
      LODWORD(v161) = *((_DWORD *)this + 68);
      v74 = (WTF::StringImpl *)*((_QWORD *)this + 35);
      if (v74)
        *(_DWORD *)v74 += 2;
      v162 = v74;
      v163 = 0;
      LOBYTE(v165) = 0;
      LOBYTE(v166) = 1;
    }
    WebCore::Style::Resolver::pseudoStyleRulesForElement(v73, v19, (uint64_t)&v161, 14, (uint64_t)&v147);
    if ((_BYTE)v166)
    {
      v76 = v162;
      v162 = 0;
      if (v76)
      {
        if (*(_DWORD *)v76 == 2)
          WTF::StringImpl::destroy(v76, v34);
        else
          *(_DWORD *)v76 -= 2;
      }
    }
    if (HIDWORD(v148))
    {
      v77 = v147;
      v78 = 8 * HIDWORD(v148);
      do
      {
        v79 = *(_QWORD *)v77;
        v77 = (WTF::StringImpl *)((char *)v77 + 8);
        WebCore::MutableStyleProperties::mergeAndOverrideOnConflict(v153, *(const WebCore::StyleProperties **)(v79 + 8), v75);
        v78 -= 8;
      }
      while (v78);
    }
    v80 = *((_QWORD *)this + 33);
    if (v80)
    {
      if ((*(_WORD *)(v80 + 28) & 0x70) != 0 && !*((_BYTE *)this + 288))
      {
        v81 = *(_QWORD *)(v80 + 104);
        if (v81)
        {
          v34 = *(WTF::StringImpl **)(v81 + 8);
          if (v34)
            WebCore::MutableStyleProperties::mergeAndOverrideOnConflict(v153, v34, v75);
        }
      }
    }
    v35 = HIDWORD(v148);
    v19 = v147;
    if (HIDWORD(v148))
      goto LABEL_288;
    if (v147)
    {
LABEL_296:
      v147 = 0;
      LODWORD(v148) = 0;
      WTF::fastFree(v19, v34);
    }
  }
LABEL_138:
  if (HIDWORD(v171[2]))
  {
    v19 = (WTF::StringImpl *)v171[1];
    v142 = v171[1] + 48 * HIDWORD(v171[2]);
    do
    {
      v82 = *((_QWORD *)v19 + 3);
      v152 = 0;
      if (HIDWORD(v155))
      {
        v83 = v154;
        while (1)
        {
          v84 = *v83;
          v85 = *(unsigned int *)(*v83 + 28);
          if ((_DWORD)v85)
            break;
LABEL_146:
          if (++v83 == &v154[HIDWORD(v155)])
            goto LABEL_147;
        }
        v86 = *(double **)(v84 + 16);
        v87 = 8 * v85;
        while (*v86 != *((double *)v19 + 1))
        {
          ++v86;
          v87 -= 8;
          if (!v87)
            goto LABEL_146;
        }
      }
      else
      {
LABEL_147:
        v84 = 0;
      }
      v152 = v84;
      v161 = 0x7FF8000000000000;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v162 = v147;
      v163 = 3;
      v165 = 0;
      v166 = 0;
      v161 = *((_QWORD *)v19 + 1);
      v164 = v161;
      v88 = (WebCore::KeyframeEffect *)*((_QWORD *)this + 12);
      if (v88)
      {
        v89 = *((_QWORD *)v88 + 1);
        if (v89)
        {
          if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v89 + 120))(*((_QWORD *)v88 + 1)) & 1) != 0)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            goto LABEL_154;
          }
          v88 = (WebCore::KeyframeEffect *)*((_QWORD *)this + 12);
        }
      }
      v91 = (WebCore::TimingFunction *)WebCore::KeyframeEffect::timingFunctionForBlendingKeyframe(v88, v19);
      WebCore::TimingFunction::cssText(v91, &v147);
LABEL_154:
      v92 = v147;
      v147 = 0;
      v93 = v162;
      v162 = v92;
      if (!v93)
        goto LABEL_157;
      v94 = *(_DWORD *)v93 - 2;
      if (*(_DWORD *)v93 != 2)
      {
LABEL_156:
        *(_DWORD *)v93 = v94;
        goto LABEL_157;
      }
      WTF::StringImpl::destroy(v93, v90);
      v93 = v147;
      v147 = 0;
      if (v93)
      {
        v94 = *(_DWORD *)v93 - 2;
        if (*(_DWORD *)v93 != 2)
          goto LABEL_156;
        WTF::StringImpl::destroy(v93, v90);
      }
LABEL_157:
      if (*((unsigned __int16 *)v19 + 20) >= 0x100u)
      {
        v95 = *((_WORD *)v19 + 20);
        if (v95 >= 3)
          LOBYTE(v95) = 3;
        v163 = v95;
      }
      v147 = (WTF::StringImpl *)&v152;
      v148 = &v153;
      v149 = &v156;
      v150 = v82;
      v151 = &v161;
      v146[0] = &v152;
      v146[1] = &v153;
      v146[2] = &v156;
      v146[3] = &v161;
      v96 = *((_QWORD *)v19 + 2);
      if (!v96)
      {
        v101 = 0;
        v97 = 0;
        goto LABEL_176;
      }
      v97 = *(unsigned int *)(v96 - 4);
      v72 = v96 + 16 * v97;
      if (!*(_DWORD *)(v96 - 12))
      {
        v101 = v96 + 16 * v97;
LABEL_176:
        v72 = v96 + 16 * v97;
        if (!v96)
          goto LABEL_177;
        goto LABEL_179;
      }
      if ((_DWORD)v97)
      {
        v98 = 16 * v97;
        while (1)
        {
          v99 = *(unsigned int *)(v96 + 8);
          if ((_DWORD)v99 || *(_WORD *)v96 != 0)
          {
            if ((_DWORD)v99 == -1)
              goto LABEL_271;
            v167 = (WTF::StringImpl **)v144;
            if (!((unsigned int (*)(WTF::StringImpl ***, uint64_t))off_1E3391998[v99])(&v167, v96))
              break;
          }
          v96 += 16;
          v98 -= 16;
          if (!v98)
          {
            v96 = v72;
            break;
          }
        }
        v101 = v96;
        v96 = *((_QWORD *)v19 + 2);
        if (!v96)
        {
LABEL_177:
          v102 = 0;
          goto LABEL_180;
        }
      }
      else
      {
        v101 = *((_QWORD *)v19 + 2);
      }
LABEL_179:
      v102 = v96 + 16 * *(unsigned int *)(v96 - 4);
LABEL_180:
      if (v102 != v101)
      {
        while (1)
        {
          v144[0] = 0;
          v145 = -1;
          v103 = *(unsigned int *)(v101 + 8);
          if ((_DWORD)v103 == -1)
            break;
          ((void (*)(WTF::StringImpl ***, char *, uint64_t))off_1E33919F8[v103])(&v167, v144, v101);
          v145 = v103;
          v167 = &v147;
          v168 = this;
          v169 = v146;
          v170 = &v167;
          ((void (*)(WTF::StringImpl ****, char *))*(&off_1E3391C00 + v103))(&v170, v144);
          if (v145 != -1)
            ((void (*)(WTF::StringImpl ***, char *))off_1E33919E8[v145])(&v167, v144);
          v104 = v101 + 16;
          v101 = v72;
          if (v104 != v72)
          {
            v101 = v72;
            while (1)
            {
              v105 = *(unsigned int *)(v104 + 8);
              if ((_DWORD)v105 || *(_WORD *)v104 != 0)
              {
                if ((_DWORD)v105 == -1)
                  goto LABEL_271;
                v167 = (WTF::StringImpl **)v144;
                v101 = v72;
                if (!((unsigned int (*)(WTF::StringImpl ***, uint64_t))off_1E3391998[v105])(&v167, v104))
                  break;
              }
              v104 += 16;
              if (v104 == v101)
                goto LABEL_196;
            }
            v101 = v104;
          }
LABEL_196:
          if (v101 == v102)
            goto LABEL_197;
        }
        v167 = &v147;
        v168 = this;
        v169 = v146;
LABEL_271:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_272:
        WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v72);
        goto LABEL_255;
      }
LABEL_197:
      v107 = *(unsigned int *)(v143 + 12);
      if ((_DWORD)v107 == *(_DWORD *)(v143 + 8))
      {
        v108 = (uint64_t *)WTF::Vector<WebCore::KeyframeEffect::ComputedKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v143, v107 + 1, (unint64_t)&v161);
        LODWORD(v107) = *(_DWORD *)(v143 + 12);
        v109 = *(_QWORD *)v143 + 48 * v107;
        *(_QWORD *)v109 = *v108;
        v110 = v108[1];
        v108[1] = 0;
        *(_QWORD *)(v109 + 8) = v110;
        *(_BYTE *)(v109 + 16) = *((_BYTE *)v108 + 16);
        *(_QWORD *)(v109 + 24) = v108[3];
        *(_QWORD *)(v109 + 32) = 0;
        v111 = v108[4];
        v108[4] = 0;
        *(_QWORD *)(v109 + 32) = v111;
        v112 = (uint64_t *)(v109 + 40);
      }
      else
      {
        v113 = *(_QWORD *)v143 + 48 * v107;
        *(_QWORD *)v113 = v161;
        v114 = v162;
        v162 = 0;
        *(_QWORD *)(v113 + 8) = v114;
        *(_BYTE *)(v113 + 16) = v163;
        *(_QWORD *)(v113 + 24) = v164;
        *(_QWORD *)(v113 + 32) = 0;
        v115 = (uint64_t)v165;
        v165 = 0;
        *(_QWORD *)(v113 + 32) = v115;
        v112 = (uint64_t *)(v113 + 40);
        v108 = &v161;
      }
      *v112 = 0;
      v116 = v108[5];
      v108[5] = 0;
      *v112 = v116;
      *(_DWORD *)(v143 + 12) = v107 + 1;
      WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe((WebCore::KeyframeEffect::ComputedKeyframe *)&v161, v90);
      v19 = (WTF::StringImpl *)((char *)v19 + 48);
    }
    while (v19 != (WTF::StringImpl *)v142);
  }
  v117 = v153;
  v153 = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 1)
    {
      v122 = *((unsigned int *)v117 + 7);
      if ((_DWORD)v122)
      {
        v123 = 16 * v122;
        v124 = (_DWORD **)(*((_QWORD *)v117 + 2) + 8);
        do
        {
          v125 = *v124;
          *v124 = 0;
          if (v125)
          {
            if (*v125 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v125, v34);
            else
              *v125 -= 2;
          }
          v124 += 2;
          v123 -= 16;
        }
        while (v123);
      }
      v126 = (WTF *)*((_QWORD *)v117 + 2);
      if ((WTF *)((char *)v117 + 32) != v126 && v126 != 0)
      {
        *((_QWORD *)v117 + 2) = 0;
        *((_DWORD *)v117 + 6) = 0;
        WTF::fastFree(v126, v34);
      }
      v128 = *((_QWORD *)v117 + 1);
      *((_QWORD *)v117 + 1) = 0;
      if (v128)
        (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
      WTF::fastFree(v117, v34);
    }
    else
    {
      --*(_DWORD *)v117;
    }
  }
  WTF::Vector<WTF::Ref<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v154, v34);
  WebCore::BlendingKeyframes::~BlendingKeyframes((WebCore::BlendingKeyframes *)v171, v118);
  if (v159)
  {
    v120 = v158;
    v158 = 0;
    if (v120)
    {
      if (*(_DWORD *)v120 == 2)
        WTF::StringImpl::destroy(v120, v119);
      else
        *(_DWORD *)v120 -= 2;
    }
  }
  v121 = v156;
  v156 = 0;
  if (v121)
  {
    if (*((_DWORD *)v121 + 6) == 2)
    {
      if ((*((_WORD *)v121 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v121, v119);
    }
    else
    {
      *((_DWORD *)v121 + 6) -= 2;
    }
  }
}

uint64_t WebCore::KeyframeEffect::timingFunctionForKeyframeAtIndex(WebCore::KeyframeEffect *this, unint64_t a2)
{
  unint64_t v2;

  v2 = *((unsigned int *)this + 61);
  if ((_DWORD)v2)
  {
    if (v2 > a2)
      return *(_QWORD *)(*((_QWORD *)this + 29) + (a2 << 6) + 48);
  }
  else if (*((unsigned int *)this + 39) > a2)
  {
    return WebCore::KeyframeEffect::timingFunctionForBlendingKeyframe(*((WebCore::KeyframeEffect **)this + 12), (const WebCore::BlendingKeyframe *)(*((_QWORD *)this + 18) + 48 * a2));
  }
  return 0;
}

int8x8_t *WebCore::KeyframeEffect::currentStyle(WebCore::KeyframeEffect *this)
{
  uint64_t v1;
  int v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  int8x8_t *result;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  char v11;
  char v12;

  v1 = *((_QWORD *)this + 33);
  if (!v1)
    goto LABEL_15;
  if (*((_BYTE *)this + 288))
  {
    v2 = *((_DWORD *)this + 68);
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 35);
    if (v3)
      *(_DWORD *)v3 += 2;
    v8 = v1;
    v9 = v2;
    v10 = v3;
    v11 = 1;
  }
  else
  {
    v8 = *((_QWORD *)this + 33);
    LOBYTE(v9) = 0;
    v11 = 0;
  }
  v12 = 1;
  v5 = WebCore::Styleable::renderer((WebCore::Styleable *)&v8);
  if (v12)
  {
    if (v11)
    {
      v6 = v10;
      v10 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
        {
          WTF::StringImpl::destroy(v6, v4);
          if (v5)
            return (int8x8_t *)(v5 + 80);
          goto LABEL_15;
        }
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  if (v5)
    return (int8x8_t *)(v5 + 80);
LABEL_15:
    return &WebCore::RenderStyle::defaultStyle(void)::style;
  result = WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
  return result;
}

uint64_t WebCore::KeyframeEffect::timingFunctionForBlendingKeyframe(WebCore::KeyframeEffect *this, const WebCore::BlendingKeyframe *a2)
{
  _QWORD *v3;
  char *v4;
  uint64_t result;
  int v6;
  BOOL v7;

  if (!this
    || (v3 = (_QWORD *)*((_QWORD *)this + 1)) == 0
    || !(*(unsigned int (**)(_QWORD))(*v3 + 104))(*((_QWORD *)this + 1)))
  {
    v4 = (char *)a2 + 32;
    return *(_QWORD *)v4;
  }
  v6 = (*(uint64_t (**)(_QWORD *))(*v3 + 112))(v3);
  result = *((_QWORD *)a2 + 4);
  if (v6)
    v7 = result == 0;
  else
    v7 = 1;
  if (v7)
  {
    v4 = (char *)(v3[27] + 96);
    return *(_QWORD *)v4;
  }
  return result;
}

void WebCore::KeyframeEffect::setKeyframes(uint64_t a1@<X0>, JSC::JSGlobalObject *a2@<X1>, WebCore::Node *a3@<X2>, JSC::JSCell ***a4@<X3>, uint64_t a5@<X8>)
{
  __n128 v7;
  uint64_t v8;
  WebCore::WebAnimation *v9;
  WTF::MonotonicTime *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  WebCore::KeyframeEffect::processKeyframes(a3, a1, a2, a4, a5);
  if (!*(_BYTE *)(a5 + 16))
  {
    v8 = *(_QWORD *)(a1 + 96);
    if (v8)
    {
      v9 = *(WebCore::WebAnimation **)(v8 + 8);
      if (v9)
      {
        WebCore::WebAnimation::effectTimingDidChange(v9, v7);
        v10 = *(WTF::MonotonicTime **)(a1 + 264);
        if (v10)
        {
          if (*(_BYTE *)(a1 + 288) && (v11 = *(WTF::StringImpl **)(a1 + 280)) != 0)
          {
            *(_DWORD *)v11 += 2;
            WebCore::Element::invalidateStyleInternal(v10);
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v12);
            else
              *(_DWORD *)v11 -= 2;
          }
          else
          {
            WebCore::Element::invalidateStyleInternal(v10);
          }
        }
      }
    }
  }
}

uint64_t WebCore::KeyframeEffect::keyframesRuleDidChange(WebCore::KeyframeEffect *this)
{
  uint64_t result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *((_BYTE *)this + 305) = 2;
  WebCore::BlendingKeyframes::clear((WebCore::KeyframeEffect *)((char *)this + 136));
  result = *((_QWORD *)this + 33);
  if (result)
  {
    if (*((_BYTE *)this + 288) && (v3 = (WTF::StringImpl *)*((_QWORD *)this + 35)) != 0)
    {
      *(_DWORD *)v3 += 2;
      result = WebCore::Node::invalidateStyle(result, 1u, 0);
      if (*(_DWORD *)v3 == 2)
        return WTF::StringImpl::destroy(v3, v4);
      else
        *(_DWORD *)v3 -= 2;
    }
    else
    {
      return WebCore::Node::invalidateStyle(result, 1u, 0);
    }
  }
  return result;
}

uint64_t WebCore::KeyframeEffect::invalidate(WebCore::KeyframeEffect *this)
{
  uint64_t result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  result = *((_QWORD *)this + 33);
  if (result)
  {
    if (*((_BYTE *)this + 288) && (v3 = (WTF::StringImpl *)*((_QWORD *)this + 35)) != 0)
    {
      *(_DWORD *)v3 += 2;
      result = WebCore::Node::invalidateStyle(result, 1u, 0);
      if (*(_DWORD *)v3 == 2)
        return WTF::StringImpl::destroy(v3, v4);
      else
        *(_DWORD *)v3 -= 2;
    }
    else
    {
      return WebCore::Node::invalidateStyle(result, 1u, 0);
    }
  }
  return result;
}

_DWORD *WebCore::KeyframeEffect::customPropertyRegistrationDidChange(WebCore::KeyframeEffect *this, const WTF::AtomString *a2)
{
  _DWORD *result;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t i;
  unsigned int v10;
  unsigned __int16 *v11;
  uint64_t v12;
  BOOL v13;
  _BOOL4 v14;
  BOOL v16;
  _DWORD *v17;
  _DWORD *v18;
  unsigned int v19;
  char v20;
  char *v21;

  result = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *result;
    *result += 2;
    v18 = result;
    v19 = 1;
    v5 = *((_QWORD *)this + 20);
    if (!v5)
    {
      if (!v4)
        return (_DWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      *result = v4;
      return result;
    }
  }
  else
  {
    v18 = 0;
    v19 = 1;
    v5 = *((_QWORD *)this + 20);
    if (!v5)
      return result;
  }
  v6 = 0;
  v7 = *(_DWORD *)(v5 - 8);
  v8 = result[4] >> 8;
  for (i = 1; ; i = v19)
  {
    v10 = v8 & v7;
    v11 = (unsigned __int16 *)(v5 + 16 * (v8 & v7));
    v12 = *((unsigned int *)v11 + 2);
    v13 = i != v12 || i == 0xFFFFFFFFLL;
    v14 = !v13;
    if ((_DWORD)v12 != -1 && v14)
      break;
    if (v12 == 0xFFFFFFFFLL)
      LOBYTE(v14) = i == 0xFFFFFFFFLL;
    if (v14)
      goto LABEL_30;
LABEL_21:
    if (v12)
      v16 = 0;
    else
      v16 = *v11 == 0;
    if (v16)
    {
      if (v19 != -1)
        return (_DWORD *)((uint64_t (*)(char **, _DWORD **))off_1E33919E8[v19])(&v21, &v18);
      return result;
    }
    v8 = ++v6 + v10;
  }
  v21 = &v20;
  result = (_DWORD *)((uint64_t (*)(char **, uint64_t, _DWORD **))off_1E3391BC0[i])(&v21, v5 + 16 * v10, &v18);
  if (!(_DWORD)result)
  {
    v12 = *((unsigned int *)v11 + 2);
    goto LABEL_21;
  }
  i = v19;
LABEL_30:
  if (i != 0xFFFFFFFFLL)
    ((void (*)(char **, _DWORD **))off_1E33919E8[i])(&v21, &v18);
  *((_BYTE *)this + 305) = 2;
  WebCore::BlendingKeyframes::clear((WebCore::KeyframeEffect *)((char *)this + 136));
  result = (_DWORD *)*((_QWORD *)this + 33);
  if (result)
  {
    if (!*((_BYTE *)this + 288))
      return (_DWORD *)WebCore::Node::invalidateStyle((uint64_t)result, 1u, 0);
    v17 = (_DWORD *)*((_QWORD *)this + 35);
    if (!v17)
      return (_DWORD *)WebCore::Node::invalidateStyle((uint64_t)result, 1u, 0);
    *v17 += 2;
    result = (_DWORD *)WebCore::Node::invalidateStyle((uint64_t)result, 1u, 0);
    if (*v17 != 2)
    {
      *v17 -= 2;
      return result;
    }
    result = v17;
    return (_DWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
  }
  return result;
}

WebCore::RenderStyle **std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](WebCore::RenderStyle **a1, void *a2)
{
  WebCore::RenderStyle *v3;
  WTF *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::RenderStyle::~RenderStyle(v3, a2);
    if (*(_DWORD *)v4)
    {
      *((_OWORD *)v4 + 2) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *(_OWORD *)v4 = 0u;
      *((_OWORD *)v4 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v4, v5);
    }
  }
  return a1;
}

WTF **WTF::Ref<WebCore::StyleProperties,WTF::RawPtrTraits<WebCore::StyleProperties>,WTF::DefaultRefDerefTraits<WebCore::StyleProperties>>::~Ref(WTF **result, WTF::StringImpl *a2)
{
  WTF *v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  _DWORD *v8;
  WTF *v9;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  _DWORD *v14;
  WTF **v15;
  WTF *v16;

  v2 = *result;
  *result = 0;
  if (v2)
  {
    v15 = result;
    v16 = v2;
    v3 = *(_DWORD *)v2 - 1;
    if (v3)
    {
      *(_DWORD *)v16 = v3;
    }
    else
    {
      v4 = *((unsigned int *)v16 + 1);
      if ((v4 & 8) != 0)
      {
        v5 = *((unsigned int *)v16 + 7);
        if ((_DWORD)v5)
        {
          v6 = 16 * v5;
          v7 = (_DWORD **)(*((_QWORD *)v16 + 2) + 8);
          do
          {
            v8 = *v7;
            *v7 = 0;
            if (v8)
            {
              if (*v8 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, a2);
              else
                *v8 -= 2;
            }
            v7 += 2;
            v6 -= 16;
          }
          while (v6);
        }
        v9 = (WTF *)*((_QWORD *)v16 + 2);
        if ((WTF *)((char *)v16 + 32) != v9 && v9 != 0)
        {
          *((_QWORD *)v16 + 2) = 0;
          *((_DWORD *)v16 + 6) = 0;
          WTF::fastFree(v9, a2);
        }
        v11 = *((_QWORD *)v16 + 1);
        *((_QWORD *)v16 + 1) = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      else if (v4 >= 0x10)
      {
        v12 = 0;
        v13 = (unsigned int *)((char *)v16 + ((v4 >> 3) & 0x1FFFFFFE) + 8);
        do
        {
          v14 = (_DWORD *)(*v13 | ((unint64_t)*((unsigned __int8 *)v13 + 4) << 32));
          if (*v14 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, a2);
          else
            *v14 -= 2;
          ++v12;
          v13 = (unsigned int *)((char *)v13 + 5);
        }
        while (v12 < (unint64_t)*((unsigned int *)v16 + 1) >> 4);
      }
      WTF::fastFree(v16, a2);
    }
    return v15;
  }
  return result;
}

unsigned int **WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>::~Ref(unsigned int **a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  _DWORD *v8;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*v3 == 1)
    {
      v5 = v3[1];
      if (v5 >= 0x10)
      {
        v6 = 0;
        v7 = (unsigned int *)((char *)v3 + ((v5 >> 3) & 0x1FFFFFFE) + 8);
        do
        {
          v8 = (_DWORD *)(*v7 | ((unint64_t)*((unsigned __int8 *)v7 + 4) << 32));
          if (*v8 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, a2);
          else
            *v8 -= 2;
          ++v6;
          v7 = (unsigned int *)((char *)v7 + 5);
        }
        while (v6 < (unint64_t)v3[1] >> 4);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*v3;
    }
  }
  return a1;
}

double WebCore::BlendingKeyframe::setStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WebCore::RenderStyle *v4;
  WTF *v5;
  void *v6;
  double result;

  v3 = *a2;
  *a2 = 0;
  v4 = *(WebCore::RenderStyle **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  if (v4)
  {
    WebCore::RenderStyle::~RenderStyle(v4, a2);
    if (*(_DWORD *)v5)
    {
      result = 0.0;
      *((_OWORD *)v5 + 2) = 0u;
      *((_OWORD *)v5 + 3) = 0u;
      *(_OWORD *)v5 = 0u;
      *((_OWORD *)v5 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v5, v6);
    }
  }
  return result;
}

_QWORD *WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::keys(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = (_QWORD *)*a2;
  if (*a2)
  {
    v3 = *((unsigned int *)v2 - 1);
    v4 = &v2[2 * v3];
    if (*((_DWORD *)v2 - 3))
    {
      v5 = (_QWORD *)*a2;
      if ((_DWORD)v3)
      {
        v6 = 16 * v3;
        v5 = (_QWORD *)*a2;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          v6 -= 16;
          if (!v6)
          {
            v5 = v4;
            break;
          }
        }
      }
      if (v2)
        goto LABEL_9;
LABEL_13:
      v8 = 0;
      v7 = 0;
      goto LABEL_14;
    }
    v5 = &v2[2 * v3];
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  v4 = &v2[2 * v3];
  if (!v2)
    goto LABEL_13;
LABEL_9:
  v7 = *((unsigned int *)v2 - 1);
  v8 = &v2[2 * v7];
LABEL_14:
  *result = a2;
  result[1] = v5;
  result[2] = v4;
  result[3] = v8;
  result[4] = &v2[2 * v7];
  return result;
}

_QWORD *WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::keys(_QWORD *result, _QWORD *a2)
{
  _WORD *v2;
  uint64_t v3;
  _WORD *v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;

  v2 = (_WORD *)*a2;
  if (!*a2)
  {
    v5 = 0;
    v3 = 0;
LABEL_10:
    v4 = &v2[8 * v3];
    goto LABEL_11;
  }
  v3 = *((unsigned int *)v2 - 1);
  v4 = &v2[8 * v3];
  if (!*((_DWORD *)v2 - 3))
  {
    v5 = &v2[8 * v3];
    goto LABEL_10;
  }
  v5 = (_WORD *)*a2;
  if ((_DWORD)v3)
  {
    v6 = 16 * v3;
    v5 = (_WORD *)*a2;
    while ((unsigned __int16)(*v5 + 1) <= 1u)
    {
      v5 += 8;
      v6 -= 16;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_11:
  if (v2)
  {
    v7 = *((unsigned int *)v2 - 1);
    v8 = &v2[8 * v7];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  *result = a2;
  result[1] = v5;
  result[2] = v4;
  result[3] = v8;
  result[4] = &v2[8 * v7];
  return result;
}

uint64_t WebCore::KeyframeEffect::renderer(WebCore::KeyframeEffect *this)
{
  uint64_t v1;
  int v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  char v11;
  char v12;

  v1 = *((_QWORD *)this + 33);
  if (!v1)
    return 0;
  if (*((_BYTE *)this + 288))
  {
    v2 = *((_DWORD *)this + 68);
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 35);
    if (v3)
      *(_DWORD *)v3 += 2;
    v8 = v1;
    v9 = v2;
    v10 = v3;
    v11 = 1;
  }
  else
  {
    v8 = *((_QWORD *)this + 33);
    LOBYTE(v9) = 0;
    v11 = 0;
  }
  v12 = 1;
  v5 = WebCore::Styleable::renderer((WebCore::Styleable *)&v8);
  if (v12)
  {
    if (v11)
    {
      v6 = v10;
      v10 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v4);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
  }
  return v5;
}

uint64_t WebCore::KeyframeEffect::document(WebCore::KeyframeEffect *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 15);
  if (!v1 || (v2 = *(_QWORD *)(v1 + 8)) == 0)
  {
    v2 = *((_QWORD *)this + 33);
    if (v2)
      return *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
  }
  return v2;
}

uint64_t WebCore::KeyframeEffect::computeHasAcceleratedPropertyOverriddenByCascadeProperty(uint64_t this)
{
  WebCore::KeyframeEffect *v1;
  unsigned __int16 **v2;
  uint64_t *v3;
  void *v4;
  char v5;
  uint64_t v6;

  if (*(_BYTE *)(this + 328))
  {
    v1 = (WebCore::KeyframeEffect *)this;
    this = WebCore::Element::keyframeEffectStack(*(_QWORD *)(this + 264), this + 272);
    if (this)
    {
      v2 = (unsigned __int16 **)(this + 56);
      v3 = WebCore::KeyframeEffect::animatedProperties(v1);
      WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::intersectionWith<WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>>(&v6, v2, v3);
      v5 = v6;
      if (v6)
        v5 = *(_DWORD *)(v6 - 12) != 0;
      *((_BYTE *)v1 + 333) = v5;
      return WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::~HashSet(&v6, v4);
    }
  }
  return this;
}

void WebCore::KeyframeEffect::CanBeAcceleratedMutationScope::~CanBeAcceleratedMutationScope(WebCore::KeyframeEffect **this, WTF::StringImpl *a2)
{
  WebCore::KeyframeEffect *v3;
  int v4;
  int v5;

  v3 = *this;
  if (v3)
  {
    v4 = *((unsigned __int8 *)this + 8);
    if (v4 != WebCore::KeyframeEffect::preventsAcceleration(v3, a2)
      || (v5 = *((unsigned __int8 *)this + 9), v5 != WebCore::KeyframeEffect::canBeAccelerated(*this)))
    {
      WebCore::KeyframeEffect::abilityToBeAcceleratedDidChange(*this);
    }
  }
}

void WebCore::KeyframeEffect::computeStyleOriginatedAnimationBlendingKeyframes(WebCore::KeyframeEffect *a1, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3, int a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;

  v4 = *((_QWORD *)a1 + 12);
  if (v4)
  {
    v6 = *(_QWORD *)(v4 + 8);
    if (v6)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6))
      {
        WebCore::KeyframeEffect::computeCSSAnimationBlendingKeyframes((uint64_t)a1, (int)a3, a4);
      }
      else
      {
        v10 = *((_QWORD *)a1 + 12);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 8);
          if (v11)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 120))(v11))
              WebCore::KeyframeEffect::computeCSSTransitionBlendingKeyframes(a1, a2, a3);
          }
        }
      }
    }
  }
}

void WebCore::KeyframeEffect::computeCSSTransitionBlendingKeyframes(WebCore::KeyframeEffect *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  WebCore::Style *v9;
  const WebCore::Element *v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  WebCore::Document *v16;
  uint64_t v17;
  WebCore::RenderStyle *v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  _QWORD v28[2];
  uint64_t v29[2];
  _QWORD v30[2];
  _QWORD v31[2];
  uint64_t v32[2];
  _QWORD v33[2];
  _DWORD *v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[30];
  _BYTE v38[8];
  int v39;
  _BYTE v40[24];

  if (!*((_DWORD *)this + 39))
  {
    v6 = *((_QWORD *)this + 12);
    if (v6)
    {
      v7 = *(unsigned int **)(v6 + 8);
      if (v7 && ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 120))(v7) & 1) == 0)
      {
        __break(0xC471u);
        return;
      }
    }
    else
    {
      v7 = 0;
    }
    v38[0] = 0;
    v39 = -1;
    v8 = v7[60];
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(_DWORD **, _BYTE *, unsigned int *))off_1E33919F8[v8])(&v34, v38, v7 + 58);
      v39 = v8;
    }
    v9 = (WebCore::Style *)WTF::fastMalloc((WTF *)0x40);
    v11 = (uint64_t)v9;
    *(_DWORD *)v9 = 0;
    v12 = (_DWORD *)*((_QWORD *)a3 + 1);
    ++*v12;
    *((_QWORD *)v9 + 1) = v12;
    *((_QWORD *)v9 + 2) = *((_QWORD *)a3 + 2);
    v13 = (_DWORD *)*((_QWORD *)a3 + 3);
    ++*v13;
    *((_QWORD *)v9 + 3) = v13;
    v14 = (_DWORD *)*((_QWORD *)a3 + 4);
    ++*v14;
    *((_QWORD *)v9 + 4) = v14;
    *((_QWORD *)v9 + 5) = *((_QWORD *)a3 + 5);
    *((_QWORD *)v9 + 6) = 0;
    v15 = (_DWORD *)*((_QWORD *)a3 + 7);
    ++*v15;
    *((_QWORD *)v9 + 7) = v15;
    v16 = (WebCore::Document *)*((_QWORD *)this + 33);
    if (v16)
    {
      v17 = *((_QWORD *)this + 15);
      if (!v17 || (v18 = *(WebCore::RenderStyle **)(v17 + 8)) == 0)
        v18 = *(WebCore::RenderStyle **)(*((_QWORD *)v16 + 5) + 8);
      WebCore::Style::loadPendingResources(v9, v18, v16, v10);
    }
    v19 = (_DWORD *)*((_QWORD *)this + 16);
    if (v19)
      *v19 += 2;
    v34 = v19;
    v35 = 0u;
    v36 = 0u;
    memset(v37, 0, sizeof(v37));
    v20 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v20 = 0;
    v21 = (_DWORD *)*((_QWORD *)a2 + 1);
    ++*v21;
    *(_QWORD *)(v20 + 8) = v21;
    *(_QWORD *)(v20 + 16) = *((_QWORD *)a2 + 2);
    v22 = (_DWORD *)*((_QWORD *)a2 + 3);
    ++*v22;
    *(_QWORD *)(v20 + 24) = v22;
    v23 = (_DWORD *)*((_QWORD *)a2 + 4);
    ++*v23;
    *(_QWORD *)(v20 + 32) = v23;
    *(_QWORD *)(v20 + 40) = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v20 + 48) = 0;
    v24 = (_DWORD *)*((_QWORD *)a2 + 7);
    ++*v24;
    *(_QWORD *)(v20 + 56) = v24;
    v31[0] = off_1E338CBD0;
    v31[1] = 0;
    v32[0] = 0;
    v32[1] = v20;
    v33[0] = 0;
    *(_DWORD *)((char *)v33 + 7) = 0;
    WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add(v32, (uint64_t)v38, (uint64_t)v28);
    WebCore::BlendingKeyframes::insert((uint64_t)&v34, (unint64_t)v31);
    v28[0] = off_1E338CBD0;
    v28[1] = 0x3FF0000000000000;
    v29[0] = 0;
    v29[1] = v11;
    v30[0] = 0;
    *(_DWORD *)((char *)v30 + 7) = 0;
    WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add(v29, (uint64_t)v38, (uint64_t)v40);
    WebCore::BlendingKeyframes::insert((uint64_t)&v34, (unint64_t)v28);
    *((_BYTE *)this + 305) = 1;
    WebCore::KeyframeEffect::setBlendingKeyframes(this, (WTF::StringImpl *)&v34);
    WebCore::BlendingKeyframe::~BlendingKeyframe((WebCore::BlendingKeyframe *)v28, v25);
    WebCore::BlendingKeyframe::~BlendingKeyframe((WebCore::BlendingKeyframe *)v31, v26);
    WebCore::BlendingKeyframes::~BlendingKeyframes((WebCore::BlendingKeyframes *)&v34, v27);
    if (v39 != -1)
      ((void (*)(_DWORD **, _BYTE *))off_1E33919E8[v39])(&v34, v38);
  }
}

void WebCore::KeyframeEffectStack::removeEffect(WebCore::KeyframeEffectStack *this, WebCore::KeyframeEffect *a2)
{
  unint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;

  v2 = *((unsigned int *)this + 3);
  if ((_DWORD)v2)
  {
    v5 = 0;
    v6 = (_QWORD *)(*(_QWORD *)this + 8);
    v7 = 1;
    while (1)
    {
      v8 = *(v6 - 1);
      if (v8)
      {
        if (*(WebCore::KeyframeEffect **)(v8 + 8) == a2)
          break;
      }
      v7 = ++v5 < v2;
      ++v6;
      if (v2 == v5)
        return;
    }
    *(v6 - 1) = 0;
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      WTF::fastFree((WTF *)v8, a2);
    }
    v11 = *((unsigned int *)this + 3);
    v12 = *(_QWORD *)this + 8 * v11;
    while (v6 != (_QWORD *)v12)
    {
      *(v6 - 1) = *v6;
      *v6++ = 0;
    }
    *((_DWORD *)this + 3) = v11 - 1;
    if (v7)
    {
      WebCore::KeyframeEffect::wasRemovedFromEffectStack(a2);
      if (*((_DWORD *)this + 3))
      {
        if (!WebCore::KeyframeEffect::canBeAccelerated(a2))
        {
          if (WebCore::KeyframeEffectStack::allowsAcceleration((uint64_t **)this, v13))
          {
            v14 = *((unsigned int *)this + 3);
            if ((_DWORD)v14)
            {
              v15 = *(_QWORD *)this;
              v16 = 8 * v14;
              do
              {
                if (*(_QWORD *)v15)
                  v17 = *(unsigned __int8 **)(*(_QWORD *)v15 + 8);
                else
                  v17 = 0;
                v18 = v17[310];
                if (v18 != 3)
                {
                  if (v18 == 2)
                    v17[310] = 0;
                  WebCore::KeyframeEffect::updateAcceleratedActions((WebCore::KeyframeEffect *)v17);
                }
                v15 += 8;
                v16 -= 8;
              }
              while (v16);
            }
          }
        }
      }
    }
  }
}

void WebCore::KeyframeEffect::setTarget(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  void *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  char v13;
  char v14;

  v2 = *(_QWORD *)(a1 + 264);
  v3 = *a2;
  if (v2 != *a2)
  {
    if (v2)
    {
      if (*(_BYTE *)(a1 + 288))
      {
        v5 = *(_DWORD *)(a1 + 272);
        v6 = *(WTF::StringImpl **)(a1 + 280);
        if (v6)
          *(_DWORD *)v6 += 2;
        v10 = v2;
        v11 = v5;
        v12 = v6;
        v13 = 1;
      }
      else
      {
        v10 = *(_QWORD *)(a1 + 264);
        LOBYTE(v11) = 0;
        v13 = 0;
      }
      v14 = 1;
      *(_DWORD *)(v2 + 24) += 2;
    }
    else
    {
      LOBYTE(v10) = 0;
      v14 = 0;
    }
    *a2 = 0;
    v7 = *(_QWORD *)(a1 + 264);
    *(_QWORD *)(a1 + 264) = v3;
    if (v7)
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    WebCore::KeyframeEffect::didChangeTargetStyleable(a1, (WebCore::Styleable *)&v10);
    if (v2)
    {
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v2, v8);
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
    }
    if (v14)
    {
      if (v13)
      {
        v9 = v12;
        v12 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v8);
          else
            *(_DWORD *)v9 -= 2;
        }
      }
    }
  }
}

void WebCore::KeyframeEffect::didChangeTargetStyleable(uint64_t a1, WebCore::Styleable *a2)
{
  WebCore::Node *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WebCore::WebAnimation *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WebCore::KeyframeEffectStack *v21;
  WTF *v22;
  void *v23;
  WTF::StringImpl *v24;
  WebCore::KeyframeEffectStack *v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  char v32;
  WebCore::Node *v33;
  int v34;
  WTF::StringImpl *v35;
  char v36;
  char v37;

  v4 = *(WebCore::Node **)(a1 + 264);
  if (v4)
  {
    if (*(_BYTE *)(a1 + 288))
    {
      v5 = *(_DWORD *)(a1 + 272);
      v6 = *(WTF::StringImpl **)(a1 + 280);
      if (v6)
        *(_DWORD *)v6 += 2;
      v33 = v4;
      v34 = v5;
      v35 = v6;
      LOBYTE(v4) = 1;
      v36 = 1;
    }
    else
    {
      v33 = *(WebCore::Node **)(a1 + 264);
      LOBYTE(v34) = 0;
      LOBYTE(v4) = 1;
      v36 = 0;
    }
  }
  else
  {
    LOBYTE(v33) = 0;
  }
  v37 = (char)v4;
  v7 = *(_QWORD *)(a1 + 96);
  if (v7)
  {
    v8 = *(WebCore::WebAnimation **)(v7 + 8);
    if (v8)
      WebCore::WebAnimation::effectTargetDidChange(v8, a2, (uint64_t)&v33);
  }
  *(_BYTE *)(a1 + 305) = 2;
  WebCore::BlendingKeyframes::clear((WebCore::BlendingKeyframes *)(a1 + 136));
  v10 = *(_QWORD *)(a1 + 264);
  if (v10)
  {
    if (*(_BYTE *)(a1 + 288) && (v11 = *(WTF::StringImpl **)(a1 + 280)) != 0)
    {
      *(_DWORD *)v11 += 2;
      WebCore::Node::invalidateStyle(v10, 1u, 0);
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    else
    {
      WebCore::Node::invalidateStyle(v10, 1u, 0);
    }
  }
  if (*((_BYTE *)a2 + 32))
    WebCore::Node::invalidateStyle(*(_QWORD *)a2, 1u, 0);
  v28 = a1;
  v29 = 0;
  LOBYTE(v30) = 0;
  v32 = 0;
  v12 = *(_QWORD *)(a1 + 264);
  if (v12)
  {
    *(_DWORD *)(v12 + 24) += 2;
    v29 = v12;
    if (*(_BYTE *)(a1 + 288))
    {
      v30 = *(_DWORD *)(a1 + 272);
      v13 = *(_DWORD **)(a1 + 280);
      if (v13)
        *v13 += 2;
      v31 = v13;
      v32 = 1;
    }
  }
  if (*((_BYTE *)a2 + 32))
  {
    v14 = (uint64_t *)WebCore::Element::ensureAnimationRareData(*(WebCore::Node **)a2, (uint64_t)a2 + 8);
    v15 = *v14;
    if (!*v14)
    {
      v15 = WTF::fastMalloc((WTF *)0x50);
      *(_OWORD *)v15 = 0u;
      *(_OWORD *)(v15 + 16) = 0u;
      *(_OWORD *)(v15 + 32) = 0u;
      *(_OWORD *)(v15 + 48) = 0u;
      *(_QWORD *)(v15 + 64) = 0;
      *(_BYTE *)(v15 + 72) = 1;
      v21 = (WebCore::KeyframeEffectStack *)*v14;
      *v14 = v15;
      if (v21)
      {
        WebCore::KeyframeEffectStack::~KeyframeEffectStack(v21, v20);
        WTF::fastFree(v22, v23);
        v15 = *v14;
      }
    }
    WebCore::KeyframeEffectStack::removeEffect((WebCore::KeyframeEffectStack *)v15, (WebCore::KeyframeEffect *)a1);
  }
  if (v37)
  {
    v16 = (uint64_t *)WebCore::Element::ensureAnimationRareData(v33, (uint64_t)&v34);
    v17 = *v16;
    if (!*v16)
    {
      v17 = WTF::fastMalloc((WTF *)0x50);
      *(_OWORD *)v17 = 0u;
      *(_OWORD *)(v17 + 16) = 0u;
      *(_OWORD *)(v17 + 32) = 0u;
      *(_OWORD *)(v17 + 48) = 0u;
      *(_QWORD *)(v17 + 64) = 0;
      *(_BYTE *)(v17 + 72) = 1;
      v25 = (WebCore::KeyframeEffectStack *)*v16;
      *v16 = v17;
      if (v25)
      {
        WebCore::KeyframeEffectStack::~KeyframeEffectStack(v25, v24);
        WTF::fastFree(v26, v27);
        v17 = *v16;
      }
    }
    WebCore::KeyframeEffectStack::addEffect((WTF::StringImpl *)v17, (WebCore::KeyframeEffect *)a1);
  }
  WebCore::KeyframeEffect::StackMembershipMutationScope::~StackMembershipMutationScope((WebCore::KeyframeEffect::StackMembershipMutationScope *)&v28, v9);
  if (v37)
  {
    if (v36)
    {
      v19 = v35;
      v35 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
  }
}

uint64_t WebCore::propertiesContainTransformRelatedProperty(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _BOOL4 v11;
  BOOL v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  _BOOL4 v24;
  BOOL v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  _BOOL4 v37;
  BOOL v39;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int i;
  unsigned int v46;
  unsigned __int16 *v47;
  uint64_t v48;
  BOOL v49;
  _BOOL4 v50;
  BOOL v52;
  uint64_t v53;
  char **v55;
  unsigned int v56;
  char ***v57;
  unsigned int v58;
  char ****v59;
  unsigned int v60;
  __int16 v61;
  unsigned int v62;
  char v63;
  char *v64;

  v61 = 284;
  v62 = 0;
  v1 = *a1;
  if (!*a1)
  {
    LOWORD(v59) = 214;
    v60 = 0;
LABEL_113:
    LOWORD(v57) = 210;
    v58 = 0;
LABEL_114:
    LOWORD(v55) = 273;
    v56 = 0;
    goto LABEL_115;
  }
  v3 = 0;
  v4 = 0;
  v5 = *(_DWORD *)(v1 - 8);
  v6 = 680477142;
  while (1)
  {
    v7 = v6 & v5;
    v8 = v1 + 16 * (v6 & v5);
    v9 = *(unsigned int *)(v8 + 8);
    v10 = v3 != v9 || v3 == 0xFFFFFFFFLL;
    v11 = !v10;
    if ((_DWORD)v9 == -1 || !v11)
    {
      v13 = v3 == 0xFFFFFFFFLL;
      if (v9 != 0xFFFFFFFFLL)
        v13 = v11;
      if (v13)
      {
LABEL_107:
        v53 = 1;
        goto LABEL_104;
      }
    }
    else
    {
      v59 = &v57;
      if ((((uint64_t (*)(char *****, uint64_t, __int16 *))off_1E3391BC0[v3])(&v59, v1 + 16 * v7, &v61) & 1) != 0)
        goto LABEL_107;
      v9 = *(unsigned int *)(v8 + 8);
    }
    if (!v9 && *(_WORD *)v8 == 0)
      break;
    v6 = ++v4 + v7;
    v3 = v62;
  }
  v15 = *a1;
  LOWORD(v59) = 214;
  v60 = 0;
  if (!v15)
    goto LABEL_113;
  v16 = 0;
  v17 = 0;
  v18 = *(_DWORD *)(v15 - 8);
  v19 = 1310866518;
  while (1)
  {
    v20 = v19 & v18;
    v21 = v15 + 16 * (v19 & v18);
    v22 = *(unsigned int *)(v21 + 8);
    v23 = v16 != v22 || v16 == 0xFFFFFFFFLL;
    v24 = !v23;
    if ((_DWORD)v22 == -1 || !v24)
    {
      v26 = v16 == 0xFFFFFFFFLL;
      if (v22 != 0xFFFFFFFFLL)
        v26 = v24;
      if (v26)
      {
LABEL_108:
        v53 = 1;
        goto LABEL_102;
      }
    }
    else
    {
      v57 = &v55;
      if ((((uint64_t (*)(char ****, uint64_t, char *****))off_1E3391BC0[v16])(&v57, v15 + 16 * v20, &v59) & 1) != 0)
        goto LABEL_108;
      v22 = *(unsigned int *)(v21 + 8);
    }
    if (!v22 && *(_WORD *)v21 == 0)
      break;
    v19 = ++v17 + v20;
    v16 = v60;
  }
  v28 = *a1;
  LOWORD(v57) = 210;
  v58 = 0;
  if (!v28)
    goto LABEL_114;
  v29 = 0;
  v30 = 0;
  v31 = *(_DWORD *)(v28 - 8);
  v32 = -526994120;
  while (1)
  {
    v33 = v32 & v31;
    v34 = v28 + 16 * (v32 & v31);
    v35 = *(unsigned int *)(v34 + 8);
    v36 = v29 != v35 || v29 == 0xFFFFFFFFLL;
    v37 = !v36;
    if ((_DWORD)v35 == -1 || !v37)
    {
      v39 = v29 == 0xFFFFFFFFLL;
      if (v35 != 0xFFFFFFFFLL)
        v39 = v37;
      if (v39)
      {
LABEL_109:
        v53 = 1;
        goto LABEL_100;
      }
    }
    else
    {
      v55 = &v64;
      if ((((uint64_t (*)(char ***, uint64_t, char ****))off_1E3391BC0[v29])(&v55, v28 + 16 * v33, &v57) & 1) != 0)
        goto LABEL_109;
      v35 = *(unsigned int *)(v34 + 8);
    }
    if (!v35 && *(_WORD *)v34 == 0)
      break;
    v32 = ++v30 + v33;
    v29 = v58;
  }
  v41 = *a1;
  LOWORD(v55) = 273;
  v56 = 0;
  if (!v41)
  {
LABEL_115:
    v53 = 0;
    v42 = 0;
    goto LABEL_99;
  }
  v42 = 0;
  v43 = 0;
  v44 = *(_DWORD *)(v41 - 8);
  for (i = -1893536190; ; i = v43 + v46)
  {
    v46 = i & v44;
    v47 = (unsigned __int16 *)(v41 + 16 * (i & v44));
    v48 = *((unsigned int *)v47 + 2);
    v49 = v42 != v48 || v42 == 0xFFFFFFFFLL;
    v50 = !v49;
    if ((_DWORD)v48 != -1 && v50)
      break;
    if (v48 == 0xFFFFFFFFLL)
      LOBYTE(v50) = v42 == 0xFFFFFFFFLL;
    if (v50)
      goto LABEL_111;
LABEL_92:
    if (v48)
      v52 = 0;
    else
      v52 = *v47 == 0;
    if (v52)
    {
      v53 = 0;
      goto LABEL_98;
    }
    ++v43;
  }
  v64 = &v63;
  if (!((unsigned int (*)(char **, uint64_t, char ***))off_1E3391BC0[v42])(&v64, v41 + 16 * v46, &v55))
  {
    v48 = *((unsigned int *)v47 + 2);
    v42 = v56;
    goto LABEL_92;
  }
  v42 = v56;
LABEL_111:
  v53 = 1;
LABEL_98:
  if (v42 != 0xFFFFFFFFLL)
LABEL_99:
    ((void (*)(char **, char ***))off_1E33919E8[v42])(&v64, &v55);
LABEL_100:
  if (v58 != -1)
    ((void (*)(char ***, char ****))off_1E33919E8[v58])(&v55, &v57);
LABEL_102:
  if (v60 != -1)
    ((void (*)(char ****, char *****))off_1E33919E8[v60])(&v57, &v59);
LABEL_104:
  if (v62 != -1)
    ((void (*)(char *****, __int16 *))off_1E33919E8[v62])(&v59, &v61);
  return v53;
}

WebCore::RenderStyle **std::unique_ptr<WebCore::RenderStyle>::operator=[abi:sn180100](WebCore::RenderStyle **a1, WebCore::RenderStyle **a2)
{
  WebCore::RenderStyle *v3;
  WebCore::RenderStyle *v4;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    WebCore::RenderStyle::~RenderStyle(v4, a2);
    if (*(_DWORD *)v5)
    {
      *((_OWORD *)v5 + 2) = 0u;
      *((_OWORD *)v5 + 3) = 0u;
      *(_OWORD *)v5 = 0u;
      *((_OWORD *)v5 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v5, v6);
    }
  }
  return a1;
}

_QWORD *WebCore::KeyframeInterpolation::interpolationKeyframes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  _QWORD *result;
  uint64_t *v13;
  _QWORD *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  void *v19;
  double v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  BOOL v24;
  BOOL v25;
  unsigned int v26;
  unint64_t v27;
  WTF *v28;
  double v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  double v35;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *p_src;
  uint64_t v45;
  void *v46;
  WTF *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *__src;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _BYTE v55[8];
  _BYTE v56[16];
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v53 = 0;
  v54 = 0;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (!result)
  {
    v28 = 0;
LABEL_64:
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_WORD *)(a5 + 16) = 0;
    goto LABEL_59;
  }
  v48 = a4;
  v49 = a3;
  v50 = a5;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  do
  {
    v19 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 24))(a1, v17);
    v20 = (**(double (***)(void *))v19)(v19);
    v56[0] = 0;
    v57 = -1;
    v21 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v21 != -1)
    {
      ((void (*)(void **, _BYTE *, uint64_t))off_1E3391BE0[v21])(&__src, v56, a2 + 8);
      v57 = v21;
    }
    v22 = (*(uint64_t (**)(void *, _BYTE *))(*(_QWORD *)v19 + 16))(v19, v55);
    if (v57 != -1)
      ((void (*)(void **, _BYTE *))off_1E3391BB0[v57])(&__src, v56);
    v57 = -1;
    if (v22)
    {
      if (v20 == 0.0)
        ++v16;
      if (v20 == 1.0)
        ++v18;
      __src = v19;
      if (v15 == (_DWORD)v54)
      {
        v23 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::DocumentTimeline,WTF::RawPtrTraits<WebCore::DocumentTimeline>,WTF::DefaultRefDerefTraits<WebCore::DocumentTimeline>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v53, v15 + 1, (unint64_t)&__src);
        v15 = HIDWORD(v54);
        v14 = v53;
        v53[HIDWORD(v54)] = *v23;
      }
      else
      {
        v14[v15] = v19;
      }
      HIDWORD(v54) = ++v15;
    }
    ++v17;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  }
  while (v17 < (unint64_t)result);
  if (!v15)
  {
    v28 = (WTF *)v53;
    a5 = v50;
    goto LABEL_64;
  }
  v24 = v16 == 0;
  v25 = v18 == 0;
  if (!v16)
  {
    __src = v49;
    if (v15 == (_DWORD)v54)
    {
      p_src = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::DocumentTimeline,WTF::RawPtrTraits<WebCore::DocumentTimeline>,WTF::DefaultRefDerefTraits<WebCore::DocumentTimeline>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v53, v15 + 1, (unint64_t)&__src);
      v15 = HIDWORD(v54);
      v14 = v53;
    }
    else
    {
      p_src = &__src;
    }
    memmove(v14 + 1, v14, 8 * v15);
    *v14 = *p_src;
    v15 = ++HIDWORD(v54);
    v16 = 1;
  }
  if (!v18)
  {
    __src = v48;
    if (v15 == (_DWORD)v54)
    {
      WTF::Vector<WebCore::KeyframeInterpolation::Keyframe const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::KeyframeInterpolation::Keyframe const*>((uint64_t)&v53, (unint64_t)&__src);
    }
    else
    {
      v53[v15] = v48;
      HIDWORD(v54) = v15 + 1;
    }
    v18 = 1;
  }
  __src = 0;
  v52 = 0;
  if (a6 < 0.0)
  {
    v26 = HIDWORD(v54);
    if (v16 >= 2)
    {
      if (!HIDWORD(v54))
        goto LABEL_83;
      v28 = (WTF *)v53;
      v13 = v53;
      goto LABEL_34;
    }
  }
  else
  {
    v26 = HIDWORD(v54);
  }
  v27 = v26;
  if (a6 >= 1.0 && v18 > 1)
  {
    if (!v26)
    {
      __break(0xC471u);
      JUMPOUT(0x1956726B8);
    }
    v28 = (WTF *)v53;
    v13 = &v53[v26 - 1];
    goto LABEL_34;
  }
  if (!v26
    || ((v28 = (WTF *)v53, v29 = (**(double (***)(_QWORD))*v53)(*v53), v29 <= a6)
      ? (v30 = v29 < 1.0)
      : (v30 = 0),
        !v30))
  {
    v31 = 0;
LABEL_31:
    if (v31 >= v27)
    {
      __break(0xC471u);
      JUMPOUT(0x195672698);
    }
    v28 = (WTF *)v53;
    result = WTF::Vector<WebCore::KeyframeInterpolation::Keyframe const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::KeyframeInterpolation::Keyframe const*>((uint64_t)&__src, (unint64_t)&v53[v31]);
    if (v31 + 1 >= v27)
    {
      __break(0xC471u);
      JUMPOUT(0x1956726A0);
    }
    v13 = (uint64_t *)((char *)v28 + 8 * v31 + 8);
    v32 = HIDWORD(v52);
    if (HIDWORD(v52) == (_DWORD)v52)
    {
LABEL_34:
      result = WTF::Vector<WebCore::KeyframeInterpolation::Keyframe const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::KeyframeInterpolation::Keyframe const*>((uint64_t)&__src, (unint64_t)v13);
      goto LABEL_54;
    }
    v41 = HIDWORD(v52) + 1;
    v42 = __src;
    v43 = *v13;
    goto LABEL_53;
  }
  v31 = 0;
  v33 = v27 - 1;
  v34 = 1;
  while (v27 != v34)
  {
    v35 = (***((double (****)(_QWORD))v28 + v34))(*((_QWORD *)v28 + v34));
    if (v35 == 0.0)
      v31 = v34;
    ++v34;
    if (v35 > a6 || v35 >= 1.0)
    {
      v33 = v34 - 2;
      break;
    }
  }
  if ((v33 & 0x80000000) != 0)
    goto LABEL_31;
  if (v27 <= v33)
  {
    __break(0xC471u);
    JUMPOUT(0x1956726A8);
  }
  result = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::DocumentTimeline,WTF::RawPtrTraits<WebCore::DocumentTimeline>,WTF::DefaultRefDerefTraits<WebCore::DocumentTimeline>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__src, 1uLL, (unint64_t)v28 + 8 * v33);
  v37 = HIDWORD(v52);
  v38 = __src;
  *((_QWORD *)__src + HIDWORD(v52)) = *result;
  v39 = (v37 + 1);
  HIDWORD(v52) = v37 + 1;
  if (v27 <= v33 + 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1956726B0);
  }
  v40 = (_QWORD *)((char *)v28 + 8 * v33 + 8);
  if ((_DWORD)v39 == (_DWORD)v52)
  {
    result = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::DocumentTimeline,WTF::RawPtrTraits<WebCore::DocumentTimeline>,WTF::DefaultRefDerefTraits<WebCore::DocumentTimeline>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__src, v39 + 1, (unint64_t)v40);
    v32 = HIDWORD(v52);
    v41 = HIDWORD(v52) + 1;
    v42 = __src;
    v43 = *result;
LABEL_53:
    v42[v32] = v43;
    HIDWORD(v52) = v41;
    goto LABEL_54;
  }
  v38[v39] = *v40;
  HIDWORD(v52) = v37 + 2;
LABEL_54:
  v45 = HIDWORD(v52);
  *(_QWORD *)v50 = 0;
  *(_QWORD *)(v50 + 8) = 0;
  *(_DWORD *)(v50 + 12) = v45;
  if ((_DWORD)v45)
  {
    if (!(v45 >> 29))
    {
      v46 = (void *)WTF::fastMalloc((WTF *)(8 * v45));
      *(_DWORD *)(v50 + 8) = v45;
      *(_QWORD *)v50 = v46;
      v47 = (WTF *)__src;
      result = memcpy(v46, __src, 8 * v45);
      goto LABEL_57;
    }
LABEL_83:
    __break(0xC471u);
    JUMPOUT(0x195672690);
  }
  v47 = (WTF *)__src;
LABEL_57:
  *(_BYTE *)(v50 + 16) = v24;
  *(_BYTE *)(v50 + 17) = v25;
  if (v47)
    result = (_QWORD *)WTF::fastFree(v47, v13);
LABEL_59:
  if (v28)
  {
    v53 = 0;
    LODWORD(v54) = 0;
    return (_QWORD *)WTF::fastFree(v28, v13);
  }
  return result;
}

uint64_t WebCore::KeyframeInterpolation::interpolateKeyframes(uint64_t result, uint64_t a2, uint64_t **a3, _QWORD *a4, _QWORD *a5, uint64_t a6, _QWORD *a7, double a8, double a9, double a10)
{
  uint64_t v10;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __n128 v24;
  __n128 v25;
  __int16 v27;
  char v28;
  unsigned __int8 v29;
  __int16 v31;
  char v32;
  unsigned __int8 v33;
  char v34;
  double v35;
  __n128 v36;
  __n128 v37;
  double v38;
  double v39;
  WebCore::TimingFunction *v40;
  int v41;
  double v44;
  char v45;
  _BYTE v46[8];
  _BYTE v47[16];
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v10 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v10)
  {
    v19 = result;
    v20 = **a3;
    v21 = (*a3)[v10 - 1];
    v47[0] = 0;
    v48 = -1;
    v22 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v22 != -1)
    {
      ((void (*)(char *, _BYTE *, uint64_t))off_1E3391BE0[v22])(&v45, v47, a2 + 8);
      v48 = v22;
    }
    v23 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v19 + 8))(v19, v46);
    if (v48 != -1)
      ((void (*)(char *, _BYTE *))off_1E3391BB0[v48])(&v45, v47);
    v48 = -1;
    if (!v23)
      goto LABEL_28;
    if ((**(double (***)(uint64_t))v20)(v20) != 0.0 || *((_BYTE *)a3 + 16) == 0)
    {
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      v28 = (**(uint64_t (***)(uint64_t))v19)(v19);
      v29 = (v27 & 0xFF00) != 0 ? v27 : v28;
      if (v29)
        (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a4 + 16))(*a4, v20, v29);
    }
    if ((**(double (***)(uint64_t))v21)(v21) != 1.0 || *((_BYTE *)a3 + 17) == 0)
    {
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      v32 = (**(uint64_t (***)(uint64_t))v19)(v19);
      v33 = (v31 & 0xFF00) != 0 ? v31 : v32;
      if (v33)
        (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a4 + 16))(*a4, v21, v33);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 1
      && a9 != 0.0
      && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a7 + 16))(*a7))
    {
      if (a9 <= 0.0)
      {
        v34 = 1;
      }
      else
      {
        v41 = 1;
        v34 = 1;
        do
        {
          if ((**(double (***)(uint64_t))v20)(v20) == 0.0 && *((_BYTE *)a3 + 16) == 0)
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, v20);
          if ((**(double (***)(uint64_t))v21)(v21) == 1.0 && *((_BYTE *)a3 + 17) == 0)
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, v21);
          v44 = (double)v41++;
        }
        while (v44 < a9);
      }
    }
    else
    {
LABEL_28:
      v34 = 0;
    }
    if (*((_DWORD *)a3 + 3) == 1)
    {
      v24.n128_u64[0] = 0;
      v25.n128_u64[0] = 1.0;
      return (*(uint64_t (**)(__n128, __n128))(**(_QWORD **)a6 + 16))(v24, v25);
    }
    else
    {
      v35 = (**(double (***)(uint64_t))v20)(v20);
      v36.n128_f64[0] = (**(double (***)(uint64_t))v21)(v21);
      v37.n128_f64[0] = a8 - v35;
      v38 = v36.n128_f64[0] - v35;
      v39 = v37.n128_f64[0] / v38;
      if (a10 != 0.0)
      {
        v40 = (WebCore::TimingFunction *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 40))(v19, v20);
        if (v40)
        {
          WebCore::TimingFunction::transformProgress(v40, v39, a10 * v38);
          v39 = v36.n128_f64[0];
        }
      }
      if ((v34 & 1) != 0)
        a9 = 0.0;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
      v36.n128_f64[0] = v39;
      v37.n128_f64[0] = a9;
      return (*(uint64_t (**)(__n128, __n128))(**(_QWORD **)a6 + 16))(v36, v37);
    }
  }
  return result;
}

uint64_t *WebCore::KeyframeEffect::updateAssociatedThreadedEffectStack(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Document *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  char v24;

  v3 = result;
  v4 = result[15];
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    if ((*(_QWORD *)(*(_QWORD *)(v5 + 680) + 712) & 0x800000000000) == 0)
      return result;
  }
  else
  {
    v16 = result[33];
    if (!v16)
      return result;
    v5 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 8);
    if (!v5 || (*(_QWORD *)(*(_QWORD *)(v5 + 680) + 712) & 0x800000000000) == 0)
      return result;
    if (v4 && *(_QWORD *)(v4 + 8))
      v5 = *(_QWORD *)(v4 + 8);
  }
  v6 = *(_QWORD *)(v5 + 528);
  if (!v6)
    return result;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return result;
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8 || !*(_QWORD *)(v8 + 8))
    return result;
  if (!v4 || (v9 = *(WebCore::Document **)(v4 + 8)) == 0)
  {
    v19 = v3[33];
    if (v19)
      v9 = *(WebCore::Document **)(*(_QWORD *)(v19 + 40) + 8);
    else
      v9 = 0;
  }
  result = (uint64_t *)WebCore::Document::acceleratedTimeline(v9);
  v10 = result;
  if (*(_BYTE *)(a2 + 32))
  {
    v21 = *(_QWORD *)a2;
    LOBYTE(v22) = 0;
    v24 = 0;
    if (*(_BYTE *)(a2 + 24))
    {
      v22 = *(_DWORD *)(a2 + 8);
      v11 = *(WTF::StringImpl **)(a2 + 16);
      if (v11)
        *(_DWORD *)v11 += 2;
      v23 = v11;
      v24 = 1;
    }
    result = (uint64_t *)WTF::HashTable<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>,std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>>,WTF::HashTraits<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>>,WTF::HashTraits<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>>>::add(result, (uint64_t)&v21, (uint64_t)v20);
    if (v24)
    {
      result = (uint64_t *)v23;
      v23 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  if (!v3[33])
    goto LABEL_40;
  v13 = *((unsigned __int8 *)v3 + 288);
  if (*((_BYTE *)v3 + 288))
  {
    v14 = *((_DWORD *)v3 + 68);
    a2 = v3[35];
    if (a2)
    {
      v15 = *(_DWORD *)a2;
      v21 = v3[33];
      v22 = v14;
      *(_DWORD *)a2 = v15 + 4;
    }
    else
    {
      v21 = v3[33];
      v22 = v14;
    }
    v23 = (WTF::StringImpl *)a2;
    v24 = 1;
  }
  else
  {
    v21 = v3[33];
    LOBYTE(v22) = 0;
    v24 = 0;
  }
  result = (uint64_t *)WTF::HashTable<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>,std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>>,WTF::HashTraits<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>>,WTF::HashTraits<std::pair<WebCore::Element *,std::optional<WebCore::Style::PseudoElementIdentifier>>>>::add(v10, (uint64_t)&v21, (uint64_t)v20);
  if (!v24)
    goto LABEL_36;
  result = (uint64_t *)v23;
  v23 = 0;
  if (!result)
    goto LABEL_36;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_36:
    if (v13)
      goto LABEL_37;
    goto LABEL_40;
  }
  result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
  if (v13)
  {
LABEL_37:
    if (a2)
    {
      if (*(_DWORD *)a2 == 2)
        result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)a2, v17);
      else
        *(_DWORD *)a2 -= 2;
    }
  }
LABEL_40:
  v18 = v3[12];
  if (v18)
  {
    result = *(uint64_t **)(v18 + 8);
    if (result)
      return (uint64_t *)WebCore::WebAnimation::acceleratedStateDidChange((uint64_t)result);
  }
  return result;
}

void WebCore::KeyframeEffect::abilityToBeAcceleratedDidChange(WebCore::KeyframeEffect *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  WTF::StringImpl *v5;
  _BYTE v7[40];

  v1 = *((_QWORD *)this + 15);
  if ((v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0
     || (v3 = *((_QWORD *)this + 33)) != 0 && (v2 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8)) != 0)
    && (*(_QWORD *)(*(_QWORD *)(v2 + 680) + 712) & 0x800000000000) != 0)
  {
    v7[0] = 0;
    v7[32] = 0;
    WebCore::KeyframeEffect::updateAssociatedThreadedEffectStack(this, v7);
    std::optional<WebCore::Styleable const>::~optional((uint64_t)v7, v5);
  }
  else if (*((_BYTE *)this + 328))
  {
    v4 = (uint64_t **)WebCore::Element::keyframeEffectStack(*((_QWORD *)this + 33), (uint64_t)this + 272);
    if (v4)
      WebCore::KeyframeEffectStack::effectAbilityToBeAcceleratedDidChange(v4, this);
  }
}

WebCore::KeyframeEffect *WebCore::KeyframeEffect::animationDidFinish(WebCore::KeyframeEffect *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 15);
  if ((v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0
     || (v3 = *((_QWORD *)this + 33)) != 0 && (v2 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8)) != 0)
    && (*(_QWORD *)(*(_QWORD *)(v2 + 680) + 712) & 0x800000000000) != 0)
  {
    return (WebCore::KeyframeEffect *)WebCore::KeyframeEffect::updateAcceleratedAnimationIfNecessary(this);
  }
  return this;
}

uint64_t WebCore::KeyframeEffect::transformRelatedPropertyDidChange(WebCore::KeyframeEffect *this)
{
  int v2;

  if (WebCore::propertiesContainTransformRelatedProperty((uint64_t *)this + 28))
    v2 = 2;
  else
    v2 = 3;
  return WebCore::KeyframeEffect::addPendingAcceleratedAction((uint64_t)this, v2);
}

uint64_t WebCore::KeyframeEffect::animationWasCanceled(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 canBeAccelerated;
  uint64_t v8;

  v1 = *(_QWORD *)(this + 120);
  if ((v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0
     || (v5 = *(_QWORD *)(this + 264)) != 0 && (v2 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8)) != 0)
    && (*(_QWORD *)(*(_QWORD *)(v2 + 680) + 712) & 0x800000000000) != 0)
  {
    return WebCore::KeyframeEffect::updateAcceleratedAnimationIfNecessary((WebCore::KeyframeEffect *)this);
  }
  if ((!v1 || (v3 = *(_QWORD *)(v1 + 8)) == 0)
    && ((v6 = *(_QWORD *)(this + 264)) == 0 || (v3 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8)) == 0)
    || (*(_QWORD *)(*(_QWORD *)(v3 + 680) + 712) & 0x800000000000) == 0)
  {
    v4 = *(unsigned __int8 *)(this + 310);
    goto LABEL_8;
  }
  if (*(_BYTE *)(this + 328))
  {
    v8 = this;
    canBeAccelerated = WebCore::KeyframeEffect::canBeAccelerated((WebCore::KeyframeEffect *)this);
    this = v8;
    if (canBeAccelerated && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 96) + 8) + 156))
    {
      v4 = WebCore::WebAnimation::playState(*(WebCore::WebAnimation **)(*(_QWORD *)(v8 + 96) + 8));
      this = v8;
LABEL_8:
      if (v4 == 1)
        return WebCore::KeyframeEffect::addPendingAcceleratedAction(this, 4);
    }
  }
  if (*(_BYTE *)(this + 308) && *(_BYTE *)(this + 304) != 4)
    return WebCore::KeyframeEffect::addPendingAcceleratedAction(this, 4);
  return this;
}

void WebCore::KeyframeEffect::wasRemovedFromEffectStack(WebCore::KeyframeEffect *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::WebAnimation *v9;
  char v10;

  *((_BYTE *)this + 328) = 0;
  if (WebCore::KeyframeEffect::canBeAccelerated(this)
    && (((v2 = *((_QWORD *)this + 15)) == 0 || (v3 = *(_QWORD *)(v2 + 8)) == 0)
     && ((v7 = *((_QWORD *)this + 33)) == 0 || (v3 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8)) == 0)
     || (*(_QWORD *)(*(_QWORD *)(v3 + 680) + 712) & 0x800000000000) == 0))
  {
    v4 = *((_QWORD *)this + 12);
    if (v4)
    {
      if (*(_QWORD *)(v4 + 8))
      {
        if ((v2 && (v5 = *(_QWORD *)(v2 + 8)) != 0
           || (v8 = *((_QWORD *)this + 33)) != 0 && (v5 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8)) != 0)
          && (*(_QWORD *)(*(_QWORD *)(v5 + 680) + 712) & 0x800000000000) != 0)
        {
          if (!*((_BYTE *)this + 328)
            || !WebCore::KeyframeEffect::canBeAccelerated(this)
            || (v9 = *(WebCore::WebAnimation **)(*((_QWORD *)this + 12) + 8), *((_BYTE *)v9 + 156))
            || WebCore::WebAnimation::playState(v9) != 1)
          {
LABEL_12:
            if (!*((_BYTE *)this + 308) || *((_BYTE *)this + 304) == 4)
              return;
          }
        }
        else if (*((_BYTE *)this + 310) != 1)
        {
          goto LABEL_12;
        }
        WTF::Vector<WebCore::KeyframeEffect::AcceleratedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 62, 0);
        v10 = 4;
        v6 = *((unsigned int *)this + 65);
        if ((_DWORD)v6 == *((_DWORD *)this + 64))
        {
          WTF::Vector<WebCore::KeyframeEffect::AcceleratedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::KeyframeEffect::AcceleratedAction>((uint64_t)this + 248, (unint64_t)&v10);
        }
        else
        {
          *(_BYTE *)(*((_QWORD *)this + 31) + v6) = 4;
          *((_DWORD *)this + 65) = v6 + 1;
        }
        WebCore::KeyframeEffect::applyPendingAcceleratedActions(this);
      }
    }
  }
}

uint64_t WebCore::KeyframeEffect::willChangeRenderer(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 canBeAccelerated;
  uint64_t v8;

  v1 = *(_QWORD *)(this + 120);
  if ((v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0
     || (v5 = *(_QWORD *)(this + 264)) != 0 && (v2 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8)) != 0)
    && (*(_QWORD *)(*(_QWORD *)(v2 + 680) + 712) & 0x800000000000) != 0)
  {
    return WebCore::KeyframeEffect::updateAcceleratedAnimationIfNecessary((WebCore::KeyframeEffect *)this);
  }
  if ((!v1 || (v3 = *(_QWORD *)(v1 + 8)) == 0)
    && ((v6 = *(_QWORD *)(this + 264)) == 0 || (v3 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8)) == 0)
    || (*(_QWORD *)(*(_QWORD *)(v3 + 680) + 712) & 0x800000000000) == 0)
  {
    v4 = *(unsigned __int8 *)(this + 310);
    goto LABEL_8;
  }
  if (*(_BYTE *)(this + 328))
  {
    v8 = this;
    canBeAccelerated = WebCore::KeyframeEffect::canBeAccelerated((WebCore::KeyframeEffect *)this);
    this = v8;
    if (canBeAccelerated && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 96) + 8) + 156))
    {
      v4 = WebCore::WebAnimation::playState(*(WebCore::WebAnimation **)(*(_QWORD *)(v8 + 96) + 8));
      this = v8;
LABEL_8:
      if (v4 == 1)
        return WebCore::KeyframeEffect::addPendingAcceleratedAction(this, 4);
    }
  }
  if (*(_BYTE *)(this + 308) && *(_BYTE *)(this + 304) != 4)
    return WebCore::KeyframeEffect::addPendingAcceleratedAction(this, 4);
  return this;
}

uint64_t *WebCore::KeyframeEffect::animationSuspensionStateDidChange(uint64_t *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 canBeAccelerated;
  _BOOL4 v9;
  int v10;
  int v11;
  uint64_t *v12;
  _BYTE v13[40];

  v2 = this[15];
  if ((v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0
     || (v6 = this[33]) != 0 && (v3 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8)) != 0)
    && (*(_QWORD *)(*(_QWORD *)(v3 + 680) + 712) & 0x800000000000) != 0)
  {
    v13[0] = 0;
    v13[32] = 0;
    return WebCore::KeyframeEffect::updateAssociatedThreadedEffectStack(this, (uint64_t)v13);
  }
  if ((!v2 || (v4 = *(_QWORD *)(v2 + 8)) == 0)
    && ((v7 = this[33]) == 0 || (v4 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8)) == 0)
    || (*(_QWORD *)(*(_QWORD *)(v4 + 680) + 712) & 0x800000000000) == 0)
  {
    v5 = *((unsigned __int8 *)this + 310);
    goto LABEL_8;
  }
  if (*((_BYTE *)this + 328))
  {
    v12 = this;
    v11 = a2;
    canBeAccelerated = WebCore::KeyframeEffect::canBeAccelerated((WebCore::KeyframeEffect *)this);
    a2 = v11;
    v9 = canBeAccelerated;
    this = v12;
    if (v9 && !*(_BYTE *)(*(_QWORD *)(v12[12] + 8) + 156))
    {
      v10 = WebCore::WebAnimation::playState(*(WebCore::WebAnimation **)(v12[12] + 8));
      a2 = v11;
      v5 = v10;
      this = v12;
LABEL_8:
      if (v5 == 1)
        return (uint64_t *)WebCore::KeyframeEffect::addPendingAcceleratedAction((uint64_t)this, a2);
    }
  }
  if (*((_BYTE *)this + 308) && *((_BYTE *)this + 304) != 4)
    return (uint64_t *)WebCore::KeyframeEffect::addPendingAcceleratedAction((uint64_t)this, a2);
  return this;
}

uint64_t WebCore::KeyframeEffect::applyPendingAcceleratedActions(void)::$_0::operator()(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  WebCore::Animation **v26;
  uint64_t v27;
  _QWORD *v28;
  WebCore::RenderStyle *v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  __n128 v40;
  int8x16_t ComputedTiming;
  WebCore::KeyframeEffect *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  WebCore::Animation *v49;
  uint64_t v50;
  double v51;
  WTF *v52;
  WTF::StringImpl *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  double v57;
  WebCore::Animation *v58;
  WTF::StringImpl *v59;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  WebCore::WebAnimation *v69;
  WebCore::Animation *v70;
  __int128 v71;
  __int128 v72;
  WTF::StringImpl *v73[9];
  WTF *v74;
  unsigned int v75;
  char v76;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 120);
  if ((v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0
     || (v45 = *(_QWORD *)(v3 + 264)) != 0 && (v5 = *(_QWORD *)(*(_QWORD *)(v45 + 40) + 8)) != 0)
    && (*(_QWORD *)(*(_QWORD *)(v5 + 680) + 712) & 0x800000000000) != 0)
  {
    if (*(_BYTE *)(v3 + 328))
    {
      if (WebCore::KeyframeEffect::canBeAccelerated(*(WebCore::KeyframeEffect **)a1))
      {
        v69 = *(WebCore::WebAnimation **)(*(_QWORD *)(v3 + 96) + 8);
        if (!*((_BYTE *)v69 + 156) && WebCore::WebAnimation::playState(v69) == 1)
          goto LABEL_5;
      }
    }
  }
  else if (*(_BYTE *)(v3 + 310) == 1)
  {
LABEL_5:
    (*(void (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 8) + 736))(**(_QWORD **)(a1 + 8), v3 + 136);
  }
  if ((*(_QWORD *)(*(_QWORD *)(v3 + 264) + 72) & 0xFFFFFFFFFFFFLL) != 0
    && (v6 = *(unsigned int *)((*(_QWORD *)(*(_QWORD *)(v3 + 264) + 72) & 0xFFFFFFFFFFFFLL) + 0xA4), (_DWORD)v6))
  {
    v61 = *(uint64_t **)((*(_QWORD *)(*(_QWORD *)(v3 + 264) + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
    v62 = 8 * v6;
    if (*(_BYTE *)(v3 + 288))
    {
      while (1)
      {
        v63 = (uint64_t *)*v61;
        if (*(_BYTE *)(*v61 + 96))
        {
          if (*((_DWORD *)v63 + 20) == *(_DWORD *)(v3 + 272) && v63[11] == *(_QWORD *)(v3 + 280))
            break;
        }
        v7 = 0;
        ++v61;
        v62 -= 8;
        if (!v62)
          goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      while (1)
      {
        v63 = (uint64_t *)*v61;
        if (!*(_BYTE *)(*v61 + 96))
          break;
        ++v61;
        v62 -= 8;
        if (!v62)
          goto LABEL_9;
      }
    }
    v7 = *v63;
  }
  else
  {
    v7 = 0;
  }
LABEL_9:
  if (*(_BYTE *)(v3 + 202))
  {
    v8 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    v10 = v8;
    *(_QWORD *)v8 = off_1E3391CE0;
    *((_WORD *)v8 + 4) = 450;
    v11 = *(unsigned int *)(v7 + 12);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)v7;
      v13 = 8 * v11 - 8;
      do
      {
        v14 = *v12++;
        v15 = (*(uint64_t (**)(WTF *, _QWORD))(*(_QWORD *)v10 + 16))(v10, *(_QWORD *)(v14 + 8));
        if ((v15 & 1) != 0)
          break;
        v16 = v13;
        v13 -= 8;
      }
      while (v16);
      (*(void (**)(WTF *))(*(_QWORD *)v10 + 8))(v10);
      if ((v15 & 1) != 0)
        return 2;
    }
    else
    {
      WTF::fastFree(v8, v9);
    }
  }
  if (*(_BYTE *)(v3 + 203))
  {
    v17 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    v19 = v17;
    *(_QWORD *)v17 = off_1E3391CE0;
    *((_WORD *)v17 + 4) = 393;
    v20 = *(unsigned int *)(v7 + 12);
    if ((_DWORD)v20)
    {
      v21 = *(uint64_t **)v7;
      v22 = 8 * v20 - 8;
      do
      {
        v23 = *v21++;
        v24 = (*(uint64_t (**)(WTF *, _QWORD))(*(_QWORD *)v19 + 16))(v19, *(_QWORD *)(v23 + 8));
        if ((v24 & 1) != 0)
          break;
        v25 = v22;
        v22 -= 8;
      }
      while (v25);
      (*(void (**)(WTF *))(*(_QWORD *)v19 + 8))(v19);
      if ((v24 & 1) != 0)
        return 2;
    }
    else
    {
      WTF::fastFree(v17, v18);
    }
  }
  if (!WebCore::KeyframeEffectStack::allowsAcceleration((uint64_t **)v7, a2))
    return 2;
  v26 = (WebCore::Animation **)(v3 + 136);
  if (*(_BYTE *)(v3 + 331))
  {
    if ((*(_QWORD *)(*(_QWORD *)(v3 + 264) + 72) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_29;
    v27 = *(unsigned int *)((*(_QWORD *)(*(_QWORD *)(v3 + 264) + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
    if (!(_DWORD)v27)
      goto LABEL_29;
    v65 = *(uint64_t **)((*(_QWORD *)(*(_QWORD *)(v3 + 264) + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
    v66 = 8 * v27;
    if (*(_BYTE *)(v3 + 288))
    {
      while (1)
      {
        v67 = *v65;
        if (*(_BYTE *)(*v65 + 96))
        {
          if (*(_DWORD *)(v67 + 80) == *(_DWORD *)(v3 + 272) && *(_QWORD *)(v67 + 88) == *(_QWORD *)(v3 + 280))
            break;
        }
        ++v65;
        v66 -= 8;
        if (!v66)
          goto LABEL_29;
      }
    }
    else
    {
      while (1)
      {
        v67 = *v65;
        if (!*(_BYTE *)(*v65 + 96))
          break;
        ++v65;
        v66 -= 8;
        if (!v66)
          goto LABEL_29;
      }
    }
    v28 = *(_QWORD **)(v67 + 8);
    if (!v28)
LABEL_29:
      v28 = (_QWORD *)(**(_QWORD **)(a1 + 8) + 80);
    v29 = (WebCore::RenderStyle *)WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v29 = 0;
    v30 = (_DWORD *)v28[1];
    ++*v30;
    *((_QWORD *)v29 + 1) = v30;
    *((_QWORD *)v29 + 2) = v28[2];
    v31 = (_DWORD *)v28[3];
    ++*v31;
    *((_QWORD *)v29 + 3) = v31;
    v32 = (_DWORD *)v28[4];
    ++*v32;
    *((_QWORD *)v29 + 4) = v32;
    *((_QWORD *)v29 + 5) = v28[5];
    *((_QWORD *)v29 + 6) = 0;
    v33 = (_DWORD *)v28[7];
    ++*v33;
    *((_QWORD *)v29 + 7) = v33;
    WebCore::KeyframeEffectStack::sortedEffects((uint64_t *)&v74, (WebCore::KeyframeEffectStack *)v7);
    v35 = v74;
    if (v75)
    {
      v36 = 8 * v75;
      v37 = v74;
      v38 = (WTF *)((char *)v74 + v36);
      do
      {
        if (*(_QWORD *)v37)
        {
          v39 = *(_QWORD *)(*(_QWORD *)v37 + 8);
          if (v3 == v39)
            goto LABEL_51;
        }
        else
        {
          if (!v3)
            goto LABEL_51;
          v39 = 0;
        }
        ComputedTiming = WebCore::AnimationEffect::getComputedTiming(v39, (uint64_t)&v70);
        ComputedTiming.i64[0] = (uint64_t)v73[5];
        if (*(_QWORD *)v37)
          v42 = *(WebCore::KeyframeEffect **)(*(_QWORD *)v37 + 8);
        else
          v42 = 0;
        v40.n128_u64[0] = (unint64_t)v73[6];
        WebCore::KeyframeEffect::setAnimatedPropertiesInStyle(v42, v29, (__n128)ComputedTiming, v40);
        v43 = v73[1];
        v73[1] = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
            WTF::StringImpl::destroy(v43, v34);
          else
            *(_DWORD *)v43 -= 2;
        }
        if ((_DWORD)v71 != -1)
          ((void (*)(char *, WebCore::Animation **))off_1E33919C8[v71])(&v76, &v70);
        v37 = (WTF *)((char *)v37 + 8);
        v36 -= 8;
      }
      while (v36);
      do
      {
LABEL_51:
        v46 = *(unsigned int **)v35;
        *(_QWORD *)v35 = 0;
        if (v46)
        {
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            atomic_store(1u, v46);
            WTF::fastFree((WTF *)v46, v34);
          }
        }
        v35 = (WTF *)((char *)v35 + 8);
      }
      while (v35 != v38);
      v35 = v74;
    }
    if (v35)
      WTF::fastFree(v35, v34);
    v49 = *v26;
    if (*v26)
      *(_DWORD *)v49 += 2;
    v70 = v49;
    v71 = 0u;
    v72 = 0u;
    memset(v73, 0, 30);
    WebCore::BlendingKeyframes::copyKeyframes((WebCore::BlendingKeyframes *)&v70, (const WebCore::BlendingKeyframes *)(v3 + 136));
    WebCore::BlendingKeyframes::fillImplicitKeyframes((WebCore::BlendingKeyframes *)&v70, (const WebCore::KeyframeEffect *)v3, v29);
    v50 = **(_QWORD **)(a1 + 8);
    v51 = **(double **)(a1 + 16);
    WebCore::KeyframeEffect::backingAnimationForCompositedRenderer((WebCore::KeyframeEffect *)&v74, v3);
    v52 = v74;
    if ((*(unsigned int (**)(uint64_t, WTF *, WebCore::Animation **, double))(*(_QWORD *)v50 + 720))(v50, v74, &v70, v51))
    {
      v44 = 1;
    }
    else
    {
      v44 = 3;
    }
    if (v52)
      WTF::RefCounted<WebCore::Animation>::deref(v52, v53);
    WebCore::BlendingKeyframes::~BlendingKeyframes((WebCore::BlendingKeyframes *)&v70, v53);
    WebCore::RenderStyle::~RenderStyle(v29, v54);
    if (*(_DWORD *)v29)
    {
      *((_OWORD *)v29 + 2) = 0u;
      *((_OWORD *)v29 + 3) = 0u;
      *(_OWORD *)v29 = 0u;
      *((_OWORD *)v29 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v29, v55);
    }
  }
  else
  {
    v56 = **(_QWORD **)(a1 + 8);
    v57 = **(double **)(a1 + 16);
    WebCore::KeyframeEffect::backingAnimationForCompositedRenderer((WebCore::KeyframeEffect *)&v70, v3);
    v58 = v70;
    if ((*(unsigned int (**)(uint64_t, WebCore::Animation *, uint64_t, double))(*(_QWORD *)v56 + 720))(v56, v70, v3 + 136, v57))
    {
      v44 = 1;
    }
    else
    {
      v44 = 3;
    }
    if (v58)
      WTF::RefCounted<WebCore::Animation>::deref(v58, v59);
  }
  return v44;
}

uint64_t `non-virtual thunk to'WebCore::KeyframeEffect::document(WebCore::KeyframeEffect *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  if (!v1 || (v2 = *(_QWORD *)(v1 + 8)) == 0)
  {
    v2 = *((_QWORD *)this + 20);
    if (v2)
      return *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
  }
  return v2;
}

int8x8_t *`non-virtual thunk to'WebCore::KeyframeEffect::currentStyle(WebCore::KeyframeEffect *this)
{
  return WebCore::KeyframeEffect::currentStyle((WebCore::KeyframeEffect *)((char *)this - 104));
}

uint64_t WebCore::KeyframeEffect::computeExtentOfTransformAnimation(WebCore::LayoutRect &)const::$_0::operator()(WTF::StringImpl *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = a1;
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 264);
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v3 + 288);
    if (*(_BYTE *)(v3 + 288))
    {
      v6 = *(_DWORD *)(v3 + 272);
      a1 = *(WTF::StringImpl **)(v3 + 280);
      if (a1)
        *(_DWORD *)a1 += 2;
      v7 = 1;
    }
    else
    {
      v7 = 0;
      v6 = 0;
    }
    v8 = *(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL;
    if (v8 && (v9 = *(unsigned int *)(v8 + 164), (_DWORD)v9))
    {
      v14 = *(uint64_t **)(v8 + 152);
      if (v5)
      {
        v15 = 8 * v9;
        while (1)
        {
          v16 = *v14;
          if (*(_BYTE *)(*v14 + 96))
          {
            if (*(_DWORD *)(v16 + 80) == v6 && *(_QWORD *)(v16 + 88) == (_QWORD)a1)
              break;
          }
          ++v14;
          v10 = 1;
          v15 -= 8;
          if (!v15)
            goto LABEL_10;
        }
      }
      else
      {
        v18 = 8 * v9;
        while (1)
        {
          v16 = *v14;
          if (!*(_BYTE *)(*v14 + 96))
            break;
          ++v14;
          v10 = 1;
          v18 -= 8;
          if (!v18)
            goto LABEL_10;
        }
      }
      v11 = *(_QWORD *)(v16 + 8);
      v10 = 1;
      if (v11)
      {
        v12 = 0;
        if (!a1)
          goto LABEL_15;
        goto LABEL_11;
      }
    }
    else
    {
      v10 = 1;
    }
  }
  else
  {
    v7 = 0;
    v10 = 0;
  }
LABEL_10:
  v11 = 0;
  v12 = 1;
  if (!a1)
    goto LABEL_15;
LABEL_11:
  if (v7 && v10)
  {
    if (*(_DWORD *)a1 == 2)
      WTF::StringImpl::destroy(a1, a2);
    else
      *(_DWORD *)a1 -= 2;
  }
LABEL_15:
  if (v12)
    return **((_QWORD **)v2 + 1) + 80;
  return v11;
}

__n64 WebCore::KeyframeEffect::computeExtentOfTransformAnimation(WebCore::LayoutRect &)const::$_1::operator()(__int128 **a1, const WebCore::FloatRect *a2)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::LayoutRect *v7;
  __n64 result;
  unint64_t v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  WebCore::MotionPath *v15;
  WTF::StringImpl *v16;
  int v17;
  char v18;
  unsigned int *v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  signed int v27;
  int v28;
  signed int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  char v45;
  __int128 v46;
  int8x16_t v47;
  __int128 v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  __int128 v52;
  double v53[3];
  _OWORD v54[4];
  char v55;

  v4 = a1[1];
  v38 = **a1;
  v5 = *((_QWORD *)v4 + 15);
  if (((!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0)
     && ((v36 = *((_QWORD *)v4 + 33)) == 0 || (v6 = *(_QWORD *)(*(_QWORD *)(v36 + 40) + 8)) == 0)
     || (*(_QWORD *)(*(_QWORD *)(v6 + 680) + 712) & 0x800000000000) == 0
     || !*((_BYTE *)v4 + 307) && !*((_BYTE *)v4 + 332))
    && !WebCore::KeyframeEffect::preventsAcceleration((WebCore::KeyframeEffect *)v4, a2)
    && *((_DWORD *)v4 + 80))
  {
    if (!WebCore::KeyframeEffect::computeTransformedExtentViaTransformList((WebCore::KeyframeEffect *)a1[2], a2, (const WebCore::RenderStyle *)&v38, v7))return result;
    LODWORD(v9) = DWORD2(v38);
    LODWORD(v10) = HIDWORD(v38);
    goto LABEL_32;
  }
  v11 = a1[2];
  v50 = (float64x2_t)xmmword_1968DF940;
  v51 = (float64x2_t)unk_1968DF950;
  v52 = xmmword_1968DF960;
  *(_OWORD *)v53 = unk_1968DF970;
  v46 = xmmword_1968DF900;
  v47 = *(int8x16_t *)algn_1968DF910;
  v48 = xmmword_1968DF920;
  v49 = (float64x2_t)unk_1968DF930;
  v37 = *v11;
  v12 = *((_QWORD *)v4 + 33);
  if (v12)
  {
    if (*((_BYTE *)v4 + 288))
    {
      v13 = *((_DWORD *)v4 + 68);
      v14 = (_DWORD *)*((_QWORD *)v4 + 35);
      if (v14)
        *v14 += 2;
      *(_QWORD *)&v39 = v12;
      DWORD2(v39) = v13;
      *(_QWORD *)&v40 = v14;
      BYTE8(v40) = 1;
    }
    else
    {
      *(_QWORD *)&v39 = *((_QWORD *)v4 + 33);
      BYTE8(v39) = 0;
      BYTE8(v40) = 0;
    }
    LOBYTE(v41) = 1;
    v15 = (WebCore::MotionPath *)WebCore::Styleable::renderer((WebCore::Styleable *)&v39);
    if ((_BYTE)v41)
    {
      if (BYTE8(v40))
      {
        v16 = (WTF::StringImpl *)v40;
        *(_QWORD *)&v40 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, a2);
          else
            *(_DWORD *)v16 -= 2;
        }
      }
    }
  }
  else
  {
    v15 = 0;
  }
  v39 = v37;
  LOBYTE(v40) = 0;
  v44 = 0;
  v45 = 0;
  if (v15)
  {
    WebCore::MotionPath::motionPathDataForRenderer(v15, a2, v54);
    v42 = v54[2];
    v43 = v54[3];
    v44 = v55;
    v40 = v54[0];
    v41 = v54[1];
    v17 = *((_BYTE *)v15 + 52) & 7;
    if (v17 == 4 && (*((_BYTE *)v15 + 53) & 1) == 0)
      v18 = 1;
    else
      v18 = (v17 == 4) & *((_BYTE *)v15 + 53);
    v45 = v18;
  }
  WebCore::RenderStyle::applyTransform(a2, (float64x2_t *)&v46, (WebCore::FloatRect *)&v39, 0x1Fu);
  result.n64_u64[0] = (unint64_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64((float64x2_t)vextq_s8(v47, v47, 8uLL)), (int32x4_t)vceqzq_f64(v49)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v50), (int32x4_t)vceqq_f64(v51, (float64x2_t)xmmword_1968A14B0)))));
  result.n64_u8[0] = vmaxv_u8((uint8x8_t)result.n64_u64[0]);
  if ((result.n64_u8[0] & 1) == 0)
  {
    result.n64_u64[0] = *(unint64_t *)&v53[0];
    if (v53[0] == 0.0)
    {
      result.n64_u64[0] = *(unint64_t *)&v53[1];
      if (v53[1] == 1.0)
      {
        if (WebCore::TransformationMatrix::decompose2((uint64_t)&v46, (uint64_t)&v39))
        {
          result.n64_u64[0] = v41;
          if (*(double *)&v41 == 0.0)
          {
            *(_QWORD *)&v38 = WebCore::TransformationMatrix::mapRect((WebCore::TransformationMatrix *)&v46, (const WebCore::LayoutRect *)&v38);
            *((_QWORD *)&v38 + 1) = v9;
            v10 = HIDWORD(v9);
LABEL_32:
            if ((int)v9 >= 1 && (int)v10 >= 1)
            {
              v19 = (unsigned int *)a1[3];
              v20 = v19[2];
              if (v20 < 1 || (v21 = v19[3], v21 <= 0))
              {
                result.n64_u64[0] = v38;
                *(_OWORD *)v19 = v38;
              }
              else
              {
                v22 = *v19;
                v23 = v19[1];
                if ((int)v38 >= (int)*v19)
                  v24 = v22;
                else
                  v24 = v38;
                if (SDWORD1(v38) >= (int)v23)
                  v25 = v23;
                else
                  v25 = DWORD1(v38);
                v26 = __OFADD__(v22, v20);
                v27 = v22 + v20;
                v28 = (v22 >> 31) + 0x7FFFFFFF;
                if (v26)
                  v27 = v28;
                v29 = v38 + v9;
                if (__OFADD__((_DWORD)v38, (_DWORD)v9))
                  v29 = (v38 >> 31) + 0x7FFFFFFF;
                if (v27 <= v29)
                  v27 = v29;
                v26 = __OFADD__(v23, v21);
                v30 = v23 + v21;
                if (v26)
                  v30 = (v23 >> 31) + 0x7FFFFFFF;
                v26 = __OFADD__(DWORD1(v38), (_DWORD)v10);
                v31 = DWORD1(v38) + v10;
                if (v26)
                  v31 = (DWORD1(v38) >> 31) + 0x7FFFFFFF;
                if (v30 > v31)
                  v31 = v30;
                *(_QWORD *)v19 = v24 | (v25 << 32);
                v26 = __OFSUB__(v27, (_DWORD)v24);
                v32 = v27 - v24;
                v33 = (v27 >> 31) + 0x7FFFFFFF;
                if (v26)
                  v32 = v33;
                v26 = __OFSUB__(v31, (_DWORD)v25);
                v34 = v31 - v25;
                v35 = (v31 >> 31) + 0x7FFFFFFF;
                if (!v26)
                  v35 = v34;
                v19[2] = v32;
                v19[3] = v35;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL WebCore::TransformationMatrix::isAffine(WebCore::TransformationMatrix *this)
{
  return *((double *)this + 2) == 0.0
      && *((double *)this + 3) == 0.0
      && *((double *)this + 6) == 0.0
      && *((double *)this + 7) == 0.0
      && *((double *)this + 8) == 0.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 10) == 1.0
      && *((double *)this + 11) == 0.0
      && *((double *)this + 14) == 0.0
      && *((double *)this + 15) == 1.0;
}

unint64_t WebCore::KeyframeEffect::progressUntilNextStep(WebCore::KeyframeEffect *this, double a2)
{
  _DWORD *v2;
  double v5;
  unint64_t v6;
  int v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  _QWORD *v14;
  double v15;
  int *v16;
  double v17;
  double v18;
  _QWORD *v19;
  int *v20;
  uint64_t v21;
  double v22;

  v2 = (_DWORD *)*((_QWORD *)this + 3);
  if (!v2)
    goto LABEL_8;
  ++v2[2];
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v2 + 24))(v2) == 2)
  {
    v8 = v2[2];
    v9 = ceil((double)(int)v2[3] * a2) / (double)(int)v2[3] - a2;
    if (v8 == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      v2[2] = v8 - 1;
    LOBYTE(v5) = LOBYTE(v9);
    v6 = *(_QWORD *)&v9 & 0xFFFFFFFFFFFFFF00;
    return LOBYTE(v5) | v6;
  }
  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
  else
    --v2[2];
  v5 = *((double *)this + 3);
  if (v5 == 0.0)
  {
    v6 = 0;
    return LOBYTE(v5) | v6;
  }
  if ((*(unsigned int (**)(double))(**(_QWORD **)&v5 + 24))(COERCE_DOUBLE(*(_QWORD *)&v5))
    || !*((_BYTE *)this + 330)
    || (v10 = *((unsigned int *)this + 39), !(_DWORD)v10))
  {
LABEL_8:
    v6 = 0;
LABEL_9:
    LOBYTE(v5) = 0;
    return LOBYTE(v5) | v6;
  }
  v11 = 0;
  v22 = a2;
  v12 = *((_QWORD *)this + 18) - 40;
  while (1)
  {
    v13 = *(double *)(v12 + 48);
    if (v13 > a2)
      break;
    ++v11;
    v12 += 48;
    if (v10 == v11)
    {
      v6 = *((_QWORD *)this + 12);
      if (!v6)
        goto LABEL_9;
      v21 = *((_QWORD *)this + 18);
      v14 = *(_QWORD **)(v6 + 8);
      if (v14 && (*(unsigned int (**)(_QWORD *))(*v14 + 112))(v14))
      {
        v15 = *(double *)(v21 + 48 * (v10 - 1) + 8);
        v16 = *(int **)(v14[27] + 96);
        v17 = 1.0;
LABEL_26:
        v5 = COERCE_DOUBLE(WebCore::KeyframeEffect::progressUntilNextStep(double)const::$_0::operator()(&v22, v16, v15, v17));
        v6 = *(_QWORD *)&v5 & 0xFFFFFFFFFFFFFF00;
        return LOBYTE(v5) | v6;
      }
      goto LABEL_8;
    }
  }
  if (v11)
  {
    v18 = *(double *)v12;
    v16 = (int *)WebCore::KeyframeEffect::timingFunctionForKeyframeAtIndex(this, v11 - 1);
    v15 = v18;
    v17 = v13;
    goto LABEL_26;
  }
  v6 = *((_QWORD *)this + 12);
  if (!v6)
    goto LABEL_9;
  v19 = *(_QWORD **)(v6 + 8);
  if (!v19 || !(*(unsigned int (**)(_QWORD *))(*v19 + 112))(v19))
    goto LABEL_8;
  v20 = *(int **)(v19[27] + 96);
  if (v20 && (*(unsigned int (**)(int *))(*(_QWORD *)v20 + 24))(v20) == 2)
    v5 = v13 * (ceil(a2 / v13 * (double)v20[3]) / (double)v20[3] - a2 / v13);
  else
    v5 = 0.0;
  v6 = *(_QWORD *)&v5 & 0xFFFFFFFFFFFFFF00;
  return LOBYTE(v5) | v6;
}

uint64_t WebCore::KeyframeEffect::progressUntilNextStep(double)const::$_0::operator()(double *a1, int *a2, double a3, double a4)
{
  uint64_t result;

  if (a2)
  {
    if ((*(unsigned int (**)(int *))(*(_QWORD *)a2 + 24))(a2) == 2)
      *(double *)&result = (a4 - a3)
                         * (ceil((*a1 - a3) / (a4 - a3) * (double)a2[3]) / (double)a2[3] - (*a1 - a3) / (a4 - a3));
    else
      *(double *)&result = 0.0;
  }
  else
  {
    *(double *)&result = 0.0;
  }
  return result;
}

uint64_t WebCore::KeyframeEffect::ticksContinuouslyWhileActive(WebCore::KeyframeEffect *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  WebCore::Element *v15;
  uint64_t v16;
  int v17;
  WTF::StringImpl *v18;
  char v19;
  char v20;
  char v21;

  if (!*((_DWORD *)this + 39))
    return 0;
  v3 = (uint64_t *)((char *)this + 160);
  v2 = *((_QWORD *)this + 20);
  if (!v2 || !*(_DWORD *)(v2 - 12))
    return 0;
  v4 = *((_QWORD *)this + 33);
  if (!v4)
    goto LABEL_28;
  if (*((_BYTE *)this + 288))
  {
    v5 = *((_DWORD *)this + 68);
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 35);
    if (v6)
      *(_DWORD *)v6 += 2;
    v16 = v4;
    v17 = v5;
    v18 = v6;
    v19 = 1;
  }
  else
  {
    v16 = *((_QWORD *)this + 33);
    LOBYTE(v17) = 0;
    v19 = 0;
  }
  v20 = 1;
  v8 = WebCore::Styleable::renderer((WebCore::Styleable *)&v16);
  if (v20)
  {
    if (v19)
    {
      v9 = v18;
      v18 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
  if (!v8)
  {
LABEL_28:
    LOWORD(v16) = 7;
    v17 = 0;
    v13 = WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::contains(v3, (uint64_t)&v16);
    v14 = 0;
    if ((v13 & 1) == 0)
    {
      v15 = (WebCore::Element *)*((_QWORD *)this + 33);
      v14 = !v15 || *((_BYTE *)this + 288) || !WebCore::Element::hasDisplayContents(v15);
    }
    if (v17 != -1)
      ((void (*)(char *, uint64_t *))off_1E33919E8[v17])(&v21, &v16);
    if (v14)
      return 0;
  }
  if (*((_BYTE *)this + 308) != 2 || !WebCore::KeyframeEffect::isRunningAccelerated(this))
    return 1;
  result = WebCore::KeyframeEffect::threadedAnimationResolutionEnabled(this);
  if ((_DWORD)result)
  {
    v11 = *((_QWORD *)this + 37);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
        return *(unsigned __int16 *)(v12 + 130) != 0;
    }
    return 1;
  }
  return result;
}

void WebCore::KeyframeEffect::timeToNextTick(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _BYTE v9[72];

  if (*(_BYTE *)(a2 + 32) != 1)
    goto LABEL_8;
  v4 = *(_QWORD *)(a1 + 96);
  if (!v4)
    goto LABEL_8;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 112))(v5))
    goto LABEL_8;
  v6 = *(_QWORD *)(a1 + 120);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 40) + 8);
  if (*(__int16 *)(v7 + 3292) < 0
    && (WebCore::KeyframeEffect::ticksContinuouslyWhileActive((WebCore::KeyframeEffect *)a1) & 1) == 0)
  {
    WebCore::AnimationEffect::getComputedTiming(a1, (uint64_t)v9);
    WebCore::ComputedEffectTiming::~ComputedEffectTiming((WebCore::ComputedEffectTiming *)v9, v8);
  }
  else
  {
LABEL_8:
    WebCore::AnimationEffect::timeToNextTick((double *)a1, a2);
  }
}

unsigned __int16 *WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::intersectionWith<WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>>(uint64_t *a1, unsigned __int16 **a2, uint64_t *a3)
{
  unsigned __int16 *result;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10[2];
  _BYTE v11[24];

  *a1 = 0;
  result = WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::begin(a2);
  v7 = result;
  v10[0] = result;
  v10[1] = v8;
  if (*a2)
    v9 = &(*a2)[8 * *((unsigned int *)*a2 - 1)];
  else
    v9 = 0;
  if (v9 != result)
  {
    do
    {
      if (WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::contains(a3, (uint64_t)v7))WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add(a1, (uint64_t)v7, (uint64_t)v11);
      result = (unsigned __int16 *)WTF::HashTableConstIteratorAdapter<WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>>::operator++(v10);
      v7 = v10[0];
    }
    while (v10[0] != v9);
  }
  return result;
}

unsigned int *WebCore::KeyframeEffect::effectStackNoLongerAllowsAccelerationDuringAcceleratedActionApplication(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v1 = (uint64_t)this;
  v2 = *((_QWORD *)this + 15);
  if ((!v2 || (v3 = *(_QWORD *)(v2 + 8)) == 0)
    && ((v5 = *((_QWORD *)this + 33)) == 0 || (v3 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8)) == 0)
    || (*(_QWORD *)(*(_QWORD *)(v3 + 680) + 712) & 0x800000000000) == 0)
  {
    v6 = 4;
    v4 = this[65];
    if ((_DWORD)v4 == this[64])
    {
      WTF::Vector<WebCore::KeyframeEffect::AcceleratedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::KeyframeEffect::AcceleratedAction>((uint64_t)(this + 62), (unint64_t)&v6);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)this + 31) + v4) = 4;
      this[65] = v4 + 1;
    }
    *(_BYTE *)(v1 + 304) = 4;
    WebCore::KeyframeEffect::applyPendingAcceleratedActions((WebCore::KeyframeEffect *)v1);
    return WTF::Vector<WebCore::KeyframeEffect::AcceleratedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(v1 + 248), 0);
  }
  return this;
}

void WebCore::KeyframeEffectStack::effectAbilityToBeAcceleratedDidChange(uint64_t **this, const WebCore::KeyframeEffect *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;

  if (WebCore::KeyframeEffect::preventsAcceleration(a2, a2))
  {
    v4 = *((unsigned int *)this + 3);
    if ((_DWORD)v4)
    {
      v5 = *this;
      v6 = 8 * v4;
      do
      {
        if (*v5)
          v7 = *(_QWORD *)(*v5 + 8);
        else
          v7 = 0;
        WebCore::KeyframeEffect::addPendingAcceleratedAction(v7, 4);
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
  }
  else if (WebCore::KeyframeEffectStack::allowsAcceleration(this, v3))
  {
    v8 = *((unsigned int *)this + 3);
    if ((_DWORD)v8)
    {
      v9 = *this;
      v10 = 8 * v8;
      do
      {
        if (*v9)
          v11 = *(unsigned __int8 **)(*v9 + 8);
        else
          v11 = 0;
        v12 = v11[310];
        if (v12 != 3)
        {
          if (v12 == 2)
            v11[310] = 0;
          WebCore::KeyframeEffect::updateAcceleratedActions((WebCore::KeyframeEffect *)v11);
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
}

void WebCore::KeyframeEffect::acceleratedPropertiesOverriddenByCascadeDidChange(WebCore::KeyframeEffect *this, WTF::StringImpl *a2)
{
  _BOOL4 v3;
  _BOOL4 canBeAccelerated;
  WTF::StringImpl *v5;

  v3 = WebCore::KeyframeEffect::preventsAcceleration(this, a2);
  canBeAccelerated = WebCore::KeyframeEffect::canBeAccelerated(this);
  WebCore::KeyframeEffect::computeHasAcceleratedPropertyOverriddenByCascadeProperty((uint64_t)this);
  if (this
    && (v3 != WebCore::KeyframeEffect::preventsAcceleration(this, v5)
     || canBeAccelerated != WebCore::KeyframeEffect::canBeAccelerated(this)))
  {
    WebCore::KeyframeEffect::abilityToBeAcceleratedDidChange(this);
  }
}

uint64_t WebCore::acceleratedPropertyDidChange(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  float v8;
  float v9;
  int v10;
  float v11;
  int v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  int v33;
  WebCore::Length *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  int v39;
  float v40;
  float v41;
  int v42;
  uint64_t v43;
  float v44;
  int v45;
  uint64_t v46;
  float v47;
  int v48;
  BOOL v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  char isCalculatedEqual;
  const WebCore::Length *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  char v57;

  result = 0;
  if (a1 > 0xD1u)
  {
    if (a1 > 0x11Bu)
    {
      if (a1 != 284)
      {
        if (a1 != 351 && a1 != 451)
          return result;
        v23 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 72);
        v24 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 72);
        v16 = *(unsigned int *)(v23 + 20);
        if ((_DWORD)v16 == *(_DWORD *)(v24 + 20))
        {
          v17 = *(_QWORD **)(v24 + 8);
          v18 = *(_QWORD **)(v23 + 8);
          if ((_DWORD)v16)
          {
            v25 = 8 * v16 - 8;
            v20 = v18;
            v21 = *(_QWORD **)(v24 + 8);
            while (1)
            {
              v26 = v25;
              if (!(*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*v20 + 24))(*v20, *v21))
                return 1;
              ++v20;
              ++v21;
              v25 = v26 - 8;
              if (!v26)
                goto LABEL_78;
            }
          }
LABEL_77:
          v21 = v17;
          v20 = v18;
LABEL_78:
          v49 = v20 == &v18[v16] && v21 == &v17[v16];
          return !v49;
        }
        return 1;
      }
      v35 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 320);
      v36 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 320);
    }
    else
    {
      switch(a1)
      {
        case 0xD2u:
          v35 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 304);
          v36 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 304);
          break;
        case 0xD6u:
          v35 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 312);
          v36 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 312);
          break;
        case 0x111u:
          v14 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40);
          v15 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 40);
          v16 = *(unsigned int *)(v14 + 20);
          if ((_DWORD)v16 == *(_DWORD *)(v15 + 20))
          {
            v17 = *(_QWORD **)(v15 + 8);
            v18 = *(_QWORD **)(v14 + 8);
            if ((_DWORD)v16)
            {
              v19 = 8 * v16 - 8;
              v20 = v18;
              v21 = *(_QWORD **)(v15 + 8);
              while (1)
              {
                v22 = v19;
                if (!(*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*v20 + 32))(*v20, *v21))
                  return 1;
                ++v20;
                ++v21;
                v19 = v22 - 8;
                if (!v22)
                  goto LABEL_78;
              }
            }
            goto LABEL_77;
          }
          return 1;
        default:
          return result;
      }
    }
LABEL_76:
    v49 = v35 == v36;
    return !v49;
  }
  switch(a1)
  {
    case 0xB2u:
      v5 = *(unsigned __int8 **)(a2 + 40);
      v6 = *(unsigned __int8 **)(a3 + 40);
      v7 = v5[428];
      if (v7 != v6[428] || (v5[429] != 0) != (v6[429] != 0))
        goto LABEL_96;
      if (v7 == 13)
        goto LABEL_12;
      if (v7 == 11)
      {
        v51 = *(unsigned __int8 **)(a3 + 40);
        v52 = *(unsigned __int8 **)(a2 + 40);
        isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 424), (const WebCore::Length *)(v6 + 424));
        v5 = v52;
        v6 = v51;
        if ((isCalculatedEqual & 1) == 0)
          goto LABEL_96;
      }
      else
      {
        v8 = *((float *)v5 + 106);
        if (!v5[430])
          v8 = (float)SLODWORD(v8);
        v9 = *((float *)v6 + 106);
        if (!v6[430])
          v9 = (float)SLODWORD(v9);
        if (v8 != v9)
          goto LABEL_96;
      }
LABEL_12:
      v10 = v5[436];
      if (v10 != v6[436] || (v5[437] != 0) != (v6[437] != 0))
        goto LABEL_96;
      if (v10 == 13)
        goto LABEL_91;
      if (v10 == 11)
      {
        v34 = (WebCore::Length *)(v5 + 432);
        v54 = (const WebCore::Length *)(v6 + 432);
        goto LABEL_99;
      }
      v11 = *((float *)v5 + 108);
      if (!v5[438])
        v11 = (float)SLODWORD(v11);
      v12 = v6[438];
      v13 = *((float *)v6 + 108);
      goto LABEL_86;
    case 0xB3u:
      v31 = *(unsigned __int8 **)(a2 + 40);
      v32 = *(unsigned __int8 **)(a3 + 40);
      v33 = v31[404];
      if (v33 != v32[404] || (v31[405] != 0) != (v32[405] != 0))
        goto LABEL_96;
      if (v33 == 13)
        goto LABEL_91;
      v34 = (WebCore::Length *)(v31 + 400);
      if (v33 == 11)
      {
        v54 = (const WebCore::Length *)(v32 + 400);
        goto LABEL_99;
      }
      if (v31[406])
        v11 = *(float *)v34;
      else
        v11 = (float)*(int *)v34;
      v12 = v32[406];
      v13 = *((float *)v32 + 100);
      goto LABEL_86;
    case 0xB4u:
      v35 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 328);
      v36 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 328);
      goto LABEL_76;
    case 0xB5u:
      v37 = *(unsigned __int8 **)(a2 + 40);
      v38 = *(unsigned __int8 **)(a3 + 40);
      v39 = v37[412];
      if (v39 != v38[412] || (v37[413] != 0) != (v38[413] != 0))
        goto LABEL_96;
      if (v39 == 13)
        goto LABEL_62;
      if (v39 == 11)
      {
        v55 = *(unsigned __int8 **)(a3 + 40);
        v56 = *(unsigned __int8 **)(a2 + 40);
        v57 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v37 + 408), (const WebCore::Length *)(v38 + 408));
        v37 = v56;
        v38 = v55;
        if ((v57 & 1) == 0)
        {
LABEL_96:
          v50 = 0;
          return v50 ^ 1u;
        }
      }
      else
      {
        v40 = *((float *)v37 + 102);
        if (!v37[414])
          v40 = (float)SLODWORD(v40);
        v41 = *((float *)v38 + 102);
        if (!v38[414])
          v41 = (float)SLODWORD(v41);
        if (v40 != v41)
          goto LABEL_96;
      }
LABEL_62:
      v42 = v37[420];
      if (v42 != v38[420] || (v37[421] != 0) != (v38[421] != 0))
        goto LABEL_96;
      if (v42 == 13)
      {
LABEL_91:
        v50 = 1;
      }
      else if (v42 == 11)
      {
        v34 = (WebCore::Length *)(v37 + 416);
        v54 = (const WebCore::Length *)(v38 + 416);
LABEL_99:
        v50 = WebCore::Length::isCalculatedEqual(v34, v54);
      }
      else
      {
        v11 = *((float *)v37 + 104);
        if (!v37[422])
          v11 = (float)SLODWORD(v11);
        v12 = v38[422];
        v13 = *((float *)v38 + 104);
LABEL_86:
        if (!v12)
          v13 = (float)SLODWORD(v13);
        v50 = v11 == v13;
      }
      return v50 ^ 1u;
    case 0xB6u:
      v43 = *(_QWORD *)(a2 + 40);
      v44 = *(float *)(v43 + 440);
      v45 = *(unsigned __int8 *)(v43 + 444);
      v46 = *(_QWORD *)(a3 + 40);
      v47 = *(float *)(v46 + 440);
      v48 = *(unsigned __int8 *)(v46 + 444);
      v49 = v44 == v47 && v45 == v48;
      return !v49;
    case 0xB7u:
      v49 = *(float *)(*(_QWORD *)(a2 + 32) + 4) == *(float *)(*(_QWORD *)(a3 + 32) + 4);
      return !v49;
    default:
      if (a1 != 117)
        return result;
      v27 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 32);
      v28 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 32);
      v16 = *(unsigned int *)(v27 + 20);
      if ((_DWORD)v16 != *(_DWORD *)(v28 + 20))
        return 1;
      v17 = *(_QWORD **)(v28 + 8);
      v18 = *(_QWORD **)(v27 + 8);
      if (!(_DWORD)v16)
        goto LABEL_77;
      v29 = 8 * v16 - 8;
      v20 = v18;
      v21 = *(_QWORD **)(v28 + 8);
      while (1)
      {
        v30 = v29;
        if (!(*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*v20 + 24))(*v20, *v21))
          return 1;
        ++v20;
        ++v21;
        v29 = v30 - 8;
        if (!v30)
          goto LABEL_78;
      }
  }
}

unint64_t WebCore::KeyframeEffect::keyframeAtIndex(unint64_t this, unint64_t a2)
{
  if (*(unsigned int *)(this + 156) > a2)
    return *(_QWORD *)(this + 144) + 48 * a2;
  __break(0xC471u);
  return this;
}

uint64_t WebCore::KeyframeEffect::timingFunctionForKeyframe(WebCore::KeyframeEffect *this, const WebCore::KeyframeInterpolation::Keyframe *a2)
{
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t result;
  int v8;
  BOOL v9;

  if (!(*(unsigned int (**)(const WebCore::KeyframeInterpolation::Keyframe *))(*(_QWORD *)a2 + 32))(a2))
    return 0;
  v4 = *((_QWORD *)this + 12);
  if (!v4 || (v5 = *(_QWORD **)(v4 + 8)) == 0 || !(*(unsigned int (**)(_QWORD *))(*v5 + 104))(v5))
  {
    v6 = (char *)a2 + 32;
    return *(_QWORD *)v6;
  }
  v8 = (*(uint64_t (**)(_QWORD *))(*v5 + 112))(v5);
  result = *((_QWORD *)a2 + 4);
  if (v8)
    v9 = result == 0;
  else
    v9 = 1;
  if (v9)
  {
    v6 = (char *)(v5[27] + 96);
    return *(_QWORD *)v6;
  }
  return result;
}

void WebCore::KeyframeEffect::isPropertyAdditiveOrCumulative(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::KeyframeEffectStack *v3;
  WTF::StringImpl *v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v2 == -1)
  {
    v3 = (WebCore::KeyframeEffectStack *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::KeyframeEffectStack::~KeyframeEffectStack(v3, v4);
  }
  else
  {
    v6 = &v5;
    ((void (*)(char **, uint64_t))off_1E3391CC0[v2])(&v6, a2 + 8);
  }
}

void WebCore::KeyframeEffectStack::~KeyframeEffectStack(WebCore::KeyframeEffectStack *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int **v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::Animation **v19;
  uint64_t v20;
  WebCore::Animation *v21;
  WTF *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  char *v30;
  char v31;

  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v18 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v18)
      {
        v19 = *(WebCore::Animation ***)(v3 + 8);
        v20 = 8 * v18;
        do
        {
          v21 = *v19;
          *v19 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
            {
              WebCore::Animation::~Animation(v21, a2);
              WTF::fastFree(v23, v24);
            }
            else
            {
              --*(_DWORD *)v21;
            }
          }
          ++v19;
          v20 -= 8;
        }
        while (v20);
      }
      v22 = *(WTF **)(v3 + 8);
      if (v22)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v22, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WTF *)*((_QWORD *)this + 7);
  if (v4)
  {
    v14 = *((unsigned int *)v4 - 1);
    if ((_DWORD)v14)
    {
      v15 = *((_QWORD *)this + 7);
      while (1)
      {
        v16 = *(unsigned int *)(v15 + 8);
        if ((_DWORD)v16 == -1)
          break;
        v30 = &v29;
        if ((((uint64_t (*)(char **, uint64_t))off_1E3391998[v16])(&v30, v15) & 1) == 0)
        {
          v17 = *(unsigned int *)(v15 + 8);
          if ((_DWORD)v17 != -1)
            ((void (*)(char *, uint64_t))off_1E33919E8[v17])(&v31, v15);
          *(_DWORD *)(v15 + 8) = -1;
        }
        v15 += 16;
        if (!--v14)
          goto LABEL_28;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_40;
    }
LABEL_28:
    WTF::fastFree((WTF *)((char *)v4 - 16), a2);
  }
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 6);
  if (v5)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  v4 = (WTF *)*((_QWORD *)this + 3);
  while (v4)
  {
LABEL_40:
    v25 = v4;
    v4 = (WTF *)*((_QWORD *)v4 + 2);
    v26 = *(unsigned int **)v25;
    *(_QWORD *)v25 = 0;
    if (v26)
    {
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v26);
        WTF::fastFree((WTF *)v26, a2);
      }
    }
    WTF::fastFree(v25, a2);
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  v7 = *((unsigned int *)this + 3);
  if ((_DWORD)v7)
  {
    v8 = *(unsigned int ***)this;
    v9 = *(_QWORD *)this + 8 * v7;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      ++v8;
    }
    while (v8 != (unsigned int **)v9);
  }
  v13 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v13, a2);
  }
}

uint64_t WebCore::KeyframeEffectStack::containsProperty(uint64_t a1, __int16 a2)
{
  _WORD *v4;
  uint64_t (**v5)();
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (_WORD *)WTF::fastMalloc((WTF *)0x10);
  v5 = off_1E3391CE0;
  *(_QWORD *)v4 = off_1E3391CE0;
  v4[4] = a2;
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)a1;
    v8 = 8 * v6 - 8;
    do
    {
      v9 = *v7++;
      v10 = (*(uint64_t (**)(_WORD *, _QWORD))(*(_QWORD *)v4 + 16))(v4, *(_QWORD *)(v9 + 8));
      if ((v10 & 1) != 0)
        break;
      v11 = v8;
      v8 -= 8;
    }
    while (v11);
    v5 = *(uint64_t (***)())v4;
  }
  else
  {
    v10 = 0;
  }
  ((void (*)(_WORD *))v5[1])(v4);
  return v10;
}

uint64_t WebCore::KeyframeEffectStack::requiresPseudoElement(uint64_t **this)
{
  uint64_t v2;
  uint64_t (**v3)();
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = WTF::fastMalloc((WTF *)0x10);
  v3 = off_1E3391D08;
  *(_QWORD *)v2 = off_1E3391D08;
  v4 = *((unsigned int *)this + 3);
  if ((_DWORD)v4)
  {
    v5 = *this;
    v6 = 8 * v4 - 8;
    do
    {
      v7 = *v5++;
      v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *(_QWORD *)(v7 + 8));
      if ((v8 & 1) != 0)
        break;
      v9 = v6;
      v6 -= 8;
    }
    while (v9);
    v3 = *(uint64_t (***)())v2;
  }
  else
  {
    v8 = 0;
  }
  ((void (*)(uint64_t))v3[1])(v2);
  return v8;
}

uint64_t WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(uint64_t a1, __int16 a2)
{
  _WORD *v4;
  uint64_t (**v5)();
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (_WORD *)WTF::fastMalloc((WTF *)0x10);
  v5 = off_1E3391D58;
  *(_QWORD *)v4 = off_1E3391D58;
  v4[4] = a2;
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)a1;
    v8 = 8 * v6 - 8;
    do
    {
      v9 = *v7++;
      v10 = (*(uint64_t (**)(_WORD *, _QWORD))(*(_QWORD *)v4 + 16))(v4, *(_QWORD *)(v9 + 8));
      if ((v10 & 1) != 0)
        break;
      v11 = v8;
      v8 -= 8;
    }
    while (v11);
    v5 = *(uint64_t (***)())v4;
  }
  else
  {
    v10 = 0;
  }
  ((void (*)(_WORD *))v5[1])(v4);
  return v10;
}

uint64_t WebCore::KeyframeEffectStack::setCSSAnimationList(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Animation **v6;
  uint64_t v7;
  WebCore::Animation *v8;
  WTF *v9;
  WTF *v10;
  void *v11;

  v2 = result;
  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = *(_QWORD *)(result + 64);
  *(_QWORD *)(result + 64) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v5 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v5)
      {
        v6 = *(WebCore::Animation ***)(v4 + 8);
        v7 = 8 * v5;
        do
        {
          v8 = *v6;
          *v6 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 1)
            {
              WebCore::Animation::~Animation(v8, a2);
              WTF::fastFree(v10, v11);
            }
            else
            {
              --*(_DWORD *)v8;
            }
          }
          ++v6;
          v7 -= 8;
        }
        while (v7);
      }
      v9 = *(WTF **)(v4 + 8);
      if (v9)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        WTF::fastFree(v9, a2);
      }
      result = WTF::fastFree((WTF *)v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  *(_BYTE *)(v2 + 72) = 0;
  return result;
}

uint64_t WebCore::KeyframeEffectStack::containsInvalidCSSAnimationName(WebCore::KeyframeEffectStack *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int i;
  int v9;
  uint64_t result;

  v3 = *((_QWORD *)this + 6);
  if (!v3)
    return 0;
  v5 = *(_DWORD *)(v3 - 8);
  v6 = *((_DWORD *)*a2 + 4);
  if (v6 < 0x100)
    v7 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v7 = v6 >> 8;
  for (i = 0; ; v7 = i + v9)
  {
    v9 = v7 & v5;
    result = *(_QWORD *)(v3 + 8 * (v7 & v5));
    if (!result)
      break;
    if (result != -1 && (WTF::equal((WTF *)result, *a2, a3) & 1) != 0)
      return 1;
    ++i;
  }
  return result;
}

WTF *WebCore::KeyframeEffectStack::addInvalidCSSAnimationName(WebCore::KeyframeEffectStack *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  _BYTE v4[24];

  return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 6, a2, a3, (uint64_t)v4);
}

uint64_t WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  char v11;
  char *v12;
  char v13;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (!v4)
    return (uint64_t)a1;
  v5 = *(unsigned int *)(v4 - 4);
  if (!(_DWORD)v5)
  {
LABEL_10:
    WTF::fastFree((WTF *)(v4 - 16), a2);
    return (uint64_t)a1;
  }
  v6 = v4;
  while (1)
  {
    v7 = *(unsigned int *)(v6 + 8);
    if ((_DWORD)v7 == -1)
      break;
    v12 = &v11;
    if ((((uint64_t (*)(char **, uint64_t))off_1E3391998[v7])(&v12, v6) & 1) == 0)
    {
      v8 = *(unsigned int *)(v6 + 8);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, uint64_t))off_1E33919E8[v8])(&v13, v6);
      *(_DWORD *)(v6 + 8) = -1;
    }
    v6 += 16;
    if (!--v5)
      goto LABEL_10;
  }
  v10 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::Vector<WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::containsIf<WebCore::KeyframeEffectStack::applyPendingAcceleratedActions(void)::$_0>(v10);
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::containsIf<WebCore::KeyframeEffectStack::applyPendingAcceleratedActions(void)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::KeyframeEffect *v5;
  uint64_t v6;
  WebCore::WebAnimation *v7;
  uint64_t result;

  if (!*((_DWORD *)a1 + 3))
    return 0;
  v2 = 0;
  while (1)
  {
    v3 = *a1;
    v4 = *(_QWORD *)(*a1 + 8 * v2);
    v5 = v4 ? *(WebCore::KeyframeEffect **)(v4 + 8) : 0;
    if (WebCore::KeyframeEffect::canBeAccelerated(v5))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8 * v2) + 8) + 96);
      v7 = v6 ? *(WebCore::WebAnimation **)(v6 + 8) : 0;
      result = WebCore::WebAnimation::playState(v7);
      if ((_DWORD)result == 1)
        break;
    }
    if (++v2 >= (unint64_t)*((unsigned int *)a1 + 3))
      return 0;
  }
  return result;
}

uint64_t WebCore::KeyframeEffectStack::hasAcceleratedEffects(WebCore::KeyframeEffectStack *this, const WebCore::Settings *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _BOOL4 canBeAccelerated;
  WebCore::WebAnimation *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  if ((*((_QWORD *)a2 + 89) & 0x800000000000) == 0)
  {
    v2 = *((unsigned int *)this + 3);
    if (!(_DWORD)v2)
      return 0;
    v3 = *(_QWORD **)this;
    v4 = 8 * v2;
    while (1)
    {
      v5 = *v3;
      if (*v3)
        v5 = *(_QWORD *)(v5 + 8);
      v6 = *(_QWORD *)(v5 + 120);
      if ((v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0
         || (v9 = *(_QWORD *)(v5 + 264)) != 0 && (v7 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8)) != 0)
        && (*(_QWORD *)(*(_QWORD *)(v7 + 680) + 712) & 0x800000000000) != 0)
      {
        v14 = v5;
        if (*(_BYTE *)(v5 + 328))
        {
          v12 = v4;
          v13 = v3;
          canBeAccelerated = WebCore::KeyframeEffect::canBeAccelerated((WebCore::KeyframeEffect *)v5);
          v4 = v12;
          v3 = v13;
          if (canBeAccelerated)
          {
            v11 = *(WebCore::WebAnimation **)(*(_QWORD *)(v14 + 96) + 8);
            if (!*((_BYTE *)v11 + 156))
            {
              result = WebCore::WebAnimation::playState(v11);
              v4 = v12;
              v3 = v13;
              if ((_DWORD)result == 1)
                return result;
            }
          }
        }
      }
      else if (*(_BYTE *)(v5 + 310) == 1)
      {
        return 1;
      }
      result = 0;
      ++v3;
      v4 -= 8;
      if (!v4)
        return result;
    }
  }
  return WTF::WeakListHashSet<WebCore::AcceleratedEffect,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t)this + 16, a2) ^ 1;
}

uint64_t WTF::WeakListHashSet<WebCore::AcceleratedEffect,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(uint64_t a1, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  if (!*(_QWORD *)a1 || !*(_DWORD *)(*(_QWORD *)a1 - 12))
    return 1;
  v4 = a1 + 8;
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
  {
LABEL_6:
    WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes(a1, a2);
    v6 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)a1 = 0;
      WTF::fastFree((WTF *)(v6 - 16), v5);
      v6 = *(_QWORD *)a1;
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_DWORD *)(v4 + 16) = 0;
      if (v6)
      {
        LODWORD(v6) = *(_DWORD *)(v6 - 12);
        if (v6 > 0x7FFFFFFE)
          LODWORD(v6) = 0x7FFFFFFF;
      }
    }
    else
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_DWORD *)(v4 + 16) = 0;
    }
    *(_DWORD *)(a1 + 28) = 2 * v6;
    return 1;
  }
  while (!*(_QWORD *)(*v3 + 8))
  {
    v3 = (_QWORD *)v3[2];
    if (!v3)
      goto LABEL_6;
  }
  return 0;
}

uint64_t WebCore::ScrollTimeline::create@<X0>(_DWORD **a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)result = off_1E3391D80;
  *(_QWORD *)(result + 48) = 0x7FF8000000000000;
  *(_QWORD *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = a2;
  v7 = *a1;
  if (*a1)
    *v7 += 2;
  *(_QWORD *)(result + 72) = v7;
  *(_BYTE *)(result + 80) = 0;
  *a3 = result;
  return result;
}

uint64_t WebCore::ScrollTimeline::createFromCSSValue@<X0>(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  int v6;
  char v7;
  int v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  WTF::StringImpl *v12;
  int v13;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_10;
  }
  v6 = *(_DWORD *)v5;
  *(_DWORD *)v5 += 2;
  if (((*(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16)) & 0x3F87F) == 0x50)
  {
    v8 = *(unsigned __int16 *)(v5 + 8);
    if (v8 == 645)
      v7 = 2;
    else
      v7 = v8 == 644;
    if (v6)
      goto LABEL_4;
LABEL_9:
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v5, a2);
    goto LABEL_10;
  }
  v7 = 0;
  if (!v6)
    goto LABEL_9;
LABEL_4:
  *(_DWORD *)v5 = v6;
LABEL_10:
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_12;
  *(_DWORD *)v9 += 2;
  if (((*(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16)) & 0x3F87F) != 0x50)
    goto LABEL_12;
  v13 = *(unsigned __int16 *)(v9 + 8);
  switch(v13)
  {
    case 999:
      v10 = 3;
      break;
    case 998:
      v10 = 2;
      break;
    case 366:
      v10 = 1;
      break;
    default:
LABEL_12:
      v10 = 0;
      break;
  }
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)result = off_1E3391D80;
  *(_QWORD *)(result + 48) = 0x7FF8000000000000;
  *(_QWORD *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = v10;
  *(_QWORD *)(result + 72) = 0;
  *(_BYTE *)(result + 80) = v7;
  *a3 = result;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v9, v12);
    else
      *(_DWORD *)v9 -= 2;
  }
  return result;
}

uint64_t WebCore::ScrollTimeline::toCSSValue@<X0>(WebCore::ScrollTimeline *this@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  uint64_t v4;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t result;
  int v10;

  v3 = *((unsigned __int8 *)this + 80);
  v4 = 643;
  if (v3 == 1)
    v4 = 644;
  if (v3 == 2)
    v4 = 645;
  v5 = &WebCore::staticCSSValuePool[4 * v4 + 3088];
  *v5 += 2;
  v6 = *((char *)this + 64);
  if (v6 > 3)
    v7 = 0;
  else
    v7 = qword_1968DF980[v6];
  v8 = &WebCore::staticCSSValuePool[4 * v7 + 3088];
  *v8 += 2;
  result = WTF::fastCompactMalloc((WTF *)0x18);
  *(_DWORD *)result = 2;
  v10 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
  *(_WORD *)(result + 4) = -24576;
  *(_BYTE *)(result + 6) = (v10 | 0x10000u) >> 16;
  *(_QWORD *)(result + 8) = v5;
  *(_QWORD *)(result + 16) = v8;
  *a2 = result;
  return result;
}

WebCore::StyleOriginatedAnimation *WebCore::StyleOriginatedAnimation::StyleOriginatedAnimation(WebCore::StyleOriginatedAnimation *this, const WebCore::Styleable *a2, const WebCore::Animation *a3)
{
  WebCore::WebAnimation *v6;
  unsigned int *v7;
  unsigned int v8;
  _DWORD *v9;

  v6 = WebCore::WebAnimation::WebAnimation(this, *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 8));
  *(_QWORD *)v6 = off_1E33916F0;
  *((_QWORD *)v6 + 4) = &unk_1E3391870;
  *((_WORD *)v6 + 88) = 768;
  v7 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(*(_QWORD *)a2);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *((_QWORD *)this + 23) = v7;
  *((_BYTE *)this + 192) = 0;
  *((_BYTE *)this + 208) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    *((_DWORD *)this + 48) = *((_DWORD *)a2 + 2);
    v9 = (_DWORD *)*((_QWORD *)a2 + 2);
    if (v9)
      *v9 += 2;
    *((_QWORD *)this + 25) = v9;
    *((_BYTE *)this + 208) = 1;
  }
  ++*(_DWORD *)a3;
  *((_QWORD *)this + 27) = a3;
  return this;
}

void WebCore::StyleOriginatedAnimation::~StyleOriginatedAnimation(WebCore::StyleOriginatedAnimation *this, WTF::StringImpl *a2)
{
  WebCore::Animation *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = off_1E33916F0;
  *((_QWORD *)this + 4) = &unk_1E3391870;
  v3 = (WebCore::Animation *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::Animation::~Animation(v3, a2);
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  if (*((_BYTE *)this + 208))
  {
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  v5 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v10 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v10)
      {
        v13 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v10));
        v5 = v13;
      }
      v11 = *(WTF **)(v5 + 16);
      if (v11)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v12 = v5;
        WTF::fastFree(v11, a2);
        v5 = v12;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WebCore::WebAnimation::~WebAnimation(this, a2);
}

uint64_t WebCore::StyleOriginatedAnimation::owningElement@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  char v6;

  v2 = *(_QWORD *)(this + 184);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    if (*(_BYTE *)(this + 208))
    {
      v4 = *(_DWORD *)(this + 192);
      v5 = *(_DWORD **)(this + 200);
      if (v5)
        *v5 += 2;
      *(_QWORD *)a2 = v3;
      *(_DWORD *)(a2 + 8) = v4;
      *(_QWORD *)(a2 + 16) = v5;
      v6 = 1;
      *(_BYTE *)(a2 + 24) = 1;
    }
    else
    {
      *(_QWORD *)a2 = v3;
      *(_BYTE *)(a2 + 8) = 0;
      v6 = 1;
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
  else
  {
    v6 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 32) = v6;
  return this;
}

uint64_t WebCore::StyleOriginatedAnimation::tick(WebCore::StyleOriginatedAnimation *this, __n128 a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v3 = *((unsigned __int8 *)this + 158);
  *((_BYTE *)this + 160) = 0;
  WebCore::WebAnimation::updateFinishedState((uint64_t)this, 0, 1, a2);
  *((_BYTE *)this + 159) = 1;
  v4 = *((_QWORD *)this + 7);
  if (!v4 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4) & 1) == 0)
  {
    if (*((_BYTE *)this + 162))
      WebCore::WebAnimation::runPendingPauseTask(this);
    if (*((_BYTE *)this + 161))
      WebCore::WebAnimation::runPendingPlayTask(this);
  }
  if (!*((_DWORD *)this + 38))
  {
    v5 = *((_QWORD *)this + 7);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  v6 = *((_QWORD *)this + 23);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
    v9 = (*(uint64_t (**)(WebCore::StyleOriginatedAnimation *))(*(_QWORD *)this + 112))(this);
    v10 = *(unsigned __int16 *)(v8 + 3292);
    if (v9)
      v11 = v10 >> 15;
    else
      v11 = (v10 >> 13) & 2;
  }
  else
  {
    v11 = 0;
  }
  result = WebCore::StyleOriginatedAnimation::invalidateDOMEvents((uint64_t)this, v11, 0.0);
  if (v3)
  {
    result = WebCore::WebAnimation::playState(this);
    if (!(_DWORD)result)
      return WebCore::StyleOriginatedAnimation::disassociateFromOwningElement((uint64_t)this);
  }
  return result;
}

uint64_t WebCore::StyleOriginatedAnimation::invalidateDOMEvents(uint64_t result, int a2, double a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  __n128 ComputedTiming;
  double v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  double v23;
  double v24;
  WebCore *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  WebCore *v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double v40;
  unint64_t StatusReg;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WebCore *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  double v57;
  WebCore *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  double v65;
  WebCore *v66;
  uint64_t v67;
  char v68;
  BOOL v70;
  BOOL v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  double v75;
  WebCore *v76;
  double v77;
  double v78;
  double v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  double v85;
  WebCore *v86;
  _BYTE v87[8];
  int v88;
  double v89;
  WTF::StringImpl *v90;
  unsigned __int8 v91;
  double v92;
  double v93;
  double v94;
  char v95;

  v3 = *(_QWORD *)(result + 184);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v6 = result;
    if (!*(_BYTE *)(result + 162) && !*(_BYTE *)(result + 161))
    {
      v7 = 0;
      goto LABEL_6;
    }
    if (!*(_BYTE *)(result + 176))
    {
      v7 = 1;
LABEL_6:
      v8 = *(_QWORD *)(result + 56);
      if (v8)
      {
        ComputedTiming = (__n128)WebCore::AnimationEffect::getComputedTiming(*(_QWORD *)(result + 56), (uint64_t)v87);
        v11 = v92;
        v12 = v91;
        if (v94 >= -v89)
          v13 = -v89;
        else
          v13 = v94;
        if (v94 >= v93 - v89)
          v14 = v93 - v89;
        else
          v14 = v94;
        result = (uint64_t)v90;
        *(double *)&v90 = 0.0;
        if (*(double *)&result != 0.0)
        {
          if (*(_DWORD *)result == 2)
            *(double *)&result = COERCE_DOUBLE(WTF::StringImpl::destroy((WTF::StringImpl *)result, v9));
          else
            *(_DWORD *)result -= 2;
        }
        v15 = v13 / 1000.0;
        v16 = v14 / 1000.0;
        if (v88 != -1)
          *(double *)&result = COERCE_DOUBLE(((uint64_t (*)(char *, _BYTE *))off_1E33919C8[v88])(&v95, v87));
        v17 = fmax(v15, 0.0);
        v18 = fmax(v16, 0.0);
      }
      else
      {
        *(double *)&result = COERCE_DOUBLE(WebCore::WebAnimation::currentTime(result));
        if (v68)
          v12 = 2 * (*(double *)&result >= 0.0);
        else
          v12 = 3;
        v18 = 0.0;
        v17 = 0.0;
        v11 = 0.0;
      }
      v19 = *(unsigned __int8 *)(v6 + 177);
      if (a2 != 2)
      {
        if (a2 != 1)
        {
LABEL_21:
          *(_BYTE *)(v6 + 176) = v7;
          *(_BYTE *)(v6 + 177) = v12;
          *(double *)(v6 + 224) = v11;
          return result;
        }
        v70 = v19 != 3 && v19 != 0;
        if (v12 == 1 && !v70)
        {
          v30 = WebCore::eventNames((WebCore *)result) + 144;
LABEL_87:
          v53 = *(_QWORD *)(v6 + 56);
          if (v53)
          {
            v38 = *(double *)(v53 + 56);
LABEL_89:
            v37 = v6;
            ComputedTiming.n128_f64[0] = v17;
            goto LABEL_76;
          }
          goto LABEL_158;
        }
        if (v12 != 2)
          v70 = 1;
        if (v70)
        {
          v71 = v12 != 0;
          if (v19 == 1 && !v12)
          {
            v30 = WebCore::eventNames((WebCore *)result) + 128;
LABEL_98:
            v60 = *(_QWORD *)(v6 + 56);
            if (v60)
            {
              v38 = *(double *)(v60 + 88);
              goto LABEL_89;
            }
LABEL_158:
            v38 = 0.0;
            goto LABEL_89;
          }
          if (v12 == 1 && v19 == 1)
          {
            v77 = *(double *)(v6 + 224);
            if (v77 == v11)
              goto LABEL_21;
            v78 = 0.0;
            v79 = 0.0;
            if (v8)
            {
              if (v77 <= v11)
                v80 = v11;
              else
                v80 = v11 + 1.0;
              v79 = *(double *)(v8 + 72) * (v80 - *(double *)(v8 + 40));
            }
            v30 = WebCore::eventNames((WebCore *)result) + 136;
            v81 = *(_QWORD *)(v6 + 56);
            if (v81)
              v78 = *(double *)(v81 + 56) + v11 * *(double *)(v81 + 72);
            v37 = v6;
            ComputedTiming.n128_f64[0] = v79;
            v38 = v78;
            goto LABEL_76;
          }
          if (v12 == 2 && v19 == 1)
          {
            v30 = WebCore::eventNames((WebCore *)result) + 128;
            goto LABEL_83;
          }
          if (v12 == 1 && v19 == 2)
          {
            v30 = WebCore::eventNames((WebCore *)result) + 144;
LABEL_101:
            v61 = *(_QWORD *)(v6 + 56);
            if (v61)
            {
              v38 = *(double *)(v61 + 56);
              goto LABEL_85;
            }
LABEL_103:
            v38 = 0.0;
            goto LABEL_85;
          }
          if (v19 != 2)
            v71 = 1;
          if (v71)
          {
            if (v12 != 3 || (v19 & 0xFE) == 2)
              goto LABEL_21;
            v30 = WebCore::eventNames((WebCore *)result) + 120;
            goto LABEL_61;
          }
          v82 = WebCore::eventNames((WebCore *)result) + 144;
          v84 = *(_QWORD *)(v6 + 56);
          a3 = 0.0;
          v85 = 0.0;
          if (v84)
            v85 = *(double *)(v84 + 56);
          v83.n128_f64[0] = v18;
          v86 = (WebCore *)WebCore::StyleOriginatedAnimation::enqueueDOMEvent(v6, v82, v83, v85);
          v30 = WebCore::eventNames(v86) + 128;
          goto LABEL_107;
        }
        v72 = WebCore::eventNames((WebCore *)result) + 144;
        v74 = *(_QWORD *)(v6 + 56);
        a3 = 0.0;
        v75 = 0.0;
        if (v74)
          v75 = *(double *)(v74 + 56);
        v73.n128_f64[0] = v17;
        v76 = (WebCore *)WebCore::StyleOriginatedAnimation::enqueueDOMEvent(v6, v72, v73, v75);
        v30 = WebCore::eventNames(v76) + 128;
LABEL_94:
        v59 = *(_QWORD *)(v6 + 56);
        if (v59)
          a3 = *(double *)(v59 + 88);
        v37 = v6;
        ComputedTiming.n128_f64[0] = v18;
        goto LABEL_62;
      }
      if (v19 == 3)
      {
        if (((v12 != 0) & ~v7) == 0)
        {
          v30 = WebCore::eventNames((WebCore *)result) + 2136;
          goto LABEL_87;
        }
        if (v12 == 1)
        {
          v39 = *(_QWORD *)(v6 + 56);
          if (v39)
            v40 = *(double *)(v39 + 56);
          else
            v40 = 0.0;
          StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          v42 = *(_QWORD *)(StatusReg + 736);
          if (!v42 || (v43 = *(_QWORD *)(v42 + 96)) == 0)
            v43 = WebCore::threadGlobalDataSlow((WebCore *)result);
          v44 = *(_QWORD *)(v43 + 40);
          if (!v44)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v43);
            v44 = *(_QWORD *)(v43 + 40);
          }
          ComputedTiming.n128_f64[0] = v17;
          v45 = (WebCore *)WebCore::StyleOriginatedAnimation::enqueueDOMEvent(v6, v44 + 2136, ComputedTiming, v40);
          v46 = *(_QWORD *)(StatusReg + 736);
          if (!v46 || (v47 = *(_QWORD *)(v46 + 96)) == 0)
            v47 = WebCore::threadGlobalDataSlow(v45);
          v48 = *(_QWORD *)(v47 + 40);
          if (!v48)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v47);
            v48 = *(_QWORD *)(v47 + 40);
          }
          v30 = v48 + 2144;
          v37 = v6;
          ComputedTiming.n128_f64[0] = v17;
          v38 = v40;
          goto LABEL_76;
        }
        if (v12 != 2)
          goto LABEL_21;
        v20 = WebCore::eventNames((WebCore *)result) + 2136;
        v22 = *(_QWORD *)(v6 + 56);
        v23 = 0.0;
        v24 = 0.0;
        if (v22)
          v24 = *(double *)(v22 + 56);
        v21.n128_f64[0] = v17;
        v25 = (WebCore *)WebCore::StyleOriginatedAnimation::enqueueDOMEvent(v6, v20, v21, v24);
        v26 = WebCore::eventNames(v25) + 2144;
        v28 = *(_QWORD *)(v6 + 56);
        if (v28)
          v23 = *(double *)(v28 + 56);
        v27.n128_f64[0] = v17;
        v29 = (WebCore *)WebCore::StyleOriginatedAnimation::enqueueDOMEvent(v6, v26, v27, v23);
        v30 = WebCore::eventNames(v29) + 2128;
      }
      else
      {
        if (*(_BYTE *)(v6 + 176))
          v31 = 1;
        else
          v31 = v19 == 0;
        v32 = !v31;
        if (v12 == 1 && (v32 & 1) == 0)
        {
          v30 = WebCore::eventNames((WebCore *)result) + 2144;
          goto LABEL_87;
        }
        if (v12 != 2)
          v32 = 1;
        if ((v32 & 1) == 0)
        {
          v54 = WebCore::eventNames((WebCore *)result) + 2144;
          v56 = *(_QWORD *)(v6 + 56);
          a3 = 0.0;
          v57 = 0.0;
          if (v56)
            v57 = *(double *)(v56 + 56);
          v55.n128_f64[0] = v17;
          v58 = (WebCore *)WebCore::StyleOriginatedAnimation::enqueueDOMEvent(v6, v54, v55, v57);
          v30 = WebCore::eventNames(v58) + 2128;
          goto LABEL_94;
        }
        if (v12 != 2 || v19 != 1)
        {
          v33 = v12 != 0;
          if (v19 == 1 && !v12)
          {
            v30 = WebCore::eventNames((WebCore *)result) + 2128;
            goto LABEL_98;
          }
          if (v12 == 1 && v19 == 2)
          {
            v30 = WebCore::eventNames((WebCore *)result) + 2144;
            goto LABEL_101;
          }
          if (v19 != 2)
            v33 = 1;
          if (v33)
          {
            if (v12 != 3 || (v19 & 0xFE) == 2)
              goto LABEL_21;
            v34 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v34 || (v35 = *(_QWORD *)(v34 + 96)) == 0)
              v35 = WebCore::threadGlobalDataSlow((WebCore *)result);
            v36 = *(_QWORD *)(v35 + 40);
            if (!v36)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v35);
              v36 = *(_QWORD *)(v35 + 40);
            }
            v30 = v36 + 2120;
LABEL_61:
            v37 = v6;
            ComputedTiming.n128_f64[0] = a3;
LABEL_62:
            v38 = a3;
LABEL_76:
            *(double *)&result = COERCE_DOUBLE(WebCore::StyleOriginatedAnimation::enqueueDOMEvent(v37, v30, ComputedTiming, v38));
            goto LABEL_21;
          }
          v62 = WebCore::eventNames((WebCore *)result) + 2144;
          v64 = *(_QWORD *)(v6 + 56);
          a3 = 0.0;
          v65 = 0.0;
          if (v64)
            v65 = *(double *)(v64 + 56);
          v63.n128_f64[0] = v18;
          v66 = (WebCore *)WebCore::StyleOriginatedAnimation::enqueueDOMEvent(v6, v62, v63, v65);
          v30 = WebCore::eventNames(v66) + 2128;
LABEL_107:
          v67 = *(_QWORD *)(v6 + 56);
          if (v67)
            a3 = *(double *)(v67 + 88);
          v37 = v6;
          ComputedTiming.n128_f64[0] = v17;
          goto LABEL_62;
        }
        v49 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v49 || (v50 = *(_QWORD *)(v49 + 96)) == 0)
          v50 = WebCore::threadGlobalDataSlow((WebCore *)result);
        v51 = *(_QWORD *)(v50 + 40);
        if (!v51)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v50);
          v51 = *(_QWORD *)(v50 + 40);
        }
        v30 = v51 + 2128;
      }
LABEL_83:
      v52 = *(_QWORD *)(v6 + 56);
      if (v52)
      {
        v38 = *(double *)(v52 + 88);
LABEL_85:
        v37 = v6;
        ComputedTiming.n128_f64[0] = v18;
        goto LABEL_76;
      }
      goto LABEL_103;
    }
  }
  return result;
}

uint64_t WebCore::StyleOriginatedAnimation::disassociateFromOwningElement(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  char v17;
  char v18;

  v1 = *(_QWORD *)(this + 184);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = this;
      if (*(_BYTE *)(this + 208))
      {
        v4 = *(_DWORD *)(this + 192);
        v5 = *(WTF::StringImpl **)(this + 200);
        if (v5)
          *(_DWORD *)v5 += 2;
        v14 = v2;
        v15 = v4;
        v16 = v5;
        v17 = 1;
      }
      else
      {
        v14 = v2;
        LOBYTE(v15) = 0;
        v17 = 0;
      }
      v18 = 1;
      WebCore::Styleable::removeStyleOriginatedAnimationFromListsForOwningElement((WebCore::Styleable *)&v14, (WebCore::WebAnimation *)this);
      if (v18)
      {
        if (v17)
        {
          v7 = v16;
          v16 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, v6);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
      }
      this = *(_QWORD *)(v3 + 184);
      *(_QWORD *)(v3 + 184) = 0;
      if (this)
      {
        do
        {
          v8 = __ldaxr((unsigned int *)this);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, (unsigned int *)this));
        if (!v9)
        {
          atomic_store(1u, (unsigned int *)this);
          v10 = *(unsigned int *)(this + 28);
          if ((_DWORD)v10)
          {
            v13 = this;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(this + 16), (WTF::StringImpl *)(*(_QWORD *)(this + 16) + 32 * v10));
            this = v13;
          }
          v11 = *(WTF **)(this + 16);
          if (v11)
          {
            *(_QWORD *)(this + 16) = 0;
            *(_DWORD *)(this + 24) = 0;
            v12 = this;
            WTF::fastFree(v11, v6);
            this = v12;
          }
          return WTF::fastFree((WTF *)this, v6);
        }
      }
    }
  }
  return this;
}

BOOL WebCore::StyleOriginatedAnimation::canHaveGlobalPosition(WebCore::StyleOriginatedAnimation *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 23);
  return (!v1 || !*(_QWORD *)(v1 + 8)) && WebCore::WebAnimation::playState(this) != 0;
}

uint64_t WebCore::StyleOriginatedAnimation::setBackingAnimation(WebCore::StyleOriginatedAnimation *this, const WebCore::Animation *a2)
{
  WebCore::Animation *v3;
  WebCore::Animation *v5;

  ++*(_DWORD *)a2;
  v3 = (WebCore::Animation *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = a2;
  v5 = v3;
  WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>::~Ref(&v5, a2);
  return (*(uint64_t (**)(WebCore::StyleOriginatedAnimation *))(*(_QWORD *)this + 352))(this);
}

uint64_t WebCore::StyleOriginatedAnimation::initialize(uint64_t a1, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  _DWORD *v12;
  WebCore::Document *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t result;
  WTF::StringImpl *v22;
  uint64_t v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  _BYTE v26[24];
  _BYTE v27[8];
  WTF::StringImpl *v28;
  char v29;
  _DWORD *v30;

  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(a1 + 32));
  WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::resolve(*(WTF::StringImpl **)(a1 + 72), (WTF::StringImpl *)a1);
  ++*(_DWORD *)(a1 + 152);
  v8 = *(_QWORD *)(a1 + 184);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  *(_DWORD *)(v9 + 24) += 2;
  v10 = bmalloc::api::isoAllocate();
  WebCore::KeyframeEffect::KeyframeEffect(v10, v9, a1 + 192);
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  ++*(_DWORD *)(v10 + 8);
  v30 = (_DWORD *)v10;
  WebCore::WebAnimation::setEffect(a1, (WebCore::ScriptExecutionContext *)&v30);
  v12 = v30;
  v30 = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) + 40) + 8);
  v14 = *((_QWORD *)v13 + 366);
  if (!v14)
  {
    v23 = WTF::fastMalloc((WTF *)0xA0);
    v14 = WebCore::DocumentTimeline::DocumentTimeline(v23, v13, 0.0);
    v24 = (_DWORD *)*((_QWORD *)v13 + 366);
    *((_QWORD *)v13 + 366) = v14;
    if (v24)
    {
      if (v24[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
        v14 = *((_QWORD *)v13 + 366);
      }
      else
      {
        --v24[2];
      }
    }
  }
  ++*(_DWORD *)(v14 + 8);
  v30 = (_DWORD *)v14;
  WebCore::WebAnimation::setTimeline((_QWORD *)a1, &v30, v11);
  v15 = v30;
  v30 = 0;
  if (v15)
  {
    if (v15[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
    else
      --v15[2];
  }
  v16 = *(_QWORD *)(v10 + 96);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 8);
    if (v17)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 112))(v17))
      {
        WebCore::KeyframeEffect::computeCSSAnimationBlendingKeyframes(v10, (int)a3, a4);
      }
      else
      {
        v18 = *(_QWORD *)(v10 + 96);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 8);
          if (v19)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 120))(v19))
              WebCore::KeyframeEffect::computeCSSTransitionBlendingKeyframes((WebCore::KeyframeEffect *)v10, a2, a3);
          }
        }
      }
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1);
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 216) + 112) & 0x30) != 0)
  {
    WebCore::WebAnimation::pause((WebCore::WebAnimation *)a1, (uint64_t)v26);
    result = WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v26, v25);
  }
  else
  {
    result = WebCore::WebAnimation::play(a1, 1, (uint64_t)v27, v20);
    if (v29)
    {
      result = (uint64_t)v28;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          result = WTF::StringImpl::destroy(v28, v22);
        else
          *(_DWORD *)v28 -= 2;
      }
    }
  }
  --*(_DWORD *)(a1 + 152);
  if (*(_DWORD *)(v10 + 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  --*(_DWORD *)(v10 + 8);
  return result;
}

_QWORD *WebCore::StyleOriginatedAnimation::setTimeline(_QWORD *a1, _QWORD *a2, __n128 a3)
{
  if (a1[8] && !*a2)
    WebCore::StyleOriginatedAnimation::cancel(a1, 0);
  return WebCore::WebAnimation::setTimeline(a1, a2, a3);
}

double WebCore::StyleOriginatedAnimation::bindingsStartTime(WebCore::StyleOriginatedAnimation *this)
{
  _QWORD *v2;
  uint64_t v3;
  double result;

  v2 = (_QWORD *)*((_QWORD *)this + 7);
  if (v2)
  {
    if ((*(unsigned int (**)(_QWORD))(*v2 + 24))(*((_QWORD *)this + 7)))
    {
      v3 = v2[33];
      if (v3)
        WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(*(_QWORD *)(v3 + 40) + 8));
    }
  }
  result = round(*((double *)this + 12) * 1000.0 * 1000.0) / 1000.0;
  if (result == 0.0)
    return 0.0;
  return result;
}

double WebCore::StyleOriginatedAnimation::bindingsCurrentTime(WebCore::StyleOriginatedAnimation *this)
{
  _QWORD *v2;
  uint64_t v3;
  double result;

  v2 = (_QWORD *)*((_QWORD *)this + 7);
  if (v2)
  {
    if ((*(unsigned int (**)(_QWORD))(*v2 + 24))(*((_QWORD *)this + 7)))
    {
      v3 = v2[33];
      if (v3)
        WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(*(_QWORD *)(v3 + 40) + 8));
    }
  }
  result = round(*((double *)this + 13) * 1000.0 * 1000.0) / 1000.0;
  if (result == 0.0)
    return 0.0;
  return result;
}

uint64_t WebCore::StyleOriginatedAnimation::bindingsPlayState(WebCore::StyleOriginatedAnimation *this)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)*((_QWORD *)this + 7);
  if (v2)
  {
    if ((*(unsigned int (**)(_QWORD))(*v2 + 24))(*((_QWORD *)this + 7)))
    {
      v3 = v2[33];
      if (v3)
        WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(*(_QWORD *)(v3 + 40) + 8));
    }
  }
  return WebCore::WebAnimation::playState(this);
}

uint64_t WebCore::StyleOriginatedAnimation::bindingsReplaceState(WebCore::StyleOriginatedAnimation *this)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)*((_QWORD *)this + 7);
  if (v2)
  {
    if ((*(unsigned int (**)(_QWORD))(*v2 + 24))(*((_QWORD *)this + 7)))
    {
      v3 = v2[33];
      if (v3)
        WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(*(_QWORD *)(v3 + 40) + 8));
    }
  }
  return *((unsigned __int8 *)this + 163);
}

BOOL WebCore::StyleOriginatedAnimation::bindingsPending(WebCore::StyleOriginatedAnimation *this)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)*((_QWORD *)this + 7);
  if (v2)
  {
    if ((*(unsigned int (**)(_QWORD))(*v2 + 24))(*((_QWORD *)this + 7)))
    {
      v3 = v2[33];
      if (v3)
        WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(*(_QWORD *)(v3 + 40) + 8));
    }
  }
  return *((_BYTE *)this + 162) || *((_BYTE *)this + 161) != 0;
}

uint64_t WebCore::StyleOriginatedAnimation::bindingsReady(WebCore::StyleOriginatedAnimation *this)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)*((_QWORD *)this + 7);
  if (v2)
  {
    if ((*(unsigned int (**)(_QWORD))(*v2 + 24))(*((_QWORD *)this + 7)))
    {
      v3 = v2[33];
      if (v3)
        WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(*(_QWORD *)(v3 + 40) + 8));
    }
  }
  return *((_QWORD *)this + 9);
}

uint64_t WebCore::StyleOriginatedAnimation::bindingsFinished(WebCore::StyleOriginatedAnimation *this)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)*((_QWORD *)this + 7);
  if (v2)
  {
    if ((*(unsigned int (**)(_QWORD))(*v2 + 24))(*((_QWORD *)this + 7)))
    {
      v3 = v2[33];
      if (v3)
        WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(*(_QWORD *)(v3 + 40) + 8));
    }
  }
  return *((_QWORD *)this + 10);
}

uint64_t WebCore::StyleOriginatedAnimation::bindingsPlay@<X0>(WebCore::StyleOriginatedAnimation *this@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  _QWORD *v5;
  uint64_t v6;

  v5 = (_QWORD *)*((_QWORD *)this + 7);
  if (v5)
  {
    if ((*(unsigned int (**)(_QWORD))(*v5 + 24))(*((_QWORD *)this + 7)))
    {
      v6 = v5[33];
      if (v6)
        WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(*(_QWORD *)(v6 + 40) + 8));
    }
  }
  return WebCore::WebAnimation::play((uint64_t)this, 1, a2, a3);
}

WebCore::WebAnimation *WebCore::StyleOriginatedAnimation::bindingsPause@<X0>(WebCore::StyleOriginatedAnimation *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)*((_QWORD *)this + 7);
  if (v4)
  {
    if ((*(unsigned int (**)(_QWORD))(*v4 + 24))(*((_QWORD *)this + 7)))
    {
      v5 = v4[33];
      if (v5)
        WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(*(_QWORD *)(v5 + 40) + 8));
    }
  }
  return WebCore::WebAnimation::pause(this, a2);
}

uint64_t WebCore::StyleOriginatedAnimation::cancel(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v13;
  double v14;
  _BYTE v15[8];
  double v16;

  v4 = a1[23];
  if (v4
    && (v5 = *(_QWORD *)(v4 + 8)) != 0
    && ((v6 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8),
         v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1),
         v8 = *(unsigned __int16 *)(v6 + 3292),
         v9 = v8 >> 15,
         v10 = (v8 >> 13) & 2,
         !v7)
      ? (v11 = v10)
      : (v11 = v9),
        v11))
  {
    v13 = a1[7];
    if (v13)
    {
      WebCore::AnimationEffect::getBasicTiming(v13, (uint64_t)v15);
      v14 = v16;
    }
    else
    {
      v14 = 0.0;
    }
    WebCore::WebAnimation::cancel((uint64_t)a1, a2);
    return WebCore::StyleOriginatedAnimation::invalidateDOMEvents((uint64_t)a1, v11, v14);
  }
  else
  {
    WebCore::WebAnimation::cancel((uint64_t)a1, a2);
    return WebCore::StyleOriginatedAnimation::invalidateDOMEvents((uint64_t)a1, 0, 0.0);
  }
}

uint64_t WebCore::StyleOriginatedAnimation::enqueueDOMEvent(uint64_t result, uint64_t a2, __n128 a3, double a4)
{
  uint64_t v4;
  double v5;
  uint64_t v7;
  double *v8;
  double v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::AnimationEventBase *v20;
  uint64_t v21;
  WebCore::AnimationEventBase *v22;
  _QWORD *v23;
  WebCore::AnimationEventBase *v24;

  v4 = *(_QWORD *)(result + 184);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = a3.n128_f64[0];
    v7 = result;
    v8 = *(double **)(result + 64);
    if (!v8
      || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v8 + 16))(*(_QWORD *)(result + 64))
      || (v10 = *(double *)(v7 + 120), v10 == 0.0)
      || a4 == INFINITY)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
    }
    else
    {
      v11 = a4 * (1.0 / v10) + *(double *)(v7 + 96) + v8[18];
      v12 = *(_QWORD *)&v11 & 0xFFFFFFFFFFFFFF00;
      v13 = LOBYTE(v11);
      v14 = 1;
    }
    v15 = round(v5 * 1000.0 * 1000.0) / 1000.0;
    a3.n128_f64[0] = v15 / 1000.0;
    if (v15 == 0.0)
      a3.n128_f64[0] = 0.0;
    (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)v7 + 360))(&v23, v7, a2, v13 | v12, v14, v7 + 192, a3);
    v16 = v23;
    v17 = *(_QWORD *)(v7 + 184);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
        *(_DWORD *)(v18 + 24) += 2;
    }
    else
    {
      v18 = 0;
    }
    v19 = v16[6];
    if (v19 == v18)
    {
      if (v18)
      {
        if ((*(_BYTE *)(v18 + 22) & 2) != 0)
        {
          if (*(_DWORD *)(v18 + 24) == 2)
          {
            if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v18);
          }
          else
          {
            *(_DWORD *)(v18 + 24) -= 2;
          }
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 96))(v18);
        }
      }
    }
    else
    {
      v16[6] = v18;
      if (v19)
      {
        if ((*(_BYTE *)(v19 + 22) & 2) != 0)
        {
          if (*(_DWORD *)(v19 + 24) == 2)
          {
            if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v19);
          }
          else
          {
            *(_DWORD *)(v19 + 24) -= 2;
          }
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 96))(v19);
        }
        v18 = v16[6];
      }
      if (v18)
        (*(void (**)(_QWORD *))(*v16 + 176))(v16);
    }
    v20 = (WebCore::AnimationEventBase *)v23;
    v23 = 0;
    v21 = *(_QWORD *)(v7 + 64);
    if (v21 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v21 + 16))(*(_QWORD *)(v7 + 64)) & 1) != 0)
    {
      *(_BYTE *)(v7 + 160) = 1;
      WebCore::DocumentTimeline::enqueueAnimationEvent(v21, v20);
      if (*((_DWORD *)v20 + 4) == 1)
        (*(void (**)(WebCore::AnimationEventBase *))(*(_QWORD *)v20 + 8))(v20);
      else
        --*((_DWORD *)v20 + 4);
    }
    else
    {
      v24 = v20;
      WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)(v7 + 32), v7, 0, (uint64_t *)&v24);
      v22 = v24;
      v24 = 0;
      if (v22)
      {
        if (*((_DWORD *)v22 + 4) == 1)
          (*(void (**)(WebCore::AnimationEventBase *))(*(_QWORD *)v22 + 8))(v22);
        else
          --*((_DWORD *)v22 + 4);
      }
    }
    result = (uint64_t)v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 16) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 16);
    }
  }
  return result;
}

uint64_t WebCore::StyleOriginatedAnimationEvent::StyleOriginatedAnimationEvent(uint64_t a1, char a2, _QWORD *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, double a8)
{
  uint64_t v16;
  _BOOL4 v17;
  unsigned int v18;
  _DWORD *v19;
  _DWORD *v20;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *a3 != 0;
  v18 = *(_DWORD *)(a1 + 20) & 0xFFC00000 | 0x202;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = v17 & 0xFFC07FFF | ((a2 & 0x7F) << 15) | v18;
  v19 = (_DWORD *)*a3;
  if (*a3)
    *v19 += 2;
  *(_QWORD *)(a1 + 24) = v19;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v16;
  *(_QWORD *)(a1 + 64) = 0;
  if (a4)
    ++*(_DWORD *)(a4 + 24);
  *(_QWORD *)(a1 + 72) = a4;
  if (!a6)
    a5 = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 80) = a5;
  *(_QWORD *)a1 = off_1E33918C8;
  *(double *)(a1 + 88) = a8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*(_BYTE *)(a7 + 16))
  {
    *(_DWORD *)(a1 + 104) = *(_DWORD *)a7;
    v20 = *(_DWORD **)(a7 + 8);
    if (v20)
      *v20 += 2;
    *(_QWORD *)(a1 + 112) = v20;
    *(_BYTE *)(a1 + 120) = 1;
  }
  return a1;
}

uint64_t WebCore::StyleOriginatedAnimationEvent::StyleOriginatedAnimationEvent(uint64_t a1, char a2, _QWORD *a3, unsigned __int8 *a4, int a5, WTF::StringImpl *a6, double a7)
{
  int16x8_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  _DWORD *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  BOOL v23;
  char v24;
  int v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  char v29;
  WTF::StringImpl *v30;
  _BYTE v32[8];
  int v33;
  WTF::StringImpl *v34;
  char v35;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v15 = *a4;
  v16 = a4[1];
  v17 = a4[2];
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  if (a5)
    v18 = 512;
  else
    v18 = 0;
  v19 = v18 & 0xFFC07FFF | ((a2 & 0x7F) << 15) | (2 * v15) | (4 * v16) | (8 * v17) | (*a3 != 0) | *(_DWORD *)(a1 + 20) & 0xFFC00000;
  *(_DWORD *)(a1 + 20) = v19;
  v20 = (_DWORD *)*a3;
  if (*a3)
  {
    *v20 += 2;
    v19 = *(_DWORD *)(a1 + 20);
  }
  *(_QWORD *)(a1 + 24) = v20;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v14.i64[0];
  *(_DWORD *)(a1 + 20) = v19 | 0x4000;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0x7FF8000000000000;
  *(_QWORD *)a1 = off_1E33918C8;
  *(double *)(a1 + 88) = a7;
  v21 = *(_DWORD **)a6;
  if (*(_QWORD *)a6)
    *v21 += 2;
  *(_QWORD *)(a1 + 96) = v21;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  WebCore::pseudoElementIdentifierFromString((unsigned int **)(a1 + 96), 0, v32, v14);
  if (v32[0])
    v23 = v35 == 0;
  else
    v23 = 1;
  v24 = v23;
  if (v23)
  {
    v25 = 0;
    v26 = 0;
  }
  else
  {
    v26 = v33;
    a6 = v34;
    if (v34)
      *(_DWORD *)v34 += 2;
    v25 = 1;
  }
  if (*(unsigned __int8 *)(a1 + 120) != v25)
  {
    if (!*(_BYTE *)(a1 + 120))
    {
      *(_DWORD *)(a1 + 104) = v26;
      *(_QWORD *)(a1 + 112) = a6;
      *(_BYTE *)(a1 + 120) = 1;
      goto LABEL_39;
    }
    v28 = *(WTF::StringImpl **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v22);
      else
        *(_DWORD *)v28 -= 2;
    }
    *(_BYTE *)(a1 + 120) = 0;
    goto LABEL_30;
  }
  if (!*(_BYTE *)(a1 + 120))
  {
LABEL_30:
    if (a6)
      v29 = v24;
    else
      v29 = 1;
    if ((v29 & 1) != 0)
      goto LABEL_39;
    if (*(_DWORD *)a6 != 2)
    {
      *(_DWORD *)a6 -= 2;
      goto LABEL_39;
    }
    v27 = a6;
    goto LABEL_38;
  }
  *(_DWORD *)(a1 + 104) = v26;
  v27 = *(WTF::StringImpl **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = a6;
  if (v27)
  {
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      goto LABEL_39;
    }
LABEL_38:
    WTF::StringImpl::destroy(v27, v22);
  }
LABEL_39:
  if (v35)
  {
    v30 = v34;
    v34 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v22);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  return a1;
}

void WebCore::StyleOriginatedAnimationEvent::~StyleOriginatedAnimationEvent(WebCore::StyleOriginatedAnimationEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  *(_QWORD *)this = off_1E33918C8;
  if (*((_BYTE *)this + 120))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E338C6C0;
  v5 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 72))(v5);
    else
      --v5[6];
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  *(_QWORD *)this = off_1E33918C8;
  if (*((_BYTE *)this + 120))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E338C6C0;
  v5 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 72))(v5);
    else
      --v5[6];
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;

  *(_QWORD *)this = off_1E33918C8;
  if (*((_BYTE *)this + 120))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E338C6C0;
  v5 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 72))(v5);
    else
      --v5[6];
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

void WebCore::KeyframeEffect::~KeyframeEffect(WebCore::KeyframeEffect *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::KeyframeEffect::~KeyframeEffect(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;
  WebCore::KeyframeEffect::ComputedKeyframe *v30;
  WebCore::KeyframeEffect::ComputedKeyframe *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD **v36;
  _DWORD *v37;
  WTF *v38;
  uint64_t v40;
  char v41;
  char *v42;

  v3 = (unsigned int *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  if (*((_BYTE *)this + 288))
  {
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 35);
    *((_QWORD *)this + 35) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  v7 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = (WTF *)*((_QWORD *)this + 31);
  if (v8)
  {
    *((_QWORD *)this + 31) = 0;
    *((_DWORD *)this + 64) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((unsigned int *)this + 61);
  if ((_DWORD)v9)
  {
    v30 = (WebCore::KeyframeEffect::ComputedKeyframe *)*((_QWORD *)this + 29);
    v31 = (WebCore::KeyframeEffect::ComputedKeyframe *)((char *)v30 + 64 * v9);
    do
    {
      v32 = *((_QWORD *)v30 + 7);
      *((_QWORD *)v30 + 7) = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 1)
        {
          v34 = *(unsigned int *)(v32 + 28);
          if ((_DWORD)v34)
          {
            v35 = 16 * v34;
            v36 = (_DWORD **)(*(_QWORD *)(v32 + 16) + 8);
            do
            {
              v37 = *v36;
              *v36 = 0;
              if (v37)
              {
                if (*v37 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v37, (WTF::StringImpl *)a2);
                else
                  *v37 -= 2;
              }
              v36 += 2;
              v35 -= 16;
            }
            while (v35);
          }
          v38 = *(WTF **)(v32 + 16);
          if ((WTF *)(v32 + 32) != v38 && v38 != 0)
          {
            *(_QWORD *)(v32 + 16) = 0;
            *(_DWORD *)(v32 + 24) = 0;
            WTF::fastFree(v38, a2);
          }
          v40 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v40)
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
          WTF::fastFree((WTF *)v32, a2);
        }
        else
        {
          --*(_DWORD *)v32;
        }
      }
      v33 = (_DWORD *)*((_QWORD *)v30 + 6);
      *((_QWORD *)v30 + 6) = 0;
      if (v33)
      {
        if (v33[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 16))(v33);
        else
          --v33[2];
      }
      WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe(v30, (WTF::StringImpl *)a2);
      v30 = (WebCore::KeyframeEffect::ComputedKeyframe *)((char *)v30 + 64);
    }
    while (v30 != v31);
  }
  v10 = (WTF *)*((_QWORD *)this + 29);
  if (v10)
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = *((_QWORD *)this + 28);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v12)
    {
      v13 = *((_QWORD *)this + 28);
      do
      {
        v14 = *(unsigned int *)(v13 + 8);
        if ((_DWORD)v14 == -1)
          goto LABEL_87;
        v42 = &v41;
        if ((((uint64_t (*)(char **, uint64_t))off_1E3391998[v14])(&v42, v13) & 1) == 0)
        {
          v15 = *(unsigned int *)(v13 + 8);
          if ((_DWORD)v15 != -1)
            ((void (*)(char **, uint64_t))off_1E33919E8[v15])(&v42, v13);
          *(_DWORD *)(v13 + 8) = -1;
        }
        v13 += 16;
      }
      while (--v12);
    }
    WTF::fastFree((WTF *)(v11 - 16), a2);
  }
  v16 = *((_QWORD *)this + 27);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v13 = *((_QWORD *)this + 27);
      do
      {
        v18 = *(unsigned int *)(v13 + 8);
        if ((_DWORD)v18 == -1)
          goto LABEL_87;
        v42 = &v41;
        if ((((uint64_t (*)(char **, uint64_t))off_1E3391998[v18])(&v42, v13) & 1) == 0)
        {
          v19 = *(unsigned int *)(v13 + 8);
          if ((_DWORD)v19 != -1)
            ((void (*)(char **, uint64_t))off_1E33919E8[v19])(&v42, v13);
          *(_DWORD *)(v13 + 8) = -1;
        }
        v13 += 16;
      }
      while (--v17);
    }
    WTF::fastFree((WTF *)(v16 - 16), a2);
  }
  v20 = *((_QWORD *)this + 26);
  if (v20)
  {
    v21 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v21)
    {
      v13 = *((_QWORD *)this + 26);
      while (1)
      {
        v22 = *(unsigned int *)(v13 + 8);
        if ((_DWORD)v22 == -1)
          break;
        v42 = &v41;
        if ((((uint64_t (*)(char **, uint64_t))off_1E3391998[v22])(&v42, v13) & 1) == 0)
        {
          v23 = *(unsigned int *)(v13 + 8);
          if ((_DWORD)v23 != -1)
            ((void (*)(char **, uint64_t))off_1E33919E8[v23])(&v42, v13);
          *(_DWORD *)(v13 + 8) = -1;
        }
        v13 += 16;
        if (!--v21)
          goto LABEL_46;
      }
LABEL_87:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_88;
    }
LABEL_46:
    WTF::fastFree((WTF *)(v20 - 16), a2);
  }
  WebCore::BlendingKeyframes::~BlendingKeyframes((WebCore::KeyframeEffect *)((char *)this + 136), a2);
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  v13 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v13)
  {
    do
    {
      v26 = __ldaxr((unsigned int *)v13);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, (unsigned int *)v13));
    if (!v27)
    {
      atomic_store(1u, (unsigned int *)v13);
      v28 = *(unsigned int *)(v13 + 28);
      if (!(_DWORD)v28)
      {
LABEL_59:
        v29 = *(WTF **)(v13 + 16);
        if (v29)
        {
          *(_QWORD *)(v13 + 16) = 0;
          *(_DWORD *)(v13 + 24) = 0;
          WTF::fastFree(v29, v24);
        }
        WTF::fastFree((WTF *)v13, v24);
        goto LABEL_53;
      }
LABEL_88:
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v13 + 16), (WTF::StringImpl *)(*(_QWORD *)(v13 + 16) + 32 * v28));
      goto LABEL_59;
    }
  }
LABEL_53:
  WebCore::AnimationEffect::~AnimationEffect(this, v24);
}

uint64_t WebCore::KeyframeEffect::compositeOperation(WebCore::KeyframeEffect *this)
{
  return *((unsigned __int8 *)this + 307);
}

uint64_t WebCore::KeyframeEffect::iterationCompositeOperation(WebCore::KeyframeEffect *this)
{
  return *((unsigned __int8 *)this + 306);
}

uint64_t WebCore::KeyframeEffect::numberOfKeyframes(WebCore::KeyframeEffect *this)
{
  return *((unsigned int *)this + 39);
}

void `non-virtual thunk to'WebCore::KeyframeEffect::~KeyframeEffect(WebCore::KeyframeEffect *this, void *a2)
{
  WebCore::KeyframeEffect::~KeyframeEffect((WebCore::KeyframeEffect *)((char *)this - 104), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::KeyframeEffect::~KeyframeEffect((WebCore::KeyframeEffect *)((char *)this - 104), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::KeyframeEffect::~KeyframeEffect((WebCore::KeyframeEffect *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::KeyframeEffect::~KeyframeEffect((WebCore::KeyframeEffect *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::ScrollTimeline::~ScrollTimeline(WebCore::ScrollTimeline *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E3391D80;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v7 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v7)
      {
        v10 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v7));
        v4 = v10;
      }
      v8 = *(WTF **)(v4 + 16);
      if (v8)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v9 = v4;
        WTF::fastFree(v8, a2);
        v4 = v9;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::AnimationTimeline::~AnimationTimeline(this, a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3391D80;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v9 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v9)
      {
        v12 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v9));
        v4 = v12;
      }
      v10 = *(WTF **)(v4 + 16);
      if (v10)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v11 = v4;
        WTF::fastFree(v10, a2);
        v4 = v11;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::AnimationTimeline::~AnimationTimeline(this, a2);
  WTF::fastFree(v7, v8);
}

uint64_t WebCore::ScrollTimeline::isScrollTimeline(WebCore::ScrollTimeline *this)
{
  return 1;
}

double WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::~HashTable(uint64_t *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  _QWORD *v10;
  double *v11;
  char v12;
  char *v13;
  char v14;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = *a1;
      while (1)
      {
        v5 = *(unsigned int *)(v4 + 8);
        if ((_DWORD)v5 == -1)
          break;
        v13 = &v12;
        if ((((uint64_t (*)(char **, uint64_t))off_1E3391998[v5])(&v13, v4) & 1) == 0)
        {
          v6 = *(_DWORD **)(v4 + 16);
          *(_QWORD *)(v4 + 16) = 0;
          if (v6)
          {
            if (v6[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
            else
              --v6[6];
          }
          v7 = *(unsigned int *)(v4 + 8);
          if ((_DWORD)v7 != -1)
            ((void (*)(char *, uint64_t))off_1E33919E8[v7])(&v14, v4);
          *(_DWORD *)(v4 + 8) = -1;
        }
        v4 += 24;
        if (!--v3)
          goto LABEL_14;
      }
      v9 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN7WebCore21KeyframeEffectOptionsEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEERKSR_EEEDcSJ_DpT0_(v9, v10, v11);
    }
    else
    {
LABEL_14:
      WTF::fastFree((WTF *)(v2 - 16), a2);
    }
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN7WebCore21KeyframeEffectOptionsEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEERKSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN7WebCore21KeyframeEffectOptionsEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEERKSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  _DWORD *v8;
  _DWORD *v9;
  char v10;

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 8) = -1;
  v5 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E33919D8[v5])(&v10, a2, a3);
    *(_DWORD *)(a2 + 8) = v5;
  }
  v7 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v7;
  v8 = *(_DWORD **)(a3 + 48);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(a2 + 48) = v8;
  *(_WORD *)(a2 + 56) = *(_WORD *)(a3 + 56);
  *(_WORD *)(a2 + 58) = *(_WORD *)(a3 + 58);
  v9 = *(_DWORD **)(a3 + 64);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(a2 + 64) = v9;
  return result;
}

uint64_t std::__optional_storage_base<WebCore::Style::PseudoElementIdentifier,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Style::PseudoElementIdentifier,false> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;

  v2 = result;
  if (*(unsigned __int8 *)(result + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*(_BYTE *)(result + 16))
    {
      *(_DWORD *)result = *(_DWORD *)a2;
      v3 = *(_DWORD **)(a2 + 8);
      if (v3)
        *v3 += 2;
      result = *(_QWORD *)(result + 8);
      *(_QWORD *)(v2 + 8) = v3;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else if (*(_BYTE *)(result + 16))
  {
    result = *(_QWORD *)(result + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v2 + 16) = 0;
  }
  else
  {
    *(_DWORD *)result = *(_DWORD *)a2;
    v4 = *(_DWORD **)(a2 + 8);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(result + 8) = v4;
    *(_BYTE *)(result + 16) = 1;
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable(uint64_t *a1, unsigned __int16 **a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _WORD *v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unsigned __int16 *v31;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *((unsigned int *)*a2 - 3);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_8;
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    v8 = (double)v3;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v8 = (double)v3;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_9:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastZeroedMalloc((WTF *)(16 * v11 + 16));
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v14 = *a2;
  if (*a2)
  {
    v15 = *((unsigned int *)v14 - 1);
    v16 = &v14[8 * v15];
    if (*((_DWORD *)v14 - 3))
    {
      v17 = v14;
      if ((_DWORD)v15)
      {
        v18 = 16 * v15;
        v17 = v14;
        while ((unsigned __int16)(*v17 + 1) <= 1u)
        {
          v17 += 8;
          v18 -= 16;
          if (!v18)
          {
            v17 = v16;
            goto LABEL_24;
          }
        }
      }
      goto LABEL_24;
    }
    v17 = &v14[8 * v15];
  }
  else
  {
    v17 = 0;
    v15 = 0;
  }
  v16 = &v14[8 * v15];
LABEL_24:
  if (v14)
    v19 = &v14[8 * *((unsigned int *)v14 - 1)];
  else
    v19 = 0;
  while (v17 != v19)
  {
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v22 = 0;
    v23 = *v17;
    v24 = 9 * ((~(v23 << 15) + v23) ^ ((~(v23 << 15) + v23) >> 10));
    v25 = ((v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11)) ^ (((v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11)) >> 16);
    do
    {
      v26 = v25 & v21;
      v25 = ++v22 + v26;
    }
    while (*(_WORD *)(v20 + 16 * v26));
    v27 = (_WORD *)(v20 + 16 * v26);
    *v27 = v23;
    v28 = (WTF::StringImpl **)(v27 + 4);
    v29 = (WTF::StringImpl *)*((_QWORD *)v17 + 1);
    if (v29)
      *(_DWORD *)v29 += 2;
    v30 = *v28;
    *v28 = v29;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v13);
      else
        *(_DWORD *)v30 -= 2;
    }
    v31 = v17 + 8;
    v17 = v16;
    if (v31 != v16)
    {
      v17 = v31;
      while ((unsigned __int16)(*v17 + 1) <= 1u)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = v16;
          break;
        }
      }
    }
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::operator=(uint64_t *a1, _QWORD *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v10;

  WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(&v10, a2);
  v4 = *a1;
  *a1 = v10;
  v10 = v4;
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = (WTF::StringImpl **)v4;
      do
      {
        v7 = *v6;
        if (*v6 != (WTF::StringImpl *)-1)
        {
          v8 = v6[1];
          v6[1] = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
            {
              WTF::StringImpl::destroy(v8, v3);
              v7 = *v6;
            }
            else
            {
              *(_DWORD *)v8 -= 2;
            }
          }
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, v3);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  _QWORD *v29;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_8;
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    v8 = (double)v3;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v8 = (double)v3;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_9:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastZeroedMalloc((WTF *)(16 * v11 + 16));
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v14 = (_QWORD *)*a2;
  if (*a2)
  {
    v15 = *((unsigned int *)v14 - 1);
    v16 = &v14[2 * v15];
    if (*((_DWORD *)v14 - 3))
    {
      v17 = v14;
      if ((_DWORD)v15)
      {
        v18 = 16 * v15;
        v17 = v14;
        while ((unint64_t)(*v17 + 1) <= 1)
        {
          v17 += 2;
          v18 -= 16;
          if (!v18)
          {
            v17 = v16;
            break;
          }
        }
      }
      if (v14)
        goto LABEL_22;
      goto LABEL_26;
    }
    v17 = &v14[2 * v15];
  }
  else
  {
    v17 = 0;
    v15 = 0;
  }
  v16 = &v14[2 * v15];
  if (v14)
  {
LABEL_22:
    v19 = &v14[2 * *((unsigned int *)v14 - 1)];
    goto LABEL_27;
  }
LABEL_26:
  v19 = 0;
LABEL_27:
  while (v17 != v19)
  {
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v22 = 0;
    v23 = (_DWORD *)*v17;
    v24 = *(_DWORD *)(*v17 + 16) >> 8;
    do
    {
      v25 = v24 & v21;
      v24 = ++v22 + v25;
    }
    while (*(_QWORD *)(v20 + 16 * v25));
    if (v23)
      *v23 += 2;
    v26 = (_QWORD *)(v20 + 16 * v25);
    *v26 = v23;
    v27 = (_DWORD *)v17[1];
    if (v27)
      *v27 += 2;
    v28 = (WTF::StringImpl *)v26[1];
    v26[1] = v27;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v13);
      else
        *(_DWORD *)v28 -= 2;
    }
    v29 = v17 + 2;
    v17 = v16;
    if (v29 != v16)
    {
      v17 = v29;
      while ((unint64_t)(*v17 + 1) <= 1)
      {
        v17 += 2;
        if (v17 == v16)
        {
          v17 = v16;
          break;
        }
      }
    }
  }
  return a1;
}

void WebCore::processIterableKeyframes(JSC::JSGlobalObject &,WebCore::Document &,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> &&,JSC::JSValue,WTF::Vector<WebCore::KeyframeEffect::ParsedKeyframe,0ul,JSC::JSValue::CrashOnOverflow,16ul,JSC::JSValue::FastMalloc> &)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> &&)#1}::operator()(_QWORD *a1, JSC::JSGlobalObject *a2, uint64_t a3, JSC *a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  int v32;
  int v33;
  int v34;
  WTF *v35;
  WTF::StringImpl *v36;
  const WebCore::CSSParserContext *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WebCore::MutableStyleProperties *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  __n128 v49;
  WTF::StringImpl *v50;
  __int16 v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  __int128 v59;
  WTF::StringImpl *v60;
  __int16 v61;
  _BOOL4 v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  _DWORD *v73;
  uint64_t v74;
  WTF *v75;
  WTF *v76;
  _DWORD *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD **v81;
  _DWORD *v82;
  WTF *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD **v88;
  _DWORD *v89;
  WTF *v90;
  uint64_t v92;
  _QWORD *v93;
  WTF::StringImpl *v94;
  __int128 v95;
  __int128 v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  __int16 v99;
  _BYTE v100[24];
  WTF::StringImpl *v101;
  __int128 v102;
  __n128 v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  __int16 v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  __int16 v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  char v112;
  uint64_t v113;
  unsigned __int16 *v114;
  uint64_t v115;
  _DWORD *v116;
  WTF *v117;
  JSC::JSCell **v118[2];
  int v119;
  _QWORD v120[2];
  int v121;
  _BYTE v122[16];
  int v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  _DWORD *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int16 *v130;
  uint64_t v131;
  _DWORD *v132;
  _DWORD *v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v10 = a5 & 0xFFFE000000000002;
  if ((a5 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    if (v10)
      goto LABEL_16;
  }
  else if (v10 || *(unsigned __int8 *)(a5 + 5) <= 0x16u)
  {
    JSC::createTypeError(a4, a2);
    JSC::Exception::create();
    JSC::VM::throwException();
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    return;
  }
  if (*(unsigned __int8 *)(a5 + 5) <= 0x16u)
  {
LABEL_16:
    v20 = *(_QWORD *)a2;
    v126 = 0x7FF8000000000000;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v128) = 3;
    v131 = 0;
    v132 = 0;
    v130 = 0;
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
    *v21 = 0x900000001;
    v21[1] = 0;
    v21[2] = v21 + 4;
    v21[3] = 4;
    v133 = v21;
    v22 = *(unsigned int *)(v20 + 12);
    if ((_DWORD)v22 == *(_DWORD *)(v20 + 8))
    {
      WTF::Vector<WebCore::KeyframeEffect::ParsedKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::KeyframeEffect::ParsedKeyframe>(v20, (unint64_t)&v126);
    }
    else
    {
      v24 = *(_QWORD *)v20;
      v25 = *(_QWORD *)v20 + (v22 << 6);
      *(_QWORD *)v25 = v126;
      v26 = v127;
      if (v127)
        *v127 += 2;
      *(_QWORD *)(v25 + 8) = v26;
      *(_BYTE *)(v25 + 16) = v128;
      *(_QWORD *)(v25 + 24) = v129;
      WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable((uint64_t *)(v25 + 32), &v130);
      WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable((uint64_t *)(v25 + 40), &v131);
      v27 = v132;
      if (v132)
        ++v132[2];
      v28 = v24 + (v22 << 6);
      *(_QWORD *)(v28 + 48) = v27;
      v29 = v133;
      ++*v133;
      *(_QWORD *)(v28 + 56) = v29;
      ++*(_DWORD *)(v20 + 12);
    }
    v30 = v133;
    v133 = 0;
    if (v30)
    {
      if (*v30 == 1)
      {
        v79 = v30[7];
        if ((_DWORD)v79)
        {
          v80 = 16 * v79;
          v81 = (_DWORD **)(*((_QWORD *)v30 + 2) + 8);
          do
          {
            v82 = *v81;
            *v81 = 0;
            if (v82)
            {
              if (*v82 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v82, v23);
              else
                *v82 -= 2;
            }
            v81 += 2;
            v80 -= 16;
          }
          while (v80);
        }
        v83 = (WTF *)*((_QWORD *)v30 + 2);
        if (v30 + 8 != (_DWORD *)v83 && v83 != 0)
        {
          *((_QWORD *)v30 + 2) = 0;
          v30[6] = 0;
          WTF::fastFree(v83, v23);
        }
        v85 = *((_QWORD *)v30 + 1);
        *((_QWORD *)v30 + 1) = 0;
        if (v85)
          (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
        WTF::fastFree((WTF *)v30, v23);
      }
      else
      {
        --*v30;
      }
    }
    v31 = v132;
    v132 = 0;
    if (v31)
    {
      if (v31[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 16))(v31);
      else
        --v31[2];
    }
    WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe((WebCore::KeyframeEffect::ComputedKeyframe *)&v126, v23);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  v11 = *((_QWORD *)a2 + 1);
  v12 = *(_QWORD *)(a3 + 712);
  if (!v12)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(a3 + 672));
    v12 = *(_QWORD *)(a3 + 712);
  }
  *(_QWORD *)(a3 + 712) = *(_QWORD *)v12;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v118[0] = (JSC::JSCell **)(v12 + 16);
  if (a5)
  {
    v13 = *(_QWORD **)((v12 & 0xFFFFFFFFFFFFF000) + 0x10);
    v14 = v13[3];
    v13 += 3;
    *(_QWORD *)v12 = v14;
    *(_QWORD *)(v12 + 8) = v13;
    *v13 = v12;
    *(_QWORD *)(v14 + 8) = v12;
  }
  *(_QWORD *)(v12 + 16) = a5;
  WebCore::processKeyframeLikeObject((uint64_t)&v126, a4, v11, v118, 0);
  v15 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF000) + 0x10);
  v16 = *(_QWORD **)(v12 + 8);
  if (v16)
  {
    v17 = *(_QWORD *)v12;
    *v16 = *(_QWORD *)v12;
    *(_QWORD *)(v17 + 8) = v16;
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(v12 + 8) = 0;
  }
  *(_QWORD *)v12 = *(_QWORD *)(v15 + 40);
  *(_QWORD *)(v15 + 40) = v12;
  if (v136)
  {
    if (v136 == 1)
    {
      v18 = v128;
      v128 = 0;
      *(_BYTE *)a1 = (_BYTE)v127;
      a1[1] = v18;
      v19 = 1;
      *((_BYTE *)a1 + 16) = 1;
LABEL_114:
      ((void (*)(JSC::JSCell ***, _DWORD **))off_1E3391B90[v19])(v118, &v127);
      return;
    }
    goto LABEL_149;
  }
  LOBYTE(v118[0]) = 0;
  v119 = -1;
  v32 = v129;
  if ((_DWORD)v129 != -1)
  {
    ((void (*)(uint64_t *, JSC::JSCell ***, _DWORD **))off_1E3391B58[v129])(&v110, v118, &v127);
    v119 = v32;
  }
  LOBYTE(v120[0]) = 0;
  v121 = -1;
  v33 = (int)v132;
  if ((_DWORD)v132 != -1)
  {
    ((void (*)(uint64_t *, _QWORD *, unsigned __int16 **))off_1E3391B70[v132])(&v110, v120, &v130);
    v121 = v33;
  }
  v122[0] = 0;
  v123 = -1;
  v34 = v134;
  if (v134 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, _DWORD **))off_1E3391B80[v134])(&v110, v122, &v133);
    v123 = v34;
  }
  WTF::Vector<WebCore::KeyframeEffect::PropertyAndValues,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v124, &v135);
  v110 = 0x7FF8000000000000;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v112 = 3;
  v115 = 0;
  v116 = 0;
  v114 = 0;
  v35 = (WTF *)WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v35 = 0x900000001;
  *((_QWORD *)v35 + 1) = 0;
  *((_QWORD *)v35 + 2) = (char *)v35 + 32;
  *((_QWORD *)v35 + 3) = 4;
  v117 = v35;
  if (v119 == 2)
    v110 = (uint64_t)v118[0];
  if (v121 != 1)
    goto LABEL_149;
  v38 = (WTF::StringImpl *)v120[0];
  if (v120[0])
    *(_DWORD *)v120[0] += 2;
  v93 = a1;
  v39 = v111;
  v111 = v38;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v36);
    else
      *(_DWORD *)v39 -= 2;
  }
  if (v123 != 1)
  {
LABEL_149:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_150:
    __break(0xC471u);
    return;
  }
  v112 = v122[0];
  if (v125)
  {
    v40 = v124 + 32 * v125;
    v41 = v124 + 8;
    do
    {
      v43 = v41 - 8;
      v42 = *(unsigned __int16 *)(v41 - 8);
      v109 = *(_WORD *)(v41 - 8);
      if (!*(_DWORD *)(v41 + 20))
        goto LABEL_150;
      v44 = **(WTF::StringImpl ***)(v41 + 8);
      if (v44)
        *(_DWORD *)v44 += 2;
      v108 = v44;
      if ((_DWORD)v42 == 1)
      {
        v45 = *(WTF::StringImpl **)v41;
        if (*(_QWORD *)v41)
          *(_DWORD *)v45 += 2;
        v107 = v45;
        v46 = v117;
        v47 = *((_QWORD *)a2 + 2);
        v48 = *(WTF::StringImpl **)v47;
        if (*(_QWORD *)v47)
          *(_DWORD *)v48 += 2;
        v101 = v48;
        v49 = *(__n128 *)(v47 + 24);
        v102 = *(_OWORD *)(v47 + 8);
        v103 = v49;
        v50 = *(WTF::StringImpl **)(v47 + 40);
        if (v50)
          *(_DWORD *)v50 += 2;
        v104 = v50;
        v51 = *(_WORD *)(v47 + 56);
        v105 = *(_QWORD *)(v47 + 48);
        v106 = v51;
        v53 = WebCore::MutableStyleProperties::setCustomProperty(v46, (const WTF::String *)&v107, (const WTF::AtomString *)&v108, 0, (uint64_t)&v101, v37, v49);
        v54 = v104;
        v104 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v52);
          else
            *(_DWORD *)v54 -= 2;
        }
        v55 = v101;
        v101 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 != 2)
          {
            *(_DWORD *)v55 -= 2;
            goto LABEL_64;
          }
          WTF::StringImpl::destroy(v55, v52);
          if (!v53)
          {
LABEL_66:
            if (v45)
            {
              if (*(_DWORD *)v45 == 2)
                WTF::StringImpl::destroy(v45, v52);
              else
                *(_DWORD *)v45 -= 2;
            }
            goto LABEL_81;
          }
        }
        else
        {
LABEL_64:
          if (!v53)
            goto LABEL_66;
        }
        WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::String&>((uint64_t)v100, &v115, &v107, &v108);
        goto LABEL_66;
      }
      v56 = v117;
      v57 = *((_QWORD *)a2 + 2);
      v58 = *(WTF::StringImpl **)v57;
      if (*(_QWORD *)v57)
        *(_DWORD *)v58 += 2;
      v94 = v58;
      v59 = *(_OWORD *)(v57 + 24);
      v95 = *(_OWORD *)(v57 + 8);
      v96 = v59;
      v60 = *(WTF::StringImpl **)(v57 + 40);
      if (v60)
        *(_DWORD *)v60 += 2;
      v97 = v60;
      v61 = *(_WORD *)(v57 + 56);
      v98 = *(_QWORD *)(v57 + 48);
      v99 = v61;
      v62 = WebCore::MutableStyleProperties::setProperty((uint64_t)v56, v42, (uint64_t)&v108, 0, (uint64_t)&v94, 0);
      v63 = v97;
      v97 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
          WTF::StringImpl::destroy(v63, v52);
        else
          *(_DWORD *)v63 -= 2;
      }
      v64 = v94;
      v94 = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
        {
          WTF::StringImpl::destroy(v64, v52);
          if (!v62)
            goto LABEL_81;
LABEL_80:
          WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WebCore::CSSPropertyID const&,WTF::String&>((uint64_t)v100, (uint64_t *)&v114, &v109, (_DWORD **)&v108);
          goto LABEL_81;
        }
        *(_DWORD *)v64 -= 2;
      }
      if (v62)
        goto LABEL_80;
LABEL_81:
      v65 = v108;
      v108 = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2)
          WTF::StringImpl::destroy(v65, v52);
        else
          *(_DWORD *)v65 -= 2;
      }
      v41 += 32;
    }
    while (v43 + 32 != v40);
  }
  v66 = *(_QWORD *)a2;
  v67 = *(unsigned int *)(v66 + 12);
  if ((_DWORD)v67 == *(_DWORD *)(v66 + 8))
  {
    WTF::Vector<WebCore::KeyframeEffect::ParsedKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::KeyframeEffect::ParsedKeyframe>(v66, (unint64_t)&v110);
    v69 = v93;
  }
  else
  {
    v70 = *(_QWORD *)v66;
    v71 = *(_QWORD *)v66 + (v67 << 6);
    *(_QWORD *)v71 = v110;
    v72 = v111;
    v69 = v93;
    if (v111)
      *(_DWORD *)v111 += 2;
    *(_QWORD *)(v71 + 8) = v72;
    *(_BYTE *)(v71 + 16) = v112;
    *(_QWORD *)(v71 + 24) = v113;
    WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable((uint64_t *)(v71 + 32), &v114);
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable((uint64_t *)(v71 + 40), &v115);
    v73 = v116;
    if (v116)
      ++v116[2];
    v74 = v70 + (v67 << 6);
    *(_QWORD *)(v74 + 48) = v73;
    v75 = v117;
    ++*(_DWORD *)v117;
    *(_QWORD *)(v74 + 56) = v75;
    ++*(_DWORD *)(v66 + 12);
  }
  *v69 = 0;
  v69[1] = 0;
  v69[2] = 0;
  v76 = v117;
  v117 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 1)
    {
      v86 = *((unsigned int *)v76 + 7);
      if ((_DWORD)v86)
      {
        v87 = 16 * v86;
        v88 = (_DWORD **)(*((_QWORD *)v76 + 2) + 8);
        do
        {
          v89 = *v88;
          *v88 = 0;
          if (v89)
          {
            if (*v89 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v89, v68);
            else
              *v89 -= 2;
          }
          v88 += 2;
          v87 -= 16;
        }
        while (v87);
      }
      v90 = (WTF *)*((_QWORD *)v76 + 2);
      if ((WTF *)((char *)v76 + 32) != v90 && v90 != 0)
      {
        *((_QWORD *)v76 + 2) = 0;
        *((_DWORD *)v76 + 6) = 0;
        WTF::fastFree(v90, v68);
      }
      v92 = *((_QWORD *)v76 + 1);
      *((_QWORD *)v76 + 1) = 0;
      if (v92)
        (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
      WTF::fastFree(v76, v68);
    }
    else
    {
      --*(_DWORD *)v76;
    }
  }
  v77 = v116;
  v116 = 0;
  if (v77)
  {
    if (v77[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v77 + 16))(v77);
    else
      --v77[2];
  }
  WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe((WebCore::KeyframeEffect::ComputedKeyframe *)&v110, v68);
  WTF::Vector<WebCore::KeyframeEffect::PropertyAndValues,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v124, v78);
  if (v123 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_1E3391A58[v123])(&v110, v122);
  v123 = -1;
  if (v121 != -1)
    ((void (*)(uint64_t *, _QWORD *))off_1E3391A38[v121])(&v110, v120);
  v121 = -1;
  if (v119 != -1)
    ((void (*)(uint64_t *, JSC::JSCell ***))off_1E3391A08[v119])(&v110, v118);
  v19 = v136;
  if (v136 != -1)
    goto LABEL_114;
}

WTF::StringImpl *WebCore::processKeyframeLikeObject(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, JSC::JSCell ***a4, int a5)
{
  JSC::Structure ***v5;
  JSC::JSCell *v9;
  WTF::StringImpl *result;
  int v11;
  uint64_t v12;
  JSC::Structure ***v13;
  int v14;
  int v15;
  int v16;
  JSC::JSCell *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20;
  int v21;
  WTF::StringImpl *v22;
  int v23;
  int v24;
  WTF *v25;
  const WTF::AtomString *v26;
  uint64_t v27;
  WTF *v28;
  unsigned int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t isExposedNotInvalidAndNotInternal;
  uint64_t v35;
  unsigned int v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  const WTF::StringImpl *v40;
  uint64_t v41;
  unint64_t v42;
  JSC::Structure *v43;
  JSC::JSObject *v44;
  uint64_t v45;
  const WTF::AtomString *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  JSC::VM *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  int v60;
  WTF::StringImpl *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  WTF::StringImpl *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  WTF::StringImpl *v73;
  WTF *v74;
  WTF *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF *v79;
  WTF *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  WTF::StringImpl **v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  WTF *v87;
  WTF::StringImpl *v88;
  _DWORD *v89;
  uint64_t v90;
  WTF *v91;
  WTF::StringImpl *v92;
  _DWORD *v93;
  WTF *v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  char hasExceptionsAfterHandlingTraps;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  WTF *v102;
  uint64_t v103;
  WTF *v104;
  WTF::StringImpl *v105;
  WTF *v106;
  uint64_t v107;
  WTF::StringImpl **v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  WTF *v111;
  JSC::Structure ***v113;
  JSC::VM *v115;
  WTF::StringImpl *v116[2];
  int v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  WTF *v120;
  uint64_t v121;
  WTF *v122;
  uint64_t v123;
  JSC::VM *v124;
  __int16 v125;
  _QWORD v126[2];
  int v127;
  WTF::StringImpl *v128[2];
  int v129;
  _QWORD v130[2];
  int v131;
  char v132;
  char *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF *v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  _BYTE v141[16];
  int v142;
  uint64_t v143;
  WTF::StringImpl *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;

  v5 = a4;
  v154 = *MEMORY[0x1E0C80C00];
  v115 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v126[0] = 0;
  v126[1] = 0;
  v127 = 1;
  v128[0] = 0;
  v128[1] = 0;
  v129 = 0;
  v130[0] = 0;
  v130[1] = 0;
  v131 = 0;
  if (a5)
  {
    if (*a4)
      v9 = **a4;
    else
      v9 = 0;
    result = (WTF::StringImpl *)WebCore::convertDictionary<WebCore::KeyframeEffect::BasePropertyIndexedKeyframe>(v9, a2, (uint64_t)&v143);
    v11 = v153;
    if ((_DWORD)v153)
    {
      *(_BYTE *)(a1 + 8) = 33;
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 96) = 1;
      v21 = v11;
LABEL_37:
      if (v21 != -1)
        result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3391AB0[v21])(&v134, &v144);
      goto LABEL_60;
    }
    v12 = a1;
    v13 = v5;
    LOBYTE(v134) = 0;
    LODWORD(v136) = -1;
    v14 = v146;
    if ((_DWORD)v146 != -1)
    {
      result = (WTF::StringImpl *)((uint64_t (*)(WTF **, WTF::StringImpl **, WTF::StringImpl **))off_1E3391A20[v146])(&v122, &v134, &v144);
      LODWORD(v136) = v14;
    }
    LOBYTE(v137) = 0;
    v140 = -1;
    v15 = v149;
    if ((_DWORD)v149 != -1)
    {
      result = (WTF::StringImpl *)((uint64_t (*)(WTF **, unsigned int *, uint64_t *))off_1E3391A48[v149])(&v122, &v137, &v147);
      v140 = v15;
    }
    v141[0] = 0;
    v142 = -1;
    v16 = v152;
    if ((_DWORD)v152 != -1)
    {
      result = (WTF::StringImpl *)((uint64_t (*)(WTF **, _BYTE *, uint64_t *))off_1E3391A68[v152])(&v122, v141, &v150);
      v142 = v16;
    }
    v5 = v13;
    if (v127 == -1)
    {
      a1 = v12;
      if ((_DWORD)v136 == -1)
        goto LABEL_20;
    }
    else
    {
      a1 = v12;
      if ((_DWORD)v136 == -1)
      {
        result = (WTF::StringImpl *)((uint64_t (*)(WTF **, _QWORD *))off_1E3391A08[v127])(&v122, v126);
        v127 = -1;
        goto LABEL_20;
      }
    }
    v122 = (WTF *)v126;
    result = (WTF::StringImpl *)((uint64_t (*)(WTF **, _QWORD *, WTF::StringImpl **))off_1E3391A78[v136])(&v122, v126, &v134);
LABEL_20:
    if (v129 == -1)
    {
      if (v140 == -1)
        goto LABEL_25;
    }
    else if (v140 == -1)
    {
      result = (WTF::StringImpl *)((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E3391A38[v129])(&v122, v128);
      v129 = -1;
      goto LABEL_25;
    }
    v122 = (WTF *)v128;
    result = (WTF::StringImpl *)((uint64_t (*)(WTF **, WTF::StringImpl **, unsigned int *))off_1E3391A90[v140])(&v122, v128, &v137);
LABEL_25:
    v11 = 0;
    if (v131 == -1)
    {
      if (v142 == -1)
      {
LABEL_32:
        v142 = -1;
        if (v140 != -1)
          result = (WTF::StringImpl *)((uint64_t (*)(WTF **, unsigned int *))off_1E3391A38[v140])(&v122, &v137);
        v140 = -1;
        if ((_DWORD)v136 != -1)
          result = (WTF::StringImpl *)((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E3391A08[v136])(&v122, &v134);
        v21 = v153;
        goto LABEL_37;
      }
    }
    else if (v142 == -1)
    {
      result = (WTF::StringImpl *)((uint64_t (*)(WTF **, _QWORD *))off_1E3391A58[v131])(&v122, v130);
      v131 = -1;
      goto LABEL_30;
    }
    v122 = (WTF *)v130;
    result = (WTF::StringImpl *)((uint64_t (*)(WTF **, _QWORD *, _BYTE *))off_1E3391AA0[v142])(&v122, v130, v141);
LABEL_30:
    if (v142 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(WTF **, _BYTE *))off_1E3391A58[v142])(&v122, v141);
    goto LABEL_32;
  }
  if (*a4)
    v17 = **a4;
  else
    v17 = 0;
  result = (WTF::StringImpl *)WebCore::convertDictionary<WebCore::KeyframeEffect::BaseKeyframe>(v17, a2, (uint64_t)&v143);
  v11 = v146;
  if (!(_DWORD)v146)
  {
    v18 = v143;
    v19 = v144;
    v144 = 0;
    v20 = v145;
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E3391A08[v127])(&v134, v126);
    v126[0] = v18;
    v127 = 2;
    if (v129 != -1)
    {
      if (v129 == 1)
      {
        if (v19)
          *(_DWORD *)v19 += 2;
        result = v128[0];
        v128[0] = v19;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
          else
            *(_DWORD *)result -= 2;
        }
        goto LABEL_50;
      }
      result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3391A38[v129])(&v134, v128);
    }
    if (v19)
      *(_DWORD *)v19 += 2;
    v128[0] = v19;
    v129 = 1;
LABEL_50:
    if (v131 != -1)
    {
      if (v131 == 1)
      {
        LOBYTE(v130[0]) = v20;
        goto LABEL_55;
      }
      result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E3391A58[v131])(&v134, v130);
    }
    LOBYTE(v130[0]) = v20;
    v131 = 1;
LABEL_55:
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v19, v22);
      else
        *(_DWORD *)v19 -= 2;
    }
    goto LABEL_58;
  }
  *(_BYTE *)(a1 + 8) = 33;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 96) = 1;
LABEL_58:
  if ((_DWORD)v146 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E3391AC0[v146])(&v134, &v143);
LABEL_60:
  if (v11)
    goto LABEL_247;
  v143 = 0;
  v144 = 0;
  v145 = 1;
  v146 = 0;
  v147 = 0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  if (v127 == -1)
  {
    v145 = -1;
    v24 = v129;
    if (v129 == -1)
    {
      v23 = 0;
LABEL_67:
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3391A38[v23])(&v134, &v146);
      v148 = -1;
      goto LABEL_70;
    }
  }
  else
  {
    v134 = (WTF::StringImpl *)&v143;
    ((void (*)(WTF::StringImpl **, uint64_t *, _QWORD *))off_1E3391AD0[v127])(&v134, &v143, v126);
    v23 = v148;
    v24 = v129;
    if (v148 == -1)
    {
      if (v129 == -1)
        goto LABEL_70;
    }
    else if (v129 == -1)
    {
      goto LABEL_67;
    }
  }
  v134 = (WTF::StringImpl *)&v146;
  ((void (*)(WTF::StringImpl **))off_1E3391AE8[v24])(&v134);
LABEL_70:
  if (v151 == -1)
  {
    if (v131 == -1)
      goto LABEL_75;
  }
  else if (v131 == -1)
  {
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3391A58[v151])(&v134, &v149);
    v151 = -1;
    goto LABEL_75;
  }
  v134 = (WTF::StringImpl *)&v149;
  ((void (*)(WTF::StringImpl **))off_1E3391AF8[v131])(&v134);
LABEL_75:
  v25 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v25 = 1;
  *((_QWORD *)v25 + 1) = (char *)v25 + 24;
  *((_QWORD *)v25 + 2) = 20;
  v122 = v25;
  v123 = 0;
  v124 = v115;
  v125 = 258;
  v113 = v5;
  JSC::JSObject::getOwnPropertyNames();
  v120 = 0;
  v121 = 0;
  v27 = *((unsigned int *)v122 + 5);
  if (!(_DWORD)v27)
  {
    v39 = 0;
    v28 = 0;
LABEL_101:
    v40 = 0;
    goto LABEL_102;
  }
  v28 = 0;
  v29 = 0;
  v30 = (WTF::StringImpl **)*((_QWORD *)v122 + 1);
  v31 = 8 * v27;
  do
  {
    v32 = WebCore::IDLAttributeNameToAnimationPropertyName(v30, v26);
    isExposedNotInvalidAndNotInternal = 0;
    if ((_DWORD)v32)
    {
      if ((v32 - 304) > 0x1E || ((1 << (v32 - 48)) & 0x7C010001) == 0)
      {
        v35 = *(_QWORD *)(a3 + 680);
        if (!v35
          || (isExposedNotInvalidAndNotInternal = WebCore::isExposedNotInvalidAndNotInternal(v32, *(_QWORD *)(v35 + 664), *(_QWORD *)(v35 + 672), *(_QWORD *)(v35 + 680), *(_QWORD *)(v35 + 688), *(_QWORD *)(v35 + 696), *(_QWORD *)(v35 + 704), *(_QWORD *)(v35 + 712)), (_DWORD)isExposedNotInvalidAndNotInternal))
        {
          isExposedNotInvalidAndNotInternal = v32;
        }
      }
    }
    LOWORD(v134) = WebCore::CSSProperty::resolveDirectionAwareProperty(isExposedNotInvalidAndNotInternal, 0, 0);
    LODWORD(v135) = 0;
    v36 = std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyAnimation::isPropertyAnimatable(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::$_0,WebCore::CSSPropertyAnimation::isPropertyAnimatable(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>((unsigned __int16 *)v116, (unsigned __int16 *)&v134);
    if ((_DWORD)v135 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33919E8[v135])(v116, &v134);
    if (v36)
    {
      if (v29 == (_DWORD)v121)
      {
        v37 = *(_DWORD **)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v120, v29 + 1, (unint64_t)v30);
        if (v37)
          *v37 += 2;
        v29 = HIDWORD(v121);
        v28 = v120;
        *((_QWORD *)v120 + HIDWORD(v121)) = v37;
      }
      else
      {
        v38 = *v30;
        if (*v30)
          *(_DWORD *)v38 += 2;
        *((_QWORD *)v28 + v29) = v38;
      }
      HIDWORD(v121) = ++v29;
    }
    ++v30;
    v31 -= 8;
  }
  while (v31);
  v39 = (WTF *)((char *)v28 + 8 * v29);
  if (!v29)
    goto LABEL_101;
  v40 = (const WTF::StringImpl *)(126 - 2 * __clz(v29));
LABEL_102:
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierELb0EEEvT1_SL_SF_NS_15iterator_traitsISL_E15difference_typeEb((uint64_t)v28, v39, v40, 1);
  v41 = HIDWORD(v121);
  if (HIDWORD(v121))
  {
    v42 = 0;
    while (1)
    {
      if (*v113)
        v43 = **v113;
      else
        v43 = 0;
      if (v42 >= HIDWORD(v121))
      {
LABEL_278:
        __break(0xC471u);
        JUMPOUT(0x1956798ACLL);
      }
      v45 = JSC::JSObject::get(v43, a2, *((_QWORD *)v120 + v42));
      if (*((_DWORD *)v115 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v115))
      {
        *(_BYTE *)(a1 + 8) = 33;
        *(_QWORD *)(a1 + 16) = 0;
        *(_DWORD *)(a1 + 96) = 1;
        goto LABEL_226;
      }
      if (!a5)
        break;
      WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDOMString,WebCore::IDLSequence<WebCore::IDLDOMString>>>::convert(a2, v45, v44, (uint64_t)&v134);
      v47 = v139;
      if (v139)
      {
        v50 = 0;
        v49 = 0;
        *(_BYTE *)(a1 + 8) = 33;
        *(_QWORD *)(a1 + 16) = 0;
        v51 = v47;
        *(_DWORD *)(a1 + 96) = 1;
      }
      else
      {
        LOBYTE(v116[0]) = 0;
        v117 = -1;
        v48 = v137;
        if (v137 == -1)
          std::__throw_bad_variant_access[abi:sn180100]();
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))off_1E3391B18[v137])(&v118, v116, &v135);
        v117 = v48;
        v133 = &v132;
        ((void (*)(WTF::StringImpl **__return_ptr, char **, WTF::StringImpl **))off_1E3391B28[v48])(&v118, &v133, v116);
        v49 = v118;
        v50 = HIDWORD(v119);
        v118 = 0;
        v119 = 0;
        if (v117 != -1)
          ((void (*)(char **, WTF::StringImpl **))off_1E3391B08[v117])(&v133, v116);
        v51 = v139;
      }
      if (v51 != 0xFFFFFFFFLL)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3391B38[v51])(v116, &v135);
      if (v47)
      {
        LOBYTE(v52) = 0;
        goto LABEL_168;
      }
LABEL_134:
      if (v42 >= HIDWORD(v121))
      {
        __break(0xC471u);
        JUMPOUT(0x1956798B4);
      }
      v59 = (WTF::StringImpl *)*((_QWORD *)v120 + v42);
      if (v59)
        *(_DWORD *)v59 += 2;
      v116[0] = v59;
      v60 = WebCore::IDLAttributeNameToAnimationPropertyName(v116, v46);
      if (v60 == 1)
      {
        LOWORD(v134) = 1;
        v61 = v116[0];
        if (v116[0])
          *(_DWORD *)v116[0] += 2;
        v135 = v61;
        v136 = 0;
        v137 = 0;
        v138 = v50;
        if (v50)
        {
          if (v50 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1956798BCLL);
          }
          v86 = 8 * v50;
          v87 = (WTF *)WTF::fastMalloc((WTF *)(8 * v50));
          v137 = v50;
          v136 = v87;
          v88 = v49;
          do
          {
            v89 = *(_DWORD **)v88;
            if (*(_QWORD *)v88)
              *v89 += 2;
            *(_QWORD *)v87 = v89;
            v87 = (WTF *)((char *)v87 + 8);
            v88 = (WTF::StringImpl *)((char *)v88 + 8);
            v86 -= 8;
          }
          while (v86);
        }
        if (HIDWORD(v153) == (_DWORD)v153)
        {
          v62 = WTF::Vector<WebCore::KeyframeEffect::PropertyAndValues,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v152, HIDWORD(v153) + 1, (unint64_t)&v134);
          v63 = v152 + 32 * HIDWORD(v153);
          *(_WORD *)v63 = *(_WORD *)v62;
          v64 = *((_QWORD *)v62 + 1);
          *((_QWORD *)v62 + 1) = 0;
          *(_QWORD *)(v63 + 16) = 0;
          *(_QWORD *)(v63 + 24) = 0;
          *(_QWORD *)(v63 + 8) = v64;
          v65 = *((_QWORD *)v62 + 2);
          *((_QWORD *)v62 + 2) = 0;
          *(_QWORD *)(v63 + 16) = v65;
          LODWORD(v65) = *((_DWORD *)v62 + 6);
          *((_DWORD *)v62 + 6) = 0;
          *(_DWORD *)(v63 + 24) = v65;
          v66 = *((_DWORD *)v62 + 7);
          *((_DWORD *)v62 + 7) = 0;
        }
        else
        {
          v63 = v152 + 32 * HIDWORD(v153);
          *(_WORD *)v63 = (_WORD)v134;
          v73 = v135;
          v135 = 0;
          *(_QWORD *)(v63 + 16) = 0;
          *(_QWORD *)(v63 + 24) = 0;
          *(_QWORD *)(v63 + 8) = v73;
          v74 = v136;
          v136 = 0;
          *(_QWORD *)(v63 + 16) = v74;
          LODWORD(v74) = v137;
          v137 = 0;
          *(_DWORD *)(v63 + 24) = (_DWORD)v74;
          v66 = v138;
          v138 = 0;
        }
        *(_DWORD *)(v63 + 28) = v66;
        ++HIDWORD(v153);
        if (v138)
        {
          v75 = v136;
          v76 = 8 * v138;
          do
          {
            v77 = *(WTF::StringImpl **)v75;
            *(_QWORD *)v75 = 0;
            if (v77)
            {
              if (*(_DWORD *)v77 == 2)
                WTF::StringImpl::destroy(v77, v46);
              else
                *(_DWORD *)v77 -= 2;
            }
            v75 = (WTF *)((char *)v75 + 8);
            v76 -= 8;
          }
          while (v76);
        }
      }
      else
      {
        LOWORD(v134) = v60;
        v67 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
        if (*MEMORY[0x1E0CBF3B8])
          *(_DWORD *)v67 += 2;
        v135 = v67;
        v136 = 0;
        v137 = 0;
        v138 = v50;
        if (v50)
        {
          if (v50 >> 29)
            goto LABEL_278;
          v90 = 8 * v50;
          v91 = (WTF *)WTF::fastMalloc((WTF *)(8 * v50));
          v137 = v50;
          v136 = v91;
          v92 = v49;
          do
          {
            v93 = *(_DWORD **)v92;
            if (*(_QWORD *)v92)
              *v93 += 2;
            *(_QWORD *)v91 = v93;
            v91 = (WTF *)((char *)v91 + 8);
            v92 = (WTF::StringImpl *)((char *)v92 + 8);
            v90 -= 8;
          }
          while (v90);
        }
        if (HIDWORD(v153) == (_DWORD)v153)
        {
          v68 = WTF::Vector<WebCore::KeyframeEffect::PropertyAndValues,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v152, HIDWORD(v153) + 1, (unint64_t)&v134);
          v69 = v152 + 32 * HIDWORD(v153);
          *(_WORD *)v69 = *(_WORD *)v68;
          v70 = *((_QWORD *)v68 + 1);
          *((_QWORD *)v68 + 1) = 0;
          *(_QWORD *)(v69 + 16) = 0;
          *(_QWORD *)(v69 + 24) = 0;
          *(_QWORD *)(v69 + 8) = v70;
          v71 = *((_QWORD *)v68 + 2);
          *((_QWORD *)v68 + 2) = 0;
          *(_QWORD *)(v69 + 16) = v71;
          LODWORD(v71) = *((_DWORD *)v68 + 6);
          *((_DWORD *)v68 + 6) = 0;
          *(_DWORD *)(v69 + 24) = v71;
          v72 = *((_DWORD *)v68 + 7);
          *((_DWORD *)v68 + 7) = 0;
        }
        else
        {
          v69 = v152 + 32 * HIDWORD(v153);
          *(_WORD *)v69 = (_WORD)v134;
          v78 = v135;
          v135 = 0;
          *(_QWORD *)(v69 + 16) = 0;
          *(_QWORD *)(v69 + 24) = 0;
          *(_QWORD *)(v69 + 8) = v78;
          v79 = v136;
          v136 = 0;
          *(_QWORD *)(v69 + 16) = v79;
          LODWORD(v79) = v137;
          v137 = 0;
          *(_DWORD *)(v69 + 24) = (_DWORD)v79;
          v72 = v138;
          v138 = 0;
        }
        *(_DWORD *)(v69 + 28) = v72;
        ++HIDWORD(v153);
        if (v138)
        {
          v94 = v136;
          v95 = 8 * v138;
          do
          {
            v96 = *(WTF::StringImpl **)v94;
            *(_QWORD *)v94 = 0;
            if (v96)
            {
              if (*(_DWORD *)v96 == 2)
                WTF::StringImpl::destroy(v96, v46);
              else
                *(_DWORD *)v96 -= 2;
            }
            v94 = (WTF *)((char *)v94 + 8);
            v95 -= 8;
          }
          while (v95);
        }
      }
      v80 = v136;
      if (v136)
      {
        v136 = 0;
        v137 = 0;
        WTF::fastFree(v80, v46);
      }
      v81 = v135;
      v135 = 0;
      if (v81)
      {
        if (*(_DWORD *)v81 == 2)
          WTF::StringImpl::destroy(v81, v46);
        else
          *(_DWORD *)v81 -= 2;
      }
      v82 = v116[0];
      v116[0] = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2)
          WTF::StringImpl::destroy(v82, v46);
        else
          *(_DWORD *)v82 -= 2;
      }
      LOBYTE(v52) = 1;
LABEL_168:
      if (v50)
      {
        v83 = 8 * v50;
        v84 = (WTF::StringImpl **)v49;
        do
        {
          v85 = *v84;
          *v84 = 0;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2)
              WTF::StringImpl::destroy(v85, v46);
            else
              *(_DWORD *)v85 -= 2;
          }
          ++v84;
          v83 -= 8;
        }
        while (v83);
      }
      if (v49)
        WTF::fastFree(v49, v46);
      if ((v52 & 1) == 0)
        goto LABEL_226;
      if (++v42 == v41)
        goto LABEL_219;
    }
    v116[0] = (WTF::StringImpl *)v45;
    v53 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((v45 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v45 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v116, a2);
LABEL_124:
      if (!*((_DWORD *)v53 + 20))
      {
        v55 = v118;
LABEL_126:
        LODWORD(v135) = 0;
LABEL_127:
        v134 = 0;
        v56 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
        v49 = v56;
        if (v55)
        {
          v57 = *(_DWORD *)v55;
          *(_DWORD *)v55 += 2;
          *(_QWORD *)v56 = v55;
          if (v57)
            *(_DWORD *)v55 = v57;
          else
            WTF::StringImpl::destroy(v55, v46);
        }
        else
        {
          *(_QWORD *)v56 = 0;
        }
        v58 = v135;
        v52 = 1;
        v50 = 1;
LABEL_131:
        if (v58 != 0xFFFFFFFFLL)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3391B48[v58])(v116, &v134);
        if (!v52)
          goto LABEL_168;
        goto LABEL_134;
      }
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v53);
      v55 = v118;
      if ((hasExceptionsAfterHandlingTraps & 1) == 0)
        goto LABEL_126;
      LODWORD(v135) = 1;
      v118 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
        {
          WTF::StringImpl::destroy(v55, v46);
          v58 = v135;
          if (!(_DWORD)v135)
          {
            v55 = v134;
            goto LABEL_127;
          }
LABEL_214:
          v52 = 0;
          v50 = 0;
          v49 = 0;
          *(_BYTE *)(a1 + 8) = 33;
          *(_QWORD *)(a1 + 16) = 0;
          *(_DWORD *)(a1 + 96) = 1;
          goto LABEL_131;
        }
        *(_DWORD *)v55 -= 2;
      }
      v58 = 1;
      goto LABEL_214;
    }
    v54 = *(WTF::StringImpl **)(v45 + 8);
    if ((v54 & 1) != 0)
    {
      v54 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v45, a2);
      if (!v54)
        goto LABEL_123;
    }
    else if (!v54)
    {
LABEL_123:
      v118 = v54;
      goto LABEL_124;
    }
    *(_DWORD *)v54 += 2;
    goto LABEL_123;
  }
LABEL_219:
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = -1;
  v98 = v145;
  if (v145 != -1)
  {
    ((void (*)(WTF::StringImpl **))off_1E3391A20[v145])(&v134);
    *(_DWORD *)(a1 + 24) = v98;
  }
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 48) = -1;
  v99 = v148;
  if (v148 != -1)
  {
    ((void (*)(WTF::StringImpl **))off_1E3391A48[v148])(&v134);
    *(_DWORD *)(a1 + 48) = v99;
  }
  *(_BYTE *)(a1 + 56) = 0;
  v46 = (const WTF::AtomString *)(a1 + 56);
  *(_DWORD *)(a1 + 72) = -1;
  v100 = v151;
  if (v151 != -1)
  {
    ((void (*)(WTF::StringImpl **))off_1E3391A68[v151])(&v134);
    *(_DWORD *)(a1 + 72) = v100;
  }
  *(_QWORD *)(a1 + 80) = v152;
  v101 = v153;
  v152 = 0;
  v153 = 0;
  *(_QWORD *)(a1 + 88) = v101;
  *(_DWORD *)(a1 + 96) = 0;
LABEL_226:
  v102 = v120;
  if (HIDWORD(v121))
  {
    v103 = 8 * HIDWORD(v121);
    v104 = v120;
    do
    {
      v105 = *(WTF::StringImpl **)v104;
      *(_QWORD *)v104 = 0;
      if (v105)
      {
        if (*(_DWORD *)v105 == 2)
          WTF::StringImpl::destroy(v105, v46);
        else
          *(_DWORD *)v105 -= 2;
      }
      v104 = (WTF *)((char *)v104 + 8);
      v103 -= 8;
    }
    while (v103);
  }
  if (v102)
    WTF::fastFree(v102, v46);
  if (v123)
    WTF::fastFree((WTF *)(v123 - 16), v46);
  v106 = v122;
  v122 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 1)
    {
      v107 = *((unsigned int *)v106 + 5);
      if ((_DWORD)v107)
      {
        v108 = (WTF::StringImpl **)*((_QWORD *)v106 + 1);
        v109 = 8 * v107;
        do
        {
          v110 = *v108;
          *v108 = 0;
          if (v110)
          {
            if (*(_DWORD *)v110 == 2)
              WTF::StringImpl::destroy(v110, v46);
            else
              *(_DWORD *)v110 -= 2;
          }
          ++v108;
          v109 -= 8;
        }
        while (v109);
      }
      v111 = (WTF *)*((_QWORD *)v106 + 1);
      if ((WTF *)((char *)v106 + 24) != v111 && v111 != 0)
      {
        *((_QWORD *)v106 + 1) = 0;
        *((_DWORD *)v106 + 4) = 0;
        WTF::fastFree(v111, v46);
      }
      WTF::fastFree(v106, v46);
    }
    else
    {
      --*(_DWORD *)v106;
    }
  }
  result = (WTF::StringImpl *)WTF::Vector<WebCore::KeyframeEffect::PropertyAndValues,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v152, v46);
  if (v151 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E3391A58[v151])(&v134, &v149);
  v151 = -1;
  if (v148 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E3391A38[v148])(&v134, &v146);
  v148 = -1;
  if (v145 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E3391A08[v145])(&v134, &v143);
LABEL_247:
  if (v131 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(uint64_t *, _QWORD *))off_1E3391A58[v131])(&v143, v130);
  v131 = -1;
  if (v129 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1E3391A38[v129])(&v143, v128);
  v129 = -1;
  if (v127 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, _QWORD *))off_1E3391A08[v127])(&v143, v126);
  return result;
}

uint64_t WebCore::IDLAttributeNameToAnimationPropertyName(WTF::StringImpl **this, const WTF::AtomString *a2)
{
  const WTF::AtomString *v4;
  unsigned int CSSPropertyIDFromJavaScriptPropertyName;
  const WTF::StringImpl *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  const WTF::StringImpl *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *i;
  int v16;
  int v17;
  char v18;
  char v19;
  const WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  _BYTE v25[34];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((MEMORY[0x19AEA53F4](*this, "cssFloat", 8) & 1) != 0)
    return 123;
  if ((MEMORY[0x19AEA53F4](*this, "cssOffset", 9) & 1) != 0)
    return 512;
  CSSPropertyIDFromJavaScriptPropertyName = WebCore::CSSStyleDeclaration::getCSSPropertyIDFromJavaScriptPropertyName(this, v4);
  v7 = CSSPropertyIDFromJavaScriptPropertyName;
  if (!CSSPropertyIDFromJavaScriptPropertyName)
  {
    v8 = *this;
    if (!*this || *((_DWORD *)v8 + 1) < 3u)
      goto LABEL_33;
    v9 = *((_QWORD *)v8 + 1);
    if ((*((_BYTE *)v8 + 16) & 4) != 0)
    {
      if (*(_BYTE *)v9 != 45)
        goto LABEL_33;
      v10 = *(unsigned __int8 *)(v9 + 1);
    }
    else
    {
      if (*(_WORD *)v9 != 45)
        goto LABEL_33;
      v10 = *(unsigned __int16 *)(v9 + 2);
    }
    if (v10 == 45)
      return 1;
LABEL_33:
    v20 = (const WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v20 += 2;
    v24 = v20;
    v21 = WTF::equal(*this, v20, v6);
    goto LABEL_39;
  }
  if (CSSPropertyIDFromJavaScriptPropertyName == 512 || CSSPropertyIDFromJavaScriptPropertyName == 123)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_38;
  }
  if (CSSPropertyIDFromJavaScriptPropertyName < 2)
    goto LABEL_33;
  if (CSSPropertyIDFromJavaScriptPropertyName - 2 > 0x227)
    goto LABEL_33;
  v12 = (&WebCore::propertyNameStrings)[2 * CSSPropertyIDFromJavaScriptPropertyName - 4];
  if (!v12)
    goto LABEL_33;
  v13 = 0;
  v14 = (&WebCore::propertyNameStrings)[2 * CSSPropertyIDFromJavaScriptPropertyName - 4];
  for (i = v14; ; v14 = i)
  {
    v17 = *i++;
    v16 = v17;
    if (v17 == 45)
      break;
    if (!v16)
      goto LABEL_36;
LABEL_28:
    v25[v13++] = v16;
  }
  v16 = v14[1];
  if (v14[1])
  {
    i = v14 + 2;
    if ((v16 - 97) >= 0x1A)
      v18 = -1;
    else
      v18 = -33;
    v19 = v18 & v16;
    if (v14 != v12)
      LOBYTE(v16) = v19;
    goto LABEL_28;
  }
LABEL_36:
  if (v13 < 0)
    __break(1u);
  WTF::String::String();
LABEL_38:
  v21 = WTF::equal(*this, v24, v11);
LABEL_39:
  v23 = v21;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v22);
    else
      *(_DWORD *)v24 -= 2;
  }
  if (v23)
    return v7;
  else
    return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14KeyframeEffect27BasePropertyIndexedKeyframeENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;

  v3 = a2[16];
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, unsigned int *))off_1E3391A58[v3])(&v7, a2 + 12);
  a2[16] = -1;
  v5 = a2[10];
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, unsigned int *))off_1E3391A38[v5])(&v8, a2 + 6);
  a2[10] = -1;
  v6 = a2[4];
  if ((_DWORD)v6 != -1)
    result = ((uint64_t (*)(char *, unsigned int *))off_1E3391A08[v6])(&v9, a2);
  a2[4] = -1;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14KeyframeEffect12BaseKeyframeENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF6VectorINS_8optionalIdEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEdEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJDnSE_dEEERKSV_EEEDcSN_DpT0_(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v3 != -1)
  {
    if (!(_DWORD)v3)
    {
      *a2 = 0;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3391A08[v3])(&v4, v2);
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 16) = 0;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF6VectorINS_8optionalIdEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEdEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJDnSE_dEEERKSV_EEEDcSN_DpT0_(WTF *result, WTF *a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return WTF::Vector<std::optional<double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2, (WTF *)a3);
    result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1E3391A08[v5])(&v11, v4);
  }
  v6 = a3[3];
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 12) = v6;
  *(_DWORD *)(v4 + 16) = -1;
  if (!(_DWORD)v6)
    goto LABEL_10;
  if (!(v6 >> 28))
  {
    result = (WTF *)WTF::fastMalloc((WTF *)(16 * v6));
    *(_DWORD *)(v4 + 8) = v6;
    *(_QWORD *)v4 = result;
    v7 = a3[3];
    if ((_DWORD)v7)
    {
      v8 = *(__int128 **)a3;
      v9 = 16 * v7;
      do
      {
        v10 = *v8++;
        *(_OWORD *)result = v10;
        result = (WTF *)((char *)result + 16);
        v9 -= 16;
      }
      while (v9);
    }
LABEL_10:
    *(_DWORD *)(v4 + 16) = 1;
    return result;
  }
  __break(0xC471u);
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF6VectorINS_8optionalIdEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEdEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJDnSE_dEEERKSV_EEEDcSN_DpT0_(uint64_t *a1, _QWORD *a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      result = *a3;
      *a2 = *(_QWORD *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E3391A08[v5])(&v7, v4);
  }
  result = *a3;
  *(double *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 2;
  return result;
}

WTF *WTF::Vector<std::optional<double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, WTF *a2)
{
  WTF *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  _OWORD *v10;
  void *v11;
  uint64_t v12;
  WTF *v13;
  __int128 v14;
  WTF *v15;
  unsigned int v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;

  v2 = result;
  if (a2 == result)
    return v2;
  v4 = *((_DWORD *)result + 3);
  v5 = *((_DWORD *)a2 + 3);
  if (v4 > v5)
  {
    *((_DWORD *)result + 3) = v5;
LABEL_20:
    v15 = *(WTF **)v2;
    if (v5)
    {
      memmove(v15, *(const void **)a2, 16 * v5 - 7);
      v16 = *((_DWORD *)v2 + 3);
      v15 = *(WTF **)v2;
    }
    else
    {
      v16 = 0;
    }
    v17 = *((unsigned int *)a2 + 3);
    if (v16 != (_DWORD)v17)
    {
      v18 = (_OWORD *)((char *)v15 + 16 * v16);
      v19 = (__int128 *)(*(_QWORD *)a2 + 16 * v16);
      v20 = 16 * v17 - 16 * v16;
      do
      {
        v21 = *v19++;
        *v18++ = v21;
        v20 -= 16;
      }
      while (v20);
      v16 = *((_DWORD *)a2 + 3);
    }
    *((_DWORD *)v2 + 3) = v16;
    return v2;
  }
  v6 = *((_DWORD *)result + 2);
  if (v5 <= v6)
    goto LABEL_19;
  if (v6)
  {
    if (v4)
      *((_DWORD *)result + 3) = 0;
    result = *(WTF **)result;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
      v6 = *((_DWORD *)v2 + 2);
    }
  }
  v7 = *((unsigned int *)a2 + 3);
  if (v6 >= v7)
  {
LABEL_19:
    v5 = *((_DWORD *)v2 + 3);
    goto LABEL_20;
  }
  if (!(v7 >> 28))
  {
    v8 = *(WTF **)v2;
    v9 = *((unsigned int *)v2 + 3);
    v10 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v7));
    *((_DWORD *)v2 + 2) = v7;
    *(_QWORD *)v2 = v10;
    if ((_DWORD)v9)
    {
      v12 = 16 * v9;
      v13 = v8;
      do
      {
        v14 = *(_OWORD *)v13;
        v13 = (WTF *)((char *)v13 + 16);
        *v10++ = v14;
        v12 -= 16;
      }
      while (v12);
    }
    if (v8)
    {
      if (*(WTF **)v2 == v8)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree(v8, v11);
    }
    goto LABEL_19;
  }
  __break(0xC471u);
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEESA_EEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSI_1EJSD_SA_EEERKSU_EEEDcSM_DpT0_(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2, a3);
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E3391A38[v5])(&v11, v4);
  }
  v6 = a3[3];
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 12) = v6;
  *(_DWORD *)(v4 + 16) = -1;
  if (!(_DWORD)v6)
    goto LABEL_6;
  if (!(v6 >> 29))
  {
    result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v6));
    *(_DWORD *)(v4 + 8) = v6;
    *(_QWORD *)v4 = result;
    v7 = a3[3];
    if ((_DWORD)v7)
    {
      v8 = *(_DWORD ***)a3;
      v9 = 8 * v7;
      do
      {
        v10 = *v8;
        if (*v8)
          *v10 += 2;
        *(_QWORD *)result = v10;
        result += 2;
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
LABEL_6:
    *(_DWORD *)(v4 + 16) = 0;
    return result;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEESA_EEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSI_1EJSD_SA_EEERKSU_EEEDcSM_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, _DWORD **a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      if (*a3)
        *v6 += 2;
      result = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v6;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E3391A38[v5])(&v8, v4);
  }
  v7 = *a3;
  if (*a3)
    *v7 += 2;
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIN7WebCore24CompositeOperationOrAutoELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEESB_EEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJSE_SB_EEERKSV_EEEDcSN_DpT0_(uint64_t *result, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;
  unsigned int v11;
  WTF *v12;
  unsigned int v13;
  void *v14;
  size_t v15;
  void *v16;
  void *v17;
  char *v18;
  uint64_t v19;
  char v20;

  v4 = *result;
  v5 = *(unsigned int *)(*result + 16);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      if ((_DWORD *)a3 != a2)
      {
        v7 = a2[3];
        v8 = *(_DWORD *)(a3 + 12);
        if (v7 <= v8)
        {
          v11 = a2[2];
          if (v8 > v11)
          {
            if (v11)
            {
              if (v7)
                a2[3] = 0;
              v12 = *(WTF **)a2;
              if (*(_QWORD *)a2)
              {
                *(_QWORD *)a2 = 0;
                a2[2] = 0;
                WTF::fastFree(v12, a2);
                v11 = a2[2];
              }
            }
            v13 = *(_DWORD *)(a3 + 12);
            if (v11 < v13)
            {
              v14 = *(void **)a2;
              v15 = a2[3];
              v16 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a3 + 12));
              a2[2] = v13;
              *(_QWORD *)a2 = v16;
              memcpy(v16, v14, v15);
              if (v14)
              {
                if (*(void **)a2 == v14)
                {
                  *(_QWORD *)a2 = 0;
                  a2[2] = 0;
                }
                WTF::fastFree((WTF *)v14, v17);
              }
            }
          }
          v8 = a2[3];
        }
        else
        {
          a2[3] = v8;
        }
        v18 = *(char **)a2;
        if (v8)
        {
          memmove(v18, *(const void **)a3, v8);
          v19 = a2[3];
          v18 = *(char **)a2;
        }
        else
        {
          v19 = 0;
        }
        result = (uint64_t *)memcpy(&v18[v19], (const void *)(*(_QWORD *)a3 + v19), *(_QWORD *)a3 + *(unsigned int *)(a3 + 12) - (*(_QWORD *)a3 + v19));
        a2[3] = *(_DWORD *)(a3 + 12);
      }
      return result;
    }
    result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1E3391A58[v5])(&v20, v4);
  }
  v9 = (WTF *)*(unsigned int *)(a3 + 12);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 12) = (_DWORD)v9;
  *(_DWORD *)(v4 + 16) = -1;
  if ((_DWORD)v9)
  {
    v10 = (void *)WTF::fastMalloc(v9);
    *(_DWORD *)(v4 + 8) = (_DWORD)v9;
    *(_QWORD *)v4 = v10;
    result = (uint64_t *)memcpy(v10, *(const void **)a3, *(unsigned int *)(a3 + 12));
  }
  *(_DWORD *)(v4 + 16) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIN7WebCore24CompositeOperationOrAutoELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEESB_EEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJSE_SB_EEERKSV_EEEDcSN_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3391A58[v5])(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

uint64_t _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierELb0EEEvT1_SL_SF_NS_15iterator_traitsISL_E15difference_typeEb(uint64_t result, WTF::StringImpl *a2, const WTF::StringImpl *a3, char a4)
{
  const WTF::StringImpl *v4;
  const WTF::StringImpl **v5;
  const WTF::StringImpl **v6;
  const WTF::StringImpl **v7;
  const WTF::StringImpl **k;
  uint64_t v9;
  unint64_t v10;
  WTF **v11;
  const WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF;
  const WTF::StringImpl *v16;
  WTF::StringImpl **v17;
  const WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned __int16 *v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned __int8 *v38;
  unsigned __int16 *v39;
  unsigned int v40;
  unsigned int v41;
  const WTF::StringImpl **v42;
  WTF *v43;
  WTF *v44;
  const WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl **v47;
  WTF *v48;
  WTF::StringImpl *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  int v59;
  unsigned __int16 *v60;
  unsigned __int16 *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned __int16 *v64;
  unsigned __int8 *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned __int8 *v68;
  unsigned __int16 *v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  unsigned __int16 *v85;
  unsigned __int16 *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned __int16 *v89;
  unsigned __int8 *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned __int8 *v93;
  unsigned __int16 *v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  const WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  BOOL ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEbT1_SL_SF;
  const WTF::StringImpl *v102;
  const WTF::StringImpl *v103;
  const WTF::StringImpl *v104;
  const WTF::StringImpl *v105;
  const WTF::StringImpl *v106;
  WTF *v107;
  WTF::StringImpl *v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  unsigned int v115;
  unsigned int v116;
  BOOL v117;
  _BOOL4 v118;
  unsigned __int16 *v119;
  unsigned __int16 *v120;
  unsigned int v121;
  unsigned int v122;
  unsigned __int16 *v123;
  unsigned __int8 *v124;
  unsigned int v125;
  unsigned int v126;
  unsigned __int8 *v127;
  unsigned __int16 *v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  unsigned __int8 *v138;
  unsigned __int8 *v139;
  unsigned int v140;
  unsigned int v141;
  BOOL v142;
  unsigned __int16 *v143;
  unsigned __int16 *v144;
  unsigned int v145;
  unsigned int v146;
  unsigned __int16 *v147;
  unsigned __int8 *v148;
  unsigned int v149;
  unsigned int v150;
  unsigned __int8 *v151;
  unsigned __int16 *v152;
  unsigned int v153;
  unsigned int v154;
  int v155;
  const WTF::StringImpl *v156;
  uint64_t v157;
  int v158;
  const WTF::StringImpl **v159;
  const WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  const WTF::StringImpl *v162;
  BOOL v164;
  uint64_t v165;
  const WTF::StringImpl **v166;
  const WTF::StringImpl **v167;
  WTF::StringImpl *v168;
  WTF *v169;
  const WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl **i;
  int v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t v176;
  unsigned __int8 *v177;
  unsigned __int8 *v178;
  unsigned int v179;
  unsigned int v180;
  BOOL v181;
  unsigned __int16 *v182;
  unsigned __int16 *v183;
  unsigned int v184;
  unsigned int v185;
  unsigned __int16 *v186;
  unsigned __int8 *v187;
  unsigned int v188;
  unsigned int v189;
  unsigned __int8 *v190;
  unsigned __int16 *v191;
  unsigned int v192;
  unsigned int v193;
  int v194;
  uint64_t j;
  WTF::StringImpl **v196;
  int64_t v197;
  int64_t v198;
  uint64_t v199;
  WTF **v200;
  const WTF::StringImpl **v201;
  const WTF::StringImpl *v202;
  WTF::StringImpl **v203;
  WTF *v204;
  WTF::StringImpl *v205;
  uint64_t v206;
  uint64_t v207;
  WTF::StringImpl *v208;
  uint64_t v209;
  uint64_t v210;
  const WTF::StringImpl *v211;
  const WTF::StringImpl **v212;
  WTF::StringImpl **v213;
  uint64_t v214;
  const WTF::StringImpl *v215;
  const WTF::StringImpl *v216;
  int v217;
  unsigned int v218;
  unsigned int v219;
  uint64_t v220;
  unsigned __int8 *v221;
  unsigned __int8 *v222;
  unsigned int v223;
  unsigned int v224;
  BOOL v225;
  int v226;
  unsigned __int16 *v227;
  unsigned __int16 *v228;
  unsigned int v229;
  unsigned int v230;
  unsigned __int16 *v231;
  unsigned __int8 *v232;
  unsigned int v233;
  unsigned int v234;
  unsigned __int8 *v235;
  unsigned __int16 *v236;
  unsigned int v237;
  unsigned int v238;
  int v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  const WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  uint64_t v244;
  unint64_t v245;
  WTF **v246;
  const WTF::StringImpl *v247;
  uint64_t *v248;
  WTF *v249;
  WTF::StringImpl *v250;
  uint64_t v251;
  uint64_t v252;
  const WTF::StringImpl **v253;
  uint64_t v254;
  uint64_t v255;
  WTF *v256;
  const WTF::StringImpl *v257;
  const WTF::StringImpl **v258;
  int v259;
  unsigned int v260;
  unsigned int v261;
  uint64_t v262;
  unsigned __int8 *v263;
  unsigned __int8 *v264;
  unsigned int v265;
  unsigned int v266;
  BOOL v267;
  unsigned __int16 *v268;
  unsigned __int16 *v269;
  unsigned int v270;
  unsigned int v271;
  unsigned __int16 *v272;
  unsigned __int8 *v273;
  unsigned int v274;
  unsigned int v275;
  unsigned __int8 *v276;
  unsigned __int16 *v277;
  unsigned int v278;
  unsigned int v279;
  int v280;
  uint64_t v281;
  WTF *v282;
  uint64_t v283;
  WTF::StringImpl *v284;
  const WTF::StringImpl *v285;
  int64_t v286;
  int64_t v288;

  v4 = a3;
  v5 = (const WTF::StringImpl **)a2;
  v6 = (const WTF::StringImpl **)result;
LABEL_2:
  v285 = (const WTF::StringImpl *)(v5 - 1);
  v7 = v6;
  while (2)
  {
    v6 = v7;
    k = (const WTF::StringImpl **)((char *)v5 - (char *)v7);
    v9 = v5 - v7;
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = WTF::codePointCompare(*(v5 - 1), *v7, a3);
        if ((result & 0x80000000) != 0)
        {
          k = (const WTF::StringImpl **)*v7;
          *v7 = 0;
          v162 = *(v5 - 1);
          *(v5 - 1) = 0;
          ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = (uint64_t)*v7;
          *v7 = v162;
          if (!ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF)
            goto LABEL_305;
          if (*(_DWORD *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF != 2)
          {
            *(_DWORD *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF -= 2;
            goto LABEL_305;
          }
          goto LABEL_557;
        }
        return result;
      case 3:
        return _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF_(v7, v7 + 1, v285);
      case 4:
        return _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEvT1_SL_SL_SL_SF_(v7, v7 + 1, (const WTF::StringImpl *)(v7 + 2), (WTF **)v285);
      case 5:
        return _ZNSt3__124__sort5_maybe_branchlessB8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierELi0EEEvT1_SL_SL_SL_SL_SF_(v7, v7 + 1, (const WTF::StringImpl *)(v7 + 2), v7 + 3, (WTF **)v285);
      default:
        if ((uint64_t)k <= 191)
        {
          k = v7 + 1;
          v164 = v7 == v5 || k == v5;
          if ((a4 & 1) != 0)
          {
            if (v164)
              return result;
            v165 = 0;
            v166 = v7;
LABEL_320:
            v167 = v166;
            v166 = k;
            result = WTF::codePointCompare(v167[1], *v167, a3);
            if ((result & 0x80000000) == 0)
              goto LABEL_377;
            v169 = *k;
            *v166 = 0;
            v170 = *v167;
            v171 = 0;
            if (v169)
            {
              for (i = v166; ; v171 = *i)
              {
                *i = v170;
                i = v167;
                *v167 = 0;
                if (v171)
                {
                  if (*(_DWORD *)v171 == 2)
                    WTF::StringImpl::destroy(v171, v168);
                  else
                    *(_DWORD *)v171 -= 2;
                }
                if (v167 == v6)
                  goto LABEL_373;
                --v167;
                v170 = *(i - 1);
                if (!v170)
                  goto LABEL_374;
                v173 = *((_DWORD *)v170 + 4);
                v174 = *((_DWORD *)v169 + 1);
                v175 = *((_DWORD *)v170 + 1);
                v176 = v175 >= v174 ? v174 : v175;
                if ((*((_BYTE *)v169 + 16) & 4) == 0)
                  break;
                if ((v173 & 4) != 0)
                {
                  if ((_DWORD)v176)
                  {
                    v177 = (unsigned __int8 *)*((_QWORD *)v170 + 1);
                    v178 = (unsigned __int8 *)*((_QWORD *)v169 + 1);
                    do
                    {
                      v179 = *v178;
                      v180 = *v177;
                      v181 = v179 > v180;
                      if (v179 != v180)
                        goto LABEL_360;
                      ++v178;
                      ++v177;
                    }
                    while (--v176);
                  }
LABEL_354:
                  if (v175 < v174)
                    v194 = 1;
                  else
                    v194 = -1;
                  if (v174 == v175 || (v194 & 0x80000000) == 0)
                    goto LABEL_374;
                  continue;
                }
                if (!(_DWORD)v176)
                  goto LABEL_354;
                v186 = (unsigned __int16 *)*((_QWORD *)v170 + 1);
                v187 = (unsigned __int8 *)*((_QWORD *)v169 + 1);
                while (1)
                {
                  v188 = *v187;
                  v189 = *v186;
                  if (v189 != v188)
                    break;
                  ++v187;
                  ++v186;
                  if (!--v176)
                    goto LABEL_354;
                }
                if (v189 < v188)
                  goto LABEL_374;
LABEL_361:
                ;
              }
              if ((v173 & 4) != 0)
              {
                if ((_DWORD)v176)
                {
                  v190 = (unsigned __int8 *)*((_QWORD *)v170 + 1);
                  v191 = (unsigned __int16 *)*((_QWORD *)v169 + 1);
                  while (1)
                  {
                    v192 = *v191;
                    v193 = *v190;
                    v181 = v192 > v193;
                    if (v192 != v193)
                      break;
                    ++v191;
                    ++v190;
                    if (!--v176)
                      goto LABEL_354;
                  }
LABEL_360:
                  if (v181)
                    goto LABEL_374;
                  goto LABEL_361;
                }
              }
              else if ((_DWORD)v176)
              {
                v182 = (unsigned __int16 *)*((_QWORD *)v170 + 1);
                v183 = (unsigned __int16 *)*((_QWORD *)v169 + 1);
                while (1)
                {
                  v184 = *v183;
                  v185 = *v182;
                  v181 = v184 > v185;
                  if (v184 != v185)
                    goto LABEL_360;
                  ++v183;
                  ++v182;
                  if (!--v176)
                    goto LABEL_354;
                }
              }
              goto LABEL_354;
            }
            for (j = v165; ; j -= 8)
            {
              v196 = (const WTF::StringImpl **)((char *)v6 + j);
              *v196 = 0;
              v196[1] = v170;
              if (!v171)
                goto LABEL_368;
              if (*(_DWORD *)v171 != 2)
                break;
              WTF::StringImpl::destroy(v171, v168);
              if (!j)
              {
LABEL_373:
                i = v6;
LABEL_374:
                result = (uint64_t)*i;
                *i = v169;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v168);
                  else
                    *(_DWORD *)result -= 2;
                }
LABEL_377:
                k = v166 + 1;
                v165 += 8;
                if (v166 + 1 == v5)
                  return result;
                goto LABEL_320;
              }
LABEL_369:
              v170 = *(const WTF::StringImpl **)((char *)v6 + j - 8);
              if (!v170)
              {
                i = v167;
                goto LABEL_374;
              }
              if (!*((_DWORD *)v170 + 1))
              {
                i = (const WTF::StringImpl **)((char *)v6 + j);
                goto LABEL_374;
              }
              --v167;
              v171 = *v196;
            }
            *(_DWORD *)v171 -= 2;
LABEL_368:
            if (!j)
              goto LABEL_373;
            goto LABEL_369;
          }
          if (v164)
            return result;
          v251 = 0;
          v252 = -1;
          v253 = v7;
          v254 = 1;
          while (1)
          {
            v255 = v251;
            v251 = v254;
            result = WTF::codePointCompare(*k, v6[v255], a3);
            if ((result & 0x80000000) != 0)
              break;
LABEL_537:
            v254 = v251 + 1;
            k = &v6[v251 + 1];
            ++v253;
            --v252;
            if (k == v5)
              return result;
          }
          v256 = *k;
          *k = 0;
          v257 = v6[v255];
          ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = 0;
          if (v256)
          {
            while (1)
            {
              v258 = k;
              k = &v6[v255];
              *k = 0;
              *v258 = v257;
              if (ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF)
              {
                if (*(_DWORD *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF == 2)
                  ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = WTF::StringImpl::destroy((WTF::StringImpl *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF, a2);
                else
                  *(_DWORD *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF -= 2;
              }
              if (v255 == -1)
                goto LABEL_556;
              v257 = v6[--v255];
              if (!v257)
                goto LABEL_534;
              v259 = *((_DWORD *)v257 + 4);
              v260 = *((_DWORD *)v256 + 1);
              v261 = *((_DWORD *)v257 + 1);
              v262 = v261 >= v260 ? v260 : v261;
              if ((*((_BYTE *)v256 + 16) & 4) == 0)
                break;
              if ((v259 & 4) != 0)
              {
                if ((_DWORD)v262)
                {
                  v263 = (unsigned __int8 *)*((_QWORD *)v257 + 1);
                  v264 = (unsigned __int8 *)*((_QWORD *)v256 + 1);
                  do
                  {
                    v265 = *v264;
                    v266 = *v263;
                    v267 = v265 > v266;
                    if (v265 != v266)
                      goto LABEL_531;
                    ++v264;
                    ++v263;
                  }
                  while (--v262);
                }
LABEL_525:
                if (v261 < v260)
                  v280 = 1;
                else
                  v280 = -1;
                if (v260 == v261 || (v280 & 0x80000000) == 0)
                  goto LABEL_534;
                goto LABEL_532;
              }
              if (!(_DWORD)v262)
                goto LABEL_525;
              v272 = (unsigned __int16 *)*((_QWORD *)v257 + 1);
              v273 = (unsigned __int8 *)*((_QWORD *)v256 + 1);
              while (1)
              {
                v274 = *v273;
                v275 = *v272;
                if (v275 != v274)
                  break;
                ++v273;
                ++v272;
                if (!--v262)
                  goto LABEL_525;
              }
              if (v275 < v274)
                goto LABEL_534;
LABEL_532:
              ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = (uint64_t)*k;
            }
            if ((v259 & 4) != 0)
            {
              if ((_DWORD)v262)
              {
                v276 = (unsigned __int8 *)*((_QWORD *)v257 + 1);
                v277 = (unsigned __int16 *)*((_QWORD *)v256 + 1);
                while (1)
                {
                  v278 = *v277;
                  v279 = *v276;
                  v267 = v278 > v279;
                  if (v278 != v279)
                    break;
                  ++v277;
                  ++v276;
                  if (!--v262)
                    goto LABEL_525;
                }
LABEL_531:
                if (v267)
                  goto LABEL_534;
                goto LABEL_532;
              }
            }
            else if ((_DWORD)v262)
            {
              v268 = (unsigned __int16 *)*((_QWORD *)v257 + 1);
              v269 = (unsigned __int16 *)*((_QWORD *)v256 + 1);
              while (1)
              {
                v270 = *v269;
                v271 = *v268;
                v267 = v270 > v271;
                if (v270 != v271)
                  goto LABEL_531;
                ++v269;
                ++v268;
                if (!--v262)
                  goto LABEL_525;
              }
            }
            goto LABEL_525;
          }
          v281 = v252;
          for (k = v253; ; --k)
          {
            *k = 0;
            k[1] = v257;
            if (ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF)
            {
              if (*(_DWORD *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF == 2)
              {
                ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = WTF::StringImpl::destroy((WTF::StringImpl *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF, a2);
                if (!v281)
                  goto LABEL_556;
                goto LABEL_545;
              }
              *(_DWORD *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF -= 2;
            }
            if (!v281)
              goto LABEL_556;
LABEL_545:
            v257 = *(k - 1);
            if (!v257 || !*((_DWORD *)v257 + 1))
            {
LABEL_534:
              result = (uint64_t)*k;
              *k = v256;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                else
                  *(_DWORD *)result -= 2;
              }
              goto LABEL_537;
            }
            v282 = *k;
            ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = (uint64_t)v282;
            ++v281;
          }
        }
        if (!v4)
        {
          if (v7 == v5)
            return result;
          v197 = (unint64_t)(v9 - 2) >> 1;
          v288 = v197;
          do
          {
            v198 = v197;
            if (v288 >= v197)
            {
              v199 = (2 * v197) | 1;
              v200 = &v6[v199];
              if (2 * v197 + 2 < v9 && (int)WTF::codePointCompare(*v200, v200[1], a3) < 0)
              {
                ++v200;
                v199 = 2 * v198 + 2;
              }
              v201 = &v6[v198];
              if ((WTF::codePointCompare(*v200, *v201, a3) & 0x80000000) == 0)
              {
                v286 = v198;
                v202 = *v201;
                *v201 = 0;
                do
                {
                  v203 = v200;
                  v204 = *v200;
                  *v200 = 0;
                  v205 = *v201;
                  *v201 = v204;
                  if (v205)
                  {
                    if (*(_DWORD *)v205 == 2)
                      WTF::StringImpl::destroy(v205, a2);
                    else
                      *(_DWORD *)v205 -= 2;
                  }
                  if (v288 < v199)
                    break;
                  v206 = (2 * v199) | 1;
                  v200 = &v6[v206];
                  v207 = 2 * v199 + 2;
                  if (v207 < v9 && (int)WTF::codePointCompare(*v200, v200[1], a3) < 0)
                  {
                    ++v200;
                    v206 = v207;
                  }
                  v201 = v203;
                  v199 = v206;
                }
                while ((WTF::codePointCompare(*v200, v202, a3) & 0x80000000) == 0);
                v208 = *v203;
                *v203 = v202;
                v198 = v286;
                if (v208)
                {
                  if (*(_DWORD *)v208 == 2)
                    WTF::StringImpl::destroy(v208, a2);
                  else
                    *(_DWORD *)v208 -= 2;
                }
              }
            }
            v197 = v198 - 1;
          }
          while (v198);
          v209 = (unint64_t)k >> 3;
          while (1)
          {
            v210 = 0;
            v211 = *v6;
            *v6 = 0;
            v212 = v6;
            do
            {
              v213 = v212;
              v212 += v210 + 1;
              v214 = 2 * v210;
              v210 = (2 * v210) | 1;
              if (v214 + 2 >= v209)
                goto LABEL_451;
              v215 = v212[1];
              v216 = *v212;
              if (*v212)
              {
                if (!v215)
                {
                  v226 = *((_DWORD *)v216 + 1) != 0;
                  goto LABEL_449;
                }
                v217 = *((_DWORD *)v215 + 4);
                v218 = *((_DWORD *)v216 + 1);
                v219 = *((_DWORD *)v215 + 1);
                if (v219 >= v218)
                  v220 = v218;
                else
                  v220 = v219;
                if ((*((_BYTE *)v216 + 16) & 4) != 0)
                {
                  if ((v217 & 4) != 0)
                  {
                    if ((_DWORD)v220)
                    {
                      v221 = (unsigned __int8 *)*((_QWORD *)v215 + 1);
                      v222 = (unsigned __int8 *)*((_QWORD *)v216 + 1);
                      while (1)
                      {
                        v223 = *v222;
                        v224 = *v221;
                        v225 = v223 > v224;
                        if (v223 != v224)
                          break;
                        ++v222;
                        ++v221;
                        if (!--v220)
                          goto LABEL_440;
                      }
LABEL_446:
                      if (v225)
                        v226 = 1;
                      else
                        v226 = -1;
                      goto LABEL_449;
                    }
                  }
                  else if ((_DWORD)v220)
                  {
                    v231 = (unsigned __int16 *)*((_QWORD *)v215 + 1);
                    v232 = (unsigned __int8 *)*((_QWORD *)v216 + 1);
                    while (1)
                    {
                      v233 = *v232;
                      v234 = *v231;
                      if (v234 != v233)
                        break;
                      ++v232;
                      ++v231;
                      if (!--v220)
                        goto LABEL_440;
                    }
                    if (v234 < v233)
                      v226 = 1;
                    else
                      v226 = -1;
                    goto LABEL_449;
                  }
                }
                else if ((v217 & 4) != 0)
                {
                  if ((_DWORD)v220)
                  {
                    v235 = (unsigned __int8 *)*((_QWORD *)v215 + 1);
                    v236 = (unsigned __int16 *)*((_QWORD *)v216 + 1);
                    do
                    {
                      v237 = *v236;
                      v238 = *v235;
                      v225 = v237 > v238;
                      if (v237 != v238)
                        goto LABEL_446;
                      ++v236;
                      ++v235;
                    }
                    while (--v220);
                  }
                }
                else if ((_DWORD)v220)
                {
                  v227 = (unsigned __int16 *)*((_QWORD *)v215 + 1);
                  v228 = (unsigned __int16 *)*((_QWORD *)v216 + 1);
                  do
                  {
                    v229 = *v228;
                    v230 = *v227;
                    v225 = v229 > v230;
                    if (v229 != v230)
                      goto LABEL_446;
                    ++v228;
                    ++v227;
                  }
                  while (--v220);
                }
LABEL_440:
                if (v219 < v218)
                  v239 = 1;
                else
                  v239 = -1;
                if (v218 == v219)
                  v226 = 0;
                else
                  v226 = v239;
              }
              else if (v215)
              {
                if (*((_DWORD *)v215 + 1))
                  v226 = -1;
                else
                  v226 = 0;
              }
              else
              {
                v226 = 0;
              }
LABEL_449:
              if (v226 < 0)
              {
                ++v212;
                v210 = v214 + 2;
              }
LABEL_451:
              v240 = *v212;
              *v212 = 0;
              v241 = *v213;
              *v213 = v240;
              if (v241)
              {
                if (*(_DWORD *)v241 == 2)
                  WTF::StringImpl::destroy(v241, a2);
                else
                  *(_DWORD *)v241 -= 2;
              }
            }
            while (v210 <= (uint64_t)((unint64_t)(v209 - 2) >> 1));
            if (v212 != --v5)
            {
              v242 = *v5;
              *v5 = 0;
              v243 = *v212;
              *v212 = v242;
              if (v243)
              {
                if (*(_DWORD *)v243 == 2)
                  WTF::StringImpl::destroy(v243, a2);
                else
                  *(_DWORD *)v243 -= 2;
              }
              result = (uint64_t)*v5;
              *v5 = v211;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                else
                  *(_DWORD *)result -= 2;
              }
              v244 = (char *)(v212 + 1) - (char *)v6;
              if (v244 < 9)
                goto LABEL_483;
              v245 = (((unint64_t)v244 >> 3) - 2) >> 1;
              v246 = &v6[v245];
              result = WTF::codePointCompare(*v246, *v212, a3);
              if ((result & 0x80000000) == 0)
                goto LABEL_483;
              v247 = *v212;
              *v212 = 0;
              while (2)
              {
                v248 = (uint64_t *)v246;
                v249 = *v246;
                *v246 = 0;
                v250 = *v212;
                *v212 = v249;
                if (v250)
                {
                  if (*(_DWORD *)v250 != 2)
                  {
                    *(_DWORD *)v250 -= 2;
                    goto LABEL_474;
                  }
                  WTF::StringImpl::destroy(v250, a2);
                  if (!v245)
                  {
LABEL_478:
                    result = *v248;
                    *v248 = (uint64_t)v247;
                    if (!result)
                      goto LABEL_483;
LABEL_481:
                    if (*(_DWORD *)result == 2)
                      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                    else
                      *(_DWORD *)result -= 2;
                    goto LABEL_483;
                  }
                }
                else
                {
LABEL_474:
                  if (!v245)
                    goto LABEL_478;
                }
                v245 = (v245 - 1) >> 1;
                v246 = &v6[v245];
                v212 = (const WTF::StringImpl **)v248;
                if ((WTF::codePointCompare(*v246, v247, a3) & 0x80000000) == 0)
                  goto LABEL_478;
                continue;
              }
            }
            result = (uint64_t)*v212;
            *v212 = v211;
            if (result)
              goto LABEL_481;
LABEL_483:
            v28 = v209-- <= 2;
            if (v28)
              return result;
          }
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = &v7[v10];
        if ((unint64_t)k < 0x401)
        {
          ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF_(&v7[v10], v7, v285);
        }
        else
        {
          _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF_(v7, &v7[v10], v285);
          _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF_(v7 + 1, v11 - 1, (const WTF::StringImpl *)(v5 - 2));
          _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF_(v7 + 2, &v7[v10 + 1], (const WTF::StringImpl *)(v5 - 3));
          _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF_(v11 - 1, &v7[v10], (const WTF::StringImpl *)&v7[v10 + 1]);
          k = (const WTF::StringImpl **)*v7;
          *v7 = 0;
          v13 = *v11;
          *v11 = 0;
          v14 = *v7;
          *v7 = v13;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, a2);
            else
              *(_DWORD *)v14 -= 2;
          }
          ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = (uint64_t)*v11;
          *v11 = (WTF *)k;
          if (ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF)
          {
            if (*(_DWORD *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF == 2)
              ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = WTF::StringImpl::destroy((WTF::StringImpl *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF, a2);
            else
              *(_DWORD *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF -= 2;
          }
        }
        v4 = (const WTF::StringImpl *)((char *)v4 - 1);
        if ((a4 & 1) == 0)
        {
          ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = WTF::codePointCompare(*(v7 - 1), *v7, v12);
          if ((ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF & 0x80000000) == 0)
          {
            v103 = *v7;
            *v7 = 0;
            ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = WTF::codePointCompare(v103, *(const WTF::StringImpl **)v285, v12);
            k = v7 + 1;
            if ((ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF & 0x80000000) != 0)
            {
              do
              {
                if (k == v5)
                  goto LABEL_556;
                v104 = *k++;
                ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = WTF::codePointCompare(v103, v104, a3);
              }
              while ((ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF & 0x80000000) == 0);
              v7 = k - 1;
            }
            else
            {
              do
              {
                v7 = k;
                if (k >= v5)
                  break;
                ++k;
                ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = WTF::codePointCompare(v103, *v7, a3);
              }
              while ((ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF & 0x80000000) == 0);
            }
            k = v5;
            if (v7 < v5)
            {
              k = v5;
              do
              {
                if (k == v6)
                  goto LABEL_556;
                v105 = *--k;
                ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = WTF::codePointCompare(v103, v105, a3);
              }
              while ((ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF & 0x80000000) != 0);
            }
            if (v7 >= k)
              goto LABEL_289;
            v106 = *v7;
            do
            {
              *v7 = 0;
              v107 = *k;
              *k = 0;
              v108 = *v7;
              *v7 = v107;
              if (v108)
              {
                if (*(_DWORD *)v108 == 2)
                  WTF::StringImpl::destroy(v108, a2);
                else
                  *(_DWORD *)v108 -= 2;
              }
              ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = (uint64_t)*k;
              *k = v106;
              if (!ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF)
              {
LABEL_198:
                if (v103)
                  goto LABEL_199;
                goto LABEL_242;
              }
              if (*(_DWORD *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF != 2)
              {
                *(_DWORD *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF -= 2;
                goto LABEL_198;
              }
              ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = WTF::StringImpl::destroy((WTF::StringImpl *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF, a2);
              if (v103)
              {
                while (1)
                {
LABEL_199:
                  if (++v7 == v5)
                    goto LABEL_556;
                  v106 = *v7;
                  if (*v7)
                    break;
                  v118 = *((_DWORD *)v103 + 1) != 0;
LABEL_236:
                  if (v118 < 0)
                    goto LABEL_245;
                }
                v109 = *((_DWORD *)v106 + 4);
                v110 = *((_DWORD *)v103 + 1);
                v111 = *((_DWORD *)v106 + 1);
                if (v111 >= v110)
                  v112 = v110;
                else
                  v112 = v111;
                if ((*((_BYTE *)v103 + 16) & 4) != 0)
                {
                  if ((v109 & 4) != 0)
                  {
                    if (!(_DWORD)v112)
                      goto LABEL_227;
                    v113 = (unsigned __int8 *)*((_QWORD *)v106 + 1);
                    v114 = (unsigned __int8 *)*((_QWORD *)v103 + 1);
                    while (1)
                    {
                      v115 = *v114;
                      v116 = *v113;
                      v117 = v115 > v116;
                      if (v115 != v116)
                        goto LABEL_233;
                      ++v114;
                      ++v113;
                      if (!--v112)
                        goto LABEL_227;
                    }
                  }
                  if (!(_DWORD)v112)
                    goto LABEL_227;
                  v123 = (unsigned __int16 *)*((_QWORD *)v106 + 1);
                  v124 = (unsigned __int8 *)*((_QWORD *)v103 + 1);
                  while (1)
                  {
                    v125 = *v124;
                    v126 = *v123;
                    if (v126 != v125)
                      break;
                    ++v124;
                    ++v123;
                    if (!--v112)
                      goto LABEL_227;
                  }
                  if (v126 >= v125)
                    goto LABEL_245;
                }
                else
                {
                  if ((v109 & 4) != 0)
                  {
                    if (!(_DWORD)v112)
                    {
LABEL_227:
                      if (v111 < v110)
                        v131 = 1;
                      else
                        v131 = -1;
                      if (v110 == v111)
                        v118 = 0;
                      else
                        v118 = v131;
                      goto LABEL_236;
                    }
                    v127 = (unsigned __int8 *)*((_QWORD *)v106 + 1);
                    v128 = (unsigned __int16 *)*((_QWORD *)v103 + 1);
                    while (1)
                    {
                      v129 = *v128;
                      v130 = *v127;
                      v117 = v129 > v130;
                      if (v129 != v130)
                        break;
                      ++v128;
                      ++v127;
                      if (!--v112)
                        goto LABEL_227;
                    }
                  }
                  else
                  {
                    if (!(_DWORD)v112)
                      goto LABEL_227;
                    v119 = (unsigned __int16 *)*((_QWORD *)v106 + 1);
                    v120 = (unsigned __int16 *)*((_QWORD *)v103 + 1);
                    while (1)
                    {
                      v121 = *v120;
                      v122 = *v119;
                      v117 = v121 > v122;
                      if (v121 != v122)
                        break;
                      ++v120;
                      ++v119;
                      if (!--v112)
                        goto LABEL_227;
                    }
                  }
LABEL_233:
                  if (!v117)
                    goto LABEL_245;
                }
                v118 = 1;
                goto LABEL_236;
              }
              do
              {
LABEL_242:
                if (++v7 == v5)
                  goto LABEL_556;
                v106 = *v7;
              }
              while (!*v7 || !*((_DWORD *)v106 + 1));
LABEL_245:
              if (v103)
              {
                while (1)
                {
                  if (k == v6)
                    goto LABEL_556;
                  v133 = (uint64_t)*--k;
                  v132 = v133;
                  if (!v133)
                    goto LABEL_288;
                  v134 = *(_DWORD *)(v132 + 16);
                  v135 = *((_DWORD *)v103 + 1);
                  v136 = *(_DWORD *)(v132 + 4);
                  if (v136 >= v135)
                    v137 = v135;
                  else
                    v137 = v136;
                  if ((*((_BYTE *)v103 + 16) & 4) != 0)
                  {
                    if ((v134 & 4) != 0)
                    {
                      if ((_DWORD)v137)
                      {
                        v138 = *(unsigned __int8 **)(v132 + 8);
                        v139 = (unsigned __int8 *)*((_QWORD *)v103 + 1);
                        do
                        {
                          v140 = *v139;
                          v141 = *v138;
                          v142 = v140 > v141;
                          if (v140 != v141)
                            goto LABEL_278;
                          ++v139;
                          ++v138;
                        }
                        while (--v137);
                      }
                    }
                    else if ((_DWORD)v137)
                    {
                      v147 = *(unsigned __int16 **)(v132 + 8);
                      v148 = (unsigned __int8 *)*((_QWORD *)v103 + 1);
                      while (1)
                      {
                        v149 = *v148;
                        v150 = *v147;
                        if (v150 != v149)
                          break;
                        ++v148;
                        ++v147;
                        if (!--v137)
                          goto LABEL_273;
                      }
                      if (v150 < v149)
                        goto LABEL_288;
                      goto LABEL_279;
                    }
                  }
                  else if ((v134 & 4) != 0)
                  {
                    if ((_DWORD)v137)
                    {
                      v151 = *(unsigned __int8 **)(v132 + 8);
                      v152 = (unsigned __int16 *)*((_QWORD *)v103 + 1);
                      do
                      {
                        v153 = *v152;
                        v154 = *v151;
                        v142 = v153 > v154;
                        if (v153 != v154)
                          goto LABEL_278;
                        ++v152;
                        ++v151;
                      }
                      while (--v137);
                    }
                  }
                  else if ((_DWORD)v137)
                  {
                    v143 = *(unsigned __int16 **)(v132 + 8);
                    v144 = (unsigned __int16 *)*((_QWORD *)v103 + 1);
                    while (1)
                    {
                      v145 = *v144;
                      v146 = *v143;
                      v142 = v145 > v146;
                      if (v145 != v146)
                        break;
                      ++v144;
                      ++v143;
                      if (!--v137)
                        goto LABEL_273;
                    }
LABEL_278:
                    if (v142)
                      goto LABEL_288;
LABEL_279:
                    v155 = -1;
                    goto LABEL_280;
                  }
LABEL_273:
                  if (v136 < v135)
                    v155 = 1;
                  else
                    v155 = -1;
                  if (v135 == v136)
                    goto LABEL_288;
LABEL_280:
                  if ((v155 & 0x80000000) == 0)
                    goto LABEL_288;
                }
              }
              v156 = (const WTF::StringImpl *)(k - 1);
              do
              {
                k = (const WTF::StringImpl **)v156;
                if ((const WTF::StringImpl **)((char *)v156 + 8) == v6)
                  goto LABEL_556;
                v157 = *(_QWORD *)v156;
                if (!*k)
                  break;
                v158 = *(_DWORD *)(v157 + 4);
                v156 = (const WTF::StringImpl *)(k - 1);
              }
              while (v158);
LABEL_288:
              ;
            }
            while (v7 < k);
LABEL_289:
            v159 = v7 - 1;
            if (v7 - 1 != v6)
            {
              v160 = *v159;
              *v159 = 0;
              v161 = *v6;
              *v6 = v160;
              if (v161)
              {
                if (*(_DWORD *)v161 == 2)
                  WTF::StringImpl::destroy(v161, a2);
                else
                  *(_DWORD *)v161 -= 2;
              }
            }
            a4 = 0;
            result = (uint64_t)*v159;
            *v159 = v103;
            if (result)
            {
              if (*(_DWORD *)result == 2)
              {
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                a4 = 0;
              }
              else
              {
                a4 = 0;
                *(_DWORD *)result -= 2;
              }
            }
            continue;
          }
        }
        v16 = *v7;
        *v6 = 0;
        v17 = v6;
        while (1)
        {
          v18 = v17++;
          if (v17 == v5)
            goto LABEL_556;
          v19 = *v17;
          if (!*v17)
          {
            if (!v16)
              goto LABEL_59;
            if (*((_DWORD *)v16 + 1))
              v29 = -1;
            else
              v29 = 0;
            goto LABEL_56;
          }
          if (!v16)
            goto LABEL_59;
          v20 = *((_DWORD *)v16 + 4);
          v21 = *((_DWORD *)v19 + 1);
          v22 = *((_DWORD *)v16 + 1);
          v23 = v22 >= v21 ? v21 : v22;
          if ((*((_BYTE *)v19 + 16) & 4) != 0)
            break;
          if ((v20 & 4) != 0)
          {
            if ((_DWORD)v23)
            {
              v38 = (unsigned __int8 *)*((_QWORD *)v16 + 1);
              v39 = (unsigned __int16 *)*((_QWORD *)v19 + 1);
              do
              {
                v40 = *v39;
                v41 = *v38;
                v28 = v40 > v41;
                if (v40 != v41)
                  goto LABEL_54;
                ++v39;
                ++v38;
              }
              while (--v23);
            }
          }
          else if ((_DWORD)v23)
          {
            v30 = (unsigned __int16 *)*((_QWORD *)v16 + 1);
            v31 = (unsigned __int16 *)*((_QWORD *)v19 + 1);
            while (1)
            {
              v32 = *v31;
              v33 = *v30;
              v28 = v32 > v33;
              if (v32 != v33)
                break;
              ++v31;
              ++v30;
              if (!--v23)
                goto LABEL_49;
            }
LABEL_54:
            if (v28)
              goto LABEL_59;
            goto LABEL_55;
          }
LABEL_49:
          if (v22 < v21)
            v29 = 1;
          else
            v29 = -1;
          if (v21 == v22)
            goto LABEL_59;
LABEL_56:
          if ((v29 & 0x80000000) == 0)
            goto LABEL_59;
        }
        if ((v20 & 4) != 0)
        {
          if ((_DWORD)v23)
          {
            v24 = (unsigned __int8 *)*((_QWORD *)v16 + 1);
            v25 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
            while (1)
            {
              v26 = *v25;
              v27 = *v24;
              v28 = v26 > v27;
              if (v26 != v27)
                goto LABEL_54;
              ++v25;
              ++v24;
              if (!--v23)
                goto LABEL_49;
            }
          }
          goto LABEL_49;
        }
        if (!(_DWORD)v23)
          goto LABEL_49;
        v34 = (unsigned __int16 *)*((_QWORD *)v16 + 1);
        v35 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
        while (1)
        {
          v36 = *v35;
          v37 = *v34;
          if (v37 != v36)
            break;
          ++v35;
          ++v34;
          if (!--v23)
            goto LABEL_49;
        }
        if (v37 >= v36)
        {
LABEL_55:
          v29 = -1;
          goto LABEL_56;
        }
LABEL_59:
        v42 = v5;
        if (v18 == v6)
        {
          v42 = v5;
          do
          {
            if (v17 >= v42)
              break;
            v44 = *--v42;
          }
          while ((WTF::codePointCompare(v44, v16, v12) & 0x80000000) == 0);
LABEL_66:
          v45 = v4;
          if (v17 < v42)
          {
            v46 = *v17;
            if (!v16)
            {
              *v17 = 0;
              v283 = (uint64_t)*v42;
              *v42 = 0;
              v284 = *v17;
              *v17 = (WTF::StringImpl *)v283;
              if (v284)
              {
                if (*(_DWORD *)v284 == 2)
                  WTF::StringImpl::destroy(v284, a2);
                else
                  *(_DWORD *)v284 -= 2;
              }
              ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = (uint64_t)*v42;
              *v42 = v46;
              if (ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF)
              {
                if (*(_DWORD *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF == 2)
                  ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = WTF::StringImpl::destroy((WTF::StringImpl *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF, a2);
                else
                  *(_DWORD *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF -= 2;
              }
              goto LABEL_556;
            }
            v47 = v17;
            k = v42;
LABEL_69:
            *v47 = 0;
            v48 = *k;
            *k = 0;
            v49 = *v47;
            *v47 = v48;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2)
                WTF::StringImpl::destroy(v49, a2);
              else
                *(_DWORD *)v49 -= 2;
            }
            ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = (uint64_t)*k;
            *k = v46;
            if (ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF)
            {
              if (*(_DWORD *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF == 2)
                ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = WTF::StringImpl::destroy((WTF::StringImpl *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF, a2);
              else
                *(_DWORD *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF -= 2;
            }
            while (1)
            {
              v18 = v47++;
              if (v47 == v5)
                goto LABEL_556;
              v46 = *v47;
              if (!*v47)
              {
                v52 = *((unsigned int *)v16 + 1);
                if ((_DWORD)v52)
                  v59 = -1;
                else
                  v59 = 0;
                goto LABEL_112;
              }
              v50 = *((_DWORD *)v16 + 4);
              v51 = *((unsigned int *)v46 + 1);
              v52 = *((unsigned int *)v16 + 1);
              if (v52 >= v51)
                v53 = v51;
              else
                v53 = v52;
              if ((*((_BYTE *)v46 + 16) & 4) != 0)
              {
                if ((v50 & 4) != 0)
                {
                  if ((_DWORD)v53)
                  {
                    v54 = (unsigned __int8 *)*((_QWORD *)v16 + 1);
                    v55 = (unsigned __int8 *)*((_QWORD *)v46 + 1);
                    do
                    {
                      v56 = *v55;
                      v57 = *v54;
                      v58 = v56 > v57;
                      if (v56 != v57)
                        goto LABEL_110;
                      ++v55;
                      ++v54;
                    }
                    while (--v53);
                  }
                }
                else if ((_DWORD)v53)
                {
                  v64 = (unsigned __int16 *)*((_QWORD *)v16 + 1);
                  v65 = (unsigned __int8 *)*((_QWORD *)v46 + 1);
                  while (1)
                  {
                    v66 = *v65;
                    v67 = *v64;
                    if (v67 != v66)
                      break;
                    ++v65;
                    ++v64;
                    if (!--v53)
                      goto LABEL_105;
                  }
                  if (v67 < v66)
                  {
LABEL_115:
                    v51 = *((unsigned int *)v16 + 1);
LABEL_116:
                    if ((_DWORD)v51)
                      v72 = -1;
                    else
                      v72 = 0;
                    v73 = v51;
                    while (2)
                    {
                      if (k == v6)
                        goto LABEL_556;
                      v75 = (uint64_t)*--k;
                      v74 = v75;
                      ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = v51;
                      v76 = v72;
                      if (!v75)
                        goto LABEL_157;
                      v77 = *((_DWORD *)v16 + 4);
                      v78 = *(_DWORD *)(v74 + 4);
                      if (v73 >= v78)
                        v79 = v78;
                      else
                        v79 = v73;
                      if ((*(_BYTE *)(v74 + 16) & 4) != 0)
                      {
                        if ((v77 & 4) != 0)
                        {
                          if ((_DWORD)v79)
                          {
                            v80 = (unsigned __int8 *)*((_QWORD *)v16 + 1);
                            v81 = *(unsigned __int8 **)(v74 + 8);
                            while (1)
                            {
                              v82 = *v81;
                              v83 = *v80;
                              v84 = v82 > v83;
                              if (v82 != v83)
                                break;
                              ++v81;
                              ++v80;
                              if (!--v79)
                                goto LABEL_147;
                            }
LABEL_153:
                            if (!v84)
                              goto LABEL_160;
LABEL_155:
                            v76 = 1;
LABEL_156:
                            ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = v73;
LABEL_157:
                            v73 = ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF;
                            if (v76 < 0)
                              goto LABEL_160;
                            continue;
                          }
                        }
                        else if ((_DWORD)v79)
                        {
                          v89 = (unsigned __int16 *)*((_QWORD *)v16 + 1);
                          v90 = *(unsigned __int8 **)(v74 + 8);
                          while (1)
                          {
                            v91 = *v90;
                            v92 = *v89;
                            if (v92 != v91)
                              break;
                            ++v90;
                            ++v89;
                            if (!--v79)
                              goto LABEL_147;
                          }
                          if (v92 >= v91)
                          {
LABEL_160:
                            if (v47 >= k)
                              goto LABEL_164;
                            goto LABEL_69;
                          }
                          goto LABEL_155;
                        }
                      }
                      else if ((v77 & 4) != 0)
                      {
                        if ((_DWORD)v79)
                        {
                          v93 = (unsigned __int8 *)*((_QWORD *)v16 + 1);
                          v94 = *(unsigned __int16 **)(v74 + 8);
                          while (1)
                          {
                            v95 = *v94;
                            v96 = *v93;
                            v84 = v95 > v96;
                            if (v95 != v96)
                              goto LABEL_153;
                            ++v94;
                            ++v93;
                            if (!--v79)
                              goto LABEL_147;
                          }
                        }
                      }
                      else if ((_DWORD)v79)
                      {
                        v85 = (unsigned __int16 *)*((_QWORD *)v16 + 1);
                        v86 = *(unsigned __int16 **)(v74 + 8);
                        while (1)
                        {
                          v87 = *v86;
                          v88 = *v85;
                          v84 = v87 > v88;
                          if (v87 != v88)
                            goto LABEL_153;
                          ++v86;
                          ++v85;
                          if (!--v79)
                            goto LABEL_147;
                        }
                      }
                      break;
                    }
LABEL_147:
                    if (v73 < v78)
                      v97 = 1;
                    else
                      v97 = -1;
                    if (v78 == (_DWORD)v73)
                      v76 = 0;
                    else
                      v76 = v97;
                    goto LABEL_156;
                  }
                  goto LABEL_111;
                }
              }
              else if ((v50 & 4) != 0)
              {
                if ((_DWORD)v53)
                {
                  v68 = (unsigned __int8 *)*((_QWORD *)v16 + 1);
                  v69 = (unsigned __int16 *)*((_QWORD *)v46 + 1);
                  do
                  {
                    v70 = *v69;
                    v71 = *v68;
                    v58 = v70 > v71;
                    if (v70 != v71)
                      goto LABEL_110;
                    ++v69;
                    ++v68;
                  }
                  while (--v53);
                }
              }
              else if ((_DWORD)v53)
              {
                v60 = (unsigned __int16 *)*((_QWORD *)v16 + 1);
                v61 = (unsigned __int16 *)*((_QWORD *)v46 + 1);
                while (1)
                {
                  v62 = *v61;
                  v63 = *v60;
                  v58 = v62 > v63;
                  if (v62 != v63)
                    break;
                  ++v61;
                  ++v60;
                  if (!--v53)
                    goto LABEL_105;
                }
LABEL_110:
                if (v58)
                  goto LABEL_115;
LABEL_111:
                v59 = -1;
                goto LABEL_112;
              }
LABEL_105:
              if (v52 < v51)
                v59 = 1;
              else
                v59 = -1;
              if ((_DWORD)v51 == (_DWORD)v52)
                goto LABEL_116;
LABEL_112:
              v51 = v52;
              if ((v59 & 0x80000000) == 0)
                goto LABEL_116;
            }
          }
LABEL_164:
          v4 = v45;
          if (v18 != v6)
          {
            v98 = *v18;
            *v18 = 0;
            v99 = *v6;
            *v6 = v98;
            if (v99)
            {
              if (*(_DWORD *)v99 == 2)
                WTF::StringImpl::destroy(v99, a2);
              else
                *(_DWORD *)v99 -= 2;
            }
          }
          v100 = *v18;
          *v18 = v16;
          if (v100)
          {
            if (*(_DWORD *)v100 == 2)
              WTF::StringImpl::destroy(v100, a2);
            else
              *(_DWORD *)v100 -= 2;
          }
          if (v17 < v42)
          {
LABEL_174:
            result = _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierELb0EEEvT1_SL_SF_NS_15iterator_traitsISL_E15difference_typeEb(v6, v18, v45, a4 & 1);
            a4 = 0;
            v7 = v18 + 1;
            continue;
          }
          ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEbT1_SL_SF = _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEbT1_SL_SF_(v6, v18, v12);
          v7 = v18 + 1;
          result = _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEbT1_SL_SF_(v18 + 1, v5, v102);
          if (!(_DWORD)result)
          {
            if (ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEbT1_SL_SF)
              continue;
            goto LABEL_174;
          }
          v5 = v18;
          if (ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEbT1_SL_SF)
            return result;
          goto LABEL_2;
        }
        while (v42 != v6)
        {
          v43 = *--v42;
          ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF = WTF::codePointCompare(v43, v16, v12);
          if ((ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF & 0x80000000) != 0)
            goto LABEL_66;
        }
LABEL_556:
        __break(1u);
LABEL_557:
        WTF::StringImpl::destroy((WTF::StringImpl *)ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF, a2);
LABEL_305:
        result = (uint64_t)*(v5 - 1);
        *(v5 - 1) = (const WTF::StringImpl *)k;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        return result;
    }
  }
}

uint64_t _ZNSt3__124__sort5_maybe_branchlessB8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierELi0EEEvT1_SL_SL_SL_SL_SF_(const WTF::StringImpl **a1, WTF **a2, const WTF::StringImpl *a3, WTF **a4, WTF **a5)
{
  const WTF::StringImpl *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  WTF *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  WTF *v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  const WTF::StringImpl *v25;
  WTF *v26;
  WTF *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  const WTF::StringImpl *v31;
  WTF *v32;
  WTF::StringImpl *v33;

  _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEvT1_SL_SL_SL_SF_(a1, a2, a3, a4);
  result = WTF::codePointCompare(*a5, *a4, v10);
  if ((result & 0x80000000) != 0)
  {
    v14 = *a4;
    *a4 = 0;
    v15 = *a5;
    *a5 = 0;
    v16 = *a4;
    *a4 = v15;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = *a5;
    *a5 = v14;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    result = WTF::codePointCompare(*a4, *(const WTF::StringImpl **)a3, v13);
    if ((result & 0x80000000) != 0)
    {
      v20 = *(WTF **)a3;
      *(_QWORD *)a3 = 0;
      v21 = *a4;
      *a4 = 0;
      v22 = *(WTF::StringImpl **)a3;
      *(_QWORD *)a3 = v21;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v18);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = *a4;
      *a4 = v20;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v18);
        else
          *(_DWORD *)v23 -= 2;
      }
      result = WTF::codePointCompare(*(WTF **)a3, *a2, v19);
      if ((result & 0x80000000) != 0)
      {
        v26 = *a2;
        *a2 = 0;
        v27 = *(WTF **)a3;
        *(_QWORD *)a3 = 0;
        v28 = *a2;
        *a2 = v27;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v24);
          else
            *(_DWORD *)v28 -= 2;
        }
        v29 = *(WTF::StringImpl **)a3;
        *(_QWORD *)a3 = v26;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v24);
          else
            *(_DWORD *)v29 -= 2;
        }
        result = WTF::codePointCompare(*a2, *a1, v25);
        if ((result & 0x80000000) != 0)
        {
          v31 = *a1;
          *a1 = 0;
          v32 = *a2;
          *a2 = 0;
          v33 = *a1;
          *a1 = v32;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v30);
            else
              *(_DWORD *)v33 -= 2;
          }
          result = (uint64_t)*a2;
          *a2 = v31;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return WTF::StringImpl::destroy((WTF::StringImpl *)result, v30);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF_(const WTF::StringImpl **a1, WTF **a2, const WTF::StringImpl *a3)
{
  int v6;
  const WTF::StringImpl *v7;
  uint64_t result;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  WTF *v11;
  WTF *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  const WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v6 = WTF::codePointCompare(*a2, *a1, a3);
  result = WTF::codePointCompare(*(WTF **)a3, *a2, v7);
  if ((v6 & 0x80000000) == 0)
  {
    if ((result & 0x80000000) == 0)
      return result;
    v11 = *a2;
    *a2 = 0;
    v12 = *(WTF **)a3;
    *(_QWORD *)a3 = 0;
    v13 = *a2;
    *a2 = v12;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v9);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = *(WTF::StringImpl **)a3;
    *(_QWORD *)a3 = v11;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    result = WTF::codePointCompare(*a2, *a1, v10);
    if ((result & 0x80000000) == 0)
      return result;
    v15 = *a1;
    *a1 = 0;
    v16 = *a2;
    *a2 = 0;
    v17 = *a1;
    *a1 = v16;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v9);
      else
        *(_DWORD *)v17 -= 2;
    }
    result = (uint64_t)*a2;
    *a2 = v15;
    if (!result)
      return result;
LABEL_32:
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
    *(_DWORD *)result -= 2;
    return result;
  }
  v18 = *a1;
  *a1 = 0;
  if ((result & 0x80000000) != 0)
  {
    v25 = *(const WTF::StringImpl **)a3;
    *(_QWORD *)a3 = 0;
    v26 = *a1;
    *a1 = v25;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v9);
      else
        *(_DWORD *)v26 -= 2;
    }
    result = *(_QWORD *)a3;
    *(_QWORD *)a3 = v18;
    if (result)
      goto LABEL_32;
  }
  else
  {
    v19 = *a2;
    *a2 = 0;
    v20 = *a1;
    *a1 = v19;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v9);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *a2;
    *a2 = v18;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::destroy(v21, v9);
        v18 = *a2;
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    result = WTF::codePointCompare(*(WTF **)a3, v18, v10);
    if ((result & 0x80000000) != 0)
    {
      v22 = *a2;
      *a2 = 0;
      v23 = *(WTF **)a3;
      *(_QWORD *)a3 = 0;
      v24 = *a2;
      *a2 = v23;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v9);
        else
          *(_DWORD *)v24 -= 2;
      }
      result = *(_QWORD *)a3;
      *(_QWORD *)a3 = v22;
      if (result)
        goto LABEL_32;
    }
  }
  return result;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEbT1_SL_SF_(const WTF::StringImpl **a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  _BOOL8 result;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl **v12;
  const WTF::StringImpl *v13;
  WTF **v14;
  uint64_t v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  uint64_t i;
  char *v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((WTF::codePointCompare(*(a2 - 1), *a1, a3) & 0x80000000) != 0)
      {
        v8 = *a1;
        *a1 = 0;
        v9 = *(a2 - 1);
        *(a2 - 1) = 0;
        v10 = *a1;
        *a1 = v9;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v7);
          else
            *(_DWORD *)v10 -= 2;
        }
        v11 = *(a2 - 1);
        *(a2 - 1) = v8;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v7);
          else
            *(_DWORD *)v11 -= 2;
        }
      }
      return 1;
    case 3:
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF_(a1, a1 + 1, (const WTF::StringImpl *)(a2 - 1));
      return 1;
    case 4:
      _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEvT1_SL_SL_SL_SF_(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2), a2 - 1);
      return 1;
    case 5:
      _ZNSt3__124__sort5_maybe_branchlessB8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierELi0EEEvT1_SL_SL_SL_SL_SF_(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2), a1 + 3, a2 - 1);
      return 1;
    default:
      v12 = a1 + 2;
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF_(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2));
      v14 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    if ((WTF::codePointCompare(*v14, *v12, v13) & 0x80000000) != 0)
    {
      v18 = 0;
      v19 = *v14;
      *v14 = 0;
      for (i = v15; ; i -= 8)
      {
        v21 = (char *)a1 + i;
        v22 = *(uint64_t *)((char *)a1 + i + 16);
        *((_QWORD *)v21 + 2) = 0;
        *((_QWORD *)v21 + 3) = v22;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v17);
          else
            *(_DWORD *)v18 -= 2;
        }
        if (i == -16)
        {
          v23 = a1;
          goto LABEL_22;
        }
        if ((WTF::codePointCompare(v19, *(const WTF::StringImpl **)((char *)a1 + i + 8), v13) & 0x80000000) == 0)
          break;
        v18 = (WTF::StringImpl *)*((_QWORD *)v21 + 2);
      }
      v23 = (const WTF::StringImpl **)((char *)a1 + i + 16);
LABEL_22:
      v24 = *v23;
      *v23 = v19;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v17);
        else
          *(_DWORD *)v24 -= 2;
      }
      if (++v16 == 8)
        return v14 + 1 == a2;
    }
    v12 = v14;
    v15 += 8;
    if (++v14 == a2)
      return 1;
  }
}

uint64_t _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEvT1_SL_SL_SL_SF_(const WTF::StringImpl **a1, WTF **a2, const WTF::StringImpl *a3, WTF **a4)
{
  const WTF::StringImpl *v8;
  uint64_t result;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  WTF *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  WTF *v18;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  WTF *v24;
  WTF::StringImpl *v25;

  _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL25processKeyframeLikeObjectERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEEbEUlRT_RT0_E_PNS3_10IdentifierEEEjT1_SL_SL_SF_(a1, a2, a3);
  result = WTF::codePointCompare(*a4, *(const WTF::StringImpl **)a3, v8);
  if ((result & 0x80000000) != 0)
  {
    v12 = *(WTF **)a3;
    *(_QWORD *)a3 = 0;
    v13 = *a4;
    *a4 = 0;
    v14 = *(WTF::StringImpl **)a3;
    *(_QWORD *)a3 = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v10);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = *a4;
    *a4 = v12;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }
    result = WTF::codePointCompare(*(WTF **)a3, *a2, v11);
    if ((result & 0x80000000) != 0)
    {
      v18 = *a2;
      *a2 = 0;
      v19 = *(WTF **)a3;
      *(_QWORD *)a3 = 0;
      v20 = *a2;
      *a2 = v19;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v16);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = *(WTF::StringImpl **)a3;
      *(_QWORD *)a3 = v18;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v16);
        else
          *(_DWORD *)v21 -= 2;
      }
      result = WTF::codePointCompare(*a2, *a1, v17);
      if ((result & 0x80000000) != 0)
      {
        v23 = *a1;
        *a1 = 0;
        v24 = *a2;
        *a2 = 0;
        v25 = *a1;
        *a1 = v24;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v22);
          else
            *(_DWORD *)v25 -= 2;
        }
        result = (uint64_t)*a2;
        *a2 = v23;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)result, v22);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::processKeyframeLikeObject(JSC::JSGlobalObject &,WebCore::Document &,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> &&,BOOL)::{lambda(WTF::String &&)#1},WebCore::processKeyframeLikeObject(JSC::JSGlobalObject &,WebCore::Document &,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> &,BOOL)::{lambda(WTF::Vector<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> &&,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> &&,WTF::CrashOnOverflow> &&>@<X0>(WTF::StringImpl **a1@<X1>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  _QWORD *result;
  WTF::StringImpl *v5;
  int v6;

  v3 = *a1;
  *a1 = 0;
  *(_QWORD *)(a2 + 8) = 1;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)a2 = result;
  if (v3)
  {
    v6 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    *result = v3;
    *(_DWORD *)(a2 + 12) = 1;
    if (v6)
      *(_DWORD *)v3 = v6;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v5);
  }
  else
  {
    *result = 0;
    *(_DWORD *)(a2 + 12) = 1;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::processKeyframeLikeObject(JSC::JSGlobalObject &,WebCore::Document &,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> &&,BOOL)::{lambda(WTF::String &&)#1},WebCore::processKeyframeLikeObject(JSC::JSGlobalObject &,WebCore::Document &,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> &,BOOL)::{lambda(WTF::Vector<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> &&,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> &&,WTF::CrashOnOverflow> &&>@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  result = *(double *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(double *)(a2 + 8) = result;
  return result;
}

char *WTF::Vector<WebCore::KeyframeEffect::PropertyAndValues,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x19567C084);
      }
      v18 = (WTF::StringImpl *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12));
      v19 = WTF::fastMalloc((WTF *)(32 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::KeyframeEffect::PropertyAndValues>::move(v5, v18, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v10 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x19567C08CLL);
      }
      v11 = WTF::fastMalloc((WTF *)(32 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::KeyframeEffect::PropertyAndValues>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::KeyframeEffect::PropertyAndValues>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_WORD *)a3 = *(_WORD *)v5;
      v6 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = v6;
      v7 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 6);
      *((_DWORD *)v5 + 6) = 0;
      *(_DWORD *)(a3 + 24) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 7);
      *((_DWORD *)v5 + 7) = 0;
      *(_DWORD *)(a3 + 28) = v7;
      v8 = *((unsigned int *)v5 + 7);
      if ((_DWORD)v8)
      {
        v10 = (WTF::StringImpl **)*((_QWORD *)v5 + 2);
        v11 = 8 * v8;
        do
        {
          v12 = *v10;
          *v10 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, a2);
            else
              *(_DWORD *)v12 -= 2;
          }
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      v9 = (WTF *)*((_QWORD *)v5 + 2);
      if (v9)
      {
        *((_QWORD *)v5 + 2) = 0;
        *((_DWORD *)v5 + 6) = 0;
        WTF::fastFree(v9, a2);
      }
      result = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      a3 += 32;
      v5 = (WTF::StringImpl *)((char *)v5 + 32);
    }
    while (v5 != a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6VectorINS_8optionalIdEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEdEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJDnSE_dEEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6VectorINS_8optionalIdEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEdEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJDnSE_dEEERKSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;

  v3 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v3));
      *(_DWORD *)(a2 + 8) = v3;
      *(_QWORD *)a2 = v6;
      v7 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v7)
      {
        v8 = *(__int128 **)a3;
        v9 = 16 * v7;
        do
        {
          v10 = *v8++;
          *v6++ = v10;
          v9 -= 16;
        }
        while (v9);
      }
    }
  }
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6VectorINS_8optionalIdEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEdEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJDnSE_dEEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEESA_EEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJSD_SA_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;

  v3 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
      *(_DWORD *)(a2 + 8) = v3;
      *(_QWORD *)a2 = v6;
      v7 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v7)
      {
        v8 = *(_DWORD ***)a3;
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          if (*v8)
            *v10 += 2;
          *v6++ = v10;
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEESA_EEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJSD_SA_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore24CompositeOperationOrAutoELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEESB_EEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSE_SB_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF *v3;
  void *v6;

  v3 = (WTF *)*(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = (_DWORD)v3;
  if ((_DWORD)v3)
  {
    v6 = (void *)WTF::fastMalloc(v3);
    *(_DWORD *)(a2 + 8) = (_DWORD)v3;
    *(_QWORD *)a2 = v6;
    memcpy(v6, *(const void **)a3, *(unsigned int *)(a3 + 12));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore24CompositeOperationOrAutoELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEESB_EEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSE_SB_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t WTF::Vector<WebCore::KeyframeEffect::PropertyAndValues,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;

  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 27)
    {
LABEL_18:
      __break(0xC471u);
      JUMPOUT(0x19567C448);
    }
    v5 = WTF::fastMalloc((WTF *)(32 * v3));
    *(_DWORD *)(a1 + 8) = v3;
    *(_QWORD *)a1 = v5;
    v6 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v6)
    {
      v7 = v5;
      v8 = *a2;
      v9 = v8 + 32 * v6;
      do
      {
        *(_WORD *)v7 = *(_WORD *)v8;
        v10 = *(_DWORD **)(v8 + 8);
        if (v10)
          *v10 += 2;
        v11 = *(unsigned int *)(v8 + 28);
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 8) = v10;
        *(_DWORD *)(v7 + 28) = v11;
        if ((_DWORD)v11)
        {
          if (v11 >> 29)
            goto LABEL_18;
          v12 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v11));
          *(_DWORD *)(v7 + 24) = v11;
          *(_QWORD *)(v7 + 16) = v12;
          v13 = *(unsigned int *)(v8 + 28);
          if ((_DWORD)v13)
          {
            v14 = *(_DWORD ***)(v8 + 16);
            v15 = 8 * v13;
            do
            {
              v16 = *v14;
              if (*v14)
                *v16 += 2;
              *v12++ = v16;
              ++v14;
              v15 -= 8;
            }
            while (v15);
          }
        }
        v7 += 32;
        v8 += 32;
      }
      while (v8 != v9);
    }
  }
  return a1;
}

WTF::StringImpl *WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::String&>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  int v13;
  int i;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a3;
  v13 = *((_DWORD *)*a3 + 4) >> 8;
  for (i = 1; ; ++i)
  {
    v15 = v13 & v10;
    v16 = (WTF::StringImpl **)(v8 + 16 * v15);
    v17 = *v16;
    if (*v16 != (WTF::StringImpl *)-1)
      break;
    v11 = (WTF::StringImpl **)(v8 + 16 * v15);
LABEL_10:
    v13 = i + v15;
  }
  if (!v17)
  {
    if (v11)
    {
      *v11 = 0;
      v11[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = *a3;
      v16 = v11;
    }
    if (v12)
      *(_DWORD *)v12 += 2;
    *v16 = v12;
    v18 = *a4;
    if (*a4)
      *(_DWORD *)v18 += 2;
    result = v16[1];
    v16[1] = v18;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    v20 = *a2;
    if (*a2)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v25 = *a2;
    if (*a2)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
        goto LABEL_37;
    }
    else if (3 * v28 <= 4 * v27)
    {
      if (!(_DWORD)v28)
      {
        v29 = 8;
LABEL_40:
        result = (WTF::StringImpl *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a2, v29, v16);
        v16 = (WTF::StringImpl **)result;
        v25 = *a2;
        if (*a2)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
        goto LABEL_44;
      }
LABEL_37:
      v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
      goto LABEL_40;
    }
LABEL_44:
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v25 + 16 * v28;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  if (v17 != v12)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v22 = 0;
  else
    v22 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v8 + 16 * v22;
  *(_BYTE *)(a1 + 16) = 0;
  v23 = (WTF::StringImpl **)(v8 + 16 * v15 + 8);
  v24 = *a4;
  if (*a4)
    *(_DWORD *)v24 += 2;
  result = *v23;
  *v23 = v24;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = 0;
          v20 = *((_DWORD *)v14 + 4) >> 8;
          do
          {
            v21 = v20 & v18;
            v20 = ++v19 + v21;
          }
          while (*(_QWORD *)(v17 + 16 * v21));
          v22 = (WTF::StringImpl **)(v17 + 16 * v21);
          v23 = v22[1];
          v22[1] = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 != 2)
            {
              *(_DWORD *)v23 -= 2;
              goto LABEL_22;
            }
            WTF::StringImpl::destroy(v23, v10);
            v29 = *v22;
            *v22 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, v10);
              else
                *(_DWORD *)v29 -= 2;
            }
          }
          else
          {
LABEL_22:
            *v22 = 0;
          }
          v24 = *v13;
          *v13 = 0;
          *v22 = v24;
          v25 = v6 + 16 * v11;
          v26 = *(WTF::StringImpl **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v22[1] = v26;
          v27 = *(WTF::StringImpl **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v10);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = *v13;
          *v13 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v10);
            else
              *(_DWORD *)v28 -= 2;
          }
          if (v13 == a3)
            v12 = v22;
          goto LABEL_31;
        }
        v15 = v6 + 16 * v11;
        v16 = *(WTF::StringImpl **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
          {
            WTF::StringImpl::destroy(v16, v10);
            v14 = *v13;
          }
          else
          {
            *(_DWORD *)v16 -= 2;
          }
        }
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v10);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
LABEL_31:
      if (++v11 == v7)
        goto LABEL_42;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_42:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

WTF::StringImpl *WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WebCore::CSSPropertyID const&,WTF::String&>(uint64_t a1, uint64_t *a2, _WORD *a3, _DWORD **a4)
{
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  _DWORD *v19;
  WTF::StringImpl *result;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  _DWORD *v29;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = (unsigned __int16)*a3;
  v12 = 9 * ((~(v11 << 15) + v11) ^ ((~(v11 << 15) + v11) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (WTF::StringImpl *)(v8 + 16 * v14);
  v16 = *(unsigned __int16 *)v15;
  if (!*(_WORD *)v15)
  {
LABEL_12:
    *(_WORD *)v15 = v11;
    v19 = *a4;
    if (*a4)
      *v19 += 2;
    result = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v19;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    v21 = *a2;
    if (*a2)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v24 = *a2;
    if (*a2)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
        goto LABEL_28;
    }
    else if (3 * v27 <= 4 * v26)
    {
      if (!(_DWORD)v27)
      {
        v28 = 8;
LABEL_37:
        result = (WTF::StringImpl *)WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::rehash(a2, v28, v15);
        v15 = result;
        v24 = *a2;
        if (*a2)
          v27 = *(unsigned int *)(v24 - 4);
        else
          v27 = 0;
        goto LABEL_41;
      }
LABEL_28:
      v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
      goto LABEL_37;
    }
LABEL_41:
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v24 + 16 * v27;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  v17 = 0;
  v18 = 1;
  while (v16 != v11)
  {
    if (v16 == 0xFFFF)
      v17 = v15;
    v14 = (v14 + v18) & v10;
    v15 = (WTF::StringImpl *)(v8 + 16 * v14);
    v16 = *(unsigned __int16 *)v15;
    ++v18;
    if (!*(_WORD *)v15)
    {
      if (v17)
      {
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
        --*(_DWORD *)(*a2 - 16);
        LOWORD(v11) = *a3;
        v15 = v17;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v23 = 0;
  else
    v23 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v8 + 16 * v23;
  *(_BYTE *)(a1 + 16) = 0;
  v29 = *a4;
  if (*a4)
    *v29 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = v29;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::rehash(uint64_t *a1, unsigned int a2, _WORD *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  _WORD *v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = a3;
    do
    {
      v13 = (_WORD *)(v5 + 16 * v10);
      v14 = (unsigned __int16)*v13;
      if (v14 != 0xFFFF)
      {
        if (*v13)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = 0;
          v20 = 9 * ((~(v14 << 15) + v14) ^ ((~(v14 << 15) + v14) >> 10));
          v21 = ((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) ^ (((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) >> 16);
          do
          {
            v22 = v21 & v18;
            v21 = ++v19 + v22;
          }
          while (*(_WORD *)(v17 + 16 * v22));
          v23 = v17 + 16 * v22;
          v24 = *(WTF::StringImpl **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
            {
              WTF::StringImpl::destroy(v24, v9);
              v12 = a3;
            }
            else
            {
              *(_DWORD *)v24 -= 2;
            }
          }
          *(_WORD *)v23 = *v13;
          v25 = v5 + 16 * v10;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          *(_QWORD *)(v23 + 8) = v26;
          v27 = *(WTF::StringImpl **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
            {
              WTF::StringImpl::destroy(v27, v9);
              v12 = a3;
            }
            else
            {
              *(_DWORD *)v27 -= 2;
            }
          }
          if (v13 == v12)
            v11 = v23;
        }
        else
        {
          v15 = v5 + 16 * v10;
          v16 = *(WTF::StringImpl **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
            {
              WTF::StringImpl::destroy(v16, v9);
              v12 = a3;
            }
            else
            {
              *(_DWORD *)v16 -= 2;
            }
          }
        }
      }
      ++v10;
    }
    while (v10 != v6);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t WTF::Vector<WebCore::KeyframeEffect::PropertyAndValues,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = *(_QWORD *)a1 + 32 * v3;
    do
    {
      v6 = *((unsigned int *)v4 + 7);
      if ((_DWORD)v6)
      {
        v9 = (WTF::StringImpl **)*((_QWORD *)v4 + 2);
        v10 = 8 * v6;
        do
        {
          v11 = *v9;
          *v9 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, a2);
            else
              *(_DWORD *)v11 -= 2;
          }
          ++v9;
          v10 -= 8;
        }
        while (v10);
      }
      v7 = (WTF *)*((_QWORD *)v4 + 2);
      if (v7)
      {
        *((_QWORD *)v4 + 2) = 0;
        *((_DWORD *)v4 + 6) = 0;
        WTF::fastFree(v7, a2);
      }
      v8 = (WTF::StringImpl *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v4 = (WTF *)((char *)v4 + 32);
    }
    while (v4 != (WTF *)v5);
  }
  v12 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14KeyframeEffect18KeyframeLikeObjectENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;

  result = WTF::Vector<WebCore::KeyframeEffect::PropertyAndValues,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 18), (WTF::StringImpl *)a2);
  v4 = a2[16];
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, unsigned int *))off_1E3391A58[v4])(&v7, a2 + 12);
  a2[16] = -1;
  v5 = a2[10];
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, unsigned int *))off_1E3391A38[v5])(&v8, a2 + 6);
  a2[10] = -1;
  v6 = a2[4];
  if ((_DWORD)v6 != -1)
    result = ((uint64_t (*)(char *, unsigned int *))off_1E3391A08[v6])(&v9, a2);
  a2[4] = -1;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14KeyframeEffect18KeyframeLikeObjectENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WTF::VectorMover<false,WebCore::KeyframeEffect::ParsedKeyframe>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  _DWORD *v15;
  WTF *v16;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(_DWORD **)(v5 + 8);
      *(_QWORD *)a3 = *(_QWORD *)v5;
      if (v6)
        *v6 += 2;
      *(_QWORD *)(a3 + 8) = v6;
      *(_BYTE *)(a3 + 16) = *(_BYTE *)(v5 + 16);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(v5 + 24);
      WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable((uint64_t *)(a3 + 32), (unsigned __int16 **)(v5 + 32));
      WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable((uint64_t *)(a3 + 40), (_QWORD *)(v5 + 40));
      v8 = *(_QWORD *)(v5 + 48);
      if (v8)
        ++*(_DWORD *)(v8 + 8);
      *(_QWORD *)(a3 + 48) = v8;
      v9 = *(_DWORD **)(v5 + 56);
      ++*v9;
      *(_QWORD *)(a3 + 56) = v9;
      v10 = *(_QWORD *)(v5 + 56);
      *(_QWORD *)(v5 + 56) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          v12 = *(unsigned int *)(v10 + 28);
          if ((_DWORD)v12)
          {
            v13 = 16 * v12;
            v14 = (_DWORD **)(*(_QWORD *)(v10 + 16) + 8);
            do
            {
              v15 = *v14;
              *v14 = 0;
              if (v15)
              {
                if (*v15 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v7);
                else
                  *v15 -= 2;
              }
              v14 += 2;
              v13 -= 16;
            }
            while (v13);
          }
          v16 = *(WTF **)(v10 + 16);
          if ((WTF *)(v10 + 32) != v16 && v16 != 0)
          {
            *(_QWORD *)(v10 + 16) = 0;
            *(_DWORD *)(v10 + 24) = 0;
            WTF::fastFree(v16, v7);
          }
          v18 = *(_QWORD *)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          WTF::fastFree((WTF *)v10, v7);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
      v11 = *(_DWORD **)(v5 + 48);
      *(_QWORD *)(v5 + 48) = 0;
      if (v11)
      {
        if (v11[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
        else
          --v11[2];
      }
      WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe((WebCore::KeyframeEffect::ComputedKeyframe *)v5, v7);
      a3 += 64;
      v5 += 64;
    }
    while (v5 != a2);
  }
}

double _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN7WebCoreL31processPropertyIndexedKeyframesERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEERN3WTF6VectorINS2_14KeyframeEffect14ParsedKeyframeELm0ENSD_15CrashOnOverflowELm16ENSD_10FastMallocEEERNSE_INSD_6StringELm0ESH_Lm16ESI_EEEUlRT_RT0_E_PSG_Lb0EEEvT1_SV_SQ_NS_15iterator_traitsISV_E15difference_typeEb(uint64_t a1, double *a2, _DWORD **a3, char a4, double result)
{
  uint64_t *v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  WTF *v41;
  double v42;
  double *v43;
  double *v44;
  unint64_t v45;
  double v46;
  double *v47;
  double v48;
  uint64_t v49;
  double *v50;
  double v51;
  unint64_t v52;
  double v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  _DWORD *v60;
  _DWORD *v61;
  WTF *v62;
  uint64_t v63;
  WTF *v64;
  _DWORD *v65;
  BOOL ShouldStrongDestructorGrabLockE0EEERN3WTF6VectorINS2_14KeyframeEffect14ParsedKeyframeELm0ENSD_15CrashOnOverflowELm16ENSD_10FastMallocEEERNSE_INSD_6StringELm0ESH_Lm16ESI_EEEUlRT_RT0_E_PSG_EEbT1_SV_SQ;
  uint64_t v67;
  uint64_t v68;
  _DWORD **v69;
  _DWORD *v70;
  WTF *v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD **v76;
  _DWORD *v77;
  WTF *v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD **v83;
  _DWORD *v84;
  WTF *v85;
  uint64_t v87;
  _DWORD *v88;
  _DWORD *v89;
  WTF *v90;
  double *v91;
  double v92;
  double v93;
  unint64_t v94;
  double *v95;
  double v96;
  double *v97;
  double v98;
  unint64_t v99;
  double v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  _DWORD *v103;
  _DWORD *v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  _DWORD *v107;
  _DWORD *v108;
  WTF *v109;
  uint64_t v110;
  WTF *v111;
  _DWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _DWORD **v115;
  _DWORD *v116;
  WTF *v117;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD **v122;
  _DWORD *v123;
  WTF *v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _DWORD **v129;
  _DWORD *v130;
  WTF *v131;
  uint64_t v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  double *v140;
  uint64_t *v141;
  _DWORD *v142;
  WTF::StringImpl *v143;
  _DWORD *v144;
  WTF *v145;
  double *v146;
  double *v147;
  _DWORD *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  uint64_t v151;
  uint64_t v152;
  WTF::StringImpl **v153;
  WTF::StringImpl *v154;
  uint64_t v155;
  uint64_t v156;
  WTF::StringImpl **v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  uint64_t v160;
  _DWORD *v161;
  _DWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _DWORD **v166;
  _DWORD *v167;
  WTF *v168;
  uint64_t v170;
  WTF::StringImpl *v171;
  _DWORD *v172;
  _DWORD *v173;
  WTF *v174;
  uint64_t v175;
  WTF *v176;
  _DWORD *v177;
  uint64_t v178;
  uint64_t v179;
  _DWORD **v180;
  _DWORD *v181;
  WTF *v182;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _DWORD **v187;
  _DWORD *v188;
  WTF *v189;
  uint64_t v191;
  int64_t v192;
  int64_t v193;
  int64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  double v198;
  _DWORD *v199;
  uint64_t v200;
  _DWORD *v201;
  WTF *v202;
  uint64_t v203;
  WTF::StringImpl *v204;
  uint64_t v205;
  _DWORD *v206;
  _DWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _DWORD **v213;
  _DWORD *v214;
  WTF *v215;
  uint64_t v217;
  WTF::StringImpl *v218;
  _DWORD *v219;
  _DWORD *v220;
  WTF *v221;
  uint64_t v222;
  WTF *v223;
  _DWORD *v224;
  uint64_t v225;
  uint64_t v226;
  _DWORD **v227;
  _DWORD *v228;
  WTF *v229;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _DWORD **v234;
  _DWORD *v235;
  WTF *v236;
  uint64_t v238;
  _DWORD *v239;
  WTF::StringImpl *v240;
  _DWORD *v241;
  uint64_t v242;
  WTF *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _DWORD *v247;
  WTF::StringImpl *v248;
  WTF::StringImpl *v249;
  double v250;
  uint64_t v251;
  WTF::StringImpl **v252;
  WTF::StringImpl *v253;
  double v254;
  uint64_t v255;
  double v256;
  WTF::StringImpl *v257;
  WTF::StringImpl *v258;
  uint64_t v259;
  _DWORD *v260;
  _DWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _DWORD **v265;
  _DWORD *v266;
  WTF *v267;
  uint64_t v269;
  WTF::StringImpl *v270;
  uint64_t v271;
  _DWORD *v272;
  _DWORD *v273;
  uint64_t v274;
  WTF::StringImpl *v275;
  _DWORD *v276;
  _DWORD *v277;
  WTF *v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  double v283;
  _DWORD *v284;
  WTF::StringImpl *v285;
  _DWORD *v286;
  WTF *v287;
  _QWORD *v288;
  _DWORD *v289;
  WTF::StringImpl *v290;
  WTF::StringImpl *v291;
  uint64_t v292;
  uint64_t v293;
  WTF::StringImpl **v294;
  WTF::StringImpl *v295;
  uint64_t v296;
  uint64_t v297;
  WTF::StringImpl **v298;
  WTF::StringImpl *v299;
  WTF::StringImpl *v300;
  uint64_t v301;
  _DWORD *v302;
  _DWORD *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _DWORD **v307;
  _DWORD *v308;
  WTF *v309;
  uint64_t v311;
  _DWORD *v312;
  _DWORD *v313;
  WTF *v314;
  uint64_t v315;
  WTF::StringImpl *v316;
  _DWORD *v317;
  _DWORD *v318;
  WTF *v319;
  uint64_t v320;
  _DWORD *v321;
  WTF *v322;
  _DWORD *v323;
  uint64_t v325;
  uint64_t v326;
  _DWORD **v327;
  _DWORD *v328;
  WTF *v329;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _DWORD **v334;
  _DWORD *v335;
  WTF *v336;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  _DWORD **v341;
  _DWORD *v342;
  WTF *v343;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  _DWORD **v348;
  _DWORD *v349;
  WTF *v350;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  _DWORD **v355;
  _DWORD *v356;
  WTF *v357;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  _DWORD **v362;
  _DWORD *v363;
  WTF *v364;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  _DWORD *v372;
  WTF::StringImpl *v373;
  _DWORD *v374;
  WTF *v375;
  uint64_t v376;
  _DWORD *v377;
  WTF::StringImpl *v378;
  WTF::StringImpl *v379;
  uint64_t v380;
  uint64_t v381;
  WTF::StringImpl **v382;
  WTF::StringImpl *v383;
  uint64_t v384;
  uint64_t v385;
  WTF::StringImpl **v386;
  WTF::StringImpl *v387;
  WTF::StringImpl *v388;
  uint64_t v389;
  uint64_t v390;
  _DWORD **v391;
  uint64_t v392;
  _DWORD *v393;
  uint64_t v394;
  WTF **v395;
  _DWORD *v396;
  uint64_t v397;
  uint64_t v398;
  _DWORD *v399;
  WTF *v400;
  uint64_t v402;
  WTF::StringImpl *v403;
  _DWORD *v404;
  _DWORD *v405;
  WTF *v406;
  WTF *v407;
  _DWORD *v408;
  uint64_t v409;
  uint64_t v410;
  _DWORD *v411;
  WTF *v412;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  _DWORD *v417;
  WTF *v418;
  uint64_t v420;
  uint64_t *v421;
  uint64_t *v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  double *v427;
  uint64_t v429;
  uint64_t v430[2];
  char v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  _DWORD *v435;
  WTF *v436;
  uint64_t v437;
  double v438;
  _DWORD *v439;
  char v440;
  double v441;
  uint64_t v442;
  uint64_t v443;
  _DWORD *v444;
  WTF *v445;

  v8 = &v442;
LABEL_2:
  v9 = (uint64_t)(a2 - 8);
  v10 = (double *)a1;
  while (2)
  {
    a1 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 6;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = *(a2 - 5);
        if (result < *(double *)(a1 + 24))
          goto LABEL_256;
        return result;
      case 3uLL:
        a3 = (_DWORD **)(a1 + 64);
        result = *(double *)(a1 + 88);
        v134 = *(a2 - 5);
        if (result < *(double *)(a1 + 24))
        {
          if (v134 >= result)
            goto LABEL_876;
LABEL_256:
          v135 = a1;
          goto LABEL_257;
        }
        if (v134 < result)
        {
          v137 = a1 + 64;
          v138 = v9;
          goto LABEL_755;
        }
        return result;
      case 4uLL:
        _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL31processPropertyIndexedKeyframesERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEERN3WTF6VectorINS2_14KeyframeEffect14ParsedKeyframeELm0ENSD_15CrashOnOverflowELm16ENSD_10FastMallocEEERNSE_INSD_6StringELm0ESH_Lm16ESI_EEEUlRT_RT0_E_PSG_EEvT1_SV_SV_SV_SQ_(a1, a1 + 64, a1 + 128, v9);
        return result;
      case 5uLL:
        a3 = (_DWORD **)(a1 + 64);
        _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL31processPropertyIndexedKeyframesERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEERN3WTF6VectorINS2_14KeyframeEffect14ParsedKeyframeELm0ENSD_15CrashOnOverflowELm16ENSD_10FastMallocEEERNSE_INSD_6StringELm0ESH_Lm16ESI_EEEUlRT_RT0_E_PSG_EEvT1_SV_SV_SV_SQ_(a1, a1 + 64, a1 + 128, a1 + 192);
        result = *(a2 - 5);
        if (result < *(double *)(a1 + 216))
        {
          std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(a1 + 192, v9);
          result = *(double *)(a1 + 216);
          if (result < *(double *)(a1 + 152))
          {
            std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(a1 + 128, a1 + 192);
            result = *(double *)(a1 + 152);
            if (result < *(double *)(a1 + 88))
            {
              v137 = a1 + 64;
              v138 = a1 + 128;
LABEL_755:
              std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(v137, v138);
              result = *(double *)(a1 + 88);
              if (result < *(double *)(a1 + 24))
              {
                v135 = a1;
                v136 = (uint64_t)a3;
                goto LABEL_258;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 1535)
        {
          if ((a4 & 1) != 0)
          {
            if ((double *)a1 != a2)
            {
              v139 = (uint64_t *)(a1 + 64);
              if ((double *)(a1 + 64) != a2)
              {
                v140 = (double *)a1;
                do
                {
                  v141 = v139;
                  result = v140[11];
                  if (result < v140[3])
                  {
                    v438 = *(double *)v139;
                    v142 = (_DWORD *)*((_QWORD *)v140 + 9);
                    if (v142)
                      *v142 += 2;
                    v439 = v142;
                    v440 = *((_BYTE *)v140 + 80);
                    v441 = v140[11];
                    WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable(&v442, (unsigned __int16 **)v140 + 12);
                    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(&v443, (_QWORD *)v140 + 13);
                    v144 = (_DWORD *)*((_QWORD *)v140 + 14);
                    if (v144)
                      ++v144[2];
                    v444 = v144;
                    v145 = (WTF *)*((_QWORD *)v140 + 15);
                    ++*(_DWORD *)v145;
                    v445 = v145;
                    v146 = (double *)v141;
                    while (1)
                    {
                      v147 = v140;
                      *v146 = *v140;
                      v148 = (_DWORD *)*((_QWORD *)v140 + 1);
                      if (v148)
                        *v148 += 2;
                      v149 = (WTF::StringImpl *)*((_QWORD *)v146 + 1);
                      *((_QWORD *)v146 + 1) = v148;
                      if (v149)
                      {
                        if (*(_DWORD *)v149 == 2)
                          WTF::StringImpl::destroy(v149, v143);
                        else
                          *(_DWORD *)v149 -= 2;
                      }
                      *((_BYTE *)v146 + 16) = *((_BYTE *)v140 + 16);
                      v146[3] = v140[3];
                      WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable(v430, (unsigned __int16 **)v140 + 4);
                      v151 = *((_QWORD *)v146 + 4);
                      v146[4] = *(double *)v430;
                      v430[0] = v151;
                      if (v151)
                      {
                        v152 = *(unsigned int *)(v151 - 4);
                        if ((_DWORD)v152)
                        {
                          v153 = (WTF::StringImpl **)(v151 + 8);
                          do
                          {
                            if (*((__int16 *)v153 - 4) != -1)
                            {
                              v154 = *v153;
                              *v153 = 0;
                              if (v154)
                              {
                                if (*(_DWORD *)v154 == 2)
                                  WTF::StringImpl::destroy(v154, v150);
                                else
                                  *(_DWORD *)v154 -= 2;
                              }
                            }
                            v153 += 2;
                            --v152;
                          }
                          while (v152);
                        }
                        WTF::fastFree((WTF *)(v151 - 16), v150);
                      }
                      WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(v430, (_QWORD *)v147 + 5);
                      v155 = *((_QWORD *)v146 + 5);
                      v146[5] = *(double *)v430;
                      v430[0] = v155;
                      if (v155)
                      {
                        v156 = *(unsigned int *)(v155 - 4);
                        if ((_DWORD)v156)
                        {
                          v157 = (WTF::StringImpl **)v155;
                          do
                          {
                            v158 = *v157;
                            if (*v157 != (WTF::StringImpl *)-1)
                            {
                              v159 = v157[1];
                              v157[1] = 0;
                              if (v159)
                              {
                                if (*(_DWORD *)v159 == 2)
                                {
                                  WTF::StringImpl::destroy(v159, v143);
                                  v158 = *v157;
                                }
                                else
                                {
                                  *(_DWORD *)v159 -= 2;
                                }
                              }
                              *v157 = 0;
                              if (v158)
                              {
                                if (*(_DWORD *)v158 == 2)
                                  WTF::StringImpl::destroy(v158, v143);
                                else
                                  *(_DWORD *)v158 -= 2;
                              }
                            }
                            v157 += 2;
                            --v156;
                          }
                          while (v156);
                        }
                        WTF::fastFree((WTF *)(v155 - 16), v143);
                      }
                      v160 = *((_QWORD *)v147 + 6);
                      if (v160)
                        ++*(_DWORD *)(v160 + 8);
                      v161 = (_DWORD *)*((_QWORD *)v146 + 6);
                      *((_QWORD *)v146 + 6) = v160;
                      if (v161)
                      {
                        if (v161[2] == 1)
                          (*(void (**)(_DWORD *))(*(_QWORD *)v161 + 16))(v161);
                        else
                          --v161[2];
                      }
                      v162 = (_DWORD *)*((_QWORD *)v147 + 7);
                      ++*v162;
                      v163 = *((_QWORD *)v146 + 7);
                      *((_QWORD *)v146 + 7) = v162;
                      if (v163)
                      {
                        if (*(_DWORD *)v163 == 1)
                        {
                          v164 = *(unsigned int *)(v163 + 28);
                          if ((_DWORD)v164)
                          {
                            v165 = 16 * v164;
                            v166 = (_DWORD **)(*(_QWORD *)(v163 + 16) + 8);
                            do
                            {
                              v167 = *v166;
                              *v166 = 0;
                              if (v167)
                              {
                                if (*v167 == 2)
                                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v167, v143);
                                else
                                  *v167 -= 2;
                              }
                              v166 += 2;
                              v165 -= 16;
                            }
                            while (v165);
                          }
                          v168 = *(WTF **)(v163 + 16);
                          if ((WTF *)(v163 + 32) != v168 && v168 != 0)
                          {
                            *(_QWORD *)(v163 + 16) = 0;
                            *(_DWORD *)(v163 + 24) = 0;
                            WTF::fastFree(v168, v143);
                          }
                          v170 = *(_QWORD *)(v163 + 8);
                          *(_QWORD *)(v163 + 8) = 0;
                          if (v170)
                            (*(void (**)(uint64_t))(*(_QWORD *)v170 + 8))(v170);
                          WTF::fastFree((WTF *)v163, v143);
                        }
                        else
                        {
                          --*(_DWORD *)v163;
                        }
                      }
                      if (v147 == (double *)a1)
                        break;
                      v140 = v147 - 8;
                      v146 = v147;
                      if (v441 >= *(v147 - 5))
                        goto LABEL_334;
                    }
                    v147 = (double *)a1;
LABEL_334:
                    WebCore::KeyframeEffect::ComputedKeyframe::operator=((uint64_t)v147, (uint64_t)&v438);
                    v172 = v444;
                    if (v444)
                      ++v444[2];
                    v173 = (_DWORD *)*((_QWORD *)v147 + 6);
                    *((_QWORD *)v147 + 6) = v172;
                    if (v173)
                    {
                      if (v173[2] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v173 + 16))(v173);
                      else
                        --v173[2];
                    }
                    v174 = v445;
                    ++*(_DWORD *)v445;
                    v175 = *((_QWORD *)v147 + 7);
                    *((_QWORD *)v147 + 7) = v174;
                    if (v175)
                    {
                      if (*(_DWORD *)v175 == 1)
                      {
                        v178 = *(unsigned int *)(v175 + 28);
                        if ((_DWORD)v178)
                        {
                          v179 = 16 * v178;
                          v180 = (_DWORD **)(*(_QWORD *)(v175 + 16) + 8);
                          do
                          {
                            v181 = *v180;
                            *v180 = 0;
                            if (v181)
                            {
                              if (*v181 == 2)
                                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v181, v171);
                              else
                                *v181 -= 2;
                            }
                            v180 += 2;
                            v179 -= 16;
                          }
                          while (v179);
                        }
                        v182 = *(WTF **)(v175 + 16);
                        if ((WTF *)(v175 + 32) != v182 && v182 != 0)
                        {
                          *(_QWORD *)(v175 + 16) = 0;
                          *(_DWORD *)(v175 + 24) = 0;
                          WTF::fastFree(v182, v171);
                        }
                        v184 = *(_QWORD *)(v175 + 8);
                        *(_QWORD *)(v175 + 8) = 0;
                        if (v184)
                          (*(void (**)(uint64_t))(*(_QWORD *)v184 + 8))(v184);
                        WTF::fastFree((WTF *)v175, v171);
                      }
                      else
                      {
                        --*(_DWORD *)v175;
                      }
                    }
                    v176 = v445;
                    v445 = 0;
                    if (v176)
                    {
                      if (*(_DWORD *)v176 == 1)
                      {
                        v185 = *((unsigned int *)v176 + 7);
                        if ((_DWORD)v185)
                        {
                          v186 = 16 * v185;
                          v187 = (_DWORD **)(*((_QWORD *)v176 + 2) + 8);
                          do
                          {
                            v188 = *v187;
                            *v187 = 0;
                            if (v188)
                            {
                              if (*v188 == 2)
                                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v188, v171);
                              else
                                *v188 -= 2;
                            }
                            v187 += 2;
                            v186 -= 16;
                          }
                          while (v186);
                        }
                        v189 = (WTF *)*((_QWORD *)v176 + 2);
                        if ((WTF *)((char *)v176 + 32) != v189 && v189 != 0)
                        {
                          *((_QWORD *)v176 + 2) = 0;
                          *((_DWORD *)v176 + 6) = 0;
                          WTF::fastFree(v189, v171);
                        }
                        v191 = *((_QWORD *)v176 + 1);
                        *((_QWORD *)v176 + 1) = 0;
                        if (v191)
                          (*(void (**)(uint64_t))(*(_QWORD *)v191 + 8))(v191);
                        WTF::fastFree(v176, v171);
                      }
                      else
                      {
                        --*(_DWORD *)v176;
                      }
                    }
                    v177 = v444;
                    v444 = 0;
                    if (v177)
                    {
                      if (v177[2] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v177 + 16))(v177);
                      else
                        --v177[2];
                    }
                    WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe((WebCore::KeyframeEffect::ComputedKeyframe *)&v438, v171);
                  }
                  v139 = v141 + 8;
                  v140 = (double *)v141;
                }
                while (v141 + 8 != (uint64_t *)a2);
              }
            }
            return result;
          }
          if ((double *)a1 == a2)
            return result;
          v367 = a1 + 64;
          if ((double *)(a1 + 64) == a2)
            return result;
          v368 = 0;
          v369 = 1;
          v370 = a1;
          while (1)
          {
            v371 = v369;
            result = *(double *)(v370 + 88);
            if (result < *(double *)(v370 + 24))
              break;
LABEL_840:
            v370 = a1 + (v371 << 6);
            v369 = v371 + 1;
            v367 = a1 + ((v371 + 1) << 6);
            v368 = v371;
            if ((double *)v367 == a2)
              return result;
          }
          v438 = *(double *)v367;
          v372 = *(_DWORD **)(v370 + 72);
          if (v372)
            *v372 += 2;
          v439 = v372;
          v440 = *(_BYTE *)(v370 + 80);
          v441 = result;
          WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable(&v442, (unsigned __int16 **)(v370 + 96));
          WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(&v443, (_QWORD *)(v370 + 104));
          v374 = *(_DWORD **)(v370 + 112);
          if (v374)
            ++v374[2];
          v444 = v374;
          v375 = *(WTF **)(v370 + 120);
          ++*(_DWORD *)v375;
          v445 = v375;
          do
          {
            v376 = a1 + (v368 << 6);
            *(_QWORD *)v367 = *(_QWORD *)v376;
            v377 = *(_DWORD **)(v376 + 8);
            if (v377)
              *v377 += 2;
            v378 = *(WTF::StringImpl **)(v367 + 8);
            *(_QWORD *)(v367 + 8) = v377;
            if (v378)
            {
              if (*(_DWORD *)v378 == 2)
                WTF::StringImpl::destroy(v378, v373);
              else
                *(_DWORD *)v378 -= 2;
            }
            *(_BYTE *)(v367 + 16) = *(_BYTE *)(v376 + 16);
            *(_QWORD *)(v367 + 24) = *(_QWORD *)(v376 + 24);
            WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable(v430, (unsigned __int16 **)(v376 + 32));
            v380 = *(_QWORD *)(v367 + 32);
            *(_QWORD *)(v367 + 32) = v430[0];
            v430[0] = v380;
            if (v380)
            {
              v381 = *(unsigned int *)(v380 - 4);
              if ((_DWORD)v381)
              {
                v382 = (WTF::StringImpl **)(v380 + 8);
                do
                {
                  if (*((__int16 *)v382 - 4) != -1)
                  {
                    v383 = *v382;
                    *v382 = 0;
                    if (v383)
                    {
                      if (*(_DWORD *)v383 == 2)
                        WTF::StringImpl::destroy(v383, v379);
                      else
                        *(_DWORD *)v383 -= 2;
                    }
                  }
                  v382 += 2;
                  --v381;
                }
                while (v381);
              }
              WTF::fastFree((WTF *)(v380 - 16), v379);
            }
            WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(v430, (_QWORD *)(v376 + 40));
            v384 = *(_QWORD *)(v367 + 40);
            *(_QWORD *)(v367 + 40) = v430[0];
            v430[0] = v384;
            if (v384)
            {
              v385 = *(unsigned int *)(v384 - 4);
              if ((_DWORD)v385)
              {
                v386 = (WTF::StringImpl **)v384;
                do
                {
                  v387 = *v386;
                  if (*v386 != (WTF::StringImpl *)-1)
                  {
                    v388 = v386[1];
                    v386[1] = 0;
                    if (v388)
                    {
                      if (*(_DWORD *)v388 == 2)
                      {
                        WTF::StringImpl::destroy(v388, v373);
                        v387 = *v386;
                      }
                      else
                      {
                        *(_DWORD *)v388 -= 2;
                      }
                    }
                    *v386 = 0;
                    if (v387)
                    {
                      if (*(_DWORD *)v387 == 2)
                        WTF::StringImpl::destroy(v387, v373);
                      else
                        *(_DWORD *)v387 -= 2;
                    }
                  }
                  v386 += 2;
                  --v385;
                }
                while (v385);
              }
              WTF::fastFree((WTF *)(v384 - 16), v373);
            }
            v389 = a1 + (v368 << 6);
            v392 = *(_QWORD *)(v389 + 48);
            v391 = (_DWORD **)(v389 + 48);
            v390 = v392;
            if (v392)
              ++*(_DWORD *)(v390 + 8);
            v393 = *(_DWORD **)(v367 + 48);
            *(_QWORD *)(v367 + 48) = v390;
            if (v393)
            {
              if (v393[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v393 + 16))(v393);
              else
                --v393[2];
            }
            v394 = a1 + (v368 << 6);
            v396 = *(_DWORD **)(v394 + 56);
            v395 = (WTF **)(v394 + 56);
            ++*v396;
            v9 = *(_QWORD *)(v367 + 56);
            *(_QWORD *)(v367 + 56) = v396;
            if (v9)
            {
              if (*(_DWORD *)v9 == 1)
              {
                v397 = *(unsigned int *)(v9 + 28);
                if ((_DWORD)v397)
                {
                  v398 = 16 * v397;
                  a3 = (_DWORD **)(*(_QWORD *)(v9 + 16) + 8);
                  do
                  {
                    v399 = *a3;
                    *a3 = 0;
                    if (v399)
                    {
                      if (*v399 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v399, v373);
                      else
                        *v399 -= 2;
                    }
                    a3 += 2;
                    v398 -= 16;
                  }
                  while (v398);
                }
                v400 = *(WTF **)(v9 + 16);
                if ((WTF *)(v9 + 32) != v400 && v400 != 0)
                {
                  *(_QWORD *)(v9 + 16) = 0;
                  *(_DWORD *)(v9 + 24) = 0;
                  WTF::fastFree(v400, v373);
                }
                v402 = *(_QWORD *)(v9 + 8);
                *(_QWORD *)(v9 + 8) = 0;
                if (v402)
                  (*(void (**)(uint64_t))(*(_QWORD *)v402 + 8))(v402);
                WTF::fastFree((WTF *)v9, v373);
              }
              else
              {
                --*(_DWORD *)v9;
              }
            }
            if (v368 == -1)
              goto LABEL_875;
            --v368;
            v367 = v376;
          }
          while (v441 < *(double *)(a1 + (v368 << 6) + 24));
          WebCore::KeyframeEffect::ComputedKeyframe::operator=(v376, (uint64_t)&v438);
          v404 = v444;
          if (v444)
            ++v444[2];
          v405 = *v391;
          *v391 = v404;
          if (v405)
          {
            if (v405[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v405 + 16))(v405);
            else
              --v405[2];
          }
          v406 = v445;
          ++*(_DWORD *)v445;
          v407 = *v395;
          *v395 = v406;
          if (v407)
          {
            if (*(_DWORD *)v407 == 1)
            {
              v409 = *((unsigned int *)v407 + 7);
              if ((_DWORD)v409)
              {
                v410 = 16 * v409;
                a3 = (_DWORD **)(*((_QWORD *)v407 + 2) + 8);
                do
                {
                  v411 = *a3;
                  *a3 = 0;
                  if (v411)
                  {
                    if (*v411 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v411, v403);
                    else
                      *v411 -= 2;
                  }
                  a3 += 2;
                  v410 -= 16;
                }
                while (v410);
              }
              v412 = (WTF *)*((_QWORD *)v407 + 2);
              if ((WTF *)((char *)v407 + 32) != v412 && v412 != 0)
              {
                *((_QWORD *)v407 + 2) = 0;
                *((_DWORD *)v407 + 6) = 0;
                WTF::fastFree(v412, v403);
              }
              v414 = *((_QWORD *)v407 + 1);
              *((_QWORD *)v407 + 1) = 0;
              if (v414)
                (*(void (**)(uint64_t))(*(_QWORD *)v414 + 8))(v414);
              WTF::fastFree(v407, v403);
              v406 = v445;
              v445 = 0;
              if (!v406)
                goto LABEL_836;
              goto LABEL_834;
            }
            --*(_DWORD *)v407;
          }
          v445 = 0;
LABEL_834:
          if (*(_DWORD *)v406 == 1)
          {
            v415 = *((unsigned int *)v406 + 7);
            if ((_DWORD)v415)
            {
              v416 = 16 * v415;
              a3 = (_DWORD **)(*((_QWORD *)v406 + 2) + 8);
              do
              {
                v417 = *a3;
                *a3 = 0;
                if (v417)
                {
                  if (*v417 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v417, v403);
                  else
                    *v417 -= 2;
                }
                a3 += 2;
                v416 -= 16;
              }
              while (v416);
            }
            v418 = (WTF *)*((_QWORD *)v406 + 2);
            if ((WTF *)((char *)v406 + 32) != v418 && v418 != 0)
            {
              *((_QWORD *)v406 + 2) = 0;
              *((_DWORD *)v406 + 6) = 0;
              WTF::fastFree(v418, v403);
            }
            v420 = *((_QWORD *)v406 + 1);
            *((_QWORD *)v406 + 1) = 0;
            if (v420)
              (*(void (**)(uint64_t))(*(_QWORD *)v420 + 8))(v420);
            WTF::fastFree(v406, v403);
          }
          else
          {
            --*(_DWORD *)v406;
          }
LABEL_836:
          v408 = v444;
          v444 = 0;
          if (v408)
          {
            if (v408[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v408 + 16))(v408);
            else
              --v408[2];
          }
          WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe((WebCore::KeyframeEffect::ComputedKeyframe *)&v438, v403);
          goto LABEL_840;
        }
        if (!a3)
        {
          if ((double *)a1 == a2)
            return result;
          v192 = (v12 - 2) >> 1;
          v193 = v192;
          do
          {
            v194 = v193;
            if (v192 >= v193)
            {
              v195 = (2 * v193) | 1;
              v196 = a1 + (v195 << 6);
              if (2 * v193 + 2 < (uint64_t)v12 && *(double *)(v196 + 24) < *(double *)(v196 + 88))
              {
                v196 += 64;
                v195 = 2 * v193 + 2;
              }
              v197 = a1 + (v193 << 6);
              v198 = *(double *)(v197 + 24);
              if (*(double *)(v196 + 24) >= v198)
              {
                v438 = *(double *)v197;
                v199 = *(_DWORD **)(v197 + 8);
                if (v199)
                  *v199 += 2;
                v439 = v199;
                v440 = *(_BYTE *)(v197 + 16);
                v441 = v198;
                WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable(&v442, (unsigned __int16 **)(v197 + 32));
                WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(&v443, (_QWORD *)(v197 + 40));
                v200 = a1 + (v194 << 6);
                v201 = *(_DWORD **)(v200 + 48);
                if (v201)
                  ++v201[2];
                v444 = v201;
                v202 = *(WTF **)(v200 + 56);
                ++*(_DWORD *)v202;
                v445 = v202;
                do
                {
                  v203 = v196;
                  WebCore::KeyframeEffect::ComputedKeyframe::operator=(v197, v196);
                  v205 = *(_QWORD *)(v196 + 48);
                  if (v205)
                    ++*(_DWORD *)(v205 + 8);
                  v206 = *(_DWORD **)(v197 + 48);
                  *(_QWORD *)(v197 + 48) = v205;
                  if (v206)
                  {
                    if (v206[2] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v206 + 16))(v206);
                    else
                      --v206[2];
                  }
                  v207 = *(_DWORD **)(v196 + 56);
                  ++*v207;
                  v208 = *(_QWORD *)(v197 + 56);
                  *(_QWORD *)(v197 + 56) = v207;
                  if (v208)
                  {
                    if (*(_DWORD *)v208 == 1)
                    {
                      v211 = *(unsigned int *)(v208 + 28);
                      if ((_DWORD)v211)
                      {
                        v212 = 16 * v211;
                        v213 = (_DWORD **)(*(_QWORD *)(v208 + 16) + 8);
                        do
                        {
                          v214 = *v213;
                          *v213 = 0;
                          if (v214)
                          {
                            if (*v214 == 2)
                              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v214, v204);
                            else
                              *v214 -= 2;
                          }
                          v213 += 2;
                          v212 -= 16;
                        }
                        while (v212);
                      }
                      v215 = *(WTF **)(v208 + 16);
                      if ((WTF *)(v208 + 32) != v215 && v215 != 0)
                      {
                        *(_QWORD *)(v208 + 16) = 0;
                        *(_DWORD *)(v208 + 24) = 0;
                        WTF::fastFree(v215, v204);
                      }
                      v217 = *(_QWORD *)(v208 + 8);
                      *(_QWORD *)(v208 + 8) = 0;
                      v192 = (v12 - 2) >> 1;
                      if (v217)
                        (*(void (**)(uint64_t))(*(_QWORD *)v217 + 8))(v217);
                      WTF::fastFree((WTF *)v208, v204);
                    }
                    else
                    {
                      --*(_DWORD *)v208;
                    }
                  }
                  if (v192 < v195)
                    break;
                  v209 = 2 * v195;
                  v195 = (2 * v195) | 1;
                  v196 = a1 + (v195 << 6);
                  v210 = v209 + 2;
                  if (v210 < (uint64_t)v12 && *(double *)(v196 + 24) < *(double *)(v196 + 88))
                  {
                    v196 += 64;
                    v195 = v210;
                  }
                  v197 = v203;
                }
                while (*(double *)(v196 + 24) >= v441);
                WebCore::KeyframeEffect::ComputedKeyframe::operator=(v203, (uint64_t)&v438);
                v219 = v444;
                if (v444)
                  ++v444[2];
                v220 = *(_DWORD **)(v203 + 48);
                *(_QWORD *)(v203 + 48) = v219;
                if (v220)
                {
                  if (v220[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v220 + 16))(v220);
                  else
                    --v220[2];
                }
                v221 = v445;
                ++*(_DWORD *)v445;
                v222 = *(_QWORD *)(v203 + 56);
                *(_QWORD *)(v203 + 56) = v221;
                if (v222)
                {
                  if (*(_DWORD *)v222 == 1)
                  {
                    v225 = *(unsigned int *)(v222 + 28);
                    if ((_DWORD)v225)
                    {
                      v226 = 16 * v225;
                      v227 = (_DWORD **)(*(_QWORD *)(v222 + 16) + 8);
                      do
                      {
                        v228 = *v227;
                        *v227 = 0;
                        if (v228)
                        {
                          if (*v228 == 2)
                            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v228, v218);
                          else
                            *v228 -= 2;
                        }
                        v227 += 2;
                        v226 -= 16;
                      }
                      while (v226);
                    }
                    v229 = *(WTF **)(v222 + 16);
                    if ((WTF *)(v222 + 32) != v229 && v229 != 0)
                    {
                      *(_QWORD *)(v222 + 16) = 0;
                      *(_DWORD *)(v222 + 24) = 0;
                      WTF::fastFree(v229, v218);
                    }
                    v231 = *(_QWORD *)(v222 + 8);
                    *(_QWORD *)(v222 + 8) = 0;
                    if (v231)
                      (*(void (**)(uint64_t))(*(_QWORD *)v231 + 8))(v231);
                    WTF::fastFree((WTF *)v222, v218);
                  }
                  else
                  {
                    --*(_DWORD *)v222;
                  }
                }
                v223 = v445;
                v445 = 0;
                if (v223)
                {
                  if (*(_DWORD *)v223 == 1)
                  {
                    v232 = *((unsigned int *)v223 + 7);
                    if ((_DWORD)v232)
                    {
                      v233 = 16 * v232;
                      v234 = (_DWORD **)(*((_QWORD *)v223 + 2) + 8);
                      do
                      {
                        v235 = *v234;
                        *v234 = 0;
                        if (v235)
                        {
                          if (*v235 == 2)
                            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v235, v218);
                          else
                            *v235 -= 2;
                        }
                        v234 += 2;
                        v233 -= 16;
                      }
                      while (v233);
                    }
                    v236 = (WTF *)*((_QWORD *)v223 + 2);
                    if ((WTF *)((char *)v223 + 32) != v236 && v236 != 0)
                    {
                      *((_QWORD *)v223 + 2) = 0;
                      *((_DWORD *)v223 + 6) = 0;
                      WTF::fastFree(v236, v218);
                    }
                    v238 = *((_QWORD *)v223 + 1);
                    *((_QWORD *)v223 + 1) = 0;
                    if (v238)
                      (*(void (**)(uint64_t))(*(_QWORD *)v238 + 8))(v238);
                    WTF::fastFree(v223, v218);
                  }
                  else
                  {
                    --*(_DWORD *)v223;
                  }
                }
                v224 = v444;
                v444 = 0;
                if (v224)
                {
                  if (v224[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v224 + 16))(v224);
                  else
                    --v224[2];
                }
                WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe((WebCore::KeyframeEffect::ComputedKeyframe *)&v438, v218);
              }
            }
            v193 = v194 - 1;
          }
          while (v194);
          v429 = (unint64_t)v11 >> 6;
LABEL_474:
          v239 = *(_DWORD **)(a1 + 8);
          v430[0] = *(_QWORD *)a1;
          if (v239)
            *v239 += 2;
          v427 = a2;
          v430[1] = (uint64_t)v239;
          v431 = *(_BYTE *)(a1 + 16);
          v432 = *(_QWORD *)(a1 + 24);
          WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable(&v433, (unsigned __int16 **)(a1 + 32));
          WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(&v434, (_QWORD *)(a1 + 40));
          v241 = *(_DWORD **)(a1 + 48);
          if (v241)
            ++v241[2];
          v242 = 0;
          v435 = v241;
          v243 = *(WTF **)(a1 + 56);
          ++*(_DWORD *)v243;
          v436 = v243;
          v244 = a1;
          do
          {
            v245 = v244;
            v244 += (v242 << 6) + 64;
            v246 = 2 * v242;
            v242 = (2 * v242) | 1;
            if (v246 + 2 < v429 && *(double *)(v244 + 24) < *(double *)(v244 + 88))
            {
              v244 += 64;
              v242 = v246 + 2;
            }
            *(_QWORD *)v245 = *(_QWORD *)v244;
            v247 = *(_DWORD **)(v244 + 8);
            if (v247)
              *v247 += 2;
            v248 = *(WTF::StringImpl **)(v245 + 8);
            *(_QWORD *)(v245 + 8) = v247;
            if (v248)
            {
              if (*(_DWORD *)v248 == 2)
                WTF::StringImpl::destroy(v248, v240);
              else
                *(_DWORD *)v248 -= 2;
            }
            *(_BYTE *)(v245 + 16) = *(_BYTE *)(v244 + 16);
            *(_QWORD *)(v245 + 24) = *(_QWORD *)(v244 + 24);
            WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable((uint64_t *)&v438, (unsigned __int16 **)(v244 + 32));
            v250 = *(double *)(v245 + 32);
            *(double *)(v245 + 32) = v438;
            v438 = v250;
            if (v250 != 0.0)
            {
              v251 = *(unsigned int *)(*(_QWORD *)&v250 - 4);
              if ((_DWORD)v251)
              {
                v252 = (WTF::StringImpl **)(*(_QWORD *)&v250 + 8);
                do
                {
                  if (*((__int16 *)v252 - 4) != -1)
                  {
                    v253 = *v252;
                    *v252 = 0;
                    if (v253)
                    {
                      if (*(_DWORD *)v253 == 2)
                        WTF::StringImpl::destroy(v253, v249);
                      else
                        *(_DWORD *)v253 -= 2;
                    }
                  }
                  v252 += 2;
                  --v251;
                }
                while (v251);
              }
              WTF::fastFree((WTF *)(*(_QWORD *)&v250 - 16), v249);
            }
            WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable((uint64_t *)&v438, (_QWORD *)(v244 + 40));
            v254 = *(double *)(v245 + 40);
            *(double *)(v245 + 40) = v438;
            v438 = v254;
            if (v254 != 0.0)
            {
              v255 = *(unsigned int *)(*(_QWORD *)&v254 - 4);
              if ((_DWORD)v255)
              {
                v256 = v254;
                do
                {
                  v257 = **(WTF::StringImpl ***)&v256;
                  if (**(_QWORD **)&v256 != -1)
                  {
                    v258 = *(WTF::StringImpl **)(*(_QWORD *)&v256 + 8);
                    *(_QWORD *)(*(_QWORD *)&v256 + 8) = 0;
                    if (v258)
                    {
                      if (*(_DWORD *)v258 == 2)
                      {
                        WTF::StringImpl::destroy(v258, v240);
                        v257 = **(WTF::StringImpl ***)&v256;
                      }
                      else
                      {
                        *(_DWORD *)v258 -= 2;
                      }
                    }
                    **(_QWORD **)&v256 = 0;
                    if (v257)
                    {
                      if (*(_DWORD *)v257 == 2)
                        WTF::StringImpl::destroy(v257, v240);
                      else
                        *(_DWORD *)v257 -= 2;
                    }
                  }
                  *(_QWORD *)&v256 += 16;
                  --v255;
                }
                while (v255);
              }
              WTF::fastFree((WTF *)(*(_QWORD *)&v254 - 16), v240);
            }
            v259 = *(_QWORD *)(v244 + 48);
            if (v259)
              ++*(_DWORD *)(v259 + 8);
            v260 = *(_DWORD **)(v245 + 48);
            *(_QWORD *)(v245 + 48) = v259;
            if (v260)
            {
              if (v260[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v260 + 16))(v260);
              else
                --v260[2];
            }
            v261 = *(_DWORD **)(v244 + 56);
            ++*v261;
            v262 = *(_QWORD *)(v245 + 56);
            *(_QWORD *)(v245 + 56) = v261;
            if (v262)
            {
              if (*(_DWORD *)v262 == 1)
              {
                v263 = *(unsigned int *)(v262 + 28);
                if ((_DWORD)v263)
                {
                  v264 = 16 * v263;
                  v265 = (_DWORD **)(*(_QWORD *)(v262 + 16) + 8);
                  do
                  {
                    v266 = *v265;
                    *v265 = 0;
                    if (v266)
                    {
                      if (*v266 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v266, v240);
                      else
                        *v266 -= 2;
                    }
                    v265 += 2;
                    v264 -= 16;
                  }
                  while (v264);
                }
                v267 = *(WTF **)(v262 + 16);
                if ((WTF *)(v262 + 32) != v267 && v267 != 0)
                {
                  *(_QWORD *)(v262 + 16) = 0;
                  *(_DWORD *)(v262 + 24) = 0;
                  WTF::fastFree(v267, v240);
                }
                v269 = *(_QWORD *)(v262 + 8);
                *(_QWORD *)(v262 + 8) = 0;
                if (v269)
                  (*(void (**)(uint64_t))(*(_QWORD *)v269 + 8))(v269);
                WTF::fastFree((WTF *)v262, v240);
              }
              else
              {
                --*(_DWORD *)v262;
              }
            }
          }
          while (v242 <= (uint64_t)((unint64_t)(v429 - 2) >> 1));
          a2 = v427 - 8;
          if ((double *)v244 == v427 - 8)
          {
            WebCore::KeyframeEffect::ComputedKeyframe::operator=(v244, (uint64_t)v430);
            v312 = v435;
            if (v435)
              ++v435[2];
            v313 = *(_DWORD **)(v244 + 48);
            *(_QWORD *)(v244 + 48) = v312;
            if (v313)
            {
              if (v313[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v313 + 16))(v313);
              else
                --v313[2];
            }
            v314 = v436;
            ++*(_DWORD *)v436;
            v315 = *(_QWORD *)(v244 + 56);
            *(_QWORD *)(v244 + 56) = v314;
            if (v315)
            {
              if (*(_DWORD *)v315 == 1)
              {
                v346 = *(unsigned int *)(v315 + 28);
                if ((_DWORD)v346)
                {
                  v347 = 16 * v346;
                  v348 = (_DWORD **)(*(_QWORD *)(v315 + 16) + 8);
                  do
                  {
                    v349 = *v348;
                    *v348 = 0;
                    if (v349)
                    {
                      if (*v349 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v349, v275);
                      else
                        *v349 -= 2;
                    }
                    v348 += 2;
                    v347 -= 16;
                  }
                  while (v347);
                }
                v350 = *(WTF **)(v315 + 16);
                if ((WTF *)(v315 + 32) != v350 && v350 != 0)
                {
                  *(_QWORD *)(v315 + 16) = 0;
                  *(_DWORD *)(v315 + 24) = 0;
                  WTF::fastFree(v350, v275);
                }
                v352 = *(_QWORD *)(v315 + 8);
                *(_QWORD *)(v315 + 8) = 0;
                if (v352)
                  (*(void (**)(uint64_t))(*(_QWORD *)v352 + 8))(v352);
                WTF::fastFree((WTF *)v315, v275);
              }
              else
              {
                --*(_DWORD *)v315;
              }
            }
            goto LABEL_647;
          }
          WebCore::KeyframeEffect::ComputedKeyframe::operator=(v244, (uint64_t)(v427 - 8));
          v271 = *((_QWORD *)v427 - 2);
          if (v271)
            ++*(_DWORD *)(v271 + 8);
          v272 = *(_DWORD **)(v244 + 48);
          *(_QWORD *)(v244 + 48) = v271;
          if (v272)
          {
            if (v272[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v272 + 16))(v272);
            else
              --v272[2];
          }
          v273 = (_DWORD *)*((_QWORD *)v427 - 1);
          ++*v273;
          v274 = *(_QWORD *)(v244 + 56);
          *(_QWORD *)(v244 + 56) = v273;
          if (v274)
          {
            if (*(_DWORD *)v274 == 1)
            {
              v332 = *(unsigned int *)(v274 + 28);
              if ((_DWORD)v332)
              {
                v333 = 16 * v332;
                v334 = (_DWORD **)(*(_QWORD *)(v274 + 16) + 8);
                do
                {
                  v335 = *v334;
                  *v334 = 0;
                  if (v335)
                  {
                    if (*v335 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v335, v270);
                    else
                      *v335 -= 2;
                  }
                  v334 += 2;
                  v333 -= 16;
                }
                while (v333);
              }
              v336 = *(WTF **)(v274 + 16);
              if ((WTF *)(v274 + 32) != v336 && v336 != 0)
              {
                *(_QWORD *)(v274 + 16) = 0;
                *(_DWORD *)(v274 + 24) = 0;
                WTF::fastFree(v336, v270);
              }
              v338 = *(_QWORD *)(v274 + 8);
              *(_QWORD *)(v274 + 8) = 0;
              if (v338)
                (*(void (**)(uint64_t))(*(_QWORD *)v338 + 8))(v338);
              WTF::fastFree((WTF *)v274, v270);
            }
            else
            {
              --*(_DWORD *)v274;
            }
          }
          WebCore::KeyframeEffect::ComputedKeyframe::operator=((uint64_t)a2, (uint64_t)v430);
          v276 = v435;
          if (v435)
            ++v435[2];
          v277 = (_DWORD *)*((_QWORD *)v427 - 2);
          *((_QWORD *)v427 - 2) = v276;
          if (v277)
          {
            if (v277[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v277 + 16))(v277);
            else
              --v277[2];
          }
          v278 = v436;
          ++*(_DWORD *)v436;
          v279 = *((_QWORD *)v427 - 1);
          *((_QWORD *)v427 - 1) = v278;
          if (v279)
          {
            if (*(_DWORD *)v279 == 1)
            {
              v339 = *(unsigned int *)(v279 + 28);
              if ((_DWORD)v339)
              {
                v340 = 16 * v339;
                v341 = (_DWORD **)(*(_QWORD *)(v279 + 16) + 8);
                do
                {
                  v342 = *v341;
                  *v341 = 0;
                  if (v342)
                  {
                    if (*v342 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v342, v275);
                    else
                      *v342 -= 2;
                  }
                  v341 += 2;
                  v340 -= 16;
                }
                while (v340);
              }
              v343 = *(WTF **)(v279 + 16);
              if ((WTF *)(v279 + 32) != v343 && v343 != 0)
              {
                *(_QWORD *)(v279 + 16) = 0;
                *(_DWORD *)(v279 + 24) = 0;
                WTF::fastFree(v343, v275);
              }
              v345 = *(_QWORD *)(v279 + 8);
              *(_QWORD *)(v279 + 8) = 0;
              if (v345)
                (*(void (**)(uint64_t))(*(_QWORD *)v345 + 8))(v345);
              WTF::fastFree((WTF *)v279, v275);
            }
            else
            {
              --*(_DWORD *)v279;
            }
          }
          v280 = v244 + 64 - a1;
          if (v280 < 65)
            goto LABEL_647;
          v281 = (((unint64_t)v280 >> 6) - 2) >> 1;
          v282 = a1 + (v281 << 6);
          v283 = *(double *)(v244 + 24);
          if (*(double *)(v282 + 24) >= v283)
            goto LABEL_647;
          v438 = *(double *)v244;
          v284 = *(_DWORD **)(v244 + 8);
          if (v284)
            *v284 += 2;
          v439 = v284;
          v440 = *(_BYTE *)(v244 + 16);
          v441 = v283;
          WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable(&v442, (unsigned __int16 **)(v244 + 32));
          WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(&v443, (_QWORD *)(v244 + 40));
          v286 = *(_DWORD **)(v244 + 48);
          if (v286)
            ++v286[2];
          v444 = v286;
          v287 = *(WTF **)(v244 + 56);
          ++*(_DWORD *)v287;
          v445 = v287;
          while (1)
          {
            v288 = (_QWORD *)v282;
            *(_QWORD *)v244 = *(_QWORD *)v282;
            v289 = *(_DWORD **)(v282 + 8);
            if (v289)
              *v289 += 2;
            v290 = *(WTF::StringImpl **)(v244 + 8);
            *(_QWORD *)(v244 + 8) = v289;
            if (v290)
            {
              if (*(_DWORD *)v290 == 2)
                WTF::StringImpl::destroy(v290, v285);
              else
                *(_DWORD *)v290 -= 2;
            }
            *(_BYTE *)(v244 + 16) = *(_BYTE *)(v282 + 16);
            *(_QWORD *)(v244 + 24) = *(_QWORD *)(v282 + 24);
            WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable(&v437, (unsigned __int16 **)(v282 + 32));
            v292 = *(_QWORD *)(v244 + 32);
            *(_QWORD *)(v244 + 32) = v437;
            v437 = v292;
            if (v292)
            {
              v293 = *(unsigned int *)(v292 - 4);
              if ((_DWORD)v293)
              {
                v294 = (WTF::StringImpl **)(v292 + 8);
                do
                {
                  if (*((__int16 *)v294 - 4) != -1)
                  {
                    v295 = *v294;
                    *v294 = 0;
                    if (v295)
                    {
                      if (*(_DWORD *)v295 == 2)
                        WTF::StringImpl::destroy(v295, v291);
                      else
                        *(_DWORD *)v295 -= 2;
                    }
                  }
                  v294 += 2;
                  --v293;
                }
                while (v293);
              }
              WTF::fastFree((WTF *)(v292 - 16), v291);
            }
            WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(&v437, v288 + 5);
            v296 = *(_QWORD *)(v244 + 40);
            *(_QWORD *)(v244 + 40) = v437;
            v437 = v296;
            if (v296)
            {
              v297 = *(unsigned int *)(v296 - 4);
              if ((_DWORD)v297)
              {
                v298 = (WTF::StringImpl **)v296;
                do
                {
                  v299 = *v298;
                  if (*v298 != (WTF::StringImpl *)-1)
                  {
                    v300 = v298[1];
                    v298[1] = 0;
                    if (v300)
                    {
                      if (*(_DWORD *)v300 == 2)
                      {
                        WTF::StringImpl::destroy(v300, v285);
                        v299 = *v298;
                      }
                      else
                      {
                        *(_DWORD *)v300 -= 2;
                      }
                    }
                    *v298 = 0;
                    if (v299)
                    {
                      if (*(_DWORD *)v299 == 2)
                        WTF::StringImpl::destroy(v299, v285);
                      else
                        *(_DWORD *)v299 -= 2;
                    }
                  }
                  v298 += 2;
                  --v297;
                }
                while (v297);
              }
              WTF::fastFree((WTF *)(v296 - 16), v285);
            }
            v301 = v288[6];
            if (v301)
              ++*(_DWORD *)(v301 + 8);
            v302 = *(_DWORD **)(v244 + 48);
            *(_QWORD *)(v244 + 48) = v301;
            if (v302)
            {
              if (v302[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v302 + 16))(v302);
              else
                --v302[2];
            }
            v303 = (_DWORD *)v288[7];
            ++*v303;
            v304 = *(_QWORD *)(v244 + 56);
            *(_QWORD *)(v244 + 56) = v303;
            if (!v304)
              goto LABEL_603;
            if (*(_DWORD *)v304 != 1)
              break;
            v305 = *(unsigned int *)(v304 + 28);
            if ((_DWORD)v305)
            {
              v306 = 16 * v305;
              v307 = (_DWORD **)(*(_QWORD *)(v304 + 16) + 8);
              do
              {
                v308 = *v307;
                *v307 = 0;
                if (v308)
                {
                  if (*v308 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v308, v285);
                  else
                    *v308 -= 2;
                }
                v307 += 2;
                v306 -= 16;
              }
              while (v306);
            }
            v309 = *(WTF **)(v304 + 16);
            if ((WTF *)(v304 + 32) != v309 && v309 != 0)
            {
              *(_QWORD *)(v304 + 16) = 0;
              *(_DWORD *)(v304 + 24) = 0;
              WTF::fastFree(v309, v285);
            }
            v311 = *(_QWORD *)(v304 + 8);
            *(_QWORD *)(v304 + 8) = 0;
            if (v311)
              (*(void (**)(uint64_t))(*(_QWORD *)v311 + 8))(v311);
            WTF::fastFree((WTF *)v304, v285);
            if (!v281)
            {
LABEL_632:
              WebCore::KeyframeEffect::ComputedKeyframe::operator=((uint64_t)v288, (uint64_t)&v438);
              v317 = v444;
              if (v444)
                ++v444[2];
              v318 = (_DWORD *)v288[6];
              v288[6] = v317;
              if (v318)
              {
                if (v318[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v318 + 16))(v318);
                else
                  --v318[2];
              }
              v319 = v445;
              ++*(_DWORD *)v445;
              v320 = v288[7];
              v288[7] = v319;
              if (!v320)
              {
LABEL_640:
                v445 = 0;
                goto LABEL_641;
              }
              if (*(_DWORD *)v320 != 1)
              {
                --*(_DWORD *)v320;
                goto LABEL_640;
              }
              v360 = *(unsigned int *)(v320 + 28);
              if ((_DWORD)v360)
              {
                v361 = 16 * v360;
                v362 = (_DWORD **)(*(_QWORD *)(v320 + 16) + 8);
                do
                {
                  v363 = *v362;
                  *v362 = 0;
                  if (v363)
                  {
                    if (*v363 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v363, v316);
                    else
                      *v363 -= 2;
                  }
                  v362 += 2;
                  v361 -= 16;
                }
                while (v361);
              }
              v364 = *(WTF **)(v320 + 16);
              if ((WTF *)(v320 + 32) != v364 && v364 != 0)
              {
                *(_QWORD *)(v320 + 16) = 0;
                *(_DWORD *)(v320 + 24) = 0;
                WTF::fastFree(v364, v316);
              }
              v366 = *(_QWORD *)(v320 + 8);
              *(_QWORD *)(v320 + 8) = 0;
              if (v366)
                (*(void (**)(uint64_t))(*(_QWORD *)v366 + 8))(v366);
              WTF::fastFree((WTF *)v320, v316);
              v319 = v445;
              v445 = 0;
              if (v319)
              {
LABEL_641:
                if (*(_DWORD *)v319 == 1)
                {
                  v353 = *((unsigned int *)v319 + 7);
                  if ((_DWORD)v353)
                  {
                    v354 = 16 * v353;
                    v355 = (_DWORD **)(*((_QWORD *)v319 + 2) + 8);
                    do
                    {
                      v356 = *v355;
                      *v355 = 0;
                      if (v356)
                      {
                        if (*v356 == 2)
                          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v356, v316);
                        else
                          *v356 -= 2;
                      }
                      v355 += 2;
                      v354 -= 16;
                    }
                    while (v354);
                  }
                  v357 = (WTF *)*((_QWORD *)v319 + 2);
                  if ((WTF *)((char *)v319 + 32) != v357 && v357 != 0)
                  {
                    *((_QWORD *)v319 + 2) = 0;
                    *((_DWORD *)v319 + 6) = 0;
                    WTF::fastFree(v357, v316);
                  }
                  v359 = *((_QWORD *)v319 + 1);
                  *((_QWORD *)v319 + 1) = 0;
                  if (v359)
                    (*(void (**)(uint64_t))(*(_QWORD *)v359 + 8))(v359);
                  WTF::fastFree(v319, v316);
                }
                else
                {
                  --*(_DWORD *)v319;
                }
              }
              v321 = v444;
              v444 = 0;
              if (v321)
              {
                if (v321[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v321 + 16))(v321);
                else
                  --v321[2];
              }
              WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe((WebCore::KeyframeEffect::ComputedKeyframe *)&v438, v316);
LABEL_647:
              v322 = v436;
              v436 = 0;
              if (v322)
              {
                if (*(_DWORD *)v322 == 1)
                {
                  v325 = *((unsigned int *)v322 + 7);
                  if ((_DWORD)v325)
                  {
                    v326 = 16 * v325;
                    v327 = (_DWORD **)(*((_QWORD *)v322 + 2) + 8);
                    do
                    {
                      v328 = *v327;
                      *v327 = 0;
                      if (v328)
                      {
                        if (*v328 == 2)
                          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v328, v275);
                        else
                          *v328 -= 2;
                      }
                      v327 += 2;
                      v326 -= 16;
                    }
                    while (v326);
                  }
                  v329 = (WTF *)*((_QWORD *)v322 + 2);
                  if ((WTF *)((char *)v322 + 32) != v329 && v329 != 0)
                  {
                    *((_QWORD *)v322 + 2) = 0;
                    *((_DWORD *)v322 + 6) = 0;
                    WTF::fastFree(v329, v275);
                  }
                  v331 = *((_QWORD *)v322 + 1);
                  *((_QWORD *)v322 + 1) = 0;
                  if (v331)
                    (*(void (**)(uint64_t))(*(_QWORD *)v331 + 8))(v331);
                  WTF::fastFree(v322, v275);
                }
                else
                {
                  --*(_DWORD *)v322;
                }
              }
              v323 = v435;
              v435 = 0;
              if (v323)
              {
                if (v323[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v323 + 16))(v323);
                else
                  --v323[2];
              }
              WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe((WebCore::KeyframeEffect::ComputedKeyframe *)v430, v275);
              if (v429-- <= 2)
                return result;
              goto LABEL_474;
            }
LABEL_604:
            v281 = (v281 - 1) >> 1;
            v282 = a1 + (v281 << 6);
            v244 = (uint64_t)v288;
            if (*(double *)(v282 + 24) >= v441)
              goto LABEL_632;
          }
          --*(_DWORD *)v304;
LABEL_603:
          if (!v281)
            goto LABEL_632;
          goto LABEL_604;
        }
        v13 = v12 >> 1;
        v14 = a1 + (v12 >> 1 << 6);
        v15 = *(a2 - 5);
        if ((unint64_t)v11 > 0x2000)
        {
          v16 = *(double *)(v14 + 24);
          if (v16 >= *(double *)(a1 + 24))
          {
            if (v15 >= v16
              || (std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(a1 + (v12 >> 1 << 6), v9),
                  *(double *)(v14 + 24) >= *(double *)(a1 + 24)))
            {
LABEL_21:
              v22 = a1 + (v13 << 6);
              v23 = v22 - 64;
              v24 = *(double *)(v22 - 40);
              v25 = *(a2 - 13);
              if (v24 >= *(double *)(a1 + 88))
              {
                if (v25 >= v24
                  || (std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(v22 - 64, (uint64_t)(a2 - 16)),
                      *(double *)(v23 + 24) >= *(double *)(a1 + 88)))
                {
LABEL_33:
                  v28 = a1 + (v13 << 6);
                  v29 = v28 + 64;
                  v30 = *(double *)(v28 + 88);
                  v31 = *(a2 - 21);
                  if (v30 >= *(double *)(a1 + 152))
                  {
                    if (v31 >= v30
                      || (std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(v28 + 64, (uint64_t)(a2 - 24)),
                          *(double *)(v29 + 24) >= *(double *)(a1 + 152)))
                    {
LABEL_42:
                      v34 = *(double *)(v14 + 24);
                      v35 = *(double *)(v29 + 24);
                      if (v34 >= *(double *)(v23 + 24))
                      {
                        if (v35 >= v34)
                          goto LABEL_51;
                        std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(v14, v29);
                        if (*(double *)(v14 + 24) >= *(double *)(v23 + 24))
                          goto LABEL_51;
                        v36 = v23;
                        v37 = v14;
                      }
                      else
                      {
                        v36 = v23;
                        if (v35 >= v34)
                        {
                          std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(v23, v14);
                          if (*(double *)(v29 + 24) >= *(double *)(v14 + 24))
                          {
LABEL_51:
                            v20 = a1;
                            v21 = v14;
                            goto LABEL_52;
                          }
                          v36 = v14;
                        }
                        v37 = v29;
                      }
                      std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(v36, v37);
                      goto LABEL_51;
                    }
                    v32 = a1 + 128;
                    v33 = v29;
                  }
                  else
                  {
                    v32 = a1 + 128;
                    if (v31 >= v30)
                    {
                      std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(v32, v28 + 64);
                      if (*(a2 - 21) >= *(double *)(v29 + 24))
                        goto LABEL_42;
                      v32 = v29;
                    }
                    v33 = (uint64_t)(a2 - 24);
                  }
                  std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(v32, v33);
                  goto LABEL_42;
                }
                v26 = a1 + 64;
                v27 = v23;
              }
              else
              {
                v26 = a1 + 64;
                if (v25 >= v24)
                {
                  std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(v26, v22 - 64);
                  if (*(a2 - 13) >= *(double *)(v23 + 24))
                    goto LABEL_33;
                  v26 = v23;
                }
                v27 = (uint64_t)(a2 - 16);
              }
              std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(v26, v27);
              goto LABEL_33;
            }
            v17 = a1;
            v18 = a1 + (v12 >> 1 << 6);
          }
          else
          {
            v17 = a1;
            if (v15 >= v16)
            {
              std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(a1, a1 + (v12 >> 1 << 6));
              if (*(a2 - 5) >= *(double *)(v14 + 24))
                goto LABEL_21;
              v17 = a1 + (v12 >> 1 << 6);
            }
            v18 = v9;
          }
          std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(v17, v18);
          goto LABEL_21;
        }
        v19 = *(double *)(a1 + 24);
        if (v19 >= *(double *)(v14 + 24))
        {
          if (v15 < v19)
          {
            std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(a1, v9);
            if (*(double *)(a1 + 24) < *(double *)(v14 + 24))
            {
              v20 = a1 + (v12 >> 1 << 6);
              v21 = a1;
              goto LABEL_52;
            }
          }
        }
        else
        {
          v20 = a1 + (v12 >> 1 << 6);
          if (v15 < v19)
            goto LABEL_16;
          std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(v20, a1);
          if (*(a2 - 5) < *(double *)(a1 + 24))
          {
            v20 = a1;
LABEL_16:
            v21 = v9;
LABEL_52:
            std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(v20, v21);
          }
        }
        a3 = (_DWORD **)((char *)a3 - 1);
        if ((a4 & 1) != 0 || *(double *)(a1 - 40) < *(double *)(a1 + 24))
        {
          v38 = *(_DWORD **)(a1 + 8);
          v438 = *(double *)a1;
          if (v38)
            *v38 += 2;
          v439 = v38;
          v440 = *(_BYTE *)(a1 + 16);
          v441 = *(double *)(a1 + 24);
          WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable(v8, (unsigned __int16 **)(a1 + 32));
          WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(&v443, (_QWORD *)(a1 + 40));
          v39 = *(_DWORD **)(a1 + 48);
          if (v39)
            ++v39[2];
          v40 = 0;
          v444 = v39;
          v41 = *(WTF **)(a1 + 56);
          ++*(_DWORD *)v41;
          v445 = v41;
          do
          {
            if ((double *)(a1 + v40 + 64) == a2)
              goto LABEL_875;
            v42 = *(double *)(a1 + v40 + 88);
            v40 += 64;
          }
          while (v42 < v441);
          v43 = (double *)(a1 + v40);
          v44 = a2;
          if (v40 != 64)
          {
            while (v44 != (double *)a1)
            {
              v45 = (unint64_t)(v44 - 8);
              v46 = *(v44 - 5);
              v44 -= 8;
              if (v46 < v441)
                goto LABEL_71;
            }
            goto LABEL_875;
          }
          v47 = a2;
          while (v43 < v47)
          {
            v45 = (unint64_t)(v47 - 8);
            v48 = *(v47 - 5);
            v47 -= 8;
            if (v48 < v441)
              goto LABEL_71;
          }
          v45 = (unint64_t)v47;
LABEL_71:
          v10 = v43;
          if ((unint64_t)v43 < v45)
          {
            v49 = v45;
            do
            {
              std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>((uint64_t)v10, v49);
              v50 = v10 + 8;
              do
              {
                if (v50 == a2)
                  goto LABEL_875;
                v51 = v50[3];
                v50 += 8;
              }
              while (v51 < v441);
              v10 = v50 - 8;
              do
              {
                if (v49 == a1)
                  goto LABEL_875;
                v52 = v49 - 64;
                v53 = *(double *)(v49 - 40);
                v49 -= 64;
              }
              while (v53 >= v441);
              v49 = v52;
            }
            while ((unint64_t)v10 < v52);
          }
          if (v10 - 8 != (double *)a1)
          {
            WebCore::KeyframeEffect::ComputedKeyframe::operator=(a1, (uint64_t)(v10 - 8));
            v55 = *((_QWORD *)v10 - 2);
            if (v55)
              ++*(_DWORD *)(v55 + 8);
            v56 = *(_DWORD **)(a1 + 48);
            *(_QWORD *)(a1 + 48) = v55;
            if (v56)
            {
              if (v56[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v56 + 16))(v56);
              else
                --v56[2];
            }
            v57 = (_DWORD *)*((_QWORD *)v10 - 1);
            ++*v57;
            v58 = *(_QWORD *)(a1 + 56);
            *(_QWORD *)(a1 + 56) = v57;
            if (v58)
            {
              if (*(_DWORD *)v58 == 1)
              {
                v423 = v8;
                v426 = v9;
                v81 = *(unsigned int *)(v58 + 28);
                if ((_DWORD)v81)
                {
                  v82 = 16 * v81;
                  v83 = (_DWORD **)(*(_QWORD *)(v58 + 16) + 8);
                  do
                  {
                    v84 = *v83;
                    *v83 = 0;
                    if (v84)
                    {
                      if (*v84 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v84, v54);
                      else
                        *v84 -= 2;
                    }
                    v83 += 2;
                    v82 -= 16;
                  }
                  while (v82);
                }
                v85 = *(WTF **)(v58 + 16);
                if ((WTF *)(v58 + 32) != v85 && v85 != 0)
                {
                  *(_QWORD *)(v58 + 16) = 0;
                  *(_DWORD *)(v58 + 24) = 0;
                  WTF::fastFree(v85, v54);
                }
                v87 = *(_QWORD *)(v58 + 8);
                *(_QWORD *)(v58 + 8) = 0;
                v8 = v423;
                v9 = v426;
                if (v87)
                  (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
                WTF::fastFree((WTF *)v58, v54);
              }
              else
              {
                --*(_DWORD *)v58;
              }
            }
          }
          WebCore::KeyframeEffect::ComputedKeyframe::operator=((uint64_t)(v10 - 8), (uint64_t)&v438);
          v60 = v444;
          if (v444)
            ++v444[2];
          v61 = (_DWORD *)*((_QWORD *)v10 - 2);
          *((_QWORD *)v10 - 2) = v60;
          if (v61)
          {
            if (v61[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v61 + 16))(v61);
            else
              --v61[2];
          }
          v62 = v445;
          ++*(_DWORD *)v445;
          v63 = *((_QWORD *)v10 - 1);
          *((_QWORD *)v10 - 1) = v62;
          if (v63)
          {
            if (*(_DWORD *)v63 == 1)
            {
              v421 = v8;
              v424 = v9;
              v67 = *(unsigned int *)(v63 + 28);
              if ((_DWORD)v67)
              {
                v68 = 16 * v67;
                v69 = (_DWORD **)(*(_QWORD *)(v63 + 16) + 8);
                do
                {
                  v70 = *v69;
                  *v69 = 0;
                  if (v70)
                  {
                    if (*v70 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v70, v59);
                    else
                      *v70 -= 2;
                  }
                  v69 += 2;
                  v68 -= 16;
                }
                while (v68);
              }
              v71 = *(WTF **)(v63 + 16);
              if ((WTF *)(v63 + 32) != v71 && v71 != 0)
              {
                *(_QWORD *)(v63 + 16) = 0;
                *(_DWORD *)(v63 + 24) = 0;
                WTF::fastFree(v71, v59);
              }
              v73 = *(_QWORD *)(v63 + 8);
              *(_QWORD *)(v63 + 8) = 0;
              v8 = v421;
              v9 = v424;
              if (v73)
                (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
              WTF::fastFree((WTF *)v63, v59);
            }
            else
            {
              --*(_DWORD *)v63;
            }
          }
          v64 = v445;
          v445 = 0;
          if (v64)
          {
            if (*(_DWORD *)v64 == 1)
            {
              v422 = v8;
              v425 = v9;
              v74 = *((unsigned int *)v64 + 7);
              if ((_DWORD)v74)
              {
                v75 = 16 * v74;
                v76 = (_DWORD **)(*((_QWORD *)v64 + 2) + 8);
                do
                {
                  v77 = *v76;
                  *v76 = 0;
                  if (v77)
                  {
                    if (*v77 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v77, v59);
                    else
                      *v77 -= 2;
                  }
                  v76 += 2;
                  v75 -= 16;
                }
                while (v75);
              }
              v78 = (WTF *)*((_QWORD *)v64 + 2);
              if ((WTF *)((char *)v64 + 32) != v78 && v78 != 0)
              {
                *((_QWORD *)v64 + 2) = 0;
                *((_DWORD *)v64 + 6) = 0;
                WTF::fastFree(v78, v59);
              }
              v80 = *((_QWORD *)v64 + 1);
              *((_QWORD *)v64 + 1) = 0;
              v8 = v422;
              v9 = v425;
              if (v80)
                (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
              WTF::fastFree(v64, v59);
            }
            else
            {
              --*(_DWORD *)v64;
            }
          }
          v65 = v444;
          v444 = 0;
          if (v65)
          {
            if (v65[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v65 + 16))(v65);
            else
              --v65[2];
          }
          WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe((WebCore::KeyframeEffect::ComputedKeyframe *)&v438, v59);
          if ((unint64_t)v43 < v45)
            goto LABEL_106;
          ShouldStrongDestructorGrabLockE0EEERN3WTF6VectorINS2_14KeyframeEffect14ParsedKeyframeELm0ENSD_15CrashOnOverflowELm16ENSD_10FastMallocEEERNSE_INSD_6StringELm0ESH_Lm16ESI_EEEUlRT_RT0_E_PSG_EEbT1_SV_SQ = _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL31processPropertyIndexedKeyframesERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEERN3WTF6VectorINS2_14KeyframeEffect14ParsedKeyframeELm0ENSD_15CrashOnOverflowELm16ENSD_10FastMallocEEERNSE_INSD_6StringELm0ESH_Lm16ESI_EEEUlRT_RT0_E_PSG_EEbT1_SV_SQ_((double *)a1, v10 - 8);
          if (!_ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL31processPropertyIndexedKeyframesERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEERN3WTF6VectorINS2_14KeyframeEffect14ParsedKeyframeELm0ENSD_15CrashOnOverflowELm16ENSD_10FastMallocEEERNSE_INSD_6StringELm0ESH_Lm16ESI_EEEUlRT_RT0_E_PSG_EEbT1_SV_SQ_(v10, a2))
          {
            if (ShouldStrongDestructorGrabLockE0EEERN3WTF6VectorINS2_14KeyframeEffect14ParsedKeyframeELm0ENSD_15CrashOnOverflowELm16ENSD_10FastMallocEEERNSE_INSD_6StringELm0ESH_Lm16ESI_EEEUlRT_RT0_E_PSG_EEbT1_SV_SQ)
              continue;
LABEL_106:
            _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN7WebCoreL31processPropertyIndexedKeyframesERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEERN3WTF6VectorINS2_14KeyframeEffect14ParsedKeyframeELm0ENSD_15CrashOnOverflowELm16ENSD_10FastMallocEEERNSE_INSD_6StringELm0ESH_Lm16ESI_EEEUlRT_RT0_E_PSG_Lb0EEEvT1_SV_SQ_NS_15iterator_traitsISV_E15difference_typeEb(a1, v10 - 8, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 8;
          if (ShouldStrongDestructorGrabLockE0EEERN3WTF6VectorINS2_14KeyframeEffect14ParsedKeyframeELm0ENSD_15CrashOnOverflowELm16ENSD_10FastMallocEEERNSE_INSD_6StringELm0ESH_Lm16ESI_EEEUlRT_RT0_E_PSG_EEbT1_SV_SQ)
            return result;
          goto LABEL_2;
        }
        v88 = *(_DWORD **)(a1 + 8);
        v438 = *(double *)a1;
        if (v88)
          *v88 += 2;
        v439 = v88;
        v440 = *(_BYTE *)(a1 + 16);
        v441 = *(double *)(a1 + 24);
        WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable(v8, (unsigned __int16 **)(a1 + 32));
        WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(&v443, (_QWORD *)(a1 + 40));
        v89 = *(_DWORD **)(a1 + 48);
        if (v89)
          ++v89[2];
        v444 = v89;
        v90 = *(WTF **)(a1 + 56);
        ++*(_DWORD *)v90;
        v445 = v90;
        v91 = (double *)(a1 + 64);
        if (v441 >= *(a2 - 5))
        {
          do
          {
            v10 = v91;
            if (v91 >= a2)
              break;
            v93 = v91[3];
            v91 += 8;
          }
          while (v441 >= v93);
        }
        else
        {
          do
          {
            if (v91 == a2)
              goto LABEL_875;
            v92 = v91[3];
            v91 += 8;
          }
          while (v441 >= v92);
          v10 = v91 - 8;
        }
        v94 = (unint64_t)a2;
        if (v10 >= a2)
        {
LABEL_169:
          if ((unint64_t)v10 < v94)
          {
            do
            {
              std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>((uint64_t)v10, v94);
              v97 = v10 + 8;
              do
              {
                if (v97 == a2)
                  goto LABEL_875;
                v98 = v97[3];
                v97 += 8;
              }
              while (v441 >= v98);
              v10 = v97 - 8;
              do
              {
                if (v94 == a1)
                  goto LABEL_875;
                v99 = v94 - 64;
                v100 = *(double *)(v94 - 40);
                v94 -= 64;
              }
              while (v441 < v100);
              v94 = v99;
            }
            while ((unint64_t)v10 < v99);
          }
          if (v10 - 8 != (double *)a1)
          {
            WebCore::KeyframeEffect::ComputedKeyframe::operator=(a1, (uint64_t)(v10 - 8));
            v102 = *((_QWORD *)v10 - 2);
            if (v102)
              ++*(_DWORD *)(v102 + 8);
            v103 = *(_DWORD **)(a1 + 48);
            *(_QWORD *)(a1 + 48) = v102;
            if (v103)
            {
              if (v103[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v103 + 16))(v103);
              else
                --v103[2];
            }
            v104 = (_DWORD *)*((_QWORD *)v10 - 1);
            ++*v104;
            v105 = *(_QWORD *)(a1 + 56);
            *(_QWORD *)(a1 + 56) = v104;
            if (v105)
            {
              if (*(_DWORD *)v105 == 1)
              {
                v127 = *(unsigned int *)(v105 + 28);
                if ((_DWORD)v127)
                {
                  v128 = 16 * v127;
                  v129 = (_DWORD **)(*(_QWORD *)(v105 + 16) + 8);
                  do
                  {
                    v130 = *v129;
                    *v129 = 0;
                    if (v130)
                    {
                      if (*v130 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v130, v101);
                      else
                        *v130 -= 2;
                    }
                    v129 += 2;
                    v128 -= 16;
                  }
                  while (v128);
                }
                v131 = *(WTF **)(v105 + 16);
                if ((WTF *)(v105 + 32) != v131 && v131 != 0)
                {
                  *(_QWORD *)(v105 + 16) = 0;
                  *(_DWORD *)(v105 + 24) = 0;
                  WTF::fastFree(v131, v101);
                }
                v133 = *(_QWORD *)(v105 + 8);
                *(_QWORD *)(v105 + 8) = 0;
                if (v133)
                  (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
                WTF::fastFree((WTF *)v105, v101);
              }
              else
              {
                --*(_DWORD *)v105;
              }
            }
          }
          WebCore::KeyframeEffect::ComputedKeyframe::operator=((uint64_t)(v10 - 8), (uint64_t)&v438);
          v107 = v444;
          if (v444)
            ++v444[2];
          v108 = (_DWORD *)*((_QWORD *)v10 - 2);
          *((_QWORD *)v10 - 2) = v107;
          if (v108)
          {
            if (v108[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v108 + 16))(v108);
            else
              --v108[2];
          }
          v109 = v445;
          ++*(_DWORD *)v445;
          v110 = *((_QWORD *)v10 - 1);
          *((_QWORD *)v10 - 1) = v109;
          if (v110)
          {
            if (*(_DWORD *)v110 == 1)
            {
              v113 = *(unsigned int *)(v110 + 28);
              if ((_DWORD)v113)
              {
                v114 = 16 * v113;
                v115 = (_DWORD **)(*(_QWORD *)(v110 + 16) + 8);
                do
                {
                  v116 = *v115;
                  *v115 = 0;
                  if (v116)
                  {
                    if (*v116 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v116, v106);
                    else
                      *v116 -= 2;
                  }
                  v115 += 2;
                  v114 -= 16;
                }
                while (v114);
              }
              v117 = *(WTF **)(v110 + 16);
              if ((WTF *)(v110 + 32) != v117 && v117 != 0)
              {
                *(_QWORD *)(v110 + 16) = 0;
                *(_DWORD *)(v110 + 24) = 0;
                WTF::fastFree(v117, v106);
              }
              v119 = *(_QWORD *)(v110 + 8);
              *(_QWORD *)(v110 + 8) = 0;
              if (v119)
                (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
              WTF::fastFree((WTF *)v110, v106);
            }
            else
            {
              --*(_DWORD *)v110;
            }
          }
          v111 = v445;
          v445 = 0;
          if (v111)
          {
            if (*(_DWORD *)v111 == 1)
            {
              v120 = *((unsigned int *)v111 + 7);
              if ((_DWORD)v120)
              {
                v121 = 16 * v120;
                v122 = (_DWORD **)(*((_QWORD *)v111 + 2) + 8);
                do
                {
                  v123 = *v122;
                  *v122 = 0;
                  if (v123)
                  {
                    if (*v123 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v123, v106);
                    else
                      *v123 -= 2;
                  }
                  v122 += 2;
                  v121 -= 16;
                }
                while (v121);
              }
              v124 = (WTF *)*((_QWORD *)v111 + 2);
              if ((WTF *)((char *)v111 + 32) != v124 && v124 != 0)
              {
                *((_QWORD *)v111 + 2) = 0;
                *((_DWORD *)v111 + 6) = 0;
                WTF::fastFree(v124, v106);
              }
              v126 = *((_QWORD *)v111 + 1);
              *((_QWORD *)v111 + 1) = 0;
              if (v126)
                (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
              WTF::fastFree(v111, v106);
            }
            else
            {
              --*(_DWORD *)v111;
            }
          }
          v112 = v444;
          v444 = 0;
          if (v112)
          {
            if (v112[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v112 + 16))(v112);
            else
              --v112[2];
          }
          WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe((WebCore::KeyframeEffect::ComputedKeyframe *)&v438, v106);
          a4 = 0;
          continue;
        }
        v95 = a2;
        while (v95 != (double *)a1)
        {
          v94 = (unint64_t)(v95 - 8);
          v96 = *(v95 - 5);
          v95 -= 8;
          if (v441 >= v96)
            goto LABEL_169;
        }
LABEL_875:
        __break(1u);
LABEL_876:
        std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(a1, (uint64_t)a3);
        result = *(a2 - 5);
        if (result < *(double *)(a1 + 88))
        {
          v135 = (uint64_t)a3;
LABEL_257:
          v136 = v9;
LABEL_258:
          std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(v135, v136);
        }
        return result;
    }
  }
}

