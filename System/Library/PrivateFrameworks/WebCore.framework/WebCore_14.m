unsigned __int16 *read_pal_plane(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  _BOOL4 v23;
  _BOOL4 v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  _BOOL4 v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  int32x4_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint8x16_t *v48;
  unsigned int v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  unsigned int v53;
  uint8x16_t *v54;
  unint64_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int32x4_t v58;
  uint64_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  uint64_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  uint8x16_t v71;
  uint16x8_t v72;
  uint32x4_t v73;
  uint64x2_t v74;
  uint64x2_t v75;
  uint32x4_t v76;
  uint64x2_t v77;
  uint16x8_t v78;
  uint32x4_t v79;
  uint64x2_t v80;
  uint64x2_t v81;
  uint64x2_t v82;
  uint64x2_t v83;
  uint32x4_t v84;
  uint64x2_t v85;
  uint64x2_t v86;
  uint64x2_t v87;
  uint64x2_t v88;
  uint64x2_t v89;
  uint64x2_t v90;
  uint64x2_t v91;
  uint64x2_t v92;
  uint64x2_t v93;
  int8x16_t v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  unsigned __int16 *result;
  int v101;
  unsigned __int16 v102;
  unsigned int v103;
  unint64_t v104;
  int v105;
  int32x4_t v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  uint8x16_t *v110;
  uint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  unsigned int v119;
  unint64_t v120;
  int v121;
  unint64_t v122;
  unsigned int v123;
  uint8x16_t *v124;
  unint64_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int32x4_t v128;
  uint64_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  uint64_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  uint8x16_t v141;
  uint16x8_t v142;
  uint32x4_t v143;
  uint64x2_t v144;
  uint64x2_t v145;
  uint32x4_t v146;
  uint64x2_t v147;
  uint16x8_t v148;
  uint32x4_t v149;
  uint64x2_t v150;
  uint64x2_t v151;
  uint64x2_t v152;
  uint64x2_t v153;
  uint32x4_t v154;
  uint64x2_t v155;
  uint64x2_t v156;
  uint64x2_t v157;
  uint64x2_t v158;
  uint64x2_t v159;
  uint64x2_t v160;
  uint64x2_t v161;
  uint64x2_t v162;
  uint64x2_t v163;
  int8x16_t v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  int v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  int v176;
  int v177;
  unsigned int v178;
  unint64_t v179;
  unsigned int v180;
  uint8x16_t *v181;
  unsigned int v182;
  unint64_t v183;
  int v184;
  unint64_t v185;
  unsigned int v186;
  uint8x16_t *v187;
  unint64_t v188;
  int8x16_t v189;
  int8x16_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  uint64_t v197;
  uint64_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int8x16_t v202;
  int8x16_t v203;
  int8x16_t v204;
  uint8x16_t v205;
  uint16x8_t v206;
  uint32x4_t v207;
  uint64x2_t v208;
  uint64x2_t v209;
  uint32x4_t v210;
  uint64x2_t v211;
  uint16x8_t v212;
  uint32x4_t v213;
  uint64x2_t v214;
  uint64x2_t v215;
  uint64x2_t v216;
  uint64x2_t v217;
  uint32x4_t v218;
  uint64x2_t v219;
  uint64x2_t v220;
  uint64x2_t v221;
  uint64x2_t v222;
  uint64x2_t v223;
  uint64x2_t v224;
  uint64x2_t v225;
  uint64x2_t v226;
  uint64x2_t v227;
  int8x16_t v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  int v233;
  uint64_t v234;
  unint64_t v235;
  int v236;
  uint64_t v237;
  unsigned int v238;
  unsigned int v239;
  int v240;
  unsigned int v241;
  uint64_t v242;
  unsigned int v243;
  uint8x16_t *v244;
  unsigned int v245;
  unint64_t v246;
  int v247;
  unint64_t v248;
  unsigned int v249;
  uint8x16_t *v250;
  unint64_t v251;
  int8x16_t v252;
  int8x16_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  uint64_t v260;
  uint64_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  uint8x16_t v268;
  uint16x8_t v269;
  uint32x4_t v270;
  uint64x2_t v271;
  uint64x2_t v272;
  uint32x4_t v273;
  uint64x2_t v274;
  uint16x8_t v275;
  uint32x4_t v276;
  uint64x2_t v277;
  uint64x2_t v278;
  uint64x2_t v279;
  uint64x2_t v280;
  uint32x4_t v281;
  uint64x2_t v282;
  uint64x2_t v283;
  uint64x2_t v284;
  uint64x2_t v285;
  uint64x2_t v286;
  uint64x2_t v287;
  uint64x2_t v288;
  uint64x2_t v289;
  uint64x2_t v290;
  int8x16_t v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  _BOOL4 v296;
  BOOL v297;
  int v298;
  int v299;
  signed int v300;
  unsigned int v301;
  uint64_t v302;
  int v303;
  int32x4_t v304;
  int v305;
  unsigned int v306;
  unint64_t v307;
  signed int v308;
  unsigned int v309;
  uint8x16_t *v310;
  uint64_t v311;
  unint64_t v312;
  int v313;
  uint64_t v314;
  unsigned int v315;
  unsigned int v316;
  int v317;
  unsigned int v318;
  unint64_t v319;
  unint64_t v320;
  int v321;
  unint64_t v322;
  unsigned int v323;
  uint8x16_t *v324;
  unint64_t v325;
  int8x16_t v326;
  int8x16_t v327;
  int32x4_t v328;
  uint64_t v329;
  int32x4_t v330;
  int32x4_t v331;
  int32x4_t v332;
  int32x4_t v333;
  uint64_t v334;
  int8x16_t v335;
  int8x16_t v336;
  int8x16_t v337;
  int8x16_t v338;
  int8x16_t v339;
  int8x16_t v340;
  uint8x16_t v341;
  uint16x8_t v342;
  uint32x4_t v343;
  uint64x2_t v344;
  uint64x2_t v345;
  uint32x4_t v346;
  uint64x2_t v347;
  uint16x8_t v348;
  uint32x4_t v349;
  uint64x2_t v350;
  uint64x2_t v351;
  uint64x2_t v352;
  uint64x2_t v353;
  uint32x4_t v354;
  uint64x2_t v355;
  uint64x2_t v356;
  uint64x2_t v357;
  uint64x2_t v358;
  uint64x2_t v359;
  uint64x2_t v360;
  uint64x2_t v361;
  uint64x2_t v362;
  uint64x2_t v363;
  int8x16_t v364;
  unsigned int v365;
  unsigned int v366;
  int v367;
  unsigned __int16 v368;
  int v369;
  unsigned int v370;
  signed int v371;
  int64_t v372;
  unint64_t v373;
  int16x8_t v374;
  unint64_t v375;
  int16x8_t *v376;
  int v377;
  unsigned __int16 *v378;
  uint64_t v379;
  int v380;
  unsigned int v381;
  unsigned int v382;
  unsigned __int16 v383;
  _WORD __src[24];
  uint64_t v385;

  v385 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v13 = a3;
  v14 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v11 + 13824), (int16x8_t *)(v11 + 112 * a3 + 16 * a4 + 3552), 6uLL)+ 2;
  *(_BYTE *)(a2 + v13 + 11) = v14;
  v15 = a1 + a6;
  v16 = (unsigned __int8 *)(v15 + 8224);
  v17 = (unsigned __int8 *)(v15 + 624);
  if (a3)
    v17 = v16;
  v18 = *v17;
  if ((a6 & 0xF) != 0)
  {
    if (a3)
      v19 = *(unsigned __int8 *)(a1 + a5 + 0x2000);
    else
      v19 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 656) + a5 + 592);
  }
  else
  {
    v19 = 0;
  }
  v20 = 0;
  v21 = (unsigned __int16 *)(a1 + 5120 + 48 * a6 + 16 * v13 + 1536);
  v22 = (unsigned __int16 *)(a1 + 5120 + 48 * a5 + 16 * v13);
  v23 = v18 != 0;
  v24 = v19 != 0;
  if (v18 && v19)
  {
    v20 = 0;
    do
    {
      v25 = *v21;
      v26 = *v22;
      if (v25 >= v26)
      {
        v27 = v26 == v25;
        if (!v20 || (unsigned __int16)__src[v20 + 7] != v26)
          __src[v20++ + 8] = v26;
        v18 -= v27;
        ++v22;
        --v19;
        v21 += v27;
        v23 = v18 != 0;
        v24 = v19 != 0;
        if (!v18)
          break;
      }
      else
      {
        if (!v20 || (unsigned __int16)__src[v20 + 7] != v25)
          __src[v20++ + 8] = v25;
        ++v21;
        v23 = --v18 != 0;
        v24 = v19 != 0;
        if (!v18)
          break;
      }
    }
    while (v19);
  }
  if (v23)
  {
    v28 = v18 + 1;
    do
    {
      v29 = *v21;
      if (!v20 || (unsigned __int16)__src[v20 + 7] != v29)
        __src[v20++ + 8] = v29;
      ++v21;
      --v28;
    }
    while (v28 > 1);
  }
  else if (v24)
  {
    v30 = v19 + 1;
    do
    {
      v31 = *v22;
      if (!v20 || (unsigned __int16)__src[v20 + 7] != v31)
        __src[v20++ + 8] = v31;
      ++v22;
      --v30;
    }
    while (v30 > 1);
  }
  v32 = 0;
  v33 = v14 != 0;
  if (v20 >= 1 && v14)
  {
    v34 = 0;
    v32 = 0;
    v35 = *(_DWORD *)(v11 + 13848);
    v36 = *(_QWORD *)(v11 + 13840);
    v37.i64[0] = 0x7F0000007FLL;
    v37.i64[1] = 0x7F0000007FLL;
    v38 = *(_DWORD *)(v11 + 13852);
    while (1)
    {
      v39 = (v35 >> 1) & 0x7FFFFF80 | 4;
      v40 = v39 << 48;
      v41 = v35 - 2 * v39;
      if (v36 >= v39 << 48)
        v42 = v39 << 48;
      else
        v42 = 0;
      if (v36 < v39 << 48)
        v41 = 0;
      v43 = v41 + v39;
      v44 = __clz(v43);
      v45 = v44 ^ 0x10;
      v46 = v38 - (v44 ^ 0x10);
      *(_DWORD *)(v11 + 13852) = v46;
      v47 = ((v36 - v42 + 1) << (v44 ^ 0x10)) - 1;
      *(_QWORD *)(v11 + 13840) = v47;
      v35 = v43 << (v44 ^ 0x10);
      *(_DWORD *)(v11 + 13848) = v35;
      if ((v46 & 0x80000000) == 0)
      {
        v38 -= v45;
        if (v36 >= v40)
          goto LABEL_47;
LABEL_46:
        __src[v32++] = __src[v34 + 8];
        goto LABEL_47;
      }
      v48 = *(uint8x16_t **)(v11 + 13824);
      v49 = 40 - v46;
      if ((int)(40 - v46) >= 0)
      {
        v50 = *(_QWORD *)(v11 + 13832);
        if ((unint64_t)v48 < v50)
          break;
      }
LABEL_68:
      *(_QWORD *)(v11 + 13840) = v47;
      *(_DWORD *)(v11 + 13852) = v46;
      v38 = v46;
      *(_QWORD *)(v11 + 13824) = v48;
      if (v36 < v40)
        goto LABEL_46;
LABEL_47:
      ++v34;
      v33 = v32 < v14;
      if (v34 < v20)
      {
        v36 = v47;
        if (v32 < v14)
          continue;
      }
      goto LABEL_70;
    }
    if (v49 >= 7)
      v51 = 7;
    else
      v51 = 40 - v46;
    v52 = (v45 - v38 - v51 + 47) >> 3;
    if (~(unint64_t)v48 + v50 < v52)
      v52 = ~(unint64_t)v48 + v50;
    if (v52 >= 0xF)
    {
      v55 = v52 + 1;
      v56 = 0uLL;
      v57 = (int8x16_t)(unint64_t)v47;
      v58 = vdupq_n_s32(v49);
      v59 = (v52 + 1) & 0x3FFFFFF0;
      v60 = vaddq_s32(v58, (int32x4_t)xmmword_196889AA0);
      v53 = v49 - 8 * v59;
      v61 = vaddq_s32(v58, (int32x4_t)xmmword_196889AB0);
      v54 = (uint8x16_t *)((char *)v48 + v59);
      v62 = vaddq_s32(v58, (int32x4_t)xmmword_196889AC0);
      v63 = vaddq_s32(v58, (int32x4_t)xmmword_196889AD0);
      v64 = v59;
      v65 = 0uLL;
      v66 = 0uLL;
      v67 = 0uLL;
      v68 = 0uLL;
      v69 = 0uLL;
      v70 = 0uLL;
      do
      {
        v71 = *v48++;
        v72 = vmovl_high_u8(v71);
        v73 = vmovl_high_u16(v72);
        v74.i64[0] = v73.u32[0];
        v74.i64[1] = v73.u32[1];
        v75 = v74;
        v76 = vmovl_u16(*(uint16x4_t *)v72.i8);
        v74.i64[0] = v76.u32[2];
        v74.i64[1] = v76.u32[3];
        v77 = v74;
        v78 = vmovl_u8(*(uint8x8_t *)v71.i8);
        v79 = vmovl_high_u16(v78);
        v74.i64[0] = v79.u32[2];
        v74.i64[1] = v79.u32[3];
        v80 = v74;
        v74.i64[0] = v73.u32[2];
        v74.i64[1] = v73.u32[3];
        v81 = v74;
        v74.i64[0] = v76.u32[0];
        v74.i64[1] = v76.u32[1];
        v82 = v74;
        v74.i64[0] = v79.u32[0];
        v74.i64[1] = v79.u32[1];
        v83 = v74;
        v84 = vmovl_u16(*(uint16x4_t *)v78.i8);
        v74.i64[0] = v84.u32[2];
        v74.i64[1] = v84.u32[3];
        v85 = v74;
        v74.i64[0] = v84.u32[0];
        v74.i64[1] = v84.u32[1];
        v86 = v74;
        v74.i64[0] = v60.u32[0];
        v74.i64[1] = v60.u32[1];
        v87 = v74;
        v74.i64[0] = v61.u32[2];
        v74.i64[1] = v61.u32[3];
        v88 = v74;
        v74.i64[0] = v62.u32[2];
        v74.i64[1] = v62.u32[3];
        v89 = v74;
        v74.i64[0] = v60.u32[2];
        v74.i64[1] = v60.u32[3];
        v90 = v74;
        v74.i64[0] = v61.u32[0];
        v74.i64[1] = v61.u32[1];
        v91 = v74;
        v74.i64[0] = v62.u32[0];
        v74.i64[1] = v62.u32[1];
        v92 = v74;
        v74.i64[0] = v63.u32[2];
        v74.i64[1] = v63.u32[3];
        v93 = v74;
        v74.i64[0] = v63.u32[0];
        v74.i64[1] = v63.u32[1];
        v69 = veorq_s8((int8x16_t)vshlq_u64(v75, v87), v69);
        v68 = veorq_s8((int8x16_t)vshlq_u64(v77, v88), v68);
        v66 = veorq_s8((int8x16_t)vshlq_u64(v80, v89), v66);
        v70 = veorq_s8((int8x16_t)vshlq_u64(v81, v90), v70);
        v67 = veorq_s8((int8x16_t)vshlq_u64(v82, v91), v67);
        v65 = veorq_s8((int8x16_t)vshlq_u64(v83, v92), v65);
        v56 = veorq_s8((int8x16_t)vshlq_u64(v85, v93), v56);
        v57 = veorq_s8((int8x16_t)vshlq_u64(v86, v74), v57);
        v63 = vaddq_s32(v63, v37);
        v62 = vaddq_s32(v62, v37);
        v61 = vaddq_s32(v61, v37);
        v60 = vaddq_s32(v60, v37);
        v64 -= 16;
      }
      while (v64);
      v94 = veorq_s8(veorq_s8(veorq_s8(v57, v67), veorq_s8(v65, v69)), veorq_s8(veorq_s8(v56, v68), veorq_s8(v66, v70)));
      v47 = (uint64_t)veor_s8(*(int8x8_t *)v94.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL));
      if (v55 == v59)
      {
        v95 = v49 - 8 * v59 + 8;
LABEL_67:
        v46 = 48 - v95;
        v48 = v54;
        goto LABEL_68;
      }
    }
    else
    {
      v53 = 40 - v46;
      v54 = *(uint8x16_t **)(v11 + 13824);
    }
    v96 = v53;
    do
    {
      v97 = v54->u8[0];
      v54 = (uint8x16_t *)((char *)v54 + 1);
      v47 ^= (unint64_t)v97 << v96;
      v98 = v96 - 8;
      if (v96 < 8)
        break;
      v96 -= 8;
    }
    while ((unint64_t)v54 < v50);
    v95 = v98 + 8;
    goto LABEL_67;
  }
LABEL_70:
  if (!*(_DWORD *)(a1 + 259588))
  {
    v99 = a1 + 20608;
    result = (unsigned __int16 *)(a1 + 20608 + 16 * v13);
    if (v33)
      goto LABEL_72;
    return (unsigned __int16 *)memcpy(result, __src, 2 * v32);
  }
  v99 = *(_QWORD *)(v12 + 4208)
      + 48
      * ((*(uint64_t *)(v12 + 3264) >> 1) * ((*(_DWORD *)(a1 + 24) & 1) + (*(int *)(a1 + 28) >> 1))
       + (*(_DWORD *)(a1 + 28) & 1)
       + (*(int *)(a1 + 24) >> 1));
  result = (unsigned __int16 *)(v99 + 16 * v13);
  if (!v33)
    return (unsigned __int16 *)memcpy(result, __src, 2 * v32);
LABEL_72:
  v101 = *(_DWORD *)(v12 + 2060);
  v102 = 0;
  if (v101)
  {
    v103 = *(_DWORD *)(v11 + 13848);
    v104 = *(_QWORD *)(v11 + 13840);
    v105 = *(_DWORD *)(v11 + 13852);
    v106.i64[0] = 0x7F0000007FLL;
    v106.i64[1] = 0x7F0000007FLL;
    v107 = *(_DWORD *)(v12 + 2060);
    while (1)
    {
      v111 = (v103 >> 1) & 0x7FFFFF80 | 4;
      v112 = v111 << 48;
      v113 = v103 - 2 * v111;
      if (v104 >= v111 << 48)
        v114 = v111 << 48;
      else
        v114 = 0;
      if (v104 < v111 << 48)
        v113 = 0;
      v115 = v113 + v111;
      v116 = __clz(v115);
      v117 = v116 ^ 0x10;
      v109 = v105 - (v116 ^ 0x10);
      *(_DWORD *)(v11 + 13852) = v109;
      v118 = ((v104 - v114 + 1) << (v116 ^ 0x10)) - 1;
      *(_QWORD *)(v11 + 13840) = v118;
      v103 = v115 << (v116 ^ 0x10);
      *(_DWORD *)(v11 + 13848) = v103;
      if ((v109 & 0x80000000) == 0)
        goto LABEL_77;
      v110 = *(uint8x16_t **)(v11 + 13824);
      v119 = 40 - v109;
      if ((int)(40 - v109) >= 0)
      {
        v120 = *(_QWORD *)(v11 + 13832);
        if ((unint64_t)v110 < v120)
          break;
      }
LABEL_76:
      *(_QWORD *)(v11 + 13840) = v118;
      *(_DWORD *)(v11 + 13852) = v109;
      *(_QWORD *)(v11 + 13824) = v110;
LABEL_77:
      v102 = (2 * v102) | (v104 < v112);
      v105 = v109;
      v104 = v118;
      if (!--v107)
        goto LABEL_101;
    }
    if (v119 >= 7)
      v121 = 7;
    else
      v121 = 40 - v109;
    v122 = (v117 - v105 - v121 + 47) >> 3;
    if (~(unint64_t)v110 + v120 < v122)
      v122 = ~(unint64_t)v110 + v120;
    if (v122 >= 0xF)
    {
      v125 = v122 + 1;
      v126 = 0uLL;
      v127 = (int8x16_t)(unint64_t)v118;
      v128 = vdupq_n_s32(v119);
      v129 = (v122 + 1) & 0x3FFFFFF0;
      v130 = vaddq_s32(v128, (int32x4_t)xmmword_196889AA0);
      v123 = v119 - 8 * v129;
      v131 = vaddq_s32(v128, (int32x4_t)xmmword_196889AB0);
      v124 = (uint8x16_t *)((char *)v110 + v129);
      v132 = vaddq_s32(v128, (int32x4_t)xmmword_196889AC0);
      v133 = vaddq_s32(v128, (int32x4_t)xmmword_196889AD0);
      v134 = v129;
      v135 = 0uLL;
      v136 = 0uLL;
      v137 = 0uLL;
      v138 = 0uLL;
      v139 = 0uLL;
      v140 = 0uLL;
      do
      {
        v141 = *v110++;
        v142 = vmovl_high_u8(v141);
        v143 = vmovl_high_u16(v142);
        v144.i64[0] = v143.u32[0];
        v144.i64[1] = v143.u32[1];
        v145 = v144;
        v146 = vmovl_u16(*(uint16x4_t *)v142.i8);
        v144.i64[0] = v146.u32[2];
        v144.i64[1] = v146.u32[3];
        v147 = v144;
        v148 = vmovl_u8(*(uint8x8_t *)v141.i8);
        v149 = vmovl_high_u16(v148);
        v144.i64[0] = v149.u32[2];
        v144.i64[1] = v149.u32[3];
        v150 = v144;
        v144.i64[0] = v143.u32[2];
        v144.i64[1] = v143.u32[3];
        v151 = v144;
        v144.i64[0] = v146.u32[0];
        v144.i64[1] = v146.u32[1];
        v152 = v144;
        v144.i64[0] = v149.u32[0];
        v144.i64[1] = v149.u32[1];
        v153 = v144;
        v154 = vmovl_u16(*(uint16x4_t *)v148.i8);
        v144.i64[0] = v154.u32[2];
        v144.i64[1] = v154.u32[3];
        v155 = v144;
        v144.i64[0] = v154.u32[0];
        v144.i64[1] = v154.u32[1];
        v156 = v144;
        v144.i64[0] = v130.u32[0];
        v144.i64[1] = v130.u32[1];
        v157 = v144;
        v144.i64[0] = v131.u32[2];
        v144.i64[1] = v131.u32[3];
        v158 = v144;
        v144.i64[0] = v132.u32[2];
        v144.i64[1] = v132.u32[3];
        v159 = v144;
        v144.i64[0] = v130.u32[2];
        v144.i64[1] = v130.u32[3];
        v160 = v144;
        v144.i64[0] = v131.u32[0];
        v144.i64[1] = v131.u32[1];
        v161 = v144;
        v144.i64[0] = v132.u32[0];
        v144.i64[1] = v132.u32[1];
        v162 = v144;
        v144.i64[0] = v133.u32[2];
        v144.i64[1] = v133.u32[3];
        v163 = v144;
        v144.i64[0] = v133.u32[0];
        v144.i64[1] = v133.u32[1];
        v139 = veorq_s8((int8x16_t)vshlq_u64(v145, v157), v139);
        v138 = veorq_s8((int8x16_t)vshlq_u64(v147, v158), v138);
        v136 = veorq_s8((int8x16_t)vshlq_u64(v150, v159), v136);
        v140 = veorq_s8((int8x16_t)vshlq_u64(v151, v160), v140);
        v137 = veorq_s8((int8x16_t)vshlq_u64(v152, v161), v137);
        v135 = veorq_s8((int8x16_t)vshlq_u64(v153, v162), v135);
        v126 = veorq_s8((int8x16_t)vshlq_u64(v155, v163), v126);
        v127 = veorq_s8((int8x16_t)vshlq_u64(v156, v144), v127);
        v133 = vaddq_s32(v133, v106);
        v132 = vaddq_s32(v132, v106);
        v131 = vaddq_s32(v131, v106);
        v130 = vaddq_s32(v130, v106);
        v134 -= 16;
      }
      while (v134);
      v164 = veorq_s8(veorq_s8(veorq_s8(v127, v137), veorq_s8(v135, v139)), veorq_s8(veorq_s8(v126, v138), veorq_s8(v136, v140)));
      v118 = (uint64_t)veor_s8(*(int8x8_t *)v164.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v164, v164, 8uLL));
      if (v125 == v129)
      {
        v108 = v119 - 8 * v129 + 8;
LABEL_75:
        v109 = 48 - v108;
        v110 = v124;
        goto LABEL_76;
      }
    }
    else
    {
      v123 = 40 - v109;
      v124 = *(uint8x16_t **)(v11 + 13824);
    }
    v165 = v123;
    do
    {
      v166 = v124->u8[0];
      v124 = (uint8x16_t *)((char *)v124 + 1);
      v118 ^= (unint64_t)v166 << v165;
      v167 = v165 - 8;
      if (v165 < 8)
        break;
      v165 -= 8;
    }
    while ((unint64_t)v124 < v120);
    v108 = v167 + 8;
    goto LABEL_75;
  }
LABEL_101:
  result[v32] = v102;
  if (v32 + 1 < v14)
  {
    v168 = *(unsigned int *)(v11 + 13848);
    v169 = *(_QWORD *)(v11 + 13840);
    v170 = (v168 >> 1) & 0x7FFFFF80 | 4;
    v171 = v170 << 48;
    v172 = v168 - 2 * v170;
    if (v169 >= v170 << 48)
      v173 = v170 << 48;
    else
      v173 = 0;
    if (v169 < v170 << 48)
      v172 = 0;
    v174 = v172 + v170;
    v175 = __clz(v174);
    v176 = v175 ^ 0x10;
    v177 = *(_DWORD *)(v11 + 13852);
    v178 = v177 - (v175 ^ 0x10);
    *(_DWORD *)(v11 + 13852) = v178;
    v179 = ((v169 - v173 + 1) << (v175 ^ 0x10)) - 1;
    *(_QWORD *)(v11 + 13840) = v179;
    v180 = v174 << v176;
    *(_DWORD *)(v11 + 13848) = v174 << v176;
    if ((v178 & 0x80000000) == 0)
    {
LABEL_129:
      v233 = 2 * (v169 < v171);
      v234 = (v180 >> 1) & 0x7FFFFF80 | 4;
      v235 = v234 << 48;
      v236 = v180 - 2 * v234;
      if (v179 >= v234 << 48)
        v237 = v234 << 48;
      else
        v237 = 0;
      if (v179 < v234 << 48)
        v236 = 0;
      v238 = v236 + v234;
      v239 = __clz(v238);
      v240 = v239 ^ 0x10;
      v241 = v178 - (v239 ^ 0x10);
      *(_DWORD *)(v11 + 13852) = v241;
      v242 = ((v179 - v237 + 1) << (v239 ^ 0x10)) - 1;
      *(_QWORD *)(v11 + 13840) = v242;
      v243 = v238 << (v239 ^ 0x10);
      *(_DWORD *)(v11 + 13848) = v243;
      if ((v241 & 0x80000000) == 0)
      {
LABEL_154:
        v296 = a3 == 0;
        v297 = v179 >= v235;
        v298 = v102;
        v299 = v101 + v233;
        if (!v297)
          ++v299;
        v300 = v299 - 3;
        v301 = ~(-1 << v101);
        v302 = v32 + 1;
        v303 = v32 + 2;
        v304.i64[0] = 0x7F0000007FLL;
        v304.i64[1] = 0x7F0000007FLL;
        while (1)
        {
          v305 = 0;
          if (v300)
            break;
LABEL_185:
          v367 = v298 + v296 + v305;
          if (v367 >= (int)v301)
            v368 = v301;
          else
            v368 = v367;
          v369 = v302 + 1;
          result[v302] = v368;
          v298 = v368;
          v370 = v301 - (v368 + v296);
          if (v301 <= v298 + v296)
          {
            if (v369 < v14)
            {
              v372 = v303;
              v373 = v14 - (uint64_t)v303;
              if (v373 < 0x10)
                goto LABEL_210;
              v374 = vdupq_n_s16(v301);
              v372 = (v373 & 0xFFFFFFFFFFFFFFF0) + v303;
              v375 = (v14 - (uint64_t)v303) & 0xFFFFFFFFFFFFFFF0;
              v376 = (int16x8_t *)(v99 + 16 * v13 + 2 * v303 + 16);
              do
              {
                v376[-1] = v374;
                *v376 = v374;
                v376 += 2;
                v375 -= 16;
              }
              while (v375);
              if (v373 != (v373 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_210:
                do
                  result[v372++] = v301;
                while (v372 < v14);
              }
            }
            goto LABEL_199;
          }
          v371 = 32 - __clz(v370);
          if (v300 >= v371)
            v300 = v371;
          ++v303;
          ++v302;
          if (v369 == v14)
            goto LABEL_199;
        }
        v306 = v241;
        v307 = v242;
        v308 = v300;
        while (1)
        {
          v311 = (v243 >> 1) & 0x7FFFFF80 | 4;
          v312 = v311 << 48;
          v313 = v243 - 2 * v311;
          if (v307 >= v311 << 48)
            v314 = v311 << 48;
          else
            v314 = 0;
          if (v307 < v311 << 48)
            v313 = 0;
          v315 = v313 + v311;
          v316 = __clz(v315);
          v317 = v316 ^ 0x10;
          v241 = v306 - (v316 ^ 0x10);
          *(_DWORD *)(v11 + 13852) = v241;
          v242 = ((v307 - v314 + 1) << (v316 ^ 0x10)) - 1;
          *(_QWORD *)(v11 + 13840) = v242;
          v243 = v315 << v317;
          *(_DWORD *)(v11 + 13848) = v243;
          if ((v241 & 0x80000000) == 0)
            goto LABEL_162;
          v310 = *(uint8x16_t **)(v11 + 13824);
          v318 = 40 - v241;
          if ((int)(40 - v241) >= 0)
          {
            v319 = *(_QWORD *)(v11 + 13832);
            if ((unint64_t)v310 < v319)
              break;
          }
LABEL_161:
          *(_QWORD *)(v11 + 13840) = v242;
          *(_DWORD *)(v11 + 13852) = v241;
          *(_QWORD *)(v11 + 13824) = v310;
LABEL_162:
          v305 = (2 * v305) | (v307 < v312);
          v306 = v241;
          v307 = v242;
          if (!--v308)
            goto LABEL_185;
        }
        v320 = ~(unint64_t)v310 + v319;
        if (v318 >= 7)
          v321 = 7;
        else
          v321 = v318;
        v322 = (v317 - v306 - v321 + 47) >> 3;
        if (v320 >= v322)
          v320 = v322;
        if (v320 >= 0xF)
        {
          v325 = v320 + 1;
          v326 = 0uLL;
          v327 = (int8x16_t)(unint64_t)v242;
          v328 = vdupq_n_s32(v318);
          v329 = (v320 + 1) & 0x3FFFFFF0;
          v330 = vaddq_s32(v328, (int32x4_t)xmmword_196889AA0);
          v323 = v318 - 8 * v329;
          v331 = vaddq_s32(v328, (int32x4_t)xmmword_196889AB0);
          v324 = (uint8x16_t *)((char *)v310 + v329);
          v332 = vaddq_s32(v328, (int32x4_t)xmmword_196889AC0);
          v333 = vaddq_s32(v328, (int32x4_t)xmmword_196889AD0);
          v334 = v329;
          v335 = 0uLL;
          v336 = 0uLL;
          v337 = 0uLL;
          v338 = 0uLL;
          v339 = 0uLL;
          v340 = 0uLL;
          do
          {
            v341 = *v310++;
            v342 = vmovl_high_u8(v341);
            v343 = vmovl_high_u16(v342);
            v344.i64[0] = v343.u32[0];
            v344.i64[1] = v343.u32[1];
            v345 = v344;
            v346 = vmovl_u16(*(uint16x4_t *)v342.i8);
            v344.i64[0] = v346.u32[2];
            v344.i64[1] = v346.u32[3];
            v347 = v344;
            v348 = vmovl_u8(*(uint8x8_t *)v341.i8);
            v349 = vmovl_high_u16(v348);
            v344.i64[0] = v349.u32[2];
            v344.i64[1] = v349.u32[3];
            v350 = v344;
            v344.i64[0] = v343.u32[2];
            v344.i64[1] = v343.u32[3];
            v351 = v344;
            v344.i64[0] = v346.u32[0];
            v344.i64[1] = v346.u32[1];
            v352 = v344;
            v344.i64[0] = v349.u32[0];
            v344.i64[1] = v349.u32[1];
            v353 = v344;
            v354 = vmovl_u16(*(uint16x4_t *)v348.i8);
            v344.i64[0] = v354.u32[2];
            v344.i64[1] = v354.u32[3];
            v355 = v344;
            v344.i64[0] = v354.u32[0];
            v344.i64[1] = v354.u32[1];
            v356 = v344;
            v344.i64[0] = v330.u32[0];
            v344.i64[1] = v330.u32[1];
            v357 = v344;
            v344.i64[0] = v331.u32[2];
            v344.i64[1] = v331.u32[3];
            v358 = v344;
            v344.i64[0] = v332.u32[2];
            v344.i64[1] = v332.u32[3];
            v359 = v344;
            v344.i64[0] = v330.u32[2];
            v344.i64[1] = v330.u32[3];
            v360 = v344;
            v344.i64[0] = v331.u32[0];
            v344.i64[1] = v331.u32[1];
            v361 = v344;
            v344.i64[0] = v332.u32[0];
            v344.i64[1] = v332.u32[1];
            v362 = v344;
            v344.i64[0] = v333.u32[2];
            v344.i64[1] = v333.u32[3];
            v363 = v344;
            v344.i64[0] = v333.u32[0];
            v344.i64[1] = v333.u32[1];
            v339 = veorq_s8((int8x16_t)vshlq_u64(v345, v357), v339);
            v338 = veorq_s8((int8x16_t)vshlq_u64(v347, v358), v338);
            v336 = veorq_s8((int8x16_t)vshlq_u64(v350, v359), v336);
            v340 = veorq_s8((int8x16_t)vshlq_u64(v351, v360), v340);
            v337 = veorq_s8((int8x16_t)vshlq_u64(v352, v361), v337);
            v335 = veorq_s8((int8x16_t)vshlq_u64(v353, v362), v335);
            v326 = veorq_s8((int8x16_t)vshlq_u64(v355, v363), v326);
            v327 = veorq_s8((int8x16_t)vshlq_u64(v356, v344), v327);
            v333 = vaddq_s32(v333, v304);
            v332 = vaddq_s32(v332, v304);
            v331 = vaddq_s32(v331, v304);
            v330 = vaddq_s32(v330, v304);
            v334 -= 16;
          }
          while (v334);
          v364 = veorq_s8(veorq_s8(veorq_s8(v327, v337), veorq_s8(v335, v339)), veorq_s8(veorq_s8(v326, v338), veorq_s8(v336, v340)));
          v242 = (uint64_t)veor_s8(*(int8x8_t *)v364.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v364, v364, 8uLL));
          if (v325 == v329)
          {
            v309 = v318 - 8 * v329 + 8;
LABEL_160:
            v241 = 48 - v309;
            v310 = v324;
            goto LABEL_161;
          }
        }
        else
        {
          v323 = v318;
          v324 = *(uint8x16_t **)(v11 + 13824);
        }
        do
        {
          v365 = v324->u8[0];
          v324 = (uint8x16_t *)((char *)v324 + 1);
          v242 ^= (unint64_t)v365 << v323;
          v366 = v323 - 8;
          if (v323 < 8)
            break;
          v323 -= 8;
        }
        while ((unint64_t)v324 < v319);
        v309 = v366 + 8;
        goto LABEL_160;
      }
      v244 = *(uint8x16_t **)(v11 + 13824);
      v245 = 40 - v241;
      if ((int)(40 - v241) < 0 || (v246 = *(_QWORD *)(v11 + 13832), (unint64_t)v244 >= v246))
      {
LABEL_153:
        *(_QWORD *)(v11 + 13840) = v242;
        *(_DWORD *)(v11 + 13852) = v241;
        *(_QWORD *)(v11 + 13824) = v244;
        goto LABEL_154;
      }
      if (v245 >= 7)
        v247 = 7;
      else
        v247 = 40 - v241;
      v248 = (v240 - v178 - v247 + 47) >> 3;
      if (~(unint64_t)v244 + v246 < v248)
        v248 = ~(unint64_t)v244 + v246;
      if (v248 >= 0xF)
      {
        v251 = v248 + 1;
        v252 = 0uLL;
        v253 = (int8x16_t)(unint64_t)v242;
        v254 = vdupq_n_s32(v245);
        v255 = vaddq_s32(v254, (int32x4_t)xmmword_196889AA0);
        v256 = vaddq_s32(v254, (int32x4_t)xmmword_196889AB0);
        v257 = vaddq_s32(v254, (int32x4_t)xmmword_196889AC0);
        v258 = vaddq_s32(v254, (int32x4_t)xmmword_196889AD0);
        v259.i64[0] = 0x7F0000007FLL;
        v259.i64[1] = 0x7F0000007FLL;
        v260 = (v248 + 1) & 0x3FFFFFF0;
        v249 = v245 - 8 * v260;
        v250 = (uint8x16_t *)((char *)v244 + v260);
        v261 = v260;
        v262 = 0uLL;
        v263 = 0uLL;
        v264 = 0uLL;
        v265 = 0uLL;
        v266 = 0uLL;
        v267 = 0uLL;
        do
        {
          v268 = *v244++;
          v269 = vmovl_high_u8(v268);
          v270 = vmovl_high_u16(v269);
          v271.i64[0] = v270.u32[0];
          v271.i64[1] = v270.u32[1];
          v272 = v271;
          v273 = vmovl_u16(*(uint16x4_t *)v269.i8);
          v271.i64[0] = v273.u32[2];
          v271.i64[1] = v273.u32[3];
          v274 = v271;
          v275 = vmovl_u8(*(uint8x8_t *)v268.i8);
          v276 = vmovl_high_u16(v275);
          v271.i64[0] = v276.u32[2];
          v271.i64[1] = v276.u32[3];
          v277 = v271;
          v271.i64[0] = v270.u32[2];
          v271.i64[1] = v270.u32[3];
          v278 = v271;
          v271.i64[0] = v273.u32[0];
          v271.i64[1] = v273.u32[1];
          v279 = v271;
          v271.i64[0] = v276.u32[0];
          v271.i64[1] = v276.u32[1];
          v280 = v271;
          v281 = vmovl_u16(*(uint16x4_t *)v275.i8);
          v271.i64[0] = v281.u32[2];
          v271.i64[1] = v281.u32[3];
          v282 = v271;
          v271.i64[0] = v281.u32[0];
          v271.i64[1] = v281.u32[1];
          v283 = v271;
          v271.i64[0] = v255.u32[0];
          v271.i64[1] = v255.u32[1];
          v284 = v271;
          v271.i64[0] = v256.u32[2];
          v271.i64[1] = v256.u32[3];
          v285 = v271;
          v271.i64[0] = v257.u32[2];
          v271.i64[1] = v257.u32[3];
          v286 = v271;
          v271.i64[0] = v255.u32[2];
          v271.i64[1] = v255.u32[3];
          v287 = v271;
          v271.i64[0] = v256.u32[0];
          v271.i64[1] = v256.u32[1];
          v288 = v271;
          v271.i64[0] = v257.u32[0];
          v271.i64[1] = v257.u32[1];
          v289 = v271;
          v271.i64[0] = v258.u32[2];
          v271.i64[1] = v258.u32[3];
          v290 = v271;
          v271.i64[0] = v258.u32[0];
          v271.i64[1] = v258.u32[1];
          v266 = veorq_s8((int8x16_t)vshlq_u64(v272, v284), v266);
          v265 = veorq_s8((int8x16_t)vshlq_u64(v274, v285), v265);
          v263 = veorq_s8((int8x16_t)vshlq_u64(v277, v286), v263);
          v267 = veorq_s8((int8x16_t)vshlq_u64(v278, v287), v267);
          v264 = veorq_s8((int8x16_t)vshlq_u64(v279, v288), v264);
          v262 = veorq_s8((int8x16_t)vshlq_u64(v280, v289), v262);
          v252 = veorq_s8((int8x16_t)vshlq_u64(v282, v290), v252);
          v253 = veorq_s8((int8x16_t)vshlq_u64(v283, v271), v253);
          v258 = vaddq_s32(v258, v259);
          v257 = vaddq_s32(v257, v259);
          v256 = vaddq_s32(v256, v259);
          v255 = vaddq_s32(v255, v259);
          v261 -= 16;
        }
        while (v261);
        v291 = veorq_s8(veorq_s8(veorq_s8(v253, v264), veorq_s8(v262, v266)), veorq_s8(veorq_s8(v252, v265), veorq_s8(v263, v267)));
        v242 = (uint64_t)veor_s8(*(int8x8_t *)v291.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v291, v291, 8uLL));
        if (v251 == v260)
        {
          v292 = v245 - 8 * v260 + 8;
LABEL_152:
          v241 = 48 - v292;
          v244 = v250;
          goto LABEL_153;
        }
      }
      else
      {
        v249 = 40 - v241;
        v250 = *(uint8x16_t **)(v11 + 13824);
      }
      v293 = v249;
      do
      {
        v294 = v250->u8[0];
        v250 = (uint8x16_t *)((char *)v250 + 1);
        v242 ^= (unint64_t)v294 << v293;
        v295 = v293 - 8;
        if (v293 < 8)
          break;
        v293 -= 8;
      }
      while ((unint64_t)v250 < v246);
      v292 = v295 + 8;
      goto LABEL_152;
    }
    v181 = *(uint8x16_t **)(v11 + 13824);
    v182 = 40 - v178;
    if ((int)(40 - v178) < 0 || (v183 = *(_QWORD *)(v11 + 13832), (unint64_t)v181 >= v183))
    {
LABEL_128:
      *(_QWORD *)(v11 + 13824) = v181;
      goto LABEL_129;
    }
    if (v182 >= 7)
      v184 = 7;
    else
      v184 = 40 - v178;
    v185 = (v176 - v177 - v184 + 47) >> 3;
    if (~(unint64_t)v181 + v183 < v185)
      v185 = ~(unint64_t)v181 + v183;
    if (v185 >= 0xF)
    {
      v188 = v185 + 1;
      v189 = 0uLL;
      v190 = (int8x16_t)v179;
      v191 = vdupq_n_s32(v182);
      v192 = vaddq_s32(v191, (int32x4_t)xmmword_196889AA0);
      v193 = vaddq_s32(v191, (int32x4_t)xmmword_196889AB0);
      v194 = vaddq_s32(v191, (int32x4_t)xmmword_196889AC0);
      v195 = vaddq_s32(v191, (int32x4_t)xmmword_196889AD0);
      v196.i64[0] = 0x7F0000007FLL;
      v196.i64[1] = 0x7F0000007FLL;
      v197 = (v185 + 1) & 0x3FFFFFF0;
      v186 = v182 - 8 * v197;
      v187 = (uint8x16_t *)((char *)v181 + v197);
      v198 = v197;
      v199 = 0uLL;
      v200 = 0uLL;
      v201 = 0uLL;
      v202 = 0uLL;
      v203 = 0uLL;
      v204 = 0uLL;
      do
      {
        v205 = *v181++;
        v206 = vmovl_high_u8(v205);
        v207 = vmovl_high_u16(v206);
        v208.i64[0] = v207.u32[0];
        v208.i64[1] = v207.u32[1];
        v209 = v208;
        v210 = vmovl_u16(*(uint16x4_t *)v206.i8);
        v208.i64[0] = v210.u32[2];
        v208.i64[1] = v210.u32[3];
        v211 = v208;
        v212 = vmovl_u8(*(uint8x8_t *)v205.i8);
        v213 = vmovl_high_u16(v212);
        v208.i64[0] = v213.u32[2];
        v208.i64[1] = v213.u32[3];
        v214 = v208;
        v208.i64[0] = v207.u32[2];
        v208.i64[1] = v207.u32[3];
        v215 = v208;
        v208.i64[0] = v210.u32[0];
        v208.i64[1] = v210.u32[1];
        v216 = v208;
        v208.i64[0] = v213.u32[0];
        v208.i64[1] = v213.u32[1];
        v217 = v208;
        v218 = vmovl_u16(*(uint16x4_t *)v212.i8);
        v208.i64[0] = v218.u32[2];
        v208.i64[1] = v218.u32[3];
        v219 = v208;
        v208.i64[0] = v218.u32[0];
        v208.i64[1] = v218.u32[1];
        v220 = v208;
        v208.i64[0] = v192.u32[0];
        v208.i64[1] = v192.u32[1];
        v221 = v208;
        v208.i64[0] = v193.u32[2];
        v208.i64[1] = v193.u32[3];
        v222 = v208;
        v208.i64[0] = v194.u32[2];
        v208.i64[1] = v194.u32[3];
        v223 = v208;
        v208.i64[0] = v192.u32[2];
        v208.i64[1] = v192.u32[3];
        v224 = v208;
        v208.i64[0] = v193.u32[0];
        v208.i64[1] = v193.u32[1];
        v225 = v208;
        v208.i64[0] = v194.u32[0];
        v208.i64[1] = v194.u32[1];
        v226 = v208;
        v208.i64[0] = v195.u32[2];
        v208.i64[1] = v195.u32[3];
        v227 = v208;
        v208.i64[0] = v195.u32[0];
        v208.i64[1] = v195.u32[1];
        v203 = veorq_s8((int8x16_t)vshlq_u64(v209, v221), v203);
        v202 = veorq_s8((int8x16_t)vshlq_u64(v211, v222), v202);
        v200 = veorq_s8((int8x16_t)vshlq_u64(v214, v223), v200);
        v204 = veorq_s8((int8x16_t)vshlq_u64(v215, v224), v204);
        v201 = veorq_s8((int8x16_t)vshlq_u64(v216, v225), v201);
        v199 = veorq_s8((int8x16_t)vshlq_u64(v217, v226), v199);
        v189 = veorq_s8((int8x16_t)vshlq_u64(v219, v227), v189);
        v190 = veorq_s8((int8x16_t)vshlq_u64(v220, v208), v190);
        v195 = vaddq_s32(v195, v196);
        v194 = vaddq_s32(v194, v196);
        v193 = vaddq_s32(v193, v196);
        v192 = vaddq_s32(v192, v196);
        v198 -= 16;
      }
      while (v198);
      v228 = veorq_s8(veorq_s8(veorq_s8(v190, v201), veorq_s8(v199, v203)), veorq_s8(veorq_s8(v189, v202), veorq_s8(v200, v204)));
      v179 = (unint64_t)veor_s8(*(int8x8_t *)v228.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v228, v228, 8uLL));
      if (v188 == v197)
      {
        v229 = v182 - 8 * v197 + 8;
LABEL_127:
        v178 = 48 - v229;
        v181 = v187;
        goto LABEL_128;
      }
    }
    else
    {
      v186 = 40 - v178;
      v187 = *(uint8x16_t **)(v11 + 13824);
    }
    v230 = v186;
    do
    {
      v231 = v187->u8[0];
      v187 = (uint8x16_t *)((char *)v187 + 1);
      v179 ^= (unint64_t)v231 << v230;
      v232 = v230 - 8;
      if (v230 < 8)
        break;
      v230 -= 8;
    }
    while ((unint64_t)v187 < v183);
    v229 = v232 + 8;
    goto LABEL_127;
  }
LABEL_199:
  if (v14)
  {
    v377 = 0;
    v378 = result;
    v379 = v14;
    v380 = v32;
    do
    {
      while (v377 < v32)
      {
        v381 = (unsigned __int16)__src[v377];
        if (v380 >= v14 || (v382 = result[v380], v381 <= v382))
        {
          ++v377;
          *v378++ = v381;
          if (!--v379)
            return result;
        }
        else
        {
          ++v380;
          *v378++ = v382;
          if (!--v379)
            return result;
        }
      }
      v383 = result[v380++];
      *v378++ = v383;
      --v379;
    }
    while (v379);
  }
  return result;
}

unint64_t read_pal_uv(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5)
{
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  uint8x16_t *v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unsigned int v39;
  uint8x16_t *v40;
  uint8x16_t *v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unsigned int v45;
  uint8x16_t *v46;
  unint64_t v47;
  int8x16_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  uint64_t v56;
  uint64_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  uint8x16_t v64;
  uint16x8_t v65;
  uint32x4_t v66;
  uint64x2_t v67;
  uint64x2_t v68;
  uint32x4_t v69;
  uint64x2_t v70;
  uint16x8_t v71;
  uint32x4_t v72;
  uint64x2_t v73;
  uint64x2_t v74;
  uint64x2_t v75;
  uint64x2_t v76;
  uint32x4_t v77;
  uint64x2_t v78;
  uint64x2_t v79;
  uint64x2_t v80;
  uint64x2_t v81;
  uint64x2_t v82;
  uint64x2_t v83;
  uint64x2_t v84;
  uint64x2_t v85;
  uint64x2_t v86;
  int8x16_t v87;
  int v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  unint64_t v92;
  int32x4_t v93;
  __int16 v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  uint8x16_t *v104;
  unsigned int v105;
  unint64_t v106;
  int v107;
  unint64_t v108;
  unsigned int v109;
  uint8x16_t *v110;
  unint64_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int32x4_t v114;
  uint64_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  uint64_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  uint8x16_t v127;
  uint16x8_t v128;
  uint32x4_t v129;
  uint64x2_t v130;
  uint64x2_t v131;
  uint32x4_t v132;
  uint64x2_t v133;
  uint16x8_t v134;
  uint32x4_t v135;
  uint64x2_t v136;
  uint64x2_t v137;
  uint64x2_t v138;
  uint64x2_t v139;
  uint32x4_t v140;
  uint64x2_t v141;
  uint64x2_t v142;
  uint64x2_t v143;
  uint64x2_t v144;
  uint64x2_t v145;
  uint64x2_t v146;
  uint64x2_t v147;
  uint64x2_t v148;
  uint64x2_t v149;
  int8x16_t v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unint64_t v155;
  unint64_t v156;
  int8x16_t v157;
  int32x4_t v158;
  int8x16_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  uint64_t v165;
  uint64_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  uint8x16_t v173;
  uint16x8_t v174;
  uint32x4_t v175;
  uint64x2_t v176;
  uint64x2_t v177;
  uint32x4_t v178;
  uint64x2_t v179;
  uint16x8_t v180;
  uint32x4_t v181;
  uint64x2_t v182;
  uint64x2_t v183;
  uint64x2_t v184;
  uint64x2_t v185;
  uint32x4_t v186;
  uint64x2_t v187;
  uint64x2_t v188;
  uint64x2_t v189;
  uint64x2_t v190;
  uint64x2_t v191;
  uint64x2_t v192;
  uint64x2_t v193;
  uint64x2_t v194;
  uint64x2_t v195;
  int8x16_t v196;
  int v197;
  uint64_t v198;
  unsigned int v199;
  _BOOL4 v200;
  uint64_t v201;
  unint64_t v202;
  int v203;
  uint64_t v204;
  unsigned int v205;
  unsigned int v206;
  int v207;
  unsigned int v208;
  unint64_t v209;
  unsigned int v210;
  unsigned int v211;
  unint64_t v212;
  int v213;
  unint64_t v214;
  unsigned int v215;
  unsigned __int8 *v216;
  unint64_t v217;
  int8x16_t v218;
  int32x4_t v219;
  int8x16_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  uint64_t v226;
  uint64_t v227;
  int8x16_t v228;
  int8x16_t v229;
  int8x16_t v230;
  int8x16_t v231;
  int8x16_t v232;
  int8x16_t v233;
  uint8x16_t v234;
  uint16x8_t v235;
  uint32x4_t v236;
  uint64x2_t v237;
  uint64x2_t v238;
  uint32x4_t v239;
  uint64x2_t v240;
  uint16x8_t v241;
  uint32x4_t v242;
  uint64x2_t v243;
  uint64x2_t v244;
  uint64x2_t v245;
  uint64x2_t v246;
  uint32x4_t v247;
  uint64x2_t v248;
  uint64x2_t v249;
  uint64x2_t v250;
  uint64x2_t v251;
  uint64x2_t v252;
  uint64x2_t v253;
  uint64x2_t v254;
  uint64x2_t v255;
  uint64x2_t v256;
  int8x16_t v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  _BOOL4 v262;
  __int16 v263;
  int32x4_t v264;
  unsigned int v265;
  unint64_t v266;
  int v267;
  unsigned int v268;
  uint8x16_t *v269;
  uint64_t v270;
  unint64_t v271;
  int v272;
  uint64_t v273;
  unsigned int v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  unint64_t v278;
  unint64_t v279;
  int v280;
  unint64_t v281;
  unsigned int v282;
  uint8x16_t *v283;
  unint64_t v284;
  int8x16_t v285;
  int8x16_t v286;
  int32x4_t v287;
  uint64_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  uint64_t v293;
  int8x16_t v294;
  int8x16_t v295;
  int8x16_t v296;
  int8x16_t v297;
  int8x16_t v298;
  int8x16_t v299;
  uint8x16_t v300;
  uint16x8_t v301;
  uint32x4_t v302;
  uint64x2_t v303;
  uint64x2_t v304;
  uint32x4_t v305;
  uint64x2_t v306;
  uint16x8_t v307;
  uint32x4_t v308;
  uint64x2_t v309;
  uint64x2_t v310;
  uint64x2_t v311;
  uint64x2_t v312;
  uint32x4_t v313;
  uint64x2_t v314;
  uint64x2_t v315;
  uint64x2_t v316;
  uint64x2_t v317;
  uint64x2_t v318;
  uint64x2_t v319;
  uint64x2_t v320;
  uint64x2_t v321;
  uint64x2_t v322;
  int8x16_t v323;
  unsigned int v324;
  unsigned int v325;
  int v326;
  int v327;
  int v328;
  unint64_t v329;
  int32x4_t v330;
  unsigned int v331;
  unsigned int v332;
  uint8x16_t *v333;
  int v334;
  unint64_t v335;
  int v336;
  uint64_t v337;
  unint64_t v338;
  int v339;
  uint64_t v340;
  unsigned int v341;
  unsigned int v342;
  int v343;
  unsigned int v344;
  uint8x16_t *v345;
  unsigned int v346;
  unint64_t v347;
  int v348;
  unint64_t v349;
  unsigned int v350;
  uint8x16_t *v351;
  unint64_t v352;
  int8x16_t v353;
  int8x16_t v354;
  int32x4_t v355;
  uint64_t v356;
  int32x4_t v357;
  int32x4_t v358;
  int32x4_t v359;
  int32x4_t v360;
  uint64_t v361;
  int8x16_t v362;
  int8x16_t v363;
  int8x16_t v364;
  int8x16_t v365;
  int8x16_t v366;
  int8x16_t v367;
  uint8x16_t v368;
  uint16x8_t v369;
  uint32x4_t v370;
  uint64x2_t v371;
  uint64x2_t v372;
  uint32x4_t v373;
  uint64x2_t v374;
  uint16x8_t v375;
  uint32x4_t v376;
  uint64x2_t v377;
  uint64x2_t v378;
  uint64x2_t v379;
  uint64x2_t v380;
  uint32x4_t v381;
  uint64x2_t v382;
  uint64x2_t v383;
  uint64x2_t v384;
  uint64x2_t v385;
  uint64x2_t v386;
  uint64x2_t v387;
  uint64x2_t v388;
  uint64x2_t v389;
  uint64x2_t v390;
  int8x16_t v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  unsigned int v395;
  uint64_t v396;
  unint64_t v397;
  int v398;
  uint64_t v399;
  unsigned int v400;
  unsigned int v401;
  int v402;
  uint64_t v403;
  unsigned int v404;
  unint64_t v405;
  int v406;
  unint64_t v407;
  unsigned int v408;
  uint8x16_t *v409;
  unint64_t v410;
  int8x16_t v411;
  int8x16_t v412;
  int32x4_t v413;
  uint64_t v414;
  int32x4_t v415;
  int32x4_t v416;
  int32x4_t v417;
  int32x4_t v418;
  uint64_t v419;
  int8x16_t v420;
  int8x16_t v421;
  int8x16_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int8x16_t v425;
  uint8x16_t v426;
  uint16x8_t v427;
  uint32x4_t v428;
  uint64x2_t v429;
  uint64x2_t v430;
  uint32x4_t v431;
  uint64x2_t v432;
  uint16x8_t v433;
  uint32x4_t v434;
  uint64x2_t v435;
  uint64x2_t v436;
  uint64x2_t v437;
  uint64x2_t v438;
  uint32x4_t v439;
  uint64x2_t v440;
  uint64x2_t v441;
  uint64x2_t v442;
  uint64x2_t v443;
  uint64x2_t v444;
  uint64x2_t v445;
  uint64x2_t v446;
  uint64x2_t v447;
  uint64x2_t v448;
  int8x16_t v449;
  unsigned int v450;
  unsigned int v451;
  unsigned int v452;
  unint64_t v453;

  result = (unint64_t)read_pal_plane(a1, a2, 1u, a3, a4, a5);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 259588))
    v10 = (_WORD *)(*(_QWORD *)(v9 + 4208)
                  + 48
                  * ((*(uint64_t *)(v9 + 3264) >> 1) * ((*(_DWORD *)(a1 + 24) & 1) + (*(int *)(a1 + 28) >> 1))
                   + (*(_DWORD *)(a1 + 28) & 1)
                   + (*(int *)(a1 + 24) >> 1))
                  + 32);
  else
    v10 = (_WORD *)(a1 + 20640);
  v11 = *(unsigned int *)(v8 + 13848);
  v12 = *(_QWORD *)(v8 + 13840);
  v13 = (v11 >> 1) & 0x7FFFFF80 | 4;
  v14 = v13 << 48;
  v15 = v11 - 2 * v13;
  if (v12 >= v13 << 48)
    v16 = v13 << 48;
  else
    v16 = 0;
  if (v12 < v13 << 48)
    v15 = 0;
  v17 = v15 + v13;
  v18 = __clz(v17);
  v19 = v18 ^ 0x10;
  v20 = *(_DWORD *)(v8 + 13852);
  v21 = v20 - (v18 ^ 0x10);
  *(_DWORD *)(v8 + 13852) = v21;
  v22 = ((v12 - v16 + 1) << (v18 ^ 0x10)) - 1;
  *(_QWORD *)(v8 + 13840) = v22;
  v23 = v17 << v19;
  *(_DWORD *)(v8 + 13848) = v23;
  if ((v21 & 0x80000000) == 0)
  {
    if (v12 < v14)
      goto LABEL_11;
    goto LABEL_45;
  }
  v41 = *(uint8x16_t **)(v8 + 13824);
  result = (40 - v21);
  if (40 - v21 >= 0)
  {
    v42 = *(_QWORD *)(v8 + 13832);
    if ((unint64_t)v41 < v42)
    {
      if (result >= 7)
        v43 = 7;
      else
        v43 = 40 - v21;
      v44 = (v19 - v20 - v43 + 47) >> 3;
      if (~(unint64_t)v41 + v42 < v44)
        v44 = ~(unint64_t)v41 + v42;
      if (v44 >= 0xF)
      {
        v47 = v44 + 1;
        v48 = (int8x16_t)v22;
        v49 = vdupq_n_s32(result);
        v50 = 0uLL;
        v51 = vaddq_s32(v49, (int32x4_t)xmmword_196889AA0);
        v52 = vaddq_s32(v49, (int32x4_t)xmmword_196889AB0);
        v53 = vaddq_s32(v49, (int32x4_t)xmmword_196889AC0);
        v54 = vaddq_s32(v49, (int32x4_t)xmmword_196889AD0);
        v55.i64[0] = 0x7F0000007FLL;
        v55.i64[1] = 0x7F0000007FLL;
        v56 = (v44 + 1) & 0x3FFFFFF0;
        v45 = result - 8 * v56;
        v46 = (uint8x16_t *)((char *)v41 + v56);
        v57 = v56;
        v58 = 0uLL;
        v59 = 0uLL;
        v60 = 0uLL;
        v61 = 0uLL;
        v62 = 0uLL;
        v63 = 0uLL;
        do
        {
          v64 = *v41++;
          v65 = vmovl_high_u8(v64);
          v66 = vmovl_high_u16(v65);
          v67.i64[0] = v66.u32[0];
          v67.i64[1] = v66.u32[1];
          v68 = v67;
          v69 = vmovl_u16(*(uint16x4_t *)v65.i8);
          v67.i64[0] = v69.u32[2];
          v67.i64[1] = v69.u32[3];
          v70 = v67;
          v71 = vmovl_u8(*(uint8x8_t *)v64.i8);
          v72 = vmovl_high_u16(v71);
          v67.i64[0] = v72.u32[2];
          v67.i64[1] = v72.u32[3];
          v73 = v67;
          v67.i64[0] = v66.u32[2];
          v67.i64[1] = v66.u32[3];
          v74 = v67;
          v67.i64[0] = v69.u32[0];
          v67.i64[1] = v69.u32[1];
          v75 = v67;
          v67.i64[0] = v72.u32[0];
          v67.i64[1] = v72.u32[1];
          v76 = v67;
          v77 = vmovl_u16(*(uint16x4_t *)v71.i8);
          v67.i64[0] = v77.u32[2];
          v67.i64[1] = v77.u32[3];
          v78 = v67;
          v67.i64[0] = v77.u32[0];
          v67.i64[1] = v77.u32[1];
          v79 = v67;
          v67.i64[0] = v51.u32[0];
          v67.i64[1] = v51.u32[1];
          v80 = v67;
          v67.i64[0] = v52.u32[2];
          v67.i64[1] = v52.u32[3];
          v81 = v67;
          v67.i64[0] = v53.u32[2];
          v67.i64[1] = v53.u32[3];
          v82 = v67;
          v67.i64[0] = v51.u32[2];
          v67.i64[1] = v51.u32[3];
          v83 = v67;
          v67.i64[0] = v52.u32[0];
          v67.i64[1] = v52.u32[1];
          v84 = v67;
          v67.i64[0] = v53.u32[0];
          v67.i64[1] = v53.u32[1];
          v85 = v67;
          v67.i64[0] = v54.u32[2];
          v67.i64[1] = v54.u32[3];
          v86 = v67;
          v67.i64[0] = v54.u32[0];
          v67.i64[1] = v54.u32[1];
          v62 = veorq_s8((int8x16_t)vshlq_u64(v68, v80), v62);
          v61 = veorq_s8((int8x16_t)vshlq_u64(v70, v81), v61);
          v59 = veorq_s8((int8x16_t)vshlq_u64(v73, v82), v59);
          v63 = veorq_s8((int8x16_t)vshlq_u64(v74, v83), v63);
          v60 = veorq_s8((int8x16_t)vshlq_u64(v75, v84), v60);
          v58 = veorq_s8((int8x16_t)vshlq_u64(v76, v85), v58);
          v50 = veorq_s8((int8x16_t)vshlq_u64(v78, v86), v50);
          v48 = veorq_s8((int8x16_t)vshlq_u64(v79, v67), v48);
          v54 = vaddq_s32(v54, v55);
          v53 = vaddq_s32(v53, v55);
          v52 = vaddq_s32(v52, v55);
          v51 = vaddq_s32(v51, v55);
          v57 -= 16;
        }
        while (v57);
        v87 = veorq_s8(veorq_s8(veorq_s8(v48, v60), veorq_s8(v58, v62)), veorq_s8(veorq_s8(v50, v61), veorq_s8(v59, v63)));
        v22 = (unint64_t)veor_s8(*(int8x8_t *)v87.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL));
        if (v47 == v56)
        {
          v88 = result - 8 * v56 + 8;
LABEL_43:
          v21 = 48 - v88;
          v41 = v46;
          goto LABEL_44;
        }
      }
      else
      {
        v45 = result;
        v46 = *(uint8x16_t **)(v8 + 13824);
      }
      v89 = v45;
      do
      {
        v90 = v46->u8[0];
        v46 = (uint8x16_t *)((char *)v46 + 1);
        v22 ^= (unint64_t)v90 << v89;
        result = v89 - 8;
        if (v89 < 8)
          break;
        v89 -= 8;
      }
      while ((unint64_t)v46 < v42);
      v88 = result + 8;
      goto LABEL_43;
    }
  }
LABEL_44:
  *(_QWORD *)(v8 + 13840) = v22;
  *(_DWORD *)(v8 + 13852) = v21;
  *(_QWORD *)(v8 + 13824) = v41;
  if (v12 >= v14)
  {
LABEL_45:
    if (!*(_BYTE *)(a2 + 12))
      return result;
    v91 = *(_DWORD *)(v9 + 2060);
    if (!v91)
    {
      v155 = 0;
      do
        v10[v155++] = 0;
      while (v155 < *(unsigned __int8 *)(a2 + 12));
      return result;
    }
    v92 = 0;
    v93.i64[0] = 0x7F0000007FLL;
    v93.i64[1] = 0x7F0000007FLL;
LABEL_49:
    v94 = 0;
    v95 = v22;
    LODWORD(result) = v91;
    while (1)
    {
      v96 = (v23 >> 1) & 0x7FFFFF80 | 4;
      v97 = v96 << 48;
      v98 = v23 - 2 * v96;
      if (v95 >= v96 << 48)
        v99 = v96 << 48;
      else
        v99 = 0;
      if (v95 < v96 << 48)
        v98 = 0;
      v100 = v98 + v96;
      v101 = __clz(v100);
      v102 = v101 ^ 0x10;
      v103 = v21 - (v101 ^ 0x10);
      *(_DWORD *)(v8 + 13852) = v103;
      v22 = ((v95 - v99 + 1) << (v101 ^ 0x10)) - 1;
      *(_QWORD *)(v8 + 13840) = v22;
      v23 = v100 << v102;
      *(_DWORD *)(v8 + 13848) = v23;
      if ((v103 & 0x80000000) != 0)
        break;
      v21 -= v102;
LABEL_51:
      v94 = (2 * v94) | (v95 < v97);
      v95 = v22;
      result = (result - 1);
      if (!(_DWORD)result)
      {
        v10[v92++] = v94;
        if (v92 >= *(unsigned __int8 *)(a2 + 12))
          return result;
        goto LABEL_49;
      }
    }
    v104 = *(uint8x16_t **)(v8 + 13824);
    v105 = 40 - v103;
    if ((int)(40 - v103) < 0 || (v106 = *(_QWORD *)(v8 + 13832), (unint64_t)v104 >= v106))
    {
LABEL_76:
      *(_QWORD *)(v8 + 13840) = v22;
      *(_DWORD *)(v8 + 13852) = v103;
      v21 = v103;
      *(_QWORD *)(v8 + 13824) = v104;
      goto LABEL_51;
    }
    if (v105 >= 7)
      v107 = 7;
    else
      v107 = 40 - v103;
    v108 = (v102 - v21 - v107 + 47) >> 3;
    if (~(unint64_t)v104 + v106 < v108)
      v108 = ~(unint64_t)v104 + v106;
    if (v108 >= 0xF)
    {
      v111 = v108 + 1;
      v112 = 0uLL;
      v113 = (int8x16_t)v22;
      v114 = vdupq_n_s32(v105);
      v115 = (v108 + 1) & 0x3FFFFFF0;
      v116 = vaddq_s32(v114, (int32x4_t)xmmword_196889AA0);
      v109 = v105 - 8 * v115;
      v117 = vaddq_s32(v114, (int32x4_t)xmmword_196889AB0);
      v110 = (uint8x16_t *)((char *)v104 + v115);
      v118 = vaddq_s32(v114, (int32x4_t)xmmword_196889AC0);
      v119 = vaddq_s32(v114, (int32x4_t)xmmword_196889AD0);
      v120 = v115;
      v121 = 0uLL;
      v122 = 0uLL;
      v123 = 0uLL;
      v124 = 0uLL;
      v125 = 0uLL;
      v126 = 0uLL;
      do
      {
        v127 = *v104++;
        v128 = vmovl_high_u8(v127);
        v129 = vmovl_high_u16(v128);
        v130.i64[0] = v129.u32[0];
        v130.i64[1] = v129.u32[1];
        v131 = v130;
        v132 = vmovl_u16(*(uint16x4_t *)v128.i8);
        v130.i64[0] = v132.u32[2];
        v130.i64[1] = v132.u32[3];
        v133 = v130;
        v134 = vmovl_u8(*(uint8x8_t *)v127.i8);
        v135 = vmovl_high_u16(v134);
        v130.i64[0] = v135.u32[2];
        v130.i64[1] = v135.u32[3];
        v136 = v130;
        v130.i64[0] = v129.u32[2];
        v130.i64[1] = v129.u32[3];
        v137 = v130;
        v130.i64[0] = v132.u32[0];
        v130.i64[1] = v132.u32[1];
        v138 = v130;
        v130.i64[0] = v135.u32[0];
        v130.i64[1] = v135.u32[1];
        v139 = v130;
        v140 = vmovl_u16(*(uint16x4_t *)v134.i8);
        v130.i64[0] = v140.u32[2];
        v130.i64[1] = v140.u32[3];
        v141 = v130;
        v130.i64[0] = v140.u32[0];
        v130.i64[1] = v140.u32[1];
        v142 = v130;
        v130.i64[0] = v116.u32[0];
        v130.i64[1] = v116.u32[1];
        v143 = v130;
        v130.i64[0] = v117.u32[2];
        v130.i64[1] = v117.u32[3];
        v144 = v130;
        v130.i64[0] = v118.u32[2];
        v130.i64[1] = v118.u32[3];
        v145 = v130;
        v130.i64[0] = v116.u32[2];
        v130.i64[1] = v116.u32[3];
        v146 = v130;
        v130.i64[0] = v117.u32[0];
        v130.i64[1] = v117.u32[1];
        v147 = v130;
        v130.i64[0] = v118.u32[0];
        v130.i64[1] = v118.u32[1];
        v148 = v130;
        v130.i64[0] = v119.u32[2];
        v130.i64[1] = v119.u32[3];
        v149 = v130;
        v130.i64[0] = v119.u32[0];
        v130.i64[1] = v119.u32[1];
        v125 = veorq_s8((int8x16_t)vshlq_u64(v131, v143), v125);
        v124 = veorq_s8((int8x16_t)vshlq_u64(v133, v144), v124);
        v122 = veorq_s8((int8x16_t)vshlq_u64(v136, v145), v122);
        v126 = veorq_s8((int8x16_t)vshlq_u64(v137, v146), v126);
        v123 = veorq_s8((int8x16_t)vshlq_u64(v138, v147), v123);
        v121 = veorq_s8((int8x16_t)vshlq_u64(v139, v148), v121);
        v112 = veorq_s8((int8x16_t)vshlq_u64(v141, v149), v112);
        v113 = veorq_s8((int8x16_t)vshlq_u64(v142, v130), v113);
        v119 = vaddq_s32(v119, v93);
        v118 = vaddq_s32(v118, v93);
        v117 = vaddq_s32(v117, v93);
        v116 = vaddq_s32(v116, v93);
        v120 -= 16;
      }
      while (v120);
      v150 = veorq_s8(veorq_s8(veorq_s8(v113, v123), veorq_s8(v121, v125)), veorq_s8(veorq_s8(v112, v124), veorq_s8(v122, v126)));
      v22 = (unint64_t)veor_s8(*(int8x8_t *)v150.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v150, v150, 8uLL));
      if (v111 == v115)
      {
        v151 = v105 - 8 * v115 + 8;
LABEL_75:
        v103 = 48 - v151;
        v104 = v110;
        goto LABEL_76;
      }
    }
    else
    {
      v109 = 40 - v103;
      v110 = *(uint8x16_t **)(v8 + 13824);
    }
    v152 = v109;
    do
    {
      v153 = v110->u8[0];
      v110 = (uint8x16_t *)((char *)v110 + 1);
      v22 ^= (unint64_t)v153 << v152;
      v154 = v152 - 8;
      if (v152 < 8)
        break;
      v152 -= 8;
    }
    while ((unint64_t)v110 < v106);
    v151 = v154 + 8;
    goto LABEL_75;
  }
LABEL_11:
  v24 = *(_DWORD *)(v9 + 2060);
  v25 = (v23 >> 1) & 0x7FFFFF80 | 4;
  v26 = v25 << 48;
  v27 = v23 - 2 * v25;
  if (v22 >= v25 << 48)
    v28 = v25 << 48;
  else
    v28 = 0;
  if (v22 < v25 << 48)
    v27 = 0;
  v29 = v27 + v25;
  v30 = __clz(v29);
  v31 = v30 ^ 0x10;
  v32 = v21 - (v30 ^ 0x10);
  *(_DWORD *)(v8 + 13852) = v32;
  v33 = ((v22 - v28 + 1) << (v30 ^ 0x10)) - 1;
  *(_QWORD *)(v8 + 13840) = v33;
  v34 = v29 << v31;
  *(_DWORD *)(v8 + 13848) = v29 << v31;
  if (v32 < 0)
  {
    v35 = *(uint8x16_t **)(v8 + 13824);
    result = (40 - v32);
    if (40 - v32 < 0)
      goto LABEL_89;
    v36 = *(_QWORD *)(v8 + 13832);
    if ((unint64_t)v35 >= v36)
      goto LABEL_89;
    if (result >= 7)
      v37 = 7;
    else
      v37 = 40 - v32;
    v38 = (v31 - v21 - v37 + 47) >> 3;
    if (~(unint64_t)v35 + v36 < v38)
      v38 = ~(unint64_t)v35 + v36;
    if (v38 >= 0xF)
    {
      v156 = v38 + 1;
      v157 = (int8x16_t)v33;
      v158 = vdupq_n_s32(result);
      v159 = 0uLL;
      v160 = vaddq_s32(v158, (int32x4_t)xmmword_196889AA0);
      v161 = vaddq_s32(v158, (int32x4_t)xmmword_196889AB0);
      v162 = vaddq_s32(v158, (int32x4_t)xmmword_196889AC0);
      v163 = vaddq_s32(v158, (int32x4_t)xmmword_196889AD0);
      v164.i64[0] = 0x7F0000007FLL;
      v164.i64[1] = 0x7F0000007FLL;
      v165 = (v38 + 1) & 0x3FFFFFF0;
      v39 = result - 8 * v165;
      v40 = (uint8x16_t *)((char *)v35 + v165);
      v166 = v165;
      v167 = 0uLL;
      v168 = 0uLL;
      v169 = 0uLL;
      v170 = 0uLL;
      v171 = 0uLL;
      v172 = 0uLL;
      do
      {
        v173 = *v35++;
        v174 = vmovl_high_u8(v173);
        v175 = vmovl_high_u16(v174);
        v176.i64[0] = v175.u32[0];
        v176.i64[1] = v175.u32[1];
        v177 = v176;
        v178 = vmovl_u16(*(uint16x4_t *)v174.i8);
        v176.i64[0] = v178.u32[2];
        v176.i64[1] = v178.u32[3];
        v179 = v176;
        v180 = vmovl_u8(*(uint8x8_t *)v173.i8);
        v181 = vmovl_high_u16(v180);
        v176.i64[0] = v181.u32[2];
        v176.i64[1] = v181.u32[3];
        v182 = v176;
        v176.i64[0] = v175.u32[2];
        v176.i64[1] = v175.u32[3];
        v183 = v176;
        v176.i64[0] = v178.u32[0];
        v176.i64[1] = v178.u32[1];
        v184 = v176;
        v176.i64[0] = v181.u32[0];
        v176.i64[1] = v181.u32[1];
        v185 = v176;
        v186 = vmovl_u16(*(uint16x4_t *)v180.i8);
        v176.i64[0] = v186.u32[2];
        v176.i64[1] = v186.u32[3];
        v187 = v176;
        v176.i64[0] = v186.u32[0];
        v176.i64[1] = v186.u32[1];
        v188 = v176;
        v176.i64[0] = v160.u32[0];
        v176.i64[1] = v160.u32[1];
        v189 = v176;
        v176.i64[0] = v161.u32[2];
        v176.i64[1] = v161.u32[3];
        v190 = v176;
        v176.i64[0] = v162.u32[2];
        v176.i64[1] = v162.u32[3];
        v191 = v176;
        v176.i64[0] = v160.u32[2];
        v176.i64[1] = v160.u32[3];
        v192 = v176;
        v176.i64[0] = v161.u32[0];
        v176.i64[1] = v161.u32[1];
        v193 = v176;
        v176.i64[0] = v162.u32[0];
        v176.i64[1] = v162.u32[1];
        v194 = v176;
        v176.i64[0] = v163.u32[2];
        v176.i64[1] = v163.u32[3];
        v195 = v176;
        v176.i64[0] = v163.u32[0];
        v176.i64[1] = v163.u32[1];
        v171 = veorq_s8((int8x16_t)vshlq_u64(v177, v189), v171);
        v170 = veorq_s8((int8x16_t)vshlq_u64(v179, v190), v170);
        v168 = veorq_s8((int8x16_t)vshlq_u64(v182, v191), v168);
        v172 = veorq_s8((int8x16_t)vshlq_u64(v183, v192), v172);
        v169 = veorq_s8((int8x16_t)vshlq_u64(v184, v193), v169);
        v167 = veorq_s8((int8x16_t)vshlq_u64(v185, v194), v167);
        v159 = veorq_s8((int8x16_t)vshlq_u64(v187, v195), v159);
        v157 = veorq_s8((int8x16_t)vshlq_u64(v188, v176), v157);
        v163 = vaddq_s32(v163, v164);
        v162 = vaddq_s32(v162, v164);
        v161 = vaddq_s32(v161, v164);
        v160 = vaddq_s32(v160, v164);
        v166 -= 16;
      }
      while (v166);
      v196 = veorq_s8(veorq_s8(veorq_s8(v157, v169), veorq_s8(v167, v171)), veorq_s8(veorq_s8(v159, v170), veorq_s8(v168, v172)));
      v33 = (unint64_t)veor_s8(*(int8x8_t *)v196.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v196, v196, 8uLL));
      if (v156 == v165)
      {
        v197 = result - 8 * v165 + 8;
LABEL_88:
        v32 = 48 - v197;
        v35 = v40;
LABEL_89:
        *(_QWORD *)(v8 + 13824) = v35;
        goto LABEL_90;
      }
    }
    else
    {
      v39 = 40 - v32;
      v40 = *(uint8x16_t **)(v8 + 13824);
    }
    v198 = v39;
    do
    {
      v199 = v40->u8[0];
      v40 = (uint8x16_t *)((char *)v40 + 1);
      v33 ^= (unint64_t)v199 << v198;
      result = v198 - 8;
      if (v198 < 8)
        break;
      v198 -= 8;
    }
    while ((unint64_t)v40 < v36);
    v197 = result + 8;
    goto LABEL_88;
  }
LABEL_90:
  v200 = v22 < v26;
  v201 = (v34 >> 1) & 0x7FFFFF80 | 4;
  v202 = v201 << 48;
  v203 = v34 - 2 * v201;
  if (v33 >= v201 << 48)
    v204 = v201 << 48;
  else
    v204 = 0;
  if (v33 < v201 << 48)
    v203 = 0;
  v205 = v203 + v201;
  v206 = __clz(v205);
  v207 = v206 ^ 0x10;
  v208 = v32 - (v206 ^ 0x10);
  *(_DWORD *)(v8 + 13852) = v208;
  v209 = ((v33 - v204 + 1) << (v206 ^ 0x10)) - 1;
  *(_QWORD *)(v8 + 13840) = v209;
  v210 = v205 << v207;
  *(_DWORD *)(v8 + 13848) = v210;
  if ((v208 & 0x80000000) != 0)
  {
    result = *(_QWORD *)(v8 + 13824);
    v211 = 40 - v208;
    if ((int)(40 - v208) < 0)
      goto LABEL_114;
    v212 = *(_QWORD *)(v8 + 13832);
    if (result >= v212)
      goto LABEL_114;
    if (v211 >= 7)
      v213 = 7;
    else
      v213 = 40 - v208;
    v214 = (v207 - v32 - v213 + 47) >> 3;
    if (~result + v212 < v214)
      v214 = ~result + v212;
    if (v214 >= 0xF)
    {
      v217 = v214 + 1;
      v218 = (int8x16_t)v209;
      v219 = vdupq_n_s32(v211);
      v220 = 0uLL;
      v221 = vaddq_s32(v219, (int32x4_t)xmmword_196889AA0);
      v222 = vaddq_s32(v219, (int32x4_t)xmmword_196889AB0);
      v223 = vaddq_s32(v219, (int32x4_t)xmmword_196889AC0);
      v224 = vaddq_s32(v219, (int32x4_t)xmmword_196889AD0);
      v225.i64[0] = 0x7F0000007FLL;
      v225.i64[1] = 0x7F0000007FLL;
      v226 = (v214 + 1) & 0x3FFFFFF0;
      v215 = v211 - 8 * v226;
      v216 = (unsigned __int8 *)(result + v226);
      v227 = v226;
      v228 = 0uLL;
      v229 = 0uLL;
      v230 = 0uLL;
      v231 = 0uLL;
      v232 = 0uLL;
      v233 = 0uLL;
      do
      {
        v234 = *(uint8x16_t *)result;
        result += 16;
        v235 = vmovl_high_u8(v234);
        v236 = vmovl_high_u16(v235);
        v237.i64[0] = v236.u32[0];
        v237.i64[1] = v236.u32[1];
        v238 = v237;
        v239 = vmovl_u16(*(uint16x4_t *)v235.i8);
        v237.i64[0] = v239.u32[2];
        v237.i64[1] = v239.u32[3];
        v240 = v237;
        v241 = vmovl_u8(*(uint8x8_t *)v234.i8);
        v242 = vmovl_high_u16(v241);
        v237.i64[0] = v242.u32[2];
        v237.i64[1] = v242.u32[3];
        v243 = v237;
        v237.i64[0] = v236.u32[2];
        v237.i64[1] = v236.u32[3];
        v244 = v237;
        v237.i64[0] = v239.u32[0];
        v237.i64[1] = v239.u32[1];
        v245 = v237;
        v237.i64[0] = v242.u32[0];
        v237.i64[1] = v242.u32[1];
        v246 = v237;
        v247 = vmovl_u16(*(uint16x4_t *)v241.i8);
        v237.i64[0] = v247.u32[2];
        v237.i64[1] = v247.u32[3];
        v248 = v237;
        v237.i64[0] = v247.u32[0];
        v237.i64[1] = v247.u32[1];
        v249 = v237;
        v237.i64[0] = v221.u32[0];
        v237.i64[1] = v221.u32[1];
        v250 = v237;
        v237.i64[0] = v222.u32[2];
        v237.i64[1] = v222.u32[3];
        v251 = v237;
        v237.i64[0] = v223.u32[2];
        v237.i64[1] = v223.u32[3];
        v252 = v237;
        v237.i64[0] = v221.u32[2];
        v237.i64[1] = v221.u32[3];
        v253 = v237;
        v237.i64[0] = v222.u32[0];
        v237.i64[1] = v222.u32[1];
        v254 = v237;
        v237.i64[0] = v223.u32[0];
        v237.i64[1] = v223.u32[1];
        v255 = v237;
        v237.i64[0] = v224.u32[2];
        v237.i64[1] = v224.u32[3];
        v256 = v237;
        v237.i64[0] = v224.u32[0];
        v237.i64[1] = v224.u32[1];
        v232 = veorq_s8((int8x16_t)vshlq_u64(v238, v250), v232);
        v231 = veorq_s8((int8x16_t)vshlq_u64(v240, v251), v231);
        v229 = veorq_s8((int8x16_t)vshlq_u64(v243, v252), v229);
        v233 = veorq_s8((int8x16_t)vshlq_u64(v244, v253), v233);
        v230 = veorq_s8((int8x16_t)vshlq_u64(v245, v254), v230);
        v228 = veorq_s8((int8x16_t)vshlq_u64(v246, v255), v228);
        v220 = veorq_s8((int8x16_t)vshlq_u64(v248, v256), v220);
        v218 = veorq_s8((int8x16_t)vshlq_u64(v249, v237), v218);
        v224 = vaddq_s32(v224, v225);
        v223 = vaddq_s32(v223, v225);
        v222 = vaddq_s32(v222, v225);
        v221 = vaddq_s32(v221, v225);
        v227 -= 16;
      }
      while (v227);
      v257 = veorq_s8(veorq_s8(veorq_s8(v218, v230), veorq_s8(v228, v232)), veorq_s8(veorq_s8(v220, v231), veorq_s8(v229, v233)));
      v209 = (unint64_t)veor_s8(*(int8x8_t *)v257.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v257, v257, 8uLL));
      if (v217 == v226)
      {
        v258 = v211 - 8 * v226 + 8;
LABEL_113:
        v208 = 48 - v258;
        result = (unint64_t)v216;
LABEL_114:
        *(_QWORD *)(v8 + 13840) = v209;
        *(_DWORD *)(v8 + 13852) = v208;
        *(_QWORD *)(v8 + 13824) = result;
        goto LABEL_115;
      }
    }
    else
    {
      v215 = 40 - v208;
      v216 = *(unsigned __int8 **)(v8 + 13824);
    }
    v259 = v215;
    do
    {
      v260 = *v216++;
      v209 ^= (unint64_t)v260 << v259;
      v261 = v259 - 8;
      if (v259 < 8)
        break;
      v259 -= 8;
    }
    while ((unint64_t)v216 < v212);
    v258 = v261 + 8;
    goto LABEL_113;
  }
LABEL_115:
  v262 = v33 < v202;
  v263 = 0;
  if (v24)
  {
    result = 48;
    v264.i64[0] = 0x7F0000007FLL;
    v264.i64[1] = 0x7F0000007FLL;
    v265 = v208;
    v266 = v209;
    v267 = v24;
    while (1)
    {
      v270 = (v210 >> 1) & 0x7FFFFF80 | 4;
      v271 = v270 << 48;
      v272 = v210 - 2 * v270;
      if (v266 >= v270 << 48)
        v273 = v270 << 48;
      else
        v273 = 0;
      if (v266 < v270 << 48)
        v272 = 0;
      v274 = v272 + v270;
      v275 = __clz(v274);
      v276 = v275 ^ 0x10;
      v208 = v265 - (v275 ^ 0x10);
      *(_DWORD *)(v8 + 13852) = v208;
      v209 = ((v266 - v273 + 1) << (v275 ^ 0x10)) - 1;
      *(_QWORD *)(v8 + 13840) = v209;
      v210 = v274 << v276;
      *(_DWORD *)(v8 + 13848) = v210;
      if ((v208 & 0x80000000) == 0)
        goto LABEL_120;
      v269 = *(uint8x16_t **)(v8 + 13824);
      v277 = 40 - v208;
      if ((int)(40 - v208) >= 0)
      {
        v278 = *(_QWORD *)(v8 + 13832);
        if ((unint64_t)v269 < v278)
          break;
      }
LABEL_119:
      *(_QWORD *)(v8 + 13840) = v209;
      *(_DWORD *)(v8 + 13852) = v208;
      *(_QWORD *)(v8 + 13824) = v269;
LABEL_120:
      v263 = (2 * v263) | (v266 < v271);
      v265 = v208;
      v266 = v209;
      if (!--v267)
        goto LABEL_143;
    }
    v279 = ~(unint64_t)v269 + v278;
    if (v277 >= 7)
      v280 = 7;
    else
      v280 = v277;
    v281 = (v276 - v265 - v280 + 47) >> 3;
    if (v279 >= v281)
      v279 = v281;
    if (v279 >= 0xF)
    {
      v284 = v279 + 1;
      v285 = 0uLL;
      v286 = (int8x16_t)v209;
      v287 = vdupq_n_s32(v277);
      v288 = (v279 + 1) & 0x3FFFFFF0;
      v289 = vaddq_s32(v287, (int32x4_t)xmmword_196889AA0);
      v282 = v277 - 8 * v288;
      v290 = vaddq_s32(v287, (int32x4_t)xmmword_196889AB0);
      v283 = (uint8x16_t *)((char *)v269 + v288);
      v291 = vaddq_s32(v287, (int32x4_t)xmmword_196889AC0);
      v292 = vaddq_s32(v287, (int32x4_t)xmmword_196889AD0);
      v293 = v288;
      v294 = 0uLL;
      v295 = 0uLL;
      v296 = 0uLL;
      v297 = 0uLL;
      v298 = 0uLL;
      v299 = 0uLL;
      do
      {
        v300 = *v269++;
        v301 = vmovl_high_u8(v300);
        v302 = vmovl_high_u16(v301);
        v303.i64[0] = v302.u32[0];
        v303.i64[1] = v302.u32[1];
        v304 = v303;
        v305 = vmovl_u16(*(uint16x4_t *)v301.i8);
        v303.i64[0] = v305.u32[2];
        v303.i64[1] = v305.u32[3];
        v306 = v303;
        v307 = vmovl_u8(*(uint8x8_t *)v300.i8);
        v308 = vmovl_high_u16(v307);
        v303.i64[0] = v308.u32[2];
        v303.i64[1] = v308.u32[3];
        v309 = v303;
        v303.i64[0] = v302.u32[2];
        v303.i64[1] = v302.u32[3];
        v310 = v303;
        v303.i64[0] = v305.u32[0];
        v303.i64[1] = v305.u32[1];
        v311 = v303;
        v303.i64[0] = v308.u32[0];
        v303.i64[1] = v308.u32[1];
        v312 = v303;
        v313 = vmovl_u16(*(uint16x4_t *)v307.i8);
        v303.i64[0] = v313.u32[2];
        v303.i64[1] = v313.u32[3];
        v314 = v303;
        v303.i64[0] = v313.u32[0];
        v303.i64[1] = v313.u32[1];
        v315 = v303;
        v303.i64[0] = v289.u32[0];
        v303.i64[1] = v289.u32[1];
        v316 = v303;
        v303.i64[0] = v290.u32[2];
        v303.i64[1] = v290.u32[3];
        v317 = v303;
        v303.i64[0] = v291.u32[2];
        v303.i64[1] = v291.u32[3];
        v318 = v303;
        v303.i64[0] = v289.u32[2];
        v303.i64[1] = v289.u32[3];
        v319 = v303;
        v303.i64[0] = v290.u32[0];
        v303.i64[1] = v290.u32[1];
        v320 = v303;
        v303.i64[0] = v291.u32[0];
        v303.i64[1] = v291.u32[1];
        v321 = v303;
        v303.i64[0] = v292.u32[2];
        v303.i64[1] = v292.u32[3];
        v322 = v303;
        v303.i64[0] = v292.u32[0];
        v303.i64[1] = v292.u32[1];
        v298 = veorq_s8((int8x16_t)vshlq_u64(v304, v316), v298);
        v297 = veorq_s8((int8x16_t)vshlq_u64(v306, v317), v297);
        v295 = veorq_s8((int8x16_t)vshlq_u64(v309, v318), v295);
        v299 = veorq_s8((int8x16_t)vshlq_u64(v310, v319), v299);
        v296 = veorq_s8((int8x16_t)vshlq_u64(v311, v320), v296);
        v294 = veorq_s8((int8x16_t)vshlq_u64(v312, v321), v294);
        v285 = veorq_s8((int8x16_t)vshlq_u64(v314, v322), v285);
        v286 = veorq_s8((int8x16_t)vshlq_u64(v315, v303), v286);
        v292 = vaddq_s32(v292, v264);
        v291 = vaddq_s32(v291, v264);
        v290 = vaddq_s32(v290, v264);
        v289 = vaddq_s32(v289, v264);
        v293 -= 16;
      }
      while (v293);
      v323 = veorq_s8(veorq_s8(veorq_s8(v286, v296), veorq_s8(v294, v298)), veorq_s8(veorq_s8(v285, v297), veorq_s8(v295, v299)));
      v209 = (unint64_t)veor_s8(*(int8x8_t *)v323.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v323, v323, 8uLL));
      if (v284 == v288)
      {
        v268 = v277 - 8 * v288 + 8;
LABEL_118:
        v208 = 48 - v268;
        v269 = v283;
        goto LABEL_119;
      }
    }
    else
    {
      v282 = v277;
      v283 = *(uint8x16_t **)(v8 + 13824);
    }
    do
    {
      v324 = v283->u8[0];
      v283 = (uint8x16_t *)((char *)v283 + 1);
      v209 ^= (unint64_t)v324 << v282;
      v325 = v282 - 8;
      if (v282 < 8)
        break;
      v282 -= 8;
    }
    while ((unint64_t)v283 < v278);
    v268 = v325 + 8;
    goto LABEL_118;
  }
LABEL_143:
  *v10 = v263;
  if (*(unsigned __int8 *)(a2 + 12) >= 2u)
  {
    v326 = v24 + ((2 * v200) | v262);
    v327 = ~(-1 << v24);
    v328 = v326 - 4;
    if (v328)
    {
      v329 = 1;
      result = 48;
      v330.i64[0] = 0x7F0000007FLL;
      v330.i64[1] = 0x7F0000007FLL;
      while (1)
      {
        v334 = 0;
        v335 = v209;
        v336 = v328;
        do
        {
          v337 = (v210 >> 1) & 0x7FFFFF80 | 4;
          v338 = v337 << 48;
          v339 = v210 - 2 * v337;
          if (v335 >= v337 << 48)
            v340 = v337 << 48;
          else
            v340 = 0;
          if (v335 < v337 << 48)
            v339 = 0;
          v341 = v339 + v337;
          v342 = __clz(v341);
          v343 = v342 ^ 0x10;
          v344 = v208 - (v342 ^ 0x10);
          *(_DWORD *)(v8 + 13852) = v344;
          v209 = ((v335 - v340 + 1) << (v342 ^ 0x10)) - 1;
          *(_QWORD *)(v8 + 13840) = v209;
          v210 = v341 << v343;
          *(_DWORD *)(v8 + 13848) = v210;
          if ((v344 & 0x80000000) == 0)
          {
            v208 -= v343;
            goto LABEL_155;
          }
          v345 = *(uint8x16_t **)(v8 + 13824);
          v346 = 40 - v344;
          if ((int)(40 - v344) >= 0)
          {
            v347 = *(_QWORD *)(v8 + 13832);
            if ((unint64_t)v345 < v347)
            {
              if (v346 >= 7)
                v348 = 7;
              else
                v348 = 40 - v344;
              v349 = (v343 - v208 - v348 + 47) >> 3;
              if (~(unint64_t)v345 + v347 < v349)
                v349 = ~(unint64_t)v345 + v347;
              if (v349 >= 0xF)
              {
                v352 = v349 + 1;
                v353 = 0uLL;
                v354 = (int8x16_t)v209;
                v355 = vdupq_n_s32(v346);
                v356 = (v349 + 1) & 0x3FFFFFF0;
                v357 = vaddq_s32(v355, (int32x4_t)xmmword_196889AA0);
                v350 = v346 - 8 * v356;
                v358 = vaddq_s32(v355, (int32x4_t)xmmword_196889AB0);
                v351 = (uint8x16_t *)((char *)v345 + v356);
                v359 = vaddq_s32(v355, (int32x4_t)xmmword_196889AC0);
                v360 = vaddq_s32(v355, (int32x4_t)xmmword_196889AD0);
                v361 = v356;
                v362 = 0uLL;
                v363 = 0uLL;
                v364 = 0uLL;
                v365 = 0uLL;
                v366 = 0uLL;
                v367 = 0uLL;
                do
                {
                  v368 = *v345++;
                  v369 = vmovl_high_u8(v368);
                  v370 = vmovl_high_u16(v369);
                  v371.i64[0] = v370.u32[0];
                  v371.i64[1] = v370.u32[1];
                  v372 = v371;
                  v373 = vmovl_u16(*(uint16x4_t *)v369.i8);
                  v371.i64[0] = v373.u32[2];
                  v371.i64[1] = v373.u32[3];
                  v374 = v371;
                  v375 = vmovl_u8(*(uint8x8_t *)v368.i8);
                  v376 = vmovl_high_u16(v375);
                  v371.i64[0] = v376.u32[2];
                  v371.i64[1] = v376.u32[3];
                  v377 = v371;
                  v371.i64[0] = v370.u32[2];
                  v371.i64[1] = v370.u32[3];
                  v378 = v371;
                  v371.i64[0] = v373.u32[0];
                  v371.i64[1] = v373.u32[1];
                  v379 = v371;
                  v371.i64[0] = v376.u32[0];
                  v371.i64[1] = v376.u32[1];
                  v380 = v371;
                  v381 = vmovl_u16(*(uint16x4_t *)v375.i8);
                  v371.i64[0] = v381.u32[2];
                  v371.i64[1] = v381.u32[3];
                  v382 = v371;
                  v371.i64[0] = v381.u32[0];
                  v371.i64[1] = v381.u32[1];
                  v383 = v371;
                  v371.i64[0] = v357.u32[0];
                  v371.i64[1] = v357.u32[1];
                  v384 = v371;
                  v371.i64[0] = v358.u32[2];
                  v371.i64[1] = v358.u32[3];
                  v385 = v371;
                  v371.i64[0] = v359.u32[2];
                  v371.i64[1] = v359.u32[3];
                  v386 = v371;
                  v371.i64[0] = v357.u32[2];
                  v371.i64[1] = v357.u32[3];
                  v387 = v371;
                  v371.i64[0] = v358.u32[0];
                  v371.i64[1] = v358.u32[1];
                  v388 = v371;
                  v371.i64[0] = v359.u32[0];
                  v371.i64[1] = v359.u32[1];
                  v389 = v371;
                  v371.i64[0] = v360.u32[2];
                  v371.i64[1] = v360.u32[3];
                  v390 = v371;
                  v371.i64[0] = v360.u32[0];
                  v371.i64[1] = v360.u32[1];
                  v366 = veorq_s8((int8x16_t)vshlq_u64(v372, v384), v366);
                  v365 = veorq_s8((int8x16_t)vshlq_u64(v374, v385), v365);
                  v363 = veorq_s8((int8x16_t)vshlq_u64(v377, v386), v363);
                  v367 = veorq_s8((int8x16_t)vshlq_u64(v378, v387), v367);
                  v364 = veorq_s8((int8x16_t)vshlq_u64(v379, v388), v364);
                  v362 = veorq_s8((int8x16_t)vshlq_u64(v380, v389), v362);
                  v353 = veorq_s8((int8x16_t)vshlq_u64(v382, v390), v353);
                  v354 = veorq_s8((int8x16_t)vshlq_u64(v383, v371), v354);
                  v360 = vaddq_s32(v360, v330);
                  v359 = vaddq_s32(v359, v330);
                  v358 = vaddq_s32(v358, v330);
                  v357 = vaddq_s32(v357, v330);
                  v361 -= 16;
                }
                while (v361);
                v391 = veorq_s8(veorq_s8(veorq_s8(v354, v364), veorq_s8(v362, v366)), veorq_s8(veorq_s8(v353, v365), veorq_s8(v363, v367)));
                v209 = (unint64_t)veor_s8(*(int8x8_t *)v391.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v391, v391, 8uLL));
                if (v352 != v356)
                  goto LABEL_175;
                v392 = v346 - 8 * v356 + 8;
              }
              else
              {
                v350 = 40 - v344;
                v351 = *(uint8x16_t **)(v8 + 13824);
LABEL_175:
                v393 = v350;
                do
                {
                  v394 = v351->u8[0];
                  v351 = (uint8x16_t *)((char *)v351 + 1);
                  v209 ^= (unint64_t)v394 << v393;
                  v395 = v393 - 8;
                  if (v393 < 8)
                    break;
                  v393 -= 8;
                }
                while ((unint64_t)v351 < v347);
                v392 = v395 + 8;
              }
              v344 = 48 - v392;
              v345 = v351;
            }
          }
          *(_QWORD *)(v8 + 13840) = v209;
          *(_DWORD *)(v8 + 13852) = v344;
          v208 = v344;
          *(_QWORD *)(v8 + 13824) = v345;
LABEL_155:
          v334 = (2 * v334) | (v335 < v338);
          v335 = v209;
          --v336;
        }
        while (v336);
        if (v334)
        {
          v396 = (v210 >> 1) & 0x7FFFFF80 | 4;
          v397 = v396 << 48;
          v398 = v210 - 2 * v396;
          if (v209 >= v396 << 48)
            v399 = v396 << 48;
          else
            v399 = 0;
          if (v209 < v396 << 48)
            v398 = 0;
          v400 = v398 + v396;
          v401 = __clz(v400);
          v402 = v401 ^ 0x10;
          v332 = v208 - (v401 ^ 0x10);
          *(_DWORD *)(v8 + 13852) = v332;
          v403 = ((v209 - v399 + 1) << (v401 ^ 0x10)) - 1;
          *(_QWORD *)(v8 + 13840) = v403;
          v210 = v400 << (v401 ^ 0x10);
          *(_DWORD *)(v8 + 13848) = v210;
          if ((v332 & 0x80000000) != 0)
          {
            v333 = *(uint8x16_t **)(v8 + 13824);
            v404 = 40 - v332;
            if ((int)(40 - v332) >= 0)
            {
              v405 = *(_QWORD *)(v8 + 13832);
              if ((unint64_t)v333 < v405)
              {
                if (v404 >= 7)
                  v406 = 7;
                else
                  v406 = 40 - v332;
                v407 = (v402 - v208 - v406 + 47) >> 3;
                if (~(unint64_t)v333 + v405 < v407)
                  v407 = ~(unint64_t)v333 + v405;
                if (v407 >= 0xF)
                {
                  v410 = v407 + 1;
                  v411 = 0uLL;
                  v412 = (int8x16_t)(unint64_t)v403;
                  v413 = vdupq_n_s32(v404);
                  v414 = (v407 + 1) & 0x3FFFFFF0;
                  v415 = vaddq_s32(v413, (int32x4_t)xmmword_196889AA0);
                  v408 = v404 - 8 * v414;
                  v416 = vaddq_s32(v413, (int32x4_t)xmmword_196889AB0);
                  v409 = (uint8x16_t *)((char *)v333 + v414);
                  v417 = vaddq_s32(v413, (int32x4_t)xmmword_196889AC0);
                  v418 = vaddq_s32(v413, (int32x4_t)xmmword_196889AD0);
                  v419 = v414;
                  v420 = 0uLL;
                  v421 = 0uLL;
                  v422 = 0uLL;
                  v423 = 0uLL;
                  v424 = 0uLL;
                  v425 = 0uLL;
                  do
                  {
                    v426 = *v333++;
                    v427 = vmovl_high_u8(v426);
                    v428 = vmovl_high_u16(v427);
                    v429.i64[0] = v428.u32[0];
                    v429.i64[1] = v428.u32[1];
                    v430 = v429;
                    v431 = vmovl_u16(*(uint16x4_t *)v427.i8);
                    v429.i64[0] = v431.u32[2];
                    v429.i64[1] = v431.u32[3];
                    v432 = v429;
                    v433 = vmovl_u8(*(uint8x8_t *)v426.i8);
                    v434 = vmovl_high_u16(v433);
                    v429.i64[0] = v434.u32[2];
                    v429.i64[1] = v434.u32[3];
                    v435 = v429;
                    v429.i64[0] = v428.u32[2];
                    v429.i64[1] = v428.u32[3];
                    v436 = v429;
                    v429.i64[0] = v431.u32[0];
                    v429.i64[1] = v431.u32[1];
                    v437 = v429;
                    v429.i64[0] = v434.u32[0];
                    v429.i64[1] = v434.u32[1];
                    v438 = v429;
                    v439 = vmovl_u16(*(uint16x4_t *)v433.i8);
                    v429.i64[0] = v439.u32[2];
                    v429.i64[1] = v439.u32[3];
                    v440 = v429;
                    v429.i64[0] = v439.u32[0];
                    v429.i64[1] = v439.u32[1];
                    v441 = v429;
                    v429.i64[0] = v415.u32[0];
                    v429.i64[1] = v415.u32[1];
                    v442 = v429;
                    v429.i64[0] = v416.u32[2];
                    v429.i64[1] = v416.u32[3];
                    v443 = v429;
                    v429.i64[0] = v417.u32[2];
                    v429.i64[1] = v417.u32[3];
                    v444 = v429;
                    v429.i64[0] = v415.u32[2];
                    v429.i64[1] = v415.u32[3];
                    v445 = v429;
                    v429.i64[0] = v416.u32[0];
                    v429.i64[1] = v416.u32[1];
                    v446 = v429;
                    v429.i64[0] = v417.u32[0];
                    v429.i64[1] = v417.u32[1];
                    v447 = v429;
                    v429.i64[0] = v418.u32[2];
                    v429.i64[1] = v418.u32[3];
                    v448 = v429;
                    v429.i64[0] = v418.u32[0];
                    v429.i64[1] = v418.u32[1];
                    v424 = veorq_s8((int8x16_t)vshlq_u64(v430, v442), v424);
                    v423 = veorq_s8((int8x16_t)vshlq_u64(v432, v443), v423);
                    v421 = veorq_s8((int8x16_t)vshlq_u64(v435, v444), v421);
                    v425 = veorq_s8((int8x16_t)vshlq_u64(v436, v445), v425);
                    v422 = veorq_s8((int8x16_t)vshlq_u64(v437, v446), v422);
                    v420 = veorq_s8((int8x16_t)vshlq_u64(v438, v447), v420);
                    v411 = veorq_s8((int8x16_t)vshlq_u64(v440, v448), v411);
                    v412 = veorq_s8((int8x16_t)vshlq_u64(v441, v429), v412);
                    v418 = vaddq_s32(v418, v330);
                    v417 = vaddq_s32(v417, v330);
                    v416 = vaddq_s32(v416, v330);
                    v415 = vaddq_s32(v415, v330);
                    v419 -= 16;
                  }
                  while (v419);
                  v449 = veorq_s8(veorq_s8(veorq_s8(v412, v422), veorq_s8(v420, v424)), veorq_s8(veorq_s8(v411, v423), veorq_s8(v421, v425)));
                  v403 = (uint64_t)veor_s8(*(int8x8_t *)v449.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v449, v449, 8uLL));
                  if (v410 != v414)
                    goto LABEL_201;
                  v331 = v404 - 8 * v414 + 8;
                }
                else
                {
                  v408 = 40 - v332;
                  v409 = *(uint8x16_t **)(v8 + 13824);
LABEL_201:
                  v450 = v408;
                  do
                  {
                    v451 = v409->u8[0];
                    v409 = (uint8x16_t *)((char *)v409 + 1);
                    v403 ^= (unint64_t)v451 << v450;
                    v452 = v450 - 8;
                    if (v450 < 8)
                      break;
                    v450 -= 8;
                  }
                  while ((unint64_t)v409 < v405);
                  v331 = v452 + 8;
                }
                v332 = 48 - v331;
                v333 = v409;
              }
            }
            *(_QWORD *)(v8 + 13840) = v403;
            *(_DWORD *)(v8 + 13852) = v332;
            *(_QWORD *)(v8 + 13824) = v333;
          }
          if (v209 < v397)
            v334 = -v334;
          v208 = v332;
          v209 = v403;
        }
        v263 = (v334 + v263) & v327;
        v10[v329++] = v263;
        if (v329 >= *(unsigned __int8 *)(a2 + 12))
          return result;
      }
    }
    v453 = 1;
    do
      v10[v453++] = v263 & v327;
    while (v453 < *(unsigned __int8 *)(a2 + 12));
  }
  return result;
}

uint64_t read_pal_indices(uint64_t result, _BYTE *a2, uint64_t a3, unsigned int a4, int a5, int a6, int a7, int a8)
{
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned __int8 **v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  int32x4_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  uint8x16_t *v28;
  unsigned int v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  uint8x16_t *v34;
  unint64_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int32x4_t v38;
  uint64_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  uint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint8x16_t v51;
  uint16x8_t v52;
  uint32x4_t v53;
  uint64x2_t v54;
  uint64x2_t v55;
  uint32x4_t v56;
  uint64x2_t v57;
  uint16x8_t v58;
  uint32x4_t v59;
  uint64x2_t v60;
  uint64x2_t v61;
  uint64x2_t v62;
  uint64x2_t v63;
  uint32x4_t v64;
  uint64x2_t v65;
  uint64x2_t v66;
  uint64x2_t v67;
  uint64x2_t v68;
  uint64x2_t v69;
  uint64x2_t v70;
  uint64x2_t v71;
  uint64x2_t v72;
  uint64x2_t v73;
  int8x16_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  uint8x16_t *v87;
  unsigned int v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  unsigned int v92;
  uint8x16_t *v93;
  unint64_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int32x4_t v97;
  uint64_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  uint64_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  uint8x16_t v111;
  uint16x8_t v112;
  uint32x4_t v113;
  uint64x2_t v114;
  uint64x2_t v115;
  uint32x4_t v116;
  uint64x2_t v117;
  uint16x8_t v118;
  uint32x4_t v119;
  uint64x2_t v120;
  uint64x2_t v121;
  uint64x2_t v122;
  uint64x2_t v123;
  uint32x4_t v124;
  uint64x2_t v125;
  uint64x2_t v126;
  uint64x2_t v127;
  uint64x2_t v128;
  uint64x2_t v129;
  uint64x2_t v130;
  uint64x2_t v131;
  uint64x2_t v132;
  uint64x2_t v133;
  int8x16_t v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  size_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  _BYTE *v148;
  _BYTE *v149;
  int v150;
  int v151;
  int v152;
  int v155;
  uint64_t v156;
  char v157;
  char v158;
  _BYTE *v159;
  uint64_t v160;
  unsigned __int8 *v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE *v165;
  uint64_t v166;
  _BYTE *v167;
  _BYTE *v168;
  BOOL v170;
  int v171;
  int v172;
  int v173;
  int v176;
  uint64_t v177;
  char v178;
  _BYTE *v179;
  _BYTE *v180;
  _BYTE *v181;
  _BYTE *v182;
  _BYTE *v183;
  _BYTE *v184;
  _BYTE *v185;
  char v187;
  int v188;
  int v190;
  char v191;
  char v192;
  int v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  char *v197;
  int v201;
  _BYTE *v202;
  unsigned __int8 *v203;
  _BYTE *v204;
  size_t v206;
  uint64_t v208;
  uint64_t v209;
  int v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;

  v8 = 0;
  v9 = (_BYTE *)(result + 9280);
  v202 = (_BYTE *)result;
  v10 = *(_QWORD *)(result + 16);
  v11 = (unsigned __int8 **)(v10 + 13824);
  v12 = a3 + 11;
  v214 = a4;
  v13 = *(unsigned __int8 *)(a3 + 11 + a4);
  v14 = __clz(v13) ^ 0x1F;
  v15 = *(_DWORD *)(v10 + 13848);
  v16 = *(_QWORD *)(v10 + 13840);
  v17 = *(_DWORD *)(v10 + 13852);
  v18.i64[0] = 0x7F0000007FLL;
  v18.i64[1] = 0x7F0000007FLL;
  LODWORD(result) = v14;
  do
  {
    v19 = (v15 >> 1) & 0x7FFFFF80 | 4;
    v20 = v19 << 48;
    v21 = v15 - 2 * v19;
    if (v16 >= v19 << 48)
      v22 = v19 << 48;
    else
      v22 = 0;
    if (v16 < v19 << 48)
      v21 = 0;
    v23 = v21 + v19;
    v24 = __clz(v23);
    v25 = v24 ^ 0x10;
    v26 = v17 - (v24 ^ 0x10);
    *(_DWORD *)(v10 + 13852) = v26;
    v27 = ((v16 - v22 + 1) << (v24 ^ 0x10)) - 1;
    *(_QWORD *)(v10 + 13840) = v27;
    v15 = v23 << v25;
    *(_DWORD *)(v10 + 13848) = v15;
    if ((v26 & 0x80000000) == 0)
    {
      v17 -= v25;
      goto LABEL_3;
    }
    v28 = *(uint8x16_t **)(v10 + 13824);
    v29 = 40 - v26;
    if ((int)(40 - v26) >= 0)
    {
      v30 = *(_QWORD *)(v10 + 13832);
      if ((unint64_t)v28 < v30)
      {
        if (v29 >= 7)
          v31 = 7;
        else
          v31 = 40 - v26;
        v32 = (v25 - v17 - v31 + 47) >> 3;
        if (~(unint64_t)v28 + v30 < v32)
          v32 = ~(unint64_t)v28 + v30;
        if (v32 >= 0xF)
        {
          v35 = v32 + 1;
          v36 = 0uLL;
          v37 = (int8x16_t)v27;
          v38 = vdupq_n_s32(v29);
          v39 = (v32 + 1) & 0x3FFFFFF0;
          v40 = vaddq_s32(v38, (int32x4_t)xmmword_196889AA0);
          v33 = v29 - 8 * v39;
          v41 = vaddq_s32(v38, (int32x4_t)xmmword_196889AB0);
          v34 = (uint8x16_t *)((char *)v28 + v39);
          v42 = vaddq_s32(v38, (int32x4_t)xmmword_196889AC0);
          v43 = vaddq_s32(v38, (int32x4_t)xmmword_196889AD0);
          v44 = v39;
          v45 = 0uLL;
          v46 = 0uLL;
          v47 = 0uLL;
          v48 = 0uLL;
          v49 = 0uLL;
          v50 = 0uLL;
          do
          {
            v51 = *v28++;
            v52 = vmovl_high_u8(v51);
            v53 = vmovl_high_u16(v52);
            v54.i64[0] = v53.u32[0];
            v54.i64[1] = v53.u32[1];
            v55 = v54;
            v56 = vmovl_u16(*(uint16x4_t *)v52.i8);
            v54.i64[0] = v56.u32[2];
            v54.i64[1] = v56.u32[3];
            v57 = v54;
            v58 = vmovl_u8(*(uint8x8_t *)v51.i8);
            v59 = vmovl_high_u16(v58);
            v54.i64[0] = v59.u32[2];
            v54.i64[1] = v59.u32[3];
            v60 = v54;
            v54.i64[0] = v53.u32[2];
            v54.i64[1] = v53.u32[3];
            v61 = v54;
            v54.i64[0] = v56.u32[0];
            v54.i64[1] = v56.u32[1];
            v62 = v54;
            v54.i64[0] = v59.u32[0];
            v54.i64[1] = v59.u32[1];
            v63 = v54;
            v64 = vmovl_u16(*(uint16x4_t *)v58.i8);
            v54.i64[0] = v64.u32[2];
            v54.i64[1] = v64.u32[3];
            v65 = v54;
            v54.i64[0] = v64.u32[0];
            v54.i64[1] = v64.u32[1];
            v66 = v54;
            v54.i64[0] = v40.u32[0];
            v54.i64[1] = v40.u32[1];
            v67 = v54;
            v54.i64[0] = v41.u32[2];
            v54.i64[1] = v41.u32[3];
            v68 = v54;
            v54.i64[0] = v42.u32[2];
            v54.i64[1] = v42.u32[3];
            v69 = v54;
            v54.i64[0] = v40.u32[2];
            v54.i64[1] = v40.u32[3];
            v70 = v54;
            v54.i64[0] = v41.u32[0];
            v54.i64[1] = v41.u32[1];
            v71 = v54;
            v54.i64[0] = v42.u32[0];
            v54.i64[1] = v42.u32[1];
            v72 = v54;
            v54.i64[0] = v43.u32[2];
            v54.i64[1] = v43.u32[3];
            v73 = v54;
            v54.i64[0] = v43.u32[0];
            v54.i64[1] = v43.u32[1];
            v49 = veorq_s8((int8x16_t)vshlq_u64(v55, v67), v49);
            v48 = veorq_s8((int8x16_t)vshlq_u64(v57, v68), v48);
            v46 = veorq_s8((int8x16_t)vshlq_u64(v60, v69), v46);
            v50 = veorq_s8((int8x16_t)vshlq_u64(v61, v70), v50);
            v47 = veorq_s8((int8x16_t)vshlq_u64(v62, v71), v47);
            v45 = veorq_s8((int8x16_t)vshlq_u64(v63, v72), v45);
            v36 = veorq_s8((int8x16_t)vshlq_u64(v65, v73), v36);
            v37 = veorq_s8((int8x16_t)vshlq_u64(v66, v54), v37);
            v43 = vaddq_s32(v43, v18);
            v42 = vaddq_s32(v42, v18);
            v41 = vaddq_s32(v41, v18);
            v40 = vaddq_s32(v40, v18);
            v44 -= 16;
          }
          while (v44);
          v74 = veorq_s8(veorq_s8(veorq_s8(v37, v47), veorq_s8(v45, v49)), veorq_s8(veorq_s8(v36, v48), veorq_s8(v46, v50)));
          v27 = (unint64_t)veor_s8(*(int8x8_t *)v74.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL));
          if (v35 == v39)
          {
            v75 = v29 - 8 * v39 + 8;
LABEL_27:
            v26 = 48 - v75;
            v28 = v34;
            goto LABEL_28;
          }
        }
        else
        {
          v33 = v29;
          v34 = *(uint8x16_t **)(v10 + 13824);
        }
        v76 = v33;
        do
        {
          v77 = v34->u8[0];
          v34 = (uint8x16_t *)((char *)v34 + 1);
          v27 ^= (unint64_t)v77 << v76;
          v78 = v76 - 8;
          if (v76 < 8)
            break;
          v76 -= 8;
        }
        while ((unint64_t)v34 < v30);
        v75 = v78 + 8;
        goto LABEL_27;
      }
    }
LABEL_28:
    *(_QWORD *)(v10 + 13840) = v27;
    *(_DWORD *)(v10 + 13852) = v26;
    v17 = v26;
    *(_QWORD *)(v10 + 13824) = v28;
LABEL_3:
    v8 = (2 * v8) | (v16 < v20);
    v16 = v27;
    result = (result - 1);
  }
  while ((_DWORD)result);
  v204 = v9;
  v79 = (2 << v14) - v13;
  if (v8 >= v79)
  {
    LOBYTE(v8) = 2 * v8 - v79;
    v80 = (v15 >> 1) & 0x7FFFFF80 | 4;
    v81 = v80 << 48;
    v82 = v15 - 2 * v80;
    if (v27 >= v80 << 48)
      v83 = v80 << 48;
    else
      v83 = 0;
    if (v27 < v80 << 48)
      v82 = 0;
    v84 = v82 + v80;
    v85 = __clz(v84) ^ 0x10;
    v86 = v17 - v85;
    *(_DWORD *)(v10 + 13852) = v17 - v85;
    result = ((v27 - v83 + 1) << v85) - 1;
    *(_QWORD *)(v10 + 13840) = result;
    *(_DWORD *)(v10 + 13848) = v84 << v85;
    if (((v17 - v85) & 0x80000000) != 0)
    {
      v87 = *(uint8x16_t **)(v10 + 13824);
      v88 = 40 - v86;
      if ((int)(40 - v86) >= 0)
      {
        v89 = *(_QWORD *)(v10 + 13832);
        if ((unint64_t)v87 < v89)
        {
          if (v88 >= 7)
            v90 = 7;
          else
            v90 = 40 - v86;
          v91 = (v85 - v17 - v90 + 47) >> 3;
          if (~(unint64_t)v87 + v89 < v91)
            v91 = ~(unint64_t)v87 + v89;
          if (v91 >= 0xF)
          {
            v94 = v91 + 1;
            v95 = (int8x16_t)(unint64_t)result;
            v96 = 0uLL;
            v97 = vdupq_n_s32(v88);
            v98 = (v91 + 1) & 0x3FFFFFF0;
            v99 = vaddq_s32(v97, (int32x4_t)xmmword_196889AA0);
            v92 = v88 - 8 * v98;
            v100 = vaddq_s32(v97, (int32x4_t)xmmword_196889AB0);
            v93 = (uint8x16_t *)((char *)v87 + v98);
            v101 = vaddq_s32(v97, (int32x4_t)xmmword_196889AC0);
            v102 = vaddq_s32(v97, (int32x4_t)xmmword_196889AD0);
            v103.i64[0] = 0x7F0000007FLL;
            v103.i64[1] = 0x7F0000007FLL;
            v104 = v98;
            v105 = 0uLL;
            v106 = 0uLL;
            v107 = 0uLL;
            v108 = 0uLL;
            v109 = 0uLL;
            v110 = 0uLL;
            do
            {
              v111 = *v87++;
              v112 = vmovl_high_u8(v111);
              v113 = vmovl_high_u16(v112);
              v114.i64[0] = v113.u32[0];
              v114.i64[1] = v113.u32[1];
              v115 = v114;
              v116 = vmovl_u16(*(uint16x4_t *)v112.i8);
              v114.i64[0] = v116.u32[2];
              v114.i64[1] = v116.u32[3];
              v117 = v114;
              v118 = vmovl_u8(*(uint8x8_t *)v111.i8);
              v119 = vmovl_high_u16(v118);
              v114.i64[0] = v119.u32[2];
              v114.i64[1] = v119.u32[3];
              v120 = v114;
              v114.i64[0] = v113.u32[2];
              v114.i64[1] = v113.u32[3];
              v121 = v114;
              v114.i64[0] = v116.u32[0];
              v114.i64[1] = v116.u32[1];
              v122 = v114;
              v114.i64[0] = v119.u32[0];
              v114.i64[1] = v119.u32[1];
              v123 = v114;
              v124 = vmovl_u16(*(uint16x4_t *)v118.i8);
              v114.i64[0] = v124.u32[2];
              v114.i64[1] = v124.u32[3];
              v125 = v114;
              v114.i64[0] = v124.u32[0];
              v114.i64[1] = v124.u32[1];
              v126 = v114;
              v114.i64[0] = v99.u32[0];
              v114.i64[1] = v99.u32[1];
              v127 = v114;
              v114.i64[0] = v100.u32[2];
              v114.i64[1] = v100.u32[3];
              v128 = v114;
              v114.i64[0] = v101.u32[2];
              v114.i64[1] = v101.u32[3];
              v129 = v114;
              v114.i64[0] = v99.u32[2];
              v114.i64[1] = v99.u32[3];
              v130 = v114;
              v114.i64[0] = v100.u32[0];
              v114.i64[1] = v100.u32[1];
              v131 = v114;
              v114.i64[0] = v101.u32[0];
              v114.i64[1] = v101.u32[1];
              v132 = v114;
              v114.i64[0] = v102.u32[2];
              v114.i64[1] = v102.u32[3];
              v133 = v114;
              v114.i64[0] = v102.u32[0];
              v114.i64[1] = v102.u32[1];
              v109 = veorq_s8((int8x16_t)vshlq_u64(v115, v127), v109);
              v108 = veorq_s8((int8x16_t)vshlq_u64(v117, v128), v108);
              v106 = veorq_s8((int8x16_t)vshlq_u64(v120, v129), v106);
              v110 = veorq_s8((int8x16_t)vshlq_u64(v121, v130), v110);
              v107 = veorq_s8((int8x16_t)vshlq_u64(v122, v131), v107);
              v105 = veorq_s8((int8x16_t)vshlq_u64(v123, v132), v105);
              v96 = veorq_s8((int8x16_t)vshlq_u64(v125, v133), v96);
              v95 = veorq_s8((int8x16_t)vshlq_u64(v126, v114), v95);
              v102 = vaddq_s32(v102, v103);
              v101 = vaddq_s32(v101, v103);
              v100 = vaddq_s32(v100, v103);
              v99 = vaddq_s32(v99, v103);
              v104 -= 16;
            }
            while (v104);
            v134 = veorq_s8(veorq_s8(veorq_s8(v95, v107), veorq_s8(v105, v109)), veorq_s8(veorq_s8(v96, v108), veorq_s8(v106, v110)));
            result = (uint64_t)veor_s8(*(int8x8_t *)v134.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v134, v134, 8uLL));
            if (v94 != v98)
              goto LABEL_49;
            v135 = v88 - 8 * v98 + 8;
          }
          else
          {
            v92 = 40 - v86;
            v93 = *(uint8x16_t **)(v10 + 13824);
LABEL_49:
            v136 = v92;
            do
            {
              v137 = v93->u8[0];
              v93 = (uint8x16_t *)((char *)v93 + 1);
              result ^= (unint64_t)v137 << v136;
              v138 = v136 - 8;
              if (v136 < 8)
                break;
              v136 -= 8;
            }
            while ((unint64_t)v93 < v89);
            v135 = v138 + 8;
          }
          v86 = 48 - v135;
          v87 = v93;
        }
      }
      *(_QWORD *)(v10 + 13840) = result;
      *(_DWORD *)(v10 + 13852) = v86;
      *(_QWORD *)(v10 + 13824) = v87;
    }
    if (v27 < v81)
      LOBYTE(v8) = v8 + 1;
  }
  v206 = (4 * a7);
  *a2 = v8;
  v201 = 4 * a5;
  v210 = 4 * a6;
  v139 = v214;
  if (a6 + a5 >= 1)
  {
    v140 = v10 + 560 * v214 + 80 * *(unsigned __int8 *)(v12 + v214) + 3616;
    v203 = v9 + 512;
    LODWORD(v10) = 4 * (a6 + a5) - 1;
    v141 = v206 - 1;
    if ((int)v10 <= 2)
      v10 = 2;
    else
      v10 = v10;
    v208 = v10;
    v209 = v201 - 1;
    v142 = 1 - v210;
    v212 = 2;
    v143 = 1;
    while (2)
    {
      if (v143 >= v209)
        v144 = v201 - 1;
      else
        v144 = v143;
      if ((int)v143 >= (int)v209)
        v145 = v209;
      else
        v145 = v143;
      v211 = v142;
      if (v142 < 0)
        v142 = -1;
      v213 = v143;
      v146 = v143 - v210;
      if ((int)v143 - v210 < 0)
        v146 = -1;
      v147 = v145 - v146;
      if ((int)v145 <= v146)
        goto LABEL_62;
      v148 = &a2[v145 + (v213 - v145) * v206];
      if (a5 <= 0)
      {
        v149 = v204;
        v204[512] = 0;
        v157 = v148[-v206];
        *v204 = v157;
        v155 = 1 << v157;
        v156 = 1;
        goto LABEL_89;
      }
      v149 = v204;
      if (v213 < v201)
      {
        v204[512] = 0;
        v158 = *(v148 - 1);
        *v204 = v158;
        v155 = 1 << v158;
      }
      else
      {
        v150 = v148[-v206];
        v151 = *(v148 - 1);
        v152 = v148[~v206];
        if (v151 != v152 || v150 != v151 || v150 != v152)
        {
          if (v150 == v151)
          {
            v204[512] = 3;
            *v204 = v151;
            v204[1] = v152;
            v155 = (1 << v152) | (1 << v150);
            v156 = 2;
          }
          else if (v150 == v152 || v151 == v152)
          {
            v204[512] = 2;
            *v204 = v152;
            v190 = 1 << v152;
            if (v150 == v152)
              v191 = v151;
            else
              v191 = v150;
            v204[1] = v191;
            v155 = (1 << v191) | v190;
            v156 = 2;
          }
          else
          {
            v204[512] = 1;
            if (v150 >= v151)
              v192 = v151;
            else
              v192 = v150;
            *v204 = v192;
            v193 = 1 << v192;
            if (v150 <= v151)
              LOBYTE(v150) = v151;
            v204[1] = v150;
            v204[2] = v152;
            v155 = v193 | (1 << v150) | (1 << v152);
            v156 = 3;
          }
LABEL_89:
          if ((v155 & 1) == 0)
          {
            v149[v156++] = 0;
            if ((v155 & 2) == 0)
              goto LABEL_100;
LABEL_91:
            if ((v155 & 4) != 0)
              goto LABEL_92;
LABEL_101:
            v149[v156++] = 2;
            if ((v155 & 8) == 0)
              goto LABEL_102;
LABEL_93:
            if ((v155 & 0x10) != 0)
              goto LABEL_94;
LABEL_103:
            v149[v156++] = 4;
            if ((v155 & 0x20) == 0)
              goto LABEL_104;
LABEL_95:
            if ((v155 & 0x40) != 0)
              goto LABEL_96;
LABEL_105:
            v149[v156++] = 6;
            if ((v155 & 0x80) == 0)
              goto LABEL_106;
LABEL_97:
            if (v147 != 1)
              goto LABEL_110;
LABEL_107:
            v159 = &a2[v144 + v206 * (v213 - v144)];
            v160 = v146;
            v161 = v203;
            do
            {
              v162 = *v161++;
              result = (uint64_t)dav1d_msac_decode_symbol_adapt_c(v11, (int16x8_t *)(v140 + 16 * v162), *(unsigned __int8 *)(v12 + v139) - 1);
              v139 = v214;
              *v159 = v149[(int)result];
              --v144;
              v159 += v141;
              v149 += 8;
            }
            while (v144 > v160);
LABEL_62:
            v143 = v213 + 1;
            v142 = v211 + 1;
            ++v212;
            if (v213 + 1 == v208)
              goto LABEL_173;
            continue;
          }
          if ((v155 & 2) != 0)
            goto LABEL_91;
LABEL_100:
          v149[v156++] = 1;
          if ((v155 & 4) == 0)
            goto LABEL_101;
LABEL_92:
          if ((v155 & 8) != 0)
            goto LABEL_93;
LABEL_102:
          v149[v156++] = 3;
          if ((v155 & 0x10) == 0)
            goto LABEL_103;
LABEL_94:
          if ((v155 & 0x20) != 0)
            goto LABEL_95;
LABEL_104:
          v149[v156++] = 5;
          if ((v155 & 0x40) == 0)
            goto LABEL_105;
LABEL_96:
          if ((v155 & 0x80) != 0)
            goto LABEL_97;
LABEL_106:
          v149[v156] = 7;
          if (v147 == 1)
            goto LABEL_107;
LABEL_110:
          v163 = 1 - (v145 - v142);
          v164 = v206 * (v212 - v145) - 2;
          v165 = &a2[v145];
          v166 = v206 * (v213 - v145) - 1;
          v167 = v202;
          v168 = v202;
          while (2)
          {
            v170 = __OFSUB__((_DWORD)v145, 1);
            LODWORD(v145) = v145 - 1;
            if (((int)v145 < 0) ^ v170 | ((_DWORD)v145 == 0))
            {
              v168[9793] = 0;
              v178 = v165[v166];
              v167[9288] = v178;
              v176 = 1 << v178;
              v177 = 1;
              if ((v176 & 1) == 0)
                goto LABEL_126;
            }
            else
            {
              v171 = v165[v164];
              v172 = v165[v166];
              v173 = v165[v166 - 1];
              if (v171 == v173 && v172 == v171 && v172 == v173)
              {
                v168[9793] = 4;
                v167[9288] = v171;
                v177 = 1;
                v176 = 1 << v172;
                if ((v176 & 1) != 0)
                  goto LABEL_127;
                goto LABEL_126;
              }
              if (v172 == v171)
              {
                v168[9793] = 3;
                v167[9288] = v171;
                v167[9289] = v173;
                v176 = (1 << v173) | (1 << v172);
                v177 = 2;
                if ((v176 & 1) != 0)
                  goto LABEL_127;
LABEL_126:
                v179 = &v167[v177++];
                v179[9288] = 0;
                goto LABEL_127;
              }
              if (v172 == v173 || v171 == v173)
              {
                v168[9793] = 2;
                v167[9288] = v173;
                if (v172 == v173)
                  LOBYTE(v172) = v171;
                v167[9289] = v172;
                v176 = (1 << v172) | (1 << v173);
                v177 = 2;
                if ((v176 & 1) == 0)
                  goto LABEL_126;
              }
              else
              {
                v168[9793] = 1;
                if (v172 >= v171)
                  v187 = v171;
                else
                  v187 = v172;
                v167[9288] = v187;
                v188 = 1 << v187;
                if (v172 <= v171)
                  LOBYTE(v172) = v171;
                v167[9289] = v172;
                v167[9290] = v173;
                v176 = v188 | (1 << v172) | (1 << v173);
                v177 = 3;
                if ((v176 & 1) == 0)
                  goto LABEL_126;
              }
            }
LABEL_127:
            if ((v176 & 2) != 0)
            {
              if ((v176 & 4) != 0)
                goto LABEL_129;
LABEL_136:
              v181 = &v167[v177++];
              v181[9288] = 2;
              if ((v176 & 8) == 0)
                goto LABEL_137;
LABEL_130:
              if ((v176 & 0x10) != 0)
                goto LABEL_131;
LABEL_138:
              v183 = &v167[v177++];
              v183[9288] = 4;
              if ((v176 & 0x20) == 0)
                goto LABEL_139;
LABEL_132:
              if ((v176 & 0x40) != 0)
                goto LABEL_133;
LABEL_140:
              v185 = &v167[v177++];
              v185[9288] = 6;
              if ((v176 & 0x80) == 0)
                goto LABEL_141;
            }
            else
            {
              v180 = &v167[v177++];
              v180[9288] = 1;
              if ((v176 & 4) == 0)
                goto LABEL_136;
LABEL_129:
              if ((v176 & 8) != 0)
                goto LABEL_130;
LABEL_137:
              v182 = &v167[v177++];
              v182[9288] = 3;
              if ((v176 & 0x10) == 0)
                goto LABEL_138;
LABEL_131:
              if ((v176 & 0x20) != 0)
                goto LABEL_132;
LABEL_139:
              v184 = &v167[v177++];
              v184[9288] = 5;
              if ((v176 & 0x40) == 0)
                goto LABEL_140;
LABEL_133:
              if ((v176 & 0x80) == 0)
LABEL_141:
                v167[v177 + 9288] = 7;
            }
            v167 += 8;
            v165 += v141;
            ++v168;
            if (__CFADD__(v163++, 1))
              goto LABEL_107;
            continue;
          }
        }
        v204[512] = 4;
        *v204 = v151;
        v155 = 1 << v150;
      }
      break;
    }
    v156 = 1;
    goto LABEL_89;
  }
LABEL_173:
  if (a6 >= 1 && a7 > a5)
  {
    if (v210 <= 1)
      v194 = 1;
    else
      v194 = v210;
    v195 = &a2[v201];
    do
    {
      result = (uint64_t)memset(v195, *(v195 - 1), 4 * (a7 - a5));
      v195 += v206;
      --v194;
    }
    while (v194);
  }
  if (a6 < a8)
  {
    v196 = v210;
    v197 = &a2[v210 * v206];
    do
    {
      result = (uint64_t)memcpy(v197, &a2[v206 * (v210 - 1)], v206);
      ++v196;
      v197 += v206;
    }
    while (v196 < (4 * a8));
  }
  return result;
}

uint64_t read_mv_residual(uint64_t a1, _WORD *a2, int16x8_t *a3, int a4)
{
  uint64_t result;

  result = (uint64_t)dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(*(_QWORD *)(a1 + 16) + 13824), (int16x8_t *)(*(_QWORD *)(a1 + 16) + 13504), 3uLL);
  switch((_DWORD)result)
  {
    case 1:
      goto LABEL_5;
    case 2:
      result = read_mv_component_diff(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 500), *(_QWORD *)(a1 + 16), a3, a4);
      *a2 += result;
      return result;
    case 3:
      *a2 += read_mv_component_diff(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 500), *(_QWORD *)(a1 + 16), a3, a4);
LABEL_5:
      result = read_mv_component_diff(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 500), *(_QWORD *)(a1 + 16), a3 + 8, a4);
      a2[1] += result;
      break;
  }
  return result;
}

uint64_t read_vartx_tree(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char *v17;
  __int16 v18;
  char v19;
  char v20;
  unsigned int i;
  unsigned __int8 *v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;

  v6 = result;
  v7 = *(_QWORD *)(result + 8);
  v8 = a3;
  v9 = 4 * a3;
  v10 = &dav1d_block_dimensions[v9];
  v11 = dav1d_block_dimensions[v9];
  v12 = dav1d_block_dimensions[v9 + 1];
  v42 = 0;
  v13 = dav1d_max_txfm_size_for_bs[v9];
  *(_BYTE *)(a2 + 26) = v13;
  v14 = *(_QWORD *)(v7 + 24);
  if (*(_BYTE *)(a2 + 6))
  {
    if (*(_DWORD *)(v14 + 1392) == 2)
    {
      switch(v12)
      {
        case 1u:
          *(_BYTE *)(result + a5 + 480) = v10[3];
          break;
        case 2u:
          *(_WORD *)(result + a5 + 480) = v10[3] | (v10[3] << 8);
          break;
        case 4u:
          *(_DWORD *)(result + a5 + 480) = 16843009 * v10[3];
          break;
        case 8u:
          *(_QWORD *)(result + a5 + 480) = 0x101010101010101 * v10[3];
          break;
        case 0x10u:
          v29 = 0x101010101010101 * v10[3];
          v30 = result + 480;
          *(_QWORD *)(result + 480 + a5) = v29;
          v31 = a5 + 8;
          goto LABEL_33;
        case 0x20u:
          v29 = 0x101010101010101 * v10[3];
          v30 = result + 480;
          *(_QWORD *)(result + 480 + a5) = v29;
          *(_QWORD *)(result + 480 + a5 + 8) = v29;
          *(_QWORD *)(result + 480 + a5 + 16) = v29;
          v31 = a5 + 24;
LABEL_33:
          *(_QWORD *)(v30 + v31) = v29;
          break;
        default:
          break;
      }
      switch(v11)
      {
        case 1u:
          *(_BYTE *)(*(_QWORD *)(result + 656) + a4 + 448) = v10[2];
          goto LABEL_43;
        case 2u:
          *(_WORD *)(*(_QWORD *)(result + 656) + a4 + 448) = v10[2] | (v10[2] << 8);
          goto LABEL_43;
        case 4u:
          *(_DWORD *)(*(_QWORD *)(result + 656) + a4 + 448) = 16843009 * v10[2];
          goto LABEL_43;
        case 8u:
          v32 = 0x101010101010101 * v10[2];
          v33 = *(_QWORD *)(result + 656) + a4;
          goto LABEL_42;
        case 0x10u:
          v32 = 0x101010101010101 * v10[2];
          *(_QWORD *)(*(_QWORD *)(result + 656) + a4 + 448) = v32;
          v34 = *(_QWORD *)(result + 656);
          v35 = a4 + 8;
          goto LABEL_41;
        case 0x20u:
          v32 = 0x101010101010101 * v10[2];
          *(_QWORD *)(*(_QWORD *)(result + 656) + a4 + 448) = v32;
          *(_QWORD *)(*(_QWORD *)(result + 656) + a4 + 8 + 448) = v32;
          *(_QWORD *)(*(_QWORD *)(result + 656) + a4 + 16 + 448) = v32;
          v34 = *(_QWORD *)(result + 656);
          v35 = a4 + 24;
LABEL_41:
          v33 = v34 + v35;
LABEL_42:
          *(_QWORD *)(v33 + 448) = v32;
          break;
        default:
          goto LABEL_43;
      }
    }
    goto LABEL_43;
  }
  if (*(_DWORD *)(v14 + 4 * *(unsigned __int8 *)(a2 + 4) + 1144))
    v15 = 1;
  else
    v15 = (_DWORD)v13 == 0;
  if (!v15)
  {
    if (*(_DWORD *)(v14 + 1392) != 2)
    {
LABEL_43:
      v18 = 0;
      v19 = 0;
LABEL_44:
      *(_BYTE *)(a2 + 7) = dav1d_max_txfm_size_for_bs[4 * v8 + *(unsigned int *)(v7 + 2056)];
      goto LABEL_45;
    }
    if (v11 < 0x11 || v12 < 0x11)
    {
      if (v12)
      {
        v17 = (char *)&dav1d_txfm_dimensions + 8 * v13 + 1;
        if (v11)
        {
          v40 = a3;
          v41 = v7;
          goto LABEL_23;
        }
        for (i = 0; i < v12; i += *v17)
          ;
        v18 = 0;
        v19 = 0;
        v28 = *(_DWORD *)(result + 28) + i;
      }
      else
      {
        v18 = 0;
        v19 = 0;
        i = 0;
        v28 = *(_DWORD *)(result + 28);
      }
LABEL_64:
      *(_DWORD *)(v6 + 28) = v28 - i;
      goto LABEL_44;
    }
    v40 = a3;
    v41 = v7;
    v17 = &byte_196898581;
    v13 = 4;
LABEL_23:
    v20 = 0;
    i = 0;
    v22 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v13;
    do
    {
      v23 = 0;
      v24 = 0;
      do
      {
        result = read_tx_tree(v6, *(unsigned __int8 *)(a2 + 26), 0, (uint64_t)&v42, v23, v20);
        v25 = *v22;
        v26 = *(_DWORD *)(v6 + 24) + v25;
        *(_DWORD *)(v6 + 24) = v26;
        v24 += v25;
        ++v23;
      }
      while (v24 < v11);
      v27 = *v17;
      v28 = *(_DWORD *)(v6 + 28) + v27;
      *(_DWORD *)(v6 + 24) = v26 - v24;
      *(_DWORD *)(v6 + 28) = v28;
      i += v27;
      ++v20;
    }
    while (i < v12);
    v19 = v42;
    v18 = HIWORD(v42);
    v8 = v40;
    v7 = v41;
    goto LABEL_64;
  }
  *(_BYTE *)(a2 + 7) = 0;
  *(_BYTE *)(a2 + 26) = 0;
  if (*(_DWORD *)(*(_QWORD *)(v7 + 24) + 1392) == 2)
  {
    switch(v12)
    {
      case 1u:
        *(_BYTE *)(result + a5 + 480) = 0;
        break;
      case 2u:
        *(_WORD *)(result + a5 + 480) = 0;
        break;
      case 4u:
        *(_DWORD *)(result + a5 + 480) = 0;
        break;
      case 8u:
        *(_QWORD *)(result + a5 + 480) = 0;
        break;
      case 0x10u:
        v36 = result + 480;
        *(_QWORD *)(result + 480 + a5) = 0;
        v37 = a5 + 8;
        goto LABEL_52;
      case 0x20u:
        v36 = result + 480;
        *(_QWORD *)(result + 480 + a5) = 0;
        *(_QWORD *)(result + 480 + a5 + 8) = 0;
        *(_QWORD *)(result + 480 + a5 + 16) = 0;
        v37 = a5 + 24;
LABEL_52:
        *(_QWORD *)(v36 + v37) = 0;
        break;
      default:
        break;
    }
    v18 = 0;
    v19 = 0;
    switch(v11)
    {
      case 1u:
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(*(_QWORD *)(result + 656) + a4 + 448) = 0;
        break;
      case 2u:
        v18 = 0;
        v19 = 0;
        *(_WORD *)(*(_QWORD *)(result + 656) + a4 + 448) = 0;
        break;
      case 3u:
      case 5u:
      case 6u:
      case 7u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
        break;
      case 4u:
        v18 = 0;
        v19 = 0;
        *(_DWORD *)(*(_QWORD *)(result + 656) + a4 + 448) = 0;
        break;
      case 8u:
        v18 = 0;
        v19 = 0;
        *(_QWORD *)(*(_QWORD *)(result + 656) + a4 + 448) = 0;
        break;
      case 0x10u:
        v18 = 0;
        v19 = 0;
        *(_QWORD *)(*(_QWORD *)(result + 656) + a4 + 448) = 0;
        v38 = *(_QWORD *)(result + 656);
        v39 = a4 + 8;
        goto LABEL_60;
      case 0x20u:
        v18 = 0;
        v19 = 0;
        *(_QWORD *)(*(_QWORD *)(result + 656) + a4 + 448) = 0;
        *(_QWORD *)(*(_QWORD *)(result + 656) + a4 + 8 + 448) = 0;
        *(_QWORD *)(*(_QWORD *)(result + 656) + a4 + 16 + 448) = 0;
        v38 = *(_QWORD *)(result + 656);
        v39 = a4 + 24;
LABEL_60:
        *(_QWORD *)(v38 + v39 + 448) = 0;
        break;
      default:
        v19 = 0;
        break;
    }
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
LABEL_45:
  *(_BYTE *)(a2 + 29) = v19;
  *(_WORD *)(a2 + 30) = v18;
  return result;
}

uint64_t get_comp_ctx(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  uint64_t v7;

  if (!a5)
  {
    if (!a6)
      return 1;
    v7 = a2 + a3;
    if (*(_BYTE *)(v7 + 256))
      return 3;
    return *(char *)(v7 + 288) > 3;
  }
  if (!a6)
  {
    if (*(_BYTE *)(a1 + a4 + 256))
      return 3;
    v7 = a1 + a4;
    return *(char *)(v7 + 288) > 3;
  }
  if (*(_BYTE *)(a1 + a4 + 256))
  {
    if (*(_BYTE *)(a2 + a3 + 256))
    {
      return 4;
    }
    else if (*(unsigned __int8 *)(a2 + a3 + 288) <= 3u)
    {
      return 2;
    }
    else
    {
      return 3;
    }
  }
  else if (*(_BYTE *)(a2 + a3 + 256))
  {
    if (*(unsigned __int8 *)(a1 + a4 + 288) <= 3u)
      return 2;
    else
      return 3;
  }
  else
  {
    return (*(char *)(a2 + a3 + 288) > 3) ^ (*(char *)(a1 + a4 + 288) > 3);
  }
}

uint64_t fix_mv_precision(uint64_t result, unsigned __int16 *a2)
{
  int v2;

  if (*(_DWORD *)(result + 296))
  {
    a2[1] = (a2[1] + (a2[1] >> 15) + 3) & 0xFFF8;
    v2 = (*a2 + (*a2 >> 15) + 3) & 0x3FFF8;
LABEL_3:
    *a2 = v2;
    return result;
  }
  if (!*(_DWORD *)(result + 500))
  {
    a2[1] = (a2[1] + (a2[1] >> 15)) & 0xFFFE;
    v2 = (*a2 + (*a2 >> 15)) & 0x1FFFE;
    goto LABEL_3;
  }
  return result;
}

uint64_t av1_get_fwd_ref_ctx(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v16 = 0;
  if (a5)
  {
    v6 = a1 + a4;
    if (!*(_BYTE *)(v6 + 224))
    {
      v9 = *(char *)(v6 + 288);
      if (v9 <= 3)
        ++*((_DWORD *)&v15 + v9);
      v10 = a1 + a4;
      if (*(_BYTE *)(v10 + 256))
      {
        v11 = *(char *)(v10 + 320);
        if (v11 <= 3)
          ++*((_DWORD *)&v15 + v11);
      }
    }
  }
  if (a6)
  {
    v7 = a2 + a3;
    if (!*(_BYTE *)(v7 + 224))
    {
      v12 = *(char *)(v7 + 288);
      if (v12 <= 3)
        ++*((_DWORD *)&v15 + v12);
      v13 = a2 + a3;
      if (*(_BYTE *)(v13 + 256))
      {
        v14 = *(char *)(v13 + 320);
        if (v14 <= 3)
          ++*((_DWORD *)&v15 + v14);
      }
    }
  }
  if ((_DWORD)v15 + HIDWORD(v15) == (_DWORD)v16 + HIDWORD(v16))
    return 1;
  else
    return 2 * ((int)v15 + HIDWORD(v15) >= (int)v16 + HIDWORD(v16));
}

uint64_t av1_get_fwd_ref_2_ctx(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v15[0] = 0;
  if (a5)
  {
    v6 = a1 + a4;
    if (!*(_BYTE *)(v6 + 224))
    {
      v9 = *(char *)(v6 + 288);
      if ((v9 ^ 2u) <= 1)
        ++*((_DWORD *)&v15[-1] + v9);
      v10 = a1 + a4;
      if (*(_BYTE *)(v10 + 256))
      {
        v11 = *(char *)(v10 + 320);
        if ((v11 ^ 2u) <= 1)
          ++*((_DWORD *)&v15[-1] + v11);
      }
    }
  }
  if (a6)
  {
    v7 = a2 + a3;
    if (!*(_BYTE *)(v7 + 224))
    {
      v12 = *(char *)(v7 + 288);
      if ((v12 ^ 2u) <= 1)
        ++*((_DWORD *)&v15[-1] + v12);
      v13 = a2 + a3;
      if (*(_BYTE *)(v13 + 256))
      {
        v14 = *(char *)(v13 + 320);
        if ((v14 ^ 2u) <= 1)
          ++*((_DWORD *)&v15[-1] + v14);
      }
    }
  }
  if (LODWORD(v15[0]) == HIDWORD(v15[0]))
    return 1;
  else
    return 2 * (SLODWORD(v15[0]) >= SHIDWORD(v15[0]));
}

uint64_t av1_get_fwd_ref_1_ctx(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v15[0] = 0;
  if (a5)
  {
    v6 = a1 + a4;
    if (!*(_BYTE *)(v6 + 224))
    {
      v9 = *(char *)(v6 + 288);
      if (v9 <= 1)
        ++*((_DWORD *)v15 + v9);
      v10 = a1 + a4;
      if (*(_BYTE *)(v10 + 256))
      {
        v11 = *(char *)(v10 + 320);
        if (v11 <= 1)
          ++*((_DWORD *)v15 + v11);
      }
    }
  }
  if (a6)
  {
    v7 = a2 + a3;
    if (!*(_BYTE *)(v7 + 224))
    {
      v12 = *(char *)(v7 + 288);
      if (v12 <= 1)
        ++*((_DWORD *)v15 + v12);
      v13 = a2 + a3;
      if (*(_BYTE *)(v13 + 256))
      {
        v14 = *(char *)(v13 + 320);
        if (v14 <= 1)
          ++*((_DWORD *)v15 + v14);
      }
    }
  }
  if (LODWORD(v15[0]) == HIDWORD(v15[0]))
    return 1;
  else
    return 2 * (SLODWORD(v15[0]) >= SHIDWORD(v15[0]));
}

uint64_t av1_get_bwd_ref_ctx(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v15 = 0;
  if (a5)
  {
    v6 = a1 + a4;
    if (!*(_BYTE *)(v6 + 224))
    {
      v9 = *(char *)(v6 + 288);
      if (v9 >= 4)
        ++*((_DWORD *)&v15 + v9 - 4);
      v10 = a1 + a4;
      if (*(_BYTE *)(v10 + 256))
      {
        v11 = *(char *)(v10 + 320);
        if (v11 >= 4)
          ++*((_DWORD *)&v15 + v11 - 4);
      }
    }
  }
  if (a6)
  {
    v7 = a2 + a3;
    if (!*(_BYTE *)(v7 + 224))
    {
      v12 = *(char *)(v7 + 288);
      if (v12 >= 4)
        ++*((_DWORD *)&v15 + v12 - 4);
      v13 = a2 + a3;
      if (*(_BYTE *)(v13 + 256))
      {
        v14 = *(char *)(v13 + 320);
        if (v14 >= 4)
          ++*((_DWORD *)&v15 + v14 - 4);
      }
    }
  }
  if (v16 == HIDWORD(v15) + (_DWORD)v15)
    return 1;
  else
    return 2 * (HIDWORD(v15) + (int)v15 >= v16);
}

uint64_t av1_get_bwd_ref_1_ctx(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v15 = 0;
  if (a5)
  {
    v6 = a1 + a4;
    if (!*(_BYTE *)(v6 + 224))
    {
      v9 = *(char *)(v6 + 288);
      if (v9 >= 4)
        ++*((_DWORD *)&v15 + v9 - 4);
      v10 = a1 + a4;
      if (*(_BYTE *)(v10 + 256))
      {
        v11 = *(char *)(v10 + 320);
        if (v11 >= 4)
          ++*((_DWORD *)&v15 + v11 - 4);
      }
    }
  }
  if (a6)
  {
    v7 = a2 + a3;
    if (!*(_BYTE *)(v7 + 224))
    {
      v12 = *(char *)(v7 + 288);
      if (v12 >= 4)
        ++*((_DWORD *)&v15 + v12 - 4);
      v13 = a2 + a3;
      if (*(_BYTE *)(v13 + 256))
      {
        v14 = *(char *)(v13 + 320);
        if (v14 >= 4)
          ++*((_DWORD *)&v15 + v14 - 4);
      }
    }
  }
  if ((_DWORD)v15 == HIDWORD(v15))
    return 1;
  else
    return 2 * ((int)v15 >= SHIDWORD(v15));
}

uint64_t av1_get_ref_ctx(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  _BYTE *v6;
  _BOOL8 v7;
  _BOOL8 v8;
  _BYTE *v9;
  _BOOL8 v10;
  _BOOL8 v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v13[0] = 0;
  if (a5)
  {
    v6 = (_BYTE *)(a1 + a4);
    if (!v6[224])
    {
      v7 = (char)v6[288] > 3;
      ++*(_DWORD *)((unint64_t)v13 | (4 * v7));
      if (v6[256])
      {
        v8 = *(char *)(a1 + a4 + 320) > 3;
        ++*(_DWORD *)((unint64_t)v13 | (4 * v8));
      }
    }
  }
  if (a6)
  {
    v9 = (_BYTE *)(a2 + a3);
    if (!v9[224])
    {
      v10 = (char)v9[288] > 3;
      ++*(_DWORD *)((unint64_t)v13 | (4 * v10));
      if (v9[256])
      {
        v11 = *(char *)(a2 + a3 + 320) > 3;
        ++*(_DWORD *)((unint64_t)v13 | (4 * v11));
      }
    }
  }
  if (LODWORD(v13[0]) == HIDWORD(v13[0]))
    return 1;
  else
    return 2 * (SLODWORD(v13[0]) >= SHIDWORD(v13[0]));
}

uint64_t av1_get_uni_p1_ctx(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v15 = 0;
  if (a5)
  {
    v6 = a1 + a4;
    if (!*(_BYTE *)(v6 + 224))
    {
      v9 = *(char *)(v6 + 288) - 1;
      if (v9 <= 2)
        ++*((_DWORD *)&v15 + v9);
      v10 = a1 + a4;
      if (*(_BYTE *)(v10 + 256))
      {
        v11 = *(char *)(v10 + 320) - 1;
        if (v11 <= 2)
          ++*((_DWORD *)&v15 + v11);
      }
    }
  }
  if (a6)
  {
    v7 = a2 + a3;
    if (!*(_BYTE *)(v7 + 224))
    {
      v12 = *(char *)(v7 + 288) - 1;
      if (v12 <= 2)
        ++*((_DWORD *)&v15 + v12);
      v13 = a2 + a3;
      if (*(_BYTE *)(v13 + 256))
      {
        v14 = *(char *)(v13 + 320) - 1;
        if (v14 <= 2)
          ++*((_DWORD *)&v15 + v14);
      }
    }
  }
  if ((_DWORD)v15 == HIDWORD(v15) + v16)
    return 1;
  else
    return 2 * ((int)v15 >= HIDWORD(v15) + v16);
}

uint64_t get_gmv_2d(int *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  int v6;
  int v7;
  int32x2_t v8;
  int v9;
  int8x8_t v10;
  int32x2_t v12;
  int32x2_t v13;
  int v14;
  int v15;
  unsigned int v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  int32x2_t v22;
  int8x8_t v23;

  v6 = *a1;
  if (!*a1)
  {
    v10.i16[0] = 0;
    v10.i16[2] = 0;
    return v10.u16[2] | (v10.u16[0] << 16);
  }
  if (v6 != 1)
  {
    if (v6 == 2)
    {
      v7 = a1[6];
      v8 = *(int32x2_t *)(a1 + 4);
      v9 = v7;
    }
    else
    {
      v9 = a1[3];
      v7 = a1[6];
      v8 = *(int32x2_t *)(a1 + 4);
    }
    v12 = vshl_n_s32((int32x2_t)__PAIR64__(a2, a3), 2uLL);
    v13 = vadd_s32((int32x2_t)__PAIR64__(a4, a5), (int32x2_t)__PAIR64__(a4, a5));
    v14 = v9 - 0x10000;
    v15 = v7 - 0x10000;
    if (*(_DWORD *)(a6 + 500))
      v16 = 13;
    else
      v16 = 14;
    v17 = vadd_s32(vadd_s32(v12, v13), (int32x2_t)-1);
    v18.i32[0] = a1[1];
    v18.i32[1] = v15 * v17.i32[0];
    v19 = vmla_s32(v18, v8, v17);
    v20.i32[0] = v14 * v17.i32[1];
    v20.i32[1] = a1[2];
    v21 = vadd_s32(v19, v20);
    v22 = (int32x2_t)vshl_u32(vshl_u32((uint32x2_t)vadd_s32(vdup_n_s32((1 << v16) >> 1), vabs_s32(v21)), (uint32x2_t)vneg_s32(vdup_n_s32(v16))), (uint32x2_t)vdup_n_s32(*(_DWORD *)(a6 + 500) == 0));
    v10 = vbsl_s8((int8x8_t)vcltz_s32(v21), (int8x8_t)vneg_s32(v22), (int8x8_t)v22);
    if (*(_DWORD *)(a6 + 296))
      goto LABEL_14;
    return v10.u16[2] | (v10.u16[0] << 16);
  }
  v10 = (int8x8_t)vrev64_s32((int32x2_t)vshr_n_u32(*(uint32x2_t *)(a1 + 1), 0xDuLL));
  if (!*(_DWORD *)(a6 + 296))
    return v10.u16[2] | (v10.u16[0] << 16);
LABEL_14:
  v23 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vsra_n_u32((uint32x2_t)v10, (uint32x2_t)vand_s8(v10, (int8x8_t)0xFFFF0000FFFFLL), 0xFuLL), (int32x2_t)0x300000003), (int8x8_t)vdup_n_s32(0xFFF8u));
  return v23.u16[2] | (v23.u16[0] << 16);
}

uint64_t get_jnt_comp_ctx(int a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;

  v8 = 1 << (a1 - 1);
  v9 = ((a3 - a2) & (v8 - 1)) - ((a3 - a2) & v8);
  v10 = ((a2 - a4) & (v8 - 1)) - ((a2 - a4) & v8);
  if (!a1)
  {
    v9 = 0;
    v10 = 0;
  }
  v11 = a5 + a8;
  if (*(unsigned __int8 *)(v11 + 256) <= 1u)
  {
    v12 = *(unsigned __int8 *)(v11 + 288) == 6;
    v13 = a6 + a7;
    if (*(unsigned __int8 *)(v13 + 256) <= 1u)
      goto LABEL_5;
  }
  else
  {
    v12 = 1;
    v13 = a6 + a7;
    if (*(unsigned __int8 *)(v13 + 256) <= 1u)
    {
LABEL_5:
      v14 = *(unsigned __int8 *)(v13 + 288) == 6;
      goto LABEL_8;
    }
  }
  v14 = 1;
LABEL_8:
  if (v9 < 0)
    v9 = -v9;
  if (v10 < 0)
    v10 = -v10;
  if (v9 == v10)
    v15 = 3;
  else
    v15 = 0;
  return (v12 + v14 + v15);
}

uint64_t find_matching_ref(uint64_t result, unsigned __int8 a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, _QWORD *a10)
{
  int v10;
  uint64_t *v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;

  v10 = *(_DWORD *)(result + 28);
  v11 = (uint64_t *)(result + 8 * (v10 & 0x1F) + 712);
  if (a7)
    v12 = a8 == 0;
  else
    v12 = 1;
  v13 = !v12;
  if (a3 <= a4)
    v14 = a4;
  else
    v14 = a3;
  if (v14 <= 31 && a8)
  {
    v15 = *(_DWORD *)(result + 24);
    v16 = a2 & (v15 + a3 < *(_DWORD *)(*(_QWORD *)(result + 16) + 13868));
LABEL_15:
    v17 = *(_QWORD *)(result + 8 * (v10 & 0x1F) + 704);
    v18 = v15;
    v19 = v17 + 12 * v15;
    if (a9 + 1 == *(char *)(v19 + 8) && *(unsigned __int8 *)(v19 + 9) == 255)
    {
      *a10 |= 1uLL;
      v20 = 1;
    }
    else
    {
      v20 = 0;
    }
    v21 = dav1d_block_dimensions[4 * *(unsigned __int8 *)(v17 + 12 * v18 + 10)];
    if (v21 >= a3)
    {
      if (((v21 - 1) & v18) != 0)
        v13 = 0;
      if (v21 - ((v21 - 1) & v18) > a3)
        v16 = 0;
    }
    else if (v21 < a5)
    {
      v22 = 1 << v21;
      v23 = v21;
      do
      {
        v24 = v19 + 12 * v23;
        if (a9 + 1 == *(char *)(v24 + 8) && *(unsigned __int8 *)(v24 + 9) == 255)
        {
          *a10 |= v22;
          if (v20 > 6)
            return result;
          ++v20;
        }
        v23 = dav1d_block_dimensions[4 * *(unsigned __int8 *)(v19 + 12 * v23 + 10)];
        v22 <<= v23;
        v21 += v23;
        v19 = v24;
      }
      while (v21 < a5);
    }
    if (!a7)
      goto LABEL_47;
    goto LABEL_31;
  }
  if (a8)
  {
    v16 = 0;
    v15 = *(_DWORD *)(result + 24);
    goto LABEL_15;
  }
  v20 = 0;
  v16 = 0;
  if (!a7)
    goto LABEL_47;
LABEL_31:
  v25 = *v11;
  v26 = *(int *)(result + 24) - 1;
  v27 = *v11 + 12 * v26;
  v29 = *(char *)(v27 + 8);
  v28 = v27 + 8;
  if (a9 + 1 == v29 && *(unsigned __int8 *)(v28 + 1) == 255)
  {
    a10[1] |= 1uLL;
    if (v20 > 6)
      return result;
    ++v20;
  }
  v30 = dav1d_block_dimensions[4 * *(unsigned __int8 *)(v25 + 12 * v26 + 10) + 1];
  if (v30 >= a4)
  {
    if (((v30 - 1) & v10) != 0)
      goto LABEL_50;
  }
  else if (v30 < a6)
  {
    v31 = 1 << v30;
    v32 = v30;
    v33 = v11;
    do
    {
      v33 += v32;
      v34 = *v33;
      v35 = *v33 + 12 * v26;
      v37 = *(char *)(v35 + 8);
      v36 = v35 + 8;
      if (a9 + 1 == v37 && *(unsigned __int8 *)(v36 + 1) == 255)
      {
        a10[1] |= v31;
        if (v20 > 6)
          return result;
        ++v20;
      }
      v32 = dav1d_block_dimensions[4 * *(unsigned __int8 *)(v34 + 12 * v26 + 10) + 1];
      v31 <<= v32;
      v30 += v32;
    }
    while (v30 < a6);
  }
LABEL_47:
  if (v13)
  {
    v38 = *(v11 - 1);
    v39 = *(_DWORD *)(result + 24);
    v40 = v38 + 12 * (v39 - 1);
    v42 = *(char *)(v40 + 8);
    v41 = v40 + 8;
    v43 = a9 + 1;
    if (a9 + 1 == v42 && *(unsigned __int8 *)(v41 + 1) == 255)
    {
      a10[1] |= 0x100000000uLL;
      if (v20 > 6 || !v16)
        return result;
      goto LABEL_52;
    }
  }
LABEL_50:
  if (!v16)
    return result;
  v38 = *(v11 - 1);
  v39 = *(_DWORD *)(result + 24);
  v43 = a9 + 1;
LABEL_52:
  v44 = v38 + 12 * (v39 + a3);
  v46 = *(char *)(v44 + 8);
  v45 = v44 + 8;
  if (v43 == v46 && *(unsigned __int8 *)(v45 + 1) == 255)
    *a10 |= 0x100000000uLL;
  return result;
}

uint64_t derive_warpmv(uint64_t a1, int a2, int a3, unint64_t a4, unint64_t a5, int a6, int32x2_t *a7)
{
  int v10;
  _QWORD *v11;
  unint64_t v12;
  int v13;
  __int16 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  __int16 *v21;
  unsigned __int8 *v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  __int16 *v28;
  unsigned __int8 *v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  __int16 *v34;
  unsigned __int8 *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  __int16 *v41;
  unsigned __int8 *v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  __int16 *v47;
  unsigned __int8 *v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  __int16 *v54;
  unsigned __int8 *v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  __int16 *v61;
  unsigned __int8 *v62;
  int v63;
  unsigned int v64;
  __int16 *v65;
  unsigned __int8 *v66;
  int v67;
  uint64_t v68;
  int v69;
  __int16 *v70;
  unsigned __int8 *v71;
  unsigned int v72;
  int32x2_t *v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  __int16 *v78;
  unsigned __int8 *v79;
  unsigned int v80;
  int32x2_t *v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  __int16 *v86;
  unsigned __int8 *v87;
  unsigned int v88;
  int32x2_t *v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  __int16 *v93;
  unsigned __int8 *v94;
  unsigned int v95;
  int32x2_t *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  __int16 *v100;
  unsigned __int8 *v101;
  unsigned int v102;
  int32x2_t *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  __int16 *v107;
  unsigned __int8 *v108;
  unsigned int v109;
  int32x2_t *v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  __int16 *v114;
  unsigned __int8 *v115;
  unsigned int v116;
  int32x2_t *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  __int16 *v121;
  unsigned __int8 *v122;
  unsigned int v123;
  int32x2_t *v124;
  unsigned int v125;
  unsigned int v126;
  __int16 *v127;
  unsigned __int8 *v128;
  unsigned int v129;
  int v130;
  uint64_t v131;
  unsigned __int8 *v132;
  unsigned int v133;
  int32x2_t *v134;
  __int16 *v135;
  unsigned __int8 *v136;
  int v137;
  int32x2_t *v138;
  int v139;
  unsigned int v140;
  int32x2_t v141;
  int32x2_t v142;
  unsigned __int32 v143;
  uint64_t v144;
  int32x2_t v145;
  int32x2_t v146;
  int32x2_t v147;
  int32x2_t v148;
  int32x2_t v149;
  int32x2_t v150;
  int32x2_t v151;
  int32x2_t v152;
  int v153;
  int v154;
  uint64_t v155;
  unsigned __int32 *v156;
  signed int v157;
  int v158;
  int v159;
  int v160;
  int32x2_t *v161;
  unsigned __int32 *v162;
  unsigned __int32 v163;
  unsigned __int32 v164;
  uint64_t result;
  int v166;
  _BYTE v167[4];
  unsigned __int32 v168;
  unsigned __int32 v169;
  unsigned __int32 v170;
  unsigned __int32 v171;
  unsigned __int32 v172;
  unsigned __int32 v173;
  unsigned __int32 v174;
  unsigned __int32 v175;
  int32x2_t v176;
  int32x2_t v177;
  int32x2_t v178;
  int32x2_t v179;
  int32x2_t v180;
  int32x2_t v181;
  int32x2_t v182;
  int32x2_t v183;
  int32x2_t v184;
  int32x2_t v185;
  int32x2_t v186;
  int32x2_t v187;
  int32x2_t v188;
  int32x2_t v189;
  int32x2_t v190;
  int32x2_t v191;
  uint64_t v192;

  v192 = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)(a1 + 28);
  v11 = (_QWORD *)(a1 + 8 * (v10 & 0x1F) + 712);
  v12 = HIDWORD(a5);
  if ((_DWORD)a4 != 1 || v12)
  {
    if ((_DWORD)a4)
    {
      v18 = *(_QWORD *)(a1 + 8 * (v10 & 0x1F) + 704);
      v19 = *(_DWORD *)(a1 + 24);
      v20 = __clz(__rbit32(a4));
      v21 = (__int16 *)(v18 + 12 * (v20 + v19));
      v22 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v21 + 10)];
      v23 = 32 * v20 + 16 * *v22 - 8;
      LODWORD(v22) = (16 * v22[1]) ^ 0xFFFFFFF8;
      v176 = (int32x2_t)__PAIR64__(v22, v23);
      v177.i32[0] = v23 + v21[1];
      v177.i32[1] = (_DWORD)v22 + *v21;
      v24 = (a4 >> v20) & 0xFFFFFFFE;
      if (v24)
      {
        v25 = __clz(__rbit32(v24));
        v26 = v25 + v20;
        v27 = v24 >> v25;
        v28 = (__int16 *)(v18 + 12 * (v26 + v19));
        v29 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v28 + 10)];
        v30 = 32 * v26 + 16 * *v29 - 8;
        LODWORD(v29) = (16 * v29[1]) ^ 0xFFFFFFF8;
        v178 = (int32x2_t)__PAIR64__(v29, v30);
        v179.i32[0] = v30 + v28[1];
        v179.i32[1] = (_DWORD)v29 + *v28;
        v31 = v27 & 0x7FFFFFFE;
        if ((v27 & 0x7FFFFFFE) != 0)
        {
          v32 = __clz(__rbit32(v31));
          v33 = v32 + v26;
          v34 = (__int16 *)(v18 + 12 * (v33 + v19));
          v35 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v34 + 10)];
          v36 = 32 * v33 + 16 * *v35 - 8;
          LODWORD(v35) = (16 * v35[1]) ^ 0xFFFFFFF8;
          v180 = (int32x2_t)__PAIR64__(v35, v36);
          v181.i32[0] = v36 + v34[1];
          v181.i32[1] = (_DWORD)v35 + *v34;
          v37 = (v31 >> v32) & 0x3FFFFFFE;
          if (v37)
          {
            v38 = __clz(__rbit32(v37));
            v39 = v38 + v33;
            v40 = v37 >> v38;
            v41 = (__int16 *)(v18 + 12 * (v39 + v19));
            v42 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v41 + 10)];
            v43 = 32 * v39 + 16 * *v42 - 8;
            LODWORD(v42) = (16 * v42[1]) ^ 0xFFFFFFF8;
            v182 = (int32x2_t)__PAIR64__(v42, v43);
            v183.i32[0] = v43 + v41[1];
            v183.i32[1] = (_DWORD)v42 + *v41;
            v44 = v40 & 0x1FFFFFFE;
            if ((v40 & 0x1FFFFFFE) != 0)
            {
              v45 = __clz(__rbit32(v44));
              v46 = v45 + v39;
              v47 = (__int16 *)(v18 + 12 * (v46 + v19));
              v48 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v47 + 10)];
              v49 = 32 * v46 + 16 * *v48 - 8;
              LODWORD(v48) = (16 * v48[1]) ^ 0xFFFFFFF8;
              v184 = (int32x2_t)__PAIR64__(v48, v49);
              v185.i32[0] = v49 + v47[1];
              v185.i32[1] = (_DWORD)v48 + *v47;
              v50 = (v44 >> v45) & 0xFFFFFFE;
              if (v50)
              {
                v51 = __clz(__rbit32(v50));
                v52 = v51 + v46;
                v53 = v50 >> v51;
                v54 = (__int16 *)(v18 + 12 * (v52 + v19));
                v55 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v54 + 10)];
                v56 = 32 * v52 + 16 * *v55 - 8;
                LODWORD(v55) = (16 * v55[1]) ^ 0xFFFFFFF8;
                v186 = (int32x2_t)__PAIR64__(v55, v56);
                v187.i32[0] = v56 + v54[1];
                v187.i32[1] = (_DWORD)v55 + *v54;
                v57 = v53 & 0x7FFFFFE;
                if (v57)
                {
                  v58 = __clz(__rbit32(v57));
                  v59 = v58 + v52;
                  v60 = v57 >> v58;
                  v61 = (__int16 *)(v18 + 12 * (v59 + v19));
                  v62 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v61 + 10)];
                  v63 = 32 * v59 + 16 * *v62 - 8;
                  LODWORD(v62) = (16 * v62[1]) ^ 0xFFFFFFF8;
                  v188 = (int32x2_t)__PAIR64__(v62, v63);
                  v189.i32[0] = v63 + v61[1];
                  v189.i32[1] = (_DWORD)v62 + *v61;
                  if ((v60 & 0x3FFFFFE) != 0)
                  {
                    v64 = __clz(__rbit32(v60 & 0x3FFFFFE)) + v59;
                    v65 = (__int16 *)(v18 + 12 * (v64 + v19));
                    v66 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v65 + 10)];
                    v67 = 32 * v64 + 16 * *v66 - 8;
                    LODWORD(v66) = (16 * v66[1]) ^ 0xFFFFFFF8;
                    v190 = (int32x2_t)__PAIR64__(v66, v67);
                    v191.i32[0] = v67 + v65[1];
                    v191.i32[1] = (_DWORD)v66 + *v65;
                    goto LABEL_46;
                  }
                  v17 = 7;
                }
                else
                {
                  v17 = 6;
                }
              }
              else
              {
                v17 = 5;
              }
            }
            else
            {
              v17 = 4;
            }
          }
          else
          {
            v17 = 3;
          }
        }
        else
        {
          v17 = 2;
        }
      }
      else
      {
        v17 = 1;
      }
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    v13 = *(_DWORD *)(a1 + 24);
    v14 = (__int16 *)(*(_QWORD *)(a1 + 8 * (v10 & 0x1F) + 704) + 12 * v13);
    v15 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v14 + 10)];
    v16 = *v15;
    LODWORD(v15) = (16 * v15[1]) ^ 0xFFFFFFF8;
    v176.i32[0] = 16 * v16 - 32 * ((v16 - 1) & v13) - 8;
    v176.i32[1] = (int)v15;
    v177.i32[0] = v176.i32[0] + v14[1];
    v177.i32[1] = (_DWORD)v15 + *v14;
    v17 = 1;
  }
  if (a5 == 1)
  {
    v68 = 12 * *(int *)(a1 + 24) - 12;
    v69 = (dav1d_block_dimensions[4 * *(unsigned __int8 *)(*v11 + v68 + 10) + 1] - 1) & v10;
    v70 = (__int16 *)(v11[-v69] + v68);
    v71 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v70 + 10)];
    v72 = (16 * *v71) ^ 0xFFFFFFF8;
    v73 = &v176 + 2 * v17;
    v74 = 16 * v71[1] - 32 * v69 - 8;
    v73->i32[0] = v72;
    v73->i32[1] = v74;
    v73[1].i32[0] = v72 + v70[1];
    v73[1].i32[1] = v74 + *v70;
    if (v17 == 7)
      goto LABEL_46;
    goto LABEL_43;
  }
  if ((_DWORD)a5)
  {
    v75 = *(int *)(a1 + 24) - 1;
    v76 = v17;
    v77 = __clz(__rbit32(a5));
    v78 = (__int16 *)(v11[v77] + 12 * v75);
    v79 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v78 + 10)];
    v80 = (16 * *v79) ^ 0xFFFFFFF8;
    v81 = &v176 + 2 * v17;
    LODWORD(v79) = 32 * v77 + 16 * v79[1] - 8;
    v81->i32[0] = v80;
    v81->i32[1] = (int)v79;
    v81[1].i32[0] = v80 + v78[1];
    v81[1].i32[1] = (_DWORD)v79 + *v78;
    v82 = v17 + 1;
    if (v17 <= 6)
    {
      v83 = (a5 >> v77) & 0xFFFFFFFE;
      if (v83)
      {
        v84 = __clz(__rbit32(v83));
        v85 = v84 + v77;
        v86 = (__int16 *)(v11[v85] + 12 * v75);
        v87 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v86 + 10)];
        v88 = (16 * *v87) ^ 0xFFFFFFF8;
        v89 = &v176 + 2 * v82;
        LODWORD(v87) = 32 * v85 + 16 * v87[1] - 8;
        v89->i32[0] = v88;
        v89->i32[1] = (int)v87;
        v89[1].i32[0] = v88 + v86[1];
        v89[1].i32[1] = (_DWORD)v87 + *v86;
        v82 = v17 + 2;
        if (v17 <= 5)
        {
          v90 = (v83 >> v84) & 0x7FFFFFFE;
          if (v90)
          {
            v91 = __clz(__rbit32(v90));
            v92 = v91 + v85;
            v93 = (__int16 *)(v11[v92] + 12 * v75);
            v94 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v93 + 10)];
            v95 = (16 * *v94) ^ 0xFFFFFFF8;
            v96 = &v176 + 2 * v82;
            LODWORD(v94) = 32 * v92 + 16 * v94[1] - 8;
            v96->i32[0] = v95;
            v96->i32[1] = (int)v94;
            v96[1].i32[0] = v95 + v93[1];
            v96[1].i32[1] = (_DWORD)v94 + *v93;
            v82 = v17 + 3;
            if (v17 <= 4)
            {
              v97 = (v90 >> v91) & 0x3FFFFFFE;
              if (v97)
              {
                v98 = __clz(__rbit32(v97));
                v99 = v98 + v92;
                v100 = (__int16 *)(v11[v99] + 12 * v75);
                v101 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v100 + 10)];
                v102 = (16 * *v101) ^ 0xFFFFFFF8;
                v103 = &v176 + 2 * v82;
                LODWORD(v101) = 32 * v99 + 16 * v101[1] - 8;
                v103->i32[0] = v102;
                v103->i32[1] = (int)v101;
                v103[1].i32[0] = v102 + v100[1];
                v103[1].i32[1] = (_DWORD)v101 + *v100;
                v82 = v17 + 4;
                if (v17 <= 3)
                {
                  v104 = (v97 >> v98) & 0x1FFFFFFE;
                  if (v104)
                  {
                    v105 = __clz(__rbit32(v104));
                    v106 = v105 + v99;
                    v107 = (__int16 *)(v11[v106] + 12 * v75);
                    v108 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v107 + 10)];
                    v109 = (16 * *v108) ^ 0xFFFFFFF8;
                    v110 = &v176 + 2 * v82;
                    LODWORD(v108) = 32 * v106 + 16 * v108[1] - 8;
                    v110->i32[0] = v109;
                    v110->i32[1] = (int)v108;
                    v110[1].i32[0] = v109 + v107[1];
                    v110[1].i32[1] = (_DWORD)v108 + *v107;
                    v82 = v17 + 5;
                    if (v17 <= 2)
                    {
                      v111 = (v104 >> v105) & 0xFFFFFFE;
                      if (v111)
                      {
                        v112 = __clz(__rbit32(v111));
                        v113 = v112 + v106;
                        v114 = (__int16 *)(v11[v113] + 12 * v75);
                        v115 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v114 + 10)];
                        v116 = (16 * *v115) ^ 0xFFFFFFF8;
                        v117 = &v176 + 2 * v82;
                        LODWORD(v115) = 32 * v113 + 16 * v115[1] - 8;
                        v117->i32[0] = v116;
                        v117->i32[1] = (int)v115;
                        v117[1].i32[0] = v116 + v114[1];
                        v117[1].i32[1] = (_DWORD)v115 + *v114;
                        v82 = v17 + 6;
                        if (v17 <= 1)
                        {
                          v118 = (v111 >> v112) & 0x7FFFFFE;
                          if (v118)
                          {
                            v119 = __clz(__rbit32(v118));
                            v120 = v119 + v113;
                            v121 = (__int16 *)(v11[v120] + 12 * v75);
                            v122 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v121 + 10)];
                            v123 = (16 * *v122) ^ 0xFFFFFFF8;
                            v124 = &v176 + 2 * v82;
                            LODWORD(v122) = 32 * v120 + 16 * v122[1] - 8;
                            v124->i32[0] = v123;
                            v124->i32[1] = (int)v122;
                            v124[1].i32[0] = v123 + v121[1];
                            v124[1].i32[1] = (_DWORD)v122 + *v121;
                            v82 = v17 + 7;
                            if (!v17)
                            {
                              v125 = (v118 >> v119) & 0x3FFFFFE;
                              if (v125)
                              {
                                v126 = __clz(__rbit32(v125)) + v120;
                                v127 = (__int16 *)(v11[v126] + 12 * v75);
                                v128 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v127 + 10)];
                                v129 = (16 * *v128) ^ 0xFFFFFFF8;
                                v82 = (uint64_t)(&v176 + 2 * v82);
                                v130 = 32 * v126 + 16 * v128[1] - 8;
                                *(_DWORD *)v82 = v129;
                                *(_DWORD *)(v82 + 4) = v130;
                                *(_DWORD *)(v82 + 8) = v129 + v127[1];
                                *(_DWORD *)(v82 + 12) = v130 + *v127;
                                LODWORD(v82) = v76 + 8;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v17 = v82;
    if (v82 >= 8)
      goto LABEL_46;
  }
  if (v12)
  {
    v131 = *(_QWORD *)(a1 + 8 * (v10 & 0x1F) + 704) + 12 * *(int *)(a1 + 24);
    v132 = &dav1d_block_dimensions[4 * *(unsigned __int8 *)(v131 - 2)];
    v133 = (16 * *v132) ^ 0xFFFFFFF8;
    v134 = &v176 + 2 * v17;
    LODWORD(v132) = (16 * v132[1]) ^ 0xFFFFFFF8;
    v134->i32[0] = v133;
    v134->i32[1] = (int)v132;
    v134[1].i32[0] = v133 + *(__int16 *)(v131 - 10);
    v134[1].i32[1] = (_DWORD)v132 + *(__int16 *)(v131 - 12);
    if (v17 <= 6)
    {
LABEL_43:
      ++v17;
      goto LABEL_44;
    }
LABEL_46:
    v17 = 8;
    goto LABEL_47;
  }
LABEL_44:
  if (HIDWORD(a4))
  {
    v135 = (__int16 *)(*(_QWORD *)(a1 + 8 * (v10 & 0x1F) + 704) + 12 * (*(_DWORD *)(a1 + 24) + a2));
    v136 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v135 + 10)];
    v137 = 32 * a2 + 16 * *v136 - 8;
    v138 = &v176 + 2 * v17;
    LODWORD(v136) = (16 * v136[1]) ^ 0xFFFFFFF8;
    v138->i32[0] = v137;
    v138->i32[1] = (int)v136;
    v138[1].i32[0] = v137 + v135[1];
    v138[1].i32[1] = (_DWORD)v136 + *v135;
    ++v17;
  }
LABEL_47:
  if (a2 <= a3)
    v139 = a3;
  else
    v139 = a2;
  if (v139 >= 28)
    v139 = 28;
  if (v139 <= 4)
    v139 = 4;
  v140 = 4 * v139;
  v141.i32[0] = a6;
  v141.i32[1] = a6 << 16;
  v142 = vabs_s32(vsub_s32(v177, vsra_n_s32(v176, v141, 0x10uLL)));
  v143 = vadd_s32(vdup_lane_s32(v142, 1), v142).u32[0];
  v144 = v143 <= v140;
  if (v143 > v140)
    v143 = -1;
  v168 = v143;
  if (v17 != 1)
  {
    v145 = vshr_n_s32(v141, 0x10uLL);
    v146 = vabs_s32(vsub_s32(v179, vadd_s32(v145, v178)));
    v169 = vadd_s32(vdup_lane_s32(v146, 1), v146).u32[0];
    if (v169 <= v140)
    {
      v144 = (v144 + 1);
      if (v17 == 2)
        goto LABEL_84;
    }
    else
    {
      v169 = -1;
      if (v17 == 2)
        goto LABEL_84;
    }
    v147 = vabs_s32(vsub_s32(v181, vadd_s32(v145, v180)));
    v170 = vadd_s32(vdup_lane_s32(v147, 1), v147).u32[0];
    if (v170 <= v140)
    {
      v144 = (v144 + 1);
      if (v17 == 3)
        goto LABEL_84;
    }
    else
    {
      v170 = -1;
      if (v17 == 3)
        goto LABEL_84;
    }
    v148 = vabs_s32(vsub_s32(v183, vadd_s32(v145, v182)));
    v171 = vadd_s32(vdup_lane_s32(v148, 1), v148).u32[0];
    if (v171 <= v140)
    {
      v144 = (v144 + 1);
      if (v17 == 4)
        goto LABEL_84;
    }
    else
    {
      v171 = -1;
      if (v17 == 4)
        goto LABEL_84;
    }
    v149 = vabs_s32(vsub_s32(v185, vadd_s32(v145, v184)));
    v172 = vadd_s32(vdup_lane_s32(v149, 1), v149).u32[0];
    if (v172 <= v140)
      v144 = (v144 + 1);
    else
      v172 = -1;
    if (v17 != 5)
    {
      v150 = vabs_s32(vsub_s32(v187, vadd_s32(v145, v186)));
      v173 = vadd_s32(vdup_lane_s32(v150, 1), v150).u32[0];
      if (v173 <= v140)
        v144 = (v144 + 1);
      else
        v173 = -1;
      if (v17 != 6)
      {
        v151 = vabs_s32(vsub_s32(v189, vadd_s32(v145, v188)));
        v174 = vadd_s32(vdup_lane_s32(v151, 1), v151).u32[0];
        if (v174 <= v140)
          v144 = (v144 + 1);
        else
          v174 = -1;
        if (v17 != 7)
        {
          v152 = vabs_s32(vsub_s32(v191, vadd_s32(v145, v190)));
          v175 = vadd_s32(vdup_lane_s32(v152, 1), v152).u32[0];
          if (v175 <= v140)
            v144 = (v144 + 1);
          else
            v175 = -1;
        }
      }
    }
  }
LABEL_84:
  if ((_DWORD)v144)
  {
    v153 = v17 - v144;
    if ((int)(v17 - v144) >= 1)
    {
      v154 = 0;
      LODWORD(v155) = 0;
      do
      {
        v156 = &v172 + 4 * (int)v155;
        v157 = v155 - 1;
        v158 = v155 - v17;
        v155 = (int)v155;
        do
        {
          v159 = *(&v168 + v155);
          v160 = v158;
          ++v155;
          v156 += 4;
          ++v157;
          ++v158;
        }
        while (v159 != -1);
        v161 = &v176 + 2 * (int)v17;
        v162 = (unsigned __int32 *)&v167[4 * v17];
        do
        {
          v164 = *v162--;
          v163 = v164;
          --v17;
          v161 -= 2;
          ++v160;
        }
        while (v164 == -1);
        if (v157 >= (int)(v17 + 1))
          break;
        *(&v168 + v155 - 1) = v163;
        *(_OWORD *)v156 = *(_OWORD *)v161->i8;
        ++v154;
      }
      while (v154 != v153);
    }
  }
  else
  {
    v144 = 1;
  }
  result = dav1d_find_affine_int((uint64_t)&v176, v144, a2, a3, a6, a7, *(_DWORD *)(a1 + 24), v10);
  if ((_DWORD)result || (result = dav1d_get_shear_params((uint64_t)a7), (_DWORD)result))
    v166 = 0;
  else
    v166 = 3;
  a7->i32[0] = v166;
  return result;
}

uint64_t get_filter_ctx(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, unsigned int a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;

  v6 = a1 + a6;
  if (*(char *)(v6 + 288) == a4 || *(char *)(v6 + 320) == a4)
  {
    v7 = *(unsigned __int8 *)(v6 + 384);
    v8 = a2 + a5;
    if (*(char *)(v8 + 288) == a4)
      goto LABEL_7;
  }
  else
  {
    v7 = 3;
    v8 = a2 + a5;
    if (*(char *)(v8 + 288) == a4)
    {
LABEL_7:
      v9 = *(unsigned __int8 *)(v8 + 384);
      goto LABEL_9;
    }
  }
  if (*(char *)(v8 + 320) == a4)
    goto LABEL_7;
  v9 = 3;
LABEL_9:
  v10 = v7 + 4 * a3;
  if (v9 != 3)
    v10 = (4 * a3) | 3;
  if (v7 == 3)
    v10 = v9 + 4 * a3;
  if (v7 == v9)
    return (v7 + 4 * a3);
  else
    return v10;
}

uint64_t affine_lowest_px(uint64_t result, signed int *a2, int a3, unsigned __int8 *a4, int *a5)
{
  int v5;
  char v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  signed int v10;
  signed int v11;
  unsigned int v12;

  if (a3)
  {
    v5 = *(_DWORD *)(*(_QWORD *)(result + 8) + 2056);
    v6 = v5 == 1;
    v7 = v5 != 3;
    if (!*a4)
      return result;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    if (!*a4)
      return result;
  }
  v8 = 0;
  v9 = a5[2] + (4 * *(int *)(result + 28) + (int)(((4u >> v6) * a4[1] - 4) << v6)) * a5[6];
  v10 = *a2;
  do
  {
    if (v10 <= (int)(((unint64_t)((v9 + (4 * *(int *)(result + 24) + (int)((v8 + 4) << v7)) * a5[5]) >> v6) >> 16)
                    + 8))
      v10 = ((unint64_t)((v9 + (4 * *(int *)(result + 24) + (int)((v8 + 4) << v7)) * a5[5]) >> v6) >> 16) + 8;
    *a2 = v10;
    v11 = (4u >> v7) * *a4;
    if (v11 <= 16)
      v12 = 16;
    else
      v12 = (4u >> v7) * *a4;
    v8 = v8 + v12 - 8;
  }
  while (v8 < v11);
  return result;
}

int *mc_lowest_px(int *result, int a2, int a3, int a4, int a5, int *a6)
{
  unsigned int v6;
  char v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  int v11;
  int v12;

  v6 = 4u >> a5;
  v7 = a5 == 0;
  if (*a6)
  {
    v8 = 8 * *a6 - 0x20000 + *a6 * (uint64_t)(int)((a4 << v7) + 16 * a2 * v6);
    v9 = v8 < 0;
    if (v8 < 0)
      v8 = -v8;
    v10 = (unint64_t)(v8 + 128) >> 8;
    if (v9)
      LODWORD(v10) = -(int)v10;
    v11 = ((int)(v10 + a6[1] * (v6 * a3 - 1) + 32) >> 10) + 5;
    if (*result > v11)
      v11 = *result;
    *result = v11;
  }
  else
  {
    v12 = (a4 >> (a5 + 3)) + v6 * (a3 + a2) + 4 * (((a4 << v7) & 0xF) != 0);
    if (*result > v12)
      v12 = *result;
    *result = v12;
  }
  return result;
}

uint64_t obmc_lowest_px(uint64_t result, uint64_t a2, unsigned int a3, unsigned __int8 *a4, int a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  signed int v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int *v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v38;
  signed int v39;
  char v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  int v63;

  v7 = *(_DWORD *)(result + 24);
  v6 = *(_DWORD *)(result + 28);
  v8 = *(_QWORD *)(result + 8);
  v9 = result + 8 * (v6 & 0x1E) + 712;
  if (a3)
  {
    v10 = *(_DWORD *)(v8 + 2056);
    v11 = v10 == 1;
    v12 = 4u >> v11;
    v13 = *(_QWORD *)(result + 16);
    if (v6 <= *(_DWORD *)(v13 + 13872) || (4u >> (v10 != 3)) * *a4 + v12 * a4[1] < 0x10)
      goto LABEL_29;
  }
  else
  {
    v11 = 0;
    v13 = *(_QWORD *)(result + 16);
    v12 = 4;
    if (v6 <= *(_DWORD *)(v13 + 13872))
      goto LABEL_29;
  }
  if (a5 >= 1)
  {
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v21 = a4[2];
      if (v21 >= 4)
        v21 = 4;
      v7 = *(_DWORD *)(result + 24);
      if (v15 >= (int)v21)
        break;
      v22 = *(_QWORD *)(v9 - 8);
      v23 = v14 + v7 + 1;
      v24 = v22 + 12 * v23;
      v25 = *(unsigned __int8 *)(v24 + 10);
      v26 = *(char *)(v24 + 8);
      if (v26 >= 1)
      {
        v27 = 12 * v23;
        v28 = a4[1];
        if (v28 >= 0x10)
          v28 = 16;
        v29 = v28 >> 1;
        v30 = v26 - 1;
        v31 = (int *)(a2 + 8 * v30 + 4 * a3);
        v32 = *(_DWORD *)(result + 28);
        v33 = (3 * v29 + 3) >> 2;
        v34 = *(__int16 *)(v22 + v27);
        v35 = v8 + 16 * v30;
        v36 = *(_DWORD *)(v35 + 3000);
        if (v36)
        {
          v16 = 8 * v36 - 0x20000 + v36 * (uint64_t)(int)((v34 << (v11 ^ 1)) + 16 * v12 * v32);
          v17 = v16 < 0;
          if (v16 < 0)
            v16 = -v16;
          v18 = (unint64_t)(v16 + 128) >> 8;
          if (v17)
            LODWORD(v18) = -(int)v18;
          v19 = ((int)(v18 + *(_DWORD *)(v35 + 3004) * (v33 * v12 - 1) + 32) >> 10) + 5;
          if (*v31 > v19)
            v19 = *v31;
        }
        else
        {
          v19 = (v34 >> (v11 + 3)) + 4 * (((0xFu >> (v11 ^ 1)) & v34) != 0) + (v33 + v32) * v12;
          if (*v31 > v19)
            v19 = *v31;
        }
        *v31 = v19;
        ++v15;
      }
      v20 = dav1d_block_dimensions[4 * v25];
      if (v20 <= 2)
        v20 = 2;
      v14 += v20;
      if (v14 >= a5)
      {
        v7 = *(_DWORD *)(result + 24);
        break;
      }
    }
  }
LABEL_29:
  if (v7 > *(_DWORD *)(v13 + 13864) && a6 >= 1)
  {
    v38 = 0;
    v39 = 0;
    v40 = v11 == 0;
    v41 = v11 + 3;
    while (1)
    {
      v43 = a4[3];
      if (v43 >= 4)
        v43 = 4;
      if (v39 >= (int)v43)
        break;
      v44 = *(_QWORD *)(v9 + 8 * (v38 + 1));
      v45 = *(int *)(result + 24) - 1;
      v46 = v44 + 12 * v45;
      v47 = &dav1d_block_dimensions[4 * *(unsigned __int8 *)(v46 + 10)];
      v48 = *(char *)(v46 + 8);
      if (v48 <= 0)
      {
        v42 = v47[1];
        if (v42 <= 2)
          v42 = 2;
        v38 += v42;
        if (v38 >= a6)
          return result;
      }
      else
      {
        v49 = v48;
        v50 = 12 * v45;
        v51 = v47[1];
        v52 = a4[1];
        if (v51 < v52)
          v52 = v51;
        if (v51 >= 2)
          v53 = v52;
        else
          v53 = 2;
        v54 = v49 - 1;
        v55 = (int *)(a2 + 8 * (v49 - 1) + 4 * a3);
        v56 = *(_DWORD *)(result + 28) + v38;
        v57 = *(__int16 *)(v44 + v50);
        v58 = v8 + 16 * v54;
        v59 = *(_DWORD *)(v58 + 3000);
        if (v59)
        {
          v60 = 8 * v59 - 0x20000 + v59 * (uint64_t)(int)((v57 << v40) + 16 * v12 * v56);
          v61 = v60 < 0;
          if (v60 < 0)
            v60 = -v60;
          v62 = (unint64_t)(v60 + 128) >> 8;
          if (v61)
            LODWORD(v62) = -(int)v62;
          v63 = ((int)(v62 + *(_DWORD *)(v58 + 3004) * (v53 * v12 - 1) + 32) >> 10) + 5;
          if (*v55 > v63)
            v63 = *v55;
        }
        else
        {
          v63 = (v57 >> v41) + (v53 + v56) * v12 + 4 * (((0xFu >> v40) & v57) != 0);
          if (*v55 > v63)
            v63 = *v55;
        }
        *v55 = v63;
        ++v39;
        if (v51 <= 2)
          v51 = 2;
        v38 += v51;
        if (v38 >= a6)
          return result;
      }
    }
  }
  return result;
}

uint64_t read_mv_component_diff(int a1, uint64_t a2, int16x8_t *a3, int a4)
{
  unsigned __int8 **v7;
  _BOOL4 v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned int v14;
  unsigned __int16 *v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;

  v7 = (unsigned __int8 **)(a2 + 13824);
  v8 = dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(a2 + 13824), &a3[6].u16[6]);
  v9 = dav1d_msac_decode_symbol_adapt_c(v7, a3, 0xAuLL);
  if (!v9)
  {
    v16 = dav1d_msac_decode_BOOL_adapt_c(v7, (unsigned __int16 *)&a3[4]);
    v10 = v16;
    if (a4)
    {
      v14 = dav1d_msac_decode_symbol_adapt_c(v7, (int16x8_t *)((char *)a3 + 8 * v16 + 32), 3uLL);
      if (a1)
      {
        v15 = &a3[3].u16[4];
        goto LABEL_11;
      }
      goto LABEL_13;
    }
LABEL_12:
    v17 = 1;
    v14 = 3;
    goto LABEL_14;
  }
  v10 = 1 << v9;
  if (v9 >= 1)
  {
    v11 = 0;
    v12 = v9;
    v13 = &a3[4].u16[2];
    do
    {
      v10 |= dav1d_msac_decode_BOOL_adapt_c(v7, v13) << v11++;
      v13 += 2;
    }
    while (v12 != v11);
  }
  if (!a4)
    goto LABEL_12;
  v14 = dav1d_msac_decode_symbol_adapt_c(v7, a3 + 3, 3uLL);
  if (a1)
  {
    v15 = &a3[3].u16[6];
LABEL_11:
    v17 = dav1d_msac_decode_BOOL_adapt_c(v7, v15);
    goto LABEL_14;
  }
LABEL_13:
  v17 = 1;
LABEL_14:
  v18 = (2 * v14) | (8 * v10) | v17;
  if (v8)
    return ~v18;
  else
    return (v18 + 1);
}

uint64_t read_tx_tree(uint64_t result, unsigned int a2, int a3, uint64_t a4, char a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  __int16 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v42;

  v6 = result;
  v7 = *(_DWORD *)(result + 24) & 0x1FLL;
  v8 = *(_DWORD *)(result + 28) & 0x1FLL;
  v9 = a2;
  v10 = (char *)&dav1d_txfm_dimensions + 8 * a2;
  v11 = v10[2];
  v12 = v10[3];
  v13 = 1;
  if (!a2 || a3 > 1)
    goto LABEL_9;
  v42 = v10[2];
  v17 = *(char *)(result + v8 + 480) < (int)v12;
  v40 = *(_QWORD *)(result + 8);
  if (*(char *)(*(_QWORD *)(result + 656) + v7 + 448) < (int)v11)
    ++v17;
  result = dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(*(_QWORD *)(result + 16) + 13824), (unsigned __int16 *)(*(_QWORD *)(result + 16)+ 12 * (8 - (a3 + 2 * *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a2 + 5)))+ 4 * v17+ 5928));
  v13 = 1;
  if (!(_DWORD)result)
  {
LABEL_8:
    v11 = v42;
LABEL_9:
    switch(*((_BYTE *)&dav1d_txfm_dimensions + 8 * v9 + 1))
    {
      case 1:
        if (v13)
          v18 = v12;
        else
          v18 = 0;
        *(_BYTE *)(v6 + v8 + 480) = v18;
        break;
      case 2:
        v27 = v12 | ((_WORD)v12 << 8);
        if (!v13)
          v27 = 0;
        *(_WORD *)(v6 + v8 + 480) = v27;
        break;
      case 4:
        v28 = 16843009 * v12;
        if (!v13)
          v28 = 0;
        *(_DWORD *)(v6 + v8 + 480) = v28;
        break;
      case 8:
        v29 = 0x101010101010101 * v12;
        if (!v13)
          v29 = 0;
        *(_QWORD *)(v6 + v8 + 480) = v29;
        break;
      case 0x10:
        v30 = 0x101010101010101 * v12;
        if (!v13)
          v30 = 0;
        *(int64x2_t *)(v6 + v8 + 480) = vdupq_n_s64(v30);
        break;
      default:
        break;
    }
    switch(*v10)
    {
      case 1:
        if (v13)
          v31 = v11;
        else
          v31 = 0;
        *(_BYTE *)(*(_QWORD *)(v6 + 656) + v7 + 448) = v31;
        break;
      case 2:
        if (v13)
          v32 = v11 | ((_WORD)v11 << 8);
        else
          v32 = 0;
        *(_WORD *)(*(_QWORD *)(v6 + 656) + v7 + 448) = v32;
        break;
      case 4:
        if (v13)
          v33 = 16843009 * v11;
        else
          v33 = 0;
        *(_DWORD *)(*(_QWORD *)(v6 + 656) + v7 + 448) = v33;
        break;
      case 8:
        if (v13)
          v34 = 0x101010101010101 * v11;
        else
          v34 = 0;
        v35 = *(_QWORD *)(v6 + 656) + v7;
        goto LABEL_49;
      case 16:
        if (v13)
          v34 = 0x101010101010101 * v11;
        else
          v34 = 0;
        *(_QWORD *)(*(_QWORD *)(v6 + 656) + v7 + 448) = v34;
        v35 = *(_QWORD *)(v6 + 656) + (v7 + 8);
LABEL_49:
        *(_QWORD *)(v35 + 448) = v34;
        break;
      default:
        return result;
    }
    return result;
  }
  *(_WORD *)(a4 + 2 * a3) |= 1 << (a5 + 4 * a6);
  if (((0x7FF9CuLL >> v9) & 1) == 0)
  {
    v13 = 0;
    goto LABEL_8;
  }
  v19 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v9 + 6);
  v20 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v19;
  v21 = *v20;
  v22 = v20[1];
  v23 = (a3 + 1);
  result = read_tx_tree(v6, v19, v23);
  v24 = *(_DWORD *)(v6 + 24) + v21;
  *(_DWORD *)(v6 + 24) = v24;
  v25 = v42;
  if (v42 >= v12)
  {
    v26 = v40;
    if (v24 < *(_DWORD *)(v40 + 3280))
    {
      result = read_tx_tree(v6, v19, v23);
      v25 = v42;
      v24 = *(_DWORD *)(v6 + 24);
    }
  }
  else
  {
    v26 = v40;
  }
  v36 = v24 - v21;
  v37 = *(_DWORD *)(v6 + 28) + v22;
  *(_DWORD *)(v6 + 24) = v36;
  *(_DWORD *)(v6 + 28) = v37;
  if (v12 >= v25 && v37 < *(_DWORD *)(v26 + 3284))
  {
    v38 = v25;
    result = read_tx_tree(v6, v19, v23);
    v39 = *(_DWORD *)(v6 + 24) + v21;
    *(_DWORD *)(v6 + 24) = v39;
    if (v38 >= v12 && v39 < *(_DWORD *)(v26 + 3280))
    {
      result = read_tx_tree(v6, v19, v23);
      v39 = *(_DWORD *)(v6 + 24);
    }
    *(_DWORD *)(v6 + 24) = v39 - v21;
    v37 = *(_DWORD *)(v6 + 28);
  }
  *(_DWORD *)(v6 + 28) = v37 - v22;
  return result;
}

unint64_t dav1d_get_bits(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unint64_t v7;

  v2 = *(_DWORD *)(a1 + 16);
  if (v2 < a2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_DWORD *)(a1 + 4);
    v6 = *(unsigned __int8 **)(a1 + 24);
    while (1)
    {
      v3 <<= 8;
      v2 += 8;
      *(_DWORD *)(a1 + 16) = v2;
      if (v5)
      {
        if ((unint64_t)v6 >= v4)
          goto LABEL_8;
      }
      else
      {
        *(_QWORD *)(a1 + 24) = v6 + 1;
        v3 |= *v6++;
        if ((unint64_t)v6 >= v4)
        {
LABEL_8:
          *(_DWORD *)a1 = v5;
          v5 = 1;
          *(_DWORD *)(a1 + 4) = 1;
        }
      }
      if (v2 >= a2)
      {
        v7 = *(_QWORD *)(a1 + 8) | (v3 << -(char)v2);
        goto LABEL_11;
      }
    }
  }
  v7 = *(_QWORD *)(a1 + 8);
LABEL_11:
  *(_DWORD *)(a1 + 16) = v2 - a2;
  *(_QWORD *)(a1 + 8) = v7 << a2;
  return v7 >> -(char)a2;
}

uint64_t dav1d_get_sbits(uint64_t a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  unint64_t v8;

  v2 = a2 + 1;
  v3 = *(_DWORD *)(a1 + 16);
  if (v3 < a2 + 1)
  {
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_DWORD *)(a1 + 4);
    v7 = *(unsigned __int8 **)(a1 + 24);
    while (1)
    {
      v4 <<= 8;
      v3 += 8;
      *(_DWORD *)(a1 + 16) = v3;
      if (v6)
      {
        if ((unint64_t)v7 >= v5)
          goto LABEL_8;
      }
      else
      {
        *(_QWORD *)(a1 + 24) = v7 + 1;
        v4 |= *v7++;
        if ((unint64_t)v7 >= v5)
        {
LABEL_8:
          *(_DWORD *)a1 = v6;
          v6 = 1;
          *(_DWORD *)(a1 + 4) = 1;
        }
      }
      if (v3 >= v2)
      {
        v8 = *(_QWORD *)(a1 + 8) | (v4 << -(char)v3);
        goto LABEL_11;
      }
    }
  }
  v8 = *(_QWORD *)(a1 + 8);
LABEL_11:
  *(_DWORD *)(a1 + 16) = v3 - v2;
  *(_QWORD *)(a1 + 8) = v8 << v2;
  return ((int)((v8 >> ~(_BYTE)a2) << ~(_BYTE)a2) >> ~(_BYTE)a2);
}

unint64_t dav1d_get_uleb128(uint64_t a1)
{
  unsigned int v1;
  unint64_t v2;
  unint64_t v3;
  int v4;
  unsigned __int8 *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unint64_t v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  unsigned __int8 *v39;
  uint64_t v40;

  v1 = *(_DWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  if (v1 <= 7)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(_DWORD *)(a1 + 4);
    v5 = *(unsigned __int8 **)(a1 + 24);
    v6 = v1 + 8;
    *(_DWORD *)(a1 + 16) = v1 + 8;
    if (v4)
    {
      v7 = 0;
      if ((unint64_t)v5 < v3)
        goto LABEL_5;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v5 + 1;
      v7 = *v5;
      if ((unint64_t)(v5 + 1) < v3)
      {
LABEL_5:
        v2 |= v7 << (56 - v1);
        v8 = v1;
        *(_DWORD *)(a1 + 16) = v1;
        v9 = v2 << 8;
        *(_QWORD *)(a1 + 8) = v2 << 8;
        v10 = HIBYTE(v2) & 0x7F;
        if ((v2 & 0x8000000000000000) == 0)
          goto LABEL_28;
        goto LABEL_8;
      }
    }
    *(_DWORD *)a1 = v4;
    *(_DWORD *)(a1 + 4) = 1;
    goto LABEL_5;
  }
  v6 = *(_DWORD *)(a1 + 16);
  v8 = v1 - 8;
  *(_DWORD *)(a1 + 16) = v1 - 8;
  v9 = v2 << 8;
  *(_QWORD *)(a1 + 8) = v2 << 8;
  v10 = HIBYTE(v2) & 0x7F;
  if ((v2 & 0x8000000000000000) == 0)
    goto LABEL_28;
LABEL_8:
  if (v8 <= 7)
  {
    v11 = *(_QWORD *)(a1 + 40);
    v12 = *(_DWORD *)(a1 + 4);
    v13 = *(unsigned __int8 **)(a1 + 24);
    *(_DWORD *)(a1 + 16) = v6;
    if (v12)
    {
      v14 = 0;
      if ((unint64_t)v13 < v11)
      {
LABEL_12:
        v9 |= v14 << -(char)v6;
        goto LABEL_16;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v13 + 1;
      v14 = *v13;
      if ((unint64_t)(v13 + 1) < v11)
        goto LABEL_12;
    }
    *(_DWORD *)a1 = v12;
    *(_DWORD *)(a1 + 4) = 1;
    goto LABEL_12;
  }
  v6 = v8;
LABEL_16:
  *(_DWORD *)(a1 + 16) = v6 - 8;
  v2 = v9 << 8;
  *(_QWORD *)(a1 + 8) = v9 << 8;
  v10 |= (v9 >> 49) & 0x3F80;
  if ((v9 & 0x8000000000000000) == 0)
    goto LABEL_17;
  if (v6 - 8 > 7)
  {
    v6 -= 8;
    goto LABEL_27;
  }
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_DWORD *)(a1 + 4);
  v17 = *(unsigned __int8 **)(a1 + 24);
  *(_DWORD *)(a1 + 16) = v6;
  if (!v16)
  {
    *(_QWORD *)(a1 + 24) = v17 + 1;
    v18 = *v17;
    if ((unint64_t)(v17 + 1) < v15)
      goto LABEL_23;
    goto LABEL_22;
  }
  v18 = 0;
  if ((unint64_t)v17 >= v15)
  {
LABEL_22:
    *(_DWORD *)a1 = v16;
    *(_DWORD *)(a1 + 4) = 1;
  }
LABEL_23:
  v2 |= v18 << -(char)v6;
LABEL_27:
  *(_DWORD *)(a1 + 16) = v6 - 8;
  v9 = v2 << 8;
  *(_QWORD *)(a1 + 8) = v2 << 8;
  v10 |= (v2 >> 42) & 0x1FC000;
  if ((v2 & 0x8000000000000000) == 0)
    goto LABEL_28;
  if (v6 - 8 > 7)
  {
    v6 -= 8;
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 40);
    v21 = *(_DWORD *)(a1 + 4);
    v22 = *(unsigned __int8 **)(a1 + 24);
    *(_DWORD *)(a1 + 16) = v6;
    if (v21)
    {
      v23 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v22 + 1;
      v23 = *v22++;
    }
    if ((unint64_t)v22 >= v20)
    {
      *(_DWORD *)a1 = v21;
      *(_DWORD *)(a1 + 4) = 1;
    }
    v9 |= v23 << -(char)v6;
  }
  *(_DWORD *)(a1 + 16) = v6 - 8;
  v2 = v9 << 8;
  *(_QWORD *)(a1 + 8) = v9 << 8;
  v10 |= (v9 >> 35) & 0xFE00000;
  if ((v9 & 0x8000000000000000) == 0)
    goto LABEL_17;
  if (v6 - 8 > 7)
  {
    v6 -= 8;
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 40);
    v25 = *(_DWORD *)(a1 + 4);
    v26 = *(unsigned __int8 **)(a1 + 24);
    *(_DWORD *)(a1 + 16) = v6;
    if (v25)
    {
      v27 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v26 + 1;
      v27 = *v26++;
    }
    if ((unint64_t)v26 >= v24)
    {
      *(_DWORD *)a1 = v25;
      *(_DWORD *)(a1 + 4) = 1;
    }
    v2 |= v27 << -(char)v6;
  }
  *(_DWORD *)(a1 + 16) = v6 - 8;
  v9 = v2 << 8;
  *(_QWORD *)(a1 + 8) = v2 << 8;
  v10 |= (v2 >> 28) & 0x7F0000000;
  if ((v2 & 0x8000000000000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x8000000000000000) != 0)
      goto LABEL_78;
    goto LABEL_29;
  }
  if (v6 - 8 > 7)
  {
    v6 -= 8;
  }
  else
  {
    v28 = *(_QWORD *)(a1 + 40);
    v29 = *(_DWORD *)(a1 + 4);
    v30 = *(unsigned __int8 **)(a1 + 24);
    *(_DWORD *)(a1 + 16) = v6;
    if (v29)
    {
      v31 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v30 + 1;
      v31 = *v30++;
    }
    if ((unint64_t)v30 >= v28)
    {
      *(_DWORD *)a1 = v29;
      *(_DWORD *)(a1 + 4) = 1;
    }
    v9 |= v31 << -(char)v6;
  }
  *(_DWORD *)(a1 + 16) = v6 - 8;
  v2 = v9 << 8;
  *(_QWORD *)(a1 + 8) = v9 << 8;
  v10 |= (v9 >> 21) & 0x3F800000000;
  if ((v9 & 0x8000000000000000) == 0)
  {
LABEL_17:
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_78;
    goto LABEL_29;
  }
  if (v6 - 8 > 7)
  {
    v6 -= 8;
  }
  else
  {
    v32 = *(_QWORD *)(a1 + 40);
    v33 = *(_DWORD *)(a1 + 4);
    v34 = *(unsigned __int8 **)(a1 + 24);
    *(_DWORD *)(a1 + 16) = v6;
    if (v33)
    {
      v35 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v34 + 1;
      v35 = *v34++;
    }
    if ((unint64_t)v34 >= v32)
    {
      *(_DWORD *)a1 = v33;
      *(_DWORD *)(a1 + 4) = 1;
    }
    v2 |= v35 << -(char)v6;
  }
  *(_DWORD *)(a1 + 16) = v6 - 8;
  v36 = v2 << 8;
  *(_QWORD *)(a1 + 8) = v2 << 8;
  v10 |= (v2 >> 14) & 0x1FC0000000000;
  if ((v2 & 0x8000000000000000) == 0)
    goto LABEL_28;
  if (v6 - 8 > 7)
  {
    v6 -= 8;
  }
  else
  {
    v37 = *(_QWORD *)(a1 + 40);
    v38 = *(_DWORD *)(a1 + 4);
    v39 = *(unsigned __int8 **)(a1 + 24);
    *(_DWORD *)(a1 + 16) = v6;
    if (v38)
    {
      v40 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v39 + 1;
      v40 = *v39++;
    }
    if ((unint64_t)v39 >= v37)
    {
      *(_DWORD *)a1 = v38;
      *(_DWORD *)(a1 + 4) = 1;
    }
    v36 |= v40 << -(char)v6;
  }
  *(_DWORD *)(a1 + 16) = v6 - 8;
  *(_QWORD *)(a1 + 8) = v36 << 8;
  v10 |= ((unint64_t)v36 >> 7) & 0xFE000000000000;
  if (v36 < 0)
    goto LABEL_78;
LABEL_29:
  if (!HIDWORD(v10))
    return v10;
LABEL_78:
  *(_DWORD *)a1 = 1;
  return 0;
}

unint64_t dav1d_get_uniform(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unsigned __int8 *v18;
  unint64_t v19;

  v2 = __clz(a2) ^ 0x1F;
  v3 = (2 << v2) - a2;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4 >= v2)
  {
    v11 = *(_QWORD *)(a1 + 8);
    goto LABEL_33;
  }
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_DWORD *)(a1 + 4);
  v7 = *(unsigned __int8 **)(a1 + 24);
  v8 = v4 + 8;
  *(_DWORD *)(a1 + 16) = v4 + 8;
  if (v6)
  {
    v9 = 0;
    if ((unint64_t)v7 < v5)
      goto LABEL_5;
    goto LABEL_4;
  }
  *(_QWORD *)(a1 + 24) = v7 + 1;
  v9 = *v7++;
  if ((unint64_t)v7 >= v5)
  {
LABEL_4:
    *(_DWORD *)a1 = v6;
    v6 = 1;
    *(_DWORD *)(a1 + 4) = 1;
  }
LABEL_5:
  if (v8 < v2)
  {
    v9 <<= 8;
    v10 = v4 + 16;
    *(_DWORD *)(a1 + 16) = v4 + 16;
    if (v6)
    {
      if ((unint64_t)v7 < v5)
        goto LABEL_8;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v7 + 1;
      v9 |= *v7++;
      if ((unint64_t)v7 < v5)
      {
LABEL_8:
        if (v10 >= v2)
          goto LABEL_31;
        goto LABEL_15;
      }
    }
    *(_DWORD *)a1 = v6;
    v6 = 1;
    *(_DWORD *)(a1 + 4) = 1;
    if (v10 >= v2)
      goto LABEL_31;
LABEL_15:
    v9 <<= 8;
    v8 = v4 + 24;
    *(_DWORD *)(a1 + 16) = v4 + 24;
    if (v6)
    {
      if ((unint64_t)v7 < v5)
        goto LABEL_17;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v7 + 1;
      v9 |= *v7++;
      if ((unint64_t)v7 < v5)
      {
LABEL_17:
        if (v8 >= v2)
          goto LABEL_28;
        goto LABEL_21;
      }
    }
    *(_DWORD *)a1 = v6;
    v6 = 1;
    *(_DWORD *)(a1 + 4) = 1;
    if (v8 >= v2)
    {
LABEL_28:
      LOBYTE(v4) = v10;
      goto LABEL_32;
    }
LABEL_21:
    v9 <<= 8;
    v10 = v4 + 32;
    *(_DWORD *)(a1 + 16) = v4 + 32;
    if (v6)
    {
      if ((unint64_t)v7 < v5)
        goto LABEL_23;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v7 + 1;
      v9 |= *v7++;
      if ((unint64_t)v7 < v5)
      {
LABEL_23:
        if (v10 < v2)
        {
LABEL_24:
          v9 <<= 8;
          v8 = v4 + 40;
          *(_DWORD *)(a1 + 16) = v4 + 40;
          if (!v6)
          {
            *(_QWORD *)(a1 + 24) = v7 + 1;
            v9 |= *v7++;
          }
          if ((unint64_t)v7 >= v5)
          {
            *(_DWORD *)a1 = v6;
            *(_DWORD *)(a1 + 4) = 1;
          }
          goto LABEL_28;
        }
LABEL_31:
        LOBYTE(v4) = v8;
        v8 = v10;
        goto LABEL_32;
      }
    }
    *(_DWORD *)a1 = v6;
    v6 = 1;
    *(_DWORD *)(a1 + 4) = 1;
    if (v10 < v2)
      goto LABEL_24;
    goto LABEL_31;
  }
LABEL_32:
  v11 = *(_QWORD *)(a1 + 8) | (v9 << (56 - v4));
  v4 = v8;
LABEL_33:
  v12 = v4 - v2;
  *(_DWORD *)(a1 + 16) = v4 - v2;
  v13 = v11 << v2;
  *(_QWORD *)(a1 + 8) = v11 << v2;
  v14 = v11 >> -(char)v2;
  if (v3 <= v14)
  {
    v15 = 2 * v14 - v3;
    if (v12)
    {
LABEL_39:
      *(_DWORD *)(a1 + 16) = v12 - 1;
      *(_QWORD *)(a1 + 8) = 2 * v13;
      return v15 + (v13 >> 63);
    }
    v16 = *(_QWORD *)(a1 + 40);
    v17 = *(_DWORD *)(a1 + 4);
    v18 = *(unsigned __int8 **)(a1 + 24);
    *(_DWORD *)(a1 + 16) = 8;
    if (v17)
    {
      v19 = 0;
      if ((unint64_t)v18 < v16)
      {
LABEL_38:
        v13 |= v19;
        v12 = 8;
        goto LABEL_39;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v18 + 1;
      v19 = (unint64_t)*v18 << 56;
      if ((unint64_t)(v18 + 1) < v16)
        goto LABEL_38;
    }
    *(_DWORD *)a1 = v17;
    *(_DWORD *)(a1 + 4) = 1;
    goto LABEL_38;
  }
  return v14;
}

uint64_t dav1d_get_vlc(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;

  v1 = 0;
  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 8);
  while (v2)
  {
    v4 = v2;
    v5 = v3;
    *(_DWORD *)(a1 + 16) = --v2;
    v3 *= 2;
    *(_QWORD *)(a1 + 8) = v3;
    if ((v5 & 0x8000000000000000) != 0)
      goto LABEL_13;
LABEL_9:
    if (++v1 == 32)
      return 0xFFFFFFFFLL;
  }
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_DWORD *)(a1 + 4);
  v8 = *(unsigned __int8 **)(a1 + 24);
  *(_DWORD *)(a1 + 16) = 8;
  if (v7)
  {
    v9 = 0;
    if ((unint64_t)v8 < v6)
      goto LABEL_8;
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 24) = v8 + 1;
  v9 = *v8;
  if ((unint64_t)(v8 + 1) >= v6)
  {
LABEL_7:
    *(_DWORD *)a1 = v7;
    *(_DWORD *)(a1 + 4) = 1;
  }
LABEL_8:
  v4 = 8;
  v10 = v3 | (v9 << 56);
  v2 = 7;
  *(_DWORD *)(a1 + 16) = 7;
  v3 = 2 * v10;
  *(_QWORD *)(a1 + 8) = 2 * v10;
  if ((v10 & 0x8000000000000000) == 0)
    goto LABEL_9;
LABEL_13:
  if (!v1)
    return 0;
  if (v2 >= v1)
    goto LABEL_46;
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_DWORD *)(a1 + 4);
  v13 = *(unsigned __int8 **)(a1 + 24);
  v14 = v4 + 7;
  *(_DWORD *)(a1 + 16) = v4 + 7;
  if (v12)
  {
    v15 = 0;
    if ((unint64_t)v13 >= v11)
      goto LABEL_17;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = v13 + 1;
    v15 = *v13++;
    if ((unint64_t)v13 >= v11)
    {
LABEL_17:
      *(_DWORD *)a1 = v12;
      v12 = 1;
      *(_DWORD *)(a1 + 4) = 1;
    }
  }
  if (v14 >= v1)
    goto LABEL_45;
  v15 <<= 8;
  v16 = v4 + 15;
  *(_DWORD *)(a1 + 16) = v4 + 15;
  if (!v12)
  {
    *(_QWORD *)(a1 + 24) = v13 + 1;
    v15 |= *v13++;
    if ((unint64_t)v13 >= v11)
      goto LABEL_27;
LABEL_21:
    if (v16 >= v1)
      goto LABEL_44;
LABEL_28:
    v15 <<= 8;
    v14 = v4 + 23;
    *(_DWORD *)(a1 + 16) = v4 + 23;
    if (v12)
    {
      if ((unint64_t)v13 < v11)
        goto LABEL_30;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v13 + 1;
      v15 |= *v13++;
      if ((unint64_t)v13 < v11)
      {
LABEL_30:
        if (v14 >= v1)
          goto LABEL_41;
        goto LABEL_34;
      }
    }
    *(_DWORD *)a1 = v12;
    v12 = 1;
    *(_DWORD *)(a1 + 4) = 1;
    if (v14 >= v1)
    {
LABEL_41:
      LOBYTE(v2) = v16;
      goto LABEL_45;
    }
LABEL_34:
    v15 <<= 8;
    v16 = v4 + 31;
    *(_DWORD *)(a1 + 16) = v4 + 31;
    if (v12)
    {
      if ((unint64_t)v13 < v11)
        goto LABEL_36;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v13 + 1;
      v15 |= *v13++;
      if ((unint64_t)v13 < v11)
      {
LABEL_36:
        if (v16 >= v1)
          goto LABEL_44;
LABEL_37:
        v15 <<= 8;
        v14 = v4 + 39;
        *(_DWORD *)(a1 + 16) = v4 + 39;
        if (!v12)
        {
          *(_QWORD *)(a1 + 24) = v13 + 1;
          v15 |= *v13++;
        }
        if ((unint64_t)v13 >= v11)
        {
          *(_DWORD *)a1 = v12;
          *(_DWORD *)(a1 + 4) = 1;
        }
        goto LABEL_41;
      }
    }
    *(_DWORD *)a1 = v12;
    v12 = 1;
    *(_DWORD *)(a1 + 4) = 1;
    if (v16 >= v1)
      goto LABEL_44;
    goto LABEL_37;
  }
  if ((unint64_t)v13 < v11)
    goto LABEL_21;
LABEL_27:
  *(_DWORD *)a1 = v12;
  v12 = 1;
  *(_DWORD *)(a1 + 4) = 1;
  if (v16 < v1)
    goto LABEL_28;
LABEL_44:
  LOBYTE(v2) = v14;
  v14 = v16;
LABEL_45:
  v3 |= v15 << (56 - v2);
  v2 = v14;
LABEL_46:
  *(_DWORD *)(a1 + 16) = v2 - v1;
  *(_QWORD *)(a1 + 8) = v3 << v1;
  return (v3 >> -(char)v1) + ~(-1 << v1);
}

uint64_t dav1d_get_bits_subexp(uint64_t a1, int a2, char a3)
{
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;

  v3 = 1 << a3;
  v4 = (1 << a3) + a2;
  v5 = 2 << a3;
  if ((2 << a3) < 0x18)
  {
    v6 = 0;
LABEL_3:
    LODWORD(v7) = dav1d_get_uniform(a1, (v5 | 1) - v6);
    goto LABEL_26;
  }
  v8 = 0;
  v6 = 0;
  v9 = *(_DWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = 3;
  v12 = 8;
  while (1)
  {
    if (v9)
    {
      v13 = v9;
      v14 = v10;
      *(_DWORD *)(a1 + 16) = --v9;
      v10 *= 2;
      *(_QWORD *)(a1 + 8) = v10;
      if ((v14 & 0x8000000000000000) == 0)
        break;
      goto LABEL_12;
    }
    v15 = *(_QWORD *)(a1 + 40);
    v16 = *(_DWORD *)(a1 + 4);
    v17 = *(unsigned __int8 **)(a1 + 24);
    *(_DWORD *)(a1 + 16) = 8;
    if (v16)
    {
      v18 = 0;
      if ((unint64_t)v17 < v15)
        goto LABEL_11;
LABEL_10:
      *(_DWORD *)a1 = v16;
      *(_DWORD *)(a1 + 4) = 1;
      goto LABEL_11;
    }
    *(_QWORD *)(a1 + 24) = v17 + 1;
    v18 = *v17;
    if ((unint64_t)(v17 + 1) >= v15)
      goto LABEL_10;
LABEL_11:
    v13 = 8;
    v19 = v10 | (v18 << 56);
    v9 = 7;
    *(_DWORD *)(a1 + 16) = 7;
    v10 = 2 * v19;
    *(_QWORD *)(a1 + 8) = 2 * v19;
    if ((v19 & 0x8000000000000000) == 0)
      break;
LABEL_12:
    v6 += v12;
    v11 = v8 + 3;
    v12 = 8 << v8;
    v20 = 24 << v8++;
    if (v6 + v20 > v5)
      goto LABEL_3;
  }
  if (v9 >= v11)
    goto LABEL_25;
  v21 = 0;
  v22 = *(_QWORD *)(a1 + 40);
  v23 = *(_DWORD *)(a1 + 4);
  v24 = v13 - 65;
  v25 = *(unsigned __int8 **)(a1 + 24);
  while (2)
  {
    v21 <<= 8;
    *(_DWORD *)(a1 + 16) = v24 + 72;
    if (v23)
    {
      if ((unint64_t)v25 >= v22)
      {
LABEL_23:
        *(_DWORD *)a1 = v23;
        v23 = 1;
        *(_DWORD *)(a1 + 4) = 1;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v25 + 1;
      v21 |= *v25++;
      if ((unint64_t)v25 >= v22)
        goto LABEL_23;
    }
    v26 = v24 + 8;
    v27 = v24 + 72;
    v24 += 8;
    if (v27 < v11)
      continue;
    break;
  }
  v10 |= v21 << -(char)v26;
  v9 = v26 + 64;
LABEL_25:
  *(_DWORD *)(a1 + 16) = v9 - v11;
  *(_QWORD *)(a1 + 8) = v10 << v11;
  v7 = v10 >> -(char)v11;
LABEL_26:
  v28 = v7 + v6;
  v29 = 2 * v4;
  v30 = v7 + v6 + 1;
  v31 = v5 - v4 - (v30 >> 1);
  if ((((_DWORD)v7 + v6) & 1) == 0)
    v31 = v5 - v4 + ((v7 + v6) >> 1);
  if (v28 <= 2 * (v5 - v4))
    v32 = v31;
  else
    v32 = v7 + v6;
  v33 = v5 - v32;
  v34 = v4 - (v30 >> 1);
  if ((v28 & 1) == 0)
    v34 = v4 + (v28 >> 1);
  if (v29 >= v28)
    v28 = v34;
  if (v29 > v5)
    v28 = v33;
  return v28 - v3;
}

double init_mode_node(uint64_t a1, unsigned int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t *v24;
  uint64_t v25;
  uint64_t v26;
  double result;

  v6 = a1;
  if (a4)
    v7 = 7;
  else
    v7 = 0;
  if (a5)
    v8 = 56;
  else
    v8 = 0;
  v9 = v8 | v7;
  v10 = v7 | 0x38;
  *(_DWORD *)a1 = v8 | v7;
  *(_DWORD *)(a1 + 4) = v7 | 0x38;
  v11 = v8 | 7;
  if (a2 == 4)
  {
    *(_DWORD *)(a1 + 8) = v9 & 0x3C;
    *(_DWORD *)(a1 + 12) = v11;
    *(_DWORD *)(a1 + 16) = v9 & 0xFFFFFFF7;
    *(_DWORD *)(a1 + 20) = 63;
    *(_DWORD *)(a1 + 24) = v7 | 0x10;
    *(_DWORD *)(a1 + 28) = v9 | 1;
    *(_DWORD *)(a1 + 32) = v9 & 0x34;
LABEL_12:
    v13 = a2;
    v14 = 8 * a2;
    v15 = *(_QWORD *)(a3 + v14);
    *(_QWORD *)(a3 + v14) = v15 + 136;
    *(_QWORD *)(v6 + 104) = v15;
    init_mode_node();
    v16 = *(_QWORD *)(a3 + 8 * v13);
    *(_QWORD *)(a3 + 8 * v13) = v16 + 136;
    *(_QWORD *)(v6 + 112) = v16;
    init_mode_node();
    v17 = *(_QWORD *)(a3 + 8 * v13);
    *(_QWORD *)(a3 + 8 * v13) = v17 + 136;
    *(_QWORD *)(v6 + 120) = v17;
    init_mode_node();
    for (i = v14 + 8; ; i += 8)
    {
      v22 = v6;
      v6 = *(_QWORD *)(a3 + i - 8);
      *(_QWORD *)(a3 + i - 8) = v6 + 136;
      *(_QWORD *)(v22 + 128) = v6;
      *(_OWORD *)v6 = xmmword_19688AE00;
      *(_DWORD *)(v6 + 16) = 0;
      if (v13 == 3)
      {
        *(_OWORD *)(v6 + 20) = xmmword_19688AE90;
      }
      else
      {
        *(_OWORD *)(v6 + 68) = xmmword_19688AE10;
        *(_OWORD *)(v6 + 84) = xmmword_19688AE20;
        *(_OWORD *)(v6 + 52) = xmmword_19688AE30;
        *(_OWORD *)(v6 + 20) = xmmword_19688AE40;
        *(_OWORD *)(v6 + 36) = xmmword_19688AE50;
        if (v13 == 2)
        {
          v7 = 0;
          v8 = 0;
          v11 = 7;
          v10 = 56;
          goto LABEL_18;
        }
      }
      v19 = *(_QWORD *)(a3 + i);
      *(_QWORD *)(a3 + i) = v19 + 136;
      *(_QWORD *)(v6 + 104) = v19;
      init_mode_node();
      v20 = *(_QWORD *)(a3 + i);
      *(_QWORD *)(a3 + i) = v20 + 136;
      *(_QWORD *)(v6 + 112) = v20;
      init_mode_node();
      v21 = *(_QWORD *)(a3 + i);
      *(_QWORD *)(a3 + i) = v21 + 136;
      *(_QWORD *)(v6 + 120) = v21;
      init_mode_node();
      ++v13;
    }
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v11;
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 68) = v10;
  *(_QWORD *)(a1 + 72) = 0x3800000038;
  *(_DWORD *)(a1 + 80) = v8;
  v12 = 7;
  if (a2 == 3)
  {
    *(_DWORD *)(a1 + 72) = v7 & 4 | 0x38;
    v12 = v8 & 0x30 | 7;
  }
  *(_DWORD *)(a1 + 92) = 7;
  *(_DWORD *)(a1 + 96) = v7;
  *(_DWORD *)(a1 + 84) = v11;
  *(_DWORD *)(a1 + 88) = v12;
  *(_DWORD *)(a1 + 48) = v8;
  *(_DWORD *)(a1 + 52) = v7;
  *(_DWORD *)(a1 + 56) = v11;
  *(_DWORD *)(a1 + 60) = v10;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 20) = 63;
  *(_DWORD *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 28) = v8;
  *(_DWORD *)(a1 + 32) = v10;
  *(_DWORD *)(a1 + 36) = v11;
  *(_QWORD *)(a1 + 40) = 0x3F00000000;
  if (a2 != 3)
    goto LABEL_12;
LABEL_18:
  v23 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = v23 + 36;
  *(_QWORD *)(v6 + 104) = v23;
  *(_OWORD *)v23 = xmmword_19688AE60;
  *(_OWORD *)(v23 + 16) = xmmword_19688AE70;
  *(_DWORD *)(v23 + 32) = 52;
  v24 = *(int8x8_t **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = (char *)v24 + 36;
  *(_QWORD *)(v6 + 112) = v24;
  v24->i32[0] = v7;
  v24->i32[1] = v10;
  v24[1].i32[0] = v7 & 4;
  v24[1].i32[1] = 7;
  v24[2].i32[0] = v7;
  v24[2].i32[1] = 63;
  v24[3] = vorr_s8((int8x8_t)vdup_n_s32(v7), (int8x8_t)0x100000010);
  v24[4].i32[0] = v7 & 4;
  v25 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = v25 + 36;
  *(_QWORD *)(v6 + 120) = v25;
  *(_DWORD *)v25 = v11;
  *(_DWORD *)(v25 + 4) = 63;
  *(_DWORD *)(v25 + 8) = v8 | 4;
  *(_DWORD *)(v25 + 12) = v11;
  *(_DWORD *)(v25 + 16) = v11 & 0xFFFFFFF7;
  *(_QWORD *)(v25 + 20) = 0x170000003FLL;
  *(_DWORD *)(v25 + 28) = v11;
  *(_DWORD *)(v25 + 32) = v11 & 0x34;
  v26 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = v26 + 36;
  *(_QWORD *)(v6 + 128) = v26;
  *(_QWORD *)&result = 0x3800000000;
  *(_OWORD *)v26 = xmmword_19688AE00;
  *(_OWORD *)(v26 + 16) = xmmword_19688AE80;
  *(_DWORD *)(v26 + 32) = 0;
  return result;
}

int *dav1d_inv_dct4_1d_c(int *a1, uint64_t a2, int a3, int a4)
{
  return inv_dct4_1d_internal_c(a1, a2, a3, a4, 0);
}

int *inv_dct4_1d_internal_c(int *result, uint64_t a2, int a3, int a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;

  v5 = *result;
  v6 = result[a2];
  if (a5)
  {
    v7 = (181 * v5 + 128) >> 8;
    v8 = (1567 * v6 + 2048) >> 12;
    v9 = (3784 * v6 + 2048) >> 12;
    v10 = 2 * a2;
    v11 = 3 * a2;
    v12 = v7;
  }
  else
  {
    v13 = result[2 * a2];
    v10 = 2 * a2;
    v11 = 3 * a2;
    v14 = result[3 * a2];
    v7 = (181 * (v13 + v5) + 128) >> 8;
    v12 = (181 * (v5 - v13) + 128) >> 8;
    v8 = ((312 * v14 + 1567 * v6 + 2048) >> 12) - v14;
    v9 = v6 + ((1567 * v14 - 312 * v6 + 2048) >> 12);
  }
  if (v9 + v7 >= a4)
    v15 = a4;
  else
    v15 = v9 + v7;
  if (v9 + v7 >= a3)
    v16 = v15;
  else
    v16 = a3;
  *result = v16;
  if (v8 + v12 >= a4)
    v17 = a4;
  else
    v17 = v8 + v12;
  if (v8 + v12 >= a3)
    v18 = v17;
  else
    v18 = a3;
  result[a2] = v18;
  v19 = v12 - v8;
  if (v19 >= a4)
    v20 = a4;
  else
    v20 = v19;
  if (v19 >= a3)
    v21 = v20;
  else
    v21 = a3;
  result[v10] = v21;
  v22 = v7 - v9;
  if (v22 >= a4)
    v23 = a4;
  else
    v23 = v22;
  if (v22 >= a3)
    v24 = v23;
  else
    v24 = a3;
  result[v11] = v24;
  return result;
}

uint64_t dav1d_inv_dct8_1d_c(int *a1, uint64_t a2, int a3, int a4)
{
  return inv_dct8_1d_internal_c(a1, a2, a3, a4, 0);
}

uint64_t inv_dct8_1d_internal_c(int *a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v10;
  int32x2_t v11;
  unsigned int v12;
  unsigned int v13;
  int32x2_t v14;
  int32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  const float *v18;
  int32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  int v22;
  int v23;
  int32x2_t v24;
  int v25;
  int8x8_t v26;
  int v27;
  int8x8_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t result;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;

  v10 = 2 * a2;
  inv_dct4_1d_internal_c(a1, 2 * a2, a3, a4, a5);
  v12 = a1[a2];
  v13 = a1[v10 + a2];
  if (a5)
  {
    v14 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, vdup_n_s32(v13), (int32x2_t)0xD4EFFFFF71CLL), 0xCuLL);
    v15 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, vdup_n_s32(v12), (int32x2_t)0xFB10000031FLL), 0xCuLL);
    v16 = 5 * a2;
    v17 = 7 * a2;
  }
  else
  {
    v16 = 5 * a2;
    v18 = (const float *)&a1[5 * a2];
    v17 = 7 * a2;
    v11.i32[0] = a1[7 * a2];
    v19 = vadd_s32(vmla_s32(vmul_s32(vdup_n_s32(v11.u32[0]), (int32x2_t)0x31F0000004FLL), vdup_n_s32(v12), (int32x2_t)0xFFFFFFB10000031FLL), (int32x2_t)0x80000000800);
    v20 = (int32x2_t)vld1_dup_f32(v18);
    v14 = vshr_n_s32(vadd_s32(vmla_s32(vmul_s32(v20, (int32x2_t)0x472000006A7), vdup_n_s32(v13), (int32x2_t)0x6A7FFFFFB8ELL), (int32x2_t)0x40000000400), 0xBuLL);
    v15.i32[0] = vsub_s32(vshr_n_s32(v19, 0xCuLL), v11).u32[0];
    v11.i32[1] = a1[a2];
    v15.i32[1] = vsra_n_s32(v11, v19, 0xCuLL).i32[1];
  }
  v21 = vadd_s32(v15, v14);
  if (v21.i32[0] >= a4)
    v22 = a4;
  else
    v22 = v21.i32[0];
  if (v21.i32[0] >= a3)
    v23 = v22;
  else
    v23 = a3;
  v24 = vsub_s32(v15, v14);
  if (v21.i32[1] >= a4)
    v25 = a4;
  else
    v25 = v21.i32[1];
  v26 = (int8x8_t)vdup_n_s32(a3);
  if (v21.i32[1] >= a3)
    v27 = v25;
  else
    v27 = a3;
  v28 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v26, v24), v26, (int8x8_t)vmin_s32(v24, vdup_n_s32(a4)));
  v29 = (181 * (v28.i32[1] - v28.i32[0]) + 128) >> 8;
  v30 = (181 * (v28.i32[0] + v28.i32[1]) + 128) >> 8;
  v31 = *a1;
  v32 = a1[v10];
  result = 16 * a2;
  v34 = a1[4 * a2];
  v35 = a1[6 * a2];
  v36 = *a1 + v27;
  if (v36 >= a4)
    v37 = a4;
  else
    v37 = *a1 + v27;
  if (v36 >= a3)
    v38 = v37;
  else
    v38 = a3;
  *a1 = v38;
  if (v30 + v32 >= a4)
    v39 = a4;
  else
    v39 = v30 + v32;
  if (v30 + v32 >= a3)
    v40 = v39;
  else
    v40 = a3;
  a1[a2] = v40;
  if (v29 + v34 >= a4)
    v41 = a4;
  else
    v41 = v29 + v34;
  if (v29 + v34 >= a3)
    v42 = v41;
  else
    v42 = a3;
  a1[v10] = v42;
  if (v35 + v23 >= a4)
    v43 = a4;
  else
    v43 = v35 + v23;
  if (v35 + v23 >= a3)
    v44 = v43;
  else
    v44 = a3;
  a1[v10 + a2] = v44;
  v45 = v35 - v23;
  if (v35 - v23 >= a4)
    v46 = a4;
  else
    v46 = v35 - v23;
  if (v45 >= a3)
    v47 = v46;
  else
    v47 = a3;
  a1[4 * a2] = v47;
  if (v34 - v29 >= a4)
    v48 = a4;
  else
    v48 = v34 - v29;
  if (v34 - v29 >= a3)
    v49 = v48;
  else
    v49 = a3;
  a1[v16] = v49;
  if (v32 - v30 >= a4)
    v50 = a4;
  else
    v50 = v32 - v30;
  if (v32 - v30 >= a3)
    v51 = v50;
  else
    v51 = a3;
  a1[6 * a2] = v51;
  if (v31 - v27 >= a4)
    v52 = a4;
  else
    v52 = v31 - v27;
  if (v31 - v27 >= a3)
    v53 = v52;
  else
    v53 = a3;
  a1[v17] = v53;
  return result;
}

uint64_t dav1d_inv_dct16_1d_c(int *a1, uint64_t a2, int a3, int a4)
{
  return inv_dct16_1d_internal_c(a1, a2, a3, a4, 0);
}

uint64_t inv_dct16_1d_internal_c(int *a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v10;
  int32x2_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  const float *v21;
  unsigned int v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  int32x2_t v29;
  int8x8_t v30;
  int32x2_t v31;
  int32x2_t v32;
  int32x2_t v33;
  int32x2_t v34;
  int32x2_t v35;
  int v36;
  int v37;
  int32x2_t v38;
  int8x8_t v39;
  int32x2_t v40;
  int32x2_t v41;
  int32x2_t v42;
  int32x2_t v43;
  int32x2_t v44;
  int32x2_t v45;
  int32x2_t v46;
  int v47;
  int v48;
  int32x2_t v49;
  int8x8_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t result;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;

  v10 = 2 * a2;
  inv_dct8_1d_internal_c(a1, 2 * a2, a3, a4, a5);
  v12 = a1[a2];
  v116 = v10 + a2;
  v13 = a1[v10 + a2];
  v119 = 5 * a2;
  v14 = a1[5 * a2];
  v120 = 7 * a2;
  v15 = a1[7 * a2];
  v16 = 4 * a2;
  if (a5)
  {
    v17 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, vdup_n_s32(v13), (int32x2_t)0xF50FFFFFB5BLL), 0xCuLL);
    v18 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, vdup_n_s32(v14), (int32x2_t)0xE1C0000078BLL), 0xCuLL);
    v19 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, vdup_n_s32(v15), (int32x2_t)0xFFFFF5DA00000C5ELL), 0xCuLL);
    v20 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, vdup_n_s32(v12), (int32x2_t)0x19100000FECLL), 0xCuLL);
    v114 = 9 * a2;
    v115 = 11 * a2;
    v117 = 13 * a2;
    v118 = 15 * a2;
  }
  else
  {
    v114 = 9 * a2;
    v21 = (const float *)&a1[9 * a2];
    v115 = 11 * a2;
    v22 = a1[11 * a2];
    v117 = 13 * a2;
    v118 = 15 * a2;
    v11.i32[0] = a1[a2];
    v23 = vadd_s32(vmla_s32(vmul_s32(vdup_n_s32(a1[15 * a2]), (int32x2_t)0x1400000191), vdup_n_s32(v12), (int32x2_t)0x191FFFFFFECLL), (int32x2_t)0x80000000800);
    v24 = (int32x2_t)vld1_dup_f32(v21);
    v25 = vadd_s32(vmla_s32(vmul_s32(v24, (int32x2_t)0x62F00000513), vdup_n_s32(v15), (int32x2_t)0xFFFFFAED0000062FLL), (int32x2_t)0x40000000400);
    v26 = vadd_s32(vmla_s32(vmul_s32(vdup_n_s32(v22), (int32x2_t)0x78B000001E4), vdup_n_s32(v14), (int32x2_t)0xFFFFFE1C0000078BLL), (int32x2_t)0x80000000800);
    v18.i32[0] = vsub_s32(vshr_n_s32(v26, 0xCuLL), (int32x2_t)(v22 | 0xFFFFFAED00000000)).u32[0];
    v17 = vsra_n_s32((int32x2_t)__PAIR64__(v13, a1[13 * a2]), vadd_s32(vmla_s32(vmul_s32(vdup_n_s32(a1[13 * a2]), (int32x2_t)0x4A5FFFFFF50), vdup_n_s32(v13), (int32x2_t)0xFFFFFF50FFFFFB5BLL), (int32x2_t)0x80000000800), 0xCuLL);
    v18.i32[1] = vsra_n_s32((int32x2_t)__PAIR64__(v14, v22), v26, 0xCuLL).i32[1];
    v19 = vshr_n_s32(v25, 0xBuLL);
    v25.i32[0] = v11.i32[0];
    v25.i32[1] = a1[15 * a2];
    v20.i32[0] = vsra_n_s32(v11, v23, 0xCuLL).u32[0];
    v20.i32[1] = vsub_s32(vshr_n_s32(v23, 0xCuLL), v25).i32[1];
  }
  v27 = vsub_s32(v20, v19);
  v28 = vsub_s32(v17, v18);
  v29 = vadd_s32(v17, v18);
  v30 = (int8x8_t)vdup_n_s32(a3);
  v31 = vdup_n_s32(a4);
  v32 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v30, v29), v30, (int8x8_t)vmin_s32(v29, v31));
  v33 = vrev64_s32(vadd_s32(v19, v20));
  v34 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v30, v33), v30, (int8x8_t)vmin_s32(v33, v31));
  v35 = vadd_s32(v34, v32);
  if (v35.i32[0] >= a4)
    v36 = a4;
  else
    v36 = v35.i32[0];
  if (v35.i32[0] >= a3)
    v37 = v36;
  else
    v37 = a3;
  v38 = vsub_s32(v34, v32);
  v39 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v30, v38), v30, (int8x8_t)vmin_s32(v38, v31));
  v40 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v30, v27), v30, (int8x8_t)vmin_s32(v27, v31));
  v41 = vadd_s32(vmla_lane_s32(vmul_lane_s32((int32x2_t)0x1380000061FLL, v40, 1), (int32x2_t)0x61FFFFFFEC8, v40, 0), (int32x2_t)0x80000000800);
  v42 = vsub_s32(vshr_n_s32(v41, 0xCuLL), v40);
  v43.i32[0] = vsra_n_s32(v40, v41, 0xCuLL).u32[0];
  v43.i32[1] = v42.i32[1];
  v44 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v30, v28), v30, (int8x8_t)vmin_s32(v28, v31));
  v45 = vsub_s32(vshr_n_s32(vadd_s32(vmla_lane_s32(vmul_n_s32((int32x2_t)0xFFFFF9E100000138, v44.i32[0]), (int32x2_t)0x1380000061FLL, v44, 1), (int32x2_t)0x80000000800), 0xCuLL), v44);
  v46 = vadd_s32(v43, v45);
  if (v46.i32[1] >= a4)
    v47 = a4;
  else
    v47 = v46.i32[1];
  if (v46.i32[1] >= a3)
    v48 = v47;
  else
    v48 = a3;
  v49 = vsub_s32(v43, v45);
  v50 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v30, v49), v30, (int8x8_t)vmin_s32(v49, v31));
  if (v46.i32[0] >= a4)
    v51 = a4;
  else
    v51 = v46.i32[0];
  if (v46.i32[0] >= a3)
    v52 = v51;
  else
    v52 = a3;
  if (v35.i32[1] >= a4)
    v53 = a4;
  else
    v53 = v35.i32[1];
  if (v35.i32[1] >= a3)
    v54 = v53;
  else
    v54 = a3;
  v55 = 181 * (v50.i32[0] - v50.i32[1]) + 128;
  v56 = 181 * (v50.i32[0] + v50.i32[1]) + 128;
  v57 = 181 * (v39.i32[1] - v39.i32[0]) + 128;
  v58 = 181 * (v39.i32[0] + v39.i32[1]) + 128;
  result = *a1;
  v60 = v10;
  v61 = a1[v10];
  v62 = a1[4 * a2];
  v63 = 6 * a2;
  v64 = a1[6 * a2];
  v65 = 8 * a2;
  v66 = 10 * a2;
  v67 = 12 * a2;
  if (v54 + (int)result >= a4)
    v68 = a4;
  else
    v68 = v54 + result;
  v69 = 14 * a2;
  if (v54 + (int)result >= a3)
    v70 = v68;
  else
    v70 = a3;
  v71 = a1[8 * a2];
  v72 = a1[10 * a2];
  v73 = a1[12 * a2];
  v74 = a1[14 * a2];
  *a1 = v70;
  if (v52 + v61 >= a4)
    v75 = a4;
  else
    v75 = v52 + v61;
  if (v52 + v61 < a3)
    v75 = a3;
  a1[a2] = v75;
  v76 = v56 >> 8;
  v77 = (v56 >> 8) + v62;
  if (v77 >= a4)
    v78 = a4;
  else
    v78 = (v56 >> 8) + v62;
  if (v77 >= a3)
    v79 = v78;
  else
    v79 = a3;
  a1[v60] = v79;
  v80 = v58 >> 8;
  v81 = (v58 >> 8) + v64;
  if (v81 >= a4)
    v82 = a4;
  else
    v82 = (v58 >> 8) + v64;
  if (v81 >= a3)
    v83 = v82;
  else
    v83 = a3;
  a1[v116] = v83;
  v84 = v57 >> 8;
  v85 = (v57 >> 8) + v71;
  if (v85 >= a4)
    v86 = a4;
  else
    v86 = (v57 >> 8) + v71;
  if (v85 >= a3)
    v87 = v86;
  else
    v87 = a3;
  a1[v16] = v87;
  v88 = v55 >> 8;
  v89 = (v55 >> 8) + v72;
  if (v89 >= a4)
    v90 = a4;
  else
    v90 = v89;
  if (v89 >= a3)
    v91 = v90;
  else
    v91 = a3;
  a1[v119] = v91;
  if (v48 + v73 >= a4)
    v92 = a4;
  else
    v92 = v48 + v73;
  if (v48 + v73 >= a3)
    v93 = v92;
  else
    v93 = a3;
  a1[v63] = v93;
  if (v74 + v37 >= a4)
    v94 = a4;
  else
    v94 = v74 + v37;
  if (v74 + v37 >= a3)
    v95 = v94;
  else
    v95 = a3;
  a1[v120] = v95;
  v96 = v74 - v37;
  if (v96 >= a4)
    v97 = a4;
  else
    v97 = v96;
  if (v96 >= a3)
    v98 = v97;
  else
    v98 = a3;
  a1[v65] = v98;
  v99 = v73 - v48;
  if (v99 >= a4)
    v100 = a4;
  else
    v100 = v99;
  if (v99 >= a3)
    v101 = v100;
  else
    v101 = a3;
  a1[v114] = v101;
  if (v72 - v88 >= a4)
    v102 = a4;
  else
    v102 = v72 - v88;
  if (v72 - v88 >= a3)
    v103 = v102;
  else
    v103 = a3;
  a1[v66] = v103;
  if (v71 - v84 >= a4)
    v104 = a4;
  else
    v104 = v71 - v84;
  if (v71 - v84 >= a3)
    v105 = v104;
  else
    v105 = a3;
  a1[v115] = v105;
  if (v64 - v80 >= a4)
    v106 = a4;
  else
    v106 = v64 - v80;
  if (v64 - v80 >= a3)
    v107 = v106;
  else
    v107 = a3;
  a1[v67] = v107;
  if (v62 - v76 >= a4)
    v108 = a4;
  else
    v108 = v62 - v76;
  if (v62 - v76 >= a3)
    v109 = v108;
  else
    v109 = a3;
  a1[v117] = v109;
  if (v61 - v52 >= a4)
    v110 = a4;
  else
    v110 = v61 - v52;
  if (v61 - v52 >= a3)
    v111 = v110;
  else
    v111 = a3;
  a1[v69] = v111;
  if ((int)result - v54 >= a4)
    v112 = a4;
  else
    v112 = result - v54;
  if ((int)result - v54 >= a3)
    v113 = v112;
  else
    v113 = a3;
  a1[v118] = v113;
  return result;
}

uint64_t dav1d_inv_dct32_1d_c(int *a1, uint64_t a2, int a3, int a4)
{
  return inv_dct32_1d_internal_c(a1, a2, a3, a4, 0);
}

uint64_t inv_dct32_1d_internal_c(int *a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int32x2_t v25;
  int32x2_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  const float *v38;
  int32x2_t v39;
  int32x2_t v40;
  int32x2_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  int32x2_t v56;
  int32x2_t v57;
  unsigned int v58;
  int32x2_t v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  BOOL v69;
  int v70;
  __int32 v71;
  int v72;
  int8x8_t v73;
  int32x2_t v74;
  __int32 v75;
  int32x2_t v76;
  int32x2_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int32x2_t v84;
  int8x8_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int32x2_t v91;
  int8x8_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int32x2_t v110;
  int32x2_t v111;
  int32x2_t v112;
  int v113;
  int32x2_t v114;
  int32x2_t v115;
  int32x2_t v116;
  int32x2_t v117;
  int32x2_t v118;
  int32x2_t v119;
  int32x2_t v120;
  __int32 v121;
  __int32 v122;
  int32x2_t v123;
  __int32 v124;
  int v125;
  int v126;
  int32x2_t v127;
  int8x8_t v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int32x2_t v149;
  int8x8_t v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  uint64_t result;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  int v286;
  int v287;
  uint64_t v288;
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  uint64_t v319;

  v10 = 2 * a2;
  inv_dct16_1d_internal_c(a1, 2 * a2, a3, a4, a5);
  v11 = a1[a2];
  v306 = v10;
  v12 = a1[v10 + a2];
  v311 = v10 + a2;
  v312 = 5 * a2;
  v13 = a1[5 * a2];
  v14 = a1[7 * a2];
  v313 = 7 * a2;
  v314 = 9 * a2;
  v15 = a1[9 * a2];
  v315 = 11 * a2;
  v16 = a1[11 * a2];
  v316 = 13 * a2;
  v17 = a1[13 * a2];
  v317 = 15 * a2;
  v18 = a1[15 * a2];
  v319 = 8 * a2;
  if (a5)
  {
    v19 = (201 * v11 + 2048) >> 12;
    v20 = (2048 - 2751 * v18) >> 12;
    v21 = (1751 * v15 + 2048) >> 12;
    v22 = (2048 - 1380 * v14) >> 12;
    v23 = (995 * v13 + 2048) >> 12;
    v24 = (2048 - 2106 * v16) >> 12;
    v25 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, vdup_n_s32(v12), (int32x2_t)0xFFFFFDA700000FD4), 0xCuLL);
    v26 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, vdup_n_s32(v17), (int32x2_t)0x98800000CDALL), 0xCuLL);
    v27 = (3513 * v16 + 2048) >> 12;
    v28 = (3973 * v13 + 2048) >> 12;
    v29 = (3857 * v14 + 2048) >> 12;
    v30 = (3703 * v15 + 2048) >> 12;
    v31 = (3035 * v18 + 2048) >> 12;
    v32 = (4091 * v11 + 2048) >> 12;
    v305 = 17 * a2;
    v304 = 19 * a2;
    v308 = 21 * a2;
    v301 = 23 * a2;
    v309 = 25 * a2;
    v302 = 27 * a2;
    v310 = 31 * a2;
    v303 = 29 * a2;
  }
  else
  {
    v305 = 17 * a2;
    v33 = a1[17 * a2];
    v308 = 21 * a2;
    v34 = a1[21 * a2];
    v309 = 25 * a2;
    v35 = a1[25 * a2];
    v310 = 31 * a2;
    v36 = a1[31 * a2];
    v19 = ((5 * v36 + 201 * v11 + 2048) >> 12) - v36;
    v37 = -5 * v11 + 201 * v36;
    v304 = 19 * a2;
    v38 = (const float *)&a1[19 * a2];
    v39.i32[0] = v12;
    v40 = vdup_n_s32(v12);
    v41 = (int32x2_t)vld1_dup_f32(v38);
    v302 = 27 * a2;
    v303 = 29 * a2;
    v24 = v34 + ((-583 * v34 - 2106 * v16 + 2048) >> 12);
    v39.i32[1] = a1[29 * a2];
    v42 = a1[27 * a2];
    v27 = v16 + ((2106 * v34 - 583 * v16 + 2048) >> 12);
    v23 = ((123 * v42 + 995 * v13 + 2048) >> 12) - v42;
    v43 = 995 * v42 - 123 * v13;
    v22 = v35 + ((-239 * v35 - 1380 * v14 + 2048) >> 12);
    v28 = v13 + ((v43 + 2048) >> 12);
    v301 = 23 * a2;
    v44 = a1[23 * a2];
    v29 = v14 + ((1380 * v35 - 239 * v14 + 2048) >> 12);
    v21 = ((393 * v44 + 1751 * v15 + 2048) >> 12) - v44;
    v20 = v33 + ((-1061 * v33 - 2751 * v18 + 2048) >> 12);
    v30 = v15 + ((1751 * v44 - 393 * v15 + 2048) >> 12);
    v31 = v18 + ((2751 * v33 - 1061 * v18 + 2048) >> 12);
    v32 = v11 + ((v37 + 2048) >> 12);
    v25 = vsra_n_s32(v39, vadd_s32(vmla_s32(vmul_s32(vdup_n_s32(v39.u32[1]), (int32x2_t)0xFFFFFFD400000259), v40, (int32x2_t)0xFFFFFDA7FFFFFFD4), (int32x2_t)0x80000000800), 0xCuLL);
    v26 = vshr_n_s32(vadd_s32(vmla_s32(vmul_s32(v41, (int32x2_t)0xFFFFF993000004C4), vdup_n_s32(v17), (int32x2_t)0x4C40000066DLL), (int32x2_t)0x40000000400), 0xBuLL);
  }
  if (v19 + v20 >= a4)
    v45 = a4;
  else
    v45 = v19 + v20;
  v46 = v19 - v20;
  if (v19 + v20 >= a3)
    v47 = v45;
  else
    v47 = a3;
  if (v46 >= a4)
    v48 = a4;
  else
    v48 = v19 - v20;
  if (v46 >= a3)
    v49 = v48;
  else
    v49 = a3;
  v50 = v22 - v21;
  if (v22 - v21 >= a4)
    v51 = a4;
  else
    v51 = v22 - v21;
  v52 = v21 + v22;
  if (v50 >= a3)
    v53 = v51;
  else
    v53 = a3;
  if (v52 >= a4)
    v54 = a4;
  else
    v54 = v52;
  if (v52 < a3)
    v54 = a3;
  if (v23 - v24 >= a4)
    v55 = a4;
  else
    v55 = v23 - v24;
  v56.i32[0] = vdup_lane_s32(v26, 1).u32[0];
  v56.i32[1] = v23;
  v57.i32[0] = vdup_lane_s32(v25, 1).u32[0];
  v57.i32[1] = v24;
  if (v23 - v24 < a3)
    v55 = a3;
  if (v28 - v27 >= a4)
    v58 = a4;
  else
    v58 = v28 - v27;
  v59 = vsub_s32(v25, v26);
  v25.i32[1] = v27;
  v26.i32[1] = v28;
  if (v28 - v27 >= a3)
    v60 = v58;
  else
    v60 = a3;
  v61 = v29 + v30;
  if (v29 + v30 >= a4)
    v62 = a4;
  else
    v62 = v29 + v30;
  v63 = v29 - v30;
  if (v61 < a3)
    v62 = a3;
  if (v63 >= a4)
    v64 = a4;
  else
    v64 = v63;
  if (v63 < a3)
    v64 = a3;
  if (v32 - v31 >= a4)
    v65 = a4;
  else
    v65 = v32 - v31;
  v66 = v31 + v32;
  if (v32 - v31 >= a3)
    v67 = v65;
  else
    v67 = a3;
  if (v66 >= a4)
    v68 = a4;
  else
    v68 = v66;
  v69 = v66 < a3;
  v70 = ((79 * v49 + 799 * v67 + 2048) >> 12) - v49;
  v71 = v67 + ((799 * v49 - 79 * v67 + 2048) >> 12);
  v72 = ((-799 * v53 + 79 * v64 + 2048) >> 12) - v64;
  v73 = (int8x8_t)vdup_n_s32(a3);
  v74 = vdup_n_s32(a4);
  v75 = ((79 * v53 + 799 * v64 + 2048) >> 12) - v53;
  v76 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v73, v59), v73, (int8x8_t)vmin_s32(v59, v74));
  v77 = vdup_n_s32(0xFFFFFB8E);
  if (v69)
    v68 = a3;
  if (v47 + v54 >= a4)
    v78 = a4;
  else
    v78 = v47 + v54;
  if (v47 + v54 >= a3)
    v79 = v78;
  else
    v79 = a3;
  if (v70 - v72 >= a4)
    v80 = a4;
  else
    v80 = v70 - v72;
  v81 = v47 - v54;
  if (v70 - v72 >= a3)
    v82 = v80;
  else
    v82 = a3;
  if (v81 >= a4)
    v83 = a4;
  else
    v83 = v81;
  v84 = vadd_s32(v56, v57);
  v85 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v73, v84), v73, (int8x8_t)vmin_s32(v84, v74));
  if (v81 >= a3)
    v86 = v83;
  else
    v86 = a3;
  if (v85.i32[0] - v85.i32[1] >= a4)
    v87 = a4;
  else
    v87 = v85.i32[0] - v85.i32[1];
  v88 = v85.i32[1] + v85.i32[0];
  if (v85.i32[0] - v85.i32[1] >= a3)
    v89 = v87;
  else
    v89 = a3;
  if (v88 >= a4)
    v90 = a4;
  else
    v90 = v85.i32[1] + v85.i32[0];
  v91 = vadd_s32(v25, v26);
  v92 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v73, v91), v73, (int8x8_t)vmin_s32(v91, v74));
  if (v88 >= a3)
    v93 = v90;
  else
    v93 = a3;
  if (v92.i32[0] + v92.i32[1] >= a4)
    v94 = a4;
  else
    v94 = v92.i32[0] + v92.i32[1];
  v95 = v92.i32[0] - v92.i32[1];
  if (v92.i32[0] + v92.i32[1] >= a3)
    v96 = v94;
  else
    v96 = a3;
  if (v95 >= a4)
    v97 = a4;
  else
    v97 = v92.i32[0] - v92.i32[1];
  if (v95 >= a3)
    v98 = v97;
  else
    v98 = a3;
  if (v68 - v62 >= a4)
    v99 = a4;
  else
    v99 = v68 - v62;
  if (v68 - v62 >= a3)
    v100 = v99;
  else
    v100 = a3;
  if (v71 - v75 >= a4)
    v101 = a4;
  else
    v101 = v71 - v75;
  v102 = v62 + v68;
  if (v71 - v75 >= a3)
    v103 = v101;
  else
    v103 = a3;
  if (v102 >= a4)
    v104 = a4;
  else
    v104 = v102;
  v69 = v102 < a3;
  v105 = ((312 * v82 + 1567 * v103 + 2048) >> 12) - v82;
  v106 = v103 + ((-312 * v103 + 1567 * v82 + 2048) >> 12);
  v107 = ((312 * v86 + 1567 * v100 + 2048) >> 12) - v86;
  v108 = v100 + ((1567 * v86 - 312 * v100 + 2048) >> 12);
  v109 = ((-1567 * v89 + 312 * v98 + 2048) >> 12) - v98;
  v110.i32[0] = vdup_lane_s32(vmul_s32(v76, v77), 1).u32[0];
  v110.i32[1] = -1138 * v76.i32[0] + 1024;
  v111 = vshr_n_s32(vadd_s32(vmla_s32(vmul_s32(vdup_n_s32(v55), (int32x2_t)0xFFFFFB8E000006A7), vdup_n_s32(v60), (int32x2_t)0x6A700000472), (int32x2_t)0x40000000400), 0xBuLL);
  v112 = (int32x2_t)__PAIR64__(v111.u32[1], v70);
  v113 = ((312 * v89 + 1567 * v98 + 2048) >> 12) - v89;
  v114.i32[0] = vmla_s32((int32x2_t)0x40000000400, v76, vdup_n_s32(0x6A7u)).u32[0];
  v114.i32[1] = vmul_s32(v76, vdup_n_s32(0xFFFFF959)).i32[1];
  v115 = vshr_n_s32(vadd_s32(v114, v110), 0xBuLL);
  v116 = (int32x2_t)__PAIR64__(v115.u32[1], v72);
  v117 = vdup_lane_s32(v111, 0);
  v117.i32[0] = v71;
  v118 = vdup_lane_s32(v115, 0);
  v118.i32[0] = v75;
  v119 = vsub_s32(v115, v111);
  v120 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v73, v119), v73, (int8x8_t)vmin_s32(v119, v74));
  v121 = v120.i32[1];
  v122 = ((312 * v120.i32[0] - 1567 * v120.i32[1] + 2048) >> 12) - v120.i32[0];
  v123 = vmul_s32(v120, (int32x2_t)0x1380000061FLL);
  v124 = ((v123.i32[0] + v123.i32[1] + 2048) >> 12) - v121;
  if (v69)
    v125 = a3;
  else
    v125 = v104;
  if (v79 + v93 >= a4)
    v126 = a4;
  else
    v126 = v79 + v93;
  v127 = vadd_s32(v112, v116);
  v128 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v73, v127), v73, (int8x8_t)vmin_s32(v127, v74));
  if (v79 + v93 >= a3)
    v129 = v126;
  else
    v129 = a3;
  v300 = v129;
  if (v128.i32[0] + v128.i32[1] >= a4)
    v130 = a4;
  else
    v130 = v128.i32[0] + v128.i32[1];
  if (v128.i32[0] + v128.i32[1] >= a3)
    v131 = v130;
  else
    v131 = a3;
  if (v105 + v122 >= a4)
    v132 = a4;
  else
    v132 = v105 + v122;
  if (v105 + v122 >= a3)
    v133 = v132;
  else
    v133 = a3;
  v298 = v133;
  v299 = v131;
  v134 = v107 + v109;
  if (v107 + v109 >= a4)
    v135 = a4;
  else
    v135 = v107 + v109;
  v136 = v107 - v109;
  if (v134 >= a3)
    v137 = v135;
  else
    v137 = a3;
  v297 = v137;
  if (v136 >= a4)
    v138 = a4;
  else
    v138 = v136;
  v139 = v105 - v122;
  if (v136 >= a3)
    v140 = v138;
  else
    v140 = a3;
  v294 = v140;
  if (v139 >= a4)
    v141 = a4;
  else
    v141 = v139;
  v142 = v128.i32[0] - v128.i32[1];
  if (v139 >= a3)
    v143 = v141;
  else
    v143 = a3;
  v293 = v143;
  if (v142 >= a4)
    v144 = a4;
  else
    v144 = v128.i32[0] - v128.i32[1];
  v69 = v142 < a3;
  v145 = v79 - v93;
  if (v69)
    v144 = a3;
  v292 = v144;
  if (v145 >= a4)
    v146 = a4;
  else
    v146 = v79 - v93;
  if (v145 >= a3)
    v147 = v146;
  else
    v147 = a3;
  v289 = v147;
  if (v125 - v96 >= a4)
    v148 = a4;
  else
    v148 = v125 - v96;
  v149 = vadd_s32(v117, v118);
  v150 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v73, v149), v73, (int8x8_t)vmin_s32(v149, v74));
  if (v125 - v96 >= a3)
    v151 = v148;
  else
    v151 = a3;
  if (v150.i32[0] - v150.i32[1] >= a4)
    v152 = a4;
  else
    v152 = v150.i32[0] - v150.i32[1];
  if (v150.i32[0] - v150.i32[1] >= a3)
    v153 = v152;
  else
    v153 = a3;
  v285 = v153;
  if (v106 - v124 >= a4)
    v154 = a4;
  else
    v154 = v106 - v124;
  if (v106 - v124 >= a3)
    v155 = v154;
  else
    v155 = a3;
  v156 = v108 - v113;
  if (v108 - v113 >= a4)
    v157 = a4;
  else
    v157 = v108 - v113;
  v158 = v108 + v113;
  if (v156 >= a3)
    v159 = v157;
  else
    v159 = a3;
  if (v158 >= a4)
    v160 = a4;
  else
    v160 = v158;
  v69 = v158 < a3;
  v161 = v106 + v124;
  if (v69)
    v162 = a3;
  else
    v162 = v160;
  v318 = v162;
  if (v161 >= a4)
    v163 = a4;
  else
    v163 = v161;
  v69 = v161 < a3;
  v164 = v150.i32[0] + v150.i32[1];
  if (v69)
    v165 = a3;
  else
    v165 = v163;
  v287 = v165;
  if (v164 >= a4)
    v166 = a4;
  else
    v166 = v150.i32[0] + v150.i32[1];
  v69 = v164 < a3;
  v167 = v96 + v125;
  if (v69)
    v168 = a3;
  else
    v168 = v166;
  v291 = v168;
  if (v167 >= a4)
    v169 = a4;
  else
    v169 = v96 + v125;
  if (v167 < a3)
    v169 = a3;
  v295 = v169;
  v296 = *a1;
  v170 = *a1 + v169;
  if (v170 >= a4)
    v171 = a4;
  else
    v171 = *a1 + v169;
  v172 = v306;
  v173 = 6 * a2;
  v174 = 10 * a2;
  v277 = 12 * a2;
  v278 = 14 * a2;
  v280 = 18 * a2;
  v281 = 20 * a2;
  v282 = 22 * a2;
  v283 = 24 * a2;
  v175 = a1[v306];
  v290 = v175;
  v176 = 4 * a2;
  v177 = a1[4 * a2];
  v286 = v177;
  v284 = 26 * a2;
  v178 = a1[6 * a2];
  v179 = a1[8 * a2];
  v288 = 28 * a2;
  v180 = a1[10 * a2];
  v181 = a1[12 * a2];
  v307 = 30 * a2;
  v182 = a1[14 * a2];
  v279 = a2 << 6;
  v273 = a1[16 * a2];
  v274 = a1[18 * a2];
  v275 = a1[20 * a2];
  v276 = a1[22 * a2];
  v183 = a1[24 * a2];
  v184 = a1[26 * a2];
  result = a1[28 * a2];
  if (v170 >= a3)
    v186 = v171;
  else
    v186 = a3;
  v187 = a1[30 * a2];
  *a1 = v186;
  if (v168 + v175 >= a4)
    v188 = a4;
  else
    v188 = v168 + v175;
  if (v168 + v175 >= a3)
    v189 = v188;
  else
    v189 = a3;
  a1[a2] = v189;
  if (v165 + v177 >= a4)
    v190 = a4;
  else
    v190 = v165 + v177;
  if (v165 + v177 >= a3)
    v191 = v190;
  else
    v191 = a3;
  a1[v172] = v191;
  v192 = 181 * (v159 - v294) + 128;
  v193 = 181 * (v159 + v294) + 128;
  v194 = 181 * (v155 - v293) + 128;
  v195 = 181 * (v155 + v293) + 128;
  v196 = 181 * (v285 - v292) + 128;
  v197 = 181 * (v151 - v289) + 128;
  v198 = 181 * (v289 + v151) + 128;
  if (v318 + v178 >= a4)
    v199 = a4;
  else
    v199 = v318 + v178;
  if (v318 + v178 >= a3)
    v200 = v199;
  else
    v200 = a3;
  a1[v311] = v200;
  v201 = v193 >> 8;
  v202 = (v193 >> 8) + v179;
  if (v202 >= a4)
    v203 = a4;
  else
    v203 = v202;
  if (v202 >= a3)
    v204 = v203;
  else
    v204 = a3;
  a1[v176] = v204;
  v205 = v195 >> 8;
  v206 = (v195 >> 8) + v180;
  if (v206 >= a4)
    v207 = a4;
  else
    v207 = (v195 >> 8) + v180;
  if (v206 >= a3)
    v208 = v207;
  else
    v208 = a3;
  a1[v312] = v208;
  v209 = (181 * (v285 + v292) + 128) >> 8;
  if (v209 + v181 >= a4)
    v210 = a4;
  else
    v210 = v209 + v181;
  if (v209 + v181 >= a3)
    v211 = v210;
  else
    v211 = a3;
  a1[v173] = v211;
  v212 = v198 >> 8;
  v213 = (v198 >> 8) + v182;
  if (v213 >= a4)
    v214 = a4;
  else
    v214 = (v198 >> 8) + v182;
  if (v213 >= a3)
    v215 = v214;
  else
    v215 = a3;
  a1[v313] = v215;
  v216 = v197 >> 8;
  v217 = (v197 >> 8) + v273;
  if (v217 >= a4)
    v218 = a4;
  else
    v218 = (v197 >> 8) + v273;
  if (v217 >= a3)
    v219 = v218;
  else
    v219 = a3;
  a1[v319] = v219;
  v220 = v196 >> 8;
  v221 = (v196 >> 8) + v274;
  if (v221 >= a4)
    v222 = a4;
  else
    v222 = (v196 >> 8) + v274;
  if (v221 >= a3)
    v223 = v222;
  else
    v223 = a3;
  a1[v314] = v223;
  v224 = v194 >> 8;
  v225 = (v194 >> 8) + v275;
  if (v225 >= a4)
    v226 = a4;
  else
    v226 = (v194 >> 8) + v275;
  if (v225 >= a3)
    v227 = v226;
  else
    v227 = a3;
  a1[v174] = v227;
  v228 = v192 >> 8;
  if (v228 + v276 >= a4)
    v229 = a4;
  else
    v229 = v228 + v276;
  if (v228 + v276 >= a3)
    v230 = v229;
  else
    v230 = a3;
  a1[v315] = v230;
  if (v183 + v297 >= a4)
    v231 = a4;
  else
    v231 = v183 + v297;
  if (v183 + v297 >= a3)
    v232 = v231;
  else
    v232 = a3;
  a1[v277] = v232;
  if (v298 + v184 >= a4)
    v233 = a4;
  else
    v233 = v298 + v184;
  if (v298 + v184 >= a3)
    v234 = v233;
  else
    v234 = a3;
  a1[v316] = v234;
  if ((int)result + v299 >= a4)
    v235 = a4;
  else
    v235 = result + v299;
  if ((int)result + v299 >= a3)
    v236 = v235;
  else
    v236 = a3;
  a1[v278] = v236;
  if (v187 + v300 >= a4)
    v237 = a4;
  else
    v237 = v187 + v300;
  if (v187 + v300 >= a3)
    v238 = v237;
  else
    v238 = a3;
  a1[v317] = v238;
  if (v187 - v300 >= a4)
    v239 = a4;
  else
    v239 = v187 - v300;
  if (v187 - v300 >= a3)
    v240 = v239;
  else
    v240 = a3;
  *(int *)((char *)a1 + v279) = v240;
  if ((int)result - v299 >= a4)
    v241 = a4;
  else
    v241 = result - v299;
  if ((int)result - v299 >= a3)
    v242 = v241;
  else
    v242 = a3;
  a1[v305] = v242;
  if (v184 - v298 >= a4)
    v243 = a4;
  else
    v243 = v184 - v298;
  if (v184 - v298 >= a3)
    v244 = v243;
  else
    v244 = a3;
  a1[v280] = v244;
  if (v183 - v297 >= a4)
    v245 = a4;
  else
    v245 = v183 - v297;
  if (v183 - v297 >= a3)
    v246 = v245;
  else
    v246 = a3;
  a1[v304] = v246;
  v247 = v276 - v228;
  if (v247 >= a4)
    v248 = a4;
  else
    v248 = v247;
  if (v247 >= a3)
    v249 = v248;
  else
    v249 = a3;
  a1[v281] = v249;
  v250 = v275 - v224;
  if (v275 - v224 >= a4)
    v251 = a4;
  else
    v251 = v275 - v224;
  if (v250 >= a3)
    v252 = v251;
  else
    v252 = a3;
  a1[v308] = v252;
  if (v274 - v220 >= a4)
    v253 = a4;
  else
    v253 = v274 - v220;
  if (v274 - v220 >= a3)
    v254 = v253;
  else
    v254 = a3;
  a1[v282] = v254;
  if (v273 - v216 >= a4)
    v255 = a4;
  else
    v255 = v273 - v216;
  if (v273 - v216 >= a3)
    v256 = v255;
  else
    v256 = a3;
  a1[v301] = v256;
  if (v182 - v212 >= a4)
    v257 = a4;
  else
    v257 = v182 - v212;
  if (v182 - v212 >= a3)
    v258 = v257;
  else
    v258 = a3;
  a1[v283] = v258;
  if (v181 - v209 >= a4)
    v259 = a4;
  else
    v259 = v181 - v209;
  if (v181 - v209 >= a3)
    v260 = v259;
  else
    v260 = a3;
  a1[v309] = v260;
  if (v180 - v205 >= a4)
    v261 = a4;
  else
    v261 = v180 - v205;
  if (v180 - v205 >= a3)
    v262 = v261;
  else
    v262 = a3;
  a1[v284] = v262;
  if (v179 - v201 >= a4)
    v263 = a4;
  else
    v263 = v179 - v201;
  if (v179 - v201 >= a3)
    v264 = v263;
  else
    v264 = a3;
  a1[v302] = v264;
  if (v178 - v318 >= a4)
    v265 = a4;
  else
    v265 = v178 - v318;
  if (v178 - v318 >= a3)
    v266 = v265;
  else
    v266 = a3;
  a1[v288] = v266;
  if (v286 - v287 >= a4)
    v267 = a4;
  else
    v267 = v286 - v287;
  if (v286 - v287 >= a3)
    v268 = v267;
  else
    v268 = a3;
  a1[v303] = v268;
  if (v290 - v291 >= a4)
    v269 = a4;
  else
    v269 = v290 - v291;
  if (v290 - v291 >= a3)
    v270 = v269;
  else
    v270 = a3;
  a1[v307] = v270;
  if (v296 - v295 >= a4)
    v271 = a4;
  else
    v271 = v296 - v295;
  if (v296 - v295 >= a3)
    v272 = v271;
  else
    v272 = a3;
  a1[v310] = v272;
  return result;
}

uint64_t dav1d_inv_dct64_1d_c(int *a1, uint64_t a2, int a3, int a4)
{
  const float *v8;
  const float *v9;
  const float *v10;
  const float *v11;
  const float *v12;
  const float *v13;
  const float *v14;
  const float *v15;
  const float *v16;
  const float *v17;
  int32x2_t v18;
  const float *v19;
  int32x2_t v20;
  int32x2_t v21;
  int32x2_t v22;
  int32x2_t v23;
  signed __int32 v24;
  int32x2_t v25;
  signed __int32 v26;
  int32x2_t v27;
  signed __int32 v28;
  int32x2_t v29;
  signed __int32 v30;
  int32x2_t v31;
  int32x2_t v32;
  int32x2_t v33;
  int32x2_t v34;
  int32x2_t v35;
  int32x2_t v36;
  int8x8_t v37;
  int32x2_t v38;
  int32x2_t v39;
  int32x2_t v40;
  int32x2_t v41;
  int32x2_t v42;
  int32x2_t v43;
  int32x2_t v44;
  int32x2_t v45;
  int32x2_t v46;
  int32x2_t v47;
  int32x2_t v48;
  int32x2_t v49;
  int32x2_t v50;
  int32x2_t v51;
  __int32 v52;
  int32x2_t v53;
  int32x2_t v54;
  int32x2_t v55;
  int32x2_t v56;
  int32x2_t v57;
  int32x2_t v58;
  int32x2_t v59;
  int32x2_t v60;
  int32x2_t v61;
  int8x8_t v62;
  int32x2_t v63;
  int32x2_t v64;
  int8x8_t v65;
  int32x2_t v66;
  int32x2_t v67;
  int32x2_t v68;
  int32x2_t v69;
  int32x2_t v70;
  __int32 v71;
  int32x2_t v72;
  int32x2_t v73;
  int32x2_t v74;
  int32x2_t v75;
  int32x2_t v76;
  int32x2_t v77;
  const float *v78;
  int32x2_t v79;
  int32x2_t v80;
  int32x2_t v81;
  int32x2_t v82;
  int32x2_t v83;
  int32x2_t v84;
  int32x2_t v85;
  int32x2_t v86;
  int32x2_t v87;
  int32x2_t v88;
  int32x2_t v89;
  int32x2_t v90;
  int32x2_t v91;
  int32x2_t v92;
  int32x2_t v93;
  int32x2_t v94;
  int32x2_t v95;
  int32x2_t v96;
  int32x2_t v97;
  int32x2_t v98;
  int32x2_t v99;
  int32x2_t v100;
  int32x2_t v101;
  int32x2_t v102;
  int32x2_t v103;
  int32x2_t v104;
  int32x2_t v105;
  int32x2_t v106;
  int32x2_t v107;
  int32x2_t v108;
  int32x2_t v109;
  int32x2_t v110;
  int32x2_t v111;
  int32x2_t v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  int32x2_t v116;
  int32x2_t v117;
  int32x2_t v118;
  int32x2_t v119;
  int32x2_t v120;
  int32x2_t v121;
  int32x2_t v122;
  int32x2_t v123;
  int32x2_t v124;
  int32x2_t v125;
  int32x2_t v126;
  int32x2_t v127;
  int8x8_t v128;
  int32x2_t v129;
  unsigned int v130;
  int32x2_t v131;
  int32x2_t v132;
  int32x2_t v133;
  int32x2_t v134;
  int32x2_t v135;
  int32x2_t v136;
  int32x2_t v137;
  int32x2_t v138;
  int32x2_t v139;
  int8x8_t v140;
  int32x2_t v141;
  int32x2_t v142;
  int32x2_t v143;
  int32x2_t v144;
  int32x2_t v145;
  int32x2_t v146;
  int32x2_t v147;
  int32x2_t v148;
  int32x2_t v149;
  int32x2_t v150;
  int32x2_t v151;
  int32x2_t v152;
  int32x2_t v153;
  int32x2_t v154;
  int32x2_t v155;
  int32x2_t v156;
  int32x2_t v157;
  __int32 v158;
  int32x2_t v159;
  int32x2_t v160;
  __int32 v161;
  int32x2_t v162;
  __int32 v163;
  __int32 v164;
  int32x2_t v165;
  int32x2_t v166;
  int32x2_t v167;
  int32x2_t v168;
  int32x2_t v169;
  int32x2_t v170;
  int32x2_t v171;
  int32x2_t v172;
  int32x2_t v173;
  int32x2_t v174;
  int32x2_t v175;
  int32x2_t v176;
  int32x2_t v177;
  int32x2_t v178;
  int32x2_t v179;
  int32x2_t v180;
  int32x2_t v181;
  int32x2_t v182;
  int32x2_t v183;
  int32x2_t v184;
  unsigned __int32 v185;
  int32x2_t v186;
  int32x2_t v187;
  int32x2_t v188;
  int32x2_t v189;
  int32x2_t v190;
  int32x2_t v191;
  int32x2_t v192;
  int32x2_t v193;
  int32x2_t v194;
  int32x2_t v195;
  int32x2_t v196;
  int32x2_t v197;
  int32x2_t v198;
  int32x2_t v199;
  int32x2_t v200;
  int32x2_t v201;
  int32x2_t v202;
  int32x2_t v203;
  int32x2_t v204;
  int32x2_t v205;
  int32x2_t v206;
  int8x8_t v207;
  int32x2_t v208;
  int32x2_t v209;
  int32x2_t v210;
  int32x2_t v211;
  int32x2_t v212;
  int8x8_t v213;
  int32x2_t v214;
  __int32 v215;
  int32x2_t v216;
  int32x2_t v217;
  int32x2_t v218;
  int8x8_t v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int32x2_t v230;
  int32x2_t v231;
  int32x2_t v232;
  int8x8_t v233;
  int32x2_t v234;
  int v235;
  int32x2_t v236;
  int32x2_t v237;
  int v238;
  int v239;
  int32x2_t v240;
  int32x2_t v241;
  int32x2_t v242;
  int v243;
  int v244;
  int32x2_t v245;
  int32x2_t v246;
  int v247;
  int v248;
  int32x2_t v249;
  int32x2_t v250;
  int32x2_t v251;
  int v252;
  int v253;
  int32x2_t v254;
  int v255;
  int v256;
  int32x2_t v257;
  int32x2_t v258;
  int v259;
  int v260;
  int32x2_t v261;
  unsigned __int32 v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  BOOL v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  int v303;
  int v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int32x2_t v331;
  int8x8_t v332;
  __int32 v333;
  __int32 v334;
  int v335;
  int v336;
  int32x2_t v337;
  int8x8_t v338;
  __int32 v339;
  __int32 v340;
  int v341;
  int v342;
  int32x2_t v343;
  int8x8_t v344;
  __int32 v345;
  __int32 v346;
  int v347;
  int v348;
  int32x2_t v349;
  int8x8_t v350;
  __int32 v351;
  __int32 v352;
  int v353;
  int v354;
  int32x2_t v355;
  int8x8_t v356;
  __int32 v357;
  __int32 v358;
  int v359;
  int v360;
  int32x2_t v361;
  int8x8_t v362;
  int v363;
  int v364;
  int v365;
  int v366;
  int v367;
  int v368;
  int v369;
  int v370;
  int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  int v376;
  int v377;
  int v378;
  int v379;
  int v380;
  int v381;
  int v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  int v389;
  uint64_t result;
  int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  int v425;
  int v426;
  int v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  int v434;
  int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  int v448;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  int v457;
  int v458;
  int v459;
  int v460;
  int v461;
  int v462;
  int v463;
  int v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  int v471;
  int v472;
  int v473;
  uint64_t v474;
  int v475;
  int v476;
  int v477;
  int v478;
  int v479;
  uint64_t v480;
  int v481;
  uint64_t v482;
  uint64_t v483;
  int v484;
  int v485;
  int v486;
  uint64_t v487;
  int v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  int v496;
  int v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  int v501;
  int v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  int v506;
  int v507;
  uint64_t v508;
  int v509;
  int v510;
  unsigned int v511;
  uint64_t v512;
  int v513;
  int v514;
  int v515;
  int v516;
  int v517;
  int v518;
  int v519;
  int v520;
  uint64_t v521;
  int v522;
  uint64_t v523;
  int v524;
  uint64_t v525;
  int v526;
  uint64_t v527;
  int v528;
  uint64_t v529;
  uint64_t v530;
  int v531;
  uint64_t v532;
  int v533;
  uint64_t v534;
  int v535;
  uint64_t v536;
  int v537;
  uint64_t v538;
  int v539;
  uint64_t v540;
  int v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  int v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  int v553;
  int v554;
  int v555;
  int v556;
  int v557;
  int v558;
  int v559;
  int v560;
  int v561;
  int v562;
  int v563;
  int v564;
  int v565;
  int v566;
  int v567;
  int v568;
  int v569;
  int v570;
  int32x2_t v571;
  int v572;
  int v573;
  __int32 v574;
  int32x2_t v575;
  int v576;
  int32x2_t v577;
  int v578;

  inv_dct32_1d_internal_c(a1, 2 * a2, a3, a4, 1);
  v530 = a2;
  v8 = (const float *)&a1[a2];
  v521 = 3 * a2;
  v9 = (const float *)&a1[3 * a2];
  v523 = 5 * a2;
  v10 = (const float *)&a1[5 * a2];
  v525 = 7 * a2;
  v527 = 9 * a2;
  v532 = 11 * a2;
  v11 = (const float *)&a1[11 * a2];
  v534 = 13 * a2;
  v12 = (const float *)&a1[13 * a2];
  v536 = 15 * a2;
  v13 = (const float *)&a1[15 * a2];
  v538 = 17 * a2;
  v14 = (const float *)&a1[17 * a2];
  v540 = 19 * a2;
  v15 = (const float *)&a1[19 * a2];
  v543 = 21 * a2;
  v16 = (const float *)&a1[21 * a2];
  v544 = 23 * a2;
  v545 = 25 * a2;
  v546 = 27 * a2;
  v17 = (const float *)&a1[27 * a2];
  v542 = 29 * a2;
  v18.i32[0] = a1[9 * a2];
  v18.i32[1] = a1[23 * a2];
  v19 = (const float *)&a1[29 * a2];
  v111 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, v18, (int32x2_t)0xFFFFF77100000381), 0xCuLL);
  v20.i32[0] = a1[7 * a2];
  v20.i32[1] = a1[25 * a2];
  v21 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, v20, (int32x2_t)0x937FFFFFD44), 0xCuLL);
  v22 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, v20, (int32x2_t)0xD1500000FC4), 0xCuLL);
  v23 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, v18, (int32x2_t)0xD8500000F9CLL), 0xCuLL);
  v24 = vsub_s32(v111, vdup_lane_s32(v111, 1)).u32[0];
  v25 = (int32x2_t)vld1_dup_f32(v9);
  v26 = vsub_s32(v21, vdup_lane_s32(v21, 1)).u32[0];
  v27 = (int32x2_t)vld1_dup_f32(v19);
  v28 = vsub_s32(v22, vdup_lane_s32(v22, 1)).u32[0];
  v29 = (int32x2_t)vld1_dup_f32(v15);
  v30 = vsub_s32(v23, vdup_lane_s32(v23, 1)).u32[0];
  v31 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, v25, (int32x2_t)0xFFFFFED300000FF5), 0xCuLL);
  v32 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, v27, (int32x2_t)0xA7300000C1ELL), 0xCuLL);
  v33 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, v29, (int32x2_t)0xE4BFFFFF8CELL), 0xCuLL);
  v34 = (int32x2_t)vld1_dup_f32(v12);
  v35 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, v34, (int32x2_t)0xF3100000505), 0xCuLL);
  v36 = vsub_s32(v31, v32);
  v37 = (int8x8_t)vdup_n_s32(a3);
  v38 = vdup_n_s32(a4);
  v39 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v36), v37, (int8x8_t)vmin_s32(v36, v38));
  v40 = vsub_s32(v35, v33);
  v41 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v40), v37, (int8x8_t)vmin_s32(v40, v38));
  v42 = vadd_s32(vmla_lane_s32(vmul_lane_s32((int32x2_t)0xB0FFFFFB5BLL, v39, 1), (int32x2_t)0xFFFFFB5BFFFFFF50, v39, 0), (int32x2_t)0x80000000800);
  v575 = vsub_s32(vshr_n_s32(v42, 0xCuLL), v39);
  v43 = vsra_n_s32(v39, v42, 0xCuLL);
  v44 = vsra_n_s32(v41, vadd_s32(vmla_lane_s32(vmul_n_s32((int32x2_t)0xFFFFFB5BFFFFFF50, v41.i32[0]), (int32x2_t)0xFFFFFF50000004A5, v41, 1), (int32x2_t)0x80000000800), 0xCuLL);
  v45 = vsub_s32((int32x2_t)__PAIR64__(v575.u32[1], v43.u32[0]), v44);
  v46 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v45), v37, (int8x8_t)vmin_s32(v45, v38));
  v47 = vdup_n_s32(0xFFFFFB8E);
  v577 = vmul_s32(v46, v47);
  v48 = (int32x2_t)vld1_dup_f32(v11);
  v49 = (int32x2_t)vld1_dup_f32(v16);
  v50 = vdup_n_s32(0x6A7u);
  v51.i32[0] = vmla_s32((int32x2_t)0x40000000400, v46, v50).u32[0];
  v574 = vmul_s32(v46, vdup_n_s32(0xFFFFF959)).i32[1];
  v52 = v46.i32[0];
  v53 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, v48, (int32x2_t)0xF6CFFFFFBBCLL), 0xCuLL);
  v54 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, v49, (int32x2_t)0xDEC000007E3), 0xCuLL);
  v55 = (int32x2_t)vld1_dup_f32(v17);
  v56 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, v55, (int32x2_t)0xFFFFF62800000C9DLL), 0xCuLL);
  v57 = (int32x2_t)vld1_dup_f32(v10);
  v58 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, v57, (int32x2_t)0x1F500000FE1), 0xCuLL);
  v59 = vsub_s32(v53, v54);
  v60 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v59), v37, (int8x8_t)vmin_s32(v59, v38));
  v69 = vsub_s32(v58, v56);
  v61 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v69), v37, (int8x8_t)vmin_s32(v69, v38));
  v62 = (int8x8_t)vsub_s32(vshr_n_s32(vadd_s32(vmla_lane_s32(vmul_n_s32((int32x2_t)0xFFFFF875000001E4, v60.i32[0]), (int32x2_t)0x1E40000078BLL, v60, 1), (int32x2_t)0x80000000800), 0xCuLL), v60);
  v63 = vadd_s32(vmla_lane_s32(vmul_lane_s32((int32x2_t)0x1E40000078BLL, v61, 1), (int32x2_t)0x78BFFFFFE1CLL, v61, 0), (int32x2_t)0x80000000800);
  v64 = vsub_s32(vshr_n_s32(v63, 0xCuLL), v61);
  v65 = (int8x8_t)vsra_n_s32(v61, v63, 0xCuLL);
  v66 = vsub_s32((int32x2_t)__PAIR64__(v64.u32[1], v65.u32[0]), (int32x2_t)v62);
  v67 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v66), v37, (int8x8_t)vmin_s32(v66, v38));
  v68 = vmul_s32(v67, v50);
  v69.i32[0] = vmla_s32((int32x2_t)0x40000000400, v67, vdup_n_s32(0x472u)).u32[0];
  v70 = vmul_s32(v67, v47);
  v71 = v67.i32[0];
  v72 = vadd_s32(vzip2_s32(v32, v56), vzip2_s32(v31, v58));
  v73 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v72), v37, (int8x8_t)vmin_s32(v72, v38));
  v74 = vadd_s32(vzip1_s32(v33, v54), vzip1_s32(v35, v53));
  v75 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v74), v37, (int8x8_t)vmin_s32(v74, v38));
  v529 = 31 * a2;
  v76 = vzip2_s32(v33, v54);
  v77 = (int32x2_t)vld1_dup_f32(v13);
  v78 = (const float *)&a1[31 * a2];
  v79 = vadd_s32(v76, vzip2_s32(v35, v53));
  v80 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v79), v37, (int8x8_t)vmin_s32(v79, v38));
  v81 = vadd_s32(vzip1_s32(v32, v56), vzip1_s32(v31, v58));
  v82 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v81), v37, (int8x8_t)vmin_s32(v81, v38));
  v83 = vsub_s32(v73, v75);
  v84 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v83), v37, (int8x8_t)vmin_s32(v83, v38));
  v85 = vsub_s32(v82, v80);
  v86 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v85), v37, (int8x8_t)vmin_s32(v85, v38));
  v87 = vmla_s32(vmul_s32(v84, (int32x2_t)0xFFFFFB8EFFFFF959), v86, (int32x2_t)0x6A7FFFFFB8ELL);
  v88 = vmla_s32(vmul_s32(v84, (int32x2_t)0x6A7FFFFFB8ELL), v86, (int32x2_t)0x472000006A7);
  v89 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, v77, (int32x2_t)0xEEEFFFFFA3ELL), 0xCuLL);
  v90 = (int32x2_t)vld1_dup_f32(v14);
  v91 = vmla_s32((int32x2_t)0x80000000800, v90, (int32x2_t)0xEA10000067CLL);
  v92 = (int32x2_t)vld1_dup_f32(v78);
  v93 = vshr_n_s32(v91, 0xCuLL);
  v94 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, v92, (int32x2_t)0xFFFFF4F800000B97), 0xCuLL);
  v95 = (int32x2_t)vld1_dup_f32(v8);
  v96 = vshr_n_s32(vmla_s32((int32x2_t)0x80000000800, v95, (int32x2_t)0x6500000FFFLL), 0xCuLL);
  v97 = vsub_s32(v89, v93);
  v98 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v97), v37, (int8x8_t)vmin_s32(v97, v38));
  v99 = vsub_s32(v96, v94);
  v100 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v99), v37, (int8x8_t)vmin_s32(v99, v38));
  v101 = vsub_s32(vshr_n_s32(vadd_s32(vmla_lane_s32(vmul_n_s32((int32x2_t)0xFFFFFE6F00000014, v98.i32[0]), (int32x2_t)0x1400000191, v98, 1), (int32x2_t)0x80000000800), 0xCuLL), v98);
  v102 = vadd_s32(vmla_lane_s32(vmul_lane_s32((int32x2_t)0x1400000191, v100, 1), (int32x2_t)0x191FFFFFFECLL, v100, 0), (int32x2_t)0x80000000800);
  v103 = vsub_s32(vshr_n_s32(v102, 0xCuLL), v100);
  v104 = vsra_n_s32(v100, v102, 0xCuLL);
  v105 = vzip1_s32(v104, v43);
  v104.i32[1] = v103.i32[1];
  v106 = vsub_s32(v104, v101);
  v107 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v106), v37, (int8x8_t)vmin_s32(v106, v38));
  v104.i32[0] = vdup_lane_s32(v94, 1).u32[0];
  v104.i32[1] = v21.i32[1];
  v108 = vadd_s32(v104, vzip1_s32(vdup_lane_s32(v96, 1), v21));
  v109 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v108), v37, (int8x8_t)vmin_s32(v108, v38));
  v110 = vadd_s32((int32x2_t)__PAIR64__(v111.u32[1], v93.u32[0]), vzip1_s32(v89, v111));
  v111.i32[0] = vdup_lane_s32(v93, 1).u32[0];
  v112 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v110), v37, (int8x8_t)vmin_s32(v110, v38));
  if (v24 >= a4)
    v113 = a4;
  else
    v113 = v24;
  if (v24 < a3)
    v113 = a3;
  if (v26 >= a4)
    v114 = a4;
  else
    v114 = v26;
  if (v26 < a3)
    v114 = a3;
  if (v28 >= a4)
    v115 = a4;
  else
    v115 = v28;
  if (v28 < a3)
    v115 = a3;
  v111.i32[1] = v23.i32[1];
  v116 = vadd_s32(v111, vzip1_s32(vdup_lane_s32(v89, 1), v23));
  v117 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v116), v37, (int8x8_t)vmin_s32(v116, v38));
  v94.i32[1] = v22.i32[1];
  v118 = vadd_s32(v94, vzip1_s32(v96, v22));
  v119 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v118), v37, (int8x8_t)vmin_s32(v118, v38));
  v120 = vsub_s32(v109, v112);
  v121 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v120), v37, (int8x8_t)vmin_s32(v120, v38));
  v122 = vadd_s32(vzip2_s32(v109, v73), vzip2_s32(v112, v75));
  v123 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v122), v37, (int8x8_t)vmin_s32(v122, v38));
  v124 = vadd_s32(vzip2_s32(v119, v82), vzip2_s32(v117, v80));
  v125 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v124), v37, (int8x8_t)vmin_s32(v124, v38));
  v126 = vzip1_s32(v109, v73);
  v127 = vzip1_s32(v112, v75);
  v128 = (int8x8_t)vshr_n_s32(vadd_s32(vmla_s32(vmul_s32(vdup_n_s32(v114), (int32x2_t)0xFFFFFAEDFFFFF9D1), vdup_n_s32(v115), (int32x2_t)0x62FFFFFFAEDLL), (int32x2_t)0x40000000400), 0xBuLL);
  v129 = (int32x2_t)vext_s8(v128, v65, 4uLL);
  if (v30 >= a4)
    v130 = a4;
  else
    v130 = v30;
  if (v30 < a3)
    v130 = a3;
  v571 = vadd_s32(v87, (int32x2_t)0x40000000400);
  v131 = vadd_s32(v88, (int32x2_t)0x40000000400);
  v132 = vadd_s32(v126, v127);
  v133 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v132), v37, (int8x8_t)vmin_s32(v132, v38));
  v134 = vadd_s32(vzip1_s32(v119, v82), vzip1_s32(v117, v80));
  v135 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v134), v37, (int8x8_t)vmin_s32(v134, v38));
  v136 = vsub_s32(v133, v123);
  v137 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v136), v37, (int8x8_t)vmin_s32(v136, v38));
  v138 = vadd_s32(vzip2_s32(v103, v575), vzip2_s32(v101, v44));
  v139 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v138), v37, (int8x8_t)vmin_s32(v138, v38));
  v140 = (int8x8_t)vshr_n_s32(vadd_s32(vmla_s32(vmul_s32(vdup_n_s32(v113), (int32x2_t)0x62FFFFFFAEDLL), vdup_n_s32(v130), (int32x2_t)0x5130000062FLL), (int32x2_t)0x40000000400), 0xBuLL);
  v141 = vzip1_s32(v101, v44);
  v142 = vsub_s32((int32x2_t)v128, (int32x2_t)v140);
  v143 = vadd_s32(v105, v141);
  v144 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v143), v37, (int8x8_t)vmin_s32(v143, v38));
  v128.i32[1] = v64.i32[1];
  v145 = (int32x2_t)vext_s8(v140, v62, 4uLL);
  v140.i32[1] = v62.i32[1];
  v146 = vadd_s32((int32x2_t)v128, (int32x2_t)v140);
  v147 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v146), v37, (int8x8_t)vmin_s32(v146, v38));
  v148 = vadd_s32(v129, v145);
  v149 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v148), v37, (int8x8_t)vmin_s32(v148, v38));
  v150 = vsub_s32(v139, v147);
  v151 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v150), v37, (int8x8_t)vmin_s32(v150, v38));
  v152 = vsub_s32(v144, v149);
  v153 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v152), v37, (int8x8_t)vmin_s32(v152, v38));
  v154 = vshr_n_s32(vadd_s32(vmla_s32(vmul_s32(v151, (int32x2_t)0xFFFFF9E100000138), v153, (int32x2_t)0x1380000061FLL), (int32x2_t)0x80000000800), 0xCuLL);
  v155 = vadd_s32(vmla_s32(vmul_s32(v151, (int32x2_t)0x1380000061FLL), v153, (int32x2_t)0x61FFFFFFEC8), (int32x2_t)0x80000000800);
  v156 = vsub_s32(vshr_n_s32(v155, 0xCuLL), v151);
  v151.i32[1] = v153.i32[1];
  v157 = vsub_s32(v154, v151);
  v158 = v157.i32[1];
  v159 = vsub_s32(v135, v125);
  v160 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v159), v37, (int8x8_t)vmin_s32(v159, v38));
  v161 = v157.i32[0];
  v162 = vsub_s32(vshr_n_s32(vadd_s32(vmla_s32(vmul_s32(v137, (int32x2_t)0xFFFFF9E100000138), v160, (int32x2_t)0x1380000061FLL), (int32x2_t)0x80000000800), 0xCuLL), (int32x2_t)__PAIR64__(v160.u32[1], v137.u32[0]));
  v163 = v162.i32[1];
  v164 = v162.i32[0];
  v165 = vsub_s32(v119, v117);
  v166 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v165), v37, (int8x8_t)vmin_s32(v165, v38));
  v167 = vadd_s32(vmla_s32(vmul_s32(v121, (int32x2_t)0x4F0000031FLL), v166, (int32x2_t)0x31FFFFFFFB1), (int32x2_t)0x80000000800);
  v168 = vsub_s32(vshr_n_s32(v167, 0xCuLL), v121);
  v169 = vshr_n_s32(vadd_s32(vmla_s32(vmul_s32(v121, (int32x2_t)0xFFFFFCE10000004FLL), v166, (int32x2_t)0x4F0000031FLL), (int32x2_t)0x80000000800), 0xCuLL);
  v121.i32[1] = v166.i32[1];
  v170 = vsub_s32(v169, v121);
  v171 = vsra_n_s32(v166, v167, 0xCuLL);
  v51.i32[1] = v574;
  v172.i32[0] = vdup_lane_s32(v577, 1).u32[0];
  v172.i32[1] = -1138 * v52 + 1024;
  v173 = vshr_n_s32(vadd_s32(v51, v172), 0xBuLL);
  v69.i32[1] = v70.i32[1];
  v172.i32[0] = vdup_lane_s32(v68, 1).u32[0];
  v172.i32[1] = 1703 * v71 + 1024;
  v174 = vadd_s32(v69, v172);
  v175 = vsub_s32(v173, vshr_n_s32(v174, 0xBuLL));
  v176 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v175), v37, (int8x8_t)vmin_s32(v175, v38));
  v177 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v142), v37, (int8x8_t)vmin_s32(v142, v38));
  v178 = vsub_s32(vshr_n_s32(vadd_s32(vmla_lane_s32(vmul_n_s32((int32x2_t)0xFFFFFCE10000004FLL, v177.i32[0]), (int32x2_t)0x4F0000031FLL, v177, 1), (int32x2_t)0x80000000800), 0xCuLL), v177);
  v179.i32[0] = vmla_s32((int32x2_t)0x80000000800, v107, (int32x2_t)0x4E0000004ELL).u32[0];
  v179.i32[1] = vmul_s32(v107, (int32x2_t)0x4F0000004FLL).i32[1];
  v177.i32[0] = vdup_lane_s32(vmul_s32(v107, vdup_n_s32(0x31Fu)), 1).u32[0];
  v177.i32[1] = 799 * v107.i32[0] + 2048;
  v180 = vadd_s32(v179, v177);
  v181 = vsub_s32(vshr_n_s32(v180, 0xCuLL), v107);
  v182.i32[0] = vsra_n_s32(v107, v180, 0xCuLL).u32[0];
  v182.i32[1] = v181.i32[1];
  v183 = vsub_s32(v182, v178);
  v184 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v183), v37, (int8x8_t)vmin_s32(v183, v38));
  v185 = vsra_n_s32(v153, v155, 0xCuLL).u32[0];
  v186 = vadd_s32(vzip2_s32(v133, v135), vzip2_s32(v123, v125));
  v187 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v186), v37, (int8x8_t)vmin_s32(v186, v38));
  v188 = vadd_s32(vzip1_s32(v133, v135), vzip1_s32(v123, v125));
  v189 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v188), v37, (int8x8_t)vmin_s32(v188, v38));
  v190 = vadd_s32(vzip2_s32(v139, v144), vzip2_s32(v147, v149));
  v191 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v190), v37, (int8x8_t)vmin_s32(v190, v38));
  v192 = vadd_s32(vzip1_s32(v139, v144), vzip1_s32(v147, v149));
  v193 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v192), v37, (int8x8_t)vmin_s32(v192, v38));
  v194 = vshr_n_s32(v571, 0xBuLL);
  v195 = vshr_n_s32(v131, 0xBuLL);
  v196 = vsra_n_s32(v173, v174, 0xBuLL);
  v197 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v196), v37, (int8x8_t)vmin_s32(v196, v38));
  v198 = vadd_s32(v182, v178);
  v199 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v198), v37, (int8x8_t)vmin_s32(v198, v38));
  v200 = vadd_s32(vzip1_s32(v194, v195), vzip2_s32(v194, v195));
  v201 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v200), v37, (int8x8_t)vmin_s32(v200, v38));
  v202 = vzip1_s32(v170, v171);
  v203 = vzip2_s32(v170, v168);
  v204 = vsub_s32(vzip1_s32(v195, v194), vzip2_s32(v195, v194));
  v205 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v204), v37, (int8x8_t)vmin_s32(v204, v38));
  v206 = vsub_s32(v202, v203);
  v207 = (int8x8_t)vcgt_s32((int32x2_t)v37, v206);
  v208 = (int32x2_t)vbsl_s8(v207, v37, (int8x8_t)vmin_s32(v206, v38));
  v207.i32[0] = -312;
  v209 = vadd_s32(vmla_s32(vmul_s32(v137, (int32x2_t)0x1380000061FLL), v160, (int32x2_t)0x61FFFFFFEC8), (int32x2_t)0x80000000800);
  v210 = vrev64_s32(v184);
  v211 = vadd_s32(vmla_lane_s32(vmul_lane_s32((int32x2_t)0x138FFFFF9E1, v205, 1), (int32x2_t)0x61F00000138, v205, 0), (int32x2_t)0x80000000800);
  v212 = vadd_s32(vmla_lane_s32(vmul_n_s32((int32x2_t)0x61F00000138, v208.i32[0]), (int32x2_t)0xFFFFFEC80000061FLL, v208, 1), (int32x2_t)0x80000000800);
  v213 = (int8x8_t)vmla_s32((int32x2_t)0x80000000800, v184, (int32x2_t)v207);
  v214 = vmul_s32(v184, vdup_n_s32(0x61Fu));
  v215 = v184.i32[0];
  v216 = vadd_s32(v202, v203);
  v217 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v216), v37, (int8x8_t)vmin_s32(v216, v38));
  v218 = vdup_n_s32(0x138u);
  v219 = (int8x8_t)vmul_s32(v184, v218);
  v220 = 1567 * v215 + 2048;
  if (v161 + v158 >= a4)
    v221 = a4;
  else
    v221 = v161 + v158;
  if (v161 + v158 >= a3)
    v222 = v221;
  else
    v222 = a3;
  v517 = v222;
  if (v164 + v163 >= a4)
    v223 = a4;
  else
    v223 = v164 + v163;
  if (v164 + v163 >= a3)
    v224 = v223;
  else
    v224 = a3;
  v515 = v224;
  v225 = v164 - v163;
  if (v225 >= a4)
    v226 = a4;
  else
    v226 = v225;
  if (v225 >= a3)
    v227 = v226;
  else
    v227 = a3;
  v228 = v161 - v158;
  if (v228 >= a4)
    v229 = a4;
  else
    v229 = v228;
  v230 = vsub_s32(vshr_n_s32(v211, 0xCuLL), v205);
  v232.i32[0] = vsub_s32(vshr_n_s32(v212, 0xCuLL), v208).u32[0];
  v231 = vsra_n_s32(v208, v212, 0xCuLL);
  v212.i32[0] = 1567;
  v232.i32[1] = v231.i32[1];
  v233 = (int8x8_t)vmla_s32((int32x2_t)0x80000000800, v176, v212);
  v234 = vdup_n_s32(0xFFFFF9E1);
  if (v228 >= a3)
    v235 = v229;
  else
    v235 = a3;
  v501 = v227;
  v502 = v235;
  v236 = (int32x2_t)vext_s8((int8x8_t)vmul_s32(v176, v234), v233, 4uLL);
  v237 = vadd_s32(v189, v187);
  if (v237.i32[0] >= a4)
    v238 = a4;
  else
    v238 = v237.i32[0];
  if (v237.i32[0] >= a3)
    v239 = v238;
  else
    v239 = a3;
  v518 = v239;
  v240 = vmul_s32(v176, v218);
  v240.i32[0] = 312 * v176.i32[0] + 2048;
  v241 = vadd_s32(v236, v240);
  v242 = vadd_s32(v193, v191);
  if (v242.i32[0] >= a4)
    v243 = a4;
  else
    v243 = v242.i32[0];
  if (v242.i32[0] >= a3)
    v244 = v243;
  else
    v244 = a3;
  v516 = v244;
  v245 = (int32x2_t)vext_s8(v219, v213, 4uLL);
  v246 = vadd_s32(v199, v197);
  if (v246.i32[1] >= a4)
    v247 = a4;
  else
    v247 = v246.i32[1];
  if (v246.i32[1] >= a3)
    v248 = v247;
  else
    v248 = a3;
  v514 = v248;
  v214.i32[0] = v220;
  v249 = vadd_s32(v245, v214);
  v245.i32[0] = vsub_s32(vshr_n_s32(v249, 0xCuLL), v210).u32[0];
  v250 = vsra_n_s32(v210, v249, 0xCuLL);
  v251 = vadd_s32(v217, v201);
  if (v251.i32[0] >= a4)
    v252 = a4;
  else
    v252 = v251.i32[0];
  if (v251.i32[0] >= a3)
    v253 = v252;
  else
    v253 = a3;
  v513 = v253;
  v245.i32[1] = v250.i32[1];
  v254 = vadd_s32(v232, v230);
  if (v254.i32[0] >= a4)
    v255 = a4;
  else
    v255 = v254.i32[0];
  if (v254.i32[0] >= a3)
    v256 = v255;
  else
    v256 = a3;
  v511 = v256;
  v257 = vsub_s32(vshr_n_s32(v241, 0xCuLL), v176);
  v258 = vadd_s32(v245, v257);
  if (v258.i32[0] >= a4)
    v259 = a4;
  else
    v259 = v258.i32[0];
  if (v258.i32[0] < a3)
    v259 = a3;
  v509 = v259;
  if ((int)(v185 - v156.i32[1]) >= a4)
    v260 = a4;
  else
    v260 = v185 - v156.i32[1];
  v261 = vsub_s32(vshr_n_s32(v209, 0xCuLL), v137);
  v262 = vsra_n_s32(v160, v209, 0xCuLL).u32[0];
  if ((int)(v185 - v156.i32[1]) >= a3)
    v263 = v260;
  else
    v263 = a3;
  v497 = v263;
  if ((int)(v262 - v261.i32[1]) >= a4)
    v264 = a4;
  else
    v264 = v262 - v261.i32[1];
  v265 = v262 + v261.i32[1];
  if ((int)(v262 - v261.i32[1]) >= a3)
    v266 = v264;
  else
    v266 = a3;
  v496 = v266;
  if (v265 >= a4)
    v267 = a4;
  else
    v267 = v262 + v261.i32[1];
  v268 = v185 + v156.i32[1];
  if (v265 >= a3)
    v269 = v267;
  else
    v269 = a3;
  v578 = v269;
  if (v268 >= a4)
    v270 = a4;
  else
    v270 = v185 + v156.i32[1];
  if (v268 >= a3)
    v271 = v270;
  else
    v271 = a3;
  v576 = v271;
  if (v258.i32[1] >= a4)
    v272 = a4;
  else
    v272 = v258.i32[1];
  if (v258.i32[1] >= a3)
    v273 = v272;
  else
    v273 = a3;
  if (v254.i32[1] >= a4)
    v274 = a4;
  else
    v274 = v254.i32[1];
  if (v254.i32[1] >= a3)
    v275 = v274;
  else
    v275 = a3;
  v568 = v275;
  if (v251.i32[1] >= a4)
    v276 = a4;
  else
    v276 = v251.i32[1];
  if (v251.i32[1] >= a3)
    v277 = v276;
  else
    v277 = a3;
  v569 = v277;
  v570 = v273;
  if (v246.i32[0] >= a4)
    v278 = a4;
  else
    v278 = v246.i32[0];
  if (v246.i32[0] < a3)
    v278 = a3;
  v572 = v278;
  if (v242.i32[1] >= a4)
    v279 = a4;
  else
    v279 = v242.i32[1];
  if (v242.i32[1] < a3)
    v279 = a3;
  v573 = v279;
  if (v237.i32[1] >= a4)
    v280 = a4;
  else
    v280 = v237.i32[1];
  if (v237.i32[1] < a3)
    v280 = a3;
  v519 = v280;
  v520 = *a1;
  v281 = v280 + *a1;
  if (v281 >= a4)
    v282 = a4;
  else
    v282 = v280 + *a1;
  v555 = v282;
  v283 = v281 < a3;
  v465 = 6 * a2;
  v468 = 10 * a2;
  v284 = 12 * a2;
  v470 = 12 * a2;
  v285 = 14 * a2;
  v474 = 14 * a2;
  v547 = 18 * a2;
  v549 = 20 * a2;
  v286 = 24 * a2;
  v482 = 24 * a2;
  v550 = 22 * a2;
  v551 = 26 * a2;
  v552 = 28 * a2;
  v287 = 30 * a2;
  v487 = 30 * a2;
  v288 = 34 * a2;
  v289 = 36 * a2;
  v489 = 34 * a2;
  v490 = 36 * a2;
  v290 = 38 * a2;
  v291 = 40 * a2;
  v491 = 38 * a2;
  v492 = 40 * a2;
  v292 = 42 * a2;
  v293 = 44 * a2;
  v493 = 42 * a2;
  v494 = 44 * a2;
  v294 = 46 * a2;
  v495 = 46 * a2;
  v295 = 48 * a2;
  v296 = 50 * a2;
  v498 = 48 * a2;
  v499 = 50 * a2;
  v297 = 52 * a2;
  v500 = 52 * a2;
  v298 = 54 * a2;
  v299 = 56 * a2;
  v503 = 54 * a2;
  v504 = 56 * a2;
  v300 = 2 * a2;
  v301 = a1[2 * a2];
  v510 = v301;
  v302 = 58 * a2;
  v505 = 58 * a2;
  v466 = 4 * a2;
  v303 = a1[4 * a2];
  v507 = v303;
  v304 = a1[6 * a2];
  v506 = v304;
  v467 = 8 * a2;
  v305 = a2;
  v306 = a1[8 * a2];
  v567 = a1[v468];
  v307 = 60 * v305;
  v508 = 60 * v305;
  v565 = a1[v285];
  v566 = a1[v284];
  v308 = 62 * v305;
  v512 = 62 * v305;
  v469 = v305 << 6;
  v309 = v305;
  v483 = v305;
  v564 = a1[16 * v305];
  v561 = a1[v547];
  v558 = a1[v549];
  v560 = a1[v550];
  v563 = a1[v286];
  v562 = a1[v551];
  v559 = a1[v552];
  v557 = a1[v287];
  if (v283)
    v310 = a3;
  else
    v310 = v555;
  v480 = v309 << 7;
  v556 = a1[32 * v309];
  v554 = a1[v288];
  v553 = a1[v289];
  v311 = a1[v290];
  v472 = a1[v291];
  v473 = a1[v292];
  v476 = a1[v293];
  v477 = a1[v294];
  v478 = a1[v295];
  v312 = a1[v296];
  v484 = a1[v297];
  v485 = a1[v298];
  v486 = a1[v299];
  v481 = a1[v302];
  v479 = a1[v307];
  v488 = a1[v308];
  *a1 = v310;
  if (v573 + v301 >= a4)
    v313 = a4;
  else
    v313 = v573 + v301;
  if (v573 + v301 >= a3)
    v314 = v313;
  else
    v314 = a3;
  a1[v530] = v314;
  if (v572 + v303 >= a4)
    v315 = a4;
  else
    v315 = v572 + v303;
  if (v572 + v303 >= a3)
    v316 = v315;
  else
    v316 = a3;
  a1[v300] = v316;
  if (v569 + v304 >= a4)
    v317 = a4;
  else
    v317 = v569 + v304;
  if (v569 + v304 >= a3)
    v318 = v317;
  else
    v318 = a3;
  a1[v521] = v318;
  if (v568 + v306 >= a4)
    v319 = a4;
  else
    v319 = v568 + v306;
  if (v568 + v306 >= a3)
    v320 = v319;
  else
    v320 = a3;
  a1[v466] = v320;
  if (v570 + v567 >= a4)
    v321 = a4;
  else
    v321 = v570 + v567;
  if (v570 + v567 >= a3)
    v322 = v321;
  else
    v322 = a3;
  a1[v523] = v322;
  if (v576 + v566 >= a4)
    v323 = a4;
  else
    v323 = v576 + v566;
  if (v576 + v566 >= a3)
    v324 = v323;
  else
    v324 = a3;
  a1[v465] = v324;
  if (v578 + v565 >= a4)
    v325 = a4;
  else
    v325 = v578 + v565;
  if (v578 + v565 >= a3)
    v326 = v325;
  else
    v326 = a3;
  a1[v525] = v326;
  v531 = (181 * (v501 + v496) + 128) >> 8;
  if (v531 + v564 >= a4)
    v327 = a4;
  else
    v327 = v531 + v564;
  if (v531 + v564 >= a3)
    v328 = v327;
  else
    v328 = a3;
  a1[v467] = v328;
  v526 = (181 * (v502 + v497) + 128) >> 8;
  if (v526 + v561 >= a4)
    v329 = a4;
  else
    v329 = v526 + v561;
  if (v526 + v561 >= a3)
    v330 = v329;
  else
    v330 = a3;
  a1[v527] = v330;
  v331 = vsub_s32(v245, v257);
  v332 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v331), v37, (int8x8_t)vmin_s32(v331, v38));
  v333 = v332.i32[1];
  v334 = v332.i32[0];
  v528 = (181 * (v332.i32[0] + v332.i32[1]) + 128) >> 8;
  if (v528 + v558 >= a4)
    v335 = a4;
  else
    v335 = v528 + v558;
  if (v528 + v558 >= a3)
    v336 = v335;
  else
    v336 = a3;
  a1[v468] = v336;
  v337 = vsub_s32(v232, v230);
  v338 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v337), v37, (int8x8_t)vmin_s32(v337, v38));
  v339 = v338.i32[1];
  v340 = v338.i32[0];
  v524 = (181 * (v338.i32[0] + v338.i32[1]) + 128) >> 8;
  if (v524 + v560 >= a4)
    v341 = a4;
  else
    v341 = v524 + v560;
  if (v524 + v560 >= a3)
    v342 = v341;
  else
    v342 = a3;
  a1[v532] = v342;
  v343 = vsub_s32(v217, v201);
  v344 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v343), v37, (int8x8_t)vmin_s32(v343, v38));
  v345 = v344.i32[1];
  v346 = v344.i32[0];
  v533 = (181 * (v344.i32[0] + v344.i32[1]) + 128) >> 8;
  if (v533 + v563 >= a4)
    v347 = a4;
  else
    v347 = v533 + v563;
  if (v533 + v563 >= a3)
    v348 = v347;
  else
    v348 = a3;
  a1[v470] = v348;
  v349 = vsub_s32(v199, v197);
  v350 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v349), v37, (int8x8_t)vmin_s32(v349, v38));
  v351 = v350.i32[1];
  v352 = v350.i32[0];
  v522 = (181 * (v350.i32[1] + v350.i32[0]) + 128) >> 8;
  if (v522 + v562 >= a4)
    v353 = a4;
  else
    v353 = v522 + v562;
  if (v522 + v562 >= a3)
    v354 = v353;
  else
    v354 = a3;
  a1[v534] = v354;
  v355 = vsub_s32(v193, v191);
  v356 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v355), v37, (int8x8_t)vmin_s32(v355, v38));
  v357 = v356.i32[1];
  v358 = v356.i32[0];
  v535 = (181 * (v356.i32[0] + v356.i32[1]) + 128) >> 8;
  if (v535 + v559 >= a4)
    v359 = a4;
  else
    v359 = v535 + v559;
  if (v535 + v559 >= a3)
    v360 = v359;
  else
    v360 = a3;
  a1[v474] = v360;
  v361 = vsub_s32(v189, v187);
  v362 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v37, v361), v37, (int8x8_t)vmin_s32(v361, v38));
  v475 = (181 * (v362.i32[0] + v362.i32[1]) + 128) >> 8;
  if (v475 + v557 >= a4)
    v363 = a4;
  else
    v363 = v475 + v557;
  if (v475 + v557 >= a3)
    v364 = v363;
  else
    v364 = a3;
  a1[v536] = v364;
  v537 = (181 * (v362.i32[1] - v362.i32[0]) + 128) >> 8;
  if (v537 + v556 >= a4)
    v365 = a4;
  else
    v365 = v537 + v556;
  if (v537 + v556 >= a3)
    v366 = v365;
  else
    v366 = a3;
  *(int *)((char *)a1 + v469) = v366;
  v471 = (181 * (v357 - v358) + 128) >> 8;
  if (v471 + v554 >= a4)
    v367 = a4;
  else
    v367 = v471 + v554;
  if (v471 + v554 >= a3)
    v368 = v367;
  else
    v368 = a3;
  a1[v538] = v368;
  v539 = (181 * (v352 - v351) + 128) >> 8;
  if (v539 + v553 >= a4)
    v369 = a4;
  else
    v369 = v539 + v553;
  if (v539 + v553 >= a3)
    v370 = v369;
  else
    v370 = a3;
  a1[v547] = v370;
  v548 = (181 * (v345 - v346) + 128) >> 8;
  if (v548 + v311 >= a4)
    v371 = a4;
  else
    v371 = v548 + v311;
  if (v548 + v311 >= a3)
    v372 = v371;
  else
    v372 = a3;
  a1[v540] = v372;
  v541 = (181 * (v339 - v340) + 128) >> 8;
  if (v541 + v472 >= a4)
    v373 = a4;
  else
    v373 = v541 + v472;
  if (v541 + v472 >= a3)
    v374 = v373;
  else
    v374 = a3;
  a1[v549] = v374;
  v375 = (181 * (v333 - v334) + 128) >> 8;
  if (v375 + v473 >= a4)
    v376 = a4;
  else
    v376 = v375 + v473;
  if (v375 + v473 >= a3)
    v377 = v376;
  else
    v377 = a3;
  a1[v543] = v377;
  v378 = (181 * (v497 - v502) + 128) >> 8;
  if (v378 + v476 >= a4)
    v379 = a4;
  else
    v379 = v378 + v476;
  if (v378 + v476 >= a3)
    v380 = v379;
  else
    v380 = a3;
  a1[v550] = v380;
  v381 = (181 * (v496 - v501) + 128) >> 8;
  if (v477 + v381 >= a4)
    v382 = a4;
  else
    v382 = v477 + v381;
  if (v477 + v381 >= a3)
    v383 = v382;
  else
    v383 = a3;
  a1[v544] = v383;
  if (v478 + v515 >= a4)
    v384 = a4;
  else
    v384 = v478 + v515;
  if (v478 + v515 >= a3)
    v385 = v384;
  else
    v385 = a3;
  a1[v482] = v385;
  if (v312 + v517 >= a4)
    v386 = a4;
  else
    v386 = v312 + v517;
  if (v312 + v517 >= a3)
    v387 = v386;
  else
    v387 = a3;
  a1[v545] = v387;
  if (v509 + v484 >= a4)
    v388 = a4;
  else
    v388 = v509 + v484;
  if (v509 + v484 >= a3)
    v389 = v388;
  else
    v389 = a3;
  a1[v551] = v389;
  result = v511;
  if ((int)(v485 + v511) >= a4)
    v391 = a4;
  else
    v391 = v485 + v511;
  if ((int)(v485 + v511) >= a3)
    v392 = v391;
  else
    v392 = a3;
  a1[v546] = v392;
  if (v486 + v513 >= a4)
    v393 = a4;
  else
    v393 = v486 + v513;
  if (v486 + v513 >= a3)
    v394 = v393;
  else
    v394 = a3;
  a1[v552] = v394;
  if (v481 + v514 >= a4)
    v395 = a4;
  else
    v395 = v481 + v514;
  if (v481 + v514 >= a3)
    v396 = v395;
  else
    v396 = a3;
  a1[v542] = v396;
  if (v479 + v516 >= a4)
    v397 = a4;
  else
    v397 = v479 + v516;
  if (v479 + v516 >= a3)
    v398 = v397;
  else
    v398 = a3;
  a1[v487] = v398;
  if (v488 + v518 >= a4)
    v399 = a4;
  else
    v399 = v488 + v518;
  if (v488 + v518 >= a3)
    v400 = v399;
  else
    v400 = a3;
  a1[v529] = v400;
  if (v488 - v518 >= a4)
    v401 = a4;
  else
    v401 = v488 - v518;
  if (v488 - v518 >= a3)
    v402 = v401;
  else
    v402 = a3;
  *(int *)((char *)a1 + v480) = v402;
  if (v479 - v516 >= a4)
    v403 = a4;
  else
    v403 = v479 - v516;
  if (v479 - v516 >= a3)
    v404 = v403;
  else
    v404 = a3;
  a1[33 * v483] = v404;
  if (v481 - v514 >= a4)
    v405 = a4;
  else
    v405 = v481 - v514;
  if (v481 - v514 >= a3)
    v406 = v405;
  else
    v406 = a3;
  a1[v489] = v406;
  if (v486 - v513 >= a4)
    v407 = a4;
  else
    v407 = v486 - v513;
  if (v486 - v513 >= a3)
    v408 = v407;
  else
    v408 = a3;
  a1[35 * v483] = v408;
  if ((int)(v485 - v511) >= a4)
    v409 = a4;
  else
    v409 = v485 - v511;
  if ((int)(v485 - v511) >= a3)
    v410 = v409;
  else
    v410 = a3;
  a1[v490] = v410;
  if (v484 - v509 >= a4)
    v411 = a4;
  else
    v411 = v484 - v509;
  if (v484 - v509 >= a3)
    v412 = v411;
  else
    v412 = a3;
  a1[37 * v483] = v412;
  if (v312 - v517 >= a4)
    v413 = a4;
  else
    v413 = v312 - v517;
  if (v312 - v517 >= a3)
    v414 = v413;
  else
    v414 = a3;
  a1[v491] = v414;
  if (v478 - v515 >= a4)
    v415 = a4;
  else
    v415 = v478 - v515;
  if (v478 - v515 >= a3)
    v416 = v415;
  else
    v416 = a3;
  a1[39 * v483] = v416;
  if (v477 - v381 >= a4)
    v417 = a4;
  else
    v417 = v477 - v381;
  if (v477 - v381 >= a3)
    v418 = v417;
  else
    v418 = a3;
  a1[v492] = v418;
  if (v476 - v378 >= a4)
    v419 = a4;
  else
    v419 = v476 - v378;
  if (v476 - v378 >= a3)
    v420 = v419;
  else
    v420 = a3;
  a1[41 * v483] = v420;
  if (v473 - v375 >= a4)
    v421 = a4;
  else
    v421 = v473 - v375;
  if (v473 - v375 >= a3)
    v422 = v421;
  else
    v422 = a3;
  a1[v493] = v422;
  if (v472 - v541 >= a4)
    v423 = a4;
  else
    v423 = v472 - v541;
  if (v472 - v541 >= a3)
    v424 = v423;
  else
    v424 = a3;
  a1[43 * v483] = v424;
  if (v311 - v548 >= a4)
    v425 = a4;
  else
    v425 = v311 - v548;
  if (v311 - v548 >= a3)
    v426 = v425;
  else
    v426 = a3;
  a1[v494] = v426;
  if (v553 - v539 >= a4)
    v427 = a4;
  else
    v427 = v553 - v539;
  if (v553 - v539 >= a3)
    v428 = v427;
  else
    v428 = a3;
  a1[45 * v483] = v428;
  if (v554 - v471 >= a4)
    v429 = a4;
  else
    v429 = v554 - v471;
  if (v554 - v471 >= a3)
    v430 = v429;
  else
    v430 = a3;
  a1[v495] = v430;
  if (v556 - v537 >= a4)
    v431 = a4;
  else
    v431 = v556 - v537;
  if (v556 - v537 >= a3)
    v432 = v431;
  else
    v432 = a3;
  a1[47 * v483] = v432;
  if (v557 - v475 >= a4)
    v433 = a4;
  else
    v433 = v557 - v475;
  if (v557 - v475 >= a3)
    v434 = v433;
  else
    v434 = a3;
  a1[v498] = v434;
  if (v559 - v535 >= a4)
    v435 = a4;
  else
    v435 = v559 - v535;
  if (v559 - v535 >= a3)
    v436 = v435;
  else
    v436 = a3;
  a1[49 * v483] = v436;
  if (v562 - v522 >= a4)
    v437 = a4;
  else
    v437 = v562 - v522;
  if (v562 - v522 >= a3)
    v438 = v437;
  else
    v438 = a3;
  a1[v499] = v438;
  if (v563 - v533 >= a4)
    v439 = a4;
  else
    v439 = v563 - v533;
  if (v563 - v533 >= a3)
    v440 = v439;
  else
    v440 = a3;
  a1[51 * v483] = v440;
  if (v560 - v524 >= a4)
    v441 = a4;
  else
    v441 = v560 - v524;
  if (v560 - v524 >= a3)
    v442 = v441;
  else
    v442 = a3;
  a1[v500] = v442;
  if (v558 - v528 >= a4)
    v443 = a4;
  else
    v443 = v558 - v528;
  if (v558 - v528 >= a3)
    v444 = v443;
  else
    v444 = a3;
  a1[53 * v483] = v444;
  if (v561 - v526 >= a4)
    v445 = a4;
  else
    v445 = v561 - v526;
  if (v561 - v526 >= a3)
    v446 = v445;
  else
    v446 = a3;
  a1[v503] = v446;
  if (v564 - v531 >= a4)
    v447 = a4;
  else
    v447 = v564 - v531;
  if (v564 - v531 >= a3)
    v448 = v447;
  else
    v448 = a3;
  a1[55 * v483] = v448;
  if (v565 - v578 >= a4)
    v449 = a4;
  else
    v449 = v565 - v578;
  if (v565 - v578 >= a3)
    v450 = v449;
  else
    v450 = a3;
  a1[v504] = v450;
  if (v566 - v576 >= a4)
    v451 = a4;
  else
    v451 = v566 - v576;
  if (v566 - v576 >= a3)
    v452 = v451;
  else
    v452 = a3;
  a1[57 * v483] = v452;
  if (v567 - v570 >= a4)
    v453 = a4;
  else
    v453 = v567 - v570;
  if (v567 - v570 >= a3)
    v454 = v453;
  else
    v454 = a3;
  a1[v505] = v454;
  if (v306 - v568 >= a4)
    v455 = a4;
  else
    v455 = v306 - v568;
  if (v306 - v568 >= a3)
    v456 = v455;
  else
    v456 = a3;
  a1[59 * v483] = v456;
  if (v506 - v569 >= a4)
    v457 = a4;
  else
    v457 = v506 - v569;
  if (v506 - v569 >= a3)
    v458 = v457;
  else
    v458 = a3;
  a1[v508] = v458;
  if (v507 - v572 >= a4)
    v459 = a4;
  else
    v459 = v507 - v572;
  if (v507 - v572 >= a3)
    v460 = v459;
  else
    v460 = a3;
  a1[61 * v483] = v460;
  if (v510 - v573 >= a4)
    v461 = a4;
  else
    v461 = v510 - v573;
  if (v510 - v573 >= a3)
    v462 = v461;
  else
    v462 = a3;
  a1[v512] = v462;
  if (v520 - v519 >= a4)
    v463 = a4;
  else
    v463 = v520 - v519;
  if (v520 - v519 >= a3)
    v464 = v463;
  else
    v464 = a3;
  a1[63 * v483] = v464;
  return result;
}

uint64_t dav1d_inv_adst4_1d_c(int *a1, uint64_t a2)
{
  return inv_adst4_1d_internal_c(a1, a2, a1, a2);
}

uint64_t inv_adst4_1d_internal_c(int *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;

  v4 = *a1;
  v5 = a1[a2];
  v6 = a1[2 * a2];
  v7 = a1[3 * a2];
  v8 = -752 * v5 + 2048;
  *a3 = v6 + v5 + v7 + ((v8 + 1321 * *a1 - 293 * v6 - 1614 * v7) >> 12);
  a3[a4] = v5 + v4 - v7 + ((v8 - 1614 * v4 - 1321 * v6 + 293 * v7) >> 12);
  result = 8 * a4;
  a3[2 * a4] = (209 * (v4 - v6 + v7) + 128) >> 8;
  a3[3 * a4] = v4 - v5 + v6 + ((752 * v5 - 293 * v4 - 1614 * v6 - 1321 * v7 + 2048) >> 12);
  return result;
}

uint64_t dav1d_inv_flipadst4_1d_c(int *a1, uint64_t a2)
{
  return inv_adst4_1d_internal_c(a1, a2, &a1[3 * a2], -a2);
}

uint64_t dav1d_inv_adst8_1d_c(int *a1, uint64_t a2, int a3, int a4)
{
  return inv_adst8_1d_internal_c(a1, a2, a3, a4, a1, a2);
}

uint64_t inv_adst8_1d_internal_c(int *a1, uint64_t a2, int a3, int a4, _DWORD *a5, uint64_t a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t result;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;

  v6 = a1[a2];
  v7 = a1[2 * a2];
  v8 = a1[3 * a2];
  v9 = a1[4 * a2];
  v10 = a1[5 * a2];
  v11 = *a1;
  v12 = a1[6 * a2];
  v13 = a1[7 * a2];
  v14 = v13 + ((-20 * v13 + 401 * v11 + 2048) >> 12);
  v15 = ((401 * v13 + 20 * v11 + 2048) >> 12) - v11;
  v16 = v10 + ((-484 * v10 + 1931 * v7 + 2048) >> 12);
  v17 = ((1931 * v10 + 484 * v7 + 2048) >> 12) - v7;
  v18 = (1583 * v9 + 1299 * v8 + 1024) >> 11;
  v19 = (-1299 * v9 + 1583 * v8 + 1024) >> 11;
  v20 = v12 + ((-176 * v12 + 1189 * v6 + 2048) >> 12);
  v21 = v6 + ((-1189 * v12 - 176 * v6 + 2048) >> 12);
  if (v14 + v18 >= a4)
    v22 = a4;
  else
    v22 = v14 + v18;
  if (v14 + v18 >= a3)
    v23 = v22;
  else
    v23 = a3;
  if (v15 + v19 >= a4)
    v24 = a4;
  else
    v24 = v15 + v19;
  if (v15 + v19 >= a3)
    v25 = v24;
  else
    v25 = a3;
  if (v20 + v16 >= a4)
    v26 = a4;
  else
    v26 = v20 + v16;
  if (v20 + v16 >= a3)
    v27 = v26;
  else
    v27 = a3;
  if (v21 + v17 >= a4)
    v28 = a4;
  else
    v28 = v21 + v17;
  if (v21 + v17 >= a3)
    v29 = v28;
  else
    v29 = a3;
  v30 = v14 - v18;
  if (v30 >= a4)
    v31 = a4;
  else
    v31 = v30;
  if (v30 >= a3)
    v32 = v31;
  else
    v32 = a3;
  v33 = v15 - v19;
  if (v33 >= a4)
    v34 = a4;
  else
    v34 = v33;
  if (v33 >= a3)
    v35 = v34;
  else
    v35 = a3;
  v36 = v16 - v20;
  if (v36 >= a4)
    v37 = a4;
  else
    v37 = v36;
  if (v36 >= a3)
    v38 = v37;
  else
    v38 = a3;
  v39 = v17 - v21;
  if (v39 >= a4)
    v40 = a4;
  else
    v40 = v39;
  if (v39 >= a3)
    v41 = v40;
  else
    v41 = a3;
  v42 = v32 + ((-312 * v32 + 1567 * v35 + 2048) >> 12);
  v43 = ((312 * v35 + 1567 * v32 + 2048) >> 12) - v35;
  v44 = v41 + ((-1567 * v38 - 312 * v41 + 2048) >> 12);
  result = (v38 + ((1567 * v41 - 312 * v38 + 2048) >> 12));
  if (v23 + v27 >= a4)
    v46 = a4;
  else
    v46 = v23 + v27;
  if (v23 + v27 >= a3)
    v47 = v46;
  else
    v47 = a3;
  *a5 = v47;
  if (v25 + v29 >= a4)
    v48 = a4;
  else
    v48 = v25 + v29;
  if (v25 + v29 >= a3)
    v49 = v48;
  else
    v49 = a3;
  a5[7 * a6] = -v49;
  v50 = v23 - v27;
  if (v23 - v27 >= a4)
    v51 = a4;
  else
    v51 = v23 - v27;
  if (v50 >= a3)
    v52 = v51;
  else
    v52 = a3;
  v53 = v25 - v29;
  if (v25 - v29 >= a4)
    v54 = a4;
  else
    v54 = v25 - v29;
  if (v53 >= a3)
    v55 = v54;
  else
    v55 = a3;
  if (v42 + v44 >= a4)
    v56 = a4;
  else
    v56 = v42 + v44;
  if (v42 + v44 >= a3)
    v57 = v56;
  else
    v57 = a3;
  a5[a6] = -v57;
  if (v43 + (int)result >= a4)
    v58 = a4;
  else
    v58 = v43 + result;
  if (v43 + (int)result >= a3)
    v59 = v58;
  else
    v59 = a3;
  a5[6 * a6] = v59;
  if (v42 - v44 >= a4)
    v60 = a4;
  else
    v60 = v42 - v44;
  if (v42 - v44 >= a3)
    v61 = v60;
  else
    v61 = a3;
  if (v43 - (int)result >= a4)
    v62 = a4;
  else
    v62 = v43 - result;
  if (v43 - (int)result >= a3)
    v63 = v62;
  else
    v63 = a3;
  a5[3 * a6] = -((181 * (v52 + v55) + 128) >> 8);
  a5[4 * a6] = (181 * (v52 - v55) + 128) >> 8;
  a5[2 * a6] = (181 * (v61 + v63) + 128) >> 8;
  a5[5 * a6] = -((181 * (v61 - v63) + 128) >> 8);
  return result;
}

uint64_t dav1d_inv_flipadst8_1d_c(int *a1, uint64_t a2, int a3, int a4)
{
  return inv_adst8_1d_internal_c(a1, a2, a3, a4, &a1[7 * a2], -a2);
}

uint64_t dav1d_inv_adst16_1d_c(__int32 *a1, uint64_t a2, signed int a3, signed int a4)
{
  return inv_adst16_1d_internal_c(a1, a2, a3, a4, a1, a2);
}

uint64_t inv_adst16_1d_internal_c(__int32 *a1, uint64_t a2, signed int a3, signed int a4, signed int *a5, uint64_t a6)
{
  unsigned int v6;
  unsigned int v7;
  __int32 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  const float *v12;
  unsigned int v13;
  const float *v14;
  __int32 v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  __int32 v21;
  __int32 v22;
  int32x2_t v23;
  __int32 v24;
  __int32 v25;
  signed int v26;
  int32x2_t v27;
  int32x2_t v28;
  __int32 v29;
  signed int v30;
  int32x2_t v31;
  int32x2_t v32;
  int32x2_t v33;
  int32x2_t v34;
  int32x2_t v35;
  int32x2_t v36;
  signed int v37;
  signed int v38;
  signed __int32 v39;
  signed int v40;
  signed int v41;
  signed int v42;
  int v43;
  int v44;
  int32x2_t v45;
  int32x2_t v46;
  int32x2_t v47;
  int32x2_t v48;
  int32x2_t v49;
  int32x2_t v50;
  int32x2_t v51;
  int32x2_t v52;
  int32x2_t v53;
  int32x2_t v54;
  int32x2_t v55;
  int32x2_t v56;
  int32x2_t v57;
  int8x8_t v58;
  int32x2_t v59;
  int32x2_t v60;
  int8x8_t v61;
  int32x2_t v62;
  int v63;
  __int32 v64;
  __int32 v65;
  signed int v66;
  signed int v67;
  __int32 v68;
  __int32 v69;
  signed int v70;
  int32x2_t v71;
  signed int v72;
  __int32 v73;
  int32x2_t v74;
  int32x2_t v75;
  int32x2_t v76;
  int32x2_t v77;
  int32x2_t v78;
  int32x2_t v79;
  int32x2_t v80;
  int32x2_t v81;
  int32x2_t v82;
  int32x2_t v83;
  int32x2_t v84;
  int32x2_t v85;
  int32x2_t v86;
  int32x2_t v87;
  int32x2_t v88;
  int32x2_t v89;
  int32x2_t v90;
  int32x2_t v91;
  int32x2_t v92;
  int32x2_t v93;
  int32x2_t v94;
  int32x2_t v95;
  int32x2_t v96;
  int32x2_t v97;
  int32x2_t v98;
  int8x8_t v99;
  int32x2_t v100;
  int8x8_t v101;
  int32x2_t v102;
  int32x2_t v103;
  int32x2_t v104;
  int32x2_t v105;
  int32x2_t v106;
  int32x2_t v107;
  int32x2_t v108;
  unsigned __int32 v109;
  signed int v110;
  signed int v111;
  signed int v112;
  signed int v113;
  signed int v114;
  signed int v115;
  signed int v116;
  signed int v117;
  signed int v118;
  int32x2_t v119;
  signed int v120;
  signed int v121;
  signed int v122;
  signed int v123;
  signed int v124;
  signed int v125;
  signed int v126;
  signed int v127;
  signed int v128;
  signed int v129;
  signed int v130;
  signed int v131;
  signed int v132;
  signed int v133;
  signed int v134;
  signed int v135;
  uint64_t result;
  signed int v137;
  signed int v138;
  signed int v139;
  signed int v140;

  v6 = a1[a2];
  v7 = a1[2 * a2];
  v8 = a1[3 * a2];
  v9 = a1[4 * a2];
  v10 = a1[5 * a2];
  v11 = a1[7 * a2];
  v12 = (const float *)&a1[6 * a2];
  v13 = a1[8 * a2];
  v14 = (const float *)&a1[9 * a2];
  v15 = a1[10 * a2];
  v16 = a1[11 * a2];
  v17 = a1[12 * a2];
  v18 = a1[13 * a2];
  v19 = a1[14 * a2];
  v20 = a1[15 * a2];
  v21 = *a1;
  v22 = v11 + ((int)(-2751 * v13 - 1061 * v11 + 2048) >> 12);
  v23 = (int32x2_t)__PAIR64__(v9, v11);
  v24 = ((int)(1751 * v16 + 393 * v9 + 2048) >> 12) - v9;
  v25 = ((int)(5 * v21 + 201 * v20 + 2048) >> 12) - v21;
  if (v25 + v22 >= a4)
    v26 = a4;
  else
    v26 = v25 + v22;
  v27 = (int32x2_t)__PAIR64__(v16, v13);
  v28.i32[0] = v21;
  v29 = v8 + ((int)(-1380 * v17 - 239 * v8 + 2048) >> 12);
  if (v25 + v22 >= a3)
    v30 = v26;
  else
    v30 = a3;
  v28.i32[1] = v8;
  v31 = vsra_n_s32(v27, vadd_s32(vmla_s32(vmul_s32(v27, (int32x2_t)0xFFFFFE77FFFFFBDBLL), v23, (int32x2_t)0x6D700000ABFLL), (int32x2_t)0x80000000800), 0xCuLL);
  v32 = vsra_n_s32((int32x2_t)__PAIR64__(v17, v20), vadd_s32(vmla_s32(vmul_s32((int32x2_t)__PAIR64__(v17, v20), (int32x2_t)0xFFFFFF11FFFFFFFBLL), v28, (int32x2_t)0x564000000C9), (int32x2_t)0x80000000800), 0xCuLL);
  v33 = vadd_s32(v32, v31);
  v34 = vdup_n_s32(a3);
  v35 = vdup_n_s32(a4);
  v36 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v34, v33), (int8x8_t)v34, (int8x8_t)vmin_s32(v33, v35));
  if (v29 + v24 >= a4)
    v37 = a4;
  else
    v37 = v29 + v24;
  if (v29 + v24 >= a3)
    v38 = v37;
  else
    v38 = a3;
  v39 = vsub_s32(v36, vdup_lane_s32(v36, 1)).u32[0];
  if (v39 >= a4)
    v40 = a4;
  else
    v40 = v39;
  if (v39 >= a3)
    v41 = v40;
  else
    v41 = a3;
  if (v30 - v38 >= a4)
    v42 = a4;
  else
    v42 = v30 - v38;
  if (v30 - v38 < a3)
    v42 = a3;
  v43 = v41 + ((-312 * v41 + 1567 * v42 + 2048) >> 12);
  v44 = ((312 * v42 + 1567 * v41 + 2048) >> 12) - v42;
  v45 = (int32x2_t)vld1_dup_f32(v14);
  v46 = (int32x2_t)vld1_dup_f32(v12);
  v47 = vmla_s32(vmul_s32(v45, (int32x2_t)0x4C40000066DLL), v46, (int32x2_t)0xFFFFF993000004C4);
  v48 = vadd_s32(v47, (int32x2_t)0x40000000400);
  v47.i32[0] = v15;
  v49 = vadd_s32(vmla_s32(vmul_s32((int32x2_t)__PAIR64__(v18, v15), (int32x2_t)0x3E3FFFFFDB9), (int32x2_t)__PAIR64__(v7, v10), (int32x2_t)0x7B0000083ALL), (int32x2_t)0x80000000800);
  v50.i32[0] = vsra_n_s32(v47, v49, 0xCuLL).u32[0];
  v50.i32[1] = vsub_s32(vshr_n_s32(v49, 0xCuLL), (int32x2_t)__PAIR64__(v7, v15)).i32[1];
  v51 = vsra_n_s32((int32x2_t)__PAIR64__(v10, v18), vadd_s32(vmla_s32(vmul_s32((int32x2_t)__PAIR64__(v15, v18), (int32x2_t)0xFFFFF7C6FFFFFF85), (int32x2_t)__PAIR64__(v10, v7), (int32x2_t)0xFFFFFDB9000003E3), (int32x2_t)0x80000000800), 0xCuLL);
  v52 = vsra_n_s32((int32x2_t)__PAIR64__(v6, v19), vadd_s32(vmla_s32(vmul_s32(vdup_n_s32(v19), (int32x2_t)0xFFFFFDA7FFFFFFD4), vdup_n_s32(v6), (int32x2_t)0xFFFFFFD400000259), (int32x2_t)0x80000000800), 0xCuLL);
  v53 = vadd_s32(v51, v50);
  v54 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v34, v53), (int8x8_t)v34, (int8x8_t)vmin_s32(v53, v35));
  v55 = vsra_n_s32(v52, v48, 0xBuLL);
  v56 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v34, v55), (int8x8_t)v34, (int8x8_t)vmin_s32(v55, v35));
  v57 = vadd_s32(vzip1_s32(v36, v56), (int32x2_t)vext_s8((int8x8_t)v36, (int8x8_t)v54, 4uLL));
  v58 = vbsl_s8((int8x8_t)vcgt_s32(v34, v57), (int8x8_t)v34, (int8x8_t)vmin_s32(v57, v35));
  v59 = vsub_s32(v54, v56);
  v56.i32[0] = v30;
  v54.i32[0] = v38;
  v60 = vadd_s32(v56, v54);
  v61 = vbsl_s8((int8x8_t)vcgt_s32(v34, v60), (int8x8_t)v34, (int8x8_t)vmin_s32(v60, v35));
  v62 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v34, v59), (int8x8_t)v34, (int8x8_t)vmin_s32(v59, v35));
  v63 = v62.i32[1] + ((-1567 * v62.i32[0] - 312 * v62.i32[1] + 2048) >> 12);
  v64 = v58.i32[1];
  v65 = v58.i32[0];
  if (v58.i32[0] + v58.i32[1] >= a4)
    v66 = a4;
  else
    v66 = v58.i32[0] + v58.i32[1];
  if (v58.i32[0] + v58.i32[1] >= a3)
    v67 = v66;
  else
    v67 = a3;
  *a5 = v67;
  v68 = v61.i32[1];
  v69 = v61.i32[0];
  if (v61.i32[0] + v61.i32[1] >= a4)
    v70 = a4;
  else
    v70 = v61.i32[0] + v61.i32[1];
  v71 = vmul_s32(v62, (int32x2_t)0x61FFFFFFEC8);
  if (v61.i32[0] + v61.i32[1] >= a3)
    v72 = v70;
  else
    v72 = a3;
  a5[15 * a6] = -v72;
  v73 = v62.i32[0] + ((v71.i32[0] + v71.i32[1] + 2048) >> 12);
  v71.i32[0] = v25;
  v62.i32[0] = v22;
  v74 = vzip1_s32(v62, v31);
  v31.i32[0] = v24;
  v75 = vsub_s32(vshr_n_s32(v48, 0xBuLL), v52);
  v76 = vsub_s32(vzip1_s32(v71, v32), v74);
  v77 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v34, v76), (int8x8_t)v34, (int8x8_t)vmin_s32(v76, v35));
  v32.i32[0] = v29;
  v78 = vsub_s32(v31, v32);
  v79 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v34, v78), (int8x8_t)v34, (int8x8_t)vmin_s32(v78, v35));
  v80 = vrev64_s32(v77);
  v81 = vadd_s32(vmla_s32(vmul_s32(v80, (int32x2_t)0x4FFFFFFFB1), v77, vdup_n_s32(0x31Fu)), (int32x2_t)0x80000000800);
  v82 = vsub_s32(vshr_n_s32(v81, 0xCuLL), v80);
  v83 = vsra_n_s32(v80, v81, 0xCuLL);
  v84 = vrev64_s32(v75);
  v85 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v34, v84), (int8x8_t)v34, (int8x8_t)vmin_s32(v84, v35));
  v86 = vrev64_s32(v85);
  v87 = vadd_s32(vmla_s32(vmul_s32(v86, (int32x2_t)0xFFFFFD4E000002B2), v85, vdup_n_s32(0x8E4u)), (int32x2_t)0x80000000800);
  v88 = vsub_s32(vshr_n_s32(v87, 0xCuLL), v86);
  v89 = vzip1_s32(v83, v88);
  v83.i32[1] = v82.i32[1];
  v90 = vsra_n_s32(v79, vadd_s32(vmla_s32(vrev64_s32(vmul_s32(v79, (int32x2_t)0xFFFFFCE10000031FLL)), v79, (int32x2_t)0x4E0000004ELL), (int32x2_t)0x80000000800), 0xCuLL);
  v91 = vsub_s32(v83, v90);
  v92 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v34, v91), (int8x8_t)v34, (int8x8_t)vmin_s32(v91, v35));
  v93 = vmul_s32(v92, (int32x2_t)0x1380000061FLL);
  v94 = vsub_s32((int32x2_t)vext_s8((int8x8_t)v50, (int8x8_t)v51, 4uLL), (int32x2_t)vext_s8((int8x8_t)v51, (int8x8_t)v50, 4uLL));
  v95 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v34, v94), (int8x8_t)v34, (int8x8_t)vmin_s32(v94, v35));
  v96 = vsra_n_s32(v95, vadd_s32(vmla_s32(vrev64_s32(vmul_s32(v95, (int32x2_t)0x8E4FFFFF71CLL)), v95, vdup_n_s32(0xFFFFFD4E)), (int32x2_t)0x80000000800), 0xCuLL);
  v97 = vsra_n_s32(v86, v87, 0xCuLL);
  v88.i32[1] = v97.i32[1];
  v98 = vadd_s32(v89, vzip1_s32(v90, v96));
  v99 = vbsl_s8((int8x8_t)vcgt_s32(v34, v98), (int8x8_t)v34, (int8x8_t)vmin_s32(v98, v35));
  v100 = vadd_s32(vzip2_s32(v82, v97), vzip2_s32(v90, v96));
  v101 = vbsl_s8((int8x8_t)vcgt_s32(v34, v100), (int8x8_t)v34, (int8x8_t)vmin_s32(v100, v35));
  v102 = vsub_s32(v96, v88);
  v103 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v34, v102), (int8x8_t)v34, (int8x8_t)vmin_s32(v102, v35));
  v104 = vmla_s32(vmul_s32(vzip1_s32(v92, v103), (int32x2_t)0xFFFFF9E1FFFFFEC8), vzip2_s32(v92, v103), (int32x2_t)0xFFFFFEC80000061FLL);
  v105 = (int32x2_t)vext_s8((int8x8_t)v92, (int8x8_t)v103, 4uLL);
  v92.i32[1] = v103.i32[1];
  v106 = vsra_n_s32(v92, vadd_s32(v104, (int32x2_t)0x80000000800), 0xCuLL);
  v107 = vmul_s32(v103, (int32x2_t)0x61FFFFFFEC8);
  v108 = vadd_s32(vadd_s32(vzip1_s32(v93, v107), vzip2_s32(v93, v107)), (int32x2_t)0x80000000800);
  v109 = vsub_s32(vshr_n_s32(v108, 0xCuLL), v105).u32[0];
  v110 = v65 - v64;
  if (v110 >= a4)
    v111 = a4;
  else
    v111 = v110;
  if (v110 >= a3)
    v112 = v111;
  else
    v112 = a3;
  if (v69 - v68 >= a4)
    v113 = a4;
  else
    v113 = v69 - v68;
  if (v69 - v68 >= a3)
    v114 = v113;
  else
    v114 = a3;
  if (v43 + v63 >= a4)
    v115 = a4;
  else
    v115 = v43 + v63;
  if (v43 + v63 >= a3)
    v116 = v115;
  else
    v116 = a3;
  a5[3 * a6] = -v116;
  if (v44 + v73 >= a4)
    v117 = a4;
  else
    v117 = v44 + v73;
  if (v44 + v73 >= a3)
    v118 = v117;
  else
    v118 = a3;
  a5[12 * a6] = v118;
  v119 = vsra_n_s32(v105, v108, 0xCuLL);
  if (v43 - v63 >= a4)
    v120 = a4;
  else
    v120 = v43 - v63;
  if (v43 - v63 >= a3)
    v121 = v120;
  else
    v121 = a3;
  v122 = v44 - v73;
  if (v122 >= a4)
    v123 = a4;
  else
    v123 = v122;
  if (v122 < a3)
    v123 = a3;
  if (v99.i32[0] + v99.i32[1] >= a4)
    v124 = a4;
  else
    v124 = v99.i32[0] + v99.i32[1];
  if (v99.i32[0] + v99.i32[1] >= a3)
    v125 = v124;
  else
    v125 = a3;
  a5[a6] = -v125;
  if (v101.i32[0] + v101.i32[1] >= a4)
    v126 = a4;
  else
    v126 = v101.i32[0] + v101.i32[1];
  if (v101.i32[0] + v101.i32[1] >= a3)
    v127 = v126;
  else
    v127 = a3;
  a5[14 * a6] = v127;
  if (v99.i32[0] - v99.i32[1] >= a4)
    v128 = a4;
  else
    v128 = v99.i32[0] - v99.i32[1];
  if (v99.i32[0] - v99.i32[1] >= a3)
    v129 = v128;
  else
    v129 = a3;
  if (v101.i32[0] - v101.i32[1] >= a4)
    v130 = a4;
  else
    v130 = v101.i32[0] - v101.i32[1];
  if (v101.i32[0] - v101.i32[1] >= a3)
    v131 = v130;
  else
    v131 = a3;
  if (v106.i32[0] + v106.i32[1] >= a4)
    v132 = a4;
  else
    v132 = v106.i32[0] + v106.i32[1];
  if (v106.i32[0] + v106.i32[1] >= a3)
    v133 = v132;
  else
    v133 = a3;
  a5[2 * a6] = v133;
  if ((int)(v109 + v119.i32[1]) >= a4)
    v134 = a4;
  else
    v134 = v109 + v119.i32[1];
  if ((int)(v109 + v119.i32[1]) >= a3)
    v135 = v134;
  else
    v135 = a3;
  a5[13 * a6] = -v135;
  result = -((181 * (v112 + v114) + 128) >> 8);
  a5[7 * a6] = result;
  a5[8 * a6] = (181 * (v112 - v114) + 128) >> 8;
  a5[4 * a6] = (181 * (v121 + v123) + 128) >> 8;
  a5[11 * a6] = -((181 * (v121 - v123) + 128) >> 8);
  a5[6 * a6] = (181 * (v129 + v131) + 128) >> 8;
  a5[9 * a6] = -((181 * (v129 - v131) + 128) >> 8);
  if (v106.i32[0] - v106.i32[1] >= a4)
    v137 = a4;
  else
    v137 = v106.i32[0] - v106.i32[1];
  v138 = v109 - v119.i32[1];
  if (v106.i32[0] - v106.i32[1] < a3)
    v137 = a3;
  if (v138 >= a4)
    v139 = a4;
  else
    v139 = v109 - v119.i32[1];
  if (v138 >= a3)
    v140 = v139;
  else
    v140 = a3;
  a5[5 * a6] = -((181 * (v137 + v140) + 128) >> 8);
  a5[10 * a6] = (181 * (v137 - v140) + 128) >> 8;
  return result;
}

uint64_t dav1d_inv_flipadst16_1d_c(__int32 *a1, uint64_t a2, signed int a3, signed int a4)
{
  return inv_adst16_1d_internal_c(a1, a2, a3, a4, &a1[15 * a2], -a2);
}

_DWORD *dav1d_inv_identity4_1d_c(_DWORD *result, uint64_t a2)
{
  *result += (1697 * *result + 2048) >> 12;
  result[a2] += (1697 * result[a2] + 2048) >> 12;
  result[2 * a2] += (1697 * result[2 * a2] + 2048) >> 12;
  result[3 * a2] += (1697 * result[3 * a2] + 2048) >> 12;
  return result;
}

_DWORD *dav1d_inv_identity8_1d_c(_DWORD *result, uint64_t a2)
{
  *result *= 2;
  result[a2] *= 2;
  result[2 * a2] *= 2;
  result[3 * a2] *= 2;
  result[4 * a2] *= 2;
  result[5 * a2] *= 2;
  result[6 * a2] *= 2;
  result[7 * a2] *= 2;
  return result;
}

_DWORD *dav1d_inv_identity16_1d_c(_DWORD *result, uint64_t a2)
{
  *result = ((1697 * *result + 1024) >> 11) + 2 * *result;
  result[a2] = ((1697 * result[a2] + 1024) >> 11) + 2 * result[a2];
  result[2 * a2] = ((1697 * result[2 * a2] + 1024) >> 11) + 2 * result[2 * a2];
  result[3 * a2] = ((1697 * result[3 * a2] + 1024) >> 11) + 2 * result[3 * a2];
  result[4 * a2] = ((1697 * result[4 * a2] + 1024) >> 11) + 2 * result[4 * a2];
  result[5 * a2] = ((1697 * result[5 * a2] + 1024) >> 11) + 2 * result[5 * a2];
  result[6 * a2] = ((1697 * result[6 * a2] + 1024) >> 11) + 2 * result[6 * a2];
  result[7 * a2] = ((1697 * result[7 * a2] + 1024) >> 11) + 2 * result[7 * a2];
  result[8 * a2] = ((1697 * result[8 * a2] + 1024) >> 11) + 2 * result[8 * a2];
  result[9 * a2] = ((1697 * result[9 * a2] + 1024) >> 11) + 2 * result[9 * a2];
  result[10 * a2] = ((1697 * result[10 * a2] + 1024) >> 11) + 2 * result[10 * a2];
  result[11 * a2] = ((1697 * result[11 * a2] + 1024) >> 11) + 2 * result[11 * a2];
  result[12 * a2] = ((1697 * result[12 * a2] + 1024) >> 11) + 2 * result[12 * a2];
  result[13 * a2] = ((1697 * result[13 * a2] + 1024) >> 11) + 2 * result[13 * a2];
  result[14 * a2] = ((1697 * result[14 * a2] + 1024) >> 11) + 2 * result[14 * a2];
  result[15 * a2] = ((1697 * result[15 * a2] + 1024) >> 11) + 2 * result[15 * a2];
  return result;
}

_DWORD *dav1d_inv_identity32_1d_c(_DWORD *result, uint64_t a2)
{
  *result *= 4;
  result[a2] *= 4;
  result[2 * a2] *= 4;
  result[3 * a2] *= 4;
  result[4 * a2] *= 4;
  result[5 * a2] *= 4;
  result[6 * a2] *= 4;
  result[7 * a2] *= 4;
  result[8 * a2] *= 4;
  result[9 * a2] *= 4;
  result[10 * a2] *= 4;
  result[11 * a2] *= 4;
  result[12 * a2] *= 4;
  result[13 * a2] *= 4;
  result[14 * a2] *= 4;
  result[15 * a2] *= 4;
  result[16 * a2] *= 4;
  result[17 * a2] *= 4;
  result[18 * a2] *= 4;
  result[19 * a2] *= 4;
  result[20 * a2] *= 4;
  result[21 * a2] *= 4;
  result[22 * a2] *= 4;
  result[23 * a2] *= 4;
  result[24 * a2] *= 4;
  result[25 * a2] *= 4;
  result[26 * a2] *= 4;
  result[27 * a2] *= 4;
  result[28 * a2] *= 4;
  result[29 * a2] *= 4;
  result[30 * a2] *= 4;
  result[31 * a2] *= 4;
  return result;
}

_WORD *dav1d_create_lf_mask_intra(_WORD *result, uint64_t a2, uint64_t a3, _BYTE *a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int a10, int a11, _QWORD *__b, unsigned __int8 *a13, uint64_t *a14, unsigned __int8 *a15)
{
  uint64_t v20;
  uint64_t *v22;
  int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  _WORD *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _WORD *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  _WORD *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _WORD *v70;
  uint64_t v71;
  size_t v72;
  int v73;
  uint64_t v74;
  uint64_t *v75;
  unsigned int v76;
  char v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  int v84;
  char v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  signed int v91;
  int v92;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  uint64_t v101;

  v20 = a3;
  v101 = (uint64_t)result;
  v22 = a14;
  v24 = a10;
  v23 = a11;
  v25 = &dav1d_block_dimensions[4 * a9];
  LODWORD(v26) = a7 - a5;
  v27 = *v25;
  if (a7 - a5 >= v27)
    v26 = *v25;
  else
    v26 = v26;
  v28 = v25[1];
  if (a8 - a6 >= v28)
    v29 = v25[1];
  else
    v29 = (a8 - a6);
  v100 = a5 & 0x1F;
  v30 = a6 & 0x1F;
  if ((_DWORD)v26)
    v31 = (_DWORD)v29 == 0;
  else
    v31 = 1;
  if (!v31)
  {
    result = __b;
    if ((int)v29 >= 1 && (int)v26 >= 1)
    {
      v33 = 0;
      v34 = a2 + 4 * a6 * a3 + 4 * a5;
      do
      {
        v35 = 0;
        do
        {
          v36 = (_BYTE *)(v34 + v35);
          *v36 = *a4;
          v36[1] = a4[16];
          v35 += 4;
        }
        while (4 * v26 != v35);
        ++v33;
        v34 += 4 * a3;
      }
      while (v33 != (_DWORD)v29);
    }
    v99 = a7;
    v37 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * HIDWORD(a9);
    if (v37[2] >= 2u)
      v38 = 2;
    else
      v38 = v37[2];
    if (v37[3] >= 2u)
      v39 = 2;
    else
      v39 = v37[3];
    if ((int)v29 >= 1)
    {
      v40 = a13;
      v41 = v29;
      v42 = 1 << v30;
      do
      {
        v44 = *v40++;
        v43 = v44;
        if ((int)v38 < v44)
          v43 = v38;
        *(_WORD *)(v101 + 12 * v100 + 4 * v43 + 2 * ((v42 & 0xFFFF0000) != 0)) |= v42 >> (16
                                                                                              * ((v42 & 0xFFFF0000) != 0));
        v42 *= 2;
        --v41;
      }
      while (v41);
    }
    v45 = (1 << v100);
    if ((int)v26 >= 1)
    {
      v46 = (unsigned __int8 *)__b;
      v47 = v26;
      v48 = 1 << v100;
      do
      {
        v50 = *v46++;
        v49 = v50;
        if ((int)v39 < v50)
          v49 = v39;
        v51 = v101 + 12 * v30 + 4 * v49 + 2 * ((v48 & 0xFFFF0000) != 0);
        *(_WORD *)(v51 + 384) |= v48 >> (16 * ((v48 & 0xFFFF0000) != 0));
        v48 *= 2;
        --v47;
      }
      while (v47);
    }
    v52 = *v37;
    if ((int)v26 > (int)v52)
    {
      v53 = ((unint64_t)(1 << v30) << v29) - (1 << v30);
      if ((unsigned __int16)((unint64_t)(1 << v30) << v29) == 1 << v30)
      {
        if (HIWORD(v53))
        {
          v60 = (_WORD *)(4 * v38 + 12 * (v52 + v100) + v101 + 2);
          v61 = v52;
          do
          {
            *v60 |= HIWORD(v53);
            v61 += v52;
            v60 += 6 * v52;
          }
          while (v61 < v26);
        }
        else
        {
          v57 = v52;
          do
            v57 += v52;
          while (v57 < (int)v26);
        }
      }
      else
      {
        v54 = 4 * v38;
        if (v53 >= 0x10000)
        {
          v58 = v54 + 12 * (v52 + v100) + v101 + 2;
          v59 = v52;
          do
          {
            *(_DWORD *)(v58 - 2) |= v53;
            v59 += v52;
            v58 += 12 * v52;
          }
          while (v59 < v26);
        }
        else
        {
          v55 = (_WORD *)(v101 + v54 + 12 * (v52 + v100));
          v56 = v52;
          do
          {
            *v55 |= v53;
            v56 += v52;
            v55 += 6 * v52;
          }
          while (v56 < v26);
        }
      }
    }
    v62 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * HIDWORD(a9) + 1);
    if ((int)v29 > (int)v62)
    {
      v63 = (v45 << v26) - v45;
      if ((unsigned __int16)(v45 << v26) == (_WORD)v45)
      {
        if (HIWORD(v63))
        {
          v70 = (_WORD *)(4 * v39 + 12 * (v62 + v30) + v101 + 386);
          v71 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * HIDWORD(a9) + 1);
          do
          {
            *v70 |= HIWORD(v63);
            v71 += v62;
            v70 += 6 * v62;
          }
          while (v71 < v29);
        }
        else
        {
          v67 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * HIDWORD(a9) + 1);
          do
            v67 += v62;
          while (v67 < (int)v29);
        }
      }
      else
      {
        v64 = 4 * v39 + 12 * (v62 + v30);
        if (v63 >= 0x10000)
        {
          v68 = v64 + v101 + 386;
          v69 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * HIDWORD(a9) + 1);
          do
          {
            *(_DWORD *)(v68 - 2) |= v63;
            v69 += v62;
            v68 += 12 * v62;
          }
          while (v69 < v29);
        }
        else
        {
          v65 = (_WORD *)(v64 + v101 + 384);
          v66 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * HIDWORD(a9) + 1);
          do
          {
            *v65 |= v63;
            v66 += v62;
            v65 += 6 * v62;
          }
          while (v66 < v29);
        }
      }
    }
    switch((int)v26)
    {
      case 1:
        *(_BYTE *)__b = v39;
        break;
      case 2:
        *(_WORD *)__b = v39 | ((_WORD)v39 << 8);
        break;
      case 4:
        *(_DWORD *)__b = 16843009 * v39;
        break;
      case 8:
        *__b = 0x101010101010101 * v39;
        break;
      case 16:
        *__b = 0x101010101010101 * v39;
        __b[1] = 0x101010101010101 * v39;
        break;
      case 32:
        *__b = 0x101010101010101 * v39;
        __b[1] = 0x101010101010101 * v39;
        __b[2] = 0x101010101010101 * v39;
        __b[3] = 0x101010101010101 * v39;
        break;
      default:
        result = memset(__b, v39, (int)v26);
        v24 = a10;
        v22 = a14;
        break;
    }
    switch((int)v29)
    {
      case 1:
        *a13 = v38;
        break;
      case 2:
        *(_WORD *)a13 = v38 | ((_WORD)v38 << 8);
        break;
      case 4:
        *(_DWORD *)a13 = 16843009 * v38;
        break;
      case 8:
        *(_QWORD *)a13 = 0x101010101010101 * v38;
        break;
      case 16:
        *(_QWORD *)a13 = 0x101010101010101 * v38;
        *((_QWORD *)a13 + 1) = 0x101010101010101 * v38;
        break;
      case 32:
        *(_QWORD *)a13 = 0x101010101010101 * v38;
        *((_QWORD *)a13 + 1) = 0x101010101010101 * v38;
        *((_QWORD *)a13 + 2) = 0x101010101010101 * v38;
        *((_QWORD *)a13 + 3) = 0x101010101010101 * v38;
        break;
      default:
        v72 = (int)v29;
        v73 = v38;
        v74 = v20;
        v75 = v22;
        v76 = v24;
        result = memset(a13, v73, v72);
        v24 = v76;
        v22 = v75;
        v20 = v74;
        break;
    }
    v23 = a11;
    a7 = v99;
  }
  if (v22)
  {
    v77 = v23 != 3;
    v78 = v23 == 3 ? a7 : a7 + 1;
    v79 = v78 >> v77;
    v80 = a5 >> v77;
    v81 = v23 == 3 ? v27 : v27 + 1;
    v82 = v79 - v80;
    v83 = v81 >> v77;
    v84 = v82 >= v83 ? v83 : v82;
    v85 = v23 == 1;
    v86 = v23 == 1 ? a8 + 1 : a8;
    v87 = v86 >> v85;
    v88 = a6 >> v85;
    v89 = v23 == 1 ? v28 + 1 : v28;
    v90 = v87 - v88;
    v91 = v89 >> v85;
    v92 = v90 >= v91 ? v91 : v90;
    if (v84 && v92 != 0)
    {
      if (v92 >= 1 && v84 >= 1)
      {
        v95 = 0;
        v96 = a2 + 4 * v88 * v20 + 4 * v80;
        do
        {
          v97 = 0;
          do
          {
            v98 = v96 + v97;
            *(_BYTE *)(v98 + 2) = a4[32];
            *(_BYTE *)(v98 + 3) = a4[48];
            v97 += 4;
          }
          while (4 * v84 != v97);
          ++v95;
          v96 += 4 * v20;
        }
        while (v95 != v92);
      }
      return mask_edges_chroma((_WORD *)(v101 + 768), v30 >> v85, v100 >> (v23 != 3), v84, v92, 0, v24, v22, a15, v23 != 3, 0);
    }
  }
  return result;
}

_WORD *mask_edges_chroma(_WORD *result, unsigned int a2, unsigned int a3, int a4, int a5, int a6, unsigned int a7, uint64_t *__b, unsigned __int8 *__ba, char a10, char a11)
{
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  int v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  _WORD *v37;
  uint64_t v38;
  _WORD *v39;
  uint64_t v40;
  _WORD *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  _WORD *v48;
  uint64_t v49;
  _WORD *v50;
  uint64_t v51;
  _WORD *v52;
  uint64_t v53;
  int v54;
  __int16 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v13 = (0x7DFDEuLL >> a7) & 1;
  v14 = 0x10u >> a10;
  v15 = 1 << (0x10u >> a11);
  v16 = (1 << a2);
  v17 = a5 - 1;
  if (a5 >= 1)
  {
    v18 = a5;
    v19 = __ba;
    v20 = 1 << a2;
    do
    {
      v22 = *v19++;
      v21 = v22;
      if ((int)v13 < v22)
        v21 = (0x7DFDEuLL >> a7) & 1;
      result[4 * a3 + 2 * v21 + (v20 >= v15)] |= v20 >> ((v20 >= v15) << (4 - a11));
      v20 *= 2;
      --v18;
    }
    while (v18);
  }
  v23 = (0x7BFBEuLL >> a7) & 1;
  v24 = 1 << v14;
  v25 = (1 << a3);
  if (a4 >= 1)
  {
    v26 = a4;
    v27 = __b;
    v28 = 1 << a3;
    do
    {
      v30 = *(unsigned __int8 *)v27;
      v27 = (uint64_t *)((char *)v27 + 1);
      v29 = v30;
      if ((int)v23 < v30)
        v29 = (0x7BFBEuLL >> a7) & 1;
      v31 = (uint64_t)&result[4 * a2 + 2 * v29 + (v28 >= v24)];
      *(_WORD *)(v31 + 256) |= v28 >> ((v28 >= v24) << (4 - a10));
      v28 *= 2;
      --v26;
    }
    while (v26);
  }
  if (!a6)
  {
    v32 = a7;
    v33 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a7);
    if ((int)v33 < a4)
    {
      v34 = (v16 << a5) - v16;
      v35 = v34 >> (0x10u >> a11);
      v36 = (v15 - 1) & v34;
      if (v36)
      {
        if (v35)
        {
          v37 = (_WORD *)((char *)result + ((4 * v13) | (8 * (v33 + a3))) + 2);
          v38 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a7);
          do
          {
            *(v37 - 1) |= v36;
            *v37 |= v35;
            v38 += v33;
            v37 += 4 * v33;
          }
          while (v38 < a4);
        }
        else
        {
          v41 = (_WORD *)((char *)result + ((4 * v13) | (8 * (v33 + a3))));
          v42 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a7);
          do
          {
            *v41 |= v36;
            v42 += v33;
            v41 += 4 * v33;
          }
          while (v42 < a4);
        }
      }
      else if (v35)
      {
        v39 = (_WORD *)((char *)result + ((4 * v13) | (8 * (v33 + a3))) + 2);
        v40 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a7);
        do
        {
          *v39 |= v35;
          v40 += v33;
          v39 += 4 * v33;
        }
        while (v40 < a4);
      }
      else
      {
        v43 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a7);
        do
          v43 += v33;
        while (v43 < a4);
      }
    }
    v44 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v32 + 1);
    if ((int)v44 < a5)
    {
      v45 = (v25 << a4) - v25;
      v46 = v45 >> v14;
      v47 = (v24 - 1) & v45;
      if (v47)
      {
        if (v46)
        {
          v48 = (_WORD *)((char *)result + ((4 * v23) | (8 * (v44 + a2))) + 258);
          v49 = v44;
          do
          {
            *(v48 - 1) |= v47;
            *v48 |= v46;
            v49 += v44;
            v48 += 4 * v44;
          }
          while (v49 < a5);
        }
        else
        {
          v52 = (_WORD *)((char *)result + ((4 * v23) | (8 * (v44 + a2))) + 256);
          v53 = v44;
          do
          {
            *v52 |= v47;
            v53 += v44;
            v52 += 4 * v44;
          }
          while (v53 < a5);
        }
      }
      else if (v46)
      {
        v50 = (_WORD *)((char *)result + ((4 * v23) | (8 * (v44 + a2))) + 258);
        v51 = v44;
        do
        {
          *v50 |= v46;
          v51 += v44;
          v50 += 4 * v44;
        }
        while (v51 < a5);
      }
      else
      {
        v54 = v44;
        do
          v54 += v44;
        while (v54 < a5);
      }
    }
  }
  switch(a4)
  {
    case 1:
      *(_BYTE *)__b = v23;
      if (v17 <= 0x1F)
        goto LABEL_68;
      return memset(__ba, v13, a5);
    case 2:
      if (v23)
        v55 = 257;
      else
        v55 = 0;
      *(_WORD *)__b = v55;
      if (v17 > 0x1F)
        return memset(__ba, v13, a5);
      goto LABEL_68;
    case 4:
      if (v23)
        v56 = 16843009;
      else
        v56 = 0;
      *(_DWORD *)__b = v56;
      if (v17 > 0x1F)
        return memset(__ba, v13, a5);
      goto LABEL_68;
    case 8:
      v57 = 0x101010101010101;
      if (!v23)
        v57 = 0;
      *__b = v57;
      if (v17 > 0x1F)
        return memset(__ba, v13, a5);
      goto LABEL_68;
    case 16:
      v58 = 0x101010101010101;
      if (!v23)
        v58 = 0;
      *__b = v58;
      __b[1] = v58;
      if (v17 > 0x1F)
        return memset(__ba, v13, a5);
      goto LABEL_68;
    case 32:
      v59 = 0x101010101010101;
      if (!v23)
        v59 = 0;
      *__b = v59;
      __b[1] = v59;
      __b[2] = v59;
      __b[3] = v59;
      goto LABEL_68;
    default:
      result = memset(__b, v23, a4);
      if (v17 > 0x1F)
        return memset(__ba, v13, a5);
LABEL_68:
      switch(a5)
      {
        case 1:
          *__ba = v13;
          break;
        case 2:
          if (v13)
            v60 = 257;
          else
            v60 = 0;
          *(_WORD *)__ba = v60;
          break;
        case 4:
          if (v13)
            v61 = 16843009;
          else
            v61 = 0;
          *(_DWORD *)__ba = v61;
          break;
        case 8:
          v62 = 0x101010101010101;
          if (!v13)
            v62 = 0;
          *(_QWORD *)__ba = v62;
          break;
        case 16:
          v63 = 0x101010101010101;
          if (!v13)
            v63 = 0;
          *(_QWORD *)__ba = v63;
          *((_QWORD *)__ba + 1) = v63;
          break;
        case 32:
          v64 = 0x101010101010101;
          if (!v13)
            v64 = 0;
          *(_QWORD *)__ba = v64;
          *((_QWORD *)__ba + 1) = v64;
          *((_QWORD *)__ba + 2) = v64;
          *((_QWORD *)__ba + 3) = v64;
          break;
        default:
          return memset(__ba, v13, a5);
      }
      return result;
  }
}

_WORD *dav1d_create_lf_mask_inter(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, unsigned int a11, uint64_t a12, unsigned int a13, int a14, unsigned __int8 *__dst, unsigned __int8 *a16, uint64_t *__b, unsigned __int8 *a18)
{
  _WORD *result;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t i;
  int v73;
  unsigned int v74;
  unsigned __int8 *v75;
  int v76;
  uint64_t v77;
  uint64_t j;
  int v79;
  unsigned int v80;
  _BOOL8 v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  _BYTE *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  char *v91;
  char v92;
  char v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  char v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;
  int v107;
  BOOL v108;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  _WORD *v118;
  int v119;
  int v120;
  int v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  _BYTE v125[2048];
  _BYTE v126[2048];
  uint64_t v127;

  result = (_WORD *)MEMORY[0x1E0C80A78](a1, a2);
  v26 = v25;
  v27 = v23;
  v28 = v21;
  v29 = v20;
  v30 = v19;
  v31 = (uint64_t)result;
  v32 = __b;
  v33 = a9;
  v127 = *MEMORY[0x1E0C80C00];
  v34 = &dav1d_block_dimensions[4 * a10];
  v35 = *v34;
  if (v24 - v22 >= v35)
    v36 = *v34;
  else
    v36 = (v24 - v22);
  v37 = v34[1];
  if (v25 - v23 >= v37)
    v38 = v34[1];
  else
    v38 = (v25 - v23);
  v39 = v22 & 0x1F;
  v40 = v27 & 0x1F;
  if ((_DWORD)v36)
    v41 = (_DWORD)v38 == 0;
  else
    v41 = 1;
  if (!v41)
  {
    v123 = v22 & 0x1F;
    v121 = v24;
    v122 = v22;
    v119 = *v34;
    v120 = v34[1];
    if ((int)v38 <= 0)
    {
      v51 = 1 << v40;
      v52 = 1 << v39;
      v53 = v36 - 1;
      if ((int)v36 < 1)
        goto LABEL_34;
    }
    else
    {
      v114 = v27 & 0x1F;
      v118 = result;
      v116 = v19;
      v117 = v20;
      v115 = v27;
      v42 = 0;
      if ((int)v36 <= 0)
      {
        do
          v42 += *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a11 + 1);
        while (v42 < (int)v38);
      }
      else
      {
        v43 = v19 + 4 * v27 * v20 + 4 * v22;
        do
        {
          v44 = 0;
          do
          {
            v45 = (_BYTE *)(v43 + v44);
            *v45 = *v21;
            v45[1] = v21[16];
            v44 += 4;
          }
          while (4 * v36 != v44);
          ++v42;
          v43 += 4 * v20;
        }
        while (v42 != (_DWORD)v38);
        v46 = 0;
        v47 = 0;
        v48 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a11;
        v124 = v38;
        do
        {
          v49 = 0;
          v50 = 0;
          do
          {
            decomp_tx((uint64_t)&v125[32 * v47 + v49], a11, 0, v46, v50, a12);
            v49 += *v48;
            ++v50;
          }
          while ((int)v49 < (int)v36);
          v38 = v124;
          v47 += v48[1];
          ++v46;
        }
        while ((int)v47 < (int)v124);
      }
      v40 = v114;
      v51 = 1 << v114;
      v54 = v125;
      v31 = (uint64_t)v118;
      v55 = a16;
      v39 = v123;
      v56 = v38;
      v57 = 1 << v114;
      do
      {
        v59 = *v54;
        v54 += 32;
        v58 = v59;
        v61 = *v55++;
        v60 = v61;
        if (v58 >= v61)
          v58 = v60;
        v118[6 * v123 + 2 * v58 + ((v57 & 0xFFFF0000) != 0)] |= v57 >> (16 * ((v57 & 0xFFFF0000) != 0));
        v57 *= 2;
        --v56;
      }
      while (v56);
      v32 = __b;
      v33 = a9;
      v30 = v116;
      v29 = v117;
      v27 = v115;
      v52 = 1 << v123;
      v53 = v36 - 1;
      if ((int)v36 < 1)
      {
LABEL_34:
        if (!v33)
        {
          if ((int)v38 >= 1)
          {
            for (i = 0; i != v38; ++i)
            {
              v73 = v125[32 * i + 1024];
              if ((int)v36 > v73)
              {
                v74 = v125[32 * i];
                do
                {
                  v75 = &v125[32 * i + v73];
                  v76 = *v75;
                  if (v76 < (int)v74)
                    v74 = *v75;
                  v77 = v31 + 12 * (v73 + v39) + 4 * v74;
                  *(_WORD *)(v77 + 2 * ((v51 & 0xFFFF0000) != 0)) |= v51 >> (16 * ((v51 & 0xFFFF0000) != 0));
                  v73 += v75[1024];
                  v74 = v76;
                }
                while (v73 < (int)v36);
              }
              v51 *= 2;
            }
          }
          if ((int)v36 >= 1)
          {
            for (j = 0; j != v36; ++j)
            {
              v79 = v126[j + 1024];
              if ((int)v38 > v79)
              {
                v80 = v126[j];
                v81 = (v52 & 0xFFFF0000) != 0;
                do
                {
                  v82 = 32 * v79;
                  v83 = v126[v82 + j];
                  if ((int)v80 >= v83)
                    v80 = v126[v82 + j];
                  v84 = v31 + 12 * (v79 + v40) + 4 * v80 + 2 * v81;
                  *(_WORD *)(v84 + 384) |= v52 >> (16 * v81);
                  v79 += v125[v82 + 3072 + j];
                  v80 = v83;
                }
                while (v79 < (int)v38);
              }
              v52 *= 2;
            }
          }
        }
        if ((int)v38 < 1)
          goto LABEL_61;
        if (v38 >= 8)
        {
          v71 = v38 & 0x7FFFFFF8;
          v85 = &v125[v53 + 128];
          v86 = a16;
          v87 = v38 & 0xFFFFFFF8;
          do
          {
            LOBYTE(v88) = *(v85 - 128);
            BYTE1(v88) = *(v85 - 96);
            BYTE2(v88) = *(v85 - 64);
            BYTE3(v88) = *(v85 - 32);
            BYTE4(v88) = *v85;
            BYTE5(v88) = v85[32];
            BYTE6(v88) = v85[64];
            HIBYTE(v88) = v85[96];
            *(_QWORD *)v86 = v88;
            v86 += 8;
            v85 += 256;
            v87 -= 8;
          }
          while (v87);
          if (v71 == v38)
            goto LABEL_61;
        }
        else
        {
          v71 = 0;
        }
        v89 = v38 - v71;
        v90 = &a16[v71];
        v91 = &v125[32 * v71 + v53];
        do
        {
          v92 = *v91;
          v91 += 32;
          *v90++ = v92;
          --v89;
        }
        while (v89);
LABEL_61:
        result = memcpy(__dst, &v125[32 * (int)v38 + 2016], (int)v36);
        v39 = v123;
        v24 = v121;
        v22 = v122;
        v35 = v119;
        v37 = v120;
        goto LABEL_62;
      }
    }
    v62 = v126;
    v63 = __dst;
    v64 = v36;
    v65 = v52;
    do
    {
      v67 = *v62++;
      v66 = v67;
      v69 = *v63++;
      v68 = v69;
      if ((int)v66 >= v69)
        v66 = v68;
      v70 = v31 + 12 * v40 + 4 * v66 + 2 * ((v65 & 0xFFFF0000) != 0);
      *(_WORD *)(v70 + 384) |= v65 >> (16 * ((v65 & 0xFFFF0000) != 0));
      v65 *= 2;
      --v64;
    }
    while (v64);
    goto LABEL_34;
  }
LABEL_62:
  if (v32)
  {
    v93 = a14 != 3;
    if (a14 == 3)
      v94 = v24;
    else
      v94 = v24 + 1;
    v95 = v94 >> v93;
    v96 = v22 >> v93;
    if (a14 != 3)
      ++v35;
    v97 = v95 - v96;
    v98 = v35 >> v93;
    if (v97 >= v98)
      v99 = v98;
    else
      v99 = v97;
    v100 = a14 == 1;
    if (a14 == 1)
      v101 = v26 + 1;
    else
      v101 = v26;
    v102 = v101 >> v100;
    v103 = v27 >> v100;
    if (a14 == 1)
      v104 = v37 + 1;
    else
      v104 = v37;
    v105 = v102 - v103;
    v106 = v104 >> v100;
    if (v105 >= v106)
      v107 = v106;
    else
      v107 = v105;
    if (v99)
      v108 = v107 == 0;
    else
      v108 = 1;
    if (!v108)
    {
      if (v107 >= 1 && v99 >= 1)
      {
        v110 = 0;
        v111 = v30 + 4 * v103 * v29 + 4 * v96;
        do
        {
          v112 = 0;
          do
          {
            v113 = v111 + v112;
            *(_BYTE *)(v113 + 2) = v28[32];
            *(_BYTE *)(v113 + 3) = v28[48];
            v112 += 4;
          }
          while (4 * v99 != v112);
          ++v110;
          v111 += 4 * v29;
        }
        while (v110 != v107);
      }
      return mask_edges_chroma((_WORD *)(v31 + 768), v40 >> v100, v39 >> v93, v99, v107, v33, a13, v32, a18, a14 != 3, 0);
    }
  }
  return result;
}

void dav1d_calc_lf_values(_BYTE *a1, _DWORD *a2, char *a3)
{
  _BYTE *v5;
  uint64_t v6;
  _DWORD *v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  char *v12;
  int v13;
  int v14;
  uint64_t v15;

  v5 = a1;
  if (a2[216])
    v6 = 8;
  else
    v6 = 1;
  if (a2[308] || a2[309])
  {
    if (a2[312])
      v7 = a2 + 314;
    else
      v7 = 0;
    v8 = a2 + 224;
    do
    {
      v10 = a2[216];
      if (v10)
        v11 = *(v8 - 3);
      else
        v11 = 0;
      calc_lf_value(v5, 0, a2[308], *a3, v11, v7);
      if (a2[306])
        v12 = a3 + 1;
      else
        v12 = a3;
      if (v10)
        v13 = *(v8 - 2);
      else
        v13 = 0;
      calc_lf_value(v5 + 16, 0, a2[309], *v12, v13, v7);
      if (v10)
        v14 = *(v8 - 1);
      else
        v14 = 0;
      calc_lf_value(v5 + 32, 1, a2[310], a3[2 * (a2[306] != 0)], v14, v7);
      if (a2[306])
        v15 = 3;
      else
        v15 = 0;
      if (v10)
        v9 = *v8;
      else
        v9 = 0;
      calc_lf_value(v5 + 48, 1, a2[311], a3[v15], v9, v7);
      v5 += 64;
      v8 += 8;
      --v6;
    }
    while (v6);
  }
  else
  {
    bzero(a1, ((_DWORD)v6 << 6));
  }
}

_BYTE *calc_lf_value(_BYTE *result, int a2, int a3, int a4, int a5, _DWORD *a6)
{
  int v6;
  int v7;
  unsigned int v8;
  char v9;
  int v10;
  char v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;

  v6 = a4 + a3;
  if (a4 + a3 >= 63)
    v6 = 63;
  v7 = (v6 & ~(v6 >> 31)) + a5;
  if (v7 >= 63)
    v7 = 63;
  if (!a2 || a3)
  {
    v8 = v7 & ~(v7 >> 31);
    if (a6)
    {
      v9 = v8 > 0x1F;
      v10 = (a6[2] << (v8 > 0x1F)) + v8;
      if (v10 >= 63)
        v10 = 63;
      v11 = v10 & ~(v10 >> 31);
      result[1] = v11;
      *result = v11;
      v12 = ((a6[3] + *a6) << v9) + v8;
      if (v12 >= 63)
        v12 = 63;
      result[2] = v12 & ~(v12 >> 31);
      v13 = ((a6[3] + a6[1]) << v9) + v8;
      if (v13 >= 63)
        v13 = 63;
      result[3] = v13 & ~(v13 >> 31);
      v14 = ((a6[4] + *a6) << v9) + v8;
      if (v14 >= 63)
        v14 = 63;
      result[4] = v14 & ~(v14 >> 31);
      v15 = ((a6[4] + a6[1]) << v9) + v8;
      if (v15 >= 63)
        v15 = 63;
      result[5] = v15 & ~(v15 >> 31);
      v16 = ((a6[5] + *a6) << v9) + v8;
      if (v16 >= 63)
        v16 = 63;
      result[6] = v16 & ~(v16 >> 31);
      v17 = ((a6[5] + a6[1]) << v9) + v8;
      if (v17 >= 63)
        v17 = 63;
      result[7] = v17 & ~(v17 >> 31);
      v18 = ((a6[6] + *a6) << v9) + v8;
      if (v18 >= 63)
        v18 = 63;
      result[8] = v18 & ~(v18 >> 31);
      v19 = ((a6[6] + a6[1]) << v9) + v8;
      if (v19 >= 63)
        v19 = 63;
      result[9] = v19 & ~(v19 >> 31);
      v20 = ((a6[7] + *a6) << v9) + v8;
      if (v20 >= 63)
        v20 = 63;
      result[10] = v20 & ~(v20 >> 31);
      v21 = ((a6[7] + a6[1]) << v9) + v8;
      if (v21 >= 63)
        v21 = 63;
      result[11] = v21 & ~(v21 >> 31);
      v22 = ((a6[8] + *a6) << v9) + v8;
      if (v22 >= 63)
        v22 = 63;
      result[12] = v22 & ~(v22 >> 31);
      v23 = ((a6[8] + a6[1]) << v9) + v8;
      if (v23 >= 63)
        v23 = 63;
      result[13] = v23 & ~(v23 >> 31);
      v24 = ((a6[9] + *a6) << v9) + v8;
      if (v24 >= 63)
        v24 = 63;
      result[14] = v24 & ~(v24 >> 31);
      v25 = ((a6[9] + a6[1]) << v9) + v8;
      if (v25 >= 63)
        v25 = 63;
      result[15] = v25 & ~(v25 >> 31);
    }
    else
    {
      v26 = 0x101010101010101 * v8;
      *(_QWORD *)result = v26;
      *((_QWORD *)result + 1) = v26;
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
  }
  return result;
}

uint64_t decomp_tx(uint64_t result, unsigned int a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v6 = result;
  v7 = a2;
  v8 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a2;
  if (a2 && a3 <= 1)
  {
    LODWORD(v9) = a5;
    LODWORD(v10) = a4;
    v11 = a3;
    v12 = (a3 + 1);
    while (((*(unsigned __int16 *)(a6 + 2 * v11) >> (v9 + 4 * v10)) & 1) != 0)
    {
      v14 = (char *)&dav1d_txfm_dimensions + 8 * v7;
      v15 = v14[6];
      v16 = *v8;
      v17 = v14[1];
      v10 = (2 * v10);
      v9 = (2 * v9);
      result = decomp_tx(v6, v15, v12, v10, v9, a6);
      if (v16 < v17)
      {
        v6 += 32 * (v17 >> 1);
        LODWORD(v10) = v10 | 1;
        v8 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v15;
        if (v11 > 0)
          goto LABEL_12;
      }
      else
      {
        v43 = v17 >> 1;
        result = decomp_tx(v6 + (v16 >> 1), v15, v12, v10, v9 | 1, a6);
        if (v17 < v16)
          return result;
        v10 = v10 | 1;
        result = decomp_tx(v6 + 32 * v43, v15, v12, v10, v9, a6);
        LODWORD(v9) = v9 | 1;
        v6 += 32 * v43 + (v16 >> 1);
        v8 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v15;
        if (v11 > 0)
          goto LABEL_12;
      }
      v13 = 0x63uLL >> v7;
      v12 = (v12 + 1);
      ++v11;
      v7 = v15;
      if ((v13 & 1) != 0)
        goto LABEL_12;
    }
  }
  v15 = v7;
LABEL_12:
  v18 = (char *)&dav1d_txfm_dimensions + 8 * v15;
  if (v18[2] >= 2u)
    v19 = 2;
  else
    v19 = v18[2];
  v20 = v18[3];
  if (v20 >= 2)
    v21 = 2;
  else
    v21 = v20;
  v22 = *v8 - 1;
  switch(v22)
  {
    case 0:
      v23 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v15 + 1);
      v24 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v15 + 1);
      v25 = (_BYTE *)v6;
      do
      {
        *v25 = v19;
        v25[2048] = v21;
        v25[1024] = 1;
        v25 += 32;
        --v23;
      }
      while (v23);
      goto LABEL_33;
    case 1:
      v26 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v15 + 1);
      v24 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v15 + 1);
      v27 = v19 | ((_WORD)v19 << 8);
      v28 = v21 | ((_WORD)v21 << 8);
      v29 = v6;
      do
      {
        *(_WORD *)v29 = v27;
        *(_WORD *)(v29 + 2048) = v28;
        *(_BYTE *)(v29 + 1024) = 2;
        v29 += 32;
        --v26;
      }
      while (v26);
      goto LABEL_33;
    case 3:
      v30 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v15 + 1);
      v24 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v15 + 1);
      v31 = 16843009 * v19;
      v32 = 16843009 * v21;
      v33 = v6;
      do
      {
        *(_DWORD *)v33 = v31;
        *(_DWORD *)(v33 + 2048) = v32;
        *(_BYTE *)(v33 + 1024) = 4;
        v33 += 32;
        --v30;
      }
      while (v30);
      goto LABEL_33;
    case 7:
      v34 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v15 + 1);
      v24 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v15 + 1);
      v35 = 0x101010101010101 * v19;
      v36 = 0x101010101010101 * v21;
      v37 = v6;
      do
      {
        *(_QWORD *)v37 = v35;
        *(_QWORD *)(v37 + 2048) = v36;
        *(_BYTE *)(v37 + 1024) = 8;
        v37 += 32;
        --v34;
      }
      while (v34);
      goto LABEL_33;
    case 15:
      v24 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v15 + 1);
      v38 = vdupq_n_s64(0x101010101010101 * v19);
      v39 = vdupq_n_s64(0x101010101010101 * v21);
      v40 = (int64x2_t *)v6;
      v41 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v15 + 1);
      do
      {
        *v40 = v38;
        v40[128] = v39;
        v40[64].i8[0] = 16;
        v40 += 2;
        --v41;
      }
      while (v41);
LABEL_33:
      switch(v22)
      {
        case 0:
          *(_BYTE *)(v6 + 3072) = v24;
          break;
        case 1:
          *(_WORD *)(v6 + 3072) = v24 | ((_WORD)v24 << 8);
          break;
        case 3:
          *(_DWORD *)(v6 + 3072) = 16843009 * v24;
          break;
        case 7:
          *(_QWORD *)(v6 + 3072) = 0x101010101010101 * v24;
          break;
        case 15:
          v42 = 0x101010101010101 * v24;
          *(_QWORD *)(v6 + 3072) = v42;
          *(_QWORD *)(v6 + 3080) = v42;
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t dav1d_parse_sequence_header(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v8;
  BOOL v9;
  const void *v10;
  unint64_t v11;
  _OWORD v12[4];
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t, pthread_mutex_t *);
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  if (a1)
  {
    v15 = 0uLL;
    v14 = 0uLL;
    v19 = 0uLL;
    v20 = 0uLL;
    v18 = 0uLL;
    v16 = dav1d_default_picture_alloc;
    v17 = dav1d_default_picture_release;
    LODWORD(v15) = 1;
    DWORD2(v19) = 7;
    DWORD2(v14) = 1;
    LODWORD(v14) = 1;
    v11 = 0;
    v3 = dav1d_open((uint64_t *)&v11, (uint64_t)&v14);
    if ((v3 & 0x80000000) != 0)
      return v3;
    if (a2)
    {
      v3 = dav1d_data_wrap_internal((uint64_t)v12, a2, a3, (uint64_t)dummy_free, 0);
      if ((v3 & 0x80000000) != 0)
      {
LABEL_14:
        dav1d_data_unref_internal((uint64_t)v12);
        close_internal((uint64_t *)&v11, 1);
        return v3;
      }
      if (*((_QWORD *)&v12[0] + 1))
      {
        do
        {
          v8 = dav1d_parse_obus(v11, (uint64_t)v12, 1);
          v3 = v8;
          if ((v8 & 0x80000000) != 0)
            goto LABEL_14;
          v9 = *((_QWORD *)&v12[0] + 1) == v8;
          *(_QWORD *)&v12[0] += v8;
          *((_QWORD *)&v12[0] + 1) -= v8;
        }
        while (!v9);
      }
    }
    v10 = *(const void **)(v11 + 72);
    if (v10)
    {
      memcpy(a1, v10, 0x5CCuLL);
      v3 = 0;
    }
    else
    {
      v3 = 4294967294;
    }
    goto LABEL_14;
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "Input validation check '%s' failed in %s!\n", "out != NULL", "dav1d_parse_sequence_header");
  return 4294967274;
}

uint64_t dav1d_send_data(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  FILE *v6;
  const char *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  if (!a1)
  {
    v6 = (FILE *)*MEMORY[0x1E0C80C10];
    v7 = "c != NULL";
LABEL_21:
    fprintf(v6, "Input validation check '%s' failed in %s!\n", v7, "dav1d_send_data");
    return 4294967274;
  }
  if (!a2)
  {
    v6 = (FILE *)*MEMORY[0x1E0C80C10];
    v7 = "in != NULL";
    goto LABEL_21;
  }
  v4 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_6;
  if (!*(_QWORD *)(a2 + 8))
  {
    v6 = (FILE *)*MEMORY[0x1E0C80C10];
    v7 = "in->data == NULL || in->sz";
    goto LABEL_21;
  }
  *(_DWORD *)(a1 + 88820) = 0;
LABEL_6:
  if (*(_QWORD *)(a1 + 152))
    return 4294967261;
  v8 = *(_QWORD *)(a2 + 16);
  if (!v8)
  {
LABEL_15:
    v11 = *(_QWORD *)(a2 + 64);
    if (v11)
    {
      v12 = (unsigned int *)(v11 + 16);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
    *(_OWORD *)(a1 + 152) = *(_OWORD *)a2;
    v14 = *(_OWORD *)(a2 + 16);
    v15 = *(_OWORD *)(a2 + 32);
    v16 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 184) = v15;
    *(_OWORD *)(a1 + 200) = v16;
    *(_OWORD *)(a1 + 168) = v14;
    result = gen_picture(a1);
    if (!(_DWORD)result)
      goto LABEL_23;
    return result;
  }
  if (v4)
  {
    v9 = (unsigned int *)(v8 + 16);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    goto LABEL_15;
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "Input validation check '%s' failed in %s!\n", "src->data != ((void *)0)", "dav1d_data_ref");
  result = gen_picture(a1);
  if (!(_DWORD)result)
  {
LABEL_23:
    dav1d_data_unref_internal(a2);
    return 0;
  }
  return result;
}

uint64_t gen_picture(unint64_t a1)
{
  _DWORD *v1;
  int v4;
  uint64_t v5;
  _BOOL4 v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;

  v1 = (_DWORD *)(a1 + 88796);
  if (*(_DWORD *)(a1 + 88880))
    return 0;
  if (*v1 || (v4 = *(_DWORD *)(a1 + 88800)) == 0 || !*(_QWORD *)(a1 + 240))
  {
    if (*(_QWORD *)(a1 + 240))
      return 0;
    while (1)
    {
LABEL_16:
      if (!*(_QWORD *)(a1 + 160))
        return 0;
      v7 = dav1d_parse_obus(a1, a1 + 152, 0);
      v8 = v7;
      if ((v7 & 0x80000000) != 0
        || (v9 = *(_QWORD *)(a1 + 160) - v7, *(_QWORD *)(a1 + 152) += v7, (*(_QWORD *)(a1 + 160) = v9) == 0))
      {
        dav1d_data_unref_internal(a1 + 152);
      }
      if (v1[21])
        return 0;
      if (*v1)
        break;
      v10 = v1[1];
      v5 = *(_QWORD *)(a1 + 240);
      if (!v10 || !v5)
        goto LABEL_14;
      if (*(_QWORD *)(a1 + 520))
      {
        if (v10 == *(_DWORD *)(*(_QWORD *)(a1 + 512) + 256) || (*(_BYTE *)(a1 + 492) & 4) != 0)
          return 0;
        dav1d_picture_unref_internal(a1 + 504);
        *(_QWORD *)(a1 + 776) = 0;
      }
      dav1d_picture_move_ref((_QWORD *)(a1 + 504), (_QWORD *)(a1 + 224));
      v6 = 0;
      *(_QWORD *)(a1 + 776) = *(_QWORD *)(a1 + 496);
      *(_QWORD *)(a1 + 768) = *(_QWORD *)(a1 + 488);
      *(_OWORD *)(a1 + 224) = 0u;
      *(_OWORD *)(a1 + 240) = 0u;
      *(_OWORD *)(a1 + 256) = 0u;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_OWORD *)(a1 + 304) = 0u;
      *(_OWORD *)(a1 + 320) = 0u;
      *(_OWORD *)(a1 + 336) = 0u;
      *(_OWORD *)(a1 + 352) = 0u;
      *(_OWORD *)(a1 + 368) = 0u;
      *(_OWORD *)(a1 + 384) = 0u;
      *(_OWORD *)(a1 + 400) = 0u;
      *(_OWORD *)(a1 + 416) = 0u;
      *(_OWORD *)(a1 + 432) = 0u;
      *(_OWORD *)(a1 + 448) = 0u;
      *(_OWORD *)(a1 + 464) = 0u;
      *(_QWORD *)(a1 + 496) = 0;
      *(_OWORD *)(a1 + 480) = 0u;
      if ((v8 & 0x80000000) != 0)
      {
LABEL_29:
        if (v6)
          return 0;
        else
          return v8;
      }
LABEL_15:
      if (v6)
        goto LABEL_29;
    }
    v5 = *(_QWORD *)(a1 + 240);
LABEL_14:
    v6 = v5 != 0;
    if ((v8 & 0x80000000) != 0)
      goto LABEL_29;
    goto LABEL_15;
  }
  if (!*(_QWORD *)(a1 + 520))
  {
LABEL_11:
    dav1d_picture_move_ref((_QWORD *)(a1 + 504), (_QWORD *)(a1 + 224));
    *(_QWORD *)(a1 + 776) = *(_QWORD *)(a1 + 496);
    *(_QWORD *)(a1 + 768) = *(_QWORD *)(a1 + 488);
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 320) = 0u;
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_OWORD *)(a1 + 368) = 0u;
    *(_OWORD *)(a1 + 384) = 0u;
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
    *(_OWORD *)(a1 + 432) = 0u;
    *(_OWORD *)(a1 + 448) = 0u;
    *(_OWORD *)(a1 + 464) = 0u;
    *(_QWORD *)(a1 + 496) = 0;
    *(_OWORD *)(a1 + 480) = 0u;
    goto LABEL_16;
  }
  if (v4 != *(_DWORD *)(*(_QWORD *)(a1 + 512) + 256) && (*(_BYTE *)(a1 + 492) & 4) == 0)
  {
    dav1d_picture_unref_internal(a1 + 504);
    *(_QWORD *)(a1 + 776) = 0;
    goto LABEL_11;
  }
  return 0;
}

uint64_t dav1d_get_picture(unint64_t a1, void *a2)
{
  _DWORD *v4;
  int v5;
  uint64_t result;
  FILE *v7;
  const char *v8;
  unsigned int v9;
  int v10;

  if (!a1)
  {
    v7 = (FILE *)*MEMORY[0x1E0C80C10];
    v8 = "c != NULL";
LABEL_9:
    fprintf(v7, "Input validation check '%s' failed in %s!\n", v8, "dav1d_get_picture");
    return 4294967274;
  }
  if (!a2)
  {
    v7 = (FILE *)*MEMORY[0x1E0C80C10];
    v8 = "out != NULL";
    goto LABEL_9;
  }
  v4 = (_DWORD *)(a1 + 88796);
  v5 = *(_DWORD *)(a1 + 88820);
  *(_DWORD *)(a1 + 88820) = 1;
  result = gen_picture(a1);
  if ((result & 0x80000000) != 0)
    return result;
  result = v4[21];
  if ((_DWORD)result)
  {
    v4[21] = 0;
    return result;
  }
  v9 = *(_DWORD *)(a1 + 8);
  if (*v4 || (v10 = v4[1]) == 0)
  {
LABEL_11:
    if (!*(_QWORD *)(a1 + 240))
      goto LABEL_20;
    return output_image(a1, a2);
  }
  if (!*(_QWORD *)(a1 + 240))
  {
    if (v9 == 1 && *(_QWORD *)(a1 + 520))
      return output_image(a1, a2);
    goto LABEL_11;
  }
  if (*(_QWORD *)(a1 + 520))
  {
    if (v10 != *(_DWORD *)(*(_QWORD *)(a1 + 512) + 256) && (*(_BYTE *)(a1 + 492) & 4) == 0)
    {
      dav1d_picture_unref_internal(a1 + 504);
      *(_QWORD *)(a1 + 776) = 0;
      goto LABEL_19;
    }
    return output_image(a1, a2);
  }
LABEL_19:
  dav1d_thread_picture_move_ref((_QWORD *)(a1 + 504), a1 + 224);
  v9 = *(_DWORD *)(a1 + 8);
LABEL_20:
  result = 4294967261;
  if (v9 >= 2)
  {
    if (v5)
      return drain_picture(a1, a2);
  }
  return result;
}

uint64_t output_image(uint64_t a1, void *__dst)
{
  _DWORD *v3;
  _OWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  FILE *v7;
  const char *v8;

  v3 = (_DWORD *)(a1 + 88784);
  if (*(_DWORD *)(a1 + 88796) || !*(_DWORD *)(a1 + 88800))
  {
    v4 = (_OWORD *)(a1 + 224);
    if (!*v3)
      goto LABEL_11;
  }
  else
  {
    v4 = (_OWORD *)(a1 + 504);
    if (!*v3)
      goto LABEL_11;
  }
  v5 = (_DWORD *)*((_QWORD *)v4 + 1);
  if (v5[1] || v5[10] || v5[11])
  {
    v6 = dav1d_apply_grain(a1, (uint64_t)__dst);
    dav1d_picture_unref_internal((uint64_t)v4);
    *((_QWORD *)v4 + 34) = 0;
    if (!v3[3])
      goto LABEL_20;
    return v6;
  }
LABEL_11:
  if (__dst)
  {
    if (*((_QWORD *)__dst + 2))
    {
      v7 = (FILE *)*MEMORY[0x1E0C80C10];
      v8 = "dst->data[0] == ((void *)0)";
    }
    else
    {
      if (!*((_QWORD *)v4 + 31) || *((_QWORD *)v4 + 2))
      {
        memcpy(__dst, v4, 0x108uLL);
        v6 = 0;
        *v4 = 0u;
        v4[1] = 0u;
        v4[2] = 0u;
        v4[3] = 0u;
        v4[4] = 0u;
        v4[5] = 0u;
        v4[6] = 0u;
        v4[7] = 0u;
        v4[8] = 0u;
        v4[9] = 0u;
        v4[10] = 0u;
        v4[11] = 0u;
        v4[12] = 0u;
        v4[13] = 0u;
        v4[14] = 0u;
        v4[15] = 0u;
        *((_QWORD *)v4 + 32) = 0;
        dav1d_picture_unref_internal((uint64_t)v4);
        *((_QWORD *)v4 + 34) = 0;
        if (v3[3])
          return v6;
        goto LABEL_20;
      }
      v7 = (FILE *)*MEMORY[0x1E0C80C10];
      v8 = "src->data[0] != ((void *)0)";
    }
  }
  else
  {
    v7 = (FILE *)*MEMORY[0x1E0C80C10];
    v8 = "dst != ((void *)0)";
  }
  fprintf(v7, "Input validation check '%s' failed in %s!\n", v8, "dav1d_picture_move_ref");
  v6 = 0;
  dav1d_picture_unref_internal((uint64_t)v4);
  *((_QWORD *)v4 + 34) = 0;
  if (v3[3])
    return v6;
LABEL_20:
  if (!v3[4] || !*(_QWORD *)(a1 + 240))
    return v6;
  dav1d_picture_move_ref(v4, (_QWORD *)(a1 + 224));
  *((_QWORD *)v4 + 34) = *(_QWORD *)(a1 + 496);
  *((_QWORD *)v4 + 33) = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  return v6;
}

uint64_t drain_picture(uint64_t a1, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  pthread_mutex_t *v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  pthread_cond_t *v13;
  pthread_mutex_t **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  BOOL v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  _OWORD *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v45;
  int v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v50;
  uint64_t v51;

  v3 = 0;
  v4 = a1 + 88796;
  v5 = (pthread_mutex_t *)(a1 + 832);
  v6 = (unsigned int *)(a1 + 944);
  v51 = a1 + 224;
  v50 = (_QWORD *)(a1 + 504);
  do
  {
    v8 = *(_DWORD *)(a1 + 808);
    v9 = *(_QWORD *)a1;
    pthread_mutex_lock(v5);
    v10 = v9 + 5392 * v8;
    if (*(int *)(v10 + 2988) >= 1)
    {
      v11 = (int *)(v10 + 2988);
      v12 = v9 + 5392 * v8;
      v13 = (pthread_cond_t *)(v12 + 5200);
      v14 = (pthread_mutex_t **)(v12 + 5248);
      do
        pthread_cond_wait(v13, *v14);
      while (*v11 > 0);
    }
    v15 = *(_QWORD *)(a1 + 800);
    v16 = v15 + 280 * v8;
    if (*(_QWORD *)(v16 + 16) || (v17 = atomic_load((unsigned int *)(v9 + 5392 * v8 + 5340))) != 0)
    {
      v18 = atomic_load((unsigned int *)(a1 + 944));
      v19 = v18 + 1;
      v20 = *(_DWORD *)(a1 + 8);
      if (v19 >= v20)
      {
        atomic_store(0, v6);
        v22 = *(_DWORD *)(a1 + 948);
        if (v22)
          v24 = v22 >= v20;
        else
          v24 = 1;
        if (!v24)
LABEL_22:
          *(_DWORD *)(a1 + 948) = v22 - 1;
      }
      else
      {
        do
          v21 = __ldaxr(v6);
        while (__stlxr(v21 + 1, v6));
        v20 = *(_DWORD *)(a1 + 8);
        v22 = *(_DWORD *)(a1 + 948);
        if (v22)
          v23 = v22 >= v20;
        else
          v23 = 1;
        if (!v23)
          goto LABEL_22;
      }
    }
    else
    {
      v20 = *(_DWORD *)(a1 + 8);
    }
    v25 = *(_DWORD *)(a1 + 808);
    if (v25 + 1 == v20)
      v26 = 0;
    else
      v26 = v25 + 1;
    *(_DWORD *)(a1 + 808) = v26;
    pthread_mutex_unlock(v5);
    v27 = v9 + 5392 * v8;
    v28 = *(unsigned int *)(v27 + 5332);
    if ((_DWORD)v28)
    {
      *(_DWORD *)(v27 + 5332) = 0;
      v33 = (_OWORD *)(a1 + 88832);
      v34 = *(_QWORD *)(v4 + 76);
      if (v34)
      {
        v35 = (unsigned int *)(v34 + 16);
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          v38 = *(_DWORD *)(v34 + 20);
          (*(void (**)(_QWORD, _QWORD))(v34 + 24))(*(_QWORD *)(v34 + 8), *(_QWORD *)(v34 + 32));
          if (v38)
            free((void *)v34);
        }
        *(_QWORD *)(v4 + 76) = 0;
      }
      v39 = *(_OWORD *)(v16 + 72);
      v40 = *(_OWORD *)(v16 + 104);
      v33[1] = *(_OWORD *)(v16 + 88);
      v33[2] = v40;
      *v33 = v39;
      v41 = *(_QWORD *)(v4 + 76);
      if (v41)
      {
        v42 = (unsigned int *)(v41 + 16);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 + 1, v42));
      }
      dav1d_picture_unref_internal(v15 + 280 * v8);
      *(_QWORD *)(v15 + 280 * v8 + 272) = 0;
      return v28;
    }
    if (*(_QWORD *)(v16 + 16))
    {
      v29 = v15 + 280 * v8;
      v30 = (_QWORD *)(v29 + 272);
      if ((*(_DWORD *)(v29 + 264) || *(_DWORD *)(v4 + 16)) && *(_DWORD *)(*(_QWORD *)(v29 + 272) + 4) != -2)
      {
        v31 = (_QWORD *)(v29 + 264);
        dav1d_picture_ref((_QWORD *)v51, (_QWORD *)(v15 + 280 * v8));
        *(_QWORD *)(a1 + 496) = *v30;
        *(_QWORD *)(a1 + 488) = *v31;
        *(_DWORD *)(v4 + 32) |= *(_DWORD *)(v15 + 280 * v8 + 268) & 3;
      }
      dav1d_picture_unref_internal(v15 + 280 * v8);
      *v30 = 0;
      if (*(_DWORD *)(v4 + 84))
        return output_image(a1, a2);
      if (*(_DWORD *)v4)
      {
        v7 = *(_QWORD *)(a1 + 240);
LABEL_3:
        if (v7)
          return output_image(a1, a2);
        goto LABEL_4;
      }
      v32 = *(_DWORD *)(v4 + 4);
      v7 = *(_QWORD *)(a1 + 240);
      if (!v32)
        goto LABEL_3;
      if (v7)
      {
        if (*(_QWORD *)(a1 + 520))
        {
          if (v32 == *(_DWORD *)(*(_QWORD *)(a1 + 512) + 256) || (*(_BYTE *)(a1 + 492) & 4) != 0)
            return output_image(a1, a2);
          dav1d_picture_unref_internal((uint64_t)v50);
          *(_QWORD *)(a1 + 776) = 0;
        }
        dav1d_picture_move_ref(v50, (_QWORD *)v51);
        *(_QWORD *)(a1 + 776) = *(_QWORD *)(a1 + 496);
        *(_QWORD *)(a1 + 768) = *(_QWORD *)(a1 + 488);
        *(_OWORD *)v51 = 0u;
        *(_OWORD *)(v51 + 16) = 0u;
        *(_OWORD *)(v51 + 32) = 0u;
        *(_OWORD *)(v51 + 48) = 0u;
        *(_OWORD *)(v51 + 64) = 0u;
        *(_OWORD *)(v51 + 80) = 0u;
        *(_OWORD *)(v51 + 96) = 0u;
        *(_OWORD *)(v51 + 112) = 0u;
        *(_OWORD *)(v51 + 128) = 0u;
        *(_OWORD *)(v51 + 144) = 0u;
        *(_OWORD *)(v51 + 160) = 0u;
        *(_OWORD *)(v51 + 176) = 0u;
        *(_OWORD *)(v51 + 192) = 0u;
        *(_OWORD *)(v51 + 208) = 0u;
        *(_OWORD *)(v51 + 224) = 0u;
        *(_OWORD *)(v51 + 240) = 0u;
        *(_QWORD *)(v51 + 272) = 0;
        *(_OWORD *)(v51 + 256) = 0u;
      }
    }
LABEL_4:
    ++v3;
  }
  while (v3 < *(_DWORD *)(a1 + 8));
  if (*(_DWORD *)(v4 + 84))
    return output_image(a1, a2);
  if (*(_DWORD *)v4)
  {
    v45 = *(_QWORD *)(a1 + 240);
    goto LABEL_57;
  }
  v46 = *(_DWORD *)(v4 + 4);
  v45 = *(_QWORD *)(a1 + 240);
  if (!v46)
  {
LABEL_57:
    if (v45)
      return output_image(a1, a2);
    return 4294967261;
  }
  v47 = *(_QWORD *)(a1 + 520);
  if (!v45)
  {
    if (v47)
      return output_image(a1, a2);
    return 4294967261;
  }
  if (!v47)
  {
    v48 = v50;
LABEL_68:
    dav1d_thread_picture_move_ref(v48, v51);
    return 4294967261;
  }
  if (v46 != *(_DWORD *)(*(_QWORD *)(a1 + 512) + 256) && (*(_BYTE *)(a1 + 492) & 4) == 0)
  {
    dav1d_picture_unref_internal((uint64_t)v50);
    *(_QWORD *)(a1 + 776) = 0;
    v48 = v50;
    goto LABEL_68;
  }
  return output_image(a1, a2);
}

uint64_t dav1d_apply_grain(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  FILE *v11;
  const char *v12;
  unsigned int v14;
  uint64_t (**v15)(uint64_t, uint64_t);
  int v16;
  int v17;
  unsigned int v18;
  uint64_t (**v19)(uint64_t, uint64_t, uint64_t);
  int v20;
  int v21;
  unsigned int v22;
  char v23[12288];
  _QWORD v24[4552];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v24[4551] = *MEMORY[0x1E0C80C00];
  if (!v2)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    v12 = "c != NULL";
LABEL_13:
    fprintf(v11, "Input validation check '%s' failed in %s!\n", v12, "dav1d_apply_grain");
    return 4294967274;
  }
  v5 = (uint64_t)v3;
  if (!v3)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    v12 = "out != NULL";
    goto LABEL_13;
  }
  v6 = v4;
  if (!v4)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    v12 = "in != NULL";
    goto LABEL_13;
  }
  v7 = v2;
  v8 = *(_DWORD **)(v4 + 8);
  if (v8[1] || v8[10] || v8[11])
  {
    v9 = picture_alloc_with_edges((uint64_t)v3, *(_DWORD *)(v4 + 56), *(_DWORD *)(v4 + 60), *(_QWORD *)v4, *(_QWORD *)(v4 + 184), (uint64_t)v8, *(_QWORD *)(v4 + 176), *(_QWORD *)(v4 + 120), *(_QWORD *)(v4 + 192), *(_QWORD *)(v4 + 128), *(_QWORD *)(v4 + 200), *(_QWORD *)(v4 + 136), *(_QWORD *)(v4 + 208), *(_DWORD *)(v4 + 68), (__int128 *)(v4 + 72), *(_QWORD **)(*(_QWORD *)(v4 + 248) + 32), 0, 0);
    if ((v9 & 0x80000000) != 0)
    {
      v10 = v9;
      dav1d_picture_unref_internal(v5);
    }
    else if (*(_DWORD *)(v7 + 24) < 2u)
    {
      v14 = *(_DWORD *)(v5 + 68);
      if (v14 == 12 || v14 == 10)
      {
        v19 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 3368 * ((v14 >> 1) - 4) + 52696);
        v20 = *(_DWORD *)(v5 + 60);
        dav1d_prep_grain_16bpc(v19, v5, v6, v23, (uint64_t)v24);
        if (v20 >= 1)
        {
          v21 = 0;
          v22 = (v20 + 31) >> 5;
          do
            dav1d_apply_grain_row_16bpc((uint64_t)v19, v5, v6, (uint64_t)v23, (uint64_t)v24, v21++);
          while (v22 != v21);
        }
      }
      else
      {
        if (v14 != 8)
          abort();
        v15 = (uint64_t (**)(uint64_t, uint64_t))(v7 + 52696);
        v16 = *(_DWORD *)(v5 + 60);
        dav1d_prep_grain_8bpc(v15, v5, v6, (uint64_t)v23, (uint64_t)v24);
        if (v16 >= 1)
        {
          v17 = 0;
          v18 = (v16 + 31) >> 5;
          do
            dav1d_apply_grain_row_8bpc((uint64_t)v15, v5, v6, (uint64_t)v23, (uint64_t)v24, v17++);
          while (v18 != v17);
        }
      }
      return 0;
    }
    else
    {
      *(_QWORD *)(v7 + 1016) = v6;
      *(_QWORD *)(v7 + 1024) = v5;
      *(_QWORD *)(v7 + 1032) = 11;
      *(_DWORD *)(v7 + 1040) = 0;
      pthread_mutex_lock((pthread_mutex_t *)(v7 + 832));
      *(_DWORD *)(v7 + 960) = 1;
      pthread_cond_signal((pthread_cond_t *)(v7 + 896));
      pthread_cond_wait((pthread_cond_t *)(v7 + 968), (pthread_mutex_t *)(v7 + 832));
      pthread_mutex_unlock((pthread_mutex_t *)(v7 + 832));
      return 0;
    }
  }
  else
  {
    dav1d_picture_ref(v3, (_QWORD *)v4);
    return 0;
  }
  return v10;
}

void dav1d_flush(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  uint64_t v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  uint64_t v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  uint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  unint64_t v150;
  unint64_t i;
  uint64_t v152;
  _DWORD *v153;
  pthread_cond_t *v154;
  int v155;
  _QWORD *v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;

  v2 = a1 + 88820;
  v3 = (_QWORD *)(a1 + 49888);
  dav1d_data_unref_internal(a1 + 152);
  if (*(_QWORD *)(a1 + 240))
  {
    dav1d_picture_unref_internal(a1 + 224);
    *(_QWORD *)(a1 + 496) = 0;
  }
  if (*(_QWORD *)(a1 + 520))
  {
    dav1d_picture_unref_internal(a1 + 504);
    *(_QWORD *)(a1 + 776) = 0;
  }
  *(_DWORD *)v2 = 0;
  *(_DWORD *)(v2 + 60) = 0;
  if (*v3)
  {
    dav1d_picture_unref_internal(a1 + 49872);
    v3[32] = 0;
  }
  v4 = (uint64_t *)(a1 + 52504);
  v5 = v3[33];
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 16);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      v9 = *(_DWORD *)(v5 + 20);
      (*(void (**)(_QWORD, _QWORD))(v5 + 24))(*(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 32));
      if (v9)
        free((void *)v5);
    }
    v3[33] = 0;
  }
  v10 = v3[34];
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 16);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      v14 = *(_DWORD *)(v10 + 20);
      (*(void (**)(_QWORD, _QWORD))(v10 + 24))(*(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 32));
      if (v14)
        free((void *)v10);
    }
    v3[34] = 0;
  }
  v15 = *v4;
  if (*v4)
  {
    v16 = (unsigned int *)(v15 + 16);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      v19 = *(_DWORD *)(v15 + 20);
      (*(void (**)(_QWORD, _QWORD))(v15 + 24))(*(_QWORD *)(v15 + 8), *(_QWORD *)(v15 + 32));
      if (v19)
        free((void *)v15);
    }
  }
  *v4 = 0;
  *(_QWORD *)(a1 + 52512) = 0;
  *(_QWORD *)(a1 + 52520) = 0;
  if (*(_QWORD *)(a1 + 50216))
  {
    dav1d_picture_unref_internal(a1 + 50200);
    *(_QWORD *)(a1 + 50472) = 0;
  }
  v20 = *(_QWORD *)(a1 + 50480);
  if (v20)
  {
    v21 = (unsigned int *)(v20 + 16);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      v24 = *(_DWORD *)(v20 + 20);
      (*(void (**)(_QWORD, _QWORD))(v20 + 24))(*(_QWORD *)(v20 + 8), *(_QWORD *)(v20 + 32));
      if (v24)
        free((void *)v20);
    }
    *(_QWORD *)(a1 + 50480) = 0;
  }
  v25 = *(_QWORD *)(a1 + 50488);
  if (v25)
  {
    v26 = (unsigned int *)(v25 + 16);
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      v29 = *(_DWORD *)(v25 + 20);
      (*(void (**)(_QWORD, _QWORD))(v25 + 24))(*(_QWORD *)(v25 + 8), *(_QWORD *)(v25 + 32));
      if (v29)
        free((void *)v25);
    }
    *(_QWORD *)(a1 + 50488) = 0;
  }
  v30 = *(_QWORD *)(a1 + 52528);
  if (v30)
  {
    v31 = (unsigned int *)(v30 + 16);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      v34 = *(_DWORD *)(v30 + 20);
      (*(void (**)(_QWORD, _QWORD))(v30 + 24))(*(_QWORD *)(v30 + 8), *(_QWORD *)(v30 + 32));
      if (v34)
        free((void *)v30);
    }
  }
  *(_QWORD *)(a1 + 52528) = 0;
  *(_QWORD *)(a1 + 52536) = 0;
  *(_QWORD *)(a1 + 52544) = 0;
  if (*(_QWORD *)(a1 + 50544))
  {
    dav1d_picture_unref_internal(a1 + 50528);
    *(_QWORD *)(a1 + 50800) = 0;
  }
  v35 = *(_QWORD *)(a1 + 50808);
  if (v35)
  {
    v36 = (unsigned int *)(v35 + 16);
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      v39 = *(_DWORD *)(v35 + 20);
      (*(void (**)(_QWORD, _QWORD))(v35 + 24))(*(_QWORD *)(v35 + 8), *(_QWORD *)(v35 + 32));
      if (v39)
        free((void *)v35);
    }
    *(_QWORD *)(a1 + 50808) = 0;
  }
  v40 = *(_QWORD *)(a1 + 50816);
  if (v40)
  {
    v41 = (unsigned int *)(v40 + 16);
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      v44 = *(_DWORD *)(v40 + 20);
      (*(void (**)(_QWORD, _QWORD))(v40 + 24))(*(_QWORD *)(v40 + 8), *(_QWORD *)(v40 + 32));
      if (v44)
        free((void *)v40);
    }
    *(_QWORD *)(a1 + 50816) = 0;
  }
  v45 = *(_QWORD *)(a1 + 52552);
  if (v45)
  {
    v46 = (unsigned int *)(v45 + 16);
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
    {
      v49 = *(_DWORD *)(v45 + 20);
      (*(void (**)(_QWORD, _QWORD))(v45 + 24))(*(_QWORD *)(v45 + 8), *(_QWORD *)(v45 + 32));
      if (v49)
        free((void *)v45);
    }
  }
  *(_QWORD *)(a1 + 52552) = 0;
  *(_QWORD *)(a1 + 52560) = 0;
  *(_QWORD *)(a1 + 52568) = 0;
  if (*(_QWORD *)(a1 + 50872))
  {
    dav1d_picture_unref_internal(a1 + 50856);
    *(_QWORD *)(a1 + 51128) = 0;
  }
  v50 = *(_QWORD *)(a1 + 51136);
  if (v50)
  {
    v51 = (unsigned int *)(v50 + 16);
    do
    {
      v52 = __ldaxr(v51);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, v51));
    if (!v53)
    {
      v54 = *(_DWORD *)(v50 + 20);
      (*(void (**)(_QWORD, _QWORD))(v50 + 24))(*(_QWORD *)(v50 + 8), *(_QWORD *)(v50 + 32));
      if (v54)
        free((void *)v50);
    }
    *(_QWORD *)(a1 + 51136) = 0;
  }
  v55 = *(_QWORD *)(a1 + 51144);
  if (v55)
  {
    v56 = (unsigned int *)(v55 + 16);
    do
    {
      v57 = __ldaxr(v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v56));
    if (!v58)
    {
      v59 = *(_DWORD *)(v55 + 20);
      (*(void (**)(_QWORD, _QWORD))(v55 + 24))(*(_QWORD *)(v55 + 8), *(_QWORD *)(v55 + 32));
      if (v59)
        free((void *)v55);
    }
    *(_QWORD *)(a1 + 51144) = 0;
  }
  v60 = *(_QWORD *)(a1 + 52576);
  if (v60)
  {
    v61 = (unsigned int *)(v60 + 16);
    do
    {
      v62 = __ldaxr(v61);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, v61));
    if (!v63)
    {
      v64 = *(_DWORD *)(v60 + 20);
      (*(void (**)(_QWORD, _QWORD))(v60 + 24))(*(_QWORD *)(v60 + 8), *(_QWORD *)(v60 + 32));
      if (v64)
        free((void *)v60);
    }
  }
  *(_QWORD *)(a1 + 52576) = 0;
  *(_QWORD *)(a1 + 52584) = 0;
  *(_QWORD *)(a1 + 52592) = 0;
  if (*(_QWORD *)(a1 + 51200))
  {
    dav1d_picture_unref_internal(a1 + 51184);
    *(_QWORD *)(a1 + 51456) = 0;
  }
  v65 = *(_QWORD *)(a1 + 51464);
  if (v65)
  {
    v66 = (unsigned int *)(v65 + 16);
    do
    {
      v67 = __ldaxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
    {
      v69 = *(_DWORD *)(v65 + 20);
      (*(void (**)(_QWORD, _QWORD))(v65 + 24))(*(_QWORD *)(v65 + 8), *(_QWORD *)(v65 + 32));
      if (v69)
        free((void *)v65);
    }
    *(_QWORD *)(a1 + 51464) = 0;
  }
  v70 = *(_QWORD *)(a1 + 51472);
  if (v70)
  {
    v71 = (unsigned int *)(v70 + 16);
    do
    {
      v72 = __ldaxr(v71);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, v71));
    if (!v73)
    {
      v74 = *(_DWORD *)(v70 + 20);
      (*(void (**)(_QWORD, _QWORD))(v70 + 24))(*(_QWORD *)(v70 + 8), *(_QWORD *)(v70 + 32));
      if (v74)
        free((void *)v70);
    }
    *(_QWORD *)(a1 + 51472) = 0;
  }
  v75 = *(_QWORD *)(a1 + 52600);
  if (v75)
  {
    v76 = (unsigned int *)(v75 + 16);
    do
    {
      v77 = __ldaxr(v76);
      v78 = v77 - 1;
    }
    while (__stlxr(v78, v76));
    if (!v78)
    {
      v79 = *(_DWORD *)(v75 + 20);
      (*(void (**)(_QWORD, _QWORD))(v75 + 24))(*(_QWORD *)(v75 + 8), *(_QWORD *)(v75 + 32));
      if (v79)
        free((void *)v75);
    }
  }
  *(_QWORD *)(a1 + 52600) = 0;
  *(_QWORD *)(a1 + 52608) = 0;
  *(_QWORD *)(a1 + 52616) = 0;
  if (*(_QWORD *)(a1 + 51528))
  {
    dav1d_picture_unref_internal(a1 + 51512);
    *(_QWORD *)(a1 + 51784) = 0;
  }
  v80 = *(_QWORD *)(a1 + 51792);
  if (v80)
  {
    v81 = (unsigned int *)(v80 + 16);
    do
    {
      v82 = __ldaxr(v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, v81));
    if (!v83)
    {
      v84 = *(_DWORD *)(v80 + 20);
      (*(void (**)(_QWORD, _QWORD))(v80 + 24))(*(_QWORD *)(v80 + 8), *(_QWORD *)(v80 + 32));
      if (v84)
        free((void *)v80);
    }
    *(_QWORD *)(a1 + 51792) = 0;
  }
  v85 = *(_QWORD *)(a1 + 51800);
  if (v85)
  {
    v86 = (unsigned int *)(v85 + 16);
    do
    {
      v87 = __ldaxr(v86);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, v86));
    if (!v88)
    {
      v89 = *(_DWORD *)(v85 + 20);
      (*(void (**)(_QWORD, _QWORD))(v85 + 24))(*(_QWORD *)(v85 + 8), *(_QWORD *)(v85 + 32));
      if (v89)
        free((void *)v85);
    }
    *(_QWORD *)(a1 + 51800) = 0;
  }
  v90 = *(_QWORD *)(a1 + 52624);
  if (v90)
  {
    v91 = (unsigned int *)(v90 + 16);
    do
    {
      v92 = __ldaxr(v91);
      v93 = v92 - 1;
    }
    while (__stlxr(v93, v91));
    if (!v93)
    {
      v94 = *(_DWORD *)(v90 + 20);
      (*(void (**)(_QWORD, _QWORD))(v90 + 24))(*(_QWORD *)(v90 + 8), *(_QWORD *)(v90 + 32));
      if (v94)
        free((void *)v90);
    }
  }
  *(_QWORD *)(a1 + 52624) = 0;
  *(_QWORD *)(a1 + 52632) = 0;
  *(_QWORD *)(a1 + 52640) = 0;
  if (*(_QWORD *)(a1 + 51856))
  {
    dav1d_picture_unref_internal(a1 + 51840);
    *(_QWORD *)(a1 + 52112) = 0;
  }
  v95 = *(_QWORD *)(a1 + 52120);
  if (v95)
  {
    v96 = (unsigned int *)(v95 + 16);
    do
    {
      v97 = __ldaxr(v96);
      v98 = v97 - 1;
    }
    while (__stlxr(v98, v96));
    if (!v98)
    {
      v99 = *(_DWORD *)(v95 + 20);
      (*(void (**)(_QWORD, _QWORD))(v95 + 24))(*(_QWORD *)(v95 + 8), *(_QWORD *)(v95 + 32));
      if (v99)
        free((void *)v95);
    }
    *(_QWORD *)(a1 + 52120) = 0;
  }
  v100 = *(_QWORD *)(a1 + 52128);
  if (v100)
  {
    v101 = (unsigned int *)(v100 + 16);
    do
    {
      v102 = __ldaxr(v101);
      v103 = v102 - 1;
    }
    while (__stlxr(v103, v101));
    if (!v103)
    {
      v104 = *(_DWORD *)(v100 + 20);
      (*(void (**)(_QWORD, _QWORD))(v100 + 24))(*(_QWORD *)(v100 + 8), *(_QWORD *)(v100 + 32));
      if (v104)
        free((void *)v100);
    }
    *(_QWORD *)(a1 + 52128) = 0;
  }
  v105 = *(_QWORD *)(a1 + 52648);
  if (v105)
  {
    v106 = (unsigned int *)(v105 + 16);
    do
    {
      v107 = __ldaxr(v106);
      v108 = v107 - 1;
    }
    while (__stlxr(v108, v106));
    if (!v108)
    {
      v109 = *(_DWORD *)(v105 + 20);
      (*(void (**)(_QWORD, _QWORD))(v105 + 24))(*(_QWORD *)(v105 + 8), *(_QWORD *)(v105 + 32));
      if (v109)
        free((void *)v105);
    }
  }
  *(_QWORD *)(a1 + 52648) = 0;
  *(_QWORD *)(a1 + 52656) = 0;
  *(_QWORD *)(a1 + 52664) = 0;
  if (*(_QWORD *)(a1 + 52184))
  {
    dav1d_picture_unref_internal(a1 + 52168);
    *(_QWORD *)(a1 + 52440) = 0;
  }
  v110 = *(_QWORD *)(a1 + 52448);
  if (v110)
  {
    v111 = (unsigned int *)(v110 + 16);
    do
    {
      v112 = __ldaxr(v111);
      v113 = v112 - 1;
    }
    while (__stlxr(v113, v111));
    if (!v113)
    {
      v114 = *(_DWORD *)(v110 + 20);
      (*(void (**)(_QWORD, _QWORD))(v110 + 24))(*(_QWORD *)(v110 + 8), *(_QWORD *)(v110 + 32));
      if (v114)
        free((void *)v110);
    }
    *(_QWORD *)(a1 + 52448) = 0;
  }
  v115 = *(_QWORD *)(a1 + 52456);
  if (v115)
  {
    v116 = (unsigned int *)(v115 + 16);
    do
    {
      v117 = __ldaxr(v116);
      v118 = v117 - 1;
    }
    while (__stlxr(v118, v116));
    if (!v118)
    {
      v119 = *(_DWORD *)(v115 + 20);
      (*(void (**)(_QWORD, _QWORD))(v115 + 24))(*(_QWORD *)(v115 + 8), *(_QWORD *)(v115 + 32));
      if (v119)
        free((void *)v115);
    }
    *(_QWORD *)(a1 + 52456) = 0;
  }
  v120 = *(_QWORD *)(a1 + 52672);
  if (v120)
  {
    v121 = (unsigned int *)(v120 + 16);
    do
    {
      v122 = __ldaxr(v121);
      v123 = v122 - 1;
    }
    while (__stlxr(v123, v121));
    if (!v123)
    {
      v124 = *(_DWORD *)(v120 + 20);
      (*(void (**)(_QWORD, _QWORD))(v120 + 24))(*(_QWORD *)(v120 + 8), *(_QWORD *)(v120 + 32));
      if (v124)
        free((void *)v120);
    }
  }
  *(_QWORD *)(a1 + 52672) = 0;
  *(_QWORD *)(a1 + 52680) = 0;
  *(_QWORD *)(a1 + 52688) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v125 = *(_QWORD *)(a1 + 64);
  if (v125)
  {
    v126 = (unsigned int *)(v125 + 16);
    do
    {
      v127 = __ldaxr(v126);
      v128 = v127 - 1;
    }
    while (__stlxr(v128, v126));
    if (!v128)
    {
      v129 = *(_DWORD *)(v125 + 20);
      (*(void (**)(_QWORD, _QWORD))(v125 + 24))(*(_QWORD *)(v125 + 8), *(_QWORD *)(v125 + 32));
      if (v129)
        free((void *)v125);
    }
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v130 = *(_QWORD *)(a1 + 120);
  if (v130)
  {
    v131 = (unsigned int *)(v130 + 16);
    do
    {
      v132 = __ldaxr(v131);
      v133 = v132 - 1;
    }
    while (__stlxr(v133, v131));
    if (!v133)
    {
      v134 = *(_DWORD *)(v130 + 20);
      (*(void (**)(_QWORD, _QWORD))(v130 + 24))(*(_QWORD *)(v130 + 8), *(_QWORD *)(v130 + 32));
      if (v134)
        free((void *)v130);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  v135 = *(_QWORD *)(a1 + 104);
  if (v135)
  {
    v136 = (unsigned int *)(v135 + 16);
    do
    {
      v137 = __ldaxr(v136);
      v138 = v137 - 1;
    }
    while (__stlxr(v138, v136));
    if (!v138)
    {
      v139 = *(_DWORD *)(v135 + 20);
      (*(void (**)(_QWORD, _QWORD))(v135 + 24))(*(_QWORD *)(v135 + 8), *(_QWORD *)(v135 + 32));
      if (v139)
        free((void *)v135);
    }
    *(_QWORD *)(a1 + 104) = 0;
  }
  v140 = *(_QWORD *)(a1 + 136);
  if (v140)
  {
    v141 = (unsigned int *)(v140 + 16);
    do
    {
      v142 = __ldaxr(v141);
      v143 = v142 - 1;
    }
    while (__stlxr(v143, v141));
    if (!v143)
    {
      v144 = *(_DWORD *)(v140 + 20);
      (*(void (**)(_QWORD, _QWORD))(v140 + 24))(*(_QWORD *)(v140 + 8), *(_QWORD *)(v140 + 32));
      if (v144)
        free((void *)v140);
    }
    *(_QWORD *)(a1 + 136) = 0;
  }
  v145 = *(_QWORD *)(v2 + 52);
  *(_OWORD *)(v2 + 12) = 0u;
  *(_OWORD *)(v2 + 28) = 0u;
  *(_OWORD *)(v2 + 44) = 0u;
  *(_QWORD *)(v2 + 12) = 0x8000000000000000;
  *(_QWORD *)(v2 + 28) = -1;
  if (v145)
  {
    v146 = (unsigned int *)(v145 + 16);
    do
    {
      v147 = __ldaxr(v146);
      v148 = v147 - 1;
    }
    while (__stlxr(v148, v146));
    if (!v148)
    {
      v149 = *(_DWORD *)(v145 + 20);
      (*(void (**)(_QWORD, _QWORD))(v145 + 24))(*(_QWORD *)(v145 + 8), *(_QWORD *)(v145 + 32));
      if (v149)
        free((void *)v145);
    }
  }
  if (*(_DWORD *)(a1 + 8) != 1 || *(_DWORD *)(a1 + 24) != 1)
  {
    atomic_store(1u, *(unsigned int **)(a1 + 792));
    if (*(_DWORD *)(a1 + 24) >= 2u)
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 832));
      v150 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v150)
      {
        for (i = 0; i < v150; ++i)
        {
          v152 = *(_QWORD *)(a1 + 16);
          v153 = (_DWORD *)(v152 + 259776 * i + 259736);
          if (!*v153)
          {
            v154 = (pthread_cond_t *)(v152 + 259776 * i + 259600);
            do
              pthread_cond_wait(v154, (pthread_mutex_t *)(a1 + 832));
            while (!*v153);
            v150 = *(unsigned int *)(a1 + 24);
          }
        }
      }
      v155 = *(_DWORD *)(a1 + 8);
      if (v155)
      {
        v156 = (_QWORD *)(*(_QWORD *)a1 + 5352);
        v157 = *(unsigned int *)(a1 + 8);
        do
        {
          *v156 = 0;
          v156[1] = 0;
          v156[2] = 0;
          v156 += 674;
          --v157;
        }
        while (v157);
      }
      *(_DWORD *)(a1 + 944) = 0;
      *(_DWORD *)(a1 + 948) = v155;
      atomic_store(0xFFFFFFFF, (unsigned int *)(a1 + 952));
      atomic_store(0, (unsigned int *)(a1 + 956));
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 832));
    }
    v158 = *(_DWORD *)(a1 + 8);
    if (v158 >= 2)
    {
      v159 = 0;
      v160 = *(_DWORD *)(a1 + 808);
      do
      {
        if (v160 == v158)
          v161 = 0;
        else
          v161 = v160;
        v162 = *(_QWORD *)a1 + 5392 * v161;
        dav1d_decode_frame_exit((uint64_t *)v162, -1);
        *(_DWORD *)(v162 + 2988) = 0;
        *(_DWORD *)(v162 + 5332) = 0;
        v163 = *(_QWORD *)(a1 + 800);
        v164 = v163 + 280 * v161;
        if (*(_QWORD *)(v164 + 16))
        {
          dav1d_picture_unref_internal(v164);
          *(_QWORD *)(v163 + 280 * v161 + 272) = 0;
        }
        ++v159;
        v160 = v161 + 1;
        v158 = *(_DWORD *)(a1 + 8);
      }
      while (v159 < v158);
      *(_DWORD *)(a1 + 808) = 0;
    }
    atomic_store(0, *(unsigned int **)(a1 + 792));
  }
}

uint64_t dav1d_get_event_flags(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  FILE *v4;
  const char *v5;

  if (a1)
  {
    if (a2)
    {
      result = 0;
      *a2 = *(_DWORD *)(a1 + 88828);
      *(_DWORD *)(a1 + 88828) = 0;
      return result;
    }
    v4 = (FILE *)*MEMORY[0x1E0C80C10];
    v5 = "flags != NULL";
  }
  else
  {
    v4 = (FILE *)*MEMORY[0x1E0C80C10];
    v5 = "c != NULL";
  }
  fprintf(v4, "Input validation check '%s' failed in %s!\n", v5, "dav1d_get_event_flags");
  return 4294967274;
}

uint64_t dav1d_get_decode_error_data_props(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  FILE *v13;
  const char *v14;

  if (!a1)
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = "c != NULL";
LABEL_12:
    fprintf(v13, "Input validation check '%s' failed in %s!\n", v14, "dav1d_get_decode_error_data_props");
    return 4294967274;
  }
  if (!a2)
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = "out != NULL";
    goto LABEL_12;
  }
  v3 = (_OWORD *)(a1 + 88832);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = 0uLL;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_QWORD *)a2 = 0x8000000000000000;
  *(_QWORD *)(a2 + 16) = -1;
  if (v4)
  {
    v6 = (unsigned int *)(v4 + 16);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      v9 = *(_DWORD *)(v4 + 20);
      (*(void (**)(_QWORD, _QWORD))(v4 + 24))(*(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 32));
      v5 = 0uLL;
      if (v9)
      {
        free((void *)v4);
        v5 = 0uLL;
      }
    }
  }
  result = 0;
  v11 = *v3;
  v12 = v3[2];
  *(_OWORD *)(a2 + 16) = v3[1];
  *(_OWORD *)(a2 + 32) = v12;
  *(_OWORD *)a2 = v11;
  *v3 = v5;
  v3[1] = v5;
  v3[2] = v5;
  *(_QWORD *)v3 = 0x8000000000000000;
  *((_QWORD *)v3 + 2) = -1;
  return result;
}

uint64_t dav1d_data_wrap_user_data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;
  FILE *v11;
  const char *v12;

  if (!a1)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    v12 = "buf != NULL";
LABEL_7:
    fprintf(v11, "Input validation check '%s' failed in %s!\n", v12, "dav1d_data_wrap_user_data_internal");
    return 4294967274;
  }
  if (!a3)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    v12 = "free_callback != NULL";
    goto LABEL_7;
  }
  v8 = malloc_type_malloc(0x28uLL, 0x10C0040DB5B76A7uLL);
  if (v8)
  {
    v9 = v8;
    result = 0;
    *v9 = 0;
    v9[1] = a2;
    v9[2] = 0x100000001;
    v9[3] = a3;
    v9[4] = a4;
    *(_QWORD *)(a1 + 56) = a2;
    *(_QWORD *)(a1 + 64) = v9;
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
    return 4294967284;
  }
  return result;
}

void dav1d_data_props_unref(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;

  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 40);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = 0x8000000000000000;
    *(_QWORD *)(a1 + 16) = -1;
    if (v1)
    {
      v2 = (unsigned int *)(v1 + 16);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_DWORD *)(v1 + 20);
        (*(void (**)(_QWORD, _QWORD))(v1 + 24))(*(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 32));
        if (v5)
          free((void *)v1);
      }
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Input validation check '%s' failed in %s!\n", "props != ((void *)0)", "dav1d_data_props_unref_internal");
  }
}

char *dav1d_mem_pool_pop(uint64_t a1, char *a2)
{
  char *v4;
  int v6;
  void *memptr;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v4 = *(char **)(a1 + 64);
  ++*(_DWORD *)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 64) = *((_QWORD *)v4 + 1);
    pthread_mutex_unlock((pthread_mutex_t *)a1);
    if (&v4[-*(_QWORD *)v4] == a2)
      return v4;
    free(*(void **)v4);
  }
  else
  {
    pthread_mutex_unlock((pthread_mutex_t *)a1);
  }
  memptr = 0;
  if (!malloc_type_posix_memalign(&memptr, 0x40uLL, (size_t)(a2 + 16), 0xCA3F0CE3uLL) && memptr)
  {
    v4 = &a2[(_QWORD)memptr];
    *(_QWORD *)&a2[(_QWORD)memptr] = memptr;
    return v4;
  }
  pthread_mutex_lock((pthread_mutex_t *)a1);
  v6 = *(_DWORD *)(a1 + 72) - 1;
  *(_DWORD *)(a1 + 72) = v6;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (!v6)
  {
    pthread_mutex_destroy((pthread_mutex_t *)a1);
    free((void *)a1);
  }
  return 0;
}

BOOL dav1d_msac_decode_BOOL_equi_c(unsigned __int8 **a1)
{
  unint64_t v1;
  unint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint8x16_t *v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  uint8x16_t *v20;
  unint64_t v21;
  int8x16_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  uint8x16_t v38;
  uint16x8_t v39;
  uint32x4_t v40;
  uint64x2_t v41;
  uint64x2_t v42;
  uint32x4_t v43;
  uint64x2_t v44;
  uint16x8_t v45;
  uint32x4_t v46;
  uint64x2_t v47;
  uint64x2_t v48;
  uint64x2_t v49;
  uint64x2_t v50;
  uint32x4_t v51;
  uint64x2_t v52;
  uint64x2_t v53;
  uint64x2_t v54;
  uint64x2_t v55;
  uint64x2_t v56;
  uint64x2_t v57;
  uint64x2_t v58;
  uint64x2_t v59;
  uint64x2_t v60;
  int8x16_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;

  v1 = (unint64_t)a1[2];
  v2 = *((unsigned int *)a1 + 6);
  v3 = *((_DWORD *)a1 + 7);
  v4 = (v2 >> 1) & 0x7FFFFF80 | 4;
  v5 = v4 << 48;
  v6 = v2 - 2 * v4;
  if (v1 >= v4 << 48)
    v7 = v4 << 48;
  else
    v7 = 0;
  if (v1 < v4 << 48)
    v6 = 0;
  v8 = v6 + v4;
  v9 = __clz(v8);
  v10 = v9 ^ 0x10;
  v11 = v3 - (v9 ^ 0x10);
  v12 = ((v1 - v7 + 1) << (v9 ^ 0x10)) - 1;
  a1[2] = (unsigned __int8 *)v12;
  *((_DWORD *)a1 + 6) = v8 << (v9 ^ 0x10);
  *((_DWORD *)a1 + 7) = v11;
  if ((v11 & 0x80000000) == 0)
    return v1 < v5;
  v14 = (uint8x16_t *)*a1;
  v15 = 40 - v11;
  if ((int)(40 - v11) >= 0)
  {
    v16 = (unint64_t)a1[1];
    if ((unint64_t)v14 < v16)
    {
      if (v15 >= 7)
        v17 = 7;
      else
        v17 = 40 - v11;
      v18 = (v10 - v3 - v17 + 47) >> 3;
      if (~(unint64_t)v14 + v16 < v18)
        v18 = ~(unint64_t)v14 + v16;
      if (v18 >= 0xF)
      {
        v21 = v18 + 1;
        v22 = (int8x16_t)(unint64_t)v12;
        v23 = vdupq_n_s32(v15);
        v24 = 0uLL;
        v25 = vaddq_s32(v23, (int32x4_t)xmmword_196889AA0);
        v26 = vaddq_s32(v23, (int32x4_t)xmmword_196889AB0);
        v27 = vaddq_s32(v23, (int32x4_t)xmmword_196889AC0);
        v28 = vaddq_s32(v23, (int32x4_t)xmmword_196889AD0);
        v29.i64[0] = 0x7F0000007FLL;
        v29.i64[1] = 0x7F0000007FLL;
        v30 = (v18 + 1) & 0x3FFFFFF0;
        v19 = v15 - 8 * v30;
        v20 = (uint8x16_t *)((char *)v14 + v30);
        v31 = v30;
        v32 = 0uLL;
        v33 = 0uLL;
        v34 = 0uLL;
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        do
        {
          v38 = *v14++;
          v39 = vmovl_high_u8(v38);
          v40 = vmovl_high_u16(v39);
          v41.i64[0] = v40.u32[0];
          v41.i64[1] = v40.u32[1];
          v42 = v41;
          v43 = vmovl_u16(*(uint16x4_t *)v39.i8);
          v41.i64[0] = v43.u32[2];
          v41.i64[1] = v43.u32[3];
          v44 = v41;
          v45 = vmovl_u8(*(uint8x8_t *)v38.i8);
          v46 = vmovl_high_u16(v45);
          v41.i64[0] = v46.u32[2];
          v41.i64[1] = v46.u32[3];
          v47 = v41;
          v41.i64[0] = v40.u32[2];
          v41.i64[1] = v40.u32[3];
          v48 = v41;
          v41.i64[0] = v43.u32[0];
          v41.i64[1] = v43.u32[1];
          v49 = v41;
          v41.i64[0] = v46.u32[0];
          v41.i64[1] = v46.u32[1];
          v50 = v41;
          v51 = vmovl_u16(*(uint16x4_t *)v45.i8);
          v41.i64[0] = v51.u32[2];
          v41.i64[1] = v51.u32[3];
          v52 = v41;
          v41.i64[0] = v51.u32[0];
          v41.i64[1] = v51.u32[1];
          v53 = v41;
          v41.i64[0] = v25.u32[0];
          v41.i64[1] = v25.u32[1];
          v54 = v41;
          v41.i64[0] = v26.u32[2];
          v41.i64[1] = v26.u32[3];
          v55 = v41;
          v41.i64[0] = v27.u32[2];
          v41.i64[1] = v27.u32[3];
          v56 = v41;
          v41.i64[0] = v25.u32[2];
          v41.i64[1] = v25.u32[3];
          v57 = v41;
          v41.i64[0] = v26.u32[0];
          v41.i64[1] = v26.u32[1];
          v58 = v41;
          v41.i64[0] = v27.u32[0];
          v41.i64[1] = v27.u32[1];
          v59 = v41;
          v41.i64[0] = v28.u32[2];
          v41.i64[1] = v28.u32[3];
          v60 = v41;
          v41.i64[0] = v28.u32[0];
          v41.i64[1] = v28.u32[1];
          v36 = veorq_s8((int8x16_t)vshlq_u64(v42, v54), v36);
          v35 = veorq_s8((int8x16_t)vshlq_u64(v44, v55), v35);
          v33 = veorq_s8((int8x16_t)vshlq_u64(v47, v56), v33);
          v37 = veorq_s8((int8x16_t)vshlq_u64(v48, v57), v37);
          v34 = veorq_s8((int8x16_t)vshlq_u64(v49, v58), v34);
          v32 = veorq_s8((int8x16_t)vshlq_u64(v50, v59), v32);
          v24 = veorq_s8((int8x16_t)vshlq_u64(v52, v60), v24);
          v22 = veorq_s8((int8x16_t)vshlq_u64(v53, v41), v22);
          v28 = vaddq_s32(v28, v29);
          v27 = vaddq_s32(v27, v29);
          v26 = vaddq_s32(v26, v29);
          v25 = vaddq_s32(v25, v29);
          v31 -= 16;
        }
        while (v31);
        v61 = veorq_s8(veorq_s8(veorq_s8(v22, v34), veorq_s8(v32, v36)), veorq_s8(veorq_s8(v24, v35), veorq_s8(v33, v37)));
        v12 = (uint64_t)veor_s8(*(int8x8_t *)v61.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL));
        if (v21 == v30)
        {
          v62 = v15 - 8 * v30 + 8;
LABEL_25:
          v11 = 48 - v62;
          v14 = v20;
          goto LABEL_26;
        }
      }
      else
      {
        v19 = 40 - v11;
        v20 = (uint8x16_t *)*a1;
      }
      v63 = v19;
      do
      {
        v64 = v20->u8[0];
        v20 = (uint8x16_t *)((char *)v20 + 1);
        v12 ^= (unint64_t)v64 << v63;
        v65 = v63 - 8;
        if (v63 < 8)
          break;
        v63 -= 8;
      }
      while ((unint64_t)v20 < v16);
      v62 = v65 + 8;
      goto LABEL_25;
    }
  }
LABEL_26:
  a1[2] = (unsigned __int8 *)v12;
  *((_DWORD *)a1 + 7) = v11;
  *a1 = (unsigned __int8 *)v14;
  return v1 < v5;
}

uint64_t dav1d_msac_decode_subexp(unsigned __int8 **a1, int a2, int a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  uint8x16_t *v26;
  unsigned int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unsigned int v31;
  uint8x16_t *v32;
  uint8x16_t *v33;
  unsigned int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unsigned int v38;
  uint8x16_t *v39;
  unint64_t v40;
  int8x16_t v41;
  int32x4_t v42;
  int8x16_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  uint8x16_t v57;
  uint16x8_t v58;
  uint32x4_t v59;
  uint64x2_t v60;
  uint64x2_t v61;
  uint32x4_t v62;
  uint64x2_t v63;
  uint16x8_t v64;
  uint32x4_t v65;
  uint64x2_t v66;
  uint64x2_t v67;
  uint64x2_t v68;
  uint64x2_t v69;
  uint32x4_t v70;
  uint64x2_t v71;
  uint64x2_t v72;
  uint64x2_t v73;
  uint64x2_t v74;
  uint64x2_t v75;
  uint64x2_t v76;
  uint64x2_t v77;
  uint64x2_t v78;
  uint64x2_t v79;
  int8x16_t v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  int v86;
  unint64_t v87;
  int8x16_t v88;
  int32x4_t v89;
  int8x16_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  uint64_t v96;
  uint64_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  uint8x16_t v104;
  uint16x8_t v105;
  uint32x4_t v106;
  uint64x2_t v107;
  uint64x2_t v108;
  uint32x4_t v109;
  uint64x2_t v110;
  uint16x8_t v111;
  uint32x4_t v112;
  uint64x2_t v113;
  uint64x2_t v114;
  uint64x2_t v115;
  uint64x2_t v116;
  uint32x4_t v117;
  uint64x2_t v118;
  uint64x2_t v119;
  uint64x2_t v120;
  uint64x2_t v121;
  uint64x2_t v122;
  uint64x2_t v123;
  uint64x2_t v124;
  uint64x2_t v125;
  uint64x2_t v126;
  int8x16_t v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  unint64_t v133;
  int v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  uint64_t v140;
  uint8x16_t *v141;
  unsigned int v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  unsigned int v146;
  uint8x16_t *v147;
  unint64_t v148;
  int8x16_t v149;
  int32x4_t v150;
  int8x16_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  uint64_t v157;
  uint64_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  uint8x16_t v165;
  uint16x8_t v166;
  uint32x4_t v167;
  uint64x2_t v168;
  uint64x2_t v169;
  uint32x4_t v170;
  uint64x2_t v171;
  uint16x8_t v172;
  uint32x4_t v173;
  uint64x2_t v174;
  uint64x2_t v175;
  uint64x2_t v176;
  uint64x2_t v177;
  uint32x4_t v178;
  uint64x2_t v179;
  uint64x2_t v180;
  uint64x2_t v181;
  uint64x2_t v182;
  uint64x2_t v183;
  uint64x2_t v184;
  uint64x2_t v185;
  uint64x2_t v186;
  uint64x2_t v187;
  int8x16_t v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  int v193;
  int32x4_t v194;
  unsigned int v195;
  unsigned int v196;
  uint8x16_t *v197;
  uint64_t v198;
  unint64_t v199;
  int v200;
  uint64_t v201;
  unsigned int v202;
  unsigned int v203;
  int v204;
  uint64_t v205;
  unsigned int v206;
  unint64_t v207;
  int v208;
  unint64_t v209;
  unsigned int v210;
  uint8x16_t *v211;
  unint64_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int32x4_t v215;
  uint64_t v216;
  int32x4_t v217;
  int32x4_t v218;
  int32x4_t v219;
  int32x4_t v220;
  uint64_t v221;
  int8x16_t v222;
  int8x16_t v223;
  int8x16_t v224;
  int8x16_t v225;
  int8x16_t v226;
  int8x16_t v227;
  uint8x16_t v228;
  uint16x8_t v229;
  uint32x4_t v230;
  uint64x2_t v231;
  uint64x2_t v232;
  uint32x4_t v233;
  uint64x2_t v234;
  uint16x8_t v235;
  uint32x4_t v236;
  uint64x2_t v237;
  uint64x2_t v238;
  uint64x2_t v239;
  uint64x2_t v240;
  uint32x4_t v241;
  uint64x2_t v242;
  uint64x2_t v243;
  uint64x2_t v244;
  uint64x2_t v245;
  uint64x2_t v246;
  uint64x2_t v247;
  uint64x2_t v248;
  uint64x2_t v249;
  uint64x2_t v250;
  int8x16_t v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  int v256;
  int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;

  v4 = (unint64_t)a1[2];
  v5 = *((unsigned int *)a1 + 6);
  v6 = *((_DWORD *)a1 + 7);
  v7 = (v5 >> 1) & 0x7FFFFF80 | 4;
  v8 = v7 << 48;
  v9 = v5 - 2 * v7;
  if (v4 >= v7 << 48)
    v10 = v7 << 48;
  else
    v10 = 0;
  if (v4 < v7 << 48)
    v9 = 0;
  v11 = v9 + v7;
  v12 = __clz(v11);
  v13 = v12 ^ 0x10;
  v14 = v6 - (v12 ^ 0x10);
  v15 = ((v4 - v10 + 1) << (v12 ^ 0x10)) - 1;
  a1[2] = (unsigned __int8 *)v15;
  v16 = v11 << v13;
  *((_DWORD *)a1 + 6) = v16;
  *((_DWORD *)a1 + 7) = v14;
  if ((v14 & 0x80000000) == 0)
  {
    if (v4 < v8)
      goto LABEL_8;
    goto LABEL_44;
  }
  v26 = (uint8x16_t *)*a1;
  v27 = 40 - v14;
  if ((int)(40 - v14) >= 0)
  {
    v28 = (unint64_t)a1[1];
    if ((unint64_t)v26 < v28)
    {
      if (v27 >= 7)
        v29 = 7;
      else
        v29 = 40 - v14;
      v30 = (v13 - v6 - v29 + 47) >> 3;
      if (~(unint64_t)v26 + v28 < v30)
        v30 = ~(unint64_t)v26 + v28;
      if (v30 >= 0xF)
      {
        v40 = v30 + 1;
        v41 = (int8x16_t)v15;
        v42 = vdupq_n_s32(v27);
        v43 = 0uLL;
        v44 = vaddq_s32(v42, (int32x4_t)xmmword_196889AA0);
        v45 = vaddq_s32(v42, (int32x4_t)xmmword_196889AB0);
        v46 = vaddq_s32(v42, (int32x4_t)xmmword_196889AC0);
        v47 = vaddq_s32(v42, (int32x4_t)xmmword_196889AD0);
        v48.i64[0] = 0x7F0000007FLL;
        v48.i64[1] = 0x7F0000007FLL;
        v49 = (v30 + 1) & 0x3FFFFFF0;
        v31 = v27 - 8 * v49;
        v32 = (uint8x16_t *)((char *)v26 + v49);
        v50 = v49;
        v51 = 0uLL;
        v52 = 0uLL;
        v53 = 0uLL;
        v54 = 0uLL;
        v55 = 0uLL;
        v56 = 0uLL;
        do
        {
          v57 = *v26++;
          v58 = vmovl_high_u8(v57);
          v59 = vmovl_high_u16(v58);
          v60.i64[0] = v59.u32[0];
          v60.i64[1] = v59.u32[1];
          v61 = v60;
          v62 = vmovl_u16(*(uint16x4_t *)v58.i8);
          v60.i64[0] = v62.u32[2];
          v60.i64[1] = v62.u32[3];
          v63 = v60;
          v64 = vmovl_u8(*(uint8x8_t *)v57.i8);
          v65 = vmovl_high_u16(v64);
          v60.i64[0] = v65.u32[2];
          v60.i64[1] = v65.u32[3];
          v66 = v60;
          v60.i64[0] = v59.u32[2];
          v60.i64[1] = v59.u32[3];
          v67 = v60;
          v60.i64[0] = v62.u32[0];
          v60.i64[1] = v62.u32[1];
          v68 = v60;
          v60.i64[0] = v65.u32[0];
          v60.i64[1] = v65.u32[1];
          v69 = v60;
          v70 = vmovl_u16(*(uint16x4_t *)v64.i8);
          v60.i64[0] = v70.u32[2];
          v60.i64[1] = v70.u32[3];
          v71 = v60;
          v60.i64[0] = v70.u32[0];
          v60.i64[1] = v70.u32[1];
          v72 = v60;
          v60.i64[0] = v44.u32[0];
          v60.i64[1] = v44.u32[1];
          v73 = v60;
          v60.i64[0] = v45.u32[2];
          v60.i64[1] = v45.u32[3];
          v74 = v60;
          v60.i64[0] = v46.u32[2];
          v60.i64[1] = v46.u32[3];
          v75 = v60;
          v60.i64[0] = v44.u32[2];
          v60.i64[1] = v44.u32[3];
          v76 = v60;
          v60.i64[0] = v45.u32[0];
          v60.i64[1] = v45.u32[1];
          v77 = v60;
          v60.i64[0] = v46.u32[0];
          v60.i64[1] = v46.u32[1];
          v78 = v60;
          v60.i64[0] = v47.u32[2];
          v60.i64[1] = v47.u32[3];
          v79 = v60;
          v60.i64[0] = v47.u32[0];
          v60.i64[1] = v47.u32[1];
          v55 = veorq_s8((int8x16_t)vshlq_u64(v61, v73), v55);
          v54 = veorq_s8((int8x16_t)vshlq_u64(v63, v74), v54);
          v52 = veorq_s8((int8x16_t)vshlq_u64(v66, v75), v52);
          v56 = veorq_s8((int8x16_t)vshlq_u64(v67, v76), v56);
          v53 = veorq_s8((int8x16_t)vshlq_u64(v68, v77), v53);
          v51 = veorq_s8((int8x16_t)vshlq_u64(v69, v78), v51);
          v43 = veorq_s8((int8x16_t)vshlq_u64(v71, v79), v43);
          v41 = veorq_s8((int8x16_t)vshlq_u64(v72, v60), v41);
          v47 = vaddq_s32(v47, v48);
          v46 = vaddq_s32(v46, v48);
          v45 = vaddq_s32(v45, v48);
          v44 = vaddq_s32(v44, v48);
          v50 -= 16;
        }
        while (v50);
        v80 = veorq_s8(veorq_s8(veorq_s8(v41, v53), veorq_s8(v51, v55)), veorq_s8(veorq_s8(v43, v54), veorq_s8(v52, v56)));
        v15 = (unint64_t)veor_s8(*(int8x8_t *)v80.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL));
        if (v40 == v49)
        {
          v81 = v27 - 8 * v49 + 8;
LABEL_42:
          v14 = 48 - v81;
          v26 = v32;
          goto LABEL_43;
        }
      }
      else
      {
        v31 = 40 - v14;
        v32 = (uint8x16_t *)*a1;
      }
      v82 = v31;
      do
      {
        v83 = v32->u8[0];
        v32 = (uint8x16_t *)((char *)v32 + 1);
        v15 ^= (unint64_t)v83 << v82;
        v84 = v82 - 8;
        if (v82 < 8)
          break;
        v82 -= 8;
      }
      while ((unint64_t)v32 < v28);
      v81 = v84 + 8;
      goto LABEL_42;
    }
  }
LABEL_43:
  a1[2] = (unsigned __int8 *)v15;
  *((_DWORD *)a1 + 7) = v14;
  *a1 = (unsigned __int8 *)v26;
  if (v4 < v8)
  {
LABEL_8:
    v17 = (v16 >> 1) & 0x7FFFFF80 | 4;
    v18 = v17 << 48;
    v19 = v16 - 2 * v17;
    if (v15 >= v17 << 48)
      v20 = v17 << 48;
    else
      v20 = 0;
    if (v15 < v17 << 48)
      v19 = 0;
    v21 = v19 + v17;
    v22 = __clz(v21);
    v23 = v22 ^ 0x10;
    v24 = v14 - (v22 ^ 0x10);
    v25 = ((v15 - v20 + 1) << (v22 ^ 0x10)) - 1;
    a1[2] = (unsigned __int8 *)v25;
    v16 = v21 << v23;
    *((_DWORD *)a1 + 6) = v16;
    *((_DWORD *)a1 + 7) = v24;
    if ((v24 & 0x80000000) == 0)
    {
      if (v15 >= v18)
        goto LABEL_85;
LABEL_56:
      v132 = (v16 >> 1) & 0x7FFFFF80 | 4;
      v133 = v132 << 48;
      v134 = v16 - 2 * v132;
      if (v25 >= v132 << 48)
        v135 = v132 << 48;
      else
        v135 = 0;
      if (v25 < v132 << 48)
        v134 = 0;
      v136 = v134 + v132;
      v137 = __clz(v136);
      v138 = v137 ^ 0x10;
      v139 = v24 - (v137 ^ 0x10);
      v140 = ((v25 - v135 + 1) << (v137 ^ 0x10)) - 1;
      a1[2] = (unsigned __int8 *)v140;
      v16 = v136 << (v137 ^ 0x10);
      *((_DWORD *)a1 + 6) = v16;
      *((_DWORD *)a1 + 7) = v139;
      if ((v139 & 0x80000000) == 0)
        goto LABEL_81;
      v141 = (uint8x16_t *)*a1;
      v142 = 40 - v139;
      if ((int)(40 - v139) < 0 || (v143 = (unint64_t)a1[1], (unint64_t)v141 >= v143))
      {
LABEL_80:
        a1[2] = (unsigned __int8 *)v140;
        *((_DWORD *)a1 + 7) = v139;
        *a1 = (unsigned __int8 *)v141;
LABEL_81:
        if (v25 >= v133)
          v193 = 1;
        else
          v193 = 2;
        a4 += v193;
        v24 = v139;
        v25 = v140;
LABEL_85:
        v85 = 1 << a4;
        v14 = v24;
        v15 = v25;
        v86 = 0;
        if (a4)
          goto LABEL_86;
        goto LABEL_114;
      }
      if (v142 >= 7)
        v144 = 7;
      else
        v144 = 40 - v139;
      v145 = (v138 - v24 - v144 + 47) >> 3;
      if (~(unint64_t)v141 + v143 < v145)
        v145 = ~(unint64_t)v141 + v143;
      if (v145 >= 0xF)
      {
        v148 = v145 + 1;
        v149 = (int8x16_t)(unint64_t)v140;
        v150 = vdupq_n_s32(v142);
        v151 = 0uLL;
        v152 = vaddq_s32(v150, (int32x4_t)xmmword_196889AA0);
        v153 = vaddq_s32(v150, (int32x4_t)xmmword_196889AB0);
        v154 = vaddq_s32(v150, (int32x4_t)xmmword_196889AC0);
        v155 = vaddq_s32(v150, (int32x4_t)xmmword_196889AD0);
        v156.i64[0] = 0x7F0000007FLL;
        v156.i64[1] = 0x7F0000007FLL;
        v157 = (v145 + 1) & 0x3FFFFFF0;
        v146 = v142 - 8 * v157;
        v147 = (uint8x16_t *)((char *)v141 + v157);
        v158 = v157;
        v159 = 0uLL;
        v160 = 0uLL;
        v161 = 0uLL;
        v162 = 0uLL;
        v163 = 0uLL;
        v164 = 0uLL;
        do
        {
          v165 = *v141++;
          v166 = vmovl_high_u8(v165);
          v167 = vmovl_high_u16(v166);
          v168.i64[0] = v167.u32[0];
          v168.i64[1] = v167.u32[1];
          v169 = v168;
          v170 = vmovl_u16(*(uint16x4_t *)v166.i8);
          v168.i64[0] = v170.u32[2];
          v168.i64[1] = v170.u32[3];
          v171 = v168;
          v172 = vmovl_u8(*(uint8x8_t *)v165.i8);
          v173 = vmovl_high_u16(v172);
          v168.i64[0] = v173.u32[2];
          v168.i64[1] = v173.u32[3];
          v174 = v168;
          v168.i64[0] = v167.u32[2];
          v168.i64[1] = v167.u32[3];
          v175 = v168;
          v168.i64[0] = v170.u32[0];
          v168.i64[1] = v170.u32[1];
          v176 = v168;
          v168.i64[0] = v173.u32[0];
          v168.i64[1] = v173.u32[1];
          v177 = v168;
          v178 = vmovl_u16(*(uint16x4_t *)v172.i8);
          v168.i64[0] = v178.u32[2];
          v168.i64[1] = v178.u32[3];
          v179 = v168;
          v168.i64[0] = v178.u32[0];
          v168.i64[1] = v178.u32[1];
          v180 = v168;
          v168.i64[0] = v152.u32[0];
          v168.i64[1] = v152.u32[1];
          v181 = v168;
          v168.i64[0] = v153.u32[2];
          v168.i64[1] = v153.u32[3];
          v182 = v168;
          v168.i64[0] = v154.u32[2];
          v168.i64[1] = v154.u32[3];
          v183 = v168;
          v168.i64[0] = v152.u32[2];
          v168.i64[1] = v152.u32[3];
          v184 = v168;
          v168.i64[0] = v153.u32[0];
          v168.i64[1] = v153.u32[1];
          v185 = v168;
          v168.i64[0] = v154.u32[0];
          v168.i64[1] = v154.u32[1];
          v186 = v168;
          v168.i64[0] = v155.u32[2];
          v168.i64[1] = v155.u32[3];
          v187 = v168;
          v168.i64[0] = v155.u32[0];
          v168.i64[1] = v155.u32[1];
          v163 = veorq_s8((int8x16_t)vshlq_u64(v169, v181), v163);
          v162 = veorq_s8((int8x16_t)vshlq_u64(v171, v182), v162);
          v160 = veorq_s8((int8x16_t)vshlq_u64(v174, v183), v160);
          v164 = veorq_s8((int8x16_t)vshlq_u64(v175, v184), v164);
          v161 = veorq_s8((int8x16_t)vshlq_u64(v176, v185), v161);
          v159 = veorq_s8((int8x16_t)vshlq_u64(v177, v186), v159);
          v151 = veorq_s8((int8x16_t)vshlq_u64(v179, v187), v151);
          v149 = veorq_s8((int8x16_t)vshlq_u64(v180, v168), v149);
          v155 = vaddq_s32(v155, v156);
          v154 = vaddq_s32(v154, v156);
          v153 = vaddq_s32(v153, v156);
          v152 = vaddq_s32(v152, v156);
          v158 -= 16;
        }
        while (v158);
        v188 = veorq_s8(veorq_s8(veorq_s8(v149, v161), veorq_s8(v159, v163)), veorq_s8(veorq_s8(v151, v162), veorq_s8(v160, v164)));
        v140 = (uint64_t)veor_s8(*(int8x8_t *)v188.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v188, v188, 8uLL));
        if (v148 == v157)
        {
          v189 = v142 - 8 * v157 + 8;
LABEL_79:
          v139 = 48 - v189;
          v141 = v147;
          goto LABEL_80;
        }
      }
      else
      {
        v146 = 40 - v139;
        v147 = (uint8x16_t *)*a1;
      }
      v190 = v146;
      do
      {
        v191 = v147->u8[0];
        v147 = (uint8x16_t *)((char *)v147 + 1);
        v140 ^= (unint64_t)v191 << v190;
        v192 = v190 - 8;
        if (v190 < 8)
          break;
        v190 -= 8;
      }
      while ((unint64_t)v147 < v143);
      v189 = v192 + 8;
      goto LABEL_79;
    }
    v33 = (uint8x16_t *)*a1;
    v34 = 40 - v24;
    if ((int)(40 - v24) < 0 || (v35 = (unint64_t)a1[1], (unint64_t)v33 >= v35))
    {
LABEL_55:
      a1[2] = (unsigned __int8 *)v25;
      *((_DWORD *)a1 + 7) = v24;
      *a1 = (unsigned __int8 *)v33;
      if (v15 >= v18)
        goto LABEL_85;
      goto LABEL_56;
    }
    if (v34 >= 7)
      v36 = 7;
    else
      v36 = 40 - v24;
    v37 = (v23 - v14 - v36 + 47) >> 3;
    if (~(unint64_t)v33 + v35 < v37)
      v37 = ~(unint64_t)v33 + v35;
    if (v37 >= 0xF)
    {
      v87 = v37 + 1;
      v88 = (int8x16_t)v25;
      v89 = vdupq_n_s32(v34);
      v90 = 0uLL;
      v91 = vaddq_s32(v89, (int32x4_t)xmmword_196889AA0);
      v92 = vaddq_s32(v89, (int32x4_t)xmmword_196889AB0);
      v93 = vaddq_s32(v89, (int32x4_t)xmmword_196889AC0);
      v94 = vaddq_s32(v89, (int32x4_t)xmmword_196889AD0);
      v95.i64[0] = 0x7F0000007FLL;
      v95.i64[1] = 0x7F0000007FLL;
      v96 = (v37 + 1) & 0x3FFFFFF0;
      v38 = v34 - 8 * v96;
      v39 = (uint8x16_t *)((char *)v33 + v96);
      v97 = v96;
      v98 = 0uLL;
      v99 = 0uLL;
      v100 = 0uLL;
      v101 = 0uLL;
      v102 = 0uLL;
      v103 = 0uLL;
      do
      {
        v104 = *v33++;
        v105 = vmovl_high_u8(v104);
        v106 = vmovl_high_u16(v105);
        v107.i64[0] = v106.u32[0];
        v107.i64[1] = v106.u32[1];
        v108 = v107;
        v109 = vmovl_u16(*(uint16x4_t *)v105.i8);
        v107.i64[0] = v109.u32[2];
        v107.i64[1] = v109.u32[3];
        v110 = v107;
        v111 = vmovl_u8(*(uint8x8_t *)v104.i8);
        v112 = vmovl_high_u16(v111);
        v107.i64[0] = v112.u32[2];
        v107.i64[1] = v112.u32[3];
        v113 = v107;
        v107.i64[0] = v106.u32[2];
        v107.i64[1] = v106.u32[3];
        v114 = v107;
        v107.i64[0] = v109.u32[0];
        v107.i64[1] = v109.u32[1];
        v115 = v107;
        v107.i64[0] = v112.u32[0];
        v107.i64[1] = v112.u32[1];
        v116 = v107;
        v117 = vmovl_u16(*(uint16x4_t *)v111.i8);
        v107.i64[0] = v117.u32[2];
        v107.i64[1] = v117.u32[3];
        v118 = v107;
        v107.i64[0] = v117.u32[0];
        v107.i64[1] = v117.u32[1];
        v119 = v107;
        v107.i64[0] = v91.u32[0];
        v107.i64[1] = v91.u32[1];
        v120 = v107;
        v107.i64[0] = v92.u32[2];
        v107.i64[1] = v92.u32[3];
        v121 = v107;
        v107.i64[0] = v93.u32[2];
        v107.i64[1] = v93.u32[3];
        v122 = v107;
        v107.i64[0] = v91.u32[2];
        v107.i64[1] = v91.u32[3];
        v123 = v107;
        v107.i64[0] = v92.u32[0];
        v107.i64[1] = v92.u32[1];
        v124 = v107;
        v107.i64[0] = v93.u32[0];
        v107.i64[1] = v93.u32[1];
        v125 = v107;
        v107.i64[0] = v94.u32[2];
        v107.i64[1] = v94.u32[3];
        v126 = v107;
        v107.i64[0] = v94.u32[0];
        v107.i64[1] = v94.u32[1];
        v102 = veorq_s8((int8x16_t)vshlq_u64(v108, v120), v102);
        v101 = veorq_s8((int8x16_t)vshlq_u64(v110, v121), v101);
        v99 = veorq_s8((int8x16_t)vshlq_u64(v113, v122), v99);
        v103 = veorq_s8((int8x16_t)vshlq_u64(v114, v123), v103);
        v100 = veorq_s8((int8x16_t)vshlq_u64(v115, v124), v100);
        v98 = veorq_s8((int8x16_t)vshlq_u64(v116, v125), v98);
        v90 = veorq_s8((int8x16_t)vshlq_u64(v118, v126), v90);
        v88 = veorq_s8((int8x16_t)vshlq_u64(v119, v107), v88);
        v94 = vaddq_s32(v94, v95);
        v93 = vaddq_s32(v93, v95);
        v92 = vaddq_s32(v92, v95);
        v91 = vaddq_s32(v91, v95);
        v97 -= 16;
      }
      while (v97);
      v127 = veorq_s8(veorq_s8(veorq_s8(v88, v100), veorq_s8(v98, v102)), veorq_s8(veorq_s8(v90, v101), veorq_s8(v99, v103)));
      v25 = (unint64_t)veor_s8(*(int8x8_t *)v127.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v127, v127, 8uLL));
      if (v87 == v96)
      {
        v128 = v34 - 8 * v96 + 8;
LABEL_54:
        v24 = 48 - v128;
        v33 = v39;
        goto LABEL_55;
      }
    }
    else
    {
      v38 = 40 - v24;
      v39 = (uint8x16_t *)*a1;
    }
    v129 = v38;
    do
    {
      v130 = v39->u8[0];
      v39 = (uint8x16_t *)((char *)v39 + 1);
      v25 ^= (unint64_t)v130 << v129;
      v131 = v129 - 8;
      if (v129 < 8)
        break;
      v129 -= 8;
    }
    while ((unint64_t)v39 < v35);
    v128 = v131 + 8;
    goto LABEL_54;
  }
LABEL_44:
  v85 = 0;
  v86 = 0;
  if (a4)
  {
LABEL_86:
    v194.i64[0] = 0x7F0000007FLL;
    v194.i64[1] = 0x7F0000007FLL;
    while (1)
    {
      v198 = (v16 >> 1) & 0x7FFFFF80 | 4;
      v199 = v198 << 48;
      v200 = v16 - 2 * v198;
      if (v15 >= v198 << 48)
        v201 = v198 << 48;
      else
        v201 = 0;
      if (v15 < v198 << 48)
        v200 = 0;
      v202 = v200 + v198;
      v203 = __clz(v202);
      v204 = v203 ^ 0x10;
      v196 = v14 - (v203 ^ 0x10);
      v205 = ((v15 - v201 + 1) << (v203 ^ 0x10)) - 1;
      a1[2] = (unsigned __int8 *)v205;
      v16 = v202 << (v203 ^ 0x10);
      *((_DWORD *)a1 + 6) = v16;
      *((_DWORD *)a1 + 7) = v196;
      if ((v196 & 0x80000000) == 0)
        goto LABEL_90;
      v197 = (uint8x16_t *)*a1;
      v206 = 40 - v196;
      if ((int)(40 - v196) >= 0)
      {
        v207 = (unint64_t)a1[1];
        if ((unint64_t)v197 < v207)
          break;
      }
LABEL_89:
      a1[2] = (unsigned __int8 *)v205;
      *((_DWORD *)a1 + 7) = v196;
      *a1 = (unsigned __int8 *)v197;
LABEL_90:
      v86 = (2 * v86) | (v15 < v199);
      v14 = v196;
      v15 = v205;
      if (!--a4)
        goto LABEL_114;
    }
    if (v206 >= 7)
      v208 = 7;
    else
      v208 = 40 - v196;
    v209 = (v204 - v14 - v208 + 47) >> 3;
    if (~(unint64_t)v197 + v207 < v209)
      v209 = ~(unint64_t)v197 + v207;
    if (v209 >= 0xF)
    {
      v212 = v209 + 1;
      v213 = 0uLL;
      v214 = (int8x16_t)(unint64_t)v205;
      v215 = vdupq_n_s32(v206);
      v216 = (v209 + 1) & 0x3FFFFFF0;
      v217 = vaddq_s32(v215, (int32x4_t)xmmword_196889AA0);
      v210 = v206 - 8 * v216;
      v218 = vaddq_s32(v215, (int32x4_t)xmmword_196889AB0);
      v211 = (uint8x16_t *)((char *)v197 + v216);
      v219 = vaddq_s32(v215, (int32x4_t)xmmword_196889AC0);
      v220 = vaddq_s32(v215, (int32x4_t)xmmword_196889AD0);
      v221 = v216;
      v222 = 0uLL;
      v223 = 0uLL;
      v224 = 0uLL;
      v225 = 0uLL;
      v226 = 0uLL;
      v227 = 0uLL;
      do
      {
        v228 = *v197++;
        v229 = vmovl_high_u8(v228);
        v230 = vmovl_high_u16(v229);
        v231.i64[0] = v230.u32[0];
        v231.i64[1] = v230.u32[1];
        v232 = v231;
        v233 = vmovl_u16(*(uint16x4_t *)v229.i8);
        v231.i64[0] = v233.u32[2];
        v231.i64[1] = v233.u32[3];
        v234 = v231;
        v235 = vmovl_u8(*(uint8x8_t *)v228.i8);
        v236 = vmovl_high_u16(v235);
        v231.i64[0] = v236.u32[2];
        v231.i64[1] = v236.u32[3];
        v237 = v231;
        v231.i64[0] = v230.u32[2];
        v231.i64[1] = v230.u32[3];
        v238 = v231;
        v231.i64[0] = v233.u32[0];
        v231.i64[1] = v233.u32[1];
        v239 = v231;
        v231.i64[0] = v236.u32[0];
        v231.i64[1] = v236.u32[1];
        v240 = v231;
        v241 = vmovl_u16(*(uint16x4_t *)v235.i8);
        v231.i64[0] = v241.u32[2];
        v231.i64[1] = v241.u32[3];
        v242 = v231;
        v231.i64[0] = v241.u32[0];
        v231.i64[1] = v241.u32[1];
        v243 = v231;
        v231.i64[0] = v217.u32[0];
        v231.i64[1] = v217.u32[1];
        v244 = v231;
        v231.i64[0] = v218.u32[2];
        v231.i64[1] = v218.u32[3];
        v245 = v231;
        v231.i64[0] = v219.u32[2];
        v231.i64[1] = v219.u32[3];
        v246 = v231;
        v231.i64[0] = v217.u32[2];
        v231.i64[1] = v217.u32[3];
        v247 = v231;
        v231.i64[0] = v218.u32[0];
        v231.i64[1] = v218.u32[1];
        v248 = v231;
        v231.i64[0] = v219.u32[0];
        v231.i64[1] = v219.u32[1];
        v249 = v231;
        v231.i64[0] = v220.u32[2];
        v231.i64[1] = v220.u32[3];
        v250 = v231;
        v231.i64[0] = v220.u32[0];
        v231.i64[1] = v220.u32[1];
        v226 = veorq_s8((int8x16_t)vshlq_u64(v232, v244), v226);
        v225 = veorq_s8((int8x16_t)vshlq_u64(v234, v245), v225);
        v223 = veorq_s8((int8x16_t)vshlq_u64(v237, v246), v223);
        v227 = veorq_s8((int8x16_t)vshlq_u64(v238, v247), v227);
        v224 = veorq_s8((int8x16_t)vshlq_u64(v239, v248), v224);
        v222 = veorq_s8((int8x16_t)vshlq_u64(v240, v249), v222);
        v213 = veorq_s8((int8x16_t)vshlq_u64(v242, v250), v213);
        v214 = veorq_s8((int8x16_t)vshlq_u64(v243, v231), v214);
        v220 = vaddq_s32(v220, v194);
        v219 = vaddq_s32(v219, v194);
        v218 = vaddq_s32(v218, v194);
        v217 = vaddq_s32(v217, v194);
        v221 -= 16;
      }
      while (v221);
      v251 = veorq_s8(veorq_s8(veorq_s8(v214, v224), veorq_s8(v222, v226)), veorq_s8(veorq_s8(v213, v225), veorq_s8(v223, v227)));
      v205 = (uint64_t)veor_s8(*(int8x8_t *)v251.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v251, v251, 8uLL));
      if (v212 == v216)
      {
        v195 = v206 - 8 * v216 + 8;
LABEL_88:
        v196 = 48 - v195;
        v197 = v211;
        goto LABEL_89;
      }
    }
    else
    {
      v210 = 40 - v196;
      v211 = (uint8x16_t *)*a1;
    }
    v252 = v210;
    do
    {
      v253 = v211->u8[0];
      v211 = (uint8x16_t *)((char *)v211 + 1);
      v205 ^= (unint64_t)v253 << v252;
      v254 = v252 - 8;
      if (v252 < 8)
        break;
      v252 -= 8;
    }
    while ((unint64_t)v211 < v207);
    v195 = v254 + 8;
    goto LABEL_88;
  }
LABEL_114:
  v255 = v86 + v85;
  v256 = 2 * a2;
  v257 = a3 - 1 - a2;
  v258 = v257 - ((v255 + 1) >> 1);
  if ((v255 & 1) == 0)
    v258 = v257 + (v255 >> 1);
  if (v255 <= 2 * v257)
    v259 = v258;
  else
    v259 = v255;
  v260 = a3 - 1 - v259;
  v261 = a2 - ((v255 + 1) >> 1);
  if ((v255 & 1) == 0)
    v261 = a2 + (v255 >> 1);
  if (v256 >= v255)
    v255 = v261;
  if (v256 <= a3)
    return v255;
  else
    return v260;
}

unsigned __int8 **dav1d_msac_decode_symbol_adapt_c(unsigned __int8 **result, int16x8_t *a2, unint64_t a3)
{
  unsigned __int8 **v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint8x16_t *v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  uint8x16_t *v25;
  unint64_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  uint8x16_t v43;
  uint16x8_t v44;
  uint32x4_t v45;
  uint64x2_t v46;
  uint64x2_t v47;
  uint32x4_t v48;
  uint64x2_t v49;
  uint16x8_t v50;
  uint32x4_t v51;
  uint64x2_t v52;
  uint64x2_t v53;
  uint64x2_t v54;
  uint64x2_t v55;
  uint32x4_t v56;
  uint64x2_t v57;
  uint64x2_t v58;
  uint64x2_t v59;
  uint64x2_t v60;
  uint64x2_t v61;
  uint64x2_t v62;
  uint64x2_t v63;
  uint64x2_t v64;
  uint64x2_t v65;
  int8x16_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned __int8 **v72;
  unsigned int v73;
  int16x8_t *v74;
  unsigned __int8 **v75;
  uint32x4_t v76;
  int32x4_t v77;
  int16x8_t v78;
  uint64_t v79;
  __int16 *v80;
  uint64_t v81;
  __int16 v82;

  v3 = result;
  v4 = (unint64_t)result[2];
  v5 = *((_DWORD *)result + 6);
  v6 = v5 >> 8;
  v7 = a2->u16[a3];
  v8 = 4 * a3 + 4;
  LODWORD(result) = -1;
  do
  {
    v9 = v5;
    result = (unsigned __int8 **)((_DWORD)result + 1);
    v10 = v6 * (a2->u16[result] >> 6);
    v11 = v10 >> 1;
    v5 = (v10 >> 1) + 4 * (a3 - (_DWORD)result);
    v8 -= 4;
  }
  while ((v10 >> 1) + v8 > HIWORD(v4));
  v12 = -v8 - v11;
  v13 = v9 - v11 - v8;
  v14 = v9 - (v10 >> 1) - v8;
  v15 = __clz(v13) ^ 0x10;
  v16 = *((_DWORD *)v3 + 7);
  v17 = v16 - v15;
  v18 = ((v4 + (v12 << 48) + 1) << v15) - 1;
  v3[2] = (unsigned __int8 *)v18;
  *((_DWORD *)v3 + 6) = v14 << v15;
  *((_DWORD *)v3 + 7) = v16 - v15;
  if (((v16 - v15) & 0x80000000) != 0)
  {
    v19 = (uint8x16_t *)*v3;
    v20 = 40 - v17;
    if ((int)(40 - v17) < 0)
      goto LABEL_22;
    v21 = (unint64_t)v3[1];
    if ((unint64_t)v19 >= v21)
      goto LABEL_22;
    if (v20 >= 7)
      v22 = 7;
    else
      v22 = 40 - v17;
    v23 = (v15 - v16 - v22 + 47) >> 3;
    if (~(unint64_t)v19 + v21 < v23)
      v23 = ~(unint64_t)v19 + v21;
    if (v23 >= 0xF)
    {
      v26 = v23 + 1;
      v27 = (int8x16_t)(unint64_t)v18;
      v28 = vdupq_n_s32(v20);
      v29 = 0uLL;
      v30 = vaddq_s32(v28, (int32x4_t)xmmword_196889AA0);
      v31 = vaddq_s32(v28, (int32x4_t)xmmword_196889AB0);
      v32 = vaddq_s32(v28, (int32x4_t)xmmword_196889AC0);
      v33 = vaddq_s32(v28, (int32x4_t)xmmword_196889AD0);
      v34.i64[0] = 0x7F0000007FLL;
      v34.i64[1] = 0x7F0000007FLL;
      v35 = (v23 + 1) & 0x3FFFFFF0;
      v24 = v20 - 8 * v35;
      v25 = (uint8x16_t *)((char *)v19 + v35);
      v36 = v35;
      v37 = 0uLL;
      v38 = 0uLL;
      v39 = 0uLL;
      v40 = 0uLL;
      v41 = 0uLL;
      v42 = 0uLL;
      do
      {
        v43 = *v19++;
        v44 = vmovl_high_u8(v43);
        v45 = vmovl_high_u16(v44);
        v46.i64[0] = v45.u32[0];
        v46.i64[1] = v45.u32[1];
        v47 = v46;
        v48 = vmovl_u16(*(uint16x4_t *)v44.i8);
        v46.i64[0] = v48.u32[2];
        v46.i64[1] = v48.u32[3];
        v49 = v46;
        v50 = vmovl_u8(*(uint8x8_t *)v43.i8);
        v51 = vmovl_high_u16(v50);
        v46.i64[0] = v51.u32[2];
        v46.i64[1] = v51.u32[3];
        v52 = v46;
        v46.i64[0] = v45.u32[2];
        v46.i64[1] = v45.u32[3];
        v53 = v46;
        v46.i64[0] = v48.u32[0];
        v46.i64[1] = v48.u32[1];
        v54 = v46;
        v46.i64[0] = v51.u32[0];
        v46.i64[1] = v51.u32[1];
        v55 = v46;
        v56 = vmovl_u16(*(uint16x4_t *)v50.i8);
        v46.i64[0] = v56.u32[2];
        v46.i64[1] = v56.u32[3];
        v57 = v46;
        v46.i64[0] = v56.u32[0];
        v46.i64[1] = v56.u32[1];
        v58 = v46;
        v46.i64[0] = v30.u32[0];
        v46.i64[1] = v30.u32[1];
        v59 = v46;
        v46.i64[0] = v31.u32[2];
        v46.i64[1] = v31.u32[3];
        v60 = v46;
        v46.i64[0] = v32.u32[2];
        v46.i64[1] = v32.u32[3];
        v61 = v46;
        v46.i64[0] = v30.u32[2];
        v46.i64[1] = v30.u32[3];
        v62 = v46;
        v46.i64[0] = v31.u32[0];
        v46.i64[1] = v31.u32[1];
        v63 = v46;
        v46.i64[0] = v32.u32[0];
        v46.i64[1] = v32.u32[1];
        v64 = v46;
        v46.i64[0] = v33.u32[2];
        v46.i64[1] = v33.u32[3];
        v65 = v46;
        v46.i64[0] = v33.u32[0];
        v46.i64[1] = v33.u32[1];
        v41 = veorq_s8((int8x16_t)vshlq_u64(v47, v59), v41);
        v40 = veorq_s8((int8x16_t)vshlq_u64(v49, v60), v40);
        v38 = veorq_s8((int8x16_t)vshlq_u64(v52, v61), v38);
        v42 = veorq_s8((int8x16_t)vshlq_u64(v53, v62), v42);
        v39 = veorq_s8((int8x16_t)vshlq_u64(v54, v63), v39);
        v37 = veorq_s8((int8x16_t)vshlq_u64(v55, v64), v37);
        v29 = veorq_s8((int8x16_t)vshlq_u64(v57, v65), v29);
        v27 = veorq_s8((int8x16_t)vshlq_u64(v58, v46), v27);
        v33 = vaddq_s32(v33, v34);
        v32 = vaddq_s32(v32, v34);
        v31 = vaddq_s32(v31, v34);
        v30 = vaddq_s32(v30, v34);
        v36 -= 16;
      }
      while (v36);
      v66 = veorq_s8(veorq_s8(veorq_s8(v27, v39), veorq_s8(v37, v41)), veorq_s8(veorq_s8(v29, v40), veorq_s8(v38, v42)));
      v18 = (uint64_t)veor_s8(*(int8x8_t *)v66.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL));
      if (v26 == v35)
      {
        v67 = v20 - 8 * v35 + 8;
LABEL_21:
        v17 = 48 - v67;
        v19 = v25;
LABEL_22:
        v3[2] = (unsigned __int8 *)v18;
        *((_DWORD *)v3 + 7) = v17;
        *v3 = (unsigned __int8 *)v19;
        goto LABEL_23;
      }
    }
    else
    {
      v24 = 40 - v17;
      v25 = (uint8x16_t *)*v3;
    }
    v68 = v24;
    do
    {
      v69 = v25->u8[0];
      v25 = (uint8x16_t *)((char *)v25 + 1);
      v18 ^= (unint64_t)v69 << v68;
      v70 = v68 - 8;
      if (v68 < 8)
        break;
      v68 -= 8;
    }
    while ((unint64_t)v25 < v21);
    v67 = v70 + 8;
    goto LABEL_21;
  }
LABEL_23:
  if (!*((_DWORD *)v3 + 8))
    return result;
  v71 = (v7 >> 4) | 4;
  if (a3 > 2)
    ++v71;
  if ((_DWORD)result)
  {
    if (result >= 0x10)
    {
      v72 = (unsigned __int8 **)(result & 0xFFFFFFF0);
      v74 = a2 + 1;
      v75 = v72;
      v76.i64[0] = 0x800000008000;
      v76.i64[1] = 0x800000008000;
      v77 = vnegq_s32(vdupq_n_s32(v71));
      do
      {
        v78 = vaddq_s16(*v74, vuzp1q_s16((int16x8_t)vshlq_s32((int32x4_t)vsubw_u16(v76, *(uint16x4_t *)v74->i8), v77), (int16x8_t)vshlq_s32((int32x4_t)vsubw_high_u16(v76, *(uint16x8_t *)v74), v77)));
        v74[-1] = vaddq_s16(v74[-1], vuzp1q_s16((int16x8_t)vshlq_s32((int32x4_t)vsubw_u16(v76, *(uint16x4_t *)v74[-1].i8), v77), (int16x8_t)vshlq_s32((int32x4_t)vsubw_high_u16(v76, (uint16x8_t)v74[-1]), v77)));
        *v74 = v78;
        v74 += 2;
        v75 -= 2;
      }
      while (v75);
      v73 = result;
      if (v72 == result)
        goto LABEL_36;
    }
    else
    {
      v72 = 0;
    }
    v79 = (char *)result - (char *)v72;
    v80 = &a2->i16[(_QWORD)v72];
    do
    {
      *v80 += (0x8000 - (unsigned __int16)*v80) >> v71;
      ++v80;
      --v79;
    }
    while (v79);
    v73 = result;
  }
  else
  {
    v73 = 0;
  }
LABEL_36:
  v81 = v73;
  if (v73 < a3)
  {
    do
    {
      a2->i16[v81] -= a2->u16[v81] >> v71;
      v81 = v73 + 1;
      v73 = v81;
    }
    while (v81 < a3);
  }
  if (v7 >= 0x20)
    v82 = v7;
  else
    v82 = v7 + 1;
  a2->i16[a3] = v82;
  return result;
}

BOOL dav1d_msac_decode_BOOL_adapt_c(unsigned __int8 **a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned __int8 *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint8x16_t *v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  uint8x16_t *v21;
  unint64_t v22;
  int8x16_t v23;
  int32x4_t v24;
  int8x16_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  uint8x16_t v39;
  uint16x8_t v40;
  uint32x4_t v41;
  uint64x2_t v42;
  uint64x2_t v43;
  uint32x4_t v44;
  uint64x2_t v45;
  uint16x8_t v46;
  uint32x4_t v47;
  uint64x2_t v48;
  uint64x2_t v49;
  uint64x2_t v50;
  uint64x2_t v51;
  uint32x4_t v52;
  uint64x2_t v53;
  uint64x2_t v54;
  uint64x2_t v55;
  uint64x2_t v56;
  uint64x2_t v57;
  uint64x2_t v58;
  uint64x2_t v59;
  uint64x2_t v60;
  uint64x2_t v61;
  int8x16_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  char v68;
  unsigned int v69;
  unsigned int v70;
  unsigned __int16 v71;

  v2 = *a2;
  v3 = a1[2];
  v4 = *((_DWORD *)a1 + 6);
  v5 = *((_DWORD *)a1 + 7);
  v6 = (((v4 >> 8) * (v2 >> 6)) >> 1) + 4;
  v7 = v6 << 48;
  v8 = v4 - 2 * v6;
  if ((unint64_t)v3 >= v6 << 48)
    v9 = v6 << 48;
  else
    v9 = 0;
  if ((unint64_t)v3 < v6 << 48)
    v8 = 0;
  v10 = v8 + v6;
  v11 = __clz(v10);
  v12 = v11 ^ 0x10;
  v13 = v5 - (v11 ^ 0x10);
  v14 = ((_QWORD)&v3[-v9 + 1] << (v11 ^ 0x10)) - 1;
  a1[2] = (unsigned __int8 *)v14;
  *((_DWORD *)a1 + 6) = v10 << (v11 ^ 0x10);
  *((_DWORD *)a1 + 7) = v13;
  if ((v13 & 0x80000000) != 0)
  {
    v15 = (uint8x16_t *)*a1;
    v16 = 40 - v13;
    if ((int)(40 - v13) < 0)
      goto LABEL_25;
    v17 = (unint64_t)a1[1];
    if ((unint64_t)v15 >= v17)
      goto LABEL_25;
    if (v16 >= 7)
      v18 = 7;
    else
      v18 = 40 - v13;
    v19 = (v12 - v5 - v18 + 47) >> 3;
    if (~(unint64_t)v15 + v17 < v19)
      v19 = ~(unint64_t)v15 + v17;
    if (v19 >= 0xF)
    {
      v22 = v19 + 1;
      v23 = (int8x16_t)(unint64_t)v14;
      v24 = vdupq_n_s32(v16);
      v25 = 0uLL;
      v26 = vaddq_s32(v24, (int32x4_t)xmmword_196889AA0);
      v27 = vaddq_s32(v24, (int32x4_t)xmmword_196889AB0);
      v28 = vaddq_s32(v24, (int32x4_t)xmmword_196889AC0);
      v29 = vaddq_s32(v24, (int32x4_t)xmmword_196889AD0);
      v30.i64[0] = 0x7F0000007FLL;
      v30.i64[1] = 0x7F0000007FLL;
      v31 = (v19 + 1) & 0x3FFFFFF0;
      v20 = v16 - 8 * v31;
      v21 = (uint8x16_t *)((char *)v15 + v31);
      v32 = v31;
      v33 = 0uLL;
      v34 = 0uLL;
      v35 = 0uLL;
      v36 = 0uLL;
      v37 = 0uLL;
      v38 = 0uLL;
      do
      {
        v39 = *v15++;
        v40 = vmovl_high_u8(v39);
        v41 = vmovl_high_u16(v40);
        v42.i64[0] = v41.u32[0];
        v42.i64[1] = v41.u32[1];
        v43 = v42;
        v44 = vmovl_u16(*(uint16x4_t *)v40.i8);
        v42.i64[0] = v44.u32[2];
        v42.i64[1] = v44.u32[3];
        v45 = v42;
        v46 = vmovl_u8(*(uint8x8_t *)v39.i8);
        v47 = vmovl_high_u16(v46);
        v42.i64[0] = v47.u32[2];
        v42.i64[1] = v47.u32[3];
        v48 = v42;
        v42.i64[0] = v41.u32[2];
        v42.i64[1] = v41.u32[3];
        v49 = v42;
        v42.i64[0] = v44.u32[0];
        v42.i64[1] = v44.u32[1];
        v50 = v42;
        v42.i64[0] = v47.u32[0];
        v42.i64[1] = v47.u32[1];
        v51 = v42;
        v52 = vmovl_u16(*(uint16x4_t *)v46.i8);
        v42.i64[0] = v52.u32[2];
        v42.i64[1] = v52.u32[3];
        v53 = v42;
        v42.i64[0] = v52.u32[0];
        v42.i64[1] = v52.u32[1];
        v54 = v42;
        v42.i64[0] = v26.u32[0];
        v42.i64[1] = v26.u32[1];
        v55 = v42;
        v42.i64[0] = v27.u32[2];
        v42.i64[1] = v27.u32[3];
        v56 = v42;
        v42.i64[0] = v28.u32[2];
        v42.i64[1] = v28.u32[3];
        v57 = v42;
        v42.i64[0] = v26.u32[2];
        v42.i64[1] = v26.u32[3];
        v58 = v42;
        v42.i64[0] = v27.u32[0];
        v42.i64[1] = v27.u32[1];
        v59 = v42;
        v42.i64[0] = v28.u32[0];
        v42.i64[1] = v28.u32[1];
        v60 = v42;
        v42.i64[0] = v29.u32[2];
        v42.i64[1] = v29.u32[3];
        v61 = v42;
        v42.i64[0] = v29.u32[0];
        v42.i64[1] = v29.u32[1];
        v37 = veorq_s8((int8x16_t)vshlq_u64(v43, v55), v37);
        v36 = veorq_s8((int8x16_t)vshlq_u64(v45, v56), v36);
        v34 = veorq_s8((int8x16_t)vshlq_u64(v48, v57), v34);
        v38 = veorq_s8((int8x16_t)vshlq_u64(v49, v58), v38);
        v35 = veorq_s8((int8x16_t)vshlq_u64(v50, v59), v35);
        v33 = veorq_s8((int8x16_t)vshlq_u64(v51, v60), v33);
        v25 = veorq_s8((int8x16_t)vshlq_u64(v53, v61), v25);
        v23 = veorq_s8((int8x16_t)vshlq_u64(v54, v42), v23);
        v29 = vaddq_s32(v29, v30);
        v28 = vaddq_s32(v28, v30);
        v27 = vaddq_s32(v27, v30);
        v26 = vaddq_s32(v26, v30);
        v32 -= 16;
      }
      while (v32);
      v62 = veorq_s8(veorq_s8(veorq_s8(v23, v35), veorq_s8(v33, v37)), veorq_s8(veorq_s8(v25, v36), veorq_s8(v34, v38)));
      v14 = (uint64_t)veor_s8(*(int8x8_t *)v62.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL));
      if (v22 == v31)
      {
        v63 = v16 - 8 * v31 + 8;
LABEL_24:
        v13 = 48 - v63;
        v15 = v21;
LABEL_25:
        a1[2] = (unsigned __int8 *)v14;
        *((_DWORD *)a1 + 7) = v13;
        *a1 = (unsigned __int8 *)v15;
        goto LABEL_26;
      }
    }
    else
    {
      v20 = 40 - v13;
      v21 = (uint8x16_t *)*a1;
    }
    v64 = v20;
    do
    {
      v65 = v21->u8[0];
      v21 = (uint8x16_t *)((char *)v21 + 1);
      v14 ^= (unint64_t)v65 << v64;
      v66 = v64 - 8;
      if (v64 < 8)
        break;
      v64 -= 8;
    }
    while ((unint64_t)v21 < v17);
    v63 = v66 + 8;
    goto LABEL_24;
  }
LABEL_26:
  if (*((_DWORD *)a1 + 8))
  {
    v67 = a2[1];
    v68 = (v67 >> 4) + 4;
    v69 = v2 - (v2 >> v68);
    v70 = v2 + ((int)(0x8000 - v2) >> v68);
    if ((unint64_t)v3 >= v7)
      LOWORD(v70) = v69;
    *a2 = v70;
    if (v67 >= 0x20)
      v71 = v67;
    else
      v71 = v67 + 1;
    a2[1] = v71;
  }
  return (unint64_t)v3 < v7;
}

uint64_t dav1d_parse_obus(unint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  _OWORD *v42;
  __int128 *v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t result;
  int v55;
  int v56;
  void **v57;
  void **v58;
  int *v59;
  int v60;
  int v61;
  int uleb128;
  BOOL v63;
  int v64;
  int v66;
  int v67;
  void **v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  void **v76;
  void **v77;
  _DWORD *v78;
  void **v79;
  void **v80;
  _WORD *v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  int v90;
  char *v91;
  char *v92;
  int v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  int v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  int bits;
  char v108;
  char v109;
  int v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  unsigned __int8 *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  int *v133;
  uint64_t v134;
  pthread_cond_t *v135;
  pthread_mutex_t **v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  __int128 v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int *v154;
  unsigned int v155;
  __int128 v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int *v159;
  unsigned int v160;
  __int128 v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int *v164;
  unsigned int v165;
  __int128 v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int *v169;
  unsigned int v170;
  __int128 v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int *v174;
  unsigned int v175;
  __int128 v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int *v179;
  unsigned int v180;
  __int128 v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int *v184;
  unsigned int v185;
  __int128 v186;
  unsigned int *v187;
  unsigned int v188;
  unsigned int *v189;
  unsigned int v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  int v199;
  int v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  void **v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned __int8 *v220;
  unsigned __int8 *v221;
  unint64_t v222;

  v7 = *(unsigned __int8 **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)a2 + v6;
  v221 = v7;
  v222 = v8;
  v217 = 0;
  v218 = 0;
  v9 = v7 + 1;
  v220 = v7 + 1;
  v219 = 8;
  v10 = *v7;
  if (v6 > 1)
  {
    v11 = 0;
    v12 = a1 + 88792;
    v13 = v10 << 61;
    LODWORD(v219) = 0;
    v218 = 0;
    if (((v10 << 61) & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    LODWORD(v219) = 8;
    if (v6 < 2)
    {
      v18 = 0;
      if ((unint64_t)v9 >= v8)
      {
LABEL_8:
        v217 = v11 | 0x100000000;
        v14 = v11;
        v11 = 1;
        v16 = v18 >> 5;
        v15 = (v18 >> 3) & 3;
        LODWORD(v219) = 0;
        v218 = 0;
        if ((v10 & 2) == 0)
          goto LABEL_4;
        goto LABEL_12;
      }
    }
    else
    {
      v9 = v7 + 2;
      v220 = v7 + 2;
      v18 = v7[1];
      if ((unint64_t)(v7 + 2) >= v8)
        goto LABEL_8;
    }
    v14 = 0;
    v16 = v18 >> 5;
    v15 = (v18 >> 3) & 3;
    LODWORD(v219) = 0;
    v218 = 0;
    if ((v10 & 2) == 0)
      goto LABEL_4;
    goto LABEL_12;
  }
  v11 = 1;
  HIDWORD(v217) = 1;
  v12 = a1 + 88792;
  v13 = v10 << 61;
  LODWORD(v219) = 0;
  v218 = 0;
  if (((v10 << 61) & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  v14 = 0;
  v15 = 0;
  LODWORD(v16) = 0;
  if ((v10 & 2) == 0)
  {
LABEL_4:
    LODWORD(v17) = v6 + ~((v10 >> 2) & 1);
    goto LABEL_62;
  }
LABEL_12:
  LODWORD(v219) = 8;
  if (v11)
  {
    v19 = 0;
    if ((unint64_t)v9 < v8)
      goto LABEL_15;
    goto LABEL_14;
  }
  v220 = v9 + 1;
  v19 = *v9++;
  if ((unint64_t)v220 >= v8)
  {
LABEL_14:
    v217 = v11 | 0x100000000;
    v14 = v11;
    v11 = 1;
  }
LABEL_15:
  LODWORD(v219) = 0;
  v218 = 0;
  v17 = v19 & 0x7F;
  v20 = v19 > 0x7F;
  if (v19 < 0x80)
    goto LABEL_60;
  LODWORD(v219) = 8;
  if (v11)
  {
    v21 = 0;
    if ((unint64_t)v9 < v8)
      goto LABEL_19;
    goto LABEL_18;
  }
  v220 = v9 + 1;
  v21 = *v9++;
  if ((unint64_t)v220 >= v8)
  {
LABEL_18:
    v217 = v11 | 0x100000000;
    v14 = v11;
    v11 = 1;
  }
LABEL_19:
  LODWORD(v219) = 0;
  v218 = 0;
  v17 = v17 & 0xFFFFFFFFFFFFC07FLL | ((v21 & 0x7F) << 7);
  v20 = v21 > 0x7F;
  if (v21 < 0x80)
    goto LABEL_60;
  LODWORD(v219) = 8;
  if (v11)
  {
    v22 = 0;
    if ((unint64_t)v9 < v8)
      goto LABEL_23;
    goto LABEL_22;
  }
  v220 = v9 + 1;
  v22 = *v9++;
  if ((unint64_t)v220 >= v8)
  {
LABEL_22:
    v217 = v11 | 0x100000000;
    v14 = v11;
    v11 = 1;
  }
LABEL_23:
  LODWORD(v219) = 0;
  v218 = 0;
  v17 = v17 & 0xFFFFFFFFFFE03FFFLL | ((v22 & 0x7F) << 14);
  v20 = v22 > 0x7F;
  if (v22 < 0x80)
    goto LABEL_60;
  LODWORD(v219) = 8;
  if (v11)
  {
    v23 = 0;
    if ((unint64_t)v9 < v8)
      goto LABEL_27;
    goto LABEL_26;
  }
  v220 = v9 + 1;
  v23 = *v9++;
  if ((unint64_t)v220 >= v8)
  {
LABEL_26:
    v217 = v11 | 0x100000000;
    v14 = v11;
    v11 = 1;
  }
LABEL_27:
  LODWORD(v219) = 0;
  v218 = 0;
  v17 = v17 & 0xFFFFFFFFF01FFFFFLL | ((v23 & 0x7F) << 21);
  v20 = v23 > 0x7F;
  if (v23 >= 0x80)
  {
    LODWORD(v219) = 8;
    if (v11)
    {
      v24 = 0;
    }
    else
    {
      v220 = v9 + 1;
      v24 = *v9++;
    }
    if ((unint64_t)v9 >= v8)
    {
      v217 = v11 | 0x100000000;
      v14 = v11;
      v11 = 1;
    }
    LODWORD(v219) = 0;
    v218 = 0;
    v17 = v17 & 0xFFFFFFF80FFFFFFFLL | ((v24 & 0x7F) << 28);
    v20 = v24 > 0x7F;
    if (v24 >= 0x80)
    {
      LODWORD(v219) = 8;
      if (v11)
      {
        v25 = 0;
      }
      else
      {
        v220 = v9 + 1;
        v25 = *v9++;
      }
      if ((unint64_t)v9 >= v8)
      {
        v217 = v11 | 0x100000000;
        v14 = v11;
        v11 = 1;
      }
      LODWORD(v219) = 0;
      v218 = 0;
      v17 = v17 & 0xFFFFFC07FFFFFFFFLL | ((v25 & 0x7F) << 35);
      v20 = v25 > 0x7F;
      if (v25 >= 0x80)
      {
        LODWORD(v219) = 8;
        if (v11)
        {
          v26 = 0;
        }
        else
        {
          v220 = v9 + 1;
          v26 = *v9++;
        }
        if ((unint64_t)v9 >= v8)
        {
          v217 = v11 | 0x100000000;
          v14 = v11;
          v11 = 1;
        }
        LODWORD(v219) = 0;
        v218 = 0;
        v17 = v17 & 0xFFFE03FFFFFFFFFFLL | ((v26 & 0x7F) << 42);
        v20 = v26 > 0x7F;
        if (v26 >= 0x80)
        {
          LODWORD(v219) = 8;
          if (v11)
          {
            v27 = 0;
          }
          else
          {
            v220 = v9 + 1;
            v27 = *v9++;
          }
          if ((unint64_t)v9 >= v8)
          {
            v217 = v11 | 0x100000000;
            v14 = v11;
          }
          LODWORD(v219) = 0;
          v218 = 0;
          v17 = v17 & 0xFF01FFFFFFFFFFFFLL | ((v27 & 0x7F) << 49);
          v20 = v27 > 0x7F;
        }
      }
    }
  }
LABEL_60:
  if (v20 || HIDWORD(v17))
  {
    LODWORD(v217) = 1;
LABEL_72:
    v42 = (_OWORD *)(a1 + 88832);
    v43 = (__int128 *)(a2 + 24);
    v44 = *(_QWORD *)(v12 + 80);
    if (v44)
    {
      v45 = (unsigned int *)(v44 + 16);
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        v48 = *(_DWORD *)(v44 + 20);
        (*(void (**)(_QWORD, _QWORD))(v44 + 24))(*(_QWORD *)(v44 + 8), *(_QWORD *)(v44 + 32));
        if (v48)
          free((void *)v44);
      }
      *(_QWORD *)(v12 + 80) = 0;
    }
    v49 = *v43;
    v50 = v43[2];
    v42[1] = v43[1];
    v42[2] = v50;
    *v42 = v49;
    v51 = *(_QWORD *)(v12 + 80);
    if (v51)
    {
      v52 = (unsigned int *)(v51 + 16);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 + 1, v52));
    }
    return 4294967274;
  }
LABEL_62:
  if (v14)
    goto LABEL_72;
  v28 = (_DWORD)v9 - (_DWORD)v7;
  v29 = v28 & 0x1FFFFFFF;
  v30 = v17;
  if (v6 - (unint64_t)(v28 & 0x1FFFFFFF) < v17)
    goto LABEL_72;
  v31 = (v10 >> 3) & 0xF;
  v32 = v28 & 0x1FFFFFFF;
  if (v31 - 3 <= 0xFFFFFFFD && v13 < 0 && *(_DWORD *)v12 && (((256 << v15) | (1 << v16)) & ~*(_DWORD *)v12) != 0)
    return (v32 + v17);
  v33 = (_QWORD *)(a1 + 52184);
  v34 = (_QWORD *)(a1 + 51856);
  v35 = (_QWORD *)(a1 + 51528);
  v36 = (_QWORD *)(a1 + 51200);
  v37 = (_QWORD *)(a1 + 50872);
  v38 = (_QWORD *)(a1 + 50544);
  v39 = (_QWORD *)(a1 + 50216);
  v40 = (_QWORD *)(a1 + 49888);
  v41 = 8 * v28;
  switch(v31)
  {
    case 1u:
      v55 = 8 * v28;
      v198 = (_QWORD *)(a1 + 49888);
      v213 = (_QWORD *)(a1 + 50216);
      v210 = (_QWORD *)(a1 + 50544);
      v205 = v28 & 0x1FFFFFFF;
      v56 = v17;
      dav1d_ref_create_using_pool(*(_QWORD *)(a1 + 56), 1484);
      v216 = v57;
      if (!v57)
        return 4294967284;
      v58 = v57;
      v59 = (int *)*v57;
      bzero(*v57, 0x5CCuLL);
      if ((parse_seq_hdr(a1, (uint64_t)&v217, v59) & 0x80000000) != 0
        || (_DWORD)v217
        || 8 * ((int)v220 - (int)v221) - (int)v219 - v55 > (8 * v56))
      {
        dav1d_ref_dec((uint64_t *)&v216);
        goto LABEL_72;
      }
      v74 = *(_QWORD *)(a1 + 72);
      if (v74)
      {
        if (!memcmp(v59, *(const void **)(a1 + 72), 0x44CuLL))
        {
          if (!memcmp(v59 + 275, (const void *)(v74 + 1100), 0x180uLL))
          {
LABEL_153:
            dav1d_ref_dec((uint64_t *)(a1 + 64));
            *(_QWORD *)(a1 + 64) = v58;
            *(_QWORD *)(a1 + 72) = v59;
            LODWORD(v17) = v56;
            v32 = v205;
            v33 = (_QWORD *)(a1 + 52184);
            v34 = (_QWORD *)(a1 + 51856);
            v35 = (_QWORD *)(a1 + 51528);
            v36 = (_QWORD *)(a1 + 51200);
            v37 = (_QWORD *)(a1 + 50872);
            goto LABEL_190;
          }
          v75 = 2;
        }
        else
        {
          *(_QWORD *)(a1 + 96) = 0;
          *(_QWORD *)(a1 + 128) = 0;
          *(_QWORD *)(a1 + 112) = 0;
          dav1d_ref_dec((uint64_t *)(a1 + 120));
          dav1d_ref_dec((uint64_t *)(a1 + 104));
          if (*v198)
          {
            dav1d_picture_unref_internal(a1 + 49872);
            *(_QWORD *)(a1 + 50144) = 0;
          }
          dav1d_ref_dec((uint64_t *)(a1 + 50152));
          dav1d_ref_dec((uint64_t *)(a1 + 50160));
          dav1d_cdf_thread_unref((uint64_t *)(a1 + 52504));
          if (*v213)
          {
            dav1d_picture_unref_internal(a1 + 50200);
            *(_QWORD *)(a1 + 50472) = 0;
          }
          dav1d_ref_dec((uint64_t *)(a1 + 50480));
          dav1d_ref_dec((uint64_t *)(a1 + 50488));
          dav1d_cdf_thread_unref((uint64_t *)(a1 + 52528));
          if (*v210)
          {
            dav1d_picture_unref_internal(a1 + 50528);
            *(_QWORD *)(a1 + 50800) = 0;
          }
          dav1d_ref_dec((uint64_t *)(a1 + 50808));
          dav1d_ref_dec((uint64_t *)(a1 + 50816));
          dav1d_cdf_thread_unref((uint64_t *)(a1 + 52552));
          if (*(_QWORD *)(a1 + 50872))
          {
            dav1d_picture_unref_internal(a1 + 50856);
            *(_QWORD *)(a1 + 51128) = 0;
          }
          dav1d_ref_dec((uint64_t *)(a1 + 51136));
          dav1d_ref_dec((uint64_t *)(a1 + 51144));
          dav1d_cdf_thread_unref((uint64_t *)(a1 + 52576));
          if (*(_QWORD *)(a1 + 51200))
          {
            dav1d_picture_unref_internal(a1 + 51184);
            *(_QWORD *)(a1 + 51456) = 0;
          }
          dav1d_ref_dec((uint64_t *)(a1 + 51464));
          dav1d_ref_dec((uint64_t *)(a1 + 51472));
          dav1d_cdf_thread_unref((uint64_t *)(a1 + 52600));
          if (*(_QWORD *)(a1 + 51528))
          {
            dav1d_picture_unref_internal(a1 + 51512);
            *(_QWORD *)(a1 + 51784) = 0;
          }
          dav1d_ref_dec((uint64_t *)(a1 + 51792));
          dav1d_ref_dec((uint64_t *)(a1 + 51800));
          dav1d_cdf_thread_unref((uint64_t *)(a1 + 52624));
          if (*(_QWORD *)(a1 + 51856))
          {
            dav1d_picture_unref_internal(a1 + 51840);
            *(_QWORD *)(a1 + 52112) = 0;
          }
          dav1d_ref_dec((uint64_t *)(a1 + 52120));
          dav1d_ref_dec((uint64_t *)(a1 + 52128));
          dav1d_cdf_thread_unref((uint64_t *)(a1 + 52648));
          if (*(_QWORD *)(a1 + 52184))
          {
            dav1d_picture_unref_internal(a1 + 52168);
            *(_QWORD *)(a1 + 52440) = 0;
          }
          dav1d_ref_dec((uint64_t *)(a1 + 52448));
          dav1d_ref_dec((uint64_t *)(a1 + 52456));
          dav1d_cdf_thread_unref((uint64_t *)(a1 + 52672));
          v75 = 1;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 96) = 0;
        v75 = 1;
      }
      *(_DWORD *)(v12 + 32) |= v75;
      goto LABEL_153;
    case 2u:
      *(_DWORD *)(v12 + 32) |= 4u;
      goto LABEL_191;
    case 3u:
    case 6u:
      if (!a3)
        goto LABEL_102;
      goto LABEL_191;
    case 4u:
      goto LABEL_155;
    case 5u:
      v206 = v28 & 0x1FFFFFFF;
      v60 = v17;
      v210 = (_QWORD *)(a1 + 50544);
      v213 = (_QWORD *)(a1 + 50216);
      v198 = (_QWORD *)(a1 + 49888);
      v61 = 8 * v28;
      uleb128 = dav1d_get_uleb128((uint64_t)&v217);
      v40 = (_QWORD *)(a1 + 49888);
      v34 = (_QWORD *)(a1 + 51856);
      v36 = (_QWORD *)(a1 + 51200);
      v39 = (_QWORD *)(a1 + 50216);
      v38 = (_QWORD *)(a1 + 50544);
      v33 = (_QWORD *)(a1 + 52184);
      if ((_DWORD)v217)
        goto LABEL_72;
      if (uleb128 == 1)
      {
        dav1d_ref_create(8);
        v216 = v76;
        if (v76)
        {
          v77 = v76;
          v78 = *v76;
          *v78 = dav1d_get_bits((uint64_t)&v217, 0x10u);
          v78[1] = dav1d_get_bits((uint64_t)&v217, 0x10u);
          dav1d_get_bits((uint64_t)&v217, 1u);
          LODWORD(v219) = 0;
          v218 = 0;
          if (!(_DWORD)v217 && 8 * ((int)v220 - (int)v221) - v61 <= (8 * v60))
          {
            dav1d_ref_dec((uint64_t *)(a1 + 104));
            *(_QWORD *)(a1 + 104) = v77;
            *(_QWORD *)(a1 + 112) = v78;
            goto LABEL_189;
          }
LABEL_145:
          dav1d_ref_dec((uint64_t *)&v216);
          v82 = 2;
          goto LABEL_147;
        }
LABEL_146:
        v82 = 1;
LABEL_147:
        if (v82 == 2)
          goto LABEL_72;
        return 4294967284;
      }
      if (uleb128 == 2)
      {
        dav1d_ref_create(24);
        v216 = v79;
        if (v79)
        {
          v80 = v79;
          v81 = *v79;
          *v81 = dav1d_get_bits((uint64_t)&v217, 0x10u);
          v81[1] = dav1d_get_bits((uint64_t)&v217, 0x10u);
          v81[2] = dav1d_get_bits((uint64_t)&v217, 0x10u);
          v81[3] = dav1d_get_bits((uint64_t)&v217, 0x10u);
          v81[4] = dav1d_get_bits((uint64_t)&v217, 0x10u);
          v81[5] = dav1d_get_bits((uint64_t)&v217, 0x10u);
          v81[6] = dav1d_get_bits((uint64_t)&v217, 0x10u);
          v81[7] = dav1d_get_bits((uint64_t)&v217, 0x10u);
          *((_DWORD *)v81 + 4) = dav1d_get_bits((uint64_t)&v217, 0x20u);
          *((_DWORD *)v81 + 5) = dav1d_get_bits((uint64_t)&v217, 0x20u);
          dav1d_get_bits((uint64_t)&v217, 1u);
          LODWORD(v219) = 0;
          v218 = 0;
          if (!(_DWORD)v217 && 8 * ((int)v220 - (int)v221) - v61 <= (8 * v60))
          {
            dav1d_ref_dec((uint64_t *)(a1 + 120));
            *(_QWORD *)(a1 + 120) = v80;
            *(_QWORD *)(a1 + 128) = v81;
            goto LABEL_189;
          }
          goto LABEL_145;
        }
        goto LABEL_146;
      }
      v37 = (_QWORD *)(a1 + 50872);
      v35 = (_QWORD *)(a1 + 51528);
      LODWORD(v17) = v60;
      v63 = uleb128 == 4;
      v32 = v206;
      if (!v63)
        goto LABEL_191;
      v64 = v60;
      if (v60 >= 1)
      {
        while (!v7[(v29 - 1 + v30)])
        {
          if (v30-- <= 1)
          {
            v64 = 0;
            goto LABEL_167;
          }
        }
        v64 = v30;
      }
LABEL_167:
      v106 = v64 + ~((8 * ((_DWORD)v220 - (_DWORD)v221) - v219 - v61) >> 3);
      bits = dav1d_get_bits((uint64_t)&v217, 8u);
      v108 = bits;
      if (bits == 255)
      {
        v109 = dav1d_get_bits((uint64_t)&v217, 8u);
        v110 = v106 - 2;
      }
      else
      {
        v109 = 0;
        v110 = v106 - 1;
      }
      if (v110 < 1)
        goto LABEL_72;
      v111 = v110;
      dav1d_ref_create(v110 + 24);
      if (!v112)
        return 4294967284;
      v113 = 0;
      v196 = v112;
      v114 = *v112;
      *(_QWORD *)(v114 + 16) = *v112 + 24;
      *(_BYTE *)v114 = v108;
      *(_BYTE *)(v114 + 1) = v109;
      do
      {
        v116 = v219;
        if (v219 >= 8)
        {
          v115 = v218;
          v118 = v219;
        }
        else
        {
          v117 = v220;
          v118 = v219 + 8;
          LODWORD(v219) = v219 + 8;
          if (HIDWORD(v217))
          {
            v119 = 0;
          }
          else
          {
            ++v220;
            v119 = *v117++;
          }
          if ((unint64_t)v117 >= v222)
            v217 = HIDWORD(v217) | 0x100000000;
          v115 = v218 | (v119 << (56 - v116));
        }
        LODWORD(v219) = v118 - 8;
        v218 = v115 << 8;
        *(_BYTE *)(*(_QWORD *)(v114 + 16) + v113++) = HIBYTE(v115);
      }
      while (v111 != v113);
      *(_QWORD *)(v114 + 8) = v111;
      dav1d_ref_dec((uint64_t *)(a1 + 136));
      *(_QWORD *)(a1 + 136) = v196;
      *(_QWORD *)(a1 + 144) = v114;
LABEL_189:
      LODWORD(v17) = v60;
      v32 = v206;
      v34 = (_QWORD *)(a1 + 51856);
      v33 = (_QWORD *)(a1 + 52184);
      v35 = (_QWORD *)(a1 + 51528);
      v36 = (_QWORD *)(a1 + 51200);
      v37 = (_QWORD *)(a1 + 50872);
LABEL_190:
      v38 = v210;
      v39 = v213;
      v40 = v198;
LABEL_191:
      if (!*(_QWORD *)(a1 + 72))
        return (v32 + v17);
      v122 = *(_DWORD **)(a1 + 96);
      if (!v122)
        return (v32 + v17);
      if (!v122[65])
      {
        if (*(_DWORD *)(a1 + 48) == v122[139] * v122[135])
        {
          if (!*(_DWORD *)(a1 + 44))
            goto LABEL_72;
          v127 = v32;
          v128 = v17;
          result = dav1d_submit_frame(a1);
          if ((result & 0x80000000) != 0)
            return result;
          *(_QWORD *)(a1 + 96) = 0;
          *(_DWORD *)(a1 + 48) = 0;
          LODWORD(v17) = v128;
          v32 = v127;
        }
        return (v32 + v17);
      }
      v209 = v32;
      v123 = (_QWORD *)(a1 + 328 * (int)v122[66] + 49872);
      if (!*(_QWORD *)(a1 + 328 * (int)v122[66] + 49888))
        goto LABEL_72;
      v124 = v40;
      v212 = v36;
      v215 = v39;
      v211 = v38;
      v195 = v35;
      v197 = v37;
      v202 = v34;
      v204 = v33;
      v200 = v17;
      if (*(_DWORD *)(a1 + 8) == 1)
      {
        dav1d_picture_ref((_QWORD *)(a1 + 224), v123);
        *(_QWORD *)(a1 + 496) = v123[34];
        *(_QWORD *)(a1 + 488) = v123[33];
        dav1d_data_props_copy(a1 + 296, (__int128 *)(a2 + 24));
        v125 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 264);
        *(_DWORD *)(v12 + 36) |= *(_DWORD *)(a1 + 328 * v125 + 50140) & 3;
        v126 = v125;
        goto LABEL_221;
      }
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 832));
      v129 = *(_DWORD *)(a1 + 808);
      if (v129 + 1 == *(_DWORD *)(a1 + 8))
        v130 = 0;
      else
        v130 = v129 + 1;
      *(_DWORD *)(a1 + 808) = v130;
      v131 = *(_QWORD *)a1;
      v132 = *(_QWORD *)a1 + 5392 * v129;
      if (*(int *)(v132 + 2988) >= 1)
      {
        v133 = (int *)(v132 + 2988);
        v134 = v131 + 5392 * v129;
        v135 = (pthread_cond_t *)(v134 + 5200);
        v136 = (pthread_mutex_t **)(v134 + 5248);
        do
          pthread_cond_wait(v135, *v136);
        while (*v133 > 0);
      }
      v137 = *(_QWORD *)(a1 + 800);
      v138 = v137 + 280 * v129;
      if (*(_QWORD *)(v138 + 16) || (v139 = atomic_load((unsigned int *)(v131 + 5392 * v129 + 5340))) != 0)
      {
        v140 = (unsigned int *)(a1 + 944);
        v141 = atomic_load((unsigned int *)(a1 + 944));
        if (v141 + 1 >= *(_DWORD *)(a1 + 8))
        {
          atomic_store(0, v140);
        }
        else
        {
          do
            v142 = __ldaxr(v140);
          while (__stlxr(v142 + 1, v140));
        }
        v143 = *(_DWORD *)(a1 + 948);
        if (v143)
        {
          if (v143 < *(_DWORD *)(a1 + 8))
            *(_DWORD *)(a1 + 948) = v143 - 1;
        }
      }
      v144 = v131 + 5392 * v129;
      v145 = *(_DWORD *)(v144 + 5332);
      if (v145)
      {
        *(_DWORD *)(v12 + 88) = v145;
        *(_DWORD *)(v144 + 5332) = 0;
        dav1d_data_props_copy(a1 + 88832, (__int128 *)(v138 + 72));
      }
      else
      {
        if (!*(_QWORD *)(v138 + 16))
          goto LABEL_220;
        v191 = v137 + 280 * v129;
        if ((*(_DWORD *)(v191 + 264) || *(_DWORD *)(v12 + 20)) && *(_DWORD *)(*(_QWORD *)(v191 + 272) + 4) != -2)
        {
          v192 = (_QWORD *)(v191 + 272);
          v193 = (_QWORD *)(v191 + 264);
          dav1d_picture_ref((_QWORD *)(a1 + 224), (_QWORD *)(v137 + 280 * v129));
          *(_QWORD *)(a1 + 496) = *v192;
          *(_QWORD *)(a1 + 488) = *v193;
          *(_DWORD *)(v12 + 36) |= *(_DWORD *)(v137 + 280 * v129 + 268) & 3;
        }
      }
      dav1d_picture_unref_internal(v137 + 280 * v129);
      *(_QWORD *)(v137 + 280 * v129 + 272) = 0;
LABEL_220:
      v146 = a1 + 328 * *(int *)(*(_QWORD *)(a1 + 96) + 264) + 49872;
      dav1d_picture_ref((_QWORD *)(v137 + 280 * v129), (_QWORD *)v146);
      v147 = v137 + 280 * v129;
      *(_QWORD *)(v147 + 272) = *(_QWORD *)(v146 + 272);
      *(_DWORD *)(v147 + 268) = *(_DWORD *)(v146 + 268);
      *(_DWORD *)(v147 + 264) = 1;
      dav1d_data_props_copy(v138 + 72, (__int128 *)(a2 + 24));
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 832));
      v126 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 264);
      v125 = v126;
LABEL_221:
      v148 = (_QWORD *)(a1 + 328 * v125 + 49872);
      if (!*(_DWORD *)(*(_QWORD *)(a1 + 328 * v125 + 49880) + 232))
      {
        v149 = a1 + 24 * v125 + 52504;
        v150 = (_QWORD *)(a1 + 328 * v125 + 50152);
        if (!v126)
          goto LABEL_306;
        if (*v124)
        {
          dav1d_picture_unref_internal(a1 + 49872);
          v124[32] = 0;
        }
        dav1d_picture_ref((_QWORD *)(a1 + 49872), v148);
        v124[32] = v148[34];
        v124[31] = v148[33];
        dav1d_cdf_thread_unref((uint64_t *)(a1 + 52504));
        v151 = *(_OWORD *)v149;
        *(_QWORD *)(a1 + 52520) = *(_QWORD *)(v149 + 16);
        *(_OWORD *)(a1 + 52504) = v151;
        if (*(_QWORD *)v149)
        {
          v152 = (unsigned int *)(*(_QWORD *)v149 + 16);
          do
            v153 = __ldaxr(v152);
          while (__stlxr(v153 + 1, v152));
        }
        dav1d_ref_dec(v124 + 33);
        v124[33] = *v150;
        if (*v150)
        {
          v154 = (unsigned int *)(*v150 + 16);
          do
            v155 = __ldaxr(v154);
          while (__stlxr(v155 + 1, v154));
        }
        dav1d_ref_dec((uint64_t *)(a1 + 50160));
        if (v126 != 1)
        {
LABEL_306:
          if (*v215)
          {
            dav1d_picture_unref_internal(a1 + 50200);
            v215[32] = 0;
          }
          dav1d_picture_ref((_QWORD *)(a1 + 50200), v148);
          v215[32] = v148[34];
          v215[31] = v148[33];
          dav1d_cdf_thread_unref((uint64_t *)(a1 + 52528));
          v156 = *(_OWORD *)v149;
          *(_QWORD *)(a1 + 52544) = *(_QWORD *)(v149 + 16);
          *(_OWORD *)(a1 + 52528) = v156;
          if (*(_QWORD *)v149)
          {
            v157 = (unsigned int *)(*(_QWORD *)v149 + 16);
            do
              v158 = __ldaxr(v157);
            while (__stlxr(v158 + 1, v157));
          }
          dav1d_ref_dec(v215 + 33);
          v215[33] = *v150;
          if (*v150)
          {
            v159 = (unsigned int *)(*v150 + 16);
            do
              v160 = __ldaxr(v159);
            while (__stlxr(v160 + 1, v159));
          }
          dav1d_ref_dec((uint64_t *)(a1 + 50488));
          if (v126 == 2)
            goto LABEL_305;
        }
        if (*v211)
        {
          dav1d_picture_unref_internal(a1 + 50528);
          v211[32] = 0;
        }
        dav1d_picture_ref((_QWORD *)(a1 + 50528), v148);
        v211[32] = v148[34];
        v211[31] = v148[33];
        dav1d_cdf_thread_unref((uint64_t *)(a1 + 52552));
        v161 = *(_OWORD *)v149;
        *(_QWORD *)(a1 + 52568) = *(_QWORD *)(v149 + 16);
        *(_OWORD *)(a1 + 52552) = v161;
        if (*(_QWORD *)v149)
        {
          v162 = (unsigned int *)(*(_QWORD *)v149 + 16);
          do
            v163 = __ldaxr(v162);
          while (__stlxr(v163 + 1, v162));
        }
        dav1d_ref_dec(v211 + 33);
        v211[33] = *v150;
        if (*v150)
        {
          v164 = (unsigned int *)(*v150 + 16);
          do
            v165 = __ldaxr(v164);
          while (__stlxr(v165 + 1, v164));
        }
        dav1d_ref_dec((uint64_t *)(a1 + 50816));
        if (v126 != 3)
        {
LABEL_305:
          if (*v197)
          {
            dav1d_picture_unref_internal(a1 + 50856);
            v197[32] = 0;
          }
          dav1d_picture_ref((_QWORD *)(a1 + 50856), v148);
          v197[32] = v148[34];
          v197[31] = v148[33];
          dav1d_cdf_thread_unref((uint64_t *)(a1 + 52576));
          v166 = *(_OWORD *)v149;
          *(_QWORD *)(a1 + 52592) = *(_QWORD *)(v149 + 16);
          *(_OWORD *)(a1 + 52576) = v166;
          if (*(_QWORD *)v149)
          {
            v167 = (unsigned int *)(*(_QWORD *)v149 + 16);
            do
              v168 = __ldaxr(v167);
            while (__stlxr(v168 + 1, v167));
          }
          dav1d_ref_dec(v197 + 33);
          v197[33] = *v150;
          if (*v150)
          {
            v169 = (unsigned int *)(*v150 + 16);
            do
              v170 = __ldaxr(v169);
            while (__stlxr(v170 + 1, v169));
          }
          dav1d_ref_dec((uint64_t *)(a1 + 51144));
          if (v126 == 4)
            goto LABEL_304;
        }
        if (*v212)
        {
          dav1d_picture_unref_internal(a1 + 51184);
          v212[32] = 0;
        }
        dav1d_picture_ref((_QWORD *)(a1 + 51184), v148);
        v212[32] = v148[34];
        v212[31] = v148[33];
        dav1d_cdf_thread_unref((uint64_t *)(a1 + 52600));
        v171 = *(_OWORD *)v149;
        *(_QWORD *)(a1 + 52616) = *(_QWORD *)(v149 + 16);
        *(_OWORD *)(a1 + 52600) = v171;
        if (*(_QWORD *)v149)
        {
          v172 = (unsigned int *)(*(_QWORD *)v149 + 16);
          do
            v173 = __ldaxr(v172);
          while (__stlxr(v173 + 1, v172));
        }
        dav1d_ref_dec(v212 + 33);
        v212[33] = *v150;
        if (*v150)
        {
          v174 = (unsigned int *)(*v150 + 16);
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 + 1, v174));
        }
        dav1d_ref_dec((uint64_t *)(a1 + 51472));
        if (v126 != 5)
        {
LABEL_304:
          if (*v195)
          {
            dav1d_picture_unref_internal(a1 + 51512);
            v195[32] = 0;
          }
          dav1d_picture_ref((_QWORD *)(a1 + 51512), v148);
          v195[32] = v148[34];
          v195[31] = v148[33];
          dav1d_cdf_thread_unref((uint64_t *)(a1 + 52624));
          v176 = *(_OWORD *)v149;
          *(_QWORD *)(a1 + 52640) = *(_QWORD *)(v149 + 16);
          *(_OWORD *)(a1 + 52624) = v176;
          if (*(_QWORD *)v149)
          {
            v177 = (unsigned int *)(*(_QWORD *)v149 + 16);
            do
              v178 = __ldaxr(v177);
            while (__stlxr(v178 + 1, v177));
          }
          dav1d_ref_dec(v195 + 33);
          v195[33] = *v150;
          if (*v150)
          {
            v179 = (unsigned int *)(*v150 + 16);
            do
              v180 = __ldaxr(v179);
            while (__stlxr(v180 + 1, v179));
          }
          dav1d_ref_dec((uint64_t *)(a1 + 51800));
          if (v126 == 6)
            goto LABEL_303;
        }
        if (*v202)
        {
          dav1d_picture_unref_internal(a1 + 51840);
          v202[32] = 0;
        }
        dav1d_picture_ref((_QWORD *)(a1 + 51840), v148);
        v202[32] = v148[34];
        v202[31] = v148[33];
        dav1d_cdf_thread_unref((uint64_t *)(a1 + 52648));
        v181 = *(_OWORD *)v149;
        *(_QWORD *)(a1 + 52664) = *(_QWORD *)(v149 + 16);
        *(_OWORD *)(a1 + 52648) = v181;
        if (*(_QWORD *)v149)
        {
          v182 = (unsigned int *)(*(_QWORD *)v149 + 16);
          do
            v183 = __ldaxr(v182);
          while (__stlxr(v183 + 1, v182));
        }
        dav1d_ref_dec(v202 + 33);
        v202[33] = *v150;
        if (*v150)
        {
          v184 = (unsigned int *)(*v150 + 16);
          do
            v185 = __ldaxr(v184);
          while (__stlxr(v185 + 1, v184));
        }
        dav1d_ref_dec((uint64_t *)(a1 + 52128));
        if (v126 != 7)
        {
LABEL_303:
          if (*v204)
          {
            dav1d_picture_unref_internal(a1 + 52168);
            v204[32] = 0;
          }
          dav1d_picture_ref((_QWORD *)(a1 + 52168), v148);
          v204[32] = v148[34];
          v204[31] = v148[33];
          dav1d_cdf_thread_unref((uint64_t *)(a1 + 52672));
          v186 = *(_OWORD *)v149;
          *(_QWORD *)(a1 + 52688) = *(_QWORD *)(v149 + 16);
          *(_OWORD *)(a1 + 52672) = v186;
          if (*(_QWORD *)v149)
          {
            v187 = (unsigned int *)(*(_QWORD *)v149 + 16);
            do
              v188 = __ldaxr(v187);
            while (__stlxr(v188 + 1, v187));
          }
          dav1d_ref_dec(v204 + 33);
          v204[33] = *v150;
          if (*v150)
          {
            v189 = (unsigned int *)(*v150 + 16);
            do
              v190 = __ldaxr(v189);
            while (__stlxr(v190 + 1, v189));
          }
          dav1d_ref_dec((uint64_t *)(a1 + 52456));
        }
      }
      *(_QWORD *)(a1 + 96) = 0;
      return (v209 + v200);
    case 7u:
      if (a3 || *(_QWORD *)(a1 + 96))
        goto LABEL_191;
LABEL_102:
      if (!*(_QWORD *)(a1 + 72))
        goto LABEL_72;
      v66 = v28 & 0x1FFFFFFF;
      v207 = 8 * v28;
      v67 = v17;
      v68 = *(void ***)(a1 + 88);
      if (!v68)
      {
        dav1d_ref_create_using_pool(*(_QWORD *)(a1 + 80), 1680);
        *(_QWORD *)(a1 + 88) = v68;
        if (!v68)
          return 4294967284;
      }
      v69 = *v68;
      *(_QWORD *)(a1 + 96) = v69;
      bzero(v69, 0x690uLL);
      v70 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v70 + 252) = v16;
      *(_DWORD *)(v70 + 256) = v15;
      if ((parse_frame_hdr((_QWORD *)a1, (uint64_t)&v217) & 0x80000000) != 0)
        goto LABEL_118;
      if (*(int *)(a1 + 44) >= 1)
      {
        v71 = 0;
        v72 = 0;
        do
        {
          dav1d_data_unref_internal(*(_QWORD *)(a1 + 32) + v71);
          ++v72;
          v71 += 80;
        }
        while (v72 < *(int *)(a1 + 44));
      }
      *(_DWORD *)(a1 + 44) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      if (v31 != 6)
      {
        dav1d_get_bits((uint64_t)&v217, 1u);
        if ((_DWORD)v217 || 8 * ((int)v220 - (int)v221) - (int)v219 - v207 > (8 * v67))
          goto LABEL_118;
      }
      v73 = *(unsigned int *)(v12 + 12);
      if ((_DWORD)v73 && *(int *)(*(_QWORD *)(a1 + 96) + 244) * (uint64_t)*(int *)(*(_QWORD *)(a1 + 96) + 240) > v73)
      {
        *(_QWORD *)(a1 + 96) = 0;
        return 4294967262;
      }
      LODWORD(v17) = v67;
      v32 = v66;
      v34 = (_QWORD *)(a1 + 51856);
      v33 = (_QWORD *)(a1 + 52184);
      v35 = (_QWORD *)(a1 + 51528);
      v37 = (_QWORD *)(a1 + 50872);
      v38 = (_QWORD *)(a1 + 50544);
      v36 = (_QWORD *)(a1 + 51200);
      v39 = (_QWORD *)(a1 + 50216);
      v40 = (_QWORD *)(a1 + 49888);
      v41 = v207;
      if (v31 != 6)
        goto LABEL_191;
      if (*(_DWORD *)(*(_QWORD *)(a1 + 96) + 260))
      {
LABEL_118:
        *(_QWORD *)(a1 + 96) = 0;
        goto LABEL_72;
      }
      LODWORD(v219) = 0;
      v218 = 0;
LABEL_155:
      if (a3)
        goto LABEL_191;
      v208 = v32;
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_72;
      v83 = *(int *)(a1 + 44);
      v203 = v33;
      if (*(_DWORD *)(a1 + 40) > (int)v83)
        goto LABEL_161;
      if ((int)v83 > 26843544)
        goto LABEL_72;
      v199 = v17;
      v201 = v34;
      v84 = v35;
      v85 = v36;
      v86 = v37;
      v87 = v38;
      v88 = v39;
      v89 = v40;
      v90 = v41;
      v91 = (char *)malloc_type_realloc(*(void **)(a1 + 32), 80 * (v83 + 1), 0x10700408B15705AuLL);
      LODWORD(v17) = v199;
      v34 = v201;
      if (!v91)
        goto LABEL_72;
      v41 = v90;
      v40 = v89;
      v39 = v88;
      v38 = v87;
      v37 = v86;
      v36 = v85;
      v35 = v84;
      *(_QWORD *)(a1 + 32) = v91;
      v92 = &v91[80 * *(int *)(a1 + 44)];
      *((_OWORD *)v92 + 3) = 0u;
      *((_OWORD *)v92 + 4) = 0u;
      *((_OWORD *)v92 + 1) = 0u;
      *((_OWORD *)v92 + 2) = 0u;
      *(_OWORD *)v92 = 0u;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 44) + 1;
LABEL_161:
      v214 = v39;
      v194 = v35;
      v93 = v17;
      v94 = v34;
      v95 = v36;
      v96 = v37;
      v97 = v38;
      v98 = v40;
      v99 = v41;
      parse_tile_hdr(a1, (uint64_t)&v217);
      LODWORD(v219) = 0;
      v218 = 0;
      if ((_DWORD)v217)
        goto LABEL_72;
      v100 = v99;
      v101 = (_DWORD)v220 - (_DWORD)v221;
      if (8 * ((int)v220 - (int)v221) - v100 > (8 * v93))
        goto LABEL_72;
      dav1d_data_ref(*(_QWORD *)(a1 + 32) + 80 * *(int *)(a1 + 44), a2);
      v102 = *(_DWORD *)(a1 + 44);
      v103 = *(_QWORD *)(a1 + 32) + 80 * v102;
      *(_QWORD *)v103 += v101 & 0x1FFFFFFF;
      *(_QWORD *)(v103 + 8) = v208 + v93 - (v101 & 0x1FFFFFFFu);
      v105 = *(_DWORD *)(v103 + 72);
      v104 = *(_DWORD *)(v103 + 76);
      if (v105 <= v104 && v105 == *(_DWORD *)(a1 + 48))
      {
        *(_DWORD *)(a1 + 44) = v102 + 1;
        *(_DWORD *)(a1 + 48) = v104 + 1;
        LODWORD(v17) = v93;
        v32 = v208;
        v33 = v203;
        v34 = v94;
        v35 = v194;
        v36 = v95;
        v37 = v96;
        v38 = v97;
        v39 = v214;
        v40 = v98;
        goto LABEL_191;
      }
      if ((v102 & 0x80000000) == 0)
      {
        v120 = 0;
        v121 = -1;
        do
        {
          dav1d_data_unref_internal(*(_QWORD *)(a1 + 32) + v120);
          ++v121;
          v120 += 80;
        }
        while (v121 < *(int *)(a1 + 44));
      }
      *(_DWORD *)(a1 + 44) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      goto LABEL_72;
    default:
      goto LABEL_191;
  }
}

uint64_t parse_seq_hdr(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v6;
  unint64_t v7;
  int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  int v42;
  unsigned __int8 *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  int v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  unint64_t v59;
  int *v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  int v66;
  unsigned __int8 *v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  int v74;
  unsigned __int8 *v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  int v82;
  unsigned __int8 *v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  unsigned __int8 *v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  unint64_t v96;
  int v97;
  unint64_t v98;
  int v99;
  unint64_t v100;
  int v101;
  unint64_t v102;
  int v103;
  unsigned __int8 *v104;
  uint64_t v105;
  unint64_t v106;
  unsigned int v107;
  unint64_t v108;
  int v109;
  unsigned __int8 *v110;
  uint64_t v111;
  unsigned int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  unsigned __int8 *v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  unsigned __int8 *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  int v125;
  unsigned __int8 *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  int v130;
  unsigned __int8 *v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unint64_t v135;
  int v136;
  unint64_t v137;
  int v138;
  unint64_t v139;
  int v140;
  unint64_t v141;
  int v142;
  unint64_t v143;
  int v144;
  unsigned __int8 *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  int v149;
  unsigned __int8 *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  int v154;
  unsigned __int8 *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  int v159;
  unsigned __int8 *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  int v164;
  unsigned __int8 *v165;
  uint64_t v166;
  int v167;
  unint64_t v168;
  int v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  int v173;
  unsigned __int8 *v174;
  uint64_t v175;
  unint64_t v176;
  int v177;
  unsigned __int8 *v178;
  uint64_t v179;
  unint64_t v180;
  unsigned int v181;
  unint64_t v182;
  unint64_t v183;
  int v184;
  unsigned __int8 *v185;
  unsigned int v186;
  uint64_t v187;
  unsigned int v188;
  unint64_t v189;
  int v190;
  unint64_t v191;
  int v192;
  unsigned __int8 *v193;
  uint64_t v194;
  unsigned int v195;
  unint64_t v196;
  unint64_t v197;
  int v198;
  unsigned __int8 *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  int v203;
  unsigned __int8 *v204;
  uint64_t v205;
  unsigned int v206;
  unsigned int v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  int v211;
  unsigned __int8 *v212;
  uint64_t v213;
  unsigned int v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  int v218;
  unsigned __int8 *v219;
  uint64_t v220;
  unint64_t v221;
  int v222;
  unsigned __int8 *v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  int v227;
  unsigned __int8 *v228;
  uint64_t v229;
  unint64_t v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  unint64_t v234;
  int v235;
  unsigned int v236;
  unsigned __int8 *v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  int v244;
  unsigned __int8 *v245;
  unint64_t v246;
  int v247;
  unint64_t v248;
  int v249;
  unsigned __int8 *v250;
  uint64_t v251;
  unint64_t v252;
  int v253;
  unsigned __int8 *v254;
  uint64_t v255;
  unint64_t v256;
  unsigned int v257;
  unint64_t v258;
  int v259;
  unsigned __int8 *v260;
  uint64_t v261;
  unint64_t v262;
  int vlc;
  unint64_t v264;
  int v265;
  unsigned __int8 *v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  int v270;
  unsigned __int8 *v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t v274;
  unint64_t v275;
  int v276;
  unsigned __int8 *v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  unint64_t v281;
  int v282;
  unint64_t v283;
  int v284;
  unsigned __int8 *v285;
  uint64_t v286;
  unint64_t v287;
  int v288;
  unsigned __int8 *v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  unint64_t v293;
  unint64_t v294;
  int v295;
  unsigned __int8 *v296;
  uint64_t v297;
  unint64_t v298;
  int v299;
  unsigned __int8 *v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  int v305;
  unint64_t v306;
  int v307;
  unint64_t v308;
  int v309;
  unint64_t v310;
  unint64_t v311;
  int v312;
  unsigned __int8 *v313;
  uint64_t v314;
  unint64_t v315;
  int v316;
  unsigned __int8 *v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  int v321;
  unsigned __int8 *v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  int v326;
  unsigned __int8 *v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  int v331;
  unsigned __int8 *v332;
  uint64_t v333;
  unsigned int v334;
  unint64_t v335;
  unint64_t v336;
  int v337;
  unint64_t v338;
  int v339;
  unsigned __int8 *v340;
  uint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  int v345;
  unsigned __int8 *v346;
  uint64_t v347;
  unint64_t v348;
  int v349;
  unsigned __int8 *v350;
  uint64_t v351;
  unsigned int v352;
  unint64_t v353;
  _DWORD *v354;
  unint64_t v355;
  int v356;
  unsigned __int8 *v357;
  uint64_t v358;
  unsigned int v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  int v363;
  unsigned __int8 *v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  int v370;
  unsigned __int8 *v371;
  uint64_t v372;
  unsigned int v373;
  int v374;
  unint64_t v375;
  int v376;
  unint64_t v377;
  int v378;
  unsigned __int8 *v379;
  unint64_t v380;
  int v381;
  unint64_t v382;
  unint64_t v383;
  int v384;
  unsigned __int8 *v385;
  uint64_t v386;
  int bits;
  int v388;
  int v389;
  int v390;
  unint64_t v391;
  unsigned int v392;
  unint64_t v393;
  int v394;
  unsigned __int8 *v395;
  unsigned int v396;
  uint64_t v397;
  unint64_t v398;
  int v399;
  unint64_t v400;
  uint64_t v401;
  int v402;
  unint64_t v403;
  int v404;
  unsigned __int8 *v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  int v409;
  unsigned __int8 *v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  int v414;
  unsigned __int8 *v415;
  unint64_t v416;
  unint64_t v417;
  unsigned int v418;
  unint64_t v419;
  unint64_t v420;
  int v421;
  unsigned __int8 *v422;
  uint64_t v423;
  unsigned int v424;
  unint64_t v425;
  unint64_t v426;
  int v427;
  unsigned __int8 *v428;
  uint64_t v429;

  v6 = *(_DWORD *)(a2 + 16);
  if (v6 < 3)
  {
    v7 = *(_QWORD *)(a2 + 40);
    v8 = *(_DWORD *)(a2 + 4);
    v9 = *(unsigned __int8 **)(a2 + 24);
    v10 = v6 + 8;
    *(_DWORD *)(a2 + 16) = v6 + 8;
    if (v8)
    {
      v11 = 0;
      if ((unint64_t)v9 < v7)
      {
LABEL_5:
        v12 = *(_QWORD *)(a2 + 8) | (v11 << (56 - v6));
        goto LABEL_7;
      }
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v9 + 1;
      v11 = *v9;
      if ((unint64_t)(v9 + 1) < v7)
        goto LABEL_5;
    }
    *(_DWORD *)a2 = v8;
    *(_DWORD *)(a2 + 4) = 1;
    goto LABEL_5;
  }
  v12 = *(_QWORD *)(a2 + 8);
  v10 = *(_DWORD *)(a2 + 16);
LABEL_7:
  *(_DWORD *)(a2 + 16) = v10 - 3;
  v13 = 8 * v12;
  *(_QWORD *)(a2 + 8) = 8 * v12;
  v14 = v12 >> 61;
  *a3 = v14;
  if (v14 <= 2)
  {
    if (v10 != 3)
    {
      v16 = 2 * v13;
      *(_QWORD *)(a2 + 8) = 2 * v13;
      a3[235] = v13 >> 63;
      v17 = v10 - 4;
      if (v10 != 4)
        goto LABEL_23;
      v22 = *(_QWORD *)(a2 + 40);
      v23 = *(_DWORD *)(a2 + 4);
      v24 = *(unsigned __int8 **)(a2 + 24);
      *(_DWORD *)(a2 + 16) = 8;
      if (v23)
      {
        v25 = 0;
        if ((unint64_t)v24 < v22)
        {
LABEL_22:
          v16 |= v25 << 56;
          v17 = 8;
LABEL_23:
          v26 = v17 - 1;
          *(_DWORD *)(a2 + 16) = v17 - 1;
          v27 = 2 * v16;
          *(_QWORD *)(a2 + 8) = 2 * v16;
          a3[236] = v16 >> 63;
          if ((v16 & 0x8000000000000000) == 0)
          {
            if (v17 != 1)
              goto LABEL_29;
            v28 = *(_QWORD *)(a2 + 40);
            v29 = *(_DWORD *)(a2 + 4);
            v30 = *(unsigned __int8 **)(a2 + 24);
            *(_DWORD *)(a2 + 16) = 8;
            if (v29)
            {
              v31 = 0;
              if ((unint64_t)v30 < v28)
              {
LABEL_28:
                v27 |= v31 << (57 - v17);
                v26 = 8;
LABEL_29:
                v32 = v26 - 1;
                *(_DWORD *)(a2 + 16) = v26 - 1;
                v33 = 2 * v27;
                *(_QWORD *)(a2 + 8) = 2 * v27;
                a3[237] = v27 >> 63;
                if ((v27 & 0x8000000000000000) == 0)
                {
                  LODWORD(v34) = 0;
                  a3[242] = 0;
                  if (!v32)
                    goto LABEL_31;
LABEL_282:
                  v39 = 2 * v33;
                  *(_QWORD *)(a2 + 8) = 2 * v33;
                  a3[247] = v33 >> 63;
                  if (v32 > 5)
                    goto LABEL_35;
                  v197 = *(_QWORD *)(a2 + 40);
                  v198 = *(_DWORD *)(a2 + 4);
                  v199 = *(unsigned __int8 **)(a2 + 24);
                  v40 = v32 + 7;
                  *(_DWORD *)(a2 + 16) = v32 + 7;
                  if (v198)
                  {
                    v200 = 0;
                    if ((unint64_t)v199 < v197)
                    {
LABEL_286:
                      v39 |= v200 << (57 - v32);
                      goto LABEL_287;
                    }
                  }
                  else
                  {
                    *(_QWORD *)(a2 + 24) = v199 + 1;
                    v200 = *v199;
                    if ((unint64_t)(v199 + 1) < v197)
                      goto LABEL_286;
                  }
                  *(_DWORD *)a2 = v198;
                  *(_DWORD *)(a2 + 4) = 1;
                  goto LABEL_286;
                }
                if (v32 > 0x1F)
                {
LABEL_245:
                  v181 = v32 - 32;
                  v182 = v33 << 32;
                  *(_QWORD *)(a2 + 8) = v33 << 32;
                  a3[238] = HIDWORD(v33);
                  if (v32 - 32 > 0x1F)
                  {
LABEL_271:
                    v189 = v182 << 32;
                    *(_QWORD *)(a2 + 8) = v182 << 32;
                    a3[239] = HIDWORD(v182);
                    v190 = v181 - 32;
                    if (v181 == 32)
                    {
                      v191 = *(_QWORD *)(a2 + 40);
                      v192 = *(_DWORD *)(a2 + 4);
                      v193 = *(unsigned __int8 **)(a2 + 24);
                      *(_DWORD *)(a2 + 16) = 8;
                      if (v192)
                      {
                        v194 = 0;
                      }
                      else
                      {
                        *(_QWORD *)(a2 + 24) = v193 + 1;
                        v194 = *v193++;
                      }
                      if ((unint64_t)v193 >= v191)
                      {
                        *(_DWORD *)a2 = v192;
                        *(_DWORD *)(a2 + 4) = 1;
                      }
                      v189 |= v194 << 56;
                      v190 = 8;
                    }
                    v195 = v190 - 1;
                    *(_DWORD *)(a2 + 16) = v190 - 1;
                    *(_QWORD *)(a2 + 8) = 2 * v189;
                    a3[240] = v189 >> 63;
                    if ((v189 & 0x8000000000000000) == 0)
                    {
                      if (v190 != 1)
                        goto LABEL_280;
                      goto LABEL_391;
                    }
                    vlc = dav1d_get_vlc(a2);
                    if (vlc != -1)
                    {
                      a3[241] = vlc + 1;
                      v195 = *(_DWORD *)(a2 + 16);
                      if (v195)
                      {
LABEL_280:
                        v196 = *(_QWORD *)(a2 + 8);
                        v32 = v195 - 1;
                        v33 = 2 * v196;
                        *(_QWORD *)(a2 + 8) = 2 * v196;
                        v34 = v196 >> 63;
                        a3[242] = v196 >> 63;
                        if ((v196 & 0x8000000000000000) == 0)
                          goto LABEL_281;
                        goto LABEL_397;
                      }
LABEL_391:
                      v264 = *(_QWORD *)(a2 + 40);
                      v265 = *(_DWORD *)(a2 + 4);
                      v266 = *(unsigned __int8 **)(a2 + 24);
                      *(_DWORD *)(a2 + 16) = 8;
                      if (v265)
                      {
                        v267 = 0;
                      }
                      else
                      {
                        *(_QWORD *)(a2 + 24) = v266 + 1;
                        v267 = *v266++;
                      }
                      if ((unint64_t)v266 >= v264)
                      {
                        *(_DWORD *)a2 = v265;
                        *(_DWORD *)(a2 + 4) = 1;
                      }
                      v268 = *(_QWORD *)(a2 + 8) | (v267 << 56);
                      v195 = 8;
                      v32 = 7;
                      v33 = 2 * v268;
                      *(_QWORD *)(a2 + 8) = 2 * v268;
                      v34 = v268 >> 63;
                      a3[242] = v268 >> 63;
                      if ((v268 & 0x8000000000000000) == 0)
                      {
LABEL_281:
                        if (v32)
                          goto LABEL_282;
                        goto LABEL_31;
                      }
LABEL_397:
                      if (v195 <= 5)
                      {
                        v269 = *(_QWORD *)(a2 + 40);
                        v270 = *(_DWORD *)(a2 + 4);
                        v271 = *(unsigned __int8 **)(a2 + 24);
                        v32 = v195 + 7;
                        *(_DWORD *)(a2 + 16) = v195 + 7;
                        if (v270)
                        {
                          v272 = 0;
                        }
                        else
                        {
                          *(_QWORD *)(a2 + 24) = v271 + 1;
                          v272 = *v271++;
                        }
                        if ((unint64_t)v271 >= v269)
                        {
                          *(_DWORD *)a2 = v270;
                          *(_DWORD *)(a2 + 4) = 1;
                        }
                        v33 |= v272 << (57 - v195);
                      }
                      v273 = v32 - 5;
                      v274 = 32 * v33;
                      *(_QWORD *)(a2 + 8) = 32 * v33;
                      a3[243] = (v33 >> 59) + 1;
                      if (v32 - 5 > 0x1F)
                      {
LABEL_637:
                        v418 = v273 - 32;
                        v419 = v274 << 32;
                        *(_QWORD *)(a2 + 8) = v274 << 32;
                        a3[244] = HIDWORD(v274);
                        if (v273 - 32 <= 4)
                        {
                          v420 = *(_QWORD *)(a2 + 40);
                          v421 = *(_DWORD *)(a2 + 4);
                          v422 = *(unsigned __int8 **)(a2 + 24);
                          v418 = v273 - 24;
                          *(_DWORD *)(a2 + 16) = v273 - 24;
                          if (v421)
                          {
                            v423 = 0;
                          }
                          else
                          {
                            *(_QWORD *)(a2 + 24) = v422 + 1;
                            v423 = *v422++;
                          }
                          if ((unint64_t)v422 >= v420)
                          {
                            *(_DWORD *)a2 = v421;
                            *(_DWORD *)(a2 + 4) = 1;
                          }
                          v419 |= v423 << (88 - v273);
                        }
                        v424 = v418 - 5;
                        v425 = 32 * v419;
                        *(_QWORD *)(a2 + 8) = 32 * v419;
                        a3[245] = (v419 >> 59) + 1;
                        if (v418 - 5 <= 4)
                        {
                          v426 = *(_QWORD *)(a2 + 40);
                          v427 = *(_DWORD *)(a2 + 4);
                          v428 = *(unsigned __int8 **)(a2 + 24);
                          v424 = v418 + 3;
                          *(_DWORD *)(a2 + 16) = v418 + 3;
                          if (v427)
                          {
                            v429 = 0;
                          }
                          else
                          {
                            *(_QWORD *)(a2 + 24) = v428 + 1;
                            v429 = *v428++;
                          }
                          if ((unint64_t)v428 >= v426)
                          {
                            *(_DWORD *)a2 = v427;
                            *(_DWORD *)(a2 + 4) = 1;
                          }
                          v425 |= v429 << (61 - v418);
                        }
                        v32 = v424 - 5;
                        v33 = 32 * v425;
                        *(_QWORD *)(a2 + 8) = 32 * v425;
                        a3[246] = (v425 >> 59) + 1;
                        if (v424 != 5)
                          goto LABEL_282;
LABEL_31:
                        v35 = *(_QWORD *)(a2 + 40);
                        v36 = *(_DWORD *)(a2 + 4);
                        v37 = *(unsigned __int8 **)(a2 + 24);
                        *(_DWORD *)(a2 + 16) = 8;
                        if (v36)
                        {
                          v38 = 0;
                          if ((unint64_t)v37 < v35)
                          {
LABEL_34:
                            v33 |= v38 << 56;
                            v32 = 8;
                            v39 = 2 * v33;
                            *(_QWORD *)(a2 + 8) = 2 * v33;
                            a3[247] = v33 >> 63;
LABEL_35:
                            v40 = v32 - 1;
LABEL_287:
                            v201 = 0;
                            v58 = v40 - 5;
                            v57 = 32 * v39;
                            *(_QWORD *)(a2 + 8) = 32 * v39;
                            v59 = (v39 >> 59) + 1;
                            a3[10] = v59;
                            while (v58 > 0xB)
                            {
LABEL_302:
                              v207 = v58 - 12;
                              *(_DWORD *)(a2 + 16) = v58 - 12;
                              v208 = v57 << 12;
                              *(_QWORD *)(a2 + 8) = v57 << 12;
                              v209 = v57 >> 52;
                              a3[7 * v201 + 14] = v57 >> 52;
                              if (v57 >> 52)
                              {
                                result = 4294967274;
                                if (v209 < 0x100 || !(_BYTE)v209)
                                  return result;
                              }
                              if (v207 <= 2)
                              {
                                v210 = *(_QWORD *)(a2 + 40);
                                v211 = *(_DWORD *)(a2 + 4);
                                v212 = *(unsigned __int8 **)(a2 + 24);
                                v207 = v58 - 4;
                                *(_DWORD *)(a2 + 16) = v58 - 4;
                                if (v211)
                                {
                                  v213 = 0;
                                  if ((unint64_t)v212 >= v210)
                                    goto LABEL_308;
                                }
                                else
                                {
                                  *(_QWORD *)(a2 + 24) = v212 + 1;
                                  v213 = *v212;
                                  if ((unint64_t)(v212 + 1) >= v210)
                                  {
LABEL_308:
                                    *(_DWORD *)a2 = v211;
                                    *(_DWORD *)(a2 + 4) = 1;
                                  }
                                }
                                v208 |= v213 << (68 - v58);
                              }
                              v214 = v207 - 3;
                              v215 = 8 * v208;
                              *(_QWORD *)(a2 + 8) = 8 * v208;
                              v216 = v208 >> 61;
                              a3[7 * v201 + 11] = v216 + 2;
                              if (v207 - 3 > 1)
                                goto LABEL_315;
                              v217 = *(_QWORD *)(a2 + 40);
                              v218 = *(_DWORD *)(a2 + 4);
                              v219 = *(unsigned __int8 **)(a2 + 24);
                              v214 = v207 + 5;
                              *(_DWORD *)(a2 + 16) = v207 + 5;
                              if (!v218)
                              {
                                *(_QWORD *)(a2 + 24) = v219 + 1;
                                v220 = *v219;
                                if ((unint64_t)(v219 + 1) < v217)
                                  goto LABEL_314;
LABEL_313:
                                *(_DWORD *)a2 = v218;
                                *(_DWORD *)(a2 + 4) = 1;
                                goto LABEL_314;
                              }
                              v220 = 0;
                              if ((unint64_t)v219 >= v217)
                                goto LABEL_313;
LABEL_314:
                              v215 |= v220 << (59 - v207);
LABEL_315:
                              v58 = v214 - 2;
                              *(_DWORD *)(a2 + 16) = v214 - 2;
                              v57 = 4 * v215;
                              *(_QWORD *)(a2 + 8) = 4 * v215;
                              a3[7 * v201 + 12] = v215 >> 62;
                              if (v216 >= 2)
                              {
                                if (v214 == 2)
                                {
                                  v221 = *(_QWORD *)(a2 + 40);
                                  v222 = *(_DWORD *)(a2 + 4);
                                  v223 = *(unsigned __int8 **)(a2 + 24);
                                  *(_DWORD *)(a2 + 16) = 8;
                                  if (v222)
                                  {
                                    v224 = 0;
                                    if ((unint64_t)v223 >= v221)
                                      goto LABEL_319;
                                  }
                                  else
                                  {
                                    *(_QWORD *)(a2 + 24) = v223 + 1;
                                    v224 = *v223;
                                    if ((unint64_t)(v223 + 1) >= v221)
                                    {
LABEL_319:
                                      *(_DWORD *)a2 = v222;
                                      *(_DWORD *)(a2 + 4) = 1;
                                    }
                                  }
                                  v57 |= v224 << (58 - v214);
                                  v58 = 8;
                                }
                                *(_DWORD *)(a2 + 16) = --v58;
                                v225 = v57 >> 63;
                                v57 *= 2;
                                *(_QWORD *)(a2 + 8) = v57;
                                a3[7 * v201 + 15] = v225;
                                if (!(_DWORD)v34)
                                  goto LABEL_288;
                                goto LABEL_324;
                              }
                              a3[7 * v201 + 15] = 0;
                              if (!(_DWORD)v34)
                              {
LABEL_288:
                                a3[7 * v201 + 16] = 0;
                                if ((v33 & 0x8000000000000000) != 0)
                                  goto LABEL_362;
LABEL_289:
                                a3[7 * v201 + 17] = 0;
                                goto LABEL_290;
                              }
LABEL_324:
                              if (!v58)
                              {
                                v226 = *(_QWORD *)(a2 + 40);
                                v227 = *(_DWORD *)(a2 + 4);
                                v228 = *(unsigned __int8 **)(a2 + 24);
                                *(_DWORD *)(a2 + 16) = 8;
                                if (v227)
                                {
                                  v229 = 0;
                                  if ((unint64_t)v228 >= v226)
                                    goto LABEL_327;
                                }
                                else
                                {
                                  *(_QWORD *)(a2 + 24) = v228 + 1;
                                  v229 = *v228;
                                  if ((unint64_t)(v228 + 1) >= v226)
                                  {
LABEL_327:
                                    *(_DWORD *)a2 = v227;
                                    *(_DWORD *)(a2 + 4) = 1;
                                  }
                                }
                                v57 |= v229 << 56;
                                v58 = 8;
                              }
                              v230 = v57;
                              v231 = v58 - 1;
                              *(_DWORD *)(a2 + 16) = v58 - 1;
                              v57 *= 2;
                              *(_QWORD *)(a2 + 8) = v57;
                              a3[7 * v201 + 16] = v230 >> 63;
                              if ((v230 & 0x8000000000000000) == 0)
                              {
                                --v58;
                                if ((v33 & 0x8000000000000000) != 0)
                                  goto LABEL_362;
                                goto LABEL_289;
                              }
                              v232 = a3[243];
                              if (v231 >= v232)
                                goto LABEL_347;
                              v233 = 0;
                              v234 = *(_QWORD *)(a2 + 40);
                              v235 = *(_DWORD *)(a2 + 4);
                              v236 = v58 - 65;
                              v237 = *(unsigned __int8 **)(a2 + 24);
                              do
                              {
                                v233 <<= 8;
                                *(_DWORD *)(a2 + 16) = v236 + 72;
                                if (v235)
                                {
                                  if ((unint64_t)v237 < v234)
                                    goto LABEL_334;
                                }
                                else
                                {
                                  *(_QWORD *)(a2 + 24) = v237 + 1;
                                  v233 |= *v237++;
                                  if ((unint64_t)v237 < v234)
                                    goto LABEL_334;
                                }
                                *(_DWORD *)a2 = v235;
                                v235 = 1;
                                *(_DWORD *)(a2 + 4) = 1;
LABEL_334:
                                v238 = v236 + 8;
                                v239 = v236 + 72;
                                v236 += 8;
                              }
                              while (v239 < v232);
                              v57 |= v233 << -(char)v238;
                              v231 = v238 + 64;
LABEL_347:
                              v240 = v231 - v232;
                              v241 = v57 << v232;
                              *(_QWORD *)(a2 + 8) = v57 << v232;
                              a3[3 * v201 + 275] = v57 >> -(char)v232;
                              if (v240 >= v232)
                                goto LABEL_356;
                              v242 = 0;
                              v243 = *(_QWORD *)(a2 + 40);
                              v244 = *(_DWORD *)(a2 + 4);
                              v245 = *(unsigned __int8 **)(a2 + 24);
                              while (2)
                              {
                                v242 <<= 8;
                                v240 += 8;
                                *(_DWORD *)(a2 + 16) = v240;
                                if (v244)
                                {
                                  if ((unint64_t)v245 >= v243)
                                  {
LABEL_354:
                                    *(_DWORD *)a2 = v244;
                                    v244 = 1;
                                    *(_DWORD *)(a2 + 4) = 1;
                                  }
                                }
                                else
                                {
                                  *(_QWORD *)(a2 + 24) = v245 + 1;
                                  v242 |= *v245++;
                                  if ((unint64_t)v245 >= v243)
                                    goto LABEL_354;
                                }
                                if (v240 < v232)
                                  continue;
                                break;
                              }
                              v241 |= v242 << -(char)v240;
LABEL_356:
                              v246 = v241 << v232;
                              *(_QWORD *)(a2 + 8) = v241 << v232;
                              a3[3 * v201 + 276] = v241 >> (64 - v232);
                              v247 = v240 - v232;
                              if (v240 == v232)
                              {
                                v248 = *(_QWORD *)(a2 + 40);
                                v249 = *(_DWORD *)(a2 + 4);
                                v250 = *(unsigned __int8 **)(a2 + 24);
                                *(_DWORD *)(a2 + 16) = 8;
                                if (v249)
                                {
                                  v251 = 0;
                                  if ((unint64_t)v250 >= v248)
                                    goto LABEL_359;
                                }
                                else
                                {
                                  *(_QWORD *)(a2 + 24) = v250 + 1;
                                  v251 = *v250;
                                  if ((unint64_t)(v250 + 1) >= v248)
                                  {
LABEL_359:
                                    *(_DWORD *)a2 = v249;
                                    *(_DWORD *)(a2 + 4) = 1;
                                  }
                                }
                                v246 |= v251 << 56;
                                v247 = 8;
                              }
                              v58 = v247 - 1;
                              *(_DWORD *)(a2 + 16) = v247 - 1;
                              v57 = 2 * v246;
                              *(_QWORD *)(a2 + 8) = 2 * v246;
                              a3[3 * v201 + 277] = v246 >> 63;
                              if ((v33 & 0x8000000000000000) == 0)
                                goto LABEL_289;
LABEL_362:
                              if (!v58)
                              {
                                v252 = *(_QWORD *)(a2 + 40);
                                v253 = *(_DWORD *)(a2 + 4);
                                v254 = *(unsigned __int8 **)(a2 + 24);
                                *(_DWORD *)(a2 + 16) = 8;
                                if (v253)
                                {
                                  v255 = 0;
                                  if ((unint64_t)v254 >= v252)
                                    goto LABEL_365;
                                }
                                else
                                {
                                  *(_QWORD *)(a2 + 24) = v254 + 1;
                                  v255 = *v254;
                                  if ((unint64_t)(v254 + 1) >= v252)
                                  {
LABEL_365:
                                    *(_DWORD *)a2 = v253;
                                    *(_DWORD *)(a2 + 4) = 1;
                                  }
                                }
                                v57 |= v255 << 56;
                                v58 = 8;
                              }
                              v256 = v57;
                              v257 = v58 - 1;
                              *(_DWORD *)(a2 + 16) = v58 - 1;
                              v57 *= 2;
                              *(_QWORD *)(a2 + 8) = v57;
                              a3[7 * v201 + 17] = v256 >> 63;
                              if ((v256 & 0x8000000000000000) == 0)
                              {
                                --v58;
                                goto LABEL_290;
                              }
                              if (v58 <= 4)
                              {
                                v258 = *(_QWORD *)(a2 + 40);
                                v259 = *(_DWORD *)(a2 + 4);
                                v260 = *(unsigned __int8 **)(a2 + 24);
                                v257 = v58 + 7;
                                *(_DWORD *)(a2 + 16) = v58 + 7;
                                if (v259)
                                {
                                  v261 = 0;
                                  if ((unint64_t)v260 >= v258)
                                    goto LABEL_372;
                                }
                                else
                                {
                                  *(_QWORD *)(a2 + 24) = v260 + 1;
                                  v261 = *v260;
                                  if ((unint64_t)(v260 + 1) >= v258)
                                  {
LABEL_372:
                                    *(_DWORD *)a2 = v259;
                                    *(_DWORD *)(a2 + 4) = 1;
                                  }
                                }
                                v57 |= v261 << (57 - v58);
                              }
                              v58 = v257 - 4;
                              *(_DWORD *)(a2 + 16) = v257 - 4;
                              v262 = v57 >> 60;
                              v57 *= 16;
                              *(_QWORD *)(a2 + 8) = v57;
                              a3[7 * v201 + 13] = v262 + 1;
LABEL_290:
                              if (++v201 >= v59)
                                goto LABEL_79;
                            }
                            v202 = *(_QWORD *)(a2 + 40);
                            v203 = *(_DWORD *)(a2 + 4);
                            v204 = *(unsigned __int8 **)(a2 + 24);
                            *(_DWORD *)(a2 + 16) = v58 + 8;
                            if (v203)
                            {
                              v205 = 0;
                              if ((unint64_t)v204 < v202)
                                goto LABEL_295;
                            }
                            else
                            {
                              *(_QWORD *)(a2 + 24) = v204 + 1;
                              v205 = *v204++;
                              if ((unint64_t)v204 < v202)
                              {
LABEL_295:
                                if (v58 > 3)
                                {
                                  v206 = v58 + 8;
                                  goto LABEL_301;
                                }
                                v205 <<= 8;
                                v206 = v58 + 16;
                                *(_DWORD *)(a2 + 16) = v58 + 16;
                                if (v203)
                                {
                                  if ((unint64_t)v204 < v202)
                                  {
LABEL_299:
                                    LOBYTE(v58) = v58 + 8;
LABEL_301:
                                    v57 |= v205 << (56 - v58);
                                    v58 = v206;
                                    goto LABEL_302;
                                  }
                                }
                                else
                                {
                                  *(_QWORD *)(a2 + 24) = v204 + 1;
                                  v205 |= *v204;
                                  if ((unint64_t)(v204 + 1) < v202)
                                    goto LABEL_299;
                                }
                                *(_DWORD *)a2 = v203;
                                *(_DWORD *)(a2 + 4) = 1;
                                goto LABEL_299;
                              }
                            }
                            *(_DWORD *)a2 = v203;
                            v203 = 1;
                            *(_DWORD *)(a2 + 4) = 1;
                            goto LABEL_295;
                          }
                        }
                        else
                        {
                          *(_QWORD *)(a2 + 24) = v37 + 1;
                          v38 = *v37;
                          if ((unint64_t)(v37 + 1) < v35)
                            goto LABEL_34;
                        }
                        *(_DWORD *)a2 = v36;
                        *(_DWORD *)(a2 + 4) = 1;
                        goto LABEL_34;
                      }
                      v275 = *(_QWORD *)(a2 + 40);
                      v276 = *(_DWORD *)(a2 + 4);
                      v277 = *(unsigned __int8 **)(a2 + 24);
                      v278 = v32 + 3;
                      *(_DWORD *)(a2 + 16) = v32 + 3;
                      if (v276)
                      {
                        v279 = 0;
                      }
                      else
                      {
                        *(_QWORD *)(a2 + 24) = v277 + 1;
                        v279 = *v277++;
                      }
                      if ((unint64_t)v277 >= v275)
                      {
                        *(_DWORD *)a2 = v276;
                        v276 = 1;
                        *(_DWORD *)(a2 + 4) = 1;
                      }
                      if (v273 > 0x17)
                      {
LABEL_636:
                        v274 |= v279 << (56 - v273);
                        v273 = v278;
                        goto LABEL_637;
                      }
                      v279 <<= 8;
                      v280 = v32 + 11;
                      *(_DWORD *)(a2 + 16) = v32 + 11;
                      if (v276)
                      {
                        if ((unint64_t)v277 < v275)
                          goto LABEL_413;
                      }
                      else
                      {
                        *(_QWORD *)(a2 + 24) = v277 + 1;
                        v279 |= *v277++;
                        if ((unint64_t)v277 < v275)
                        {
LABEL_413:
                          if (v278 <= 0x17)
                            goto LABEL_414;
LABEL_632:
                          LOBYTE(v273) = v32 + 3;
                          v278 = v32 + 11;
                          goto LABEL_636;
                        }
                      }
                      *(_DWORD *)a2 = v276;
                      v276 = 1;
                      *(_DWORD *)(a2 + 4) = 1;
                      if (v278 <= 0x17)
                      {
LABEL_414:
                        v279 <<= 8;
                        *(_DWORD *)(a2 + 16) = v32 + 19;
                        if (v276)
                        {
                          if ((unint64_t)v277 < v275)
                            goto LABEL_416;
                        }
                        else
                        {
                          *(_QWORD *)(a2 + 24) = v277 + 1;
                          v279 |= *v277++;
                          if ((unint64_t)v277 < v275)
                          {
LABEL_416:
                            if (v280 <= 0x17)
                            {
LABEL_417:
                              v279 <<= 8;
                              v278 = v32 + 27;
                              *(_DWORD *)(a2 + 16) = v32 + 27;
                              if (!v276)
                              {
                                *(_QWORD *)(a2 + 24) = v277 + 1;
                                v279 |= *v277++;
                              }
                              if ((unint64_t)v277 >= v275)
                              {
                                *(_DWORD *)a2 = v276;
                                *(_DWORD *)(a2 + 4) = 1;
                              }
                              LOBYTE(v273) = v32 + 19;
                              goto LABEL_636;
                            }
                            goto LABEL_635;
                          }
                        }
                        *(_DWORD *)a2 = v276;
                        v276 = 1;
                        *(_DWORD *)(a2 + 4) = 1;
                        if (v280 <= 0x17)
                          goto LABEL_417;
LABEL_635:
                        LOBYTE(v273) = v32 + 11;
                        v278 = v32 + 19;
                        goto LABEL_636;
                      }
                      goto LABEL_632;
                    }
                    return 4294967274;
                  }
                  v183 = *(_QWORD *)(a2 + 40);
                  v184 = *(_DWORD *)(a2 + 4);
                  v185 = *(unsigned __int8 **)(a2 + 24);
                  v186 = v32 - 24;
                  *(_DWORD *)(a2 + 16) = v32 - 24;
                  if (v184)
                  {
                    v187 = 0;
                    if ((unint64_t)v185 < v183)
                      goto LABEL_249;
                  }
                  else
                  {
                    *(_QWORD *)(a2 + 24) = v185 + 1;
                    v187 = *v185++;
                    if ((unint64_t)v185 < v183)
                    {
LABEL_249:
                      if (v181 > 0x17)
                      {
LABEL_269:
                        v32 = v186;
                        goto LABEL_270;
                      }
                      v187 <<= 8;
                      v188 = v32 - 16;
                      *(_DWORD *)(a2 + 16) = v32 - 16;
                      if (v184)
                      {
                        if ((unint64_t)v185 < v183)
                          goto LABEL_252;
                      }
                      else
                      {
                        *(_QWORD *)(a2 + 24) = v185 + 1;
                        v187 |= *v185++;
                        if ((unint64_t)v185 < v183)
                        {
LABEL_252:
                          if (v186 <= 0x17)
                            goto LABEL_253;
                          goto LABEL_265;
                        }
                      }
                      *(_DWORD *)a2 = v184;
                      v184 = 1;
                      *(_DWORD *)(a2 + 4) = 1;
                      if (v186 <= 0x17)
                      {
LABEL_253:
                        v187 <<= 8;
                        v186 = v32 - 8;
                        *(_DWORD *)(a2 + 16) = v32 - 8;
                        if (v184)
                        {
                          if ((unint64_t)v185 < v183)
                            goto LABEL_255;
                        }
                        else
                        {
                          *(_QWORD *)(a2 + 24) = v185 + 1;
                          v187 |= *v185++;
                          if ((unint64_t)v185 < v183)
                          {
LABEL_255:
                            if (v188 <= 0x17)
                            {
LABEL_256:
                              v187 <<= 8;
                              *(_DWORD *)(a2 + 16) = v32;
                              if (!v184)
                              {
                                *(_QWORD *)(a2 + 24) = v185 + 1;
                                v187 |= *v185++;
                              }
                              if ((unint64_t)v185 >= v183)
                              {
                                *(_DWORD *)a2 = v184;
                                *(_DWORD *)(a2 + 4) = 1;
                              }
                              LOBYTE(v181) = v32 - 8;
                              goto LABEL_270;
                            }
                            goto LABEL_268;
                          }
                        }
                        *(_DWORD *)a2 = v184;
                        v184 = 1;
                        *(_DWORD *)(a2 + 4) = 1;
                        if (v188 <= 0x17)
                          goto LABEL_256;
LABEL_268:
                        LOBYTE(v181) = v32 - 16;
                        goto LABEL_269;
                      }
LABEL_265:
                      LOBYTE(v181) = v32 - 24;
                      v32 -= 16;
LABEL_270:
                      v182 |= v187 << (56 - v181);
                      v181 = v32;
                      goto LABEL_271;
                    }
                  }
                  *(_DWORD *)a2 = v184;
                  v184 = 1;
                  *(_DWORD *)(a2 + 4) = 1;
                  goto LABEL_249;
                }
                v41 = *(_QWORD *)(a2 + 40);
                v42 = *(_DWORD *)(a2 + 4);
                v43 = *(unsigned __int8 **)(a2 + 24);
                v44 = v26 + 7;
                *(_DWORD *)(a2 + 16) = v26 + 7;
                if (v42)
                {
                  v45 = 0;
                  if ((unint64_t)v43 < v41)
                    goto LABEL_42;
                }
                else
                {
                  *(_QWORD *)(a2 + 24) = v43 + 1;
                  v45 = *v43++;
                  if ((unint64_t)v43 < v41)
                  {
LABEL_42:
                    if (v32 > 0x17)
                    {
LABEL_244:
                      v33 |= v45 << (56 - v32);
                      v32 = v44;
                      goto LABEL_245;
                    }
                    v45 <<= 8;
                    v46 = v26 + 15;
                    *(_DWORD *)(a2 + 16) = v26 + 15;
                    if (v42)
                    {
                      if ((unint64_t)v43 < v41)
                        goto LABEL_45;
                    }
                    else
                    {
                      *(_QWORD *)(a2 + 24) = v43 + 1;
                      v45 |= *v43++;
                      if ((unint64_t)v43 < v41)
                      {
LABEL_45:
                        if (v44 <= 0x17)
                          goto LABEL_46;
LABEL_156:
                        LOBYTE(v32) = v26 + 7;
                        v44 = v26 + 15;
                        goto LABEL_244;
                      }
                    }
                    *(_DWORD *)a2 = v42;
                    v42 = 1;
                    *(_DWORD *)(a2 + 4) = 1;
                    if (v44 <= 0x17)
                    {
LABEL_46:
                      v45 <<= 8;
                      *(_DWORD *)(a2 + 16) = v26 + 23;
                      if (v42)
                      {
                        if ((unint64_t)v43 < v41)
                          goto LABEL_48;
                      }
                      else
                      {
                        *(_QWORD *)(a2 + 24) = v43 + 1;
                        v45 |= *v43++;
                        if ((unint64_t)v43 < v41)
                        {
LABEL_48:
                          if (v46 <= 0x17)
                          {
LABEL_49:
                            v45 <<= 8;
                            v44 = v26 + 31;
                            *(_DWORD *)(a2 + 16) = v26 + 31;
                            if (!v42)
                            {
                              *(_QWORD *)(a2 + 24) = v43 + 1;
                              v45 |= *v43++;
                            }
                            if ((unint64_t)v43 >= v41)
                            {
                              *(_DWORD *)a2 = v42;
                              *(_DWORD *)(a2 + 4) = 1;
                            }
                            LOBYTE(v32) = v26 + 23;
                            goto LABEL_244;
                          }
                          goto LABEL_243;
                        }
                      }
                      *(_DWORD *)a2 = v42;
                      v42 = 1;
                      *(_DWORD *)(a2 + 4) = 1;
                      if (v46 <= 0x17)
                        goto LABEL_49;
LABEL_243:
                      LOBYTE(v32) = v26 + 15;
                      v44 = v26 + 23;
                      goto LABEL_244;
                    }
                    goto LABEL_156;
                  }
                }
                *(_DWORD *)a2 = v42;
                v42 = 1;
                *(_DWORD *)(a2 + 4) = 1;
                goto LABEL_42;
              }
            }
            else
            {
              *(_QWORD *)(a2 + 24) = v30 + 1;
              v31 = *v30;
              if ((unint64_t)(v30 + 1) < v28)
                goto LABEL_28;
            }
            *(_DWORD *)a2 = v29;
            *(_DWORD *)(a2 + 4) = 1;
            goto LABEL_28;
          }
          if ((v13 & 0x8000000000000000) == 0)
            return 4294967274;
          a3[237] = 0;
          a3[242] = 0;
          a3[247] = 0;
          a3[10] = 1;
          a3[14] = 0;
          if (v26 <= 2)
          {
            v47 = *(_QWORD *)(a2 + 40);
            v48 = *(_DWORD *)(a2 + 4);
            v49 = *(unsigned __int8 **)(a2 + 24);
            v26 = v17 + 7;
            *(_DWORD *)(a2 + 16) = v17 + 7;
            if (v48)
            {
              v50 = 0;
            }
            else
            {
              *(_QWORD *)(a2 + 24) = v49 + 1;
              v50 = *v49++;
            }
            if ((unint64_t)v49 >= v47)
            {
              *(_DWORD *)a2 = v48;
              *(_DWORD *)(a2 + 4) = 1;
            }
            v27 |= v50 << (57 - v17);
          }
          v51 = v26 - 3;
          v52 = 8 * v27;
          *(_QWORD *)(a2 + 8) = 8 * v27;
          a3[11] = v27 >> 61;
          if (v26 - 3 <= 1)
          {
            v53 = *(_QWORD *)(a2 + 40);
            v54 = *(_DWORD *)(a2 + 4);
            v55 = *(unsigned __int8 **)(a2 + 24);
            v51 = v26 + 5;
            *(_DWORD *)(a2 + 16) = v26 + 5;
            if (v54)
            {
              v56 = 0;
            }
            else
            {
              *(_QWORD *)(a2 + 24) = v55 + 1;
              v56 = *v55++;
            }
            if ((unint64_t)v55 >= v53)
            {
              *(_DWORD *)a2 = v54;
              *(_DWORD *)(a2 + 4) = 1;
            }
            v52 |= v56 << (59 - v26);
          }
          v57 = 4 * v52;
          *(_QWORD *)(a2 + 8) = 4 * v52;
          a3[12] = v52 >> 62;
          v58 = v51 - 2;
          *((_QWORD *)a3 + 8) = 0;
          a3[15] = 0;
          LODWORD(v59) = 1;
LABEL_79:
          v60 = (int *)(a1 + 88788);
          v61 = *v60;
          if (*v60 >= (int)v59)
            v61 = 0;
          v62 = a3[7 * v61 + 14];
          v60[1] = v62;
          v63 = __clz(v62 >> 8) ^ 0x1F;
          if (v62 >= 0x100)
            v64 = v63;
          else
            v64 = 0;
          v60[3] = v64;
          if (v58 > 3)
          {
LABEL_89:
            v69 = v58 - 4;
            v70 = 16 * v57;
            *(_QWORD *)(a2 + 8) = 16 * v57;
            v71 = v57 >> 60;
            v72 = (v57 >> 60) + 1;
            a3[248] = v72;
            if (v58 - 4 > 3)
              goto LABEL_94;
            v73 = *(_QWORD *)(a2 + 40);
            v74 = *(_DWORD *)(a2 + 4);
            v75 = *(unsigned __int8 **)(a2 + 24);
            v69 = v58 + 4;
            *(_DWORD *)(a2 + 16) = v58 + 4;
            if (v74)
            {
              v76 = 0;
              if ((unint64_t)v75 < v73)
              {
LABEL_93:
                v70 |= v76 << (60 - v58);
LABEL_94:
                v77 = v69 - 4;
                v78 = 16 * v70;
                *(_QWORD *)(a2 + 8) = 16 * v70;
                v79 = v70 >> 60;
                v80 = v79 + 1;
                a3[249] = v79 + 1;
                if (v69 - 4 > v71)
                  goto LABEL_117;
                v81 = *(_QWORD *)(a2 + 40);
                v82 = *(_DWORD *)(a2 + 4);
                v83 = *(unsigned __int8 **)(a2 + 24);
                v84 = v69 + 4;
                *(_DWORD *)(a2 + 16) = v69 + 4;
                if (v82)
                {
                  v85 = 0;
                  if ((unint64_t)v83 < v81)
                    goto LABEL_98;
                }
                else
                {
                  *(_QWORD *)(a2 + 24) = v83 + 1;
                  v85 = *v83++;
                  if ((unint64_t)v83 < v81)
                  {
LABEL_98:
                    if (v84 > v71)
                    {
LABEL_116:
                      v78 |= v85 << (56 - v77);
                      v77 = v84;
LABEL_117:
                      v87 = v77 - v72;
                      v88 = v78 << v72;
                      *(_QWORD *)(a2 + 8) = v88;
                      a3[1] = (v78 >> (v71 ^ 0x3Fu)) + 1;
                      if (v87 > v79)
                        goto LABEL_136;
                      v89 = *(_QWORD *)(a2 + 40);
                      v90 = *(_DWORD *)(a2 + 4);
                      v91 = *(unsigned __int8 **)(a2 + 24);
                      v92 = v87 + 8;
                      *(_DWORD *)(a2 + 16) = v87 + 8;
                      if (v90)
                      {
                        v93 = 0;
                        if ((unint64_t)v91 < v89)
                          goto LABEL_121;
                      }
                      else
                      {
                        *(_QWORD *)(a2 + 24) = v91 + 1;
                        v93 = *v91++;
                        if ((unint64_t)v91 < v89)
                        {
LABEL_121:
                          if (v92 > v79)
                          {
LABEL_135:
                            v88 |= v93 << (56 - v87);
                            v87 = v92;
LABEL_136:
                            v95 = v87 - v80;
                            v96 = v88 << v80;
                            *(_QWORD *)(a2 + 8) = v96;
                            a3[2] = (v88 >> (v79 ^ 0x3Fu)) + 1;
                            v97 = a3[236];
                            if (v97)
                            {
                              a3[250] = 0;
                              if (v95)
                                goto LABEL_138;
LABEL_169:
                              v119 = *(_QWORD *)(a2 + 40);
                              v120 = *(_DWORD *)(a2 + 4);
                              v121 = *(unsigned __int8 **)(a2 + 24);
                              *(_DWORD *)(a2 + 16) = 8;
                              if (v120)
                              {
                                v122 = 0;
                                if ((unint64_t)v121 < v119)
                                {
LABEL_172:
                                  v123 = v96 | (v122 << 56);
                                  v98 = 2 * v123;
                                  *(_QWORD *)(a2 + 8) = 2 * v123;
                                  a3[253] = v123 >> 63;
                                  v99 = 7;
LABEL_139:
                                  v100 = 2 * v98;
                                  *(_QWORD *)(a2 + 8) = 2 * v98;
                                  a3[254] = v98 >> 63;
                                  v101 = v99 - 1;
                                  if (v99 != 1)
                                    goto LABEL_181;
                                  v129 = *(_QWORD *)(a2 + 40);
                                  v130 = *(_DWORD *)(a2 + 4);
                                  v131 = *(unsigned __int8 **)(a2 + 24);
                                  *(_DWORD *)(a2 + 16) = 8;
                                  if (v130)
                                  {
                                    v132 = 0;
                                    if ((unint64_t)v131 < v129)
                                    {
LABEL_180:
                                      v100 |= v132 << 56;
                                      v101 = 8;
LABEL_181:
                                      *(_DWORD *)(a2 + 16) = v101 - 1;
                                      v133 = 2 * v100;
                                      *(_QWORD *)(a2 + 8) = 2 * v100;
                                      a3[255] = v100 >> 63;
                                      if (v97)
                                      {
                                        *((_QWORD *)a3 + 131) = 0x200000000;
                                        *((_QWORD *)a3 + 130) = 0;
                                        *((_OWORD *)a3 + 64) = 0u;
                                        *((_QWORD *)a3 + 132) = 2;
                                        v134 = *(_DWORD *)(a2 + 16);
                                        if (!v134)
                                          goto LABEL_471;
                                        goto LABEL_454;
                                      }
                                      if (v101 == 1)
                                      {
                                        v143 = *(_QWORD *)(a2 + 40);
                                        v144 = *(_DWORD *)(a2 + 4);
                                        v145 = *(unsigned __int8 **)(a2 + 24);
                                        *(_DWORD *)(a2 + 16) = 8;
                                        if (v144)
                                        {
                                          v146 = 0;
                                        }
                                        else
                                        {
                                          *(_QWORD *)(a2 + 24) = v145 + 1;
                                          v146 = *v145++;
                                        }
                                        if ((unint64_t)v145 >= v143)
                                        {
                                          *(_DWORD *)a2 = v144;
                                          *(_DWORD *)(a2 + 4) = 1;
                                        }
                                        v147 = (v146 << (57 - v101)) | v133;
                                        v135 = 2 * v147;
                                        *(_QWORD *)(a2 + 8) = 2 * v147;
                                        a3[256] = v147 >> 63;
                                        v136 = 7;
                                      }
                                      else
                                      {
                                        v135 = 4 * v100;
                                        *(_QWORD *)(a2 + 8) = 4 * v100;
                                        a3[256] = (v100 >> 31) >> 31;
                                        v136 = v101 - 2;
                                        if (v101 == 2)
                                        {
                                          v148 = *(_QWORD *)(a2 + 40);
                                          v149 = *(_DWORD *)(a2 + 4);
                                          v150 = *(unsigned __int8 **)(a2 + 24);
                                          *(_DWORD *)(a2 + 16) = 8;
                                          if (v149)
                                          {
                                            v151 = 0;
                                          }
                                          else
                                          {
                                            *(_QWORD *)(a2 + 24) = v150 + 1;
                                            v151 = *v150++;
                                          }
                                          if ((unint64_t)v150 >= v148)
                                          {
                                            *(_DWORD *)a2 = v149;
                                            *(_DWORD *)(a2 + 4) = 1;
                                          }
                                          v152 = (v151 << 56) | v135;
                                          v137 = 2 * v152;
                                          *(_QWORD *)(a2 + 8) = 2 * v152;
                                          a3[257] = v152 >> 63;
                                          v138 = 7;
                                          goto LABEL_187;
                                        }
                                      }
                                      v137 = 2 * v135;
                                      *(_QWORD *)(a2 + 8) = 2 * v135;
                                      a3[257] = v135 >> 63;
                                      v138 = v136 - 1;
                                      if (v136 == 1)
                                      {
                                        v153 = *(_QWORD *)(a2 + 40);
                                        v154 = *(_DWORD *)(a2 + 4);
                                        v155 = *(unsigned __int8 **)(a2 + 24);
                                        *(_DWORD *)(a2 + 16) = 8;
                                        if (v154)
                                        {
                                          v156 = 0;
                                        }
                                        else
                                        {
                                          *(_QWORD *)(a2 + 24) = v155 + 1;
                                          v156 = *v155++;
                                        }
                                        if ((unint64_t)v155 >= v153)
                                        {
                                          *(_DWORD *)a2 = v154;
                                          *(_DWORD *)(a2 + 4) = 1;
                                        }
                                        v157 = (v156 << 56) | v137;
                                        v139 = 2 * v157;
                                        *(_QWORD *)(a2 + 8) = 2 * v157;
                                        a3[258] = v157 >> 63;
                                        v140 = 7;
                                        goto LABEL_188;
                                      }
LABEL_187:
                                      v139 = 2 * v137;
                                      *(_QWORD *)(a2 + 8) = 2 * v137;
                                      a3[258] = v137 >> 63;
                                      v140 = v138 - 1;
                                      if (v138 == 1)
                                      {
                                        v158 = *(_QWORD *)(a2 + 40);
                                        v159 = *(_DWORD *)(a2 + 4);
                                        v160 = *(unsigned __int8 **)(a2 + 24);
                                        *(_DWORD *)(a2 + 16) = 8;
                                        if (v159)
                                        {
                                          v161 = 0;
                                        }
                                        else
                                        {
                                          *(_QWORD *)(a2 + 24) = v160 + 1;
                                          v161 = *v160++;
                                        }
                                        if ((unint64_t)v160 >= v158)
                                        {
                                          *(_DWORD *)a2 = v159;
                                          *(_DWORD *)(a2 + 4) = 1;
                                        }
                                        v162 = (v161 << 56) | v139;
                                        v141 = 2 * v162;
                                        *(_QWORD *)(a2 + 8) = 2 * v162;
                                        a3[259] = v162 >> 63;
                                        v142 = 7;
LABEL_226:
                                        v167 = v142 - 1;
                                        *(_DWORD *)(a2 + 16) = v142 - 1;
                                        v168 = 2 * v141;
                                        *(_QWORD *)(a2 + 8) = 2 * v141;
                                        a3[260] = v141 >> 63;
                                        if ((v141 & 0x8000000000000000) != 0)
                                        {
                                          if (v142 == 1)
                                          {
                                            v176 = *(_QWORD *)(a2 + 40);
                                            v177 = *(_DWORD *)(a2 + 4);
                                            v178 = *(unsigned __int8 **)(a2 + 24);
                                            *(_DWORD *)(a2 + 16) = 8;
                                            if (v177)
                                            {
                                              v179 = 0;
                                            }
                                            else
                                            {
                                              *(_QWORD *)(a2 + 24) = v178 + 1;
                                              v179 = *v178++;
                                            }
                                            if ((unint64_t)v178 >= v176)
                                            {
                                              *(_DWORD *)a2 = v177;
                                              *(_DWORD *)(a2 + 4) = 1;
                                            }
                                            v168 |= v179 << (57 - v142);
                                            v167 = 8;
                                          }
                                          v281 = 2 * v168;
                                          *(_QWORD *)(a2 + 8) = 2 * v168;
                                          a3[261] = v168 >> 63;
                                          v282 = v167 - 1;
                                          if (v167 == 1)
                                          {
                                            v283 = *(_QWORD *)(a2 + 40);
                                            v284 = *(_DWORD *)(a2 + 4);
                                            v285 = *(unsigned __int8 **)(a2 + 24);
                                            *(_DWORD *)(a2 + 16) = 8;
                                            if (v284)
                                            {
                                              v286 = 0;
                                            }
                                            else
                                            {
                                              *(_QWORD *)(a2 + 24) = v285 + 1;
                                              v286 = *v285++;
                                            }
                                            if ((unint64_t)v285 >= v283)
                                            {
                                              *(_DWORD *)a2 = v284;
                                              *(_DWORD *)(a2 + 4) = 1;
                                            }
                                            v281 |= v286 << 56;
                                            v282 = 8;
                                          }
                                          *(_DWORD *)(a2 + 16) = v282 - 1;
                                          *(_QWORD *)(a2 + 8) = 2 * v281;
                                          a3[262] = v281 >> 63;
                                          v169 = *(_DWORD *)(a2 + 16);
                                          if (v169)
                                          {
LABEL_228:
                                            v170 = *(_QWORD *)(a2 + 8);
                                            v134 = v169 - 1;
                                            v171 = 2 * v170;
                                            *(_QWORD *)(a2 + 8) = 2 * v170;
                                            if ((v170 & 0x8000000000000000) == 0)
                                              goto LABEL_229;
                                            goto LABEL_440;
                                          }
                                        }
                                        else
                                        {
                                          a3[261] = 0;
                                          a3[265] = 0;
                                          a3[262] = 0;
                                          v169 = *(_DWORD *)(a2 + 16);
                                          if (v169)
                                            goto LABEL_228;
                                        }
                                        v287 = *(_QWORD *)(a2 + 40);
                                        v288 = *(_DWORD *)(a2 + 4);
                                        v289 = *(unsigned __int8 **)(a2 + 24);
                                        *(_DWORD *)(a2 + 16) = 8;
                                        if (v288)
                                        {
                                          v290 = 0;
                                        }
                                        else
                                        {
                                          *(_QWORD *)(a2 + 24) = v289 + 1;
                                          v290 = *v289++;
                                        }
                                        if ((unint64_t)v289 >= v287)
                                        {
                                          *(_DWORD *)a2 = v288;
                                          *(_DWORD *)(a2 + 4) = 1;
                                        }
                                        v291 = *(_QWORD *)(a2 + 8) | (v290 << 56);
                                        v169 = 8;
                                        v134 = 7;
                                        v171 = 2 * v291;
                                        *(_QWORD *)(a2 + 8) = 2 * v291;
                                        if ((v291 & 0x8000000000000000) == 0)
                                        {
LABEL_229:
                                          if (!v134)
                                          {
                                            v172 = *(_QWORD *)(a2 + 40);
                                            v173 = *(_DWORD *)(a2 + 4);
                                            v174 = *(unsigned __int8 **)(a2 + 24);
                                            *(_DWORD *)(a2 + 16) = v169 + 7;
                                            if (v173)
                                            {
                                              v175 = 0;
                                            }
                                            else
                                            {
                                              *(_QWORD *)(a2 + 24) = v174 + 1;
                                              v175 = *v174++;
                                            }
                                            if ((unint64_t)v174 >= v172)
                                            {
                                              *(_DWORD *)a2 = v173;
                                              *(_DWORD *)(a2 + 4) = 1;
                                            }
                                            v171 |= v175 << (57 - v169);
                                            v134 = 8;
                                          }
                                          v180 = v171;
                                          --v134;
                                          v171 *= 2;
                                          *(_QWORD *)(a2 + 8) = v171;
                                          a3[263] = v180 >> 63;
                                          if ((v180 & 0x8000000000000000) == 0)
                                            goto LABEL_452;
                                          goto LABEL_441;
                                        }
LABEL_440:
                                        a3[263] = 2;
LABEL_441:
                                        if (v134)
                                        {
                                          v292 = v134;
                                          v293 = v171;
                                          --v134;
                                          v171 *= 2;
                                          *(_QWORD *)(a2 + 8) = v171;
                                          if ((v293 & 0x8000000000000000) == 0)
                                            goto LABEL_443;
                                        }
                                        else
                                        {
                                          v298 = *(_QWORD *)(a2 + 40);
                                          v299 = *(_DWORD *)(a2 + 4);
                                          v300 = *(unsigned __int8 **)(a2 + 24);
                                          *(_DWORD *)(a2 + 16) = 8;
                                          if (v299)
                                          {
                                            v301 = 0;
                                          }
                                          else
                                          {
                                            *(_QWORD *)(a2 + 24) = v300 + 1;
                                            v301 = *v300++;
                                          }
                                          if ((unint64_t)v300 >= v298)
                                          {
                                            *(_DWORD *)a2 = v299;
                                            *(_DWORD *)(a2 + 4) = 1;
                                          }
                                          v292 = 8;
                                          v302 = v171 | (v301 << 56);
                                          v134 = 7;
                                          v171 = 2 * v302;
                                          *(_QWORD *)(a2 + 8) = 2 * v302;
                                          if ((v302 & 0x8000000000000000) == 0)
                                          {
LABEL_443:
                                            if (!v134)
                                            {
                                              v294 = *(_QWORD *)(a2 + 40);
                                              v295 = *(_DWORD *)(a2 + 4);
                                              v296 = *(unsigned __int8 **)(a2 + 24);
                                              *(_DWORD *)(a2 + 16) = v292 + 7;
                                              if (v295)
                                              {
                                                v297 = 0;
                                              }
                                              else
                                              {
                                                *(_QWORD *)(a2 + 24) = v296 + 1;
                                                v297 = *v296++;
                                              }
                                              if ((unint64_t)v296 >= v294)
                                              {
                                                *(_DWORD *)a2 = v295;
                                                *(_DWORD *)(a2 + 4) = 1;
                                              }
                                              v171 |= v297 << (57 - v292);
                                              v134 = 8;
                                            }
                                            --v134;
                                            v310 = v171 >> 63;
                                            v171 *= 2;
                                            *(_QWORD *)(a2 + 8) = v171;
                                            a3[264] = v310;
                                            if ((v141 & 0x8000000000000000) != 0)
                                            {
LABEL_463:
                                              if (v134 <= 2)
                                              {
                                                v311 = *(_QWORD *)(a2 + 40);
                                                v312 = *(_DWORD *)(a2 + 4);
                                                v313 = *(unsigned __int8 **)(a2 + 24);
                                                *(_DWORD *)(a2 + 16) = v134 + 8;
                                                if (v312)
                                                {
                                                  v314 = 0;
                                                }
                                                else
                                                {
                                                  *(_QWORD *)(a2 + 24) = v313 + 1;
                                                  v314 = *v313++;
                                                }
                                                if ((unint64_t)v313 >= v311)
                                                {
                                                  *(_DWORD *)a2 = v312;
                                                  *(_DWORD *)(a2 + 4) = 1;
                                                }
                                                v171 |= v314 << (56 - v134);
                                                v134 += 8;
                                              }
                                              v134 -= 3;
                                              *(_QWORD *)(a2 + 8) = 8 * v171;
                                              a3[265] = (v171 >> 61) + 1;
                                              if (!v134)
                                              {
LABEL_471:
                                                v315 = *(_QWORD *)(a2 + 40);
                                                v316 = *(_DWORD *)(a2 + 4);
                                                v317 = *(unsigned __int8 **)(a2 + 24);
                                                *(_DWORD *)(a2 + 16) = 8;
                                                if (v316)
                                                {
                                                  v318 = 0;
                                                  if ((unint64_t)v317 < v315)
                                                  {
LABEL_474:
                                                    v319 = *(_QWORD *)(a2 + 8) | (v318 << 56);
                                                    v304 = 2 * v319;
                                                    *(_QWORD *)(a2 + 8) = 2 * v319;
                                                    a3[266] = v319 >> 63;
                                                    v305 = 7;
LABEL_455:
                                                    v306 = 2 * v304;
                                                    *(_QWORD *)(a2 + 8) = 2 * v304;
                                                    a3[267] = v304 >> 63;
                                                    v307 = v305 - 1;
                                                    if (v305 != 1)
                                                      goto LABEL_456;
                                                    v325 = *(_QWORD *)(a2 + 40);
                                                    v326 = *(_DWORD *)(a2 + 4);
                                                    v327 = *(unsigned __int8 **)(a2 + 24);
                                                    *(_DWORD *)(a2 + 16) = 8;
                                                    if (v326)
                                                    {
                                                      v328 = 0;
                                                      if ((unint64_t)v327 < v325)
                                                      {
LABEL_482:
                                                        v329 = (v328 << 56) | v306;
                                                        v308 = 2 * v329;
                                                        *(_QWORD *)(a2 + 8) = 2 * v329;
                                                        a3[268] = v329 >> 63;
                                                        v309 = 7;
                                                        goto LABEL_487;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      *(_QWORD *)(a2 + 24) = v327 + 1;
                                                      v328 = *v327;
                                                      if ((unint64_t)(v327 + 1) < v325)
                                                        goto LABEL_482;
                                                    }
                                                    *(_DWORD *)a2 = v326;
                                                    *(_DWORD *)(a2 + 4) = 1;
                                                    goto LABEL_482;
                                                  }
                                                }
                                                else
                                                {
                                                  *(_QWORD *)(a2 + 24) = v317 + 1;
                                                  v318 = *v317;
                                                  if ((unint64_t)(v317 + 1) < v315)
                                                    goto LABEL_474;
                                                }
                                                *(_DWORD *)a2 = v316;
                                                *(_DWORD *)(a2 + 4) = 1;
                                                goto LABEL_474;
                                              }
LABEL_454:
                                              v303 = *(_QWORD *)(a2 + 8);
                                              v304 = 2 * v303;
                                              *(_QWORD *)(a2 + 8) = 2 * v303;
                                              a3[266] = v303 >> 63;
                                              v305 = v134 - 1;
                                              if (v134 != 1)
                                                goto LABEL_455;
                                              v320 = *(_QWORD *)(a2 + 40);
                                              v321 = *(_DWORD *)(a2 + 4);
                                              v322 = *(unsigned __int8 **)(a2 + 24);
                                              *(_DWORD *)(a2 + 16) = 8;
                                              if (v321)
                                              {
                                                v323 = 0;
                                                if ((unint64_t)v322 < v320)
                                                {
LABEL_478:
                                                  v324 = (v323 << 56) | v304;
                                                  v306 = 2 * v324;
                                                  *(_QWORD *)(a2 + 8) = 2 * v324;
                                                  a3[267] = v324 >> 63;
                                                  v307 = 7;
LABEL_456:
                                                  v308 = 2 * v306;
                                                  *(_QWORD *)(a2 + 8) = 2 * v306;
                                                  a3[268] = v306 >> 63;
                                                  v309 = v307 - 1;
                                                  if (v307 == 1)
                                                  {
                                                    v330 = *(_QWORD *)(a2 + 40);
                                                    v331 = *(_DWORD *)(a2 + 4);
                                                    v332 = *(unsigned __int8 **)(a2 + 24);
                                                    *(_DWORD *)(a2 + 16) = 8;
                                                    if (v331)
                                                    {
                                                      v333 = 0;
                                                      if ((unint64_t)v332 < v330)
                                                      {
LABEL_486:
                                                        v308 |= v333 << 56;
                                                        v309 = 8;
                                                        goto LABEL_487;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      *(_QWORD *)(a2 + 24) = v332 + 1;
                                                      v333 = *v332;
                                                      if ((unint64_t)(v332 + 1) < v330)
                                                        goto LABEL_486;
                                                    }
                                                    *(_DWORD *)a2 = v331;
                                                    *(_DWORD *)(a2 + 4) = 1;
                                                    goto LABEL_486;
                                                  }
LABEL_487:
                                                  v334 = v309 - 1;
                                                  v335 = 2 * v308;
                                                  *(_QWORD *)(a2 + 8) = 2 * v308;
                                                  v336 = v308 >> 63;
                                                  a3[8] = v308 >> 63;
                                                  v337 = *a3;
                                                  if (*a3 != 2 || (v308 & 0x8000000000000000) == 0)
                                                  {
                                                    if (v337 == 1)
                                                    {
                                                      LODWORD(v343) = 0;
                                                      a3[271] = 0;
                                                      if (v309 != 1)
                                                        goto LABEL_508;
                                                      goto LABEL_504;
                                                    }
LABEL_498:
                                                    if (v334)
                                                      goto LABEL_503;
                                                    v344 = *(_QWORD *)(a2 + 40);
                                                    v345 = *(_DWORD *)(a2 + 4);
                                                    v346 = *(unsigned __int8 **)(a2 + 24);
                                                    *(_DWORD *)(a2 + 16) = 8;
                                                    if (v345)
                                                    {
                                                      v347 = 0;
                                                      if ((unint64_t)v346 < v344)
                                                      {
LABEL_502:
                                                        v335 |= v347 << 56;
                                                        v334 = 8;
LABEL_503:
                                                        --v334;
                                                        v343 = v335 >> 63;
                                                        v335 *= 2;
                                                        *(_QWORD *)(a2 + 8) = v335;
                                                        a3[271] = v343;
                                                        if (v334)
                                                          goto LABEL_508;
LABEL_504:
                                                        v348 = *(_QWORD *)(a2 + 40);
                                                        v349 = *(_DWORD *)(a2 + 4);
                                                        v350 = *(unsigned __int8 **)(a2 + 24);
                                                        *(_DWORD *)(a2 + 16) = 8;
                                                        if (v349)
                                                        {
                                                          v351 = 0;
                                                          if ((unint64_t)v350 < v348)
                                                          {
LABEL_507:
                                                            v335 |= v351 << 56;
                                                            v334 = 8;
LABEL_508:
                                                            v352 = v334 - 1;
                                                            *(_DWORD *)(a2 + 16) = v334 - 1;
                                                            v353 = 2 * v335;
                                                            *(_QWORD *)(a2 + 8) = 2 * v335;
                                                            a3[272] = v335 >> 63;
                                                            if ((v335 & 0x8000000000000000) == 0)
                                                            {
                                                              a3[6] = 2;
                                                              v354 = a3 + 6;
                                                              *((_QWORD *)a3 + 2) = 0x200000002;
                                                              if (!(_DWORD)v343)
                                                                goto LABEL_556;
                                                              goto LABEL_542;
                                                            }
                                                            if (v334 > 8)
                                                            {
LABEL_516:
                                                              v359 = v352 - 8;
                                                              v360 = v353 << 8;
                                                              *(_QWORD *)(a2 + 8) = v353 << 8;
                                                              v361 = HIBYTE(v353);
                                                              a3[4] = HIBYTE(v353);
                                                              if (v352 - 8 > 7)
                                                              {
                                                                v373 = v352 - 16;
                                                                v367 = v353 << 16;
                                                                *(_QWORD *)(a2 + 8) = v353 << 16;
                                                                v368 = HIBYTE(v360);
                                                                a3[5] = HIBYTE(v360);
                                                                if (v352 - 16 >= 8)
                                                                {
                                                                  v359 = v352 - 24;
LABEL_541:
                                                                  *(_DWORD *)(a2 + 16) = v359;
                                                                  *(_QWORD *)(a2 + 8) = v367 << 8;
                                                                  a3[6] = HIBYTE(v367);
                                                                  v354 = a3 + 6;
                                                                  if (!(_DWORD)v343)
                                                                  {
                                                                    if ((_DWORD)v361 != 1
                                                                      || (_DWORD)v368 != 13
                                                                      || HIBYTE(v367))
                                                                    {
LABEL_556:
                                                                      v381 = *(_DWORD *)(a2 + 16);
                                                                      if (v381)
                                                                      {
                                                                        v382 = *(_QWORD *)(a2 + 8);
                                                                      }
                                                                      else
                                                                      {
                                                                        v383 = *(_QWORD *)(a2 + 40);
                                                                        v384 = *(_DWORD *)(a2 + 4);
                                                                        v385 = *(unsigned __int8 **)(a2 + 24);
                                                                        *(_DWORD *)(a2 + 16) = 8;
                                                                        if (v384)
                                                                        {
                                                                          v386 = 0;
                                                                        }
                                                                        else
                                                                        {
                                                                          *(_QWORD *)(a2 + 24) = v385 + 1;
                                                                          v386 = *v385++;
                                                                        }
                                                                        if ((unint64_t)v385 >= v383)
                                                                        {
                                                                          *(_DWORD *)a2 = v384;
                                                                          *(_DWORD *)(a2 + 4) = 1;
                                                                        }
                                                                        v382 = *(_QWORD *)(a2 + 8) | (v386 << 56);
                                                                        v381 = 8;
                                                                      }
                                                                      *(_DWORD *)(a2 + 16) = v381 - 1;
                                                                      *(_QWORD *)(a2 + 8) = 2 * v382;
                                                                      a3[9] = v382 >> 63;
                                                                      if (!v337)
                                                                      {
                                                                        a3[3] = 1;
                                                                        *(_QWORD *)(a3 + 269) = 0x100000001;
LABEL_592:
                                                                        v392 = *(_DWORD *)(a2 + 16);
                                                                        if (v392 >= 2)
                                                                        {
                                                                          v398 = *(_QWORD *)(a2 + 8);
                                                                          v396 = *(_DWORD *)(a2 + 16);
                                                                        }
                                                                        else
                                                                        {
                                                                          v393 = *(_QWORD *)(a2 + 40);
                                                                          v394 = *(_DWORD *)(a2 + 4);
                                                                          v395 = *(unsigned __int8 **)(a2 + 24);
                                                                          v396 = v392 + 8;
                                                                          *(_DWORD *)(a2 + 16) = v392 + 8;
                                                                          if (v394)
                                                                          {
                                                                            v397 = 0;
                                                                          }
                                                                          else
                                                                          {
                                                                            *(_QWORD *)(a2 + 24) = v395 + 1;
                                                                            v397 = *v395++;
                                                                          }
                                                                          if ((unint64_t)v395 >= v393)
                                                                          {
                                                                            *(_DWORD *)a2 = v394;
                                                                            *(_DWORD *)(a2 + 4) = 1;
                                                                          }
                                                                          v398 = *(_QWORD *)(a2 + 8) | (v397 << (56 - v392));
                                                                        }
                                                                        *(_DWORD *)(a2 + 16) = v396 - 2;
                                                                        *(_QWORD *)(a2 + 8) = 4 * v398;
                                                                        v391 = v398 >> 62;
                                                                        goto LABEL_602;
                                                                      }
                                                                      if (v337 == 1)
                                                                      {
                                                                        LODWORD(v391) = 0;
                                                                        a3[3] = 3;
                                                                        *(_QWORD *)(a3 + 269) = 0;
LABEL_602:
                                                                        a3[7] = v391;
                                                                        goto LABEL_603;
                                                                      }
                                                                      if (v337 != 2)
                                                                      {
                                                                        if (a3[269] == 1)
                                                                          goto LABEL_591;
                                                                        goto LABEL_595;
                                                                      }
                                                                      if ((_DWORD)v336 == 2)
                                                                      {
                                                                        bits = dav1d_get_bits(a2, 1u);
                                                                        a3[269] = bits;
                                                                        if (!bits)
                                                                        {
                                                                          v389 = 0;
                                                                          a3[270] = 0;
                                                                          v390 = 3;
                                                                          goto LABEL_590;
                                                                        }
                                                                        v388 = dav1d_get_bits(a2, 1u);
                                                                        v389 = a3[269];
                                                                        a3[270] = v388 != 0;
                                                                        if (v389)
                                                                          v390 = 1;
                                                                        else
                                                                          v390 = 3;
                                                                        if (!v389 || v388)
                                                                        {
LABEL_590:
                                                                          a3[3] = v390;
                                                                          if (v389 == 1)
                                                                          {
LABEL_591:
                                                                            if (a3[270] == 1)
                                                                              goto LABEL_592;
                                                                          }
LABEL_595:
                                                                          LODWORD(v391) = 0;
                                                                          goto LABEL_602;
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        v389 = 1;
                                                                        *(_QWORD *)(a3 + 269) = 1;
                                                                      }
                                                                      v390 = 2;
                                                                      goto LABEL_590;
                                                                    }
                                                                    a3[3] = 3;
                                                                    *(_QWORD *)(a3 + 269) = 0;
                                                                    a3[9] = 1;
                                                                    if (v337 != 1 && (v337 != 2 || (_DWORD)v336 != 2))
                                                                      return 4294967274;
LABEL_603:
                                                                    if (v60[5] && !*v354 && a3[3] != 3)
                                                                      return 4294967274;
                                                                    v399 = *(_DWORD *)(a2 + 16);
                                                                    if (a3[271])
                                                                    {
                                                                      a3[273] = 0;
                                                                      if (v399)
                                                                        goto LABEL_608;
LABEL_615:
                                                                      v408 = *(_QWORD *)(a2 + 40);
                                                                      v409 = *(_DWORD *)(a2 + 4);
                                                                      v410 = *(unsigned __int8 **)(a2 + 24);
                                                                      *(_DWORD *)(a2 + 16) = 8;
                                                                      if (v409)
                                                                      {
                                                                        v411 = 0;
                                                                        if ((unint64_t)v410 < v408)
                                                                        {
LABEL_618:
                                                                          v412 = *(_QWORD *)(a2 + 8) | v411;
                                                                          v401 = 2 * v412;
                                                                          a3[274] = v412 >> 63;
                                                                          v402 = 7;
                                                                          goto LABEL_619;
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        *(_QWORD *)(a2 + 24) = v410 + 1;
                                                                        v411 = (unint64_t)*v410 << 56;
                                                                        if ((unint64_t)(v410 + 1) < v408)
                                                                          goto LABEL_618;
                                                                      }
                                                                      *(_DWORD *)a2 = v409;
                                                                      *(_DWORD *)(a2 + 4) = 1;
                                                                      goto LABEL_618;
                                                                    }
                                                                    if (v399)
                                                                    {
                                                                      v407 = *(_QWORD *)(a2 + 8);
                                                                      --v399;
                                                                      *(_QWORD *)(a2 + 8) = 2 * v407;
                                                                      a3[273] = v407 >> 63;
                                                                      if (!v399)
                                                                        goto LABEL_615;
                                                                    }
                                                                    else
                                                                    {
                                                                      v413 = *(_QWORD *)(a2 + 40);
                                                                      v414 = *(_DWORD *)(a2 + 4);
                                                                      v415 = *(unsigned __int8 **)(a2 + 24);
                                                                      *(_DWORD *)(a2 + 16) = 8;
                                                                      if (v414)
                                                                      {
                                                                        v416 = 0;
                                                                      }
                                                                      else
                                                                      {
                                                                        *(_QWORD *)(a2 + 24) = v415 + 1;
                                                                        v416 = (unint64_t)*v415++ << 56;
                                                                      }
                                                                      if ((unint64_t)v415 >= v413)
                                                                      {
                                                                        *(_DWORD *)a2 = v414;
                                                                        *(_DWORD *)(a2 + 4) = 1;
                                                                      }
                                                                      v417 = *(_QWORD *)(a2 + 8) | v416;
                                                                      v399 = 7;
                                                                      *(_QWORD *)(a2 + 8) = 2 * v417;
                                                                      a3[273] = v417 >> 63;
                                                                    }
LABEL_608:
                                                                    v400 = *(_QWORD *)(a2 + 8);
                                                                    v401 = 2 * v400;
                                                                    *(_QWORD *)(a2 + 8) = 2 * v400;
                                                                    a3[274] = v400 >> 63;
                                                                    v402 = v399 - 1;
                                                                    if (v402)
                                                                    {
LABEL_619:
                                                                      result = 0;
                                                                      *(_DWORD *)(a2 + 16) = v402 - 1;
                                                                      *(_QWORD *)(a2 + 8) = 2 * v401;
                                                                      return result;
                                                                    }
                                                                    v403 = *(_QWORD *)(a2 + 40);
                                                                    v404 = *(_DWORD *)(a2 + 4);
                                                                    v405 = *(unsigned __int8 **)(a2 + 24);
                                                                    *(_DWORD *)(a2 + 16) = 8;
                                                                    if (v404)
                                                                    {
                                                                      v406 = 0;
                                                                      if ((unint64_t)v405 < v403)
                                                                      {
LABEL_612:
                                                                        v401 |= v406;
                                                                        v402 = 8;
                                                                        goto LABEL_619;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      *(_QWORD *)(a2 + 24) = v405 + 1;
                                                                      v406 = (unint64_t)*v405 << 56;
                                                                      if ((unint64_t)(v405 + 1) < v403)
                                                                        goto LABEL_612;
                                                                    }
                                                                    *(_DWORD *)a2 = v404;
                                                                    *(_DWORD *)(a2 + 4) = 1;
                                                                    goto LABEL_612;
                                                                  }
LABEL_542:
                                                                  v374 = *(_DWORD *)(a2 + 16);
                                                                  if (v374)
                                                                  {
                                                                    v375 = *(_QWORD *)(a2 + 8);
                                                                    v376 = v374 - 1;
LABEL_548:
                                                                    *(_DWORD *)(a2 + 16) = v376;
                                                                    *(_QWORD *)(a2 + 8) = 2 * v375;
                                                                    a3[9] = v375 >> 63;
                                                                    a3[3] = 0;
                                                                    *(_QWORD *)(a3 + 269) = 0x100000001;
                                                                    a3[7] = 0;
                                                                    a3[273] = 0;
                                                                    goto LABEL_603;
                                                                  }
                                                                  v377 = *(_QWORD *)(a2 + 40);
                                                                  v378 = *(_DWORD *)(a2 + 4);
                                                                  v379 = *(unsigned __int8 **)(a2 + 24);
                                                                  *(_DWORD *)(a2 + 16) = 8;
                                                                  if (v378)
                                                                  {
                                                                    v380 = 0;
                                                                    if ((unint64_t)v379 < v377)
                                                                    {
LABEL_547:
                                                                      v375 = *(_QWORD *)(a2 + 8) | v380;
                                                                      v376 = 7;
                                                                      goto LABEL_548;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    *(_QWORD *)(a2 + 24) = v379 + 1;
                                                                    v380 = (unint64_t)*v379 << 56;
                                                                    if ((unint64_t)(v379 + 1) < v377)
                                                                      goto LABEL_547;
                                                                  }
                                                                  *(_DWORD *)a2 = v378;
                                                                  *(_DWORD *)(a2 + 4) = 1;
                                                                  goto LABEL_547;
                                                                }
                                                                v352 -= 8;
                                                                v359 = v373;
                                                                v369 = *(_QWORD *)(a2 + 40);
                                                                v370 = *(_DWORD *)(a2 + 4);
                                                                v371 = *(unsigned __int8 **)(a2 + 24);
                                                                *(_DWORD *)(a2 + 16) = v352;
                                                                if (v370)
                                                                {
LABEL_521:
                                                                  v372 = 0;
                                                                  if ((unint64_t)v371 < v369)
                                                                  {
LABEL_523:
                                                                    v367 |= v372 << -(char)v352;
                                                                    goto LABEL_541;
                                                                  }
LABEL_522:
                                                                  *(_DWORD *)a2 = v370;
                                                                  *(_DWORD *)(a2 + 4) = 1;
                                                                  goto LABEL_523;
                                                                }
LABEL_526:
                                                                *(_QWORD *)(a2 + 24) = v371 + 1;
                                                                v372 = *v371;
                                                                if ((unint64_t)(v371 + 1) < v369)
                                                                  goto LABEL_523;
                                                                goto LABEL_522;
                                                              }
                                                              v362 = *(_QWORD *)(a2 + 40);
                                                              v363 = *(_DWORD *)(a2 + 4);
                                                              v364 = *(unsigned __int8 **)(a2 + 24);
                                                              *(_DWORD *)(a2 + 16) = v352;
                                                              if (v363)
                                                              {
                                                                v365 = 0;
                                                                if ((unint64_t)v364 < v362)
                                                                  goto LABEL_520;
                                                              }
                                                              else
                                                              {
                                                                *(_QWORD *)(a2 + 24) = v364 + 1;
                                                                v365 = *v364;
                                                                if ((unint64_t)(v364 + 1) < v362)
                                                                {
LABEL_520:
                                                                  v366 = (v365 << -(char)v352) | v360;
                                                                  v367 = v366 << 8;
                                                                  *(_QWORD *)(a2 + 8) = v366 << 8;
                                                                  v368 = HIBYTE(v366);
                                                                  a3[5] = v368;
                                                                  v369 = *(_QWORD *)(a2 + 40);
                                                                  v370 = *(_DWORD *)(a2 + 4);
                                                                  v371 = *(unsigned __int8 **)(a2 + 24);
                                                                  *(_DWORD *)(a2 + 16) = v352;
                                                                  if (v370)
                                                                    goto LABEL_521;
                                                                  goto LABEL_526;
                                                                }
                                                              }
                                                              *(_DWORD *)a2 = v363;
                                                              *(_DWORD *)(a2 + 4) = 1;
                                                              goto LABEL_520;
                                                            }
                                                            v355 = *(_QWORD *)(a2 + 40);
                                                            v356 = *(_DWORD *)(a2 + 4);
                                                            v357 = *(unsigned __int8 **)(a2 + 24);
                                                            v352 = v334 + 7;
                                                            *(_DWORD *)(a2 + 16) = v334 + 7;
                                                            if (v356)
                                                            {
                                                              v358 = 0;
                                                              if ((unint64_t)v357 < v355)
                                                              {
LABEL_515:
                                                                v353 |= v358 << (57 - v334);
                                                                goto LABEL_516;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              *(_QWORD *)(a2 + 24) = v357 + 1;
                                                              v358 = *v357;
                                                              if ((unint64_t)(v357 + 1) < v355)
                                                                goto LABEL_515;
                                                            }
                                                            *(_DWORD *)a2 = v356;
                                                            *(_DWORD *)(a2 + 4) = 1;
                                                            goto LABEL_515;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          *(_QWORD *)(a2 + 24) = v350 + 1;
                                                          v351 = *v350;
                                                          if ((unint64_t)(v350 + 1) < v348)
                                                            goto LABEL_507;
                                                        }
                                                        *(_DWORD *)a2 = v349;
                                                        *(_DWORD *)(a2 + 4) = 1;
                                                        goto LABEL_507;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      *(_QWORD *)(a2 + 24) = v346 + 1;
                                                      v347 = *v346;
                                                      if ((unint64_t)(v346 + 1) < v344)
                                                        goto LABEL_502;
                                                    }
                                                    *(_DWORD *)a2 = v345;
                                                    *(_DWORD *)(a2 + 4) = 1;
                                                    goto LABEL_502;
                                                  }
                                                  if (v309 != 1)
                                                  {
LABEL_494:
                                                    --v334;
                                                    v342 = v335 >> 63;
                                                    v335 *= 2;
                                                    *(_QWORD *)(a2 + 8) = v335;
                                                    LODWORD(v336) = v342 + v336;
                                                    a3[8] = v336;
                                                    goto LABEL_498;
                                                  }
                                                  v338 = *(_QWORD *)(a2 + 40);
                                                  v339 = *(_DWORD *)(a2 + 4);
                                                  v340 = *(unsigned __int8 **)(a2 + 24);
                                                  *(_DWORD *)(a2 + 16) = 8;
                                                  if (v339)
                                                  {
                                                    v341 = 0;
                                                    if ((unint64_t)v340 < v338)
                                                    {
LABEL_493:
                                                      v335 |= v341 << (57 - v309);
                                                      v334 = 8;
                                                      goto LABEL_494;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    *(_QWORD *)(a2 + 24) = v340 + 1;
                                                    v341 = *v340;
                                                    if ((unint64_t)(v340 + 1) < v338)
                                                      goto LABEL_493;
                                                  }
                                                  *(_DWORD *)a2 = v339;
                                                  *(_DWORD *)(a2 + 4) = 1;
                                                  goto LABEL_493;
                                                }
                                              }
                                              else
                                              {
                                                *(_QWORD *)(a2 + 24) = v322 + 1;
                                                v323 = *v322;
                                                if ((unint64_t)(v322 + 1) < v320)
                                                  goto LABEL_478;
                                              }
                                              *(_DWORD *)a2 = v321;
                                              *(_DWORD *)(a2 + 4) = 1;
                                              goto LABEL_478;
                                            }
LABEL_453:
                                            if (!v134)
                                              goto LABEL_471;
                                            goto LABEL_454;
                                          }
                                        }
LABEL_452:
                                        a3[264] = 2;
                                        if ((v141 & 0x8000000000000000) != 0)
                                          goto LABEL_463;
                                        goto LABEL_453;
                                      }
LABEL_188:
                                      v141 = 2 * v139;
                                      *(_QWORD *)(a2 + 8) = 2 * v139;
                                      a3[259] = v139 >> 63;
                                      v142 = v140 - 1;
                                      if (v140 == 1)
                                      {
                                        v163 = *(_QWORD *)(a2 + 40);
                                        v164 = *(_DWORD *)(a2 + 4);
                                        v165 = *(unsigned __int8 **)(a2 + 24);
                                        *(_DWORD *)(a2 + 16) = 8;
                                        if (v164)
                                        {
                                          v166 = 0;
                                        }
                                        else
                                        {
                                          *(_QWORD *)(a2 + 24) = v165 + 1;
                                          v166 = *v165++;
                                        }
                                        if ((unint64_t)v165 >= v163)
                                        {
                                          *(_DWORD *)a2 = v164;
                                          *(_DWORD *)(a2 + 4) = 1;
                                        }
                                        v141 |= v166 << 56;
                                        v142 = 8;
                                      }
                                      goto LABEL_226;
                                    }
                                  }
                                  else
                                  {
                                    *(_QWORD *)(a2 + 24) = v131 + 1;
                                    v132 = *v131;
                                    if ((unint64_t)(v131 + 1) < v129)
                                      goto LABEL_180;
                                  }
                                  *(_DWORD *)a2 = v130;
                                  *(_DWORD *)(a2 + 4) = 1;
                                  goto LABEL_180;
                                }
                              }
                              else
                              {
                                *(_QWORD *)(a2 + 24) = v121 + 1;
                                v122 = *v121;
                                if ((unint64_t)(v121 + 1) < v119)
                                  goto LABEL_172;
                              }
                              *(_DWORD *)a2 = v120;
                              *(_DWORD *)(a2 + 4) = 1;
                              goto LABEL_172;
                            }
                            if (!v95)
                            {
                              v102 = *(_QWORD *)(a2 + 40);
                              v103 = *(_DWORD *)(a2 + 4);
                              v104 = *(unsigned __int8 **)(a2 + 24);
                              *(_DWORD *)(a2 + 16) = 8;
                              if (v103)
                              {
                                v105 = 0;
                              }
                              else
                              {
                                *(_QWORD *)(a2 + 24) = v104 + 1;
                                v105 = *v104++;
                              }
                              if ((unint64_t)v104 >= v102)
                              {
                                *(_DWORD *)a2 = v103;
                                *(_DWORD *)(a2 + 4) = 1;
                              }
                              v96 |= v105 << 56;
                              v95 = 8;
                            }
                            v106 = v96;
                            v107 = v95 - 1;
                            v96 *= 2;
                            *(_QWORD *)(a2 + 8) = v96;
                            a3[250] = v106 >> 63;
                            if ((v106 & 0x8000000000000000) != 0)
                            {
                              if (v107 <= 3)
                              {
                                v108 = *(_QWORD *)(a2 + 40);
                                v109 = *(_DWORD *)(a2 + 4);
                                v110 = *(unsigned __int8 **)(a2 + 24);
                                v107 = v95 + 7;
                                *(_DWORD *)(a2 + 16) = v95 + 7;
                                if (v109)
                                {
                                  v111 = 0;
                                }
                                else
                                {
                                  *(_QWORD *)(a2 + 24) = v110 + 1;
                                  v111 = *v110++;
                                }
                                if ((unint64_t)v110 >= v108)
                                {
                                  *(_DWORD *)a2 = v109;
                                  *(_DWORD *)(a2 + 4) = 1;
                                }
                                v96 |= v111 << (57 - v95);
                              }
                              v112 = v107 - 4;
                              v113 = 16 * v96;
                              *(_QWORD *)(a2 + 8) = 16 * v96;
                              v114 = v96 >> 60;
                              a3[251] = (v96 >> 60) + 2;
                              if (v107 - 4 <= 2)
                              {
                                v115 = *(_QWORD *)(a2 + 40);
                                v116 = *(_DWORD *)(a2 + 4);
                                v117 = *(unsigned __int8 **)(a2 + 24);
                                v112 = v107 + 4;
                                *(_DWORD *)(a2 + 16) = v107 + 4;
                                if (v116)
                                {
                                  v118 = 0;
                                }
                                else
                                {
                                  *(_QWORD *)(a2 + 24) = v117 + 1;
                                  v118 = *v117++;
                                }
                                if ((unint64_t)v117 >= v115)
                                {
                                  *(_DWORD *)a2 = v116;
                                  *(_DWORD *)(a2 + 4) = 1;
                                }
                                v113 |= v118 << (60 - v107);
                              }
                              v95 = v112 - 3;
                              v96 = 8 * v113;
                              *(_QWORD *)(a2 + 8) = 8 * v113;
                              a3[252] = v114 + (v113 >> 61) + 3;
                              if (!v95)
                                goto LABEL_169;
                            }
                            else
                            {
                              --v95;
                              if (!v107)
                                goto LABEL_169;
                            }
LABEL_138:
                            v98 = 2 * v96;
                            *(_QWORD *)(a2 + 8) = 2 * v96;
                            a3[253] = v96 >> 63;
                            v99 = v95 - 1;
                            if (v95 != 1)
                              goto LABEL_139;
                            v124 = *(_QWORD *)(a2 + 40);
                            v125 = *(_DWORD *)(a2 + 4);
                            v126 = *(unsigned __int8 **)(a2 + 24);
                            *(_DWORD *)(a2 + 16) = 8;
                            if (v125)
                            {
                              v127 = 0;
                              if ((unint64_t)v126 < v124)
                              {
LABEL_176:
                                v128 = (v127 << 56) | v98;
                                v100 = 2 * v128;
                                *(_QWORD *)(a2 + 8) = 2 * v128;
                                a3[254] = v128 >> 63;
                                v101 = 7;
                                goto LABEL_181;
                              }
                            }
                            else
                            {
                              *(_QWORD *)(a2 + 24) = v126 + 1;
                              v127 = *v126;
                              if ((unint64_t)(v126 + 1) < v124)
                                goto LABEL_176;
                            }
                            *(_DWORD *)a2 = v125;
                            *(_DWORD *)(a2 + 4) = 1;
                            goto LABEL_176;
                          }
                          v93 <<= 8;
                          v94 = v87 + 16;
                          *(_DWORD *)(a2 + 16) = v87 + 16;
                          if (v90)
                          {
                            if ((unint64_t)v91 < v89)
                              goto LABEL_124;
                          }
                          else
                          {
                            *(_QWORD *)(a2 + 24) = v91 + 1;
                            v93 |= *v91++;
                            if ((unint64_t)v91 < v89)
                            {
LABEL_124:
                              if (v94 > v79)
                              {
LABEL_125:
                                LOBYTE(v87) = v87 + 8;
                                v92 = v94;
                                goto LABEL_135;
                              }
LABEL_130:
                              v93 <<= 8;
                              v92 = v87 + 24;
                              *(_DWORD *)(a2 + 16) = v87 + 24;
                              if (!v90)
                              {
                                *(_QWORD *)(a2 + 24) = v91 + 1;
                                v93 |= *v91++;
                              }
                              if ((unint64_t)v91 >= v89)
                              {
                                *(_DWORD *)a2 = v90;
                                *(_DWORD *)(a2 + 4) = 1;
                              }
                              LOBYTE(v87) = v87 + 16;
                              goto LABEL_135;
                            }
                          }
                          *(_DWORD *)a2 = v90;
                          v90 = 1;
                          *(_DWORD *)(a2 + 4) = 1;
                          if (v94 > v79)
                            goto LABEL_125;
                          goto LABEL_130;
                        }
                      }
                      *(_DWORD *)a2 = v90;
                      v90 = 1;
                      *(_DWORD *)(a2 + 4) = 1;
                      goto LABEL_121;
                    }
                    v85 <<= 8;
                    v86 = v69 + 12;
                    *(_DWORD *)(a2 + 16) = v69 + 12;
                    if (v82)
                    {
                      if ((unint64_t)v83 < v81)
                        goto LABEL_101;
                    }
                    else
                    {
                      *(_QWORD *)(a2 + 24) = v83 + 1;
                      v85 |= *v83++;
                      if ((unint64_t)v83 < v81)
                      {
LABEL_101:
                        if (v86 > v71)
                        {
LABEL_102:
                          LOBYTE(v77) = v69 + 4;
                          v84 = v69 + 12;
                          goto LABEL_116;
                        }
LABEL_111:
                        v85 <<= 8;
                        v84 = v69 + 20;
                        *(_DWORD *)(a2 + 16) = v69 + 20;
                        if (!v82)
                        {
                          *(_QWORD *)(a2 + 24) = v83 + 1;
                          v85 |= *v83++;
                        }
                        if ((unint64_t)v83 >= v81)
                        {
                          *(_DWORD *)a2 = v82;
                          *(_DWORD *)(a2 + 4) = 1;
                        }
                        LOBYTE(v77) = v69 + 12;
                        goto LABEL_116;
                      }
                    }
                    *(_DWORD *)a2 = v82;
                    v82 = 1;
                    *(_DWORD *)(a2 + 4) = 1;
                    if (v86 > v71)
                      goto LABEL_102;
                    goto LABEL_111;
                  }
                }
                *(_DWORD *)a2 = v82;
                v82 = 1;
                *(_DWORD *)(a2 + 4) = 1;
                goto LABEL_98;
              }
            }
            else
            {
              *(_QWORD *)(a2 + 24) = v75 + 1;
              v76 = *v75;
              if ((unint64_t)(v75 + 1) < v73)
                goto LABEL_93;
            }
            *(_DWORD *)a2 = v74;
            *(_DWORD *)(a2 + 4) = 1;
            goto LABEL_93;
          }
          v65 = *(_QWORD *)(a2 + 40);
          v66 = *(_DWORD *)(a2 + 4);
          v67 = *(unsigned __int8 **)(a2 + 24);
          *(_DWORD *)(a2 + 16) = v58 + 8;
          if (v66)
          {
            v68 = 0;
            if ((unint64_t)v67 < v65)
            {
LABEL_88:
              v57 |= v68 << (56 - v58);
              v58 += 8;
              goto LABEL_89;
            }
          }
          else
          {
            *(_QWORD *)(a2 + 24) = v67 + 1;
            v68 = *v67;
            if ((unint64_t)(v67 + 1) < v65)
              goto LABEL_88;
          }
          *(_DWORD *)a2 = v66;
          *(_DWORD *)(a2 + 4) = 1;
          goto LABEL_88;
        }
      }
      else
      {
        *(_QWORD *)(a2 + 24) = v24 + 1;
        v25 = *v24;
        if ((unint64_t)(v24 + 1) < v22)
          goto LABEL_22;
      }
      *(_DWORD *)a2 = v23;
      *(_DWORD *)(a2 + 4) = 1;
      goto LABEL_22;
    }
    v18 = *(_QWORD *)(a2 + 40);
    v19 = *(_DWORD *)(a2 + 4);
    v20 = *(unsigned __int8 **)(a2 + 24);
    *(_DWORD *)(a2 + 16) = 8;
    if (v19)
    {
      v21 = 0;
      if ((unint64_t)v20 < v18)
      {
LABEL_18:
        v13 |= v21 << (59 - v10);
        v16 = 2 * v13;
        *(_QWORD *)(a2 + 8) = 2 * v13;
        a3[235] = v13 >> 63;
        v17 = 7;
        goto LABEL_23;
      }
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v20 + 1;
      v21 = *v20;
      if ((unint64_t)(v20 + 1) < v18)
        goto LABEL_18;
    }
    *(_DWORD *)a2 = v19;
    *(_DWORD *)(a2 + 4) = 1;
    goto LABEL_18;
  }
  return 4294967274;
}

uint64_t parse_frame_hdr(_QWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  unint64_t v8;
  int v9;
  int *v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unsigned __int8 *v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  unsigned __int8 *v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  int v59;
  unint64_t v60;
  int v61;
  unsigned __int8 *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  unsigned __int8 *v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  unsigned __int8 *v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  unsigned __int8 *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  unsigned __int8 *v91;
  uint64_t v92;
  char v93;
  int v94;
  unint64_t v95;
  int v96;
  unsigned __int8 *v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  unsigned __int8 *v105;
  uint64_t v106;
  unsigned int v107;
  unint64_t v108;
  _QWORD *v109;
  char v110;
  int v111;
  unint64_t v112;
  int v113;
  unsigned __int8 *v114;
  unsigned int v115;
  uint64_t v116;
  unint64_t v117;
  int v118;
  unint64_t v119;
  int v120;
  unsigned __int8 *v121;
  int v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t i;
  unint64_t v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  int v132;
  unsigned __int8 *v133;
  unsigned int v134;
  unint64_t v135;
  unint64_t v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  int v140;
  unsigned __int8 *v141;
  unsigned int v142;
  BOOL v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  unsigned __int8 *v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  unint64_t v153;
  int v154;
  unsigned __int8 *v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  int v160;
  unsigned __int8 *v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  int v167;
  unsigned __int8 *v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  int v174;
  unsigned __int8 *v175;
  uint64_t v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  int v181;
  unsigned __int8 *v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  int v188;
  unsigned __int8 *v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  int v196;
  unsigned __int8 *v197;
  unint64_t v198;
  unsigned int v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  int v205;
  unsigned __int8 *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  int v210;
  unsigned __int8 *v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  int v219;
  unsigned __int8 *v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  int v224;
  unsigned __int8 *v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  int v233;
  unsigned __int8 *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  int v238;
  unsigned __int8 *v239;
  uint64_t v240;
  unsigned int v241;
  uint64_t v242;
  unsigned int v243;
  unint64_t v244;
  unint64_t v245;
  int v246;
  unsigned __int8 *v247;
  uint64_t v248;
  unsigned int v249;
  unint64_t v250;
  _DWORD *v251;
  _QWORD *v252;
  unint64_t v253;
  int v254;
  unsigned __int8 *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  int v260;
  unsigned __int8 *v261;
  unsigned int *v262;
  _DWORD *v263;
  _DWORD *v264;
  int v265;
  unint64_t v266;
  int v267;
  unsigned __int8 *v268;
  int v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  int v273;
  unsigned int v274;
  unsigned int v275;
  uint64_t v276;
  unint64_t v277;
  int v278;
  unsigned __int8 *v279;
  unint64_t v280;
  uint64_t v281;
  unsigned int v282;
  int v283;
  unint64_t v284;
  int v285;
  unsigned __int8 *v286;
  uint64_t v287;
  int v288;
  unint64_t v289;
  unint64_t v290;
  int v291;
  unsigned __int8 *v292;
  uint64_t v293;
  unint64_t v294;
  unsigned int v295;
  uint64_t v296;
  unint64_t v297;
  int v298;
  unsigned __int8 *v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t result;
  unint64_t v303;
  int v304;
  unint64_t v305;
  int v306;
  unsigned __int8 *v307;
  int v308;
  uint64_t v309;
  unint64_t v310;
  int v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t *v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  uint64_t v337;
  int v338;
  int v339;
  uint64_t v340;
  unint64_t v341;
  unsigned int v342;
  unsigned int v343;
  uint64_t v344;
  unint64_t v345;
  int v346;
  unsigned __int8 *v347;
  unint64_t v348;
  uint64_t v349;
  unsigned int v350;
  int v351;
  unint64_t v352;
  int v353;
  unsigned __int8 *v354;
  uint64_t v355;
  int v356;
  int v357;
  unint64_t v358;
  unint64_t v359;
  int v360;
  unsigned __int8 *v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  int v365;
  int v366;
  char v367;
  int v368;
  int v369;
  signed int v370;
  unsigned int v371;
  char v372;
  int v373;
  unsigned int v374;
  int v375;
  int v376;
  unsigned int v377;
  unsigned int v378;
  int v379;
  int v380;
  unsigned int v381;
  unsigned int v382;
  int v383;
  int v384;
  int v385;
  signed int v386;
  int v387;
  int v388;
  _QWORD *v389;
  _DWORD *v390;
  unint64_t v391;
  int v392;
  unsigned __int8 *v393;
  uint64_t v394;
  uint64_t v395;
  int v396;
  char v397;
  int v398;
  int v399;
  uint64_t v400;
  int v401;
  signed int v402;
  int v403;
  int v404;
  unsigned int v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  unint64_t v409;
  int v410;
  unsigned __int8 *v411;
  uint64_t v412;
  int v413;
  unsigned int v414;
  unsigned int v415;
  uint64_t v416;
  unint64_t v417;
  int v418;
  unsigned __int8 *v419;
  unsigned int v420;
  unint64_t v421;
  int v422;
  unsigned __int8 *v423;
  unsigned int v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  unint64_t v428;
  int v429;
  unsigned int v430;
  uint64_t v431;
  unsigned int v432;
  unint64_t v433;
  unint64_t v434;
  unsigned int v435;
  unint64_t v436;
  unint64_t v437;
  unint64_t v438;
  int v439;
  unsigned __int8 *v440;
  unsigned int v441;
  uint64_t v442;
  unint64_t v443;
  unint64_t v444;
  int v445;
  unsigned __int8 *v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  int v450;
  unsigned __int8 *v451;
  uint64_t v452;
  unint64_t v453;
  int v454;
  unsigned __int8 *v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  unint64_t v459;
  int v460;
  unsigned __int8 *v461;
  uint64_t v462;
  unint64_t v463;
  unsigned int v464;
  unsigned int v465;
  uint64_t v466;
  unint64_t v467;
  int v468;
  unsigned __int8 *v469;
  uint64_t v470;
  _QWORD *v471;
  _DWORD *v472;
  int v473;
  unsigned int v474;
  unsigned int v475;
  uint64_t v476;
  unint64_t v477;
  int v478;
  unsigned __int8 *v479;
  unint64_t v480;
  uint64_t v481;
  _QWORD *v482;
  _DWORD *v483;
  int v484;
  _DWORD *v485;
  int v486;
  uint64_t v487;
  _QWORD *v488;
  _DWORD *v489;
  int v490;
  _DWORD *v491;
  int v492;
  uint64_t v493;
  int v494;
  uint64_t v495;
  _BOOL4 v496;
  unsigned int v497;
  uint64_t v498;
  uint64_t v499;
  unint64_t v500;
  int v501;
  unsigned __int8 *v502;
  uint64_t v503;
  unint64_t v504;
  int v505;
  unsigned __int8 *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  int v511;
  unsigned __int8 *v512;
  uint64_t v513;
  unint64_t v514;
  int v515;
  unsigned __int8 *v516;
  uint64_t v517;
  uint64_t v518;
  unsigned int v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  int v523;
  unsigned __int8 *v524;
  uint64_t v525;
  unint64_t v526;
  int v527;
  unsigned __int8 *v528;
  uint64_t v529;
  uint64_t v530;
  _BOOL4 v531;
  unint64_t v532;
  int v533;
  unsigned __int8 *v534;
  uint64_t v535;
  unint64_t v536;
  int v537;
  unsigned __int8 *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  unint64_t v542;
  int v543;
  unsigned __int8 *v544;
  uint64_t v545;
  unint64_t v546;
  unint64_t v547;
  int v548;
  unsigned __int8 *v549;
  uint64_t v550;
  unsigned int v551;
  unint64_t v552;
  unint64_t v553;
  int v554;
  unsigned __int8 *v555;
  uint64_t v556;
  unint64_t v557;
  unint64_t v558;
  int v559;
  unsigned __int8 *v560;
  uint64_t v561;
  unint64_t v562;
  int v563;
  unsigned __int8 *v564;
  uint64_t v565;
  unsigned int v566;
  unint64_t v567;
  uint64_t v568;
  unint64_t v569;
  int v570;
  unsigned __int8 *v571;
  uint64_t v572;
  int v573;
  unint64_t v574;
  unint64_t v575;
  unint64_t v576;
  int v577;
  unsigned __int8 *v578;
  uint64_t v579;
  unint64_t v580;
  int v581;
  unsigned __int8 *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  _DWORD *v586;
  int v587;
  uint64_t v588;
  int v589;
  unint64_t v590;
  int v591;
  unsigned __int8 *v592;
  uint64_t v593;
  unint64_t v594;
  unsigned int v595;
  uint64_t v596;
  int v597;
  uint64_t v598;
  unint64_t v599;
  int v600;
  unsigned __int8 *v601;
  uint64_t v602;
  unint64_t v603;
  int v604;
  unsigned __int8 *v605;
  uint64_t v606;
  unint64_t v607;
  int v608;
  unsigned __int8 *v609;
  uint64_t v610;
  uint64_t v611;
  unsigned int v612;
  uint64_t v613;
  int v614;
  uint64_t v615;
  unint64_t v616;
  int v617;
  unsigned __int8 *v618;
  uint64_t v619;
  unint64_t v620;
  int v621;
  unsigned __int8 *v622;
  uint64_t v623;
  uint64_t v624;
  unsigned int v625;
  uint64_t v626;
  int v627;
  uint64_t v628;
  unint64_t v629;
  int v630;
  unsigned __int8 *v631;
  uint64_t v632;
  unint64_t v633;
  int v634;
  unsigned __int8 *v635;
  uint64_t v636;
  uint64_t v637;
  unsigned int v638;
  uint64_t v639;
  int v640;
  uint64_t v641;
  unint64_t v642;
  int v643;
  unsigned __int8 *v644;
  uint64_t v645;
  unint64_t v646;
  int v647;
  unsigned __int8 *v648;
  uint64_t v649;
  uint64_t v650;
  unsigned int v651;
  uint64_t v652;
  int v653;
  unint64_t v654;
  unint64_t v655;
  int v656;
  unsigned __int8 *v657;
  uint64_t v658;
  unint64_t v659;
  int v660;
  unsigned __int8 *v661;
  uint64_t v662;
  uint64_t v663;
  int v664;
  unint64_t v665;
  unint64_t v666;
  int v667;
  unint64_t v668;
  int v669;
  unsigned __int8 *v670;
  uint64_t v671;
  unint64_t v672;
  unint64_t v673;
  int v674;
  unsigned __int8 *v675;
  uint64_t v676;
  unsigned int v677;
  unint64_t v678;
  unint64_t v679;
  int v680;
  unsigned __int8 *v681;
  uint64_t v682;
  unsigned int v683;
  unint64_t v684;
  unint64_t v685;
  int v686;
  unsigned __int8 *v687;
  uint64_t v688;
  int v689;
  _BOOL4 v690;
  int32x2_t v691;
  unsigned int v692;
  int32x4_t v693;
  int32x2_t v694;
  int32x2_t v695;
  _BOOL4 v696;
  _BOOL4 v697;
  int32x4_t v698;
  int32x4_t v699;
  int32x4_t v700;
  int32x4_t v701;
  int32x4_t v702;
  _BOOL4 v703;
  int v704;
  _BOOL4 v705;
  int v706;
  _BOOL4 v707;
  _BOOL4 v708;
  int v709;
  int v710;
  unsigned int v711;
  unsigned int v712;
  int v713;
  int v714;
  int v715;
  int bits;
  int v717;
  int v718;
  int v719;
  int v720;
  int v721;
  uint64_t v722;
  unint64_t v723;
  uint64_t v724;
  int v725;
  uint64_t v726;
  int v727;
  unint64_t v728;
  int v729;
  unsigned __int8 *v730;
  int v731;
  uint64_t v732;
  int v733;
  unint64_t v734;
  int v735;
  unsigned __int8 *v736;
  int v737;
  uint64_t v738;
  unint64_t v739;
  int v740;
  unsigned __int8 *v741;
  uint64_t v742;
  unint64_t v743;
  int v744;
  unint64_t v745;
  int v746;
  unint64_t v747;
  int v748;
  unsigned __int8 *v749;
  uint64_t v750;
  unint64_t v751;
  int v752;
  unsigned __int8 *v753;
  uint64_t v754;
  unint64_t v755;
  unint64_t v756;
  int v757;
  int v758;
  unint64_t v759;
  unint64_t v760;
  int v761;
  unsigned __int8 *v762;
  uint64_t v763;
  int v764;
  int v765;
  unint64_t v766;
  unint64_t v767;
  int v768;
  unsigned __int8 *v769;
  uint64_t v770;
  unsigned int v771;
  unint64_t v772;
  uint64_t v773;
  uint64_t v774;
  int v775;
  uint64_t v776;
  int v777;
  uint64_t v778;
  unint64_t v779;
  int v780;
  unsigned __int8 *v781;
  uint64_t v782;
  uint64_t v783;
  int v784;
  uint64_t v785;
  unint64_t v786;
  int v787;
  unsigned __int8 *v788;
  uint64_t v789;
  unsigned int v790;
  unint64_t v791;
  int v792;
  unsigned __int8 *v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  int *v798;
  uint64_t v799;
  char v800;
  int v801;
  int v802;
  char v803;
  int v804;
  int v805;
  int v806;
  int v807;
  int v808;
  int v809;
  int v810;
  int v811;
  int v812;
  int v813;
  int v814;
  int v815;
  BOOL v816;
  int v817;
  int v818;
  int v819;
  unint64_t v820;
  int v821;
  unsigned __int8 *v822;
  uint64_t v823;
  unsigned int v824;
  unint64_t v825;
  unint64_t v826;
  int v827;
  unsigned __int8 *v828;
  char v829;
  uint64_t v830;
  unint64_t v831;
  int v832;
  int v833;
  uint64_t v834;
  unint64_t v835;
  int v836;
  unsigned __int8 *v837;
  uint64_t v838;
  unsigned int v839;
  unsigned int v840;
  unint64_t v841;
  unint64_t v842;
  unint64_t v843;
  int v844;
  unsigned __int8 *v845;
  uint64_t v846;
  unint64_t v847;
  int v848;
  unint64_t v849;
  int v850;
  unsigned __int8 *v851;
  int v852;
  uint64_t v853;
  unint64_t v854;
  int v855;
  unint64_t v856;
  int v857;
  unsigned __int8 *v858;
  int v859;
  uint64_t v860;
  unint64_t v861;
  uint64_t v862;
  uint64_t v863;
  __int128 v864;
  __int128 v865;
  int v866;
  int v867;
  int v868;
  int v869;
  _OWORD *v870;
  __int128 v871;
  __int128 v872;
  __int128 v873;
  __int128 v874;
  __int128 v875;
  __int128 v876;
  __int128 v877;
  __int128 v878;
  __int128 v879;
  __int128 v880;
  unint64_t v881;
  int v882;
  unsigned __int8 *v883;
  uint64_t v884;
  unint64_t v885;
  uint64_t v886;
  _BYTE *v887;
  uint64_t v888;
  uint64_t v889;
  int v890;
  unint64_t v891;
  int v892;
  unsigned __int8 *v893;
  int v894;
  uint64_t v895;
  unint64_t v896;
  int v897;
  unint64_t v898;
  int v899;
  unsigned __int8 *v900;
  int v901;
  uint64_t v902;
  _DWORD *v903;
  uint64_t v904;
  int v905;
  int v906;
  int v907;
  int v908;
  int v909;
  _BYTE *v910;
  uint64_t v911;
  uint64_t v912;
  int v913;
  int v914;
  unint64_t v915;
  int v916;
  unsigned __int8 *v917;
  uint64_t v918;
  unint64_t v919;
  _BYTE *v920;
  uint64_t v921;
  uint64_t v922;
  int v923;
  int v924;
  unint64_t v925;
  int v926;
  unsigned __int8 *v927;
  uint64_t v928;
  int v929;
  unint64_t v930;
  _BYTE *v931;
  uint64_t v932;
  uint64_t v933;
  int v934;
  int v935;
  unint64_t v936;
  int v937;
  unsigned __int8 *v938;
  uint64_t v939;
  int v940;
  int v941;
  uint64_t *v942;
  _BYTE *v943;
  uint64_t v944;
  unsigned __int8 v945;
  _BYTE *v946;
  uint64_t v947;
  unsigned __int8 v948;
  int v949;
  int v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  int v954;
  int v955;
  int v956;
  int v957;
  int v958;
  int v959;
  int v960;
  int v961;
  int v962;
  int v963;
  int v964;
  int v965;
  int v966;
  int v967;
  int v968;
  int v969;
  int v970;
  int v971;
  int v972;
  int v973;
  int v974;
  int v975;
  int v976;
  int v977;
  int v978;
  int v979;
  int v980;
  int v981;
  uint64_t v982;
  _DWORD *v983;
  int v984;
  _DWORD *v985;
  _QWORD *v986;
  _QWORD *v987;
  _DWORD *v988;
  _DWORD *v989;
  _BYTE *v990;
  uint64_t *v991;
  _DWORD *v992;
  __int128 v994;
  __int128 v995;
  uint64_t v996;

  v996 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)a1[9];
  v4 = a1[12];
  if (v3[236])
  {
    *(_DWORD *)(v4 + 232) = 0;
    v5 = (_DWORD *)(v4 + 232);
    *(_DWORD *)(v4 + 260) = 0;
    *(_DWORD *)(v4 + 276) = 1;
    v6 = (_DWORD *)(v4 + 276);
LABEL_3:
    if (!v3[242] || v3[240])
    {
      v7 = *v5;
      v990 = v5;
      if (*v5 == 3)
        goto LABEL_9;
      goto LABEL_6;
    }
    v14 = v3[246];
    v15 = *(_DWORD *)(a2 + 16);
    if (v15 >= v14)
    {
      v48 = *(_QWORD *)(a2 + 8);
      goto LABEL_53;
    }
    v16 = 0;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = *(_DWORD *)(a2 + 4);
    v19 = *(unsigned __int8 **)(a2 + 24);
    while (1)
    {
      v16 <<= 8;
      v15 += 8;
      *(_DWORD *)(a2 + 16) = v15;
      if (v18)
      {
        if ((unint64_t)v19 >= v17)
          goto LABEL_20;
      }
      else
      {
        *(_QWORD *)(a2 + 24) = v19 + 1;
        v16 |= *v19++;
        if ((unint64_t)v19 >= v17)
        {
LABEL_20:
          *(_DWORD *)a2 = v18;
          v18 = 1;
          *(_DWORD *)(a2 + 4) = 1;
        }
      }
      if (v15 >= v14)
      {
        v48 = *(_QWORD *)(a2 + 8) | (v16 << -(char)v15);
LABEL_53:
        *(_DWORD *)(a2 + 16) = v15 - v14;
        *(_QWORD *)(a2 + 8) = v48 << v14;
        *(_DWORD *)(v4 + 272) = v48 >> -(char)v14;
        v7 = *v5;
        v990 = v5;
        if (*v5 != 3)
          goto LABEL_6;
LABEL_9:
        LODWORD(v8) = 1;
        *(_DWORD *)(v4 + 284) = 1;
        v10 = (int *)(a2 + 16);
        v9 = *(_DWORD *)(a2 + 16);
        if (v9)
          goto LABEL_10;
LABEL_60:
        v53 = *(_QWORD *)(a2 + 40);
        v54 = *(_DWORD *)(a2 + 4);
        v55 = *(unsigned __int8 **)(a2 + 24);
        *(_DWORD *)(a2 + 16) = 8;
        if (v54)
        {
          v56 = 0;
          if ((unint64_t)v55 >= v53)
            goto LABEL_62;
        }
        else
        {
          *(_QWORD *)(a2 + 24) = v55 + 1;
          v56 = *v55;
          if ((unint64_t)(v55 + 1) >= v53)
          {
LABEL_62:
            *(_DWORD *)a2 = v54;
            *(_DWORD *)(a2 + 4) = 1;
          }
        }
        v11 = *(_QWORD *)(a2 + 8) | (v56 << 56);
        v9 = 8;
LABEL_64:
        v57 = 2 * v11;
        *(_QWORD *)(a2 + 8) = 2 * v11;
        v58 = (uint64_t *)(a2 + 8);
        v59 = v9 - 1;
        *(_DWORD *)(a2 + 16) = v9 - 1;
        *(_DWORD *)(v4 + 288) = v11 >> 63;
        LODWORD(v11) = v3[263];
        if ((_DWORD)v11 == 2)
        {
          if (v9 == 1)
          {
            v60 = *(_QWORD *)(a2 + 40);
            v61 = *(_DWORD *)(a2 + 4);
            v62 = *(unsigned __int8 **)(a2 + 24);
            *(_DWORD *)(a2 + 16) = 8;
            if (v61)
            {
              v63 = 0;
              if ((unint64_t)v62 >= v60)
                goto LABEL_68;
            }
            else
            {
              *(_QWORD *)(a2 + 24) = v62 + 1;
              v63 = *v62;
              if ((unint64_t)(v62 + 1) >= v60)
              {
LABEL_68:
                *(_DWORD *)a2 = v61;
                *(_DWORD *)(a2 + 4) = 1;
              }
            }
            v57 |= v63 << (57 - v9);
            v59 = 8;
          }
          *v10 = --v59;
          v11 = v57 >> 63;
          v57 *= 2;
          *v58 = v57;
        }
        *(_DWORD *)(v4 + 292) = v11;
        if ((_DWORD)v11)
        {
          LODWORD(v64) = v3[264];
          if ((_DWORD)v64 == 2)
          {
            if (!v59)
            {
              v65 = *(_QWORD *)(a2 + 40);
              v66 = *(_DWORD *)(a2 + 4);
              v67 = *(unsigned __int8 **)(a2 + 24);
              *(_DWORD *)(a2 + 16) = 8;
              if (v66)
              {
                v68 = 0;
                if ((unint64_t)v67 >= v65)
                  goto LABEL_76;
              }
              else
              {
                *(_QWORD *)(a2 + 24) = v67 + 1;
                v68 = *v67;
                if ((unint64_t)(v67 + 1) >= v65)
                {
LABEL_76:
                  *(_DWORD *)a2 = v66;
                  *(_DWORD *)(a2 + 4) = 1;
                }
              }
              v57 |= v68 << 56;
              v59 = 8;
            }
            *v10 = v59 - 1;
            *v58 = 2 * v57;
            v64 = v57 >> 63;
          }
          if ((v7 & 1) != 0)
            v69 = v64;
          else
            v69 = 1;
          *(_DWORD *)(v4 + 296) = v69;
          if (v3[250])
          {
LABEL_83:
            v70 = v3[252];
            v71 = *v10;
            if (*v10 >= v70)
            {
              v83 = *v58;
              goto LABEL_104;
            }
            v72 = 0;
            v73 = *(_QWORD *)(a2 + 40);
            v74 = *(_DWORD *)(a2 + 4);
            v75 = *(unsigned __int8 **)(a2 + 24);
            while (2)
            {
              v72 <<= 8;
              v71 += 8;
              *v10 = v71;
              if (v74)
              {
                if ((unint64_t)v75 >= v73)
                {
LABEL_90:
                  *(_DWORD *)a2 = v74;
                  v74 = 1;
                  *(_DWORD *)(a2 + 4) = 1;
                }
              }
              else
              {
                *(_QWORD *)(a2 + 24) = v75 + 1;
                v72 |= *v75++;
                if ((unint64_t)v75 >= v73)
                  goto LABEL_90;
              }
              if (v71 < v70)
                continue;
              break;
            }
            v83 = *v58 | (v72 << -(char)v71);
LABEL_104:
            *v10 = v71 - v70;
            *v58 = v83 << v70;
            *(_DWORD *)(v4 + 268) = v83 >> -(char)v70;
            if (!v3[236])
            {
LABEL_105:
              if (v7 == 3)
              {
                *(_DWORD *)(v4 + 300) = 1;
                v76 = v3[260];
                if (!v76)
                  goto LABEL_127;
LABEL_94:
                v77 = v3[265];
                v78 = *v10;
                if (*v10 >= v77)
                {
                  v84 = *v58;
                  goto LABEL_110;
                }
                v79 = 0;
                v80 = *(_QWORD *)(a2 + 40);
                v81 = *(_DWORD *)(a2 + 4);
                v82 = *(unsigned __int8 **)(a2 + 24);
                while (2)
                {
                  v79 <<= 8;
                  v78 += 8;
                  *v10 = v78;
                  if (v81)
                  {
                    if ((unint64_t)v82 >= v80)
                    {
LABEL_101:
                      *(_DWORD *)a2 = v81;
                      v81 = 1;
                      *(_DWORD *)(a2 + 4) = 1;
                    }
                  }
                  else
                  {
                    *(_QWORD *)(a2 + 24) = v82 + 1;
                    v79 |= *v82++;
                    if ((unint64_t)v82 >= v80)
                      goto LABEL_101;
                  }
                  if (v78 < v77)
                    continue;
                  break;
                }
                v84 = *v58 | (v79 << -(char)v78);
LABEL_110:
                *v10 = v78 - v77;
                *v58 = v84 << v77;
                v85 = v84 >> -(char)v77;
                *(_DWORD *)(v4 + 248) = v85;
                if ((v7 & 1) != 0)
                  v86 = v8;
                else
                  v86 = 1;
                if ((v86 & 1) != 0)
                {
LABEL_114:
                  *(_DWORD *)(v4 + 304) = 7;
                  if (!v3[242])
                    goto LABEL_145;
LABEL_138:
                  v101 = *v10;
                  if (*v10)
                  {
                    v102 = *v58;
LABEL_144:
                    v107 = v101 - 1;
                    *v10 = v107;
                    v108 = 2 * v102;
                    *v58 = 2 * v102;
                    *(_DWORD *)(v4 + 308) = v102 >> 63;
                    if ((v102 & 0x8000000000000000) != 0)
                    {
                      v125 = *(unsigned int *)(a1[9] + 40);
                      if ((int)v125 >= 1)
                      {
                        for (i = 0; i != v125; ++i)
                        {
                          if (v3[7 * i + 16])
                          {
                            v128 = v3[7 * i + 14];
                            if (!v128
                              || (((1 << (*(_DWORD *)(v4 + 256) + 8)) | (1 << *(_DWORD *)(v4 + 252))) & ~v128) == 0)
                            {
                              v129 = v3[245];
                              if (v107 < v129)
                              {
                                v130 = 0;
                                v131 = *(_QWORD *)(a2 + 40);
                                v132 = *(_DWORD *)(a2 + 4);
                                v133 = *(unsigned __int8 **)(a2 + 24);
                                while (1)
                                {
                                  v130 <<= 8;
                                  v107 += 8;
                                  *v10 = v107;
                                  if (v132)
                                  {
                                    if ((unint64_t)v133 >= v131)
                                      goto LABEL_176;
                                  }
                                  else
                                  {
                                    *(_QWORD *)(a2 + 24) = v133 + 1;
                                    v130 |= *v133++;
                                    if ((unint64_t)v133 >= v131)
                                    {
LABEL_176:
                                      *(_DWORD *)a2 = v132;
                                      v132 = 1;
                                      *(_DWORD *)(a2 + 4) = 1;
                                    }
                                  }
                                  if (v107 >= v129)
                                  {
                                    v108 |= v130 << -(char)v107;
                                    break;
                                  }
                                }
                              }
                              v107 -= v129;
                              *v10 = v107;
                              v127 = v108 >> -(char)v129;
                              v108 <<= v129;
                              *v58 = v108;
                              *(_DWORD *)(v4 + 4 * i + 312) = v127;
                            }
                          }
                        }
                      }
                    }
LABEL_145:
                    v109 = (_QWORD *)(v4 + 476);
                    if ((v7 & 1) == 0)
                    {
                      if (!v7 && *v6)
                      {
                        *(_DWORD *)(v4 + 440) = 255;
                        goto LABEL_200;
                      }
                      v110 = v8 ^ 1;
                      v111 = *v10;
                      if (*v10 >= 8)
                      {
                        v117 = *v58;
                        v115 = *v10;
                      }
                      else
                      {
                        v112 = *(_QWORD *)(a2 + 40);
                        v113 = *(_DWORD *)(a2 + 4);
                        v114 = *(unsigned __int8 **)(a2 + 24);
                        v115 = v111 + 8;
                        *(_DWORD *)(a2 + 16) = v111 + 8;
                        if (v113)
                        {
                          v116 = 0;
                          if ((unint64_t)v114 >= v112)
                            goto LABEL_150;
                        }
                        else
                        {
                          *(_QWORD *)(a2 + 24) = v114 + 1;
                          v116 = *v114;
                          if ((unint64_t)(v114 + 1) >= v112)
                          {
LABEL_150:
                            *(_DWORD *)a2 = v113;
                            *(_DWORD *)(a2 + 4) = 1;
                          }
                        }
                        v117 = *v58 | (v116 << (56 - v111));
                      }
                      v134 = v115 - 8;
                      *v10 = v115 - 8;
                      v135 = v117 << 8;
                      *v58 = v117 << 8;
                      v136 = HIBYTE(v117);
                      *(_DWORD *)(v4 + 440) = v136;
                      if ((_DWORD)v136 == 255)
                        v110 = 1;
                      if (!v76 || (v110 & 1) != 0)
                      {
LABEL_200:
                        if ((read_frame_size((uint64_t)a1, a2, 0) & 0x80000000) != 0)
                          return 4294967274;
                        goto LABEL_271;
                      }
                      v137 = v3[265];
                      if (v134 >= v137)
                      {
                        v144 = v134 - v137;
                        v145 = v135 << v137;
                        *v58 = v145;
                        if (v134 - v137 >= v137)
                          goto LABEL_214;
                        goto LABEL_191;
                      }
                      v138 = 0;
                      v139 = *(_QWORD *)(a2 + 40);
                      v140 = *(_DWORD *)(a2 + 4);
                      v141 = *(unsigned __int8 **)(a2 + 24);
                      while (2)
                      {
                        v138 <<= 8;
                        *v10 = v115;
                        if (v140)
                        {
                          if ((unint64_t)v141 >= v139)
                          {
LABEL_189:
                            *(_DWORD *)a2 = v140;
                            v140 = 1;
                            *(_DWORD *)(a2 + 4) = 1;
                          }
                        }
                        else
                        {
                          *(_QWORD *)(a2 + 24) = v141 + 1;
                          v138 |= *v141++;
                          if ((unint64_t)v141 >= v139)
                            goto LABEL_189;
                        }
                        v142 = v115 + 8;
                        v143 = v115 >= v137;
                        v115 += 8;
                        if (!v143)
                          continue;
                        break;
                      }
                      v144 = v142 - 8 - v137;
                      v145 = ((v138 << (72 - v142)) | v135) << v137;
                      *v58 = v145;
                      if (v144 >= v137)
                      {
LABEL_214:
                        v156 = v144 - v137;
                        v157 = v145 << v137;
                        *v58 = v157;
                        if (v156 >= v137)
                          goto LABEL_223;
                        goto LABEL_215;
                      }
LABEL_191:
                      v146 = 0;
                      v147 = *(_QWORD *)(a2 + 40);
                      v148 = *(_DWORD *)(a2 + 4);
                      v149 = *(unsigned __int8 **)(a2 + 24);
                      while (2)
                      {
                        v146 <<= 8;
                        v144 += 8;
                        *v10 = v144;
                        if (v148)
                        {
                          if ((unint64_t)v149 >= v147)
                          {
LABEL_197:
                            *(_DWORD *)a2 = v148;
                            v148 = 1;
                            *(_DWORD *)(a2 + 4) = 1;
                          }
                        }
                        else
                        {
                          *(_QWORD *)(a2 + 24) = v149 + 1;
                          v146 |= *v149++;
                          if ((unint64_t)v149 >= v147)
                            goto LABEL_197;
                        }
                        if (v144 < v137)
                          continue;
                        break;
                      }
                      v162 = v146 << -(char)v144;
                      v156 = v144 - v137;
                      v157 = (v162 | v145) << v137;
                      *v58 = v157;
                      if (v156 >= v137)
                      {
LABEL_223:
                        v163 = v156 - v137;
                        v164 = v157 << v137;
                        *v58 = v164;
                        if (v163 >= v137)
                          goto LABEL_232;
                        goto LABEL_224;
                      }
LABEL_215:
                      v158 = 0;
                      v159 = *(_QWORD *)(a2 + 40);
                      v160 = *(_DWORD *)(a2 + 4);
                      v161 = *(unsigned __int8 **)(a2 + 24);
                      while (2)
                      {
                        v158 <<= 8;
                        v156 += 8;
                        *v10 = v156;
                        if (v160)
                        {
                          if ((unint64_t)v161 >= v159)
                          {
LABEL_221:
                            *(_DWORD *)a2 = v160;
                            v160 = 1;
                            *(_DWORD *)(a2 + 4) = 1;
                          }
                        }
                        else
                        {
                          *(_QWORD *)(a2 + 24) = v161 + 1;
                          v158 |= *v161++;
                          if ((unint64_t)v161 >= v159)
                            goto LABEL_221;
                        }
                        if (v156 < v137)
                          continue;
                        break;
                      }
                      v169 = v158 << -(char)v156;
                      v163 = v156 - v137;
                      v164 = (v169 | v157) << v137;
                      *v58 = v164;
                      if (v163 >= v137)
                      {
LABEL_232:
                        v170 = v163 - v137;
                        v171 = v164 << v137;
                        *v58 = v171;
                        if (v170 >= v137)
                          goto LABEL_241;
                        goto LABEL_233;
                      }
LABEL_224:
                      v165 = 0;
                      v166 = *(_QWORD *)(a2 + 40);
                      v167 = *(_DWORD *)(a2 + 4);
                      v168 = *(unsigned __int8 **)(a2 + 24);
                      while (2)
                      {
                        v165 <<= 8;
                        v163 += 8;
                        *v10 = v163;
                        if (v167)
                        {
                          if ((unint64_t)v168 >= v166)
                          {
LABEL_230:
                            *(_DWORD *)a2 = v167;
                            v167 = 1;
                            *(_DWORD *)(a2 + 4) = 1;
                          }
                        }
                        else
                        {
                          *(_QWORD *)(a2 + 24) = v168 + 1;
                          v165 |= *v168++;
                          if ((unint64_t)v168 >= v166)
                            goto LABEL_230;
                        }
                        if (v163 < v137)
                          continue;
                        break;
                      }
                      v176 = v165 << -(char)v163;
                      v170 = v163 - v137;
                      v171 = (v176 | v164) << v137;
                      *v58 = v171;
                      if (v170 >= v137)
                      {
LABEL_241:
                        v177 = v170 - v137;
                        v178 = v171 << v137;
                        *v58 = v178;
                        if (v177 >= v137)
                          goto LABEL_250;
                        goto LABEL_242;
                      }
LABEL_233:
                      v172 = 0;
                      v173 = *(_QWORD *)(a2 + 40);
                      v174 = *(_DWORD *)(a2 + 4);
                      v175 = *(unsigned __int8 **)(a2 + 24);
                      while (2)
                      {
                        v172 <<= 8;
                        v170 += 8;
                        *v10 = v170;
                        if (v174)
                        {
                          if ((unint64_t)v175 >= v173)
                          {
LABEL_239:
                            *(_DWORD *)a2 = v174;
                            v174 = 1;
                            *(_DWORD *)(a2 + 4) = 1;
                          }
                        }
                        else
                        {
                          *(_QWORD *)(a2 + 24) = v175 + 1;
                          v172 |= *v175++;
                          if ((unint64_t)v175 >= v173)
                            goto LABEL_239;
                        }
                        if (v170 < v137)
                          continue;
                        break;
                      }
                      v183 = v172 << -(char)v170;
                      v177 = v170 - v137;
                      v178 = (v183 | v171) << v137;
                      *v58 = v178;
                      if (v177 >= v137)
                      {
LABEL_250:
                        v184 = v177 - v137;
                        v185 = v178 << v137;
                        *v58 = v185;
                        if (v184 >= v137)
                          goto LABEL_259;
                        goto LABEL_251;
                      }
LABEL_242:
                      v179 = 0;
                      v180 = *(_QWORD *)(a2 + 40);
                      v181 = *(_DWORD *)(a2 + 4);
                      v182 = *(unsigned __int8 **)(a2 + 24);
                      while (2)
                      {
                        v179 <<= 8;
                        v177 += 8;
                        *v10 = v177;
                        if (v181)
                        {
                          if ((unint64_t)v182 >= v180)
                          {
LABEL_248:
                            *(_DWORD *)a2 = v181;
                            v181 = 1;
                            *(_DWORD *)(a2 + 4) = 1;
                          }
                        }
                        else
                        {
                          *(_QWORD *)(a2 + 24) = v182 + 1;
                          v179 |= *v182++;
                          if ((unint64_t)v182 >= v180)
                            goto LABEL_248;
                        }
                        if (v177 < v137)
                          continue;
                        break;
                      }
                      v190 = v179 << -(char)v177;
                      v184 = v177 - v137;
                      v185 = (v190 | v178) << v137;
                      *v58 = v185;
                      if (v184 >= v137)
                      {
LABEL_259:
                        v191 = v184 - v137;
                        v192 = v185 << v137;
                        *v58 = v192;
                        if (v191 >= v137)
                          goto LABEL_270;
LABEL_262:
                        v194 = 0;
                        v195 = *(_QWORD *)(a2 + 40);
                        v196 = *(_DWORD *)(a2 + 4);
                        v197 = *(unsigned __int8 **)(a2 + 24);
                        while (2)
                        {
                          v194 <<= 8;
                          v191 += 8;
                          *v10 = v191;
                          if (v196)
                          {
                            if ((unint64_t)v197 >= v195)
                            {
LABEL_268:
                              *(_DWORD *)a2 = v196;
                              v196 = 1;
                              *(_DWORD *)(a2 + 4) = 1;
                            }
                          }
                          else
                          {
                            *(_QWORD *)(a2 + 24) = v197 + 1;
                            v194 |= *v197++;
                            if ((unint64_t)v197 >= v195)
                              goto LABEL_268;
                          }
                          if (v191 >= v137)
                          {
                            v192 |= v194 << -(char)v191;
                            goto LABEL_270;
                          }
                          continue;
                        }
                      }
LABEL_251:
                      v186 = 0;
                      v187 = *(_QWORD *)(a2 + 40);
                      v188 = *(_DWORD *)(a2 + 4);
                      v189 = *(unsigned __int8 **)(a2 + 24);
                      while (2)
                      {
                        v186 <<= 8;
                        v184 += 8;
                        *v10 = v184;
                        if (v188)
                        {
                          if ((unint64_t)v189 >= v187)
                          {
LABEL_257:
                            *(_DWORD *)a2 = v188;
                            v188 = 1;
                            *(_DWORD *)(a2 + 4) = 1;
                          }
                        }
                        else
                        {
                          *(_QWORD *)(a2 + 24) = v189 + 1;
                          v186 |= *v189++;
                          if ((unint64_t)v189 >= v187)
                            goto LABEL_257;
                        }
                        if (v184 < v137)
                          continue;
                        break;
                      }
                      v193 = v186 << -(char)v184;
                      v191 = v184 - v137;
                      v192 = (v193 | v185) << v137;
                      *v58 = v192;
                      if (v191 < v137)
                        goto LABEL_262;
LABEL_270:
                      *v10 = v191 - v137;
                      *v58 = v192 << v137;
                      if ((read_frame_size((uint64_t)a1, a2, 0) & 0x80000000) != 0)
                        return 4294967274;
LABEL_271:
                      if (*(_DWORD *)(v4 + 292) && !*(_DWORD *)(v4 + 456))
                      {
                        v288 = *v10;
                        if (*v10)
                        {
                          v289 = *v58;
                        }
                        else
                        {
                          v290 = *(_QWORD *)(a2 + 40);
                          v291 = *(_DWORD *)(a2 + 4);
                          v292 = *(unsigned __int8 **)(a2 + 24);
                          *(_DWORD *)(a2 + 16) = 8;
                          if (v291)
                          {
                            v293 = 0;
                          }
                          else
                          {
                            *(_QWORD *)(a2 + 24) = v292 + 1;
                            v293 = *v292++;
                          }
                          if ((unint64_t)v292 >= v290)
                          {
                            *(_DWORD *)a2 = v291;
                            *(_DWORD *)(a2 + 4) = 1;
                          }
                          v289 = *v58 | (v293 << 56);
                          v288 = 8;
                        }
                        *v10 = v288 - 1;
                        *v58 = 2 * v289;
                        v198 = v289 >> 63;
                      }
                      else
                      {
                        LODWORD(v198) = 0;
                      }
                      v356 = 0;
                      *(_DWORD *)(v4 + 464) = v198;
LABEL_542:
                      *(_DWORD *)(v4 + 512) = v356;
                      if (v3[236])
                      {
                        v357 = *v10;
                        *(_DWORD *)(v4 + 516) = 0;
                        v992 = v3;
                        v986 = v109;
                        if (v357)
                          goto LABEL_544;
LABEL_547:
                        v359 = *(_QWORD *)(a2 + 40);
                        v360 = *(_DWORD *)(a2 + 4);
                        v361 = *(unsigned __int8 **)(a2 + 24);
                        *(_DWORD *)(a2 + 16) = 8;
                        if (v360)
                        {
                          v362 = 0;
                          if ((unint64_t)v361 >= v359)
                            goto LABEL_549;
                        }
                        else
                        {
                          *(_QWORD *)(a2 + 24) = v361 + 1;
                          v362 = *v361;
                          if ((unint64_t)(v361 + 1) >= v359)
                          {
LABEL_549:
                            *(_DWORD *)a2 = v360;
                            *(_DWORD *)(a2 + 4) = 1;
                          }
                        }
                        v358 = *v58 | (v362 << 56);
                        v357 = 8;
                      }
                      else
                      {
                        v357 = *v10;
                        if (*(_DWORD *)(v4 + 288))
                        {
                          *(_DWORD *)(v4 + 516) = 0;
                          v992 = v3;
                          v986 = v109;
                          if (!v357)
                            goto LABEL_547;
                        }
                        else
                        {
                          if (v357)
                          {
                            v408 = *v58;
                          }
                          else
                          {
                            v453 = *(_QWORD *)(a2 + 40);
                            v454 = *(_DWORD *)(a2 + 4);
                            v455 = *(unsigned __int8 **)(a2 + 24);
                            *(_DWORD *)(a2 + 16) = 8;
                            if (v454)
                            {
                              v456 = 0;
                            }
                            else
                            {
                              *(_QWORD *)(a2 + 24) = v455 + 1;
                              v456 = *v455++;
                            }
                            if ((unint64_t)v455 >= v453)
                            {
                              *(_DWORD *)a2 = v454;
                              *(_DWORD *)(a2 + 4) = 1;
                            }
                            v408 = *v58 | (v456 << 56);
                            v357 = 8;
                          }
                          --v357;
                          *v58 = 2 * v408;
                          *(_DWORD *)(v4 + 516) = v408 >= 0;
                          v992 = v3;
                          v986 = v109;
                          if (!v357)
                            goto LABEL_547;
                        }
LABEL_544:
                        v358 = *v58;
                      }
                      v363 = v357 - 1;
                      *v10 = v357 - 1;
                      v364 = 2 * v358;
                      *v58 = 2 * v358;
                      *(_DWORD *)(v4 + 520) = v358 >> 63;
                      v365 = v992[253];
                      v366 = (64 << v365) - 1;
                      v367 = v365 + 6;
                      v368 = (v366 + *(_DWORD *)(v4 + 236)) >> (v365 + 6);
                      v369 = *(_DWORD *)(v4 + 244);
                      v370 = 0x1000u >> (v365 + 6);
                      v371 = -1;
                      do
                        ++v371;
                      while (v370 << v371 < v368);
                      v989 = v6;
                      v372 = 2 * v367;
                      *(_DWORD *)(v4 + 528) = v371;
                      if (v368 >= 64)
                        v373 = 64;
                      else
                        v373 = v368;
                      v374 = -1;
                      do
                        ++v374;
                      while (1 << v374 < v373);
                      v375 = (v369 + v366) >> v367;
                      *(_DWORD *)(v4 + 532) = v374;
                      if (v375 >= 64)
                        v376 = 64;
                      else
                        v376 = (v369 + v366) >> v367;
                      v377 = -1;
                      do
                        ++v377;
                      while (1 << v377 < v376);
                      v378 = 0x900000u >> v372;
                      *(_DWORD *)(v4 + 548) = v377;
                      v379 = v368 * v375;
                      v380 = -1;
                      do
                        ++v380;
                      while ((int)(v378 << v380) < v379);
                      if (v380 <= (int)v371)
                        v381 = v371;
                      else
                        v381 = v380;
                      v991 = v58;
                      if ((v358 & 0x8000000000000000) == 0)
                      {
                        v382 = v381;
                        *(_DWORD *)(v4 + 540) = 0;
                        if (v368 < 1)
                        {
                          v383 = 0;
                          v385 = 0;
                        }
                        else
                        {
                          v383 = 0;
                          v384 = 0;
                          v385 = 0;
                          do
                          {
                            if (v368 - v384 >= v370)
                              v386 = v370;
                            else
                              v386 = v368 - v384;
                            if (v386 < 2)
                            {
                              v387 = 1;
                            }
                            else
                            {
                              v387 = dav1d_get_uniform(a2, v386) + 1;
                              v383 = *(_DWORD *)(v4 + 540);
                            }
                            v388 = v383;
                            *(_WORD *)(v4 + 2 * v383 + 560) = v384;
                            if (v385 <= v387)
                              v385 = v387;
                            *(_DWORD *)(v4 + 540) = ++v383;
                            if (v388 > 62)
                              break;
                            v384 += v387;
                          }
                          while (v384 < v368);
                        }
                        v396 = -1;
                        do
                          ++v396;
                        while (1 << v396 < v383);
                        *(_DWORD *)(v4 + 536) = v396;
                        if (v382)
                          v397 = v382 + 1;
                        else
                          v397 = 0;
                        v398 = (v379 >> v397) / v385;
                        if (v398 <= 1)
                          v399 = 1;
                        else
                          v399 = v398;
                        *(_DWORD *)(v4 + 556) = 0;
                        v389 = v986;
                        LODWORD(v400) = 0;
                        if (v375 < 1)
                        {
                          v390 = v992;
                        }
                        else
                        {
                          v401 = 0;
                          v390 = v992;
                          do
                          {
                            if (v375 - v401 >= v399)
                              v402 = v399;
                            else
                              v402 = v375 - v401;
                            if (v402 < 2)
                            {
                              v403 = 1;
                            }
                            else
                            {
                              v403 = dav1d_get_uniform(a2, v402) + 1;
                              LODWORD(v400) = *(_DWORD *)(v4 + 556);
                            }
                            v404 = v400;
                            *(_WORD *)(v4 + 2 * (int)v400 + 690) = v401;
                            LODWORD(v400) = v400 + 1;
                            *(_DWORD *)(v4 + 556) = v400;
                            if (v404 > 62)
                              break;
                            v401 += v403;
                          }
                          while (v401 < v375);
                        }
                        v405 = -1;
                        do
                          ++v405;
                        while (1 << v405 < (int)v400);
                        *(_DWORD *)(v4 + 552) = v405;
                        LODWORD(v406) = *(_DWORD *)(v4 + 540);
                        v371 = *(_DWORD *)(v4 + 536);
                        v58 = v991;
LABEL_645:
                        *(_WORD *)(v4 + 520 + 2 * (int)v406 + 40) = v368;
                        *(_WORD *)(v4 + 520 + 2 * (int)v400 + 170) = v375;
                        if (v371 | v405)
                        {
                          v414 = v371 + v405;
                          v415 = *v10;
                          if (*v10 >= v414)
                          {
                            v434 = *v58;
                            goto LABEL_667;
                          }
                          v416 = 0;
                          v417 = *(_QWORD *)(a2 + 40);
                          v418 = *(_DWORD *)(a2 + 4);
                          v419 = *(unsigned __int8 **)(a2 + 24);
                          while (2)
                          {
                            v416 <<= 8;
                            v415 += 8;
                            *v10 = v415;
                            if (v418)
                            {
                              if ((unint64_t)v419 >= v417)
                              {
LABEL_653:
                                *(_DWORD *)a2 = v418;
                                v418 = 1;
                                *(_DWORD *)(a2 + 4) = 1;
                              }
                            }
                            else
                            {
                              *(_QWORD *)(a2 + 24) = v419 + 1;
                              v416 |= *v419++;
                              if ((unint64_t)v419 >= v417)
                                goto LABEL_653;
                            }
                            if (v415 < v414)
                              continue;
                            break;
                          }
                          v434 = *v58 | (v416 << -(char)v415);
LABEL_667:
                          v435 = v415 - v414;
                          *v10 = v415 - v414;
                          v436 = v434 << v414;
                          *v58 = v434 << v414;
                          v437 = v434 >> -(char)v414;
                          *(_DWORD *)(v4 + 820) = v437;
                          if ((int)v400 * (int)v406 <= (int)v437)
                            return 4294967274;
                          if (v435 > 1)
                          {
                            v441 = v435;
                          }
                          else
                          {
                            v438 = *(_QWORD *)(a2 + 40);
                            v439 = *(_DWORD *)(a2 + 4);
                            v440 = *(unsigned __int8 **)(a2 + 24);
                            v441 = v435 + 8;
                            *(_DWORD *)(a2 + 16) = v435 + 8;
                            if (v439)
                            {
                              v442 = 0;
                            }
                            else
                            {
                              *(_QWORD *)(a2 + 24) = v440 + 1;
                              v442 = *v440++;
                            }
                            if ((unint64_t)v440 >= v438)
                            {
                              *(_DWORD *)a2 = v439;
                              *(_DWORD *)(a2 + 4) = 1;
                            }
                            v436 |= v442 << (56 - v435);
                          }
                          v420 = v441 - 2;
                          *v58 = 4 * v436;
                          *(_DWORD *)(v4 + 524) = (v436 >> 62) + 1;
                          if (v420 >= 8)
                          {
LABEL_679:
                            v443 = *v58;
                            v427 = *v58 << 8;
                            *v58 = v427;
                            v428 = HIBYTE(v443);
                            *(_DWORD *)(v4 + 824) = HIBYTE(v443);
                            v429 = v420 - 8;
                            if (v420 == 8)
                            {
LABEL_680:
                              v444 = *(_QWORD *)(a2 + 40);
                              v445 = *(_DWORD *)(a2 + 4);
                              v446 = *(unsigned __int8 **)(a2 + 24);
                              *(_DWORD *)(a2 + 16) = v420;
                              if (v445)
                              {
                                v447 = 0;
                                if ((unint64_t)v446 >= v444)
                                  goto LABEL_682;
                              }
                              else
                              {
                                *(_QWORD *)(a2 + 24) = v446 + 1;
                                v447 = *v446;
                                if ((unint64_t)(v446 + 1) >= v444)
                                {
LABEL_682:
                                  *(_DWORD *)a2 = v445;
                                  *(_DWORD *)(a2 + 4) = 1;
                                }
                              }
                              v448 = (v447 << -(char)v420) | v427;
                              v429 = 8;
                              v430 = 7;
                              v431 = 2 * v448;
                              *v58 = 2 * v448;
                              if (v448 < 0)
                              {
LABEL_684:
                                if (v430 <= 6)
                                {
                                  v449 = *(_QWORD *)(a2 + 40);
                                  v450 = *(_DWORD *)(a2 + 4);
                                  v451 = *(unsigned __int8 **)(a2 + 24);
                                  v430 = v429 + 7;
                                  *(_DWORD *)(a2 + 16) = v429 + 7;
                                  if (v450)
                                  {
                                    v452 = 0;
                                  }
                                  else
                                  {
                                    *(_QWORD *)(a2 + 24) = v451 + 1;
                                    v452 = *v451++;
                                  }
                                  if ((unint64_t)v451 >= v449)
                                  {
                                    *(_DWORD *)a2 = v450;
                                    *(_DWORD *)(a2 + 4) = 1;
                                  }
                                  v431 |= v452 << (57 - v429);
                                }
                                v430 -= 7;
                                v457 = v431 >> 57;
                                v431 <<= 7;
                                *v58 = v431;
                                *(_DWORD *)(v4 + 828) = v457;
                                if (!v390[271])
                                {
LABEL_696:
                                  LODWORD(v458) = v390[273];
                                  if ((_DWORD)v458)
                                  {
                                    if (!v430)
                                    {
                                      v459 = *(_QWORD *)(a2 + 40);
                                      v460 = *(_DWORD *)(a2 + 4);
                                      v461 = *(unsigned __int8 **)(a2 + 24);
                                      *(_DWORD *)(a2 + 16) = 8;
                                      if (v460)
                                      {
                                        v462 = 0;
                                      }
                                      else
                                      {
                                        *(_QWORD *)(a2 + 24) = v461 + 1;
                                        v462 = *v461++;
                                      }
                                      if ((unint64_t)v461 >= v459)
                                      {
                                        *(_DWORD *)a2 = v460;
                                        *(_DWORD *)(a2 + 4) = 1;
                                      }
                                      v431 |= v462 << 56;
                                      v430 = 8;
                                    }
                                    *v10 = --v430;
                                    v458 = (unint64_t)v431 >> 63;
                                    v431 *= 2;
                                    *v58 = v431;
                                  }
                                  if (v430)
                                  {
                                    v497 = v430 - 1;
                                    v498 = 2 * v431;
                                    *v58 = 2 * v431;
                                    if ((v431 & 0x8000000000000000) == 0)
                                    {
                                      LODWORD(v499) = 0;
                                      *(_DWORD *)(v4 + 832) = 0;
                                      if (v430 == 1)
                                      {
LABEL_783:
                                        v510 = *(_QWORD *)(a2 + 40);
                                        v511 = *(_DWORD *)(a2 + 4);
                                        v512 = *(unsigned __int8 **)(a2 + 24);
                                        *(_DWORD *)(a2 + 16) = 8;
                                        if (v511)
                                        {
                                          v513 = 0;
                                        }
                                        else
                                        {
                                          *(_QWORD *)(a2 + 24) = v512 + 1;
                                          v513 = *v512++;
                                        }
                                        if ((unint64_t)v512 >= v510)
                                        {
                                          *(_DWORD *)a2 = v511;
                                          *(_DWORD *)(a2 + 4) = 1;
                                        }
                                        v518 = v498 | (v513 << 56);
                                        v431 = 2 * v518;
                                        *v58 = 2 * v518;
                                        if ((v518 & 0x8000000000000000) == 0)
                                        {
                                          *(_DWORD *)(v4 + 836) = 0;
                                          v430 = 7;
                                          if (!(_DWORD)v458)
                                          {
                                            LODWORD(v509) = 0;
                                            goto LABEL_803;
                                          }
LABEL_801:
                                          v519 = v430 - 1;
                                          v520 = 2 * v431;
                                          *v58 = 2 * v431;
                                          if ((v431 & 0x8000000000000000) == 0)
                                          {
                                            LODWORD(v521) = 0;
                                            goto LABEL_825;
                                          }
                                          if (v430 <= 7)
                                          {
                                            v526 = *(_QWORD *)(a2 + 40);
                                            v527 = *(_DWORD *)(a2 + 4);
                                            v528 = *(unsigned __int8 **)(a2 + 24);
                                            v519 = v430 + 7;
                                            *(_DWORD *)(a2 + 16) = v430 + 7;
                                            if (v527)
                                            {
                                              v529 = 0;
                                            }
                                            else
                                            {
                                              *(_QWORD *)(a2 + 24) = v528 + 1;
                                              v529 = *v528++;
                                            }
                                            if ((unint64_t)v528 >= v526)
                                            {
                                              *(_DWORD *)a2 = v527;
                                              *(_DWORD *)(a2 + 4) = 1;
                                            }
                                            v520 |= v529 << (57 - v430);
                                          }
LABEL_824:
                                          v519 -= 7;
                                          v521 = v520 >> 57;
                                          v520 <<= 7;
                                          *v58 = v520;
LABEL_825:
                                          *(_DWORD *)(v4 + 840) = v521;
                                          if (v519)
                                            goto LABEL_826;
                                          v536 = *(_QWORD *)(a2 + 40);
                                          v537 = *(_DWORD *)(a2 + 4);
                                          v538 = *(unsigned __int8 **)(a2 + 24);
                                          *(_DWORD *)(a2 + 16) = 8;
                                          if (v537)
                                          {
                                            v539 = 0;
                                          }
                                          else
                                          {
                                            *(_QWORD *)(a2 + 24) = v538 + 1;
                                            v539 = *v538++;
                                          }
                                          if ((unint64_t)v538 >= v536)
                                          {
                                            *(_DWORD *)a2 = v537;
                                            *(_DWORD *)(a2 + 4) = 1;
                                          }
                                          v540 = v520 | (v539 << 56);
                                          v431 = 2 * v540;
                                          *v58 = 2 * v540;
                                          v430 = 7;
                                          if ((v540 & 0x8000000000000000) == 0)
                                            goto LABEL_836;
LABEL_842:
                                          v430 -= 7;
                                          v541 = v431 >> 57;
                                          v431 <<= 7;
                                          *v58 = v431;
                                          *(_DWORD *)(v4 + 844) = v541;
                                          if (!v430)
                                            goto LABEL_843;
LABEL_662:
                                          v432 = v430 - 1;
                                          v433 = 2 * v431;
                                          *v58 = 2 * v431;
                                          *(_DWORD *)(v4 + 848) = (unint64_t)v431 >> 63;
                                          if ((v431 & 0x8000000000000000) == 0)
                                          {
LABEL_663:
                                            if (!v432)
                                              goto LABEL_873;
LABEL_877:
                                            v566 = v432 - 1;
                                            *v10 = v432 - 1;
                                            v567 = 2 * v433;
                                            *v58 = 2 * v433;
                                            *(_DWORD *)(v4 + 864) = v433 >> 63;
                                            if ((v433 & 0x8000000000000000) == 0)
                                            {
                                              *(_QWORD *)(v4 + 1136) = 0;
                                              *(_OWORD *)(v4 + 1120) = 0u;
                                              *(_OWORD *)(v4 + 1104) = 0u;
                                              *(_OWORD *)(v4 + 1088) = 0u;
                                              *(_OWORD *)(v4 + 1072) = 0u;
                                              *(_OWORD *)(v4 + 1056) = 0u;
                                              *(_OWORD *)(v4 + 1040) = 0u;
                                              *(_OWORD *)(v4 + 1008) = 0u;
                                              *(_OWORD *)(v4 + 1024) = 0u;
                                              *(_OWORD *)(v4 + 976) = 0u;
                                              *(_OWORD *)(v4 + 992) = 0u;
                                              *(_OWORD *)(v4 + 944) = 0u;
                                              *(_OWORD *)(v4 + 960) = 0u;
                                              *(_OWORD *)(v4 + 912) = 0u;
                                              *(_OWORD *)(v4 + 928) = 0u;
                                              *(_OWORD *)(v4 + 880) = 0u;
                                              *(_OWORD *)(v4 + 896) = 0u;
                                              *(_DWORD *)(v4 + 900) = -1;
                                              *(_DWORD *)(v4 + 932) = -1;
                                              *(_DWORD *)(v4 + 964) = -1;
                                              *(_DWORD *)(v4 + 996) = -1;
                                              *(_DWORD *)(v4 + 1028) = -1;
                                              *(_DWORD *)(v4 + 1060) = -1;
                                              *(_DWORD *)(v4 + 1092) = -1;
                                              *(_DWORD *)(v4 + 1124) = -1;
                                              goto LABEL_1035;
                                            }
                                            v568 = *(int *)(v4 + 304);
                                            if ((_DWORD)v568 == 7)
                                            {
                                              *(_DWORD *)(v4 + 868) = 1;
                                              *(_QWORD *)(v4 + 872) = 0x100000000;
                                              goto LABEL_910;
                                            }
                                            if (v432 == 1)
                                            {
                                              v569 = *(_QWORD *)(a2 + 40);
                                              v570 = *(_DWORD *)(a2 + 4);
                                              v571 = *(unsigned __int8 **)(a2 + 24);
                                              *(_DWORD *)(a2 + 16) = 8;
                                              if (v570)
                                              {
                                                v572 = 0;
                                              }
                                              else
                                              {
                                                *(_QWORD *)(a2 + 24) = v571 + 1;
                                                v572 = *v571++;
                                              }
                                              if ((unint64_t)v571 >= v569)
                                              {
                                                *(_DWORD *)a2 = v570;
                                                *(_DWORD *)(a2 + 4) = 1;
                                              }
                                              v567 |= v572 << (57 - v432);
                                              v566 = 8;
                                            }
                                            v573 = v566 - 1;
                                            v574 = 2 * v567;
                                            *v58 = 2 * v567;
                                            *(_DWORD *)(v4 + 868) = v567 >> 63;
                                            if ((v567 & 0x8000000000000000) != 0)
                                            {
                                              if (v566 == 1)
                                              {
                                                v576 = *(_QWORD *)(a2 + 40);
                                                v577 = *(_DWORD *)(a2 + 4);
                                                v578 = *(unsigned __int8 **)(a2 + 24);
                                                *(_DWORD *)(a2 + 16) = 8;
                                                if (v577)
                                                {
                                                  v579 = 0;
                                                }
                                                else
                                                {
                                                  *(_QWORD *)(a2 + 24) = v578 + 1;
                                                  v579 = *v578++;
                                                }
                                                if ((unint64_t)v578 >= v576)
                                                {
                                                  *(_DWORD *)a2 = v577;
                                                  *(_DWORD *)(a2 + 4) = 1;
                                                }
                                                v574 |= v579 << (57 - v566);
                                                v573 = 8;
                                              }
                                              --v573;
                                              v575 = v574 >> 63;
                                              v574 *= 2;
                                              *v58 = v574;
                                            }
                                            else
                                            {
                                              LODWORD(v575) = 0;
                                            }
                                            *(_DWORD *)(v4 + 872) = v575;
                                            if (!v573)
                                            {
                                              v580 = *(_QWORD *)(a2 + 40);
                                              v581 = *(_DWORD *)(a2 + 4);
                                              v582 = *(unsigned __int8 **)(a2 + 24);
                                              *(_DWORD *)(a2 + 16) = 8;
                                              if (v581)
                                              {
                                                v583 = 0;
                                              }
                                              else
                                              {
                                                *(_QWORD *)(a2 + 24) = v582 + 1;
                                                v583 = *v582++;
                                              }
                                              if ((unint64_t)v582 >= v580)
                                              {
                                                *(_DWORD *)a2 = v581;
                                                *(_DWORD *)(a2 + 4) = 1;
                                              }
                                              v574 |= v583 << 56;
                                              v573 = 8;
                                            }
                                            v566 = v573 - 1;
                                            *v10 = v573 - 1;
                                            v567 = 2 * v574;
                                            *v58 = 2 * v574;
                                            *(_DWORD *)(v4 + 876) = v574 >> 63;
                                            if ((v574 & 0x8000000000000000) == 0)
                                            {
                                              v584 = a1[41 * *(int *)(v4 + 4 * v568 + 472) + 6235];
                                              if (v584)
                                              {
                                                memcpy((void *)(v4 + 880), (const void *)(v584 + 880), 0x108uLL);
                                                goto LABEL_1035;
                                              }
                                              return 4294967274;
                                            }
LABEL_910:
                                            v585 = 0;
                                            v586 = (_DWORD *)(v4 + 908);
                                            *(_QWORD *)(v4 + 1136) = 0xFFFFFFFF00000000;
                                            while (2)
                                            {
                                              if (v566)
                                              {
                                                v587 = v566 - 1;
                                                *v10 = v566 - 1;
                                                v588 = 2 * v567;
                                                *v58 = 2 * v567;
                                                if ((v567 & 0x8000000000000000) != 0)
                                                {
                                                  v589 = v566 - 1;
                                                  if (v566 <= 9)
                                                  {
LABEL_927:
                                                    v603 = *(_QWORD *)(a2 + 40);
                                                    v604 = *(_DWORD *)(a2 + 4);
                                                    v605 = *(unsigned __int8 **)(a2 + 24);
                                                    v589 = v587 + 8;
                                                    *(_DWORD *)(a2 + 16) = v587 + 8;
                                                    if (v604)
                                                    {
                                                      v606 = 0;
                                                      if ((unint64_t)v605 >= v603)
                                                        goto LABEL_929;
                                                    }
                                                    else
                                                    {
                                                      *(_QWORD *)(a2 + 24) = v605 + 1;
                                                      v606 = *v605++;
                                                      if ((unint64_t)v605 >= v603)
                                                      {
LABEL_929:
                                                        *(_DWORD *)a2 = v604;
                                                        v604 = 1;
                                                        *(_DWORD *)(a2 + 4) = 1;
                                                      }
                                                    }
                                                    if (!v587)
                                                    {
                                                      v606 <<= 8;
                                                      *v10 = 16;
                                                      if (!v604)
                                                      {
                                                        *(_QWORD *)(a2 + 24) = v605 + 1;
                                                        v606 |= *v605++;
                                                      }
                                                      if ((unint64_t)v605 >= v603)
                                                      {
                                                        *(_DWORD *)a2 = v604;
                                                        *(_DWORD *)(a2 + 4) = 1;
                                                      }
                                                      v589 = 16;
                                                      LOBYTE(v587) = 8;
                                                    }
                                                    v588 |= v606 << (56 - v587);
                                                  }
                                                  *v10 = v589 - 9;
                                                  *v58 = v588 << 9;
                                                  *(_DWORD *)(v4 + 1140) = v585;
                                                  *(v586 - 7) = v588 >> 55;
                                                  v595 = *v10;
                                                  if (!*v10)
                                                  {
LABEL_938:
                                                    v607 = *(_QWORD *)(a2 + 40);
                                                    v608 = *(_DWORD *)(a2 + 4);
                                                    v609 = *(unsigned __int8 **)(a2 + 24);
                                                    *(_DWORD *)(a2 + 16) = 8;
                                                    if (v608)
                                                    {
                                                      v610 = 0;
                                                      if ((unint64_t)v609 >= v607)
                                                        goto LABEL_940;
                                                    }
                                                    else
                                                    {
                                                      *(_QWORD *)(a2 + 24) = v609 + 1;
                                                      v610 = *v609;
                                                      if ((unint64_t)(v609 + 1) >= v607)
                                                      {
LABEL_940:
                                                        *(_DWORD *)a2 = v608;
                                                        *(_DWORD *)(a2 + 4) = 1;
                                                      }
                                                    }
                                                    v611 = *v58 | (v610 << 56);
                                                    v597 = 7;
                                                    *v10 = 7;
                                                    v598 = 2 * v611;
                                                    *v58 = 2 * v611;
                                                    if ((v611 & 0x8000000000000000) == 0)
                                                    {
LABEL_942:
                                                      *(v586 - 6) = 0;
                                                      v612 = *v10;
                                                      if (*v10)
                                                        goto LABEL_943;
LABEL_950:
                                                      v620 = *(_QWORD *)(a2 + 40);
                                                      v621 = *(_DWORD *)(a2 + 4);
                                                      v622 = *(unsigned __int8 **)(a2 + 24);
                                                      *(_DWORD *)(a2 + 16) = 8;
                                                      if (v621)
                                                      {
                                                        v623 = 0;
                                                        if ((unint64_t)v622 >= v620)
                                                          goto LABEL_952;
                                                      }
                                                      else
                                                      {
                                                        *(_QWORD *)(a2 + 24) = v622 + 1;
                                                        v623 = *v622;
                                                        if ((unint64_t)(v622 + 1) >= v620)
                                                        {
LABEL_952:
                                                          *(_DWORD *)a2 = v621;
                                                          *(_DWORD *)(a2 + 4) = 1;
                                                        }
                                                      }
                                                      v624 = *v58 | (v623 << 56);
                                                      v614 = 7;
                                                      *v10 = 7;
                                                      v615 = 2 * v624;
                                                      *v58 = 2 * v624;
                                                      if ((v624 & 0x8000000000000000) == 0)
                                                      {
LABEL_954:
                                                        *(v586 - 5) = 0;
                                                        v625 = *v10;
                                                        if (*v10)
                                                          goto LABEL_955;
LABEL_962:
                                                        v633 = *(_QWORD *)(a2 + 40);
                                                        v634 = *(_DWORD *)(a2 + 4);
                                                        v635 = *(unsigned __int8 **)(a2 + 24);
                                                        *(_DWORD *)(a2 + 16) = 8;
                                                        if (v634)
                                                        {
                                                          v636 = 0;
                                                          if ((unint64_t)v635 >= v633)
                                                            goto LABEL_964;
                                                        }
                                                        else
                                                        {
                                                          *(_QWORD *)(a2 + 24) = v635 + 1;
                                                          v636 = *v635;
                                                          if ((unint64_t)(v635 + 1) >= v633)
                                                          {
LABEL_964:
                                                            *(_DWORD *)a2 = v634;
                                                            *(_DWORD *)(a2 + 4) = 1;
                                                          }
                                                        }
                                                        v637 = *v58 | (v636 << 56);
                                                        v627 = 7;
                                                        *v10 = 7;
                                                        v628 = 2 * v637;
                                                        *v58 = 2 * v637;
                                                        if ((v637 & 0x8000000000000000) == 0)
                                                        {
LABEL_966:
                                                          *(v586 - 4) = 0;
                                                          v638 = *v10;
                                                          if (*v10)
                                                            goto LABEL_967;
LABEL_974:
                                                          v646 = *(_QWORD *)(a2 + 40);
                                                          v647 = *(_DWORD *)(a2 + 4);
                                                          v648 = *(unsigned __int8 **)(a2 + 24);
                                                          *(_DWORD *)(a2 + 16) = 8;
                                                          if (v647)
                                                          {
                                                            v649 = 0;
                                                            if ((unint64_t)v648 >= v646)
                                                              goto LABEL_976;
                                                          }
                                                          else
                                                          {
                                                            *(_QWORD *)(a2 + 24) = v648 + 1;
                                                            v649 = *v648;
                                                            if ((unint64_t)(v648 + 1) >= v646)
                                                            {
LABEL_976:
                                                              *(_DWORD *)a2 = v647;
                                                              *(_DWORD *)(a2 + 4) = 1;
                                                            }
                                                          }
                                                          v650 = *v58 | (v649 << 56);
                                                          v640 = 7;
                                                          *v10 = 7;
                                                          v641 = 2 * v650;
                                                          *v58 = 2 * v650;
                                                          if ((v650 & 0x8000000000000000) == 0)
                                                          {
LABEL_978:
                                                            *(v586 - 3) = 0;
                                                            v651 = *v10;
                                                            if (*v10)
                                                              goto LABEL_979;
LABEL_986:
                                                            v659 = *(_QWORD *)(a2 + 40);
                                                            v660 = *(_DWORD *)(a2 + 4);
                                                            v661 = *(unsigned __int8 **)(a2 + 24);
                                                            *(_DWORD *)(a2 + 16) = 8;
                                                            if (v660)
                                                            {
                                                              v662 = 0;
                                                              if ((unint64_t)v661 >= v659)
                                                                goto LABEL_988;
                                                            }
                                                            else
                                                            {
                                                              *(_QWORD *)(a2 + 24) = v661 + 1;
                                                              v662 = *v661;
                                                              if ((unint64_t)(v661 + 1) >= v659)
                                                              {
LABEL_988:
                                                                *(_DWORD *)a2 = v660;
                                                                *(_DWORD *)(a2 + 4) = 1;
                                                              }
                                                            }
                                                            v663 = *v58 | (v662 << 56);
                                                            v653 = 7;
                                                            *v10 = 7;
                                                            v654 = 2 * v663;
                                                            *v58 = 2 * v663;
                                                            if ((v663 & 0x8000000000000000) == 0)
                                                            {
LABEL_990:
                                                              *(v586 - 2) = -1;
                                                              v664 = *v10;
                                                              if (*v10)
                                                                goto LABEL_991;
LABEL_995:
                                                              v668 = *(_QWORD *)(a2 + 40);
                                                              v669 = *(_DWORD *)(a2 + 4);
                                                              v670 = *(unsigned __int8 **)(a2 + 24);
                                                              *(_DWORD *)(a2 + 16) = 8;
                                                              if (v669)
                                                              {
                                                                v671 = 0;
                                                                if ((unint64_t)v670 >= v668)
                                                                  goto LABEL_997;
                                                              }
                                                              else
                                                              {
                                                                *(_QWORD *)(a2 + 24) = v670 + 1;
                                                                v671 = *v670;
                                                                if ((unint64_t)(v670 + 1) >= v668)
                                                                {
LABEL_997:
                                                                  *(_DWORD *)a2 = v669;
                                                                  *(_DWORD *)(a2 + 4) = 1;
                                                                }
                                                              }
                                                              v672 = *v58 | (v671 << 56);
                                                              v664 = 8;
                                                              v666 = 2 * v672;
                                                              *v58 = 2 * v672;
                                                              *(v586 - 1) = v672 >> 63;
                                                              if ((v672 & 0x8000000000000000) != 0)
                                                              {
LABEL_999:
                                                                *(_DWORD *)(v4 + 1140) = v585;
                                                                *(_DWORD *)(v4 + 1136) = 1;
                                                                v667 = v664 - 1;
                                                                if (v664 == 1)
                                                                  goto LABEL_1000;
LABEL_1004:
                                                                v566 = v667 - 1;
                                                                *v10 = v566;
                                                                v567 = 2 * v666;
                                                                *v58 = 2 * v666;
                                                                *v586 = v666 >> 63;
                                                                if ((v666 & 0x8000000000000000) != 0)
                                                                {
                                                                  *(_DWORD *)(v4 + 1140) = v585;
                                                                  *(_DWORD *)(v4 + 1136) = 1;
                                                                }
                                                                ++v585;
                                                                v586 += 8;
                                                                if (v585 != 8)
                                                                  continue;
                                                                LODWORD(v428) = *(_DWORD *)(v4 + 824);
LABEL_1035:
                                                                if (!(_DWORD)v428)
                                                                {
                                                                  *(_QWORD *)(v4 + 1208) = 0;
                                                                  goto LABEL_1055;
                                                                }
                                                                v677 = *v10;
                                                                if (*v10)
                                                                {
                                                                  v678 = *v58;
                                                                }
                                                                else
                                                                {
                                                                  v679 = *(_QWORD *)(a2 + 40);
                                                                  v680 = *(_DWORD *)(a2 + 4);
                                                                  v681 = *(unsigned __int8 **)(a2 + 24);
                                                                  *(_DWORD *)(a2 + 16) = 8;
                                                                  if (v680)
                                                                  {
                                                                    v682 = 0;
                                                                  }
                                                                  else
                                                                  {
                                                                    *(_QWORD *)(a2 + 24) = v681 + 1;
                                                                    v682 = *v681++;
                                                                  }
                                                                  if ((unint64_t)v681 >= v679)
                                                                  {
                                                                    *(_DWORD *)a2 = v680;
                                                                    *(_DWORD *)(a2 + 4) = 1;
                                                                  }
                                                                  v678 = *v58 | (v682 << 56);
                                                                  v677 = 8;
                                                                }
                                                                v683 = v677 - 1;
                                                                *v10 = v677 - 1;
                                                                v684 = 2 * v678;
                                                                *v58 = 2 * v678;
                                                                *(_DWORD *)(v4 + 1208) = v678 >> 63;
                                                                if ((v678 & 0x8000000000000000) == 0)
                                                                {
                                                                  *(_DWORD *)(v4 + 1212) = 0;
                                                                  goto LABEL_1055;
                                                                }
                                                                if (v677 <= 2)
                                                                {
                                                                  v685 = *(_QWORD *)(a2 + 40);
                                                                  v686 = *(_DWORD *)(a2 + 4);
                                                                  v687 = *(unsigned __int8 **)(a2 + 24);
                                                                  v683 = v677 + 7;
                                                                  *(_DWORD *)(a2 + 16) = v677 + 7;
                                                                  if (v686)
                                                                  {
                                                                    v688 = 0;
                                                                  }
                                                                  else
                                                                  {
                                                                    *(_QWORD *)(a2 + 24) = v687 + 1;
                                                                    v688 = *v687++;
                                                                  }
                                                                  if ((unint64_t)v687 >= v685)
                                                                  {
                                                                    *(_DWORD *)a2 = v686;
                                                                    *(_DWORD *)(a2 + 4) = 1;
                                                                  }
                                                                  v684 |= v688 << (57 - v677);
                                                                }
                                                                *v10 = v683 - 2;
                                                                *v58 = 4 * v684;
                                                                *(_DWORD *)(v4 + 1212) = v684 >> 62;
                                                                if (*(_DWORD *)(v4 + 464))
                                                                {
LABEL_1055:
                                                                  *(_DWORD *)(v4 + 1216) = 0;
                                                                  goto LABEL_1056;
                                                                }
                                                                bits = dav1d_get_bits(a2, 1u);
                                                                *(_DWORD *)(v4 + 1216) = bits != 0;
                                                                if (bits)
                                                                {
                                                                  v717 = dav1d_get_bits(a2, 2u);
                                                                  v718 = *(_DWORD *)(v4 + 1216);
                                                                  *(_DWORD *)(v4 + 1220) = v717;
                                                                  if (v718)
                                                                    v689 = dav1d_get_bits(a2, 1u);
                                                                  else
                                                                    v689 = 0;
                                                                }
                                                                else
                                                                {
LABEL_1056:
                                                                  v689 = 0;
                                                                  *(_DWORD *)(v4 + 1220) = 0;
                                                                }
                                                                *(_DWORD *)(v4 + 1224) = v689;
                                                                if (*(_DWORD *)(v4 + 828)
                                                                  || *(_DWORD *)(v4 + 832)
                                                                  || *(_DWORD *)(v4 + 836)
                                                                  || *(_DWORD *)(v4 + 840))
                                                                {
                                                                  v690 = 0;
                                                                  if (*(_DWORD *)(v4 + 864))
                                                                    goto LABEL_1062;
LABEL_1094:
                                                                  v711 = *(_DWORD *)(v4 + 824);
                                                                  if (v711)
                                                                    v712 = 0;
                                                                  else
                                                                    v712 = v690;
                                                                  *(int32x4_t *)((char *)v389 + 700) = vdupq_n_s32(v711);
                                                                  *(int32x4_t *)((char *)v389 + 668) = vdupq_n_s32(v712);
                                                                  *(_DWORD *)(v4 + 1192) = v711;
                                                                  *(_DWORD *)(v4 + 1160) = v712;
                                                                  *(_DWORD *)(v4 + 1196) = v711;
                                                                  *(_DWORD *)(v4 + 1164) = v712;
                                                                  v713 = v712;
                                                                  v715 = v711;
                                                                }
                                                                else
                                                                {
                                                                  v690 = *(_DWORD *)(v4 + 844) == 0;
                                                                  if (!*(_DWORD *)(v4 + 864))
                                                                    goto LABEL_1094;
LABEL_1062:
                                                                  v691.i32[0] = *(_DWORD *)(v4 + 880);
                                                                  v691.i32[1] = *(_DWORD *)(v4 + 912);
                                                                  v692 = *(_DWORD *)(v4 + 824);
                                                                  v693 = vdupq_n_s32(v692);
                                                                  v694 = vmin_s32(vadd_s32(v691, *(int32x2_t *)v693.i8), (int32x2_t)0xFF000000FFLL);
                                                                  v695 = vmax_s32(v694, 0);
                                                                  v696 = v694.i32[0] < 1 && v690;
                                                                  *(_DWORD *)(v4 + 1144) = v696;
                                                                  *(_DWORD *)(v4 + 1228) = v696;
                                                                  v697 = v694.i32[1] < 1 && v690;
                                                                  v698.i32[0] = *(_DWORD *)(v4 + 944);
                                                                  v698.i32[1] = *(_DWORD *)(v4 + 976);
                                                                  v698.i32[2] = *(_DWORD *)(v4 + 1008);
                                                                  v698.i32[3] = *(_DWORD *)(v4 + 1040);
                                                                  v699 = vaddq_s32(v698, v693);
                                                                  v700.i64[0] = 0xFF000000FFLL;
                                                                  v700.i64[1] = 0xFF000000FFLL;
                                                                  v701 = vminq_s32(v699, v700);
                                                                  v702 = vmaxq_s32(v701, (int32x4_t)0);
                                                                  v703 = v701.i32[0] < 1 && v690;
                                                                  *(_DWORD *)(v4 + 1152) = v703;
                                                                  *(int32x2_t *)(v4 + 1176) = v695;
                                                                  *(_DWORD *)(v4 + 1148) = v697;
                                                                  v704 = v697 && v696 && v703;
                                                                  v705 = v701.i32[1] < 1 && v690;
                                                                  *(_DWORD *)(v4 + 1156) = v705;
                                                                  v706 = v704 & v705;
                                                                  v707 = v701.i32[2] < 1 && v690;
                                                                  *(_DWORD *)(v4 + 1160) = v707;
                                                                  *(int32x4_t *)(v4 + 1184) = v702;
                                                                  v708 = v701.i32[3] < 1 && v690;
                                                                  *(_DWORD *)(v4 + 1164) = v708;
                                                                  v709 = v706 & (v707 && v708);
                                                                  if ((int)(*(_DWORD *)(v4 + 1072) + v692) >= 255)
                                                                    v710 = 255;
                                                                  else
                                                                    v710 = *(_DWORD *)(v4 + 1072) + v692;
                                                                  v711 = v710 & ~(v710 >> 31);
                                                                  v712 = v710 < 1 && v690;
                                                                  v713 = v709 & v712;
                                                                  v714 = *(_DWORD *)(v4 + 1104) + v692;
                                                                  if (v714 >= 255)
                                                                    v714 = 255;
                                                                  v715 = v714 & ~(v714 >> 31);
                                                                }
                                                                *(_DWORD *)(v4 + 1200) = v711;
                                                                *(_DWORD *)(v4 + 1168) = v712;
                                                                *(_DWORD *)(v4 + 1204) = v715;
                                                                if (v715)
                                                                  v690 = 0;
                                                                *(_DWORD *)(v4 + 1172) = v690;
                                                                v719 = v713 & v690;
                                                                *(_DWORD *)(v4 + 1228) = v719;
                                                                if (v719 || *(_DWORD *)(v4 + 464))
                                                                {
                                                                  *(_DWORD *)(v4 + 1296) = 0;
                                                                  *(_OWORD *)(v4 + 1232) = 0u;
                                                                  *(_QWORD *)(v4 + 1248) = 0x100000001;
                                                                  *(_OWORD *)(v4 + 1256) = default_mode_ref_deltas;
                                                                  *(_OWORD *)(v4 + 1272) = *(_OWORD *)algn_19688B20C;
                                                                  *(_QWORD *)(v4 + 1288) = -1;
                                                                  goto LABEL_1103;
                                                                }
                                                                v733 = *v10;
                                                                if (*v10 >= 6)
                                                                {
                                                                  v756 = *v58;
                                                                  v737 = *v10;
                                                                }
                                                                else
                                                                {
                                                                  v734 = *(_QWORD *)(a2 + 40);
                                                                  v735 = *(_DWORD *)(a2 + 4);
                                                                  v736 = *(unsigned __int8 **)(a2 + 24);
                                                                  v737 = v733 + 8;
                                                                  *(_DWORD *)(a2 + 16) = v733 + 8;
                                                                  if (v735)
                                                                  {
                                                                    v738 = 0;
                                                                  }
                                                                  else
                                                                  {
                                                                    *(_QWORD *)(a2 + 24) = v736 + 1;
                                                                    v738 = *v736++;
                                                                  }
                                                                  if ((unint64_t)v736 >= v734)
                                                                  {
                                                                    *(_DWORD *)a2 = v735;
                                                                    *(_DWORD *)(a2 + 4) = 1;
                                                                  }
                                                                  v756 = *v58 | (v738 << (56 - v733));
                                                                }
                                                                *v10 = v737 - 6;
                                                                v847 = v756 << 6;
                                                                *v58 = v756 << 6;
                                                                *(_DWORD *)(v4 + 1232) = v756 >> 58;
                                                                v848 = *v10;
                                                                if (*v10 > 5)
                                                                {
                                                                  v852 = *v10;
                                                                }
                                                                else
                                                                {
                                                                  v849 = *(_QWORD *)(a2 + 40);
                                                                  v850 = *(_DWORD *)(a2 + 4);
                                                                  v851 = *(unsigned __int8 **)(a2 + 24);
                                                                  v852 = v848 + 8;
                                                                  *(_DWORD *)(a2 + 16) = v848 + 8;
                                                                  if (v850)
                                                                  {
                                                                    v853 = 0;
                                                                  }
                                                                  else
                                                                  {
                                                                    *(_QWORD *)(a2 + 24) = v851 + 1;
                                                                    v853 = *v851++;
                                                                  }
                                                                  if ((unint64_t)v851 >= v849)
                                                                  {
                                                                    *(_DWORD *)a2 = v850;
                                                                    *(_DWORD *)(a2 + 4) = 1;
                                                                  }
                                                                  v847 |= v853 << (56 - v848);
                                                                }
                                                                *v10 = v852 - 6;
                                                                *v58 = v847 << 6;
                                                                v854 = v847 >> 58;
                                                                *(_DWORD *)(v4 + 1236) = v854;
                                                                if (!v390[271]
                                                                  && *(_DWORD *)(v4 + 1232) | v854)
                                                                {
                                                                  *(_DWORD *)(v4 + 1240) = dav1d_get_bits(a2, 6u);
                                                                  *(_DWORD *)(v4 + 1244) = dav1d_get_bits(a2, 6u);
                                                                }
                                                                v855 = *v10;
                                                                if (*v10 >= 3)
                                                                {
                                                                  v861 = *v58;
                                                                  v859 = *v10;
                                                                }
                                                                else
                                                                {
                                                                  v856 = *(_QWORD *)(a2 + 40);
                                                                  v857 = *(_DWORD *)(a2 + 4);
                                                                  v858 = *(unsigned __int8 **)(a2 + 24);
                                                                  v859 = v855 + 8;
                                                                  *(_DWORD *)(a2 + 16) = v855 + 8;
                                                                  if (v857)
                                                                  {
                                                                    v860 = 0;
                                                                  }
                                                                  else
                                                                  {
                                                                    *(_QWORD *)(a2 + 24) = v858 + 1;
                                                                    v860 = *v858++;
                                                                  }
                                                                  if ((unint64_t)v858 >= v856)
                                                                  {
                                                                    *(_DWORD *)a2 = v857;
                                                                    *(_DWORD *)(a2 + 4) = 1;
                                                                  }
                                                                  v861 = *v58 | (v860 << (56 - v855));
                                                                }
                                                                *v10 = v859 - 3;
                                                                *v58 = 8 * v861;
                                                                *(_DWORD *)(v4 + 1296) = v861 >> 61;
                                                                v862 = *(int *)(v4 + 304);
                                                                if ((_DWORD)v862 == 7)
                                                                {
                                                                  *(_OWORD *)(v4 + 1256) = default_mode_ref_deltas;
                                                                  *(_OWORD *)(v4 + 1272) = *(_OWORD *)algn_19688B20C;
                                                                  *(_QWORD *)(v4 + 1288) = -1;
LABEL_1320:
                                                                  v866 = dav1d_get_bits(a2, 1u);
                                                                  *(_DWORD *)(v4 + 1248) = v866;
                                                                  if (v866)
                                                                  {
                                                                    v867 = dav1d_get_bits(a2, 1u);
                                                                    *(_DWORD *)(v4 + 1252) = v867;
                                                                    if (v867)
                                                                    {
                                                                      if (dav1d_get_bits(a2, 1u))
                                                                        *(_DWORD *)(v4 + 1264) = dav1d_get_sbits(a2, 6);
                                                                      if (dav1d_get_bits(a2, 1u))
                                                                        *(_DWORD *)(v4 + 1268) = dav1d_get_sbits(a2, 6);
                                                                      if (dav1d_get_bits(a2, 1u))
                                                                        *(_DWORD *)(v4 + 1272) = dav1d_get_sbits(a2, 6);
                                                                      if (dav1d_get_bits(a2, 1u))
                                                                        *(_DWORD *)(v4 + 1276) = dav1d_get_sbits(a2, 6);
                                                                      if (dav1d_get_bits(a2, 1u))
                                                                        *(_DWORD *)(v4 + 1280) = dav1d_get_sbits(a2, 6);
                                                                      if (dav1d_get_bits(a2, 1u))
                                                                        *(_DWORD *)(v4 + 1284) = dav1d_get_sbits(a2, 6);
                                                                      if (dav1d_get_bits(a2, 1u))
                                                                        *(_DWORD *)(v4 + 1288) = dav1d_get_sbits(a2, 6);
                                                                      if (dav1d_get_bits(a2, 1u))
                                                                        *(_DWORD *)(v4 + 1292) = dav1d_get_sbits(a2, 6);
                                                                      if (dav1d_get_bits(a2, 1u))
                                                                        *(_DWORD *)(v4 + 1256) = dav1d_get_sbits(a2, 6);
                                                                      if (dav1d_get_bits(a2, 1u))
                                                                        *(_DWORD *)(v4 + 1260) = dav1d_get_sbits(a2, 6);
                                                                    }
                                                                  }
LABEL_1103:
                                                                  if (*(_DWORD *)(v4 + 1228)
                                                                    || !v390[267]
                                                                    || *(_DWORD *)(v4 + 464))
                                                                  {
                                                                    *(_QWORD *)(v4 + 1304) = 0;
                                                                    *(_DWORD *)(v4 + 1340) = 0;
                                                                  }
                                                                  else
                                                                  {
                                                                    *(_DWORD *)(v4 + 1300) = dav1d_get_bits(a2, 2u) + 3;
                                                                    v721 = dav1d_get_bits(a2, 2u);
                                                                    *(_DWORD *)(v4 + 1304) = v721;
                                                                    if (v721 != 31)
                                                                    {
                                                                      v722 = 0;
                                                                      v723 = *(_QWORD *)(a2 + 8);
                                                                      v724 = 1 << v721;
                                                                      while (2)
                                                                      {
                                                                        v746 = *v10;
                                                                        if (*v10 > 5)
                                                                          goto LABEL_1136;
                                                                        v747 = *(_QWORD *)(a2 + 40);
                                                                        v748 = *(_DWORD *)(a2 + 4);
                                                                        v749 = *(unsigned __int8 **)(a2 + 24);
                                                                        *(_DWORD *)(a2 + 16) = v746 + 8;
                                                                        if (v748)
                                                                        {
                                                                          v750 = 0;
                                                                          if ((unint64_t)v749 >= v747)
                                                                            goto LABEL_1134;
                                                                        }
                                                                        else
                                                                        {
                                                                          *(_QWORD *)(a2 + 24) = v749 + 1;
                                                                          v750 = *v749;
                                                                          if ((unint64_t)(v749 + 1) >= v747)
                                                                          {
LABEL_1134:
                                                                            *(_DWORD *)a2 = v748;
                                                                            *(_DWORD *)(a2 + 4) = 1;
                                                                          }
                                                                        }
                                                                        v723 |= v750 << (56 - v746);
                                                                        v746 += 8;
LABEL_1136:
                                                                        *v10 = v746 - 6;
                                                                        v743 = v723 << 6;
                                                                        *v58 = v723 << 6;
                                                                        *(_DWORD *)(v4 + 4 * v722 + 1308) = v723 >> 58;
                                                                        if (v390[271])
                                                                          goto LABEL_1130;
                                                                        v744 = *v10;
                                                                        if (*v10 <= 5)
                                                                        {
                                                                          v751 = *(_QWORD *)(a2 + 40);
                                                                          v752 = *(_DWORD *)(a2 + 4);
                                                                          v753 = *(unsigned __int8 **)(a2 + 24);
                                                                          *(_DWORD *)(a2 + 16) = v744 + 8;
                                                                          if (v752)
                                                                          {
                                                                            v754 = 0;
                                                                            if ((unint64_t)v753 >= v751)
                                                                              goto LABEL_1127;
                                                                          }
                                                                          else
                                                                          {
                                                                            *(_QWORD *)(a2 + 24) = v753 + 1;
                                                                            v754 = *v753;
                                                                            if ((unint64_t)(v753 + 1) >= v751)
                                                                            {
LABEL_1127:
                                                                              *(_DWORD *)a2 = v752;
                                                                              *(_DWORD *)(a2 + 4) = 1;
                                                                            }
                                                                          }
                                                                          v743 |= v754 << (56 - v744);
                                                                          v744 += 8;
                                                                        }
                                                                        *v10 = v744 - 6;
                                                                        v745 = v743 >> 58;
                                                                        v743 <<= 6;
                                                                        *v58 = v743;
                                                                        *(_DWORD *)(v4 + 4 * v722 + 1340) = v745;
LABEL_1130:
                                                                        ++v722;
                                                                        v723 = v743;
                                                                        if (v722 >= v724)
                                                                          break;
                                                                        continue;
                                                                      }
                                                                    }
                                                                  }
                                                                  if ((!*(_DWORD *)(v4 + 1228) || *(_DWORD *)(v4 + 456))
                                                                    && v390[268]
                                                                    && !*(_DWORD *)(v4 + 464))
                                                                  {
                                                                    v727 = *v10;
                                                                    if (*v10 >= 2)
                                                                    {
                                                                      v755 = *v58;
                                                                      v731 = *v10;
                                                                    }
                                                                    else
                                                                    {
                                                                      v728 = *(_QWORD *)(a2 + 40);
                                                                      v729 = *(_DWORD *)(a2 + 4);
                                                                      v730 = *(unsigned __int8 **)(a2 + 24);
                                                                      v731 = v727 + 8;
                                                                      *(_DWORD *)(a2 + 16) = v727 + 8;
                                                                      if (v729)
                                                                      {
                                                                        v732 = 0;
                                                                      }
                                                                      else
                                                                      {
                                                                        *(_QWORD *)(a2 + 24) = v730 + 1;
                                                                        v732 = *v730++;
                                                                      }
                                                                      if ((unint64_t)v730 >= v728)
                                                                      {
                                                                        *(_DWORD *)a2 = v729;
                                                                        *(_DWORD *)(a2 + 4) = 1;
                                                                      }
                                                                      v755 = *v58 | (v732 << (56 - v727));
                                                                    }
                                                                    *v10 = v731 - 2;
                                                                    *v58 = 4 * v755;
                                                                    v831 = v755 >> 62;
                                                                    *(_DWORD *)(v4 + 1372) = v755 >> 62;
                                                                    if (v390[271])
                                                                    {
                                                                      v832 = 0;
                                                                      *(_DWORD *)(v4 + 1376) = 0;
                                                                    }
                                                                    else
                                                                    {
                                                                      *(_DWORD *)(v4 + 1376) = dav1d_get_bits(a2, 2u);
                                                                      v832 = dav1d_get_bits(a2, 2u);
                                                                      LODWORD(v831) = *(_DWORD *)(v4 + 1372);
                                                                    }
                                                                    *(_DWORD *)(v4 + 1380) = v832;
                                                                    if ((_DWORD)v831 || *(_DWORD *)(v4 + 1376) | v832)
                                                                    {
                                                                      *(_DWORD *)(v4 + 1384) = v390[253] + 6;
                                                                      v833 = *v10;
                                                                      if (*v10)
                                                                      {
                                                                        v834 = *v58;
                                                                      }
                                                                      else
                                                                      {
                                                                        v835 = *(_QWORD *)(a2 + 40);
                                                                        v836 = *(_DWORD *)(a2 + 4);
                                                                        v837 = *(unsigned __int8 **)(a2 + 24);
                                                                        *(_DWORD *)(a2 + 16) = 8;
                                                                        if (v836)
                                                                        {
                                                                          v838 = 0;
                                                                        }
                                                                        else
                                                                        {
                                                                          *(_QWORD *)(a2 + 24) = v837 + 1;
                                                                          v838 = *v837++;
                                                                        }
                                                                        if ((unint64_t)v837 >= v835)
                                                                        {
                                                                          *(_DWORD *)a2 = v836;
                                                                          *(_DWORD *)(a2 + 4) = 1;
                                                                        }
                                                                        v834 = *v58 | (v838 << 56);
                                                                        v833 = 8;
                                                                      }
                                                                      *v10 = v833 - 1;
                                                                      *v58 = 2 * v834;
                                                                      v868 = *(_DWORD *)(v4 + 1384);
                                                                      if (v834 < 0)
                                                                      {
                                                                        *(_DWORD *)(v4 + 1384) = ++v868;
                                                                        if (!v390[253])
                                                                        {
                                                                          v868 = *(_DWORD *)(v4 + 1384)
                                                                               + dav1d_get_bits(a2, 1u);
                                                                          *(_DWORD *)(v4 + 1384) = v868;
                                                                        }
                                                                      }
                                                                      *(_DWORD *)(v4 + 1388) = v868;
                                                                      if ((*(_DWORD *)(v4 + 1376)
                                                                         || *(_DWORD *)(v4 + 1380))
                                                                        && v390[269] == 1
                                                                        && v390[270] == 1)
                                                                      {
                                                                        *(_DWORD *)(v4 + 1388) -= dav1d_get_bits(a2, 1u);
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      *(_DWORD *)(v4 + 1384) = 8;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    *(_DWORD *)(v4 + 1372) = 0;
                                                                    *(_QWORD *)(v4 + 1376) = 0;
                                                                  }
                                                                  if (*(_DWORD *)(v4 + 1228))
                                                                  {
                                                                    *(_DWORD *)(v4 + 1392) = 0;
                                                                    if ((*(_BYTE *)(v4 + 232) & 1) == 0)
                                                                      goto LABEL_1112;
LABEL_1155:
                                                                    v758 = *v10;
                                                                    if (*v10)
                                                                    {
                                                                      v759 = *v58;
                                                                    }
                                                                    else
                                                                    {
                                                                      v760 = *(_QWORD *)(a2 + 40);
                                                                      v761 = *(_DWORD *)(a2 + 4);
                                                                      v762 = *(unsigned __int8 **)(a2 + 24);
                                                                      *(_DWORD *)(a2 + 16) = 8;
                                                                      if (v761)
                                                                      {
                                                                        v763 = 0;
                                                                      }
                                                                      else
                                                                      {
                                                                        *(_QWORD *)(a2 + 24) = v762 + 1;
                                                                        v763 = *v762++;
                                                                      }
                                                                      if ((unint64_t)v762 >= v760)
                                                                      {
                                                                        *(_DWORD *)a2 = v761;
                                                                        *(_DWORD *)(a2 + 4) = 1;
                                                                      }
                                                                      v759 = *v58 | (v763 << 56);
                                                                      v758 = 8;
                                                                    }
                                                                    v720 = 0;
                                                                    *v10 = v758 - 1;
                                                                    *v58 = 2 * v759;
                                                                    *(_QWORD *)(v4 + 1396) = v759 >> 63;
                                                                    if ((v759 & 0x8000000000000000) == 0)
                                                                      goto LABEL_1164;
                                                                    if (v390[260])
                                                                    {
                                                                      if (!a1[41 * *(int *)(v4 + 472) + 6236])
                                                                        return 4294967274;
                                                                      v804 = v390[265];
                                                                      if (v804)
                                                                      {
                                                                        v805 = *(_DWORD *)(v4 + 248);
                                                                        v806 = *(_DWORD *)(a1[41 * *(int *)(v4 + 472)
                                                                                            + 6235]
                                                                                         + 248);
                                                                        v807 = 1 << (v804 - 1);
                                                                        v808 = v807 - 1;
                                                                        v809 = (v807 - 1) & (v806 - v805);
                                                                        v810 = v807 & (v806 - v805);
                                                                        if (v809 >= v810)
                                                                          v811 = -1;
                                                                        else
                                                                          v811 = *(_DWORD *)(a1[41 * *(int *)(v4 + 472)
                                                                                              + 6235]
                                                                                           + 248);
                                                                        if (v809 <= v810)
                                                                          v812 = -1;
                                                                        else
                                                                          v812 = *(_DWORD *)(a1[41 * *(int *)(v4 + 472)
                                                                                              + 6235]
                                                                                           + 248);
                                                                        if (!a1[41 * *(int *)(v4 + 476) + 6236])
                                                                          return 4294967274;
                                                                        v813 = *(_DWORD *)(a1[41 * *(int *)(v4 + 476)
                                                                                            + 6235]
                                                                                         + 248);
                                                                        v814 = (v813 - v805) & v808;
                                                                        v815 = (v813 - v805) & v807;
                                                                        v816 = __OFSUB__(v814, v815);
                                                                        v817 = v814 - v815;
                                                                        if ((v817 < 0) ^ v816 | (v817 == 0))
                                                                        {
                                                                          if (v817 < 0)
                                                                          {
                                                                            if (v811 == -1
                                                                              || ((v813 - v811) & v808) > ((v813 - v811) & v807))
                                                                            {
                                                                              v819 = 0;
                                                                              v818 = 1;
                                                                              v811 = *(_DWORD *)(a1[41 * *(int *)(v4 + 476) + 6235]
                                                                                               + 248);
                                                                            }
                                                                            else
                                                                            {
                                                                              v818 = 0;
                                                                              v819 = 0;
                                                                              v811 = *(_DWORD *)(a1[41 * *(int *)(v4 + 472) + 6235]
                                                                                               + 248);
                                                                            }
                                                                          }
                                                                          else
                                                                          {
                                                                            v818 = 0;
                                                                            v819 = 0;
                                                                          }
                                                                        }
                                                                        else if (v812 == -1
                                                                               || ((v812 - v813) & v808) > ((v812 - v813) & v807))
                                                                        {
                                                                          v818 = 0;
                                                                          v819 = 1;
                                                                          v812 = *(_DWORD *)(a1[41 * *(int *)(v4 + 476)
                                                                                              + 6235]
                                                                                           + 248);
                                                                        }
                                                                        else
                                                                        {
                                                                          v818 = 0;
                                                                          v819 = 0;
                                                                          v812 = *(_DWORD *)(a1[41 * *(int *)(v4 + 472)
                                                                                              + 6235]
                                                                                           + 248);
                                                                        }
                                                                        if (!a1[41 * *(int *)(v4 + 480) + 6236])
                                                                          return 4294967274;
                                                                        v958 = *(_DWORD *)(a1[41 * *(int *)(v4 + 480)
                                                                                            + 6235]
                                                                                         + 248);
                                                                        v959 = (v958 - v805) & v808;
                                                                        v960 = (v958 - v805) & v807;
                                                                        v816 = __OFSUB__(v959, v960);
                                                                        v961 = v959 - v960;
                                                                        if ((v961 < 0) ^ v816 | (v961 == 0))
                                                                        {
                                                                          if (v961 < 0
                                                                            && (v811 == -1
                                                                             || ((v958 - v811) & v808) > ((v958 - v811) & v807)))
                                                                          {
                                                                            v818 = 2;
                                                                            v811 = *(_DWORD *)(a1[41
                                                                                                * *(int *)(v4 + 480)
                                                                                                + 6235]
                                                                                             + 248);
                                                                          }
                                                                        }
                                                                        else if (v812 == -1
                                                                               || ((v812 - v958) & v808) > ((v812 - v958) & v807))
                                                                        {
                                                                          v819 = 2;
                                                                          v812 = *(_DWORD *)(a1[41 * *(int *)(v4 + 480)
                                                                                              + 6235]
                                                                                           + 248);
                                                                        }
                                                                        if (!a1[41 * *(int *)(v4 + 484) + 6236])
                                                                          return 4294967274;
                                                                        v962 = *(_DWORD *)(a1[41 * *(int *)(v4 + 484)
                                                                                            + 6235]
                                                                                         + 248);
                                                                        v963 = (v962 - v805) & v808;
                                                                        v964 = (v962 - v805) & v807;
                                                                        v816 = __OFSUB__(v963, v964);
                                                                        v965 = v963 - v964;
                                                                        if ((v965 < 0) ^ v816 | (v965 == 0))
                                                                        {
                                                                          if (v965 < 0
                                                                            && (v811 == -1
                                                                             || ((v962 - v811) & v808) > ((v962 - v811) & v807)))
                                                                          {
                                                                            v818 = 3;
                                                                            v811 = *(_DWORD *)(a1[41
                                                                                                * *(int *)(v4 + 484)
                                                                                                + 6235]
                                                                                             + 248);
                                                                          }
                                                                        }
                                                                        else if (v812 == -1
                                                                               || ((v812 - v962) & v808) > ((v812 - v962) & v807))
                                                                        {
                                                                          v819 = 3;
                                                                          v812 = *(_DWORD *)(a1[41 * *(int *)(v4 + 484)
                                                                                              + 6235]
                                                                                           + 248);
                                                                        }
                                                                        if (!a1[41 * *(int *)(v4 + 488) + 6236])
                                                                          return 4294967274;
                                                                        v966 = *(_DWORD *)(a1[41 * *(int *)(v4 + 488)
                                                                                            + 6235]
                                                                                         + 248);
                                                                        v967 = (v966 - v805) & v808;
                                                                        v968 = (v966 - v805) & v807;
                                                                        v816 = __OFSUB__(v967, v968);
                                                                        v969 = v967 - v968;
                                                                        if ((v969 < 0) ^ v816 | (v969 == 0))
                                                                        {
                                                                          if (v969 < 0
                                                                            && (v811 == -1
                                                                             || ((v966 - v811) & v808) > ((v966 - v811) & v807)))
                                                                          {
                                                                            v818 = 4;
                                                                            v811 = *(_DWORD *)(a1[41
                                                                                                * *(int *)(v4 + 488)
                                                                                                + 6235]
                                                                                             + 248);
                                                                          }
                                                                        }
                                                                        else if (v812 == -1
                                                                               || ((v812 - v966) & v808) > ((v812 - v966) & v807))
                                                                        {
                                                                          v819 = 4;
                                                                          v812 = *(_DWORD *)(a1[41 * *(int *)(v4 + 488)
                                                                                              + 6235]
                                                                                           + 248);
                                                                        }
                                                                        if (!a1[41 * *(int *)(v4 + 492) + 6236])
                                                                          return 4294967274;
                                                                        v970 = *(_DWORD *)(a1[41 * *(int *)(v4 + 492)
                                                                                            + 6235]
                                                                                         + 248);
                                                                        v971 = (v970 - v805) & v808;
                                                                        v972 = (v970 - v805) & v807;
                                                                        v816 = __OFSUB__(v971, v972);
                                                                        v973 = v971 - v972;
                                                                        if ((v973 < 0) ^ v816 | (v973 == 0))
                                                                        {
                                                                          if (v973 < 0
                                                                            && (v811 == -1
                                                                             || ((v970 - v811) & v808) > ((v970 - v811) & v807)))
                                                                          {
                                                                            v818 = 5;
                                                                            v811 = *(_DWORD *)(a1[41
                                                                                                * *(int *)(v4 + 492)
                                                                                                + 6235]
                                                                                             + 248);
                                                                          }
                                                                        }
                                                                        else if (v812 == -1
                                                                               || ((v812 - v970) & v808) > ((v812 - v970) & v807))
                                                                        {
                                                                          v819 = 5;
                                                                          v812 = *(_DWORD *)(a1[41 * *(int *)(v4 + 492)
                                                                                              + 6235]
                                                                                           + 248);
                                                                        }
                                                                        if (!a1[41 * *(int *)(v4 + 496) + 6236])
                                                                          return 4294967274;
                                                                        v974 = *(_DWORD *)(a1[41 * *(int *)(v4 + 496)
                                                                                            + 6235]
                                                                                         + 248);
                                                                        v975 = v974 - v805;
                                                                        v976 = v975 & v808;
                                                                        v977 = v975 & v807;
                                                                        v816 = __OFSUB__(v976, v977);
                                                                        v978 = v976 - v977;
                                                                        if ((v978 < 0) ^ v816 | (v978 == 0))
                                                                        {
                                                                          if (v978 < 0
                                                                            && (v811 == -1
                                                                             || ((v974 - v811) & v808) > ((v974 - v811) & v807)))
                                                                          {
                                                                            v818 = 6;
                                                                            v811 = *(_DWORD *)(a1[41
                                                                                                * *(int *)(v4 + 496)
                                                                                                + 6235]
                                                                                             + 248);
                                                                          }
                                                                        }
                                                                        else if (v812 == -1
                                                                               || ((v812 - v974) & v808) > ((v812 - v974) & v807))
                                                                        {
                                                                          v819 = 6;
                                                                          v812 = *(_DWORD *)(a1[41 * *(int *)(v4 + 496)
                                                                                              + 6235]
                                                                                           + 248);
                                                                        }
                                                                        if (v811 != -1 && v812 != -1)
                                                                          goto LABEL_1680;
                                                                        if (v811 != -1)
                                                                        {
                                                                          if (((v806 - v811) & v808) >= ((v806 - v811) & v807))
                                                                            v979 = -1;
                                                                          else
                                                                            v979 = *(_DWORD *)(a1[41
                                                                                                * *(int *)(v4 + 472)
                                                                                                + 6235]
                                                                                             + 248);
                                                                          if (((v813 - v811) & v808) >= ((v813 - v811) & v807))
                                                                          {
                                                                            v819 = 0;
                                                                            v813 = v979;
                                                                          }
                                                                          else if (v979 == -1
                                                                                 || ((v813 - v979) & v808) > ((v813 - v979) & v807))
                                                                          {
                                                                            v819 = 1;
                                                                          }
                                                                          else
                                                                          {
                                                                            v819 = 0;
                                                                            v813 = *(_DWORD *)(a1[41
                                                                                                * *(int *)(v4 + 472)
                                                                                                + 6235]
                                                                                             + 248);
                                                                          }
                                                                          if (((v958 - v811) & v808) < ((v958 - v811) & v807)
                                                                            && (v813 == -1
                                                                             || ((v958 - v813) & v808) > ((v958 - v813) & v807)))
                                                                          {
                                                                            v819 = 2;
                                                                            v813 = *(_DWORD *)(a1[41
                                                                                                * *(int *)(v4 + 480)
                                                                                                + 6235]
                                                                                             + 248);
                                                                          }
                                                                          if (((v962 - v811) & v808) < ((v962 - v811) & v807)
                                                                            && (v813 == -1
                                                                             || ((v962 - v813) & v808) > ((v962 - v813) & v807)))
                                                                          {
                                                                            v819 = 3;
                                                                            v813 = *(_DWORD *)(a1[41
                                                                                                * *(int *)(v4 + 484)
                                                                                                + 6235]
                                                                                             + 248);
                                                                          }
                                                                          if (((v966 - v811) & v808) < ((v966 - v811) & v807)
                                                                            && (v813 == -1
                                                                             || ((v966 - v813) & v808) > ((v966 - v813) & v807)))
                                                                          {
                                                                            v819 = 4;
                                                                            v813 = *(_DWORD *)(a1[41
                                                                                                * *(int *)(v4 + 488)
                                                                                                + 6235]
                                                                                             + 248);
                                                                          }
                                                                          if (((v970 - v811) & v808) < ((v970 - v811) & v807)
                                                                            && (v813 == -1
                                                                             || ((v970 - v813) & v808) > ((v970 - v813) & v807)))
                                                                          {
                                                                            v819 = 5;
                                                                            v813 = *(_DWORD *)(a1[41
                                                                                                * *(int *)(v4 + 492)
                                                                                                + 6235]
                                                                                             + 248);
                                                                          }
                                                                          if (((v974 - v811) & v808) >= ((v974 - v811) & v807))
                                                                          {
                                                                            v974 = v813;
                                                                          }
                                                                          else
                                                                          {
                                                                            if (v813 != -1)
                                                                            {
                                                                              v390 = v992;
                                                                              if (((v974 - v813) & v808) > ((v974 - v813) & v807))
                                                                              {
                                                                                v819 = 6;
                                                                                goto LABEL_1679;
                                                                              }
                                                                              goto LABEL_1680;
                                                                            }
                                                                            v819 = 6;
                                                                          }
                                                                          v390 = v992;
LABEL_1679:
                                                                          if (v974 != -1)
                                                                          {
LABEL_1680:
                                                                            if (v818 >= v819)
                                                                              v980 = v819;
                                                                            else
                                                                              v980 = v818;
                                                                            *(_DWORD *)(v4 + 1408) = v980;
                                                                            if (v818 <= v819)
                                                                              v981 = v819;
                                                                            else
                                                                              v981 = v818;
                                                                            *(_DWORD *)(v4 + 1412) = v981;
                                                                            *(_DWORD *)(v4 + 1400) = 1;
                                                                            v720 = dav1d_get_bits(a2, 1u);
                                                                            goto LABEL_1164;
                                                                          }
                                                                        }
                                                                      }
                                                                      else if (!a1[41 * *(int *)(v4 + 476) + 6236]
                                                                             || !a1[41 * *(int *)(v4 + 480) + 6236]
                                                                             || !a1[41 * *(int *)(v4 + 484) + 6236]
                                                                             || !a1[41 * *(int *)(v4 + 488) + 6236]
                                                                             || !a1[41 * *(int *)(v4 + 492) + 6236]
                                                                             || !a1[41 * *(int *)(v4 + 496) + 6236])
                                                                      {
                                                                        return 4294967274;
                                                                      }
                                                                    }
                                                                    v720 = 0;
                                                                    goto LABEL_1164;
                                                                  }
                                                                  v725 = *v10;
                                                                  if (*v10)
                                                                  {
                                                                    v726 = *v58;
                                                                  }
                                                                  else
                                                                  {
                                                                    v739 = *(_QWORD *)(a2 + 40);
                                                                    v740 = *(_DWORD *)(a2 + 4);
                                                                    v741 = *(unsigned __int8 **)(a2 + 24);
                                                                    *(_DWORD *)(a2 + 16) = 8;
                                                                    if (v740)
                                                                    {
                                                                      v742 = 0;
                                                                    }
                                                                    else
                                                                    {
                                                                      *(_QWORD *)(a2 + 24) = v741 + 1;
                                                                      v742 = *v741++;
                                                                    }
                                                                    if ((unint64_t)v741 >= v739)
                                                                    {
                                                                      *(_DWORD *)a2 = v740;
                                                                      *(_DWORD *)(a2 + 4) = 1;
                                                                    }
                                                                    v726 = *v58 | (v742 << 56);
                                                                    v725 = 8;
                                                                  }
                                                                  *v10 = v725 - 1;
                                                                  *v58 = 2 * v726;
                                                                  if (v726 >= 0)
                                                                    v757 = 1;
                                                                  else
                                                                    v757 = 2;
                                                                  *(_DWORD *)(v4 + 1392) = v757;
                                                                  if ((*(_BYTE *)(v4 + 232) & 1) != 0)
                                                                    goto LABEL_1155;
LABEL_1112:
                                                                  v720 = 0;
                                                                  *(_QWORD *)(v4 + 1396) = 0;
LABEL_1164:
                                                                  *(_DWORD *)(v4 + 1404) = v720;
                                                                  if (!*(_DWORD *)(v4 + 284) && (*v990 & 1) != 0)
                                                                  {
                                                                    v764 = v390[258];
                                                                    if (v764)
                                                                      v764 = dav1d_get_bits(a2, 1u) != 0;
                                                                  }
                                                                  else
                                                                  {
                                                                    v764 = 0;
                                                                  }
                                                                  *(_DWORD *)(v4 + 1416) = v764;
                                                                  v765 = *v10;
                                                                  if (*v10)
                                                                  {
                                                                    v766 = *v58;
                                                                    goto LABEL_1173;
                                                                  }
                                                                  v767 = *(_QWORD *)(a2 + 40);
                                                                  v768 = *(_DWORD *)(a2 + 4);
                                                                  v769 = *(unsigned __int8 **)(a2 + 24);
                                                                  *(_DWORD *)(a2 + 16) = 8;
                                                                  if (v768)
                                                                  {
                                                                    v770 = 0;
                                                                    if ((unint64_t)v769 >= v767)
                                                                      goto LABEL_1171;
                                                                  }
                                                                  else
                                                                  {
                                                                    *(_QWORD *)(a2 + 24) = v769 + 1;
                                                                    v770 = *v769;
                                                                    if ((unint64_t)(v769 + 1) >= v767)
                                                                    {
LABEL_1171:
                                                                      *(_DWORD *)a2 = v768;
                                                                      *(_DWORD *)(a2 + 4) = 1;
                                                                    }
                                                                  }
                                                                  v766 = *v58 | (v770 << 56);
                                                                  v765 = 8;
LABEL_1173:
                                                                  *v10 = v765 - 1;
                                                                  *v58 = 2 * v766;
                                                                  *(_DWORD *)(v4 + 1420) = v766 >> 63;
                                                                  *(_OWORD *)(v4 + 1424) = dav1d_default_wm_params;
                                                                  *(_OWORD *)(v4 + 1440) = *(_OWORD *)&dword_196898784;
                                                                  *(_DWORD *)(v4 + 1456) = 0;
                                                                  *(_OWORD *)(v4 + 1460) = dav1d_default_wm_params;
                                                                  *(_OWORD *)(v4 + 1476) = *(_OWORD *)&dword_196898784;
                                                                  *(_DWORD *)(v4 + 1492) = 0;
                                                                  *(_DWORD *)(v4 + 1528) = 0;
                                                                  *(_OWORD *)(v4 + 1512) = *(_OWORD *)&dword_196898784;
                                                                  *(_OWORD *)(v4 + 1496) = dav1d_default_wm_params;
                                                                  *(_OWORD *)(v4 + 1548) = *(_OWORD *)&dword_196898784;
                                                                  *(_OWORD *)(v4 + 1532) = dav1d_default_wm_params;
                                                                  *(_DWORD *)(v4 + 1564) = 0;
                                                                  *(_DWORD *)(v4 + 1600) = 0;
                                                                  *(_OWORD *)(v4 + 1584) = *(_OWORD *)&dword_196898784;
                                                                  *(_OWORD *)(v4 + 1568) = dav1d_default_wm_params;
                                                                  *(_DWORD *)(v4 + 1636) = 0;
                                                                  *(_OWORD *)(v4 + 1620) = *(_OWORD *)&dword_196898784;
                                                                  *(_OWORD *)(v4 + 1604) = dav1d_default_wm_params;
                                                                  *(_DWORD *)(v4 + 1672) = 0;
                                                                  *(_OWORD *)(v4 + 1656) = *(_OWORD *)&dword_196898784;
                                                                  *(_OWORD *)(v4 + 1640) = dav1d_default_wm_params;
                                                                  if ((*(_BYTE *)(v4 + 232) & 1) == 0)
                                                                  {
LABEL_1174:
                                                                    if (!v390[274] || !*v989 && !*(_DWORD *)(v4 + 280))
                                                                    {
                                                                      *(_DWORD *)(v4 + 224) = 0;
LABEL_1252:
                                                                      result = 0;
                                                                      *(_OWORD *)(v4 + 192) = 0u;
                                                                      *(_OWORD *)(v4 + 208) = 0u;
                                                                      *(_OWORD *)(v4 + 160) = 0u;
                                                                      *(_OWORD *)(v4 + 176) = 0u;
                                                                      *(_OWORD *)(v4 + 128) = 0u;
                                                                      *(_OWORD *)(v4 + 144) = 0u;
                                                                      *(_OWORD *)(v4 + 96) = 0u;
                                                                      *(_OWORD *)(v4 + 112) = 0u;
                                                                      *(_OWORD *)(v4 + 64) = 0u;
                                                                      *(_OWORD *)(v4 + 80) = 0u;
                                                                      *(_OWORD *)(v4 + 32) = 0u;
                                                                      *(_OWORD *)(v4 + 48) = 0u;
                                                                      *(_OWORD *)v4 = 0u;
                                                                      *(_OWORD *)(v4 + 16) = 0u;
                                                                      return result;
                                                                    }
                                                                    v771 = *v10;
                                                                    if (*v10)
                                                                    {
                                                                      v772 = *v58;
                                                                    }
                                                                    else
                                                                    {
                                                                      v820 = *(_QWORD *)(a2 + 40);
                                                                      v821 = *(_DWORD *)(a2 + 4);
                                                                      v822 = *(unsigned __int8 **)(a2 + 24);
                                                                      *(_DWORD *)(a2 + 16) = 8;
                                                                      if (v821)
                                                                      {
                                                                        v823 = 0;
                                                                      }
                                                                      else
                                                                      {
                                                                        *(_QWORD *)(a2 + 24) = v822 + 1;
                                                                        v823 = *v822++;
                                                                      }
                                                                      if ((unint64_t)v822 >= v820)
                                                                      {
                                                                        *(_DWORD *)a2 = v821;
                                                                        *(_DWORD *)(a2 + 4) = 1;
                                                                      }
                                                                      v772 = *v58 | (v823 << 56);
                                                                      v771 = 8;
                                                                    }
                                                                    v824 = v771 - 1;
                                                                    *v10 = v771 - 1;
                                                                    v825 = 2 * v772;
                                                                    *v58 = 2 * v772;
                                                                    *(_DWORD *)(v4 + 224) = v772 >> 63;
                                                                    if ((v772 & 0x8000000000000000) == 0)
                                                                      goto LABEL_1252;
                                                                    if (v771 <= 0x10)
                                                                    {
                                                                      v826 = *(_QWORD *)(a2 + 40);
                                                                      v827 = *(_DWORD *)(a2 + 4);
                                                                      v828 = *(unsigned __int8 **)(a2 + 24);
                                                                      v829 = v771 + 7;
                                                                      *(_DWORD *)(a2 + 16) = v771 + 7;
                                                                      if (v827)
                                                                      {
                                                                        v830 = 0;
                                                                      }
                                                                      else
                                                                      {
                                                                        *(_QWORD *)(a2 + 24) = v828 + 1;
                                                                        v830 = *v828++;
                                                                      }
                                                                      if ((unint64_t)v828 >= v826)
                                                                      {
                                                                        *(_DWORD *)a2 = v827;
                                                                        v827 = 1;
                                                                        *(_DWORD *)(a2 + 4) = 1;
                                                                      }
                                                                      if (v771 > 8)
                                                                      {
                                                                        v839 = v771 + 7;
                                                                      }
                                                                      else
                                                                      {
                                                                        v830 <<= 8;
                                                                        v839 = v771 + 15;
                                                                        *v10 = v839;
                                                                        if (!v827)
                                                                        {
                                                                          *(_QWORD *)(a2 + 24) = v828 + 1;
                                                                          v830 |= *v828++;
                                                                        }
                                                                        if ((unint64_t)v828 >= v826)
                                                                        {
                                                                          *(_DWORD *)a2 = v827;
                                                                          *(_DWORD *)(a2 + 4) = 1;
                                                                        }
                                                                        LOBYTE(v824) = v829;
                                                                      }
                                                                      v825 |= v830 << (56 - v824);
                                                                      v824 = v839;
                                                                    }
                                                                    v840 = v824 - 16;
                                                                    *v10 = v824 - 16;
                                                                    v841 = v825 << 16;
                                                                    *v58 = v825 << 16;
                                                                    v842 = HIWORD(v825);
                                                                    if (*(_DWORD *)v990 == 1)
                                                                    {
                                                                      if (v824 == 16)
                                                                      {
                                                                        v843 = *(_QWORD *)(a2 + 40);
                                                                        v844 = *(_DWORD *)(a2 + 4);
                                                                        v845 = *(unsigned __int8 **)(a2 + 24);
                                                                        *(_DWORD *)(a2 + 16) = 8;
                                                                        if (v844)
                                                                        {
                                                                          v846 = 0;
                                                                        }
                                                                        else
                                                                        {
                                                                          *(_QWORD *)(a2 + 24) = v845 + 1;
                                                                          v846 = *v845++;
                                                                        }
                                                                        if ((unint64_t)v845 >= v843)
                                                                        {
                                                                          *(_DWORD *)a2 = v844;
                                                                          *(_DWORD *)(a2 + 4) = 1;
                                                                        }
                                                                        v841 |= v846 << (72 - v824);
                                                                        v840 = 8;
                                                                      }
                                                                      *v10 = --v840;
                                                                      *v58 = 2 * v841;
                                                                      *(_DWORD *)(v4 + 228) = v841 >> 63;
                                                                      if ((v841 & 0x8000000000000000) == 0)
                                                                      {
                                                                        v869 = dav1d_get_bits(a2, 3u);
                                                                        if (*(_DWORD *)(v4 + 472) != v869
                                                                          && *(_DWORD *)(v4 + 476) != v869
                                                                          && *(_DWORD *)(v4 + 480) != v869
                                                                          && *(_DWORD *)(v4 + 484) != v869
                                                                          && *(_DWORD *)(v4 + 488) != v869
                                                                          && *(_DWORD *)(v4 + 492) != v869
                                                                          && *(_DWORD *)(v4 + 496) != v869)
                                                                        {
                                                                          return 4294967274;
                                                                        }
                                                                        v870 = (_OWORD *)a1[41 * v869 + 6235];
                                                                        if (!v870)
                                                                          return 4294967274;
                                                                        result = 0;
                                                                        v871 = v870[1];
                                                                        *(_OWORD *)v4 = *v870;
                                                                        *(_OWORD *)(v4 + 16) = v871;
                                                                        v872 = v870[2];
                                                                        v873 = v870[3];
                                                                        v874 = v870[5];
                                                                        *(_OWORD *)(v4 + 64) = v870[4];
                                                                        *(_OWORD *)(v4 + 80) = v874;
                                                                        *(_OWORD *)(v4 + 32) = v872;
                                                                        *(_OWORD *)(v4 + 48) = v873;
                                                                        v875 = v870[6];
                                                                        v876 = v870[7];
                                                                        v877 = v870[9];
                                                                        *(_OWORD *)(v4 + 128) = v870[8];
                                                                        *(_OWORD *)(v4 + 144) = v877;
                                                                        *(_OWORD *)(v4 + 96) = v875;
                                                                        *(_OWORD *)(v4 + 112) = v876;
                                                                        v878 = v870[10];
                                                                        v879 = v870[11];
                                                                        v880 = v870[13];
                                                                        *(_OWORD *)(v4 + 192) = v870[12];
                                                                        *(_OWORD *)(v4 + 208) = v880;
                                                                        *(_OWORD *)(v4 + 160) = v878;
                                                                        *(_OWORD *)(v4 + 176) = v879;
                                                                        *(_DWORD *)v4 = v842;
                                                                        return result;
                                                                      }
                                                                      v841 *= 2;
                                                                    }
                                                                    else
                                                                    {
                                                                      *(_DWORD *)(v4 + 228) = 1;
                                                                    }
                                                                    *(_DWORD *)v4 = v842;
                                                                    if (v840 <= 3)
                                                                    {
                                                                      v881 = *(_QWORD *)(a2 + 40);
                                                                      v882 = *(_DWORD *)(a2 + 4);
                                                                      v883 = *(unsigned __int8 **)(a2 + 24);
                                                                      *(_DWORD *)(a2 + 16) = v840 + 8;
                                                                      if (v882)
                                                                      {
                                                                        v884 = 0;
                                                                      }
                                                                      else
                                                                      {
                                                                        *(_QWORD *)(a2 + 24) = v883 + 1;
                                                                        v884 = *v883++;
                                                                      }
                                                                      if ((unint64_t)v883 >= v881)
                                                                      {
                                                                        *(_DWORD *)a2 = v882;
                                                                        *(_DWORD *)(a2 + 4) = 1;
                                                                      }
                                                                      v841 |= v884 << (56 - v840);
                                                                      v840 += 8;
                                                                    }
                                                                    *v10 = v840 - 4;
                                                                    *v58 = 16 * v841;
                                                                    v885 = v841 >> 60;
                                                                    *(_DWORD *)(v4 + 4) = v885;
                                                                    if ((_DWORD)v885)
                                                                    {
                                                                      if ((_DWORD)v885 == 15)
                                                                        return 4294967274;
                                                                      *(_BYTE *)(v4 + 8) = dav1d_get_bits(a2, 8u);
                                                                      *(_BYTE *)(v4 + 9) = dav1d_get_bits(a2, 8u);
                                                                      v886 = *(int *)(v4 + 4);
                                                                      if ((int)v886 >= 2)
                                                                      {
                                                                        v887 = (_BYTE *)(v4 + 11);
                                                                        v888 = 1;
                                                                        do
                                                                        {
                                                                          v890 = *v10;
                                                                          if (*v10 >= 8)
                                                                          {
                                                                            v896 = *v58;
                                                                            v894 = *v10;
                                                                          }
                                                                          else
                                                                          {
                                                                            v891 = *(_QWORD *)(a2 + 40);
                                                                            v892 = *(_DWORD *)(a2 + 4);
                                                                            v893 = *(unsigned __int8 **)(a2 + 24);
                                                                            v894 = v890 + 8;
                                                                            *(_DWORD *)(a2 + 16) = v890 + 8;
                                                                            if (v892)
                                                                            {
                                                                              v895 = 0;
                                                                            }
                                                                            else
                                                                            {
                                                                              *(_QWORD *)(a2 + 24) = v893 + 1;
                                                                              v895 = *v893++;
                                                                            }
                                                                            if ((unint64_t)v893 >= v891)
                                                                            {
                                                                              *(_DWORD *)a2 = v892;
                                                                              *(_DWORD *)(a2 + 4) = 1;
                                                                            }
                                                                            v896 = *v58 | (v895 << (56
                                                                                                  - v890));
                                                                          }
                                                                          *v10 = v894 - 8;
                                                                          *v58 = v896 << 8;
                                                                          *(v887 - 1) = HIBYTE(v896);
                                                                          if (HIBYTE(v896) <= *(v887 - 3))
                                                                            return 4294967274;
                                                                          v897 = *v10;
                                                                          if (*v10 >= 8)
                                                                          {
                                                                            v889 = *v58;
                                                                            v901 = *v10;
                                                                          }
                                                                          else
                                                                          {
                                                                            v898 = *(_QWORD *)(a2 + 40);
                                                                            v899 = *(_DWORD *)(a2 + 4);
                                                                            v900 = *(unsigned __int8 **)(a2 + 24);
                                                                            v901 = v897 + 8;
                                                                            *(_DWORD *)(a2 + 16) = v897 + 8;
                                                                            if (v899)
                                                                            {
                                                                              v902 = 0;
                                                                            }
                                                                            else
                                                                            {
                                                                              *(_QWORD *)(a2 + 24) = v900 + 1;
                                                                              v902 = *v900++;
                                                                            }
                                                                            if ((unint64_t)v900 >= v898)
                                                                            {
                                                                              *(_DWORD *)a2 = v899;
                                                                              *(_DWORD *)(a2 + 4) = 1;
                                                                            }
                                                                            v889 = *v58 | (v902 << (56
                                                                                                  - v897));
                                                                          }
                                                                          *v10 = v901 - 8;
                                                                          *v58 = v889 << 8;
                                                                          *v887 = HIBYTE(v889);
                                                                          v887 += 2;
                                                                        }
                                                                        while (++v888 < v886);
                                                                      }
                                                                    }
                                                                    if (v390[271])
                                                                    {
                                                                      *(_DWORD *)(v4 + 36) = 0;
                                                                      v903 = (_DWORD *)(v4 + 36);
                                                                      LODWORD(v904) = 0;
                                                                      *(_QWORD *)(v4 + 40) = 0;
                                                                      if (v390[269] != 1)
                                                                        goto LABEL_1405;
LABEL_1403:
                                                                      if (v390[270] == 1
                                                                        && ((_DWORD)v904 != 0) == (*(_DWORD *)(v4 + 40) == 0))
                                                                      {
                                                                        return 4294967274;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      v905 = dav1d_get_bits(a2, 1u);
                                                                      v906 = v390[271];
                                                                      *(_DWORD *)(v4 + 36) = v905 != 0;
                                                                      v903 = (_DWORD *)(v4 + 36);
                                                                      if (v906 | v905
                                                                        || v390[270] == 1
                                                                        && v390[269] == 1
                                                                        && !*(_DWORD *)(v4 + 4))
                                                                      {
                                                                        LODWORD(v904) = 0;
                                                                        *(_QWORD *)(v4 + 40) = 0;
                                                                        if (v390[269] == 1)
                                                                          goto LABEL_1403;
                                                                      }
                                                                      else
                                                                      {
                                                                        v941 = dav1d_get_bits(a2, 4u);
                                                                        *(_DWORD *)(v4 + 40) = v941;
                                                                        if (v941 > 10)
                                                                          return 4294967274;
                                                                        v942 = v58;
                                                                        if (v941 >= 1)
                                                                        {
                                                                          *(_BYTE *)(v4 + 48) = dav1d_get_bits(a2, 8u);
                                                                          *(_BYTE *)(v4 + 49) = dav1d_get_bits(a2, 8u);
                                                                          if (*(int *)(v4 + 40) >= 2)
                                                                          {
                                                                            v943 = (_BYTE *)(v4 + 51);
                                                                            v944 = 1;
                                                                            do
                                                                            {
                                                                              v945 = dav1d_get_bits(a2, 8u);
                                                                              *(v943 - 1) = v945;
                                                                              if (*(v943 - 3) >= v945)
                                                                                return 4294967274;
                                                                              *v943 = dav1d_get_bits(a2, 8u);
                                                                              v943 += 2;
                                                                            }
                                                                            while (++v944 < *(int *)(v4 + 40));
                                                                          }
                                                                        }
                                                                        LODWORD(v904) = dav1d_get_bits(a2, 4u);
                                                                        *(_DWORD *)(v4 + 44) = v904;
                                                                        if ((int)v904 > 10)
                                                                          return 4294967274;
                                                                        if ((int)v904 >= 1)
                                                                        {
                                                                          *(_BYTE *)(v4 + 68) = dav1d_get_bits(a2, 8u);
                                                                          *(_BYTE *)(v4 + 69) = dav1d_get_bits(a2, 8u);
                                                                          LODWORD(v904) = *(_DWORD *)(v4 + 44);
                                                                          if ((int)v904 >= 2)
                                                                          {
                                                                            v946 = (_BYTE *)(v4 + 71);
                                                                            v947 = 1;
                                                                            do
                                                                            {
                                                                              v948 = dav1d_get_bits(a2, 8u);
                                                                              *(v946 - 1) = v948;
                                                                              if (*(v946 - 3) >= v948)
                                                                                return 4294967274;
                                                                              *v946 = dav1d_get_bits(a2, 8u);
                                                                              v946 += 2;
                                                                              ++v947;
                                                                              v904 = *(int *)(v4 + 44);
                                                                            }
                                                                            while (v947 < v904);
                                                                          }
                                                                        }
                                                                        v58 = v942;
                                                                        if (v390[269] == 1)
                                                                          goto LABEL_1403;
                                                                      }
                                                                    }
LABEL_1405:
                                                                    *(_DWORD *)(v4 + 88) = dav1d_get_bits(a2, 2u) + 8;
                                                                    v907 = dav1d_get_bits(a2, 2u);
                                                                    *(_DWORD *)(v4 + 92) = v907;
                                                                    v908 = 2 * (v907 + v907 * v907);
                                                                    v909 = *(_DWORD *)(v4 + 4);
                                                                    if (v909 && v908 >= 1)
                                                                    {
                                                                      v910 = (_BYTE *)(v4 + 96);
                                                                      v911 = (2 * (v907 + v907 * v907));
                                                                      while (1)
                                                                      {
                                                                        v914 = *v10;
                                                                        if (*v10 < 8)
                                                                          break;
                                                                        v912 = *v58;
                                                                        v913 = *v10;
LABEL_1409:
                                                                        *v10 = v913 - 8;
                                                                        *v58 = v912 << 8;
                                                                        *v910++ = HIBYTE(v912) ^ 0x80;
                                                                        if (!--v911)
                                                                          goto LABEL_1417;
                                                                      }
                                                                      v915 = *(_QWORD *)(a2 + 40);
                                                                      v916 = *(_DWORD *)(a2 + 4);
                                                                      v917 = *(unsigned __int8 **)(a2 + 24);
                                                                      v913 = v914 + 8;
                                                                      *(_DWORD *)(a2 + 16) = v914 + 8;
                                                                      if (v916)
                                                                      {
                                                                        v918 = 0;
                                                                        if ((unint64_t)v917 >= v915)
                                                                          goto LABEL_1413;
                                                                      }
                                                                      else
                                                                      {
                                                                        *(_QWORD *)(a2 + 24) = v917 + 1;
                                                                        v918 = *v917;
                                                                        if ((unint64_t)(v917 + 1) >= v915)
                                                                        {
LABEL_1413:
                                                                          *(_DWORD *)a2 = v916;
                                                                          *(_DWORD *)(a2 + 4) = 1;
                                                                        }
                                                                      }
                                                                      v912 = *v58 | (v918 << (56 - v914));
                                                                      goto LABEL_1409;
                                                                    }
LABEL_1417:
                                                                    if (*(_DWORD *)(v4 + 40) || *v903)
                                                                    {
                                                                      v919 = v908 | (unint64_t)(v909 != 0);
                                                                      if ((int)v919 >= 1)
                                                                      {
                                                                        v920 = (_BYTE *)(v4 + 120);
                                                                        v921 = v919;
                                                                        while (1)
                                                                        {
                                                                          v924 = *v10;
                                                                          if (*v10 < 8)
                                                                            break;
                                                                          v922 = *v58;
                                                                          v923 = *v10;
LABEL_1422:
                                                                          *v10 = v923 - 8;
                                                                          *v58 = v922 << 8;
                                                                          *v920++ = HIBYTE(v922) ^ 0x80;
                                                                          if (!--v921)
                                                                            goto LABEL_1430;
                                                                        }
                                                                        v925 = *(_QWORD *)(a2 + 40);
                                                                        v926 = *(_DWORD *)(a2 + 4);
                                                                        v927 = *(unsigned __int8 **)(a2 + 24);
                                                                        v923 = v924 + 8;
                                                                        *(_DWORD *)(a2 + 16) = v924 + 8;
                                                                        if (v926)
                                                                        {
                                                                          v928 = 0;
                                                                          if ((unint64_t)v927 >= v925)
                                                                            goto LABEL_1426;
                                                                        }
                                                                        else
                                                                        {
                                                                          *(_QWORD *)(a2 + 24) = v927 + 1;
                                                                          v928 = *v927;
                                                                          if ((unint64_t)(v927 + 1) >= v925)
                                                                          {
LABEL_1426:
                                                                            *(_DWORD *)a2 = v926;
                                                                            *(_DWORD *)(a2 + 4) = 1;
                                                                          }
                                                                        }
                                                                        v922 = *v58 | (v928 << (56
                                                                                              - v924));
                                                                        goto LABEL_1422;
                                                                      }
LABEL_1430:
                                                                      if (!v909)
                                                                        *(_BYTE *)(v4 + v919 + 120) = 0;
                                                                    }
                                                                    if (*(_DWORD *)(v4 + 44) || *v903)
                                                                    {
                                                                      v929 = *(_DWORD *)(v4 + 4);
                                                                      v930 = v908 | (unint64_t)(v929 != 0);
                                                                      if ((int)v930 >= 1)
                                                                      {
                                                                        v931 = (_BYTE *)(v4 + 148);
                                                                        v932 = v930;
                                                                        while (1)
                                                                        {
                                                                          v935 = *v10;
                                                                          if (*v10 < 8)
                                                                            break;
                                                                          v933 = *v58;
                                                                          v934 = *v10;
LABEL_1437:
                                                                          *v10 = v934 - 8;
                                                                          *v58 = v933 << 8;
                                                                          *v931++ = HIBYTE(v933) ^ 0x80;
                                                                          if (!--v932)
                                                                            goto LABEL_1445;
                                                                        }
                                                                        v936 = *(_QWORD *)(a2 + 40);
                                                                        v937 = *(_DWORD *)(a2 + 4);
                                                                        v938 = *(unsigned __int8 **)(a2 + 24);
                                                                        v934 = v935 + 8;
                                                                        *(_DWORD *)(a2 + 16) = v935 + 8;
                                                                        if (v937)
                                                                        {
                                                                          v939 = 0;
                                                                          if ((unint64_t)v938 >= v936)
                                                                            goto LABEL_1441;
                                                                        }
                                                                        else
                                                                        {
                                                                          *(_QWORD *)(a2 + 24) = v938 + 1;
                                                                          v939 = *v938;
                                                                          if ((unint64_t)(v938 + 1) >= v936)
                                                                          {
LABEL_1441:
                                                                            *(_DWORD *)a2 = v937;
                                                                            *(_DWORD *)(a2 + 4) = 1;
                                                                          }
                                                                        }
                                                                        v933 = *v58 | (v939 << (56
                                                                                              - v935));
                                                                        goto LABEL_1437;
                                                                      }
LABEL_1445:
                                                                      if (!v929)
                                                                        *(_BYTE *)(v4 + v930 + 148) = 0;
                                                                    }
                                                                    *(_QWORD *)(v4 + 176) = dav1d_get_bits(a2, 2u)
                                                                                          + 6;
                                                                    *(_DWORD *)(v4 + 184) = dav1d_get_bits(a2, 2u);
                                                                    if (*(_DWORD *)(v4 + 40))
                                                                    {
                                                                      *(_DWORD *)(v4 + 188) = dav1d_get_bits(a2, 8u)
                                                                                            - 128;
                                                                      *(_DWORD *)(v4 + 196) = dav1d_get_bits(a2, 8u)
                                                                                            - 128;
                                                                      *(_DWORD *)(v4 + 204) = dav1d_get_bits(a2, 9u)
                                                                                            - 256;
                                                                    }
                                                                    if (*(_DWORD *)(v4 + 44))
                                                                    {
                                                                      *(_DWORD *)(v4 + 192) = dav1d_get_bits(a2, 8u)
                                                                                            - 128;
                                                                      *(_DWORD *)(v4 + 200) = dav1d_get_bits(a2, 8u)
                                                                                            - 128;
                                                                      *(_DWORD *)(v4 + 208) = dav1d_get_bits(a2, 9u)
                                                                                            - 256;
                                                                    }
                                                                    *(_DWORD *)(v4 + 212) = dav1d_get_bits(a2, 1u);
                                                                    v940 = dav1d_get_bits(a2, 1u);
                                                                    result = 0;
                                                                    *(_DWORD *)(v4 + 216) = v940;
                                                                    return result;
                                                                  }
                                                                  v773 = 0;
                                                                  v774 = v4 + 1448;
                                                                  while (2)
                                                                  {
                                                                    while (2)
                                                                    {
                                                                      v775 = *v10;
                                                                      if (*v10)
                                                                      {
                                                                        v776 = *v58;
                                                                        v777 = v775 - 1;
                                                                        *v10 = v775 - 1;
                                                                        v778 = 2 * v776;
                                                                        *v58 = 2 * v776;
                                                                        if ((v776 & 0x8000000000000000) == 0)
                                                                          goto LABEL_1180;
                                                                        break;
                                                                      }
                                                                      v779 = *(_QWORD *)(a2 + 40);
                                                                      v780 = *(_DWORD *)(a2 + 4);
                                                                      v781 = *(unsigned __int8 **)(a2 + 24);
                                                                      *(_DWORD *)(a2 + 16) = 8;
                                                                      if (v780)
                                                                      {
                                                                        v782 = 0;
                                                                        if ((unint64_t)v781 >= v779)
                                                                          goto LABEL_1186;
                                                                      }
                                                                      else
                                                                      {
                                                                        *(_QWORD *)(a2 + 24) = v781 + 1;
                                                                        v782 = *v781;
                                                                        if ((unint64_t)(v781 + 1) >= v779)
                                                                        {
LABEL_1186:
                                                                          *(_DWORD *)a2 = v780;
                                                                          *(_DWORD *)(a2 + 4) = 1;
                                                                        }
                                                                      }
                                                                      v783 = *v58 | (v782 << 56);
                                                                      v775 = 8;
                                                                      v777 = 7;
                                                                      *v10 = 7;
                                                                      v778 = 2 * v783;
                                                                      *v58 = 2 * v783;
                                                                      if ((v783 & 0x8000000000000000) == 0)
                                                                      {
LABEL_1180:
                                                                        *(_DWORD *)(v774 + v773 - 24) = 0;
                                                                        v773 += 36;
                                                                        if (v773 == 252)
                                                                          goto LABEL_1174;
                                                                        continue;
                                                                      }
                                                                      break;
                                                                    }
                                                                    if (v777)
                                                                    {
                                                                      v784 = v777 - 1;
                                                                      *v10 = v777 - 1;
                                                                      v785 = 2 * v778;
                                                                      *v58 = 2 * v778;
                                                                      if ((v778 & 0x8000000000000000) == 0)
                                                                        goto LABEL_1190;
LABEL_1204:
                                                                      v790 = 2;
LABEL_1205:
                                                                      v796 = v774 + v773;
                                                                      *(_DWORD *)(v774 + v773 - 24) = v790;
                                                                      v797 = *(int *)(v4 + 304);
                                                                      v798 = (int *)&dav1d_default_wm_params;
                                                                      if ((_DWORD)v797 != 7)
                                                                      {
                                                                        v799 = a1[41 * *(int *)(v4 + 4 * v797 + 472)
                                                                                + 6235];
                                                                        if (!v799)
                                                                          return 4294967274;
                                                                        v798 = (int *)(v799 + v773 + 1424);
                                                                      }
                                                                      if (v790 <= 1)
                                                                      {
                                                                        if (*(_DWORD *)(v4 + 500))
                                                                          v800 = 9;
                                                                        else
                                                                          v800 = 8;
                                                                        if (*(_DWORD *)(v4 + 500))
                                                                          v803 = 13;
                                                                        else
                                                                          v803 = 14;
                                                                        v801 = *(_DWORD *)(v774 + v773 - 8);
                                                                      }
                                                                      else
                                                                      {
                                                                        v800 = 12;
                                                                        *(_DWORD *)(v774 + v773 - 12) = 2 * dav1d_get_bits_subexp(a2, (v798[3] - 0x10000) >> 1, 12) + 0x10000;
                                                                        v801 = 2
                                                                             * dav1d_get_bits_subexp(a2, v798[4] >> 1, 12);
                                                                        *(_DWORD *)(v774 + v773 - 8) = v801;
                                                                        if (*(_DWORD *)(v796 - 24) == 3)
                                                                        {
                                                                          *(_DWORD *)(v774 + v773 - 4) = 2 * dav1d_get_bits_subexp(a2, v798[5] >> 1, 12);
                                                                          v802 = 2
                                                                               * dav1d_get_bits_subexp(a2, (v798[6] - 0x10000) >> 1, 12)+ 0x10000;
                                                                          v803 = 10;
                                                                          goto LABEL_1220;
                                                                        }
                                                                        v803 = 10;
                                                                      }
                                                                      *(_DWORD *)(v774 + v773 - 4) = -v801;
                                                                      v802 = *(_DWORD *)(v774 + v773 - 12);
LABEL_1220:
                                                                      *(_DWORD *)(v774 + v773) = v802;
                                                                      *(_DWORD *)(v796 - 20) = dav1d_get_bits_subexp(a2, v798[1] >> v803, v800) << v803;
                                                                      *(_DWORD *)(v774 + v773 - 16) = dav1d_get_bits_subexp(a2, v798[2] >> v803, v800) << v803;
                                                                      v58 = v991;
                                                                      v390 = v992;
                                                                      v773 += 36;
                                                                      if (v773 == 252)
                                                                        goto LABEL_1174;
                                                                      continue;
                                                                    }
                                                                    break;
                                                                  }
                                                                  v791 = *(_QWORD *)(a2 + 40);
                                                                  v792 = *(_DWORD *)(a2 + 4);
                                                                  v793 = *(unsigned __int8 **)(a2 + 24);
                                                                  *(_DWORD *)(a2 + 16) = v775 + 7;
                                                                  if (v792)
                                                                  {
                                                                    v794 = 0;
                                                                    if ((unint64_t)v793 >= v791)
                                                                      goto LABEL_1202;
                                                                  }
                                                                  else
                                                                  {
                                                                    *(_QWORD *)(a2 + 24) = v793 + 1;
                                                                    v794 = *v793;
                                                                    if ((unint64_t)(v793 + 1) >= v791)
                                                                    {
LABEL_1202:
                                                                      *(_DWORD *)a2 = v792;
                                                                      *(_DWORD *)(a2 + 4) = 1;
                                                                    }
                                                                  }
                                                                  v795 = (v794 << (57 - v775)) | v778;
                                                                  v777 = 8;
                                                                  v784 = 7;
                                                                  *v10 = 7;
                                                                  v785 = 2 * v795;
                                                                  *v58 = 2 * v795;
                                                                  if (v795 < 0)
                                                                    goto LABEL_1204;
LABEL_1190:
                                                                  if (!v784)
                                                                  {
                                                                    v786 = *(_QWORD *)(a2 + 40);
                                                                    v787 = *(_DWORD *)(a2 + 4);
                                                                    v788 = *(unsigned __int8 **)(a2 + 24);
                                                                    *(_DWORD *)(a2 + 16) = v777 + 7;
                                                                    if (v787)
                                                                    {
                                                                      v789 = 0;
                                                                      if ((unint64_t)v788 >= v786)
                                                                        goto LABEL_1193;
                                                                    }
                                                                    else
                                                                    {
                                                                      *(_QWORD *)(a2 + 24) = v788 + 1;
                                                                      v789 = *v788;
                                                                      if ((unint64_t)(v788 + 1) >= v786)
                                                                      {
LABEL_1193:
                                                                        *(_DWORD *)a2 = v787;
                                                                        *(_DWORD *)(a2 + 4) = 1;
                                                                      }
                                                                    }
                                                                    v785 |= v789 << (57 - v777);
                                                                    v784 = 8;
                                                                  }
                                                                  *v10 = v784 - 1;
                                                                  *v58 = 2 * v785;
                                                                  if (v785 < 0)
                                                                    v790 = 1;
                                                                  else
                                                                    v790 = 3;
                                                                  goto LABEL_1205;
                                                                }
                                                                v863 = a1[41 * *(int *)(v4 + 4 * v862 + 472) + 6235];
                                                                if (v863)
                                                                {
                                                                  v864 = *(_OWORD *)(v863 + 1256);
                                                                  v865 = *(_OWORD *)(v863 + 1272);
                                                                  *(_QWORD *)(v4 + 1288) = *(_QWORD *)(v863 + 1288);
                                                                  *(_OWORD *)(v4 + 1272) = v865;
                                                                  *(_OWORD *)(v4 + 1256) = v864;
                                                                  goto LABEL_1320;
                                                                }
                                                                return 4294967274;
                                                              }
LABEL_992:
                                                              v667 = v664 - 1;
                                                              if (v664 != 1)
                                                                goto LABEL_1004;
LABEL_1000:
                                                              v673 = *(_QWORD *)(a2 + 40);
                                                              v674 = *(_DWORD *)(a2 + 4);
                                                              v675 = *(unsigned __int8 **)(a2 + 24);
                                                              *(_DWORD *)(a2 + 16) = v664 + 7;
                                                              if (v674)
                                                              {
                                                                v676 = 0;
                                                                if ((unint64_t)v675 >= v673)
                                                                  goto LABEL_1002;
                                                              }
                                                              else
                                                              {
                                                                *(_QWORD *)(a2 + 24) = v675 + 1;
                                                                v676 = *v675;
                                                                if ((unint64_t)(v675 + 1) >= v673)
                                                                {
LABEL_1002:
                                                                  *(_DWORD *)a2 = v674;
                                                                  *(_DWORD *)(a2 + 4) = 1;
                                                                }
                                                              }
                                                              v666 |= v676 << (57 - v664);
                                                              v667 = 8;
                                                              goto LABEL_1004;
                                                            }
LABEL_994:
                                                            *v10 = v653 - 3;
                                                            *v58 = 8 * v654;
                                                            *(_DWORD *)(v4 + 1140) = v585;
                                                            *(_DWORD *)(v4 + 1136) = 1;
                                                            *(v586 - 2) = v654 >> 61;
                                                            v664 = *v10;
                                                            if (!*v10)
                                                              goto LABEL_995;
LABEL_991:
                                                            v665 = *v58;
                                                            v666 = 2 * *v58;
                                                            *v58 = v666;
                                                            *(v586 - 1) = v665 >> 63;
                                                            if ((v665 & 0x8000000000000000) != 0)
                                                              goto LABEL_999;
                                                            goto LABEL_992;
                                                          }
LABEL_985:
                                                          *v10 = v640 - 7;
                                                          *v58 = v641 << 7;
                                                          *(_DWORD *)(v4 + 1140) = v585;
                                                          *(v586 - 3) = v641 >> 57;
                                                          v651 = *v10;
                                                          if (!*v10)
                                                            goto LABEL_986;
LABEL_979:
                                                          v652 = *v58;
                                                          v653 = v651 - 1;
                                                          *v10 = v651 - 1;
                                                          v654 = 2 * v652;
                                                          *v58 = 2 * v652;
                                                          if ((v652 & 0x8000000000000000) == 0)
                                                            goto LABEL_990;
                                                          if (v651 > 3)
                                                            goto LABEL_994;
                                                          v655 = *(_QWORD *)(a2 + 40);
                                                          v656 = *(_DWORD *)(a2 + 4);
                                                          v657 = *(unsigned __int8 **)(a2 + 24);
                                                          v653 = v651 + 7;
                                                          *(_DWORD *)(a2 + 16) = v651 + 7;
                                                          if (v656)
                                                          {
                                                            v658 = 0;
                                                            if ((unint64_t)v657 >= v655)
                                                              goto LABEL_983;
                                                          }
                                                          else
                                                          {
                                                            *(_QWORD *)(a2 + 24) = v657 + 1;
                                                            v658 = *v657;
                                                            if ((unint64_t)(v657 + 1) >= v655)
                                                            {
LABEL_983:
                                                              *(_DWORD *)a2 = v656;
                                                              *(_DWORD *)(a2 + 4) = 1;
                                                            }
                                                          }
                                                          v654 |= v658 << (57 - v651);
                                                          goto LABEL_994;
                                                        }
LABEL_973:
                                                        *v10 = v627 - 7;
                                                        *v58 = v628 << 7;
                                                        *(_DWORD *)(v4 + 1140) = v585;
                                                        *(v586 - 4) = v628 >> 57;
                                                        v638 = *v10;
                                                        if (!*v10)
                                                          goto LABEL_974;
LABEL_967:
                                                        v639 = *v58;
                                                        v640 = v638 - 1;
                                                        *v10 = v638 - 1;
                                                        v641 = 2 * v639;
                                                        *v58 = 2 * v639;
                                                        if ((v639 & 0x8000000000000000) == 0)
                                                          goto LABEL_978;
                                                        if (v638 > 7)
                                                          goto LABEL_985;
                                                        v642 = *(_QWORD *)(a2 + 40);
                                                        v643 = *(_DWORD *)(a2 + 4);
                                                        v644 = *(unsigned __int8 **)(a2 + 24);
                                                        v640 = v638 + 7;
                                                        *(_DWORD *)(a2 + 16) = v638 + 7;
                                                        if (v643)
                                                        {
                                                          v645 = 0;
                                                          if ((unint64_t)v644 >= v642)
                                                            goto LABEL_971;
                                                        }
                                                        else
                                                        {
                                                          *(_QWORD *)(a2 + 24) = v644 + 1;
                                                          v645 = *v644;
                                                          if ((unint64_t)(v644 + 1) >= v642)
                                                          {
LABEL_971:
                                                            *(_DWORD *)a2 = v643;
                                                            *(_DWORD *)(a2 + 4) = 1;
                                                          }
                                                        }
                                                        v641 |= v645 << (57 - v638);
                                                        goto LABEL_985;
                                                      }
LABEL_961:
                                                      *v10 = v614 - 7;
                                                      *v58 = v615 << 7;
                                                      *(_DWORD *)(v4 + 1140) = v585;
                                                      *(v586 - 5) = v615 >> 57;
                                                      v625 = *v10;
                                                      if (!*v10)
                                                        goto LABEL_962;
LABEL_955:
                                                      v626 = *v58;
                                                      v627 = v625 - 1;
                                                      *v10 = v625 - 1;
                                                      v628 = 2 * v626;
                                                      *v58 = 2 * v626;
                                                      if ((v626 & 0x8000000000000000) == 0)
                                                        goto LABEL_966;
                                                      if (v625 > 7)
                                                        goto LABEL_973;
                                                      v629 = *(_QWORD *)(a2 + 40);
                                                      v630 = *(_DWORD *)(a2 + 4);
                                                      v631 = *(unsigned __int8 **)(a2 + 24);
                                                      v627 = v625 + 7;
                                                      *(_DWORD *)(a2 + 16) = v625 + 7;
                                                      if (v630)
                                                      {
                                                        v632 = 0;
                                                        if ((unint64_t)v631 >= v629)
                                                          goto LABEL_959;
                                                      }
                                                      else
                                                      {
                                                        *(_QWORD *)(a2 + 24) = v631 + 1;
                                                        v632 = *v631;
                                                        if ((unint64_t)(v631 + 1) >= v629)
                                                        {
LABEL_959:
                                                          *(_DWORD *)a2 = v630;
                                                          *(_DWORD *)(a2 + 4) = 1;
                                                        }
                                                      }
                                                      v628 |= v632 << (57 - v625);
                                                      goto LABEL_973;
                                                    }
LABEL_949:
                                                    *v10 = v597 - 7;
                                                    *v58 = v598 << 7;
                                                    *(_DWORD *)(v4 + 1140) = v585;
                                                    *(v586 - 6) = v598 >> 57;
                                                    v612 = *v10;
                                                    if (!*v10)
                                                      goto LABEL_950;
LABEL_943:
                                                    v613 = *v58;
                                                    v614 = v612 - 1;
                                                    *v10 = v612 - 1;
                                                    v615 = 2 * v613;
                                                    *v58 = 2 * v613;
                                                    if ((v613 & 0x8000000000000000) == 0)
                                                      goto LABEL_954;
                                                    if (v612 > 7)
                                                      goto LABEL_961;
                                                    v616 = *(_QWORD *)(a2 + 40);
                                                    v617 = *(_DWORD *)(a2 + 4);
                                                    v618 = *(unsigned __int8 **)(a2 + 24);
                                                    v614 = v612 + 7;
                                                    *(_DWORD *)(a2 + 16) = v612 + 7;
                                                    if (v617)
                                                    {
                                                      v619 = 0;
                                                      if ((unint64_t)v618 >= v616)
                                                        goto LABEL_947;
                                                    }
                                                    else
                                                    {
                                                      *(_QWORD *)(a2 + 24) = v618 + 1;
                                                      v619 = *v618;
                                                      if ((unint64_t)(v618 + 1) >= v616)
                                                      {
LABEL_947:
                                                        *(_DWORD *)a2 = v617;
                                                        *(_DWORD *)(a2 + 4) = 1;
                                                      }
                                                    }
                                                    v615 |= v619 << (57 - v612);
                                                    goto LABEL_961;
                                                  }
LABEL_921:
                                                  v596 = *v58;
                                                  v597 = v595 - 1;
                                                  *v10 = v595 - 1;
                                                  v598 = 2 * v596;
                                                  *v58 = 2 * v596;
                                                  if ((v596 & 0x8000000000000000) == 0)
                                                    goto LABEL_942;
                                                  if (v595 > 7)
                                                    goto LABEL_949;
                                                  v599 = *(_QWORD *)(a2 + 40);
                                                  v600 = *(_DWORD *)(a2 + 4);
                                                  v601 = *(unsigned __int8 **)(a2 + 24);
                                                  v597 = v595 + 7;
                                                  *(_DWORD *)(a2 + 16) = v595 + 7;
                                                  if (v600)
                                                  {
                                                    v602 = 0;
                                                    if ((unint64_t)v601 >= v599)
                                                      goto LABEL_925;
                                                  }
                                                  else
                                                  {
                                                    *(_QWORD *)(a2 + 24) = v601 + 1;
                                                    v602 = *v601;
                                                    if ((unint64_t)(v601 + 1) >= v599)
                                                    {
LABEL_925:
                                                      *(_DWORD *)a2 = v600;
                                                      *(_DWORD *)(a2 + 4) = 1;
                                                    }
                                                  }
                                                  v598 |= v602 << (57 - v595);
                                                  goto LABEL_949;
                                                }
LABEL_920:
                                                *(v586 - 7) = 0;
                                                v595 = *v10;
                                                if (!*v10)
                                                  goto LABEL_938;
                                                goto LABEL_921;
                                              }
                                              break;
                                            }
                                            v590 = *(_QWORD *)(a2 + 40);
                                            v591 = *(_DWORD *)(a2 + 4);
                                            v592 = *(unsigned __int8 **)(a2 + 24);
                                            *(_DWORD *)(a2 + 16) = 8;
                                            if (v591)
                                            {
                                              v593 = 0;
                                              if ((unint64_t)v592 >= v590)
                                                goto LABEL_918;
                                            }
                                            else
                                            {
                                              *(_QWORD *)(a2 + 24) = v592 + 1;
                                              v593 = *v592;
                                              if ((unint64_t)(v592 + 1) >= v590)
                                              {
LABEL_918:
                                                *(_DWORD *)a2 = v591;
                                                *(_DWORD *)(a2 + 4) = 1;
                                              }
                                            }
                                            v594 = v567 | (v593 << 56);
                                            v587 = 7;
                                            *v10 = 7;
                                            v588 = 2 * v594;
                                            *v58 = 2 * v594;
                                            if ((v594 & 0x8000000000000000) != 0)
                                              goto LABEL_927;
                                            goto LABEL_920;
                                          }
LABEL_847:
                                          if (v430 <= 4)
                                          {
                                            v547 = *(_QWORD *)(a2 + 40);
                                            v548 = *(_DWORD *)(a2 + 4);
                                            v549 = *(unsigned __int8 **)(a2 + 24);
                                            v432 = v430 + 7;
                                            *(_DWORD *)(a2 + 16) = v430 + 7;
                                            if (v548)
                                            {
                                              v550 = 0;
                                            }
                                            else
                                            {
                                              *(_QWORD *)(a2 + 24) = v549 + 1;
                                              v550 = *v549++;
                                            }
                                            if ((unint64_t)v549 >= v547)
                                            {
                                              *(_DWORD *)a2 = v548;
                                              *(_DWORD *)(a2 + 4) = 1;
                                            }
                                            v433 |= v550 << (57 - v430);
                                          }
                                          v551 = v432 - 4;
                                          v552 = 16 * v433;
                                          *v58 = 16 * v433;
                                          *(_DWORD *)(v4 + 852) = v433 >> 60;
                                          if (v432 - 4 <= 3)
                                          {
                                            v553 = *(_QWORD *)(a2 + 40);
                                            v554 = *(_DWORD *)(a2 + 4);
                                            v555 = *(unsigned __int8 **)(a2 + 24);
                                            v551 = v432 + 4;
                                            *(_DWORD *)(a2 + 16) = v432 + 4;
                                            if (v554)
                                            {
                                              v556 = 0;
                                            }
                                            else
                                            {
                                              *(_QWORD *)(a2 + 24) = v555 + 1;
                                              v556 = *v555++;
                                            }
                                            if ((unint64_t)v555 >= v553)
                                            {
                                              *(_DWORD *)a2 = v554;
                                              *(_DWORD *)(a2 + 4) = 1;
                                            }
                                            v552 |= v556 << (60 - v432);
                                          }
                                          v432 = v551 - 4;
                                          v433 = 16 * v552;
                                          *v58 = 16 * v552;
                                          v557 = v552 >> 60;
                                          *(_DWORD *)(v4 + 856) = v557;
                                          if (v390[273])
                                          {
                                            if (v432 <= 3)
                                            {
                                              v558 = *(_QWORD *)(a2 + 40);
                                              v559 = *(_DWORD *)(a2 + 4);
                                              v560 = *(unsigned __int8 **)(a2 + 24);
                                              v432 = v551 + 4;
                                              *(_DWORD *)(a2 + 16) = v551 + 4;
                                              if (v559)
                                              {
                                                v561 = 0;
                                              }
                                              else
                                              {
                                                *(_QWORD *)(a2 + 24) = v560 + 1;
                                                v561 = *v560++;
                                              }
                                              if ((unint64_t)v560 >= v558)
                                              {
                                                *(_DWORD *)a2 = v559;
                                                *(_DWORD *)(a2 + 4) = 1;
                                              }
                                              v433 |= v561 << (60 - v551);
                                            }
                                            v432 -= 4;
                                            v557 = v433 >> 60;
                                            v433 *= 16;
                                            *v58 = v433;
                                          }
                                          *(_DWORD *)(v4 + 860) = v557;
                                          if (v432)
                                            goto LABEL_877;
LABEL_873:
                                          v562 = *(_QWORD *)(a2 + 40);
                                          v563 = *(_DWORD *)(a2 + 4);
                                          v564 = *(unsigned __int8 **)(a2 + 24);
                                          *(_DWORD *)(a2 + 16) = 8;
                                          if (v563)
                                          {
                                            v565 = 0;
                                            if ((unint64_t)v564 >= v562)
                                              goto LABEL_875;
                                          }
                                          else
                                          {
                                            *(_QWORD *)(a2 + 24) = v564 + 1;
                                            v565 = *v564;
                                            if ((unint64_t)(v564 + 1) >= v562)
                                            {
LABEL_875:
                                              *(_DWORD *)a2 = v563;
                                              *(_DWORD *)(a2 + 4) = 1;
                                            }
                                          }
                                          v433 |= v565 << 56;
                                          v432 = 8;
                                          goto LABEL_877;
                                        }
                                        v430 = 7;
LABEL_799:
                                        v430 -= 7;
                                        v509 = v431 >> 57;
                                        v431 <<= 7;
                                        *v58 = v431;
                                        *(_DWORD *)(v4 + 836) = v509;
                                        if ((_DWORD)v458)
                                          goto LABEL_800;
LABEL_803:
                                        *(_DWORD *)(v4 + 840) = v499;
                                        *(_DWORD *)(v4 + 844) = v509;
                                        if (!v430)
                                          goto LABEL_843;
                                        goto LABEL_662;
                                      }
LABEL_780:
                                      v430 = v497 - 1;
                                      v431 = 2 * v498;
                                      *v58 = 2 * v498;
                                      if (v498 < 0)
                                      {
                                        if (v497 <= 7)
                                        {
                                          v514 = *(_QWORD *)(a2 + 40);
                                          v515 = *(_DWORD *)(a2 + 4);
                                          v516 = *(unsigned __int8 **)(a2 + 24);
                                          v430 = v497 + 7;
                                          *(_DWORD *)(a2 + 16) = v497 + 7;
                                          if (v515)
                                          {
                                            v517 = 0;
                                          }
                                          else
                                          {
                                            *(_QWORD *)(a2 + 24) = v516 + 1;
                                            v517 = *v516++;
                                          }
                                          if ((unint64_t)v516 >= v514)
                                          {
                                            *(_DWORD *)a2 = v515;
                                            *(_DWORD *)(a2 + 4) = 1;
                                          }
                                          v431 |= v517 << (57 - v497);
                                        }
                                        goto LABEL_799;
                                      }
                                      LODWORD(v509) = 0;
                                      *(_DWORD *)(v4 + 836) = 0;
                                      if (!(_DWORD)v458)
                                        goto LABEL_803;
LABEL_800:
                                      if (v430)
                                        goto LABEL_801;
                                      v522 = *(_QWORD *)(a2 + 40);
                                      v523 = *(_DWORD *)(a2 + 4);
                                      v524 = *(unsigned __int8 **)(a2 + 24);
                                      *(_DWORD *)(a2 + 16) = 8;
                                      if (v523)
                                      {
                                        v525 = 0;
                                      }
                                      else
                                      {
                                        *(_QWORD *)(a2 + 24) = v524 + 1;
                                        v525 = *v524++;
                                      }
                                      if ((unint64_t)v524 >= v522)
                                      {
                                        *(_DWORD *)a2 = v523;
                                        *(_DWORD *)(a2 + 4) = 1;
                                      }
                                      v530 = v431 | (v525 << 56);
                                      v520 = 2 * v530;
                                      *v58 = 2 * v530;
                                      if (v530 < 0)
                                      {
                                        v519 = 7;
                                        goto LABEL_824;
                                      }
                                      *(_DWORD *)(v4 + 840) = 0;
                                      v519 = 7;
LABEL_826:
                                      v430 = v519 - 1;
                                      v431 = 2 * v520;
                                      *v58 = 2 * v520;
                                      if (v520 < 0)
                                      {
                                        if (v519 <= 7)
                                        {
                                          v532 = *(_QWORD *)(a2 + 40);
                                          v533 = *(_DWORD *)(a2 + 4);
                                          v534 = *(unsigned __int8 **)(a2 + 24);
                                          v430 = v519 + 7;
                                          *(_DWORD *)(a2 + 16) = v519 + 7;
                                          if (v533)
                                          {
                                            v535 = 0;
                                          }
                                          else
                                          {
                                            *(_QWORD *)(a2 + 24) = v534 + 1;
                                            v535 = *v534++;
                                          }
                                          if ((unint64_t)v534 >= v532)
                                          {
                                            *(_DWORD *)a2 = v533;
                                            *(_DWORD *)(a2 + 4) = 1;
                                          }
                                          v431 |= v535 << (57 - v519);
                                        }
                                        goto LABEL_842;
                                      }
LABEL_836:
                                      *(_DWORD *)(v4 + 844) = 0;
                                      if (v430)
                                        goto LABEL_662;
LABEL_843:
                                      v542 = *(_QWORD *)(a2 + 40);
                                      v543 = *(_DWORD *)(a2 + 4);
                                      v544 = *(unsigned __int8 **)(a2 + 24);
                                      *(_DWORD *)(a2 + 16) = 8;
                                      if (v543)
                                      {
                                        v545 = 0;
                                        if ((unint64_t)v544 >= v542)
                                          goto LABEL_845;
                                      }
                                      else
                                      {
                                        *(_QWORD *)(a2 + 24) = v544 + 1;
                                        v545 = *v544;
                                        if ((unint64_t)(v544 + 1) >= v542)
                                        {
LABEL_845:
                                          *(_DWORD *)a2 = v543;
                                          *(_DWORD *)(a2 + 4) = 1;
                                        }
                                      }
                                      v546 = v431 | (v545 << 56);
                                      v430 = 8;
                                      v432 = 7;
                                      v433 = 2 * v546;
                                      *v58 = 2 * v546;
                                      *(_DWORD *)(v4 + 848) = v546 >> 63;
                                      if ((v546 & 0x8000000000000000) == 0)
                                        goto LABEL_663;
                                      goto LABEL_847;
                                    }
                                    if (v430 <= 7)
                                    {
                                      v504 = *(_QWORD *)(a2 + 40);
                                      v505 = *(_DWORD *)(a2 + 4);
                                      v506 = *(unsigned __int8 **)(a2 + 24);
                                      v497 = v430 + 7;
                                      *(_DWORD *)(a2 + 16) = v430 + 7;
                                      if (v505)
                                      {
                                        v507 = 0;
                                      }
                                      else
                                      {
                                        *(_QWORD *)(a2 + 24) = v506 + 1;
                                        v507 = *v506++;
                                      }
                                      if ((unint64_t)v506 >= v504)
                                      {
                                        *(_DWORD *)a2 = v505;
                                        *(_DWORD *)(a2 + 4) = 1;
                                      }
                                      v498 |= v507 << (57 - v430);
                                    }
                                  }
                                  else
                                  {
                                    v500 = *(_QWORD *)(a2 + 40);
                                    v501 = *(_DWORD *)(a2 + 4);
                                    v502 = *(unsigned __int8 **)(a2 + 24);
                                    *(_DWORD *)(a2 + 16) = 8;
                                    if (v501)
                                    {
                                      v503 = 0;
                                    }
                                    else
                                    {
                                      *(_QWORD *)(a2 + 24) = v502 + 1;
                                      v503 = *v502++;
                                    }
                                    if ((unint64_t)v502 >= v500)
                                    {
                                      *(_DWORD *)a2 = v501;
                                      *(_DWORD *)(a2 + 4) = 1;
                                    }
                                    v508 = v431 | (v503 << 56);
                                    v498 = 2 * v508;
                                    *v58 = 2 * v508;
                                    if ((v508 & 0x8000000000000000) == 0)
                                    {
                                      LODWORD(v499) = 0;
                                      *(_DWORD *)(v4 + 832) = 0;
                                      v497 = 7;
                                      goto LABEL_780;
                                    }
                                    v497 = 7;
                                  }
                                  v497 -= 7;
                                  v499 = v498 >> 57;
                                  v498 <<= 7;
                                  *v58 = v498;
                                  *(_DWORD *)(v4 + 832) = v499;
                                  if (!v497)
                                    goto LABEL_783;
                                  goto LABEL_780;
                                }
LABEL_661:
                                if (!v430)
                                  goto LABEL_843;
                                goto LABEL_662;
                              }
LABEL_660:
                              *(_DWORD *)(v4 + 828) = 0;
                              if (!v390[271])
                                goto LABEL_696;
                              goto LABEL_661;
                            }
LABEL_659:
                            v430 = v429 - 1;
                            v431 = 2 * v427;
                            *v58 = 2 * v427;
                            if (v427 < 0)
                              goto LABEL_684;
                            goto LABEL_660;
                          }
                        }
                        else
                        {
                          *(_DWORD *)(v4 + 820) = 0;
                          v420 = *v10;
                          *(_DWORD *)(v4 + 524) = 0;
                          if (v420 >= 8)
                            goto LABEL_679;
                        }
                        v421 = *(_QWORD *)(a2 + 40);
                        v422 = *(_DWORD *)(a2 + 4);
                        v423 = *(unsigned __int8 **)(a2 + 24);
                        v424 = v420 + 8;
                        *(_DWORD *)(a2 + 16) = v420 + 8;
                        if (v422)
                        {
                          v425 = 0;
                          if ((unint64_t)v423 >= v421)
                            goto LABEL_657;
                        }
                        else
                        {
                          *(_QWORD *)(a2 + 24) = v423 + 1;
                          v425 = *v423;
                          if ((unint64_t)(v423 + 1) >= v421)
                          {
LABEL_657:
                            *(_DWORD *)a2 = v422;
                            *(_DWORD *)(a2 + 4) = 1;
                          }
                        }
                        v426 = *v58 | (v425 << (56 - v420));
                        v420 += 8;
                        v427 = v426 << 8;
                        *v58 = v426 << 8;
                        v428 = HIBYTE(v426);
                        *(_DWORD *)(v4 + 824) = HIBYTE(v426);
                        v429 = v424 - 8;
                        if (v424 == 8)
                          goto LABEL_680;
                        goto LABEL_659;
                      }
                      *(_DWORD *)(v4 + 536) = v371;
                      if (v371 < v374)
                      {
                        v389 = v986;
                        v390 = v992;
                        while (2)
                        {
                          if (v363)
                            goto LABEL_589;
                          v391 = *(_QWORD *)(a2 + 40);
                          v392 = *(_DWORD *)(a2 + 4);
                          v393 = *(unsigned __int8 **)(a2 + 24);
                          *(_DWORD *)(a2 + 16) = 8;
                          if (v392)
                          {
                            v394 = 0;
                            if ((unint64_t)v393 >= v391)
                              goto LABEL_587;
                          }
                          else
                          {
                            *(_QWORD *)(a2 + 24) = v393 + 1;
                            v394 = *v393;
                            if ((unint64_t)(v393 + 1) >= v391)
                            {
LABEL_587:
                              *(_DWORD *)a2 = v392;
                              *(_DWORD *)(a2 + 4) = 1;
                            }
                          }
                          v364 |= v394 << 56;
                          v363 = 8;
LABEL_589:
                          v395 = v364;
                          *v10 = --v363;
                          v364 *= 2;
                          *v58 = v364;
                          if ((v395 & 0x8000000000000000) == 0)
                            goto LABEL_619;
                          *(_DWORD *)(v4 + 536) = ++v371;
                          if (v371 >= v374)
                            goto LABEL_619;
                          continue;
                        }
                      }
                      v389 = v986;
                      v390 = v992;
LABEL_619:
                      if (v368 < 1)
                      {
                        LODWORD(v406) = 0;
                      }
                      else
                      {
                        v407 = 0;
                        v406 = 0;
                        do
                        {
                          *(_WORD *)(v4 + 560 + 2 * v406++) = v407;
                          v407 += ((v368 - 1) >> v371) + 1;
                        }
                        while (v407 < v368);
                      }
                      *(_DWORD *)(v4 + 540) = v406;
                      v405 = (v381 - v371) & ~((int)(v381 - v371) >> 31);
                      *(_DWORD *)(v4 + 544) = v405;
                      *(_DWORD *)(v4 + 552) = v405;
                      if (v405 >= v377)
                      {
LABEL_639:
                        if (v375 < 1)
                        {
                          LODWORD(v400) = 0;
                        }
                        else
                        {
                          v413 = 0;
                          v400 = 0;
                          do
                          {
                            *(_WORD *)(v4 + 690 + 2 * v400++) = v413;
                            v413 += ((v375 - 1) >> v405) + 1;
                          }
                          while (v413 < v375);
                        }
                        *(_DWORD *)(v4 + 556) = v400;
                        goto LABEL_645;
                      }
                      while (2)
                      {
                        if (!v363)
                        {
                          v409 = *(_QWORD *)(a2 + 40);
                          v410 = *(_DWORD *)(a2 + 4);
                          v411 = *(unsigned __int8 **)(a2 + 24);
                          *(_DWORD *)(a2 + 16) = 8;
                          if (v410)
                          {
                            v412 = 0;
                            if ((unint64_t)v411 >= v409)
                              goto LABEL_632;
                          }
                          else
                          {
                            *(_QWORD *)(a2 + 24) = v411 + 1;
                            v412 = *v411;
                            if ((unint64_t)(v411 + 1) >= v409)
                            {
LABEL_632:
                              *(_DWORD *)a2 = v410;
                              *(_DWORD *)(a2 + 4) = 1;
                            }
                          }
                          v364 |= v412 << 56;
                          v363 = 8;
                        }
                        *v10 = --v363;
                        *v58 = 2 * v364;
                        if ((v364 & 0x8000000000000000) == 0)
                          goto LABEL_639;
                        *(_DWORD *)(v4 + 552) = ++v405;
                        v364 *= 2;
                        if (v405 >= v377)
                          goto LABEL_639;
                        continue;
                      }
                    }
                    *(_DWORD *)(v4 + 464) = 0;
                    if (v7 == 3)
                    {
                      *(_DWORD *)(v4 + 440) = 255;
                      if (!(_DWORD)v8)
                      {
LABEL_154:
                        if (v76)
                          goto LABEL_333;
LABEL_354:
                        v988 = v6;
                        v251 = (_DWORD *)(v4 + 468);
                        *(_DWORD *)(v4 + 468) = 0;
LABEL_355:
                        v262 = v3 + 251;
                        v263 = (_DWORD *)(v4 + 268);
                        v264 = v3 + 252;
                        goto LABEL_356;
                      }
LABEL_204:
                      if (!v76)
                        goto LABEL_354;
                      v150 = v3[265];
                      v151 = *v10;
                      if (*v10 >= v150)
                      {
                        v199 = v151 - v150;
                        v200 = *v58 << v150;
                        *v58 = v200;
                        if (v199 < v150)
                          goto LABEL_288;
                        goto LABEL_279;
                      }
                      v152 = 0;
                      v153 = *(_QWORD *)(a2 + 40);
                      v154 = *(_DWORD *)(a2 + 4);
                      v155 = *(unsigned __int8 **)(a2 + 24);
                      while (2)
                      {
                        v152 <<= 8;
                        v151 += 8;
                        *v10 = v151;
                        if (v154)
                        {
                          if ((unint64_t)v155 >= v153)
                          {
LABEL_212:
                            *(_DWORD *)a2 = v154;
                            v154 = 1;
                            *(_DWORD *)(a2 + 4) = 1;
                          }
                        }
                        else
                        {
                          *(_QWORD *)(a2 + 24) = v155 + 1;
                          v152 |= *v155++;
                          if ((unint64_t)v155 >= v153)
                            goto LABEL_212;
                        }
                        if (v151 >= v150)
                        {
                          v207 = *v58 | (v152 << -(char)v151);
                          v199 = v151 - v150;
                          v200 = v207 << v150;
                          *v58 = v200;
                          if (v199 < v150)
                          {
LABEL_288:
                            v208 = 0;
                            v209 = *(_QWORD *)(a2 + 40);
                            v210 = *(_DWORD *)(a2 + 4);
                            v211 = *(unsigned __int8 **)(a2 + 24);
                            while (1)
                            {
                              v208 <<= 8;
                              v199 += 8;
                              *v10 = v199;
                              if (v210)
                              {
                                if ((unint64_t)v211 >= v209)
                                  goto LABEL_294;
                              }
                              else
                              {
                                *(_QWORD *)(a2 + 24) = v211 + 1;
                                v208 |= *v211++;
                                if ((unint64_t)v211 >= v209)
                                {
LABEL_294:
                                  *(_DWORD *)a2 = v210;
                                  v210 = 1;
                                  *(_DWORD *)(a2 + 4) = 1;
                                }
                              }
                              if (v199 >= v150)
                              {
                                v221 = v208 << -(char)v199;
                                v201 = v199 - v150;
                                v202 = (v221 | v200) << v150;
                                *v58 = v202;
                                if (v201 >= v150)
                                {
LABEL_305:
                                  v213 = v201 - v150;
                                  v214 = v202 << v150;
                                  *v58 = v214;
                                  if (v213 >= v150)
                                  {
LABEL_296:
                                    v215 = v213 - v150;
                                    v216 = v214 << v150;
                                    *v58 = v216;
                                    if (v215 >= v150)
                                      goto LABEL_323;
                                    goto LABEL_297;
                                  }
LABEL_306:
                                  v222 = 0;
                                  v223 = *(_QWORD *)(a2 + 40);
                                  v224 = *(_DWORD *)(a2 + 4);
                                  v225 = *(unsigned __int8 **)(a2 + 24);
                                  while (2)
                                  {
                                    v222 <<= 8;
                                    v213 += 8;
                                    *v10 = v213;
                                    if (v224)
                                    {
                                      if ((unint64_t)v225 >= v223)
                                      {
LABEL_312:
                                        *(_DWORD *)a2 = v224;
                                        v224 = 1;
                                        *(_DWORD *)(a2 + 4) = 1;
                                      }
                                    }
                                    else
                                    {
                                      *(_QWORD *)(a2 + 24) = v225 + 1;
                                      v222 |= *v225++;
                                      if ((unint64_t)v225 >= v223)
                                        goto LABEL_312;
                                    }
                                    if (v213 >= v150)
                                    {
                                      v235 = v222 << -(char)v213;
                                      v215 = v213 - v150;
                                      v216 = (v235 | v214) << v150;
                                      *v58 = v216;
                                      if (v215 >= v150)
                                      {
LABEL_323:
                                        v227 = v215 - v150;
                                        v228 = v216 << v150;
                                        *v58 = v228;
                                        if (v227 >= v150)
                                        {
LABEL_314:
                                          v229 = v227 - v150;
                                          v230 = v228 << v150;
                                          *v58 = v230;
                                          if (v229 >= v150)
                                            goto LABEL_345;
                                          goto LABEL_315;
                                        }
LABEL_324:
                                        v236 = 0;
                                        v237 = *(_QWORD *)(a2 + 40);
                                        v238 = *(_DWORD *)(a2 + 4);
                                        v239 = *(unsigned __int8 **)(a2 + 24);
                                        while (2)
                                        {
                                          v236 <<= 8;
                                          v227 += 8;
                                          *v10 = v227;
                                          if (v238)
                                          {
                                            if ((unint64_t)v239 >= v237)
                                            {
LABEL_330:
                                              *(_DWORD *)a2 = v238;
                                              v238 = 1;
                                              *(_DWORD *)(a2 + 4) = 1;
                                            }
                                          }
                                          else
                                          {
                                            *(_QWORD *)(a2 + 24) = v239 + 1;
                                            v236 |= *v239++;
                                            if ((unint64_t)v239 >= v237)
                                              goto LABEL_330;
                                          }
                                          if (v227 >= v150)
                                          {
                                            v257 = v236 << -(char)v227;
                                            v229 = v227 - v150;
                                            v230 = (v257 | v228) << v150;
                                            *v58 = v230;
                                            if (v229 >= v150)
                                            {
LABEL_345:
                                              v241 = v229 - v150;
                                              v242 = v230 << v150;
                                              *v58 = v242;
                                              if (v241 >= v150)
                                                goto LABEL_332;
                                              goto LABEL_346;
                                            }
LABEL_315:
                                            v231 = 0;
                                            v232 = *(_QWORD *)(a2 + 40);
                                            v233 = *(_DWORD *)(a2 + 4);
                                            v234 = *(unsigned __int8 **)(a2 + 24);
                                            while (2)
                                            {
                                              v231 <<= 8;
                                              v229 += 8;
                                              *v10 = v229;
                                              if (v233)
                                              {
                                                if ((unint64_t)v234 >= v232)
                                                {
LABEL_321:
                                                  *(_DWORD *)a2 = v233;
                                                  v233 = 1;
                                                  *(_DWORD *)(a2 + 4) = 1;
                                                }
                                              }
                                              else
                                              {
                                                *(_QWORD *)(a2 + 24) = v234 + 1;
                                                v231 |= *v234++;
                                                if ((unint64_t)v234 >= v232)
                                                  goto LABEL_321;
                                              }
                                              if (v229 >= v150)
                                              {
                                                v240 = v231 << -(char)v229;
                                                v241 = v229 - v150;
                                                v242 = (v240 | v230) << v150;
                                                *v58 = v242;
                                                if (v241 >= v150)
                                                {
LABEL_332:
                                                  *v10 = v241 - v150;
                                                  *v58 = v242 << v150;
                                                  goto LABEL_333;
                                                }
LABEL_346:
                                                v258 = 0;
                                                v259 = *(_QWORD *)(a2 + 40);
                                                v260 = *(_DWORD *)(a2 + 4);
                                                v261 = *(unsigned __int8 **)(a2 + 24);
                                                while (2)
                                                {
                                                  v258 <<= 8;
                                                  v241 += 8;
                                                  *v10 = v241;
                                                  if (v260)
                                                  {
                                                    if ((unint64_t)v261 >= v259)
                                                    {
LABEL_352:
                                                      *(_DWORD *)a2 = v260;
                                                      v260 = 1;
                                                      *(_DWORD *)(a2 + 4) = 1;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    *(_QWORD *)(a2 + 24) = v261 + 1;
                                                    v258 |= *v261++;
                                                    if ((unint64_t)v261 >= v259)
                                                      goto LABEL_352;
                                                  }
                                                  if (v241 >= v150)
                                                  {
                                                    *v10 = v241 - v150;
                                                    *v58 = ((v258 << -(char)v241) | v242) << v150;
LABEL_333:
                                                    v243 = *v10;
                                                    if (*v10)
                                                    {
                                                      v244 = *v58;
                                                      goto LABEL_339;
                                                    }
                                                    v245 = *(_QWORD *)(a2 + 40);
                                                    v246 = *(_DWORD *)(a2 + 4);
                                                    v247 = *(unsigned __int8 **)(a2 + 24);
                                                    *(_DWORD *)(a2 + 16) = 8;
                                                    if (v246)
                                                    {
                                                      v248 = 0;
                                                      if ((unint64_t)v247 >= v245)
                                                        goto LABEL_337;
                                                    }
                                                    else
                                                    {
                                                      *(_QWORD *)(a2 + 24) = v247 + 1;
                                                      v248 = *v247;
                                                      if ((unint64_t)(v247 + 1) >= v245)
                                                      {
LABEL_337:
                                                        *(_DWORD *)a2 = v246;
                                                        *(_DWORD *)(a2 + 4) = 1;
                                                      }
                                                    }
                                                    v244 = *v58 | (v248 << 56);
                                                    v243 = 8;
LABEL_339:
                                                    v249 = v243 - 1;
                                                    *v10 = v243 - 1;
                                                    v250 = 2 * v244;
                                                    *v58 = 2 * v244;
                                                    v251 = (_DWORD *)(v4 + 468);
                                                    *(_DWORD *)(v4 + 468) = v244 >> 63;
                                                    if ((v244 & 0x8000000000000000) == 0)
                                                    {
                                                      v988 = v6;
                                                      goto LABEL_355;
                                                    }
                                                    v252 = a1 + 6235;
                                                    if (v243 <= 3)
                                                    {
                                                      v253 = *(_QWORD *)(a2 + 40);
                                                      v254 = *(_DWORD *)(a2 + 4);
                                                      v255 = *(unsigned __int8 **)(a2 + 24);
                                                      v249 = v243 + 7;
                                                      *(_DWORD *)(a2 + 16) = v243 + 7;
                                                      if (v254)
                                                      {
                                                        v256 = 0;
                                                      }
                                                      else
                                                      {
                                                        *(_QWORD *)(a2 + 24) = v255 + 1;
                                                        v256 = *v255++;
                                                      }
                                                      if ((unint64_t)v255 >= v253)
                                                      {
                                                        *(_DWORD *)a2 = v254;
                                                        *(_DWORD *)(a2 + 4) = 1;
                                                      }
                                                      v250 |= v256 << (57 - v243);
                                                    }
                                                    *v10 = v249 - 3;
                                                    v303 = 8 * v250;
                                                    *v58 = 8 * v250;
                                                    *(_DWORD *)(v4 + 472) = v250 >> 61;
                                                    *v109 = -1;
                                                    v304 = *v10;
                                                    if (*v10 > 2)
                                                    {
                                                      v308 = *v10;
                                                    }
                                                    else
                                                    {
                                                      v305 = *(_QWORD *)(a2 + 40);
                                                      v306 = *(_DWORD *)(a2 + 4);
                                                      v307 = *(unsigned __int8 **)(a2 + 24);
                                                      v308 = v304 + 8;
                                                      *(_DWORD *)(a2 + 16) = v304 + 8;
                                                      if (v306)
                                                      {
                                                        v309 = 0;
                                                      }
                                                      else
                                                      {
                                                        *(_QWORD *)(a2 + 24) = v307 + 1;
                                                        v309 = *v307++;
                                                      }
                                                      if ((unint64_t)v307 >= v305)
                                                      {
                                                        *(_DWORD *)a2 = v306;
                                                        *(_DWORD *)(a2 + 4) = 1;
                                                      }
                                                      v303 |= v309 << (56 - v304);
                                                    }
                                                    *v10 = v308 - 3;
                                                    v272 = 8 * v303;
                                                    *v58 = 8 * v303;
                                                    v310 = v303 >> 61;
                                                    *(_DWORD *)(v4 + 484) = v303 >> 61;
                                                    *(_DWORD *)(v4 + 496) = -1;
                                                    *(_QWORD *)(v4 + 488) = -1;
                                                    if (!*v252)
                                                      return 4294967274;
                                                    v311 = v3[265];
                                                    v312 = 1 << (v311 - 1);
                                                    if (v311)
                                                    {
                                                      v313 = a1[6276];
                                                      if (!v313)
                                                        return 4294967274;
                                                      v314 = a1[6317];
                                                      if (!v314)
                                                        return 4294967274;
                                                      v315 = a1[6358];
                                                      if (!v315)
                                                        return 4294967274;
                                                      v316 = a1[6399];
                                                      if (!v316)
                                                        return 4294967274;
                                                      v317 = a1[6440];
                                                      if (!v317)
                                                        return 4294967274;
                                                      v318 = a1[6481];
                                                      if (!v318)
                                                        return 4294967274;
                                                      v319 = a1[6522];
                                                      if (!v319)
                                                        return 4294967274;
                                                      v983 = (_DWORD *)(v4 + 468);
                                                      v985 = (_DWORD *)(v4 + 476);
                                                      v988 = v6;
                                                      v320 = (uint64_t *)(a2 + 8);
                                                      v321 = ((*(_DWORD *)(*v252 + 248) - v85) & (v312 - 1))
                                                           - ((*(_DWORD *)(*v252 + 248) - v85) & v312);
                                                      v322 = v321 + v312;
                                                      v323 = ((*(_DWORD *)(v313 + 248) - v85) & (v312 - 1))
                                                           - ((*(_DWORD *)(v313 + 248) - v85) & v312);
                                                      v324 = v323 + v312;
                                                      v984 = ((*(_DWORD *)(v314 + 248) - v85) & (v312 - 1))
                                                           - ((*(_DWORD *)(v314 + 248) - v85) & v312);
                                                      v325 = v984 + v312;
                                                      v326 = ((*(_DWORD *)(v315 + 248) - v85) & (v312 - 1))
                                                           - ((*(_DWORD *)(v315 + 248) - v85) & v312);
                                                      v327 = v326 + v312;
                                                      v328 = ((*(_DWORD *)(v316 + 248) - v85) & (v312 - 1))
                                                           - ((*(_DWORD *)(v316 + 248) - v85) & v312);
                                                      v329 = v328 + v312;
                                                      v330 = ((*(_DWORD *)(v317 + 248) - v85) & (v312 - 1))
                                                           - ((*(_DWORD *)(v317 + 248) - v85) & v312);
                                                      v331 = v330 + v312;
                                                      v332 = ((*(_DWORD *)(v318 + 248) - v85) & (v312 - 1))
                                                           - ((*(_DWORD *)(v318 + 248) - v85) & v312);
                                                      v333 = v332 + v312;
                                                      v334 = ((*(_DWORD *)(v319 + 248) - v85) & (v312 - 1))
                                                           - ((*(_DWORD *)(v319 + 248) - v85) & v312);
                                                    }
                                                    else
                                                    {
                                                      if (!a1[6276]
                                                        || !a1[6317]
                                                        || !a1[6358]
                                                        || !a1[6399]
                                                        || !a1[6440]
                                                        || !a1[6481]
                                                        || !a1[6522])
                                                      {
                                                        return 4294967274;
                                                      }
                                                      v983 = (_DWORD *)(v4 + 468);
                                                      v985 = (_DWORD *)(v4 + 476);
                                                      v988 = v6;
                                                      v320 = (uint64_t *)(a2 + 8);
                                                      v321 = 0;
                                                      v323 = 0;
                                                      v984 = 0;
                                                      v326 = 0;
                                                      v328 = 0;
                                                      v330 = 0;
                                                      v332 = 0;
                                                      v334 = 0;
                                                      v322 = v312;
                                                      v324 = v312;
                                                      v325 = v312;
                                                      v327 = v312;
                                                      v329 = v312;
                                                      v331 = v312;
                                                      v333 = v312;
                                                    }
                                                    v994 = 0u;
                                                    v995 = 0u;
                                                    v982 = *(int *)(v4 + 472);
                                                    *((_DWORD *)&v994 + v982) = 1;
                                                    *((_DWORD *)&v994 + v310) = 1;
                                                    v335 = v994;
                                                    v336 = -1;
                                                    v337 = 0xFFFFFFFF00000000;
                                                    if (!(_DWORD)v994 && (v321 & 0x80000000) == 0 && v322 >= -1)
                                                    {
                                                      v337 = 0;
                                                      *(_DWORD *)(v4 + 496) = 0;
                                                      v336 = v322;
                                                    }
                                                    if (!DWORD1(v994) && (v323 & 0x80000000) == 0 && v324 >= v336)
                                                    {
                                                      *(_DWORD *)(v4 + 496) = 1;
                                                      v337 = 0x100000000;
                                                      v336 = v324;
                                                    }
                                                    if (!DWORD2(v994) && (v984 & 0x80000000) == 0 && v325 >= v336)
                                                    {
                                                      *(_DWORD *)(v4 + 496) = 2;
                                                      v337 = 0x200000000;
                                                      v336 = v325;
                                                    }
                                                    if (!HIDWORD(v994) && (v326 & 0x80000000) == 0 && v327 >= v336)
                                                    {
                                                      *(_DWORD *)(v4 + 496) = 3;
                                                      v337 = 0x300000000;
                                                      v336 = v327;
                                                    }
                                                    if (!(_DWORD)v995 && (v328 & 0x80000000) == 0 && v329 >= v336)
                                                    {
                                                      *(_DWORD *)(v4 + 496) = 4;
                                                      v337 = 0x400000000;
                                                      v336 = v329;
                                                    }
                                                    if (!DWORD1(v995) && (v330 & 0x80000000) == 0 && v331 >= v336)
                                                    {
                                                      *(_DWORD *)(v4 + 496) = 5;
                                                      v337 = 0x500000000;
                                                      v336 = v331;
                                                    }
                                                    v338 = v334 + v312;
                                                    if (!DWORD2(v995) && (v332 & 0x80000000) == 0 && v333 >= v336)
                                                    {
                                                      *(_DWORD *)(v4 + 496) = 6;
                                                      v337 = 0x600000000;
                                                      v336 = v333;
                                                    }
                                                    if (!HIDWORD(v995) && (v334 & 0x80000000) == 0 && v338 >= v336)
                                                    {
                                                      *(_DWORD *)(v4 + 496) = 7;
                                                      v337 = 0x700000000;
                                                      v336 = v334 + v312;
                                                    }
                                                    if (v336 != -1)
                                                    {
                                                      *((_DWORD *)&v994 + (v337 >> 32)) = 1;
                                                      v335 = v994;
                                                    }
                                                    v339 = 0x7FFFFFFF;
                                                    v340 = 0xFFFFFFFF00000000;
                                                    if (!v335 && (v321 & 0x80000000) == 0 && v322 != 0x7FFFFFFF)
                                                    {
                                                      v340 = 0;
                                                      *(_DWORD *)(v4 + 488) = 0;
                                                      v339 = v322;
                                                    }
                                                    if (!DWORD1(v994) && (v323 & 0x80000000) == 0 && v324 < v339)
                                                    {
                                                      *(_DWORD *)(v4 + 488) = 1;
                                                      v340 = 0x100000000;
                                                      v339 = v324;
                                                    }
                                                    if (!DWORD2(v994) && (v984 & 0x80000000) == 0 && v325 < v339)
                                                    {
                                                      *(_DWORD *)(v4 + 488) = 2;
                                                      v340 = 0x200000000;
                                                      v339 = v325;
                                                    }
                                                    if (!HIDWORD(v994) && (v326 & 0x80000000) == 0 && v327 < v339)
                                                    {
                                                      *(_DWORD *)(v4 + 488) = 3;
                                                      v340 = 0x300000000;
                                                      v339 = v327;
                                                    }
                                                    if (!(_DWORD)v995 && (v328 & 0x80000000) == 0 && v329 < v339)
                                                    {
                                                      *(_DWORD *)(v4 + 488) = 4;
                                                      v340 = 0x400000000;
                                                      v339 = v329;
                                                    }
                                                    if (!DWORD1(v995) && (v330 & 0x80000000) == 0 && v331 < v339)
                                                    {
                                                      *(_DWORD *)(v4 + 488) = 5;
                                                      v340 = 0x500000000;
                                                      v339 = v331;
                                                    }
                                                    if (!DWORD2(v995) && (v332 & 0x80000000) == 0 && v333 < v339)
                                                    {
                                                      *(_DWORD *)(v4 + 488) = 6;
                                                      v340 = 0x600000000;
                                                      v339 = v333;
                                                    }
                                                    if (!HIDWORD(v995) && (v334 & 0x80000000) == 0 && v338 < v339)
                                                    {
                                                      *(_DWORD *)(v4 + 488) = 7;
                                                      v340 = 0x700000000;
                                                      goto LABEL_1483;
                                                    }
                                                    if (v339 != 0x7FFFFFFF)
                                                    {
LABEL_1483:
                                                      *((_DWORD *)&v994 + (v340 >> 32)) = 1;
                                                      v335 = v994;
                                                    }
                                                    v950 = 0x7FFFFFFF;
                                                    v951 = 0xFFFFFFFF00000000;
                                                    if (!v335 && (v321 & 0x80000000) == 0 && v322 != 0x7FFFFFFF)
                                                    {
                                                      v951 = 0;
                                                      *(_DWORD *)(v4 + 492) = 0;
                                                      v950 = v322;
                                                    }
                                                    if (!DWORD1(v994) && (v323 & 0x80000000) == 0 && v324 < v950)
                                                    {
                                                      *(_DWORD *)(v4 + 492) = 1;
                                                      v951 = 0x100000000;
                                                      v950 = v324;
                                                    }
                                                    if (!DWORD2(v994) && (v984 & 0x80000000) == 0 && v325 < v950)
                                                    {
                                                      *(_DWORD *)(v4 + 492) = 2;
                                                      v951 = 0x200000000;
                                                      v950 = v325;
                                                    }
                                                    if (!HIDWORD(v994) && (v326 & 0x80000000) == 0 && v327 < v950)
                                                    {
                                                      *(_DWORD *)(v4 + 492) = 3;
                                                      v951 = 0x300000000;
                                                      v950 = v327;
                                                    }
                                                    if (!(_DWORD)v995 && (v328 & 0x80000000) == 0 && v329 < v950)
                                                    {
                                                      *(_DWORD *)(v4 + 492) = 4;
                                                      v951 = 0x400000000;
                                                      v950 = v329;
                                                    }
                                                    if (!DWORD1(v995) && (v330 & 0x80000000) == 0 && v331 < v950)
                                                    {
                                                      *(_DWORD *)(v4 + 492) = 5;
                                                      v951 = 0x500000000;
                                                      v950 = v331;
                                                    }
                                                    if (!DWORD2(v995) && (v332 & 0x80000000) == 0 && v333 < v950)
                                                    {
                                                      *(_DWORD *)(v4 + 492) = 6;
                                                      v951 = 0x600000000;
                                                      v950 = v333;
                                                    }
                                                    if (!HIDWORD(v995) && (v334 & 0x80000000) == 0 && v338 < v950)
                                                    {
                                                      *(_DWORD *)(v4 + 492) = 7;
                                                      v951 = 0x700000000;
                                                      goto LABEL_1517;
                                                    }
                                                    if (v950 != 0x7FFFFFFF)
LABEL_1517:
                                                      *((_DWORD *)&v994 + (v951 >> 32)) = 1;
                                                    v952 = 0;
                                                    v953 = v4 + 476;
                                                    v58 = v320;
                                                    do
                                                    {
                                                      v954 = *(_DWORD *)(v953 + v952);
                                                      if (v954 < 0)
                                                      {
                                                        v955 = -1;
                                                        if (!(_DWORD)v994 && v321 < 0 && v322 >= -1)
                                                        {
                                                          v954 = 0;
                                                          *(_DWORD *)(v953 + v952) = 0;
                                                          v955 = v322;
                                                        }
                                                        if (!DWORD1(v994) && v323 < 0 && v324 >= v955)
                                                        {
                                                          v954 = 1;
                                                          *(_DWORD *)(v953 + v952) = 1;
                                                          v955 = v324;
                                                        }
                                                        if (!DWORD2(v994) && v984 < 0 && v325 >= v955)
                                                        {
                                                          v954 = 2;
                                                          *(_DWORD *)(v953 + v952) = 2;
                                                          v955 = v325;
                                                        }
                                                        if (!HIDWORD(v994) && v326 < 0 && v327 >= v955)
                                                        {
                                                          v954 = 3;
                                                          *(_DWORD *)(v953 + v952) = 3;
                                                          v955 = v327;
                                                        }
                                                        if (!(_DWORD)v995 && v328 < 0 && v329 >= v955)
                                                        {
                                                          v954 = 4;
                                                          *(_DWORD *)(v953 + v952) = 4;
                                                          v955 = v329;
                                                        }
                                                        if (!DWORD1(v995) && v330 < 0 && v331 >= v955)
                                                        {
                                                          v954 = 5;
                                                          *(_DWORD *)(v953 + v952) = 5;
                                                          v955 = v331;
                                                        }
                                                        if (!DWORD2(v995) && v332 < 0 && v333 >= v955)
                                                        {
                                                          v954 = 6;
                                                          *(_DWORD *)(v953 + v952) = 6;
                                                          v955 = v333;
                                                        }
                                                        if (!HIDWORD(v995) && v334 < 0 && v338 >= v955)
                                                        {
                                                          v954 = 7;
                                                          *(_DWORD *)(v953 + v952) = 7;
                                                          v955 = v338;
                                                        }
                                                        if (v955 != -1)
                                                          *((_DWORD *)&v994 + v954) = 1;
                                                      }
                                                      v952 += 4;
                                                    }
                                                    while (v952 != 24);
                                                    if (v322 == 0x7FFFFFFF)
                                                      v956 = -1;
                                                    else
                                                      v956 = 0;
                                                    if (v324 < v322)
                                                      v322 = v324;
                                                    if (v323 < v321)
                                                      v956 = 1;
                                                    if (v325 >= v322)
                                                      v957 = v322;
                                                    else
                                                      v957 = v325;
                                                    if (v325 < v322)
                                                      v956 = 2;
                                                    if (v327 < v957)
                                                    {
                                                      v957 = v327;
                                                      v956 = 3;
                                                    }
                                                    if (v329 < v957)
                                                    {
                                                      v957 = v329;
                                                      v956 = 4;
                                                    }
                                                    if (v331 < v957)
                                                    {
                                                      v957 = v331;
                                                      v956 = 5;
                                                    }
                                                    if (v333 < v957)
                                                    {
                                                      v957 = v333;
                                                      v956 = 6;
                                                    }
                                                    if (v338 < v957)
                                                      v956 = 7;
                                                    if ((v982 & 0x80000000) == 0)
                                                    {
                                                      v109 = v985;
                                                      v251 = v983;
                                                      if ((*v985 & 0x80000000) == 0)
                                                        goto LABEL_1579;
LABEL_1587:
                                                      *(_DWORD *)v109 = v956;
                                                      if ((*(_DWORD *)(v4 + 480) & 0x80000000) != 0)
                                                        goto LABEL_1588;
LABEL_1580:
                                                      if ((*(_DWORD *)(v4 + 484) & 0x80000000) == 0)
                                                        goto LABEL_1581;
LABEL_1589:
                                                      *(_DWORD *)(v4 + 484) = v956;
                                                      if ((*(_DWORD *)(v4 + 488) & 0x80000000) != 0)
                                                        goto LABEL_1590;
LABEL_1582:
                                                      if ((*(_DWORD *)(v4 + 492) & 0x80000000) == 0)
                                                        goto LABEL_1583;
LABEL_1591:
                                                      *(_DWORD *)(v4 + 492) = v956;
                                                      if ((*(_DWORD *)(v4 + 496) & 0x80000000) != 0)
                                                        goto LABEL_1592;
LABEL_1584:
                                                      v262 = v3 + 251;
                                                      v263 = (_DWORD *)(v4 + 268);
                                                      v264 = v3 + 252;
                                                      if ((v244 & 0x8000000000000000) != 0)
                                                        goto LABEL_363;
LABEL_356:
                                                      v265 = *v10;
                                                      if (*v10 >= 3)
                                                      {
                                                        v271 = *v58;
                                                        v269 = *v10;
                                                      }
                                                      else
                                                      {
                                                        v266 = *(_QWORD *)(a2 + 40);
                                                        v267 = *(_DWORD *)(a2 + 4);
                                                        v268 = *(unsigned __int8 **)(a2 + 24);
                                                        v269 = v265 + 8;
                                                        *(_DWORD *)(a2 + 16) = v265 + 8;
                                                        if (v267)
                                                        {
                                                          v270 = 0;
                                                          if ((unint64_t)v268 >= v266)
                                                            goto LABEL_359;
                                                        }
                                                        else
                                                        {
                                                          *(_QWORD *)(a2 + 24) = v268 + 1;
                                                          v270 = *v268;
                                                          if ((unint64_t)(v268 + 1) >= v266)
                                                          {
LABEL_359:
                                                            *(_DWORD *)a2 = v267;
                                                            *(_DWORD *)(a2 + 4) = 1;
                                                          }
                                                        }
                                                        v271 = *v58 | (v270 << (56 - v265));
                                                      }
                                                      *v10 = v269 - 3;
                                                      v272 = 8 * v271;
                                                      *v58 = 8 * v271;
                                                      *(_DWORD *)(v4 + 472) = v271 >> 61;
                                                      goto LABEL_363;
                                                    }
                                                    *(_DWORD *)(v4 + 472) = v956;
                                                    v109 = v985;
                                                    v251 = v983;
                                                    if ((*v985 & 0x80000000) != 0)
                                                      goto LABEL_1587;
LABEL_1579:
                                                    if ((*(_DWORD *)(v4 + 480) & 0x80000000) == 0)
                                                      goto LABEL_1580;
LABEL_1588:
                                                    *(_DWORD *)(v4 + 480) = v956;
                                                    if ((*(_DWORD *)(v4 + 484) & 0x80000000) != 0)
                                                      goto LABEL_1589;
LABEL_1581:
                                                    if ((*(_DWORD *)(v4 + 488) & 0x80000000) == 0)
                                                      goto LABEL_1582;
LABEL_1590:
                                                    *(_DWORD *)(v4 + 488) = v956;
                                                    if ((*(_DWORD *)(v4 + 492) & 0x80000000) != 0)
                                                      goto LABEL_1591;
LABEL_1583:
                                                    if ((*(_DWORD *)(v4 + 496) & 0x80000000) == 0)
                                                      goto LABEL_1584;
LABEL_1592:
                                                    *(_DWORD *)(v4 + 496) = v956;
                                                    v262 = v3 + 251;
                                                    v263 = (_DWORD *)(v4 + 268);
                                                    v264 = v3 + 252;
                                                    if ((v244 & 0x8000000000000000) == 0)
                                                      goto LABEL_356;
LABEL_363:
                                                    v273 = v3[250];
                                                    if (!v273)
                                                      goto LABEL_375;
                                                    v274 = *v262;
                                                    v275 = *v10;
                                                    if (*v10 >= *v262)
                                                      goto LABEL_373;
                                                    v276 = 0;
                                                    v277 = *(_QWORD *)(a2 + 40);
                                                    v278 = *(_DWORD *)(a2 + 4);
                                                    v279 = *(unsigned __int8 **)(a2 + 24);
                                                    while (2)
                                                    {
                                                      v276 <<= 8;
                                                      v275 += 8;
                                                      *v10 = v275;
                                                      if (v278)
                                                      {
                                                        if ((unint64_t)v279 >= v277)
                                                        {
LABEL_371:
                                                          *(_DWORD *)a2 = v278;
                                                          v278 = 1;
                                                          *(_DWORD *)(a2 + 4) = 1;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        *(_QWORD *)(a2 + 24) = v279 + 1;
                                                        v276 |= *v279++;
                                                        if ((unint64_t)v279 >= v277)
                                                          goto LABEL_371;
                                                      }
                                                      if (v275 >= v274)
                                                      {
                                                        v272 |= v276 << -(char)v275;
LABEL_373:
                                                        *v10 = v275 - v274;
                                                        v280 = v272 << v274;
                                                        *v58 = v272 << v274;
                                                        v281 = a1[41 * *(int *)(v4 + 472) + 6235];
                                                        if (!v281)
                                                          return 4294967274;
                                                        v282 = (*v263
                                                              + (1 << *v264)
                                                              + ~(v272 >> -(char)v274)) & ((1 << *v264) - 1);
                                                        v272 = v280;
                                                        if (*(_DWORD *)(v281 + 268) != v282)
                                                          return 4294967274;
LABEL_375:
                                                        if (*v251)
                                                        {
                                                          if (!v273)
                                                            goto LABEL_532;
                                                        }
                                                        else
                                                        {
                                                          v283 = *v10;
                                                          if (*v10 <= 2)
                                                          {
                                                            v284 = *(_QWORD *)(a2 + 40);
                                                            v285 = *(_DWORD *)(a2 + 4);
                                                            v286 = *(unsigned __int8 **)(a2 + 24);
                                                            *(_DWORD *)(a2 + 16) = v283 + 8;
                                                            if (v285)
                                                            {
                                                              v287 = 0;
                                                            }
                                                            else
                                                            {
                                                              *(_QWORD *)(a2 + 24) = v286 + 1;
                                                              v287 = *v286++;
                                                            }
                                                            if ((unint64_t)v286 >= v284)
                                                            {
                                                              *(_DWORD *)a2 = v285;
                                                              *(_DWORD *)(a2 + 4) = 1;
                                                            }
                                                            v272 |= v287 << (56 - v283);
                                                            v283 += 8;
                                                          }
                                                          *v10 = v283 - 3;
                                                          v341 = v272 >> 61;
                                                          v272 *= 8;
                                                          *v58 = v272;
                                                          *(_DWORD *)(v4 + 476) = v341;
                                                          v273 = v3[250];
                                                          if (!v273)
                                                            goto LABEL_532;
                                                        }
                                                        v342 = *v262;
                                                        v343 = *v10;
                                                        if (*v10 >= *v262)
                                                          goto LABEL_530;
                                                        v344 = 0;
                                                        v345 = *(_QWORD *)(a2 + 40);
                                                        v346 = *(_DWORD *)(a2 + 4);
                                                        v347 = *(unsigned __int8 **)(a2 + 24);
                                                        while (2)
                                                        {
                                                          v344 <<= 8;
                                                          v343 += 8;
                                                          *v10 = v343;
                                                          if (v346)
                                                          {
                                                            if ((unint64_t)v347 >= v345)
                                                            {
LABEL_528:
                                                              *(_DWORD *)a2 = v346;
                                                              v346 = 1;
                                                              *(_DWORD *)(a2 + 4) = 1;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            *(_QWORD *)(a2 + 24) = v347 + 1;
                                                            v344 |= *v347++;
                                                            if ((unint64_t)v347 >= v345)
                                                              goto LABEL_528;
                                                          }
                                                          if (v343 >= v342)
                                                          {
                                                            v272 |= v344 << -(char)v343;
LABEL_530:
                                                            *v10 = v343 - v342;
                                                            v348 = v272 << v342;
                                                            *v58 = v272 << v342;
                                                            v349 = a1[41 * *(int *)(v4 + 476) + 6235];
                                                            if (!v349)
                                                              return 4294967274;
                                                            v350 = (*v263
                                                                  + (1 << *v264)
                                                                  + ~(v272 >> -(char)v342)) & ((1 << *v264) - 1);
                                                            v272 = v348;
                                                            if (*(_DWORD *)(v349 + 268) != v350)
                                                              return 4294967274;
LABEL_532:
                                                            if (!*v251)
                                                            {
                                                              v351 = *v10;
                                                              if (*v10 <= 2)
                                                              {
                                                                v352 = *(_QWORD *)(a2 + 40);
                                                                v353 = *(_DWORD *)(a2 + 4);
                                                                v354 = *(unsigned __int8 **)(a2 + 24);
                                                                *(_DWORD *)(a2 + 16) = v351 + 8;
                                                                if (v353)
                                                                {
                                                                  v355 = 0;
                                                                }
                                                                else
                                                                {
                                                                  *(_QWORD *)(a2 + 24) = v354 + 1;
                                                                  v355 = *v354++;
                                                                }
                                                                if ((unint64_t)v354 >= v352)
                                                                {
                                                                  *(_DWORD *)a2 = v353;
                                                                  *(_DWORD *)(a2 + 4) = 1;
                                                                }
                                                                v272 |= v355 << (56 - v351);
                                                                v351 += 8;
                                                              }
                                                              *v10 = v351 - 3;
                                                              v463 = v272 >> 61;
                                                              v272 *= 8;
                                                              *v58 = v272;
                                                              *(_DWORD *)(v4 + 480) = v463;
                                                              v273 = v3[250];
                                                            }
                                                            if (!v273)
                                                              goto LABEL_717;
                                                            v464 = *v262;
                                                            v465 = *v10;
                                                            if (*v10 >= *v262)
                                                              goto LABEL_715;
                                                            v466 = 0;
                                                            v467 = *(_QWORD *)(a2 + 40);
                                                            v468 = *(_DWORD *)(a2 + 4);
                                                            v469 = *(unsigned __int8 **)(a2 + 24);
                                                            while (2)
                                                            {
                                                              v466 <<= 8;
                                                              v465 += 8;
                                                              *v10 = v465;
                                                              if (v468)
                                                              {
                                                                if ((unint64_t)v469 >= v467)
                                                                {
LABEL_713:
                                                                  *(_DWORD *)a2 = v468;
                                                                  v468 = 1;
                                                                  *(_DWORD *)(a2 + 4) = 1;
                                                                }
                                                              }
                                                              else
                                                              {
                                                                *(_QWORD *)(a2 + 24) = v469 + 1;
                                                                v466 |= *v469++;
                                                                if ((unint64_t)v469 >= v467)
                                                                  goto LABEL_713;
                                                              }
                                                              if (v465 >= v464)
                                                              {
                                                                v272 |= v466 << -(char)v465;
LABEL_715:
                                                                *v10 = v465 - v464;
                                                                *v58 = v272 << v464;
                                                                v470 = a1[41 * *(int *)(v4 + 480) + 6235];
                                                                if (!v470
                                                                  || *(_DWORD *)(v470 + 268) != ((*v263
                                                                                                + (1 << *v264)
                                                                                                + ~(v272 >> -(char)v464)) & ((1 << *v264) - 1)))
                                                                {
                                                                  return 4294967274;
                                                                }
LABEL_717:
                                                                if (!*v251)
                                                                {
                                                                  v471 = v109;
                                                                  v472 = v251;
                                                                  v473 = dav1d_get_bits(a2, 3u);
                                                                  v251 = v472;
                                                                  v109 = v471;
                                                                  *(_DWORD *)(v4 + 484) = v473;
                                                                  v273 = v3[250];
                                                                }
                                                                if (!v273)
                                                                  goto LABEL_732;
                                                                v474 = *v262;
                                                                v475 = *v10;
                                                                if (*v10 >= *v262)
                                                                {
                                                                  v480 = *v58;
                                                                  goto LABEL_730;
                                                                }
                                                                v476 = 0;
                                                                v477 = *(_QWORD *)(a2 + 40);
                                                                v478 = *(_DWORD *)(a2 + 4);
                                                                v479 = *(unsigned __int8 **)(a2 + 24);
                                                                while (2)
                                                                {
                                                                  v476 <<= 8;
                                                                  v475 += 8;
                                                                  *v10 = v475;
                                                                  if (v478)
                                                                  {
                                                                    if ((unint64_t)v479 >= v477)
                                                                    {
LABEL_727:
                                                                      *(_DWORD *)a2 = v478;
                                                                      v478 = 1;
                                                                      *(_DWORD *)(a2 + 4) = 1;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    *(_QWORD *)(a2 + 24) = v479 + 1;
                                                                    v476 |= *v479++;
                                                                    if ((unint64_t)v479 >= v477)
                                                                      goto LABEL_727;
                                                                  }
                                                                  if (v475 >= v474)
                                                                  {
                                                                    v480 = *v58 | (v476 << -(char)v475);
LABEL_730:
                                                                    *v10 = v475 - v474;
                                                                    *v58 = v480 << v474;
                                                                    v481 = a1[41 * *(int *)(v4 + 484) + 6235];
                                                                    if (!v481
                                                                      || *(_DWORD *)(v481 + 268) != ((*v263 + (1 << *v264) + ~(v480 >> -(char)v474)) & ((1 << *v264) - 1)))
                                                                    {
                                                                      return 4294967274;
                                                                    }
LABEL_732:
                                                                    if (!*v251)
                                                                    {
                                                                      v482 = v109;
                                                                      v483 = v251;
                                                                      v484 = dav1d_get_bits(a2, 3u);
                                                                      v251 = v483;
                                                                      v109 = v482;
                                                                      *(_DWORD *)(v4 + 488) = v484;
                                                                      v273 = v3[250];
                                                                    }
                                                                    v987 = v109;
                                                                    if (v273)
                                                                    {
                                                                      v485 = v251;
                                                                      v486 = dav1d_get_bits(a2, *v262);
                                                                      v487 = a1[41 * *(int *)(v4 + 488) + 6235];
                                                                      if (!v487)
                                                                        return 4294967274;
                                                                      v251 = v485;
                                                                      v109 = v987;
                                                                      if (*(_DWORD *)(v487 + 268) != ((*v263 + (1 << *v264) + ~v486) & ((1 << *v264) - 1)))
                                                                        return 4294967274;
                                                                    }
                                                                    if (!*v251)
                                                                    {
                                                                      v488 = v109;
                                                                      v489 = v251;
                                                                      v490 = dav1d_get_bits(a2, 3u);
                                                                      v251 = v489;
                                                                      v109 = v488;
                                                                      *(_DWORD *)(v4 + 492) = v490;
                                                                    }
                                                                    if (v3[250])
                                                                    {
                                                                      v491 = v251;
                                                                      v492 = dav1d_get_bits(a2, *v262);
                                                                      v493 = a1[41 * *(int *)(v4 + 492) + 6235];
                                                                      if (!v493)
                                                                        return 4294967274;
                                                                      v251 = v491;
                                                                      v109 = v987;
                                                                      if (*(_DWORD *)(v493 + 268) != ((*v263 + (1 << *v264) + ~v492) & ((1 << *v264) - 1)))
                                                                        return 4294967274;
                                                                    }
                                                                    if (!*v251)
                                                                      *(_DWORD *)(v4 + 496) = dav1d_get_bits(a2, 3u);
                                                                    if (v3[250])
                                                                    {
                                                                      v494 = dav1d_get_bits(a2, *v262);
                                                                      v495 = a1[41 * *(int *)(v4 + 496) + 6235];
                                                                      if (!v495
                                                                        || *(_DWORD *)(v495 + 268) != ((*v263 + (1 << *v264) + ~v494) & ((1 << *v264) - 1)))
                                                                      {
                                                                        return 4294967274;
                                                                      }
                                                                    }
                                                                    v496 = !*(_DWORD *)(v4 + 284)
                                                                        && *(_DWORD *)(v4 + 300) != 0;
                                                                    v6 = v988;
                                                                    if ((read_frame_size((uint64_t)a1, a2, v496) & 0x80000000) != 0)
                                                                      return 4294967274;
                                                                    if (*(_DWORD *)(v4 + 296))
                                                                      v531 = 0;
                                                                    else
                                                                      v531 = dav1d_get_bits(a2, 1u) != 0;
                                                                    *(_DWORD *)(v4 + 500) = v531;
                                                                    if (dav1d_get_bits(a2, 1u))
                                                                      v949 = 4;
                                                                    else
                                                                      v949 = dav1d_get_bits(a2, 2u);
                                                                    *(_DWORD *)(v4 + 504) = v949;
                                                                    *(_DWORD *)(v4 + 508) = dav1d_get_bits(a2, 1u);
                                                                    if (!*(_DWORD *)(v4 + 284))
                                                                    {
                                                                      v356 = v3[262];
                                                                      if (!v356)
                                                                        goto LABEL_542;
                                                                      v356 = v3[260];
                                                                      if (!v356)
                                                                        goto LABEL_542;
                                                                      if ((*v990 & 1) != 0)
                                                                      {
                                                                        v356 = dav1d_get_bits(a2, 1u) != 0;
                                                                        goto LABEL_542;
                                                                      }
                                                                    }
                                                                    v356 = 0;
                                                                    goto LABEL_542;
                                                                  }
                                                                  continue;
                                                                }
                                                              }
                                                              continue;
                                                            }
                                                          }
                                                          continue;
                                                        }
                                                      }
                                                      continue;
                                                    }
                                                  }
                                                  continue;
                                                }
                                              }
                                              continue;
                                            }
                                          }
                                          continue;
                                        }
                                      }
LABEL_297:
                                      v217 = 0;
                                      v218 = *(_QWORD *)(a2 + 40);
                                      v219 = *(_DWORD *)(a2 + 4);
                                      v220 = *(unsigned __int8 **)(a2 + 24);
                                      while (2)
                                      {
                                        v217 <<= 8;
                                        v215 += 8;
                                        *v10 = v215;
                                        if (v219)
                                        {
                                          if ((unint64_t)v220 >= v218)
                                          {
LABEL_303:
                                            *(_DWORD *)a2 = v219;
                                            v219 = 1;
                                            *(_DWORD *)(a2 + 4) = 1;
                                          }
                                        }
                                        else
                                        {
                                          *(_QWORD *)(a2 + 24) = v220 + 1;
                                          v217 |= *v220++;
                                          if ((unint64_t)v220 >= v218)
                                            goto LABEL_303;
                                        }
                                        if (v215 >= v150)
                                        {
                                          v226 = v217 << -(char)v215;
                                          v227 = v215 - v150;
                                          v228 = (v226 | v216) << v150;
                                          *v58 = v228;
                                          if (v227 >= v150)
                                            goto LABEL_314;
                                          goto LABEL_324;
                                        }
                                        continue;
                                      }
                                    }
                                    continue;
                                  }
                                }
LABEL_280:
                                v203 = 0;
                                v204 = *(_QWORD *)(a2 + 40);
                                v205 = *(_DWORD *)(a2 + 4);
                                v206 = *(unsigned __int8 **)(a2 + 24);
                                while (2)
                                {
                                  v203 <<= 8;
                                  v201 += 8;
                                  *v10 = v201;
                                  if (v205)
                                  {
                                    if ((unint64_t)v206 >= v204)
                                    {
LABEL_286:
                                      *(_DWORD *)a2 = v205;
                                      v205 = 1;
                                      *(_DWORD *)(a2 + 4) = 1;
                                    }
                                  }
                                  else
                                  {
                                    *(_QWORD *)(a2 + 24) = v206 + 1;
                                    v203 |= *v206++;
                                    if ((unint64_t)v206 >= v204)
                                      goto LABEL_286;
                                  }
                                  if (v201 >= v150)
                                  {
                                    v212 = v203 << -(char)v201;
                                    v213 = v201 - v150;
                                    v214 = (v212 | v202) << v150;
                                    *v58 = v214;
                                    if (v213 >= v150)
                                      goto LABEL_296;
                                    goto LABEL_306;
                                  }
                                  continue;
                                }
                              }
                            }
                          }
LABEL_279:
                          v201 = v199 - v150;
                          v202 = v200 << v150;
                          *v58 = v202;
                          if (v201 >= v150)
                            goto LABEL_305;
                          goto LABEL_280;
                        }
                        continue;
                      }
                    }
                    v118 = *v10;
                    if (*v10 >= 8)
                    {
                      v124 = *v58;
                      v122 = *v10;
                    }
                    else
                    {
                      v119 = *(_QWORD *)(a2 + 40);
                      v120 = *(_DWORD *)(a2 + 4);
                      v121 = *(unsigned __int8 **)(a2 + 24);
                      v122 = v118 + 8;
                      *(_DWORD *)(a2 + 16) = v118 + 8;
                      if (v120)
                      {
                        v123 = 0;
                        if ((unint64_t)v121 >= v119)
                          goto LABEL_159;
                      }
                      else
                      {
                        *(_QWORD *)(a2 + 24) = v121 + 1;
                        v123 = *v121;
                        if ((unint64_t)(v121 + 1) >= v119)
                        {
LABEL_159:
                          *(_DWORD *)a2 = v120;
                          *(_DWORD *)(a2 + 4) = 1;
                        }
                      }
                      v124 = *v58 | (v123 << (56 - v118));
                    }
                    *v10 = v122 - 8;
                    *v58 = v124 << 8;
                    *(_DWORD *)(v4 + 440) = HIBYTE(v124);
                    if (!(_DWORD)v8)
                      goto LABEL_154;
                    goto LABEL_204;
                  }
                  v103 = *(_QWORD *)(a2 + 40);
                  v104 = *(_DWORD *)(a2 + 4);
                  v105 = *(unsigned __int8 **)(a2 + 24);
                  *(_DWORD *)(a2 + 16) = 8;
                  if (v104)
                  {
                    v106 = 0;
                    if ((unint64_t)v105 >= v103)
                      goto LABEL_142;
                  }
                  else
                  {
                    *(_QWORD *)(a2 + 24) = v105 + 1;
                    v106 = *v105;
                    if ((unint64_t)(v105 + 1) >= v103)
                    {
LABEL_142:
                      *(_DWORD *)a2 = v104;
                      *(_DWORD *)(a2 + 4) = 1;
                    }
                  }
                  v102 = *v58 | (v106 << 56);
                  v101 = 8;
                  goto LABEL_144;
                }
LABEL_131:
                v94 = *v10;
                if (*v10 >= 3)
                {
                  v100 = *v58;
                  v98 = *v10;
                }
                else
                {
                  v95 = *(_QWORD *)(a2 + 40);
                  v96 = *(_DWORD *)(a2 + 4);
                  v97 = *(unsigned __int8 **)(a2 + 24);
                  v98 = v94 + 8;
                  *(_DWORD *)(a2 + 16) = v94 + 8;
                  if (v96)
                  {
                    v99 = 0;
                    if ((unint64_t)v97 >= v95)
                      goto LABEL_134;
                  }
                  else
                  {
                    *(_QWORD *)(a2 + 24) = v97 + 1;
                    v99 = *v97;
                    if ((unint64_t)(v97 + 1) >= v95)
                    {
LABEL_134:
                      *(_DWORD *)a2 = v96;
                      *(_DWORD *)(a2 + 4) = 1;
                    }
                  }
                  v100 = *v58 | (v99 << (56 - v94));
                }
                *v10 = v98 - 3;
                *v58 = 8 * v100;
                *(_DWORD *)(v4 + 304) = v100 >> 61;
                if (!v3[242])
                  goto LABEL_145;
                goto LABEL_138;
              }
              v87 = *v10;
              if (*v10)
              {
                v88 = *v58;
LABEL_126:
                *v10 = v87 - 1;
                *v58 = 2 * v88;
                *(_DWORD *)(v4 + 300) = v88 >> 63;
                v76 = v3[260];
                if (v76)
                  goto LABEL_94;
LABEL_127:
                LODWORD(v85) = 0;
                *(_DWORD *)(v4 + 248) = 0;
                if ((v7 & 1) != 0)
                  v93 = v8;
                else
                  v93 = 1;
                if ((v93 & 1) != 0)
                  goto LABEL_114;
                goto LABEL_131;
              }
              v89 = *(_QWORD *)(a2 + 40);
              v90 = *(_DWORD *)(a2 + 4);
              v91 = *(unsigned __int8 **)(a2 + 24);
              *(_DWORD *)(a2 + 16) = 8;
              if (v90)
              {
                v92 = 0;
                if ((unint64_t)v91 >= v89)
                  goto LABEL_124;
              }
              else
              {
                *(_QWORD *)(a2 + 24) = v91 + 1;
                v92 = *v91;
                if ((unint64_t)(v91 + 1) >= v89)
                {
LABEL_124:
                  *(_DWORD *)a2 = v90;
                  *(_DWORD *)(a2 + 4) = 1;
                }
              }
              v88 = *v58 | (v92 << 56);
              v87 = 8;
              goto LABEL_126;
            }
LABEL_93:
            *(_DWORD *)(v4 + 300) = 0;
            v76 = v3[260];
            if (v76)
              goto LABEL_94;
            goto LABEL_127;
          }
        }
        else
        {
          *(_DWORD *)(v4 + 296) = (v7 & 1) == 0;
          if (v3[250])
            goto LABEL_83;
        }
        if (!v3[236])
          goto LABEL_105;
        goto LABEL_93;
      }
    }
  }
  v12 = *(_DWORD *)(a2 + 16);
  if (v12)
  {
    v13 = *(_QWORD *)(a2 + 8);
    goto LABEL_27;
  }
  v22 = *(_QWORD *)(a2 + 40);
  v23 = *(_DWORD *)(a2 + 4);
  v24 = *(unsigned __int8 **)(a2 + 24);
  *(_DWORD *)(a2 + 16) = 8;
  if (!v23)
  {
    *(_QWORD *)(a2 + 24) = v24 + 1;
    v25 = *v24;
    if ((unint64_t)(v24 + 1) < v22)
      goto LABEL_26;
    goto LABEL_25;
  }
  v25 = 0;
  if ((unint64_t)v24 >= v22)
  {
LABEL_25:
    *(_DWORD *)a2 = v23;
    *(_DWORD *)(a2 + 4) = 1;
  }
LABEL_26:
  v13 = *(_QWORD *)(a2 + 8) | (v25 << 56);
  v12 = 8;
LABEL_27:
  v26 = v12 - 1;
  *(_DWORD *)(a2 + 16) = v12 - 1;
  v27 = 2 * v13;
  *(_QWORD *)(a2 + 8) = 2 * v13;
  *(_DWORD *)(v4 + 260) = v13 >> 63;
  if ((v13 & 0x8000000000000000) == 0)
  {
    if (v12 > 2)
      goto LABEL_33;
    v28 = *(_QWORD *)(a2 + 40);
    v29 = *(_DWORD *)(a2 + 4);
    v30 = *(unsigned __int8 **)(a2 + 24);
    v26 = v12 + 7;
    *(_DWORD *)(a2 + 16) = v12 + 7;
    if (v29)
    {
      v31 = 0;
      if ((unint64_t)v30 < v28)
      {
LABEL_32:
        v27 |= v31 << (57 - v12);
LABEL_33:
        *(_DWORD *)(a2 + 16) = v26 - 2;
        *(_QWORD *)(a2 + 8) = 4 * v27;
        *(_DWORD *)(v4 + 232) = v27 >> 62;
        v5 = (_DWORD *)(v4 + 232);
        v32 = dav1d_get_bits(a2, 1u);
        v6 = (_DWORD *)(v4 + 276);
        *(_DWORD *)(v4 + 276) = v32 != 0;
        if (!v32)
        {
          *(_DWORD *)(v4 + 280) = dav1d_get_bits(a2, 1u);
          v7 = *v5;
          v990 = (_BYTE *)(v4 + 232);
          if (*v5 == 3)
            goto LABEL_9;
LABEL_6:
          if (!v7 && *v6 || v3[236])
            goto LABEL_9;
          v20 = *(_DWORD *)(a2 + 16);
          if (v20)
          {
            v21 = *(_QWORD *)(a2 + 8);
LABEL_59:
            *(_DWORD *)(a2 + 16) = v20 - 1;
            *(_QWORD *)(a2 + 8) = 2 * v21;
            v8 = v21 >> 63;
            *(_DWORD *)(v4 + 284) = v21 >> 63;
            v10 = (int *)(a2 + 16);
            v9 = *(_DWORD *)(a2 + 16);
            if (!v9)
              goto LABEL_60;
LABEL_10:
            v11 = *(_QWORD *)(a2 + 8);
            goto LABEL_64;
          }
          v49 = *(_QWORD *)(a2 + 40);
          v50 = *(_DWORD *)(a2 + 4);
          v51 = *(unsigned __int8 **)(a2 + 24);
          *(_DWORD *)(a2 + 16) = 8;
          if (v50)
          {
            v52 = 0;
            if ((unint64_t)v51 < v49)
            {
LABEL_58:
              v21 = *(_QWORD *)(a2 + 8) | (v52 << 56);
              v20 = 8;
              goto LABEL_59;
            }
          }
          else
          {
            *(_QWORD *)(a2 + 24) = v51 + 1;
            v52 = *v51;
            if ((unint64_t)(v51 + 1) < v49)
              goto LABEL_58;
          }
          *(_DWORD *)a2 = v50;
          *(_DWORD *)(a2 + 4) = 1;
          goto LABEL_58;
        }
        goto LABEL_3;
      }
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v30 + 1;
      v31 = *v30;
      if ((unint64_t)(v30 + 1) < v28)
        goto LABEL_32;
    }
    *(_DWORD *)a2 = v29;
    *(_DWORD *)(a2 + 4) = 1;
    goto LABEL_32;
  }
  if (v12 > 3)
    goto LABEL_41;
  v33 = *(_QWORD *)(a2 + 40);
  v34 = *(_DWORD *)(a2 + 4);
  v35 = *(unsigned __int8 **)(a2 + 24);
  v26 = v12 + 7;
  *(_DWORD *)(a2 + 16) = v12 + 7;
  if (!v34)
  {
    *(_QWORD *)(a2 + 24) = v35 + 1;
    v36 = *v35;
    if ((unint64_t)(v35 + 1) < v33)
      goto LABEL_40;
    goto LABEL_39;
  }
  v36 = 0;
  if ((unint64_t)v35 >= v33)
  {
LABEL_39:
    *(_DWORD *)a2 = v34;
    *(_DWORD *)(a2 + 4) = 1;
  }
LABEL_40:
  v27 |= v36 << (57 - v12);
LABEL_41:
  v37 = v26 - 3;
  *(_DWORD *)(a2 + 16) = v26 - 3;
  v38 = 8 * v27;
  *(_QWORD *)(a2 + 8) = 8 * v27;
  v39 = v27 >> 61;
  *(_DWORD *)(v4 + 264) = v39;
  if (!v3[242] || v3[240])
    goto LABEL_407;
  v40 = v3[246];
  if (v37 >= v40)
    goto LABEL_406;
  v41 = 0;
  v42 = *(_QWORD *)(a2 + 40);
  v43 = *(_DWORD *)(a2 + 4);
  v44 = v26 - 67;
  v45 = *(unsigned __int8 **)(a2 + 24);
  do
  {
    v41 <<= 8;
    *(_DWORD *)(a2 + 16) = v44 + 72;
    if (v43)
    {
      if ((unint64_t)v45 < v42)
        goto LABEL_45;
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v45 + 1;
      v41 |= *v45++;
      if ((unint64_t)v45 < v42)
        goto LABEL_45;
    }
    *(_DWORD *)a2 = v43;
    v43 = 1;
    *(_DWORD *)(a2 + 4) = 1;
LABEL_45:
    v46 = v44 + 8;
    v47 = v44 + 72;
    v44 += 8;
  }
  while (v47 < v40);
  v38 |= v41 << -(char)v46;
  v37 = v46 + 64;
LABEL_406:
  v37 -= v40;
  *(_DWORD *)(a2 + 16) = v37;
  v294 = v38 >> -(char)v40;
  v38 <<= v40;
  *(_QWORD *)(a2 + 8) = v38;
  *(_DWORD *)(v4 + 272) = v294;
LABEL_407:
  if (!v3[250])
    return 0;
  v295 = v3[252];
  if (v37 >= v295)
    goto LABEL_417;
  v296 = 0;
  v297 = *(_QWORD *)(a2 + 40);
  v298 = *(_DWORD *)(a2 + 4);
  v299 = *(unsigned __int8 **)(a2 + 24);
  while (2)
  {
    v296 <<= 8;
    v37 += 8;
    *(_DWORD *)(a2 + 16) = v37;
    if (v298)
    {
      if ((unint64_t)v299 >= v297)
      {
LABEL_415:
        *(_DWORD *)a2 = v298;
        v298 = 1;
        *(_DWORD *)(a2 + 4) = 1;
      }
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v299 + 1;
      v296 |= *v299++;
      if ((unint64_t)v299 >= v297)
        goto LABEL_415;
    }
    if (v37 < v295)
      continue;
    break;
  }
  v38 |= v296 << -(char)v37;
LABEL_417:
  *(_DWORD *)(a2 + 16) = v37 - v295;
  *(_QWORD *)(a2 + 8) = v38 << v295;
  v300 = v38 >> -(char)v295;
  *(_DWORD *)(v4 + 268) = v300;
  v301 = a1[41 * v39 + 6235];
  if (!v301 || *(_DWORD *)(v301 + 268) != (_DWORD)v300)
    return 4294967274;
  return 0;
}

unint64_t parse_tile_hdr(unint64_t result, uint64_t a2)
{
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned __int8 *v28;
  char v29;

  v2 = *(_DWORD **)(result + 96);
  v3 = v2[139] * v2[135];
  if (v3 < 2)
    goto LABEL_4;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = v4 - 1;
    *(_DWORD *)(a2 + 16) = v6;
    v7 = 2 * v5;
    *(_QWORD *)(a2 + 8) = 2 * v5;
    if ((v5 & 0x8000000000000000) == 0)
    {
LABEL_4:
      v8 = *(_QWORD *)(result + 32) + 80 * *(int *)(result + 44);
      *(_DWORD *)(v8 + 72) = 0;
      *(_DWORD *)(v8 + 76) = v3 - 1;
      return result;
    }
    goto LABEL_9;
  }
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_DWORD *)(a2 + 4);
  v11 = *(unsigned __int8 **)(a2 + 24);
  *(_DWORD *)(a2 + 16) = 8;
  if (v10)
  {
    v12 = 0;
    if ((unint64_t)v11 < v9)
      goto LABEL_8;
    goto LABEL_7;
  }
  *(_QWORD *)(a2 + 24) = v11 + 1;
  v12 = (unint64_t)*v11 << 56;
  if ((unint64_t)(v11 + 1) >= v9)
  {
LABEL_7:
    *(_DWORD *)a2 = v10;
    *(_DWORD *)(a2 + 4) = 1;
  }
LABEL_8:
  v13 = *(_QWORD *)(a2 + 8) | v12;
  v6 = 7;
  *(_DWORD *)(a2 + 16) = 7;
  v7 = 2 * v13;
  *(_QWORD *)(a2 + 8) = 2 * v13;
  if ((v13 & 0x8000000000000000) == 0)
    goto LABEL_4;
LABEL_9:
  v14 = v2[134];
  v15 = v2[138];
  v16 = v15 + v14;
  if (v6 >= v15 + v14)
    goto LABEL_18;
  v17 = 0;
  v18 = *(_QWORD *)(a2 + 40);
  v19 = *(_DWORD *)(a2 + 4);
  v20 = *(unsigned __int8 **)(a2 + 24);
  do
  {
    v17 <<= 8;
    v6 += 8;
    *(_DWORD *)(a2 + 16) = v6;
    if (v19)
    {
      if ((unint64_t)v20 < v18)
        continue;
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v20 + 1;
      v17 |= *v20++;
      if ((unint64_t)v20 < v18)
        continue;
    }
    *(_DWORD *)a2 = v19;
    v19 = 1;
    *(_DWORD *)(a2 + 4) = 1;
  }
  while (v6 < v16);
  v7 |= v17 << -(char)v6;
LABEL_18:
  v21 = v6 - v16;
  v22 = v7 << v16;
  *(_QWORD *)(a2 + 8) = v7 << v16;
  v23 = v7 >> -(char)v16;
  v24 = *(_QWORD *)(result + 32);
  v25 = *(_DWORD *)(result + 44);
  result = v24 + 80 * v25;
  *(_DWORD *)(result + 72) = v23;
  if (v6 - v16 >= v16)
    goto LABEL_27;
  v26 = 0;
  result = *(_QWORD *)(a2 + 40);
  v27 = *(_DWORD *)(a2 + 4);
  v28 = *(unsigned __int8 **)(a2 + 24);
  v29 = v14 + v15 - v6 + 64;
  while (2)
  {
    v26 <<= 8;
    v21 += 8;
    *(_DWORD *)(a2 + 16) = v21;
    if (v27)
    {
      if ((unint64_t)v28 >= result)
      {
LABEL_25:
        *(_DWORD *)a2 = v27;
        v27 = 1;
        *(_DWORD *)(a2 + 4) = 1;
      }
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v28 + 1;
      v26 |= *v28++;
      if ((unint64_t)v28 >= result)
        goto LABEL_25;
    }
    v29 -= 8;
    if (v21 < v16)
      continue;
    break;
  }
  v22 |= v26 << v29;
LABEL_27:
  *(_DWORD *)(a2 + 16) = v21 - v16;
  *(_QWORD *)(a2 + 8) = v22 << v16;
  *(_DWORD *)(v24 + 80 * v25 + 76) = v22 >> (64 - v16);
  return result;
}

uint64_t read_frame_size(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v4;
  _DWORD *v5;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t result;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  unsigned __int8 *v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  unsigned __int8 *v72;
  unint64_t v73;
  unsigned int v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  unsigned int v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  unsigned __int8 *v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  int v89;
  unint64_t v90;
  int v91;
  unsigned __int8 *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  unsigned __int8 *v104;
  uint64_t v105;

  v4 = *(_DWORD **)(a1 + 72);
  v5 = *(_DWORD **)(a1 + 96);
  if (a3)
  {
    v7 = *(_DWORD *)(a2 + 16);
    if (v7)
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = v7 - 1;
      *(_DWORD *)(a2 + 16) = v7 - 1;
      v10 = 2 * v8;
      *(_QWORD *)(a2 + 8) = 2 * v8;
      if ((v8 & 0x8000000000000000) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
    v16 = *(_QWORD *)(a2 + 40);
    v17 = *(_DWORD *)(a2 + 4);
    v18 = *(unsigned __int8 **)(a2 + 24);
    *(_DWORD *)(a2 + 16) = 8;
    if (v17)
    {
      v19 = 0;
      if ((unint64_t)v18 < v16)
        goto LABEL_15;
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v18 + 1;
      v19 = *v18;
      if ((unint64_t)(v18 + 1) < v16)
      {
LABEL_15:
        v20 = *(_QWORD *)(a2 + 8) | (v19 << 56);
        v7 = 8;
        v9 = 7;
        *(_DWORD *)(a2 + 16) = 7;
        v10 = 2 * v20;
        *(_QWORD *)(a2 + 8) = 2 * v20;
        if ((v20 & 0x8000000000000000) == 0)
        {
LABEL_4:
          if (v9)
          {
            v11 = v9 - 1;
            *(_DWORD *)(a2 + 16) = v9 - 1;
            v12 = 2 * v10;
            *(_QWORD *)(a2 + 8) = 2 * v10;
            if ((v10 & 0x8000000000000000) == 0)
              goto LABEL_6;
            goto LABEL_21;
          }
          v21 = *(_QWORD *)(a2 + 40);
          v22 = *(_DWORD *)(a2 + 4);
          v23 = *(unsigned __int8 **)(a2 + 24);
          *(_DWORD *)(a2 + 16) = v7 + 7;
          if (v22)
          {
            v24 = 0;
            if ((unint64_t)v23 < v21)
              goto LABEL_20;
          }
          else
          {
            *(_QWORD *)(a2 + 24) = v23 + 1;
            v24 = *v23;
            if ((unint64_t)(v23 + 1) < v21)
            {
LABEL_20:
              v25 = (v24 << (57 - v7)) | v10;
              v9 = 8;
              v11 = 7;
              *(_DWORD *)(a2 + 16) = 7;
              v12 = 2 * v25;
              *(_QWORD *)(a2 + 8) = 2 * v25;
              if ((v25 & 0x8000000000000000) == 0)
              {
LABEL_6:
                if (v11)
                {
                  v13 = v11 - 1;
                  *(_DWORD *)(a2 + 16) = v11 - 1;
                  v14 = 2 * v12;
                  *(_QWORD *)(a2 + 8) = 2 * v12;
                  if ((v12 & 0x8000000000000000) == 0)
                    goto LABEL_8;
                  goto LABEL_26;
                }
                v26 = *(_QWORD *)(a2 + 40);
                v27 = *(_DWORD *)(a2 + 4);
                v28 = *(unsigned __int8 **)(a2 + 24);
                *(_DWORD *)(a2 + 16) = v9 + 7;
                if (v27)
                {
                  v29 = 0;
                  if ((unint64_t)v28 < v26)
                    goto LABEL_25;
                }
                else
                {
                  *(_QWORD *)(a2 + 24) = v28 + 1;
                  v29 = *v28;
                  if ((unint64_t)(v28 + 1) < v26)
                  {
LABEL_25:
                    v30 = (v29 << (57 - v9)) | v12;
                    v11 = 8;
                    v13 = 7;
                    *(_DWORD *)(a2 + 16) = 7;
                    v14 = 2 * v30;
                    *(_QWORD *)(a2 + 8) = 2 * v30;
                    if ((v30 & 0x8000000000000000) == 0)
                    {
LABEL_8:
                      if (v13)
                      {
                        *(_DWORD *)(a2 + 16) = v13 - 1;
                        *(_QWORD *)(a2 + 8) = 2 * v14;
                        if ((v14 & 0x8000000000000000) == 0)
                        {
LABEL_10:
                          if (dav1d_get_bits(a2, 1u))
                          {
                            v15 = 4;
                            goto LABEL_44;
                          }
                          if (dav1d_get_bits(a2, 1u))
                          {
                            v15 = 5;
                            goto LABEL_44;
                          }
                          if (dav1d_get_bits(a2, 1u))
                          {
                            v15 = 6;
LABEL_44:
                            v36 = a1 + 328 * *(int *)(*(_QWORD *)(a1 + 96) + 4 * v15 + 472) + 49872;
                            if (!*(_QWORD *)(a1 + 328 * *(int *)(*(_QWORD *)(a1 + 96) + 4 * v15 + 472) + 49888))
                              return 0xFFFFFFFFLL;
                            v37 = *(_DWORD *)(a1 + 328 * *(int *)(*(_QWORD *)(a1 + 96) + 4 * v15 + 472) + 49928);
                            v5[60] = v37;
                            v5[61] = *(_DWORD *)(v36 + 60);
                            v38 = *(_QWORD *)(v36 + 8);
                            v5[111] = *(_DWORD *)(v38 + 444);
                            v5[112] = *(_DWORD *)(v38 + 448);
                            if (!v4[266])
                            {
                              v5[114] = 0;
                              goto LABEL_60;
                            }
                            v39 = *(_DWORD *)(a2 + 16);
                            if (v39)
                            {
                              v40 = *(_QWORD *)(a2 + 8);
                              v41 = v39 - 1;
                              *(_DWORD *)(a2 + 16) = v41;
                              v42 = 2 * v40;
                              *(_QWORD *)(a2 + 8) = 2 * v40;
                              v5[114] = v40 >> 63;
                              if ((v40 & 0x8000000000000000) == 0)
                              {
LABEL_48:
                                v37 = v5[60];
LABEL_60:
                                v5[113] = 8;
                                result = 0;
                                v5[59] = v37;
                                return result;
                              }
LABEL_81:
                              if (v41 <= 2)
                              {
                                v66 = *(_QWORD *)(a2 + 40);
                                v67 = *(_DWORD *)(a2 + 4);
                                v68 = *(unsigned __int8 **)(a2 + 24);
                                *(_DWORD *)(a2 + 16) = v41 + 8;
                                if (v67)
                                {
                                  v69 = 0;
                                }
                                else
                                {
                                  *(_QWORD *)(a2 + 24) = v68 + 1;
                                  v69 = *v68++;
                                }
                                if ((unint64_t)v68 >= v66)
                                {
                                  *(_DWORD *)a2 = v67;
                                  *(_DWORD *)(a2 + 4) = 1;
                                }
                                v42 |= v69 << (56 - v41);
                                v41 += 8;
                              }
                              *(_DWORD *)(a2 + 16) = v41 - 3;
                              *(_QWORD *)(a2 + 8) = 8 * v42;
                              v84 = (v42 >> 61) + 9;
                              v5[113] = v84;
                              v85 = v5[60];
                              v86 = (int)(8 * v85 + (v84 >> 1)) / (int)v84;
                              if (v85 >= 16)
                                v85 = 16;
                              if (v86 <= v85)
                                v86 = v85;
                              result = 0;
                              v5[59] = v86;
                              return result;
                            }
                            v61 = *(_QWORD *)(a2 + 40);
                            v62 = *(_DWORD *)(a2 + 4);
                            v63 = *(unsigned __int8 **)(a2 + 24);
                            *(_DWORD *)(a2 + 16) = 8;
                            if (v62)
                            {
                              v64 = 0;
                              if ((unint64_t)v63 < v61)
                                goto LABEL_80;
                            }
                            else
                            {
                              *(_QWORD *)(a2 + 24) = v63 + 1;
                              v64 = (unint64_t)*v63 << 56;
                              if ((unint64_t)(v63 + 1) < v61)
                              {
LABEL_80:
                                v65 = *(_QWORD *)(a2 + 8) | v64;
                                v41 = 7;
                                *(_DWORD *)(a2 + 16) = 7;
                                v42 = 2 * v65;
                                *(_QWORD *)(a2 + 8) = 2 * v65;
                                v5[114] = v65 >> 63;
                                if ((v65 & 0x8000000000000000) == 0)
                                  goto LABEL_48;
                                goto LABEL_81;
                              }
                            }
                            *(_DWORD *)a2 = v62;
                            *(_DWORD *)(a2 + 4) = 1;
                            goto LABEL_80;
                          }
                          goto LABEL_49;
                        }
LABEL_33:
                        v15 = 3;
                        goto LABEL_44;
                      }
                      v31 = *(_QWORD *)(a2 + 40);
                      v32 = *(_DWORD *)(a2 + 4);
                      v33 = *(unsigned __int8 **)(a2 + 24);
                      *(_DWORD *)(a2 + 16) = v11 + 7;
                      if (v32)
                      {
                        v34 = 0;
                        if ((unint64_t)v33 < v31)
                          goto LABEL_32;
                      }
                      else
                      {
                        *(_QWORD *)(a2 + 24) = v33 + 1;
                        v34 = *v33;
                        if ((unint64_t)(v33 + 1) < v31)
                        {
LABEL_32:
                          v35 = (v34 << (57 - v11)) | v14;
                          *(_DWORD *)(a2 + 16) = 7;
                          *(_QWORD *)(a2 + 8) = 2 * v35;
                          if ((v35 & 0x8000000000000000) == 0)
                            goto LABEL_10;
                          goto LABEL_33;
                        }
                      }
                      *(_DWORD *)a2 = v32;
                      *(_DWORD *)(a2 + 4) = 1;
                      goto LABEL_32;
                    }
LABEL_26:
                    v15 = 2;
                    goto LABEL_44;
                  }
                }
                *(_DWORD *)a2 = v27;
                *(_DWORD *)(a2 + 4) = 1;
                goto LABEL_25;
              }
LABEL_21:
              v15 = 1;
              goto LABEL_44;
            }
          }
          *(_DWORD *)a2 = v22;
          *(_DWORD *)(a2 + 4) = 1;
          goto LABEL_20;
        }
LABEL_16:
        v15 = 0;
        goto LABEL_44;
      }
    }
    *(_DWORD *)a2 = v17;
    *(_DWORD *)(a2 + 4) = 1;
    goto LABEL_15;
  }
LABEL_49:
  if (!v5[75])
  {
    v5[60] = v4[1];
    v50 = v4[2];
    v5[61] = v50;
    if (v4[266])
      goto LABEL_75;
    goto LABEL_62;
  }
  v43 = v4[248];
  v44 = *(_DWORD *)(a2 + 16);
  if (v44 >= v43)
  {
    v51 = *(_QWORD *)(a2 + 8);
    goto LABEL_65;
  }
  v45 = 0;
  v46 = *(_QWORD *)(a2 + 40);
  v47 = *(_DWORD *)(a2 + 4);
  v48 = *(unsigned __int8 **)(a2 + 24);
  do
  {
    v45 <<= 8;
    v44 += 8;
    *(_DWORD *)(a2 + 16) = v44;
    if (v47)
    {
      if ((unint64_t)v48 < v46)
        continue;
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v48 + 1;
      v45 |= *v48++;
      if ((unint64_t)v48 < v46)
        continue;
    }
    *(_DWORD *)a2 = v47;
    v47 = 1;
    *(_DWORD *)(a2 + 4) = 1;
  }
  while (v44 < v43);
  v51 = *(_QWORD *)(a2 + 8) | (v45 << -(char)v44);
LABEL_65:
  *(_DWORD *)(a2 + 16) = v44 - v43;
  v52 = v51 << v43;
  *(_QWORD *)(a2 + 8) = v51 << v43;
  v5[60] = (v51 >> -(char)v43) + 1;
  v53 = v4[249];
  v54 = *(_DWORD *)(a2 + 16);
  if (v54 >= v53)
    goto LABEL_74;
  v55 = 0;
  v56 = *(_QWORD *)(a2 + 40);
  v57 = *(_DWORD *)(a2 + 4);
  v58 = *(unsigned __int8 **)(a2 + 24);
  while (2)
  {
    v55 <<= 8;
    v54 += 8;
    *(_DWORD *)(a2 + 16) = v54;
    if (v57)
    {
      if ((unint64_t)v58 >= v56)
      {
LABEL_72:
        *(_DWORD *)a2 = v57;
        v57 = 1;
        *(_DWORD *)(a2 + 4) = 1;
      }
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v58 + 1;
      v55 |= *v58++;
      if ((unint64_t)v58 >= v56)
        goto LABEL_72;
    }
    if (v54 < v53)
      continue;
    break;
  }
  v52 |= v55 << -(char)v54;
LABEL_74:
  *(_DWORD *)(a2 + 16) = v54 - v53;
  *(_QWORD *)(a2 + 8) = v52 << v53;
  v50 = (v52 >> -(char)v53) + 1;
  v5[61] = v50;
  if (!v4[266])
  {
LABEL_62:
    v5[114] = 0;
    goto LABEL_89;
  }
LABEL_75:
  v59 = *(_DWORD *)(a2 + 16);
  if (v59)
  {
    v60 = *(_QWORD *)(a2 + 8);
    goto LABEL_88;
  }
  v70 = *(_QWORD *)(a2 + 40);
  v71 = *(_DWORD *)(a2 + 4);
  v72 = *(unsigned __int8 **)(a2 + 24);
  *(_DWORD *)(a2 + 16) = 8;
  if (v71)
  {
    v73 = 0;
    if ((unint64_t)v72 >= v70)
      goto LABEL_86;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = v72 + 1;
    v73 = (unint64_t)*v72 << 56;
    if ((unint64_t)(v72 + 1) >= v70)
    {
LABEL_86:
      *(_DWORD *)a2 = v71;
      *(_DWORD *)(a2 + 4) = 1;
    }
  }
  v60 = *(_QWORD *)(a2 + 8) | v73;
  v59 = 8;
LABEL_88:
  v74 = v59 - 1;
  *(_DWORD *)(a2 + 16) = v59 - 1;
  v75 = 2 * v60;
  *(_QWORD *)(a2 + 8) = 2 * v60;
  v5[114] = v60 >> 63;
  if ((v60 & 0x8000000000000000) != 0)
  {
    if (v59 <= 3)
    {
      v80 = *(_QWORD *)(a2 + 40);
      v81 = *(_DWORD *)(a2 + 4);
      v82 = *(unsigned __int8 **)(a2 + 24);
      v74 = v59 + 7;
      *(_DWORD *)(a2 + 16) = v59 + 7;
      if (v81)
      {
        v83 = 0;
      }
      else
      {
        *(_QWORD *)(a2 + 24) = v82 + 1;
        v83 = *v82++;
      }
      if ((unint64_t)v82 >= v80)
      {
        *(_DWORD *)a2 = v81;
        *(_DWORD *)(a2 + 4) = 1;
      }
      v75 |= v83 << (57 - v59);
    }
    *(_DWORD *)(a2 + 16) = v74 - 3;
    *(_QWORD *)(a2 + 8) = 8 * v75;
    v87 = (v75 >> 61) + 9;
    v5[113] = v87;
    v88 = v5[60];
    v89 = (int)(8 * v88 + (v87 >> 1)) / (int)v87;
    if (v88 >= 16)
      v88 = 16;
    if (v89 <= v88)
      v89 = v88;
    v5[59] = v89;
    v76 = *(_DWORD *)(a2 + 16);
    if (!v76)
      goto LABEL_117;
LABEL_90:
    v77 = *(_QWORD *)(a2 + 8);
    v78 = v76 - 1;
    *(_DWORD *)(a2 + 16) = v78;
    v79 = 2 * v77;
    *(_QWORD *)(a2 + 8) = 2 * v77;
    v5[115] = v77 >> 63;
    if ((v77 & 0x8000000000000000) != 0)
      goto LABEL_121;
    goto LABEL_91;
  }
LABEL_89:
  v5[113] = 8;
  v5[59] = v5[60];
  v76 = *(_DWORD *)(a2 + 16);
  if (v76)
    goto LABEL_90;
LABEL_117:
  v90 = *(_QWORD *)(a2 + 40);
  v91 = *(_DWORD *)(a2 + 4);
  v92 = *(unsigned __int8 **)(a2 + 24);
  *(_DWORD *)(a2 + 16) = 8;
  if (v91)
  {
    v93 = 0;
    if ((unint64_t)v92 >= v90)
      goto LABEL_119;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = v92 + 1;
    v93 = (unint64_t)*v92 << 56;
    if ((unint64_t)(v92 + 1) >= v90)
    {
LABEL_119:
      *(_DWORD *)a2 = v91;
      *(_DWORD *)(a2 + 4) = 1;
    }
  }
  v94 = *(_QWORD *)(a2 + 8) | v93;
  v78 = 7;
  *(_DWORD *)(a2 + 16) = 7;
  v79 = 2 * v94;
  *(_QWORD *)(a2 + 8) = 2 * v94;
  v5[115] = v94 >> 63;
  if ((v94 & 0x8000000000000000) == 0)
  {
LABEL_91:
    result = 0;
    v5[111] = v5[60];
    v5[112] = v50;
    return result;
  }
LABEL_121:
  if (v78 <= 0xF)
  {
    v95 = *(_QWORD *)(a2 + 40);
    v96 = *(_DWORD *)(a2 + 4);
    v97 = *(unsigned __int8 **)(a2 + 24);
    *(_DWORD *)(a2 + 16) = v78 + 8;
    if (v96)
    {
      v98 = 0;
      if ((unint64_t)v97 >= v95)
        goto LABEL_124;
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v97 + 1;
      v98 = *v97++;
      if ((unint64_t)v97 >= v95)
      {
LABEL_124:
        *(_DWORD *)a2 = v96;
        v96 = 1;
        *(_DWORD *)(a2 + 4) = 1;
      }
    }
    if (v78 > 7)
    {
      v99 = v78 + 8;
    }
    else
    {
      v98 <<= 8;
      v99 = v78 + 16;
      *(_DWORD *)(a2 + 16) = v78 + 16;
      if (!v96)
      {
        *(_QWORD *)(a2 + 24) = v97 + 1;
        v98 |= *v97++;
      }
      if ((unint64_t)v97 >= v95)
      {
        *(_DWORD *)a2 = v96;
        *(_DWORD *)(a2 + 4) = 1;
      }
      LOBYTE(v78) = v78 + 8;
    }
    v79 |= v98 << (56 - v78);
    v78 = v99;
  }
  v100 = v78 - 16;
  v101 = v79 << 16;
  *(_QWORD *)(a2 + 8) = v79 << 16;
  v5[111] = HIWORD(v79) + 1;
  if (v78 - 16 <= 0xF)
  {
    v102 = *(_QWORD *)(a2 + 40);
    v103 = *(_DWORD *)(a2 + 4);
    v104 = *(unsigned __int8 **)(a2 + 24);
    *(_DWORD *)(a2 + 16) = v78 - 8;
    if (v103)
    {
      v105 = 0;
      if ((unint64_t)v104 >= v102)
        goto LABEL_138;
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v104 + 1;
      v105 = *v104++;
      if ((unint64_t)v104 >= v102)
      {
LABEL_138:
        *(_DWORD *)a2 = v103;
        v103 = 1;
        *(_DWORD *)(a2 + 4) = 1;
      }
    }
    if (v100 > 7)
    {
      v78 -= 8;
    }
    else
    {
      v105 <<= 8;
      *(_DWORD *)(a2 + 16) = v78;
      if (!v103)
      {
        *(_QWORD *)(a2 + 24) = v104 + 1;
        v105 |= *v104++;
      }
      if ((unint64_t)v104 >= v102)
      {
        *(_DWORD *)a2 = v103;
        *(_DWORD *)(a2 + 4) = 1;
      }
      LOBYTE(v100) = v78 - 8;
    }
    v101 |= v105 << (56 - v100);
    v100 = v78;
  }
  result = 0;
  *(_DWORD *)(a2 + 16) = v100 - 16;
  *(_QWORD *)(a2 + 8) = v101 << 16;
  v5[112] = HIWORD(v101) + 1;
  return result;
}

uint64_t dav1d_default_picture_alloc(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v3 = *(_DWORD *)(a1 + 64);
  v4 = (int)(((*(_DWORD *)(a1 + 56) + 127) & 0xFFFFFF80) << (*(_DWORD *)(a1 + 68) > 8));
  v5 = v4 >> (v3 != 3);
  if (v3)
    v6 = v4 >> (v3 != 3);
  else
    v6 = 0;
  if ((v6 & 0x3C0) == 0)
    v5 = v6 + 64;
  v7 = (*(int *)(a1 + 60) + 127) & 0xFFFFFFFFFFFFFF80;
  if (!v3)
    v5 = 0;
  if ((v4 & 0x380) == 0)
    v4 |= 0x40uLL;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  v8 = v4 * v7;
  v9 = v5 * ((int)v7 >> (v3 == 1));
  v10 = dav1d_mem_pool_pop(a2, (char *)((v4 * v7 + 2 * v9) | 0x30));
  if (!v10)
    return 4294967284;
  v11 = v10;
  result = 0;
  *(_QWORD *)(a1 + 256) = v11;
  v13 = *(_QWORD *)v11;
  if (v3)
    v14 = v13 + v8;
  else
    v14 = 0;
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 24) = v14;
  v15 = v13 + v8 + v9;
  if (!v3)
    v15 = 0;
  *(_QWORD *)(a1 + 32) = v15;
  return result;
}

void dav1d_default_picture_release(uint64_t a1, pthread_mutex_t *a2)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = *(_QWORD *)(a1 + 256);
  pthread_mutex_lock(a2);
  v4 = *(_DWORD *)&a2[1].__opaque[4];
  v5 = *(_DWORD *)a2[1].__opaque - 1;
  *(_DWORD *)a2[1].__opaque = v5;
  if (v4)
  {
    pthread_mutex_unlock(a2);
    free(*(void **)v3);
    if (!v5)
    {
      pthread_mutex_destroy(a2);
      free(a2);
    }
  }
  else
  {
    *(_QWORD *)(v3 + 8) = a2[1].__sig;
    a2[1].__sig = v3;
    pthread_mutex_unlock(a2);
  }
}

uint64_t dav1d_thread_picture_alloc(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = a2 + 2528;
  v7 = picture_alloc_with_edges(a2 + 2256, *(_DWORD *)(*(_QWORD *)(a2 + 24) + 240), *(_DWORD *)(*(_QWORD *)(a2 + 24) + 244), *(_QWORD *)(a2 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 16), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 136), a3, (__int128 *)(*(_QWORD *)(a2 + 2976) + 24), (_QWORD *)(a1 + 88760), 8 * (v5 > 1), (_QWORD *)(a2 + 2528));
  if (!(_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 136);
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 16);
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = *(_DWORD *)(v8 + 20);
        (*(void (**)(_QWORD, _QWORD))(v8 + 24))(*(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 32));
        if (v12)
          free((void *)v8);
      }
      *(_QWORD *)(a1 + 136) = 0;
    }
    *(_QWORD *)(a1 + 144) = 0;
    *(_DWORD *)(a2 + 2524) = *(_DWORD *)(a1 + 88824);
    *(_DWORD *)(a1 + 88824) = 0;
    *(_DWORD *)(a2 + 2520) = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 276);
    if (v5 >= 2)
    {
      **(_DWORD **)v6 = 0;
      *(_DWORD *)(*(_QWORD *)v6 + 4) = 0;
    }
  }
  return v7;
}

uint64_t picture_alloc_with_edges(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int128 *a15, _QWORD *a16, uint64_t a17, _QWORD *a18)
{
  uint64_t v18;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;

  if (*(_QWORD *)(a1 + 16))
    return 0xFFFFFFFFLL;
  v28 = malloc_type_malloc(a17 + 296, 0x13C0B8ABuLL);
  if (!v28)
    return 4294967284;
  v29 = v28;
  *(_DWORD *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 60) = a3;
  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a6;
  *(_QWORD *)(a1 + 120) = a8;
  *(_QWORD *)(a1 + 128) = a10;
  *(_QWORD *)(a1 + 136) = a12;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a4 + 12);
  *(_DWORD *)(a1 + 68) = a14;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 72) = 0x8000000000000000;
  *(_QWORD *)(a1 + 88) = -1;
  v30 = ((uint64_t (*)(uint64_t, _QWORD))a16[1])(a1, *a16);
  if ((v30 & 0x80000000) != 0)
  {
    v18 = v30;
LABEL_39:
    free(v29);
    return v18;
  }
  v31 = *(_OWORD *)a16;
  v29[2] = a16[2];
  *(_OWORD *)v29 = v31;
  memcpy(v29 + 3, (const void *)a1, 0x108uLL);
  v32 = *(_QWORD *)(a1 + 16);
  v33 = malloc_type_malloc(0x28uLL, 0x10C0040DB5B76A7uLL);
  if (!v33)
  {
    *(_QWORD *)(a1 + 248) = 0;
    ((void (*)(uint64_t, _QWORD))a16[2])(a1, *a16);
    v18 = 4294967284;
    goto LABEL_39;
  }
  *v33 = 0;
  v33[1] = v32;
  v33[2] = 0x100000001;
  v33[3] = free_buffer;
  v33[4] = v29;
  *(_QWORD *)(a1 + 248) = v33;
  *(_QWORD *)(a1 + 184) = a5;
  if (a5)
  {
    v34 = (unsigned int *)(a5 + 16);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)(a1 + 176) = a7;
  if (a7)
  {
    v36 = (unsigned int *)(a7 + 16);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(_QWORD *)(a1 + 112);
  if (v38)
  {
    v39 = (unsigned int *)(v38 + 16);
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      v42 = *(_DWORD *)(v38 + 20);
      (*(void (**)(_QWORD, _QWORD))(v38 + 24))(*(_QWORD *)(v38 + 8), *(_QWORD *)(v38 + 32));
      if (v42)
        free((void *)v38);
    }
    *(_QWORD *)(a1 + 112) = 0;
  }
  v43 = *a15;
  v44 = a15[2];
  *(_OWORD *)(a1 + 88) = a15[1];
  *(_OWORD *)(a1 + 104) = v44;
  *(_OWORD *)(a1 + 72) = v43;
  v45 = *(_QWORD *)(a1 + 112);
  if (v45)
  {
    v46 = (unsigned int *)(v45 + 16);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 + 1, v46));
  }
  if (a17 && a18)
    *a18 = v29 + 36;
  *(_QWORD *)(a1 + 192) = a9;
  if (a9)
  {
    v48 = (unsigned int *)(a9 + 16);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 + 1, v48));
  }
  *(_QWORD *)(a1 + 200) = a11;
  if (a11)
  {
    v50 = (unsigned int *)(a11 + 16);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 + 1, v50));
  }
  *(_QWORD *)(a1 + 208) = a13;
  if (a13)
  {
    v52 = (unsigned int *)(a13 + 16);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 + 1, v52));
  }
  return 0;
}

void *dav1d_picture_ref(_QWORD *a1, _QWORD *a2)
{
  FILE *v2;
  const char *v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;

  if (!a1)
  {
    v2 = (FILE *)*MEMORY[0x1E0C80C10];
    v3 = "dst != ((void *)0)";
    return (void *)fprintf(v2, "Input validation check '%s' failed in %s!\n", v3, "dav1d_picture_ref");
  }
  if (a1[2])
  {
    v2 = (FILE *)*MEMORY[0x1E0C80C10];
    v3 = "dst->data[0] == ((void *)0)";
    return (void *)fprintf(v2, "Input validation check '%s' failed in %s!\n", v3, "dav1d_picture_ref");
  }
  if (!a2)
  {
    v2 = (FILE *)*MEMORY[0x1E0C80C10];
    v3 = "src != ((void *)0)";
    return (void *)fprintf(v2, "Input validation check '%s' failed in %s!\n", v3, "dav1d_picture_ref");
  }
  v5 = a2[31];
  if (v5)
  {
    if (!a2[2])
    {
      v2 = (FILE *)*MEMORY[0x1E0C80C10];
      v3 = "src->data[0] != ((void *)0)";
      return (void *)fprintf(v2, "Input validation check '%s' failed in %s!\n", v3, "dav1d_picture_ref");
    }
    v6 = (unsigned int *)(v5 + 16);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = a2[22];
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 16);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    v11 = a2[23];
    if (v11)
    {
      v12 = (unsigned int *)(v11 + 16);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
    v14 = a2[14];
    if (v14)
    {
      v15 = (unsigned int *)(v14 + 16);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
    }
    v17 = a2[24];
    if (v17)
    {
      v18 = (unsigned int *)(v17 + 16);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
    }
    v20 = a2[25];
    if (v20)
    {
      v21 = (unsigned int *)(v20 + 16);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
    v23 = a2[26];
    if (v23)
    {
      v24 = (unsigned int *)(v23 + 16);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
    }
  }
  return memcpy(a1, a2, 0x108uLL);
}

double dav1d_picture_move_ref(_QWORD *a1, _QWORD *__src)
{
  FILE *v2;
  const char *v3;
  double result;

  if (!a1)
  {
    v2 = (FILE *)*MEMORY[0x1E0C80C10];
    v3 = "dst != ((void *)0)";
    goto LABEL_5;
  }
  if (a1[2])
  {
    v2 = (FILE *)*MEMORY[0x1E0C80C10];
    v3 = "dst->data[0] == ((void *)0)";
LABEL_5:
    fprintf(v2, "Input validation check '%s' failed in %s!\n", v3, "dav1d_picture_move_ref");
    return result;
  }
  if (!__src)
  {
    v2 = (FILE *)*MEMORY[0x1E0C80C10];
    v3 = "src != ((void *)0)";
    goto LABEL_5;
  }
  if (__src[31] && !__src[2])
  {
    v2 = (FILE *)*MEMORY[0x1E0C80C10];
    v3 = "src->data[0] != ((void *)0)";
    goto LABEL_5;
  }
  memcpy(a1, __src, 0x108uLL);
  result = 0.0;
  *(_OWORD *)__src = 0u;
  *((_OWORD *)__src + 1) = 0u;
  *((_OWORD *)__src + 2) = 0u;
  *((_OWORD *)__src + 3) = 0u;
  *((_OWORD *)__src + 4) = 0u;
  *((_OWORD *)__src + 5) = 0u;
  *((_OWORD *)__src + 6) = 0u;
  *((_OWORD *)__src + 7) = 0u;
  *((_OWORD *)__src + 8) = 0u;
  *((_OWORD *)__src + 9) = 0u;
  *((_OWORD *)__src + 10) = 0u;
  *((_OWORD *)__src + 11) = 0u;
  *((_OWORD *)__src + 12) = 0u;
  *((_OWORD *)__src + 13) = 0u;
  *((_OWORD *)__src + 14) = 0u;
  *((_OWORD *)__src + 15) = 0u;
  __src[32] = 0;
  return result;
}

double dav1d_thread_picture_move_ref(_QWORD *a1, uint64_t a2)
{
  double result;

  dav1d_picture_move_ref(a1, (_QWORD *)a2);
  a1[34] = *(_QWORD *)(a2 + 272);
  a1[33] = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 272) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

void dav1d_picture_unref_internal(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  FILE *v37;
  const char *v38;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 248);
    if (!v2)
    {
LABEL_50:
      *(_QWORD *)(a1 + 256) = 0;
      *(_OWORD *)(a1 + 224) = 0u;
      *(_OWORD *)(a1 + 240) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      *(_OWORD *)(a1 + 208) = 0u;
      *(_OWORD *)(a1 + 160) = 0u;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_QWORD *)(a1 + 72) = 0x8000000000000000;
      *(_QWORD *)(a1 + 88) = -1;
      return;
    }
    if (*(_QWORD *)(a1 + 16))
    {
      v3 = (unsigned int *)(v2 + 16);
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        v6 = *(_DWORD *)(v2 + 20);
        (*(void (**)(_QWORD, _QWORD))(v2 + 24))(*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 32));
        if (v6)
          free((void *)v2);
      }
      *(_QWORD *)(a1 + 248) = 0;
      v7 = *(_QWORD *)(a1 + 184);
      if (v7)
      {
        v8 = (unsigned int *)(v7 + 16);
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          v11 = *(_DWORD *)(v7 + 20);
          (*(void (**)(_QWORD, _QWORD))(v7 + 24))(*(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 32));
          if (v11)
            free((void *)v7);
        }
        *(_QWORD *)(a1 + 184) = 0;
      }
      v12 = *(_QWORD *)(a1 + 176);
      if (v12)
      {
        v13 = (unsigned int *)(v12 + 16);
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          v16 = *(_DWORD *)(v12 + 20);
          (*(void (**)(_QWORD, _QWORD))(v12 + 24))(*(_QWORD *)(v12 + 8), *(_QWORD *)(v12 + 32));
          if (v16)
            free((void *)v12);
        }
        *(_QWORD *)(a1 + 176) = 0;
      }
      v17 = *(_QWORD *)(a1 + 112);
      if (v17)
      {
        v18 = (unsigned int *)(v17 + 16);
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          v21 = *(_DWORD *)(v17 + 20);
          (*(void (**)(_QWORD, _QWORD))(v17 + 24))(*(_QWORD *)(v17 + 8), *(_QWORD *)(v17 + 32));
          if (v21)
            free((void *)v17);
        }
        *(_QWORD *)(a1 + 112) = 0;
      }
      v22 = *(_QWORD *)(a1 + 192);
      if (v22)
      {
        v23 = (unsigned int *)(v22 + 16);
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          v26 = *(_DWORD *)(v22 + 20);
          (*(void (**)(_QWORD, _QWORD))(v22 + 24))(*(_QWORD *)(v22 + 8), *(_QWORD *)(v22 + 32));
          if (v26)
            free((void *)v22);
        }
        *(_QWORD *)(a1 + 192) = 0;
      }
      v27 = *(_QWORD *)(a1 + 200);
      if (v27)
      {
        v28 = (unsigned int *)(v27 + 16);
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = *(_DWORD *)(v27 + 20);
          (*(void (**)(_QWORD, _QWORD))(v27 + 24))(*(_QWORD *)(v27 + 8), *(_QWORD *)(v27 + 32));
          if (v31)
            free((void *)v27);
        }
        *(_QWORD *)(a1 + 200) = 0;
      }
      v32 = *(_QWORD *)(a1 + 208);
      if (v32)
      {
        v33 = (unsigned int *)(v32 + 16);
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          v36 = *(_DWORD *)(v32 + 20);
          (*(void (**)(_QWORD, _QWORD))(v32 + 24))(*(_QWORD *)(v32 + 8), *(_QWORD *)(v32 + 32));
          if (v36)
            free((void *)v32);
        }
      }
      goto LABEL_50;
    }
    v37 = (FILE *)*MEMORY[0x1E0C80C10];
    v38 = "p->data[0] != ((void *)0)";
  }
  else
  {
    v37 = (FILE *)*MEMORY[0x1E0C80C10];
    v38 = "p != ((void *)0)";
  }
  fprintf(v37, "Input validation check '%s' failed in %s!\n", v38, "dav1d_picture_unref_internal");
}

void free_buffer(uint64_t a1, void (**a2)(uint64_t, _QWORD))
{
  a2[2]((uint64_t)(a2 + 3), *a2);
  free(a2);
}

void *untriangle(_BYTE *__dst, char *__src, unsigned int a3)
{
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *result;
  char *v12;
  uint64_t v13;

  v4 = __dst;
  v5 = 0;
  v6 = a3;
  v7 = a3 + 1;
  v8 = a3;
  v9 = __dst;
  do
  {
    v10 = v5 + 1;
    result = memcpy(v9, __src, v5 + 1);
    if (v5 + 1 < v6)
    {
      v12 = &__src[v5];
      v13 = 1;
      do
      {
        v12 += v5 + v13;
        v4[v13++] = *v12;
      }
      while (v8 != v13);
    }
    v9 += v6;
    __src += v10;
    --v8;
    v4 += v7;
    ++v5;
  }
  while (v10 != v6);
  return result;
}

double dav1d_ref_create(uint64_t a1)
{
  unint64_t v1;
  int v2;
  double result;
  void *v4;
  BOOL v5;
  void **v6;
  void *memptr;

  v1 = (a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  memptr = 0;
  v2 = malloc_type_posix_memalign(&memptr, 0x40uLL, v1 + 40, 0xCA3F0CE3uLL);
  v4 = memptr;
  if (v2)
    v5 = 1;
  else
    v5 = memptr == 0;
  if (!v5)
  {
    v6 = (void **)((char *)memptr + v1);
    *v6 = memptr;
    v6[1] = v4;
    *(_QWORD *)&result = 1;
    v6[2] = (void *)1;
    v6[3] = default_free_callback;
    v6[4] = v4;
  }
  return result;
}

double dav1d_ref_create_using_pool(uint64_t a1, uint64_t a2)
{
  char *v3;
  double result;

  v3 = dav1d_mem_pool_pop(a1, (char *)(((a2 + 7) & 0xFFFFFFFFFFFFFFF8) + 40));
  if (v3)
  {
    *((_QWORD *)v3 - 5) = *(_QWORD *)v3;
    *((_QWORD *)v3 - 4) = a1;
    *(_QWORD *)&result = 1;
    *((_QWORD *)v3 - 3) = 1;
    *((_QWORD *)v3 - 2) = pool_free_callback;
    *((_QWORD *)v3 - 1) = v3;
  }
  return result;
}

void pool_free_callback(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v4 = *(_DWORD *)(a1 + 76);
  v5 = *(_DWORD *)(a1 + 72) - 1;
  *(_DWORD *)(a1 + 72) = v5;
  if (v4)
  {
    pthread_mutex_unlock((pthread_mutex_t *)a1);
    free(*(void **)a2);
    if (!v5)
    {
      pthread_mutex_destroy((pthread_mutex_t *)a1);
      free((void *)a1);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = a2;
    pthread_mutex_unlock((pthread_mutex_t *)a1);
  }
}

void dav1d_ref_dec(uint64_t *a1)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  int v6;

  v1 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v1 + 16);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      v6 = *(_DWORD *)(v1 + 20);
      (*(void (**)(_QWORD, _QWORD))(v1 + 24))(*(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 32));
      if (v6)
        free((void *)v1);
    }
    *a1 = 0;
  }
}

uint64_t dav1d_refmvs_find(uint64_t a1, int16x4_t *a2, int *a3, int *a4, __int16 a5, int a6, char a7, unsigned int a8, signed int a9)
{
  uint64_t v9;
  int v12;
  uint64_t *v13;
  unsigned __int8 *v14;
  int v15;
  int32x2_t v16;
  int v17;
  signed int v18;
  int v19;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  int gmv_2d;
  int v26;
  uint64_t v27;
  signed int v28;
  unsigned int v29;
  int v30;
  uint64_t *v31;
  int v32;
  int *v33;
  unsigned __int16 v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  uint64_t *v44;
  unsigned int *v45;
  int v46;
  uint64_t v47;
  signed int v48;
  int v49;
  uint64_t *v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned __int16 v62;
  uint64_t v63;
  unsigned __int8 *v64;
  signed int v65;
  signed int v66;
  int v67;
  int *v68;
  int *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  signed int v73;
  unsigned int v74;
  int v75;
  uint64_t *v76;
  unsigned int v77;
  int v78;
  int v79;
  int *v80;
  uint64_t *v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  int16x4_t *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int16x4_t *v93;
  char v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int *v103;
  int v104;
  unsigned int v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  signed int v112;
  int v113;
  unsigned int v114;
  int v115;
  int v116;
  int v117;
  int *v118;
  signed int v119;
  char v120;
  char v121;
  unsigned __int32 v122;
  int v123;
  int v124;
  _QWORD *v125;
  unsigned __int32 v126;
  int v127;
  int v128;
  unsigned int v129;
  int v130;
  char v131;
  unsigned int *v132;
  unsigned __int8 *v133;
  unsigned __int32 v134;
  int v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  int16x4_t *v146;
  int16x4_t *v147;
  int v148;
  uint64_t v149;
  int v150;
  unsigned int v151;
  int v152;
  unsigned int *v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int16x4_t *v161;
  int16x4_t *v162;
  int v163;
  int v164;
  int v165;
  unsigned int *v166;
  unsigned __int8 *v167;
  unsigned __int32 v168;
  int v169;
  int v170;
  int v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int16x4_t *v182;
  int16x4_t *v183;
  unsigned int v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  unsigned int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int32x2_t *v193;
  __int16 v194;
  unsigned int *v195;
  uint64_t result;
  int v197;
  int *v198;
  int v199;
  int v200;
  int v201;
  int v202;
  uint64_t v203;
  int16x4_t *v204;
  uint64_t v205;
  __int128 v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  int v211;
  uint64_t v212;
  __int128 v213;
  uint64_t v214;
  int v215;
  int v216;
  int v217;
  unsigned int *v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  signed int v224;
  int v225;
  int v226;
  uint64_t v227;
  int v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  signed int v233;
  int8x8_t v234;
  int32x2_t v235;
  uint64_t v236;
  int16x4_t *v237;
  int32x2_t v238;
  int8x8_t v239;
  int v240;
  __int32 v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  int16x4_t *v245;
  unint64_t v246;
  uint64_t v247;
  int16x4_t *v248;
  int v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  int16x4_t *v253;
  int v254;
  int v255;
  uint64_t v256;
  unint64_t v257;
  BOOL v258;
  uint64_t v259;
  unsigned int *v260;
  unint64_t v261;
  uint64_t v262;
  unsigned int *v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  int16x4_t *v268;
  uint64_t v269;
  int v270;
  int16x4_t *v271;
  int32x4_t v272;
  int8x16_t v273;
  int32x4_t v274;
  int32x4_t v275;
  uint64_t v276;
  int32x4_t v277;
  int v278;
  int v279;
  int v280;
  uint64_t v281;
  int16x4_t *v282;
  unint64_t v283;
  unsigned int v284;
  uint64_t v285;
  int v286;
  int v287;
  uint64_t v288;
  int v290;
  int v291;
  int v292;
  __int16 v293;
  unsigned int *v294;
  int v295;
  int32x2_t v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int v300;
  int v301;
  int v302;
  uint64_t *v303;
  uint64_t v304;
  int v305;
  int v306;
  int v307;
  int v308;
  unsigned int v309;
  int v310;
  unsigned int v311;
  int v312;
  int v313;
  int v314;
  unsigned __int16 v315;
  signed int v316;
  int v317;
  signed int v318;
  uint64_t v319;
  unsigned int v320;
  int v321;
  int *v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  int v326;
  int v327;
  char v328;
  char v329;
  int v330;
  int v331;
  int v332;
  int v333;
  uint64_t v334;
  int v335;
  uint64_t v337;
  uint64_t v338;
  int v339;
  int v340;
  int v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  _DWORD v345[2];
  uint64_t v346;

  v12 = a9;
  v346 = *MEMORY[0x1E0C80C00];
  v13 = *(uint64_t **)a1;
  v14 = &dav1d_block_dimensions[4 * a6];
  v15 = *(_DWORD *)(a1 + 316) - a9;
  v16.i32[0] = *v14;
  v16.i32[1] = v14[1];
  if (v16.i32[0] < v15)
    v15 = *v14;
  v306 = v15;
  if (v15 >= 16)
    v15 = 16;
  v317 = v15;
  v17 = *(_DWORD *)(a1 + 324) - a8;
  v296 = v16;
  v18 = v14[1];
  if (v16.i32[1] < v17)
    v17 = v14[1];
  v321 = v17;
  if (v17 >= 16)
    v19 = 16;
  else
    v19 = v17;
  v302 = v19;
  *a3 = 0;
  v318 = v16.i32[0];
  v288 = a5;
  if ((_BYTE)a5)
  {
    v22 = v13;
    v23 = *v13 + 36 * (a5 - 1);
    v24 = a8;
    gmv_2d = get_gmv_2d((int *)(v23 + 1424), a9, a8, v16.u32[0], v16.u32[1], *v13);
    if (*(_DWORD *)(v23 + 1424) <= 1u)
      v26 = -2147450880;
    else
      v26 = gmv_2d;
  }
  else
  {
    v24 = a8;
    v22 = v13;
    gmv_2d = 0;
    v26 = -2147450880;
  }
  v325 = v26;
  v287 = gmv_2d;
  v345[0] = gmv_2d;
  v286 = a5 >> 8;
  if (v286 < 1)
  {
    v28 = v318;
    v31 = v22;
    v30 = v24;
  }
  else
  {
    v27 = *v22 + 36 * ((a5 >> 8) - 1);
    v28 = v318;
    v29 = get_gmv_2d((int *)(v27 + 1424), a9, v24, v318, v18, *v22);
    v30 = v24;
    v31 = v22;
    v345[1] = v29;
    v284 = v29;
    if (*(_DWORD *)(v27 + 1424) <= 1u)
      v9 = 2147516416;
    else
      v9 = v29;
  }
  v342 = 0;
  v341 = 0;
  v32 = *(_DWORD *)(a1 + 320);
  v33 = a3;
  v322 = a3;
  v303 = v31;
  v319 = a1;
  v316 = v18;
  v320 = v9;
  v34 = a5;
  v295 = v30;
  v293 = a5;
  if (v32 >= v30)
  {
    v324 = 0;
    v294 = 0;
    v47 = 0xFFFFFFFFLL;
    v48 = *(_DWORD *)(a1 + 312);
    v309 = -1;
    if (v48 >= a9)
      goto LABEL_90;
  }
  else
  {
    v35 = (v30 - v32 + 1) >> 1;
    if (v296.i32[1] <= 1u)
      v36 = 2;
    else
      v36 = 3;
    if (v35 >= v36)
      v35 = v36;
    v324 = v35;
    v37 = *(_QWORD *)(a1 + 8 * ((v30 & 0x1Fu) + 4) + 8) + 12 * a9;
    if (v296.i32[0] <= 0xFu)
      v38 = 1;
    else
      v38 = 4;
    v39 = &dav1d_block_dimensions[4 * *(unsigned __int8 *)(v37 + 10)];
    v40 = *v39;
    if (v28 >= (int)v40)
      v41 = *v39;
    else
      v41 = v28;
    if (v38 <= v41)
      v42 = v41;
    else
      v42 = v38;
    v294 = (unsigned int *)(*(_QWORD *)(a1 + 8 * ((v30 & 0x1Fu) + 4) + 8) + 12 * a9);
    if (v40 >= v296.i32[0])
    {
      v49 = v30;
      v50 = v31;
      v51 = 2;
      if (v296.i32[0] != 1)
      {
        v52 = 2 * v35;
        v53 = v39[1];
        if ((int)(2 * v324) >= v53)
          v52 = v53;
        if (v52 <= 2)
          v51 = 2;
        else
          v51 = v52;
      }
      add_spatial_candidate((uint64_t)a2, a3, v51 * v42, v294, v34, v325, v9, (_DWORD *)&v342 + 1, &v341);
      v47 = v51 >> 1;
      v33 = a3;
      v31 = v50;
      v30 = v49;
      v48 = *(_DWORD *)(a1 + 312);
      v309 = v51 >> 1;
      if (v48 >= a9)
      {
LABEL_90:
        v323 = 0;
        v58 = 0;
        v72 = 0xFFFFFFFFLL;
        v73 = v318;
        if (v318 <= v18)
          v74 = v18;
        else
          v74 = v318;
        v311 = -1;
        if ((a7 & 1) == 0)
          goto LABEL_103;
        goto LABEL_99;
      }
    }
    else
    {
      v43 = v30;
      v44 = v31;
      add_spatial_candidate((uint64_t)a2, a3, 2 * v42, (unsigned int *)v37, v34, v325, v9, (_DWORD *)&v342 + 1, &v341);
      if (v42 >= v317)
      {
        v47 = 1;
        v33 = a3;
        v31 = v44;
        v30 = v43;
        v48 = *(_DWORD *)(a1 + 312);
        v309 = 1;
        if (v48 >= a9)
          goto LABEL_90;
      }
      else
      {
        do
        {
          v45 = &v294[3 * v42];
          if (v38 <= dav1d_block_dimensions[4 * *((unsigned __int8 *)v45 + 10)])
            v46 = dav1d_block_dimensions[4 * *((unsigned __int8 *)v45 + 10)];
          else
            v46 = v38;
          add_spatial_candidate((uint64_t)a2, a3, 2 * v46, v45, v34, v325, v320, (_DWORD *)&v342 + 1, &v341);
          v42 += v46;
        }
        while (v42 < v317);
        v47 = 1;
        v33 = a3;
        v31 = v303;
        v12 = a9;
        v34 = v293;
        v30 = v295;
        v48 = *(_DWORD *)(a1 + 312);
        v309 = 1;
        if (v48 >= a9)
          goto LABEL_90;
      }
    }
  }
  v54 = (v12 - v48 + 1) >> 1;
  if (v296.i32[0] <= 1u)
    v55 = 2;
  else
    v55 = 3;
  if (v54 >= v55)
    v54 = v55;
  v323 = v54;
  v56 = a1 + 8 * ((v30 & 0x1Fu) + 5);
  v59 = *(_QWORD *)(v56 + 8);
  v58 = v56 + 8;
  v57 = v59;
  v60 = v12 - 1;
  if (v296.i32[1] <= 0xFu)
    v61 = 1;
  else
    v61 = 4;
  v62 = v34;
  v63 = v57 + 12 * v60;
  v64 = &dav1d_block_dimensions[4 * *(unsigned __int8 *)(v63 + 10)];
  v65 = v64[1];
  if (v18 >= v65)
    v66 = v64[1];
  else
    v66 = v18;
  if (v61 <= v66)
    v67 = v66;
  else
    v67 = v61;
  if (v65 < v296.i32[1])
  {
    v68 = v33;
    add_spatial_candidate((uint64_t)a2, v33, 2 * v67, (unsigned int *)v63, v34, v325, v320, (_DWORD *)&v342 + 1, &v342);
    if (v67 >= v302)
    {
      v72 = 1;
      v31 = v303;
      v12 = a9;
      v47 = v309;
      v33 = v68;
      v30 = v295;
      v73 = v318;
      if (v318 <= v18)
        v74 = v18;
      else
        v74 = v318;
      v311 = 1;
      if ((a7 & 1) == 0)
        goto LABEL_103;
    }
    else
    {
      v69 = v68;
      do
      {
        v70 = *(_QWORD *)(v58 + 8 * v67) + 12 * v60;
        if (v61 <= dav1d_block_dimensions[4 * *(unsigned __int8 *)(v70 + 10) + 1])
          v71 = dav1d_block_dimensions[4 * *(unsigned __int8 *)(v70 + 10) + 1];
        else
          v71 = v61;
        add_spatial_candidate((uint64_t)a2, v69, 2 * v71, (unsigned int *)v70, v62, v325, v320, (_DWORD *)&v342 + 1, &v342);
        v67 += v71;
      }
      while (v67 < v302);
      v72 = 1;
      v33 = v69;
      v30 = v295;
      v31 = v303;
      v12 = a9;
      v34 = v293;
      v47 = v309;
      v73 = v318;
      if (v318 <= v18)
        v74 = v18;
      else
        v74 = v318;
      v311 = 1;
      if ((a7 & 1) == 0)
        goto LABEL_103;
    }
    goto LABEL_99;
  }
  v75 = v30;
  v76 = v31;
  v77 = 2;
  if (v296.i32[1] != 1)
  {
    v78 = 2 * v54;
    v79 = *v64;
    if ((int)(2 * v323) >= v79)
      v78 = v79;
    if (v78 <= 2)
      v77 = 2;
    else
      v77 = v78;
  }
  add_spatial_candidate((uint64_t)a2, v322, v77 * v67, (unsigned int *)v63, v34, v325, v320, (_DWORD *)&v342 + 1, &v342);
  v72 = v77 >> 1;
  v33 = v322;
  v12 = a9;
  v47 = v309;
  v73 = v318;
  v31 = v76;
  v30 = v75;
  if (v318 <= v18)
    v74 = v18;
  else
    v74 = v318;
  v311 = v72;
  if ((a7 & 1) != 0)
  {
LABEL_99:
    if ((_DWORD)v47 != -1 && v74 <= 0x10 && v73 + v12 < *(_DWORD *)(v319 + 316))
    {
      v80 = v33;
      v81 = v31;
      v82 = v30;
      add_spatial_candidate((uint64_t)a2, v33, 4u, &v294[3 * v296.u32[0]], v34, v325, v320, (_DWORD *)&v342 + 1, &v341);
      v30 = v82;
      v31 = v81;
      v72 = v311;
      v33 = v80;
      v47 = v309;
    }
  }
LABEL_103:
  v84 = v341;
  v83 = v342;
  v85 = *v33;
  v86 = v325;
  v87 = v320;
  if ((int)v85 >= 1)
  {
    if ((_DWORD)v85 == 1)
    {
      v88 = 0;
    }
    else
    {
      v88 = v85 & 0xFFFFFFFE;
      v89 = a2 + 3;
      v90 = v88;
      do
      {
        v91 = v89->i32[0] + 640;
        v89[-2].i32[0] += 640;
        v89->i32[0] = v91;
        v89 += 4;
        v90 -= 2;
      }
      while (v90);
      if (v88 == v85)
        goto LABEL_111;
    }
    v92 = v85 - v88;
    v93 = &a2[2 * v88 + 1];
    do
    {
      v93->i32[0] += 640;
      v93 += 2;
      --v92;
    }
    while (v92);
  }
LABEL_111:
  v94 = v30;
  v292 = v85;
  v299 = v58;
  v340 = *(_DWORD *)(*v31 + 512);
  v95 = v317;
  if (*((_DWORD *)v31 + 7))
  {
    v300 = v74;
    v308 = v84;
    v314 = v83;
    v290 = v30 >> 1;
    v304 = v303[23];
    v297 = v12 >> 1;
    v298 = *(_QWORD *)(v319 + 304) + 8 * (v304 * ((v30 >> 1) & 0xF) + (v12 >> 1));
    if (v296.i32[1] <= 0xFu)
      v96 = 1;
    else
      v96 = 2;
    if ((v317 + 1) >> 1 >= 8)
      v97 = 8;
    else
      v97 = (v317 + 1) >> 1;
    if ((v302 + 1) >> 1 >= 8)
      v98 = 8;
    else
      v98 = (v302 + 1) >> 1;
    if (v321 >= 1)
    {
      if (v306 <= 0)
      {
        v104 = 0;
        do
          v104 += v96;
        while (v104 < v98);
      }
      else
      {
        v99 = 0;
        if (v296.i32[0] <= 0xFu)
          v100 = 1;
        else
          v100 = 2;
        v101 = *(_QWORD *)(v319 + 304) + 8 * (v304 * ((v30 >> 1) & 0xF) + (v12 >> 1));
        v327 = v98;
        v332 = v96;
        do
        {
          v102 = 0;
          v337 = v101;
          do
          {
            if (v99 | v102)
              v103 = 0;
            else
              v103 = &v340;
            add_temporal_candidate(v303, (uint64_t)a2, v322, v101, v293, v103, (__int16 *)v345);
            v102 += v100;
            v101 += 8 * v100;
          }
          while (v97 > v102);
          v99 += v332;
          v101 = v337 + 8 * (v304 << (v296.i32[1] > 0xFu));
        }
        while (v99 < v327);
      }
    }
    v95 = v317;
    v105 = v18;
    v73 = v318;
    if (v318 < v18)
      v105 = v318;
    v106 = v105 < 2 || v300 > 0xF;
    v33 = v322;
    v94 = v295;
    v12 = a9;
    v34 = v293;
    v84 = v308;
    v47 = v309;
    v86 = v325;
    v72 = v311;
    v83 = v314;
    v87 = v320;
    if (!v106)
    {
      v107 = v18 >> 1;
      v108 = v318 >> 1;
      v338 = v298 + 8 * v304 * v107;
      v109 = v107 + v290;
      v110 = (v290 & 0xFFFFFFF8) + 8;
      if (*(int *)(v319 + 324) >> 1 >= v110)
        v111 = (v290 & 0xFFFFFFF8) + 8;
      else
        v111 = *(int *)(v319 + 324) >> 1;
      if (v109 >= v111)
      {
        v113 = v297;
        v114 = v297 & 0xFFFFFFF8;
      }
      else
      {
        v112 = *(int *)(v319 + 312) >> 1;
        v113 = v297;
        v114 = v297 & 0xFFFFFFF8;
        if (v112 <= (int)(v297 & 0xFFFFFFF8))
          v112 = v297 & 0xFFFFFFF8;
        if (v297 > v112)
        {
          add_temporal_candidate(v303, (uint64_t)a2, v322, v338 - 8, v293, 0, 0);
          v113 = v297;
          v84 = v308;
          v47 = v309;
          v72 = v311;
          v83 = v314;
          v87 = v320;
          v86 = v325;
        }
      }
      v115 = v108 + v113;
      v116 = *(int *)(v319 + 316) >> 1;
      if (v116 >= (int)(v114 + 8))
        v116 = v114 + 8;
      v33 = v322;
      v73 = v318;
      if (v115 < v116)
      {
        if (v109 < v111)
        {
          add_temporal_candidate(v303, (uint64_t)a2, v322, v338 + 8 * v108, v293, 0, 0);
          v84 = v308;
          v47 = v309;
          v72 = v311;
          v83 = v314;
          v87 = v320;
          v86 = v325;
          v33 = v322;
        }
        v117 = *(int *)(v319 + 324) >> 1;
        if (v117 >= v110)
          v117 = (v290 & 0xFFFFFFF8) + 8;
        if (v109 <= v117)
        {
          v118 = v33;
          add_temporal_candidate(v303, (uint64_t)a2, v33, v338 + 8 * (v108 - v304), v293, 0, 0);
          v84 = v308;
          v47 = v309;
          v72 = v311;
          v83 = v314;
          v87 = v320;
          v86 = v325;
          v33 = v118;
        }
      }
    }
  }
  v291 = v84 + v83;
  v339 = 0;
  v315 = v34;
  if ((v72 | v47) != 0xFFFFFFFF)
  {
    add_spatial_candidate((uint64_t)a2, v33, 4u, v294 - 3, v34, v325, v87, &v339, &v341);
    v87 = v320;
    v72 = v311;
    v86 = v325;
    v33 = v322;
    v47 = v309;
  }
  v119 = v73;
  v120 = 0;
  v121 = v94;
  v312 = (v94 & 0x1F) + 1;
  v285 = v12;
  v310 = v12 | 1;
  v122 = v296.i32[0];
  if (v296.i32[0] <= 0xFu)
    v123 = 2;
  else
    v123 = 4;
  v334 = v34 & 0xFF00;
  v333 = v34;
  v124 = (char)v34;
  v125 = (_QWORD *)(v319 + 8 * ((v121 & 0x1Eu) + 6) + 8);
  v307 = v12 + 1;
  v126 = v296.u32[1];
  if (v296.i32[1] <= 0xFu)
    v127 = 2;
  else
    v127 = 4;
  v128 = -2;
  v129 = 2;
  v301 = v124;
  do
  {
    v131 = v120;
    if (v129 <= v324 && v129 > v47)
    {
      v132 = (unsigned int *)(*(_QWORD *)(((8 * (int)(v312 - 2 * v129)) | 8) + v319 + 48) + 12 * v310);
      v133 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v132 + 10)];
      v134 = *v133;
      if (v119 >= (int)v134)
        v135 = *v133;
      else
        v135 = v119;
      if (v123 > v135)
        v135 = v123;
      if (v134 >= v122)
      {
        v328 = v131;
        if (v122 == 1)
        {
          v148 = v128;
          v149 = v72;
          v150 = v47;
          v151 = 2;
        }
        else
        {
          v149 = v72;
          v150 = v47;
          v148 = v128;
          v164 = v133[1];
          if ((int)(2 * (v324 + 1 + v128)) < v164)
            v164 = 2 * (v324 + 1 + v128);
          if (v164 <= 2)
            v151 = 2;
          else
            v151 = v164;
        }
        add_spatial_candidate((uint64_t)a2, v33, v151 * v135, v132, v315, v325, v87, &v339, &v341);
        v87 = v320;
        v126 = v296.u32[1];
        v86 = v325;
        v131 = v328;
        v33 = v322;
        v163 = v151 >> 1;
        v95 = v317;
        LODWORD(v47) = v150;
        v72 = v149;
        v122 = v296.i32[0];
        v124 = v301;
        v128 = v148;
        v119 = v318;
        goto LABEL_232;
      }
      v305 = v128;
      v136 = v341;
      v137 = v339;
      if (v334 != 65280)
      {
        v152 = 0;
        v153 = (unsigned int *)(*(_QWORD *)(((8 * (int)(v312 - 2 * v129)) | 8) + v319 + 48) + 12 * v310);
        v154 = *v132;
        if ((_DWORD)v154 == -2147450880)
          goto LABEL_220;
LABEL_206:
        if (*((unsigned __int16 *)v153 + 4) != v333)
          goto LABEL_220;
        v155 = *((unsigned __int8 *)v153 + 11);
        if ((v155 & 1) == 0
          || (v86 != -2147450880 ? (v154 = v86) : (v154 = v154), v156 = v87, (_DWORD)v87 == -2147450880))
        {
          v156 = v153[1];
        }
        v157 = 2 * v135;
        v158 = v154 | (v156 << 32);
        v137 |= v155 >> 1;
        v159 = *v33;
        v160 = v159;
        v161 = a2 + 1;
        if ((int)v159 >= 1)
        {
          do
          {
            if (*(_QWORD *)&v161[-1] == v158)
            {
              v161->i32[0] += v157;
              goto LABEL_219;
            }
            v161 += 2;
            --v160;
          }
          while (v160);
          if ((int)v159 > 7)
            goto LABEL_219;
        }
        v162 = &a2[2 * (int)v159];
        *v162 = (int16x4_t)v158;
        v162[1].i32[0] = v157;
        *v33 = v159 + 1;
LABEL_219:
        v136 = 1;
LABEL_220:
        while (1)
        {
          v152 += v135;
          if (v152 >= v95)
            goto LABEL_225;
          v153 = &v132[3 * v152];
          v135 = dav1d_block_dimensions[4 * *((unsigned __int8 *)v153 + 10)];
          if (v123 > v135)
            v135 = v123;
          v154 = *v153;
          if ((_DWORD)v154 != -2147450880)
            goto LABEL_206;
        }
      }
      v138 = 0;
      v139 = *(_QWORD *)(((8 * (int)(v312 - 2 * v129)) | 8) + v319 + 48) + 12 * v310;
      if (*v132 == -2147450880)
        goto LABEL_198;
LABEL_182:
      if (v124 == *(char *)(v139 + 8))
      {
        v140 = 0;
        v141 = *(unsigned __int8 *)(v139 + 11);
        if ((v141 & 1) == 0)
          goto LABEL_190;
      }
      else
      {
        if (v124 != *(char *)(v139 + 9))
          goto LABEL_198;
        v140 = 1;
        v141 = *(unsigned __int8 *)(v139 + 11);
        if ((v141 & 1) == 0)
          goto LABEL_190;
      }
      v142 = v86;
      if (v86 != -2147450880)
      {
        v143 = 2 * v135;
        v137 |= v141 >> 1;
        v144 = *v33;
        if ((int)v144 >= 1)
          goto LABEL_191;
        goto LABEL_195;
      }
LABEL_190:
      v142 = *(_DWORD *)(v139 + 4 * v140);
      v143 = 2 * v135;
      v137 |= v141 >> 1;
      v144 = *v33;
      if ((int)v144 >= 1)
      {
LABEL_191:
        v145 = v144;
        v146 = a2 + 1;
        do
        {
          if (v146[-1].i32[0] == v142)
          {
            v146->i32[0] += v143;
            goto LABEL_197;
          }
          v146 += 2;
          --v145;
        }
        while (v145);
        if ((int)v144 > 7)
          goto LABEL_197;
      }
LABEL_195:
      v147 = &a2[2 * (int)v144];
      v147->i32[0] = v142;
      v147[1].i32[0] = v143;
      *v33 = v144 + 1;
LABEL_197:
      v136 = 1;
LABEL_198:
      while (1)
      {
        v138 += v135;
        if (v138 >= v95)
          break;
        v139 = (uint64_t)&v132[3 * v138];
        v135 = dav1d_block_dimensions[4 * *(unsigned __int8 *)(v139 + 10)];
        if (v123 > v135)
          v135 = v123;
        if (*(_DWORD *)v139 != -2147450880)
          goto LABEL_182;
      }
LABEL_225:
      v341 = v136;
      v339 = v137;
      v163 = 1;
      v128 = v305;
LABEL_232:
      v47 = (v163 + v47);
    }
    if (v129 <= v323 && v129 > v72)
    {
      v165 = (v307 - 2 * v129) | 1;
      v166 = (unsigned int *)(*v125 + 12 * v165);
      v167 = &dav1d_block_dimensions[4 * *((unsigned __int8 *)v166 + 10)];
      v168 = v167[1];
      v169 = v316;
      if (v316 >= (int)v168)
        v169 = v167[1];
      if (v127 > v169)
        v169 = v127;
      v329 = v131;
      if (v168 >= v126)
      {
        v186 = v72;
        v187 = v47;
        if (v126 == 1)
        {
          v188 = 2;
        }
        else
        {
          v189 = 2 * (v323 + 1 + v128);
          v190 = *v167;
          if (v189 >= v190)
            v189 = v190;
          if (v189 <= 2)
            v188 = 2;
          else
            v188 = v189;
        }
        add_spatial_candidate((uint64_t)a2, v33, v188 * v169, v166, v315, v325, v87, &v339, &v342);
        v87 = v320;
        v86 = v325;
        v33 = v322;
        v130 = v188 >> 1;
        v95 = v317;
        v47 = v187;
        LODWORD(v72) = v186;
        v119 = v318;
        v122 = v296.i32[0];
      }
      else
      {
        v170 = 0;
        v171 = v342;
        v172 = v339;
        v173 = *v166;
        if ((_DWORD)v173 == -2147450880)
          goto LABEL_269;
LABEL_241:
        v174 = 2 * v169;
        if (v334 == 65280)
        {
          if (v124 == *((char *)v166 + 8))
          {
            v175 = 0;
            v176 = *((unsigned __int8 *)v166 + 11);
            if ((v176 & 1) == 0)
              goto LABEL_260;
LABEL_259:
            v184 = v86;
            if (v86 == -2147450880)
              goto LABEL_260;
          }
          else
          {
            if (v124 != *((char *)v166 + 9))
              goto LABEL_269;
            v175 = 1;
            v176 = *((unsigned __int8 *)v166 + 11);
            if ((v176 & 1) != 0)
              goto LABEL_259;
LABEL_260:
            v184 = v166[v175];
          }
          v172 |= v176 >> 1;
          v180 = *v33;
          v185 = v180;
          v182 = a2 + 1;
          if ((int)v180 >= 1)
          {
            while (v182[-1].i32[0] != v184)
            {
              v182 += 2;
              if (!--v185)
              {
                if ((int)v180 > 7)
                  goto LABEL_268;
                goto LABEL_265;
              }
            }
            goto LABEL_267;
          }
LABEL_265:
          v183 = &a2[2 * (int)v180];
          v183->i32[0] = v184;
LABEL_266:
          v183[1].i32[0] = v174;
          *v33 = v180 + 1;
        }
        else
        {
          if (*((unsigned __int16 *)v166 + 4) != v333)
            goto LABEL_269;
          v177 = *((unsigned __int8 *)v166 + 11);
          if ((v177 & 1) == 0
            || (v86 != -2147450880 ? (v173 = v86) : (v173 = v173), v178 = v87, (_DWORD)v87 == -2147450880))
          {
            v178 = v166[1];
          }
          v179 = v173 | (v178 << 32);
          v172 |= v177 >> 1;
          v180 = *v33;
          v181 = v180;
          v182 = a2 + 1;
          if ((int)v180 < 1)
          {
LABEL_256:
            v183 = &a2[2 * (int)v180];
            *v183 = (int16x4_t)v179;
            goto LABEL_266;
          }
          while (*(_QWORD *)&v182[-1] != v179)
          {
            v182 += 2;
            if (!--v181)
            {
              if ((int)v180 > 7)
                goto LABEL_268;
              goto LABEL_256;
            }
          }
LABEL_267:
          v182->i32[0] += v174;
        }
LABEL_268:
        v171 = 1;
LABEL_269:
        while (1)
        {
          v170 += v169;
          if (v170 >= v302)
            break;
          v166 = (unsigned int *)(v125[v170] + 12 * v165);
          v169 = dav1d_block_dimensions[4 * *((unsigned __int8 *)v166 + 10) + 1];
          if (v127 > v169)
            v169 = v127;
          v173 = *v166;
          if ((_DWORD)v173 != -2147450880)
            goto LABEL_241;
        }
        LODWORD(v342) = v171;
        v339 = v172;
        v130 = 1;
      }
      v72 = (v130 + v72);
      v126 = v296.u32[1];
      v131 = v329;
    }
    v128 = ~v129;
    v129 = 3;
    v120 = 1;
  }
  while ((v131 & 1) == 0);
  v191 = v341 + v342;
  if (v291)
  {
    v192 = v295;
    v193 = (int32x2_t *)v303;
    v194 = v293;
    v195 = v294;
    result = v302;
    v197 = v292;
    v198 = v33;
    if (v291 == 1)
    {
      v201 = 3 * v191;
      if (v201 >= 4)
        v199 = 4;
      else
        v199 = v201;
      v200 = 3 - HIDWORD(v342);
      if (v292)
        goto LABEL_298;
    }
    else
    {
      if (v291 == 2)
      {
        v199 = 5;
        v200 = 5 - HIDWORD(v342);
        if (!v292)
          goto LABEL_305;
      }
      else
      {
        v199 = 0;
        v200 = 0;
        if (!v292)
          goto LABEL_305;
      }
LABEL_298:
      v202 = v197;
      do
      {
        if (v202 < 2)
          break;
        v203 = v202;
        v204 = a2 + 2;
        v205 = 1;
        v202 = 0;
        do
        {
          if (v204[-1].i32[0] < v204[1].i32[0])
          {
            v206 = *(_OWORD *)v204[-2].i8;
            *(_OWORD *)v204[-2].i8 = *(_OWORD *)v204->i8;
            *(_OWORD *)v204->i8 = v206;
            v202 = v205;
          }
          ++v205;
          v204 += 2;
        }
        while (v203 != v205);
      }
      while (v202);
    }
  }
  else
  {
    v198 = v33;
    if (v191 >= 2)
      v199 = 2;
    else
      v199 = v341 + v342;
    v200 = v191 > 0;
    v192 = v295;
    v193 = (int32x2_t *)v303;
    v194 = v293;
    v195 = v294;
    result = v302;
    v197 = v292;
    if (v292)
      goto LABEL_298;
  }
LABEL_305:
  v207 = *v198;
  if (*v198 > v197)
  {
    do
    {
      if (v197 + 1 >= v207)
        break;
      v208 = (uint64_t)&a2[2 * v292 + 2];
      v209 = v292 + 1;
      v210 = v197;
      v211 = v197;
      do
      {
        while (a2[2 * v210 + 1].i32[0] < *(_DWORD *)(v208 + 8))
        {
          v212 = 2 * v210;
          v213 = *(_OWORD *)a2[v212].i8;
          *(_OWORD *)a2[v212].i8 = *(_OWORD *)v208;
          *(_OWORD *)v208 = v213;
          v208 += 16;
          v210 = v209;
          v211 = v209++;
          if (v207 == (_DWORD)v209)
            goto LABEL_307;
        }
        v210 = v209++;
        v208 += 16;
      }
      while (v207 != (_DWORD)v209);
LABEL_307:
      v207 = v211;
    }
    while (v211 > v197);
    v207 = *v198;
  }
  if (v194 >> 8 < 1)
  {
    if (v288 && v207 <= 1)
    {
      v326 = v199;
      v331 = v200;
      v226 = v72;
      v227 = (uint64_t)&v193[4];
      v228 = v193[4].u8[(v288 - 1)];
      if (v95 >= (int)result)
        v229 = result;
      else
        v229 = v95;
      if ((_DWORD)v47 != -1 && v229 >= 1)
      {
        v230 = 0;
        do
        {
          if (*v198 > 1)
            break;
          result = (uint64_t)add_single_extended_candidate((int *)a2, v198, (unsigned __int16 *)&v195[3 * v230], v228, v227);
          v230 += dav1d_block_dimensions[4 * BYTE2(v195[3 * v230 + 2])];
        }
        while ((int)v230 < v229);
      }
      if (v226 != -1 && v229 >= 1)
      {
        v231 = 0;
        while (1)
        {
          v207 = *v198;
          if (*v198 > 1)
            break;
          v232 = *(_QWORD *)(v299 + 8 * v231) + 12 * (v285 - 1);
          result = (uint64_t)add_single_extended_candidate((int *)a2, v198, (unsigned __int16 *)v232, v228, v227);
          v231 += dav1d_block_dimensions[4 * *(unsigned __int8 *)(v232 + 10) + 1];
          if ((int)v231 >= v229)
            goto LABEL_348;
        }
        v192 = v295;
        v193 = (int32x2_t *)v303;
        v233 = a9;
        v199 = v326;
        v200 = v331;
        goto LABEL_350;
      }
LABEL_348:
      v207 = *v198;
      v192 = v295;
      v193 = (int32x2_t *)v303;
      v199 = v326;
      v200 = v331;
    }
    v233 = a9;
    if (!v207)
    {
      v241 = v287;
      v242 = 0;
      v243 = 2;
      goto LABEL_360;
    }
LABEL_350:
    v234 = (int8x8_t)vrev64_s32(vsub_s32((int32x2_t)0x7F0000007FLL, vshl_n_s32(vadd_s32((int32x2_t)__PAIR64__(v192, v233), v296), 5uLL)));
    v235 = vrev64_s32(vadd_s32(vshl_n_s32(vsub_s32(v193[1], (int32x2_t)__PAIR64__(v192, v233)), 5uLL), (int32x2_t)0x8000000080));
    if (v207 <= 1)
      v236 = 1;
    else
      v236 = v207;
    v237 = a2;
    do
    {
      v238.i32[0] = v237->i16[0];
      v238.i32[1] = v237->i16[1];
      v239 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v234, v238), v234, (int8x8_t)vmin_s32(v238, v235));
      v237->i16[0] = v239.i16[0];
      v237->i16[1] = v239.i16[2];
      v237 += 2;
      --v236;
    }
    while (v236);
    v240 = *v198;
    v241 = v287;
    if (*v198 > 1)
      goto LABEL_368;
    v242 = v240;
    v243 = 3 - (v240 + 1);
    if (v243 < 2)
    {
LABEL_365:
      v247 = v242 + 1;
      v248 = &a2[2 * v242];
      do
      {
        v248->i32[0] = v241;
        v248 += 2;
        v258 = (_DWORD)v247++ == 2;
      }
      while (!v258);
LABEL_368:
      v249 = (16 * v199) | (8 * v340) | v200;
      goto LABEL_421;
    }
LABEL_360:
    if (-2 - (int)v242 >= (1 - v242) && !((2 - (unint64_t)(v242 + 1)) >> 32))
    {
      v244 = (v243 & 0xFFFFFFFFFFFFFFFELL) + v242;
      v245 = &a2[2 * v242 + 2];
      v246 = v243 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v245[-2].i32[0] = v241;
        v245->i32[0] = v241;
        v245 += 4;
        v246 -= 2;
      }
      while (v246);
      v242 = v244;
      if (v243 == (v243 & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_368;
    }
    goto LABEL_365;
  }
  if (v207 > 1)
  {
    v224 = a9;
  }
  else
  {
    v330 = v200;
    v313 = v72;
    v214 = (uint64_t)&v193[4];
    v215 = v193[3].u8[v288 + 7];
    v216 = v193[4].u8[v286 - 1];
    if (v95 >= (int)result)
      v217 = result;
    else
      v217 = v95;
    result = (uint64_t)&a2[2 * v207];
    v343 = 0;
    v344 = 0;
    v218 = v195;
    v335 = v215;
    v219 = v217;
    if ((_DWORD)v47 != -1 && v217 >= 1)
    {
      v220 = 0;
      do
      {
        add_compound_extended_candidate(result, (int *)&v343, (unsigned __int16 *)&v218[3 * v220], v215, v216, v315, v214);
        v217 = v219;
        v215 = v335;
        result = (uint64_t)&a2[2 * v207];
        v220 += dav1d_block_dimensions[4 * BYTE2(v218[3 * v220 + 2])];
      }
      while ((int)v220 < v219);
    }
    if (v313 != -1 && v217 >= 1)
    {
      v221 = 0;
      do
      {
        v222 = *(_QWORD *)(v299 + 8 * v221) + 12 * (v285 - 1);
        add_compound_extended_candidate(result, (int *)&v343, (unsigned __int16 *)v222, v215, v216, v315, v214);
        v215 = v335;
        result = (uint64_t)&a2[2 * v207];
        v221 += dav1d_block_dimensions[4 * *(unsigned __int8 *)(v222 + 10) + 1];
      }
      while ((int)v221 < v219);
    }
    v223 = v343;
    v224 = a9;
    if ((int)v343 <= 1)
    {
      v225 = v344;
      if (!(_DWORD)v344)
        goto LABEL_369;
      *(_DWORD *)(result + 16 * (int)v343) = *(_DWORD *)(result + 32);
      if (++v223 == 2)
        goto LABEL_373;
      if (v225 == 2)
      {
        *(_DWORD *)(result + 16) = *(_DWORD *)(result + 48);
      }
      else
      {
LABEL_369:
        v250 = v223;
        v251 = 3 - (v223 + 1);
        if (v251 < 2)
          goto LABEL_370;
        if (-2 - (int)v250 < (1 - v250))
          goto LABEL_370;
        if ((2 - (unint64_t)(v250 + 1)) >> 32)
          goto LABEL_370;
        v281 = (v251 & 0xFFFFFFFFFFFFFFFELL) + v250;
        v282 = &a2[2 * v207 + 2 + 2 * v250];
        v283 = v251 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v282[-2].i32[0] = v287;
          v282->i32[0] = v287;
          v282 += 4;
          v283 -= 2;
        }
        while (v283);
        v250 = v281;
        if (v251 != (v251 & 0xFFFFFFFFFFFFFFFELL))
        {
LABEL_370:
          v252 = v250 + 1;
          v253 = &a2[2 * v250 + 2 * v207];
          do
          {
            v253->i32[0] = v287;
            v253 += 2;
            v258 = (_DWORD)v252++ == 2;
          }
          while (!v258);
        }
      }
    }
LABEL_373:
    v254 = HIDWORD(v343);
    v192 = v295;
    v193 = (int32x2_t *)v303;
    v200 = v330;
    if (SHIDWORD(v343) <= 1)
    {
      v255 = HIDWORD(v344);
      if (!HIDWORD(v344))
        goto LABEL_378;
      *(_DWORD *)(result + 16 * SHIDWORD(v343) + 4) = *(_DWORD *)(result + 36);
      if (++v254 != 2)
      {
        if (v255 == 2)
        {
          *(_DWORD *)(result + 20) = *(_DWORD *)(result + 52);
          goto LABEL_390;
        }
LABEL_378:
        v256 = v254;
        v257 = 3 - (v254 + 1);
        if (v257 < 2)
          goto LABEL_387;
        v258 = -2 - (int)v256 >= (1 - v256) && (2 - (unint64_t)(v256 + 1)) >> 32 == 0;
        if (!v258)
          goto LABEL_387;
        v259 = (v257 & 0xFFFFFFFFFFFFFFFELL) + v256;
        v260 = (unsigned int *)&a2[2 * v207 + 2 + 2 * v256] + 1;
        v261 = v257 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v260 - 4) = v284;
          *v260 = v284;
          v260 += 8;
          v261 -= 2;
        }
        while (v261);
        v256 = v259;
        if (v257 != (v257 & 0xFFFFFFFFFFFFFFFELL))
        {
LABEL_387:
          v262 = v256 + 1;
          v263 = (unsigned int *)&a2[2 * v256 + 2 * v207] + 1;
          do
          {
            *v263 = v284;
            v263 += 4;
            v258 = (_DWORD)v262++ == 2;
          }
          while (!v258);
        }
      }
    }
LABEL_390:
    v264 = *v322;
    if ((_DWORD)v264 == 1 && *a2 == *(_QWORD *)result)
      a2[2] = a2[4];
    if ((int)v264 <= 1)
      v265 = 1;
    else
      v265 = v264;
    if ((int)v264 > 0)
      goto LABEL_400;
    v266 = (v265 - v264) + 1;
    v267 = (v266 & 0x1FFFFFFFELL) + v264;
    v268 = &a2[2 * v264 + 3];
    v269 = v266 & 0x1FFFFFFFELL;
    do
    {
      v268[-2].i32[0] = 2;
      v268->i32[0] = 2;
      v268 += 4;
      v269 -= 2;
    }
    while (v269);
    v264 = v267;
    if (v266 != (v266 & 0x1FFFFFFFELL))
    {
LABEL_400:
      v270 = v265 - v264 + 1;
      v271 = &a2[2 * v264 + 1];
      do
      {
        v271->i32[0] = 2;
        v271 += 2;
        --v270;
      }
      while (v270);
    }
    v207 = 2;
    *v322 = 2;
  }
  *(int32x2_t *)v272.i8 = vsub_s32((int32x2_t)0x7F0000007FLL, vshl_n_s32(vadd_s32((int32x2_t)__PAIR64__(v192, v224), v296), 5uLL));
  v272.i64[1] = v272.i64[0];
  v273 = (int8x16_t)vrev64q_s32(v272);
  *(int32x2_t *)v274.i8 = vadd_s32(vshl_n_s32(vsub_s32(v193[1], (int32x2_t)__PAIR64__(v192, v224)), 5uLL), (int32x2_t)0x8000000080);
  v274.i64[1] = v274.i64[0];
  v275 = vrev64q_s32(v274);
  v276 = v207;
  do
  {
    v277 = vmovl_s16(*a2);
    *a2 = vmovn_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v273, v277), v273, (int8x16_t)vminq_s32(v277, v275)));
    a2 += 2;
    --v276;
  }
  while (v276);
  v278 = v199 >> 1;
  if (v199 >> 1 == 2)
  {
    if (v200 >= 4)
      v279 = 4;
    else
      v279 = v200;
    if (v279 <= 1)
      v279 = 1;
    v249 = v279 + 3;
    goto LABEL_421;
  }
  if (v278 == 1)
  {
    if (v200 >= 3)
      v280 = 3;
    else
      v280 = v200;
    v249 = v280 + 1;
LABEL_421:
    *a4 = v249;
    return result;
  }
  if (!v278)
  {
    if (v200 >= 1)
      v249 = 1;
    else
      v249 = v200;
    goto LABEL_421;
  }
  return result;
}

uint64_t add_spatial_candidate(uint64_t result, int *a2, unsigned int a3, unsigned int *a4, unsigned __int16 a5, unsigned int a6, uint64_t a7, _DWORD *a8, _DWORD *a9)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned int *v20;

  v9 = *a4;
  if ((_DWORD)v9 != -2147450880)
  {
    if ((~a5 & 0xFF00) != 0)
    {
      if (*((unsigned __int16 *)a4 + 4) != a5)
        return result;
      v12 = *((unsigned __int8 *)a4 + 11);
      if ((v12 & 1) == 0 || (a6 != -2147450880 ? (v9 = a6) : (v9 = v9), (_DWORD)a7 == -2147450880))
        a7 = a4[1];
      v13 = v9 | (a7 << 32);
      *a9 = 1;
      *a8 |= v12 >> 1;
      v14 = *a2;
      if (*a2 >= 1)
      {
        v15 = (_DWORD *)(result + 8);
        v16 = *a2;
        do
        {
          if (*((_QWORD *)v15 - 1) == v13)
          {
            *v15 += a3;
            return result;
          }
          v15 += 4;
          --v16;
        }
        while (v16);
        if (v14 > 7)
          return result;
      }
      v17 = result + 16 * v14;
      *(_QWORD *)v17 = v13;
      *(_DWORD *)(v17 + 8) = a3;
      goto LABEL_29;
    }
    if ((char)a5 == *((char *)a4 + 8))
    {
      v10 = 0;
      v11 = *((unsigned __int8 *)a4 + 11);
      if ((v11 & 1) == 0)
        goto LABEL_22;
    }
    else
    {
      if ((char)a5 != *((char *)a4 + 9))
        return result;
      v10 = 1;
      v11 = *((unsigned __int8 *)a4 + 11);
      if ((v11 & 1) == 0)
        goto LABEL_22;
    }
    if (a6 != -2147450880)
    {
LABEL_23:
      *a9 = 1;
      *a8 |= v11 >> 1;
      v14 = *a2;
      if (*a2 >= 1)
      {
        v18 = (_DWORD *)(result + 8);
        v19 = *a2;
        do
        {
          if (*(v18 - 2) == a6)
          {
            *v18 += a3;
            return result;
          }
          v18 += 4;
          --v19;
        }
        while (v19);
        if (v14 > 7)
          return result;
      }
      v20 = (unsigned int *)(result + 16 * v14);
      *v20 = a6;
      v20[2] = a3;
LABEL_29:
      *a2 = v14 + 1;
      return result;
    }
LABEL_22:
    a6 = a4[v10];
    goto LABEL_23;
  }
  return result;
}

uint64_t *add_temporal_candidate(uint64_t *result, uint64_t a2, _DWORD *a3, uint64_t a4, __int16 a5, _DWORD *a6, __int16 *a7)
{
  int v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  int32x2_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int32x2_t v18;
  int8x8_t v19;
  double v20;
  int32x2_t v21;
  int32x2_t v22;
  int v23;
  _DWORD *v24;
  int *v25;
  double v26;
  unint64_t v27;
  uint64_t v28;

  if (*(_DWORD *)a4 != -2147450880)
  {
    v7 = mv_projection_div_mult[*(char *)(a4 + 4)];
    v8.i32[0] = *(_DWORD *)a4 << 16;
    v8.i32[1] = *(_DWORD *)a4;
    v9 = vshr_n_s32(v8, 0x10uLL);
    v10 = vmul_s32(vdup_n_s32(v7 * *((char *)result + (char)a5 + 45)), v9);
    v11 = vmax_s32(vmin_s32(vshr_n_s32(vadd_s32(vsra_n_s32(v10, v10, 0x1FuLL), (int32x2_t)0x200000002000), 0xEuLL), (int32x2_t)0x3F0000003FLL), vdup_n_s32(0xFFFFC001));
    v12 = *result;
    v13 = *(_DWORD *)(*result + 296);
    if (v13)
    {
      v11 = (int32x2_t)vand_s8((int8x8_t)vadd_s32((int32x2_t)vsra_n_u32((uint32x2_t)v11, (uint32x2_t)vand_s8((int8x8_t)v11, (int8x8_t)0xFFFF0000FFFFLL), 0xFuLL), (int32x2_t)0x300000003), (int8x8_t)vdup_n_s32(0xFFF8u));
      v14 = *a3;
      v15 = (int)v14;
      v16 = a5 >> 8;
      if (v16 != -1)
      {
LABEL_4:
        v17 = v11.u16[0] | ((unint64_t)v11.u16[2] << 16);
        v18 = vmul_s32(vdup_n_s32(*((char *)result + v16 + 45) * v7), v9);
        v19 = (int8x8_t)vmax_s32(vmin_s32(vshr_n_s32(vadd_s32(vsra_n_s32(v18, v18, 0x1FuLL), (int32x2_t)0x200000002000), 0xEuLL), (int32x2_t)0x3F0000003FLL), vdup_n_s32(0xFFFFC001));
        if (v13)
        {
          v19 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vsra_n_u32((uint32x2_t)v19, (uint32x2_t)vand_s8(v19, (int8x8_t)0xFFFF0000FFFFLL), 0xFuLL), (int32x2_t)0x300000003), (int8x8_t)vdup_n_s32(0xFFF8u));
        }
        else
        {
          v26 = COERCE_DOUBLE(vand_s8((int8x8_t)vsra_n_u32((uint32x2_t)v19, (uint32x2_t)vand_s8(v19, (int8x8_t)0xFFFF0000FFFFLL), 0xFuLL), (int8x8_t)vdup_n_s32(0xFFFEu)));
          if (!*(_DWORD *)(v12 + 500))
            *(double *)&v19 = v26;
        }
        v27 = ((unint64_t)v19.u32[1] << 48) | ((unint64_t)v19.u16[0] << 32) | v17;
        if ((int)v15 < 1)
        {
LABEL_24:
          v28 = a2 + 16 * v15;
          *(_QWORD *)v28 = v27;
          *(_DWORD *)(v28 + 8) = 2;
          *a3 = v15 + 1;
          return result;
        }
        v24 = (_DWORD *)(a2 + 8);
        while (*((_QWORD *)v24 - 1) != v27)
        {
          v24 += 4;
          if (!--v14)
          {
            if ((int)v15 > 7)
              return result;
            goto LABEL_24;
          }
        }
        goto LABEL_25;
      }
    }
    else
    {
      v20 = COERCE_DOUBLE(vand_s8((int8x8_t)vsra_n_u32((uint32x2_t)v11, (uint32x2_t)vand_s8((int8x8_t)v11, (int8x8_t)0xFFFF0000FFFFLL), 0xFuLL), (int8x8_t)vdup_n_s32(0xFFFEu)));
      if (!*(_DWORD *)(v12 + 500))
        *(double *)&v11 = v20;
      v14 = *a3;
      v15 = (int)v14;
      v16 = a5 >> 8;
      if (v16 != -1)
        goto LABEL_4;
    }
    if (a6)
    {
      v21.i32[0] = *a7;
      v21.i32[1] = a7[1];
      v22 = vabd_s32(vshr_n_s32(vshl_n_s32(v11, 0x10uLL), 0x10uLL), v21);
      *a6 = vorr_s8((int8x8_t)v22, (int8x8_t)vdup_lane_s32(v22, 1)).u32[0] > 0xF;
    }
    v23 = v11.u16[0] | (v11.u16[2] << 16);
    if ((int)v15 < 1)
    {
LABEL_16:
      v25 = (int *)(a2 + 16 * v15);
      *v25 = v23;
      v25[2] = 2;
      *a3 = v15 + 1;
      return result;
    }
    v24 = (_DWORD *)(a2 + 8);
    while (*(v24 - 2) != v23)
    {
      v24 += 4;
      if (!--v14)
      {
        if ((int)v15 > 7)
          return result;
        goto LABEL_16;
      }
    }
LABEL_25:
    *v24 += 2;
  }
  return result;
}

uint64_t add_compound_extended_candidate(uint64_t result, int *a2, unsigned __int16 *a3, int a4, int a5, __int16 a6, uint64_t a7)
{
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  uint64_t v24;
  int v25;
  _WORD *v26;
  BOOL v27;
  __int16 v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  _WORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  int v46;
  _WORD *v47;
  uint64_t v48;
  int v49;
  _WORD *v50;
  BOOL v51;
  __int16 v52;
  __int16 v53;
  uint64_t v54;

  v7 = *((char *)a3 + 8);
  v8 = v7 - 1;
  if (v7 < 1)
    return result;
  v9 = result + 32;
  v10 = (char)a6;
  v11 = a6 >> 8;
  v12 = *a3;
  v13 = a3[1];
  if ((char)a6 == v7)
  {
    v14 = *a2;
    if ((int)v14 <= 1)
    {
      *a2 = v14 + 1;
      v15 = (_WORD *)(result + 16 * v14);
      *v15 = v12;
      v15[1] = v13;
    }
    v16 = a2[3];
    if ((int)v16 <= 1)
    {
      if (*(unsigned __int8 *)(a7 + ((char)a6 - 1)) != a5)
      {
        v12 = -v12;
        v13 = -v13;
      }
      a2[3] = v16 + 1;
      v17 = v9 + 16 * v16;
      *(_WORD *)(v17 + 4) = v12;
      *(_WORD *)(v17 + 6) = v13;
      v18 = *((char *)a3 + 9);
      v19 = v18 - 1;
      if (v18 < 1)
        return result;
      goto LABEL_30;
    }
  }
  else if (v11 == v7)
  {
    v20 = a2[1];
    if ((int)v20 <= 1)
    {
      a2[1] = v20 + 1;
      v21 = result + 16 * v20;
      *(_WORD *)(v21 + 4) = v12;
      *(_WORD *)(v21 + 6) = v13;
    }
    v22 = a2[2];
    if ((int)v22 <= 1)
    {
      if (*(unsigned __int8 *)(a7 + (v11 - 1)) != a4)
      {
        v12 = -v12;
        v13 = -v13;
      }
      a2[2] = v22 + 1;
      v23 = (_WORD *)(v9 + 16 * v22);
      *v23 = v12;
      v23[1] = v13;
      v18 = *((char *)a3 + 9);
      v19 = v18 - 1;
      if (v18 < 1)
        return result;
      goto LABEL_30;
    }
  }
  else
  {
    v24 = a2[2];
    if ((int)v24 <= 1)
    {
      a2[2] = v24 + 1;
      v25 = *(unsigned __int8 *)(a7 + v8);
      v26 = (_WORD *)(v9 + 16 * v24);
      v27 = v25 == a4;
      if (v25 == a4)
        v28 = v12;
      else
        v28 = -(__int16)v12;
      if (v27)
        v29 = v13;
      else
        v29 = -(__int16)v13;
      *v26 = v28;
      v26[1] = v29;
    }
    v30 = a2[3];
    if ((int)v30 <= 1)
    {
      a2[3] = v30 + 1;
      v31 = v9 + 16 * v30;
      if (*(unsigned __int8 *)(a7 + v8) != a5)
      {
        *(_WORD *)(v31 + 4) = -(__int16)v12;
        *(_WORD *)(v31 + 6) = -(__int16)v13;
        v18 = *((char *)a3 + 9);
        v19 = v18 - 1;
        if (v18 < 1)
          return result;
        goto LABEL_30;
      }
      *(_WORD *)(v31 + 4) = v12;
      *(_WORD *)(v31 + 6) = v13;
    }
  }
  v18 = *((char *)a3 + 9);
  v19 = v18 - 1;
  if (v18 < 1)
    return result;
LABEL_30:
  v32 = a3[2];
  v33 = a3[3];
  if (v10 == v18)
  {
    v34 = *a2;
    if ((int)v34 <= 1)
    {
      *a2 = v34 + 1;
      v35 = (_WORD *)(result + 16 * v34);
      *v35 = v32;
      v35[1] = v33;
    }
    v36 = a2[3];
    if ((int)v36 > 1)
      return result;
    v37 = *(unsigned __int8 *)(a7 + (v10 - 1));
    v38 = v37 == a5;
    if (v37 == a5)
      LOWORD(v39) = v32;
    else
      v39 = -v32;
    if (!v38)
      v33 = -v33;
    a2[3] = v36 + 1;
    v40 = v9 + 16 * v36;
    *(_WORD *)(v40 + 4) = v39;
LABEL_61:
    *(_WORD *)(v40 + 6) = v33;
    return result;
  }
  if (v11 == v18)
  {
    v41 = a2[1];
    if ((int)v41 <= 1)
    {
      a2[1] = v41 + 1;
      v42 = result + 16 * v41;
      *(_WORD *)(v42 + 4) = v32;
      *(_WORD *)(v42 + 6) = v33;
    }
    v43 = a2[2];
    if ((int)v43 <= 1)
    {
      v44 = *(unsigned __int8 *)(a7 + (v11 - 1));
      v45 = v44 == a4;
      if (v44 == a4)
        LOWORD(v46) = v32;
      else
        v46 = -v32;
      if (!v45)
        v33 = -v33;
      a2[2] = v43 + 1;
      v47 = (_WORD *)(v9 + 16 * v43);
      *v47 = v46;
      v47[1] = v33;
    }
    return result;
  }
  v48 = a2[2];
  if ((int)v48 <= 1)
  {
    a2[2] = v48 + 1;
    v49 = *(unsigned __int8 *)(a7 + v19);
    v50 = (_WORD *)(v9 + 16 * v48);
    v51 = v49 == a4;
    if (v49 == a4)
      v52 = v32;
    else
      v52 = -(__int16)v32;
    if (v51)
      v53 = v33;
    else
      v53 = -(__int16)v33;
    *v50 = v52;
    v50[1] = v53;
  }
  v54 = a2[3];
  if ((int)v54 <= 1)
  {
    a2[3] = v54 + 1;
    v40 = v9 + 16 * v54;
    if (*(unsigned __int8 *)(a7 + v19) != a5)
    {
      *(_WORD *)(v40 + 4) = -(__int16)v32;
      *(_WORD *)(v40 + 6) = -(__int16)v33;
      return result;
    }
    *(_WORD *)(v40 + 4) = v32;
    goto LABEL_61;
  }
  return result;
}

int *add_single_extended_candidate(int *result, _DWORD *a2, unsigned __int16 *a3, int a4, uint64_t a5)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  int *v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int *v20;

  if (*((char *)a3 + 8) >= 1)
  {
    v5 = *a3;
    v6 = a3[1];
    if (*(unsigned __int8 *)(a5 + *((unsigned __int8 *)a3 + 8) - 1) != a4)
    {
      v5 = -v5;
      v6 = -v6;
    }
    v7 = *a2;
    if ((int)v7 < 1)
    {
      LODWORD(v8) = 0;
    }
    else
    {
      v8 = 0;
      v9 = result;
      while (1)
      {
        v10 = *v9;
        v9 += 4;
        if (((unsigned __int16)v5 | ((unsigned __int16)v6 << 16)) == v10)
          break;
        if (v7 == ++v8)
          goto LABEL_11;
      }
    }
    if ((_DWORD)v8 == (_DWORD)v7)
    {
LABEL_11:
      v11 = &result[4 * v7];
      *(_WORD *)v11 = v5;
      *((_WORD *)v11 + 1) = v6;
      v11[2] = 2;
      LODWORD(v7) = v7 + 1;
      *a2 = v7;
    }
    if (*((char *)a3 + 9) >= 1)
    {
      v12 = *(unsigned __int8 *)(a5 + *((unsigned __int8 *)a3 + 9) - 1);
      v13 = v12 == a4;
      if (v12 == a4)
        LOWORD(v14) = a3[2];
      else
        v14 = -a3[2];
      if (v13)
        LOWORD(v15) = a3[3];
      else
        v15 = -a3[3];
      if ((int)v7 < 1)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        v16 = 0;
        v17 = v7;
        v18 = result;
        while (1)
        {
          v19 = *v18;
          v18 += 4;
          if (((unsigned __int16)v14 | ((unsigned __int16)v15 << 16)) == v19)
            break;
          if (v7 == ++v16)
            goto LABEL_27;
        }
      }
      if ((_DWORD)v16 == (_DWORD)v7)
      {
        v17 = v7;
LABEL_27:
        v20 = &result[4 * v17];
        *(_WORD *)v20 = v14;
        *((_WORD *)v20 + 1) = v15;
        v20[2] = 2;
        *a2 = v7 + 1;
      }
    }
  }
  return result;
}

uint64_t dav1d_refmvs_tile_sbrow_init(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  int v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;

  v9 = *(_DWORD *)(a2 + 212);
  if (v9 == 1)
    v10 = 0;
  else
    v10 = a8;
  *(_QWORD *)(result + 304) = *(_QWORD *)(a2 + 176) + ((*(_QWORD *)(a2 + 184) * v10) << 7);
  if (v9 <= 1 || (a9 == 2 ? (v11 = *(_DWORD *)(a2 + 216) <= 1) : (v11 = 1), v11))
    v12 = 0;
  else
    v12 = 35 * *(_QWORD *)(a2 + 200) * *(int *)(a2 + 208);
  v13 = *(_QWORD *)(a2 + 200);
  v14 = *(_QWORD *)(a2 + 192) + 12 * (v12 + 35 * v10 * v13);
  v15 = *(_DWORD *)(a2 + 24);
  v16 = ((_BYTE)v15 * (_BYTE)a7) & 0x10;
  if (v15 >= 1)
  {
    v17 = (uint64_t *)(result + ((((unint64_t)(v15 * a7) >> 4) & 1) << 7) + 48);
    v18 = *(unsigned int *)(a2 + 24);
    do
    {
      *v17++ = v14;
      v14 += 12 * v13;
      --v18;
    }
    while (v18);
  }
  v19 = (uint64_t *)(result + 8 + 8 * (((_BYTE)v15 * (_BYTE)a7) & 0x10));
  *v19 = v14;
  v20 = 12 * v13;
  v21 = v14 + 12 * v13;
  *(_QWORD *)(result + 8 + 8 * (v16 | 1u)) = 0;
  v22 = (uint64_t *)(result + 8 + 8 * (v16 | 2u));
  *v22 = v21;
  *(_QWORD *)(result + 8 + 8 * (v16 | 3u)) = 0;
  v23 = (uint64_t *)(result + 8 + 8 * (v16 | 4u));
  *v23 = v21 + v20;
  if ((a7 & 1) != 0)
  {
    v24 = (_QWORD *)(result + 8 * (v16 + v15));
    *v19 = v24[1];
    v24[1] = v14;
    v25 = *v22;
    *v22 = v24[3];
    v24[3] = v25;
    v26 = *v23;
    *v23 = v24[5];
    v24[5] = v26;
  }
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 320) = a5;
  v28 = *(_DWORD *)(a2 + 8);
  v27 = *(_DWORD *)(a2 + 12);
  if (a6 < v27)
    v27 = a6;
  *(_DWORD *)(result + 324) = v27;
  *(_DWORD *)(result + 312) = a3;
  if (a4 >= v28)
    v29 = v28;
  else
    v29 = a4;
  *(_DWORD *)(result + 316) = v29;
  return result;
}

uint64_t dav1d_refmvs_load_tmvs(uint64_t result, int a2, int a3, int a4, int a5, unsigned int a6)
{
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  signed int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int *v66;
  int v67;

  if (*(_DWORD *)(result + 212) == 1)
    v6 = 0;
  else
    v6 = a2;
  v8 = *(_DWORD *)(result + 16);
  v7 = *(_DWORD *)(result + 20);
  if ((int)a6 >= (int)v7)
    v9 = v7;
  else
    v9 = a6;
  if (a3 <= 8)
    v10 = 8;
  else
    v10 = a3;
  if (a4 + 8 < v8)
    v8 = a4 + 8;
  if ((int)v9 > a5)
  {
    v11 = v6;
    v12 = *(_QWORD *)(result + 176);
    v13 = *(_QWORD *)(result + 184);
    v14 = v13 * v11;
    if (a3 >= a4)
    {
      v26 = *(_DWORD *)(result + 152);
      v66 = (int *)(result + 152);
      if (v26 <= 0)
        return result;
      v67 = v10 - 8;
      if (v10 - 8 >= v8)
        return result;
    }
    else
    {
      v15 = a5 & 0xF;
      v16 = v12 + 8 * (16 * v14 + v13 * v15);
      v17 = a4 - (uint64_t)a3;
      v18 = 8 * v13 * (v15 | (16 * v11)) + 8 * a3 + v12 + 8;
      v19 = 8 * v13;
      v20 = a5;
      do
      {
        v21 = a3;
        if (v17 < 2)
          goto LABEL_20;
        v22 = (_DWORD *)v18;
        v23 = v17 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v22 - 2) = -2147450880;
          *v22 = -2147450880;
          v22 += 4;
          v23 -= 2;
        }
        while (v23);
        v21 = (v17 & 0xFFFFFFFFFFFFFFFELL) + a3;
        if (v17 != (v17 & 0xFFFFFFFFFFFFFFFELL))
        {
LABEL_20:
          v24 = a4 - v21;
          v25 = 8 * v21;
          do
          {
            *(_DWORD *)(v16 + v25) = -2147450880;
            v25 += 8;
            --v24;
          }
          while (v24);
        }
        ++v20;
        v18 += v19;
        v16 += v19;
      }
      while (v20 != (_DWORD)v9);
      v26 = *(_DWORD *)(result + 152);
      v66 = (int *)(result + 152);
      if (v26 <= 0)
        return result;
      v12 = *(_QWORD *)(result + 176);
      v67 = v10 - 8;
      if (v10 - 8 >= v8)
        return result;
    }
    v27 = 0;
    v65 = v13 * a5;
    v28 = v12 + (v14 << 7);
    do
    {
      v29 = *(_DWORD *)(result + 4 * v27 + 56);
      if (v29 != 0x80000000)
      {
        v30 = *(unsigned __int8 *)(result + v27 + 53);
        v31 = v30 - 4;
        v32 = *(_QWORD *)(*(_QWORD *)(result + 168) + 8 * v30) + 8 * v65;
        v33 = a5;
        do
        {
          v34 = v67;
          if ((v33 & 0x7FFFFFF8) <= a5)
            v35 = a5;
          else
            v35 = v33 & 0x7FFFFFF8;
          v36 = v9;
          if ((v33 & 0x7FFFFFF8) + 8 < (int)v9)
            LODWORD(v9) = (v33 & 0x7FFFFFF8) + 8;
          do
          {
            v38 = v32 + 8 * v34;
            v39 = *(char *)(v38 + 4);
            if (*(_BYTE *)(v38 + 4) && (v40 = *(unsigned int *)(result + 28 * v27 + 4 * v39 + 64), (_DWORD)v40))
            {
              v41 = *(_DWORD *)v38;
              v42 = v29 * mv_projection_div_mult[v40];
              v43 = (v42 * (__int16)v41 + ((v42 * (__int16)v41) >> 31) + 0x2000) >> 14;
              if (v43 >= 0x3FFF)
                v43 = 0x3FFF;
              if (v43 <= -16383)
                v43 = -16383;
              if (v43 >= 0)
                v44 = v43;
              else
                v44 = -v43;
              v45 = v44 >> 6;
              if ((v43 ^ v31) >= 0)
                v46 = v45;
              else
                v46 = -v45;
              if (v46 + v33 >= v35 && v46 + v33 < (int)v9)
              {
                v52 = 0;
                v53 = (v42 * (v41 >> 16) + ((v42 * (v41 >> 16)) >> 31) + 0x2000) >> 14;
                if (v53 >= 0x3FFF)
                  v53 = 0x3FFF;
                if (v53 <= -16383)
                  v53 = -16383;
                v54 = v53 ^ v31;
                if (v53 < 0)
                  v53 = -v53;
                v55 = v53 >> 6;
                if (v54 < 0)
                  v55 = -v55;
                v56 = v55 + v34;
                if (v8 <= v34 + 1)
                  v57 = v34 + 1;
                else
                  v57 = v8;
                v49 = v57 - 1;
                v58 = v28 + 8 * (v56 + v13 * (((_BYTE)v33 + (_BYTE)v46) & 0xF));
                v59 = v32 + 8 * v34;
                while (1)
                {
                  v37 = v34;
                  v60 = v34 & 0xFFFFFFF8;
                  v61 = v60 - 8;
                  if ((int)(v60 - 8) <= a3)
                    v61 = a3;
                  if (v56 >= v61)
                  {
                    v62 = v60 + 16;
                    if ((int)(v60 + 16) >= a4)
                      v62 = a4;
                    if (v56 < v62)
                    {
                      v63 = v58 + v52;
                      *(_DWORD *)v63 = v41;
                      *(_BYTE *)(v63 + 4) = v40;
                    }
                  }
                  if (v49 == v37)
                    break;
                  if (*(unsigned __int8 *)(v59 + v52 + 12) == v39)
                  {
                    v64 = *(_DWORD *)(v59 + v52 + 8);
                    ++v56;
                    v52 += 8;
                    v34 = v37 + 1;
                    if (v64 == v41)
                      continue;
                  }
                  goto LABEL_41;
                }
              }
              else
              {
                if (v8 <= v34 + 1)
                  v48 = v34 + 1;
                else
                  v48 = v8;
                v49 = v48 - 1;
                v50 = 8 * v34;
                while (v34 + 1 < v8)
                {
                  v37 = v34;
                  if (*(unsigned __int8 *)(v32 + v50 + 12) == v39)
                  {
                    v51 = *(_DWORD *)(v32 + v50 + 8);
                    v50 += 8;
                    ++v34;
                    if (v51 == v41)
                      continue;
                  }
                  goto LABEL_41;
                }
              }
              v37 = v49;
            }
            else
            {
              v37 = v34;
            }
LABEL_41:
            v34 = v37 + 1;
          }
          while (v37 + 1 < v8);
          v32 += 8 * v13;
          ++v33;
          v9 = v36;
        }
        while (v33 != (_DWORD)v36);
        v26 = *v66;
      }
      ++v27;
    }
    while (v27 < v26);
  }
  return result;
}

uint64_t *dav1d_refmvs_save_tmvs(uint64_t *result, int a2, int a3, unsigned int a4, int a5)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;

  v5 = *result;
  v7 = *(_DWORD *)(*result + 16);
  v6 = *(_DWORD *)(*result + 20);
  if (a5 < v6)
    v6 = a5;
  if (a3 < v7)
    v7 = a3;
  if (v6 > (int)a4 && v7 > a2)
  {
    v9 = *(_QWORD *)(v5 + 184);
    v10 = v5 + 39;
    v11 = *(_QWORD *)(v5 + 160) + 8 * v9 * a4;
    v12 = 8 * v9;
    do
    {
      v13 = result[2 * (a4 & 0xF) + 7];
      LODWORD(v14) = a2;
      do
      {
        v15 = (__int16 *)(v13 + 12 * ((2 * (int)v14) | 1));
        v16 = dav1d_block_dimensions[4 * *((unsigned __int8 *)v15 + 10)];
        v17 = (v16 + 1) >> 1;
        v18 = (unsigned __int8 *)(v15 + 4);
        if (*((char *)v15 + 9) < 1 || !*(_BYTE *)(v10 + *((unsigned __int8 *)v15 + 9) - 1))
          goto LABEL_33;
        v19 = v15[2];
        if (v19 < 0)
          v19 = -v19;
        v20 = v15[3];
        if (v20 < 0)
          v20 = -v20;
        if ((unsigned __int16)(v20 | v19) < 0x1000u)
        {
          if (dav1d_block_dimensions[4 * *((unsigned __int8 *)v15 + 10)])
          {
            if (v17 <= 1)
              v17 = 1;
            v21 = 8 * (int)v14;
            LODWORD(v14) = v14 + v17;
            do
            {
              v22 = v11 + v21;
              v23 = *((_BYTE *)v15 + 9);
              *(_DWORD *)v22 = *((_DWORD *)v15 + 1);
              *(_BYTE *)(v22 + 4) = v23;
              v21 += 8;
              --v17;
            }
            while (v17);
          }
        }
        else
        {
          if ((char)*v18 < 1 || !*(_BYTE *)(v10 + *v18 - 1))
            goto LABEL_40;
LABEL_33:
          v24 = *v15;
          if (v24 < 0)
            v24 = -v24;
          v25 = v15[1];
          if (v25 < 0)
            v25 = -v25;
          if ((unsigned __int16)(v25 | v24) < 0x1000u)
          {
            if (dav1d_block_dimensions[4 * *((unsigned __int8 *)v15 + 10)])
            {
              if (v17 <= 1)
                v17 = 1;
              v26 = 8 * (int)v14;
              LODWORD(v14) = v14 + v17;
              do
              {
                v27 = v11 + v26;
                v28 = *v18;
                *(_DWORD *)v27 = *(_DWORD *)v15;
                *(_BYTE *)(v27 + 4) = v28;
                v26 += 8;
                --v17;
              }
              while (v17);
            }
          }
          else
          {
LABEL_40:
            if (!dav1d_block_dimensions[4 * *((unsigned __int8 *)v15 + 10)])
              continue;
            v29 = (int)v14;
            if (v17 <= 1)
              v30 = 1;
            else
              v30 = (v16 + 1) >> 1;
            if ((unint64_t)(v16 + 1) >> 1 <= 1)
              v31 = 1;
            else
              v31 = (unint64_t)(v16 + 1) >> 1;
            if (v31 < 2)
            {
              LODWORD(v32) = 0;
              v14 = (int)v14;
LABEL_52:
              v36 = (8 * v14) | 4;
              v37 = v30 - v32;
              do
              {
                *(_BYTE *)(v11 + v36) = 0;
                LODWORD(v14) = v14 + 1;
                v36 += 8;
                --v37;
              }
              while (v37);
              continue;
            }
            v32 = v31 & 0xFE;
            v14 = v32 + (int)v14;
            v33 = 8 * v29;
            v34 = v32;
            do
            {
              v35 = v11 + v33;
              *(_BYTE *)(v35 + 4) = 0;
              *(_BYTE *)(v35 + 12) = 0;
              v33 += 16;
              v34 -= 2;
            }
            while (v34);
            if (v31 != v32)
              goto LABEL_52;
          }
        }
      }
      while ((int)v14 < v7);
      ++a4;
      v11 += v12;
    }
    while (a4 != v6);
  }
  return result;
}

uint64_t dav1d_refmvs_init_frame(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8, int a9)
{
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  void *v21;
  char v23;
  int v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t result;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  int v84;
  unsigned int v85;
  void *memptr;

  *(_DWORD *)(a1 + 24) = 16 << *(_DWORD *)(a2 + 1012);
  *(_QWORD *)a1 = a3;
  v16 = (a3[59] + 7) >> 3;
  *(_DWORD *)(a1 + 16) = v16;
  v17 = (a3[61] + 7) >> 3;
  *(_DWORD *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 8) = 2 * v16;
  *(_DWORD *)(a1 + 12) = 2 * v17;
  v18 = (int)(((a3[59] + 127) >> 2) & 0xFFFFFFE0);
  if (a8 >= 2)
  {
    v19 = a3[139];
    v20 = a9;
    if (*(_QWORD *)(a1 + 200) != v18)
      goto LABEL_6;
LABEL_5:
    if (v19 == *(_DWORD *)(a1 + 208))
      goto LABEL_18;
    goto LABEL_6;
  }
  v19 = 1;
  v20 = a9;
  if (*(_QWORD *)(a1 + 200) == v18)
    goto LABEL_5;
LABEL_6:
  v21 = *(void **)(a1 + 192);
  if (v21)
  {
    free(v21);
    *(_QWORD *)(a1 + 192) = 0;
  }
  v23 = a8 > 1 && v20 > 1;
  memptr = 0;
  v24 = malloc_type_posix_memalign(&memptr, 0x40uLL, ((420 * (int)v18 * (uint64_t)v19) << v23) | 4, 0xCA3F0CE3uLL);
  v25 = memptr;
  if (v24)
    v25 = 0;
  *(_QWORD *)(a1 + 192) = v25;
  if (!v25)
    return 4294967284;
  *(_QWORD *)(a1 + 200) = v18;
LABEL_18:
  if (v18 >> 1 != *(_QWORD *)(a1 + 184) || v19 != *(_DWORD *)(a1 + 208))
  {
    v26 = *(void **)(a1 + 176);
    if (v26)
    {
      free(v26);
      *(_QWORD *)(a1 + 176) = 0;
    }
    memptr = 0;
    v27 = malloc_type_posix_memalign(&memptr, 0x40uLL, ((int)v18 * (uint64_t)v19) << 6, 0xCA3F0CE3uLL);
    v28 = memptr;
    if (v27)
      v28 = 0;
    *(_QWORD *)(a1 + 176) = v28;
    if (v28)
    {
      *(_QWORD *)(a1 + 184) = v18 >> 1;
      goto LABEL_26;
    }
    return 4294967284;
  }
LABEL_26:
  *(_DWORD *)(a1 + 208) = v19;
  *(_DWORD *)(a1 + 212) = a8;
  *(_DWORD *)(a1 + 216) = v20;
  *(_QWORD *)(a1 + 160) = a5;
  *(_QWORD *)(a1 + 168) = a7;
  v29 = a3[62];
  v30 = *(_DWORD *)(a2 + 1060);
  if (v30)
    v30 = ((*a4 - v29) & ((1 << (v30 - 1)) - 1)) - ((*a4 - v29) & (1 << (v30 - 1)));
  *(_BYTE *)(a1 + 32) = v30 > 0;
  *(_BYTE *)(a1 + 39) = v30 < 0;
  v31 = *(_DWORD *)(a2 + 1060);
  if (v31)
  {
    v31 = ((v29 - *a4) & ((1 << (v31 - 1)) - 1)) - ((v29 - *a4) & (1 << (v31 - 1)));
    if (v31 >= 31)
      v31 = 31;
    if (v31 <= -31)
      LOBYTE(v31) = -31;
  }
  *(_BYTE *)(a1 + 46) = v31;
  v32 = *(_DWORD *)(a2 + 1060);
  if (v32)
    v32 = ((a4[1] - v29) & ((1 << (v32 - 1)) - 1)) - ((a4[1] - v29) & (1 << (v32 - 1)));
  *(_BYTE *)(a1 + 33) = v32 > 0;
  *(_BYTE *)(a1 + 40) = v32 < 0;
  v33 = *(_DWORD *)(a2 + 1060);
  if (v33)
  {
    v33 = ((v29 - a4[1]) & ((1 << (v33 - 1)) - 1)) - ((v29 - a4[1]) & (1 << (v33 - 1)));
    if (v33 >= 31)
      v33 = 31;
    if (v33 <= -31)
      LOBYTE(v33) = -31;
  }
  *(_BYTE *)(a1 + 47) = v33;
  v34 = *(_DWORD *)(a2 + 1060);
  if (v34)
    v34 = ((a4[2] - v29) & ((1 << (v34 - 1)) - 1)) - ((a4[2] - v29) & (1 << (v34 - 1)));
  *(_BYTE *)(a1 + 34) = v34 > 0;
  *(_BYTE *)(a1 + 41) = v34 < 0;
  v35 = *(_DWORD *)(a2 + 1060);
  if (v35)
  {
    v35 = ((v29 - a4[2]) & ((1 << (v35 - 1)) - 1)) - ((v29 - a4[2]) & (1 << (v35 - 1)));
    if (v35 >= 31)
      v35 = 31;
    if (v35 <= -31)
      LOBYTE(v35) = -31;
  }
  *(_BYTE *)(a1 + 48) = v35;
  v36 = *(_DWORD *)(a2 + 1060);
  if (v36)
    v36 = ((a4[3] - v29) & ((1 << (v36 - 1)) - 1)) - ((a4[3] - v29) & (1 << (v36 - 1)));
  *(_BYTE *)(a1 + 35) = v36 > 0;
  *(_BYTE *)(a1 + 42) = v36 < 0;
  v37 = *(_DWORD *)(a2 + 1060);
  if (v37)
  {
    v37 = ((v29 - a4[3]) & ((1 << (v37 - 1)) - 1)) - ((v29 - a4[3]) & (1 << (v37 - 1)));
    if (v37 >= 31)
      v37 = 31;
    if (v37 <= -31)
      LOBYTE(v37) = -31;
  }
  *(_BYTE *)(a1 + 49) = v37;
  v38 = *(_DWORD *)(a2 + 1060);
  if (v38)
    v38 = ((a4[4] - v29) & ((1 << (v38 - 1)) - 1)) - ((a4[4] - v29) & (1 << (v38 - 1)));
  *(_BYTE *)(a1 + 36) = v38 > 0;
  *(_BYTE *)(a1 + 43) = v38 < 0;
  v39 = *(_DWORD *)(a2 + 1060);
  if (v39)
  {
    v39 = ((v29 - a4[4]) & ((1 << (v39 - 1)) - 1)) - ((v29 - a4[4]) & (1 << (v39 - 1)));
    if (v39 >= 31)
      v39 = 31;
    if (v39 <= -31)
      LOBYTE(v39) = -31;
  }
  *(_BYTE *)(a1 + 50) = v39;
  v40 = *(_DWORD *)(a2 + 1060);
  if (v40)
    v40 = ((a4[5] - v29) & ((1 << (v40 - 1)) - 1)) - ((a4[5] - v29) & (1 << (v40 - 1)));
  *(_BYTE *)(a1 + 37) = v40 > 0;
  *(_BYTE *)(a1 + 44) = v40 < 0;
  v41 = *(_DWORD *)(a2 + 1060);
  if (v41)
  {
    v41 = ((v29 - a4[5]) & ((1 << (v41 - 1)) - 1)) - ((v29 - a4[5]) & (1 << (v41 - 1)));
    if (v41 >= 31)
      v41 = 31;
    if (v41 <= -31)
      LOBYTE(v41) = -31;
  }
  *(_BYTE *)(a1 + 51) = v41;
  v42 = *(_DWORD *)(a2 + 1060);
  if (v42)
    v42 = ((a4[6] - v29) & ((1 << (v42 - 1)) - 1)) - ((a4[6] - v29) & (1 << (v42 - 1)));
  *(_BYTE *)(a1 + 38) = v42 > 0;
  *(_BYTE *)(a1 + 45) = v42 < 0;
  v43 = *(_DWORD *)(a2 + 1060);
  if (v43)
  {
    v44 = ((v29 - a4[6]) & ((1 << (v43 - 1)) - 1)) - ((v29 - a4[6]) & (1 << (v43 - 1)));
    if (v44 >= 31)
      v44 = 31;
    if (v44 <= -31)
      LOBYTE(v44) = -31;
    *(_BYTE *)(a1 + 52) = v44;
    *(_DWORD *)(a1 + 152) = 0;
    if (!a3[128])
      goto LABEL_84;
  }
  else
  {
    *(_BYTE *)(a1 + 52) = 0;
    *(_DWORD *)(a1 + 152) = 0;
    if (!a3[128])
      goto LABEL_84;
  }
  if (*(_DWORD *)(a2 + 1060))
  {
    if (*a7 && *(_DWORD *)(a6 + 24) != a4[3])
    {
      LODWORD(v46) = 1;
      *(_DWORD *)(a1 + 152) = 1;
      *(_BYTE *)(a1 + 53) = 0;
      v47 = 3;
      if (!a7[4])
        goto LABEL_90;
    }
    else
    {
      LODWORD(v46) = 0;
      v47 = 2;
      if (!a7[4])
      {
LABEL_90:
        if (a7[5])
        {
          v50 = *(_DWORD *)(a2 + 1060);
          if (v50)
          {
            v51 = a4[5] - a3[62];
            if ((v51 & ((1 << (v50 - 1)) - 1)) > (v51 & (1 << (v50 - 1))))
            {
              *(_DWORD *)(a1 + 152) = v46 + 1;
              *(_BYTE *)(a1 + v46 + 53) = 5;
              LODWORD(v46) = *(_DWORD *)(a1 + 152);
            }
          }
        }
        if ((int)v46 < v47)
        {
          if (a7[6])
          {
            v52 = *(_DWORD *)(a2 + 1060);
            if (v52)
            {
              v53 = a4[6] - a3[62];
              if ((v53 & ((1 << (v52 - 1)) - 1)) > (v53 & (1 << (v52 - 1))))
              {
                *(_DWORD *)(a1 + 152) = v46 + 1;
                *(_BYTE *)(a1 + (int)v46 + 53) = 6;
                LODWORD(v46) = *(_DWORD *)(a1 + 152);
              }
            }
          }
        }
        if ((int)v46 < v47 && a7[1])
        {
          *(_DWORD *)(a1 + 152) = v46 + 1;
          *(_BYTE *)(a1 + (int)v46 + 53) = 1;
          LODWORD(v46) = *(_DWORD *)(a1 + 152);
        }
        if ((int)v46 < 1)
          goto LABEL_85;
        v54 = 0;
        v55 = 68;
        while (1)
        {
          while (1)
          {
            v56 = a1 + v54;
            v57 = *(unsigned __int8 *)(a1 + v54 + 53);
            v58 = a4[v57];
            v59 = *(_DWORD *)(a2 + 1060);
            if (v59)
              v59 = ((v58 - a3[62]) & ((1 << (v59 - 1)) - 1)) - ((v58 - a3[62]) & (1 << (v59 - 1)));
            v60 = v59 >= 0 ? v59 : -v59;
            if (v60 < 0x20)
              break;
            *(_DWORD *)(a1 + 4 * v54++ + 56) = 0x80000000;
            v46 = *(int *)(a1 + 152);
            v55 += 28;
            if (v54 >= v46)
              goto LABEL_85;
          }
          if (v57 >= 4)
            v61 = v59;
          else
            v61 = -v59;
          *(_DWORD *)(a1 + 4 * v54 + 56) = v61;
          v62 = *(_DWORD *)(a2 + 1060);
          if (v62)
          {
            v63 = v58 - *(_DWORD *)(a6 + 28 * *(unsigned __int8 *)(v56 + 53));
            v62 = (v63 & ((1 << (v62 - 1)) - 1)) - (v63 & (1 << (v62 - 1)));
            if (v62 > 0x1F)
              v62 = 0;
          }
          *(_DWORD *)(a1 + v55) = v62;
          v64 = *(_DWORD *)(a2 + 1060);
          if (v64)
          {
            v65 = v58 - *(_DWORD *)(a6 + 28 * *(unsigned __int8 *)(v56 + 53) + 4);
            v66 = (v65 & ((1 << (v64 - 1)) - 1)) - (v65 & (1 << (v64 - 1)));
            if (v66 <= 0x1F)
              v67 = v66;
            else
              v67 = 0;
            v68 = a1 + v55;
            *(_DWORD *)(a1 + v55 + 4) = v67;
            v69 = *(_DWORD *)(a2 + 1060);
            if (!v69)
              goto LABEL_124;
          }
          else
          {
            v68 = a1 + v55;
            *(_DWORD *)(a1 + v55 + 4) = 0;
            v69 = *(_DWORD *)(a2 + 1060);
            if (!v69)
              goto LABEL_124;
          }
          v70 = v58 - *(_DWORD *)(a6 + 28 * *(unsigned __int8 *)(v56 + 53) + 8);
          v69 = (v70 & ((1 << (v69 - 1)) - 1)) - (v70 & (1 << (v69 - 1)));
          if (v69 > 0x1F)
            v69 = 0;
LABEL_124:
          *(_DWORD *)(v68 + 8) = v69;
          v71 = *(_DWORD *)(a2 + 1060);
          if (v71)
          {
            v72 = v58 - *(_DWORD *)(a6 + 28 * *(unsigned __int8 *)(v56 + 53) + 12);
            v73 = (v72 & ((1 << (v71 - 1)) - 1)) - (v72 & (1 << (v71 - 1)));
            if (v73 <= 0x1F)
              v74 = v73;
            else
              v74 = 0;
            v75 = a1 + v55;
            *(_DWORD *)(a1 + v55 + 12) = v74;
            v76 = *(_DWORD *)(a2 + 1060);
            if (v76)
            {
LABEL_129:
              v77 = v58 - *(_DWORD *)(a6 + 28 * *(unsigned __int8 *)(v56 + 53) + 16);
              v76 = (v77 & ((1 << (v76 - 1)) - 1)) - (v77 & (1 << (v76 - 1)));
              if (v76 > 0x1F)
                v76 = 0;
            }
          }
          else
          {
            v75 = a1 + v55;
            *(_DWORD *)(a1 + v55 + 12) = 0;
            v76 = *(_DWORD *)(a2 + 1060);
            if (v76)
              goto LABEL_129;
          }
          *(_DWORD *)(v75 + 16) = v76;
          v78 = *(_DWORD *)(a2 + 1060);
          if (v78)
          {
            v79 = v58 - *(_DWORD *)(a6 + 28 * *(unsigned __int8 *)(v56 + 53) + 20);
            v80 = (v79 & ((1 << (v78 - 1)) - 1)) - (v79 & (1 << (v78 - 1)));
            if (v80 <= 0x1F)
              v81 = v80;
            else
              v81 = 0;
            v82 = a1 + v55;
            *(_DWORD *)(a1 + v55 + 20) = v81;
            v83 = *(_DWORD *)(a2 + 1060);
            if (v83)
              goto LABEL_136;
LABEL_145:
            *(_DWORD *)(v82 + 24) = 0;
            ++v54;
            v46 = *(int *)(a1 + 152);
            v55 += 28;
            if (v54 >= v46)
              goto LABEL_85;
          }
          else
          {
            v82 = a1 + v55;
            *(_DWORD *)(a1 + v55 + 20) = 0;
            v83 = *(_DWORD *)(a2 + 1060);
            if (!v83)
              goto LABEL_145;
LABEL_136:
            v84 = v58 - *(_DWORD *)(a6 + 28 * *(unsigned __int8 *)(v56 + 53) + 24);
            v85 = (v84 & ((1 << (v83 - 1)) - 1)) - (v84 & (1 << (v83 - 1)));
            if (v85 > 0x1F)
              v85 = 0;
            *(_DWORD *)(v82 + 24) = v85;
            ++v54;
            v46 = *(int *)(a1 + 152);
            v55 += 28;
            if (v54 >= v46)
              goto LABEL_85;
          }
        }
      }
    }
    v48 = *(_DWORD *)(a2 + 1060);
    if (v48)
    {
      v49 = a4[4] - a3[62];
      if ((v49 & ((1 << (v48 - 1)) - 1)) > (v49 & (1 << (v48 - 1))))
      {
        *(_DWORD *)(a1 + 152) = v46 + 1;
        *(_BYTE *)(a1 + v46 + 53) = 4;
        LODWORD(v46) = v46 + 1;
      }
    }
    goto LABEL_90;
  }
LABEL_84:
  LODWORD(v46) = 0;
LABEL_85:
  result = 0;
  *(_DWORD *)(a1 + 28) = (int)v46 > 0;
  return result;
}

void dav1d_refmvs_clear(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 192);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(a1 + 192) = 0;
  }
  v3 = *(void **)(a1 + 176);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 176) = 0;
  }
}

_QWORD *splat_mv_c(_QWORD *result, uint64_t *a2, int a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a4 >= 1)
  {
    do
    {
      v5 = *result + 12 * a3;
      v6 = a4;
      do
      {
        v7 = *a2;
        *(_DWORD *)(v5 + 8) = *((_DWORD *)a2 + 2);
        *(_QWORD *)v5 = v7;
        v5 += 12;
        --v6;
      }
      while (v6);
      ++result;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t dav1d_task_create_tile_sbrow(uint64_t a1, int a2, int a3)
{
  char *v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  char *v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  int v17;
  int v18;
  char *v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  size_t v24;
  unsigned int *v25;
  char *v26;
  char v27;
  int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  int v32;
  int v33;
  int *v34;
  uint64_t v35;
  unsigned int *v36;
  int v37;
  unsigned int *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;

  v6 = *(char **)(a1 + 5264);
  v7 = *(_DWORD **)(a1 + 24);
  v8 = (int)v7[139] * (uint64_t)(int)v7[135];
  v9 = (_DWORD)v8 << (*(_DWORD *)(*(_QWORD *)(a1 + 3120) + 8) > 1u);
  if (v9 > *(_DWORD *)(a1 + 5316))
  {
    v10 = (char *)malloc_type_realloc(*(void **)(a1 + 5264), 32 * v9, 0x506DBDF2uLL);
    if (!v10)
      return 0xFFFFFFFFLL;
    v6 = v10;
    bzero(v10, 32 * v9);
    *(_QWORD *)(a1 + 5264) = v6;
    *(_DWORD *)(a1 + 5316) = v9;
    v7 = *(_DWORD **)(a1 + 24);
  }
  *(_QWORD *)(a1 + 5272) = &v6[32 * v8];
  if (v7[308])
    v11 = 1;
  else
    v11 = v7[309] != 0;
  v12 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 1068);
  v13 = v7[59];
  v14 = v7[60];
  v15 = *(_DWORD *)(a1 + 5192);
  v16 = *(char **)(a1 + 5256);
  v17 = *(_DWORD *)(a1 + 3296);
  v18 = v17 << (*(_DWORD *)(*(_QWORD *)(a1 + 3120) + 8) > 1u);
  if (v18 > *(_DWORD *)(a1 + 5312))
  {
    v40 = *(_DWORD *)(a1 + 5192);
    v42 = v7[60];
    v44 = v7[59];
    v19 = (char *)malloc_type_realloc(v16, 32 * v18, 0x30C3E714uLL);
    if (!v19)
      return 0xFFFFFFFFLL;
    v16 = v19;
    bzero(v19, 32 * v18);
    *(_QWORD *)(a1 + 5256) = v16;
    *(_DWORD *)(a1 + 5312) = v18;
    v17 = *(_DWORD *)(a1 + 3296);
    v14 = v42;
    v13 = v44;
    v15 = v40;
  }
  if ((a2 & 1) == 0)
  {
    v41 = v15;
    v43 = v14;
    v45 = v13;
    v39 = a3;
    v20 = (v17 + 31) >> 5;
    v21 = *(char **)(a1 + 4176);
    if (v20 <= *(_DWORD *)(a1 + 4232))
    {
      v22 = v20;
      goto LABEL_17;
    }
    v21 = (char *)malloc_type_realloc(v21, 8 * v20, 0x100004052888210uLL);
    if (v21)
    {
      *(_QWORD *)(a1 + 4176) = v21;
      v22 = v20;
      *(_QWORD *)(a1 + 4184) = &v21[4 * v20];
      *(_DWORD *)(a1 + 4232) = v20;
LABEL_17:
      v24 = 4 * v22;
      bzero(v21, 4 * v22);
      bzero(*(void **)(a1 + 4184), v24);
      atomic_store(0, (unsigned int *)(a1 + 4172));
      a3 = v39;
      v14 = v43;
      v13 = v45;
      v15 = v41;
      goto LABEL_18;
    }
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 4168) = 0;
LABEL_18:
  v25 = (unsigned int *)&v6[32 * (a2 & 1) * (uint64_t)(int)v8];
  v26 = &v16[32 * (a2 & 1) * (uint64_t)v17];
  *(_DWORD *)(a1 + 4 * (a2 & 1) + 4160) = 0;
  *((_QWORD *)v26 + 1) = 0x100000000;
  *((_DWORD *)v26 + 4) = 0;
  v27 = a2 == 1 || v11;
  if (a2 == 1)
    v28 = 3;
  else
    v28 = 5;
  if ((v27 & 1) == 0)
  {
    v28 = v13 == v14 ? 10 : 8;
    if (v12 | v15)
      v28 = 6;
  }
  v29 = 0;
  v30 = 0;
  *((_DWORD *)v26 + 1) = v28;
  v31 = -165681231 * ((unint64_t)(a1 - **(_QWORD **)(a1 + 3120)) >> 4);
  *(_DWORD *)v26 = v31;
  v32 = *(_DWORD *)(a1 + 3300);
  if (a2 == 1)
    v33 = 2;
  else
    v33 = 4;
  v34 = (int *)(*(_QWORD *)(a1 + 3128) + 13872);
  do
  {
    v36 = &v25[v29];
    v37 = *v34 >> v32;
    v25[v29 + 2] = v37;
    if (v26 && v37)
    {
      v35 = 0;
      *((_QWORD *)v30 + 3) = v26;
      *((_QWORD *)v36 + 2) = 0;
      v36[3] = 0;
      *v36 = v31;
      v36[1] = v33;
    }
    else
    {
      v35 = (uint64_t)v26;
      v26 = (char *)v30;
      *((_QWORD *)v36 + 2) = 0;
      v36[3] = 0;
      *v36 = v31;
      v36[1] = v33;
      if (!v30)
        goto LABEL_36;
    }
    *((_QWORD *)v26 + 3) = v36;
LABEL_36:
    v34 += 3648;
    v29 += 8;
    v30 = v36;
    v26 = (char *)v35;
  }
  while (8 * v8 != v29);
  v38 = &v25[v29];
  if (v35)
    *((_QWORD *)v38 - 1) = v35;
  else
    v35 = (uint64_t)(v38 - 8);
  insert_tasks((_QWORD *)a1, v25, v35, a3);
  result = 0;
  *(_DWORD *)(a1 + 4 * (a2 & 1) + 5324) = 0;
  return result;
}

_QWORD *insert_tasks(_QWORD *a1, unsigned int *a2, uint64_t a3, int a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  signed int v9;
  signed int v10;
  signed int v12;
  unsigned int v13;
  signed int v14;
  signed int v15;
  unsigned int v16;
  signed int v17;

  v5 = a1[669];
  if (v5)
  {
    v6 = a2[1];
    if (v6 == 2)
    {
      v7 = 0;
      while (1)
      {
        v8 = v5;
        if (*(_DWORD *)(v5 + 4) != 2)
          break;
        v9 = a2[2];
        v10 = *(_DWORD *)(v5 + 8);
        if (v9 <= v10
          && (v9 < v10 || (int)(((unint64_t)a2 - a1[659]) >> 5) <= (int)((unint64_t)(v8 - a1[659]) >> 5)))
        {
          break;
        }
        v5 = *(_QWORD *)(v8 + 24);
        v7 = v8;
        if (!v5)
          goto LABEL_11;
      }
    }
    else
    {
      v8 = 0;
      if (v6 <= 2)
      {
        v12 = a2[2];
        while (1)
        {
          v7 = v8;
          v8 = v5;
          v16 = *(_DWORD *)(v5 + 4);
          v17 = *(_DWORD *)(v8 + 8);
          if (v16 == 2)
          {
            if (v12 <= v17)
              return insert_tasks_between(a1, a2, a3, v7, v8, a4);
          }
          else if (__SPAIR64__(v12, v6) <= __SPAIR64__(v17, v16))
          {
            return insert_tasks_between(a1, a2, a3, v7, v8, a4);
          }
          v5 = *(_QWORD *)(v8 + 24);
          if (!v5)
            goto LABEL_11;
        }
      }
      while (1)
      {
        v7 = v8;
        v8 = v5;
        v13 = *(_DWORD *)(v5 + 4);
        if (v13 != 2)
        {
          v14 = a2[2];
          v15 = *(_DWORD *)(v8 + 8);
          if (v14 <= v15
            && (v14 < v15
             || v6 <= v13
             && (v6 < v13 || (int)(((unint64_t)a2 - a1[658]) >> 5) <= (int)((unint64_t)(v8 - a1[658]) >> 5))))
          {
            break;
          }
        }
        v5 = *(_QWORD *)(v8 + 24);
        if (!v5)
          goto LABEL_11;
      }
    }
  }
  else
  {
    v8 = 0;
LABEL_11:
    v7 = v8;
    v8 = 0;
  }
  return insert_tasks_between(a1, a2, a3, v7, v8, a4);
}

uint64_t dav1d_worker_task(uint64_t a1)
{
  int *v1;
  uint64_t *v2;
  pthread_mutex_t *v3;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  pthread_cond_t *v8;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t sig;
  uint64_t v21;
  int v22;
  int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int i;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  unsigned int *v48;
  uint64_t v49;
  _DWORD *v50;
  int *v51;
  uint64_t v52;
  _DWORD *v53;
  _QWORD *v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  signed int v62;
  int v63;
  _BOOL4 v64;
  unsigned int v65;
  unsigned int v66;
  signed int v67;
  _BOOL4 v68;
  unsigned int v69;
  char v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  _BOOL8 v75;
  unsigned int v76;
  unsigned int v77;
  _BOOL4 v78;
  unsigned int v79;
  int v80;
  int v81;
  _BOOL8 v82;
  int v83;
  _BOOL4 v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  signed int v88;
  _BOOL4 v89;
  unsigned int v90;
  signed int v91;
  uint64_t v92;
  int *v93;
  int v94;
  int v95;
  signed int v96;
  int v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  _BOOL4 v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  int v112;
  uint64_t v113;
  int v114;
  unsigned int v117;
  unsigned int v118;
  signed int v119;
  signed int v120;
  pthread_cond_t *v121;
  __int128 v122;
  int v123;
  uint64_t v124;
  unsigned int *v125;
  _BOOL4 v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  int32x4_t v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  uint64_t v142;
  _BOOL8 v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned int v148;
  int v149;
  int v150;
  unsigned int v151;
  _BOOL8 v152;
  int v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  signed int v160;
  int v161;
  _BOOL4 v162;
  unsigned int v163;
  unsigned int v164;
  signed int v165;
  _BOOL4 v166;
  unsigned int v167;
  char v168;
  int v169;
  int v170;
  int v171;
  uint64_t v172;
  _BOOL8 v173;
  unsigned int v174;
  _BOOL4 v175;
  unsigned int v176;
  unsigned int v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  BOOL v182;
  unsigned int v183;
  int v184;
  int v185;
  unsigned int *v186;
  unsigned int v187;
  uint64_t v188;
  int *v189;
  int v190;
  int v191;
  signed int v192;
  int v193;
  uint64_t v194;
  int v195;
  unsigned int v196;
  _BOOL4 v197;
  unsigned int v198;
  pthread_mutex_t *v199;
  int v200;
  _BOOL8 v201;
  uint64_t v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  pthread_mutex_t *v208;
  int v209;
  _BOOL8 v210;
  int v211;
  uint64_t v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  uint64_t v222;
  unsigned int v223;
  int inited;
  signed int v227;
  signed int v228;
  signed int v229;
  _QWORD *v230;
  int v231;
  unsigned int v232;
  unsigned int v233;
  pthread_cond_t *v234;
  unsigned int v235;
  unsigned int v236;
  uint64_t v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  uint64_t v259;
  unsigned int v260;
  int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  uint64_t v265;
  unsigned int v266;
  uint64_t v268;
  unsigned int v270;
  unsigned int v271;
  int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int *v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v279;
  int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v286;
  int v287;
  int v288;
  unsigned int *v289;
  unsigned int v290;
  int v291;
  unsigned int v292;
  int v293;
  uint64_t v294;
  unsigned int v295;
  unsigned int v296;
  int v297;
  unsigned int v298;
  int v299;
  unsigned int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  uint64_t v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int *v320;
  unsigned int v321;
  unsigned int v322;
  int v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  uint64_t v329;
  unsigned int v330;
  uint64_t v331;
  unsigned int *v332;
  unsigned int v333;
  int v334;
  int v335;
  int v336;
  unsigned int v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  int v346;
  unsigned int v347;
  unsigned int v348;
  int v349;
  pthread_cond_t *opaque;
  uint64_t v351;
  unsigned int *v352;
  unsigned int *v353;
  uint64_t v354;
  int *v355;
  uint64_t *v357;
  uint64_t v358;
  uint64_t (**v359)(uint64_t, uint64_t);
  char *v360;
  pthread_mutex_t *v361;
  pthread_cond_t *v362;
  uint64_t v363;

  v1 = (int *)(a1 + 259588);
  v2 = *(uint64_t **)a1;
  v3 = *(pthread_mutex_t **)(a1 + 259720);
  pthread_setname_np("dav1d-worker");
  pthread_mutex_lock(v3);
  if (!v1[38])
  {
    v352 = (unsigned int *)&v3[1].__opaque[52];
    v362 = (pthread_cond_t *)&v3[1];
    v363 = (uint64_t)&v3[4];
    v360 = (char *)&v3[573];
    v361 = v3;
    v359 = (uint64_t (**)(uint64_t, uint64_t))(v2 + 6587);
    v357 = v2;
    v358 = (uint64_t)&v3[289];
    v5 = (unsigned int *)&v3[3].__opaque[4];
    v6 = (unsigned int *)&v3[3].__opaque[8];
    opaque = (pthread_cond_t *)v3[2].__opaque;
    v7 = (unsigned int *)&v3[1].__opaque[48];
    v8 = (pthread_cond_t *)(a1 + 259600);
    v355 = v1;
LABEL_6:
    if (atomic_load((unsigned int *)v2[99]))
    {
LABEL_7:
      v1[37] = 1;
      pthread_cond_signal(v8);
      atomic_store(0, (unsigned int *)&v3[1].__opaque[52]);
      pthread_cond_wait(v362, v3);
      v1[37] = 0;
      v10 = atomic_load((unsigned int *)&v3[1].__opaque[40]);
      if (*(_DWORD *)&v3[1].__opaque[44] || *(_QWORD *)(*v2 + 5392 * v10 + 5368))
      {
        do
          v11 = __ldaxr(v7);
        while (__stlxr(0xFFFFFFFF, v7));
        if (v11 != -1 && v11 <= *(_DWORD *)&v3[1].__opaque[44] + v10)
        {
          v12 = v11 - v10;
          v13 = *((_DWORD *)v2 + 2);
          *(_DWORD *)&v3[1].__opaque[44] = v11 - v10;
          if (v11 - v10 < v13)
          {
            v14 = *v2;
            v15 = v10 + v13 - v11;
            if (v15 < 2)
              goto LABEL_17;
            v12 += v15 & 0xFFFFFFFE;
            v16 = v15 & 0xFFFFFFFE;
            do
            {
              *(_QWORD *)(v14 + 5392 * (v11 % v13) + 5368) = 0;
              *(_QWORD *)(v14 + 5392 * ((v11 + 1) % v13) + 5368) = 0;
              v11 += 2;
              v16 -= 2;
            }
            while (v16);
            if (v15 != (v15 & 0xFFFFFFFE))
            {
LABEL_17:
              v17 = v13 - v12;
              v18 = v12 + v10;
              do
              {
                *(_QWORD *)(v14 + 5392 * (v18 % v13) + 5368) = 0;
                ++v18;
                --v17;
              }
              while (v17);
            }
          }
        }
      }
      goto LABEL_5;
    }
    if (LODWORD(v3[2].__sig))
    {
      v19 = *(_QWORD *)&v3[2].__opaque[48];
      sig = v3[3].__sig;
      v21 = ((uint64_t)*(int *)(sig + 68) >> 1) - 4;
      v22 = *(_DWORD *)v3[3].__opaque;
      if (v22 == 12)
      {
        do
LABEL_128:
          v111 = __ldaxr(v5);
        while (__stlxr(v111 + 1, v5));
        pthread_mutex_unlock(v3);
        v112 = (*(_DWORD *)(sig + 60) + 31) >> 5;
        v113 = (uint64_t)&v357[421 * (int)v21 + 6587];
        while (1)
        {
          if (v111 >= v112 - 1)
          {
            pthread_mutex_lock(v361);
            LODWORD(v361[2].__sig) = 0;
            if (v111 >= v112)
              goto LABEL_148;
            pthread_mutex_unlock(v361);
            v114 = *(_DWORD *)(sig + 68);
            if (v114 != 12 && v114 != 10)
            {
LABEL_142:
              if (v114 != 8)
                goto LABEL_526;
              dav1d_apply_grain_row_8bpc((uint64_t)v359, sig, v19, v358, v363, v111);
              goto LABEL_144;
            }
          }
          else
          {
            pthread_cond_signal(v362);
            v114 = *(_DWORD *)(sig + 68);
            if (v114 != 12 && v114 != 10)
              goto LABEL_142;
          }
          dav1d_apply_grain_row_16bpc(v113, sig, v19, (uint64_t)v360, v363, v111);
          do
LABEL_144:
            v111 = __ldaxr(v5);
          while (__stlxr(v111 + 1, v5));
          do
            v117 = __ldaxr(v6);
          while (__stlxr(v117 + 1, v6));
          if (v111 >= v112)
          {
            pthread_mutex_lock(v361);
            LODWORD(v361[2].__sig) = 0;
            do
            {
LABEL_148:
              v118 = __ldaxr(v6);
              v119 = v118 + 1;
            }
            while (__stlxr(v119, v6));
            v120 = atomic_load(v5);
            v3 = v361;
            v1 = v355;
            v2 = v357;
            v8 = (pthread_cond_t *)(a1 + 259600);
            if (v119 >= v120)
            {
              v121 = opaque;
              goto LABEL_151;
            }
            goto LABEL_5;
          }
        }
      }
      if (v22 == 11)
      {
        LODWORD(v3[2].__sig) = 0;
        if (atomic_load((unsigned int *)&v3[1].__opaque[52]))
          pthread_cond_signal(v362);
        pthread_mutex_unlock(v3);
        v24 = *(_DWORD *)(sig + 68);
        v25 = v24 == 12 || v24 == 10;
        if (v25)
        {
          dav1d_prep_grain_16bpc((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v357[421 * (int)v21 + 6587], sig, v19, v360, v363);
LABEL_127:
          *(_DWORD *)v3[3].__opaque = 12;
          pthread_mutex_lock(v3);
          LODWORD(v3[2].__sig) = 1;
          goto LABEL_128;
        }
        if (v24 == 8)
        {
          dav1d_prep_grain_8bpc(v359, sig, v19, v358, v363);
          goto LABEL_127;
        }
      }
LABEL_526:
      abort();
    }
    v26 = *((_DWORD *)v2 + 2);
    if (v26 >= 2)
    {
      for (i = 0; i < v26; ++i)
      {
        v28 = atomic_load((unsigned int *)&v3[1].__opaque[40]);
        v29 = *v2;
        v30 = i + v28;
        v26 = *((_DWORD *)v2 + 2);
        v31 = v30 % v26;
        if (!*(_DWORD *)(*v2 + 5392 * v31 + 5320))
        {
          v32 = *(_QWORD *)(v29 + 5392 * v31 + 5352);
          if (v32)
          {
            v33 = *(_DWORD *)(v32 + 4);
            if (v33 == 1)
            {
              v34 = *(unsigned int **)(v29 + 5392 * v31 + 2944);
              if (!v34)
              {
                v35 = 1;
LABEL_162:
                v128 = v29 + 5392 * v31;
                v125 = (unsigned int *)(v128 + 5340);
                v126 = v35 == 2147483646;
                do
                  v127 = __ldaxr(v125);
                while (__stlxr(v127 | v126, v125));
                goto LABEL_169;
              }
              v35 = atomic_load(v34);
              if (v35)
                goto LABEL_162;
              v26 = *((_DWORD *)v2 + 2);
            }
            else if (!v33)
            {
              v128 = v29 + 5392 * v31;
              goto LABEL_169;
            }
          }
        }
      }
    }
    v36 = *(_DWORD *)&v3[1].__opaque[44];
    v37 = atomic_load((unsigned int *)&v3[1].__opaque[40]);
    if (v36 >= v26)
    {
LABEL_112:
      if (*(_DWORD *)&v3[1].__opaque[44] || *(_QWORD *)(*v2 + 5392 * v37 + 5368))
      {
        do
          v103 = __ldaxr(v7);
        while (__stlxr(0xFFFFFFFF, v7));
        if (v103 != -1 && v103 <= *(_DWORD *)&v3[1].__opaque[44] + v37)
        {
          v104 = v103 - v37;
          v105 = *((_DWORD *)v2 + 2);
          *(_DWORD *)&v3[1].__opaque[44] = v103 - v37;
          if (v103 - v37 < v105)
          {
            v106 = *v2;
            v107 = v37 + v105 - v103;
            if (v107 < 2)
              goto LABEL_122;
            v104 += v107 & 0xFFFFFFFE;
            v108 = v107 & 0xFFFFFFFE;
            do
            {
              *(_QWORD *)(v106 + 5392 * (v103 % v105) + 5368) = 0;
              *(_QWORD *)(v106 + 5392 * ((v103 + 1) % v105) + 5368) = 0;
              v103 += 2;
              v108 -= 2;
            }
            while (v108);
            if (v107 != (v107 & 0xFFFFFFFE))
            {
LABEL_122:
              v109 = v105 - v104;
              v110 = v37 + v104;
              do
              {
                *(_QWORD *)(v106 + 5392 * (v110 % v105) + 5368) = 0;
                ++v110;
                --v109;
              }
              while (v109);
            }
          }
          goto LABEL_5;
        }
      }
      goto LABEL_7;
    }
LABEL_42:
    v38 = *v2;
    v39 = *(_DWORD *)&v3[1].__opaque[44];
    v40 = *((_DWORD *)v2 + 2);
    v41 = (v39 + v37) % v40;
    v42 = *v2 + 5392 * v41;
    v32 = *(_QWORD *)(v42 + 5368);
    v43 = (uint64_t *)(v32 + 24);
    if (!v32)
      v43 = (uint64_t *)(v42 + 5352);
    v44 = *v43;
    if (!*v43)
      goto LABEL_111;
    v45 = (uint64_t *)(v42 + 5368);
    v46 = v38 + 5392 * v41;
    v47 = (uint64_t *)(v46 + 3128);
    v48 = (unsigned int *)(v46 + 5340);
    v49 = v46 + 24;
    v50 = (_DWORD *)(v46 + 2320);
    v51 = (int *)(v46 + 3300);
    v52 = v46 + 4160;
    v53 = (_DWORD *)(v46 + 4168);
    v353 = (unsigned int *)(v46 + 4172);
    v54 = (_QWORD *)(v46 + 4184);
    while (1)
    {
      v56 = v32;
      v32 = v44;
      v57 = *(_DWORD *)(v44 + 4);
      if (v57 == 1)
        goto LABEL_47;
      if (v57 == 4 || v57 == 2)
        break;
      if (*(_DWORD *)(v32 + 12))
      {
        atomic_load(v48);
        v80 = *(_DWORD *)(*(_QWORD *)v49 + 540);
        v81 = v80;
        v25 = v57 == 3;
        v82 = v57 == 3;
        v83 = *(_DWORD *)(v52 + 4 * v82);
        if (v25)
        {
          if (*v53 < *(_DWORD *)(v32 + 8))
            goto LABEL_47;
          v84 = *v53 == 2147483646;
          do
            v85 = __ldaxr(v48);
          while (__stlxr(v85 | v84, v48));
          v81 = *(_DWORD *)(*(_QWORD *)v49 + 540);
        }
        if (v81 < 1)
        {
LABEL_153:
          v128 = v38 + 5392 * v41;
          if (*(_DWORD *)(v32 + 8) + 1 < *(_DWORD *)(v128 + 3296))
          {
            v122 = *(_OWORD *)(v32 + 16);
            *(_OWORD *)(v32 + 32) = *(_OWORD *)v32;
            *(_OWORD *)(v32 + 48) = v122;
            v123 = *(_DWORD *)(v32 + 40) + 1;
            *(_DWORD *)(v32 + 40) = v123;
            v124 = *(int *)(v52 + 4 * v82) + 1;
            if (v123 == *(unsigned __int16 *)(*(_QWORD *)v49 + 2 * v124 + 690))
            {
              *(_DWORD *)(v52 + 4 * v82) = v124;
              v123 = *(_DWORD *)(v32 + 40);
            }
            *(_DWORD *)(v32 + 44) = v123 + 1;
            insert_tasks((_QWORD *)v128, (unsigned int *)(v32 + 32), v32 + 32, 0);
            if (!v56)
              goto LABEL_169;
            goto LABEL_167;
          }
LABEL_166:
          if (!v56)
            goto LABEL_169;
          goto LABEL_167;
        }
        v86 = 0;
        v87 = v83 * (uint64_t)v80;
        while (1)
        {
          v88 = atomic_load((unsigned int *)(*v47 + 14592 * (v86 + v87) + 4 * v82 + 13888));
          if (v88 < *(_DWORD *)(v32 + 12))
            break;
          v89 = v88 == 2147483646;
          do
            v90 = __ldaxr(v48);
          while (__stlxr(v90 | v89, v48));
          if (++v86 >= *(int *)(*(_QWORD *)v49 + 540))
            goto LABEL_153;
        }
      }
      else if (v57 == 7)
      {
        v55 = atomic_load((unsigned int *)(*v54 + 4 * ((*(_DWORD *)(v32 + 8) - 1) >> 5)));
        if (((v55 >> (*(_BYTE *)(v32 + 8) - 1)) & 1) != 0)
          goto LABEL_152;
      }
      else
      {
        v91 = atomic_load(v353);
        if (v91 >= *(_DWORD *)(v32 + 16))
        {
          v128 = v38 + 5392 * v41;
          do
            v129 = __ldaxr(v48);
          while (__stlxr(v129 | (v91 == 2147483646), v48));
          goto LABEL_166;
        }
      }
LABEL_47:
      v44 = *(_QWORD *)(v32 + 24);
      *v45 = v32;
      if (!v44)
      {
        v39 = *(_DWORD *)&v3[1].__opaque[44];
        v40 = *((_DWORD *)v2 + 2);
LABEL_111:
        *(_DWORD *)&v3[1].__opaque[44] = v39 + 1;
        v37 = atomic_load((unsigned int *)&v3[1].__opaque[40]);
        if (v39 + 1 >= v40)
          goto LABEL_112;
        goto LABEL_42;
      }
    }
    v59 = *((_DWORD *)v2 + 2);
    v60 = v32 - *(_QWORD *)(v38 + 5392 * v41 + 8 * (v57 == 2) + 5264);
    v61 = *v47;
    v62 = atomic_load((unsigned int *)(*v47 + 14592 * (int)((unint64_t)v60 >> 5) + 4 * (v57 == 2) + 13888));
    if (v62 < *(_DWORD *)(v32 + 8))
      goto LABEL_47;
    v63 = v60 >> 5;
    v64 = v62 == 2147483646;
    do
    {
      v65 = __ldaxr(v48);
      v66 = v65 | v64;
    }
    while (__stlxr(v66, v48));
    if (v57 != 2 && v59 >= 2 && !v66)
    {
      v67 = atomic_load((unsigned int *)(v61 + 14592 * v63 + 13892));
      if (v67 <= *(_DWORD *)(v32 + 8))
        goto LABEL_47;
      v68 = v67 == 2147483646;
      do
      {
        v69 = __ldaxr(v48);
        v66 = v69 | v68;
      }
      while (__stlxr(v66, v48));
    }
    if (v59 < 2
      || v66
      || (*(_BYTE *)(*(_QWORD *)v49 + 232) & 1) == 0
      || (v70 = *v50 == 1, v71 = *(_DWORD *)(v32 + 20), v71 > 6))
    {
LABEL_152:
      v128 = v38 + 5392 * v41;
      goto LABEL_166;
    }
    v72 = *(_DWORD *)(v32 + 8);
    v73 = *v51;
    v74 = v71;
    v25 = v57 == 2;
    v75 = v57 != 2;
    if (v25)
    {
      v76 = (v72 + 1) << (v73 + 2);
      v3 = v361;
      while (1)
      {
        v77 = atomic_load((unsigned int *)(*(_QWORD *)(v38 + 5392 * v41 + 280 * v74 + 304) + 4 * v75));
        if (v77 < v76)
          goto LABEL_47;
        v78 = v77 == -2;
        do
          v79 = __ldaxr(v48);
        while (__stlxr(v79 | v78, v48));
        ++v74;
        ++*(_DWORD *)(v32 + 20);
        if ((_DWORD)v74 == 7)
          goto LABEL_152;
      }
    }
    v92 = *(_QWORD *)(v61 + 14592 * v63 + 13928) + 56 * (v72 - (*(int *)(v61 + 14592 * v63 + 13872) >> v73));
    do
    {
      v93 = (int *)(v92 + 8 * v74);
      v95 = *v93;
      v94 = v93[1];
      if (v95 == 0x80000000)
        v96 = 0x80000000;
      else
        v96 = v95 + 8;
      if (v94 == 0x80000000)
        v97 = 0x80000000;
      else
        v97 = (v94 << v70) + 8;
      if (v96 > v97)
        v97 = v96;
      if (v97 != 0x80000000)
      {
        v98 = v38 + 5392 * v41 + 280 * v74;
        v99 = *(_DWORD *)(v98 + 92);
        if (v97 < v99)
          v99 = v97;
        if (v97 < 1)
          v99 = 1;
        v100 = atomic_load((unsigned int *)(*(_QWORD *)(v98 + 304) + 4 * v75));
        v3 = v361;
        if (v100 < v99)
          goto LABEL_47;
        v101 = v100 == -2;
        do
          v102 = __ldaxr(v48);
        while (__stlxr(v102 | v101, v48));
        v71 = *(_DWORD *)(v32 + 20);
      }
      ++v74;
      *(_DWORD *)(v32 + 20) = ++v71;
    }
    while ((_DWORD)v74 != 7);
    v128 = v38 + 5392 * v41;
    v3 = v361;
    if (!v56)
    {
LABEL_169:
      v56 = 0;
      v130 = *(_QWORD *)(v32 + 24);
      *(_QWORD *)(v128 + 5352) = v130;
      if (!v130)
        goto LABEL_170;
      goto LABEL_171;
    }
LABEL_167:
    *(_QWORD *)(v56 + 24) = *(_QWORD *)(v32 + 24);
    if (!*(_QWORD *)(v32 + 24))
LABEL_170:
      *(_QWORD *)(v128 + 5360) = v56;
LABEL_171:
    if (*(_DWORD *)(v32 + 4) >= 2u && !*(_QWORD *)(v128 + 5352))
      ++*(_DWORD *)&v3[1].__opaque[44];
    atomic_store(1u, (unsigned int *)&v3[1].__opaque[52]);
    pthread_cond_signal(v362);
    pthread_mutex_unlock(v3);
    v138 = (unsigned int *)(v128 + 5340);
    v354 = v128;
    v351 = v32;
    while (2)
    {
      v139 = atomic_load((unsigned int *)v2[99]);
      do
        v140 = __ldaxr(v138);
      while (__stlxr(v140 | v139, v138));
      *(_QWORD *)(a1 + 8) = v128;
      v141 = *(_DWORD *)(v32 + 4);
      v142 = *(unsigned int *)(v32 + 8);
      switch(v141)
      {
        case 0:
          v184 = dav1d_decode_frame_init((int8x16_t *)v128);
          v185 = v184;
          v186 = *(unsigned int **)(v128 + 2944);
          if (v186)
          {
            v187 = atomic_load(v186);
            v2 = v357;
            if (!v184 && v187 != 2147483646)
            {
              *(_DWORD *)(v32 + 4) = 1;
              if (v187)
                continue;
              pthread_mutex_lock(v3);
              insert_tasks((_QWORD *)v128, (unsigned int *)v32, v32, 0);
              v1 = v355;
              v8 = (pthread_cond_t *)(a1 + 259600);
              v239 = *(_DWORD *)v32;
              v240 = atomic_load((unsigned int *)&v3[1].__opaque[40]);
              if (!*(_DWORD *)&v3[1].__opaque[44])
              {
LABEL_334:
                if (!*(_QWORD *)(*v2 + 5392 * v240 + 5368))
                  goto LABEL_5;
              }
              do
LABEL_335:
                v252 = __ldaxr(v7);
              while (__stlxr(0xFFFFFFFF, v7));
              if (v252 == -1)
              {
                if (v239 == -1)
                  goto LABEL_5;
              }
              else if (v239 == -1)
              {
                if (v252 > *(_DWORD *)&v3[1].__opaque[44] + v240)
                  goto LABEL_5;
                v253 = v252 - v240;
                v254 = *((_DWORD *)v2 + 2);
                goto LABEL_352;
              }
              v254 = *((_DWORD *)v2 + 2);
              if (v240 <= v239)
                v255 = 0;
              else
                v255 = *((_DWORD *)v2 + 2);
              v256 = v255 + v239;
              if (v252 < v256)
                v256 = v252;
              v257 = *(_DWORD *)&v3[1].__opaque[44];
              if (v257 < v254 && v257 + v240 < v256)
                goto LABEL_5;
              v253 = v256 - v240;
              if (v256 - v240 < v254)
              {
                while (!*(_QWORD *)(*v2 + 5392 * (v256 % v254) + 5352))
                {
                  ++v253;
                  ++v256;
                  if (v254 == v253)
                    goto LABEL_465;
                }
              }
LABEL_352:
              *(_DWORD *)&v3[1].__opaque[44] = v253;
              v258 = v254 - v253;
              if (v254 <= v253)
                goto LABEL_5;
              v259 = *v2;
              if (v258 >= 2)
              {
                v260 = v253 + (v258 & 0xFFFFFFFE);
                v338 = v253 + v240;
                v339 = v258 & 0xFFFFFFFE;
                do
                {
                  *(_QWORD *)(v259 + 5392 * (v338 % v254) + 5368) = 0;
                  *(_QWORD *)(v259 + 5392 * ((v338 + 1) % v254) + 5368) = 0;
                  v338 += 2;
                  v339 -= 2;
                }
                while (v339);
                if (v258 == (v258 & 0xFFFFFFFE))
                  goto LABEL_5;
              }
              else
              {
                v260 = v253;
              }
              v340 = v254 - v260;
              v341 = v260 + v240;
              do
              {
                *(_QWORD *)(v259 + 5392 * (v341 % v254) + 5368) = 0;
                ++v341;
                --v340;
              }
              while (v340);
              goto LABEL_5;
            }
            v234 = (pthread_cond_t *)(v128 + 5200);
            pthread_mutex_lock(v3);
            v1 = v355;
            v8 = (pthread_cond_t *)(a1 + 259600);
            if (!v185 || v185 == -22)
            {
LABEL_294:
              v235 = 1;
              v185 = -22;
              goto LABEL_333;
            }
          }
          else
          {
            v2 = v357;
            if (!v184)
            {
              *(_DWORD *)(v32 + 4) = 1;
              continue;
            }
            v234 = (pthread_cond_t *)(v128 + 5200);
            pthread_mutex_lock(v3);
            v1 = v355;
            v8 = (pthread_cond_t *)(a1 + 259600);
            if (v185 == -22)
              goto LABEL_294;
          }
          v235 = -1;
LABEL_333:
          atomic_store(v235, (unsigned int *)(v128 + 5340));
          *(_QWORD *)(v128 + 5324) = 0x100000001;
          *(_DWORD *)(v128 + 5344) = 0;
          atomic_store(0xFFFFFFFE, *(unsigned int **)(v128 + 2528));
          atomic_store(0xFFFFFFFE, (unsigned int *)(*(_QWORD *)(v128 + 2528) + 4));
          dav1d_decode_frame_exit((uint64_t *)v128, v185);
          *(_DWORD *)(v128 + 2988) = 0;
          pthread_cond_signal(v234);
          v2 = v357;
          v239 = *(_DWORD *)v32;
          v240 = atomic_load((unsigned int *)&v3[1].__opaque[40]);
          if (!*(_DWORD *)&v3[1].__opaque[44])
            goto LABEL_334;
          goto LABEL_335;
        case 1:
          if (atomic_load((unsigned int *)(v128 + 5340)))
            inited = -22;
          else
            inited = dav1d_decode_frame_init_cdf(v128, v131, v132, v133, v134, v135, v136, v137);
          v1 = v355;
          v2 = v357;
          v8 = (pthread_cond_t *)(a1 + 259600);
          pthread_mutex_lock(v3);
          if (*(_DWORD *)(*(_QWORD *)(v128 + 24) + 516) && !*(_DWORD *)(v128 + 5336))
          {
            if (inited >= 0)
              v245 = 1;
            else
              v245 = 2147483646;
            atomic_store(v245, *(unsigned int **)(v128 + 2968));
          }
          if (inited)
          {
            if (inited == -22)
              v246 = 1;
            else
              v246 = -1;
            atomic_store(v246, (unsigned int *)(v128 + 5340));
            *(_QWORD *)(v128 + 5324) = 0x100000001;
            *(_DWORD *)(v128 + 5344) = 0;
            atomic_store(0xFFFFFFFE, *(unsigned int **)(v128 + 2528));
            atomic_store(0xFFFFFFFE, (unsigned int *)(*(_QWORD *)(v128 + 2528) + 4));
            goto LABEL_318;
          }
          if (dav1d_task_create_tile_sbrow(v128, 1, 0))
          {
            *(_DWORD *)(v128 + 5328) = 1;
            atomic_store(0xFFFFFFFF, (unsigned int *)(v128 + 5340));
            *(_DWORD *)(v128 + 5344) -= *(_DWORD *)(v128 + 3296)
                                      + *(_DWORD *)(*(_QWORD *)(v128 + 24) + 556)
                                      * *(_DWORD *)(*(_QWORD *)(v128 + 24) + 540);
            atomic_store(0xFFFFFFFE, *(unsigned int **)(v128 + 2528));
          }
          if (dav1d_task_create_tile_sbrow(v128, 2, 0))
          {
            *(_DWORD *)(v128 + 5324) = 1;
            atomic_store(0xFFFFFFFF, (unsigned int *)(v128 + 5340));
            *(_DWORD *)(v128 + 5344) -= *(_DWORD *)(v128 + 3296)
                                      + *(_DWORD *)(*(_QWORD *)(v128 + 24) + 556)
                                      * *(_DWORD *)(*(_QWORD *)(v128 + 24) + 540);
            atomic_store(0xFFFFFFFE, (unsigned int *)(*(_QWORD *)(v128 + 2528) + 4));
            if (*(_DWORD *)(v128 + 5328))
            {
              inited = -12;
LABEL_318:
              dav1d_decode_frame_exit((uint64_t *)v128, inited);
              *(_DWORD *)(v128 + 2988) = 0;
              pthread_cond_signal((pthread_cond_t *)(v128 + 5200));
              v2 = v357;
            }
          }
          v247 = *(_DWORD *)v32;
          v248 = atomic_load((unsigned int *)&v3[1].__opaque[40]);
          if (!*(_DWORD *)&v3[1].__opaque[44] && !*(_QWORD *)(*v2 + 5392 * v248 + 5368))
            goto LABEL_524;
          do
            v249 = __ldaxr(v7);
          while (__stlxr(0xFFFFFFFF, v7));
          if (v249 == -1)
          {
            if (v247 == -1)
              goto LABEL_524;
          }
          else if (v247 == -1)
          {
            if (v249 > *(_DWORD *)&v3[1].__opaque[44] + v248)
              goto LABEL_524;
            v250 = v249 - v248;
            v251 = *((_DWORD *)v2 + 2);
            goto LABEL_367;
          }
          v251 = *((_DWORD *)v2 + 2);
          if (v248 <= v247)
            v261 = 0;
          else
            v261 = *((_DWORD *)v2 + 2);
          v262 = v261 + v247;
          if (v249 < v262)
            v262 = v249;
          v263 = *(_DWORD *)&v3[1].__opaque[44];
          if (v263 < v251 && v263 + v248 < v262)
            goto LABEL_524;
          v250 = v262 - v248;
          if (v262 - v248 < v251)
          {
            do
            {
              if (*(_QWORD *)(*v2 + 5392 * (v262 % v251) + 5352))
                goto LABEL_367;
              ++v250;
              ++v262;
            }
            while (v251 != v250);
            *(_DWORD *)&v3[1].__opaque[44] = v251;
            goto LABEL_524;
          }
LABEL_367:
          *(_DWORD *)&v3[1].__opaque[44] = v250;
          v264 = v251 - v250;
          if (v251 > v250)
          {
            v265 = *v2;
            if (v264 >= 2)
            {
              v266 = v250 + (v264 & 0xFFFFFFFE);
              v342 = v250 + v248;
              v343 = v264 & 0xFFFFFFFE;
              do
              {
                *(_QWORD *)(v265 + 5392 * (v342 % v251) + 5368) = 0;
                *(_QWORD *)(v265 + 5392 * ((v342 + 1) % v251) + 5368) = 0;
                v342 += 2;
                v343 -= 2;
              }
              while (v343);
              if (v264 == (v264 & 0xFFFFFFFE))
                goto LABEL_524;
            }
            else
            {
              v266 = v250;
            }
            v344 = v251 - v266;
            v345 = v266 + v248;
            do
            {
              *(_QWORD *)(v265 + 5392 * (v345 % v251) + 5368) = 0;
              ++v345;
              --v344;
            }
            while (v344);
          }
LABEL_524:
          *(_DWORD *)(v128 + 5320) = 1;
          goto LABEL_5;
        case 2:
        case 4:
          v143 = v141 == 2;
          v144 = v128;
          v145 = v32 - *(_QWORD *)(v128 + 8 * v143 + 5264);
          v146 = *(_QWORD *)(v144 + 3128);
          v147 = v145 >> 5;
          *(_QWORD *)(a1 + 16) = v146 + 14592 * (int)(v145 >> 5);
          *(_DWORD *)(a1 + 28) = (_DWORD)v142 << *(_DWORD *)(v144 + 3300);
          v148 = *((_DWORD *)v357 + 2);
          if (v141 == 4)
            v149 = 2;
          else
            v149 = 1;
          if (v148 <= 1)
            v149 = 0;
          *v355 = v149;
          v150 = v140 | v139;
          if (!(v140 | v139))
          {
            v151 = v148;
            v152 = v143;
            v150 = dav1d_decode_tile_sbrow(a1);
            v147 = v145 >> 5;
            v32 = v351;
            v143 = v152;
            v3 = v361;
            v148 = v151;
          }
          v153 = (uint64_t)v145 >> 5;
          v154 = v142 + 1;
          if (v150)
            v155 = 2147483646;
          else
            v155 = v142 + 1;
          do
            v156 = __ldaxr(v138);
          while (__stlxr(v156 | v150, v138));
          v128 = v354;
          if (v154 << *(_DWORD *)(v354 + 3300) < *(_DWORD *)(v146 + 14592 * v153 + 13876))
          {
            v157 = *(_DWORD *)(v32 + 4);
            ++*(_DWORD *)(v32 + 8);
            *(_DWORD *)(v32 + 20) = 0;
            v158 = v32 - *(_QWORD *)(v354 + 8 * (v157 == 2) + 5264);
            v159 = *(_QWORD *)(v354 + 3128);
            v160 = atomic_load((unsigned int *)(v159
                                              + 14592 * (int)((unint64_t)v158 >> 5)
                                              + 4 * (v157 == 2)
                                              + 13888));
            if (v160 < *(_DWORD *)(v32 + 8))
              goto LABEL_243;
            v161 = v158 >> 5;
            v162 = v160 == 2147483646;
            do
            {
              v163 = __ldaxr(v138);
              v164 = v163 | v162;
            }
            while (__stlxr(v164, v138));
            if (v157 != 2 && v148 >= 2 && !v164)
            {
              v165 = atomic_load((unsigned int *)(v159 + 14592 * v161 + 13892));
              if (v165 <= *(_DWORD *)(v32 + 8))
                goto LABEL_243;
              v166 = v165 == 2147483646;
              do
              {
                v167 = __ldaxr(v138);
                v164 = v167 | v166;
              }
              while (__stlxr(v164, v138));
            }
            if (v148 >= 2 && !v164 && (*(_BYTE *)(*(_QWORD *)(v354 + 24) + 232) & 1) != 0)
            {
              v168 = *(_DWORD *)(v354 + 2320) == 1;
              v169 = *(_DWORD *)(v32 + 20);
              if (v169 <= 6)
              {
                v170 = *(_DWORD *)(v32 + 8);
                v171 = *(_DWORD *)(v354 + 3300);
                v172 = v169;
                v25 = v157 == 2;
                v173 = v157 != 2;
                if (!v25)
                {
                  v188 = *(_QWORD *)(v159 + 14592 * v161 + 13928)
                       + 56 * (v170 - (*(int *)(v159 + 14592 * v161 + 13872) >> v171));
                  while (1)
                  {
                    v189 = (int *)(v188 + 8 * v172);
                    v191 = *v189;
                    v190 = v189[1];
                    if (v191 == 0x80000000)
                      v192 = 0x80000000;
                    else
                      v192 = v191 + 8;
                    if (v190 == 0x80000000)
                      v193 = 0x80000000;
                    else
                      v193 = (v190 << v168) + 8;
                    if (v192 > v193)
                      v193 = v192;
                    if (v193 != 0x80000000)
                    {
                      v194 = v354 + 280 * v172;
                      v195 = *(_DWORD *)(v194 + 92);
                      if (v193 < v195)
                        v195 = v193;
                      if (v193 < 1)
                        v195 = 1;
                      v196 = atomic_load((unsigned int *)(*(_QWORD *)(v194 + 304) + 4 * v173));
                      if (v196 < v195)
                        goto LABEL_243;
                      v197 = v196 == -2;
                      do
                        v198 = __ldaxr(v138);
                      while (__stlxr(v198 | v197, v138));
                      v169 = *(_DWORD *)(v32 + 20);
                    }
                    ++v172;
                    *(_DWORD *)(v32 + 20) = ++v169;
                    if ((_DWORD)v172 == 7)
                      goto LABEL_209;
                  }
                }
                while (1)
                {
                  v174 = atomic_load((unsigned int *)(*(_QWORD *)(v354 + 280 * v172 + 304) + 4 * v173));
                  if (v174 < (v170 + 1) << (v171 + 2))
                    break;
                  v175 = v174 == -2;
                  do
                    v176 = __ldaxr(v138);
                  while (__stlxr(v176 | v175, v138));
                  ++v172;
                  ++*(_DWORD *)(v32 + 20);
                  if ((_DWORD)v172 == 7)
                    goto LABEL_209;
                }
LABEL_243:
                v199 = v3;
                v200 = v153;
                v201 = v143;
                pthread_mutex_lock(v199);
                v202 = v146 + 14592 * v200 + 4 * v201;
                v3 = v361;
                atomic_store(v155, (unsigned int *)(v202 + 13888));
                v203 = *(_DWORD *)v32;
                v204 = atomic_load((unsigned int *)&v3[1].__opaque[40]);
                v1 = v355;
                v2 = v357;
                v8 = (pthread_cond_t *)(a1 + 259600);
                if (!*(_DWORD *)&v3[1].__opaque[44] && !*(_QWORD *)(*v357 + 5392 * v204 + 5368))
                  goto LABEL_4;
                do
                  v205 = __ldaxr(v7);
                while (__stlxr(0xFFFFFFFF, v7));
                if (v205 == -1)
                {
                  if (v203 == -1)
                    goto LABEL_4;
                }
                else if (v203 == -1)
                {
                  if (v205 <= *(_DWORD *)&v361[1].__opaque[44] + v204)
                  {
                    v206 = v205 - v204;
                    v207 = *((_DWORD *)v357 + 2);
                    goto LABEL_269;
                  }
                  goto LABEL_4;
                }
                v207 = *((_DWORD *)v357 + 2);
                if (v204 <= v203)
                  v218 = 0;
                else
                  v218 = *((_DWORD *)v357 + 2);
                v219 = v218 + v203;
                if (v205 < v219)
                  v219 = v205;
                v220 = *(_DWORD *)&v361[1].__opaque[44];
                if (v220 < v207 && v220 + v204 < v219)
                  goto LABEL_4;
                v206 = v219 - v204;
                if (v219 - v204 >= v207)
                {
LABEL_269:
                  *(_DWORD *)&v361[1].__opaque[44] = v206;
                  v221 = v207 - v206;
                  if (v207 > v206)
                  {
                    v222 = *v357;
                    if (v221 >= 2)
                    {
                      v223 = v206 + (v221 & 0xFFFFFFFE);
                      v241 = v206 + v204;
                      v242 = v221 & 0xFFFFFFFE;
                      do
                      {
                        *(_QWORD *)(v222 + 5392 * (v241 % v207) + 5368) = 0;
                        *(_QWORD *)(v222 + 5392 * ((v241 + 1) % v207) + 5368) = 0;
                        v241 += 2;
                        v242 -= 2;
                      }
                      while (v242);
                      if (v221 == (v221 & 0xFFFFFFFE))
                        goto LABEL_4;
                    }
                    else
                    {
                      v223 = v206;
                    }
                    v243 = v207 - v223;
                    v244 = v223 + v204;
                    do
                    {
                      *(_QWORD *)(v222 + 5392 * (v244 % v207) + 5368) = 0;
                      ++v244;
                      --v243;
                    }
                    while (v243);
                  }
                }
                else
                {
                  do
                  {
                    if (*(_QWORD *)(*v357 + 5392 * (v219 % v207) + 5352))
                      goto LABEL_269;
                    ++v206;
                    ++v219;
                  }
                  while (v207 != v206);
                  *(_DWORD *)&v361[1].__opaque[44] = v207;
                }
LABEL_4:
                insert_tasks((_QWORD *)v354, (unsigned int *)v32, v32, 0);
                goto LABEL_5;
              }
            }
LABEL_209:
            atomic_store(v155, (unsigned int *)(v146 + 14592 * v153 + 4 * v143 + 13888));
            v177 = *(_DWORD *)v32;
            v2 = v357;
            v178 = *((_DWORD *)v357 + 2);
            v179 = atomic_load((unsigned int *)&v3[1].__opaque[40]);
            if (v179 <= v177)
              v178 = 0;
            v180 = v178 + v177;
            do
            {
              do
                v181 = __ldaxr(v7);
              while (__stlxr(v180, v7));
              v182 = v181 >= v180;
              v180 = v181;
            }
            while (!v182);
            do
              v183 = __ldaxr(v352);
            while (__stlxr(v183 | 1, v352));
            if (!v183)
              pthread_cond_signal(v362);
            continue;
          }
          v346 = v147;
          v348 = v148;
          v208 = v3;
          v209 = v153;
          v210 = v143;
          pthread_mutex_lock(v208);
          v211 = v209;
          v212 = v146 + 14592 * v209 + 4 * v210;
          v3 = v361;
          atomic_store(v155, (unsigned int *)(v212 + 13888));
          v213 = *(_DWORD *)v32;
          v214 = atomic_load((unsigned int *)&v3[1].__opaque[40]);
          v1 = v355;
          v2 = v357;
          v8 = (pthread_cond_t *)(a1 + 259600);
          if (!*(_DWORD *)&v3[1].__opaque[44] && !*(_QWORD *)(*v357 + 5392 * v214 + 5368))
            goto LABEL_488;
          do
            v215 = __ldaxr(v7);
          while (__stlxr(0xFFFFFFFF, v7));
          if (v215 == -1)
          {
            if (v213 == -1)
              goto LABEL_488;
          }
          else if (v213 == -1)
          {
            if (v215 <= *(_DWORD *)&v361[1].__opaque[44] + v214)
            {
              v216 = v215 - v214;
              v217 = *((_DWORD *)v357 + 2);
              goto LABEL_295;
            }
            goto LABEL_488;
          }
          v217 = *((_DWORD *)v357 + 2);
          if (v214 <= v213)
            v231 = 0;
          else
            v231 = *((_DWORD *)v357 + 2);
          v232 = v231 + v213;
          if (v215 < v232)
            v232 = v215;
          v233 = *(_DWORD *)&v361[1].__opaque[44];
          if (v233 >= v217 || v233 + v214 >= v232)
          {
            v216 = v232 - v214;
            if (v232 - v214 < v217)
            {
              while (!*(_QWORD *)(*v357 + 5392 * (v232 % v217) + 5352))
              {
                ++v216;
                ++v232;
                if (v217 == v216)
                {
                  *(_DWORD *)&v361[1].__opaque[44] = v217;
                  goto LABEL_488;
                }
              }
            }
LABEL_295:
            *(_DWORD *)&v361[1].__opaque[44] = v216;
            v236 = v217 - v216;
            if (v217 > v216)
            {
              v237 = *v357;
              if (v236 >= 2)
              {
                v238 = v216 + (v236 & 0xFFFFFFFE);
                v325 = v216 + v214;
                v326 = v236 & 0xFFFFFFFE;
                do
                {
                  *(_QWORD *)(v237 + 5392 * (v325 % v217) + 5368) = 0;
                  *(_QWORD *)(v237 + 5392 * ((v325 + 1) % v217) + 5368) = 0;
                  v325 += 2;
                  v326 -= 2;
                }
                while (v326);
                if (v236 == (v236 & 0xFFFFFFFE))
                  goto LABEL_488;
              }
              else
              {
                v238 = v216;
              }
              v327 = v217 - v238;
              v328 = v238 + v214;
              do
              {
                *(_QWORD *)(v237 + 5392 * (v328 % v217) + 5368) = 0;
                ++v328;
                --v327;
              }
              while (v327);
            }
          }
LABEL_488:
          v329 = v354;
          v330 = atomic_load((unsigned int *)(v354 + 5340));
          v331 = *(_QWORD *)(v329 + 24);
          v332 = v352;
          if (*(_DWORD *)(v331 + 516) && *v355 <= 1 && *(_DWORD *)(v354 + 5336) && *(_DWORD *)(v331 + 820) == v346)
          {
            if (!v330)
            {
              dav1d_cdf_thread_update(v331, *(_QWORD *)(v354 + 2960), *(_QWORD *)(v354 + 3128) + 14592 * v211);
              v332 = v352;
            }
            if (*((_DWORD *)v357 + 2) >= 2u)
            {
              if (v330)
                v333 = 2147483646;
              else
                v333 = 1;
              atomic_store(v333, *(unsigned int **)(v354 + 2968));
            }
          }
          v334 = *(_DWORD *)(v354 + 5344) - 1;
          *(_DWORD *)(v354 + 5344) = v334;
          if (!v334 && *(_DWORD *)(v354 + 5324) && (v348 < 2 || *(_DWORD *)(v354 + 5328)))
          {
            if (v330)
              v335 = -12;
            else
              v335 = 0;
            if (v330 == 1)
              v336 = -22;
            else
              v336 = v335;
            dav1d_decode_frame_exit((uint64_t *)v354, v336);
            *(_DWORD *)(v354 + 2988) = 0;
            pthread_cond_signal((pthread_cond_t *)(v354 + 5200));
            v332 = v352;
          }
          do
            v337 = __ldaxr(v332);
          while (__stlxr(v337 | 1, v332));
          if (!v337)
          {
            v121 = v362;
LABEL_151:
            pthread_cond_signal(v121);
          }
LABEL_5:
          if (!v1[38])
            goto LABEL_6;
          goto LABEL_2;
        case 3:
        case 10:
          goto LABEL_406;
        case 5:
          if (!atomic_load(v138))
            (*(void (**)(uint64_t, _QWORD))(v128 + 3176))(v128, *(unsigned int *)(v32 + 8));
          v227 = atomic_load((unsigned int *)(v128 + 4172));
          if (v227 >= *(_DWORD *)(v32 + 8))
            goto LABEL_371;
          pthread_mutex_lock(v3);
          v228 = atomic_load((unsigned int *)(v128 + 4172));
          v229 = *(_DWORD *)(v32 + 8);
          if (v228 < v229)
          {
            *(_DWORD *)(v32 + 4) = 6;
            *(_DWORD *)(v32 + 12) = 0;
            *(_DWORD *)(v32 + 16) = v229;
            v230 = (_QWORD *)v128;
LABEL_279:
            insert_tasks(v230, (unsigned int *)v32, v32, 0);
            v1 = v355;
            v2 = v357;
            v8 = (pthread_cond_t *)(a1 + 259600);
            goto LABEL_5;
          }
          pthread_mutex_unlock(v3);
LABEL_371:
          if (!atomic_load(v138))
            (*(void (**)(uint64_t, uint64_t))(v128 + 3184))(v128, v142);
          v268 = *(_QWORD *)(v128 + 24);
          if (*(_DWORD *)(v268 + 1232) || *(_DWORD *)(v268 + 1236))
          {
            if (atomic_load((unsigned int *)(v128 + 5340)))
              v270 = 2147483646;
            else
              v270 = v142 + 1;
            atomic_store(v270, (unsigned int *)(v128 + 4172));
            v271 = *(_DWORD *)v32;
            v272 = *((_DWORD *)v357 + 2);
            v273 = atomic_load((unsigned int *)&v3[1].__opaque[40]);
            if (v273 <= v271)
              v272 = 0;
            v274 = v272 + v271;
            v275 = v352;
            do
            {
              do
                v276 = __ldaxr(v7);
              while (__stlxr(v274, v7));
              v182 = v276 >= v274;
              v274 = v276;
            }
            while (!v182);
            do
              v277 = __ldaxr(v352);
            while (__stlxr(v277 | 1, v352));
            if (v277)
              goto LABEL_388;
            pthread_cond_signal(v362);
          }
          else if (*(_DWORD *)(*(_QWORD *)(v128 + 8) + 1068) || *(_DWORD *)(v128 + 5192))
          {
            v320 = (unsigned int *)(*(_QWORD *)(v128 + 4184) + 4 * ((int)v142 >> 5));
            do
              v321 = __ldaxr(v320);
            while (__stlxr(v321 | (1 << v142), v320));
            if ((_DWORD)v142)
            {
              v322 = atomic_load((unsigned int *)(*(_QWORD *)(v128 + 4184) + 4 * (((int)v142 - 1) >> 5)));
              v323 = 1 << (v142 - 1);
              v275 = v352;
              if ((v322 & v323) == 0)
              {
                pthread_mutex_lock(v3);
                v324 = atomic_load((unsigned int *)(*(_QWORD *)(v128 + 4184) + 4 * ((uint64_t)((int)v142 - 1) >> 5)));
                if ((v324 & v323) == 0)
                {
                  *(_DWORD *)(v32 + 4) = 7;
                  *(_DWORD *)(v32 + 12) = 0;
                  *(_DWORD *)(v32 + 16) = 0;
                  v230 = (_QWORD *)v128;
                  goto LABEL_279;
                }
                pthread_mutex_unlock(v3);
                v275 = v352;
              }
LABEL_388:
              if (*(_DWORD *)(*(_QWORD *)(v128 + 8) + 1068))
              {
                if (!atomic_load(v138))
                {
                  (*(void (**)(uint64_t, uint64_t))(v128 + 3192))(a1, v142);
                  v275 = v352;
                }
                v279 = *(_DWORD *)v32;
                v280 = *((_DWORD *)v357 + 2);
                v281 = atomic_load((unsigned int *)&v3[1].__opaque[40]);
                if (v281 <= v279)
                  v280 = 0;
                v282 = v280 + v279;
                do
                {
                  do
                    v283 = __ldaxr(v7);
                  while (__stlxr(v282, v7));
                  v182 = v283 >= v282;
                  v282 = v283;
                }
                while (!v182);
                do
                  v284 = __ldaxr(v275);
                while (__stlxr(v284 | 1, v275));
                if (!v284)
                  pthread_cond_signal(v362);
              }
LABEL_400:
              if (*(_DWORD *)(*(_QWORD *)(v128 + 24) + 236) != *(_DWORD *)(*(_QWORD *)(v128 + 24) + 240)
                && !atomic_load(v138))
              {
                (*(void (**)(uint64_t, uint64_t))(v128 + 3200))(v128, v142);
              }
LABEL_403:
              v286 = atomic_load(v138);
              if (!v286 && *(_DWORD *)(v128 + 5192))
                (*(void (**)(uint64_t, uint64_t))(v128 + 3208))(v128, v142);
LABEL_406:
              v347 = *((_DWORD *)v357 + 2);
              v287 = *(_DWORD *)(v128 + 3296);
              v349 = *(_DWORD *)(v128 + 3304);
              v288 = *(_DWORD *)(v32 + 4);
              if (v288 != 3)
              {
                v289 = (unsigned int *)(*(_QWORD *)(v128 + 4176) + 4 * ((int)v142 >> 5));
                do
                  v290 = __ldaxr(v289);
                while (__stlxr(v290 | (1 << v142), v289));
              }
              pthread_mutex_lock(v3);
              v291 = v287;
              if (*(_DWORD *)(v32 + 4) == 3)
              {
LABEL_421:
                v297 = 4 * v349;
                v298 = atomic_load(v138);
                v299 = v142 + 1;
                v300 = v297 * (v142 + 1);
                if ((_DWORD)v142 + 1 == v287)
                  v300 = -1;
                v2 = v357;
                if (*((_DWORD *)v357 + 2) >= 2u && *(_QWORD *)(v128 + 2272))
                {
                  if (v298)
                    v300 = -2;
                  atomic_store(v300, (unsigned int *)(*(_QWORD *)(v128 + 2528) + 4 * (*(_DWORD *)(v32 + 4) != 3)));
                }
                v1 = v355;
                v8 = (pthread_cond_t *)(a1 + 259600);
                if (v288 == 3)
                {
                  if (v298)
                    v301 = 2147483646;
                  else
                    v301 = v299;
                  *(_DWORD *)(v128 + 4168) = v301;
                  if (v299 != v291)
                  {
LABEL_433:
                    v302 = *(_DWORD *)(v128 + 5344) - 1;
                    *(_DWORD *)(v128 + 5344) = v302;
                    if (v302)
                      goto LABEL_447;
                    goto LABEL_437;
                  }
                }
                else if (v299 != v291)
                {
                  goto LABEL_433;
                }
                *(_DWORD *)(v128 + 4 * (v288 == 3) + 5324) = 1;
                v303 = *(_DWORD *)(v128 + 5344) - 1;
                *(_DWORD *)(v128 + 5344) = v303;
                if (v303)
                  goto LABEL_447;
LABEL_437:
                if (*(_DWORD *)(v128 + 5324) && (v347 < 2 || *(_DWORD *)(v128 + 5328)))
                {
                  if (v298)
                    v304 = -12;
                  else
                    v304 = 0;
                  if (v298 == 1)
                    v305 = -22;
                  else
                    v305 = v304;
                  dav1d_decode_frame_exit((uint64_t *)v128, v305);
                  *(_DWORD *)(v128 + 2988) = 0;
                  pthread_cond_signal((pthread_cond_t *)(v128 + 5200));
                }
LABEL_447:
                v306 = *(_DWORD *)v32;
                v307 = atomic_load((unsigned int *)&v3[1].__opaque[40]);
                if (!*(_DWORD *)&v3[1].__opaque[44] && !*(_QWORD *)(*v357 + 5392 * v307 + 5368))
                  goto LABEL_5;
                do
                  v308 = __ldaxr(v7);
                while (__stlxr(0xFFFFFFFF, v7));
                if (v308 == -1)
                {
                  if (v306 == -1)
                    goto LABEL_5;
                }
                else if (v306 == -1)
                {
                  if (v308 > *(_DWORD *)&v3[1].__opaque[44] + v307)
                    goto LABEL_5;
                  v309 = v308 - v307;
                  v254 = *((_DWORD *)v357 + 2);
                  goto LABEL_466;
                }
                v254 = *((_DWORD *)v357 + 2);
                if (v307 <= v306)
                  v310 = 0;
                else
                  v310 = *((_DWORD *)v357 + 2);
                v311 = v310 + v306;
                if (v308 < v311)
                  v311 = v308;
                v312 = *(_DWORD *)&v3[1].__opaque[44];
                if (v312 < v254 && v312 + v307 < v311)
                  goto LABEL_5;
                v309 = v311 - v307;
                if (v311 - v307 < v254)
                {
                  while (!*(_QWORD *)(*v357 + 5392 * (v311 % v254) + 5352))
                  {
                    ++v309;
                    ++v311;
                    if (v254 == v309)
                    {
LABEL_465:
                      *(_DWORD *)&v3[1].__opaque[44] = v254;
                      goto LABEL_5;
                    }
                  }
                }
LABEL_466:
                *(_DWORD *)&v3[1].__opaque[44] = v309;
                v313 = v254 - v309;
                if (v254 <= v309)
                  goto LABEL_5;
                v314 = *v357;
                if (v313 >= 2)
                {
                  v315 = v309 + (v313 & 0xFFFFFFFE);
                  v316 = v309 + v307;
                  v317 = v313 & 0xFFFFFFFE;
                  do
                  {
                    *(_QWORD *)(v314 + 5392 * (v316 % v254) + 5368) = 0;
                    *(_QWORD *)(v314 + 5392 * ((v316 + 1) % v254) + 5368) = 0;
                    v316 += 2;
                    v317 -= 2;
                  }
                  while (v317);
                  if (v313 == (v313 & 0xFFFFFFFE))
                    goto LABEL_5;
                }
                else
                {
                  v315 = v309;
                }
                v318 = v254 - v315;
                v319 = v315 + v307;
                do
                {
                  *(_QWORD *)(v314 + 5392 * (v319 % v254) + 5368) = 0;
                  ++v319;
                  --v318;
                }
                while (v318);
                goto LABEL_5;
              }
              if (*((_DWORD *)v357 + 2) < 2u)
              {
                v292 = 0;
              }
              else
              {
                v292 = atomic_load((unsigned int *)(*(_QWORD *)(v128 + 2528) + 4));
                v293 = v287;
                if (v292 > 0xFFFFFFFD)
                {
LABEL_420:
                  LODWORD(v142) = v293 - 1;
                  goto LABEL_421;
                }
              }
              v294 = (int)(v292 >> (*(_BYTE *)(v128 + 3300) + 7));
              while (1)
              {
                v295 = atomic_load((unsigned int *)(*(_QWORD *)(v128 + 4176) + 4 * v294));
                if (v295 != -1)
                  break;
                if (++v294 >= *(int *)(v128 + 4232))
                {
                  v296 = 0;
                  goto LABEL_419;
                }
              }
              v296 = __clz(__rbit32(~v295));
LABEL_419:
              v293 = v296 | (32 * v294);
              goto LABEL_420;
            }
          }
LABEL_387:
          v275 = v352;
          goto LABEL_388;
        case 6:
          goto LABEL_371;
        case 7:
          goto LABEL_387;
        case 8:
          goto LABEL_400;
        case 9:
          goto LABEL_403;
        default:
          goto LABEL_526;
      }
    }
  }
LABEL_2:
  pthread_mutex_unlock(v3);
  return 0;
}

_QWORD *insert_tasks_between(_QWORD *result, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  unsigned int **v8;
  uint64_t *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;

  v6 = result[656];
  if (atomic_load(*(unsigned int **)(result[390] + 792)))
    return result;
  v8 = (unsigned int **)(result + 669);
  if (a4)
    v8 = (unsigned int **)(a4 + 24);
  *v8 = a2;
  if (!a5)
    result[670] = a3;
  *(_QWORD *)(a3 + 24) = a5;
  v9 = (uint64_t *)result[390];
  v10 = *a2;
  v11 = atomic_load((unsigned int *)(v6 + 112));
  if (!*(_DWORD *)(v6 + 116) && !*(_QWORD *)(*v9 + 5392 * v11 + 5368))
    goto LABEL_35;
  v12 = (unsigned int *)(v6 + 120);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(0xFFFFFFFF, v12));
  if (v13 == -1)
  {
    if (v10 == -1)
      goto LABEL_35;
  }
  else if (v10 == -1)
  {
    if (v13 > *(_DWORD *)(v6 + 116) + v11)
      goto LABEL_35;
    v14 = v13 - v11;
    v15 = *((_DWORD *)v9 + 2);
    goto LABEL_27;
  }
  v15 = *((_DWORD *)v9 + 2);
  if (v11 <= v10)
    v16 = 0;
  else
    v16 = *((_DWORD *)v9 + 2);
  v17 = v16 + v10;
  if (v13 >= v17)
    v13 = v17;
  v18 = *(_DWORD *)(v6 + 116);
  if (v18 < v15 && v18 + v11 < v13)
    goto LABEL_35;
  v14 = v13 - v11;
  if (v13 - v11 < v15)
  {
    while (!*(_QWORD *)(*v9 + 5392 * (v13 % v15) + 5352))
    {
      ++v14;
      ++v13;
      if (v15 == v14)
      {
        *(_DWORD *)(v6 + 116) = v15;
        goto LABEL_35;
      }
    }
  }
LABEL_27:
  *(_DWORD *)(v6 + 116) = v14;
  v19 = v15 - v14;
  if (v15 <= v14)
    goto LABEL_35;
  v20 = *v9;
  if (v19 < 2)
  {
    v21 = v14;
LABEL_33:
    v24 = v15 - v21;
    v25 = v21 + v11;
    do
    {
      *(_QWORD *)(v20 + 5392 * (v25 % v15) + 5368) = 0;
      ++v25;
      --v24;
    }
    while (v24);
    goto LABEL_35;
  }
  v21 = v14 + (v19 & 0xFFFFFFFE);
  v22 = v14 + v11;
  v23 = v19 & 0xFFFFFFFE;
  do
  {
    result = (_QWORD *)(v20 + 5392 * ((v22 + 1) % v15));
    *(_QWORD *)(v20 + 5392 * (v22 % v15) + 5368) = 0;
    result[671] = 0;
    v22 += 2;
    v23 -= 2;
  }
  while (v23);
  if (v19 != (v19 & 0xFFFFFFFE))
    goto LABEL_33;
LABEL_35:
  if (a6)
  {
    v26 = (unsigned int *)(v6 + 124);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 | 1, v26));
    if (!v27)
      return (_QWORD *)pthread_cond_signal((pthread_cond_t *)(v6 + 64));
  }
  return result;
}

BOOL dav1d_get_shear_params(uint64_t a1)
{
  signed int v2;
  _BOOL8 result;
  int v4;
  int v5;
  BOOL v6;
  unsigned int v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unsigned int v33;
  __int16 v34;
  int v35;
  int v36;
  int v37;
  int v38;

  v2 = *(_DWORD *)(a1 + 12);
  result = 1;
  if (v2 >= 1)
  {
    if (v2 >= 98303)
      v4 = 98303;
    else
      v4 = v2;
    if (v4 <= 0x8000)
      v4 = 0x8000;
    v5 = v4 - 0x10000;
    if (v4 - 0x10000 < 0)
      v5 = 0x10000 - v4;
    v6 = v4 >= 0x10000;
    v7 = (v5 + 32) >> 6;
    if (!v6)
      v7 = -v7;
    v8 = (_WORD)v7 << 6;
    *(_WORD *)(a1 + 28) = v8;
    v9 = *(_DWORD *)(a1 + 16);
    v10 = *(int *)(a1 + 20);
    if (v9 >= 0x7FFF)
      v11 = 0x7FFF;
    else
      v11 = *(_DWORD *)(a1 + 16);
    v12 = __clz(v2);
    v13 = (-1 << (v12 ^ 0x1F)) + v2;
    v14 = v13 << (v12 - 23);
    v15 = (v13 + (1 << (22 - v12))) >> (23 - v12);
    if (v11 <= -32768)
      v11 = -32768;
    v16 = v11 < 0;
    if (v11 < 0)
      v11 = -v11;
    v17 = (v11 + 32) >> 6;
    if (v16)
      v17 = -v17;
    v18 = (_WORD)v17 << 6;
    *(_WORD *)(a1 + 30) = v18;
    if (v2 >= 0x200)
      v19 = v15;
    else
      v19 = v14;
    v20 = 45 - v12;
    v21 = div_lut[v19];
    v22 = (uint64_t)(1 << v20) >> 1;
    v23 = v21 * (uint64_t)v9 * v10;
    v24 = v23 < 0;
    if (v23 < 0)
      v23 = -v23;
    v25 = (v23 + v22) >> v20;
    if (!v24)
      LODWORD(v25) = -(int)v25;
    v26 = v25 + *(_DWORD *)(a1 + 24);
    if (v26 >= 98303)
      v27 = 98303;
    else
      v27 = v26;
    if (v27 <= 0x8000)
      v27 = 0x8000;
    v28 = v27 - 0x10000;
    if (v27 - 0x10000 < 0)
      v28 = 0x10000 - v27;
    v6 = v27 >= 0x10000;
    v29 = (v28 + 32) >> 6;
    if (!v6)
      v29 = -v29;
    if ((((int)v10 * (uint64_t)v21) & 0x800000000000) != 0)
      v30 = -65536 * (int)v10 * (uint64_t)v21;
    else
      v30 = ((int)v10 * (uint64_t)v21) << 16;
    v31 = (v30 + v22) >> v20;
    if ((((int)v10 * (uint64_t)v21) & 0x800000000000) != 0)
      LODWORD(v31) = -(int)v31;
    if ((int)v31 >= 0x7FFF)
      LODWORD(v31) = 0x7FFF;
    if ((int)v31 <= -32768)
      LODWORD(v31) = -32768;
    v32 = (int)v31 < 0;
    if ((int)v31 < 0)
      LODWORD(v31) = -(int)v31;
    v33 = (v31 + 32) >> 6;
    if (v32)
      v33 = -v33;
    v34 = (_WORD)v33 << 6;
    *(_WORD *)(a1 + 32) = v34;
    *(_WORD *)(a1 + 34) = (_WORD)v29 << 6;
    v35 = v8;
    if (v8 < 0)
      v35 = -v8;
    v36 = v18;
    if (v18 < 0)
      v36 = -v18;
    if (!((7 * v36 + 4 * v35) >> 16))
    {
      v37 = v34;
      if (v34 < 0)
        v37 = -v34;
      v38 = (__int16)((_WORD)v29 << 6);
      if (v38 < 0)
        v38 = (__int16)(-64 * v29);
      return ((v38 + v37) & 0x3FFFC000) != 0;
    }
  }
  return result;
}

uint64_t dav1d_set_affine_mv2d(uint64_t result, int a2, int a3, _DWORD *a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  int v9;

  v6 = 2 * a2 + 4 * a6 - 1;
  v7 = 2 * result + 4 * a5 - 1;
  v8 = (0x10000 - a4[3]) * v7 + (a3 >> 16 << 13) - a4[4] * v6;
  if (v8 >= 0x7FFFFF)
    v8 = 0x7FFFFF;
  if (v8 <= -8388608)
    v8 = -8388608;
  v9 = (0x10000 - a4[6]) * v6 - a4[5] * v7 + ((__int16)a3 << 13);
  if (v9 >= 0x7FFFFF)
    v9 = 0x7FFFFF;
  if (v9 <= -8388608)
    v9 = -8388608;
  a4[1] = v8;
  a4[2] = v9;
  return result;
}

uint64_t dav1d_find_affine_int(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int32x2_t *a6, int a7, int a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _DWORD *v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  char v42;
  BOOL v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  int32x2_t v60;
  int32x2_t v61;
  int v62;

  v8 = 2 * a4 - 1;
  v9 = 2 * a3 - 1;
  v10 = a5 << 16;
  v11 = a5 >> 16;
  if ((int)a2 < 1)
  {
    v18 = 0;
    v17 = 0;
    v16 = 0;
    v15 = 0;
    v14 = 0;
    v13 = 0;
    v12 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = (_DWORD *)(a1 + 8);
    a2 = a2;
    do
    {
      v20 = *v19 - (v11 + 8 * v9);
      v21 = *(v19 - 2) - 8 * v9;
      v22 = v21 - v20;
      if (v21 - v20 < 0)
        v22 = v20 - v21;
      if (v22 <= 0xFF)
      {
        v23 = v19[1] - (8 * v8 + (__int16)a5);
        v24 = *(v19 - 1) - 8 * v8;
        v25 = v24 - v23;
        if (v24 - v23 < 0)
          v25 = v23 - v24;
        if (v25 <= 0xFF)
        {
          v17 += 2 * v21 + ((v21 * v21) >> 2) + 8;
          v16 += 2 * v24 + ((v24 * v24) >> 2) + 8;
          v15 += v20 + v21 + ((v21 * v20) >> 2) + 8;
          v14 += v24 + v20 + ((v24 * v20) >> 2) + 4;
          v12 += v23 + v24 + ((v24 * v23) >> 2) + 8;
          v18 += v21 + 4 + v24 + ((v24 * v21) >> 2);
          v13 += v21 + 4 + v23 + ((v21 * v23) >> 2);
        }
      }
      v19 += 4;
      --a2;
    }
    while (a2);
  }
  v26 = v16 * (uint64_t)v17;
  v27 = v18 * (uint64_t)v18;
  v28 = v26 - v27;
  if (v26 == v27)
    return 1;
  result = 0;
  v30 = v8 + 4 * a8;
  v31 = v9 + 4 * a7;
  v32 = v17;
  v33 = v16;
  v34 = v18;
  if (v28 >= 0)
    v35 = v28;
  else
    v35 = -v28;
  v36 = __clz(v35);
  v37 = (-1 << ~(_BYTE)v36) + v35;
  v38 = v37 << (v36 - 55);
  v39 = (uint64_t)(v37 + (1 << (54 - v36))) >> (55 - v36);
  if (v36 > 0x36)
    v39 = v38;
  v40 = div_lut[v39];
  if (v28 >= 0)
    v41 = v40;
  else
    v41 = -v40;
  v42 = 61 - v36;
  if (v36 > 0x3D)
    v42 = 0;
  v43 = v36 >= 0x3D;
  v44 = v36 - 61;
  if (!v43)
    v44 = 0;
  v45 = v41 << v44;
  v46 = (v33 * (uint64_t)v15 - v34 * (uint64_t)v14) * (int)v45;
  v47 = v46 < 0;
  if (v46 < 0)
    v46 = -v46;
  v48 = (unint64_t)(1 << v42) >> 1;
  v49 = (v46 + v48) >> v42;
  if (v47)
    LODWORD(v49) = -(int)v49;
  v50 = (v32 * (uint64_t)v14 - v34 * (uint64_t)v15) * v45;
  v51 = v50 < 0;
  if (v50 < 0)
    v50 = -v50;
  v52 = (v50 + v48) >> v42;
  if (v51)
    LODWORD(v52) = -(int)v52;
  if ((int)v52 >= 0x1FFF)
    LODWORD(v52) = 0x1FFF;
  if ((int)v52 <= -8191)
    LODWORD(v52) = -8191;
  v53 = (v33 * (uint64_t)v13 - v34 * (uint64_t)v12) * v45;
  v54 = v53 < 0;
  if (v53 < 0)
    v53 = -v53;
  v55 = (v53 + v48) >> v42;
  if (v54)
    LODWORD(v55) = -(int)v55;
  if ((int)v55 >= 0x1FFF)
    v56 = 0x1FFF;
  else
    v56 = v55;
  if (v56 <= -8191)
    v56 = -8191;
  a6[2].i32[0] = v52;
  a6[2].i32[1] = v56;
  v57 = (v32 * (uint64_t)v12 - v34 * (uint64_t)v13) * v45;
  v58 = v57 < 0;
  if (v57 < 0)
    v57 = -v57;
  v59 = (v57 + v48) >> v42;
  if (v58)
    LODWORD(v59) = -(int)v59;
  if ((int)v59 >= 73727)
    LODWORD(v59) = 73727;
  if ((int)v59 <= 57345)
    LODWORD(v59) = 57345;
  a6[3].i32[0] = v59;
  v60.i32[0] = (0x10000 - v59) * v30 - v56 * v31 + (v10 >> 3);
  v60.i32[1] = v49;
  v61 = vmax_s32(vmin_s32(v60, (int32x2_t)0x11FFF007FFFFFLL), (int32x2_t)0xE001FF800000);
  v62 = (0x10000 - v61.i32[1]) * v31 - v52 * v30 + (v11 << 13);
  if (v62 >= 0x7FFFFF)
    v62 = 0x7FFFFF;
  if (v62 <= -8388608)
    v62 = -8388608;
  a6->i32[1] = v62;
  a6[1] = v61;
  return result;
}

void *insert_border(char *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int v7;
  void *result;

  if (a3 >= 5)
    bzero(a1, (a3 - 4));
  if (a3 <= 4)
    v6 = 4;
  else
    v6 = a3;
  v7 = 64 - a3;
  if (64 - a3 >= 8)
    v7 = 8;
  result = memcpy(&a1[v6 - 4], (const void *)(a2 + ((4 - a3) & ~((4 - a3) >> 31))), v7);
  if (a3 <= 59)
    return memset(&a1[a3 + 4], 64, (60 - a3));
  return result;
}

uint64_t dav1d_cdef_brow_16bpc(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  uint64_t v7;
  int v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  _BOOL4 v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  const void *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  _BOOL4 v66;
  _BOOL4 v67;
  uint64_t *v68;
  uint64_t *v69;
  _QWORD *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  signed int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t (*v119)(uint64_t, _QWORD, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, _DWORD);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t *v130;
  int *v133;
  _BOOL4 v134;
  signed int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t *v153;
  uint64_t v154;
  int v155;
  int v156;
  int v157;
  int v158;
  char *v159;
  _BOOL4 v160;
  _QWORD *v162;
  _QWORD *v163;
  uint64_t v164;
  int v165;
  void (**v166)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t, _DWORD);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  int v176;
  int v177;
  unsigned int v178;
  uint64_t *v179;
  _BOOL4 v180;
  uint64_t v181;
  uint64_t *v182;
  int v183;
  uint64_t v184;
  _BOOL4 v185;
  int v186;
  int v187;
  int v188;
  unsigned int v189;
  int v190;
  int v191;
  unsigned int v192;
  uint64_t v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD v198[27];

  v198[25] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(result + 8);
  v8 = *(_DWORD *)(v7 + 2056);
  v171 = v8 != 3;
  v183 = v8;
  v9 = v8 == 2;
  if (a4 < a5)
  {
    v10 = 0;
    v159 = (char *)&dav1d_cdef_brow_16bpc_uv_dirs + 8 * v9;
    v11 = *(_QWORD *)(v7 + 2032);
    v12 = *(uint64_t *)(v7 + 2040) >> 1;
    v13 = v11 >> 1;
    v14 = *(_DWORD **)(v7 + 24);
    v15 = a4;
    v16 = *(_DWORD *)(*(_QWORD *)(v7 + 3120) + 24);
    if (a4 <= 0)
      v17 = 8;
    else
      v17 = 12;
    v18 = *(_DWORD *)(*(_QWORD *)(v7 + 8) + 1012);
    v19 = a6 != 0;
    v20 = 6;
    v21 = v14[59];
    v22 = v14[60];
    if (v183 == 1)
      v20 = 2;
    v126 = v20;
    v23 = 7;
    if (v183 == 1)
      v23 = 3;
    v125 = v23;
    v24 = 4 * a7;
    v25 = (4 << v18) * a7;
    if (v16 < 2)
      v19 = 1;
    v134 = v19;
    if (v16 >= 2)
      v26 = a7;
    else
      v26 = 0;
    v27 = (4 * a7) | 2;
    v146 = v13 * v24;
    if (v16 >= 2)
      v28 = v13 * v24;
    else
      v28 = 0;
    v29 = v12 * 8 * a7;
    v151 = v29;
    if (v16 < 2)
      v29 = 0;
    v168 = v29;
    v169 = v28;
    v158 = v14[59];
    v157 = v14[60];
    if (v21 == v22)
      v30 = 5096;
    else
      v30 = 5072;
    v31 = (uint64_t *)(v7 + 5096);
    if (v21 != v22)
      v31 = (uint64_t *)(v7 + 5072);
    v130 = v31;
    v32 = 5080;
    if (v21 == v22)
      v32 = 5104;
    v149 = v32;
    v150 = v30;
    v33 = (_QWORD *)(v7 + 5104);
    if (v21 != v22)
      v33 = (_QWORD *)(v7 + 5080);
    v129 = v33;
    v128 = v13 * 4 * v26;
    v34 = (v25 + 4 * v18) | 2;
    v35 = v24 - 4;
    v36 = v25 - 4;
    v37 = v13 * v35;
    if (v21 == v22)
      v35 = v36;
    v144 = v13 * v36;
    v145 = v37;
    v141 = v13 * v34;
    v142 = v13 * v27;
    if (v21 == v22)
      v38 = v34;
    else
      v38 = v27;
    v39 = v12 * 8 * v26;
    v167 = v12 * (8u >> (v183 == 1));
    v147 = v12 * v38;
    v148 = v12 * v35;
    v138 = a2[1];
    v139 = *a2;
    v137 = a2[2];
    v156 = 2 * *(_DWORD *)(v7 + 3288);
    v40 = a5;
    v140 = *(_DWORD *)(v7 + 2060) - 8;
    v184 = *(_QWORD *)(v7 + 3144);
    v166 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t, _DWORD))(v184 + 8 * (3 - v183) + 3304);
    v154 = 2 * (0x40u >> v171);
    v41 = 2 * (8u >> v171);
    v127 = 2 * v39;
    v165 = v14[325] + v140 - 1;
    v181 = 4 * v11;
    v182 = (uint64_t *)(v7 + 2032);
    v133 = (int *)(result + 259568);
    v42 = *(_DWORD *)(result + 259568);
    v170 = *(_DWORD *)(*(_QWORD *)(v7 + 3120) + 24);
    v193 = *(_QWORD *)(result + 8);
    do
    {
      if ((signed int)(v15 + 2) >= *(_DWORD *)(v7 + 3284))
        v44 = v17 & 0xFFFFFFF7;
      else
        v44 = v17;
      v136 = v15 + 2;
      v45 = v134;
      if ((int)(v15 + 2) < v40)
        v45 = 1;
      if (v45 == 1 && (v44 & 8) != 0)
      {
        v47 = (_QWORD *)(v7 + 24 * (v42 == 0));
        v48 = (char *)(v47[627] + 2 * v128);
        v49 = v47[628];
        v50 = v47[629];
        v51 = v11 >> 1;
        if (v11 < 0)
        {
          result = (uint64_t)memcpy(&v48[2 * v51], (const void *)(v139 + 14 * v51), -4 * v51);
          v40 = a5;
          if (!v183)
            goto LABEL_52;
        }
        else
        {
          result = (uint64_t)memcpy(v48, (const void *)(v139 + 12 * v51), 2 * v11);
          v40 = a5;
          if (!v183)
            goto LABEL_52;
        }
        v52 = (char *)(v49 + v127);
        v53 = (char *)(v50 + v127);
        v54 = *(_QWORD *)(v7 + 2040);
        v55 = v54 >> 1;
        if (v54 < 0)
        {
          v60 = 2 * v55;
          v61 = 2 * v55 * v125;
          v57 = -4 * v55;
          memcpy(&v52[2 * v55], (const void *)(v138 + v61), -4 * v55);
          v59 = &v53[v60];
          v58 = (const void *)(v137 + v61);
        }
        else
        {
          v56 = 2 * v55 * v126;
          v57 = 2 * v54;
          memcpy(v52, (const void *)(v138 + v56), 2 * v54);
          v58 = (const void *)(v137 + v56);
          v59 = v53;
        }
        result = (uint64_t)memcpy(v59, v58, v57);
        v40 = a5;
        v7 = v193;
      }
LABEL_52:
      v62 = v44 & 0xFFFFFFFC | 2;
      if (v156 >= 1)
      {
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v143 = (v15 >> 1) & 0xF;
        v66 = v15 == a4 && a6 != 0;
        v180 = v66;
        v155 = (v15 >> 3) & 2;
        v67 = v136 < v40 || a6 != 0;
        v68 = (uint64_t *)(v7 + 24 * v42);
        v179 = v68 + 627;
        v163 = v68 + 628;
        v162 = v68 + 629;
        v160 = v67;
        v69 = v130;
        if (v67)
          v69 = &v197;
        v153 = v69;
        v70 = v129;
        if (v67)
          v70 = v198;
        v152 = v70;
        v71 = 1;
        v73 = v137;
        v72 = v138;
        v74 = v139;
        do
        {
          v75 = *(char *)(a3 + 1348 * (v64 >> 1) + (v64 & 1 | v155) + 1280);
          v176 = v63;
          v175 = v64;
          v173 = v72;
          v174 = v73;
          v172 = v74;
          if (v75 == -1
            || (v76 = *(_QWORD *)(v7 + 24) + 4 * v75,
                v77 = *(_DWORD *)(v76 + 1308),
                v78 = *(_DWORD *)(v76 + 1340),
                !(v77 | v78)))
          {
            v71 = 1;
          }
          else
          {
            v192 = *(_DWORD *)(a3 + 1348 * (v64 >> 1) + 4 * v143 + 1284);
            if ((*(_DWORD *)(v76 + 1308) & 3) == 3)
              v79 = 4;
            else
              v79 = *(_DWORD *)(v76 + 1308) & 3;
            if ((*(_DWORD *)(v76 + 1340) & 3) == 3)
              v80 = 4;
            else
              v80 = *(_DWORD *)(v76 + 1340) & 3;
            v196 = v74;
            v197 = v72;
            v198[0] = v73;
            v81 = 16 * v64;
            LODWORD(result) = v81 + 16;
            v82 = *(_DWORD *)(v7 + 3280);
            v191 = v81 + 16;
            if (v81 + 16 >= v82)
              result = v82;
            else
              result = result;
            if (v81 < (int)result)
            {
              v83 = 4 * v63;
              result = (v77 >> 2 << v140);
              v186 = v79 << v140;
              v187 = v78;
              v178 = v80 << v140;
              v190 = result;
              v189 = v78 >> 2 << v140;
              v84 = (v77 != 0) | (2 * (v78 != 0));
              v185 = (result | v189) != 0;
              v85 = v63;
              v177 = v84;
              while (1)
              {
                v87 = v85 + 2;
                v88 = v62 & 0xFFFFFFFD;
                if (v82 > v85 + 2)
                  v88 = v62;
                if (((v192 >> (v85 & 0x1E)) & 3) != 0)
                  break;
                v71 = 1;
LABEL_81:
                v74 += 16;
                v72 += v41;
                v196 = v74;
                v197 = v72;
                v73 += v41;
                v198[0] = v73;
                v62 = v88 | 1;
                if (v191 >= v82)
                  v86 = v82;
                else
                  v86 = v191;
                v83 += 8;
                v85 = v87;
                if (v86 <= v87)
                  goto LABEL_65;
              }
              if (v71)
                v89 = 3;
              else
                v89 = ~v65;
              v194 = v88;
              if ((v89 & v84) != 0 && (v88 & 1) != 0)
              {
                result = (uint64_t)backup2x8(&v198[12 * v10 + 1], &v196, v182, 0, v183, v89 & v84);
                v88 = v194;
              }
              if ((v88 & 2) != 0)
              {
                result = (uint64_t)backup2x8(&v198[12 * (v10 == 0) + 1], &v196, v182, 8u, v183, v84);
                v88 = v194;
                v90 = 0;
                v195 = 0;
                if (!v185)
                  goto LABEL_103;
LABEL_96:
                result = (*(uint64_t (**)(uint64_t, _QWORD, unsigned int *, _QWORD))(v184 + 3296))(v74, *(_QWORD *)(v7 + 2032), &v195, *(unsigned int *)(v7 + 4156));
                v88 = v194;
                v90 = result;
                if (v16 > 1)
                  goto LABEL_97;
LABEL_104:
                v95 = *v179;
                v91 = v186;
              }
              else
              {
                v90 = 0;
                v195 = 0;
                if (v185)
                  goto LABEL_96;
LABEL_103:
                if (v16 <= 1)
                  goto LABEL_104;
LABEL_97:
                v91 = v186;
                if (v180)
                {
                  v92 = v83 & 0xFFFFFFF8;
                  if (v158 == v157)
                  {
                    v93 = *(_QWORD *)(v7 + 5088) + 2 * (v92 + v144);
                    v94 = v196 + 2 * v181;
                    if (!v190)
                      goto LABEL_121;
                  }
                  else
                  {
                    v93 = *(_QWORD *)(v7 + 5064) + 2 * (v92 + v145);
                    v94 = v196 + 2 * v181;
                    if (!v190)
                      goto LABEL_121;
                  }
LABEL_106:
                  if (v195)
                  {
                    if (v195 < 0x40)
                    {
                      if (((4 * v190 + 8) >> 4) | v91)
                        goto LABEL_122;
LABEL_123:
                      if (v187)
                      {
                        v98 = v16;
                        if (v189)
                          v99 = v159[v90];
                        else
                          v99 = 0;
                        v100 = v83 >> v171;
                        v101 = v168 + v100;
                        v188 = v87;
                        if (v98 > 1)
                        {
                          if (v180)
                          {
                            v109 = 2 * (v148 + v100);
                            v110 = *(_QWORD *)(v7 + v150) + v109;
                            v72 = v197;
                            v111 = *(_QWORD *)(v7 + 2040);
                            v112 = v10;
                            v113 = &v198[12 * v10 + 1];
                            v114 = v165;
                            v115 = v189;
                            v116 = v178;
                            (*v166)(v197, v111, (uint64_t)(v113 + 4), v110, v197 + 2 * v167, v189, v178, v99, __PAIR64__(v88, v165), *(_DWORD *)(v193 + 4156));
                            v117 = *(_QWORD *)(v193 + v149) + v109;
                            v73 = v198[0];
                            v118 = v198[0] + 2 * v167;
                            v119 = (uint64_t (*)(uint64_t, _QWORD, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, _DWORD))*v166;
                          }
                          else
                          {
                            v120 = v151 + v100;
                            v121 = v147 + v100;
                            if (v160)
                              v121 = v167;
                            else
                              v101 = v120;
                            v164 = 2 * v101;
                            v122 = 2 * v121;
                            v72 = v197;
                            v123 = *(_QWORD *)(v7 + 2040);
                            v112 = v10;
                            v113 = &v198[12 * v10 + 1];
                            v114 = v165;
                            v115 = v189;
                            v116 = v178;
                            (*v166)(v197, v123, (uint64_t)(v113 + 4), *v163 + 2 * v101, *v153 + 2 * v121, v189, v178, v99, __PAIR64__(v88, v165), *(_DWORD *)(v193 + 4156));
                            v117 = *v162 + v164;
                            v118 = *v152 + v122;
                            v119 = (uint64_t (*)(uint64_t, _QWORD, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, _DWORD))*v166;
                            v73 = v198[0];
                          }
                          v124 = v113 + 8;
                          v10 = v112;
                          v7 = v193;
                          result = v119(v73, *(_QWORD *)(v193 + 2040), v124, v117, v118, v115, v116, v99, __PAIR64__(v194, v114), *(_DWORD *)(v193 + 4156));
                          v88 = v194;
                          v16 = v170;
                          v41 = 2 * (8u >> v171);
                          v84 = v177;
                          v87 = v188;
                        }
                        else
                        {
                          v102 = 2 * v101;
                          v72 = v197;
                          v103 = *(_QWORD *)(v7 + 2040);
                          v104 = v10;
                          v105 = &v198[12 * v10 + 1];
                          (*v166)(v197, v103, (uint64_t)(v105 + 4), *v163 + 2 * v101, v197 + 2 * v167, v189, v178, v99, __PAIR64__(v88, v165), *(_DWORD *)(v193 + 4156));
                          v106 = *v162 + v102;
                          v73 = v198[0];
                          v41 = 2 * (8u >> v171);
                          v107 = v105 + 8;
                          v10 = v104;
                          v7 = v193;
                          v84 = v177;
                          v108 = v99;
                          v16 = v170;
                          result = ((uint64_t (*)(_QWORD, _QWORD, _QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t, _DWORD))*v166)(v198[0], *(_QWORD *)(v193 + 2040), v107, v106, v198[0] + 2 * v167, v189, v178, v108, __PAIR64__(v194, v165), *(_DWORD *)(v193 + 4156));
                          v88 = v194;
                        }
                      }
                      else
                      {
                        v72 = v197;
                        v73 = v198[0];
                      }
                      v71 = 0;
                      v10 ^= 1uLL;
                      v74 = v196;
                      v82 = *(_DWORD *)(v7 + 3280);
                      v65 = v84;
                      goto LABEL_81;
                    }
                    v97 = __clz(v195 >> 6) ^ 0x1F;
                    if (v97 >= 12)
                      v97 = 12;
                    if (!((((v97 + 4) * v190 + 8) >> 4) | v91))
                      goto LABEL_123;
                  }
                  else if (!v91)
                  {
                    goto LABEL_123;
                  }
LABEL_122:
                  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *, uint64_t, uint64_t))(v184 + 3304))(v196, *(_QWORD *)(v7 + 2032), &v198[12 * v10 + 1], v93, v94);
                  v88 = v194;
                  goto LABEL_123;
                }
                v95 = *v179;
                if (!v160)
                {
                  v96 = v83 & 0xFFFFFFF8;
                  v93 = v95 + 2 * (v96 + v146);
                  if (v158 == v157)
                  {
                    v94 = *(_QWORD *)(v7 + 5088) + 2 * (v96 + v141);
                    if (v190)
                      goto LABEL_106;
                  }
                  else
                  {
                    v94 = *(_QWORD *)(v7 + 5064) + 2 * (v96 + v142);
                    if (v190)
                      goto LABEL_106;
                  }
LABEL_121:
                  if (!v91)
                    goto LABEL_123;
                  goto LABEL_122;
                }
              }
              v93 = v95 + 2 * ((v83 & 0xFFFFFFF8) + v169);
              v94 = v196 + 2 * v181;
              if (!v190)
                goto LABEL_121;
              goto LABEL_106;
            }
          }
LABEL_65:
          v74 = v172 + 128;
          v72 = v173 + v154;
          v73 = v174 + v154;
          v64 = v175 + 1;
          v62 |= 1u;
          v63 = v176 + 16;
        }
        while (v175 + 1 != v156);
      }
      v11 = *(_QWORD *)(v7 + 2032);
      v139 += 8 * v11;
      v43 = 2 * ((4 * *(_QWORD *)(v7 + 2040)) >> (v183 == 1));
      v138 += v43;
      v137 += v43;
      v42 = *v133 ^ 1;
      *v133 = v42;
      v17 = v62 | 4;
      v40 = a5;
      v15 = v136;
    }
    while (v136 < a5);
  }
  return result;
}

_DWORD *backup2x8(_DWORD *result, _QWORD *a2, uint64_t *a3, unsigned int a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;

  if ((a6 & 1) != 0)
  {
    v6 = a4 - 2;
    *result = *(_DWORD *)(*a2 + 2 * v6);
    v7 = v6 + (*a3 >> 1);
    result[1] = *(_DWORD *)(*a2 + 2 * v7);
    v8 = v7 + (*a3 >> 1);
    result[2] = *(_DWORD *)(*a2 + 2 * v8);
    v9 = v8 + (*a3 >> 1);
    result[3] = *(_DWORD *)(*a2 + 2 * v9);
    v10 = v9 + (*a3 >> 1);
    result[4] = *(_DWORD *)(*a2 + 2 * v10);
    v11 = v10 + (*a3 >> 1);
    result[5] = *(_DWORD *)(*a2 + 2 * v11);
    v12 = v11 + (*a3 >> 1);
    result[6] = *(_DWORD *)(*a2 + 2 * v12);
    result[7] = *(_DWORD *)(*a2 + 2 * (v12 + ((unint64_t)*a3 >> 1)));
  }
  if (a5 && (a6 & 2) != 0)
  {
    v13 = 0;
    v14 = 8u >> (a5 == 1);
    v15 = result + 16;
    do
    {
      v16 = 2 * ((a4 >> (a5 != 3)) - 2 + v13);
      *(v15 - 8) = *(_DWORD *)(a2[1] + v16);
      *v15++ = *(_DWORD *)(a2[2] + v16);
      v13 += a3[1] >> 1;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t cdef_find_dir_c(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  __int32 *v10;
  __int32 *v11;
  __int32 v12;
  __int32 v13;
  __int32 v14;
  __int32 v15;
  uint64_t v16;
  int v17;
  __int32 v18;
  __int32 v19;
  __int32 v20;
  __int32 *v21;
  __int32 v22;
  __int32 v23;
  __int32 v24;
  uint64_t v25;
  int v26;
  int v27;
  __int32 v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;
  __int32 v32;
  uint64_t v33;
  int v34;
  __int32 v35;
  __int32 v36;
  __int32 v37;
  __int32 v38;
  __int32 v39;
  __int32 v40;
  __int32 v41;
  uint64_t v42;
  __int32 v43;
  __int32 v44;
  __int32 v45;
  uint64_t v46;
  int v47;
  int8x16_t v48;
  int8x16_t v49;
  int32x4_t v50;
  int32x2_t v51;
  unsigned __int32 v52;
  unsigned __int32 v53;
  unsigned __int32 v54;
  unsigned __int32 v55;
  unsigned __int32 v56;
  unsigned int v57;
  unsigned __int32 v58;
  unsigned __int32 v59;
  unsigned int v60;
  uint64_t result;
  _DWORD v63[8];
  int32x4_t v64[2];
  __int128 v65;
  int32x4_t v66[5];
  __int128 v67;
  int32x4_t v68;
  __int128 v69;
  int32x4_t v70[5];
  int32x4_t v71[3];
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  __int128 v75;
  uint64_t v76;

  v4 = 0;
  v5 = 0;
  v76 = *MEMORY[0x1E0C80C00];
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v6 = 24 - __clz(a4);
  memset(v71, 0, 40);
  v69 = 0u;
  memset(v70, 0, sizeof(v70));
  v67 = 0u;
  v68 = 0u;
  v7 = (unsigned __int16 *)(a1 + 8);
  v65 = 0u;
  memset(v66, 0, sizeof(v66));
  memset(v64, 0, sizeof(v64));
  do
  {
    v8 = v5 >> 1;
    v9 = (*(v7 - 4) >> v6) - 128;
    v10 = &v70[0].i32[v4];
    v11 = &v64[0].i32[v4];
    v12 = v70[0].i32[v4 + 1];
    v13 = v9 + v70[0].i32[v4];
    v14 = v72.i32[v4];
    v15 = v66[0].i32[v4 + 2];
    *v11 = v64[0].i32[v4] + v9;
    v11[14] = v15 + v9;
    v16 = 4 * (3 - v8);
    v17 = *(__int32 *)((char *)&v66[2].i32[2] + v16);
    v19 = v71[0].i32[v4 + 1];
    v18 = v71[0].i32[v4 + 2];
    v72.i32[v4] = v14 + v9;
    v20 = v18 + v9;
    *(__int32 *)((char *)&v66[2].i32[2] + v16) = v17 + v9;
    v21 = &v64[0].i32[v8];
    LODWORD(v16) = v74.i32[0];
    v21[33] += v9;
    v22 = v16 + v9;
    LODWORD(v16) = (*(v7 - 3) >> v6) - 128;
    ++v5;
    *v10 = v13;
    v10[1] = v16 + v12;
    v74.i32[0] = v22;
    v23 = v72.i32[v4] + v16;
    *v11 = v64[0].i32[v4] + v16;
    v24 = v66[0].i32[v4 + 2] + v16;
    v10[21] = v19 + v16;
    v10[22] = v20;
    v11[14] = v24;
    v25 = 4 * (4 - v8);
    v26 = *(__int32 *)((char *)&v66[2].i32[2] + v25);
    v72.i32[v4] = v23;
    *(__int32 *)((char *)&v66[2].i32[2] + v25) = v26 + v16;
    LODWORD(v25) = v74.i32[1] + v16;
    v21[34] += v16;
    v27 = (*(v7 - 2) >> v6) - 128;
    v74.i32[1] = v25;
    v28 = v70[0].i32[v4 + 3];
    LODWORD(v25) = v27 + v70[0].i32[v4 + 2];
    v11[1] = v64[0].i32[v4 + 1] + v27;
    LODWORD(v16) = v72.i32[v4];
    v11[13] = v66[0].i32[v4 + 1] + v27;
    v29 = v70[4].i32[v4 + 3];
    v30 = v71[0].i32[v4] + v27;
    v66[2].i32[5 - v8 + 2] += v27;
    v72.i32[v4] = v16 + v27;
    LODWORD(v16) = v74.i32[2];
    v21[35] += v27;
    v31 = v16 + v27;
    LODWORD(v16) = (*(v7 - 1) >> v6) - 128;
    v10[2] = v25;
    v10[3] = v16 + v28;
    v74.i32[2] = v31;
    v32 = v72.i32[v4] + v16;
    v11[1] = v64[0].i32[v4 + 1] + v16;
    LODWORD(v25) = v66[0].i32[v4 + 1] + v16;
    v10[19] = v29 + v16;
    v10[20] = v30;
    v11[13] = v25;
    v33 = 4 * (6 - v8);
    LODWORD(v25) = *(__int32 *)((char *)&v66[2].i32[2] + v33);
    v72.i32[v4] = v32;
    *(__int32 *)((char *)&v66[2].i32[2] + v33) = v25 + v16;
    LODWORD(v33) = v74.i32[3] + v16;
    v21[36] += v16;
    v34 = (*v7 >> v6) - 128;
    v74.i32[3] = v33;
    v35 = v70[1].i32[v4 + 1];
    LODWORD(v25) = v34 + v70[1].i32[v4];
    v11[2] = v64[0].i32[v4 + 2] + v34;
    LODWORD(v33) = v72.i32[v4];
    v11[12] = v66[0].i32[v4] + v34;
    v36 = v70[4].i32[v4 + 1];
    v37 = v70[4].i32[v4 + 2] + v34;
    v66[2].i32[7 - v8 + 2] += v34;
    v72.i32[v4] = v33 + v34;
    LODWORD(v75) = v75 + v34;
    v21[37] += v34;
    LODWORD(v33) = (v7[1] >> v6) - 128;
    v38 = v33 + v35;
    LODWORD(v16) = v72.i32[v4] + v33;
    v39 = v66[0].i32[v4] + v33;
    v11[2] = v64[0].i32[v4 + 2] + v33;
    v11[12] = v39;
    v40 = v36 + v33;
    v72.i32[v4] = v16;
    v66[2].i32[8 - v8 + 2] += v33;
    LODWORD(v16) = DWORD1(v75) + v33;
    v21[38] += v33;
    LODWORD(v33) = v7[2];
    DWORD1(v75) = v16;
    LODWORD(v33) = (v33 >> v6) - 128;
    v41 = v70[1].i32[v4 + 3];
    LODWORD(v16) = v33 + v70[1].i32[v4 + 2];
    v11[3] = v64[0].i32[v4 + 3] + v33;
    v11[11] = *(_DWORD *)((char *)&v65 + v4 * 4 + 12) + v33;
    v42 = 4 * (9 - v8);
    v43 = *(__int32 *)((char *)&v66[2].i32[2] + v42) + v33;
    v10[4] = v25;
    v10[5] = v38;
    *(__int32 *)((char *)&v66[2].i32[2] + v42) = v43;
    LODWORD(v42) = v72.i32[v4];
    v10[17] = v40;
    v10[18] = v37;
    v44 = v70[3].i32[v4 + 3];
    LODWORD(v25) = v70[4].i32[v4] + v33;
    v72.i32[v4] = v42 + v33;
    LODWORD(v42) = DWORD2(v75);
    v21[39] += v33;
    LODWORD(v33) = v42 + v33;
    LODWORD(v42) = (v7[3] >> v6) - 128;
    v10[6] = v16;
    v10[7] = v42 + v41;
    DWORD2(v75) = v33;
    v45 = v72.i32[v4] + v42;
    v11[3] = v64[0].i32[v4 + 3] + v42;
    v10[15] = v44 + v42;
    v10[16] = v25;
    v11[11] = *(_DWORD *)((char *)&v65 + v4 * 4 + 12) + v42;
    v46 = 10 - v8;
    LODWORD(v8) = v66[2].i32[v46 + 2];
    v72.i32[v4] = v45;
    v66[2].i32[v46 + 2] = v8 + v42;
    v47 = HIDWORD(v75) + v42;
    HIDWORD(v75) += v42;
    v21[40] += v42;
    v7 = (unsigned __int16 *)((char *)v7 + (a2 & 0xFFFFFFFFFFFFFFFELL));
    ++v4;
  }
  while (v5 != 8);
  v48 = (int8x16_t)vrev64q_s32(vmulq_s32(*(int32x4_t *)((char *)&v70[2] + 12), *(int32x4_t *)((char *)&v70[2] + 12)));
  v49 = (int8x16_t)vrev64q_s32(vmulq_s32(*(int32x4_t *)((char *)&v71[1] + 8), *(int32x4_t *)((char *)&v71[1] + 8)));
  v50 = vmulq_s32(vmlaq_s32((int32x4_t)vextq_s8(v49, v49, 8uLL), *(int32x4_t *)((char *)&v70[3] + 12), *(int32x4_t *)((char *)&v70[3] + 12)), (int32x4_t)xmmword_19689A950);
  *(int32x2_t *)v49.i8 = vmul_s32(vmla_s32(vrev64_s32(vmul_s32(*(int32x2_t *)v70[2].i8, *(int32x2_t *)v70[2].i8)), *(int32x2_t *)((char *)v70[1].i64 + 4), *(int32x2_t *)((char *)v70[1].i64 + 4)), (int32x2_t)0x780000008CLL);
  v51 = vmul_s32(vmla_s32(vrev64_s32(vmul_s32(*(int32x2_t *)((char *)&v71[0].u64[1] + 4), *(int32x2_t *)((char *)&v71[0].u64[1] + 4))), *(int32x2_t *)v71[0].i8, *(int32x2_t *)v71[0].i8), (int32x2_t)0x780000008CLL);
  v52 = vaddvq_s32(vmulq_s32(vmlaq_s32((int32x4_t)vextq_s8(v48, v48, 8uLL), v70[0], v70[0]), (int32x4_t)xmmword_19689A950))
      + 168 * (v70[1].i32[0] * v70[1].i32[0] + v70[2].i32[2] * v70[2].i32[2])
      + vadd_s32(*(int32x2_t *)v49.i8, vdup_lane_s32(*(int32x2_t *)v49.i8, 1)).u32[0]
      + 105 * v70[1].i32[3] * v70[1].i32[3];
  v53 = vaddvq_s32(v50)
      + 168 * (v70[4].i32[3] * v70[4].i32[3] + v71[1].i32[1] * v71[1].i32[1])
      + vadd_s32(v51, vdup_lane_s32(v51, 1)).u32[0]
      + 105 * v71[0].i32[2] * v71[0].i32[2];
  *(int32x2_t *)v48.i8 = vmul_s32(vmla_s32(vrev64_s32(vmul_s32(*(int32x2_t *)&v65, *(int32x2_t *)&v65)), *(int32x2_t *)((char *)v64[0].i64 + 4), *(int32x2_t *)((char *)v64[0].i64 + 4)), (int32x2_t)0x8C000000D2);
  v54 = 105
      * (vaddvq_s32(vmulq_s32(*(int32x4_t *)((char *)v64 + 12), *(int32x4_t *)((char *)v64 + 12)))
       + v64[1].i32[3] * v64[1].i32[3])
      + 420 * (v64[0].i32[0] * v64[0].i32[0] + DWORD2(v65) * DWORD2(v65))
      + v48.i32[0]
      + v48.i32[1];
  *(int32x2_t *)v48.i8 = vmul_s32(vmla_s32(vrev64_s32(vmul_s32(*(int32x2_t *)((char *)&v66[1].u64[1] + 4), *(int32x2_t *)((char *)&v66[1].u64[1] + 4))), *(int32x2_t *)v66[0].i8, *(int32x2_t *)v66[0].i8), (int32x2_t)0x8C000000D2);
  v55 = 105
      * (vaddvq_s32(vmulq_s32(*(int32x4_t *)((char *)v66 + 8), *(int32x4_t *)((char *)v66 + 8)))
       + v66[1].i32[2] * v66[1].i32[2])
      + 420 * (HIDWORD(v65) * HIDWORD(v65) + v66[2].i32[1] * v66[2].i32[1])
      + v48.i32[0]
      + v48.i32[1];
  *(int32x2_t *)v48.i8 = vmul_s32(vmla_s32(vrev64_s32(vmul_s32((int32x2_t)v66[4].u64[1], (int32x2_t)v66[4].u64[1])), *(int32x2_t *)((char *)&v66[2].u64[1] + 4), *(int32x2_t *)((char *)&v66[2].u64[1] + 4)), (int32x2_t)0x8C000000D2);
  v56 = 105
      * (vaddvq_s32(vmulq_s32(*(int32x4_t *)((char *)&v66[3] + 4), *(int32x4_t *)((char *)&v66[3] + 4)))
       + v66[4].i32[1] * v66[4].i32[1])
      + 420 * (v66[2].i32[2] * v66[2].i32[2] + v67 * v67)
      + v48.i32[0]
      + v48.i32[1];
  v57 = 105 * vaddvq_s32(vmlaq_s32(vmulq_s32(v73, v73), v72, v72));
  v58 = 105
      * (vaddvq_s32(vmulq_s32(v74, v74)) + v47 * v47 + DWORD1(v75) * DWORD1(v75) + v75 * v75 + DWORD2(v75) * DWORD2(v75));
  v63[0] = v52;
  v63[1] = v54;
  v63[2] = v57;
  v63[3] = v55;
  v63[4] = v53;
  v63[5] = v56;
  *(int32x2_t *)v50.i8 = vmul_s32(vmla_s32(vrev64_s32(vmul_s32(*(int32x2_t *)((char *)&v69 + 4), *(int32x2_t *)((char *)&v69 + 4))), *(int32x2_t *)((char *)&v67 + 8), *(int32x2_t *)((char *)&v67 + 8)), (int32x2_t)0x8C000000D2);
  v59 = 105 * (vaddvq_s32(vmulq_s32(v68, v68)) + v69 * v69)
      + 420 * (DWORD1(v67) * DWORD1(v67) + HIDWORD(v69) * HIDWORD(v69))
      + v50.i32[0]
      + v50.i32[1];
  v63[6] = v58;
  v63[7] = v59;
  v60 = v54 > v52;
  if (v54 > v52)
    v52 = v54;
  if (v57 > v52)
  {
    v60 = 2;
    v52 = v57;
  }
  if (v55 > v52)
  {
    v60 = 3;
    v52 = v55;
  }
  if (v53 <= v52)
    v53 = v52;
  else
    v60 = 4;
  if (v56 > v53)
  {
    v60 = 5;
    v53 = v56;
  }
  if (v58 > v53)
  {
    v60 = 6;
    v53 = v58;
  }
  if (v59 <= v53)
    result = v60;
  else
    result = 7;
  if (v59 <= v53)
    v59 = v53;
  *a3 = (v59 - v63[result ^ 4]) >> 10;
  return result;
}

uint64_t cdef_filter_block_8x8_c(uint16x8_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, int a9, char a10, unsigned int a11)
{
  return cdef_filter_block_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, 8u, 8u, a10, a11);
}

uint64_t cdef_filter_block_4x8_c(uint16x8_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, int a9, char a10, unsigned int a11)
{
  return cdef_filter_block_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, 4u, 8u, a10, a11);
}

uint64_t cdef_filter_block_4x4_c(uint16x8_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, int a9, char a10, unsigned int a11)
{
  return cdef_filter_block_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, 4u, 4u, a10, a11);
}

uint64_t cdef_filter_block_c(uint16x8_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, int a9, unsigned int a10, unsigned int a11, char a12, unsigned int a13)
{
  unsigned int v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int v20;
  int v21;
  char *v22;
  int v23;
  char *v24;
  int v25;
  _BYTE *v26;
  char *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  size_t v31;
  char *v32;
  _BYTE *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  size_t v37;
  _QWORD *v38;
  uint16x8_t *v39;
  int16x8_t v40;
  int16x8_t v41;
  int v42;
  uint64_t v43;
  size_t v44;
  char *v45;
  unsigned int v46;
  signed int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  char *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  BOOL v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x2_t v68;
  uint64_t result;
  uint32x4_t v70;
  int32x4_t v71;
  uint32x2_t v72;
  uint32x4_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint16x8_t *v77;
  int32x4_t v78;
  int32x4_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int16x8_t v93;
  int32x4_t v94;
  int16x8_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int16x8_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int16x8_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int16x8_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int8x16_t v123;
  int32x4_t v124;
  int8x16_t v125;
  int16x8_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int8x16_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int8x16_t v132;
  int16x8_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int8x16_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int8x16_t v140;
  int16x8_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int8x16_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int8x16_t v148;
  int32x4_t v149;
  int16x8_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int8x16_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int8x16_t v157;
  int32x4_t v158;
  int16x8_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int8x16_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int8x16_t v167;
  uint32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  uint32x4_t v174;
  int8x16_t v175;
  int32x4_t v176;
  int16x8_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int8x16_t v180;
  int32x4_t v181;
  int32x4_t v182;
  unsigned int v183;
  int16x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  __int32 v188;
  __int32 v189;
  __int32 v190;
  __int32 v191;
  int8x16_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int8x16_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x2_t v199;
  int32x2_t v200;
  uint32x2_t v201;
  int v202;
  int8x16_t v203;
  int v204;
  unsigned int v205;
  int8x16_t v206;
  int32x2_t v207;
  int8x16_t v208;
  int32x2_t v209;
  uint32x2_t v210;
  __int32 v211;
  __int32 v212;
  int8x16_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int v216;
  int8x8_t v217;
  int v218;
  int32x2_t v219;
  int v220;
  int8x8_t v221;
  int8x8_t v222;
  int8x8_t v223;
  int32x2_t v224;
  int32x2_t v225;
  int v226;
  unsigned int v227;
  int v228;
  unsigned int v229;
  char *v230;
  int v231;
  int v232;
  int v233;
  int v234;
  BOOL v239;
  int32x4_t v240;
  uint64_t v241;
  uint32x4_t v242;
  char v243;
  uint64_t v244;
  unint64_t v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int16x8_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int16x8_t v257;
  int16x8_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int16x8_t v262;
  int32x4_t v263;
  int32x4_t v264;
  int32x4_t v265;
  int16x8_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int32x4_t v269;
  int32x4_t v270;
  int32x4_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int8x16_t v277;
  int8x16_t v278;
  int8x16_t v279;
  int8x16_t v280;
  int8x16_t v281;
  int8x16_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int8x16_t v287;
  int8x16_t v288;
  int8x16_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int8x16_t v294;
  int8x16_t v295;
  int32x4_t v296;
  int16x8_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int16x8_t v301;
  int32x4_t v302;
  int32x4_t v303;
  int32x4_t v304;
  int16x8_t v305;
  int32x4_t v306;
  int32x4_t v307;
  int32x4_t v308;
  int16x8_t v309;
  int32x4_t v310;
  int32x4_t v311;
  int32x4_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int8x16_t v315;
  int8x16_t v316;
  int32x4_t v317;
  int32x4_t v318;
  int32x4_t v319;
  int32x4_t v320;
  int32x4_t v321;
  int32x4_t v322;
  int8x16_t v323;
  int8x16_t v324;
  int32x4_t v325;
  int32x4_t v326;
  int8x16_t v327;
  int32x4_t v328;
  int32x4_t v329;
  int32x4_t v330;
  int32x4_t v331;
  int32x4_t v332;
  int8x16_t v333;
  int32x4_t v334;
  int32x4_t v335;
  int32x4_t v336;
  int32x4_t v337;
  int8x16_t v338;
  int8x16_t v339;
  int32x4_t v340;
  int32x4_t v341;
  unsigned int v342;
  int16x4_t v343;
  int32x4_t v344;
  int32x4_t v345;
  int32x4_t v346;
  int32x4_t v347;
  int8x16_t v348;
  int16x4_t v349;
  int32x4_t v350;
  int32x4_t v351;
  int32x4_t v352;
  int32x4_t v353;
  int8x16_t v354;
  int v355;
  char *v356;
  int v357;
  int v358;
  BOOL v361;
  int32x4_t v362;
  int32x4_t v363;
  int32x4_t v364;
  int32x4_t v365;
  int32x2_t v366;
  uint32x2_t v367;
  uint32x4_t v368;
  char v369;
  uint64_t v370;
  unint64_t v371;
  int v372;
  int v373;
  int v374;
  int16x8_t v375;
  int32x4_t v376;
  int32x4_t v377;
  int16x8_t v378;
  int32x4_t v379;
  int32x4_t v380;
  int16x8_t v381;
  int32x4_t v382;
  int32x4_t v383;
  int32x4_t v384;
  int32x4_t v385;
  int32x4_t v386;
  int32x4_t v387;
  int8x16_t v388;
  int8x16_t v389;
  int32x4_t v390;
  int32x4_t v391;
  int32x4_t v392;
  int32x4_t v393;
  int32x4_t v394;
  int32x4_t v395;
  int8x16_t v396;
  int8x16_t v397;
  int32x4_t v398;
  int32x4_t v399;
  int16x8_t v400;
  int32x4_t v401;
  int32x4_t v402;
  int16x8_t v403;
  int32x4_t v404;
  int32x4_t v405;
  int32x4_t v406;
  int32x4_t v407;
  int32x4_t v408;
  int32x4_t v409;
  int8x16_t v410;
  int8x16_t v411;
  int32x4_t v412;
  int32x4_t v413;
  int8x16_t v414;
  int8x16_t v415;
  int32x4_t v416;
  int32x4_t v417;
  unsigned int v418;
  int32x2_t v419;
  int32x2_t v420;
  int32x2_t v421;
  int32x2_t v422;
  uint32x2_t v423;
  int8x8_t v424;
  int32x2_t v425;
  uint32x2_t v426;
  int8x8_t v427;
  int32x2_t v428;
  uint32x2_t v429;
  int32x2_t v430;
  uint64_t v431;
  uint64_t v432;
  char v433;
  unsigned int v434;
  int32x4_t v435;
  int32x4_t v436;
  uint32x4_t v437;
  int32x4_t v438;
  int32x4_t v439;
  int32x4_t v440;
  int32x4_t v441;
  int32x4_t v442;
  int32x4_t v443;
  int32x4_t v444;
  int32x4_t v445;
  int32x4_t v446;
  int32x4_t v447;
  int32x4_t v448;
  int32x4_t v449;
  int32x4_t v450;
  int32x4_t v451;
  int32x4_t v452;
  int32x4_t v453;
  int32x4_t v454;
  int32x4_t v455;
  int32x4_t v457;
  int32x4_t v458;
  int32x4_t v460;
  int32x4_t v462;
  int32x4_t v464;
  int32x4_t v466;
  int v467;
  int32x4_t v468;
  unsigned int v469;
  int32x4_t v470;
  int v471;
  int32x4_t v472;
  _BYTE __b[24];
  uint64_t v474;
  _QWORD v475[31];

  v16 = a11;
  *(_QWORD *)((char *)&v475[29] + 4) = *MEMORY[0x1E0C80C00];
  v471 = a11 + 2;
  if ((a12 & 4) != 0)
  {
    v17 = -2;
    v18 = v475;
    if ((a12 & 8) != 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  memset_pattern16(__b, &unk_19689A960, 2 * (a10 + 4));
  memset_pattern16(&v474, &unk_19689A960, 2 * (a10 + 4));
  v17 = 0;
  v18 = v475;
  if ((a12 & 8) == 0)
  {
LABEL_5:
    v19 = &v475[3 * a11];
    memset_pattern16((char *)v19 - 4, &unk_19689A960, 2 * (a10 + 4));
    memset_pattern16((char *)v19 + 20, &unk_19689A960, 2 * (a10 + 4));
    v471 = a11;
  }
LABEL_6:
  v20 = a10;
  v469 = a10 + 2;
  if ((a12 & 1) == 0)
  {
    v21 = v471 - v17;
    v22 = (char *)&v475[3 * v17 - 1] + 4;
    do
    {
      memset_pattern16(v22, &unk_19689A960, 4uLL);
      v22 += 24;
      --v21;
    }
    while (v21);
    v467 = 0;
    v20 = a10;
    if ((a12 & 2) != 0)
      goto LABEL_15;
    goto LABEL_12;
  }
  v467 = -2;
  if ((a12 & 2) == 0)
  {
LABEL_12:
    v23 = v471 - v17;
    v24 = (char *)&v475[3 * v17] + 2 * v20;
    do
    {
      memset_pattern16(v24, &unk_19689A960, 4uLL);
      v24 += 24;
      --v23;
    }
    while (v23);
    v469 = a10;
  }
LABEL_15:
  if ((a12 & 4) != 0)
  {
    if (v17 < 0)
      v25 = -1;
    else
      v25 = v17;
    v26 = &__b[24 * v17 + 52 + 2 * v467];
    v27 = (char *)(a4 + 2 * v467);
    v28 = (v25 + 1) - (uint64_t)v17;
    do
    {
      memcpy(v26, v27, 2 * (v469 - (uint64_t)v467));
      v26 += 24;
      v27 += a2;
      --v28;
    }
    while (v28);
  }
  if ((a12 & 1) != 0)
  {
    if (v467 < 0)
      v29 = -1;
    else
      v29 = v467;
    v30 = 2 * v467;
    v31 = 2 * ((v29 + 1) - (uint64_t)v467);
    v32 = (char *)(v30 + a3 + 4);
    v33 = &__b[v30 + 52];
    v34 = a11;
    do
    {
      memcpy(v33, v32, v31);
      v32 += 4;
      v33 += 24;
      --v34;
    }
    while (v34);
  }
  v35 = 0;
  v36 = a2 >> 1;
  v37 = 2 * v469;
  v38 = v475;
  v39 = a1;
  do
  {
    memcpy(v38, v39, v37);
    v39 = (uint16x8_t *)((char *)v39 + 2 * v36);
    v38 += 3;
    ++v35;
  }
  while (v35 != a11);
  v42 = v471 - a11;
  if (v471 > (int)a11)
  {
    v43 = 2 * v467;
    v44 = v37 - v43;
    v45 = (char *)(a5 + v43);
    do
    {
      memcpy((char *)v38 + v43, v45, v44);
      v45 += a2;
      v43 += 24;
      --v42;
    }
    while (v42);
  }
  if (a6)
  {
    v46 = 4 - ((a6 >> (24 - __clz(a13))) & 1);
    v47 = __clz(a6) + a9 - 31;
    v48 = v47 & ~(v47 >> 31);
    v49 = a10;
    if (a7)
    {
      v50 = __clz(a7) + a9 - 31;
      v51 = (char *)&dav1d_cdef_directions + 2 * a8;
      v52 = v51[4];
      v53 = v51[8];
      v54 = *v51;
      v55 = v51[5];
      v56 = v51[9];
      v57 = v51[1];
      v64 = ((a10 - 1) & 0xFFFFFFFF80000000) != 0
         || (int)(v52 + a10 - 1) < v52
         || (int)(v53 + a10 - 1) < v53
         || (int)(v54 + a10 - 1) < v54
         || (int)(v55 + a10 - 1) < v55
         || (int)(v56 + a10 - 1) < v56
         || (int)(v57 + a10 - 1) < v57;
      v433 = v64;
      v65 = vdupq_n_s32(v48);
      v66 = vdupq_n_s32(a6);
      v67 = vdupq_n_s32(a7);
      v68.i32[0] = v46;
      v68.i32[1] = v46 & 1 | 2;
      v431 = a10 & 0xFFFFFFF8;
      v432 = 2 * v36;
      result = -v53;
      v70 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v50));
      v71 = 0uLL;
      v72 = (uint32x2_t)vneg_s32(*(int32x2_t *)v65.i8);
      v73 = (uint32x4_t)vnegq_s32(v65);
      v435 = vdupq_n_s32(v46);
      v436 = vdupq_n_s32(v68.u32[1]);
      v430 = v68;
      v429 = v72;
      v437 = v70;
      while (1)
      {
        v74 = v49 < 8 ? 1 : v433;
        v434 = v16;
        if ((v74 & 1) != 0)
          break;
        v76 = 0;
        v77 = a1;
        do
        {
          v78 = (int32x4_t)vmovl_high_u16(*v77);
          v79 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v77->i8);
          v80 = *(int16x8_t *)((char *)v18 + 2 * v52 + 2 * (int)v76);
          v458 = vmovl_high_s16(v80);
          v472 = vmovl_s16(*(int16x4_t *)v80.i8);
          v81 = *(int16x8_t *)((char *)v18 + 2 * ((int)v76 - v52));
          v82 = vmovl_high_s16(v81);
          v83 = vabdq_s32(v472, v79);
          v84 = vabdq_s32(v458, v78);
          v470 = vmovl_s16(*(int16x4_t *)v81.i8);
          v85 = vabdq_s32(v470, v79);
          v86 = vabdq_s32(v82, v78);
          v87 = v82;
          v88 = (int8x16_t)vminq_s32(v83, vmaxq_s32(vsubq_s32(v66, (int32x4_t)vshlq_u32((uint32x4_t)v83, v73)), v71));
          v89 = (int8x16_t)vminq_s32(v84, vmaxq_s32(vsubq_s32(v66, (int32x4_t)vshlq_u32((uint32x4_t)v84, v73)), v71));
          v90 = (int8x16_t)vminq_s32(v85, vmaxq_s32(vsubq_s32(v66, (int32x4_t)vshlq_u32((uint32x4_t)v85, v73)), v71));
          v91 = (int8x16_t)vcltzq_s32((int32x4_t)vsubw_high_u16((uint32x4_t)v82, *v77));
          v92 = (int8x16_t)vminq_s32(v86, vmaxq_s32(vsubq_s32(v66, (int32x4_t)vshlq_u32((uint32x4_t)v86, v73)), v71));
          v93 = *(int16x8_t *)((char *)v18 + 2 * v53 + 2 * (int)v76);
          v94 = vmovl_s16(*(int16x4_t *)v93.i8);
          v95 = *(int16x8_t *)((char *)v18 + 2 * ((int)v76 - v53));
          v96 = vmovl_high_s16(v95);
          v97 = vmovl_s16(*(int16x4_t *)v95.i8);
          v98 = *(int16x8_t *)((char *)v18 + 2 * v54 + 2 * (int)v76);
          v99 = vmovl_s16(*(int16x4_t *)v98.i8);
          v100 = vmovl_high_s16(v98);
          v101 = *(int16x8_t *)((char *)v18 + 2 * ((int)v76 - v54));
          v102 = vmovl_high_s16(v101);
          v454 = vmovl_high_s16(v93);
          v103 = vabdq_s32(v94, v79);
          v466 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_u16((uint32x4_t)v472, *(uint16x4_t *)v77->i8)), (int8x16_t)vnegq_s32((int32x4_t)v88), v88);
          v468 = v94;
          v104 = vabdq_s32(v454, v78);
          v452 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_high_u16((uint32x4_t)v458, *v77)), (int8x16_t)vnegq_s32((int32x4_t)v89), v89);
          v105 = (int8x16_t)vminq_s32(v103, vmaxq_s32(vsubq_s32(v67, (int32x4_t)vshlq_u32((uint32x4_t)v103, v437)), v71));
          v106 = (int8x16_t)vminq_s32(v104, vmaxq_s32(vsubq_s32(v67, (int32x4_t)vshlq_u32((uint32x4_t)v104, v437)), v71));
          v462 = v97;
          v464 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_u16((uint32x4_t)v470, *(uint16x4_t *)v77->i8)), (int8x16_t)vnegq_s32((int32x4_t)v90), v90);
          v450 = v96;
          v451 = (int32x4_t)vbslq_s8(v91, (int8x16_t)vnegq_s32((int32x4_t)v92), v92);
          v107 = vabdq_s32(v97, v79);
          v108 = vabdq_s32(v96, v78);
          v460 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_u16((uint32x4_t)v94, *(uint16x4_t *)v77->i8)), (int8x16_t)vnegq_s32((int32x4_t)v105), v105);
          v109 = (int8x16_t)vminq_s32(v107, vmaxq_s32(vsubq_s32(v67, (int32x4_t)vshlq_u32((uint32x4_t)v107, v437)), v71));
          v110 = (int8x16_t)vminq_s32(v108, vmaxq_s32(vsubq_s32(v67, (int32x4_t)vshlq_u32((uint32x4_t)v108, v437)), v71));
          v447 = v100;
          v448 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_high_u16((uint32x4_t)v454, *v77)), (int8x16_t)vnegq_s32((int32x4_t)v106), v106);
          v455 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_u16((uint32x4_t)v97, *(uint16x4_t *)v77->i8)), (int8x16_t)vnegq_s32((int32x4_t)v109), v109);
          v457 = v99;
          v111 = vabdq_s32(v100, v78);
          v112 = vabdq_s32(v99, v79);
          v113 = (int8x16_t)vminq_s32(v111, vmaxq_s32(vsubq_s32(v67, (int32x4_t)vshlq_u32((uint32x4_t)v111, v437)), v71));
          v114 = (int8x16_t)vminq_s32(v112, vmaxq_s32(vsubq_s32(v67, (int32x4_t)vshlq_u32((uint32x4_t)v112, v437)), v71));
          v446 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_high_u16((uint32x4_t)v96, *v77)), (int8x16_t)vnegq_s32((int32x4_t)v110), v110);
          v453 = vmovl_s16(*(int16x4_t *)v101.i8);
          v444 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_high_u16((uint32x4_t)v100, *v77)), (int8x16_t)vnegq_s32((int32x4_t)v113), v113);
          v115 = vabdq_s32(v453, v79);
          v116 = vabdq_s32(v102, v78);
          v117 = (int8x16_t)vminq_s32(v115, vmaxq_s32(vsubq_s32(v67, (int32x4_t)vshlq_u32((uint32x4_t)v115, v437)), v71));
          v118 = (int8x16_t)vminq_s32(v116, vmaxq_s32(vsubq_s32(v67, (int32x4_t)vshlq_u32((uint32x4_t)v116, v437)), v71));
          v449 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_u16((uint32x4_t)v99, *(uint16x4_t *)v77->i8)), (int8x16_t)vnegq_s32((int32x4_t)v114), v114);
          v445 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_u16((uint32x4_t)v453, *(uint16x4_t *)v77->i8)), (int8x16_t)vnegq_s32((int32x4_t)v117), v117);
          v119 = *(int16x8_t *)((char *)v18 + 2 * v55 + 2 * (int)v76);
          v120 = vmovl_high_s16(v119);
          v121 = vmovl_s16(*(int16x4_t *)v119.i8);
          v441 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_high_u16((uint32x4_t)v102, *v77)), (int8x16_t)vnegq_s32((int32x4_t)v118), v118);
          v122 = vabdq_s32(v121, v79);
          v123 = (int8x16_t)vminq_s32(v122, vmaxq_s32(vsubq_s32(v66, (int32x4_t)vshlq_u32((uint32x4_t)v122, v73)), v71));
          v443 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_u16((uint32x4_t)v121, *(uint16x4_t *)v77->i8)), (int8x16_t)vnegq_s32((int32x4_t)v123), v123);
          v124 = vabdq_s32(v120, v78);
          v125 = (int8x16_t)vminq_s32(v124, vmaxq_s32(vsubq_s32(v66, (int32x4_t)vshlq_u32((uint32x4_t)v124, v73)), v71));
          v440 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_high_u16((uint32x4_t)v120, *v77)), (int8x16_t)vnegq_s32((int32x4_t)v125), v125);
          v126 = *(int16x8_t *)((char *)v18 + 2 * ((int)v76 - v55));
          v127 = vmovl_s16(*(int16x4_t *)v126.i8);
          v128 = vabdq_s32(v127, v79);
          v129 = (int8x16_t)vminq_s32(v128, vmaxq_s32(vsubq_s32(v66, (int32x4_t)vshlq_u32((uint32x4_t)v128, v73)), v71));
          v442 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_u16((uint32x4_t)v127, *(uint16x4_t *)v77->i8)), (int8x16_t)vnegq_s32((int32x4_t)v129), v129);
          v130 = vmovl_high_s16(v126);
          v131 = vabdq_s32(v130, v78);
          v132 = (int8x16_t)vminq_s32(v131, vmaxq_s32(vsubq_s32(v66, (int32x4_t)vshlq_u32((uint32x4_t)v131, v73)), v71));
          v439 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_high_u16((uint32x4_t)v130, *v77)), (int8x16_t)vnegq_s32((int32x4_t)v132), v132);
          v133 = *(int16x8_t *)((char *)v18 + 2 * v56 + 2 * (int)v76);
          v134 = vmovl_high_s16(v133);
          v135 = vabdq_s32(v134, v78);
          v136 = (int8x16_t)vminq_s32(v135, vmaxq_s32(vsubq_s32(v67, (int32x4_t)vshlq_u32((uint32x4_t)v135, v437)), v71));
          v137 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_high_u16((uint32x4_t)v134, *v77)), (int8x16_t)vnegq_s32((int32x4_t)v136), v136);
          v138 = vmovl_s16(*(int16x4_t *)v133.i8);
          v139 = vabdq_s32(v138, v79);
          v140 = (int8x16_t)vminq_s32(v139, vmaxq_s32(vsubq_s32(v67, (int32x4_t)vshlq_u32((uint32x4_t)v139, v437)), v71));
          v438 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_u16((uint32x4_t)v138, *(uint16x4_t *)v77->i8)), (int8x16_t)vnegq_s32((int32x4_t)v140), v140);
          v141 = *(int16x8_t *)((char *)v18 + 2 * ((int)v76 - v56));
          v142 = vmovl_high_s16(v141);
          v143 = vabdq_s32(v142, v78);
          v144 = (int8x16_t)vminq_s32(v143, vmaxq_s32(vsubq_s32(v67, (int32x4_t)vshlq_u32((uint32x4_t)v143, v437)), v71));
          v145 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_high_u16((uint32x4_t)v142, *v77)), (int8x16_t)vnegq_s32((int32x4_t)v144), v144);
          v146 = vmovl_s16(*(int16x4_t *)v141.i8);
          v147 = vabdq_s32(v146, v79);
          v148 = (int8x16_t)vminq_s32(v147, vmaxq_s32(vsubq_s32(v67, (int32x4_t)vshlq_u32((uint32x4_t)v147, v437)), v71));
          v149 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_u16((uint32x4_t)v146, *(uint16x4_t *)v77->i8)), (int8x16_t)vnegq_s32((int32x4_t)v148), v148);
          v150 = *(int16x8_t *)((char *)v18 + 2 * v57 + 2 * (int)v76);
          v151 = vmovl_s16(*(int16x4_t *)v150.i8);
          v152 = vabdq_s32(v151, v79);
          v153 = (int8x16_t)vminq_s32(v152, vmaxq_s32(vsubq_s32(v67, (int32x4_t)vshlq_u32((uint32x4_t)v152, v437)), v71));
          v154 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_u16((uint32x4_t)v151, *(uint16x4_t *)v77->i8)), (int8x16_t)vnegq_s32((int32x4_t)v153), v153);
          v155 = vmovl_high_s16(v150);
          v156 = vabdq_s32(v155, v78);
          v157 = (int8x16_t)vminq_s32(v156, vmaxq_s32(vsubq_s32(v67, (int32x4_t)vshlq_u32((uint32x4_t)v156, v437)), v71));
          v158 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_high_u16((uint32x4_t)v155, *v77)), (int8x16_t)vnegq_s32((int32x4_t)v157), v157);
          v159 = *(int16x8_t *)((char *)v18 + 2 * ((int)v76 - v57));
          v160 = vmovl_high_s16(v159);
          v161 = vabdq_s32(v160, v78);
          v162 = (int8x16_t)vminq_s32(v161, vmaxq_s32(vsubq_s32(v67, (int32x4_t)vshlq_u32((uint32x4_t)v161, v437)), v71));
          v163 = v66;
          v164 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_high_u16((uint32x4_t)v160, *v77)), (int8x16_t)vnegq_s32((int32x4_t)v162), v162);
          v165 = vmovl_s16(*(int16x4_t *)v159.i8);
          v166 = vabdq_s32(v165, v79);
          v167 = (int8x16_t)vminq_s32(v166, vmaxq_s32(vsubq_s32(v67, (int32x4_t)vshlq_u32((uint32x4_t)v166, v437)), v71));
          v168 = vminq_u32((uint32x4_t)v102, vminq_u32((uint32x4_t)v447, vminq_u32((uint32x4_t)v450, vminq_u32((uint32x4_t)v454, vminq_u32((uint32x4_t)v87, vminq_u32((uint32x4_t)v458, (uint32x4_t)v78))))));
          v169 = vmaxq_s32(v102, vmaxq_s32(v447, vmaxq_s32(v450, vmaxq_s32(v454, vmaxq_s32(v87, vmaxq_s32(v458, v78))))));
          v170 = vaddq_s32(vaddq_s32(v446, v448), vaddq_s32(v444, v441));
          v71 = 0uLL;
          v171 = vmlaq_s32(vaddq_s32(vmlaq_s32(vaddq_s32(v170, v170), vaddq_s32(v451, v452), v435), v137), vaddq_s32(v439, v440), v436);
          v172 = (int32x4_t)vminq_u32((uint32x4_t)v134, vminq_u32((uint32x4_t)v130, vminq_u32((uint32x4_t)v120, v168)));
          v66 = v163;
          v173 = vaddq_s32(v171, vaddq_s32(vaddq_s32(v145, v158), v164));
          v174 = vminq_u32((uint32x4_t)v142, (uint32x4_t)v172);
          v172.i64[0] = 0x800000008;
          v172.i64[1] = 0x800000008;
          v175 = (int8x16_t)vminq_u32((uint32x4_t)v160, vminq_u32((uint32x4_t)v155, v174));
          v176 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(vsraq_n_s32(v173, v173, 0x1FuLL), v172), 4uLL), *v77);
          v177 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v175, v176), v175, (int8x16_t)vminq_s32(v176, vmaxq_s32(v160, vmaxq_s32(v155, vmaxq_s32(v142, vmaxq_s32(v134, vmaxq_s32(v130, vmaxq_s32(v120, v169))))))));
          v178 = vaddq_s32(vaddq_s32(v455, v460), vaddq_s32(v449, v445));
          v179 = vaddq_s32(vmlaq_s32(vaddq_s32(vmlaq_s32(vaddq_s32(v178, v178), vaddq_s32(v464, v466), v435), v438), vaddq_s32(v442, v443), v436), vaddq_s32(vaddq_s32(v149, v154), (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_u16((uint32x4_t)v165, *(uint16x4_t *)v77->i8)), (int8x16_t)vnegq_s32((int32x4_t)v167), v167)));
          v180 = (int8x16_t)vminq_u32((uint32x4_t)v165, vminq_u32((uint32x4_t)v151, vminq_u32((uint32x4_t)v146, vminq_u32((uint32x4_t)v138, vminq_u32((uint32x4_t)v127, vminq_u32((uint32x4_t)v121, vminq_u32((uint32x4_t)v453, vminq_u32((uint32x4_t)v457, vminq_u32((uint32x4_t)v462, vminq_u32((uint32x4_t)v468,
                                                vminq_u32((uint32x4_t)v470, vminq_u32((uint32x4_t)v472, (uint32x4_t)v79))))))))))));
          v181 = vmaxq_s32(v165, vmaxq_s32(v151, vmaxq_s32(v146, vmaxq_s32(v138, vmaxq_s32(v127, vmaxq_s32(v121, vmaxq_s32(v453, vmaxq_s32(v457, vmaxq_s32(v462, vmaxq_s32(v468, vmaxq_s32(v470, vmaxq_s32(v472, v79))))))))))));
          v182 = vsraq_n_s32(v79, vaddq_s32(vsraq_n_s32(v179, v179, 0x1FuLL), v172), 4uLL);
          *(int16x8_t *)v77++ = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v180, v182), v180, (int8x16_t)vminq_s32(v182, v181)), v177);
          v76 += 8;
        }
        while (v431 != v76);
        v75 = a10 & 0xFFFFFFF8;
        v68 = v430;
        v72 = v429;
        v70 = v437;
        if (v431 != v49)
          goto LABEL_65;
LABEL_56:
        v18 += 3;
        a1 = (uint16x8_t *)((char *)a1 + v432);
        --v16;
        if (v434 == 1)
          return result;
      }
      v75 = 0;
      do
      {
LABEL_65:
        v183 = a1->u16[v75];
        v184.i16[0] = *((_WORD *)v18 + v53 + (int)v75);
        v184.i16[1] = *((_WORD *)v18 + (int)v75 - v53);
        v184.i16[2] = *((_WORD *)v18 + v54 + (int)v75);
        v184.i16[3] = *((_WORD *)v18 + (int)v75 - v54);
        v185 = vmovl_s16(v184);
        v186 = vdupq_n_s32(v183);
        v187 = vabdq_s32(v185, v186);
        v188 = v185.i32[1];
        v189 = v185.i32[2];
        v190 = v185.i32[3];
        v191 = v185.i32[0];
        v192 = (int8x16_t)vcltzq_s32(vsubq_s32(v185, v186));
        v185.i16[0] = *((_WORD *)v18 + v56 + (int)v75);
        v185.i16[1] = *((_WORD *)v18 + (int)v75 - v56);
        v185.i16[2] = *((_WORD *)v18 + v57 + (int)v75);
        v185.i16[3] = *((_WORD *)v18 + (int)v75 - v57);
        v193 = vmovl_s16(*(int16x4_t *)v185.i8);
        v194 = vsubq_s32(v67, (int32x4_t)vshlq_u32((uint32x4_t)v187, v70));
        v195 = vabdq_s32(v193, v186);
        v196 = (int8x16_t)vcltzq_s32(vsubq_s32(v193, v186));
        v197 = vmaxq_s32(v194, v71);
        v194.i16[0] = *((_WORD *)v18 + v52 + (int)v75);
        v194.i16[2] = *((_WORD *)v18 + v55 + (int)v75);
        v198 = vmaxq_s32(vsubq_s32(v67, (int32x4_t)vshlq_u32((uint32x4_t)v195, v70)), v71);
        v199 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v194.i8, 0x10uLL), 0x10uLL);
        v200 = vsub_s32(v199, *(int32x2_t *)v186.i8);
        v201 = (uint32x2_t)vabd_s32(v199, *(int32x2_t *)v186.i8);
        v202 = v199.i32[1];
        v203 = (int8x16_t)vminq_s32(v187, v197);
        v204 = v199.i32[0];
        if (v199.i32[0] >= v183)
          v205 = a1->u16[v75];
        else
          v205 = v199.i32[0];
        v206 = (int8x16_t)vminq_s32(v195, v198);
        if (v199.i32[0] <= (int)v183)
          v204 = a1->u16[v75];
        v199.i16[2] = *((_WORD *)v18 + (int)v75 - v55);
        v199.i16[0] = *((_WORD *)v18 + (int)v75 - v52);
        v207 = vshr_n_s32(vshl_n_s32(v199, 0x10uLL), 0x10uLL);
        v208 = (int8x16_t)vnegq_s32((int32x4_t)v203);
        v209 = vsub_s32(v207, *(int32x2_t *)v186.i8);
        v210 = (uint32x2_t)vabd_s32(v207, *(int32x2_t *)v186.i8);
        v211 = v207.i32[1];
        v212 = v207.i32[0];
        v213 = (int8x16_t)vnegq_s32((int32x4_t)v206);
        if (v212 < v205)
          v205 = v212;
        if (v212 > v204)
          v204 = v212;
        v214 = (int32x4_t)vbslq_s8(v192, v208, v203);
        if (v191 < v205)
          v205 = v191;
        if (v191 > v204)
          v204 = v191;
        v49 = a10;
        if (v188 < v205)
          v205 = v188;
        v215 = (int32x4_t)vbslq_s8(v196, v213, v206);
        if (v188 > v204)
          v204 = v188;
        if (v189 < v205)
          v205 = v189;
        v216 = vaddvq_s32(v214);
        if (v189 > v204)
          v204 = v189;
        if (v190 < v205)
          v205 = v190;
        if (v190 > v204)
          v204 = v190;
        v215.i32[0] = vaddvq_s32(v215);
        v217 = (int8x8_t)vmin_s32((int32x2_t)v201, vmax_s32(vsub_s32(*(int32x2_t *)v66.i8, (int32x2_t)vshl_u32(v201, v72)), *(int32x2_t *)v71.i8));
        v218 = v216;
        v219 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v200), (int8x8_t)vneg_s32((int32x2_t)v217), v217);
        v220 = 2 * v218;
        v221 = (int8x8_t)vmin_s32((int32x2_t)v210, vmax_s32(vsub_s32(*(int32x2_t *)v66.i8, (int32x2_t)vshl_u32(v210, v72)), *(int32x2_t *)v71.i8));
        v222 = (int8x8_t)vcltz_s32(v209);
        v223 = (int8x8_t)vneg_s32((int32x2_t)v221);
        if (v202 < v205)
          v205 = v202;
        v224 = (int32x2_t)vbsl_s8(v222, v223, v221);
        if (v202 <= v204)
          v202 = v204;
        v215.i32[1] = v220;
        *(int32x2_t *)v215.i8 = vmla_s32(*(int32x2_t *)v215.i8, vadd_s32(v224, v219), v68);
        v225 = vdup_lane_s32(*(int32x2_t *)v215.i8, 1);
        if (v211 < v205)
          v205 = v211;
        if (v211 > v202)
          v202 = v211;
        v226 = vadd_s32(*(int32x2_t *)v215.i8, v225).u32[0];
        if (v193.i32[0] < v205)
          v205 = v193.i32[0];
        if (v193.i32[0] > v202)
          v202 = v193.i32[0];
        if (v193.i32[1] < v205)
          v205 = v193.u32[1];
        if (v193.i32[1] > v202)
          v202 = v193.i32[1];
        if (v193.i32[2] >= v205)
          v227 = v205;
        else
          v227 = v193.u32[2];
        if (v193.i32[2] > v202)
          v202 = v193.i32[2];
        if (v193.i32[3] < v227)
          v227 = v193.u32[3];
        if (v193.i32[3] > v202)
          v202 = v193.i32[3];
        v228 = v183 + ((v226 + (v226 >> 31) + 8) >> 4);
        if (v228 < v202)
          LOWORD(v202) = v183 + ((v226 + (v226 >> 31) + 8) >> 4);
        if (v228 < (int)v227)
          LOWORD(v202) = v227;
        a1->i16[v75++] = v202;
      }
      while (a10 != v75);
      goto LABEL_56;
    }
    v356 = (char *)&dav1d_cdef_directions + 2 * a8;
    v357 = v356[4];
    v358 = v356[5];
    v361 = ((a10 - 1) & 0xFFFFFFFF80000000) != 0 || (int)(v357 + a10 - 1) < v357 || (int)(v358 + a10 - 1) < v358;
    v362 = vdupq_n_s32(v48);
    v363 = vdupq_n_s32(a6);
    v364 = vdupq_n_s32(v46);
    v365 = vdupq_n_s32(v46 & 1 | 2);
    v366.i32[0] = v46 & 1 | 2;
    v366.i32[1] = v46;
    v367 = (uint32x2_t)vneg_s32(*(int32x2_t *)v362.i8);
    v368 = (uint32x4_t)vnegq_s32(v362);
    while (1)
    {
      v369 = a10 < 8 || v361;
      if ((v369 & 1) != 0)
      {
        v370 = 0;
      }
      else
      {
        v371 = 0;
        v372 = -v358;
        LODWORD(result) = v358;
        v373 = -v357;
        v374 = v357;
        do
        {
          v375 = (int16x8_t)a1[v371 / 0x10];
          v376 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v375.i8);
          v377 = (int32x4_t)vmovl_high_u16((uint16x8_t)v375);
          v378 = *(int16x8_t *)((char *)v18 + 2 * v374);
          v379 = vmovl_s16(*(int16x4_t *)v378.i8);
          v380 = vmovl_high_s16(v378);
          v381 = *(int16x8_t *)((char *)v18 + 2 * v373);
          v382 = vmovl_s16(*(int16x4_t *)v381.i8);
          v383 = vmovl_high_s16(v381);
          v384 = (int32x4_t)vsubw_high_u16((uint32x4_t)v380, (uint16x8_t)v375);
          v385 = (int32x4_t)vsubw_u16((uint32x4_t)v379, *(uint16x4_t *)v375.i8);
          v386 = vabdq_s32(v380, v377);
          v387 = vabdq_s32(v379, v376);
          v388 = (int8x16_t)vminq_s32(v386, vmaxq_s32(vsubq_s32(v363, (int32x4_t)vshlq_u32((uint32x4_t)v386, v368)), (int32x4_t)0));
          v389 = (int8x16_t)vminq_s32(v387, vmaxq_s32(vsubq_s32(v363, (int32x4_t)vshlq_u32((uint32x4_t)v387, v368)), (int32x4_t)0));
          v390 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v384), (int8x16_t)vnegq_s32((int32x4_t)v388), v388);
          v391 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v385), (int8x16_t)vnegq_s32((int32x4_t)v389), v389);
          v392 = (int32x4_t)vsubw_high_u16((uint32x4_t)v383, (uint16x8_t)v375);
          v393 = (int32x4_t)vsubw_u16((uint32x4_t)v382, *(uint16x4_t *)v375.i8);
          v394 = vabdq_s32(v383, v377);
          v395 = vabdq_s32(v382, v376);
          v396 = (int8x16_t)vminq_s32(v394, vmaxq_s32(vsubq_s32(v363, (int32x4_t)vshlq_u32((uint32x4_t)v394, v368)), (int32x4_t)0));
          v397 = (int8x16_t)vminq_s32(v395, vmaxq_s32(vsubq_s32(v363, (int32x4_t)vshlq_u32((uint32x4_t)v395, v368)), (int32x4_t)0));
          v398 = vmulq_s32(vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v392), (int8x16_t)vnegq_s32((int32x4_t)v396), v396), v390), v364);
          v399 = vmulq_s32(vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v393), (int8x16_t)vnegq_s32((int32x4_t)v397), v397), v391), v364);
          v400 = *(int16x8_t *)((char *)v18 + 2 * (int)result);
          v401 = vmovl_s16(*(int16x4_t *)v400.i8);
          v402 = vmovl_high_s16(v400);
          v403 = *(int16x8_t *)((char *)v18 + 2 * v372);
          v404 = vmovl_s16(*(int16x4_t *)v403.i8);
          v405 = vmovl_high_s16(v403);
          v406 = (int32x4_t)vsubw_high_u16((uint32x4_t)v402, (uint16x8_t)v375);
          v407 = (int32x4_t)vsubw_u16((uint32x4_t)v401, *(uint16x4_t *)v375.i8);
          v408 = vabdq_s32(v402, v377);
          v409 = vabdq_s32(v401, v376);
          v410 = (int8x16_t)vminq_s32(v408, vmaxq_s32(vsubq_s32(v363, (int32x4_t)vshlq_u32((uint32x4_t)v408, v368)), (int32x4_t)0));
          v411 = (int8x16_t)vminq_s32(v409, vmaxq_s32(vsubq_s32(v363, (int32x4_t)vshlq_u32((uint32x4_t)v409, v368)), (int32x4_t)0));
          v412 = vabdq_s32(v405, v377);
          v413 = vabdq_s32(v404, v376);
          v414 = (int8x16_t)vminq_s32(v412, vmaxq_s32(vsubq_s32(v363, (int32x4_t)vshlq_u32((uint32x4_t)v412, v368)), (int32x4_t)0));
          v415 = (int8x16_t)vminq_s32(v413, vmaxq_s32(vsubq_s32(v363, (int32x4_t)vshlq_u32((uint32x4_t)v413, v368)), (int32x4_t)0));
          v416 = vmlaq_s32(v399, vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_u16((uint32x4_t)v404, *(uint16x4_t *)v375.i8)), (int8x16_t)vnegq_s32((int32x4_t)v415), v415), (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v407), (int8x16_t)vnegq_s32((int32x4_t)v411), v411)), v365);
          v417 = vmlaq_s32(v398, vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_high_u16((uint32x4_t)v405, (uint16x8_t)v375)), (int8x16_t)vnegq_s32((int32x4_t)v414), v414), (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v406), (int8x16_t)vnegq_s32((int32x4_t)v410), v410)), v365);
          v41 = vrshrn_high_n_s32(vrshrn_n_s32(vsraq_n_s32(v416, v416, 0x1FuLL), 4uLL), vsraq_n_s32(v417, v417, 0x1FuLL), 4uLL);
          v40 = vaddq_s16(v375, v41);
          a1[v371 / 0x10] = (uint16x8_t)v40;
          v371 += 16;
          v374 += 8;
          v373 += 8;
          result = (result + 8);
          v372 += 8;
        }
        while (((2 * a10) & 0x1FFFFFFF0) != v371);
        v370 = a10 & 0xFFFFFFF8;
        if (v370 == a10)
          goto LABEL_158;
      }
      do
      {
        v418 = a1->u16[v370];
        v40.i16[0] = *((_WORD *)v18 + v358 + (int)v370);
        v40.i16[2] = *((_WORD *)v18 + v357 + (int)v370);
        v41.i16[0] = *((_WORD *)v18 + (int)v370 - v358);
        v41.i16[2] = *((_WORD *)v18 + (int)v370 - v357);
        v419 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v40.i8, 0x10uLL), 0x10uLL);
        v420 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v41.i8, 0x10uLL), 0x10uLL);
        v421 = vdup_n_s32(v418);
        v422 = vsub_s32(v419, v421);
        v423 = (uint32x2_t)vabd_s32(v419, v421);
        v424 = (int8x8_t)vmin_s32((int32x2_t)v423, vmax_s32(vsub_s32(*(int32x2_t *)v363.i8, (int32x2_t)vshl_u32(v423, v367)), 0));
        v425 = vsub_s32(v420, v421);
        v426 = (uint32x2_t)vabd_s32(v420, v421);
        v427 = (int8x8_t)vmin_s32((int32x2_t)v426, vmax_s32(vsub_s32(*(int32x2_t *)v363.i8, (int32x2_t)vshl_u32(v426, v367)), 0));
        v428 = vmul_s32(vadd_s32((int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v425), (int8x8_t)vneg_s32((int32x2_t)v427), v427), (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v422), (int8x8_t)vneg_s32((int32x2_t)v424), v424)), v366);
        *(int32x2_t *)v41.i8 = vdup_lane_s32(v428, 1);
        *(int32x2_t *)v40.i8 = vadd_s32(v428, *(int32x2_t *)v41.i8);
        result = v418 + ((v40.i32[0] + (v40.i32[0] >> 31) + 8) >> 4);
        a1->i16[v370++] = result;
      }
      while (a10 != v370);
LABEL_158:
      v18 += 3;
      a1 = (uint16x8_t *)((char *)a1 + 2 * v36);
      if (!--v16)
        return result;
    }
  }
  v229 = __clz(a7) + a9 - 31;
  v230 = (char *)&dav1d_cdef_directions + 2 * a8;
  v231 = v230[9];
  v232 = v230[1];
  v233 = v230[8];
  v234 = *v230;
  v239 = ((a10 - 1) & 0xFFFFFFFF80000000) != 0
      || (int)(v233 + a10 - 1) < v233
      || (int)(v234 + a10 - 1) < v234
      || (int)(v231 + a10 - 1) < v231
      || (int)(v232 + a10 - 1) < v232;
  v240 = vdupq_n_s32(a7);
  v241 = 2 * v36;
  result = -v231;
  v242 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v229));
  do
  {
    v243 = a10 < 8 || v239;
    if ((v243 & 1) != 0)
    {
      v244 = 0;
      do
      {
LABEL_146:
        v342 = a1->u16[v244];
        v343.i16[0] = *((_WORD *)v18 + v233 + (int)v244);
        v343.i16[1] = *((_WORD *)v18 + (int)v244 - v233);
        v343.i16[2] = *((_WORD *)v18 + v234 + (int)v244);
        v343.i16[3] = *((_WORD *)v18 + (int)v244 - v234);
        v344 = vmovl_s16(v343);
        v345 = vdupq_n_s32(v342);
        v346 = vsubq_s32(v344, v345);
        v347 = vabdq_s32(v344, v345);
        v348 = (int8x16_t)vminq_s32(v347, vmaxq_s32(vsubq_s32(v240, (int32x4_t)vshlq_u32((uint32x4_t)v347, v242)), (int32x4_t)0));
        v349.i16[0] = *((_WORD *)v18 + v231 + (int)v244);
        v349.i16[1] = *((_WORD *)v18 + (int)v244 - v231);
        v349.i16[2] = *((_WORD *)v18 + v232 + (int)v244);
        v350 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v346), (int8x16_t)vnegq_s32((int32x4_t)v348), v348);
        v349.i16[3] = *((_WORD *)v18 + (int)v244 - v232);
        v351 = vmovl_s16(v349);
        v352 = vsubq_s32(v351, v345);
        v353 = vabdq_s32(v351, v345);
        v354 = (int8x16_t)vminq_s32(v353, vmaxq_s32(vsubq_s32(v240, (int32x4_t)vshlq_u32((uint32x4_t)v353, v242)), (int32x4_t)0));
        v355 = vaddvq_s32(v350);
        v350.i32[0] = vaddvq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v352), (int8x16_t)vnegq_s32((int32x4_t)v354), v354));
        a1->i16[v244++] = v342 + ((v350.i32[0] + 2 * v355 + ((v350.i32[0] + 2 * v355) >> 31) + 8) >> 4);
      }
      while (a10 != v244);
      goto LABEL_137;
    }
    v245 = 0;
    v246 = -v232;
    v247 = v232;
    v248 = -v231;
    v249 = v231;
    v250 = -v234;
    v251 = v234;
    v252 = -v233;
    v253 = v233;
    do
    {
      v254 = (int16x8_t)a1[v245 / 0x10];
      v255 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v254.i8);
      v256 = (int32x4_t)vmovl_high_u16((uint16x8_t)v254);
      v257 = *(int16x8_t *)((char *)v18 + 2 * v253);
      v258 = *(int16x8_t *)((char *)v18 + 2 * v252);
      v259 = vmovl_s16(*(int16x4_t *)v257.i8);
      v260 = vmovl_high_s16(v257);
      v261 = vmovl_s16(*(int16x4_t *)v258.i8);
      v262 = *(int16x8_t *)((char *)v18 + 2 * v251);
      v263 = vmovl_high_s16(v258);
      v264 = vmovl_high_s16(v262);
      v265 = vmovl_s16(*(int16x4_t *)v262.i8);
      v266 = *(int16x8_t *)((char *)v18 + 2 * v250);
      v267 = vmovl_s16(*(int16x4_t *)v266.i8);
      v268 = vmovl_high_s16(v266);
      v269 = (int32x4_t)vsubw_high_u16((uint32x4_t)v260, (uint16x8_t)v254);
      v270 = (int32x4_t)vsubw_u16((uint32x4_t)v259, *(uint16x4_t *)v254.i8);
      v271 = vabdq_s32(v260, v256);
      v272 = vabdq_s32(v259, v255);
      v273 = (int32x4_t)vsubw_high_u16((uint32x4_t)v263, (uint16x8_t)v254);
      v274 = (int32x4_t)vsubw_u16((uint32x4_t)v261, *(uint16x4_t *)v254.i8);
      v275 = vabdq_s32(v263, v256);
      v276 = vabdq_s32(v261, v255);
      v277 = (int8x16_t)vminq_s32(v271, vmaxq_s32(vsubq_s32(v240, (int32x4_t)vshlq_u32((uint32x4_t)v271, v242)), (int32x4_t)0));
      v278 = (int8x16_t)vminq_s32(v272, vmaxq_s32(vsubq_s32(v240, (int32x4_t)vshlq_u32((uint32x4_t)v272, v242)), (int32x4_t)0));
      v279 = (int8x16_t)vminq_s32(v275, vmaxq_s32(vsubq_s32(v240, (int32x4_t)vshlq_u32((uint32x4_t)v275, v242)), (int32x4_t)0));
      v280 = (int8x16_t)vminq_s32(v276, vmaxq_s32(vsubq_s32(v240, (int32x4_t)vshlq_u32((uint32x4_t)v276, v242)), (int32x4_t)0));
      v281 = (int8x16_t)vcltzq_s32(v274);
      v282 = (int8x16_t)vcltzq_s32(v273);
      v283 = (int32x4_t)vsubw_u16((uint32x4_t)v265, *(uint16x4_t *)v254.i8);
      v284 = (int32x4_t)vsubw_high_u16((uint32x4_t)v264, (uint16x8_t)v254);
      v285 = vabdq_s32(v265, v255);
      v286 = vabdq_s32(v264, v256);
      v287 = (int8x16_t)vminq_s32(v285, vmaxq_s32(vsubq_s32(v240, (int32x4_t)vshlq_u32((uint32x4_t)v285, v242)), (int32x4_t)0));
      v288 = (int8x16_t)vminq_s32(v286, vmaxq_s32(vsubq_s32(v240, (int32x4_t)vshlq_u32((uint32x4_t)v286, v242)), (int32x4_t)0));
      v289 = (int8x16_t)vcltzq_s32(v283);
      v290 = (int32x4_t)vsubw_high_u16((uint32x4_t)v268, (uint16x8_t)v254);
      v291 = (int32x4_t)vsubw_u16((uint32x4_t)v267, *(uint16x4_t *)v254.i8);
      v292 = vabdq_s32(v268, v256);
      v293 = vabdq_s32(v267, v255);
      v294 = (int8x16_t)vminq_s32(v292, vmaxq_s32(vsubq_s32(v240, (int32x4_t)vshlq_u32((uint32x4_t)v292, v242)), (int32x4_t)0));
      v295 = (int8x16_t)vminq_s32(v293, vmaxq_s32(vsubq_s32(v240, (int32x4_t)vshlq_u32((uint32x4_t)v293, v242)), (int32x4_t)0));
      v296 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v269), (int8x16_t)vnegq_s32((int32x4_t)v277), v277);
      v297 = *(int16x8_t *)((char *)v18 + 2 * v249);
      v298 = vmovl_high_s16(v297);
      v299 = vmovl_s16(*(int16x4_t *)v297.i8);
      v300 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v270), (int8x16_t)vnegq_s32((int32x4_t)v278), v278);
      v301 = *(int16x8_t *)((char *)v18 + 2 * v248);
      v302 = vmovl_high_s16(v301);
      v303 = vmovl_s16(*(int16x4_t *)v301.i8);
      v304 = (int32x4_t)vbslq_s8(v282, (int8x16_t)vnegq_s32((int32x4_t)v279), v279);
      v305 = *(int16x8_t *)((char *)v18 + 2 * v247);
      v306 = vmovl_high_s16(v305);
      v307 = vmovl_s16(*(int16x4_t *)v305.i8);
      v308 = (int32x4_t)vbslq_s8(v281, (int8x16_t)vnegq_s32((int32x4_t)v280), v280);
      v309 = *(int16x8_t *)((char *)v18 + 2 * v246);
      v310 = (int32x4_t)vsubw_u16((uint32x4_t)v299, *(uint16x4_t *)v254.i8);
      v311 = (int32x4_t)vsubw_high_u16((uint32x4_t)v298, (uint16x8_t)v254);
      v312 = vabdq_s32(v299, v255);
      v313 = vabdq_s32(v298, v256);
      v314 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v284), (int8x16_t)vnegq_s32((int32x4_t)v288), v288);
      v315 = (int8x16_t)vminq_s32(v312, vmaxq_s32(vsubq_s32(v240, (int32x4_t)vshlq_u32((uint32x4_t)v312, v242)), (int32x4_t)0));
      v316 = (int8x16_t)vminq_s32(v313, vmaxq_s32(vsubq_s32(v240, (int32x4_t)vshlq_u32((uint32x4_t)v313, v242)), (int32x4_t)0));
      v317 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v290), (int8x16_t)vnegq_s32((int32x4_t)v294), v294);
      v318 = (int32x4_t)vsubw_u16((uint32x4_t)v303, *(uint16x4_t *)v254.i8);
      v319 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v291), (int8x16_t)vnegq_s32((int32x4_t)v295), v295);
      v320 = (int32x4_t)vsubw_high_u16((uint32x4_t)v302, (uint16x8_t)v254);
      v321 = vabdq_s32(v303, v255);
      v322 = vabdq_s32(v302, v256);
      v323 = (int8x16_t)vminq_s32(v321, vmaxq_s32(vsubq_s32(v240, (int32x4_t)vshlq_u32((uint32x4_t)v321, v242)), (int32x4_t)0));
      v324 = (int8x16_t)vminq_s32(v322, vmaxq_s32(vsubq_s32(v240, (int32x4_t)vshlq_u32((uint32x4_t)v322, v242)), (int32x4_t)0));
      v325 = vabdq_s32(v307, v255);
      v326 = vaddq_s32(v308, v300);
      v327 = (int8x16_t)vminq_s32(v325, vmaxq_s32(vsubq_s32(v240, (int32x4_t)vshlq_u32((uint32x4_t)v325, v242)), (int32x4_t)0));
      v328 = vmovl_s16(*(int16x4_t *)v309.i8);
      v329 = vmovl_high_s16(v309);
      v330 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_u16((uint32x4_t)v307, *(uint16x4_t *)v254.i8)), (int8x16_t)vnegq_s32((int32x4_t)v327), v327);
      v331 = vabdq_s32(v306, v256);
      v332 = vaddq_s32((int32x4_t)vbslq_s8(v289, (int8x16_t)vnegq_s32((int32x4_t)v287), v287), v319);
      v333 = (int8x16_t)vminq_s32(v331, vmaxq_s32(vsubq_s32(v240, (int32x4_t)vshlq_u32((uint32x4_t)v331, v242)), (int32x4_t)0));
      v334 = vabdq_s32(v329, v256);
      v335 = vabdq_s32(v328, v255);
      v336 = vaddq_s32(v326, v332);
      v337 = vaddq_s32(vaddq_s32(v304, v296), vaddq_s32(v314, v317));
      v338 = (int8x16_t)vminq_s32(v334, vmaxq_s32(vsubq_s32(v240, (int32x4_t)vshlq_u32((uint32x4_t)v334, v242)), (int32x4_t)0));
      v339 = (int8x16_t)vminq_s32(v335, vmaxq_s32(vsubq_s32(v240, (int32x4_t)vshlq_u32((uint32x4_t)v335, v242)), (int32x4_t)0));
      v340 = vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v318), (int8x16_t)vnegq_s32((int32x4_t)v323), v323), (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v310), (int8x16_t)vnegq_s32((int32x4_t)v315), v315)), v330), (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_u16((uint32x4_t)v328, *(uint16x4_t *)v254.i8)), (int8x16_t)vnegq_s32((int32x4_t)v339), v339)), vaddq_s32(v336, v336));
      v341 = vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v320), (int8x16_t)vnegq_s32((int32x4_t)v324), v324), (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v311), (int8x16_t)vnegq_s32((int32x4_t)v316), v316)), (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_high_u16((uint32x4_t)v306, (uint16x8_t)v254)), (int8x16_t)vnegq_s32((int32x4_t)v333), v333)), (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubw_high_u16((uint32x4_t)v329, (uint16x8_t)v254)), (int8x16_t)vnegq_s32((int32x4_t)v338), v338)), vaddq_s32(v337, v337));
      a1[v245 / 0x10] = (uint16x8_t)vaddq_s16(v254, vrshrn_high_n_s32(vrshrn_n_s32(vsraq_n_s32(v340, v340, 0x1FuLL), 4uLL), vsraq_n_s32(v341, v341, 0x1FuLL), 4uLL));
      v253 += 8;
      v252 += 8;
      v251 += 8;
      v245 += 16;
      v250 += 8;
      v249 += 8;
      v248 += 8;
      v247 += 8;
      v246 += 8;
    }
    while (((2 * a10) & 0x1FFFFFFF0) != v245);
    v244 = a10 & 0xFFFFFFF8;
    if (v244 != a10)
      goto LABEL_146;
LABEL_137:
    v18 += 3;
    a1 = (uint16x8_t *)((char *)a1 + v241);
    --v16;
  }
  while (v16);
  return result;
}

void *dav1d_prep_grain_16bpc(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  void *result;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  int v22;
  size_t v23;
  int v24;

  v10 = *(_QWORD *)(a2 + 8);
  v11 = ~(-1 << *(_DWORD *)(a2 + 68));
  result = (void *)(*a1)(a5, v10, v11);
  if (*(_DWORD *)(v10 + 40) || *(_DWORD *)(v10 + 36))
    result = (void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))a1[(*(_DWORD *)(a3 + 64) - 1)
                                                                                           + 1])(a5 + 12136, a5, v10, 0, v11);
  if (*(_DWORD *)(v10 + 44) || *(_DWORD *)(v10 + 36))
    result = (void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1[(*(_DWORD *)(a3 + 64) - 1)
                                                                                            + 1])(a5 + 24272, a5, v10, 1, v11);
  v13 = *(_DWORD *)(v10 + 4);
  if (v13)
    result = generate_scaling(*(_DWORD *)(a3 + 68), (unsigned __int8 *)(v10 + 8), v13, a4);
  v14 = *(_DWORD *)(v10 + 40);
  if (v14)
    result = generate_scaling(*(_DWORD *)(a3 + 68), (unsigned __int8 *)(v10 + 48), v14, a4 + 4096);
  v15 = *(_DWORD *)(v10 + 44);
  if (v15)
    result = generate_scaling(*(_DWORD *)(a3 + 68), (unsigned __int8 *)(v10 + 68), v15, a4 + 0x2000);
  if (*(_DWORD *)(v10 + 4))
  {
    v16 = *(_DWORD *)(a3 + 64);
    if (!v16)
      return result;
  }
  else
  {
    v17 = *(_QWORD *)(a2 + 40);
    v18 = v17 * *(int *)(a2 + 60);
    v19 = *(char **)(a2 + 16);
    if ((v18 & 0x8000000000000000) != 0)
    {
      result = memcpy(&v19[v18 - v17], (const void *)(*(_QWORD *)(a3 + 16) + v18 - v17), -(uint64_t)v18);
      v16 = *(_DWORD *)(a3 + 64);
      if (!v16)
        return result;
    }
    else
    {
      result = memcpy(v19, *(const void **)(a3 + 16), v18);
      v16 = *(_DWORD *)(a3 + 64);
      if (!v16)
        return result;
    }
  }
  if (!*(_DWORD *)(v10 + 36))
  {
    v20 = *(_QWORD *)(a2 + 48);
    v21 = v16 == 1;
    v22 = *(_DWORD *)(a2 + 60);
    if (v21)
      ++v22;
    v23 = v20 * (v22 >> v21);
    v24 = *(_DWORD *)(v10 + 40);
    if ((v23 & 0x8000000000000000) != 0)
    {
      if (!v24)
        result = memcpy((void *)(*(_QWORD *)(a2 + 24) + v23 - v20), (const void *)(*(_QWORD *)(a3 + 24) + v23 - v20), -(uint64_t)v23);
      if (!*(_DWORD *)(v10 + 44))
        return memcpy((void *)(*(_QWORD *)(a2 + 32) + v23 - v20), (const void *)(*(_QWORD *)(a3 + 32) + v23 - v20), -(uint64_t)v23);
    }
    else
    {
      if (!v24)
        result = memcpy(*(void **)(a2 + 24), *(const void **)(a3 + 24), v23);
      if (!*(_DWORD *)(v10 + 44))
        return memcpy(*(void **)(a2 + 32), *(const void **)(a3 + 32), v23);
    }
  }
  return result;
}

char *generate_scaling(int a1, unsigned __int8 *a2, int a3, char *__b)
{
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char *result;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int32x4_t v31;
  unint64_t v32;
  int32x4_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int8x16_t *v38;
  char *v39;
  char *v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int32x4_t v46;
  unint64_t v47;
  unsigned int v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int8x16_t v54;
  unint64_t v55;
  int8x16_t *v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int8x8_t v65;
  int8x8_t *v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  int v70;
  int v71;
  int i;
  int8x16x2_t v73;
  int8x16x4_t v74;
  int8x16x4_t v75;

  v7 = a1 - 8;
  v8 = 1 << a1;
  memset(__b, a2[1], *a2 << (a1 - 8));
  v9 = (a3 - 1);
  if (a3 >= 2)
  {
    v10 = 0;
    do
    {
      v11 = &a2[2 * v10];
      v12 = *v11;
      v13 = v11[1];
      ++v10;
      v14 = &a2[2 * v10];
      v15 = *v14;
      v16 = v15 - v12;
      v17 = (v14[1] - v13) * (((v16 >> 1) + 0x10000) / v16);
      if ((v15 - v12) >= 2)
      {
        v20 = 0;
        v18 = v16 & 0x7FFFFFFE;
        v19 = (v16 & 0x7FFFFFFE) * v17 + 0x8000;
        v21 = v16 & 0x7FFFFFFE;
        v22 = v12;
        do
        {
          v23 = v20 * v17 + 0x8000;
          __b[v22 << v7] = v13 + BYTE2(v23);
          __b[(v22 + 1) << v7] = v13 + ((v23 + v17) >> 16);
          v20 += 2;
          v22 += 2;
          v21 -= 2;
        }
        while (v21);
        if (v16 == v18)
          continue;
      }
      else
      {
        v18 = 0;
        v19 = 0x8000;
      }
      v24 = v18 + v12;
      do
      {
        __b[v24 << v7] = v13 + BYTE2(v19);
        v19 += v17;
        ++v24;
      }
      while (v15 != v24);
    }
    while (v10 != v9);
  }
  result = (char *)memset(&__b[a2[2 * (int)v9] << v7], a2[2 * (int)v9 + 1], v8 - (a2[2 * (int)v9] << v7));
  if (a3 >= 2)
  {
    v26 = (1 << v7);
    if ((int)v26 > 1)
    {
      v27 = 0;
      v28 = (int)v26 >> 1;
      v29 = v26 - 1;
      v30 = (v26 - 1) & 0xFFFFFFFFFFFFFFE0;
      v31 = vdupq_n_s32((int)v26 >> 1);
      v32 = (v26 - 1) & 0xFFFFFFFFFFFFFFF8;
      result = __b + 1;
      v33 = vnegq_s32(vdupq_n_s32(v7));
      while (1)
      {
        v34 = a2[2 * v27++];
        v35 = (a2[2 * v27] - v34) << v7;
        if ((int)v35 >= 1)
          break;
LABEL_15:
        if (v27 == v9)
          return result;
      }
      v36 = 0;
      v37 = v34 << v7;
      v38 = (int8x16_t *)&__b[v37 + 17];
      v39 = &result[v37];
      v40 = &__b[v37];
      while (1)
      {
        v41 = __b[v36 + v37 + v26];
        v42 = __b[v36 + v37];
        v43 = v41 - v42;
        if (v26 >= 9)
        {
          v46 = vdupq_n_s32(v43);
          if (v26 < 0x21)
          {
            v47 = 0;
            v48 = (int)v26 >> 1;
LABEL_27:
            v45 = v28 + v43 * v32;
            v61 = vdupq_n_s32(v48);
            v62 = vmlaq_s32(v61, v46, (int32x4_t)xmmword_196889B60);
            v63 = vmlaq_s32(v61, v46, (int32x4_t)xmmword_196889B70);
            v64 = vdupq_n_s32(8 * v43);
            v65 = vdup_n_s8(v42);
            v66 = (int8x8_t *)&v39[v47];
            v67 = v47 - v32;
            do
            {
              v73.val[0] = (int8x16_t)vshlq_s32(vaddq_s32(v63, v46), v33);
              v73.val[1] = (int8x16_t)vshlq_s32(vaddq_s32(v62, v46), v33);
              *v66++ = vadd_s8(v65, (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v73, (int8x16_t)xmmword_19689A990));
              v63 = vaddq_s32(v63, v64);
              v62 = vaddq_s32(v62, v64);
              v67 += 8;
            }
            while (v67);
            v44 = v32 | 1;
            if (v29 == v32)
              goto LABEL_18;
            goto LABEL_32;
          }
          v49 = vmlaq_s32(v31, v46, (int32x4_t)xmmword_196889B90);
          v50 = vmlaq_s32(v31, v46, (int32x4_t)xmmword_196889B60);
          v51 = vmlaq_s32(v31, v46, (int32x4_t)xmmword_196889B70);
          v52 = vdupq_n_s32(16 * v43);
          v53 = vmlaq_s32(v31, v46, (int32x4_t)xmmword_196889B80);
          v54 = vdupq_n_s8(v42);
          v48 = v28 + v43 * v30;
          v55 = (v26 - 1) & 0xFFFFFFFFFFFFFFE0;
          v56 = v38;
          do
          {
            v57 = vaddq_s32(v51, v52);
            v58 = vaddq_s32(v50, v52);
            v59 = vaddq_s32(v49, v52);
            v60 = vaddq_s32(v53, v52);
            v74.val[0] = (int8x16_t)vshlq_s32(vaddq_s32(v51, v46), v33);
            v74.val[1] = (int8x16_t)vshlq_s32(vaddq_s32(v50, v46), v33);
            v74.val[2] = (int8x16_t)vshlq_s32(vaddq_s32(v49, v46), v33);
            v74.val[3] = (int8x16_t)vshlq_s32(vaddq_s32(v53, v46), v33);
            v75.val[0] = (int8x16_t)vshlq_s32(vaddq_s32(v57, v46), v33);
            v75.val[1] = (int8x16_t)vshlq_s32(vaddq_s32(v58, v46), v33);
            v75.val[2] = (int8x16_t)vshlq_s32(vaddq_s32(v59, v46), v33);
            v75.val[3] = (int8x16_t)vshlq_s32(vaddq_s32(v60, v46), v33);
            v56[-1] = vaddq_s8(v54, vqtbl4q_s8(v74, (int8x16_t)xmmword_19689A980));
            *v56 = vaddq_s8(v54, vqtbl4q_s8(v75, (int8x16_t)xmmword_19689A980));
            v51 = vaddq_s32(v57, v52);
            v50 = vaddq_s32(v58, v52);
            v49 = vaddq_s32(v59, v52);
            v53 = vaddq_s32(v60, v52);
            v56 += 2;
            v55 -= 32;
          }
          while (v55);
          if (v29 == v30)
            goto LABEL_18;
          v47 = (v26 - 1) & 0xFFFFFFFFFFFFFFE0;
          if (((v26 - 1) & 0x18) != 0)
            goto LABEL_27;
          v45 = v28 + v43 * v30;
          v44 = v30 | 1;
        }
        else
        {
          v44 = 1;
          v45 = (int)v26 >> 1;
        }
LABEL_32:
        v68 = v26 - v44;
        v69 = &v40[v44];
        v70 = v45 + v41 - v42;
        do
        {
          *v69++ = v42 + (v70 >> v7);
          v70 += v43;
          --v68;
        }
        while (v68);
LABEL_18:
        v36 += v26;
        v38 = (int8x16_t *)((char *)v38 + v26);
        v39 += v26;
        v40 += v26;
        if (v36 >= v35)
          goto LABEL_15;
      }
    }
    v71 = (a2[2] - *a2) << v7;
    if (v71 >= 1)
    {
      for (i = 0; i < v71; i += v26)
        ;
    }
  }
  return result;
}

uint64_t dav1d_apply_grain_row_16bpc(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v9;
  int v11;
  int v12;
  int v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  _BOOL4 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  _BOOL4 v54;
  uint64_t v55;

  v6 = a6;
  v9 = a3;
  v11 = *(_DWORD *)(a3 + 64);
  v12 = v11 == 1;
  v13 = v11 != 3;
  if (v11 == 3)
    v14 = *(_DWORD *)(a2 + 56);
  else
    v14 = *(_DWORD *)(a2 + 56) + 1;
  v15 = *(_DWORD **)(a2 + 8);
  v54 = *(_DWORD *)(*(_QWORD *)a2 + 24) == 0;
  v16 = 32 * a6;
  v17 = *(_QWORD *)(a3 + 16) + 2 * (*(_QWORD *)(a3 + 40) >> 1) * v16;
  v18 = ~(-1 << *(_DWORD *)(a2 + 68));
  v55 = v17;
  if (v15[1])
  {
    v47 = v14;
    v48 = 32 * a6;
    v51 = result;
    HIDWORD(v44) = ~(-1 << *(_DWORD *)(a2 + 68));
    v20 = a4;
    v21 = v15;
    v22 = *(_DWORD *)(a3 + 64);
    v24 = v11 != 3;
    (*(void (**)(uint64_t, uint64_t))(result + 32))(*(_QWORD *)(a2 + 16) + 2 * (*(_QWORD *)(a2 + 40) >> 1) * v16, *(_QWORD *)(a3 + 16) + 2 * (*(_QWORD *)(a3 + 40) >> 1) * v16);
    v14 = v47;
    v13 = v24;
    v9 = a3;
    v16 = v48;
    result = v51;
    v11 = v22;
    v15 = v21;
    v18 = HIDWORD(v44);
    v17 = v55;
    a4 = v20;
    v6 = a6;
  }
  v25 = v15[10];
  if (v25 || v15[11] || v15[9])
  {
    v26 = (v14 >> v13);
    v27 = *(int *)(a2 + 56);
    v28 = *(_DWORD *)(a2 + 60) - v16;
    if (v28 >= 32)
      v28 = 32;
    v29 = ((v28 + v12) >> v12);
    if ((v27 & v13) != 0 && (int)v29 > 0)
    {
      v30 = v11 == 1;
      v31 = 2 * (*(_QWORD *)(v9 + 40) >> 1 << (v11 == 1));
      v32 = v17;
      v33 = v29;
      do
      {
        *(_WORD *)(v32 + 2 * v27) = *(_WORD *)(v32 + 2 * ((int)v27 - 1));
        v32 += v31;
        --v33;
      }
      while (v33);
      v34 = ((*(uint64_t *)(a2 + 48) >> 1) * v16) >> v30;
      if (v15[9])
        goto LABEL_16;
    }
    else
    {
      v34 = ((*(uint64_t *)(a2 + 48) >> 1) * v16) >> (v11 == 1);
      if (v15[9])
      {
LABEL_16:
        v35 = result + 40;
        v36 = 2 * v34;
        v37 = v26;
        v49 = v6;
        v38 = a4;
        v39 = v29;
        v52 = v15;
        (*(void (**)(uint64_t, uint64_t, _QWORD))(result + 40 + 8 * (*(_DWORD *)(v9 + 64) - 1)))(*(_QWORD *)(a2 + 24) + v36, *(_QWORD *)(v9 + 24) + v36, *(_QWORD *)(v9 + 48));
        HIDWORD(v45) = v54;
        LODWORD(v45) = 1;
        LODWORD(v44) = v49;
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, int))(v35 + 8 * (*(_DWORD *)(v9 + 64) - 1)))(*(_QWORD *)(a2 + 32) + v36, *(_QWORD *)(v9 + 32) + v36, *(_QWORD *)(v9 + 48), v52, v37, v38, a5 + 24272, v39, v44, v55, *(_QWORD *)(v9 + 40), v45, v18);
      }
    }
    if (v25)
    {
      v50 = a4;
      v53 = result;
      v40 = v17;
      v41 = v26;
      v42 = v29;
      v43 = v15;
      (*(void (**)(uint64_t, uint64_t, _QWORD))(result + 8 * (*(_DWORD *)(v9 + 64) - 1) + 40))(*(_QWORD *)(a2 + 24) + 2 * v34, *(_QWORD *)(v9 + 24) + 2 * v34, *(_QWORD *)(v9 + 48));
      a4 = v50;
      result = v53;
      v29 = v42;
      v26 = v41;
      v15 = v43;
      v17 = v40;
    }
    if (v15[11])
    {
      HIDWORD(v46) = v54;
      LODWORD(v46) = 1;
      LODWORD(v44) = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, int))(result + 8 * (*(_DWORD *)(v9 + 64) - 1) + 40))(*(_QWORD *)(a2 + 32) + 2 * v34, *(_QWORD *)(v9 + 32) + 2 * v34, *(_QWORD *)(v9 + 48), v15, v26, a4 + 0x2000, a5 + 24272, v29, v44, v17, *(_QWORD *)(v9 + 40), v46, v18);
    }
  }
  return result;
}

uint64_t generate_grain_y_c(uint64_t result, _DWORD *a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t i;
  signed int v10;
  signed int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t j;
  uint64_t v18;
  uint64_t k;
  uint64_t v20;
  int v21;
  __int16 v22;
  __int16 v23;
  int v24;
  __int16 *v25;
  int v26;
  char *v27;
  __int16 *v28;
  uint64_t m;
  int v30;
  int v31;
  int v32;
  int v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  __int16 *v37;
  uint64_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  signed int v63;
  __int16 v64;
  __int16 v65;
  signed int v66;
  __int16 v67;
  __int16 v68;
  signed int v69;
  __int16 v70;
  __int16 v71;
  signed int v72;
  __int16 v73;
  __int16 v74;
  signed int v75;
  __int16 v76;
  __int16 v77;
  signed int v78;
  __int16 v79;
  __int16 v80;
  signed int v81;
  __int16 v82;
  __int16 v83;
  signed int v84;
  __int16 v85;
  __int16 v86;
  signed int v87;
  __int16 v88;
  __int16 v89;
  signed int v90;
  __int16 v91;
  __int16 v92;
  signed int v93;
  __int16 v94;
  __int16 v95;
  signed int v96;
  __int16 v97;
  __int16 v98;

  v3 = 0;
  v4 = __clz(a3);
  v5 = *a2;
  v6 = v4 + a2[46] - 20;
  v7 = 128 << (24 - v4);
  v8 = result;
  do
  {
    for (i = 0; i != 164; i += 2)
    {
      v5 = (((((v5 >> 12) ^ (v5 >> 3)) ^ (v5 ^ (v5 >> 1))) & 1) << 15) | (v5 >> 1);
      *(_WORD *)(v8 + i) = ((1 << v6 >> 1) + dav1d_gaussian_sequence[(unsigned __int16)v5 >> 5]) >> v6;
    }
    ++v3;
    v8 += 164;
  }
  while (v3 != 73);
  v10 = -v7;
  v11 = v7 - 1;
  v12 = a2[23];
  v13 = a2[44];
  v14 = 1 << v13 >> 1;
  if ((v12 & 0x80000000) != 0)
  {
    v33 = v14 >> v13;
    v34 = vdupq_n_s32(v11);
    v35 = vdupq_n_s32(v10);
    v36 = vdupq_n_s32(v14 >> v13);
    v37 = (__int16 *)(result + 648);
    v38 = 70;
    do
    {
      v39 = *(int16x8_t *)(v37 - 75);
      v40 = *(int16x8_t *)(v37 - 67);
      v41 = vaddw_high_s16(v36, v39);
      v42 = vaddw_s16(v36, *(int16x4_t *)v39.i8);
      v43 = vaddw_high_s16(v36, v40);
      v44 = vaddw_s16(v36, *(int16x4_t *)v40.i8);
      *(int16x8_t *)(v37 - 75) = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v35, v42), (int8x16_t)v35, (int8x16_t)vminq_s32(v42, v34)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v35, v41), (int8x16_t)v35, (int8x16_t)vminq_s32(v41, v34)));
      *(int16x8_t *)(v37 - 67) = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v35, v44), (int8x16_t)v35, (int8x16_t)vminq_s32(v44, v34)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v35, v43), (int8x16_t)v35, (int8x16_t)vminq_s32(v43, v34)));
      v45 = *(int16x8_t *)(v37 - 59);
      v46 = *(int16x8_t *)(v37 - 51);
      v47 = vaddw_high_s16(v36, v45);
      v48 = vaddw_s16(v36, *(int16x4_t *)v45.i8);
      v49 = vaddw_high_s16(v36, v46);
      v50 = vaddw_s16(v36, *(int16x4_t *)v46.i8);
      *(int16x8_t *)(v37 - 59) = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v35, v48), (int8x16_t)v35, (int8x16_t)vminq_s32(v48, v34)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v35, v47), (int8x16_t)v35, (int8x16_t)vminq_s32(v47, v34)));
      *(int16x8_t *)(v37 - 51) = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v35, v50), (int8x16_t)v35, (int8x16_t)vminq_s32(v50, v34)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v35, v49), (int8x16_t)v35, (int8x16_t)vminq_s32(v49, v34)));
      v51 = *(int16x8_t *)(v37 - 43);
      v52 = *(int16x8_t *)(v37 - 35);
      v53 = vaddw_high_s16(v36, v51);
      v54 = vaddw_s16(v36, *(int16x4_t *)v51.i8);
      *(int16x8_t *)(v37 - 43) = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v35, v54), (int8x16_t)v35, (int8x16_t)vminq_s32(v54, v34)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v35, v53), (int8x16_t)v35, (int8x16_t)vminq_s32(v53, v34)));
      v55 = vaddw_high_s16(v36, v52);
      v56 = vaddw_s16(v36, *(int16x4_t *)v52.i8);
      *(int16x8_t *)(v37 - 35) = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v35, v56), (int8x16_t)v35, (int8x16_t)vminq_s32(v56, v34)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v35, v55), (int8x16_t)v35, (int8x16_t)vminq_s32(v55, v34)));
      v57 = *(int16x8_t *)(v37 - 27);
      v58 = *(int16x8_t *)(v37 - 19);
      v59 = vaddw_high_s16(v36, v57);
      v60 = vaddw_s16(v36, *(int16x4_t *)v57.i8);
      *(int16x8_t *)(v37 - 27) = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v35, v60), (int8x16_t)v35, (int8x16_t)vminq_s32(v60, v34)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v35, v59), (int8x16_t)v35, (int8x16_t)vminq_s32(v59, v34)));
      v61 = vaddw_high_s16(v36, v58);
      v62 = vaddw_s16(v36, *(int16x4_t *)v58.i8);
      *(int16x8_t *)(v37 - 19) = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v35, v62), (int8x16_t)v35, (int8x16_t)vminq_s32(v62, v34)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v35, v61), (int8x16_t)v35, (int8x16_t)vminq_s32(v61, v34)));
      v63 = v33 + *(v37 - 11);
      if (v63 >= v11)
        v64 = v11;
      else
        v64 = v33 + *(v37 - 11);
      if (v63 >= v10)
        v65 = v64;
      else
        v65 = v10;
      *(v37 - 11) = v65;
      v66 = v33 + *(v37 - 10);
      if (v66 >= v11)
        v67 = v11;
      else
        v67 = v33 + *(v37 - 10);
      if (v66 >= v10)
        v68 = v67;
      else
        v68 = v10;
      *(v37 - 10) = v68;
      v69 = v33 + *(v37 - 9);
      if (v69 >= v11)
        v70 = v11;
      else
        v70 = v33 + *(v37 - 9);
      if (v69 >= v10)
        v71 = v70;
      else
        v71 = v10;
      *(v37 - 9) = v71;
      v72 = v33 + *(v37 - 8);
      if (v72 >= v11)
        v73 = v11;
      else
        v73 = v33 + *(v37 - 8);
      if (v72 >= v10)
        v74 = v73;
      else
        v74 = v10;
      *(v37 - 8) = v74;
      v75 = v33 + *(v37 - 7);
      if (v75 >= v11)
        v76 = v11;
      else
        v76 = v33 + *(v37 - 7);
      if (v75 >= v10)
        v77 = v76;
      else
        v77 = v10;
      *(v37 - 7) = v77;
      v78 = v33 + *(v37 - 6);
      if (v78 >= v11)
        v79 = v11;
      else
        v79 = v33 + *(v37 - 6);
      if (v78 >= v10)
        v80 = v79;
      else
        v80 = v10;
      *(v37 - 6) = v80;
      v81 = v33 + *(v37 - 5);
      if (v81 >= v11)
        v82 = v11;
      else
        v82 = v33 + *(v37 - 5);
      if (v81 >= v10)
        v83 = v82;
      else
        v83 = v10;
      *(v37 - 5) = v83;
      v84 = v33 + *(v37 - 4);
      if (v84 >= v11)
        v85 = v11;
      else
        v85 = v33 + *(v37 - 4);
      if (v84 >= v10)
        v86 = v85;
      else
        v86 = v10;
      *(v37 - 4) = v86;
      v87 = v33 + *(v37 - 3);
      if (v87 >= v11)
        v88 = v11;
      else
        v88 = v33 + *(v37 - 3);
      if (v87 >= v10)
        v89 = v88;
      else
        v89 = v10;
      *(v37 - 3) = v89;
      v90 = v33 + *(v37 - 2);
      if (v90 >= v11)
        v91 = v11;
      else
        v91 = v33 + *(v37 - 2);
      if (v90 >= v10)
        v92 = v91;
      else
        v92 = v10;
      *(v37 - 2) = v92;
      v93 = v33 + *(v37 - 1);
      if (v93 >= v11)
        v94 = v11;
      else
        v94 = v33 + *(v37 - 1);
      if (v93 >= v10)
        v95 = v94;
      else
        v95 = v10;
      *(v37 - 1) = v95;
      v96 = v33 + *v37;
      if (v96 >= v11)
        v97 = v11;
      else
        v97 = v33 + *v37;
      if (v96 >= v10)
        v98 = v97;
      else
        v98 = v10;
      *v37 = v98;
      v37 += 82;
      --v38;
    }
    while (v38);
  }
  else
  {
    v15 = -(int)v12;
    v16 = result + 166 * -(int)v12 + 498;
    for (j = 3; j != 73; ++j)
    {
      v18 = v16;
      for (k = 3; k != 79; ++k)
      {
        v24 = 0;
        v25 = (__int16 *)v18;
        v26 = -(int)v12;
        v27 = (char *)(a2 + 24);
        do
        {
          v28 = v25;
          for (m = v15; m | v26; ++m)
          {
            v31 = *v27++;
            v30 = v31;
            v32 = *v28++;
            v24 += v32 * v30;
            if (m >= v12)
              break;
          }
          ++v26;
          v25 += 82;
        }
        while (v26 != 1);
        v20 = result + 164 * j;
        v21 = ((v24 + v14) >> v13) + *(__int16 *)(v20 + 2 * k);
        if (v21 >= v11)
          v22 = v11;
        else
          v22 = v21;
        if (v21 >= v10)
          v23 = v22;
        else
          v23 = v10;
        *(_WORD *)(v20 + 2 * k) = v23;
        v18 += 2;
      }
      v16 += 164;
    }
  }
  return result;
}

unint64_t generate_grain_uv_420_c(_WORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4, unsigned int a5)
{
  return generate_grain_uv_c(a1, a2, a3, a4, 1u, 1, a5);
}

unint64_t generate_grain_uv_422_c(_WORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4, unsigned int a5)
{
  return generate_grain_uv_c(a1, a2, a3, a4, 1u, 0, a5);
}

unint64_t generate_grain_uv_444_c(_WORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4, unsigned int a5)
{
  return generate_grain_uv_c(a1, a2, a3, a4, 0, 0, a5);
}

unint64_t fgy_32x32xn_c(uint64_t a1, uint64_t a2, unint64_t a3, int *a4, unint64_t a5, uint64_t a6, uint64_t a7, int a8, double a9, double a10, double a11, double a12, double a13, int32x2_t a14, int32x2_t a15, int a16, unsigned int a17)
{
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t result;
  int v27;
  unint64_t v28;
  signed int v29;
  signed int v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int32x2_t v35;
  int32x2_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  _WORD *v59;
  unsigned __int16 *v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned __int16 *v66;
  _WORD *v67;
  unsigned int v68;
  int v69;
  __int16 v70;
  __int16 v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  _DWORD *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  __int16 v81;
  __int16 v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  int *v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  __int16 v100;
  __int16 v101;
  uint64_t v102;
  int32x2_t v103;
  int v104;
  int32x2_t v105;
  int32x2_t v106;
  int v107;
  int v108;
  int v109;
  int v110;
  __int16 v111;
  __int16 v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  int v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  int v145;
  uint64_t v146;
  int v147;
  int v148;
  int v149;
  int v150;
  _BYTE v151[8];
  uint64_t v152;

  v17 = 0;
  v152 = *MEMORY[0x1E0C80C00];
  v18 = a4[54];
  v116 = a4[53];
  v19 = a17;
  v20 = 24 - __clz(a17);
  v21 = 128 << v20;
  v22 = *a4;
  if (a16 > 0 && v116 != 0)
    v23 = 2;
  else
    v23 = 1;
  v24 = 173 * a16 + 105;
  v25 = 9472 * a16 + 45568;
  result = (unint64_t)v151;
  do
  {
    *(_DWORD *)&v151[4 * v17++] = (v25 & 0xFF00 | v24) ^ v22;
    v24 -= 173;
    v25 -= 9472;
  }
  while (v23 != v17);
  if (v18)
  {
    v19 = 235 << v20;
    v27 = 16 << v20;
  }
  else
  {
    v27 = 0;
  }
  if (a5)
  {
    LODWORD(v28) = 0;
    v29 = -v21;
    v30 = v21 - 1;
    if (a8 >= 2)
      v31 = 2;
    else
      v31 = a8;
    if (v116)
      v32 = a16 == 0;
    else
      v32 = 1;
    if (v32)
      v33 = 0;
    else
      v33 = v31;
    v140 = v33;
    v34 = a8;
    v35 = vdup_n_s32(v29);
    v36 = vdup_n_s32(v30);
    v113 = v23 & 2;
    v120 = (int)v33;
    v37 = 2 * (a3 >> 1) * (int)v33;
    v119 = a1 + v37;
    v141 = a3 & 0xFFFFFFFFFFFFFFFELL;
    v118 = a2 + v37;
    v38 = a5;
    v114 = v23;
    v115 = a5;
    do
    {
      v125 = v38;
      if (v38 >= 32)
        v39 = 32;
      else
        v39 = v38;
      v40 = a5 - v28;
      if ((int)a5 - (int)v28 >= 32)
        v41 = 32;
      else
        v41 = a5 - v28;
      v142 = v41;
      if (v116)
        v42 = (_DWORD)v28 == 0;
      else
        v42 = 1;
      v43 = !v42;
      if (v42)
        goto LABEL_42;
      if (a16 > 0 && v116 != 0)
      {
        v44 = v113;
        v45 = &v149;
        do
        {
          *(_QWORD *)v45 = *((_QWORD *)v45 - 1);
          v45 += 2;
          v44 -= 2;
        }
        while (v44);
        v46 = v113;
        if (v113)
          goto LABEL_42;
      }
      else
      {
        v46 = 0;
      }
      v47 = v23 - v46;
      v48 = &v149 + v46;
      do
      {
        *v48 = *(v48 - 2);
        ++v48;
        --v47;
      }
      while (v47);
LABEL_42:
      result = 0;
      v126 = v28;
      v49 = 2 * v28;
      v124 = a1 + v49;
      v123 = a2 + v49;
      v50 = v119 + v49;
      v136 = v49;
      v51 = v118 + v49;
      do
      {
        v52 = 4 * result;
        v53 = *(_DWORD *)&v151[4 * result];
        v54 = (((((v53 >> 12) ^ (v53 >> 3)) ^ (v53 ^ (v53 >> 1))) & 1) << 15) | (v53 >> 1);
        *(_DWORD *)&v151[v52] = v54;
        *(int *)((char *)&v147 + v52) = BYTE1(v54);
        ++result;
      }
      while (v23 != result);
      if (v40 >= 2)
        v40 = 2;
      if (v43)
        v55 = v40;
      else
        v55 = 0;
      v134 = v39;
      if ((int)v140 < a8)
      {
        result = v149;
        v56 = (v147 >> 3) & 0xFFFFFFFE;
        v143 = v39 - (int)v55;
        v57 = v136 + 2 * (int)v55;
        v145 = 2 * (v149 & 0xF);
        v58 = 2 * (v147 & 0xF);
        v59 = (_WORD *)(v119 + v57);
        v60 = (unsigned __int16 *)(v118 + v57);
        v137 = v55 + v56 + 9;
        v61 = (v56 + 8) | 1;
        v62 = (((v149 >> 3) & 0xFFFFFFFE) + 40) | 1;
        v63 = v120;
        do
        {
          if ((int)v55 < v142)
          {
            v64 = v143;
            result = a4[22];
            v65 = v137;
            v66 = v60;
            v67 = v59;
            do
            {
              v68 = *v66++;
              v69 = (((1 << result >> 1)
                    + *(unsigned __int8 *)(a6 + v68) * *(__int16 *)(a7 + 164 * (v58 + 9 + (int)v63) + 2 * v65)) >> result)
                  + v68;
              if (v69 >= v19)
                v70 = v19;
              else
                v70 = v69;
              if (v69 >= v27)
                v71 = v70;
              else
                v71 = v27;
              *v67++ = v71;
              ++v65;
              --v64;
            }
            while (v64);
          }
          if ((int)v55 >= 1)
          {
            v72 = 0;
            v75 = a4[22];
            result = (1 << v75 >> 1);
            v76 = &unk_19689A9A4;
            do
            {
              v73 = v63 + 9 + v58;
              v74 = v63 + 9 + v145;
              v77 = (*v76 * *(__int16 *)(a7 + 164 * v73 + 2 * (v61 + (int)v72))
                   + *(v76 - 1) * *(__int16 *)(a7 + 164 * v74 + 2 * (int)(v62 + v72))
                   + 16) >> 5;
              if (v77 >= v30)
                v78 = v30;
              else
                v78 = (*v76 * *(__int16 *)(a7 + 164 * v73 + 2 * (v61 + (int)v72))
                     + *(v76 - 1) * *(__int16 *)(a7 + 164 * v74 + 2 * (int)(v62 + v72))
                     + 16) >> 5;
              if (v77 >= v29)
                v79 = v78;
              else
                v79 = v29;
              v80 = ((int)(result + v79 * *(unsigned __int8 *)(a6 + *(unsigned __int16 *)(v51 + 2 * v72))) >> v75)
                  + *(unsigned __int16 *)(v51 + 2 * v72);
              if (v80 >= v19)
                v81 = v19;
              else
                v81 = v80;
              if (v80 >= v27)
                v82 = v81;
              else
                v82 = v27;
              *(_WORD *)(v50 + 2 * v72++) = v82;
              v76 += 2;
            }
            while (v55 != v72);
          }
          ++v63;
          v59 = (_WORD *)((char *)v59 + v141);
          v60 = (unsigned __int16 *)((char *)v60 + v141);
          v50 += v141;
          v51 += v141;
        }
        while (v63 != v34);
      }
      v84 = v123;
      v83 = v124;
      if ((int)v120 >= 1)
      {
        v146 = 0;
        v85 = (v147 >> 3) & 0xFFFFFFFE;
        result = (v148 >> 3) & 0xFFFFFFFE;
        v86 = v134 - (int)v55;
        v87 = v136 + 2 * (int)v55;
        v129 = 2 * (v150 & 0xF);
        v130 = 2 * (v148 & 0xF);
        v128 = 2 * (v149 & 0xF);
        v131 = 2 * (v147 & 0xF);
        v127 = v130 + 41;
        v88 = a1 + v87;
        v89 = a2 + v87;
        v90 = v55 + 9 + result;
        v91 = v55 + 9 + v85;
        v133 = (((v150 >> 3) & 0xFFFFFFFE) + 40) | 1;
        v135 = (((v149 >> 3) & 0xFFFFFFFE) + 40) | 1;
        v132 = (result + 8) | 1;
        v138 = v90;
        v139 = v86;
        do
        {
          if ((int)v55 < v142)
          {
            v92 = 0;
            result = v131 + 9 + (int)v146;
            v93 = &fgy_32x32xn_c_w[2 * v146];
            v94 = *v93;
            v95 = v93[1];
            v96 = a4[22];
            do
            {
              v97 = (v94 * *(__int16 *)(a7 + 164 * (v127 + (int)v146) + 2 * (v90 + (int)v92))
                   + v95 * *(__int16 *)(a7 + 164 * (int)result + 2 * (v91 + (int)v92))
                   + 16) >> 5;
              if (v97 >= v30)
                v98 = v30;
              else
                v98 = (v94 * *(__int16 *)(a7 + 164 * (v127 + (int)v146) + 2 * (v90 + (int)v92))
                     + v95 * *(__int16 *)(a7 + 164 * (int)result + 2 * (v91 + (int)v92))
                     + 16) >> 5;
              if (v97 < v29)
                v98 = v29;
              v99 = (((1 << v96 >> 1) + v98 * *(unsigned __int8 *)(a6 + *(unsigned __int16 *)(v89 + 2 * v92))) >> v96)
                  + *(unsigned __int16 *)(v89 + 2 * v92);
              if (v99 >= v19)
                v100 = v19;
              else
                v100 = (((1 << v96 >> 1) + v98 * *(unsigned __int8 *)(a6 + *(unsigned __int16 *)(v89 + 2 * v92))) >> v96)
                     + *(_WORD *)(v89 + 2 * v92);
              if (v99 >= v27)
                v101 = v100;
              else
                v101 = v27;
              *(_WORD *)(v88 + 2 * v92++) = v101;
            }
            while (v86 != v92);
          }
          if ((int)v55 >= 1)
          {
            v102 = 0;
            result = (int)v146 + 41 + v129;
            v103 = *(int32x2_t *)&fgy_32x32xn_c_w[2 * v146];
            v104 = a4[22];
            do
            {
              a14.i16[0] = *(_WORD *)(a7 + 164 * (int)result + 2 * (int)(v133 + v102));
              a14.i16[2] = *(_WORD *)(a7 + 164 * ((int)v146 + 9 + v131) + 2 * (int)(((v85 + 8) | 1) + v102));
              a15.i16[0] = *(_WORD *)(a7 + 164 * ((int)v146 + 41 + v130) + 2 * (v132 + (int)v102));
              a15.i16[2] = *(_WORD *)(a7 + 164 * ((int)v146 + 9 + v128) + 2 * (int)(v135 + v102));
              a15 = vmla_s32(vmul_s32(vrev64_s32(*(int32x2_t *)&fgy_32x32xn_c_w[2 * v102]), vshr_n_s32(vshl_n_s32(a15, 0x10uLL), 0x10uLL)), *(int32x2_t *)&fgy_32x32xn_c_w[2 * v102], vshr_n_s32(vshl_n_s32(a14, 0x10uLL), 0x10uLL));
              v105 = vshr_n_s32(vadd_s32(a15, (int32x2_t)0x1000000010), 5uLL);
              a14 = vcgt_s32(v35, v105);
              v106 = vmul_s32((int32x2_t)vbsl_s8((int8x8_t)a14, (int8x8_t)v35, (int8x8_t)vmin_s32(v105, v36)), v103);
              v107 = (v106.i32[0] + v106.i32[1] + 16) >> 5;
              if (v107 >= v30)
                v108 = v30;
              else
                v108 = (v106.i32[0] + v106.i32[1] + 16) >> 5;
              if (v107 >= v29)
                v109 = v108;
              else
                v109 = v29;
              v110 = (((1 << v104 >> 1) + v109 * *(unsigned __int8 *)(a6 + *(unsigned __int16 *)(v84 + 2 * v102))) >> v104)
                   + *(unsigned __int16 *)(v84 + 2 * v102);
              if (v110 >= v19)
                v111 = v19;
              else
                v111 = v110;
              if (v110 >= v27)
                v112 = v111;
              else
                v112 = v27;
              *(_WORD *)(v83 + 2 * v102++) = v112;
            }
            while (v55 != v102);
          }
          v88 += v141;
          v89 += v141;
          v83 += v141;
          v84 += v141;
          v86 = v139;
          ++v146;
          v90 = v138;
          v91 = v55 + 9 + v85;
        }
        while (v146 != v140);
      }
      v38 = v125 - 32;
      v28 = (v126 + 32);
      v23 = v114;
      LODWORD(a5) = v115;
      v34 = a8;
    }
    while (v28 < v115);
  }
  return result;
}

unint64_t fguv_32x32xn_420_c(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int a5, uint64_t a6, uint64_t a7, int a8, double a9, double a10, double a11, double a12, double a13, int32x2_t a14, int32x2_t a15, int a16, uint64_t a17, uint64_t a18, int a19, int a20,signed int a21)
{
  return fguv_32x32xn_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           1u,
           1u,
           a21);
}

unint64_t fguv_32x32xn_422_c(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int a5, uint64_t a6, uint64_t a7, int a8, double a9, double a10, double a11, double a12, double a13, int32x2_t a14, int32x2_t a15, int a16, uint64_t a17, uint64_t a18, int a19, int a20,signed int a21)
{
  return fguv_32x32xn_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           1u,
           0,
           a21);
}

unint64_t fguv_32x32xn_444_c(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int a5, uint64_t a6, uint64_t a7, int a8, double a9, double a10, double a11, double a12, double a13, int32x2_t a14, int32x2_t a15, int a16, uint64_t a17, uint64_t a18, int a19, int a20,signed int a21)
{
  return fguv_32x32xn_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           0,
           0,
           a21);
}

unint64_t generate_grain_uv_c(_WORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4, unsigned int a5, int a6, unsigned int a7)
{
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  uint64_t v17;
  signed int v18;
  signed int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t i;
  _WORD *v33;
  int v34;
  unint64_t result;
  __int16 v36;
  int v37;
  uint64_t v38;
  __int16 *v39;
  int v40;
  char *v41;
  char *v42;
  __int16 *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int16x8_t *v52;
  uint64_t v53;
  int32x4_t v54;
  int32x4_t v55;
  uint64_t v56;
  int16x8_t *v57;
  int32x4_t v58;
  int32x4_t v59;
  int16x8_t v60;
  uint64_t v61;
  __int16 *v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int16x8_t *v71;
  _WORD *v72;
  uint64_t j;
  uint64_t v74;
  int16x8_t *v75;
  int16x8_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  __int16 *v81;
  signed int v82;
  __int16 v83;
  __int16 v84;
  uint64_t v85;
  uint64_t v88;
  uint64_t v89;
  signed int v90;
  uint64_t v92;
  uint64_t v93;

  v7 = 0;
  v8 = __clz(a7);
  if (a4)
    v9 = 18904;
  else
    v9 = 46372;
  v10 = *a3 ^ v9;
  v11 = v8 + a3[46] - 20;
  v12 = 128 << (24 - v8);
  if (a5)
    v13 = 44;
  else
    v13 = 82;
  if (a6)
    v14 = 38;
  else
    v14 = 73;
  v15 = a1;
  do
  {
    v16 = v15;
    v17 = v13;
    do
    {
      v10 = (((((v10 >> 12) ^ (v10 >> 3)) ^ (v10 ^ (v10 >> 1))) & 1) << 15) | (v10 >> 1);
      *v16++ = ((1 << v11 >> 1) + dav1d_gaussian_sequence[(unsigned __int16)v10 >> 5]) >> v11;
      --v17;
    }
    while (v17);
    ++v7;
    v15 += 82;
  }
  while (v7 != v14);
  v18 = -v12;
  v19 = v12 - 1;
  v20 = (int)a3[23];
  LODWORD(v21) = v13 - 3;
  v22 = a3[44];
  v23 = 1 << v22 >> 1;
  if ((v20 & 0x80000000) == 0)
  {
    v24 = -v20;
    v25 = a5 + 1;
    if ((int)v21 <= 4)
      v21 = 4;
    else
      v21 = v21;
    v89 = v21;
    v26 = (2 * a3[23]) | 1;
    v27 = (2 * v20) | 1;
    v28 = (uint64_t)&a1[-83 * (int)v20 + 249];
    v85 = a2 + 16;
    v29 = 3;
    v90 = v18;
    while (1)
    {
      v30 = (((_DWORD)v29 - 3) << a6) + 3;
      v92 = v85 + 164 * v30;
      v93 = v29;
      v31 = a2 + 164 * v30;
      v88 = v28;
      for (i = 3; i != v89; ++i)
      {
        v37 = 0;
        v38 = (((int)i - 3) << a5) + 3;
        v39 = (__int16 *)v28;
        v40 = v24;
        v41 = (char *)&a3[7 * a4 + 30];
        do
        {
          v42 = &v41[v26];
          v43 = v39;
          v44 = v27;
          v45 = v24;
          while (v45 | v40)
          {
            v47 = *v41++;
            v46 = v47;
            v48 = *v43++;
            v37 += v48 * v46;
            ++v45;
            if (!--v44)
            {
              v41 = v42;
              goto LABEL_30;
            }
          }
          if (a3[1])
          {
            v49 = 0;
            v50 = 0;
            v51 = v31;
            v52 = (int16x8_t *)(v92 + 2 * v38);
            while (1)
            {
              if (a5 >= 0xF)
              {
                v54 = 0uLL;
                v55 = (int32x4_t)v50;
                v56 = v25 & 0xFFFFFFF0;
                v57 = v52;
                v58 = 0uLL;
                v59 = 0uLL;
                do
                {
                  v60 = v57[-1];
                  v54 = vaddw_high_s16(v54, v60);
                  v55 = vaddw_s16(v55, *(int16x4_t *)v60.i8);
                  v59 = vaddw_high_s16(v59, *v57);
                  v58 = vaddw_s16(v58, *(int16x4_t *)v57->i8);
                  v57 += 2;
                  v56 -= 16;
                }
                while (v56);
                v50 = vaddvq_s32(vaddq_s32(vaddq_s32(v58, v55), vaddq_s32(v59, v54)));
                v53 = v25 & 0xFFFFFFF0;
                if (v53 == v25)
                  goto LABEL_37;
              }
              else
              {
                v53 = 0;
              }
              v61 = v25 - v53;
              v62 = (__int16 *)(v51 + 2 * (v38 + v53));
              do
              {
                v63 = *v62++;
                v50 += v63;
                --v61;
              }
              while (v61);
LABEL_37:
              ++v49;
              v52 = (int16x8_t *)((char *)v52 + 164);
              v51 += 164;
              if (v49 == a6 + 1)
              {
                v37 += ((int)(v50 + ((1 << (a6 + a5)) >> 1)) >> (a6 + a5)) * *v41;
                break;
              }
            }
          }
LABEL_30:
          ++v40;
          v39 += 82;
        }
        while (v40 != 1);
        v33 = &a1[82 * v93];
        v34 = ((v37 + v23) >> v22) + (__int16)v33[i];
        if (v34 >= v19)
          result = v19;
        else
          result = v34;
        if (v34 >= v90)
          v36 = result;
        else
          v36 = v90;
        v33[i] = v36;
        v28 += 2;
      }
      v29 = v93 + 1;
      v28 = v88 + 164;
      if (v93 + 1 == v14)
        return result;
    }
  }
  v64 = v23 >> v22;
  if ((int)v21 <= 4)
    v65 = 4;
  else
    v65 = v21;
  v66 = v65 - 3;
  v67 = (v65 - 3) & 0xFFFFFFFFFFFFFFF0;
  v68 = vdupq_n_s32(v64);
  v69 = vdupq_n_s32(v18);
  v70 = vdupq_n_s32(v19);
  v71 = (int16x8_t *)(a1 + 249);
  v72 = a1 + 246;
  for (j = 3; j != v14; ++j)
  {
    if (v66 >= 0x10)
    {
      result = (v65 - 3) & 0xFFFFFFFFFFFFFFF0;
      v75 = v71;
      do
      {
        v76 = v75[1];
        v77 = vaddw_high_s16(v68, *v75);
        v78 = vaddw_s16(v68, *(int16x4_t *)v75->i8);
        v79 = vaddw_high_s16(v68, v76);
        v80 = vaddw_s16(v68, *(int16x4_t *)v76.i8);
        *v75 = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v69, v78), (int8x16_t)v69, (int8x16_t)vminq_s32(v78, v70)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v69, v77), (int8x16_t)v69, (int8x16_t)vminq_s32(v77, v70)));
        v75[1] = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v69, v80), (int8x16_t)v69, (int8x16_t)vminq_s32(v80, v70)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v69, v79), (int8x16_t)v69, (int8x16_t)vminq_s32(v79, v70)));
        v75 += 2;
        result -= 16;
      }
      while (result);
      v74 = v67 | 3;
      if (v66 == v67)
        goto LABEL_50;
    }
    else
    {
      v74 = 3;
    }
    result = v65 - v74;
    v81 = &v72[v74];
    do
    {
      v82 = v64 + *v81;
      if (v82 >= v19)
        v83 = v19;
      else
        v83 = v64 + *v81;
      if (v82 >= v18)
        v84 = v83;
      else
        v84 = v18;
      *v81++ = v84;
      --result;
    }
    while (result);
LABEL_50:
    v71 = (int16x8_t *)((char *)v71 + 164);
    v72 += 82;
  }
  return result;
}

unint64_t fguv_32x32xn_c(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int a5, uint64_t a6, uint64_t a7, int a8, double a9, double a10, double a11, double a12, double a13, int32x2_t a14, int32x2_t a15, int a16, uint64_t a17, uint64_t a18, int a19, int a20,unsigned int a21,unsigned int a22,signed int a23)
{
  uint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  signed int v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t result;
  int v33;
  signed int v34;
  signed int v35;
  unsigned int v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  int *v40;
  int32x2_t v41;
  int32x2_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t i;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  __int16 v74;
  __int16 v75;
  unsigned __int16 *v76;
  signed int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  _DWORD *v85;
  int v86;
  __int16 v87;
  __int16 v88;
  int v89;
  int v90;
  unsigned __int16 *v91;
  signed int v92;
  int v93;
  int v94;
  signed int v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  int *v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  __int16 v113;
  __int16 v114;
  int v115;
  int v116;
  int v117;
  unsigned __int16 *v118;
  signed int v119;
  int v120;
  int v121;
  signed int v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  int32x2_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  __int16 v136;
  __int16 v137;
  int32x2_t v138;
  int32x2_t v139;
  int v140;
  int v141;
  int v142;
  unsigned int v143;
  unsigned __int16 *v144;
  signed int v145;
  int v146;
  int v147;
  signed int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  int v158;
  unsigned int v159;
  uint64_t v160;
  int v161;
  signed int v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  int v166;
  uint64_t v167;
  int v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  int v185;
  int v186;
  unint64_t v187;
  int32x2_t *v188;
  int v189;
  int v190;
  int v191;
  uint64_t v192;
  int v193;
  _DWORD *v194;
  _DWORD *v195;
  _DWORD *v196;
  char v197;
  uint64_t v198;
  int v199;
  int v200;
  int v201;
  int v202;
  _BYTE v203[8];
  uint64_t v204;

  v23 = 0;
  v204 = *MEMORY[0x1E0C80C00];
  v24 = a4[54];
  v155 = a4[53];
  v25 = 24 - __clz(a23);
  if (a20)
    v26 = 235;
  else
    v26 = 240;
  v27 = 128 << v25;
  v197 = v25;
  v28 = v26 << v25;
  v29 = *a4;
  if (a16 > 0 && v155 != 0)
    v30 = 2;
  else
    v30 = 1;
  v31 = 173 * a16 + 105;
  LODWORD(result) = 9472 * a16 + 45568;
  do
  {
    *(_DWORD *)&v203[4 * v23++] = (result & 0xFF00 | v31) ^ v29;
    v31 -= 173;
    result = (result - 9472);
  }
  while (v30 != v23);
  if (v24)
  {
    v33 = 16 << v197;
  }
  else
  {
    v28 = a23;
    v33 = 0;
  }
  if (a5 >= 1)
  {
    v34 = -v27;
    v35 = v27 - 1;
    v36 = 2u >> a22;
    v159 = 2u >> a22;
    if ((int)(2u >> a22) >= a8)
      v36 = a8;
    v37 = 0x20u >> a21;
    if (v155)
      v38 = a16 == 0;
    else
      v38 = 1;
    if (v38)
      v39 = 0;
    else
      v39 = v36;
    v162 = 2u >> a21;
    v179 = a18 >> 1;
    v40 = &a4[a19];
    v196 = v40 + 49;
    v194 = v40 + 51;
    v195 = v40 + 47;
    result = 0;
    v172 = (0x20u >> a22) + 3;
    v176 = v39;
    v151 = v30 & 2;
    v41 = vdup_n_s32(v34);
    v42 = vdup_n_s32(v35);
    v167 = a3 >> 1;
    v160 = (int)v39;
    v43 = 2 * (a3 >> 1) * (int)v39;
    v177 = a3 & 0xFFFFFFFFFFFFFFFELL;
    v152 = 2 * (0x20u >> a21);
    v188 = &fguv_32x32xn_c_w[2 * a21];
    v164 = a2 + v43;
    v158 = v37 + 3;
    v149 = a2 + v43;
    v150 = a1 + v43;
    v163 = a1 + v43;
    v44 = a5;
    v153 = 0x20u >> a21;
    v154 = v30;
    do
    {
      v161 = v44;
      v45 = v44;
      if (v44 >= v37)
        v45 = v37;
      v182 = v45;
      v46 = a5 - result;
      if ((int)v37 < a5 - (int)result)
        v46 = v37;
      v178 = v46;
      if (v155)
        v47 = result == 0;
      else
        v47 = 1;
      v48 = !v47;
      if (v47)
        goto LABEL_42;
      if (a16 > 0 && v155 != 0)
      {
        v49 = v151;
        v50 = &v201;
        do
        {
          *(_QWORD *)v50 = *((_QWORD *)v50 - 1);
          v50 += 2;
          v49 -= 2;
        }
        while (v49);
        v51 = v151;
        if (v151)
          goto LABEL_42;
      }
      else
      {
        v51 = 0;
      }
      v52 = v30 - v51;
      v53 = &v201 + v51;
      do
      {
        *v53 = *(v53 - 2);
        ++v53;
        --v52;
      }
      while (v52);
LABEL_42:
      for (i = 0; i != v30; ++i)
      {
        v55 = 4 * i;
        v56 = *(_DWORD *)&v203[4 * i];
        v57 = (((((v56 >> 12) ^ (v56 >> 3)) ^ (v56 ^ (v56 >> 1))) & 1) << 15) | (v56 >> 1);
        *(_DWORD *)&v203[v55] = v57;
        *(int *)((char *)&v199 + v55) = BYTE1(v57);
      }
      LODWORD(v58) = 2u >> a21;
      if (v162 >= v178)
        LODWORD(v58) = v178;
      if (v48)
        v58 = v58;
      else
        v58 = 0;
      v198 = v58;
      v187 = result;
      if ((int)v176 < a8)
      {
        v59 = ((v199 >> 4) + 3) * v162;
        v185 = ((v201 & 0xF) + 3) * v159;
        v189 = ((v199 & 0xF) + 3) * v159;
        v60 = v182 - (int)v58;
        v61 = 2 * (result + (int)v58);
        v62 = v150 + v61;
        v63 = v149 + v61;
        v64 = v58 + result;
        v65 = v58 + v59 + 3;
        v66 = v158 + ((v201 >> 4) + 3) * v162;
        v67 = v59 + 3;
        v68 = v163;
        v69 = v164;
        v192 = v160;
        do
        {
          if ((int)v198 < v178)
          {
            v70 = 0;
            v71 = a4[9];
            v72 = a4[22];
            do
            {
              v76 = (unsigned __int16 *)(a17 + 2 * v179 * (int)((_DWORD)v192 << a22) + 2 * ((v64 + (int)v70) << a21));
              v77 = *v76;
              if (a21)
                v77 = (unsigned __int16)((v77 + v76[1] + 1) >> 1);
              v78 = *(unsigned __int16 *)(v63 + 2 * v70);
              if (!v71)
              {
                v79 = (*v194 << v197) + ((*v196 * v77 + *v195 * v78) >> 6);
                v77 = a23;
                if (v79 < a23)
                  v77 = v79;
                if (v79 < 0)
                  v77 = 0;
              }
              v73 = (((1 << v72 >> 1)
                    + *(unsigned __int8 *)(a6 + v77)
                    * *(__int16 *)(a7 + 164 * (v189 + 3 + (int)v192) + 2 * (v65 + (int)v70))) >> v72)
                  + v78;
              if (v73 >= v28)
                v74 = v28;
              else
                v74 = (((1 << v72 >> 1)
                      + *(unsigned __int8 *)(a6 + v77)
                      * *(__int16 *)(a7 + 164 * (v189 + 3 + (int)v192) + 2 * (v65 + (int)v70))) >> v72)
                    + v78;
              if (v73 >= v33)
                v75 = v74;
              else
                v75 = v33;
              *(_WORD *)(v62 + 2 * v70++) = v75;
            }
            while (v60 != v70);
          }
          if ((int)v198 >= 1)
          {
            v80 = 0;
            v83 = a4[9];
            v84 = a4[22];
            v85 = (_DWORD *)v188 + 1;
            do
            {
              v82 = v192 + 3 + v185;
              v81 = v192 + 3 + v189;
              v89 = (*v85 * *(__int16 *)(a7 + 164 * v81 + 2 * (v67 + (int)v80))
                   + *(v85 - 1) * *(__int16 *)(a7 + 164 * v82 + 2 * (v66 + (int)v80))
                   + 16) >> 5;
              if (v89 >= v35)
                v90 = v35;
              else
                v90 = (*v85 * *(__int16 *)(a7 + 164 * v81 + 2 * (v67 + (int)v80))
                     + *(v85 - 1) * *(__int16 *)(a7 + 164 * v82 + 2 * (v66 + (int)v80))
                     + 16) >> 5;
              if (v89 < v34)
                v90 = v34;
              v91 = (unsigned __int16 *)(a17
                                       + 2 * v179 * (int)((_DWORD)v192 << a22)
                                       + 2 * (((int)result + (int)v80) << a21));
              v92 = *v91;
              if (a21)
                v92 = (unsigned __int16)((v92 + v91[1] + 1) >> 1);
              v93 = *(unsigned __int16 *)(v69 + 2 * v80);
              if (!v83)
              {
                result = v187;
                v94 = (*v194 << v197) + ((*v196 * v92 + *v195 * v93) >> 6);
                v95 = a23;
                if (v94 < a23)
                  v95 = v94;
                if (v94 >= 0)
                  v92 = v95;
                else
                  v92 = 0;
              }
              v85 += 2;
              v86 = (((1 << v84 >> 1) + v90 * *(unsigned __int8 *)(a6 + v92)) >> v84) + v93;
              if (v86 >= v28)
                v87 = v28;
              else
                v87 = v86;
              if (v86 >= v33)
                v88 = v87;
              else
                v88 = v33;
              *(_WORD *)(v68 + 2 * v80++) = v88;
            }
            while (v198 != v80);
          }
          v60 = v182 - (int)v198;
          v62 += v177;
          v63 += v177;
          v68 += v177;
          v69 += v177;
          ++v192;
        }
        while (v192 != a8);
      }
      if ((int)v160 >= 1)
      {
        v96 = 0;
        v97 = ((v199 >> 4) + 3) * v162;
        v98 = ((v200 >> 4) + 3) * v162;
        v169 = ((v202 & 0xF) + 3) * v159;
        v168 = ((v201 & 0xF) + 3) * v159;
        v170 = ((v200 & 0xF) + 3) * v159;
        v171 = ((v199 & 0xF) + 3) * v159;
        v166 = v171 + 3;
        v165 = v170 + v172;
        v99 = v182 - (int)v198;
        v100 = 2 * (result + (int)v198);
        v101 = a1 + v100;
        v102 = a2 + v100;
        v103 = v198 + result;
        v184 = v198 + 3 + v97;
        v186 = v198 + 3 + v98;
        v193 = v158 + ((v201 >> 4) + 3) * v162;
        v191 = v158 + ((v202 >> 4) + 3) * v162;
        v190 = v97 + 3;
        v104 = v98 + 3;
        v183 = v198 + result;
        v175 = v99;
        do
        {
          v105 = (_DWORD)v96 << a22;
          if ((int)v198 < v178)
          {
            v106 = 0;
            v107 = (int *)&fguv_32x32xn_c_w[2 * a22 + v96];
            v108 = *v107;
            v109 = v107[1];
            v110 = a4[9];
            v111 = a4[22];
            do
            {
              v115 = (v108 * *(__int16 *)(a7 + 164 * (int)(v165 + v96) + 2 * (v186 + (int)v106))
                    + v109 * *(__int16 *)(a7 + 164 * (v166 + (int)v96) + 2 * (v184 + (int)v106))
                    + 16) >> 5;
              if (v115 >= v35)
                v116 = v35;
              else
                v116 = (v108 * *(__int16 *)(a7 + 164 * (int)(v165 + v96) + 2 * (v186 + (int)v106))
                      + v109 * *(__int16 *)(a7 + 164 * (v166 + (int)v96) + 2 * (v184 + (int)v106))
                      + 16) >> 5;
              if (v115 >= v34)
                v117 = v116;
              else
                v117 = v34;
              v118 = (unsigned __int16 *)(a17 + 2 * v179 * v105 + 2 * ((v103 + (int)v106) << a21));
              v119 = *v118;
              if (a21)
                v119 = (unsigned __int16)((v119 + v118[1] + 1) >> 1);
              v120 = *(unsigned __int16 *)(v102 + 2 * v106);
              if (!v110)
              {
                result = v187;
                v121 = (*v194 << v197) + ((*v196 * v119 + *v195 * v120) >> 6);
                v122 = a23;
                if (v121 < a23)
                  v122 = v121;
                if (v121 >= 0)
                  v119 = v122;
                else
                  v119 = 0;
                v103 = v183;
              }
              v112 = (((1 << v111 >> 1) + v117 * *(unsigned __int8 *)(a6 + v119)) >> v111) + v120;
              if (v112 >= v28)
                v113 = v28;
              else
                v113 = v112;
              if (v112 >= v33)
                v114 = v113;
              else
                v114 = v33;
              *(_WORD *)(v101 + 2 * v106++) = v114;
            }
            while (v99 != v106);
          }
          v181 = v96;
          if ((int)v198 >= 1)
          {
            v123 = 0;
            v124 = v172 + v96 + v170;
            v125 = v172 + v96 + v169;
            v126 = v96 + 3 + v171;
            v127 = fguv_32x32xn_c_w[2 * a22 + v96];
            v128 = v96 + 3 + v168;
            v129 = a17 + 2 * v179 * v105;
            v130 = 2 * v96 * v167;
            v131 = a2 + v130;
            v132 = a1 + v130;
            v133 = a4[9];
            v134 = a4[22];
            do
            {
              a14.i16[0] = *(_WORD *)(a7 + 164 * v125 + 2 * (v191 + (int)v123));
              a14.i16[2] = *(_WORD *)(a7 + 164 * v126 + 2 * (v190 + (int)v123));
              a15.i16[0] = *(_WORD *)(a7 + 164 * v124 + 2 * (v104 + (int)v123));
              a15.i16[2] = *(_WORD *)(a7 + 164 * v128 + 2 * (v193 + (int)v123));
              a15 = vmla_s32(vmul_s32(vrev64_s32(v188[v123]), vshr_n_s32(vshl_n_s32(a15, 0x10uLL), 0x10uLL)), v188[v123], vshr_n_s32(vshl_n_s32(a14, 0x10uLL), 0x10uLL));
              v138 = vshr_n_s32(vadd_s32(a15, (int32x2_t)0x1000000010), 5uLL);
              a14 = vcgt_s32(v41, v138);
              v139 = vmul_s32((int32x2_t)vbsl_s8((int8x8_t)a14, (int8x8_t)v41, (int8x8_t)vmin_s32(v138, v42)), v127);
              v140 = (v139.i32[0] + v139.i32[1] + 16) >> 5;
              if (v140 >= v35)
                v141 = v35;
              else
                v141 = (v139.i32[0] + v139.i32[1] + 16) >> 5;
              if (v140 >= v34)
                v142 = v141;
              else
                v142 = v34;
              v143 = result + v123;
              v144 = (unsigned __int16 *)(v129 + 2 * (((int)result + (int)v123) << a21));
              v145 = *v144;
              if (a21)
                v145 = (unsigned __int16)((v145 + v144[1] + 1) >> 1);
              v146 = *(unsigned __int16 *)(v131 + 2 * v143);
              if (!v133)
              {
                result = v187;
                v147 = (*v194 << v197) + ((*v196 * v145 + *v195 * v146) >> 6);
                v148 = a23;
                if (v147 < a23)
                  v148 = v147;
                if (v147 >= 0)
                  v145 = v148;
                else
                  v145 = 0;
              }
              v135 = (((1 << v134 >> 1) + v142 * *(unsigned __int8 *)(a6 + v145)) >> v134) + v146;
              if (v135 >= v28)
                v136 = v28;
              else
                v136 = v135;
              if (v135 >= v33)
                v137 = v136;
              else
                v137 = v33;
              *(_WORD *)(v132 + 2 * v143) = v137;
              ++v123;
            }
            while (v198 != v123);
          }
          v96 = v181 + 1;
          v101 += v177;
          v102 += v177;
          v99 = v175;
          v103 = v183;
        }
        while (v181 + 1 != v176);
      }
      v37 = 0x20u >> a21;
      v30 = v154;
      result += v153;
      v44 = v161 - v153;
      v163 += v152;
      v164 += v152;
    }
    while (result < a5);
  }
  return result;
}

uint64_t dav1d_prepare_intra_edges_16bpc(int a1, int a2, int a3, int a4, int a5, int a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int a11, int *a12, int a13, int a14, int a15, _WORD *a16, unsigned int a17)
{
  uint64_t v18;
  int v19;
  char v22;
  char v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  int v27;
  uint64_t v28;
  unsigned __int16 *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned __int16 *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int16x8_t v43;
  int16x8_t *v44;
  uint64_t v45;
  uint64_t v46;
  _WORD *v47;
  int16x8_t v48;
  int16x8_t *v49;
  uint64_t v50;
  uint64_t v51;
  _WORD *v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  int16x8_t *v67;
  int8x16_t *v68;
  uint64_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  int16x8_t v78;
  int16x8_t *v79;
  uint64_t v80;
  uint64_t v81;
  _WORD *v82;
  int16x8_t v83;
  int16x8_t *v84;
  uint64_t v85;
  uint64_t v86;
  _WORD *v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  int16x8_t v102;
  int16x8_t *v103;
  uint64_t v104;
  uint64_t v105;
  _WORD *v106;
  int16x8_t v107;
  int16x8_t *v108;
  uint64_t v109;
  uint64_t v110;
  _WORD *v111;
  int16x8_t *v112;
  uint64_t v113;
  int16x8_t v114;
  unsigned __int16 *v115;
  int8x16_t v116;
  int8x16_t v117;
  _WORD *v118;
  uint64_t v119;
  _WORD *v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  int16x8_t v125;
  int16x8_t *v126;
  uint64_t v127;
  uint64_t v128;
  _WORD *v129;
  int16x8_t v130;
  int16x8_t *v131;
  uint64_t v132;
  uint64_t v133;
  _WORD *v134;
  int v135;
  int v136;
  char v137;
  int v138;
  int v139;
  _WORD *v140;
  char v141;
  char v142;
  char v143;

  v18 = a11;
  if (a11 - 1 >= 8)
  {
    if (!a11 || a11 == 12)
      v18 = av1_mode_conv[4 * a11 + 2 * a2 + a4];
  }
  else
  {
    v19 = 3 * *a12 + av1_mode_to_angle_map[a11 - 1];
    *a12 = v19;
    if (v19 > 90)
    {
      if (v19 >= 0xB4)
      {
        if (v19 == 180 || a2 == 0)
          v18 = 2;
        else
          v18 = 8;
      }
      else
      {
        v18 = 7u;
      }
    }
    else if (v19 == 90 || a4 == 0)
    {
      v18 = 1;
    }
    else
    {
      v18 = 6;
    }
  }
  v22 = __clz(a17);
  v23 = av1_intra_prediction_edges[v18];
  if (a4)
  {
    if ((av1_intra_prediction_edges[v18] & 6) != 0
      || (v24 = 0, v25 = 0, !a2) && (av1_intra_prediction_edges[v18] & 1) != 0)
    {
      if (a10)
        v24 = a10 + 8 * a1;
      else
        v24 = a8 - a9;
      if (a10)
        v25 = (_WORD *)(a10 + 8 * a1);
      else
        v25 = (_WORD *)(a8 - a9);
    }
    v26 = a16;
    v27 = a14;
    v143 = 32 - v22;
    if ((av1_intra_prediction_edges[v18] & 1) == 0)
      goto LABEL_70;
  }
  else
  {
    v25 = 0;
    v24 = a8;
    v26 = a16;
    v27 = a14;
    v143 = 32 - v22;
    if ((av1_intra_prediction_edges[v18] & 1) == 0)
      goto LABEL_70;
  }
  v28 = (4 * v27);
  v29 = &v26[-4 * v27];
  if (!a2)
  {
    if (a4)
    {
      v41 = (unsigned __int16)*v25;
      if ((int)v28 < 1)
        goto LABEL_69;
    }
    else
    {
      v41 = (1 << v143 >> 1) + 1;
      if ((int)v28 < 1)
        goto LABEL_69;
    }
    if (v28 >= 0x10)
    {
      v42 = v28 & 0x7FFFFFF0;
      v43 = vdupq_n_s16(v41);
      v44 = (int16x8_t *)&v26[-(int)v28 + 8];
      v45 = v28 & 0xFFFFFFF0;
      do
      {
        v44[-1] = v43;
        *v44 = v43;
        v44 += 2;
        v45 -= 16;
      }
      while (v45);
      if (v42 == v28)
        goto LABEL_69;
    }
    else
    {
      v42 = 0;
    }
    v46 = v28 - v42;
    v47 = &v26[v42 - (int)v28];
    do
    {
      *v47++ = v41;
      --v46;
    }
    while (v46);
    goto LABEL_69;
  }
  v30 = 4 * (a6 - a3);
  if ((int)v28 >= v30)
    v31 = v30;
  else
    v31 = v28;
  if ((int)v31 >= 1)
  {
    if (v31 < 0x20)
      goto LABEL_44;
    v32 = 0;
    if (a9 != 2)
      goto LABEL_45;
    v33 = v28 - 1;
    if ((int)v28 - (int)v31 > (int)v28 - 1 || (unint64_t)(v31 - 1) >> 32)
      goto LABEL_45;
    v34 = 2 * ((int)v28 - 4) - 2 * (int)v28 + 8;
    if (a8 - 2 < (unint64_t)v26 + v34 && (unint64_t)v26 + v34 - 2 * v31 < a8 - 2 + 2 * v31)
    {
LABEL_44:
      v32 = 0;
LABEL_45:
      v35 = v31 - v32;
      v36 = ~(_DWORD)v32 + v28;
      v37 = (unsigned __int16 *)(a8 + 2 * v32 * (a9 >> 1) - 2);
      do
      {
        v29[v36--] = *v37;
        v37 += a9 >> 1;
        --v35;
      }
      while (v35);
      goto LABEL_47;
    }
    v32 = v31 & 0x7FFFFFF0;
    v112 = (int16x8_t *)(a8 + 14);
    v113 = v31 & 0xFFFFFFF0;
    do
    {
      v114 = *v112;
      v115 = &v29[v33];
      v116 = (int8x16_t)vrev64q_s16(v112[-1]);
      *(int8x16_t *)(v115 - 7) = vextq_s8(v116, v116, 8uLL);
      v117 = (int8x16_t)vrev64q_s16(v114);
      *(int8x16_t *)(v115 - 15) = vextq_s8(v117, v117, 8uLL);
      v112 += 2;
      v33 -= 16;
      v113 -= 16;
    }
    while (v113);
    if (v32 != v31)
      goto LABEL_45;
  }
LABEL_47:
  if ((int)v28 > v30)
  {
    v38 = (v28 - v31);
    if ((int)v38 >= 1)
    {
      v39 = v29[(int)v38];
      if (v38 < 0x10)
      {
        v40 = 0;
LABEL_66:
        v51 = v40 - v38;
        v52 = &v26[v40 - (int)v28];
        do
        {
          *v52++ = v39;
          v66 = __CFADD__(v51++, 1);
        }
        while (!v66);
        goto LABEL_69;
      }
      v40 = v38 & 0x7FFFFFF0;
      v48 = vdupq_n_s16(v39);
      v49 = (int16x8_t *)&v26[-(int)v28 + 8];
      v50 = v38 & 0xFFFFFFF0;
      do
      {
        v49[-1] = v48;
        *v49 = v48;
        v49 += 2;
        v50 -= 16;
      }
      while (v50);
      if (v40 != v38)
        goto LABEL_66;
    }
  }
LABEL_69:
  if ((v23 & 0x10) == 0)
    goto LABEL_70;
  if (!a2 || (a7 & 8) == 0 || (v61 = a6 - (v27 + a3), a6 <= v27 + a3))
  {
    if ((int)v28 < 1)
      goto LABEL_70;
    v74 = (int)v28;
    v75 = *v29;
    if (v28 >= 0x10)
    {
      v76 = v28 & 0x7FFFFFF0;
      v102 = vdupq_n_s16(v75);
      v103 = (int16x8_t *)&v26[-2 * (int)v28 + 8];
      v104 = v28 & 0xFFFFFFF0;
      do
      {
        v103[-1] = v102;
        *v103 = v102;
        v103 += 2;
        v104 -= 16;
      }
      while (v104);
      if (v76 == v28)
        goto LABEL_70;
    }
    else
    {
      v76 = 0;
    }
    v105 = v28 - v76;
    v106 = &v26[v76 + -2 * v74];
    do
    {
      *v106++ = v75;
      --v105;
    }
    while (v105);
    goto LABEL_70;
  }
  v62 = 4 * v61;
  if ((int)v28 >= 4 * v61)
    v63 = v62;
  else
    v63 = v28;
  if ((int)v63 < 1)
    goto LABEL_163;
  v64 = 0;
  if (v63 < 0x10 || a9 != 2)
    goto LABEL_160;
  v65 = 2 * (int)v28 + a8;
  v66 = (unint64_t)&v26[-(int)v28 - v63] >= 2 * (int)v28 + 2 * v63 + a8 - 2 || v65 - 2 >= (unint64_t)v29;
  if (!v66)
  {
    v64 = 0;
LABEL_160:
    v118 = (_WORD *)((char *)v26 + ((2 * v64 + 2 * (int)v28) ^ 0xFFFFFFFFFFFFFFFELL));
    v119 = v64 - v63;
    v120 = (_WORD *)(a8 + 2 * (a9 >> 1) * (v64 + (int)v28) - 2);
    do
    {
      *v118-- = *v120;
      v120 += a9 >> 1;
      v66 = __CFADD__(v119++, 1);
    }
    while (!v66);
    goto LABEL_163;
  }
  v64 = v63 & 0x7FFFFFF0;
  v67 = (int16x8_t *)(v65 + 14);
  v68 = (int8x16_t *)&v26[-(int)v28 - 8];
  v69 = v63 & 0xFFFFFFF0;
  do
  {
    v70 = (int8x16_t)vrev64q_s16(v67[-1]);
    v71 = vextq_s8(v70, v70, 8uLL);
    v72 = (int8x16_t)vrev64q_s16(*v67);
    v68[-1] = vextq_s8(v72, v72, 8uLL);
    *v68 = v71;
    v67 += 2;
    v68 -= 2;
    v69 -= 16;
  }
  while (v69);
  if (v64 != v63)
    goto LABEL_160;
LABEL_163:
  if ((int)v28 > v62)
  {
    v121 = (v28 - v63);
    if ((int)v121 >= 1)
    {
      v122 = (int)v28;
      v123 = v29[-(int)v63];
      if (v121 >= 0x10)
      {
        v124 = v121 & 0x7FFFFFF0;
        v130 = vdupq_n_s16(v123);
        v131 = (int16x8_t *)&v26[-2 * v122 + 8];
        v132 = v121 & 0xFFFFFFF0;
        do
        {
          v131[-1] = v130;
          *v131 = v130;
          v131 += 2;
          v132 -= 16;
        }
        while (v132);
        if (v124 == v121)
          goto LABEL_70;
      }
      else
      {
        v124 = 0;
      }
      v133 = v124 - v121;
      v134 = &v26[v124 + -2 * v122];
      do
      {
        *v134++ = v123;
        v66 = __CFADD__(v133++, 1);
      }
      while (!v66);
    }
  }
LABEL_70:
  if ((v23 & 2) == 0)
    goto LABEL_119;
  v53 = (4 * a13);
  v140 = v26 + 1;
  if (!a4)
  {
    if (a2)
    {
      v73 = *(unsigned __int16 *)(a8 - 2);
      if ((int)v53 < 1)
        goto LABEL_118;
    }
    else
    {
      v73 = ((1 << v143) >> 1) - 1;
      if ((int)v53 < 1)
        goto LABEL_118;
    }
    if (v53 >= 0x10)
    {
      v77 = v53 & 0x7FFFFFF0;
      v78 = vdupq_n_s16(v73);
      v79 = (int16x8_t *)(v26 + 9);
      v80 = v53 & 0xFFFFFFF0;
      do
      {
        v79[-1] = v78;
        *v79 = v78;
        v79 += 2;
        v80 -= 16;
      }
      while (v80);
      if (v77 == v53)
        goto LABEL_118;
    }
    else
    {
      v77 = 0;
    }
    v81 = v53 - v77;
    v82 = &v26[v77 + 1];
    do
    {
      *v82++ = v73;
      --v81;
    }
    while (v81);
    goto LABEL_118;
  }
  v137 = a7;
  v138 = a5;
  v136 = a1;
  v54 = 4 * (a5 - a1);
  if ((int)v53 >= v54)
    v55 = 4 * (a5 - a1);
  else
    v55 = 4 * a13;
  v135 = v55;
  v141 = v23;
  v56 = v27;
  v57 = a4;
  memcpy(v26 + 1, v25, 2 * v55);
  v53 = (4 * a13);
  a4 = v57;
  v27 = v56;
  v23 = v141;
  a1 = v136;
  a7 = v137;
  a5 = v138;
  if (4 * a13 > v54)
  {
    v58 = (4 * a13 - v135);
    if ((int)v58 >= 1)
    {
      v59 = (unsigned __int16)v140[v135 - 1];
      if (v58 < 0x10)
      {
        v60 = 0;
LABEL_115:
        v86 = v60 - v58;
        v87 = &v26[v60 + 1 + v135];
        do
        {
          *v87++ = v59;
          v66 = __CFADD__(v86++, 1);
        }
        while (!v66);
        goto LABEL_118;
      }
      v60 = v58 & 0x7FFFFFF0;
      v83 = vdupq_n_s16(v59);
      v84 = (int16x8_t *)&v26[v135 + 9];
      v85 = v58 & 0xFFFFFFF0;
      do
      {
        v84[-1] = v83;
        *v84 = v83;
        v84 += 2;
        v85 -= 16;
      }
      while (v85);
      if (v60 != v58)
        goto LABEL_115;
    }
  }
LABEL_118:
  if ((v23 & 8) == 0)
    goto LABEL_119;
  if (!a4 || (a7 & 1) == 0 || (v89 = a5 - (a13 + a1), a5 <= a13 + a1))
  {
    if ((int)v53 < 1)
      goto LABEL_119;
    v99 = (unsigned __int16)v26[(int)v53];
    if (v53 >= 0x10)
    {
      v100 = v53 & 0x7FFFFFF0;
      v107 = vdupq_n_s16(v99);
      v108 = (int16x8_t *)&v26[(int)v53 + 9];
      v109 = v53 & 0xFFFFFFF0;
      do
      {
        v108[-1] = v107;
        *v108 = v107;
        v108 += 2;
        v109 -= 16;
      }
      while (v109);
      if (v100 == v53)
        goto LABEL_119;
    }
    else
    {
      v100 = 0;
    }
    v110 = v53 - v100;
    v111 = &v26[v100 + 1 + (int)v53];
    do
    {
      *v111++ = v99;
      --v110;
    }
    while (v110);
    goto LABEL_119;
  }
  v90 = 4 * v89;
  if ((int)v53 >= 4 * v89)
    v91 = 4 * v89;
  else
    v91 = v53;
  v142 = v23;
  v139 = v27;
  v92 = a4;
  v93 = v53;
  memcpy(&v140[(int)v53], &v25[(int)v53], 2 * v91);
  v94 = v93;
  a4 = v92;
  v27 = v139;
  v23 = v142;
  if (v94 > v90)
  {
    v95 = (v94 - v91);
    if ((int)v95 >= 1)
    {
      v96 = v94;
      v97 = (unsigned __int16)v140[v94 - 1 + v91];
      if (v95 < 0x10)
      {
        v98 = 0;
LABEL_170:
        v128 = v98 - v95;
        v129 = &v26[v98 + 1 + v91 + v96];
        do
        {
          *v129++ = v97;
          v66 = __CFADD__(v128++, 1);
        }
        while (!v66);
        goto LABEL_119;
      }
      v125 = vdupq_n_s16(v97);
      v98 = v95 & 0xFFFFFFF0;
      v126 = (int16x8_t *)&v26[v91 + 9 + v96];
      v127 = v98;
      do
      {
        v126[-1] = v125;
        *v126 = v125;
        v126 += 2;
        v127 -= 16;
      }
      while (v127);
      if (v98 != v95)
        goto LABEL_170;
    }
  }
LABEL_119:
  if ((v23 & 4) != 0)
  {
    if (a2)
    {
      LOWORD(v88) = *(_WORD *)(v24 - 2);
      *v26 = v88;
      if ((_DWORD)v18 != 7)
        return v18;
    }
    else if (a4)
    {
      LOWORD(v88) = *v25;
      *v26 = *v25;
      if ((_DWORD)v18 != 7)
        return v18;
    }
    else
    {
      v88 = (1 << v143) >> 1;
      *v26 = v88;
      if ((_DWORD)v18 != 7)
        return v18;
    }
    if (v27 + a13 >= 6 && a15)
      *v26 = (5 * ((unsigned __int16)v26[1] + (unsigned __int16)*(v26 - 1)) + 6 * (unsigned __int16)v88 + 8) >> 4;
  }
  return v18;
}

uint64_t ipred_dc_c(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unsigned int v6;
  uint64_t v7;
  int32x4_t v8;
  int32x4_t v9;
  uint16x8_t *v10;
  uint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  uint16x8_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  int v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int16x8_t *v21;
  uint64_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int8x16_t v25;
  uint16x8_t v26;
  int8x16_t v27;
  uint16x8_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int v34;
  unsigned int v35;
  int v36;

  v6 = (a5 + a4) >> 1;
  if (a4 >= 1)
  {
    if (a4 < 0x10)
    {
      v7 = 0;
LABEL_7:
      v15 = a4 - v7;
      v16 = (unsigned __int16 *)(a3 + 2 * v7 + 2);
      do
      {
        v17 = *v16++;
        v6 += v17;
        --v15;
      }
      while (v15);
      goto LABEL_9;
    }
    v7 = a4 & 0xFFFFFFF0;
    v8 = 0uLL;
    v9 = (int32x4_t)((a5 + a4) >> 1);
    v10 = (uint16x8_t *)(a3 + 18);
    v11 = v7;
    v12 = 0uLL;
    v13 = 0uLL;
    do
    {
      v14 = v10[-1];
      v8 = (int32x4_t)vaddw_high_u16((uint32x4_t)v8, v14);
      v9 = (int32x4_t)vaddw_u16((uint32x4_t)v9, *(uint16x4_t *)v14.i8);
      v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, *v10);
      v12 = (int32x4_t)vaddw_u16((uint32x4_t)v12, *(uint16x4_t *)v10->i8);
      v10 += 2;
      v11 -= 16;
    }
    while (v11);
    v6 = vaddvq_s32(vaddq_s32(vaddq_s32(v12, v9), vaddq_s32(v13, v8)));
    if (v7 != a4)
      goto LABEL_7;
  }
LABEL_9:
  if (a5 >= 1)
  {
    if (a5 >= 0x10)
    {
      v18 = a5 & 0xFFFFFFF0;
      v19 = 0uLL;
      v20 = (int32x4_t)v6;
      v21 = (int16x8_t *)(a3 - 16);
      v22 = v18;
      v23 = 0uLL;
      v24 = 0uLL;
      do
      {
        v25 = (int8x16_t)vrev64q_s16(*v21);
        v26 = (uint16x8_t)vextq_s8(v25, v25, 8uLL);
        v27 = (int8x16_t)vrev64q_s16(v21[-1]);
        v28 = (uint16x8_t)vextq_s8(v27, v27, 8uLL);
        v19 = (int32x4_t)vaddw_high_u16((uint32x4_t)v19, v26);
        v20 = (int32x4_t)vaddw_u16((uint32x4_t)v20, *(uint16x4_t *)v26.i8);
        v24 = (int32x4_t)vaddw_high_u16((uint32x4_t)v24, v28);
        v23 = (int32x4_t)vaddw_u16((uint32x4_t)v23, *(uint16x4_t *)v28.i8);
        v21 -= 2;
        v22 -= 16;
      }
      while (v22);
      v6 = vaddvq_s32(vaddq_s32(vaddq_s32(v23, v20), vaddq_s32(v24, v19)));
      if (v18 == a5)
        goto LABEL_17;
    }
    else
    {
      v18 = 0;
    }
    v29 = (unsigned __int16 *)(a3 - 2 * v18 - 2);
    v30 = a5 - v18;
    do
    {
      v31 = *v29--;
      v6 += v31;
      --v30;
    }
    while (v30);
  }
LABEL_17:
  v32 = v6 >> __clz(__rbit32(a5 + a4));
  if (2 * a4 < a5 || 2 * a5 < a4)
    v34 = 26215;
  else
    v34 = 43691;
  v35 = (v32 * v34) >> 17;
  if (a4 == a5)
    v36 = v32;
  else
    v36 = v35;
  return splat_dc(a1, a2, a4, a5, v36);
}

uint64_t ipred_dc_128_c(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  return splat_dc(a1, a2, a4, a5, (a9 + 1) >> 1);
}

uint64_t ipred_dc_top_c(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unsigned int v5;
  uint64_t v6;
  int32x4_t v7;
  int32x4_t v8;
  uint16x8_t *v9;
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  uint16x8_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;

  v5 = a4 >> 1;
  if (a4 >= 1)
  {
    if (a4 < 0x10)
    {
      v6 = 0;
LABEL_7:
      v14 = a4 - v6;
      v15 = (unsigned __int16 *)(a3 + 2 * v6 + 2);
      do
      {
        v16 = *v15++;
        v5 += v16;
        --v14;
      }
      while (v14);
      return splat_dc(a1, a2, a4, a5, v5 >> __clz(__rbit32(a4)));
    }
    v6 = a4 & 0xFFFFFFF0;
    v7 = 0uLL;
    v8 = (int32x4_t)(a4 >> 1);
    v9 = (uint16x8_t *)(a3 + 18);
    v10 = v6;
    v11 = 0uLL;
    v12 = 0uLL;
    do
    {
      v13 = v9[-1];
      v7 = (int32x4_t)vaddw_high_u16((uint32x4_t)v7, v13);
      v8 = (int32x4_t)vaddw_u16((uint32x4_t)v8, *(uint16x4_t *)v13.i8);
      v12 = (int32x4_t)vaddw_high_u16((uint32x4_t)v12, *v9);
      v11 = (int32x4_t)vaddw_u16((uint32x4_t)v11, *(uint16x4_t *)v9->i8);
      v9 += 2;
      v10 -= 16;
    }
    while (v10);
    v5 = vaddvq_s32(vaddq_s32(vaddq_s32(v11, v8), vaddq_s32(v12, v7)));
    if (v6 != a4)
      goto LABEL_7;
  }
  return splat_dc(a1, a2, a4, a5, v5 >> __clz(__rbit32(a4)));
}

uint64_t ipred_dc_left_c(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unsigned int v5;
  uint64_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int16x8_t *v9;
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int8x16_t v13;
  uint16x8_t v14;
  int8x16_t v15;
  uint16x8_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int v19;

  v5 = a5 >> 1;
  if (a5 >= 1)
  {
    if (a5 < 0x10)
    {
      v6 = 0;
LABEL_7:
      v17 = (unsigned __int16 *)(a3 - 2 * v6 - 2);
      v18 = a5 - v6;
      do
      {
        v19 = *v17--;
        v5 += v19;
        --v18;
      }
      while (v18);
      return splat_dc(a1, a2, a4, a5, v5 >> __clz(__rbit32(a5)));
    }
    v6 = a5 & 0xFFFFFFF0;
    v7 = 0uLL;
    v8 = (int32x4_t)(a5 >> 1);
    v9 = (int16x8_t *)(a3 - 16);
    v10 = v6;
    v11 = 0uLL;
    v12 = 0uLL;
    do
    {
      v13 = (int8x16_t)vrev64q_s16(*v9);
      v14 = (uint16x8_t)vextq_s8(v13, v13, 8uLL);
      v15 = (int8x16_t)vrev64q_s16(v9[-1]);
      v16 = (uint16x8_t)vextq_s8(v15, v15, 8uLL);
      v7 = (int32x4_t)vaddw_high_u16((uint32x4_t)v7, v14);
      v8 = (int32x4_t)vaddw_u16((uint32x4_t)v8, *(uint16x4_t *)v14.i8);
      v12 = (int32x4_t)vaddw_high_u16((uint32x4_t)v12, v16);
      v11 = (int32x4_t)vaddw_u16((uint32x4_t)v11, *(uint16x4_t *)v16.i8);
      v9 -= 2;
      v10 -= 16;
    }
    while (v10);
    v5 = vaddvq_s32(vaddq_s32(vaddq_s32(v11, v8), vaddq_s32(v12, v7)));
    if (v6 != a5)
      goto LABEL_7;
  }
  return splat_dc(a1, a2, a4, a5, v5 >> __clz(__rbit32(a5)));
}

uint64_t ipred_h_c(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t i;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int16x8_t v9;
  int16x8_t *v10;

  if (a5 >= 1 && a4 >= 1)
  {
    for (i = 0; i != a5; ++i)
    {
      v6 = *(unsigned __int16 *)(a3 + 2 * ~i);
      if (a4 >= 0x10)
      {
        v8 = 0;
        v9 = vdupq_n_s16(v6);
        do
        {
          v10 = (int16x8_t *)(result + v8);
          *v10 = v9;
          v10[1] = v9;
          v8 += 32;
        }
        while (((2 * a4) & 0x1FFFFFFE0) != v8);
        v7 = a4 & 0xFFFFFFF0;
        if (v7 == a4)
          goto LABEL_4;
      }
      else
      {
        v7 = 0;
      }
      do
        *(_WORD *)(result + 2 * v7++) = v6;
      while (a4 != v7);
LABEL_4:
      result += 2 * (a2 >> 1);
    }
  }
  return result;
}

char *ipred_v_c(char *__dst, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  char *v6;
  const void *v7;
  size_t v8;
  unint64_t v9;

  if (a5 >= 1)
  {
    v5 = a5;
    v6 = __dst;
    v7 = (const void *)(a3 + 2);
    v8 = 2 * a4;
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      __dst = (char *)memcpy(v6, v7, v8);
      v6 += v9;
      --v5;
    }
    while (v5);
  }
  return __dst;
}

uint64_t ipred_paeth_c(uint64_t result, uint64_t a2, unsigned __int16 *a3, int a4, int a5)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int16 *v8;
  int32x4_t v9;
  int8x16_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint32x4_t v17;
  int32x4_t v18;
  uint32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int32x4_t v22;
  int32x4_t v23;
  uint32x4_t v24;
  uint32x4_t v25;
  uint32x4_t v26;
  uint32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  int v32;

  if (a5 >= 1 && a4 >= 1)
  {
    v5 = 0;
    v6 = *a3;
    v7 = a5;
    v8 = a3 + 1;
    v9 = vdupq_n_s32(v6);
    v10 = (int8x16_t)vdupq_n_s16(v6);
    v11 = result;
    while (1)
    {
      v12 = a3[~v5];
      v13 = v12 - v6;
      v14 = (int)(v12 - v6) >= 0 ? v12 - v6 : v6 - v12;
      if (a4 < 8)
        break;
      if ((unint64_t)(result + v5 * a2 - (_QWORD)v8) < 0x10)
      {
        v15 = 0;
        do
        {
LABEL_15:
          v28 = 2 * v15;
          v29 = v15 + 1;
          v30 = v8[v15];
          v31 = v6 - v30;
          if ((int)(v6 - v30) < 0)
            v31 = v30 - v6;
          v32 = v6 - (v13 + v30);
          if (v32 < 0)
            v32 = v13 + v30 - v6;
          if (v14 > v32)
            LOWORD(v30) = v6;
          if (v31 <= v32 && v31 <= v14)
            LOWORD(v30) = v12;
          *(_WORD *)(v11 + v28) = v30;
          v15 = v29;
        }
        while (a4 != v29);
        goto LABEL_4;
      }
      v16 = 0;
      v17 = (uint32x4_t)vdupq_n_s32(v13);
      v18 = vdupq_n_s32(v12);
      v19 = (uint32x4_t)vdupq_n_s32(v14);
      v20 = (int8x16_t)vdupq_n_s16(v12);
      do
      {
        v21 = *(int8x16_t *)&v8[v16 / 2];
        v22 = (int32x4_t)vaddw_high_u16(v17, (uint16x8_t)v21);
        v23 = (int32x4_t)vaddw_u16(v17, *(uint16x4_t *)v21.i8);
        v24 = (uint32x4_t)vabdq_s32(v18, v23);
        v25 = (uint32x4_t)vabdq_s32(v18, v22);
        v26 = (uint32x4_t)vabdq_s32(v9, v23);
        v27 = (uint32x4_t)vabdq_s32(v9, v22);
        *(int8x16_t *)(v11 + v16) = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v24, vminq_u32(v19, v26)), (int16x8_t)vcgtq_u32(v25, vminq_u32(v19, v27))), vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v19, v26), (int16x8_t)vcgtq_u32(v19, v27)), v10, v21), v20);
        v16 += 16;
      }
      while (((2 * a4) & 0x1FFFFFFF0) != v16);
      v15 = a4 & 0xFFFFFFF8;
      if (v15 != a4)
        goto LABEL_15;
LABEL_4:
      ++v5;
      v11 += 2 * (a2 >> 1);
      if (v5 == v7)
        return result;
    }
    v15 = 0;
    goto LABEL_15;
  }
  return result;
}

unint64_t ipred_smooth_c(unint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int32x4_t v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v22;
  BOOL v24;
  BOOL v25;
  uint32x4_t v26;
  uint16x8_t v27;
  uint64_t v28;
  const __int16 *v29;
  uint16x4_t v30;
  int32x4_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int32x4_t v36;
  uint64_t v37;
  const __int16 *v38;
  uint16x4_t v39;
  int32x4_t v40;
  int8x16_t *v41;
  int8x16_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int16x8_t v47;
  int32x4_t *v48;
  uint64_t v49;

  if (a5 >= 1 && a4 >= 1)
  {
    v6 = 0;
    v7 = (char *)&dav1d_sm_weights[a4];
    v8 = *(unsigned __int16 *)(a3 + 2 * a4);
    v9 = *(unsigned __int16 *)(a3 - 2 * a5);
    v10 = 2 * a4;
    v11 = a3 + 2;
    v12 = vdupq_n_s32(v8);
    v13.i64[0] = 0x10000000100;
    v13.i64[1] = 0x10000000100;
    v49 = a4 & 0xFFFFFFF8;
    v14 = result;
    do
    {
      v15 = dav1d_sm_weights[a5 + v6];
      v16 = ~v6;
      v17 = (256 - v15) * v9 + 256;
      if (a4 >= 8)
      {
        v18 = 0;
        v19 = a3 - 2 * v6;
        v20 = result + v10 + v6 * a2;
        v22 = v14 < a3 + 2 + v10 && v11 < v20;
        v24 = v14 < (unint64_t)&dav1d_sm_weights[a4 + (unint64_t)a4]
           && (unint64_t)v7 < v20;
        v25 = v19 - 2 >= v20 || v14 >= v19;
        if (v25 && !v22 && !v24)
        {
          v26 = (uint32x4_t)vdupq_n_s32(v17);
          v27 = (uint16x8_t)vdupq_n_s16(v15);
          if (a4 < 0x10)
          {
            v28 = 0;
LABEL_28:
            v29 = (const __int16 *)(a3 + 2 * v16);
            v30 = (uint16x4_t)vld1_dup_s16(v29);
            v31 = (int32x4_t)vmovl_u16(v30);
            v32 = 2 * v28;
            v33 = (uint64_t *)&dav1d_sm_weights[a4 + v28];
            v34 = v28 - v49;
            do
            {
              v35 = *v33++;
              v5.i64[0] = v35;
              v36 = (int32x4_t)vqtbl1q_s8((int8x16_t)v5, (int8x16_t)xmmword_196889CC0);
              v5 = (int32x4_t)vqtbl1q_s8((int8x16_t)v5, (int8x16_t)xmmword_196889CD0);
              *(int16x8_t *)(v14 + v32) = vshrn_high_n_s32(vshrn_n_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(v26, *(uint16x4_t *)v27.i8, *(uint16x4_t *)(v11 + v32)), v31, v36), vsubq_s32(v13, v36), v12), 9uLL), vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_high_u16(v26, v27, *(uint16x8_t *)(v11 + v32)), v31, v5), vsubq_s32(v13, v5), v12),
                                            9uLL);
              v32 += 16;
              v34 += 8;
            }
            while (v34);
            v18 = a4 & 0xFFFFFFF8;
            if (v49 == a4)
              goto LABEL_4;
            goto LABEL_36;
          }
          v37 = 0;
          v38 = (const __int16 *)(a3 + 2 * v16);
          v39 = (uint16x4_t)vld1_dup_s16(v38);
          v40 = (int32x4_t)vmovl_u16(v39);
          v41 = (int8x16_t *)&dav1d_sm_weights[a4];
          do
          {
            v42 = *v41++;
            v43 = (int32x4_t)vqtbl1q_s8(v42, (int8x16_t)xmmword_196889CC0);
            v44 = (int32x4_t)vqtbl1q_s8(v42, (int8x16_t)xmmword_196889CD0);
            v45 = (int32x4_t)vqtbl1q_s8(v42, (int8x16_t)xmmword_196889CB0);
            v46 = (int32x4_t)vqtbl1q_s8(v42, (int8x16_t)xmmword_196889CA0);
            v5 = (int32x4_t)vshrn_high_n_s32(vshrn_n_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(v26, *(uint16x4_t *)v27.i8, *(uint16x4_t *)(v11 + v37)), v40, v43), vsubq_s32(v13, v43), v12), 9uLL), vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_high_u16(v26, v27, *(uint16x8_t *)(v11 + v37)), v40, v44), vsubq_s32(v13, v44), v12), 9uLL);
            v47 = vshrn_high_n_s32(vshrn_n_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(v26, *(uint16x4_t *)v27.i8, *(uint16x4_t *)(v11 + v37 + 16)), v40, v45), vsubq_s32(v13, v45), v12), 9uLL), vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_high_u16(v26, v27, *(uint16x8_t *)(v11 + v37 + 16)), v40, v46), vsubq_s32(v13, v46), v12), 9uLL);
            v48 = (int32x4_t *)(v14 + v37);
            *v48 = v5;
            v48[1] = (int32x4_t)v47;
            v37 += 32;
          }
          while ((v10 & 0x1FFFFFFE0) != v37);
          if ((a4 & 0xFFFFFFF0) == (unint64_t)a4)
            goto LABEL_4;
          v18 = a4 & 0xFFFFFFF0;
          v28 = v18;
          if ((a4 & 8) != 0)
            goto LABEL_28;
        }
      }
      else
      {
        v18 = 0;
      }
      do
      {
LABEL_36:
        *(_WORD *)(v14 + 2 * v18) = (v17
                                   + *(unsigned __int16 *)(v11 + 2 * v18) * v15
                                   + *(unsigned __int16 *)(a3 + 2 * v16) * v7[v18]
                                   + (256 - v7[v18]) * v8) >> 9;
        ++v18;
      }
      while (a4 != v18);
LABEL_4:
      v14 += 2 * (a2 >> 1);
      ++v6;
    }
    while (v6 != a5);
  }
  return result;
}

uint64_t ipred_smooth_v_c(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint32x4_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  int16x8_t *v16;

  if (a5 >= 1 && a4 >= 1)
  {
    v5 = 0;
    v6 = *(unsigned __int16 *)(a3 - 2 * a5);
    v7 = a3 + 2;
    v8 = result;
    do
    {
      v9 = dav1d_sm_weights[a5 + v5];
      v10 = (256 - v9) * v6 + 128;
      if (a4 >= 0x10)
      {
        if ((unint64_t)(result + v5 * a2 - v7) >= 0x20)
        {
          v12 = 0;
          v13 = (uint32x4_t)vdupq_n_s32(v10);
          do
          {
            v14 = (uint16x8_t)vdupq_n_s16(v9);
            v15 = *(uint16x8_t *)(a3 + v12 + 18);
            v16 = (int16x8_t *)(v8 + v12);
            *v16 = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(v13, *(uint16x4_t *)v14.i8, *(uint16x4_t *)(a3 + v12 + 2)), 8uLL), (int32x4_t)vmlal_high_u16(v13, v14, *(uint16x8_t *)(a3 + v12 + 2)), 8uLL);
            v16[1] = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(v13, *(uint16x4_t *)v14.i8, *(uint16x4_t *)v15.i8), 8uLL), (int32x4_t)vmlal_high_u16(v13, v14, v15), 8uLL);
            v12 += 32;
          }
          while (((2 * a4) & 0x1FFFFFFE0) != v12);
          v11 = a4 & 0xFFFFFFF0;
          if (v11 == a4)
            goto LABEL_4;
        }
        else
        {
          v11 = 0;
        }
      }
      else
      {
        v11 = 0;
      }
      do
      {
        *(_WORD *)(v8 + 2 * v11) = (v10 + *(unsigned __int16 *)(v7 + 2 * v11) * v9) >> 8;
        ++v11;
      }
      while (a4 != v11);
LABEL_4:
      ++v5;
      v8 += 2 * (a2 >> 1);
    }
    while (v5 != a5);
  }
  return result;
}

unint64_t ipred_smooth_h_c(unint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, int8x16_t a13)
{
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  int32x4_t v17;
  uint64_t v18;
  int32x4_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  const __int16 *v29;
  uint16x4_t v30;
  int32x4_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int32x4_t v36;
  int32x4_t v37;
  uint64_t v38;
  const __int16 *v39;
  uint16x4_t v40;
  int32x4_t v41;
  unsigned __int8 *v42;
  int8x16_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  uint64_t v48;

  if (a5 >= 1 && a4 >= 1)
  {
    v13 = 0;
    v14 = &dav1d_sm_weights[a4];
    v15 = *(unsigned __int16 *)(a3 + 2 * a4);
    v16 = 2 * a4;
    v17 = vdupq_n_s32(v15);
    v18 = a4 & 0xFFFFFFF8;
    v19.i64[0] = 0x10000000100;
    v19.i64[1] = 0x10000000100;
    v20 = result;
    do
    {
      v21 = ~v13;
      if (a4 >= 8)
      {
        v22 = 0;
        v23 = a3 - 2 * v13;
        v24 = result + v16 + v13 * a2;
        v26 = v20 < v23 && v23 - 2 < v24;
        v27 = (unint64_t)v14 >= v24
           || v20 >= (unint64_t)&dav1d_sm_weights[a4 + (unint64_t)a4];
        if (v27 && !v26)
        {
          if (a4 < 0x10)
          {
            v28 = 0;
LABEL_23:
            v29 = (const __int16 *)(a3 + 2 * v21);
            v30 = (uint16x4_t)vld1_dup_s16(v29);
            v31 = (int32x4_t)vmovl_u16(v30);
            v32 = &dav1d_sm_weights[a4 + v28];
            v33 = 2 * v28;
            v34 = v28 - v18;
            do
            {
              v35 = *(_QWORD *)v32;
              v32 += 8;
              a13.i64[0] = v35;
              v36 = (int32x4_t)vqtbl1q_s8(a13, (int8x16_t)xmmword_196889CD0);
              v37 = (int32x4_t)vqtbl1q_s8(a13, (int8x16_t)xmmword_196889CC0);
              a13 = (int8x16_t)vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmulq_s32(v31, v37), vsubq_s32(v19, v37), v17), 8uLL), vmlaq_s32(vmulq_s32(v31, v36), vsubq_s32(v19, v36), v17), 8uLL);
              *(int8x16_t *)(v20 + v33) = a13;
              v33 += 16;
              v34 += 8;
            }
            while (v34);
            v22 = a4 & 0xFFFFFFF8;
            if (v18 == a4)
              goto LABEL_4;
            goto LABEL_7;
          }
          v38 = 0;
          v39 = (const __int16 *)(a3 + 2 * v21);
          v40 = (uint16x4_t)vld1_dup_s16(v39);
          v41 = (int32x4_t)vmovl_u16(v40);
          v42 = &dav1d_sm_weights[a4];
          do
          {
            v43 = *(int8x16_t *)v42;
            v42 += 16;
            v44 = (int32x4_t)vqtbl1q_s8(v43, (int8x16_t)xmmword_196889CA0);
            v45 = (int32x4_t)vqtbl1q_s8(v43, (int8x16_t)xmmword_196889CB0);
            v46 = (int32x4_t)vqtbl1q_s8(v43, (int8x16_t)xmmword_196889CD0);
            v47 = (int32x4_t)vqtbl1q_s8(v43, (int8x16_t)xmmword_196889CC0);
            a13 = (int8x16_t)vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmulq_s32(v41, v47), vsubq_s32(v19, v47), v17), 8uLL), vmlaq_s32(vmulq_s32(v41, v46), vsubq_s32(v19, v46), v17), 8uLL);
            v48 = v20 + v38;
            *(int8x16_t *)v48 = a13;
            *(int16x8_t *)(v48 + 16) = vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmulq_s32(v41, v45), vsubq_s32(v19, v45), v17), 8uLL), vmlaq_s32(vmulq_s32(v41, v44), vsubq_s32(v19, v44), v17), 8uLL);
            v38 += 32;
          }
          while ((v16 & 0x1FFFFFFE0) != v38);
          if ((a4 & 0xFFFFFFF0) == (unint64_t)a4)
            goto LABEL_4;
          v28 = a4 & 0xFFFFFFF0;
          v22 = v28;
          if ((a4 & 8) != 0)
            goto LABEL_23;
        }
      }
      else
      {
        v22 = 0;
      }
      do
      {
LABEL_7:
        *(_WORD *)(v20 + 2 * v22) = (*(unsigned __int16 *)(a3 + 2 * v21) * v14[v22] + (256 - v14[v22]) * v15 + 128) >> 8;
        ++v22;
      }
      while (a4 != v22);
LABEL_4:
      v20 += 2 * (a2 >> 1);
      ++v13;
    }
    while (v13 != a5);
  }
  return result;
}

uint64_t ipred_z1_c(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6, uint64_t a7, uint64_t a8, int a9)
{
  unsigned int v12;
  _BYTE *v13;
  int v14;
  signed int v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  unsigned __int16 *v53;
  unsigned int v54;
  unint64_t v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int16x8_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int16x8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v68;
  _BYTE v70[256];
  uint64_t v71;

  v68 = result;
  v71 = *MEMORY[0x1E0C80C00];
  v12 = *(unsigned __int16 *)((char *)&dav1d_dr_intra_derivative + (a6 & 0x1FE));
  if (a6 < 0x400)
    goto LABEL_2;
  v15 = a5 + a4;
  if ((a6 & 0x1FF) >= 0x33 && (int)(0x10u >> ((a6 & 0x200) != 0)) >= v15)
  {
    v16 = a3 + 2;
    if (a4 >= a5)
      v17 = a5;
    else
      v17 = a4;
    v13 = v70;
    result = upsample_edge((uint64_t)v70, a5 + a4, v16, -1, v17 + a4, a9);
    v18 = 2 * v15 - 2;
    v12 *= 2;
    v19 = 1;
    v20 = 2;
    if (a5 < 1)
      return result;
    goto LABEL_19;
  }
  result = get_filter_strength(a5 + a4, 90 - (a6 & 0x1FF), (a6 >> 9) & 1);
  if ((_DWORD)result)
  {
    v21 = a3 + 2;
    if (a4 >= a5)
      v22 = a5;
    else
      v22 = a4;
    v13 = v70;
    result = filter_edge((uint64_t)v70, a5 + a4, 0, a5 + a4, v21, -1, v22 + a4, result);
  }
  else
  {
LABEL_2:
    v13 = (_BYTE *)(a3 + 2);
    if (a4 >= a5)
      v14 = a5;
    else
      v14 = a4;
    v15 = v14 + a4;
  }
  v19 = 0;
  v18 = v15 - 1;
  v20 = 1;
  if (a5 < 1)
    return result;
LABEL_19:
  if (a4 >= 1)
  {
    v23 = 0;
    v24 = v68;
    v25 = a4 - 1;
    v26 = v12;
    v27 = v12;
    do
    {
      v28 = v27 >> 6;
      if ((uint64_t)(v27 >> 6) <= v18)
        v29 = v18;
      else
        v29 = v27 >> 6;
      if ((uint64_t)(v27 >> 6) >= v18)
        v30 = v27 >> 6;
      else
        v30 = v28 + 1;
      v31 = v29 - v30;
      v32 = v28 < v18;
      v33 = v27 & 0x3E;
      v34 = v31 / v20;
      if (v28 >= v18)
        v35 = v31 / v20;
      else
        v35 = v34 + 1;
      result = 64;
      v36 = 64 - v33;
      if (v35 >= v25)
        v35 = a4 - 1;
      v37 = v35 + 1;
      if (v35 + 1 < 9)
        v38 = 1;
      else
        v38 = v19;
      if ((v38 & 1) != 0)
        goto LABEL_49;
      if (v28 <= v18)
        v39 = v18;
      else
        v39 = v27 >> 6;
      if (v28 >= v18)
        v40 = v27 >> 6;
      else
        v40 = v28 + 1;
      v41 = v39 - v40;
      v42 = 2 * v28;
      v43 = v41 / v20;
      if (v28 < v18)
        ++v43;
      if (v43 >= v25)
        v43 = a4 - 1;
      v44 = 2 * v43;
      if (v24 < (unint64_t)&v13[v42 + 4 + v44]
        && (result = a2, (unint64_t)&v13[v42] < v68 + v23 * a2 + v44 + 2))
      {
LABEL_49:
        v45 = 0;
        v46 = v27 >> 6;
      }
      else
      {
        v47 = 0;
        v48 = v37 & 7;
        result = 8;
        if ((v37 & 7) == 0)
          v48 = 8;
        v45 = v37 - v48;
        v46 = v28 + v45 * v20;
        v49 = (v29 - v28 - v32) / v20 + v32;
        if (v49 >= v25)
          v49 = a4 - 1;
        v50 = ~v49 + v48;
        do
        {
          v51 = (uint16x8_t)vdupq_n_s16(v36);
          v52 = (uint16x8_t)vdupq_n_s16(v33);
          *(int16x8_t *)(v24 + v47) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v51.i8, *(uint16x4_t *)&v13[2 * v28 + v47]), *(uint16x4_t *)v52.i8, *(uint16x4_t *)&v13[2 * v28 + 2 + v47]), 6uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(v51, *(uint16x8_t *)&v13[2 * v28 + v47]), v52, *(uint16x8_t *)&v13[2 * v28 + 2 + v47]), 6uLL);
          v47 += 16;
          v50 += 8;
        }
        while (v50);
      }
      v53 = (unsigned __int16 *)&v13[2 * v46 + 2];
      v54 = a4 - v45;
      v55 = v45;
      while (v46 < v18)
      {
        result = (v33 * *v53 + v36 * *(v53 - 1) + 32) >> 6;
        *(_WORD *)(v24 + 2 * v55++) = result;
        v46 += v20;
        v53 += v20;
        LODWORD(v45) = v45 + 1;
        --v54;
        if (a4 == v55)
          goto LABEL_21;
      }
      if (a4 - (int)v55 < 1)
        goto LABEL_21;
      v56 = *(unsigned __int16 *)&v13[2 * v18];
      v57 = v34 + v32;
      if (v34 + v32 >= v25)
        v57 = a4 - 1;
      v58 = (a4 - v57);
      if (v58 >= 0x10)
      {
        v59 = v58 & 0xFFFFFFF0;
        v60 = vdupq_n_s16(v56);
        v61 = 2 * v45;
        v62 = (v29 - (v28 + v32)) / v20 + v32;
        if (v62 >= v25)
          LODWORD(v62) = a4 - 1;
        v63 = (a4 - (_DWORD)v62) & 0xFFFFFFF0;
        do
        {
          v64 = (int16x8_t *)(v24 + v61);
          *v64 = v60;
          v64[1] = v60;
          v61 += 32;
          v63 -= 16;
        }
        while (v63);
        if (v59 == v58)
          goto LABEL_21;
      }
      else
      {
        v59 = 0;
      }
      v65 = v59 - v54;
      v66 = 2 * v59 + 2 * v45;
      do
      {
        *(_WORD *)(v24 + v66) = v56;
        v66 += 2;
      }
      while (!__CFADD__(v65++, 1));
LABEL_21:
      ++v23;
      v24 += 2 * (a2 >> 1);
      v27 += v26;
    }
    while ((_DWORD)v23 != a5);
  }
  return result;
}

uint64_t ipred_z2_c(uint64_t a1, uint64_t a2, _WORD *a3, int a4, int a5, unsigned int a6, int a7, int a8, int a9)
{
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  signed int v19;
  signed int v20;
  _BOOL4 v22;
  int v23;
  int v24;
  uint64_t result;
  int filter_strength;
  int v27;
  int v28;
  _WORD *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned __int16 *v34;
  int v35;
  int v38;
  _WORD v39[65];
  _QWORD v40[18];

  v40[16] = *MEMORY[0x1E0C80C00];
  v14 = (a6 & 0x1FF) - 90;
  v15 = *(unsigned __int16 *)((char *)&dav1d_dr_intra_derivative + (v14 & 0xFFFFFFFE));
  v16 = 180 - (a6 & 0x1FF);
  v17 = *(unsigned __int16 *)((char *)&dav1d_dr_intra_derivative + (v16 & 0xFFFFFFFE));
  if (a6 <= 0x3FF)
  {
    v38 = 0;
LABEL_3:
    __memcpy_chk();
    goto LABEL_21;
  }
  v19 = a5 + a4;
  v20 = 0x10u >> ((a6 & 0x200) != 0);
  v22 = (a6 & 0x1FF) > 0x8C && v20 >= v19;
  v38 = v22;
  if (v14 <= 0x27 && v20 >= v19)
  {
    upsample_edge((uint64_t)v39, a4 + 1, (uint64_t)a3, 0, a4 + 1, a9);
    v17 *= 2;
    v23 = 2;
    if (v38)
      goto LABEL_22;
    goto LABEL_13;
  }
  filter_strength = get_filter_strength(v19, v14, (a6 >> 9) & 1);
  if (!filter_strength)
    goto LABEL_3;
  filter_edge((uint64_t)v40, a4, 0, a7, (uint64_t)(a3 + 1), -1, a4, filter_strength);
LABEL_21:
  v23 = 1;
  if (v38)
  {
LABEL_22:
    result = upsample_edge((uint64_t)&v39[-2 * a5], a5 + 1, (uint64_t)&a3[-a5], 0, a5 + 1, a9);
    v15 *= 2;
    v39[0] = *a3;
    if (a5 < 1)
      return result;
    goto LABEL_23;
  }
LABEL_13:
  if (a6 >= 0x400 && (v24 = get_filter_strength(a5 + a4, v16, (a6 >> 9) & 1)) != 0)
  {
    result = filter_edge((uint64_t)&v39[-a5], a5, a5 - a8, a5, (uint64_t)&a3[-a5], 0, a5 + 1, v24);
    v39[0] = *a3;
    if (a5 < 1)
      return result;
  }
  else
  {
    result = (uint64_t)memcpy(&v39[-a5], &a3[-a5], 2 * a5);
    v39[0] = *a3;
    if (a5 < 1)
      return result;
  }
LABEL_23:
  if (a4 >= 1)
  {
    v27 = 0;
    v28 = v23 << 6;
    v29 = &v39[~v38];
    do
    {
      v30 = 0;
      v28 -= v17;
      v31 = v28 >> 6;
      result = v28 & 0x3E;
      v32 = (v27 << (v38 | 6)) - v15;
      do
      {
        if (v31 < 0)
        {
          v35 = v32 & 0x3E;
          v33 = (64 - v35) * (unsigned __int16)v29[-(v32 >> 6)];
          v34 = &v29[~(v32 >> 6)];
        }
        else
        {
          v33 = (64 - result) * (unsigned __int16)v39[v31];
          v34 = &v39[v31 + 1];
          v35 = v28 & 0x3E;
        }
        *(_WORD *)(a1 + v30) = (v33 + v35 * *v34 + 32) >> 6;
        v31 += v23;
        v30 += 2;
        v32 -= v15;
      }
      while (2 * a4 != v30);
      ++v27;
      a1 += 2 * (a2 >> 1);
    }
    while (v27 != a5);
  }
  return result;
}

uint64_t ipred_z3_c(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v13;
  int v14;
  unsigned int v15;
  _WORD *v16;
  int v17;
  int v18;
  unint64_t v19;
  signed int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __int16 *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  _OWORD *v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v47;
  int16x8_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int16 *v52;
  _WORD v53[128];
  uint64_t v54;

  v13 = result;
  v54 = *MEMORY[0x1E0C80C00];
  v14 = a6 & 0x1FF;
  v15 = dav1d_dr_intra_derivative[(270 - v14) >> 1];
  if (a6 < 0x400)
    goto LABEL_2;
  v20 = a5 + a4;
  if ((v14 - 220) < 0xFFFFFFD8 || (int)(0x10u >> ((a6 & 0x200) != 0)) < v20)
  {
    result = get_filter_strength(a5 + a4, v14 - 180, (a6 >> 9) & 1);
    if (!(_DWORD)result)
    {
LABEL_2:
      v16 = (_WORD *)(a3 - 2);
      if (a4 >= a5)
        v17 = a5;
      else
        v17 = a4;
      v18 = a5 + v17 - 1;
      v19 = 1;
      if (a4 < 1)
        return result;
      goto LABEL_13;
    }
    result = filter_edge((uint64_t)v53, a5 + a4, 0, a5 + a4, a3 - 2 * v20, (a4 - a5) & ~((a4 - a5) >> 31), v20 + 1, result);
    v18 = v20 - 1;
    v16 = &v53[v20 - 1];
    v19 = 1;
    if (a4 < 1)
      return result;
  }
  else
  {
    v21 = 2 * v20;
    result = upsample_edge((uint64_t)v53, a5 + a4, a3 - v21, (a4 - a5) & ~((a4 - a5) >> 31), v20 + 1, a9);
    v18 = v21 - 2;
    v16 = &v53[v21 - 2];
    v15 *= 2;
    v19 = 2;
    if (a4 < 1)
      return result;
  }
LABEL_13:
  if (a5 >= 1)
  {
    v22 = 0;
    v23 = a2 >> 1;
    v24 = &v16[-v18];
    v25 = v15;
    v26 = v18;
    v27 = a5;
    v28 = a5 - 1;
    v29 = (unint64_t)&v16[-v18 + 1];
    result = v13 + 16;
    v30 = 2 * (a2 >> 1);
    v31 = v15;
    v32 = a4;
    do
    {
      v33 = 0;
      v34 = v31 >> 6;
      if ((uint64_t)(v31 >> 6) <= v26)
        v35 = v26;
      else
        v35 = v31 >> 6;
      v36 = (uint64_t)(v31 >> 6) < v26;
      if ((uint64_t)(v31 >> 6) >= v26)
        v37 = v31 >> 6;
      else
        v37 = v34 + 1;
      v38 = v35 - v37;
      v39 = (_OWORD *)result;
      v40 = v31 >> 6;
      while (v40 < v26)
      {
        *(_WORD *)(v13 + 2 * (v22 + v33 * v23)) = ((v31 & 0x3E) * (unsigned __int16)v16[~(_DWORD)v40]
                                                 + (64 - (v31 & 0x3E)) * (unsigned __int16)v16[-v40]
                                                 + 32) >> 6;
        ++v33;
        v40 += v19;
        v39 = (_OWORD *)((char *)v39 + 2);
        if (v33 == v27)
          goto LABEL_15;
      }
      v41 = v38 / v19;
      v42 = v41 + v36;
      if (v41 + v36 >= v28)
        v43 = v28;
      else
        v43 = v41 + v36;
      if (v43 + 1 > v27)
        v44 = v43 + 1;
      else
        v44 = v27;
      v45 = v44 - v43;
      if (v45 < 0x20 || v23 != 1)
        goto LABEL_52;
      if (v42 >= v28)
        v42 = v28;
      v47 = v42 + 1 > v27 ? v42 + 1 : v27;
      if (v13 + 2 * (v22 + v33) < v29 && (unint64_t)v24 < v13 + 2 * (v33 + v22 + v47 - v42))
        goto LABEL_52;
      v48 = vld1q_dup_s16(v24);
      v33 += v45 & 0xFFFFFFFFFFFFFFF0;
      v49 = (v35 - (v34 + v36)) / v19 + v36;
      if (v49 >= v28)
        v49 = v28;
      v50 = v49 + 1 > v27 ? v49 + 1 : v27;
      v51 = (v50 - v49) & 0xFFFFFFFFFFFFFFF0;
      do
      {
        *(v39 - 1) = v48;
        *v39 = v48;
        v39 += 2;
        v51 -= 16;
      }
      while (v51);
      if (v45 != (v45 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_52:
        v52 = (__int16 *)(v13 + 2 * (v22 + v23 * v33));
        do
        {
          *v52 = *v24;
          ++v33;
          v52 = (__int16 *)((char *)v52 + v30);
        }
        while (v33 < v27);
      }
LABEL_15:
      ++v22;
      v31 += v25;
      result += 2;
    }
    while (v22 != v32);
  }
  return result;
}

unint64_t ipred_filter_c(unint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, __int16 a6, uint64_t a7, uint64_t a8, int a9)
{
  _WORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned __int16 *v26;
  int v27;
  unsigned __int16 *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  __int16 v39;
  int v40;
  int v41;
  __int16 v42;
  int v43;
  int v44;
  __int16 v45;
  int v46;
  int v47;
  int v48;
  int v49;
  __int16 v50;
  unsigned __int16 *v51;
  uint64_t v52;
  int v53;
  int v54;
  unsigned __int16 v55;
  int v56;
  int v57;
  unsigned __int16 v58;
  int v59;
  int v60;
  unsigned __int16 v61;
  unsigned __int16 *v62;
  int v63;
  int v64;
  unsigned __int16 v65;
  _WORD *v66;
  uint64_t v67;
  unsigned __int16 *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  unsigned __int16 *v74;
  uint64_t v75;
  int v76;
  int v77;
  _WORD *v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  __int16 v83;
  int v84;
  int v85;
  __int16 v86;
  int v87;
  int v88;
  __int16 v89;
  int v90;
  int v91;
  __int16 v92;
  int v93;
  int v94;
  __int16 v95;
  int v96;
  int v97;
  __int16 v98;
  int v99;
  int v100;
  __int16 v101;
  int v102;
  int v103;
  int v104;
  __int16 v105;
  unint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  unint64_t v117;
  unsigned int v118;
  unsigned __int16 *v122;
  uint64_t v123;
  _WORD *v124;
  _WORD *v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  unsigned int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;

  if (a5 >= 1 && a4 >= 1)
  {
    v9 = (_WORD *)result;
    v10 = 0;
    v11 = (char *)&dav1d_filter_intra_taps + 64 * (unint64_t)(a6 & 0x1FF);
    v118 = *v11;
    v12 = v11[8];
    v13 = v11[40];
    v108 = v11[1];
    v117 = a5;
    v14 = v11[9];
    v15 = v11[17];
    v16 = v11[41];
    v17 = v11[2];
    v18 = v11[10];
    v19 = v11[18];
    v20 = v11[26];
    v21 = v11[42];
    v22 = v11[3];
    v23 = v11[11];
    v24 = v11[19];
    LODWORD(result) = v11[27];
    v25 = v11[43];
    v152 = v11[4];
    v151 = v11[12];
    v150 = v11[44];
    v149 = v11[52];
    v148 = v11[5];
    v147 = v11[13];
    v146 = v11[21];
    v145 = v11[45];
    v144 = v11[53];
    v143 = v11[6];
    v142 = v11[14];
    v141 = v11[22];
    v140 = v11[30];
    v139 = v11[46];
    v138 = v11[54];
    v116 = v11[7];
    v115 = v11[15];
    v114 = v11[23];
    v113 = v11[31];
    v112 = v11[39];
    v111 = v11[47];
    v110 = v11[55];
    v26 = (unsigned __int16 *)(a3 + 2);
    v125 = v9 + 4;
    v27 = v11[35];
    v136 = result;
    v137 = v24;
    v134 = v22;
    v135 = v27;
    v132 = v23;
    v133 = v20;
    v130 = v18;
    v131 = v21;
    v128 = v25;
    v129 = v19;
    v126 = v16;
    v127 = v17;
    v107 = v13;
    do
    {
      v123 = v10;
      v28 = (unsigned __int16 *)(a3 - 2 * v10);
      v29 = v25;
      v30 = *v28;
      v31 = *v26;
      v32 = v26[1];
      v33 = v26[2];
      v34 = v26[3];
      v35 = *(v28 - 1);
      v36 = *(v28 - 2);
      v37 = v30 * v118 + v31 * v12 + v35 * v13;
      v38 = (v37 + 8) >> 4;
      if (v38 >= a9)
        LOWORD(v38) = a9;
      if (v37 >= -8)
        v39 = v38;
      else
        v39 = 0;
      *v9 = v39;
      v40 = v30 * v108 + v31 * v14 + v32 * v15 + v35 * v16;
      v41 = (v40 + 8) >> 4;
      if (v41 >= a9)
        LOWORD(v41) = a9;
      if (v40 >= -8)
        v42 = v41;
      else
        v42 = 0;
      v9[1] = v42;
      v43 = v30 * v17 + v31 * v18 + v32 * v19 + v33 * v20 + v35 * v21;
      v44 = (v43 + 8) >> 4;
      if (v44 >= a9)
        LOWORD(v44) = a9;
      if (v43 >= -8)
        v45 = v44;
      else
        v45 = 0;
      v9[2] = v45;
      v46 = v30 * v22 + v31 * v23 + v32 * v24 + v33 * result + v34 * v27;
      v47 = v34;
      v48 = v46 + v35 * v29;
      v49 = (v48 + 8) >> 4;
      if (v49 >= a9)
        LOWORD(v49) = a9;
      if (v48 >= -8)
        v50 = v49;
      else
        v50 = 0;
      v9[3] = v50;
      v124 = v9;
      v51 = &v9[a2 >> 1];
      v52 = v118;
      v53 = v30 * v152 + v31 * v151 + v35 * v150 + v36 * v149;
      v54 = (v53 + 8) >> 4;
      if (v54 >= a9)
        LOWORD(v54) = a9;
      if (v53 >= -8)
        v55 = v54;
      else
        v55 = 0;
      *v51 = v55;
      v56 = v30 * v148 + v31 * v147 + v32 * v146 + v35 * v145 + v36 * v144;
      v57 = (v56 + 8) >> 4;
      if (v57 >= a9)
        LOWORD(v57) = a9;
      if (v56 >= -8)
        v58 = v57;
      else
        v58 = 0;
      v51[1] = v58;
      v59 = v30 * v143 + v31 * v142 + v32 * v141 + v33 * v140 + v35 * v139 + v36 * v138;
      v60 = (v59 + 8) >> 4;
      if (v60 >= a9)
        LOWORD(v60) = a9;
      if (v59 >= -8)
        v61 = v60;
      else
        v61 = 0;
      v51[2] = v61;
      v62 = v26;
      v63 = v30 * v116 + v31 * v115 + v32 * v114 + v33 * v113 + v47 * v112 + v35 * v111 + v36 * v110;
      v64 = (v63 + 8) >> 4;
      if (v64 >= a9)
        LOWORD(v64) = a9;
      if (v63 >= -8)
        v65 = v64;
      else
        v65 = 0;
      v122 = v51;
      v51[3] = v65;
      v109 = a2 >> 1;
      if (a4 >= 5)
      {
        v66 = v125;
        v67 = 3;
        do
        {
          v68 = &v62[v67];
          v69 = *v68;
          v70 = v68[1];
          v71 = v68[2];
          v72 = v68[3];
          v73 = v69 * v52 + v70 * v12;
          v74 = v62;
          v75 = v52;
          v76 = v68[4];
          v77 = (unsigned __int16)*(v66 - 1);
          v78 = &v66[v109];
          v79 = v12;
          v80 = (unsigned __int16)v66[v109 - 1];
          v81 = v73 + v77 * v107;
          v82 = (v81 + 8) >> 4;
          if (v82 >= a9)
            LOWORD(v82) = a9;
          if (v81 >= -8)
            v83 = v82;
          else
            v83 = 0;
          *v66 = v83;
          v84 = v69 * v108 + v70 * v14 + v71 * v15 + v77 * v126;
          v85 = (v84 + 8) >> 4;
          if (v85 >= a9)
            LOWORD(v85) = a9;
          if (v84 >= -8)
            v86 = v85;
          else
            v86 = 0;
          v66[1] = v86;
          v87 = v69 * v127 + v70 * v130 + v71 * v129 + v72 * v133 + v77 * v131;
          v88 = (v87 + 8) >> 4;
          if (v88 >= a9)
            LOWORD(v88) = a9;
          if (v87 >= -8)
            v89 = v88;
          else
            v89 = 0;
          v66[2] = v89;
          v90 = v69 * v134 + v70 * v132 + v71 * v137 + v72 * v136 + v76 * v135 + v77 * v128;
          v91 = (v90 + 8) >> 4;
          if (v91 >= a9)
            LOWORD(v91) = a9;
          if (v90 >= -8)
            v92 = v91;
          else
            v92 = 0;
          v66[3] = v92;
          v93 = v69 * v152 + v70 * v151 + v77 * v150 + v80 * v149;
          v94 = (v93 + 8) >> 4;
          if (v94 >= a9)
            LOWORD(v94) = a9;
          if (v93 >= -8)
            v95 = v94;
          else
            v95 = 0;
          *v78 = v95;
          v96 = v69 * v148 + v70 * v147 + v71 * v146 + v77 * v145 + v80 * v144;
          v97 = (v96 + 8) >> 4;
          if (v97 >= a9)
            LOWORD(v97) = a9;
          if (v96 >= -8)
            v98 = v97;
          else
            v98 = 0;
          v78[1] = v98;
          v99 = v69 * v143 + v70 * v142 + v71 * v141 + v72 * v140 + v77 * v139 + v80 * v138;
          v100 = (v99 + 8) >> 4;
          if (v100 >= a9)
            LOWORD(v100) = a9;
          if (v99 >= -8)
            v101 = v100;
          else
            v101 = 0;
          v78[2] = v101;
          v102 = v69 * v116 + v70 * v115 + v71 * v114 + v72 * v113 + v76 * v112;
          v52 = v75;
          v62 = v74;
          v103 = v102 + v77 * v111 + v80 * v110;
          v12 = v79;
          v104 = (v103 + 8) >> 4;
          if (v104 >= a9)
            LOWORD(v104) = a9;
          if (v103 >= -8)
            v105 = v104;
          else
            v105 = 0;
          v78[3] = v105;
          v106 = v67 + 5;
          v67 += 4;
          v66 += 4;
        }
        while (v106 < a4);
      }
      v9 = &v124[a2];
      v10 = v123 + 2;
      v125 += a2;
      v26 = v122;
      v13 = v107;
      v16 = v126;
      v17 = v127;
      v19 = v129;
      v18 = v130;
      v20 = v133;
      v22 = v134;
      v21 = v131;
      v23 = v132;
      result = v136;
      v24 = v137;
      v27 = v135;
      v25 = v128;
    }
    while (v123 + 2 < v117);
  }
  return result;
}

uint64_t cfl_ac_420_c(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, signed int a7)
{
  return cfl_ac_c(a1, a2, a3, a4, a5, a6, a7, 1, 1);
}

uint64_t cfl_ac_422_c(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, signed int a7)
{
  return cfl_ac_c(a1, a2, a3, a4, a5, a6, a7, 1, 0);
}

uint64_t cfl_ac_444_c(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, signed int a7)
{
  return cfl_ac_c(a1, a2, a3, a4, a5, a6, a7, 0, 0);
}

uint64_t ipred_cfl_c(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, unsigned int a7, signed int a8)
{
  unsigned int v9;
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  uint16x8_t *v13;
  uint64_t v14;
  int32x4_t v15;
  int32x4_t v16;
  uint16x8_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  int v20;
  uint64_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int16x8_t *v24;
  uint64_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int8x16_t v28;
  uint16x8_t v29;
  int8x16_t v30;
  uint16x8_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v37;
  unsigned int v38;
  unsigned int v39;

  v9 = (a5 + a4) >> 1;
  if (a4 >= 1)
  {
    if (a4 < 0x10)
    {
      v10 = 0;
LABEL_7:
      v18 = a4 - v10;
      v19 = (unsigned __int16 *)(a3 + 2 * v10 + 2);
      do
      {
        v20 = *v19++;
        v9 += v20;
        --v18;
      }
      while (v18);
      goto LABEL_9;
    }
    v10 = a4 & 0xFFFFFFF0;
    v11 = 0uLL;
    v12 = (int32x4_t)((a5 + a4) >> 1);
    v13 = (uint16x8_t *)(a3 + 18);
    v14 = v10;
    v15 = 0uLL;
    v16 = 0uLL;
    do
    {
      v17 = v13[-1];
      v11 = (int32x4_t)vaddw_high_u16((uint32x4_t)v11, v17);
      v12 = (int32x4_t)vaddw_u16((uint32x4_t)v12, *(uint16x4_t *)v17.i8);
      v16 = (int32x4_t)vaddw_high_u16((uint32x4_t)v16, *v13);
      v15 = (int32x4_t)vaddw_u16((uint32x4_t)v15, *(uint16x4_t *)v13->i8);
      v13 += 2;
      v14 -= 16;
    }
    while (v14);
    v9 = vaddvq_s32(vaddq_s32(vaddq_s32(v15, v12), vaddq_s32(v16, v11)));
    if (v10 != a4)
      goto LABEL_7;
  }
LABEL_9:
  if (a5 >= 1)
  {
    if (a5 >= 0x10)
    {
      v21 = a5 & 0xFFFFFFF0;
      v22 = 0uLL;
      v23 = (int32x4_t)v9;
      v24 = (int16x8_t *)(a3 - 16);
      v25 = v21;
      v26 = 0uLL;
      v27 = 0uLL;
      do
      {
        v28 = (int8x16_t)vrev64q_s16(*v24);
        v29 = (uint16x8_t)vextq_s8(v28, v28, 8uLL);
        v30 = (int8x16_t)vrev64q_s16(v24[-1]);
        v31 = (uint16x8_t)vextq_s8(v30, v30, 8uLL);
        v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v29);
        v23 = (int32x4_t)vaddw_u16((uint32x4_t)v23, *(uint16x4_t *)v29.i8);
        v27 = (int32x4_t)vaddw_high_u16((uint32x4_t)v27, v31);
        v26 = (int32x4_t)vaddw_u16((uint32x4_t)v26, *(uint16x4_t *)v31.i8);
        v24 -= 2;
        v25 -= 16;
      }
      while (v25);
      v9 = vaddvq_s32(vaddq_s32(vaddq_s32(v26, v23), vaddq_s32(v27, v22)));
      if (v21 == a5)
        goto LABEL_17;
    }
    else
    {
      v21 = 0;
    }
    v32 = (unsigned __int16 *)(a3 - 2 * v21 - 2);
    v33 = a5 - v21;
    do
    {
      v34 = *v32--;
      v9 += v34;
      --v33;
    }
    while (v33);
  }
LABEL_17:
  v35 = v9 >> __clz(__rbit32(a5 + a4));
  if (2 * a4 < a5 || 2 * a5 < a4)
    v37 = 26215;
  else
    v37 = 43691;
  v38 = (v35 * v37) >> 17;
  if (a4 == a5)
    v39 = v35;
  else
    v39 = v38;
  return cfl_pred(a1, a2, a4, a5, v39, a6, a7, a8);
}

uint64_t ipred_cfl_128_c(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, unsigned int a7, signed int a8)
{
  return cfl_pred(a1, a2, a4, a5, (a8 + 1) >> 1, a6, a7, a8);
}

uint64_t ipred_cfl_top_c(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, unsigned int a7, signed int a8)
{
  unsigned int v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  uint16x8_t *v12;
  uint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint16x8_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  int v19;

  v8 = a4 >> 1;
  if (a4 >= 1)
  {
    if (a4 < 0x10)
    {
      v9 = 0;
LABEL_7:
      v17 = a4 - v9;
      v18 = (unsigned __int16 *)(a3 + 2 * v9 + 2);
      do
      {
        v19 = *v18++;
        v8 += v19;
        --v17;
      }
      while (v17);
      return cfl_pred(a1, a2, a4, a5, v8 >> __clz(__rbit32(a4)), a6, a7, a8);
    }
    v9 = a4 & 0xFFFFFFF0;
    v10 = 0uLL;
    v11 = (int32x4_t)(a4 >> 1);
    v12 = (uint16x8_t *)(a3 + 18);
    v13 = v9;
    v14 = 0uLL;
    v15 = 0uLL;
    do
    {
      v16 = v12[-1];
      v10 = (int32x4_t)vaddw_high_u16((uint32x4_t)v10, v16);
      v11 = (int32x4_t)vaddw_u16((uint32x4_t)v11, *(uint16x4_t *)v16.i8);
      v15 = (int32x4_t)vaddw_high_u16((uint32x4_t)v15, *v12);
      v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v12->i8);
      v12 += 2;
      v13 -= 16;
    }
    while (v13);
    v8 = vaddvq_s32(vaddq_s32(vaddq_s32(v14, v11), vaddq_s32(v15, v10)));
    if (v9 != a4)
      goto LABEL_7;
  }
  return cfl_pred(a1, a2, a4, a5, v8 >> __clz(__rbit32(a4)), a6, a7, a8);
}

uint64_t ipred_cfl_left_c(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, unsigned int a7, signed int a8)
{
  unsigned int v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int16x8_t *v12;
  uint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int8x16_t v16;
  uint16x8_t v17;
  int8x16_t v18;
  uint16x8_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  int v22;

  v8 = a5 >> 1;
  if (a5 >= 1)
  {
    if (a5 < 0x10)
    {
      v9 = 0;
LABEL_7:
      v20 = (unsigned __int16 *)(a3 - 2 * v9 - 2);
      v21 = a5 - v9;
      do
      {
        v22 = *v20--;
        v8 += v22;
        --v21;
      }
      while (v21);
      return cfl_pred(a1, a2, a4, a5, v8 >> __clz(__rbit32(a5)), a6, a7, a8);
    }
    v9 = a5 & 0xFFFFFFF0;
    v10 = 0uLL;
    v11 = (int32x4_t)(a5 >> 1);
    v12 = (int16x8_t *)(a3 - 16);
    v13 = v9;
    v14 = 0uLL;
    v15 = 0uLL;
    do
    {
      v16 = (int8x16_t)vrev64q_s16(*v12);
      v17 = (uint16x8_t)vextq_s8(v16, v16, 8uLL);
      v18 = (int8x16_t)vrev64q_s16(v12[-1]);
      v19 = (uint16x8_t)vextq_s8(v18, v18, 8uLL);
      v10 = (int32x4_t)vaddw_high_u16((uint32x4_t)v10, v17);
      v11 = (int32x4_t)vaddw_u16((uint32x4_t)v11, *(uint16x4_t *)v17.i8);
      v15 = (int32x4_t)vaddw_high_u16((uint32x4_t)v15, v19);
      v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v19.i8);
      v12 -= 2;
      v13 -= 16;
    }
    while (v13);
    v8 = vaddvq_s32(vaddq_s32(vaddq_s32(v14, v11), vaddq_s32(v15, v10)));
    if (v9 != a5)
      goto LABEL_7;
  }
  return cfl_pred(a1, a2, a4, a5, v8 >> __clz(__rbit32(a5)), a6, a7, a8);
}

uint64_t pal_pred_c(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int i;
  uint64_t j;

  if (a6 >= 1 && a5 >= 1)
  {
    for (i = 0; i != a6; ++i)
    {
      for (j = 0; j != a5; ++j)
        *(_WORD *)(result + 2 * j) = *(_WORD *)(a3 + 2 * *(unsigned __int8 *)(a4 + j));
      a4 += a5;
      result += 2 * (a2 >> 1);
    }
  }
  return result;
}

uint64_t splat_dc(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  int i;
  int j;

  if (a4 >= 1 && a3 >= 1)
  {
    for (i = 0; i != a4; ++i)
    {
      for (j = 0; j < a3; j += 4)
        *(_QWORD *)(result + 2 * j) = 0x1000100010001 * a5;
      result += 2 * (a2 >> 1);
    }
  }
  return result;
}

uint64_t upsample_edge(uint64_t result, int a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  __int16 v22;

  v6 = a5 - 1;
  if (a2 < 2)
  {
    LODWORD(v8) = 0;
  }
  else
  {
    v7 = 0;
    v8 = (a2 - 1);
    v9 = (_WORD *)(result + 2);
    do
    {
      if ((int)v7 >= v6)
        v10 = v6;
      else
        v10 = v7;
      v11 = v7 - 1;
      if ((int)v7 - 1 >= v6)
        v11 = v6;
      if (v7 < a4)
        v10 = a4;
      v12 = 2 * v10;
      *(v9 - 1) = *(_WORD *)(a3 + v12);
      if (v7 <= a4)
        v11 = a4;
      v13 = *(unsigned __int16 *)(a3 + 2 * v11);
      v14 = v7 + 1;
      v15 = *(unsigned __int16 *)(a3 + v12);
      if ((int)v7 + 1 >= v6)
        v16 = v6;
      else
        v16 = v7 + 1;
      if (v7 <= a4 - 2)
        v16 = a4;
      v17 = *(unsigned __int16 *)(a3 + 2 * v16);
      v18 = v7 + 2;
      if ((int)v7 + 2 >= v6)
        v18 = v6;
      if (v7 <= a4 - 3)
        v19 = a4;
      else
        v19 = v18;
      v20 = 9 * (v17 + v15) - (*(unsigned __int16 *)(a3 + 2 * v19) + v13);
      v21 = (v20 + 8) >> 4;
      if (v21 >= a6)
        LOWORD(v21) = a6;
      if (v20 >= -8)
        v22 = v21;
      else
        v22 = 0;
      *v9 = v22;
      v9 += 2;
      v7 = v14;
    }
    while (v8 != v14);
  }
  if ((int)v8 < v6)
    v6 = v8;
  if ((int)v8 < a4)
    v6 = a4;
  *(_WORD *)(result + 2 * (2 * v8)) = *(_WORD *)(a3 + 2 * v6);
  return result;
}

uint64_t get_filter_strength(unsigned int a1, int a2, int a3)
{
  uint64_t result;
  unsigned int v5;

  if (!a3)
  {
    if ((int)a1 > 8)
    {
      if (a1 > 0x10)
      {
        if (a1 <= 0x18)
        {
          if (a2 > 31)
            return 3;
          if (a2 > 15)
            return 2;
          return a2 > 7;
        }
        if (a2 <= 3)
          v5 = 1;
        else
          v5 = 2;
        if (a2 > 31)
          v5 = 3;
        if (a1 <= 0x20)
          return v5;
        else
          return 3;
      }
      if (a2 > 39)
        return 1;
    }
    else if (a2 > 55)
    {
      return 1;
    }
    return 0;
  }
  if ((int)a1 <= 8)
  {
    if (a2 > 63)
      return 2;
    return a2 > 39;
  }
  if (a1 <= 0x10)
  {
    if (a2 > 47)
      return 2;
    return a2 > 19;
  }
  result = 3;
  if (a1 <= 0x18 && a2 <= 3)
    return 0;
  return result;
}

uint64_t filter_edge(uint64_t result, int a2, int a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v8;
  uint64_t i;
  int v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;

  if (a2 >= a3)
    v8 = a3;
  else
    v8 = a2;
  if ((int)v8 < 1)
  {
    LODWORD(v8) = 0;
    if (a4 >= a2)
      v11 = a2;
    else
      v11 = a4;
    if ((int)v11 <= 0)
      goto LABEL_16;
  }
  else
  {
    for (i = 0; i != v8; ++i)
    {
      if ((int)i >= a7 - 1)
        v10 = a7 - 1;
      else
        v10 = i;
      if (i < a6)
        v10 = a6;
      *(_WORD *)(result + 2 * i) = *(_WORD *)(a5 + 2 * v10);
    }
    if (a4 >= a2)
      v11 = a2;
    else
      v11 = a4;
    if ((int)v8 >= (int)v11)
    {
LABEL_16:
      if ((int)v8 >= a2)
        return result;
      goto LABEL_51;
    }
  }
  v12 = a7 - 1;
  v8 = v8;
  v13 = (unsigned __int8 *)&filter_edge_kernel + 5 * (a8 - 1);
  v14 = *v13;
  v15 = v13[1];
  v16 = v13[2];
  v17 = v13[3];
  v18 = v13[4];
  do
  {
    if ((int)v8 - 2 >= v12)
      v19 = a7 - 1;
    else
      v19 = v8 - 2;
    if (v8 - 2 >= a6)
      v20 = v19;
    else
      v20 = a6;
    v21 = *(unsigned __int16 *)(a5 + 2 * v20);
    v22 = v8 - 1;
    if ((int)v8 - 1 >= v12)
      v22 = a7 - 1;
    if ((int)v8 >= v12)
      v23 = a7 - 1;
    else
      v23 = v8;
    if (v8 <= a6)
      v22 = a6;
    v24 = *(unsigned __int16 *)(a5 + 2 * v22);
    if (v8 < a6)
      v23 = a6;
    v25 = *(unsigned __int16 *)(a5 + 2 * v23);
    v26 = v8 + 1;
    if ((int)v8 + 1 >= v12)
      v27 = a7 - 1;
    else
      v27 = v8 + 1;
    if (v26 < a6)
      v27 = a6;
    v28 = *(unsigned __int16 *)(a5 + 2 * v27);
    v29 = v24 * v15;
    if ((int)v8 + 2 >= v12)
      v30 = a7 - 1;
    else
      v30 = v8 + 2;
    if (v8 + 2 >= a6)
      v31 = v30;
    else
      v31 = a6;
    *(_WORD *)(result + 2 * v8++) = (v29
                                   + v21 * v14
                                   + v25 * v16
                                   + v28 * v17
                                   + *(unsigned __int16 *)(a5 + 2 * v31) * v18
                                   + 8) >> 4;
  }
  while (v11 != v26);
  LODWORD(v8) = v11;
  if ((int)v11 < a2)
  {
LABEL_51:
    v32 = v8;
    do
    {
      if ((int)v32 >= a7 - 1)
        v33 = a7 - 1;
      else
        v33 = v32;
      if ((int)v32 < a6)
        v33 = a6;
      *(_WORD *)(result + 2 * v32++) = *(_WORD *)(a5 + 2 * v33);
    }
    while (a2 != v32);
  }
  return result;
}

uint64_t cfl_ac_c(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, signed int a7, int a8, int a9)
{
  uint16x8_t *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  __int16 v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  uint16x8_t *v32;
  uint64_t v33;
  unint64_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int v41;
  unsigned int v42;
  int16x8_t v43;
  uint64_t v44;
  unint64_t v45;
  int16x8_t *v46;
  int16x8_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  int16x8_t v52;
  int16x8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  uint16x8_t v61;
  uint16x8_t *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint16x8_t *v68;
  int16x8_t *v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t *v72;
  uint16x8_t v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  uint64_t v77;
  uint32x4_t v78;
  int16x8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int16x8_t *v84;
  uint16x4_t *v85;
  int16x8_t v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;

  v11 = (uint16x8_t *)result;
  v12 = a7 - 4 * a5;
  if (v12 < 1)
  {
    v12 = 0;
    v23 = (char *)result;
    goto LABEL_20;
  }
  v13 = (a6 - 4 * a4);
  if (a8)
    v14 = 1;
  else
    v14 = 2;
  if (a8)
    v15 = 2;
  else
    v15 = 3;
  if ((int)v13 < 1)
  {
    if ((int)a6 <= 0)
    {
      v23 = (char *)(result + (2 * (~(4 * a5) + a7) + 2) * (int)a6);
      goto LABEL_20;
    }
    v48 = 0;
    v23 = (char *)result;
    while (1)
    {
      v49 = *((unsigned __int16 *)v23 - 1);
      if (a6 >= 0x10)
      {
        v51 = 0;
        v52 = vdupq_n_s16(v49);
        do
        {
          v53 = (int16x8_t *)&v23[v51];
          *v53 = v52;
          v53[1] = v52;
          v51 += 32;
        }
        while (((2 * a6) & 0x1FFFFFFE0) != v51);
        v50 = a6 & 0xFFFFFFF0;
        if (v50 == a6)
          goto LABEL_45;
      }
      else
      {
        v50 = 0;
      }
      do
        *(_WORD *)&v23[2 * v50++] = v49;
      while (a6 != v50);
LABEL_45:
      v23 += 2 * (int)a6;
      if (++v48 == v12)
        goto LABEL_20;
    }
  }
  v16 = a3 >> 1;
  v17 = a3 >> 1 << a9;
  if (a9)
  {
    v18 = 2 * v17;
    v19 = 2 * v13;
    v20 = 0;
    if (a8)
    {
      v21 = v19 - 2;
      v22 = 2 * (int)a6;
      result = a2 + 2;
      v23 = (char *)v11;
      do
      {
        v24 = 0;
        v25 = (unsigned __int16 *)result;
        do
        {
          *(_WORD *)&v23[2 * v24] = (v25[v16]
                                   + *v25
                                   + *(unsigned __int16 *)(a2 + 2 * (int)((_DWORD)v24 << a8))
                                   + *(unsigned __int16 *)(a2 + 2 * (v16 + (int)((_DWORD)v24 << a8)))) << v14;
          ++v24;
          v25 += 2;
        }
        while (v13 != v24);
        if (a4)
        {
          v26 = *(__int16 *)((char *)v11->i16 + v21 + v22 * v20);
          v27 = (a6 - 4 * a4);
          do
            *(_WORD *)&v23[2 * v27++] = v26;
          while (v27 < (int)a6);
        }
        v23 += v22;
        a2 += 2 * v17;
        ++v20;
        result += v18;
      }
      while ((_DWORD)v20 != v12);
      goto LABEL_20;
    }
    v60 = 2 * (int)a6;
    result = v19 - 2;
    v61 = (uint16x8_t)vdupq_n_s16(v14);
    v62 = v11 + 1;
    v23 = (char *)v11;
    v63 = a2;
    while (1)
    {
      if ((v13 - 16) > 0x7FFFFFF0)
      {
        v64 = 0;
      }
      else
      {
        v64 = 0;
        v65 = &v11->i8[v60 * v20];
        if ((unint64_t)&v65[-a2 - a3 - v18 * v20] >= 0x20 && (unint64_t)&v65[-(v18 * v20) - a2] >= 0x20)
        {
          v66 = 0;
          v67 = v13 & 0xFFFFFFF0;
          v68 = v62;
          do
          {
            v69 = (int16x8_t *)(v63 + (v66 >> 31));
            v70 = *v69;
            v71 = v69[1];
            v72 = (int16x8_t *)(v63 + 2 * (v16 + (v66 >> 32)));
            v73 = vshlq_u16((uint16x8_t)vaddq_s16(v72[1], v71), v61);
            v68[-1] = vshlq_u16((uint16x8_t)vaddq_s16(*v72, v70), v61);
            *v68 = v73;
            v66 += 0x1000000000;
            v68 += 2;
            v67 -= 16;
          }
          while (v67);
          v64 = v13 & 0x7FFFFFF0;
          if ((v13 & 0xFFFFFFF0) == v13)
            goto LABEL_74;
        }
      }
      v74 = v64 << 32;
      do
      {
        *(_WORD *)&v23[2 * v64++] = (*(unsigned __int16 *)(v63 + 2 * (v16 + (v74 >> 32)))
                                   + *(unsigned __int16 *)(v63 + (v74 >> 31))) << v14;
        v74 += 0x100000000;
      }
      while (v13 != v64);
LABEL_74:
      if (a4)
      {
        v75 = *(__int16 *)((char *)v11->i16 + result + v60 * v20);
        v76 = (a6 - 4 * a4);
        do
          *(_WORD *)&v23[2 * v76++] = v75;
        while (v76 < (int)a6);
      }
      v23 += v60;
      v63 += 2 * v17;
      ++v20;
      v62 = (uint16x8_t *)((char *)v62 + v60);
      if ((_DWORD)v20 == v12)
        goto LABEL_20;
    }
  }
  v54 = 0;
  if (a8)
  {
    v55 = 2 * (int)a6;
    v56 = 2 * v17;
    v23 = (char *)result;
    do
    {
      v57 = 0;
      result = 2;
      do
      {
        *(_WORD *)&v23[2 * v57] = (*(unsigned __int16 *)(a2 + result)
                                 + *(unsigned __int16 *)(a2 + 2 * (int)((_DWORD)v57 << a8))) << v15;
        ++v57;
        result += 4;
      }
      while (v13 != v57);
      if (a4)
      {
        v58 = *(__int16 *)((char *)&v11->i16[v13 - 1] + v55 * v54);
        v59 = (a6 - 4 * a4);
        do
          *(_WORD *)&v23[2 * v59++] = v58;
        while (v59 < (int)a6);
      }
      v23 += v55;
      a2 += v56;
      ++v54;
    }
    while ((_DWORD)v54 != v12);
  }
  else
  {
    v77 = 2 * (int)a6;
    result = v13 & 0xFFFFFFF0;
    v78 = (uint32x4_t)vdupq_n_s32(v15);
    v79 = (int16x8_t *)&v11[1];
    v23 = (char *)v11;
    v80 = a2;
    do
    {
      v81 = 0;
      if ((v13 + 0x7FFFFFFF) < 0x8000000F)
        goto LABEL_86;
      if ((unint64_t)v11->u64 + v77 * v54 - a2 - 2 * v17 * v54 < 0x20)
        goto LABEL_86;
      v82 = 0;
      v83 = v13 & 0xFFFFFFF0;
      v84 = v79;
      do
      {
        v85 = (uint16x4_t *)(v80 + (v82 >> 31));
        v86 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(v85[2]), v78), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v85[2].i8), v78));
        v84[-1] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*v85), v78), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v85->i8), v78));
        *v84 = v86;
        v82 += 0x1000000000;
        v84 += 2;
        v83 -= 16;
      }
      while (v83);
      v81 = v13 & 0x7FFFFFF0;
      if (result != v13)
      {
LABEL_86:
        v87 = v81 << 32;
        do
        {
          *(_WORD *)&v23[2 * v81++] = *(unsigned __int16 *)(v80 + (v87 >> 31)) << v15;
          v87 += 0x100000000;
        }
        while (v13 != v81);
      }
      if (a4)
      {
        v88 = *(__int16 *)((char *)&v11->i16[v13 - 1] + v77 * v54);
        v89 = (a6 - 4 * a4);
        do
          *(_WORD *)&v23[2 * v89++] = v88;
        while (v89 < (int)a6);
      }
      v23 += v77;
      v80 += 2 * v17;
      ++v54;
      v79 = (int16x8_t *)((char *)v79 + v77);
    }
    while ((_DWORD)v54 != v12);
  }
LABEL_20:
  v28 = a7 - v12;
  if (a7 > v12)
  {
    do
    {
      result = (uint64_t)memcpy(v23, &v23[-2 * (int)a6], 2 * (int)a6);
      v23 += 2 * (int)a6;
      --v28;
    }
    while (v28);
  }
  if (a7 >= 1 && (int)a6 >= 1)
  {
    v29 = 0;
    v30 = __clz(__rbit32(a7)) + __clz(__rbit32(a6));
    v31 = 1 << v30 >> 1;
    v32 = v11;
    while (1)
    {
      if (a6 >= 0x10)
      {
        v34 = 0;
        v35 = 0uLL;
        v36 = (int32x4_t)v31;
        v37 = 0uLL;
        v38 = 0uLL;
        do
        {
          v39 = (int16x8_t)v32[v34 / 0x10];
          v40 = (int16x8_t)v32[v34 / 0x10 + 1];
          v35 = vaddw_high_s16(v35, v39);
          v36 = vaddw_s16(v36, *(int16x4_t *)v39.i8);
          v38 = vaddw_high_s16(v38, v40);
          v37 = vaddw_s16(v37, *(int16x4_t *)v40.i8);
          v34 += 32;
        }
        while (((2 * a6) & 0x1FFFFFFE0) != v34);
        v31 = vaddvq_s32(vaddq_s32(vaddq_s32(v37, v36), vaddq_s32(v38, v35)));
        v33 = a6 & 0xFFFFFFF0;
        if (v33 == a6)
          goto LABEL_25;
      }
      else
      {
        v33 = 0;
      }
      do
        v31 += v32->i16[v33++];
      while (a6 != v33);
LABEL_25:
      ++v29;
      v32 = (uint16x8_t *)((char *)v32 + 2 * (int)a6);
      if (v29 == a7)
      {
        v41 = 0;
        v42 = v31 >> v30;
        v43 = vdupq_n_s16(v42);
        while (1)
        {
          if (a6 >= 0x10)
          {
            v45 = 0;
            do
            {
              v46 = (int16x8_t *)&v11[v45 / 0x10];
              v47 = vsubq_s16((int16x8_t)v11[v45 / 0x10 + 1], v43);
              *v46 = vsubq_s16((int16x8_t)v11[v45 / 0x10], v43);
              v46[1] = v47;
              v45 += 32;
            }
            while (((2 * a6) & 0x1FFFFFFE0) != v45);
            v44 = a6 & 0xFFFFFFF0;
            if (v44 == a6)
              goto LABEL_34;
          }
          else
          {
            v44 = 0;
          }
          do
            v11->i16[v44++] -= v42;
          while (a6 != v44);
LABEL_34:
          ++v41;
          v11 = (uint16x8_t *)((char *)v11 + 2 * a6);
          if (v41 == a7)
            return result;
        }
      }
    }
  }
  return result;
}

uint64_t cfl_pred(uint64_t result, uint64_t a2, int a3, int a4, unsigned int a5, uint64_t a6, unsigned int a7, signed int a8)
{
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  __int16 v30;
  __int16 v31;

  if (a4 >= 1 && a3 >= 1)
  {
    v8 = 0;
    v9 = 2 * a3;
    v10 = vdupq_n_s32(a7);
    v11 = vdupq_n_s32(a5);
    v12 = vdupq_n_s32(a8);
    v13.i64[0] = 0x2000000020;
    v13.i64[1] = 0x2000000020;
    v14 = result;
    v15 = a6;
    while (a3 >= 8)
    {
      if ((unint64_t)(result + v8 * a2 - (a6 + v9 * v8)) < 0x10)
      {
        for (i = 0; i != a3; *(_WORD *)(v14 + 2 * i++) = v31)
        {
LABEL_12:
          v26 = *(__int16 *)(v15 + 2 * i) * a7;
          v27 = v26 < 0;
          if (v26 < 0)
            v26 = -v26;
          v28 = (v26 + 32) >> 6;
          if (v27)
            v28 = -v28;
          v29 = v28 + a5;
          if (v29 >= a8)
            v30 = a8;
          else
            v30 = v29;
          if (v29 >= 0)
            v31 = v30;
          else
            v31 = 0;
        }
        goto LABEL_4;
      }
      v17 = 0;
      do
      {
        v18 = *(int16x8_t *)(v15 + v17);
        v19 = vmovl_high_s16(v18);
        v20 = vmulq_s32(v10, vmovl_s16(*(int16x4_t *)v18.i8));
        v21 = vmulq_s32(v10, v19);
        v22 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vabsq_s32(v21), v13), 6uLL);
        v23 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vabsq_s32(v20), v13), 6uLL);
        v24 = vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v20), (int8x16_t)vnegq_s32(v23), (int8x16_t)v23), v11);
        v25 = vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v21), (int8x16_t)vnegq_s32(v22), (int8x16_t)v22), v11);
        *(int8x16_t *)(v14 + v17) = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v24, v12), (int16x8_t)vminq_s32(v25, v12)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v24), (int16x8_t)vcltzq_s32(v25)));
        v17 += 16;
      }
      while (((2 * a3) & 0x1FFFFFFF0) != v17);
      i = a3 & 0xFFFFFFF8;
      if (i != a3)
        goto LABEL_12;
LABEL_4:
      ++v8;
      v15 += v9;
      v14 += 2 * (a2 >> 1);
      if ((_DWORD)v8 == a4)
        return result;
    }
    i = 0;
    goto LABEL_12;
  }
  return result;
}

uint64_t inv_txfm_add_wht_wht_4x4_c(unsigned __int16 *a1, uint64_t a2, int *a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 v64;
  unsigned __int16 v65;
  int v66;
  unsigned __int16 v67;
  unsigned __int16 v68;
  int v69;
  unsigned __int16 v70;
  unsigned __int16 v71;
  int v72;
  unsigned __int16 v73;
  unsigned __int16 v74;
  _WORD *v75;
  int v76;
  __int16 v77;
  __int16 v78;
  int v79;
  __int16 v80;
  __int16 v81;
  int v82;
  __int16 v83;
  __int16 v84;
  int v85;
  __int16 v86;
  __int16 v87;
  unsigned __int16 *v88;
  int v89;
  unsigned __int16 v90;
  unsigned __int16 v91;
  int v92;
  unsigned __int16 v93;
  unsigned __int16 v94;
  int v95;
  unsigned __int16 v96;
  unsigned __int16 v97;
  int v98;
  uint64_t result;
  unsigned __int16 v100;
  unsigned __int16 *v101;
  int v102;
  unsigned __int16 v103;
  unsigned __int16 v104;
  int v105;
  unsigned __int16 v106;
  unsigned __int16 v107;
  int v108;
  unsigned __int16 v109;
  unsigned __int16 v110;
  int v111;
  unsigned __int16 v112;
  unsigned __int16 v113;

  v5 = a3[4] >> 2;
  v6 = a3[12] >> 2;
  v7 = v5 + (*a3 >> 2);
  v8 = (a3[8] >> 2) - v6;
  v9 = (v7 - v8) >> 1;
  v10 = v9 - v6;
  v11 = v9 - v5;
  v12 = v11 + v8;
  v13 = a3[5] >> 2;
  v14 = a3[13] >> 2;
  v15 = v13 + (a3[1] >> 2);
  v16 = (a3[9] >> 2) - v14;
  v17 = (v15 - v16) >> 1;
  v18 = v17 - v14;
  v19 = v17 - v13;
  v20 = v15 - v18;
  v21 = v19 + v16;
  v22 = a3[6] >> 2;
  v23 = a3[14] >> 2;
  v24 = v22 + (a3[2] >> 2);
  v25 = (a3[10] >> 2) - v23;
  v26 = (v24 - v25) >> 1;
  v27 = v26 - v23;
  v28 = v26 - v22;
  v29 = v28 + v25;
  v30 = a3[7] >> 2;
  v31 = a3[15] >> 2;
  v32 = v30 + (a3[3] >> 2);
  v33 = (a3[11] >> 2) - v31;
  v34 = (v32 - v33) >> 1;
  v35 = v34 - v31;
  v36 = v34 - v30;
  v37 = v32 - v35;
  v38 = v36 + v33;
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  *((_OWORD *)a3 + 3) = 0u;
  v39 = v20 + v7 - v10;
  v40 = v24 - v27 - v37;
  v41 = (v39 - v40) >> 1;
  v42 = v41 - v37;
  v43 = v41 - v20;
  v44 = v39 - v42;
  v45 = v18 + v10;
  v46 = v27 - v35;
  v47 = (v18 + v10 - (v27 - v35)) >> 1;
  v48 = v47 - v35;
  v49 = v47 - v18;
  v50 = v45 - v48;
  v51 = v19 + v11;
  v52 = v28 - v36;
  v53 = (v51 - (v28 - v36)) >> 1;
  v54 = v53 - v36;
  v55 = v53 - v19;
  v56 = v51 - v54;
  v57 = v12 + v21;
  v58 = v29 - v38;
  v59 = (v57 - (v29 - v38)) >> 1;
  v60 = v59 - v38;
  v61 = v59 - v21;
  v62 = v57 - v60;
  v63 = v44 + *a1;
  if (v63 >= a5)
    v64 = a5;
  else
    v64 = v63;
  if (v63 >= 0)
    v65 = v64;
  else
    v65 = 0;
  *a1 = v65;
  v66 = v50 + a1[1];
  if (v66 >= a5)
    v67 = a5;
  else
    v67 = v66;
  if (v66 >= 0)
    v68 = v67;
  else
    v68 = 0;
  a1[1] = v68;
  v69 = v56 + a1[2];
  if (v69 >= a5)
    v70 = a5;
  else
    v70 = v69;
  if (v69 >= 0)
    v71 = v70;
  else
    v71 = 0;
  a1[2] = v71;
  v72 = v62 + a1[3];
  if (v72 >= a5)
    v73 = a5;
  else
    v73 = v62 + a1[3];
  if (v72 >= 0)
    v74 = v73;
  else
    v74 = 0;
  a1[3] = v74;
  v75 = (unsigned __int16 *)((char *)a1 + a2);
  v76 = v42 + *(unsigned __int16 *)((char *)a1 + a2);
  if (v76 >= a5)
    v77 = a5;
  else
    v77 = v76;
  if (v76 >= 0)
    v78 = v77;
  else
    v78 = 0;
  *v75 = v78;
  v79 = v48 + (unsigned __int16)v75[1];
  if (v79 >= a5)
    v80 = a5;
  else
    v80 = v79;
  if (v79 >= 0)
    v81 = v80;
  else
    v81 = 0;
  v75[1] = v81;
  v82 = v54 + (unsigned __int16)v75[2];
  if (v82 >= a5)
    v83 = a5;
  else
    v83 = v54 + v75[2];
  if (v82 >= 0)
    v84 = v83;
  else
    v84 = 0;
  v75[2] = v84;
  v85 = v60 + (unsigned __int16)v75[3];
  if (v85 >= a5)
    v86 = a5;
  else
    v86 = v60 + v75[3];
  if (v85 >= 0)
    v87 = v86;
  else
    v87 = 0;
  v75[3] = v87;
  v88 = (_WORD *)((char *)v75 + a2);
  v89 = v43 + *v88;
  if (v89 >= a5)
    v90 = a5;
  else
    v90 = v43 + *v88;
  if (v89 >= 0)
    v91 = v90;
  else
    v91 = 0;
  *v88 = v91;
  v92 = v49 + v88[1];
  if (v92 >= a5)
    v93 = a5;
  else
    v93 = v49 + v88[1];
  if (v92 >= 0)
    v94 = v93;
  else
    v94 = 0;
  v88[1] = v94;
  v95 = v55 + v88[2];
  if (v95 >= a5)
    v96 = a5;
  else
    v96 = v55 + v88[2];
  if (v95 >= 0)
    v97 = v96;
  else
    v97 = 0;
  v88[2] = v97;
  v98 = v61 + v88[3];
  if (v98 >= a5)
    result = a5;
  else
    result = v98;
  if (v98 >= 0)
    v100 = result;
  else
    v100 = 0;
  v88[3] = v100;
  v101 = (unsigned __int16 *)((char *)v88 + a2);
  v102 = v43 + v40 + *v101;
  if (v102 >= a5)
    v103 = a5;
  else
    v103 = v102;
  if (v102 >= 0)
    v104 = v103;
  else
    v104 = 0;
  *v101 = v104;
  v105 = v49 + v46 + v101[1];
  if (v105 >= a5)
    v106 = a5;
  else
    v106 = v105;
  if (v105 >= 0)
    v107 = v106;
  else
    v107 = 0;
  v101[1] = v107;
  v108 = v55 + v52 + v101[2];
  if (v108 >= a5)
    v109 = a5;
  else
    v109 = v108;
  if (v108 >= 0)
    v110 = v109;
  else
    v110 = 0;
  v101[2] = v110;
  v111 = v61 + v58 + v101[3];
  if (v111 >= a5)
    v112 = a5;
  else
    v112 = v111;
  if (v111 >= 0)
    v113 = v112;
  else
    v113 = 0;
  v101[3] = v113;
  return result;
}

uint64_t inv_txfm_add_dct_dct_4x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c_4(a1, a2, a3, a4, 4, 4, 0, 1, a5);
}

uint64_t inv_txfm_add_identity_identity_4x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c_3(a1, a2, a3, a4, 4, 4, 0, 0, a5);
}

uint64_t inv_txfm_add_adst_dct_4x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_adst_4x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_adst_4x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_adst_4x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_flipadst_4x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_dct_4x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_flipadst_4x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_flipadst_4x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_identity_4x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_dct_4x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_identity_4x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_flipadst_4x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_identity_4x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_adst_4x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_dct_4x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct8_1d_c, 1, a5);
}

uint64_t inv_txfm_add_identity_identity_4x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_dct_4x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_adst_4x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_adst_4x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_adst_4x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_flipadst_4x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_dct_4x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_flipadst_4x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_flipadst_4x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_identity_4x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_dct_4x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_identity_4x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_flipadst_4x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_identity_4x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_adst_4x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_dct_4x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct16_1d_c, 1, a5);
}

uint64_t inv_txfm_add_identity_identity_4x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_dct_4x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_adst_4x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_adst_4x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_adst_4x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_flipadst_4x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_dct_4x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_flipadst_4x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_flipadst_4x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_identity_4x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_dct_4x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_identity_4x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_flipadst_4x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_identity_4x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_adst_4x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_dct_8x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct4_1d_c, 1, a5);
}

uint64_t inv_txfm_add_identity_identity_8x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_dct_8x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_adst_8x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_adst_8x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_adst_8x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_flipadst_8x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_dct_8x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_flipadst_8x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_flipadst_8x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_identity_8x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_dct_8x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_identity_8x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_flipadst_8x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_identity_8x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_adst_8x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_dct_8x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct8_1d_c, 1, a5);
}

uint64_t inv_txfm_add_identity_identity_8x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_dct_8x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_adst_8x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_adst_8x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_adst_8x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_flipadst_8x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_dct_8x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_flipadst_8x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_flipadst_8x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_identity_8x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_dct_8x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_identity_8x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_flipadst_8x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_identity_8x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_adst_8x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_dct_8x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct16_1d_c, 1, a5);
}

uint64_t inv_txfm_add_identity_identity_8x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_dct_8x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_adst_8x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_adst_8x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_adst_8x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_flipadst_8x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_dct_8x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_flipadst_8x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_flipadst_8x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_identity_8x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_dct_8x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_identity_8x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_flipadst_8x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_identity_8x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_adst_8x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_dct_8x32_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 32, 2, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct32_1d_c, 1, a5);
}

uint64_t inv_txfm_add_identity_identity_8x32_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 8, 32, 2, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity32_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_dct_16x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct4_1d_c, 1, a5);
}

uint64_t inv_txfm_add_identity_identity_16x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_dct_16x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_adst_16x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_adst_16x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_adst_16x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_flipadst_16x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_dct_16x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_flipadst_16x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_flipadst_16x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_identity_16x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_dct_16x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_identity_16x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_flipadst_16x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_identity_16x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_adst_16x4_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst4_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_dct_16x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct8_1d_c, 1, a5);
}

uint64_t inv_txfm_add_identity_identity_16x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_dct_16x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_adst_16x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_adst_16x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_adst_16x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_flipadst_16x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_dct_16x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_flipadst_16x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_flipadst_16x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_identity_16x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_dct_16x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_identity_16x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_flipadst_16x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_identity_16x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_adst_16x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_dct_16x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct16_1d_c, 1, a5);
}

uint64_t inv_txfm_add_identity_identity_16x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_dct_16x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_adst_16x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_adst_16x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_adst_16x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_adst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_adst_flipadst_16x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_dct_16x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_flipadst_16x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_flipadst_flipadst_16x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_flipadst16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_identity_16x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_identity_dct_16x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_dct_16x32_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 32, 1, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct32_1d_c, 1, a5);
}

uint64_t inv_txfm_add_identity_identity_16x32_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 32, 1, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity32_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_dct_16x64_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 16, 64, 2, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct64_1d_c, 1, a5);
}

uint64_t inv_txfm_add_dct_dct_32x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 32, 8, 2, (uint64_t)dav1d_inv_dct32_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct8_1d_c, 1, a5);
}

uint64_t inv_txfm_add_identity_identity_32x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 32, 8, 2, (uint64_t)dav1d_inv_identity32_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity8_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_dct_32x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 32, 16, 1, (uint64_t)dav1d_inv_dct32_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct16_1d_c, 1, a5);
}

uint64_t inv_txfm_add_identity_identity_32x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 32, 16, 1, (uint64_t)dav1d_inv_identity32_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity16_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_dct_32x32_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 32, 32, 2, (uint64_t)dav1d_inv_dct32_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct32_1d_c, 1, a5);
}

uint64_t inv_txfm_add_identity_identity_32x32_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 32, 32, 2, (uint64_t)dav1d_inv_identity32_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_identity32_1d_c, 0, a5);
}

uint64_t inv_txfm_add_dct_dct_32x64_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 32, 64, 1, (uint64_t)dav1d_inv_dct32_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct64_1d_c, 1, a5);
}

uint64_t inv_txfm_add_dct_dct_64x16_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c_5(a1, a2, a3, a4, 64, 16, 2, 1, a5);
}

uint64_t inv_txfm_add_dct_dct_64x32_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 64, 32, 1, (uint64_t)dav1d_inv_dct64_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct32_1d_c, 1, a5);
}

uint64_t inv_txfm_add_dct_dct_64x64_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, signed int a5)
{
  return inv_txfm_add_c(a1, a2, a3, a4, 64, 64, 2, (uint64_t)dav1d_inv_dct64_1d_c, (void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))dav1d_inv_dct64_1d_c, 1, a5);
}

uint64_t inv_txfm_add_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(_DWORD *, uint64_t, _QWORD, uint64_t), int a10, signed int a11)
{
  uint64_t result;
  uint64_t v12;
  int *v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  void (*v18)(_DWORD *, uint64_t, _QWORD, _QWORD);
  int *v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint32x4_t v27;
  int32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t *v31;
  uint16x8_t v32;
  uint16x8_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int v38;
  __int16 v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int32x2_t v54;
  _DWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int32x4_t *v71;
  int32x4_t v72;
  uint64_t v73;
  int32x4_t v74;
  int32x4_t v75;
  uint64_t v76;
  int *v77;
  int v78;
  int v79;
  int v80;
  _DWORD *v81;
  uint64_t v82;
  int v83;
  int32x4_t v84;
  int32x4_t *v85;
  int32x4_t v86;
  uint64_t i;
  int32x4_t *v88;
  uint64_t v89;
  int32x4_t *v90;
  int8x16_t *v91;
  uint16x8_t v92;
  uint16x8_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int v102;
  int v103;
  __int16 v104;
  __int16 v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  _BOOL4 v116;
  _BOOL4 v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  void (*v121)(_DWORD *, uint64_t, _QWORD, _QWORD);
  _DWORD v122[4];
  _QWORD v123[2048];

  result = MEMORY[0x1E0C80A78](a1, a2);
  v121 = v18;
  v19 = v13;
  v20 = result;
  v123[2046] = *MEMORY[0x1E0C80C00];
  v21 = v16 == 2 * v15 || v15 == 2 * v16;
  v22 = v21;
  if (v14 < a10)
  {
    v23 = 0;
    v24 = *v13;
    *v13 = 0;
    v21 = v22 == 0;
    v25 = (181 * v24 + 128) >> 8;
    if (v21)
      v25 = v24;
    v26 = (181 * ((int)(((1 << v17) >> 1) + ((181 * v25 + 128) >> 8)) >> v17) + 2176) >> 12;
    v27 = (uint32x4_t)vdupq_n_s32(v26);
    v28 = vdupq_n_s32(a11);
    while (v15 >= 0x10)
    {
      v30 = 0;
      do
      {
        v31 = (int8x16_t *)(v20 + v30);
        v32 = *(uint16x8_t *)(v20 + v30);
        v33 = *(uint16x8_t *)(v20 + v30 + 16);
        v34 = (int32x4_t)vaddw_u16(v27, *(uint16x4_t *)v32.i8);
        v35 = (int32x4_t)vaddw_high_u16(v27, v32);
        v36 = (int32x4_t)vaddw_u16(v27, *(uint16x4_t *)v33.i8);
        v37 = (int32x4_t)vaddw_high_u16(v27, v33);
        *v31 = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v34, v28), (int16x8_t)vminq_s32(v35, v28)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v34), (int16x8_t)vcltzq_s32(v35)));
        v31[1] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v36, v28), (int16x8_t)vminq_s32(v37, v28)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v36), (int16x8_t)vcltzq_s32(v37)));
        v30 += 32;
      }
      while (((2 * v15) & 0x1FFFFFFE0) != v30);
      v29 = v15 & 0xFFFFFFF0;
      if (v29 != v15)
        goto LABEL_18;
LABEL_12:
      ++v23;
      v20 += v12 & 0xFFFFFFFFFFFFFFFELL;
      if (v23 == v16)
        return result;
    }
    v29 = 0;
    do
    {
LABEL_18:
      v38 = v26 + *(unsigned __int16 *)(v20 + 2 * v29);
      if (v38 >= a11)
        v39 = a11;
      else
        v39 = v26 + *(_WORD *)(v20 + 2 * v29);
      if (v38 >= 0)
        v40 = v39;
      else
        v40 = 0;
      *(_WORD *)(v20 + 2 * v29++) = v40;
    }
    while (v15 != v29);
    goto LABEL_12;
  }
  if (v16 >= 32)
    v41 = 32;
  else
    v41 = v16;
  if ((int)v15 >= 32)
    v42 = 32;
  else
    v42 = v15;
  v107 = 32 * ~a11;
  v119 = ~(~a11 << 7);
  v120 = ~a11 << 7;
  v109 = v12;
  v110 = v15;
  v43 = v15;
  v44 = (unint64_t)(v42 - 1) >> 32 != 0;
  if ((int)v41 >= 0)
    v45 = v41;
  else
    v45 = -(int)v41;
  if (!(_DWORD)v41)
    v44 = 0;
  v118 = (v42 - 1) * v45;
  v116 = (((v42 - 1) * (unint64_t)v45) & 0xFFFFFFFF00000000) != 0;
  v117 = v44;
  v115 = ~(_DWORD)v41 >> 31;
  v112 = v42 & 0xFFFFFFFE;
  v111 = v16;
  v108 = v17;
  v106 = (1 << v17) >> 1;
  v46 = 0;
  if ((v22 & 1) != 0)
  {
    v47 = 2 * v41;
    v113 = 4 * v15;
    v48 = v122;
    while (1)
    {
      if (v42 < 2)
        goto LABEL_44;
      v49 = v116;
      if (v118 > (v46 ^ v115))
        v49 = 1;
      if (((v49 | v117) & 1) != 0)
      {
LABEL_44:
        v50 = 0;
      }
      else
      {
        v52 = 0;
        v53 = v46;
        do
        {
          v54.i32[0] = v19[v53];
          v54.i32[1] = v19[(v41 + v53)];
          *(int32x2_t *)&v48[v52 / 4] = vshr_n_s32(vmla_s32((int32x2_t)0x8000000080, v54, (int32x2_t)0xB5000000B5), 8uLL);
          v53 += v47;
          v52 += 8;
        }
        while (((4 * v42) & 0x3FFFFFFF8) != v52);
        v50 = v42 & 0xFFFFFFFE;
        if (v112 == v42)
          goto LABEL_39;
      }
      v51 = v46 + v41 * (unint64_t)v50;
      do
      {
        v48[v50++] = (181 * v19[v51] + 128) >> 8;
        v51 += v41;
      }
      while (v42 != v50);
LABEL_39:
      v121(v48, 1, v120, v119);
      ++v46;
      v47 = 2 * v41;
      v48 = (_DWORD *)((char *)v48 + v113);
      if (v46 == v41)
        goto LABEL_66;
    }
  }
  v114 = 4 * v15;
  v55 = v122;
  do
  {
    if (v42 < 2)
      goto LABEL_58;
    v56 = v116;
    if (v118 > (v46 ^ v115))
      v56 = 1;
    if (((v56 | v117) & 1) != 0)
    {
LABEL_58:
      v57 = 0;
LABEL_59:
      v58 = v46 + v41 * (unint64_t)v57;
      do
      {
        v55[v57++] = v19[v58];
        v58 += v41;
      }
      while (v42 != v57);
      goto LABEL_53;
    }
    v59 = 0;
    v60 = v46;
    do
    {
      v61 = v19[(v41 + v60)];
      v62 = &v55[v59 / 4];
      *v62 = v19[v60];
      v62[1] = v61;
      v60 += 2 * v41;
      v59 += 8;
    }
    while (((4 * v42) & 0x3FFFFFFF8) != v59);
    v57 = v42 & 0xFFFFFFFE;
    if (v112 != v42)
      goto LABEL_59;
LABEL_53:
    v121(v55, 1, v120, v119);
    ++v46;
    v55 = (_DWORD *)((char *)v55 + v114);
  }
  while (v46 != v41);
LABEL_66:
  v63 = ~v107;
  bzero(v19, (4 * v42 * v41));
  v64 = v41 * v110;
  if (v64 >= 8)
  {
    v65 = v64 & 0xFFFFFFF8;
    v67 = v106;
    v68 = vdupq_n_s32(v106);
    v66 = v108;
    v69 = (int8x16_t)vdupq_n_s32(v107);
    v70 = vdupq_n_s32(v63);
    v71 = (int32x4_t *)v123;
    v72 = vnegq_s32(vdupq_n_s32(v108));
    v73 = v65;
    do
    {
      v74 = vshlq_s32(vaddq_s32(v71[-1], v68), v72);
      v75 = vshlq_s32(vaddq_s32(*v71, v68), v72);
      v71[-1] = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v69, v74), v69, (int8x16_t)vminq_s32(v74, v70));
      *(int8x16_t *)v71 = vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v69, v75), v69, (int8x16_t)vminq_s32(v75, v70));
      v71 += 2;
      v73 -= 8;
    }
    while (v73);
    if (v65 != v64)
      goto LABEL_71;
  }
  else
  {
    v65 = 0;
    v66 = v108;
    v67 = v106;
LABEL_71:
    v76 = v64 - v65;
    v77 = &v122[v65];
    do
    {
      v78 = (int)(*v77 + v67) >> v66;
      if (v78 >= (int)v63)
        v79 = ~v107;
      else
        v79 = (int)(*v77 + v67) >> v66;
      if (v78 >= (int)v107)
        v80 = v79;
      else
        v80 = 32 * ~a11;
      *v77++ = v80;
      --v76;
    }
    while (v76);
  }
  v81 = v122;
  v82 = v43;
  do
  {
    a9(v81++, v43, v107, v63);
    --v82;
  }
  while (v82);
  v83 = 0;
  v84 = vdupq_n_s32(a11);
  v85 = (int32x4_t *)v122;
  v86.i64[0] = 0x800000008;
  v86.i64[1] = 0x800000008;
  result = v111;
  while (2)
  {
    if (v110 < 0x10)
    {
      i = 0;
      v88 = v85;
      goto LABEL_88;
    }
    v89 = 0;
    v88 = (int32x4_t *)((char *)v85 + 4 * (v43 & 0xFFFFFFF0));
    v90 = v85 + 2;
    do
    {
      v91 = (int8x16_t *)(v20 + v89);
      v92 = *(uint16x8_t *)(v20 + v89);
      v93 = *(uint16x8_t *)(v20 + v89 + 16);
      v95 = v90[-2];
      v94 = v90[-1];
      v97 = *v90;
      v96 = v90[1];
      v90 += 4;
      v98 = vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v92.i8), vaddq_s32(v95, v86), 4uLL);
      v99 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(v94, v86), 4uLL), v92);
      v100 = vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v93.i8), vaddq_s32(v97, v86), 4uLL);
      v101 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(v96, v86), 4uLL), v93);
      *v91 = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v98, v84), (int16x8_t)vminq_s32(v99, v84)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v98), (int16x8_t)vcltzq_s32(v99)));
      v91[1] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v100, v84), (int16x8_t)vminq_s32(v101, v84)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v100), (int16x8_t)vcltzq_s32(v101)));
      v89 += 32;
    }
    while (((2 * v43) & 0x1FFFFFFE0) != v89);
    for (i = v43 & 0xFFFFFFF0; v43 != i; ++i)
    {
LABEL_88:
      v102 = v88->i32[0];
      v88 = (int32x4_t *)((char *)v88 + 4);
      v103 = *(unsigned __int16 *)(v20 + 2 * i) + ((v102 + 8) >> 4);
      if (v103 >= a11)
        v104 = a11;
      else
        v104 = v103;
      if (v103 >= 0)
        v105 = v104;
      else
        v105 = 0;
      *(_WORD *)(v20 + 2 * i) = v105;
    }
    ++v83;
    v20 += v109 & 0xFFFFFFFFFFFFFFFELL;
    v85 = v88;
    if (v83 != v111)
      continue;
    return result;
  }
}

uint64_t inv_txfm_add_c_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  uint64_t result;
  uint64_t v10;
  int *v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  int *v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint32x4_t v25;
  int32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x16_t *v29;
  uint16x8_t v30;
  uint16x8_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int v36;
  __int16 v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int32x2_t v52;
  uint64_t v53;
  _DWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  _DWORD *v61;
  signed int v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  int32x4_t v67;
  int8x16_t v68;
  int32x4_t v69;
  int32x4_t *v70;
  int32x4_t v71;
  uint64_t v72;
  int32x4_t v73;
  int32x4_t v74;
  uint64_t v75;
  int *v76;
  int v77;
  int v78;
  int v79;
  _DWORD *v80;
  uint64_t v81;
  int v82;
  int32x4_t v83;
  int32x4_t *v84;
  int32x4_t v85;
  uint64_t i;
  int32x4_t *v87;
  uint64_t v88;
  int32x4_t *v89;
  int8x16_t *v90;
  uint16x8_t v91;
  uint16x8_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int v101;
  int v102;
  __int16 v103;
  __int16 v104;
  unsigned int v105;
  signed int v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  _BOOL4 v115;
  _BOOL4 v116;
  unsigned int v117;
  _DWORD v118[4];
  _QWORD v119[2048];

  result = MEMORY[0x1E0C80A78](a1, a2);
  v17 = v11;
  v18 = result;
  v119[2046] = *MEMORY[0x1E0C80C00];
  v19 = v14 == 2 * v13 || v13 == 2 * v14;
  v20 = v19;
  if (v12 < v16)
  {
    v21 = 0;
    v22 = *v11;
    *v11 = 0;
    v19 = v20 == 0;
    v23 = (181 * v22 + 128) >> 8;
    if (v19)
      v23 = v22;
    v24 = (181 * ((int)(((1 << v15) >> 1) + ((181 * v23 + 128) >> 8)) >> v15) + 2176) >> 12;
    v25 = (uint32x4_t)vdupq_n_s32(v24);
    v26 = vdupq_n_s32(a9);
    while (v13 >= 0x10)
    {
      v28 = 0;
      do
      {
        v29 = (int8x16_t *)(v18 + v28);
        v30 = *(uint16x8_t *)(v18 + v28);
        v31 = *(uint16x8_t *)(v18 + v28 + 16);
        v32 = (int32x4_t)vaddw_u16(v25, *(uint16x4_t *)v30.i8);
        v33 = (int32x4_t)vaddw_high_u16(v25, v30);
        v34 = (int32x4_t)vaddw_u16(v25, *(uint16x4_t *)v31.i8);
        v35 = (int32x4_t)vaddw_high_u16(v25, v31);
        *v29 = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v32, v26), (int16x8_t)vminq_s32(v33, v26)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v32), (int16x8_t)vcltzq_s32(v33)));
        v29[1] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v34, v26), (int16x8_t)vminq_s32(v35, v26)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v34), (int16x8_t)vcltzq_s32(v35)));
        v28 += 32;
      }
      while (((2 * v13) & 0x1FFFFFFE0) != v28);
      v27 = v13 & 0xFFFFFFF0;
      if (v27 != v13)
        goto LABEL_18;
LABEL_12:
      ++v21;
      v18 += v10 & 0xFFFFFFFFFFFFFFFELL;
      if (v21 == v14)
        return result;
    }
    v27 = 0;
    do
    {
LABEL_18:
      v36 = v24 + *(unsigned __int16 *)(v18 + 2 * v27);
      if (v36 >= a9)
        v37 = a9;
      else
        v37 = v24 + *(_WORD *)(v18 + 2 * v27);
      if (v36 >= 0)
        v38 = v37;
      else
        v38 = 0;
      *(_WORD *)(v18 + 2 * v27++) = v38;
    }
    while (v13 != v27);
    goto LABEL_12;
  }
  if (v14 >= 32)
    v39 = 32;
  else
    v39 = v14;
  if ((int)v13 >= 32)
    v40 = 32;
  else
    v40 = v13;
  v106 = 32 * ~a9;
  v108 = v10;
  v109 = v13;
  v41 = v13;
  v42 = (unint64_t)(v40 - 1) >> 32 != 0;
  if ((int)v39 >= 0)
    v43 = v39;
  else
    v43 = -(int)v39;
  if (!(_DWORD)v39)
    v42 = 0;
  v117 = (v40 - 1) * v43;
  v115 = (((v40 - 1) * (unint64_t)v43) & 0xFFFFFFFF00000000) != 0;
  v116 = v42;
  v114 = ~(_DWORD)v39 >> 31;
  v111 = v40 & 0xFFFFFFFE;
  v110 = v14;
  v107 = v15;
  v105 = (1 << v15) >> 1;
  if ((v20 & 1) != 0)
  {
    v44 = 0;
    v45 = 2 * v39;
    v112 = 4 * v13;
    v46 = v118;
    while (1)
    {
      if (v40 < 2)
        goto LABEL_44;
      v47 = v115;
      if (v117 > (v44 ^ v114))
        v47 = 1;
      if (((v47 | v116) & 1) != 0)
      {
LABEL_44:
        v48 = 0;
      }
      else
      {
        v50 = 0;
        v51 = v44;
        do
        {
          v52.i32[0] = v17[v51];
          v52.i32[1] = v17[(v39 + v51)];
          *(int32x2_t *)&v46[v50 / 4] = vshr_n_s32(vmla_s32((int32x2_t)0x8000000080, v52, (int32x2_t)0xB5000000B5), 8uLL);
          v51 += v45;
          v50 += 8;
        }
        while (((4 * v40) & 0x3FFFFFFF8) != v50);
        v48 = v40 & 0xFFFFFFFE;
        if (v111 == v40)
          goto LABEL_39;
      }
      v49 = v44 + v39 * (unint64_t)v48;
      do
      {
        v46[v48++] = (181 * v17[v49] + 128) >> 8;
        v49 += v39;
      }
      while (v40 != v48);
LABEL_39:
      dav1d_inv_identity4_1d_c(v46, 1);
      ++v44;
      v45 = 2 * v39;
      v46 = (_DWORD *)((char *)v46 + v112);
      if (v44 == v39)
        goto LABEL_66;
    }
  }
  v53 = 0;
  v113 = 4 * v13;
  v54 = v118;
  do
  {
    if (v40 < 2)
      goto LABEL_58;
    v55 = v115;
    if (v117 > (v53 ^ v114))
      v55 = 1;
    if (((v55 | v116) & 1) != 0)
    {
LABEL_58:
      v56 = 0;
LABEL_59:
      v57 = v53 + v39 * (unint64_t)v56;
      do
      {
        v54[v56++] = v17[v57];
        v57 += v39;
      }
      while (v40 != v56);
      goto LABEL_53;
    }
    v58 = 0;
    v59 = v53;
    do
    {
      v60 = v17[(v39 + v59)];
      v61 = &v54[v58 / 4];
      *v61 = v17[v59];
      v61[1] = v60;
      v59 += 2 * v39;
      v58 += 8;
    }
    while (((4 * v40) & 0x3FFFFFFF8) != v58);
    v56 = v40 & 0xFFFFFFFE;
    if (v111 != v40)
      goto LABEL_59;
LABEL_53:
    dav1d_inv_identity4_1d_c(v54, 1);
    ++v53;
    v54 = (_DWORD *)((char *)v54 + v113);
  }
  while (v53 != v39);
LABEL_66:
  v62 = ~v106;
  bzero(v17, (4 * v40 * v39));
  v63 = v39 * v109;
  if (v63 >= 8)
  {
    v64 = v63 & 0xFFFFFFF8;
    v66 = v105;
    v67 = vdupq_n_s32(v105);
    v65 = v107;
    v68 = (int8x16_t)vdupq_n_s32(v106);
    v69 = vdupq_n_s32(v62);
    v70 = (int32x4_t *)v119;
    v71 = vnegq_s32(vdupq_n_s32(v107));
    v72 = v64;
    do
    {
      v73 = vshlq_s32(vaddq_s32(v70[-1], v67), v71);
      v74 = vshlq_s32(vaddq_s32(*v70, v67), v71);
      v70[-1] = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v68, v73), v68, (int8x16_t)vminq_s32(v73, v69));
      *(int8x16_t *)v70 = vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v68, v74), v68, (int8x16_t)vminq_s32(v74, v69));
      v70 += 2;
      v72 -= 8;
    }
    while (v72);
    if (v64 != v63)
      goto LABEL_71;
  }
  else
  {
    v64 = 0;
    v65 = v107;
    v66 = v105;
LABEL_71:
    v75 = v63 - v64;
    v76 = &v118[v64];
    do
    {
      v77 = (int)(*v76 + v66) >> v65;
      if (v77 >= v62)
        v78 = ~v106;
      else
        v78 = (int)(*v76 + v66) >> v65;
      if (v77 >= v106)
        v79 = v78;
      else
        v79 = 32 * ~a9;
      *v76++ = v79;
      --v75;
    }
    while (v75);
  }
  v80 = v118;
  v81 = v41;
  do
  {
    dav1d_inv_identity4_1d_c(v80++, v41);
    --v81;
  }
  while (v81);
  v82 = 0;
  v83 = vdupq_n_s32(a9);
  v84 = (int32x4_t *)v118;
  v85.i64[0] = 0x800000008;
  v85.i64[1] = 0x800000008;
  result = v110;
  while (2)
  {
    if (v109 < 0x10)
    {
      i = 0;
      v87 = v84;
      goto LABEL_88;
    }
    v88 = 0;
    v87 = (int32x4_t *)((char *)v84 + 4 * (v41 & 0xFFFFFFF0));
    v89 = v84 + 2;
    do
    {
      v90 = (int8x16_t *)(v18 + v88);
      v91 = *(uint16x8_t *)(v18 + v88);
      v92 = *(uint16x8_t *)(v18 + v88 + 16);
      v94 = v89[-2];
      v93 = v89[-1];
      v96 = *v89;
      v95 = v89[1];
      v89 += 4;
      v97 = vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v91.i8), vaddq_s32(v94, v85), 4uLL);
      v98 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(v93, v85), 4uLL), v91);
      v99 = vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v92.i8), vaddq_s32(v96, v85), 4uLL);
      v100 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(v95, v85), 4uLL), v92);
      *v90 = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v97, v83), (int16x8_t)vminq_s32(v98, v83)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v97), (int16x8_t)vcltzq_s32(v98)));
      v90[1] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v99, v83), (int16x8_t)vminq_s32(v100, v83)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v99), (int16x8_t)vcltzq_s32(v100)));
      v88 += 32;
    }
    while (((2 * v41) & 0x1FFFFFFE0) != v88);
    for (i = v41 & 0xFFFFFFF0; v41 != i; ++i)
    {
LABEL_88:
      v101 = v87->i32[0];
      v87 = (int32x4_t *)((char *)v87 + 4);
      v102 = *(unsigned __int16 *)(v18 + 2 * i) + ((v101 + 8) >> 4);
      if (v102 >= a9)
        v103 = a9;
      else
        v103 = v102;
      if (v102 >= 0)
        v104 = v103;
      else
        v104 = 0;
      *(_WORD *)(v18 + 2 * i) = v104;
    }
    ++v82;
    v18 += v108 & 0xFFFFFFFFFFFFFFFELL;
    v84 = v87;
    if (v82 != v110)
      continue;
    return result;
  }
}

uint64_t inv_txfm_add_c_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  uint64_t result;
  uint64_t v10;
  int *v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  int *v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint32x4_t v25;
  int32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x16_t *v29;
  uint16x8_t v30;
  uint16x8_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int v36;
  __int16 v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int32x2_t v52;
  uint64_t v53;
  int *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  int32x4_t v67;
  int8x16_t v68;
  int32x4_t v69;
  int32x4_t *v70;
  int32x4_t v71;
  uint64_t v72;
  int32x4_t v73;
  int32x4_t v74;
  uint64_t v75;
  int *v76;
  int v77;
  int v78;
  int v79;
  int *v80;
  uint64_t v81;
  int v82;
  int32x4_t v83;
  int32x4_t *v84;
  int32x4_t v85;
  uint64_t i;
  int32x4_t *v87;
  uint64_t v88;
  int32x4_t *v89;
  int8x16_t *v90;
  uint16x8_t v91;
  uint16x8_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int v101;
  int v102;
  __int16 v103;
  __int16 v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  _BOOL4 v115;
  _BOOL4 v116;
  unsigned int v117;
  int v118;
  int v119;
  _DWORD v120[4];
  _QWORD v121[2048];

  result = MEMORY[0x1E0C80A78](a1, a2);
  v17 = v11;
  v18 = result;
  v121[2046] = *MEMORY[0x1E0C80C00];
  v19 = v14 == 2 * v13 || v13 == 2 * v14;
  v20 = v19;
  if (v12 < v16)
  {
    v21 = 0;
    v22 = *v11;
    *v11 = 0;
    v19 = v20 == 0;
    v23 = (181 * v22 + 128) >> 8;
    if (v19)
      v23 = v22;
    v24 = (181 * ((int)(((1 << v15) >> 1) + ((181 * v23 + 128) >> 8)) >> v15) + 2176) >> 12;
    v25 = (uint32x4_t)vdupq_n_s32(v24);
    v26 = vdupq_n_s32(a9);
    while (v13 >= 0x10)
    {
      v28 = 0;
      do
      {
        v29 = (int8x16_t *)(v18 + v28);
        v30 = *(uint16x8_t *)(v18 + v28);
        v31 = *(uint16x8_t *)(v18 + v28 + 16);
        v32 = (int32x4_t)vaddw_u16(v25, *(uint16x4_t *)v30.i8);
        v33 = (int32x4_t)vaddw_high_u16(v25, v30);
        v34 = (int32x4_t)vaddw_u16(v25, *(uint16x4_t *)v31.i8);
        v35 = (int32x4_t)vaddw_high_u16(v25, v31);
        *v29 = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v32, v26), (int16x8_t)vminq_s32(v33, v26)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v32), (int16x8_t)vcltzq_s32(v33)));
        v29[1] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v34, v26), (int16x8_t)vminq_s32(v35, v26)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v34), (int16x8_t)vcltzq_s32(v35)));
        v28 += 32;
      }
      while (((2 * v13) & 0x1FFFFFFE0) != v28);
      v27 = v13 & 0xFFFFFFF0;
      if (v27 != v13)
        goto LABEL_18;
LABEL_12:
      ++v21;
      v18 += v10 & 0xFFFFFFFFFFFFFFFELL;
      if (v21 == v14)
        return result;
    }
    v27 = 0;
    do
    {
LABEL_18:
      v36 = v24 + *(unsigned __int16 *)(v18 + 2 * v27);
      if (v36 >= a9)
        v37 = a9;
      else
        v37 = v24 + *(_WORD *)(v18 + 2 * v27);
      if (v36 >= 0)
        v38 = v37;
      else
        v38 = 0;
      *(_WORD *)(v18 + 2 * v27++) = v38;
    }
    while (v13 != v27);
    goto LABEL_12;
  }
  if (v14 >= 32)
    v39 = 32;
  else
    v39 = v14;
  if ((int)v13 >= 32)
    v40 = 32;
  else
    v40 = v13;
  v106 = 32 * ~a9;
  v118 = ~(~a9 << 7);
  v119 = ~a9 << 7;
  v108 = v10;
  v109 = v13;
  v41 = v13;
  v42 = (unint64_t)(v40 - 1) >> 32 != 0;
  if ((int)v39 >= 0)
    v43 = v39;
  else
    v43 = -(int)v39;
  if (!(_DWORD)v39)
    v42 = 0;
  v117 = (v40 - 1) * v43;
  v115 = (((v40 - 1) * (unint64_t)v43) & 0xFFFFFFFF00000000) != 0;
  v116 = v42;
  v114 = ~(_DWORD)v39 >> 31;
  v111 = v40 & 0xFFFFFFFE;
  v110 = v14;
  v107 = v15;
  v105 = (1 << v15) >> 1;
  if ((v20 & 1) != 0)
  {
    v44 = 0;
    v45 = 2 * v39;
    v112 = 4 * v13;
    v46 = v120;
    while (1)
    {
      if (v40 < 2)
        goto LABEL_44;
      v47 = v115;
      if (v117 > (v44 ^ v114))
        v47 = 1;
      if (((v47 | v116) & 1) != 0)
      {
LABEL_44:
        v48 = 0;
      }
      else
      {
        v50 = 0;
        v51 = v44;
        do
        {
          v52.i32[0] = v17[v51];
          v52.i32[1] = v17[(v39 + v51)];
          *(int32x2_t *)&v46[v50 / 4] = vshr_n_s32(vmla_s32((int32x2_t)0x8000000080, v52, (int32x2_t)0xB5000000B5), 8uLL);
          v51 += v45;
          v50 += 8;
        }
        while (((4 * v40) & 0x3FFFFFFF8) != v50);
        v48 = v40 & 0xFFFFFFFE;
        if (v111 == v40)
          goto LABEL_39;
      }
      v49 = v44 + v39 * (unint64_t)v48;
      do
      {
        v46[v48++] = (181 * v17[v49] + 128) >> 8;
        v49 += v39;
      }
      while (v40 != v48);
LABEL_39:
      dav1d_inv_dct4_1d_c(v46, 1, v119, v118);
      ++v44;
      v45 = 2 * v39;
      v46 = (int *)((char *)v46 + v112);
      if (v44 == v39)
        goto LABEL_66;
    }
  }
  v53 = 0;
  v113 = 4 * v13;
  v54 = v120;
  do
  {
    if (v40 < 2)
      goto LABEL_58;
    v55 = v115;
    if (v117 > (v53 ^ v114))
      v55 = 1;
    if (((v55 | v116) & 1) != 0)
    {
LABEL_58:
      v56 = 0;
LABEL_59:
      v57 = v53 + v39 * (unint64_t)v56;
      do
      {
        v54[v56++] = v17[v57];
        v57 += v39;
      }
      while (v40 != v56);
      goto LABEL_53;
    }
    v58 = 0;
    v59 = v53;
    do
    {
      v60 = v17[(v39 + v59)];
      v61 = &v54[v58 / 4];
      *v61 = v17[v59];
      v61[1] = v60;
      v59 += 2 * v39;
      v58 += 8;
    }
    while (((4 * v40) & 0x3FFFFFFF8) != v58);
    v56 = v40 & 0xFFFFFFFE;
    if (v111 != v40)
      goto LABEL_59;
LABEL_53:
    dav1d_inv_dct4_1d_c(v54, 1, v119, v118);
    ++v53;
    v54 = (int *)((char *)v54 + v113);
  }
  while (v53 != v39);
LABEL_66:
  v62 = ~v106;
  bzero(v17, (4 * v40 * v39));
  v63 = v39 * v109;
  if (v63 >= 8)
  {
    v64 = v63 & 0xFFFFFFF8;
    v66 = v105;
    v67 = vdupq_n_s32(v105);
    v65 = v107;
    v68 = (int8x16_t)vdupq_n_s32(v106);
    v69 = vdupq_n_s32(v62);
    v70 = (int32x4_t *)v121;
    v71 = vnegq_s32(vdupq_n_s32(v107));
    v72 = v64;
    do
    {
      v73 = vshlq_s32(vaddq_s32(v70[-1], v67), v71);
      v74 = vshlq_s32(vaddq_s32(*v70, v67), v71);
      v70[-1] = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v68, v73), v68, (int8x16_t)vminq_s32(v73, v69));
      *(int8x16_t *)v70 = vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v68, v74), v68, (int8x16_t)vminq_s32(v74, v69));
      v70 += 2;
      v72 -= 8;
    }
    while (v72);
    if (v64 != v63)
      goto LABEL_71;
  }
  else
  {
    v64 = 0;
    v65 = v107;
    v66 = v105;
LABEL_71:
    v75 = v63 - v64;
    v76 = &v120[v64];
    do
    {
      v77 = (int)(*v76 + v66) >> v65;
      if (v77 >= v62)
        v78 = ~v106;
      else
        v78 = (int)(*v76 + v66) >> v65;
      if (v77 >= v106)
        v79 = v78;
      else
        v79 = 32 * ~a9;
      *v76++ = v79;
      --v75;
    }
    while (v75);
  }
  v80 = v120;
  v81 = v41;
  do
  {
    dav1d_inv_dct4_1d_c(v80++, v41, v106, v62);
    --v81;
  }
  while (v81);
  v82 = 0;
  v83 = vdupq_n_s32(a9);
  v84 = (int32x4_t *)v120;
  v85.i64[0] = 0x800000008;
  v85.i64[1] = 0x800000008;
  result = v110;
  while (2)
  {
    if (v109 < 0x10)
    {
      i = 0;
      v87 = v84;
      goto LABEL_88;
    }
    v88 = 0;
    v87 = (int32x4_t *)((char *)v84 + 4 * (v41 & 0xFFFFFFF0));
    v89 = v84 + 2;
    do
    {
      v90 = (int8x16_t *)(v18 + v88);
      v91 = *(uint16x8_t *)(v18 + v88);
      v92 = *(uint16x8_t *)(v18 + v88 + 16);
      v94 = v89[-2];
      v93 = v89[-1];
      v96 = *v89;
      v95 = v89[1];
      v89 += 4;
      v97 = vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v91.i8), vaddq_s32(v94, v85), 4uLL);
      v98 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(v93, v85), 4uLL), v91);
      v99 = vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v92.i8), vaddq_s32(v96, v85), 4uLL);
      v100 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(v95, v85), 4uLL), v92);
      *v90 = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v97, v83), (int16x8_t)vminq_s32(v98, v83)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v97), (int16x8_t)vcltzq_s32(v98)));
      v90[1] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v99, v83), (int16x8_t)vminq_s32(v100, v83)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v99), (int16x8_t)vcltzq_s32(v100)));
      v88 += 32;
    }
    while (((2 * v41) & 0x1FFFFFFE0) != v88);
    for (i = v41 & 0xFFFFFFF0; v41 != i; ++i)
    {
LABEL_88:
      v101 = v87->i32[0];
      v87 = (int32x4_t *)((char *)v87 + 4);
      v102 = *(unsigned __int16 *)(v18 + 2 * i) + ((v101 + 8) >> 4);
      if (v102 >= a9)
        v103 = a9;
      else
        v103 = v102;
      if (v102 >= 0)
        v104 = v103;
      else
        v104 = 0;
      *(_WORD *)(v18 + 2 * i) = v104;
    }
    ++v82;
    v18 += v108 & 0xFFFFFFFFFFFFFFFELL;
    v84 = v87;
    if (v82 != v110)
      continue;
    return result;
  }
}

uint64_t inv_txfm_add_c_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  uint64_t result;
  uint64_t v10;
  int *v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  int *v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint32x4_t v25;
  int32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x16_t *v29;
  uint16x8_t v30;
  uint16x8_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int v36;
  __int16 v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int32x2_t v52;
  uint64_t v53;
  int *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  int32x4_t v67;
  int8x16_t v68;
  int32x4_t v69;
  int32x4_t *v70;
  int32x4_t v71;
  uint64_t v72;
  int32x4_t v73;
  int32x4_t v74;
  uint64_t v75;
  int *v76;
  int v77;
  int v78;
  int v79;
  int *v80;
  uint64_t v81;
  int v82;
  int32x4_t v83;
  int32x4_t *v84;
  int32x4_t v85;
  uint64_t i;
  int32x4_t *v87;
  uint64_t v88;
  int32x4_t *v89;
  int8x16_t *v90;
  uint16x8_t v91;
  uint16x8_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int v101;
  int v102;
  __int16 v103;
  __int16 v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  _BOOL4 v115;
  _BOOL4 v116;
  unsigned int v117;
  int v118;
  int v119;
  _DWORD v120[4];
  _QWORD v121[2048];

  result = MEMORY[0x1E0C80A78](a1, a2);
  v17 = v11;
  v18 = result;
  v121[2046] = *MEMORY[0x1E0C80C00];
  v19 = v14 == 2 * v13 || v13 == 2 * v14;
  v20 = v19;
  if (v12 < v16)
  {
    v21 = 0;
    v22 = *v11;
    *v11 = 0;
    v19 = v20 == 0;
    v23 = (181 * v22 + 128) >> 8;
    if (v19)
      v23 = v22;
    v24 = (181 * ((int)(((1 << v15) >> 1) + ((181 * v23 + 128) >> 8)) >> v15) + 2176) >> 12;
    v25 = (uint32x4_t)vdupq_n_s32(v24);
    v26 = vdupq_n_s32(a9);
    while (v13 >= 0x10)
    {
      v28 = 0;
      do
      {
        v29 = (int8x16_t *)(v18 + v28);
        v30 = *(uint16x8_t *)(v18 + v28);
        v31 = *(uint16x8_t *)(v18 + v28 + 16);
        v32 = (int32x4_t)vaddw_u16(v25, *(uint16x4_t *)v30.i8);
        v33 = (int32x4_t)vaddw_high_u16(v25, v30);
        v34 = (int32x4_t)vaddw_u16(v25, *(uint16x4_t *)v31.i8);
        v35 = (int32x4_t)vaddw_high_u16(v25, v31);
        *v29 = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v32, v26), (int16x8_t)vminq_s32(v33, v26)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v32), (int16x8_t)vcltzq_s32(v33)));
        v29[1] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v34, v26), (int16x8_t)vminq_s32(v35, v26)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v34), (int16x8_t)vcltzq_s32(v35)));
        v28 += 32;
      }
      while (((2 * v13) & 0x1FFFFFFE0) != v28);
      v27 = v13 & 0xFFFFFFF0;
      if (v27 != v13)
        goto LABEL_18;
LABEL_12:
      ++v21;
      v18 += v10 & 0xFFFFFFFFFFFFFFFELL;
      if (v21 == v14)
        return result;
    }
    v27 = 0;
    do
    {
LABEL_18:
      v36 = v24 + *(unsigned __int16 *)(v18 + 2 * v27);
      if (v36 >= a9)
        v37 = a9;
      else
        v37 = v24 + *(_WORD *)(v18 + 2 * v27);
      if (v36 >= 0)
        v38 = v37;
      else
        v38 = 0;
      *(_WORD *)(v18 + 2 * v27++) = v38;
    }
    while (v13 != v27);
    goto LABEL_12;
  }
  if (v14 >= 32)
    v39 = 32;
  else
    v39 = v14;
  if ((int)v13 >= 32)
    v40 = 32;
  else
    v40 = v13;
  v106 = 32 * ~a9;
  v118 = ~(~a9 << 7);
  v119 = ~a9 << 7;
  v108 = v10;
  v109 = v13;
  v41 = v13;
  v42 = (unint64_t)(v40 - 1) >> 32 != 0;
  if ((int)v39 >= 0)
    v43 = v39;
  else
    v43 = -(int)v39;
  if (!(_DWORD)v39)
    v42 = 0;
  v117 = (v40 - 1) * v43;
  v115 = (((v40 - 1) * (unint64_t)v43) & 0xFFFFFFFF00000000) != 0;
  v116 = v42;
  v114 = ~(_DWORD)v39 >> 31;
  v111 = v40 & 0xFFFFFFFE;
  v110 = v14;
  v107 = v15;
  v105 = (1 << v15) >> 1;
  if ((v20 & 1) != 0)
  {
    v44 = 0;
    v45 = 2 * v39;
    v112 = 4 * v13;
    v46 = v120;
    while (1)
    {
      if (v40 < 2)
        goto LABEL_44;
      v47 = v115;
      if (v117 > (v44 ^ v114))
        v47 = 1;
      if (((v47 | v116) & 1) != 0)
      {
LABEL_44:
        v48 = 0;
      }
      else
      {
        v50 = 0;
        v51 = v44;
        do
        {
          v52.i32[0] = v17[v51];
          v52.i32[1] = v17[(v39 + v51)];
          *(int32x2_t *)&v46[v50 / 4] = vshr_n_s32(vmla_s32((int32x2_t)0x8000000080, v52, (int32x2_t)0xB5000000B5), 8uLL);
          v51 += v45;
          v50 += 8;
        }
        while (((4 * v40) & 0x3FFFFFFF8) != v50);
        v48 = v40 & 0xFFFFFFFE;
        if (v111 == v40)
          goto LABEL_39;
      }
      v49 = v44 + v39 * (unint64_t)v48;
      do
      {
        v46[v48++] = (181 * v17[v49] + 128) >> 8;
        v49 += v39;
      }
      while (v40 != v48);
LABEL_39:
      dav1d_inv_dct64_1d_c(v46, 1, v119, v118);
      ++v44;
      v45 = 2 * v39;
      v46 = (int *)((char *)v46 + v112);
      if (v44 == v39)
        goto LABEL_66;
    }
  }
  v53 = 0;
  v113 = 4 * v13;
  v54 = v120;
  do
  {
    if (v40 < 2)
      goto LABEL_58;
    v55 = v115;
    if (v117 > (v53 ^ v114))
      v55 = 1;
    if (((v55 | v116) & 1) != 0)
    {
LABEL_58:
      v56 = 0;
LABEL_59:
      v57 = v53 + v39 * (unint64_t)v56;
      do
      {
        v54[v56++] = v17[v57];
        v57 += v39;
      }
      while (v40 != v56);
      goto LABEL_53;
    }
    v58 = 0;
    v59 = v53;
    do
    {
      v60 = v17[(v39 + v59)];
      v61 = &v54[v58 / 4];
      *v61 = v17[v59];
      v61[1] = v60;
      v59 += 2 * v39;
      v58 += 8;
    }
    while (((4 * v40) & 0x3FFFFFFF8) != v58);
    v56 = v40 & 0xFFFFFFFE;
    if (v111 != v40)
      goto LABEL_59;
LABEL_53:
    dav1d_inv_dct64_1d_c(v54, 1, v119, v118);
    ++v53;
    v54 = (int *)((char *)v54 + v113);
  }
  while (v53 != v39);
LABEL_66:
  v62 = ~v106;
  bzero(v17, (4 * v40 * v39));
  v63 = v39 * v109;
  if (v63 >= 8)
  {
    v64 = v63 & 0xFFFFFFF8;
    v66 = v105;
    v67 = vdupq_n_s32(v105);
    v65 = v107;
    v68 = (int8x16_t)vdupq_n_s32(v106);
    v69 = vdupq_n_s32(v62);
    v70 = (int32x4_t *)v121;
    v71 = vnegq_s32(vdupq_n_s32(v107));
    v72 = v64;
    do
    {
      v73 = vshlq_s32(vaddq_s32(v70[-1], v67), v71);
      v74 = vshlq_s32(vaddq_s32(*v70, v67), v71);
      v70[-1] = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v68, v73), v68, (int8x16_t)vminq_s32(v73, v69));
      *(int8x16_t *)v70 = vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v68, v74), v68, (int8x16_t)vminq_s32(v74, v69));
      v70 += 2;
      v72 -= 8;
    }
    while (v72);
    if (v64 != v63)
      goto LABEL_71;
  }
  else
  {
    v64 = 0;
    v65 = v107;
    v66 = v105;
LABEL_71:
    v75 = v63 - v64;
    v76 = &v120[v64];
    do
    {
      v77 = (int)(*v76 + v66) >> v65;
      if (v77 >= v62)
        v78 = ~v106;
      else
        v78 = (int)(*v76 + v66) >> v65;
      if (v77 >= v106)
        v79 = v78;
      else
        v79 = 32 * ~a9;
      *v76++ = v79;
      --v75;
    }
    while (v75);
  }
  v80 = v120;
  v81 = v41;
  do
  {
    dav1d_inv_dct16_1d_c(v80++, v41, v106, v62);
    --v81;
  }
  while (v81);
  v82 = 0;
  v83 = vdupq_n_s32(a9);
  v84 = (int32x4_t *)v120;
  v85.i64[0] = 0x800000008;
  v85.i64[1] = 0x800000008;
  result = v110;
  while (2)
  {
    if (v109 < 0x10)
    {
      i = 0;
      v87 = v84;
      goto LABEL_88;
    }
    v88 = 0;
    v87 = (int32x4_t *)((char *)v84 + 4 * (v41 & 0xFFFFFFF0));
    v89 = v84 + 2;
    do
    {
      v90 = (int8x16_t *)(v18 + v88);
      v91 = *(uint16x8_t *)(v18 + v88);
      v92 = *(uint16x8_t *)(v18 + v88 + 16);
      v94 = v89[-2];
      v93 = v89[-1];
      v96 = *v89;
      v95 = v89[1];
      v89 += 4;
      v97 = vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v91.i8), vaddq_s32(v94, v85), 4uLL);
      v98 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(v93, v85), 4uLL), v91);
      v99 = vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v92.i8), vaddq_s32(v96, v85), 4uLL);
      v100 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(v95, v85), 4uLL), v92);
      *v90 = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v97, v83), (int16x8_t)vminq_s32(v98, v83)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v97), (int16x8_t)vcltzq_s32(v98)));
      v90[1] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v99, v83), (int16x8_t)vminq_s32(v100, v83)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v99), (int16x8_t)vcltzq_s32(v100)));
      v88 += 32;
    }
    while (((2 * v41) & 0x1FFFFFFE0) != v88);
    for (i = v41 & 0xFFFFFFF0; v41 != i; ++i)
    {
LABEL_88:
      v101 = v87->i32[0];
      v87 = (int32x4_t *)((char *)v87 + 4);
      v102 = *(unsigned __int16 *)(v18 + 2 * i) + ((v101 + 8) >> 4);
      if (v102 >= a9)
        v103 = a9;
      else
        v103 = v102;
      if (v102 >= 0)
        v104 = v103;
      else
        v104 = 0;
      *(_WORD *)(v18 + 2 * i) = v104;
    }
    ++v82;
    v18 += v108 & 0xFFFFFFFFFFFFFFFELL;
    v84 = v87;
    if (v82 != v110)
      continue;
    return result;
  }
}

_DWORD *dav1d_copy_lpf_16bpc(_DWORD *result, _QWORD *a2, int a3)
{
  _DWORD *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  char v20;
  int v21;
  int v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  char v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  int v37;
  char v38;
  BOOL v39;
  char v40;
  int v41;
  int v42;
  char v43;
  int v44;
  char v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61[2];
  int v62;
  int v63[2];
  int v64;
  int v65[2];
  unsigned int v66;
  int v67[2];
  unsigned int v68;
  uint64_t v69;

  v4 = result;
  v5 = *(_DWORD *)(*((_QWORD *)result + 390) + 24);
  v6 = *((_QWORD *)result + 3);
  v7 = *(_DWORD *)(v6 + 236);
  v8 = *(_DWORD *)(v6 + 240);
  v9 = 8 * (a3 != 0);
  if (v5 <= 1)
    v10 = 0;
  else
    v10 = a3;
  v11 = *((_QWORD *)result + 1);
  v12 = *(_DWORD *)(v11 + 1012);
  v13 = (4 << v12) * v10;
  v14 = *((_QWORD *)result + 637);
  v15 = *((_QWORD *)result + 288);
  v69 = *((_QWORD *)result + 638);
  v16 = result[1298];
  if (*(_DWORD *)(v11 + 1068) | v16 & 1)
  {
    *(_QWORD *)v67 = *((_QWORD *)result + 288);
    v17 = *((_QWORD *)result + 287);
    v18 = result[513];
    v19 = 4 * result[820];
    v20 = v12 + 6;
    v21 = v18 - 1;
    if ((a3 + 1) << (v12 + 6) < v18 - 1)
      v21 = (a3 + 1) << (v12 + 6);
    v22 = (a3 << v20) - v9;
    if ((v16 & 1) != 0 || v7 == v8)
    {
      v23 = (char *)(*((_QWORD *)result + 636) + 2 * (v17 >> 1) * v13);
      v24 = *((_QWORD *)result + 254);
      v25 = *a2 - 2 * (v24 >> 1) * v9;
      v26 = (a3 << v20) - v9;
      v27 = v8;
      v28 = v7;
      *(_QWORD *)v63 = (4 << v12) * v10;
      *(_QWORD *)v65 = v9;
      *(_QWORD *)v61 = *((_QWORD *)result + 637);
      v29 = *(_DWORD *)(*((_QWORD *)result + 390) + 24);
      v30 = result[1298];
      v16 = result[513];
      v31 = 4 * result[820];
      v32 = v21;
      result = backup_lpf(result, v23, v17, v25, v24, 0, v12, v26, v21, v19, v18, 0, 1);
      v21 = v32;
      v19 = v31;
      v18 = v16;
      LOBYTE(v16) = v30;
      v5 = v29;
      v14 = *(_QWORD *)v61;
      v13 = *(_QWORD *)v63;
      v9 = *(_QWORD *)v65;
      v7 = v28;
      v8 = v27;
      v11 = *((_QWORD *)v4 + 1);
    }
    if (v5 >= 2 && v7 != v8)
    {
      v33 = v7;
      v34 = v5;
      result = backup_lpf(v4, (char *)(*((_QWORD *)v4 + 633) + 2 * (*((uint64_t *)v4 + 254) >> 1) * 4 * a3), *((_QWORD *)v4 + 254), *a2 - 2 * (*((uint64_t *)v4 + 254) >> 1) * v9, *((_QWORD *)v4 + 254), 0, *(_DWORD *)(v11 + 1012), v22, v21, v19, v18, 0, 0);
      v5 = v34;
      v7 = v33;
      v11 = *((_QWORD *)v4 + 1);
    }
    v15 = *(_QWORD *)v67;
  }
  v35 = *(_DWORD *)(v11 + 1068);
  if (v35 | v16 & 6 && v4[514])
  {
    v36 = 2 * (v15 >> 1) * v13;
    v37 = v4[580];
    v68 = v37 != 3;
    if (v37 == 3)
      v38 = 2;
    else
      v38 = 1;
    v39 = v37 == 1;
    v40 = v37 == 1;
    v41 = v4[513];
    if (v39)
      ++v41;
    v42 = v41 >> v40;
    v66 = v4[820] << v38;
    if (v39)
      v43 = 5;
    else
      v43 = 6;
    v44 = *(_DWORD *)(v11 + 1012);
    v45 = v44 + v43;
    v46 = (a3 + 1) << v45;
    v60 = v42;
    v47 = v42 - 1;
    if (v46 >= v47)
      v46 = v47;
    v62 = v46;
    v48 = v9 >> v40;
    v64 = (a3 << v45) - v48;
    v49 = *((_QWORD *)v4 + 255);
    v50 = (v49 >> 1) * 4 * a3;
    if (v35 | v16 & 2)
    {
      if ((v16 & 2) != 0 || v7 == v8)
      {
        v51 = (char *)(v14 + v36);
        v52 = v7;
        v53 = v5;
        v54 = v36;
        result = backup_lpf(v4, v51, *((_QWORD *)v4 + 288), a2[1] - 2 * (v49 >> 1) * v48, v49, v40, v44, v64, v46, v66, v60, v68, 1);
        v36 = v54;
        v5 = v53;
        v7 = v52;
        v11 = *((_QWORD *)v4 + 1);
      }
      if (v5 >= 2 && v7 != v8)
      {
        v55 = v7;
        v56 = v5;
        v57 = v36;
        result = backup_lpf(v4, (char *)(*((_QWORD *)v4 + 634) + 2 * v50), *((_QWORD *)v4 + 255), a2[1] - 2 * (*((_QWORD *)v4 + 255) >> 1) * v48, *((_QWORD *)v4 + 255), v40, *(_DWORD *)(v11 + 1012), v64, v62, v66, v60, v68, 0);
        v36 = v57;
        v5 = v56;
        v7 = v55;
        v11 = *((_QWORD *)v4 + 1);
      }
    }
    if (*(_DWORD *)(v11 + 1068) | v16 & 4)
    {
      if ((v16 & 4) != 0 || v7 == v8)
      {
        v58 = v7;
        v59 = v5;
        result = backup_lpf(v4, (char *)(v69 + v36), *((_QWORD *)v4 + 288), a2[2] - 2 * (*((_QWORD *)v4 + 255) >> 1) * v48, *((_QWORD *)v4 + 255), v40, *(_DWORD *)(v11 + 1012), v64, v62, v66, v60, v68, 1);
        v5 = v59;
        v7 = v58;
      }
      if (v5 >= 2 && v7 != v8)
        return backup_lpf(v4, (char *)(*((_QWORD *)v4 + 635) + 2 * v50), *((_QWORD *)v4 + 255), a2[2] - 2 * (*((_QWORD *)v4 + 255) >> 1) * v48, *((_QWORD *)v4 + 255), v40, *(_DWORD *)(*((_QWORD *)v4 + 1) + 1012), v64, v62, v66, v60, v68, 0);
    }
  }
  return result;
}

_DWORD *backup_lpf(_DWORD *result, char *__dst, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, int a8, int a9, unsigned int a10, int a11, unsigned int a12, int a13)
{
  char *v16;
  _DWORD *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  int v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  unsigned int *v51;
  unsigned int v53;
  unsigned int v54;
  char v55;

  v16 = __dst;
  v17 = result;
  v19 = a12;
  v18 = a13;
  v20 = *((_QWORD *)result + 3);
  v53 = a10;
  if (*(_DWORD *)(v20 + 456))
    v53 = (int)(*(_DWORD *)(v20 + 240) + a12) >> a12;
  if (a8)
    v21 = 0;
  else
    v21 = -8;
  v22 = ((64 << ((a13 == 0) & a7)) + v21) >> a6;
  v23 = v22 - 2;
  v24 = a5 >> 1;
  if (*(_DWORD *)(*((_QWORD *)result + 390) + 24) == 1)
  {
    if (a8)
    {
      v25 = 4 << a7;
      v26 = a3 >> 1;
      v27 = (int)(2 * v53);
      v55 = a6;
      memcpy(__dst, &__dst[2 * (a3 >> 1) * (4 << a7)], v27);
      memcpy(&v16[a3], &v16[2 * v26 * (v25 | 1)], v27);
      memcpy(&v16[2 * a3], &v16[2 * v26 * (v25 | 2)], v27);
      result = memcpy(&v16[6 * v26], &v16[2 * v26 * (v25 | 3)], v27);
      v18 = a13;
      v19 = a12;
      v24 = a5 >> 1;
      a6 = v55;
    }
    v16 += 4 * a3;
  }
  v28 = v24 * v23;
  if (v18 && *(_DWORD *)(*((_QWORD *)v17 + 3) + 236) != *(_DWORD *)(*((_QWORD *)v17 + 3) + 240))
  {
    v41 = v22 + a8;
    if (v41 <= a9)
    {
      v42 = a4 + 2 * v28;
      v43 = (char *)&v17[v19];
      v50 = v43 + 3112;
      v51 = (unsigned int *)(v43 + 3104);
      v44 = a3 >> 1;
      v45 = a11 - 1;
      v46 = 0x40u >> a6;
      v47 = 2 * v24 * v46;
      do
      {
        if (v45 == v41)
          v48 = 3;
        else
          v48 = 4;
        LODWORD(v49) = *v50;
        HIDWORD(v49) = v17[1039];
        result = (_DWORD *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))(*((_QWORD *)v17 + 393) + 672))(v16, a3, v42, a5, v53, v48, a10, *v51, v49);
        v16 += 2 * v44 * v48;
        if (v45 == v41)
        {
          result = memcpy(v16, &v16[-2 * (a3 >> 1)], (int)(2 * v53));
          v16 += 2 * v44;
        }
        v41 += v46;
        v42 += v47;
      }
      while (v41 <= a9);
    }
  }
  else
  {
    v29 = v22 + a8;
    if ((int)(v22 + a8) <= a9)
    {
      v30 = (int)(2 * a10);
      v54 = 0x40u >> a6;
      v31 = 2 * v28;
      v32 = v24 * (2 * ((0x40u >> a6) - 4) + 8);
      v33 = 2 * v23;
      v34 = v24 * (2 * v23 + 2);
      v35 = v24 * (2 * v23 + 4);
      v36 = v24 * (v33 + 6);
      do
      {
        memcpy(v16, (const void *)(a4 + v31), v30);
        v37 = &v16[a3];
        memcpy(v37, (const void *)(a4 + v34), v30);
        v38 = &v37[a3];
        memcpy(v38, (const void *)(a4 + v35), v30);
        if (a11 - 1 == v29)
          v39 = v38;
        else
          v39 = (char *)(a4 + v36);
        v40 = &v38[a3];
        result = memcpy(v40, v39, v30);
        v29 += v54;
        a4 += v32;
        v16 = &v40[a3];
      }
      while (v29 <= a9);
    }
  }
  return result;
}

uint64_t dav1d_loopfilter_sbrow_cols_16bpc(uint64_t a1, uint64_t *a2, unsigned __int16 *a3, int a4, int a5)
{
  int v5;
  unsigned int v6;
  signed int v7;
  char v8;
  int v9;
  signed int v10;
  char v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned __int16 *v27;
  int v28;
  _BOOL4 v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _WORD *v37;
  int v38;
  BOOL v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  BOOL v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  _WORD *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned __int16 *v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned __int16 *v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  unsigned __int16 *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  unsigned __int16 *v98;
  int v99;
  uint64_t v100;
  int v101;
  unsigned __int16 *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int16 *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int16 *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned __int16 *v128;
  int v129;
  uint64_t v130;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  unsigned __int16 *v136;
  unsigned __int16 *v137;
  uint64_t v138;
  signed int v139;
  unsigned int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  signed int v146;
  unsigned __int16 *v147;
  unsigned __int16 *v148;
  unsigned __int16 *v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v161;
  uint64_t v163;
  int v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v168;
  int v169;
  int v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 1012) == 0;
  v151 = v5 & a4;
  v6 = 16 * (v5 & a4);
  v7 = 0x20u >> v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 1012))
    v8 = 5;
  else
    v8 = 4;
  v9 = *(_DWORD *)(a1 + 2056);
  v134 = v9 != 3;
  v142 = v7 * a4;
  v10 = *(_DWORD *)(a1 + 3276) - v7 * a4;
  v146 = 0x20u >> v5;
  if (v10 >= v7)
    v10 = 0x20u >> v5;
  v11 = v9 == 1;
  v139 = 0x10u >> (v9 == 1);
  v165 = v10;
  v12 = v10 + v6;
  if (v9 == 1)
    v13 = v12 + 1;
  else
    v13 = v12;
  v132 = v13 >> v11;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_DWORD *)(a1 + 3280);
  v16 = *(unsigned __int16 *)(v14 + 562);
  result = v16 << v8;
  v144 = v9 == 1;
  v133 = v6 >> v11;
  if ((int)result < v15)
  {
    result = *(_QWORD *)(a1 + 4992) + (a4 << (v8 - v11));
    v18 = *(_QWORD *)(a1 + 4984) + (a4 << v8);
    v19 = (*(int *)(a1 + 3284) + 31) & 0xFFFFFFFFFFFFFFE0;
    v20 = 1;
    if (v9 == 1)
      v21 = 3;
    else
      v21 = 4;
    do
    {
      v22 = 16 * (v16 & v5);
      v23 = v16 >> v5;
      if (v6 < v12)
      {
        v24 = 0;
        v25 = 1 << v6;
        do
        {
          v26 = v25 >> (16 * ((v25 & 0xFFFF0000) != 0));
          v27 = &a3[674 * v23 + 6 * v22 + ((v25 & 0xFFFF0000) != 0)];
          v28 = v27[4];
          v29 = (v26 & v28) != 0;
          v30 = v27[2];
          v27[4] = v28 & ~(_WORD)v26;
          v27[2] = v30 & ~(_WORD)v26;
          *v27 &= ~(_WORD)v26;
          v31 = *(unsigned __int8 *)(v18 + v24);
          v32 = ((v26 & v30) != 0) | (2 * v29);
          if (v32 < v31)
            v31 = v32;
          v27[2 * v31] |= v26;
          v25 *= 2;
          ++v24;
        }
        while (v12 - v6 != v24);
      }
      if (v9 && v133 < v132)
      {
        v33 = 0;
        v34 = (uint64_t)&a3[674 * v23 + 384 + 4 * (v22 >> v134)];
        v35 = 1 << v133;
        do
        {
          v36 = v35 >> ((v35 >> v139 != 0) << v21);
          v37 = (_WORD *)(v34 + 2 * (v35 >> v139 != 0));
          v38 = (unsigned __int16)v37[2];
          v39 = (v36 & v38) == 0;
          v37[2] = v38 & ~(_WORD)v36;
          *v37 &= ~(_WORD)v36;
          v40 = *(unsigned __int8 *)(result + v33);
          v41 = !v39;
          if (v41 < v40)
            v40 = v41;
          v37[2 * v40] |= v36;
          v35 *= 2;
          ++v33;
        }
        while (v132 - v133 != v33);
      }
      v18 += v19;
      result += (int)v19 >> v144;
      ++v20;
      v16 = *(unsigned __int16 *)(v14 + 2 * v20 + 560);
    }
    while ((int)(v16 << v8) < v15);
  }
  v42 = a1;
  v43 = *(unsigned int *)(a1 + 3288);
  if (a5 && (int)v43 > 0)
  {
    v44 = 0;
    v45 = 0x10u >> v134;
    v46 = *(_QWORD *)(a1 + 3864) + 624 * (int)v43 * (a5 - 1);
    v47 = (uint64_t)&a3[6 * v6 + 192];
    v48 = *(_DWORD *)(a1 + 3272);
    if (v9 == 3)
      result = 4;
    else
      result = 3;
    v49 = *(_DWORD *)(a1 + 3272);
    do
    {
      v50 = v49;
      v51 = __OFSUB__(v49, 32);
      v49 -= 32;
      if (v49 < 0 != v51)
        v52 = v50;
      else
        v52 = 32;
      if (v48 - 32 * (int)v44 >= 32)
        v53 = 32;
      else
        v53 = v48 - 32 * v44;
      if (v53)
      {
        v54 = 0;
        v55 = 1;
        do
        {
          v56 = v55 >> (16 * ((v55 & 0xFFFF0000) != 0));
          v57 = (_WORD *)(v47 + 1348 * v44 + 2 * ((v55 & 0xFFFF0000) != 0));
          v58 = (unsigned __int16)v57[4];
          v59 = (unsigned __int16)v57[2];
          v60 = ((v56 & v59) != 0) | (2 * ((v56 & v58) != 0));
          v57[4] = v58 & ~(_WORD)v56;
          v57[2] = v59 & ~(_WORD)v56;
          *v57 &= ~(_WORD)v56;
          v61 = *(unsigned __int8 *)(v46 + v54 + 480);
          if (v60 < v61)
            v61 = v60;
          v57[2 * v61] |= v56;
          v55 *= 2;
          ++v54;
        }
        while (v52 != v54);
      }
      if (v9)
      {
        v62 = (v53 + v134) >> v134;
        if ((_DWORD)v62)
        {
          v63 = 0;
          v64 = 1;
          do
          {
            v65 = v64 >> ((v64 >> v45 != 0) << result);
            v66 = &a3[674 * v44 + 512 + 4 * v133 + (v64 >> v45 != 0)];
            v67 = v66[2];
            v68 = (v65 & v67) != 0;
            v66[2] = v67 & ~(_WORD)v65;
            *v66 &= ~(_WORD)v65;
            v69 = *(unsigned __int8 *)(v46 + v63 + 512);
            if (v68 < v69)
              v69 = v68;
            v66[2 * v69] |= v65;
            v64 *= 2;
            ++v63;
          }
          while (v62 != v63);
        }
      }
      ++v44;
      v46 += 624;
    }
    while (v44 != v43);
  }
  if ((int)v43 >= 1)
  {
    v70 = *(_QWORD *)(a1 + 4256) + 4 * v146 * (uint64_t)a4 * *(_QWORD *)(a1 + 3264);
    v71 = *a2;
    v163 = a1 + 4320;
    if (v151)
    {
      v72 = 0;
      v73 = 0;
      v74 = 0;
      v75 = a3 + 5;
      do
      {
        v76 = *(_DWORD *)(v42 + 3272);
        if (v76 - 32 * (int)v73 >= 1)
        {
          v147 = v75;
          v152 = v73;
          v77 = 0;
          v78 = 0;
          v79 = *(_QWORD *)(v42 + 3264);
          v80 = *(_QWORD *)(v42 + 2032);
          v81 = *(_QWORD *)(v42 + 3144);
          v156 = v72;
          v82 = v76 + v72;
          if (v82 >= 32)
            v83 = 32;
          else
            v83 = v82;
          v84 = v75;
          do
          {
            if (v74 | v78)
            {
              v85 = *(v84 - 2);
              LODWORD(v168) = *(v84 - 4);
              HIDWORD(v168) = v85;
              v169 = *v84;
              v170 = 0;
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v81 + 3264))(v71 + 2 * (v77 & 0xFFFFFFFC), v80, &v168, v70 + v77, v79, v163, v165, *(unsigned int *)(a1 + 4156));
            }
            ++v78;
            v77 += 4;
            v84 += 6;
          }
          while (v83 != v78);
          v42 = a1;
          LODWORD(v43) = *(_DWORD *)(a1 + 3288);
          v72 = v156;
          v75 = v147;
          v73 = v152;
        }
        ++v73;
        v71 += 256;
        v70 += 128;
        v72 -= 32;
        v75 += 674;
        v74 = 1;
      }
      while (v73 < (int)v43);
    }
    else if ((int)v12 <= 16)
    {
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v102 = a3 + 4;
      do
      {
        v103 = *(_DWORD *)(v42 + 3272);
        if (v103 - 32 * (int)v100 >= 1)
        {
          v149 = v102;
          v154 = v100;
          v104 = 0;
          v105 = 0;
          v106 = *(_QWORD *)(v42 + 3264);
          v107 = *(_QWORD *)(v42 + 2032);
          v108 = *(_QWORD *)(v42 + 3144);
          v158 = v99;
          v109 = v103 + v99;
          if (v109 >= 32)
            v110 = 32;
          else
            v110 = v109;
          do
          {
            if (v101 | v105)
            {
              v111 = *(v102 - 2);
              LODWORD(v168) = *(v102 - 4);
              HIDWORD(v168) = v111;
              v169 = *v102;
              v170 = 0;
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v108 + 3264))(v71 + 2 * (v104 & 0xFFFFFFFC), v107, &v168, v70 + v104, v106, v163, v165, *(unsigned int *)(a1 + 4156));
            }
            ++v105;
            v104 += 4;
            v102 += 6;
          }
          while (v110 != v105);
          v42 = a1;
          LODWORD(v43) = *(_DWORD *)(a1 + 3288);
          v99 = v158;
          v102 = v149;
          v100 = v154;
        }
        ++v100;
        v71 += 256;
        v70 += 128;
        v99 -= 32;
        v102 += 674;
        v101 = 1;
      }
      while (v100 < (int)v43);
    }
    else
    {
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v89 = a3 + 3;
      do
      {
        v90 = *(_DWORD *)(v42 + 3272);
        if (v90 - 32 * (int)v87 >= 1)
        {
          v148 = v89;
          v153 = v87;
          v91 = 0;
          v92 = 0;
          v93 = *(_QWORD *)(v42 + 3264);
          v94 = *(_QWORD *)(v42 + 2032);
          v95 = *(_QWORD *)(v42 + 3144);
          v157 = v86;
          v96 = v90 + v86;
          if (v96 >= 32)
            v97 = 32;
          else
            v97 = v96;
          v98 = v89;
          do
          {
            if (v88 | v92)
            {
              v168 = *(_QWORD *)(v98 - 3);
              v169 = *(_DWORD *)(v98 + 1);
              v170 = 0;
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v95 + 3264))(v71 + 2 * (v91 & 0xFFFFFFFC), v94, &v168, v70 + v91, v93, v163, v165, *(unsigned int *)(a1 + 4156));
            }
            ++v92;
            v91 += 4;
            v98 += 6;
          }
          while (v97 != v92);
          v42 = a1;
          LODWORD(v43) = *(_DWORD *)(a1 + 3288);
          v86 = v157;
          v89 = v148;
          v87 = v153;
        }
        ++v87;
        v71 += 256;
        v70 += 128;
        v86 -= 32;
        v89 += 674;
        v88 = 1;
      }
      while (v87 < (int)v43);
    }
  }
  v112 = *(_QWORD *)(v42 + 24);
  if (*(_DWORD *)(v112 + 1240))
  {
    if ((int)v43 < 1)
      return result;
  }
  else
  {
    if (*(_DWORD *)(v112 + 1244))
      v113 = (int)v43 <= 0;
    else
      v113 = 1;
    if (v113)
      return result;
  }
  v114 = 0;
  v138 = 0;
  v164 = 0;
  v159 = *(_QWORD *)(v42 + 4256) + 4 * *(_QWORD *)(v42 + 3264) * (v142 >> v144);
  v141 = v42 + 4320;
  v140 = v132 - v133;
  v136 = a3 + 386;
  v137 = a3 + 387;
  do
  {
    v135 = v114;
    v115 = *(_DWORD *)(v42 + 3272) - 32 * v114;
    if (v115 >= 32)
      v115 = 32;
    v161 = ((v115 + v134) >> v134);
    if ((int)v161 >= 1)
    {
      v155 = *(_QWORD *)(a1 + 3264);
      v145 = a2[2] + 2 * v138;
      v150 = a2[1] + 2 * v138;
      v143 = *(_QWORD *)(a1 + 2040);
      v166 = *(_QWORD *)(a1 + 3144);
      if ((_DWORD)v133)
      {
        v116 = 0;
        v117 = 0;
        v118 = v137;
        do
        {
          if (v164 | v117)
          {
            v119 = *v118;
            LODWORD(v168) = *(v118 - 2);
            HIDWORD(v168) = v119;
            v169 = 0;
            v120 = (2 * v116) & 0x1FFFFFFF8;
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v166 + 3280))(v150 + v120, v143, &v168, v159 + v116 + 2, v155, v141, v140, *(unsigned int *)(a1 + 4156));
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v166 + 3280))(v145 + v120, v143, &v168, v159 + v116 + 3, v155, v141, v140, *(unsigned int *)(a1 + 4156));
          }
          ++v117;
          v116 += 4;
          v118 += 4;
        }
        while (v161 != v117);
      }
      else if (v139 >= (int)v132)
      {
        v126 = 0;
        v127 = 0;
        v128 = v136;
        do
        {
          if (v164 | v127)
          {
            v129 = *v128;
            LODWORD(v168) = *(v128 - 2);
            HIDWORD(v168) = v129;
            v169 = 0;
            v130 = (2 * v126) & 0x1FFFFFFF8;
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v166 + 3280))(v150 + v130, v143, &v168, v159 + v126 + 2, v155, v141, v140, *(unsigned int *)(a1 + 4156));
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v166 + 3280))(v145 + v130, v143, &v168, v159 + v126 + 3, v155, v141, v140, *(unsigned int *)(a1 + 4156));
          }
          ++v127;
          v126 += 4;
          v128 += 4;
        }
        while (v161 != v127);
      }
      else
      {
        v121 = 0;
        v122 = 0;
        v123 = v137;
        do
        {
          if (v164 | v122)
          {
            v124 = (*v123 << v139) | *(v123 - 1);
            LODWORD(v168) = (*(v123 - 2) << v139) | *(v123 - 3);
            HIDWORD(v168) = v124;
            v169 = 0;
            v125 = (2 * v121) & 0x1FFFFFFF8;
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v166 + 3280))(v150 + v125, v143, &v168, v159 + v121 + 2, v155, v141, v140, *(unsigned int *)(a1 + 4156));
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v166 + 3280))(v145 + v125, v143, &v168, v159 + v121 + 3, v155, v141, v140, *(unsigned int *)(a1 + 4156));
          }
          ++v122;
          v121 += 4;
          v123 += 4;
        }
        while (v161 != v122);
      }
    }
    v114 = v135 + 1;
    v138 += 0x80u >> v134;
    v42 = a1;
    v159 += 4 * (0x20u >> v134);
    v136 += 674;
    v137 += 674;
    v164 = 1;
  }
  while (v135 + 1 < *(int *)(a1 + 3288));
  return result;
}

uint64_t dav1d_loopfilter_sbrow_rows_16bpc(uint64_t result, uint64_t *a2, uint64_t a3, int a4)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  char v42;
  unsigned __int16 *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  _BOOL4 v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v62 = a4 > 0;
  v4 = *(_DWORD *)(*(_QWORD *)(result + 8) + 1012) == 0;
  v5 = v4 & a4;
  v6 = 16 * (v4 & a4);
  v7 = 0x20u >> v4;
  v8 = *(_DWORD *)(result + 2056);
  v40 = v8 != 3;
  v9 = v7 * a4;
  v10 = *(_DWORD *)(result + 3276) - v7 * a4;
  if (v10 >= (int)v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(result + 3276) - v7 * a4;
  v12 = v8 == 1;
  v50 = v6;
  v48 = v11;
  if (v8 == 1)
    v13 = v11 + v6 + 1;
  else
    v13 = v11 + v6;
  LODWORD(v14) = *(_DWORD *)(result + 3288);
  v61 = result;
  if ((int)v14 >= 1 && v10 >= 1)
  {
    v38 = v13;
    v42 = v12;
    v44 = v7 * a4;
    v15 = 0;
    v59 = result + 4320;
    v46 = a3;
    v16 = *a2;
    v17 = a3 + 192 * v5 + 394;
    v18 = *(_QWORD *)(result + 4256) + 4 * *(_QWORD *)(result + 3264) * a4 * v7 + 1;
    do
    {
      v55 = v16;
      v57 = v15;
      v19 = *(_DWORD *)(result + 3272) - 32 * v15;
      if (v19 >= 32)
        v19 = 32;
      v60 = v19;
      v20 = *(_QWORD *)(result + 2032);
      v21 = *(_QWORD *)(result + 3264);
      v51 = v18;
      v53 = v17;
      v22 = *(_QWORD *)(result + 3144);
      v23 = v50;
      v24 = v48;
      do
      {
        if (v23 | v62)
        {
          v63 = *(_QWORD *)(v17 - 10);
          v64 = *(_DWORD *)(v17 - 2);
          v65 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v22 + 3272))(v16, v20, &v63, v18, v21, v59, v60, *(unsigned int *)(v61 + 4156));
        }
        v17 += 12;
        v16 += 4 * v20;
        ++v23;
        v18 += 4 * v21;
        --v24;
      }
      while (v24);
      v15 = v57 + 1;
      v16 = v55 + 256;
      result = v61;
      v14 = *(int *)(v61 + 3288);
      v17 = v53 + 1348;
      v18 = v51 + 128;
    }
    while (v57 + 1 < v14);
    a3 = v46;
    v9 = v44;
    v12 = v42;
    v13 = v38;
  }
  v25 = *(_QWORD *)(result + 24);
  if (*(_DWORD *)(v25 + 1240))
  {
    if ((int)v14 < 1)
      return result;
  }
  else if ((int)v14 < 1 || !*(_DWORD *)(v25 + 1244))
  {
    return result;
  }
  v58 = v13 >> v12;
  v39 = v50 >> v12;
  if ((int)v39 < (int)(v13 >> v12))
  {
    v26 = 0;
    v27 = 0;
    v52 = 0x10u >> v40;
    v28 = *(_QWORD *)(result + 4256) + 4 * *(_QWORD *)(result + 3264) * (v9 >> v12) + 2;
    v29 = (unsigned __int16 *)(a3 + 8 * v39 + 1030);
    v30 = result + 4320;
    do
    {
      v31 = *(_QWORD *)(result + 3264);
      v54 = a2[2];
      v56 = a2[1];
      v32 = *(_QWORD *)(result + 2040);
      v47 = v27;
      v49 = v26;
      v33 = *(_DWORD *)(result + 3272) - 32 * v27;
      if (v33 >= 32)
        v33 = 32;
      v34 = ((v33 + v40) >> v40);
      v35 = *(_QWORD *)(result + 3144);
      v43 = v29;
      v45 = v28;
      v36 = v39;
      do
      {
        if (v36 | v62)
        {
          v37 = (*v29 << v52) | *(v29 - 1);
          LODWORD(v63) = (*(v29 - 2) << v52) | *(v29 - 3);
          HIDWORD(v63) = v37;
          v64 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v35 + 3288))(v56 + v26, v32, &v63, v28, v31, v30, v34, *(unsigned int *)(v61 + 4156));
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v35 + 3288))(v54 + v26, v32, &v63, v28 + 1, v31, v30, v34, *(unsigned int *)(v61 + 4156));
        }
        ++v36;
        v28 += 4 * v31;
        v29 += 4;
        v26 += 4 * v32;
      }
      while (v58 != v36);
      v27 = v47 + 1;
      result = v61;
      v28 = v45 + 4 * (0x20u >> v40);
      v29 = v43 + 674;
      v26 = v49 + 2 * (0x80u >> v40);
    }
    while (v47 + 1 < *(int *)(v61 + 3288));
  }
  return result;
}

_WORD *loop_filter_h_sb128y_c(_WORD *result, uint64_t a2, _DWORD *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, signed int a8)
{
  int v8;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  unsigned int v19;

  v8 = a3[1] | *a3 | a3[2];
  if (v8)
  {
    v13 = result;
    v14 = a2 >> 1;
    v15 = 4 * a2;
    v16 = 1;
    v17 = 4 * a5;
    do
    {
      if ((v16 & v8) != 0)
      {
        v19 = *a4;
        if (*a4 || (v19 = *(a4 - 4), *(a4 - 4)))
        {
          if ((a3[2] & v16) != 0)
            v18 = 2;
          else
            v18 = (a3[1] & v16) != 0;
          result = loop_filter(v13, *(unsigned __int8 *)(a6 + v19), *(unsigned __int8 *)(a6 + v19 + 64), v19 >> 4, v14, 1, 4 << v18, a8);
        }
      }
      v16 *= 2;
      v13 = (_WORD *)((char *)v13 + v15);
      a4 += v17;
    }
    while ((v8 & -v16) != 0);
  }
  return result;
}

_WORD *loop_filter_v_sb128y_c(_WORD *result, uint64_t a2, _DWORD *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, signed int a8)
{
  int v8;
  _WORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  unsigned int v18;

  v8 = a3[1] | *a3 | a3[2];
  if (v8)
  {
    v13 = result;
    v14 = a2 >> 1;
    v15 = 1;
    v16 = -4 * a5;
    do
    {
      if ((v15 & v8) != 0)
      {
        v18 = *a4;
        if (*a4 || (v18 = a4[v16], a4[v16]))
        {
          if ((a3[2] & v15) != 0)
            v17 = 2;
          else
            v17 = (a3[1] & v15) != 0;
          result = loop_filter(v13, *(unsigned __int8 *)(a6 + v18), *(unsigned __int8 *)(a6 + v18 + 64), v18 >> 4, 1, v14, 4 << v17, a8);
        }
      }
      v15 *= 2;
      v13 += 4;
      a4 += 4;
    }
    while ((v8 & -v15) != 0);
  }
  return result;
}

_WORD *loop_filter_h_sb128uv_c(_WORD *result, uint64_t a2, _DWORD *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, signed int a8)
{
  int v8;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  unsigned int v21;

  v8 = a3[1] | *a3;
  if (*(_QWORD *)a3)
  {
    v13 = result;
    v14 = a2 >> 1;
    v15 = 4 * a2;
    v16 = 1;
    v17 = 4 * a5;
    do
    {
      if ((v16 & v8) != 0)
      {
        v21 = *a4;
        if (*a4 || (v21 = *(a4 - 4), *(a4 - 4)))
        {
          v18 = v21 >> 4;
          v19 = (unsigned __int8 *)(a6 + v21);
          if ((a3[1] & v16) != 0)
            v20 = 6;
          else
            v20 = 4;
          result = loop_filter(v13, *v19, v19[64], v18, v14, 1, v20, a8);
        }
      }
      v16 *= 2;
      v13 = (_WORD *)((char *)v13 + v15);
      a4 += v17;
    }
    while ((v8 & -v16) != 0);
  }
  return result;
}

_WORD *loop_filter_v_sb128uv_c(_WORD *result, uint64_t a2, _DWORD *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, signed int a8)
{
  int v8;
  _WORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;

  v8 = a3[1] | *a3;
  if (*(_QWORD *)a3)
  {
    v13 = result;
    v14 = a2 >> 1;
    v15 = 1;
    v20 = -4 * a5;
    do
    {
      if ((v15 & v8) != 0)
      {
        v19 = *a4;
        if (*a4 || (v19 = a4[v20], a4[v20]))
        {
          v16 = v19 >> 4;
          v17 = (unsigned __int8 *)(a6 + v19);
          if ((a3[1] & v15) != 0)
            v18 = 6;
          else
            v18 = 4;
          result = loop_filter(v13, *v17, v17[64], v16, 1, v14, v18, a8);
        }
      }
      v15 *= 2;
      v13 += 4;
      a4 += 4;
    }
    while ((v8 & -v15) != 0);
  }
  return result;
}

_WORD *loop_filter(_WORD *result, int a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, signed int a8)
{
  char v8;
  signed int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  __int16 v23;
  __int16 v24;
  int v25;
  __int16 v26;
  __int16 v27;
  int v28;
  int v29;
  int v30;
  int v31;
  signed int v32;
  signed int v33;
  char v34;
  int v35;
  int v36;
  signed int v37;
  signed int v38;
  BOOL v39;
  BOOL v40;
  int v41;
  signed int v42;
  int v43;
  signed int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  _BOOL4 v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  BOOL v60;
  unsigned int v61;
  _BOOL4 v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v70;
  int v71;
  unsigned int v72;
  signed int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  __int16 v81;
  __int16 v82;
  __int16 v83;
  __int16 v84;
  int v85;
  __int16 v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  signed int v105;
  unsigned int v106;

  v8 = __clz(a8);
  v104 = a2 << (24 - v8);
  v9 = a3 << (24 - v8);
  v105 = a4 << (24 - v8);
  v106 = 1 << (24 - v8);
  v10 = 4 * a6;
  v11 = -128 << (24 - v8);
  v12 = (128 << (24 - v8)) - 1;
  v13 = 2 * a5;
  v14 = 4;
  v100 = v11;
  do
  {
    v28 = (unsigned __int16)result[-2 * a6];
    v29 = (unsigned __int16)result[-a6];
    v30 = (unsigned __int16)*result;
    v31 = (unsigned __int16)result[a6];
    if (v28 - v29 >= 0)
      v32 = v28 - v29;
    else
      v32 = v29 - v28;
    if (v32 > v9)
      goto LABEL_39;
    v33 = v31 - v30;
    if (v31 - v30 < 0)
      v33 = v30 - v31;
    if (v33 <= v9)
    {
      v57 = v29 - v30;
      if (v29 - v30 < 0)
        v57 = v30 - v29;
      v58 = v28 - v31;
      if (v28 - v31 < 0)
        v58 = v31 - v28;
      v34 = (int)((v58 >> 1) + 2 * v57) <= v104;
      if (a7 < 5)
      {
LABEL_75:
        v35 = 0;
        v36 = 0;
LABEL_76:
        if ((v34 & 1) == 0)
          goto LABEL_31;
        if (a7 < 6)
          goto LABEL_108;
        v41 = 0;
        v43 = 0;
        goto LABEL_79;
      }
    }
    else
    {
LABEL_39:
      v34 = 0;
      if (a7 < 5)
        goto LABEL_75;
    }
    v35 = (unsigned __int16)result[-3 * a6];
    v36 = *(unsigned __int16 *)((char *)result + v10);
    v37 = v35 - v28;
    if (v35 - v28 < 0)
      v37 = v28 - v35;
    v38 = v36 - v31;
    if (v36 - v31 < 0)
      v38 = v31 - v36;
    v39 = v38 <= v9;
    v40 = v37 <= v9 && v39;
    v34 &= v40;
    if (a7 < 7)
      goto LABEL_76;
    v41 = (unsigned __int16)result[-4 * a6];
    v42 = v41 - v35;
    if (v41 - v35 < 0)
      v42 = v35 - v41;
    if (v42 > v9)
      goto LABEL_31;
    v43 = (unsigned __int16)result[3 * a6];
    v44 = v43 - v36;
    if (v43 - v36 < 0)
      v44 = v36 - v43;
    if (v44 > v9)
      v34 = 0;
    if ((v34 & 1) == 0)
      goto LABEL_31;
    if (a7 >= 0x10)
    {
      v45 = (unsigned __int16)result[-7 * a6];
      v46 = (unsigned __int16)result[-6 * a6];
      v47 = (unsigned __int16)result[-5 * a6];
      v48 = (unsigned __int16)result[4 * a6];
      v49 = (unsigned __int16)result[5 * a6];
      v50 = (unsigned __int16)result[6 * a6];
      v51 = v45 - v29;
      if (v45 - v29 < 0)
        v51 = v29 - v45;
      v102 = (unsigned __int16)result[-5 * a6];
      v103 = (unsigned __int16)result[4 * a6];
      if (v51 > v106)
        goto LABEL_69;
      v52 = v46 - v29;
      if (v46 - v29 < 0)
        v52 = v29 - v46;
      if (v52 > v106)
        goto LABEL_69;
      v53 = v47 - v29;
      if (v47 - v29 < 0)
        v53 = v29 - v47;
      if (v53 > v106)
        goto LABEL_69;
      v54 = v48 - v30;
      if (v48 - v30 < 0)
        v54 = v30 - v48;
      if (v54 <= v106)
      {
        v95 = v49 - v30;
        if (v49 - v30 < 0)
          v95 = v30 - v49;
        v11 = v100;
        v55 = 0;
        if (v95 <= v106)
        {
          v96 = v50 - v30;
          if (v50 - v30 < 0)
            v96 = v30 - v50;
          v56 = v96 <= v106;
        }
        else
        {
          v56 = 0;
        }
      }
      else
      {
LABEL_69:
        v55 = 0;
        v56 = 0;
        v11 = v100;
      }
      goto LABEL_80;
    }
LABEL_79:
    v56 = 0;
    v50 = 0;
    v49 = 0;
    v102 = 0;
    v103 = 0;
    v46 = 0;
    v45 = 0;
    v55 = 1;
LABEL_80:
    v59 = v35 - v29;
    if (v35 - v29 < 0)
      v59 = v29 - v35;
    v60 = v32 > v106 || v59 > v106;
    if (v60)
      goto LABEL_89;
    v61 = v31 - v30;
    if (v31 - v30 < 0)
      v61 = v30 - v31;
    if (v61 > v106)
    {
LABEL_89:
      v62 = 0;
      if (a7 >= 8)
        goto LABEL_90;
    }
    else
    {
      v68 = v36 - v30;
      if (v36 - v30 < 0)
        v68 = v30 - v36;
      v62 = v68 <= v106;
      if (a7 >= 8)
      {
LABEL_90:
        v101 = v50;
        v63 = v10;
        v64 = v41 - v29;
        if (v41 - v29 < 0)
          v64 = v29 - v41;
        v60 = v64 > v106;
        v10 = v63;
        if (!v60)
        {
          v65 = v43 - v30;
          if (v43 - v30 < 0)
            v65 = v30 - v43;
          if (v65 > v106)
            v62 = 0;
          if (((v55 | (!v56 || !v62)) & 1) == 0)
          {
            v97 = v28 + 8;
            v98 = v28 + 8 + v29;
            result[-6 * a6] = (v35 + v41 + 2 * v102 + 2 * v46 + v98 + v30 - v45 + 8 * v45) >> 4;
            v99 = v98 + v30 + v31;
            v90 = v99 + 2 * v41;
            result[-5 * a6] = (v90 + v35 + 2 * v102 + 2 * v46 + 5 * v45) >> 4;
            result[-4 * a6] = (v90 + 2 * v35 + v36 + v46 + 2 * v102 + 4 * v45) >> 4;
            v91 = 2 * v28 + 8;
            v92 = v29 + v30 + v31;
            result[-3 * a6] = (v92 + v91 + 2 * v41 + 2 * v35 + v36 + v43 + v102 + v46 + 3 * v45) >> 4;
            v93 = v91 + 2 * v29;
            result[-2 * a6] = (v93 + v30 + v31 + v41 + 2 * v35 + v36 + v43 + v103 + v102 + v46 + 2 * v45) >> 4;
            result[-a6] = (v93 + 2 * v30 + v31 + v41 + v35 + v36 + v43 + v49 + v103 + v102 + v46 + v45) >> 4;
            v94 = 2 * v30 + 2 * v31;
            *result = (2 * v29 + v97 + v94 + v41 + v35 + v36 + v43 + v101 + v49 + v103 + v102 + v46) >> 4;
            v11 = v100;
            result[a6] = (v94 + v98 + v41 + v35 + 2 * v36 + v43 + v49 + 2 * v101 + v103 + v102) >> 4;
            v10 = v63;
            *(_WORD *)((char *)result + v63) = (2 * v31
                                                            + v41
                                                            + v35
                                                            + v98
                                                            + v30
                                                            + 2 * v36
                                                            + 2 * v43
                                                            + v101
                                                            + v49
                                                            + 2 * v101
                                                            + v103) >> 4;
            result[3 * a6] = (v35 + 2 * v36 + 2 * v43 + v49 + 4 * v101 + 2 * v103 + v99) >> 4;
            result[4 * a6] = (v36 + 2 * v43 + v101 + 4 * v101 + 2 * v49 + 2 * v103 + v99) >> 4;
            result[5 * a6] = (v92 + v36 + v43 + v101 + 4 * v101 + 2 * v101 + 2 * v49 + 2 * v103 + 8) >> 4;
            goto LABEL_31;
          }
          v10 = v63;
          if (v62)
          {
            v66 = v29 + 4 + v30 + v31;
            v67 = v29 + 4 + v28;
            result[-3 * a6] = (3 * v41 + v67 + v30 + 2 * v35) >> 3;
            result[-2 * a6] = (v35 + v66 + 2 * (v41 + v28)) >> 3;
            result[-a6] = (v28 + 2 * v29 + v30 + v31 + v41 + v35 + v36 + 4) >> 3;
            *result = (v67 + 2 * v30 + v31 + v35 + v36 + v43) >> 3;
            result[a6] = (v67 + v30 + 2 * v31 + v36 + 2 * v43) >> 3;
            *(_WORD *)((char *)result + v63) = (v66 + 2 * v36 + 3 * v43) >> 3;
            goto LABEL_31;
          }
        }
        goto LABEL_108;
      }
    }
    if (a7 == 6 && v62)
    {
      v70 = 2 * v29 + 4;
      v71 = v70 + 2 * v28;
      result[-2 * a6] = (v71 + v30 + 3 * v35) >> 3;
      result[-a6] = (2 * v30 + v31 + v35 + v71) >> 3;
      *result = (v70 + v28 + 2 * v30 + 2 * v31 + v36) >> 3;
      v72 = (v29 + 2 * v30 + 2 * v31 + v36 + 2 * v36 + 4) >> 3;
LABEL_146:
      result[a6] = v72;
      goto LABEL_31;
    }
LABEL_108:
    if (v32 <= v105)
    {
      v73 = v31 - v30;
      if (v31 - v30 < 0)
        v73 = v30 - v31;
      if (v73 <= v105)
      {
        v74 = 3 * (v30 - v29);
        if (v74 >= v12)
          v75 = v12;
        else
          v75 = 3 * (v30 - v29);
        if (v74 >= v11)
          v76 = v75;
        else
          v76 = v11;
        v77 = v76 + 4;
        if (v76 + 4 >= v12)
          v77 = v12;
        v78 = v77 >> 3;
        v79 = v76 + 3;
        if (v79 >= v12)
          v79 = v12;
        v80 = v29 + (v79 >> 3);
        if (v80 >= a8)
          v81 = a8;
        else
          v81 = v80;
        if (v80 >= 0)
          v82 = v81;
        else
          v82 = 0;
        result[-a6] = v82;
        if (v30 - v78 >= a8)
          v83 = a8;
        else
          v83 = v30 - v78;
        if (v30 - v78 >= 0)
          v84 = v83;
        else
          v84 = 0;
        *result = v84;
        v85 = (v78 + 1) >> 1;
        if (v85 + v28 >= a8)
          v86 = a8;
        else
          v86 = v85 + v28;
        if (v85 + v28 >= 0)
          v87 = v86;
        else
          v87 = 0;
        result[-2 * a6] = v87;
        v88 = v31 - v85;
        if (v88 >= a8)
          v89 = a8;
        else
          v89 = v88;
        if (v88 >= 0)
          LOWORD(v72) = v89;
        else
          LOWORD(v72) = 0;
        goto LABEL_146;
      }
    }
    if (v28 - v31 >= v12)
      v15 = v12;
    else
      v15 = v28 - v31;
    if (v28 - v31 >= v11)
      v16 = v15;
    else
      v16 = v11;
    v17 = v16 + 3 * (v30 - v29);
    if (v17 >= v12)
      v18 = v12;
    else
      v18 = v17;
    if (v17 >= v11)
      v19 = v18;
    else
      v19 = v11;
    v20 = v19 + 4;
    if (v19 + 4 >= v12)
      v20 = v12;
    v21 = v19 + 3;
    if (v21 >= v12)
      v21 = v12;
    v22 = v29 + (v21 >> 3);
    if (v22 >= a8)
      v23 = a8;
    else
      v23 = v22;
    if (v22 >= 0)
      v24 = v23;
    else
      v24 = 0;
    result[-a6] = v24;
    v25 = v30 - (v20 >> 3);
    if (v25 >= a8)
      v26 = a8;
    else
      v26 = v30 - (v20 >> 3);
    if (v25 >= 0)
      v27 = v26;
    else
      v27 = 0;
    *result = v27;
LABEL_31:
    result = (_WORD *)((char *)result + v13);
    --v14;
  }
  while (v14);
  return result;
}

uint64_t wiener_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  char *v9;
  int16x4_t *v10;
  int16x4_t *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t result;
  int8x16_t v21;
  unsigned int v22;
  int v23;
  char v24;
  int v25;
  unsigned int v26;
  int v27;
  signed int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int16x4_t *v42;
  _DWORD *v43;
  int32x4_t v44;
  int16x4_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  uint16x8_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  __int16 v71;
  __int16 v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  char v76;
  int v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  char *v90;
  int32x4_t v91;
  _DWORD *v92;
  _DWORD *v93;
  _DWORD *v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  _DWORD *v98;
  uint64_t i;
  unint64_t v100;
  const __int16 *v101;
  int16x4_t v102;
  const __int16 *v103;
  int16x4_t v104;
  const __int16 *v105;
  int16x4_t v106;
  const __int16 *v107;
  int16x4_t v108;
  const __int16 *v109;
  int16x4_t v110;
  const __int16 *v111;
  int16x4_t v112;
  const __int16 *v113;
  int16x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  uint16x8_t v122;
  uint16x8_t v123;
  uint16x8_t v124;
  uint16x8_t v125;
  uint16x8_t v126;
  uint16x8_t v127;
  uint16x8_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int v132;
  __int16 v133;
  __int16 v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  int v142;
  _DWORD v143[13650];
  _WORD v144[27300];
  uint64_t v145;

  v9 = (char *)MEMORY[0x1E0C80A78](a1, a2);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v145 = *MEMORY[0x1E0C80C00];
  v137 = v9;
  v138 = v16;
  result = (uint64_t)padding(v144, v9, v16, v17, v18, v14, v12, v19);
  v22 = __clz(a9);
  v23 = 2 * (v22 == 20);
  if (v13 >= -5)
  {
    v24 = v22 == 20 ? -2 : 0;
    if ((int)v15 >= 1)
    {
      v25 = 0;
      v26 = v23 + 3;
      v27 = v13 + 6;
      v28 = ~(-1 << (v24 - v22 + 37));
      if (v13 + 6 <= 1)
        v27 = 1;
      v29 = v11[1].i16[0];
      v30 = v11[1].i16[1];
      v31 = v11[1].i16[2];
      v32 = vmovl_s16(*v11);
      result = ((4 << v23) + (1 << (38 - v22)));
      v33 = vdupq_lane_s32(*(int32x2_t *)v32.i8, 0);
      v34 = vdupq_lane_s32(*(int32x2_t *)v32.i8, 1);
      v35 = vdupq_laneq_s32(v32, 2);
      v36 = vdupq_laneq_s32(v32, 3);
      v37 = vdupq_n_s32(v29);
      v38 = vdupq_n_s32(v30);
      v39 = vdupq_n_s32(v31);
      v40 = vdupq_n_s32(result);
      v41 = vdupq_n_s32(v28);
      v42 = (int16x4_t *)v144;
      v43 = v143;
      v44 = vnegq_s32(vdupq_n_s32(v26));
      while (1)
      {
        v45 = *v42;
        v46 = v42[1].u16[0];
        v47 = v42[1].u16[1];
        if (v15 < 8)
          break;
        v49 = 0;
        v50 = (int8x16_t)vdupq_n_s16(v47);
        v51 = (int8x16_t)vdupq_n_s16(v46);
        v21.u64[1] = (unint64_t)*v42;
        v52 = (int8x16_t)vdupq_lane_s16(v45, 2);
        v53 = (int8x16_t)vdupq_lane_s16(v45, 1);
        v54 = (int8x16_t)vdupq_lane_s16(v45, 0);
        do
        {
          v55 = v50;
          v50 = *(int8x16_t *)&v42[v49 / 8 + 1].u8[4];
          v56 = vextq_s8(v55, v50, 0xEuLL);
          v57 = vextq_s8(v51, v56, 0xEuLL);
          v58 = vextq_s8(v21, v57, 0xEuLL);
          v59 = vextq_s8(v52, v58, 0xEuLL);
          v60 = vextq_s8(v53, v59, 0xEuLL);
          v61 = (uint16x8_t)vextq_s8(v54, v60, 0xEuLL);
          v62 = vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v40, v33, (int32x4_t)vmovl_high_u16(v61)), v34, (int32x4_t)vmovl_high_u16((uint16x8_t)v60)), v35, (int32x4_t)vmovl_high_u16((uint16x8_t)v59)), v36, (int32x4_t)vmovl_high_u16((uint16x8_t)v58)), v37, (int32x4_t)vmovl_high_u16((uint16x8_t)v57)), v38, (int32x4_t)vmovl_high_u16((uint16x8_t)v56)), v39, (int32x4_t)vmovl_high_u16((uint16x8_t)v50));
          v63 = vshlq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v40, v33, (int32x4_t)vmovl_u16(*(uint16x4_t *)v61.i8)), v34, (int32x4_t)vmovl_u16(*(uint16x4_t *)v60.i8)), v35, (int32x4_t)vmovl_u16(*(uint16x4_t *)v59.i8)), v36, (int32x4_t)vmovl_u16(*(uint16x4_t *)v58.i8)), v37, (int32x4_t)vmovl_u16(*(uint16x4_t *)v57.i8)), v38, (int32x4_t)vmovl_u16(*(uint16x4_t *)v56.i8)), v39, (int32x4_t)vmovl_u16(*(uint16x4_t *)v50.i8)),
                  v44);
          v64 = vshlq_s32(v62, v44);
          *(int8x16_t *)&v43[v49 / 4] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v63, v41), (int16x8_t)vminq_s32(v64, v41)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v63), (int16x8_t)vcltzq_s32(v64)));
          v49 += 16;
          v51 = v56;
          v21 = v57;
          v52 = v58;
          v53 = v59;
          v54 = v60;
        }
        while (((2 * v15) & 0x1FFFFFFF0) != v49);
        if ((v15 & 0xFFFFFFF8) != (unint64_t)v15)
        {
          LOWORD(v47) = v50.i16[7];
          LOWORD(v46) = v50.i16[6];
          v45 = (int16x4_t)vextq_s8(v50, v50, 4uLL).u64[0];
          v48 = v15 & 0xFFFFFFF8;
          do
          {
LABEL_16:
            v65 = (int32x4_t)vmovl_u16((uint16x4_t)v45);
            v66 = (unsigned __int16)v46;
            v45 = (int16x4_t)vext_s8((int8x8_t)v45, *(int8x8_t *)v32.i8, 2uLL);
            v45.i16[3] = v46;
            v67 = v48;
            v68 = v48 + 1;
            v69 = (unsigned __int16)v47;
            LOWORD(v46) = v47;
            v47 = v42[1].u16[v67 + 2];
            v70 = (int)(vaddvq_s32(vmulq_s32(v65, v32)) + v66 * v29 + result + v47 * v31 + v69 * v30) >> v26;
            if (v70 >= v28)
              v71 = v28;
            else
              v71 = v70;
            if (v70 >= 0)
              v72 = v71;
            else
              v72 = 0;
            *(_WORD *)((char *)v43 + v67 * 2) = v72;
            v48 = v68;
          }
          while (v15 != v68);
        }
        v42 = (int16x4_t *)((char *)v42 + 780);
        v43 += 195;
        if (++v25 == v27)
          goto LABEL_24;
      }
      v48 = 0;
      goto LABEL_16;
    }
  }
LABEL_24:
  if (v13 >= 1 && (int)v15 >= 1)
  {
    v73 = 0;
    v74 = 0;
    v75 = v23 ^ 0xB;
    v76 = 10 - v23;
    v77 = 1 << v76;
    v78 = -1 << (v76 - v22);
    v79 = v15;
    v80 = v78 + v77;
    v81 = 2 * v15;
    v135 = v15 & 0xFFFFFFF8;
    v82 = vdupq_n_s32(v80);
    v83 = vdupq_n_s32(a9);
    v139 = v13;
    result = v81 & 0x1FFFFFFF0;
    v84 = 195;
    v85 = 390;
    v86 = 585;
    v87 = 780;
    v88 = 975;
    v89 = 1170;
    v90 = v137;
    v136 = &v137[v81];
    v91 = vnegq_s32(vdupq_n_s32(v75));
    v140 = v15;
    while (1)
    {
      v92 = &v143[v89 & 0x7FFFFFFF];
      v93 = &v143[v88 & 0x7FFFFFFF];
      v94 = &v143[v87 & 0x7FFFFFFF];
      v95 = &v143[v86 & 0x7FFFFFFF];
      v96 = &v143[v85 & 0x7FFFFFFF];
      v97 = &v143[v84 & 0x7FFFFFFF];
      v98 = &v143[v73 & 0x7FFFFFFF];
      v141 = v74;
      v142 = v73;
      if (v15 < 8)
        break;
      if (&v137[v74 * v138] < (char *)&v11[3] + 6 && &v11[2] < (int16x4_t *)&v136[v74 * v138])
      {
        for (i = 0; i != v79; ++i)
        {
LABEL_36:
          v132 = (int)(v80
                     + v11[2].i16[0] * *((unsigned __int16 *)v98 + i)
                     + v11[2].i16[1] * *((unsigned __int16 *)v97 + i)
                     + v11[2].i16[2] * *((unsigned __int16 *)v96 + i)
                     + v11[2].i16[3] * *((unsigned __int16 *)v95 + i)
                     + v11[3].i16[0] * *((unsigned __int16 *)v94 + i)
                     + v11[3].i16[1] * *((unsigned __int16 *)v93 + i)
                     + v11[3].i16[2] * *((unsigned __int16 *)v92 + i)) >> v75;
          if (v132 >= a9)
            v133 = a9;
          else
            v133 = (int)(v80
                       + v11[2].i16[0] * *((unsigned __int16 *)v98 + i)
                       + v11[2].i16[1] * *((unsigned __int16 *)v97 + i)
                       + v11[2].i16[2] * *((unsigned __int16 *)v96 + i)
                       + v11[2].i16[3] * *((unsigned __int16 *)v95 + i)
                       + v11[3].i16[0] * *((unsigned __int16 *)v94 + i)
                       + v11[3].i16[1] * *((unsigned __int16 *)v93 + i)
                       + v11[3].i16[2] * *((unsigned __int16 *)v92 + i)) >> v75;
          if (v132 >= 0)
            v134 = v133;
          else
            v134 = 0;
          *(_WORD *)&v90[2 * i] = v134;
        }
        goto LABEL_27;
      }
      v100 = 0;
      v101 = (const __int16 *)&v11[2];
      v102 = vld1_dup_s16(v101);
      v103 = (const __int16 *)&v11[2] + 1;
      v104 = vld1_dup_s16(v103);
      v105 = (const __int16 *)&v11[2] + 2;
      v106 = vld1_dup_s16(v105);
      v107 = (const __int16 *)&v11[2] + 3;
      v108 = vld1_dup_s16(v107);
      v109 = (const __int16 *)&v11[3];
      v110 = vld1_dup_s16(v109);
      v111 = (const __int16 *)&v11[3] + 1;
      v112 = vld1_dup_s16(v111);
      v113 = (const __int16 *)&v11[3] + 2;
      v114 = vld1_dup_s16(v113);
      v115 = vmovl_s16(v102);
      v116 = vmovl_s16(v104);
      v117 = vmovl_s16(v106);
      v118 = vmovl_s16(v108);
      v119 = vmovl_s16(v110);
      v120 = vmovl_s16(v112);
      v121 = vmovl_s16(v114);
      do
      {
        v122 = *(uint16x8_t *)&v98[v100 / 4];
        v123 = *(uint16x8_t *)&v97[v100 / 4];
        v124 = *(uint16x8_t *)&v96[v100 / 4];
        v125 = *(uint16x8_t *)&v95[v100 / 4];
        v126 = *(uint16x8_t *)&v94[v100 / 4];
        v127 = *(uint16x8_t *)&v93[v100 / 4];
        v128 = *(uint16x8_t *)&v92[v100 / 4];
        v129 = vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v82, v115, (int32x4_t)vmovl_high_u16(v122)), v116, (int32x4_t)vmovl_high_u16(v123)), v117, (int32x4_t)vmovl_high_u16(v124)), v118, (int32x4_t)vmovl_high_u16(v125)), v119, (int32x4_t)vmovl_high_u16(v126)), v120, (int32x4_t)vmovl_high_u16(v127)), v121, (int32x4_t)vmovl_high_u16(v128));
        v130 = vshlq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v82, v115, (int32x4_t)vmovl_u16(*(uint16x4_t *)v122.i8)), v116, (int32x4_t)vmovl_u16(*(uint16x4_t *)v123.i8)), v117, (int32x4_t)vmovl_u16(*(uint16x4_t *)v124.i8)), v118, (int32x4_t)vmovl_u16(*(uint16x4_t *)v125.i8)), v119, (int32x4_t)vmovl_u16(*(uint16x4_t *)v126.i8)), v120, (int32x4_t)vmovl_u16(*(uint16x4_t *)v127.i8)), v121, (int32x4_t)vmovl_u16(*(uint16x4_t *)v128.i8)),
                 v91);
        v131 = vshlq_s32(v129, v91);
        *(int8x16_t *)&v90[v100] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v130, v83), (int16x8_t)vminq_s32(v131, v83)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v130), (int16x8_t)vcltzq_s32(v131)));
        v100 += 16;
      }
      while (result != v100);
      i = v135;
      if (v135 != v79)
        goto LABEL_36;
LABEL_27:
      v74 = v141 + 1;
      v73 = v142 + 195;
      v84 += 195;
      v85 += 195;
      v86 += 195;
      v87 += 195;
      v88 += 195;
      v89 += 195;
      v90 += 2 * (v138 >> 1);
      v15 = v140;
      if (v141 + 1 == v139)
        return result;
    }
    i = 0;
    goto LABEL_36;
  }
  return result;
}

uint64_t sgr_5x5_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t result;
  uint64_t v23;
  unsigned int v24;
  int32x4_t v25;
  int32x4_t v26;
  uint64_t *v27;
  uint64_t i;
  uint64_t v29;
  int32x4_t v30;
  int32x4_t v31;
  uint16x8_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  _WORD v40[27300];
  uint64_t v41;

  v9 = (char *)MEMORY[0x1E0C80A78](a1, a2);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = v9;
  v41 = *MEMORY[0x1E0C80C00];
  padding(v40, v9, v16, v19, v20, v14, v12, v21);
  result = selfguided_filter();
  if (v13 >= 1 && v15 >= 1)
  {
    v23 = 0;
    v24 = *(__int16 *)(v11 + 8);
    v25 = vdupq_n_s32(v24);
    v26 = vdupq_n_s32(a9);
    v27 = &v39;
    while (v15 >= 8)
    {
      v29 = 0;
      result = (uint64_t)v27;
      do
      {
        v30 = *(int32x4_t *)result;
        v31 = *(int32x4_t *)(result + 16);
        result += 32;
        v32 = *(uint16x8_t *)&v18[v29];
        v33.i64[0] = 0x40000000400;
        v33.i64[1] = 0x40000000400;
        v34 = vmlaq_s32(v33, v30, v25);
        v30.i64[0] = 0x40000000400;
        v30.i64[1] = 0x40000000400;
        v35 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vmlaq_s32(v30, v31, v25), 0xBuLL), v32);
        v36 = vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v32.i8), v34, 0xBuLL);
        *(int8x16_t *)&v18[v29] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v36, v26), (int16x8_t)vminq_s32(v35, v26)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v36), (int16x8_t)vcltzq_s32(v35)));
        v29 += 16;
      }
      while (((2 * v15) & 0x1FFFFFFF0) != v29);
      i = v15 & 0xFFFFFFF8;
      if (i != v15)
        goto LABEL_10;
LABEL_4:
      ++v23;
      v27 += 192;
      v18 += 2 * (v17 >> 1);
      if (v23 == v13)
        return result;
    }
    for (i = 0; i != v15; *(_WORD *)&v18[2 * i++] = result)
    {
LABEL_10:
      v37 = *(unsigned __int16 *)&v18[2 * i] + ((int)(*((_DWORD *)v27 + i) * v24 + 1024) >> 11);
      if (v37 >= a9)
        v38 = a9;
      else
        v38 = *(unsigned __int16 *)&v18[2 * i] + ((int)(*((_DWORD *)v27 + i) * v24 + 1024) >> 11);
      if (v37 >= 0)
        result = v38;
      else
        result = 0;
    }
    goto LABEL_4;
  }
  return result;
}

uint64_t sgr_3x3_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t result;
  uint64_t v23;
  unsigned int v24;
  int32x4_t v25;
  int32x4_t v26;
  uint64_t *v27;
  uint64_t i;
  uint64_t v29;
  int32x4_t v30;
  int32x4_t v31;
  uint16x8_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  _WORD v40[27300];
  uint64_t v41;

  v9 = (char *)MEMORY[0x1E0C80A78](a1, a2);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = v9;
  v41 = *MEMORY[0x1E0C80C00];
  padding(v40, v9, v16, v19, v20, v14, v12, v21);
  result = selfguided_filter();
  if (v13 >= 1 && v15 >= 1)
  {
    v23 = 0;
    v24 = *(__int16 *)(v11 + 10);
    v25 = vdupq_n_s32(v24);
    v26 = vdupq_n_s32(a9);
    v27 = &v39;
    while (v15 >= 8)
    {
      v29 = 0;
      result = (uint64_t)v27;
      do
      {
        v30 = *(int32x4_t *)result;
        v31 = *(int32x4_t *)(result + 16);
        result += 32;
        v32 = *(uint16x8_t *)&v18[v29];
        v33.i64[0] = 0x40000000400;
        v33.i64[1] = 0x40000000400;
        v34 = vmlaq_s32(v33, v30, v25);
        v30.i64[0] = 0x40000000400;
        v30.i64[1] = 0x40000000400;
        v35 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vmlaq_s32(v30, v31, v25), 0xBuLL), v32);
        v36 = vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v32.i8), v34, 0xBuLL);
        *(int8x16_t *)&v18[v29] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v36, v26), (int16x8_t)vminq_s32(v35, v26)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v36), (int16x8_t)vcltzq_s32(v35)));
        v29 += 16;
      }
      while (((2 * v15) & 0x1FFFFFFF0) != v29);
      i = v15 & 0xFFFFFFF8;
      if (i != v15)
        goto LABEL_10;
LABEL_4:
      ++v23;
      v27 += 192;
      v18 += 2 * (v17 >> 1);
      if (v23 == v13)
        return result;
    }
    for (i = 0; i != v15; *(_WORD *)&v18[2 * i++] = result)
    {
LABEL_10:
      v37 = *(unsigned __int16 *)&v18[2 * i] + ((int)(*((_DWORD *)v27 + i) * v24 + 1024) >> 11);
      if (v37 >= a9)
        v38 = a9;
      else
        v38 = *(unsigned __int16 *)&v18[2 * i] + ((int)(*((_DWORD *)v27 + i) * v24 + 1024) >> 11);
      if (v37 >= 0)
        result = v38;
      else
        result = 0;
    }
    goto LABEL_4;
  }
  return result;
}

uint64_t sgr_mix_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t result;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t *v29;
  int32x4_t *v30;
  int32x4_t v31;
  uint64_t v32;
  int32x4_t *v33;
  int32x4_t *v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  uint16x8_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49[27300];
  uint64_t v50;

  v9 = (char *)MEMORY[0x1E0C80A78](a1, a2);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = v9;
  v50 = *MEMORY[0x1E0C80C00];
  padding(v49, v9, v16, v19, v20, v14, v12, v21);
  selfguided_filter();
  result = selfguided_filter();
  if (v13 >= 1 && v15 >= 1)
  {
    v23 = 0;
    v24 = *(__int16 *)(v11 + 8);
    v25 = *(__int16 *)(v11 + 10);
    v26 = vdupq_n_s32(v24);
    v27 = vdupq_n_s32(v25);
    v28 = vdupq_n_s32(a9);
    v29 = (int32x4_t *)&v47;
    v30 = (int32x4_t *)&v48;
    v31.i64[0] = 0x40000000400;
    v31.i64[1] = 0x40000000400;
    while (v15 >= 8)
    {
      v32 = 0;
      v33 = v30;
      v34 = v29;
      do
      {
        v36 = *v33;
        v35 = v33[1];
        v33 += 2;
        v38 = *v34;
        v37 = v34[1];
        v34 += 2;
        v39 = *(uint16x8_t *)&v18[v32];
        v40 = vmlaq_s32(vmulq_s32(v37, v27), v35, v26);
        v41 = vaddq_s32(vmlaq_s32(vmulq_s32(v38, v27), v36, v26), v31);
        v42 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(v40, v31), 0xBuLL), v39);
        v43 = vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v39.i8), v41, 0xBuLL);
        *(int8x16_t *)&v18[v32] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v43, v28), (int16x8_t)vminq_s32(v42, v28)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v43), (int16x8_t)vcltzq_s32(v42)));
        v32 += 16;
      }
      while (((2 * v15) & 0x1FFFFFFF0) != v32);
      result = v15 & 0xFFFFFFF8;
      if (result != v15)
        goto LABEL_10;
LABEL_4:
      ++v23;
      v29 += 96;
      v30 += 96;
      v18 += 2 * (v17 >> 1);
      if (v23 == v13)
        return result;
    }
    for (result = 0; result != v15; *(_WORD *)&v18[2 * result++] = v46)
    {
LABEL_10:
      v44 = *(unsigned __int16 *)&v18[2 * result]
          + ((int)(v29->i32[result] * v25 + v30->i32[result] * v24 + 1024) >> 11);
      if (v44 >= a9)
        LOWORD(v45) = a9;
      else
        v45 = *(unsigned __int16 *)&v18[2 * result]
            + ((int)(v29->i32[result] * v25 + v30->i32[result] * v24 + 1024) >> 11);
      if (v44 >= 0)
        v46 = v45;
      else
        v46 = 0;
    }
    goto LABEL_4;
  }
  return result;
}

void *padding(_WORD *a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  char *v9;
  _WORD *v10;
  int v11;
  int v12;
  _WORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  size_t v18;
  size_t v19;
  int v20;
  int v21;
  int v22;
  _WORD *v23;
  int v24;
  char *v25;
  _WORD *v26;
  int v27;
  size_t v28;
  _WORD *v29;
  _WORD *v30;
  void *result;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  char *v36;
  size_t v37;
  char *v38;
  char *v39;
  int v40;
  size_t v41;
  char *v42;
  int v43;
  __int16 *v44;
  __int16 *v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  _WORD *v50;
  uint64_t v51;
  int *v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v59;
  int v61;

  v9 = a2;
  v10 = a1;
  v11 = a8 & 1;
  v12 = 3 * (v11 + ((a8 & 2) >> 1)) + a6;
  v13 = &a1[!(a8 & 1) | (2 * !(a8 & 1))];
  v14 = 2 * (v11 | (2 * v11));
  v15 = &a2[-v14];
  v16 = (char *)(a5 - v14);
  v59 = v11;
  v56 = a8 & 2;
  v61 = v12;
  v55 = v11 | (2 * v11);
  if ((a8 & 4) == 0)
  {
    v17 = 2 * v12;
    v18 = 2 * v12;
    memcpy(&a1[!(a8 & 1) | (2 * !(a8 & 1))], v15, v17);
    memcpy(v13 + 390, v15, v18);
    v19 = v18;
    v12 = v61;
    memcpy(v13 + 780, v15, v19);
    if (v11)
    {
      v20 = *(_DWORD *)(a4 + 2);
      v13[2] = *(_WORD *)(a4 + 6);
      *(_DWORD *)v13 = v20;
      v21 = *(_DWORD *)(a4 + 2);
      v13[392] = *(_WORD *)(a4 + 6);
      *((_DWORD *)v13 + 195) = v21;
      v22 = *(_DWORD *)(a4 + 2);
      v13[782] = *(_WORD *)(a4 + 6);
      *((_DWORD *)v13 + 390) = v22;
    }
    v23 = v13 + 1170;
    if ((a8 & 8) == 0)
      goto LABEL_5;
LABEL_8:
    v38 = &v16[12 * (a3 >> 1)];
    v39 = &v38[a3];
    v24 = a7;
    v40 = 2 * v12;
    v41 = 2 * v12;
    memcpy(&v23[390 * a7], v38, v40);
    memcpy(&v23[390 * a7 + 390], v39, v41);
    result = memcpy(&v23[390 * a7 + 780], v39, v41);
    goto LABEL_9;
  }
  v36 = &v16[a3];
  v37 = 2 * v12;
  memcpy(&a1[!(a8 & 1) | (2 * !(a8 & 1))], v16, v37);
  memcpy(v13 + 390, v16, v37);
  memcpy(v13 + 780, v36, v37);
  v23 = v13 + 1170;
  if ((a8 & 8) != 0)
    goto LABEL_8;
LABEL_5:
  v24 = a7;
  v54 = a7 - 1;
  v25 = &v15[2 * (a3 >> 1) * v54];
  v26 = &v23[390 * a7];
  v27 = 2 * v12;
  v28 = 2 * v12;
  memcpy(v26, v25, v27);
  v29 = &v23[390 * a7 + 390];
  memcpy(v29, v25, v28);
  v30 = &v23[390 * a7 + 780];
  result = memcpy(v30, v25, v28);
  if (v59)
  {
    v32 = a4 + 8 * v54;
    v33 = *(_DWORD *)(v32 + 2);
    v26[2] = *(_WORD *)(v32 + 6);
    *(_DWORD *)v26 = v33;
    v34 = *(_DWORD *)(v32 + 2);
    v29[2] = *(_WORD *)(v32 + 6);
    *(_DWORD *)v29 = v34;
    v35 = *(_DWORD *)(v32 + 2);
    v30[2] = *(_WORD *)(v32 + 6);
    *(_DWORD *)v30 = v35;
  }
LABEL_9:
  if (v24 >= 1)
  {
    v42 = (char *)&v10[3 * (a8 & 1) + 1170 + 3 * (((_BYTE)a8 + 1) & 1)];
    v43 = v24;
    do
    {
      result = memcpy(v42, v9, 2 * (v61 - v55));
      v9 += a3 & 0xFFFFFFFFFFFFFFFELL;
      v42 += 780;
      --v43;
    }
    while (v43);
  }
  if (v24 >= -5 && !v56)
  {
    v44 = &v13[v61];
    v45 = v44 - 1;
    v46 = ((v24 + 5) & ~((v24 + 5) >> 31)) + 1;
    do
    {
      v47 = *v45;
      *v44 = *v45;
      v44[1] = v47;
      v44[2] = v47;
      v45 += 390;
      v44 += 390;
      --v46;
    }
    while (v46);
  }
  if (v59)
  {
    if (v24 >= 1)
    {
      v50 = v10 + 1170;
      v51 = v24;
      v52 = (int *)(a4 + 2);
      do
      {
        v53 = *v52;
        v50[2] = *((_WORD *)v52 + 2);
        *(_DWORD *)v50 = v53;
        v50 += 390;
        v52 += 2;
        --v51;
      }
      while (v51);
    }
  }
  else if (v24 >= -5)
  {
    v48 = ((v24 + 5) & ~((v24 + 5) >> 31)) + 1;
    do
    {
      v49 = *(_WORD *)((char *)v10 + ((2 * ((a8 + 1) & 1)) & 0xFFFFFFFFFFFFFFFBLL | (4 * ((a8 + 1) & 1))));
      *v10 = v49;
      v10[1] = v49;
      v10[2] = v49;
      v10 += 390;
      --v48;
    }
    while (v48);
  }
  return result;
}

uint64_t selfguided_filter()
{
  uint64_t result;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  int32x4_t v7;
  int32x4_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned __int16 *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t *v30;
  uint64_t *v31;
  unsigned __int16 *v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  _BYTE *v40;
  _BYTE *v41;
  int32x4_t v42;
  int32x4_t v43;
  uint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  unint64_t v50;
  uint64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  _BYTE *v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  _BYTE *v63;
  __int32 v64;
  _BYTE *v65;
  __int32 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unsigned __int16 *v72;
  char *v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  unsigned __int16 *v77;
  int v78;
  int v79;
  int v80;
  int v81;
  _DWORD *v82;
  unsigned __int16 *v83;
  _DWORD *v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unsigned __int16 *v92;
  _DWORD *v93;
  _DWORD *v94;
  int v95;
  int v96;
  int v97;
  _OWORD *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  _BYTE *v103;
  _BYTE *v104;
  int32x2_t v105;
  int32x2_t v106;
  uint64_t v107;
  int8x16_t v108;
  unint64_t v109;
  uint64_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int32x4_t v114;
  int32x4_t v115;
  uint64_t v116;
  _BYTE *v117;
  _BYTE *v118;
  uint64_t v119;
  _BYTE *v120;
  __int32 v121;
  _BYTE *v122;
  __int32 v123;
  int i;
  char v125;
  uint64_t *v126;
  uint64_t v127;
  unsigned int *v128;
  int v129;
  unsigned int *v130;
  int *v131;
  uint64_t v132;
  int v133;
  int v134;
  unsigned int v135;
  int v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  _BYTE *v140;
  _QWORD *v141;
  _BYTE *v142;
  uint64_t *v143;
  _OWORD *v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  _BYTE *v155;
  uint64_t v156;
  __int32 v157;
  __int32 v158;
  uint64_t v159;
  unint64_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int8x16_t *v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int8x16_t *v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  uint16x8_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t *v178;
  uint64_t v179;
  _BYTE *v180;
  _BYTE *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  unsigned __int32 v185;
  uint64_t v186;
  _BYTE *v187;
  _BYTE *v188;
  int32x4_t v189;
  int32x4_t v190;
  uint16x8_t *v191;
  uint64_t v192;
  uint64_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  uint16x8_t v200;
  int32x4_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  unsigned int v205;
  int v206;
  uint64_t v207;
  unsigned int v208;
  unsigned int v209;
  uint64_t v210;
  _BYTE *v211;
  _BYTE *v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int8x16_t *v235;
  int32x4_t v236;
  int32x4_t v237;
  int8x16_t *v238;
  int32x4_t v239;
  int32x4_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int32x4_t v245;
  int32x4_t v246;
  int32x4_t v247;
  int8x16_t *v248;
  int32x4_t v249;
  int32x4_t v250;
  int32x4_t v251;
  int8x16_t *v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  uint16x8_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t *v259;
  uint64_t v260;
  _BYTE *v261;
  _BYTE *v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int v265;
  unsigned int v266;
  int v267;
  uint64_t v268;
  unsigned int v269;
  int v270;
  int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  uint64_t v282;
  uint64_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int32x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  uint16x8_t *v293;
  int8x16_t *v294;
  int32x4_t v295;
  int8x16_t *v296;
  int32x4_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int8x16_t *v300;
  int32x4_t v301;
  int8x16_t *v302;
  int32x4_t v303;
  uint16x8_t v304;
  int32x4_t v305;
  int32x4_t v306;
  int32x4_t *v307;
  int *v308;
  unsigned __int16 *v309;
  uint64_t v310;
  _DWORD *v311;
  _DWORD *v312;
  uint64_t v313;
  int v314;
  unsigned int v315;
  int v316;
  uint64_t v317;
  int v318;
  unsigned int v319;
  unsigned int v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  int v327;
  int v328;
  int v329;
  unsigned int v330;
  uint64_t v331;
  _BYTE *v332;
  _BYTE *v333;
  _BYTE *v334;
  _BYTE v335[1560];
  uint64_t v336;
  uint64_t v337;
  _DWORD v338[391];
  uint64_t v339;
  _BYTE v340[1560];
  uint64_t v341;
  uint64_t v342;
  _DWORD v343[391];
  _QWORD v344[12675];

  result = MEMORY[0x1E0C80A78]();
  v344[12673] = *MEMORY[0x1E0C80C00];
  v9 = v1 + 2346;
  v10 = v343;
  v11 = v338;
  if (v4 == 25)
    v12 = 164;
  else
    v12 = 455;
  if (v4 == 25)
    v13 = 2;
  else
    v13 = 1;
  v328 = v13;
  v327 = v2;
  v326 = v3;
  if (v4 != 25)
  {
    if (v2 < -3)
      goto LABEL_51;
    if (v3 < -1)
      return result;
    v324 = v1 + 780;
    v67 = (v2 + 5);
    v318 = v3 + 4;
    v320 = v6;
    v68 = (v3 + 1);
    v69 = (v68 + 1) & 0x1FFFFFFFELL;
    v322 = v1 + 2346;
    v70 = 1560 * v69;
    v71 = (char *)&v336 + 4;
    v317 = v1;
    v72 = (unsigned __int16 *)(v1 + 2342);
    v73 = (char *)&v341 + 4;
    v323 = v3 + 4;
    v74 = 1;
    while (1)
    {
      v75 = &v335[4 * v74];
      v76 = &v340[4 * v74];
      v77 = (unsigned __int16 *)(v324 + 2 * v74);
      v78 = *v77;
      v79 = v78 * v78;
      v80 = v77[390];
      v81 = v80 * v80;
      if ((_DWORD)v68)
      {
        v77 += 390 * v69;
        v76 += v70;
        v75 += v70;
        v82 = v73;
        v83 = v72;
        v84 = v71;
        v85 = (v68 + 1) & 0x1FFFFFFFELL;
        do
        {
          v86 = v78;
          v87 = v79;
          v78 = *v83;
          v88 = v80 + v78;
          v80 = v83[390];
          v79 = v78 * v78;
          v89 = v81 + v78 * v78;
          v81 = v80 * v80;
          *v84 = v88 + v86;
          v84[390] = v88 + v80;
          *v82 = v89 + v87;
          v82[390] = v89 + v80 * v80;
          v84 += 780;
          v83 += 780;
          v82 += 780;
          v85 -= 2;
        }
        while (v85);
        v90 = v69 + 2;
        if (v68 + 1 == v69)
          goto LABEL_27;
      }
      else
      {
        v90 = 2;
      }
      v91 = v323 - v90;
      v92 = v77 + 780;
      v93 = v76 + 1560;
      v94 = v75 + 1560;
      do
      {
        v95 = v78 + v80;
        v78 = v80;
        v80 = *v92;
        v96 = v79 + v81;
        v79 = v81;
        v81 = v80 * v80;
        *v94 = v95 + v80;
        *v93 = v96 + v80 * v80;
        v92 += 390;
        v93 += 390;
        v94 += 390;
        --v91;
      }
      while (v91);
LABEL_27:
      ++v74;
      v71 += 4;
      ++v72;
      v73 += 4;
      if (v74 == v67)
      {
        v2 = v327;
        v11 = v338;
        v10 = v343;
        v3 = v326;
        v9 = v322;
        v1 = v317;
        v6 = v320;
        if (v327 < -1)
          goto LABEL_51;
        v99 = (v327 + 4);
        v100 = v99 - 2;
        v101 = (v99 - 2) & 0xFFFFFFFFFFFFFFFCLL;
        v102 = 2;
        v103 = v335;
        v104 = v340;
        while (2)
        {
          v105 = *(int32x2_t *)(v103 + 1564);
          v106 = *(int32x2_t *)(v104 + 1564);
          if (v100 >= 4)
          {
            v7.i64[1] = *(_QWORD *)(v104 + 1564);
            v8.i64[1] = *(_QWORD *)(v103 + 1564);
            v108 = (int8x16_t)vdupq_lane_s32(v106, 0);
            v109 = (v99 - 2) & 0xFFFFFFFFFFFFFFFCLL;
            v110 = 1572;
            v111 = (int8x16_t)vdupq_lane_s32(v105, 0);
            do
            {
              v112 = (int8x16_t)v8;
              v113 = (int8x16_t)v7;
              v8 = *(int32x4_t *)&v103[v110];
              v114 = (int32x4_t)vextq_s8(v112, (int8x16_t)v8, 0xCuLL);
              v7 = *(int32x4_t *)&v104[v110];
              v115 = (int32x4_t)vextq_s8(v113, (int8x16_t)v7, 0xCuLL);
              *(int32x4_t *)&v103[v110 - 4] = vaddq_s32((int32x4_t)vextq_s8(v111, (int8x16_t)v114, 0xCuLL), vaddq_s32(v114, v8));
              *(int32x4_t *)&v104[v110 - 4] = vaddq_s32((int32x4_t)vextq_s8(v108, (int8x16_t)v115, 0xCuLL), vaddq_s32(v115, v7));
              v110 += 16;
              v108 = (int8x16_t)v115;
              v111 = (int8x16_t)v114;
              v109 -= 4;
            }
            while (v109);
            if (v100 != v101)
            {
              v105 = (int32x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
              v106 = (int32x2_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
              v107 = v101 | 2;
              goto LABEL_48;
            }
          }
          else
          {
            v107 = 2;
LABEL_48:
            v116 = 0;
            v117 = &v104[4 * v107];
            v118 = &v103[4 * v107];
            v119 = v99 - v107;
            do
            {
              v120 = &v118[4 * v116];
              v121 = *((_DWORD *)v120 + 391);
              v122 = &v117[4 * v116];
              v123 = *((_DWORD *)v122 + 391);
              *(int32x2_t *)v7.i8 = vdup_lane_s32(v105, 1);
              *((_DWORD *)v120 + 390) = vadd_s32(v105, *(int32x2_t *)v7.i8).u32[0] + v121;
              *(int32x2_t *)v8.i8 = vdup_lane_s32(v106, 1);
              *((_DWORD *)v122 + 390) = vadd_s32(v106, *(int32x2_t *)v8.i8).u32[0] + v123;
              v7.i32[1] = v121;
              v8.i32[1] = v123;
              ++v116;
              v105 = *(int32x2_t *)v7.i8;
              v106 = *(int32x2_t *)v8.i8;
            }
            while (v119 != v116);
          }
          v104 += 1560;
          v103 += 1560;
          if (++v102 == v318)
            goto LABEL_51;
          continue;
        }
      }
    }
  }
  if (v2 >= -5)
  {
    if (v3 <= -2)
    {
      v97 = 1;
      v98 = (_OWORD *)(v1 + 2346);
      if (v2 < 1)
        return result;
      goto LABEL_101;
    }
    v319 = v6;
    v321 = v1 + 2346;
    v14 = 0;
    v15 = (v2 + 6);
    v16 = v1 + 2340;
    v17 = v1;
    v18 = (unsigned __int16 *)(v1 + 3120);
    v19 = &v341;
    v20 = &v336;
    do
    {
      v21 = (unsigned __int16 *)(v16 + 2 * v14);
      v22 = *(v21 - 1170);
      v23 = v22 * v22;
      v24 = *(v21 - 780);
      v25 = v24 * v24;
      v26 = *(v21 - 390);
      v27 = v26 * v26;
      v28 = *v21;
      v29 = v28 * v28;
      v30 = v20;
      v31 = v19;
      v32 = v18;
      v33 = v3 + 2;
      do
      {
        v34 = v24 + v22;
        v22 = v24;
        v24 = v26;
        v35 = v25 + v23;
        v23 = v25;
        v25 = v27;
        v26 = v28;
        v27 = v29;
        v28 = *v32;
        v29 = v28 * v28;
        *(_DWORD *)v30 = v24 + v26 + v34 + v28;
        *(_DWORD *)v31 = v25 + v27 + v35 + v28 * v28;
        v32 += 390;
        v31 += 195;
        v30 += 195;
        --v33;
      }
      while (v33);
      ++v14;
      ++v18;
      v19 = (uint64_t *)((char *)v19 + 4);
      v20 = (uint64_t *)((char *)v20 + 4);
    }
    while (v14 != v15);
    v2 = v327;
    v11 = v338;
    v10 = v343;
    v9 = v321;
    v1 = v17;
    v6 = v319;
    if (v327 >= -1)
    {
      v36 = (v327 + 4);
      v37 = v36 - 2;
      v38 = (v36 - 2) & 0xFFFFFFFFFFFFFFFCLL;
      v39 = 2;
      v40 = v335;
      v41 = v340;
      do
      {
        v42 = *(int32x4_t *)(v40 + 1560);
        v43 = *(int32x4_t *)(v41 + 1560);
        if (v37 >= 4)
        {
          v45 = (int8x16_t)vdupq_laneq_s32(v43, 2);
          v46 = (int8x16_t)vdupq_laneq_s32(v42, 2);
          v47 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v43.i8, 1);
          v48 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v42.i8, 1);
          v49 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v43.i8, 0);
          v50 = (v36 - 2) & 0xFFFFFFFFFFFFFFFCLL;
          v51 = 1576;
          v52 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v42.i8, 0);
          do
          {
            v53 = (int8x16_t)v42;
            v54 = (int8x16_t)v43;
            v42 = *(int32x4_t *)&v40[v51];
            v55 = (int32x4_t)vextq_s8(v53, (int8x16_t)v42, 0xCuLL);
            v56 = (int32x4_t)vextq_s8(v46, (int8x16_t)v55, 0xCuLL);
            v57 = (int32x4_t)vextq_s8(v48, (int8x16_t)v56, 0xCuLL);
            v58 = (int32x4_t)vextq_s8(v52, (int8x16_t)v57, 0xCuLL);
            v59 = &v41[v51];
            v43 = *(int32x4_t *)&v41[v51];
            v60 = (int32x4_t)vextq_s8(v54, (int8x16_t)v43, 0xCuLL);
            v61 = (int32x4_t)vextq_s8(v45, (int8x16_t)v60, 0xCuLL);
            v62 = (int32x4_t)vextq_s8(v47, (int8x16_t)v61, 0xCuLL);
            *(int32x4_t *)&v40[v51 - 8] = vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v56, v55), v57), v58), v42);
            v51 += 16;
            v45 = (int8x16_t)v60;
            v46 = (int8x16_t)v55;
            v47 = (int8x16_t)v61;
            *(int32x4_t *)(v59 - 8) = vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v61, v60), v62), (int32x4_t)vextq_s8(v49, (int8x16_t)v62, 0xCuLL)), v43);
            v48 = (int8x16_t)v56;
            v49 = (int8x16_t)v62;
            v52 = (int8x16_t)v57;
            v50 -= 4;
          }
          while (v50);
          v44 = v38 | 2;
          if (v37 == v38)
            goto LABEL_16;
        }
        else
        {
          v44 = 2;
        }
        do
        {
          v63 = &v40[4 * v44];
          v64 = *((_DWORD *)v63 + 392);
          v65 = &v41[4 * v44];
          v66 = *((_DWORD *)v65 + 392);
          *((_DWORD *)v63 + 390) = vaddvq_s32(v42) + v64;
          *((_DWORD *)v65 + 390) = vaddvq_s32(v43) + v66;
          ++v44;
          v42 = (int32x4_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 4uLL);
          v42.i32[3] = v64;
          v43 = (int32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v42, 4uLL);
          v43.i32[3] = v66;
        }
        while (v36 != v44);
LABEL_16:
        ++v39;
        v41 += 1560;
        v40 += 1560;
      }
      while (v39 != v3 + 4);
    }
  }
LABEL_51:
  if (v3 >= -1)
  {
    if (v2 > -2)
    {
      v125 = 24 - __clz(v6);
      v126 = &v337;
      v127 = 4 * (390 << (v4 == 25));
      v128 = (unsigned int *)&v342;
      v129 = -1;
      do
      {
        v130 = v128;
        v131 = (int *)v126;
        v132 = (v2 + 1) + 1;
        do
        {
          v133 = *v131;
          v134 = ((int)(*v130 + ((1 << (2 * v125)) >> 1)) >> (2 * v125)) * v4
               - ((int)(v133 + ((1 << v125) >> 1)) >> v125)
               * ((int)(v133 + ((1 << v125) >> 1)) >> v125);
          v135 = ((v134 & ~(v134 >> 31)) * v5 + 0x80000) >> 20;
          if (v135 >= 0xFF)
            v135 = 255;
          v136 = dav1d_sgr_x_by_x[v135];
          *v130++ = (v133 * v12 * v136 + 2048) >> 12;
          *v131++ = v136;
          --v132;
        }
        while (v132);
        v129 += v328;
        v126 = (uint64_t *)((char *)v126 + v127);
        v128 = (unsigned int *)((char *)v128 + v127);
      }
      while (v129 <= v3);
    }
    else
    {
      for (i = -1; i <= v3; i += v328)
        ;
    }
  }
  v98 = (_OWORD *)(v1 + 2346);
  if (v4 != 25)
  {
    if (v2 < 1 || v3 < 1)
      return result;
    v206 = 0;
    v207 = v2;
    v208 = v338[0];
    v209 = v343[0];
    v325 = v2 & 0xFFFFFFF8;
    v210 = (4 * v2) & 0x3FFFFFFE0;
    v211 = v340;
    v212 = v335;
    v213.i64[0] = 0x200000002;
    v213.i64[1] = 0x200000002;
    v214.i64[0] = 0x300000003;
    v214.i64[1] = 0x300000003;
    v215.i64[0] = 0x10000000100;
    v215.i64[1] = 0x10000000100;
    while (1)
    {
      v216 = *((_DWORD *)v11 - 390);
      v217 = *((_DWORD *)v11 + 389);
      v218 = *((_DWORD *)v10 - 390);
      v219 = *((_DWORD *)v10 + 389);
      v220 = *((_DWORD *)v11 + 390);
      v221 = *((_DWORD *)v10 + 390);
      v332 = v11;
      v334 = v10;
      v330 = v220;
      v222 = 0;
      if (v2 >= 8)
      {
        v224 = 0;
        v225 = vdupq_n_s32(v221);
        v226 = vdupq_n_s32(v220);
        v227 = vdupq_n_s32(v219);
        v228 = vdupq_n_s32(v218);
        v229 = vdupq_n_s32(v209);
        v230 = vdupq_n_s32(v217);
        v231 = vdupq_n_s32(v216);
        v232 = vdupq_n_s32(v208);
        do
        {
          v233 = *(int32x4_t *)&v212[v224 + 3136];
          v234 = (int32x4_t)vextq_s8((int8x16_t)v232, (int8x16_t)v233, 0xCuLL);
          v232 = *(int32x4_t *)&v212[v224 + 3152];
          v235 = (int8x16_t *)&v212[v224 + 1576];
          v236 = (int32x4_t)vextq_s8((int8x16_t)v231, *v235, 0xCuLL);
          v231 = *(int32x4_t *)&v212[v224 + 1592];
          v237 = vaddq_s32(v234, *(int32x4_t *)&v212[v224 + 3128]);
          v238 = (int8x16_t *)&v212[v224 + 4696];
          v239 = (int32x4_t)vextq_s8((int8x16_t)v226, *v238, 0xCuLL);
          v240 = vuzp2q_s32(v230, v226);
          v241 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v233, (int8x16_t)v232, 0xCuLL), *(int32x4_t *)&v212[v224 + 3144]);
          v226 = *(int32x4_t *)&v212[v224 + 4712];
          v242.i64[0] = vuzp2q_s32(v240, v230).u64[0];
          v230 = (int32x4_t)vextq_s8(*v238, (int8x16_t)v226, 0xCuLL);
          v242.i64[1] = v238->i64[0];
          v243 = vaddq_s32((int32x4_t)vextq_s8(*v235, (int8x16_t)v231, 0xCuLL), v232);
          v244 = vaddq_s32(vaddq_s32(v237, v239), vaddq_s32(v236, v233));
          v245 = vaddq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)&v212[v224 + 1568], *(int32x4_t *)v235), *(int32x4_t *)v238), v242);
          v246 = *(int32x4_t *)&v211[v224 + 3136];
          v247 = (int32x4_t)vextq_s8((int8x16_t)v229, (int8x16_t)v246, 0xCuLL);
          v229 = *(int32x4_t *)&v211[v224 + 3152];
          v248 = (int8x16_t *)&v211[v224 + 1576];
          v249 = (int32x4_t)vextq_s8((int8x16_t)v228, *v248, 0xCuLL);
          v250 = vaddq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)&v212[v224 + 1584], v231), (int32x4_t)vextq_s8(*v238, (int8x16_t)v226, 8uLL)), v226);
          v228 = *(int32x4_t *)&v211[v224 + 1592];
          v251 = vaddq_s32(vaddq_s32(v241, v230), v243);
          v252 = (int8x16_t *)&v211[v224 + 4696];
          v253 = (int32x4_t)vextq_s8((int8x16_t)v225, *v252, 0xCuLL);
          v254.i64[0] = vuzp2q_s32(vuzp2q_s32(v227, v225), v227).u64[0];
          v225 = *(int32x4_t *)&v211[v224 + 4712];
          v255 = (int32x4_t)vextq_s8(*v252, (int8x16_t)v225, 0xCuLL);
          v254.i64[1] = v252->i64[0];
          v256 = *(uint16x8_t *)((char *)v98 + v222);
          v257 = vmlaq_s32(vmlaq_s32(vshlq_n_s32(vaddq_s32(vaddq_s32(vaddq_s32(v247, *(int32x4_t *)&v211[v224 + 3128]), v253), vaddq_s32(v249, v246)), 2uLL), vaddq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)&v211[v224 + 1568], *(int32x4_t *)v248), *(int32x4_t *)v252), v254), v214), vmlaq_s32(vnegq_s32(vshlq_n_s32(v244, 2uLL)), v245, v213), (int32x4_t)vmovl_u16(*(uint16x4_t *)v256.i8));
          v258 = vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vshlq_n_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v246, (int8x16_t)v229, 0xCuLL), *(int32x4_t *)&v211[v224 + 3144]), v255), vaddq_s32((int32x4_t)vextq_s8(*v248, (int8x16_t)v228, 0xCuLL), v229)), 2uLL), vaddq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)&v211[v224 + 1584], v228), (int32x4_t)vextq_s8(*v252, (int8x16_t)v225, 8uLL)), v225), v214), vmlaq_s32(vnegq_s32(vshlq_n_s32(v251, 2uLL)), v250, v213),
                       (int32x4_t)vmovl_high_u16(v256)),
                     v215),
                   9uLL);
          v259 = (int32x4_t *)(result + v224);
          v224 += 32;
          *v259 = vshrq_n_s32(vaddq_s32(v257, v215), 9uLL);
          v259[1] = v258;
          v222 += 16;
          v227 = v255;
        }
        while (v210 != v224);
        if (v325 == v207)
          goto LABEL_87;
        v223 = v225.u32[3];
        v220 = v226.u32[3];
        v219 = v225.u32[2];
        v218 = v228.u32[3];
        v209 = v229.u32[3];
        v217 = v226.u32[2];
        v216 = v231.u32[3];
        v222 = v325;
        v208 = v232.u32[3];
      }
      else
      {
        v223 = *((_DWORD *)v10 + 390);
      }
      v260 = 4 * v222;
      v261 = v211;
      v262 = v212;
      v263 = result;
      v264 = v222;
      do
      {
        v265 = *(_DWORD *)&v262[v260 + 1568] + v217;
        v266 = *(_DWORD *)&v261[v260 + 1568] + v219;
        v267 = *((unsigned __int16 *)v98 + v264);
        v268 = v264 + 1;
        v269 = v208 + v216;
        v208 = *(_DWORD *)&v262[v260 + 3136];
        v270 = v269 + *(_DWORD *)&v262[v260 + 3128] + v208 + v220;
        v216 = *(_DWORD *)&v262[v260 + 1576];
        v217 = v220;
        v220 = *(_DWORD *)&v262[v260 + 4696];
        v271 = -3 * (v265 + v216 + v220) - 4 * v270;
        v272 = *(_DWORD *)&v261[v260 + 3136];
        v273 = v209 + v218 + *(_DWORD *)&v261[v260 + 3128] + v272 + v223;
        v218 = *(_DWORD *)&v261[v260 + 1576];
        v219 = v223;
        v223 = *(_DWORD *)&v261[v260 + 4696];
        *(_DWORD *)(v263 + 4 * v222) = (int)(3 * (v266 + v218 + v223) + 4 * v273 + v271 * v267 + 256) >> 9;
        v263 += 4;
        v262 += 4;
        v261 += 4;
        v209 = v272;
        v264 = v268;
      }
      while (v207 != v268);
LABEL_87:
      v11 = v332 + 1560;
      v10 = v334 + 1560;
      result += 1536;
      v98 = (_OWORD *)((char *)v98 + 780);
      ++v206;
      v211 += 1560;
      v212 += 1560;
      v209 = v221;
      v208 = v330;
      v2 = v327;
      if (v206 == v326)
        return result;
    }
  }
  v329 = v3 - 1;
  if (v3 <= 1)
  {
    v97 = 1;
    if (v2 < 1)
      return result;
  }
  else
  {
    if (v2 >= 1)
    {
      v137 = 0;
      v138 = v2;
      v331 = v2 & 0xFFFFFFF8;
      v139 = (4 * v2) & 0x3FFFFFFE0;
      v140 = v340;
      v141 = v344;
      v142 = v335;
      v143 = &v339;
      v144 = (_OWORD *)(v9 + 780);
      v145.i64[0] = 0x500000005;
      v145.i64[1] = 0x500000005;
      v146.i64[0] = 0x400000004;
      v146.i64[1] = 0x400000004;
      v147.i64[0] = 0x600000006;
      v147.i64[1] = 0x600000006;
      v148.i64[0] = 0x500000005;
      v148.i64[1] = 0x500000005;
      v149.i64[0] = 0x8000000080;
      v149.i64[1] = 0x8000000080;
      v150.i64[0] = 0x10000000100;
      v150.i64[1] = 0x10000000100;
      while (1)
      {
        v151 = *((_DWORD *)v11 - 390);
        v152 = *((_DWORD *)v11 + 390);
        v153 = *((_DWORD *)v10 - 390);
        v154 = *((_DWORD *)v10 + 390);
        v333 = v10;
        v155 = v11;
        if (v2 < 8)
          break;
        v159 = 0;
        v160 = 0;
        v161 = vdupq_n_s32(v154);
        v162 = vdupq_n_s32(v153);
        v163 = vdupq_n_s32(v152);
        v164 = vdupq_n_s32(v151);
        do
        {
          v165 = (int8x16_t *)&v142[v160 + 1576];
          v166 = (int32x4_t)vextq_s8((int8x16_t)v164, *v165, 0xCuLL);
          v164 = *(int32x4_t *)&v142[v160 + 1592];
          v167 = *(int32x4_t *)&v143[v160 / 8];
          v168 = (int32x4_t)vextq_s8((int8x16_t)v163, (int8x16_t)v167, 0xCuLL);
          v163 = *(int32x4_t *)&v143[v160 / 8 + 2];
          v169 = vmlaq_s32(vmulq_s32(vaddq_s32(v166, v168), v145), vaddq_s32(vaddq_s32(*(int32x4_t *)&v143[v160 / 8 - 1], *(int32x4_t *)&v142[v160 + 1568]), vaddq_s32(*(int32x4_t *)v165, v167)), v146);
          v170 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vextq_s8(*v165, (int8x16_t)v164, 0xCuLL), (int32x4_t)vextq_s8((int8x16_t)v167, (int8x16_t)v163, 0xCuLL)), v145), vaddq_s32(vaddq_s32(*(int32x4_t *)&v143[v160 / 8 + 1], *(int32x4_t *)&v142[v160 + 1584]), vaddq_s32(v164, v163)), v146);
          v171 = (int8x16_t *)&v140[v160 + 1576];
          v172 = (int32x4_t)vextq_s8((int8x16_t)v162, *v171, 0xCuLL);
          v162 = *(int32x4_t *)&v140[v160 + 1592];
          v173 = *(int32x4_t *)&v141[v160 / 8];
          v174 = (int32x4_t)vextq_s8((int8x16_t)v161, (int8x16_t)v173, 0xCuLL);
          v161 = *(int32x4_t *)&v141[v160 / 8 + 2];
          v175 = (uint16x8_t)v98[v159];
          v176 = vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)&v141[v160 / 8 - 1], *(int32x4_t *)&v140[v160 + 1568]), vaddq_s32(*(int32x4_t *)v171, v173)), v148), vaddq_s32(v172, v174), v147), v169, (int32x4_t)vmovl_u16(*(uint16x4_t *)v175.i8)), v150), 9uLL);
          v177 = vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)&v141[v160 / 8 + 1], *(int32x4_t *)&v140[v160 + 1584]), vaddq_s32(v162, v161)), v148), vaddq_s32((int32x4_t)vextq_s8(*v171, (int8x16_t)v162, 0xCuLL), (int32x4_t)vextq_s8((int8x16_t)v173, (int8x16_t)v161, 0xCuLL)), v147), v170, (int32x4_t)vmovl_high_u16(v175)), v150), 9uLL);
          v178 = (int32x4_t *)(result + v160);
          *v178 = v176;
          v178[1] = v177;
          v160 += 32;
          ++v159;
        }
        while (v139 != v160);
        if (v331 != v138)
        {
          v157 = v161.i32[3];
          v153 = v162.u32[3];
          v158 = v163.i32[3];
          v156 = v331;
          v151 = v164.u32[3];
LABEL_73:
          v179 = 4 * v156;
          v180 = v140;
          v181 = v142;
          v182 = result;
          v183 = v156;
          do
          {
            v184 = -6 * (v151 + v158);
            v151 = *(_DWORD *)&v181[v179 + 1576];
            v158 = *(_DWORD *)&v181[v179 + 4696];
            v185 = v153 + v157;
            v153 = *(_DWORD *)&v180[v179 + 1576];
            v157 = *(_DWORD *)&v180[v179 + 4696];
            *(_DWORD *)(v182 + 4 * v156) = (int)(5
                                               * (*(_DWORD *)&v180[v179 + 4688]
                                                + *(_DWORD *)&v180[v179 + 1568]
                                                + v153
                                                + v157)
                                               + 6 * v185
                                               + (v184
                                                - 5
                                                * (*(_DWORD *)&v181[v179 + 4688]
                                                 + *(_DWORD *)&v181[v179 + 1568]
                                                 + v151
                                                 + v158))
                                               * *((unsigned __int16 *)v98 + v183)
                                               + 256) >> 9;
            v182 += 4;
            v181 += 4;
            v180 += 4;
            ++v183;
          }
          while (v138 != v183);
        }
        v2 = v327;
        if (v327 >= 8)
        {
          v189 = vdupq_n_s32(v154);
          v190 = vdupq_n_s32(v152);
          v191 = (uint16x8_t *)v144;
          v192 = 4688;
          v193 = v331;
          v188 = v333;
          v187 = v155;
          v3 = v326;
          do
          {
            v194 = *(int32x4_t *)&v142[v192 + 8];
            v195 = (int32x4_t)vextq_s8((int8x16_t)v190, (int8x16_t)v194, 0xCuLL);
            v190 = *(int32x4_t *)&v142[v192 + 24];
            v196 = vmlaq_s32(vmulq_s32((int32x4_t)vextq_s8((int8x16_t)v194, (int8x16_t)v190, 0xCuLL), v145), vaddq_s32(v190, *(int32x4_t *)&v142[v192 + 16]), v146);
            v197 = vmlaq_s32(vmulq_s32(v195, v145), vaddq_s32(v194, *(int32x4_t *)&v142[v192]), v146);
            v198 = *(int32x4_t *)&v140[v192 + 8];
            v199 = (int32x4_t)vextq_s8((int8x16_t)v189, (int8x16_t)v198, 0xCuLL);
            v189 = *(int32x4_t *)&v140[v192 + 24];
            v200 = *v191++;
            v201 = vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v189, *(int32x4_t *)&v140[v192 + 16]), v148), (int32x4_t)vextq_s8((int8x16_t)v198, (int8x16_t)v189, 0xCuLL), v147), v196, (int32x4_t)vmovl_high_u16(v200)), v149), 8uLL);
            v202 = result + v192 - 3152;
            *(int32x4_t *)v202 = vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v198, *(int32x4_t *)&v140[v192]), v148), v199, v147), v197, (int32x4_t)vmovl_u16(*(uint16x4_t *)v200.i8)), v149), 8uLL);
            *(int32x4_t *)(v202 + 16) = v201;
            v192 += 32;
            v193 -= 8;
          }
          while (v193);
          if (v331 == v138)
            goto LABEL_66;
          v154 = v189.u32[3];
          v152 = v190.u32[3];
          v186 = v331;
        }
        else
        {
          v186 = 0;
          v187 = v155;
          v188 = v333;
          v3 = v326;
        }
        v203 = 4 * v186;
        do
        {
          v204 = -6 * v152;
          v152 = *(_DWORD *)((char *)v143 + v203);
          v205 = *(_DWORD *)&v140[v203 + 4696];
          *(_DWORD *)(result + v203 + 1536) = (int)(5 * (v205 + *(_DWORD *)&v140[v203 + 4688])
                                                  + 6 * v154
                                                  + (v204 - 5 * (v152 + *(_DWORD *)((char *)v143 + v203 - 8)))
                                                  * *((unsigned __int16 *)v144 + v186)
                                                  + 128) >> 8;
          v203 += 4;
          v154 = v205;
          ++v186;
        }
        while (v138 != v186);
LABEL_66:
        result += 3072;
        v98 = (_OWORD *)((char *)v98 + 1560);
        v11 = v187 + 3120;
        v10 = v188 + 3120;
        v137 += 2;
        v140 += 3120;
        v142 += 3120;
        v141 += 390;
        v143 += 390;
        v144 = (_OWORD *)((char *)v144 + 1560);
        if (v137 >= v329)
          goto LABEL_100;
      }
      v156 = 0;
      v157 = *((_DWORD *)v10 + 390);
      v158 = *((_DWORD *)v11 + 390);
      goto LABEL_73;
    }
    v274 = (v3 - 2) >> 1;
    v275 = result + 3072 * v274;
    v276 = v1 + 1560 * v274;
    v277 = 3120 * v274 + 6252;
    v11 = &v335[v277];
    result = v275 + 3072;
    v98 = (_OWORD *)(v276 + 3906);
    v10 = &v340[v277];
LABEL_100:
    v97 = v3 | 1;
    if (v2 < 1)
      return result;
  }
LABEL_101:
  if (v97 != v3)
    return result;
  v278 = *((_DWORD *)v11 - 390);
  v279 = *((_DWORD *)v11 + 390);
  v280 = *((_DWORD *)v10 - 390);
  v281 = *((_DWORD *)v10 + 390);
  if (v2 < 8)
  {
    v282 = 0;
    goto LABEL_108;
  }
  v283 = 0;
  v282 = v2 & 0xFFFFFFF8;
  v284 = vdupq_n_s32(v281);
  v285 = vdupq_n_s32(v280);
  v286 = vdupq_n_s32(v279);
  v287 = vdupq_n_s32(v278);
  v288.i64[0] = 0x500000005;
  v288.i64[1] = 0x500000005;
  v289.i64[0] = 0x400000004;
  v289.i64[1] = 0x400000004;
  v290.i64[0] = 0x600000006;
  v290.i64[1] = 0x600000006;
  v291.i64[0] = 0x500000005;
  v291.i64[1] = 0x500000005;
  v292.i64[0] = 0x10000000100;
  v292.i64[1] = 0x10000000100;
  v293 = (uint16x8_t *)v98;
  do
  {
    v294 = (int8x16_t *)&v11[v283 - 1556];
    v295 = (int32x4_t)vextq_s8((int8x16_t)v287, *v294, 0xCuLL);
    v287 = *(int32x4_t *)&v11[v283 - 1540];
    v296 = (int8x16_t *)&v11[v283 + 1564];
    v297 = (int32x4_t)vextq_s8((int8x16_t)v286, *v296, 0xCuLL);
    v286 = *(int32x4_t *)&v11[v283 + 1580];
    v298 = vmlaq_s32(vmulq_s32(vaddq_s32(v295, v297), v288), vaddq_s32(vaddq_s32(*(int32x4_t *)&v11[v283 + 1556], *(int32x4_t *)&v11[v283 - 1564]), vaddq_s32(*(int32x4_t *)v294, *(int32x4_t *)v296)), v289);
    v299 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vextq_s8(*v294, (int8x16_t)v287, 0xCuLL), (int32x4_t)vextq_s8(*v296, (int8x16_t)v286, 0xCuLL)), v288), vaddq_s32(vaddq_s32(*(int32x4_t *)&v11[v283 + 1572], *(int32x4_t *)&v11[v283 - 1548]), vaddq_s32(v287, v286)), v289);
    v300 = (int8x16_t *)&v10[v283 - 1556];
    v301 = (int32x4_t)vextq_s8((int8x16_t)v285, *v300, 0xCuLL);
    v285 = *(int32x4_t *)&v10[v283 - 1540];
    v302 = (int8x16_t *)&v10[v283 + 1564];
    v303 = (int32x4_t)vextq_s8((int8x16_t)v284, *v302, 0xCuLL);
    v284 = *(int32x4_t *)&v10[v283 + 1580];
    v304 = *v293++;
    v305 = vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)&v10[v283 + 1556], *(int32x4_t *)&v10[v283 - 1564]), vaddq_s32(*(int32x4_t *)v300, *(int32x4_t *)v302)), v291), vaddq_s32(v301, v303), v290), v298, (int32x4_t)vmovl_u16(*(uint16x4_t *)v304.i8)), v292), 9uLL);
    v306 = vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)&v10[v283 + 1572], *(int32x4_t *)&v10[v283 - 1548]), vaddq_s32(v285, v284)), v291), vaddq_s32((int32x4_t)vextq_s8(*v300, (int8x16_t)v285, 0xCuLL), (int32x4_t)vextq_s8(*v302, (int8x16_t)v284, 0xCuLL)), v290), v299, (int32x4_t)vmovl_high_u16(v304)), v292), 9uLL);
    v307 = (int32x4_t *)(result + v283);
    *v307 = v305;
    v307[1] = v306;
    v283 += 32;
  }
  while (((4 * v2) & 0x3FFFFFFE0) != v283);
  if (v282 != v2)
  {
    v281 = v284.u32[3];
    v280 = v285.u32[3];
    v279 = v286.u32[3];
    v278 = v287.u32[3];
LABEL_108:
    v308 = (int *)(result + 4 * v282);
    v309 = (unsigned __int16 *)v98 + v282;
    v310 = 4 * v282 - 1564;
    v311 = &v11[v310];
    v312 = &v10[v310];
    v313 = v2 - v282;
    result = 6;
    do
    {
      v314 = -6 * (v278 + v279);
      v278 = v311[2];
      v279 = v311[782];
      v315 = v280 + v281;
      v280 = v312[2];
      v281 = v312[782];
      v316 = *v309++;
      *v308++ = (int)(5 * (v312[780] + *v312 + v280 + v281)
                    + 6 * v315
                    + (v314 - 5 * (v311[780] + *v311 + v278 + v279)) * v316
                    + 256) >> 9;
      ++v311;
      ++v312;
      --v313;
    }
    while (v313);
  }
  return result;
}

uint64_t dav1d_lr_sbrow_16bpc(uint64_t result, _QWORD *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;
  int v15;
  char v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;

  v5 = result;
  v6 = 8 * (a3 != 0);
  v7 = *(_DWORD *)(result + 5192);
  v8 = a3 + 1;
  v9 = *(_DWORD *)(result + 3296);
  if ((v7 & 1) != 0)
  {
    v10 = *(_DWORD *)(result + 2316);
    if (v8 >= v9)
      v11 = 0;
    else
      v11 = -8;
    if ((v8 << (*(_BYTE *)(*(_QWORD *)(result + 8) + 1012) + 6)) + v11 >= v10)
      v12 = *(_DWORD *)(result + 2316);
    else
      v12 = (v8 << (*(_BYTE *)(*(_QWORD *)(result + 8) + 1012) + 6)) + v11;
    result = lr_sbrow(result, *a2 - 2 * (*(_QWORD *)(result + 2296) >> 1) * v6, (a3 << (*(_BYTE *)(*(_QWORD *)(result + 8) + 1012) + 6)) - (int)v6, *(_DWORD *)(result + 2312), v10, v12, 0);
  }
  if ((v7 & 6) != 0)
  {
    v13 = *(_DWORD *)(v5 + 2320);
    v14 = v13 != 3;
    v15 = *(_DWORD *)(v5 + 2312);
    if (v13 != 3)
      ++v15;
    v16 = v13 == 1;
    v17 = *(_DWORD *)(v5 + 2316);
    if (v16)
      ++v17;
    v18 = v17 >> v16;
    v19 = v15 >> v14;
    if (v16)
      v20 = 5;
    else
      v20 = 6;
    v21 = *(_DWORD *)(*(_QWORD *)(v5 + 8) + 1012) + v20;
    v22 = 8u >> v16;
    if (v8 >= v9)
      v22 = 0;
    if ((int)((v8 << v21) - v22) >= v18)
      v23 = v18;
    else
      v23 = (v8 << v21) - v22;
    v24 = v6 >> v16;
    v25 = (a3 << v21) - v24;
    if ((v7 & 2) != 0)
      result = lr_sbrow(v5, a2[1] - 2 * (*(_QWORD *)(v5 + 2304) >> 1) * v24, v25, v19, v18, v23, 1u);
    if ((v7 & 4) != 0)
      return lr_sbrow(v5, a2[2] - 2 * (*(_QWORD *)(v5 + 2304) >> 1) * v24, v25, v19, v18, v23, 2u);
  }
  return result;
}

uint64_t lr_sbrow(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, unsigned int a7)
{
  int v9;
  int v10;
  int v13;
  char v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  int v29;
  uint64_t result;
  uint64_t v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned __int8 *v40;
  _BOOL4 v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int v44;
  _BOOL4 v45;
  int v46;
  int v47;
  BOOL v48;
  unsigned __int8 *v49;
  int v50;
  int v51;
  char v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  char v56;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  _BYTE *v62;
  _BYTE *v63;
  _OWORD v64[68];
  _QWORD v65[138];

  v9 = a4;
  v10 = a3;
  v65[136] = *MEMORY[0x1E0C80C00];
  v13 = *(_DWORD *)(a1 + 2320);
  v14 = v13 == 1 && a7 != 0;
  v15 = 1 << *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * (a7 != 0) + 1384);
  v16 = v15 >> 1;
  v17 = 8u >> v14;
  if (!a3)
    v17 = 0;
  v18 = v17 + a3;
  if (a3 <= 0)
    v19 = 2;
  else
    v19 = 6;
  v20 = v18 & -v15;
  if (v20 + v16 <= a5)
    v21 = 0;
  else
    v21 = 1 << *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * (a7 != 0) + 1384);
  v22 = v20 - v21;
  if ((v18 & -v15) != 0)
    v23 = v22;
  else
    v23 = 0;
  v24 = v13 == 3;
  v25 = *(_QWORD *)(a1 + 8 * (a7 != 0) + 2296);
  v26 = v16 + v15;
  v27 = !v24;
  if (((a7 != 0) & v27) != 0)
    v28 = 6;
  else
    v28 = 7;
  v29 = (v23 << v14 >> 7) * *(_DWORD *)(a1 + 3308);
  result = ((v23 << v14) >> 5) & 2;
  v31 = *(_QWORD *)(a1 + 4272);
  v62 = (_BYTE *)(v31 + 120 * v29 + 40 * a7 + 10 * result);
  v63 = 0;
  v32 = *v62;
  v33 = *v62 != 0;
  if (v26 > a4)
  {
    v15 = 0;
    v34 = 0;
    if (!*v62)
      return result;
    return lr_stripe(a1, a2, (uint64_t)&v64[68 * (v34 == 0)], v15, v10, a7, v9 - v15, a6, (&v62)[v34], v19 & 0xFFFFFFFD);
  }
  v35 = a7;
  v36 = v28 - 1;
  v60 = v19 | 1;
  v61 = a6;
  v58 = v10;
  v59 = a7;
  v56 = v28;
  v54 = result;
  v55 = v29;
  v53 = a7;
  v52 = v28 - 1;
  v50 = v16 + v15;
  if (a6 - v10 < 1)
  {
    v63 = (_BYTE *)(v31
                  + 120 * (v29 + (v15 >> v28))
                  + 40 * a7
                  + 10 * (result | (v15 >> v36) & 1));
    v45 = *v63 != 0;
    if (v32)
    {
      lr_stripe(a1, a2, (uint64_t)v65, 0, v10, a7, v15, a6, (_BYTE *)(v31 + 120 * v29 + 40 * a7 + 10 * result), v19);
      v26 = v16 + v15;
      v36 = v52;
      v35 = v53;
      result = v54;
      v29 = v55;
      v28 = v56;
      v9 = a4;
      v10 = v58;
      a7 = v59;
      a6 = v61;
    }
    a2 += 2 * v15;
    if (v26 + v15 <= v9)
    {
      v46 = 0;
      v47 = v16 + 2 * v15;
      v34 = 1;
      do
      {
        v48 = v45;
        v49 = (unsigned __int8 *)(*(_QWORD *)(a1 + 4272)
                                + 120 * (((2 * v15 + v46) >> v28) + v29)
                                + 40 * v35
                                + 10 * (((2 * v15 + v46) >> v36) & 1 | result));
        (&v62)[v34 == 0] = v49;
        v45 = *v49 != 0;
        if (v48)
        {
          lr_stripe(a1, a2, (uint64_t)&v64[68 * (v34 == 0)], v15 + v46, v10, a7, v15, v61, (&v62)[v34], v60);
          v36 = v52;
          v35 = v53;
          result = v54;
          v29 = v55;
          v28 = v56;
          v9 = a4;
          v10 = v58;
          a7 = v59;
          a6 = v61;
        }
        v34 ^= 1uLL;
        a2 += 2 * v15;
        v46 += v15;
      }
      while (v47 + v46 <= v9);
      v15 += v46;
      v19 = v60;
      if (v45)
        return lr_stripe(a1, a2, (uint64_t)&v64[68 * (v34 == 0)], v15, v10, a7, v9 - v15, a6, (&v62)[v34], v19 & 0xFFFFFFFD);
    }
    else
    {
      v34 = 1;
      v19 = v60;
      if (v45)
        return lr_stripe(a1, a2, (uint64_t)&v64[68 * (v34 == 0)], v15, v10, a7, v9 - v15, a6, (&v62)[v34], v19 & 0xFFFFFFFD);
    }
  }
  else
  {
    v34 = 0;
    v37 = 0;
    v51 = a6 - v10 + 1;
    v38 = 2 * (v25 >> 1);
    do
    {
      v39 = v37 + v15;
      v40 = (unsigned __int8 *)(*(_QWORD *)(a1 + 4272)
                              + 120 * ((v39 >> v28) + v29)
                              + 40 * v35
                              + 10 * ((v39 >> v36) & 1 | result));
      (&v62)[v34 == 0] = v40;
      LODWORD(v40) = *v40;
      v41 = (_DWORD)v40 != 0;
      if ((_DWORD)v40)
      {
        v42 = &v64[68 * v34];
        v43 = 2 * v15 - 8;
        v44 = v51;
        do
        {
          *v42++ = *(_QWORD *)(a2 + v43);
          --v44;
          v43 += v38;
        }
        while (v44 > 1);
      }
      if (v33)
      {
        lr_stripe(a1, a2, (uint64_t)&v64[68 * (v34 == 0)], v37, v10, a7, v15, v61, (&v62)[v34], v19);
        v26 = v50;
        v36 = v52;
        v35 = v53;
        result = v54;
        v29 = v55;
        v28 = v56;
        v9 = a4;
        v10 = v58;
        a7 = v59;
        a6 = v61;
      }
      a2 += 2 * v15;
      v34 ^= 1uLL;
      v37 = v39;
      v33 = v41;
      v19 = v60;
    }
    while (v39 + v26 <= v9);
    v19 = v60;
    v15 = v39;
    if (v41)
      return lr_stripe(a1, a2, (uint64_t)&v64[68 * (v34 == 0)], v15, v10, a7, v9 - v15, a6, (&v62)[v34], v19 & 0xFFFFFFFD);
  }
  return result;
}

uint64_t lr_stripe(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6, unsigned int a7, int a8, _BYTE *a9, int a10)
{
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  char v17;
  char v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  __int16 v27;
  uint64_t (**v28)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int128 *, _QWORD, _DWORD);
  int v29;
  unsigned __int16 *v30;
  unsigned int v31;
  _BOOL8 v32;
  uint64_t v34;
  unsigned int v35;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int128 *, _QWORD, _DWORD);
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v13 = result;
  v46 = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(result + 3144);
  v15 = a6 != 0 && *(_DWORD *)(result + 2320) == 1;
  v43 = *(_QWORD *)(result + 8 * (a6 != 0) + 2296);
  v16 = 8 << v15;
  if (v15)
    v17 = 5;
  else
    v17 = 6;
  if (!a5)
    v16 = 0;
  v18 = *(_DWORD *)(*(_QWORD *)(result + 8) + 1012);
  v19 = (v16 + a5) >> (v17 + v18);
  v20 = *(_QWORD *)(result + 8 * a6 + 5088);
  v21 = 4 << v18;
  if (a5)
    v22 = 64;
  else
    v22 = 56;
  v23 = v19 * v21 - 4;
  if (*(_DWORD *)(*(_QWORD *)(result + 3120) + 24) <= 1u)
    v23 = 0;
  if ((int)(v22 >> v15) >= a8 - a5)
    v24 = (a8 - a5);
  else
    v24 = v22 >> v15;
  v44 = 0u;
  v45 = 0u;
  if (*a9 == 2)
  {
    v25 = (char)a9[1];
    WORD6(v44) = v25;
    LOWORD(v44) = v25;
    WORD5(v44) = (char)a9[2];
    WORD1(v44) = WORD5(v44);
    WORD4(v44) = (char)a9[3];
    WORD2(v44) = WORD4(v44);
    WORD3(v44) = 128 - 2 * (WORD5(v44) + v25 + WORD4(v44));
    v26 = (char)a9[4];
    WORD6(v45) = v26;
    LOWORD(v45) = v26;
    WORD5(v45) = (char)a9[5];
    WORD1(v45) = WORD5(v45);
    v27 = (char)a9[6];
    WORD4(v45) = v27;
    WORD2(v45) = v27;
    WORD3(v45) = 128 - 2 * (WORD5(v45) + v26 + v27);
    v28 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int128 *, _QWORD, _DWORD))(v14 + 8 * ((v26 | v25) == 0) + 3328);
    v29 = v24 + a5;
    if ((int)v24 + a5 > a8)
      return result;
  }
  else
  {
    v30 = (unsigned __int16 *)((char *)&dav1d_sgr_params + 4 * a9[7]);
    v31 = *v30;
    v32 = *v30 == 0;
    LODWORD(v30) = v30[1];
    *(_QWORD *)&v44 = __PAIR64__(v30, v31);
    WORD4(v44) = (char)a9[8];
    WORD5(v44) = 128 - (WORD4(v44) + (char)a9[9]);
    v28 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int128 *, _QWORD, _DWORD))(v14 + 8 * (2 * ((_DWORD)v30 != 0) - v32) + 3344);
    v29 = v24 + a5;
    if ((int)v24 + a5 > a8)
      return result;
  }
  v34 = v20 + 2 * (v43 >> 1) * v23 + 2 * a4;
  v41 = *v28;
  v40 = v19 + 1;
  v35 = 0x40u >> v15;
  do
  {
    if (v40 == *(_DWORD *)(v13 + 3296) && a8 == v29)
      v37 = 0;
    else
      v37 = 8;
    v38 = v37 | a10 & 0xFFFFFFF7;
    result = v41(a2, v43, a3, v34, a7, v24, &v44, v38, *(_DWORD *)(v13 + 4156));
    LODWORD(v39) = a8 - v29;
    if ((int)v35 >= a8 - v29)
      v39 = v39;
    else
      v39 = v35;
    if (!(_DWORD)v39)
      break;
    a10 = v38 | 4;
    a2 += 2 * (v43 >> 1) * (int)v24;
    a3 += 8 * (int)v24;
    v29 += v39;
    v34 += 4 * v43;
    v24 = v39;
  }
  while (v29 <= a8);
  return result;
}

unint64_t put_8tap_regular_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  return put_8tap_c(a1, a2, a3, a4, a5, a6, a7, a8, 0, a9);
}

uint64_t put_8tap_regular_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  return put_8tap_scaled_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0, a11);
}

uint64_t prep_8tap_regular_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return prep_8tap_c(a1, a2, a3, a4, a5, a6, a7, 0, a8);
}

uint64_t prep_8tap_regular_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  return prep_8tap_scaled_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0, a10);
}

unint64_t put_8tap_regular_smooth_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  return put_8tap_c(a1, a2, a3, a4, a5, a6, a7, a8, 4u, a9);
}

uint64_t put_8tap_regular_smooth_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  return put_8tap_scaled_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 4u, a11);
}

uint64_t prep_8tap_regular_smooth_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return prep_8tap_c(a1, a2, a3, a4, a5, a6, a7, 4, a8);
}

uint64_t prep_8tap_regular_smooth_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  return prep_8tap_scaled_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, 4u, a10);
}

unint64_t put_8tap_regular_sharp_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  return put_8tap_c(a1, a2, a3, a4, a5, a6, a7, a8, 8u, a9);
}

uint64_t put_8tap_regular_sharp_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  return put_8tap_scaled_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 8u, a11);
}

uint64_t prep_8tap_regular_sharp_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return prep_8tap_c(a1, a2, a3, a4, a5, a6, a7, 8, a8);
}

uint64_t prep_8tap_regular_sharp_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  return prep_8tap_scaled_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, 8u, a10);
}

unint64_t put_8tap_sharp_regular_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  return put_8tap_c(a1, a2, a3, a4, a5, a6, a7, a8, 2u, a9);
}

uint64_t put_8tap_sharp_regular_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  return put_8tap_scaled_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 2u, a11);
}

uint64_t prep_8tap_sharp_regular_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return prep_8tap_c(a1, a2, a3, a4, a5, a6, a7, 2, a8);
}

uint64_t prep_8tap_sharp_regular_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  return prep_8tap_scaled_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, 2u, a10);
}

unint64_t put_8tap_sharp_smooth_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  return put_8tap_c(a1, a2, a3, a4, a5, a6, a7, a8, 6u, a9);
}

uint64_t put_8tap_sharp_smooth_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  return put_8tap_scaled_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 6u, a11);
}

uint64_t prep_8tap_sharp_smooth_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return prep_8tap_c(a1, a2, a3, a4, a5, a6, a7, 6, a8);
}

uint64_t prep_8tap_sharp_smooth_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  return prep_8tap_scaled_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, 6u, a10);
}

unint64_t put_8tap_sharp_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  return put_8tap_c(a1, a2, a3, a4, a5, a6, a7, a8, 0xAu, a9);
}

uint64_t put_8tap_sharp_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  return put_8tap_scaled_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0xAu, a11);
}

uint64_t prep_8tap_sharp_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return prep_8tap_c(a1, a2, a3, a4, a5, a6, a7, 10, a8);
}

uint64_t prep_8tap_sharp_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  return prep_8tap_scaled_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0xAu, a10);
}

unint64_t put_8tap_smooth_regular_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  return put_8tap_c(a1, a2, a3, a4, a5, a6, a7, a8, 1u, a9);
}

uint64_t put_8tap_smooth_regular_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  return put_8tap_scaled_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 1u, a11);
}

uint64_t prep_8tap_smooth_regular_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return prep_8tap_c(a1, a2, a3, a4, a5, a6, a7, 1, a8);
}

uint64_t prep_8tap_smooth_regular_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  return prep_8tap_scaled_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, 1u, a10);
}

unint64_t put_8tap_smooth_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  return put_8tap_c(a1, a2, a3, a4, a5, a6, a7, a8, 5u, a9);
}

uint64_t put_8tap_smooth_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  return put_8tap_scaled_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 5u, a11);
}

uint64_t prep_8tap_smooth_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return prep_8tap_c(a1, a2, a3, a4, a5, a6, a7, 5, a8);
}

uint64_t prep_8tap_smooth_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  return prep_8tap_scaled_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, 5u, a10);
}

unint64_t put_8tap_smooth_sharp_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  return put_8tap_c(a1, a2, a3, a4, a5, a6, a7, a8, 9u, a9);
}

uint64_t put_8tap_smooth_sharp_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  return put_8tap_scaled_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 9u, a11);
}

uint64_t prep_8tap_smooth_sharp_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return prep_8tap_c(a1, a2, a3, a4, a5, a6, a7, 9, a8);
}

uint64_t prep_8tap_smooth_sharp_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  return prep_8tap_scaled_c(a1, a2, a3, a4, a5, a6, a7, a8, a9, 9u, a10);
}

char *put_bilin_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  char *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int32x4_t v22;
  int32x4_t v23;
  uint64_t v24;
  _BYTE *v25;
  int32x4_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint16x8_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int32x4_t v37;
  int32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int32x4_t v42;
  int32x4_t v43;
  char *v44;
  char *v45;
  uint64_t i;
  char *v47;
  uint16x8_t v49;
  uint16x8_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int v53;
  int v54;
  __int16 v55;
  unsigned int v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  uint64_t v60;
  _BYTE *v61;
  int32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  __int16 v74;
  __int16 v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  uint64_t v86;
  uint64_t v87;
  int32x4_t v88;
  int32x4_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v93;
  uint16x8_t v94;
  int32x4_t v95;
  uint16x8_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  __int16 v104;
  __int16 v105;
  _BYTE v106[33024];
  uint64_t v107;

  result = (char *)MEMORY[0x1E0C80A78](a1, a2);
  v107 = *MEMORY[0x1E0C80C00];
  v17 = v10 >> 1;
  v18 = v12 >> 1;
  if (v15)
  {
    v19 = __clz(a9);
    if (v16)
    {
      if ((int)v13 >= 1)
      {
        v20 = (1 << (22 - v19)) >> 1;
        v21 = v14 + 1;
        v22 = vdupq_n_s32(v15);
        v23 = vdupq_n_s32(v20);
        v24 = 2 * v18;
        v25 = v106;
        v26 = vnegq_s32(vdupq_n_s32(22 - v19));
        while (1)
        {
          v27 = *(unsigned __int16 *)v11;
          if (v13 >= 8)
          {
            v29 = 0;
            v30 = (int8x16_t)vdupq_n_s16(v27);
            do
            {
              v31 = v30;
              v30 = *(int8x16_t *)&v11[v29 + 2];
              v32 = (uint16x8_t)vextq_s8(v31, v30, 0xEuLL);
              *(int16x8_t *)&v25[v29] = vuzp1q_s16((int16x8_t)vshlq_s32(vmlaq_s32(vaddq_s32((int32x4_t)vshll_n_u16(*(uint16x4_t *)v32.i8, 4uLL), v23), (int32x4_t)vsubl_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v32.i8), v22), v26), (int16x8_t)vshlq_s32(vmlaq_s32(vaddq_s32((int32x4_t)vshll_high_n_u16(v32, 4uLL), v23), (int32x4_t)vsubl_high_u16((uint16x8_t)v30, v32), v22), v26));
              v29 += 16;
            }
            while (((2 * v13) & 0x1FFFFFFF0) != v29);
            if ((v13 & 0xFFFFFFF8) == (unint64_t)v13)
              goto LABEL_5;
            LOWORD(v27) = v30.i16[7];
            v28 = v13 & 0xFFFFFFF8;
          }
          else
          {
            v28 = 0;
          }
          do
          {
            v33 = 2 * v28;
            v34 = v28 + 1;
            v35 = *(unsigned __int16 *)&v11[2 * v28 + 2];
            *(_WORD *)&v25[v33] = (int)(v20 + 16 * (unsigned __int16)v27 + (v35 - (unsigned __int16)v27) * v15) >> (22 - v19);
            LOWORD(v27) = v35;
            v28 = v34;
          }
          while (v13 != v34);
LABEL_5:
          v25 += 256;
          v11 += v24;
          if (!--v21)
          {
            v56 = (1 << (v19 - 14)) >> 1;
            v57 = vdupq_n_s32(v16);
            v58 = vdupq_n_s32(v56);
            v59 = vdupq_n_s32(a9);
            v60 = 2 * v17;
            v61 = v106;
            v62 = vnegq_s32(vdupq_n_s32(v19 - 14));
            while (v13 >= 8)
            {
              v64 = 0;
              do
              {
                v65 = *(int16x8_t *)&v61[v64];
                v66 = vshll_high_n_s16(v65, 4uLL);
                v67 = *(int16x8_t *)&v61[v64 + 256];
                v68 = vsubl_high_s16(v67, v65);
                v69 = vshlq_s32(vmlaq_s32(vaddq_s32(vshll_n_s16(*(int16x4_t *)v65.i8, 4uLL), v58), vsubl_s16(*(int16x4_t *)v67.i8, *(int16x4_t *)v65.i8), v57), v62);
                v70 = vshlq_s32(vmlaq_s32(vaddq_s32(v66, v58), v68, v57), v62);
                *(int8x16_t *)&result[v64] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v69, v59), (int16x8_t)vminq_s32(v70, v59)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v69), (int16x8_t)vcltzq_s32(v70)));
                v64 += 16;
              }
              while (((2 * v13) & 0x1FFFFFFF0) != v64);
              v63 = v13 & 0xFFFFFFF8;
              if (v63 != v13)
                goto LABEL_41;
LABEL_35:
              v61 += 256;
              result += v60;
              if (!--v14)
                return result;
            }
            v63 = 0;
LABEL_41:
            v71 = v13 - v63;
            v72 = 2 * v63;
            do
            {
              v73 = (int)(v56 + 16 * *(__int16 *)&v61[v72] + (*(__int16 *)&v61[v72 + 256] - *(__int16 *)&v61[v72]) * v16) >> (v19 - 14);
              if (v73 >= a9)
                v74 = a9;
              else
                v74 = (int)(v56
                          + 16 * *(__int16 *)&v61[v72]
                          + (*(__int16 *)&v61[v72 + 256] - *(__int16 *)&v61[v72]) * v16) >> (v19 - 14);
              if (v73 >= 0)
                v75 = v74;
              else
                v75 = 0;
              *(_WORD *)&result[v72] = v75;
              v72 += 2;
              --v71;
            }
            while (v71);
            goto LABEL_35;
          }
        }
      }
      return result;
    }
    if ((int)v13 < 1)
      return result;
    v76 = 0;
    v77 = v19 - 18;
    v78 = (1 << (v19 - 18)) >> 1;
    v79 = 22 - v19;
    v80 = (1 << v79) >> 1;
    v81 = 2 * v13;
    v82 = vdupq_n_s32(v15);
    v83 = vdupq_n_s32(v80);
    v84 = vdupq_n_s32(v78);
    v85 = vdupq_n_s32(a9);
    v86 = 2 * v18;
    v87 = 2 * v17;
    v88 = vnegq_s32(vdupq_n_s32(v79));
    v89 = vnegq_s32(vdupq_n_s32(v77));
    v90 = (unint64_t)result;
    v91 = v11;
    while (v13 >= 8)
    {
      if (v90 < (unint64_t)&v11[v81 + 2 + v76 * v12] && v91 < &result[v81 + v76 * v10])
        break;
      v93 = 0;
      do
      {
        v94 = *(uint16x8_t *)&v91[v93];
        v95 = (int32x4_t)vshll_high_n_u16(v94, 4uLL);
        v96 = *(uint16x8_t *)&v91[v93 + 2];
        v97 = (int32x4_t)vsubl_high_u16(v96, v94);
        v98 = vshlq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(vaddq_s32((int32x4_t)vshll_n_u16(*(uint16x4_t *)v94.i8, 4uLL), v83), (int32x4_t)vsubl_u16(*(uint16x4_t *)v96.i8, *(uint16x4_t *)v94.i8), v82), v88), v84), v89);
        v99 = vshlq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(vaddq_s32(v95, v83), v97, v82), v88), v84), v89);
        *(int8x16_t *)(v90 + v93) = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v98, v85), (int16x8_t)vminq_s32(v99, v85)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v98), (int16x8_t)vcltzq_s32(v99)));
        v93 += 16;
      }
      while ((v81 & 0x1FFFFFFF0) != v93);
      v100 = v13 & 0xFFFFFFF8;
      if (v100 != v13)
        goto LABEL_64;
LABEL_52:
      v90 += v87;
      v91 += v86;
      ++v76;
      if (!--v14)
        return result;
    }
    v100 = 0;
LABEL_64:
    v101 = 2 * v100;
    v102 = v13 - v100;
    do
    {
      v103 = (int)(((int)(v80
                        + 16 * *(unsigned __int16 *)&v91[v101]
                        + (*(unsigned __int16 *)&v91[v101 + 2] - *(unsigned __int16 *)&v91[v101]) * v15) >> v79)
                 + v78) >> v77;
      if (v103 >= a9)
        v104 = a9;
      else
        v104 = (int)(((int)(v80
                          + 16 * *(unsigned __int16 *)&v91[v101]
                          + (*(unsigned __int16 *)&v91[v101 + 2] - *(unsigned __int16 *)&v91[v101]) * v15) >> v79)
                   + v78) >> v77;
      if (v103 >= 0)
        v105 = v104;
      else
        v105 = 0;
      *(_WORD *)(v90 + v101) = v105;
      v101 += 2;
      --v102;
    }
    while (v102);
    goto LABEL_52;
  }
  if (!v16)
    return (char *)put_c(result, v10 >> 1, v11, v12 >> 1, v13, v14);
  if ((int)v13 >= 1)
  {
    v36 = 0;
    v37 = vdupq_n_s32(v16);
    v38 = vdupq_n_s32(a9);
    v39 = 2 * v18;
    v40 = 2 * v17;
    v41 = &v11[v39];
    v42.i64[0] = 0x800000008;
    v42.i64[1] = 0x800000008;
    v43.i64[0] = 0x700000007;
    v43.i64[1] = 0x700000007;
    v44 = result;
    v45 = v11;
    while (v13 >= 8)
    {
      v47 = &result[v36 * v10];
      i = 0;
      if ((unint64_t)(v47 - &v11[v12 + v36 * v12]) < 0x10 || (unint64_t)(v47 - &v11[v36 * v12]) < 0x10)
        goto LABEL_27;
      do
      {
        v49 = *(uint16x8_t *)&v45[i];
        v50 = *(uint16x8_t *)&v45[v39 + i];
        v51 = vmlaq_s32((int32x4_t)vshll_n_u16(*(uint16x4_t *)v49.i8, 4uLL), (int32x4_t)vsubl_u16(*(uint16x4_t *)v50.i8, *(uint16x4_t *)v49.i8), v37);
        v52 = vmlaq_s32((int32x4_t)vshll_high_n_u16(v49, 4uLL), (int32x4_t)vsubl_high_u16(v50, v49), v37);
        *(int8x16_t *)&v44[i] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(vshrq_n_s32(vaddq_s32(v51, v42), 4uLL), v38), (int16x8_t)vminq_s32(vshrq_n_s32(vaddq_s32(v52, v42), 4uLL), v38)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v43, v51), (int16x8_t)vcgtq_s32(v43, v52)));
        i += 16;
      }
      while (((2 * v13) & 0x1FFFFFFF0) != i);
      i = v13 & 0xFFFFFFF8;
      if (i != v13)
        goto LABEL_27;
LABEL_17:
      ++v36;
      v45 += v39;
      v44 += v40;
      v41 += v39;
      if (!--v14)
        return result;
    }
    for (i = 0; i != v13; *(_WORD *)&v44[2 * i++] = v55)
    {
LABEL_27:
      v53 = (*(unsigned __int16 *)&v41[2 * i] - *(unsigned __int16 *)&v45[2 * i]) * v16
          + 16 * *(unsigned __int16 *)&v45[2 * i];
      v54 = (v53 + 8) >> 4;
      if (v54 >= a9)
        LOWORD(v54) = a9;
      if (v53 >= -8)
        v55 = v54;
      else
        v55 = 0;
    }
    goto LABEL_17;
  }
  return result;
}

uint64_t put_bilin_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int32x4_t v29;
  int32x4_t v30;
  unint64_t v31;
  _BYTE *v32;
  int32x4_t v33;
  unsigned int v34;
  uint64_t i;
  uint64_t v36;
  int32x4_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int v44;
  int v45;
  __int16 v46;
  _BYTE v47[65792];
  uint64_t v48;

  result = MEMORY[0x1E0C80A78]();
  v48 = *MEMORY[0x1E0C80C00];
  if ((int)v15 >= 1)
  {
    v19 = __clz(a11);
    v20 = v14 >> 1;
    v21 = ((v18 + (v16 - 1) * a10) >> 10) + 2;
    v22 = v47;
    do
    {
      v23 = 0;
      v24 = 0;
      v25 = v17;
      do
      {
        *(_WORD *)&v22[v23] = (int)(((1 << (22 - v19)) >> 1)
                                  + 16 * *(unsigned __int16 *)(v13 + 2 * v24)
                                  + (*(unsigned __int16 *)(v13 + 2 * v24 + 2) - *(unsigned __int16 *)(v13 + 2 * v24))
                                  * (v25 >> 6)) >> (22 - v19);
        v26 = v25 + a9;
        v24 += v26 >> 10;
        v25 = v26 & 0x3FF;
        v23 += 2;
      }
      while (2 * v15 != v23);
      v22 += 256;
      v13 += 2 * v20;
      --v21;
    }
    while (v21);
    v27 = v19 - 14;
    v28 = (1 << v27) >> 1;
    v29 = vdupq_n_s32(v28);
    v30 = vdupq_n_s32(a11);
    v31 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v32 = v47;
    v33 = vnegq_s32(vdupq_n_s32(v27));
    while (1)
    {
      v34 = v18 >> 6;
      if (v15 < 8)
        break;
      v36 = 0;
      v37 = vdupq_n_s32(v34);
      do
      {
        v38 = *(int16x8_t *)&v32[v36];
        v39 = vshll_high_n_s16(v38, 4uLL);
        v40 = *(int16x8_t *)&v32[v36 + 256];
        v41 = vsubl_high_s16(v40, v38);
        v42 = vshlq_s32(vmlaq_s32(vaddq_s32(vshll_n_s16(*(int16x4_t *)v38.i8, 4uLL), v29), vsubl_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v38.i8), v37), v33);
        v43 = vshlq_s32(vmlaq_s32(vaddq_s32(v39, v29), v41, v37), v33);
        *(int8x16_t *)(result + v36) = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v42, v30), (int16x8_t)vminq_s32(v43, v30)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v42), (int16x8_t)vcltzq_s32(v43)));
        v36 += 16;
      }
      while (((2 * v15) & 0x1FFFFFFF0) != v36);
      i = v15 & 0xFFFFFFF8;
      if (i != v15)
        goto LABEL_13;
LABEL_7:
      v32 += 2 * (int)(((v18 + a10) >> 3) & 0xFFFFFF80);
      v18 = (v18 + a10) & 0x3FF;
      result += v31;
      if (!--v16)
        return result;
    }
    for (i = 0; i != v15; *(_WORD *)(result + 2 * i++) = v46)
    {
LABEL_13:
      v44 = (int)(v28 + 16 * *(__int16 *)&v32[2 * i] + (*(__int16 *)&v32[2 * i + 256] - *(__int16 *)&v32[2 * i]) * v34) >> v27;
      if (v44 >= a11)
        LOWORD(v45) = a11;
      else
        v45 = (int)(v28 + 16 * *(__int16 *)&v32[2 * i] + (*(__int16 *)&v32[2 * i + 256] - *(__int16 *)&v32[2 * i]) * v34) >> v27;
      if (v44 >= 0)
        v46 = v45;
      else
        v46 = 0;
    }
    goto LABEL_7;
  }
  return result;
}

uint64_t prep_bilin_c(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned __int16 *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int32x4_t v15;
  int32x4_t v16;
  uint64_t v17;
  _BYTE *v18;
  int32x4_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  uint16x8_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int32x4_t v33;
  int32x4_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  int32x4_t v37;
  int16x8_t v38;
  uint64_t v39;
  unsigned __int16 *v40;
  uint64_t v41;
  uint64_t v42;
  int32x4_t v44;
  _BYTE *v45;
  int16x8_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int32x4_t v54;
  int32x4_t v55;
  uint64_t v56;
  int32x4_t v57;
  int16x8_t v58;
  unint64_t v59;
  unsigned __int16 *v60;
  BOOL v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[33024];
  uint64_t v67;

  result = MEMORY[0x1E0C80A78](a1, a2);
  v67 = *MEMORY[0x1E0C80C00];
  v10 = __clz(v9);
  v11 = v4 >> 1;
  if (v7)
  {
    v12 = 22 - v10;
    v13 = (1 << (22 - v10)) >> 1;
    if (v8)
    {
      if ((int)v5 >= 1)
      {
        v14 = v6 + 1;
        v15 = vdupq_n_s32(v7);
        v16 = vdupq_n_s32(v13);
        v17 = 2 * v11;
        v18 = v66;
        v19 = vnegq_s32(vdupq_n_s32(v12));
        while (1)
        {
          v20 = *v3;
          if (v5 >= 8)
          {
            v22 = 0;
            v23 = (int8x16_t)vdupq_n_s16(v20);
            do
            {
              v24 = v23;
              v23 = *(int8x16_t *)&v3[v22 / 2 + 1];
              v25 = (uint16x8_t)vextq_s8(v24, v23, 0xEuLL);
              *(int16x8_t *)&v18[v22] = vuzp1q_s16((int16x8_t)vshlq_s32(vmlaq_s32(vaddq_s32((int32x4_t)vshll_n_u16(*(uint16x4_t *)v25.i8, 4uLL), v16), (int32x4_t)vsubl_u16(*(uint16x4_t *)v23.i8, *(uint16x4_t *)v25.i8), v15), v19), (int16x8_t)vshlq_s32(vmlaq_s32(vaddq_s32((int32x4_t)vshll_high_n_u16(v25, 4uLL), v16), (int32x4_t)vsubl_high_u16((uint16x8_t)v23, v25), v15), v19));
              v22 += 16;
            }
            while (((2 * v5) & 0x1FFFFFFF0) != v22);
            if ((v5 & 0xFFFFFFF8) == (unint64_t)v5)
              goto LABEL_5;
            LOWORD(v20) = v23.i16[7];
            v21 = v5 & 0xFFFFFFF8;
          }
          else
          {
            v21 = 0;
          }
          do
          {
            v26 = 2 * v21;
            v27 = v21 + 1;
            v28 = v3[v21 + 1];
            *(_WORD *)&v18[v26] = (int)(v13 + 16 * (unsigned __int16)v20 + (v28 - (unsigned __int16)v20) * v7) >> v12;
            LOWORD(v20) = v28;
            v21 = v27;
          }
          while (v5 != v27);
LABEL_5:
          v18 += 256;
          v3 = (unsigned __int16 *)((char *)v3 + v17);
          if (!--v14)
          {
            v44 = vdupq_n_s32(v8);
            v45 = v66;
            v46.i64[0] = 0xE000E000E000E000;
            v46.i64[1] = 0xE000E000E000E000;
            while (1)
            {
              if (v5 >= 8)
              {
                v48 = 0;
                do
                {
                  *(int16x8_t *)(result + v48) = vaddq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vshll_n_s16(*(int16x4_t *)&v45[v48], 4uLL), vsubl_s16(*(int16x4_t *)&v45[v48 + 256], *(int16x4_t *)&v45[v48]), v44), 4uLL), vmlaq_s32(vshll_high_n_s16(*(int16x8_t *)&v45[v48], 4uLL), vsubl_high_s16(*(int16x8_t *)&v45[v48 + 256], *(int16x8_t *)&v45[v48]), v44), 4uLL), v46);
                  v48 += 16;
                }
                while (((2 * v5) & 0x1FFFFFFF0) != v48);
                v47 = v5 & 0xFFFFFFF8;
                if (v47 == v5)
                  goto LABEL_30;
              }
              else
              {
                v47 = 0;
              }
              v49 = v5 - v47;
              v50 = 2 * v47;
              do
              {
                *(_WORD *)(result + v50) = (((*(__int16 *)&v45[v50 + 256] - *(__int16 *)&v45[v50]) * v8
                                           + 16 * *(__int16 *)&v45[v50]
                                           + 8) >> 4)
                                         - 0x2000;
                v50 += 2;
                --v49;
              }
              while (v49);
LABEL_30:
              v45 += 256;
              result += 2 * v5;
              if (!--v6)
                return result;
            }
          }
        }
      }
      return result;
    }
    if ((int)v5 < 1)
      return result;
    v51 = 0;
    v52 = 2 * v5;
    v53 = 2 * (int)v5;
    v54 = vdupq_n_s32(v7);
    v55 = vdupq_n_s32(v13);
    v56 = 2 * v11;
    v57 = vnegq_s32(vdupq_n_s32(v12));
    v58.i64[0] = 0xE000E000E000E000;
    v58.i64[1] = 0xE000E000E000E000;
    v59 = result;
    v60 = v3;
    while (1)
    {
      if (v5 >= 8
        && (v59 < (unint64_t)&v3[(unint64_t)v52 / 2 + 1] + v51 * v4
          ? (v61 = (unint64_t)v60 >= result + v52 + v53 * v51)
          : (v61 = 1),
            v61))
      {
        v62 = 0;
        do
        {
          *(int16x8_t *)(v59 + v62) = vaddq_s16(vuzp1q_s16((int16x8_t)vshlq_s32(vmlaq_s32(vaddq_s32((int32x4_t)vshll_n_u16(*(uint16x4_t *)&v60[v62 / 2], 4uLL), v55), (int32x4_t)vsubl_u16(*(uint16x4_t *)&v60[v62 / 2 + 1], *(uint16x4_t *)&v60[v62 / 2]), v54), v57), (int16x8_t)vshlq_s32(vmlaq_s32(vaddq_s32((int32x4_t)vshll_high_n_u16(*(uint16x8_t *)&v60[v62 / 2], 4uLL), v55), (int32x4_t)vsubl_high_u16(
                                                                      *(uint16x8_t *)&v60[v62 / 2 + 1],
                                                                      *(uint16x8_t *)&v60[v62 / 2]),
                                                         v54),
                                                       v57)),
                                        v58);
          v62 += 16;
        }
        while ((v52 & 0x1FFFFFFF0) != v62);
        v63 = v5 & 0xFFFFFFF8;
        if (v63 == v5)
          goto LABEL_41;
      }
      else
      {
        v63 = 0;
      }
      v64 = v63;
      v65 = v5 - v63;
      do
      {
        *(_WORD *)(v59 + v64 * 2) = ((int)(v13 + 16 * v60[v64] + (v60[v64 + 1] - v60[v64]) * v7) >> v12) - 0x2000;
        ++v64;
        --v65;
      }
      while (v65);
LABEL_41:
      v59 += v53;
      v60 = (unsigned __int16 *)((char *)v60 + v56);
      ++v51;
      if (!--v6)
        return result;
    }
  }
  if (!v8)
    return prep_c(result, (uint64_t)v3, v4 >> 1, v5, v6, v9);
  if ((int)v5 >= 1)
  {
    v29 = 0;
    v30 = 22 - v10;
    v31 = (1 << v30) >> 1;
    v32 = 2 * (int)v5;
    v33 = vdupq_n_s32(v8);
    v34 = vdupq_n_s32(v31);
    v35 = v11;
    v36 = &v3[v35];
    v37 = vnegq_s32(vdupq_n_s32(v30));
    v38.i64[0] = 0xE000E000E000E000;
    v38.i64[1] = 0xE000E000E000E000;
    v39 = result;
    v40 = v3;
    do
    {
      if (v5 >= 8)
      {
        v42 = result + v32 * v29;
        v41 = 0;
        if ((unint64_t)(v42 - ((_QWORD)v3 + v4 + v29 * v4)) >= 0x10
          && (unint64_t)(v42 - ((_QWORD)v3 + v29 * v4)) >= 0x10)
        {
          do
          {
            *(int16x8_t *)(v39 + v41) = vaddq_s16(vuzp1q_s16((int16x8_t)vshlq_s32(vmlaq_s32(vaddq_s32((int32x4_t)vshll_n_u16(*(uint16x4_t *)((char *)v40 + v41), 4uLL), v34), (int32x4_t)vsubl_u16(*(uint16x4_t *)((char *)&v40[v35] + v41), *(uint16x4_t *)((char *)v40 + v41)), v33), v37), (int16x8_t)vshlq_s32(vmlaq_s32(vaddq_s32((int32x4_t)vshll_high_n_u16(*(uint16x8_t *)((char *)v40 + v41), 4uLL),
                                                             v34),
                                                           (int32x4_t)vsubl_high_u16(*(uint16x8_t *)((char *)&v40[v35] + v41), *(uint16x8_t *)((char *)v40 + v41)), v33), v37)), v38);
            v41 += 16;
          }
          while (((2 * v5) & 0x1FFFFFFF0) != v41);
          v41 = v5 & 0xFFFFFFF8;
          if (v41 == v5)
            goto LABEL_17;
        }
      }
      else
      {
        v41 = 0;
      }
      do
      {
        *(_WORD *)(v39 + 2 * v41) = ((int)(v31 + 16 * v40[v41] + (v36[v41] - v40[v41]) * v8) >> v30) - 0x2000;
        ++v41;
      }
      while (v5 != v41);
LABEL_17:
      ++v29;
      v40 = (unsigned __int16 *)((char *)v40 + v35 * 2);
      v39 += v32;
      v36 = (unsigned __int16 *)((char *)v36 + v35 * 2);
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t prep_bilin_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  char v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  _BYTE *v26;
  int16x8_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int32x4_t v31;
  _BYTE v32[65792];
  uint64_t v33;

  result = MEMORY[0x1E0C80A78]();
  v33 = *MEMORY[0x1E0C80C00];
  if ((int)v13 >= 1)
  {
    v18 = v12 >> 1;
    v19 = 22 - __clz(a10);
    v20 = ((int)(v16 + (v14 - 1) * a9) >> 10) + 2;
    v21 = v32;
    do
    {
      v22 = 0;
      v23 = 0;
      v24 = v15;
      do
      {
        *(_WORD *)&v21[v22] = (int)(((1 << v19) >> 1)
                                  + 16 * *(unsigned __int16 *)(v11 + 2 * v23)
                                  + (*(unsigned __int16 *)(v11 + 2 * v23 + 2) - *(unsigned __int16 *)(v11 + 2 * v23))
                                  * (v24 >> 6)) >> v19;
        v25 = v24 + v17;
        v23 += v25 >> 10;
        v24 = v25 & 0x3FF;
        v22 += 2;
      }
      while (2 * v13 != v22);
      v21 += 256;
      v11 += 2 * v18;
      --v20;
    }
    while (v20);
    v26 = v32;
    v27.i64[0] = 0xE000E000E000E000;
    v27.i64[1] = 0xE000E000E000E000;
    do
    {
      v28 = v16 >> 6;
      if (v13 >= 8)
      {
        v30 = 0;
        v31 = vdupq_n_s32(v28);
        do
        {
          *(int16x8_t *)(result + v30) = vaddq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vshll_n_s16(*(int16x4_t *)&v26[v30], 4uLL), vsubl_s16(*(int16x4_t *)&v26[v30 + 256], *(int16x4_t *)&v26[v30]), v31), 4uLL), vmlaq_s32(vshll_high_n_s16(*(int16x8_t *)&v26[v30], 4uLL), vsubl_high_s16(*(int16x8_t *)&v26[v30 + 256], *(int16x8_t *)&v26[v30]), v31), 4uLL), v27);
          v30 += 16;
        }
        while (((2 * v13) & 0x1FFFFFFF0) != v30);
        v29 = v13 & 0xFFFFFFF8;
        if (v29 == v13)
          goto LABEL_7;
      }
      else
      {
        v29 = 0;
      }
      do
      {
        *(_WORD *)(result + 2 * v29) = (((*(__int16 *)&v26[2 * v29 + 256] - *(__int16 *)&v26[2 * v29]) * v28
                                       + 16 * *(__int16 *)&v26[2 * v29]
                                       + 8) >> 4)
                                     - 0x2000;
        ++v29;
      }
      while (v13 != v29);
LABEL_7:
      v26 += 2 * (int)(((int)(v16 + a9) >> 3) & 0xFFFFFF80);
      v16 = (v16 + a9) & 0x3FF;
      result += 2 * v13;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t avg_c(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, signed int a7)
{
  uint64_t v7;
  unsigned int v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  int v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int8x16_t *v37;

  if (a5 >= 1)
  {
    v7 = 0;
    v8 = __clz(a7);
    v9 = v8 - 18;
    v10 = v8 - 17;
    v11 = (1 << v9) + 0x4000;
    v12 = 2 * a5;
    v13 = vdupq_n_s32(v11);
    v14 = vdupq_n_s32(a7);
    v15 = vnegq_s32(vdupq_n_s32(v10));
    v16 = a4;
    v17 = result;
    v18 = a3;
    while (a5 >= 0x10)
    {
      i = 0;
      v23 = result + v7 * a2;
      if ((unint64_t)(v23 - (v12 * v7 + a3)) < 0x20)
        goto LABEL_6;
      if ((unint64_t)(v23 - (v12 * v7 + a4)) < 0x20)
        goto LABEL_6;
      v24 = 0;
      do
      {
        v25 = *(int16x8_t *)(v18 + v24);
        v26 = *(int16x8_t *)(v18 + v24 + 16);
        v27 = *(int16x8_t *)(v16 + v24);
        v28 = *(int16x8_t *)(v16 + v24 + 16);
        v29 = vaddw_s16(v13, *(int16x4_t *)v25.i8);
        v30 = vaddw_s16(v13, *(int16x4_t *)v26.i8);
        v31 = vaddw_high_s16(vaddw_high_s16(v13, v25), v27);
        v32 = vaddw_high_s16(vaddw_high_s16(v13, v26), v28);
        v33 = vshlq_s32(vaddw_s16(v29, *(int16x4_t *)v27.i8), v15);
        v34 = vshlq_s32(v31, v15);
        v35 = vshlq_s32(vaddw_s16(v30, *(int16x4_t *)v28.i8), v15);
        v36 = vshlq_s32(v32, v15);
        v37 = (int8x16_t *)(v17 + v24);
        *v37 = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v33, v14), (int16x8_t)vminq_s32(v34, v14)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v33), (int16x8_t)vcltzq_s32(v34)));
        v37[1] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v35, v14), (int16x8_t)vminq_s32(v36, v14)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v35), (int16x8_t)vcltzq_s32(v36)));
        v24 += 32;
      }
      while (((2 * a5) & 0x1FFFFFFE0) != v24);
      i = a5 & 0xFFFFFFF0;
      if (i != a5)
        goto LABEL_6;
LABEL_3:
      ++v7;
      v18 += v12;
      v17 += 2 * (a2 >> 1);
      v16 += v12;
      if (!--a6)
        return result;
    }
    for (i = 0; i != a5; *(_WORD *)(v17 + 2 * i++) = v22)
    {
LABEL_6:
      v20 = (int)(v11 + *(__int16 *)(v18 + 2 * i) + *(__int16 *)(v16 + 2 * i)) >> v10;
      if (v20 >= a7)
        LOWORD(v21) = a7;
      else
        v21 = (int)(v11 + *(__int16 *)(v18 + 2 * i) + *(__int16 *)(v16 + 2 * i)) >> v10;
      if (v20 >= 0)
        v22 = v21;
      else
        v22 = 0;
    }
    goto LABEL_3;
  }
  return result;
}

uint64_t w_avg_c(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, signed int a8)
{
  uint64_t v8;
  unsigned int v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int v30;
  int v31;
  __int16 v32;

  if (a5 >= 1)
  {
    v8 = 0;
    v9 = __clz(a8);
    v10 = v9 - 18;
    v11 = v9 - 14;
    v12 = (8 << v10) + 0x20000;
    v13 = 2 * a5;
    v14 = vdupq_n_s32(a7);
    v15 = vdupq_n_s32(16 - a7);
    v16 = vdupq_n_s32(v12);
    v17 = vdupq_n_s32(a8);
    v18 = vnegq_s32(vdupq_n_s32(v11));
    v19 = result;
    v20 = a4;
    v21 = a3;
    while (a5 >= 8)
    {
      v23 = result + v8 * a2;
      i = 0;
      if ((unint64_t)(v23 - (v13 * v8 + a3)) < 0x10 || (unint64_t)(v23 - (v13 * v8 + a4)) < 0x10)
        goto LABEL_13;
      do
      {
        v25 = *(int16x8_t *)(v21 + i);
        v26 = *(int16x8_t *)(v20 + i);
        v27 = vmlaq_s32(vmlaq_s32(v16, v14, vmovl_high_s16(v25)), v15, vmovl_high_s16(v26));
        v28 = vshlq_s32(vmlaq_s32(vmlaq_s32(v16, v14, vmovl_s16(*(int16x4_t *)v25.i8)), v15, vmovl_s16(*(int16x4_t *)v26.i8)), v18);
        v29 = vshlq_s32(v27, v18);
        *(int8x16_t *)(v19 + i) = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v28, v17), (int16x8_t)vminq_s32(v29, v17)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v28), (int16x8_t)vcltzq_s32(v29)));
        i += 16;
      }
      while (((2 * a5) & 0x1FFFFFFF0) != i);
      i = a5 & 0xFFFFFFF8;
      if (i != a5)
        goto LABEL_13;
LABEL_3:
      ++v8;
      v21 += v13;
      v20 += v13;
      v19 += 2 * (a2 >> 1);
      if (!--a6)
        return result;
    }
    for (i = 0; i != a5; *(_WORD *)(v19 + 2 * i++) = v32)
    {
LABEL_13:
      v30 = (int)(v12 + *(__int16 *)(v21 + 2 * i) * a7 + (16 - a7) * *(__int16 *)(v20 + 2 * i)) >> v11;
      if (v30 >= a8)
        LOWORD(v31) = a8;
      else
        v31 = (int)(v12 + *(__int16 *)(v21 + 2 * i) * a7 + (16 - a7) * *(__int16 *)(v20 + 2 * i)) >> v11;
      if (v30 >= 0)
        v32 = v31;
      else
        v32 = 0;
    }
    goto LABEL_3;
  }
  return result;
}

unint64_t mask_c(unint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, int a5, int a6, int8x16_t *a7, signed int a8)
{
  int16x8_t v8;
  uint64_t v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int8x16_t *v24;
  uint64_t i;
  uint64_t v26;
  unint64_t v27;
  BOOL v29;
  BOOL v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int16x8_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  uint64_t v43;
  int8x16_t *v44;
  int16x8_t v45;
  int16x8_t v46;
  int8x16_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int8x16_t *v63;
  int v64;
  __int16 v65;
  __int16 v66;

  if (a5 >= 1)
  {
    v9 = 0;
    v10 = __clz(a8);
    v11 = v10 - 18;
    v12 = v10 - 12;
    v13 = (32 << v11) + 0x80000;
    v14 = 2 * a5;
    v15 = 2 * a5;
    v16 = vdupq_n_s32(v13);
    v17 = vdupq_n_s32(a8);
    v18 = a5 & 0xFFFFFFF8;
    v19.i64[0] = 0x4000000040;
    v19.i64[1] = 0x4000000040;
    v20 = vnegq_s32(vdupq_n_s32(v12));
    v21 = result;
    v22 = a4;
    v23 = a3;
    v24 = a7;
    do
    {
      if (a5 < 8)
      {
        for (i = 0; i != a5; *(_WORD *)(v21 + 2 * i++) = v66)
        {
LABEL_35:
          v64 = (int)(v13 + v24->u8[i] * *(__int16 *)(v23 + 2 * i) + (64 - v24->u8[i]) * *(__int16 *)(v22 + 2 * i)) >> v12;
          if (v64 >= a8)
            v65 = a8;
          else
            v65 = (int)(v13 + v24->u8[i] * *(__int16 *)(v23 + 2 * i) + (64 - v24->u8[i]) * *(__int16 *)(v22 + 2 * i)) >> v12;
          if (v64 >= 0)
            v66 = v65;
          else
            v66 = 0;
        }
        goto LABEL_3;
      }
      i = 0;
      v26 = v14 + v15 * v9;
      v27 = result + v14 + v9 * a2;
      v29 = v21 < (unint64_t)a7->u64 + a5 + v9 * a5 && (unint64_t)v24 < v27;
      v31 = v21 < a4 + v26 && v22 < v27;
      v32 = a3 + v26;
      v33 = v23 >= v27 || v21 >= v32;
      if (!v33 || v29 || v31)
        goto LABEL_35;
      if (a5 >= 0x10)
      {
        v43 = 0;
        v44 = v24;
        do
        {
          v46 = *(int16x8_t *)(v23 + v43);
          v45 = *(int16x8_t *)(v23 + v43 + 16);
          v47 = *v44++;
          v48 = (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_196889CC0);
          v49 = (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_196889CD0);
          v50 = (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_196889CB0);
          v51 = (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_196889CA0);
          v52 = *(int16x8_t *)(v22 + v43);
          v53 = *(int16x8_t *)(v22 + v43 + 16);
          v54 = vmlaq_s32(v16, v48, vmovl_s16(*(int16x4_t *)v46.i8));
          v55 = vmlaq_s32(v16, v49, vmovl_high_s16(v46));
          v56 = vmlaq_s32(v16, v50, vmovl_s16(*(int16x4_t *)v45.i8));
          v57 = vmlaq_s32(vmlaq_s32(v16, v51, vmovl_high_s16(v45)), vsubq_s32(v19, v51), vmovl_high_s16(v53));
          v58 = vshlq_s32(vmlaq_s32(v54, vsubq_s32(v19, v48), vmovl_s16(*(int16x4_t *)v52.i8)), v20);
          v59 = vshlq_s32(vmlaq_s32(v55, vsubq_s32(v19, v49), vmovl_high_s16(v52)), v20);
          v60 = vshlq_s32(vmlaq_s32(v56, vsubq_s32(v19, v50), vmovl_s16(*(int16x4_t *)v53.i8)), v20);
          v61 = vshlq_s32(v57, v20);
          v62 = (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v58), (int16x8_t)vcltzq_s32(v59));
          v8 = (int16x8_t)vminq_s32(v59, v17);
          v63 = (int8x16_t *)(v21 + v43);
          *v63 = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v58, v17), v8), v62);
          v63[1] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v60, v17), (int16x8_t)vminq_s32(v61, v17)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v60), (int16x8_t)vcltzq_s32(v61)));
          v43 += 32;
        }
        while ((v14 & 0x1FFFFFFE0) != v43);
        if ((a5 & 0xFFFFFFF0) == (unint64_t)a5)
          goto LABEL_3;
        i = a5 & 0xFFFFFFF0;
        v34 = i;
        if ((a5 & 8) == 0)
          goto LABEL_35;
      }
      else
      {
        v34 = 0;
      }
      v35 = 2 * v34;
      do
      {
        v36 = *(int16x8_t *)(v23 + v35);
        v8.i64[0] = *(uint64_t *)((char *)v24->i64 + v34);
        v37 = (int32x4_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_196889CC0);
        v38 = (int32x4_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_196889CD0);
        v39 = *(int16x8_t *)(v22 + v35);
        v40 = vmlaq_s32(vmlaq_s32(v16, v38, vmovl_high_s16(v36)), vsubq_s32(v19, v38), vmovl_high_s16(v39));
        v41 = vshlq_s32(vmlaq_s32(vmlaq_s32(v16, v37, vmovl_s16(*(int16x4_t *)v36.i8)), vsubq_s32(v19, v37), vmovl_s16(*(int16x4_t *)v39.i8)), v20);
        v42 = vshlq_s32(v40, v20);
        v8 = vuzp1q_s16((int16x8_t)vcltzq_s32(v41), (int16x8_t)vcltzq_s32(v42));
        *(int8x16_t *)(v21 + v35) = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v41, v17), (int16x8_t)vminq_s32(v42, v17)), (int8x16_t)v8);
        v34 += 8;
        v35 += 16;
      }
      while (v18 != v34);
      i = a5 & 0xFFFFFFF8;
      if (v18 != a5)
        goto LABEL_35;
LABEL_3:
      v23 += v15;
      v22 += v15;
      v24 = (int8x16_t *)((char *)v24 + a5);
      v21 += 2 * (a2 >> 1);
      ++v9;
      --a6;
    }
    while (a6);
  }
  return result;
}

unint64_t blend_c(unint64_t result, uint64_t a2, unint64_t a3, int a4, int a5, int8x16_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, int16x8_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  unint64_t v19;
  unint64_t v20;
  int8x16_t *v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint16x8_t v29;
  int32x4_t v30;
  int16x8_t v31;
  uint32x4_t v32;
  uint64_t v33;
  int8x16_t *v34;
  int16x8_t *v35;
  uint16x8_t v36;
  int8x16_t v37;
  int32x4_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int16x8_t v41;
  uint16x8_t v42;
  int16x8_t v43;

  if (a4 >= 1)
  {
    v14 = 0;
    v15 = 2 * a4;
    v16 = 2 * a4;
    v17 = a4 & 0xFFFFFFF8;
    v18.i64[0] = 0x4000000040;
    v18.i64[1] = 0x4000000040;
    v19 = a3;
    v20 = result;
    v21 = a6;
    do
    {
      if (a4 >= 8)
      {
        v22 = 0;
        v23 = result + v15 + v14 * a2;
        v25 = v20 < a3 + v15 + v16 * v14 && v19 < v23;
        v26 = (unint64_t)v21 >= v23 || v20 >= (unint64_t)a6->u64 + a4 + v14 * a4;
        if (v26 && !v25)
        {
          if (a4 < 0x10)
          {
            v27 = 0;
LABEL_22:
            v28 = 2 * v27;
            do
            {
              v29 = *(uint16x8_t *)(v20 + v28);
              a14.i64[0] = *(uint64_t *)((char *)v21->i64 + v27);
              v30 = (int32x4_t)vqtbl1q_s8((int8x16_t)a14, (int8x16_t)xmmword_196889CC0);
              v31 = (int16x8_t)vqtbl1q_s8((int8x16_t)a14, (int8x16_t)xmmword_196889CD0);
              v32 = (uint32x4_t)vmulq_s32(vsubq_s32(v18, (int32x4_t)v31), (int32x4_t)vmovl_high_u16(v29));
              a14 = vuzp1q_s16((int16x8_t)xmmword_196889CC0, v31);
              *(int16x8_t *)(v20 + v28) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16((uint32x4_t)vmulq_s32(vsubq_s32(v18, v30), (int32x4_t)vmovl_u16(*(uint16x4_t *)v29.i8)), *(uint16x4_t *)(v19 + v28), (uint16x4_t)vmovn_s32(v30)), 6uLL), (int32x4_t)vmlal_high_u16(v32, *(uint16x8_t *)(v19 + v28), (uint16x8_t)a14), 6uLL);
              v27 += 8;
              v28 += 16;
            }
            while (v17 != v27);
            v22 = a4 & 0xFFFFFFF8;
            if (v17 == a4)
              goto LABEL_3;
            goto LABEL_6;
          }
          v33 = 0;
          v34 = v21;
          do
          {
            v35 = (int16x8_t *)(v20 + v33);
            v36 = *(uint16x8_t *)(v20 + v33);
            v37 = *v34++;
            v38 = (int32x4_t)vqtbl1q_s8(v37, (int8x16_t)xmmword_196889CB0);
            v39 = (int16x8_t)vqtbl1q_s8(v37, (int8x16_t)xmmword_196889CA0);
            v40 = (int32x4_t)vqtbl1q_s8(v37, (int8x16_t)xmmword_196889CC0);
            v41 = (int16x8_t)vqtbl1q_s8(v37, (int8x16_t)xmmword_196889CD0);
            v42 = *(uint16x8_t *)(v19 + v33);
            a14 = (int16x8_t)vmlal_high_u16((uint32x4_t)vmulq_s32(vsubq_s32(v18, (int32x4_t)v41), (int32x4_t)vmovl_high_u16(v36)), v42, (uint16x8_t)vuzp1q_s16((int16x8_t)xmmword_196889CC0, v41));
            v43 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16((uint32x4_t)vmulq_s32(vsubq_s32(v18, v38), (int32x4_t)vmovl_u16(*(uint16x4_t *)(v20 + v33 + 16))), *(uint16x4_t *)(v19 + v33 + 16), (uint16x4_t)vmovn_s32(v38)), 6uLL), (int32x4_t)vmlal_high_u16((uint32x4_t)vmulq_s32(vsubq_s32(v18, (int32x4_t)v39), (int32x4_t)vmovl_high_u16(*(uint16x8_t *)(v20 + v33 + 16))), *(uint16x8_t *)(v19 + v33 + 16), (uint16x8_t)vuzp1q_s16((int16x8_t)xmmword_196889CC0, v39)), 6uLL);
            *v35 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16((uint32x4_t)vmulq_s32(vsubq_s32(v18, v40), (int32x4_t)vmovl_u16(*(uint16x4_t *)v36.i8)), *(uint16x4_t *)v42.i8, (uint16x4_t)vmovn_s32(v40)), 6uLL), (int32x4_t)a14, 6uLL);
            v35[1] = v43;
            v33 += 32;
          }
          while ((v15 & 0x1FFFFFFE0) != v33);
          if ((a4 & 0xFFFFFFF0) == (unint64_t)a4)
            goto LABEL_3;
          v27 = a4 & 0xFFFFFFF0;
          v22 = v27;
          if ((a4 & 8) != 0)
            goto LABEL_22;
        }
      }
      else
      {
        v22 = 0;
      }
      do
      {
LABEL_6:
        *(_WORD *)(v20 + 2 * v22) = ((64 - v21->u8[v22]) * *(unsigned __int16 *)(v20 + 2 * v22)
                                   + *(unsigned __int16 *)(v19 + 2 * v22) * v21->u8[v22]
                                   + 32) >> 6;
        ++v22;
      }
      while (a4 != v22);
LABEL_3:
      v20 += 2 * (a2 >> 1);
      v19 += v16;
      v21 = (int8x16_t *)((char *)v21 + a4);
      ++v14;
      --a5;
    }
    while (a5);
  }
  return result;
}

unint64_t blend_v_c(unint64_t result, uint64_t a2, unint64_t a3, int a4, int a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, int16x8_t a13)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint16x8_t v30;
  unint64_t v31;
  int32x4_t v32;
  int16x8_t v33;
  uint32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t *v37;
  int16x8_t *v38;
  uint16x8_t v39;
  int8x16_t v40;
  int32x4_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int16x8_t v44;
  uint16x8_t v45;
  int16x8_t v46;

  if (a4 >= 2)
  {
    v13 = 0;
    v14 = (char *)&dav1d_obmc_masks + a4;
    LODWORD(v15) = (3 * a4) >> 2;
    if ((int)v15 <= 1)
      v15 = 1;
    else
      v15 = v15;
    v16 = 2 * v15;
    v17 = 2 * a4;
    v18.i64[0] = 0x4000000040;
    v18.i64[1] = 0x4000000040;
    v19 = a3;
    v20 = result;
    do
    {
      if (v15 >= 8)
      {
        v21 = 0;
        v22 = result + v16 + v13 * a2;
        v24 = v20 < a3 + v16 + v17 * v13 && v19 < v22;
        v25 = (unint64_t)v14 >= v22 || v20 >= (unint64_t)&v14[v15];
        if (v25 && !v24)
        {
          if (v15 < 0x10)
          {
            v26 = 0;
LABEL_25:
            v27 = 2 * v26;
            v28 = (unint64_t *)&v14[v26];
            v29 = v26 - (v15 & 0x1FFFFFF8);
            do
            {
              v30 = *(uint16x8_t *)(v20 + v27);
              v31 = *v28++;
              a13.i64[0] = v31;
              v32 = (int32x4_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_196889CC0);
              v33 = (int16x8_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_196889CD0);
              v34 = (uint32x4_t)vmulq_s32(vsubq_s32(v18, (int32x4_t)v33), (int32x4_t)vmovl_high_u16(v30));
              a13 = vuzp1q_s16((int16x8_t)xmmword_196889CC0, v33);
              *(int16x8_t *)(v20 + v27) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16((uint32x4_t)vmulq_s32(vsubq_s32(v18, v32), (int32x4_t)vmovl_u16(*(uint16x4_t *)v30.i8)), *(uint16x4_t *)(v19 + v27), (uint16x4_t)vmovn_s32(v32)), 6uLL), (int32x4_t)vmlal_high_u16(v34, *(uint16x8_t *)(v19 + v27), (uint16x8_t)a13), 6uLL);
              v27 += 16;
              v29 += 8;
            }
            while (v29);
            v21 = v15 & 0x1FFFFFF8;
            if (v21 == v15)
              goto LABEL_6;
            goto LABEL_9;
          }
          v35 = 0;
          v36 = v15 & 0x1FFFFFF0;
          v37 = (int8x16_t *)((char *)&dav1d_obmc_masks + a4);
          do
          {
            v38 = (int16x8_t *)(v20 + v35);
            v39 = *(uint16x8_t *)(v20 + v35);
            v40 = *v37++;
            v41 = (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_196889CB0);
            v42 = (int16x8_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_196889CA0);
            v43 = (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_196889CC0);
            v44 = (int16x8_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_196889CD0);
            v45 = *(uint16x8_t *)(v19 + v35);
            a13 = (int16x8_t)vmlal_high_u16((uint32x4_t)vmulq_s32(vsubq_s32(v18, (int32x4_t)v44), (int32x4_t)vmovl_high_u16(v39)), v45, (uint16x8_t)vuzp1q_s16((int16x8_t)xmmword_196889CC0, v44));
            v46 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16((uint32x4_t)vmulq_s32(vsubq_s32(v18, v41), (int32x4_t)vmovl_u16(*(uint16x4_t *)(v20 + v35 + 16))), *(uint16x4_t *)(v19 + v35 + 16), (uint16x4_t)vmovn_s32(v41)), 6uLL), (int32x4_t)vmlal_high_u16((uint32x4_t)vmulq_s32(vsubq_s32(v18, (int32x4_t)v42), (int32x4_t)vmovl_high_u16(*(uint16x8_t *)(v20 + v35 + 16))), *(uint16x8_t *)(v19 + v35 + 16), (uint16x8_t)vuzp1q_s16((int16x8_t)xmmword_196889CC0, v42)), 6uLL);
            *v38 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16((uint32x4_t)vmulq_s32(vsubq_s32(v18, v43), (int32x4_t)vmovl_u16(*(uint16x4_t *)v39.i8)), *(uint16x4_t *)v45.i8, (uint16x4_t)vmovn_s32(v43)), 6uLL), (int32x4_t)a13, 6uLL);
            v38[1] = v46;
            v35 += 32;
            v36 -= 16;
          }
          while (v36);
          if ((v15 & 0x1FFFFFF0) == v15)
            goto LABEL_6;
          v26 = v15 & 0x1FFFFFF0;
          v21 = v26;
          if ((v15 & 8) != 0)
            goto LABEL_25;
        }
      }
      else
      {
        v21 = 0;
      }
      do
      {
LABEL_9:
        *(_WORD *)(v20 + 2 * v21) = ((64 - v14[v21]) * *(unsigned __int16 *)(v20 + 2 * v21)
                                   + *(unsigned __int16 *)(v19 + 2 * v21) * v14[v21]
                                   + 32) >> 6;
        ++v21;
      }
      while (v15 != v21);
LABEL_6:
      v20 += 2 * (a2 >> 1);
      v19 += v17;
      ++v13;
      --a5;
    }
    while (a5);
  }
  return result;
}

unint64_t blend_h_c(unint64_t result, uint64_t a2, unint64_t a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int32x4_t v16;
  int16x8_t *v17;
  uint16x8_t v18;
  int16x8_t v19;

  if (a4 >= 1)
  {
    v5 = 0;
    v6 = (3 * a5) >> 2;
    v7 = 2 * a4;
    v8 = 2 * a4;
    v9 = (unsigned __int8 *)&dav1d_obmc_masks + a5;
    v10 = a3;
    v11 = result;
    do
    {
      v12 = *v9;
      v13 = 64 - v12;
      if (a4 >= 0x10)
      {
        v14 = 0;
        if (v11 >= a3 + v7 + v8 * v5 || v10 >= result + v7 + v5 * a2)
        {
          v16 = vdupq_n_s32(v13);
          do
          {
            v17 = (int16x8_t *)(v11 + v14);
            v18 = (uint16x8_t)vdupq_n_s16(v12);
            v19 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16((uint32x4_t)vmulq_s32(v16, (int32x4_t)vmovl_u16(*(uint16x4_t *)(v11 + v14 + 16))), *(uint16x4_t *)v18.i8, *(uint16x4_t *)(v10 + v14 + 16)), 6uLL), (int32x4_t)vmlal_high_u16((uint32x4_t)vmulq_s32(v16, (int32x4_t)vmovl_high_u16(*(uint16x8_t *)(v11 + v14 + 16))), v18, *(uint16x8_t *)(v10 + v14 + 16)), 6uLL);
            *v17 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16((uint32x4_t)vmulq_s32(v16, (int32x4_t)vmovl_u16(*(uint16x4_t *)(v11 + v14))), *(uint16x4_t *)v18.i8, *(uint16x4_t *)(v10 + v14)), 6uLL), (int32x4_t)vmlal_high_u16((uint32x4_t)vmulq_s32(v16, (int32x4_t)vmovl_high_u16(*(uint16x8_t *)(v11 + v14))), v18, *(uint16x8_t *)(v10 + v14)), 6uLL);
            v17[1] = v19;
            v14 += 32;
          }
          while ((v7 & 0x1FFFFFFE0) != v14);
          v14 = a4 & 0xFFFFFFF0;
          if (v14 == a4)
            goto LABEL_3;
        }
      }
      else
      {
        v14 = 0;
      }
      do
      {
        *(_WORD *)(v11 + 2 * v14) = (*(unsigned __int16 *)(v10 + 2 * v14) * v12
                                   + v13 * *(unsigned __int16 *)(v11 + 2 * v14)
                                   + 32) >> 6;
        ++v14;
      }
      while (a4 != v14);
LABEL_3:
      ++v9;
      v11 += 2 * (a2 >> 1);
      v10 += v8;
      ++v5;
      --v6;
    }
    while (v6);
  }
  return result;
}

unint64_t w_mask_444_c(unint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, int a5, int a6, int8x16_t *a7, uint64_t a8, signed int a9)
{
  uint64_t v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  uint64_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int8x16_t *v26;
  uint64_t i;
  int v28;
  int v29;
  int v30;
  signed int v31;
  int v32;
  __int16 v33;
  __int16 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v41;
  BOOL v43;
  BOOL v45;
  BOOL v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int16x8_t v54;
  int32x4_t v55;
  int32x4_t v56;
  uint16x8_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  uint64_t v64;
  int8x16_t *v65;
  int16x8_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  uint32x4_t v79;
  int32x4_t v80;
  uint32x4_t v81;
  uint32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int8x16_t *v96;
  int8x16x2_t v97;
  int8x16x4_t v98;

  if (a5 >= 1)
  {
    v9 = 0;
    v10 = __clz(a9);
    v11 = v10 - 18;
    v12 = v10 - 12;
    v13 = (32 << v11) + 0x80000;
    v14 = 2 * a5;
    v15 = 2 * a5;
    v16 = vdupq_n_s32(v13);
    v17 = vdupq_n_s32(a9);
    v18 = a5 & 0xFFFFFFF8;
    v19.i64[0] = 0x2000000020;
    v19.i64[1] = 0x2000000020;
    v20.i64[0] = 0x1A0000001ALL;
    v20.i64[1] = 0x1A0000001ALL;
    v21.i64[0] = 0x2600000026;
    v21.i64[1] = 0x2600000026;
    v22 = vnegq_s32(vdupq_n_s32(v12));
    v23 = result;
    v24 = a4;
    v25 = a3;
    v26 = a7;
    do
    {
      if (a5 < 8)
      {
        for (i = 0; i != a5; v26->i8[i++] = v31 + 38)
        {
LABEL_6:
          v28 = *(__int16 *)(v25 + 2 * i);
          v29 = *(__int16 *)(v24 + 2 * i);
          v30 = v28 - v29;
          if (v28 - v29 < 0)
            v30 = v29 - v28;
          v31 = (v30 + 32) >> 10;
          if (v31 >= 26)
            v31 = 26;
          v32 = (int)(v13 + (26 - v31) * v29 + (v31 + 38) * v28) >> v12;
          if (v32 >= a9)
            v33 = a9;
          else
            v33 = v32;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          *(_WORD *)(v23 + 2 * i) = v34;
        }
        goto LABEL_3;
      }
      i = 0;
      v35 = v14 + v15 * v9;
      v36 = a4 + v35;
      v37 = a3 + v35;
      v38 = (unint64_t)a7->u64 + a5 + v9 * a5;
      v39 = result + v14 + v9 * a2;
      v41 = v23 < a3 + v35 && v25 < v39;
      v43 = v23 < v36 && v24 < v39;
      v45 = (unint64_t)v26 < v37 && v25 < v38;
      v47 = (unint64_t)v26 < v36 && v24 < v38;
      v48 = (unint64_t)v26 >= v39 || v23 >= v38;
      if (!v48 || v41 || v43 || v45 || v47)
        goto LABEL_6;
      if (a5 >= 0x10)
      {
        v64 = 0;
        v65 = v26;
        do
        {
          v66 = *(int16x8_t *)(v25 + v64);
          v67 = *(int16x8_t *)(v25 + v64 + 16);
          v68 = vmovl_high_s16(v67);
          v69 = vmovl_s16(*(int16x4_t *)v67.i8);
          v70 = vmovl_high_s16(v66);
          v71 = vmovl_s16(*(int16x4_t *)v66.i8);
          v73 = *(int16x8_t *)(v24 + v64);
          v72 = *(int16x8_t *)(v24 + v64 + 16);
          v74 = vmovl_s16(*(int16x4_t *)v73.i8);
          v75 = vmovl_high_s16(v73);
          v76 = vmovl_s16(*(int16x4_t *)v72.i8);
          v77 = vmovl_high_s16(v72);
          v78.i64[0] = 0x2000000020;
          v78.i64[1] = 0x2000000020;
          v79 = (uint32x4_t)vabal_s16(v78, *(int16x4_t *)v66.i8, *(int16x4_t *)v73.i8);
          v80.i64[0] = 0x2000000020;
          v80.i64[1] = 0x2000000020;
          v81 = (uint32x4_t)vabal_high_s16(v80, v66, v73);
          v66.i64[0] = 0x2000000020;
          v66.i64[1] = 0x2000000020;
          v82 = (uint32x4_t)vabal_s16((int32x4_t)v66, *(int16x4_t *)v67.i8, *(int16x4_t *)v72.i8);
          v73.i64[0] = 0x2000000020;
          v73.i64[1] = 0x2000000020;
          v83 = (int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16((int32x4_t)v73, v67, v72), 0xAuLL);
          v84 = vminq_s32((int32x4_t)vshrq_n_u32(v79, 0xAuLL), v20);
          v85 = vminq_s32((int32x4_t)vshrq_n_u32(v81, 0xAuLL), v20);
          v86 = vminq_s32((int32x4_t)vshrq_n_u32(v82, 0xAuLL), v20);
          v87 = vminq_s32(v83, v20);
          v98.val[3] = (int8x16_t)vaddq_s32(v87, v21);
          v98.val[2] = (int8x16_t)vaddq_s32(v86, v21);
          v98.val[1] = (int8x16_t)vaddq_s32(v85, v21);
          v98.val[0] = (int8x16_t)vaddq_s32(v84, v21);
          v88 = vmlaq_s32(v16, vsubq_s32(v20, v84), v74);
          v89 = vmlaq_s32(v16, vsubq_s32(v20, v85), v75);
          v90 = vmlaq_s32(v16, vsubq_s32(v20, v86), v76);
          v91 = vmlaq_s32(vmlaq_s32(v16, vsubq_s32(v20, v87), v77), (int32x4_t)v98.val[3], v68);
          v92 = vshlq_s32(vmlaq_s32(v88, (int32x4_t)v98.val[0], v71), v22);
          v93 = vshlq_s32(vmlaq_s32(v89, (int32x4_t)v98.val[1], v70), v22);
          v94 = vshlq_s32(vmlaq_s32(v90, (int32x4_t)v98.val[2], v69), v22);
          v95 = vshlq_s32(v91, v22);
          v96 = (int8x16_t *)(v23 + v64);
          *v96 = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v92, v17), (int16x8_t)vminq_s32(v93, v17)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v92), (int16x8_t)vcltzq_s32(v93)));
          v96[1] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v94, v17), (int16x8_t)vminq_s32(v95, v17)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v94), (int16x8_t)vcltzq_s32(v95)));
          *v65++ = vqtbl4q_s8(v98, (int8x16_t)xmmword_19689A980);
          v64 += 32;
        }
        while ((v14 & 0x1FFFFFFE0) != v64);
        if ((a5 & 0xFFFFFFF0) == (unint64_t)a5)
          goto LABEL_3;
        i = a5 & 0xFFFFFFF0;
        v49 = i;
        if ((a5 & 8) == 0)
          goto LABEL_6;
      }
      else
      {
        v49 = 0;
      }
      v50 = 2 * v49;
      do
      {
        v51 = *(int16x8_t *)(v25 + v50);
        v52 = vmovl_high_s16(v51);
        v53 = vmovl_s16(*(int16x4_t *)v51.i8);
        v54 = *(int16x8_t *)(v24 + v50);
        v55 = vmovl_s16(*(int16x4_t *)v54.i8);
        v56 = vmovl_high_s16(v54);
        v57 = (uint16x8_t)vabdq_s16(v51, v54);
        v58 = vminq_s32((int32x4_t)vshrq_n_u32(vaddw_u16(v19, *(uint16x4_t *)v57.i8), 0xAuLL), v20);
        v59 = vminq_s32((int32x4_t)vshrq_n_u32(vaddw_high_u16(v19, v57), 0xAuLL), v20);
        v97.val[1] = (int8x16_t)vaddq_s32(v59, v21);
        v97.val[0] = (int8x16_t)vaddq_s32(v58, v21);
        v60 = vmlaq_s32(v16, vsubq_s32(v20, v58), v55);
        v61 = vmlaq_s32(vmlaq_s32(v16, vsubq_s32(v20, v59), v56), (int32x4_t)v97.val[1], v52);
        v62 = vshlq_s32(vmlaq_s32(v60, (int32x4_t)v97.val[0], v53), v22);
        v63 = vshlq_s32(v61, v22);
        *(int8x16_t *)(v23 + v50) = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v62, v17), (int16x8_t)vminq_s32(v63, v17)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v62), (int16x8_t)vcltzq_s32(v63)));
        *(uint64_t *)((char *)v26->i64 + v49) = vqtbl2q_s8(v97, (int8x16_t)xmmword_19689A990).u64[0];
        v49 += 8;
        v50 += 16;
      }
      while (v18 != v49);
      i = a5 & 0xFFFFFFF8;
      if (v18 != a5)
        goto LABEL_6;
LABEL_3:
      v25 += v15;
      v24 += v15;
      v23 += 2 * (a2 >> 1);
      v26 = (int8x16_t *)((char *)v26 + a5);
      ++v9;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t w_mask_422_c(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, int a5, int a6, unint64_t a7, unsigned int a8, signed int a9)
{
  uint64_t v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  unint64_t v22;
  unint64_t v23;
  uint32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  signed int v39;
  int v40;
  int v41;
  __int16 v42;
  int v43;
  int v44;
  int v45;
  signed int v46;
  int v47;
  int v48;
  int v49;
  __int16 v50;
  __int16 v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  BOOL v58;
  BOOL v60;
  BOOL v62;
  BOOL v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  const __int16 *v68;
  const __int16 *v69;
  uint16x8_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  __int16 *v84;
  int32x4_t v85;
  uint32x4_t v86;
  uint32x4_t v87;
  uint64_t v88;
  uint64_t v89;
  const __int16 *v90;
  const __int16 *v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int8x16_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int8x16_t v115;
  uint32x4_t v116;
  __int16 *v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int8x16_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v130;
  int16x8x2_t v131;
  int16x8x2_t v132;
  int16x8x2_t v133;
  int16x8x2_t v134;
  int16x8x2_t v135;
  int16x8x2_t v136;
  int16x8x2_t v137;
  int8x16x4_t v138;

  v125 = result;
  if (a5 >= 1)
  {
    v9 = 0;
    v10 = __clz(a9);
    v11 = v10 - 18;
    v12 = v10 - 12;
    v13 = (32 << v11) + 0x80000;
    v14 = (uint64_t)a5 >> 1;
    v15 = (unint64_t)(a5 - 1) >> 1;
    v16 = 4 * v15 + 4;
    v17 = v15 + 1;
    v18 = 2 * a5;
    v19 = vdupq_n_s32(v13);
    v20 = vdupq_n_s32(a9);
    v21 = vdupq_n_s32(a8);
    v22 = v17 & 0xFFFFFFFFFFFFFFF0;
    v130 = v17;
    v23 = v17 & 0xFFFFFFFFFFFFFFF8;
    v123 = 2 * (v17 & 0xFFFFFFFFFFFFFFF0);
    v124 = 2 * (v17 & 0xFFFFFFFFFFFFFFF8);
    v24.i64[0] = 0x2000000020;
    v24.i64[1] = 0x2000000020;
    v25.i64[0] = 0x1A0000001ALL;
    v25.i64[1] = 0x1A0000001ALL;
    v26.i64[0] = 0x2600000026;
    v26.i64[1] = 0x2600000026;
    v27 = vnegq_s32(vdupq_n_s32(v12));
    v28.i64[0] = 0x2700000027;
    v28.i64[1] = 0x2700000027;
    v29 = v125;
    v31 = a3;
    v30 = a4;
    v32 = a7;
    do
    {
      if (a5 < 0xF)
      {
        v33 = 0;
LABEL_6:
        v34 = v33 >> 1;
        v35 = 2 * v33;
        do
        {
          v36 = *(__int16 *)(v31 + v35);
          v37 = *(__int16 *)(v30 + v35);
          v38 = v36 - v37;
          if (v36 - v37 < 0)
            v38 = v37 - v36;
          v39 = (v38 + 32) >> 10;
          if (v39 >= 26)
            v39 = 26;
          v40 = (int)(v13 + (26 - v39) * v37 + (v39 + 38) * v36) >> v12;
          if (v40 >= a9)
            LOWORD(v41) = a9;
          else
            v41 = (int)(v13 + (26 - v39) * v37 + (v39 + 38) * v36) >> v12;
          if (v40 >= 0)
            v42 = v41;
          else
            v42 = 0;
          *(_WORD *)(v29 + v35) = v42;
          v43 = *(__int16 *)(v31 + v35 + 2);
          v44 = *(__int16 *)(v30 + v35 + 2);
          v45 = v43 - v44;
          if (v43 - v44 < 0)
            v45 = v44 - v43;
          v46 = (v45 + 32) >> 10;
          if (v46 >= 26)
            v46 = 26;
          v47 = 26 - v46;
          v48 = v46 + 38;
          v49 = (int)(v13 + v47 * v44 + v48 * v43) >> v12;
          if (v49 >= a9)
            v50 = a9;
          else
            v50 = v49;
          if (v49 >= 0)
            v51 = v50;
          else
            v51 = 0;
          result = (v39 - a8 + v48 + 39) >> 1;
          *(_WORD *)(v29 + v35 + 2) = v51;
          *(_BYTE *)(v32 + v34) = result;
          v33 += 2;
          ++v34;
          v35 += 4;
        }
        while ((uint64_t)v33 < a5);
        goto LABEL_3;
      }
      v33 = 0;
      v52 = v16 + v18 * v9;
      v53 = a4 + v52;
      v54 = a3 + v52;
      v55 = a7 + v130 + v9 * v14;
      result = v125;
      v56 = v125 + v16 + v9 * a2;
      v58 = v29 < v54 && v31 < v56;
      v60 = v29 < v53 && v30 < v56;
      v62 = v32 < v54 && v31 < v55;
      v64 = v32 < v53 && v30 < v55;
      v65 = v32 >= v56 || v29 >= v55;
      if (!v65 || v58 || v60 || v62 || v64)
        goto LABEL_6;
      if (a5 >= 0x1F)
      {
        v88 = 0;
        v89 = 0;
        do
        {
          v90 = (const __int16 *)(v31 + v88);
          v134 = vld2q_s16(v90);
          v90 += 16;
          v133 = vld2q_s16(v90);
          v91 = (const __int16 *)(v30 + v88);
          v137 = vld2q_s16(v91);
          v91 += 16;
          *(int16x8x2_t *)v138.val[1].i8 = vld2q_s16(v91);
          v92.i64[0] = 0x2000000020;
          v92.i64[1] = 0x2000000020;
          v93.i64[0] = 0x2000000020;
          v93.i64[1] = 0x2000000020;
          v94.i64[0] = 0x2000000020;
          v94.i64[1] = 0x2000000020;
          v95.i64[0] = 0x2000000020;
          v95.i64[1] = 0x2000000020;
          v96 = (int32x4_t)vshrq_n_u32((uint32x4_t)vabal_s16(v92, *(int16x4_t *)v133.val[0].i8, *(int16x4_t *)v138.val[1].i8), 0xAuLL);
          v97 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_s16(v94, *(int16x4_t *)v134.val[0].i8, *(int16x4_t *)v137.val[0].i8), 0xAuLL), v25);
          v98 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v95, v134.val[0], v137.val[0]), 0xAuLL), v25);
          v99 = vminq_s32(v96, v25);
          v100 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v93, v133.val[0], (int16x8_t)v138.val[1]), 0xAuLL), v25);
          v101 = vmlaq_s32(vmlaq_s32(v19, vsubq_s32(v25, v98), vmovl_high_s16(v137.val[0])), vaddq_s32(v98, v26), vmovl_high_s16(v134.val[0]));
          v102 = vmlaq_s32(vmlaq_s32(v19, vsubq_s32(v25, v97), vmovl_s16(*(int16x4_t *)v137.val[0].i8)), vaddq_s32(v97, v26), vmovl_s16(*(int16x4_t *)v134.val[0].i8));
          v103.i64[0] = 0x2000000020;
          v103.i64[1] = 0x2000000020;
          v93.i64[0] = 0x2000000020;
          v93.i64[1] = 0x2000000020;
          v137.val[0] = (int16x8_t)vmovl_high_s16(v137.val[1]);
          v104 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_s16(v103, *(int16x4_t *)v134.val[1].i8, *(int16x4_t *)v137.val[1].i8), 0xAuLL), v25);
          v105 = vmlaq_s32(v19, vsubq_s32(v25, v104), vmovl_s16(*(int16x4_t *)v137.val[1].i8));
          v106 = vshlq_s32(v102, v27);
          v107 = vshlq_s32(v101, v27);
          v108 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v93, v134.val[1], v137.val[1]), 0xAuLL), v25);
          v137.val[1] = (int16x8_t)vmlaq_s32(vmlaq_s32(v19, vsubq_s32(v25, v100), vmovl_high_s16((int16x8_t)v138.val[1])), vaddq_s32(v100, v26), vmovl_high_s16(v133.val[0]));
          v109 = vmlaq_s32(v19, vsubq_s32(v25, v108), (int32x4_t)v137.val[0]);
          v137.val[0] = vuzp1q_s16((int16x8_t)vcltzq_s32(v106), (int16x8_t)vcltzq_s32(v107));
          v110 = (int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v106, v20), (int16x8_t)vminq_s32(v107, v20));
          v111 = vmovl_high_s16(v134.val[1]);
          v134.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v134.val[1].i8);
          v134.val[1] = (int16x8_t)vaddq_s32(v108, v26);
          v112 = vaddq_s32(v104, v26);
          v113 = vmlaq_s32(vmlaq_s32(v19, vsubq_s32(v25, v99), vmovl_s16(*(int16x4_t *)v138.val[1].i8)), vaddq_s32(v99, v26), vmovl_s16(*(int16x4_t *)v133.val[0].i8));
          v134.val[0] = (int16x8_t)vshlq_s32(vmlaq_s32(v105, v112, (int32x4_t)v134.val[0]), v27);
          v114 = vshlq_s32(vmlaq_s32(v109, (int32x4_t)v134.val[1], v111), v27);
          v115 = (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32((int32x4_t)v134.val[0]), (int16x8_t)vcltzq_s32(v114));
          v134.val[0] = vuzp1q_s16((int16x8_t)vminq_s32((int32x4_t)v134.val[0], v20), (int16x8_t)vminq_s32(v114, v20));
          v114.i64[0] = 0x2000000020;
          v114.i64[1] = 0x2000000020;
          v131.val[0] = (int16x8_t)vbicq_s8(v110, (int8x16_t)v137.val[0]);
          v131.val[1] = (int16x8_t)vbicq_s8((int8x16_t)v134.val[0], v115);
          v134.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v138.val[2].i8);
          v116 = (uint32x4_t)vabal_s16(v114, *(int16x4_t *)v133.val[1].i8, *(int16x4_t *)v138.val[2].i8);
          v137.val[0].i64[0] = 0x2000000020;
          v137.val[0].i64[1] = 0x2000000020;
          v138.val[1] = (int8x16_t)vmovl_high_s16((int16x8_t)v138.val[2]);
          v117 = (__int16 *)(v29 + v88);
          v138.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vabal_high_s16((int32x4_t)v137.val[0], v133.val[1], (int16x8_t)v138.val[2]), 0xAuLL);
          vst2q_s16(v117, v131);
          v117 += 16;
          v137.val[0] = (int16x8_t)vshlq_s32(v113, v27);
          v118 = vminq_s32((int32x4_t)vshrq_n_u32(v116, 0xAuLL), v25);
          v138.val[2] = (int8x16_t)vminq_s32((int32x4_t)v138.val[2], v25);
          v137.val[1] = (int16x8_t)vshlq_s32((int32x4_t)v137.val[1], v27);
          v119 = vmlaq_s32(v19, vsubq_s32(v25, v118), (int32x4_t)v134.val[0]);
          v120 = vmlaq_s32(v19, vsubq_s32(v25, (int32x4_t)v138.val[2]), (int32x4_t)v138.val[1]);
          v134.val[0] = vuzp1q_s16((int16x8_t)vcltzq_s32((int32x4_t)v137.val[0]), (int16x8_t)vcltzq_s32((int32x4_t)v137.val[1]));
          v138.val[1] = (int8x16_t)vmovl_high_s16(v133.val[1]);
          v133.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v133.val[1].i8);
          v133.val[1] = (int16x8_t)vaddq_s32((int32x4_t)v138.val[2], v26);
          v121 = vmlaq_s32(v120, (int32x4_t)v133.val[1], (int32x4_t)v138.val[1]);
          v138.val[1] = (int8x16_t)vminq_s32((int32x4_t)v137.val[1], v20);
          v138.val[2] = (int8x16_t)vminq_s32((int32x4_t)v137.val[0], v20);
          v137.val[0] = (int16x8_t)vaddq_s32(v118, v26);
          v133.val[0] = (int16x8_t)vshlq_s32(vmlaq_s32(v119, (int32x4_t)v137.val[0], (int32x4_t)v133.val[0]), v27);
          v137.val[1] = (int16x8_t)vshlq_s32(v121, v27);
          v138.val[1] = (int8x16_t)vuzp1q_s16((int16x8_t)v138.val[2], (int16x8_t)v138.val[1]);
          v138.val[2] = (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32((int32x4_t)v133.val[0]), (int16x8_t)vcltzq_s32((int32x4_t)v137.val[1]));
          v133.val[0] = vuzp1q_s16((int16x8_t)vminq_s32((int32x4_t)v133.val[0], v20), (int16x8_t)vminq_s32((int32x4_t)v137.val[1], v20));
          v137.val[1] = (int16x8_t)vbicq_s8(v138.val[1], (int8x16_t)v134.val[0]);
          v122 = vbicq_s8((int8x16_t)v133.val[0], v138.val[2]);
          vst2q_s16(v117, *(int16x8x2_t *)((char *)&v137 + 16));
          v134.val[0] = (int16x8_t)vaddq_s32(vsubq_s32(v99, v21), (int32x4_t)v137.val[0]);
          v138.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vaddq_s32(vsubq_s32(v98, v21), (int32x4_t)v134.val[1]), v28), 1uLL);
          v138.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vaddq_s32(vsubq_s32(v100, v21), (int32x4_t)v133.val[1]), v28), 1uLL);
          v138.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vaddq_s32(vsubq_s32(v97, v21), v112), v28), 1uLL);
          v138.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)v134.val[0], v28), 1uLL);
          *(int8x16_t *)(v32 + v89) = vqtbl4q_s8(v138, (int8x16_t)xmmword_19689A980);
          v89 += 16;
          v88 += 64;
        }
        while (v22 != v89);
        if (v130 == v22)
          goto LABEL_3;
        v66 = v22;
        v33 = v123;
        if ((v130 & 8) == 0)
          goto LABEL_6;
      }
      else
      {
        v66 = 0;
      }
      v67 = 4 * v66;
      do
      {
        v68 = (const __int16 *)(v31 + v67);
        v132 = vld2q_s16(v68);
        v69 = (const __int16 *)(v30 + v67);
        v135 = vld2q_s16(v69);
        v70 = (uint16x8_t)vabdq_s16(v132.val[0], v135.val[0]);
        v71 = vminq_s32((int32x4_t)vshrq_n_u32(vaddw_u16(v24, *(uint16x4_t *)v70.i8), 0xAuLL), v25);
        v72 = vminq_s32((int32x4_t)vshrq_n_u32(vaddw_high_u16(v24, v70), 0xAuLL), v25);
        v73 = vshlq_s32(vmlaq_s32(vmlaq_s32(v19, vsubq_s32(v25, v71), vmovl_s16(*(int16x4_t *)v135.val[0].i8)), vaddq_s32(v71, v26), vmovl_s16(*(int16x4_t *)v132.val[0].i8)), v27);
        v74 = vshlq_s32(vmlaq_s32(vmlaq_s32(v19, vsubq_s32(v25, v72), vmovl_high_s16(v135.val[0])), vaddq_s32(v72, v26), vmovl_high_s16(v132.val[0])), v27);
        v75 = (int16x8_t)vcltzq_s32(v74);
        v76 = vmovl_high_s16(v132.val[1]);
        v77 = (int16x8_t)vcltzq_s32(v73);
        v78 = vmovl_s16(*(int16x4_t *)v132.val[1].i8);
        v79 = vmovl_s16(*(int16x4_t *)v135.val[1].i8);
        v80 = vmovl_high_s16(v135.val[1]);
        v132.val[0] = vabdq_s16(v132.val[1], v135.val[1]);
        v135.val[0] = (int16x8_t)vminq_s32(v74, v20);
        v132.val[1] = (int16x8_t)vminq_s32((int32x4_t)vshrq_n_u32(vaddw_u16(v24, *(uint16x4_t *)v132.val[0].i8), 0xAuLL), v25);
        v132.val[0] = (int16x8_t)vminq_s32((int32x4_t)vshrq_n_u32(vaddw_high_u16(v24, (uint16x8_t)v132.val[0]), 0xAuLL), v25);
        v135.val[1] = (int16x8_t)vaddq_s32((int32x4_t)v132.val[0], v26);
        v81 = vaddq_s32((int32x4_t)v132.val[1], v26);
        v82 = vmlaq_s32(v19, vsubq_s32(v25, (int32x4_t)v132.val[1]), v79);
        v132.val[1] = (int16x8_t)vmlaq_s32(vmlaq_s32(v19, vsubq_s32(v25, (int32x4_t)v132.val[0]), v80), (int32x4_t)v135.val[1], v76);
        v132.val[0] = vuzp1q_s16((int16x8_t)vminq_s32(v73, v20), v135.val[0]);
        v83 = vshlq_s32(vmlaq_s32(v82, v81, v78), v27);
        v132.val[1] = (int16x8_t)vshlq_s32((int32x4_t)v132.val[1], v27);
        v135.val[0] = vuzp1q_s16((int16x8_t)vcltzq_s32(v83), (int16x8_t)vcltzq_s32((int32x4_t)v132.val[1]));
        v132.val[1] = vuzp1q_s16((int16x8_t)vminq_s32(v83, v20), (int16x8_t)vminq_s32((int32x4_t)v132.val[1], v20));
        v84 = (__int16 *)(v29 + v67);
        v85 = vsubq_s32(v72, v21);
        v136.val[0] = (int16x8_t)vbicq_s8((int8x16_t)v132.val[0], (int8x16_t)vuzp1q_s16(v77, v75));
        v86 = (uint32x4_t)vaddq_s32(vaddq_s32(vsubq_s32(v71, v21), v81), v28);
        v87 = vshrq_n_u32((uint32x4_t)vaddq_s32(vaddq_s32(v85, (int32x4_t)v135.val[1]), v28), 1uLL);
        v136.val[1] = (int16x8_t)vbicq_s8((int8x16_t)v132.val[1], (int8x16_t)v135.val[0]);
        v135.val[1] = (int16x8_t)vshrq_n_u32(v86, 1uLL);
        vst2q_s16(v84, v136);
        *(_QWORD *)(v32 + (v66 & 0x7FFFFFFFFFFFFFF8)) = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v135 + 16), (int8x16_t)xmmword_19689A990).u64[0];
        v66 += 8;
        v67 += 32;
      }
      while (v23 != v66);
      v33 = v124;
      if (v130 != v23)
        goto LABEL_6;
LABEL_3:
      v31 += v18;
      v30 += v18;
      v29 += 2 * (a2 >> 1);
      v32 += v14;
      ++v9;
      --a6;
    }
    while (a6);
  }
  return result;
}

unint64_t w_mask_420_c(unint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, int a5, int a6, uint8x8_t *a7, unsigned int a8, signed int a9)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  uint64_t v23;
  uint32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  unint64_t v48;
  char *v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int8x16_t *v62;
  const __int16 *v63;
  const __int16 *v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int32x4_t v80;
  int8x16_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  __int16 *v98;
  int32x4_t v99;
  uint64_t v100;
  unint64_t v101;
  uint8x8_t *v102;
  const __int16 *v103;
  const __int16 *v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int8x16_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int8x16_t v127;
  uint32x4_t v128;
  __int16 *v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int8x16_t v134;
  uint64_t v135;
  const __int16 *v136;
  const __int16 *v137;
  uint16x8_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int16x8_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int8x16_t v152;
  __int16 *v153;
  uint32x4_t v154;
  uint32x4_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  _BYTE *v163;
  int v164;
  int v165;
  int v166;
  signed int v167;
  int v168;
  __int16 v169;
  BOOL v170;
  _WORD *v171;
  int v172;
  int v173;
  int v174;
  signed int v175;
  unsigned int v176;
  int v177;
  int v178;
  __int16 v179;
  __int16 v180;
  uint64_t v181;
  const __int16 *v182;
  const __int16 *v183;
  uint16x8_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  uint16x8_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int8x16_t v199;
  int32x4_t v200;
  __int16 *v201;
  int32x4_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  _BYTE *v211;
  int v212;
  int v213;
  int v214;
  signed int v215;
  char v216;
  int v217;
  __int16 v218;
  __int16 v219;
  int v220;
  int v221;
  int v222;
  signed int v223;
  int v224;
  __int16 v225;
  __int16 v226;
  int32x4_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  int16x8x2_t v233;
  int16x8x2_t v234;
  int16x8x2_t v235;
  int16x8x2_t v236;
  int16x8x2_t v237;
  int8x16x2_t v238;
  int16x8x2_t v239;
  int16x8x2_t v240;
  int16x8x2_t v241;
  int16x8x2_t v242;
  int16x8x2_t v243;
  int16x8x2_t v244;
  int16x8x2_t v245;
  int16x8x2_t v246;
  int8x16x4_t v247;

  if (a5 >= 1)
  {
    v10 = a2;
    v11 = 0;
    v12 = __clz(a9);
    v13 = v12 - 18;
    v14 = v12 - 12;
    v15 = (32 << v13) + 0x80000;
    v16 = (unint64_t)(a5 - 1) >> 1;
    v17 = 4 * v16 + 4;
    v18 = v16 + 1;
    v19 = 2 * a5;
    v20 = vdupq_n_s32(v15);
    v21 = vdupq_n_s32(a9);
    v22 = vdupq_n_s32(a8);
    v229 = (v16 + 1) & 0xFFFFFFFFFFFFFFF0;
    v228 = (v16 + 1) & 0xFFFFFFFFFFFFFFF8;
    v23 = 2 * (a2 >> 1);
    v24.i64[0] = 0x2000000020;
    v24.i64[1] = 0x2000000020;
    v25.i64[0] = 0x1A0000001ALL;
    v25.i64[1] = 0x1A0000001ALL;
    v26.i64[0] = 0x2600000026;
    v26.i64[1] = 0x2600000026;
    v27 = vnegq_s32(vdupq_n_s32(v14));
    v28.i64[0] = 0x2800000028;
    v28.i64[1] = 0x2800000028;
    v29 = result;
    v30 = a4;
    v31 = a3;
    v227 = v22;
    v230 = v23;
    do
    {
      v33 = result + v17 + v11 * v10;
      v34 = v17 + v19 * v11;
      v35 = a3 + v34;
      v36 = a4 + v34;
      v37 = 0;
      if ((a6 & 1) != 0)
      {
        if (a5 < 0xF)
          goto LABEL_89;
        v49 = (char *)a7 + v18;
        v50 = v29 >= v35 || v31 >= v33;
        v51 = !v50;
        v52 = v29 >= v36 || v30 >= v33;
        v53 = !v52;
        v54 = (unint64_t)a7 >= v35 || v31 >= (unint64_t)v49;
        v55 = !v54;
        v56 = (unint64_t)a7 >= v36 || v30 >= (unint64_t)v49;
        v57 = !v56;
        v58 = (unint64_t)a7 >= v33 || v29 >= (unint64_t)v49;
        if (!v58 || v51 || v53 || v55 || v57)
        {
LABEL_89:
          v231 = v11;
          v156 = v19;
          v157 = v18;
          v158 = v17;
          v159 = result;
          v160 = a3;
          v161 = a4;
          v162 = 2 * v37;
          v163 = (char *)a7 + ((unint64_t)v37 >> 1);
          do
          {
            v164 = *(__int16 *)(v31 + v162);
            v165 = *(__int16 *)(v30 + v162);
            v166 = v164 - v165;
            if (v164 - v165 < 0)
              v166 = v165 - v164;
            v167 = (v166 + 32) >> 10;
            if (v167 >= 26)
              v167 = 26;
            v168 = (int)(v15 + (26 - v167) * v165 + (v167 + 38) * v164) >> v14;
            if (v168 >= a9)
              v169 = a9;
            else
              v169 = v168;
            v170 = v168 < 0;
            v171 = (_WORD *)(v29 + v162);
            if (v170)
              v169 = 0;
            *v171 = v169;
            v172 = *(__int16 *)(v31 + v162 + 2);
            v173 = *(__int16 *)(v30 + v162 + 2);
            v174 = v172 - v173;
            if (v172 - v173 < 0)
              v174 = v173 - v172;
            v175 = (v174 + 32) >> 10;
            if (v175 >= 26)
              v175 = 26;
            v176 = v15 + (26 - v175) * v173;
            v177 = v175 + 38;
            v178 = (int)(v176 + v177 * v172) >> v14;
            if (v178 >= a9)
              v179 = a9;
            else
              v179 = v178;
            if (v178 >= 0)
              v180 = v179;
            else
              v180 = 0;
            v171[1] = v180;
            *v163 = (v167 - a8 + *v163 + v177 + 40) >> 2;
            ++v163;
            v37 += 2;
            v162 += 4;
          }
          while (v37 < a5);
          v32 = a5 >> 1;
          a4 = v161;
          a3 = v160;
          result = v159;
          v17 = v158;
          v18 = v157;
          v19 = v156;
          v11 = v231;
          v23 = v230;
          goto LABEL_4;
        }
        if (a5 >= 0x1F)
        {
          v100 = 0;
          v101 = v229;
          v102 = a7;
          do
          {
            v103 = (const __int16 *)(v31 + v100);
            v237 = vld2q_s16(v103);
            v103 += 16;
            v235 = vld2q_s16(v103);
            v104 = (const __int16 *)(v30 + v100);
            v245 = vld2q_s16(v104);
            v104 += 16;
            *(int16x8x2_t *)v247.val[1].i8 = vld2q_s16(v104);
            v105.i64[0] = 0x2000000020;
            v105.i64[1] = 0x2000000020;
            v106.i64[0] = 0x2000000020;
            v106.i64[1] = 0x2000000020;
            v107.i64[0] = 0x2000000020;
            v107.i64[1] = 0x2000000020;
            v108.i64[0] = 0x2000000020;
            v108.i64[1] = 0x2000000020;
            v109 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_s16(v107, *(int16x4_t *)v237.val[0].i8, *(int16x4_t *)v245.val[0].i8), 0xAuLL), v25);
            v110 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v108, v237.val[0], v245.val[0]), 0xAuLL), v25);
            v111 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_s16(v105, *(int16x4_t *)v235.val[0].i8, *(int16x4_t *)v247.val[1].i8), 0xAuLL), v25);
            v112 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v106, v235.val[0], (int16x8_t)v247.val[1]), 0xAuLL), v25);
            v113 = vmlaq_s32(vmlaq_s32(v20, vsubq_s32(v25, v110), vmovl_high_s16(v245.val[0])), vaddq_s32(v110, v26), vmovl_high_s16(v237.val[0]));
            v114 = vmlaq_s32(vmlaq_s32(v20, vsubq_s32(v25, v109), vmovl_s16(*(int16x4_t *)v245.val[0].i8)), vaddq_s32(v109, v26), vmovl_s16(*(int16x4_t *)v237.val[0].i8));
            v115.i64[0] = 0x2000000020;
            v115.i64[1] = 0x2000000020;
            v106.i64[0] = 0x2000000020;
            v106.i64[1] = 0x2000000020;
            v245.val[0] = (int16x8_t)vmovl_high_s16(v245.val[1]);
            v116 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_s16(v115, *(int16x4_t *)v237.val[1].i8, *(int16x4_t *)v245.val[1].i8), 0xAuLL), v25);
            v117 = vmlaq_s32(v20, vsubq_s32(v25, v116), vmovl_s16(*(int16x4_t *)v245.val[1].i8));
            v118 = vshlq_s32(v114, v27);
            v119 = vshlq_s32(v113, v27);
            v120 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v106, v237.val[1], v245.val[1]), 0xAuLL), v25);
            v245.val[1] = (int16x8_t)vmlaq_s32(vmlaq_s32(v20, vsubq_s32(v25, v112), vmovl_high_s16((int16x8_t)v247.val[1])), vaddq_s32(v112, v26), vmovl_high_s16(v235.val[0]));
            v121 = vmlaq_s32(v20, vsubq_s32(v25, v120), (int32x4_t)v245.val[0]);
            v245.val[0] = vuzp1q_s16((int16x8_t)vcltzq_s32(v118), (int16x8_t)vcltzq_s32(v119));
            v122 = (int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v118, v21), (int16x8_t)vminq_s32(v119, v21));
            v123 = vmovl_high_s16(v237.val[1]);
            v237.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v237.val[1].i8);
            v237.val[1] = (int16x8_t)vaddq_s32(v120, v26);
            v124 = vaddq_s32(v116, v26);
            v125 = vmlaq_s32(vmlaq_s32(v20, vsubq_s32(v25, v111), vmovl_s16(*(int16x4_t *)v247.val[1].i8)), vaddq_s32(v111, v26), vmovl_s16(*(int16x4_t *)v235.val[0].i8));
            v237.val[0] = (int16x8_t)vshlq_s32(vmlaq_s32(v117, v124, (int32x4_t)v237.val[0]), v27);
            v126 = vshlq_s32(vmlaq_s32(v121, (int32x4_t)v237.val[1], v123), v27);
            v127 = (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32((int32x4_t)v237.val[0]), (int16x8_t)vcltzq_s32(v126));
            v237.val[0] = vuzp1q_s16((int16x8_t)vminq_s32((int32x4_t)v237.val[0], v21), (int16x8_t)vminq_s32(v126, v21));
            v126.i64[0] = 0x2000000020;
            v126.i64[1] = 0x2000000020;
            v233.val[0] = (int16x8_t)vbicq_s8(v122, (int8x16_t)v245.val[0]);
            v233.val[1] = (int16x8_t)vbicq_s8((int8x16_t)v237.val[0], v127);
            v237.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v247.val[2].i8);
            v128 = (uint32x4_t)vabal_s16(v126, *(int16x4_t *)v235.val[1].i8, *(int16x4_t *)v247.val[2].i8);
            v245.val[0].i64[0] = 0x2000000020;
            v245.val[0].i64[1] = 0x2000000020;
            v247.val[1] = (int8x16_t)vmovl_high_s16((int16x8_t)v247.val[2]);
            v129 = (__int16 *)(v29 + v100);
            v247.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vabal_high_s16((int32x4_t)v245.val[0], v235.val[1], (int16x8_t)v247.val[2]), 0xAuLL);
            vst2q_s16(v129, v233);
            v129 += 16;
            v245.val[0] = (int16x8_t)vshlq_s32(v125, v27);
            v130 = vminq_s32((int32x4_t)vshrq_n_u32(v128, 0xAuLL), v25);
            v247.val[2] = (int8x16_t)vminq_s32((int32x4_t)v247.val[2], v25);
            v245.val[1] = (int16x8_t)vshlq_s32((int32x4_t)v245.val[1], v27);
            v131 = vmlaq_s32(v20, vsubq_s32(v25, v130), (int32x4_t)v237.val[0]);
            v132 = vmlaq_s32(v20, vsubq_s32(v25, (int32x4_t)v247.val[2]), (int32x4_t)v247.val[1]);
            v237.val[0] = vuzp1q_s16((int16x8_t)vcltzq_s32((int32x4_t)v245.val[0]), (int16x8_t)vcltzq_s32((int32x4_t)v245.val[1]));
            v247.val[1] = (int8x16_t)vmovl_high_s16(v235.val[1]);
            v235.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v235.val[1].i8);
            v235.val[1] = (int16x8_t)vaddq_s32((int32x4_t)v247.val[2], v26);
            v133 = vmlaq_s32(v132, (int32x4_t)v235.val[1], (int32x4_t)v247.val[1]);
            v247.val[1] = (int8x16_t)vminq_s32((int32x4_t)v245.val[1], v21);
            v247.val[2] = (int8x16_t)vminq_s32((int32x4_t)v245.val[0], v21);
            v245.val[0] = (int16x8_t)vaddq_s32(v130, v26);
            v235.val[0] = (int16x8_t)vshlq_s32(vmlaq_s32(v131, (int32x4_t)v245.val[0], (int32x4_t)v235.val[0]), v27);
            v245.val[1] = (int16x8_t)vshlq_s32(v133, v27);
            v247.val[1] = (int8x16_t)vuzp1q_s16((int16x8_t)v247.val[2], (int16x8_t)v247.val[1]);
            v247.val[2] = (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32((int32x4_t)v235.val[0]), (int16x8_t)vcltzq_s32((int32x4_t)v245.val[1]));
            v235.val[0] = vuzp1q_s16((int16x8_t)vminq_s32((int32x4_t)v235.val[0], v21), (int16x8_t)vminq_s32((int32x4_t)v245.val[1], v21));
            v245.val[1] = (int16x8_t)vbicq_s8(v247.val[1], (int8x16_t)v237.val[0]);
            v134 = vbicq_s8((int8x16_t)v235.val[0], v247.val[2]);
            vst2q_s16(v129, *(int16x8x2_t *)((char *)&v245 + 16));
            v237.val[0] = (int16x8_t)vmovl_u8(*v102);
            v235.val[0] = (int16x8_t)vmovl_high_u8(*(uint8x16_t *)v102->i8);
            v247.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32(v112, v22), (uint16x8_t)v235.val[0]), vaddq_s32((int32x4_t)v235.val[1], v28)), 2uLL);
            v247.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16((uint32x4_t)vsubq_s32(v111, v22), *(uint16x4_t *)v235.val[0].i8), vaddq_s32((int32x4_t)v245.val[0], v28)), 2uLL);
            v247.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32(v110, v22), (uint16x8_t)v237.val[0]), vaddq_s32((int32x4_t)v237.val[1], v28)), 2uLL);
            v247.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16((uint32x4_t)vsubq_s32(v109, v22), *(uint16x4_t *)v237.val[0].i8), vaddq_s32(v124, v28)), 2uLL);
            *(int8x16_t *)v102->i8 = vqtbl4q_s8(v247, (int8x16_t)xmmword_19689A980);
            v102 += 2;
            v100 += 64;
            v101 -= 16;
          }
          while (v101);
          v32 = a5 >> 1;
          if (v18 == v229)
            goto LABEL_4;
          v59 = v229;
          v37 = 2 * v229;
          if ((v18 & 8) == 0)
            goto LABEL_89;
        }
        else
        {
          v59 = 0;
        }
        v135 = 4 * v59;
        do
        {
          v136 = (const __int16 *)(v31 + v135);
          v238 = (int8x16x2_t)vld2q_s16(v136);
          v137 = (const __int16 *)(v30 + v135);
          v240 = vld2q_s16(v137);
          v138 = (uint16x8_t)vabdq_s16((int16x8_t)v238.val[0], v240.val[0]);
          v139 = (int32x4_t)vshrq_n_u32(vaddw_high_u16(v24, v138), 0xAuLL);
          v140 = vminq_s32((int32x4_t)vshrq_n_u32(vaddw_u16(v24, *(uint16x4_t *)v138.i8), 0xAuLL), v25);
          v141 = vminq_s32(v139, v25);
          v142 = vshlq_s32(vmlaq_s32(vmlaq_s32(v20, vsubq_s32(v25, v140), vmovl_s16(*(int16x4_t *)v240.val[0].i8)), vaddq_s32(v140, v26), vmovl_s16(*(int16x4_t *)v238.val[0].i8)), v27);
          v143 = vshlq_s32(vmlaq_s32(vmlaq_s32(v20, vsubq_s32(v25, v141), vmovl_high_s16(v240.val[0])), vaddq_s32(v141, v26), vmovl_high_s16((int16x8_t)v238.val[0])), v27);
          v144 = (int16x8_t)vcltzq_s32(v143);
          v145 = vmovl_high_s16((int16x8_t)v238.val[1]);
          v146 = vmovl_s16(*(int16x4_t *)v238.val[1].i8);
          v147 = vmovl_s16(*(int16x4_t *)v240.val[1].i8);
          v148 = vmovl_high_s16(v240.val[1]);
          v238.val[0] = (int8x16_t)vabdq_s16((int16x8_t)v238.val[1], v240.val[1]);
          v240.val[0] = (int16x8_t)vminq_s32(v143, v21);
          v238.val[1] = (int8x16_t)vminq_s32((int32x4_t)vshrq_n_u32(vaddw_u16(v24, *(uint16x4_t *)v238.val[0].i8), 0xAuLL), v25);
          v238.val[0] = (int8x16_t)vminq_s32((int32x4_t)vshrq_n_u32(vaddw_high_u16(v24, (uint16x8_t)v238.val[0]), 0xAuLL), v25);
          v240.val[1] = (int16x8_t)vaddq_s32((int32x4_t)v238.val[0], v26);
          v149 = vaddq_s32((int32x4_t)v238.val[1], v26);
          v150 = vmlaq_s32(v20, vsubq_s32(v25, (int32x4_t)v238.val[1]), v147);
          v238.val[1] = (int8x16_t)vmlaq_s32(v20, vsubq_s32(v25, (int32x4_t)v238.val[0]), v148);
          v238.val[0] = (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v142), v144);
          v151 = vshlq_s32(vmlaq_s32(v150, v149, v146), v27);
          v238.val[1] = (int8x16_t)vshlq_s32(vmlaq_s32((int32x4_t)v238.val[1], (int32x4_t)v240.val[1], v145), v27);
          v240.val[0] = vuzp1q_s16((int16x8_t)vminq_s32(v142, v21), v240.val[0]);
          v152 = (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v151), (int16x8_t)vcltzq_s32((int32x4_t)v238.val[1]));
          v238.val[1] = (int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v151, v21), (int16x8_t)vminq_s32((int32x4_t)v238.val[1], v21));
          v243.val[0] = (int16x8_t)vbicq_s8((int8x16_t)v240.val[0], v238.val[0]);
          v243.val[1] = (int16x8_t)vbicq_s8(v238.val[1], v152);
          v153 = (__int16 *)(v29 + v135);
          vst2q_s16(v153, v243);
          v238.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)((char *)a7 + (v59 & 0x7FFFFFFFFFFFFFF8)));
          v154 = (uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16((uint32x4_t)vsubq_s32(v140, v22), *(uint16x4_t *)v238.val[0].i8), vaddq_s32(v149, v28));
          v238.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32(v141, v22), (uint16x8_t)v238.val[0]), vaddq_s32((int32x4_t)v240.val[1], v28)), 2uLL);
          v155 = vshrq_n_u32(v154, 2uLL);
          *(uint8x8_t *)((char *)a7 + (v59 & 0x7FFFFFFFFFFFFFF8)) = (uint8x8_t)vqtbl2q_s8(v238, (int8x16_t)xmmword_19689A990).u64[0];
          v59 += 8;
          v135 += 32;
        }
        while (v228 != v59);
        v37 = 2 * v228;
        v32 = a5 >> 1;
        if (v18 != v228)
          goto LABEL_89;
      }
      else
      {
        if (a5 < 0xF)
          goto LABEL_115;
        v38 = (char *)a7 + v18;
        v39 = v29 >= v35 || v31 >= v33;
        v40 = !v39;
        v41 = v29 >= v36 || v30 >= v33;
        v42 = !v41;
        v43 = (unint64_t)a7 >= v35 || v31 >= (unint64_t)v38;
        v44 = !v43;
        v45 = (unint64_t)a7 >= v36 || v30 >= (unint64_t)v38;
        v46 = !v45;
        v47 = (unint64_t)a7 >= v33 || v29 >= (unint64_t)v38;
        if (!v47 || v40 || v42 || v44 || v46)
        {
LABEL_115:
          v232 = a6;
          v203 = v19;
          v204 = v17;
          v205 = v23;
          v206 = v10;
          v207 = a3;
          v208 = v18;
          v209 = a4;
          v210 = 2 * v37;
          v211 = (char *)a7 + ((unint64_t)v37 >> 1);
          do
          {
            v212 = *(__int16 *)(v31 + v210);
            v213 = *(__int16 *)(v30 + v210);
            v214 = v212 - v213;
            if (v212 - v213 < 0)
              v214 = v213 - v212;
            v215 = (v214 + 32) >> 10;
            if (v215 >= 26)
              v215 = 26;
            v216 = v215 + 38;
            v217 = (int)(v15 + (26 - v215) * v213 + (v215 + 38) * v212) >> v14;
            if (v217 >= a9)
              v218 = a9;
            else
              v218 = v217;
            if (v217 >= 0)
              v219 = v218;
            else
              v219 = 0;
            *(_WORD *)(v29 + v210) = v219;
            v220 = *(__int16 *)(v31 + v210 + 2);
            v221 = *(__int16 *)(v30 + v210 + 2);
            v222 = v220 - v221;
            if (v220 - v221 < 0)
              v222 = v221 - v220;
            v223 = (v222 + 32) >> 10;
            if (v223 >= 26)
              v223 = 26;
            v224 = (int)(v15 + (26 - v223) * v221 + (v223 + 38) * v220) >> v14;
            if (v224 >= a9)
              v225 = a9;
            else
              v225 = v224;
            if (v224 >= 0)
              v226 = v225;
            else
              v226 = 0;
            *(_WORD *)(v29 + v210 + 2) = v226;
            *v211++ = v223 + 38 + v216;
            v37 += 2;
            v210 += 4;
          }
          while (v37 < a5);
          v32 = 0;
          a4 = v209;
          v18 = v208;
          a3 = v207;
          v10 = v206;
          v23 = v205;
          v17 = v204;
          v19 = v203;
          a6 = v232;
          goto LABEL_4;
        }
        if (a5 >= 0x1F)
        {
          v60 = 0;
          v61 = v229;
          v62 = (int8x16_t *)a7;
          do
          {
            v63 = (const __int16 *)(v31 + v60);
            v234 = vld2q_s16(v63);
            v63 += 16;
            v242 = vld2q_s16(v63);
            v64 = (const __int16 *)(v30 + v60);
            v241 = vld2q_s16(v64);
            v64 += 16;
            v244 = vld2q_s16(v64);
            v65.i64[0] = 0x2000000020;
            v65.i64[1] = 0x2000000020;
            v66.i64[0] = 0x2000000020;
            v66.i64[1] = 0x2000000020;
            v67.i64[0] = 0x2000000020;
            v67.i64[1] = 0x2000000020;
            v68.i64[0] = 0x2000000020;
            v68.i64[1] = 0x2000000020;
            v69 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_s16(v65, *(int16x4_t *)v242.val[0].i8, *(int16x4_t *)v244.val[0].i8), 0xAuLL), v25);
            v70 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_s16(v67, *(int16x4_t *)v234.val[0].i8, *(int16x4_t *)v241.val[0].i8), 0xAuLL), v25);
            v71 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v68, v234.val[0], v241.val[0]), 0xAuLL), v25);
            v72 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v66, v242.val[0], v244.val[0]), 0xAuLL), v25);
            v73 = vaddq_s32(v71, v26);
            v74 = vaddq_s32(v70, v26);
            v75 = vaddq_s32(v72, v26);
            v76 = vaddq_s32(v69, v26);
            v77 = vshlq_s32(vmlaq_s32(vmlaq_s32(v20, vsubq_s32(v25, v70), vmovl_s16(*(int16x4_t *)v241.val[0].i8)), v74, vmovl_s16(*(int16x4_t *)v234.val[0].i8)), v27);
            v78 = vshlq_s32(vmlaq_s32(vmlaq_s32(v20, vsubq_s32(v25, v71), vmovl_high_s16(v241.val[0])), v73, vmovl_high_s16(v234.val[0])), v27);
            v79 = (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v77), (int16x8_t)vcltzq_s32(v78));
            v80 = vmlaq_s32(vmlaq_s32(v20, vsubq_s32(v25, v72), vmovl_high_s16(v244.val[0])), v75, vmovl_high_s16(v242.val[0]));
            v81 = (int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v77, v21), (int16x8_t)vminq_s32(v78, v21));
            v82 = vmovl_high_s16(v242.val[1]);
            v83 = vmovl_s16(*(int16x4_t *)v242.val[1].i8);
            v84 = vmovl_s16(*(int16x4_t *)v244.val[1].i8);
            v85 = vmovl_high_s16(v244.val[1]);
            v86.i64[0] = 0x2000000020;
            v86.i64[1] = 0x2000000020;
            v87.i64[0] = 0x2000000020;
            v87.i64[1] = 0x2000000020;
            v88 = vshlq_s32(vmlaq_s32(vmlaq_s32(v20, vsubq_s32(v25, v69), vmovl_s16(*(int16x4_t *)v244.val[0].i8)), v76, vmovl_s16(*(int16x4_t *)v242.val[0].i8)), v27);
            v244.val[0] = (int16x8_t)vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_s16(v86, *(int16x4_t *)v242.val[1].i8, *(int16x4_t *)v244.val[1].i8), 0xAuLL), v25);
            v244.val[1] = (int16x8_t)vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v87, v242.val[1], v244.val[1]), 0xAuLL), v25);
            v89 = vshlq_s32(v80, v27);
            v242.val[1] = (int16x8_t)vaddq_s32((int32x4_t)v244.val[1], v26);
            v242.val[0] = (int16x8_t)vaddq_s32((int32x4_t)v244.val[0], v26);
            v90 = vshlq_s32(vmlaq_s32(vmlaq_s32(v20, vsubq_s32(v25, (int32x4_t)v244.val[0]), v84), (int32x4_t)v242.val[0], v83), v27);
            v244.val[0] = (int16x8_t)vshlq_s32(vmlaq_s32(vmlaq_s32(v20, vsubq_s32(v25, (int32x4_t)v244.val[1]), v85), (int32x4_t)v242.val[1], v82), v27);
            v246.val[0] = (int16x8_t)vbicq_s8(v81, v79);
            v91 = vmovl_high_s16(v234.val[1]);
            v92 = vmovl_s16(*(int16x4_t *)v234.val[1].i8);
            v93 = vmovl_s16(*(int16x4_t *)v241.val[1].i8);
            v94 = vmovl_high_s16(v241.val[1]);
            v95.i64[0] = 0x2000000020;
            v95.i64[1] = 0x2000000020;
            v69.i64[0] = 0x2000000020;
            v69.i64[1] = 0x2000000020;
            v234.val[0] = (int16x8_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v69, v234.val[1], v241.val[1]), 0xAuLL);
            v234.val[1] = (int16x8_t)vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_s16(v95, *(int16x4_t *)v234.val[1].i8, *(int16x4_t *)v241.val[1].i8), 0xAuLL), v25);
            v234.val[0] = (int16x8_t)vminq_s32((int32x4_t)v234.val[0], v25);
            v241.val[1] = (int16x8_t)vaddq_s32((int32x4_t)v234.val[0], v26);
            v96 = vaddq_s32((int32x4_t)v234.val[1], v26);
            v97 = vmlaq_s32(v20, vsubq_s32(v25, (int32x4_t)v234.val[1]), v93);
            v234.val[1] = (int16x8_t)vmlaq_s32(vmlaq_s32(v20, vsubq_s32(v25, (int32x4_t)v234.val[0]), v94), (int32x4_t)v241.val[1], v91);
            v234.val[0] = (int16x8_t)vshlq_s32(vmlaq_s32(v97, v96, v92), v27);
            v234.val[1] = (int16x8_t)vshlq_s32((int32x4_t)v234.val[1], v27);
            v246.val[1] = (int16x8_t)vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32((int32x4_t)v234.val[0], v21), (int16x8_t)vminq_s32((int32x4_t)v234.val[1], v21)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32((int32x4_t)v234.val[0]), (int16x8_t)vcltzq_s32((int32x4_t)v234.val[1])));
            v98 = (__int16 *)(v29 + v60);
            vst2q_s16(v98, v246);
            v98 += 16;
            v234.val[0] = (int16x8_t)vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v88, v21), (int16x8_t)vminq_s32(v89, v21)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v88), (int16x8_t)vcltzq_s32(v89)));
            v244.val[1] = (int16x8_t)vaddq_s32((int32x4_t)v241.val[1], v73);
            v246.val[0] = (int16x8_t)vaddq_s32((int32x4_t)v242.val[1], v75);
            v234.val[1] = (int16x8_t)vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v90, v21), (int16x8_t)vminq_s32((int32x4_t)v244.val[0], v21)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v90), (int16x8_t)vcltzq_s32((int32x4_t)v244.val[0])));
            v244.val[0] = (int16x8_t)vaddq_s32(v96, v74);
            v99 = vaddq_s32((int32x4_t)v242.val[0], v76);
            vst2q_s16(v98, v234);
            *v62++ = vqtbl4q_s8(*(int8x16x4_t *)v244.val[0].i8, (int8x16_t)xmmword_19689A980);
            v60 += 64;
            v61 -= 16;
          }
          while (v61);
          if (v18 == v229)
          {
            v32 = 0;
            v22 = v227;
            v24.i64[0] = 0x2000000020;
            v24.i64[1] = 0x2000000020;
            v28.i64[0] = 0x2800000028;
            v28.i64[1] = 0x2800000028;
            goto LABEL_4;
          }
          v48 = v229;
          v37 = 2 * v229;
          v22 = v227;
          v24.i64[0] = 0x2000000020;
          v24.i64[1] = 0x2000000020;
          v28.i64[0] = 0x2800000028;
          v28.i64[1] = 0x2800000028;
          if ((v18 & 8) == 0)
            goto LABEL_115;
        }
        else
        {
          v48 = 0;
        }
        v181 = 4 * v48;
        do
        {
          v182 = (const __int16 *)(v31 + v181);
          v236 = vld2q_s16(v182);
          v183 = (const __int16 *)(v30 + v181);
          v239 = vld2q_s16(v183);
          v184 = (uint16x8_t)vabdq_s16(v236.val[0], v239.val[0]);
          v185 = vminq_s32((int32x4_t)vshrq_n_u32(vaddw_u16(v24, *(uint16x4_t *)v184.i8), 0xAuLL), v25);
          v186 = vminq_s32((int32x4_t)vshrq_n_u32(vaddw_high_u16(v24, v184), 0xAuLL), v25);
          v187 = vaddq_s32(v186, v26);
          v188 = vaddq_s32(v185, v26);
          v189 = vshlq_s32(vmlaq_s32(vmlaq_s32(v20, vsubq_s32(v25, v185), vmovl_s16(*(int16x4_t *)v239.val[0].i8)), v188, vmovl_s16(*(int16x4_t *)v236.val[0].i8)), v27);
          v190 = (uint16x8_t)vabdq_s16(v236.val[1], v239.val[1]);
          v191 = vshlq_s32(vmlaq_s32(vmlaq_s32(v20, vsubq_s32(v25, v186), vmovl_high_s16(v239.val[0])), v187, vmovl_high_s16(v236.val[0])), v27);
          v192 = vminq_s32((int32x4_t)vshrq_n_u32(vaddw_u16(v24, *(uint16x4_t *)v190.i8), 0xAuLL), v25);
          v193 = vmlaq_s32(v20, vsubq_s32(v25, v192), vmovl_s16(*(int16x4_t *)v239.val[1].i8));
          v194 = vmovl_high_s16(v236.val[1]);
          v236.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v236.val[1].i8);
          v239.val[0] = (int16x8_t)vmovl_high_s16(v239.val[1]);
          v239.val[1] = (int16x8_t)vminq_s32((int32x4_t)vshrq_n_u32(vaddw_high_u16(v24, v190), 0xAuLL), v25);
          v195 = vaddq_s32((int32x4_t)v239.val[1], v26);
          v196 = vaddq_s32(v192, v26);
          v236.val[1] = vuzp1q_s16((int16x8_t)vcltzq_s32(v189), (int16x8_t)vcltzq_s32(v191));
          v197 = vmlaq_s32(vmlaq_s32(v20, vsubq_s32(v25, (int32x4_t)v239.val[1]), (int32x4_t)v239.val[0]), v195, v194);
          v198 = vshlq_s32(vmlaq_s32(v193, v196, (int32x4_t)v236.val[0]), v27);
          v199 = (int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v189, v21), (int16x8_t)vminq_s32(v191, v21));
          v200 = vshlq_s32(v197, v27);
          v236.val[1] = (int16x8_t)vbicq_s8(v199, (int8x16_t)v236.val[1]);
          v201 = (__int16 *)(v29 + v181);
          v202 = vaddq_s32(v195, v187);
          v239.val[1] = (int16x8_t)vaddq_s32(v196, v188);
          v239.val[0] = (int16x8_t)vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v198, v21), (int16x8_t)vminq_s32(v200, v21)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v198), (int16x8_t)vcltzq_s32(v200)));
          vst2q_s16(v201, *(int16x8x2_t *)((char *)&v236 + 16));
          *(uint8x8_t *)((char *)a7 + (v48 & 0x7FFFFFFFFFFFFFF8)) = (uint8x8_t)vqtbl2q_s8(*(int8x16x2_t *)((char *)&v239 + 16), (int8x16_t)xmmword_19689A990).u64[0];
          v48 += 8;
          v181 += 32;
        }
        while (v228 != v48);
        v37 = 2 * v228;
        if (v18 != v228)
          goto LABEL_115;
        v32 = 0;
      }
LABEL_4:
      v31 += v19;
      v30 += v19;
      v29 += v23;
      a7 = (uint8x8_t *)((char *)a7 + v32);
      ++v11;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t warp_affine_8x8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 *a5, int a6, int a7, signed int a8)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned __int16 *v13;
  _WORD *v14;
  char *v15;
  int v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  char *v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  char *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  char *v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  char *v63;
  int v64;
  int v65;
  int v66;
  char *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  char v72;
  unsigned int v73;
  _WORD *v74;
  uint64_t v75;
  int v76;
  __int16 *v77;
  char *v78;
  int v79;
  __int16 v80;
  __int16 v81;
  int v82;
  char *v83;
  int v84;
  __int16 v85;
  __int16 v86;
  int v87;
  char *v88;
  int v89;
  __int16 v90;
  __int16 v91;
  int v92;
  char *v93;
  int v94;
  __int16 v95;
  __int16 v96;
  int v97;
  char *v98;
  int v99;
  __int16 v100;
  __int16 v101;
  int v102;
  char *v103;
  int v104;
  __int16 v105;
  __int16 v106;
  int v107;
  char *v108;
  int v109;
  __int16 v110;
  __int16 v111;
  char *v112;
  uint64_t result;
  int v114;
  __int16 v115;
  __int16 v116;
  char v117;
  unint64_t v121;
  int v122;
  _BYTE v123[240];
  uint64_t v124;

  v8 = 0;
  v124 = *MEMORY[0x1E0C80C00];
  v117 = __clz(a8);
  v9 = 25 - v117;
  v10 = (1 << (25 - v117)) >> 1;
  v11 = *a5;
  v122 = a5[1];
  v12 = a6 + 512;
  v13 = (unsigned __int16 *)(a3 - 6 * (a4 >> 1) + 8);
  v121 = a4 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v14 = &v123[v8];
    v15 = (char *)&dav1d_mc_warp_filter + 8 * (v12 >> 10);
    v16 = *(v13 - 6);
    v17 = (char *)&dav1d_mc_warp_filter + 8 * ((v11 + v12) >> 10);
    v18 = *(v13 - 5);
    v19 = *(v13 - 4);
    v20 = *(v13 - 3);
    v21 = v15[517];
    v22 = *(v13 - 2);
    v23 = v15[518];
    v24 = *(v13 - 1);
    v25 = v15[519];
    v26 = v11 + v11 + v12;
    v27 = (char *)&dav1d_mc_warp_filter + 8 * (v26 >> 10);
    v28 = v10 + *(v13 - 7) * v15[512] + v16 * v15[513] + v18 * v15[514] + v19 * v15[515] + v20 * v15[516];
    LODWORD(v15) = *v13;
    v29 = v13[1];
    v30 = v10 + v17[512] * v16 + v17[513] * v18 + v17[514] * v19 + v17[515] * v20 + v17[516] * v22 + v17[517] * v24;
    v31 = v13[2];
    v32 = v28 + v22 * v21 + v24 * v23;
    v33 = v10
        + v27[512] * v18
        + v27[513] * v19
        + v27[514] * v20
        + v27[515] * v22
        + v27[516] * v24
        + v27[517] * (_DWORD)v15;
    v34 = v11 + v26;
    v35 = (char *)&dav1d_mc_warp_filter + 8 * ((v11 + v26) >> 10);
    v36 = v30 + v17[518] * (_DWORD)v15;
    v37 = v35[515];
    v38 = v10 + v35[512] * v19;
    v39 = v35[516];
    v40 = v35[517];
    v41 = v38 + v35[513] * v20 + v35[514] * v22;
    v42 = v35[518];
    v43 = v35[519];
    v44 = v32 + (_DWORD)v15 * v25;
    LODWORD(v35) = v13[3];
    v45 = v41 + v37 * v24 + v39 * (_DWORD)v15 + v40 * v29 + v42 * v31;
    v46 = v36 + v29 * v17[519];
    v47 = v11 + v34;
    v48 = (char *)&dav1d_mc_warp_filter + 8 * (v47 >> 10);
    v49 = v33 + v27[518] * v29 + v31 * v27[519];
    v50 = v45 + (_DWORD)v35 * v43;
    v51 = v10 + v48[512] * v20 + v48[513] * v22;
    v52 = v13[4];
    LODWORD(v27) = v51
                 + v48[514] * v24
                 + v48[515] * (_DWORD)v15
                 + v48[516] * v29
                 + v48[517] * v31
                 + v48[518] * (_DWORD)v35
                 + v52 * v48[519];
    *v14 = v44 >> v9;
    v53 = v11 + v47;
    v54 = (char *)&dav1d_mc_warp_filter + 8 * ((v11 + v47) >> 10);
    v55 = v54[513];
    v56 = v54[514];
    LODWORD(v17) = v54[515];
    v57 = v54[516];
    LODWORD(v48) = v10 + v54[512] * v22;
    v58 = v54[517];
    v14[1] = v46 >> v9;
    v59 = (_DWORD)v48 + v55 * v24;
    v60 = v13[5];
    v61 = v59 + v56 * (_DWORD)v15 + (_DWORD)v17 * v29 + v57 * v31 + v58 * (_DWORD)v35 + v54[518] * v52 + v60 * v54[519];
    v14[2] = v49 >> v9;
    v62 = v11 + v53;
    v63 = (char *)&dav1d_mc_warp_filter + 8 * ((v11 + v53) >> 10);
    LODWORD(v48) = v63[513];
    v64 = v63[514];
    v65 = v63[515];
    LODWORD(v17) = v63[516];
    LODWORD(v54) = v10 + v63[512] * v24;
    v66 = v63[517];
    v14[3] = v50 >> v9;
    LODWORD(v54) = (_DWORD)v54 + (_DWORD)v48 * (_DWORD)v15;
    LODWORD(v48) = v13[6];
    LODWORD(v63) = (_DWORD)v54
                 + v64 * v29
                 + v65 * v31
                 + (_DWORD)v17 * (_DWORD)v35
                 + v66 * v52
                 + v63[518] * v60
                 + (_DWORD)v48 * v63[519];
    v14[4] = (int)v27 >> v9;
    v67 = (char *)&dav1d_mc_warp_filter + 8 * ((v11 + v62) >> 10);
    LODWORD(v54) = v67[512];
    LODWORD(v27) = v67[513];
    v68 = v67[514];
    v69 = v67[515];
    v70 = v67[516];
    v71 = v67[517];
    LODWORD(v17) = v67[518];
    v14[5] = v61 >> v9;
    LODWORD(v67) = v10
                 + (_DWORD)v54 * (_DWORD)v15
                 + (_DWORD)v27 * v29
                 + v68 * v31
                 + v69 * (_DWORD)v35
                 + v70 * v52
                 + v71 * v60
                 + (_DWORD)v17 * (_DWORD)v48
                 + v13[7] * v67[519];
    v14[6] = (int)v63 >> v9;
    v14[7] = (int)v67 >> v9;
    v12 += v122;
    v8 += 16;
    v13 = (unsigned __int16 *)((char *)v13 + v121);
  }
  while ((_DWORD)v8 != 240);
  v72 = v117 - 11;
  v73 = (1 << (v117 - 11)) >> 1;
  v74 = (_WORD *)(a1 + 8);
  v75 = 126;
  v76 = a7;
  do
  {
    v77 = (__int16 *)&v123[v75];
    v78 = (char *)&dav1d_mc_warp_filter + 8 * ((v76 + 512) >> 10);
    v79 = (int)(v73
              + *(__int16 *)&v123[v75 - 126] * v78[512]
              + *(__int16 *)&v123[v75 - 110] * v78[513]
              + *(__int16 *)&v123[v75 - 94] * v78[514]
              + *(__int16 *)&v123[v75 - 78] * v78[515]
              + *(__int16 *)&v123[v75 - 62] * v78[516]
              + *(__int16 *)&v123[v75 - 46] * v78[517]
              + *(__int16 *)&v123[v75 - 30] * v78[518]
              + *(__int16 *)&v123[v75 - 14] * v78[519]) >> v72;
    if (v79 >= a8)
      v80 = a8;
    else
      v80 = v79;
    if (v79 >= 0)
      v81 = v80;
    else
      v81 = 0;
    *(v74 - 4) = v81;
    v82 = v76 + 512 + a5[2];
    v83 = (char *)&dav1d_mc_warp_filter + 8 * (v82 >> 10);
    v84 = (int)(v73
              + *(v77 - 62) * v83[512]
              + *(v77 - 54) * v83[513]
              + *(v77 - 46) * v83[514]
              + *(v77 - 38) * v83[515]
              + *(v77 - 30) * v83[516]
              + *(v77 - 22) * v83[517]
              + *(v77 - 14) * v83[518]
              + *(v77 - 6) * v83[519]) >> v72;
    if (v84 >= a8)
      v85 = a8;
    else
      v85 = v84;
    if (v84 >= 0)
      v86 = v85;
    else
      v86 = 0;
    *(v74 - 3) = v86;
    v87 = v82 + a5[2];
    v88 = (char *)&dav1d_mc_warp_filter + 8 * (v87 >> 10);
    v89 = (int)(v73
              + *(v77 - 61) * v88[512]
              + *(v77 - 53) * v88[513]
              + *(v77 - 45) * v88[514]
              + *(v77 - 37) * v88[515]
              + *(v77 - 29) * v88[516]
              + *(v77 - 21) * v88[517]
              + *(v77 - 13) * v88[518]
              + *(v77 - 5) * v88[519]) >> v72;
    if (v89 >= a8)
      v90 = a8;
    else
      v90 = v89;
    if (v89 >= 0)
      v91 = v90;
    else
      v91 = 0;
    *(v74 - 2) = v91;
    v92 = v87 + a5[2];
    v93 = (char *)&dav1d_mc_warp_filter + 8 * (v92 >> 10);
    v94 = (int)(v73
              + *(v77 - 60) * v93[512]
              + *(v77 - 52) * v93[513]
              + *(v77 - 44) * v93[514]
              + *(v77 - 36) * v93[515]
              + *(v77 - 28) * v93[516]
              + *(v77 - 20) * v93[517]
              + *(v77 - 12) * v93[518]
              + *(v77 - 4) * v93[519]) >> v72;
    if (v94 >= a8)
      v95 = a8;
    else
      v95 = v94;
    if (v94 >= 0)
      v96 = v95;
    else
      v96 = 0;
    *(v74 - 1) = v96;
    v97 = v92 + a5[2];
    v98 = (char *)&dav1d_mc_warp_filter + 8 * (v97 >> 10);
    v99 = (int)(v73
              + *(v77 - 59) * v98[512]
              + *(v77 - 51) * v98[513]
              + *(v77 - 43) * v98[514]
              + *(v77 - 35) * v98[515]
              + *(v77 - 27) * v98[516]
              + *(v77 - 19) * v98[517]
              + *(v77 - 11) * v98[518]
              + *(v77 - 3) * v98[519]) >> v72;
    if (v99 >= a8)
      v100 = a8;
    else
      v100 = v99;
    if (v99 >= 0)
      v101 = v100;
    else
      v101 = 0;
    *v74 = v101;
    v102 = v97 + a5[2];
    v103 = (char *)&dav1d_mc_warp_filter + 8 * (v102 >> 10);
    v104 = (int)(v73
               + *(v77 - 58) * v103[512]
               + *(v77 - 50) * v103[513]
               + *(v77 - 42) * v103[514]
               + *(v77 - 34) * v103[515]
               + *(v77 - 26) * v103[516]
               + *(v77 - 18) * v103[517]
               + *(v77 - 10) * v103[518]
               + *(v77 - 2) * v103[519]) >> v72;
    if (v104 >= a8)
      v105 = a8;
    else
      v105 = v104;
    if (v104 >= 0)
      v106 = v105;
    else
      v106 = 0;
    v74[1] = v106;
    v107 = v102 + a5[2];
    v108 = (char *)&dav1d_mc_warp_filter + 8 * (v107 >> 10);
    v109 = (int)(v73
               + *(v77 - 57) * v108[512]
               + *(v77 - 49) * v108[513]
               + *(v77 - 41) * v108[514]
               + *(v77 - 33) * v108[515]
               + *(v77 - 25) * v108[516]
               + *(v77 - 17) * v108[517]
               + *(v77 - 9) * v108[518]
               + *(v77 - 1) * v108[519]) >> v72;
    if (v109 >= a8)
      v110 = a8;
    else
      v110 = v109;
    if (v109 >= 0)
      v111 = v110;
    else
      v111 = 0;
    v74[2] = v111;
    v112 = (char *)&dav1d_mc_warp_filter + 8 * ((v107 + a5[2]) >> 10);
    result = v112[513];
    v114 = (int)(v73
               + *(v77 - 56) * v112[512]
               + *(v77 - 48) * (_DWORD)result
               + *(v77 - 40) * v112[514]
               + *(v77 - 32) * v112[515]
               + *(v77 - 24) * v112[516]
               + *(v77 - 16) * v112[517]
               + *(v77 - 8) * v112[518]
               + *v77 * v112[519]) >> v72;
    if (v114 >= a8)
      v115 = a8;
    else
      v115 = v114;
    if (v114 >= 0)
      v116 = v115;
    else
      v116 = 0;
    v74[3] = v116;
    v76 += a5[3];
    v75 += 16;
    v74 = (_WORD *)((char *)v74 + (a2 & 0xFFFFFFFFFFFFFFFELL));
  }
  while ((_DWORD)v75 != 254);
  return result;
}

uint64_t warp_affine_8x8t_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 *a5, int a6, int a7, unsigned int a8)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned __int16 *v13;
  _WORD *v14;
  char *v15;
  int v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  char *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  char *v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  char *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  char *v58;
  int v59;
  int v60;
  int v61;
  _WORD *v62;
  uint64_t v63;
  char *v65;
  int v66;
  char *v67;
  int v68;
  char *v69;
  int v70;
  char *v71;
  int v72;
  char *v73;
  int v74;
  char *v75;
  int v76;
  char *v77;
  char *v78;
  uint64_t result;
  unint64_t v82;
  int v83;
  _BYTE v84[240];
  uint64_t v85;

  v8 = 0;
  v85 = *MEMORY[0x1E0C80C00];
  v9 = 25 - __clz(a8);
  v10 = (1 << v9) >> 1;
  v11 = *a5;
  v83 = a5[1];
  v12 = a6 + 512;
  v13 = (unsigned __int16 *)(a3 - 6 * (a4 >> 1) + 8);
  v82 = a4 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v14 = &v84[v8];
    v15 = (char *)&dav1d_mc_warp_filter + 8 * (v12 >> 10);
    v16 = *(v13 - 6);
    v17 = (char *)&dav1d_mc_warp_filter + 8 * ((v11 + v12) >> 10);
    v18 = *(v13 - 5);
    v19 = *(v13 - 4);
    v20 = *(v13 - 3);
    v21 = v15[517];
    v22 = *(v13 - 2);
    v23 = v15[518];
    v24 = *(v13 - 1);
    v25 = v15[519];
    v26 = v11 + v11 + v12;
    v27 = (char *)&dav1d_mc_warp_filter + 8 * (v26 >> 10);
    v28 = v10 + *(v13 - 7) * v15[512] + v16 * v15[513] + v18 * v15[514] + v19 * v15[515] + v20 * v15[516];
    LODWORD(v15) = *v13;
    v29 = v13[1];
    v30 = v10 + v17[512] * v16 + v17[513] * v18 + v17[514] * v19 + v17[515] * v20 + v17[516] * v22 + v17[517] * v24;
    v31 = v13[2];
    v32 = v11 + v26;
    v33 = (char *)&dav1d_mc_warp_filter + 8 * ((v11 + v26) >> 10);
    v34 = v28 + v22 * v21 + v24 * v23 + (_DWORD)v15 * v25;
    v35 = v13[3];
    v36 = v30 + v17[518] * (_DWORD)v15 + v29 * v17[519];
    v37 = v11 + v32;
    v38 = (char *)&dav1d_mc_warp_filter + 8 * (v37 >> 10);
    v39 = v10
        + v27[512] * v18
        + v27[513] * v19
        + v27[514] * v20
        + v27[515] * v22
        + v27[516] * v24
        + v27[517] * (_DWORD)v15
        + v27[518] * v29
        + v31 * v27[519];
    v40 = v10
        + v33[512] * v19
        + v33[513] * v20
        + v33[514] * v22
        + v33[515] * v24
        + v33[516] * (_DWORD)v15
        + v33[517] * v29
        + v33[518] * v31
        + v35 * v33[519];
    LODWORD(v27) = v10 + v38[512] * v20 + v38[513] * v22 + v38[514] * v24;
    v41 = v13[4];
    LODWORD(v27) = (_DWORD)v27
                 + v38[515] * (_DWORD)v15
                 + v38[516] * v29
                 + v38[517] * v31
                 + v38[518] * v35
                 + v41 * v38[519];
    *v14 = v34 >> v9;
    v42 = v11 + v37;
    v43 = (char *)&dav1d_mc_warp_filter + 8 * (v42 >> 10);
    LODWORD(v17) = v43[513];
    v44 = v43[514];
    v45 = v43[515];
    v46 = v43[516];
    v47 = v10 + v43[512] * v22;
    LODWORD(v33) = v43[517];
    v14[1] = v36 >> v9;
    v48 = v47 + (_DWORD)v17 * v24;
    LODWORD(v17) = v13[5];
    v49 = v48 + v44 * (_DWORD)v15 + v45 * v29 + v46 * v31 + (_DWORD)v33 * v35 + v43[518] * v41 + (_DWORD)v17 * v43[519];
    v14[2] = v39 >> v9;
    v50 = v11 + v42;
    v51 = (char *)&dav1d_mc_warp_filter + 8 * ((v11 + v42) >> 10);
    v52 = v51[513];
    LODWORD(v33) = v51[514];
    v53 = v51[515];
    v54 = v51[516];
    LODWORD(v43) = v10 + v51[512] * v24;
    v55 = v51[517];
    v14[3] = v40 >> v9;
    LODWORD(v43) = (_DWORD)v43 + v52 * (_DWORD)v15;
    v56 = v13[6];
    v57 = (_DWORD)v43 + (_DWORD)v33 * v29 + v53 * v31 + v54 * v35 + v55 * v41 + v51[518] * (_DWORD)v17 + v56 * v51[519];
    v14[4] = (int)v27 >> v9;
    v58 = (char *)&dav1d_mc_warp_filter + 8 * ((v11 + v50) >> 10);
    LODWORD(v51) = v58[512];
    LODWORD(v27) = v58[513];
    LODWORD(v43) = v58[514];
    v59 = v58[515];
    LODWORD(v33) = v58[516];
    v60 = v58[517];
    v61 = v58[518];
    v14[5] = v49 >> v9;
    LODWORD(v58) = v10
                 + (_DWORD)v51 * (_DWORD)v15
                 + (_DWORD)v27 * v29
                 + (_DWORD)v43 * v31
                 + v59 * v35
                 + (_DWORD)v33 * v41
                 + v60 * (_DWORD)v17
                 + v61 * v56
                 + v13[7] * v58[519];
    v14[6] = v57 >> v9;
    v14[7] = (int)v58 >> v9;
    v12 += v83;
    v8 += 16;
    v13 = (unsigned __int16 *)((char *)v13 + v82);
  }
  while ((_DWORD)v8 != 240);
  v62 = (_WORD *)(a1 + 8);
  v63 = 126;
  do
  {
    v65 = (char *)&dav1d_mc_warp_filter + 8 * ((a7 + 512) >> 10);
    *(v62 - 4) = ((*(__int16 *)&v84[v63 - 110] * v65[513]
                               + *(__int16 *)&v84[v63 - 126] * v65[512]
                               + *(__int16 *)&v84[v63 - 94] * v65[514]
                               + *(__int16 *)&v84[v63 - 78] * v65[515]
                               + *(__int16 *)&v84[v63 - 62] * v65[516]
                               + *(__int16 *)&v84[v63 - 46] * v65[517]
                               + *(__int16 *)&v84[v63 - 30] * v65[518]
                               + *(__int16 *)&v84[v63 - 14] * v65[519]
                               + 64) >> 7)
               - 0x2000;
    v66 = a7 + 512 + a5[2];
    v67 = (char *)&dav1d_mc_warp_filter + 8 * (v66 >> 10);
    *(v62 - 3) = ((*(__int16 *)&v84[v63 - 108] * v67[513]
                               + *(__int16 *)&v84[v63 - 124] * v67[512]
                               + *(__int16 *)&v84[v63 - 92] * v67[514]
                               + *(__int16 *)&v84[v63 - 76] * v67[515]
                               + *(__int16 *)&v84[v63 - 60] * v67[516]
                               + *(__int16 *)&v84[v63 - 44] * v67[517]
                               + *(__int16 *)&v84[v63 - 28] * v67[518]
                               + *(__int16 *)&v84[v63 - 12] * v67[519]
                               + 64) >> 7)
               - 0x2000;
    v68 = v66 + a5[2];
    v69 = (char *)&dav1d_mc_warp_filter + 8 * (v68 >> 10);
    *(v62 - 2) = ((*(__int16 *)&v84[v63 - 106] * v69[513]
                               + *(__int16 *)&v84[v63 - 122] * v69[512]
                               + *(__int16 *)&v84[v63 - 90] * v69[514]
                               + *(__int16 *)&v84[v63 - 74] * v69[515]
                               + *(__int16 *)&v84[v63 - 58] * v69[516]
                               + *(__int16 *)&v84[v63 - 42] * v69[517]
                               + *(__int16 *)&v84[v63 - 26] * v69[518]
                               + *(__int16 *)&v84[v63 - 10] * v69[519]
                               + 64) >> 7)
               - 0x2000;
    v70 = v68 + a5[2];
    v71 = (char *)&dav1d_mc_warp_filter + 8 * (v70 >> 10);
    *(v62 - 1) = ((*(__int16 *)&v84[v63 - 104] * v71[513]
                               + *(__int16 *)&v84[v63 - 120] * v71[512]
                               + *(__int16 *)&v84[v63 - 88] * v71[514]
                               + *(__int16 *)&v84[v63 - 72] * v71[515]
                               + *(__int16 *)&v84[v63 - 56] * v71[516]
                               + *(__int16 *)&v84[v63 - 40] * v71[517]
                               + *(__int16 *)&v84[v63 - 24] * v71[518]
                               + *(__int16 *)&v84[v63 - 8] * v71[519]
                               + 64) >> 7)
               - 0x2000;
    v72 = v70 + a5[2];
    v73 = (char *)&dav1d_mc_warp_filter + 8 * (v72 >> 10);
    *v62 = ((*(__int16 *)&v84[v63 - 102] * v73[513]
                         + *(__int16 *)&v84[v63 - 118] * v73[512]
                         + *(__int16 *)&v84[v63 - 86] * v73[514]
                         + *(__int16 *)&v84[v63 - 70] * v73[515]
                         + *(__int16 *)&v84[v63 - 54] * v73[516]
                         + *(__int16 *)&v84[v63 - 38] * v73[517]
                         + *(__int16 *)&v84[v63 - 22] * v73[518]
                         + *(__int16 *)&v84[v63 - 6] * v73[519]
                         + 64) >> 7)
         - 0x2000;
    v74 = v72 + a5[2];
    v75 = (char *)&dav1d_mc_warp_filter + 8 * (v74 >> 10);
    v62[1] = ((*(__int16 *)&v84[v63 - 100] * v75[513]
                           + *(__int16 *)&v84[v63 - 116] * v75[512]
                           + *(__int16 *)&v84[v63 - 84] * v75[514]
                           + *(__int16 *)&v84[v63 - 68] * v75[515]
                           + *(__int16 *)&v84[v63 - 52] * v75[516]
                           + *(__int16 *)&v84[v63 - 36] * v75[517]
                           + *(__int16 *)&v84[v63 - 20] * v75[518]
                           + *(__int16 *)&v84[v63 - 4] * v75[519]
                           + 64) >> 7)
           - 0x2000;
    v76 = v74 + a5[2];
    v77 = (char *)&dav1d_mc_warp_filter + 8 * (v76 >> 10);
    v62[2] = ((*(__int16 *)&v84[v63 - 98] * v77[513]
                           + *(__int16 *)&v84[v63 - 114] * v77[512]
                           + *(__int16 *)&v84[v63 - 82] * v77[514]
                           + *(__int16 *)&v84[v63 - 66] * v77[515]
                           + *(__int16 *)&v84[v63 - 50] * v77[516]
                           + *(__int16 *)&v84[v63 - 34] * v77[517]
                           + *(__int16 *)&v84[v63 - 18] * v77[518]
                           + *(__int16 *)&v84[v63 - 2] * v77[519]
                           + 64) >> 7)
           - 0x2000;
    v78 = (char *)&dav1d_mc_warp_filter + 8 * ((v76 + a5[2]) >> 10);
    result = *(__int16 *)&v84[v63 - 80];
    v62[3] = ((*(__int16 *)&v84[v63 - 96] * v78[513]
                           + *(__int16 *)&v84[v63 - 112] * v78[512]
                           + result * v78[514]
                           + *(__int16 *)&v84[v63 - 64] * v78[515]
                           + *(__int16 *)&v84[v63 - 48] * v78[516]
                           + *(__int16 *)&v84[v63 - 32] * v78[517]
                           + *(__int16 *)&v84[v63 - 16] * v78[518]
                           + *(__int16 *)&v84[v63] * v78[519]
                           + 64) >> 7)
           - 0x2000;
    a7 += a5[3];
    v63 += 16;
    v62 += a2;
  }
  while ((_DWORD)v63 != 254);
  return result;
}

void *emu_edge_c(void *result, int a2, int a3, int a4, int a5, int a6, char *__dst, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int16x8_t *v38;
  uint64_t v39;
  int16x8_t v40;
  int16x8_t *v41;
  unsigned int v42;
  uint64_t v43;
  int16x8_t v44;
  uint64_t v45;
  int16x8_t *v46;
  uint64_t v47;
  char *v48;
  int v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  unsigned int v54;
  uint64_t v55;
  int16x8_t v56;
  uint64_t v57;
  int16x8_t *v58;
  uint64_t v59;
  char *v60;
  int v61;
  uint64_t v62;
  char *v63;
  char *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int16x8_t v69;
  int16x8_t *v70;
  int v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unsigned int v76;
  uint64_t v77;
  int16x8_t v78;
  uint64_t v79;
  int16x8_t *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int v84;
  int v85;
  char *v86;
  char *v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int16x8_t v92;
  int16x8_t *v93;
  char *v94;
  int v95;
  char *v96;
  int v97;
  size_t v98;
  uint64_t v99;
  char *__src;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  size_t __n;
  uint64_t v112;

  v10 = __dst;
  v11 = a4 - 1;
  if (a6 < a4 - 1)
    v11 = a6;
  if (a6 >= 0)
    v12 = v11;
  else
    v12 = 0;
  v13 = a3 - 1;
  if (a5 < a3 - 1)
    v13 = a5;
  if (a5 >= 0)
    v14 = v13;
  else
    v14 = 0;
  v15 = (_DWORD)result - 1;
  if (-a5 < (int)result - 1)
    v16 = -a5;
  else
    v16 = (_DWORD)result - 1;
  if (a5 > 0)
    v16 = 0;
  v102 = result;
  v17 = (_DWORD)result - a3 + a5;
  if (v17 < v15)
    v15 = (_DWORD)result - a3 + a5;
  if (v17 >= 0)
    v18 = v15;
  else
    v18 = 0;
  v19 = a2 - 1;
  if (-a6 < a2 - 1)
    v20 = -a6;
  else
    v20 = a2 - 1;
  if (a6 <= 0)
    v21 = v20;
  else
    v21 = 0;
  v22 = a2 - a4 + a6;
  if (v22 < v19)
    v19 = a2 - a4 + a6;
  if (v22 >= 0)
    v23 = v19;
  else
    v23 = 0;
  v24 = (a8 >> 1) * v21;
  __src = &__dst[2 * v24];
  v105 = a8 >> 1;
  v112 = 2 * (a8 >> 1);
  v110 = a2 - v21 - v23;
  if (v110 < 1)
    goto LABEL_103;
  v25 = (char *)(a9 + 2 * ((a10 >> 1) * v12 + v14));
  v26 = v16;
  v27 = (_DWORD)result - v16 - v18;
  __n = 2 * v27;
  v106 = (int)result - (int)v18 - 1;
  v107 = v18;
  v108 = v16;
  v109 = a10 >> 1;
  if (!v16)
  {
    if (!(_DWORD)v18)
    {
      v83 = &__dst[2 * v24];
      v84 = a2 - v21 - v23;
      do
      {
        result = memcpy(v83, v25, __n);
        v83 += v112;
        v25 += 2 * v109;
        --v84;
      }
      while (v84);
      goto LABEL_103;
    }
    v49 = 0;
    v50 = v18 & 0xFFFFFFF0;
    v51 = &__dst[2 * v24 + 2 * v27];
    v52 = v51 + 16;
    v53 = &__dst[2 * v24];
    while (1)
    {
      result = memcpy(&v53[2 * v26], v25, __n);
      if ((int)v107 >= 1)
      {
        v54 = *(unsigned __int16 *)&v53[2 * v106];
        if (v107 >= 0x10)
        {
          v56 = vdupq_n_s16(v54);
          v57 = v50;
          v58 = (int16x8_t *)v52;
          do
          {
            v58[-1] = v56;
            *v58 = v56;
            v58 += 2;
            v57 -= 16;
          }
          while (v57);
          v55 = v50;
          if (v50 == v107)
            goto LABEL_55;
        }
        else
        {
          v55 = 0;
        }
        v59 = v107 - v55;
        v60 = &v51[2 * v55];
        do
        {
          *(_WORD *)v60 = v54;
          v60 += 2;
          --v59;
        }
        while (v59);
      }
LABEL_55:
      v26 = v108;
      v25 += 2 * v109;
      v53 += 2 * v105;
      ++v49;
      v52 += v112;
      v51 += v112;
      if (v49 == v110)
        goto LABEL_103;
    }
  }
  v28 = v16;
  if (!(_DWORD)v18)
  {
    if (v16 <= 0)
    {
      v94 = &__dst[2 * v24 + 2 * v16];
      v95 = a2 - v21 - v23;
      do
      {
        result = memcpy(v94, v25, __n);
        v94 += v112;
        v25 += 2 * v109;
        --v95;
      }
      while (v95);
      goto LABEL_103;
    }
    v61 = 0;
    v62 = v16 & 0xFFFFFFF0;
    v63 = &__dst[2 * v24];
    while (1)
    {
      v64 = &v63[2 * v26];
      result = memcpy(v64, v25, __n);
      v26 = v108;
      v65 = *(unsigned __int16 *)v64;
      if (v108 >= 0x10)
      {
        v68 = 0;
        v69 = vdupq_n_s16(v65);
        v67 = v112;
        do
        {
          v70 = (int16x8_t *)&v63[v68];
          *v70 = v69;
          v70[1] = v69;
          v68 += 32;
        }
        while (((2 * v28) & 0x1FFFFFFE0) != v68);
        v66 = v28 & 0xFFFFFFF0;
        if (v62 == v28)
          goto LABEL_67;
      }
      else
      {
        v66 = 0;
        v67 = v112;
      }
      do
        *(_WORD *)&v63[2 * v66++] = v65;
      while (v28 != v66);
LABEL_67:
      v25 += 2 * v109;
      v63 += v67;
      if (++v61 == v110)
        goto LABEL_103;
    }
  }
  if (v16 >= 1)
  {
    v101 = v16 & 0x7FFFFFF0;
    if ((int)v18 > 0)
    {
      v29 = 0;
      v103 = v18 & 0xFFFFFFF0;
      v30 = &__dst[2 * v24 + 2 * v16 + 2 * v27];
      v31 = v30 + 16;
      v32 = &__dst[2 * v24];
      while (1)
      {
        v104 = v31;
        v33 = &v32[2 * v26];
        result = memcpy(v33, v25, __n);
        v26 = v108;
        v34 = *(unsigned __int16 *)v33;
        if (v108 < 0x10)
          break;
        v39 = 0;
        v40 = vdupq_n_s16(v34);
        do
        {
          v41 = (int16x8_t *)&v32[v39];
          *v41 = v40;
          v41[1] = v40;
          v39 += 32;
        }
        while (((2 * v28) & 0x1FFFFFFE0) != v39);
        v35 = v28 & 0xFFFFFFF0;
        v36 = v112;
        v37 = v107;
        v38 = (int16x8_t *)v104;
        if (v101 != v28)
          goto LABEL_44;
LABEL_45:
        v42 = *(unsigned __int16 *)&v32[2 * v106];
        if (v37 >= 0x10)
        {
          v44 = vdupq_n_s16(v42);
          v45 = v103;
          v46 = v38;
          do
          {
            v46[-1] = v44;
            *v46 = v44;
            v46 += 2;
            v45 -= 16;
          }
          while (v45);
          v43 = v103;
          if (v103 == v37)
            goto LABEL_38;
        }
        else
        {
          v43 = 0;
        }
        v47 = v37 - v43;
        v48 = &v30[2 * v43];
        do
        {
          *(_WORD *)v48 = v42;
          v48 += 2;
          --v47;
        }
        while (v47);
LABEL_38:
        v25 += 2 * v109;
        v32 += v36;
        ++v29;
        v31 = &v38->i8[v36];
        v30 += v36;
        if (v29 == v110)
          goto LABEL_103;
      }
      v35 = 0;
      v36 = v112;
      v37 = v107;
      v38 = (int16x8_t *)v104;
      do
LABEL_44:
        *(_WORD *)&v32[2 * v35++] = v34;
      while (v28 != v35);
      goto LABEL_45;
    }
    v85 = 0;
    v86 = &__dst[2 * v24];
    while (1)
    {
      v87 = &v86[2 * v26];
      result = memcpy(v87, v25, __n);
      v26 = v108;
      v88 = *(unsigned __int16 *)v87;
      if (v108 >= 0x10)
      {
        v91 = 0;
        v92 = vdupq_n_s16(v88);
        v90 = v112;
        do
        {
          v93 = (int16x8_t *)&v86[v91];
          *v93 = v92;
          v93[1] = v92;
          v91 += 32;
        }
        while (((2 * v28) & 0x1FFFFFFE0) != v91);
        v89 = v28 & 0xFFFFFFF0;
        if (v101 == v28)
          goto LABEL_90;
      }
      else
      {
        v89 = 0;
        v90 = v112;
      }
      do
        *(_WORD *)&v86[2 * v89++] = v88;
      while (v28 != v89);
LABEL_90:
      v25 += 2 * v109;
      v86 += v90;
      if (++v85 == v110)
        goto LABEL_103;
    }
  }
  if ((int)v18 > 0)
  {
    v71 = 0;
    v72 = v18 & 0xFFFFFFF0;
    v73 = &__dst[2 * v24 + 2 * v16 + 2 * v27];
    v74 = v73 + 16;
    v75 = &__dst[2 * v24];
    while (1)
    {
      result = memcpy(&v75[2 * v26], v25, __n);
      v76 = *(unsigned __int16 *)&v75[2 * v106];
      if (v107 >= 0x10)
      {
        v78 = vdupq_n_s16(v76);
        v79 = v72;
        v80 = (int16x8_t *)v74;
        do
        {
          v80[-1] = v78;
          *v80 = v78;
          v80 += 2;
          v79 -= 16;
        }
        while (v79);
        v77 = v72;
        v26 = v108;
        if (v72 == v107)
          goto LABEL_77;
      }
      else
      {
        v77 = 0;
        v26 = v108;
      }
      v81 = v107 - v77;
      v82 = &v73[2 * v77];
      do
      {
        *(_WORD *)v82 = v76;
        v82 += 2;
        --v81;
      }
      while (v81);
LABEL_77:
      v25 += 2 * v109;
      v75 += 2 * v105;
      ++v71;
      v74 += v112;
      v73 += v112;
      if (v71 == v110)
        goto LABEL_103;
    }
  }
  v96 = &__dst[2 * v24 + 2 * v16];
  v97 = a2 - v21 - v23;
  do
  {
    result = memcpy(v96, v25, __n);
    v96 += v112;
    v25 += 2 * v109;
    --v97;
  }
  while (v97);
LABEL_103:
  v98 = 2 * (_QWORD)v102;
  if (v21 < 1)
  {
    v99 = v112;
    if (v23 < 1)
      return result;
    goto LABEL_109;
  }
  v99 = v112;
  do
  {
    result = memcpy(v10, __src, v98);
    v10 += v112;
    --v21;
  }
  while (v21);
  if (v23 >= 1)
  {
    do
    {
LABEL_109:
      result = memcpy(&v10[2 * v105 * v110], &v10[v105 * (2 * v110 - 2)], v98);
      v10 += v99;
      --v23;
    }
    while (v23);
  }
  return result;
}

uint64_t resize_c(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  uint64_t v10;
  signed int v11;
  uint64_t v12;
  uint64_t v13;
  int32x2_t v14;
  uint64_t v15;
  signed int v16;
  int v17;
  char *v18;
  int32x2_t v19;
  int8x8_t v20;
  int v21;
  int v22;
  int v23;
  signed int v24;
  int v25;
  int8x8_t v26;
  int8x8_t v27;
  int v28;
  int v29;
  __int16 v30;
  int v31;

  if (a5 >= 1)
  {
    v10 = a4 >> 1;
    v11 = a7 - 1;
    v12 = 2 * a5;
    v13 = 2 * (a2 >> 1);
    v14 = vdup_n_s32(a7 - 1);
    do
    {
      v15 = 0;
      v16 = -1;
      v17 = a9;
      do
      {
        v18 = (char *)&dav1d_resize_filter + 8 * (v17 >> 8);
        v19 = vdup_n_s32(v16);
        v20 = vbic_s8((int8x8_t)vmin_s32(vadd_s32(v19, (int32x2_t)0xFFFFFFFEFFFFFFFDLL), v14), (int8x8_t)vcgt_s32((int32x2_t)0x200000003, v19));
        v21 = *(unsigned __int16 *)(a3 + 2 * v20.i32[1]);
        v22 = *(unsigned __int16 *)(a3 + 2 * v20.i32[0]) * *v18;
        if (v16 - 1 >= v11)
          v23 = v11;
        else
          v23 = v16 - 1;
        if (v16 >= v11)
          v24 = v11;
        else
          v24 = v16;
        if (v16 <= 0)
          v23 = 0;
        v25 = *(unsigned __int16 *)(a3 + 2 * v23);
        if (v16 < 0)
          v24 = 0;
        v26 = vbic_s8((int8x8_t)vmin_s32(vadd_s32(v19, (int32x2_t)0x200000001), v14), (int8x8_t)vcgt_s32((int32x2_t)0xFFFFFFFEFFFFFFFFLL, v19));
        v27 = vbic_s8((int8x8_t)vmin_s32(vadd_s32(v19, (int32x2_t)0x400000003), v14), (int8x8_t)vcgt_s32((int32x2_t)0xFFFFFFFCFFFFFFFDLL, v19));
        v28 = v22
            + v21 * v18[1]
            + v25 * v18[2]
            + *(unsigned __int16 *)(a3 + 2 * v24) * v18[3]
            + *(unsigned __int16 *)(a3 + 2 * v26.i32[0]) * v18[4]
            + *(unsigned __int16 *)(a3 + 2 * v26.i32[1]) * v18[5]
            + *(unsigned __int16 *)(a3 + 2 * v27.i32[0]) * v18[6]
            + *(unsigned __int16 *)(a3 + 2 * v27.i32[1]) * v18[7];
        v29 = (64 - v28) >> 7;
        if (v29 >= a10)
          LOWORD(v29) = a10;
        if (v28 <= 64)
          v30 = v29;
        else
          v30 = 0;
        *(_WORD *)(result + v15) = v30;
        v31 = v17 + a8;
        v16 += v31 >> 14;
        v17 = v31 & 0x3FFF;
        v15 += 2;
      }
      while (v12 != v15);
      a3 += 2 * v10;
      result += v13;
      --a6;
    }
    while (a6);
  }
  return result;
}

unint64_t put_8tap_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, signed int a10)
{
  unint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int8x8_t v18;
  int8x16_t v19;
  unsigned int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int32x4_t v29;
  char *v30;
  char *v31;
  char *v32;
  unsigned int v33;
  int32x4_t v34;
  int32x4_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  BOOL v46;
  BOOL v48;
  BOOL v50;
  BOOL v52;
  BOOL v54;
  BOOL v56;
  BOOL v58;
  unint64_t v59;
  BOOL v61;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  int8x8_t v66;
  int8x8_t v67;
  const char *v68;
  int8x8_t v69;
  const char *v70;
  int8x8_t v71;
  const char *v72;
  int8x8_t v73;
  const char *v74;
  int8x8_t v75;
  const char *v76;
  int8x8_t v77;
  const char *v78;
  int8x8_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int16x8_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int16x8_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int16x8_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int16x8_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int16x8_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int16x8_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int16x8_t v101;
  int32x4_t v102;
  int32x4_t v103;
  uint16x8_t v104;
  uint16x8_t v105;
  uint16x8_t v106;
  uint16x8_t v107;
  int32x4_t v108;
  int32x4_t v109;
  uint16x8_t v110;
  uint16x8_t v111;
  int32x4_t v112;
  int32x4_t v113;
  uint16x8_t v114;
  uint16x8_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  uint16x8_t v119;
  uint16x8_t v120;
  int32x4_t v121;
  int32x4_t v122;
  uint16x8_t v123;
  uint16x8_t v124;
  int32x4_t v125;
  int32x4_t v126;
  uint16x8_t v127;
  uint16x8_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  uint16x8_t v133;
  uint16x8_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int8x16_t *v139;
  uint64_t v140;
  const char *v141;
  int8x8_t v142;
  int16x8_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int8x8_t v146;
  int16x8_t v147;
  int32x4_t v148;
  int32x4_t v149;
  const char *v150;
  int8x8_t v151;
  int16x8_t v152;
  int32x4_t v153;
  int32x4_t v154;
  const char *v155;
  int8x8_t v156;
  int16x8_t v157;
  int32x4_t v158;
  int32x4_t v159;
  const char *v160;
  int8x8_t v161;
  int16x8_t v162;
  int32x4_t v163;
  int32x4_t v164;
  const char *v165;
  int8x8_t v166;
  int16x8_t v167;
  int32x4_t v168;
  int32x4_t v169;
  const char *v170;
  int8x8_t v171;
  int16x8_t v172;
  int32x4_t v173;
  int32x4_t v174;
  const char *v175;
  int8x8_t v176;
  char *v177;
  char *v178;
  int16x8_t v179;
  int32x4_t v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  int32x4_t v185;
  char *v186;
  char *v187;
  unint64_t v188;
  uint64_t v189;
  uint16x8_t v190;
  uint16x8_t v191;
  int32x4_t v192;
  int32x4_t v193;
  uint16x8_t v194;
  int32x4_t v195;
  int32x4_t v196;
  uint16x8_t v197;
  int32x4_t v198;
  int32x4_t v199;
  uint16x8_t v200;
  int32x4_t v201;
  int32x4_t v202;
  uint16x8_t v203;
  int32x4_t v204;
  int32x4_t v205;
  uint16x8_t v206;
  int32x4_t v207;
  int32x4_t v208;
  uint16x8_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int v212;
  int v213;
  __int16 v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  int v219;
  char *v220;
  int32x4_t v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  _BYTE *v234;
  int32x4_t v235;
  unsigned int v236;
  int16x4_t v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  int8x16_t v241;
  int8x16_t v242;
  int8x16_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  int8x16_t v251;
  uint16x8_t v252;
  uint16x8_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  int v257;
  uint64_t v258;
  unsigned int v259;
  unsigned int v260;
  int32x4_t v261;
  int32x4_t v262;
  uint64_t v263;
  _BYTE *v264;
  int32x4_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  __int16 v271;
  __int16 v272;
  uint64_t v273;
  const char *v274;
  int8x8_t v275;
  int8x8_t v276;
  const char *v277;
  int8x8_t v278;
  const char *v279;
  int8x8_t v280;
  const char *v281;
  int8x8_t v282;
  const char *v283;
  int8x8_t v284;
  const char *v285;
  int8x8_t v286;
  const char *v287;
  int8x8_t v288;
  int16x8_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int16x8_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int16x8_t v295;
  int32x4_t v296;
  int32x4_t v297;
  int16x8_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int16x8_t v301;
  int32x4_t v302;
  int32x4_t v303;
  int16x8_t v304;
  int32x4_t v305;
  int32x4_t v306;
  int16x8_t v307;
  int32x4_t v308;
  int32x4_t v309;
  int16x8_t v310;
  int32x4_t v311;
  int32x4_t v312;
  int16x8_t v313;
  int16x8_t v314;
  int32x4_t v315;
  int32x4_t v316;
  int16x8_t v317;
  int32x4_t v318;
  int16x8_t v319;
  int32x4_t v320;
  int16x8_t v321;
  int32x4_t v322;
  int16x8_t v323;
  int32x4_t v324;
  int16x8_t v325;
  int32x4_t v326;
  int16x8_t v327;
  int32x4_t v328;
  int32x4_t v329;
  int32x4_t v330;
  uint64_t v331;
  unsigned int v332;
  uint64_t v333;
  int32x4_t v334;
  int32x4_t v335;
  uint64_t v336;
  char *v337;
  unint64_t v338;
  uint64_t v339;
  char *v340;
  unint64_t v341;
  char *v342;
  char *v343;
  BOOL v345;
  uint64_t v347;
  const char *v348;
  int8x8_t v349;
  int8x8_t v350;
  const char *v351;
  int8x8_t v352;
  const char *v353;
  int8x8_t v354;
  const char *v355;
  int8x8_t v356;
  const char *v357;
  int8x8_t v358;
  const char *v359;
  int8x8_t v360;
  const char *v361;
  int8x8_t v362;
  int16x8_t v363;
  int32x4_t v364;
  int32x4_t v365;
  int16x8_t v366;
  int32x4_t v367;
  int32x4_t v368;
  int16x8_t v369;
  int32x4_t v370;
  int32x4_t v371;
  int16x8_t v372;
  int32x4_t v373;
  int32x4_t v374;
  int16x8_t v375;
  int32x4_t v376;
  int32x4_t v377;
  int16x8_t v378;
  int32x4_t v379;
  int32x4_t v380;
  int16x8_t v381;
  int32x4_t v382;
  int32x4_t v383;
  int16x8_t v384;
  int32x4_t v385;
  int32x4_t v386;
  uint16x8_t v387;
  uint16x8_t v388;
  int32x4_t v389;
  int32x4_t v390;
  uint16x8_t v391;
  int32x4_t v392;
  uint16x8_t v393;
  int32x4_t v394;
  uint16x8_t v395;
  int32x4_t v396;
  uint16x8_t v397;
  int32x4_t v398;
  uint16x8_t v399;
  int32x4_t v400;
  uint16x8_t v401;
  int32x4_t v402;
  int32x4_t v403;
  uint64_t v404;
  uint64_t v405;
  int16x8_t v406;
  int v407;
  int v408;
  __int16 v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  char *v414;
  char *v415;
  char *v416;
  char *v417;
  char *v418;
  char *v419;
  char *v420;
  char *v421;
  char *v422;
  char *v423;
  uint64_t v424;
  char *v425;
  uint64_t v426;
  uint64_t v427;
  char *__dst;
  uint64_t v429;
  unsigned int v430;
  _BYTE v431[34560];
  uint64_t v432;

  result = MEMORY[0x1E0C80A78](a1, a2);
  v427 = v13;
  __dst = (char *)result;
  v429 = v11;
  v432 = *MEMORY[0x1E0C80C00];
  if (v16)
  {
    if (v14 < 5)
      v20 = (a9 & 1) + 3;
    else
      v20 = a9 & 3;
    v21 = (char *)&dav1d_mc_subpel_filters + 120 * v20 + 8 * v16 - 8;
    if (v17)
    {
LABEL_91:
      if (v15 < 5)
        v215 = ((a9 >> 2) & 1) + 3;
      else
        v215 = a9 >> 2;
      v22 = (char *)&dav1d_mc_subpel_filters + 120 * v215 + 8 * v17 - 8;
      v23 = v11 >> 1;
      v24 = v13 >> 1;
      v430 = v14;
      if (v21)
        goto LABEL_95;
      goto LABEL_6;
    }
  }
  else
  {
    v21 = 0;
    if (v17)
      goto LABEL_91;
  }
  v22 = 0;
  v23 = v11 >> 1;
  v24 = v13 >> 1;
  v430 = v14;
  if (v21)
  {
LABEL_95:
    v216 = __clz(a10);
    v217 = 24 - v216;
    v218 = (1 << (24 - v216)) >> 1;
    if (v22)
    {
      if (v14 >= 1)
      {
        v219 = v15 + 7;
        v220 = &v12[-6 * v24];
        result = *v21;
        v18.i32[0] = *(_DWORD *)(v21 + 1);
        v221 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v18));
        v222 = v21[5];
        v223 = v21[6];
        v224 = v21[7];
        v225 = vdupq_n_s32(result);
        v226 = vdupq_lane_s32(*(int32x2_t *)v221.i8, 0);
        v227 = vdupq_lane_s32(*(int32x2_t *)v221.i8, 1);
        v228 = vdupq_laneq_s32(v221, 2);
        v229 = vdupq_laneq_s32(v221, 3);
        v230 = vdupq_n_s32(v222);
        v231 = vdupq_n_s32(v223);
        v232 = vdupq_n_s32(v224);
        v233 = vdupq_n_s32(v218);
        v234 = v431;
        v235 = vnegq_s32(vdupq_n_s32(v217));
        while (1)
        {
          v236 = *((unsigned __int16 *)v220 - 3);
          v237 = *(int16x4_t *)(v220 - 4);
          v238 = *((unsigned __int16 *)v220 + 3);
          if (v430 >= 8)
          {
            v240 = 0;
            v241 = (int8x16_t)vdupq_n_s16(v238);
            v19.i64[1] = *(_QWORD *)(v220 - 4);
            v242 = (int8x16_t)vdupq_lane_s16(v237, 2);
            v243 = (int8x16_t)vdupq_lane_s16(v237, 1);
            v244 = (int8x16_t)vdupq_lane_s16(v237, 0);
            v245 = (int8x16_t)vdupq_n_s16(v236);
            do
            {
              v246 = v19;
              v247 = v241;
              v19 = *(int8x16_t *)&v220[v240 + 4];
              v248 = vextq_s8(v246, v19, 0xEuLL);
              v249 = vextq_s8(v242, v248, 0xEuLL);
              v250 = vextq_s8(v243, v249, 0xEuLL);
              v251 = vextq_s8(v244, v250, 0xEuLL);
              v252 = (uint16x8_t)vextq_s8(v245, v251, 0xEuLL);
              v241 = *(int8x16_t *)&v220[v240 + 8];
              v253 = (uint16x8_t)vextq_s8(v247, v241, 0xEuLL);
              *(int16x8_t *)&v234[v240] = vuzp1q_s16((int16x8_t)vshlq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v233, v231, (int32x4_t)vmovl_u16(*(uint16x4_t *)v253.i8)), v229, (int32x4_t)vmovl_u16(*(uint16x4_t *)v248.i8)), v228, (int32x4_t)vmovl_u16(*(uint16x4_t *)v249.i8)), v227, (int32x4_t)vmovl_u16(*(uint16x4_t *)v250.i8)), v226,
                                                                 (int32x4_t)vmovl_u16(*(uint16x4_t *)v251.i8)),
                                                               v225,
                                                               (int32x4_t)vmovl_u16(*(uint16x4_t *)v252.i8)),
                                                             v230,
                                                             (int32x4_t)vmovl_u16(*(uint16x4_t *)v19.i8)),
                                                           v232,
                                                           (int32x4_t)vmovl_u16(*(uint16x4_t *)v241.i8)),
                                                         v235),
                                            (int16x8_t)vshlq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v233, v231, (int32x4_t)vmovl_high_u16(v253)), v229, (int32x4_t)vmovl_high_u16((uint16x8_t)v248)), v228, (int32x4_t)vmovl_high_u16((uint16x8_t)v249)), v227, (int32x4_t)vmovl_high_u16((uint16x8_t)v250)), v226, (int32x4_t)vmovl_high_u16((uint16x8_t)v251)),
                                                               v225,
                                                               (int32x4_t)vmovl_high_u16(v252)),
                                                             v230,
                                                             (int32x4_t)vmovl_high_u16((uint16x8_t)v19)),
                                                           v232,
                                                           (int32x4_t)vmovl_high_u16((uint16x8_t)v241)),
                                                         v235));
              v240 += 16;
              v242 = v248;
              v243 = v249;
              v244 = v250;
              v245 = v251;
            }
            while (((2 * v430) & 0x1FFFFFFF0) != v240);
            if ((v430 & 0xFFFFFFF8) == (unint64_t)v430)
              goto LABEL_98;
            LOWORD(v238) = v241.i16[7];
            LOWORD(v236) = v19.i16[3];
            v237 = (int16x4_t)vextq_s8(v19, v19, 8uLL).u64[0];
            v239 = v430 & 0xFFFFFFF8;
          }
          else
          {
            v239 = 0;
          }
          v254 = 2 * v239;
          v255 = v430 - v239;
          do
          {
            v19 = (int8x16_t)vmulq_s32((int32x4_t)vmovl_u16((uint16x4_t)v237), v221);
            v256 = *(unsigned __int16 *)&v220[v254 + 4];
            v257 = (unsigned __int16)v238;
            v238 = *(unsigned __int16 *)&v220[v254 + 8];
            v19.i32[0] = vaddvq_s32((int32x4_t)v19);
            *(_WORD *)&v234[v254] = (int)(v19.i32[0]
                                        + v257 * v223
                                        + v256 * v222
                                        + (unsigned __int16)v236 * (_DWORD)result
                                        + v218
                                        + v238 * v224) >> v217;
            LOWORD(v236) = v237.i16[0];
            v237 = (int16x4_t)vext_s8((int8x8_t)v237, *(int8x8_t *)v221.i8, 2uLL);
            v237.i16[3] = v256;
            v254 += 2;
            --v255;
          }
          while (v255);
LABEL_98:
          v234 += 256;
          v220 += 2 * v24;
          if (!--v219)
          {
            v258 = 0;
            v259 = v216 - 12;
            v260 = (1 << v259) >> 1;
            v261 = vdupq_n_s32(v260);
            v262 = vdupq_n_s32(a10);
            v263 = 2 * v23;
            v264 = v431;
            v265 = vnegq_s32(vdupq_n_s32(v259));
            v266 = (unint64_t)__dst;
            while (v430 >= 8 && (v266 >= (unint64_t)(v22 + 8) || v22 >= &__dst[2 * v430 + v258 * v429]))
            {
              v273 = 0;
              v274 = v22;
              v275 = vld1_dup_s8(v274++);
              v276 = vld1_dup_s8(v274);
              v277 = v22 + 2;
              v278 = vld1_dup_s8(v277);
              v279 = v22 + 3;
              v280 = vld1_dup_s8(v279);
              v281 = v22 + 4;
              v282 = vld1_dup_s8(v281);
              v283 = v22 + 5;
              v284 = vld1_dup_s8(v283);
              v285 = v22 + 6;
              v286 = vld1_dup_s8(v285);
              v287 = v22 + 7;
              v288 = vld1_dup_s8(v287);
              v289 = vmovl_s8(v275);
              v290 = vmovl_high_s16(v289);
              v291 = vmovl_s16(*(int16x4_t *)v289.i8);
              v292 = vmovl_s8(v276);
              v293 = vmovl_high_s16(v292);
              v294 = vmovl_s16(*(int16x4_t *)v292.i8);
              v295 = vmovl_s8(v278);
              v296 = vmovl_high_s16(v295);
              v297 = vmovl_s16(*(int16x4_t *)v295.i8);
              v298 = vmovl_s8(v280);
              v299 = vmovl_high_s16(v298);
              v300 = vmovl_s16(*(int16x4_t *)v298.i8);
              v301 = vmovl_s8(v282);
              v302 = vmovl_high_s16(v301);
              v303 = vmovl_s16(*(int16x4_t *)v301.i8);
              v304 = vmovl_s8(v284);
              v305 = vmovl_high_s16(v304);
              v306 = vmovl_s16(*(int16x4_t *)v304.i8);
              v307 = vmovl_s8(v286);
              v308 = vmovl_high_s16(v307);
              v309 = vmovl_s16(*(int16x4_t *)v307.i8);
              v310 = vmovl_s8(v288);
              v311 = vmovl_high_s16(v310);
              v312 = vmovl_s16(*(int16x4_t *)v310.i8);
              do
              {
                v313 = *(int16x8_t *)&v264[v273];
                v314 = *(int16x8_t *)&v264[v273 + 256];
                v315 = vmlaq_s32(v261, vmovl_s16(*(int16x4_t *)v313.i8), v291);
                v316 = vmlaq_s32(vmlaq_s32(v261, vmovl_high_s16(v313), v290), vmovl_high_s16(v314), v293);
                v317 = *(int16x8_t *)&v264[v273 + 512];
                v318 = vmlaq_s32(vmlaq_s32(v315, vmovl_s16(*(int16x4_t *)v314.i8), v294), vmovl_s16(*(int16x4_t *)v317.i8), v297);
                v319 = *(int16x8_t *)&v264[v273 + 768];
                v320 = vmlaq_s32(vmlaq_s32(v316, vmovl_high_s16(v317), v296), vmovl_high_s16(v319), v299);
                v321 = *(int16x8_t *)&v264[v273 + 1024];
                v322 = vmlaq_s32(vmlaq_s32(v318, vmovl_s16(*(int16x4_t *)v319.i8), v300), vmovl_s16(*(int16x4_t *)v321.i8), v303);
                v323 = *(int16x8_t *)&v264[v273 + 1280];
                v324 = vmlaq_s32(vmlaq_s32(v320, vmovl_high_s16(v321), v302), vmovl_high_s16(v323), v305);
                v325 = *(int16x8_t *)&v264[v273 + 1536];
                v326 = vmlaq_s32(vmlaq_s32(v322, vmovl_s16(*(int16x4_t *)v323.i8), v306), vmovl_s16(*(int16x4_t *)v325.i8), v309);
                v327 = *(int16x8_t *)&v264[v273 + 1792];
                v328 = vmlaq_s32(vmlaq_s32(v324, vmovl_high_s16(v325), v308), vmovl_high_s16(v327), v311);
                v329 = vshlq_s32(vmlaq_s32(v326, vmovl_s16(*(int16x4_t *)v327.i8), v312), v265);
                v330 = vshlq_s32(v328, v265);
                *(int8x16_t *)(v266 + v273) = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v329, v262), (int16x8_t)vminq_s32(v330, v262)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v329), (int16x8_t)vcltzq_s32(v330)));
                v273 += 16;
              }
              while (((2 * v430) & 0x1FFFFFFF0) != v273);
              v267 = v430 & 0xFFFFFFF8;
              if (v267 != v430)
                goto LABEL_114;
LABEL_109:
              v266 += v263;
              ++v258;
              v264 += 256;
              if (!--v15)
                return result;
            }
            v267 = 0;
LABEL_114:
            v268 = v430 - v267;
            v269 = 2 * v267;
            do
            {
              result = *(__int16 *)&v264[v269 + 1536];
              v270 = (int)(v260
                         + *(__int16 *)&v264[v269] * *v22
                         + *(__int16 *)&v264[v269 + 256] * v22[1]
                         + *(__int16 *)&v264[v269 + 512] * v22[2]
                         + *(__int16 *)&v264[v269 + 768] * v22[3]
                         + *(__int16 *)&v264[v269 + 1024] * v22[4]
                         + *(__int16 *)&v264[v269 + 1280] * v22[5]
                         + result * v22[6]
                         + *(__int16 *)&v264[v269 + 1792] * v22[7]) >> v259;
              if (v270 >= a10)
                v271 = a10;
              else
                v271 = (int)(v260
                           + *(__int16 *)&v264[v269] * *v22
                           + *(__int16 *)&v264[v269 + 256] * v22[1]
                           + *(__int16 *)&v264[v269 + 512] * v22[2]
                           + *(__int16 *)&v264[v269 + 768] * v22[3]
                           + *(__int16 *)&v264[v269 + 1024] * v22[4]
                           + *(__int16 *)&v264[v269 + 1280] * v22[5]
                           + result * v22[6]
                           + *(__int16 *)&v264[v269 + 1792] * v22[7]) >> v259;
              if (v270 >= 0)
                v272 = v271;
              else
                v272 = 0;
              *(_WORD *)(v266 + v269) = v272;
              v269 += 2;
              --v268;
            }
            while (v268);
            goto LABEL_109;
          }
        }
      }
      return result;
    }
    if (v14 < 1)
      return result;
    v331 = 0;
    v332 = v218 + 32;
    v333 = 2 * v14;
    v334 = vdupq_n_s32(v332);
    v335 = vdupq_n_s32(a10);
    result = v14 & 0xFFFFFFF8;
    v336 = 2 * v23;
    v337 = v12;
    v338 = (unint64_t)__dst;
    while (v14 >= 8)
    {
      v339 = 0;
      v340 = &v12[v331 * v427];
      v341 = (unint64_t)&v340[v333 + 8];
      v342 = v340 - 6;
      v343 = &__dst[v333 + v331 * v429];
      v345 = v338 < v341 && v342 < v343;
      if (v21 < v343 && v338 < (unint64_t)(v21 + 8))
        goto LABEL_147;
      if (v345)
        goto LABEL_147;
      v347 = 0;
      v348 = v21;
      v349 = vld1_dup_s8(v348++);
      v350 = vld1_dup_s8(v348);
      v351 = v21 + 2;
      v352 = vld1_dup_s8(v351);
      v353 = v21 + 3;
      v354 = vld1_dup_s8(v353);
      v355 = v21 + 4;
      v356 = vld1_dup_s8(v355);
      v357 = v21 + 5;
      v358 = vld1_dup_s8(v357);
      v359 = v21 + 6;
      v360 = vld1_dup_s8(v359);
      v361 = v21 + 7;
      v362 = vld1_dup_s8(v361);
      v363 = vmovl_s8(v349);
      v364 = vmovl_high_s16(v363);
      v365 = vmovl_s16(*(int16x4_t *)v363.i8);
      v366 = vmovl_s8(v350);
      v367 = vmovl_high_s16(v366);
      v368 = vmovl_s16(*(int16x4_t *)v366.i8);
      v369 = vmovl_s8(v352);
      v370 = vmovl_high_s16(v369);
      v371 = vmovl_s16(*(int16x4_t *)v369.i8);
      v372 = vmovl_s8(v354);
      v373 = vmovl_high_s16(v372);
      v374 = vmovl_s16(*(int16x4_t *)v372.i8);
      v375 = vmovl_s8(v356);
      v376 = vmovl_high_s16(v375);
      v377 = vmovl_s16(*(int16x4_t *)v375.i8);
      v378 = vmovl_s8(v358);
      v379 = vmovl_high_s16(v378);
      v380 = vmovl_s16(*(int16x4_t *)v378.i8);
      v381 = vmovl_s8(v360);
      v382 = vmovl_high_s16(v381);
      v383 = vmovl_s16(*(int16x4_t *)v381.i8);
      v384 = vmovl_s8(v362);
      v385 = vmovl_high_s16(v384);
      v386 = vmovl_s16(*(int16x4_t *)v384.i8);
      do
      {
        v387 = *(uint16x8_t *)&v337[v347 - 6];
        v388 = *(uint16x8_t *)&v337[v347 - 4];
        v389 = vmlaq_s32(v334, (int32x4_t)vmovl_u16(*(uint16x4_t *)v387.i8), v365);
        v390 = vmlaq_s32(vmlaq_s32(v334, (int32x4_t)vmovl_high_u16(v387), v364), (int32x4_t)vmovl_high_u16(v388), v367);
        v391 = *(uint16x8_t *)&v337[v347 - 2];
        v392 = vmlaq_s32(vmlaq_s32(v389, (int32x4_t)vmovl_u16(*(uint16x4_t *)v388.i8), v368), (int32x4_t)vmovl_u16(*(uint16x4_t *)v391.i8), v371);
        v393 = *(uint16x8_t *)&v337[v347];
        v394 = vmlaq_s32(vmlaq_s32(v390, (int32x4_t)vmovl_high_u16(v391), v370), (int32x4_t)vmovl_high_u16(v393), v373);
        v395 = *(uint16x8_t *)&v337[v347 + 2];
        v396 = vmlaq_s32(vmlaq_s32(v392, (int32x4_t)vmovl_u16(*(uint16x4_t *)v393.i8), v374), (int32x4_t)vmovl_u16(*(uint16x4_t *)v395.i8), v377);
        v397 = *(uint16x8_t *)&v337[v347 + 4];
        v398 = vmlaq_s32(vmlaq_s32(v394, (int32x4_t)vmovl_high_u16(v395), v376), (int32x4_t)vmovl_high_u16(v397), v379);
        v399 = *(uint16x8_t *)&v337[v347 + 6];
        v400 = vmlaq_s32(vmlaq_s32(v396, (int32x4_t)vmovl_u16(*(uint16x4_t *)v397.i8), v380), (int32x4_t)vmovl_u16(*(uint16x4_t *)v399.i8), v383);
        v401 = *(uint16x8_t *)&v337[v347 + 8];
        v402 = vmlaq_s32(vmlaq_s32(v398, (int32x4_t)vmovl_high_u16(v399), v382), (int32x4_t)vmovl_high_u16(v401), v385);
        v403 = vmlaq_s32(v400, (int32x4_t)vmovl_u16(*(uint16x4_t *)v401.i8), v386);
        *(int8x16_t *)(v338 + v347) = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(vshrq_n_s32(v403, 6uLL), v335), (int16x8_t)vminq_s32(vshrq_n_s32(v402, 6uLL), v335)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v403), (int16x8_t)vcltzq_s32(v402)));
        v347 += 16;
      }
      while ((v333 & 0x1FFFFFFF0) != v347);
      v339 = v14 & 0xFFFFFFF8;
      if (result != v14)
        goto LABEL_147;
LABEL_129:
      v338 += v336;
      ++v331;
      v337 += 2 * v24;
      if (!--v15)
        return result;
    }
    v339 = 0;
LABEL_147:
    v404 = 2 * v339;
    v405 = v14 - v339;
    do
    {
      v406 = vmovl_s8(*(int8x8_t *)v21);
      v407 = vaddvq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vmovl_high_u16(*(uint16x8_t *)&v337[v404 - 6]), vmovl_high_s16(v406)), (int32x4_t)vmovl_u16(*(uint16x4_t *)&v337[v404 - 6]), vmovl_s16(*(int16x4_t *)v406.i8)))+ v332;
      v408 = v407 >> 6;
      if (v407 >> 6 >= a10)
        LOWORD(v408) = a10;
      if (v407 >= 0)
        v409 = v408;
      else
        v409 = 0;
      *(_WORD *)(v338 + v404) = v409;
      v404 += 2;
      --v405;
    }
    while (v405);
    goto LABEL_129;
  }
LABEL_6:
  if (!v22)
    return (unint64_t)put_c((char *)result, v23, v12, v24, v14, v15);
  if (v14 >= 1)
  {
    v25 = 0;
    v26 = v14;
    v27 = 2 * v14;
    v28 = 2 * v24;
    v413 = v14 & 0xFFFFFFF0;
    v29 = vdupq_n_s32(a10);
    v30 = &v12[-2 * v24];
    v31 = &v12[2 * v24];
    v424 = v27;
    v32 = &v12[2 * v427];
    v426 = 2 * v23;
    v410 = v27 & 0x1FFFFFFE0;
    v411 = -(uint64_t)(v14 & 0xFFFFFFF8);
    v412 = v14 & 0xFFFFFFF8;
    v420 = &v12[v27 - 6 * v24];
    v421 = &v12[4 * v427];
    v419 = &v12[v27 - 2 * v427];
    v33 = v430;
    v418 = &v12[v27 - v427];
    v417 = &v12[v27 + v427];
    v416 = &v12[2 * v427 + v27];
    v415 = &v12[6 * v24 + v27];
    v414 = &v12[4 * v427 + v27];
    v34.i64[0] = 0x2000000020;
    v34.i64[1] = 0x2000000020;
    v35.i64[0] = 0x1F0000001FLL;
    v35.i64[1] = 0x1F0000001FLL;
    v36 = v421;
    v422 = &v12[6 * v24];
    v423 = &v12[-6 * v24];
    v37 = v422;
    v38 = v12;
    v39 = v423;
    v40 = &v12[-2 * v427];
    v425 = v12;
    do
    {
      if (v33 < 8)
      {
        v41 = 0;
        goto LABEL_82;
      }
      v41 = 0;
      v42 = v25 * v427;
      v43 = &v12[v424 + v25 * v427];
      v44 = (unint64_t)&__dst[v424 + v25 * v429];
      v46 = result < (unint64_t)&v414[v25 * v427] && (unint64_t)&v421[v25 * v427] < v44;
      v48 = result < (unint64_t)&v415[v25 * v427] && (unint64_t)&v422[v42] < v44;
      v12 = v425;
      v50 = result < (unint64_t)&v416[v25 * v427] && (unint64_t)&v425[2 * v427 + v42] < v44;
      v52 = result < (unint64_t)&v417[v25 * v427] && (unint64_t)&v425[v427 + v42] < v44;
      v54 = result < (unint64_t)v43 && (unint64_t)v38 < v44;
      v56 = result < (unint64_t)&v418[v25 * v427] && (unint64_t)&v425[v42 - v427] < v44;
      v58 = result < (unint64_t)&v419[v25 * v427] && (unint64_t)&v425[(v25 - 2) * v427] < v44;
      v59 = (unint64_t)&v423[v42];
      v61 = result < (unint64_t)&v420[v25 * v427] && v59 < v44;
      if ((unint64_t)v22 < v44 && result < (unint64_t)(v22 + 8))
      {
        v33 = v430;
        do
        {
LABEL_82:
          v212 = *(unsigned __int16 *)&v39[2 * v41] * *v22
               + *(unsigned __int16 *)&v40[2 * v41] * v22[1]
               + *(unsigned __int16 *)&v30[2 * v41] * v22[2]
               + *(unsigned __int16 *)&v38[2 * v41] * v22[3]
               + *(unsigned __int16 *)&v31[2 * v41] * v22[4]
               + *(unsigned __int16 *)&v32[2 * v41] * v22[5]
               + *(unsigned __int16 *)&v37[2 * v41] * v22[6]
               + *(unsigned __int16 *)&v36[2 * v41] * v22[7];
          v213 = (v212 + 32) >> 6;
          if (v213 >= a10)
            LOWORD(v213) = a10;
          if (v212 >= -32)
            v214 = v213;
          else
            v214 = 0;
          *(_WORD *)(result + 2 * v41++) = v214;
        }
        while (v26 != v41);
        goto LABEL_9;
      }
      v33 = v430;
      if (v46 || v48 || v50 || v52 || v54 || v56 || v58 || v61)
        goto LABEL_82;
      if (v430 >= 0x10)
      {
        v64 = 0;
        v65 = v22;
        v66 = vld1_dup_s8(v65++);
        v67 = vld1_dup_s8(v65);
        v68 = v22 + 2;
        v69 = vld1_dup_s8(v68);
        v70 = v22 + 3;
        v71 = vld1_dup_s8(v70);
        v72 = v22 + 4;
        v73 = vld1_dup_s8(v72);
        v74 = v22 + 5;
        v75 = vld1_dup_s8(v74);
        v76 = v22 + 6;
        v77 = vld1_dup_s8(v76);
        v78 = v22 + 7;
        v79 = vld1_dup_s8(v78);
        v80 = vmovl_s8(v66);
        v81 = vmovl_high_s16(v80);
        v82 = vmovl_s16(*(int16x4_t *)v80.i8);
        v83 = vmovl_s8(v67);
        v84 = vmovl_high_s16(v83);
        v85 = vmovl_s16(*(int16x4_t *)v83.i8);
        v86 = vmovl_s8(v69);
        v87 = vmovl_high_s16(v86);
        v88 = vmovl_s16(*(int16x4_t *)v86.i8);
        v89 = vmovl_s8(v71);
        v90 = vmovl_high_s16(v89);
        v91 = vmovl_s16(*(int16x4_t *)v89.i8);
        v92 = vmovl_s8(v73);
        v93 = vmovl_high_s16(v92);
        v94 = vmovl_s16(*(int16x4_t *)v92.i8);
        v95 = vmovl_s8(v75);
        v96 = vmovl_high_s16(v95);
        v97 = vmovl_s16(*(int16x4_t *)v95.i8);
        v98 = vmovl_s8(v77);
        v99 = vmovl_high_s16(v98);
        v100 = vmovl_s16(*(int16x4_t *)v98.i8);
        v101 = vmovl_s8(v79);
        v102 = vmovl_high_s16(v101);
        v103 = vmovl_s16(*(int16x4_t *)v101.i8);
        do
        {
          v104 = *(uint16x8_t *)&v39[v64];
          v105 = *(uint16x8_t *)&v39[v64 + 16];
          v107 = *(uint16x8_t *)&v40[v64];
          v106 = *(uint16x8_t *)&v40[v64 + 16];
          v108 = vmlaq_s32(vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v105.i8), v82), (int32x4_t)vmovl_u16(*(uint16x4_t *)v106.i8), v85);
          v109 = vmlaq_s32(vmulq_s32((int32x4_t)vmovl_high_u16(v105), v81), (int32x4_t)vmovl_high_u16(v106), v84);
          v111 = *(uint16x8_t *)&v30[v64];
          v110 = *(uint16x8_t *)&v30[v64 + 16];
          v112 = vmlaq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vmovl_high_u16(v104), v81), (int32x4_t)vmovl_high_u16(v107), v84), (int32x4_t)vmovl_high_u16(v111), v87);
          v113 = vmlaq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v104.i8), v82), (int32x4_t)vmovl_u16(*(uint16x4_t *)v107.i8), v85), (int32x4_t)vmovl_u16(*(uint16x4_t *)v111.i8), v88);
          v115 = *(uint16x8_t *)&v38[v64];
          v114 = *(uint16x8_t *)&v38[v64 + 16];
          v116 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v114.i8);
          v117 = vmlaq_s32(v108, (int32x4_t)vmovl_u16(*(uint16x4_t *)v110.i8), v88);
          v118 = vmlaq_s32(vmlaq_s32(v109, (int32x4_t)vmovl_high_u16(v110), v87), (int32x4_t)vmovl_high_u16(v114), v90);
          v120 = *(uint16x8_t *)&v31[v64];
          v119 = *(uint16x8_t *)&v31[v64 + 16];
          v121 = vmlaq_s32(vmlaq_s32(v112, (int32x4_t)vmovl_high_u16(v115), v90), (int32x4_t)vmovl_high_u16(v120), v93);
          v122 = vmlaq_s32(vmlaq_s32(v113, (int32x4_t)vmovl_u16(*(uint16x4_t *)v115.i8), v91), (int32x4_t)vmovl_u16(*(uint16x4_t *)v120.i8), v94);
          v124 = *(uint16x8_t *)&v32[v64];
          v123 = *(uint16x8_t *)&v32[v64 + 16];
          v125 = vmlaq_s32(vmlaq_s32(vmlaq_s32(v117, v116, v91), (int32x4_t)vmovl_u16(*(uint16x4_t *)v119.i8), v94), (int32x4_t)vmovl_u16(*(uint16x4_t *)v123.i8), v97);
          v126 = vmlaq_s32(vmlaq_s32(v118, (int32x4_t)vmovl_high_u16(v119), v93), (int32x4_t)vmovl_high_u16(v123), v96);
          v128 = *(uint16x8_t *)&v37[v64];
          v127 = *(uint16x8_t *)&v37[v64 + 16];
          v129 = (int32x4_t)vmovl_high_u16(v127);
          v130 = vmlaq_s32(vmlaq_s32(v121, (int32x4_t)vmovl_high_u16(v124), v96), (int32x4_t)vmovl_high_u16(v128), v99);
          v131 = vmlaq_s32(vmlaq_s32(v122, (int32x4_t)vmovl_u16(*(uint16x4_t *)v124.i8), v97), (int32x4_t)vmovl_u16(*(uint16x4_t *)v128.i8), v100);
          v132 = vmlaq_s32(v125, (int32x4_t)vmovl_u16(*(uint16x4_t *)v127.i8), v100);
          v134 = *(uint16x8_t *)&v36[v64];
          v133 = *(uint16x8_t *)&v36[v64 + 16];
          v135 = vmlaq_s32(v132, (int32x4_t)vmovl_u16(*(uint16x4_t *)v133.i8), v103);
          v136 = vmlaq_s32(vmlaq_s32(v126, v129, v99), (int32x4_t)vmovl_high_u16(v133), v102);
          v137 = vmlaq_s32(v131, (int32x4_t)vmovl_u16(*(uint16x4_t *)v134.i8), v103);
          v138 = vmlaq_s32(v130, (int32x4_t)vmovl_high_u16(v134), v102);
          v139 = (int8x16_t *)(result + v64);
          *v139 = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(vshrq_n_s32(vaddq_s32(v137, v34), 6uLL), v29), (int16x8_t)vminq_s32(vshrq_n_s32(vaddq_s32(v138, v34), 6uLL), v29)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v35, v137), (int16x8_t)vcgtq_s32(v35, v138)));
          v139[1] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(vshrq_n_s32(vaddq_s32(v135, v34), 6uLL), v29), (int16x8_t)vminq_s32(vshrq_n_s32(vaddq_s32(v136, v34), 6uLL), v29)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v35, v135), (int16x8_t)vcgtq_s32(v35, v136)));
          v64 += 32;
        }
        while (v410 != v64);
        if (v413 == v26)
          goto LABEL_9;
        v41 = v413;
        v63 = v413;
        if ((v26 & 8) == 0)
          goto LABEL_82;
      }
      else
      {
        v63 = 0;
      }
      v140 = 0;
      v141 = v22;
      v142 = vld1_dup_s8(v141++);
      v143 = vmovl_s8(v142);
      v144 = vmovl_high_s16(v143);
      v145 = vmovl_s16(*(int16x4_t *)v143.i8);
      v146 = vld1_dup_s8(v141);
      v147 = vmovl_s8(v146);
      v148 = vmovl_high_s16(v147);
      v149 = vmovl_s16(*(int16x4_t *)v147.i8);
      v150 = v22 + 2;
      v151 = vld1_dup_s8(v150);
      v152 = vmovl_s8(v151);
      v153 = vmovl_high_s16(v152);
      v154 = vmovl_s16(*(int16x4_t *)v152.i8);
      v155 = v22 + 3;
      v156 = vld1_dup_s8(v155);
      v157 = vmovl_s8(v156);
      v158 = vmovl_high_s16(v157);
      v159 = vmovl_s16(*(int16x4_t *)v157.i8);
      v160 = v22 + 4;
      v161 = vld1_dup_s8(v160);
      v162 = vmovl_s8(v161);
      v163 = vmovl_high_s16(v162);
      v164 = vmovl_s16(*(int16x4_t *)v162.i8);
      v165 = v22 + 5;
      v166 = vld1_dup_s8(v165);
      v167 = vmovl_s8(v166);
      v168 = vmovl_high_s16(v167);
      v169 = vmovl_s16(*(int16x4_t *)v167.i8);
      v170 = v22 + 6;
      v171 = vld1_dup_s8(v170);
      v172 = vmovl_s8(v171);
      v173 = vmovl_high_s16(v172);
      v174 = vmovl_s16(*(int16x4_t *)v172.i8);
      v175 = v22 + 7;
      v176 = vld1_dup_s8(v175);
      v177 = &v39[2 * v63];
      v178 = &v40[2 * v63];
      v179 = vmovl_s8(v176);
      v180 = vmovl_high_s16(v179);
      v181 = &v30[2 * v63];
      v182 = &v38[2 * v63];
      v183 = &v38[2 * v24 + 2 * v63];
      v184 = &v38[2 * v427 + 2 * v63];
      v185 = vmovl_s16(*(int16x4_t *)v179.i8);
      v186 = &v37[2 * v63];
      v187 = &v36[2 * v63];
      v188 = result + 2 * v63;
      v189 = v411 + v63;
      do
      {
        v190 = *(uint16x8_t *)&v177[v140];
        v191 = *(uint16x8_t *)&v178[v140];
        v192 = vmlaq_s32(vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v190.i8), v145), (int32x4_t)vmovl_u16(*(uint16x4_t *)v191.i8), v149);
        v193 = vmlaq_s32(vmulq_s32((int32x4_t)vmovl_high_u16(v190), v144), (int32x4_t)vmovl_high_u16(v191), v148);
        v194 = *(uint16x8_t *)&v181[v140];
        v195 = vmlaq_s32(v193, (int32x4_t)vmovl_high_u16(v194), v153);
        v196 = vmlaq_s32(v192, (int32x4_t)vmovl_u16(*(uint16x4_t *)v194.i8), v154);
        v197 = *(uint16x8_t *)&v182[v140];
        v198 = vmlaq_s32(v196, (int32x4_t)vmovl_u16(*(uint16x4_t *)v197.i8), v159);
        v199 = vmlaq_s32(v195, (int32x4_t)vmovl_high_u16(v197), v158);
        v200 = *(uint16x8_t *)&v183[v140];
        v201 = vmlaq_s32(v199, (int32x4_t)vmovl_high_u16(v200), v163);
        v202 = vmlaq_s32(v198, (int32x4_t)vmovl_u16(*(uint16x4_t *)v200.i8), v164);
        v203 = *(uint16x8_t *)&v184[v140];
        v204 = vmlaq_s32(v202, (int32x4_t)vmovl_u16(*(uint16x4_t *)v203.i8), v169);
        v205 = vmlaq_s32(v201, (int32x4_t)vmovl_high_u16(v203), v168);
        v206 = *(uint16x8_t *)&v186[v140];
        v207 = vmlaq_s32(v205, (int32x4_t)vmovl_high_u16(v206), v173);
        v208 = vmlaq_s32(v204, (int32x4_t)vmovl_u16(*(uint16x4_t *)v206.i8), v174);
        v209 = *(uint16x8_t *)&v187[v140];
        v210 = vmlaq_s32(v208, (int32x4_t)vmovl_u16(*(uint16x4_t *)v209.i8), v185);
        v211 = vmlaq_s32(v207, (int32x4_t)vmovl_high_u16(v209), v180);
        *(int8x16_t *)(v188 + v140) = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(vshrq_n_s32(vaddq_s32(v210, v34), 6uLL), v29), (int16x8_t)vminq_s32(vshrq_n_s32(vaddq_s32(v211, v34), 6uLL), v29)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v35, v210), (int16x8_t)vcgtq_s32(v35, v211)));
        v140 += 16;
        v189 += 8;
      }
      while (v189);
      v41 = v412;
      v12 = v425;
      if (v412 != v26)
        goto LABEL_82;
LABEL_9:
      result += v426;
      v38 += v28;
      ++v25;
      v39 += v28;
      v40 += v28;
      v30 += v28;
      v31 += v28;
      v32 += v28;
      v37 += v28;
      v36 += v28;
      --v15;
    }
    while (v15);
  }
  return result;
}

void *put_c(char *__dst, uint64_t a2, char *__src, uint64_t a4, int a5, int a6)
{
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;

  v9 = 2 * a5;
  v10 = 2 * a4;
  v11 = 2 * a2;
  do
  {
    result = memcpy(__dst, __src, v9);
    __src += v10;
    __dst += v11;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t put_8tap_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, unsigned int a11, signed int a12)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unsigned __int16 *v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v37;
  int v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  uint64_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int v45;
  uint64_t v46;
  char *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int8x16_t *v66;
  int v67;
  int v68;
  __int16 v69;
  unint64_t v70;
  _QWORD *v71;
  int16x8_t v72;
  int32x4_t v73;
  int16x8_t v74;
  int32x4_t v75;
  int16x8_t v76;
  int32x4_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int16x8_t v82;
  int32x4_t v83;
  int16x8_t v84;
  int32x4_t v85;
  int16x8_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  __int16 *v91;
  int v92;
  int v93;
  __int16 v94;
  unsigned int v95;
  int v96;
  int v97;
  char *v98;
  unsigned int v99;
  unsigned int v100;
  char v101;
  _QWORD v102[8322];

  result = MEMORY[0x1E0C80A78]();
  v96 = v17;
  v102[8320] = *MEMORY[0x1E0C80C00];
  v95 = __clz(a12);
  v100 = v95 - 18;
  v99 = v16;
  if (v16 >= 1)
  {
    v20 = v14 - 6 * (v15 >> 1);
    v21 = ((v19 + (v17 - 1) * a10) >> 10) + 8;
    v22 = &v101;
    do
    {
      v97 = v21;
      v23 = 0;
      v24 = 0;
      v25 = v18;
      do
      {
        if (v25 < 0x40)
        {
          v26 = *(unsigned __int16 *)(v20 + 2 * v24) << v100;
        }
        else
        {
          v27 = 8 * (v25 >> 6) - 8;
          v28 = (char *)&dav1d_mc_subpel_filters + 120 * (a11 & 1) + v27 + 360;
          v29 = (char *)&dav1d_mc_subpel_filters + 120 * (a11 & 3) + v27;
          if (v16 <= 4)
            v29 = v28;
          v30 = (unsigned __int16 *)(v20 + 2 * v24);
          v26 = (int)(((1 << (24 - v95)) >> 1)
                    + *(v30 - 3) * *v29
                    + *(v30 - 2) * v29[1]
                    + *(v30 - 1) * v29[2]
                    + *v30 * v29[3]
                    + v30[1] * v29[4]
                    + v30[2] * v29[5]
                    + v30[3] * v29[6]
                    + v30[4] * v29[7]) >> (24 - v95);
        }
        *(_WORD *)&v22[v23] = v26;
        v24 += (v25 + a9) >> 10;
        v25 = (v25 + a9) & 0x3FF;
        v23 += 2;
      }
      while (2 * v16 != v23);
      v22 += 256;
      v20 += 2 * (v15 >> 1);
      --v21;
    }
    while (v97 != 1);
  }
  v31 = v19;
  if (v96 >= 1 && v16 >= 1)
  {
    v32 = 0;
    v33 = (1 << v100) >> 1;
    v34 = v95 - 12;
    v35 = (1 << (v95 - 12)) >> 1;
    v36 = a11 >> 2;
    v37 = v102;
    v38 = v16;
    if (v96 <= 4)
      v36 = ((a11 >> 2) & 1) + 3;
    v39 = vdupq_n_s32(v35);
    v40 = vdupq_n_s32(a12);
    v41 = vdupq_n_s32(v33);
    v42 = 2 * v16;
    v98 = (char *)&dav1d_mc_subpel_filters + 120 * v36;
    v43 = vnegq_s32(vdupq_n_s32(v100));
    v44 = vnegq_s32(vdupq_n_s32(v34));
    do
    {
      if (v31 > 0x3F)
      {
        v45 = v31;
        v47 = &v98[8 * (v31 >> 6)];
        v48 = *(v47 - 8);
        v49 = *(v47 - 7);
        v50 = *(v47 - 6);
        v51 = *(v47 - 5);
        v52 = *(v47 - 4);
        v53 = *(v47 - 3);
        v54 = *(v47 - 2);
        v55 = *(v47 - 1);
        if (v99 < 8)
        {
          v56 = 0;
LABEL_36:
          v91 = (__int16 *)v37 + v56 - 384;
          do
          {
            v92 = (int)(v35
                      + *v91 * v48
                      + v91[128] * v49
                      + v91[256] * v50
                      + v91[384] * v51
                      + v91[512] * v52
                      + v91[640] * v53
                      + v91[768] * v54
                      + v91[896] * v55) >> v34;
            if (v92 >= a12)
              LOWORD(v93) = a12;
            else
              v93 = (int)(v35
                        + *v91 * v48
                        + v91[128] * v49
                        + v91[256] * v50
                        + v91[384] * v51
                        + v91[512] * v52
                        + v91[640] * v53
                        + v91[768] * v54
                        + v91[896] * v55) >> v34;
            if (v92 >= 0)
              v94 = v93;
            else
              v94 = 0;
            *(_WORD *)(result + 2 * v56++) = v94;
            ++v91;
          }
          while (v99 != v56);
          goto LABEL_16;
        }
        v70 = 0;
        v71 = v37 - 96;
        do
        {
          v72 = *(int16x8_t *)&v71[v70 / 8];
          v73 = vdupq_n_s32(v48);
          v74 = *(int16x8_t *)&v71[v70 / 8 + 32];
          v75 = vdupq_n_s32(v49);
          v76 = *(int16x8_t *)&v71[v70 / 8 + 64];
          v77 = vdupq_n_s32(v50);
          v78 = *(int16x8_t *)&v37[v70 / 8];
          v79 = vdupq_n_s32(v51);
          v80 = *(int16x8_t *)&v71[v70 / 8 + 128];
          v81 = vdupq_n_s32(v52);
          v82 = *(int16x8_t *)&v71[v70 / 8 + 160];
          v83 = vdupq_n_s32(v53);
          v84 = *(int16x8_t *)&v71[v70 / 8 + 192];
          v85 = vdupq_n_s32(v54);
          v86 = *(int16x8_t *)&v71[v70 / 8 + 224];
          v87 = vdupq_n_s32(v55);
          v88 = vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v39, v73, vmovl_high_s16(v72)), v75, vmovl_high_s16(v74)), v77, vmovl_high_s16(v76)), v79, vmovl_high_s16(v78)), v81, vmovl_high_s16(v80)), v83, vmovl_high_s16(v82)), v85, vmovl_high_s16(v84)), v87, vmovl_high_s16(v86));
          v89 = vshlq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v39, v73, vmovl_s16(*(int16x4_t *)v72.i8)), v75, vmovl_s16(*(int16x4_t *)v74.i8)), v77, vmovl_s16(*(int16x4_t *)v76.i8)), v79, vmovl_s16(*(int16x4_t *)v78.i8)), v81, vmovl_s16(*(int16x4_t *)v80.i8)), v83, vmovl_s16(*(int16x4_t *)v82.i8)), v85,
                      vmovl_s16(*(int16x4_t *)v84.i8)),
                    v87,
                    vmovl_s16(*(int16x4_t *)v86.i8)),
                  v44);
          v90 = vshlq_s32(v88, v44);
          *(int8x16_t *)(result + v70) = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v89, v40), (int16x8_t)vminq_s32(v90, v40)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v89), (int16x8_t)vcltzq_s32(v90)));
          v70 += 16;
        }
        while ((v42 & 0x1FFFFFFF0) != v70);
        v56 = v38 & 0x7FFFFFF8;
        if (v56 != v99)
          goto LABEL_36;
      }
      else
      {
        v45 = v31;
        if (v99 < 0x10)
        {
          v46 = 0;
          do
          {
LABEL_25:
            v67 = (int)(v33 + *((__int16 *)v37 + v46)) >> v100;
            if (v67 >= a12)
              LOWORD(v68) = a12;
            else
              v68 = (int)(v33 + *((__int16 *)v37 + v46)) >> v100;
            if (v67 >= 0)
              v69 = v68;
            else
              v69 = 0;
            *(_WORD *)(result + 2 * v46++) = v69;
          }
          while (v99 != v46);
          goto LABEL_16;
        }
        v57 = 0;
        do
        {
          v58 = *(int16x8_t *)&v37[v57 / 8];
          v59 = *(int16x8_t *)&v37[v57 / 8 + 2];
          v60 = vaddw_high_s16(v41, v58);
          v61 = vaddw_high_s16(v41, v59);
          v62 = vshlq_s32(vaddw_s16(v41, *(int16x4_t *)v58.i8), v43);
          v63 = vshlq_s32(v60, v43);
          v64 = vshlq_s32(vaddw_s16(v41, *(int16x4_t *)v59.i8), v43);
          v65 = vshlq_s32(v61, v43);
          v66 = (int8x16_t *)(result + v57);
          *v66 = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v62, v40), (int16x8_t)vminq_s32(v63, v40)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v62), (int16x8_t)vcltzq_s32(v63)));
          v66[1] = vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vminq_s32(v64, v40), (int16x8_t)vminq_s32(v65, v40)), (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v64), (int16x8_t)vcltzq_s32(v65)));
          v57 += 32;
        }
        while ((v42 & 0x1FFFFFFE0) != v57);
        v46 = v38 & 0xFFFFFFF0;
        if (v46 != v99)
          goto LABEL_25;
      }
LABEL_16:
      v37 = (_QWORD *)((char *)v37 + 2 * (int)(((v45 + a10) >> 3) & 0xFFFFFF80));
      v31 = (v45 + a10) & 0x3FF;
      ++v32;
      result += 2 * (v13 >> 1);
    }
    while (v32 != v96);
  }
  return result;
}

uint64_t prep_8tap_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int8x8_t v17;
  int8x16_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int8x8_t *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int16x8_t v28;
  int32x4_t v29;
  int32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int16x8_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  char *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  int v65;
  int32x4_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  int32x4_t v84;
  int16x4_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  uint16x8_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int8x16_t v103;
  uint16x8_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  _BYTE *v124;
  int32x4_t v125;
  int16x8_t v126;
  int32x4_t v127;
  uint64_t v128;
  uint64_t v129;
  int16x8_t v130;
  int32x4_t v131;
  int16x8_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int16x8_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int32x4_t v168;
  int16x8_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  BOOL v191;
  uint16x8_t v193;
  uint16x8_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  _BYTE v214[34560];
  uint64_t v215;

  result = MEMORY[0x1E0C80A78](a1, a2);
  v19 = v13;
  v20 = v12;
  v21 = v11;
  v210 = v10;
  v215 = *MEMORY[0x1E0C80C00];
  v22 = __clz(a9);
  v209 = result;
  if (!v14)
  {
    if (!v15)
      return prep_c(result, v10, v11 >> 1, v12, v13, a9);
    v24 = 0;
    goto LABEL_24;
  }
  v23 = v16 & 3;
  if (v12 <= 4)
    v23 = (v16 & 1) + 3;
  v24 = (int8x8_t *)((char *)&dav1d_mc_subpel_filters + 120 * v23 + 8 * v14 - 8);
  if (v15)
  {
LABEL_24:
    v58 = v16 >> 2;
    if (v13 <= 4)
      v58 = ((v16 >> 2) & 1) + 3;
    v59 = (char *)&dav1d_mc_subpel_filters + 120 * v58 + 8 * v15 - 8;
    v60 = v11 >> 1;
    if (v24)
    {
      if (v12 < 1)
        return result;
      v61 = 24 - v22;
      v62 = (1 << v61) >> 1;
      v63 = v10 - 6 * v60;
      v64 = v13 + 7;
      v65 = v12;
      v17.i32[0] = v24->i32[0];
      v66 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v17));
      v67 = v24->i8[4];
      v68 = v24->i8[5];
      v69 = v24->i8[6];
      v70 = v24->i8[7];
      v71 = v12 & 0xFFFFFFF8;
      v72 = vdupq_lane_s32(*(int32x2_t *)v66.i8, 0);
      v73 = vdupq_lane_s32(*(int32x2_t *)v66.i8, 1);
      v74 = vdupq_laneq_s32(v66, 2);
      v75 = vdupq_laneq_s32(v66, 3);
      v76 = vdupq_n_s32(v67);
      v77 = vdupq_n_s32(v68);
      v78 = vdupq_n_s32(v69);
      v79 = vdupq_n_s32(v70);
      v80 = vdupq_n_s32(v62);
      v81 = 2 * v60;
      v82 = (2 * v12) & 0x1FFFFFFF0;
      v83 = v214;
      v84 = vnegq_s32(vdupq_n_s32(v61));
      while (1)
      {
        v85 = *(int16x4_t *)(v63 - 6);
        v86 = *(unsigned __int16 *)(v63 + 4);
        v87 = *(unsigned __int16 *)(v63 + 6);
        if (v20 >= 8)
        {
          v89 = 0;
          v90 = (int8x16_t)vdupq_n_s16(v87);
          v91 = (int8x16_t)vdupq_n_s16(v86);
          v18.i64[1] = *(_QWORD *)(v63 - 6);
          v92 = (int8x16_t)vdupq_lane_s16(v85, 2);
          v93 = (int8x16_t)vdupq_lane_s16(v85, 1);
          v94 = (int8x16_t)vdupq_lane_s16(v85, 0);
          do
          {
            v95 = v18;
            v96 = v90;
            v18 = *(int8x16_t *)(v63 + v89 + 2);
            v97 = vextq_s8(v95, v18, 0xEuLL);
            v98 = vextq_s8(v92, v97, 0xEuLL);
            v99 = vextq_s8(v93, v98, 0xEuLL);
            v100 = (uint16x8_t)vextq_s8(v94, v99, 0xEuLL);
            v101 = vmlaq_s32(v80, v72, (int32x4_t)vmovl_high_u16(v100));
            v102 = vmlaq_s32(vmlaq_s32(vmlaq_s32(v80, v72, (int32x4_t)vmovl_u16(*(uint16x4_t *)v100.i8)), v73, (int32x4_t)vmovl_u16(*(uint16x4_t *)v99.i8)), v74, (int32x4_t)vmovl_u16(*(uint16x4_t *)v98.i8));
            v90 = *(int8x16_t *)(v63 + v89 + 8);
            v103 = vextq_s8(v96, v90, 0xEuLL);
            v104 = (uint16x8_t)vextq_s8(v91, v103, 0xEuLL);
            *(int16x8_t *)&v83[v89] = vuzp1q_s16((int16x8_t)vshlq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v102, v75, (int32x4_t)vmovl_u16(*(uint16x4_t *)v97.i8)), v76, (int32x4_t)vmovl_u16(*(uint16x4_t *)v18.i8)), v77, (int32x4_t)vmovl_u16(*(uint16x4_t *)v104.i8)), v78, (int32x4_t)vmovl_u16(*(uint16x4_t *)v103.i8)), v79, (int32x4_t)vmovl_u16(*(uint16x4_t *)v90.i8)), v84), (int16x8_t)vshlq_s32(
                                                     vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v101, v73, (int32x4_t)vmovl_high_u16((uint16x8_t)v99)), v74, (int32x4_t)vmovl_high_u16((uint16x8_t)v98)), v75, (int32x4_t)vmovl_high_u16((uint16x8_t)v97)), v76, (int32x4_t)vmovl_high_u16((uint16x8_t)v18)), v77, (int32x4_t)vmovl_high_u16(v104)), v78, (int32x4_t)vmovl_high_u16((uint16x8_t)v103)),
                                                       v79,
                                                       (int32x4_t)vmovl_high_u16((uint16x8_t)v90)),
                                                     v84));
            v89 += 16;
            v91 = v103;
            v92 = v97;
            v93 = v98;
            v94 = v99;
          }
          while (v82 != v89);
          if (v71 == v20)
            goto LABEL_29;
          LOWORD(v87) = v90.i16[7];
          LOWORD(v86) = v90.i16[6];
          v85 = (int16x4_t)vextq_s8(v18, v18, 8uLL).u64[0];
          v88 = v20 & 0xFFFFFFF8;
        }
        else
        {
          v88 = 0;
        }
        v105 = 2 * v88;
        v106 = v20 - v88;
        do
        {
          v107 = (unsigned __int16)v86;
          LOWORD(v86) = v87;
          v18 = (int8x16_t)vmulq_s32(v66, (int32x4_t)vmovl_u16((uint16x4_t)v85));
          v108 = *(unsigned __int16 *)(v63 + v105 + 2);
          v109 = v69 * (unsigned __int16)v87;
          v87 = *(unsigned __int16 *)(v63 + v105 + 8);
          v18.i32[0] = vaddvq_s32((int32x4_t)v18);
          *(_WORD *)&v83[v105] = (int)(v18.i32[0] + v108 * v67 + v109 + v68 * v107 + v62 + v87 * v70) >> v61;
          v85 = (int16x4_t)vext_s8((int8x8_t)v85, *(int8x8_t *)v66.i8, 2uLL);
          v85.i16[3] = v108;
          v105 += 2;
          --v106;
        }
        while (v106);
LABEL_29:
        v83 += 256;
        v63 += v81;
        if (!--v64)
        {
          v110 = *v59;
          v111 = v59[1];
          v112 = v59[2];
          v113 = v59[3];
          v114 = v59[4];
          v115 = v59[5];
          v116 = v59[6];
          v117 = v59[7];
          v118 = vdupq_n_s32(v110);
          v119 = vdupq_n_s32(v111);
          v120 = vdupq_n_s32(v112);
          v121 = vdupq_n_s32(v113);
          v122 = vdupq_n_s32(v114);
          v123 = vdupq_n_s32(v115);
          v124 = v214;
          v125 = vdupq_n_s32(v116);
          v126.i64[0] = 0xE000E000E000E000;
          v126.i64[1] = 0xE000E000E000E000;
          v127 = vdupq_n_s32(v117);
          while (1)
          {
            if (v20 >= 8)
            {
              v129 = 0;
              do
              {
                v130 = *(int16x8_t *)&v124[v129];
                v131 = vmovl_high_s16(v130);
                v132 = *(int16x8_t *)&v124[v129 + 256];
                v133 = vmovl_high_s16(v132);
                v134 = vmlaq_s32(vmulq_s32(v118, vmovl_s16(*(int16x4_t *)v130.i8)), v119, vmovl_s16(*(int16x4_t *)v132.i8));
                v135 = *(int16x8_t *)&v124[v129 + 512];
                *(int16x8_t *)(result + v129) = vaddq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v134, v120, vmovl_s16(*(int16x4_t *)v135.i8)), v121, vmovl_s16(*(int16x4_t *)&v124[v129 + 768])), v122, vmovl_s16(*(int16x4_t *)&v124[v129 + 1024])), v123, vmovl_s16(*(int16x4_t *)&v124[v129 + 1280])), v125, vmovl_s16(*(int16x4_t *)&v124[v129 + 1536])), v127, vmovl_s16(*(int16x4_t *)&v124[v129 + 1792])), 6uLL),
                                                    vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v118, v131), v119, v133), v120, vmovl_high_s16(v135)), v121, vmovl_high_s16(*(int16x8_t *)&v124[v129 + 768])), v122, vmovl_high_s16(*(int16x8_t *)&v124[v129 + 1024])), v123, vmovl_high_s16(*(int16x8_t *)&v124[v129 + 1280])), v125, vmovl_high_s16(*(int16x8_t *)&v124[v129 + 1536])), v127, vmovl_high_s16(*(int16x8_t *)&v124[v129 + 1792])), 6uLL),
                                                  v126);
                v129 += 16;
              }
              while (((2 * v20) & 0x1FFFFFFF0) != v129);
              v128 = v65 & 0xFFFFFFF8;
              if ((v20 & 0xFFFFFFF8) == (unint64_t)v20)
                goto LABEL_40;
            }
            else
            {
              v128 = 0;
            }
            v136 = v20 - v128;
            v137 = 2 * v128;
            do
            {
              *(_WORD *)(result + v137) = ((*(__int16 *)&v124[v137] * v110
                                          + *(__int16 *)&v124[v137 + 256] * v111
                                          + *(__int16 *)&v124[v137 + 512] * v112
                                          + *(__int16 *)&v124[v137 + 768] * v113
                                          + *(__int16 *)&v124[v137 + 1024] * v114
                                          + *(__int16 *)&v124[v137 + 1280] * v115
                                          + *(__int16 *)&v124[v137 + 1536] * v116
                                          + *(__int16 *)&v124[v137 + 1792] * v117
                                          + 32) >> 6)
                                        - 0x2000;
              v137 += 2;
              --v136;
            }
            while (v136);
LABEL_40:
            v124 += 256;
            result += 2 * v20;
            if (!--v19)
              return result;
          }
        }
      }
    }
    if (v12 < 1)
      return result;
    v138 = 0;
    v208 = v21;
    v139 = 2 * v21;
    v140 = 24 - v22;
    v141 = (1 << v140) >> 1;
    v142 = *v59;
    v143 = v59[1];
    v144 = v59[2];
    v145 = v59[3];
    v146 = v59[4];
    v147 = v59[5];
    v148 = v59[6];
    v149 = v59[7];
    v211 = 2 * v12;
    v150 = 6 * v60 + v10;
    v151 = v12;
    v152 = v139 + v10;
    v201 = v10 + v208;
    v200 = v10 - v208;
    v199 = v10 - v139;
    v153 = v208;
    v198 = v10 - 6 * v60;
    v154 = v10 + 4 * v208;
    v155 = vdupq_n_s32(v142);
    v156 = vdupq_n_s32(v143);
    v157 = vdupq_n_s32(v144);
    v158 = vdupq_n_s32(v145);
    v159 = vdupq_n_s32(v146);
    v160 = vdupq_n_s32(v147);
    v161 = vdupq_n_s32(v148);
    v162 = vdupq_n_s32(v149);
    v163 = vdupq_n_s32(v141);
    v164 = v198;
    v165 = v10 - 2 * v208;
    v166 = v10 - 2 * v60;
    v206 = 2 * v60;
    v207 = v20;
    v167 = v10 + 2 * v60;
    v195 = (2 * v20) & 0x1FFFFFFF0;
    v196 = v20 & 0xFFFFFFF8;
    v168 = vnegq_s32(vdupq_n_s32(v140));
    v169.i64[0] = 0xE000E000E000E000;
    v169.i64[1] = 0xE000E000E000E000;
    v197 = v154;
    v202 = v139 + v10;
    v203 = v150;
    while (1)
    {
      v213 = v19;
      v212 = v138;
      if (v20 >= 8)
      {
        v171 = v138 * v153;
        v172 = v198 + v138 * v153;
        v205 = v199 + v138 * v153;
        v204 = v200 + v138 * v153;
        v173 = v138 * v153 + v210;
        v174 = v201 + v171;
        v175 = v202 + v171;
        v176 = v203 + v171;
        v177 = v209 + v211 * v138;
        v178 = v177 - (v197 + v171);
        v179 = v177 - v176;
        v180 = v177 - v175;
        v181 = v177 - v174;
        v182 = v177 - v173;
        v183 = v177 - v204;
        v184 = v177 - v205;
        v185 = v177 - v172;
        v191 = v178 >= 0x10
            && v179 >= 0x10
            && v180 >= 0x10
            && v181 >= 0x10
            && v182 >= 0x10
            && v183 >= 0x10
            && v184 >= 0x10;
        v170 = 0;
        if (v191 && v185 >= 0x10)
        {
          do
          {
            v193 = *(uint16x8_t *)(v164 + v170);
            v194 = *(uint16x8_t *)(v165 + v170);
            *(int16x8_t *)(result + v170) = vaddq_s16(vuzp1q_s16((int16x8_t)vshlq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v163, v155, (int32x4_t)vmovl_u16(*(uint16x4_t *)v193.i8)), v156, (int32x4_t)vmovl_u16(*(uint16x4_t *)v194.i8)), v157, (int32x4_t)vmovl_u16(*(uint16x4_t *)(v166 + v170))), v158, (int32x4_t)vmovl_u16(*(uint16x4_t *)(v10 + v170))),
                                                                     v159,
                                                                     (int32x4_t)vmovl_u16(*(uint16x4_t *)(v167 + v170))),
                                                                   v160,
                                                                   (int32x4_t)vmovl_u16(*(uint16x4_t *)(v152 + v170))),
                                                                 v161,
                                                                 (int32x4_t)vmovl_u16(*(uint16x4_t *)(v150 + v170))),
                                                               v162,
                                                               (int32x4_t)vmovl_u16(*(uint16x4_t *)(v154 + v170))),
                                                             v168),
                                                (int16x8_t)vshlq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v163, v155, (int32x4_t)vmovl_high_u16(v193)), v156, (int32x4_t)vmovl_high_u16(v194)), v157, (int32x4_t)vmovl_high_u16(*(uint16x8_t *)(v166 + v170))), v158, (int32x4_t)vmovl_high_u16(*(uint16x8_t *)(v10 + v170))), v159, (int32x4_t)vmovl_high_u16(*(uint16x8_t *)(v167 + v170))),
                                                                   v160,
                                                                   (int32x4_t)vmovl_high_u16(*(uint16x8_t *)(v152 + v170))),
                                                                 v161,
                                                                 (int32x4_t)vmovl_high_u16(*(uint16x8_t *)(v150 + v170))),
                                                               v162,
                                                               (int32x4_t)vmovl_high_u16(*(uint16x8_t *)(v154 + v170))),
                                                             v168)),
                                              v169);
            v170 += 16;
          }
          while (v195 != v170);
          v170 = v196;
          if (v196 == v151)
            goto LABEL_51;
        }
      }
      else
      {
        v170 = 0;
      }
      do
      {
        *(_WORD *)(result + 2 * v170) = ((int)(v141
                                             + *(unsigned __int16 *)(v164 + 2 * v170) * v142
                                             + *(unsigned __int16 *)(v165 + 2 * v170) * v143
                                             + *(unsigned __int16 *)(v166 + 2 * v170) * v144
                                             + *(unsigned __int16 *)(v10 + 2 * v170) * v145
                                             + *(unsigned __int16 *)(v167 + 2 * v170) * v146
                                             + *(unsigned __int16 *)(v152 + 2 * v170) * v147
                                             + *(unsigned __int16 *)(v150 + 2 * v170) * v148
                                             + *(unsigned __int16 *)(v154 + 2 * v170) * v149) >> v140)
                                      - 0x2000;
        ++v170;
      }
      while (v151 != v170);
LABEL_51:
      v138 = v212 + 1;
      v20 = v207;
      v164 += v206;
      v165 += v206;
      v166 += v206;
      v10 += v206;
      v167 += v206;
      v152 += v206;
      v150 += v206;
      v154 += v206;
      result += v211;
      v19 = v213 - 1;
      v153 = v208;
      if (v213 == 1)
        return result;
    }
  }
  if (v12 >= 1)
  {
    v25 = 0;
    v26 = 24 - v22;
    v27 = (1 << (24 - v22)) >> 1;
    v28 = vmovl_s8(*v24);
    v29 = vmovl_high_s16(v28);
    v30 = vmovl_s16(*(int16x4_t *)v28.i8);
    v31 = 2 * v12;
    v32 = 2 * v12;
    v33 = v12 & 0xFFFFFFF8;
    v34 = vdupq_lane_s32(*(int32x2_t *)v30.i8, 0);
    v35 = vdupq_lane_s32(*(int32x2_t *)v30.i8, 1);
    v36 = vdupq_laneq_s32(v30, 2);
    v37 = vdupq_laneq_s32(v30, 3);
    v38 = vdupq_lane_s32(*(int32x2_t *)v29.i8, 0);
    v39 = vdupq_lane_s32(*(int32x2_t *)v29.i8, 1);
    v40 = vdupq_laneq_s32(v29, 2);
    v41 = vdupq_laneq_s32(v29, 3);
    v42 = vdupq_n_s32(v27);
    v43 = vnegq_s32(vdupq_n_s32(v26));
    v44.i64[0] = 0xE000E000E000E000;
    v44.i64[1] = 0xE000E000E000E000;
    v45 = result;
    result = v210;
    do
    {
      if (v20 >= 8
        && ((v46 = v210 + v25 * v21, v47 = v46 + v31 + 8, v48 = v46 - 6, v45 < v47)
          ? (v49 = v48 >= v209 + v31 + v32 * v25)
          : (v49 = 1),
            v49))
      {
        v50 = 0;
        do
        {
          v51 = *(uint16x8_t *)(result + v50 - 6);
          v52 = *(uint16x8_t *)(result + v50 - 4);
          v53 = *(uint16x8_t *)(result + v50 - 2);
          v54 = *(uint16x8_t *)(result + v50 + 2);
          *(int16x8_t *)(v45 + v50) = vaddq_s16(vuzp1q_s16((int16x8_t)vshlq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v42, v34, (int32x4_t)vmovl_u16(*(uint16x4_t *)v51.i8)), v35, (int32x4_t)vmovl_u16(*(uint16x4_t *)v52.i8)), v36, (int32x4_t)vmovl_u16(*(uint16x4_t *)v53.i8)), v37, (int32x4_t)vmovl_u16(*(uint16x4_t *)(result + v50))),
                                                               v38,
                                                               (int32x4_t)vmovl_u16(*(uint16x4_t *)v54.i8)),
                                                             v39,
                                                             (int32x4_t)vmovl_u16(*(uint16x4_t *)(result + v50 + 4))),
                                                           v40,
                                                           (int32x4_t)vmovl_u16(*(uint16x4_t *)(result + v50 + 6))),
                                                         v41,
                                                         (int32x4_t)vmovl_u16(*(uint16x4_t *)(result + v50 + 8))),
                                                       v43),
                                          (int16x8_t)vshlq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v42, v34, (int32x4_t)vmovl_high_u16(v51)), v35, (int32x4_t)vmovl_high_u16(v52)), v36, (int32x4_t)vmovl_high_u16(v53)), v37, (int32x4_t)vmovl_high_u16(*(uint16x8_t *)(result + v50))), v38, (int32x4_t)vmovl_high_u16(v54)), v39, (int32x4_t)vmovl_high_u16(*(uint16x8_t *)(result + v50 + 4))), v40,
                                                           (int32x4_t)vmovl_high_u16(*(uint16x8_t *)(result + v50 + 6))),
                                                         v41,
                                                         (int32x4_t)vmovl_high_u16(*(uint16x8_t *)(result + v50 + 8))),
                                                       v43)),
                                        v44);
          v50 += 16;
        }
        while ((v31 & 0x1FFFFFFF0) != v50);
        v55 = v20 & 0xFFFFFFF8;
        if (v33 == v20)
          goto LABEL_7;
      }
      else
      {
        v55 = 0;
      }
      v56 = 2 * v55;
      v57 = v20 - v55;
      do
      {
        *(_WORD *)(v45 + v56) = ((int)(vaddvq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vmovl_high_u16(*(uint16x8_t *)(result + v56 - 6)), v29), (int32x4_t)vmovl_u16(*(uint16x4_t *)(result + v56 - 6)), v30))+ v27) >> v26)- 0x2000;
        v56 += 2;
        --v57;
      }
      while (v57);
LABEL_7:
      v45 += v32;
      ++v25;
      result += 2 * (v21 >> 1);
      --v19;
    }
    while (v19);
  }
  return result;
}

uint64_t prep_c(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint32x4_t v10;
  int16x8_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int16x8_t v16;
  int16x8_t *v17;

  if (a4 >= 1)
  {
    v6 = 0;
    v7 = __clz(a6) - 18;
    v8 = 2 * a4;
    v9 = 2 * a3;
    v10 = (uint32x4_t)vdupq_n_s32(v7);
    v11.i64[0] = 0xE000E000E000E000;
    v11.i64[1] = 0xE000E000E000E000;
    v12 = result;
    v13 = a2;
    do
    {
      if (a4 >= 0x10)
      {
        if ((unint64_t)(result + v8 * v6 - (a2 + v9 * v6)) >= 0x20)
        {
          v15 = 0;
          do
          {
            v16 = vaddq_s16(vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)(v13 + v15 + 16)), v10), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)(v13 + v15 + 16)), v10)), v11);
            v17 = (int16x8_t *)(v12 + v15);
            *v17 = vaddq_s16(vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)(v13 + v15)), v10), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)(v13 + v15)), v10)), v11);
            v17[1] = v16;
            v15 += 32;
          }
          while (((2 * a4) & 0x1FFFFFFE0) != v15);
          v14 = a4 & 0xFFFFFFF0;
          if (v14 == a4)
            goto LABEL_3;
        }
        else
        {
          v14 = 0;
        }
      }
      else
      {
        v14 = 0;
      }
      do
      {
        *(_WORD *)(v12 + 2 * v14) = (*(_WORD *)(v13 + 2 * v14) << v7) - 0x2000;
        ++v14;
      }
      while (a4 != v14);
LABEL_3:
      ++v6;
      v13 += v9;
      v12 += v8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t prep_8tap_scaled_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, unsigned int a11)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  uint64_t v20;
  int v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unsigned __int16 *v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  _QWORD *v35;
  char *v36;
  int16x8_t v37;
  int v38;
  uint64_t v39;
  char *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  int16x8_t v51;
  int16x8_t *v52;
  unint64_t v53;
  _QWORD *v54;
  int16x8_t v55;
  int32x4_t v56;
  int16x8_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  __int16 *v69;
  uint64_t v70;
  int v71;
  char v72;
  _QWORD v73[8322];

  result = MEMORY[0x1E0C80A78]();
  v73[8320] = *MEMORY[0x1E0C80C00];
  if ((int)v14 >= 1)
  {
    v19 = __clz(a11);
    v70 = v13 >> 1;
    v20 = v12 - 6 * (v13 >> 1);
    v21 = ((v17 + (v15 - 1) * a9) >> 10) + 8;
    v22 = &v72;
    do
    {
      v71 = v21;
      v23 = 0;
      v24 = 0;
      v25 = v16;
      do
      {
        if (v25 < 0x40)
        {
          v26 = *(unsigned __int16 *)(v20 + 2 * v24) << (v19 - 18);
        }
        else
        {
          v27 = 8 * (v25 >> 6) - 8;
          v28 = (char *)&dav1d_mc_subpel_filters + 120 * (a10 & 1) + v27 + 360;
          v29 = (char *)&dav1d_mc_subpel_filters + 120 * (a10 & 3) + v27;
          if ((int)v14 <= 4)
            v29 = v28;
          v30 = (unsigned __int16 *)(v20 + 2 * v24);
          v26 = (int)(((1 << (24 - v19)) >> 1)
                    + *(v30 - 3) * *v29
                    + *(v30 - 2) * v29[1]
                    + *(v30 - 1) * v29[2]
                    + *v30 * v29[3]
                    + v30[1] * v29[4]
                    + v30[2] * v29[5]
                    + v30[3] * v29[6]
                    + v30[4] * v29[7]) >> (24 - v19);
        }
        *(_WORD *)&v22[v23] = v26;
        v24 += (v25 + v18) >> 10;
        v25 = (v25 + v18) & 0x3FF;
        v23 += 2;
      }
      while (2 * v14 != v23);
      v22 += 256;
      v20 += 2 * v70;
      --v21;
    }
    while (v71 != 1);
    v31 = v17;
    v32 = v14;
    if (v15 >= 1)
    {
      v33 = 0;
      v34 = a10 >> 2;
      v35 = v73;
      if (v15 <= 4)
        v34 = ((a10 >> 2) & 1) + 3;
      v36 = (char *)&dav1d_mc_subpel_filters + 120 * v34;
      v37.i64[0] = 0xE000E000E000E000;
      v37.i64[1] = 0xE000E000E000E000;
      do
      {
        if (v31 > 0x3F)
        {
          v38 = v31;
          v40 = &v36[8 * (v31 >> 6)];
          v41 = *(v40 - 8);
          v42 = *(v40 - 7);
          v43 = *(v40 - 6);
          v44 = *(v40 - 5);
          v45 = *(v40 - 4);
          v46 = *(v40 - 3);
          v47 = *(v40 - 2);
          v48 = *(v40 - 1);
          if (v14 >= 8)
          {
            v53 = 0;
            v54 = v35 - 96;
            do
            {
              v55 = *(int16x8_t *)&v54[v53 / 8];
              v56 = vdupq_n_s32(v41);
              v57 = *(int16x8_t *)&v54[v53 / 8 + 32];
              v58 = vmovl_high_s16(v57);
              v59 = vdupq_n_s32(v42);
              v60 = vmulq_s32(v59, vmovl_s16(*(int16x4_t *)v57.i8));
              v61 = vmulq_s32(v59, v58);
              v62 = *(int16x8_t *)&v54[v53 / 8 + 64];
              v63 = vdupq_n_s32(v43);
              v64 = vdupq_n_s32(v44);
              v65 = vdupq_n_s32(v45);
              v66 = vdupq_n_s32(v46);
              v67 = vdupq_n_s32(v47);
              v68 = vdupq_n_s32(v48);
              *(int16x8_t *)(result + v53) = vaddq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v60, v56, vmovl_s16(*(int16x4_t *)v55.i8)), v63, vmovl_s16(*(int16x4_t *)v62.i8)), v64, vmovl_s16((int16x4_t)v35[v53 / 8])), v65, vmovl_s16((int16x4_t)v54[v53 / 8 + 128])), v66, vmovl_s16((int16x4_t)v54[v53 / 8 + 160])), v67, vmovl_s16((int16x4_t)v54[v53 / 8 + 192])),
                                                     v68,
                                                     vmovl_s16((int16x4_t)v54[v53 / 8 + 224])),
                                                   6uLL),
                                                 vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v61, v56, vmovl_high_s16(v55)), v63, vmovl_high_s16(v62)), v64, vmovl_high_s16(*(int16x8_t *)&v35[v53 / 8])), v65, vmovl_high_s16(*(int16x8_t *)&v54[v53 / 8 + 128])), v66, vmovl_high_s16(*(int16x8_t *)&v54[v53 / 8 + 160])), v67, vmovl_high_s16(*(int16x8_t *)&v54[v53 / 8 + 192])), v68, vmovl_high_s16(*(int16x8_t *)&v54[v53 / 8 + 224])), 6uLL),
                                               v37);
              v53 += 16;
            }
            while (((2 * v14) & 0x1FFFFFFF0) != v53);
            v49 = v14 & 0xFFFFFFF8;
            v32 = v14;
            if (v49 == v14)
              goto LABEL_15;
          }
          else
          {
            v49 = 0;
            v32 = v14;
          }
          v69 = (__int16 *)v35 + v49 - 384;
          do
          {
            *(_WORD *)(result + 2 * v49++) = ((v69[128] * v42
                                             + *v69 * v41
                                             + v69[256] * v43
                                             + v69[384] * v44
                                             + v69[512] * v45
                                             + v69[640] * v46
                                             + v69[768] * v47
                                             + v69[896] * v48
                                             + 32) >> 6)
                                           - 0x2000;
            ++v69;
          }
          while (v32 != v49);
        }
        else
        {
          v38 = v31;
          if (v14 >= 0x10)
          {
            v50 = 0;
            do
            {
              v51 = vaddq_s16(*(int16x8_t *)&v35[v50 / 8 + 2], v37);
              v52 = (int16x8_t *)(result + v50);
              *v52 = vaddq_s16(*(int16x8_t *)&v35[v50 / 8], v37);
              v52[1] = v51;
              v50 += 32;
            }
            while (((2 * v14) & 0x1FFFFFFE0) != v50);
            v39 = v14 & 0xFFFFFFF0;
            if (v39 == v32)
              goto LABEL_15;
          }
          else
          {
            v39 = 0;
          }
          do
          {
            *(_WORD *)(result + 2 * v39) = *((_WORD *)v35 + v39) - 0x2000;
            ++v39;
          }
          while (v32 != v39);
        }
LABEL_15:
        v35 = (_QWORD *)((char *)v35 + 2 * (int)(((v38 + a9) >> 3) & 0xFFFFFF80));
        v31 = (v38 + a9) & 0x3FF;
        ++v33;
        result += 2 * v14;
      }
      while (v33 != v15);
    }
  }
  return result;
}

uint64_t dav1d_read_coef_blocks_16bpc(uint64_t result, unsigned int a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  signed int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  int v50;
  signed int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  signed int v75;
  int v76;
  signed int v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  BOOL v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  unsigned int v107;
  signed int v108;
  int v109;
  char v110;
  int v111;
  int v112;
  unint64_t v113;
  unsigned int v114;
  signed int v115;
  unint64_t v116;
  unsigned int v117;
  unsigned __int8 *v118;
  signed int v119;
  unsigned __int8 *v120;
  _QWORD *v121;
  BOOL v122;
  int v123;
  unsigned __int8 *v124;
  unint64_t v125;
  unsigned __int8 *v126;
  unsigned int v127;
  int v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v137;
  uint64_t v138;
  unsigned int v139;
  unsigned __int8 v140;
  unsigned int v141;
  unsigned __int8 v142;
  _WORD v143[6];

  v3 = (_BYTE *)a3;
  v4 = result;
  v138 = *(_QWORD *)(result + 8);
  v5 = *(_DWORD *)(v138 + 2056);
  v6 = v5 != 3;
  v7 = &dav1d_block_dimensions[4 * a2];
  v8 = *v7;
  if (v5 == 3)
    v9 = *v7;
  else
    v9 = v8 + 1;
  v10 = v5 == 1;
  v11 = *(_DWORD *)(result + 24);
  v12 = *(_DWORD *)(result + 28);
  v13 = v11 & 0x1F;
  v125 = v13 >> v6;
  v116 = v12 & 0x1F;
  v113 = v116 >> v10;
  v14 = v7[1];
  if (v5 == 1)
    v15 = v14 + 1;
  else
    v15 = v7[1];
  if (!v5 || (v8 <= v6 ? (v16 = (*(_DWORD *)(result + 24) & 1) == 0) : (v16 = 0), v16))
  {
    v105 = 0;
    if (!*(_BYTE *)(a3 + 6))
      goto LABEL_16;
LABEL_115:
    switch(v14)
    {
      case 1:
        *(_BYTE *)(result + v116 + 64) = 64;
        break;
      case 2:
        *(_WORD *)(result + v116 + 64) = 16448;
        break;
      case 4:
        *(_DWORD *)(result + v116 + 64) = 1077952576;
        break;
      case 8:
        *(_QWORD *)(result + v116 + 64) = 0x4040404040404040;
        break;
      case 16:
        *(_QWORD *)&v79 = 0x4040404040404040;
        *((_QWORD *)&v79 + 1) = 0x4040404040404040;
        *(_OWORD *)(result + v116 + 64) = v79;
        break;
      case 32:
        *(_QWORD *)&v78 = 0x4040404040404040;
        *((_QWORD *)&v78 + 1) = 0x4040404040404040;
        *(_OWORD *)(result + 64 + v116) = v78;
        *(_OWORD *)(result + 64 + (v116 + 16)) = v78;
        break;
      default:
        break;
    }
    switch(v8)
    {
      case 1:
        *(_BYTE *)(*(_QWORD *)(result + 656) + v13 + 32) = 64;
        break;
      case 2:
        *(_WORD *)(*(_QWORD *)(result + 656) + v13 + 32) = 16448;
        break;
      case 4:
        *(_DWORD *)(*(_QWORD *)(result + 656) + v13 + 32) = 1077952576;
        break;
      case 8:
        v80 = *(_QWORD *)(result + 656) + v13;
        goto LABEL_130;
      case 16:
        *(_QWORD *)(*(_QWORD *)(result + 656) + v13 + 32) = 0x4040404040404040;
        v81 = *(_QWORD *)(result + 656);
        v82 = (v13 + 8);
        goto LABEL_129;
      case 32:
        *(_QWORD *)(*(_QWORD *)(result + 656) + v13 + 32) = 0x4040404040404040;
        *(_QWORD *)(*(_QWORD *)(result + 656) + (v13 + 8) + 32) = 0x4040404040404040;
        *(_QWORD *)(*(_QWORD *)(result + 656) + (v13 + 16) + 32) = 0x4040404040404040;
        v81 = *(_QWORD *)(result + 656);
        v82 = (v13 + 24);
LABEL_129:
        v80 = v81 + v82;
LABEL_130:
        *(_QWORD *)(v80 + 32) = 0x4040404040404040;
        break;
      default:
        break;
    }
    if (v105)
    {
      v83 = v9 >> v6;
      switch(v15 >> v10)
      {
        case 1u:
          v84 = result + v113;
          *(_BYTE *)(v84 + 96) = 64;
          *(_BYTE *)(v84 + 128) = 64;
          break;
        case 2u:
          v85 = result + v113;
          *(_WORD *)(v85 + 96) = 16448;
          *(_WORD *)(v85 + 128) = 16448;
          break;
        case 4u:
          v86 = result + v113;
          *(_DWORD *)(v86 + 96) = 1077952576;
          *(_DWORD *)(v86 + 128) = 1077952576;
          break;
        case 8u:
          v87 = result + v113;
          *(_QWORD *)(v87 + 96) = 0x4040404040404040;
          *(_QWORD *)(v87 + 128) = 0x4040404040404040;
          break;
        case 0x10u:
          v88 = result + v113;
          *(_QWORD *)&v89 = 0x4040404040404040;
          *((_QWORD *)&v89 + 1) = 0x4040404040404040;
          *(_OWORD *)(v88 + 96) = v89;
          *(_OWORD *)(v88 + 128) = v89;
          break;
        case 0x20u:
          v90 = result + 96;
          *(_QWORD *)&v91 = 0x4040404040404040;
          *((_QWORD *)&v91 + 1) = 0x4040404040404040;
          *(_OWORD *)(v90 + v113) = v91;
          v92 = v113 + 16;
          *(_OWORD *)(v90 + v92) = v91;
          v93 = result + 128;
          *(_OWORD *)(v93 + v113) = v91;
          *(_OWORD *)(v93 + v92) = v91;
          break;
        default:
          break;
      }
      switch(v83)
      {
        case 1u:
          *(_BYTE *)(*(_QWORD *)(result + 656) + v125 + 64) = 64;
          *(_BYTE *)(*(_QWORD *)(result + 656) + v125 + 96) = 64;
          return result;
        case 2u:
          *(_WORD *)(*(_QWORD *)(result + 656) + v125 + 64) = 16448;
          *(_WORD *)(*(_QWORD *)(result + 656) + v125 + 96) = 16448;
          return result;
        case 4u:
          *(_DWORD *)(*(_QWORD *)(result + 656) + v125 + 64) = 1077952576;
          *(_DWORD *)(*(_QWORD *)(result + 656) + v125 + 96) = 1077952576;
          return result;
        case 8u:
          v94 = v13 >> v6;
          *(_QWORD *)(*(_QWORD *)(result + 656) + v125 + 64) = 0x4040404040404040;
          goto LABEL_147;
        case 0x10u:
          *(_QWORD *)(*(_QWORD *)(result + 656) + v125 + 64) = 0x4040404040404040;
          v94 = v125 + 8;
          *(_QWORD *)(*(_QWORD *)(result + 656) + v94 + 64) = 0x4040404040404040;
          v95 = *(_QWORD *)(result + 656) + v125;
          goto LABEL_146;
        case 0x20u:
          *(_QWORD *)(*(_QWORD *)(result + 656) + v125 + 64) = 0x4040404040404040;
          v96 = v125 + 8;
          *(_QWORD *)(*(_QWORD *)(result + 656) + v96 + 64) = 0x4040404040404040;
          v97 = v125 + 16;
          *(_QWORD *)(*(_QWORD *)(result + 656) + v97 + 64) = 0x4040404040404040;
          v94 = v125 + 24;
          *(_QWORD *)(*(_QWORD *)(result + 656) + v94 + 64) = 0x4040404040404040;
          *(_QWORD *)(*(_QWORD *)(result + 656) + v125 + 96) = 0x4040404040404040;
          *(_QWORD *)(*(_QWORD *)(result + 656) + v96 + 96) = 0x4040404040404040;
          v95 = *(_QWORD *)(result + 656) + v97;
LABEL_146:
          *(_QWORD *)(v95 + 96) = 0x4040404040404040;
LABEL_147:
          *(_QWORD *)(*(_QWORD *)(result + 656) + v94 + 96) = 0x4040404040404040;
          break;
        default:
          return result;
      }
    }
    return result;
  }
  if (v14 <= v10)
    v17 = *(_DWORD *)(result + 28) & 1;
  else
    v17 = 1;
  v105 = v17;
  if (*(_BYTE *)(a3 + 6))
    goto LABEL_115;
LABEL_16:
  v134 = *(_QWORD *)(result + 16);
  if (v8 >= *(_DWORD *)(v138 + 3280) - v11)
    v18 = *(_DWORD *)(v138 + 3280) - v11;
  else
    v18 = v8;
  if (v14 >= *(_DWORD *)(v138 + 3284) - v12)
    v14 = *(_DWORD *)(v138 + 3284) - v12;
  v19 = 10;
  if (!*(_BYTE *)(a3 + 3))
    v19 = 26;
  v20 = *(unsigned __int8 *)(a3 + v19);
  v21 = *(unsigned __int8 *)(a3 + 7);
  v143[0] = *(unsigned __int8 *)(a3 + 29);
  v143[1] = *(_WORD *)(a3 + 30);
  if (v14 >= 1 && v18 >= 1)
  {
    v22 = 0;
    LODWORD(result) = 0;
    v102 = (int)(v18 + v6) >> v6;
    v98 = (int)(v14 + v10) >> v10;
    v120 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v20;
    v118 = v120 + 1;
    v124 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v21;
    v126 = v124 + 1;
    v137 = v6;
    v127 = v10;
    v103 = v14;
    v104 = v18;
    v112 = v11 & 0x1F;
    do
    {
      v106 = v22;
      v23 = 0;
      if (v14 >= (int)result + 16)
        v24 = result + 16;
      else
        v24 = v14;
      v101 = (_DWORD)result != 0;
      v99 = result + 16;
      v25 = (result + 16) >> v10;
      if (v98 < v25)
        v25 = v98;
      v115 = v25;
      v108 = result >> v10;
      v109 = result;
      v100 = v22 - 2 * (result >> v10 << v10);
      v111 = v24;
      do
      {
        v107 = v23 + 16;
        if (v18 >= (int)(v23 + 16))
          v26 = v23 + 16;
        else
          v26 = v18;
        v27 = v12 + result;
        *(_DWORD *)(v4 + 28) = v12 + result;
        v117 = v23;
        if ((int)result >= v24)
        {
          v28 = result;
          goto LABEL_72;
        }
        v122 = v23 != 0;
        if ((int)v23 < v26)
        {
          v28 = result;
          v132 = v101;
          do
          {
            v30 = *(_QWORD *)(v138 + 4200) + 10 * *(_QWORD *)(v138 + 3264) * v27;
            *(_DWORD *)(v4 + 24) = v11 + v23;
            v128 = v28;
            v31 = (v28 + v116);
            v32 = (unsigned __int8 *)(v4 + 64 + v31);
            v130 = (_QWORD *)(v4 + 64 + (v31 + 8));
            v33 = v122;
            do
            {
              if (v3[3])
              {
                v142 = 64;
                v141 = 0;
                v36 = v23 + v13;
                v37 = decode_coefs(v4, *(_QWORD *)(v4 + 656) + v36 + 32, (uint64_t)v32, v3[10], a2, (uint64_t)v3, 1, 0, *(_QWORD *)(v134 + 13920), &v141, &v142);
                v38 = v30 + 10 * *(int *)(v4 + 24);
                *(_WORD *)v38 = v37;
                *(_BYTE *)(v38 + 6) = v141;
                v34 = *v120;
                if (v34 >= 8)
                  v39 = 8;
                else
                  v39 = *v120;
                v40 = *v118;
                if (v40 >= 8)
                  v41 = 8;
                else
                  v41 = *v118;
                *(_QWORD *)(v134 + 13920) += 4 * (16 * v39 * v41);
                v42 = *(_DWORD *)(v138 + 3284) - *(_DWORD *)(v4 + 28);
                if ((int)v40 < v42)
                  v42 = v40;
                switch(v42)
                {
                  case 1:
                    LODWORD(v43) = v142;
                    *v32 = v142;
                    break;
                  case 2:
                    LODWORD(v43) = v142;
                    *(_WORD *)v32 = v142 | (v142 << 8);
                    break;
                  case 4:
                    LODWORD(v43) = v142;
                    *(_DWORD *)v32 = 16843009 * v142;
                    break;
                  case 8:
                    LODWORD(v43) = v142;
                    *(_QWORD *)v32 = 0x101010101010101 * v142;
                    break;
                  case 16:
                    v43 = v142;
                    *(_QWORD *)v32 = 0x101010101010101 * v142;
                    *v130 = 0x101010101010101 * v43;
                    break;
                  default:
                    LODWORD(v43) = v142;
                    memset(v32, v142, v42);
                    break;
                }
                LOBYTE(v6) = v137;
                v44 = *(_DWORD *)(v138 + 3280) - *(_DWORD *)(v4 + 24);
                if ((int)v34 < v44)
                  v44 = v34;
                switch(v44)
                {
                  case 1:
                    *(_BYTE *)(*(_QWORD *)(v4 + 656) + v36 + 32) = v43;
                    break;
                  case 2:
                    *(_WORD *)(*(_QWORD *)(v4 + 656) + v36 + 32) = v43 | ((_WORD)v43 << 8);
                    break;
                  case 4:
                    *(_DWORD *)(*(_QWORD *)(v4 + 656) + v36 + 32) = 16843009 * v43;
                    break;
                  case 8:
                    *(_QWORD *)(*(_QWORD *)(v4 + 656) + v36 + 32) = 0x101010101010101 * v43;
                    break;
                  case 16:
                    v45 = 0x101010101010101 * v43;
                    *(_QWORD *)(*(_QWORD *)(v4 + 656) + v36 + 32) = v45;
                    *(_QWORD *)(*(_QWORD *)(v4 + 656) + (v36 + 8) + 32) = v45;
                    break;
                  default:
                    memset((void *)(*(_QWORD *)(v4 + 656) + v36 + 32), v43, v44);
                    goto LABEL_44;
                }
              }
              else
              {
                read_coef_tree(v4, a2, (uint64_t)v3, v3[26], 0, (uint64_t)v143, v33, v132, 0);
                v34 = *v120;
LABEL_44:
                LOBYTE(v6) = v137;
              }
              v23 += v34;
              v35 = *(_DWORD *)(v4 + 24) + v34;
              *(_DWORD *)(v4 + 24) = v35;
              ++v33;
              v3 = (_BYTE *)a3;
            }
            while ((int)v23 < v26);
            v11 = v35 - v23;
            v29 = *v118;
            v28 = v128 + v29;
            v27 = *(_DWORD *)(v4 + 28) + v29;
            *(_DWORD *)(v4 + 24) = v11;
            *(_DWORD *)(v4 + 28) = v27;
            ++v132;
            v23 = v117;
          }
          while (v128 + v29 < v111);
LABEL_72:
          v12 = v27 - v28;
          *(_DWORD *)(v4 + 28) = v27 - v28;
          if (!v105)
            goto LABEL_33;
          goto LABEL_73;
        }
        v28 = result;
        do
          v28 += *v118;
        while (v28 < v24);
        v27 = v12 + v28;
        *(_DWORD *)(v4 + 24) = v11;
        *(_DWORD *)(v4 + 28) = v12;
        if (!v105)
        {
LABEL_33:
          LOBYTE(v10) = v127;
          LODWORD(result) = v109;
          goto LABEL_34;
        }
LABEL_73:
        if (v102 >= (int)(v107 >> v6))
          v46 = v107 >> v6;
        else
          v46 = v102;
        LODWORD(result) = v109;
        v10 = v127;
        if (v108 >= v115)
        {
          v12 += v100;
          *(_DWORD *)(v4 + 28) = v12;
        }
        else
        {
          v47 = v23 >> v6;
          if ((int)(v23 >> v6) >= v46)
          {
            v68 = v47 << v6;
            v69 = *v126;
            v70 = v69 << v127;
            v71 = v23 - (v47 << v6);
            v72 = v106 + v27 - v28;
            v73 = v11 + v23 - v68;
            v74 = v11;
            v75 = v108;
            do
            {
              v11 = v73;
              v75 += v69;
              v72 += v70;
              v74 += v71;
              v73 += v71;
            }
            while (v75 < v115);
            v76 = v72 - (v75 << v127);
            v77 = v108;
            do
            {
              v77 += v69;
              v76 += v70;
              v11 += v71;
            }
            while (v77 < v115);
            v12 = v76 - (v77 << v127);
            *(_DWORD *)(v4 + 24) = v11;
            *(_DWORD *)(v4 + 28) = v12;
          }
          else
          {
            v48 = 0;
            v49 = 1;
            v114 = v23 >> v6;
            do
            {
              v110 = v49;
              v50 = v12 + result;
              *(_DWORD *)(v4 + 28) = v50;
              v133 = v48 + 1;
              v51 = v108;
              do
              {
                v52 = *(_QWORD *)(v138 + 4200) + 10 * *(_QWORD *)(v138 + 3264) * v50;
                *(_DWORD *)(v4 + 24) = v11 + v23;
                v123 = v13 | (32 * ((v51 << v10) + v116));
                v119 = v51;
                v53 = (v51 + v113);
                v54 = v4 + 32 * v48 + 96;
                v55 = (unsigned __int8 *)(v54 + v53);
                v129 = v52 + 2 * v133;
                v131 = v52;
                v121 = (_QWORD *)(v54 + (v53 + 8));
                v56 = v47;
                do
                {
                  v140 = 64;
                  v139 = 0;
                  v58 = *(unsigned __int8 *)(a3 + 3);
                  if (!*(_BYTE *)(a3 + 3))
                    v139 = *(unsigned __int8 *)(v4 + v123 + (v56 << v6) + 8256);
                  v59 = (v56 + v125);
                  v60 = decode_coefs(v4, *(_QWORD *)(v4 + 656) + 32 * v48 + v59 + 64, (uint64_t)v55, *(unsigned __int8 *)(a3 + 7), a2, a3, v58, v133, *(_QWORD *)(v134 + 13920), &v139, &v140);
                  v61 = 10 * *(int *)(v4 + 24);
                  *(_WORD *)(v129 + v61) = v60;
                  *(_BYTE *)(v131 + v133 + v61 + 6) = v139;
                  v62 = *v124;
                  v63 = *v126;
                  *(_QWORD *)(v134 + 13920) += (*v124 * (unint64_t)*v126) << 6;
                  v64 = (int)(*(_DWORD *)(v138 + 3284) + v10 - *(_DWORD *)(v4 + 28)) >> v10;
                  if (v63 < v64)
                    v64 = v63;
                  switch(v64)
                  {
                    case 1:
                      LODWORD(v65) = v140;
                      *v55 = v140;
                      break;
                    case 2:
                      LODWORD(v65) = v140;
                      *(_WORD *)v55 = v140 | (v140 << 8);
                      break;
                    case 4:
                      LODWORD(v65) = v140;
                      *(_DWORD *)v55 = 16843009 * v140;
                      break;
                    case 8:
                      LODWORD(v65) = v140;
                      *(_QWORD *)v55 = 0x101010101010101 * v140;
                      break;
                    case 16:
                      v65 = v140;
                      *(_QWORD *)v55 = 0x101010101010101 * v140;
                      *v121 = 0x101010101010101 * v65;
                      break;
                    default:
                      LODWORD(v65) = v140;
                      memset(v55, v140, v64);
                      break;
                  }
                  v6 = v137;
                  v66 = (int)(*(_DWORD *)(v138 + 3280) + v6 - *(_DWORD *)(v4 + 24)) >> v6;
                  if (v62 < v66)
                    v66 = v62;
                  switch(v66)
                  {
                    case 1:
                      *(_BYTE *)(*(_QWORD *)(v4 + 656) + 32 * v48 + v59 + 64) = v65;
                      break;
                    case 2:
                      *(_WORD *)(*(_QWORD *)(v4 + 656) + 32 * v48 + v59 + 64) = v65 | ((_WORD)v65 << 8);
                      break;
                    case 4:
                      *(_DWORD *)(*(_QWORD *)(v4 + 656) + 32 * v48 + v59 + 64) = 16843009 * v65;
                      break;
                    case 8:
                      *(_QWORD *)(*(_QWORD *)(v4 + 656) + 32 * v48 + v59 + 64) = 0x101010101010101 * v65;
                      break;
                    case 16:
                      v67 = 0x101010101010101 * v65;
                      *(_QWORD *)(*(_QWORD *)(v4 + 656) + 32 * v48 + v59 + 64) = v67;
                      *(_QWORD *)(*(_QWORD *)(v4 + 656) + 32 * v48 + (v59 + 8) + 64) = v67;
                      break;
                    default:
                      memset((void *)(*(_QWORD *)(v4 + 656) + 32 * v48 + v59 + 64), v65, v66);
                      LOBYTE(v6) = v137;
                      break;
                  }
                  v10 = v127;
                  v56 += v62;
                  v57 = *(_DWORD *)(v4 + 24) + (v62 << v6);
                  *(_DWORD *)(v4 + 24) = v57;
                }
                while (v56 < v46);
                v11 = v57 - (v56 << v6);
                v51 = v119 + v63;
                v50 = *(_DWORD *)(v4 + 28) + (v63 << v127);
                *(_DWORD *)(v4 + 24) = v11;
                *(_DWORD *)(v4 + 28) = v50;
                v47 = v114;
                LODWORD(v13) = v112;
                v23 = v117;
              }
              while (v119 + v63 < v115);
              v49 = 0;
              v12 = v50 - (v51 << v127);
              *(_DWORD *)(v4 + 28) = v12;
              v48 = 1;
              LODWORD(result) = v109;
            }
            while ((v110 & 1) != 0);
          }
        }
LABEL_34:
        v23 = v107;
        v14 = v103;
        v18 = v104;
        v3 = (_BYTE *)a3;
        v24 = v111;
      }
      while ((int)v107 < v104);
      v22 = v106 + 32;
      result = v99;
    }
    while (v99 < v103);
  }
  return result;
}

uint64_t read_coef_tree(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, char a7, char a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned __int8 *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t result;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  signed int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _BYTE *v42;
  int v43;
  unsigned int v44;
  void *v45;
  int v46;
  int *v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  int v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  _WORD *v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  int v90;
  int v91;
  uint64_t v92;
  _BYTE __c[5];

  v12 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(v12 + 3144);
  v14 = a4;
  v15 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a4;
  v16 = *v15;
  v17 = v15[1];
  if (a5 <= 1
    && *(_WORD *)(a6 + 2 * a5)
    && ((*(unsigned __int16 *)(a6 + 2 * a5) >> (a7 + 4 * a8)) & 1) != 0)
  {
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a4 + 6);
    v20 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v19;
    v21 = *v20;
    v91 = v20[1];
    result = read_coef_tree(a1, a2, a3, v19);
    v23 = *(_DWORD *)(a1 + 24) + v21;
    *(_DWORD *)(a1 + 24) = v23;
    v24 = v18;
    if (v16 >= v17 && v23 < *(_DWORD *)(v18 + 3280))
    {
      result = read_coef_tree(a1, a2, a3, v19);
      v24 = v18;
      v23 = *(_DWORD *)(a1 + 24);
    }
    v25 = v23 - v21;
    v26 = v91;
    v27 = *(_DWORD *)(a1 + 28) + v91;
    *(_DWORD *)(a1 + 24) = v25;
    *(_DWORD *)(a1 + 28) = v27;
    if (v17 >= v16 && v27 < *(_DWORD *)(v24 + 3284))
    {
      result = read_coef_tree(a1, a2, a3, v19);
      v86 = v21;
      v87 = *(_DWORD *)(a1 + 24) + v21;
      *(_DWORD *)(a1 + 24) = v87;
      if (v16 >= v17)
      {
        v26 = v91;
        if (v87 < *(_DWORD *)(v18 + 3280))
        {
          result = read_coef_tree(a1, a2, a3, v19);
          v86 = v21;
          v26 = v91;
          v87 = *(_DWORD *)(a1 + 24);
        }
      }
      else
      {
        v26 = v91;
      }
      *(_DWORD *)(a1 + 24) = v87 - v86;
      v27 = *(_DWORD *)(a1 + 28);
    }
    *(_DWORD *)(a1 + 28) = v27 - v26;
    return result;
  }
  v28 = *(_DWORD *)(a1 + 24);
  v29 = *(_DWORD *)(a1 + 28);
  memset(__c, 0, sizeof(__c));
  v30 = *(_DWORD *)(a1 + 259588);
  if (v30)
  {
    v31 = v11 + 16 * (v30 & 1);
    result = *(_QWORD *)(v31 + 13904);
    if (v16 >= 8)
      v32 = 8;
    else
      v32 = v16;
    if ((int)v17 >= 8)
      v33 = 8;
    else
      v33 = v17;
    *(_QWORD *)(v31 + 13904) = result + 4 * (16 * v32 * v33);
    v34 = *(_QWORD *)(v12 + 4200);
    v35 = v28 + *(_QWORD *)(v12 + 3264) * v29;
    if (v30 == 2)
    {
      v92 = result;
      v36 = *(__int16 *)(v34 + 10 * v35);
      *(_DWORD *)&__c[1] = *(unsigned __int8 *)(v34 + 10 * v35 + 6);
LABEL_78:
      if ((v36 & 0x80000000) == 0)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v13
                                                                   + 136 * v14
                                                                   + 8 * *(unsigned int *)&__c[1]
                                                                   + 680))(a9, *(_QWORD *)(v12 + 2032), v92);
      return result;
    }
    v88 = v34 + 10 * v35;
    v37 = v17;
    v38 = v12;
    v39 = v13;
    v40 = a4;
  }
  else
  {
    v37 = v17;
    v38 = v12;
    v39 = v13;
    v40 = a4;
    v88 = 0;
    result = a1 + 1024;
  }
  v41 = v28 & 0x1F;
  v90 = v29 & 0x1F;
  v92 = result;
  v42 = (_BYTE *)(a1 + (v29 & 0x1F) + 64);
  result = decode_coefs(a1, *(_QWORD *)(a1 + 656) + v41 + 32, (uint64_t)v42, a4, a2, a3, 0, 0, result, (unsigned int *)&__c[1], __c);
  v36 = result;
  v12 = v38;
  v43 = *(_DWORD *)(v38 + 3284) - *(_DWORD *)(a1 + 28);
  if (v37 < v43)
    v43 = v37;
  switch(v43)
  {
    case 1:
      v44 = __c[0];
      *v42 = __c[0];
      break;
    case 2:
      v44 = __c[0];
      *(_WORD *)v42 = __c[0] | (__c[0] << 8);
      break;
    case 4:
      v44 = __c[0];
      *(_DWORD *)v42 = 16843009 * __c[0];
      break;
    case 8:
      v44 = __c[0];
      *(_QWORD *)v42 = 0x101010101010101 * __c[0];
      break;
    case 16:
      v44 = __c[0];
      *(int64x2_t *)v42 = vdupq_n_s64(0x101010101010101 * (unint64_t)__c[0]);
      break;
    default:
      v44 = __c[0];
      v45 = v42;
      v46 = v36;
      result = (uint64_t)memset(v45, __c[0], v43);
      v36 = v46;
      v12 = v38;
      break;
  }
  v14 = v40;
  v13 = v39;
  v47 = (int *)(a1 + 259588);
  v48 = *(_DWORD *)(v12 + 3280) - *(_DWORD *)(a1 + 24);
  if (v16 < v48)
    v48 = v16;
  switch(v48)
  {
    case 1:
      *(_BYTE *)(*(_QWORD *)(a1 + 656) + v41 + 32) = v44;
      break;
    case 2:
      *(_WORD *)(*(_QWORD *)(a1 + 656) + v41 + 32) = v44 | ((_WORD)v44 << 8);
      break;
    case 4:
      *(_DWORD *)(*(_QWORD *)(a1 + 656) + v41 + 32) = 16843009 * v44;
      break;
    case 8:
      v51 = 0x101010101010101 * v44;
      v52 = *(_QWORD *)(a1 + 656) + v41;
      goto LABEL_39;
    case 16:
      v51 = 0x101010101010101 * v44;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v41 + 32) = v51;
      v52 = *(_QWORD *)(a1 + 656) + (v41 + 8);
LABEL_39:
      *(_QWORD *)(v52 + 32) = v51;
      break;
    default:
      v49 = v12;
      v50 = v36;
      result = (uint64_t)memset((void *)(*(_QWORD *)(a1 + 656) + v41 + 32), v44, v48);
      v36 = v50;
      v12 = v49;
      break;
  }
  v53 = v41 | (32 * v90);
  v54 = a1 + 8256 + v53;
  switch(v16)
  {
    case 1:
      v55 = __c[1];
      v56 = (v37 - 1);
      if (v37 == 1)
        goto LABEL_45;
      v57 = v56 + 1;
      v56 = (v56 + 1) & 0x1FFFFFFFELL;
      v54 += 32 * v56;
      v58 = (_BYTE *)(v53 + a1 + 8288);
      v59 = v56;
      do
      {
        *(v58 - 32) = v55;
        *v58 = v55;
        v58 += 64;
        v59 -= 2;
      }
      while (v59);
      if (v57 != v56)
      {
LABEL_45:
        v60 = v37 - v56;
        do
        {
          *(_BYTE *)v54 = v55;
          v54 += 32;
          --v60;
        }
        while (v60);
      }
      break;
    case 2:
      v61 = 257 * *(_WORD *)&__c[1];
      v62 = (v37 - 1);
      if (v37 == 1)
        goto LABEL_52;
      v63 = v62 + 1;
      v62 = (v62 + 1) & 0x1FFFFFFFELL;
      v54 += 32 * v62;
      v64 = (_WORD *)(v53 + a1 + 8288);
      v65 = v62;
      do
      {
        *(v64 - 16) = v61;
        *v64 = v61;
        v64 += 32;
        v65 -= 2;
      }
      while (v65);
      if (v63 != v62)
      {
LABEL_52:
        v66 = v37 - v62;
        do
        {
          *(_WORD *)v54 = v61;
          v54 += 32;
          --v66;
        }
        while (v66);
      }
      break;
    case 4:
      v67 = 16843009 * *(_DWORD *)&__c[1];
      v68 = (v37 - 1);
      if (v37 == 1)
        goto LABEL_59;
      v69 = v68 + 1;
      v68 = (v68 + 1) & 0x1FFFFFFFELL;
      v54 += 32 * v68;
      v70 = (int *)(v53 + a1 + 8288);
      v71 = v68;
      do
      {
        *(v70 - 8) = v67;
        *v70 = v67;
        v70 += 16;
        v71 -= 2;
      }
      while (v71);
      if (v69 != v68)
      {
LABEL_59:
        v72 = v37 - v68;
        do
        {
          *(_DWORD *)v54 = v67;
          v54 += 32;
          --v72;
        }
        while (v72);
      }
      break;
    case 8:
      v73 = 0x101010101010101 * *(unsigned int *)&__c[1];
      v74 = (v37 - 1);
      if (v37 == 1)
        goto LABEL_66;
      v75 = v74 + 1;
      v74 = (v74 + 1) & 0x1FFFFFFFELL;
      v54 += 32 * v74;
      v76 = (uint64_t *)(v53 + a1 + 8288);
      v77 = v74;
      do
      {
        *(v76 - 4) = v73;
        *v76 = v73;
        v76 += 8;
        v77 -= 2;
      }
      while (v77);
      if (v75 != v74)
      {
LABEL_66:
        v78 = v37 - v74;
        do
        {
          *(_QWORD *)v54 = v73;
          v54 += 32;
          --v78;
        }
        while (v78);
      }
      break;
    case 16:
      v79 = 0x101010101010101 * *(unsigned int *)&__c[1];
      v80 = (v37 - 1);
      if (v37 == 1)
        goto LABEL_73;
      v81 = v80 + 1;
      v80 = (v80 + 1) & 0x1FFFFFFFELL;
      v54 += 32 * v80;
      v82 = (uint64_t *)(v53 + a1 + 8296);
      v83 = v80;
      do
      {
        *(v82 - 1) = v79;
        *v82 = v79;
        *(v82 - 5) = v79;
        *(v82 - 4) = v79;
        v82 += 8;
        v83 -= 2;
      }
      while (v83);
      if (v81 != v80)
      {
LABEL_73:
        v84 = v37 - v80;
        do
        {
          *(_QWORD *)v54 = v79;
          *(_QWORD *)(v54 + 8) = v79;
          v54 += 32;
          --v84;
        }
        while (v84);
      }
      break;
    default:
      break;
  }
  v85 = *v47;
  if (*v47 == 1)
  {
    *(_WORD *)v88 = v36;
    *(_BYTE *)(v88 + 6) = __c[1];
    v85 = *v47;
  }
  if ((v85 & 1) == 0)
    goto LABEL_78;
  return result;
}

uint64_t decode_coefs(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, int a7, int a8, uint64_t a9, unsigned int *a10, _BYTE *a11)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int16x8_t *v38;
  unsigned int v39;
  int16x8_t *v40;
  int v41;
  _BOOL4 v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  unint64_t v47;
  int32x4_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint8x16_t *v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  unsigned int v65;
  uint8x16_t *v66;
  unint64_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int32x4_t v70;
  uint64_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  uint64_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  uint8x16_t v83;
  uint16x8_t v84;
  uint32x4_t v85;
  uint64x2_t v86;
  uint64x2_t v87;
  uint32x4_t v88;
  uint64x2_t v89;
  uint16x8_t v90;
  uint32x4_t v91;
  uint64x2_t v92;
  uint64x2_t v93;
  uint64x2_t v94;
  uint64x2_t v95;
  uint32x4_t v96;
  uint64x2_t v97;
  uint64x2_t v98;
  uint64x2_t v99;
  uint64x2_t v100;
  uint64x2_t v101;
  uint64x2_t v102;
  uint64x2_t v103;
  uint64x2_t v104;
  uint64x2_t v105;
  int8x16_t v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  char *v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  char v118;
  char v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  int16x8_t *v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  int16x8_t *v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  int16x8_t *v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  char v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char *v159;
  int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  int16x8_t *v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int v177;
  char *v178;
  int v179;
  unsigned int v180;
  int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  int v185;
  unsigned int v186;
  int16x8_t *v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  int v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  unsigned int v201;
  unsigned int v202;
  char *v203;
  uint64_t v204;
  int v205;
  unsigned int v206;
  uint64_t v207;
  unsigned int v208;
  int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  unsigned int v214;
  int16x8_t *v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  char v229;
  unsigned int v230;
  int v231;
  unint64_t v232;
  int32x4_t v233;
  unsigned int v234;
  unsigned int v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  int v239;
  uint64_t v240;
  unsigned int v241;
  unsigned int v242;
  int v243;
  int v244;
  unsigned int v245;
  unint64_t v246;
  unsigned int v247;
  uint8x16_t *v248;
  unsigned int v249;
  unint64_t v250;
  int v251;
  unint64_t v252;
  unsigned int v253;
  uint8x16_t *v254;
  unint64_t v255;
  int8x16_t v256;
  int8x16_t v257;
  int32x4_t v258;
  uint64_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int32x4_t v263;
  uint64_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int8x16_t v269;
  int8x16_t v270;
  uint8x16_t v271;
  uint16x8_t v272;
  uint32x4_t v273;
  uint64x2_t v274;
  uint64x2_t v275;
  uint32x4_t v276;
  uint64x2_t v277;
  uint16x8_t v278;
  uint32x4_t v279;
  uint64x2_t v280;
  uint64x2_t v281;
  uint64x2_t v282;
  uint64x2_t v283;
  uint32x4_t v284;
  uint64x2_t v285;
  uint64x2_t v286;
  uint64x2_t v287;
  uint64x2_t v288;
  uint64x2_t v289;
  uint64x2_t v290;
  uint64x2_t v291;
  uint64x2_t v292;
  uint64x2_t v293;
  int8x16_t v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  int v299;
  uint64_t v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  uint64_t v306;
  unint64_t v307;
  int v308;
  uint64_t v309;
  unsigned int v310;
  unsigned int v311;
  int v312;
  unsigned int v313;
  unint64_t v314;
  uint8x16_t *v315;
  unsigned int v316;
  unint64_t v317;
  int v318;
  unint64_t v319;
  unsigned int v320;
  uint8x16_t *v321;
  unint64_t v322;
  int8x16_t v323;
  int8x16_t v324;
  int32x4_t v325;
  uint64_t v326;
  int32x4_t v327;
  int32x4_t v328;
  int32x4_t v329;
  int32x4_t v330;
  uint64_t v331;
  int8x16_t v332;
  int8x16_t v333;
  int8x16_t v334;
  int8x16_t v335;
  int8x16_t v336;
  int8x16_t v337;
  uint8x16_t v338;
  uint16x8_t v339;
  uint32x4_t v340;
  uint64x2_t v341;
  uint64x2_t v342;
  uint32x4_t v343;
  uint64x2_t v344;
  uint16x8_t v345;
  uint32x4_t v346;
  uint64x2_t v347;
  uint64x2_t v348;
  uint64x2_t v349;
  uint64x2_t v350;
  uint32x4_t v351;
  uint64x2_t v352;
  uint64x2_t v353;
  uint64x2_t v354;
  uint64x2_t v355;
  uint64x2_t v356;
  uint64x2_t v357;
  uint64x2_t v358;
  uint64x2_t v359;
  uint64x2_t v360;
  int8x16_t v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  unsigned int v365;
  int v366;
  unsigned int v367;
  unsigned int v368;
  uint8x16_t *v369;
  uint64_t v370;
  unint64_t v371;
  int v372;
  uint64_t v373;
  unsigned int v374;
  unsigned int v375;
  int v376;
  uint64_t v377;
  unsigned int v378;
  unint64_t v379;
  int v380;
  unint64_t v381;
  unsigned int v382;
  uint8x16_t *v383;
  unint64_t v384;
  int8x16_t v385;
  int8x16_t v386;
  int32x4_t v387;
  uint64_t v388;
  int32x4_t v389;
  int32x4_t v390;
  int32x4_t v391;
  int32x4_t v392;
  uint64_t v393;
  int8x16_t v394;
  int8x16_t v395;
  int8x16_t v396;
  int8x16_t v397;
  int8x16_t v398;
  int8x16_t v399;
  uint8x16_t v400;
  uint16x8_t v401;
  uint32x4_t v402;
  uint64x2_t v403;
  uint64x2_t v404;
  uint32x4_t v405;
  uint64x2_t v406;
  uint16x8_t v407;
  uint32x4_t v408;
  uint64x2_t v409;
  uint64x2_t v410;
  uint64x2_t v411;
  uint64x2_t v412;
  uint32x4_t v413;
  uint64x2_t v414;
  uint64x2_t v415;
  uint64x2_t v416;
  uint64x2_t v417;
  uint64x2_t v418;
  uint64x2_t v419;
  uint64x2_t v420;
  uint64x2_t v421;
  uint64x2_t v422;
  int8x16_t v423;
  unsigned int v424;
  unsigned int v425;
  unsigned int v426;
  int v427;
  int v428;
  unint64_t v429;
  int32x4_t v430;
  unsigned int v431;
  unint64_t v432;
  uint64_t v433;
  unint64_t v434;
  int v435;
  uint64_t v436;
  unsigned int v437;
  unsigned int v438;
  int v439;
  int v440;
  unsigned int v441;
  unint64_t v442;
  unsigned int v443;
  uint8x16_t *v444;
  unsigned int v445;
  unint64_t v446;
  int v447;
  unint64_t v448;
  unsigned int v449;
  uint8x16_t *v450;
  unint64_t v451;
  int8x16_t v452;
  int8x16_t v453;
  int32x4_t v454;
  uint64_t v455;
  int32x4_t v456;
  int32x4_t v457;
  int32x4_t v458;
  int32x4_t v459;
  uint64_t v460;
  int8x16_t v461;
  int8x16_t v462;
  int8x16_t v463;
  int8x16_t v464;
  int8x16_t v465;
  int8x16_t v466;
  uint8x16_t v467;
  uint16x8_t v468;
  uint32x4_t v469;
  uint64x2_t v470;
  uint64x2_t v471;
  uint32x4_t v472;
  uint64x2_t v473;
  uint16x8_t v474;
  uint32x4_t v475;
  uint64x2_t v476;
  uint64x2_t v477;
  uint64x2_t v478;
  uint64x2_t v479;
  uint32x4_t v480;
  uint64x2_t v481;
  uint64x2_t v482;
  uint64x2_t v483;
  uint64x2_t v484;
  uint64x2_t v485;
  uint64x2_t v486;
  uint64x2_t v487;
  uint64x2_t v488;
  uint64x2_t v489;
  int8x16_t v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int v493;
  unsigned int v494;
  _BOOL4 v495;
  int v496;
  unsigned int v497;
  unsigned int v498;
  unsigned int v499;
  unsigned int v500;
  uint64_t v501;
  unint64_t v502;
  int v503;
  uint64_t v504;
  unsigned int v505;
  unsigned int v506;
  int v507;
  unsigned int v508;
  unint64_t v509;
  uint8x16_t *v510;
  unsigned int v511;
  unint64_t v512;
  int v513;
  unint64_t v514;
  unsigned int v515;
  uint8x16_t *v516;
  unint64_t v517;
  int8x16_t v518;
  int8x16_t v519;
  int32x4_t v520;
  uint64_t v521;
  int32x4_t v522;
  int32x4_t v523;
  int32x4_t v524;
  int32x4_t v525;
  uint64_t v526;
  int8x16_t v527;
  int8x16_t v528;
  int8x16_t v529;
  int8x16_t v530;
  int8x16_t v531;
  int8x16_t v532;
  uint8x16_t v533;
  uint16x8_t v534;
  uint32x4_t v535;
  uint64x2_t v536;
  uint64x2_t v537;
  uint32x4_t v538;
  uint64x2_t v539;
  uint16x8_t v540;
  uint32x4_t v541;
  uint64x2_t v542;
  uint64x2_t v543;
  uint64x2_t v544;
  uint64x2_t v545;
  uint32x4_t v546;
  uint64x2_t v547;
  uint64x2_t v548;
  uint64x2_t v549;
  uint64x2_t v550;
  uint64x2_t v551;
  uint64x2_t v552;
  uint64x2_t v553;
  uint64x2_t v554;
  uint64x2_t v555;
  int8x16_t v556;
  unsigned int v557;
  unsigned int v558;
  unsigned int v559;
  unsigned int v560;
  int v561;
  unsigned int v562;
  unsigned int v563;
  uint8x16_t *v564;
  uint64_t v565;
  unint64_t v566;
  int v567;
  uint64_t v568;
  unsigned int v569;
  unsigned int v570;
  int v571;
  uint64_t v572;
  unsigned int v573;
  unint64_t v574;
  int v575;
  unint64_t v576;
  unsigned int v577;
  uint8x16_t *v578;
  unint64_t v579;
  int8x16_t v580;
  int8x16_t v581;
  int32x4_t v582;
  uint64_t v583;
  int32x4_t v584;
  int32x4_t v585;
  int32x4_t v586;
  int32x4_t v587;
  uint64_t v588;
  int8x16_t v589;
  int8x16_t v590;
  int8x16_t v591;
  int8x16_t v592;
  int8x16_t v593;
  int8x16_t v594;
  uint8x16_t v595;
  uint16x8_t v596;
  uint32x4_t v597;
  uint64x2_t v598;
  uint64x2_t v599;
  uint32x4_t v600;
  uint64x2_t v601;
  uint16x8_t v602;
  uint32x4_t v603;
  uint64x2_t v604;
  uint64x2_t v605;
  uint64x2_t v606;
  uint64x2_t v607;
  uint32x4_t v608;
  uint64x2_t v609;
  uint64x2_t v610;
  uint64x2_t v611;
  uint64x2_t v612;
  uint64x2_t v613;
  uint64x2_t v614;
  uint64x2_t v615;
  uint64x2_t v616;
  uint64x2_t v617;
  int8x16_t v618;
  unsigned int v619;
  unsigned int v620;
  unsigned int v621;
  int v622;
  char v623;
  unsigned __int8 *v624;
  unsigned int v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  int v630;
  unsigned int v631;
  char *v632;
  uint64_t v633;
  uint64_t v635;
  int v636;
  uint64_t v637;
  int v638;
  char v639;
  char v640;
  int16x8_t *v642;
  char *v644;
  int16x8_t *v645;
  unsigned __int8 **v646;

  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_DWORD *)(*(_QWORD *)(v12 + 24) + 4 * *(unsigned __int8 *)(a6 + 4) + 1144);
  v15 = a4;
  v16 = &dav1d_block_dimensions[4 * a5];
  v637 = v12;
  if (a8)
    __asm { BR              X10 }
  v17 = (char *)&dav1d_txfm_dimensions + 8 * a4;
  v18 = v17[2];
  if (v16[2] != (_DWORD)v18 || (v19 = v16[3], v19 != v17[3]))
    __asm { BR              X9 }
  v638 = v16[2];
  v20 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a4 + 7);
  if (dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v13 + 13824), (unsigned __int16 *)(v13 + 7040 + 52 * v20 + 5896)))
  {
    *a11 = 64;
    *a10 = 16 * v14;
    return 0xFFFFFFFFLL;
  }
  v636 = v20;
  v633 = v15;
  if (v14)
  {
    v23 = 0x10u;
    v24 = v638;
    goto LABEL_30;
  }
  if (*((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v15 + 5) + a7 > 3)
  {
    v23 = 0u;
    v24 = v638;
    goto LABEL_30;
  }
  v24 = v638;
  v25 = *(_QWORD *)(v637 + 24);
  v23 = *(_DWORD *)(v25 + 4 * *(unsigned __int8 *)(a6 + 4) + 1176);
  if (v23)
  {
    if (a7)
    {
      v26 = *(unsigned __int8 *)(a6 + 8);
      if (v26 == 13)
        v26 = dav1d_filter_mode_to_y_mode[*(char *)(a6 + 13)];
      v27 = *(_DWORD *)(v25 + 1420);
      v28 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v633 + 4);
      if (!v27)
      {
        if (((0x60604uLL >> v633) & 1) == 0)
        {
          v29 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v13 + 13824), (int16x8_t *)(v13+ 208 * *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v633 + 4)+ 16 * v26+ 2176), 6uLL)+ 5;
LABEL_27:
          v23 = dav1d_tx_types_per_set[v29];
          goto LABEL_30;
        }
        v28 = 2;
      }
      v29 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v13 + 13824), (int16x8_t *)(v13 + 208 * v28 + 16 * v26 + 2592), 4uLL);
      goto LABEL_27;
    }
    v30 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v633 + 4);
    if (((0x18608uLL >> v633) & 1) != 0 || *(_DWORD *)(v25 + 1420))
    {
      v23 = dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v13 + 13824), (unsigned __int16 *)(v13 + 4 * v30 + 5448))? 0: 9;
    }
    else
    {
      if (((0x60604uLL >> v633) & 1) != 0)
        v31 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v13 + 13824), (int16x8_t *)(v13 + 2144), 0xBuLL)+ 12;
      else
        v31 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v13 + 13824), (int16x8_t *)(v13 + 32 * v30 + 2080), 0xFuLL)+ 24;
      v23 = dav1d_tx_types_per_set[v31];
    }
  }
LABEL_30:
  *a10 = v23;
  if (v24 >= 3)
    v32 = 3;
  else
    v32 = v24;
  if (v19 >= 3)
    v33 = 3;
  else
    v33 = v19;
  v646 = (unsigned __int8 **)(v13 + 13824);
  v34 = dav1d_tx_type_class[v23];
  v35 = v23 - 10;
  v630 = v34;
  switch(v32 + v33)
  {
    case 0:
      v36 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v13 + 13824), (int16x8_t *)(v13 + 7040 + 16 * (v35 < 6)), 4uLL);
      v37 = v20;
      if (v36 >= 2)
        goto LABEL_54;
      goto LABEL_84;
    case 1:
      v36 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v13 + 13824), (int16x8_t *)(v13 + 16 * (v35 < 6) + 7104), 5uLL);
      v37 = v20;
      if (v36 < 2)
        goto LABEL_84;
      goto LABEL_54;
    case 2:
      v36 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v13 + 13824), (int16x8_t *)(v13 + 16 * (v35 < 6) + 7168), 6uLL);
      v37 = v20;
      if (v36 < 2)
        goto LABEL_84;
      goto LABEL_54;
    case 3:
      v36 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v13 + 13824), (int16x8_t *)(v13 + 16 * (v35 < 6) + 7232), 7uLL);
      v37 = v20;
      if (v36 < 2)
        goto LABEL_84;
      goto LABEL_54;
    case 4:
      v36 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v13 + 13824), (int16x8_t *)(v13 + 32 * (v35 < 6) + 7296), 8uLL);
      v37 = v20;
      if (v36 < 2)
        goto LABEL_84;
      goto LABEL_54;
    case 5:
      v36 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v13 + 13824), (int16x8_t *)(v13 + 7424), 9uLL);
      v37 = v20;
      if (v36 < 2)
        goto LABEL_84;
      goto LABEL_54;
    case 6:
      v36 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v13 + 13824), (int16x8_t *)(v13 + 7488), 0xAuLL);
      v37 = v20;
      if (v36 < 2)
        goto LABEL_84;
LABEL_54:
      v41 = v36;
      v42 = dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v13 + 13824), (unsigned __int16 *)(v13 + 88 * v37 + 4 * v36 + 12496));
      v43 = v41 - 2;
      v44 = (v42 | 2) << (v41 - 2);
      v45 = 0;
      if (v41 == 2)
        goto LABEL_83;
      v46 = *(_DWORD *)(v13 + 13848);
      v47 = *(_QWORD *)(v13 + 13840);
      v48.i64[0] = 0x7F0000007FLL;
      v48.i64[1] = 0x7F0000007FLL;
      v49 = *(_DWORD *)(v13 + 13852);
      break;
    default:
      v38 = (int16x8_t *)(v13 + 7040 + (v20 << 6) + 512);
      if ((int)v20 >= 3)
        v39 = dav1d_tx_type_class;
      else
        v39 = v20;
      v40 = (int16x8_t *)(v13 + 7040 + 336 * v39 + 4112);
      goto LABEL_108;
  }
  do
  {
    v53 = (v46 >> 1) & 0x7FFFFF80 | 4;
    v54 = v53 << 48;
    v55 = v46 - 2 * v53;
    if (v47 >= v53 << 48)
      v56 = v53 << 48;
    else
      v56 = 0;
    if (v47 < v53 << 48)
      v55 = 0;
    v57 = v55 + v53;
    v58 = __clz(v57);
    v59 = v58 ^ 0x10;
    v51 = v49 - (v58 ^ 0x10);
    *(_DWORD *)(v13 + 13852) = v51;
    v60 = ((v47 - v56 + 1) << (v58 ^ 0x10)) - 1;
    *(_QWORD *)(v13 + 13840) = v60;
    v46 = v57 << (v58 ^ 0x10);
    *(_DWORD *)(v13 + 13848) = v46;
    if ((v51 & 0x80000000) != 0)
    {
      v52 = *(uint8x16_t **)(v13 + 13824);
      v61 = 40 - v51;
      if ((int)(40 - v51) < 0)
        goto LABEL_58;
      v62 = *(_QWORD *)(v13 + 13832);
      if ((unint64_t)v52 >= v62)
        goto LABEL_58;
      if (v61 >= 7)
        v63 = 7;
      else
        v63 = 40 - v51;
      v64 = (v59 - v49 - v63 + 47) >> 3;
      if (~(unint64_t)v52 + v62 < v64)
        v64 = ~(unint64_t)v52 + v62;
      if (v64 >= 0xF)
      {
        v67 = v64 + 1;
        v68 = 0uLL;
        v69 = (int8x16_t)(unint64_t)v60;
        v70 = vdupq_n_s32(v61);
        v71 = (v64 + 1) & 0x3FFFFFF0;
        v72 = vaddq_s32(v70, (int32x4_t)xmmword_196889AA0);
        v65 = v61 - 8 * v71;
        v73 = vaddq_s32(v70, (int32x4_t)xmmword_196889AB0);
        v66 = (uint8x16_t *)((char *)v52 + v71);
        v74 = vaddq_s32(v70, (int32x4_t)xmmword_196889AC0);
        v75 = vaddq_s32(v70, (int32x4_t)xmmword_196889AD0);
        v76 = v71;
        v77 = 0uLL;
        v78 = 0uLL;
        v79 = 0uLL;
        v80 = 0uLL;
        v81 = 0uLL;
        v82 = 0uLL;
        do
        {
          v83 = *v52++;
          v84 = vmovl_high_u8(v83);
          v85 = vmovl_high_u16(v84);
          v86.i64[0] = v85.u32[0];
          v86.i64[1] = v85.u32[1];
          v87 = v86;
          v88 = vmovl_u16(*(uint16x4_t *)v84.i8);
          v86.i64[0] = v88.u32[2];
          v86.i64[1] = v88.u32[3];
          v89 = v86;
          v90 = vmovl_u8(*(uint8x8_t *)v83.i8);
          v91 = vmovl_high_u16(v90);
          v86.i64[0] = v91.u32[2];
          v86.i64[1] = v91.u32[3];
          v92 = v86;
          v86.i64[0] = v85.u32[2];
          v86.i64[1] = v85.u32[3];
          v93 = v86;
          v86.i64[0] = v88.u32[0];
          v86.i64[1] = v88.u32[1];
          v94 = v86;
          v86.i64[0] = v91.u32[0];
          v86.i64[1] = v91.u32[1];
          v95 = v86;
          v96 = vmovl_u16(*(uint16x4_t *)v90.i8);
          v86.i64[0] = v96.u32[2];
          v86.i64[1] = v96.u32[3];
          v97 = v86;
          v86.i64[0] = v96.u32[0];
          v86.i64[1] = v96.u32[1];
          v98 = v86;
          v86.i64[0] = v72.u32[0];
          v86.i64[1] = v72.u32[1];
          v99 = v86;
          v86.i64[0] = v73.u32[2];
          v86.i64[1] = v73.u32[3];
          v100 = v86;
          v86.i64[0] = v74.u32[2];
          v86.i64[1] = v74.u32[3];
          v101 = v86;
          v86.i64[0] = v72.u32[2];
          v86.i64[1] = v72.u32[3];
          v102 = v86;
          v86.i64[0] = v73.u32[0];
          v86.i64[1] = v73.u32[1];
          v103 = v86;
          v86.i64[0] = v74.u32[0];
          v86.i64[1] = v74.u32[1];
          v104 = v86;
          v86.i64[0] = v75.u32[2];
          v86.i64[1] = v75.u32[3];
          v105 = v86;
          v86.i64[0] = v75.u32[0];
          v86.i64[1] = v75.u32[1];
          v81 = veorq_s8((int8x16_t)vshlq_u64(v87, v99), v81);
          v80 = veorq_s8((int8x16_t)vshlq_u64(v89, v100), v80);
          v78 = veorq_s8((int8x16_t)vshlq_u64(v92, v101), v78);
          v82 = veorq_s8((int8x16_t)vshlq_u64(v93, v102), v82);
          v79 = veorq_s8((int8x16_t)vshlq_u64(v94, v103), v79);
          v77 = veorq_s8((int8x16_t)vshlq_u64(v95, v104), v77);
          v68 = veorq_s8((int8x16_t)vshlq_u64(v97, v105), v68);
          v69 = veorq_s8((int8x16_t)vshlq_u64(v98, v86), v69);
          v75 = vaddq_s32(v75, v48);
          v74 = vaddq_s32(v74, v48);
          v73 = vaddq_s32(v73, v48);
          v72 = vaddq_s32(v72, v48);
          v76 -= 16;
        }
        while (v76);
        v106 = veorq_s8(veorq_s8(veorq_s8(v69, v79), veorq_s8(v77, v81)), veorq_s8(veorq_s8(v68, v80), veorq_s8(v78, v82)));
        v60 = (uint64_t)veor_s8(*(int8x8_t *)v106.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v106, v106, 8uLL));
        if (v67 == v71)
        {
          v50 = v61 - 8 * v71 + 8;
LABEL_57:
          v51 = 48 - v50;
          v52 = v66;
LABEL_58:
          *(_QWORD *)(v13 + 13840) = v60;
          *(_DWORD *)(v13 + 13852) = v51;
          *(_QWORD *)(v13 + 13824) = v52;
          goto LABEL_59;
        }
      }
      else
      {
        v65 = 40 - v51;
        v66 = *(uint8x16_t **)(v13 + 13824);
      }
      v107 = v65;
      do
      {
        v108 = v66->u8[0];
        v66 = (uint8x16_t *)((char *)v66 + 1);
        v60 ^= (unint64_t)v108 << v107;
        v109 = v107 - 8;
        if (v107 < 8)
          break;
        v107 -= 8;
      }
      while ((unint64_t)v66 < v62);
      v50 = v109 + 8;
      goto LABEL_57;
    }
LABEL_59:
    v45 = (2 * v45) | (v47 < v54);
    v49 = v51;
    v47 = v60;
    --v43;
  }
  while (v43);
LABEL_83:
  v36 = v45 | v44;
  v37 = v20;
LABEL_84:
  v38 = (int16x8_t *)(v13 + 7040 + (v37 << 6) + 512);
  if ((int)v37 >= 3)
    v110 = 3;
  else
    v110 = v37;
  v40 = (int16x8_t *)(v13 + 7040 + 336 * v110 + 4112);
  if (!v36)
  {
LABEL_108:
    v128 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v13 + 13824), v38, 2uLL);
    v121 = 0;
    v625 = 0;
    if (v128 == 2)
      goto LABEL_233;
    v129 = v128 + 1;
    v130 = a9;
    v131 = v633;
    goto LABEL_243;
  }
  v624 = (unsigned __int8 *)(a1 + 9281);
  v645 = (int16x8_t *)(v13 + 656 * v37 + 7872);
  v111 = (char *)(a1 + 9280);
  if (*((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a4) >= 8u)
    v112 = 8;
  else
    v112 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a4);
  if (*((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v633 + 1) >= 8u)
    v113 = 8;
  else
    v113 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v633 + 1);
  v114 = 1;
  if (v36 > 2 * v113 * v112)
    v114 = 2;
  v625 = v36;
  if (v36 <= 4 * v113 * v112)
    v115 = v114;
  else
    v115 = v114 + 1;
  v116 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v13 + 13824), (int16x8_t *)((char *)v38 + 8 * v115), 2uLL);
  v117 = v116 + 1;
  v118 = 65 * (v116 + 1);
  v642 = v40;
  v644 = (char *)(a1 + 9280);
  if (v630 == 2)
  {
    v132 = v19 + 2;
    v133 = 4 * v112 - 1;
    bzero(v111, (v112 << 6) | 0x20u);
    v134 = v625;
    v639 = v638 + 2;
    v135 = v625 >> v639;
    v121 = ((v133 & v625) << v132) | (v625 >> v639);
    if (v116 == 2)
    {
      v136 = 112;
      if (!v135)
        v136 = 56;
      v137 = (int16x8_t *)((char *)v642 + v136);
      v138 = dav1d_msac_decode_symbol_adapt_c(v646, (int16x8_t *)((char *)v642 + v136), 3uLL);
      if (v138 == 3)
      {
        v139 = dav1d_msac_decode_symbol_adapt_c(v646, v137, 3uLL);
        if (v139 == 3)
        {
          v140 = dav1d_msac_decode_symbol_adapt_c(v646, v137, 3uLL);
          if (v140 == 3)
            v117 = dav1d_msac_decode_symbol_adapt_c(v646, v137, 3uLL) + 12;
          else
            v117 = v140 + 9;
        }
        else
        {
          v117 = v139 + 6;
        }
      }
      else
      {
        v117 = v138 + 3;
      }
      v118 = v117 - 64;
      v134 = v625;
    }
    *(_DWORD *)(a9 + 4 * v121) = v117 << 11;
    v111[16 * (v133 & v625) + v135] = v118;
    if (v134 >= 2)
    {
      v173 = v134 + 1;
      do
      {
        while (1)
        {
          v175 = (v173 - 2) & v133;
          v176 = (v173 - 2) >> v639;
          v177 = (v175 << v132) | v176;
          v178 = &v111[16 * v175 + v176];
          v179 = v178[16] + v178[1] + v178[2];
          v180 = v179 + v178[3] + v178[4];
          v181 = 5 * v176 + 26;
          if (v176 > 1)
            v181 = 36;
          v182 = v180 <= 0x200 ? (v180 + 64) >> 7 : 4;
          v183 = dav1d_msac_decode_symbol_adapt_c(v646, (int16x8_t *)((char *)v645 + 8 * v182 + 8 * v181), 3uLL);
          if (v183 != 3)
            break;
          v184 = v179 & 0x3F;
          if ((_DWORD)v176)
            v185 = 14;
          else
            v185 = 7;
          if (v184 <= 0xC)
            v186 = (v184 + 1) >> 1;
          else
            v186 = 6;
          v187 = (int16x8_t *)((char *)v642 + 8 * v186 + 8 * v185);
          v188 = dav1d_msac_decode_symbol_adapt_c(v646, v187, 3uLL);
          if (v188 == 3)
          {
            v189 = dav1d_msac_decode_symbol_adapt_c(v646, v187, 3uLL);
            if (v189 == 3)
            {
              v190 = dav1d_msac_decode_symbol_adapt_c(v646, v187, 3uLL);
              if (v190 == 3)
                v191 = dav1d_msac_decode_symbol_adapt_c(v646, v187, 3uLL) + 12;
              else
                v191 = v190 + 9;
            }
            else
            {
              v191 = v189 + 6;
            }
          }
          else
          {
            v191 = v188 + 3;
          }
          v111 = v644;
          *v178 = v191 - 64;
          v192 = v121 | (v191 << 11);
          v121 = v177;
          *(_DWORD *)(a9 + 4 * v177) = v192;
          if (--v173 <= 2)
            goto LABEL_191;
        }
        *v178 = 65 * v183;
        v174 = (v121 - 2048) & ((int)(1572673 * v183) >> 9);
        if (v174)
          v121 = v177;
        v111 = v644;
        *(_DWORD *)(a9 + 4 * v177) = v174;
        --v173;
      }
      while (v173 > 2);
    }
LABEL_191:
    v193 = v624[15] + *v624 + v624[1];
    v194 = v193 + v624[2] + v624[3];
    if (v194 <= 0x200)
      v195 = ((v194 + 64) >> 7) + 26;
    else
      v195 = 30;
    v196 = dav1d_msac_decode_symbol_adapt_c(v646, (int16x8_t *)((char *)v645 + 8 * v195), 3uLL);
    if (v196 == 3)
    {
      v197 = v193 & 0x3F;
      goto LABEL_229;
    }
    goto LABEL_237;
  }
  if (v630 == 1)
  {
    v119 = v19 + 2;
    v120 = 4 * v113 - 1;
    bzero(v111, (v113 << 6) | 0x20);
    v121 = v625;
    v122 = v625 >> v119;
    if (v116 == 2)
    {
      v123 = 112;
      if (!v122)
        v123 = 56;
      v124 = (int16x8_t *)((char *)v642 + v123);
      v125 = dav1d_msac_decode_symbol_adapt_c(v646, (int16x8_t *)((char *)v642 + v123), 3uLL);
      if (v125 == 3)
      {
        v126 = dav1d_msac_decode_symbol_adapt_c(v646, v124, 3uLL);
        if (v126 == 3)
        {
          v127 = dav1d_msac_decode_symbol_adapt_c(v646, v124, 3uLL);
          if (v127 == 3)
            v117 = dav1d_msac_decode_symbol_adapt_c(v646, v124, 3uLL) + 12;
          else
            v117 = v127 + 9;
        }
        else
        {
          v117 = v126 + 6;
        }
      }
      else
      {
        v117 = v125 + 3;
      }
      v118 = v117 - 64;
      v121 = v625;
    }
    *(_DWORD *)(a9 + 4 * v121) = v117 << 11;
    v111[16 * (v120 & v625) + v122] = v118;
    if (v121 < 2)
    {
      v121 = 1;
    }
    else
    {
      v153 = v121 - 1;
      do
      {
        v158 = v153 >> v119;
        v159 = &v111[16 * (v120 & v153) + v158];
        v160 = v159[16] + v159[1] + v159[2];
        v161 = v160 + v159[3] + v159[4];
        v162 = 5 * v158 + 26;
        if (v158 > 1)
          v162 = 36;
        if (v161 <= 0x200)
          v163 = (v161 + 64) >> 7;
        else
          v163 = 4;
        v164 = dav1d_msac_decode_symbol_adapt_c(v646, (int16x8_t *)((char *)v645 + 8 * v163 + 8 * v162), 3uLL);
        if (v164 == 3)
        {
          v165 = v160 & 0x3F;
          if ((_DWORD)v158)
            v166 = 14;
          else
            v166 = 7;
          if (v165 <= 0xC)
            v167 = (v165 + 1) >> 1;
          else
            v167 = 6;
          v168 = (int16x8_t *)((char *)v642 + 8 * v167 + 8 * v166);
          v169 = dav1d_msac_decode_symbol_adapt_c(v646, v168, 3uLL);
          if (v169 == 3)
          {
            v170 = dav1d_msac_decode_symbol_adapt_c(v646, v168, 3uLL);
            if (v170 == 3)
            {
              v171 = dav1d_msac_decode_symbol_adapt_c(v646, v168, 3uLL);
              if (v171 == 3)
                v172 = dav1d_msac_decode_symbol_adapt_c(v646, v168, 3uLL) + 12;
              else
                v172 = v171 + 9;
            }
            else
            {
              v172 = v170 + 6;
            }
          }
          else
          {
            v172 = v169 + 3;
          }
          v156 = a9;
          v154 = v172 - 64;
          v155 = v121 | (v172 << 11);
          v121 = v153;
        }
        else
        {
          v154 = 65 * v164;
          v155 = (v121 - 2048) & ((int)(1572673 * v164) >> 9);
          if (v155)
            v121 = v153;
          v156 = a9;
        }
        *v159 = v154;
        *(_DWORD *)(v156 + 4 * v153) = v155;
        v157 = v153-- + 1;
      }
      while (v157 > 2);
    }
    goto LABEL_191;
  }
  v141 = (a4 > 4) & a4;
  if (a4 > 4)
    ++v141;
  v631 = v141;
  v142 = (uint64_t)*(&dav1d_scans + v633);
  v143 = 4 * v113;
  if (v19 >= 4)
    v144 = 5;
  else
    v144 = v19 + 2;
  bzero(v111, v143 * ((4 * v112) | 2));
  v145 = v625;
  v626 = v142;
  v121 = *(unsigned __int16 *)(v142 + 2 * v625);
  v640 = v144;
  v146 = v121 >> v144;
  v635 = (v143 - 1);
  v147 = (v143 - 1) & v121;
  if (v116 == 2)
  {
    v148 = 56;
    if ((v146 | v147) > 1)
      v148 = 112;
    v149 = (int16x8_t *)((char *)v40 + v148);
    v150 = dav1d_msac_decode_symbol_adapt_c(v646, (int16x8_t *)((char *)v40 + v148), 3uLL);
    if (v150 == 3)
    {
      v151 = dav1d_msac_decode_symbol_adapt_c(v646, v149, 3uLL);
      if (v151 == 3)
      {
        v152 = dav1d_msac_decode_symbol_adapt_c(v646, v149, 3uLL);
        if (v152 == 3)
          v117 = dav1d_msac_decode_symbol_adapt_c(v646, v149, 3uLL) + 12;
        else
          v117 = v152 + 9;
      }
      else
      {
        v117 = v151 + 6;
      }
    }
    else
    {
      v117 = v150 + 3;
    }
    v118 = v117 - 64;
    v145 = v625;
  }
  *(_DWORD *)(a9 + 4 * v121) = v117 << 11;
  v111[v146 * v143 + (unint64_t)v147] = v118;
  if (v145 >= 2)
  {
    v632 = (char *)&dav1d_lo_ctx_offsets + 25 * v631;
    v628 = 2 * v143;
    v629 = v143 | 1;
    v627 = v626 - 2;
    v198 = v145;
    do
    {
      while (1)
      {
        v200 = *(unsigned __int16 *)(v627 + 2 * v198);
        v201 = v200 >> v640;
        v202 = v635 & v200;
        v203 = &v111[(v200 >> v640) * (unint64_t)v143 + (v635 & v200)];
        v204 = v143;
        v205 = v203[v143] + v203[1] + v203[v629];
        v206 = v205 + v203[2] + v203[v628];
        v207 = (v635 & v200) >= 4 ? 4 : v202;
        v208 = v201 >= 4 ? 4 : v200 >> v640;
        v209 = v632[4 * v207 + v207 + v208];
        v210 = v206 <= 0x200 ? (v206 + 64) >> 7 : 4;
        v211 = dav1d_msac_decode_symbol_adapt_c(v646, (int16x8_t *)((char *)v645 + 8 * v210 + 8 * v209), 3uLL);
        if (v211 != 3)
          break;
        v212 = v205 & 0x3F;
        if ((v201 | v202) <= 1)
          v213 = 7;
        else
          v213 = 14;
        if (v212 <= 0xC)
          v214 = (v212 + 1) >> 1;
        else
          v214 = 6;
        v215 = (int16x8_t *)((char *)v642 + 8 * v214 + 8 * v213);
        v216 = dav1d_msac_decode_symbol_adapt_c(v646, v215, 3uLL);
        if (v216 == 3)
        {
          v217 = dav1d_msac_decode_symbol_adapt_c(v646, v215, 3uLL);
          if (v217 == 3)
          {
            v218 = dav1d_msac_decode_symbol_adapt_c(v646, v215, 3uLL);
            if (v218 == 3)
              v219 = dav1d_msac_decode_symbol_adapt_c(v646, v215, 3uLL) + 12;
            else
              v219 = v218 + 9;
          }
          else
          {
            v219 = v217 + 6;
          }
        }
        else
        {
          v219 = v216 + 3;
        }
        v111 = v644;
        v143 = v204;
        *v203 = v219 - 64;
        v220 = v121 | (v219 << 11);
        v121 = v200;
        --v198;
        *(_DWORD *)(a9 + 4 * v200) = v220;
        if ((unint64_t)(v198 + 1) <= 2)
          goto LABEL_227;
      }
      *v203 = 65 * v211;
      v199 = (v121 - 2048) & ((int)(1572673 * v211) >> 9);
      if (v199)
        v121 = v200;
      v111 = v644;
      v143 = v204;
      --v198;
      *(_DWORD *)(a9 + 4 * v200) = v199;
    }
    while ((unint64_t)(v198 + 1) > 2);
  }
LABEL_227:
  v196 = dav1d_msac_decode_symbol_adapt_c(v646, v645, 3uLL);
  if (v196 != 3)
  {
LABEL_237:
    v129 = v196;
    v130 = a9;
    goto LABEL_242;
  }
  v197 = (v111[v143] + *v624 + v111[v143 | 1]) & 0x3F;
LABEL_229:
  if (v197 <= 0xC)
    v221 = (v197 + 1) >> 1;
  else
    v221 = 6;
  v40 = (int16x8_t *)((char *)v642 + 8 * v221);
LABEL_233:
  v222 = dav1d_msac_decode_symbol_adapt_c(v646, v40, 3uLL);
  if (v222 == 3)
  {
    v223 = dav1d_msac_decode_symbol_adapt_c(v646, v40, 3uLL);
    if (v223 == 3)
    {
      v224 = dav1d_msac_decode_symbol_adapt_c(v646, v40, 3uLL);
      if (v224 == 3)
        v129 = dav1d_msac_decode_symbol_adapt_c(v646, v40, 3uLL) + 12;
      else
        v129 = v224 + 9;
    }
    else
    {
      v129 = v223 + 6;
    }
  }
  else
  {
    v129 = v222 + 3;
  }
  v130 = a9;
LABEL_242:
  v131 = v633;
LABEL_243:
  if (*a10 > 8)
  {
    v226 = 0;
    v225 = v637;
  }
  else
  {
    v225 = v637;
    v226 = *(_QWORD *)(v637 + 24 * v131 + 3408);
  }
  v227 = *(_QWORD *)(v13 + 14032) + 12 * *(unsigned __int8 *)(a6 + 4);
  if (v636 <= 2)
    v228 = 2;
  else
    v228 = v636;
  v229 = v228 - 2;
  v230 = ~(-128 << *(_DWORD *)(v225 + 2060));
  if (v129)
    __asm { BR              X9 }
  if (v226)
  {
    v231 = *(unsigned __int16 *)(v227 + 2);
    v232 = *(_QWORD *)(v13 + 13840);
    v233.i64[0] = 0x7F0000007FLL;
    v233.i64[1] = 0x7F0000007FLL;
    while (2)
    {
      v236 = *(unsigned int *)(v13 + 13848);
      v237 = (v236 >> 1) & 0x7FFFFF80 | 4;
      v238 = v237 << 48;
      v239 = v236 - 2 * v237;
      if (v232 >= v237 << 48)
        v240 = v237 << 48;
      else
        v240 = 0;
      if (v232 < v237 << 48)
        v239 = 0;
      v241 = v239 + v237;
      v242 = __clz(v241);
      v243 = v242 ^ 0x10;
      v244 = *(_DWORD *)(v13 + 13852);
      v245 = v244 - (v242 ^ 0x10);
      *(_DWORD *)(v13 + 13852) = v245;
      v246 = ((v232 - v240 + 1) << (v242 ^ 0x10)) - 1;
      *(_QWORD *)(v13 + 13840) = v246;
      v247 = v241 << (v242 ^ 0x10);
      *(_DWORD *)(v13 + 13848) = v247;
      if ((v245 & 0x80000000) == 0)
        goto LABEL_282;
      v248 = *(uint8x16_t **)(v13 + 13824);
      v249 = 40 - v245;
      if ((int)(40 - v245) >= 0)
      {
        v250 = *(_QWORD *)(v13 + 13832);
        if ((unint64_t)v248 < v250)
        {
          if (v249 >= 7)
            v251 = 7;
          else
            v251 = 40 - v245;
          v252 = (v243 - v244 - v251 + 47) >> 3;
          if (~(unint64_t)v248 + v250 < v252)
            v252 = ~(unint64_t)v248 + v250;
          if (v252 >= 0xF)
          {
            v255 = v252 + 1;
            v256 = 0uLL;
            v257 = (int8x16_t)v246;
            v258 = vdupq_n_s32(v249);
            v259 = (v252 + 1) & 0x3FFFFFF0;
            v260 = vaddq_s32(v258, (int32x4_t)xmmword_196889AA0);
            v253 = v249 - 8 * v259;
            v261 = vaddq_s32(v258, (int32x4_t)xmmword_196889AB0);
            v254 = (uint8x16_t *)((char *)v248 + v259);
            v262 = vaddq_s32(v258, (int32x4_t)xmmword_196889AC0);
            v263 = vaddq_s32(v258, (int32x4_t)xmmword_196889AD0);
            v264 = v259;
            v265 = 0uLL;
            v266 = 0uLL;
            v267 = 0uLL;
            v268 = 0uLL;
            v269 = 0uLL;
            v270 = 0uLL;
            do
            {
              v271 = *v248++;
              v272 = vmovl_high_u8(v271);
              v273 = vmovl_high_u16(v272);
              v274.i64[0] = v273.u32[0];
              v274.i64[1] = v273.u32[1];
              v275 = v274;
              v276 = vmovl_u16(*(uint16x4_t *)v272.i8);
              v274.i64[0] = v276.u32[2];
              v274.i64[1] = v276.u32[3];
              v277 = v274;
              v278 = vmovl_u8(*(uint8x8_t *)v271.i8);
              v279 = vmovl_high_u16(v278);
              v274.i64[0] = v279.u32[2];
              v274.i64[1] = v279.u32[3];
              v280 = v274;
              v274.i64[0] = v273.u32[2];
              v274.i64[1] = v273.u32[3];
              v281 = v274;
              v274.i64[0] = v276.u32[0];
              v274.i64[1] = v276.u32[1];
              v282 = v274;
              v274.i64[0] = v279.u32[0];
              v274.i64[1] = v279.u32[1];
              v283 = v274;
              v284 = vmovl_u16(*(uint16x4_t *)v278.i8);
              v274.i64[0] = v284.u32[2];
              v274.i64[1] = v284.u32[3];
              v285 = v274;
              v274.i64[0] = v284.u32[0];
              v274.i64[1] = v284.u32[1];
              v286 = v274;
              v274.i64[0] = v260.u32[0];
              v274.i64[1] = v260.u32[1];
              v287 = v274;
              v274.i64[0] = v261.u32[2];
              v274.i64[1] = v261.u32[3];
              v288 = v274;
              v274.i64[0] = v262.u32[2];
              v274.i64[1] = v262.u32[3];
              v289 = v274;
              v274.i64[0] = v260.u32[2];
              v274.i64[1] = v260.u32[3];
              v290 = v274;
              v274.i64[0] = v261.u32[0];
              v274.i64[1] = v261.u32[1];
              v291 = v274;
              v274.i64[0] = v262.u32[0];
              v274.i64[1] = v262.u32[1];
              v292 = v274;
              v274.i64[0] = v263.u32[2];
              v274.i64[1] = v263.u32[3];
              v293 = v274;
              v274.i64[0] = v263.u32[0];
              v274.i64[1] = v263.u32[1];
              v269 = veorq_s8((int8x16_t)vshlq_u64(v275, v287), v269);
              v268 = veorq_s8((int8x16_t)vshlq_u64(v277, v288), v268);
              v266 = veorq_s8((int8x16_t)vshlq_u64(v280, v289), v266);
              v270 = veorq_s8((int8x16_t)vshlq_u64(v281, v290), v270);
              v267 = veorq_s8((int8x16_t)vshlq_u64(v282, v291), v267);
              v265 = veorq_s8((int8x16_t)vshlq_u64(v283, v292), v265);
              v256 = veorq_s8((int8x16_t)vshlq_u64(v285, v293), v256);
              v257 = veorq_s8((int8x16_t)vshlq_u64(v286, v274), v257);
              v263 = vaddq_s32(v263, v233);
              v262 = vaddq_s32(v262, v233);
              v261 = vaddq_s32(v261, v233);
              v260 = vaddq_s32(v260, v233);
              v264 -= 16;
            }
            while (v264);
            v294 = veorq_s8(veorq_s8(veorq_s8(v257, v267), veorq_s8(v265, v269)), veorq_s8(veorq_s8(v256, v268), veorq_s8(v266, v270)));
            v246 = (unint64_t)veor_s8(*(int8x8_t *)v294.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v294, v294, 8uLL));
            if (v255 != v259)
              goto LABEL_276;
            v295 = v249 - 8 * v259 + 8;
          }
          else
          {
            v253 = 40 - v245;
            v254 = *(uint8x16_t **)(v13 + 13824);
LABEL_276:
            v296 = v253;
            do
            {
              v297 = v254->u8[0];
              v254 = (uint8x16_t *)((char *)v254 + 1);
              v246 ^= (unint64_t)v297 << v296;
              v298 = v296 - 8;
              if (v296 < 8)
                break;
              v296 -= 8;
            }
            while ((unint64_t)v254 < v250);
            v295 = v298 + 8;
          }
          v245 = 48 - v295;
          v248 = v254;
        }
      }
      *(_QWORD *)(v13 + 13840) = v246;
      *(_DWORD *)(v13 + 13852) = v245;
      *(_QWORD *)(v13 + 13824) = v248;
LABEL_282:
      if (v232 >= v238)
        v299 = 0;
      else
        v299 = -1;
      v300 = v121;
      v301 = *(_DWORD *)(v130 + 4 * v121);
      v302 = (*(unsigned __int8 *)(v226 + v121) * v231 + 16) >> 5;
      v303 = v301 >> 11;
      if (v301 >> 11 < 0xF)
      {
        v234 = v302 * v303;
        goto LABEL_254;
      }
      v304 = 0;
      do
      {
        v305 = v304;
        v306 = (v247 >> 1) & 0x7FFFFF80 | 4;
        v307 = v306 << 48;
        v308 = v247 - 2 * v306;
        if (v246 < v306 << 48)
          v309 = 0;
        else
          v309 = v306 << 48;
        if (v246 < v306 << 48)
          v308 = 0;
        v310 = v308 + v306;
        v311 = __clz(v310);
        v312 = v311 ^ 0x10;
        v313 = v245 - (v311 ^ 0x10);
        *(_DWORD *)(v13 + 13852) = v313;
        v314 = ((v246 - v309 + 1) << (v311 ^ 0x10)) - 1;
        *(_QWORD *)(v13 + 13840) = v314;
        v247 = v310 << v312;
        *(_DWORD *)(v13 + 13848) = v247;
        if ((v313 & 0x80000000) == 0)
        {
          v245 -= v312;
          if (v246 < v307)
            break;
          goto LABEL_314;
        }
        v315 = *(uint8x16_t **)(v13 + 13824);
        v316 = 40 - v313;
        if ((int)(40 - v313) >= 0)
        {
          v317 = *(_QWORD *)(v13 + 13832);
          if ((unint64_t)v315 < v317)
          {
            if (v316 >= 7)
              v318 = 7;
            else
              v318 = 40 - v313;
            v319 = (v312 - v245 - v318 + 47) >> 3;
            if (~(unint64_t)v315 + v317 < v319)
              v319 = ~(unint64_t)v315 + v317;
            if (v319 >= 0xF)
            {
              v322 = v319 + 1;
              v323 = 0uLL;
              v324 = (int8x16_t)v314;
              v325 = vdupq_n_s32(v316);
              v326 = (v319 + 1) & 0x3FFFFFF0;
              v327 = vaddq_s32(v325, (int32x4_t)xmmword_196889AA0);
              v320 = v316 - 8 * v326;
              v328 = vaddq_s32(v325, (int32x4_t)xmmword_196889AB0);
              v321 = (uint8x16_t *)((char *)v315 + v326);
              v329 = vaddq_s32(v325, (int32x4_t)xmmword_196889AC0);
              v330 = vaddq_s32(v325, (int32x4_t)xmmword_196889AD0);
              v331 = v326;
              v332 = 0uLL;
              v333 = 0uLL;
              v334 = 0uLL;
              v335 = 0uLL;
              v336 = 0uLL;
              v337 = 0uLL;
              do
              {
                v338 = *v315++;
                v339 = vmovl_high_u8(v338);
                v340 = vmovl_high_u16(v339);
                v341.i64[0] = v340.u32[0];
                v341.i64[1] = v340.u32[1];
                v342 = v341;
                v343 = vmovl_u16(*(uint16x4_t *)v339.i8);
                v341.i64[0] = v343.u32[2];
                v341.i64[1] = v343.u32[3];
                v344 = v341;
                v345 = vmovl_u8(*(uint8x8_t *)v338.i8);
                v346 = vmovl_high_u16(v345);
                v341.i64[0] = v346.u32[2];
                v341.i64[1] = v346.u32[3];
                v347 = v341;
                v341.i64[0] = v340.u32[2];
                v341.i64[1] = v340.u32[3];
                v348 = v341;
                v341.i64[0] = v343.u32[0];
                v341.i64[1] = v343.u32[1];
                v349 = v341;
                v341.i64[0] = v346.u32[0];
                v341.i64[1] = v346.u32[1];
                v350 = v341;
                v351 = vmovl_u16(*(uint16x4_t *)v345.i8);
                v341.i64[0] = v351.u32[2];
                v341.i64[1] = v351.u32[3];
                v352 = v341;
                v341.i64[0] = v351.u32[0];
                v341.i64[1] = v351.u32[1];
                v353 = v341;
                v341.i64[0] = v327.u32[0];
                v341.i64[1] = v327.u32[1];
                v354 = v341;
                v341.i64[0] = v328.u32[2];
                v341.i64[1] = v328.u32[3];
                v355 = v341;
                v341.i64[0] = v329.u32[2];
                v341.i64[1] = v329.u32[3];
                v356 = v341;
                v341.i64[0] = v327.u32[2];
                v341.i64[1] = v327.u32[3];
                v357 = v341;
                v341.i64[0] = v328.u32[0];
                v341.i64[1] = v328.u32[1];
                v358 = v341;
                v341.i64[0] = v329.u32[0];
                v341.i64[1] = v329.u32[1];
                v359 = v341;
                v341.i64[0] = v330.u32[2];
                v341.i64[1] = v330.u32[3];
                v360 = v341;
                v341.i64[0] = v330.u32[0];
                v341.i64[1] = v330.u32[1];
                v336 = veorq_s8((int8x16_t)vshlq_u64(v342, v354), v336);
                v335 = veorq_s8((int8x16_t)vshlq_u64(v344, v355), v335);
                v333 = veorq_s8((int8x16_t)vshlq_u64(v347, v356), v333);
                v337 = veorq_s8((int8x16_t)vshlq_u64(v348, v357), v337);
                v334 = veorq_s8((int8x16_t)vshlq_u64(v349, v358), v334);
                v332 = veorq_s8((int8x16_t)vshlq_u64(v350, v359), v332);
                v323 = veorq_s8((int8x16_t)vshlq_u64(v352, v360), v323);
                v324 = veorq_s8((int8x16_t)vshlq_u64(v353, v341), v324);
                v330 = vaddq_s32(v330, v233);
                v329 = vaddq_s32(v329, v233);
                v328 = vaddq_s32(v328, v233);
                v327 = vaddq_s32(v327, v233);
                v331 -= 16;
              }
              while (v331);
              v361 = veorq_s8(veorq_s8(veorq_s8(v324, v334), veorq_s8(v332, v336)), veorq_s8(veorq_s8(v323, v335), veorq_s8(v333, v337)));
              v314 = (unint64_t)veor_s8(*(int8x8_t *)v361.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v361, v361, 8uLL));
              if (v322 != v326)
                goto LABEL_308;
              v362 = v316 - 8 * v326 + 8;
            }
            else
            {
              v320 = 40 - v313;
              v321 = *(uint8x16_t **)(v13 + 13824);
LABEL_308:
              v363 = v320;
              do
              {
                v364 = v321->u8[0];
                v321 = (uint8x16_t *)((char *)v321 + 1);
                v314 ^= (unint64_t)v364 << v363;
                v365 = v363 - 8;
                if (v363 < 8)
                  break;
                v363 -= 8;
              }
              while ((unint64_t)v321 < v317);
              v362 = v365 + 8;
            }
            v313 = 48 - v362;
            v315 = v321;
          }
        }
        *(_QWORD *)(v13 + 13840) = v314;
        *(_DWORD *)(v13 + 13852) = v313;
        v245 = v313;
        *(_QWORD *)(v13 + 13824) = v315;
        if (v246 < v307)
          break;
LABEL_314:
        v304 = v305 + 1;
        v246 = v314;
      }
      while (v305 < 0x20);
      if (v305)
      {
        v366 = 1;
        while (2)
        {
          v370 = (v247 >> 1) & 0x7FFFFF80 | 4;
          v371 = v370 << 48;
          v372 = v247 - 2 * v370;
          if (v314 >= v370 << 48)
            v373 = v370 << 48;
          else
            v373 = 0;
          if (v314 < v370 << 48)
            v372 = 0;
          v374 = v372 + v370;
          v375 = __clz(v374);
          v376 = v375 ^ 0x10;
          v368 = v245 - (v375 ^ 0x10);
          *(_DWORD *)(v13 + 13852) = v368;
          v377 = ((v314 - v373 + 1) << (v375 ^ 0x10)) - 1;
          *(_QWORD *)(v13 + 13840) = v377;
          v247 = v374 << (v375 ^ 0x10);
          *(_DWORD *)(v13 + 13848) = v247;
          if ((v368 & 0x80000000) == 0)
            goto LABEL_320;
          v369 = *(uint8x16_t **)(v13 + 13824);
          v378 = 40 - v368;
          if ((int)(40 - v368) >= 0)
          {
            v379 = *(_QWORD *)(v13 + 13832);
            if ((unint64_t)v369 < v379)
            {
              if (v378 >= 7)
                v380 = 7;
              else
                v380 = 40 - v368;
              v381 = (v376 - v245 - v380 + 47) >> 3;
              if (~(unint64_t)v369 + v379 < v381)
                v381 = ~(unint64_t)v369 + v379;
              if (v381 >= 0xF)
              {
                v384 = v381 + 1;
                v385 = 0uLL;
                v386 = (int8x16_t)(unint64_t)v377;
                v387 = vdupq_n_s32(v378);
                v388 = (v381 + 1) & 0x3FFFFFF0;
                v389 = vaddq_s32(v387, (int32x4_t)xmmword_196889AA0);
                v382 = v378 - 8 * v388;
                v390 = vaddq_s32(v387, (int32x4_t)xmmword_196889AB0);
                v383 = (uint8x16_t *)((char *)v369 + v388);
                v391 = vaddq_s32(v387, (int32x4_t)xmmword_196889AC0);
                v392 = vaddq_s32(v387, (int32x4_t)xmmword_196889AD0);
                v393 = v388;
                v394 = 0uLL;
                v395 = 0uLL;
                v396 = 0uLL;
                v397 = 0uLL;
                v398 = 0uLL;
                v399 = 0uLL;
                do
                {
                  v400 = *v369++;
                  v401 = vmovl_high_u8(v400);
                  v402 = vmovl_high_u16(v401);
                  v403.i64[0] = v402.u32[0];
                  v403.i64[1] = v402.u32[1];
                  v404 = v403;
                  v405 = vmovl_u16(*(uint16x4_t *)v401.i8);
                  v403.i64[0] = v405.u32[2];
                  v403.i64[1] = v405.u32[3];
                  v406 = v403;
                  v407 = vmovl_u8(*(uint8x8_t *)v400.i8);
                  v408 = vmovl_high_u16(v407);
                  v403.i64[0] = v408.u32[2];
                  v403.i64[1] = v408.u32[3];
                  v409 = v403;
                  v403.i64[0] = v402.u32[2];
                  v403.i64[1] = v402.u32[3];
                  v410 = v403;
                  v403.i64[0] = v405.u32[0];
                  v403.i64[1] = v405.u32[1];
                  v411 = v403;
                  v403.i64[0] = v408.u32[0];
                  v403.i64[1] = v408.u32[1];
                  v412 = v403;
                  v413 = vmovl_u16(*(uint16x4_t *)v407.i8);
                  v403.i64[0] = v413.u32[2];
                  v403.i64[1] = v413.u32[3];
                  v414 = v403;
                  v403.i64[0] = v413.u32[0];
                  v403.i64[1] = v413.u32[1];
                  v415 = v403;
                  v403.i64[0] = v389.u32[0];
                  v403.i64[1] = v389.u32[1];
                  v416 = v403;
                  v403.i64[0] = v390.u32[2];
                  v403.i64[1] = v390.u32[3];
                  v417 = v403;
                  v403.i64[0] = v391.u32[2];
                  v403.i64[1] = v391.u32[3];
                  v418 = v403;
                  v403.i64[0] = v389.u32[2];
                  v403.i64[1] = v389.u32[3];
                  v419 = v403;
                  v403.i64[0] = v390.u32[0];
                  v403.i64[1] = v390.u32[1];
                  v420 = v403;
                  v403.i64[0] = v391.u32[0];
                  v403.i64[1] = v391.u32[1];
                  v421 = v403;
                  v403.i64[0] = v392.u32[2];
                  v403.i64[1] = v392.u32[3];
                  v422 = v403;
                  v403.i64[0] = v392.u32[0];
                  v403.i64[1] = v392.u32[1];
                  v398 = veorq_s8((int8x16_t)vshlq_u64(v404, v416), v398);
                  v397 = veorq_s8((int8x16_t)vshlq_u64(v406, v417), v397);
                  v395 = veorq_s8((int8x16_t)vshlq_u64(v409, v418), v395);
                  v399 = veorq_s8((int8x16_t)vshlq_u64(v410, v419), v399);
                  v396 = veorq_s8((int8x16_t)vshlq_u64(v411, v420), v396);
                  v394 = veorq_s8((int8x16_t)vshlq_u64(v412, v421), v394);
                  v385 = veorq_s8((int8x16_t)vshlq_u64(v414, v422), v385);
                  v386 = veorq_s8((int8x16_t)vshlq_u64(v415, v403), v386);
                  v392 = vaddq_s32(v392, v233);
                  v391 = vaddq_s32(v391, v233);
                  v390 = vaddq_s32(v390, v233);
                  v389 = vaddq_s32(v389, v233);
                  v393 -= 16;
                }
                while (v393);
                v423 = veorq_s8(veorq_s8(veorq_s8(v386, v396), veorq_s8(v394, v398)), veorq_s8(veorq_s8(v385, v397), veorq_s8(v395, v399)));
                v377 = (uint64_t)veor_s8(*(int8x8_t *)v423.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v423, v423, 8uLL));
                if (v384 != v388)
                  goto LABEL_340;
                v367 = v378 - 8 * v388 + 8;
              }
              else
              {
                v382 = 40 - v368;
                v383 = *(uint8x16_t **)(v13 + 13824);
LABEL_340:
                v424 = v382;
                do
                {
                  v425 = v383->u8[0];
                  v383 = (uint8x16_t *)((char *)v383 + 1);
                  v377 ^= (unint64_t)v425 << v424;
                  v426 = v424 - 8;
                  if (v424 < 8)
                    break;
                  v424 -= 8;
                }
                while ((unint64_t)v383 < v379);
                v367 = v426 + 8;
              }
              v368 = 48 - v367;
              v369 = v383;
            }
          }
          *(_QWORD *)(v13 + 13840) = v377;
          *(_DWORD *)(v13 + 13852) = v368;
          *(_QWORD *)(v13 + 13824) = v369;
LABEL_320:
          v366 = (2 * v366) | (v314 < v371);
          v245 = v368;
          v314 = v377;
          if (!--v305)
          {
            v427 = v366 - 1;
            v314 = v377;
            goto LABEL_346;
          }
          continue;
        }
      }
      v427 = 0;
LABEL_346:
      v303 = (v427 + 15) & 0xFFFFF;
      v234 = (v303 * v302) & 0xFFFFFF;
      v246 = v314;
LABEL_254:
      v129 += v303;
      v235 = (v234 >> v229) + v299;
      if (v235 >= v230)
        v235 = v230;
      *(_DWORD *)(v130 + 4 * v300) = v235 ^ v299;
      v232 = v246;
      v121 = v301 & 0x3FF;
      if ((v301 & 0x3FF) == 0)
        goto LABEL_442;
      continue;
    }
  }
  v428 = *(unsigned __int16 *)(v227 + 2);
  v429 = *(_QWORD *)(v13 + 13840);
  v430.i64[0] = 0x7F0000007FLL;
  v430.i64[1] = 0x7F0000007FLL;
  while (2)
  {
    v432 = *(unsigned int *)(v13 + 13848);
    v433 = (v432 >> 1) & 0x7FFFFF80 | 4;
    v434 = v433 << 48;
    v435 = v432 - 2 * v433;
    if (v429 >= v433 << 48)
      v436 = v433 << 48;
    else
      v436 = 0;
    if (v429 < v433 << 48)
      v435 = 0;
    v437 = v435 + v433;
    v438 = __clz(v437);
    v439 = v438 ^ 0x10;
    v440 = *(_DWORD *)(v13 + 13852);
    v441 = v440 - (v438 ^ 0x10);
    *(_DWORD *)(v13 + 13852) = v441;
    v442 = ((v429 - v436 + 1) << (v438 ^ 0x10)) - 1;
    *(_QWORD *)(v13 + 13840) = v442;
    v443 = v437 << (v438 ^ 0x10);
    *(_DWORD *)(v13 + 13848) = v443;
    if ((v441 & 0x80000000) != 0)
    {
      v444 = *(uint8x16_t **)(v13 + 13824);
      v445 = 40 - v441;
      if ((int)(40 - v441) >= 0)
      {
        v446 = *(_QWORD *)(v13 + 13832);
        if ((unint64_t)v444 < v446)
        {
          if (v445 >= 7)
            v447 = 7;
          else
            v447 = 40 - v441;
          v448 = (v439 - v440 - v447 + 47) >> 3;
          if (~(unint64_t)v444 + v446 < v448)
            v448 = ~(unint64_t)v444 + v446;
          if (v448 >= 0xF)
          {
            v451 = v448 + 1;
            v452 = 0uLL;
            v453 = (int8x16_t)v442;
            v454 = vdupq_n_s32(v445);
            v455 = (v448 + 1) & 0x3FFFFFF0;
            v456 = vaddq_s32(v454, (int32x4_t)xmmword_196889AA0);
            v449 = v445 - 8 * v455;
            v457 = vaddq_s32(v454, (int32x4_t)xmmword_196889AB0);
            v450 = (uint8x16_t *)((char *)v444 + v455);
            v458 = vaddq_s32(v454, (int32x4_t)xmmword_196889AC0);
            v459 = vaddq_s32(v454, (int32x4_t)xmmword_196889AD0);
            v460 = v455;
            v461 = 0uLL;
            v462 = 0uLL;
            v463 = 0uLL;
            v464 = 0uLL;
            v465 = 0uLL;
            v466 = 0uLL;
            do
            {
              v467 = *v444++;
              v468 = vmovl_high_u8(v467);
              v469 = vmovl_high_u16(v468);
              v470.i64[0] = v469.u32[0];
              v470.i64[1] = v469.u32[1];
              v471 = v470;
              v472 = vmovl_u16(*(uint16x4_t *)v468.i8);
              v470.i64[0] = v472.u32[2];
              v470.i64[1] = v472.u32[3];
              v473 = v470;
              v474 = vmovl_u8(*(uint8x8_t *)v467.i8);
              v475 = vmovl_high_u16(v474);
              v470.i64[0] = v475.u32[2];
              v470.i64[1] = v475.u32[3];
              v476 = v470;
              v470.i64[0] = v469.u32[2];
              v470.i64[1] = v469.u32[3];
              v477 = v470;
              v470.i64[0] = v472.u32[0];
              v470.i64[1] = v472.u32[1];
              v478 = v470;
              v470.i64[0] = v475.u32[0];
              v470.i64[1] = v475.u32[1];
              v479 = v470;
              v480 = vmovl_u16(*(uint16x4_t *)v474.i8);
              v470.i64[0] = v480.u32[2];
              v470.i64[1] = v480.u32[3];
              v481 = v470;
              v470.i64[0] = v480.u32[0];
              v470.i64[1] = v480.u32[1];
              v482 = v470;
              v470.i64[0] = v456.u32[0];
              v470.i64[1] = v456.u32[1];
              v483 = v470;
              v470.i64[0] = v457.u32[2];
              v470.i64[1] = v457.u32[3];
              v484 = v470;
              v470.i64[0] = v458.u32[2];
              v470.i64[1] = v458.u32[3];
              v485 = v470;
              v470.i64[0] = v456.u32[2];
              v470.i64[1] = v456.u32[3];
              v486 = v470;
              v470.i64[0] = v457.u32[0];
              v470.i64[1] = v457.u32[1];
              v487 = v470;
              v470.i64[0] = v458.u32[0];
              v470.i64[1] = v458.u32[1];
              v488 = v470;
              v470.i64[0] = v459.u32[2];
              v470.i64[1] = v459.u32[3];
              v489 = v470;
              v470.i64[0] = v459.u32[0];
              v470.i64[1] = v459.u32[1];
              v465 = veorq_s8((int8x16_t)vshlq_u64(v471, v483), v465);
              v464 = veorq_s8((int8x16_t)vshlq_u64(v473, v484), v464);
              v462 = veorq_s8((int8x16_t)vshlq_u64(v476, v485), v462);
              v466 = veorq_s8((int8x16_t)vshlq_u64(v477, v486), v466);
              v463 = veorq_s8((int8x16_t)vshlq_u64(v478, v487), v463);
              v461 = veorq_s8((int8x16_t)vshlq_u64(v479, v488), v461);
              v452 = veorq_s8((int8x16_t)vshlq_u64(v481, v489), v452);
              v453 = veorq_s8((int8x16_t)vshlq_u64(v482, v470), v453);
              v459 = vaddq_s32(v459, v430);
              v458 = vaddq_s32(v458, v430);
              v457 = vaddq_s32(v457, v430);
              v456 = vaddq_s32(v456, v430);
              v460 -= 16;
            }
            while (v460);
            v490 = veorq_s8(veorq_s8(veorq_s8(v453, v463), veorq_s8(v461, v465)), veorq_s8(veorq_s8(v452, v464), veorq_s8(v462, v466)));
            v442 = (unint64_t)veor_s8(*(int8x8_t *)v490.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v490, v490, 8uLL));
            if (v451 != v455)
              goto LABEL_369;
            v491 = v445 - 8 * v455 + 8;
          }
          else
          {
            v449 = 40 - v441;
            v450 = *(uint8x16_t **)(v13 + 13824);
LABEL_369:
            v492 = v449;
            do
            {
              v493 = v450->u8[0];
              v450 = (uint8x16_t *)((char *)v450 + 1);
              v442 ^= (unint64_t)v493 << v492;
              v494 = v492 - 8;
              if (v492 < 8)
                break;
              v492 -= 8;
            }
            while ((unint64_t)v450 < v446);
            v491 = v494 + 8;
          }
          v441 = 48 - v491;
          v444 = v450;
        }
      }
      *(_QWORD *)(v13 + 13840) = v442;
      *(_DWORD *)(v13 + 13852) = v441;
      *(_QWORD *)(v13 + 13824) = v444;
    }
    v495 = v429 < v434;
    if (v429 >= v434)
      v496 = 0;
    else
      v496 = -1;
    v497 = *(_DWORD *)(v130 + 4 * v121);
    v498 = v497 >> 11;
    if (v497 >> 11 < 0xF)
    {
      v431 = ((v498 * v428) >> v229) - v495;
      goto LABEL_349;
    }
    v499 = 0;
    while (2)
    {
      v500 = v499;
      v501 = (v443 >> 1) & 0x7FFFFF80 | 4;
      v502 = v501 << 48;
      v503 = v443 - 2 * v501;
      if (v442 < v501 << 48)
        v504 = 0;
      else
        v504 = v501 << 48;
      if (v442 < v501 << 48)
        v503 = 0;
      v505 = v503 + v501;
      v506 = __clz(v505);
      v507 = v506 ^ 0x10;
      v508 = v441 - (v506 ^ 0x10);
      *(_DWORD *)(v13 + 13852) = v508;
      v509 = ((v442 - v504 + 1) << (v506 ^ 0x10)) - 1;
      *(_QWORD *)(v13 + 13840) = v509;
      v443 = v505 << v507;
      *(_DWORD *)(v13 + 13848) = v443;
      if ((v508 & 0x80000000) == 0)
      {
        v441 -= v507;
        if (v442 < v502)
          break;
        goto LABEL_407;
      }
      v510 = *(uint8x16_t **)(v13 + 13824);
      v511 = 40 - v508;
      if ((int)(40 - v508) >= 0)
      {
        v512 = *(_QWORD *)(v13 + 13832);
        if ((unint64_t)v510 < v512)
        {
          if (v511 >= 7)
            v513 = 7;
          else
            v513 = 40 - v508;
          v514 = (v507 - v441 - v513 + 47) >> 3;
          if (~(unint64_t)v510 + v512 < v514)
            v514 = ~(unint64_t)v510 + v512;
          if (v514 >= 0xF)
          {
            v517 = v514 + 1;
            v518 = 0uLL;
            v519 = (int8x16_t)v509;
            v520 = vdupq_n_s32(v511);
            v521 = (v514 + 1) & 0x3FFFFFF0;
            v522 = vaddq_s32(v520, (int32x4_t)xmmword_196889AA0);
            v515 = v511 - 8 * v521;
            v523 = vaddq_s32(v520, (int32x4_t)xmmword_196889AB0);
            v516 = (uint8x16_t *)((char *)v510 + v521);
            v524 = vaddq_s32(v520, (int32x4_t)xmmword_196889AC0);
            v525 = vaddq_s32(v520, (int32x4_t)xmmword_196889AD0);
            v526 = v521;
            v527 = 0uLL;
            v528 = 0uLL;
            v529 = 0uLL;
            v530 = 0uLL;
            v531 = 0uLL;
            v532 = 0uLL;
            do
            {
              v533 = *v510++;
              v534 = vmovl_high_u8(v533);
              v535 = vmovl_high_u16(v534);
              v536.i64[0] = v535.u32[0];
              v536.i64[1] = v535.u32[1];
              v537 = v536;
              v538 = vmovl_u16(*(uint16x4_t *)v534.i8);
              v536.i64[0] = v538.u32[2];
              v536.i64[1] = v538.u32[3];
              v539 = v536;
              v540 = vmovl_u8(*(uint8x8_t *)v533.i8);
              v541 = vmovl_high_u16(v540);
              v536.i64[0] = v541.u32[2];
              v536.i64[1] = v541.u32[3];
              v542 = v536;
              v536.i64[0] = v535.u32[2];
              v536.i64[1] = v535.u32[3];
              v543 = v536;
              v536.i64[0] = v538.u32[0];
              v536.i64[1] = v538.u32[1];
              v544 = v536;
              v536.i64[0] = v541.u32[0];
              v536.i64[1] = v541.u32[1];
              v545 = v536;
              v546 = vmovl_u16(*(uint16x4_t *)v540.i8);
              v536.i64[0] = v546.u32[2];
              v536.i64[1] = v546.u32[3];
              v547 = v536;
              v536.i64[0] = v546.u32[0];
              v536.i64[1] = v546.u32[1];
              v548 = v536;
              v536.i64[0] = v522.u32[0];
              v536.i64[1] = v522.u32[1];
              v549 = v536;
              v536.i64[0] = v523.u32[2];
              v536.i64[1] = v523.u32[3];
              v550 = v536;
              v536.i64[0] = v524.u32[2];
              v536.i64[1] = v524.u32[3];
              v551 = v536;
              v536.i64[0] = v522.u32[2];
              v536.i64[1] = v522.u32[3];
              v552 = v536;
              v536.i64[0] = v523.u32[0];
              v536.i64[1] = v523.u32[1];
              v553 = v536;
              v536.i64[0] = v524.u32[0];
              v536.i64[1] = v524.u32[1];
              v554 = v536;
              v536.i64[0] = v525.u32[2];
              v536.i64[1] = v525.u32[3];
              v555 = v536;
              v536.i64[0] = v525.u32[0];
              v536.i64[1] = v525.u32[1];
              v531 = veorq_s8((int8x16_t)vshlq_u64(v537, v549), v531);
              v530 = veorq_s8((int8x16_t)vshlq_u64(v539, v550), v530);
              v528 = veorq_s8((int8x16_t)vshlq_u64(v542, v551), v528);
              v532 = veorq_s8((int8x16_t)vshlq_u64(v543, v552), v532);
              v529 = veorq_s8((int8x16_t)vshlq_u64(v544, v553), v529);
              v527 = veorq_s8((int8x16_t)vshlq_u64(v545, v554), v527);
              v518 = veorq_s8((int8x16_t)vshlq_u64(v547, v555), v518);
              v519 = veorq_s8((int8x16_t)vshlq_u64(v548, v536), v519);
              v525 = vaddq_s32(v525, v430);
              v524 = vaddq_s32(v524, v430);
              v523 = vaddq_s32(v523, v430);
              v522 = vaddq_s32(v522, v430);
              v526 -= 16;
            }
            while (v526);
            v556 = veorq_s8(veorq_s8(veorq_s8(v519, v529), veorq_s8(v527, v531)), veorq_s8(veorq_s8(v518, v530), veorq_s8(v528, v532)));
            v509 = (unint64_t)veor_s8(*(int8x8_t *)v556.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v556, v556, 8uLL));
            if (v517 != v521)
              goto LABEL_401;
            v557 = v511 - 8 * v521 + 8;
          }
          else
          {
            v515 = 40 - v508;
            v516 = *(uint8x16_t **)(v13 + 13824);
LABEL_401:
            v558 = v515;
            do
            {
              v559 = v516->u8[0];
              v516 = (uint8x16_t *)((char *)v516 + 1);
              v509 ^= (unint64_t)v559 << v558;
              v560 = v558 - 8;
              if (v558 < 8)
                break;
              v558 -= 8;
            }
            while ((unint64_t)v516 < v512);
            v557 = v560 + 8;
          }
          v508 = 48 - v557;
          v510 = v516;
        }
      }
      *(_QWORD *)(v13 + 13840) = v509;
      *(_DWORD *)(v13 + 13852) = v508;
      v441 = v508;
      *(_QWORD *)(v13 + 13824) = v510;
      if (v442 < v502)
        break;
LABEL_407:
      v499 = v500 + 1;
      v442 = v509;
      if (v500 < 0x20)
        continue;
      break;
    }
    if (v500)
    {
      v561 = 1;
      while (2)
      {
        v565 = (v443 >> 1) & 0x7FFFFF80 | 4;
        v566 = v565 << 48;
        v567 = v443 - 2 * v565;
        if (v509 >= v565 << 48)
          v568 = v565 << 48;
        else
          v568 = 0;
        if (v509 < v565 << 48)
          v567 = 0;
        v569 = v567 + v565;
        v570 = __clz(v569);
        v571 = v570 ^ 0x10;
        v563 = v441 - (v570 ^ 0x10);
        *(_DWORD *)(v13 + 13852) = v563;
        v572 = ((v509 - v568 + 1) << (v570 ^ 0x10)) - 1;
        *(_QWORD *)(v13 + 13840) = v572;
        v443 = v569 << (v570 ^ 0x10);
        *(_DWORD *)(v13 + 13848) = v443;
        if ((v563 & 0x80000000) == 0)
          goto LABEL_413;
        v564 = *(uint8x16_t **)(v13 + 13824);
        v573 = 40 - v563;
        if ((int)(40 - v563) >= 0)
        {
          v574 = *(_QWORD *)(v13 + 13832);
          if ((unint64_t)v564 < v574)
          {
            if (v573 >= 7)
              v575 = 7;
            else
              v575 = 40 - v563;
            v576 = (v571 - v441 - v575 + 47) >> 3;
            if (~(unint64_t)v564 + v574 < v576)
              v576 = ~(unint64_t)v564 + v574;
            if (v576 >= 0xF)
            {
              v579 = v576 + 1;
              v580 = 0uLL;
              v581 = (int8x16_t)(unint64_t)v572;
              v582 = vdupq_n_s32(v573);
              v583 = (v576 + 1) & 0x3FFFFFF0;
              v584 = vaddq_s32(v582, (int32x4_t)xmmword_196889AA0);
              v577 = v573 - 8 * v583;
              v585 = vaddq_s32(v582, (int32x4_t)xmmword_196889AB0);
              v578 = (uint8x16_t *)((char *)v564 + v583);
              v586 = vaddq_s32(v582, (int32x4_t)xmmword_196889AC0);
              v587 = vaddq_s32(v582, (int32x4_t)xmmword_196889AD0);
              v588 = v583;
              v589 = 0uLL;
              v590 = 0uLL;
              v591 = 0uLL;
              v592 = 0uLL;
              v593 = 0uLL;
              v594 = 0uLL;
              do
              {
                v595 = *v564++;
                v596 = vmovl_high_u8(v595);
                v597 = vmovl_high_u16(v596);
                v598.i64[0] = v597.u32[0];
                v598.i64[1] = v597.u32[1];
                v599 = v598;
                v600 = vmovl_u16(*(uint16x4_t *)v596.i8);
                v598.i64[0] = v600.u32[2];
                v598.i64[1] = v600.u32[3];
                v601 = v598;
                v602 = vmovl_u8(*(uint8x8_t *)v595.i8);
                v603 = vmovl_high_u16(v602);
                v598.i64[0] = v603.u32[2];
                v598.i64[1] = v603.u32[3];
                v604 = v598;
                v598.i64[0] = v597.u32[2];
                v598.i64[1] = v597.u32[3];
                v605 = v598;
                v598.i64[0] = v600.u32[0];
                v598.i64[1] = v600.u32[1];
                v606 = v598;
                v598.i64[0] = v603.u32[0];
                v598.i64[1] = v603.u32[1];
                v607 = v598;
                v608 = vmovl_u16(*(uint16x4_t *)v602.i8);
                v598.i64[0] = v608.u32[2];
                v598.i64[1] = v608.u32[3];
                v609 = v598;
                v598.i64[0] = v608.u32[0];
                v598.i64[1] = v608.u32[1];
                v610 = v598;
                v598.i64[0] = v584.u32[0];
                v598.i64[1] = v584.u32[1];
                v611 = v598;
                v598.i64[0] = v585.u32[2];
                v598.i64[1] = v585.u32[3];
                v612 = v598;
                v598.i64[0] = v586.u32[2];
                v598.i64[1] = v586.u32[3];
                v613 = v598;
                v598.i64[0] = v584.u32[2];
                v598.i64[1] = v584.u32[3];
                v614 = v598;
                v598.i64[0] = v585.u32[0];
                v598.i64[1] = v585.u32[1];
                v615 = v598;
                v598.i64[0] = v586.u32[0];
                v598.i64[1] = v586.u32[1];
                v616 = v598;
                v598.i64[0] = v587.u32[2];
                v598.i64[1] = v587.u32[3];
                v617 = v598;
                v598.i64[0] = v587.u32[0];
                v598.i64[1] = v587.u32[1];
                v593 = veorq_s8((int8x16_t)vshlq_u64(v599, v611), v593);
                v592 = veorq_s8((int8x16_t)vshlq_u64(v601, v612), v592);
                v590 = veorq_s8((int8x16_t)vshlq_u64(v604, v613), v590);
                v594 = veorq_s8((int8x16_t)vshlq_u64(v605, v614), v594);
                v591 = veorq_s8((int8x16_t)vshlq_u64(v606, v615), v591);
                v589 = veorq_s8((int8x16_t)vshlq_u64(v607, v616), v589);
                v580 = veorq_s8((int8x16_t)vshlq_u64(v609, v617), v580);
                v581 = veorq_s8((int8x16_t)vshlq_u64(v610, v598), v581);
                v587 = vaddq_s32(v587, v430);
                v586 = vaddq_s32(v586, v430);
                v585 = vaddq_s32(v585, v430);
                v584 = vaddq_s32(v584, v430);
                v588 -= 16;
              }
              while (v588);
              v618 = veorq_s8(veorq_s8(veorq_s8(v581, v591), veorq_s8(v589, v593)), veorq_s8(veorq_s8(v580, v592), veorq_s8(v590, v594)));
              v572 = (uint64_t)veor_s8(*(int8x8_t *)v618.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v618, v618, 8uLL));
              if (v579 != v583)
                goto LABEL_433;
              v562 = v573 - 8 * v583 + 8;
            }
            else
            {
              v577 = 40 - v563;
              v578 = *(uint8x16_t **)(v13 + 13824);
LABEL_433:
              v619 = v577;
              do
              {
                v620 = v578->u8[0];
                v578 = (uint8x16_t *)((char *)v578 + 1);
                v572 ^= (unint64_t)v620 << v619;
                v621 = v619 - 8;
                if (v619 < 8)
                  break;
                v619 -= 8;
              }
              while ((unint64_t)v578 < v574);
              v562 = v621 + 8;
            }
            v563 = 48 - v562;
            v564 = v578;
          }
        }
        *(_QWORD *)(v13 + 13840) = v572;
        *(_DWORD *)(v13 + 13852) = v563;
        *(_QWORD *)(v13 + 13824) = v564;
LABEL_413:
        v561 = (2 * v561) | (v509 < v566);
        v441 = v563;
        v509 = v572;
        if (!--v500)
        {
          v622 = v561 - 1;
          v509 = v572;
          goto LABEL_439;
        }
        continue;
      }
    }
    v622 = 0;
LABEL_439:
    v498 = (v622 + 15) & 0xFFFFF;
    v431 = (((v498 * v428) & 0xFFFFFF) >> v229) - v495;
    if (v431 >= v230)
      v431 = v230;
    v442 = v509;
LABEL_349:
    v129 += v498;
    *(_DWORD *)(v130 + 4 * v121) = v431 ^ v496;
    v429 = v442;
    v121 = v497 & 0x3FF;
    if ((v497 & 0x3FF) != 0)
      continue;
    break;
  }
LABEL_442:
  if (v129 >= 0x3F)
    v623 = 63;
  else
    v623 = v129;
  *a11 = v623 | 0x40;
  return v625;
}

uint64_t dav1d_recon_b_intra_16bpc(uint64_t a1, int a2, int a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  uint64_t result;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v22;
  int v23;
  _BYTE *v24;
  int v25;
  unsigned int v26;
  char *v27;
  char *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  _BYTE *v32;
  int64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  _BOOL4 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v46;
  int v48;
  int v49;
  int v50;
  int v51;
  char v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  _BYTE *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  BOOL v68;
  char v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  unsigned int v74;
  _DWORD *v75;
  int v76;
  unsigned int v77;
  __int16 *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unsigned __int8 *v88;
  _DWORD *v89;
  signed int v90;
  unint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  _DWORD *v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  void (*v103)(uint64_t, uint64_t, _WORD *, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  int v111;
  int v112;
  int v116;
  signed int v117;
  signed int v118;
  uint64_t v119;
  int v120;
  char v121;
  int v122;
  uint64_t v123;
  signed int v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  unsigned int v134;
  int v135;
  BOOL v136;
  int v137;
  char v138;
  int v139;
  uint64_t v140;
  int v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  unsigned int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  int v170;
  uint64_t v171;
  signed int v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  unsigned __int8 *v176;
  _BOOL4 v177;
  char v178;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  _BYTE *v185;
  unsigned int v186;
  unint64_t v187;
  int v188;
  unint64_t v189;
  char v190;
  uint64_t v191;
  unsigned int v192;
  int v193;
  uint64_t v194;
  unsigned __int8 *v195;
  unsigned int v196;
  unsigned int v197;
  _QWORD *v198;
  unsigned int v199;
  unint64_t v200;
  signed int v201;
  _QWORD *v202;
  _QWORD *v203;
  unsigned __int8 *v204;
  unsigned int v205;
  uint64_t v207;
  uint64_t v208;
  int v209;
  int v210;
  unsigned __int8 *v211;
  uint64_t v212;
  int v213;
  _WORD *v214;
  char v215;
  BOOL v216;
  _QWORD *v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  int v222;
  _DWORD *v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  _BYTE *v227;
  unsigned __int8 *v228;
  int v229;
  int v230;
  uint64_t v231;
  _BYTE *v232;
  int v233;
  uint64_t v234;
  unsigned __int8 *v235;
  int v236;
  _DWORD *v237;
  unsigned int v238;
  char v239;
  uint64_t v240;
  signed int v241;
  unsigned __int8 *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  unsigned __int8 v247;
  unsigned int v248;
  unsigned int v249[3];

  v4 = a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v8 = *(_DWORD *)(v5 + 2056);
  v9 = &dav1d_block_dimensions[4 * a2];
  v10 = *v9;
  v11 = v9[1];
  v12 = *(_DWORD *)(v5 + 3280) - v7;
  if ((int)v10 >= (int)v12)
    v13 = v12;
  else
    v13 = v10;
  v14 = *(_DWORD *)(v5 + 3284) - v6;
  if ((int)v11 >= v14)
    result = v14;
  else
    result = v11;
  v16 = v8 != 3;
  if (v8 == 3)
    v17 = v13;
  else
    v17 = v13 + 1;
  LODWORD(v18) = v8 == 1;
  if (v8 == 1)
    v19 = result + 1;
  else
    v19 = result;
  if (v11 <= v18)
    v20 = v6 & 1;
  else
    v20 = 1;
  if (v10 <= v16 && (v7 & 1) == 0)
    v22 = 0;
  else
    v22 = v20;
  if (v8)
    v23 = v22;
  else
    v23 = 0;
  v188 = v23;
  if ((int)result >= 1 && (int)v13 >= 1)
  {
    v24 = a4;
    v25 = 0;
    v26 = 0;
    v194 = v7 & 0x1F;
    v224 = (v7 & 0x1F) >> v16;
    v27 = (char *)&dav1d_txfm_dimensions + 8 * a4[10];
    v28 = (char *)&dav1d_txfm_dimensions + 8 * a4[7];
    v214 = (_WORD *)(v4 + 29120);
    v29 = (v10 + v16) >> v16;
    v30 = (v11 + v18) >> v18;
    v213 = *(_DWORD *)(*(_QWORD *)(v5 + 8) + 1020) << 10;
    v237 = *(_DWORD **)(v4 + 16);
    v31 = *(_QWORD *)(v5 + 3144);
    v223 = (_DWORD *)(v4 + 259588);
    v183 = v4 + 20608;
    v191 = v6 & 0x1F;
    v185 = (_BYTE *)(v4 + 32 + v191 + 224);
    v204 = (unsigned __int8 *)v27;
    v195 = (unsigned __int8 *)(v27 + 1);
    v167 = 16 * v29 * v30;
    v180 = v4 + 10368;
    v184 = v17 >> v16;
    v175 = v19 >> v18;
    v196 = (v6 & 0x1Fu) >> v18;
    v182 = v4 + 32;
    v176 = (unsigned __int8 *)(v4 + 32 + v196 + 560);
    v212 = v31 + 64;
    v220 = v4 + 1024;
    v181 = v31;
    v207 = v31 + 680;
    v171 = 16 * v10 * v11;
    v168 = v4 + 12416 + v171;
    v173 = 4 * v30;
    v174 = 4 * v29;
    v209 = ~v16;
    v236 = ~(_DWORD)v18;
    v232 = v24 + 15;
    v211 = (unsigned __int8 *)v28;
    v32 = v28 + 1;
    v219 = v5;
    v187 = v13;
    v186 = result;
    v238 = v16;
    v229 = v18;
    v227 = v24;
    v228 = (unsigned __int8 *)(v28 + 1);
    v208 = v4;
    do
    {
      v33 = 0;
      v34 = v26 + 16;
      if ((int)result >= (int)(v26 + 16))
        v35 = v26 + 16;
      else
        v35 = result;
      v193 = v35;
      v36 = v175;
      v172 = v34 >> v18;
      if (v175 >= (int)(v34 >> v18))
        v36 = v34 >> v18;
      v201 = v36;
      v178 = a3 & (v26 == 0);
      v166 = v26 + 16;
      v38 = (a3 & 8) == 0 && (int)v34 >= (int)result;
      v177 = v38;
      v192 = v26;
      v199 = v26 >> v18;
      v169 = v25;
      v170 = v25 - 2 * (v26 >> v18 << v18);
      do
      {
        if (v24[11])
        {
          v39 = *(_QWORD *)(v5 + 2008);
          v40 = *(_QWORD *)(v5 + 2032);
          v41 = *(int *)(v4 + 24);
          if (*v223)
            *(_QWORD *)&v237[4 * (*v223 & 1) + 3474] += v171;
          (*(void (**)(unint64_t))(*(_QWORD *)(v5 + 3144) + 248))(v39 + 8 * (v41 + (v40 >> 1) * v6));
        }
        v42 = *(_QWORD *)(v4 + 656);
        v43 = *(unsigned __int8 *)(v42 + v194 + 224);
        if (*(_BYTE *)(v42 + v194 + 224))
        {
          v44 = *(unsigned __int8 *)(v42 + v194);
          if ((v44 & 0xFFFFFFFD) == 9 || v44 == 10)
            v43 = 512;
          else
            v43 = 0;
        }
        if (*v185)
        {
          v46 = *(unsigned __int8 *)(v182 + v191);
          if ((v46 & 0xFFFFFFFD) == 9 || v46 == 10)
            v48 = 512;
          else
            v48 = 0;
        }
        else
        {
          v48 = 0;
        }
        if ((int)v13 >= (int)v33 + 16)
          v49 = v33 + 16;
        else
          v49 = v13;
        v50 = *(_DWORD *)(v4 + 28);
        v51 = v50 + v192;
        *(_DWORD *)(v4 + 28) = v50 + v192;
        v200 = v33;
        v189 = v33 + 16;
        if ((int)v192 >= v193)
        {
          v55 = v192;
        }
        else
        {
          if (v33 + 16 < v13)
            v52 = 1;
          else
            v52 = v178;
          v53 = v177;
          if (v33)
            v53 = 1;
          if (v33 < v49)
          {
            v225 = v53;
            v215 = v52;
            v230 = v43 | v48;
            v54 = *(_DWORD *)(v4 + 24);
            v55 = v192;
            v56 = v195;
            v233 = v49;
            while (1)
            {
              v59 = *(_QWORD *)(v5 + 2008);
              v60 = *(_QWORD *)(v5 + 2032);
              v61 = v54 + v200;
              *(_DWORD *)(v4 + 24) = v54 + v200;
              v62 = v59 + 8 * (v200 + (int)v54 + (v60 >> 1) * v51);
              v63 = v215;
              if (v55 > v192)
                v63 = 0;
              v239 = v63;
              v221 = v55;
              v64 = v55 + v191;
              v242 = (unsigned __int8 *)(v4 + 64 + v64);
              v217 = (_QWORD *)(v4 + 64 + (v64 + 8));
              v65 = v200;
              do
              {
                if (v24[11])
                {
                  if (v24[6])
                    goto LABEL_81;
                  goto LABEL_96;
                }
                v249[0] = (char)v24[13];
                if ((v239 & 1) != 0)
                {
                  v68 = 0;
                  if (v200 < v65)
                    goto LABEL_91;
                }
                else
                {
                  v68 = (int)(v65 + *v204) >= v49;
                  if (v200 < v65)
                    goto LABEL_91;
                }
                if (v225 && (int)(v221 + *v56) >= v193)
                {
LABEL_91:
                  v69 = 0;
                  v70 = *(_DWORD *)(v4 + 28);
                  if (((*(_DWORD *)(v5 + 3304) - 1) & v70) != 0)
                    goto LABEL_92;
                  goto LABEL_94;
                }
                v69 = 8;
                v70 = *(_DWORD *)(v4 + 28);
                if (((*(_DWORD *)(v5 + 3304) - 1) & v70) != 0)
                {
LABEL_92:
                  v71 = 0;
                  goto LABEL_95;
                }
LABEL_94:
                v71 = *(_QWORD *)(v5 + 3240)
                    + 2 * ((*(_DWORD *)(v5 + 3288) * ((v70 >> *(_DWORD *)(v5 + 3300)) - 1)) << 7);
LABEL_95:
                v72 = *v204;
                v73 = *v56;
                v74 = dav1d_prepare_intra_edges_16bpc(v61, v61 > v237[3466], v70, v70 > v237[3468], v237[3467], v237[3469], v69 | !v68, v62, *(_QWORD *)(v5 + 2032), v71, v24[8], (int *)v249, v72, v73, *(_DWORD *)(*(_QWORD *)(v5 + 8) + 1020), v214, *(_DWORD *)(v5 + 4156));
                v56 = v195;
                (*(void (**)(uint64_t, _QWORD, _WORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))(v212 + 8 * v74))(v62, *(_QWORD *)(v5 + 2032), v214, (4 * v72), (4 * v73), v230 | v213 | v249[0], (4 * (*(_DWORD *)(v5 + 3280) - *(_DWORD *)(v4 + 24))), (4 * (*(_DWORD *)(v5 + 3284) - *(_DWORD *)(v4 + 28))), *(_DWORD *)(v5 + 4156));
                v49 = v233;
                if (v24[6])
                {
LABEL_81:
                  if (*v223)
                  {
                    v66 = *v204;
                  }
                  else
                  {
                    switch(*v56)
                    {
                      case 1:
                        *v242 = 64;
                        v66 = *v204;
                        v67 = v66 - 1;
                        if (v66 - 1 <= 0xF)
                          goto LABEL_115;
                        goto LABEL_78;
                      case 2:
                        *(_WORD *)v242 = 16448;
                        v66 = *v204;
                        v67 = v66 - 1;
                        if (v66 - 1 <= 0xF)
                          goto LABEL_115;
                        goto LABEL_78;
                      case 4:
                        *(_DWORD *)v242 = 1077952576;
                        v66 = *v204;
                        v67 = v66 - 1;
                        if (v66 - 1 <= 0xF)
                          goto LABEL_115;
                        goto LABEL_78;
                      case 8:
                        *(_QWORD *)v242 = 0x4040404040404040;
                        goto LABEL_114;
                      case 0x10:
                        *(_QWORD *)v242 = 0x4040404040404040;
                        *v217 = 0x4040404040404040;
                        v66 = *v204;
                        v67 = v66 - 1;
                        if (v66 - 1 > 0xF)
                          goto LABEL_78;
                        goto LABEL_115;
                      default:
LABEL_114:
                        v66 = *v204;
                        v67 = v66 - 1;
LABEL_115:
                        switch(v67)
                        {
                          case 0u:
                            *(_BYTE *)(*(_QWORD *)(v4 + 656) + v65 + v194 + 32) = 64;
                            v66 = 1;
                            break;
                          case 1u:
                            *(_WORD *)(*(_QWORD *)(v4 + 656) + v65 + v194 + 32) = 16448;
                            v66 = 2;
                            break;
                          case 3u:
                            *(_DWORD *)(*(_QWORD *)(v4 + 656) + v65 + v194 + 32) = 1077952576;
                            v66 = 4;
                            break;
                          case 7u:
                            *(_QWORD *)(*(_QWORD *)(v4 + 656) + v65 + v194 + 32) = 0x4040404040404040;
                            v66 = 8;
                            break;
                          case 0xFu:
                            v85 = v65 + v194;
                            *(_QWORD *)(*(_QWORD *)(v4 + 656) + v85 + 32) = 0x4040404040404040;
                            *(_QWORD *)(*(_QWORD *)(v4 + 656) + (v85 + 8) + 32) = 0x4040404040404040;
                            v66 = 16;
                            break;
                          default:
                            goto LABEL_78;
                        }
                        break;
                    }
                  }
                  goto LABEL_78;
                }
LABEL_96:
                v248 = 0;
                if (*v223)
                {
                  v66 = *v204;
                  if (v66 >= 8)
                    v76 = 8;
                  else
                    v76 = *v204;
                  v77 = *v56;
                  if (v77 >= 8)
                    v77 = 8;
                  v75 = &v237[4 * (*v223 & 1)];
                  *((_QWORD *)v75 + 1738) += 64 * v76 * v77;
                  v78 = (__int16 *)(*(_QWORD *)(v5 + 4200)
                                  + 10 * (*(int *)(v4 + 24) + *(_QWORD *)(v5 + 3264) * *(int *)(v4 + 28)));
                  v79 = *v78;
                  v248 = *((unsigned __int8 *)v78 + 6);
                  if ((v79 & 0x80000000) == 0)
LABEL_103:
                    (*(void (**)(uint64_t, _QWORD))(v207 + 136 * v24[10] + 8 * v248))(v62, *(_QWORD *)(v5 + 2032));
                }
                else
                {
                  v247 = 0;
                  v80 = v5;
                  v81 = v65 + v194;
                  v82 = decode_coefs(v4, *(_QWORD *)(v4 + 656) + v81 + 32, (uint64_t)v242, v24[10], a2, (uint64_t)v24, 1, 0, v220, &v248, &v247);
                  v83 = *v56;
                  if (v83 >= *(_DWORD *)(v80 + 3284) - *(_DWORD *)(v4 + 28))
                    v83 = *(_DWORD *)(v80 + 3284) - *(_DWORD *)(v4 + 28);
                  switch(v83)
                  {
                    case 1:
                      LODWORD(v84) = v247;
                      *v242 = v247;
                      break;
                    case 2:
                      LODWORD(v84) = v247;
                      *(_WORD *)v242 = v247 | (v247 << 8);
                      break;
                    case 4:
                      LODWORD(v84) = v247;
                      *(_DWORD *)v242 = 16843009 * v247;
                      break;
                    case 8:
                      LODWORD(v84) = v247;
                      *(_QWORD *)v242 = 0x101010101010101 * v247;
                      break;
                    case 16:
                      v84 = v247;
                      *(_QWORD *)v242 = 0x101010101010101 * v247;
                      *v217 = 0x101010101010101 * v84;
                      break;
                    default:
                      LODWORD(v84) = v247;
                      memset(v242, v247, v83);
                      break;
                  }
                  v66 = *v204;
                  v86 = *(_DWORD *)(v219 + 3280) - *(_DWORD *)(v4 + 24);
                  if ((int)v66 < v86)
                    v86 = *v204;
                  switch(v86)
                  {
                    case 1:
                      *(_BYTE *)(*(_QWORD *)(v4 + 656) + v81 + 32) = v84;
                      v5 = v219;
                      v32 = v228;
                      if ((v82 & 0x80000000) == 0)
                        goto LABEL_103;
                      break;
                    case 2:
                      *(_WORD *)(*(_QWORD *)(v4 + 656) + v81 + 32) = v84 | ((_WORD)v84 << 8);
                      v5 = v219;
                      v32 = v228;
                      if ((v82 & 0x80000000) == 0)
                        goto LABEL_103;
                      break;
                    case 4:
                      *(_DWORD *)(*(_QWORD *)(v4 + 656) + v81 + 32) = 16843009 * v84;
                      v5 = v219;
                      v32 = v228;
                      if ((v82 & 0x80000000) == 0)
                        goto LABEL_103;
                      break;
                    case 8:
                      *(_QWORD *)(*(_QWORD *)(v4 + 656) + v81 + 32) = 0x101010101010101 * v84;
                      v5 = v219;
                      v32 = v228;
                      if ((v82 & 0x80000000) == 0)
                        goto LABEL_103;
                      break;
                    case 16:
                      v87 = 0x101010101010101 * v84;
                      *(_QWORD *)(*(_QWORD *)(v4 + 656) + v81 + 32) = v87;
                      *(_QWORD *)(*(_QWORD *)(v4 + 656) + (v81 + 8) + 32) = v87;
                      v5 = v219;
                      v32 = v228;
                      if ((v82 & 0x80000000) == 0)
                        goto LABEL_103;
                      break;
                    default:
                      memset((void *)(*(_QWORD *)(v4 + 656) + v81 + 32), v84, v86);
                      v5 = v219;
                      v32 = v228;
                      if ((v82 & 0x80000000) == 0)
                        goto LABEL_103;
                      break;
                  }
                }
                v16 = v238;
LABEL_78:
                v62 += 8 * v66;
                v65 += v66;
                v61 = *(_DWORD *)(v4 + 24) + v66;
                *(_DWORD *)(v4 + 24) = v61;
              }
              while ((int)v65 < v49);
              v57 = *(_DWORD *)(v4 + 28);
              v54 = v61 - v65;
              *(_DWORD *)(v4 + 24) = v61 - v65;
              v58 = *v56;
              v55 = v221 + v58;
              v51 = v57 + v58;
              *(_DWORD *)(v4 + 28) = v51;
              if ((int)(v221 + v58) >= v193)
                goto LABEL_147;
            }
          }
          v55 = v192;
          do
            v55 += *v195;
          while ((int)v55 < v193);
          v51 = v50 + v55;
        }
LABEL_147:
        v6 = v51 - v55;
        *(_DWORD *)(v4 + 28) = v6;
        LOBYTE(v18) = v229;
        v88 = v211;
        v89 = v223;
        v90 = v201;
        v91 = v200;
        if (!v188)
          goto LABEL_42;
        v231 = *(_QWORD *)(v5 + 2040);
        if (v24[9] != 13)
        {
          if (!v24[12])
            goto LABEL_164;
          v95 = *(_DWORD *)(v4 + 24);
          v96 = v183;
          v97 = v168;
          if (*v223)
          {
            v98 = &v237[4 * (*v223 & 1)];
            v97 = *((_QWORD *)v98 + 1737);
            v96 = *(_QWORD *)(v5 + 4208)
                + 48
                * ((*(uint64_t *)(v5 + 3264) >> 1) * ((*(_DWORD *)(v4 + 24) & 1) + (v6 >> 1))
                 + (v6 & 1)
                 + (*(int *)(v4 + 24) >> 1));
            *((_QWORD *)v98 + 1737) = v97 + v167;
          }
          v99 = 8 * (((unint64_t)v231 >> 1) * (v6 >> v229) + (v95 >> v238));
          (*(void (**)(unint64_t))(*(_QWORD *)(v5 + 3144) + 248))(*(_QWORD *)(v5 + 2016) + v99);
          v100 = v97;
          v16 = v238;
          (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v5 + 3144)
                                                                                             + 248))(*(_QWORD *)(v5 + 2024) + v99, *(_QWORD *)(v5 + 2040), v96 + 32, v100, v174, v173);
          v89 = v223;
          v32 = v228;
          goto LABEL_163;
        }
        v92 = *(_DWORD *)(v4 + 24);
        v234 = *(_QWORD *)(v5 + 2016);
        v240 = *(_QWORD *)(v5 + 2024);
        v243 = 8 * ((*(_QWORD *)(v5 + 2040) >> 1) * (v6 >> v229) + (v92 >> v16));
        (*(void (**)(uint64_t, uint64_t))(v181 + 8 * (*(_DWORD *)(v5 + 2056) - 1) + 176))(v180, *(_QWORD *)(v5 + 2008) + 8 * (v92 & v209) + 2 * (*(_QWORD *)(v5 + 2032) >> 1) * 4 * (v6 & v236));
        if (*v232)
        {
          v248 = 0;
          v93 = *(_DWORD *)(v4 + 28);
          if (((*(_DWORD *)(v5 + 3304) - 1) & v236 & v93) != 0)
            v94 = 0;
          else
            v94 = *(_QWORD *)(v5 + 3248) + 2 * ((*(_DWORD *)(v5 + 3288) * ((v93 >> *(_DWORD *)(v5 + 3300)) - 1)) << 7);
          v18 = v5;
          v101 = *v211;
          v102 = *v228;
          v103 = *(void (**)(uint64_t, uint64_t, _WORD *, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(v181 + 8 * dav1d_prepare_intra_edges_16bpc(*(int *)(v4 + 24) >> v238, *(int *)(v4 + 24) >> v238 > (int)v237[3466] >> v238, v93 >> v229, v93 >> v229 > (int)v237[3468] >> v229, (int)v237[3467] >> v238, (int)v237[3469] >> v229, 0, v234 + v243, v231, v94, 0, (int *)&v248, v101, v102, 0, v214, *(_DWORD *)(v18 + 4156)) + 200);
          v104 = (4 * v102);
          v32 = v228;
          v16 = v238;
          v103(v234 + v243, v231, v214, (4 * v101), v104, v180, (char)*v232, *(unsigned int *)(v18 + 4156));
          v5 = v18;
          LOBYTE(v18) = v229;
          v88 = v211;
          v89 = v223;
          v90 = v201;
          v91 = v200;
        }
        if (v24[16])
        {
          v248 = 0;
          v105 = *(_DWORD *)(v4 + 28);
          if (((*(_DWORD *)(v5 + 3304) - 1) & v236 & v105) != 0)
            v106 = 0;
          else
            v106 = *(_QWORD *)(v5 + 3256)
                 + 2 * ((*(_DWORD *)(v5 + 3288) * ((v105 >> *(_DWORD *)(v5 + 3300)) - 1)) << 7);
          v244 = v240 + v243;
          v107 = *v88;
          v108 = *v32;
          v109 = dav1d_prepare_intra_edges_16bpc(*(int *)(v4 + 24) >> v238, *(int *)(v4 + 24) >> v238 > (int)v237[3466] >> v238, v105 >> v18, v105 >> v18 > (int)v237[3468] >> v18, (int)v237[3467] >> v238, (int)v237[3469] >> v18, 0, v244, v231, v106, 0, (int *)&v248, v107, v108, 0, v214, *(_DWORD *)(v5 + 4156));
          v110 = (4 * v108);
          v16 = v238;
          (*(void (**)(uint64_t, uint64_t, _WORD *, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(v181 + 8 * v109 + 200))(v244, v231, v214, (4 * v107), v110, v180, (char)v24[16], *(unsigned int *)(v5 + 4156));
          v89 = v223;
LABEL_163:
          v90 = v201;
          v91 = v200;
        }
LABEL_164:
        v111 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 656) + v224 + 560);
        v112 = *v176;
        if ((v112 & 0xFFFFFFFD) == 9 || v112 == 10 || (v111 & 0xFFFFFFFD) == 9 || v111 == 10)
          v116 = 512;
        else
          v116 = 0;
        v210 = v116;
        v117 = v189 >> v16;
        v197 = (int)(v189 >> v16) < v184;
        if (!v192 && v117 >= v184)
          v197 = (4u >> (*(_DWORD *)(v5 + 2056) - 1)) & a3;
        v205 = v91 == 0;
        if (!v91 && v172 >= v175)
          v205 = (0x20u >> (*(_DWORD *)(v5 + 2056) - 1)) & a3;
        if (v184 >= v117)
          v118 = v189 >> v16;
        else
          v118 = v184;
        if ((int)v199 >= v90)
        {
          v6 = *(_DWORD *)(v4 + 28) + v170;
          *(_DWORD *)(v4 + 28) = v6;
        }
        else
        {
          v6 = *(_DWORD *)(v4 + 28);
          if ((int)(v91 >> v16) < v118)
          {
            v218 = v91 >> v16;
            v119 = 0;
            v120 = *(_DWORD *)(v4 + 24);
            v121 = 1;
            v241 = v118;
            while (1)
            {
              v190 = v121;
              v122 = v6 + v192;
              *(_DWORD *)(v4 + 28) = v122;
              v226 = v119 + 1;
              v123 = v5 + 8 * (v119 + 1);
              v198 = (_QWORD *)(v123 + 2008);
              v203 = (_QWORD *)(v123 + 3240);
              v124 = v199;
              v245 = v119;
              do
              {
                v126 = (v231 >> 1) * (v122 >> v18);
                v127 = v120 + v91;
                v128 = *v198 + 8 * (v126 + ((v120 + (int)v91) >> v16));
                *(_DWORD *)(v4 + 24) = v127;
                v130 = v124 <= v199 && v197 != 0;
                v216 = v130;
                v222 = v124;
                v131 = v124 + v196;
                v132 = v4 + 32 * v119 + 96;
                v235 = (unsigned __int8 *)(v132 + v131);
                v202 = (_QWORD *)(v132 + (v131 + 8));
                LODWORD(v18) = v218;
                do
                {
                  v134 = v24[9];
                  if (v134 == 13 && v232[v119] || v24[12])
                  {
                    if (v24[6])
                      goto LABEL_204;
                    goto LABEL_222;
                  }
                  v246 = (char)v24[14];
                  if (v216)
                  {
                    v136 = 0;
                    v137 = v222;
                    if (v18 > v218)
                      goto LABEL_214;
                  }
                  else
                  {
                    v136 = (int)(v18 + *v88) >= v118;
                    v137 = v222;
                    if (v18 > v218)
                      goto LABEL_214;
                  }
                  if (!v205 && v137 + *v32 >= v201)
                  {
LABEL_214:
                    v138 = 0;
                    goto LABEL_216;
                  }
                  v138 = 8;
LABEL_216:
                  v139 = *(_DWORD *)(v4 + 28);
                  if (((*(_DWORD *)(v5 + 3304) - 1) & v236 & v139) != 0)
                    v140 = 0;
                  else
                    v140 = *v203 + 2 * ((*(_DWORD *)(v5 + 3288) * ((v139 >> *(_DWORD *)(v5 + 3300)) - 1)) << 7);
                  if (v134 == 13)
                    v134 = 0;
                  v141 = *v211;
                  v142 = *v32;
                  v143 = dav1d_prepare_intra_edges_16bpc(v127 >> v16, v127 >> v16 > (int)v237[3466] >> v16, v139 >> v229, v139 >> v229 > (int)v237[3468] >> v229, (int)v237[3467] >> v16, (int)v237[3469] >> v229, v138 | !v136, v128, v231, v140, v134, (int *)&v246, v141, v142, *(_DWORD *)(*(_QWORD *)(v5 + 8) + 1020), v214, *(_DWORD *)(v5 + 4156));
                  v246 |= v213;
                  v88 = v211;
                  v4 = v208;
                  v32 = v228;
                  (*(void (**)(uint64_t, uint64_t, _WORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))(v212 + 8 * v143))(v128, v231, v214, (4 * v141), (4 * v142), v246 | v210, ((int)((v16 | (4 * *(_DWORD *)(v5 + 3280))) - 4 * (*(_DWORD *)(v208 + 24) & v209)) >> v16), (((v229 | (4 * *(_DWORD *)(v5 + 3284))) - 4 * (*(_DWORD *)(v208 + 28) & v236)) >> v229), *(_DWORD *)(v5 + 4156));
                  v89 = v223;
                  v24 = v227;
                  v118 = v241;
                  v119 = v245;
                  if (v227[6])
                  {
LABEL_204:
                    if (*v89)
                    {
                      v133 = *v88;
                    }
                    else
                    {
                      switch(*v32)
                      {
                        case 1:
                          *v235 = 64;
                          v133 = *v88;
                          v135 = v133 - 1;
                          if ((v133 - 1) <= 0xF)
                            goto LABEL_236;
                          goto LABEL_199;
                        case 2:
                          *(_WORD *)v235 = 16448;
                          v133 = *v88;
                          v135 = v133 - 1;
                          if ((v133 - 1) <= 0xF)
                            goto LABEL_236;
                          goto LABEL_199;
                        case 4:
                          *(_DWORD *)v235 = 1077952576;
                          v133 = *v88;
                          v135 = v133 - 1;
                          if ((v133 - 1) <= 0xF)
                            goto LABEL_236;
                          goto LABEL_199;
                        case 8:
                          *(_QWORD *)v235 = 0x4040404040404040;
                          goto LABEL_235;
                        case 0x10:
                          *(_QWORD *)v235 = 0x4040404040404040;
                          *v202 = 0x4040404040404040;
                          v133 = *v88;
                          v135 = v133 - 1;
                          if ((v133 - 1) > 0xF)
                            goto LABEL_199;
                          goto LABEL_236;
                        default:
LABEL_235:
                          v133 = *v88;
                          v135 = v133 - 1;
LABEL_236:
                          switch(v135)
                          {
                            case 0:
                              *(_BYTE *)(*(_QWORD *)(v4 + 656) + 32 * v119 + (v18 + v224) + 64) = 64;
                              v133 = 1;
                              break;
                            case 1:
                              *(_WORD *)(*(_QWORD *)(v4 + 656) + 32 * v119 + (v18 + v224) + 64) = 16448;
                              v133 = 2;
                              break;
                            case 3:
                              *(_DWORD *)(*(_QWORD *)(v4 + 656) + 32 * v119 + (v18 + v224) + 64) = 1077952576;
                              v133 = 4;
                              break;
                            case 7:
                              *(_QWORD *)(*(_QWORD *)(v4 + 656) + 32 * v119 + (v18 + v224) + 64) = 0x4040404040404040;
                              v133 = 8;
                              break;
                            case 15:
                              v152 = (v18 + v224);
                              *(_QWORD *)(*(_QWORD *)(v4 + 656) + 32 * v119 + v152 + 64) = 0x4040404040404040;
                              *(_QWORD *)(*(_QWORD *)(v4 + 656) + 32 * v119 + (v152 + 8) + 64) = 0x4040404040404040;
                              v133 = 16;
                              break;
                            default:
                              goto LABEL_199;
                          }
                          break;
                      }
                    }
                    goto LABEL_199;
                  }
LABEL_222:
                  v248 = 0;
                  if (*v89)
                  {
                    v133 = *v88;
                    *(_QWORD *)&v237[4 * (*v89 & 1) + 3476] += (*v32 * (unint64_t)*v88) << 6;
                    v144 = *(_QWORD *)(v5 + 4200)
                         + 10 * (*(int *)(v4 + 24) + *(_QWORD *)(v5 + 3264) * *(int *)(v4 + 28));
                    v145 = *(__int16 *)(v144 + 2 * v226);
                    v248 = *(unsigned __int8 *)(v144 + v226 + 6);
                    if ((v145 & 0x80000000) == 0)
                    {
LABEL_224:
                      (*(void (**)(uint64_t, uint64_t))(v207 + 136 * v24[7] + 8 * v248))(v128, v231);
                      v119 = v245;
                    }
                  }
                  else
                  {
                    v247 = 0;
                    v146 = (uint64_t)v24;
                    v147 = v5;
                    v148 = (v18 + v224);
                    v149 = decode_coefs(v4, *(_QWORD *)(v4 + 656) + 32 * v119 + v148 + 64, (uint64_t)v235, *(unsigned __int8 *)(v146 + 7), a2, v146, 1, v226, v220, &v248, &v247);
                    v150 = *v32;
                    if (v150 >= (*(_DWORD *)(v147 + 3284) + v229 - *(_DWORD *)(v4 + 28)) >> v229)
                      v150 = (*(_DWORD *)(v147 + 3284) + v229 - *(_DWORD *)(v4 + 28)) >> v229;
                    switch(v150)
                    {
                      case 1:
                        LODWORD(v151) = v247;
                        *v235 = v247;
                        break;
                      case 2:
                        LODWORD(v151) = v247;
                        *(_WORD *)v235 = v247 | (v247 << 8);
                        break;
                      case 4:
                        LODWORD(v151) = v247;
                        *(_DWORD *)v235 = 16843009 * v247;
                        break;
                      case 8:
                        LODWORD(v151) = v247;
                        *(_QWORD *)v235 = 0x101010101010101 * v247;
                        break;
                      case 16:
                        v151 = v247;
                        *(_QWORD *)v235 = 0x101010101010101 * v247;
                        *v202 = 0x101010101010101 * v151;
                        break;
                      default:
                        LODWORD(v151) = v247;
                        memset(v235, v247, v150);
                        break;
                    }
                    v24 = v227;
                    v119 = v245;
                    v133 = *v88;
                    v153 = (int)(*(_DWORD *)(v219 + 3280) + v238 - *(_DWORD *)(v4 + 24)) >> v238;
                    if (v133 < v153)
                      v153 = *v88;
                    switch(v153)
                    {
                      case 1:
                        *(_BYTE *)(*(_QWORD *)(v4 + 656) + 32 * v245 + v148 + 64) = v151;
                        v5 = v219;
                        v32 = v228;
                        if ((v149 & 0x80000000) == 0)
                          goto LABEL_224;
                        break;
                      case 2:
                        *(_WORD *)(*(_QWORD *)(v4 + 656) + 32 * v245 + v148 + 64) = v151 | ((_WORD)v151 << 8);
                        v5 = v219;
                        v32 = v228;
                        if ((v149 & 0x80000000) == 0)
                          goto LABEL_224;
                        break;
                      case 4:
                        *(_DWORD *)(*(_QWORD *)(v4 + 656) + 32 * v245 + v148 + 64) = 16843009 * v151;
                        v5 = v219;
                        v32 = v228;
                        if ((v149 & 0x80000000) == 0)
                          goto LABEL_224;
                        break;
                      case 8:
                        *(_QWORD *)(*(_QWORD *)(v4 + 656) + 32 * v245 + v148 + 64) = 0x101010101010101
                                                                                   * v151;
                        v5 = v219;
                        v32 = v228;
                        if ((v149 & 0x80000000) == 0)
                          goto LABEL_224;
                        break;
                      case 16:
                        v154 = 0x101010101010101 * v151;
                        *(_QWORD *)(*(_QWORD *)(v4 + 656) + 32 * v245 + v148 + 64) = v154;
                        *(_QWORD *)(*(_QWORD *)(v4 + 656) + 32 * v245 + (v148 + 8) + 64) = v154;
                        v5 = v219;
                        v32 = v228;
                        if ((v149 & 0x80000000) == 0)
                          goto LABEL_224;
                        break;
                      default:
                        memset((void *)(*(_QWORD *)(v4 + 656) + 32 * v245 + v148 + 64), v151, v153);
                        v119 = v245;
                        v5 = v219;
                        v32 = v228;
                        if ((v149 & 0x80000000) == 0)
                          goto LABEL_224;
                        break;
                    }
                  }
                  v16 = v238;
                  v118 = v241;
LABEL_199:
                  v128 += 2 * (4 * v133);
                  LODWORD(v18) = v18 + v133;
                  v127 = (v133 << v16) + *(_DWORD *)(v4 + 24);
                  *(_DWORD *)(v4 + 24) = v127;
                }
                while ((int)v18 < v118);
                v120 = v127 - ((_DWORD)v18 << v16);
                *(_DWORD *)(v4 + 24) = v120;
                v125 = *v32;
                v124 = v222 + v125;
                LOBYTE(v18) = v229;
                v122 = (v125 << v229) + *(_DWORD *)(v4 + 28);
                *(_DWORD *)(v4 + 28) = v122;
                LODWORD(v91) = v200;
              }
              while (v124 < v201);
              v121 = 0;
              v6 = v122 - (v124 << v229);
              *(_DWORD *)(v4 + 28) = v6;
              v119 = 1;
              if ((v190 & 1) == 0)
                goto LABEL_42;
            }
          }
          v155 = v91 >> v16 << v16;
          v156 = *v32;
          v157 = v156 << v18;
          v158 = *(_DWORD *)(v4 + 24);
          v159 = v169 + v6;
          v160 = v91 - v155;
          v161 = v158 + v91 - v155;
          v162 = v199;
          do
          {
            v163 = v161;
            v162 += v156;
            v159 += v157;
            v158 += v160;
            v161 += v160;
          }
          while (v162 < v90);
          v164 = v159 - (v162 << v18);
          v165 = v199;
          do
          {
            v165 += v156;
            v164 += v157;
            v163 += v160;
          }
          while (v165 < v90);
          v6 = v164 - (v165 << v18);
          *(_DWORD *)(v4 + 24) = v163;
          *(_DWORD *)(v4 + 28) = v6;
        }
LABEL_42:
        v33 = v189;
        v13 = v187;
        result = v186;
      }
      while (v189 < v187);
      v25 = v169 + 32;
      v26 = v166;
    }
    while (v166 < (int)v186);
  }
  return result;
}

uint64_t dav1d_recon_b_inter_16bpc(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  int *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  signed int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int *v41;
  signed int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  int v70;
  int v71;
  _QWORD *v72;
  _BOOL4 v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  signed int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  unsigned int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  char *v122;
  _WORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  void (*v129)(uint64_t, uint64_t, _WORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD);
  unsigned int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t, _WORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  int v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  int v148;
  uint64_t v149;
  signed int v150;
  unsigned int v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  signed int v155;
  int v156;
  int v157;
  char v158;
  int v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  signed int v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  signed int v173;
  int v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int8 *v179;
  signed int v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  _DWORD *v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  int v194;
  __int16 v195;
  int v196;
  int v197;
  uint64_t v198;
  unsigned int v199;
  unsigned int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  unsigned int v205;
  signed int v206;
  unsigned int v207;
  int v208;
  signed int v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  __int128 v220;
  uint64_t v221;
  __int128 v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  unint64_t v242;
  unint64_t v243;
  unsigned int v244;
  unint64_t v245;
  int v246;
  unsigned __int8 *v247;
  unsigned int v248;
  BOOL v249;
  uint64_t v250;
  char v251;
  int v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  unsigned int v256;
  char v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  signed int v261;
  char v262;
  uint64_t v263;
  unsigned __int8 *v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unsigned int v268;
  int v269;
  unsigned int v270;
  int v271;
  uint64_t v272;
  signed int v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  uint64_t v279;
  int v280;
  unsigned int v281;
  signed int v282;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  unsigned __int8 *v290;
  unsigned int v291;
  uint64_t v292;
  int v293;
  int v294;
  int v295;
  uint64_t v296;
  unsigned int v297;
  uint64_t v298;
  uint64_t v299;
  _DWORD *v300;
  uint64_t v301;
  _BOOL4 v302;
  uint64_t v303;
  int v304;
  int v306;
  unsigned __int8 *v307;
  int *v308;
  signed int v309;
  unsigned __int8 *v310;
  int v311;
  uint64_t v312;
  unsigned __int8 v313;
  _WORD v314[2];
  int v315[3];

  v3 = a3;
  v5 = (int *)(a1 + 259520);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 24);
  v8 = *(_DWORD *)(a1 + 28);
  v9 = v7;
  v10 = v8;
  v266 = v7 & 0x1F;
  v267 = v8 & 0x1F;
  v11 = *(_DWORD *)(v6 + 2056);
  v12 = v11 == 1;
  v13 = v11 != 3;
  v14 = &dav1d_block_dimensions[4 * a2];
  v15 = *v14;
  v16 = v14[1];
  v17 = *(_DWORD *)(v6 + 3280) - v7;
  if ((int)v15 < v17)
    v17 = *v14;
  v256 = v17;
  v18 = *(_DWORD *)(v6 + 3284) - v8;
  if (v16 < v18)
    v18 = v14[1];
  v241 = v18;
  if (!v11 || (v15 <= v13 ? (v19 = (v9 & 1) == 0) : (v19 = 0), v19))
  {
    v20 = 0;
  }
  else if (v16 <= v12)
  {
    v20 = v8 & 1;
  }
  else
  {
    v20 = 1;
  }
  v300 = *(_DWORD **)(a1 + 16);
  v301 = *(_QWORD *)(v6 + 3144);
  v287 = v266 >> v13;
  v265 = v267 >> v12;
  if (v11)
    v21 = 3 - v11;
  else
    v21 = 0;
  v309 = (v16 + v12) >> v12;
  v22 = (v15 + v13) >> v13;
  v23 = *(_QWORD *)(v6 + 2032);
  v24 = *(_QWORD *)(v6 + 2008) + 8 * (v9 + (v23 >> 1) * v8);
  v258 = 4 * ((*(_QWORD *)(v6 + 2040) >> 1) * (v8 >> v12) + ((int)v9 >> v13));
  v25 = *(_QWORD *)(v6 + 24);
  v252 = *v14;
  v308 = (int *)(a1 + 259520);
  v311 = v11 != 3;
  v312 = *(_QWORD *)(a1 + 8);
  v294 = v11 == 1;
  v242 = v14[1];
  v306 = *(_DWORD *)(v6 + 2056);
  if ((*(_BYTE *)(v25 + 232) & 1) == 0)
  {
    v26 = v6 + 2256;
    v27 = a3;
    mc(a1, v24, 0, v23, v15, v16, v9, v10, 0, v230, *(_DWORD *)(a3 + 8), v6 + 2256, 0, 9u);
    if (v20)
    {
      v295 = (_DWORD)v15 << ((_DWORD)v15 == v311);
      v28 = (_DWORD)v242 << ((_DWORD)v242 == v12);
      mc(a1, *(_QWORD *)(v312 + 2016) + 2 * v258, 0, *(_QWORD *)(v312 + 2040), v295, v28, *(_DWORD *)(a1 + 24) & ~v311, *(_DWORD *)(a1 + 28) & ~v294, 1u, v231, *(_DWORD *)(v27 + 8), v26, 0, 9u);
      mc(a1, *(_QWORD *)(v312 + 2024) + 2 * v258, 0, *(_QWORD *)(v312 + 2040), v295, v28, *(_DWORD *)(a1 + 24) & ~v311, *(_DWORD *)(a1 + 28) & ~v294, 2u, v232, *(_DWORD *)(v27 + 8), v26, 0, 9u);
    }
    goto LABEL_183;
  }
  v290 = &dav1d_block_dimensions[4 * a2];
  if (!*(_BYTE *)(a3 + 20))
  {
    v37 = *(char *)(a3 + 24);
    v38 = v6 + 280 * v37 + 32;
    v39 = *(unsigned __int8 *)(a3 + 27);
    if ((int)v15 >= v16)
      v40 = v16;
    else
      v40 = v15;
    v271 = v21;
    v275 = v6 + 280 * *(char *)(a3 + 24) + 32;
    if (v40 >= 2)
    {
      if (*(_BYTE *)(a3 + 21) == 2 && *(_BYTE *)(v6 + v37 + 2920))
      {
        if (*(_BYTE *)(a3 + 22) != 2)
        {
          v41 = (int *)(v25 + 36 * (int)v37 + 1424);
LABEL_45:
          v42 = (v16 + v12) >> v12;
          warp_affine(a1, v24, 0, v23, v290, 0, v38, v41);
          goto LABEL_48;
        }
LABEL_44:
        v41 = (int *)(a1 + 259520);
        goto LABEL_45;
      }
      if (*(_BYTE *)(a3 + 22) == 2 && *v5 > 1)
        goto LABEL_44;
    }
    mc(a1, v24, 0, v23, v15, v16, v9, v10, 0, v230, *(_DWORD *)(a3 + 8), v38, v37, v39);
    v42 = v309;
    if (*(_BYTE *)(v3 + 22) == 1)
      obmc(a1, v24, *(_QWORD *)(v312 + 2032), v290, 0, v266, v267, v256, v241);
LABEL_48:
    v297 = v39;
    v304 = v22;
    if (*(_BYTE *)(v3 + 28))
    {
      v279 = a1 + 20672;
      v43 = *(unsigned __int8 *)(v3 + 18);
      if (v43 == 3)
        v43 = 9;
      v315[0] = 0;
      v44 = *(_DWORD *)(a1 + 28);
      if (((*(_DWORD *)(v312 + 3304) - 1) & v44) != 0)
        v45 = 0;
      else
        v45 = *(_QWORD *)(v312 + 3240)
            + 2 * ((*(_DWORD *)(v312 + 3288) * ((v44 >> *(_DWORD *)(v312 + 3300)) - 1)) << 7);
      v65 = dav1d_prepare_intra_edges_16bpc(*(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 24) > v300[3466], v44, v44 > v300[3468], v300[3467], v300[3469], 0, v24, *(_QWORD *)(v312 + 2032), v45, v43, v315, v15, v242, 0, (_WORD *)(a1 + 28928), *(_DWORD *)(v312 + 4156));
      v66 = (4 * v242);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _DWORD))(v301 + 8 * v65 + 64))(v279, 8 * v15, a1 + 28928, (4 * v15), v66, 0, 0, 0, *(_DWORD *)(v312 + 4156));
      if (*(_BYTE *)(v3 + 28) == 1)
      {
        v67 = (char *)&dav1d_ii_masks + 96 * a2;
        v68 = *(unsigned __int8 *)(v3 + 18);
      }
      else
      {
        v67 = (char *)&dav1d_wedge_masks[96 * a2];
        v68 = *(unsigned __int8 *)(v3 + 16);
      }
      v42 = v309;
      (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(v301 + 624))(v24, *(_QWORD *)(v312 + 2032), v279, (4 * v15), v66, *(_QWORD *)&v67[8 * v68]);
      v12 = v294;
    }
    if (!v20)
      goto LABEL_181;
    v69 = (_QWORD *)v312;
    v70 = v242;
    if ((_DWORD)v15 == v311 || (_DWORD)v242 == v12)
    {
      v71 = *(_DWORD *)(a1 + 28);
      v72 = (_QWORD *)(a1 + 8 * (v71 & 0x1F) + 712);
      v73 = (_DWORD)v15 != 1 || *(char *)(*v72 + 12 * *(int *)(a1 + 24) - 4) > 0;
      if ((_DWORD)v242 == v12)
      {
        v74 = *(_QWORD *)(a1 + 8 * (v71 & 0x1F) + 704);
        v75 = *(_DWORD *)(a1 + 24);
        if (*(char *)(v74 + 12 * v75 + 8) <= 0)
          v73 = 0;
        if ((_DWORD)v15 == 1 && *(char *)(v74 + 12 * v75 - 4) <= 0)
          v73 = 0;
      }
      if (v73)
      {
        v76 = *(_QWORD *)(v312 + 2040);
        v77 = *(_DWORD *)(a1 + 24);
        if ((_DWORD)v15 == 1 && (_DWORD)v242 == v12)
        {
          v78 = v71 - 1;
          if (v5[17] == 2)
            v80 = *(unsigned __int8 *)(*(_QWORD *)(v312 + 4192) + 32 * (v77 + *(_QWORD *)(v312 + 3264) * v78) - 5);
          else
            v80 = v5[16];
          v79 = *(v72 - 1) + 12 * (v77 - 1);
          mc(a1, *(_QWORD *)(v312 + 2016) + 2 * v258, 0, v76, 1, v12, v77 - 1, v78, 1u, v230, *(_DWORD *)v79, v312 + 280 * (*(char *)(v79 + 8) - 1) + 32, *(char *)(v79 + 8) - 1, v80);
          v99 = *(int *)(a1 + 24);
          v100 = v99 - 1;
          v101 = *(int *)(a1 + 28) - 1;
          v102 = *(v72 - 1) + 12 * (v99 - 1);
          if (v5[17] == 2)
            v103 = *(unsigned __int8 *)(*(_QWORD *)(v312 + 4192) + 32 * (v99 + *(_QWORD *)(v312 + 3264) * v101) - 5);
          else
            v103 = v5[16];
          mc(a1, *(_QWORD *)(v312 + 2024) + 2 * v258, 0, *(_QWORD *)(v312 + 2040), 1, v12, v100, v101, 2u, v237, *(_DWORD *)v102, v312 + 280 * (*(char *)(v102 + 8) - 1) + 32, *(char *)(v102 + 8) - 1, v103);
          v96 = *(_QWORD *)(v312 + 2040);
          v77 = *(_DWORD *)(a1 + 24);
          v71 = *(_DWORD *)(a1 + 28);
          v76 = v96;
          v69 = (_QWORD *)v312;
          v70 = v242;
        }
        else
        {
          v96 = 0;
          v97 = v15;
          v98 = 0;
          if (v97 != 1)
          {
LABEL_154:
            if (v70 == v12)
            {
              v109 = a1;
              v110 = dav1d_filter_2d[4 * *(unsigned __int8 *)(*(_QWORD *)(v109 + 656) + v266 + 384)
                                                    + *(unsigned __int8 *)(*(_QWORD *)(v109 + 656) + v266 + 352)];
              v111 = v71 - 1;
              v113 = v110;
              if (v308[17] == 2)
                v113 = *(unsigned __int8 *)(v69[524] + 32 * (v77 + v69[408] * v111) + 27);
              v114 = v252;
              v112 = *(v72 - 1) + 12 * v77;
              mc(a1, v69[252] + 2 * v258 + 2 * v98, 0, v76, v252, v294, v77, v111, 1u, v230, *(_DWORD *)v112, (uint64_t)&v69[35 * *(char *)(v112 + 8) - 31], *(char *)(v112 + 8) - 1, v113);
              v115 = *(int *)(a1 + 24);
              v116 = *(int *)(a1 + 28) - 1;
              if (v308[17] == 2)
                v110 = *(unsigned __int8 *)(*(_QWORD *)(v312 + 4192) + 32 * (v115 + *(_QWORD *)(v312 + 3264) * v116) + 27);
              v117 = *(v72 - 1) + 12 * (int)v115;
              mc(a1, *(_QWORD *)(v312 + 2024) + 2 * v258 + 2 * v98, 0, *(_QWORD *)(v312 + 2040), v252, v294, v115, v116, 2u, v239, *(_DWORD *)v117, v312 + 280 * (*(char *)(v117 + 8) - 1) + 32, *(char *)(v117 + 8) - 1, v110);
              v69 = (_QWORD *)v312;
              v76 = *(_QWORD *)(v312 + 2040);
              v77 = *(_DWORD *)(a1 + 24);
              v71 = *(_DWORD *)(a1 + 28);
              v96 = v76;
              v70 = v242;
            }
            else
            {
              v109 = a1;
              v114 = v252;
            }
            v118 = 2 * v98;
            v119 = v69[252] + 2 * v98 + 2 * v96 + 2 * v258;
            v39 = v297;
            v15 = (uint64_t)v69;
            mc(v109, v119, 0, v76, v114, v70, v77, v71, 1u, v230, *(_DWORD *)(a3 + 8), v275, *(char *)(a3 + 24), v297);
            v120 = *(_QWORD *)(v15 + 2024) + v118;
            v3 = a3;
            mc(v109, v120 + 2 * v96 + 2 * v258, 0, *(_QWORD *)(v15 + 2040), v114, v242, *(_DWORD *)(v109 + 24), *(_DWORD *)(v109 + 28), 2u, v240, *(_DWORD *)(v3 + 8), v275, *(char *)(v3 + 24), v297);
            LODWORD(v15) = v114;
            v5 = v308;
LABEL_181:
            v5[16] = v39;
            goto LABEL_182;
          }
        }
        v104 = dav1d_filter_2d[4 * *(unsigned __int8 *)(a1 + v267 + 416)
                                              + *(unsigned __int8 *)(a1 + v267 + 384)];
        v106 = v104;
        if (v5[17] == 2)
          v106 = *(unsigned __int8 *)(v69[524] + 32 * (v69[408] * v71 + v77) - 5);
        v105 = *v72 + 12 * (v77 - 1);
        mc(a1, v69[252] + 2 * v258 + 2 * v96, 0, v76, 1, v70, v77 - 1, v71, 1u, v230, *(_DWORD *)v105, (uint64_t)&v69[35 * *(char *)(v105 + 8) - 31], *(char *)(v105 + 8) - 1, v106);
        v108 = *(int *)(a1 + 24);
        v107 = *(int *)(a1 + 28);
        if (v5[17] == 2)
          v104 = *(unsigned __int8 *)(*(_QWORD *)(v312 + 4192) + 32 * (v108 + *(_QWORD *)(v312 + 3264) * v107) - 5);
        v98 = 2;
        mc(a1, *(_QWORD *)(v312 + 2024) + 2 * v258 + 2 * v96, 0, *(_QWORD *)(v312 + 2040), 1, v242, v108 - 1, v107, 2u, v238, *(_DWORD *)(*v72 + 12 * (v108 - 1)), v312 + 280 * (*(char *)(*v72 + 12 * (v108 - 1) + 8) - 1) + 32, *(char *)(*v72 + 12 * (v108 - 1) + 8) - 1, v104);
        v70 = v242;
        v69 = (_QWORD *)v312;
        v76 = *(_QWORD *)(v312 + 2040);
        v77 = *(_DWORD *)(a1 + 24);
        v71 = *(_DWORD *)(a1 + 28);
        goto LABEL_154;
      }
    }
    if (v22 >= v42)
      v81 = v42;
    else
      v81 = v22;
    if (v81 >= 2)
    {
      if (*(_BYTE *)(v3 + 21) == 2 && *(_BYTE *)(v312 + *(char *)(v3 + 24) + 2920))
      {
        v82 = (int *)(a1 + 259520);
        v83 = *(_QWORD *)(v312 + 2016);
        v84 = *(_QWORD *)(v312 + 2040);
        if (*(_BYTE *)(v3 + 22) == 2)
          v85 = (int *)(a1 + 259520);
        else
          v85 = (int *)(*(_QWORD *)(v312 + 24) + 36 * *(char *)(v3 + 24) + 1424);
        goto LABEL_163;
      }
      if (*(_BYTE *)(v3 + 22) == 2 && *v5 >= 2)
      {
        v83 = *(_QWORD *)(v312 + 2016);
        v84 = *(_QWORD *)(v312 + 2040);
        v82 = v5;
        v85 = v5;
LABEL_163:
        warp_affine(a1, v83 + 2 * v258, 0, v84, v290, 1u, v275, v85);
        if (*(_BYTE *)(v3 + 22) != 2)
          v82 = (int *)(*(_QWORD *)(v312 + 24) + 36 * *(char *)(v3 + 24) + 1424);
        warp_affine(a1, *(_QWORD *)(v312 + 2024) + 2 * v258, 0, *(_QWORD *)(v312 + 2040), v290, 2u, v275, v82);
        v86 = v309;
LABEL_166:
        if (*(_BYTE *)(v3 + 28))
        {
          if (*(_BYTE *)(v3 + 28) == 1)
          {
            v121 = *(unsigned __int8 *)(v3 + 18);
            v122 = (char *)&dav1d_ii_masks + 96 * a2 + 32 * v271 + 8 * *(unsigned __int8 *)(v3 + 18);
          }
          else
          {
            v122 = (char *)&dav1d_wedge_masks[96 * a2 + 32 * (uint64_t)v271 + *(unsigned __int8 *)(v3 + 16)];
            v121 = *(unsigned __int8 *)(v3 + 18);
          }
          v292 = *(_QWORD *)v122;
          v285 = a1 + 20672;
          v123 = (_WORD *)(a1 + 28928);
          v124 = v301 + 64;
          v281 = 4 * v22;
          v125 = (8 * v22);
          v276 = 4 * v86;
          if (v121 == 3)
            v121 = 9;
          v315[0] = 0;
          v126 = *(_QWORD *)(v312 + 2016) + 2 * v258;
          v127 = *(_DWORD *)(a1 + 28);
          if (((*(_DWORD *)(v312 + 3304) - 1) & v127) != 0)
            v128 = 0;
          else
            v128 = *(_QWORD *)(v312 + 3248)
                 + 2 * ((*(_DWORD *)(v312 + 3288) * ((v127 >> *(_DWORD *)(v312 + 3300)) - 1)) << 7);
          v129 = *(void (**)(uint64_t, uint64_t, _WORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))(v124 + 8 * dav1d_prepare_intra_edges_16bpc(*(int *)(a1 + 24) >> v311, *(int *)(a1 + 24) >> v311 > (int)v300[3466] >> v311, v127 >> v294, v127 >> v294 > (int)v300[3468] >> v294, (int)v300[3467] >> v311, (int)v300[3469] >> v294, 0, v126, *(_QWORD *)(v312 + 2040), v128, v121, v315, v304, v309, 0, (_WORD *)(a1 + 28928), *(_DWORD *)(v312 + 4156)));
          v129(v285, v125, v123, v281, v276, 0, 0, 0, *(_DWORD *)(v312 + 4156));
          (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))(v301 + 624))(v126, *(_QWORD *)(v312 + 2040), v285, v281, v276, v292);
          v130 = *(unsigned __int8 *)(a3 + 18);
          if (v130 == 3)
            v130 = 9;
          v315[0] = 0;
          v131 = *(_QWORD *)(v312 + 2024) + 2 * v258;
          v132 = *(_DWORD *)(a1 + 28);
          if (((*(_DWORD *)(v312 + 3304) - 1) & v132) != 0)
            v133 = 0;
          else
            v133 = *(_QWORD *)(v312 + 3256)
                 + 2 * ((*(_DWORD *)(v312 + 3288) * ((v132 >> *(_DWORD *)(v312 + 3300)) - 1)) << 7);
          v134 = *(void (**)(uint64_t, uint64_t, _WORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))(v124 + 8 * dav1d_prepare_intra_edges_16bpc(*(int *)(a1 + 24) >> v311, *(int *)(a1 + 24) >> v311 > (int)v300[3466] >> v311, v132 >> v294, v132 >> v294 > (int)v300[3468] >> v294, (int)v300[3467] >> v311, (int)v300[3469] >> v294, 0, v131, *(_QWORD *)(v312 + 2040), v133, v130, v315, v304, v309, 0, v123, *(_DWORD *)(v312 + 4156)));
          v134(v285, v125, v123, v281, v276, 0, 0, 0, *(_DWORD *)(v312 + 4156));
          v135 = v131;
          v22 = v304;
          (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))(v301 + 624))(v135, *(_QWORD *)(v312 + 2040), v285, v281, v276, v292);
          v3 = a3;
          v39 = v297;
        }
        goto LABEL_181;
      }
    }
    v280 = (_DWORD)v15 << ((_DWORD)v15 == v311);
    v269 = (_DWORD)v242 << ((_DWORD)v242 == v12);
    mc(a1, *(_QWORD *)(v312 + 2016) + 2 * v258, 0, *(_QWORD *)(v312 + 2040), v280, v269, *(_DWORD *)(a1 + 24) & ~v311, *(_DWORD *)(a1 + 28) & ~v12, 1u, v230, *(_DWORD *)(v3 + 8), v275, *(char *)(v3 + 24), v39);
    if (*(_BYTE *)(v3 + 22) == 1)
      obmc(a1, *(_QWORD *)(v312 + 2016) + 2 * v258, *(_QWORD *)(v312 + 2040), v290, 1u, v266, v267, v256, v241);
    mc(a1, *(_QWORD *)(v312 + 2024) + 2 * v258, 0, *(_QWORD *)(v312 + 2040), v280, v269, *(_DWORD *)(a1 + 24) & ~v311, *(_DWORD *)(a1 + 28) & ~v12, 2u, v235, *(_DWORD *)(v3 + 8), v275, *(char *)(v3 + 24), v39);
    v86 = v309;
    if (*(_BYTE *)(v3 + 22) == 1)
      obmc(a1, *(_QWORD *)(v312 + 2024) + 2 * v258, *(_QWORD *)(v312 + 2040), v290, 2u, v266, v267, v256, v241);
    goto LABEL_166;
  }
  v29 = *(unsigned __int8 *)(a3 + 27);
  v30 = a1 + 9280;
  v296 = 4 * v15;
  v31 = *(char *)(a3 + 24);
  if (*(_BYTE *)(a3 + 21) == 6 && *(_BYTE *)(v6 + v31 + 2920))
    warp_affine(a1, 0, a1 + 9280, v296, v14, 0, v6 + 280 * *(char *)(a3 + 24) + 32, (int *)(v25 + 36 * *(char *)(a3 + 24) + 1424));
  else
    mc(a1, 0, a1 + 9280, 0, v15, v16, v9, v10, 0, v230, *(_DWORD *)(a3 + 8), v6 + 280 * *(char *)(a3 + 24) + 32, v31, v29);
  v32 = *(char *)(v3 + 25);
  v33 = v312 + 280 * v32 + 32;
  if (*(_BYTE *)(v3 + 21) != 6 || !*(_BYTE *)(v312 + v32 + 2920))
  {
    mc(a1, 0, a1 + 42048, 0, v15, v242, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), 0, v230, *(_DWORD *)(v3 + 12), v33, v32, v29);
    v34 = *(unsigned __int8 *)(v3 + 20) - 1;
    v274 = v30;
    v278 = v29;
LABEL_30:
    switch(v34)
    {
      case 0u:
        v35 = *(unsigned __int8 *)(v312 - *(char *)(v3 + 24) + 8 * *(char *)(v3 + 24) + *(char *)(v3 + 25) + 4104);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(v301 + 584))(v24, *(_QWORD *)(v312 + 2032), a1 + 9280, a1 + 42048, v296, (4 * v242), v35, *(unsigned int *)(v312 + 4156));
        v36 = 0;
        v27 = a3;
        if (v20)
          goto LABEL_56;
        goto LABEL_183;
      case 1u:
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v301 + 576))(v24, *(_QWORD *)(v312 + 2032), a1 + 9280, a1 + 42048, v296, (4 * v242), *(unsigned int *)(v312 + 4156));
        v35 = 0;
        v36 = 0;
        v27 = a3;
        if (v20)
          goto LABEL_56;
        goto LABEL_183;
      case 2u:
        v36 = a1 + 74816;
        (*(void (**)(uint64_t, _QWORD, unint64_t, unint64_t, uint64_t, _QWORD, uint64_t))(v301 + 8 * v21 + 600))(v24, *(_QWORD *)(v312 + 2032), v30 + ((unint64_t)*(unsigned __int8 *)(v3 + 17) << 15), v30 + ((unint64_t)(*(_BYTE *)(v3 + 17) == 0) << 15), v296, (4 * v242), v36);
        v35 = 0;
        v27 = a3;
        if (v20)
          goto LABEL_56;
        goto LABEL_183;
      case 3u:
        v47 = 4 * v242;
        (*(void (**)(uint64_t, _QWORD, unint64_t, unint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(v301 + 592))(v24, *(_QWORD *)(v312 + 2032), v30 + ((unint64_t)*(unsigned __int8 *)(v3 + 17) << 15), v30 + ((unint64_t)(*(_BYTE *)(v3 + 17) == 0) << 15), v296, (4 * v242), dav1d_wedge_masks[96 * a2 + *(unsigned __int8 *)(v3 + 16)], *(unsigned int *)(v312 + 4156));
        v27 = v3;
        if (!v20)
          goto LABEL_183;
        v50 = v21;
        v35 = 0;
        v284 = dav1d_wedge_masks[96 * a2
                               + 32 * v50
                               + 16 * (unint64_t)*(unsigned __int8 *)(v3 + 17)
                               + *(unsigned __int8 *)(v3 + 16)];
        v48 = v311;
        v49 = v312;
        v46 = v242;
        break;
      default:
        goto LABEL_27;
    }
    goto LABEL_59;
  }
  warp_affine(a1, 0, a1 + 42048, v296, v14, 0, v33, (int *)(*(_QWORD *)(v312 + 24) + 36 * (int)v32 + 1424));
  v34 = *(unsigned __int8 *)(v3 + 20) - 1;
  v274 = v30;
  v278 = v29;
  if (v34 <= 3)
    goto LABEL_30;
LABEL_27:
  v35 = 0;
  v36 = 0;
  v27 = a3;
  if (!v20)
    goto LABEL_183;
LABEL_56:
  v284 = v36;
  v46 = v242;
  v47 = 4 * v242;
  v3 = v27;
  v48 = v311;
  v49 = v312;
LABEL_59:
  if (v22 >= v309)
    v51 = v309;
  else
    v51 = v22;
  v298 = v296 >> v48;
  v52 = v47 >> v294;
  v53 = a1 + 42048;
  v54 = *(char *)(v3 + 24);
  v55 = v49 + 280 * v54 + 32;
  if (v51 > 1)
  {
    if (*(_BYTE *)(v3 + 21) == 6 && *(_BYTE *)(v49 + v54 + 2920))
      warp_affine(a1, 0, v274, v298, v290, 1u, v55, (int *)(*(_QWORD *)(v49 + 24) + 36 * (int)v54 + 1424));
    else
      mc(a1, 0, v274, 0, v15, v46, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), 1u, v230, *(_DWORD *)(v3 + 8), v55, v54, v278);
    v60 = *(char *)(v3 + 25);
    v61 = v312 + 280 * v60 + 32;
    if (*(_BYTE *)(v3 + 21) == 6 && *(_BYTE *)(v312 + v60 + 2920))
      warp_affine(a1, 0, a1 + 42048, v298, v290, 1u, v61, (int *)(*(_QWORD *)(v312 + 24) + 36 * (int)v60 + 1424));
    else
      mc(a1, 0, a1 + 42048, 0, v15, v242, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), 1u, v230, *(_DWORD *)(v3 + 12), v61, v60, v278);
    v62 = v312;
    v63 = *(_QWORD *)(v312 + 2016) + 2 * v258;
    v64 = *(unsigned __int8 *)(v3 + 20);
    if ((v64 - 3) < 2)
    {
      (*(void (**)(uint64_t, _QWORD, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v301 + 592))(v63, *(_QWORD *)(v312 + 2040), v274 + ((unint64_t)*(unsigned __int8 *)(v3 + 17) << 15), v274 + ((unint64_t)(*(_BYTE *)(v3 + 17) == 0) << 15), v298, v52, v284, *(unsigned int *)(v312 + 4156));
    }
    else if (v64 == 1)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v301 + 584))(v63, *(_QWORD *)(v312 + 2040), v274, a1 + 42048, v298, v52, v35, *(unsigned int *)(v312 + 4156));
    }
    else
    {
      if (v64 != 2)
      {
LABEL_127:
        v90 = *(char *)(v3 + 24);
        v91 = v62 + 280 * v90 + 32;
        if (*(_BYTE *)(v3 + 21) == 6 && *(_BYTE *)(v62 + v90 + 2920))
          warp_affine(a1, 0, v274, v298, v290, 2u, v91, (int *)(*(_QWORD *)(v62 + 24) + 36 * (int)v90 + 1424));
        else
          mc(a1, 0, v274, 0, v15, v242, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), 2u, v230, *(_DWORD *)(v3 + 8), v91, v90, v278);
        v92 = *(char *)(v3 + 25);
        v93 = v312 + 280 * v92 + 32;
        if (*(_BYTE *)(v3 + 21) == 6 && *(_BYTE *)(v312 + v92 + 2920))
          warp_affine(a1, 0, a1 + 42048, v298, v290, 2u, v93, (int *)(*(_QWORD *)(v312 + 24) + 36 * (int)v92 + 1424));
        else
          mc(a1, 0, a1 + 42048, 0, v15, v242, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), 2u, v230, *(_DWORD *)(v3 + 12), v93, v92, v278);
        v94 = *(_QWORD *)(v312 + 2024) + 2 * v258;
        v95 = *(unsigned __int8 *)(v3 + 20);
        if ((v95 - 3) < 2)
        {
          (*(void (**)(uint64_t, _QWORD, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v301 + 592))(v94, *(_QWORD *)(v312 + 2040), v274 + ((unint64_t)*(unsigned __int8 *)(v3 + 17) << 15), v274 + ((unint64_t)(*(_BYTE *)(v3 + 17) == 0) << 15), v298, v52, v284, *(unsigned int *)(v312 + 4156));
        }
        else
        {
          if (v95 != 1)
          {
            v27 = v3;
            if (v95 == 2)
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v301 + 576))(v94, *(_QWORD *)(v312 + 2040), v274, a1 + 42048, v298, v47 >> v294, *(unsigned int *)(v312 + 4156));
            goto LABEL_183;
          }
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v301 + 584))(v94, *(_QWORD *)(v312 + 2040), v274, a1 + 42048, v298, v52, v35, *(unsigned int *)(v312 + 4156));
        }
LABEL_182:
        v27 = v3;
        goto LABEL_183;
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v301 + 576))(v63, *(_QWORD *)(v312 + 2040), v274, a1 + 42048, v298, v52, *(unsigned int *)(v312 + 4156));
    }
    v62 = v312;
    goto LABEL_127;
  }
  v291 = v47 >> v294;
  v268 = v35;
  v56 = v46;
  mc(a1, 0, v274, 0, v15, v46, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), 1u, v230, *(_DWORD *)(v3 + 8), v55, v54, v278);
  v272 = a1 + 42048;
  mc(a1, 0, a1 + 42048, 0, v15, v56, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), 1u, v233, *(_DWORD *)(a3 + 12), v312 + 280 * *(char *)(a3 + 25) + 32, *(char *)(a3 + 25), v278);
  v57 = v312;
  v58 = *(_QWORD *)(v312 + 2016) + 2 * v258;
  v59 = *(unsigned __int8 *)(a3 + 20);
  if ((v59 - 3) < 2)
  {
    (*(void (**)(uint64_t, _QWORD, unint64_t, unint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(v301 + 592))(v58, *(_QWORD *)(v312 + 2040), v274 + ((unint64_t)*(unsigned __int8 *)(a3 + 17) << 15), v274 + ((unint64_t)(*(_BYTE *)(a3 + 17) == 0) << 15), v298, v52, v284, *(unsigned int *)(v312 + 4156));
  }
  else if (v59 == 1)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(v301 + 584))(v58, *(_QWORD *)(v312 + 2040), v274, v53, v298, v52, v268, *(unsigned int *)(v312 + 4156));
  }
  else
  {
    if (v59 != 2)
      goto LABEL_120;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v301 + 576))(v58, *(_QWORD *)(v312 + 2040), v274, v53, v298, v52, *(unsigned int *)(v312 + 4156));
  }
  v57 = v312;
LABEL_120:
  v87 = v57 + 32;
  mc(a1, 0, v274, 0, v15, v242, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), 2u, v234, *(_DWORD *)(a3 + 8), v57 + 32 + 280 * *(char *)(a3 + 24), *(char *)(a3 + 24), v278);
  v27 = a3;
  mc(a1, 0, v272, 0, v15, v242, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), 2u, v236, *(_DWORD *)(a3 + 12), v87 + 280 * *(char *)(a3 + 25), *(char *)(a3 + 25), v278);
  v88 = *(_QWORD *)(v312 + 2024) + 2 * v258;
  v89 = *(unsigned __int8 *)(a3 + 20);
  if ((v89 - 3) < 2)
  {
    (*(void (**)(uint64_t, _QWORD, unint64_t, unint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(v301 + 592))(v88, *(_QWORD *)(v312 + 2040), v274 + ((unint64_t)*(unsigned __int8 *)(a3 + 17) << 15), v274 + ((unint64_t)(*(_BYTE *)(a3 + 17) == 0) << 15), v298, v291, v284, *(unsigned int *)(v312 + 4156));
  }
  else if (v89 == 1)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(v301 + 584))(v88, *(_QWORD *)(v312 + 2040), v274, v272, v298, v291, v268, *(unsigned int *)(v312 + 4156));
  }
  else if (v89 == 2)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v301 + 576))(v88, *(_QWORD *)(v312 + 2040), v274, v272, v298, v291, *(unsigned int *)(v312 + 4156));
  }
LABEL_183:
  if (!*(_BYTE *)(v27 + 6))
  {
    v136 = v27;
    v137 = *(unsigned __int8 *)(v27 + 7);
    v138 = *(unsigned __int8 *)(v27 + 26);
    v314[0] = *(unsigned __int8 *)(v27 + 29);
    v314[1] = *(_WORD *)(v27 + 30);
    v139 = a1;
    LOBYTE(v140) = v311;
    v141 = v312;
    v142 = v294;
    if (!(_DWORD)v242)
      return 0;
    v257 = v306 == 1;
    if (!(_DWORD)v15)
      return 0;
    v250 = 0;
    v254 = 0;
    v143 = 0;
    v247 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v138;
    v264 = v247 + 1;
    v307 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v137;
    v310 = v307 + 1;
    v299 = v301 + 680;
    v144 = *(_DWORD *)(a1 + 28);
    v251 = v20;
LABEL_190:
    v145 = 0;
    v249 = v143 != 0;
    v146 = 2 * v143;
    v147 = v143 + 16;
    v148 = v241;
    if (v241 >= (int)v143 + 16)
      v148 = v143 + 16;
    v149 = v148;
    v259 = 4 * v143;
    v260 = v143;
    v243 = v143 + 16;
    if ((v241 + v294) >> v294 >= (int)(v147 >> v142))
      v150 = v147 >> v142;
    else
      v150 = (v241 + v294) >> v294;
    v261 = v143 >> v142;
    v248 = 2 * (v143 >> v142 << v142);
    v253 = 2 * v143;
    v263 = v148;
    v273 = v150;
    while (1)
    {
      v152 = *(_QWORD *)(v141 + 2032);
      v153 = v24 + 2 * v146 * v152;
      v154 = v144 + v143;
      *(_DWORD *)(v139 + 28) = v144 + v143;
      v277 = v145;
      if (v143 >= v149)
      {
        v157 = v143;
        *(_DWORD *)(v139 + 28) = v144;
        if ((v20 & 1) != 0)
          goto LABEL_214;
      }
      else
      {
        v302 = v145 != 0;
        if ((int)v256 >= (int)(v145 + 16))
          v155 = v145 + 16;
        else
          v155 = v256;
        if ((int)v145 >= v155)
        {
          v164 = *v264;
          v153 = v24 + v250 * v152;
          v157 = v143;
          do
          {
            v157 += v164;
            v153 += 4 * v152 * v164;
          }
          while (v157 < (int)v149);
          v154 = v144 + v157;
          v136 = a3;
          *(_DWORD *)(v139 + 28) = v144;
          if ((v20 & 1) != 0)
            goto LABEL_214;
        }
        else
        {
          v156 = *(_DWORD *)(v139 + 24);
          v157 = v143;
          v15 = v139;
          v158 = v249;
          do
          {
            *(_DWORD *)(v15 + 24) = v156 + v145;
            v159 = v302;
            do
            {
              v160 = v153;
              read_coef_tree(v15, a2, a3, *(unsigned __int8 *)(a3 + 26), 0, (uint64_t)v314, v159, v158, v153 + 8 * v145);
              v153 = v160;
              v161 = *v247;
              v162 = *(_DWORD *)(v15 + 24) + v161;
              *(_DWORD *)(v15 + 24) = v162;
              v145 += v161;
              ++v159;
            }
            while ((int)v145 < v155);
            v141 = v312;
            v152 = *(_QWORD *)(v312 + 2032);
            v149 = v263;
            v163 = *v264;
            v153 = v160 + 4 * v152 * v163;
            v156 = v162 - v145;
            v154 = *(_DWORD *)(v15 + 28) + v163;
            *(_DWORD *)(v15 + 24) = v156;
            *(_DWORD *)(v15 + 28) = v154;
            v157 += v163;
            ++v158;
            v145 = v277;
          }
          while (v157 < (int)v263);
          v139 = v15;
          LODWORD(v15) = v252;
          v146 = v253;
          v136 = a3;
          v142 = v294;
          LOBYTE(v140) = v311;
          v143 = v260;
          v150 = v273;
          LOBYTE(v20) = v251;
          v144 = v154 - v157;
          *(_DWORD *)(v139 + 28) = v154 - v157;
          if ((v251 & 1) != 0)
          {
LABEL_214:
            v151 = v145 + 16;
            if ((int)(v256 + v311) >> v311 >= (int)((v145 + 16) >> v140))
              v165 = (v145 + 16) >> v140;
            else
              v165 = (int)(v256 + v311) >> v311;
            if (v261 >= v150)
            {
              v144 = v254 + v154 - (v248 + v157);
              *(_DWORD *)(v139 + 28) = v144;
            }
            else
            {
              v255 = v153;
              v166 = v145 >> v140;
              if ((int)(v145 >> v140) >= v165)
              {
                v199 = v166 << v140;
                v200 = v145 - (v166 << v140);
                v201 = *v310;
                v202 = v201 << v142;
                v203 = *(_DWORD *)(v139 + 24);
                v204 = v254 + v154 - v157;
                v205 = v145 + v203 - v199;
                v206 = v261;
                do
                {
                  v207 = v205;
                  v206 += v201;
                  v204 += v202;
                  v203 += v200;
                  v205 += v200;
                }
                while (v206 < v150);
                v208 = v204 - (v206 << v142);
                v209 = v261;
                do
                {
                  v208 += v202;
                  v209 += v201;
                  v207 += v200;
                }
                while (v209 < v150);
                v144 = v208 - (v209 << v142);
                *(_DWORD *)(v139 + 24) = v207;
                *(_DWORD *)(v139 + 28) = v144;
                v153 = v255;
              }
              else
              {
                v270 = v145 >> v140;
                v244 = v145 + 16;
                v245 = v152;
                v246 = v157;
                v167 = 0;
                v168 = *(_QWORD *)(v141 + 2040);
                v169 = *(_DWORD *)(v139 + 24);
                v170 = 1;
                do
                {
                  v262 = v170;
                  v171 = v167 + 1;
                  v172 = *(_QWORD *)(v141 + 8 * (v167 + 1) + 2008);
                  *(_DWORD *)(v139 + 28) = v144 + v143;
                  v303 = v172 + 2 * v258 + 2 * ((v259 * (v168 >> 1)) >> v257);
                  v173 = v261;
                  do
                  {
                    v175 = v169 + v145;
                    *(_DWORD *)(v139 + 24) = v169 + v145;
                    v293 = v266 | (32 * ((v173 << v142) + v267));
                    v282 = v173;
                    v176 = (v173 + v265);
                    v177 = v167;
                    v178 = v139 + 32 * v167 + 96;
                    v179 = (unsigned __int8 *)(v178 + v176);
                    v286 = (_QWORD *)(v178 + (v176 + 8));
                    v180 = v270;
                    do
                    {
                      v183 = v308[17];
                      if (v183)
                      {
                        v184 = &v300[4 * (v183 & 1)];
                        v182 = *((_QWORD *)v184 + 1738);
                        v185 = *v307;
                        v186 = *v310;
                        *((_QWORD *)v184 + 1738) = v182 + ((v186 * *v307) << 6);
                        v187 = *(_QWORD *)(v141 + 4200) + 10 * (*(_QWORD *)(v141 + 3264) * *(int *)(v139 + 28) + v175);
                        v188 = *(__int16 *)(v187 + 2 * v171);
                        v315[0] = *(unsigned __int8 *)(v187 + v171 + 6);
                        if ((v188 & 0x80000000) == 0)
                        {
LABEL_225:
                          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(v299
                                                                                            + 136
                                                                                            * *(unsigned __int8 *)(v136 + 7)
                                                                                            + 8
                                                                                            * v315[0]))(v303 + 2 * (4 * v180), *(_QWORD *)(v141 + 2040), v182, v188, *(unsigned int *)(v141 + 4156));
                          LOBYTE(v140) = v311;
                          v141 = v312;
                        }
                      }
                      else
                      {
                        v313 = 0;
                        v315[0] = *(unsigned __int8 *)(v139 + v293 + (v180 << v140) + 8256);
                        v189 = v136;
                        v190 = (v180 + v287);
                        v191 = decode_coefs(v139, *(_QWORD *)(v139 + 656) + 32 * v177 + v190 + 64, (uint64_t)v179, *(unsigned __int8 *)(v189 + 7), a2, v189, 0, v171, a1 + 1024, (unsigned int *)v315, &v313);
                        v141 = v312;
                        v188 = v191;
                        v186 = *v310;
                        v192 = (*(_DWORD *)(v312 + 3284) + v294 - *(_DWORD *)(v139 + 28)) >> v294;
                        if ((int)v186 < v192)
                          v192 = *v310;
                        switch(v192)
                        {
                          case 1:
                            LODWORD(v193) = v313;
                            *v179 = v313;
                            break;
                          case 2:
                            LODWORD(v193) = v313;
                            *(_WORD *)v179 = v313 | (v313 << 8);
                            break;
                          case 4:
                            LODWORD(v193) = v313;
                            *(_DWORD *)v179 = 16843009 * v313;
                            break;
                          case 8:
                            LODWORD(v193) = v313;
                            *(_QWORD *)v179 = 0x101010101010101 * v313;
                            break;
                          case 16:
                            v193 = v313;
                            *(_QWORD *)v179 = 0x101010101010101 * v313;
                            *v286 = 0x101010101010101 * v193;
                            break;
                          default:
                            LODWORD(v193) = v313;
                            memset(v179, v313, v192);
                            v141 = v312;
                            break;
                        }
                        v140 = v311;
                        v185 = *v307;
                        v194 = (*(_DWORD *)(v141 + 3280) + v140 - *(_DWORD *)(a1 + 24)) >> v140;
                        if (v185 < v194)
                          v194 = *v307;
                        switch(v194)
                        {
                          case 1:
                            v182 = a1 + 1024;
                            *(_BYTE *)(*(_QWORD *)(a1 + 656) + 32 * v177 + v190 + 64) = v193;
                            v139 = a1;
                            v136 = a3;
                            if ((v188 & 0x80000000) == 0)
                              goto LABEL_225;
                            break;
                          case 2:
                            v195 = v193 | ((_WORD)v193 << 8);
                            v182 = a1 + 1024;
                            v139 = a1;
                            *(_WORD *)(*(_QWORD *)(a1 + 656) + 32 * v177 + v190 + 64) = v195;
                            v136 = a3;
                            if ((v188 & 0x80000000) == 0)
                              goto LABEL_225;
                            break;
                          case 4:
                            v197 = 16843009 * v193;
                            v182 = a1 + 1024;
                            v139 = a1;
                            *(_DWORD *)(*(_QWORD *)(a1 + 656) + 32 * v177 + v190 + 64) = v197;
                            v136 = a3;
                            if ((v188 & 0x80000000) == 0)
                              goto LABEL_225;
                            break;
                          case 8:
                            v198 = 0x101010101010101 * v193;
                            v182 = a1 + 1024;
                            v139 = a1;
                            *(_QWORD *)(*(_QWORD *)(a1 + 656) + 32 * v177 + v190 + 64) = v198;
                            v136 = a3;
                            if ((v188 & 0x80000000) == 0)
                              goto LABEL_225;
                            break;
                          case 16:
                            v181 = 0x101010101010101 * v193;
                            v182 = a1 + 1024;
                            v139 = a1;
                            *(_QWORD *)(*(_QWORD *)(a1 + 656) + 32 * v177 + v190 + 64) = v181;
                            *(_QWORD *)(*(_QWORD *)(a1 + 656) + 32 * v177 + (v190 + 8) + 64) = v181;
                            v136 = a3;
                            if ((v188 & 0x80000000) == 0)
                              goto LABEL_225;
                            break;
                          default:
                            v196 = v193;
                            v139 = a1;
                            memset((void *)(*(_QWORD *)(a1 + 656) + 32 * v177 + v190 + 64), v196, v194);
                            LOBYTE(v140) = v311;
                            v141 = v312;
                            v136 = a3;
                            v182 = a1 + 1024;
                            if ((v188 & 0x80000000) == 0)
                              goto LABEL_225;
                            break;
                        }
                      }
                      v175 = *(_DWORD *)(v139 + 24) + (v185 << v140);
                      *(_DWORD *)(v139 + 24) = v175;
                      v180 += v185;
                    }
                    while (v180 < v165);
                    v168 = *(_QWORD *)(v141 + 2040);
                    v303 += 4 * v186 * v168;
                    v169 = v175 - (v180 << v140);
                    v142 = v294;
                    v174 = *(_DWORD *)(v139 + 28) + ((_DWORD)v186 << v294);
                    *(_DWORD *)(v139 + 24) = v169;
                    *(_DWORD *)(v139 + 28) = v174;
                    v173 = v282 + v186;
                    v150 = v273;
                    v145 = v277;
                    v167 = v177;
                  }
                  while (v173 < v273);
                  v170 = 0;
                  v144 = v174 - (v173 << v294);
                  *(_DWORD *)(v139 + 28) = v144;
                  v167 = 1;
                  v143 = v260;
                }
                while ((v262 & 1) != 0);
                LOBYTE(v20) = v251;
                LODWORD(v15) = v252;
                v146 = v253;
                v149 = v263;
                v153 = v255;
                v157 = v246;
                v152 = v245;
                v151 = v244;
              }
            }
            goto LABEL_197;
          }
        }
      }
      v151 = v145 + 16;
LABEL_197:
      v24 = v153 - 8 * (v152 >> 1) * v157;
      v145 = v151;
      if (v151 >= v15)
      {
        v254 += 32;
        v250 += 64;
        v143 = v243;
        if (v243 >= v242)
          return 0;
        goto LABEL_190;
      }
    }
  }
  switch((int)v242)
  {
    case 1:
      *(_BYTE *)(a1 + v267 + 64) = 64;
      break;
    case 2:
      *(_WORD *)(a1 + v267 + 64) = 16448;
      break;
    case 4:
      *(_DWORD *)(a1 + v267 + 64) = 1077952576;
      break;
    case 8:
      *(_QWORD *)(a1 + v267 + 64) = 0x4040404040404040;
      break;
    case 16:
      *(_QWORD *)&v210 = 0x4040404040404040;
      *((_QWORD *)&v210 + 1) = 0x4040404040404040;
      *(_OWORD *)(a1 + v267 + 64) = v210;
      break;
    case 32:
      *(_QWORD *)&v211 = 0x4040404040404040;
      *((_QWORD *)&v211 + 1) = 0x4040404040404040;
      *(_OWORD *)(a1 + 64 + v267) = v211;
      *(_OWORD *)(a1 + 64 + (v267 + 16)) = v211;
      break;
    default:
      break;
  }
  switch((int)v15)
  {
    case 1:
      *(_BYTE *)(*(_QWORD *)(a1 + 656) + v266 + 32) = 64;
      break;
    case 2:
      *(_WORD *)(*(_QWORD *)(a1 + 656) + v266 + 32) = 16448;
      break;
    case 4:
      *(_DWORD *)(*(_QWORD *)(a1 + 656) + v266 + 32) = 1077952576;
      break;
    case 8:
      v212 = *(_QWORD *)(a1 + 656) + v266;
      goto LABEL_272;
    case 16:
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v266 + 32) = 0x4040404040404040;
      v213 = *(_QWORD *)(a1 + 656);
      v214 = (v266 + 8);
      goto LABEL_271;
    case 32:
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v266 + 32) = 0x4040404040404040;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + (v266 + 8) + 32) = 0x4040404040404040;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + (v266 + 16) + 32) = 0x4040404040404040;
      v213 = *(_QWORD *)(a1 + 656);
      v214 = (v266 + 24);
LABEL_271:
      v212 = v213 + v214;
LABEL_272:
      *(_QWORD *)(v212 + 32) = 0x4040404040404040;
      break;
    default:
      break;
  }
  if (v20)
  {
    switch(v309)
    {
      case 1:
        v215 = a1 + v265;
        *(_BYTE *)(v215 + 96) = 64;
        *(_BYTE *)(v215 + 128) = 64;
        break;
      case 2:
        v216 = a1 + v265;
        *(_WORD *)(v216 + 96) = 16448;
        *(_WORD *)(v216 + 128) = 16448;
        break;
      case 4:
        v217 = a1 + v265;
        *(_DWORD *)(v217 + 96) = 1077952576;
        *(_DWORD *)(v217 + 128) = 1077952576;
        break;
      case 8:
        v218 = a1 + v265;
        *(_QWORD *)(v218 + 96) = 0x4040404040404040;
        *(_QWORD *)(v218 + 128) = 0x4040404040404040;
        break;
      case 16:
        v219 = a1 + v265;
        *(_QWORD *)&v220 = 0x4040404040404040;
        *((_QWORD *)&v220 + 1) = 0x4040404040404040;
        *(_OWORD *)(v219 + 96) = v220;
        *(_OWORD *)(v219 + 128) = v220;
        break;
      case 32:
        v221 = a1 + 96;
        *(_QWORD *)&v222 = 0x4040404040404040;
        *((_QWORD *)&v222 + 1) = 0x4040404040404040;
        *(_OWORD *)(v221 + v265) = v222;
        v223 = v265 + 16;
        *(_OWORD *)(v221 + v223) = v222;
        v224 = a1 + 128;
        *(_OWORD *)(v224 + v265) = v222;
        *(_OWORD *)(v224 + v223) = v222;
        break;
      default:
        break;
    }
    switch(v22)
    {
      case 1:
        *(_BYTE *)(*(_QWORD *)(a1 + 656) + v287 + 64) = 64;
        *(_BYTE *)(*(_QWORD *)(a1 + 656) + v287 + 96) = 64;
        return 0;
      case 2:
        *(_WORD *)(*(_QWORD *)(a1 + 656) + v287 + 64) = 16448;
        *(_WORD *)(*(_QWORD *)(a1 + 656) + v287 + 96) = 16448;
        return 0;
      case 4:
        *(_DWORD *)(*(_QWORD *)(a1 + 656) + v287 + 64) = 1077952576;
        *(_DWORD *)(*(_QWORD *)(a1 + 656) + v287 + 96) = 1077952576;
        return 0;
      case 8:
        v225 = v287;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v287 + 64) = 0x4040404040404040;
        goto LABEL_289;
      case 16:
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v287 + 64) = 0x4040404040404040;
        v225 = v287 + 8;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v225 + 64) = 0x4040404040404040;
        v226 = *(_QWORD *)(a1 + 656) + v287;
        goto LABEL_288;
      case 32:
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v287 + 64) = 0x4040404040404040;
        v227 = v287 + 8;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v227 + 64) = 0x4040404040404040;
        v228 = v287 + 16;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v228 + 64) = 0x4040404040404040;
        v225 = v287 + 24;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v225 + 64) = 0x4040404040404040;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v287 + 96) = 0x4040404040404040;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v227 + 96) = 0x4040404040404040;
        v226 = *(_QWORD *)(a1 + 656) + v228;
LABEL_288:
        *(_QWORD *)(v226 + 96) = 0x4040404040404040;
LABEL_289:
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v225 + 96) = 0x4040404040404040;
        break;
      default:
        return 0;
    }
  }
  return 0;
}

uint64_t mc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned int a9, int a10, int a11, uint64_t a12, int a13, unsigned int a14)
{
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  char v25;
  char v26;
  unint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  char v31;
  int v32;
  char v33;
  int v34;
  int v35;
  int v37;
  _DWORD *v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  int v47;
  __int16 v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  BOOL v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int *v89;
  uint64_t v91;
  uint64_t v92;

  v18 = *(_QWORD *)(a1 + 8);
  if (a9)
  {
    v19 = *(_DWORD *)(v18 + 2056);
    v20 = v19 == 1;
    v21 = v19 != 3;
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v22 = 4u >> v21;
  v23 = 4u >> v20;
  v24 = a11 >> 16;
  v25 = v21 ^ 1;
  v26 = v20 ^ 1;
  v27 = *(_QWORD *)(a12 + 8 * (a9 != 0) + 40);
  v29 = *(_DWORD *)(a12 + 56);
  v28 = *(_DWORD *)(a12 + 60);
  if (v29 != *(_DWORD *)(v18 + 2048) || v28 != *(_DWORD *)(v18 + 2052))
  {
    v37 = (v24 << v25) + 16 * a7 * v22;
    v38 = (_DWORD *)(v18 + 16 * a13);
    v39 = 8 * v38[748] - 0x20000 + (int)v38[748] * (uint64_t)v37;
    v40 = v39 < 0;
    if (v39 < 0)
      v39 = -v39;
    v41 = (unint64_t)(v39 + 128) >> 8;
    if (v40)
      v42 = -(int)v41;
    else
      v42 = v41;
    v43 = v42 + 32;
    v44 = 8 * v38[750] - 0x20000 + (int)v38[750] * (uint64_t)(int)(((__int16)a11 << v26) + 16 * a8 * v23);
    v45 = v44 < 0;
    if (v44 < 0)
      v44 = -v44;
    v46 = (unint64_t)(v44 + 128) >> 8;
    if (v45)
      v47 = -(int)v46;
    else
      v47 = v46;
    v48 = v47 + 32;
    v49 = v43 >> 10;
    v50 = ((v47 + 32) >> 10);
    v51 = v22 * a5;
    v52 = v38[749];
    v53 = (int)(v43 + v52 * (v51 - 1)) >> 10;
    v54 = v23 * a6;
    v55 = v38[751];
    v56 = (int)(v47 + 32 + v55 * (v54 - 1)) >> 10;
    v57 = (v29 + v21) >> v21;
    v58 = (v28 + v20) >> v20;
    if (v42 >= 3040
      && (v47 >= 3040 ? (v59 = v53 + 5 <= v57) : (v59 = 0), v59 ? (v60 = v56 + 5 <= v58) : (v60 = 0), v60))
    {
      v61 = *(_QWORD *)(a12 + 8 * (a9 != 0) + 40);
      v62 = *(_QWORD *)(a12 + 8 * a9 + 16) + 2 * (v27 >> 1) * v50 + 2 * v49;
      v63 = *(_QWORD *)(v18 + 3144);
      v64 = v43 & 0x3FF;
      v65 = v48 & 0x3FF;
      if (a2)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(v63 + 8 * a14 + 336))(a2, a4, v62, v61, v51, v54, v64, v65, __PAIR64__(v55, v52));
    }
    else
    {
      v91 = a2;
      v67 = v38 + 748;
      v89 = v38 + 751;
      v68 = a4;
      v61 = 640;
      (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, unint64_t))(*(_QWORD *)(v18 + 3144) + 664))((int)(v53 - v49 + 8), v56 - (int)v50 + 8, v57, v58, (int)(v49 - 3), (int)v50 - 3, a1 + 91200, 640, *(_QWORD *)(a12 + 8 * a9 + 16), v27);
      a4 = v68;
      v62 = a1 + 93126;
      v52 = v67[1];
      a2 = v91;
      v55 = *v89;
      v63 = *(_QWORD *)(v18 + 3144);
      v64 = v43 & 0x3FF;
      v65 = v48 & 0x3FF;
      if (v91)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(v63 + 8 * a14 + 336))(a2, a4, v62, v61, v51, v54, v64, v65, __PAIR64__(v55, v52));
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 8 * a14 + 496))(a3, v62, v61, v51, v54, v64, v65);
  }
  v30 = (0xFu >> v25) & v24;
  if (v21)
    v31 = 4;
  else
    v31 = 3;
  v32 = (v24 >> v31) + v22 * a7;
  if (v20)
    v33 = 4;
  else
    v33 = 3;
  if (*(_QWORD *)(a12 + 16) == *(_QWORD *)(v18 + 2008))
  {
    v34 = 4 * *(_DWORD *)(v18 + 3280);
    v35 = 4 * *(_DWORD *)(v18 + 3284);
  }
  else
  {
    v34 = v29 + v21;
    v35 = v28 + v20;
  }
  v86 = a4;
  v69 = (0xFu >> v26) & a11;
  v70 = ((__int16)a11 >> v33) + v23 * a8;
  v71 = v35 >> v20;
  v72 = v34 >> v21;
  if (v30)
    v73 = 3;
  else
    v73 = 0;
  v88 = (0xFu >> v26) & a11;
  v87 = v30;
  if (v32 >= v73
    && (v69 ? (v74 = 3) : (v74 = 0),
        (int)v70 >= v74
     && (int)(v32 + v22 * a5 + 4 * (v30 != 0)) <= v72
     && (int)(v70 + v23 * a6 + 4 * (v69 != 0)) <= v71))
  {
    v92 = *(_QWORD *)(a12 + 8 * (a9 != 0) + 40);
    v83 = *(_QWORD *)(a12 + 8 * a9 + 16) + 2 * (v27 >> 1) * v70 + 2 * v32;
    v84 = *(_QWORD *)(v18 + 3144);
    if (a2)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v84 + 8 * a14 + 256))(a2, v86, v83, v92, v22 * a5, v23 * a6, v87 << v25, v88 << v26);
  }
  else
  {
    v75 = a1 + 91200;
    if (v30)
      v76 = 7;
    else
      v76 = 0;
    if (v69)
      v77 = 7;
    else
      v77 = 0;
    v78 = v71;
    if (v69)
      v79 = -3;
    else
      v79 = 0;
    v80 = a2;
    if (v69)
      v81 = 576;
    else
      v81 = 0;
    v92 = 384;
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, unint64_t))(*(_QWORD *)(v18 + 3144) + 664))(v76 + v22 * a5, v77 + v23 * a6, v72, v78, v32 - v73, v79 + (int)v70, v75, 384, *(_QWORD *)(a12 + 8 * a9 + 16), v27);
    v82 = v73 | v81;
    a2 = v80;
    v83 = v75 + 2 * v82;
    v84 = *(_QWORD *)(v18 + 3144);
    if (v80)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v84 + 8 * a14 + 256))(a2, v86, v83, v92, v22 * a5, v23 * a6, v87 << v25, v88 << v26);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v84 + 8 * a14 + 416))(a3, v83, v92, v22 * a5, v23 * a6, v87 << v25, v88 << v26, *(unsigned int *)(v18 + 4156));
}

uint64_t warp_affine(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, unsigned int a6, uint64_t a7, int *a8)
{
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  int v35;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v43;

  v40 = result;
  v10 = *(_QWORD *)(result + 8);
  if (a6)
  {
    v11 = *(_DWORD *)(v10 + 2056);
    v25 = v11 == 1;
    v37 = v11 != 3;
    if (!a5[1])
      return result;
  }
  else
  {
    v25 = 0;
    v37 = 0;
    if (!a5[1])
      return result;
  }
  v12 = 0;
  v32 = *(_QWORD *)(v10 + 3144);
  v13 = *a5;
  v34 = (*(_DWORD *)(a7 + 60) + v25) >> v25;
  v35 = (*(_DWORD *)(a7 + 56) + v37) >> v37;
  v33 = (_QWORD *)(a7 + 8 * (a6 != 0) + 40);
  v31 = (_QWORD *)(a7 + 8 * a6 + 16);
  v27 = 4 * a4;
  v26 = 8 * a4;
  v30 = result + 91200;
  v43 = *(_QWORD *)(result + 8);
  do
  {
    if (v13)
    {
      v15 = 0;
      v28 = v12;
      v16 = 4 * *(int *)(v40 + 28) + (int)((v12 | 4) << v25);
      v39 = a8[1] + v16 * a8[4];
      v38 = a8[2] + a8[6] * v16;
      v17 = a3;
      v29 = a2;
      do
      {
        v18 = 4 * *(int *)(v40 + 24) + (((int)v15 + 4) << v37);
        v19 = (v38 + v18 * a8[5]) >> v25;
        v20 = (unint64_t)((v39 + v18 * a8[3]) >> v37) >> 16;
        v21 = v19 >> 16;
        if ((int)v20 < 7 || (int)v20 + 8 > v35 || (int)v21 < 7 || (int)((v19 >> 16) + 8) > v34)
          (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v10 + 3144) + 664))(15, 15, v35, v34, (uint64_t)((v20 << 32) - 0x700000000) >> 32, (uint64_t)((v21 << 32) - 0x700000000) >> 32, v30, 64, *v31, *v33);
        if (a3)
          result = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 656))(v17, a4);
        else
          result = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 648))(a2, a4);
        v10 = v43;
        v15 += 8;
        v13 = *a5;
        a2 += 16;
        v17 += 16;
      }
      while (v15 < (4u >> v37) * v13);
      a2 = v29;
      v12 = v28;
    }
    v14 = a3;
    if (!a2)
      v14 = a3 + 2 * v26;
    a3 = v14;
    if (a2)
      a2 += 2 * v27;
    else
      a2 = 0;
    v12 += 8;
  }
  while (v12 < (4u >> v25) * a5[1]);
  return result;
}

uint64_t obmc(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5, int a6, int a7, uint64_t a8, int a9)
{
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v42;
  signed int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  int v58;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v70;

  v9 = a4;
  v10 = result;
  v11 = *(_DWORD *)(result + 24);
  v12 = *(_DWORD *)(result + 28);
  v13 = *(_QWORD *)(result + 8);
  v70 = result + 8 * (v12 & 0x1E) + 712;
  v66 = result + 9280;
  if (a5)
  {
    v14 = *(_DWORD *)(v13 + 2056);
    v15 = 4u >> (v14 != 3);
    v16 = 4u >> (v14 == 1);
    v18 = result + 16;
    v17 = *(_QWORD *)(result + 16);
    if (v12 <= *(_DWORD *)(v17 + 13872) || v15 * *a4 + v16 * a4[1] < 0x10)
    {
      v64 = v16;
      v65 = v15;
      if (v11 <= *(_DWORD *)(v17 + 13864) || a9 < 1)
        return result;
      goto LABEL_42;
    }
  }
  else
  {
    v18 = result + 16;
    v17 = *(_QWORD *)(result + 16);
    v15 = 4;
    if (v12 <= *(_DWORD *)(v17 + 13872))
    {
      v64 = 4;
      v65 = 4;
LABEL_31:
      if (v11 <= *(_DWORD *)(v17 + 13864) || a9 < 1)
        return result;
      goto LABEL_42;
    }
    v16 = 4;
  }
  v64 = v16;
  v65 = v15;
  if ((int)a8 < 1)
    goto LABEL_31;
  v60 = v18;
  v61 = a7;
  v20 = 0;
  v21 = 0;
  v63 = (a6 + 1);
  while (1)
  {
    v23 = v9[2] >= 4u ? 4 : v9[2];
    v24 = *(_DWORD *)(v10 + 24);
    if (v21 >= v23)
      break;
    v25 = *(_QWORD *)(v70 - 8);
    v26 = v24 + v20;
    v27 = v24 + v20 + 1;
    v28 = v25 + 12 * v27;
    v29 = 4 * *(unsigned __int8 *)(v28 + 10);
    v30 = *(char *)(v28 + 8);
    v31 = dav1d_block_dimensions[v29];
    if (v30 > 0)
    {
      v32 = 12 * v27;
      v33 = *v9;
      if (v31 < v33)
        v33 = v31;
      if (v31 >= 2)
        v34 = v33;
      else
        v34 = 2;
      v35 = v9[1];
      if (v35 >= 0x10)
        v35 = 16;
      v36 = v35 >> 1;
      v37 = (v34 * v65);
      v38 = a8;
      v39 = *(_QWORD *)(v10 + 656) + v63 + v20;
      mc(v10, v66, 0, (2 * v37), v34, (3 * (v35 >> 1) + 3) >> 2, v26, *(_DWORD *)(v10 + 28), a5, v58, *(_DWORD *)(v25 + v32), v13 + 280 * (v30 - 1) + 32, v30 - 1, dav1d_filter_2d[4 * *(unsigned __int8 *)(v39 + 384) + *(unsigned __int8 *)(v39 + 352)]);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v13 + 3144) + 640))(a2 + 2 * (v20 * v65), a3, v66, v37, v36 * v64);
      a8 = v38;
      v9 = a4;
      ++v21;
    }
    if (v31 <= 2)
      v22 = 2;
    else
      v22 = v31;
    v20 += v22;
    if (v20 >= (int)a8)
    {
      v24 = *(_DWORD *)(v10 + 24);
      break;
    }
  }
  a7 = v61;
  if (v24 > *(_DWORD *)(*(_QWORD *)v60 + 13864) && a9 >= 1)
  {
LABEL_42:
    v42 = 0;
    v43 = 0;
    v62 = (a7 + 1);
    while (1)
    {
      v51 = v9[3];
      if (v51 >= 4)
        v51 = 4;
      if (v43 >= (int)v51)
        break;
      v52 = *(_QWORD *)(v70 + 8 * (v42 + 1));
      v53 = *(_DWORD *)(v10 + 24);
      v54 = v52 + 12 * (v53 - 1);
      v55 = &dav1d_block_dimensions[4 * *(unsigned __int8 *)(v54 + 10)];
      v56 = *(char *)(v54 + 8);
      if (v56 > 0)
      {
        v44 = *v9;
        if (v44 >= 0x10)
          v44 = 16;
        v45 = v44 >> 1;
        v46 = v55[1];
        v47 = v9[1];
        if (v46 < v47)
          v47 = v46;
        if (v46 >= 2)
          v48 = v47;
        else
          v48 = 2;
        v49 = (v45 * v65);
        mc(v10, v66, 0, 2 * v49, v45, v48, v53, *(_DWORD *)(v10 + 28) + v42, a5, v58, *(_DWORD *)(v52 + 12 * (v53 - 1)), v13 + 280 * (v56 - 1) + 32, v56 - 1, dav1d_filter_2d[4 * *(unsigned __int8 *)(v10 + v62 + v42 + 416)+ *(unsigned __int8 *)(v10 + 384 + v62 + v42)]);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v13 + 3144) + 632))(a2 + 2 * (a3 >> 1) * (v42 * v64), a3, v66, v49, (v48 * v64));
        ++v43;
        if (v46 <= 2)
          v50 = 2;
        else
          v50 = v46;
        v42 += v50;
        if (v42 >= a9)
          return result;
      }
      else
      {
        if (v55[1] <= 2u)
          v57 = 2;
        else
          v57 = v55[1];
        v42 += v57;
        if (v42 >= a9)
          return result;
      }
    }
  }
  return result;
}

uint64_t dav1d_filter_sbrow_deblock_cols_16bpc(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[4];

  v7[3] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*(_QWORD *)(result + 3120) + 88816) & 1) != 0)
  {
    v2 = *(_QWORD *)(result + 24);
    if (*(_DWORD *)(v2 + 1232) || *(_DWORD *)(v2 + 1236))
    {
      v3 = 4 * a2 * *(_DWORD *)(result + 3304);
      v4 = *(_QWORD *)(result + 5128) + 2 * (*(_QWORD *)(result + 2032) >> 1) * v3;
      v5 = *(_QWORD *)(result + 5136);
      v6 = 2 * (((*(uint64_t *)(result + 2040) >> 1) * v3) >> (*(_DWORD *)(result + 2056) == 1));
      v7[0] = v4;
      v7[1] = v5 + v6;
      v7[2] = *(_QWORD *)(result + 5144) + v6;
      return dav1d_loopfilter_sbrow_cols_16bpc(result, v7, (unsigned __int16 *)(*(_QWORD *)(result + 4264)+ 1348* (a2 >> (*(_DWORD *)(*(_QWORD *)(result + 8) + 1012) == 0))* *(_DWORD *)(result + 3288)), a2, *(unsigned __int8 *)(*(_QWORD *)(result + 5112) + a2));
    }
  }
  return result;
}

_DWORD *dav1d_filter_sbrow_deblock_rows_16bpc(_DWORD *result, int a2)
{
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[4];

  v3 = result;
  v10[3] = *MEMORY[0x1E0C80C00];
  v4 = 4 * a2 * result[826];
  v5 = *((_QWORD *)result + 641) + 2 * (*((_QWORD *)result + 254) >> 1) * v4;
  v6 = *((_QWORD *)result + 642);
  v7 = 2 * (((*((uint64_t *)result + 255) >> 1) * v4) >> (result[514] == 1));
  v10[0] = v5;
  v10[1] = v6 + v7;
  v10[2] = *((_QWORD *)result + 643) + v7;
  v8 = *((_QWORD *)result + 1);
  if ((*(_BYTE *)(*((_QWORD *)result + 390) + 88816) & 1) != 0)
  {
    v9 = *((_QWORD *)result + 3);
    if (*(_DWORD *)(v9 + 1232) || *(_DWORD *)(v9 + 1236))
    {
      result = (_DWORD *)dav1d_loopfilter_sbrow_rows_16bpc((uint64_t)result, v10, *((_QWORD *)result + 533) + 1348 * (a2 >> (*(_DWORD *)(v8 + 1012) == 0)) * result[822], a2);
      v8 = *((_QWORD *)v3 + 1);
    }
  }
  if (*(_DWORD *)(v8 + 1068) || v3[1298])
    return dav1d_copy_lpf_16bpc(v3, v10, a2);
  return result;
}

uint64_t dav1d_filter_sbrow_cdef_16bpc(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23[3];
  uint64_t v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(result + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 3120) + 88816) & 2) != 0)
  {
    v4 = result;
    v5 = *(_DWORD *)(v2 + 3304);
    v6 = v5 * a2;
    v7 = *(_DWORD *)(v2 + 2056) == 1;
    v8 = 4 * v5 * a2;
    v9 = *(uint64_t *)(v2 + 2032) >> 1;
    v10 = *(_QWORD *)(v2 + 5128) + 2 * v9 * v8;
    v11 = *(_QWORD *)(v2 + 2040);
    v12 = 2 * (((v11 >> 1) * v8) >> v7);
    v13 = *(_QWORD *)(v2 + 5136) + v12;
    v24[0] = v10;
    v24[1] = v13;
    v14 = *(_QWORD *)(v2 + 5144) + v12;
    v24[2] = v14;
    v15 = *(_QWORD *)(v2 + 4264);
    v16 = *(_DWORD *)(*(_QWORD *)(v2 + 8) + 1012) == 0;
    v17 = *(_DWORD *)(v2 + 3288);
    v18 = v15 + 1348 * (a2 >> v16) * v17;
    if (a2)
    {
      v19 = 2 * ((4 * v11) >> v7);
      v23[0] = v10 - 16 * v9;
      v23[1] = v13 - v19;
      v23[2] = v14 - v19;
      dav1d_cdef_brow_16bpc(result, v23, v15 + 1348 * ((a2 - 1) >> v16) * v17, v6 - 2, v6, 1, a2);
    }
    if (a2 + 1 >= *(_DWORD *)(v2 + 3296))
      v20 = 0;
    else
      v20 = -2;
    v21 = v6 + v5 + v20;
    if (v21 >= *(_DWORD *)(v2 + 3284))
      v22 = *(_DWORD *)(v2 + 3284);
    else
      v22 = v21;
    return dav1d_cdef_brow_16bpc(v4, v24, v18, v6, v22, 0, a2);
  }
  return result;
}

uint64_t dav1d_filter_sbrow_resize_16bpc(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 2056);
  v4 = 4 * a2 * *(_DWORD *)(a1 + 3304);
  v5 = *(_QWORD *)(a1 + 5160);
  v6 = *(_QWORD *)(a1 + 2304);
  v7 = *(_QWORD *)(a1 + 5168);
  v8 = 8 * (a2 != 0);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a1 + 3144) + 672))(*(_QWORD *)(a1 + 5152) + 2 * (*(uint64_t *)(a1 + 2296) >> 1) * v4 - 2 * (*(uint64_t *)(a1 + 2296) >> 1) * v8, *(_QWORD *)(a1 + 2296), *(_QWORD *)(a1 + 5128) + 2 * (*(uint64_t *)(a1 + 2032) >> 1) * v4 - 2 * (*(uint64_t *)(a1 + 2032) >> 1) * v8);
  if (v3)
  {
    v10 = 2 * (((v6 >> 1) * v4) >> (v3 == 1));
    v11 = v7 + v10;
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 3144) + 672))(v5 + v10 - 2
                                                                                * (*(_QWORD *)(a1 + 2304) >> 1)
                                                                                * (v8 >> (*(_DWORD *)(a1 + 2056) == 1)));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 3144) + 672))(v11 - 2
                                                                                     * (*(_QWORD *)(a1 + 2304) >> 1)
                                                                                     * (v8 >> (*(_DWORD *)(a1 + 2056) == 1)));
  }
  return result;
}

uint64_t dav1d_filter_sbrow_lr_16bpc(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*(_QWORD *)(result + 3120) + 88816) & 4) != 0)
  {
    v2 = 4 * a2 * *(_DWORD *)(result + 3304);
    v3 = *(_QWORD *)(result + 5152) + 2 * (*(_QWORD *)(result + 2296) >> 1) * v2;
    v4 = *(_QWORD *)(result + 5160);
    v5 = 2 * (((*(uint64_t *)(result + 2304) >> 1) * v2) >> (*(_DWORD *)(result + 2056) == 1));
    v6[0] = v3;
    v6[1] = v4 + v5;
    v6[2] = *(_QWORD *)(result + 5168) + v5;
    return dav1d_lr_sbrow_16bpc(result, v6, a2);
  }
  return result;
}

uint64_t dav1d_filter_sbrow_16bpc(uint64_t a1, int a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  dav1d_filter_sbrow_deblock_cols_16bpc(a1, a2);
  result = (uint64_t)dav1d_filter_sbrow_deblock_rows_16bpc((_DWORD *)a1, a2);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 1068))
    result = dav1d_filter_sbrow_cdef_16bpc(*(_QWORD *)(*(_QWORD *)(a1 + 3120) + 16), a2);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 236) != *(_DWORD *)(*(_QWORD *)(a1 + 24) + 240))
    result = dav1d_filter_sbrow_resize_16bpc(a1, a2);
  if (*(_DWORD *)(a1 + 5192))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 3120) + 88816) & 4) != 0)
    {
      v5 = 4 * a2 * *(_DWORD *)(a1 + 3304);
      v6 = *(_QWORD *)(a1 + 5152) + 2 * (*(_QWORD *)(a1 + 2296) >> 1) * v5;
      v7 = *(_QWORD *)(a1 + 5160);
      v8 = 2 * (((*(uint64_t *)(a1 + 2304) >> 1) * v5) >> (*(_DWORD *)(a1 + 2056) == 1));
      v9[0] = v6;
      v9[1] = v7 + v8;
      v9[2] = *(_QWORD *)(a1 + 5168) + v8;
      return dav1d_lr_sbrow_16bpc(a1, v9, a2);
    }
  }
  return result;
}

void *dav1d_backup_ipred_edge_16bpc(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  void *result;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 28);
  v5 = (*(_DWORD *)(v3 + 3288) * (v4 >> *(_DWORD *)(v3 + 3300))) << 7;
  v6 = *(int *)(v2 + 13864);
  v7 = 4 * v6;
  result = memcpy((void *)(*(_QWORD *)(v3 + 3240) + 2 * (v5 + 4 * (int)v6)), (const void *)(*(_QWORD *)(v3 + 2008)+ 8 * v6+ 2 * (*(_QWORD *)(v3 + 2032) >> 1) * (4 * (*(_DWORD *)(v3 + 3304) + v4) - 1)), 8 * (*(_DWORD *)(v2 + 13868) - (int)v6));
  v9 = *(_DWORD *)(v3 + 2056);
  if (v9)
  {
    v10 = v9 != 3;
    v11 = (*(_QWORD *)(v3 + 2040) >> 1) * (((4 * (*(_DWORD *)(v3 + 3304) + *(_DWORD *)(a1 + 28))) >> (v9 == 1)) - 1)
        + (v7 >> (v9 != 3));
    v12 = 2 * ((v7 >> (v9 != 3)) + v5);
    v13 = 2 * v11;
    memcpy((void *)(*(_QWORD *)(v3 + 3248) + v12), (const void *)(*(_QWORD *)(v3 + 2016) + 2 * v11), 2 * ((4 * (*(_DWORD *)(v2 + 13868) - (int)v6)) >> (v9 != 3)));
    return memcpy((void *)(*(_QWORD *)(v3 + 3256) + v12), (const void *)(*(_QWORD *)(v3 + 2024) + v13), 2 * ((4 * (*(_DWORD *)(v2 + 13868) - (int)v6)) >> v10));
  }
  return result;
}

uint64_t dav1d_cdef_brow_8bpc(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  int v7;
  _BOOL4 v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  size_t v53;
  const void *v54;
  char *v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  _BOOL4 v60;
  _BOOL4 v61;
  uint64_t *v62;
  uint64_t *v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  _BOOL4 v81;
  int v82;
  int v83;
  unsigned int v84;
  int v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  signed int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t *v116;
  _DWORD *v119;
  _BOOL4 v120;
  signed int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  _BOOL4 v147;
  _QWORD *v149;
  _QWORD *v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  int v160;
  int v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  uint64_t *v165;
  _BOOL4 v166;
  uint64_t v167;
  int v168;
  _BOOL4 v169;
  int v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t v173;
  void (**v174)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t);
  unsigned int v175;
  unsigned int v176;
  _QWORD *v177;
  uint64_t v178;
  int v179;
  unsigned int v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD v184[15];

  v184[13] = *MEMORY[0x1E0C80C00];
  v178 = *(_QWORD *)(result + 8);
  v7 = *(_DWORD *)(v178 + 2056);
  v155 = v7 != 3;
  v168 = v7;
  v8 = v7 == 2;
  if (a4 < a5)
  {
    v9 = 0;
    v10 = *(_DWORD **)(v178 + 24);
    v140 = (char *)&dav1d_cdef_brow_8bpc_uv_dirs + 8 * v8;
    v11 = *(_DWORD *)(*(_QWORD *)(v178 + 3120) + 24);
    v12 = v10[59];
    v13 = v10[60];
    v14 = *(_QWORD *)(v178 + 2040);
    v15 = *(_QWORD *)(v178 + 2032);
    v16 = a4;
    if (a4 <= 0)
      v17 = 8;
    else
      v17 = 12;
    v18 = a6 != 0;
    v19 = 6;
    if (v168 == 1)
      v19 = 2;
    v112 = v19;
    v20 = *(_DWORD *)(*(_QWORD *)(v178 + 8) + 1012);
    v21 = 7;
    if (v168 == 1)
      v21 = 3;
    v111 = v21;
    v22 = 4 * a7;
    v23 = (4 << v20) * a7;
    if (v11 < 2)
      v18 = 1;
    v120 = v18;
    if (v11 >= 2)
      v24 = a7;
    else
      v24 = 0;
    v25 = (4 * a7) | 2;
    v131 = v15 * v22;
    if (v11 >= 2)
      v26 = v15 * v22;
    else
      v26 = 0;
    v27 = v14 * 8 * a7;
    v136 = v27;
    if (v11 < 2)
      v27 = 0;
    v153 = v27;
    v154 = v26;
    v146 = v10[59];
    v145 = v10[60];
    v28 = v12 == v13;
    if (v12 == v13)
      v29 = 5096;
    else
      v29 = 5072;
    if (v12 == v13)
      v30 = (uint64_t *)(v178 + 5096);
    else
      v30 = (uint64_t *)(v178 + 5072);
    v31 = 5080;
    if (v28)
      v31 = 5104;
    v134 = v31;
    v135 = v29;
    v32 = (_QWORD *)(v178 + 5104);
    if (!v28)
      v32 = (_QWORD *)(v178 + 5080);
    v115 = v32;
    v116 = v30;
    v113 = v14 * 8 * v24;
    v33 = (v23 + 4 * v20) | 2;
    v34 = v22 - 4;
    v35 = v23 - 4;
    v152 = v14 * (8u >> (v168 == 1));
    if (v28)
      v36 = v35;
    else
      v36 = v34;
    v37 = v36 * v14;
    if (v28)
      v38 = v33;
    else
      v38 = v25;
    v132 = v14 * v38;
    v133 = v37;
    v143 = 2 * *(_DWORD *)(v178 + 3288);
    v39 = a5;
    v124 = a2[2];
    v123 = a2[1];
    v125 = *a2;
    result += 259568;
    v114 = v15 * 4 * v24;
    v127 = v15 * v25;
    v126 = v15 * v33;
    v130 = v15 * v34;
    v129 = v15 * v35;
    v173 = *(_QWORD *)(v178 + 3144);
    v174 = (void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t))(v173 + 8 * (3 - v168) + 3304);
    v40 = 8u >> v155;
    v141 = 0x40u >> v155;
    v177 = (_QWORD *)(v178 + 2032);
    v151 = v10[325] - 1;
    v167 = 8 * v15;
    v119 = (_DWORD *)result;
    v41 = *(_DWORD *)result;
    v175 = *(_DWORD *)(*(_QWORD *)(v178 + 3120) + 24);
    do
    {
      if ((signed int)(v16 + 2) >= *(_DWORD *)(v178 + 3284))
        v43 = v17 & 0xFFFFFFF7;
      else
        v43 = v17;
      v122 = v16 + 2;
      v44 = v120;
      if ((int)(v16 + 2) < v39)
        v44 = 1;
      if (v44 == 1 && (v43 & 8) != 0)
      {
        v46 = (_QWORD *)(v178 + 24 * (v41 == 0));
        v47 = (char *)(v46[627] + v114);
        v48 = v46[628];
        v49 = v46[629];
        if (v15 < 0)
        {
          result = (uint64_t)memcpy(&v47[v15], (const void *)(v125 - v15 + 8 * v15), -2 * v15);
          v39 = a5;
          if (!v168)
            goto LABEL_54;
        }
        else
        {
          result = (uint64_t)memcpy(v47, (const void *)(v125 + 6 * v15), 2 * v15);
          v39 = a5;
          if (!v168)
            goto LABEL_54;
        }
        v50 = (char *)(v48 + v113);
        v51 = (char *)(v49 + v113);
        v52 = *(_QWORD *)(v178 + 2040);
        if (v52 < 0)
        {
          v53 = -2 * v52;
          memcpy(&v50[v52], (const void *)(v123 + v52 * v111), -2 * v52);
          v55 = &v51[v52];
          v54 = (const void *)(v124 + v52 * v111);
        }
        else
        {
          v53 = 2 * v52;
          memcpy(v50, (const void *)(v123 + v52 * v112), 2 * v52);
          v54 = (const void *)(v124 + v52 * v112);
          v55 = v51;
        }
        result = (uint64_t)memcpy(v55, v54, v53);
        v39 = a5;
      }
LABEL_54:
      v56 = v43 & 0xFFFFFFFC | 2;
      if (v143 >= 1)
      {
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v128 = (v16 >> 1) & 0xF;
        v60 = v16 == a4 && a6 != 0;
        v166 = v60;
        v142 = (v16 >> 3) & 2;
        v61 = v122 < v39 || a6 != 0;
        v62 = (uint64_t *)(v178 + 24 * v41);
        v165 = v62 + 627;
        v150 = v62 + 628;
        v149 = v62 + 629;
        v147 = v61;
        v63 = v116;
        if (v61)
          v63 = &v183;
        v138 = v63;
        v64 = v115;
        if (v61)
          v64 = v184;
        v137 = v64;
        v65 = 1;
        v66 = v123;
        v67 = v124;
        v68 = v125;
        do
        {
          v69 = *(char *)(a3 + 1348 * (v58 >> 1) + (v58 & 1 | v142) + 1280);
          v160 = v57;
          v159 = v58;
          v157 = v66;
          v158 = v67;
          v156 = v68;
          if (v69 == -1
            || (v70 = *(_QWORD *)(v178 + 24) + 4 * v69,
                v71 = *(_DWORD *)(v70 + 1308),
                result = *(unsigned int *)(v70 + 1340),
                !(v71 | result)))
          {
            v65 = 1;
          }
          else
          {
            v176 = *(_DWORD *)(a3 + 1348 * (v58 >> 1) + 4 * v128 + 1284);
            if ((*(_DWORD *)(v70 + 1308) & 3) == 3)
              v72 = 4;
            else
              v72 = *(_DWORD *)(v70 + 1308) & 3;
            v73 = *(_DWORD *)(v70 + 1340) & 3;
            if (v73 == 3)
              v73 = 4;
            v164 = v73;
            v182 = v68;
            v183 = v66;
            v184[0] = v67;
            v74 = 16 * v58;
            v75 = 16 * v58 + 16;
            v76 = *(_DWORD *)(v178 + 3280);
            if (v75 >= v76)
              v77 = *(_DWORD *)(v178 + 3280);
            else
              v77 = 16 * v58 + 16;
            if (v74 < v77)
            {
              v170 = v72;
              v78 = 4 * v57;
              v144 = v71 >> 2;
              v162 = (int)result >> 2;
              v172 = v71;
              v79 = (v71 != 0) | (2 * ((_DWORD)result != 0));
              v171 = result;
              v81 = v71 > 3 || result > 3;
              v169 = v81;
              v82 = v57;
              v163 = v75;
              v161 = (v71 != 0) | (2 * ((_DWORD)result != 0));
              while (1)
              {
                v84 = v56 & 0xFFFFFFFD;
                v179 = v82 + 2;
                if (v76 > v82 + 2)
                  v84 = v56;
                if (((v176 >> (v82 & 0x1E)) & 3) != 0)
                  break;
                v65 = 1;
LABEL_88:
                v68 += 8;
                v66 += v40;
                v182 = v68;
                v183 = v66;
                v67 += v40;
                v184[0] = v67;
                v56 = v84 | 1;
                if (v75 >= v76)
                  v83 = v76;
                else
                  v83 = v75;
                v78 += 8;
                v82 = v179;
                if (v83 <= v179)
                  goto LABEL_67;
              }
              if (v65)
                v85 = 3;
              else
                v85 = ~v59;
              v180 = v84;
              if ((v85 & v79) != 0 && (v84 & 1) != 0)
              {
                result = (uint64_t)backup2x8_0(&v184[6 * v9 + 1], &v182, v177, 0, v168, v85 & v79);
                v84 = v180;
              }
              if ((v84 & 2) != 0)
              {
                result = (uint64_t)backup2x8_0(&v184[6 * (v9 == 0) + 1], &v182, v177, 8u, v168, v79);
                v84 = v180;
                v86 = 0;
                v181 = 0;
                if (!v169)
                  goto LABEL_110;
LABEL_103:
                result = (*(uint64_t (**)(uint64_t, _QWORD, unsigned int *))(v173 + 3296))(v68, *v177, &v181);
                v84 = v180;
                v86 = result;
                if (v175 > 1)
                  goto LABEL_104;
LABEL_111:
                v91 = *v165;
                v87 = v171;
              }
              else
              {
                v86 = 0;
                v181 = 0;
                if (v169)
                  goto LABEL_103;
LABEL_110:
                if (v175 <= 1)
                  goto LABEL_111;
LABEL_104:
                v87 = v171;
                if (v166)
                {
                  v88 = v78 & 0xFFFFFFF8;
                  if (v146 == v145)
                  {
                    v89 = *(_QWORD *)(v178 + 5088) + v88 + v129;
                    v90 = v182 + v167;
                    if (v172 >= 4)
                    {
LABEL_113:
                      if (v181)
                      {
                        if (v181 >= 0x40)
                        {
                          v94 = __clz(v181 >> 6) ^ 0x1F;
                          if (v94 >= 12)
                            v94 = 12;
                          v92 = v94 + 4;
                        }
                        else
                        {
                          v92 = 4;
                        }
                        if (((v92 * v144 + 8) >> 4) | v170)
                        {
LABEL_129:
                          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *, uint64_t, uint64_t))(v173 + 3304))(v182, *v177, &v184[6 * v9 + 1], v89, v90);
                          v84 = v180;
                        }
                      }
                      else if (v170)
                      {
                        goto LABEL_129;
                      }
LABEL_130:
                      if (v87)
                      {
                        if (v87 < 4)
                          v95 = 0;
                        else
                          v95 = v140[v86];
                        v96 = v78 >> v155;
                        v97 = v153 + v96;
                        if (v175 > 1)
                        {
                          if (v166)
                          {
                            v101 = v133 + v96;
                            v66 = v183;
                            v102 = &v184[6 * v9 + 1];
                            v103 = v95;
                            (*v174)(v183, *(_QWORD *)(v178 + 2040), (uint64_t)(v102 + 2), *(_QWORD *)(v178 + v135) + v133 + v96, v183 + v152, v162, v164, v95, __PAIR64__(v84, v151));
                            v104 = *(_QWORD *)(v178 + v134) + v101;
                            v67 = v184[0];
                            result = ((uint64_t (*)(_QWORD, _QWORD, _QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t))*v174)(v184[0], *(_QWORD *)(v178 + 2040), v102 + 4, v104, v184[0] + v152, v162, v164, v103, __PAIR64__(v180, v151));
                          }
                          else
                          {
                            v105 = v136 + v96;
                            v106 = v132 + v96;
                            v107 = v152;
                            if (!v147)
                              v107 = v106;
                            v139 = v107;
                            if (!v147)
                              v97 = v105;
                            v66 = v183;
                            v108 = &v184[6 * v9 + 1];
                            v109 = v95;
                            (*v174)(v183, *(_QWORD *)(v178 + 2040), (uint64_t)(v108 + 2), *v150 + v97, *v138 + v107, v162, v164, v95, __PAIR64__(v84, v151));
                            v110 = *v149 + v97;
                            v67 = v184[0];
                            result = ((uint64_t (*)(_QWORD, _QWORD, _QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t))*v174)(v184[0], *(_QWORD *)(v178 + 2040), v108 + 4, v110, *v137 + v139, v162, v164, v109, __PAIR64__(v180, v151));
                          }
                          v84 = v180;
                          v40 = 8u >> v155;
                          v75 = v163;
                          v79 = v161;
                        }
                        else
                        {
                          v66 = v183;
                          v98 = &v184[6 * v9 + 1];
                          v99 = v95;
                          (*v174)(v183, *(_QWORD *)(v178 + 2040), (uint64_t)(v98 + 2), *v150 + v97, v183 + v152, v162, v164, v95, __PAIR64__(v84, v151));
                          v100 = *v149 + v97;
                          v67 = v184[0];
                          v40 = 8u >> v155;
                          v79 = v161;
                          v75 = v163;
                          result = ((uint64_t (*)(_QWORD, _QWORD, _QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t))*v174)(v184[0], *(_QWORD *)(v178 + 2040), v98 + 4, v100, v184[0] + v152, v162, v164, v99, __PAIR64__(v180, v151));
                          v84 = v180;
                        }
                      }
                      else
                      {
                        v66 = v183;
                        v67 = v184[0];
                      }
                      v65 = 0;
                      v9 ^= 1uLL;
                      v68 = v182;
                      v76 = *(_DWORD *)(v178 + 3280);
                      v59 = v79;
                      goto LABEL_88;
                    }
                  }
                  else
                  {
                    v89 = *(_QWORD *)(v178 + 5064) + v88 + v130;
                    v90 = v182 + v167;
                    if (v172 >= 4)
                      goto LABEL_113;
                  }
LABEL_128:
                  if (v170)
                    goto LABEL_129;
                  goto LABEL_130;
                }
                v91 = *v165;
                if (!v147)
                {
                  v93 = v78 & 0xFFFFFFF8;
                  v89 = v91 + v93 + v131;
                  if (v146 == v145)
                  {
                    v90 = *(_QWORD *)(v178 + 5088) + v93 + v126;
                    if (v172 >= 4)
                      goto LABEL_113;
                  }
                  else
                  {
                    v90 = *(_QWORD *)(v178 + 5064) + v93 + v127;
                    if (v172 >= 4)
                      goto LABEL_113;
                  }
                  goto LABEL_128;
                }
              }
              v89 = v91 + v154 + (v78 & 0xFFFFFFF8);
              v90 = v182 + v167;
              if (v172 >= 4)
                goto LABEL_113;
              goto LABEL_128;
            }
          }
LABEL_67:
          v68 = v156 + 64;
          v66 = v157 + v141;
          v67 = v158 + v141;
          v58 = v159 + 1;
          v56 |= 1u;
          v57 = v160 + 16;
        }
        while (v159 + 1 != v143);
      }
      v15 = *(_QWORD *)(v178 + 2032);
      v125 += 8 * v15;
      v42 = (8 * *(_QWORD *)(v178 + 2040)) >> (v168 == 1);
      v123 += v42;
      v124 += v42;
      v41 = *v119 ^ 1;
      *v119 = v41;
      v17 = v56 | 4;
      v39 = a5;
      v16 = v122;
    }
    while (v122 < a5);
  }
  return result;
}

_WORD *backup2x8_0(_WORD *result, _QWORD *a2, _QWORD *a3, unsigned int a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;

  if ((a6 & 1) != 0)
  {
    v6 = a4 - 2;
    *result = *(_WORD *)(*a2 + v6);
    v7 = *a3 + v6;
    result[1] = *(_WORD *)(*a2 + v7);
    v8 = v7 + *a3;
    result[2] = *(_WORD *)(*a2 + v8);
    v9 = v8 + *a3;
    result[3] = *(_WORD *)(*a2 + v9);
    v10 = v9 + *a3;
    result[4] = *(_WORD *)(*a2 + v10);
    v11 = v10 + *a3;
    result[5] = *(_WORD *)(*a2 + v11);
    v12 = v11 + *a3;
    result[6] = *(_WORD *)(*a2 + v12);
    result[7] = *(_WORD *)(*a2 + v12 + *a3);
  }
  if (a5 && (a6 & 2) != 0)
  {
    v13 = 0;
    v14 = 8u >> (a5 == 1);
    v15 = (a4 >> (a5 != 3)) - 2;
    v16 = result + 16;
    do
    {
      *(v16 - 8) = *(_WORD *)(a2[1] + v15 + v13);
      *v16++ = *(_WORD *)(a2[2] + v15 + v13);
      v13 += a3[1];
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t cdef_find_dir_c_0(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  __int32 *v8;
  __int32 v9;
  __int32 v10;
  __int32 *v11;
  __int32 v12;
  __int32 v13;
  __int32 v14;
  __int32 v15;
  __int32 v16;
  __int32 *v17;
  int v18;
  __int32 v19;
  __int32 v20;
  uint64_t v21;
  __int32 v22;
  int v23;
  __int32 v24;
  __int32 v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  uint64_t v29;
  int v30;
  __int32 v31;
  __int32 v32;
  __int32 v33;
  __int32 v34;
  uint64_t v35;
  int v36;
  __int32 v37;
  __int32 v38;
  __int32 v39;
  __int32 v40;
  __int32 v41;
  __int32 v42;
  uint64_t v43;
  __int32 v44;
  __int32 v45;
  __int32 v46;
  __int32 v47;
  __int32 v48;
  __int32 v49;
  uint64_t v50;
  __int32 v51;
  __int32 v52;
  uint64_t v53;
  int v54;
  int8x16_t v55;
  int8x16_t v56;
  int32x4_t v57;
  int32x2_t v58;
  unsigned __int32 v59;
  unsigned __int32 v60;
  unsigned __int32 v61;
  unsigned __int32 v62;
  unsigned __int32 v63;
  unsigned int v64;
  unsigned __int32 v65;
  unsigned __int32 v66;
  unsigned int v67;
  uint64_t result;
  _DWORD v69[8];
  int32x4_t v70[2];
  __int128 v71;
  int32x4_t v72[5];
  __int128 v73;
  int32x4_t v74;
  __int128 v75;
  int32x4_t v76[5];
  int32x4_t v77[3];
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  __int128 v81;
  uint64_t v82;

  v3 = 0;
  v4 = 0;
  v82 = *MEMORY[0x1E0C80C00];
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  memset(v77, 0, 40);
  v75 = 0u;
  memset(v76, 0, sizeof(v76));
  v73 = 0u;
  v74 = 0u;
  v5 = (unsigned __int8 *)(a1 + 3);
  v71 = 0u;
  memset(v72, 0, sizeof(v72));
  memset(v70, 0, sizeof(v70));
  do
  {
    v6 = v4 >> 1;
    v7 = *(v5 - 3) - 128;
    v8 = &v76[0].i32[v3];
    v9 = v76[0].i32[v3 + 1];
    v10 = v7 + v76[0].i32[v3];
    v11 = &v70[0].i32[v3];
    v12 = v78.i32[v3];
    *v11 = v70[0].i32[v3] + v7;
    v14 = v77[0].i32[v3 + 1];
    v13 = v77[0].i32[v3 + 2];
    v11[14] = v72[0].i32[v3 + 2] + v7;
    v15 = v13 + v7;
    v78.i32[v3] = v12 + v7;
    v16 = v80.i32[0];
    v72[2].i32[3 - v6 + 2] += v7;
    v80.i32[0] = v16 + v7;
    v17 = &v70[0].i32[v6];
    v17[33] += v7;
    v18 = *(v5 - 2) - 128;
    *v8 = v10;
    v8[1] = v18 + v9;
    v19 = v78.i32[v3] + v18;
    v20 = v72[0].i32[v3 + 2];
    *v11 = v70[0].i32[v3] + v18;
    v8[21] = v14 + v18;
    v8[22] = v15;
    v11[14] = v20 + v18;
    v21 = 4 * (4 - v6);
    v22 = *(__int32 *)((char *)&v72[2].i32[2] + v21) + v18;
    v78.i32[v3] = v19;
    *(__int32 *)((char *)&v72[2].i32[2] + v21) = v22;
    v23 = v17[34] + v18;
    v24 = v80.i32[1] + v18;
    v17[34] = v23;
    LODWORD(v21) = *(v5 - 1) - 128;
    v25 = v76[0].i32[v3 + 2];
    v26 = v76[0].i32[v3 + 3];
    v80.i32[1] = v24;
    v27 = v21 + v25;
    v28 = v78.i32[v3];
    v11[1] = v70[0].i32[v3 + 1] + v21;
    v11[13] = v72[0].i32[v3 + 1] + v21;
    v29 = 4 * (5 - v6);
    v30 = *(__int32 *)((char *)&v72[2].i32[2] + v29);
    v32 = v76[4].i32[v3 + 3];
    v31 = v77[0].i32[v3];
    v78.i32[v3] = v28 + v21;
    v33 = v31 + v21;
    *(__int32 *)((char *)&v72[2].i32[2] + v29) = v30 + v21;
    LODWORD(v29) = v80.i32[2] + v21;
    v17[35] += v21;
    LODWORD(v21) = *v5 - 128;
    v80.i32[2] = v29;
    v8[2] = v27;
    v8[3] = v21 + v26;
    v11[1] = v70[0].i32[v3 + 1] + v21;
    v34 = v78.i32[v3];
    v11[13] = v72[0].i32[v3 + 1] + v21;
    v35 = 4 * (6 - v6);
    v36 = *(__int32 *)((char *)&v72[2].i32[2] + v35);
    v8[19] = v32 + v21;
    v8[20] = v33;
    *(__int32 *)((char *)&v72[2].i32[2] + v35) = v36 + v21;
    v78.i32[v3] = v34 + v21;
    v80.i32[3] += v21;
    v17[36] += v21;
    LODWORD(v21) = v5[1] - 128;
    LODWORD(v35) = v76[1].i32[v3 + 1];
    v37 = v21 + v76[1].i32[v3];
    v38 = v78.i32[v3] + v21;
    v39 = v72[0].i32[v3];
    v11[2] = v70[0].i32[v3 + 2] + v21;
    v40 = v39 + v21;
    v41 = v76[4].i32[v3 + 1];
    v42 = v76[4].i32[v3 + 2] + v21;
    v11[12] = v40;
    v43 = 4 * (7 - v6);
    v44 = *(__int32 *)((char *)&v72[2].i32[2] + v43) + v21;
    v78.i32[v3] = v38;
    *(__int32 *)((char *)&v72[2].i32[2] + v43) = v44;
    v45 = v17[37];
    LODWORD(v81) = v81 + v21;
    v17[37] = v45 + v21;
    LODWORD(v21) = v5[2] - 128;
    LODWORD(v35) = v21 + v35;
    v46 = v78.i32[v3];
    v47 = v72[0].i32[v3] + v21;
    v11[2] = v70[0].i32[v3 + 2] + v21;
    v11[12] = v47;
    v48 = v41 + v21;
    v72[2].i32[8 - v6 + 2] += v21;
    v78.i32[v3] = v46 + v21;
    DWORD1(v81) += v21;
    v17[38] += v21;
    LODWORD(v21) = v5[3] - 128;
    v49 = v76[1].i32[v3 + 3];
    LODWORD(v43) = v21 + v76[1].i32[v3 + 2];
    v11[3] = v70[0].i32[v3 + 3] + v21;
    v11[11] = *(_DWORD *)((char *)&v71 + v3 * 4 + 12) + v21;
    v50 = 4 * (9 - v6);
    v51 = *(__int32 *)((char *)&v72[2].i32[2] + v50) + v21;
    v8[4] = v37;
    v8[5] = v35;
    *(__int32 *)((char *)&v72[2].i32[2] + v50) = v51;
    LODWORD(v50) = v78.i32[v3];
    v8[17] = v48;
    v8[18] = v42;
    LODWORD(v35) = v76[3].i32[v3 + 3];
    v52 = v76[4].i32[v3] + v21;
    v78.i32[v3] = v50 + v21;
    LODWORD(v50) = DWORD2(v81) + v21;
    ++v4;
    v17[39] += v21;
    LODWORD(v21) = v5[4] - 128;
    v8[6] = v43;
    v8[7] = v21 + v49;
    DWORD2(v81) = v50;
    LODWORD(v43) = v78.i32[v3] + v21;
    v11[3] = v70[0].i32[v3 + 3] + v21;
    v8[15] = v35 + v21;
    v8[16] = v52;
    v11[11] = *(_DWORD *)((char *)&v71 + v3 * 4 + 12) + v21;
    v53 = 10 - v6;
    LODWORD(v6) = v72[2].i32[v53 + 2];
    v78.i32[v3] = v43;
    v72[2].i32[v53 + 2] = v6 + v21;
    v54 = HIDWORD(v81) + v21;
    HIDWORD(v81) += v21;
    v17[40] += v21;
    v5 += a2;
    ++v3;
  }
  while (v4 != 8);
  v55 = (int8x16_t)vrev64q_s32(vmulq_s32(*(int32x4_t *)((char *)&v76[2] + 12), *(int32x4_t *)((char *)&v76[2] + 12)));
  v56 = (int8x16_t)vrev64q_s32(vmulq_s32(*(int32x4_t *)((char *)&v77[1] + 8), *(int32x4_t *)((char *)&v77[1] + 8)));
  v57 = vmulq_s32(vmlaq_s32((int32x4_t)vextq_s8(v56, v56, 8uLL), *(int32x4_t *)((char *)&v76[3] + 12), *(int32x4_t *)((char *)&v76[3] + 12)), (int32x4_t)xmmword_19689A950);
  *(int32x2_t *)v56.i8 = vmul_s32(vmla_s32(vrev64_s32(vmul_s32(*(int32x2_t *)v76[2].i8, *(int32x2_t *)v76[2].i8)), *(int32x2_t *)((char *)v76[1].i64 + 4), *(int32x2_t *)((char *)v76[1].i64 + 4)), (int32x2_t)0x780000008CLL);
  v58 = vmul_s32(vmla_s32(vrev64_s32(vmul_s32(*(int32x2_t *)((char *)&v77[0].u64[1] + 4), *(int32x2_t *)((char *)&v77[0].u64[1] + 4))), *(int32x2_t *)v77[0].i8, *(int32x2_t *)v77[0].i8), (int32x2_t)0x780000008CLL);
  v59 = vaddvq_s32(vmulq_s32(vmlaq_s32((int32x4_t)vextq_s8(v55, v55, 8uLL), v76[0], v76[0]), (int32x4_t)xmmword_19689A950))
      + 168 * (v76[1].i32[0] * v76[1].i32[0] + v76[2].i32[2] * v76[2].i32[2])
      + vadd_s32(*(int32x2_t *)v56.i8, vdup_lane_s32(*(int32x2_t *)v56.i8, 1)).u32[0]
      + 105 * v76[1].i32[3] * v76[1].i32[3];
  v60 = vaddvq_s32(v57)
      + 168 * (v76[4].i32[3] * v76[4].i32[3] + v77[1].i32[1] * v77[1].i32[1])
      + vadd_s32(v58, vdup_lane_s32(v58, 1)).u32[0]
      + 105 * v77[0].i32[2] * v77[0].i32[2];
  *(int32x2_t *)v55.i8 = vmul_s32(vmla_s32(vrev64_s32(vmul_s32(*(int32x2_t *)&v71, *(int32x2_t *)&v71)), *(int32x2_t *)((char *)v70[0].i64 + 4), *(int32x2_t *)((char *)v70[0].i64 + 4)), (int32x2_t)0x8C000000D2);
  v61 = 105
      * (vaddvq_s32(vmulq_s32(*(int32x4_t *)((char *)v70 + 12), *(int32x4_t *)((char *)v70 + 12)))
       + v70[1].i32[3] * v70[1].i32[3])
      + 420 * (v70[0].i32[0] * v70[0].i32[0] + DWORD2(v71) * DWORD2(v71))
      + v55.i32[0]
      + v55.i32[1];
  *(int32x2_t *)v55.i8 = vmul_s32(vmla_s32(vrev64_s32(vmul_s32(*(int32x2_t *)((char *)&v72[1].u64[1] + 4), *(int32x2_t *)((char *)&v72[1].u64[1] + 4))), *(int32x2_t *)v72[0].i8, *(int32x2_t *)v72[0].i8), (int32x2_t)0x8C000000D2);
  v62 = 105
      * (vaddvq_s32(vmulq_s32(*(int32x4_t *)((char *)v72 + 8), *(int32x4_t *)((char *)v72 + 8)))
       + v72[1].i32[2] * v72[1].i32[2])
      + 420 * (HIDWORD(v71) * HIDWORD(v71) + v72[2].i32[1] * v72[2].i32[1])
      + v55.i32[0]
      + v55.i32[1];
  *(int32x2_t *)v55.i8 = vmul_s32(vmla_s32(vrev64_s32(vmul_s32((int32x2_t)v72[4].u64[1], (int32x2_t)v72[4].u64[1])), *(int32x2_t *)((char *)&v72[2].u64[1] + 4), *(int32x2_t *)((char *)&v72[2].u64[1] + 4)), (int32x2_t)0x8C000000D2);
  v63 = 105
      * (vaddvq_s32(vmulq_s32(*(int32x4_t *)((char *)&v72[3] + 4), *(int32x4_t *)((char *)&v72[3] + 4)))
       + v72[4].i32[1] * v72[4].i32[1])
      + 420 * (v72[2].i32[2] * v72[2].i32[2] + v73 * v73)
      + v55.i32[0]
      + v55.i32[1];
  v64 = 105 * vaddvq_s32(vmlaq_s32(vmulq_s32(v79, v79), v78, v78));
  v65 = 105
      * (vaddvq_s32(vmulq_s32(v80, v80)) + v54 * v54 + DWORD1(v81) * DWORD1(v81) + v81 * v81 + DWORD2(v81) * DWORD2(v81));
  v69[0] = v59;
  v69[1] = v61;
  v69[2] = v64;
  v69[3] = v62;
  v69[4] = v60;
  v69[5] = v63;
  *(int32x2_t *)v57.i8 = vmul_s32(vmla_s32(vrev64_s32(vmul_s32(*(int32x2_t *)((char *)&v75 + 4), *(int32x2_t *)((char *)&v75 + 4))), *(int32x2_t *)((char *)&v73 + 8), *(int32x2_t *)((char *)&v73 + 8)), (int32x2_t)0x8C000000D2);
  v66 = 105 * (vaddvq_s32(vmulq_s32(v74, v74)) + v75 * v75)
      + 420 * (DWORD1(v73) * DWORD1(v73) + HIDWORD(v75) * HIDWORD(v75))
      + v57.i32[0]
      + v57.i32[1];
  v69[6] = v65;
  v69[7] = v66;
  v67 = v61 > v59;
  if (v61 > v59)
    v59 = v61;
  if (v64 > v59)
  {
    v67 = 2;
    v59 = v64;
  }
  if (v62 > v59)
  {
    v67 = 3;
    v59 = v62;
  }
  if (v60 <= v59)
    v60 = v59;
  else
    v67 = 4;
  if (v63 > v60)
  {
    v67 = 5;
    v60 = v63;
  }
  if (v65 > v60)
  {
    v67 = 6;
    v60 = v65;
  }
  if (v66 <= v60)
    result = v67;
  else
    result = 7;
  if (v66 <= v60)
    v66 = v60;
  *a3 = (v66 - v69[result ^ 4]) >> 10;
  return result;
}

unint64_t cdef_filter_block_8x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, double a9, double a10, double a11, int32x4_t a12, double a13, double a14, double a15, int8x16_t a16, int a17, char a18)
{
  return cdef_filter_block_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, 8u, 8u, a18);
}

unint64_t cdef_filter_block_4x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, double a9, double a10, double a11, int32x4_t a12, double a13, double a14, double a15, int8x16_t a16, int a17, char a18)
{
  return cdef_filter_block_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, 4u, 8u, a18);
}

unint64_t cdef_filter_block_4x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, double a9, double a10, double a11, int32x4_t a12, double a13, double a14, double a15, int8x16_t a16, int a17, char a18)
{
  return cdef_filter_block_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, 4u, 4u, a18);
}

unint64_t cdef_filter_block_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, double a9, double a10, double a11, int32x4_t a12, double a13, double a14, double a15, int8x16_t a16, int a17, unsigned int a18, unsigned int a19, char a20)
{
  int8x16_t v20;
  uint64_t v24;
  char v25;
  int v26;
  uint64_t v27;
  int v28;
  _WORD *v29;
  _WORD *v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  _WORD *v34;
  int v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint16x8_t *v41;
  uint16x8_t *v42;
  _WORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint16x8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint16x8_t *v50;
  uint8x16_t v51;
  uint8x16_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint8x8_t *v63;
  uint16x8_t *v64;
  unint64_t v65;
  uint8x16_t v66;
  uint16x8_t v67;
  uint64_t v68;
  uint64_t v69;
  uint16x8_t *v70;
  unsigned int v71;
  signed int v72;
  unsigned int v73;
  unsigned int v74;
  char *v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  BOOL v88;
  int8x16_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x2_t v93;
  unint64_t result;
  uint32x4_t v95;
  int32x4_t v96;
  uint32x2_t v97;
  uint32x4_t v98;
  char v99;
  void *v100;
  int32x4_t v101;
  int32x4_t v102;
  int16x8_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int16x8_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int32x4_t v117;
  int16x8_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int16x8_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int16x8_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int16x8_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int16x8_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int8x16_t v151;
  int32x4_t v152;
  int8x16_t v153;
  int16x8_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int8x16_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int8x16_t v160;
  int16x8_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int8x16_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int8x16_t v167;
  int16x8_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int8x16_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int8x16_t v174;
  int16x8_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int8x16_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int8x16_t v182;
  int16x8_t v183;
  int32x4_t v184;
  uint32x4_t v185;
  int32x4_t v186;
  int8x16_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int8x16_t v190;
  int32x4_t v191;
  int32x4_t v192;
  uint32x4_t v193;
  int32x4_t v194;
  uint32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  uint32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  uint32x4_t v204;
  int32x4_t v205;
  uint32x4_t v206;
  int32x4_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int32x4_t v210;
  int32x4_t v211;
  unsigned int v212;
  int16x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int8x16_t v217;
  int v218;
  int v219;
  __int32 v220;
  __int32 v221;
  int v222;
  int32x4_t v223;
  int32x4_t v224;
  int8x16_t v225;
  int8x16_t v226;
  int32x2_t v227;
  uint32x2_t v228;
  __int32 v229;
  int v230;
  unsigned int v231;
  int32x2_t v232;
  uint32x2_t v233;
  int v234;
  unsigned int v235;
  int8x8_t v236;
  int32x2_t v237;
  int8x8_t v238;
  int32x2_t v239;
  unsigned int v240;
  int32x2_t v241;
  int v242;
  int v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  unint64_t v247;
  uint16x8_t *v248;
  uint64_t v249;
  uint64_t v250;
  _WORD *v251;
  unint64_t v252;
  uint64_t v253;
  uint8x8_t *v254;
  uint16x8_t *v255;
  unint64_t v256;
  uint8x16_t v257;
  uint16x8_t v258;
  uint64_t v259;
  uint64_t v260;
  uint16x8_t *v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint16x8_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  uint8x8_t *v275;
  uint16x8_t *v276;
  unint64_t v277;
  uint8x16_t v278;
  uint16x8_t v279;
  unint64_t v280;
  unsigned __int8 *v281;
  _WORD *v282;
  __int16 v283;
  uint64_t v284;
  _WORD *v285;
  unsigned __int8 *v286;
  __int16 v287;
  unsigned int v288;
  char *v289;
  int v290;
  int v291;
  int v292;
  int v293;
  BOOL v298;
  void *v299;
  int32x4_t v300;
  uint32x4_t v301;
  int32x4_t v302;
  char v303;
  void *v304;
  int32x4_t v305;
  int32x4_t v306;
  int16x8_t v307;
  int32x4_t v308;
  int32x4_t v309;
  int16x8_t v310;
  int32x4_t v311;
  int32x4_t v312;
  int16x8_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int16x8_t v316;
  int32x4_t v317;
  int32x4_t v318;
  int32x4_t v319;
  int32x4_t v320;
  int32x4_t v321;
  int32x4_t v322;
  int8x16_t v323;
  int8x16_t v324;
  int32x4_t v325;
  int32x4_t v326;
  int32x4_t v327;
  int32x4_t v328;
  int32x4_t v329;
  int32x4_t v330;
  int8x16_t v331;
  int8x16_t v332;
  int32x4_t v333;
  int32x4_t v334;
  int32x4_t v335;
  int32x4_t v336;
  int32x4_t v337;
  int32x4_t v338;
  int8x16_t v339;
  int8x16_t v340;
  int32x4_t v341;
  int32x4_t v342;
  int32x4_t v343;
  int32x4_t v344;
  int32x4_t v345;
  int32x4_t v346;
  int8x16_t v347;
  int8x16_t v348;
  int32x4_t v349;
  int32x4_t v350;
  int16x8_t v351;
  int32x4_t v352;
  int32x4_t v353;
  int16x8_t v354;
  int32x4_t v355;
  int32x4_t v356;
  int16x8_t v357;
  int32x4_t v358;
  int32x4_t v359;
  int16x8_t v360;
  int32x4_t v361;
  int32x4_t v362;
  int32x4_t v363;
  int32x4_t v364;
  int32x4_t v365;
  int32x4_t v366;
  int8x16_t v367;
  int8x16_t v368;
  int32x4_t v369;
  int32x4_t v370;
  int32x4_t v371;
  int32x4_t v372;
  int32x4_t v373;
  int32x4_t v374;
  int8x16_t v375;
  int8x16_t v376;
  int32x4_t v377;
  int32x4_t v378;
  int32x4_t v379;
  int32x4_t v380;
  int32x4_t v381;
  int32x4_t v382;
  int8x16_t v383;
  int8x16_t v384;
  int32x4_t v385;
  int32x4_t v386;
  int32x4_t v387;
  int32x4_t v388;
  int32x4_t v389;
  int32x4_t v390;
  int8x16_t v391;
  int8x16_t v392;
  int32x4_t v393;
  int32x4_t v394;
  unsigned int v395;
  int16x4_t v396;
  int32x4_t v397;
  int32x4_t v398;
  int32x4_t v399;
  int32x4_t v400;
  int8x16_t v401;
  int v402;
  int32x4_t v403;
  int32x4_t v404;
  int32x4_t v405;
  int8x16_t v406;
  char *v407;
  int v408;
  int v409;
  BOOL v412;
  void *v413;
  int32x4_t v414;
  int32x4_t v415;
  int32x4_t v416;
  int32x4_t v417;
  void *v418;
  int32x2_t v419;
  uint32x2_t v420;
  uint32x4_t v421;
  int32x4_t v422;
  char v423;
  unint64_t v424;
  unint64_t v425;
  void *v426;
  int32x4_t v427;
  int32x4_t v428;
  int32x4_t v429;
  int32x4_t v430;
  int16x8_t *v431;
  int16x8_t v432;
  int32x4_t v433;
  int32x4_t v434;
  int32x4_t v435;
  int32x4_t v436;
  int16x8_t *v437;
  int16x8_t v438;
  int32x4_t v439;
  int32x4_t v440;
  int32x4_t v441;
  int32x4_t v442;
  int32x4_t v443;
  int32x4_t v444;
  int32x4_t v445;
  int32x4_t v446;
  int32x4_t v447;
  int32x4_t v448;
  int32x4_t v449;
  int32x4_t v450;
  int8x16_t v451;
  int8x16_t v452;
  int8x16_t v453;
  int8x16_t v454;
  int32x4_t v455;
  int32x4_t v456;
  int32x4_t v457;
  int32x4_t v458;
  int32x4_t v459;
  int32x4_t v460;
  int32x4_t v461;
  int32x4_t v462;
  int32x4_t v463;
  int32x4_t v464;
  int32x4_t v465;
  int32x4_t v466;
  int8x16_t v467;
  int8x16_t v468;
  int8x16_t v469;
  int8x16_t v470;
  int32x4_t v471;
  int32x4_t v472;
  int32x4_t v473;
  int32x4_t v474;
  int32x4_t v475;
  int16x8_t *v476;
  int16x8_t v477;
  int32x4_t v478;
  int32x4_t v479;
  int32x4_t v480;
  int32x4_t v481;
  int16x8_t *v482;
  int16x8_t v483;
  int32x4_t v484;
  int32x4_t v485;
  int32x4_t v486;
  int32x4_t v487;
  int32x4_t v488;
  int32x4_t v489;
  int32x4_t v490;
  int32x4_t v491;
  int32x4_t v492;
  int32x4_t v493;
  int32x4_t v494;
  int32x4_t v495;
  int8x16_t v496;
  int8x16_t v497;
  int8x16_t v498;
  int8x16_t v499;
  int32x4_t v500;
  int32x4_t v501;
  int32x4_t v502;
  int32x4_t v503;
  int32x4_t v504;
  int32x4_t v505;
  int32x4_t v506;
  int32x4_t v507;
  int32x4_t v508;
  int32x4_t v509;
  int32x4_t v510;
  int8x16_t v511;
  int8x16_t v512;
  int8x16_t v513;
  int8x16_t v514;
  int32x4_t v515;
  int32x4_t v516;
  int32x4_t v517;
  int32x4_t v518;
  uint32x4_t v519;
  int32x4_t v520;
  int16x8_t v521;
  int32x4_t v522;
  int32x4_t v523;
  int16x8_t v524;
  int32x4_t v525;
  int32x4_t v526;
  int32x4_t v527;
  int32x4_t v528;
  int32x4_t v529;
  int32x4_t v530;
  int32x4_t v531;
  int8x16_t v532;
  int8x16_t v533;
  int32x4_t v534;
  int32x4_t v535;
  int32x4_t v536;
  int32x4_t v537;
  int32x4_t v538;
  int32x4_t v539;
  int8x16_t v540;
  int8x16_t v541;
  int32x4_t v542;
  int32x4_t v543;
  int16x8_t v544;
  int32x4_t v545;
  int32x4_t v546;
  int16x8_t v547;
  int32x4_t v548;
  int32x4_t v549;
  int32x4_t v550;
  int32x4_t v551;
  int32x4_t v552;
  int32x4_t v553;
  int8x16_t v554;
  int8x16_t v555;
  int32x4_t v556;
  int32x4_t v557;
  int32x4_t v558;
  int32x4_t v559;
  int32x4_t v560;
  int32x4_t v561;
  int8x16_t v562;
  int8x16_t v563;
  int32x4_t v564;
  unsigned int v565;
  int32x2_t v566;
  int32x2_t v567;
  int32x2_t v568;
  int32x2_t v569;
  uint32x2_t v570;
  int8x8_t v571;
  int32x2_t v572;
  int32x2_t v573;
  uint32x2_t v574;
  int8x8_t v575;
  int32x2_t v576;
  uint32x2_t v577;
  int32x2_t v578;
  void *v579;
  char v580;
  int v581;
  int32x4_t v582;
  int32x4_t v583;
  int32x4_t v584;
  int32x4_t v585;
  int32x4_t v586;
  int32x4_t v587;
  int32x4_t v588;
  int32x4_t v589;
  int32x4_t v590;
  int32x4_t v591;
  int32x4_t v592;
  int32x4_t v593;
  int32x4_t v594;
  int32x4_t v595;
  int32x4_t v596;
  int32x4_t v597;
  int32x4_t v598;
  int32x4_t v599;
  int32x4_t v600;
  int32x4_t v601;
  int32x4_t v602;
  int32x4_t v604;
  int32x4_t v606;
  int32x4_t v608;
  int32x4_t v610;
  int v611;
  int32x4_t v612;
  int32x4_t v613;
  int v614;
  int32x4_t v615;
  int32x2_t v616;
  _BYTE __b[24];
  uint64_t v618;
  _WORD v619[16];
  _WORD v620[102];
  uint64_t v621;
  int8x16x2_t v622;
  int8x16x2_t v623;
  int8x16x2_t v624;
  int8x16x4_t v625;

  v24 = a19;
  v25 = a20;
  v621 = *MEMORY[0x1E0C80C00];
  v26 = a19 + 2;
  v27 = a5;
  if ((a20 & 4) != 0)
  {
    v28 = -2;
    v29 = v619;
    if ((a20 & 8) != 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  memset_pattern16(__b, &unk_19689A960, 2 * (a18 + 4));
  v24 = a19;
  memset_pattern16(&v618, &unk_19689A960, 2 * (a18 + 4));
  v25 = a20;
  v26 = a19 + 2;
  a5 = v27;
  v28 = 0;
  v29 = v619;
  if ((a20 & 8) == 0)
  {
LABEL_5:
    v30 = &v619[12 * v24];
    memset_pattern16(v30 - 2, &unk_19689A960, 2 * (a18 + 4));
    v24 = a19;
    memset_pattern16(v30 + 10, &unk_19689A960, 2 * (a18 + 4));
    v25 = a20;
    a5 = v27;
    v26 = a19;
  }
LABEL_6:
  v31 = a18;
  v32 = a18 + 2;
  v611 = v26;
  if ((v25 & 1) != 0)
  {
    v614 = -2;
    if ((v25 & 2) != 0)
      goto LABEL_15;
    goto LABEL_12;
  }
  v33 = v26 - v28;
  v34 = &v619[12 * v28 - 2];
  do
  {
    memset_pattern16(v34, &unk_19689A960, 4uLL);
    v34 += 12;
    --v33;
  }
  while (v33);
  v614 = 0;
  v24 = a19;
  v31 = a18;
  a5 = v27;
  v26 = v611;
  v25 = a20;
  if ((a20 & 2) == 0)
  {
LABEL_12:
    v35 = v26 - v28;
    v36 = &v619[12 * v28 + v31];
    do
    {
      memset_pattern16(v36, &unk_19689A960, 4uLL);
      v36 += 12;
      --v35;
    }
    while (v35);
    v31 = a18;
    v32 = a18;
    v24 = a19;
    a5 = v27;
    v25 = a20;
  }
LABEL_15:
  if ((v25 & 4) != 0)
  {
    v244 = v28;
    if (v28 < 0)
      v245 = -1;
    else
      v245 = v28;
    v246 = (v245 + 1);
    v247 = v32 - (uint64_t)v614;
    v248 = (uint16x8_t *)&__b[24 * v28 + 84 + 2 * v614];
    v249 = v614 + a4 + 16;
    v250 = v614 + 12 * v28;
    v251 = &v619[12 * v28];
    do
    {
      v252 = v614;
      if (v247 >= 8)
      {
        if (v247 < 0x20)
        {
          v253 = 0;
LABEL_151:
          v259 = v253 - (v247 & 0xFFFFFFFFFFFFFFF8);
          v260 = v614 + v253;
          v261 = (uint16x8_t *)&v619[v253 + v250];
          do
          {
            *v261++ = vmovl_u8(*(uint8x8_t *)(a4 + v260));
            v260 += 8;
            v259 += 8;
          }
          while (v259);
          v252 = (v247 & 0xFFFFFFFFFFFFFFF8) + v614;
          if (v247 == (v247 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_143;
          goto LABEL_154;
        }
        v254 = (uint8x8_t *)v249;
        v255 = v248;
        v256 = v247 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v257 = *(uint8x16_t *)v254[-2].i8;
          a12 = (int32x4_t)vmovl_u8(*v254);
          v258 = vmovl_high_u8(*(uint8x16_t *)v254->i8);
          v255[-2] = vmovl_u8(*(uint8x8_t *)v257.i8);
          v255[-1] = vmovl_high_u8(v257);
          *v255 = (uint16x8_t)a12;
          v255[1] = v258;
          v255 += 4;
          v254 += 4;
          v256 -= 32;
        }
        while (v256);
        if (v247 == (v247 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_143;
        v253 = v247 & 0xFFFFFFFFFFFFFFE0;
        v252 = (v247 & 0xFFFFFFFFFFFFFFE0) + v614;
        if ((v247 & 0x18) != 0)
          goto LABEL_151;
      }
      do
      {
LABEL_154:
        v251[v252] = *(unsigned __int8 *)(a4 + v252);
        ++v252;
      }
      while (v32 != v252);
LABEL_143:
      a4 += a2;
      ++v244;
      v248 = (uint16x8_t *)((char *)v248 + 24);
      v249 += a2;
      v250 += 12;
      v251 += 12;
    }
    while (v244 != v246);
  }
  if ((v25 & 1) != 0)
  {
    v262 = 0;
    v263 = 0;
    if (v614 < 0)
      v264 = -1;
    else
      v264 = v614;
    v265 = (v264 + 1);
    v266 = v265 - v614;
    v267 = v266 & 0xFFFFFFFFFFFFFFE0;
    v268 = (uint16x8_t *)&v620[v614];
    v269 = v614 + a3 + 18;
    v270 = a3 + 2;
    v271 = a3 + 2 + v614;
    v272 = v614;
    do
    {
      v273 = v614;
      if (v266 >= 2)
      {
        if (v266 < 0x20)
        {
          v274 = 0;
LABEL_168:
          v280 = v614 + (unint64_t)(v265 & 1) - v265 + v274;
          v281 = (unsigned __int8 *)(v271 + v274);
          v282 = &v619[v274 + v272];
          do
          {
            v283 = *v281;
            v282[1] = v281[1];
            *v282 = v283;
            v282 += 2;
            v281 += 2;
            v280 += 2;
          }
          while (v280);
          v273 = v265 - (v265 & 1);
          if ((v265 & 1) == 0)
            goto LABEL_160;
          goto LABEL_171;
        }
        v275 = (uint8x8_t *)v269;
        v276 = v268;
        v277 = (v265 - v614) & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v278 = *(uint8x16_t *)v275[-2].i8;
          a12 = (int32x4_t)vmovl_u8(*v275);
          v279 = vmovl_high_u8(*(uint8x16_t *)v275->i8);
          v276[-2] = vmovl_u8(*(uint8x8_t *)v278.i8);
          v276[-1] = vmovl_high_u8(v278);
          *v276 = (uint16x8_t)a12;
          v276[1] = v279;
          v276 += 4;
          v275 += 4;
          v277 -= 32;
        }
        while (v277);
        if (v266 == v267)
          goto LABEL_160;
        v274 = (v265 - v614) & 0xFFFFFFFFFFFFFFE0;
        v273 = v267 + v614;
        if (((v265 - v614) & 0x1E) != 0)
          goto LABEL_168;
      }
LABEL_171:
      v284 = v265 - v273;
      v285 = &v619[v273 + v262];
      v286 = (unsigned __int8 *)(v270 + v273);
      do
      {
        v287 = *v286++;
        *v285++ = v287;
        --v284;
      }
      while (v284);
LABEL_160:
      ++v263;
      v268 = (uint16x8_t *)((char *)v268 + 24);
      v269 += 2;
      v271 += 2;
      v272 += 12;
      v262 += 12;
      v270 += 2;
    }
    while (v263 != v24);
  }
  v37 = 0;
  v38 = v32;
  v39 = v32 & 0xFFFFFFE0;
  v40 = v32 & 0xFFFFFFF8;
  v41 = (uint16x8_t *)&v620[v614 + 12];
  v42 = (uint16x8_t *)v620;
  v43 = v619;
  v44 = a1;
  do
  {
    v45 = v37;
    v46 = v41;
    if (v32 < 8)
    {
      v47 = 0;
      do
      {
LABEL_30:
        v43[v47] = *(unsigned __int8 *)(v44 + v47);
        ++v47;
      }
      while (v32 != v47);
      goto LABEL_18;
    }
    if (v32 >= 0x20)
    {
      v49 = 0;
      v50 = v42;
      do
      {
        v51 = *(uint8x16_t *)(v44 + v49);
        v52 = *(uint8x16_t *)(v44 + v49 + 16);
        a12 = (int32x4_t)vmovl_u8(*(uint8x8_t *)v52.i8);
        v50[-2] = vmovl_u8(*(uint8x8_t *)v51.i8);
        v50[-1] = vmovl_high_u8(v51);
        *v50 = (uint16x8_t)a12;
        v50[1] = vmovl_high_u8(v52);
        v50 += 4;
        v49 += 32;
      }
      while (v39 != v49);
      if (v39 == v32)
        goto LABEL_18;
      v48 = v32 & 0xFFFFFFE0;
      v47 = v48;
      if ((v32 & 0x18) == 0)
        goto LABEL_30;
    }
    else
    {
      v48 = 0;
    }
    v53 = v48;
    do
    {
      *(uint16x8_t *)&v43[v53] = vmovl_u8(*(uint8x8_t *)(v44 + v48));
      v48 += 8;
      v53 += 8;
    }
    while (v40 != v48);
    v47 = v32 & 0xFFFFFFF8;
    if (v40 != v32)
      goto LABEL_30;
LABEL_18:
    v44 += a2;
    v43 += 12;
    v37 = v45 + 1;
    v41 = (uint16x8_t *)((char *)v46 + 24);
    v42 = (uint16x8_t *)((char *)v42 + 24);
  }
  while ((_DWORD)v45 + 1 != (_DWORD)v24);
  if (v611 > (int)v24)
  {
    v54 = 0;
    v55 = v32 - (uint64_t)v614;
    v56 = v614 + a5 + 16;
    v57 = &__b[24 * v45 + 76 + 2 * v32];
    v58 = v24;
    v59 = a5;
    do
    {
      v60 = v614;
      if (v55 >= 8)
      {
        v61 = (unint64_t)&__b[24 * v45 + 76 + 24 * v54 + 2 * v614] >= a5 + v38 + v54 * a2
           || a5 + v614 + v54 * a2 >= (unint64_t)&v57[24 * v54];
        v60 = v614;
        if (v61)
        {
          if (v55 < 0x20)
          {
            v62 = 0;
LABEL_47:
            v68 = v62 - (v55 & 0xFFFFFFFFFFFFFFF8);
            v69 = v614 + v62;
            v70 = (uint16x8_t *)&v43[v69];
            do
            {
              *v70++ = vmovl_u8(*(uint8x8_t *)(v59 + v69));
              v69 += 8;
              v68 += 8;
            }
            while (v68);
            v60 = (v55 & 0xFFFFFFFFFFFFFFF8) + v614;
            if (v55 == (v55 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_34;
            goto LABEL_50;
          }
          v63 = (uint8x8_t *)v56;
          v64 = v46;
          v65 = v55 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v66 = *(uint8x16_t *)v63[-2].i8;
            a12 = (int32x4_t)vmovl_u8(*v63);
            v67 = vmovl_high_u8(*(uint8x16_t *)v63->i8);
            v64[-2] = vmovl_u8(*(uint8x8_t *)v66.i8);
            v64[-1] = vmovl_high_u8(v66);
            *v64 = (uint16x8_t)a12;
            v64[1] = v67;
            v64 += 4;
            v63 += 4;
            v65 -= 32;
          }
          while (v65);
          if (v55 == (v55 & 0xFFFFFFFFFFFFFFE0))
            goto LABEL_34;
          v62 = v55 & 0xFFFFFFFFFFFFFFE0;
          v60 = (v55 & 0xFFFFFFFFFFFFFFE0) + v614;
          if ((v55 & 0x18) != 0)
            goto LABEL_47;
        }
      }
      do
      {
LABEL_50:
        v43[v60] = *(unsigned __int8 *)(v59 + v60);
        ++v60;
      }
      while (v38 != v60);
LABEL_34:
      v59 += a2;
      v43 += 12;
      ++v58;
      ++v54;
      v46 = (uint16x8_t *)((char *)v46 + 24);
      v56 += a2;
    }
    while (v58 != v611);
  }
  if (!a6)
  {
    v288 = __clz(a7) + a17 - 31;
    v289 = (char *)&dav1d_cdef_directions + 2 * a8;
    v290 = v289[9];
    v291 = v289[1];
    v292 = v289[8];
    v293 = *v289;
    v298 = ((v31 - 1) & 0xFFFFFFFF80000000) != 0
        || v292 + (int)v31 - 1 < v292
        || v293 + (int)v31 - 1 < v293
        || v290 + (int)v31 - 1 < v290
        || v291 + (int)v31 - 1 < v291;
    v299 = (void *)(v31 & 0xFFFFFFF8);
    v300 = vdupq_n_s32(a7);
    v301 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v288));
    v302.i64[0] = 0x800000008;
    v302.i64[1] = 0x800000008;
    while (1)
    {
      v303 = v31 < 8 || v298;
      if ((v303 & 1) != 0)
      {
        result = 0;
      }
      else
      {
        v304 = 0;
        do
        {
          a16.i64[0] = *(_QWORD *)((char *)v304 + a1);
          v305 = (int32x4_t)vqtbl1q_s8(a16, (int8x16_t)xmmword_196889CC0);
          v306 = (int32x4_t)vqtbl1q_s8(a16, (int8x16_t)xmmword_196889CD0);
          v307 = *(int16x8_t *)&v29[v292 + (int)v304];
          v308 = vmovl_s16(*(int16x4_t *)v307.i8);
          v309 = vmovl_high_s16(v307);
          v310 = *(int16x8_t *)&v29[(int)v304 - v292];
          v311 = vmovl_s16(*(int16x4_t *)v310.i8);
          v312 = vmovl_high_s16(v310);
          v313 = *(int16x8_t *)&v29[v293 + (int)v304];
          v314 = vmovl_high_s16(v313);
          v315 = vmovl_s16(*(int16x4_t *)v313.i8);
          v316 = *(int16x8_t *)&v29[(int)v304 - v293];
          v317 = vmovl_s16(*(int16x4_t *)v316.i8);
          v318 = vmovl_high_s16(v316);
          v319 = vsubq_s32(v309, v306);
          v320 = vsubq_s32(v308, v305);
          v321 = vabdq_s32(v309, v306);
          v322 = vabdq_s32(v308, v305);
          v323 = (int8x16_t)vminq_s32(v321, vmaxq_s32(vsubq_s32(v300, (int32x4_t)vshlq_u32((uint32x4_t)v321, v301)), (int32x4_t)0));
          v324 = (int8x16_t)vminq_s32(v322, vmaxq_s32(vsubq_s32(v300, (int32x4_t)vshlq_u32((uint32x4_t)v322, v301)), (int32x4_t)0));
          v325 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v319), (int8x16_t)vnegq_s32((int32x4_t)v323), v323);
          v326 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v320), (int8x16_t)vnegq_s32((int32x4_t)v324), v324);
          v327 = vsubq_s32(v312, v306);
          v328 = vsubq_s32(v311, v305);
          v329 = vabdq_s32(v312, v306);
          v330 = vabdq_s32(v311, v305);
          v331 = (int8x16_t)vminq_s32(v329, vmaxq_s32(vsubq_s32(v300, (int32x4_t)vshlq_u32((uint32x4_t)v329, v301)), (int32x4_t)0));
          v332 = (int8x16_t)vminq_s32(v330, vmaxq_s32(vsubq_s32(v300, (int32x4_t)vshlq_u32((uint32x4_t)v330, v301)), (int32x4_t)0));
          v333 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v327), (int8x16_t)vnegq_s32((int32x4_t)v331), v331);
          v334 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v328), (int8x16_t)vnegq_s32((int32x4_t)v332), v332);
          v335 = vsubq_s32(v315, v305);
          v336 = vsubq_s32(v314, v306);
          v337 = vabdq_s32(v315, v305);
          v338 = vabdq_s32(v314, v306);
          v339 = (int8x16_t)vminq_s32(v337, vmaxq_s32(vsubq_s32(v300, (int32x4_t)vshlq_u32((uint32x4_t)v337, v301)), (int32x4_t)0));
          v340 = (int8x16_t)vminq_s32(v338, vmaxq_s32(vsubq_s32(v300, (int32x4_t)vshlq_u32((uint32x4_t)v338, v301)), (int32x4_t)0));
          v341 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v335), (int8x16_t)vnegq_s32((int32x4_t)v339), v339);
          v342 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v336), (int8x16_t)vnegq_s32((int32x4_t)v340), v340);
          v343 = vsubq_s32(v318, v306);
          v344 = vsubq_s32(v317, v305);
          v345 = vabdq_s32(v318, v306);
          v346 = vabdq_s32(v317, v305);
          v347 = (int8x16_t)vminq_s32(v345, vmaxq_s32(vsubq_s32(v300, (int32x4_t)vshlq_u32((uint32x4_t)v345, v301)), (int32x4_t)0));
          v348 = (int8x16_t)vminq_s32(v346, vmaxq_s32(vsubq_s32(v300, (int32x4_t)vshlq_u32((uint32x4_t)v346, v301)), (int32x4_t)0));
          v349 = vaddq_s32(vaddq_s32(v334, v326), vaddq_s32(v341, (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v344), (int8x16_t)vnegq_s32((int32x4_t)v348), v348)));
          v350 = vaddq_s32(vaddq_s32(v333, v325), vaddq_s32(v342, (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v343), (int8x16_t)vnegq_s32((int32x4_t)v347), v347)));
          v351 = *(int16x8_t *)&v29[v290 + (int)v304];
          v352 = vmovl_high_s16(v351);
          v353 = vmovl_s16(*(int16x4_t *)v351.i8);
          v354 = *(int16x8_t *)&v29[(int)v304 - v290];
          v355 = vmovl_high_s16(v354);
          v356 = vmovl_s16(*(int16x4_t *)v354.i8);
          v357 = *(int16x8_t *)&v29[v291 + (int)v304];
          v358 = vmovl_high_s16(v357);
          v359 = vmovl_s16(*(int16x4_t *)v357.i8);
          v360 = *(int16x8_t *)&v29[(int)v304 - v291];
          v361 = vmovl_s16(*(int16x4_t *)v360.i8);
          v362 = vmovl_high_s16(v360);
          v363 = vsubq_s32(v353, v305);
          v364 = vsubq_s32(v352, v306);
          v365 = vabdq_s32(v353, v305);
          v366 = vabdq_s32(v352, v306);
          v367 = (int8x16_t)vminq_s32(v365, vmaxq_s32(vsubq_s32(v300, (int32x4_t)vshlq_u32((uint32x4_t)v365, v301)), (int32x4_t)0));
          v368 = (int8x16_t)vminq_s32(v366, vmaxq_s32(vsubq_s32(v300, (int32x4_t)vshlq_u32((uint32x4_t)v366, v301)), (int32x4_t)0));
          v369 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v363), (int8x16_t)vnegq_s32((int32x4_t)v367), v367);
          v370 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v364), (int8x16_t)vnegq_s32((int32x4_t)v368), v368);
          v371 = vsubq_s32(v356, v305);
          v372 = vsubq_s32(v355, v306);
          v373 = vabdq_s32(v356, v305);
          v374 = vabdq_s32(v355, v306);
          v375 = (int8x16_t)vminq_s32(v373, vmaxq_s32(vsubq_s32(v300, (int32x4_t)vshlq_u32((uint32x4_t)v373, v301)), (int32x4_t)0));
          v376 = (int8x16_t)vminq_s32(v374, vmaxq_s32(vsubq_s32(v300, (int32x4_t)vshlq_u32((uint32x4_t)v374, v301)), (int32x4_t)0));
          v377 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v371), (int8x16_t)vnegq_s32((int32x4_t)v375), v375);
          v378 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v372), (int8x16_t)vnegq_s32((int32x4_t)v376), v376);
          v379 = vsubq_s32(v359, v305);
          v380 = vsubq_s32(v358, v306);
          v381 = vabdq_s32(v359, v305);
          v382 = vabdq_s32(v358, v306);
          v383 = (int8x16_t)vminq_s32(v381, vmaxq_s32(vsubq_s32(v300, (int32x4_t)vshlq_u32((uint32x4_t)v381, v301)), (int32x4_t)0));
          v384 = (int8x16_t)vminq_s32(v382, vmaxq_s32(vsubq_s32(v300, (int32x4_t)vshlq_u32((uint32x4_t)v382, v301)), (int32x4_t)0));
          v385 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v379), (int8x16_t)vnegq_s32((int32x4_t)v383), v383);
          v386 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v380), (int8x16_t)vnegq_s32((int32x4_t)v384), v384);
          v387 = vsubq_s32(v362, v306);
          v388 = vsubq_s32(v361, v305);
          v389 = vabdq_s32(v362, v306);
          v390 = vabdq_s32(v361, v305);
          v391 = (int8x16_t)vminq_s32(v389, vmaxq_s32(vsubq_s32(v300, (int32x4_t)vshlq_u32((uint32x4_t)v389, v301)), (int32x4_t)0));
          v392 = (int8x16_t)vminq_s32(v390, vmaxq_s32(vsubq_s32(v300, (int32x4_t)vshlq_u32((uint32x4_t)v390, v301)), (int32x4_t)0));
          v393 = vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v377, v369), v385), (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v388), (int8x16_t)vnegq_s32((int32x4_t)v392), v392)), vaddq_s32(v349, v349));
          v394 = vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v378, v370), v386), (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v387), (int8x16_t)vnegq_s32((int32x4_t)v391), v391)), vaddq_s32(v350, v350));
          v623.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsraq_n_s32(v394, v394, 0x1FuLL), v302), 4uLL);
          v623.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsraq_n_s32(v393, v393, 0x1FuLL), v302), 4uLL);
          *(int8x8_t *)((char *)v304 + a1) = vadd_s8(*(int8x8_t *)a16.i8, (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v623, (int8x16_t)xmmword_19689A990));
          v304 = (char *)v304 + 8;
        }
        while (v299 != v304);
        result = v31 & 0xFFFFFFF8;
        if (v299 == (void *)v31)
          goto LABEL_190;
      }
      do
      {
        v395 = *(unsigned __int8 *)(a1 + result);
        v396.i16[0] = v29[v292 + (int)result];
        v396.i16[1] = v29[(int)result - v292];
        v396.i16[2] = v29[v293 + (int)result];
        v396.i16[3] = v29[(int)result - v293];
        v397 = vmovl_s16(v396);
        v398 = vdupq_n_s32(v395);
        v399 = vsubq_s32(v397, v398);
        v400 = vabdq_s32(v397, v398);
        v401 = (int8x16_t)vminq_s32(v400, vmaxq_s32(vsubq_s32(v300, (int32x4_t)vshlq_u32((uint32x4_t)v400, v301)), (int32x4_t)0));
        v402 = vaddvq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v399), (int8x16_t)vnegq_s32((int32x4_t)v401), v401));
        v401.i16[0] = v29[v290 + (int)result];
        v401.i16[1] = v29[(int)result - v290];
        v401.i16[2] = v29[v291 + (int)result];
        v401.i16[3] = v29[(int)result - v291];
        v403 = vmovl_s16(*(int16x4_t *)v401.i8);
        v404 = vsubq_s32(v403, v398);
        v405 = vabdq_s32(v403, v398);
        v406 = (int8x16_t)vminq_s32(v405, vmaxq_s32(vsubq_s32(v300, (int32x4_t)vshlq_u32((uint32x4_t)v405, v301)), (int32x4_t)0));
        a16 = vbslq_s8((int8x16_t)vcltzq_s32(v404), (int8x16_t)vnegq_s32((int32x4_t)v406), v406);
        a16.i32[0] = vaddvq_s32((int32x4_t)a16);
        *(_BYTE *)(a1 + result++) = v395
                                  + ((a16.i32[0] + 2 * v402 + ((a16.i32[0] + 2 * v402) >> 31) + 8) >> 4);
      }
      while (v31 != result);
LABEL_190:
      a1 += a2;
      v29 += 12;
      LODWORD(v24) = v24 - 1;
      if (!(_DWORD)v24)
        return result;
    }
  }
  v71 = 4 - (a6 & 1);
  v72 = __clz(a6) + a17 - 31;
  v73 = v72 & ~(v72 >> 31);
  if (!a7)
  {
    v407 = (char *)&dav1d_cdef_directions + 2 * a8;
    v408 = v407[4];
    v409 = v407[5];
    v412 = ((v31 - 1) & 0xFFFFFFFF80000000) != 0 || v408 + (int)v31 - 1 < v408 || v409 + (int)v31 - 1 < v409;
    v413 = (void *)(v31 & 0xFFFFFFF0);
    v414 = vdupq_n_s32(v73);
    v415 = vdupq_n_s32(a6);
    v416 = vdupq_n_s32(v71);
    v417 = vdupq_n_s32(v71 & 1 | 2);
    v418 = (void *)(v31 & 0xFFFFFFF8);
    v419.i32[0] = v71 & 1 | 2;
    v419.i32[1] = 4 - (a6 & 1);
    v420 = (uint32x2_t)vneg_s32(*(int32x2_t *)v414.i8);
    v421 = (uint32x4_t)vnegq_s32(v414);
    v422.i64[0] = 0x800000008;
    v422.i64[1] = 0x800000008;
    result = (unint64_t)&unk_196889000;
    v616 = v419;
    while (1)
    {
      v423 = v31 < 8 || v412;
      if ((v423 & 1) != 0)
      {
        v424 = 0;
      }
      else
      {
        if (v31 < 0x10)
        {
          v425 = 0;
          do
          {
LABEL_223:
            v20.i64[0] = *(_QWORD *)(a1 + v425);
            v520 = (int32x4_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_196889CC0);
            v521 = *(int16x8_t *)&v29[v408 + (int)v425];
            v522 = (int32x4_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_196889CD0);
            v523 = vmovl_s16(*(int16x4_t *)v521.i8);
            v524 = *(int16x8_t *)&v29[(int)v425 - v408];
            v525 = vmovl_high_s16(v521);
            v526 = vmovl_s16(*(int16x4_t *)v524.i8);
            v527 = vmovl_high_s16(v524);
            v528 = vsubq_s32(v525, v522);
            v529 = vsubq_s32(v523, v520);
            v530 = vabdq_s32(v525, v522);
            v531 = vabdq_s32(v523, v520);
            v532 = (int8x16_t)vminq_s32(v530, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v530, v421)), (int32x4_t)0));
            v533 = (int8x16_t)vminq_s32(v531, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v531, v421)), (int32x4_t)0));
            v534 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v528), (int8x16_t)vnegq_s32((int32x4_t)v532), v532);
            v535 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v529), (int8x16_t)vnegq_s32((int32x4_t)v533), v533);
            v536 = vsubq_s32(v527, v522);
            v537 = vsubq_s32(v526, v520);
            v538 = vabdq_s32(v527, v522);
            v539 = vabdq_s32(v526, v520);
            v540 = (int8x16_t)vminq_s32(v538, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v538, v421)), (int32x4_t)0));
            v541 = (int8x16_t)vminq_s32(v539, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v539, v421)), (int32x4_t)0));
            v542 = vmulq_s32(vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v536), (int8x16_t)vnegq_s32((int32x4_t)v540), v540), v534), v416);
            v543 = vmulq_s32(vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v537), (int8x16_t)vnegq_s32((int32x4_t)v541), v541), v535), v416);
            v544 = *(int16x8_t *)&v29[v409 + (int)v425];
            v545 = vmovl_s16(*(int16x4_t *)v544.i8);
            v546 = vmovl_high_s16(v544);
            v547 = *(int16x8_t *)&v29[(int)v425 - v409];
            v548 = vmovl_s16(*(int16x4_t *)v547.i8);
            v549 = vmovl_high_s16(v547);
            v550 = vsubq_s32(v546, v522);
            v551 = vsubq_s32(v545, v520);
            v552 = vabdq_s32(v546, v522);
            v553 = vabdq_s32(v545, v520);
            v554 = (int8x16_t)vminq_s32(v552, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v552, v421)), (int32x4_t)0));
            v555 = (int8x16_t)vminq_s32(v553, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v553, v421)), (int32x4_t)0));
            v556 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v550), (int8x16_t)vnegq_s32((int32x4_t)v554), v554);
            v557 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v551), (int8x16_t)vnegq_s32((int32x4_t)v555), v555);
            v558 = vsubq_s32(v549, v522);
            v559 = vsubq_s32(v548, v520);
            v560 = vabdq_s32(v549, v522);
            v561 = vabdq_s32(v548, v520);
            v562 = (int8x16_t)vminq_s32(v560, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v560, v421)), (int32x4_t)0));
            v563 = (int8x16_t)vminq_s32(v561, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v561, v421)), (int32x4_t)0));
            a12 = vmlaq_s32(v543, vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v559), (int8x16_t)vnegq_s32((int32x4_t)v563), v563), v557), v417);
            v564 = vmlaq_s32(v542, vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v558), (int8x16_t)vnegq_s32((int32x4_t)v562), v562), v556), v417);
            v624.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsraq_n_s32(v564, v564, 0x1FuLL), v422), 4uLL);
            v624.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsraq_n_s32(a12, a12, 0x1FuLL), v422), 4uLL);
            *(int8x8_t *)a12.i8 = vadd_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v624, (int8x16_t)xmmword_19689A990));
            *(_QWORD *)(a1 + v425) = a12.i64[0];
            v425 += 8;
          }
          while (v418 != (void *)v425);
          v424 = v31 & 0xFFFFFFF8;
          if (v418 == (void *)v31)
            goto LABEL_211;
          goto LABEL_225;
        }
        v426 = 0;
        do
        {
          v20 = *(int8x16_t *)((char *)v426 + a1);
          v427 = (int32x4_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_196889CC0);
          v428 = (int32x4_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_196889CB0);
          v429 = (int32x4_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_196889CD0);
          v430 = (int32x4_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_196889CA0);
          v431 = (int16x8_t *)&v29[v408 + (int)v426];
          v432 = v431[1];
          v433 = vmovl_s16(*(int16x4_t *)v431->i8);
          v434 = vmovl_s16(*(int16x4_t *)v432.i8);
          v435 = vmovl_high_s16(*v431);
          v436 = vmovl_high_s16(v432);
          v437 = (int16x8_t *)&v29[(int)v426 - v408];
          v438 = v437[1];
          v439 = vmovl_s16(*(int16x4_t *)v437->i8);
          v440 = vmovl_s16(*(int16x4_t *)v438.i8);
          v441 = vmovl_high_s16(*v437);
          v442 = vmovl_high_s16(v438);
          v443 = vsubq_s32(v436, v430);
          v444 = vsubq_s32(v435, v429);
          v445 = vsubq_s32(v434, v428);
          v446 = vsubq_s32(v433, v427);
          v447 = vabdq_s32(v436, v430);
          v448 = vabdq_s32(v435, v429);
          v449 = vabdq_s32(v434, v428);
          v450 = vabdq_s32(v433, v427);
          v451 = (int8x16_t)vminq_s32(v447, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v447, v421)), (int32x4_t)0));
          v452 = (int8x16_t)vminq_s32(v448, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v448, v421)), (int32x4_t)0));
          v453 = (int8x16_t)vminq_s32(v449, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v449, v421)), (int32x4_t)0));
          v454 = (int8x16_t)vminq_s32(v450, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v450, v421)), (int32x4_t)0));
          v455 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v443), (int8x16_t)vnegq_s32((int32x4_t)v451), v451);
          v456 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v444), (int8x16_t)vnegq_s32((int32x4_t)v452), v452);
          v457 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v445), (int8x16_t)vnegq_s32((int32x4_t)v453), v453);
          v458 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v446), (int8x16_t)vnegq_s32((int32x4_t)v454), v454);
          v459 = vsubq_s32(v442, v430);
          v460 = vsubq_s32(v441, v429);
          v461 = vsubq_s32(v440, v428);
          v462 = vsubq_s32(v439, v427);
          v463 = vabdq_s32(v442, v430);
          v464 = vabdq_s32(v441, v429);
          v465 = vabdq_s32(v440, v428);
          v466 = vabdq_s32(v439, v427);
          v467 = (int8x16_t)vminq_s32(v463, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v463, v421)), (int32x4_t)0));
          v468 = (int8x16_t)vminq_s32(v464, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v464, v421)), (int32x4_t)0));
          v469 = (int8x16_t)vminq_s32(v465, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v465, v421)), (int32x4_t)0));
          v470 = (int8x16_t)vminq_s32(v466, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v466, v421)), (int32x4_t)0));
          v471 = vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v462), (int8x16_t)vnegq_s32((int32x4_t)v470), v470), v458);
          v472 = vmulq_s32(vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v459), (int8x16_t)vnegq_s32((int32x4_t)v467), v467), v455), v416);
          v473 = vmulq_s32(vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v460), (int8x16_t)vnegq_s32((int32x4_t)v468), v468), v456), v416);
          v474 = vmulq_s32(vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v461), (int8x16_t)vnegq_s32((int32x4_t)v469), v469), v457), v416);
          v475 = vmulq_s32(v471, v416);
          v476 = (int16x8_t *)&v29[v409 + (int)v426];
          v477 = v476[1];
          v478 = vmovl_s16(*(int16x4_t *)v476->i8);
          v479 = vmovl_s16(*(int16x4_t *)v477.i8);
          v480 = vmovl_high_s16(*v476);
          v481 = vmovl_high_s16(v477);
          v482 = (int16x8_t *)&v29[(int)v426 - v409];
          v483 = v482[1];
          v484 = vmovl_s16(*(int16x4_t *)v482->i8);
          v485 = vmovl_s16(*(int16x4_t *)v483.i8);
          v486 = vmovl_high_s16(*v482);
          v487 = vmovl_high_s16(v483);
          v488 = vsubq_s32(v481, v430);
          v489 = vsubq_s32(v480, v429);
          v490 = vsubq_s32(v479, v428);
          v491 = vsubq_s32(v478, v427);
          v492 = vabdq_s32(v481, v430);
          v493 = vabdq_s32(v480, v429);
          v494 = vabdq_s32(v479, v428);
          v495 = vabdq_s32(v478, v427);
          v496 = (int8x16_t)vminq_s32(v492, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v492, v421)), (int32x4_t)0));
          v497 = (int8x16_t)vminq_s32(v493, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v493, v421)), (int32x4_t)0));
          v498 = (int8x16_t)vminq_s32(v494, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v494, v421)), (int32x4_t)0));
          v499 = (int8x16_t)vminq_s32(v495, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v495, v421)), (int32x4_t)0));
          v500 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v488), (int8x16_t)vnegq_s32((int32x4_t)v496), v496);
          v501 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v489), (int8x16_t)vnegq_s32((int32x4_t)v497), v497);
          v502 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v490), (int8x16_t)vnegq_s32((int32x4_t)v498), v498);
          v503 = vsubq_s32(v487, v430);
          v504 = vsubq_s32(v486, v429);
          v505 = vsubq_s32(v485, v428);
          v506 = vsubq_s32(v484, v427);
          v507 = vabdq_s32(v487, v430);
          v508 = vabdq_s32(v486, v429);
          v509 = vabdq_s32(v485, v428);
          v510 = vabdq_s32(v484, v427);
          v511 = (int8x16_t)vminq_s32(v507, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v507, v421)), (int32x4_t)0));
          v512 = (int8x16_t)vminq_s32(v508, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v508, v421)), (int32x4_t)0));
          v513 = (int8x16_t)vminq_s32(v509, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v509, v421)), (int32x4_t)0));
          v514 = (int8x16_t)vminq_s32(v510, vmaxq_s32(vsubq_s32(v415, (int32x4_t)vshlq_u32((uint32x4_t)v510, v421)), (int32x4_t)0));
          v515 = vmlaq_s32(v475, vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v506), (int8x16_t)vnegq_s32((int32x4_t)v514), v514), (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v491), (int8x16_t)vnegq_s32((int32x4_t)v499), v499)), v417);
          v516 = vmlaq_s32(v474, vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v505), (int8x16_t)vnegq_s32((int32x4_t)v513), v513), v502), v417);
          v517 = vmlaq_s32(v473, vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v504), (int8x16_t)vnegq_s32((int32x4_t)v512), v512), v501), v417);
          v518 = vmlaq_s32(v472, vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v503), (int8x16_t)vnegq_s32((int32x4_t)v511), v511), v500), v417);
          v519 = (uint32x4_t)vaddq_s32(vsraq_n_s32(v517, v517, 0x1FuLL), v422);
          v625.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsraq_n_s32(v518, v518, 0x1FuLL), v422), 4uLL);
          v625.val[1] = (int8x16_t)vshrq_n_u32(v519, 4uLL);
          v625.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsraq_n_s32(v516, v516, 0x1FuLL), v422), 4uLL);
          v625.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsraq_n_s32(v515, v515, 0x1FuLL), v422), 4uLL);
          a12 = (int32x4_t)vaddq_s8(v20, vqtbl4q_s8(v625, (int8x16_t)xmmword_19689A980));
          *(int32x4_t *)((char *)v426 + a1) = a12;
          v426 = (char *)v426 + 16;
        }
        while (v413 != v426);
        v419 = v616;
        if (v413 == (void *)v31)
          goto LABEL_211;
        v425 = v31 & 0xFFFFFFF0;
        v424 = v425;
        if ((v31 & 8) != 0)
          goto LABEL_223;
      }
      do
      {
LABEL_225:
        v565 = *(unsigned __int8 *)(a1 + v424);
        a12.i16[0] = v29[v409 + (int)v424];
        a12.i16[2] = v29[v408 + (int)v424];
        v20.i16[0] = v29[(int)v424 - v409];
        v20.i16[2] = v29[(int)v424 - v408];
        v566 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)a12.i8, 0x10uLL), 0x10uLL);
        v567 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v20.i8, 0x10uLL), 0x10uLL);
        v568 = vdup_n_s32(v565);
        v569 = vsub_s32(v566, v568);
        v570 = (uint32x2_t)vabd_s32(v566, v568);
        v571 = (int8x8_t)vmin_s32((int32x2_t)v570, vmax_s32(vsub_s32(*(int32x2_t *)v415.i8, (int32x2_t)vshl_u32(v570, v420)), 0));
        v572 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v569), (int8x8_t)vneg_s32((int32x2_t)v571), v571);
        v573 = vsub_s32(v567, v568);
        v574 = (uint32x2_t)vabd_s32(v567, v568);
        v575 = (int8x8_t)vmin_s32((int32x2_t)v574, vmax_s32(vsub_s32(*(int32x2_t *)v415.i8, (int32x2_t)vshl_u32(v574, v420)), 0));
        v576 = vmul_s32(vadd_s32((int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v573), (int8x8_t)vneg_s32((int32x2_t)v575), v575), v572), v419);
        *(int32x2_t *)v20.i8 = vdup_lane_s32(v576, 1);
        *(int32x2_t *)a12.i8 = vadd_s32(v576, *(int32x2_t *)v20.i8);
        *(_BYTE *)(a1 + v424++) = v565 + ((a12.i32[0] + (a12.i32[0] >> 31) + 8) >> 4);
      }
      while (v31 != v424);
LABEL_211:
      a1 += a2;
      v29 += 12;
      LODWORD(v24) = v24 - 1;
      if (!(_DWORD)v24)
        return result;
    }
  }
  v74 = __clz(a7) + a17 - 31;
  v75 = (char *)&dav1d_cdef_directions + 2 * a8;
  v76 = v75[4];
  v77 = v75[8];
  v78 = *v75;
  v79 = v75[5];
  v80 = v75[9];
  v81 = v75[1];
  v88 = ((v31 - 1) & 0xFFFFFFFF80000000) != 0
     || v76 + (int)v31 - 1 < v76
     || v77 + (int)v31 - 1 < v77
     || v78 + (int)v31 - 1 < v78
     || v79 + (int)v31 - 1 < v79
     || v80 + (int)v31 - 1 < v80
     || v81 + (int)v31 - 1 < v81;
  v580 = v88;
  v89 = (int8x16_t)vdupq_n_s32(v73);
  v90 = vdupq_n_s32(a6);
  v91 = vdupq_n_s32(a7);
  v92 = vdupq_n_s32(v71);
  v579 = (void *)(v31 & 0xFFFFFFF8);
  v93.i32[0] = 4 - (a6 & 1);
  v93.i32[1] = v71 & 1 | 2;
  result = -v78;
  v95 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v74));
  v96 = 0uLL;
  v97 = (uint32x2_t)vneg_s32(*(int32x2_t *)v89.i8);
  v98 = (uint32x4_t)vnegq_s32((int32x4_t)v89);
  v582 = v90;
  v615 = vdupq_n_s32(v93.u32[1]);
  v578 = v93;
  v577 = v97;
  do
  {
    v99 = v580;
    if (v31 < 8)
      v99 = 1;
    v581 = v24;
    v100 = 0;
    if ((v99 & 1) != 0)
      goto LABEL_229;
    do
    {
      v89.i64[0] = *(_QWORD *)((char *)v100 + a1);
      v101 = (int32x4_t)vqtbl1q_s8(v89, (int8x16_t)xmmword_196889CD0);
      v102 = (int32x4_t)vqtbl1q_s8(v89, (int8x16_t)xmmword_196889CC0);
      v103 = *(int16x8_t *)&v29[v76 + (int)v100];
      v104 = vmovl_high_s16(v103);
      v105 = vmovl_s16(*(int16x4_t *)v103.i8);
      v106 = *(int16x8_t *)&v29[(int)v100 - v76];
      v107 = vmovl_high_s16(v106);
      v108 = vmovl_s16(*(int16x4_t *)v106.i8);
      v109 = vabdq_s32(v105, v102);
      v110 = vabdq_s32(v104, v101);
      v111 = (int8x16_t)vminq_s32(v109, vmaxq_s32(vsubq_s32(v90, (int32x4_t)vshlq_u32((uint32x4_t)v109, v98)), v96));
      v112 = (int8x16_t)vminq_s32(v110, vmaxq_s32(vsubq_s32(v90, (int32x4_t)vshlq_u32((uint32x4_t)v110, v98)), v96));
      v610 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v105, v102)), (int8x16_t)vnegq_s32((int32x4_t)v111), v111);
      v613 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v104, v101)), (int8x16_t)vnegq_s32((int32x4_t)v112), v112);
      v113 = vabdq_s32(v108, v102);
      v114 = vabdq_s32(v107, v101);
      v115 = (int8x16_t)vminq_s32(v113, vmaxq_s32(vsubq_s32(v90, (int32x4_t)vshlq_u32((uint32x4_t)v113, v98)), v96));
      v116 = (int8x16_t)vminq_s32(v114, vmaxq_s32(vsubq_s32(v90, (int32x4_t)vshlq_u32((uint32x4_t)v114, v98)), v96));
      v612 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v108, v102)), (int8x16_t)vnegq_s32((int32x4_t)v115), v115);
      v117 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v107, v101)), (int8x16_t)vnegq_s32((int32x4_t)v116), v116);
      v118 = *(int16x8_t *)&v29[v77 + (int)v100];
      v119 = vmovl_high_s16(v118);
      v120 = vmovl_s16(*(int16x4_t *)v118.i8);
      v121 = *(int16x8_t *)&v29[(int)v100 - v77];
      v122 = vmovl_high_s16(v121);
      v123 = vmovl_s16(*(int16x4_t *)v121.i8);
      v124 = *(int16x8_t *)&v29[v78 + (int)v100];
      v125 = vmovl_s16(*(int16x4_t *)v124.i8);
      v126 = vmovl_high_s16(v124);
      v127 = *(int16x8_t *)&v29[(int)v100 - v78];
      v128 = vmovl_high_s16(v127);
      v129 = vmovl_s16(*(int16x4_t *)v127.i8);
      v606 = v120;
      v608 = v119;
      v130 = vsubq_s32(v120, v102);
      v131 = vabdq_s32(v120, v102);
      v132 = vabdq_s32(v119, v101);
      v133 = (int8x16_t)vminq_s32(v131, vmaxq_s32(vsubq_s32(v91, (int32x4_t)vshlq_u32((uint32x4_t)v131, v95)), v96));
      v134 = (int8x16_t)vminq_s32(v132, vmaxq_s32(vsubq_s32(v91, (int32x4_t)vshlq_u32((uint32x4_t)v132, v95)), v96));
      v601 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v130), (int8x16_t)vnegq_s32((int32x4_t)v133), v133);
      v602 = v122;
      v600 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v119, v101)), (int8x16_t)vnegq_s32((int32x4_t)v134), v134);
      v604 = v123;
      v135 = vabdq_s32(v123, v102);
      v136 = vabdq_s32(v122, v101);
      v137 = (int8x16_t)vminq_s32(v135, vmaxq_s32(vsubq_s32(v91, (int32x4_t)vshlq_u32((uint32x4_t)v135, v95)), v96));
      v138 = (int8x16_t)vminq_s32(v136, vmaxq_s32(vsubq_s32(v91, (int32x4_t)vshlq_u32((uint32x4_t)v136, v95)), v96));
      v597 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v123, v102)), (int8x16_t)vnegq_s32((int32x4_t)v137), v137);
      v598 = v125;
      v596 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v122, v101)), (int8x16_t)vnegq_s32((int32x4_t)v138), v138);
      v599 = v126;
      v139 = vabdq_s32(v126, v101);
      v140 = vabdq_s32(v125, v102);
      v141 = (int8x16_t)vminq_s32(v139, vmaxq_s32(vsubq_s32(v91, (int32x4_t)vshlq_u32((uint32x4_t)v139, v95)), v96));
      v142 = (int8x16_t)vminq_s32(v140, vmaxq_s32(vsubq_s32(v91, (int32x4_t)vshlq_u32((uint32x4_t)v140, v95)), v96));
      v593 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v126, v101)), (int8x16_t)vnegq_s32((int32x4_t)v141), v141);
      v594 = v128;
      v592 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v125, v102)), (int8x16_t)vnegq_s32((int32x4_t)v142), v142);
      v595 = v129;
      v143 = vabdq_s32(v129, v102);
      v144 = vabdq_s32(v128, v101);
      v145 = (int8x16_t)vminq_s32(v143, vmaxq_s32(vsubq_s32(v91, (int32x4_t)vshlq_u32((uint32x4_t)v143, v95)), v96));
      v146 = (int8x16_t)vminq_s32(v144, vmaxq_s32(vsubq_s32(v91, (int32x4_t)vshlq_u32((uint32x4_t)v144, v95)), v96));
      v591 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v129, v102)), (int8x16_t)vnegq_s32((int32x4_t)v145), v145);
      v590 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v128, v101)), (int8x16_t)vnegq_s32((int32x4_t)v146), v146);
      v147 = *(int16x8_t *)&v29[v79 + (int)v100];
      v148 = vmovl_high_s16(v147);
      v149 = vmovl_s16(*(int16x4_t *)v147.i8);
      v150 = vabdq_s32(v149, v102);
      v151 = (int8x16_t)vminq_s32(v150, vmaxq_s32(vsubq_s32(v90, (int32x4_t)vshlq_u32((uint32x4_t)v150, v98)), v96));
      v589 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v149, v102)), (int8x16_t)vnegq_s32((int32x4_t)v151), v151);
      v152 = vabdq_s32(v148, v101);
      v153 = (int8x16_t)vminq_s32(v152, vmaxq_s32(vsubq_s32(v90, (int32x4_t)vshlq_u32((uint32x4_t)v152, v98)), v96));
      v588 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v148, v101)), (int8x16_t)vnegq_s32((int32x4_t)v153), v153);
      v154 = *(int16x8_t *)&v29[(int)v100 - v79];
      v155 = vmovl_s16(*(int16x4_t *)v154.i8);
      v156 = vabdq_s32(v155, v102);
      v157 = (int8x16_t)vminq_s32(v156, vmaxq_s32(vsubq_s32(v90, (int32x4_t)vshlq_u32((uint32x4_t)v156, v98)), v96));
      v158 = vmovl_high_s16(v154);
      v159 = vabdq_s32(v158, v101);
      v160 = (int8x16_t)vminq_s32(v159, vmaxq_s32(vsubq_s32(v90, (int32x4_t)vshlq_u32((uint32x4_t)v159, v98)), v96));
      v586 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v158, v101)), (int8x16_t)vnegq_s32((int32x4_t)v160), v160);
      v587 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v155, v102)), (int8x16_t)vnegq_s32((int32x4_t)v157), v157);
      v161 = *(int16x8_t *)&v29[v80 + (int)v100];
      v162 = vmovl_high_s16(v161);
      v163 = vabdq_s32(v162, v101);
      v164 = (int8x16_t)vminq_s32(v163, vmaxq_s32(vsubq_s32(v91, (int32x4_t)vshlq_u32((uint32x4_t)v163, v95)), v96));
      v165 = vmovl_s16(*(int16x4_t *)v161.i8);
      v166 = vabdq_s32(v165, v102);
      v167 = (int8x16_t)vminq_s32(v166, vmaxq_s32(vsubq_s32(v91, (int32x4_t)vshlq_u32((uint32x4_t)v166, v95)), v96));
      v584 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v165, v102)), (int8x16_t)vnegq_s32((int32x4_t)v167), v167);
      v585 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v162, v101)), (int8x16_t)vnegq_s32((int32x4_t)v164), v164);
      v168 = *(int16x8_t *)&v29[(int)v100 - v80];
      v169 = vmovl_high_s16(v168);
      v170 = vabdq_s32(v169, v101);
      v171 = (int8x16_t)vminq_s32(v170, vmaxq_s32(vsubq_s32(v91, (int32x4_t)vshlq_u32((uint32x4_t)v170, v95)), v96));
      v172 = vmovl_s16(*(int16x4_t *)v168.i8);
      v173 = vabdq_s32(v172, v102);
      v174 = (int8x16_t)vminq_s32(v173, vmaxq_s32(vsubq_s32(v91, (int32x4_t)vshlq_u32((uint32x4_t)v173, v95)), v96));
      v583 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v172, v102)), (int8x16_t)vnegq_s32((int32x4_t)v174), v174);
      v175 = *(int16x8_t *)&v29[v81 + (int)v100];
      v176 = vmovl_s16(*(int16x4_t *)v175.i8);
      v177 = vabdq_s32(v176, v102);
      v178 = (int8x16_t)vminq_s32(v177, vmaxq_s32(vsubq_s32(v91, (int32x4_t)vshlq_u32((uint32x4_t)v177, v95)), v96));
      v179 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v176, v102)), (int8x16_t)vnegq_s32((int32x4_t)v178), v178);
      v180 = vmovl_high_s16(v175);
      v181 = vabdq_s32(v180, v101);
      v182 = (int8x16_t)vminq_s32(v181, vmaxq_s32(vsubq_s32(v91, (int32x4_t)vshlq_u32((uint32x4_t)v181, v95)), v96));
      v183 = *(int16x8_t *)&v29[(int)v100 - v81];
      v184 = vmovl_high_s16(v183);
      v185 = v98;
      v186 = vabdq_s32(v184, v101);
      v187 = (int8x16_t)vminq_s32(v186, vmaxq_s32(vsubq_s32(v91, (int32x4_t)vshlq_u32((uint32x4_t)v186, v95)), v96));
      v188 = vmovl_s16(*(int16x4_t *)v183.i8);
      v189 = vabdq_s32(v188, v102);
      v190 = (int8x16_t)vminq_s32(v189, vmaxq_s32(vsubq_s32(v91, (int32x4_t)vshlq_u32((uint32x4_t)v189, v95)), v96));
      v191 = (int32x4_t)v95;
      v192 = v91;
      v193 = vminq_u32((uint32x4_t)v107, vminq_u32((uint32x4_t)v104, (uint32x4_t)v101));
      v194 = vmaxq_s32(v107, vmaxq_s32(v104, v101));
      v195 = vminq_u32((uint32x4_t)v108, vminq_u32((uint32x4_t)v105, (uint32x4_t)v102));
      v196 = vmaxq_s32(v108, vmaxq_s32(v105, v102));
      v197 = vaddq_s32(vaddq_s32(v596, v600), vaddq_s32(v593, v590));
      v198 = vaddq_s32(vaddq_s32(v597, v601), vaddq_s32(v592, v591));
      v199 = vminq_u32((uint32x4_t)v148, vminq_u32((uint32x4_t)v594, vminq_u32((uint32x4_t)v599, vminq_u32((uint32x4_t)v602, vminq_u32((uint32x4_t)v608, v193)))));
      v200 = vmaxq_s32(v158, vmaxq_s32(v148, vmaxq_s32(v594, vmaxq_s32(v599, vmaxq_s32(v602, vmaxq_s32(v608, v194))))));
      v96 = 0uLL;
      v91 = v192;
      v95 = (uint32x4_t)v191;
      v191.i64[0] = 0x800000008;
      v191.i64[1] = 0x800000008;
      v201 = vaddq_s32(vmlaq_s32(vaddq_s32(vmlaq_s32(vaddq_s32(v198, v198), vaddq_s32(v612, v610), v92), v584), vaddq_s32(v587, v589), v615), vaddq_s32(vaddq_s32(v583, v179), (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v188, v102)), (int8x16_t)vnegq_s32((int32x4_t)v190), v190)));
      v202 = vaddq_s32(vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v169, v101)), (int8x16_t)vnegq_s32((int32x4_t)v171), v171), (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v180, v101)), (int8x16_t)vnegq_s32((int32x4_t)v182), v182)), (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v184, v101)), (int8x16_t)vnegq_s32((int32x4_t)v187), v187));
      v98 = v185;
      v203 = vaddq_s32(vmlaq_s32(vaddq_s32(vmlaq_s32(vaddq_s32(v197, v197), vaddq_s32(v117, v613), v92), v585), vaddq_s32(v586, v588), v615), v202);
      v204 = vminq_u32((uint32x4_t)v172, vminq_u32((uint32x4_t)v165, vminq_u32((uint32x4_t)v155, vminq_u32((uint32x4_t)v149, vminq_u32((uint32x4_t)v595, vminq_u32((uint32x4_t)v598, vminq_u32((uint32x4_t)v604, vminq_u32((uint32x4_t)v606, v195))))))));
      v205 = vmaxq_s32(v176, vmaxq_s32(v172, vmaxq_s32(v165, vmaxq_s32(v155, vmaxq_s32(v149, vmaxq_s32(v595, vmaxq_s32(v598, vmaxq_s32(v604, vmaxq_s32(v606, v196)))))))));
      v206 = vminq_u32((uint32x4_t)v180, vminq_u32((uint32x4_t)v169, vminq_u32((uint32x4_t)v162, vminq_u32((uint32x4_t)v158, v199))));
      v90 = v582;
      v207 = vmaxq_s32(v180, vmaxq_s32(v169, vmaxq_s32(v162, v200)));
      v208 = (int8x16_t)vminq_u32((uint32x4_t)v184, v206);
      v209 = (int8x16_t)vminq_u32((uint32x4_t)v188, vminq_u32((uint32x4_t)v176, v204));
      v210 = vsraq_n_s32(v101, vaddq_s32(vsraq_n_s32(v203, v203, 0x1FuLL), v191), 4uLL);
      v211 = vsraq_n_s32(v102, vaddq_s32(vsraq_n_s32(v201, v201, 0x1FuLL), v191), 4uLL);
      v622.val[1] = vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v208, v210), v208, (int8x16_t)vminq_s32(v210, vmaxq_s32(v184, v207)));
      v622.val[0] = vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v209, v211), v209, (int8x16_t)vminq_s32(v211, vmaxq_s32(v188, v205)));
      v89 = vqtbl2q_s8(v622, (int8x16_t)xmmword_19689A990);
      *(_QWORD *)((char *)v100 + a1) = v89.i64[0];
      v100 = (char *)v100 + 8;
    }
    while (v579 != v100);
    v100 = v579;
    v93 = v578;
    v97 = v577;
    if (v579 != (void *)v31)
    {
LABEL_229:
      do
      {
        v212 = *((unsigned __int8 *)v100 + a1);
        v213.i16[0] = v29[v77 + (int)v100];
        v213.i16[1] = v29[(int)v100 - v77];
        v213.i16[2] = v29[v78 + (int)v100];
        v213.i16[3] = v29[(int)v100 - v78];
        v214 = vmovl_s16(v213);
        v215 = vdupq_n_s32(v212);
        v216 = vabdq_s32(v214, v215);
        v217 = (int8x16_t)vminq_s32(v216, vmaxq_s32(vsubq_s32(v91, (int32x4_t)vshlq_u32((uint32x4_t)v216, v95)), v96));
        v218 = 2
             * vaddvq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v214, v215)), (int8x16_t)vnegq_s32((int32x4_t)v217), v217));
        v219 = v214.i32[1];
        v220 = v214.i32[2];
        v221 = v214.i32[3];
        v222 = v214.i32[0];
        v214.i16[0] = v29[v80 + (int)v100];
        v214.i16[1] = v29[(int)v100 - v80];
        v214.i16[2] = v29[v81 + (int)v100];
        v214.i16[3] = v29[(int)v100 - v81];
        v223 = vmovl_s16(*(int16x4_t *)v214.i8);
        v224 = vabdq_s32(v223, v215);
        v226 = (int8x16_t)vminq_s32(v224, vmaxq_s32(vsubq_s32(v91, (int32x4_t)vshlq_u32((uint32x4_t)v224, v95)), v96));
        v225 = (int8x16_t)vnegq_s32((int32x4_t)v226);
        v89 = vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v223, v215)), v225, v226);
        v225.i16[0] = v29[v76 + (int)v100];
        v226.i32[0] = vaddvq_s32((int32x4_t)v89);
        v225.i16[2] = v29[v79 + (int)v100];
        *(int32x2_t *)v89.i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v225.i8, 0x10uLL), 0x10uLL);
        v227 = vsub_s32(*(int32x2_t *)v89.i8, *(int32x2_t *)v215.i8);
        v228 = (uint32x2_t)vabd_s32(*(int32x2_t *)v89.i8, *(int32x2_t *)v215.i8);
        v229 = v89.i32[1];
        v230 = v89.i32[0];
        if (v89.i32[0] >= v212)
          v231 = *((unsigned __int8 *)v100 + a1);
        else
          v231 = v89.i32[0];
        if (v89.i32[0] <= (int)v212)
          v230 = *((unsigned __int8 *)v100 + a1);
        v89.i16[0] = v29[(int)v100 - v76];
        v89.i16[2] = v29[(int)v100 - v79];
        *(int32x2_t *)v89.i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v89.i8, 0x10uLL), 0x10uLL);
        v232 = vsub_s32(*(int32x2_t *)v89.i8, *(int32x2_t *)v215.i8);
        v233 = (uint32x2_t)vabd_s32(*(int32x2_t *)v89.i8, *(int32x2_t *)v215.i8);
        v234 = v89.i32[1];
        if (v89.i32[0] < v231)
          v231 = v89.i32[0];
        if (v89.i32[0] > v230)
          v230 = v89.i32[0];
        if (v222 < v231)
          v231 = v222;
        if (v222 <= v230)
          v222 = v230;
        if (v219 >= v231)
          v235 = v231;
        else
          v235 = v219;
        if (v219 > v222)
          v222 = v219;
        if (v220 < v235)
          v235 = v220;
        if (v220 > v222)
          v222 = v220;
        v31 = a18;
        if (v221 < v235)
          v235 = v221;
        if (v221 > v222)
          v222 = v221;
        v236 = (int8x8_t)vmin_s32((int32x2_t)v228, vmax_s32(vsub_s32(*(int32x2_t *)v90.i8, (int32x2_t)vshl_u32(v228, v97)), *(int32x2_t *)v96.i8));
        v237 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v227), (int8x8_t)vneg_s32((int32x2_t)v236), v236);
        v238 = (int8x8_t)vmin_s32((int32x2_t)v233, vmax_s32(vsub_s32(*(int32x2_t *)v90.i8, (int32x2_t)vshl_u32(v233, v97)), *(int32x2_t *)v96.i8));
        v239 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v232), (int8x8_t)vneg_s32((int32x2_t)v238), v238);
        if (v229 < v235)
          v235 = v229;
        if (v229 > v222)
          v222 = v229;
        if (v234 >= v235)
          v240 = v235;
        else
          v240 = v234;
        if (v234 > v222)
          v222 = v234;
        v226.i32[1] = v218;
        v241 = vmla_s32(*(int32x2_t *)v226.i8, vadd_s32(v239, v237), v93);
        v242 = vadd_s32(v241, vdup_lane_s32(v241, 1)).u32[0];
        if (v223.i32[0] < v240)
          v240 = v223.i32[0];
        if (v223.i32[0] > v222)
          v222 = v223.i32[0];
        if (v223.i32[1] < v240)
          v240 = v223.u32[1];
        if (v223.i32[1] > v222)
          v222 = v223.i32[1];
        if (v223.i32[2] < v240)
          v240 = v223.u32[2];
        if (v223.i32[2] > v222)
          v222 = v223.i32[2];
        if (v223.i32[3] < v240)
          v240 = v223.u32[3];
        if (v223.i32[3] > v222)
          v222 = v223.i32[3];
        v243 = v212 + ((v242 + (v242 >> 31) + 8) >> 4);
        if (v243 < v222)
          LOBYTE(v222) = v243;
        if (v243 < (int)v240)
          LOBYTE(v222) = v240;
        *((_BYTE *)v100 + a1) = v222;
        v100 = (char *)v100 + 1;
      }
      while ((void *)a18 != v100);
    }
    a1 += a2;
    v29 += 12;
    LODWORD(v24) = v581 - 1;
  }
  while (v581 != 1);
  return result;
}

void *dav1d_prep_grain_8bpc(uint64_t (**a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  void *result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int32x4_t v24;
  unsigned int v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int8x16_t *v35;
  uint64_t v36;
  int8x16_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  uint64_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int8x8_t v47;
  int8x8_t *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned __int8 *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  int32x4_t v65;
  unsigned int v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int8x16_t *v76;
  uint64_t v77;
  int8x16_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  uint64_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int8x8_t v88;
  int8x8_t *v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  uint64_t v99;
  unsigned int v100;
  unsigned __int8 *v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  int v105;
  int32x4_t v106;
  unsigned int v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int8x16_t *v117;
  uint64_t v118;
  int8x16_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  uint64_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int8x8_t v129;
  int8x8_t *v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  int v134;
  uint64_t v135;
  size_t v136;
  char *v137;
  uint64_t v138;
  char v139;
  int v140;
  size_t v141;
  int v142;
  int8x16x2_t v143;
  int8x16x2_t v144;
  int8x16x2_t v145;
  int8x16x4_t v146;
  int8x16x4_t v147;
  int8x16x4_t v148;
  int8x16x4_t v149;
  int8x16x4_t v150;
  int8x16x4_t v151;

  v10 = *(_QWORD *)(a2 + 8);
  result = (void *)(*a1)(a5, v10);
  if (*(_DWORD *)(v10 + 40) || *(_DWORD *)(v10 + 36))
    result = (void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))a1[(*(_DWORD *)(a3 + 64)
                                                                                                 - 1)
                                                                                  + 1])(a5 + 6068, a5, v10, 0);
  if (*(_DWORD *)(v10 + 44) || *(_DWORD *)(v10 + 36))
    result = (void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))a1[(*(_DWORD *)(a3 + 64)
                                                                                                  - 1)
                                                                                   + 1])(a5 + 12136, a5, v10, 1);
  v12 = *(_DWORD *)(v10 + 4);
  if (v12)
  {
    v13 = v10 + 8;
    memset((void *)a4, *(unsigned __int8 *)(v10 + 9), *(unsigned __int8 *)(v10 + 8));
    v14 = (v12 - 1);
    if (v12 >= 2)
    {
      v15 = 0;
      do
      {
        v16 = (unsigned __int8 *)(v13 + 2 * v15);
        v17 = *v16;
        v18 = v16[1];
        ++v15;
        v19 = (unsigned __int8 *)(v13 + 2 * v15);
        v20 = *v19 - v17;
        v21 = (v19[1] - v18) * (((v20 >> 1) + 0x10000) / v20);
        if (v20 >= 8)
        {
          v24 = vdupq_n_s32(v21);
          if (v20 < 0x20)
          {
            v22 = 0;
            v25 = 0x8000;
LABEL_19:
            v42 = v22;
            v22 = v20 & 0x7FFFFFF8;
            v43 = vdupq_n_s32(v25);
            v23 = v21 * (v20 & 0x7FFFFFF8) + 0x8000;
            v44 = vmlaq_s32(v43, v24, (int32x4_t)xmmword_196889B60);
            v45 = vdupq_n_s32(8 * v21);
            v46 = vmlaq_s32(v43, v24, (int32x4_t)xmmword_196889B70);
            v47 = vdup_n_s8(v18);
            v48 = (int8x8_t *)(a4 + v42 + v17);
            v49 = v42 - v22;
            do
            {
              v143.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)v46, 0x10uLL);
              v143.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)v44, 0x10uLL);
              *v48++ = vadd_s8(v47, (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v143, (int8x16_t)xmmword_19689A990));
              v46 = vaddq_s32(v46, v45);
              v44 = vaddq_s32(v44, v45);
              v49 += 8;
            }
            while (v49);
            if (v22 == v20)
              continue;
            goto LABEL_24;
          }
          v22 = v20 & 0x7FFFFFE0;
          v26.i64[0] = 0x800000008000;
          v26.i64[1] = 0x800000008000;
          v27 = vmlaq_s32(v26, v24, (int32x4_t)xmmword_196889B80);
          v28.i64[0] = 0x800000008000;
          v28.i64[1] = 0x800000008000;
          v29 = vmlaq_s32(v28, v24, (int32x4_t)xmmword_196889B90);
          v30.i64[0] = 0x800000008000;
          v30.i64[1] = 0x800000008000;
          v31 = vmlaq_s32(v30, v24, (int32x4_t)xmmword_196889B60);
          v32.i64[0] = 0x800000008000;
          v32.i64[1] = 0x800000008000;
          v33 = vdupq_n_s32(16 * v21);
          v34 = vmlaq_s32(v32, v24, (int32x4_t)xmmword_196889B70);
          v25 = v21 * (v20 & 0x7FFFFFE0) + 0x8000;
          v35 = (int8x16_t *)(a4 + 16 + v17);
          v36 = v22;
          v37 = vdupq_n_s8(v18);
          do
          {
            v38 = vaddq_s32(v27, v33);
            v39 = vaddq_s32(v29, v33);
            v40 = vaddq_s32(v31, v33);
            v41 = vaddq_s32(v34, v33);
            v149.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)v34, 0x10uLL);
            v149.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)v31, 0x10uLL);
            v149.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)v29, 0x10uLL);
            v149.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)v27, 0x10uLL);
            v146.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)v41, 0x10uLL);
            v146.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)v40, 0x10uLL);
            v146.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)v39, 0x10uLL);
            v146.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)v38, 0x10uLL);
            v35[-1] = vaddq_s8(v37, vqtbl4q_s8(v149, (int8x16_t)xmmword_19689A980));
            *v35 = vaddq_s8(v37, vqtbl4q_s8(v146, (int8x16_t)xmmword_19689A980));
            v34 = vaddq_s32(v41, v33);
            v31 = vaddq_s32(v40, v33);
            v29 = vaddq_s32(v39, v33);
            v27 = vaddq_s32(v38, v33);
            v35 += 2;
            v36 -= 32;
          }
          while (v36);
          if (v22 == v20)
            continue;
          if ((v20 & 0x18) != 0)
            goto LABEL_19;
          v23 = v21 * v22 + 0x8000;
        }
        else
        {
          v22 = 0;
          v23 = 0x8000;
        }
LABEL_24:
        v50 = v20 - v22;
        v51 = (_BYTE *)(a4 + v22 + v17);
        do
        {
          *v51++ = v18 + BYTE2(v23);
          v23 += v21;
          --v50;
        }
        while (v50);
      }
      while (v15 != v14);
    }
    result = memset((void *)(a4 + *(unsigned __int8 *)(v13 + 2 * (int)v14)), *(unsigned __int8 *)(v13 + 2 * (int)v14 + 1), 256 - *(unsigned __int8 *)(v13 + 2 * (int)v14));
  }
  v52 = *(_DWORD *)(v10 + 40);
  if (v52)
  {
    v53 = v10 + 48;
    v54 = a4 + 256;
    memset((void *)(a4 + 256), *(unsigned __int8 *)(v10 + 49), *(unsigned __int8 *)(v10 + 48));
    v55 = (v52 - 1);
    if (v52 >= 2)
    {
      v56 = 0;
      do
      {
        v57 = (unsigned __int8 *)(v53 + 2 * v56);
        v58 = *v57;
        v59 = v57[1];
        ++v56;
        v60 = (unsigned __int8 *)(v53 + 2 * v56);
        v61 = *v60 - v58;
        v62 = (v60[1] - v59) * (((v61 >> 1) + 0x10000) / v61);
        if (v61 >= 8)
        {
          v65 = vdupq_n_s32(v62);
          if (v61 < 0x20)
          {
            v63 = 0;
            v66 = 0x8000;
LABEL_40:
            v83 = v63;
            v63 = v61 & 0x7FFFFFF8;
            v84 = vdupq_n_s32(v66);
            v64 = v62 * (v61 & 0x7FFFFFF8) + 0x8000;
            v85 = vmlaq_s32(v84, v65, (int32x4_t)xmmword_196889B60);
            v86 = vdupq_n_s32(8 * v62);
            v87 = vmlaq_s32(v84, v65, (int32x4_t)xmmword_196889B70);
            v88 = vdup_n_s8(v59);
            v89 = (int8x8_t *)(v54 + v83 + v58);
            v90 = v83 - v63;
            do
            {
              v144.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)v87, 0x10uLL);
              v144.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)v85, 0x10uLL);
              *v89++ = vadd_s8(v88, (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v144, (int8x16_t)xmmword_19689A990));
              v87 = vaddq_s32(v87, v86);
              v85 = vaddq_s32(v85, v86);
              v90 += 8;
            }
            while (v90);
            if (v63 == v61)
              continue;
            goto LABEL_45;
          }
          v63 = v61 & 0x7FFFFFE0;
          v67.i64[0] = 0x800000008000;
          v67.i64[1] = 0x800000008000;
          v68 = vmlaq_s32(v67, v65, (int32x4_t)xmmword_196889B80);
          v69.i64[0] = 0x800000008000;
          v69.i64[1] = 0x800000008000;
          v70 = vmlaq_s32(v69, v65, (int32x4_t)xmmword_196889B90);
          v71.i64[0] = 0x800000008000;
          v71.i64[1] = 0x800000008000;
          v72 = vmlaq_s32(v71, v65, (int32x4_t)xmmword_196889B60);
          v73.i64[0] = 0x800000008000;
          v73.i64[1] = 0x800000008000;
          v74 = vdupq_n_s32(16 * v62);
          v75 = vmlaq_s32(v73, v65, (int32x4_t)xmmword_196889B70);
          v66 = v62 * (v61 & 0x7FFFFFE0) + 0x8000;
          v76 = (int8x16_t *)(a4 + 272 + v58);
          v77 = v63;
          v78 = vdupq_n_s8(v59);
          do
          {
            v79 = vaddq_s32(v68, v74);
            v80 = vaddq_s32(v70, v74);
            v81 = vaddq_s32(v72, v74);
            v82 = vaddq_s32(v75, v74);
            v150.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)v75, 0x10uLL);
            v150.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)v72, 0x10uLL);
            v150.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)v70, 0x10uLL);
            v150.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)v68, 0x10uLL);
            v147.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)v82, 0x10uLL);
            v147.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)v81, 0x10uLL);
            v147.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)v80, 0x10uLL);
            v147.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)v79, 0x10uLL);
            v76[-1] = vaddq_s8(v78, vqtbl4q_s8(v150, (int8x16_t)xmmword_19689A980));
            *v76 = vaddq_s8(v78, vqtbl4q_s8(v147, (int8x16_t)xmmword_19689A980));
            v75 = vaddq_s32(v82, v74);
            v72 = vaddq_s32(v81, v74);
            v70 = vaddq_s32(v80, v74);
            v68 = vaddq_s32(v79, v74);
            v76 += 2;
            v77 -= 32;
          }
          while (v77);
          if (v63 == v61)
            continue;
          if ((v61 & 0x18) != 0)
            goto LABEL_40;
          v64 = v62 * v63 + 0x8000;
        }
        else
        {
          v63 = 0;
          v64 = 0x8000;
        }
LABEL_45:
        v91 = v61 - v63;
        v92 = (_BYTE *)(v54 + v63 + v58);
        do
        {
          *v92++ = v59 + BYTE2(v64);
          v64 += v62;
          --v91;
        }
        while (v91);
      }
      while (v56 != v55);
    }
    result = memset((void *)(v54 + *(unsigned __int8 *)(v53 + 2 * (int)v55)), *(unsigned __int8 *)(v53 + 2 * (int)v55 + 1), 256 - *(unsigned __int8 *)(v53 + 2 * (int)v55));
  }
  v93 = *(_DWORD *)(v10 + 44);
  if (v93)
  {
    v94 = v10 + 68;
    v95 = a4 + 512;
    memset((void *)(a4 + 512), *(unsigned __int8 *)(v10 + 69), *(unsigned __int8 *)(v10 + 68));
    v96 = (v93 - 1);
    if (v93 >= 2)
    {
      v97 = 0;
      do
      {
        v98 = (unsigned __int8 *)(v94 + 2 * v97);
        v99 = *v98;
        v100 = v98[1];
        ++v97;
        v101 = (unsigned __int8 *)(v94 + 2 * v97);
        v102 = *v101 - v99;
        v103 = (v101[1] - v100) * (((v102 >> 1) + 0x10000) / v102);
        if (v102 >= 8)
        {
          v106 = vdupq_n_s32(v103);
          if (v102 < 0x20)
          {
            v104 = 0;
            v107 = 0x8000;
LABEL_61:
            v124 = v104;
            v104 = v102 & 0x7FFFFFF8;
            v125 = vdupq_n_s32(v107);
            v105 = v103 * (v102 & 0x7FFFFFF8) + 0x8000;
            v126 = vmlaq_s32(v125, v106, (int32x4_t)xmmword_196889B60);
            v127 = vdupq_n_s32(8 * v103);
            v128 = vmlaq_s32(v125, v106, (int32x4_t)xmmword_196889B70);
            v129 = vdup_n_s8(v100);
            v130 = (int8x8_t *)(v95 + v124 + v99);
            v131 = v124 - v104;
            do
            {
              v145.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)v128, 0x10uLL);
              v145.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)v126, 0x10uLL);
              *v130++ = vadd_s8(v129, (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v145, (int8x16_t)xmmword_19689A990));
              v128 = vaddq_s32(v128, v127);
              v126 = vaddq_s32(v126, v127);
              v131 += 8;
            }
            while (v131);
            if (v104 == v102)
              continue;
            goto LABEL_66;
          }
          v104 = v102 & 0x7FFFFFE0;
          v108.i64[0] = 0x800000008000;
          v108.i64[1] = 0x800000008000;
          v109 = vmlaq_s32(v108, v106, (int32x4_t)xmmword_196889B80);
          v110.i64[0] = 0x800000008000;
          v110.i64[1] = 0x800000008000;
          v111 = vmlaq_s32(v110, v106, (int32x4_t)xmmword_196889B90);
          v112.i64[0] = 0x800000008000;
          v112.i64[1] = 0x800000008000;
          v113 = vmlaq_s32(v112, v106, (int32x4_t)xmmword_196889B60);
          v114.i64[0] = 0x800000008000;
          v114.i64[1] = 0x800000008000;
          v115 = vdupq_n_s32(16 * v103);
          v116 = vmlaq_s32(v114, v106, (int32x4_t)xmmword_196889B70);
          v107 = v103 * (v102 & 0x7FFFFFE0) + 0x8000;
          v117 = (int8x16_t *)(a4 + 528 + v99);
          v118 = v104;
          v119 = vdupq_n_s8(v100);
          do
          {
            v120 = vaddq_s32(v109, v115);
            v121 = vaddq_s32(v111, v115);
            v122 = vaddq_s32(v113, v115);
            v123 = vaddq_s32(v116, v115);
            v151.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)v116, 0x10uLL);
            v151.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)v113, 0x10uLL);
            v151.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)v111, 0x10uLL);
            v151.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)v109, 0x10uLL);
            v148.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)v123, 0x10uLL);
            v148.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)v122, 0x10uLL);
            v148.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)v121, 0x10uLL);
            v148.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)v120, 0x10uLL);
            v117[-1] = vaddq_s8(v119, vqtbl4q_s8(v151, (int8x16_t)xmmword_19689A980));
            *v117 = vaddq_s8(v119, vqtbl4q_s8(v148, (int8x16_t)xmmword_19689A980));
            v116 = vaddq_s32(v123, v115);
            v113 = vaddq_s32(v122, v115);
            v111 = vaddq_s32(v121, v115);
            v109 = vaddq_s32(v120, v115);
            v117 += 2;
            v118 -= 32;
          }
          while (v118);
          if (v104 == v102)
            continue;
          if ((v102 & 0x18) != 0)
            goto LABEL_61;
          v105 = v103 * v104 + 0x8000;
        }
        else
        {
          v104 = 0;
          v105 = 0x8000;
        }
LABEL_66:
        v132 = v102 - v104;
        v133 = (_BYTE *)(v95 + v104 + v99);
        do
        {
          *v133++ = v100 + BYTE2(v105);
          v105 += v103;
          --v132;
        }
        while (v132);
      }
      while (v97 != v96);
    }
    result = memset((void *)(v95 + *(unsigned __int8 *)(v94 + 2 * (int)v96)), *(unsigned __int8 *)(v94 + 2 * (int)v96 + 1), 256 - *(unsigned __int8 *)(v94 + 2 * (int)v96));
  }
  if (*(_DWORD *)(v10 + 4))
  {
    v134 = *(_DWORD *)(a3 + 64);
    if (!v134)
      return result;
  }
  else
  {
    v135 = *(_QWORD *)(a2 + 40);
    v136 = v135 * *(int *)(a2 + 60);
    v137 = *(char **)(a2 + 16);
    if ((v136 & 0x8000000000000000) != 0)
    {
      result = memcpy(&v137[v136 - v135], (const void *)(*(_QWORD *)(a3 + 16) + v136 - v135), -(uint64_t)v136);
      v134 = *(_DWORD *)(a3 + 64);
      if (!v134)
        return result;
    }
    else
    {
      result = memcpy(v137, *(const void **)(a3 + 16), v136);
      v134 = *(_DWORD *)(a3 + 64);
      if (!v134)
        return result;
    }
  }
  if (!*(_DWORD *)(v10 + 36))
  {
    v138 = *(_QWORD *)(a2 + 48);
    v139 = v134 == 1;
    v140 = *(_DWORD *)(a2 + 60);
    if (v139)
      ++v140;
    v141 = v138 * (v140 >> v139);
    v142 = *(_DWORD *)(v10 + 40);
    if ((v141 & 0x8000000000000000) != 0)
    {
      if (!v142)
        result = memcpy((void *)(*(_QWORD *)(a2 + 24) + v141 - v138), (const void *)(*(_QWORD *)(a3 + 24) + v141 - v138), -(uint64_t)v141);
      if (!*(_DWORD *)(v10 + 44))
        return memcpy((void *)(*(_QWORD *)(a2 + 32) + v141 - v138), (const void *)(*(_QWORD *)(a3 + 32) + v141 - v138), -(uint64_t)v141);
    }
    else
    {
      if (!v142)
        result = memcpy(*(void **)(a2 + 24), *(const void **)(a3 + 24), v141);
      if (!*(_DWORD *)(v10 + 44))
        return memcpy(*(void **)(a2 + 32), *(const void **)(a3 + 32), v141);
    }
  }
  return result;
}

uint64_t dav1d_apply_grain_row_8bpc(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v8;
  int v11;
  int v12;
  int v13;
  int v14;
  _DWORD *v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;

  v6 = a6;
  v8 = a4;
  v11 = *(_DWORD *)(a3 + 64);
  v12 = v11 == 1;
  v13 = v11 != 3;
  if (v11 == 3)
    v14 = *(_DWORD *)(a2 + 56);
  else
    v14 = *(_DWORD *)(a2 + 56) + 1;
  v15 = *(_DWORD **)(a2 + 8);
  v16 = *(_DWORD *)(*(_QWORD *)a2 + 24) == 0;
  v17 = 32 * a6;
  v18 = *(_QWORD *)(a3 + 16) + *(_QWORD *)(a3 + 40) * v17;
  v44 = v15;
  if (v15[1])
  {
    v42 = result;
    v20 = *(_QWORD *)(a3 + 16) + *(_QWORD *)(a3 + 40) * v17;
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(result + 32))(*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 40) * v17, v18, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 8));
    v13 = v11 != 3;
    v12 = v11 == 1;
    v18 = v20;
    result = v42;
    v15 = v44;
    v8 = a4;
    v6 = a6;
  }
  if (v15[10] || v15[11] || v15[9])
  {
    v21 = (v14 >> v13);
    v22 = v11 == 1;
    v23 = *(_DWORD *)(a2 + 60) - v17;
    if (v23 >= 32)
      v23 = 32;
    v24 = ((v23 + v12) >> v12);
    if ((*(_DWORD *)(a2 + 56) & v13) != 0 && (int)v24 >= 1)
    {
      v25 = (v23 + v12) >> v12;
      v26 = v18;
      do
      {
        *(_BYTE *)(v26 + *(int *)(a2 + 56)) = *(_BYTE *)(v26 + *(int *)(a2 + 56) - 1);
        v26 += *(_QWORD *)(a3 + 40) << v22;
        --v25;
      }
      while (v25);
    }
    v27 = (*(_QWORD *)(a2 + 48) * v17) >> v22;
    if (v15[9])
    {
      v28 = result + 40;
      v29 = v15;
      v41 = v21;
      v30 = v21;
      v31 = v6;
      v32 = v8;
      v33 = v24;
      v34 = v18;
      (*(void (**)(uint64_t, uint64_t, _QWORD, _DWORD *, uint64_t, uint64_t, uint64_t))(result
                                                                                            + 40
                                                                                            + 8
                                                                                            * (*(_DWORD *)(a3 + 64) - 1)))(*(_QWORD *)(a2 + 24) + v27, *(_QWORD *)(a3 + 24) + v27, *(_QWORD *)(a3 + 48), v29, v30, v8, a5 + 6068);
      LODWORD(v37) = 1;
      HIDWORD(v37) = v16;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _DWORD *, _QWORD, uint64_t, uint64_t, uint64_t, int, uint64_t, _QWORD, uint64_t))(v28 + 8 * (*(_DWORD *)(a3 + 64) - 1)))(*(_QWORD *)(a2 + 32) + v27, *(_QWORD *)(a3 + 32) + v27, *(_QWORD *)(a3 + 48), v44, v41, v32, a5 + 12136, v33, v31, v34, *(_QWORD *)(a3 + 40), v37);
    }
    else
    {
      if (v15[10])
      {
        v43 = result;
        v40 = v8;
        v35 = v24;
        v36 = v18;
        (*(void (**)(uint64_t, uint64_t, _QWORD, _DWORD *, uint64_t, uint64_t, uint64_t))(result
                                                                                              + 8
                                                                                              * (*(_DWORD *)(a3 + 64) - 1)
                                                                                              + 40))(*(_QWORD *)(a2 + 24) + v27, *(_QWORD *)(a3 + 24) + v27, *(_QWORD *)(a3 + 48), v15, v21, v8 + 256, a5 + 6068);
        result = v43;
        v24 = v35;
        v18 = v36;
        v8 = v40;
      }
      if (v15[11])
      {
        LODWORD(v38) = 1;
        HIDWORD(v38) = v16;
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t, _QWORD, uint64_t))(result + 8 * (*(_DWORD *)(a3 + 64) - 1) + 40))(*(_QWORD *)(a2 + 32) + v27, *(_QWORD *)(a3 + 32) + v27, *(_QWORD *)(a3 + 48), v15, v21, v8 + 512, a5 + 12136, v24, v6, v18, *(_QWORD *)(a3 + 40), v38);
      }
    }
  }
  return result;
}

uint64_t generate_grain_y_c_0(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  const float *v9;
  int v10;
  uint64_t v11;
  uint64_t j;
  uint64_t v13;
  uint64_t k;
  uint64_t v15;
  int v16;
  int v17;
  char *v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t m;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  uint64_t v33;
  uint64_t v35;
  int16x8_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  uint64_t v47;
  int v48;

  v2 = 0;
  v3 = *a2;
  v4 = a2[46] + 4;
  v5 = 1 << (*((_BYTE *)a2 + 184) + 4) >> 1;
  v6 = result;
  do
  {
    for (i = 0; i != 82; ++i)
    {
      v3 = (((((v3 >> 12) ^ (v3 >> 3)) ^ (v3 ^ (v3 >> 1))) & 1) << 15) | (v3 >> 1);
      *(_BYTE *)(v6 + i) = (v5 + dav1d_gaussian_sequence[(unsigned __int16)v3 >> 5]) >> v4;
    }
    ++v2;
    v6 += 82;
  }
  while (v2 != 73);
  v8 = a2[23];
  v9 = (const float *)(a2 + 44);
  if ((v8 & 0x80000000) != 0)
  {
    v26 = 0;
    v27 = (unint64_t)(a2 + 46);
    v28 = result + 246;
    v29 = 3;
    v30.i64[0] = 0x100000001;
    v30.i64[1] = 0x100000001;
    v31.i64[0] = 0x7F0000007FLL;
    v31.i64[1] = 0x7F0000007FLL;
    v32.i64[0] = 0x7F0000007FLL;
    v32.i64[1] = 0x7F0000007FLL;
    do
    {
      v33 = result + 82 * v26;
      if (v33 + 249 >= v27 || (unint64_t)v9 >= v33 + 325)
      {
        v35 = result + 82 * v29;
        v36 = vmovl_s8(*(int8x8_t *)(v35 + 3));
        v37 = (int32x4_t)vld1q_dup_f32(v9);
        v38 = vshlq_s32(vshrq_n_s32((int32x4_t)vshlq_u32(v30, (uint32x4_t)v37), 1uLL), vnegq_s32(v37));
        *(int8x8_t *)(v35 + 3) = vmovn_s16(vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddw_s16(v38, *(int16x4_t *)v36.i8), v31), v32), (int16x8_t)vmaxq_s32(vminq_s32(vaddw_high_s16(v38, v36), v31), v32)));
        v39 = vmovl_s8(*(int8x8_t *)(v35 + 11));
        *(int8x8_t *)(v35 + 11) = vmovn_s16(vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddw_s16(v38, *(int16x4_t *)v39.i8), v31), v32), (int16x8_t)vmaxq_s32(vminq_s32(vaddw_high_s16(v38, v39), v31), v32)));
        v40 = vmovl_s8(*(int8x8_t *)(v35 + 19));
        *(int8x8_t *)(v35 + 19) = vmovn_s16(vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddw_s16(v38, *(int16x4_t *)v40.i8), v31), v32), (int16x8_t)vmaxq_s32(vminq_s32(vaddw_high_s16(v38, v40), v31), v32)));
        v41 = vmovl_s8(*(int8x8_t *)(v35 + 27));
        *(int8x8_t *)(v35 + 27) = vmovn_s16(vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddw_s16(v38, *(int16x4_t *)v41.i8), v31), v32), (int16x8_t)vmaxq_s32(vminq_s32(vaddw_high_s16(v38, v41), v31), v32)));
        v42 = vmovl_s8(*(int8x8_t *)(v35 + 35));
        *(int8x8_t *)(v35 + 35) = vmovn_s16(vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddw_s16(v38, *(int16x4_t *)v42.i8), v31), v32), (int16x8_t)vmaxq_s32(vminq_s32(vaddw_high_s16(v38, v42), v31), v32)));
        v43 = vmovl_s8(*(int8x8_t *)(v35 + 43));
        *(int8x8_t *)(v35 + 43) = vmovn_s16(vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddw_s16(v38, *(int16x4_t *)v43.i8), v31), v32), (int16x8_t)vmaxq_s32(vminq_s32(vaddw_high_s16(v38, v43), v31), v32)));
        v44 = vmovl_s8(*(int8x8_t *)(v35 + 51));
        *(int8x8_t *)(v35 + 51) = vmovn_s16(vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddw_s16(v38, *(int16x4_t *)v44.i8), v31), v32), (int16x8_t)vmaxq_s32(vminq_s32(vaddw_high_s16(v38, v44), v31), v32)));
        v45 = vmovl_s8(*(int8x8_t *)(v35 + 59));
        *(int8x8_t *)(v35 + 59) = vmovn_s16(vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddw_s16(v38, *(int16x4_t *)v45.i8), v31), v32), (int16x8_t)vmaxq_s32(vminq_s32(vaddw_high_s16(v38, v45), v31), v32)));
        v46 = vmovl_s8(*(int8x8_t *)(v35 + 67));
        *(int8x8_t *)(v35 + 67) = vmovn_s16(vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddw_s16(v38, *(int16x4_t *)v46.i8), v31), v32), (int16x8_t)vmaxq_s32(vminq_s32(vaddw_high_s16(v38, v46), v31), v32)));
        v47 = 75;
      }
      else
      {
        v47 = 3;
      }
      do
      {
        v48 = (1 << *(_DWORD *)v9 >> 1 >> *(_DWORD *)v9) + *(char *)(v28 + v47);
        if (v48 >= 127)
          v48 = 127;
        if (v48 <= -128)
          LOBYTE(v48) = 0x80;
        *(_BYTE *)(v28 + v47++) = v48;
      }
      while (v47 != 79);
      ++v29;
      ++v26;
      v28 += 82;
    }
    while (v29 != 73);
  }
  else
  {
    v10 = -(int)v8;
    v11 = result + 83 * -(int)v8 + 249;
    for (j = 3; j != 73; ++j)
    {
      v13 = v11;
      for (k = 3; k != 79; ++k)
      {
        v17 = 0;
        v18 = (char *)v13;
        v19 = -(int)v8;
        v20 = (char *)(a2 + 24);
        do
        {
          v21 = v18;
          for (m = v10; m | v19; ++m)
          {
            v24 = *v20++;
            v23 = v24;
            v25 = *v21++;
            v17 += v25 * v23;
            if (m >= v8)
              break;
          }
          ++v19;
          v18 += 82;
        }
        while (v19 != 1);
        v15 = result + 82 * j;
        v16 = ((v17 + (1 << *(_DWORD *)v9 >> 1)) >> *(_DWORD *)v9) + *(char *)(v15 + k);
        if (v16 >= 127)
          v16 = 127;
        if (v16 <= -128)
          LOBYTE(v16) = 0x80;
        *(_BYTE *)(v15 + k) = v16;
        ++v13;
      }
      v11 += 82;
    }
  }
  return result;
}

uint64_t generate_grain_uv_420_c_0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  return generate_grain_uv_c_0(a1, a2, a3, a4, 1u, 1);
}

uint64_t generate_grain_uv_422_c_0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  return generate_grain_uv_c_0(a1, a2, a3, a4, 1u, 0);
}

uint64_t generate_grain_uv_444_c_0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  return generate_grain_uv_c_0(a1, a2, a3, a4, 0, 0);
}

_BYTE *fgy_32x32xn_c_0(_BYTE *result, uint64_t a2, uint64_t a3, int *a4, unint64_t a5, uint64_t a6, uint64_t a7, int a8, double a9, double a10, double a11, double a12, double a13, int32x2_t a14, int32x2_t a15, int a16)
{
  uint64_t v16;
  int v17;
  BOOL v18;
  char v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  _BOOL4 v24;
  int v25;
  unint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  _BYTE *v55;
  unsigned __int8 *v56;
  int v57;
  unsigned __int8 *v58;
  _BYTE *v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  char v63;
  char v64;
  signed int v65;
  _DWORD *v66;
  signed int v67;
  unsigned __int8 *v68;
  _BYTE *v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  char v75;
  char v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  int v86;
  uint64_t v87;
  int *v88;
  int v89;
  int v90;
  int v91;
  int v92;
  char v93;
  char v94;
  uint64_t v95;
  int32x2_t v96;
  int32x2_t v97;
  int v98;
  int v99;
  char v100;
  char v101;
  uint64_t v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  int v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  int v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  _BYTE v130[8];
  uint64_t v131;

  v110 = result;
  v16 = 0;
  v131 = *MEMORY[0x1E0C80C00];
  v17 = a4[54];
  v18 = a16 < 1 || a4[53] == 0;
  v19 = v18;
  v103 = v19;
  v20 = *a4;
  if (v18)
    v21 = 1;
  else
    v21 = 2;
  v22 = 173 * a16 + 105;
  v23 = 9472 * a16 + 45568;
  do
  {
    *(_DWORD *)&v130[4 * v16++] = (v23 & 0xFF00 | v22) ^ v20;
    v22 -= 173;
    v23 -= 9472;
  }
  while (v21 != v16);
  v18 = v17 == 0;
  v24 = v17 != 0;
  if (v18)
    v25 = 255;
  else
    v25 = 235;
  if (a5)
  {
    LODWORD(v26) = 0;
    v27 = 16 * v24;
    if (a8 >= 2)
      v28 = 2;
    else
      v28 = a8;
    v104 = v28;
    v29 = a8;
    v102 = v21 & 2;
    LODWORD(v30) = a5;
    v105 = v21;
    v106 = a5;
    do
    {
      v108 = v30;
      v30 = (int)v30;
      if ((int)v30 >= 32)
        v30 = 32;
      v109 = v30;
      v31 = a5 - v26;
      if ((int)a5 - (int)v26 >= 32)
        v32 = 32;
      else
        v32 = a5 - v26;
      v121 = v32;
      v33 = a4[53];
      if ((_DWORD)v26)
        v34 = v33 == 0;
      else
        v34 = 1;
      v35 = !v34;
      if (v34)
        goto LABEL_40;
      if ((v103 & 1) != 0)
      {
        v36 = 0;
      }
      else
      {
        v37 = v102;
        v38 = &v128;
        do
        {
          *(_QWORD *)v38 = *((_QWORD *)v38 - 1);
          v38 += 2;
          v37 -= 2;
        }
        while (v37);
        v36 = v102;
        if (v102)
          goto LABEL_40;
      }
      v39 = v21 - v36;
      v40 = &v128 + v36;
      do
      {
        *v40 = *(v40 - 2);
        ++v40;
        --v39;
      }
      while (v39);
LABEL_40:
      v41 = 0;
      v42 = &v110[v26];
      v112 = v26;
      v43 = a2 + v26;
      do
      {
        v44 = 4 * v41;
        v45 = *(_DWORD *)&v130[4 * v41];
        result = (_BYTE *)((v45 >> 12) ^ (v45 >> 3));
        v46 = (((((v45 >> 12) ^ (v45 >> 3)) ^ (v45 ^ (v45 >> 1))) & 1) << 15) | (v45 >> 1);
        *(_DWORD *)&v130[v44] = v46;
        *(int *)((char *)&v126 + v44) = BYTE1(v46);
        ++v41;
      }
      while (v21 != v41);
      v122 = v43;
      if (v33)
        v47 = a16 == 0;
      else
        v47 = 1;
      if (v47)
        v48 = 0;
      else
        v48 = v104;
      if (v31 >= 2)
        v49 = 2;
      else
        v49 = v31;
      if (v35)
        v50 = v49;
      else
        v50 = 0;
      if ((int)v48 < a8)
      {
        v123 = 2 * (v128 & 0xF);
        v51 = (int)v48;
        v124 = 2 * (v126 & 0xF);
        v52 = a3 * (int)v48;
        v53 = v52 + (int)v50 + v112;
        result = &v110[v53];
        v54 = (unsigned __int8 *)(a2 + v53);
        v119 = ((v126 >> 3) & 0xFFFFFFFE) + 9;
        v55 = &v110[v52 + v112];
        v56 = (unsigned __int8 *)(a2 + v52 + v112);
        v117 = ((v128 >> 3) & 0xFFFFFFFE) + 41;
        do
        {
          if ((int)v50 < v121)
          {
            v57 = v119 + v50;
            v58 = v54;
            v59 = result;
            v60 = v109 - (int)v50;
            do
            {
              v61 = *v58++;
              v62 = ((*(unsigned __int8 *)(a6 + v61) * *(char *)(a7 + 82 * (v124 + 9 + (int)v51) + v57)
                    + (1 << a4[22] >> 1)) >> a4[22])
                  + v61;
              if (v62 >= v25)
                v63 = v25;
              else
                v63 = v62;
              if (v62 >= v27)
                v64 = v63;
              else
                v64 = v27;
              *v59++ = v64;
              ++v57;
              --v60;
            }
            while (v60);
          }
          if ((int)v50 >= 1)
          {
            v65 = v117;
            v66 = &unk_19689AD04;
            v67 = v119;
            v68 = v56;
            v69 = v55;
            v70 = v50;
            do
            {
              v71 = (*v66 * *(char *)(a7 + 82 * ((int)v51 + 9 + v124) + v67)
                   + *(v66 - 1) * *(char *)(a7 + 82 * ((int)v51 + 9 + v123) + v65)
                   + 16) >> 5;
              if (v71 >= 127)
                v71 = 127;
              v73 = *v68++;
              v72 = v73;
              if (v71 <= -128)
                v71 = -128;
              v74 = ((v71 * *(unsigned __int8 *)(a6 + v72) + (1 << a4[22] >> 1)) >> a4[22]) + v72;
              if (v74 >= v25)
                v75 = v25;
              else
                v75 = v74;
              if (v74 >= v27)
                v76 = v75;
              else
                v76 = v27;
              *v69++ = v76;
              ++v67;
              v66 += 2;
              ++v65;
              --v70;
            }
            while (v70);
          }
          ++v51;
          result += a3;
          v54 += a3;
          v55 += a3;
          v56 += a3;
        }
        while (v51 != v29);
      }
      if ((int)v48 >= 1)
      {
        v125 = 0;
        v77 = (v126 >> 3) & 0xFFFFFFFE;
        v78 = (v127 >> 3) & 0xFFFFFFFE;
        v114 = 2 * (v129 & 0xF);
        v113 = 2 * (v128 & 0xF);
        v116 = 2 * (v126 & 0xF);
        v115 = 2 * (v127 & 0xF);
        v79 = v109 - (int)v50;
        v80 = (int)v50 + v112;
        v81 = &v110[v80];
        v82 = a2 + v80;
        v118 = v50 + 9 + v78;
        result = (_BYTE *)((_DWORD)v50 + 9 + v77);
        v83 = (((v128 >> 3) & 0xFFFFFFFE) + 40) | 1;
        v84 = (((v129 >> 3) & 0xFFFFFFFE) + 40) | 1;
        v85 = (v77 + 8) | 1;
        v86 = (v78 + 8) | 1;
        do
        {
          if ((int)v50 < v121)
          {
            v87 = 0;
            v88 = &fgy_32x32xn_c_w_0[2 * v125];
            v89 = *v88;
            v90 = v88[1];
            do
            {
              v91 = (v89 * *(char *)(a7 + 82 * (v115 + 41 + (int)v125) + v118 + (int)v87)
                   + v90 * *(char *)(a7 + 82 * (v116 + 9 + (int)v125) + (int)result + (int)v87)
                   + 16) >> 5;
              if (v91 >= 127)
                v91 = 127;
              if (v91 <= -128)
                v91 = -128;
              v92 = ((v91 * *(unsigned __int8 *)(a6 + *(unsigned __int8 *)(v82 + v87)) + (1 << a4[22] >> 1)) >> a4[22])
                  + *(unsigned __int8 *)(v82 + v87);
              if (v92 >= v25)
                v93 = v25;
              else
                v93 = v92;
              if (v92 >= v27)
                v94 = v93;
              else
                v94 = v27;
              v81[v87++] = v94;
            }
            while (v79 != v87);
          }
          if ((int)v50 >= 1)
          {
            v95 = 0;
            v96 = *(int32x2_t *)&fgy_32x32xn_c_w_0[2 * v125];
            do
            {
              a14.i8[0] = *(_BYTE *)(a7 + 82 * ((int)v125 + 41 + v114) + (int)(v84 + v95));
              a14.i8[4] = *(_BYTE *)(a7 + 82 * ((int)v125 + 9 + v116) + v85 + (int)v95);
              a14 = vshr_n_s32(vshl_n_s32(a14, 0x18uLL), 0x18uLL);
              a15.i8[0] = *(_BYTE *)(a7 + 82 * ((int)v125 + 41 + v115) + v86 + (int)v95);
              a15.i8[4] = *(_BYTE *)(a7 + 82 * ((int)v125 + 9 + v113) + (int)(v83 + v95));
              a15 = vmla_s32(vmul_s32(vrev64_s32(*(int32x2_t *)&fgy_32x32xn_c_w_0[2 * v95]), vshr_n_s32(vshl_n_s32(a15, 0x18uLL), 0x18uLL)), *(int32x2_t *)&fgy_32x32xn_c_w_0[2 * v95], a14);
              v97 = vmul_s32(vmax_s32(vmin_s32(vshr_n_s32(vadd_s32(a15, (int32x2_t)0x1000000010), 5uLL), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL), v96);
              v98 = (v97.i32[0] + v97.i32[1] + 16) >> 5;
              if (v98 >= 127)
                v98 = 127;
              if (v98 <= -128)
                v98 = -128;
              v99 = ((v98 * *(unsigned __int8 *)(a6 + *(unsigned __int8 *)(v122 + v95)) + (1 << a4[22] >> 1)) >> a4[22])
                  + *(unsigned __int8 *)(v122 + v95);
              if (v99 >= v25)
                v100 = v25;
              else
                v100 = v99;
              if (v99 >= v27)
                v101 = v100;
              else
                v101 = v27;
              v42[v95++] = v101;
            }
            while (v50 != v95);
          }
          v81 += a3;
          v82 += a3;
          v42 += a3;
          v122 += a3;
          ++v125;
          v79 = v109 - (int)v50;
        }
        while (v125 != v48);
      }
      v26 = (v112 + 32);
      LODWORD(v30) = v108 - 32;
      v21 = v105;
      LODWORD(a5) = v106;
      v29 = a8;
    }
    while (v26 < v106);
  }
  return result;
}

void fguv_32x32xn_420_c_0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int a5, uint64_t a6, uint64_t a7, int a8, int a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  fguv_32x32xn_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, 1u, 1u);
}

void fguv_32x32xn_422_c_0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int a5, uint64_t a6, uint64_t a7, int a8, int a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  fguv_32x32xn_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, 1u, 0);
}

void fguv_32x32xn_444_c_0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int a5, uint64_t a6, uint64_t a7, int a8, int a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  fguv_32x32xn_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, 0, 0);
}

uint64_t generate_grain_uv_c_0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, unsigned int a5, int a6)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t result;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int32x4_t v47;
  int32x4_t v48;
  uint64_t v49;
  int8x8_t *v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int8x8_t *v64;
  uint64_t v65;
  int8x8_t v66;
  int16x8_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int8x8_t *v71;
  uint64_t v72;
  uint32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  uint64_t v76;
  _DWORD *v77;
  uint64_t v78;
  int32x4_t v80;
  int32x4_t v81;
  unint64_t v82;
  int8x8_t *v83;
  int16x8_t v84;
  uint64_t v85;
  char *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const float *v96;
  uint64_t v97;
  int8x16x2_t v98;

  v6 = 0;
  if (a4)
    v7 = 18904;
  else
    v7 = 46372;
  v8 = *a3 ^ v7;
  v9 = a3[46] + 4;
  if (a5)
    v10 = 44;
  else
    v10 = 82;
  if (a6)
    v11 = 38;
  else
    v11 = 73;
  v12 = (_BYTE *)a1;
  do
  {
    v13 = v12;
    v14 = v10;
    do
    {
      v8 = (((((v8 >> 12) ^ (v8 >> 3)) ^ (v8 ^ (v8 >> 1))) & 1) << 15) | (v8 >> 1);
      *v13++ = ((1 << v9 >> 1) + dav1d_gaussian_sequence[(unsigned __int16)v8 >> 5]) >> v9;
      --v14;
    }
    while (v14);
    ++v6;
    v12 += 82;
  }
  while (v6 != v11);
  v15 = (int)a3[23];
  LODWORD(v16) = v10 - 3;
  v96 = (const float *)(a3 + 44);
  if ((v15 & 0x80000000) == 0)
  {
    v94 = (uint64_t)&a3[7 * a4 + 30];
    v17 = -v15;
    v18 = a5 + 1;
    if ((int)v16 <= 4)
      v16 = 4;
    else
      v16 = v16;
    v93 = v16;
    v19 = (2 * a3[23]) | 1;
    v20 = a1 - 83 * (int)v15 + 249;
    v88 = a2 + 16;
    v89 = v11;
    v21 = 3;
    v22 = (2 * (_DWORD)v15) | 1u;
    while (1)
    {
      v23 = (((_DWORD)v21 - 3) << a6) + 3;
      v97 = v88 + 82 * v23;
      v24 = a2 + 82 * v23;
      v92 = v20;
      for (i = 3; i != v93; ++i)
      {
        v28 = 0;
        v29 = (((int)i - 3) << a5) + 3;
        v30 = v97 + v29;
        v31 = v24 + v29;
        v32 = (char *)v20;
        v33 = v17;
        v34 = (char *)v94;
        do
        {
          v35 = &v34[v19];
          v36 = v32;
          result = v22;
          v38 = v17;
          while (v38 | v33)
          {
            v40 = *v34++;
            v39 = v40;
            v41 = *v36++;
            v28 += v41 * v39;
            ++v38;
            result = (result - 1);
            if (!(_DWORD)result)
            {
              v34 = v35;
              goto LABEL_28;
            }
          }
          if (a3[1])
          {
            v42 = 0;
            v43 = 0;
            v44 = v31;
            result = v30;
            while (1)
            {
              if (a5 >= 7)
              {
                if (a5 < 0x1F)
                {
                  v46 = 0;
LABEL_44:
                  v62 = 0uLL;
                  v63 = (int32x4_t)v43;
                  v64 = (int8x8_t *)(v44 + v46);
                  v65 = v46 - (v18 & 0xFFFFFFF8);
                  do
                  {
                    v66 = *v64++;
                    v67 = vmovl_s8(v66);
                    v62 = vaddw_high_s16(v62, v67);
                    v63 = vaddw_s16(v63, *(int16x4_t *)v67.i8);
                    v65 += 8;
                  }
                  while (v65);
                  v43 = vaddvq_s32(vaddq_s32(v63, v62));
                  v45 = v18 & 0xFFFFFFF8;
                  if (v45 == v18)
                    goto LABEL_35;
                  goto LABEL_47;
                }
                v47 = 0uLL;
                v48 = (int32x4_t)v43;
                v49 = v18 & 0xFFFFFFE0;
                v50 = (int8x8_t *)result;
                v51 = 0uLL;
                v52 = 0uLL;
                v53 = 0uLL;
                v54 = 0uLL;
                v55 = 0uLL;
                v56 = 0uLL;
                do
                {
                  v57 = *(int8x16_t *)v50[-2].i8;
                  v58 = vmovl_s8(*(int8x8_t *)v57.i8);
                  v59 = vmovl_high_s8(v57);
                  v60 = vmovl_s8(*v50);
                  v61 = vmovl_high_s8(*(int8x16_t *)v50->i8);
                  v52 = vaddw_high_s16(v52, v59);
                  v51 = vaddw_s16(v51, *(int16x4_t *)v59.i8);
                  v47 = vaddw_high_s16(v47, v58);
                  v48 = vaddw_s16(v48, *(int16x4_t *)v58.i8);
                  v56 = vaddw_high_s16(v56, v61);
                  v55 = vaddw_s16(v55, *(int16x4_t *)v61.i8);
                  v54 = vaddw_high_s16(v54, v60);
                  v53 = vaddw_s16(v53, *(int16x4_t *)v60.i8);
                  v50 += 4;
                  v49 -= 32;
                }
                while (v49);
                v43 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v53, v48), vaddq_s32(v55, v51)), vaddq_s32(vaddq_s32(v54, v47), vaddq_s32(v56, v52))));
                if ((v18 & 0xFFFFFFE0) == v18)
                  goto LABEL_35;
                v46 = v18 & 0xFFFFFFE0;
                v45 = v46;
                if ((((_BYTE)a5 + 1) & 0x18) != 0)
                  goto LABEL_44;
              }
              else
              {
                v45 = 0;
              }
              do
LABEL_47:
                v43 += *(char *)(v44 + v45++);
              while (v18 != v45);
LABEL_35:
              ++v42;
              result += 82;
              v44 += 82;
              if (v42 == a6 + 1)
              {
                v28 += ((int)(v43 + ((1 << (a6 + a5)) >> 1)) >> (a6 + a5)) * *v34;
                break;
              }
            }
          }
LABEL_28:
          ++v33;
          v32 += 82;
        }
        while (v33 != 1);
        v26 = a1 + 82 * v21;
        v27 = ((v28 + (1 << *(_DWORD *)v96 >> 1)) >> *(_DWORD *)v96) + *(char *)(v26 + i);
        if (v27 >= 127)
          v27 = 127;
        if (v27 <= -128)
          LOBYTE(v27) = 0x80;
        *(_BYTE *)(v26 + i) = v27;
        ++v20;
      }
      ++v21;
      v20 = v92 + 82;
      if (v21 == v89)
        return result;
    }
  }
  v68 = 0;
  if ((int)v16 <= 4)
    v16 = 4;
  else
    v16 = v16;
  v69 = v16 - 3;
  v70 = (v16 - 3) & 0xFFFFFFFFFFFFFFF8;
  v71 = (int8x8_t *)(a1 + 249);
  v72 = a1 + 246;
  result = 3;
  v73.i64[0] = 0x100000001;
  v73.i64[1] = 0x100000001;
  v74.i64[0] = 0x7F0000007FLL;
  v74.i64[1] = 0x7F0000007FLL;
  v75.i64[0] = 0x7F0000007FLL;
  v75.i64[1] = 0x7F0000007FLL;
  do
  {
    if (v69 >= 8)
    {
      v77 = a3 + 44;
      v78 = a1 + 82 * v68;
      if (v78 + 249 >= (unint64_t)(a3 + 46) || (unint64_t)v96 >= v78 + v16 + 246)
      {
        v80 = (int32x4_t)vld1q_dup_f32(v96);
        v81 = vshlq_s32(vshrq_n_s32((int32x4_t)vshlq_u32(v73, (uint32x4_t)v80), 1uLL), vnegq_s32(v80));
        v82 = (v16 - 3) & 0xFFFFFFFFFFFFFFF8;
        v83 = v71;
        do
        {
          v84 = vmovl_s8(*v83);
          v98.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vaddw_high_s16(v81, v84), v74), v75);
          v98.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vaddw_s16(v81, *(int16x4_t *)v84.i8), v74), v75);
          *v83++ = (int8x8_t)vqtbl2q_s8(v98, (int8x16_t)xmmword_19689A990).u64[0];
          v82 -= 8;
        }
        while (v82);
        v76 = v70 | 3;
        if (v69 == v70)
          goto LABEL_53;
      }
      else
      {
        v76 = 3;
      }
    }
    else
    {
      v76 = 3;
      v77 = a3 + 44;
    }
    v85 = v16 - v76;
    v86 = (char *)(v72 + v76);
    do
    {
      v87 = (1 << *v77 >> 1 >> *v77) + *v86;
      if (v87 >= 127)
        v87 = 127;
      if (v87 <= -128)
        LOBYTE(v87) = 0x80;
      *v86++ = v87;
      --v85;
    }
    while (v85);
LABEL_53:
    ++result;
    ++v68;
    v71 = (int8x8_t *)((char *)v71 + 82);
    v72 += 82;
  }
  while (result != v11);
  return result;
}

void fguv_32x32xn_c_0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int a5, uint64_t a6, uint64_t a7, int a8, int a9, uint64_t a10, uint64_t a11, int a12, int a13, unsigned int a14, unsigned int a15)
{
  uint64_t v15;
  int v16;
  _BOOL4 v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int *v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  int *v40;
  uint64_t i;
  uint64_t v42;
  int v43;
  int v44;
  BOOL v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  char v59;
  char v60;
  unsigned __int8 *v61;
  unsigned int v62;
  int v63;
  int v64;
  uint64_t v65;
  _DWORD *v66;
  int v67;
  char v68;
  char v69;
  int v70;
  int v71;
  unsigned __int8 *v72;
  unsigned int v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  int *v85;
  int v86;
  int v87;
  int v88;
  char v89;
  char v90;
  int v91;
  int v92;
  unsigned __int8 *v93;
  unsigned int v94;
  int v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int *v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  int v108;
  char v109;
  char v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  unsigned __int8 *v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  BOOL v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  int v127;
  unsigned int v128;
  int v129;
  signed int v130;
  uint64_t v131;
  uint64_t v132;
  int v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  uint64_t v153;
  int v154;
  _DWORD *v155;
  _DWORD *v156;
  _DWORD *v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  int v162;
  _BYTE v163[8];
  uint64_t v164;

  v15 = 0;
  v164 = *MEMORY[0x1E0C80C00];
  v16 = a4[54];
  v18 = a9 < 1 || a4[53] == 0;
  if (a13)
    v19 = 235;
  else
    v19 = 240;
  v20 = *a4;
  v122 = v18;
  if (v18)
    v21 = 1;
  else
    v21 = 2;
  v22 = 173 * a9 + 105;
  v23 = 9472 * a9 + 45568;
  do
  {
    *(_DWORD *)&v163[4 * v15++] = (v23 & 0xFF00 | v22) ^ v20;
    v22 -= 173;
    v23 -= 9472;
  }
  while (v21 != v15);
  if (v16)
    v24 = v19;
  else
    v24 = 255;
  if (a5 >= 1)
  {
    v25 = 0;
    v26 = 16 * (v16 != 0);
    v27 = 0x20u >> a14;
    v28 = 2u >> a15;
    v128 = 2u >> a15;
    if ((int)(2u >> a15) >= a8)
      v28 = a8;
    v123 = v28;
    v29 = &a4[a12];
    v130 = 2u >> a14;
    v157 = v29 + 49;
    v155 = v29 + 51;
    v156 = v29 + 47;
    v139 = (0x20u >> a15) + 3;
    v121 = v21 & 2;
    v127 = v27 + 3;
    v131 = a1;
    v132 = a2;
    v30 = a5;
    v124 = 0x20u >> a14;
    v125 = v21;
    do
    {
      v129 = v30;
      v31 = v30;
      if (v30 >= v27)
        v31 = v27;
      v147 = v31;
      v32 = a5 - v25;
      if ((int)v27 < a5 - (int)v25)
        v32 = v27;
      v143 = v32;
      v33 = a4[53];
      if (v25)
        v34 = v33 == 0;
      else
        v34 = 1;
      v35 = !v34;
      if (v34)
        goto LABEL_41;
      if (v122)
      {
        v36 = 0;
      }
      else
      {
        v37 = v121;
        v38 = &v161;
        do
        {
          *(_QWORD *)v38 = *((_QWORD *)v38 - 1);
          v38 += 2;
          v37 -= 2;
        }
        while (v37);
        v36 = v121;
        if (v121)
          goto LABEL_41;
      }
      v39 = v21 - v36;
      v40 = &v161 + v36;
      do
      {
        *v40 = *(v40 - 2);
        ++v40;
        --v39;
      }
      while (v39);
LABEL_41:
      for (i = 0; i != v21; ++i)
      {
        v42 = 4 * i;
        v43 = *(_DWORD *)&v163[4 * i];
        v44 = (((((v43 >> 12) ^ (v43 >> 3)) ^ (v43 ^ (v43 >> 1))) & 1) << 15) | (v43 >> 1);
        *(_DWORD *)&v163[v42] = v44;
        *(int *)((char *)&v159 + v42) = BYTE1(v44);
      }
      if (v33)
        v45 = a9 == 0;
      else
        v45 = 1;
      if (v45)
        v46 = 0;
      else
        v46 = v123;
      v47 = 2u >> a14;
      if (v130 >= v143)
        v47 = v143;
      if (v35)
        v48 = v47;
      else
        v48 = 0;
      v158 = v48;
      v142 = v46;
      if ((int)v46 < a8)
      {
        v49 = ((v159 >> 4) + 3) * v130;
        v150 = ((v161 & 0xF) + 3) * v128;
        v151 = ((v159 & 0xF) + 3) * v128;
        v153 = (int)v142;
        v50 = a3 * (int)v142;
        v51 = v50 + (int)v48;
        v52 = v131 + v51;
        v53 = v132 + v51;
        v54 = v131 + v50;
        v55 = v132 + v50;
        v56 = v127 + ((v161 >> 4) + 3) * v130;
        do
        {
          if ((int)v158 < v143)
          {
            v57 = 0;
            do
            {
              v61 = (unsigned __int8 *)(a10
                                      + (int)((_DWORD)v153 << a15) * a11
                                      + (((int)v158 + (int)v25 + (int)v57) << a14));
              v62 = *v61;
              if (a14)
                v62 = ((v62 + v61[1] + 1) >> 1);
              v63 = *(unsigned __int8 *)(v53 + v57);
              if (!a4[9])
              {
                v64 = *v155 + ((int)(*v157 * v62 + *v156 * v63) >> 6);
                if (v64 >= 255)
                  v64 = 255;
                v62 = v64 & ~(v64 >> 31);
              }
              v58 = ((*(unsigned __int8 *)(a6 + v62)
                    * *(char *)(a7 + 82 * (v151 + 3 + (int)v153) + (int)v158 + v49 + 3 + (int)v57)
                    + (1 << a4[22] >> 1)) >> a4[22])
                  + v63;
              if (v58 >= v24)
                v59 = v24;
              else
                v59 = v58;
              if (v58 >= v26)
                v60 = v59;
              else
                v60 = v26;
              *(_BYTE *)(v52 + v57++) = v60;
            }
            while (v147 - (int)v158 != v57);
          }
          if ((int)v158 >= 1)
          {
            v65 = 0;
            v66 = (_DWORD *)((char *)&fguv_32x32xn_c_w_0 + 16 * a14 + 4);
            do
            {
              v70 = (*v66 * *(char *)(a7 + 82 * ((int)v153 + 3 + v151) + v49 + 3 + (int)v65)
                   + *(v66 - 1) * *(char *)(a7 + 82 * ((int)v153 + 3 + v150) + v56 + (int)v65)
                   + 16) >> 5;
              if (v70 >= 127)
                v70 = 127;
              if (v70 <= -128)
                v71 = -128;
              else
                v71 = v70;
              v72 = (unsigned __int8 *)(a10 + (int)((_DWORD)v153 << a15) * a11 + (((int)v25 + (int)v65) << a14));
              v73 = *v72;
              if (a14)
                v73 = ((v73 + v72[1] + 1) >> 1);
              v74 = *(unsigned __int8 *)(v55 + v65);
              if (!a4[9])
              {
                v75 = *v155 + ((int)(*v157 * v73 + *v156 * v74) >> 6);
                if (v75 >= 255)
                  v75 = 255;
                v73 = v75 & ~(v75 >> 31);
              }
              v66 += 2;
              v67 = ((v71 * *(unsigned __int8 *)(a6 + v73) + (1 << a4[22] >> 1)) >> a4[22]) + v74;
              if (v67 >= v24)
                v68 = v24;
              else
                v68 = v67;
              if (v67 >= v26)
                v69 = v68;
              else
                v69 = v26;
              *(_BYTE *)(v54 + v65++) = v69;
            }
            while (v158 != v65);
          }
          v52 += a3;
          v53 += a3;
          v54 += a3;
          v55 += a3;
          ++v153;
        }
        while (v153 != a8);
      }
      if ((int)v142 >= 1)
      {
        v76 = 0;
        v77 = ((v159 >> 4) + 3) * v130;
        v78 = ((v160 >> 4) + 3) * v130;
        v136 = ((v162 & 0xF) + 3) * v128;
        v135 = ((v161 & 0xF) + 3) * v128;
        v137 = ((v160 & 0xF) + 3) * v128;
        v138 = ((v159 & 0xF) + 3) * v128;
        v79 = v147 - (int)v158;
        v80 = v131 + (int)v158;
        v81 = v132 + (int)v158;
        v82 = v158 + v25;
        v83 = v158 + 3 + v78;
        v154 = v127 + ((v161 >> 4) + 3) * v130;
        v152 = v127 + ((v162 >> 4) + 3) * v130;
        v149 = v78 + 3;
        v141 = v79;
        v140 = v83;
        do
        {
          v145 = (_DWORD)v76 << a15;
          if ((int)v158 < v143)
          {
            v84 = 0;
            v85 = (int *)((char *)&fguv_32x32xn_c_w_0 + 16 * a15 + 8 * v76);
            v87 = *v85;
            v86 = v85[1];
            do
            {
              v91 = (v87 * *(char *)(a7 + 82 * (int)(v137 + v139 + v76) + v83 + (int)v84)
                   + v86 * *(char *)(a7 + 82 * (v138 + 3 + (int)v76) + (int)v158 + 3 + v77 + (int)v84)
                   + 16) >> 5;
              if (v91 >= 127)
                v91 = 127;
              if (v91 <= -128)
                v92 = -128;
              else
                v92 = v91;
              v93 = (unsigned __int8 *)(a10 + v145 * a11 + ((v82 + (int)v84) << a14));
              v94 = *v93;
              if (a14)
                v94 = ((v94 + v93[1] + 1) >> 1);
              v95 = *(unsigned __int8 *)(v81 + v84);
              if (!a4[9])
              {
                v96 = *v155 + ((int)(*v157 * v94 + *v156 * v95) >> 6);
                if (v96 >= 255)
                  v96 = 255;
                v94 = v96 & ~(v96 >> 31);
              }
              v88 = ((v92 * *(unsigned __int8 *)(a6 + v94) + (1 << a4[22] >> 1)) >> a4[22]) + v95;
              if (v88 >= v24)
                v89 = v24;
              else
                v89 = v88;
              if (v88 >= v26)
                v90 = v89;
              else
                v90 = v26;
              *(_BYTE *)(v80 + v84++) = v90;
            }
            while (v79 != v84);
          }
          v144 = v80;
          v148 = v76;
          if ((int)v158 >= 1)
          {
            v97 = 0;
            v98 = v139 + v76 + v137;
            v99 = v139 + v76 + v136;
            v100 = v76 + 3 + v138;
            v101 = v76 + 3 + v135;
            v102 = (int *)((char *)&fguv_32x32xn_c_w_0 + 16 * a15 + 8 * v76);
            v104 = *v102;
            v103 = v102[1];
            v105 = a2 + v76 * a3;
            v106 = a1 + v76 * a3;
            v107 = (_DWORD *)((char *)&fguv_32x32xn_c_w_0 + 16 * a14 + 4);
            do
            {
              v111 = *(v107 - 1);
              v112 = (*v107 * *(char *)(a7 + 82 * v98 + v149 + (int)v97)
                    + v111 * *(char *)(a7 + 82 * v99 + v152 + (int)v97)
                    + 16) >> 5;
              if (v112 >= 127)
                v112 = 127;
              if (v112 <= -128)
                v112 = -128;
              v113 = (v111 * *(char *)(a7 + 82 * v101 + v154 + (int)v97)
                    + *v107 * *(char *)(a7 + 82 * v100 + v77 + 3 + (int)v97)
                    + 16) >> 5;
              if (v113 >= 127)
                v113 = 127;
              if (v113 <= -128)
                v113 = -128;
              v114 = (v113 * v103 + v112 * v104 + 16) >> 5;
              if (v114 >= 127)
                v114 = 127;
              if (v114 <= -128)
                v115 = -128;
              else
                v115 = v114;
              v116 = (unsigned __int8 *)(a10 + v145 * a11 + (((int)v25 + (int)v97) << a14));
              v117 = *v116;
              if (a14)
                v117 = ((v117 + v116[1] + 1) >> 1);
              v118 = (v25 + v97);
              v119 = *(unsigned __int8 *)(v105 + v118);
              if (!a4[9])
              {
                v120 = *v155 + ((int)(*v157 * v117 + *v156 * v119) >> 6);
                if (v120 >= 255)
                  v120 = 255;
                v117 = v120 & ~(v120 >> 31);
              }
              v107 += 2;
              v108 = ((v115 * *(unsigned __int8 *)(a6 + v117) + (1 << a4[22] >> 1)) >> a4[22]) + v119;
              if (v108 >= v24)
                v109 = v24;
              else
                v109 = ((v115 * *(unsigned __int8 *)(a6 + v117) + (1 << a4[22] >> 1)) >> a4[22]) + v119;
              if (v108 >= v26)
                v110 = v109;
              else
                v110 = v26;
              *(_BYTE *)(v106 + v118) = v110;
              ++v97;
            }
            while (v158 != v97);
          }
          v76 = v148 + 1;
          v80 = v144 + a3;
          v81 += a3;
          v79 = v141;
          v83 = v140;
          v82 = v158 + v25;
        }
        while (v148 + 1 != v142);
      }
      v27 = 0x20u >> a14;
      v21 = v125;
      v25 += v124;
      v30 = v129 - v124;
      v131 += v124;
      v132 += v124;
    }
    while (v25 < a5);
  }
}

uint64_t dav1d_prepare_intra_edges_8bpc(int a1, int a2, int a3, int a4, int a5, int a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int a11, int *a12, int a13, int a14, int a15, _BYTE *a16)
{
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  char v24;
  unsigned __int8 *v25;
  uint64_t v26;
  BOOL v27;
  _BYTE *v28;
  size_t v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  int v42;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  int v50;
  size_t v51;
  int8x16_t *v52;
  uint64_t v53;
  int8x16_t v54;
  unsigned __int8 *v55;
  int8x16_t v56;
  int8x16_t v57;
  uint64_t v58;
  int8x8_t *v59;
  uint64_t v60;
  int v61;
  int8x8_t v62;
  int8x16_t *v63;
  int8x16_t *v64;
  uint64_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  uint64_t v69;
  int8x8_t *v70;
  int8x8_t *v71;
  uint64_t v72;
  int8x8_t v73;
  size_t v74;
  _BYTE *v75;
  uint64_t v76;
  _BYTE *v77;
  int v79;
  _BYTE *v80;
  int v81;
  int v82;
  uint64_t v83;
  _BYTE *v84;
  size_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  BOOL v92;
  char *v93;
  size_t v94;
  int v95;
  int v96;
  uint64_t v98;
  unsigned __int8 *__src;

  v19 = a2;
  v20 = a11;
  if (a11 - 1 >= 8)
  {
    if (a11)
      v27 = a11 == 12;
    else
      v27 = 1;
    if (v27)
      v20 = av1_mode_conv_0[4 * a11 + 2 * a2 + a4];
    v23 = a9;
    v24 = av1_intra_prediction_edges_0[v20];
    if (!a4)
      goto LABEL_10;
  }
  else
  {
    v21 = 3 * *a12 + av1_mode_to_angle_map_0[a11 - 1];
    *a12 = v21;
    if (v21 > 90)
    {
      if (v21 >= 0xB4)
      {
        if (v21 == 180 || a2 == 0)
          v20 = 2;
        else
          v20 = 8;
        v23 = a9;
        v24 = av1_intra_prediction_edges_0[v20];
        if (!a4)
          goto LABEL_10;
      }
      else
      {
        v20 = 7u;
        v23 = a9;
        v24 = av1_intra_prediction_edges_0[v20];
        if (!a4)
        {
LABEL_10:
          v25 = 0;
          v26 = a8;
          goto LABEL_30;
        }
      }
    }
    else
    {
      if (v21 == 90 || a4 == 0)
        v20 = 1;
      else
        v20 = 6;
      v23 = a9;
      v24 = av1_intra_prediction_edges_0[v20];
      if (!a4)
        goto LABEL_10;
    }
  }
  if ((v24 & 6) != 0 || (v26 = 0, v25 = 0, !a2) && (v24 & 1) != 0)
  {
    if (a10)
      v26 = a10 + 4 * a1;
    else
      v26 = a8 - v23;
    if (a10)
      v25 = (unsigned __int8 *)(a10 + 4 * a1);
    else
      v25 = (unsigned __int8 *)(a8 - v23);
  }
LABEL_30:
  v98 = v26;
  __src = v25;
  v28 = a16;
  if ((v24 & 1) == 0)
    goto LABEL_102;
  v29 = 4 * a14;
  v30 = &a16[-v29];
  if (!a2)
  {
    v41 = a6;
    if (a4)
      v42 = *v25;
    else
      v42 = 129;
    memset(v30, v42, v29);
    v28 = a16;
    a6 = v41;
    if ((v24 & 0x10) != 0)
      goto LABEL_64;
    goto LABEL_102;
  }
  v31 = 4 * (a6 - a3);
  if ((int)v29 >= v31)
    v32 = v31;
  else
    v32 = v29;
  if ((int)v32 >= 1)
  {
    if (v32 < 8)
      goto LABEL_45;
    v33 = 0;
    if (v23 != 1)
      goto LABEL_46;
    v34 = v29 - 1;
    if ((int)v29 - (int)v32 > (int)v29 - 1 || (unint64_t)(v32 - 1) >> 32 != 0)
      goto LABEL_46;
    v36 = (int)v29 - 4 - v29 + 4;
    if (a8 - 1 < (unint64_t)&a16[v36] && (unint64_t)&a16[v36 - v32] < a8 - 1 + v32)
    {
LABEL_45:
      v33 = 0;
      goto LABEL_46;
    }
    if (v32 >= 0x20)
    {
      v33 = v32 & 0x7FFFFFE0;
      v52 = (int8x16_t *)(a8 + 15);
      v53 = v32 & 0xFFFFFFE0;
      do
      {
        v54 = *v52;
        v55 = &v30[v34];
        v56 = vrev64q_s8(v52[-1]);
        *(int8x16_t *)(v55 - 15) = vextq_s8(v56, v56, 8uLL);
        v57 = vrev64q_s8(v54);
        *(int8x16_t *)(v55 - 31) = vextq_s8(v57, v57, 8uLL);
        v52 += 2;
        v34 -= 32;
        v53 -= 32;
      }
      while (v53);
      if (v33 == v32)
        goto LABEL_48;
      if ((v32 & 0x18) == 0)
      {
LABEL_46:
        v37 = v32 - v33;
        v38 = ~(_DWORD)v33 + v29;
        v39 = (unsigned __int8 *)(a8 + v33 * v23 - 1);
        do
        {
          v30[v38--] = *v39;
          v39 += v23;
          --v37;
        }
        while (v37);
        goto LABEL_48;
      }
    }
    else
    {
      v33 = 0;
    }
    v58 = v33;
    v33 = v32 & 0xFFFFFFF8;
    v59 = (int8x8_t *)(v58 + a8 - 1);
    v60 = v58 - v33;
    v61 = ~(_DWORD)v58 + v29;
    do
    {
      v62 = *v59++;
      *(int8x8_t *)&v30[v61 - 7] = vrev64_s8(v62);
      v61 -= 8;
      v60 += 8;
    }
    while (v60);
    if (v33 != v32)
      goto LABEL_46;
  }
LABEL_48:
  if ((int)v29 > v31)
  {
    v40 = a6;
    memset(&a16[-v29], a16[-(int)v32], v29 - (int)v32);
    a6 = v40;
    v28 = a16;
  }
  if ((v24 & 0x10) != 0)
  {
LABEL_64:
    if (!v19 || (a7 & 8) == 0 || (v44 = a6 - (a14 + a3), a6 <= a14 + a3))
    {
      v49 = &v30[-v29];
      v50 = *v30;
      v51 = 4 * a14;
LABEL_101:
      memset(v49, v50, v51);
      v28 = a16;
      goto LABEL_102;
    }
    v45 = 4 * v44;
    if ((int)v29 >= 4 * v44)
      v46 = v45;
    else
      v46 = v29;
    if ((int)v46 < 1)
    {
LABEL_99:
      if ((int)v29 <= v45)
        goto LABEL_102;
      v49 = &v30[-v29];
      v51 = (int)v29 - (int)v46;
      v50 = v30[-(int)v46];
      goto LABEL_101;
    }
    v47 = 0;
    if (v46 >= 8 && v23 == 1)
    {
      v48 = v29 + a8 - 1;
      if ((unint64_t)&v28[-4 * a14 - v46] >= v48 + v46 || v48 >= (unint64_t)v30)
      {
        if (v46 >= 0x20)
        {
          v47 = v46 & 0x7FFFFFE0;
          v63 = (int8x16_t *)(v29 + a8 + 15);
          v64 = (int8x16_t *)&v28[-v29 - 16];
          v65 = v46 & 0xFFFFFFE0;
          do
          {
            v66 = vrev64q_s8(v63[-1]);
            v67 = vextq_s8(v66, v66, 8uLL);
            v68 = vrev64q_s8(*v63);
            v64[-1] = vextq_s8(v68, v68, 8uLL);
            *v64 = v67;
            v63 += 2;
            v64 -= 2;
            v65 -= 32;
          }
          while (v65);
          if (v47 == v46)
            goto LABEL_99;
          if ((v46 & 0x18) == 0)
            goto LABEL_96;
        }
        else
        {
          v47 = 0;
        }
        v69 = v47;
        v47 = v46 & 0xFFFFFFF8;
        v70 = (int8x8_t *)(v69 + v29 + a8 - 1);
        v71 = (int8x8_t *)&v28[-v69 - v29 - 8];
        v72 = v69 - v47;
        do
        {
          v73 = *v70++;
          *v71-- = vrev64_s8(v73);
          v72 += 8;
        }
        while (v72);
        if (v47 == v46)
          goto LABEL_99;
        goto LABEL_96;
      }
      v47 = 0;
    }
LABEL_96:
    v74 = v47 + v29;
    v75 = &v28[~(v47 + v29)];
    v76 = v47 - v46;
    v77 = (_BYTE *)(a8 + v23 * v74 - 1);
    do
    {
      *v75-- = *v77;
      v77 += v23;
    }
    while (!__CFADD__(v76++, 1));
    goto LABEL_99;
  }
LABEL_102:
  if ((v24 & 2) == 0)
    goto LABEL_125;
  v79 = 4 * a13;
  v80 = v28 + 1;
  if (!a4)
  {
    if (v19)
      v86 = *(unsigned __int8 *)(a8 - 1);
    else
      v86 = 127;
    v85 = v79;
    v84 = v28 + 1;
    goto LABEL_113;
  }
  v81 = 4 * (a5 - a1);
  if (v79 >= v81)
    v82 = 4 * (a5 - a1);
  else
    v82 = 4 * a13;
  v83 = v82;
  memcpy(v28 + 1, __src, v82);
  if (v79 > v81)
  {
    v84 = &v80[v83];
    v85 = v79 - (int)v83;
    v86 = v80[v83 - 1];
LABEL_113:
    memset(v84, v86, v85);
  }
  v28 = a16;
  if ((v24 & 8) == 0)
    goto LABEL_125;
  if (!a4 || (a7 & 1) == 0 || (v87 = a5 - (a13 + a1), a5 <= a13 + a1))
  {
    v94 = v79;
    v93 = &v80[v79];
    v95 = *(v93 - 1);
    goto LABEL_124;
  }
  v88 = v19;
  v89 = 4 * v87;
  if (v79 >= 4 * v87)
    v90 = 4 * v87;
  else
    v90 = 4 * a13;
  v91 = v90;
  memcpy(&v80[v79], &__src[v79], v90);
  v28 = a16;
  v92 = v79 <= v89;
  v19 = v88;
  if (!v92)
  {
    v93 = &v80[v79 + v91];
    v94 = v79 - (int)v91;
    v95 = v80[v79 - 1 + (int)v91];
LABEL_124:
    memset(v93, v95, v94);
    v28 = a16;
  }
LABEL_125:
  if ((v24 & 4) != 0)
  {
    if (v19)
    {
      v96 = *(unsigned __int8 *)(v98 - 1);
      *v28 = v96;
      if ((_DWORD)v20 != 7)
        return v20;
    }
    else if (a4)
    {
      v96 = *__src;
      *v28 = v96;
      if ((_DWORD)v20 != 7)
        return v20;
    }
    else
    {
      v96 = 128;
      *v28 = 0x80;
      if ((_DWORD)v20 != 7)
        return v20;
    }
    if (a14 + a13 >= 6 && a15)
      *v28 = (5 * (v28[1] + *(v28 - 1)) + 6 * v96 + 8) >> 4;
  }
  return v20;
}

_DWORD *ipred_dc_c_0(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unsigned int v6;
  uint64_t v7;
  int32x4_t v8;
  int32x4_t v9;
  uint8x8_t *v10;
  uint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  uint8x16_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint64_t v23;
  int32x4_t v24;
  int32x4_t v25;
  uint8x8_t *v26;
  uint64_t v27;
  uint8x8_t v28;
  uint16x8_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int8x16_t *v36;
  uint64_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  uint8x16_t v45;
  int8x16_t v46;
  uint8x16_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint64_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int8x8_t *v55;
  uint64_t v56;
  int8x8_t v57;
  uint16x8_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  int v64;
  unsigned int v65;
  int v66;

  v6 = (a5 + a4) >> 1;
  if (a4 >= 1)
  {
    if (a4 < 8)
    {
      v7 = 0;
      goto LABEL_13;
    }
    if (a4 >= 0x20)
    {
      v7 = a4 & 0xFFFFFFE0;
      v8 = 0uLL;
      v9 = (int32x4_t)((a5 + a4) >> 1);
      v10 = (uint8x8_t *)(a3 + 17);
      v11 = v7;
      v12 = 0uLL;
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = 0uLL;
      v16 = 0uLL;
      v17 = 0uLL;
      do
      {
        v18 = *(uint8x16_t *)v10[-2].i8;
        v19 = vmovl_u8(*(uint8x8_t *)v18.i8);
        v20 = vmovl_high_u8(v18);
        v21 = vmovl_u8(*v10);
        v22 = vmovl_high_u8(*(uint8x16_t *)v10->i8);
        v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v20);
        v12 = (int32x4_t)vaddw_u16((uint32x4_t)v12, *(uint16x4_t *)v20.i8);
        v8 = (int32x4_t)vaddw_high_u16((uint32x4_t)v8, v19);
        v9 = (int32x4_t)vaddw_u16((uint32x4_t)v9, *(uint16x4_t *)v19.i8);
        v17 = (int32x4_t)vaddw_high_u16((uint32x4_t)v17, v22);
        v16 = (int32x4_t)vaddw_u16((uint32x4_t)v16, *(uint16x4_t *)v22.i8);
        v15 = (int32x4_t)vaddw_high_u16((uint32x4_t)v15, v21);
        v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v21.i8);
        v10 += 4;
        v11 -= 32;
      }
      while (v11);
      v6 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v14, v9), vaddq_s32(v16, v12)), vaddq_s32(vaddq_s32(v15, v8), vaddq_s32(v17, v13))));
      if (v7 == a4)
        goto LABEL_15;
      if ((a4 & 0x18) == 0)
      {
LABEL_13:
        v30 = a4 - v7;
        v31 = (unsigned __int8 *)(v7 + a3 + 1);
        do
        {
          v32 = *v31++;
          v6 += v32;
          --v30;
        }
        while (v30);
        goto LABEL_15;
      }
    }
    else
    {
      v7 = 0;
    }
    v23 = v7;
    v7 = a4 & 0xFFFFFFF8;
    v24 = 0uLL;
    v25 = (int32x4_t)v6;
    v26 = (uint8x8_t *)(v23 + a3 + 1);
    v27 = v23 - v7;
    do
    {
      v28 = *v26++;
      v29 = vmovl_u8(v28);
      v24 = (int32x4_t)vaddw_high_u16((uint32x4_t)v24, v29);
      v25 = (int32x4_t)vaddw_u16((uint32x4_t)v25, *(uint16x4_t *)v29.i8);
      v27 += 8;
    }
    while (v27);
    v6 = vaddvq_s32(vaddq_s32(v25, v24));
    if (v7 != a4)
      goto LABEL_13;
  }
LABEL_15:
  if (a5 >= 1)
  {
    if (a5 < 8)
    {
      v33 = 0;
LABEL_27:
      v59 = (unsigned __int8 *)(~v33 + a3);
      v60 = a5 - v33;
      do
      {
        v61 = *v59--;
        v6 += v61;
        --v60;
      }
      while (v60);
      goto LABEL_29;
    }
    if (a5 >= 0x20)
    {
      v33 = a5 & 0xFFFFFFE0;
      v34 = 0uLL;
      v35 = (int32x4_t)v6;
      v36 = (int8x16_t *)(a3 - 16);
      v37 = v33;
      v38 = 0uLL;
      v39 = 0uLL;
      v40 = 0uLL;
      v41 = 0uLL;
      v42 = 0uLL;
      v43 = 0uLL;
      do
      {
        v44 = vrev64q_s8(*v36);
        v45 = (uint8x16_t)vextq_s8(v44, v44, 8uLL);
        v46 = vrev64q_s8(v36[-1]);
        v47 = (uint8x16_t)vextq_s8(v46, v46, 8uLL);
        v48 = vmovl_u8(*(uint8x8_t *)v45.i8);
        v49 = vmovl_high_u8(v45);
        v50 = vmovl_u8(*(uint8x8_t *)v47.i8);
        v51 = vmovl_high_u8(v47);
        v39 = (int32x4_t)vaddw_high_u16((uint32x4_t)v39, v49);
        v38 = (int32x4_t)vaddw_u16((uint32x4_t)v38, *(uint16x4_t *)v49.i8);
        v34 = (int32x4_t)vaddw_high_u16((uint32x4_t)v34, v48);
        v35 = (int32x4_t)vaddw_u16((uint32x4_t)v35, *(uint16x4_t *)v48.i8);
        v43 = (int32x4_t)vaddw_high_u16((uint32x4_t)v43, v51);
        v42 = (int32x4_t)vaddw_u16((uint32x4_t)v42, *(uint16x4_t *)v51.i8);
        v41 = (int32x4_t)vaddw_high_u16((uint32x4_t)v41, v50);
        v40 = (int32x4_t)vaddw_u16((uint32x4_t)v40, *(uint16x4_t *)v50.i8);
        v36 -= 2;
        v37 -= 32;
      }
      while (v37);
      v6 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v40, v35), vaddq_s32(v42, v38)), vaddq_s32(vaddq_s32(v41, v34), vaddq_s32(v43, v39))));
      if (v33 == a5)
        goto LABEL_29;
      if ((a5 & 0x18) == 0)
        goto LABEL_27;
    }
    else
    {
      v33 = 0;
    }
    v52 = v33;
    v33 = a5 & 0xFFFFFFF8;
    v53 = 0uLL;
    v54 = (int32x4_t)v6;
    v55 = (int8x8_t *)(a3 - v52 - 8);
    v56 = v52 - v33;
    do
    {
      v57 = *v55--;
      v58 = vmovl_u8((uint8x8_t)vrev64_s8(v57));
      v53 = (int32x4_t)vaddw_high_u16((uint32x4_t)v53, v58);
      v54 = (int32x4_t)vaddw_u16((uint32x4_t)v54, *(uint16x4_t *)v58.i8);
      v56 += 8;
    }
    while (v56);
    v6 = vaddvq_s32(vaddq_s32(v54, v53));
    if (v33 == a5)
      goto LABEL_29;
    goto LABEL_27;
  }
LABEL_29:
  v62 = v6 >> __clz(__rbit32(a5 + a4));
  if (2 * a4 < a5 || 2 * a5 < a4)
    v64 = 13108;
  else
    v64 = 21846;
  v65 = (v62 * v64) >> 16;
  if (a4 == a5)
    v66 = v62;
  else
    v66 = v65;
  return splat_dc_0(a1, a2, a4, a5, v66);
}

_DWORD *ipred_dc_128_c_0(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  return splat_dc_0(a1, a2, a4, a5, 128);
}

_DWORD *ipred_dc_top_c_0(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unsigned int v5;
  uint64_t v6;
  int32x4_t v7;
  int32x4_t v8;
  uint8x8_t *v9;
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  uint8x16_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint64_t v22;
  int32x4_t v23;
  int32x4_t v24;
  uint8x8_t *v25;
  uint64_t v26;
  uint8x8_t v27;
  uint16x8_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;

  v5 = a4 >> 1;
  if (a4 >= 1)
  {
    if (a4 < 8)
    {
      v6 = 0;
      goto LABEL_13;
    }
    if (a4 >= 0x20)
    {
      v6 = a4 & 0xFFFFFFE0;
      v7 = 0uLL;
      v8 = (int32x4_t)(a4 >> 1);
      v9 = (uint8x8_t *)(a3 + 17);
      v10 = v6;
      v11 = 0uLL;
      v12 = 0uLL;
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = 0uLL;
      v16 = 0uLL;
      do
      {
        v17 = *(uint8x16_t *)v9[-2].i8;
        v18 = vmovl_u8(*(uint8x8_t *)v17.i8);
        v19 = vmovl_high_u8(v17);
        v20 = vmovl_u8(*v9);
        v21 = vmovl_high_u8(*(uint8x16_t *)v9->i8);
        v12 = (int32x4_t)vaddw_high_u16((uint32x4_t)v12, v19);
        v11 = (int32x4_t)vaddw_u16((uint32x4_t)v11, *(uint16x4_t *)v19.i8);
        v7 = (int32x4_t)vaddw_high_u16((uint32x4_t)v7, v18);
        v8 = (int32x4_t)vaddw_u16((uint32x4_t)v8, *(uint16x4_t *)v18.i8);
        v16 = (int32x4_t)vaddw_high_u16((uint32x4_t)v16, v21);
        v15 = (int32x4_t)vaddw_u16((uint32x4_t)v15, *(uint16x4_t *)v21.i8);
        v14 = (int32x4_t)vaddw_high_u16((uint32x4_t)v14, v20);
        v13 = (int32x4_t)vaddw_u16((uint32x4_t)v13, *(uint16x4_t *)v20.i8);
        v9 += 4;
        v10 -= 32;
      }
      while (v10);
      v5 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v13, v8), vaddq_s32(v15, v11)), vaddq_s32(vaddq_s32(v14, v7), vaddq_s32(v16, v12))));
      if (v6 == a4)
        return splat_dc_0(a1, a2, a4, a5, v5 >> __clz(__rbit32(a4)));
      if ((a4 & 0x18) == 0)
      {
LABEL_13:
        v29 = a4 - v6;
        v30 = (unsigned __int8 *)(v6 + a3 + 1);
        do
        {
          v31 = *v30++;
          v5 += v31;
          --v29;
        }
        while (v29);
        return splat_dc_0(a1, a2, a4, a5, v5 >> __clz(__rbit32(a4)));
      }
    }
    else
    {
      v6 = 0;
    }
    v22 = v6;
    v6 = a4 & 0xFFFFFFF8;
    v23 = 0uLL;
    v24 = (int32x4_t)v5;
    v25 = (uint8x8_t *)(v22 + a3 + 1);
    v26 = v22 - v6;
    do
    {
      v27 = *v25++;
      v28 = vmovl_u8(v27);
      v23 = (int32x4_t)vaddw_high_u16((uint32x4_t)v23, v28);
      v24 = (int32x4_t)vaddw_u16((uint32x4_t)v24, *(uint16x4_t *)v28.i8);
      v26 += 8;
    }
    while (v26);
    v5 = vaddvq_s32(vaddq_s32(v24, v23));
    if (v6 != a4)
      goto LABEL_13;
  }
  return splat_dc_0(a1, a2, a4, a5, v5 >> __clz(__rbit32(a4)));
}

_DWORD *ipred_dc_left_c_0(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unsigned int v5;
  uint64_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int8x16_t *v9;
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  uint8x16_t v18;
  int8x16_t v19;
  uint8x16_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint64_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int8x8_t *v28;
  uint64_t v29;
  int8x8_t v30;
  uint16x8_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;

  v5 = a5 >> 1;
  if (a5 >= 1)
  {
    if (a5 < 8)
    {
      v6 = 0;
      goto LABEL_13;
    }
    if (a5 >= 0x20)
    {
      v6 = a5 & 0xFFFFFFE0;
      v7 = 0uLL;
      v8 = (int32x4_t)(a5 >> 1);
      v9 = (int8x16_t *)(a3 - 16);
      v10 = v6;
      v11 = 0uLL;
      v12 = 0uLL;
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = 0uLL;
      v16 = 0uLL;
      do
      {
        v17 = vrev64q_s8(*v9);
        v18 = (uint8x16_t)vextq_s8(v17, v17, 8uLL);
        v19 = vrev64q_s8(v9[-1]);
        v20 = (uint8x16_t)vextq_s8(v19, v19, 8uLL);
        v21 = vmovl_u8(*(uint8x8_t *)v18.i8);
        v22 = vmovl_high_u8(v18);
        v23 = vmovl_u8(*(uint8x8_t *)v20.i8);
        v24 = vmovl_high_u8(v20);
        v12 = (int32x4_t)vaddw_high_u16((uint32x4_t)v12, v22);
        v11 = (int32x4_t)vaddw_u16((uint32x4_t)v11, *(uint16x4_t *)v22.i8);
        v7 = (int32x4_t)vaddw_high_u16((uint32x4_t)v7, v21);
        v8 = (int32x4_t)vaddw_u16((uint32x4_t)v8, *(uint16x4_t *)v21.i8);
        v16 = (int32x4_t)vaddw_high_u16((uint32x4_t)v16, v24);
        v15 = (int32x4_t)vaddw_u16((uint32x4_t)v15, *(uint16x4_t *)v24.i8);
        v14 = (int32x4_t)vaddw_high_u16((uint32x4_t)v14, v23);
        v13 = (int32x4_t)vaddw_u16((uint32x4_t)v13, *(uint16x4_t *)v23.i8);
        v9 -= 2;
        v10 -= 32;
      }
      while (v10);
      v5 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v13, v8), vaddq_s32(v15, v11)), vaddq_s32(vaddq_s32(v14, v7), vaddq_s32(v16, v12))));
      if (v6 == a5)
        return splat_dc_0(a1, a2, a4, a5, v5 >> __clz(__rbit32(a5)));
      if ((a5 & 0x18) == 0)
      {
LABEL_13:
        v32 = (unsigned __int8 *)(~v6 + a3);
        v33 = a5 - v6;
        do
        {
          v34 = *v32--;
          v5 += v34;
          --v33;
        }
        while (v33);
        return splat_dc_0(a1, a2, a4, a5, v5 >> __clz(__rbit32(a5)));
      }
    }
    else
    {
      v6 = 0;
    }
    v25 = v6;
    v6 = a5 & 0xFFFFFFF8;
    v26 = 0uLL;
    v27 = (int32x4_t)v5;
    v28 = (int8x8_t *)(a3 - v25 - 8);
    v29 = v25 - v6;
    do
    {
      v30 = *v28--;
      v31 = vmovl_u8((uint8x8_t)vrev64_s8(v30));
      v26 = (int32x4_t)vaddw_high_u16((uint32x4_t)v26, v31);
      v27 = (int32x4_t)vaddw_u16((uint32x4_t)v27, *(uint16x4_t *)v31.i8);
      v29 += 8;
    }
    while (v29);
    v5 = vaddvq_s32(vaddq_s32(v27, v26));
    if (v6 != a5)
      goto LABEL_13;
  }
  return splat_dc_0(a1, a2, a4, a5, v5 >> __clz(__rbit32(a5)));
}

char *ipred_h_c_0(char *__b, uint64_t a2, uint64_t a3, int a4, int a5)
{
  char *v6;
  size_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;

  if (a5 >= 1)
  {
    v6 = __b;
    v7 = a4;
    v8 = (unsigned __int8 *)(a3 - 1);
    v9 = a5;
    do
    {
      v10 = *v8--;
      __b = (char *)memset(v6, v10, v7);
      v6 += a2;
      --v9;
    }
    while (v9);
  }
  return __b;
}

char *ipred_v_c_0(char *__dst, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  char *v7;
  const void *v8;
  size_t v9;

  if (a5 >= 1)
  {
    v5 = a5;
    v7 = __dst;
    v8 = (const void *)(a3 + 1);
    v9 = a4;
    do
    {
      __dst = (char *)memcpy(v7, v8, v9);
      v7 += a2;
      --v5;
    }
    while (v5);
  }
  return __dst;
}

uint64_t ipred_paeth_c_0(uint64_t result, uint64_t a2, unint64_t a3, int a4, int a5)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int32x4_t v8;
  uint64_t v9;
  int8x16_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t i;
  uint32x4_t v18;
  int32x4_t v19;
  uint32x4_t v20;
  uint64_t v21;
  int8x8_t v22;
  int8x8_t v23;
  uint16x8_t v24;
  int32x4_t v25;
  int32x4_t v26;
  uint32x4_t v27;
  uint32x4_t v28;
  uint32x4_t v29;
  uint32x4_t v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  uint32x4_t v40;
  uint32x4_t v41;
  uint32x4_t v42;
  uint32x4_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint32x4_t v46;
  uint32x4_t v47;
  int v48;
  unsigned int v49;
  int v50;

  if (a4 >= 1 && a5 >= 1)
  {
    v5 = 0;
    v6 = *(unsigned __int8 *)a3;
    v7 = a5;
    v8 = vdupq_n_s32(v6);
    v9 = a4 & 0xFFFFFFF0;
    v10 = vdupq_n_s8(v6);
    v11 = a4 & 0xFFFFFFF8;
    v12 = (unsigned __int8 *)(a3 + 1);
    v13 = result;
    do
    {
      v14 = *(unsigned __int8 *)(a3 + ~v5);
      v15 = v14 - v6;
      if ((int)(v14 - v6) >= 0)
        v16 = v14 - v6;
      else
        v16 = v6 - v14;
      if (a4 < 8)
      {
        i = 0;
        goto LABEL_22;
      }
      if (result + v5 * a2 + ~a3 < 0x10)
      {
        for (i = 0; i != a4; *(_BYTE *)(v13 + i++) = v48)
        {
LABEL_22:
          v48 = v12[i];
          v49 = v6 - v48;
          if ((int)(v6 - v48) < 0)
            v49 = v48 - v6;
          v50 = v6 - (v15 + v48);
          if (v50 < 0)
            v50 = v15 + v48 - v6;
          if (v16 > v50)
            LOBYTE(v48) = v6;
          if (v49 <= v50 && v49 <= v16)
            LOBYTE(v48) = v14;
        }
        goto LABEL_4;
      }
      v18 = (uint32x4_t)vdupq_n_s32(v15);
      v19 = vdupq_n_s32(v14);
      v20 = (uint32x4_t)vdupq_n_s32(v16);
      if (a4 >= 0x10)
      {
        v31 = 0;
        v32 = vdupq_n_s8(v14);
        do
        {
          v33 = *(int8x16_t *)&v12[v31];
          v34 = vmovl_u8(*(uint8x8_t *)v33.i8);
          v35 = vmovl_high_u8((uint8x16_t)v33);
          v36 = (int32x4_t)vaddw_high_u16(v18, v35);
          v37 = (int32x4_t)vaddw_u16(v18, *(uint16x4_t *)v35.i8);
          v38 = (int32x4_t)vaddw_high_u16(v18, v34);
          v39 = (int32x4_t)vaddw_u16(v18, *(uint16x4_t *)v34.i8);
          v40 = (uint32x4_t)vabdq_s32(v19, v39);
          v41 = (uint32x4_t)vabdq_s32(v19, v38);
          v42 = (uint32x4_t)vabdq_s32(v19, v37);
          v43 = (uint32x4_t)vabdq_s32(v19, v36);
          v44 = (uint32x4_t)vabdq_s32(v8, v39);
          v45 = (uint32x4_t)vabdq_s32(v8, v38);
          v46 = (uint32x4_t)vabdq_s32(v8, v37);
          v47 = (uint32x4_t)vabdq_s32(v8, v36);
          *(int8x16_t *)(v13 + v31) = vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v40, vminq_u32(v20, v44)), (int16x8_t)vcgtq_u32(v41, vminq_u32(v20, v45))), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v42, vminq_u32(v20, v46)), (int16x8_t)vcgtq_u32(v43, vminq_u32(v20, v47)))), vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v20, v44), (int16x8_t)vcgtq_u32(v20, v45)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v20, v46), (int16x8_t)vcgtq_u32(v20, v47))), v10, v33), v32);
          v31 += 16;
        }
        while (v9 != v31);
        if (v9 == a4)
          goto LABEL_4;
        v21 = a4 & 0xFFFFFFF0;
        i = v21;
        if ((a4 & 8) == 0)
          goto LABEL_22;
      }
      else
      {
        v21 = 0;
      }
      v22 = vdup_n_s8(v14);
      do
      {
        v23 = *(int8x8_t *)&v12[v21];
        v24 = vmovl_u8((uint8x8_t)v23);
        v25 = (int32x4_t)vaddw_high_u16(v18, v24);
        v26 = (int32x4_t)vaddw_u16(v18, *(uint16x4_t *)v24.i8);
        v27 = (uint32x4_t)vabdq_s32(v19, v26);
        v28 = (uint32x4_t)vabdq_s32(v19, v25);
        v29 = (uint32x4_t)vabdq_s32(v8, v26);
        v30 = (uint32x4_t)vabdq_s32(v8, v25);
        *(int8x8_t *)(v13 + v21) = vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v27, vminq_u32(v20, v29)), (int16x8_t)vcgtq_u32(v28, vminq_u32(v20, v30)))), vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v20, v29), (int16x8_t)vcgtq_u32(v20, v30))), *(int8x8_t *)v10.i8, v23), v22);
        v21 += 8;
      }
      while (v11 != v21);
      i = a4 & 0xFFFFFFF8;
      if (v11 != a4)
        goto LABEL_22;
LABEL_4:
      ++v5;
      v13 += a2;
    }
    while (v5 != v7);
  }
  return result;
}

unint64_t ipred_smooth_c_0(unint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  int8x16_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x4_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v24;
  BOOL v26;
  BOOL v27;
  uint32x4_t v28;
  uint16x8_t v29;
  uint64_t v30;
  const char *v31;
  uint8x8_t v32;
  uint16x8_t v33;
  int32x4_t v34;
  int32x4_t v35;
  uint16x8_t v36;
  int32x4_t v37;
  int32x4_t v38;
  uint32x4_t v39;
  uint32x4_t v40;
  uint64_t v41;
  const char *v42;
  uint8x8_t v43;
  uint16x8_t v44;
  int32x4_t v45;
  int32x4_t v46;
  uint8x16_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  int8x16_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint32x4_t v59;
  uint32x4_t v60;

  if ((int)a4 >= 1 && a5 >= 1)
  {
    v6 = 0;
    v7 = &dav1d_sm_weights[a4];
    v8 = &dav1d_sm_weights[a5];
    v9 = *(unsigned __int8 *)(a3 + (int)a4);
    v10 = *(unsigned __int8 *)(a3 - a5);
    v11 = a5;
    v12 = a3 + 1;
    v13 = vdupq_n_s32(v9);
    v14 = a4 & 0xFFFFFFF0;
    v15 = a4 & 0xFFFFFFF8;
    v16.i64[0] = 0x10000000100;
    v16.i64[1] = 0x10000000100;
    v17 = result;
    do
    {
      v18 = v8[v6];
      v19 = ~v6;
      v20 = (256 - v18) * v10 + 256;
      if (a4 >= 8)
      {
        v21 = 0;
        v22 = result + a4 + v6 * a2;
        v24 = v17 < a3 + 1 + (unint64_t)a4 && v12 < v22;
        v26 = v17 < (unint64_t)&dav1d_sm_weights[(int)a4 + (unint64_t)a4] && (unint64_t)v7 < v22;
        v27 = a3 + v19 >= v22 || v17 >= a3 - v6;
        if (v27 && !v24 && !v26)
        {
          v28 = (uint32x4_t)vdupq_n_s32(v20);
          v29 = (uint16x8_t)vdupq_n_s16(v18);
          if (a4 < 0x10)
          {
            v30 = 0;
LABEL_28:
            v31 = (const char *)(a3 + v19);
            v32 = (uint8x8_t)vld1_dup_s8(v31);
            v33 = vmovl_u8(v32);
            v34 = (int32x4_t)vmovl_high_u16(v33);
            v35 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v33.i8);
            do
            {
              v36 = vmovl_u8(*(uint8x8_t *)(v12 + v30));
              v5.i64[0] = *(_QWORD *)&v7[v30];
              v37 = (int32x4_t)vqtbl1q_s8(v5, (int8x16_t)xmmword_196889CD0);
              v38 = (int32x4_t)vqtbl1q_s8(v5, (int8x16_t)xmmword_196889CC0);
              v39 = (uint32x4_t)vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(v28, *(uint16x4_t *)v29.i8, *(uint16x4_t *)v36.i8), v35, v38), vsubq_s32(v16, v38), v13);
              v5 = (int8x16_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_high_u16(v28, v29, v36), v34, v37), vsubq_s32(v16, v37), v13), 9uLL);
              v40 = vshrq_n_u32(v39, 9uLL);
              *(_QWORD *)(v17 + v30) = vqtbl2q_s8(*(int8x16x2_t *)(&v5 - 1), (int8x16_t)xmmword_19689A990).u64[0];
              v30 += 8;
            }
            while (v15 != v30);
            v21 = a4 & 0xFFFFFFF8;
            if (v15 == a4)
              goto LABEL_4;
            goto LABEL_36;
          }
          v41 = 0;
          v42 = (const char *)(a3 + v19);
          v43 = (uint8x8_t)vld1_dup_s8(v42);
          v44 = vmovl_u8(v43);
          v45 = (int32x4_t)vmovl_high_u16(v44);
          v46 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v44.i8);
          do
          {
            v47 = *(uint8x16_t *)(v12 + v41);
            v48 = vmovl_high_u8(v47);
            v49 = vmovl_u8(*(uint8x8_t *)v47.i8);
            v50 = *(int8x16_t *)&v7[v41];
            v51 = (int32x4_t)vqtbl1q_s8(v50, (int8x16_t)xmmword_196889CA0);
            v52 = (int32x4_t)vqtbl1q_s8(v50, (int8x16_t)xmmword_196889CB0);
            v53 = (int32x4_t)vqtbl1q_s8(v50, (int8x16_t)xmmword_196889CD0);
            v54 = (int32x4_t)vqtbl1q_s8(v50, (int8x16_t)xmmword_196889CC0);
            v55 = (int32x4_t)vmlal_high_u16(v28, v29, v49);
            v56 = (uint32x4_t)vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(v28, *(uint16x4_t *)v29.i8, *(uint16x4_t *)v49.i8), v46, v54), vsubq_s32(v16, v54), v13);
            v57 = (uint32x4_t)vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(v28, *(uint16x4_t *)v29.i8, *(uint16x4_t *)v48.i8), v46, v52), vsubq_s32(v16, v52), v13);
            v58 = vshrq_n_u32((uint32x4_t)vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_high_u16(v28, v29, v48), v45, v51), vsubq_s32(v16, v51), v13), 9uLL);
            v59 = vshrq_n_u32(v57, 9uLL);
            v60 = vshrq_n_u32((uint32x4_t)vmlaq_s32(vmlaq_s32(v55, v45, v53), vsubq_s32(v16, v53), v13), 9uLL);
            v5 = (int8x16_t)vshrq_n_u32(v56, 9uLL);
            *(int8x16_t *)(v17 + v41) = vqtbl4q_s8(*(int8x16x4_t *)v5.i8, (int8x16_t)xmmword_19689A980);
            v41 += 16;
          }
          while (v14 != v41);
          if (v14 == a4)
            goto LABEL_4;
          v30 = a4 & 0xFFFFFFF0;
          v21 = v30;
          if ((a4 & 8) != 0)
            goto LABEL_28;
        }
      }
      else
      {
        v21 = 0;
      }
      do
      {
LABEL_36:
        *(_BYTE *)(v17 + v21) = (v20
                               + *(unsigned __int8 *)(v12 + v21) * v18
                               + *(unsigned __int8 *)(a3 + v19) * v7[v21]
                               + (256 - v7[v21]) * v9) >> 9;
        ++v21;
      }
      while (a4 != v21);
LABEL_4:
      v17 += a2;
      ++v6;
    }
    while (v6 != v11);
  }
  return result;
}

uint64_t ipred_smooth_v_c_0(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint32x4_t v15;
  uint16x8_t v16;
  uint64_t v17;
  uint16x8_t v18;
  uint64_t v19;
  uint8x16_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  int8x16x2_t v23;
  int8x16x4_t v24;

  if (a4 >= 1 && a5 >= 1)
  {
    v5 = 0;
    v6 = *(unsigned __int8 *)(a3 - a5);
    v7 = ~a3;
    v8 = a4 & 0xFFFFFFF0;
    v9 = a4 & 0xFFFFFFF8;
    v10 = a3 + 1;
    v11 = result;
    do
    {
      v12 = dav1d_sm_weights[a5 + v5];
      v13 = (256 - v12) * v6 + 128;
      if (a4 >= 8)
      {
        if ((unint64_t)(result + v5 * a2 + v7) >= 0x10)
        {
          v15 = (uint32x4_t)vdupq_n_s32(v13);
          v16 = (uint16x8_t)vdupq_n_s16(v12);
          if (a4 < 0x10)
          {
            v17 = 0;
            do
            {
LABEL_11:
              v18 = vmovl_u8(*(uint8x8_t *)(v10 + v17));
              v23.val[1] = (int8x16_t)vshrq_n_u32(vmlal_high_u16(v15, v16, v18), 8uLL);
              v23.val[0] = (int8x16_t)vshrq_n_u32(vmlal_u16(v15, *(uint16x4_t *)v16.i8, *(uint16x4_t *)v18.i8), 8uLL);
              *(_QWORD *)(v11 + v17) = vqtbl2q_s8(v23, (int8x16_t)xmmword_19689A990).u64[0];
              v17 += 8;
            }
            while (v9 != v17);
            v14 = a4 & 0xFFFFFFF8;
            if (v9 == a4)
              goto LABEL_4;
            goto LABEL_18;
          }
          v19 = 0;
          do
          {
            v20 = *(uint8x16_t *)(v10 + v19);
            v21 = vmovl_high_u8(v20);
            v22 = vmovl_u8(*(uint8x8_t *)v20.i8);
            v24.val[3] = (int8x16_t)vshrq_n_u32(vmlal_high_u16(v15, v16, v21), 8uLL);
            v24.val[2] = (int8x16_t)vshrq_n_u32(vmlal_u16(v15, *(uint16x4_t *)v16.i8, *(uint16x4_t *)v21.i8), 8uLL);
            v24.val[1] = (int8x16_t)vshrq_n_u32(vmlal_high_u16(v15, v16, v22), 8uLL);
            v24.val[0] = (int8x16_t)vshrq_n_u32(vmlal_u16(v15, *(uint16x4_t *)v16.i8, *(uint16x4_t *)v22.i8), 8uLL);
            *(int8x16_t *)(v11 + v19) = vqtbl4q_s8(v24, (int8x16_t)xmmword_19689A980);
            v19 += 16;
          }
          while (v8 != v19);
          if (v8 == a4)
            goto LABEL_4;
          v17 = a4 & 0xFFFFFFF0;
          v14 = v17;
          if ((a4 & 8) != 0)
            goto LABEL_11;
        }
        else
        {
          v14 = 0;
        }
      }
      else
      {
        v14 = 0;
      }
      do
      {
LABEL_18:
        *(_BYTE *)(v11 + v14) = (unsigned __int16)(v13 + *(unsigned __int8 *)(v10 + v14) * (_WORD)v12) >> 8;
        ++v14;
      }
      while (a4 != v14);
LABEL_4:
      v11 += a2;
      ++v5;
    }
    while (v5 != a5);
  }
  return result;
}

unint64_t ipred_smooth_h_c_0(unint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  int16x8_t v9;
  uint64_t v10;
  uint64_t v11;
  uint16x8_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  const char *v21;
  uint8x8_t v22;
  int16x8_t v23;
  uint64_t v24;
  const char *v25;
  uint8x8_t v26;
  int16x8_t v27;

  if (a4 >= 1 && a5 >= 1)
  {
    v5 = 0;
    v6 = &dav1d_sm_weights[a4];
    v7 = *(unsigned __int8 *)(a3 + a4);
    v8 = a5;
    v9 = vdupq_n_s16(v7);
    v10 = a4 & 0xFFFFFFF0;
    v11 = a4 & 0xFFFFFFF8;
    v12.i64[0] = 0x100010001000100;
    v12.i64[1] = 0x100010001000100;
    v13 = result;
    do
    {
      v14 = ~v5;
      if (a4 >= 8)
      {
        v15 = 0;
        v16 = result + a4 + v5 * a2;
        v18 = v13 < a3 - v5 && a3 + v14 < v16;
        v19 = (unint64_t)v6 >= v16
           || v13 >= (unint64_t)&dav1d_sm_weights[a4 + (unint64_t)a4];
        if (v19 && !v18)
        {
          if (a4 < 0x10)
          {
            v20 = 0;
LABEL_23:
            v21 = (const char *)(a3 + v14);
            v22 = (uint8x8_t)vld1_dup_s8(v21);
            v23 = (int16x8_t)vmovl_u8(v22);
            do
            {
              *(int8x8_t *)(v13 + v20) = vraddhn_s16((int16x8_t)vmlal_u8((uint16x8_t)vmulq_s16((int16x8_t)vsubw_u8(v12, *(uint8x8_t *)&v6[v20]), v9), (uint8x8_t)vmovn_s16(v23), *(uint8x8_t *)&v6[v20]), (int16x8_t)0);
              v20 += 8;
            }
            while (v11 != v20);
            v15 = a4 & 0xFFFFFFF8;
            if (v11 == a4)
              goto LABEL_4;
            goto LABEL_7;
          }
          v24 = 0;
          v25 = (const char *)(a3 + v14);
          v26 = (uint8x8_t)vld1_dup_s8(v25);
          v27 = (int16x8_t)vmovl_u8(v26);
          do
          {
            *(int8x16_t *)(v13 + v24) = vraddhn_high_s16(vraddhn_s16((int16x8_t)vmlal_u8((uint16x8_t)vmulq_s16((int16x8_t)vsubw_u8(v12, *(uint8x8_t *)&v6[v24]), v9), (uint8x8_t)vmovn_s16(v27), *(uint8x8_t *)&v6[v24]), (int16x8_t)0), (int16x8_t)vmlal_high_u8((uint16x8_t)vmulq_s16((int16x8_t)vsubw_high_u8(v12, *(uint8x16_t *)&v6[v24]), v9), (uint8x16_t)vuzp1q_s8((int8x16_t)v9, (int8x16_t)v27), *(uint8x16_t *)&v6[v24]), (int16x8_t)0);
            v24 += 16;
          }
          while (v10 != v24);
          if (v10 == a4)
            goto LABEL_4;
          v20 = a4 & 0xFFFFFFF0;
          v15 = v20;
          if ((a4 & 8) != 0)
            goto LABEL_23;
        }
      }
      else
      {
        v15 = 0;
      }
      do
      {
LABEL_7:
        *(_BYTE *)(v13 + v15) = (unsigned __int16)(*(unsigned __int8 *)(a3 + v14) * v6[v15] + (256 - v6[v15]) * v7 + 128) >> 8;
        ++v15;
      }
      while (a4 != v15);
LABEL_4:
      v13 += a2;
      ++v5;
    }
    while (v5 != v8);
  }
  return result;
}

uint64_t ipred_z1_c_0(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6)
{
  int v6;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint8x16_t v41;
  uint8x16_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE *v47;
  _BYTE v48[128];
  uint64_t v49;

  v6 = a5;
  v44 = result;
  v49 = *MEMORY[0x1E0C80C00];
  v9 = *(unsigned __int16 *)((char *)dav1d_dr_intra_derivative + (a6 & 0x1FE));
  v45 = a2;
  if (a6 < 0x400)
    goto LABEL_2;
  v11 = a5 + a4;
  if ((a6 & 0x1FF) >= 0x33 && (int)(0x10u >> ((a6 & 0x200) != 0)) >= v11)
  {
    if (a4 >= a5)
      v12 = a5;
    else
      v12 = a4;
    v47 = v48;
    result = upsample_edge_0((uint64_t)v48, a5 + a4, a3 + 1, -1, v12 + a4);
    v6 = a5;
    v13 = 2 * v11 - 2;
    v9 *= 2;
    v14 = 1;
    v15 = 2;
    a2 = v45;
    if (a5 < 1)
      return result;
    goto LABEL_19;
  }
  result = get_filter_strength(a5 + a4, 90 - (a6 & 0x1FF), (a6 >> 9) & 1);
  v6 = a5;
  a2 = v45;
  if ((_DWORD)result)
  {
    if (a4 >= a5)
      v16 = a5;
    else
      v16 = a4;
    v47 = v48;
    result = filter_edge_0((uint64_t)v48, v11, 0, v11, a3 + 1, -1, v16 + a4, result);
    a2 = v45;
    v6 = a5;
  }
  else
  {
LABEL_2:
    v47 = (_BYTE *)(a3 + 1);
    if (a4 >= v6)
      v10 = v6;
    else
      v10 = a4;
    v11 = v10 + a4;
  }
  v14 = 0;
  v13 = v11 - 1;
  v15 = 1;
  if (v6 < 1)
    return result;
LABEL_19:
  if (a4 >= 1)
  {
    v17 = 0;
    v18 = v13;
    v19 = a4 - 1;
    result = 64;
    v20 = v9;
    v21 = v44;
    do
    {
      v22 = v20 >> 6;
      if ((uint64_t)(v20 >> 6) <= v18)
        v23 = v18;
      else
        v23 = v20 >> 6;
      if ((uint64_t)(v20 >> 6) >= v18)
        v24 = v20 >> 6;
      else
        v24 = v22 + 1;
      v25 = v23 - v24;
      v26 = v20 & 0x3E;
      v27 = v25 / v15;
      if (v22 >= v18)
        v28 = v27;
      else
        v28 = v27 + 1;
      v29 = 64 - v26;
      if (v28 >= v19)
        v28 = a4 - 1;
      v30 = v28 + 1;
      if (v30 < 0x11)
        v31 = 1;
      else
        v31 = v14;
      if ((v31 & 1) != 0)
      {
        v32 = 0;
      }
      else
      {
        v33 = (unint64_t)&v47[v22];
        if (v22 <= v18)
          v34 = v18;
        else
          v34 = v20 >> 6;
        if (v22 >= v18)
          v35 = v20 >> 6;
        else
          v35 = v22 + 1;
        v36 = (v34 - v35) / v15;
        if (v22 < v18)
          ++v36;
        if (v36 >= v19)
          v36 = a4 - 1;
        if (v21 >= (unint64_t)&v47[v22 + 2 + v36] || v33 >= v44 + v17 * a2 + v36 + 1)
        {
          v37 = 0;
          v38 = v30 & 0xF;
          if ((v30 & 0xF) == 0)
            v38 = 16;
          v32 = v30 - v38;
          v39 = v22 + v32 * v15;
          v40 = (v23 - v22 - (v22 < v18)) / v15 + (v22 < v18);
          do
          {
            v41 = (uint8x16_t)vdupq_n_s8(v29);
            v42 = (uint8x16_t)vdupq_n_s8(v26);
            *(int8x16_t *)(v21 + v37) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v41.i8, *(uint8x8_t *)(v33 + v37)), *(uint8x8_t *)v42.i8, *(uint8x8_t *)(v33 + v37 + 1)), 6uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v41, *(uint8x16_t *)(v33 + v37)), v42, *(uint8x16_t *)(v33 + v37 + 1)), 6uLL);
            v37 += 16;
            if (v40 >= v19)
              v43 = a4 - 1;
            else
              v43 = v40;
          }
          while (v43 - v38 + 1 != v37);
          v22 = v39;
        }
        else
        {
          v32 = 0;
        }
      }
      while (v22 < v18)
      {
        *(_BYTE *)(v21 + v32++) = (v26 * v47[v22 + 1] + v29 * v47[v22] + 32) >> 6;
        v22 += v15;
        if (a4 == v32)
          goto LABEL_22;
      }
      memset((void *)(v21 + v32), v47[v18], a4 - (int)v32);
      result = 64;
      a2 = v45;
      v6 = a5;
LABEL_22:
      ++v17;
      v21 += a2;
      v20 += v9;
    }
    while ((_DWORD)v17 != v6);
  }
  return result;
}

uint64_t ipred_z2_c_0(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, int a5, unsigned int a6, int a7, int a8)
{
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  signed int v18;
  signed int v19;
  _BOOL4 v21;
  int v22;
  int v23;
  uint64_t result;
  int filter_strength;
  int v26;
  _BYTE *v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned __int8 *v33;
  int v34;
  int v37;
  int v38;
  int v39;
  _BYTE v40[65];
  _QWORD v41[10];

  v41[8] = *MEMORY[0x1E0C80C00];
  v14 = (a6 >> 9) & 1;
  v15 = (a6 & 0x1FF) - 90;
  v16 = *(unsigned __int16 *)((char *)dav1d_dr_intra_derivative + (v15 & 0xFFFFFFFE));
  v37 = 180 - (a6 & 0x1FF);
  v17 = *(unsigned __int16 *)((char *)dav1d_dr_intra_derivative + (v37 & 0xFFFFFFFE));
  v38 = v14;
  if (a6 <= 0x3FF)
  {
    v39 = 0;
LABEL_3:
    __memcpy_chk();
    goto LABEL_21;
  }
  v18 = a5 + a4;
  v19 = 0x10u >> v14;
  v21 = (a6 & 0x1FF) > 0x8C && v19 >= v18;
  v39 = v21;
  if (v15 <= 0x27 && v19 >= v18)
  {
    upsample_edge_0((uint64_t)v40, a4 + 1, (uint64_t)a3, 0, a4 + 1);
    v17 *= 2;
    v22 = 2;
    if (v39)
      goto LABEL_22;
    goto LABEL_13;
  }
  filter_strength = get_filter_strength(v18, v15, v14);
  if (!filter_strength)
    goto LABEL_3;
  filter_edge_0((uint64_t)v41, a4, 0, a7, (uint64_t)(a3 + 1), -1, a4, filter_strength);
LABEL_21:
  v22 = 1;
  if (v39)
  {
LABEL_22:
    result = upsample_edge_0((uint64_t)&v40[-2 * a5], a5 + 1, (uint64_t)&a3[-a5], 0, a5 + 1);
    v16 *= 2;
    v40[0] = *a3;
    if (a5 < 1)
      return result;
    goto LABEL_23;
  }
LABEL_13:
  if (a6 >= 0x400 && (v23 = get_filter_strength(a5 + a4, v37, v38)) != 0)
  {
    result = filter_edge_0((uint64_t)&v40[-a5], a5, a5 - a8, a5, (uint64_t)&a3[-a5], 0, a5 + 1, v23);
    v40[0] = *a3;
    if (a5 < 1)
      return result;
  }
  else
  {
    result = (uint64_t)memcpy(&v40[-a5], &a3[-a5], a5);
    v40[0] = *a3;
    if (a5 < 1)
      return result;
  }
LABEL_23:
  if (a4 >= 1)
  {
    v26 = 0;
    v27 = &v40[~v39];
    v28 = v22 << 6;
    do
    {
      v29 = 0;
      v28 -= v17;
      v30 = v28 >> 6;
      result = 64 - (v28 & 0x3Eu);
      v31 = (v26 << (v39 | 6)) - v16;
      do
      {
        if (v30 < 0)
        {
          v34 = v31 & 0x3E;
          v32 = (64 - v34) * v27[-(v31 >> 6)];
          v33 = &v27[~(v31 >> 6)];
        }
        else
        {
          v32 = result * v40[v30];
          v33 = &v40[v30 + 1];
          v34 = v28 & 0x3E;
        }
        *(_BYTE *)(a1 + v29++) = (v32 + v34 * *v33 + 32) >> 6;
        v30 += v22;
        v31 -= v16;
      }
      while (a4 != v29);
      ++v26;
      a1 += a2;
    }
    while (v26 != a5);
  }
  return result;
}

uint64_t ipred_z3_c_0(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6)
{
  uint64_t v10;
  int v11;
  unsigned int v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t v29;
  int64_t v30;
  _BOOL8 v31;
  unint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x16_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int8x8_t v53;
  int8x8_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _BYTE v59[128];
  uint64_t v60;

  v10 = result;
  v60 = *MEMORY[0x1E0C80C00];
  v11 = a6 & 0x1FF;
  v12 = dav1d_dr_intra_derivative[(270 - v11) >> 1];
  if (a6 >= 0x400)
  {
    v17 = a5 + (uint64_t)a4;
    if ((v11 - 220) >= 0xFFFFFFD8 && (int)(0x10u >> ((a6 & 0x200) != 0)) >= (int)v17)
    {
      result = upsample_edge_0((uint64_t)v59, a5 + a4, a3 - (int)v17, (a4 - a5) & ~((a4 - a5) >> 31), (int)v17 + 1);
      v15 = 2 * (int)v17 - 2;
      v13 = &v59[v15];
      v12 *= 2;
      v16 = 2;
      if (a4 < 1)
        return result;
      goto LABEL_13;
    }
    result = get_filter_strength(a5 + a4, v11 - 180, (a6 >> 9) & 1);
    if ((_DWORD)result)
    {
      result = filter_edge_0((uint64_t)v59, a5 + a4, 0, a5 + a4, a3 - v17, (a4 - a5) & ~((a4 - a5) >> 31), (int)v17 + 1, result);
      v15 = (int)v17 - 1;
      v13 = &v59[v15];
      v16 = 1;
      if (a4 < 1)
        return result;
      goto LABEL_13;
    }
  }
  v13 = (_BYTE *)(a3 - 1);
  if (a4 >= a5)
    v14 = a5;
  else
    v14 = a4;
  LODWORD(v15) = a5 + v14 - 1;
  v16 = 1;
  if (a4 >= 1)
  {
LABEL_13:
    if (a5 < 1)
      return result;
    v18 = 0;
    v19 = v12;
    v20 = a5;
    v21 = a5 - 1;
    v58 = v12;
    result = v10 + 16;
    v22 = &v13[-(int)v15];
    v23 = a4;
    do
    {
      v24 = 0;
      v25 = 0;
      v26 = v19 >> 6;
      v27 = &v13[-(v19 >> 6)];
      if ((uint64_t)(v19 >> 6) <= (int)v15)
        v28 = (int)v15;
      else
        v28 = v19 >> 6;
      v29 = v26 - v16;
      v30 = (unint64_t)~(v19 >> 6) << 32;
      v31 = (uint64_t)(v19 >> 6) < (int)v15;
      if ((uint64_t)(v19 >> 6) >= (int)v15)
        v32 = v19 >> 6;
      else
        v32 = v26 + 1;
      v33 = v10;
      v34 = (_OWORD *)result;
      while (1)
      {
        v29 += v16;
        if (v29 >= (int)v15)
          break;
        *(_BYTE *)(v10 + v24) = ((v19 & 0x3E) * v13[v30 >> 32] + (64 - (v19 & 0x3E)) * *v27 + 32) >> 6;
        v24 += a2;
        v27 -= v16;
        v30 -= v16 << 32;
        ++v25;
        v34 = (_OWORD *)((char *)v34 + 1);
        ++v33;
        if (v20 == v25)
          goto LABEL_15;
      }
      v35 = (v28 - v32) / v16 + v31;
      if (v35 >= v21)
        v35 = v21;
      if (v35 + 1 > v20)
        v36 = v35 + 1;
      else
        v36 = v20;
      v37 = v36 - v35;
      if (v37 >= 8 && a2 == 1)
      {
        v39 = v10 + v25;
        v40 = (v28 - (v26 + v31)) / v16 + v31;
        if (v40 >= v21)
          v40 = v21;
        v41 = v40 + 1 > v20 ? v40 + 1 : v20;
        if (v39 >= (unint64_t)&v13[-(int)v15 + 1] || (unint64_t)v22 >= v39 + v41 - v40)
        {
          if (v37 < 0x20)
          {
            v42 = 0;
LABEL_59:
            v49 = (v28 - (v26 + v31)) / v16;
            v50 = v49 + v31;
            if (v49 + v31 >= v21)
              v51 = v21;
            else
              v51 = v49 + v31;
            if (v51 + 1 > v20)
              v52 = v51 + 1;
            else
              v52 = v20;
            v25 += (v52 - v51) & 0xFFFFFFFFFFFFFFF8;
            v53 = vld1_dup_s8(v22);
            v54 = (int8x8_t *)(v33 + v42);
            if (v50 >= v21)
              v50 = v21;
            if (v50 + 1 > v20)
              v55 = v50 + 1;
            else
              v55 = v20;
            v56 = v42 - ((v55 - v50) & 0xFFFFFFFFFFFFFFF8);
            do
            {
              *v54++ = v53;
              v56 += 8;
            }
            while (v56);
            if (v37 == (v37 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_15;
            goto LABEL_75;
          }
          v43 = vld1q_dup_s8(v22);
          v42 = v37 & 0xFFFFFFFFFFFFFFE0;
          v44 = (v28 - (v26 + v31)) / v16 + v31;
          if (v44 >= v21)
            v44 = v21;
          if (v44 + 1 > v20)
            v45 = v44 + 1;
          else
            v45 = v20;
          v46 = (v45 - v44) & 0xFFFFFFFFFFFFFFE0;
          do
          {
            *(v34 - 1) = v43;
            *v34 = v43;
            v34 += 2;
            v46 -= 32;
          }
          while (v46);
          if (v37 == v42)
            goto LABEL_15;
          v47 = (v28 - (v26 + v31)) / v16 + v31;
          if (v47 >= v21)
            v47 = v21;
          if (v47 + 1 > v20)
            v48 = v47 + 1;
          else
            v48 = v20;
          if ((v37 & 0x18) != 0)
            goto LABEL_59;
          v25 += (v48 - v47) & 0xFFFFFFFFFFFFFFE0;
        }
      }
LABEL_75:
      v57 = a2 * v25;
      do
      {
        *(_BYTE *)(v10 + v57) = *v22;
        ++v25;
        v57 += a2;
      }
      while (v25 < v20);
LABEL_15:
      ++v18;
      v19 += v58;
      ++v10;
      ++result;
    }
    while (v18 != v23);
  }
  return result;
}

_BYTE *ipred_filter_c_0(_BYTE *result, uint64_t a2, uint64_t a3, int a4, int a5, __int16 a6)
{
  uint64_t v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  _BYTE *v41;
  unsigned __int8 *v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  int v56;
  uint64_t v57;
  _BYTE *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unsigned __int8 *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  unint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;

  if (a5 >= 1 && a4 >= 1)
  {
    v6 = 0;
    v7 = (char *)&dav1d_filter_intra_taps + 64 * (unint64_t)(a6 & 0x1FF);
    v8 = *v7;
    v9 = v7[8];
    v10 = v7[40];
    v11 = v7[1];
    v88 = a5;
    v12 = v7[9];
    v13 = v7[17];
    v14 = v7[41];
    v15 = v7[2];
    v16 = v7[10];
    v17 = v7[18];
    v18 = v7[26];
    v19 = v7[42];
    v20 = v7[3];
    v21 = v7[11];
    v22 = v7[19];
    v23 = v7[27];
    v24 = v7[35];
    v120 = v7[43];
    v119 = v7[4];
    v118 = v7[12];
    v117 = v7[44];
    v116 = v7[52];
    v115 = v7[5];
    v114 = v7[13];
    v113 = v7[21];
    v112 = v7[45];
    v111 = v7[53];
    v110 = v7[6];
    v109 = v7[14];
    v108 = v7[22];
    v107 = v7[30];
    v87 = v7[46];
    v86 = v7[54];
    v85 = v7[7];
    v105 = v23;
    v106 = v7[15];
    v84 = v7[23];
    v83 = v7[31];
    v82 = v7[39];
    v81 = v7[47];
    v80 = v7[55];
    v25 = (unsigned __int8 *)(a3 + 1);
    v103 = v22;
    v104 = v24;
    v101 = v20;
    v102 = v18;
    v99 = v17;
    v100 = v21;
    v97 = v16;
    v98 = v19;
    v95 = v11;
    v96 = v13;
    v93 = v10;
    v94 = v12;
    do
    {
      v92 = v6;
      v26 = v11;
      v27 = *(unsigned __int8 *)(a3 - v6);
      v28 = *v25;
      v29 = v25[1];
      v30 = v25[2];
      v33 = v25[3];
      v31 = v25 + 3;
      v32 = v33;
      v34 = *(unsigned __int8 *)(a3 - v6 - 1);
      v35 = *(unsigned __int8 *)(a3 - v6 - 2);
      v36 = (v28 * v9 + v27 * v8 + v34 * v10 + 8) >> 4;
      if (v36 >= 255)
        v36 = 255;
      *result = v36 & ~(v36 >> 31);
      v37 = (v28 * v12 + v27 * v26 + v29 * v13 + v34 * (int)v14 + 8) >> 4;
      if (v37 >= 255)
        v37 = 255;
      result[1] = v37 & ~(v37 >> 31);
      v38 = (v28 * v16 + v27 * (int)v15 + v29 * v17 + v30 * v18 + v34 * v19 + 8) >> 4;
      if (v38 >= 255)
        v38 = 255;
      result[2] = v38 & ~(v38 >> 31);
      v39 = v32;
      v40 = (v28 * v21 + v27 * v20 + v29 * v22 + v30 * v23 + v32 * v24 + v34 * v120 + 8) >> 4;
      if (v40 >= 255)
        v40 = 255;
      result[3] = v40 & ~(v40 >> 31);
      v41 = result;
      v42 = &result[a2];
      v43 = (v28 * v118 + v27 * v119 + v34 * v117 + v35 * v116 + 8) >> 4;
      if (v43 >= 255)
        v43 = 255;
      *v42 = v43 & ~(v43 >> 31);
      v44 = (v28 * v114 + v27 * v115 + v29 * v113 + v34 * v112 + v35 * v111 + 8) >> 4;
      if (v44 >= 255)
        v44 = 255;
      v42[1] = v44 & ~(v44 >> 31);
      v45 = v86;
      v46 = v87;
      v47 = (int)(v28 * v109 + v27 * v110 + v29 * v108 + v30 * v107 + v34 * v87 + v35 * v86 + 8) >> 4;
      if (v47 >= 255)
        v47 = 255;
      v42[2] = v47 & ~(v47 >> 31);
      v48 = v85;
      v49 = (int)(v28 * v106 + v27 * v85 + v29 * v84 + v30 * v83 + v39 * v82 + v34 * v81 + v35 * v80 + 8) >> 4;
      if (v49 >= 255)
        v49 = 255;
      v42[3] = v49 & ~(v49 >> 31);
      v50 = v15;
      v51 = v14;
      if (a4 >= 5)
      {
        v52 = 0;
        do
        {
          v53 = v45;
          v54 = v46;
          v55 = &v41[v52];
          v56 = v31[v52];
          v57 = v48;
          v58 = v41;
          v59 = v31[v52 + 1];
          v60 = v31[v52 + 2];
          v61 = v31[v52 + 3];
          v62 = v31[v52 + 4];
          v63 = v55[3];
          v64 = &v42[v52];
          v65 = v42[v52 + 3];
          v66 = (v59 * v9 + v56 * v8 + v63 * v93 + 8) >> 4;
          if (v66 >= 255)
            v66 = 255;
          v55[4] = v66 & ~(v66 >> 31);
          v67 = (v59 * v94 + v56 * v95 + v60 * v96 + v63 * (int)v51 + 8) >> 4;
          if (v67 >= 255)
            v67 = 255;
          v55[5] = v67 & ~(v67 >> 31);
          v68 = (v59 * v97 + v56 * (int)v50 + v60 * v99 + v61 * v102 + v63 * v98 + 8) >> 4;
          if (v68 >= 255)
            v68 = 255;
          v55[6] = v68 & ~(v68 >> 31);
          v69 = (v59 * v100 + v56 * v101 + v60 * v103 + v61 * v105 + v62 * v104 + v63 * v120 + 8) >> 4;
          if (v69 >= 255)
            v69 = 255;
          v55[7] = v69 & ~(v69 >> 31);
          v70 = (v59 * v118 + v56 * v119 + v63 * v117 + v65 * v116 + 8) >> 4;
          if (v70 >= 255)
            v70 = 255;
          v64[4] = v70 & ~(v70 >> 31);
          v71 = (v59 * v114 + v56 * v115 + v60 * v113 + v63 * v112 + v65 * v111 + 8) >> 4;
          if (v71 >= 255)
            v71 = 255;
          v64[5] = v71 & ~(v71 >> 31);
          v72 = v59 * v109 + v56 * v110;
          v73 = v59 * v106;
          v41 = v58;
          v48 = v57;
          v74 = v72 + v60 * v108 + v61 * v107;
          v75 = v73 + v56 * v57 + v60 * v84 + v61 * v83;
          v46 = v54;
          v45 = v53;
          v76 = v75 + v62 * v82;
          v77 = (v74 + v63 * (int)v46 + v65 * (int)v53 + 8) >> 4;
          if (v77 >= 255)
            v77 = 255;
          v64[6] = v77 & ~(v77 >> 31);
          v78 = (v76 + v63 * v81 + v65 * v80 + 8) >> 4;
          if (v78 >= 255)
            v78 = 255;
          v64[7] = v78 & ~(v78 >> 31);
          v79 = v52 + 8;
          v52 += 4;
        }
        while (v79 < a4);
      }
      v6 = v92 + 2;
      v25 = v42;
      v10 = v93;
      v12 = v94;
      v11 = v95;
      v13 = v96;
      v14 = v51;
      v15 = v50;
      v16 = v97;
      v19 = v98;
      v17 = v99;
      v21 = v100;
      v20 = v101;
      v18 = v102;
      v22 = v103;
      v24 = v104;
      result = &v41[2 * a2];
      v23 = v105;
    }
    while (v92 + 2 < v88);
  }
  return result;
}

unint64_t cfl_ac_420_c_0(unint64_t a1, unint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, signed int a7)
{
  return cfl_ac_c_0(a1, a2, a3, a4, a5, a6, a7, 1, 1);
}

unint64_t cfl_ac_422_c_0(unint64_t a1, unint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, signed int a7)
{
  return cfl_ac_c_0(a1, a2, a3, a4, a5, a6, a7, 1, 0);
}

unint64_t cfl_ac_444_c_0(unint64_t a1, unint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, signed int a7)
{
  return cfl_ac_c_0(a1, a2, a3, a4, a5, a6, a7, 0, 0);
}

uint64_t ipred_cfl_c_0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, int16x8_t *a6, unsigned int a7)
{
  unsigned int v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  uint8x8_t *v12;
  uint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint8x16_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint64_t v25;
  int32x4_t v26;
  int32x4_t v27;
  uint8x8_t *v28;
  uint64_t v29;
  uint8x8_t v30;
  uint16x8_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int8x16_t *v38;
  uint64_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int8x16_t v46;
  uint8x16_t v47;
  int8x16_t v48;
  uint8x16_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint64_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int8x8_t *v57;
  uint64_t v58;
  int8x8_t v59;
  uint16x8_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  int v66;
  unsigned int v67;
  unsigned int v68;

  v8 = (int)(a5 + a4) >> 1;
  if ((int)a4 >= 1)
  {
    if (a4 < 8)
    {
      v9 = 0;
      goto LABEL_13;
    }
    if (a4 >= 0x20)
    {
      v9 = a4 & 0xFFFFFFE0;
      v10 = 0uLL;
      v11 = (int32x4_t)((int)(a5 + a4) >> 1);
      v12 = (uint8x8_t *)(a3 + 17);
      v13 = v9;
      v14 = 0uLL;
      v15 = 0uLL;
      v16 = 0uLL;
      v17 = 0uLL;
      v18 = 0uLL;
      v19 = 0uLL;
      do
      {
        v20 = *(uint8x16_t *)v12[-2].i8;
        v21 = vmovl_u8(*(uint8x8_t *)v20.i8);
        v22 = vmovl_high_u8(v20);
        v23 = vmovl_u8(*v12);
        v24 = vmovl_high_u8(*(uint8x16_t *)v12->i8);
        v15 = (int32x4_t)vaddw_high_u16((uint32x4_t)v15, v22);
        v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v22.i8);
        v10 = (int32x4_t)vaddw_high_u16((uint32x4_t)v10, v21);
        v11 = (int32x4_t)vaddw_u16((uint32x4_t)v11, *(uint16x4_t *)v21.i8);
        v19 = (int32x4_t)vaddw_high_u16((uint32x4_t)v19, v24);
        v18 = (int32x4_t)vaddw_u16((uint32x4_t)v18, *(uint16x4_t *)v24.i8);
        v17 = (int32x4_t)vaddw_high_u16((uint32x4_t)v17, v23);
        v16 = (int32x4_t)vaddw_u16((uint32x4_t)v16, *(uint16x4_t *)v23.i8);
        v12 += 4;
        v13 -= 32;
      }
      while (v13);
      v8 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v16, v11), vaddq_s32(v18, v14)), vaddq_s32(vaddq_s32(v17, v10), vaddq_s32(v19, v15))));
      if (v9 == a4)
        goto LABEL_15;
      if ((a4 & 0x18) == 0)
      {
LABEL_13:
        v32 = a4 - v9;
        v33 = (unsigned __int8 *)(v9 + a3 + 1);
        do
        {
          v34 = *v33++;
          v8 += v34;
          --v32;
        }
        while (v32);
        goto LABEL_15;
      }
    }
    else
    {
      v9 = 0;
    }
    v25 = v9;
    v9 = a4 & 0xFFFFFFF8;
    v26 = 0uLL;
    v27 = (int32x4_t)v8;
    v28 = (uint8x8_t *)(v25 + a3 + 1);
    v29 = v25 - v9;
    do
    {
      v30 = *v28++;
      v31 = vmovl_u8(v30);
      v26 = (int32x4_t)vaddw_high_u16((uint32x4_t)v26, v31);
      v27 = (int32x4_t)vaddw_u16((uint32x4_t)v27, *(uint16x4_t *)v31.i8);
      v29 += 8;
    }
    while (v29);
    v8 = vaddvq_s32(vaddq_s32(v27, v26));
    if (v9 != a4)
      goto LABEL_13;
  }
LABEL_15:
  if (a5 >= 1)
  {
    if (a5 < 8)
    {
      v35 = 0;
LABEL_27:
      v61 = (unsigned __int8 *)(~v35 + a3);
      v62 = a5 - v35;
      do
      {
        v63 = *v61--;
        v8 += v63;
        --v62;
      }
      while (v62);
      goto LABEL_29;
    }
    if (a5 >= 0x20)
    {
      v35 = a5 & 0xFFFFFFE0;
      v36 = 0uLL;
      v37 = (int32x4_t)v8;
      v38 = (int8x16_t *)(a3 - 16);
      v39 = v35;
      v40 = 0uLL;
      v41 = 0uLL;
      v42 = 0uLL;
      v43 = 0uLL;
      v44 = 0uLL;
      v45 = 0uLL;
      do
      {
        v46 = vrev64q_s8(*v38);
        v47 = (uint8x16_t)vextq_s8(v46, v46, 8uLL);
        v48 = vrev64q_s8(v38[-1]);
        v49 = (uint8x16_t)vextq_s8(v48, v48, 8uLL);
        v50 = vmovl_u8(*(uint8x8_t *)v47.i8);
        v51 = vmovl_high_u8(v47);
        v52 = vmovl_u8(*(uint8x8_t *)v49.i8);
        v53 = vmovl_high_u8(v49);
        v41 = (int32x4_t)vaddw_high_u16((uint32x4_t)v41, v51);
        v40 = (int32x4_t)vaddw_u16((uint32x4_t)v40, *(uint16x4_t *)v51.i8);
        v36 = (int32x4_t)vaddw_high_u16((uint32x4_t)v36, v50);
        v37 = (int32x4_t)vaddw_u16((uint32x4_t)v37, *(uint16x4_t *)v50.i8);
        v45 = (int32x4_t)vaddw_high_u16((uint32x4_t)v45, v53);
        v44 = (int32x4_t)vaddw_u16((uint32x4_t)v44, *(uint16x4_t *)v53.i8);
        v43 = (int32x4_t)vaddw_high_u16((uint32x4_t)v43, v52);
        v42 = (int32x4_t)vaddw_u16((uint32x4_t)v42, *(uint16x4_t *)v52.i8);
        v38 -= 2;
        v39 -= 32;
      }
      while (v39);
      v8 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v42, v37), vaddq_s32(v44, v40)), vaddq_s32(vaddq_s32(v43, v36), vaddq_s32(v45, v41))));
      if (v35 == a5)
        goto LABEL_29;
      if ((a5 & 0x18) == 0)
        goto LABEL_27;
    }
    else
    {
      v35 = 0;
    }
    v54 = v35;
    v35 = a5 & 0xFFFFFFF8;
    v55 = 0uLL;
    v56 = (int32x4_t)v8;
    v57 = (int8x8_t *)(a3 - v54 - 8);
    v58 = v54 - v35;
    do
    {
      v59 = *v57--;
      v60 = vmovl_u8((uint8x8_t)vrev64_s8(v59));
      v55 = (int32x4_t)vaddw_high_u16((uint32x4_t)v55, v60);
      v56 = (int32x4_t)vaddw_u16((uint32x4_t)v56, *(uint16x4_t *)v60.i8);
      v58 += 8;
    }
    while (v58);
    v8 = vaddvq_s32(vaddq_s32(v56, v55));
    if (v35 == a5)
      goto LABEL_29;
    goto LABEL_27;
  }
LABEL_29:
  v64 = v8 >> __clz(__rbit32(a5 + a4));
  if ((int)(2 * a4) < a5 || 2 * a5 < (int)a4)
    v66 = 13108;
  else
    v66 = 21846;
  v67 = (v64 * v66) >> 16;
  if (a4 == a5)
    v68 = v64;
  else
    v68 = v67;
  return cfl_pred_0(a1, a2, a4, a5, v68, a6, a7);
}

uint64_t ipred_cfl_128_c_0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, int16x8_t *a6, unsigned int a7)
{
  return cfl_pred_0(a1, a2, a4, a5, 0x80u, a6, a7);
}

uint64_t ipred_cfl_top_c_0(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4, int a5, int16x8_t *a6, unsigned int a7)
{
  unsigned int v7;
  uint64_t v8;
  int32x4_t v9;
  int32x4_t v10;
  uint8x8_t *v11;
  uint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  uint8x16_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint64_t v24;
  int32x4_t v25;
  int32x4_t v26;
  uint8x8_t *v27;
  uint64_t v28;
  uint8x8_t v29;
  uint16x8_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;

  v7 = a4 >> 1;
  if (a4 >= 1)
  {
    if (a4 < 8)
    {
      v8 = 0;
      goto LABEL_13;
    }
    if (a4 >= 0x20)
    {
      v8 = a4 & 0xFFFFFFE0;
      v9 = 0uLL;
      v10 = (int32x4_t)(a4 >> 1);
      v11 = (uint8x8_t *)(a3 + 17);
      v12 = v8;
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = 0uLL;
      v16 = 0uLL;
      v17 = 0uLL;
      v18 = 0uLL;
      do
      {
        v19 = *(uint8x16_t *)v11[-2].i8;
        v20 = vmovl_u8(*(uint8x8_t *)v19.i8);
        v21 = vmovl_high_u8(v19);
        v22 = vmovl_u8(*v11);
        v23 = vmovl_high_u8(*(uint8x16_t *)v11->i8);
        v14 = (int32x4_t)vaddw_high_u16((uint32x4_t)v14, v21);
        v13 = (int32x4_t)vaddw_u16((uint32x4_t)v13, *(uint16x4_t *)v21.i8);
        v9 = (int32x4_t)vaddw_high_u16((uint32x4_t)v9, v20);
        v10 = (int32x4_t)vaddw_u16((uint32x4_t)v10, *(uint16x4_t *)v20.i8);
        v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v23);
        v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v23.i8);
        v16 = (int32x4_t)vaddw_high_u16((uint32x4_t)v16, v22);
        v15 = (int32x4_t)vaddw_u16((uint32x4_t)v15, *(uint16x4_t *)v22.i8);
        v11 += 4;
        v12 -= 32;
      }
      while (v12);
      v7 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v15, v10), vaddq_s32(v17, v13)), vaddq_s32(vaddq_s32(v16, v9), vaddq_s32(v18, v14))));
      if (v8 == a4)
        return cfl_pred_0(a1, a2, a4, a5, v7 >> __clz(__rbit32(a4)), a6, a7);
      if ((a4 & 0x18) == 0)
      {
LABEL_13:
        v31 = a4 - v8;
        v32 = (unsigned __int8 *)(v8 + a3 + 1);
        do
        {
          v33 = *v32++;
          v7 += v33;
          --v31;
        }
        while (v31);
        return cfl_pred_0(a1, a2, a4, a5, v7 >> __clz(__rbit32(a4)), a6, a7);
      }
    }
    else
    {
      v8 = 0;
    }
    v24 = v8;
    v8 = a4 & 0xFFFFFFF8;
    v25 = 0uLL;
    v26 = (int32x4_t)v7;
    v27 = (uint8x8_t *)(v24 + a3 + 1);
    v28 = v24 - v8;
    do
    {
      v29 = *v27++;
      v30 = vmovl_u8(v29);
      v25 = (int32x4_t)vaddw_high_u16((uint32x4_t)v25, v30);
      v26 = (int32x4_t)vaddw_u16((uint32x4_t)v26, *(uint16x4_t *)v30.i8);
      v28 += 8;
    }
    while (v28);
    v7 = vaddvq_s32(vaddq_s32(v26, v25));
    if (v8 != a4)
      goto LABEL_13;
  }
  return cfl_pred_0(a1, a2, a4, a5, v7 >> __clz(__rbit32(a4)), a6, a7);
}

uint64_t ipred_cfl_left_c_0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, int16x8_t *a6, unsigned int a7)
{
  unsigned int v7;
  uint64_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int8x16_t *v11;
  uint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int8x16_t v19;
  uint8x16_t v20;
  int8x16_t v21;
  uint8x16_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint64_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int8x8_t *v30;
  uint64_t v31;
  int8x8_t v32;
  uint16x8_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int v36;

  v7 = a5 >> 1;
  if (a5 >= 1)
  {
    if (a5 < 8)
    {
      v8 = 0;
      goto LABEL_13;
    }
    if (a5 >= 0x20)
    {
      v8 = a5 & 0xFFFFFFE0;
      v9 = 0uLL;
      v10 = (int32x4_t)(a5 >> 1);
      v11 = (int8x16_t *)(a3 - 16);
      v12 = v8;
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = 0uLL;
      v16 = 0uLL;
      v17 = 0uLL;
      v18 = 0uLL;
      do
      {
        v19 = vrev64q_s8(*v11);
        v20 = (uint8x16_t)vextq_s8(v19, v19, 8uLL);
        v21 = vrev64q_s8(v11[-1]);
        v22 = (uint8x16_t)vextq_s8(v21, v21, 8uLL);
        v23 = vmovl_u8(*(uint8x8_t *)v20.i8);
        v24 = vmovl_high_u8(v20);
        v25 = vmovl_u8(*(uint8x8_t *)v22.i8);
        v26 = vmovl_high_u8(v22);
        v14 = (int32x4_t)vaddw_high_u16((uint32x4_t)v14, v24);
        v13 = (int32x4_t)vaddw_u16((uint32x4_t)v13, *(uint16x4_t *)v24.i8);
        v9 = (int32x4_t)vaddw_high_u16((uint32x4_t)v9, v23);
        v10 = (int32x4_t)vaddw_u16((uint32x4_t)v10, *(uint16x4_t *)v23.i8);
        v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
        v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
        v16 = (int32x4_t)vaddw_high_u16((uint32x4_t)v16, v25);
        v15 = (int32x4_t)vaddw_u16((uint32x4_t)v15, *(uint16x4_t *)v25.i8);
        v11 -= 2;
        v12 -= 32;
      }
      while (v12);
      v7 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v15, v10), vaddq_s32(v17, v13)), vaddq_s32(vaddq_s32(v16, v9), vaddq_s32(v18, v14))));
      if (v8 == a5)
        return cfl_pred_0(a1, a2, a4, a5, v7 >> __clz(__rbit32(a5)), a6, a7);
      if ((a5 & 0x18) == 0)
      {
LABEL_13:
        v34 = (unsigned __int8 *)(~v8 + a3);
        v35 = a5 - v8;
        do
        {
          v36 = *v34--;
          v7 += v36;
          --v35;
        }
        while (v35);
        return cfl_pred_0(a1, a2, a4, a5, v7 >> __clz(__rbit32(a5)), a6, a7);
      }
    }
    else
    {
      v8 = 0;
    }
    v27 = v8;
    v8 = a5 & 0xFFFFFFF8;
    v28 = 0uLL;
    v29 = (int32x4_t)v7;
    v30 = (int8x8_t *)(a3 - v27 - 8);
    v31 = v27 - v8;
    do
    {
      v32 = *v30--;
      v33 = vmovl_u8((uint8x8_t)vrev64_s8(v32));
      v28 = (int32x4_t)vaddw_high_u16((uint32x4_t)v28, v33);
      v29 = (int32x4_t)vaddw_u16((uint32x4_t)v29, *(uint16x4_t *)v33.i8);
      v31 += 8;
    }
    while (v31);
    v7 = vaddvq_s32(vaddq_s32(v29, v28));
    if (v8 != a5)
      goto LABEL_13;
  }
  return cfl_pred_0(a1, a2, a4, a5, v7 >> __clz(__rbit32(a5)), a6, a7);
}

uint64_t pal_pred_c_0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int i;
  uint64_t j;

  if (a6 >= 1 && a5 >= 1)
  {
    for (i = 0; i != a6; ++i)
    {
      for (j = 0; j != a5; ++j)
        *(_BYTE *)(result + j) = *(_WORD *)(a3 + 2 * *(unsigned __int8 *)(a4 + j));
      a4 += a5;
      result += a2;
    }
  }
  return result;
}

_DWORD *splat_dc_0(_DWORD *result, uint64_t a2, int a3, int a4, int a5)
{
  int i;
  int j;

  if (a3 < 5)
  {
    if (a3 >= 1 && a4 >= 1)
    {
      do
      {
        *result = 16843009 * a5;
        result = (_DWORD *)((char *)result + a2);
        --a4;
      }
      while (a4);
    }
  }
  else if (a4 >= 1)
  {
    for (i = 0; i != a4; ++i)
    {
      for (j = 0; j < a3; j += 8)
        *(_QWORD *)&result[j / 4u] = 0x101010101010101 * a5;
      result = (_DWORD *)((char *)result + a2);
    }
  }
  return result;
}

uint64_t upsample_edge_0(uint64_t result, int a2, uint64_t a3, signed int a4, int a5)
{
  signed int v5;
  int64_t v6;
  uint64_t v7;
  int64x2_t v8;
  int32x2_t v9;
  int8x8_t v10;
  _BYTE *v11;
  int v12;
  signed int v13;
  int64_t v14;
  int8x8_t v15;
  int v16;

  v5 = a5 - 1;
  if (a2 < 2)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v6 = 0;
    v7 = (a2 - 1);
    v8 = vaddq_s64(vdupq_n_s64(a4), (int64x2_t)xmmword_19689AD80);
    v9 = vdup_n_s32(v5);
    v10 = (int8x8_t)vdup_n_s32(a4);
    v11 = (_BYTE *)(result + 1);
    do
    {
      if ((int)v6 >= v5)
        v12 = a5 - 1;
      else
        v12 = v6;
      v13 = v6 - 1;
      if ((int)v6 - 1 >= v5)
        v13 = a5 - 1;
      if (v6 < a4)
        v12 = a4;
      *(v11 - 1) = *(_BYTE *)(a3 + v12);
      if (v6 <= a4)
        v13 = a4;
      v14 = v6 + 1;
      v15 = vbsl_s8((int8x8_t)vmovn_s64(vcgtq_s64(vdupq_n_s64(v6), v8)), (int8x8_t)vmin_s32(vadd_s32(vdup_n_s32(v6), (int32x2_t)0x200000001), v9), v10);
      v16 = (9 * (*(unsigned __int8 *)(a3 + v15.i32[0]) + *(unsigned __int8 *)(a3 + v12))
           - *(unsigned __int8 *)(a3 + v13)
           - *(unsigned __int8 *)(a3 + v15.i32[1])
           + 8) >> 4;
      if (v16 >= 255)
        v16 = 255;
      *v11 = v16 & ~(v16 >> 31);
      v11 += 2;
      v6 = v14;
    }
    while (v7 != v14);
  }
  if ((int)v7 < v5)
    v5 = v7;
  if ((int)v7 < a4)
    v5 = a4;
  *(_BYTE *)(result + 2 * v7) = *(_BYTE *)(a3 + v5);
  return result;
}

uint64_t filter_edge_0(uint64_t result, int a2, int a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v8;
  uint64_t i;
  int v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;

  if (a2 >= a3)
    v8 = a3;
  else
    v8 = a2;
  if ((int)v8 < 1)
  {
    LODWORD(v8) = 0;
    if (a4 >= a2)
      v11 = a2;
    else
      v11 = a4;
    if ((int)v11 <= 0)
      goto LABEL_16;
  }
  else
  {
    for (i = 0; i != v8; ++i)
    {
      if ((int)i >= a7 - 1)
        v10 = a7 - 1;
      else
        v10 = i;
      if (i < a6)
        v10 = a6;
      *(_BYTE *)(result + i) = *(_BYTE *)(a5 + v10);
    }
    if (a4 >= a2)
      v11 = a2;
    else
      v11 = a4;
    if ((int)v8 >= (int)v11)
    {
LABEL_16:
      if ((int)v8 >= a2)
        return result;
      goto LABEL_51;
    }
  }
  v12 = a7 - 1;
  v8 = v8;
  v13 = (unsigned __int8 *)&filter_edge_kernel_0 + 5 * (a8 - 1);
  v14 = *v13;
  v15 = v13[1];
  v16 = v13[2];
  v17 = v13[3];
  v18 = v13[4];
  do
  {
    if ((int)v8 - 2 >= v12)
      v19 = a7 - 1;
    else
      v19 = v8 - 2;
    if (v8 - 2 >= a6)
      v20 = v19;
    else
      v20 = a6;
    v21 = *(unsigned __int8 *)(a5 + v20);
    v22 = v8 - 1;
    if ((int)v8 - 1 >= v12)
      v22 = a7 - 1;
    if ((int)v8 >= v12)
      v23 = a7 - 1;
    else
      v23 = v8;
    if (v8 <= a6)
      v22 = a6;
    v24 = *(unsigned __int8 *)(a5 + v22);
    if (v8 < a6)
      v23 = a6;
    v25 = *(unsigned __int8 *)(a5 + v23);
    v26 = v8 + 1;
    if ((int)v8 + 1 >= v12)
      v27 = a7 - 1;
    else
      v27 = v8 + 1;
    if (v26 < a6)
      v27 = a6;
    v28 = *(unsigned __int8 *)(a5 + v27);
    v29 = v24 * v15;
    if ((int)v8 + 2 >= v12)
      v30 = a7 - 1;
    else
      v30 = v8 + 2;
    if (v8 + 2 >= a6)
      v31 = v30;
    else
      v31 = a6;
    *(_BYTE *)(result + v8++) = (v29
                               + v21 * v14
                               + v25 * v16
                               + v28 * v17
                               + *(unsigned __int8 *)(a5 + v31) * v18
                               + 8) >> 4;
  }
  while (v11 != v26);
  LODWORD(v8) = v11;
  if ((int)v11 < a2)
  {
LABEL_51:
    v32 = v8;
    do
    {
      if ((int)v32 >= a7 - 1)
        v33 = a7 - 1;
      else
        v33 = v32;
      if ((int)v32 < a6)
        v33 = a6;
      *(_BYTE *)(result + v32++) = *(_BYTE *)(a5 + v33);
    }
    while (a2 != v32);
  }
  return result;
}

unint64_t cfl_ac_c_0(unint64_t result, unint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, signed int a7, int a8, int a9)
{
  uint16x8_t *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint16x8_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  __int8 *v25;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  const char *v37;
  uint16x8_t *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  const char *v42;
  uint8x8_t v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  uint16x8_t *v48;
  uint64_t v49;
  unint64_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int v57;
  unsigned int v58;
  int16x8_t v59;
  uint64_t v60;
  unint64_t v61;
  int16x8_t *v62;
  int16x8_t v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  int16x8_t v68;
  int16x8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint16x8_t v72;
  uint16x8_t *v73;
  unint64_t v74;
  uint64_t v75;
  __int8 *v76;
  BOOL v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint16x8_t *v86;
  uint8x16_t *v87;
  uint8x16_t v88;
  uint64_t v89;
  uint8x16_t v90;
  uint16x8_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint16x8_t v96;
  unint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  const char *v108;
  uint16x8_t *v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  uint16x8_t v114;
  uint16x8_t *v115;
  unint64_t v116;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int16 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint16x8_t *v125;
  uint8x16_t *v126;
  uint8x16_t v127;
  uint16x8_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint16x8_t v132;
  int8x8x2_t v133;
  int8x16x2_t v134;
  int8x16x2_t v135;
  int8x16x2_t v136;
  int8x16x2_t v137;

  v11 = (uint16x8_t *)result;
  v12 = a7 - 4 * a5;
  if (v12 < 1)
  {
    v12 = 0;
    v22 = (char *)result;
  }
  else
  {
    v13 = (a6 - 4 * a4);
    if (a8)
      v14 = 1;
    else
      v14 = 2;
    if (a8)
      v15 = 2;
    else
      v15 = 3;
    if ((int)v13 >= 1)
    {
      v16 = a3 << a9;
      v17 = 2 * v13;
      if (a8)
      {
        v18 = 2 * (int)a6;
        if (a9)
        {
          v19 = 0;
          result = (v13 - 8);
          v20 = (uint16x8_t)vdupq_n_s16(v14);
          v21 = a3 + a2 + 1;
          v22 = (char *)v11;
          v23 = a2;
          while (1)
          {
            if (result >= 0x3FFFFFF9)
            {
              v24 = 0;
            }
            else
            {
              v24 = 0;
              v25 = &v11->i8[v17 + v18 * v19];
              v27 = (unint64_t)v22 < a2 + v17 + v16 * v19 && v23 < (unint64_t)v25;
              v28 = a2 + a3 + v16 * v19 >= (unint64_t)v25 || (unint64_t)v22 >= a2 + v17 + a3 + v16 * v19;
              if (v28 && !v27)
              {
                if (v13 < 0x10)
                {
                  v29 = 0;
LABEL_39:
                  v39 = 2 * v29;
                  v40 = v29 - (v13 & 0xFFFFFFF8);
                  do
                  {
                    v41 = (const char *)(v23 + (int)v39);
                    v132 = (uint16x8_t)vld2_s8(v41);
                    v132 = vaddl_u8((uint8x8_t)v132.u64[1], *(uint8x8_t *)v132.i8);
                    v42 = (const char *)(v23 + a3 + (int)v39);
                    *(int8x8x2_t *)((char *)&v132 + 8) = vld2_s8(v42);
                    *(uint16x8_t *)&v22[v39] = vshlq_u16(vaddw_u8(vaddw_u8(v132, (uint8x8_t)v132.u64[1]), v43), v20);
                    v39 += 16;
                    v40 += 8;
                  }
                  while (v40);
                  v24 = v13 & 0x7FFFFFF8;
                  if ((v13 & 0xFFFFFFF8) == v13)
                    goto LABEL_31;
                  goto LABEL_29;
                }
                v34 = 0;
                v35 = v13 & 0xFFFFFFF0;
                do
                {
                  v36 = (const char *)(v23 + (int)v34);
                  v134 = vld2q_s8(v36);
                  v37 = (const char *)(v23 + a3 + (int)v34);
                  v137 = vld2q_s8(v37);
                  v38 = (uint16x8_t *)&v22[v34];
                  *v38 = vshlq_u16(vaddw_u8(vaddw_u8(vaddl_u8(*(uint8x8_t *)v134.val[1].i8, *(uint8x8_t *)v134.val[0].i8), *(uint8x8_t *)v137.val[0].i8), *(uint8x8_t *)v137.val[1].i8), v20);
                  v38[1] = vshlq_u16(vaddw_high_u8(vaddw_high_u8(vaddl_high_u8((uint8x16_t)v134.val[1], (uint8x16_t)v134.val[0]), (uint8x16_t)v137.val[0]), (uint8x16_t)v137.val[1]), v20);
                  v34 += 32;
                  v35 -= 16;
                }
                while (v35);
                if ((v13 & 0xFFFFFFF0) == v13)
                  goto LABEL_31;
                v29 = v13 & 0x7FFFFFF0;
                v24 = v13 & 0xFFFFFFF0;
                if ((((_BYTE)a6 - 4 * (_BYTE)a4) & 8) != 0)
                  goto LABEL_39;
              }
            }
LABEL_29:
            v30 = v13 - v24;
            v31 = 2 * v24;
            do
            {
              *(_WORD *)&v22[v31] = (*(unsigned __int8 *)(v23 + v31 + 1)
                                   + *(unsigned __int8 *)(v23 + (int)v31)
                                   + *(unsigned __int8 *)(v23 + (int)v31 + a3)
                                   + *(unsigned __int8 *)(v21 + v31)) << v14;
              v31 += 2;
              --v30;
            }
            while (v30);
LABEL_31:
            if (a4)
            {
              v32 = *(__int16 *)((char *)&v11->i16[(unint64_t)v17 / 2 - 1] + v18 * v19);
              v33 = (a6 - 4 * a4);
              do
                *(_WORD *)&v22[2 * v33++] = v32;
              while (v33 < (int)a6);
            }
            v22 += v18;
            v23 += v16;
            ++v19;
            v21 += v16;
            if ((_DWORD)v19 == v12)
              goto LABEL_44;
          }
        }
        v95 = 0;
        result = (v13 - 8);
        v96 = (uint16x8_t)vdupq_n_s16(v15);
        v22 = (char *)v11;
        v97 = a2;
        while (1)
        {
          if (result < 0x3FFFFFF9
            && ((unint64_t)v22 < a2 + v17 + v16 * v95
              ? (v98 = v97 >= (unint64_t)v11->u64 + v17 + v18 * v95)
              : (v98 = 1),
                v98))
          {
            if (v13 < 0x20)
            {
              v99 = 0;
LABEL_131:
              v110 = 2 * v99;
              v111 = v99 - (v13 & 0xFFFFFFF8);
              do
              {
                v112 = (const char *)(v97 + (int)v110);
                v133 = vld2_s8(v112);
                *(uint16x8_t *)&v22[v110] = vshlq_u16(vaddl_u8((uint8x8_t)v133.val[1], (uint8x8_t)v133.val[0]), v96);
                v110 += 16;
                v111 += 8;
              }
              while (v111);
              v100 = v13 & 0x7FFFFFF8;
              if ((v13 & 0xFFFFFFF8) == v13)
                goto LABEL_123;
              goto LABEL_121;
            }
            v105 = 0;
            v106 = v13 & 0xFFFFFFE0;
            do
            {
              v107 = (const char *)(v97 + (int)v105);
              v135 = vld2q_s8(v107);
              v108 = (const char *)(v97 + (int)v105 + 32);
              v136 = vld2q_s8(v108);
              v109 = (uint16x8_t *)&v22[v105];
              *v109 = vshlq_u16(vaddl_u8(*(uint8x8_t *)v135.val[1].i8, *(uint8x8_t *)v135.val[0].i8), v96);
              v109[1] = vshlq_u16(vaddl_high_u8((uint8x16_t)v135.val[1], (uint8x16_t)v135.val[0]), v96);
              v109[2] = vshlq_u16(vaddl_u8(*(uint8x8_t *)v136.val[1].i8, *(uint8x8_t *)v136.val[0].i8), v96);
              v109[3] = vshlq_u16(vaddl_high_u8((uint8x16_t)v136.val[1], (uint8x16_t)v136.val[0]), v96);
              v105 += 64;
              v106 -= 32;
            }
            while (v106);
            if ((v13 & 0xFFFFFFE0) == v13)
              goto LABEL_123;
            v99 = v13 & 0x7FFFFFE0;
            v100 = v13 & 0xFFFFFFE0;
            if ((((_BYTE)a6 - 4 * (_BYTE)a4) & 0x18) != 0)
              goto LABEL_131;
          }
          else
          {
            v100 = 0;
          }
LABEL_121:
          v101 = v13 - v100;
          v102 = 2 * v100;
          do
          {
            *(_WORD *)&v22[v102] = (*(unsigned __int8 *)(v97 + v102 + 1) + *(unsigned __int8 *)(v97 + (int)v102)) << v15;
            v102 += 2;
            --v101;
          }
          while (v101);
LABEL_123:
          if (a4)
          {
            v103 = *(__int16 *)((char *)&v11->i16[(unint64_t)v17 / 2 - 1] + v18 * v95);
            v104 = (a6 - 4 * a4);
            do
              *(_WORD *)&v22[2 * v104++] = v103;
            while (v104 < (int)a6);
          }
          v22 += v18;
          v97 += v16;
          if ((_DWORD)++v95 == v12)
            goto LABEL_44;
        }
      }
      v70 = 2 * (int)a6;
      if (a9)
      {
        v71 = 0;
        result = (v13 - 8);
        v72 = (uint16x8_t)vdupq_n_s16(v14);
        v73 = v11 + 2;
        v22 = (char *)v11;
        v74 = a2;
        while (1)
        {
          if (result >= 0x7FFFFFF9)
          {
            v75 = 0;
          }
          else
          {
            v75 = 0;
            v76 = &v11->i8[v17 + v70 * v71];
            v78 = (unint64_t)v22 < a2 + v13 + v16 * v71 && v74 < (unint64_t)v76;
            v79 = a2 + a3 + v16 * v71 >= (unint64_t)v76 || (unint64_t)v22 >= a2 + v13 + a3 + v16 * v71;
            if (v79 && !v78)
            {
              if (v13 < 0x20)
              {
                v80 = 0;
LABEL_106:
                v92 = v80 << 32;
                v93 = 2 * v80;
                v94 = v80 - (v13 & 0xFFFFFFF8);
                do
                {
                  *(uint16x8_t *)&v22[v93] = vshlq_u16(vaddl_u8(*(uint8x8_t *)(v74 + (v92 >> 32) + a3), *(uint8x8_t *)(v74 + (v92 >> 32))), v72);
                  v92 += 0x800000000;
                  v93 += 16;
                  v94 += 8;
                }
                while (v94);
                v75 = v13 & 0xFFFFFFF8;
                if (v75 == v13)
                  goto LABEL_98;
                goto LABEL_96;
              }
              v84 = 0;
              v85 = v13 & 0xFFFFFFE0;
              v86 = v73;
              do
              {
                v87 = (uint8x16_t *)(v74 + (v84 >> 32));
                v88 = v87[1];
                v89 = v74 + a3 + (v84 >> 32);
                v90 = *(uint8x16_t *)(v89 + 16);
                v91 = vaddl_high_u8(*(uint8x16_t *)v89, *v87);
                v86[-2] = vshlq_u16(vaddl_u8(*(uint8x8_t *)v89, *(uint8x8_t *)v87->i8), v72);
                v86[-1] = vshlq_u16(v91, v72);
                *v86 = vshlq_u16(vaddl_u8(*(uint8x8_t *)v90.i8, *(uint8x8_t *)v88.i8), v72);
                v86[1] = vshlq_u16(vaddl_high_u8(v90, v88), v72);
                v86 += 4;
                v84 += 0x2000000000;
                v85 -= 32;
              }
              while (v85);
              if ((v13 & 0xFFFFFFE0) == v13)
                goto LABEL_98;
              v75 = v13 & 0xFFFFFFE0;
              v80 = v75;
              if ((v13 & 0x18) != 0)
                goto LABEL_106;
            }
          }
LABEL_96:
          v81 = v75 << 32;
          do
          {
            *(_WORD *)&v22[2 * v75++] = (*(unsigned __int8 *)(v74 + (v81 >> 32) + a3)
                                       + *(unsigned __int8 *)(v74 + (v81 >> 32))) << v14;
            v81 += 0x100000000;
          }
          while (v13 != v75);
LABEL_98:
          if (a4)
          {
            v82 = *(__int16 *)((char *)&v11->i16[(unint64_t)v17 / 2 - 1] + v70 * v71);
            v83 = (a6 - 4 * a4);
            do
              *(_WORD *)&v22[2 * v83++] = v82;
            while (a6 != v83);
          }
          v22 += v70;
          v74 += v16;
          ++v71;
          v73 = (uint16x8_t *)((char *)v73 + v70);
          if ((_DWORD)v71 == v12)
            goto LABEL_44;
        }
      }
      v113 = 0;
      result = (v13 - 8);
      v114 = (uint16x8_t)vdupq_n_s16(v15);
      v115 = v11 + 2;
      v22 = (char *)v11;
      v116 = a2;
      while (1)
      {
        if (result < 0x7FFFFFF9
          && ((unint64_t)v22 < a2 + v13 + v16 * v113
            ? (v117 = v116 >= (unint64_t)v11->u64 + v17 + v70 * v113)
            : (v117 = 1),
              v117))
        {
          if (v13 < 0x20)
          {
            v118 = 0;
LABEL_157:
            v129 = v118 << 32;
            v130 = 2 * v118;
            v131 = v118 - (v13 & 0xFFFFFFF8);
            do
            {
              *(uint16x8_t *)&v22[v130] = vshlq_u16(vmovl_u8(*(uint8x8_t *)(v116 + (v129 >> 32))), v114);
              v129 += 0x800000000;
              v130 += 16;
              v131 += 8;
            }
            while (v131);
            v119 = v13 & 0xFFFFFFF8;
            if (v119 == v13)
              goto LABEL_149;
            goto LABEL_147;
          }
          v123 = 0;
          v124 = v13 & 0xFFFFFFE0;
          v125 = v115;
          do
          {
            v126 = (uint8x16_t *)(v116 + (v123 >> 32));
            v127 = v126[1];
            v128 = vshlq_u16(vmovl_high_u8(*v126), v114);
            v125[-2] = vshlq_u16(vmovl_u8(*(uint8x8_t *)v126->i8), v114);
            v125[-1] = v128;
            *v125 = vshlq_u16(vmovl_u8(*(uint8x8_t *)v127.i8), v114);
            v125[1] = vshlq_u16(vmovl_high_u8(v127), v114);
            v125 += 4;
            v123 += 0x2000000000;
            v124 -= 32;
          }
          while (v124);
          if ((v13 & 0xFFFFFFE0) == v13)
            goto LABEL_149;
          v118 = v13 & 0x7FFFFFE0;
          v119 = v13 & 0xFFFFFFE0;
          if ((((_BYTE)a6 - 4 * (_BYTE)a4) & 0x18) != 0)
            goto LABEL_157;
        }
        else
        {
          v119 = 0;
        }
LABEL_147:
        v120 = v119 << 32;
        do
        {
          *(_WORD *)&v22[2 * v119++] = *(unsigned __int8 *)(v116 + (v120 >> 32)) << v15;
          v120 += 0x100000000;
        }
        while (v13 != v119);
LABEL_149:
        if (a4)
        {
          v121 = *(__int16 *)((char *)&v11->i16[(unint64_t)v17 / 2 - 1] + v70 * v113);
          v122 = (a6 - 4 * a4);
          do
            *(_WORD *)&v22[2 * v122++] = v121;
          while (a6 != v122);
        }
        v22 += v70;
        v116 += v16;
        ++v113;
        v115 = (uint16x8_t *)((char *)v115 + v70);
        if ((_DWORD)v113 == v12)
          goto LABEL_44;
      }
    }
    if ((int)a6 > 0)
    {
      v64 = 0;
      v22 = (char *)result;
      while (1)
      {
        v65 = *((unsigned __int16 *)v22 - 1);
        if (a6 >= 0x10)
        {
          v67 = 0;
          v68 = vdupq_n_s16(v65);
          do
          {
            v69 = (int16x8_t *)&v22[v67];
            *v69 = v68;
            v69[1] = v68;
            v67 += 32;
          }
          while (((2 * a6) & 0x1FFFFFFE0) != v67);
          v66 = a6 & 0xFFFFFFF0;
          if (v66 == a6)
            goto LABEL_69;
        }
        else
        {
          v66 = 0;
        }
        do
          *(_WORD *)&v22[2 * v66++] = v65;
        while (a6 != v66);
LABEL_69:
        v22 += 2 * (int)a6;
        if (++v64 == v12)
          goto LABEL_44;
      }
    }
    v22 = (char *)(result + (2 * (~(4 * a5) + a7) + 2) * (int)a6);
  }
LABEL_44:
  v44 = a7 - v12;
  if (a7 > v12)
  {
    do
    {
      result = (unint64_t)memcpy(v22, &v22[-2 * (int)a6], 2 * (int)a6);
      v22 += 2 * (int)a6;
      --v44;
    }
    while (v44);
  }
  if (a7 >= 1 && (int)a6 >= 1)
  {
    v45 = 0;
    v46 = __clz(__rbit32(a7)) + __clz(__rbit32(a6));
    v47 = 1 << v46 >> 1;
    v48 = v11;
    while (1)
    {
      if (a6 >= 0x10)
      {
        v50 = 0;
        v51 = 0uLL;
        v52 = (int32x4_t)v47;
        v53 = 0uLL;
        v54 = 0uLL;
        do
        {
          v55 = (int16x8_t)v48[v50 / 0x10];
          v56 = (int16x8_t)v48[v50 / 0x10 + 1];
          v51 = vaddw_high_s16(v51, v55);
          v52 = vaddw_s16(v52, *(int16x4_t *)v55.i8);
          v54 = vaddw_high_s16(v54, v56);
          v53 = vaddw_s16(v53, *(int16x4_t *)v56.i8);
          v50 += 32;
        }
        while (((2 * a6) & 0x1FFFFFFE0) != v50);
        v47 = vaddvq_s32(vaddq_s32(vaddq_s32(v53, v52), vaddq_s32(v54, v51)));
        v49 = a6 & 0xFFFFFFF0;
        if (v49 == a6)
          goto LABEL_49;
      }
      else
      {
        v49 = 0;
      }
      do
        v47 += v48->i16[v49++];
      while (a6 != v49);
LABEL_49:
      ++v45;
      v48 = (uint16x8_t *)((char *)v48 + 2 * (int)a6);
      if (v45 == a7)
      {
        v57 = 0;
        v58 = v47 >> v46;
        v59 = vdupq_n_s16(v58);
        while (1)
        {
          if (a6 >= 0x10)
          {
            v61 = 0;
            do
            {
              v62 = (int16x8_t *)&v11[v61 / 0x10];
              v63 = vsubq_s16((int16x8_t)v11[v61 / 0x10 + 1], v59);
              *v62 = vsubq_s16((int16x8_t)v11[v61 / 0x10], v59);
              v62[1] = v63;
              v61 += 32;
            }
            while (((2 * a6) & 0x1FFFFFFE0) != v61);
            v60 = a6 & 0xFFFFFFF0;
            if (v60 == a6)
              goto LABEL_58;
          }
          else
          {
            v60 = 0;
          }
          do
            v11->i16[v60++] -= v58;
          while (a6 != v60);
LABEL_58:
          ++v57;
          v11 = (uint16x8_t *)((char *)v11 + 2 * a6);
          if (v57 == a7)
            return result;
        }
      }
    }
  }
  return result;
}

uint64_t cfl_pred_0(uint64_t result, uint64_t a2, unsigned int a3, int a4, unsigned int a5, int16x8_t *a6, unsigned int a7)
{
  uint64_t v7;
  uint64_t v8;
  int32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int16x8_t *v15;
  unint64_t v16;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  int16x8_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int16x8_t *v32;
  int16x8_t v33;
  int16x8_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int8x16x2_t v46;
  int8x16x4_t v47;

  if (a4 >= 1 && (int)a3 >= 1)
  {
    v7 = 0;
    v8 = 2 * (int)a3;
    v9 = vdupq_n_s32(a7);
    v10 = vdupq_n_s32(a5);
    v11 = a3 & 0xFFFFFFF0;
    v12 = a3 & 0xFFFFFFF8;
    v13.i64[0] = 0x2000000020;
    v13.i64[1] = 0x2000000020;
    v14.i64[0] = 0xFF000000FFLL;
    v14.i64[1] = 0xFF000000FFLL;
    v15 = a6;
    v16 = result;
    do
    {
      if (a3 < 8)
      {
        i = 0;
        goto LABEL_17;
      }
      if (v16 < (unint64_t)a6 + 2 * a3 + v8 * v7
        && (unint64_t)v15 < result + (unint64_t)a3 + v7 * a2)
      {
        for (i = 0; i != a3; *(_BYTE *)(v16 + i++) = v30 & ~(v30 >> 31))
        {
LABEL_17:
          v27 = v15->i16[i] * a7;
          v28 = v27 < 0;
          if (v27 < 0)
            v27 = -v27;
          v29 = (v27 + 32) >> 6;
          if (v28)
            v29 = -v29;
          v30 = v29 + a5;
          if (v30 >= 255)
            v30 = 255;
        }
        goto LABEL_4;
      }
      if (a3 >= 0x10)
      {
        v31 = 0;
        v32 = v15;
        do
        {
          v34 = *v32;
          v33 = v32[1];
          v32 += 2;
          v35 = vmovl_s16(*(int16x4_t *)v34.i8);
          v36 = vmovl_s16(*(int16x4_t *)v33.i8);
          v37 = vmulq_s32(v9, vmovl_high_s16(v34));
          v38 = vmulq_s32(v9, vmovl_high_s16(v33));
          v39 = vmulq_s32(v9, v36);
          v40 = vmulq_s32(v9, v35);
          v41 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vabsq_s32(v40), v13), 6uLL);
          v42 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vabsq_s32(v39), v13), 6uLL);
          v43 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vabsq_s32(v38), v13), 6uLL);
          v44 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vabsq_s32(v37), v13), 6uLL);
          v45 = vminq_s32(vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v39), (int8x16_t)vnegq_s32(v42), (int8x16_t)v42), v10), v14);
          v47.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v37), (int8x16_t)vnegq_s32(v44), (int8x16_t)v44), v10), v14), (int32x4_t)0);
          v47.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v38), (int8x16_t)vnegq_s32(v43), (int8x16_t)v43), v10), v14), (int32x4_t)0);
          v47.val[2] = (int8x16_t)vmaxq_s32(v45, (int32x4_t)0);
          v47.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v40), (int8x16_t)vnegq_s32(v41), (int8x16_t)v41), v10), v14), (int32x4_t)0);
          *(int8x16_t *)(v16 + v31) = vqtbl4q_s8(v47, (int8x16_t)xmmword_19689A980);
          v31 += 16;
        }
        while (v11 != v31);
        if (v11 == a3)
          goto LABEL_4;
        v19 = a3 & 0xFFFFFFF0;
        i = v19;
        if ((a3 & 8) == 0)
          goto LABEL_17;
      }
      else
      {
        v19 = 0;
      }
      v20 = 2 * v19;
      do
      {
        v21 = *(int16x8_t *)((char *)v15 + v20);
        v22 = vmovl_s16(*(int16x4_t *)v21.i8);
        v23 = vmulq_s32(v9, vmovl_high_s16(v21));
        v24 = vmulq_s32(v9, v22);
        v25 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vabsq_s32(v24), v13), 6uLL);
        v26 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vabsq_s32(v23), v13), 6uLL);
        v46.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v23), (int8x16_t)vnegq_s32(v26), (int8x16_t)v26), v10), v14), (int32x4_t)0);
        v46.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v24), (int8x16_t)vnegq_s32(v25), (int8x16_t)v25), v10), v14), (int32x4_t)0);
        *(_QWORD *)(v16 + v19) = vqtbl2q_s8(v46, (int8x16_t)xmmword_19689A990).u64[0];
        v19 += 8;
        v20 += 16;
      }
      while (v12 != v19);
      i = a3 & 0xFFFFFFF8;
      if (v12 != a3)
        goto LABEL_17;
LABEL_4:
      v15 = (int16x8_t *)((char *)v15 + v8);
      v16 += a2;
      ++v7;
    }
    while ((_DWORD)v7 != a4);
  }
  return result;
}

uint64_t inv_txfm_add_wht_wht_4x4_c_0(unsigned __int8 *a1, uint64_t a2, __int16 *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned __int8 *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  unsigned __int8 *v72;
  uint64_t result;
  int v74;
  int v75;
  int v76;
  int v77;

  v3 = a3[4] >> 2;
  v4 = a3[12] >> 2;
  v5 = v3 + (*a3 >> 2);
  v6 = (a3[8] >> 2) - v4;
  v7 = (v5 - v6) >> 1;
  v8 = v7 - v4;
  v9 = v7 - v3;
  v10 = v5 - (v7 - v4);
  v11 = v9 + v6;
  v12 = a3[5] >> 2;
  v13 = a3[13] >> 2;
  v14 = v12 + (a3[1] >> 2);
  v15 = (a3[9] >> 2) - v13;
  v16 = (v14 - v15) >> 1;
  v17 = v16 - v13;
  v18 = v16 - v12;
  v19 = v14 - (v16 - v13);
  v20 = v18 + v15;
  v21 = a3[6] >> 2;
  v22 = a3[14] >> 2;
  v23 = v21 + (a3[2] >> 2);
  v24 = (a3[10] >> 2) - v22;
  v25 = (v23 - v24) >> 1;
  v26 = v25 - v22;
  v27 = v25 - v21;
  v28 = v27 + v24;
  v29 = a3[7] >> 2;
  v30 = a3[15] >> 2;
  v31 = v29 + (a3[3] >> 2);
  v32 = (a3[11] >> 2) - v30;
  v33 = (v31 - v32) >> 1;
  v34 = v33 - v30;
  v35 = v33 - v29;
  v36 = v31 - v34;
  v37 = v35 + v32;
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  v38 = v19 + v10;
  v39 = v23 - v26 - v36;
  v40 = (v38 - v39) >> 1;
  v41 = v40 - v36;
  v42 = v40 - v19;
  v43 = v17 + v8;
  v44 = v26 - v34;
  v45 = (v17 + v8 - (v26 - v34)) >> 1;
  v46 = v45 - v34;
  v47 = v45 - v17;
  v48 = v18 + v9;
  v49 = v27 - v35;
  v50 = (v48 - (v27 - v35)) >> 1;
  v51 = v50 - v35;
  v52 = v50 - v18;
  v53 = v11 + v20;
  v54 = v28 - v37;
  v55 = (v53 - (v28 - v37)) >> 1;
  v56 = v55 - v37;
  v57 = v55 - v20;
  v58 = v38 + *a1 - v41;
  if (v58 >= 255)
    v58 = 255;
  *a1 = v58 & ~(v58 >> 31);
  v59 = v43 + a1[1] - v46;
  if (v59 >= 255)
    v59 = 255;
  a1[1] = v59 & ~(v59 >> 31);
  v60 = v48 + a1[2] - v51;
  if (v60 >= 255)
    v60 = 255;
  a1[2] = v60 & ~(v60 >> 31);
  v61 = v53 + a1[3] - v56;
  if (v61 >= 255)
    v61 = 255;
  a1[3] = v61 & ~(v61 >> 31);
  v62 = &a1[a2];
  v63 = v41 + a1[a2];
  if (v63 >= 255)
    v63 = 255;
  *v62 = v63 & ~(v63 >> 31);
  v64 = v46 + v62[1];
  if (v64 >= 255)
    v64 = 255;
  v62[1] = v64 & ~(v64 >> 31);
  v65 = v51 + v62[2];
  if (v65 >= 255)
    v65 = 255;
  v62[2] = v65 & ~(v65 >> 31);
  v66 = v56 + v62[3];
  if (v66 >= 255)
    v66 = 255;
  v62[3] = v66 & ~(v66 >> 31);
  v67 = &v62[a2];
  v68 = v42 + *v67;
  if (v68 >= 255)
    v68 = 255;
  *v67 = v68 & ~(v68 >> 31);
  v69 = v47 + v67[1];
  if (v69 >= 255)
    v69 = 255;
  v67[1] = v69 & ~(v69 >> 31);
  v70 = v52 + v67[2];
  if (v70 >= 255)
    v70 = 255;
  v67[2] = v70 & ~(v70 >> 31);
  v71 = v57 + v67[3];
  if (v71 >= 255)
    v71 = 255;
  v67[3] = v71 & ~(v71 >> 31);
  v72 = &v67[a2];
  result = *v72;
  v74 = v42 + v39 + result;
  if (v74 >= 255)
    v74 = 255;
  *v72 = v74 & ~(v74 >> 31);
  v75 = v47 + v44 + v72[1];
  if (v75 >= 255)
    v75 = 255;
  v72[1] = v75 & ~(v75 >> 31);
  v76 = v52 + v49 + v72[2];
  if (v76 >= 255)
    v76 = 255;
  v72[2] = v76 & ~(v76 >> 31);
  v77 = v57 + v54 + v72[3];
  if (v77 >= 255)
    v77 = 255;
  v72[3] = v77 & ~(v77 >> 31);
  return result;
}

uint64_t inv_txfm_add_dct_dct_4x4_c_0(uint64_t a1, uint64_t a2)
{
  return inv_txfm_add_c_4_0(a1, a2);
}

uint64_t inv_txfm_add_identity_identity_4x4_c_0(uint64_t a1, uint64_t a2)
{
  return inv_txfm_add_c_3_0(a1, a2);
}

uint64_t inv_txfm_add_adst_dct_4x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct4_1d_c, 0);
}

uint64_t inv_txfm_add_dct_adst_4x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst4_1d_c, 0);
}

uint64_t inv_txfm_add_adst_adst_4x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst4_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_adst_4x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst4_1d_c, 0);
}

uint64_t inv_txfm_add_adst_flipadst_4x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst4_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_dct_4x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct4_1d_c, 0);
}

uint64_t inv_txfm_add_dct_flipadst_4x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst4_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_flipadst_4x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst4_1d_c, 0);
}

uint64_t inv_txfm_add_dct_identity_4x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity4_1d_c, 0);
}

uint64_t inv_txfm_add_identity_dct_4x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct4_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_identity_4x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity4_1d_c, 0);
}

uint64_t inv_txfm_add_identity_flipadst_4x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst4_1d_c, 0);
}

uint64_t inv_txfm_add_adst_identity_4x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity4_1d_c, 0);
}

uint64_t inv_txfm_add_identity_adst_4x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst4_1d_c, 0);
}

uint64_t inv_txfm_add_dct_dct_4x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct8_1d_c, 1);
}

uint64_t inv_txfm_add_identity_identity_4x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity8_1d_c, 0);
}

uint64_t inv_txfm_add_adst_dct_4x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct8_1d_c, 0);
}

uint64_t inv_txfm_add_dct_adst_4x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst8_1d_c, 0);
}

uint64_t inv_txfm_add_adst_adst_4x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst8_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_adst_4x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst8_1d_c, 0);
}

uint64_t inv_txfm_add_adst_flipadst_4x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst8_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_dct_4x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct8_1d_c, 0);
}

uint64_t inv_txfm_add_dct_flipadst_4x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst8_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_flipadst_4x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst8_1d_c, 0);
}

uint64_t inv_txfm_add_dct_identity_4x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity8_1d_c, 0);
}

uint64_t inv_txfm_add_identity_dct_4x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct8_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_identity_4x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity8_1d_c, 0);
}

uint64_t inv_txfm_add_identity_flipadst_4x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst8_1d_c, 0);
}

uint64_t inv_txfm_add_adst_identity_4x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity8_1d_c, 0);
}

uint64_t inv_txfm_add_identity_adst_4x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst8_1d_c, 0);
}

uint64_t inv_txfm_add_dct_dct_4x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct16_1d_c, 1);
}

uint64_t inv_txfm_add_identity_identity_4x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity16_1d_c, 0);
}

uint64_t inv_txfm_add_adst_dct_4x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct16_1d_c, 0);
}

uint64_t inv_txfm_add_dct_adst_4x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst16_1d_c, 0);
}

uint64_t inv_txfm_add_adst_adst_4x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst16_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_adst_4x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst16_1d_c, 0);
}

uint64_t inv_txfm_add_adst_flipadst_4x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst16_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_dct_4x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct16_1d_c, 0);
}

uint64_t inv_txfm_add_dct_flipadst_4x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst16_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_flipadst_4x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst16_1d_c, 0);
}

uint64_t inv_txfm_add_dct_identity_4x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_dct4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity16_1d_c, 0);
}

uint64_t inv_txfm_add_identity_dct_4x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct16_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_identity_4x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_flipadst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity16_1d_c, 0);
}

uint64_t inv_txfm_add_identity_flipadst_4x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst16_1d_c, 0);
}

uint64_t inv_txfm_add_adst_identity_4x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_adst4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity16_1d_c, 0);
}

uint64_t inv_txfm_add_identity_adst_4x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)dav1d_inv_identity4_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst16_1d_c, 0);
}

uint64_t inv_txfm_add_dct_dct_8x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct4_1d_c, 1);
}

uint64_t inv_txfm_add_identity_identity_8x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity4_1d_c, 0);
}

uint64_t inv_txfm_add_adst_dct_8x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct4_1d_c, 0);
}

uint64_t inv_txfm_add_dct_adst_8x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst4_1d_c, 0);
}

uint64_t inv_txfm_add_adst_adst_8x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst4_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_adst_8x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst4_1d_c, 0);
}

uint64_t inv_txfm_add_adst_flipadst_8x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst4_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_dct_8x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct4_1d_c, 0);
}

uint64_t inv_txfm_add_dct_flipadst_8x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst4_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_flipadst_8x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst4_1d_c, 0);
}

uint64_t inv_txfm_add_dct_identity_8x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity4_1d_c, 0);
}

uint64_t inv_txfm_add_identity_dct_8x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct4_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_identity_8x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity4_1d_c, 0);
}

uint64_t inv_txfm_add_identity_flipadst_8x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst4_1d_c, 0);
}

uint64_t inv_txfm_add_adst_identity_8x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity4_1d_c, 0);
}

uint64_t inv_txfm_add_identity_adst_8x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst4_1d_c, 0);
}

uint64_t inv_txfm_add_dct_dct_8x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct8_1d_c, 1);
}

uint64_t inv_txfm_add_identity_identity_8x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity8_1d_c, 0);
}

uint64_t inv_txfm_add_adst_dct_8x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct8_1d_c, 0);
}

uint64_t inv_txfm_add_dct_adst_8x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst8_1d_c, 0);
}

uint64_t inv_txfm_add_adst_adst_8x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst8_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_adst_8x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst8_1d_c, 0);
}

uint64_t inv_txfm_add_adst_flipadst_8x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst8_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_dct_8x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct8_1d_c, 0);
}

uint64_t inv_txfm_add_dct_flipadst_8x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst8_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_flipadst_8x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst8_1d_c, 0);
}

uint64_t inv_txfm_add_dct_identity_8x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity8_1d_c, 0);
}

uint64_t inv_txfm_add_identity_dct_8x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct8_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_identity_8x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity8_1d_c, 0);
}

uint64_t inv_txfm_add_identity_flipadst_8x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst8_1d_c, 0);
}

uint64_t inv_txfm_add_adst_identity_8x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity8_1d_c, 0);
}

uint64_t inv_txfm_add_identity_adst_8x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst8_1d_c, 0);
}

uint64_t inv_txfm_add_dct_dct_8x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct16_1d_c, 1);
}

uint64_t inv_txfm_add_identity_identity_8x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity16_1d_c, 0);
}

uint64_t inv_txfm_add_adst_dct_8x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct16_1d_c, 0);
}

uint64_t inv_txfm_add_dct_adst_8x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst16_1d_c, 0);
}

uint64_t inv_txfm_add_adst_adst_8x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst16_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_adst_8x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst16_1d_c, 0);
}

uint64_t inv_txfm_add_adst_flipadst_8x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst16_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_dct_8x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct16_1d_c, 0);
}

uint64_t inv_txfm_add_dct_flipadst_8x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst16_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_flipadst_8x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst16_1d_c, 0);
}

uint64_t inv_txfm_add_dct_identity_8x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity16_1d_c, 0);
}

uint64_t inv_txfm_add_identity_dct_8x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct16_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_identity_8x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_flipadst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity16_1d_c, 0);
}

uint64_t inv_txfm_add_identity_flipadst_8x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst16_1d_c, 0);
}

uint64_t inv_txfm_add_adst_identity_8x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_adst8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity16_1d_c, 0);
}

uint64_t inv_txfm_add_identity_adst_8x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst16_1d_c, 0);
}

uint64_t inv_txfm_add_dct_dct_8x32_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 32, 2, (uint64_t)dav1d_inv_dct8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct32_1d_c, 1);
}

uint64_t inv_txfm_add_identity_identity_8x32_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 8, 32, 2, (uint64_t)dav1d_inv_identity8_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity32_1d_c, 0);
}

uint64_t inv_txfm_add_dct_dct_16x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct4_1d_c, 1);
}

uint64_t inv_txfm_add_identity_identity_16x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity4_1d_c, 0);
}

uint64_t inv_txfm_add_adst_dct_16x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct4_1d_c, 0);
}

uint64_t inv_txfm_add_dct_adst_16x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst4_1d_c, 0);
}

uint64_t inv_txfm_add_adst_adst_16x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst4_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_adst_16x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst4_1d_c, 0);
}

uint64_t inv_txfm_add_adst_flipadst_16x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst4_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_dct_16x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct4_1d_c, 0);
}

uint64_t inv_txfm_add_dct_flipadst_16x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst4_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_flipadst_16x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst4_1d_c, 0);
}

uint64_t inv_txfm_add_dct_identity_16x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity4_1d_c, 0);
}

uint64_t inv_txfm_add_identity_dct_16x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct4_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_identity_16x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity4_1d_c, 0);
}

uint64_t inv_txfm_add_identity_flipadst_16x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst4_1d_c, 0);
}

uint64_t inv_txfm_add_adst_identity_16x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity4_1d_c, 0);
}

uint64_t inv_txfm_add_identity_adst_16x4_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst4_1d_c, 0);
}

uint64_t inv_txfm_add_dct_dct_16x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct8_1d_c, 1);
}

uint64_t inv_txfm_add_identity_identity_16x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity8_1d_c, 0);
}

uint64_t inv_txfm_add_adst_dct_16x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct8_1d_c, 0);
}

uint64_t inv_txfm_add_dct_adst_16x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst8_1d_c, 0);
}

uint64_t inv_txfm_add_adst_adst_16x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst8_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_adst_16x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst8_1d_c, 0);
}

uint64_t inv_txfm_add_adst_flipadst_16x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst8_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_dct_16x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct8_1d_c, 0);
}

uint64_t inv_txfm_add_dct_flipadst_16x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst8_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_flipadst_16x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst8_1d_c, 0);
}

uint64_t inv_txfm_add_dct_identity_16x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity8_1d_c, 0);
}

uint64_t inv_txfm_add_identity_dct_16x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct8_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_identity_16x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity8_1d_c, 0);
}

uint64_t inv_txfm_add_identity_flipadst_16x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst8_1d_c, 0);
}

uint64_t inv_txfm_add_adst_identity_16x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity8_1d_c, 0);
}

uint64_t inv_txfm_add_identity_adst_16x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst8_1d_c, 0);
}

uint64_t inv_txfm_add_dct_dct_16x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct16_1d_c, 1);
}

uint64_t inv_txfm_add_identity_identity_16x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity16_1d_c, 0);
}

uint64_t inv_txfm_add_adst_dct_16x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct16_1d_c, 0);
}

uint64_t inv_txfm_add_dct_adst_16x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst16_1d_c, 0);
}

uint64_t inv_txfm_add_adst_adst_16x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst16_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_adst_16x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_adst16_1d_c, 0);
}

uint64_t inv_txfm_add_adst_flipadst_16x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_adst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst16_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_dct_16x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct16_1d_c, 0);
}

uint64_t inv_txfm_add_dct_flipadst_16x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst16_1d_c, 0);
}

uint64_t inv_txfm_add_flipadst_flipadst_16x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_flipadst16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_flipadst16_1d_c, 0);
}

uint64_t inv_txfm_add_dct_identity_16x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity16_1d_c, 0);
}

uint64_t inv_txfm_add_identity_dct_16x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct16_1d_c, 0);
}

uint64_t inv_txfm_add_dct_dct_16x32_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 32, 1, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct32_1d_c, 1);
}

uint64_t inv_txfm_add_identity_identity_16x32_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 32, 1, (uint64_t)dav1d_inv_identity16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity32_1d_c, 0);
}

uint64_t inv_txfm_add_dct_dct_16x64_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 16, 64, 2, (uint64_t)dav1d_inv_dct16_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct64_1d_c, 1);
}

uint64_t inv_txfm_add_dct_dct_32x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 32, 8, 2, (uint64_t)dav1d_inv_dct32_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct8_1d_c, 1);
}

uint64_t inv_txfm_add_identity_identity_32x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 32, 8, 2, (uint64_t)dav1d_inv_identity32_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity8_1d_c, 0);
}

uint64_t inv_txfm_add_dct_dct_32x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 32, 16, 1, (uint64_t)dav1d_inv_dct32_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct16_1d_c, 1);
}

uint64_t inv_txfm_add_identity_identity_32x16_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 32, 16, 1, (uint64_t)dav1d_inv_identity32_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity16_1d_c, 0);
}

uint64_t inv_txfm_add_dct_dct_32x32_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 32, 32, 2, (uint64_t)dav1d_inv_dct32_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct32_1d_c, 1);
}

uint64_t inv_txfm_add_identity_identity_32x32_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 32, 32, 2, (uint64_t)dav1d_inv_identity32_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_identity32_1d_c, 0);
}

uint64_t inv_txfm_add_dct_dct_32x64_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 32, 64, 1, (uint64_t)dav1d_inv_dct32_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct64_1d_c, 1);
}

uint64_t inv_txfm_add_dct_dct_64x16_c_0(uint64_t a1, uint64_t a2)
{
  return inv_txfm_add_c_5_0(a1, a2);
}

uint64_t inv_txfm_add_dct_dct_64x32_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 64, 32, 1, (uint64_t)dav1d_inv_dct64_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct32_1d_c, 1);
}

uint64_t inv_txfm_add_dct_dct_64x64_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return inv_txfm_add_c_0(a1, a2, a3, a4, 64, 64, 2, (uint64_t)dav1d_inv_dct64_1d_c, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))dav1d_inv_dct64_1d_c, 1);
}

uint64_t inv_txfm_add_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(_DWORD *, uint64_t, uint64_t, uint64_t), int a10)
{
  uint64_t result;
  uint64_t v11;
  __int16 *v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  void (*v17)(_DWORD *, uint64_t, uint64_t, uint64_t);
  __int16 *v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint32x4_t v27;
  uint64_t v28;
  int32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  uint16x8_t v32;
  uint64_t v33;
  uint8x16_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int *v52;
  _DWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  int32x4_t v65;
  int32x4_t *v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  uint64_t v70;
  int32x4_t v71;
  uint64_t v72;
  int *v73;
  int v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int32x4_t *v79;
  int32x4_t v80;
  int32x4_t v81;
  unint64_t v82;
  uint64_t v83;
  int32x4_t *v84;
  __int32 v85;
  int v86;
  uint64_t v87;
  uint8x16_t v88;
  uint16x8_t v89;
  uint16x8_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  _BOOL4 v104;
  _BOOL4 v105;
  unsigned int v106;
  void (*v107)(_DWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  _DWORD v109[4];
  _QWORD v110[2048];
  int8x16x2_t v111;
  int8x16x4_t v112;
  int8x16x4_t v113;

  result = MEMORY[0x1E0C80A78](a1, a2);
  v107 = v17;
  v18 = v12;
  v19 = result;
  v110[2046] = *MEMORY[0x1E0C80C00];
  v20 = v15 == 2 * v14 || v14 == 2 * v15;
  v21 = v20;
  if (v13 < a10)
  {
    v22 = 0;
    v23 = *v12;
    *v12 = 0;
    v20 = v21 == 0;
    v24 = (181 * v23 + 128) >> 8;
    if (v20)
      v24 = v23;
    v25 = (181 * ((int)(((1 << v16) >> 1) + ((181 * v24 + 128) >> 8)) >> v16) + 2176) >> 12;
    v26 = v14 & 0xFFFFFFF0;
    v27 = (uint32x4_t)vdupq_n_s32(v25);
    v28 = v14 & 0xFFFFFFF8;
    v29.i64[0] = 0xFF000000FFLL;
    v29.i64[1] = 0xFF000000FFLL;
    while (1)
    {
      if (v14 < 8)
      {
        v30 = 0;
        do
        {
LABEL_24:
          v37 = v25 + *(unsigned __int8 *)(v19 + v30);
          if (v37 >= 255)
            v37 = 255;
          *(_BYTE *)(v19 + v30++) = v37 & ~(v37 >> 31);
        }
        while (v14 != v30);
        goto LABEL_12;
      }
      if (v14 >= 0x10)
      {
        v33 = 0;
        do
        {
          v34 = *(uint8x16_t *)(v19 + v33);
          v35 = vmovl_u8(*(uint8x8_t *)v34.i8);
          v36 = vmovl_high_u8(v34);
          v113.val[3] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16(v27, v36), v29), (int32x4_t)0);
          v113.val[2] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_u16(v27, *(uint16x4_t *)v36.i8), v29), (int32x4_t)0);
          v113.val[1] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16(v27, v35), v29), (int32x4_t)0);
          v113.val[0] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_u16(v27, *(uint16x4_t *)v35.i8), v29), (int32x4_t)0);
          *(int8x16_t *)(v19 + v33) = vqtbl4q_s8(v113, (int8x16_t)xmmword_19689A980);
          v33 += 16;
        }
        while (v26 != v33);
        if (v26 == v14)
          goto LABEL_12;
        v31 = v14 & 0xFFFFFFF0;
        v30 = v31;
        if ((v14 & 8) == 0)
          goto LABEL_24;
      }
      else
      {
        v31 = 0;
      }
      do
      {
        v32 = vmovl_u8(*(uint8x8_t *)(v19 + v31));
        v111.val[1] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16(v27, v32), v29), (int32x4_t)0);
        v111.val[0] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_u16(v27, *(uint16x4_t *)v32.i8), v29), (int32x4_t)0);
        *(_QWORD *)(v19 + v31) = vqtbl2q_s8(v111, (int8x16_t)xmmword_19689A990).u64[0];
        v31 += 8;
      }
      while (v28 != v31);
      v30 = v14 & 0xFFFFFFF8;
      if (v28 != v14)
        goto LABEL_24;
LABEL_12:
      ++v22;
      v19 += v11;
      if (v22 == v15)
        return result;
    }
  }
  if (v15 >= 32)
    v38 = 32;
  else
    v38 = v15;
  if ((int)v14 >= 32)
    v39 = 32;
  else
    v39 = v14;
  v100 = v14;
  v40 = v14;
  v41 = (unint64_t)(v39 - 1) >> 32 != 0;
  if ((int)v38 >= 0)
    v42 = v38;
  else
    v42 = -(int)v38;
  if (!(_DWORD)v38)
    v41 = 0;
  v106 = (v39 - 1) * v42;
  v104 = (((v39 - 1) * (unint64_t)v42) & 0xFFFFFFFF00000000) != 0;
  v105 = v41;
  v103 = ~(_DWORD)v38 >> 31;
  v102 = v39 & 0xFFFFFFFE;
  v108 = 4 * v14;
  v101 = v15;
  v99 = v11;
  v97 = (1 << v16) >> 1;
  v98 = v16;
  v43 = 0;
  if ((v21 & 1) != 0)
  {
    v44 = 2 * v38;
    v45 = v109;
    while (1)
    {
      if (v39 < 2)
        goto LABEL_46;
      v46 = v104;
      if (v106 > (v43 ^ v103))
        v46 = 1;
      if (((v46 | v105) & 1) != 0)
      {
LABEL_46:
        v47 = 0;
      }
      else
      {
        v49 = 0;
        v50 = v43;
        do
        {
          v51 = (181 * v18[(v38 + v50)] + 128) >> 8;
          v52 = &v45[v49 / 4];
          *v52 = (181 * v18[v50] + 128) >> 8;
          v52[1] = v51;
          v50 += v44;
          v49 += 8;
        }
        while (((4 * v39) & 0x3FFFFFFF8) != v49);
        v47 = v39 & 0xFFFFFFFE;
        if (v102 == v39)
          goto LABEL_41;
      }
      v48 = v43 + v38 * (unint64_t)v47;
      do
      {
        v45[v47++] = (181 * v18[v48] + 128) >> 8;
        v48 += v38;
      }
      while (v39 != v47);
LABEL_41:
      v107(v45, 1, 4294934528, 0x7FFFLL);
      ++v43;
      v45 = (_DWORD *)((char *)v45 + v108);
      v44 = 2 * v38;
      if (v43 == v38)
        goto LABEL_68;
    }
  }
  v53 = v109;
  do
  {
    if (v39 < 2)
      goto LABEL_60;
    v54 = v104;
    if (v106 > (v43 ^ v103))
      v54 = 1;
    if (((v54 | v105) & 1) != 0)
    {
LABEL_60:
      v55 = 0;
LABEL_61:
      v56 = v43 + v38 * (unint64_t)v55;
      do
      {
        v53[v55++] = v18[v56];
        v56 += v38;
      }
      while (v39 != v55);
      goto LABEL_55;
    }
    v57 = 0;
    v58 = v43;
    do
    {
      v59 = v18[(v38 + v58)];
      v60 = &v53[v57 / 4];
      *v60 = v18[v58];
      v60[1] = v59;
      v58 += 2 * v38;
      v57 += 8;
    }
    while (((4 * v39) & 0x3FFFFFFF8) != v57);
    v55 = v39 & 0xFFFFFFFE;
    if (v102 != v39)
      goto LABEL_61;
LABEL_55:
    v107(v53, 1, 4294934528, 0x7FFFLL);
    ++v43;
    v53 = (_DWORD *)((char *)v53 + v108);
  }
  while (v43 != v38);
LABEL_68:
  bzero(v18, (2 * v39 * v38));
  v61 = v38 * v100;
  if (v61 >= 8)
  {
    v62 = v61 & 0xFFFFFFF8;
    v64 = v97;
    v63 = v98;
    v65 = vdupq_n_s32(v97);
    v66 = (int32x4_t *)v110;
    v67 = vnegq_s32(vdupq_n_s32(v98));
    v68.i64[0] = 0x7F0000007FLL;
    v68.i64[1] = 0x7F0000007FLL;
    v69.i64[0] = 0x7F0000007FLL;
    v69.i64[1] = 0x7F0000007FLL;
    v70 = v62;
    do
    {
      v71 = vmaxq_s32(vminq_s32(vshlq_s32(vaddq_s32(*v66, v65), v67), v68), v69);
      v66[-1] = vmaxq_s32(vminq_s32(vshlq_s32(vaddq_s32(v66[-1], v65), v67), v68), v69);
      *v66 = v71;
      v66 += 2;
      v70 -= 8;
    }
    while (v70);
    if (v62 != v61)
      goto LABEL_73;
  }
  else
  {
    v62 = 0;
    v64 = v97;
    v63 = v98;
LABEL_73:
    v72 = v61 - v62;
    v73 = &v109[v62];
    do
    {
      v74 = (int)(*v73 + v64) >> v63;
      if (v74 >= 0x7FFF)
        v74 = 0x7FFF;
      if (v74 <= -32768)
        v74 = -32768;
      *v73++ = v74;
      --v72;
    }
    while (v72);
  }
  v75 = v109;
  v76 = v40;
  do
  {
    a9(v75++, v40, 4294934528, 0x7FFFLL);
    --v76;
  }
  while (v76);
  v77 = 0;
  v78 = v40 & 0xFFFFFFF0;
  v79 = (int32x4_t *)v109;
  v80.i64[0] = 0x800000008;
  v80.i64[1] = 0x800000008;
  v81.i64[0] = 0xFF000000FFLL;
  v81.i64[1] = 0xFF000000FFLL;
  v82 = v19;
  result = v99;
  while (2)
  {
    if (v100 >= 0x10 && (v82 >= (unint64_t)v79->u64 + v108 || (unint64_t)v79 >= v19 + v40 + v77 * v99))
    {
      v87 = 0;
      v84 = (int32x4_t *)((char *)v79 + 4 * (v40 & 0xFFFFFFF0));
      do
      {
        v88 = *(uint8x16_t *)(v82 + v87);
        v89 = vmovl_u8(*(uint8x8_t *)v88.i8);
        v90 = vmovl_high_u8(v88);
        v92 = v79[2];
        v91 = v79[3];
        v94 = *v79;
        v93 = v79[1];
        v79 += 4;
        v95 = vminq_s32(vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v89.i8), vaddq_s32(v94, v80), 4uLL), v81);
        v96 = vminq_s32(vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v90.i8), vaddq_s32(v92, v80), 4uLL), v81);
        v112.val[3] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(v91, v80), 4uLL), v90), v81), (int32x4_t)0);
        v112.val[1] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(v93, v80), 4uLL), v89), v81), (int32x4_t)0);
        v112.val[2] = (int8x16_t)vmaxq_s32(v96, (int32x4_t)0);
        v112.val[0] = (int8x16_t)vmaxq_s32(v95, (int32x4_t)0);
        *(int8x16_t *)(v82 + v87) = vqtbl4q_s8(v112, (int8x16_t)xmmword_19689A980);
        v87 += 16;
      }
      while (v78 != v87);
      v83 = v40 & 0xFFFFFFF0;
      if (v78 != v40)
        goto LABEL_87;
    }
    else
    {
      v83 = 0;
      v84 = v79;
      do
      {
LABEL_87:
        v85 = v84->i32[0];
        v84 = (int32x4_t *)((char *)v84 + 4);
        v86 = *(unsigned __int8 *)(v82 + v83) + ((v85 + 8) >> 4);
        if (v86 >= 255)
          v86 = 255;
        *(_BYTE *)(v82 + v83++) = v86 & ~(v86 >> 31);
      }
      while (v40 != v83);
    }
    ++v77;
    v82 += v99;
    v79 = v84;
    if ((_DWORD)v77 != v101)
      continue;
    return result;
  }
}

uint64_t inv_txfm_add_c_3_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  __int16 *v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  __int16 *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint32x4_t v19;
  uint64_t v20;
  int32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint16x8_t v24;
  uint64_t v25;
  uint8x16_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  int *v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  int32x4_t v58;
  int32x4_t *v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  uint64_t v63;
  int32x4_t v64;
  uint64_t v65;
  int *v66;
  int v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int32x4_t *v72;
  int32x4_t v73;
  int32x4_t v74;
  unint64_t v75;
  uint64_t v76;
  int32x4_t *v77;
  __int32 v78;
  int v79;
  uint64_t v80;
  uint8x16_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  int v96;
  _BOOL4 v97;
  _BOOL4 v98;
  unsigned int v99;
  uint64_t v100;
  _DWORD v101[4];
  _QWORD v102[2048];
  int8x16x2_t v103;
  int8x16x4_t v104;
  int8x16x4_t v105;

  result = MEMORY[0x1E0C80A78](a1, a2);
  v10 = v4;
  v11 = result;
  v102[2046] = *MEMORY[0x1E0C80C00];
  v12 = v7 == 2 * v6 || v6 == 2 * v7;
  v13 = v12;
  if (v5 < v9)
  {
    v14 = 0;
    v15 = *v4;
    *v4 = 0;
    v12 = v13 == 0;
    v16 = (181 * v15 + 128) >> 8;
    if (v12)
      v16 = v15;
    v17 = (181 * ((int)(((1 << v8) >> 1) + ((181 * v16 + 128) >> 8)) >> v8) + 2176) >> 12;
    v18 = v6 & 0xFFFFFFF0;
    v19 = (uint32x4_t)vdupq_n_s32(v17);
    v20 = v6 & 0xFFFFFFF8;
    v21.i64[0] = 0xFF000000FFLL;
    v21.i64[1] = 0xFF000000FFLL;
    while (1)
    {
      if (v6 < 8)
      {
        v22 = 0;
        do
        {
LABEL_24:
          v29 = v17 + *(unsigned __int8 *)(v11 + v22);
          if (v29 >= 255)
            v29 = 255;
          *(_BYTE *)(v11 + v22++) = v29 & ~(v29 >> 31);
        }
        while (v6 != v22);
        goto LABEL_12;
      }
      if (v6 >= 0x10)
      {
        v25 = 0;
        do
        {
          v26 = *(uint8x16_t *)(v11 + v25);
          v27 = vmovl_u8(*(uint8x8_t *)v26.i8);
          v28 = vmovl_high_u8(v26);
          v105.val[3] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16(v19, v28), v21), (int32x4_t)0);
          v105.val[2] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_u16(v19, *(uint16x4_t *)v28.i8), v21), (int32x4_t)0);
          v105.val[1] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16(v19, v27), v21), (int32x4_t)0);
          v105.val[0] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_u16(v19, *(uint16x4_t *)v27.i8), v21), (int32x4_t)0);
          *(int8x16_t *)(v11 + v25) = vqtbl4q_s8(v105, (int8x16_t)xmmword_19689A980);
          v25 += 16;
        }
        while (v18 != v25);
        if (v18 == v6)
          goto LABEL_12;
        v23 = v6 & 0xFFFFFFF0;
        v22 = v23;
        if ((v6 & 8) == 0)
          goto LABEL_24;
      }
      else
      {
        v23 = 0;
      }
      do
      {
        v24 = vmovl_u8(*(uint8x8_t *)(v11 + v23));
        v103.val[1] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16(v19, v24), v21), (int32x4_t)0);
        v103.val[0] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_u16(v19, *(uint16x4_t *)v24.i8), v21), (int32x4_t)0);
        *(_QWORD *)(v11 + v23) = vqtbl2q_s8(v103, (int8x16_t)xmmword_19689A990).u64[0];
        v23 += 8;
      }
      while (v20 != v23);
      v22 = v6 & 0xFFFFFFF8;
      if (v20 != v6)
        goto LABEL_24;
LABEL_12:
      ++v14;
      v11 += v3;
      if (v14 == v7)
        return result;
    }
  }
  if (v7 >= 32)
    v30 = 32;
  else
    v30 = v7;
  if ((int)v6 >= 32)
    v31 = 32;
  else
    v31 = v6;
  v93 = v6;
  v32 = v6;
  v33 = (unint64_t)(v31 - 1) >> 32 != 0;
  if ((int)v30 >= 0)
    v34 = v30;
  else
    v34 = -(int)v30;
  if (!(_DWORD)v30)
    v33 = 0;
  v99 = (v31 - 1) * v34;
  v97 = (((v31 - 1) * (unint64_t)v34) & 0xFFFFFFFF00000000) != 0;
  v98 = v33;
  v96 = ~(_DWORD)v30 >> 31;
  v95 = v31 & 0xFFFFFFFE;
  v100 = 4 * v6;
  v94 = v7;
  v92 = v3;
  v90 = (1 << v8) >> 1;
  v91 = v8;
  if ((v13 & 1) != 0)
  {
    v35 = 0;
    v36 = 2 * v30;
    v37 = v101;
    while (1)
    {
      if (v31 < 2)
        goto LABEL_46;
      v38 = v97;
      if (v99 > (v35 ^ v96))
        v38 = 1;
      if (((v38 | v98) & 1) != 0)
      {
LABEL_46:
        v39 = 0;
      }
      else
      {
        v41 = 0;
        v42 = v35;
        do
        {
          v43 = (181 * v10[(v30 + v42)] + 128) >> 8;
          v44 = &v37[v41 / 4];
          *v44 = (181 * v10[v42] + 128) >> 8;
          v44[1] = v43;
          v42 += v36;
          v41 += 8;
        }
        while (((4 * v31) & 0x3FFFFFFF8) != v41);
        v39 = v31 & 0xFFFFFFFE;
        if (v95 == v31)
          goto LABEL_41;
      }
      v40 = v35 + v30 * (unint64_t)v39;
      do
      {
        v37[v39++] = (181 * v10[v40] + 128) >> 8;
        v40 += v30;
      }
      while (v31 != v39);
LABEL_41:
      dav1d_inv_identity4_1d_c(v37, 1);
      ++v35;
      v37 = (_DWORD *)((char *)v37 + v100);
      v36 = 2 * v30;
      if (v35 == v30)
        goto LABEL_68;
    }
  }
  v45 = 0;
  v46 = v101;
  do
  {
    if (v31 < 2)
      goto LABEL_60;
    v47 = v97;
    if (v99 > (v45 ^ v96))
      v47 = 1;
    if (((v47 | v98) & 1) != 0)
    {
LABEL_60:
      v48 = 0;
LABEL_61:
      v49 = v45 + v30 * (unint64_t)v48;
      do
      {
        v46[v48++] = v10[v49];
        v49 += v30;
      }
      while (v31 != v48);
      goto LABEL_55;
    }
    v50 = 0;
    v51 = v45;
    do
    {
      v52 = v10[(v30 + v51)];
      v53 = &v46[v50 / 4];
      *v53 = v10[v51];
      v53[1] = v52;
      v51 += 2 * v30;
      v50 += 8;
    }
    while (((4 * v31) & 0x3FFFFFFF8) != v50);
    v48 = v31 & 0xFFFFFFFE;
    if (v95 != v31)
      goto LABEL_61;
LABEL_55:
    dav1d_inv_identity4_1d_c(v46, 1);
    ++v45;
    v46 = (_DWORD *)((char *)v46 + v100);
  }
  while (v45 != v30);
LABEL_68:
  bzero(v10, (2 * v31 * v30));
  v54 = v30 * v93;
  if (v54 >= 8)
  {
    v55 = v54 & 0xFFFFFFF8;
    v57 = v90;
    v56 = v91;
    v58 = vdupq_n_s32(v90);
    v59 = (int32x4_t *)v102;
    v60 = vnegq_s32(vdupq_n_s32(v91));
    v61.i64[0] = 0x7F0000007FLL;
    v61.i64[1] = 0x7F0000007FLL;
    v62.i64[0] = 0x7F0000007FLL;
    v62.i64[1] = 0x7F0000007FLL;
    v63 = v55;
    do
    {
      v64 = vmaxq_s32(vminq_s32(vshlq_s32(vaddq_s32(*v59, v58), v60), v61), v62);
      v59[-1] = vmaxq_s32(vminq_s32(vshlq_s32(vaddq_s32(v59[-1], v58), v60), v61), v62);
      *v59 = v64;
      v59 += 2;
      v63 -= 8;
    }
    while (v63);
    if (v55 != v54)
      goto LABEL_73;
  }
  else
  {
    v55 = 0;
    v57 = v90;
    v56 = v91;
LABEL_73:
    v65 = v54 - v55;
    v66 = &v101[v55];
    do
    {
      v67 = (int)(*v66 + v57) >> v56;
      if (v67 >= 0x7FFF)
        v67 = 0x7FFF;
      if (v67 <= -32768)
        v67 = -32768;
      *v66++ = v67;
      --v65;
    }
    while (v65);
  }
  v68 = v101;
  v69 = v32;
  do
  {
    dav1d_inv_identity4_1d_c(v68++, v32);
    --v69;
  }
  while (v69);
  v70 = 0;
  v71 = v32 & 0xFFFFFFF0;
  v72 = (int32x4_t *)v101;
  v73.i64[0] = 0x800000008;
  v73.i64[1] = 0x800000008;
  v74.i64[0] = 0xFF000000FFLL;
  v74.i64[1] = 0xFF000000FFLL;
  v75 = v11;
  result = v92;
  while (2)
  {
    if (v93 >= 0x10 && (v75 >= (unint64_t)v72->u64 + v100 || (unint64_t)v72 >= v11 + v32 + v70 * v92))
    {
      v80 = 0;
      v77 = (int32x4_t *)((char *)v72 + 4 * (v32 & 0xFFFFFFF0));
      do
      {
        v81 = *(uint8x16_t *)(v75 + v80);
        v82 = vmovl_u8(*(uint8x8_t *)v81.i8);
        v83 = vmovl_high_u8(v81);
        v85 = v72[2];
        v84 = v72[3];
        v87 = *v72;
        v86 = v72[1];
        v72 += 4;
        v88 = vminq_s32(vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v82.i8), vaddq_s32(v87, v73), 4uLL), v74);
        v89 = vminq_s32(vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v83.i8), vaddq_s32(v85, v73), 4uLL), v74);
        v104.val[3] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(v84, v73), 4uLL), v83), v74), (int32x4_t)0);
        v104.val[1] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(v86, v73), 4uLL), v82), v74), (int32x4_t)0);
        v104.val[2] = (int8x16_t)vmaxq_s32(v89, (int32x4_t)0);
        v104.val[0] = (int8x16_t)vmaxq_s32(v88, (int32x4_t)0);
        *(int8x16_t *)(v75 + v80) = vqtbl4q_s8(v104, (int8x16_t)xmmword_19689A980);
        v80 += 16;
      }
      while (v71 != v80);
      v76 = v32 & 0xFFFFFFF0;
      if (v71 != v32)
        goto LABEL_87;
    }
    else
    {
      v76 = 0;
      v77 = v72;
      do
      {
LABEL_87:
        v78 = v77->i32[0];
        v77 = (int32x4_t *)((char *)v77 + 4);
        v79 = *(unsigned __int8 *)(v75 + v76) + ((v78 + 8) >> 4);
        if (v79 >= 255)
          v79 = 255;
        *(_BYTE *)(v75 + v76++) = v79 & ~(v79 >> 31);
      }
      while (v32 != v76);
    }
    ++v70;
    v75 += v92;
    v72 = v77;
    if ((_DWORD)v70 != v94)
      continue;
    return result;
  }
}

uint64_t inv_txfm_add_c_4_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  __int16 *v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  __int16 *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint32x4_t v19;
  uint64_t v20;
  int32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint16x8_t v24;
  uint64_t v25;
  uint8x16_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  int *v44;
  uint64_t v45;
  int *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  int32x4_t v58;
  int32x4_t *v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  uint64_t v63;
  int32x4_t v64;
  uint64_t v65;
  int *v66;
  int v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int32x4_t *v72;
  int32x4_t v73;
  int32x4_t v74;
  unint64_t v75;
  uint64_t v76;
  int32x4_t *v77;
  __int32 v78;
  int v79;
  uint64_t v80;
  uint8x16_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  int v96;
  _BOOL4 v97;
  _BOOL4 v98;
  unsigned int v99;
  uint64_t v100;
  _DWORD v101[4];
  _QWORD v102[2048];
  int8x16x2_t v103;
  int8x16x4_t v104;
  int8x16x4_t v105;

  result = MEMORY[0x1E0C80A78](a1, a2);
  v10 = v4;
  v11 = result;
  v102[2046] = *MEMORY[0x1E0C80C00];
  v12 = v7 == 2 * v6 || v6 == 2 * v7;
  v13 = v12;
  if (v5 < v9)
  {
    v14 = 0;
    v15 = *v4;
    *v4 = 0;
    v12 = v13 == 0;
    v16 = (181 * v15 + 128) >> 8;
    if (v12)
      v16 = v15;
    v17 = (181 * ((int)(((1 << v8) >> 1) + ((181 * v16 + 128) >> 8)) >> v8) + 2176) >> 12;
    v18 = v6 & 0xFFFFFFF0;
    v19 = (uint32x4_t)vdupq_n_s32(v17);
    v20 = v6 & 0xFFFFFFF8;
    v21.i64[0] = 0xFF000000FFLL;
    v21.i64[1] = 0xFF000000FFLL;
    while (1)
    {
      if (v6 < 8)
      {
        v22 = 0;
        do
        {
LABEL_24:
          v29 = v17 + *(unsigned __int8 *)(v11 + v22);
          if (v29 >= 255)
            v29 = 255;
          *(_BYTE *)(v11 + v22++) = v29 & ~(v29 >> 31);
        }
        while (v6 != v22);
        goto LABEL_12;
      }
      if (v6 >= 0x10)
      {
        v25 = 0;
        do
        {
          v26 = *(uint8x16_t *)(v11 + v25);
          v27 = vmovl_u8(*(uint8x8_t *)v26.i8);
          v28 = vmovl_high_u8(v26);
          v105.val[3] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16(v19, v28), v21), (int32x4_t)0);
          v105.val[2] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_u16(v19, *(uint16x4_t *)v28.i8), v21), (int32x4_t)0);
          v105.val[1] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16(v19, v27), v21), (int32x4_t)0);
          v105.val[0] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_u16(v19, *(uint16x4_t *)v27.i8), v21), (int32x4_t)0);
          *(int8x16_t *)(v11 + v25) = vqtbl4q_s8(v105, (int8x16_t)xmmword_19689A980);
          v25 += 16;
        }
        while (v18 != v25);
        if (v18 == v6)
          goto LABEL_12;
        v23 = v6 & 0xFFFFFFF0;
        v22 = v23;
        if ((v6 & 8) == 0)
          goto LABEL_24;
      }
      else
      {
        v23 = 0;
      }
      do
      {
        v24 = vmovl_u8(*(uint8x8_t *)(v11 + v23));
        v103.val[1] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16(v19, v24), v21), (int32x4_t)0);
        v103.val[0] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_u16(v19, *(uint16x4_t *)v24.i8), v21), (int32x4_t)0);
        *(_QWORD *)(v11 + v23) = vqtbl2q_s8(v103, (int8x16_t)xmmword_19689A990).u64[0];
        v23 += 8;
      }
      while (v20 != v23);
      v22 = v6 & 0xFFFFFFF8;
      if (v20 != v6)
        goto LABEL_24;
LABEL_12:
      ++v14;
      v11 += v3;
      if (v14 == v7)
        return result;
    }
  }
  if (v7 >= 32)
    v30 = 32;
  else
    v30 = v7;
  if ((int)v6 >= 32)
    v31 = 32;
  else
    v31 = v6;
  v93 = v6;
  v32 = v6;
  v33 = (unint64_t)(v31 - 1) >> 32 != 0;
  if ((int)v30 >= 0)
    v34 = v30;
  else
    v34 = -(int)v30;
  if (!(_DWORD)v30)
    v33 = 0;
  v99 = (v31 - 1) * v34;
  v97 = (((v31 - 1) * (unint64_t)v34) & 0xFFFFFFFF00000000) != 0;
  v98 = v33;
  v96 = ~(_DWORD)v30 >> 31;
  v95 = v31 & 0xFFFFFFFE;
  v100 = 4 * v6;
  v94 = v7;
  v92 = v3;
  v90 = (1 << v8) >> 1;
  v91 = v8;
  if ((v13 & 1) != 0)
  {
    v35 = 0;
    v36 = 2 * v30;
    v37 = v101;
    while (1)
    {
      if (v31 < 2)
        goto LABEL_46;
      v38 = v97;
      if (v99 > (v35 ^ v96))
        v38 = 1;
      if (((v38 | v98) & 1) != 0)
      {
LABEL_46:
        v39 = 0;
      }
      else
      {
        v41 = 0;
        v42 = v35;
        do
        {
          v43 = (181 * v10[(v30 + v42)] + 128) >> 8;
          v44 = &v37[v41 / 4];
          *v44 = (181 * v10[v42] + 128) >> 8;
          v44[1] = v43;
          v42 += v36;
          v41 += 8;
        }
        while (((4 * v31) & 0x3FFFFFFF8) != v41);
        v39 = v31 & 0xFFFFFFFE;
        if (v95 == v31)
          goto LABEL_41;
      }
      v40 = v35 + v30 * (unint64_t)v39;
      do
      {
        v37[v39++] = (181 * v10[v40] + 128) >> 8;
        v40 += v30;
      }
      while (v31 != v39);
LABEL_41:
      dav1d_inv_dct4_1d_c(v37, 1, -32768, 0x7FFF);
      ++v35;
      v37 = (int *)((char *)v37 + v100);
      v36 = 2 * v30;
      if (v35 == v30)
        goto LABEL_68;
    }
  }
  v45 = 0;
  v46 = v101;
  do
  {
    if (v31 < 2)
      goto LABEL_60;
    v47 = v97;
    if (v99 > (v45 ^ v96))
      v47 = 1;
    if (((v47 | v98) & 1) != 0)
    {
LABEL_60:
      v48 = 0;
LABEL_61:
      v49 = v45 + v30 * (unint64_t)v48;
      do
      {
        v46[v48++] = v10[v49];
        v49 += v30;
      }
      while (v31 != v48);
      goto LABEL_55;
    }
    v50 = 0;
    v51 = v45;
    do
    {
      v52 = v10[(v30 + v51)];
      v53 = &v46[v50 / 4];
      *v53 = v10[v51];
      v53[1] = v52;
      v51 += 2 * v30;
      v50 += 8;
    }
    while (((4 * v31) & 0x3FFFFFFF8) != v50);
    v48 = v31 & 0xFFFFFFFE;
    if (v95 != v31)
      goto LABEL_61;
LABEL_55:
    dav1d_inv_dct4_1d_c(v46, 1, -32768, 0x7FFF);
    ++v45;
    v46 = (int *)((char *)v46 + v100);
  }
  while (v45 != v30);
LABEL_68:
  bzero(v10, (2 * v31 * v30));
  v54 = v30 * v93;
  if (v54 >= 8)
  {
    v55 = v54 & 0xFFFFFFF8;
    v57 = v90;
    v56 = v91;
    v58 = vdupq_n_s32(v90);
    v59 = (int32x4_t *)v102;
    v60 = vnegq_s32(vdupq_n_s32(v91));
    v61.i64[0] = 0x7F0000007FLL;
    v61.i64[1] = 0x7F0000007FLL;
    v62.i64[0] = 0x7F0000007FLL;
    v62.i64[1] = 0x7F0000007FLL;
    v63 = v55;
    do
    {
      v64 = vmaxq_s32(vminq_s32(vshlq_s32(vaddq_s32(*v59, v58), v60), v61), v62);
      v59[-1] = vmaxq_s32(vminq_s32(vshlq_s32(vaddq_s32(v59[-1], v58), v60), v61), v62);
      *v59 = v64;
      v59 += 2;
      v63 -= 8;
    }
    while (v63);
    if (v55 != v54)
      goto LABEL_73;
  }
  else
  {
    v55 = 0;
    v57 = v90;
    v56 = v91;
LABEL_73:
    v65 = v54 - v55;
    v66 = &v101[v55];
    do
    {
      v67 = (int)(*v66 + v57) >> v56;
      if (v67 >= 0x7FFF)
        v67 = 0x7FFF;
      if (v67 <= -32768)
        v67 = -32768;
      *v66++ = v67;
      --v65;
    }
    while (v65);
  }
  v68 = v101;
  v69 = v32;
  do
  {
    dav1d_inv_dct4_1d_c(v68++, v32, -32768, 0x7FFF);
    --v69;
  }
  while (v69);
  v70 = 0;
  v71 = v32 & 0xFFFFFFF0;
  v72 = (int32x4_t *)v101;
  v73.i64[0] = 0x800000008;
  v73.i64[1] = 0x800000008;
  v74.i64[0] = 0xFF000000FFLL;
  v74.i64[1] = 0xFF000000FFLL;
  v75 = v11;
  result = v92;
  while (2)
  {
    if (v93 >= 0x10 && (v75 >= (unint64_t)v72->u64 + v100 || (unint64_t)v72 >= v11 + v32 + v70 * v92))
    {
      v80 = 0;
      v77 = (int32x4_t *)((char *)v72 + 4 * (v32 & 0xFFFFFFF0));
      do
      {
        v81 = *(uint8x16_t *)(v75 + v80);
        v82 = vmovl_u8(*(uint8x8_t *)v81.i8);
        v83 = vmovl_high_u8(v81);
        v85 = v72[2];
        v84 = v72[3];
        v87 = *v72;
        v86 = v72[1];
        v72 += 4;
        v88 = vminq_s32(vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v82.i8), vaddq_s32(v87, v73), 4uLL), v74);
        v89 = vminq_s32(vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v83.i8), vaddq_s32(v85, v73), 4uLL), v74);
        v104.val[3] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(v84, v73), 4uLL), v83), v74), (int32x4_t)0);
        v104.val[1] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(v86, v73), 4uLL), v82), v74), (int32x4_t)0);
        v104.val[2] = (int8x16_t)vmaxq_s32(v89, (int32x4_t)0);
        v104.val[0] = (int8x16_t)vmaxq_s32(v88, (int32x4_t)0);
        *(int8x16_t *)(v75 + v80) = vqtbl4q_s8(v104, (int8x16_t)xmmword_19689A980);
        v80 += 16;
      }
      while (v71 != v80);
      v76 = v32 & 0xFFFFFFF0;
      if (v71 != v32)
        goto LABEL_87;
    }
    else
    {
      v76 = 0;
      v77 = v72;
      do
      {
LABEL_87:
        v78 = v77->i32[0];
        v77 = (int32x4_t *)((char *)v77 + 4);
        v79 = *(unsigned __int8 *)(v75 + v76) + ((v78 + 8) >> 4);
        if (v79 >= 255)
          v79 = 255;
        *(_BYTE *)(v75 + v76++) = v79 & ~(v79 >> 31);
      }
      while (v32 != v76);
    }
    ++v70;
    v75 += v92;
    v72 = v77;
    if ((_DWORD)v70 != v94)
      continue;
    return result;
  }
}

uint64_t inv_txfm_add_c_5_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  __int16 *v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  __int16 *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint32x4_t v19;
  uint64_t v20;
  int32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint16x8_t v24;
  uint64_t v25;
  uint8x16_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  int *v44;
  uint64_t v45;
  int *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  int32x4_t v58;
  int32x4_t *v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  uint64_t v63;
  int32x4_t v64;
  uint64_t v65;
  int *v66;
  int v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int32x4_t *v72;
  int32x4_t v73;
  int32x4_t v74;
  unint64_t v75;
  uint64_t v76;
  int32x4_t *v77;
  __int32 v78;
  int v79;
  uint64_t v80;
  uint8x16_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  int v96;
  _BOOL4 v97;
  _BOOL4 v98;
  unsigned int v99;
  uint64_t v100;
  _DWORD v101[4];
  _QWORD v102[2048];
  int8x16x2_t v103;
  int8x16x4_t v104;
  int8x16x4_t v105;

  result = MEMORY[0x1E0C80A78](a1, a2);
  v10 = v4;
  v11 = result;
  v102[2046] = *MEMORY[0x1E0C80C00];
  v12 = v7 == 2 * v6 || v6 == 2 * v7;
  v13 = v12;
  if (v5 < v9)
  {
    v14 = 0;
    v15 = *v4;
    *v4 = 0;
    v12 = v13 == 0;
    v16 = (181 * v15 + 128) >> 8;
    if (v12)
      v16 = v15;
    v17 = (181 * ((int)(((1 << v8) >> 1) + ((181 * v16 + 128) >> 8)) >> v8) + 2176) >> 12;
    v18 = v6 & 0xFFFFFFF0;
    v19 = (uint32x4_t)vdupq_n_s32(v17);
    v20 = v6 & 0xFFFFFFF8;
    v21.i64[0] = 0xFF000000FFLL;
    v21.i64[1] = 0xFF000000FFLL;
    while (1)
    {
      if (v6 < 8)
      {
        v22 = 0;
        do
        {
LABEL_24:
          v29 = v17 + *(unsigned __int8 *)(v11 + v22);
          if (v29 >= 255)
            v29 = 255;
          *(_BYTE *)(v11 + v22++) = v29 & ~(v29 >> 31);
        }
        while (v6 != v22);
        goto LABEL_12;
      }
      if (v6 >= 0x10)
      {
        v25 = 0;
        do
        {
          v26 = *(uint8x16_t *)(v11 + v25);
          v27 = vmovl_u8(*(uint8x8_t *)v26.i8);
          v28 = vmovl_high_u8(v26);
          v105.val[3] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16(v19, v28), v21), (int32x4_t)0);
          v105.val[2] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_u16(v19, *(uint16x4_t *)v28.i8), v21), (int32x4_t)0);
          v105.val[1] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16(v19, v27), v21), (int32x4_t)0);
          v105.val[0] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_u16(v19, *(uint16x4_t *)v27.i8), v21), (int32x4_t)0);
          *(int8x16_t *)(v11 + v25) = vqtbl4q_s8(v105, (int8x16_t)xmmword_19689A980);
          v25 += 16;
        }
        while (v18 != v25);
        if (v18 == v6)
          goto LABEL_12;
        v23 = v6 & 0xFFFFFFF0;
        v22 = v23;
        if ((v6 & 8) == 0)
          goto LABEL_24;
      }
      else
      {
        v23 = 0;
      }
      do
      {
        v24 = vmovl_u8(*(uint8x8_t *)(v11 + v23));
        v103.val[1] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16(v19, v24), v21), (int32x4_t)0);
        v103.val[0] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_u16(v19, *(uint16x4_t *)v24.i8), v21), (int32x4_t)0);
        *(_QWORD *)(v11 + v23) = vqtbl2q_s8(v103, (int8x16_t)xmmword_19689A990).u64[0];
        v23 += 8;
      }
      while (v20 != v23);
      v22 = v6 & 0xFFFFFFF8;
      if (v20 != v6)
        goto LABEL_24;
LABEL_12:
      ++v14;
      v11 += v3;
      if (v14 == v7)
        return result;
    }
  }
  if (v7 >= 32)
    v30 = 32;
  else
    v30 = v7;
  if ((int)v6 >= 32)
    v31 = 32;
  else
    v31 = v6;
  v93 = v6;
  v32 = v6;
  v33 = (unint64_t)(v31 - 1) >> 32 != 0;
  if ((int)v30 >= 0)
    v34 = v30;
  else
    v34 = -(int)v30;
  if (!(_DWORD)v30)
    v33 = 0;
  v99 = (v31 - 1) * v34;
  v97 = (((v31 - 1) * (unint64_t)v34) & 0xFFFFFFFF00000000) != 0;
  v98 = v33;
  v96 = ~(_DWORD)v30 >> 31;
  v95 = v31 & 0xFFFFFFFE;
  v100 = 4 * v6;
  v94 = v7;
  v92 = v3;
  v90 = (1 << v8) >> 1;
  v91 = v8;
  if ((v13 & 1) != 0)
  {
    v35 = 0;
    v36 = 2 * v30;
    v37 = v101;
    while (1)
    {
      if (v31 < 2)
        goto LABEL_46;
      v38 = v97;
      if (v99 > (v35 ^ v96))
        v38 = 1;
      if (((v38 | v98) & 1) != 0)
      {
LABEL_46:
        v39 = 0;
      }
      else
      {
        v41 = 0;
        v42 = v35;
        do
        {
          v43 = (181 * v10[(v30 + v42)] + 128) >> 8;
          v44 = &v37[v41 / 4];
          *v44 = (181 * v10[v42] + 128) >> 8;
          v44[1] = v43;
          v42 += v36;
          v41 += 8;
        }
        while (((4 * v31) & 0x3FFFFFFF8) != v41);
        v39 = v31 & 0xFFFFFFFE;
        if (v95 == v31)
          goto LABEL_41;
      }
      v40 = v35 + v30 * (unint64_t)v39;
      do
      {
        v37[v39++] = (181 * v10[v40] + 128) >> 8;
        v40 += v30;
      }
      while (v31 != v39);
LABEL_41:
      dav1d_inv_dct64_1d_c(v37, 1, -32768, 0x7FFF);
      ++v35;
      v37 = (int *)((char *)v37 + v100);
      v36 = 2 * v30;
      if (v35 == v30)
        goto LABEL_68;
    }
  }
  v45 = 0;
  v46 = v101;
  do
  {
    if (v31 < 2)
      goto LABEL_60;
    v47 = v97;
    if (v99 > (v45 ^ v96))
      v47 = 1;
    if (((v47 | v98) & 1) != 0)
    {
LABEL_60:
      v48 = 0;
LABEL_61:
      v49 = v45 + v30 * (unint64_t)v48;
      do
      {
        v46[v48++] = v10[v49];
        v49 += v30;
      }
      while (v31 != v48);
      goto LABEL_55;
    }
    v50 = 0;
    v51 = v45;
    do
    {
      v52 = v10[(v30 + v51)];
      v53 = &v46[v50 / 4];
      *v53 = v10[v51];
      v53[1] = v52;
      v51 += 2 * v30;
      v50 += 8;
    }
    while (((4 * v31) & 0x3FFFFFFF8) != v50);
    v48 = v31 & 0xFFFFFFFE;
    if (v95 != v31)
      goto LABEL_61;
LABEL_55:
    dav1d_inv_dct64_1d_c(v46, 1, -32768, 0x7FFF);
    ++v45;
    v46 = (int *)((char *)v46 + v100);
  }
  while (v45 != v30);
LABEL_68:
  bzero(v10, (2 * v31 * v30));
  v54 = v30 * v93;
  if (v54 >= 8)
  {
    v55 = v54 & 0xFFFFFFF8;
    v57 = v90;
    v56 = v91;
    v58 = vdupq_n_s32(v90);
    v59 = (int32x4_t *)v102;
    v60 = vnegq_s32(vdupq_n_s32(v91));
    v61.i64[0] = 0x7F0000007FLL;
    v61.i64[1] = 0x7F0000007FLL;
    v62.i64[0] = 0x7F0000007FLL;
    v62.i64[1] = 0x7F0000007FLL;
    v63 = v55;
    do
    {
      v64 = vmaxq_s32(vminq_s32(vshlq_s32(vaddq_s32(*v59, v58), v60), v61), v62);
      v59[-1] = vmaxq_s32(vminq_s32(vshlq_s32(vaddq_s32(v59[-1], v58), v60), v61), v62);
      *v59 = v64;
      v59 += 2;
      v63 -= 8;
    }
    while (v63);
    if (v55 != v54)
      goto LABEL_73;
  }
  else
  {
    v55 = 0;
    v57 = v90;
    v56 = v91;
LABEL_73:
    v65 = v54 - v55;
    v66 = &v101[v55];
    do
    {
      v67 = (int)(*v66 + v57) >> v56;
      if (v67 >= 0x7FFF)
        v67 = 0x7FFF;
      if (v67 <= -32768)
        v67 = -32768;
      *v66++ = v67;
      --v65;
    }
    while (v65);
  }
  v68 = v101;
  v69 = v32;
  do
  {
    dav1d_inv_dct16_1d_c(v68++, v32, -32768, 0x7FFF);
    --v69;
  }
  while (v69);
  v70 = 0;
  v71 = v32 & 0xFFFFFFF0;
  v72 = (int32x4_t *)v101;
  v73.i64[0] = 0x800000008;
  v73.i64[1] = 0x800000008;
  v74.i64[0] = 0xFF000000FFLL;
  v74.i64[1] = 0xFF000000FFLL;
  v75 = v11;
  result = v92;
  while (2)
  {
    if (v93 >= 0x10 && (v75 >= (unint64_t)v72->u64 + v100 || (unint64_t)v72 >= v11 + v32 + v70 * v92))
    {
      v80 = 0;
      v77 = (int32x4_t *)((char *)v72 + 4 * (v32 & 0xFFFFFFF0));
      do
      {
        v81 = *(uint8x16_t *)(v75 + v80);
        v82 = vmovl_u8(*(uint8x8_t *)v81.i8);
        v83 = vmovl_high_u8(v81);
        v85 = v72[2];
        v84 = v72[3];
        v87 = *v72;
        v86 = v72[1];
        v72 += 4;
        v88 = vminq_s32(vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v82.i8), vaddq_s32(v87, v73), 4uLL), v74);
        v89 = vminq_s32(vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v83.i8), vaddq_s32(v85, v73), 4uLL), v74);
        v104.val[3] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(v84, v73), 4uLL), v83), v74), (int32x4_t)0);
        v104.val[1] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(v86, v73), 4uLL), v82), v74), (int32x4_t)0);
        v104.val[2] = (int8x16_t)vmaxq_s32(v89, (int32x4_t)0);
        v104.val[0] = (int8x16_t)vmaxq_s32(v88, (int32x4_t)0);
        *(int8x16_t *)(v75 + v80) = vqtbl4q_s8(v104, (int8x16_t)xmmword_19689A980);
        v80 += 16;
      }
      while (v71 != v80);
      v76 = v32 & 0xFFFFFFF0;
      if (v71 != v32)
        goto LABEL_87;
    }
    else
    {
      v76 = 0;
      v77 = v72;
      do
      {
LABEL_87:
        v78 = v77->i32[0];
        v77 = (int32x4_t *)((char *)v77 + 4);
        v79 = *(unsigned __int8 *)(v75 + v76) + ((v78 + 8) >> 4);
        if (v79 >= 255)
          v79 = 255;
        *(_BYTE *)(v75 + v76++) = v79 & ~(v79 >> 31);
      }
      while (v32 != v76);
    }
    ++v70;
    v75 += v92;
    v72 = v77;
    if ((_DWORD)v70 != v94)
      continue;
    return result;
  }
}

_QWORD *dav1d_copy_lpf_8bpc(_QWORD *result, _QWORD *a2, int a3)
{
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  char v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  char v37;
  BOOL v38;
  char v39;
  int v40;
  int v41;
  char v42;
  int v43;
  char v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  int v60;
  char v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65[2];
  unsigned int v66;
  int v67[2];
  unsigned int v68;

  v4 = result;
  v5 = *(_DWORD *)(result[390] + 24);
  v6 = result[3];
  v7 = *(_DWORD *)(v6 + 236);
  v8 = *(_DWORD *)(v6 + 240);
  v9 = 8 * (a3 != 0);
  if (v5 <= 1)
    v10 = 0;
  else
    v10 = a3;
  v11 = result[1];
  v12 = *(_DWORD *)(v11 + 1012);
  v13 = (4 << v12) * v10;
  v14 = result[637];
  v15 = result[288];
  v16 = result[638];
  v17 = *((_DWORD *)result + 1298);
  if (*(_DWORD *)(v11 + 1068) | v17 & 1)
  {
    v63 = result[288];
    *(_QWORD *)v65 = result[637];
    *(_QWORD *)v67 = result[638];
    v18 = *((_DWORD *)result + 513);
    v19 = 4 * *((_DWORD *)result + 820);
    v20 = v12 + 6;
    if ((a3 + 1) << (v12 + 6) >= v18 - 1)
      v21 = v18 - 1;
    else
      v21 = (a3 + 1) << (v12 + 6);
    v22 = (a3 << v20) - v9;
    if ((v17 & 1) != 0 || v7 == v8)
    {
      v23 = result[254];
      v24 = *a2 - v23 * v9;
      v25 = (a3 << v20) - v9;
      v26 = v8;
      v27 = v7;
      v28 = *(_DWORD *)(result[390] + 24);
      v29 = (4 << v12) * v10;
      v59 = 8 * (a3 != 0);
      v30 = 4 * *((_DWORD *)result + 820);
      v61 = *((_DWORD *)result + 1298);
      v17 = *((_DWORD *)result + 513);
      result = backup_lpf_0(result, (char *)(result[636] + result[287] * v13), result[287], v24, v23, 0, v12, v25, v21, v19, v18, 0, 1);
      v18 = v17;
      LOBYTE(v17) = v61;
      v19 = v30;
      v9 = v59;
      v13 = v29;
      v5 = v28;
      v7 = v27;
      v8 = v26;
      v11 = v4[1];
    }
    if (v5 >= 2 && v7 != v8)
    {
      v58 = v21;
      v31 = v7;
      v32 = v5;
      v33 = v13;
      result = backup_lpf_0(v4, (char *)(v4[633] + v4[254] * 4 * a3), v4[254], *a2 - v4[254] * v9, v4[254], 0, *(_DWORD *)(v11 + 1012), v22, v58, v19, v18, 0, 0);
      v13 = v33;
      v5 = v32;
      v7 = v31;
      v11 = v4[1];
    }
    v14 = *(_QWORD *)v65;
    v16 = *(_QWORD *)v67;
    v15 = v63;
  }
  v34 = *(_DWORD *)(v11 + 1068);
  if (v34 | v17 & 6 && *((_DWORD *)v4 + 514))
  {
    v35 = v15 * v13;
    v36 = *((_DWORD *)v4 + 580);
    v68 = v36 != 3;
    if (v36 == 3)
      v37 = 2;
    else
      v37 = 1;
    v38 = v36 == 1;
    v39 = v36 == 1;
    v40 = *((_DWORD *)v4 + 513);
    if (v38)
      ++v40;
    v41 = v40 >> v39;
    v66 = *((_DWORD *)v4 + 820) << v37;
    if (v38)
      v42 = 5;
    else
      v42 = 6;
    v43 = *(_DWORD *)(v11 + 1012);
    v44 = v43 + v42;
    v45 = (a3 + 1) << v44;
    v60 = v41;
    v46 = v41 - 1;
    if (v45 >= v46)
      v45 = v46;
    v62 = v45;
    v47 = v9 >> v39;
    v64 = (a3 << v44) - v47;
    v48 = v4[255];
    v49 = v48 * 4 * a3;
    if (v34 | v17 & 2)
    {
      if ((v17 & 2) != 0 || v7 == v8)
      {
        v50 = v7;
        v51 = v5;
        v52 = v35;
        result = backup_lpf_0(v4, (char *)(v14 + v35), v4[288], a2[1] - v48 * v47, v48, v39, v43, v64, v45, v66, v60, v68, 1);
        v35 = v52;
        v5 = v51;
        v7 = v50;
        v11 = v4[1];
      }
      if (v5 >= 2 && v7 != v8)
      {
        v53 = v7;
        v54 = v5;
        v55 = v35;
        result = backup_lpf_0(v4, (char *)(v4[634] + v49), v4[255], a2[1] - v4[255] * v47, v4[255], v39, *(_DWORD *)(v11 + 1012), v64, v62, v66, v60, v68, 0);
        v35 = v55;
        v5 = v54;
        v7 = v53;
        v11 = v4[1];
      }
    }
    if (*(_DWORD *)(v11 + 1068) | v17 & 4)
    {
      if ((v17 & 4) != 0 || v7 == v8)
      {
        v56 = v7;
        v57 = v5;
        result = backup_lpf_0(v4, (char *)(v16 + v35), v4[288], a2[2] - v4[255] * v47, v4[255], v39, *(_DWORD *)(v11 + 1012), v64, v62, v66, v60, v68, 1);
        v5 = v57;
        v7 = v56;
      }
      if (v5 >= 2 && v7 != v8)
        return backup_lpf_0(v4, (char *)(v4[635] + v49), v4[255], a2[2] - v4[255] * v47, v4[255], v39, *(_DWORD *)(v4[1] + 1012), v64, v62, v66, v60, v68, 0);
    }
  }
  return result;
}

_QWORD *backup_lpf_0(_QWORD *result, char *__dst, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, int a8, int a9, unsigned int a10, int a11, unsigned int a12, int a13)
{
  uint64_t v15;
  char *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  int v35;
  uint64_t v36;
  char *v37;
  _DWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unsigned int v46;

  v15 = a5;
  v18 = __dst;
  v19 = a12;
  v20 = a13;
  v21 = result[3];
  v44 = a10;
  v45 = result;
  if (*(_DWORD *)(v21 + 456))
    v44 = ((int)(*(_DWORD *)(v21 + 240) + a12) >> a12);
  if (a8)
    v22 = 0;
  else
    v22 = -8;
  v23 = ((64 << ((a13 == 0) & a7)) + v22) >> a6;
  v24 = v23 - 2;
  if (*(_DWORD *)(result[390] + 24) == 1)
  {
    if (a8)
    {
      v25 = 4 << a7;
      memcpy(__dst, &__dst[(4 << a7) * a3], (int)v44);
      memcpy(&v18[a3], &v18[(v25 | 1) * a3], (int)v44);
      memcpy(&v18[2 * a3], &v18[(v25 | 2) * a3], (int)v44);
      v15 = a5;
      result = memcpy(&v18[2 * a3 + a3], &v18[(v25 | 3) * a3], (int)v44);
      v24 = v23 - 2;
      v20 = a13;
      v19 = a12;
    }
    v18 += 4 * a3;
  }
  v26 = v24 * v15;
  if (v20 && *(_DWORD *)(v45[3] + 236) != *(_DWORD *)(v45[3] + 240))
  {
    v35 = v23 + a8;
    if ((int)(v23 + a8) <= a9)
    {
      v36 = a4 + v26;
      v37 = (char *)v45 + 4 * v19;
      v38 = v37 + 3112;
      v39 = 0x40u >> a6;
      v42 = (unsigned int *)(v37 + 3104);
      v40 = a11 - 1;
      do
      {
        if (v40 == v35)
          v41 = 3;
        else
          v41 = 4;
        result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _DWORD))(v45[393] + 672))(v18, a3, v36, v15, v44, v41, a10, *v42, *v38);
        v18 += v41 * a3;
        if (v40 == v35)
        {
          result = memcpy(v18, &v18[-a3], (int)v44);
          v18 += a3;
        }
        v36 += v39 * v15;
        v35 += v39;
      }
      while (v35 <= a9);
    }
  }
  else
  {
    v27 = v23 + a8;
    if ((int)(v23 + a8) <= a9)
    {
      v46 = 0x40u >> a6;
      v43 = v15 * ((0x40u >> a6) - 4 + 4);
      v28 = v15 + v15 * v24;
      v29 = v15 * (v24 + 2);
      v30 = v15 * (v24 + 3);
      do
      {
        v31 = v26;
        memcpy(v18, (const void *)(a4 + v26), (int)a10);
        v32 = &v18[a3];
        memcpy(v32, (const void *)(a4 + v28), (int)a10);
        v33 = &v32[a3];
        memcpy(v33, (const void *)(a4 + v29), (int)a10);
        if (a11 - 1 == v27)
          v34 = v33;
        else
          v34 = (char *)(a4 + v30);
        result = memcpy(&v33[a3], v34, (int)a10);
        v26 = v31;
        v18 = &v33[a3 + a3];
        v27 += v46;
        a4 += v43;
      }
      while (v27 <= a9);
    }
  }
  return result;
}

uint64_t dav1d_loopfilter_sbrow_cols_8bpc(uint64_t a1, uint64_t *a2, unsigned __int16 *a3, int a4, int a5)
{
  int v5;
  unsigned int v6;
  signed int v7;
  char v8;
  int v9;
  signed int v10;
  char v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned __int16 *v27;
  int v28;
  _BOOL4 v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _WORD *v37;
  int v38;
  BOOL v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  BOOL v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  _WORD *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned __int16 *v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned __int16 *v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  unsigned __int16 *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  unsigned __int16 *v98;
  int v99;
  uint64_t v100;
  int v101;
  unsigned __int16 *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int16 *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  unsigned __int16 *v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int16 *v129;
  int v130;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  unsigned __int16 *v136;
  int v138;
  unsigned __int16 *v139;
  uint64_t v140;
  signed int v141;
  char v142;
  unsigned int v143;
  signed int v144;
  unsigned __int16 *v145;
  unsigned __int16 *v146;
  unsigned __int16 *v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  int v164;
  uint64_t v165;
  int v166;
  int v167;
  uint64_t v168;

  v168 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 1012) == 0;
  v149 = v5 & a4;
  v6 = 16 * (v5 & a4);
  v7 = 0x20u >> v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 1012))
    v8 = 5;
  else
    v8 = 4;
  v9 = *(_DWORD *)(a1 + 2056);
  v134 = v9 != 3;
  v138 = v7 * a4;
  v10 = *(_DWORD *)(a1 + 3276) - v7 * a4;
  v144 = 0x20u >> v5;
  if (v10 >= v7)
    v10 = 0x20u >> v5;
  v11 = v9 == 1;
  v141 = 0x10u >> (v9 == 1);
  v163 = v10;
  v12 = v10 + v6;
  if (v9 == 1)
    v13 = v12 + 1;
  else
    v13 = v12;
  v132 = v13 >> v11;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_DWORD *)(a1 + 3280);
  v16 = *(unsigned __int16 *)(v14 + 562);
  result = v16 << v8;
  v142 = v9 == 1;
  v133 = v6 >> v11;
  if ((int)result < v15)
  {
    result = *(_QWORD *)(a1 + 4992) + (a4 << (v8 - v11));
    v18 = *(_QWORD *)(a1 + 4984) + (a4 << v8);
    v19 = (*(int *)(a1 + 3284) + 31) & 0xFFFFFFFFFFFFFFE0;
    v20 = 1;
    if (v9 == 1)
      v21 = 3;
    else
      v21 = 4;
    do
    {
      v22 = 16 * (v16 & v5);
      v23 = v16 >> v5;
      if (v6 < v12)
      {
        v24 = 0;
        v25 = 1 << v6;
        do
        {
          v26 = v25 >> (16 * ((v25 & 0xFFFF0000) != 0));
          v27 = &a3[674 * v23 + 6 * v22 + ((v25 & 0xFFFF0000) != 0)];
          v28 = v27[4];
          v29 = (v26 & v28) != 0;
          v30 = v27[2];
          v27[4] = v28 & ~(_WORD)v26;
          v27[2] = v30 & ~(_WORD)v26;
          *v27 &= ~(_WORD)v26;
          v31 = *(unsigned __int8 *)(v18 + v24);
          v32 = ((v26 & v30) != 0) | (2 * v29);
          if (v32 < v31)
            v31 = v32;
          v27[2 * v31] |= v26;
          v25 *= 2;
          ++v24;
        }
        while (v12 - v6 != v24);
      }
      if (v9 && v133 < v132)
      {
        v33 = 0;
        v34 = (uint64_t)&a3[674 * v23 + 384 + 4 * (v22 >> v134)];
        v35 = 1 << v133;
        do
        {
          v36 = v35 >> ((v35 >> v141 != 0) << v21);
          v37 = (_WORD *)(v34 + 2 * (v35 >> v141 != 0));
          v38 = (unsigned __int16)v37[2];
          v39 = (v36 & v38) == 0;
          v37[2] = v38 & ~(_WORD)v36;
          *v37 &= ~(_WORD)v36;
          v40 = *(unsigned __int8 *)(result + v33);
          v41 = !v39;
          if (v41 < v40)
            v40 = v41;
          v37[2 * v40] |= v36;
          v35 *= 2;
          ++v33;
        }
        while (v132 - v133 != v33);
      }
      v18 += v19;
      result += (int)v19 >> v142;
      ++v20;
      v16 = *(unsigned __int16 *)(v14 + 2 * v20 + 560);
    }
    while ((int)(v16 << v8) < v15);
  }
  v42 = a1;
  v43 = *(unsigned int *)(a1 + 3288);
  if (a5 && (int)v43 > 0)
  {
    v44 = 0;
    v45 = 0x10u >> v134;
    v46 = *(_QWORD *)(a1 + 3864) + 624 * (int)v43 * (a5 - 1);
    v47 = (uint64_t)&a3[6 * v6 + 192];
    v48 = *(_DWORD *)(a1 + 3272);
    if (v9 == 3)
      result = 4;
    else
      result = 3;
    v49 = *(_DWORD *)(a1 + 3272);
    do
    {
      v50 = v49;
      v51 = __OFSUB__(v49, 32);
      v49 -= 32;
      if (v49 < 0 != v51)
        v52 = v50;
      else
        v52 = 32;
      if (v48 - 32 * (int)v44 >= 32)
        v53 = 32;
      else
        v53 = v48 - 32 * v44;
      if (v53)
      {
        v54 = 0;
        v55 = 1;
        do
        {
          v56 = v55 >> (16 * ((v55 & 0xFFFF0000) != 0));
          v57 = (_WORD *)(v47 + 1348 * v44 + 2 * ((v55 & 0xFFFF0000) != 0));
          v58 = (unsigned __int16)v57[4];
          v59 = (unsigned __int16)v57[2];
          v60 = ((v56 & v59) != 0) | (2 * ((v56 & v58) != 0));
          v57[4] = v58 & ~(_WORD)v56;
          v57[2] = v59 & ~(_WORD)v56;
          *v57 &= ~(_WORD)v56;
          v61 = *(unsigned __int8 *)(v46 + v54 + 480);
          if (v60 < v61)
            v61 = v60;
          v57[2 * v61] |= v56;
          v55 *= 2;
          ++v54;
        }
        while (v52 != v54);
      }
      if (v9)
      {
        v62 = (v53 + v134) >> v134;
        if ((_DWORD)v62)
        {
          v63 = 0;
          v64 = 1;
          do
          {
            v65 = v64 >> ((v64 >> v45 != 0) << result);
            v66 = &a3[674 * v44 + 512 + 4 * v133 + (v64 >> v45 != 0)];
            v67 = v66[2];
            v68 = (v65 & v67) != 0;
            v66[2] = v67 & ~(_WORD)v65;
            *v66 &= ~(_WORD)v65;
            v69 = *(unsigned __int8 *)(v46 + v63 + 512);
            if (v68 < v69)
              v69 = v68;
            v66[2 * v69] |= v65;
            v64 *= 2;
            ++v63;
          }
          while (v62 != v63);
        }
      }
      ++v44;
      v46 += 624;
    }
    while (v44 != v43);
  }
  if ((int)v43 >= 1)
  {
    v70 = *(_QWORD *)(a1 + 4256) + 4 * v144 * (uint64_t)a4 * *(_QWORD *)(a1 + 3264);
    v71 = *a2;
    v161 = a1 + 4320;
    if (v149)
    {
      v72 = 0;
      v73 = 0;
      v74 = 0;
      v75 = a3 + 5;
      do
      {
        v76 = *(_DWORD *)(v42 + 3272);
        if (v76 - 32 * (int)v73 >= 1)
        {
          v145 = v75;
          v150 = v73;
          v77 = 0;
          v78 = 0;
          v79 = *(_QWORD *)(v42 + 3264);
          v80 = *(_QWORD *)(v42 + 2032);
          v81 = *(_QWORD *)(v42 + 3144);
          v156 = v72;
          v82 = v76 + v72;
          if (v82 >= 32)
            v83 = 32;
          else
            v83 = v82;
          v84 = v75;
          do
          {
            if (v74 | v78)
            {
              v85 = *(v84 - 2);
              LODWORD(v165) = *(v84 - 4);
              HIDWORD(v165) = v85;
              v166 = *v84;
              v167 = 0;
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD))(v81 + 3264))(v71 + (v77 & 0xFFFFFFFC), v80, &v165, v70 + v77, v79, v161, v163);
            }
            ++v78;
            v77 += 4;
            v84 += 6;
          }
          while (v83 != v78);
          v42 = a1;
          LODWORD(v43) = *(_DWORD *)(a1 + 3288);
          v72 = v156;
          v75 = v145;
          v73 = v150;
        }
        ++v73;
        v71 += 128;
        v70 += 128;
        v72 -= 32;
        v75 += 674;
        v74 = 1;
      }
      while (v73 < (int)v43);
    }
    else if ((int)v12 <= 16)
    {
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v102 = a3 + 4;
      do
      {
        v103 = *(_DWORD *)(v42 + 3272);
        if (v103 - 32 * (int)v100 >= 1)
        {
          v147 = v102;
          v152 = v100;
          v104 = 0;
          v105 = 0;
          v106 = *(_QWORD *)(v42 + 3264);
          v107 = *(_QWORD *)(v42 + 2032);
          v108 = *(_QWORD *)(v42 + 3144);
          v158 = v99;
          v109 = v103 + v99;
          if (v109 >= 32)
            v110 = 32;
          else
            v110 = v109;
          do
          {
            if (v101 | v105)
            {
              v111 = *(v102 - 2);
              LODWORD(v165) = *(v102 - 4);
              HIDWORD(v165) = v111;
              v166 = *v102;
              v167 = 0;
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD))(v108 + 3264))(v71 + (v104 & 0xFFFFFFFC), v107, &v165, v70 + v104, v106, v161, v163);
            }
            ++v105;
            v104 += 4;
            v102 += 6;
          }
          while (v110 != v105);
          v42 = a1;
          LODWORD(v43) = *(_DWORD *)(a1 + 3288);
          v99 = v158;
          v102 = v147;
          v100 = v152;
        }
        ++v100;
        v71 += 128;
        v70 += 128;
        v99 -= 32;
        v102 += 674;
        v101 = 1;
      }
      while (v100 < (int)v43);
    }
    else
    {
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v89 = a3 + 3;
      do
      {
        v90 = *(_DWORD *)(v42 + 3272);
        if (v90 - 32 * (int)v87 >= 1)
        {
          v146 = v89;
          v151 = v87;
          v91 = 0;
          v92 = 0;
          v93 = *(_QWORD *)(v42 + 3264);
          v94 = *(_QWORD *)(v42 + 2032);
          v95 = *(_QWORD *)(v42 + 3144);
          v157 = v86;
          v96 = v90 + v86;
          if (v96 >= 32)
            v97 = 32;
          else
            v97 = v96;
          v98 = v89;
          do
          {
            if (v88 | v92)
            {
              v165 = *(_QWORD *)(v98 - 3);
              v166 = *(_DWORD *)(v98 + 1);
              v167 = 0;
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD))(v95 + 3264))(v71 + (v91 & 0xFFFFFFFC), v94, &v165, v70 + v91, v93, v161, v163);
            }
            ++v92;
            v91 += 4;
            v98 += 6;
          }
          while (v97 != v92);
          v42 = a1;
          LODWORD(v43) = *(_DWORD *)(a1 + 3288);
          v86 = v157;
          v89 = v146;
          v87 = v151;
        }
        ++v87;
        v71 += 128;
        v70 += 128;
        v86 -= 32;
        v89 += 674;
        v88 = 1;
      }
      while (v87 < (int)v43);
    }
  }
  v112 = *(_QWORD *)(v42 + 24);
  if (*(_DWORD *)(v112 + 1240))
  {
    if ((int)v43 < 1)
      return result;
  }
  else
  {
    if (*(_DWORD *)(v112 + 1244))
      v113 = (int)v43 <= 0;
    else
      v113 = 1;
    if (v113)
      return result;
  }
  v114 = 0;
  v140 = 0;
  v164 = 0;
  v159 = *(_QWORD *)(v42 + 4256) + 4 * *(_QWORD *)(v42 + 3264) * (v138 >> v142);
  v148 = v42 + 4320;
  v143 = v132 - v133;
  v139 = a3 + 387;
  v136 = a3 + 386;
  do
  {
    v135 = v114;
    v115 = *(_DWORD *)(v42 + 3272) - 32 * v114;
    if (v115 >= 32)
      v115 = 32;
    v162 = ((v115 + v134) >> v134);
    if ((int)v162 >= 1)
    {
      v116 = *(_QWORD *)(a1 + 3264);
      v155 = a2[1] + v140;
      v153 = a2[2] + v140;
      v117 = *(_QWORD *)(a1 + 2040);
      v118 = *(_QWORD *)(a1 + 3144);
      if ((_DWORD)v133)
      {
        v119 = 0;
        v120 = 0;
        v121 = v139;
        do
        {
          if (v164 | v120)
          {
            v122 = *v121;
            LODWORD(v165) = *(v121 - 2);
            HIDWORD(v165) = v122;
            v166 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD))(v118 + 3280))(v155 + (v119 & 0xFFFFFFFC), v117, &v165, v159 + v119 + 2, v116, v148, v143);
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD))(v118 + 3280))(v153 + (v119 & 0xFFFFFFFC), v117, &v165, v159 + v119 + 3, v116, v148, v143);
          }
          ++v120;
          v119 += 4;
          v121 += 4;
        }
        while (v162 != v120);
      }
      else if (v141 >= (int)v132)
      {
        v127 = 0;
        v128 = 0;
        v129 = v136;
        do
        {
          if (v164 | v128)
          {
            v130 = *v129;
            LODWORD(v165) = *(v129 - 2);
            HIDWORD(v165) = v130;
            v166 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD))(v118 + 3280))(v155 + (v127 & 0xFFFFFFFC), v117, &v165, v159 + v127 + 2, v116, v148, v143);
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD))(v118 + 3280))(v153 + (v127 & 0xFFFFFFFC), v117, &v165, v159 + v127 + 3, v116, v148, v143);
          }
          ++v128;
          v127 += 4;
          v129 += 4;
        }
        while (v162 != v128);
      }
      else
      {
        v123 = 0;
        v124 = 0;
        v125 = v139;
        do
        {
          if (v164 | v124)
          {
            v126 = (*v125 << v141) | *(v125 - 1);
            LODWORD(v165) = (*(v125 - 2) << v141) | *(v125 - 3);
            HIDWORD(v165) = v126;
            v166 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD))(v118 + 3280))(v155 + (v123 & 0xFFFFFFFC), v117, &v165, v159 + v123 + 2, v116, v148, v143);
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD))(v118 + 3280))(v153 + (v123 & 0xFFFFFFFC), v117, &v165, v159 + v123 + 3, v116, v148, v143);
          }
          ++v124;
          v123 += 4;
          v125 += 4;
        }
        while (v162 != v124);
      }
    }
    v114 = v135 + 1;
    v140 += 0x80u >> v134;
    v42 = a1;
    v159 += 4 * (0x20u >> v134);
    v139 += 674;
    v136 += 674;
    v164 = 1;
  }
  while (v135 + 1 < *(int *)(a1 + 3288));
  return result;
}

uint64_t dav1d_loopfilter_sbrow_rows_8bpc(uint64_t result, uint64_t *a2, uint64_t a3, int a4)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  int v41;
  int v43;
  unsigned __int16 *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  _BOOL4 v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v62 = a4 > 0;
  v4 = *(_DWORD *)(*(_QWORD *)(result + 8) + 1012) == 0;
  v5 = v4 & a4;
  v6 = 16 * (v4 & a4);
  v7 = 0x20u >> v4;
  v8 = *(_DWORD *)(result + 2056);
  v41 = v8 != 3;
  v9 = v7 * a4;
  v10 = *(_DWORD *)(result + 3276) - v7 * a4;
  if (v10 >= (int)v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(result + 3276) - v7 * a4;
  v12 = v8 == 1;
  v49 = v6;
  v47 = v11;
  if (v8 == 1)
    v13 = v11 + v6 + 1;
  else
    v13 = v11 + v6;
  LODWORD(v14) = *(_DWORD *)(result + 3288);
  v51 = result;
  if ((int)v14 >= 1 && v10 >= 1)
  {
    v38 = v13;
    v39 = v12;
    v43 = v7 * a4;
    v15 = 0;
    v59 = result + 4320;
    v45 = a3;
    v16 = *a2;
    v17 = a3 + 192 * v5 + 394;
    v18 = *(_QWORD *)(result + 4256) + 4 * *(_QWORD *)(result + 3264) * a4 * v7 + 1;
    do
    {
      v55 = v16;
      v57 = v15;
      v19 = *(_DWORD *)(result + 3272) - 32 * v15;
      if (v19 >= 32)
        v19 = 32;
      v61 = v19;
      v20 = *(_QWORD *)(result + 2032);
      v21 = *(_QWORD *)(result + 3264);
      v52 = v18;
      v53 = v17;
      v22 = *(_QWORD *)(result + 3144);
      v23 = v49;
      v24 = v47;
      do
      {
        if (v23 | v62)
        {
          v63 = *(_QWORD *)(v17 - 10);
          v64 = *(_DWORD *)(v17 - 2);
          v65 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD))(v22 + 3272))(v16, v20, &v63, v18, v21, v59, v61);
        }
        v16 += 4 * v20;
        v17 += 12;
        ++v23;
        v18 += 4 * v21;
        --v24;
      }
      while (v24);
      v15 = v57 + 1;
      v16 = v55 + 128;
      result = v51;
      v14 = *(int *)(v51 + 3288);
      v17 = v53 + 1348;
      v18 = v52 + 128;
    }
    while (v57 + 1 < v14);
    a3 = v45;
    v9 = v43;
    v12 = v39;
    v13 = v38;
  }
  v25 = *(_QWORD *)(result + 24);
  if (*(_DWORD *)(v25 + 1240))
  {
    if ((int)v14 < 1)
      return result;
  }
  else if ((int)v14 < 1 || !*(_DWORD *)(v25 + 1244))
  {
    return result;
  }
  v60 = v13 >> v12;
  v40 = v49 >> v12;
  if ((int)v40 < (int)(v13 >> v12))
  {
    v26 = 0;
    v27 = 0;
    v54 = 0x10u >> v41;
    v28 = *(_QWORD *)(result + 4256) + 4 * *(_QWORD *)(result + 3264) * (v9 >> v12) + 2;
    v29 = (unsigned __int16 *)(a3 + 8 * v40 + 1030);
    v30 = result + 4320;
    do
    {
      v31 = *(_QWORD *)(result + 3264);
      v56 = a2[2];
      v58 = a2[1];
      v32 = *(_QWORD *)(result + 2040);
      v48 = v27;
      v50 = v26;
      v33 = *(_DWORD *)(result + 3272) - 32 * v26;
      if (v33 >= 32)
        v33 = 32;
      v34 = ((v33 + v41) >> v41);
      v35 = *(_QWORD *)(result + 3144);
      v44 = v29;
      v46 = v28;
      v36 = v40;
      do
      {
        if (v36 | v62)
        {
          v37 = (*v29 << v54) | *(v29 - 1);
          LODWORD(v63) = (*(v29 - 2) << v54) | *(v29 - 3);
          HIDWORD(v63) = v37;
          v64 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 3288))(v58 + v27, v32, &v63, v28, v31, v30, v34);
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 3288))(v56 + v27, v32, &v63, v28 + 1, v31, v30, v34);
        }
        ++v36;
        v28 += 4 * v31;
        v29 += 4;
        v27 += 4 * v32;
      }
      while (v60 != v36);
      v26 = v50 + 1;
      v27 = v48 + (0x80u >> v41);
      result = v51;
      v28 = v46 + 4 * (0x20u >> v41);
      v29 = v44 + 674;
    }
    while (v50 + 1 < *(int *)(v51 + 3288));
  }
  return result;
}

_BYTE *loop_filter_h_sb128y_c_0(_BYTE *result, uint64_t a2, _DWORD *a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  int v6;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  unsigned int v16;

  v6 = a3[1] | *a3 | a3[2];
  if (v6)
  {
    v11 = result;
    v12 = 4 * a2;
    v13 = 4 * a5;
    v14 = 1;
    do
    {
      if ((v14 & v6) != 0)
      {
        v16 = *a4;
        if (*a4 || (v16 = *(a4 - 4), *(a4 - 4)))
        {
          if ((a3[2] & v14) != 0)
            v15 = 2;
          else
            v15 = (a3[1] & v14) != 0;
          result = loop_filter_0(v11, *(unsigned __int8 *)(a6 + v16), *(unsigned __int8 *)(a6 + v16 + 64), v16 >> 4, a2, 1, 4 << v15);
        }
      }
      v14 *= 2;
      v11 += v12;
      a4 += v13;
    }
    while ((v6 & -v14) != 0);
  }
  return result;
}

_BYTE *loop_filter_v_sb128y_c_0(_BYTE *result, uint64_t a2, _DWORD *a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  int v6;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  char v14;
  unsigned int v15;

  v6 = a3[1] | *a3 | a3[2];
  if (v6)
  {
    v11 = result;
    v12 = -4 * a5;
    v13 = 1;
    do
    {
      if ((v13 & v6) != 0)
      {
        v15 = *a4;
        if (*a4 || (v15 = a4[v12], a4[v12]))
        {
          if ((a3[2] & v13) != 0)
            v14 = 2;
          else
            v14 = (a3[1] & v13) != 0;
          result = loop_filter_0(v11, *(unsigned __int8 *)(a6 + v15), *(unsigned __int8 *)(a6 + v15 + 64), v15 >> 4, 1, a2, 4 << v14);
        }
      }
      v13 *= 2;
      v11 += 4;
      a4 += 4;
    }
    while ((v6 & -v13) != 0);
  }
  return result;
}

_BYTE *loop_filter_h_sb128uv_c_0(_BYTE *result, uint64_t a2, _DWORD *a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  int v6;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  unsigned int v18;

  v6 = a3[1] | *a3;
  if (*(_QWORD *)a3)
  {
    v11 = result;
    v12 = 4 * a2;
    v13 = 4 * a5;
    v14 = 1;
    do
    {
      if ((v14 & v6) != 0)
      {
        v18 = *a4;
        if (*a4 || (v18 = *(a4 - 4), *(a4 - 4)))
        {
          v15 = v18 >> 4;
          v16 = (unsigned __int8 *)(a6 + v18);
          if ((a3[1] & v14) != 0)
            v17 = 6;
          else
            v17 = 4;
          result = loop_filter_0(v11, *v16, v16[64], v15, a2, 1, v17);
        }
      }
      v14 *= 2;
      v11 += v12;
      a4 += v13;
    }
    while ((v6 & -v14) != 0);
  }
  return result;
}

_BYTE *loop_filter_v_sb128uv_c_0(_BYTE *result, uint64_t a2, _DWORD *a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  int v6;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  unsigned int v17;

  v6 = a3[1] | *a3;
  if (*(_QWORD *)a3)
  {
    v11 = result;
    v12 = 1;
    v13 = -4 * a5;
    do
    {
      if ((v12 & v6) != 0)
      {
        v17 = *a4;
        if (*a4 || (v17 = a4[v13], a4[v13]))
        {
          v14 = v17 >> 4;
          v15 = (unsigned __int8 *)(a6 + v17);
          if ((a3[1] & v12) != 0)
            v16 = 6;
          else
            v16 = 4;
          result = loop_filter_0(v11, *v15, v15[64], v14, 1, a2, v16);
        }
      }
      v12 *= 2;
      v11 += 4;
      a4 += 4;
    }
    while ((v6 & -v12) != 0);
  }
  return result;
}

_BYTE *loop_filter_0(_BYTE *result, int a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  char v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  _BOOL4 v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  _BOOL4 v51;
  int v53;
  int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;

  v8 = 4;
  do
  {
    v14 = result[-2 * a6];
    v15 = result[-a6];
    v16 = *result;
    v17 = result[a6];
    v18 = v14 - v15;
    if (v14 - v15 < 0)
      v18 = v15 - v14;
    if ((int)v18 > a3)
      goto LABEL_27;
    v19 = v17 - v16;
    if (v17 - v16 < 0)
      v19 = v16 - v17;
    if (v19 <= a3)
    {
      v46 = v15 - v16;
      if (v15 - v16 < 0)
        v46 = v16 - v15;
      v47 = v14 - v17;
      if (v14 - v17 < 0)
        v47 = v17 - v14;
      v20 = (int)((v47 >> 1) + 2 * v46) <= a2;
      if (a7 < 5)
      {
LABEL_71:
        v21 = 0;
        v22 = 0;
        goto LABEL_72;
      }
    }
    else
    {
LABEL_27:
      v20 = 0;
      if (a7 < 5)
        goto LABEL_71;
    }
    v21 = result[-3 * a6];
    v22 = result[2 * a6];
    v23 = v21 - v14;
    if (v21 - v14 < 0)
      v23 = v14 - v21;
    v24 = v22 - v17;
    if (v22 - v17 < 0)
      v24 = v17 - v22;
    v25 = v24 <= a3;
    v26 = v23 <= a3 && v25;
    v20 &= v26;
    if (a7 >= 7)
    {
      v27 = result[-4 * a6];
      v28 = v27 - v21;
      if (v27 - v21 < 0)
        v28 = v21 - v27;
      if (v28 > a3)
        goto LABEL_20;
      v29 = result[3 * a6];
      v30 = v29 - v22;
      if (v29 - v22 < 0)
        v30 = v22 - v29;
      if (v30 > a3)
        v20 = 0;
      if ((v20 & 1) == 0)
        goto LABEL_20;
      if (a7 >= 0x10)
      {
        v31 = result[-7 * a6];
        v32 = result[-6 * a6];
        v33 = result[-5 * a6];
        v34 = result[4 * a6];
        v35 = result[5 * a6];
        v36 = result[6 * a6];
        v37 = v31 - v15;
        if (v31 - v15 < 0)
          v37 = v15 - v31;
        if (v37 > 1)
          goto LABEL_89;
        v38 = v32 - v15;
        if (v32 - v15 < 0)
          v38 = v15 - v32;
        if (v38 > 1)
          goto LABEL_89;
        v39 = v33 - v15;
        if (v33 - v15 < 0)
          v39 = v15 - v33;
        if (v39 > 1)
          goto LABEL_89;
        v40 = v34 - v16;
        if (v34 - v16 < 0)
          v40 = v16 - v34;
        if (v40 > 1)
          goto LABEL_89;
        v41 = v35 - v16;
        if (v35 - v16 < 0)
          v41 = v16 - v35;
        if (v41 > 1)
        {
LABEL_89:
          v42 = 0;
          v44 = 0;
          v56 = v21 - v15;
          if (v21 - v15 < 0)
            v56 = v15 - v21;
          if ((v56 | v18) > 1)
            goto LABEL_92;
        }
        else
        {
          v42 = 0;
          v43 = v36 - v16;
          if (v36 - v16 < 0)
            v43 = v16 - v36;
          v44 = v43 < 2;
          v45 = v21 - v15;
          if (v21 - v15 < 0)
            v45 = v15 - v21;
          if ((v45 | v18) > 1)
            goto LABEL_92;
        }
LABEL_78:
        v49 = v17 - v16;
        if (v17 - v16 < 0)
          v49 = v16 - v17;
        if (v49 <= 1)
        {
          v50 = v22 - v16;
          if (v22 - v16 < 0)
            v50 = v16 - v22;
          v51 = v50 < 2;
          if (a7 >= 8)
          {
LABEL_93:
            v57 = v27 - v15;
            if (v27 - v15 < 0)
              v57 = v15 - v27;
            if (v57 <= 1)
            {
              v58 = v29 - v16;
              if (v29 - v16 < 0)
                v58 = v16 - v29;
              if (v58 >= 2)
                v51 = 0;
              if (((v42 | (!v44 || !v51)) & 1) == 0)
              {
                v79 = v36;
                v70 = v32;
                v71 = 2 * v32;
                v72 = v33;
                v80 = v14 + 8 + v15;
                result[-6 * a6] = (v21 + v27 + 2 * v33 + v71 + v80 + v16 - v31 + 8 * v31) >> 4;
                v73 = v80 + v16 + v17;
                v74 = v73 + 2 * v27;
                result[-5 * a6] = (v74 + v21 + 2 * v33 + v71 + 5 * v31) >> 4;
                result[-4 * a6] = (v74 + 2 * v21 + v22 + v70 + 2 * v33 + 4 * v31) >> 4;
                v75 = 2 * v14 + 8;
                v76 = v15 + v16 + v17;
                result[-3 * a6] = (v76 + v75 + 2 * v27 + 2 * v21 + v22 + v29 + v33 + v70 + 3 * v31) >> 4;
                v77 = v75 + 2 * v15;
                result[-2 * a6] = (v77 + v16 + v17 + v27 + 2 * v21 + v22 + v29 + v34 + v72 + v70 + 2 * v31) >> 4;
                result[-a6] = (v77 + 2 * v16 + v17 + v27 + v21 + v22 + v29 + v35 + v34 + v72 + v70 + v31) >> 4;
                v78 = 2 * v16 + 2 * v17;
                *result = (2 * v15 + v14 + 8 + v78 + v27 + v21 + v22 + v29 + v79 + v35 + v34 + v72 + v70) >> 4;
                result[a6] = (v78 + v80 + v27 + v21 + 2 * v22 + v29 + v35 + 2 * v79 + v34 + v72) >> 4;
                result[2 * a6] = (2 * v17
                                              + v27
                                              + v21
                                              + v80
                                              + v16
                                              + 2 * v22
                                              + 2 * v29
                                              + v79
                                              + v35
                                              + 2 * v79
                                              + v34) >> 4;
                result[3 * a6] = (v21 + 2 * v22 + 2 * v29 + v35 + 4 * v79 + 2 * v34 + v73) >> 4;
                result[4 * a6] = (v22 + 2 * v29 + v79 + 4 * v79 + 2 * v35 + 2 * v34 + v73) >> 4;
                result[5 * a6] = (v76 + v22 + v29 + v79 + 4 * v79 + 2 * v79 + 2 * v35 + 2 * v34 + 8) >> 4;
                goto LABEL_20;
              }
              if (v51)
              {
                v59 = v15 + 4 + v16 + v17;
                v60 = v15 + 4 + v14;
                result[-3 * a6] = (3 * v27 + v60 + v16 + 2 * v21) >> 3;
                result[-2 * a6] = (v21 + v59 + 2 * (v27 + v14)) >> 3;
                result[-a6] = (v14 + 2 * v15 + v16 + v17 + v27 + v21 + v22 + 4) >> 3;
                *result = (v60 + 2 * v16 + v17 + v21 + v22 + v29) >> 3;
                result[a6] = (v60 + v16 + 2 * v17 + v22 + 2 * v29) >> 3;
                result[2 * a6] = (v59 + 2 * v22 + 3 * v29) >> 3;
                goto LABEL_20;
              }
            }
            goto LABEL_103;
          }
          goto LABEL_84;
        }
LABEL_92:
        v51 = 0;
        if (a7 >= 8)
          goto LABEL_93;
LABEL_84:
        if (a7 == 6 && v51)
        {
          v53 = 2 * v15 + 4;
          v54 = v53 + 2 * v14;
          result[-2 * a6] = (v54 + v16 + 3 * v21) >> 3;
          result[-a6] = (2 * v16 + v17 + v21 + v54) >> 3;
          *result = (v53 + v14 + 2 * v16 + 2 * v17 + v22) >> 3;
          v55 = (v15 + 2 * v16 + 2 * v17 + v22 + 2 * v22 + 4) >> 3;
LABEL_125:
          result[a6] = v55;
          goto LABEL_20;
        }
        goto LABEL_103;
      }
LABEL_75:
      v44 = 0;
      v36 = 0;
      v35 = 0;
      v34 = 0;
      v33 = 0;
      v32 = 0;
      v31 = 0;
      v42 = 1;
      v48 = v21 - v15;
      if (v21 - v15 < 0)
        v48 = v15 - v21;
      if ((v48 | v18) > 1)
        goto LABEL_92;
      goto LABEL_78;
    }
LABEL_72:
    if ((v20 & 1) == 0)
      goto LABEL_20;
    if (a7 >= 6)
    {
      v27 = 0;
      v29 = 0;
      goto LABEL_75;
    }
LABEL_103:
    if ((int)v18 <= a4)
    {
      v61 = v17 - v16;
      if (v17 - v16 < 0)
        v61 = v16 - v17;
      if (v61 <= a4)
      {
        v62 = 3 * (v16 - v15);
        if (v62 >= 127)
          v62 = 127;
        if (v62 <= -128)
          v62 = -128;
        if (v62 >= 123)
          v63 = 123;
        else
          v63 = v62;
        v64 = (v63 + 4) >> 3;
        if (v62 >= 124)
          v62 = 124;
        v65 = v15 + ((v62 + 3) >> 3);
        if (v65 >= 255)
          v65 = 255;
        result[-a6] = v65 & ~(v65 >> 31);
        v66 = v16 - v64;
        if (v16 - v64 >= 255)
          v66 = 255;
        *result = v66 & ~(v66 >> 31);
        v67 = (v64 + 1) >> 1;
        v68 = v67 + v14;
        if (v67 + v14 >= 255)
          v68 = 255;
        result[-2 * a6] = v68 & ~(v68 >> 31);
        v69 = v17 - v67;
        if (v69 >= 255)
          v69 = 255;
        v55 = v69 & ~(v69 >> 31);
        goto LABEL_125;
      }
    }
    v9 = v14 - v17;
    if (v14 - v17 >= 127)
      v9 = 127;
    if (v9 <= -128)
      v9 = -128;
    v10 = v9 + 3 * (v16 - v15);
    if (v10 >= 127)
      v10 = 127;
    if (v10 <= -128)
      v10 = -128;
    if (v10 >= 123)
      v11 = 123;
    else
      v11 = v10;
    if (v10 >= 124)
      v10 = 124;
    v12 = v15 + ((v10 + 3) >> 3);
    if (v12 >= 255)
      v12 = 255;
    result[-a6] = v12 & ~(v12 >> 31);
    v13 = v16 - ((v11 + 4) >> 3);
    if (v13 >= 255)
      v13 = 255;
    *result = v13 & ~(v13 >> 31);
LABEL_20:
    result += a5;
    --v8;
  }
  while (v8);
  return result;
}

unint64_t wiener_c_0(uint64_t a1, uint64_t a2)
{
  char *v2;
  __int16 *v3;
  __int16 *v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t result;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int8x16_t *v27;
  _DWORD *v28;
  int32x4_t v29;
  unsigned int v30;
  int32x4_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t *v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int16x8_t *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int32x4_t v64;
  int32x4_t v65;
  int8x16_t *v66;
  _DWORD *v67;
  _DWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  _DWORD *v71;
  _DWORD *v72;
  _DWORD *v73;
  uint64_t i;
  uint64_t v75;
  unint64_t v76;
  const __int16 *v77;
  int16x4_t v78;
  int32x4_t v79;
  const __int16 *v80;
  int16x4_t v81;
  int32x4_t v82;
  const __int16 *v83;
  int16x4_t v84;
  int32x4_t v85;
  const __int16 *v86;
  int16x4_t v87;
  int32x4_t v88;
  const __int16 *v89;
  int16x4_t v90;
  int32x4_t v91;
  const __int16 *v92;
  int16x4_t v93;
  int32x4_t v94;
  const __int16 *v95;
  int16x4_t v96;
  int32x4_t v97;
  int8x16_t *v98;
  uint16x8_t v99;
  uint16x8_t v100;
  int32x4_t v101;
  uint16x8_t v102;
  uint16x8_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  uint16x8_t v108;
  uint16x8_t v109;
  int32x4_t v110;
  int32x4_t v111;
  uint16x8_t v112;
  uint16x8_t v113;
  int32x4_t v114;
  int32x4_t v115;
  uint16x8_t v116;
  uint16x8_t v117;
  int32x4_t v118;
  int32x4_t v119;
  uint16x8_t v120;
  uint16x8_t v121;
  int32x4_t v122;
  int32x4_t v123;
  uint16x8_t v124;
  uint16x8_t v125;
  const __int16 *v126;
  int16x4_t v127;
  const __int16 *v128;
  int16x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  const __int16 *v132;
  int16x4_t v133;
  int32x4_t v134;
  const __int16 *v135;
  int16x4_t v136;
  const __int16 *v137;
  int16x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  const __int16 *v141;
  int16x4_t v142;
  int32x4_t v143;
  const __int16 *v144;
  int16x4_t v145;
  uint64_t v146;
  _DWORD *v147;
  _DWORD *v148;
  _DWORD *v149;
  int32x4_t v150;
  _DWORD *v151;
  _DWORD *v152;
  _DWORD *v153;
  _DWORD *v154;
  uint16x8_t v155;
  uint16x8_t v156;
  int32x4_t v157;
  uint16x8_t v158;
  uint16x8_t v159;
  uint16x8_t v160;
  uint16x8_t v161;
  uint16x8_t v162;
  int v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  int v167;
  int v168;
  unsigned int v169;
  int v170;
  int32x4_t v171;
  int v172;
  _DWORD v173[13650];
  _BYTE v174[6];
  _BYTE v175[27310];
  int8x16x2_t v176;
  int8x16x2_t v177;
  int8x16x2_t v178;
  int8x16x2_t v179;
  int8x16x4_t v180;

  v2 = (char *)MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  *(_QWORD *)&v175[27294] = *MEMORY[0x1E0C80C00];
  v165 = v2;
  v166 = v9;
  result = (unint64_t)padding_0((uint64_t)v174, v2, v9, v10, v11, v7, v5, v12);
  v169 = v8;
  if ((int)v8 < 1 || v6 < -5)
    return result;
  v14 = 0;
  v167 = v6;
  v15 = v6 + 6;
  if (v6 + 6 <= 1)
    v15 = 1;
  v168 = v15;
  v16 = *v4;
  v17 = v4[1];
  v18 = v4[2];
  v19 = v4[4];
  v20 = v4[5];
  v21 = v8;
  v22 = v4[3] + 128;
  v23 = vdupq_n_s32(v16);
  v24 = vdupq_n_s32(v17);
  v25 = vdupq_n_s32(v18);
  v26 = vdupq_n_s32(v19);
  result = (unint64_t)v174;
  v27 = (int8x16_t *)v175;
  v28 = v173;
  v29 = vdupq_n_s32(v20);
  v30 = v4[6];
  v31 = vdupq_n_s32(v22);
  v171 = vdupq_n_s32(v30);
  do
  {
    v32 = *(unsigned __int8 *)result;
    v33 = *(unsigned __int8 *)(result + 3);
    v34 = *(unsigned __int8 *)(result + 1);
    v35 = *(unsigned __int8 *)(result + 4);
    v36 = *(unsigned __int8 *)(result + 5);
    v170 = v14;
    v37 = 0;
    if (v8 >= 0x10)
    {
      v38 = vdupq_n_s8(v36);
      v39 = vdupq_n_s8(v35);
      v40 = vdupq_n_s8(v34);
      v41 = vdupq_n_s8(v33);
      v42 = v27;
      v43 = vdupq_n_s8(v32);
      do
      {
        v44 = v40;
        v45 = v38;
        v40 = *(int8x16_t *)((char *)v42 - 4);
        v177.val[1] = vextq_s8(v44, v40, 0xFuLL);
        v177.val[0] = vqtbl1q_s8(v43, (int8x16_t)xmmword_19689ADA0);
        v46 = vqtbl1q_s8(v44, (int8x16_t)xmmword_19689ADA0);
        v47 = *v42++;
        v38 = v47;
        v179.val[1] = vextq_s8(v45, v47, 0xFuLL);
        v178.val[1] = vextq_s8(v39, v179.val[1], 0xFuLL);
        v178.val[0] = vqtbl1q_s8(v41, (int8x16_t)xmmword_19689ADA0);
        v179.val[0] = vqtbl1q_s8(v39, (int8x16_t)xmmword_19689ADA0);
        v48 = vqtbl1q_s8(v45, (int8x16_t)xmmword_19689ADA0);
        v49 = vdupq_n_s32(0x4004u);
        v50.i64[0] = 0x1F0000001FLL;
        v50.i64[1] = 0x1F0000001FLL;
        v51 = (int16x8_t *)((char *)v28 + v37);
        *v51 = vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v31, (int32x4_t)vqtbl2q_s8(v178, (int8x16_t)xmmword_19689ADB0)), v23, (int32x4_t)vqtbl2q_s8(v177, (int8x16_t)xmmword_19689ADB0)), v24, (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)(&v40 - 1), (int8x16_t)xmmword_19689ADB0)),
                                            v25,
                                            (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_196889CC0)),
                                          v26,
                                          (int32x4_t)vqtbl2q_s8(v179, (int8x16_t)xmmword_19689ADB0)),
                                        v29,
                                        (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)(&v38 - 1), (int8x16_t)xmmword_19689ADB0)),
                                      v171,
                                      (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_196889CC0)),
                                    v49),
                                  3uLL),
                                v50),
                              (int32x4_t)0),
                 (int16x8_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v31, (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_19689AE20)), v23, (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_19689ADC0)), v24, (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_19689AE10)), v25, (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_196889CD0)), v26, (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_19689ADC0)), v29,
                                        (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_19689AE10)),
                                      v171,
                                      (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_196889CD0)),
                                    v49),
                                  3uLL),
                                v50),
                              (int32x4_t)0));
        v51[1] = vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v31, (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_19689AE40)), v23, (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_19689ADE0)), v24, (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_19689ADF0)), v25, (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_196889CB0)),
                                            v26,
                                            (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_19689ADE0)),
                                          v29,
                                          (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_19689ADF0)),
                                        v171,
                                        (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_196889CB0)),
                                      v49),
                                    3uLL),
                                  v50),
                                (int32x4_t)0),
                   (int16x8_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v31, (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_19689AE30)), v23, (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_19689ADD0)), v24, (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_19689AE00)), v25, (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_196889CA0)), v26,
                                            (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_19689ADD0)),
                                          v29,
                                          (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_19689AE00)),
                                        v171,
                                        (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_196889CA0)),
                                      v49),
                                    3uLL),
                                  v50),
                                (int32x4_t)0));
        v39 = v179.val[1];
        v41 = v178.val[1];
        v43 = v177.val[1];
        v37 += 32;
      }
      while (((2 * v8) & 0x1FFFFFFE0) != v37);
      if ((v8 & 0xFFFFFFF0) == (unint64_t)v8)
        goto LABEL_6;
      LOBYTE(v36) = v38.i8[15];
      LOBYTE(v35) = v38.i8[14];
      LOBYTE(v34) = v40.i8[15];
      LOBYTE(v33) = v38.i8[13];
      v37 = v8 & 0xFFFFFFF0;
      LOBYTE(v32) = v40.i8[14];
    }
    do
    {
      v52 = v32;
      LOBYTE(v32) = v34;
      v53 = v33;
      LOBYTE(v33) = v35;
      v54 = v35;
      LOBYTE(v35) = v36;
      v55 = v34;
      v34 = *(unsigned __int8 *)(result + v37 + 2);
      v36 = v27->u8[v37];
      v56 = (int)(v22 * v53
                + v52 * v16
                + v55 * v17
                + v34 * v18
                + v54 * v19
                + v35 * v20
                + v36 * v30
                + 16388) >> 3;
      if (v56 >= 0x1FFF)
        v56 = 0x1FFF;
      *((_WORD *)v28 + v37++) = v56 & ~(unsigned __int16)(v56 >> 31);
    }
    while (v8 != v37);
LABEL_6:
    result += 390;
    v28 += 195;
    v14 = v170 + 1;
    v27 = (int8x16_t *)((char *)v27 + 390);
  }
  while (v170 + 1 != v168);
  if (v167 >= 1)
  {
    v57 = 0;
    v58 = 0;
    v59 = 195;
    v60 = 390;
    LODWORD(result) = 585;
    v61 = 780;
    v62 = 975;
    v63 = 1170;
    v64 = vdupq_n_s32(0xFFFC0400);
    v65.i64[0] = 0xFF000000FFLL;
    v65.i64[1] = 0xFF000000FFLL;
    v66 = (int8x16_t *)v165;
    do
    {
      v67 = &v173[v63 & 0x7FFFFFFF];
      v68 = &v173[v62 & 0x7FFFFFFF];
      v69 = &v173[v61 & 0x7FFFFFFF];
      v70 = &v173[result & 0x7FFFFFFF];
      v71 = &v173[v60 & 0x7FFFFFFF];
      v72 = &v173[v59 & 0x7FFFFFFF];
      v73 = &v173[v57 & 0x7FFFFFFF];
      v172 = v57;
      if (v169 < 8)
      {
        i = 0;
        goto LABEL_33;
      }
      if (&v165[v58 * v166] < (char *)v4 + 30 && v4 + 8 < (__int16 *)&v165[v169 + v58 * v166])
      {
        for (i = 0; i != v169; v66->i8[i++] = v163 & ~(v163 >> 31))
        {
LABEL_33:
          v163 = (v4[9] * *((unsigned __int16 *)v72 + i)
                + v4[8] * *((unsigned __int16 *)v73 + i)
                + v4[10] * *((unsigned __int16 *)v71 + i)
                + v4[11] * *((unsigned __int16 *)v70 + i)
                + v4[12] * *((unsigned __int16 *)v69 + i)
                + v4[13] * *((unsigned __int16 *)v68 + i)
                + v4[14] * *((unsigned __int16 *)v67 + i)
                - 261120) >> 11;
          if (v163 >= 255)
            v163 = 255;
        }
        goto LABEL_18;
      }
      if (v169 >= 0x10)
      {
        v76 = 0;
        v77 = v4 + 8;
        v78 = vld1_dup_s16(v77);
        v79 = vmovl_s16(v78);
        v80 = v4 + 9;
        v81 = vld1_dup_s16(v80);
        v82 = vmovl_s16(v81);
        v83 = v4 + 10;
        v84 = vld1_dup_s16(v83);
        v85 = vmovl_s16(v84);
        v86 = v4 + 11;
        v87 = vld1_dup_s16(v86);
        v88 = vmovl_s16(v87);
        v89 = v4 + 12;
        v90 = vld1_dup_s16(v89);
        v91 = vmovl_s16(v90);
        v92 = v4 + 13;
        v93 = vld1_dup_s16(v92);
        v94 = vmovl_s16(v93);
        v95 = v4 + 14;
        v96 = vld1_dup_s16(v95);
        v97 = vmovl_s16(v96);
        v98 = v66;
        do
        {
          v100 = *(uint16x8_t *)&v73[v76 / 4];
          v99 = *(uint16x8_t *)&v73[v76 / 4 + 4];
          v101 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v99.i8);
          v103 = *(uint16x8_t *)&v72[v76 / 4];
          v102 = *(uint16x8_t *)&v72[v76 / 4 + 4];
          v104 = (int32x4_t)vmovl_high_u16(v99);
          v105 = vmlaq_s32(vmulq_s32(v82, (int32x4_t)vmovl_u16(*(uint16x4_t *)v103.i8)), v79, (int32x4_t)vmovl_u16(*(uint16x4_t *)v100.i8));
          v106 = vmlaq_s32(vmulq_s32(v82, (int32x4_t)vmovl_u16(*(uint16x4_t *)v102.i8)), v79, v101);
          v107 = vmlaq_s32(vmulq_s32(v82, (int32x4_t)vmovl_high_u16(v103)), v79, (int32x4_t)vmovl_high_u16(v100));
          v108 = *(uint16x8_t *)&v71[v76 / 4];
          v109 = *(uint16x8_t *)&v71[v76 / 4 + 4];
          v110 = vmlaq_s32(vmlaq_s32(vmulq_s32(v82, (int32x4_t)vmovl_high_u16(v102)), v79, v104), v85, (int32x4_t)vmovl_high_u16(v109));
          v111 = vmlaq_s32(v106, v85, (int32x4_t)vmovl_u16(*(uint16x4_t *)v109.i8));
          v113 = *(uint16x8_t *)&v70[v76 / 4];
          v112 = *(uint16x8_t *)&v70[v76 / 4 + 4];
          v114 = vmlaq_s32(vmlaq_s32(v105, v85, (int32x4_t)vmovl_u16(*(uint16x4_t *)v108.i8)), v88, (int32x4_t)vmovl_u16(*(uint16x4_t *)v113.i8));
          v115 = vmlaq_s32(vmlaq_s32(v107, v85, (int32x4_t)vmovl_high_u16(v108)), v88, (int32x4_t)vmovl_high_u16(v113));
          v116 = *(uint16x8_t *)&v69[v76 / 4];
          v117 = *(uint16x8_t *)&v69[v76 / 4 + 4];
          v118 = vmlaq_s32(vmlaq_s32(v110, v88, (int32x4_t)vmovl_high_u16(v112)), v91, (int32x4_t)vmovl_high_u16(v117));
          v119 = vmlaq_s32(vmlaq_s32(v111, v88, (int32x4_t)vmovl_u16(*(uint16x4_t *)v112.i8)), v91, (int32x4_t)vmovl_u16(*(uint16x4_t *)v117.i8));
          v121 = *(uint16x8_t *)&v68[v76 / 4];
          v120 = *(uint16x8_t *)&v68[v76 / 4 + 4];
          v122 = vmlaq_s32(vmlaq_s32(v114, v91, (int32x4_t)vmovl_u16(*(uint16x4_t *)v116.i8)), v94, (int32x4_t)vmovl_u16(*(uint16x4_t *)v121.i8));
          v123 = vmlaq_s32(vmlaq_s32(v115, v91, (int32x4_t)vmovl_high_u16(v116)), v94, (int32x4_t)vmovl_high_u16(v121));
          v124 = *(uint16x8_t *)&v67[v76 / 4];
          v125 = *(uint16x8_t *)&v67[v76 / 4 + 4];
          v180.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(v118, v94, (int32x4_t)vmovl_high_u16(v120)), v97, (int32x4_t)vmovl_high_u16(v125)), v64), 0xBuLL), v65), (int32x4_t)0);
          v180.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(v123, v97, (int32x4_t)vmovl_high_u16(v124)), v64), 0xBuLL), v65), (int32x4_t)0);
          v180.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(v119, v94, (int32x4_t)vmovl_u16(*(uint16x4_t *)v120.i8)), v97, (int32x4_t)vmovl_u16(*(uint16x4_t *)v125.i8)), v64), 0xBuLL), v65), (int32x4_t)0);
          v180.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(v122, v97, (int32x4_t)vmovl_u16(*(uint16x4_t *)v124.i8)), v64), 0xBuLL), v65), (int32x4_t)0);
          *v98++ = vqtbl4q_s8(v180, (int8x16_t)xmmword_19689A980);
          v76 += 32;
        }
        while (((2 * v169) & 0x1FFFFFFE0) != v76);
        if ((v21 & 0xFFFFFFF0) == (unint64_t)v169)
          goto LABEL_18;
        i = v21 & 0xFFFFFFF0;
        v75 = i;
        if ((v21 & 8) == 0)
          goto LABEL_33;
      }
      else
      {
        v75 = 0;
      }
      v126 = v4 + 8;
      v127 = vld1_dup_s16(v126);
      v128 = v4 + 9;
      v129 = vld1_dup_s16(v128);
      v130 = vmovl_s16(v127);
      v131 = vmovl_s16(v129);
      v132 = v4 + 10;
      v133 = vld1_dup_s16(v132);
      v134 = vmovl_s16(v133);
      v135 = v4 + 11;
      v136 = vld1_dup_s16(v135);
      v137 = v4 + 12;
      v138 = vld1_dup_s16(v137);
      v139 = vmovl_s16(v136);
      v140 = vmovl_s16(v138);
      v141 = v4 + 13;
      v142 = vld1_dup_s16(v141);
      v143 = vmovl_s16(v142);
      v144 = v4 + 14;
      v145 = vld1_dup_s16(v144);
      v146 = 2 * v75;
      v147 = &v173[v63 & 0x7FFFFFFF];
      v148 = &v173[v62 & 0x7FFFFFFF];
      v149 = &v173[v61 & 0x7FFFFFFF];
      v150 = vmovl_s16(v145);
      v151 = &v173[result & 0x7FFFFFFF];
      v152 = &v173[v60 & 0x7FFFFFFF];
      v153 = &v173[v59 & 0x7FFFFFFF];
      v154 = v73;
      v164 = v21 & 0xFFFFFFF8;
      do
      {
        v155 = *(uint16x8_t *)((char *)v154 + v146);
        v156 = *(uint16x8_t *)((char *)v153 + v146);
        v157 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v156.i8);
        v158 = *(uint16x8_t *)((char *)v152 + v146);
        v159 = *(uint16x8_t *)((char *)v151 + v146);
        v160 = *(uint16x8_t *)((char *)v149 + v146);
        v161 = *(uint16x8_t *)((char *)v148 + v146);
        v162 = *(uint16x8_t *)((char *)v147 + v146);
        v176.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v131, (int32x4_t)vmovl_high_u16(v156)), v130, (int32x4_t)vmovl_high_u16(v155)), v134, (int32x4_t)vmovl_high_u16(v158)), v139, (int32x4_t)vmovl_high_u16(v159)), v140, (int32x4_t)vmovl_high_u16(v160)), v143,
                                             (int32x4_t)vmovl_high_u16(v161)),
                                           v150,
                                           (int32x4_t)vmovl_high_u16(v162)),
                                         v64),
                                       0xBuLL),
                                     v65),
                                   (int32x4_t)0);
        v176.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v131, v157), v130, (int32x4_t)vmovl_u16(*(uint16x4_t *)v155.i8)), v134, (int32x4_t)vmovl_u16(*(uint16x4_t *)v158.i8)), v139, (int32x4_t)vmovl_u16(*(uint16x4_t *)v159.i8)), v140, (int32x4_t)vmovl_u16(*(uint16x4_t *)v160.i8)), v143,
                                             (int32x4_t)vmovl_u16(*(uint16x4_t *)v161.i8)),
                                           v150,
                                           (int32x4_t)vmovl_u16(*(uint16x4_t *)v162.i8)),
                                         v64),
                                       0xBuLL),
                                     v65),
                                   (int32x4_t)0);
        *(uint64_t *)((char *)v66->i64 + v75) = vqtbl2q_s8(v176, (int8x16_t)xmmword_19689A990).u64[0];
        v154 += 4;
        v153 += 4;
        v75 += 8;
        v152 += 4;
        v151 += 4;
        v149 += 4;
        v148 += 4;
        v147 += 4;
      }
      while (v164 != v75);
      i = v21 & 0xFFFFFFF8;
      if (v164 != v169)
        goto LABEL_33;
LABEL_18:
      ++v58;
      v57 = v172 + 195;
      v59 += 195;
      v60 += 195;
      result = (result + 195);
      v61 += 195;
      v62 += 195;
      v63 += 195;
      v66 = (int8x16_t *)((char *)v66 + v166);
    }
    while (v58 != v167);
  }
  return result;
}

uint64_t sgr_5x5_c_0(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int16x8_t v21;
  int32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  int16x8_t v25;
  uint16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  uint64_t v29;
  int16x8_t v30;
  int16x8_t v31;
  uint8x16_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  uint32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int v47;
  char v48;
  _BYTE v49[27308];
  int8x16x2_t v50;
  int8x16x4_t v51;

  v2 = (char *)MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v2;
  *(_QWORD *)&v49[27300] = *MEMORY[0x1E0C80C00];
  padding_0((uint64_t)v49, v2, v9, v12, v13, v7, v5, v14);
  result = selfguided_filter_0();
  if (v8 >= 1 && v6 >= 1)
  {
    v16 = 0;
    v17 = *(__int16 *)(v4 + 8);
    v18 = v8 & 0xFFFFFFF0;
    v19 = v8 & 0xFFFFFFF8;
    v20 = &v48;
    v21 = vdupq_n_s16(v17);
    v22.i64[0] = 0xFF000000FFLL;
    v22.i64[1] = 0xFF000000FFLL;
    do
    {
      if (v8 < 8)
      {
        for (result = 0; result != v8; v11[result++] = v47 & ~(v47 >> 31))
        {
LABEL_17:
          v47 = v11[result] + ((int)(*(__int16 *)&v20[2 * result] * v17 + 1024) >> 11);
          if (v47 >= 255)
            v47 = 255;
        }
        goto LABEL_4;
      }
      if (v8 >= 0x10)
      {
        v29 = 0;
        result = (uint64_t)v20;
        do
        {
          v30 = *(int16x8_t *)result;
          v31 = *(int16x8_t *)(result + 16);
          result += 32;
          v32 = *(uint8x16_t *)&v11[v29];
          v33 = vmovl_u8(*(uint8x8_t *)v32.i8);
          v34 = vmovl_high_u8(v32);
          v35.i64[0] = 0x40000000400;
          v35.i64[1] = 0x40000000400;
          v36 = vmlal_s16(v35, *(int16x4_t *)v21.i8, *(int16x4_t *)v30.i8);
          v37.i64[0] = 0x40000000400;
          v37.i64[1] = 0x40000000400;
          v38 = vmlal_s16(v37, *(int16x4_t *)v21.i8, *(int16x4_t *)v31.i8);
          v39.i64[0] = 0x40000000400;
          v39.i64[1] = 0x40000000400;
          v40 = vmlal_high_s16(v39, v21, v31);
          v31.i64[0] = 0x40000000400;
          v31.i64[1] = 0x40000000400;
          v41 = (uint32x4_t)vshrq_n_s32(vmlal_high_s16((int32x4_t)v31, v21, v30), 0xBuLL);
          v42 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(v40, 0xBuLL), v34);
          v43 = (int32x4_t)vaddw_high_u16(v41, v33);
          v44 = vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v34.i8), v38, 0xBuLL);
          v45 = vminq_s32(vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v33.i8), v36, 0xBuLL), v22);
          v46 = vminq_s32(v44, v22);
          v51.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(v42, v22), (int32x4_t)0);
          v51.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(v43, v22), (int32x4_t)0);
          v51.val[2] = (int8x16_t)vmaxq_s32(v46, (int32x4_t)0);
          v51.val[0] = (int8x16_t)vmaxq_s32(v45, (int32x4_t)0);
          *(int8x16_t *)&v11[v29] = vqtbl4q_s8(v51, (int8x16_t)xmmword_19689A980);
          v29 += 16;
        }
        while (v18 != v29);
        if (v18 == v8)
          goto LABEL_4;
        v23 = v8 & 0xFFFFFFF0;
        result = v23;
        if ((v8 & 8) == 0)
          goto LABEL_17;
      }
      else
      {
        v23 = 0;
      }
      v24 = 2 * v23;
      do
      {
        v25 = *(int16x8_t *)&v20[v24];
        v26 = vmovl_u8(*(uint8x8_t *)&v11[v23]);
        v27.i64[0] = 0x40000000400;
        v27.i64[1] = 0x40000000400;
        v28.i64[0] = 0x40000000400;
        v28.i64[1] = 0x40000000400;
        v50.val[1] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vmlal_high_s16(v28, v21, v25), 0xBuLL), v26), v22), (int32x4_t)0);
        v50.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v26.i8), vmlal_s16(v27, *(int16x4_t *)v21.i8, *(int16x4_t *)v25.i8), 0xBuLL), v22), (int32x4_t)0);
        *(_QWORD *)&v11[v23] = vqtbl2q_s8(v50, (int8x16_t)xmmword_19689A990).u64[0];
        v23 += 8;
        v24 += 16;
      }
      while (v19 != v23);
      result = v8 & 0xFFFFFFF8;
      if (v19 != v8)
        goto LABEL_17;
LABEL_4:
      v11 += v10;
      ++v16;
      v20 += 768;
    }
    while (v16 != v6);
  }
  return result;
}

uint64_t sgr_3x3_c_0(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int16x8_t v21;
  int32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  int16x8_t v25;
  uint16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  uint64_t v29;
  int16x8_t v30;
  int16x8_t v31;
  uint8x16_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  uint32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int v47;
  char v48;
  _BYTE v49[27308];
  int8x16x2_t v50;
  int8x16x4_t v51;

  v2 = (char *)MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v2;
  *(_QWORD *)&v49[27300] = *MEMORY[0x1E0C80C00];
  padding_0((uint64_t)v49, v2, v9, v12, v13, v7, v5, v14);
  result = selfguided_filter_0();
  if (v8 >= 1 && v6 >= 1)
  {
    v16 = 0;
    v17 = *(__int16 *)(v4 + 10);
    v18 = v8 & 0xFFFFFFF0;
    v19 = v8 & 0xFFFFFFF8;
    v20 = &v48;
    v21 = vdupq_n_s16(v17);
    v22.i64[0] = 0xFF000000FFLL;
    v22.i64[1] = 0xFF000000FFLL;
    do
    {
      if (v8 < 8)
      {
        for (result = 0; result != v8; v11[result++] = v47 & ~(v47 >> 31))
        {
LABEL_17:
          v47 = v11[result] + ((int)(*(__int16 *)&v20[2 * result] * v17 + 1024) >> 11);
          if (v47 >= 255)
            v47 = 255;
        }
        goto LABEL_4;
      }
      if (v8 >= 0x10)
      {
        v29 = 0;
        result = (uint64_t)v20;
        do
        {
          v30 = *(int16x8_t *)result;
          v31 = *(int16x8_t *)(result + 16);
          result += 32;
          v32 = *(uint8x16_t *)&v11[v29];
          v33 = vmovl_u8(*(uint8x8_t *)v32.i8);
          v34 = vmovl_high_u8(v32);
          v35.i64[0] = 0x40000000400;
          v35.i64[1] = 0x40000000400;
          v36 = vmlal_s16(v35, *(int16x4_t *)v21.i8, *(int16x4_t *)v30.i8);
          v37.i64[0] = 0x40000000400;
          v37.i64[1] = 0x40000000400;
          v38 = vmlal_s16(v37, *(int16x4_t *)v21.i8, *(int16x4_t *)v31.i8);
          v39.i64[0] = 0x40000000400;
          v39.i64[1] = 0x40000000400;
          v40 = vmlal_high_s16(v39, v21, v31);
          v31.i64[0] = 0x40000000400;
          v31.i64[1] = 0x40000000400;
          v41 = (uint32x4_t)vshrq_n_s32(vmlal_high_s16((int32x4_t)v31, v21, v30), 0xBuLL);
          v42 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(v40, 0xBuLL), v34);
          v43 = (int32x4_t)vaddw_high_u16(v41, v33);
          v44 = vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v34.i8), v38, 0xBuLL);
          v45 = vminq_s32(vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v33.i8), v36, 0xBuLL), v22);
          v46 = vminq_s32(v44, v22);
          v51.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(v42, v22), (int32x4_t)0);
          v51.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(v43, v22), (int32x4_t)0);
          v51.val[2] = (int8x16_t)vmaxq_s32(v46, (int32x4_t)0);
          v51.val[0] = (int8x16_t)vmaxq_s32(v45, (int32x4_t)0);
          *(int8x16_t *)&v11[v29] = vqtbl4q_s8(v51, (int8x16_t)xmmword_19689A980);
          v29 += 16;
        }
        while (v18 != v29);
        if (v18 == v8)
          goto LABEL_4;
        v23 = v8 & 0xFFFFFFF0;
        result = v23;
        if ((v8 & 8) == 0)
          goto LABEL_17;
      }
      else
      {
        v23 = 0;
      }
      v24 = 2 * v23;
      do
      {
        v25 = *(int16x8_t *)&v20[v24];
        v26 = vmovl_u8(*(uint8x8_t *)&v11[v23]);
        v27.i64[0] = 0x40000000400;
        v27.i64[1] = 0x40000000400;
        v28.i64[0] = 0x40000000400;
        v28.i64[1] = 0x40000000400;
        v50.val[1] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vmlal_high_s16(v28, v21, v25), 0xBuLL), v26), v22), (int32x4_t)0);
        v50.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v26.i8), vmlal_s16(v27, *(int16x4_t *)v21.i8, *(int16x4_t *)v25.i8), 0xBuLL), v22), (int32x4_t)0);
        *(_QWORD *)&v11[v23] = vqtbl2q_s8(v50, (int8x16_t)xmmword_19689A990).u64[0];
        v23 += 8;
        v24 += 16;
      }
      while (v19 != v23);
      result = v8 & 0xFFFFFFF8;
      if (v19 != v8)
        goto LABEL_17;
LABEL_4:
      v11 += v10;
      ++v16;
      v20 += 768;
    }
    while (v16 != v6);
  }
  return result;
}

uint64_t sgr_mix_c_0(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int16x8_t *v21;
  int16x8_t *v22;
  int16x8_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int32x4_t v26;
  uint64_t i;
  uint64_t v28;
  int16x8_t v29;
  int16x8_t v30;
  uint16x8_t v31;
  int32x4_t v32;
  int16x8_t *v33;
  int16x8_t *v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  uint8x16_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int v44;
  char v45;
  int v46;
  _BYTE v47[27308];
  int8x16x2_t v48;
  int8x16x4_t v49;

  v2 = (char *)MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v2;
  *(_QWORD *)&v47[27300] = *MEMORY[0x1E0C80C00];
  padding_0((uint64_t)v47, v2, v9, v12, v13, v7, v5, v14);
  selfguided_filter_0();
  result = selfguided_filter_0();
  if (v8 >= 1 && v6 >= 1)
  {
    v16 = 0;
    v17 = *(__int16 *)(v4 + 8);
    v18 = *(__int16 *)(v4 + 10);
    v19 = v8 & 0xFFFFFFF0;
    v20 = v8 & 0xFFFFFFF8;
    v21 = (int16x8_t *)&v45;
    v22 = (int16x8_t *)&v46;
    v23 = vdupq_n_s16(v17);
    v24 = vdupq_n_s16(v18);
    v25.i64[0] = 0x40000000400;
    v25.i64[1] = 0x40000000400;
    v26.i64[0] = 0xFF000000FFLL;
    v26.i64[1] = 0xFF000000FFLL;
    do
    {
      if (v8 < 8)
      {
        for (i = 0; i != v8; v11[i++] = result)
        {
LABEL_17:
          v44 = v11[i] + ((int)(v21->i16[i] * v18 + v22->i16[i] * v17 + 1024) >> 11);
          if (v44 >= 255)
            v44 = 255;
          result = v44 & ~(v44 >> 31);
        }
        goto LABEL_4;
      }
      if (v8 >= 0x10)
      {
        result = 0;
        v33 = v22;
        v34 = v21;
        do
        {
          v35 = *v33;
          v36 = v33[1];
          v33 += 2;
          v38 = *v34;
          v37 = v34[1];
          v34 += 2;
          v39 = *(uint8x16_t *)&v11[result];
          v40 = vmovl_u8(*(uint8x8_t *)v39.i8);
          v41 = vmovl_high_u8(v39);
          v42 = vminq_s32(vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v40.i8), vaddq_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v35.i8), *(int16x4_t *)v24.i8, *(int16x4_t *)v38.i8), v25), 0xBuLL), v26);
          v43 = vminq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(vmlal_high_s16(vmull_high_s16(v23, v35), v24, v38), v25), 0xBuLL), v40), v26);
          v49.val[3] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(vmlal_high_s16(vmull_high_s16(v23, v36), v24, v37), v25), 0xBuLL), v41), v26), (int32x4_t)0);
          v49.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v41.i8), vaddq_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v36.i8), *(int16x4_t *)v24.i8, *(int16x4_t *)v37.i8), v25), 0xBuLL), v26), (int32x4_t)0);
          v49.val[1] = (int8x16_t)vmaxq_s32(v43, (int32x4_t)0);
          v49.val[0] = (int8x16_t)vmaxq_s32(v42, (int32x4_t)0);
          *(int8x16_t *)&v11[result] = vqtbl4q_s8(v49, (int8x16_t)xmmword_19689A980);
          result += 16;
        }
        while (v19 != result);
        if (v19 == v8)
          goto LABEL_4;
        result = v8 & 0xFFFFFFF0;
        i = result;
        if ((v8 & 8) == 0)
          goto LABEL_17;
      }
      else
      {
        result = 0;
      }
      v28 = 2 * result;
      do
      {
        v29 = *(int16x8_t *)((char *)v22 + v28);
        v30 = *(int16x8_t *)((char *)v21 + v28);
        v31 = vmovl_u8(*(uint8x8_t *)&v11[result]);
        v32 = vminq_s32(vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v31.i8), vaddq_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v29.i8), *(int16x4_t *)v24.i8, *(int16x4_t *)v30.i8), v25), 0xBuLL), v26);
        v48.val[1] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vaddq_s32(vmlal_high_s16(vmull_high_s16(v23, v29), v24, v30), v25), 0xBuLL), v31), v26), (int32x4_t)0);
        v48.val[0] = (int8x16_t)vmaxq_s32(v32, (int32x4_t)0);
        *(_QWORD *)&v11[result] = vqtbl2q_s8(v48, (int8x16_t)xmmword_19689A990).u64[0];
        result += 8;
        v28 += 16;
      }
      while (v20 != result);
      i = v8 & 0xFFFFFFF8;
      if (v20 != v8)
        goto LABEL_17;
LABEL_4:
      v11 += v10;
      ++v16;
      v21 += 48;
      v22 += 48;
    }
    while (v16 != v6);
  }
  return result;
}

void *padding_0(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, char a8)
{
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  size_t v19;
  size_t v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  void *result;
  int v31;
  uint64_t v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  size_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  int v41;
  unsigned __int8 *v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v59;
  uint64_t v61;

  v10 = a2;
  v11 = a1;
  v12 = a8 & 1;
  v13 = v12 | (2 * v12);
  v14 = 3 * (v12 + ((a8 & 2) >> 1)) + a6;
  v15 = !(a8 & 1) | (2 * !(a8 & 1));
  v16 = a1 + v15;
  v17 = &a2[-v13];
  v18 = (char *)(a5 - v13);
  v61 = 3 * (v12 + ((a8 & 2) >> 1)) + a6;
  v59 = v12;
  v57 = a8 & 2;
  v56 = v13;
  v53 = &a2[-v13];
  if ((a8 & 4) == 0)
  {
    v52 = (char *)(a5 - v13);
    v19 = v14;
    memcpy((void *)(a1 + v15), &a2[-v13], v14);
    memcpy((void *)(v16 + 390), v17, v19);
    v20 = v19;
    v18 = v52;
    memcpy((void *)(v16 + 780), v17, v20);
    if (v12)
    {
      v21 = *(_WORD *)(a4 + 1);
      *(_BYTE *)(v16 + 2) = *(_BYTE *)(a4 + 3);
      *(_WORD *)v16 = v21;
      v22 = *(_WORD *)(a4 + 1);
      *(_BYTE *)(v16 + 392) = *(_BYTE *)(a4 + 3);
      *(_WORD *)(v16 + 390) = v22;
      v23 = *(_WORD *)(a4 + 1);
      *(_BYTE *)(v16 + 782) = *(_BYTE *)(a4 + 3);
      *(_WORD *)(v16 + 780) = v23;
    }
    v24 = v16 + 1170;
    v55 = v16;
    if ((a8 & 8) == 0)
      goto LABEL_5;
LABEL_8:
    v37 = &v18[6 * a3];
    v38 = &v37[a3];
    v39 = 390 * a7;
    memcpy((void *)(v24 + v39), v37, (int)v61);
    memcpy((void *)(v24 + (int)v39 + 390), v38, (int)v61);
    v25 = a7;
    result = memcpy((void *)(v24 + (int)v39 + 780), v38, (int)v61);
    v31 = v59;
    goto LABEL_9;
  }
  v36 = v14;
  memcpy((void *)(a1 + v15), (const void *)(a5 - v13), v14);
  memcpy((void *)(v16 + 390), v18, v36);
  memcpy((void *)(v16 + 780), &v18[a3], v36);
  v24 = v16 + 1170;
  v55 = v16;
  if ((a8 & 8) != 0)
    goto LABEL_8;
LABEL_5:
  v25 = a7;
  v26 = &v53[(a7 - 1) * a3];
  v27 = 390 * a7;
  v54 = v24 + v27;
  memcpy((void *)(v24 + v27), v26, (int)v61);
  v28 = (_BYTE *)(v24 + (int)v27 + 390);
  memcpy(v28, v26, (int)v61);
  v29 = (_BYTE *)(v24 + (int)v27 + 780);
  result = memcpy(v29, v26, (int)v61);
  v31 = v59;
  if (v59)
  {
    v32 = a4 + 4 * (a7 - 1);
    v33 = *(_WORD *)(v32 + 1);
    *(_BYTE *)(v54 + 2) = *(_BYTE *)(v32 + 3);
    *(_WORD *)v54 = v33;
    v34 = *(_WORD *)(v32 + 1);
    v28[2] = *(_BYTE *)(v32 + 3);
    *(_WORD *)v28 = v34;
    v35 = *(_WORD *)(v32 + 1);
    v29[2] = *(_BYTE *)(v32 + 3);
    *(_WORD *)v29 = v35;
  }
LABEL_9:
  if (v25 >= 1)
  {
    v40 = (char *)(v15 + v56 + v11 + 1170);
    v41 = v25;
    do
    {
      result = memcpy(v40, v10, (int)v61 - (int)v56);
      v10 += a3;
      v40 += 390;
      --v41;
    }
    while (v41);
  }
  if (v25 >= -5 && !v57)
  {
    v42 = (unsigned __int8 *)(v55 + (int)v61 - 1);
    v43 = v55 + v61;
    v44 = ((v25 + 5) & ~((v25 + 5) >> 31)) + 1;
    do
    {
      v45 = *v42;
      *(_BYTE *)(v43 + 2) = v45;
      *(_WORD *)v43 = v45 | (v45 << 8);
      v43 += 390;
      v42 += 390;
      --v44;
    }
    while (v44);
  }
  if (v31)
  {
    if (v25 >= 1)
    {
      v48 = v11 + 1170;
      v49 = v25;
      v50 = (__int16 *)(a4 + 1);
      do
      {
        v51 = *v50;
        *(_BYTE *)(v48 + 2) = *((_BYTE *)v50 + 2);
        *(_WORD *)v48 = v51;
        v48 += 390;
        v50 += 2;
        --v49;
      }
      while (v49);
    }
  }
  else if (v25 >= -5)
  {
    v46 = ((v25 + 5) & ~((v25 + 5) >> 31)) + 1;
    do
    {
      v47 = *(unsigned __int8 *)(v11 + v15);
      *(_BYTE *)(v11 + 2) = v47;
      *(_WORD *)v11 = v47 | (v47 << 8);
      v11 += 390;
      --v46;
    }
    while (v46);
  }
  return result;
}

uint64_t selfguided_filter_0()
{
  uint64_t result;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int8x16_t v6;
  int16x8_t v7;
  int32x4_t v8;
  uint64_t v9;
  int8x16_t *v10;
  char *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int *v29;
  uint64_t *v30;
  unsigned __int8 *v31;
  int v32;
  __int16 v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  char *v39;
  int v40;
  _WORD *v41;
  _DWORD *v42;
  int16x4_t v43;
  int32x4_t v44;
  uint64_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  unint64_t v51;
  uint64_t *v52;
  int8x16_t v53;
  int8x16_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  _WORD *v67;
  _DWORD *v68;
  __int32 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  unsigned __int8 *v75;
  char *v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  _DWORD *v84;
  unsigned __int8 *v85;
  _WORD *v86;
  uint64_t v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  int v92;
  int v93;
  unsigned __int8 *v94;
  _DWORD *v95;
  __int16 v96;
  int v97;
  int v98;
  unint64_t v99;
  _WORD *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  _WORD *v105;
  _DWORD *v106;
  char *v107;
  int32x2_t v108;
  uint64_t v109;
  int32x4_t v110;
  unint64_t v111;
  int8x16_t *v112;
  int8x16_t v113;
  int16x8_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int16x8_t v119;
  int32x4_t v120;
  uint64_t v121;
  _DWORD *v122;
  _WORD *v123;
  _WORD *v124;
  __int32 v125;
  _DWORD *v126;
  __int32 v127;
  int v128;
  int i;
  uint64_t v130;
  __int16 *v131;
  unsigned int *v132;
  int v133;
  unsigned int *v134;
  __int16 *v135;
  uint64_t v136;
  int v137;
  unsigned int v138;
  int v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int8x16_t v151;
  _DWORD *v152;
  int8x16_t v153;
  uint64_t *v154;
  int8x16_t v155;
  _WORD *v156;
  int32x4_t v157;
  int8x16_t v158;
  int32x4_t v159;
  unint64_t v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  char *v166;
  unint64_t v167;
  uint64_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int16x8_t v171;
  _QWORD *v172;
  int16x8_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int8x16_t v191;
  int8x16_t v192;
  int8x16_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int8x16_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t *v209;
  __int32 v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  __int16 *v216;
  int v217;
  _DWORD *v218;
  int v219;
  uint64_t v220;
  int v221;
  int v222;
  unsigned __int32 v223;
  char *v224;
  _WORD *v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  int32x4_t v229;
  int16x8_t v230;
  _QWORD *v231;
  int16x8_t v232;
  int8x16_t *v233;
  int16x8_t v234;
  int16x8_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int8x16_t v240;
  int32x4_t v241;
  int16x8_t v242;
  int16x8_t v243;
  int16x8_t *v244;
  _DWORD *v245;
  int v246;
  _WORD *v247;
  int v248;
  uint64_t v249;
  int v250;
  unsigned int v251;
  unsigned int v252;
  _DWORD *v253;
  _WORD *v254;
  int32x4_t v255;
  int32x4_t v256;
  unint64_t v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  BOOL v263;
  unint64_t v264;
  uint64_t v265;
  int32x4_t v266;
  int16x8_t v267;
  int32x4_t v268;
  int32x4_t v269;
  int32x4_t v270;
  int8x16_t v271;
  int16x8_t v272;
  _DWORD *v273;
  int16x8_t v274;
  int8x16_t v275;
  int8x16_t v276;
  int8x16_t v277;
  int16x8_t v278;
  int16x8_t v279;
  int16x8_t v280;
  int16x8_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int16x8_t v286;
  int16x8_t v287;
  int32x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int32x4_t v295;
  int32x4_t v296;
  int32x4_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int32x4_t v301;
  int32x4_t v302;
  int32x4_t v303;
  int32x4_t v304;
  int32x4_t v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  __int16 *v311;
  int v312;
  _DWORD *v313;
  unsigned int v314;
  int v315;
  int v316;
  uint64_t v317;
  int v318;
  int v319;
  int v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  uint64_t v327;
  unint64_t v328;
  int32x4_t v329;
  int32x4_t v330;
  int16x8_t v331;
  int16x8_t v332;
  char *v333;
  int32x4_t v334;
  int32x4_t v335;
  int32x4_t v336;
  int32x4_t v337;
  int8x16_t *v338;
  int8x16_t v339;
  int8x16_t v340;
  int16x8_t v341;
  int16x8_t v342;
  int16x8_t v343;
  int16x8_t v344;
  int32x4_t v345;
  int32x4_t v346;
  int32x4_t v347;
  int8x16_t *v348;
  int32x4_t v349;
  int16x8_t v350;
  int16x8_t v351;
  int32x4_t v352;
  int8x16_t *v353;
  int16x8_t v354;
  int16x8_t v355;
  int32x4_t v356;
  int32x4_t v357;
  int32x4_t v358;
  int32x4_t v359;
  int32x4_t v360;
  int32x4_t v361;
  int32x4_t v362;
  int8x16_t v363;
  int32x4_t v364;
  int32x4_t v365;
  int32x4_t v366;
  int32x4_t v367;
  int32x4_t v368;
  int16x8_t *v369;
  unsigned __int8 *v370;
  __int16 *v371;
  char *v372;
  uint64_t v373;
  int v374;
  unsigned int v375;
  int v376;
  int v377;
  int v378;
  int32x4_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  uint64_t v385;
  int v386;
  unint64_t v387;
  uint64_t v388;
  unsigned int v389;
  _WORD *v390;
  _WORD *v391;
  char *v392;
  _WORD v393[390];
  int v394;
  uint64_t v395;
  _WORD v396[25737];
  _DWORD v397[390];
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  _DWORD v401[389];
  uint64_t v402;
  _QWORD v403[12675];

  result = MEMORY[0x1E0C80A78]();
  v387 = result;
  v403[12673] = *MEMORY[0x1E0C80C00];
  v388 = v1;
  v389 = v2;
  v9 = v1 + 1173;
  v10 = (int8x16_t *)((char *)&v395 + 2);
  v11 = (char *)v401;
  if (v4 == 25)
    v12 = 164;
  else
    v12 = 455;
  if (v4 == 25)
    v13 = 2;
  else
    v13 = 1;
  v386 = v3;
  if (v4 != 25)
  {
    if (v2 < -3)
      goto LABEL_52;
    if (v3 < -1)
      return result;
    v382 = v1 + 1173;
    v70 = v1 + 390;
    v71 = (v2 + 5);
    v378 = v13;
    v72 = (v3 + 1);
    v73 = (v72 + 1) & 0x1FFFFFFFELL;
    v74 = (char *)&v394 + 2;
    v75 = (unsigned __int8 *)(v1 + 1171);
    v76 = (char *)&v398 + 4;
    v77 = 1;
    while (1)
    {
      result = (uint64_t)&v393[v77];
      v78 = &v397[v77];
      v79 = v70 + v77;
      v80 = *(unsigned __int8 *)(v70 + v77);
      v81 = v80 * v80;
      v82 = *(unsigned __int8 *)(v70 + v77 + 390);
      v83 = v82 * v82;
      if (v3 == -1)
      {
        v92 = 2;
      }
      else
      {
        v79 += 390 * v73;
        v78 += 390 * v73;
        result += 780 * v73;
        v84 = v76;
        v85 = v75;
        v86 = v74;
        v87 = (v72 + 1) & 0x1FFFFFFFELL;
        do
        {
          v88 = v80;
          v89 = v81;
          v80 = *v85;
          v90 = v82 + v80;
          v82 = v85[390];
          v81 = v80 * v80;
          v91 = v83 + v80 * v80;
          v83 = v82 * v82;
          *v86 = v90 + v88;
          v86[390] = v90 + v82;
          *v84 = v91 + v89;
          v84[390] = v91 + v82 * v82;
          v86 += 780;
          v85 += 780;
          v84 += 780;
          v87 -= 2;
        }
        while (v87);
        v92 = v73 + 2;
        if (v72 + 1 == v73)
          goto LABEL_28;
      }
      v93 = v3 + 4 - v92;
      v94 = (unsigned __int8 *)(v79 + 780);
      v95 = v78 + 390;
      result += 780;
      do
      {
        v96 = v80 + v82;
        LOWORD(v80) = v82;
        v82 = *v94;
        v97 = v81 + v83;
        v81 = v83;
        v83 = v82 * v82;
        *(_WORD *)result = v96 + v82;
        *v95 = v97 + v82 * v82;
        v94 += 390;
        v95 += 390;
        result += 780;
        --v93;
      }
      while (v93);
LABEL_28:
      ++v77;
      v74 += 2;
      ++v75;
      v76 += 4;
      if (v77 == v71)
      {
        v11 = (char *)v401;
        v9 = v382;
        v13 = v378;
        if ((int)v389 < -1)
          goto LABEL_52;
        v101 = v389 + 4;
        v102 = v101 - 2;
        v103 = (v101 - 2) & 0xFFFFFFFFFFFFFFF8;
        v104 = 2;
        v105 = v393;
        v106 = v397;
        v107 = (char *)&v399 + 4;
        while (2)
        {
          v6.i16[0] = v105[391];
          v6.i16[2] = v105[392];
          v108 = *(int32x2_t *)(v106 + 391);
          if (v102 >= 8)
          {
            v8.i64[1] = *(_QWORD *)(v106 + 391);
            v7.i32[3] = *(_DWORD *)(v105 + 391);
            v110 = vdupq_lane_s32(v108, 0);
            v6 = (int8x16_t)vdupq_lane_s16(*(int16x4_t *)v6.i8, 0);
            v111 = (v101 - 2) & 0xFFFFFFFFFFFFFFF8;
            v112 = v10;
            result = (uint64_t)v107;
            do
            {
              v113 = (int8x16_t)v7;
              v7 = *(int16x8_t *)v112;
              v114 = (int16x8_t)vextq_s8(v113, *v112, 0xEuLL);
              v115 = (int32x4_t)vextq_s8((int8x16_t)v8, *(int8x16_t *)result, 0xCuLL);
              v116 = vuzp2q_s32(v110, v8);
              v8 = *(int32x4_t *)(result + 16);
              v117.i64[0] = vuzp2q_s32(v116, v110).u64[0];
              v118 = (int32x4_t)vextq_s8(*(int8x16_t *)result, (int8x16_t)v8, 0xCuLL);
              v117.i64[1] = *(_QWORD *)result;
              v119 = vaddq_s16(v114, *(int16x8_t *)v112);
              v120 = vaddq_s32(v117, vaddq_s32(v115, *(int32x4_t *)result));
              *(int32x4_t *)(result + 12) = vaddq_s32(vaddq_s32((int32x4_t)vextq_s8(*(int8x16_t *)result, (int8x16_t)v8, 8uLL), v118), v8);
              *(int32x4_t *)(result - 4) = v120;
              result += 32;
              *(int16x8_t *)((char *)&v112[-1] + 14) = vaddq_s16((int16x8_t)vextq_s8(v6, (int8x16_t)v114, 0xEuLL), v119);
              ++v112;
              v110 = v118;
              v6 = (int8x16_t)v114;
              v111 -= 8;
            }
            while (v111);
            if (v102 != v103)
            {
              v6.i32[0] = v7.u16[6];
              v6.i32[1] = v7.u16[7];
              v108 = (int32x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
              v109 = v103 | 2;
              goto LABEL_49;
            }
          }
          else
          {
            v109 = 2;
LABEL_49:
            v121 = 0;
            v122 = &v106[v109];
            result = v101 - v109;
            v123 = &v105[v109];
            do
            {
              v124 = &v123[v121];
              v125 = (unsigned __int16)v124[391];
              v126 = &v122[v121];
              v127 = v126[391];
              *(int32x2_t *)v7.i8 = vdup_lane_s32(*(int32x2_t *)v6.i8, 1);
              v124[390] = vadd_s32(*(int32x2_t *)v6.i8, *(int32x2_t *)v7.i8).u16[0] + v125;
              *(int32x2_t *)v8.i8 = vdup_lane_s32(v108, 1);
              v126[390] = vadd_s32(v108, *(int32x2_t *)v8.i8).u32[0] + v127;
              v7.i32[1] = v125;
              v8.i32[1] = v127;
              ++v121;
              v6.i64[0] = v7.i64[0];
              v108 = *(int32x2_t *)v8.i8;
            }
            while (result != v121);
          }
          v106 += 390;
          v105 += 390;
          ++v104;
          v107 += 1560;
          v10 = (int8x16_t *)((char *)v10 + 780);
          if (v104 == v3 + 4)
            goto LABEL_52;
          continue;
        }
      }
    }
  }
  if (v2 >= -5)
  {
    if (v3 <= -2)
    {
      v98 = 1;
      v99 = v1 + 1173;
      v100 = v396;
      if (v2 < 1)
        return result;
      goto LABEL_115;
    }
    v377 = v13;
    v381 = v1 + 1173;
    v14 = 0;
    v15 = (v2 + 6);
    v16 = v1 + 1170;
    v17 = v3 + 4;
    v18 = v3 + 2;
    result = v1 + 1560;
    v19 = &v398;
    v20 = &v394;
    do
    {
      v21 = *(unsigned __int8 *)(v16 + v14 - 1170);
      v22 = v21 * v21;
      v23 = *(unsigned __int8 *)(v16 + v14 - 780);
      v24 = v23 * v23;
      v25 = *(unsigned __int8 *)(v16 + v14 - 390);
      v26 = v25 * v25;
      v27 = *(unsigned __int8 *)(v16 + v14);
      v28 = v27 * v27;
      v29 = v20;
      v30 = v19;
      v31 = (unsigned __int8 *)result;
      v32 = v18;
      do
      {
        v33 = v23 + v21;
        LOWORD(v21) = v23;
        LOWORD(v23) = v25;
        v34 = v24 + v22;
        v22 = v24;
        v24 = v26;
        LOWORD(v25) = v27;
        v26 = v28;
        v27 = *v31;
        v28 = v27 * v27;
        *(_WORD *)v29 = v23 + v25 + v33 + v27;
        *(_DWORD *)v30 = v24 + v26 + v34 + v27 * v27;
        v31 += 390;
        v30 += 195;
        v29 += 195;
        --v32;
      }
      while (v32);
      ++v14;
      ++result;
      v19 = (uint64_t *)((char *)v19 + 4);
      v20 = (int *)((char *)v20 + 2);
    }
    while (v14 != v15);
    v11 = (char *)v401;
    v3 = v386;
    v9 = v381;
    v13 = v377;
    if ((int)v389 >= -1)
    {
      v35 = v389 + 4;
      v36 = v35 - 2;
      v37 = (v35 - 2) & 0xFFFFFFFFFFFFFFF8;
      v38 = &v400;
      v39 = (char *)&v395 + 4;
      v40 = 2;
      v41 = v393;
      v42 = v397;
      do
      {
        v43 = *(int16x4_t *)(v41 + 390);
        v44 = *(int32x4_t *)(v42 + 390);
        if (v36 >= 8)
        {
          v7.i64[1] = *(_QWORD *)(v41 + 390);
          v46 = vdupq_laneq_s32(v44, 2);
          v47 = (int8x16_t)vdupq_lane_s16(v43, 2);
          v48 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v44.i8, 1);
          v49 = (int8x16_t)vdupq_lane_s16(v43, 1);
          v50 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v44.i8, 0);
          v51 = (v35 - 2) & 0xFFFFFFFFFFFFFFF8;
          result = (uint64_t)v39;
          v52 = v38;
          v53 = (int8x16_t)vdupq_lane_s16(v43, 0);
          do
          {
            v54 = (int8x16_t)v7;
            v7 = *(int16x8_t *)result;
            v55 = (int16x8_t)vextq_s8(v54, *(int8x16_t *)result, 0xEuLL);
            v56 = (int16x8_t)vextq_s8(v47, (int8x16_t)v55, 0xEuLL);
            v57 = (int16x8_t)vextq_s8(v49, (int8x16_t)v56, 0xEuLL);
            v58 = (int32x4_t)vextq_s8((int8x16_t)v44, *(int8x16_t *)v52, 0xCuLL);
            v59 = vuzp2q_s32(v46, v44);
            v44 = *((int32x4_t *)v52 + 1);
            v60 = vuzp2q_s32(v59, v46);
            v61 = (int32x4_t)vextq_s8(v48, (int8x16_t)v60, 0xCuLL);
            v60.i64[1] = *v52;
            v62 = (int32x4_t)vextq_s8(*(int8x16_t *)v52, (int8x16_t)v44, 0xCuLL);
            v63 = (int32x4_t)vextq_s8(*(int8x16_t *)v52, (int8x16_t)v44, 8uLL);
            v64 = (int32x4_t)vextq_s8(v50, (int8x16_t)v61, 0xCuLL);
            v65 = (int32x4_t)vextq_s8(*(int8x16_t *)v52, (int8x16_t)v44, 4uLL);
            v61.i32[3] = *(_OWORD *)v52;
            v66 = vaddq_s32(vaddq_s32(vaddq_s32(v60, v58), v61), vaddq_s32(v64, *(int32x4_t *)v52));
            *(int32x4_t *)(v52 + 1) = vaddq_s32(vaddq_s32(vaddq_s32(v63, v62), vaddq_s32(v65, *(int32x4_t *)v52)), v44);
            *(int32x4_t *)(v52 - 1) = v66;
            v52 += 4;
            *(int16x8_t *)(result - 4) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v56, v55), v57), (int16x8_t)vextq_s8(v53, (int8x16_t)v57, 0xEuLL)), v7);
            result += 16;
            v46 = v62;
            v47 = (int8x16_t)v55;
            v48 = (int8x16_t)v63;
            v49 = (int8x16_t)v56;
            v50 = (int8x16_t)v65;
            v53 = (int8x16_t)v57;
            v51 -= 8;
          }
          while (v51);
          if (v36 == v37)
            goto LABEL_16;
          v43 = (int16x4_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
          v45 = v37 | 2;
        }
        else
        {
          v45 = 2;
        }
        do
        {
          v67 = &v41[v45];
          result = (unsigned __int16)v67[392];
          v68 = &v42[v45];
          v69 = v68[392];
          v67[390] = vaddv_s16(v43) + result;
          v7.i32[0] = vaddvq_s32(v44);
          v68[390] = v7.i32[0] + v69;
          ++v45;
          v43 = (int16x4_t)vext_s8((int8x8_t)v43, *(int8x8_t *)v44.i8, 2uLL);
          v43.i16[3] = result;
          v44 = (int32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 4uLL);
          v44.i32[3] = v69;
        }
        while (v35 != v45);
LABEL_16:
        ++v40;
        v38 += 195;
        v39 += 780;
        v42 += 390;
        v41 += 390;
      }
      while (v40 != v17);
    }
  }
LABEL_52:
  v128 = v389;
  if (v3 >= -1)
  {
    if ((int)v389 > -2)
    {
      v130 = (390 << (v4 == 25));
      v131 = (__int16 *)&v395;
      v132 = (unsigned int *)&v399;
      v133 = -1;
      result = 0x80000;
      do
      {
        v134 = v132;
        v135 = v131;
        v136 = v389 + 1 + 1;
        do
        {
          v137 = *v135;
          v138 = (((*v134 * v4 - v137 * v137) & ~((int)(*v134 * v4 - v137 * v137) >> 31)) * v5 + 0x80000) >> 20;
          if (v138 >= 0xFF)
            v138 = 255;
          v139 = dav1d_sgr_x_by_x[v138];
          *v134++ = (v12 * v137 * v139 + 2048) >> 12;
          *v135++ = v139;
          --v136;
        }
        while (v136);
        v133 += v13;
        v131 += v130;
        v132 += v130;
      }
      while (v133 <= v3);
    }
    else
    {
      for (i = -1; i <= v3; i += v13)
        ;
    }
  }
  v99 = v388 + 1173;
  v100 = v396;
  if (v4 != 25)
  {
    if ((int)v389 < 1 || v3 < 1)
      return result;
    v249 = 0;
    v250 = 0;
    v251 = v396[0];
    v252 = v401[0];
    v385 = 2 * v389;
    v253 = v397;
    v254 = v393;
    v255 = vdupq_n_s32(0x1FFFFFDu);
    v256.i64[0] = 0x300000003;
    v256.i64[1] = 0x300000003;
    v257 = v387;
    while (1)
    {
      v258 = (unsigned __int16)*(v100 - 390);
      LODWORD(result) = (unsigned __int16)v100[389];
      v259 = *((_DWORD *)v11 - 390);
      v260 = *((_DWORD *)v11 + 389);
      v261 = (unsigned __int16)v100[390];
      v262 = *((_DWORD *)v11 + 390);
      v391 = v100;
      v392 = v11;
      if (v389 >= 8
        && (v257 < v388 + (unint64_t)v389 + 1173 + 390 * v249
          ? (v263 = v99 >= v387 + v385 + 768 * v249)
          : (v263 = 1),
            v263))
      {
        v264 = 0;
        v265 = 0;
        v266 = vdupq_n_s32(v262);
        v267 = vdupq_n_s16(v261);
        v268 = vdupq_n_s32(v260);
        v269 = vdupq_n_s32(v259);
        v270 = vdupq_n_s32(v252);
        v271 = (int8x16_t)vdupq_n_s16(result);
        v272 = vdupq_n_s16(v258);
        v273 = v253;
        v274 = vdupq_n_s16(v251);
        do
        {
          v275 = (int8x16_t)v274;
          v276 = (int8x16_t)v272;
          v277 = (int8x16_t)v267;
          v278 = *(int16x8_t *)&v254[v264 / 2 + 782];
          v274 = *(int16x8_t *)&v254[v264 / 2 + 784];
          v279 = (int16x8_t)vextq_s8(v275, (int8x16_t)v274, 0xEuLL);
          v280 = *(int16x8_t *)&v254[v264 / 2 + 392];
          v272 = *(int16x8_t *)&v254[v264 / 2 + 394];
          v281 = (int16x8_t)vextq_s8(v276, (int8x16_t)v272, 0xEuLL);
          v282 = vaddl_s16(*(int16x4_t *)v279.i8, *(int16x4_t *)v281.i8);
          v283 = vaddw_high_s16(vaddl_high_s16(v279, v281), v278);
          v284 = vaddw_s16(vaddw_s16(v282, *(int16x4_t *)v278.i8), *(int16x4_t *)v274.i8);
          v285 = vaddw_high_s16(v283, v274);
          v267 = *(int16x8_t *)&v254[v264 / 2 + 1174];
          v286 = (int16x8_t)vextq_s8(v277, (int8x16_t)v267, 0xEuLL);
          v287 = (int16x8_t)vextq_s8(v271, (int8x16_t)v286, 0xEuLL);
          v288 = vaddl_high_s16(v280, v287);
          v289 = vaddw_s16(vaddl_s16(*(int16x4_t *)v280.i8, *(int16x4_t *)v287.i8), *(int16x4_t *)v272.i8);
          v290 = vmlaq_s32(vnegq_s32(vshlq_n_s32(vaddw_high_s16(v285, v286), 2uLL)), vaddw_high_s16(vaddw_high_s16(v288, v272), v267), v255);
          v291 = vmlaq_s32(vnegq_s32(vshlq_n_s32(vaddw_s16(v284, *(int16x4_t *)v286.i8), 2uLL)), vaddw_s16(v289, *(int16x4_t *)v267.i8), v255);
          v292 = *((int32x4_t *)v273 + 196);
          v293 = (int32x4_t)vextq_s8((int8x16_t)v270, (int8x16_t)v292, 0xCuLL);
          v270 = *((int32x4_t *)v273 + 197);
          v294 = *(int32x4_t *)(v273 + 394);
          v295 = (int32x4_t)vextq_s8((int8x16_t)v269, (int8x16_t)v294, 0xCuLL);
          v269 = *(int32x4_t *)(v273 + 398);
          v296 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v292, (int8x16_t)v270, 0xCuLL), *(int32x4_t *)(v273 + 786));
          v297 = vaddq_s32(v293, *(int32x4_t *)(v273 + 782));
          v298 = vaddq_s32(v295, v292);
          v299 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v294, (int8x16_t)v269, 0xCuLL), v270);
          result = (uint64_t)(v273 + 1174);
          v300 = *(int32x4_t *)(v273 + 1174);
          v301 = (int32x4_t)vextq_s8((int8x16_t)v266, (int8x16_t)v300, 0xCuLL);
          v302 = vuzp2q_s32(v268, v266);
          v266 = *(int32x4_t *)(v273 + 1178);
          v303.i64[0] = vuzp2q_s32(v302, v268).u64[0];
          v304 = (int32x4_t)vextq_s8((int8x16_t)v300, (int8x16_t)v266, 0xCuLL);
          v303.i64[1] = *((_QWORD *)v273 + 587);
          v305 = vshlq_n_s32(vaddq_s32(vaddq_s32(v296, v304), v299), 2uLL);
          v299.i64[0] = *(_QWORD *)(v99 + v265);
          *(int16x8_t *)(v257 + v264) = vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vshlq_n_s32(vaddq_s32(vaddq_s32(v297, v301), v298), 2uLL), vaddq_s32(vaddq_s32(vaddq_s32(*((int32x4_t *)v273 + 98), v294), v300), v303), v256), v291, (int32x4_t)vqtbl1q_s8((int8x16_t)v299, (int8x16_t)xmmword_196889CC0)), 9uLL), vmlaq_s32(vmlaq_s32(v305, vaddq_s32(vaddq_s32(vaddq_s32(*((int32x4_t *)v273 + 99), v269), v266), (int32x4_t)vextq_s8((int8x16_t)v300, (int8x16_t)v266, 8uLL)), v256), v290,
                                            (int32x4_t)vqtbl1q_s8((int8x16_t)v299, (int8x16_t)xmmword_196889CD0)),
                                          9uLL);
          v265 += 8;
          v264 += 16;
          v273 += 8;
          v268 = v304;
          v271 = (int8x16_t)v286;
        }
        while ((v385 & 0x1FFFFFFF0) != v264);
        if ((v389 & 0xFFFFFFF8) == (unint64_t)v389)
          goto LABEL_96;
        v306 = v266.u32[3];
        v307 = v267.u16[7];
        v260 = v266.u32[2];
        v259 = v269.u32[3];
        v252 = v270.u32[3];
        LOWORD(result) = v267.i16[6];
        LOWORD(v258) = v272.i16[7];
        v308 = v389 & 0xFFFFFFF8;
        LOWORD(v251) = v274.i16[7];
      }
      else
      {
        v308 = 0;
        v306 = *((_DWORD *)v11 + 390);
        v307 = (unsigned __int16)v100[390];
      }
      v309 = 4 * v308 + 3128;
      do
      {
        v310 = 2 * v308;
        v311 = &v254[v308];
        v312 = v311[392] + (__int16)result;
        v313 = &v253[v308];
        v314 = v313[392] + v260;
        v315 = (__int16)v251;
        v316 = *(unsigned __int8 *)(v99 + v308);
        v317 = v308 + 1;
        LOWORD(v251) = v311[784];
        v318 = v315 + (__int16)v258 + v311[782] + (__int16)v251 + (__int16)v307;
        v319 = v311[394];
        LOWORD(v258) = v311[394];
        LODWORD(v311) = v311[1174];
        result = v307;
        v307 = (unsigned __int16)v311;
        v320 = 33554429 * (v312 + v319 + (_DWORD)v311) - 4 * v318;
        v321 = v252 + v259;
        v252 = v313[784];
        LODWORD(v311) = v321 + *(_DWORD *)((char *)v253 + v309) + v252 + v306;
        v259 = v313[394];
        v260 = v306;
        v306 = *(_DWORD *)((char *)v253 + v309 + 1568);
        *(_WORD *)(v257 + v310) = (3 * (v314 + v259 + v306) + 4 * (_DWORD)v311 + v320 * v316 + 256) >> 9;
        v309 += 4;
        v308 = v317;
      }
      while (v389 != v317);
LABEL_96:
      v100 = v391 + 390;
      v11 = v392 + 1560;
      v257 += 768;
      v99 += 390;
      ++v250;
      ++v249;
      v253 += 390;
      v254 += 390;
      v252 = v262;
      v251 = v261;
      if (v250 == v386)
        return result;
    }
  }
  v384 = v3 - 1;
  if (v3 <= 1)
  {
    v98 = 1;
    if ((int)v389 < 1)
      return result;
  }
  else
  {
    v140 = v387;
    if ((int)v389 >= 1)
    {
      v141 = 0;
      v142 = 0;
      v143 = 2 * v389;
      v380 = v143 + 768;
      v383 = v389 & 0xFFFFFFF0;
      v144 = v403;
      v145 = v143 & 0x1FFFFFFE0;
      v146 = v9 + 390;
      v147 = vdupq_n_s32(0xFFFFFAu);
      v148 = vdupq_n_s32(0xFFFFFBu);
      v149.i64[0] = 0x600000006;
      v149.i64[1] = 0x600000006;
      v150.i64[0] = 0x500000005;
      v150.i64[1] = 0x500000005;
      v151 = (int8x16_t)xmmword_196889CD0;
      v152 = v397;
      v153 = (int8x16_t)xmmword_196889CC0;
      v154 = &v402;
      v155 = (int8x16_t)xmmword_196889CA0;
      v156 = v393;
      v157 = vdupq_n_s32(0x1FFFFFAu);
      v158 = (int8x16_t)xmmword_196889CB0;
      v159 = vdupq_n_s32(0x1FFFFFBu);
      v160 = v387;
      v379 = v147;
      while (1)
      {
        v161 = (unsigned __int16)*(v100 - 390);
        v162 = (unsigned __int16)v100[390];
        v163 = *((_DWORD *)v11 - 390);
        v164 = *((_DWORD *)v11 + 390);
        v390 = v100;
        if (v128 < 0x10)
          break;
        if (v160 < v388 + (unint64_t)v389 + 1173 + 780 * v141 && v99 < v140 + 2 * v389 + 1536 * v141)
          break;
        v166 = v11;
        v167 = 0;
        v168 = 0;
        v169 = vdupq_n_s32(v164);
        v170 = vdupq_n_s32(v163);
        v171 = vdupq_n_s16(v162);
        v172 = v144;
        v173 = vdupq_n_s16(v161);
        do
        {
          v174 = (int8x16_t)v173;
          v175 = (int8x16_t)v171;
          v176 = (int8x16_t)v170;
          v177 = (int8x16_t)v169;
          v178 = *(int16x8_t *)&v156[v167 / 2 + 400];
          v179 = *(int16x8_t *)&v156[v167 / 2 + 1180];
          v180 = vaddl_high_s16(v179, v178);
          v181 = vaddl_s16(*(int16x4_t *)v179.i8, *(int16x4_t *)v178.i8);
          v182 = *(int16x8_t *)&v156[v167 / 2 + 394];
          v173 = *(int16x8_t *)&v156[v167 / 2 + 402];
          v183 = (int16x8_t)vextq_s8((int8x16_t)v182, (int8x16_t)v173, 0xEuLL);
          v184 = vaddw_s16(v181, *(int16x4_t *)v173.i8);
          v185 = vaddw_high_s16(v180, v173);
          v186 = *(int16x8_t *)&v156[v167 / 2 + 1174];
          v171 = *(int16x8_t *)&v156[v167 / 2 + 1182];
          v187 = (int16x8_t)vextq_s8((int8x16_t)v186, (int8x16_t)v171, 0xEuLL);
          v188 = vaddl_high_s16(v183, v187);
          v189 = vaddw_s16(v184, *(int16x4_t *)v171.i8);
          v190 = vmulq_s32(vaddl_s16(*(int16x4_t *)v183.i8, *(int16x4_t *)v187.i8), v157);
          v191 = v153;
          v192 = v151;
          v193 = v158;
          v194 = *((int32x4_t *)v172 - 193);
          v170 = *((int32x4_t *)v172 - 192);
          v196 = *((int32x4_t *)v172 + 1);
          v195 = *((int32x4_t *)v172 + 2);
          v169 = *((int32x4_t *)v172 + 3);
          v197 = vmlaq_s32(v190, v189, v159);
          v198 = *(int8x16_t *)(v99 + v168);
          v199 = *((int32x4_t *)v172 - 194);
          v200 = vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)(v172 + 5), *(int32x4_t *)(v172 - 385)), vaddq_s32(v170, v169)), v150), vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v194, (int8x16_t)v170, 0xCuLL), (int32x4_t)vextq_s8((int8x16_t)v195, (int8x16_t)v169, 0xCuLL)), v149), vmlaq_s32(vmulq_s32(v188, v157), vaddw_high_s16(v185, v171), v159), (int32x4_t)vqtbl1q_s8(v198, (int8x16_t)xmmword_196889CA0));
          v201 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v199, (int8x16_t)v194, 0xCuLL), (int32x4_t)vextq_s8((int8x16_t)v196, (int8x16_t)v195, 0xCuLL));
          v202 = vaddq_s32(v194, v195);
          v158 = v193;
          v203 = *((int32x4_t *)v172 - 195);
          v204 = vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)(v172 + 3), *(int32x4_t *)(v172 - 387)), v202), v150), v201, v149), v197, (int32x4_t)vqtbl1q_s8(v198, v193));
          v205 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v203, (int8x16_t)v199, 0xCuLL), (int32x4_t)vextq_s8(*(int8x16_t *)v172, (int8x16_t)v196, 0xCuLL));
          v206 = vaddq_s32(v199, v196);
          v151 = v192;
          v153 = v191;
          v207 = (int16x8_t)vextq_s8(v174, (int8x16_t)v182, 0xEuLL);
          v208 = (int16x8_t)vextq_s8(v175, (int8x16_t)v186, 0xEuLL);
          v209 = (int16x8_t *)(v160 + v167);
          *v209 = vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)(v172 - 1), *(int32x4_t *)(v172 - 391)), vaddq_s32(v203, *(int32x4_t *)v172)), v150), vaddq_s32((int32x4_t)vextq_s8(v176, (int8x16_t)v203, 0xCuLL), (int32x4_t)vextq_s8(v177, *(int8x16_t *)v172, 0xCuLL)), v149), vmlaq_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v207.i8, *(int16x4_t *)v208.i8), v157), vaddw_s16(vaddw_s16(vaddl_s16(*(int16x4_t *)&v156[v167 / 2 + 1172], *(int16x4_t *)&v156[v167 / 2 + 392]), *(int16x4_t *)v182.i8), *(int16x4_t *)v186.i8),
                          v159),
                        (int32x4_t)vqtbl1q_s8(v198, v191)),
                      9uLL),
                    vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)(v172 + 1), *(int32x4_t *)(v172 - 389)), v206), v150), v205, v149), vmlaq_s32(vmulq_s32(vaddl_high_s16(v207, v208), v157), vaddw_high_s16(vaddw_high_s16(vaddl_high_s16(*(int16x8_t *)&v156[v167 / 2 + 1172], *(int16x8_t *)&v156[v167 / 2 + 392]), v182), v186), v159), (int32x4_t)vqtbl1q_s8(v198, v151)), 9uLL);
          v209[1] = vrshrn_high_n_s32(vrshrn_n_s32(v204, 9uLL), v200, 9uLL);
          v168 += 16;
          v172 += 8;
          v167 += 32;
        }
        while (v145 != v167);
        v155 = (int8x16_t)xmmword_196889CA0;
        v147 = v379;
        if (v383 != v389)
        {
          v210 = v169.i32[3];
          v163 = v170.u32[3];
          LOWORD(v211) = v171.i16[7];
          v212 = v389 & 0xFFFFFFF0;
          LOWORD(v161) = v173.i16[7];
          goto LABEL_79;
        }
LABEL_81:
        v128 = v389;
        if (v389 >= 0x10)
        {
          v140 = v387;
          v226 = v387 + 1536 * v141;
          v227 = v388 + 780 * v141;
          v224 = v166;
          v225 = v390;
          if (v226 + 768 >= v227 + (unint64_t)v389 + 1563 || v227 + 1563 >= v226 + v380)
          {
            v228 = 0;
            v229 = vdupq_n_s32(v164);
            v230 = vdupq_n_s16(v162);
            result = v146;
            v231 = v144;
            do
            {
              v232 = *(int16x8_t *)&v156[v228 / 2 + 1180];
              v233 = (int8x16_t *)&v156[v228 / 2 + 1174];
              v234 = (int16x8_t)vextq_s8((int8x16_t)v230, *v233, 0xEuLL);
              v230 = *(int16x8_t *)&v156[v228 / 2 + 1182];
              v235 = (int16x8_t)vextq_s8(*v233, (int8x16_t)v230, 0xEuLL);
              v236 = vmovl_high_s16(v235);
              v237 = vaddl_high_s16(v230, v232);
              v238 = *((int32x4_t *)v231 + 1);
              v239 = (int32x4_t)vextq_s8((int8x16_t)v229, *(int8x16_t *)v231, 0xCuLL);
              v229 = *((int32x4_t *)v231 + 3);
              v240 = *(int8x16_t *)result;
              result += 16;
              v241 = vmlaq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v235.i8), v147), vaddl_s16(*(int16x4_t *)v230.i8, *(int16x4_t *)v232.i8), v148);
              v242 = vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(*(int32x4_t *)v231, *(int32x4_t *)(v231 - 1)), v150), v239, v149), vmlaq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v234.i8), v147), vaddl_s16(*(int16x4_t *)v233->i8, *(int16x4_t *)&v156[v228 / 2 + 1172]), v148), (int32x4_t)vqtbl1q_s8(v240, v153)), 8uLL), vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v238, *(int32x4_t *)(v231 + 1)), v150), (int32x4_t)vextq_s8(*(int8x16_t *)v231, (int8x16_t)v238, 0xCuLL), v149), vmlaq_s32(vmulq_s32(vmovl_high_s16(v234), v147),
                           vaddl_high_s16(*(int16x8_t *)v233, *(int16x8_t *)&v156[v228 / 2 + 1172]),
                           v148),
                         (int32x4_t)vqtbl1q_s8(v240, v151)),
                       8uLL);
              v243 = vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(*((int32x4_t *)v231 + 2), *(int32x4_t *)(v231 + 3)), v150), (int32x4_t)vextq_s8((int8x16_t)v238, *((int8x16_t *)v231 + 2), 0xCuLL), v149), v241, (int32x4_t)vqtbl1q_s8(v240, v158)), 8uLL), vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v229, *(int32x4_t *)(v231 + 5)), v150), (int32x4_t)vextq_s8(*((int8x16_t *)v231 + 2), (int8x16_t)v229, 0xCuLL), v149), vmlaq_s32(vmulq_s32(v236, v147), v237, v148), (int32x4_t)vqtbl1q_s8(v240, v155)), 8uLL);
              v244 = (int16x8_t *)(v160 + v228);
              v244[48] = v242;
              v244[49] = v243;
              v228 += 32;
              v231 += 8;
            }
            while (v145 != v228);
            if (v383 == v389)
              goto LABEL_67;
            v164 = v229.u32[3];
            LOWORD(v162) = v230.i16[7];
            result = v389 & 0xFFFFFFF0;
          }
          else
          {
            result = 0;
          }
        }
        else
        {
          result = 0;
          v224 = v166;
          v225 = v390;
          v140 = v387;
        }
        v245 = (_DWORD *)v154 + result;
        do
        {
          v246 = (__int16)v162;
          v247 = &v156[result];
          LOWORD(v162) = v247[1174];
          v248 = 16777211 * ((__int16)v162 + (__int16)v247[1172]) + 16777210 * v246;
          LODWORD(v247) = v245[2];
          *(_WORD *)(v160 + 2 * result + 768) = (5 * ((_DWORD)v247 + *v245++)
                                               + 6 * v164
                                               + v248 * *(unsigned __int8 *)(v146 + result)
                                               + 128) >> 8;
          v164 = v247;
          ++result;
        }
        while (v389 != result);
LABEL_67:
        v160 += 1536;
        v99 += 780;
        v100 = v225 + 780;
        v11 = v224 + 3120;
        v142 += 2;
        ++v141;
        v144 += 390;
        v156 += 780;
        v152 += 780;
        v146 += 780;
        v154 += 390;
        if (v142 >= v384)
          goto LABEL_114;
      }
      v166 = v11;
      v212 = 0;
      v210 = *((_DWORD *)v11 + 390);
      LOWORD(v211) = v100[390];
LABEL_79:
      v213 = 4 * v212 + 4688;
      do
      {
        v214 = (__int16)v161 + (__int16)v211;
        v215 = 2 * v212;
        v216 = &v156[v212];
        v217 = v216[1172] + v216[392];
        v218 = &v152[v212];
        v219 = *(unsigned __int8 *)(v99 + v212);
        v220 = v212 + 1;
        v221 = v216[394];
        LOWORD(v161) = v216[394];
        v211 = v216[1174];
        v222 = 33554427 * (v217 + v221 + v211) + 33554426 * v214;
        v223 = v163 + v210;
        v163 = v218[394];
        v210 = *(_DWORD *)((char *)v152 + v213 + 8);
        *(_WORD *)(v160 + v215) = (5 * (*(_DWORD *)((char *)v152 + v213) + v218[392] + v163 + v210)
                                 + 6 * v223
                                 + v222 * v219
                                 + 256) >> 9;
        v213 += 4;
        v212 = v220;
      }
      while (v389 != v220);
      goto LABEL_81;
    }
    v322 = (v3 - 2) >> 1;
    v160 = v387 + 1536 * v322 + 1536;
    v99 = v388 + 780 * v322 + 1953;
    v100 = &v396[780 * v322 + 780];
    v11 = (char *)&v403[390 * v322 + 194] + 4;
LABEL_114:
    v3 = v386;
    v98 = v386 | 1;
    v387 = v160;
    if (v128 < 1)
      return result;
  }
LABEL_115:
  if (v98 != v3)
    return result;
  v323 = (unsigned __int16)*(v100 - 390);
  v324 = (unsigned __int16)v100[390];
  v325 = *((_DWORD *)v11 - 390);
  v326 = *((_DWORD *)v11 + 390);
  if (v389 < 0x10)
  {
    v327 = 0;
LABEL_125:
    result = v387;
LABEL_126:
    result += 2 * v327;
    v370 = (unsigned __int8 *)(v99 + v327);
    v371 = &v100[v327 - 391];
    v372 = &v11[4 * v327 - 1564];
    v373 = v389 - v327;
    do
    {
      v374 = (__int16)v323 + (__int16)v324;
      LOWORD(v323) = v371[2];
      LOWORD(v324) = v371[782];
      v375 = v325 + v326;
      v325 = *((_DWORD *)v372 + 2);
      v326 = *((_DWORD *)v372 + 782);
      v376 = *v370++;
      *(_WORD *)result = (5 * (*((_DWORD *)v372 + 780) + *(_DWORD *)v372 + v325 + v326)
                        + 6 * v375
                        + (33554427 * (v371[780] + *v371 + (__int16)v323 + (__int16)v324) + 33554426 * v374) * v376
                        + 256) >> 9;
      result += 2;
      ++v371;
      v372 += 4;
      --v373;
    }
    while (v373);
    return result;
  }
  result = v387;
  if (v387 < v99 + v389 && v99 < v387 + 2 * v389)
  {
    v327 = 0;
    goto LABEL_126;
  }
  v328 = 0;
  v329 = vdupq_n_s32(v326);
  v327 = v389 & 0xFFFFFFF0;
  v330 = vdupq_n_s32(v325);
  v331 = vdupq_n_s16(v324);
  v332 = vdupq_n_s16(v323);
  v333 = v11 - 1564;
  v334 = vdupq_n_s32(0x1FFFFFAu);
  v335 = vdupq_n_s32(0x1FFFFFBu);
  v336.i64[0] = 0x600000006;
  v336.i64[1] = 0x600000006;
  v337.i64[0] = 0x500000005;
  v337.i64[1] = 0x500000005;
  v338 = (int8x16_t *)v99;
  do
  {
    v339 = (int8x16_t)v330;
    v340 = (int8x16_t)v329;
    v342 = *(int16x8_t *)&v100[v328 / 2 - 391];
    v341 = *(int16x8_t *)&v100[v328 / 2 - 383];
    v344 = *(int16x8_t *)&v100[v328 / 2 + 389];
    v343 = *(int16x8_t *)&v100[v328 / 2 + 397];
    v345 = vaddl_high_s16(v343, v341);
    v346 = vaddl_s16(*(int16x4_t *)v343.i8, *(int16x4_t *)v341.i8);
    v347 = vaddl_high_s16(v344, v342);
    v348 = (int8x16_t *)&v100[v328 / 2 - 389];
    v349 = vaddl_s16(*(int16x4_t *)v344.i8, *(int16x4_t *)v342.i8);
    v350 = (int16x8_t)vextq_s8((int8x16_t)v332, *v348, 0xEuLL);
    v332 = *(int16x8_t *)&v100[v328 / 2 - 381];
    v351 = (int16x8_t)vextq_s8(*v348, (int8x16_t)v332, 0xEuLL);
    v352 = vaddw_high_s16(v345, v332);
    v353 = (int8x16_t *)&v100[v328 / 2 + 391];
    v354 = (int16x8_t)vextq_s8((int8x16_t)v331, *v353, 0xEuLL);
    v331 = *(int16x8_t *)&v100[v328 / 2 + 399];
    v355 = (int16x8_t)vextq_s8(*v353, (int8x16_t)v331, 0xEuLL);
    v356 = vaddl_high_s16(v350, v354);
    v357 = vaddl_s16(*(int16x4_t *)v350.i8, *(int16x4_t *)v354.i8);
    v358 = vaddw_high_s16(vaddw_high_s16(v347, *(int16x8_t *)v348), *(int16x8_t *)v353);
    v359 = vaddw_s16(vaddw_s16(v349, *(int16x4_t *)v348->i8), *(int16x4_t *)v353->i8);
    v360 = *(int32x4_t *)(v333 + 24);
    v330 = *(int32x4_t *)(v333 + 56);
    v361 = *(int32x4_t *)(v333 + 40);
    v329 = *(int32x4_t *)(v333 + 3176);
    v362 = *(int32x4_t *)(v333 + 3160);
    v363 = *v338++;
    v364 = vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(vaddq_s32(*((int32x4_t *)v333 + 198), *((int32x4_t *)v333 + 3)), vaddq_s32(v330, v329)), v337), vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v361, (int8x16_t)v330, 0xCuLL), (int32x4_t)vextq_s8((int8x16_t)v362, (int8x16_t)v329, 0xCuLL)), v336), vmlaq_s32(vmulq_s32(vaddl_high_s16(v351, v355), v334), vaddw_high_s16(v352, v331), v335), (int32x4_t)vqtbl1q_s8(v363, (int8x16_t)xmmword_196889CA0));
    v365 = *(int32x4_t *)(v333 + 3144);
    v366 = vmlaq_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v351.i8, *(int16x4_t *)v355.i8), v334), vaddw_s16(vaddw_s16(v346, *(int16x4_t *)v332.i8), *(int16x4_t *)v331.i8), v335);
    v367 = *(int32x4_t *)(v333 + 8);
    v368 = vaddq_s32(vaddq_s32(*((int32x4_t *)v333 + 197), *((int32x4_t *)v333 + 2)), vaddq_s32(v361, v362));
    v369 = (int16x8_t *)(v387 + v328);
    *v369 = vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(vaddq_s32(*((int32x4_t *)v333 + 195), *(int32x4_t *)v333), vaddq_s32(v367, *(int32x4_t *)(v333 + 3128))), v337), vaddq_s32((int32x4_t)vextq_s8(v339, (int8x16_t)v367, 0xCuLL), (int32x4_t)vextq_s8(v340, *(int8x16_t *)(v333 + 3128), 0xCuLL)), v336), vmlaq_s32(vmulq_s32(v357, v334), v359, v335), (int32x4_t)vqtbl1q_s8(v363, (int8x16_t)xmmword_196889CC0)), 9uLL), vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(vaddq_s32(*((int32x4_t *)v333 + 196), *((int32x4_t *)v333 + 1)), vaddq_s32(v360, v365)),
                    v337),
                  vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v367, (int8x16_t)v360, 0xCuLL), (int32x4_t)vextq_s8(*(int8x16_t *)(v333 + 3128), (int8x16_t)v365, 0xCuLL)), v336), vmlaq_s32(vmulq_s32(v356, v334), v358, v335), (int32x4_t)vqtbl1q_s8(v363, (int8x16_t)xmmword_196889CD0)), 9uLL);
    v369[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v368, v337), vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v360, (int8x16_t)v361, 0xCuLL), (int32x4_t)vextq_s8((int8x16_t)v365, (int8x16_t)v362, 0xCuLL)), v336), v366, (int32x4_t)vqtbl1q_s8(v363, (int8x16_t)xmmword_196889CB0)), 9uLL), v364, 9uLL);
    v333 += 64;
    v328 += 32;
  }
  while (((2 * v389) & 0x1FFFFFFE0) != v328);
  if (v327 != v389)
  {
    v326 = v329.u32[3];
    v325 = v330.u32[3];
    LOWORD(v324) = v331.i16[7];
    LOWORD(v323) = v332.i16[7];
    goto LABEL_125;
  }
  return result;
}

uint64_t dav1d_lr_sbrow_8bpc(uint64_t result, _QWORD *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;
  int v15;
  char v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;

  v5 = result;
  v6 = 8 * (a3 != 0);
  v7 = *(_DWORD *)(result + 5192);
  v8 = a3 + 1;
  v9 = *(_DWORD *)(result + 3296);
  if ((v7 & 1) != 0)
  {
    v10 = *(_DWORD *)(result + 2316);
    if (v8 >= v9)
      v11 = 0;
    else
      v11 = -8;
    if ((v8 << (*(_BYTE *)(*(_QWORD *)(result + 8) + 1012) + 6)) + v11 >= v10)
      v12 = *(_DWORD *)(result + 2316);
    else
      v12 = (v8 << (*(_BYTE *)(*(_QWORD *)(result + 8) + 1012) + 6)) + v11;
    result = lr_sbrow_0(result, *a2 - *(_QWORD *)(result + 2296) * v6, (a3 << (*(_BYTE *)(*(_QWORD *)(result + 8) + 1012) + 6)) - (int)v6, *(_DWORD *)(result + 2312), v10, v12, 0);
  }
  if ((v7 & 6) != 0)
  {
    v13 = *(_DWORD *)(v5 + 2320);
    v14 = v13 != 3;
    v15 = *(_DWORD *)(v5 + 2312);
    if (v13 != 3)
      ++v15;
    v16 = v13 == 1;
    v17 = *(_DWORD *)(v5 + 2316);
    if (v16)
      ++v17;
    v18 = v17 >> v16;
    v19 = v15 >> v14;
    if (v16)
      v20 = 5;
    else
      v20 = 6;
    v21 = *(_DWORD *)(*(_QWORD *)(v5 + 8) + 1012) + v20;
    v22 = 8u >> v16;
    if (v8 >= v9)
      v22 = 0;
    if ((int)((v8 << v21) - v22) >= v18)
      v23 = v18;
    else
      v23 = (v8 << v21) - v22;
    v24 = v6 >> v16;
    v25 = (a3 << v21) - v24;
    if ((v7 & 2) != 0)
      result = lr_sbrow_0(v5, a2[1] - *(_QWORD *)(v5 + 2304) * v24, v25, v19, v18, v23, 1u);
    if ((v7 & 4) != 0)
      return lr_sbrow_0(v5, a2[2] - *(_QWORD *)(v5 + 2304) * v24, v25, v19, v18, v23, 2u);
  }
  return result;
}

uint64_t lr_sbrow_0(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, unsigned int a7)
{
  int v9;
  int v10;
  int v13;
  char v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  int v27;
  uint64_t result;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned __int8 *v38;
  _BOOL4 v39;
  _DWORD *v40;
  uint64_t v41;
  unsigned int v42;
  _BOOL4 v43;
  int v44;
  int v45;
  BOOL v46;
  unsigned __int8 *v47;
  int v48;
  char v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  char v53;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  _BYTE *v59;
  _BYTE *v60;
  _OWORD v61[34];
  _QWORD v62[70];

  v9 = a4;
  v10 = a3;
  v62[68] = *MEMORY[0x1E0C80C00];
  v13 = *(_DWORD *)(a1 + 2320);
  v14 = v13 == 1 && a7 != 0;
  v15 = 1 << *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * (a7 != 0) + 1384);
  v16 = v15 >> 1;
  v17 = 8u >> v14;
  if (!a3)
    v17 = 0;
  v18 = v17 + a3;
  if (a3 <= 0)
    v19 = 2;
  else
    v19 = 6;
  v20 = v18 & -v15;
  if (v20 + v16 <= a5)
    v21 = 0;
  else
    v21 = 1 << *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * (a7 != 0) + 1384);
  v22 = v20 - v21;
  if ((v18 & -v15) != 0)
    v23 = v22;
  else
    v23 = 0;
  v24 = *(_QWORD *)(a1 + 8 * (a7 != 0) + 2296);
  v25 = v16 + v15;
  if (a7 != 0 && v13 != 3)
    v26 = 6;
  else
    v26 = 7;
  v27 = (v23 << v14 >> 7) * *(_DWORD *)(a1 + 3308);
  result = ((v23 << v14) >> 5) & 2;
  v29 = *(_QWORD *)(a1 + 4272);
  v59 = (_BYTE *)(v29 + 120 * v27 + 40 * a7 + 10 * result);
  v60 = 0;
  v30 = *v59;
  v31 = *v59 != 0;
  if (v25 > a4)
  {
    v15 = 0;
    v32 = 0;
    if (!*v59)
      return result;
    return lr_stripe_0(a1, a2, (uint64_t)&v61[34 * (v32 == 0)], v15, v10, a7, v9 - v15, a6, (&v59)[v32], v19 & 0xFFFFFFFD);
  }
  v33 = a7;
  v34 = v26 - 1;
  v35 = v15;
  v57 = v19 | 1;
  v58 = a6;
  v55 = v10;
  v56 = a7;
  v53 = v26;
  v51 = result;
  v52 = v27;
  v50 = a7;
  v49 = v26 - 1;
  if (a6 - v10 < 1)
  {
    v60 = (_BYTE *)(v29
                  + 120 * (v27 + (v15 >> v26))
                  + 40 * a7
                  + 10 * (result | (v15 >> v34) & 1));
    v43 = *v60 != 0;
    if (v30)
    {
      lr_stripe_0(a1, a2, (uint64_t)v62, 0, v10, a7, v15, a6, (_BYTE *)(v29 + 120 * v27 + 40 * a7 + 10 * result), v19);
      v35 = v15;
      v34 = v49;
      v33 = v50;
      result = v51;
      v27 = v52;
      v26 = v53;
      v9 = a4;
      v10 = v55;
      a7 = v56;
      a6 = v58;
    }
    a2 += v35;
    if (v25 + v15 <= v9)
    {
      v44 = 0;
      v45 = v16 + 2 * v15;
      v32 = 1;
      do
      {
        v46 = v43;
        v47 = (unsigned __int8 *)(*(_QWORD *)(a1 + 4272)
                                + 120 * (((2 * v15 + v44) >> v26) + v27)
                                + 40 * v33
                                + 10 * (((2 * v15 + v44) >> v34) & 1 | result));
        (&v59)[v32 == 0] = v47;
        v43 = *v47 != 0;
        if (v46)
        {
          lr_stripe_0(a1, a2, (uint64_t)&v61[34 * (v32 == 0)], v15 + v44, v10, a7, v15, v58, (&v59)[v32], v57);
          v35 = v15;
          v34 = v49;
          v33 = v50;
          result = v51;
          v27 = v52;
          v26 = v53;
          v9 = a4;
          v10 = v55;
          a7 = v56;
          a6 = v58;
        }
        a2 += v35;
        v32 ^= 1uLL;
        v44 += v15;
      }
      while (v45 + v44 <= v9);
      v15 += v44;
      v19 = v57;
      if (v43)
        return lr_stripe_0(a1, a2, (uint64_t)&v61[34 * (v32 == 0)], v15, v10, a7, v9 - v15, a6, (&v59)[v32], v19 & 0xFFFFFFFD);
    }
    else
    {
      v32 = 1;
      v19 = v57;
      if (v43)
        return lr_stripe_0(a1, a2, (uint64_t)&v61[34 * (v32 == 0)], v15, v10, a7, v9 - v15, a6, (&v59)[v32], v19 & 0xFFFFFFFD);
    }
  }
  else
  {
    v32 = 0;
    v36 = 0;
    v48 = a6 - v10 + 1;
    do
    {
      v37 = v36 + v15;
      v38 = (unsigned __int8 *)(*(_QWORD *)(a1 + 4272)
                              + 120 * ((v37 >> v26) + v27)
                              + 40 * v33
                              + 10 * ((v37 >> v34) & 1 | result));
      (&v59)[v32 == 0] = v38;
      LODWORD(v38) = *v38;
      v39 = (_DWORD)v38 != 0;
      if ((_DWORD)v38)
      {
        v40 = &v61[34 * v32];
        v41 = v15 - 4;
        v42 = v48;
        do
        {
          *v40++ = *(_DWORD *)(a2 + v41);
          --v42;
          v41 += v24;
        }
        while (v42 > 1);
      }
      if (v31)
      {
        lr_stripe_0(a1, a2, (uint64_t)&v61[34 * (v32 == 0)], v36, v10, a7, v15, v58, (&v59)[v32], v19);
        v35 = v15;
        v34 = v49;
        v33 = v50;
        result = v51;
        v27 = v52;
        v26 = v53;
        v9 = a4;
        v10 = v55;
        a7 = v56;
        a6 = v58;
      }
      a2 += v35;
      v32 ^= 1uLL;
      v36 = v37;
      v31 = v39;
      v19 = v57;
    }
    while (v37 + v25 <= v9);
    v19 = v57;
    v15 = v37;
    if (v39)
      return lr_stripe_0(a1, a2, (uint64_t)&v61[34 * (v32 == 0)], v15, v10, a7, v9 - v15, a6, (&v59)[v32], v19 & 0xFFFFFFFD);
  }
  return result;
}

uint64_t lr_stripe_0(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6, unsigned int a7, int a8, _BYTE *a9, int a10)
{
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  __int16 v27;
  uint64_t (**v28)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int128 *, _QWORD);
  int v29;
  unsigned __int16 *v30;
  unsigned int v31;
  _BOOL8 v32;
  uint64_t v34;
  unsigned int v35;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int128 *, _QWORD);
  uint64_t v42;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(result + 3144);
  v14 = a6 != 0 && *(_DWORD *)(result + 2320) == 1;
  v15 = *(_QWORD *)(result + 8 * (a6 != 0) + 2296);
  v16 = 8 << v14;
  if (v14)
    v17 = 5;
  else
    v17 = 6;
  if (!a5)
    v16 = 0;
  v18 = *(_DWORD *)(*(_QWORD *)(result + 8) + 1012);
  v19 = (v16 + a5) >> (v17 + v18);
  v42 = result;
  v20 = *(_QWORD *)(result + 8 * a6 + 5088);
  v21 = 4 << v18;
  if (a5)
    v22 = 64;
  else
    v22 = 56;
  v23 = v19 * v21 - 4;
  if (*(_DWORD *)(*(_QWORD *)(result + 3120) + 24) <= 1u)
    v23 = 0;
  if ((int)(v22 >> v14) >= a8 - a5)
    v24 = (a8 - a5);
  else
    v24 = v22 >> v14;
  v44 = 0u;
  v45 = 0u;
  if (*a9 == 2)
  {
    v25 = (char)a9[1];
    WORD5(v44) = (char)a9[2];
    WORD1(v44) = WORD5(v44);
    WORD4(v44) = (char)a9[3];
    WORD2(v44) = WORD4(v44);
    WORD3(v44) = -2 * (WORD5(v44) + v25 + WORD4(v44));
    v26 = (char)a9[4];
    WORD5(v45) = (char)a9[5];
    WORD1(v45) = WORD5(v45);
    v27 = (char)a9[6];
    WORD6(v44) = v25;
    LOWORD(v44) = v25;
    WORD6(v45) = v26;
    LOWORD(v45) = v26;
    WORD4(v45) = v27;
    WORD2(v45) = v27;
    WORD3(v45) = 128 - 2 * (WORD5(v45) + v26 + v27);
    v28 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int128 *, _QWORD))(v13 + 8 * ((v26 | v25) == 0) + 3328);
    v29 = v24 + a5;
    if ((int)v24 + a5 > a8)
      return result;
  }
  else
  {
    v30 = (unsigned __int16 *)((char *)&dav1d_sgr_params + 4 * a9[7]);
    v31 = *v30;
    v32 = *v30 == 0;
    LODWORD(v30) = v30[1];
    *(_QWORD *)&v44 = __PAIR64__(v30, v31);
    WORD4(v44) = (char)a9[8];
    WORD5(v44) = 128 - (WORD4(v44) + (char)a9[9]);
    v28 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int128 *, _QWORD))(v13 + 8 * (2 * ((_DWORD)v30 != 0) - v32) + 3344);
    v29 = v24 + a5;
    if ((int)v24 + a5 > a8)
      return result;
  }
  v34 = v20 + v15 * v23 + a4;
  v41 = *v28;
  v40 = v19 + 1;
  v35 = 0x40u >> v14;
  do
  {
    if (v40 == *(_DWORD *)(v42 + 3296) && a8 == v29)
      v37 = 0;
    else
      v37 = 8;
    v38 = v37 | a10 & 0xFFFFFFF7;
    result = v41(a2, v15, a3, v34, a7, v24, &v44, v38);
    LODWORD(v39) = a8 - v29;
    if ((int)v35 >= a8 - v29)
      v39 = v39;
    else
      v39 = v35;
    if (!(_DWORD)v39)
      break;
    a10 = v38 | 4;
    a2 += v15 * (int)v24;
    a3 += 4 * (int)v24;
    v34 += 4 * v15;
    v29 += v39;
    v24 = v39;
  }
  while (v29 <= a8);
  return result;
}

char *put_8tap_regular_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return put_8tap_c_0(a1, a2, a3, a4, a5, a6, a7, a8, 0);
}

uint64_t put_8tap_regular_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  return put_8tap_scaled_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0);
}

unint64_t prep_8tap_regular_c_0(uint64_t a1, uint64_t a2)
{
  return prep_8tap_c_0(a1, a2);
}

uint64_t prep_8tap_regular_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  return prep_8tap_scaled_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0);
}

char *put_8tap_regular_smooth_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return put_8tap_c_0(a1, a2, a3, a4, a5, a6, a7, a8, 4u);
}

uint64_t put_8tap_regular_smooth_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  return put_8tap_scaled_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 4u);
}

unint64_t prep_8tap_regular_smooth_c_0(uint64_t a1, uint64_t a2)
{
  return prep_8tap_c_0(a1, a2);
}

uint64_t prep_8tap_regular_smooth_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  return prep_8tap_scaled_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, 4u);
}

char *put_8tap_regular_sharp_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return put_8tap_c_0(a1, a2, a3, a4, a5, a6, a7, a8, 8u);
}

uint64_t put_8tap_regular_sharp_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  return put_8tap_scaled_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 8u);
}

unint64_t prep_8tap_regular_sharp_c_0(uint64_t a1, uint64_t a2)
{
  return prep_8tap_c_0(a1, a2);
}

uint64_t prep_8tap_regular_sharp_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  return prep_8tap_scaled_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, 8u);
}

char *put_8tap_sharp_regular_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return put_8tap_c_0(a1, a2, a3, a4, a5, a6, a7, a8, 2u);
}

uint64_t put_8tap_sharp_regular_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  return put_8tap_scaled_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 2u);
}

unint64_t prep_8tap_sharp_regular_c_0(uint64_t a1, uint64_t a2)
{
  return prep_8tap_c_0(a1, a2);
}

uint64_t prep_8tap_sharp_regular_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  return prep_8tap_scaled_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, 2u);
}

char *put_8tap_sharp_smooth_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return put_8tap_c_0(a1, a2, a3, a4, a5, a6, a7, a8, 6u);
}

uint64_t put_8tap_sharp_smooth_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  return put_8tap_scaled_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 6u);
}

unint64_t prep_8tap_sharp_smooth_c_0(uint64_t a1, uint64_t a2)
{
  return prep_8tap_c_0(a1, a2);
}

uint64_t prep_8tap_sharp_smooth_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  return prep_8tap_scaled_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, 6u);
}

char *put_8tap_sharp_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return put_8tap_c_0(a1, a2, a3, a4, a5, a6, a7, a8, 0xAu);
}

uint64_t put_8tap_sharp_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  return put_8tap_scaled_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0xAu);
}

unint64_t prep_8tap_sharp_c_0(uint64_t a1, uint64_t a2)
{
  return prep_8tap_c_0(a1, a2);
}

uint64_t prep_8tap_sharp_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  return prep_8tap_scaled_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0xAu);
}

char *put_8tap_smooth_regular_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return put_8tap_c_0(a1, a2, a3, a4, a5, a6, a7, a8, 1u);
}

uint64_t put_8tap_smooth_regular_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  return put_8tap_scaled_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 1u);
}

unint64_t prep_8tap_smooth_regular_c_0(uint64_t a1, uint64_t a2)
{
  return prep_8tap_c_0(a1, a2);
}

uint64_t prep_8tap_smooth_regular_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  return prep_8tap_scaled_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, 1u);
}

char *put_8tap_smooth_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return put_8tap_c_0(a1, a2, a3, a4, a5, a6, a7, a8, 5u);
}

uint64_t put_8tap_smooth_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  return put_8tap_scaled_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 5u);
}

unint64_t prep_8tap_smooth_c_0(uint64_t a1, uint64_t a2)
{
  return prep_8tap_c_0(a1, a2);
}

uint64_t prep_8tap_smooth_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  return prep_8tap_scaled_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, 5u);
}

char *put_8tap_smooth_sharp_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return put_8tap_c_0(a1, a2, a3, a4, a5, a6, a7, a8, 9u);
}

uint64_t put_8tap_smooth_sharp_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  return put_8tap_scaled_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 9u);
}

unint64_t prep_8tap_smooth_sharp_c_0(uint64_t a1, uint64_t a2)
{
  return prep_8tap_c_0(a1, a2);
}

uint64_t prep_8tap_smooth_sharp_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  return prep_8tap_scaled_c_0(a1, a2, a3, a4, a5, a6, a7, a8, a9, 9u);
}

char *put_bilin_c_0(uint64_t a1, uint64_t a2)
{
  char *result;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int8x16_t v10;
  int8x16_t v11;
  int v12;
  int32x4_t v13;
  char *v14;
  _BYTE *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  int8x16_t v21;
  int8x16_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int16x8_t *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  int32x4_t v32;
  uint64_t v33;
  int32x4_t v34;
  int32x4_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t k;
  char *v40;
  uint64_t v42;
  uint64_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int8x16_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int v61;
  int32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  int16x8_t *v66;
  int32x4_t v67;
  int32x4_t v68;
  uint64_t i;
  uint64_t v70;
  uint64_t v71;
  int16x8_t *v72;
  int16x8_t v73;
  int16x8_t v74;
  int32x4_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  uint64_t v81;
  int16x8_t v82;
  int32x4_t v83;
  int16x8_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int32x4_t v90;
  uint64_t v91;
  int32x4_t v92;
  int32x4_t v93;
  char *v94;
  char *v95;
  uint64_t j;
  uint64_t v98;
  uint64_t v99;
  int8x16_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int8x16_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int v112;
  _BYTE v113[256];
  _QWORD v114[4097];
  int8x16x2_t v115;
  int8x16x2_t v116;
  int8x16x2_t v117;
  int8x16x4_t v118;

  result = (char *)MEMORY[0x1E0C80A78](a1, a2);
  v114[4096] = *MEMORY[0x1E0C80C00];
  if (v8)
  {
    if (v9)
    {
      if ((int)v6 >= 1)
      {
        v12 = v7 + 1;
        v13 = vdupq_n_s32(v8);
        v14 = v4 + 1;
        v15 = v113;
        while (1)
        {
          v16 = *v4;
          if (v6 >= 0x10)
          {
            v18 = 0;
            v19 = vdupq_n_s8(v16);
            v20 = (int8x16_t *)v14;
            do
            {
              v21 = v19;
              v22 = *v20++;
              v19 = v22;
              v23 = (int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_19689AE00);
              v24 = (int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_19689ADF0);
              v25 = (int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_19689AE10);
              v26 = vqtbl1q_s8(v21, (int8x16_t)xmmword_19689ADA0);
              v27 = (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)(&v19 - 1), (int8x16_t)xmmword_19689ADB0);
              v28 = (int16x8_t *)&v15[v18];
              *v28 = vuzp1q_s16((int16x8_t)vmlaq_s32(vshlq_n_s32(v27, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_196889CC0), v27), v13), (int16x8_t)vmlaq_s32(vshlq_n_s32(v25, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_196889CD0), v25), v13));
              v28[1] = vuzp1q_s16((int16x8_t)vmlaq_s32(vshlq_n_s32(v24, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_196889CB0), v24), v13), (int16x8_t)vmlaq_s32(vshlq_n_s32(v23, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_196889CA0), v23), v13));
              v18 += 32;
            }
            while (((2 * v6) & 0x1FFFFFFE0) != v18);
            if ((v6 & 0xFFFFFFF0) == (unint64_t)v6)
              goto LABEL_5;
            LOBYTE(v16) = v19.i8[15];
            v17 = v6 & 0xFFFFFFF0;
          }
          else
          {
            v17 = 0;
          }
          do
          {
            v29 = v14[v17];
            *(_WORD *)&v15[2 * v17] = (v29 - v16) * v8 + 16 * v16;
            LOBYTE(v16) = v29;
            ++v17;
          }
          while (v6 != v17);
LABEL_5:
          v15 += 256;
          v4 += v5;
          v14 += v5;
          if (!--v12)
          {
            v62 = vdupq_n_s32(v9);
            v63 = v6 & 0xFFFFFFF0;
            v64 = v6 & 0xFFFFFFF8;
            v65 = v113;
            v66 = (int16x8_t *)v114;
            v67.i64[0] = 0x8000000080;
            v67.i64[1] = 0x8000000080;
            v68.i64[0] = 0xFF000000FFLL;
            v68.i64[1] = 0xFF000000FFLL;
            while (1)
            {
              if (v6 < 8)
              {
                for (i = 0; i != v6; result[i++] = v87 & ~(v87 >> 31))
                {
LABEL_51:
                  v87 = (int)((v66->i16[i] - *(__int16 *)&v65[2 * i]) * v9 + 16 * *(__int16 *)&v65[2 * i] + 128) >> 8;
                  if (v87 >= 255)
                    v87 = 255;
                }
                goto LABEL_39;
              }
              if (v6 >= 0x10)
              {
                v71 = 0;
                v72 = v66;
                do
                {
                  v73 = v72[-16];
                  v74 = v72[-15];
                  v75 = vshll_high_n_s16(v74, 4uLL);
                  v77 = *v72;
                  v76 = v72[1];
                  v72 += 2;
                  v78 = vsubl_high_s16(v76, v74);
                  v79 = vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshll_n_s16(*(int16x4_t *)v74.i8, 4uLL), vsubl_s16(*(int16x4_t *)v76.i8, *(int16x4_t *)v74.i8), v62), v67), 8uLL), v68);
                  v80 = vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(v75, v78, v62), v67), 8uLL), v68);
                  v118.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshll_high_n_s16(v73, 4uLL), vsubl_high_s16(v77, v73), v62), v67), 8uLL), v68), (int32x4_t)0);
                  v118.val[3] = (int8x16_t)vmaxq_s32(v80, (int32x4_t)0);
                  v118.val[2] = (int8x16_t)vmaxq_s32(v79, (int32x4_t)0);
                  v118.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshll_n_s16(*(int16x4_t *)v73.i8, 4uLL), vsubl_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v73.i8), v62), v67), 8uLL), v68), (int32x4_t)0);
                  *(int8x16_t *)&result[v71] = vqtbl4q_s8(v118, (int8x16_t)xmmword_19689A980);
                  v71 += 16;
                }
                while (v63 != v71);
                if (v63 == v6)
                  goto LABEL_39;
                v70 = v6 & 0xFFFFFFF0;
                i = v70;
                if ((v6 & 8) == 0)
                  goto LABEL_51;
              }
              else
              {
                v70 = 0;
              }
              v81 = 2 * v70;
              do
              {
                v82 = *(int16x8_t *)&v65[v81];
                v83 = vshll_high_n_s16(v82, 4uLL);
                v84 = *(int16x8_t *)&v65[v81 + 256];
                v85 = vsubl_high_s16(v84, v82);
                v86 = vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshll_n_s16(*(int16x4_t *)v82.i8, 4uLL), vsubl_s16(*(int16x4_t *)v84.i8, *(int16x4_t *)v82.i8), v62), v67), 8uLL), v68);
                v115.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(v83, v85, v62), v67), 8uLL), v68), (int32x4_t)0);
                v115.val[0] = (int8x16_t)vmaxq_s32(v86, (int32x4_t)0);
                *(_QWORD *)&result[v70] = vqtbl2q_s8(v115, (int8x16_t)xmmword_19689A990).u64[0];
                v70 += 8;
                v81 += 16;
              }
              while (v64 != v70);
              i = v6 & 0x7FFFFFF8;
              if (v64 != v6)
                goto LABEL_51;
LABEL_39:
              v65 += 256;
              result += v3;
              v66 += 16;
              if (!--v7)
                return result;
            }
          }
        }
      }
      return result;
    }
    if ((int)v6 < 1)
      return result;
    v88 = 0;
    v89 = v6 & 0xFFFFFFF0;
    v90 = vdupq_n_s32(v8);
    v91 = v6 & 0xFFFFFFF8;
    v92.i64[0] = 0x800000008;
    v92.i64[1] = 0x800000008;
    v93.i64[0] = 0xFF000000FFLL;
    v93.i64[1] = 0xFF000000FFLL;
    v94 = v4;
    v95 = result;
    while (1)
    {
      if (v6 < 8)
      {
        j = 0;
        goto LABEL_73;
      }
      if (v95 < &v4[v6 + 1 + v88 * v5] && v94 < &result[v6 + v88 * v3])
      {
        for (j = 0; j != v6; v95[j++] = v112 & ~(v112 >> 31))
        {
LABEL_73:
          v112 = (int)((v94[j + 1] - v94[j]) * v8 + 16 * v94[j] + 8) >> 4;
          if (v112 >= 255)
            v112 = 255;
        }
        goto LABEL_57;
      }
      if (v6 >= 0x10)
      {
        v99 = 0;
        do
        {
          v100 = *(int8x16_t *)&v94[v99];
          v101 = (int32x4_t)vqtbl1q_s8(v100, (int8x16_t)xmmword_196889CC0);
          v102 = (int32x4_t)vqtbl1q_s8(v100, (int8x16_t)xmmword_196889CD0);
          v103 = (int32x4_t)vqtbl1q_s8(v100, (int8x16_t)xmmword_196889CB0);
          v104 = (int32x4_t)vqtbl1q_s8(v100, (int8x16_t)xmmword_196889CA0);
          v105 = *(int8x16_t *)&v94[v99 + 1];
          v106 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshlq_n_s32(v104, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v105, (int8x16_t)xmmword_196889CA0), v104), v90), v92), 4uLL), v93), (int32x4_t)0);
          v107 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshlq_n_s32(v103, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v105, (int8x16_t)xmmword_196889CB0), v103), v90), v92), 4uLL), v93), (int32x4_t)0);
          v108 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshlq_n_s32(v102, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v105, (int8x16_t)xmmword_196889CD0), v102), v90), v92), 4uLL), v93), (int32x4_t)0);
          v11 = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshlq_n_s32(v101, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v105, (int8x16_t)xmmword_196889CC0), v101), v90), v92), 4uLL), v93), (int32x4_t)0);
          v10 = vqtbl4q_s8(*(int8x16x4_t *)v11.i8, (int8x16_t)xmmword_19689A980);
          *(int8x16_t *)&v95[v99] = v10;
          v99 += 16;
        }
        while (v89 != v99);
        if (v89 == v6)
          goto LABEL_57;
        v98 = v6 & 0xFFFFFFF0;
        j = v98;
        if ((v6 & 8) == 0)
          goto LABEL_73;
      }
      else
      {
        v98 = 0;
      }
      do
      {
        v10.i64[0] = *(_QWORD *)&v94[v98];
        v109 = (int32x4_t)vqtbl1q_s8(v10, (int8x16_t)xmmword_196889CC0);
        v110 = (int32x4_t)vqtbl1q_s8(v10, (int8x16_t)xmmword_196889CD0);
        v11.i64[0] = *(_QWORD *)&v94[v98 + 1];
        v111 = (int32x4_t)vqtbl1q_s8(v11, (int8x16_t)xmmword_196889CD0);
        v11 = vqtbl1q_s8(v11, (int8x16_t)xmmword_196889CC0);
        v117.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshlq_n_s32(v110, 4uLL), vsubq_s32(v111, v110), v90), v92), 4uLL), v93), (int32x4_t)0);
        v117.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshlq_n_s32(v109, 4uLL), vsubq_s32((int32x4_t)v11, v109), v90), v92), 4uLL), v93), (int32x4_t)0);
        v10 = vqtbl2q_s8(v117, (int8x16_t)xmmword_19689A990);
        *(_QWORD *)&v95[v98] = v10.i64[0];
        v98 += 8;
      }
      while (v91 != v98);
      j = v6 & 0xFFFFFFF8;
      if (v91 != v6)
        goto LABEL_73;
LABEL_57:
      v95 += v3;
      v94 += v5;
      ++v88;
      if (!--v7)
        return result;
    }
  }
  if (!v9)
    return (char *)put_c_0(result, v3, v4, v5, v6, v7);
  if ((int)v6 >= 1)
  {
    v30 = 0;
    v31 = v6 & 0xFFFFFFF0;
    v32 = vdupq_n_s32(v9);
    v33 = v6 & 0xFFFFFFF8;
    v34.i64[0] = 0x800000008;
    v34.i64[1] = 0x800000008;
    v35.i64[0] = 0xFF000000FFLL;
    v35.i64[1] = 0xFF000000FFLL;
    v36 = &v4[v5];
    v37 = v4;
    v38 = result;
    do
    {
      if (v6 < 8)
      {
        k = 0;
        goto LABEL_34;
      }
      v40 = &result[v30 * v3];
      if ((unint64_t)(v40 - &v4[v5 + v30 * v5]) < 0x10 || (unint64_t)(v40 - &v4[v30 * v5]) < 0x10)
      {
        for (k = 0; k != v6; v38[k++] = v61 & ~(v61 >> 31))
        {
LABEL_34:
          v61 = (int)((v36[k] - v37[k]) * v9 + 16 * v37[k] + 8) >> 4;
          if (v61 >= 255)
            v61 = 255;
        }
        goto LABEL_17;
      }
      if (v6 >= 0x10)
      {
        v43 = 0;
        do
        {
          v44 = *(int8x16_t *)&v37[v43];
          v45 = (int32x4_t)vqtbl1q_s8(v44, (int8x16_t)xmmword_196889CC0);
          v46 = (int32x4_t)vqtbl1q_s8(v44, (int8x16_t)xmmword_196889CD0);
          v47 = (int32x4_t)vqtbl1q_s8(v44, (int8x16_t)xmmword_196889CB0);
          v48 = (int32x4_t)vqtbl1q_s8(v44, (int8x16_t)xmmword_196889CA0);
          v49 = *(int8x16_t *)&v37[v5 + v43];
          v50 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshlq_n_s32(v48, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v49, (int8x16_t)xmmword_196889CA0), v48), v32), v34), 4uLL), v35), (int32x4_t)0);
          v51 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshlq_n_s32(v47, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v49, (int8x16_t)xmmword_196889CB0), v47), v32), v34), 4uLL), v35), (int32x4_t)0);
          v52 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshlq_n_s32(v46, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v49, (int8x16_t)xmmword_196889CD0), v46), v32), v34), 4uLL), v35), (int32x4_t)0);
          v11 = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshlq_n_s32(v45, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v49, (int8x16_t)xmmword_196889CC0), v45), v32), v34), 4uLL), v35), (int32x4_t)0);
          v10 = vqtbl4q_s8(*(int8x16x4_t *)v11.i8, (int8x16_t)xmmword_19689A980);
          *(int8x16_t *)&v38[v43] = v10;
          v43 += 16;
        }
        while (v31 != v43);
        if (v31 == v6)
          goto LABEL_17;
        v42 = v6 & 0xFFFFFFF0;
        k = v42;
        if ((v6 & 8) == 0)
          goto LABEL_34;
      }
      else
      {
        v42 = 0;
      }
      v53 = 0;
      v54 = &v37[v42];
      v55 = (uint64_t)&v37[v42 + v5];
      v56 = &v38[v42];
      v57 = v42 - v33;
      do
      {
        v10.i64[0] = *(_QWORD *)&v54[v53];
        v58 = (int32x4_t)vqtbl1q_s8(v10, (int8x16_t)xmmword_196889CC0);
        v59 = (int32x4_t)vqtbl1q_s8(v10, (int8x16_t)xmmword_196889CD0);
        v11.i64[0] = *(_QWORD *)(v55 + v53);
        v60 = (int32x4_t)vqtbl1q_s8(v11, (int8x16_t)xmmword_196889CD0);
        v11 = vqtbl1q_s8(v11, (int8x16_t)xmmword_196889CC0);
        v116.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshlq_n_s32(v59, 4uLL), vsubq_s32(v60, v59), v32), v34), 4uLL), v35), (int32x4_t)0);
        v116.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshlq_n_s32(v58, 4uLL), vsubq_s32((int32x4_t)v11, v58), v32), v34), 4uLL), v35), (int32x4_t)0);
        v10 = vqtbl2q_s8(v116, (int8x16_t)xmmword_19689A990);
        *(_QWORD *)&v56[v53] = v10.i64[0];
        v53 += 8;
      }
      while (v57 + v53);
      k = v6 & 0xFFFFFFF8;
      if (v33 != v6)
        goto LABEL_34;
LABEL_17:
      v38 += v3;
      v37 += v5;
      ++v30;
      v36 += v5;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t put_bilin_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int16x8_t *v26;
  int32x4_t v27;
  int32x4_t v28;
  unsigned int v29;
  uint64_t i;
  int32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  int16x8_t *v34;
  int16x8_t v35;
  int16x8_t v36;
  int32x4_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int16x8_t *v43;
  int16x8_t v44;
  int16x8_t v45;
  int v46;
  _BYTE v47[65792];
  uint64_t v48;
  int8x16x2_t v49;
  int8x16x4_t v50;

  result = MEMORY[0x1E0C80A78]();
  v48 = *MEMORY[0x1E0C80C00];
  if ((int)v14 >= 1)
  {
    v18 = ((v17 + (v15 - 1) * a10) >> 10) + 2;
    v19 = v47;
    do
    {
      v20 = 0;
      v21 = 0;
      v22 = v16;
      do
      {
        *(_WORD *)&v19[v20] = (*(unsigned __int8 *)(v12 + v21 + 1) - *(unsigned __int8 *)(v12 + v21)) * (v22 >> 6)
                            + 16 * *(unsigned __int8 *)(v12 + v21);
        v23 = v22 + a9;
        v21 += v23 >> 10;
        v22 = v23 & 0x3FF;
        v20 += 2;
      }
      while (2 * v14 != v20);
      v19 += 256;
      v12 += v13;
      --v18;
    }
    while (v18);
    v24 = v14 & 0xFFFFFFF0;
    v25 = v14 & 0xFFFFFFF8;
    v26 = (int16x8_t *)v47;
    v27.i64[0] = 0x8000000080;
    v27.i64[1] = 0x8000000080;
    v28.i64[0] = 0xFF000000FFLL;
    v28.i64[1] = 0xFF000000FFLL;
    do
    {
      v29 = v17 >> 6;
      if (v14 < 8)
      {
        for (i = 0; i != v14; *(_BYTE *)(result + i++) = v46 & ~(v46 >> 31))
        {
LABEL_19:
          v46 = (int)((v26[16].i16[i] - v26->i16[i]) * v29 + 16 * v26->i16[i] + 128) >> 8;
          if (v46 >= 255)
            v46 = 255;
        }
        goto LABEL_7;
      }
      v31 = vdupq_n_s32(v29);
      if (v14 >= 0x10)
      {
        v33 = 0;
        v34 = v26 + 16;
        do
        {
          v35 = v34[-16];
          v36 = v34[-15];
          v37 = vshll_high_n_s16(v36, 4uLL);
          v39 = *v34;
          v38 = v34[1];
          v34 += 2;
          v40 = vsubl_high_s16(v38, v36);
          v41 = vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshll_n_s16(*(int16x4_t *)v36.i8, 4uLL), vsubl_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v36.i8), v31), v27), 8uLL), v28);
          v42 = vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(v37, v40, v31), v27), 8uLL), v28);
          v50.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshll_high_n_s16(v35, 4uLL), vsubl_high_s16(v39, v35), v31), v27), 8uLL), v28), (int32x4_t)0);
          v50.val[3] = (int8x16_t)vmaxq_s32(v42, (int32x4_t)0);
          v50.val[2] = (int8x16_t)vmaxq_s32(v41, (int32x4_t)0);
          v50.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshll_n_s16(*(int16x4_t *)v35.i8, 4uLL), vsubl_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v35.i8), v31), v27), 8uLL), v28), (int32x4_t)0);
          *(int8x16_t *)(result + v33) = vqtbl4q_s8(v50, (int8x16_t)xmmword_19689A980);
          v33 += 16;
        }
        while (v24 != v33);
        if (v24 == v14)
          goto LABEL_7;
        v32 = v14 & 0xFFFFFFF0;
        i = v32;
        if ((v14 & 8) == 0)
          goto LABEL_19;
      }
      else
      {
        v32 = 0;
      }
      v43 = (int16x8_t *)((char *)v26 + 2 * v32 + 256);
      do
      {
        v44 = v43[-16];
        v45 = *v43++;
        v49.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshll_high_n_s16(v44, 4uLL), vsubl_high_s16(v45, v44), v31), v27), 8uLL), v28), (int32x4_t)0);
        v49.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vshll_n_s16(*(int16x4_t *)v44.i8, 4uLL), vsubl_s16(*(int16x4_t *)v45.i8, *(int16x4_t *)v44.i8), v31), v27), 8uLL), v28), (int32x4_t)0);
        *(_QWORD *)(result + v32) = vqtbl2q_s8(v49, (int8x16_t)xmmword_19689A990).u64[0];
        v32 += 8;
      }
      while (v25 != v32);
      i = v14 & 0xFFFFFFF8;
      if (v25 != v14)
        goto LABEL_19;
LABEL_7:
      v26 = (int16x8_t *)((char *)v26 + 2 * (int)(((v17 + a10) >> 3) & 0xFFFFFF80));
      v17 = (v17 + a10) & 0x3FF;
      result += v11;
      --v15;
    }
    while (v15);
  }
  return result;
}

uint64_t prep_bilin_c_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint8x8_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int32x4_t v12;
  int8x16_t *v13;
  _BYTE *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t *v19;
  int8x16_t v20;
  int8x16_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int8x16_t v25;
  int32x4_t v26;
  int16x8_t *v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int32x4_t v32;
  char *v33;
  unint64_t v34;
  int8x16_t *v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  int8x16_t *v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int8x16_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  _BYTE *i;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int32x4_t v67;
  uint64_t v68;
  int8x16_t *v69;
  unint64_t v70;
  uint8x8_t *v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  int8x16_t *v76;
  int8x16_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int8x16_t v82;
  uint64_t v83;
  uint64_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  _BYTE v88[33024];
  uint64_t v89;

  result = MEMORY[0x1E0C80A78](a1, a2);
  v89 = *MEMORY[0x1E0C80C00];
  if (v7)
  {
    if (v8)
    {
      if ((int)v5 >= 1)
      {
        v11 = v6 + 1;
        v12 = vdupq_n_s32(v7);
        v13 = (int8x16_t *)((char *)v3 + 1);
        v14 = v88;
        while (1)
        {
          v15 = v3->u8[0];
          if (v5 >= 0x10)
          {
            v17 = 0;
            v18 = vdupq_n_s8(v15);
            v19 = v13;
            do
            {
              v20 = v18;
              v21 = *v19++;
              v18 = v21;
              v22 = (int32x4_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_19689AE00);
              v23 = (int32x4_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_19689ADF0);
              v24 = (int32x4_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_19689AE10);
              v25 = vqtbl1q_s8(v20, (int8x16_t)xmmword_19689ADA0);
              v26 = (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_19689ADB0);
              v27 = (int16x8_t *)&v14[v17];
              *v27 = vuzp1q_s16((int16x8_t)vmlaq_s32(vshlq_n_s32(v26, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_196889CC0), v26), v12), (int16x8_t)vmlaq_s32(vshlq_n_s32(v24, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_196889CD0), v24), v12));
              v27[1] = vuzp1q_s16((int16x8_t)vmlaq_s32(vshlq_n_s32(v23, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_196889CB0), v23), v12), (int16x8_t)vmlaq_s32(vshlq_n_s32(v22, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_196889CA0), v22), v12));
              v17 += 32;
            }
            while (((2 * v5) & 0x1FFFFFFE0) != v17);
            if ((v5 & 0xFFFFFFF0) == v5)
              goto LABEL_5;
            LOBYTE(v15) = v18.i8[15];
            v16 = v5 & 0xFFFFFFF0;
          }
          else
          {
            v16 = 0;
          }
          do
          {
            v28 = v13->u8[v16];
            *(_WORD *)&v14[2 * v16] = (v28 - v15) * v7 + 16 * v15;
            LOBYTE(v15) = v28;
            ++v16;
          }
          while (v5 != v16);
LABEL_5:
          v14 += 256;
          v3 = (uint8x8_t *)((char *)v3 + v4);
          v13 = (int8x16_t *)((char *)v13 + v4);
          if (!--v11)
          {
            v58 = vdupq_n_s32(v8);
            for (i = v88; ; i += 256)
            {
              if (v5 >= 8)
              {
                v61 = 0;
                do
                {
                  *(int16x8_t *)(result + v61) = vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vshll_n_s16(*(int16x4_t *)&i[v61], 4uLL), vsubl_s16(*(int16x4_t *)&i[v61 + 256], *(int16x4_t *)&i[v61]), v58), 4uLL), vmlaq_s32(vshll_high_n_s16(*(int16x8_t *)&i[v61], 4uLL), vsubl_high_s16(*(int16x8_t *)&i[v61 + 256], *(int16x8_t *)&i[v61]), v58), 4uLL);
                  v61 += 16;
                }
                while (((2 * v5) & 0x1FFFFFFF0) != v61);
                v60 = v5 & 0x7FFFFFF8;
                if ((v5 & 0xFFFFFFF8) == v5)
                  goto LABEL_44;
              }
              else
              {
                v60 = 0;
              }
              v62 = v5 - v60;
              v63 = 2 * v60;
              do
              {
                *(_WORD *)(result + v63) = ((*(__int16 *)&i[v63 + 256] - *(__int16 *)&i[v63]) * v8
                                          + 16 * *(__int16 *)&i[v63]
                                          + 8) >> 4;
                v63 += 2;
                --v62;
              }
              while (v62);
LABEL_44:
              result += 2 * v5;
              if (!--v6)
                return result;
            }
          }
        }
      }
      return result;
    }
    if ((int)v5 < 1)
      return result;
    v64 = 0;
    v65 = 2 * v5;
    v66 = 2 * (int)v5;
    v67 = vdupq_n_s32(v7);
    v68 = v5 & 0xFFFFFFF8;
    v69 = (int8x16_t *)((char *)v3 + 1);
    v70 = result;
    v71 = v3;
    while (1)
    {
      if (v5 >= 8)
      {
        if (v70 >= (unint64_t)v3 + v5 + v64 * v4 + 1
          || (unint64_t)v71 >= result + v65 + v66 * v64)
        {
          if (v5 < 0x10)
          {
            v74 = 0;
LABEL_69:
            v84 = 2 * v74;
            do
            {
              *(uint8x8_t *)v9.i8 = *(uint8x8_t *)((char *)v71 + v74);
              v85 = (int32x4_t)vqtbl1q_s8(v9, (int8x16_t)xmmword_196889CD0);
              v86 = (int32x4_t)vqtbl1q_s8(v9, (int8x16_t)xmmword_196889CC0);
              v10.i64[0] = *(uint64_t *)((char *)v69->i64 + v74);
              v87 = (int32x4_t)vqtbl1q_s8((int8x16_t)v10, (int8x16_t)xmmword_196889CC0);
              v10 = (int16x8_t)vqtbl1q_s8((int8x16_t)v10, (int8x16_t)xmmword_196889CD0);
              v9 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32(vshlq_n_s32(v86, 4uLL), vsubq_s32(v87, v86), v67), (int16x8_t)vmlaq_s32(vshlq_n_s32(v85, 4uLL), vsubq_s32((int32x4_t)v10, v85), v67));
              *(int8x16_t *)(v70 + v84) = v9;
              v74 += 8;
              v84 += 16;
            }
            while (v68 != v74);
            v72 = v5 & 0xFFFFFFF8;
            if (v68 == v5)
              goto LABEL_55;
            goto LABEL_72;
          }
          v75 = 0;
          v76 = v69;
          do
          {
            v77 = *(int8x16_t *)((char *)v76 - 1);
            v78 = (int32x4_t)vqtbl1q_s8(v77, (int8x16_t)xmmword_196889CA0);
            v79 = (int32x4_t)vqtbl1q_s8(v77, (int8x16_t)xmmword_196889CB0);
            v80 = (int32x4_t)vqtbl1q_s8(v77, (int8x16_t)xmmword_196889CD0);
            v81 = (int32x4_t)vqtbl1q_s8(v77, (int8x16_t)xmmword_196889CC0);
            v82 = *v76++;
            v10 = (int16x8_t)vmlaq_s32(vshlq_n_s32(v81, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_196889CC0), v81), v67);
            v9 = (int8x16_t)vuzp1q_s16(v10, (int16x8_t)vmlaq_s32(vshlq_n_s32(v80, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_196889CD0), v80), v67));
            v83 = v70 + v75;
            *(int8x16_t *)v83 = v9;
            *(int16x8_t *)(v83 + 16) = vuzp1q_s16((int16x8_t)vmlaq_s32(vshlq_n_s32(v79, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_196889CB0), v79), v67), (int16x8_t)vmlaq_s32(vshlq_n_s32(v78, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_196889CA0), v78), v67));
            v75 += 32;
          }
          while ((v65 & 0x1FFFFFFE0) != v75);
          if ((v5 & 0xFFFFFFF0) == v5)
            goto LABEL_55;
          v74 = v5 & 0xFFFFFFF0;
          v72 = v74;
          if ((v5 & 8) != 0)
            goto LABEL_69;
        }
        else
        {
          v72 = 0;
        }
      }
      else
      {
        v72 = 0;
      }
      do
      {
LABEL_72:
        *(_WORD *)(v70 + 2 * v72) = (v69->u8[v72] - v71->u8[v72]) * v7 + 16 * v71->u8[v72];
        ++v72;
      }
      while (v5 != v72);
LABEL_55:
      v70 += v66;
      v71 = (uint8x8_t *)((char *)v71 + v4);
      ++v64;
      v69 = (int8x16_t *)((char *)v69 + v4);
      if (!--v6)
        return result;
    }
  }
  if (!v8)
    return prep_c_0(result, v3, v4, v5, v6);
  if ((int)v5 >= 1)
  {
    v29 = 0;
    v30 = 2 * v5;
    v31 = 2 * (int)v5;
    v32 = vdupq_n_s32(v8);
    v33 = (char *)v3 + v4;
    v34 = result;
    v35 = (int8x16_t *)v3;
    do
    {
      if (v5 >= 8)
      {
        v36 = 0;
        v37 = result + v30 + v31 * v29;
        v39 = v34 < (unint64_t)v3 + v5 + v29 * v4 && (unint64_t)v35 < v37;
        v40 = (unint64_t)v3 + v4 + v29 * v4 >= v37 || v34 >= (unint64_t)v3 + v5 + v4 + v29 * v4;
        if (v40 && !v39)
        {
          if (v5 < 0x10)
          {
            v41 = 0;
LABEL_38:
            v50 = (uint64_t *)((char *)v35->i64 + v41);
            v51 = v4 + v41;
            v52 = 2 * v41;
            v53 = v41 - (v5 & 0xFFFFFFF8);
            do
            {
              v54 = *v50++;
              v9.i64[0] = v54;
              v55 = (int32x4_t)vqtbl1q_s8(v9, (int8x16_t)xmmword_196889CD0);
              v56 = (int32x4_t)vqtbl1q_s8(v9, (int8x16_t)xmmword_196889CC0);
              v10.i64[0] = *(uint64_t *)((char *)v35->i64 + v51);
              v57 = (int32x4_t)vqtbl1q_s8((int8x16_t)v10, (int8x16_t)xmmword_196889CC0);
              v10 = (int16x8_t)vqtbl1q_s8((int8x16_t)v10, (int8x16_t)xmmword_196889CD0);
              v9 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32(vshlq_n_s32(v56, 4uLL), vsubq_s32(v57, v56), v32), (int16x8_t)vmlaq_s32(vshlq_n_s32(v55, 4uLL), vsubq_s32((int32x4_t)v10, v55), v32));
              *(int8x16_t *)(v34 + v52) = v9;
              v51 += 8;
              v52 += 16;
              v53 += 8;
            }
            while (v53);
            v36 = v5 & 0xFFFFFFF8;
            if (v36 == v5)
              goto LABEL_17;
            goto LABEL_41;
          }
          v42 = 0;
          v43 = v35;
          do
          {
            v44 = (int32x4_t)vqtbl1q_s8(*v43, (int8x16_t)xmmword_196889CA0);
            v45 = (int32x4_t)vqtbl1q_s8(*v43, (int8x16_t)xmmword_196889CB0);
            v46 = (int32x4_t)vqtbl1q_s8(*v43, (int8x16_t)xmmword_196889CD0);
            v47 = (int32x4_t)vqtbl1q_s8(*v43, (int8x16_t)xmmword_196889CC0);
            v48 = *(int8x16_t *)((char *)v43 + v4);
            v10 = (int16x8_t)vmlaq_s32(vshlq_n_s32(v47, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v48, (int8x16_t)xmmword_196889CC0), v47), v32);
            v9 = (int8x16_t)vuzp1q_s16(v10, (int16x8_t)vmlaq_s32(vshlq_n_s32(v46, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v48, (int8x16_t)xmmword_196889CD0), v46), v32));
            v49 = v34 + v42;
            *(int8x16_t *)v49 = v9;
            *(int16x8_t *)(v49 + 16) = vuzp1q_s16((int16x8_t)vmlaq_s32(vshlq_n_s32(v45, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v48, (int8x16_t)xmmword_196889CB0), v45), v32), (int16x8_t)vmlaq_s32(vshlq_n_s32(v44, 4uLL), vsubq_s32((int32x4_t)vqtbl1q_s8(v48, (int8x16_t)xmmword_196889CA0), v44), v32));
            ++v43;
            v42 += 32;
          }
          while ((v30 & 0x1FFFFFFE0) != v42);
          if ((v5 & 0xFFFFFFF0) == v5)
            goto LABEL_17;
          v41 = v5 & 0xFFFFFFF0;
          v36 = v41;
          if ((v5 & 8) != 0)
            goto LABEL_38;
        }
      }
      else
      {
        v36 = 0;
      }
      do
      {
LABEL_41:
        *(_WORD *)(v34 + 2 * v36) = (v33[v36] - v35->u8[v36]) * v8 + 16 * v35->u8[v36];
        ++v36;
      }
      while (v5 != v36);
LABEL_17:
      v34 += v31;
      v35 = (int8x16_t *)((char *)v35 + v4);
      ++v29;
      v33 += v4;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t prep_bilin_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  _BYTE *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int32x4_t v27;
  _BYTE v28[65792];
  uint64_t v29;

  result = MEMORY[0x1E0C80A78]();
  v29 = *MEMORY[0x1E0C80C00];
  if ((int)v12 >= 1)
  {
    v17 = ((int)(v15 + (v13 - 1) * a9) >> 10) + 2;
    v18 = v28;
    do
    {
      v19 = 0;
      v20 = 0;
      v21 = v14;
      do
      {
        *(_WORD *)&v18[v19] = (*(unsigned __int8 *)(v10 + v20 + 1) - *(unsigned __int8 *)(v10 + v20)) * (v21 >> 6)
                            + 16 * *(unsigned __int8 *)(v10 + v20);
        v22 = v21 + v16;
        v20 += v22 >> 10;
        v21 = v22 & 0x3FF;
        v19 += 2;
      }
      while (2 * v12 != v19);
      v18 += 256;
      v10 += v11;
      --v17;
    }
    while (v17);
    v23 = v28;
    do
    {
      v24 = v15 >> 6;
      if (v12 >= 8)
      {
        v26 = 0;
        v27 = vdupq_n_s32(v24);
        do
        {
          *(int16x8_t *)(result + v26) = vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vshll_n_s16(*(int16x4_t *)&v23[v26], 4uLL), vsubl_s16(*(int16x4_t *)&v23[v26 + 256], *(int16x4_t *)&v23[v26]), v27), 4uLL), vmlaq_s32(vshll_high_n_s16(*(int16x8_t *)&v23[v26], 4uLL), vsubl_high_s16(*(int16x8_t *)&v23[v26 + 256], *(int16x8_t *)&v23[v26]), v27), 4uLL);
          v26 += 16;
        }
        while (((2 * v12) & 0x1FFFFFFF0) != v26);
        v25 = v12 & 0xFFFFFFF8;
        if (v25 == v12)
          goto LABEL_7;
      }
      else
      {
        v25 = 0;
      }
      do
      {
        *(_WORD *)(result + 2 * v25) = ((*(__int16 *)&v23[2 * v25 + 256] - *(__int16 *)&v23[2 * v25]) * v24
                                      + 16 * *(__int16 *)&v23[2 * v25]
                                      + 8) >> 4;
        ++v25;
      }
      while (v12 != v25);
LABEL_7:
      v23 += 2 * (int)(((int)(v15 + a9) >> 3) & 0xFFFFFF80);
      v15 = (v15 + a9) & 0x3FF;
      result += 2 * v12;
      --v13;
    }
    while (v13);
  }
  return result;
}

int8x16_t *avg_c_0(int8x16_t *result, uint64_t a2, unint64_t a3, unint64_t a4, unsigned int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  unint64_t v12;
  unint64_t v13;
  int8x16_t *v14;
  uint64_t i;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int16x8_t v25;
  int16x8_t v26;
  uint64_t v27;
  int8x16_t *v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int8x16x2_t v33;
  int8x16x4_t v34;

  if ((int)a5 >= 1)
  {
    v6 = 0;
    v7 = 2 * a5;
    v8 = 2 * (int)a5;
    v9 = a5 & 0xFFFFFFF8;
    v10.i64[0] = 0x1000000010;
    v10.i64[1] = 0x1000000010;
    v11.i64[0] = 0xFF000000FFLL;
    v11.i64[1] = 0xFF000000FFLL;
    v12 = a4;
    v13 = a3;
    v14 = result;
    do
    {
      if (a5 < 8)
      {
        for (i = 0; i != a5; v14->i8[i++] = v16 & ~(v16 >> 31))
        {
LABEL_6:
          v16 = (*(__int16 *)(v13 + 2 * i) + *(__int16 *)(v12 + 2 * i) + 16) >> 5;
          if (v16 >= 255)
            v16 = 255;
        }
        goto LABEL_3;
      }
      i = 0;
      v17 = v7 + v8 * v6;
      v18 = a3 + v17;
      v19 = (unint64_t)result->u64 + a5 + v6 * a2;
      v21 = (unint64_t)v14 < a4 + v17 && v12 < v19;
      v22 = v13 >= v19 || (unint64_t)v14 >= v18;
      if (!v22 || v21)
        goto LABEL_6;
      if (a5 >= 0x10)
      {
        v27 = 0;
        v28 = v14;
        do
        {
          v30 = *(int16x8_t *)(v13 + v27);
          v29 = *(int16x8_t *)(v13 + v27 + 16);
          v32 = *(int16x8_t *)(v12 + v27);
          v31 = *(int16x8_t *)(v12 + v27 + 16);
          v34.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddl_high_s16(v29, v31), v10), 5uLL), v11), (int32x4_t)0);
          v34.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddl_high_s16(v30, v32), v10), 5uLL), v11), (int32x4_t)0);
          v34.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddl_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v31.i8), v10), 5uLL), v11), (int32x4_t)0);
          v34.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddl_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v32.i8), v10), 5uLL), v11), (int32x4_t)0);
          *v28++ = vqtbl4q_s8(v34, (int8x16_t)xmmword_19689A980);
          v27 += 32;
        }
        while ((v7 & 0x1FFFFFFE0) != v27);
        if ((a5 & 0xFFFFFFF0) == (unint64_t)a5)
          goto LABEL_3;
        v23 = a5 & 0xFFFFFFF0;
        i = v23;
        if ((a5 & 8) == 0)
          goto LABEL_6;
      }
      else
      {
        v23 = 0;
      }
      v24 = 2 * v23;
      do
      {
        v25 = *(int16x8_t *)(v13 + v24);
        v26 = *(int16x8_t *)(v12 + v24);
        v33.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddl_high_s16(v25, v26), v10), 5uLL), v11), (int32x4_t)0);
        v33.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddl_s16(*(int16x4_t *)v25.i8, *(int16x4_t *)v26.i8), v10), 5uLL), v11), (int32x4_t)0);
        *(uint64_t *)((char *)v14->i64 + v23) = vqtbl2q_s8(v33, (int8x16_t)xmmword_19689A990).u64[0];
        v23 += 8;
        v24 += 16;
      }
      while (v9 != v23);
      i = a5 & 0xFFFFFFF8;
      if (v9 != a5)
        goto LABEL_6;
LABEL_3:
      v13 += v8;
      v12 += v8;
      v14 = (int8x16_t *)((char *)v14 + a2);
      ++v6;
      --a6;
    }
    while (a6);
  }
  return result;
}

int8x16_t *w_avg_c_0(int8x16_t *result, uint64_t a2, unint64_t a3, unint64_t a4, unsigned int a5, int a6, unsigned int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  uint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  unint64_t v15;
  unint64_t v16;
  int8x16_t *v17;
  uint64_t i;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int16x8_t v28;
  int32x4_t v29;
  int16x8_t v30;
  int32x4_t v31;
  uint64_t v32;
  int8x16_t *v33;
  int16x8_t v34;
  int16x8_t v35;
  int32x4_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int8x16x2_t v40;
  int8x16x4_t v41;

  if ((int)a5 >= 1)
  {
    v7 = 0;
    v8 = 2 * a5;
    v9 = 2 * (int)a5;
    v10 = vdupq_n_s32(a7);
    v11 = vdupq_n_s32(16 - a7);
    v12 = a5 & 0xFFFFFFF8;
    v13.i64[0] = 0x8000000080;
    v13.i64[1] = 0x8000000080;
    v14.i64[0] = 0xFF000000FFLL;
    v14.i64[1] = 0xFF000000FFLL;
    v15 = a4;
    v16 = a3;
    v17 = result;
    do
    {
      if (a5 < 8)
      {
        for (i = 0; i != a5; v17->i8[i++] = v19 & ~(v19 >> 31))
        {
LABEL_6:
          v19 = (int)((16 - a7) * *(__int16 *)(v15 + 2 * i) + *(__int16 *)(v16 + 2 * i) * a7 + 128) >> 8;
          if (v19 >= 255)
            v19 = 255;
        }
        goto LABEL_3;
      }
      i = 0;
      v20 = v8 + v9 * v7;
      v21 = a3 + v20;
      v22 = (unint64_t)result->u64 + a5 + v7 * a2;
      v24 = (unint64_t)v17 < a4 + v20 && v15 < v22;
      v25 = v16 >= v22 || (unint64_t)v17 >= v21;
      if (!v25 || v24)
        goto LABEL_6;
      if (a5 >= 0x10)
      {
        v32 = 0;
        v33 = v17;
        do
        {
          v34 = *(int16x8_t *)(v16 + v32);
          v35 = *(int16x8_t *)(v16 + v32 + 16);
          v36 = vmovl_high_s16(v34);
          v37 = *(int16x8_t *)(v15 + v32);
          v38 = *(int16x8_t *)(v15 + v32 + 16);
          v39 = vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v11, vmovl_s16(*(int16x4_t *)v37.i8)), v10, vmovl_s16(*(int16x4_t *)v34.i8)), v13), 8uLL), v14);
          v41.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v11, vmovl_high_s16(v38)), v10, vmovl_high_s16(v35)), v13), 8uLL), v14), (int32x4_t)0);
          v41.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v11, vmovl_high_s16(v37)), v10, v36), v13), 8uLL), v14), (int32x4_t)0);
          v41.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v11, vmovl_s16(*(int16x4_t *)v38.i8)), v10, vmovl_s16(*(int16x4_t *)v35.i8)), v13), 8uLL), v14), (int32x4_t)0);
          v41.val[0] = (int8x16_t)vmaxq_s32(v39, (int32x4_t)0);
          *v33++ = vqtbl4q_s8(v41, (int8x16_t)xmmword_19689A980);
          v32 += 32;
        }
        while ((v8 & 0x1FFFFFFE0) != v32);
        if ((a5 & 0xFFFFFFF0) == (unint64_t)a5)
          goto LABEL_3;
        v26 = a5 & 0xFFFFFFF0;
        i = v26;
        if ((a5 & 8) == 0)
          goto LABEL_6;
      }
      else
      {
        v26 = 0;
      }
      v27 = 2 * v26;
      do
      {
        v28 = *(int16x8_t *)(v16 + v27);
        v29 = vmovl_high_s16(v28);
        v30 = *(int16x8_t *)(v15 + v27);
        v31 = vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v11, vmovl_s16(*(int16x4_t *)v30.i8)), v10, vmovl_s16(*(int16x4_t *)v28.i8)), v13), 8uLL), v14);
        v40.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v11, vmovl_high_s16(v30)), v10, v29), v13), 8uLL), v14), (int32x4_t)0);
        v40.val[0] = (int8x16_t)vmaxq_s32(v31, (int32x4_t)0);
        *(uint64_t *)((char *)v17->i64 + v26) = vqtbl2q_s8(v40, (int8x16_t)xmmword_19689A990).u64[0];
        v26 += 8;
        v27 += 16;
      }
      while (v12 != v26);
      i = a5 & 0xFFFFFFF8;
      if (v12 != a5)
        goto LABEL_6;
LABEL_3:
      v16 += v9;
      v15 += v9;
      v17 = (int8x16_t *)((char *)v17 + a2);
      ++v7;
      --a6;
    }
    while (a6);
  }
  return result;
}

unint64_t mask_c_0(unint64_t result, uint64_t a2, int16x8_t *a3, int16x8_t *a4, int a5, int a6, unint64_t a7)
{
  int32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int16x8_t *v15;
  int16x8_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t i;
  uint64_t v20;
  unint64_t v21;
  BOOL v23;
  BOOL v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int16x8_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int16x8_t v34;
  int32x4_t v35;
  int32x4_t v36;
  uint64_t v37;
  int16x8_t *v38;
  int16x8_t *v39;
  int16x8_t v40;
  int16x8_t v41;
  int32x4_t v42;
  int8x16_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int32x4_t v50;
  int v51;
  int8x16x4_t v52;

  if (a5 >= 1)
  {
    v8 = 0;
    v9 = 2 * a5;
    v10 = a5 & 0xFFFFFFF0;
    v11 = a5 & 0xFFFFFFF8;
    v12.i64[0] = 0x4000000040;
    v12.i64[1] = 0x4000000040;
    v13.i64[0] = 0x20000000200;
    v13.i64[1] = 0x20000000200;
    v14.i64[0] = 0xFF000000FFLL;
    v14.i64[1] = 0xFF000000FFLL;
    v15 = a4;
    v16 = a3;
    v17 = a7;
    v18 = result;
    do
    {
      if (a5 < 8)
      {
        for (i = 0; i != a5; *(_BYTE *)(v18 + i++) = v51 & ~(v51 >> 31))
        {
LABEL_35:
          v51 = ((64 - *(unsigned __int8 *)(v17 + i)) * v15->i16[i] + *(unsigned __int8 *)(v17 + i) * v16->i16[i] + 512) >> 10;
          if (v51 >= 255)
            v51 = 255;
        }
        goto LABEL_3;
      }
      i = 0;
      v20 = 2 * a5 + v9 * v8;
      v21 = result + a5 + v8 * a2;
      v23 = v18 < a7 + a5 + v8 * a5 && v17 < v21;
      v25 = v18 < (unint64_t)a4->u64 + v20 && (unint64_t)v15 < v21;
      v26 = (unint64_t)a3->u64 + v20;
      v27 = (unint64_t)v16 >= v21 || v18 >= v26;
      if (!v27 || v23 || v25)
        goto LABEL_35;
      if (a5 >= 0x10)
      {
        v37 = 0;
        v38 = v15;
        v39 = v16;
        do
        {
          v40 = *v39;
          v41 = v39[1];
          v39 += 2;
          v42 = vmovl_high_s16(v40);
          v43 = *(int8x16_t *)(v17 + v37);
          v44 = (int32x4_t)vqtbl1q_s8(v43, (int8x16_t)xmmword_196889CA0);
          v45 = (int32x4_t)vqtbl1q_s8(v43, (int8x16_t)xmmword_196889CB0);
          v46 = (int32x4_t)vqtbl1q_s8(v43, (int8x16_t)xmmword_196889CD0);
          v47 = (int32x4_t)vqtbl1q_s8(v43, (int8x16_t)xmmword_196889CC0);
          v48 = *v38;
          v49 = v38[1];
          v38 += 2;
          v50 = vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(vsubq_s32(v12, v47), vmovl_s16(*(int16x4_t *)v48.i8)), v47, vmovl_s16(*(int16x4_t *)v40.i8)), v13), 0xAuLL), v14);
          v7 = vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(vsubq_s32(v12, v45), vmovl_s16(*(int16x4_t *)v49.i8)), v45, vmovl_s16(*(int16x4_t *)v41.i8)), v13), 0xAuLL), v14);
          v52.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(vsubq_s32(v12, v44), vmovl_high_s16(v49)), v44, vmovl_high_s16(v41)), v13), 0xAuLL), v14), (int32x4_t)0);
          v52.val[2] = (int8x16_t)vmaxq_s32(v7, (int32x4_t)0);
          v52.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(vsubq_s32(v12, v46), vmovl_high_s16(v48)), v46, v42), v13), 0xAuLL), v14), (int32x4_t)0);
          v52.val[0] = (int8x16_t)vmaxq_s32(v50, (int32x4_t)0);
          *(int8x16_t *)(v18 + v37) = vqtbl4q_s8(v52, (int8x16_t)xmmword_19689A980);
          v37 += 16;
        }
        while (v10 != v37);
        if (v10 == a5)
          goto LABEL_3;
        v28 = a5 & 0xFFFFFFF0;
        i = v28;
        if ((a5 & 8) == 0)
          goto LABEL_35;
      }
      else
      {
        v28 = 0;
      }
      v29 = 2 * v28;
      do
      {
        v30 = *(int16x8_t *)((char *)v16 + v29);
        v31 = vmovl_high_s16(v30);
        v7.i64[0] = *(_QWORD *)(v17 + v28);
        v32 = (int32x4_t)vqtbl1q_s8((int8x16_t)v7, (int8x16_t)xmmword_196889CD0);
        v33 = (int32x4_t)vqtbl1q_s8((int8x16_t)v7, (int8x16_t)xmmword_196889CC0);
        v34 = *(int16x8_t *)((char *)v15 + v29);
        v35 = vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(vsubq_s32(v12, v33), vmovl_s16(*(int16x4_t *)v34.i8)), v33, vmovl_s16(*(int16x4_t *)v30.i8)), v13), 0xAuLL), v14);
        v7 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(vsubq_s32(v12, v32), vmovl_high_s16(v34)), v32, v31), v13), 0xAuLL), v14), (int32x4_t)0);
        v36 = vmaxq_s32(v35, (int32x4_t)0);
        *(_QWORD *)(v18 + v28) = vqtbl2q_s8(*(int8x16x2_t *)(&v7 - 1), (int8x16_t)xmmword_19689A990).u64[0];
        v28 += 8;
        v29 += 16;
      }
      while (v11 != v28);
      i = a5 & 0xFFFFFFF8;
      if (v11 != a5)
        goto LABEL_35;
LABEL_3:
      v16 = (int16x8_t *)((char *)v16 + v9);
      v15 = (int16x8_t *)((char *)v15 + v9);
      v17 += a5;
      v18 += a2;
      ++v8;
      --a6;
    }
    while (a6);
  }
  return result;
}

unint64_t blend_c_0(unint64_t result, uint64_t a2, unint64_t a3, int a4, int a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint16x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  if (a4 >= 1)
  {
    v6 = 0;
    v7 = a4 & 0xFFFFFFF0;
    v8 = a4 & 0xFFFFFFF8;
    v9.i64[0] = 0x40004000400040;
    v9.i64[1] = 0x40004000400040;
    v10 = a3;
    v11 = result;
    v12 = a6;
    do
    {
      if (a4 >= 8)
      {
        v13 = 0;
        v14 = a4 + v6 * a4;
        v15 = a6 + v14;
        v16 = result + a4 + v6 * a2;
        v18 = v11 < a3 + v14 && v10 < v16;
        v19 = v12 >= v16 || v11 >= v15;
        if (v19 && !v18)
        {
          if (a4 < 0x10)
          {
            v20 = 0;
            do
            {
LABEL_22:
              *(int8x8_t *)(v11 + v20) = vrshrn_n_s16((int16x8_t)vmlal_u8(vmlsl_u8(vmull_u8((uint8x8_t)0x4040404040404040, *(uint8x8_t *)(v11 + v20)), *(uint8x8_t *)(v12 + v20), *(uint8x8_t *)(v11 + v20)), *(uint8x8_t *)(v10 + v20), *(uint8x8_t *)(v12 + v20)), 6uLL);
              v20 += 8;
            }
            while (v8 != v20);
            v13 = a4 & 0xFFFFFFF8;
            if (v8 == a4)
              goto LABEL_3;
            goto LABEL_6;
          }
          v21 = 0;
          do
          {
            *(int8x16_t *)(v11 + v21) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vmulq_s16((int16x8_t)vsubw_u8(v9, *(uint8x8_t *)(v12 + v21)), (int16x8_t)vmovl_u8(*(uint8x8_t *)(v11 + v21))), *(uint8x8_t *)(v10 + v21), *(uint8x8_t *)(v12 + v21)), 6uLL), (int16x8_t)vmlal_high_u8((uint16x8_t)vmulq_s16((int16x8_t)vsubw_high_u8(v9, *(uint8x16_t *)(v12 + v21)), (int16x8_t)vmovl_high_u8(*(uint8x16_t *)(v11 + v21))), *(uint8x16_t *)(v10 + v21), *(uint8x16_t *)(v12 + v21)), 6uLL);
            v21 += 16;
          }
          while (v7 != v21);
          if (v7 == a4)
            goto LABEL_3;
          v20 = a4 & 0xFFFFFFF0;
          v13 = v20;
          if ((a4 & 8) != 0)
            goto LABEL_22;
        }
      }
      else
      {
        v13 = 0;
      }
      do
      {
LABEL_6:
        *(_BYTE *)(v11 + v13) = ((64 - *(unsigned __int8 *)(v12 + v13)) * *(unsigned __int8 *)(v11 + v13)
                               + *(unsigned __int8 *)(v10 + v13) * *(unsigned __int8 *)(v12 + v13)
                               + 32) >> 6;
        ++v13;
      }
      while (a4 != v13);
LABEL_3:
      v11 += a2;
      v10 += a4;
      v12 += a4;
      ++v6;
      --a5;
    }
    while (a5);
  }
  return result;
}

unint64_t blend_v_c_0(unint64_t result, uint64_t a2, unint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint16x8_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  if (a4 >= 2)
  {
    v5 = 0;
    v6 = a4;
    v7 = (char *)&dav1d_obmc_masks + a4;
    LODWORD(v8) = (3 * a4) >> 2;
    if ((int)v8 <= 1)
      v8 = 1;
    else
      v8 = v8;
    v9 = v8 & 0x1FFFFFF0;
    v10 = v8 & 0x1FFFFFF8;
    v11.i64[0] = 0x40004000400040;
    v11.i64[1] = 0x40004000400040;
    v12 = a3;
    v13 = result;
    do
    {
      if (v8 >= 8)
      {
        v14 = 0;
        v15 = result + v8 + v5 * a2;
        v17 = v13 < a3 + v8 + v5 * v6 && v12 < v15;
        v18 = (unint64_t)v7 >= v15 || v13 >= (unint64_t)&v7[v8];
        if (v18 && !v17)
        {
          if (v8 < 0x10)
          {
            v19 = 0;
            do
            {
LABEL_25:
              *(int8x8_t *)(v13 + v19) = vrshrn_n_s16((int16x8_t)vmlal_u8(vmlsl_u8(vmull_u8((uint8x8_t)0x4040404040404040, *(uint8x8_t *)(v13 + v19)), *(uint8x8_t *)&v7[v19], *(uint8x8_t *)(v13 + v19)), *(uint8x8_t *)(v12 + v19), *(uint8x8_t *)&v7[v19]), 6uLL);
              v19 += 8;
            }
            while (v10 != v19);
            v14 = v8 & 0x1FFFFFF8;
            if (v10 == v8)
              goto LABEL_6;
            goto LABEL_9;
          }
          v20 = 0;
          do
          {
            *(int8x16_t *)(v13 + v20) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vmulq_s16((int16x8_t)vsubw_u8(v11, *(uint8x8_t *)&v7[v20]), (int16x8_t)vmovl_u8(*(uint8x8_t *)(v13 + v20))), *(uint8x8_t *)(v12 + v20), *(uint8x8_t *)&v7[v20]), 6uLL), (int16x8_t)vmlal_high_u8((uint16x8_t)vmulq_s16((int16x8_t)vsubw_high_u8(v11, *(uint8x16_t *)&v7[v20]), (int16x8_t)vmovl_high_u8(*(uint8x16_t *)(v13 + v20))), *(uint8x16_t *)(v12 + v20), *(uint8x16_t *)&v7[v20]), 6uLL);
            v20 += 16;
          }
          while (v9 != v20);
          if (v9 == v8)
            goto LABEL_6;
          v19 = v8 & 0x1FFFFFF0;
          v14 = v19;
          if ((v8 & 8) != 0)
            goto LABEL_25;
        }
      }
      else
      {
        v14 = 0;
      }
      do
      {
LABEL_9:
        *(_BYTE *)(v13 + v14) = ((64 - v7[v14]) * *(unsigned __int8 *)(v13 + v14)
                               + *(unsigned __int8 *)(v12 + v14) * v7[v14]
                               + 32) >> 6;
        ++v14;
      }
      while (v8 != v14);
LABEL_6:
      v13 += a2;
      v12 += v6;
      ++v5;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t blend_h_c_0(uint64_t result, uint64_t a2, unint64_t a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int16x8_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t *v19;
  uint8x16_t v20;
  int8x16_t v21;

  if (a4 >= 1)
  {
    v5 = 0;
    v6 = (3 * a5) >> 2;
    v7 = a4 & 0xFFFFFFE0;
    v8 = a4 & 0xFFFFFFF8;
    v9 = a3;
    v10 = result;
    v11 = (unsigned __int8 *)&dav1d_obmc_masks + a5;
    do
    {
      v12 = *v11;
      v13 = 64 - v12;
      if (a4 >= 8)
      {
        if (v10 >= a3 + a4 + v5 * a4 || v9 >= result + (unint64_t)a4 + v5 * a2)
        {
          v16 = vdupq_n_s16(v13);
          if (a4 < 0x20)
          {
            v17 = 0;
            do
            {
LABEL_17:
              *(int8x8_t *)(v10 + v17) = vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vmulq_s16(v16, (int16x8_t)vmovl_u8(*(uint8x8_t *)(v10 + v17))), (uint8x8_t)vdup_n_s8(v12), *(uint8x8_t *)(v9 + v17)), 6uLL);
              v17 += 8;
            }
            while (v8 != v17);
            v14 = a4 & 0xFFFFFFF8;
            if (v8 == a4)
              goto LABEL_3;
            goto LABEL_19;
          }
          v18 = 0;
          do
          {
            v19 = (int8x16_t *)(v10 + v18);
            v20 = (uint8x16_t)vdupq_n_s8(v12);
            v21 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vmulq_s16(v16, (int16x8_t)vmovl_u8(*(uint8x8_t *)(v10 + v18 + 16))), *(uint8x8_t *)v20.i8, *(uint8x8_t *)(v9 + v18 + 16)), 6uLL), (int16x8_t)vmlal_high_u8((uint16x8_t)vmulq_s16(v16, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)(v10 + v18 + 16))), v20, *(uint8x16_t *)(v9 + v18 + 16)), 6uLL);
            *v19 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vmulq_s16(v16, (int16x8_t)vmovl_u8(*(uint8x8_t *)(v10 + v18))), *(uint8x8_t *)v20.i8, *(uint8x8_t *)(v9 + v18)), 6uLL), (int16x8_t)vmlal_high_u8((uint16x8_t)vmulq_s16(v16, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)(v10 + v18))), v20, *(uint8x16_t *)(v9 + v18)), 6uLL);
            v19[1] = v21;
            v18 += 32;
          }
          while (v7 != v18);
          if (v7 == a4)
            goto LABEL_3;
          v17 = a4 & 0xFFFFFFE0;
          v14 = v17;
          if ((a4 & 0x18) != 0)
            goto LABEL_17;
        }
        else
        {
          v14 = 0;
        }
      }
      else
      {
        v14 = 0;
      }
      do
      {
LABEL_19:
        *(_BYTE *)(v10 + v14) = (*(unsigned __int8 *)(v9 + v14) * v12 + v13 * *(unsigned __int8 *)(v10 + v14) + 32) >> 6;
        ++v14;
      }
      while (a4 != v14);
LABEL_3:
      ++v11;
      v10 += a2;
      v9 += a4;
      ++v5;
      --v6;
    }
    while (v6);
  }
  return result;
}

unint64_t w_mask_444_c_0(unint64_t result, uint64_t a2, int16x8_t *a3, int16x8_t *a4, int a5, int a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int16x8_t *v16;
  int16x8_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t i;
  int v21;
  int v22;
  int v23;
  signed int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v32;
  BOOL v34;
  BOOL v36;
  BOOL v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int16x8_t v45;
  int32x4_t v46;
  int32x4_t v47;
  uint16x8_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  uint64_t v53;
  int16x8_t *v54;
  int16x8_t *v55;
  int16x8_t v56;
  int16x8_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  uint32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  uint32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int8x16x2_t v80;
  int8x16x2_t v81;
  int8x16x4_t v82;
  int8x16x4_t v83;

  if (a5 >= 1)
  {
    v7 = 0;
    v8 = 2 * a5;
    v9 = a5 & 0xFFFFFFF0;
    v10 = a5 & 0xFFFFFFF8;
    v11.i64[0] = 0x800000008;
    v11.i64[1] = 0x800000008;
    v12.i64[0] = 0x1A0000001ALL;
    v12.i64[1] = 0x1A0000001ALL;
    v13.i64[0] = 0x2600000026;
    v13.i64[1] = 0x2600000026;
    v14.i64[0] = 0x20000000200;
    v14.i64[1] = 0x20000000200;
    v15.i64[0] = 0xFF000000FFLL;
    v15.i64[1] = 0xFF000000FFLL;
    v16 = a4;
    v17 = a3;
    v18 = a7;
    v19 = result;
    do
    {
      if (a5 < 8)
      {
        for (i = 0; i != a5; *(_BYTE *)(v18 + i++) = v24 + 38)
        {
LABEL_6:
          v21 = v17->i16[i];
          v22 = v16->i16[i];
          v23 = v21 - v22;
          if (v21 - v22 < 0)
            v23 = v22 - v21;
          v24 = (v23 + 8) >> 8;
          if (v24 >= 26)
            v24 = 26;
          v25 = ((v24 + 38) * v21 + (26 - v24) * v22 + 512) >> 10;
          if (v25 >= 255)
            v25 = 255;
          *(_BYTE *)(v19 + i) = v25 & ~(v25 >> 31);
        }
        goto LABEL_3;
      }
      i = 0;
      v26 = 2 * a5 + v8 * v7;
      v27 = (unint64_t)a4->u64 + v26;
      v28 = (unint64_t)a3->u64 + v26;
      v29 = a7 + a5 + v7 * a5;
      v30 = result + a5 + v7 * a2;
      v32 = v19 < (unint64_t)a3->u64 + v26 && (unint64_t)v17 < v30;
      v34 = v19 < v27 && (unint64_t)v16 < v30;
      v36 = v18 < v28 && (unint64_t)v17 < v29;
      v38 = v18 < v27 && (unint64_t)v16 < v29;
      v39 = v18 >= v30 || v19 >= v29;
      if (!v39 || v32 || v34 || v36 || v38)
        goto LABEL_6;
      if (a5 >= 0x10)
      {
        v53 = 0;
        v54 = v16;
        v55 = v17;
        do
        {
          v56 = *v55;
          v57 = v55[1];
          v55 += 2;
          v58 = vmovl_high_s16(v57);
          v59 = vmovl_high_s16(v56);
          v60 = vmovl_s16(*(int16x4_t *)v57.i8);
          v61 = vmovl_s16(*(int16x4_t *)v56.i8);
          v62 = *v54;
          v63 = v54[1];
          v54 += 2;
          v64 = vmovl_high_s16(v63);
          v65 = vmovl_s16(*(int16x4_t *)v63.i8);
          v66.i64[0] = 0x800000008;
          v66.i64[1] = 0x800000008;
          v67 = (uint32x4_t)vabal_s16(v66, *(int16x4_t *)v56.i8, *(int16x4_t *)v62.i8);
          v68.i64[0] = 0x800000008;
          v68.i64[1] = 0x800000008;
          v69.i64[0] = 0x800000008;
          v69.i64[1] = 0x800000008;
          v70 = (uint32x4_t)vabal_high_s16(v69, v56, v62);
          v56.i64[0] = 0x800000008;
          v56.i64[1] = 0x800000008;
          v71 = (int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16((int32x4_t)v56, v57, v63), 8uLL);
          v72 = vminq_s32((int32x4_t)vshrq_n_u32(v67, 8uLL), v12);
          v73 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_s16(v68, *(int16x4_t *)v57.i8, *(int16x4_t *)v63.i8), 8uLL), v12);
          v74 = vminq_s32((int32x4_t)vshrq_n_u32(v70, 8uLL), v12);
          v75 = vminq_s32(v71, v12);
          v83.val[3] = (int8x16_t)vaddq_s32(v75, v13);
          v83.val[1] = (int8x16_t)vaddq_s32(v74, v13);
          v83.val[2] = (int8x16_t)vaddq_s32(v73, v13);
          v83.val[0] = (int8x16_t)vaddq_s32(v72, v13);
          v76 = vmlaq_s32(vmulq_s32((int32x4_t)v83.val[3], v58), vsubq_s32(v12, v75), v64);
          v77 = vmlaq_s32(vmulq_s32((int32x4_t)v83.val[1], v59), vsubq_s32(v12, v74), vmovl_high_s16(v62));
          v78 = vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32((int32x4_t)v83.val[0], v61), vsubq_s32(v12, v72), vmovl_s16(*(int16x4_t *)v62.i8)), v14), 0xAuLL), v15);
          v79 = vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32((int32x4_t)v83.val[2], v60), vsubq_s32(v12, v73), v65), v14), 0xAuLL), v15);
          v82.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v76, v14), 0xAuLL), v15), (int32x4_t)0);
          v82.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v77, v14), 0xAuLL), v15), (int32x4_t)0);
          v82.val[2] = (int8x16_t)vmaxq_s32(v79, (int32x4_t)0);
          v82.val[0] = (int8x16_t)vmaxq_s32(v78, (int32x4_t)0);
          *(int8x16_t *)(v19 + v53) = vqtbl4q_s8(v82, (int8x16_t)xmmword_19689A980);
          *(int8x16_t *)(v18 + v53) = vqtbl4q_s8(v83, (int8x16_t)xmmword_19689A980);
          v53 += 16;
        }
        while (v9 != v53);
        if (v9 == a5)
          goto LABEL_3;
        v40 = a5 & 0xFFFFFFF0;
        i = v40;
        if ((a5 & 8) == 0)
          goto LABEL_6;
      }
      else
      {
        v40 = 0;
      }
      v41 = 2 * v40;
      do
      {
        v42 = *(int16x8_t *)((char *)v17 + v41);
        v43 = vmovl_high_s16(v42);
        v44 = vmovl_s16(*(int16x4_t *)v42.i8);
        v45 = *(int16x8_t *)((char *)v16 + v41);
        v46 = vmovl_high_s16(v45);
        v47 = vmovl_s16(*(int16x4_t *)v45.i8);
        v48 = (uint16x8_t)vabdq_s16(v42, v45);
        v49 = vminq_s32((int32x4_t)vshrq_n_u32(vaddw_u16(v11, *(uint16x4_t *)v48.i8), 8uLL), v12);
        v50 = vminq_s32((int32x4_t)vshrq_n_u32(vaddw_high_u16(v11, v48), 8uLL), v12);
        v81.val[1] = (int8x16_t)vaddq_s32(v50, v13);
        v81.val[0] = (int8x16_t)vaddq_s32(v49, v13);
        v51 = vmlaq_s32(vmulq_s32((int32x4_t)v81.val[1], v43), vsubq_s32(v12, v50), v46);
        v52 = vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32((int32x4_t)v81.val[0], v44), vsubq_s32(v12, v49), v47), v14), 0xAuLL), v15);
        v80.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v51, v14), 0xAuLL), v15), (int32x4_t)0);
        v80.val[0] = (int8x16_t)vmaxq_s32(v52, (int32x4_t)0);
        *(_QWORD *)(v19 + v40) = vqtbl2q_s8(v80, (int8x16_t)xmmword_19689A990).u64[0];
        *(_QWORD *)(v18 + v40) = vqtbl2q_s8(v81, (int8x16_t)xmmword_19689A990).u64[0];
        v40 += 8;
        v41 += 16;
      }
      while (v10 != v40);
      i = a5 & 0xFFFFFFF8;
      if (v10 != a5)
        goto LABEL_6;
LABEL_3:
      v17 = (int16x8_t *)((char *)v17 + v8);
      v16 = (int16x8_t *)((char *)v16 + v8);
      v19 += a2;
      v18 += a5;
      ++v7;
      --a6;
    }
    while (a6);
  }
  return result;
}

char *w_mask_422_c_0(char *result, uint64_t a2, unint64_t a3, unint64_t a4, int a5, int a6, unint64_t a7, unsigned int a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int32x4_t v14;
  unint64_t v15;
  uint32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int32x4_t v22;
  int8x16_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  signed int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  signed int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  BOOL v47;
  BOOL v49;
  BOOL v51;
  BOOL v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const __int16 *v58;
  const __int16 *v59;
  uint16x8_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  char *v72;
  uint32x4_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  const __int16 *v77;
  const __int16 *v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int8x16_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  uint32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  uint32x4_t v105;
  uint64_t v106;
  unint64_t v107;
  int8x16x2_t v109;
  int8x16x2_t v110;
  int16x8x2_t v111;
  int8x16x2_t v112;
  int16x8x2_t v113;
  int16x8x2_t v114;
  int16x8x2_t v115;
  int8x16x4_t v116;

  if (a5 >= 1)
  {
    v8 = 0;
    v9 = (uint64_t)a5 >> 1;
    v10 = a5 - 1;
    v107 = (v10 & 0xFFFFFFFFFFFFFFFELL) + 2;
    v11 = (v10 >> 1) + 1;
    v106 = 4 * (v10 >> 1) + 4;
    v12 = 2 * a5;
    v13 = v11 & 0xFFFFFFFFFFFFFFF0;
    v14 = vdupq_n_s32(a8);
    v15 = v11 & 0xFFFFFFFFFFFFFFF8;
    v16.i64[0] = 0x800000008;
    v16.i64[1] = 0x800000008;
    v17.i64[0] = 0x1A0000001ALL;
    v17.i64[1] = 0x1A0000001ALL;
    v18.i64[0] = 0x2600000026;
    v18.i64[1] = 0x2600000026;
    v19.i64[0] = 0x20000000200;
    v19.i64[1] = 0x20000000200;
    v20.i64[0] = 0xFF000000FFLL;
    v20.i64[1] = 0xFF000000FFLL;
    v21 = (int8x16_t)xmmword_19689A990;
    v22.i64[0] = 0x2700000027;
    v22.i64[1] = 0x2700000027;
    v23 = (int8x16_t)xmmword_19689A980;
    v24 = a4;
    v25 = a3;
    v26 = a7;
    v27 = result;
    do
    {
      if (a5 < 0xF)
      {
        v28 = 0;
LABEL_6:
        v29 = v28 >> 1;
        v30 = 2 * v28 + 2;
        do
        {
          v31 = *(__int16 *)(v25 + v30 - 2);
          v32 = *(__int16 *)(v24 + v30 - 2);
          v33 = v31 - v32;
          if (v31 - v32 < 0)
            v33 = v32 - v31;
          v34 = (v33 + 8) >> 8;
          if (v34 >= 26)
            v34 = 26;
          v35 = ((v34 + 38) * v31 + (26 - v34) * v32 + 512) >> 10;
          if (v35 >= 255)
            v35 = 255;
          v27[v28] = v35 & ~(v35 >> 31);
          v36 = *(__int16 *)(v25 + v30);
          v37 = *(__int16 *)(v24 + v30);
          v38 = v36 - v37;
          if (v36 - v37 < 0)
            v38 = v37 - v36;
          v39 = (v38 + 8) >> 8;
          if (v39 >= 26)
            v39 = 26;
          v40 = ((v39 + 38) * v36 + (26 - v39) * v37 + 512) >> 10;
          if (v40 >= 255)
            v40 = 255;
          v27[v28 + 1] = v40 & ~(v40 >> 31);
          *(_BYTE *)(v26 + v29) = (v34 - a8 + v39 + 38 + 39) >> 1;
          v28 += 2;
          ++v29;
          v30 += 4;
        }
        while ((uint64_t)v28 < a5);
        goto LABEL_3;
      }
      v28 = 0;
      v41 = v106 + v12 * v8;
      v42 = a4 + v41;
      v43 = a3 + v41;
      v44 = a7 + v11 + v8 * v9;
      v45 = &result[v107 + v8 * a2];
      v47 = (unint64_t)v27 < v43 && v25 < (unint64_t)v45;
      v49 = (unint64_t)v27 < v42 && v24 < (unint64_t)v45;
      v51 = v26 < v43 && v25 < v44;
      v53 = v26 < v42 && v24 < v44;
      v54 = v26 >= (unint64_t)v45 || (unint64_t)v27 >= v44;
      if (!v54 || v47 || v49 || v51 || v53)
        goto LABEL_6;
      if (a5 >= 0x1F)
      {
        v74 = 0;
        v75 = 0;
        v76 = v27;
        do
        {
          v77 = (const __int16 *)(v25 + v74);
          v111 = vld2q_s16(v77);
          v77 += 16;
          v113 = vld2q_s16(v77);
          v78 = (const __int16 *)(v24 + v74);
          v114 = vld2q_s16(v78);
          v78 += 16;
          v115 = vld2q_s16(v78);
          v79.i64[0] = 0x800000008;
          v79.i64[1] = 0x800000008;
          v80.i64[0] = 0x800000008;
          v80.i64[1] = 0x800000008;
          v81.i64[0] = 0x800000008;
          v81.i64[1] = 0x800000008;
          v82.i64[0] = 0x800000008;
          v82.i64[1] = 0x800000008;
          v83 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_s16(v79, *(int16x4_t *)v113.val[0].i8, *(int16x4_t *)v115.val[0].i8), 8uLL), v17);
          v84 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_s16(v80, *(int16x4_t *)v111.val[0].i8, *(int16x4_t *)v114.val[0].i8), 8uLL), v17);
          v85 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v81, v113.val[0], v115.val[0]), 8uLL), v17);
          v86 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v82, v111.val[0], v114.val[0]), 8uLL), v17);
          v87 = v23;
          v88 = vmlaq_s32(vmulq_s32(vaddq_s32(v86, v18), vmovl_high_s16(v111.val[0])), vsubq_s32(v17, v86), vmovl_high_s16(v114.val[0]));
          v89 = vmlaq_s32(vmulq_s32(vaddq_s32(v84, v18), vmovl_s16(*(int16x4_t *)v111.val[0].i8)), vsubq_s32(v17, v84), vmovl_s16(*(int16x4_t *)v114.val[0].i8));
          v90 = vmlaq_s32(vmulq_s32(vaddq_s32(v85, v18), vmovl_high_s16(v113.val[0])), vsubq_s32(v17, v85), vmovl_high_s16(v115.val[0]));
          v91.i64[0] = 0x800000008;
          v91.i64[1] = 0x800000008;
          v92 = vmlaq_s32(vmulq_s32(vaddq_s32(v83, v18), vmovl_s16(*(int16x4_t *)v113.val[0].i8)), vsubq_s32(v17, v83), vmovl_s16(*(int16x4_t *)v115.val[0].i8));
          v93 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v91, v111.val[1], v114.val[1]), 8uLL), v17);
          v94 = vaddq_s32(v93, v18);
          v95 = vmlaq_s32(vmulq_s32(v94, vmovl_high_s16(v111.val[1])), vsubq_s32(v17, v93), vmovl_high_s16(v114.val[1]));
          v93.i64[0] = 0x800000008;
          v93.i64[1] = 0x800000008;
          v96 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v93, v113.val[1], v115.val[1]), 8uLL), v17);
          v97 = vaddq_s32(v96, v18);
          v98 = vmlaq_s32(vmulq_s32(v97, vmovl_high_s16(v113.val[1])), vsubq_s32(v17, v96), vmovl_high_s16(v115.val[1]));
          v96.i64[0] = 0x800000008;
          v96.i64[1] = 0x800000008;
          v99 = (uint32x4_t)vabal_s16(v96, *(int16x4_t *)v111.val[1].i8, *(int16x4_t *)v114.val[1].i8);
          v111.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v111.val[1].i8);
          v111.val[1].i64[0] = 0x800000008;
          v111.val[1].i64[1] = 0x800000008;
          v111.val[1] = (int16x8_t)vabal_s16((int32x4_t)v111.val[1], *(int16x4_t *)v113.val[1].i8, *(int16x4_t *)v115.val[1].i8);
          v113.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v113.val[1].i8);
          v113.val[1] = (int16x8_t)vmovl_s16(*(int16x4_t *)v114.val[1].i8);
          v114.val[0] = (int16x8_t)vaddq_s32(v88, v19);
          v23 = v87;
          v114.val[1] = (int16x8_t)vmovl_s16(*(int16x4_t *)v115.val[1].i8);
          v111.val[1] = (int16x8_t)vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v111.val[1], 8uLL), v17);
          v115.val[1] = (int16x8_t)vaddq_s32(v90, v19);
          v115.val[0] = (int16x8_t)vminq_s32((int32x4_t)vshrq_n_u32(v99, 8uLL), v17);
          v100 = vaddq_s32((int32x4_t)v115.val[0], v18);
          v111.val[0] = (int16x8_t)vmlaq_s32(vmulq_s32(v100, (int32x4_t)v111.val[0]), vsubq_s32(v17, (int32x4_t)v115.val[0]), (int32x4_t)v113.val[1]);
          v115.val[0] = (int16x8_t)vaddq_s32((int32x4_t)v111.val[1], v18);
          v116.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32((int32x4_t)v114.val[0], 0xAuLL), v20), (int32x4_t)0);
          v116.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32((int32x4_t)v115.val[1], 0xAuLL), v20), (int32x4_t)0);
          v116.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v89, v19), 0xAuLL), v20), (int32x4_t)0);
          v116.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v92, v19), 0xAuLL), v20), (int32x4_t)0);
          v116.val[2] = vqtbl4q_s8(v116, v87);
          v101 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v95, v19), 0xAuLL), v20), (int32x4_t)0);
          v102 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v98, v19), 0xAuLL), v20), (int32x4_t)0);
          v115.val[1] = (int16x8_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32((int32x4_t)v111.val[0], v19), 0xAuLL), v20), (int32x4_t)0);
          v103 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32((int32x4_t)v115.val[0], (int32x4_t)v113.val[0]), vsubq_s32(v17, (int32x4_t)v111.val[1]), (int32x4_t)v114.val[1]), v19), 0xAuLL), v20), (int32x4_t)0);
          v116.val[3] = vqtbl4q_s8(*(int8x16x4_t *)v115.val[1].i8, v23);
          v111.val[0] = (int16x8_t)vaddq_s32(vsubq_s32(v84, v14), v100);
          v104 = vaddq_s32(vsubq_s32(v83, v14), (int32x4_t)v115.val[0]);
          v22.i64[0] = 0x2700000027;
          v22.i64[1] = 0x2700000027;
          vst2q_s8(v76, *(int8x16x2_t *)v116.val[2].i8);
          v76 += 32;
          v113.val[0] = (int16x8_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vaddq_s32(vsubq_s32(v86, v14), v94), v22), 1uLL);
          v105 = vshrq_n_u32((uint32x4_t)vaddq_s32(vaddq_s32(vsubq_s32(v85, v14), v97), v22), 1uLL);
          v111.val[1] = (int16x8_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)v111.val[0], v22), 1uLL);
          v113.val[1] = (int16x8_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v104, v22), 1uLL);
          *(int8x16_t *)(v26 + v75) = vqtbl4q_s8(*(int8x16x4_t *)v111.val[1].i8, v23);
          v75 += 16;
          v74 += 64;
        }
        while (v13 != v75);
        v16.i64[0] = 0x800000008;
        v16.i64[1] = 0x800000008;
        v21 = (int8x16_t)xmmword_19689A990;
        if (v11 == v13)
          goto LABEL_3;
        v55 = v11 & 0xFFFFFFFFFFFFFFF0;
        v28 = 2 * (v11 & 0xFFFFFFFFFFFFFFF0);
        if ((v11 & 8) == 0)
          goto LABEL_6;
      }
      else
      {
        v55 = 0;
      }
      v56 = 4 * v55;
      v57 = 2 * v55;
      do
      {
        v58 = (const __int16 *)(v25 + v56);
        v109 = (int8x16x2_t)vld2q_s16(v58);
        v59 = (const __int16 *)(v24 + v56);
        v110 = (int8x16x2_t)vld2q_s16(v59);
        v60 = (uint16x8_t)vabdq_s16((int16x8_t)v109.val[0], (int16x8_t)v110.val[0]);
        v61 = vminq_s32((int32x4_t)vshrq_n_u32(vaddw_u16(v16, *(uint16x4_t *)v60.i8), 8uLL), v17);
        v62 = vminq_s32((int32x4_t)vshrq_n_u32(vaddw_high_u16(v16, v60), 8uLL), v17);
        v63 = vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v62, v18), vmovl_high_s16((int16x8_t)v109.val[0])), vsubq_s32(v17, v62), vmovl_high_s16((int16x8_t)v110.val[0])), v19), 0xAuLL);
        v64 = vmovl_high_s16((int16x8_t)v109.val[1]);
        v65 = vmovl_s16(*(int16x4_t *)v109.val[1].i8);
        v66 = vmovl_high_s16((int16x8_t)v110.val[1]);
        v67 = vmovl_s16(*(int16x4_t *)v110.val[1].i8);
        v68 = vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v61, v18), vmovl_s16(*(int16x4_t *)v109.val[0].i8)), vsubq_s32(v17, v61), vmovl_s16(*(int16x4_t *)v110.val[0].i8)), v19), 0xAuLL);
        v109.val[0] = (int8x16_t)vabdq_s16((int16x8_t)v109.val[1], (int16x8_t)v110.val[1]);
        v109.val[1] = (int8x16_t)vminq_s32((int32x4_t)vshrq_n_u32(vaddw_u16(v16, *(uint16x4_t *)v109.val[0].i8), 8uLL), v17);
        v109.val[0] = (int8x16_t)vminq_s32((int32x4_t)vshrq_n_u32(vaddw_high_u16(v16, (uint16x8_t)v109.val[0]), 8uLL), v17);
        v110.val[0] = (int8x16_t)vaddq_s32((int32x4_t)v109.val[0], v18);
        v110.val[1] = (int8x16_t)vaddq_s32((int32x4_t)v109.val[1], v18);
        v69 = vmlaq_s32(vmulq_s32((int32x4_t)v110.val[1], v65), vsubq_s32(v17, (int32x4_t)v109.val[1]), v67);
        v109.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(v63, v20), (int32x4_t)0);
        v70 = vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32((int32x4_t)v110.val[0], v64), vsubq_s32(v17, (int32x4_t)v109.val[0]), v66), v19), 0xAuLL);
        v71 = vminq_s32(vshrq_n_s32(vaddq_s32(v69, v19), 0xAuLL), v20);
        v109.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(v68, v20), (int32x4_t)0);
        v112.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(v70, v20), (int32x4_t)0);
        v112.val[0] = (int8x16_t)vmaxq_s32(v71, (int32x4_t)0);
        v72 = &v27[v57];
        v109.val[0].i64[0] = vqtbl2q_s8(v109, v21).u64[0];
        v109.val[1].i64[0] = vqtbl2q_s8(v112, v21).u64[0];
        v110.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vaddq_s32(vsubq_s32(v62, v14), (int32x4_t)v110.val[0]), v22), 1uLL);
        v73 = vshrq_n_u32((uint32x4_t)vaddq_s32(vaddq_s32(vsubq_s32(v61, v14), (int32x4_t)v110.val[1]), v22), 1uLL);
        vst2_s8(v72, (int8x8x2_t)v109.val[0]);
        *(_QWORD *)(v26 + (v55 & 0x7FFFFFFFFFFFFFF8)) = vqtbl2q_s8(v110, v21).u64[0];
        v55 += 8;
        v56 += 32;
        v57 += 16;
      }
      while (v15 != v55);
      v28 = 2 * (v11 & 0xFFFFFFFFFFFFFFF8);
      if (v11 != v15)
        goto LABEL_6;
LABEL_3:
      v25 += v12;
      v24 += v12;
      v27 += a2;
      v26 += v9;
      ++v8;
      --a6;
    }
    while (a6);
  }
  return result;
}

